
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00022738  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00022738  00022738  00032738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c44  20000000  00022740  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00040c44  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00040c44  2**0
                  CONTENTS
  5 .bss          00009d98  20000c48  00023388  00040c44  2**3
                  ALLOC
  6 .stack        00010000  2000a9e0  0002d120  00040c44  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00040c44  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00040c72  2**0
                  CONTENTS, READONLY
  9 .debug_info   0010440a  00000000  00000000  00040ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00014680  00000000  00000000  001450d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002a635  00000000  00000000  00159755  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004c30  00000000  00000000  00183d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004688  00000000  00000000  001889ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00068be4  00000000  00000000  0018d042  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006dd31  00000000  00000000  001f5c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014fc97  00000000  00000000  00263957  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00015064  00000000  00000000  003b35f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 a9 01 20 85 17 00 00 09 18 00 00 09 18 00 00     ... ............
      10:	09 18 00 00 09 18 00 00 09 18 00 00 00 00 00 00     ................
	...
      2c:	09 18 00 00 09 18 00 00 00 00 00 00 09 18 00 00     ................
      3c:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      4c:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      5c:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      6c:	31 ac 00 00 05 96 00 00 09 18 00 00 09 18 00 00     1...............
      7c:	09 18 00 00 15 96 00 00 25 96 00 00 35 96 00 00     ........%...5...
      8c:	45 96 00 00 55 96 00 00 65 96 00 00 09 18 00 00     E...U...e.......
      9c:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      ac:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      bc:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      cc:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      dc:	09 18 00 00 09 18 00 00 09 18 00 00 00 00 00 00     ................
	...
      f4:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     104:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     114:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     124:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     134:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     144:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     154:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     164:	09 18 00 00 a9 c2 00 00 c5 c2 00 00 e1 c2 00 00     ................
     174:	fd c2 00 00 09 18 00 00 19 88 00 00 f1 02 01 00     ................
     184:	01 03 01 00 11 03 01 00 21 03 01 00 09 18 00 00     ........!.......
     194:	0d cd 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     1a4:	09 18 00 00 09 18 00 00 09 18 00 00 29 cd 00 00     ............)...
     1b4:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     1c4:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     1d4:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     1e4:	09 18 00 00 09 18 00 00 ed d9 00 00 09 da 00 00     ................
     1f4:	25 da 00 00 09 18 00 00 41 da 00 00 5d da 00 00     %.......A...]...
     204:	79 da 00 00 09 18 00 00 09 18 00 00 09 18 00 00     y...............
     214:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     224:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     234:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     244:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     254:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000c48 	.word	0x20000c48
     280:	00000000 	.word	0x00000000
     284:	00022740 	.word	0x00022740

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00022740 	.word	0x00022740
     2c4:	20000c4c 	.word	0x20000c4c
     2c8:	00022740 	.word	0x00022740
     2cc:	00000000 	.word	0x00000000

000002d0 <wdt_set_timeout_period>:
 * \retval -1 Always on or enabled, can't set again.
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	60f8      	str	r0, [r7, #12]
     2d8:	60b9      	str	r1, [r7, #8]
     2da:	4613      	mov	r3, r2
     2dc:	80fb      	strh	r3, [r7, #6]
	ASSERT(wdt && wdt->dev.hw);
     2de:	68fb      	ldr	r3, [r7, #12]
     2e0:	2b00      	cmp	r3, #0
     2e2:	d005      	beq.n	2f0 <wdt_set_timeout_period+0x20>
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	681b      	ldr	r3, [r3, #0]
     2e8:	2b00      	cmp	r3, #0
     2ea:	d001      	beq.n	2f0 <wdt_set_timeout_period+0x20>
     2ec:	2301      	movs	r3, #1
     2ee:	e000      	b.n	2f2 <wdt_set_timeout_period+0x22>
     2f0:	2300      	movs	r3, #0
     2f2:	226f      	movs	r2, #111	; 0x6f
     2f4:	4907      	ldr	r1, [pc, #28]	; (314 <wdt_set_timeout_period+0x44>)
     2f6:	4618      	mov	r0, r3
     2f8:	4b07      	ldr	r3, [pc, #28]	; (318 <wdt_set_timeout_period+0x48>)
     2fa:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
     2fc:	68fb      	ldr	r3, [r7, #12]
     2fe:	88fa      	ldrh	r2, [r7, #6]
     300:	68b9      	ldr	r1, [r7, #8]
     302:	4618      	mov	r0, r3
     304:	4b05      	ldr	r3, [pc, #20]	; (31c <wdt_set_timeout_period+0x4c>)
     306:	4798      	blx	r3
     308:	4603      	mov	r3, r0
}
     30a:	4618      	mov	r0, r3
     30c:	3710      	adds	r7, #16
     30e:	46bd      	mov	sp, r7
     310:	bd80      	pop	{r7, pc}
     312:	bf00      	nop
     314:	000200d0 	.word	0x000200d0
     318:	000080d1 	.word	0x000080d1
     31c:	0001050d 	.word	0x0001050d

00000320 <wdt_enable>:
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
     320:	b580      	push	{r7, lr}
     322:	b082      	sub	sp, #8
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
	ASSERT(wdt && wdt->dev.hw);
     328:	687b      	ldr	r3, [r7, #4]
     32a:	2b00      	cmp	r3, #0
     32c:	d005      	beq.n	33a <wdt_enable+0x1a>
     32e:	687b      	ldr	r3, [r7, #4]
     330:	681b      	ldr	r3, [r3, #0]
     332:	2b00      	cmp	r3, #0
     334:	d001      	beq.n	33a <wdt_enable+0x1a>
     336:	2301      	movs	r3, #1
     338:	e000      	b.n	33c <wdt_enable+0x1c>
     33a:	2300      	movs	r3, #0
     33c:	228c      	movs	r2, #140	; 0x8c
     33e:	4906      	ldr	r1, [pc, #24]	; (358 <wdt_enable+0x38>)
     340:	4618      	mov	r0, r3
     342:	4b06      	ldr	r3, [pc, #24]	; (35c <wdt_enable+0x3c>)
     344:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
     346:	687b      	ldr	r3, [r7, #4]
     348:	4618      	mov	r0, r3
     34a:	4b05      	ldr	r3, [pc, #20]	; (360 <wdt_enable+0x40>)
     34c:	4798      	blx	r3
     34e:	4603      	mov	r3, r0
}
     350:	4618      	mov	r0, r3
     352:	3708      	adds	r7, #8
     354:	46bd      	mov	sp, r7
     356:	bd80      	pop	{r7, pc}
     358:	000200d0 	.word	0x000200d0
     35c:	000080d1 	.word	0x000080d1
     360:	0001069d 	.word	0x0001069d

00000364 <wdt_feed>:
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
	ASSERT(wdt && wdt->dev.hw);
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	2b00      	cmp	r3, #0
     370:	d005      	beq.n	37e <wdt_feed+0x1a>
     372:	687b      	ldr	r3, [r7, #4]
     374:	681b      	ldr	r3, [r3, #0]
     376:	2b00      	cmp	r3, #0
     378:	d001      	beq.n	37e <wdt_feed+0x1a>
     37a:	2301      	movs	r3, #1
     37c:	e000      	b.n	380 <wdt_feed+0x1c>
     37e:	2300      	movs	r3, #0
     380:	22a9      	movs	r2, #169	; 0xa9
     382:	4906      	ldr	r1, [pc, #24]	; (39c <wdt_feed+0x38>)
     384:	4618      	mov	r0, r3
     386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <wdt_feed+0x3c>)
     388:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	4618      	mov	r0, r3
     38e:	4b05      	ldr	r3, [pc, #20]	; (3a4 <wdt_feed+0x40>)
     390:	4798      	blx	r3
     392:	4603      	mov	r3, r0
}
     394:	4618      	mov	r0, r3
     396:	3708      	adds	r7, #8
     398:	46bd      	mov	sp, r7
     39a:	bd80      	pop	{r7, pc}
     39c:	000200d0 	.word	0x000200d0
     3a0:	000080d1 	.word	0x000080d1
     3a4:	000106e9 	.word	0x000106e9

000003a8 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
	{
	data = v;
     3b2:	687b      	ldr	r3, [r7, #4]
     3b4:	683a      	ldr	r2, [r7, #0]
     3b6:	601a      	str	r2, [r3, #0]
	}
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	4618      	mov	r0, r3
     3bc:	370c      	adds	r7, #12
     3be:	46bd      	mov	sp, r7
     3c0:	bc80      	pop	{r7}
     3c2:	4770      	bx	lr

000003c4 <_ZN5eventC1Ev>:
	private:
		
		
	};

inline event::event()
     3c4:	b580      	push	{r7, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	af00      	add	r7, sp, #0
     3ca:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3d2:	801a      	strh	r2, [r3, #0]
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3da:	805a      	strh	r2, [r3, #2]
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	2200      	movs	r2, #0
     3e0:	605a      	str	r2, [r3, #4]
     3e2:	687b      	ldr	r3, [r7, #4]
     3e4:	3308      	adds	r3, #8
     3e6:	2100      	movs	r1, #0
     3e8:	4618      	mov	r0, r3
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <_ZN5eventC1Ev+0x3c>)
     3ec:	4798      	blx	r3
     3ee:	687b      	ldr	r3, [r7, #4]
     3f0:	2200      	movs	r2, #0
     3f2:	60da      	str	r2, [r3, #12]
	{
		
	}
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	4618      	mov	r0, r3
     3f8:	3708      	adds	r7, #8
     3fa:	46bd      	mov	sp, r7
     3fc:	bd80      	pop	{r7, pc}
     3fe:	bf00      	nop
     400:	000003a9 	.word	0x000003a9

00000404 <_ZL11ARINCTimeUpPK10timer_task>:
ALU_Class	*ptrALUClass;

//static TaskHandler_Class*	taskList(NULL);

static void CheckPeriodicTask(void);
static void ARINCTimeUp(const struct timer_task *const timer_task){
     404:	b480      	push	{r7}
     406:	b083      	sub	sp, #12
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
	ptrALUClass->arincTXTimeUP=true;
     40c:	4b04      	ldr	r3, [pc, #16]	; (420 <_ZL11ARINCTimeUpPK10timer_task+0x1c>)
     40e:	681b      	ldr	r3, [r3, #0]
     410:	2201      	movs	r2, #1
     412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
     416:	bf00      	nop
     418:	370c      	adds	r7, #12
     41a:	46bd      	mov	sp, r7
     41c:	bc80      	pop	{r7}
     41e:	4770      	bx	lr
     420:	20000c7c 	.word	0x20000c7c

00000424 <_ZN9ALU_ClassC1Ev>:


// default constructor
ALU_Class::ALU_Class()
     424:	b580      	push	{r7, lr}
     426:	b082      	sub	sp, #8
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
     42c:	687b      	ldr	r3, [r7, #4]
     42e:	4618      	mov	r0, r3
     430:	4b09      	ldr	r3, [pc, #36]	; (458 <_ZN9ALU_ClassC1Ev+0x34>)
     432:	4798      	blx	r3
{
	
	//taskList=(list_descriptor*)taskStorage;
	ptrALUClass=this;
     434:	4a09      	ldr	r2, [pc, #36]	; (45c <_ZN9ALU_ClassC1Ev+0x38>)
     436:	687b      	ldr	r3, [r7, #4]
     438:	6013      	str	r3, [r2, #0]
	clk_rate       = 1000;
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     440:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	timeout_period = 4096*1024;
     444:	687b      	ldr	r3, [r7, #4]
     446:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     44a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
} //ALU_Class
     44e:	687b      	ldr	r3, [r7, #4]
     450:	4618      	mov	r0, r3
     452:	3708      	adds	r7, #8
     454:	46bd      	mov	sp, r7
     456:	bd80      	pop	{r7, pc}
     458:	00004679 	.word	0x00004679
     45c:	20000c7c 	.word	0x20000c7c

00000460 <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
     468:	687b      	ldr	r3, [r7, #4]
     46a:	4618      	mov	r0, r3
     46c:	4b03      	ldr	r3, [pc, #12]	; (47c <_ZN9ALU_ClassD1Ev+0x1c>)
     46e:	4798      	blx	r3
{
} //~ALU_Class
     470:	687b      	ldr	r3, [r7, #4]
     472:	4618      	mov	r0, r3
     474:	3708      	adds	r7, #8
     476:	46bd      	mov	sp, r7
     478:	bd80      	pop	{r7, pc}
     47a:	bf00      	nop
     47c:	00004699 	.word	0x00004699

00000480 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     480:	b580      	push	{r7, lr}
     482:	b08a      	sub	sp, #40	; 0x28
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
	uint32_t	s;
	event	e;
     488:	f107 030c 	add.w	r3, r7, #12
     48c:	4618      	mov	r0, r3
     48e:	4b39      	ldr	r3, [pc, #228]	; (574 <_ZN9ALU_Class4InitEv+0xf4>)
     490:	4798      	blx	r3
	ptrPbit=&pBit;
     492:	687b      	ldr	r3, [r7, #4]
     494:	4a38      	ldr	r2, [pc, #224]	; (578 <_ZN9ALU_Class4InitEv+0xf8>)
     496:	621a      	str	r2, [r3, #32]
	StartLivePulse();
     498:	6878      	ldr	r0, [r7, #4]
     49a:	4b38      	ldr	r3, [pc, #224]	; (57c <_ZN9ALU_Class4InitEv+0xfc>)
     49c:	4798      	blx	r3
		
	if (hvac.Init())
     49e:	4838      	ldr	r0, [pc, #224]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4a0:	4b38      	ldr	r3, [pc, #224]	; (584 <_ZN9ALU_Class4InitEv+0x104>)
     4a2:	4798      	blx	r3
     4a4:	4603      	mov	r3, r0
     4a6:	2b00      	cmp	r3, #0
     4a8:	d05f      	beq.n	56a <_ZN9ALU_Class4InitEv+0xea>
	{
		cBit.isOK=true;
     4aa:	4b37      	ldr	r3, [pc, #220]	; (588 <_ZN9ALU_Class4InitEv+0x108>)
     4ac:	2201      	movs	r2, #1
     4ae:	701a      	strb	r2, [r3, #0]
		hvac.SetCRCConfigData();
     4b0:	4833      	ldr	r0, [pc, #204]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4b2:	4b36      	ldr	r3, [pc, #216]	; (58c <_ZN9ALU_Class4InitEv+0x10c>)
     4b4:	4798      	blx	r3
		SetInitialConfiguration(configuration);
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	332c      	adds	r3, #44	; 0x2c
     4ba:	4619      	mov	r1, r3
     4bc:	6878      	ldr	r0, [r7, #4]
     4be:	4b34      	ldr	r3, [pc, #208]	; (590 <_ZN9ALU_Class4InitEv+0x110>)
     4c0:	4798      	blx	r3
		memory.WriteDefaultState();
     4c2:	4834      	ldr	r0, [pc, #208]	; (594 <_ZN9ALU_Class4InitEv+0x114>)
     4c4:	4b34      	ldr	r3, [pc, #208]	; (598 <_ZN9ALU_Class4InitEv+0x118>)
     4c6:	4798      	blx	r3
		hvac.SetInitialState();
     4c8:	4834      	ldr	r0, [pc, #208]	; (59c <_ZN9ALU_Class4InitEv+0x11c>)
     4ca:	4b35      	ldr	r3, [pc, #212]	; (5a0 <_ZN9ALU_Class4InitEv+0x120>)
     4cc:	4798      	blx	r3
		uhr.Init();
     4ce:	4835      	ldr	r0, [pc, #212]	; (5a4 <_ZN9ALU_Class4InitEv+0x124>)
     4d0:	4b35      	ldr	r3, [pc, #212]	; (5a8 <_ZN9ALU_Class4InitEv+0x128>)
     4d2:	4798      	blx	r3
		hvac.saveCurrentState();
     4d4:	482a      	ldr	r0, [pc, #168]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4d6:	4b35      	ldr	r3, [pc, #212]	; (5ac <_ZN9ALU_Class4InitEv+0x12c>)
     4d8:	4798      	blx	r3
		listener.Init();
     4da:	4835      	ldr	r0, [pc, #212]	; (5b0 <_ZN9ALU_Class4InitEv+0x130>)
     4dc:	4b35      	ldr	r3, [pc, #212]	; (5b4 <_ZN9ALU_Class4InitEv+0x134>)
     4de:	4798      	blx	r3
		
		if (!(interfaces.Init()))
     4e0:	4835      	ldr	r0, [pc, #212]	; (5b8 <_ZN9ALU_Class4InitEv+0x138>)
     4e2:	4b36      	ldr	r3, [pc, #216]	; (5bc <_ZN9ALU_Class4InitEv+0x13c>)
     4e4:	4798      	blx	r3
     4e6:	4603      	mov	r3, r0
     4e8:	f083 0301 	eor.w	r3, r3, #1
     4ec:	b2db      	uxtb	r3, r3
     4ee:	2b00      	cmp	r3, #0
     4f0:	d00e      	beq.n	510 <_ZN9ALU_Class4InitEv+0x90>
		{
			NotifyError(kARINCINnterfaceError,s);
     4f2:	f107 031c 	add.w	r3, r7, #28
     4f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
     4f8:	4618      	mov	r0, r3
     4fa:	4b31      	ldr	r3, [pc, #196]	; (5c0 <_ZN9ALU_Class4InitEv+0x140>)
     4fc:	4798      	blx	r3
     4fe:	f107 031c 	add.w	r3, r7, #28
     502:	461a      	mov	r2, r3
     504:	2100      	movs	r1, #0
     506:	6878      	ldr	r0, [r7, #4]
     508:	4b2e      	ldr	r3, [pc, #184]	; (5c4 <_ZN9ALU_Class4InitEv+0x144>)
     50a:	4798      	blx	r3
			return s;
     50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     50e:	e02d      	b.n	56c <_ZN9ALU_Class4InitEv+0xec>
		}
		else
		{
			arincTimer.Start_periodic_task(FUNC_PTR(ARINCTimeUp),500);
     510:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     514:	492c      	ldr	r1, [pc, #176]	; (5c8 <_ZN9ALU_Class4InitEv+0x148>)
     516:	482d      	ldr	r0, [pc, #180]	; (5cc <_ZN9ALU_Class4InitEv+0x14c>)
     518:	4b2d      	ldr	r3, [pc, #180]	; (5d0 <_ZN9ALU_Class4InitEv+0x150>)
     51a:	4798      	blx	r3
			
			s=pBit.CheckCurrentStatus(status);
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
     522:	4619      	mov	r1, r3
     524:	4814      	ldr	r0, [pc, #80]	; (578 <_ZN9ALU_Class4InitEv+0xf8>)
     526:	4b2b      	ldr	r3, [pc, #172]	; (5d4 <_ZN9ALU_Class4InitEv+0x154>)
     528:	4798      	blx	r3
     52a:	6278      	str	r0, [r7, #36]	; 0x24
			if (s>0)
     52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     52e:	2b00      	cmp	r3, #0
     530:	d00e      	beq.n	550 <_ZN9ALU_Class4InitEv+0xd0>
			{
				NotifyError(kpBITError,s);
     532:	f107 0320 	add.w	r3, r7, #32
     536:	6a79      	ldr	r1, [r7, #36]	; 0x24
     538:	4618      	mov	r0, r3
     53a:	4b21      	ldr	r3, [pc, #132]	; (5c0 <_ZN9ALU_Class4InitEv+0x140>)
     53c:	4798      	blx	r3
     53e:	f107 0320 	add.w	r3, r7, #32
     542:	461a      	mov	r2, r3
     544:	2101      	movs	r1, #1
     546:	6878      	ldr	r0, [r7, #4]
     548:	4b1e      	ldr	r3, [pc, #120]	; (5c4 <_ZN9ALU_Class4InitEv+0x144>)
     54a:	4798      	blx	r3
				return s;
     54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     54e:	e00d      	b.n	56c <_ZN9ALU_Class4InitEv+0xec>
			}
			else
			{
				InitTaskArray();
     550:	687b      	ldr	r3, [r7, #4]
     552:	4618      	mov	r0, r3
     554:	4b20      	ldr	r3, [pc, #128]	; (5d8 <_ZN9ALU_Class4InitEv+0x158>)
     556:	4798      	blx	r3
				EnableWatchDog();
     558:	6878      	ldr	r0, [r7, #4]
     55a:	4b20      	ldr	r3, [pc, #128]	; (5dc <_ZN9ALU_Class4InitEv+0x15c>)
     55c:	4798      	blx	r3
				PrepareNewEvent(kALUEventSimpleStart);
     55e:	2200      	movs	r2, #0
     560:	f44f 7182 	mov.w	r1, #260	; 0x104
     564:	6878      	ldr	r0, [r7, #4]
     566:	4b1e      	ldr	r3, [pc, #120]	; (5e0 <_ZN9ALU_Class4InitEv+0x160>)
     568:	4798      	blx	r3
	//while(1);

	

	  
	return s;
     56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     56c:	4618      	mov	r0, r3
     56e:	3728      	adds	r7, #40	; 0x28
     570:	46bd      	mov	sp, r7
     572:	bd80      	pop	{r7, pc}
     574:	000003c5 	.word	0x000003c5
     578:	20000c64 	.word	0x20000c64
     57c:	0000083d 	.word	0x0000083d
     580:	200081d8 	.word	0x200081d8
     584:	000030fd 	.word	0x000030fd
     588:	20000c78 	.word	0x20000c78
     58c:	000042f5 	.word	0x000042f5
     590:	00000889 	.word	0x00000889
     594:	20002d88 	.word	0x20002d88
     598:	00002b91 	.word	0x00002b91
     59c:	200083f0 	.word	0x200083f0
     5a0:	00001159 	.word	0x00001159
     5a4:	200013f8 	.word	0x200013f8
     5a8:	000016dd 	.word	0x000016dd
     5ac:	00004169 	.word	0x00004169
     5b0:	200099f8 	.word	0x200099f8
     5b4:	00014c05 	.word	0x00014c05
     5b8:	20001670 	.word	0x20001670
     5bc:	00001dc1 	.word	0x00001dc1
     5c0:	000003a9 	.word	0x000003a9
     5c4:	000009e1 	.word	0x000009e1
     5c8:	00000405 	.word	0x00000405
     5cc:	2000a348 	.word	0x2000a348
     5d0:	00017b41 	.word	0x00017b41
     5d4:	00002d69 	.word	0x00002d69
     5d8:	000046ad 	.word	0x000046ad
     5dc:	000007e1 	.word	0x000007e1
     5e0:	00000a49 	.word	0x00000a49

000005e4 <_ZN9ALU_Class13RunControllerEv>:

uint32_t	ALU_Class::RunController(void){
     5e4:	b590      	push	{r4, r7, lr}
     5e6:	b089      	sub	sp, #36	; 0x24
     5e8:	af02      	add	r7, sp, #8
     5ea:	6078      	str	r0, [r7, #4]
	event e;
     5ec:	f107 0308 	add.w	r3, r7, #8
     5f0:	4618      	mov	r0, r3
     5f2:	4b25      	ldr	r3, [pc, #148]	; (688 <_ZN9ALU_Class13RunControllerEv+0xa4>)
     5f4:	4798      	blx	r3
	
	
	   while (pBit)
     5f6:	4825      	ldr	r0, [pc, #148]	; (68c <_ZN9ALU_Class13RunControllerEv+0xa8>)
     5f8:	4b25      	ldr	r3, [pc, #148]	; (690 <_ZN9ALU_Class13RunControllerEv+0xac>)
     5fa:	4798      	blx	r3
     5fc:	4603      	mov	r3, r0
     5fe:	2b00      	cmp	r3, #0
     600:	d03c      	beq.n	67c <_ZN9ALU_Class13RunControllerEv+0x98>
	   {
		   listener.eventHandler=&ALU_Class::CheckPeriodicTask;
     602:	4b24      	ldr	r3, [pc, #144]	; (694 <_ZN9ALU_Class13RunControllerEv+0xb0>)
     604:	4a24      	ldr	r2, [pc, #144]	; (698 <_ZN9ALU_Class13RunControllerEv+0xb4>)
     606:	615a      	str	r2, [r3, #20]
		   while (!arincTXTimeUP)
     608:	687b      	ldr	r3, [r7, #4]
     60a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
     60e:	b2db      	uxtb	r3, r3
     610:	f083 0301 	eor.w	r3, r3, #1
     614:	b2db      	uxtb	r3, r3
     616:	2b00      	cmp	r3, #0
     618:	d028      	beq.n	66c <_ZN9ALU_Class13RunControllerEv+0x88>
		   	{
				   if (listener.WaitForEvent(e, kALUEventClass, kALUControllerEvent,8))
     61a:	f107 0108 	add.w	r1, r7, #8
     61e:	2308      	movs	r3, #8
     620:	9300      	str	r3, [sp, #0]
     622:	2302      	movs	r3, #2
     624:	f44f 7240 	mov.w	r2, #768	; 0x300
     628:	481a      	ldr	r0, [pc, #104]	; (694 <_ZN9ALU_Class13RunControllerEv+0xb0>)
     62a:	4c1c      	ldr	r4, [pc, #112]	; (69c <_ZN9ALU_Class13RunControllerEv+0xb8>)
     62c:	47a0      	blx	r4
     62e:	4603      	mov	r3, r0
     630:	2b00      	cmp	r3, #0
     632:	d006      	beq.n	642 <_ZN9ALU_Class13RunControllerEv+0x5e>
				   {
					   HandleControllerEvent(e);
     634:	f107 0308 	add.w	r3, r7, #8
     638:	4619      	mov	r1, r3
     63a:	6878      	ldr	r0, [r7, #4]
     63c:	4b18      	ldr	r3, [pc, #96]	; (6a0 <_ZN9ALU_Class13RunControllerEv+0xbc>)
     63e:	4798      	blx	r3
     640:	e7e2      	b.n	608 <_ZN9ALU_Class13RunControllerEv+0x24>
					   
				   }else if(listener.WaitForEvent(e, kHVACEventClass, kHVACEventDoPendingTasks,4)){
     642:	f107 0108 	add.w	r1, r7, #8
     646:	2304      	movs	r3, #4
     648:	9300      	str	r3, [sp, #0]
     64a:	2303      	movs	r3, #3
     64c:	f44f 7200 	mov.w	r2, #512	; 0x200
     650:	4810      	ldr	r0, [pc, #64]	; (694 <_ZN9ALU_Class13RunControllerEv+0xb0>)
     652:	4c12      	ldr	r4, [pc, #72]	; (69c <_ZN9ALU_Class13RunControllerEv+0xb8>)
     654:	47a0      	blx	r4
     656:	4603      	mov	r3, r0
     658:	2b00      	cmp	r3, #0
     65a:	d106      	bne.n	66a <_ZN9ALU_Class13RunControllerEv+0x86>
					   break;
				   }else{
						PrepareNewEvent(kALUEventSimpleResume);
     65c:	2200      	movs	r2, #0
     65e:	f240 1107 	movw	r1, #263	; 0x107
     662:	6878      	ldr	r0, [r7, #4]
     664:	4b0f      	ldr	r3, [pc, #60]	; (6a4 <_ZN9ALU_Class13RunControllerEv+0xc0>)
     666:	4798      	blx	r3
		   while (!arincTXTimeUP)
     668:	e7ce      	b.n	608 <_ZN9ALU_Class13RunControllerEv+0x24>
					   break;
     66a:	bf00      	nop
				   }
			 }
			//arinc.TrasmitSingleLabel();
			ExecutePendingTask();
     66c:	6878      	ldr	r0, [r7, #4]
     66e:	4b0e      	ldr	r3, [pc, #56]	; (6a8 <_ZN9ALU_Class13RunControllerEv+0xc4>)
     670:	4798      	blx	r3
			arincTXTimeUP=false;
     672:	687b      	ldr	r3, [r7, #4]
     674:	2200      	movs	r2, #0
     676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	   while (pBit)
     67a:	e7bc      	b.n	5f6 <_ZN9ALU_Class13RunControllerEv+0x12>
// 			
// 		}
// 		interfaces.CheckCommunication();
// 	}
	
}
     67c:	bf00      	nop
     67e:	4618      	mov	r0, r3
     680:	371c      	adds	r7, #28
     682:	46bd      	mov	sp, r7
     684:	bd90      	pop	{r4, r7, pc}
     686:	bf00      	nop
     688:	000003c5 	.word	0x000003c5
     68c:	20000c64 	.word	0x20000c64
     690:	00002d4f 	.word	0x00002d4f
     694:	200099f8 	.word	0x200099f8
     698:	00000c35 	.word	0x00000c35
     69c:	00014ce5 	.word	0x00014ce5
     6a0:	000006ad 	.word	0x000006ad
     6a4:	00000a49 	.word	0x00000a49
     6a8:	00000a95 	.word	0x00000a95

000006ac <_ZN9ALU_Class21HandleControllerEventER5event>:



void ALU_Class::HandleControllerEvent(event& e)
{
     6ac:	b580      	push	{r7, lr}
     6ae:	b086      	sub	sp, #24
     6b0:	af00      	add	r7, sp, #0
     6b2:	6078      	str	r0, [r7, #4]
     6b4:	6039      	str	r1, [r7, #0]

	alu.callingTask = alu.currentTask;
     6b6:	4b28      	ldr	r3, [pc, #160]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6b8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
     6bc:	4a26      	ldr	r2, [pc, #152]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6be:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	alu.currentTask = e.data.wordData[0];
     6c2:	683b      	ldr	r3, [r7, #0]
     6c4:	891b      	ldrh	r3, [r3, #8]
     6c6:	461a      	mov	r2, r3
     6c8:	4b23      	ldr	r3, [pc, #140]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6ca:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	alu.taskEntryTime= hvacTimer.Get_ticks();
     6ce:	4823      	ldr	r0, [pc, #140]	; (75c <_ZN9ALU_Class21HandleControllerEventER5event+0xb0>)
     6d0:	4b23      	ldr	r3, [pc, #140]	; (760 <_ZN9ALU_Class21HandleControllerEventER5event+0xb4>)
     6d2:	4798      	blx	r3
     6d4:	4602      	mov	r2, r0
     6d6:	4b20      	ldr	r3, [pc, #128]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6d8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154




	switch (alu.currentTask)
     6dc:	4b1e      	ldr	r3, [pc, #120]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6de:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
     6e2:	f240 1205 	movw	r2, #261	; 0x105
     6e6:	4293      	cmp	r3, r2
     6e8:	d026      	beq.n	738 <_ZN9ALU_Class21HandleControllerEventER5event+0x8c>
     6ea:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     6ee:	d205      	bcs.n	6fc <_ZN9ALU_Class21HandleControllerEventER5event+0x50>
     6f0:	2b03      	cmp	r3, #3
     6f2:	d01a      	beq.n	72a <_ZN9ALU_Class21HandleControllerEventER5event+0x7e>
     6f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
     6f8:	d008      	beq.n	70c <_ZN9ALU_Class21HandleControllerEventER5event+0x60>
     6fa:	e024      	b.n	746 <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
     6fc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     700:	d00e      	beq.n	720 <_ZN9ALU_Class21HandleControllerEventER5event+0x74>
     702:	f240 1207 	movw	r2, #263	; 0x107
     706:	4293      	cmp	r3, r2
     708:	d005      	beq.n	716 <_ZN9ALU_Class21HandleControllerEventER5event+0x6a>
     70a:	e01c      	b.n	746 <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
	{
		case kALUEventSimpleStart:
			hvac.Start(1);
     70c:	2101      	movs	r1, #1
     70e:	4815      	ldr	r0, [pc, #84]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     710:	4b15      	ldr	r3, [pc, #84]	; (768 <_ZN9ALU_Class21HandleControllerEventER5event+0xbc>)
     712:	4798      	blx	r3
		break;
     714:	e01c      	b.n	750 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleResume:
			hvac.ControllerResume(1);
     716:	2101      	movs	r1, #1
     718:	4812      	ldr	r0, [pc, #72]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     71a:	4b14      	ldr	r3, [pc, #80]	; (76c <_ZN9ALU_Class21HandleControllerEventER5event+0xc0>)
     71c:	4798      	blx	r3
		break;
     71e:	e017      	b.n	750 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleStop:
			hvac.Stop(0);
     720:	2100      	movs	r1, #0
     722:	4810      	ldr	r0, [pc, #64]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     724:	4b12      	ldr	r3, [pc, #72]	; (770 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     726:	4798      	blx	r3
		break;
     728:	e012      	b.n	750 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     72a:	f107 0308 	add.w	r3, r7, #8
     72e:	4911      	ldr	r1, [pc, #68]	; (774 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     730:	4618      	mov	r0, r3
     732:	4b11      	ldr	r3, [pc, #68]	; (778 <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     734:	4798      	blx	r3
		break;
     736:	e00b      	b.n	750 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUEventCheckPheripherals:
			interfaces.CheckCommunication();
     738:	f107 0310 	add.w	r3, r7, #16
     73c:	490d      	ldr	r1, [pc, #52]	; (774 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     73e:	4618      	mov	r0, r3
     740:	4b0d      	ldr	r3, [pc, #52]	; (778 <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     742:	4798      	blx	r3
		break;
     744:	e004      	b.n	750 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		default:
			hvac.Stop(0);
     746:	2100      	movs	r1, #0
     748:	4806      	ldr	r0, [pc, #24]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     74a:	4b09      	ldr	r3, [pc, #36]	; (770 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     74c:	4798      	blx	r3
		break;
     74e:	bf00      	nop
	}
}
     750:	bf00      	nop
     752:	3718      	adds	r7, #24
     754:	46bd      	mov	sp, r7
     756:	bd80      	pop	{r7, pc}
     758:	20000c80 	.word	0x20000c80
     75c:	2000a310 	.word	0x2000a310
     760:	00017c0d 	.word	0x00017c0d
     764:	200081d8 	.word	0x200081d8
     768:	00003309 	.word	0x00003309
     76c:	00003185 	.word	0x00003185
     770:	000041f9 	.word	0x000041f9
     774:	20001670 	.word	0x20001670
     778:	00001e49 	.word	0x00001e49

0000077c <_ZN9ALU_Class15GetSelectedAMMCEv>:

uint8_t	ALU_Class::GetSelectedAMMC(void){
     77c:	b580      	push	{r7, lr}
     77e:	b082      	sub	sp, #8
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
	activeLine=arinc.GetActiveLine();
     784:	4811      	ldr	r0, [pc, #68]	; (7cc <_ZN9ALU_Class15GetSelectedAMMCEv+0x50>)
     786:	4b12      	ldr	r3, [pc, #72]	; (7d0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>)
     788:	4798      	blx	r3
     78a:	4603      	mov	r3, r0
     78c:	461a      	mov	r2, r3
     78e:	687b      	ldr	r3, [r7, #4]
     790:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
		switch (activeLine)
     794:	687b      	ldr	r3, [r7, #4]
     796:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
     79a:	2b01      	cmp	r3, #1
     79c:	d002      	beq.n	7a4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x28>
     79e:	2b02      	cmp	r3, #2
     7a0:	d004      	beq.n	7ac <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>
     7a2:	e007      	b.n	7b4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>
		{
			case 1:
			ammc=&ammc1;
     7a4:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     7a6:	4a0c      	ldr	r2, [pc, #48]	; (7d8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     7a8:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     7aa:	e007      	b.n	7bc <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			
			case 2:
			ammc=&ammc2;
     7ac:	4b09      	ldr	r3, [pc, #36]	; (7d4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     7ae:	4a0b      	ldr	r2, [pc, #44]	; (7dc <_ZN9ALU_Class15GetSelectedAMMCEv+0x60>)
     7b0:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     7b2:	e003      	b.n	7bc <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			default:
			ammc=&ammc1;
     7b4:	4b07      	ldr	r3, [pc, #28]	; (7d4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     7b6:	4a08      	ldr	r2, [pc, #32]	; (7d8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     7b8:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     7ba:	bf00      	nop
		}
	return activeLine;	
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
}
     7c2:	4618      	mov	r0, r3
     7c4:	3708      	adds	r7, #8
     7c6:	46bd      	mov	sp, r7
     7c8:	bd80      	pop	{r7, pc}
     7ca:	bf00      	nop
     7cc:	2000919c 	.word	0x2000919c
     7d0:	0001462b 	.word	0x0001462b
     7d4:	200013ec 	.word	0x200013ec
     7d8:	20000e04 	.word	0x20000e04
     7dc:	200010f8 	.word	0x200010f8

000007e0 <_ZN9ALU_Class14EnableWatchDogEv>:
	else
	{
	}
	return line;
}
int32_t	ALU_Class::EnableWatchDog(void){
     7e0:	b580      	push	{r7, lr}
     7e2:	b082      	sub	sp, #8
     7e4:	af00      	add	r7, sp, #0
     7e6:	6078      	str	r0, [r7, #4]

	wdt_set_timeout_period(&WATCHDOG, clk_rate, timeout_period);
     7e8:	687b      	ldr	r3, [r7, #4]
     7ea:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
     7ee:	687b      	ldr	r3, [r7, #4]
     7f0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
     7f4:	b29b      	uxth	r3, r3
     7f6:	461a      	mov	r2, r3
     7f8:	4805      	ldr	r0, [pc, #20]	; (810 <_ZN9ALU_Class14EnableWatchDogEv+0x30>)
     7fa:	4b06      	ldr	r3, [pc, #24]	; (814 <_ZN9ALU_Class14EnableWatchDogEv+0x34>)
     7fc:	4798      	blx	r3
	return wdt_enable(&WATCHDOG);
     7fe:	4804      	ldr	r0, [pc, #16]	; (810 <_ZN9ALU_Class14EnableWatchDogEv+0x30>)
     800:	4b05      	ldr	r3, [pc, #20]	; (818 <_ZN9ALU_Class14EnableWatchDogEv+0x38>)
     802:	4798      	blx	r3
     804:	4603      	mov	r3, r0

	
}
     806:	4618      	mov	r0, r3
     808:	3708      	adds	r7, #8
     80a:	46bd      	mov	sp, r7
     80c:	bd80      	pop	{r7, pc}
     80e:	bf00      	nop
     810:	2000a91c 	.word	0x2000a91c
     814:	000002d1 	.word	0x000002d1
     818:	00000321 	.word	0x00000321

0000081c <_ZN9ALU_Class12FeedWatchDogEv>:
int32_t	ALU_Class::FeedWatchDog(void){
     81c:	b580      	push	{r7, lr}
     81e:	b082      	sub	sp, #8
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
	return wdt_feed(&WATCHDOG);
     824:	4803      	ldr	r0, [pc, #12]	; (834 <_ZN9ALU_Class12FeedWatchDogEv+0x18>)
     826:	4b04      	ldr	r3, [pc, #16]	; (838 <_ZN9ALU_Class12FeedWatchDogEv+0x1c>)
     828:	4798      	blx	r3
     82a:	4603      	mov	r3, r0
}
     82c:	4618      	mov	r0, r3
     82e:	3708      	adds	r7, #8
     830:	46bd      	mov	sp, r7
     832:	bd80      	pop	{r7, pc}
     834:	2000a91c 	.word	0x2000a91c
     838:	00000365 	.word	0x00000365

0000083c <_ZN9ALU_Class14StartLivePulseEv>:
uint8_t	ALU_Class::StartLivePulse(void){
     83c:	b580      	push	{r7, lr}
     83e:	b084      	sub	sp, #16
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     844:	4909      	ldr	r1, [pc, #36]	; (86c <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     846:	480a      	ldr	r0, [pc, #40]	; (870 <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     848:	4b0a      	ldr	r3, [pc, #40]	; (874 <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     84a:	4798      	blx	r3
     84c:	4603      	mov	r3, r0
     84e:	490a      	ldr	r1, [pc, #40]	; (878 <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     850:	4618      	mov	r0, r3
     852:	4b0a      	ldr	r3, [pc, #40]	; (87c <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     854:	4798      	blx	r3
	//pwm_set_parameters(&LIVE_PULSE, 1000000, 500);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     856:	480a      	ldr	r0, [pc, #40]	; (880 <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     858:	4b0a      	ldr	r3, [pc, #40]	; (884 <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     85a:	4798      	blx	r3
     85c:	4603      	mov	r3, r0
     85e:	60fb      	str	r3, [r7, #12]
	return p;
     860:	68fb      	ldr	r3, [r7, #12]
     862:	b2db      	uxtb	r3, r3
}
     864:	4618      	mov	r0, r3
     866:	3710      	adds	r7, #16
     868:	46bd      	mov	sp, r7
     86a:	bd80      	pop	{r7, pc}
     86c:	0002011c 	.word	0x0002011c
     870:	2000a368 	.word	0x2000a368
     874:	00000cb9 	.word	0x00000cb9
     878:	00020118 	.word	0x00020118
     87c:	00000c99 	.word	0x00000c99
     880:	2000a7d8 	.word	0x2000a7d8
     884:	00006e91 	.word	0x00006e91

00000888 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.Get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     888:	b580      	push	{r7, lr}
     88a:	b088      	sub	sp, #32
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
     890:	6039      	str	r1, [r7, #0]
	uint32_t	w,crc,refCRC,e;
	w=0;
     892:	2300      	movs	r3, #0
     894:	61bb      	str	r3, [r7, #24]
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     896:	6839      	ldr	r1, [r7, #0]
     898:	483d      	ldr	r0, [pc, #244]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     89a:	4b3e      	ldr	r3, [pc, #248]	; (994 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     89c:	4798      	blx	r3
     89e:	61f8      	str	r0, [r7, #28]
	if (memory.IsConfigurationDataUpdated())
     8a0:	483d      	ldr	r0, [pc, #244]	; (998 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     8a2:	4b3e      	ldr	r3, [pc, #248]	; (99c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x114>)
     8a4:	4798      	blx	r3
     8a6:	4603      	mov	r3, r0
     8a8:	2b00      	cmp	r3, #0
     8aa:	d007      	beq.n	8bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x34>
	{
		r=memory.ReadUpdatedConfigurationData(configuration);
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	332c      	adds	r3, #44	; 0x2c
     8b0:	4619      	mov	r1, r3
     8b2:	4837      	ldr	r0, [pc, #220]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8b4:	4b3a      	ldr	r3, [pc, #232]	; (9a0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x118>)
     8b6:	4798      	blx	r3
     8b8:	61f8      	str	r0, [r7, #28]
     8ba:	e05e      	b.n	97a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     8bc:	22ac      	movs	r2, #172	; 0xac
     8be:	6839      	ldr	r1, [r7, #0]
     8c0:	4835      	ldr	r0, [pc, #212]	; (998 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     8c2:	4b38      	ldr	r3, [pc, #224]	; (9a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     8c4:	4798      	blx	r3
     8c6:	6178      	str	r0, [r7, #20]
		refCRC=memory.ReadCRCConfigurationData();
     8c8:	4831      	ldr	r0, [pc, #196]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8ca:	4b37      	ldr	r3, [pc, #220]	; (9a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x120>)
     8cc:	4798      	blx	r3
     8ce:	6138      	str	r0, [r7, #16]
		if (crc==refCRC)
     8d0:	697a      	ldr	r2, [r7, #20]
     8d2:	693b      	ldr	r3, [r7, #16]
     8d4:	429a      	cmp	r2, r3
     8d6:	d108      	bne.n	8ea <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x62>
		{
			configuration=cd;
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	683a      	ldr	r2, [r7, #0]
     8dc:	332c      	adds	r3, #44	; 0x2c
     8de:	4611      	mov	r1, r2
     8e0:	22ac      	movs	r2, #172	; 0xac
     8e2:	4618      	mov	r0, r3
     8e4:	4b31      	ldr	r3, [pc, #196]	; (9ac <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     8e6:	4798      	blx	r3
     8e8:	e047      	b.n	97a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     8ea:	687b      	ldr	r3, [r7, #4]
     8ec:	332c      	adds	r3, #44	; 0x2c
     8ee:	4619      	mov	r1, r3
     8f0:	4827      	ldr	r0, [pc, #156]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8f2:	4b2f      	ldr	r3, [pc, #188]	; (9b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x128>)
     8f4:	4798      	blx	r3
     8f6:	61f8      	str	r0, [r7, #28]
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     8f8:	687b      	ldr	r3, [r7, #4]
     8fa:	332c      	adds	r3, #44	; 0x2c
     8fc:	22ac      	movs	r2, #172	; 0xac
     8fe:	4619      	mov	r1, r3
     900:	4825      	ldr	r0, [pc, #148]	; (998 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     902:	4b28      	ldr	r3, [pc, #160]	; (9a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     904:	4798      	blx	r3
     906:	6178      	str	r0, [r7, #20]
			if (crc==hvac.CRC32)
     908:	4b2a      	ldr	r3, [pc, #168]	; (9b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     90a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
     90e:	697b      	ldr	r3, [r7, #20]
     910:	429a      	cmp	r2, r3
     912:	d105      	bne.n	920 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x98>
			{
				w=memory.WriteCRCConfigurationData(crc);
     914:	6979      	ldr	r1, [r7, #20]
     916:	481e      	ldr	r0, [pc, #120]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     918:	4b27      	ldr	r3, [pc, #156]	; (9b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     91a:	4798      	blx	r3
     91c:	61b8      	str	r0, [r7, #24]
     91e:	e02c      	b.n	97a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     920:	687b      	ldr	r3, [r7, #4]
     922:	4a26      	ldr	r2, [pc, #152]	; (9bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x134>)
     924:	332c      	adds	r3, #44	; 0x2c
     926:	4611      	mov	r1, r2
     928:	22ac      	movs	r2, #172	; 0xac
     92a:	4618      	mov	r0, r3
     92c:	4b1f      	ldr	r3, [pc, #124]	; (9ac <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     92e:	4798      	blx	r3
				e=qspiFlash.Erase((uint32_t)&flashMap->configurationSector);
     930:	4b23      	ldr	r3, [pc, #140]	; (9c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     932:	681b      	ldr	r3, [r3, #0]
     934:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     938:	4619      	mov	r1, r3
     93a:	4822      	ldr	r0, [pc, #136]	; (9c4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     93c:	4b22      	ldr	r3, [pc, #136]	; (9c8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     93e:	4798      	blx	r3
     940:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultConfiguration();
     942:	4813      	ldr	r0, [pc, #76]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     944:	4b21      	ldr	r3, [pc, #132]	; (9cc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x144>)
     946:	4798      	blx	r3
     948:	61b8      	str	r0, [r7, #24]
				
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     94a:	4b1a      	ldr	r3, [pc, #104]	; (9b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     94c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     950:	4619      	mov	r1, r3
     952:	480f      	ldr	r0, [pc, #60]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     954:	4b18      	ldr	r3, [pc, #96]	; (9b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     956:	4798      	blx	r3
     958:	61b8      	str	r0, [r7, #24]
				
				e=qspiFlash.Erase((uint32_t)&flashMap->parametersSector);
     95a:	4b19      	ldr	r3, [pc, #100]	; (9c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     962:	4619      	mov	r1, r3
     964:	4817      	ldr	r0, [pc, #92]	; (9c4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     966:	4b18      	ldr	r3, [pc, #96]	; (9c8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     968:	4798      	blx	r3
     96a:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultParameters();
     96c:	4808      	ldr	r0, [pc, #32]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     96e:	4b18      	ldr	r3, [pc, #96]	; (9d0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x148>)
     970:	4798      	blx	r3
     972:	61b8      	str	r0, [r7, #24]
				memory.WriteFastDefaultParameters();
     974:	4817      	ldr	r0, [pc, #92]	; (9d4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x14c>)
     976:	4b18      	ldr	r3, [pc, #96]	; (9d8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x150>)
     978:	4798      	blx	r3
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	332c      	adds	r3, #44	; 0x2c
     97e:	4619      	mov	r1, r3
     980:	480c      	ldr	r0, [pc, #48]	; (9b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     982:	4b16      	ldr	r3, [pc, #88]	; (9dc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x154>)
     984:	4798      	blx	r3
	return r;
     986:	69fb      	ldr	r3, [r7, #28]
};
     988:	4618      	mov	r0, r3
     98a:	3720      	adds	r7, #32
     98c:	46bd      	mov	sp, r7
     98e:	bd80      	pop	{r7, pc}
     990:	20002d88 	.word	0x20002d88
     994:	00002985 	.word	0x00002985
     998:	20002bf4 	.word	0x20002bf4
     99c:	00002e7d 	.word	0x00002e7d
     9a0:	000029b9 	.word	0x000029b9
     9a4:	00001551 	.word	0x00001551
     9a8:	00002a25 	.word	0x00002a25
     9ac:	0001c4a5 	.word	0x0001c4a5
     9b0:	00002951 	.word	0x00002951
     9b4:	200081d8 	.word	0x200081d8
     9b8:	00002c15 	.word	0x00002c15
     9bc:	00020290 	.word	0x00020290
     9c0:	2000813c 	.word	0x2000813c
     9c4:	20009eac 	.word	0x20009eac
     9c8:	00016bf1 	.word	0x00016bf1
     9cc:	00002afd 	.word	0x00002afd
     9d0:	00002b51 	.word	0x00002b51
     9d4:	20002d78 	.word	0x20002d78
     9d8:	00001bc9 	.word	0x00001bc9
     9dc:	00004275 	.word	0x00004275

000009e0 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData>:

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
     9e0:	b580      	push	{r7, lr}
     9e2:	b084      	sub	sp, #16
     9e4:	af00      	add	r7, sp, #0
     9e6:	60f8      	str	r0, [r7, #12]
     9e8:	460b      	mov	r3, r1
     9ea:	607a      	str	r2, [r7, #4]
     9ec:	72fb      	strb	r3, [r7, #11]
	listener.SendErrorSelf(uint16_t(ifl),data);
     9ee:	7afb      	ldrb	r3, [r7, #11]
     9f0:	b29b      	uxth	r3, r3
     9f2:	687a      	ldr	r2, [r7, #4]
     9f4:	4619      	mov	r1, r3
     9f6:	4803      	ldr	r0, [pc, #12]	; (a04 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x24>)
     9f8:	4b03      	ldr	r3, [pc, #12]	; (a08 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x28>)
     9fa:	4798      	blx	r3
}
     9fc:	bf00      	nop
     9fe:	3710      	adds	r7, #16
     a00:	46bd      	mov	sp, r7
     a02:	bd80      	pop	{r7, pc}
     a04:	200099f8 	.word	0x200099f8
     a08:	00014fad 	.word	0x00014fad

00000a0c <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm>:
{
	listener.SendErrorSelf(uint16_t(fl),data);
}

void ALU_Class::PrepareNewTask(ALUTaskEnum newTask, uint32_t data)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b084      	sub	sp, #16
     a10:	af00      	add	r7, sp, #0
     a12:	60f8      	str	r0, [r7, #12]
     a14:	460b      	mov	r3, r1
     a16:	607a      	str	r2, [r7, #4]
     a18:	72fb      	strb	r3, [r7, #11]
	
	task.id=newTask;
     a1a:	68fb      	ldr	r3, [r7, #12]
     a1c:	7afa      	ldrb	r2, [r7, #11]
     a1e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	task.prio=(uint8_t)newTask;
     a22:	68fb      	ldr	r3, [r7, #12]
     a24:	7afa      	ldrb	r2, [r7, #11]
     a26:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	AddTask(task);
     a2a:	68fa      	ldr	r2, [r7, #12]
     a2c:	68fb      	ldr	r3, [r7, #12]
     a2e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
     a32:	4619      	mov	r1, r3
     a34:	4610      	mov	r0, r2
     a36:	4b03      	ldr	r3, [pc, #12]	; (a44 <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm+0x38>)
     a38:	4798      	blx	r3

}
     a3a:	bf00      	nop
     a3c:	3710      	adds	r7, #16
     a3e:	46bd      	mov	sp, r7
     a40:	bd80      	pop	{r7, pc}
     a42:	bf00      	nop
     a44:	00004755 	.word	0x00004755

00000a48 <_ZN9ALU_Class15PrepareNewEventEtt>:

void ALU_Class::PrepareNewEvent( uint16 newState, uint16 data)
{
     a48:	b580      	push	{r7, lr}
     a4a:	b086      	sub	sp, #24
     a4c:	af00      	add	r7, sp, #0
     a4e:	6078      	str	r0, [r7, #4]
     a50:	460b      	mov	r3, r1
     a52:	807b      	strh	r3, [r7, #2]
     a54:	4613      	mov	r3, r2
     a56:	803b      	strh	r3, [r7, #0]
	event	e;
     a58:	f107 0308 	add.w	r3, r7, #8
     a5c:	4618      	mov	r0, r3
     a5e:	4b0a      	ldr	r3, [pc, #40]	; (a88 <_ZN9ALU_Class15PrepareNewEventEtt+0x40>)
     a60:	4798      	blx	r3
	e.eventClass =(EventClass)kALUEventClass;
     a62:	f44f 7340 	mov.w	r3, #768	; 0x300
     a66:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kALUControllerEvent;
     a68:	2302      	movs	r3, #2
     a6a:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
     a6c:	887b      	ldrh	r3, [r7, #2]
     a6e:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
     a70:	883b      	ldrh	r3, [r7, #0]
     a72:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
     a74:	f107 0308 	add.w	r3, r7, #8
     a78:	4619      	mov	r1, r3
     a7a:	4804      	ldr	r0, [pc, #16]	; (a8c <_ZN9ALU_Class15PrepareNewEventEtt+0x44>)
     a7c:	4b04      	ldr	r3, [pc, #16]	; (a90 <_ZN9ALU_Class15PrepareNewEventEtt+0x48>)
     a7e:	4798      	blx	r3

}
     a80:	bf00      	nop
     a82:	3718      	adds	r7, #24
     a84:	46bd      	mov	sp, r7
     a86:	bd80      	pop	{r7, pc}
     a88:	000003c5 	.word	0x000003c5
     a8c:	200099f8 	.word	0x200099f8
     a90:	00014ea9 	.word	0x00014ea9

00000a94 <_ZN9ALU_Class18ExecutePendingTaskEv>:

bool	ALU_Class::ExecutePendingTask(void){
     a94:	b580      	push	{r7, lr}
     a96:	b088      	sub	sp, #32
     a98:	af00      	add	r7, sp, #0
     a9a:	60f8      	str	r0, [r7, #12]
	allTasksDone=false;
     a9c:	68fb      	ldr	r3, [r7, #12]
     a9e:	2200      	movs	r2, #0
     aa0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	list_element *it;
	ControllerTask tk;
	uint8_t		highPrio=kALUNumberTasks;
     aa4:	230c      	movs	r3, #12
     aa6:	77fb      	strb	r3, [r7, #31]
	tk=GetHighPrioTask();
     aa8:	68fa      	ldr	r2, [r7, #12]
     aaa:	463b      	mov	r3, r7
     aac:	4611      	mov	r1, r2
     aae:	4618      	mov	r0, r3
     ab0:	4b24      	ldr	r3, [pc, #144]	; (b44 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb0>)
     ab2:	4798      	blx	r3
     ab4:	f107 0314 	add.w	r3, r7, #20
     ab8:	463a      	mov	r2, r7
     aba:	e892 0003 	ldmia.w	r2, {r0, r1}
     abe:	e883 0003 	stmia.w	r3, {r0, r1}
	if (tk.id!=kALUTaskArincTXMessage)
     ac2:	7e3b      	ldrb	r3, [r7, #24]
     ac4:	2b02      	cmp	r3, #2
     ac6:	d004      	beq.n	ad2 <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	{
		PrepareNewTask(kALUTaskArincTXMessage);
     ac8:	2200      	movs	r2, #0
     aca:	2102      	movs	r1, #2
     acc:	68f8      	ldr	r0, [r7, #12]
     ace:	4b1e      	ldr	r3, [pc, #120]	; (b48 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb4>)
     ad0:	4798      	blx	r3
	}
	while (taskList->head){
     ad2:	68fb      	ldr	r3, [r7, #12]
     ad4:	681b      	ldr	r3, [r3, #0]
     ad6:	681b      	ldr	r3, [r3, #0]
     ad8:	2b00      	cmp	r3, #0
     ada:	d01a      	beq.n	b12 <_ZN9ALU_Class18ExecutePendingTaskEv+0x7e>
		tk=GetHighPrioTask();
     adc:	68fa      	ldr	r2, [r7, #12]
     ade:	463b      	mov	r3, r7
     ae0:	4611      	mov	r1, r2
     ae2:	4618      	mov	r0, r3
     ae4:	4b17      	ldr	r3, [pc, #92]	; (b44 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb0>)
     ae6:	4798      	blx	r3
     ae8:	f107 0314 	add.w	r3, r7, #20
     aec:	463a      	mov	r2, r7
     aee:	e892 0003 	ldmia.w	r2, {r0, r1}
     af2:	e883 0003 	stmia.w	r3, {r0, r1}
		HandleTasks(tk);
     af6:	f107 0314 	add.w	r3, r7, #20
     afa:	4619      	mov	r1, r3
     afc:	68f8      	ldr	r0, [r7, #12]
     afe:	4b13      	ldr	r3, [pc, #76]	; (b4c <_ZN9ALU_Class18ExecutePendingTaskEv+0xb8>)
     b00:	4798      	blx	r3
		RemoveTask(tk);
     b02:	68fb      	ldr	r3, [r7, #12]
     b04:	f107 0214 	add.w	r2, r7, #20
     b08:	4611      	mov	r1, r2
     b0a:	4618      	mov	r0, r3
     b0c:	4b10      	ldr	r3, [pc, #64]	; (b50 <_ZN9ALU_Class18ExecutePendingTaskEv+0xbc>)
     b0e:	4798      	blx	r3
	while (taskList->head){
     b10:	e7df      	b.n	ad2 <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	
	}
	RunPeriodicTasks();
     b12:	68f8      	ldr	r0, [r7, #12]
     b14:	4b0f      	ldr	r3, [pc, #60]	; (b54 <_ZN9ALU_Class18ExecutePendingTaskEv+0xc0>)
     b16:	4798      	blx	r3
	allTasksDone=~((bool)taskList->head);
     b18:	68fb      	ldr	r3, [r7, #12]
     b1a:	2201      	movs	r2, #1
     b1c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	if (allTasksDone)
     b20:	68fb      	ldr	r3, [r7, #12]
     b22:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
     b26:	2b00      	cmp	r3, #0
     b28:	d005      	beq.n	b36 <_ZN9ALU_Class18ExecutePendingTaskEv+0xa2>
	{
		
		PrepareNewEvent(kALUEventSimpleResume);
     b2a:	2200      	movs	r2, #0
     b2c:	f240 1107 	movw	r1, #263	; 0x107
     b30:	68f8      	ldr	r0, [r7, #12]
     b32:	4b09      	ldr	r3, [pc, #36]	; (b58 <_ZN9ALU_Class18ExecutePendingTaskEv+0xc4>)
     b34:	4798      	blx	r3
	}
	return allTasksDone; 
     b36:	68fb      	ldr	r3, [r7, #12]
     b38:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
}
     b3c:	4618      	mov	r0, r3
     b3e:	3720      	adds	r7, #32
     b40:	46bd      	mov	sp, r7
     b42:	bd80      	pop	{r7, pc}
     b44:	000048d9 	.word	0x000048d9
     b48:	00000a0d 	.word	0x00000a0d
     b4c:	00000b5d 	.word	0x00000b5d
     b50:	00004845 	.word	0x00004845
     b54:	00000c55 	.word	0x00000c55
     b58:	00000a49 	.word	0x00000a49

00000b5c <_ZN9ALU_Class11HandleTasksER14ControllerTask>:
void ALU_Class::HandleTasks(ControllerTask& ct)
{
     b5c:	b580      	push	{r7, lr}
     b5e:	b084      	sub	sp, #16
     b60:	af00      	add	r7, sp, #0
     b62:	6078      	str	r0, [r7, #4]
     b64:	6039      	str	r1, [r7, #0]

	taskEntryTime= hvacTimer.Get_ticks();
     b66:	4827      	ldr	r0, [pc, #156]	; (c04 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa8>)
     b68:	4b27      	ldr	r3, [pc, #156]	; (c08 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     b6a:	4798      	blx	r3
     b6c:	4602      	mov	r2, r0
     b6e:	687b      	ldr	r3, [r7, #4]
     b70:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	switch (ct.id)
     b74:	683b      	ldr	r3, [r7, #0]
     b76:	791b      	ldrb	r3, [r3, #4]
     b78:	3b02      	subs	r3, #2
     b7a:	2b09      	cmp	r3, #9
     b7c:	d838      	bhi.n	bf0 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x94>
     b7e:	a201      	add	r2, pc, #4	; (adr r2, b84 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x28>)
     b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     b84:	00000bd9 	.word	0x00000bd9
     b88:	00000bc1 	.word	0x00000bc1
     b8c:	00000bcf 	.word	0x00000bcf
     b90:	00000bf1 	.word	0x00000bf1
     b94:	00000bf1 	.word	0x00000bf1
     b98:	00000bf1 	.word	0x00000bf1
     b9c:	00000bb7 	.word	0x00000bb7
     ba0:	00000bad 	.word	0x00000bad
     ba4:	00000be1 	.word	0x00000be1
     ba8:	00000be9 	.word	0x00000be9
	{
		case kALUEventSimpleStart:
			hvac.Start(0);
		break;
		case kALUSimpleResume:
			hvac.ControllerResume(0);
     bac:	2100      	movs	r1, #0
     bae:	4817      	ldr	r0, [pc, #92]	; (c0c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     bb0:	4b17      	ldr	r3, [pc, #92]	; (c10 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb4>)
     bb2:	4798      	blx	r3
		break;
     bb4:	e021      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUSimpleStop:
			hvac.Stop(0);
     bb6:	2100      	movs	r1, #0
     bb8:	4814      	ldr	r0, [pc, #80]	; (c0c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     bba:	4b16      	ldr	r3, [pc, #88]	; (c14 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     bbc:	4798      	blx	r3
		break;
     bbe:	e01c      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     bc0:	f107 0308 	add.w	r3, r7, #8
     bc4:	4914      	ldr	r1, [pc, #80]	; (c18 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xbc>)
     bc6:	4618      	mov	r0, r3
     bc8:	4b14      	ldr	r3, [pc, #80]	; (c1c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc0>)
     bca:	4798      	blx	r3
		break;
     bcc:	e015      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskReadARINCR1:
			arinc.ReadRXBuffer(1);			
     bce:	2101      	movs	r1, #1
     bd0:	4813      	ldr	r0, [pc, #76]	; (c20 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     bd2:	4b14      	ldr	r3, [pc, #80]	; (c24 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc8>)
     bd4:	4798      	blx	r3
		break;
     bd6:	e010      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskArincTXMessage:
			arinc.TransmitTXBuffer();
     bd8:	4811      	ldr	r0, [pc, #68]	; (c20 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     bda:	4b13      	ldr	r3, [pc, #76]	; (c28 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xcc>)
     bdc:	4798      	blx	r3
		break;
     bde:	e00c      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskUpdateTemperatures:
			arinc.SaveTemperature();		
     be0:	480f      	ldr	r0, [pc, #60]	; (c20 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     be2:	4b12      	ldr	r3, [pc, #72]	; (c2c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xd0>)
     be4:	4798      	blx	r3
		break;
     be6:	e008      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskUpdateFlapperValves:
			arinc.SaveFlapperValveAngle();
     be8:	480d      	ldr	r0, [pc, #52]	; (c20 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     bea:	4b11      	ldr	r3, [pc, #68]	; (c30 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xd4>)
     bec:	4798      	blx	r3
		break;
     bee:	e004      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>

		default:
		hvac.Stop(0);
     bf0:	2100      	movs	r1, #0
     bf2:	4806      	ldr	r0, [pc, #24]	; (c0c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     bf4:	4b07      	ldr	r3, [pc, #28]	; (c14 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     bf6:	4798      	blx	r3
		break;
     bf8:	bf00      	nop
	}
}
     bfa:	bf00      	nop
     bfc:	3710      	adds	r7, #16
     bfe:	46bd      	mov	sp, r7
     c00:	bd80      	pop	{r7, pc}
     c02:	bf00      	nop
     c04:	2000a310 	.word	0x2000a310
     c08:	00017c0d 	.word	0x00017c0d
     c0c:	200081d8 	.word	0x200081d8
     c10:	00003185 	.word	0x00003185
     c14:	000041f9 	.word	0x000041f9
     c18:	20001670 	.word	0x20001670
     c1c:	00001e49 	.word	0x00001e49
     c20:	20008ec8 	.word	0x20008ec8
     c24:	000137dd 	.word	0x000137dd
     c28:	00013c6d 	.word	0x00013c6d
     c2c:	00012d31 	.word	0x00012d31
     c30:	00012c5d 	.word	0x00012c5d

00000c34 <_ZN9ALU_Class17CheckPeriodicTaskEv>:

void ALU_Class::CheckPeriodicTask(void){
     c34:	b580      	push	{r7, lr}
     c36:	b082      	sub	sp, #8
     c38:	af00      	add	r7, sp, #0
	interfaces.CheckCommunication();
     c3a:	463b      	mov	r3, r7
     c3c:	4903      	ldr	r1, [pc, #12]	; (c4c <_ZN9ALU_Class17CheckPeriodicTaskEv+0x18>)
     c3e:	4618      	mov	r0, r3
     c40:	4b03      	ldr	r3, [pc, #12]	; (c50 <_ZN9ALU_Class17CheckPeriodicTaskEv+0x1c>)
     c42:	4798      	blx	r3
}
     c44:	bf00      	nop
     c46:	3708      	adds	r7, #8
     c48:	46bd      	mov	sp, r7
     c4a:	bd80      	pop	{r7, pc}
     c4c:	20001670 	.word	0x20001670
     c50:	00001e49 	.word	0x00001e49

00000c54 <_ZN9ALU_Class16RunPeriodicTasksEv>:

void	ALU_Class::RunPeriodicTasks(void){
     c54:	b580      	push	{r7, lr}
     c56:	b082      	sub	sp, #8
     c58:	af00      	add	r7, sp, #0
     c5a:	6078      	str	r0, [r7, #4]
	FeedWatchDog();
     c5c:	6878      	ldr	r0, [r7, #4]
     c5e:	4b03      	ldr	r3, [pc, #12]	; (c6c <_ZN9ALU_Class16RunPeriodicTasksEv+0x18>)
     c60:	4798      	blx	r3

}
     c62:	bf00      	nop
     c64:	3708      	adds	r7, #8
     c66:	46bd      	mov	sp, r7
     c68:	bd80      	pop	{r7, pc}
     c6a:	bf00      	nop
     c6c:	0000081d 	.word	0x0000081d

00000c70 <_ZlsIhER5PrintS1_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     c70:	b580      	push	{r7, lr}
     c72:	b082      	sub	sp, #8
     c74:	af00      	add	r7, sp, #0
     c76:	6078      	str	r0, [r7, #4]
     c78:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     c7a:	683b      	ldr	r3, [r7, #0]
     c7c:	781b      	ldrb	r3, [r3, #0]
     c7e:	220a      	movs	r2, #10
     c80:	4619      	mov	r1, r3
     c82:	6878      	ldr	r0, [r7, #4]
     c84:	4b03      	ldr	r3, [pc, #12]	; (c94 <_ZlsIhER5PrintS1_RKT_+0x24>)
     c86:	4798      	blx	r3
     c88:	687b      	ldr	r3, [r7, #4]
     c8a:	4618      	mov	r0, r3
     c8c:	3708      	adds	r7, #8
     c8e:	46bd      	mov	sp, r7
     c90:	bd80      	pop	{r7, pc}
     c92:	bf00      	nop
     c94:	000184a9 	.word	0x000184a9

00000c98 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     c98:	b580      	push	{r7, lr}
     c9a:	b082      	sub	sp, #8
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
     ca0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     ca2:	6839      	ldr	r1, [r7, #0]
     ca4:	6878      	ldr	r0, [r7, #4]
     ca6:	4b03      	ldr	r3, [pc, #12]	; (cb4 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     ca8:	4798      	blx	r3
     caa:	687b      	ldr	r3, [r7, #4]
     cac:	4618      	mov	r0, r3
     cae:	3708      	adds	r7, #8
     cb0:	46bd      	mov	sp, r7
     cb2:	bd80      	pop	{r7, pc}
     cb4:	00018489 	.word	0x00018489

00000cb8 <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     cb8:	b580      	push	{r7, lr}
     cba:	b082      	sub	sp, #8
     cbc:	af00      	add	r7, sp, #0
     cbe:	6078      	str	r0, [r7, #4]
     cc0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     cc2:	6839      	ldr	r1, [r7, #0]
     cc4:	6878      	ldr	r0, [r7, #4]
     cc6:	4b03      	ldr	r3, [pc, #12]	; (cd4 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     cc8:	4798      	blx	r3
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	4618      	mov	r0, r3
     cce:	3708      	adds	r7, #8
     cd0:	46bd      	mov	sp, r7
     cd2:	bd80      	pop	{r7, pc}
     cd4:	00018489 	.word	0x00018489

00000cd8 <_Z41__static_initialization_and_destruction_0ii>:




     cd8:	b580      	push	{r7, lr}
     cda:	b082      	sub	sp, #8
     cdc:	af00      	add	r7, sp, #0
     cde:	6078      	str	r0, [r7, #4]
     ce0:	6039      	str	r1, [r7, #0]
     ce2:	687b      	ldr	r3, [r7, #4]
     ce4:	2b01      	cmp	r3, #1
     ce6:	d11c      	bne.n	d22 <_Z41__static_initialization_and_destruction_0ii+0x4a>
     ce8:	683b      	ldr	r3, [r7, #0]
     cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
     cee:	4293      	cmp	r3, r2
     cf0:	d117      	bne.n	d22 <_Z41__static_initialization_and_destruction_0ii+0x4a>
	PBIT_Class( const PBIT_Class &c );
	PBIT_Class& operator=( const PBIT_Class &c );

}; //PBIT_Class

static	PBIT_Class	pBit;
     cf2:	480e      	ldr	r0, [pc, #56]	; (d2c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     cf4:	4b0e      	ldr	r3, [pc, #56]	; (d30 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     cf6:	4798      	blx	r3
     cf8:	4a0e      	ldr	r2, [pc, #56]	; (d34 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     cfa:	490f      	ldr	r1, [pc, #60]	; (d38 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     cfc:	480b      	ldr	r0, [pc, #44]	; (d2c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     cfe:	4b0f      	ldr	r3, [pc, #60]	; (d3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     d00:	4798      	blx	r3
	CBIT_Class( const CBIT_Class &c );
	CBIT_Class& operator=( const CBIT_Class &c );

}; //CBIT_Class

static	CBIT_Class	cBit;
     d02:	480f      	ldr	r0, [pc, #60]	; (d40 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     d04:	4b0f      	ldr	r3, [pc, #60]	; (d44 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     d06:	4798      	blx	r3
     d08:	4a0a      	ldr	r2, [pc, #40]	; (d34 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     d0a:	490f      	ldr	r1, [pc, #60]	; (d48 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     d0c:	480c      	ldr	r0, [pc, #48]	; (d40 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     d0e:	4b0b      	ldr	r3, [pc, #44]	; (d3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     d10:	4798      	blx	r3
     d12:	480e      	ldr	r0, [pc, #56]	; (d4c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     d14:	4b0e      	ldr	r3, [pc, #56]	; (d50 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     d16:	4798      	blx	r3
     d18:	4a06      	ldr	r2, [pc, #24]	; (d34 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     d1a:	490e      	ldr	r1, [pc, #56]	; (d54 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     d1c:	480b      	ldr	r0, [pc, #44]	; (d4c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     d1e:	4b07      	ldr	r3, [pc, #28]	; (d3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     d20:	4798      	blx	r3
     d22:	bf00      	nop
     d24:	3708      	adds	r7, #8
     d26:	46bd      	mov	sp, r7
     d28:	bd80      	pop	{r7, pc}
     d2a:	bf00      	nop
     d2c:	20000c64 	.word	0x20000c64
     d30:	00002d21 	.word	0x00002d21
     d34:	20000000 	.word	0x20000000
     d38:	00002d3b 	.word	0x00002d3b
     d3c:	00019d41 	.word	0x00019d41
     d40:	20000c78 	.word	0x20000c78
     d44:	00000fb5 	.word	0x00000fb5
     d48:	00000fcf 	.word	0x00000fcf
     d4c:	20000c80 	.word	0x20000c80
     d50:	00000425 	.word	0x00000425
     d54:	00000461 	.word	0x00000461

00000d58 <_GLOBAL__sub_I_ptrALUClass>:
     d58:	b580      	push	{r7, lr}
     d5a:	af00      	add	r7, sp, #0
     d5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     d60:	2001      	movs	r0, #1
     d62:	4b01      	ldr	r3, [pc, #4]	; (d68 <_GLOBAL__sub_I_ptrALUClass+0x10>)
     d64:	4798      	blx	r3
     d66:	bd80      	pop	{r7, pc}
     d68:	00000cd9 	.word	0x00000cd9

00000d6c <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: private virtual ARINC_Conversions
     d6c:	b480      	push	{r7}
     d6e:	b083      	sub	sp, #12
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
     d74:	6039      	str	r1, [r7, #0]
     d76:	683b      	ldr	r3, [r7, #0]
     d78:	681a      	ldr	r2, [r3, #0]
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	601a      	str	r2, [r3, #0]
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	681b      	ldr	r3, [r3, #0]
     d82:	3b0c      	subs	r3, #12
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	461a      	mov	r2, r3
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	4413      	add	r3, r2
     d8c:	683a      	ldr	r2, [r7, #0]
     d8e:	6852      	ldr	r2, [r2, #4]
     d90:	601a      	str	r2, [r3, #0]
     d92:	687b      	ldr	r3, [r7, #4]
     d94:	4618      	mov	r0, r3
     d96:	370c      	adds	r7, #12
     d98:	46bd      	mov	sp, r7
     d9a:	bc80      	pop	{r7}
     d9c:	4770      	bx	lr
	...

00000da0 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     da0:	b580      	push	{r7, lr}
     da2:	b082      	sub	sp, #8
     da4:	af00      	add	r7, sp, #0
     da6:	6078      	str	r0, [r7, #4]
     da8:	687b      	ldr	r3, [r7, #4]
     daa:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
     dae:	4618      	mov	r0, r3
     db0:	4b10      	ldr	r3, [pc, #64]	; (df4 <_ZN10AMMC_ClassC1Ev+0x54>)
     db2:	4798      	blx	r3
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
     dba:	4a0f      	ldr	r2, [pc, #60]	; (df8 <_ZN10AMMC_ClassC1Ev+0x58>)
     dbc:	4611      	mov	r1, r2
     dbe:	4618      	mov	r0, r3
     dc0:	4b0e      	ldr	r3, [pc, #56]	; (dfc <_ZN10AMMC_ClassC1Ev+0x5c>)
     dc2:	4798      	blx	r3
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	4a0e      	ldr	r2, [pc, #56]	; (e00 <_ZN10AMMC_ClassC1Ev+0x60>)
     dc8:	4611      	mov	r1, r2
     dca:	4618      	mov	r0, r3
     dcc:	4b0d      	ldr	r3, [pc, #52]	; (e04 <_ZN10AMMC_ClassC1Ev+0x64>)
     dce:	4798      	blx	r3
     dd0:	4a0d      	ldr	r2, [pc, #52]	; (e08 <_ZN10AMMC_ClassC1Ev+0x68>)
     dd2:	687b      	ldr	r3, [r7, #4]
     dd4:	601a      	str	r2, [r3, #0]
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
     ddc:	4a0b      	ldr	r2, [pc, #44]	; (e0c <_ZN10AMMC_ClassC1Ev+0x6c>)
     dde:	601a      	str	r2, [r3, #0]
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
     de6:	4a0a      	ldr	r2, [pc, #40]	; (e10 <_ZN10AMMC_ClassC1Ev+0x70>)
     de8:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     dea:	687b      	ldr	r3, [r7, #4]
     dec:	4618      	mov	r0, r3
     dee:	3708      	adds	r7, #8
     df0:	46bd      	mov	sp, r7
     df2:	bd80      	pop	{r7, pc}
     df4:	00012f3d 	.word	0x00012f3d
     df8:	000201b4 	.word	0x000201b4
     dfc:	00000d6d 	.word	0x00000d6d
     e00:	00020194 	.word	0x00020194
     e04:	000133ed 	.word	0x000133ed
     e08:	0002014c 	.word	0x0002014c
     e0c:	00020168 	.word	0x00020168
     e10:	00020184 	.word	0x00020184

00000e14 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     e14:	b580      	push	{r7, lr}
     e16:	b082      	sub	sp, #8
     e18:	af00      	add	r7, sp, #0
     e1a:	6078      	str	r0, [r7, #4]
     e1c:	4a12      	ldr	r2, [pc, #72]	; (e68 <_ZN10AMMC_ClassD1Ev+0x54>)
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	601a      	str	r2, [r3, #0]
     e22:	687b      	ldr	r3, [r7, #4]
     e24:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
     e28:	4a10      	ldr	r2, [pc, #64]	; (e6c <_ZN10AMMC_ClassD1Ev+0x58>)
     e2a:	601a      	str	r2, [r3, #0]
     e2c:	687b      	ldr	r3, [r7, #4]
     e2e:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
     e32:	4a0f      	ldr	r2, [pc, #60]	; (e70 <_ZN10AMMC_ClassD1Ev+0x5c>)
     e34:	601a      	str	r2, [r3, #0]
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	4a0e      	ldr	r2, [pc, #56]	; (e74 <_ZN10AMMC_ClassD1Ev+0x60>)
     e3a:	4611      	mov	r1, r2
     e3c:	4618      	mov	r0, r3
     e3e:	4b0e      	ldr	r3, [pc, #56]	; (e78 <_ZN10AMMC_ClassD1Ev+0x64>)
     e40:	4798      	blx	r3
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
     e48:	4a0c      	ldr	r2, [pc, #48]	; (e7c <_ZN10AMMC_ClassD1Ev+0x68>)
     e4a:	4611      	mov	r1, r2
     e4c:	4618      	mov	r0, r3
     e4e:	4b0c      	ldr	r3, [pc, #48]	; (e80 <_ZN10AMMC_ClassD1Ev+0x6c>)
     e50:	4798      	blx	r3
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
     e58:	4618      	mov	r0, r3
     e5a:	4b0a      	ldr	r3, [pc, #40]	; (e84 <_ZN10AMMC_ClassD1Ev+0x70>)
     e5c:	4798      	blx	r3
{
} //~AMMC_Class
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	4618      	mov	r0, r3
     e62:	3708      	adds	r7, #8
     e64:	46bd      	mov	sp, r7
     e66:	bd80      	pop	{r7, pc}
     e68:	0002014c 	.word	0x0002014c
     e6c:	00020168 	.word	0x00020168
     e70:	00020184 	.word	0x00020184
     e74:	00020194 	.word	0x00020194
     e78:	000134ed 	.word	0x000134ed
     e7c:	000201b4 	.word	0x000201b4
     e80:	000145f9 	.word	0x000145f9
     e84:	00012f5d 	.word	0x00012f5d

00000e88 <_ZTv0_n16_N10AMMC_ClassD1Ev>:
     e88:	b580      	push	{r7, lr}
     e8a:	b082      	sub	sp, #8
     e8c:	af00      	add	r7, sp, #0
     e8e:	6078      	str	r0, [r7, #4]
     e90:	687b      	ldr	r3, [r7, #4]
     e92:	681b      	ldr	r3, [r3, #0]
     e94:	3b10      	subs	r3, #16
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	461a      	mov	r2, r3
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	4413      	add	r3, r2
     e9e:	4618      	mov	r0, r3
     ea0:	4b03      	ldr	r3, [pc, #12]	; (eb0 <_ZTv0_n16_N10AMMC_ClassD1Ev+0x28>)
     ea2:	4798      	blx	r3
     ea4:	4603      	mov	r3, r0
     ea6:	4618      	mov	r0, r3
     ea8:	3708      	adds	r7, #8
     eaa:	46bd      	mov	sp, r7
     eac:	bd80      	pop	{r7, pc}
     eae:	bf00      	nop
     eb0:	00000e15 	.word	0x00000e15

00000eb4 <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     eb4:	b580      	push	{r7, lr}
     eb6:	b082      	sub	sp, #8
     eb8:	af00      	add	r7, sp, #0
     eba:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     ebc:	6878      	ldr	r0, [r7, #4]
     ebe:	4b06      	ldr	r3, [pc, #24]	; (ed8 <_ZN10AMMC_ClassD0Ev+0x24>)
     ec0:	4798      	blx	r3
     ec2:	f44f 713d 	mov.w	r1, #756	; 0x2f4
     ec6:	6878      	ldr	r0, [r7, #4]
     ec8:	4b04      	ldr	r3, [pc, #16]	; (edc <_ZN10AMMC_ClassD0Ev+0x28>)
     eca:	4798      	blx	r3
     ecc:	687b      	ldr	r3, [r7, #4]
     ece:	4618      	mov	r0, r3
     ed0:	3708      	adds	r7, #8
     ed2:	46bd      	mov	sp, r7
     ed4:	bd80      	pop	{r7, pc}
     ed6:	bf00      	nop
     ed8:	00000e15 	.word	0x00000e15
     edc:	00019d4d 	.word	0x00019d4d

00000ee0 <_ZTv0_n16_N10AMMC_ClassD0Ev>:
     ee0:	b580      	push	{r7, lr}
     ee2:	b082      	sub	sp, #8
     ee4:	af00      	add	r7, sp, #0
     ee6:	6078      	str	r0, [r7, #4]
     ee8:	687b      	ldr	r3, [r7, #4]
     eea:	681b      	ldr	r3, [r3, #0]
     eec:	3b10      	subs	r3, #16
     eee:	681b      	ldr	r3, [r3, #0]
     ef0:	461a      	mov	r2, r3
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	4413      	add	r3, r2
     ef6:	4618      	mov	r0, r3
     ef8:	4b03      	ldr	r3, [pc, #12]	; (f08 <_ZTv0_n16_N10AMMC_ClassD0Ev+0x28>)
     efa:	4798      	blx	r3
     efc:	4603      	mov	r3, r0
     efe:	4618      	mov	r0, r3
     f00:	3708      	adds	r7, #8
     f02:	46bd      	mov	sp, r7
     f04:	bd80      	pop	{r7, pc}
     f06:	bf00      	nop
     f08:	00000eb5 	.word	0x00000eb5

00000f0c <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     f0c:	b580      	push	{r7, lr}
     f0e:	b082      	sub	sp, #8
     f10:	af00      	add	r7, sp, #0
     f12:	6078      	str	r0, [r7, #4]
     f14:	6039      	str	r1, [r7, #0]
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	2b01      	cmp	r3, #1
     f1a:	d124      	bne.n	f66 <_Z41__static_initialization_and_destruction_0ii+0x5a>
     f1c:	683b      	ldr	r3, [r7, #0]
     f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     f22:	4293      	cmp	r3, r2
     f24:	d11f      	bne.n	f66 <_Z41__static_initialization_and_destruction_0ii+0x5a>
     f26:	4812      	ldr	r0, [pc, #72]	; (f70 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     f28:	4b12      	ldr	r3, [pc, #72]	; (f74 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     f2a:	4798      	blx	r3
     f2c:	4a12      	ldr	r2, [pc, #72]	; (f78 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f2e:	4913      	ldr	r1, [pc, #76]	; (f7c <_Z41__static_initialization_and_destruction_0ii+0x70>)
     f30:	480f      	ldr	r0, [pc, #60]	; (f70 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     f32:	4b13      	ldr	r3, [pc, #76]	; (f80 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f34:	4798      	blx	r3
     f36:	4813      	ldr	r0, [pc, #76]	; (f84 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     f38:	4b13      	ldr	r3, [pc, #76]	; (f88 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     f3a:	4798      	blx	r3
     f3c:	4a0e      	ldr	r2, [pc, #56]	; (f78 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f3e:	4913      	ldr	r1, [pc, #76]	; (f8c <_Z41__static_initialization_and_destruction_0ii+0x80>)
     f40:	4810      	ldr	r0, [pc, #64]	; (f84 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     f42:	4b0f      	ldr	r3, [pc, #60]	; (f80 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f44:	4798      	blx	r3
AMMC_Class	ammc1;
     f46:	4812      	ldr	r0, [pc, #72]	; (f90 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     f48:	4b12      	ldr	r3, [pc, #72]	; (f94 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     f4a:	4798      	blx	r3
     f4c:	4a0a      	ldr	r2, [pc, #40]	; (f78 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f4e:	4912      	ldr	r1, [pc, #72]	; (f98 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     f50:	480f      	ldr	r0, [pc, #60]	; (f90 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     f52:	4b0b      	ldr	r3, [pc, #44]	; (f80 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f54:	4798      	blx	r3
AMMC_Class	ammc2;
     f56:	4811      	ldr	r0, [pc, #68]	; (f9c <_Z41__static_initialization_and_destruction_0ii+0x90>)
     f58:	4b0e      	ldr	r3, [pc, #56]	; (f94 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     f5a:	4798      	blx	r3
     f5c:	4a06      	ldr	r2, [pc, #24]	; (f78 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f5e:	490e      	ldr	r1, [pc, #56]	; (f98 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     f60:	480e      	ldr	r0, [pc, #56]	; (f9c <_Z41__static_initialization_and_destruction_0ii+0x90>)
     f62:	4b07      	ldr	r3, [pc, #28]	; (f80 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f64:	4798      	blx	r3
     f66:	bf00      	nop
     f68:	3708      	adds	r7, #8
     f6a:	46bd      	mov	sp, r7
     f6c:	bd80      	pop	{r7, pc}
     f6e:	bf00      	nop
     f70:	20000dec 	.word	0x20000dec
     f74:	00002d21 	.word	0x00002d21
     f78:	20000000 	.word	0x20000000
     f7c:	00002d3b 	.word	0x00002d3b
     f80:	00019d41 	.word	0x00019d41
     f84:	20000e00 	.word	0x20000e00
     f88:	00000fb5 	.word	0x00000fb5
     f8c:	00000fcf 	.word	0x00000fcf
     f90:	20000e04 	.word	0x20000e04
     f94:	00000da1 	.word	0x00000da1
     f98:	00000e15 	.word	0x00000e15
     f9c:	200010f8 	.word	0x200010f8

00000fa0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     fa0:	b580      	push	{r7, lr}
     fa2:	af00      	add	r7, sp, #0
     fa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     fa8:	2001      	movs	r0, #1
     faa:	4b01      	ldr	r3, [pc, #4]	; (fb0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     fac:	4798      	blx	r3
     fae:	bd80      	pop	{r7, pc}
     fb0:	00000f0d 	.word	0x00000f0d

00000fb4 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     fb4:	b480      	push	{r7}
     fb6:	b083      	sub	sp, #12
     fb8:	af00      	add	r7, sp, #0
     fba:	6078      	str	r0, [r7, #4]
{
	isOK=true;
     fbc:	687b      	ldr	r3, [r7, #4]
     fbe:	2201      	movs	r2, #1
     fc0:	701a      	strb	r2, [r3, #0]
} //CBIT_Class
     fc2:	687b      	ldr	r3, [r7, #4]
     fc4:	4618      	mov	r0, r3
     fc6:	370c      	adds	r7, #12
     fc8:	46bd      	mov	sp, r7
     fca:	bc80      	pop	{r7}
     fcc:	4770      	bx	lr

00000fce <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     fce:	b480      	push	{r7}
     fd0:	b083      	sub	sp, #12
     fd2:	af00      	add	r7, sp, #0
     fd4:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	4618      	mov	r0, r3
     fda:	370c      	adds	r7, #12
     fdc:	46bd      	mov	sp, r7
     fde:	bc80      	pop	{r7}
     fe0:	4770      	bx	lr

00000fe2 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     fe2:	b480      	push	{r7}
     fe4:	b083      	sub	sp, #12
     fe6:	af00      	add	r7, sp, #0
     fe8:	6078      	str	r0, [r7, #4]
	return	isOK;
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	781b      	ldrb	r3, [r3, #0]
     fee:	b2db      	uxtb	r3, r3
}
     ff0:	4618      	mov	r0, r3
     ff2:	370c      	adds	r7, #12
     ff4:	46bd      	mov	sp, r7
     ff6:	bc80      	pop	{r7}
     ff8:	4770      	bx	lr
	...

00000ffc <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}
     ffc:	b580      	push	{r7, lr}
     ffe:	b082      	sub	sp, #8
    1000:	af00      	add	r7, sp, #0
    1002:	6078      	str	r0, [r7, #4]
    1004:	6039      	str	r1, [r7, #0]
    1006:	687b      	ldr	r3, [r7, #4]
    1008:	2b01      	cmp	r3, #1
    100a:	d10c      	bne.n	1026 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    100c:	683b      	ldr	r3, [r7, #0]
    100e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1012:	4293      	cmp	r3, r2
    1014:	d107      	bne.n	1026 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1016:	4806      	ldr	r0, [pc, #24]	; (1030 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1018:	4b06      	ldr	r3, [pc, #24]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    101a:	4798      	blx	r3
    101c:	4a06      	ldr	r2, [pc, #24]	; (1038 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    101e:	4907      	ldr	r1, [pc, #28]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1020:	4803      	ldr	r0, [pc, #12]	; (1030 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1022:	4b07      	ldr	r3, [pc, #28]	; (1040 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1024:	4798      	blx	r3
    1026:	bf00      	nop
    1028:	3708      	adds	r7, #8
    102a:	46bd      	mov	sp, r7
    102c:	bd80      	pop	{r7, pc}
    102e:	bf00      	nop
    1030:	200013f0 	.word	0x200013f0
    1034:	00000fb5 	.word	0x00000fb5
    1038:	20000000 	.word	0x20000000
    103c:	00000fcf 	.word	0x00000fcf
    1040:	00019d41 	.word	0x00019d41

00001044 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
    1044:	b580      	push	{r7, lr}
    1046:	af00      	add	r7, sp, #0
    1048:	f64f 71ff 	movw	r1, #65535	; 0xffff
    104c:	2001      	movs	r0, #1
    104e:	4b01      	ldr	r3, [pc, #4]	; (1054 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
    1050:	4798      	blx	r3
    1052:	bd80      	pop	{r7, pc}
    1054:	00000ffd 	.word	0x00000ffd

00001058 <_ZN19CondesatorFan_ClassC1Ev>:


#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
    1058:	b480      	push	{r7}
    105a:	b083      	sub	sp, #12
    105c:	af00      	add	r7, sp, #0
    105e:	6078      	str	r0, [r7, #4]
{
} //CondesatorFan_Class
    1060:	687b      	ldr	r3, [r7, #4]
    1062:	4618      	mov	r0, r3
    1064:	370c      	adds	r7, #12
    1066:	46bd      	mov	sp, r7
    1068:	bc80      	pop	{r7}
    106a:	4770      	bx	lr

0000106c <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
    106c:	b480      	push	{r7}
    106e:	b083      	sub	sp, #12
    1070:	af00      	add	r7, sp, #0
    1072:	6078      	str	r0, [r7, #4]
{
} //~CondesatorFan_Class
    1074:	687b      	ldr	r3, [r7, #4]
    1076:	4618      	mov	r0, r3
    1078:	370c      	adds	r7, #12
    107a:	46bd      	mov	sp, r7
    107c:	bc80      	pop	{r7}
    107e:	4770      	bx	lr

00001080 <_ZN17ConfigState_ClassC1Ev>:

} ;


// default constructor
ConfigState_Class::ConfigState_Class()
    1080:	b480      	push	{r7}
    1082:	b083      	sub	sp, #12
    1084:	af00      	add	r7, sp, #0
    1086:	6078      	str	r0, [r7, #4]
    1088:	4a13      	ldr	r2, [pc, #76]	; (10d8 <_ZN17ConfigState_ClassC1Ev+0x58>)
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kHVACStateReset;
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	f240 122d 	movw	r2, #301	; 0x12d
    1094:	629a      	str	r2, [r3, #40]	; 0x28
	defaultState.callingState = kHVACStateReset;
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	f240 122d 	movw	r2, #301	; 0x12d
    109c:	62da      	str	r2, [r3, #44]	; 0x2c
	defaultState.internalCateringState = 0;
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	2200      	movs	r2, #0
    10a2:	631a      	str	r2, [r3, #48]	; 0x30
	//defaultState.targetUDC = 0.0;
	defaultState.cycleDuration = 0;
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	2200      	movs	r2, #0
    10a8:	645a      	str	r2, [r3, #68]	; 0x44
	defaultState.inStateTime = 0;
    10aa:	687b      	ldr	r3, [r7, #4]
    10ac:	2200      	movs	r2, #0
    10ae:	63da      	str	r2, [r3, #60]	; 0x3c
	defaultState.remainingTime = 0;
    10b0:	687b      	ldr	r3, [r7, #4]
    10b2:	2200      	movs	r2, #0
    10b4:	649a      	str	r2, [r3, #72]	; 0x48
	defaultState.waitingExceededTime = 0;
    10b6:	687b      	ldr	r3, [r7, #4]
    10b8:	2200      	movs	r2, #0
    10ba:	651a      	str	r2, [r3, #80]	; 0x50
	defaultState.fansOnAfterCateringCycleTime = forever;
    10bc:	4b07      	ldr	r3, [pc, #28]	; (10dc <_ZN17ConfigState_ClassC1Ev+0x5c>)
    10be:	681a      	ldr	r2, [r3, #0]
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	655a      	str	r2, [r3, #84]	; 0x54
	defaultState.magic=0xCAFEBABE;
    10c4:	687b      	ldr	r3, [r7, #4]
    10c6:	4a06      	ldr	r2, [pc, #24]	; (10e0 <_ZN17ConfigState_ClassC1Ev+0x60>)
    10c8:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
    10ca:	687b      	ldr	r3, [r7, #4]
    10cc:	4618      	mov	r0, r3
    10ce:	370c      	adds	r7, #12
    10d0:	46bd      	mov	sp, r7
    10d2:	bc80      	pop	{r7}
    10d4:	4770      	bx	lr
    10d6:	bf00      	nop
    10d8:	0002069c 	.word	0x0002069c
    10dc:	00021fb4 	.word	0x00021fb4
    10e0:	cafebabe 	.word	0xcafebabe

000010e4 <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
    10e4:	b480      	push	{r7}
    10e6:	b083      	sub	sp, #12
    10e8:	af00      	add	r7, sp, #0
    10ea:	6078      	str	r0, [r7, #4]
    10ec:	4a04      	ldr	r2, [pc, #16]	; (1100 <_ZN17ConfigState_ClassD1Ev+0x1c>)
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	4618      	mov	r0, r3
    10f6:	370c      	adds	r7, #12
    10f8:	46bd      	mov	sp, r7
    10fa:	bc80      	pop	{r7}
    10fc:	4770      	bx	lr
    10fe:	bf00      	nop
    1100:	0002069c 	.word	0x0002069c

00001104 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
    1104:	b580      	push	{r7, lr}
    1106:	b084      	sub	sp, #16
    1108:	af00      	add	r7, sp, #0
    110a:	60f8      	str	r0, [r7, #12]
    110c:	60b9      	str	r1, [r7, #8]
    110e:	4611      	mov	r1, r2
    1110:	461a      	mov	r2, r3
    1112:	460b      	mov	r3, r1
    1114:	71fb      	strb	r3, [r7, #7]
    1116:	4613      	mov	r3, r2
    1118:	71bb      	strb	r3, [r7, #6]
	
	if (config)
    111a:	79fb      	ldrb	r3, [r7, #7]
    111c:	2b00      	cmp	r3, #0
    111e:	d00f      	beq.n	1140 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x3c>
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
    1120:	68fb      	ldr	r3, [r7, #12]
    1122:	336c      	adds	r3, #108	; 0x6c
    1124:	22ac      	movs	r2, #172	; 0xac
    1126:	4908      	ldr	r1, [pc, #32]	; (1148 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x44>)
    1128:	4618      	mov	r0, r3
    112a:	4b08      	ldr	r3, [pc, #32]	; (114c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x48>)
    112c:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
    112e:	68fb      	ldr	r3, [r7, #12]
    1130:	68ba      	ldr	r2, [r7, #8]
    1132:	679a      	str	r2, [r3, #120]	; 0x78
		memory.writeConfigurationDataArea(configuration);
    1134:	68fb      	ldr	r3, [r7, #12]
    1136:	336c      	adds	r3, #108	; 0x6c
    1138:	4619      	mov	r1, r3
    113a:	4805      	ldr	r0, [pc, #20]	; (1150 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4c>)
    113c:	4b05      	ldr	r3, [pc, #20]	; (1154 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x50>)
    113e:	4798      	blx	r3
	}
	
	
}
    1140:	bf00      	nop
    1142:	3710      	adds	r7, #16
    1144:	46bd      	mov	sp, r7
    1146:	bd80      	pop	{r7, pc}
    1148:	00020290 	.word	0x00020290
    114c:	0001c4a5 	.word	0x0001c4a5
    1150:	20002bf4 	.word	0x20002bf4
    1154:	00002e4d 	.word	0x00002e4d

00001158 <_ZN17ConfigState_Class15SetInitialStateEv>:


uint32_t ConfigState_Class::SetInitialState(){
    1158:	b580      	push	{r7, lr}
    115a:	b084      	sub	sp, #16
    115c:	af00      	add	r7, sp, #0
    115e:	6078      	str	r0, [r7, #4]
		uint32_t	r;
		r=memory.ReadApplicationState(lastHVACState);
    1160:	687b      	ldr	r3, [r7, #4]
    1162:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    1166:	4619      	mov	r1, r3
    1168:	4823      	ldr	r0, [pc, #140]	; (11f8 <_ZN17ConfigState_Class15SetInitialStateEv+0xa0>)
    116a:	4b24      	ldr	r3, [pc, #144]	; (11fc <_ZN17ConfigState_Class15SetInitialStateEv+0xa4>)
    116c:	4798      	blx	r3
    116e:	60f8      	str	r0, [r7, #12]
		if (memory.IsStateDataValid(lastHVACState))
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    1176:	4619      	mov	r1, r3
    1178:	4821      	ldr	r0, [pc, #132]	; (1200 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
    117a:	4b22      	ldr	r3, [pc, #136]	; (1204 <_ZN17ConfigState_Class15SetInitialStateEv+0xac>)
    117c:	4798      	blx	r3
    117e:	4603      	mov	r3, r0
    1180:	2b00      	cmp	r3, #0
    1182:	d007      	beq.n	1194 <_ZN17ConfigState_Class15SetInitialStateEv+0x3c>
		{
				hvac.SetCurrentState(lastHVACState);
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    118a:	4619      	mov	r1, r3
    118c:	481e      	ldr	r0, [pc, #120]	; (1208 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
    118e:	4b1f      	ldr	r3, [pc, #124]	; (120c <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
    1190:	4798      	blx	r3
    1192:	e02b      	b.n	11ec <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
		} 
		else
		{	
			r=memory.ReadFastApplicationState(lastHVACState);
    1194:	687b      	ldr	r3, [r7, #4]
    1196:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    119a:	4619      	mov	r1, r3
    119c:	481c      	ldr	r0, [pc, #112]	; (1210 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
    119e:	4b1d      	ldr	r3, [pc, #116]	; (1214 <_ZN17ConfigState_Class15SetInitialStateEv+0xbc>)
    11a0:	4798      	blx	r3
    11a2:	60f8      	str	r0, [r7, #12]
			if (memory.IsFastStateDataValid(lastHVACState))
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    11aa:	4619      	mov	r1, r3
    11ac:	4814      	ldr	r0, [pc, #80]	; (1200 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
    11ae:	4b1a      	ldr	r3, [pc, #104]	; (1218 <_ZN17ConfigState_Class15SetInitialStateEv+0xc0>)
    11b0:	4798      	blx	r3
    11b2:	4603      	mov	r3, r0
    11b4:	2b00      	cmp	r3, #0
    11b6:	d00e      	beq.n	11d6 <_ZN17ConfigState_Class15SetInitialStateEv+0x7e>
			{
				hvac.SetCurrentState(lastHVACState);
    11b8:	687b      	ldr	r3, [r7, #4]
    11ba:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    11be:	4619      	mov	r1, r3
    11c0:	4811      	ldr	r0, [pc, #68]	; (1208 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
    11c2:	4b12      	ldr	r3, [pc, #72]	; (120c <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
    11c4:	4798      	blx	r3
				memory.SaveApplicationState(lastHVACState);
    11c6:	687b      	ldr	r3, [r7, #4]
    11c8:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    11cc:	4619      	mov	r1, r3
    11ce:	4813      	ldr	r0, [pc, #76]	; (121c <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
    11d0:	4b13      	ldr	r3, [pc, #76]	; (1220 <_ZN17ConfigState_Class15SetInitialStateEv+0xc8>)
    11d2:	4798      	blx	r3
    11d4:	e00a      	b.n	11ec <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
			} 
			else
			{
				hvac.SetDefaultState();
    11d6:	4813      	ldr	r0, [pc, #76]	; (1224 <_ZN17ConfigState_Class15SetInitialStateEv+0xcc>)
    11d8:	4b13      	ldr	r3, [pc, #76]	; (1228 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
    11da:	4798      	blx	r3
				memory.WriteValidApplicationState(hvac.defaultState);
    11dc:	4913      	ldr	r1, [pc, #76]	; (122c <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
    11de:	480f      	ldr	r0, [pc, #60]	; (121c <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
    11e0:	4b13      	ldr	r3, [pc, #76]	; (1230 <_ZN17ConfigState_Class15SetInitialStateEv+0xd8>)
    11e2:	4798      	blx	r3
				memory.WriteFastCurrentState(hvac.defaultState);
    11e4:	4911      	ldr	r1, [pc, #68]	; (122c <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
    11e6:	480a      	ldr	r0, [pc, #40]	; (1210 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
    11e8:	4b12      	ldr	r3, [pc, #72]	; (1234 <_ZN17ConfigState_Class15SetInitialStateEv+0xdc>)
    11ea:	4798      	blx	r3
			}
					
		
		}

		return r;
    11ec:	68fb      	ldr	r3, [r7, #12]
	};
    11ee:	4618      	mov	r0, r3
    11f0:	3710      	adds	r7, #16
    11f2:	46bd      	mov	sp, r7
    11f4:	bd80      	pop	{r7, pc}
    11f6:	bf00      	nop
    11f8:	20002d88 	.word	0x20002d88
    11fc:	00002c8d 	.word	0x00002c8d
    1200:	20002bf4 	.word	0x20002bf4
    1204:	00002ef9 	.word	0x00002ef9
    1208:	200081d8 	.word	0x200081d8
    120c:	0000429d 	.word	0x0000429d
    1210:	20002d78 	.word	0x20002d78
    1214:	00001aa9 	.word	0x00001aa9
    1218:	00002f3d 	.word	0x00002f3d
    121c:	20002708 	.word	0x20002708
    1220:	00002829 	.word	0x00002829
    1224:	200083f0 	.word	0x200083f0
    1228:	0000143d 	.word	0x0000143d
    122c:	200083f4 	.word	0x200083f4
    1230:	0000273d 	.word	0x0000273d
    1234:	00001af1 	.word	0x00001af1

00001238 <_ZN17ConfigState_Class22UpdateStatusArincLabelEv>:
	
uint32_t	ConfigState_Class::UpdateStatusArincLabel(void){
    1238:	b480      	push	{r7}
    123a:	b085      	sub	sp, #20
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]
	uint32_t s=0;
    1240:	2300      	movs	r3, #0
    1242:	60fb      	str	r3, [r7, #12]
	AcknoledgeStatus as=hvac.hvacState->arincStatus;
    1244:	4b19      	ldr	r3, [pc, #100]	; (12ac <_ZN17ConfigState_Class22UpdateStatusArincLabelEv+0x74>)
    1246:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    124a:	69db      	ldr	r3, [r3, #28]
    124c:	60bb      	str	r3, [r7, #8]
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    124e:	7a3b      	ldrb	r3, [r7, #8]
    1250:	461a      	mov	r2, r3
    1252:	7a7b      	ldrb	r3, [r7, #9]
    1254:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1258:	b2db      	uxtb	r3, r3
    125a:	009b      	lsls	r3, r3, #2
    125c:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
    125e:	7a7b      	ldrb	r3, [r7, #9]
    1260:	f3c3 0340 	ubfx	r3, r3, #1, #1
    1264:	b2db      	uxtb	r3, r3
    1266:	00db      	lsls	r3, r3, #3
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    1268:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
    126a:	7a7b      	ldrb	r3, [r7, #9]
    126c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    1270:	b2db      	uxtb	r3, r3
    1272:	011b      	lsls	r3, r3, #4
    1274:	431a      	orrs	r2, r3
	//|(((uint32_t)0x1d)<<9)
	|(((uint32_t)as.statusFV)<<5)|(((uint32_t)as.DEFOG)<<7);
    1276:	7abb      	ldrb	r3, [r7, #10]
    1278:	015b      	lsls	r3, r3, #5
    127a:	431a      	orrs	r2, r3
    127c:	7afb      	ldrb	r3, [r7, #11]
    127e:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1282:	b2db      	uxtb	r3, r3
    1284:	01db      	lsls	r3, r3, #7
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    1286:	4313      	orrs	r3, r2
    1288:	60fb      	str	r3, [r7, #12]
	lastAcknowledgeStatus=acknowledgeStatus;
    128a:	687b      	ldr	r3, [r7, #4]
    128c:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
    1290:	687b      	ldr	r3, [r7, #4]
    1292:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	acknowledgeStatus=s;
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	68fa      	ldr	r2, [r7, #12]
    129a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	return s;
    129e:	68fb      	ldr	r3, [r7, #12]
}	
    12a0:	4618      	mov	r0, r3
    12a2:	3714      	adds	r7, #20
    12a4:	46bd      	mov	sp, r7
    12a6:	bc80      	pop	{r7}
    12a8:	4770      	bx	lr
    12aa:	bf00      	nop
    12ac:	200081d8 	.word	0x200081d8

000012b0 <_ZN17ConfigState_Class20GetAcknowledgeStatusEv>:

uint32_t ConfigState_Class::GetAcknowledgeStatus(void){
    12b0:	b480      	push	{r7}
    12b2:	b083      	sub	sp, #12
    12b4:	af00      	add	r7, sp, #0
    12b6:	6078      	str	r0, [r7, #4]
	
	return acknowledgeStatus;
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
}
    12be:	4618      	mov	r0, r3
    12c0:	370c      	adds	r7, #12
    12c2:	46bd      	mov	sp, r7
    12c4:	bc80      	pop	{r7}
    12c6:	4770      	bx	lr

000012c8 <_ZN17ConfigState_Class25IsStatusArinclabelChangedEv>:
bool  ConfigState_Class::IsStatusArinclabelChanged(void){
    12c8:	b580      	push	{r7, lr}
    12ca:	b082      	sub	sp, #8
    12cc:	af00      	add	r7, sp, #0
    12ce:	6078      	str	r0, [r7, #4]
	UpdateStatusArincLabel();
    12d0:	6878      	ldr	r0, [r7, #4]
    12d2:	4b08      	ldr	r3, [pc, #32]	; (12f4 <_ZN17ConfigState_Class25IsStatusArinclabelChangedEv+0x2c>)
    12d4:	4798      	blx	r3
	return lastAcknowledgeStatus!=acknowledgeStatus;
    12d6:	687b      	ldr	r3, [r7, #4]
    12d8:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
    12dc:	687b      	ldr	r3, [r7, #4]
    12de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    12e2:	429a      	cmp	r2, r3
    12e4:	bf14      	ite	ne
    12e6:	2301      	movne	r3, #1
    12e8:	2300      	moveq	r3, #0
    12ea:	b2db      	uxtb	r3, r3
}
    12ec:	4618      	mov	r0, r3
    12ee:	3708      	adds	r7, #8
    12f0:	46bd      	mov	sp, r7
    12f2:	bd80      	pop	{r7, pc}
    12f4:	00001239 	.word	0x00001239

000012f8 <_ZN17ConfigState_Class10PrintStateEv>:
		st=is;
	}
	s=uint32_t(st.rawStatus);
	return	s;
}
void	ConfigState_Class::PrintState(void){
    12f8:	b580      	push	{r7, lr}
    12fa:	b0a2      	sub	sp, #136	; 0x88
    12fc:	af00      	add	r7, sp, #0
    12fe:	6078      	str	r0, [r7, #4]
	HVACState	hs;
	bool	done=false;
    1300:	2300      	movs	r3, #0
    1302:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	hvac.GetCurrentState(hs);
    1306:	f107 030c 	add.w	r3, r7, #12
    130a:	4619      	mov	r1, r3
    130c:	483d      	ldr	r0, [pc, #244]	; (1404 <_ZN17ConfigState_Class10PrintStateEv+0x10c>)
    130e:	4b3e      	ldr	r3, [pc, #248]	; (1408 <_ZN17ConfigState_Class10PrintStateEv+0x110>)
    1310:	4798      	blx	r3
	uint32_t	nowTime=(uint32_t)hs.now;
    1312:	693b      	ldr	r3, [r7, #16]
    1314:	60bb      	str	r3, [r7, #8]
	char *act=ctime((time_t *)&nowTime);
    1316:	f107 0308 	add.w	r3, r7, #8
    131a:	4618      	mov	r0, r3
    131c:	4b3b      	ldr	r3, [pc, #236]	; (140c <_ZN17ConfigState_Class10PrintStateEv+0x114>)
    131e:	4798      	blx	r3
    1320:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	k=sizeof(printableNamesHVACState)/(sizeof(char*));
    1324:	687b      	ldr	r3, [r7, #4]
    1326:	2206      	movs	r2, #6
    1328:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
	for (uint8_t ii = 0; ii < k; ii++)
    132c:	2300      	movs	r3, #0
    132e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    1332:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    1336:	687a      	ldr	r2, [r7, #4]
    1338:	f892 2296 	ldrb.w	r2, [r2, #662]	; 0x296
    133c:	4293      	cmp	r3, r2
    133e:	da5d      	bge.n	13fc <_ZN17ConfigState_Class10PrintStateEv+0x104>
	{
	
		usb<<printableNamesHVACState[ii]<<" : ";
    1340:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    1344:	009b      	lsls	r3, r3, #2
    1346:	4a32      	ldr	r2, [pc, #200]	; (1410 <_ZN17ConfigState_Class10PrintStateEv+0x118>)
    1348:	4413      	add	r3, r2
    134a:	4619      	mov	r1, r3
    134c:	4831      	ldr	r0, [pc, #196]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    134e:	4b32      	ldr	r3, [pc, #200]	; (1418 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    1350:	4798      	blx	r3
    1352:	4603      	mov	r3, r0
    1354:	4931      	ldr	r1, [pc, #196]	; (141c <_ZN17ConfigState_Class10PrintStateEv+0x124>)
    1356:	4618      	mov	r0, r3
    1358:	4b31      	ldr	r3, [pc, #196]	; (1420 <_ZN17ConfigState_Class10PrintStateEv+0x128>)
    135a:	4798      	blx	r3
	
		switch (ii)
    135c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    1360:	2b05      	cmp	r3, #5
    1362:	d83b      	bhi.n	13dc <_ZN17ConfigState_Class10PrintStateEv+0xe4>
    1364:	a201      	add	r2, pc, #4	; (adr r2, 136c <_ZN17ConfigState_Class10PrintStateEv+0x74>)
    1366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    136a:	bf00      	nop
    136c:	00001385 	.word	0x00001385
    1370:	00001397 	.word	0x00001397
    1374:	000013a9 	.word	0x000013a9
    1378:	000013e7 	.word	0x000013e7
    137c:	000013bb 	.word	0x000013bb
    1380:	000013c7 	.word	0x000013c7
		{
			case 0:
				usb<<(uint32_t)hs.currentState;
    1384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1386:	677b      	str	r3, [r7, #116]	; 0x74
    1388:	f107 0374 	add.w	r3, r7, #116	; 0x74
    138c:	4619      	mov	r1, r3
    138e:	4821      	ldr	r0, [pc, #132]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    1390:	4b24      	ldr	r3, [pc, #144]	; (1424 <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    1392:	4798      	blx	r3
			/* Your code here */
			break;
    1394:	e028      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			case 1:
				usb<<(uint32_t)hs.cycleDuration;
    1396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1398:	67bb      	str	r3, [r7, #120]	; 0x78
    139a:	f107 0378 	add.w	r3, r7, #120	; 0x78
    139e:	4619      	mov	r1, r3
    13a0:	481c      	ldr	r0, [pc, #112]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13a2:	4b20      	ldr	r3, [pc, #128]	; (1424 <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    13a4:	4798      	blx	r3
			/* Your code here */
			break;
    13a6:	e01f      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			case 2:
				usb<<(uint32_t)hs.remainingTime;
    13a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    13aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    13ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
    13b0:	4619      	mov	r1, r3
    13b2:	4818      	ldr	r0, [pc, #96]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13b4:	4b1b      	ldr	r3, [pc, #108]	; (1424 <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    13b6:	4798      	blx	r3
			/* Your code here */
			break;
    13b8:	e016      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
				//usb<<(uint32_t)hs.targetPower;
			/* Your code here */
			break;
			case 4:
				
				usb.print(act);
    13ba:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    13be:	4815      	ldr	r0, [pc, #84]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13c0:	4b19      	ldr	r3, [pc, #100]	; (1428 <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    13c2:	4798      	blx	r3
			/* Your code here */
			break;
    13c4:	e010      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			case 5:
				usb<<"0x";
    13c6:	4919      	ldr	r1, [pc, #100]	; (142c <_ZN17ConfigState_Class10PrintStateEv+0x134>)
    13c8:	4812      	ldr	r0, [pc, #72]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13ca:	4b19      	ldr	r3, [pc, #100]	; (1430 <_ZN17ConfigState_Class10PrintStateEv+0x138>)
    13cc:	4798      	blx	r3
				usb.print(hs.magic,HEX);
    13ce:	68fb      	ldr	r3, [r7, #12]
    13d0:	2210      	movs	r2, #16
    13d2:	4619      	mov	r1, r3
    13d4:	480f      	ldr	r0, [pc, #60]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13d6:	4b17      	ldr	r3, [pc, #92]	; (1434 <_ZN17ConfigState_Class10PrintStateEv+0x13c>)
    13d8:	4798      	blx	r3
			
				/* Your code here */
			break;
    13da:	e005      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			default:
				i=sizeof(printableNamesHVACState);
    13dc:	687b      	ldr	r3, [r7, #4]
    13de:	2218      	movs	r2, #24
    13e0:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
				
			/* Your code here */
			break;
    13e4:	e000      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			break;
    13e6:	bf00      	nop
		}
		usb<<NEWLINE;
    13e8:	4913      	ldr	r1, [pc, #76]	; (1438 <_ZN17ConfigState_Class10PrintStateEv+0x140>)
    13ea:	480a      	ldr	r0, [pc, #40]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13ec:	4b10      	ldr	r3, [pc, #64]	; (1430 <_ZN17ConfigState_Class10PrintStateEv+0x138>)
    13ee:	4798      	blx	r3
	for (uint8_t ii = 0; ii < k; ii++)
    13f0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    13f4:	3301      	adds	r3, #1
    13f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    13fa:	e79a      	b.n	1332 <_ZN17ConfigState_Class10PrintStateEv+0x3a>
			
	}
	
}
    13fc:	bf00      	nop
    13fe:	3788      	adds	r7, #136	; 0x88
    1400:	46bd      	mov	sp, r7
    1402:	bd80      	pop	{r7, pc}
    1404:	200081d8 	.word	0x200081d8
    1408:	00004249 	.word	0x00004249
    140c:	0001c1bd 	.word	0x0001c1bd
    1410:	20000050 	.word	0x20000050
    1414:	2000a368 	.word	0x2000a368
    1418:	00001461 	.word	0x00001461
    141c:	00020688 	.word	0x00020688
    1420:	00001485 	.word	0x00001485
    1424:	000014a5 	.word	0x000014a5
    1428:	00018489 	.word	0x00018489
    142c:	0002068c 	.word	0x0002068c
    1430:	00000c99 	.word	0x00000c99
    1434:	000184d1 	.word	0x000184d1
    1438:	00020690 	.word	0x00020690

0000143c <_ZN17ConfigState_Class15SetDefaultStateEv>:
void	ConfigState_Class::SetDefaultState(void){
    143c:	b580      	push	{r7, lr}
    143e:	b082      	sub	sp, #8
    1440:	af00      	add	r7, sp, #0
    1442:	6078      	str	r0, [r7, #4]
	hvac.SetCurrentState(defaultState);
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	3304      	adds	r3, #4
    1448:	4619      	mov	r1, r3
    144a:	4803      	ldr	r0, [pc, #12]	; (1458 <_ZN17ConfigState_Class15SetDefaultStateEv+0x1c>)
    144c:	4b03      	ldr	r3, [pc, #12]	; (145c <_ZN17ConfigState_Class15SetDefaultStateEv+0x20>)
    144e:	4798      	blx	r3

}
    1450:	bf00      	nop
    1452:	3708      	adds	r7, #8
    1454:	46bd      	mov	sp, r7
    1456:	bd80      	pop	{r7, pc}
    1458:	200081d8 	.word	0x200081d8
    145c:	0000429d 	.word	0x0000429d

00001460 <_ZlsIPKcER5PrintS3_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1460:	b580      	push	{r7, lr}
    1462:	b082      	sub	sp, #8
    1464:	af00      	add	r7, sp, #0
    1466:	6078      	str	r0, [r7, #4]
    1468:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    146a:	683b      	ldr	r3, [r7, #0]
    146c:	681b      	ldr	r3, [r3, #0]
    146e:	4619      	mov	r1, r3
    1470:	6878      	ldr	r0, [r7, #4]
    1472:	4b03      	ldr	r3, [pc, #12]	; (1480 <_ZlsIPKcER5PrintS3_RKT_+0x20>)
    1474:	4798      	blx	r3
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	4618      	mov	r0, r3
    147a:	3708      	adds	r7, #8
    147c:	46bd      	mov	sp, r7
    147e:	bd80      	pop	{r7, pc}
    1480:	00018489 	.word	0x00018489

00001484 <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1484:	b580      	push	{r7, lr}
    1486:	b082      	sub	sp, #8
    1488:	af00      	add	r7, sp, #0
    148a:	6078      	str	r0, [r7, #4]
    148c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    148e:	6839      	ldr	r1, [r7, #0]
    1490:	6878      	ldr	r0, [r7, #4]
    1492:	4b03      	ldr	r3, [pc, #12]	; (14a0 <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
    1494:	4798      	blx	r3
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	4618      	mov	r0, r3
    149a:	3708      	adds	r7, #8
    149c:	46bd      	mov	sp, r7
    149e:	bd80      	pop	{r7, pc}
    14a0:	00018489 	.word	0x00018489

000014a4 <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    14a4:	b580      	push	{r7, lr}
    14a6:	b082      	sub	sp, #8
    14a8:	af00      	add	r7, sp, #0
    14aa:	6078      	str	r0, [r7, #4]
    14ac:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    14ae:	683b      	ldr	r3, [r7, #0]
    14b0:	681b      	ldr	r3, [r3, #0]
    14b2:	220a      	movs	r2, #10
    14b4:	4619      	mov	r1, r3
    14b6:	6878      	ldr	r0, [r7, #4]
    14b8:	4b03      	ldr	r3, [pc, #12]	; (14c8 <_ZlsImER5PrintS1_RKT_+0x24>)
    14ba:	4798      	blx	r3
    14bc:	687b      	ldr	r3, [r7, #4]
    14be:	4618      	mov	r0, r3
    14c0:	3708      	adds	r7, #8
    14c2:	46bd      	mov	sp, r7
    14c4:	bd80      	pop	{r7, pc}
    14c6:	bf00      	nop
    14c8:	000184d1 	.word	0x000184d1

000014cc <_ZN11CRC32_ClassC1Ev>:

#include "CRC32_Class.h"
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
    14cc:	b480      	push	{r7}
    14ce:	b083      	sub	sp, #12
    14d0:	af00      	add	r7, sp, #0
    14d2:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
    14d4:	687b      	ldr	r3, [r7, #4]
    14d6:	4618      	mov	r0, r3
    14d8:	370c      	adds	r7, #12
    14da:	46bd      	mov	sp, r7
    14dc:	bc80      	pop	{r7}
    14de:	4770      	bx	lr

000014e0 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
    14e0:	b480      	push	{r7}
    14e2:	b083      	sub	sp, #12
    14e4:	af00      	add	r7, sp, #0
    14e6:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	4618      	mov	r0, r3
    14ec:	370c      	adds	r7, #12
    14ee:	46bd      	mov	sp, r7
    14f0:	bc80      	pop	{r7}
    14f2:	4770      	bx	lr

000014f4 <_ZN11CRC32_Class4InitEm>:

uint32_t	CRC32_Class::Init(uint32_t refCRC/* =0xFFFFFFFF */){
    14f4:	b580      	push	{r7, lr}
    14f6:	b082      	sub	sp, #8
    14f8:	af00      	add	r7, sp, #0
    14fa:	6078      	str	r0, [r7, #4]
    14fc:	6039      	str	r1, [r7, #0]
	crc_sync_enable(&CRC_CALC);
    14fe:	4806      	ldr	r0, [pc, #24]	; (1518 <_ZN11CRC32_Class4InitEm+0x24>)
    1500:	4b06      	ldr	r3, [pc, #24]	; (151c <_ZN11CRC32_Class4InitEm+0x28>)
    1502:	4798      	blx	r3
	refCRC32=refCRC;
    1504:	687b      	ldr	r3, [r7, #4]
    1506:	683a      	ldr	r2, [r7, #0]
    1508:	601a      	str	r2, [r3, #0]
	return	refCRC32;
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	681b      	ldr	r3, [r3, #0]
}
    150e:	4618      	mov	r0, r3
    1510:	3708      	adds	r7, #8
    1512:	46bd      	mov	sp, r7
    1514:	bd80      	pop	{r7, pc}
    1516:	bf00      	nop
    1518:	2000a920 	.word	0x2000a920
    151c:	00006691 	.word	0x00006691

00001520 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    1520:	b590      	push	{r4, r7, lr}
    1522:	b083      	sub	sp, #12
    1524:	af00      	add	r7, sp, #0
    1526:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
    1528:	4b07      	ldr	r3, [pc, #28]	; (1548 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
    152a:	6878      	ldr	r0, [r7, #4]
    152c:	4798      	blx	r3
    152e:	4603      	mov	r3, r0
    1530:	460c      	mov	r4, r1
    1532:	4618      	mov	r0, r3
    1534:	4621      	mov	r1, r4
    1536:	4b05      	ldr	r3, [pc, #20]	; (154c <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x2c>)
    1538:	4798      	blx	r3
    153a:	4603      	mov	r3, r0
    153c:	460c      	mov	r4, r1
    153e:	4618      	mov	r0, r3
    1540:	4621      	mov	r1, r4
    1542:	370c      	adds	r7, #12
    1544:	46bd      	mov	sp, r7
    1546:	bd90      	pop	{r4, r7, pc}
    1548:	0001b239 	.word	0x0001b239
    154c:	00019d51 	.word	0x00019d51

00001550 <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
    1550:	b590      	push	{r4, r7, lr}
    1552:	b087      	sub	sp, #28
    1554:	af00      	add	r7, sp, #0
    1556:	60f8      	str	r0, [r7, #12]
    1558:	60b9      	str	r1, [r7, #8]
    155a:	607a      	str	r2, [r7, #4]
	uint32_t	lenght32=(uint32_t)floor(len/4);
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	089b      	lsrs	r3, r3, #2
    1560:	4618      	mov	r0, r3
    1562:	4b0f      	ldr	r3, [pc, #60]	; (15a0 <_ZN11CRC32_Class12CalculateCRCEPmm+0x50>)
    1564:	4798      	blx	r3
    1566:	460a      	mov	r2, r1
    1568:	4601      	mov	r1, r0
    156a:	4b0e      	ldr	r3, [pc, #56]	; (15a4 <_ZN11CRC32_Class12CalculateCRCEPmm+0x54>)
    156c:	4608      	mov	r0, r1
    156e:	4611      	mov	r1, r2
    1570:	4798      	blx	r3
    1572:	4603      	mov	r3, r0
    1574:	617b      	str	r3, [r7, #20]
	uint32_t crc=Init();
    1576:	f04f 31ff 	mov.w	r1, #4294967295
    157a:	68f8      	ldr	r0, [r7, #12]
    157c:	4b0a      	ldr	r3, [pc, #40]	; (15a8 <_ZN11CRC32_Class12CalculateCRCEPmm+0x58>)
    157e:	4798      	blx	r3
    1580:	4603      	mov	r3, r0
    1582:	613b      	str	r3, [r7, #16]
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
    1584:	f107 0310 	add.w	r3, r7, #16
    1588:	697a      	ldr	r2, [r7, #20]
    158a:	68b9      	ldr	r1, [r7, #8]
    158c:	4807      	ldr	r0, [pc, #28]	; (15ac <_ZN11CRC32_Class12CalculateCRCEPmm+0x5c>)
    158e:	4c08      	ldr	r4, [pc, #32]	; (15b0 <_ZN11CRC32_Class12CalculateCRCEPmm+0x60>)
    1590:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
    1592:	693b      	ldr	r3, [r7, #16]
    1594:	43db      	mvns	r3, r3
    1596:	4618      	mov	r0, r3
    1598:	371c      	adds	r7, #28
    159a:	46bd      	mov	sp, r7
    159c:	bd90      	pop	{r4, r7, pc}
    159e:	bf00      	nop
    15a0:	00001521 	.word	0x00001521
    15a4:	0001b885 	.word	0x0001b885
    15a8:	000014f5 	.word	0x000014f5
    15ac:	2000a920 	.word	0x2000a920
    15b0:	000066cd 	.word	0x000066cd

000015b4 <_ZN15DataLoger_ClassC1Ev>:
#include "ConfigurationData.h"
#include "FlashHandler_Class.h"
#include "N25Q256_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
    15b4:	b580      	push	{r7, lr}
    15b6:	b082      	sub	sp, #8
    15b8:	af00      	add	r7, sp, #0
    15ba:	6078      	str	r0, [r7, #4]
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	4618      	mov	r0, r3
    15c0:	4b06      	ldr	r3, [pc, #24]	; (15dc <_ZN15DataLoger_ClassC1Ev+0x28>)
    15c2:	4798      	blx	r3
    15c4:	687b      	ldr	r3, [r7, #4]
    15c6:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
    15ca:	4618      	mov	r0, r3
    15cc:	4b04      	ldr	r3, [pc, #16]	; (15e0 <_ZN15DataLoger_ClassC1Ev+0x2c>)
    15ce:	4798      	blx	r3
{
} //DataLoger_Class
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	4618      	mov	r0, r3
    15d4:	3708      	adds	r7, #8
    15d6:	46bd      	mov	sp, r7
    15d8:	bd80      	pop	{r7, pc}
    15da:	bf00      	nop
    15dc:	00016b35 	.word	0x00016b35
    15e0:	00001619 	.word	0x00001619

000015e4 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
    15e4:	b580      	push	{r7, lr}
    15e6:	b082      	sub	sp, #8
    15e8:	af00      	add	r7, sp, #0
    15ea:	6078      	str	r0, [r7, #4]
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	4618      	mov	r0, r3
    15f0:	4b03      	ldr	r3, [pc, #12]	; (1600 <_ZN15DataLoger_ClassD1Ev+0x1c>)
    15f2:	4798      	blx	r3
{
} //~DataLoger_Class
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	4618      	mov	r0, r3
    15f8:	3708      	adds	r7, #8
    15fa:	46bd      	mov	sp, r7
    15fc:	bd80      	pop	{r7, pc}
    15fe:	bf00      	nop
    1600:	00016b71 	.word	0x00016b71

00001604 <_ZN15DataLoger_Class13LogResetEventEv>:
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)PTR_CONFIG_DATA(cd),add,sizeof(dataOnMemory));
	
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
    1604:	b480      	push	{r7}
    1606:	b083      	sub	sp, #12
    1608:	af00      	add	r7, sp, #0
    160a:	6078      	str	r0, [r7, #4]
	return 0;
    160c:	2300      	movs	r3, #0
    160e:	4618      	mov	r0, r3
    1610:	370c      	adds	r7, #12
    1612:	46bd      	mov	sp, r7
    1614:	bc80      	pop	{r7}
    1616:	4770      	bx	lr

00001618 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
    1618:	b580      	push	{r7, lr}
    161a:	b082      	sub	sp, #8
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	f44f 7200 	mov.w	r2, #512	; 0x200
    1626:	2100      	movs	r1, #0
    1628:	4618      	mov	r0, r3
    162a:	4b05      	ldr	r3, [pc, #20]	; (1640 <_ZN11RingBufferNILi512EEC1Ev+0x28>)
    162c:	4798      	blx	r3
    clear();
    162e:	6878      	ldr	r0, [r7, #4]
    1630:	4b04      	ldr	r3, [pc, #16]	; (1644 <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
    1632:	4798      	blx	r3
}
    1634:	687b      	ldr	r3, [r7, #4]
    1636:	4618      	mov	r0, r3
    1638:	3708      	adds	r7, #8
    163a:	46bd      	mov	sp, r7
    163c:	bd80      	pop	{r7, pc}
    163e:	bf00      	nop
    1640:	0001c5d9 	.word	0x0001c5d9
    1644:	00001649 	.word	0x00001649

00001648 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
    1648:	b480      	push	{r7}
    164a:	b083      	sub	sp, #12
    164c:	af00      	add	r7, sp, #0
    164e:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	2200      	movs	r2, #0
    1654:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	2200      	movs	r2, #0
    165c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
    1660:	bf00      	nop
    1662:	370c      	adds	r7, #12
    1664:	46bd      	mov	sp, r7
    1666:	bc80      	pop	{r7}
    1668:	4770      	bx	lr
	...

0000166c <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
    166c:	b580      	push	{r7, lr}
    166e:	b082      	sub	sp, #8
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	687b      	ldr	r3, [r7, #4]
    1676:	33a8      	adds	r3, #168	; 0xa8
    1678:	4618      	mov	r0, r3
    167a:	4b07      	ldr	r3, [pc, #28]	; (1698 <_ZN14DateTime_ClassC1Ev+0x2c>)
    167c:	4798      	blx	r3
    167e:	687b      	ldr	r3, [r7, #4]
    1680:	4618      	mov	r0, r3
    1682:	4b06      	ldr	r3, [pc, #24]	; (169c <_ZN14DateTime_ClassC1Ev+0x30>)
    1684:	4798      	blx	r3
    1686:	4a06      	ldr	r2, [pc, #24]	; (16a0 <_ZN14DateTime_ClassC1Ev+0x34>)
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	4618      	mov	r0, r3
    1690:	3708      	adds	r7, #8
    1692:	46bd      	mov	sp, r7
    1694:	bd80      	pop	{r7, pc}
    1696:	bf00      	nop
    1698:	00001a41 	.word	0x00001a41
    169c:	00016f45 	.word	0x00016f45
    16a0:	000206a8 	.word	0x000206a8

000016a4 <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
    16a4:	b580      	push	{r7, lr}
    16a6:	b082      	sub	sp, #8
    16a8:	af00      	add	r7, sp, #0
    16aa:	6078      	str	r0, [r7, #4]
    16ac:	4a08      	ldr	r2, [pc, #32]	; (16d0 <_ZN14DateTime_ClassD1Ev+0x2c>)
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	601a      	str	r2, [r3, #0]
    16b2:	687b      	ldr	r3, [r7, #4]
    16b4:	4618      	mov	r0, r3
    16b6:	4b07      	ldr	r3, [pc, #28]	; (16d4 <_ZN14DateTime_ClassD1Ev+0x30>)
    16b8:	4798      	blx	r3
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	33a8      	adds	r3, #168	; 0xa8
    16be:	4618      	mov	r0, r3
    16c0:	4b05      	ldr	r3, [pc, #20]	; (16d8 <_ZN14DateTime_ClassD1Ev+0x34>)
    16c2:	4798      	blx	r3
{
} //~DateTime_Class
    16c4:	687b      	ldr	r3, [r7, #4]
    16c6:	4618      	mov	r0, r3
    16c8:	3708      	adds	r7, #8
    16ca:	46bd      	mov	sp, r7
    16cc:	bd80      	pop	{r7, pc}
    16ce:	bf00      	nop
    16d0:	000206a8 	.word	0x000206a8
    16d4:	00016fb5 	.word	0x00016fb5
    16d8:	00001a55 	.word	0x00001a55

000016dc <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
    16dc:	b580      	push	{r7, lr}
    16de:	b084      	sub	sp, #16
    16e0:	af00      	add	r7, sp, #0
    16e2:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&eepromMap->stack;
    16e4:	4b0b      	ldr	r3, [pc, #44]	; (1714 <_ZN14DateTime_Class4InitEv+0x38>)
    16e6:	681b      	ldr	r3, [r3, #0]
    16e8:	3370      	adds	r3, #112	; 0x70
    16ea:	60fb      	str	r3, [r7, #12]
	calendar.SetCalendarStackAddress(add);
    16ec:	68f9      	ldr	r1, [r7, #12]
    16ee:	480a      	ldr	r0, [pc, #40]	; (1718 <_ZN14DateTime_Class4InitEv+0x3c>)
    16f0:	4b0a      	ldr	r3, [pc, #40]	; (171c <_ZN14DateTime_Class4InitEv+0x40>)
    16f2:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[0];
    16f4:	4b07      	ldr	r3, [pc, #28]	; (1714 <_ZN14DateTime_Class4InitEv+0x38>)
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	3374      	adds	r3, #116	; 0x74
    16fa:	60bb      	str	r3, [r7, #8]
	calendar.SetCalendarAddress(addTimeLogs);
    16fc:	68b9      	ldr	r1, [r7, #8]
    16fe:	4806      	ldr	r0, [pc, #24]	; (1718 <_ZN14DateTime_Class4InitEv+0x3c>)
    1700:	4b07      	ldr	r3, [pc, #28]	; (1720 <_ZN14DateTime_Class4InitEv+0x44>)
    1702:	4798      	blx	r3
	calendar.Init();
    1704:	4804      	ldr	r0, [pc, #16]	; (1718 <_ZN14DateTime_Class4InitEv+0x3c>)
    1706:	4b07      	ldr	r3, [pc, #28]	; (1724 <_ZN14DateTime_Class4InitEv+0x48>)
    1708:	4798      	blx	r3
	
}
    170a:	bf00      	nop
    170c:	3710      	adds	r7, #16
    170e:	46bd      	mov	sp, r7
    1710:	bd80      	pop	{r7, pc}
    1712:	bf00      	nop
    1714:	2000164c 	.word	0x2000164c
    1718:	2000a0e8 	.word	0x2000a0e8
    171c:	000178b5 	.word	0x000178b5
    1720:	000178d5 	.word	0x000178d5
    1724:	00016fdd 	.word	0x00016fdd

00001728 <_Z41__static_initialization_and_destruction_0ii>:

    1728:	b580      	push	{r7, lr}
    172a:	b082      	sub	sp, #8
    172c:	af00      	add	r7, sp, #0
    172e:	6078      	str	r0, [r7, #4]
    1730:	6039      	str	r1, [r7, #0]
    1732:	687b      	ldr	r3, [r7, #4]
    1734:	2b01      	cmp	r3, #1
    1736:	d10c      	bne.n	1752 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1738:	683b      	ldr	r3, [r7, #0]
    173a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    173e:	4293      	cmp	r3, r2
    1740:	d107      	bne.n	1752 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1742:	4806      	ldr	r0, [pc, #24]	; (175c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1744:	4b06      	ldr	r3, [pc, #24]	; (1760 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1746:	4798      	blx	r3
    1748:	4a06      	ldr	r2, [pc, #24]	; (1764 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    174a:	4907      	ldr	r1, [pc, #28]	; (1768 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    174c:	4803      	ldr	r0, [pc, #12]	; (175c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    174e:	4b07      	ldr	r3, [pc, #28]	; (176c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1750:	4798      	blx	r3
    1752:	bf00      	nop
    1754:	3708      	adds	r7, #8
    1756:	46bd      	mov	sp, r7
    1758:	bd80      	pop	{r7, pc}
    175a:	bf00      	nop
    175c:	200013f8 	.word	0x200013f8
    1760:	0000166d 	.word	0x0000166d
    1764:	20000000 	.word	0x20000000
    1768:	000016a5 	.word	0x000016a5
    176c:	00019d41 	.word	0x00019d41

00001770 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
    1770:	b580      	push	{r7, lr}
    1772:	af00      	add	r7, sp, #0
    1774:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1778:	2001      	movs	r0, #1
    177a:	4b01      	ldr	r3, [pc, #4]	; (1780 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
    177c:	4798      	blx	r3
    177e:	bd80      	pop	{r7, pc}
    1780:	00001729 	.word	0x00001729

00001784 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1784:	b580      	push	{r7, lr}
    1786:	b082      	sub	sp, #8
    1788:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    178a:	4b16      	ldr	r3, [pc, #88]	; (17e4 <Reset_Handler+0x60>)
    178c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    178e:	4b16      	ldr	r3, [pc, #88]	; (17e8 <Reset_Handler+0x64>)
    1790:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1792:	687a      	ldr	r2, [r7, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	429a      	cmp	r2, r3
    1798:	d00c      	beq.n	17b4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    179a:	e007      	b.n	17ac <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	1d1a      	adds	r2, r3, #4
    17a0:	603a      	str	r2, [r7, #0]
    17a2:	687a      	ldr	r2, [r7, #4]
    17a4:	1d11      	adds	r1, r2, #4
    17a6:	6079      	str	r1, [r7, #4]
    17a8:	6812      	ldr	r2, [r2, #0]
    17aa:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    17ac:	683b      	ldr	r3, [r7, #0]
    17ae:	4a0f      	ldr	r2, [pc, #60]	; (17ec <Reset_Handler+0x68>)
    17b0:	4293      	cmp	r3, r2
    17b2:	d3f3      	bcc.n	179c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    17b4:	4b0e      	ldr	r3, [pc, #56]	; (17f0 <Reset_Handler+0x6c>)
    17b6:	603b      	str	r3, [r7, #0]
    17b8:	e004      	b.n	17c4 <Reset_Handler+0x40>
                *pDest++ = 0;
    17ba:	683b      	ldr	r3, [r7, #0]
    17bc:	1d1a      	adds	r2, r3, #4
    17be:	603a      	str	r2, [r7, #0]
    17c0:	2200      	movs	r2, #0
    17c2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	4a0b      	ldr	r2, [pc, #44]	; (17f4 <Reset_Handler+0x70>)
    17c8:	4293      	cmp	r3, r2
    17ca:	d3f6      	bcc.n	17ba <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    17cc:	4b0a      	ldr	r3, [pc, #40]	; (17f8 <Reset_Handler+0x74>)
    17ce:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    17d0:	4a0a      	ldr	r2, [pc, #40]	; (17fc <Reset_Handler+0x78>)
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    17d8:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    17da:	4b09      	ldr	r3, [pc, #36]	; (1800 <Reset_Handler+0x7c>)
    17dc:	4798      	blx	r3

        /* Branch to main function */
        main();
    17de:	4b09      	ldr	r3, [pc, #36]	; (1804 <Reset_Handler+0x80>)
    17e0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    17e2:	e7fe      	b.n	17e2 <Reset_Handler+0x5e>
    17e4:	00022740 	.word	0x00022740
    17e8:	20000000 	.word	0x20000000
    17ec:	20000c44 	.word	0x20000c44
    17f0:	20000c48 	.word	0x20000c48
    17f4:	2000a9e0 	.word	0x2000a9e0
    17f8:	00000000 	.word	0x00000000
    17fc:	e000ed00 	.word	0xe000ed00
    1800:	0001c20d 	.word	0x0001c20d
    1804:	0000223d 	.word	0x0000223d

00001808 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1808:	b480      	push	{r7}
    180a:	af00      	add	r7, sp, #0
        while (1) {
    180c:	e7fe      	b.n	180c <Dummy_Handler+0x4>
	...

00001810 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:


}

// default constructor
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
    1810:	b580      	push	{r7, lr}
    1812:	b082      	sub	sp, #8
    1814:	af00      	add	r7, sp, #0
    1816:	6078      	str	r0, [r7, #4]
    1818:	687b      	ldr	r3, [r7, #4]
    181a:	4618      	mov	r0, r3
    181c:	4b0a      	ldr	r3, [pc, #40]	; (1848 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x38>)
    181e:	4798      	blx	r3
    1820:	687b      	ldr	r3, [r7, #4]
    1822:	3324      	adds	r3, #36	; 0x24
    1824:	4618      	mov	r0, r3
    1826:	4b09      	ldr	r3, [pc, #36]	; (184c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
    1828:	4798      	blx	r3
{
	i2c=&i2cSharedStatic;
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	4a08      	ldr	r2, [pc, #32]	; (1850 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
    182e:	671a      	str	r2, [r3, #112]	; 0x70
	evaporator[0]=&evaporatorFan[0];
    1830:	687b      	ldr	r3, [r7, #4]
    1832:	4a08      	ldr	r2, [pc, #32]	; (1854 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
    1834:	64da      	str	r2, [r3, #76]	; 0x4c
	evaporator[1]=&evaporatorFan[1];
    1836:	687b      	ldr	r3, [r7, #4]
    1838:	4a07      	ldr	r2, [pc, #28]	; (1858 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x48>)
    183a:	651a      	str	r2, [r3, #80]	; 0x50
} //EvaporatorAndCondesatorFans_Class
    183c:	687b      	ldr	r3, [r7, #4]
    183e:	4618      	mov	r0, r3
    1840:	3708      	adds	r7, #8
    1842:	46bd      	mov	sp, r7
    1844:	bd80      	pop	{r7, pc}
    1846:	bf00      	nop
    1848:	000019f9 	.word	0x000019f9
    184c:	00001059 	.word	0x00001059
    1850:	200014b0 	.word	0x200014b0
    1854:	200014c4 	.word	0x200014c4
    1858:	200014e8 	.word	0x200014e8

0000185c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
    185c:	b580      	push	{r7, lr}
    185e:	b082      	sub	sp, #8
    1860:	af00      	add	r7, sp, #0
    1862:	6078      	str	r0, [r7, #4]
    1864:	687b      	ldr	r3, [r7, #4]
    1866:	3324      	adds	r3, #36	; 0x24
    1868:	4618      	mov	r0, r3
    186a:	4b05      	ldr	r3, [pc, #20]	; (1880 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x24>)
    186c:	4798      	blx	r3
    186e:	687b      	ldr	r3, [r7, #4]
    1870:	4618      	mov	r0, r3
    1872:	4b04      	ldr	r3, [pc, #16]	; (1884 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x28>)
    1874:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
    1876:	687b      	ldr	r3, [r7, #4]
    1878:	4618      	mov	r0, r3
    187a:	3708      	adds	r7, #8
    187c:	46bd      	mov	sp, r7
    187e:	bd80      	pop	{r7, pc}
    1880:	0000106d 	.word	0x0000106d
    1884:	00001a21 	.word	0x00001a21

00001888 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
    1888:	b590      	push	{r4, r7, lr}
    188a:	b083      	sub	sp, #12
    188c:	af00      	add	r7, sp, #0
    188e:	6078      	str	r0, [r7, #4]
    1890:	4c05      	ldr	r4, [pc, #20]	; (18a8 <__tcf_0+0x20>)
    1892:	4b06      	ldr	r3, [pc, #24]	; (18ac <__tcf_0+0x24>)
    1894:	429c      	cmp	r4, r3
    1896:	d004      	beq.n	18a2 <__tcf_0+0x1a>
    1898:	3c24      	subs	r4, #36	; 0x24
    189a:	4620      	mov	r0, r4
    189c:	4b04      	ldr	r3, [pc, #16]	; (18b0 <__tcf_0+0x28>)
    189e:	4798      	blx	r3
    18a0:	e7f7      	b.n	1892 <__tcf_0+0xa>
    18a2:	370c      	adds	r7, #12
    18a4:	46bd      	mov	sp, r7
    18a6:	bd90      	pop	{r4, r7, pc}
    18a8:	2000150c 	.word	0x2000150c
    18ac:	200014c4 	.word	0x200014c4
    18b0:	00001a21 	.word	0x00001a21

000018b4 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    18b4:	b590      	push	{r4, r7, lr}
    18b6:	b083      	sub	sp, #12
    18b8:	af00      	add	r7, sp, #0
    18ba:	6078      	str	r0, [r7, #4]
    18bc:	4c05      	ldr	r4, [pc, #20]	; (18d4 <__tcf_1+0x20>)
    18be:	4b06      	ldr	r3, [pc, #24]	; (18d8 <__tcf_1+0x24>)
    18c0:	429c      	cmp	r4, r3
    18c2:	d004      	beq.n	18ce <__tcf_1+0x1a>
    18c4:	3c20      	subs	r4, #32
    18c6:	4620      	mov	r0, r4
    18c8:	4b04      	ldr	r3, [pc, #16]	; (18dc <__tcf_1+0x28>)
    18ca:	4798      	blx	r3
    18cc:	e7f7      	b.n	18be <__tcf_1+0xa>
    18ce:	370c      	adds	r7, #12
    18d0:	46bd      	mov	sp, r7
    18d2:	bd90      	pop	{r4, r7, pc}
    18d4:	200015d0 	.word	0x200015d0
    18d8:	20001530 	.word	0x20001530
    18dc:	0001577d 	.word	0x0001577d

000018e0 <_Z41__static_initialization_and_destruction_0ii>:
		currentExpander=(expanders[i]);
		currentExpander->Init(i,i2c);
	}
}

EvaporatorAndCondesatorFans_Class  fans;
    18e0:	b5b0      	push	{r4, r5, r7, lr}
    18e2:	b082      	sub	sp, #8
    18e4:	af00      	add	r7, sp, #0
    18e6:	6078      	str	r0, [r7, #4]
    18e8:	6039      	str	r1, [r7, #0]
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	2b01      	cmp	r3, #1
    18ee:	d13d      	bne.n	196c <_Z41__static_initialization_and_destruction_0ii+0x8c>
    18f0:	683b      	ldr	r3, [r7, #0]
    18f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    18f6:	4293      	cmp	r3, r2
    18f8:	d138      	bne.n	196c <_Z41__static_initialization_and_destruction_0ii+0x8c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_SHARED);
    18fa:	491e      	ldr	r1, [pc, #120]	; (1974 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    18fc:	481e      	ldr	r0, [pc, #120]	; (1978 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    18fe:	4b1f      	ldr	r3, [pc, #124]	; (197c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    1900:	4798      	blx	r3
    1902:	4a1f      	ldr	r2, [pc, #124]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1904:	491f      	ldr	r1, [pc, #124]	; (1984 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    1906:	481c      	ldr	r0, [pc, #112]	; (1978 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    1908:	4b1f      	ldr	r3, [pc, #124]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    190a:	4798      	blx	r3
static EvaporatorFan_Class	evaporatorFan[2];
    190c:	4b1f      	ldr	r3, [pc, #124]	; (198c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    190e:	2401      	movs	r4, #1
    1910:	461d      	mov	r5, r3
    1912:	2c00      	cmp	r4, #0
    1914:	db05      	blt.n	1922 <_Z41__static_initialization_and_destruction_0ii+0x42>
    1916:	4628      	mov	r0, r5
    1918:	4b1d      	ldr	r3, [pc, #116]	; (1990 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    191a:	4798      	blx	r3
    191c:	3524      	adds	r5, #36	; 0x24
    191e:	3c01      	subs	r4, #1
    1920:	e7f7      	b.n	1912 <_Z41__static_initialization_and_destruction_0ii+0x32>
    1922:	4a17      	ldr	r2, [pc, #92]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1924:	491b      	ldr	r1, [pc, #108]	; (1994 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1926:	2000      	movs	r0, #0
    1928:	4b17      	ldr	r3, [pc, #92]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    192a:	4798      	blx	r3
static CondesatorFan_Class	condesatorFan;
    192c:	481a      	ldr	r0, [pc, #104]	; (1998 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    192e:	4b1b      	ldr	r3, [pc, #108]	; (199c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    1930:	4798      	blx	r3
    1932:	4a13      	ldr	r2, [pc, #76]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1934:	491a      	ldr	r1, [pc, #104]	; (19a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    1936:	4818      	ldr	r0, [pc, #96]	; (1998 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    1938:	4b13      	ldr	r3, [pc, #76]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    193a:	4798      	blx	r3
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    193c:	4b19      	ldr	r3, [pc, #100]	; (19a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    193e:	2404      	movs	r4, #4
    1940:	461d      	mov	r5, r3
    1942:	2c00      	cmp	r4, #0
    1944:	db05      	blt.n	1952 <_Z41__static_initialization_and_destruction_0ii+0x72>
    1946:	4628      	mov	r0, r5
    1948:	4b17      	ldr	r3, [pc, #92]	; (19a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    194a:	4798      	blx	r3
    194c:	3520      	adds	r5, #32
    194e:	3c01      	subs	r4, #1
    1950:	e7f7      	b.n	1942 <_Z41__static_initialization_and_destruction_0ii+0x62>
    1952:	4a0b      	ldr	r2, [pc, #44]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1954:	4915      	ldr	r1, [pc, #84]	; (19ac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    1956:	2000      	movs	r0, #0
    1958:	4b0b      	ldr	r3, [pc, #44]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    195a:	4798      	blx	r3
EvaporatorAndCondesatorFans_Class  fans;
    195c:	4814      	ldr	r0, [pc, #80]	; (19b0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    195e:	4b15      	ldr	r3, [pc, #84]	; (19b4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1960:	4798      	blx	r3
    1962:	4a07      	ldr	r2, [pc, #28]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1964:	4914      	ldr	r1, [pc, #80]	; (19b8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1966:	4812      	ldr	r0, [pc, #72]	; (19b0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1968:	4b07      	ldr	r3, [pc, #28]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    196a:	4798      	blx	r3
    196c:	bf00      	nop
    196e:	3708      	adds	r7, #8
    1970:	46bd      	mov	sp, r7
    1972:	bdb0      	pop	{r4, r5, r7, pc}
    1974:	2000a87c 	.word	0x2000a87c
    1978:	200014b0 	.word	0x200014b0
    197c:	000150b1 	.word	0x000150b1
    1980:	20000000 	.word	0x20000000
    1984:	000150cd 	.word	0x000150cd
    1988:	00019d41 	.word	0x00019d41
    198c:	200014c4 	.word	0x200014c4
    1990:	000019f9 	.word	0x000019f9
    1994:	00001889 	.word	0x00001889
    1998:	2000150c 	.word	0x2000150c
    199c:	00001059 	.word	0x00001059
    19a0:	0000106d 	.word	0x0000106d
    19a4:	20001530 	.word	0x20001530
    19a8:	00015769 	.word	0x00015769
    19ac:	000018b5 	.word	0x000018b5
    19b0:	200015d4 	.word	0x200015d4
    19b4:	00001811 	.word	0x00001811
    19b8:	0000185d 	.word	0x0000185d

000019bc <_GLOBAL__sub_I_ptrFansClass>:
    19bc:	b580      	push	{r7, lr}
    19be:	af00      	add	r7, sp, #0
    19c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    19c4:	2001      	movs	r0, #1
    19c6:	4b01      	ldr	r3, [pc, #4]	; (19cc <_GLOBAL__sub_I_ptrFansClass+0x10>)
    19c8:	4798      	blx	r3
    19ca:	bd80      	pop	{r7, pc}
    19cc:	000018e1 	.word	0x000018e1

000019d0 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:


#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
    19d0:	b480      	push	{r7}
    19d2:	b083      	sub	sp, #12
    19d4:	af00      	add	r7, sp, #0
    19d6:	6078      	str	r0, [r7, #4]
{
} //EvaporatorFanDataStruct_Class
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	4618      	mov	r0, r3
    19dc:	370c      	adds	r7, #12
    19de:	46bd      	mov	sp, r7
    19e0:	bc80      	pop	{r7}
    19e2:	4770      	bx	lr

000019e4 <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
    19e4:	b480      	push	{r7}
    19e6:	b083      	sub	sp, #12
    19e8:	af00      	add	r7, sp, #0
    19ea:	6078      	str	r0, [r7, #4]
{
} //~EvaporatorFanDataStruct_Class
    19ec:	687b      	ldr	r3, [r7, #4]
    19ee:	4618      	mov	r0, r3
    19f0:	370c      	adds	r7, #12
    19f2:	46bd      	mov	sp, r7
    19f4:	bc80      	pop	{r7}
    19f6:	4770      	bx	lr

000019f8 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
    19f8:	b580      	push	{r7, lr}
    19fa:	b082      	sub	sp, #8
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	4618      	mov	r0, r3
    1a04:	4b04      	ldr	r3, [pc, #16]	; (1a18 <_ZN19EvaporatorFan_ClassC1Ev+0x20>)
    1a06:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
    1a08:	4a04      	ldr	r2, [pc, #16]	; (1a1c <_ZN19EvaporatorFan_ClassC1Ev+0x24>)
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	6013      	str	r3, [r2, #0]
	
} //EvaporatorFan_Class
    1a0e:	687b      	ldr	r3, [r7, #4]
    1a10:	4618      	mov	r0, r3
    1a12:	3708      	adds	r7, #8
    1a14:	46bd      	mov	sp, r7
    1a16:	bd80      	pop	{r7, pc}
    1a18:	000019d1 	.word	0x000019d1
    1a1c:	20001648 	.word	0x20001648

00001a20 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
    1a20:	b580      	push	{r7, lr}
    1a22:	b082      	sub	sp, #8
    1a24:	af00      	add	r7, sp, #0
    1a26:	6078      	str	r0, [r7, #4]
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	4618      	mov	r0, r3
    1a2c:	4b03      	ldr	r3, [pc, #12]	; (1a3c <_ZN19EvaporatorFan_ClassD1Ev+0x1c>)
    1a2e:	4798      	blx	r3
{
} //~EvaporatorFan_Class
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	4618      	mov	r0, r3
    1a34:	3708      	adds	r7, #8
    1a36:	46bd      	mov	sp, r7
    1a38:	bd80      	pop	{r7, pc}
    1a3a:	bf00      	nop
    1a3c:	000019e5 	.word	0x000019e5

00001a40 <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
    1a40:	b480      	push	{r7}
    1a42:	b083      	sub	sp, #12
    1a44:	af00      	add	r7, sp, #0
    1a46:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
    1a48:	687b      	ldr	r3, [r7, #4]
    1a4a:	4618      	mov	r0, r3
    1a4c:	370c      	adds	r7, #12
    1a4e:	46bd      	mov	sp, r7
    1a50:	bc80      	pop	{r7}
    1a52:	4770      	bx	lr

00001a54 <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
    1a54:	b480      	push	{r7}
    1a56:	b083      	sub	sp, #12
    1a58:	af00      	add	r7, sp, #0
    1a5a:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
    1a5c:	687b      	ldr	r3, [r7, #4]
    1a5e:	4618      	mov	r0, r3
    1a60:	370c      	adds	r7, #12
    1a62:	46bd      	mov	sp, r7
    1a64:	bc80      	pop	{r7}
    1a66:	4770      	bx	lr

00001a68 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv>:


uint32_t	FastStorage_Class::ReadFastCRCApplicationState(void){
    1a68:	b590      	push	{r4, r7, lr}
    1a6a:	b087      	sub	sp, #28
    1a6c:	af00      	add	r7, sp, #0
    1a6e:	6078      	str	r0, [r7, #4]
	uint32_t	crc,add32;
	add32=(uint32_t)&eepromMap->crcAppState;
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x34>)
    1a72:	681b      	ldr	r3, [r3, #0]
    1a74:	3304      	adds	r3, #4
    1a76:	617b      	str	r3, [r7, #20]
	eepromAddress=(uint16_t)(0xffff&add32);
    1a78:	697b      	ldr	r3, [r7, #20]
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	819a      	strh	r2, [r3, #12]
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(&crc),eepromAddress,sizeof(uint32_t));
    1a80:	687b      	ldr	r3, [r7, #4]
    1a82:	899a      	ldrh	r2, [r3, #12]
    1a84:	f107 010c 	add.w	r1, r7, #12
    1a88:	2304      	movs	r3, #4
    1a8a:	4805      	ldr	r0, [pc, #20]	; (1aa0 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x38>)
    1a8c:	4c05      	ldr	r4, [pc, #20]	; (1aa4 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x3c>)
    1a8e:	47a0      	blx	r4
    1a90:	6138      	str	r0, [r7, #16]
	return	crc;
    1a92:	68fb      	ldr	r3, [r7, #12]
}
    1a94:	4618      	mov	r0, r3
    1a96:	371c      	adds	r7, #28
    1a98:	46bd      	mov	sp, r7
    1a9a:	bd90      	pop	{r4, r7, pc}
    1a9c:	2000164c 	.word	0x2000164c
    1aa0:	20009e64 	.word	0x20009e64
    1aa4:	00016471 	.word	0x00016471

00001aa8 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState>:
uint32_t	FastStorage_Class::ReadFastApplicationState(HVACState& hs){
    1aa8:	b590      	push	{r4, r7, lr}
    1aaa:	b085      	sub	sp, #20
    1aac:	af00      	add	r7, sp, #0
    1aae:	6078      	str	r0, [r7, #4]
    1ab0:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->appState;
    1ab2:	4b0c      	ldr	r3, [pc, #48]	; (1ae4 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x3c>)
    1ab4:	681b      	ldr	r3, [r3, #0]
    1ab6:	3308      	adds	r3, #8
    1ab8:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    1aba:	68fb      	ldr	r3, [r7, #12]
    1abc:	b29a      	uxth	r2, r3
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	819a      	strh	r2, [r3, #12]
	handlerAppState=PTR_HVAC_STATE(&hs);
    1ac2:	683a      	ldr	r2, [r7, #0]
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	601a      	str	r2, [r3, #0]
	r=eeprom.ReadAddress((uint8_t*)handlerAppState,eepromAddress,sizeof(HVACState));
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	6819      	ldr	r1, [r3, #0]
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	899a      	ldrh	r2, [r3, #12]
    1ad0:	2368      	movs	r3, #104	; 0x68
    1ad2:	4805      	ldr	r0, [pc, #20]	; (1ae8 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x40>)
    1ad4:	4c05      	ldr	r4, [pc, #20]	; (1aec <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x44>)
    1ad6:	47a0      	blx	r4
    1ad8:	60b8      	str	r0, [r7, #8]
	return	r;
    1ada:	68bb      	ldr	r3, [r7, #8]
}
    1adc:	4618      	mov	r0, r3
    1ade:	3714      	adds	r7, #20
    1ae0:	46bd      	mov	sp, r7
    1ae2:	bd90      	pop	{r4, r7, pc}
    1ae4:	2000164c 	.word	0x2000164c
    1ae8:	20009e64 	.word	0x20009e64
    1aec:	00016471 	.word	0x00016471

00001af0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState>:
	eepromAddress=(uint16_t)(0xffff&add32);
	handlerCalendar=(PTR_DATE_TIME)(&cdt);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(handlerCalendar),(uint8_t)eepromAddress,sizeof(calendar_date_time)*AT24MAC_BUFFER_SIZE);
	return	r;
}
uint32_t	FastStorage_Class::WriteFastCurrentState(HVACState& hs){
    1af0:	b580      	push	{r7, lr}
    1af2:	b084      	sub	sp, #16
    1af4:	af00      	add	r7, sp, #0
    1af6:	6078      	str	r0, [r7, #4]
    1af8:	6039      	str	r1, [r7, #0]
	uint32_t	add32=(uint32_t)&eepromMap->appState;
    1afa:	4b12      	ldr	r3, [pc, #72]	; (1b44 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x54>)
    1afc:	681b      	ldr	r3, [r3, #0]
    1afe:	3308      	adds	r3, #8
    1b00:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    1b02:	68fb      	ldr	r3, [r7, #12]
    1b04:	b29a      	uxth	r2, r3
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	819a      	strh	r2, [r3, #12]
	uint32_t	w=WriteFastAppState(hs,eepromAddress);
    1b0a:	687b      	ldr	r3, [r7, #4]
    1b0c:	899b      	ldrh	r3, [r3, #12]
    1b0e:	461a      	mov	r2, r3
    1b10:	6839      	ldr	r1, [r7, #0]
    1b12:	6878      	ldr	r0, [r7, #4]
    1b14:	4b0c      	ldr	r3, [pc, #48]	; (1b48 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x58>)
    1b16:	4798      	blx	r3
    1b18:	60b8      	str	r0, [r7, #8]
	crc32=		memory.CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    1b1a:	2268      	movs	r2, #104	; 0x68
    1b1c:	6839      	ldr	r1, [r7, #0]
    1b1e:	480b      	ldr	r0, [pc, #44]	; (1b4c <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x5c>)
    1b20:	4b0b      	ldr	r3, [pc, #44]	; (1b50 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x60>)
    1b22:	4798      	blx	r3
    1b24:	4602      	mov	r2, r0
    1b26:	687b      	ldr	r3, [r7, #4]
    1b28:	609a      	str	r2, [r3, #8]
	w=WriteFastCRCAppState(crc32);
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	689b      	ldr	r3, [r3, #8]
    1b2e:	4619      	mov	r1, r3
    1b30:	6878      	ldr	r0, [r7, #4]
    1b32:	4b08      	ldr	r3, [pc, #32]	; (1b54 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x64>)
    1b34:	4798      	blx	r3
    1b36:	60b8      	str	r0, [r7, #8]
	return	w;
    1b38:	68bb      	ldr	r3, [r7, #8]
}
    1b3a:	4618      	mov	r0, r3
    1b3c:	3710      	adds	r7, #16
    1b3e:	46bd      	mov	sp, r7
    1b40:	bd80      	pop	{r7, pc}
    1b42:	bf00      	nop
    1b44:	2000164c 	.word	0x2000164c
    1b48:	00001b59 	.word	0x00001b59
    1b4c:	20002bf4 	.word	0x20002bf4
    1b50:	00001551 	.word	0x00001551
    1b54:	00001b91 	.word	0x00001b91

00001b58 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem>:
uint32_t	FastStorage_Class::WriteFastAppState(HVACState& hs,uint32_t add){
    1b58:	b590      	push	{r4, r7, lr}
    1b5a:	b087      	sub	sp, #28
    1b5c:	af00      	add	r7, sp, #0
    1b5e:	60f8      	str	r0, [r7, #12]
    1b60:	60b9      	str	r1, [r7, #8]
    1b62:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    1b64:	68ba      	ldr	r2, [r7, #8]
    1b66:	68fb      	ldr	r3, [r7, #12]
    1b68:	601a      	str	r2, [r3, #0]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)handlerAppState,(uint16_t)add,sizeof(HVACState));
    1b6a:	68fb      	ldr	r3, [r7, #12]
    1b6c:	6819      	ldr	r1, [r3, #0]
    1b6e:	687b      	ldr	r3, [r7, #4]
    1b70:	b29a      	uxth	r2, r3
    1b72:	2368      	movs	r3, #104	; 0x68
    1b74:	4804      	ldr	r0, [pc, #16]	; (1b88 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x30>)
    1b76:	4c05      	ldr	r4, [pc, #20]	; (1b8c <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x34>)
    1b78:	47a0      	blx	r4
    1b7a:	6178      	str	r0, [r7, #20]
	return	w;
    1b7c:	697b      	ldr	r3, [r7, #20]
}
    1b7e:	4618      	mov	r0, r3
    1b80:	371c      	adds	r7, #28
    1b82:	46bd      	mov	sp, r7
    1b84:	bd90      	pop	{r4, r7, pc}
    1b86:	bf00      	nop
    1b88:	20009e64 	.word	0x20009e64
    1b8c:	000163b5 	.word	0x000163b5

00001b90 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm>:
uint32_t	FastStorage_Class::WriteFastCRCAppState(uint32_t crc){
    1b90:	b590      	push	{r4, r7, lr}
    1b92:	b085      	sub	sp, #20
    1b94:	af00      	add	r7, sp, #0
    1b96:	6078      	str	r0, [r7, #4]
    1b98:	6039      	str	r1, [r7, #0]
	uint16_t	add=(uint32_t)&eepromMap->crcAppState;
    1b9a:	4b08      	ldr	r3, [pc, #32]	; (1bbc <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x2c>)
    1b9c:	681b      	ldr	r3, [r3, #0]
    1b9e:	3304      	adds	r3, #4
    1ba0:	81fb      	strh	r3, [r7, #14]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&crc),(uint16_t)add,sizeof(uint32_t));
    1ba2:	89fa      	ldrh	r2, [r7, #14]
    1ba4:	4639      	mov	r1, r7
    1ba6:	2304      	movs	r3, #4
    1ba8:	4805      	ldr	r0, [pc, #20]	; (1bc0 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x30>)
    1baa:	4c06      	ldr	r4, [pc, #24]	; (1bc4 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x34>)
    1bac:	47a0      	blx	r4
    1bae:	60b8      	str	r0, [r7, #8]
	return	w;
    1bb0:	68bb      	ldr	r3, [r7, #8]
}
    1bb2:	4618      	mov	r0, r3
    1bb4:	3714      	adds	r7, #20
    1bb6:	46bd      	mov	sp, r7
    1bb8:	bd90      	pop	{r4, r7, pc}
    1bba:	bf00      	nop
    1bbc:	2000164c 	.word	0x2000164c
    1bc0:	20009e64 	.word	0x20009e64
    1bc4:	000163b5 	.word	0x000163b5

00001bc8 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv>:
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
	uint8_t		add8=(uint8_t)(0xff&&add32);
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
	return	w;
}
uint32_t	FastStorage_Class::WriteFastDefaultParameters(void){
    1bc8:	b590      	push	{r4, r7, lr}
    1bca:	b087      	sub	sp, #28
    1bcc:	af00      	add	r7, sp, #0
    1bce:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    1bd0:	4b0d      	ldr	r3, [pc, #52]	; (1c08 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x40>)
    1bd2:	781b      	ldrb	r3, [r3, #0]
    1bd4:	723b      	strb	r3, [r7, #8]
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
    1bd6:	4b0d      	ldr	r3, [pc, #52]	; (1c0c <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x44>)
    1bd8:	681b      	ldr	r3, [r3, #0]
    1bda:	3301      	adds	r3, #1
    1bdc:	617b      	str	r3, [r7, #20]
	uint8_t		add8=(uint8_t)(0xff&&add32);
    1bde:	697b      	ldr	r3, [r7, #20]
    1be0:	2b00      	cmp	r3, #0
    1be2:	bf14      	ite	ne
    1be4:	2301      	movne	r3, #1
    1be6:	2300      	moveq	r3, #0
    1be8:	b2db      	uxtb	r3, r3
    1bea:	74fb      	strb	r3, [r7, #19]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
    1bec:	7cfa      	ldrb	r2, [r7, #19]
    1bee:	f107 0108 	add.w	r1, r7, #8
    1bf2:	2301      	movs	r3, #1
    1bf4:	4806      	ldr	r0, [pc, #24]	; (1c10 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x48>)
    1bf6:	4c07      	ldr	r4, [pc, #28]	; (1c14 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x4c>)
    1bf8:	47a0      	blx	r4
    1bfa:	60f8      	str	r0, [r7, #12]
	return	w;
    1bfc:	68fb      	ldr	r3, [r7, #12]
    1bfe:	4618      	mov	r0, r3
    1c00:	371c      	adds	r7, #28
    1c02:	46bd      	mov	sp, r7
    1c04:	bd90      	pop	{r4, r7, pc}
    1c06:	bf00      	nop
    1c08:	00021ff0 	.word	0x00021ff0
    1c0c:	2000164c 	.word	0x2000164c
    1c10:	20009e64 	.word	0x20009e64
    1c14:	00016255 	.word	0x00016255

00001c18 <_ZN19HVAC_Commando_ClassC2Ev>:

#include "HVAC_Commando_Class.h"
#include "ARINC_Interface.h"

// default constructor
HVAC_Commando_Class::HVAC_Commando_Class()
    1c18:	b480      	push	{r7}
    1c1a:	b083      	sub	sp, #12
    1c1c:	af00      	add	r7, sp, #0
    1c1e:	6078      	str	r0, [r7, #4]
    1c20:	6039      	str	r1, [r7, #0]
    1c22:	683b      	ldr	r3, [r7, #0]
    1c24:	681a      	ldr	r2, [r3, #0]
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	601a      	str	r2, [r3, #0]
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	3b0c      	subs	r3, #12
    1c30:	681b      	ldr	r3, [r3, #0]
    1c32:	461a      	mov	r2, r3
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	4413      	add	r3, r2
    1c38:	683a      	ldr	r2, [r7, #0]
    1c3a:	6852      	ldr	r2, [r2, #4]
    1c3c:	601a      	str	r2, [r3, #0]
{
} //HVAC_Commando_Class
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	4618      	mov	r0, r3
    1c42:	370c      	adds	r7, #12
    1c44:	46bd      	mov	sp, r7
    1c46:	bc80      	pop	{r7}
    1c48:	4770      	bx	lr

00001c4a <_ZN19HVAC_Commando_ClassD2Ev>:

// default destructor
HVAC_Commando_Class::~HVAC_Commando_Class()
    1c4a:	b480      	push	{r7}
    1c4c:	b083      	sub	sp, #12
    1c4e:	af00      	add	r7, sp, #0
    1c50:	6078      	str	r0, [r7, #4]
    1c52:	6039      	str	r1, [r7, #0]
    1c54:	683b      	ldr	r3, [r7, #0]
    1c56:	681a      	ldr	r2, [r3, #0]
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	601a      	str	r2, [r3, #0]
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	3b0c      	subs	r3, #12
    1c62:	681b      	ldr	r3, [r3, #0]
    1c64:	461a      	mov	r2, r3
    1c66:	687b      	ldr	r3, [r7, #4]
    1c68:	4413      	add	r3, r2
    1c6a:	683a      	ldr	r2, [r7, #0]
    1c6c:	6852      	ldr	r2, [r2, #4]
    1c6e:	601a      	str	r2, [r3, #0]
{
} //~HVAC_Commando_Class
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	4618      	mov	r0, r3
    1c74:	370c      	adds	r7, #12
    1c76:	46bd      	mov	sp, r7
    1c78:	bc80      	pop	{r7}
    1c7a:	4770      	bx	lr

00001c7c <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv>:

bool HVAC_Commando_Class::IsCommando270Changed(void){
    1c7c:	b590      	push	{r4, r7, lr}
    1c7e:	b083      	sub	sp, #12
    1c80:	af00      	add	r7, sp, #0
    1c82:	6078      	str	r0, [r7, #4]
	
	if (lastCommando==UpdateCommando())
    1c84:	687b      	ldr	r3, [r7, #4]
    1c86:	68dc      	ldr	r4, [r3, #12]
    1c88:	6878      	ldr	r0, [r7, #4]
    1c8a:	4b08      	ldr	r3, [pc, #32]	; (1cac <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x30>)
    1c8c:	4798      	blx	r3
    1c8e:	4603      	mov	r3, r0
    1c90:	429c      	cmp	r4, r3
    1c92:	bf0c      	ite	eq
    1c94:	2301      	moveq	r3, #1
    1c96:	2300      	movne	r3, #0
    1c98:	b2db      	uxtb	r3, r3
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d001      	beq.n	1ca2 <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x26>
	{
		return false;
    1c9e:	2300      	movs	r3, #0
    1ca0:	e000      	b.n	1ca4 <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x28>
	} 
	else
	{
		return true;
    1ca2:	2301      	movs	r3, #1
	
	}
	return true;
}
    1ca4:	4618      	mov	r0, r3
    1ca6:	370c      	adds	r7, #12
    1ca8:	46bd      	mov	sp, r7
    1caa:	bd90      	pop	{r4, r7, pc}
    1cac:	00001cb1 	.word	0x00001cb1

00001cb0 <_ZN19HVAC_Commando_Class14UpdateCommandoEv>:

uint32_t HVAC_Commando_Class::UpdateCommando(void){
    1cb0:	b580      	push	{r7, lr}
    1cb2:	b084      	sub	sp, #16
    1cb4:	af00      	add	r7, sp, #0
    1cb6:	6078      	str	r0, [r7, #4]
	lastCommando=actualCommando;
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	689a      	ldr	r2, [r3, #8]
    1cbc:	687b      	ldr	r3, [r7, #4]
    1cbe:	60da      	str	r2, [r3, #12]
	uint32_t value=arinc.ReadBufferLabel((uint32_t)270);
    1cc0:	f44f 7187 	mov.w	r1, #270	; 0x10e
    1cc4:	4810      	ldr	r0, [pc, #64]	; (1d08 <_ZN19HVAC_Commando_Class14UpdateCommandoEv+0x58>)
    1cc6:	4b11      	ldr	r3, [pc, #68]	; (1d0c <_ZN19HVAC_Commando_Class14UpdateCommandoEv+0x5c>)
    1cc8:	4798      	blx	r3
    1cca:	60f8      	str	r0, [r7, #12]
	commando270.AC_CMD=(bool)((value>>12)&0x01);
    1ccc:	68fb      	ldr	r3, [r7, #12]
    1cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	bf14      	ite	ne
    1cd6:	2301      	movne	r3, #1
    1cd8:	2300      	moveq	r3, #0
    1cda:	b2d9      	uxtb	r1, r3
    1cdc:	687a      	ldr	r2, [r7, #4]
    1cde:	7953      	ldrb	r3, [r2, #5]
    1ce0:	f361 0300 	bfi	r3, r1, #0, #1
    1ce4:	7153      	strb	r3, [r2, #5]
	commando270.statusArinc=(StatusHVACARINC)((value>>10)&0x03);
    1ce6:	68fb      	ldr	r3, [r7, #12]
    1ce8:	0a9b      	lsrs	r3, r3, #10
    1cea:	b2db      	uxtb	r3, r3
    1cec:	f003 0303 	and.w	r3, r3, #3
    1cf0:	b2da      	uxtb	r2, r3
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	711a      	strb	r2, [r3, #4]
	actualCommando=value;
    1cf6:	687b      	ldr	r3, [r7, #4]
    1cf8:	68fa      	ldr	r2, [r7, #12]
    1cfa:	609a      	str	r2, [r3, #8]
	return actualCommando;
    1cfc:	687b      	ldr	r3, [r7, #4]
    1cfe:	689b      	ldr	r3, [r3, #8]
}
    1d00:	4618      	mov	r0, r3
    1d02:	3710      	adds	r7, #16
    1d04:	46bd      	mov	sp, r7
    1d06:	bd80      	pop	{r7, pc}
    1d08:	20008ec8 	.word	0x20008ec8
    1d0c:	000139d1 	.word	0x000139d1

00001d10 <_ZN19HVAC_Commando_Class27UpadateFlapperValveSetpointEv>:
uint32_t HVAC_Commando_Class::GetCommando270(void){
	return actualCommando;
}
uint8_t HVAC_Commando_Class::UpadateFlapperValveSetpoint(void){
    1d10:	b580      	push	{r7, lr}
    1d12:	b084      	sub	sp, #16
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
	lastflapperValveSetpoint=flapperValveSetpoint;
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	7c1a      	ldrb	r2, [r3, #16]
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	745a      	strb	r2, [r3, #17]
	uint32_t value=arinc.ReadBufferLabel((uint32_t)275);
    1d20:	f240 1113 	movw	r1, #275	; 0x113
    1d24:	4807      	ldr	r0, [pc, #28]	; (1d44 <_ZN19HVAC_Commando_Class27UpadateFlapperValveSetpointEv+0x34>)
    1d26:	4b08      	ldr	r3, [pc, #32]	; (1d48 <_ZN19HVAC_Commando_Class27UpadateFlapperValveSetpointEv+0x38>)
    1d28:	4798      	blx	r3
    1d2a:	60f8      	str	r0, [r7, #12]
	uint8_t position=(uint8_t)((value>>10)&0xff);
    1d2c:	68fb      	ldr	r3, [r7, #12]
    1d2e:	0a9b      	lsrs	r3, r3, #10
    1d30:	72fb      	strb	r3, [r7, #11]
	flapperValveSetpoint=position;
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	7afa      	ldrb	r2, [r7, #11]
    1d36:	741a      	strb	r2, [r3, #16]
	return flapperValveSetpoint;
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	7c1b      	ldrb	r3, [r3, #16]
}
    1d3c:	4618      	mov	r0, r3
    1d3e:	3710      	adds	r7, #16
    1d40:	46bd      	mov	sp, r7
    1d42:	bd80      	pop	{r7, pc}
    1d44:	20008ec8 	.word	0x20008ec8
    1d48:	000139d1 	.word	0x000139d1

00001d4c <_ZN19HVAC_Commando_Class23GetFlapperValveSetpointEv>:
uint8_t HVAC_Commando_Class::GetFlapperValveSetpoint(void){
    1d4c:	b480      	push	{r7}
    1d4e:	b083      	sub	sp, #12
    1d50:	af00      	add	r7, sp, #0
    1d52:	6078      	str	r0, [r7, #4]
	return flapperValveSetpoint;
    1d54:	687b      	ldr	r3, [r7, #4]
    1d56:	7c1b      	ldrb	r3, [r3, #16]
}
    1d58:	4618      	mov	r0, r3
    1d5a:	370c      	adds	r7, #12
    1d5c:	46bd      	mov	sp, r7
    1d5e:	bc80      	pop	{r7}
    1d60:	4770      	bx	lr
	...

00001d64 <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv>:

bool HVAC_Commando_Class::IsNewFlapperValveSetpoint(void){
    1d64:	b590      	push	{r4, r7, lr}
    1d66:	b083      	sub	sp, #12
    1d68:	af00      	add	r7, sp, #0
    1d6a:	6078      	str	r0, [r7, #4]
		if (lastflapperValveSetpoint==UpadateFlapperValveSetpoint())
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	7c5c      	ldrb	r4, [r3, #17]
    1d70:	6878      	ldr	r0, [r7, #4]
    1d72:	4b08      	ldr	r3, [pc, #32]	; (1d94 <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv+0x30>)
    1d74:	4798      	blx	r3
    1d76:	4603      	mov	r3, r0
    1d78:	429c      	cmp	r4, r3
    1d7a:	bf0c      	ite	eq
    1d7c:	2301      	moveq	r3, #1
    1d7e:	2300      	movne	r3, #0
    1d80:	b2db      	uxtb	r3, r3
    1d82:	2b00      	cmp	r3, #0
    1d84:	d001      	beq.n	1d8a <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv+0x26>
		{
			return false;
    1d86:	2300      	movs	r3, #0
    1d88:	e000      	b.n	1d8c <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv+0x28>
		}
		else
		{
			return true;
    1d8a:	2301      	movs	r3, #1
			
		}
		return true;
    1d8c:	4618      	mov	r0, r3
    1d8e:	370c      	adds	r7, #12
    1d90:	46bd      	mov	sp, r7
    1d92:	bd90      	pop	{r4, r7, pc}
    1d94:	00001d11 	.word	0x00001d11

00001d98 <_ZN16Interfaces_ClassC1Ev>:
#include "Maintenance_Tool.h"
#include "FlapperValve_Class.h"


// default constructor
Interfaces_Class::Interfaces_Class()
    1d98:	b480      	push	{r7}
    1d9a:	b083      	sub	sp, #12
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	6078      	str	r0, [r7, #4]
{
	
} //Interfaces_Class
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	4618      	mov	r0, r3
    1da4:	370c      	adds	r7, #12
    1da6:	46bd      	mov	sp, r7
    1da8:	bc80      	pop	{r7}
    1daa:	4770      	bx	lr

00001dac <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    1dac:	b480      	push	{r7}
    1dae:	b083      	sub	sp, #12
    1db0:	af00      	add	r7, sp, #0
    1db2:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	4618      	mov	r0, r3
    1db8:	370c      	adds	r7, #12
    1dba:	46bd      	mov	sp, r7
    1dbc:	bc80      	pop	{r7}
    1dbe:	4770      	bx	lr

00001dc0 <_ZN16Interfaces_Class4InitEv>:

CommunicationRequest	Interfaces_Class::request;

bool	Interfaces_Class::Init(){
    1dc0:	b580      	push	{r7, lr}
    1dc2:	b084      	sub	sp, #16
    1dc4:	af00      	add	r7, sp, #0
    1dc6:	6078      	str	r0, [r7, #4]
	size=sizeof(CommunicationRequest);
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	2205      	movs	r2, #5
    1dcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	result=arinc.Init();
    1dd0:	4815      	ldr	r0, [pc, #84]	; (1e28 <_ZN16Interfaces_Class4InitEv+0x68>)
    1dd2:	4b16      	ldr	r3, [pc, #88]	; (1e2c <_ZN16Interfaces_Class4InitEv+0x6c>)
    1dd4:	4798      	blx	r3
    1dd6:	4603      	mov	r3, r0
    1dd8:	461a      	mov	r2, r3
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	675a      	str	r2, [r3, #116]	; 0x74
	if (result==0x01)
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    1de2:	2b01      	cmp	r3, #1
    1de4:	d106      	bne.n	1df4 <_ZN16Interfaces_Class4InitEv+0x34>
	{
		arinc.TrasmitSingleLabel();
    1de6:	4810      	ldr	r0, [pc, #64]	; (1e28 <_ZN16Interfaces_Class4InitEv+0x68>)
    1de8:	4b11      	ldr	r3, [pc, #68]	; (1e30 <_ZN16Interfaces_Class4InitEv+0x70>)
    1dea:	4798      	blx	r3
		if (maintenance.IsAppConnected())
    1dec:	4811      	ldr	r0, [pc, #68]	; (1e34 <_ZN16Interfaces_Class4InitEv+0x74>)
    1dee:	4b12      	ldr	r3, [pc, #72]	; (1e38 <_ZN16Interfaces_Class4InitEv+0x78>)
    1df0:	4798      	blx	r3
    1df2:	e00e      	b.n	1e12 <_ZN16Interfaces_Class4InitEv+0x52>
		{
		}
	} 
	else
	{
		alu.NotifyError(kARINCINnterfaceError,result);
    1df4:	687b      	ldr	r3, [r7, #4]
    1df6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    1df8:	f107 030c 	add.w	r3, r7, #12
    1dfc:	4611      	mov	r1, r2
    1dfe:	4618      	mov	r0, r3
    1e00:	4b0e      	ldr	r3, [pc, #56]	; (1e3c <_ZN16Interfaces_Class4InitEv+0x7c>)
    1e02:	4798      	blx	r3
    1e04:	f107 030c 	add.w	r3, r7, #12
    1e08:	461a      	mov	r2, r3
    1e0a:	2100      	movs	r1, #0
    1e0c:	480c      	ldr	r0, [pc, #48]	; (1e40 <_ZN16Interfaces_Class4InitEv+0x80>)
    1e0e:	4b0d      	ldr	r3, [pc, #52]	; (1e44 <_ZN16Interfaces_Class4InitEv+0x84>)
    1e10:	4798      	blx	r3
	}
	return result;
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    1e16:	2b00      	cmp	r3, #0
    1e18:	bf14      	ite	ne
    1e1a:	2301      	movne	r3, #1
    1e1c:	2300      	moveq	r3, #0
    1e1e:	b2db      	uxtb	r3, r3
}
    1e20:	4618      	mov	r0, r3
    1e22:	3710      	adds	r7, #16
    1e24:	46bd      	mov	sp, r7
    1e26:	bd80      	pop	{r7, pc}
    1e28:	20008ec8 	.word	0x20008ec8
    1e2c:	0001365d 	.word	0x0001365d
    1e30:	00013a21 	.word	0x00013a21
    1e34:	2000a590 	.word	0x2000a590
    1e38:	00019bed 	.word	0x00019bed
    1e3c:	000003a9 	.word	0x000003a9
    1e40:	20000c80 	.word	0x20000c80
    1e44:	000009e1 	.word	0x000009e1

00001e48 <_ZN16Interfaces_Class18CheckCommunicationEv>:

CommunicationRequest Interfaces_Class::CheckCommunication(void)
{
    1e48:	b580      	push	{r7, lr}
    1e4a:	b086      	sub	sp, #24
    1e4c:	af00      	add	r7, sp, #0
    1e4e:	6078      	str	r0, [r7, #4]
    1e50:	6039      	str	r1, [r7, #0]
	event e;
    1e52:	f107 0308 	add.w	r3, r7, #8
    1e56:	4618      	mov	r0, r3
    1e58:	4b09      	ldr	r3, [pc, #36]	; (1e80 <_ZN16Interfaces_Class18CheckCommunicationEv+0x38>)
    1e5a:	4798      	blx	r3
	CommunicationRequest	r;
	CheckInternalCommunication();
    1e5c:	6838      	ldr	r0, [r7, #0]
    1e5e:	4b09      	ldr	r3, [pc, #36]	; (1e84 <_ZN16Interfaces_Class18CheckCommunicationEv+0x3c>)
    1e60:	4798      	blx	r3
	CheckExternalCommunication();
    1e62:	6838      	ldr	r0, [r7, #0]
    1e64:	4b08      	ldr	r3, [pc, #32]	; (1e88 <_ZN16Interfaces_Class18CheckCommunicationEv+0x40>)
    1e66:	4798      	blx	r3
	r=request;
    1e68:	687b      	ldr	r3, [r7, #4]
    1e6a:	4a08      	ldr	r2, [pc, #32]	; (1e8c <_ZN16Interfaces_Class18CheckCommunicationEv+0x44>)
    1e6c:	6810      	ldr	r0, [r2, #0]
    1e6e:	6018      	str	r0, [r3, #0]
    1e70:	7912      	ldrb	r2, [r2, #4]
    1e72:	711a      	strb	r2, [r3, #4]
	
	return	r;
    1e74:	bf00      	nop
}
    1e76:	6878      	ldr	r0, [r7, #4]
    1e78:	3718      	adds	r7, #24
    1e7a:	46bd      	mov	sp, r7
    1e7c:	bd80      	pop	{r7, pc}
    1e7e:	bf00      	nop
    1e80:	000003c5 	.word	0x000003c5
    1e84:	00001f09 	.word	0x00001f09
    1e88:	00001f49 	.word	0x00001f49
    1e8c:	20001668 	.word	0x20001668

00001e90 <_ZN16Interfaces_Class22IsCommunicationRequestEv>:

bool	Interfaces_Class::IsCommunicationRequest(void){
    1e90:	b580      	push	{r7, lr}
    1e92:	b086      	sub	sp, #24
    1e94:	af00      	add	r7, sp, #0
    1e96:	6078      	str	r0, [r7, #4]
	bool arr[sizeof(CommunicationRequest)];
	CommunicationRequest r=CheckCommunication();
    1e98:	f107 0308 	add.w	r3, r7, #8
    1e9c:	6879      	ldr	r1, [r7, #4]
    1e9e:	4618      	mov	r0, r3
    1ea0:	4b17      	ldr	r3, [pc, #92]	; (1f00 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x70>)
    1ea2:	4798      	blx	r3
	uint8_t result=0;
    1ea4:	2300      	movs	r3, #0
    1ea6:	75fb      	strb	r3, [r7, #23]
	memcpy((void*)arr,(void*)&r,size);
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    1eae:	461a      	mov	r2, r3
    1eb0:	f107 0108 	add.w	r1, r7, #8
    1eb4:	f107 0310 	add.w	r3, r7, #16
    1eb8:	4618      	mov	r0, r3
    1eba:	4b12      	ldr	r3, [pc, #72]	; (1f04 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x74>)
    1ebc:	4798      	blx	r3
	for (uint8_t ii = 0; ii < size; ii++)
    1ebe:	2300      	movs	r3, #0
    1ec0:	75bb      	strb	r3, [r7, #22]
    1ec2:	7dbb      	ldrb	r3, [r7, #22]
    1ec4:	687a      	ldr	r2, [r7, #4]
    1ec6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    1eca:	4293      	cmp	r3, r2
    1ecc:	da0d      	bge.n	1eea <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x5a>
	{
		result|=arr[ii];
    1ece:	7dbb      	ldrb	r3, [r7, #22]
    1ed0:	f107 0218 	add.w	r2, r7, #24
    1ed4:	4413      	add	r3, r2
    1ed6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    1eda:	461a      	mov	r2, r3
    1edc:	7dfb      	ldrb	r3, [r7, #23]
    1ede:	4313      	orrs	r3, r2
    1ee0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t ii = 0; ii < size; ii++)
    1ee2:	7dbb      	ldrb	r3, [r7, #22]
    1ee4:	3301      	adds	r3, #1
    1ee6:	75bb      	strb	r3, [r7, #22]
    1ee8:	e7eb      	b.n	1ec2 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x32>
	}
	return	result>0;
    1eea:	7dfb      	ldrb	r3, [r7, #23]
    1eec:	2b00      	cmp	r3, #0
    1eee:	bfcc      	ite	gt
    1ef0:	2301      	movgt	r3, #1
    1ef2:	2300      	movle	r3, #0
    1ef4:	b2db      	uxtb	r3, r3
}
    1ef6:	4618      	mov	r0, r3
    1ef8:	3718      	adds	r7, #24
    1efa:	46bd      	mov	sp, r7
    1efc:	bd80      	pop	{r7, pc}
    1efe:	bf00      	nop
    1f00:	00001e49 	.word	0x00001e49
    1f04:	0001c4a5 	.word	0x0001c4a5

00001f08 <_ZN16Interfaces_Class26CheckInternalCommunicationEv>:

uint32_t Interfaces_Class::CheckInternalCommunication(void)
{
    1f08:	b580      	push	{r7, lr}
    1f0a:	b084      	sub	sp, #16
    1f0c:	af00      	add	r7, sp, #0
    1f0e:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1f10:	2300      	movs	r3, #0
    1f12:	60fb      	str	r3, [r7, #12]
	request.internRequest.flapperValvesMessage=CheckFlapperValveInterface(1);
    1f14:	2101      	movs	r1, #1
    1f16:	6878      	ldr	r0, [r7, #4]
    1f18:	4b08      	ldr	r3, [pc, #32]	; (1f3c <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x34>)
    1f1a:	4798      	blx	r3
    1f1c:	4603      	mov	r3, r0
    1f1e:	461a      	mov	r2, r3
    1f20:	4b07      	ldr	r3, [pc, #28]	; (1f40 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1f22:	705a      	strb	r2, [r3, #1]
	request.internRequest.temperatureSensorsMessage=CheckTemperatures();
    1f24:	6878      	ldr	r0, [r7, #4]
    1f26:	4b07      	ldr	r3, [pc, #28]	; (1f44 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x3c>)
    1f28:	4798      	blx	r3
    1f2a:	4603      	mov	r3, r0
    1f2c:	461a      	mov	r2, r3
    1f2e:	4b04      	ldr	r3, [pc, #16]	; (1f40 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1f30:	701a      	strb	r2, [r3, #0]
	return	0;
    1f32:	2300      	movs	r3, #0
}
    1f34:	4618      	mov	r0, r3
    1f36:	3710      	adds	r7, #16
    1f38:	46bd      	mov	sp, r7
    1f3a:	bd80      	pop	{r7, pc}
    1f3c:	00001fbd 	.word	0x00001fbd
    1f40:	20001668 	.word	0x20001668
    1f44:	0000208d 	.word	0x0000208d

00001f48 <_ZN16Interfaces_Class26CheckExternalCommunicationEv>:
uint32_t Interfaces_Class::CheckExternalCommunication(void)
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	b084      	sub	sp, #16
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1f50:	2300      	movs	r3, #0
    1f52:	60fb      	str	r3, [r7, #12]


	if (arinc.newMessageR1)
    1f54:	4b14      	ldr	r3, [pc, #80]	; (1fa8 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
    1f56:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
    1f5a:	b2db      	uxtb	r3, r3
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	d007      	beq.n	1f70 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x28>
	{
		request.externRequest.arinc1GotMessage=true;
    1f60:	4b12      	ldr	r3, [pc, #72]	; (1fac <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1f62:	2201      	movs	r2, #1
    1f64:	709a      	strb	r2, [r3, #2]
		alu.PrepareNewTask(kALUTaskReadARINCR1);
    1f66:	2200      	movs	r2, #0
    1f68:	2104      	movs	r1, #4
    1f6a:	4811      	ldr	r0, [pc, #68]	; (1fb0 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
    1f6c:	4b11      	ldr	r3, [pc, #68]	; (1fb4 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>)
    1f6e:	4798      	blx	r3
	}
	if (arinc.newMessageR2)
    1f70:	4b0d      	ldr	r3, [pc, #52]	; (1fa8 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
    1f72:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
    1f76:	b2db      	uxtb	r3, r3
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d007      	beq.n	1f8c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x44>
	{
		request.externRequest.arinc2GotMessage=true;
    1f7c:	4b0b      	ldr	r3, [pc, #44]	; (1fac <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1f7e:	2201      	movs	r2, #1
    1f80:	70da      	strb	r2, [r3, #3]
		alu.PrepareNewTask(kALUTaskReadARINCR2);
    1f82:	2200      	movs	r2, #0
    1f84:	2105      	movs	r1, #5
    1f86:	480a      	ldr	r0, [pc, #40]	; (1fb0 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
    1f88:	4b0a      	ldr	r3, [pc, #40]	; (1fb4 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>)
    1f8a:	4798      	blx	r3
	}
	if (CheckUSBInterface())
    1f8c:	6878      	ldr	r0, [r7, #4]
    1f8e:	4b0a      	ldr	r3, [pc, #40]	; (1fb8 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x70>)
    1f90:	4798      	blx	r3
    1f92:	4603      	mov	r3, r0
    1f94:	2b00      	cmp	r3, #0
    1f96:	d002      	beq.n	1f9e <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x56>
	{
		request.externRequest.usbGotMessage=true;
    1f98:	4b04      	ldr	r3, [pc, #16]	; (1fac <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1f9a:	2201      	movs	r2, #1
    1f9c:	711a      	strb	r2, [r3, #4]
		//alu.PrepareNewTask(kALUTaskReadARINCR2);
	}
	//request.externRequest.arinc1GotMessage=arinc.newMessageR2;
	
	return	0;
    1f9e:	2300      	movs	r3, #0
}
    1fa0:	4618      	mov	r0, r3
    1fa2:	3710      	adds	r7, #16
    1fa4:	46bd      	mov	sp, r7
    1fa6:	bd80      	pop	{r7, pc}
    1fa8:	20008ec8 	.word	0x20008ec8
    1fac:	20001668 	.word	0x20001668
    1fb0:	20000c80 	.word	0x20000c80
    1fb4:	00000a0d 	.word	0x00000a0d
    1fb8:	00002009 	.word	0x00002009

00001fbc <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh>:
bool	Interfaces_Class::CheckFlapperValveInterface(uint8_t add){
    1fbc:	b580      	push	{r7, lr}
    1fbe:	b082      	sub	sp, #8
    1fc0:	af00      	add	r7, sp, #0
    1fc2:	6078      	str	r0, [r7, #4]
    1fc4:	460b      	mov	r3, r1
    1fc6:	70fb      	strb	r3, [r7, #3]
		if (fv1.fv1StatusChanged)
    1fc8:	4b0b      	ldr	r3, [pc, #44]	; (1ff8 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1fca:	7fdb      	ldrb	r3, [r3, #31]
    1fcc:	b2db      	uxtb	r3, r3
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d00a      	beq.n	1fe8 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x2c>
		{
			fv1.ReadActualPosition();
    1fd2:	4809      	ldr	r0, [pc, #36]	; (1ff8 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1fd4:	4b09      	ldr	r3, [pc, #36]	; (1ffc <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x40>)
    1fd6:	4798      	blx	r3
			alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    1fd8:	2200      	movs	r2, #0
    1fda:	210b      	movs	r1, #11
    1fdc:	4808      	ldr	r0, [pc, #32]	; (2000 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x44>)
    1fde:	4b09      	ldr	r3, [pc, #36]	; (2004 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x48>)
    1fe0:	4798      	blx	r3
			fv1.fv1StatusChanged=false;
    1fe2:	4b05      	ldr	r3, [pc, #20]	; (1ff8 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1fe4:	2200      	movs	r2, #0
    1fe6:	77da      	strb	r2, [r3, #31]
		}
		return	fv1.fv1StatusChanged;
    1fe8:	4b03      	ldr	r3, [pc, #12]	; (1ff8 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1fea:	7fdb      	ldrb	r3, [r3, #31]
    1fec:	b2db      	uxtb	r3, r3
}
    1fee:	4618      	mov	r0, r3
    1ff0:	3708      	adds	r7, #8
    1ff2:	46bd      	mov	sp, r7
    1ff4:	bd80      	pop	{r7, pc}
    1ff6:	bf00      	nop
    1ff8:	20009b10 	.word	0x20009b10
    1ffc:	000155cd 	.word	0x000155cd
    2000:	20000c80 	.word	0x20000c80
    2004:	00000a0d 	.word	0x00000a0d

00002008 <_ZN16Interfaces_Class17CheckUSBInterfaceEv>:
bool	Interfaces_Class::CheckUSBInterface(void){
    2008:	b580      	push	{r7, lr}
    200a:	b082      	sub	sp, #8
    200c:	af00      	add	r7, sp, #0
    200e:	6078      	str	r0, [r7, #4]
		if (usb.connected)
    2010:	4b13      	ldr	r3, [pc, #76]	; (2060 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    2012:	7c1b      	ldrb	r3, [r3, #16]
    2014:	b2db      	uxtb	r3, r3
    2016:	2b00      	cmp	r3, #0
    2018:	d01b      	beq.n	2052 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x4a>
		{
			if (maintenance.IsAppConnected())
    201a:	4812      	ldr	r0, [pc, #72]	; (2064 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x5c>)
    201c:	4b12      	ldr	r3, [pc, #72]	; (2068 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x60>)
    201e:	4798      	blx	r3
    2020:	4603      	mov	r3, r0
    2022:	2b00      	cmp	r3, #0
    2024:	d009      	beq.n	203a <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x32>
			{
				usb<<"Maintenance Tool Locked"<<NEWLINE;
    2026:	4911      	ldr	r1, [pc, #68]	; (206c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x64>)
    2028:	480d      	ldr	r0, [pc, #52]	; (2060 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    202a:	4b11      	ldr	r3, [pc, #68]	; (2070 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x68>)
    202c:	4798      	blx	r3
    202e:	4603      	mov	r3, r0
    2030:	4910      	ldr	r1, [pc, #64]	; (2074 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    2032:	4618      	mov	r0, r3
    2034:	4b10      	ldr	r3, [pc, #64]	; (2078 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    2036:	4798      	blx	r3
    2038:	e008      	b.n	204c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x44>
			} 
			else
			{
				usb<<"Remote operation Disabled"<<NEWLINE;
    203a:	4910      	ldr	r1, [pc, #64]	; (207c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x74>)
    203c:	4808      	ldr	r0, [pc, #32]	; (2060 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    203e:	4b10      	ldr	r3, [pc, #64]	; (2080 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x78>)
    2040:	4798      	blx	r3
    2042:	4603      	mov	r3, r0
    2044:	490b      	ldr	r1, [pc, #44]	; (2074 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    2046:	4618      	mov	r0, r3
    2048:	4b0b      	ldr	r3, [pc, #44]	; (2078 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    204a:	4798      	blx	r3
			}
			hvac.PrintState();
    204c:	480d      	ldr	r0, [pc, #52]	; (2084 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x7c>)
    204e:	4b0e      	ldr	r3, [pc, #56]	; (2088 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x80>)
    2050:	4798      	blx	r3
		}else{
						
		}
		return	usb.rxReady;
    2052:	4b03      	ldr	r3, [pc, #12]	; (2060 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    2054:	7d5b      	ldrb	r3, [r3, #21]
    2056:	b2db      	uxtb	r3, r3
}
    2058:	4618      	mov	r0, r3
    205a:	3708      	adds	r7, #8
    205c:	46bd      	mov	sp, r7
    205e:	bd80      	pop	{r7, pc}
    2060:	2000a368 	.word	0x2000a368
    2064:	2000a590 	.word	0x2000a590
    2068:	00019bed 	.word	0x00019bed
    206c:	000206b0 	.word	0x000206b0
    2070:	00002169 	.word	0x00002169
    2074:	000206c8 	.word	0x000206c8
    2078:	00000c99 	.word	0x00000c99
    207c:	000206cc 	.word	0x000206cc
    2080:	00002189 	.word	0x00002189
    2084:	200083f0 	.word	0x200083f0
    2088:	000012f9 	.word	0x000012f9

0000208c <_ZN16Interfaces_Class17CheckTemperaturesEv>:

bool	Interfaces_Class::CheckTemperatures(void){
    208c:	b580      	push	{r7, lr}
    208e:	b084      	sub	sp, #16
    2090:	af00      	add	r7, sp, #0
    2092:	6078      	str	r0, [r7, #4]
	bool result(false);
    2094:	2300      	movs	r3, #0
    2096:	73fb      	strb	r3, [r7, #15]
	if (temperatures.IsConversionFinished())
    2098:	4815      	ldr	r0, [pc, #84]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    209a:	4b16      	ldr	r3, [pc, #88]	; (20f4 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x68>)
    209c:	4798      	blx	r3
    209e:	4603      	mov	r3, r0
    20a0:	2b00      	cmp	r3, #0
    20a2:	d020      	beq.n	20e6 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x5a>
	{
		
		temperatures.GetConversionResult();
    20a4:	4812      	ldr	r0, [pc, #72]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    20a6:	4b14      	ldr	r3, [pc, #80]	; (20f8 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x6c>)
    20a8:	4798      	blx	r3
		if (temperatures.faultData==VALID_TEMPERATURE)
    20aa:	4b11      	ldr	r3, [pc, #68]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    20ac:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    20b0:	2b01      	cmp	r3, #1
    20b2:	d114      	bne.n	20de <_ZN16Interfaces_Class17CheckTemperaturesEv+0x52>
		{
			if (lastTemperature!=temperatures.values[0][1])
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    20b8:	4b0d      	ldr	r3, [pc, #52]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    20ba:	6e59      	ldr	r1, [r3, #100]	; 0x64
    20bc:	4b0f      	ldr	r3, [pc, #60]	; (20fc <_ZN16Interfaces_Class17CheckTemperaturesEv+0x70>)
    20be:	4610      	mov	r0, r2
    20c0:	4798      	blx	r3
    20c2:	4603      	mov	r3, r0
    20c4:	2b00      	cmp	r3, #0
    20c6:	d10a      	bne.n	20de <_ZN16Interfaces_Class17CheckTemperaturesEv+0x52>
			{
				lastTemperature=temperatures.values[0][1];
    20c8:	4b09      	ldr	r3, [pc, #36]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    20ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    20cc:	687b      	ldr	r3, [r7, #4]
    20ce:	67da      	str	r2, [r3, #124]	; 0x7c
				alu.PrepareNewTask(kALUTaskUpdateTemperatures);
    20d0:	2200      	movs	r2, #0
    20d2:	210a      	movs	r1, #10
    20d4:	480a      	ldr	r0, [pc, #40]	; (2100 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x74>)
    20d6:	4b0b      	ldr	r3, [pc, #44]	; (2104 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x78>)
    20d8:	4798      	blx	r3
				result=true;
    20da:	2301      	movs	r3, #1
    20dc:	73fb      	strb	r3, [r7, #15]
			}
				
		}
			temperatures.StartOneConversion();
    20de:	4804      	ldr	r0, [pc, #16]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    20e0:	4b09      	ldr	r3, [pc, #36]	; (2108 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x7c>)
    20e2:	4798      	blx	r3
			asm("nop");
    20e4:	bf00      	nop
	
	} 
	else
	{
	}
	return	result;
    20e6:	7bfb      	ldrb	r3, [r7, #15]
}
    20e8:	4618      	mov	r0, r3
    20ea:	3710      	adds	r7, #16
    20ec:	46bd      	mov	sp, r7
    20ee:	bd80      	pop	{r7, pc}
    20f0:	20009c84 	.word	0x20009c84
    20f4:	00015f09 	.word	0x00015f09
    20f8:	00015e19 	.word	0x00015e19
    20fc:	0001be09 	.word	0x0001be09
    2100:	20000c80 	.word	0x20000c80
    2104:	00000a0d 	.word	0x00000a0d
    2108:	00015dad 	.word	0x00015dad

0000210c <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:
	{
		
	}
	return	arinc.newMessageR1||arinc.newMessageR2;
}
uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
    210c:	b480      	push	{r7}
    210e:	b085      	sub	sp, #20
    2110:	af00      	add	r7, sp, #0
    2112:	6078      	str	r0, [r7, #4]
    2114:	6039      	str	r1, [r7, #0]
	s=status;
    2116:	683a      	ldr	r2, [r7, #0]
    2118:	687b      	ldr	r3, [r7, #4]
    211a:	3368      	adds	r3, #104	; 0x68
    211c:	e893 0003 	ldmia.w	r3, {r0, r1}
    2120:	e882 0003 	stmia.w	r2, {r0, r1}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
    2124:	683b      	ldr	r3, [r7, #0]
    2126:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    2128:	2300      	movs	r3, #0
    212a:	60bb      	str	r3, [r7, #8]
    212c:	68bb      	ldr	r3, [r7, #8]
    212e:	2b01      	cmp	r3, #1
    2130:	d812      	bhi.n	2158 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x4c>
	{
		s.rawStatus+=(*p)&(0x01<<i);
    2132:	683b      	ldr	r3, [r7, #0]
    2134:	685a      	ldr	r2, [r3, #4]
    2136:	68fb      	ldr	r3, [r7, #12]
    2138:	681b      	ldr	r3, [r3, #0]
    213a:	2001      	movs	r0, #1
    213c:	68b9      	ldr	r1, [r7, #8]
    213e:	fa00 f101 	lsl.w	r1, r0, r1
    2142:	400b      	ands	r3, r1
    2144:	441a      	add	r2, r3
    2146:	683b      	ldr	r3, [r7, #0]
    2148:	605a      	str	r2, [r3, #4]
		p++;
    214a:	68fb      	ldr	r3, [r7, #12]
    214c:	3304      	adds	r3, #4
    214e:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    2150:	68bb      	ldr	r3, [r7, #8]
    2152:	3301      	adds	r3, #1
    2154:	60bb      	str	r3, [r7, #8]
    2156:	e7e9      	b.n	212c <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x20>
	}
	return	status.rawStatus;
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
}
    215c:	4618      	mov	r0, r3
    215e:	3714      	adds	r7, #20
    2160:	46bd      	mov	sp, r7
    2162:	bc80      	pop	{r7}
    2164:	4770      	bx	lr
	...

00002168 <_ZlsIA24_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2168:	b580      	push	{r7, lr}
    216a:	b082      	sub	sp, #8
    216c:	af00      	add	r7, sp, #0
    216e:	6078      	str	r0, [r7, #4]
    2170:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2172:	6839      	ldr	r1, [r7, #0]
    2174:	6878      	ldr	r0, [r7, #4]
    2176:	4b03      	ldr	r3, [pc, #12]	; (2184 <_ZlsIA24_cER5PrintS2_RKT_+0x1c>)
    2178:	4798      	blx	r3
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	4618      	mov	r0, r3
    217e:	3708      	adds	r7, #8
    2180:	46bd      	mov	sp, r7
    2182:	bd80      	pop	{r7, pc}
    2184:	00018489 	.word	0x00018489

00002188 <_ZlsIA26_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
    2190:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2192:	6839      	ldr	r1, [r7, #0]
    2194:	6878      	ldr	r0, [r7, #4]
    2196:	4b03      	ldr	r3, [pc, #12]	; (21a4 <_ZlsIA26_cER5PrintS2_RKT_+0x1c>)
    2198:	4798      	blx	r3
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	4618      	mov	r0, r3
    219e:	3708      	adds	r7, #8
    21a0:	46bd      	mov	sp, r7
    21a2:	bd80      	pop	{r7, pc}
    21a4:	00018489 	.word	0x00018489

000021a8 <_Z41__static_initialization_and_destruction_0ii>:
Interfaces_Class	interfaces;
    21a8:	b580      	push	{r7, lr}
    21aa:	b082      	sub	sp, #8
    21ac:	af00      	add	r7, sp, #0
    21ae:	6078      	str	r0, [r7, #4]
    21b0:	6039      	str	r1, [r7, #0]
    21b2:	687b      	ldr	r3, [r7, #4]
    21b4:	2b01      	cmp	r3, #1
    21b6:	d11c      	bne.n	21f2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    21b8:	683b      	ldr	r3, [r7, #0]
    21ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    21be:	4293      	cmp	r3, r2
    21c0:	d117      	bne.n	21f2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    21c2:	480e      	ldr	r0, [pc, #56]	; (21fc <_Z41__static_initialization_and_destruction_0ii+0x54>)
    21c4:	4b0e      	ldr	r3, [pc, #56]	; (2200 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    21c6:	4798      	blx	r3
    21c8:	4a0e      	ldr	r2, [pc, #56]	; (2204 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    21ca:	490f      	ldr	r1, [pc, #60]	; (2208 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    21cc:	480b      	ldr	r0, [pc, #44]	; (21fc <_Z41__static_initialization_and_destruction_0ii+0x54>)
    21ce:	4b0f      	ldr	r3, [pc, #60]	; (220c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    21d0:	4798      	blx	r3
    21d2:	480f      	ldr	r0, [pc, #60]	; (2210 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    21d4:	4b0f      	ldr	r3, [pc, #60]	; (2214 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    21d6:	4798      	blx	r3
    21d8:	4a0a      	ldr	r2, [pc, #40]	; (2204 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    21da:	490f      	ldr	r1, [pc, #60]	; (2218 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    21dc:	480c      	ldr	r0, [pc, #48]	; (2210 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    21de:	4b0b      	ldr	r3, [pc, #44]	; (220c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    21e0:	4798      	blx	r3
    21e2:	480e      	ldr	r0, [pc, #56]	; (221c <_Z41__static_initialization_and_destruction_0ii+0x74>)
    21e4:	4b0e      	ldr	r3, [pc, #56]	; (2220 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    21e6:	4798      	blx	r3
    21e8:	4a06      	ldr	r2, [pc, #24]	; (2204 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    21ea:	490e      	ldr	r1, [pc, #56]	; (2224 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    21ec:	480b      	ldr	r0, [pc, #44]	; (221c <_Z41__static_initialization_and_destruction_0ii+0x74>)
    21ee:	4b07      	ldr	r3, [pc, #28]	; (220c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    21f0:	4798      	blx	r3
    21f2:	bf00      	nop
    21f4:	3708      	adds	r7, #8
    21f6:	46bd      	mov	sp, r7
    21f8:	bd80      	pop	{r7, pc}
    21fa:	bf00      	nop
    21fc:	20001650 	.word	0x20001650
    2200:	00002d21 	.word	0x00002d21
    2204:	20000000 	.word	0x20000000
    2208:	00002d3b 	.word	0x00002d3b
    220c:	00019d41 	.word	0x00019d41
    2210:	20001664 	.word	0x20001664
    2214:	00000fb5 	.word	0x00000fb5
    2218:	00000fcf 	.word	0x00000fcf
    221c:	20001670 	.word	0x20001670
    2220:	00001d99 	.word	0x00001d99
    2224:	00001dad 	.word	0x00001dad

00002228 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    2228:	b580      	push	{r7, lr}
    222a:	af00      	add	r7, sp, #0
    222c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2230:	2001      	movs	r0, #1
    2232:	4b01      	ldr	r3, [pc, #4]	; (2238 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    2234:	4798      	blx	r3
    2236:	bd80      	pop	{r7, pc}
    2238:	000021a9 	.word	0x000021a9

0000223c <main>:
		
	}
}

int main(void)
{
    223c:	b580      	push	{r7, lr}
    223e:	b082      	sub	sp, #8
    2240:	af00      	add	r7, sp, #0
	atmel_start_init();
    2242:	4b40      	ldr	r3, [pc, #256]	; (2344 <main+0x108>)
    2244:	4798      	blx	r3
//  	uint32_t p=pwm_enable(&LIVE_PULSE);
//  	while (1);

	usb.Init();
    2246:	4840      	ldr	r0, [pc, #256]	; (2348 <main+0x10c>)
    2248:	4b40      	ldr	r3, [pc, #256]	; (234c <main+0x110>)
    224a:	4798      	blx	r3
	delay_ms(100);
    224c:	2064      	movs	r0, #100	; 0x64
    224e:	4b40      	ldr	r3, [pc, #256]	; (2350 <main+0x114>)
    2250:	4798      	blx	r3
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    2252:	4940      	ldr	r1, [pc, #256]	; (2354 <main+0x118>)
    2254:	483c      	ldr	r0, [pc, #240]	; (2348 <main+0x10c>)
    2256:	4b40      	ldr	r3, [pc, #256]	; (2358 <main+0x11c>)
    2258:	4798      	blx	r3
    225a:	4603      	mov	r3, r0
    225c:	493d      	ldr	r1, [pc, #244]	; (2354 <main+0x118>)
    225e:	4618      	mov	r0, r3
    2260:	4b3d      	ldr	r3, [pc, #244]	; (2358 <main+0x11c>)
    2262:	4798      	blx	r3
    2264:	4603      	mov	r3, r0
    2266:	493d      	ldr	r1, [pc, #244]	; (235c <main+0x120>)
    2268:	4618      	mov	r0, r3
    226a:	4b3d      	ldr	r3, [pc, #244]	; (2360 <main+0x124>)
    226c:	4798      	blx	r3
    226e:	4603      	mov	r3, r0
    2270:	4938      	ldr	r1, [pc, #224]	; (2354 <main+0x118>)
    2272:	4618      	mov	r0, r3
    2274:	4b38      	ldr	r3, [pc, #224]	; (2358 <main+0x11c>)
    2276:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    2278:	493a      	ldr	r1, [pc, #232]	; (2364 <main+0x128>)
    227a:	4833      	ldr	r0, [pc, #204]	; (2348 <main+0x10c>)
    227c:	4b3a      	ldr	r3, [pc, #232]	; (2368 <main+0x12c>)
    227e:	4798      	blx	r3
    2280:	4603      	mov	r3, r0
    2282:	493a      	ldr	r1, [pc, #232]	; (236c <main+0x130>)
    2284:	4618      	mov	r0, r3
    2286:	4b38      	ldr	r3, [pc, #224]	; (2368 <main+0x12c>)
    2288:	4798      	blx	r3
    228a:	4603      	mov	r3, r0
    228c:	4938      	ldr	r1, [pc, #224]	; (2370 <main+0x134>)
    228e:	4618      	mov	r0, r3
    2290:	4b38      	ldr	r3, [pc, #224]	; (2374 <main+0x138>)
    2292:	4798      	blx	r3
    2294:	4603      	mov	r3, r0
    2296:	4938      	ldr	r1, [pc, #224]	; (2378 <main+0x13c>)
    2298:	4618      	mov	r0, r3
    229a:	4b38      	ldr	r3, [pc, #224]	; (237c <main+0x140>)
    229c:	4798      	blx	r3
    229e:	4603      	mov	r3, r0
    22a0:	492c      	ldr	r1, [pc, #176]	; (2354 <main+0x118>)
    22a2:	4618      	mov	r0, r3
    22a4:	4b2c      	ldr	r3, [pc, #176]	; (2358 <main+0x11c>)
    22a6:	4798      	blx	r3
    22a8:	4603      	mov	r3, r0
    22aa:	492a      	ldr	r1, [pc, #168]	; (2354 <main+0x118>)
    22ac:	4618      	mov	r0, r3
    22ae:	4b2a      	ldr	r3, [pc, #168]	; (2358 <main+0x11c>)
    22b0:	4798      	blx	r3
	//QSPIDriverTest();
	memory.Init();
    22b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    22b6:	4832      	ldr	r0, [pc, #200]	; (2380 <main+0x144>)
    22b8:	4b32      	ldr	r3, [pc, #200]	; (2384 <main+0x148>)
    22ba:	4798      	blx	r3
	alu.Init();
    22bc:	4832      	ldr	r0, [pc, #200]	; (2388 <main+0x14c>)
    22be:	4b33      	ldr	r3, [pc, #204]	; (238c <main+0x150>)
    22c0:	4798      	blx	r3
	alu.RunController();
    22c2:	4831      	ldr	r0, [pc, #196]	; (2388 <main+0x14c>)
    22c4:	4b32      	ldr	r3, [pc, #200]	; (2390 <main+0x154>)
    22c6:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    22c8:	4932      	ldr	r1, [pc, #200]	; (2394 <main+0x158>)
    22ca:	481f      	ldr	r0, [pc, #124]	; (2348 <main+0x10c>)
    22cc:	4b32      	ldr	r3, [pc, #200]	; (2398 <main+0x15c>)
    22ce:	4798      	blx	r3
    22d0:	4603      	mov	r3, r0
    22d2:	4920      	ldr	r1, [pc, #128]	; (2354 <main+0x118>)
    22d4:	4618      	mov	r0, r3
    22d6:	4b20      	ldr	r3, [pc, #128]	; (2358 <main+0x11c>)
    22d8:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    22da:	482b      	ldr	r0, [pc, #172]	; (2388 <main+0x14c>)
    22dc:	4b2f      	ldr	r3, [pc, #188]	; (239c <main+0x160>)
    22de:	4798      	blx	r3
    22e0:	4603      	mov	r3, r0
    22e2:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    22e4:	492e      	ldr	r1, [pc, #184]	; (23a0 <main+0x164>)
    22e6:	4818      	ldr	r0, [pc, #96]	; (2348 <main+0x10c>)
    22e8:	4b2e      	ldr	r3, [pc, #184]	; (23a4 <main+0x168>)
    22ea:	4798      	blx	r3
    22ec:	4602      	mov	r2, r0
    22ee:	1dfb      	adds	r3, r7, #7
    22f0:	4619      	mov	r1, r3
    22f2:	4610      	mov	r0, r2
    22f4:	4b2c      	ldr	r3, [pc, #176]	; (23a8 <main+0x16c>)
    22f6:	4798      	blx	r3
    22f8:	4603      	mov	r3, r0
    22fa:	4916      	ldr	r1, [pc, #88]	; (2354 <main+0x118>)
    22fc:	4618      	mov	r0, r3
    22fe:	4b16      	ldr	r3, [pc, #88]	; (2358 <main+0x11c>)
    2300:	4798      	blx	r3
	if (!pBit)
    2302:	482a      	ldr	r0, [pc, #168]	; (23ac <main+0x170>)
    2304:	4b2a      	ldr	r3, [pc, #168]	; (23b0 <main+0x174>)
    2306:	4798      	blx	r3
    2308:	4603      	mov	r3, r0
    230a:	f083 0301 	eor.w	r3, r3, #1
    230e:	b2db      	uxtb	r3, r3
    2310:	2b00      	cmp	r3, #0
    2312:	d004      	beq.n	231e <main+0xe2>
	{
		hvac.Stop(0);
    2314:	2100      	movs	r1, #0
    2316:	4827      	ldr	r0, [pc, #156]	; (23b4 <main+0x178>)
    2318:	4b27      	ldr	r3, [pc, #156]	; (23b8 <main+0x17c>)
    231a:	4798      	blx	r3
    231c:	e003      	b.n	2326 <main+0xea>
	} 
	else
	{
		hvac.Start(0);
    231e:	2100      	movs	r1, #0
    2320:	4824      	ldr	r0, [pc, #144]	; (23b4 <main+0x178>)
    2322:	4b26      	ldr	r3, [pc, #152]	; (23bc <main+0x180>)
    2324:	4798      	blx	r3
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
    2326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    232a:	4b09      	ldr	r3, [pc, #36]	; (2350 <main+0x114>)
    232c:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    232e:	490b      	ldr	r1, [pc, #44]	; (235c <main+0x120>)
    2330:	4805      	ldr	r0, [pc, #20]	; (2348 <main+0x10c>)
    2332:	4b0b      	ldr	r3, [pc, #44]	; (2360 <main+0x124>)
    2334:	4798      	blx	r3
    2336:	4603      	mov	r3, r0
    2338:	4906      	ldr	r1, [pc, #24]	; (2354 <main+0x118>)
    233a:	4618      	mov	r0, r3
    233c:	4b06      	ldr	r3, [pc, #24]	; (2358 <main+0x11c>)
    233e:	4798      	blx	r3
		delay_ms(1000);
    2340:	e7f1      	b.n	2326 <main+0xea>
    2342:	bf00      	nop
    2344:	00004a0d 	.word	0x00004a0d
    2348:	2000a368 	.word	0x2000a368
    234c:	00017fd5 	.word	0x00017fd5
    2350:	00006761 	.word	0x00006761
    2354:	0002072c 	.word	0x0002072c
    2358:	00000c99 	.word	0x00000c99
    235c:	00020764 	.word	0x00020764
    2360:	000023c1 	.word	0x000023c1
    2364:	00020788 	.word	0x00020788
    2368:	000023e1 	.word	0x000023e1
    236c:	00020794 	.word	0x00020794
    2370:	000207a0 	.word	0x000207a0
    2374:	00002401 	.word	0x00002401
    2378:	000207a8 	.word	0x000207a8
    237c:	00002421 	.word	0x00002421
    2380:	20002708 	.word	0x20002708
    2384:	000025f9 	.word	0x000025f9
    2388:	20000c80 	.word	0x20000c80
    238c:	00000481 	.word	0x00000481
    2390:	000005e5 	.word	0x000005e5
    2394:	000207b4 	.word	0x000207b4
    2398:	00002441 	.word	0x00002441
    239c:	0000077d 	.word	0x0000077d
    23a0:	000207cc 	.word	0x000207cc
    23a4:	00002461 	.word	0x00002461
    23a8:	00000c71 	.word	0x00000c71
    23ac:	200016f0 	.word	0x200016f0
    23b0:	00002d4f 	.word	0x00002d4f
    23b4:	200081d8 	.word	0x200081d8
    23b8:	000041f9 	.word	0x000041f9
    23bc:	00003309 	.word	0x00003309

000023c0 <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    23c0:	b580      	push	{r7, lr}
    23c2:	b082      	sub	sp, #8
    23c4:	af00      	add	r7, sp, #0
    23c6:	6078      	str	r0, [r7, #4]
    23c8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    23ca:	6839      	ldr	r1, [r7, #0]
    23cc:	6878      	ldr	r0, [r7, #4]
    23ce:	4b03      	ldr	r3, [pc, #12]	; (23dc <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    23d0:	4798      	blx	r3
    23d2:	687b      	ldr	r3, [r7, #4]
    23d4:	4618      	mov	r0, r3
    23d6:	3708      	adds	r7, #8
    23d8:	46bd      	mov	sp, r7
    23da:	bd80      	pop	{r7, pc}
    23dc:	00018489 	.word	0x00018489

000023e0 <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    23e0:	b580      	push	{r7, lr}
    23e2:	b082      	sub	sp, #8
    23e4:	af00      	add	r7, sp, #0
    23e6:	6078      	str	r0, [r7, #4]
    23e8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    23ea:	6839      	ldr	r1, [r7, #0]
    23ec:	6878      	ldr	r0, [r7, #4]
    23ee:	4b03      	ldr	r3, [pc, #12]	; (23fc <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    23f0:	4798      	blx	r3
    23f2:	687b      	ldr	r3, [r7, #4]
    23f4:	4618      	mov	r0, r3
    23f6:	3708      	adds	r7, #8
    23f8:	46bd      	mov	sp, r7
    23fa:	bd80      	pop	{r7, pc}
    23fc:	00018489 	.word	0x00018489

00002400 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2400:	b580      	push	{r7, lr}
    2402:	b082      	sub	sp, #8
    2404:	af00      	add	r7, sp, #0
    2406:	6078      	str	r0, [r7, #4]
    2408:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    240a:	6839      	ldr	r1, [r7, #0]
    240c:	6878      	ldr	r0, [r7, #4]
    240e:	4b03      	ldr	r3, [pc, #12]	; (241c <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    2410:	4798      	blx	r3
    2412:	687b      	ldr	r3, [r7, #4]
    2414:	4618      	mov	r0, r3
    2416:	3708      	adds	r7, #8
    2418:	46bd      	mov	sp, r7
    241a:	bd80      	pop	{r7, pc}
    241c:	00018489 	.word	0x00018489

00002420 <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2420:	b580      	push	{r7, lr}
    2422:	b082      	sub	sp, #8
    2424:	af00      	add	r7, sp, #0
    2426:	6078      	str	r0, [r7, #4]
    2428:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    242a:	6839      	ldr	r1, [r7, #0]
    242c:	6878      	ldr	r0, [r7, #4]
    242e:	4b03      	ldr	r3, [pc, #12]	; (243c <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    2430:	4798      	blx	r3
    2432:	687b      	ldr	r3, [r7, #4]
    2434:	4618      	mov	r0, r3
    2436:	3708      	adds	r7, #8
    2438:	46bd      	mov	sp, r7
    243a:	bd80      	pop	{r7, pc}
    243c:	00018489 	.word	0x00018489

00002440 <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2440:	b580      	push	{r7, lr}
    2442:	b082      	sub	sp, #8
    2444:	af00      	add	r7, sp, #0
    2446:	6078      	str	r0, [r7, #4]
    2448:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    244a:	6839      	ldr	r1, [r7, #0]
    244c:	6878      	ldr	r0, [r7, #4]
    244e:	4b03      	ldr	r3, [pc, #12]	; (245c <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    2450:	4798      	blx	r3
    2452:	687b      	ldr	r3, [r7, #4]
    2454:	4618      	mov	r0, r3
    2456:	3708      	adds	r7, #8
    2458:	46bd      	mov	sp, r7
    245a:	bd80      	pop	{r7, pc}
    245c:	00018489 	.word	0x00018489

00002460 <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2460:	b580      	push	{r7, lr}
    2462:	b082      	sub	sp, #8
    2464:	af00      	add	r7, sp, #0
    2466:	6078      	str	r0, [r7, #4]
    2468:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    246a:	6839      	ldr	r1, [r7, #0]
    246c:	6878      	ldr	r0, [r7, #4]
    246e:	4b03      	ldr	r3, [pc, #12]	; (247c <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    2470:	4798      	blx	r3
    2472:	687b      	ldr	r3, [r7, #4]
    2474:	4618      	mov	r0, r3
    2476:	3708      	adds	r7, #8
    2478:	46bd      	mov	sp, r7
    247a:	bd80      	pop	{r7, pc}
    247c:	00018489 	.word	0x00018489

00002480 <_Z41__static_initialization_and_destruction_0ii>:
    }
}
    2480:	b580      	push	{r7, lr}
    2482:	b082      	sub	sp, #8
    2484:	af00      	add	r7, sp, #0
    2486:	6078      	str	r0, [r7, #4]
    2488:	6039      	str	r1, [r7, #0]
    248a:	687b      	ldr	r3, [r7, #4]
    248c:	2b01      	cmp	r3, #1
    248e:	d114      	bne.n	24ba <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2490:	683b      	ldr	r3, [r7, #0]
    2492:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2496:	4293      	cmp	r3, r2
    2498:	d10f      	bne.n	24ba <_Z41__static_initialization_and_destruction_0ii+0x3a>
    249a:	480a      	ldr	r0, [pc, #40]	; (24c4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    249c:	4b0a      	ldr	r3, [pc, #40]	; (24c8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    249e:	4798      	blx	r3
    24a0:	4a0a      	ldr	r2, [pc, #40]	; (24cc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    24a2:	490b      	ldr	r1, [pc, #44]	; (24d0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    24a4:	4807      	ldr	r0, [pc, #28]	; (24c4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    24a6:	4b0b      	ldr	r3, [pc, #44]	; (24d4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    24a8:	4798      	blx	r3
    24aa:	480b      	ldr	r0, [pc, #44]	; (24d8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    24ac:	4b0b      	ldr	r3, [pc, #44]	; (24dc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    24ae:	4798      	blx	r3
    24b0:	4a06      	ldr	r2, [pc, #24]	; (24cc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    24b2:	490b      	ldr	r1, [pc, #44]	; (24e0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    24b4:	4808      	ldr	r0, [pc, #32]	; (24d8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    24b6:	4b07      	ldr	r3, [pc, #28]	; (24d4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    24b8:	4798      	blx	r3
    24ba:	bf00      	nop
    24bc:	3708      	adds	r7, #8
    24be:	46bd      	mov	sp, r7
    24c0:	bd80      	pop	{r7, pc}
    24c2:	bf00      	nop
    24c4:	200016f0 	.word	0x200016f0
    24c8:	00002d21 	.word	0x00002d21
    24cc:	20000000 	.word	0x20000000
    24d0:	00002d3b 	.word	0x00002d3b
    24d4:	00019d41 	.word	0x00019d41
    24d8:	20001704 	.word	0x20001704
    24dc:	00000fb5 	.word	0x00000fb5
    24e0:	00000fcf 	.word	0x00000fcf

000024e4 <_GLOBAL__sub_I__Z14QSPIDriverTestv>:
    24e4:	b580      	push	{r7, lr}
    24e6:	af00      	add	r7, sp, #0
    24e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    24ec:	2001      	movs	r0, #1
    24ee:	4b01      	ldr	r3, [pc, #4]	; (24f4 <_GLOBAL__sub_I__Z14QSPIDriverTestv+0x10>)
    24f0:	4798      	blx	r3
    24f2:	bd80      	pop	{r7, pc}
    24f4:	00002481 	.word	0x00002481

000024f8 <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
    24f8:	b580      	push	{r7, lr}
    24fa:	b082      	sub	sp, #8
    24fc:	af00      	add	r7, sp, #0
    24fe:	6078      	str	r0, [r7, #4]
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	4618      	mov	r0, r3
    2504:	4b03      	ldr	r3, [pc, #12]	; (2514 <_ZN19PersistenceServicesD1Ev+0x1c>)
    2506:	4798      	blx	r3
    2508:	687b      	ldr	r3, [r7, #4]
    250a:	4618      	mov	r0, r3
    250c:	3708      	adds	r7, #8
    250e:	46bd      	mov	sp, r7
    2510:	bd80      	pop	{r7, pc}
    2512:	bf00      	nop
    2514:	000014e1 	.word	0x000014e1

00002518 <_ZN21MemoryManagment_ClassC1Ev>:
#include "CDC_Class.h"

static	uint8_t	flashBufferStatic[QSPI_ERBLK/1];

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
    2518:	b580      	push	{r7, lr}
    251a:	b082      	sub	sp, #8
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
    2520:	687b      	ldr	r3, [r7, #4]
    2522:	4618      	mov	r0, r3
    2524:	4b1a      	ldr	r3, [pc, #104]	; (2590 <_ZN21MemoryManagment_ClassC1Ev+0x78>)
    2526:	4798      	blx	r3
    2528:	687b      	ldr	r3, [r7, #4]
    252a:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    252e:	4618      	mov	r0, r3
    2530:	4b18      	ldr	r3, [pc, #96]	; (2594 <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
    2532:	4798      	blx	r3
    2534:	687b      	ldr	r3, [r7, #4]
    2536:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    253a:	4618      	mov	r0, r3
    253c:	4b16      	ldr	r3, [pc, #88]	; (2598 <_ZN21MemoryManagment_ClassC1Ev+0x80>)
    253e:	4798      	blx	r3
    2540:	687b      	ldr	r3, [r7, #4]
    2542:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    2546:	4618      	mov	r0, r3
    2548:	4b14      	ldr	r3, [pc, #80]	; (259c <_ZN21MemoryManagment_ClassC1Ev+0x84>)
    254a:	4798      	blx	r3
    254c:	687b      	ldr	r3, [r7, #4]
    254e:	f203 733c 	addw	r3, r3, #1852	; 0x73c
    2552:	4618      	mov	r0, r3
    2554:	4b12      	ldr	r3, [pc, #72]	; (25a0 <_ZN21MemoryManagment_ClassC1Ev+0x88>)
    2556:	4798      	blx	r3
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	2200      	movs	r2, #0
    255c:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
{
	_currentAddress=0;
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	2200      	movs	r2, #0
    2564:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
	head=512;
    2568:	687b      	ldr	r3, [r7, #4]
    256a:	f44f 7200 	mov.w	r2, #512	; 0x200
    256e:	f8c3 2974 	str.w	r2, [r3, #2420]	; 0x974
	tail=0;
    2572:	687b      	ldr	r3, [r7, #4]
    2574:	2200      	movs	r2, #0
    2576:	f8c3 2978 	str.w	r2, [r3, #2424]	; 0x978
	flashBuffer=&flashBufferStatic[0];
    257a:	687b      	ldr	r3, [r7, #4]
    257c:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2580:	3330      	adds	r3, #48	; 0x30
    2582:	4a08      	ldr	r2, [pc, #32]	; (25a4 <_ZN21MemoryManagment_ClassC1Ev+0x8c>)
    2584:	601a      	str	r2, [r3, #0]
	
} //MemoryManagment_Class
    2586:	687b      	ldr	r3, [r7, #4]
    2588:	4618      	mov	r0, r3
    258a:	3708      	adds	r7, #8
    258c:	46bd      	mov	sp, r7
    258e:	bd80      	pop	{r7, pc}
    2590:	000015b5 	.word	0x000015b5
    2594:	00002e25 	.word	0x00002e25
    2598:	00001a41 	.word	0x00001a41
    259c:	00002929 	.word	0x00002929
    25a0:	00001619 	.word	0x00001619
    25a4:	20001708 	.word	0x20001708

000025a8 <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
    25a8:	b580      	push	{r7, lr}
    25aa:	b082      	sub	sp, #8
    25ac:	af00      	add	r7, sp, #0
    25ae:	6078      	str	r0, [r7, #4]
    25b0:	687b      	ldr	r3, [r7, #4]
    25b2:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    25b6:	4618      	mov	r0, r3
    25b8:	4b0b      	ldr	r3, [pc, #44]	; (25e8 <_ZN21MemoryManagment_ClassD1Ev+0x40>)
    25ba:	4798      	blx	r3
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    25c2:	4618      	mov	r0, r3
    25c4:	4b09      	ldr	r3, [pc, #36]	; (25ec <_ZN21MemoryManagment_ClassD1Ev+0x44>)
    25c6:	4798      	blx	r3
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    25ce:	4618      	mov	r0, r3
    25d0:	4b07      	ldr	r3, [pc, #28]	; (25f0 <_ZN21MemoryManagment_ClassD1Ev+0x48>)
    25d2:	4798      	blx	r3
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	4618      	mov	r0, r3
    25d8:	4b06      	ldr	r3, [pc, #24]	; (25f4 <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
    25da:	4798      	blx	r3
{
} //~MemoryManagment_Class
    25dc:	687b      	ldr	r3, [r7, #4]
    25de:	4618      	mov	r0, r3
    25e0:	3708      	adds	r7, #8
    25e2:	46bd      	mov	sp, r7
    25e4:	bd80      	pop	{r7, pc}
    25e6:	bf00      	nop
    25e8:	0000293d 	.word	0x0000293d
    25ec:	00001a55 	.word	0x00001a55
    25f0:	000024f9 	.word	0x000024f9
    25f4:	000015e5 	.word	0x000015e5

000025f8 <_ZN21MemoryManagment_Class4InitEm>:

bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
    25f8:	b580      	push	{r7, lr}
    25fa:	b082      	sub	sp, #8
    25fc:	af00      	add	r7, sp, #0
    25fe:	6078      	str	r0, [r7, #4]
    2600:	6039      	str	r1, [r7, #0]
		if (qspiFlash.Init())
    2602:	481d      	ldr	r0, [pc, #116]	; (2678 <_ZN21MemoryManagment_Class4InitEm+0x80>)
    2604:	4b1d      	ldr	r3, [pc, #116]	; (267c <_ZN21MemoryManagment_Class4InitEm+0x84>)
    2606:	4798      	blx	r3
    2608:	4603      	mov	r3, r0
    260a:	2b00      	cmp	r3, #0
    260c:	d009      	beq.n	2622 <_ZN21MemoryManagment_Class4InitEm+0x2a>
		{
			usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
    260e:	491c      	ldr	r1, [pc, #112]	; (2680 <_ZN21MemoryManagment_Class4InitEm+0x88>)
    2610:	481c      	ldr	r0, [pc, #112]	; (2684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2612:	4b1d      	ldr	r3, [pc, #116]	; (2688 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    2614:	4798      	blx	r3
    2616:	4603      	mov	r3, r0
    2618:	491c      	ldr	r1, [pc, #112]	; (268c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    261a:	4618      	mov	r0, r3
    261c:	4b1c      	ldr	r3, [pc, #112]	; (2690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    261e:	4798      	blx	r3
    2620:	e008      	b.n	2634 <_ZN21MemoryManagment_Class4InitEm+0x3c>
		} 
		else
		{
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
    2622:	491c      	ldr	r1, [pc, #112]	; (2694 <_ZN21MemoryManagment_Class4InitEm+0x9c>)
    2624:	4817      	ldr	r0, [pc, #92]	; (2684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2626:	4b18      	ldr	r3, [pc, #96]	; (2688 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    2628:	4798      	blx	r3
    262a:	4603      	mov	r3, r0
    262c:	4917      	ldr	r1, [pc, #92]	; (268c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    262e:	4618      	mov	r0, r3
    2630:	4b17      	ldr	r3, [pc, #92]	; (2690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2632:	4798      	blx	r3
		}
		if (eeprom.Init())
    2634:	4818      	ldr	r0, [pc, #96]	; (2698 <_ZN21MemoryManagment_Class4InitEm+0xa0>)
    2636:	4b19      	ldr	r3, [pc, #100]	; (269c <_ZN21MemoryManagment_Class4InitEm+0xa4>)
    2638:	4798      	blx	r3
    263a:	4603      	mov	r3, r0
    263c:	2b00      	cmp	r3, #0
    263e:	d009      	beq.n	2654 <_ZN21MemoryManagment_Class4InitEm+0x5c>
		{
			usb<<"EEPROM Memory SelfTest PASSED"<<NEWLINE;
    2640:	4917      	ldr	r1, [pc, #92]	; (26a0 <_ZN21MemoryManagment_Class4InitEm+0xa8>)
    2642:	4810      	ldr	r0, [pc, #64]	; (2684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2644:	4b17      	ldr	r3, [pc, #92]	; (26a4 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    2646:	4798      	blx	r3
    2648:	4603      	mov	r3, r0
    264a:	4910      	ldr	r1, [pc, #64]	; (268c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    264c:	4618      	mov	r0, r3
    264e:	4b10      	ldr	r3, [pc, #64]	; (2690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2650:	4798      	blx	r3
    2652:	e008      	b.n	2666 <_ZN21MemoryManagment_Class4InitEm+0x6e>
		
		} 
		else
		{
			usb<<"EEPROM Memory SelfTest FAILED"<<NEWLINE;
    2654:	4914      	ldr	r1, [pc, #80]	; (26a8 <_ZN21MemoryManagment_Class4InitEm+0xb0>)
    2656:	480b      	ldr	r0, [pc, #44]	; (2684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2658:	4b12      	ldr	r3, [pc, #72]	; (26a4 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    265a:	4798      	blx	r3
    265c:	4603      	mov	r3, r0
    265e:	490b      	ldr	r1, [pc, #44]	; (268c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    2660:	4618      	mov	r0, r3
    2662:	4b0b      	ldr	r3, [pc, #44]	; (2690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2664:	4798      	blx	r3
		}
		
		SetChipID(flashChipSize);
    2666:	6839      	ldr	r1, [r7, #0]
    2668:	6878      	ldr	r0, [r7, #4]
    266a:	4b10      	ldr	r3, [pc, #64]	; (26ac <_ZN21MemoryManagment_Class4InitEm+0xb4>)
    266c:	4798      	blx	r3
}
    266e:	bf00      	nop
    2670:	4618      	mov	r0, r3
    2672:	3708      	adds	r7, #8
    2674:	46bd      	mov	sp, r7
    2676:	bd80      	pop	{r7, pc}
    2678:	20009eac 	.word	0x20009eac
    267c:	00016b85 	.word	0x00016b85
    2680:	000207dc 	.word	0x000207dc
    2684:	2000a368 	.word	0x2000a368
    2688:	000028ad 	.word	0x000028ad
    268c:	000207fc 	.word	0x000207fc
    2690:	00000c99 	.word	0x00000c99
    2694:	00020800 	.word	0x00020800
    2698:	20009e64 	.word	0x20009e64
    269c:	000161e1 	.word	0x000161e1
    26a0:	00020820 	.word	0x00020820
    26a4:	00000cb9 	.word	0x00000cb9
    26a8:	00020840 	.word	0x00020840
    26ac:	000026dd 	.word	0x000026dd

000026b0 <_ZN21MemoryManagment_Class13_troubleshootEhb>:
 uint8_t	MemoryManagment_Class::GetErrorCode(){
	 
	 // PLease don forget to do the real impelementation
	 return	0;
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
    26b0:	b580      	push	{r7, lr}
    26b2:	b082      	sub	sp, #8
    26b4:	af00      	add	r7, sp, #0
    26b6:	6078      	str	r0, [r7, #4]
    26b8:	460b      	mov	r3, r1
    26ba:	70fb      	strb	r3, [r7, #3]
    26bc:	4613      	mov	r3, r2
    26be:	70bb      	strb	r3, [r7, #2]
	  diagnostics.troubleshoot(_code, printoverride);
    26c0:	78ba      	ldrb	r2, [r7, #2]
    26c2:	78fb      	ldrb	r3, [r7, #3]
    26c4:	4619      	mov	r1, r3
    26c6:	4803      	ldr	r0, [pc, #12]	; (26d4 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x24>)
    26c8:	4b03      	ldr	r3, [pc, #12]	; (26d8 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x28>)
    26ca:	4798      	blx	r3
  }
    26cc:	bf00      	nop
    26ce:	3708      	adds	r7, #8
    26d0:	46bd      	mov	sp, r7
    26d2:	bd80      	pop	{r7, pc}
    26d4:	200091e0 	.word	0x200091e0
    26d8:	000148d1 	.word	0x000148d1

000026dc <_ZN21MemoryManagment_Class9SetChipIDEm>:

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
    26dc:	b580      	push	{r7, lr}
    26de:	b082      	sub	sp, #8
    26e0:	af00      	add	r7, sp, #0
    26e2:	6078      	str	r0, [r7, #4]
    26e4:	6039      	str	r1, [r7, #0]
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	4618      	mov	r0, r3
    26ea:	4b12      	ldr	r3, [pc, #72]	; (2734 <_ZN21MemoryManagment_Class9SetChipIDEm+0x58>)
    26ec:	4798      	blx	r3
    26ee:	4602      	mov	r2, r0
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	f8c3 2968 	str.w	r2, [r3, #2408]	; 0x968


	 if (!logArea.capacity) {
    26f6:	687b      	ldr	r3, [r7, #4]
    26f8:	f8d3 3968 	ldr.w	r3, [r3, #2408]	; 0x968
    26fc:	2b00      	cmp	r3, #0
    26fe:	d113      	bne.n	2728 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4c>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
    2700:	683b      	ldr	r3, [r7, #0]
    2702:	2b00      	cmp	r3, #0
    2704:	d009      	beq.n	271a <_ZN21MemoryManagment_Class9SetChipIDEm+0x3e>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
    2706:	687b      	ldr	r3, [r7, #4]
    2708:	683a      	ldr	r2, [r7, #0]
    270a:	f8c3 2968 	str.w	r2, [r3, #2408]	; 0x968
			 logArea.supported = false;
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	2200      	movs	r2, #0
    2712:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
			 return true;
    2716:	2301      	movs	r3, #1
    2718:	e007      	b.n	272a <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
    271a:	2200      	movs	r2, #0
    271c:	2103      	movs	r1, #3
    271e:	6878      	ldr	r0, [r7, #4]
    2720:	4b05      	ldr	r3, [pc, #20]	; (2738 <_ZN21MemoryManagment_Class9SetChipIDEm+0x5c>)
    2722:	4798      	blx	r3
			 return false;
    2724:	2300      	movs	r3, #0
    2726:	e000      	b.n	272a <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

	 }
	 return true;
    2728:	2301      	movs	r3, #1
 }
    272a:	4618      	mov	r0, r3
    272c:	3708      	adds	r7, #8
    272e:	46bd      	mov	sp, r7
    2730:	bd80      	pop	{r7, pc}
    2732:	bf00      	nop
    2734:	00016d05 	.word	0x00016d05
    2738:	000026b1 	.word	0x000026b1

0000273c <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState>:
	handlerAppState=PTR_HVAC_STATE(&as);
	uint32_t	add=(uint32_t )(&flashMap->hvacStateSector.hvacDefaultState);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
	return	r;
}
 uint32_t	MemoryManagment_Class::WriteValidApplicationState(HVACState& hs ){
    273c:	b580      	push	{r7, lr}
    273e:	b084      	sub	sp, #16
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]
    2744:	6039      	str	r1, [r7, #0]
	uint32_t w=  WriteCurrentState(hs);
    2746:	687b      	ldr	r3, [r7, #4]
    2748:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    274c:	6839      	ldr	r1, [r7, #0]
    274e:	4618      	mov	r0, r3
    2750:	4b11      	ldr	r3, [pc, #68]	; (2798 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x5c>)
    2752:	4798      	blx	r3
    2754:	60f8      	str	r0, [r7, #12]
	crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    275c:	2268      	movs	r2, #104	; 0x68
    275e:	6839      	ldr	r1, [r7, #0]
    2760:	4618      	mov	r0, r3
    2762:	4b0e      	ldr	r3, [pc, #56]	; (279c <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x60>)
    2764:	4798      	blx	r3
    2766:	4602      	mov	r2, r0
    2768:	687b      	ldr	r3, [r7, #4]
    276a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    276e:	332c      	adds	r3, #44	; 0x2c
    2770:	601a      	str	r2, [r3, #0]
	w=WriteCRCAppState(crc32);
    2772:	687b      	ldr	r3, [r7, #4]
    2774:	f503 62d0 	add.w	r2, r3, #1664	; 0x680
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    277e:	332c      	adds	r3, #44	; 0x2c
    2780:	681b      	ldr	r3, [r3, #0]
    2782:	4619      	mov	r1, r3
    2784:	4610      	mov	r0, r2
    2786:	4b06      	ldr	r3, [pc, #24]	; (27a0 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x64>)
    2788:	4798      	blx	r3
    278a:	60f8      	str	r0, [r7, #12]
	return	w;
    278c:	68fb      	ldr	r3, [r7, #12]
 }
    278e:	4618      	mov	r0, r3
    2790:	3710      	adds	r7, #16
    2792:	46bd      	mov	sp, r7
    2794:	bd80      	pop	{r7, pc}
    2796:	bf00      	nop
    2798:	00002be1 	.word	0x00002be1
    279c:	00001551 	.word	0x00001551
    27a0:	00002c51 	.word	0x00002c51

000027a4 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState>:
 uint32_t	MemoryManagment_Class::WriteValidConfigurationData(ConfigurationData& cd){
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
 };
 uint32_t	MemoryManagment_Class::SaveCurrentState(HVACState& hs){
    27a4:	b590      	push	{r4, r7, lr}
    27a6:	b087      	sub	sp, #28
    27a8:	af00      	add	r7, sp, #0
    27aa:	6078      	str	r0, [r7, #4]
    27ac:	6039      	str	r1, [r7, #0]
	 uint32_t	add=(uint32_t)&flashMap->hvacStateSector;
    27ae:	4b18      	ldr	r3, [pc, #96]	; (2810 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x6c>)
    27b0:	681b      	ldr	r3, [r3, #0]
    27b2:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    27b6:	332c      	adds	r3, #44	; 0x2c
    27b8:	617b      	str	r3, [r7, #20]
	 HVACStateSector	*hss=(HVACStateSector*)&flashBuffer[0];
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    27c0:	3330      	adds	r3, #48	; 0x30
    27c2:	681b      	ldr	r3, [r3, #0]
    27c4:	613b      	str	r3, [r7, #16]
	 uint32_t r=qspiFlash.ReadAddress((uint8_t*)hss,add,QSPI_ERBLK);
    27c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    27ca:	697a      	ldr	r2, [r7, #20]
    27cc:	6939      	ldr	r1, [r7, #16]
    27ce:	4811      	ldr	r0, [pc, #68]	; (2814 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    27d0:	4c11      	ldr	r4, [pc, #68]	; (2818 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x74>)
    27d2:	47a0      	blx	r4
    27d4:	60f8      	str	r0, [r7, #12]
	 if (r==0)
    27d6:	68fb      	ldr	r3, [r7, #12]
    27d8:	2b00      	cmp	r3, #0
    27da:	d114      	bne.n	2806 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x62>
	 {
		 memcpy((void*)&(hss->hvacState),(void*)&hs,sizeof(HVACState));
    27dc:	693b      	ldr	r3, [r7, #16]
    27de:	3370      	adds	r3, #112	; 0x70
    27e0:	2268      	movs	r2, #104	; 0x68
    27e2:	6839      	ldr	r1, [r7, #0]
    27e4:	4618      	mov	r0, r3
    27e6:	4b0d      	ldr	r3, [pc, #52]	; (281c <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x78>)
    27e8:	4798      	blx	r3
		 qspiFlash.Erase(add);
    27ea:	6979      	ldr	r1, [r7, #20]
    27ec:	4809      	ldr	r0, [pc, #36]	; (2814 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    27ee:	4b0c      	ldr	r3, [pc, #48]	; (2820 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x7c>)
    27f0:	4798      	blx	r3
		 uint32_t w=qspiFlash.WriteAddress((uint8_t*)hss,add,QSPI_ERBLK);
    27f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    27f6:	697a      	ldr	r2, [r7, #20]
    27f8:	6939      	ldr	r1, [r7, #16]
    27fa:	4806      	ldr	r0, [pc, #24]	; (2814 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    27fc:	4c09      	ldr	r4, [pc, #36]	; (2824 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x80>)
    27fe:	47a0      	blx	r4
    2800:	60b8      	str	r0, [r7, #8]
		  return	w;
    2802:	68bb      	ldr	r3, [r7, #8]
    2804:	e000      	b.n	2808 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x64>
	 }

	 return	r;
    2806:	68fb      	ldr	r3, [r7, #12]
 }
    2808:	4618      	mov	r0, r3
    280a:	371c      	adds	r7, #28
    280c:	46bd      	mov	sp, r7
    280e:	bd90      	pop	{r4, r7, pc}
    2810:	2000813c 	.word	0x2000813c
    2814:	20009eac 	.word	0x20009eac
    2818:	00016c55 	.word	0x00016c55
    281c:	0001c4a5 	.word	0x0001c4a5
    2820:	00016bf1 	.word	0x00016bf1
    2824:	00016c21 	.word	0x00016c21

00002828 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryManagment_Class::SaveApplicationState(HVACState& hs ){
    2828:	b580      	push	{r7, lr}
    282a:	b084      	sub	sp, #16
    282c:	af00      	add	r7, sp, #0
    282e:	6078      	str	r0, [r7, #4]
    2830:	6039      	str	r1, [r7, #0]
	  uint32_t w=  SaveCurrentState(hs);
    2832:	6839      	ldr	r1, [r7, #0]
    2834:	6878      	ldr	r0, [r7, #4]
    2836:	4b10      	ldr	r3, [pc, #64]	; (2878 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x50>)
    2838:	4798      	blx	r3
    283a:	60f8      	str	r0, [r7, #12]
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    2842:	2268      	movs	r2, #104	; 0x68
    2844:	6839      	ldr	r1, [r7, #0]
    2846:	4618      	mov	r0, r3
    2848:	4b0c      	ldr	r3, [pc, #48]	; (287c <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x54>)
    284a:	4798      	blx	r3
    284c:	4602      	mov	r2, r0
    284e:	687b      	ldr	r3, [r7, #4]
    2850:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2854:	332c      	adds	r3, #44	; 0x2c
    2856:	601a      	str	r2, [r3, #0]
	  w=SaveCRCAppState(crc32);
    2858:	687b      	ldr	r3, [r7, #4]
    285a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    285e:	332c      	adds	r3, #44	; 0x2c
    2860:	681b      	ldr	r3, [r3, #0]
    2862:	4619      	mov	r1, r3
    2864:	6878      	ldr	r0, [r7, #4]
    2866:	4b06      	ldr	r3, [pc, #24]	; (2880 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x58>)
    2868:	4798      	blx	r3
    286a:	60f8      	str	r0, [r7, #12]
	  return	w;
    286c:	68fb      	ldr	r3, [r7, #12]
  }
    286e:	4618      	mov	r0, r3
    2870:	3710      	adds	r7, #16
    2872:	46bd      	mov	sp, r7
    2874:	bd80      	pop	{r7, pc}
    2876:	bf00      	nop
    2878:	000027a5 	.word	0x000027a5
    287c:	00001551 	.word	0x00001551
    2880:	00002885 	.word	0x00002885

00002884 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm>:
uint32_t	MemoryManagment_Class::SaveCRCAppState(uint32_t crc){
    2884:	b580      	push	{r7, lr}
    2886:	b082      	sub	sp, #8
    2888:	af00      	add	r7, sp, #0
    288a:	6078      	str	r0, [r7, #4]
    288c:	6039      	str	r1, [r7, #0]
// 	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
// 	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
    288e:	687b      	ldr	r3, [r7, #4]
    2890:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    2894:	6839      	ldr	r1, [r7, #0]
    2896:	4618      	mov	r0, r3
    2898:	4b03      	ldr	r3, [pc, #12]	; (28a8 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm+0x24>)
    289a:	4798      	blx	r3
    289c:	4603      	mov	r3, r0
}
    289e:	4618      	mov	r0, r3
    28a0:	3708      	adds	r7, #8
    28a2:	46bd      	mov	sp, r7
    28a4:	bd80      	pop	{r7, pc}
    28a6:	bf00      	nop
    28a8:	00002c51 	.word	0x00002c51

000028ac <_ZlsIA29_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    28ac:	b580      	push	{r7, lr}
    28ae:	b082      	sub	sp, #8
    28b0:	af00      	add	r7, sp, #0
    28b2:	6078      	str	r0, [r7, #4]
    28b4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    28b6:	6839      	ldr	r1, [r7, #0]
    28b8:	6878      	ldr	r0, [r7, #4]
    28ba:	4b03      	ldr	r3, [pc, #12]	; (28c8 <_ZlsIA29_cER5PrintS2_RKT_+0x1c>)
    28bc:	4798      	blx	r3
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	4618      	mov	r0, r3
    28c2:	3708      	adds	r7, #8
    28c4:	46bd      	mov	sp, r7
    28c6:	bd80      	pop	{r7, pc}
    28c8:	00018489 	.word	0x00018489

000028cc <_Z41__static_initialization_and_destruction_0ii>:
 
    28cc:	b580      	push	{r7, lr}
    28ce:	b082      	sub	sp, #8
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
    28d4:	6039      	str	r1, [r7, #0]
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	2b01      	cmp	r3, #1
    28da:	d10c      	bne.n	28f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    28dc:	683b      	ldr	r3, [r7, #0]
    28de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    28e2:	4293      	cmp	r3, r2
    28e4:	d107      	bne.n	28f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    28e6:	4806      	ldr	r0, [pc, #24]	; (2900 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    28e8:	4b06      	ldr	r3, [pc, #24]	; (2904 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    28ea:	4798      	blx	r3
    28ec:	4a06      	ldr	r2, [pc, #24]	; (2908 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    28ee:	4907      	ldr	r1, [pc, #28]	; (290c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    28f0:	4803      	ldr	r0, [pc, #12]	; (2900 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    28f2:	4b07      	ldr	r3, [pc, #28]	; (2910 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    28f4:	4798      	blx	r3
    28f6:	bf00      	nop
    28f8:	3708      	adds	r7, #8
    28fa:	46bd      	mov	sp, r7
    28fc:	bd80      	pop	{r7, pc}
    28fe:	bf00      	nop
    2900:	20002708 	.word	0x20002708
    2904:	00002519 	.word	0x00002519
    2908:	20000000 	.word	0x20000000
    290c:	000025a9 	.word	0x000025a9
    2910:	00019d41 	.word	0x00019d41

00002914 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
    2914:	b580      	push	{r7, lr}
    2916:	af00      	add	r7, sp, #0
    2918:	f64f 71ff 	movw	r1, #65535	; 0xffff
    291c:	2001      	movs	r0, #1
    291e:	4b01      	ldr	r3, [pc, #4]	; (2924 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
    2920:	4798      	blx	r3
    2922:	bd80      	pop	{r7, pc}
    2924:	000028cd 	.word	0x000028cd

00002928 <_ZN18FlashHandler_ClassC1Ev>:


MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
    2928:	b480      	push	{r7}
    292a:	b083      	sub	sp, #12
    292c:	af00      	add	r7, sp, #0
    292e:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	4618      	mov	r0, r3
    2934:	370c      	adds	r7, #12
    2936:	46bd      	mov	sp, r7
    2938:	bc80      	pop	{r7}
    293a:	4770      	bx	lr

0000293c <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
    293c:	b480      	push	{r7}
    293e:	b083      	sub	sp, #12
    2940:	af00      	add	r7, sp, #0
    2942:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	4618      	mov	r0, r3
    2948:	370c      	adds	r7, #12
    294a:	46bd      	mov	sp, r7
    294c:	bc80      	pop	{r7}
    294e:	4770      	bx	lr

00002950 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData>:

uint32_t	FlashHandler_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
    2950:	b580      	push	{r7, lr}
    2952:	b084      	sub	sp, #16
    2954:	af00      	add	r7, sp, #0
    2956:	6078      	str	r0, [r7, #4]
    2958:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    295a:	4b08      	ldr	r3, [pc, #32]	; (297c <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x2c>)
    295c:	681b      	ldr	r3, [r3, #0]
    295e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    2962:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    2964:	68fa      	ldr	r2, [r7, #12]
    2966:	6839      	ldr	r1, [r7, #0]
    2968:	6878      	ldr	r0, [r7, #4]
    296a:	4b05      	ldr	r3, [pc, #20]	; (2980 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x30>)
    296c:	4798      	blx	r3
    296e:	60b8      	str	r0, [r7, #8]
	return	r;
    2970:	68bb      	ldr	r3, [r7, #8]
}
    2972:	4618      	mov	r0, r3
    2974:	3710      	adds	r7, #16
    2976:	46bd      	mov	sp, r7
    2978:	bd80      	pop	{r7, pc}
    297a:	bf00      	nop
    297c:	2000813c 	.word	0x2000813c
    2980:	000029ed 	.word	0x000029ed

00002984 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadDefaultParameters(UserParameters& up){
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
	uint32_t	r=ReadParameters(up,add);
	return	r;
}
uint32_t	FlashHandler_Class::ReadLastConfigurationData(ConfigurationData& cd){
    2984:	b580      	push	{r7, lr}
    2986:	b084      	sub	sp, #16
    2988:	af00      	add	r7, sp, #0
    298a:	6078      	str	r0, [r7, #4]
    298c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
    298e:	4b08      	ldr	r3, [pc, #32]	; (29b0 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x2c>)
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
    2996:	332c      	adds	r3, #44	; 0x2c
    2998:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    299a:	68fa      	ldr	r2, [r7, #12]
    299c:	6839      	ldr	r1, [r7, #0]
    299e:	6878      	ldr	r0, [r7, #4]
    29a0:	4b04      	ldr	r3, [pc, #16]	; (29b4 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x30>)
    29a2:	4798      	blx	r3
    29a4:	60b8      	str	r0, [r7, #8]
	return	r;
    29a6:	68bb      	ldr	r3, [r7, #8]
}
    29a8:	4618      	mov	r0, r3
    29aa:	3710      	adds	r7, #16
    29ac:	46bd      	mov	sp, r7
    29ae:	bd80      	pop	{r7, pc}
    29b0:	2000813c 	.word	0x2000813c
    29b4:	000029ed 	.word	0x000029ed

000029b8 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
    29b8:	b580      	push	{r7, lr}
    29ba:	b084      	sub	sp, #16
    29bc:	af00      	add	r7, sp, #0
    29be:	6078      	str	r0, [r7, #4]
    29c0:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.updatedConfiguration;
    29c2:	4b08      	ldr	r3, [pc, #32]	; (29e4 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x2c>)
    29c4:	681b      	ldr	r3, [r3, #0]
    29c6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
    29ca:	3304      	adds	r3, #4
    29cc:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    29ce:	68fa      	ldr	r2, [r7, #12]
    29d0:	6839      	ldr	r1, [r7, #0]
    29d2:	6878      	ldr	r0, [r7, #4]
    29d4:	4b04      	ldr	r3, [pc, #16]	; (29e8 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x30>)
    29d6:	4798      	blx	r3
    29d8:	60b8      	str	r0, [r7, #8]
	return	r;
    29da:	68bb      	ldr	r3, [r7, #8]
}
    29dc:	4618      	mov	r0, r3
    29de:	3710      	adds	r7, #16
    29e0:	46bd      	mov	sp, r7
    29e2:	bd80      	pop	{r7, pc}
    29e4:	2000813c 	.word	0x2000813c
    29e8:	000029ed 	.word	0x000029ed

000029ec <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam>:

uint32_t	FlashHandler_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
    29ec:	b590      	push	{r4, r7, lr}
    29ee:	b087      	sub	sp, #28
    29f0:	af00      	add	r7, sp, #0
    29f2:	60f8      	str	r0, [r7, #12]
    29f4:	60b9      	str	r1, [r7, #8]
    29f6:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    29f8:	68ba      	ldr	r2, [r7, #8]
    29fa:	68fb      	ldr	r3, [r7, #12]
    29fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    2a06:	23ac      	movs	r3, #172	; 0xac
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	4804      	ldr	r0, [pc, #16]	; (2a1c <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x30>)
    2a0c:	4c04      	ldr	r4, [pc, #16]	; (2a20 <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x34>)
    2a0e:	47a0      	blx	r4
    2a10:	6178      	str	r0, [r7, #20]
	return	r;
    2a12:	697b      	ldr	r3, [r7, #20]
}
    2a14:	4618      	mov	r0, r3
    2a16:	371c      	adds	r7, #28
    2a18:	46bd      	mov	sp, r7
    2a1a:	bd90      	pop	{r4, r7, pc}
    2a1c:	20009eac 	.word	0x20009eac
    2a20:	00016c55 	.word	0x00016c55

00002a24 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
	return	r;
}
uint32_t	FlashHandler_Class::ReadCRCConfigurationData(void){
    2a24:	b590      	push	{r4, r7, lr}
    2a26:	b087      	sub	sp, #28
    2a28:	af00      	add	r7, sp, #0
    2a2a:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    2a2c:	4b09      	ldr	r3, [pc, #36]	; (2a54 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x30>)
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    2a34:	3330      	adds	r3, #48	; 0x30
    2a36:	617b      	str	r3, [r7, #20]
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2a38:	f107 010c 	add.w	r1, r7, #12
    2a3c:	2304      	movs	r3, #4
    2a3e:	697a      	ldr	r2, [r7, #20]
    2a40:	4805      	ldr	r0, [pc, #20]	; (2a58 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x34>)
    2a42:	4c06      	ldr	r4, [pc, #24]	; (2a5c <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x38>)
    2a44:	47a0      	blx	r4
    2a46:	6138      	str	r0, [r7, #16]
	return	crc;
    2a48:	68fb      	ldr	r3, [r7, #12]
}
    2a4a:	4618      	mov	r0, r3
    2a4c:	371c      	adds	r7, #28
    2a4e:	46bd      	mov	sp, r7
    2a50:	bd90      	pop	{r4, r7, pc}
    2a52:	bf00      	nop
    2a54:	2000813c 	.word	0x2000813c
    2a58:	20009eac 	.word	0x20009eac
    2a5c:	00016c55 	.word	0x00016c55

00002a60 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
    2a60:	b590      	push	{r4, r7, lr}
    2a62:	b087      	sub	sp, #28
    2a64:	af00      	add	r7, sp, #0
    2a66:	60f8      	str	r0, [r7, #12]
    2a68:	60b9      	str	r1, [r7, #8]
    2a6a:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    2a6c:	68ba      	ldr	r2, [r7, #8]
    2a6e:	68fb      	ldr	r3, [r7, #12]
    2a70:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    2a74:	68fb      	ldr	r3, [r7, #12]
    2a76:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    2a7a:	23ac      	movs	r3, #172	; 0xac
    2a7c:	687a      	ldr	r2, [r7, #4]
    2a7e:	4804      	ldr	r0, [pc, #16]	; (2a90 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x30>)
    2a80:	4c04      	ldr	r4, [pc, #16]	; (2a94 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x34>)
    2a82:	47a0      	blx	r4
    2a84:	6178      	str	r0, [r7, #20]
	return	w;
    2a86:	697b      	ldr	r3, [r7, #20]
}
    2a88:	4618      	mov	r0, r3
    2a8a:	371c      	adds	r7, #28
    2a8c:	46bd      	mov	sp, r7
    2a8e:	bd90      	pop	{r4, r7, pc}
    2a90:	20009eac 	.word	0x20009eac
    2a94:	00016c21 	.word	0x00016c21

00002a98 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    2a98:	b590      	push	{r4, r7, lr}
    2a9a:	b087      	sub	sp, #28
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	60f8      	str	r0, [r7, #12]
    2aa0:	60b9      	str	r1, [r7, #8]
    2aa2:	607a      	str	r2, [r7, #4]

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    2aa4:	2301      	movs	r3, #1
    2aa6:	687a      	ldr	r2, [r7, #4]
    2aa8:	68b9      	ldr	r1, [r7, #8]
    2aaa:	4804      	ldr	r0, [pc, #16]	; (2abc <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x24>)
    2aac:	4c04      	ldr	r4, [pc, #16]	; (2ac0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x28>)
    2aae:	47a0      	blx	r4
    2ab0:	6178      	str	r0, [r7, #20]
	return	w;
    2ab2:	697b      	ldr	r3, [r7, #20]
}
    2ab4:	4618      	mov	r0, r3
    2ab6:	371c      	adds	r7, #28
    2ab8:	46bd      	mov	sp, r7
    2aba:	bd90      	pop	{r4, r7, pc}
    2abc:	20009eac 	.word	0x20009eac
    2ac0:	00016c21 	.word	0x00016c21

00002ac4 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem>:
uint32_t	FlashHandler_Class::WriteApplicationState(HVACState& hs,uint32_t add){
    2ac4:	b590      	push	{r4, r7, lr}
    2ac6:	b087      	sub	sp, #28
    2ac8:	af00      	add	r7, sp, #0
    2aca:	60f8      	str	r0, [r7, #12]
    2acc:	60b9      	str	r1, [r7, #8]
    2ace:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    2ad0:	68ba      	ldr	r2, [r7, #8]
    2ad2:	68fb      	ldr	r3, [r7, #12]
    2ad4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
    2ad8:	68fb      	ldr	r3, [r7, #12]
    2ada:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    2ade:	2368      	movs	r3, #104	; 0x68
    2ae0:	687a      	ldr	r2, [r7, #4]
    2ae2:	4804      	ldr	r0, [pc, #16]	; (2af4 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x30>)
    2ae4:	4c04      	ldr	r4, [pc, #16]	; (2af8 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x34>)
    2ae6:	47a0      	blx	r4
    2ae8:	6178      	str	r0, [r7, #20]
	return	w;
    2aea:	697b      	ldr	r3, [r7, #20]
}
    2aec:	4618      	mov	r0, r3
    2aee:	371c      	adds	r7, #28
    2af0:	46bd      	mov	sp, r7
    2af2:	bd90      	pop	{r4, r7, pc}
    2af4:	20009eac 	.word	0x20009eac
    2af8:	00016c21 	.word	0x00016c21

00002afc <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv>:
uint32_t	FlashHandler_Class::WriteDefaultConfiguration(void){
    2afc:	b580      	push	{r7, lr}
    2afe:	b0b0      	sub	sp, #192	; 0xc0
    2b00:	af00      	add	r7, sp, #0
    2b02:	6078      	str	r0, [r7, #4]
	ConfigurationData cd=factoryDefaultsConfiguration;
    2b04:	4a0e      	ldr	r2, [pc, #56]	; (2b40 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x44>)
    2b06:	f107 030c 	add.w	r3, r7, #12
    2b0a:	4611      	mov	r1, r2
    2b0c:	22ac      	movs	r2, #172	; 0xac
    2b0e:	4618      	mov	r0, r3
    2b10:	4b0c      	ldr	r3, [pc, #48]	; (2b44 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x48>)
    2b12:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    2b14:	4b0c      	ldr	r3, [pc, #48]	; (2b48 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x4c>)
    2b16:	681b      	ldr	r3, [r3, #0]
    2b18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    2b1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t	w=WriteConfigurationData(cd,add);
    2b20:	f107 030c 	add.w	r3, r7, #12
    2b24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    2b28:	4619      	mov	r1, r3
    2b2a:	6878      	ldr	r0, [r7, #4]
    2b2c:	4b07      	ldr	r3, [pc, #28]	; (2b4c <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x50>)
    2b2e:	4798      	blx	r3
    2b30:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	return	w;
    2b34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
}
    2b38:	4618      	mov	r0, r3
    2b3a:	37c0      	adds	r7, #192	; 0xc0
    2b3c:	46bd      	mov	sp, r7
    2b3e:	bd80      	pop	{r7, pc}
    2b40:	00020290 	.word	0x00020290
    2b44:	0001c4a5 	.word	0x0001c4a5
    2b48:	2000813c 	.word	0x2000813c
    2b4c:	00002a61 	.word	0x00002a61

00002b50 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    2b50:	b580      	push	{r7, lr}
    2b52:	b086      	sub	sp, #24
    2b54:	af00      	add	r7, sp, #0
    2b56:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    2b58:	4b0a      	ldr	r3, [pc, #40]	; (2b84 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x34>)
    2b5a:	781b      	ldrb	r3, [r3, #0]
    2b5c:	733b      	strb	r3, [r7, #12]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    2b5e:	4b0a      	ldr	r3, [pc, #40]	; (2b88 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x38>)
    2b60:	681b      	ldr	r3, [r3, #0]
    2b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2b66:	3301      	adds	r3, #1
    2b68:	617b      	str	r3, [r7, #20]
	uint32_t	w=WriteParameters(up,add);
    2b6a:	f107 030c 	add.w	r3, r7, #12
    2b6e:	697a      	ldr	r2, [r7, #20]
    2b70:	4619      	mov	r1, r3
    2b72:	6878      	ldr	r0, [r7, #4]
    2b74:	4b05      	ldr	r3, [pc, #20]	; (2b8c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x3c>)
    2b76:	4798      	blx	r3
    2b78:	6138      	str	r0, [r7, #16]
	return	w;
    2b7a:	693b      	ldr	r3, [r7, #16]
}
    2b7c:	4618      	mov	r0, r3
    2b7e:	3718      	adds	r7, #24
    2b80:	46bd      	mov	sp, r7
    2b82:	bd80      	pop	{r7, pc}
    2b84:	00021ff0 	.word	0x00021ff0
    2b88:	2000813c 	.word	0x2000813c
    2b8c:	00002a99 	.word	0x00002a99

00002b90 <_ZN18FlashHandler_Class17WriteDefaultStateEv>:
uint32_t	FlashHandler_Class::WriteDefaultState(void){
    2b90:	b580      	push	{r7, lr}
    2b92:	b09e      	sub	sp, #120	; 0x78
    2b94:	af00      	add	r7, sp, #0
    2b96:	6078      	str	r0, [r7, #4]
	HVACState hs=defaultHVACState;
    2b98:	4a0d      	ldr	r2, [pc, #52]	; (2bd0 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x40>)
    2b9a:	f107 0308 	add.w	r3, r7, #8
    2b9e:	4611      	mov	r1, r2
    2ba0:	2268      	movs	r2, #104	; 0x68
    2ba2:	4618      	mov	r0, r3
    2ba4:	4b0b      	ldr	r3, [pc, #44]	; (2bd4 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x44>)
    2ba6:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacDefaultState;
    2ba8:	4b0b      	ldr	r3, [pc, #44]	; (2bd8 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x48>)
    2baa:	681b      	ldr	r3, [r3, #0]
    2bac:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    2bb0:	3334      	adds	r3, #52	; 0x34
    2bb2:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t	w=WriteApplicationState(hs,add);
    2bb4:	f107 0308 	add.w	r3, r7, #8
    2bb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    2bba:	4619      	mov	r1, r3
    2bbc:	6878      	ldr	r0, [r7, #4]
    2bbe:	4b07      	ldr	r3, [pc, #28]	; (2bdc <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x4c>)
    2bc0:	4798      	blx	r3
    2bc2:	6738      	str	r0, [r7, #112]	; 0x70
	return	w;
    2bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
    2bc6:	4618      	mov	r0, r3
    2bc8:	3778      	adds	r7, #120	; 0x78
    2bca:	46bd      	mov	sp, r7
    2bcc:	bd80      	pop	{r7, pc}
    2bce:	bf00      	nop
    2bd0:	00020620 	.word	0x00020620
    2bd4:	0001c4a5 	.word	0x0001c4a5
    2bd8:	2000813c 	.word	0x2000813c
    2bdc:	00002ac5 	.word	0x00002ac5

00002be0 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState>:

uint32_t	FlashHandler_Class::WriteCurrentState(HVACState& hs){
    2be0:	b580      	push	{r7, lr}
    2be2:	b084      	sub	sp, #16
    2be4:	af00      	add	r7, sp, #0
    2be6:	6078      	str	r0, [r7, #4]
    2be8:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacState;
    2bea:	4b08      	ldr	r3, [pc, #32]	; (2c0c <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x2c>)
    2bec:	681b      	ldr	r3, [r3, #0]
    2bee:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    2bf2:	331c      	adds	r3, #28
    2bf4:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hs,add);
    2bf6:	68fa      	ldr	r2, [r7, #12]
    2bf8:	6839      	ldr	r1, [r7, #0]
    2bfa:	6878      	ldr	r0, [r7, #4]
    2bfc:	4b04      	ldr	r3, [pc, #16]	; (2c10 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x30>)
    2bfe:	4798      	blx	r3
    2c00:	60b8      	str	r0, [r7, #8]
	return	w;
    2c02:	68bb      	ldr	r3, [r7, #8]
}
    2c04:	4618      	mov	r0, r3
    2c06:	3710      	adds	r7, #16
    2c08:	46bd      	mov	sp, r7
    2c0a:	bd80      	pop	{r7, pc}
    2c0c:	2000813c 	.word	0x2000813c
    2c10:	00002ac5 	.word	0x00002ac5

00002c14 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm>:

uint32_t	FlashHandler_Class::WriteCRCConfigurationData(uint32_t crc){
    2c14:	b590      	push	{r4, r7, lr}
    2c16:	b085      	sub	sp, #20
    2c18:	af00      	add	r7, sp, #0
    2c1a:	6078      	str	r0, [r7, #4]
    2c1c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    2c1e:	4b09      	ldr	r3, [pc, #36]	; (2c44 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x30>)
    2c20:	681b      	ldr	r3, [r3, #0]
    2c22:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    2c26:	3330      	adds	r3, #48	; 0x30
    2c28:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2c2a:	4639      	mov	r1, r7
    2c2c:	2304      	movs	r3, #4
    2c2e:	68fa      	ldr	r2, [r7, #12]
    2c30:	4805      	ldr	r0, [pc, #20]	; (2c48 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x34>)
    2c32:	4c06      	ldr	r4, [pc, #24]	; (2c4c <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x38>)
    2c34:	47a0      	blx	r4
    2c36:	60b8      	str	r0, [r7, #8]
	return	w;
    2c38:	68bb      	ldr	r3, [r7, #8]
}
    2c3a:	4618      	mov	r0, r3
    2c3c:	3714      	adds	r7, #20
    2c3e:	46bd      	mov	sp, r7
    2c40:	bd90      	pop	{r4, r7, pc}
    2c42:	bf00      	nop
    2c44:	2000813c 	.word	0x2000813c
    2c48:	20009eac 	.word	0x20009eac
    2c4c:	00016c21 	.word	0x00016c21

00002c50 <_ZN18FlashHandler_Class16WriteCRCAppStateEm>:
uint32_t	FlashHandler_Class::WriteCRCAppState(uint32_t crc){
    2c50:	b590      	push	{r4, r7, lr}
    2c52:	b085      	sub	sp, #20
    2c54:	af00      	add	r7, sp, #0
    2c56:	6078      	str	r0, [r7, #4]
    2c58:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    2c5a:	4b09      	ldr	r3, [pc, #36]	; (2c80 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x30>)
    2c5c:	681b      	ldr	r3, [r3, #0]
    2c5e:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    2c62:	3304      	adds	r3, #4
    2c64:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2c66:	4639      	mov	r1, r7
    2c68:	2304      	movs	r3, #4
    2c6a:	68fa      	ldr	r2, [r7, #12]
    2c6c:	4805      	ldr	r0, [pc, #20]	; (2c84 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x34>)
    2c6e:	4c06      	ldr	r4, [pc, #24]	; (2c88 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x38>)
    2c70:	47a0      	blx	r4
    2c72:	60b8      	str	r0, [r7, #8]
	return	w;
    2c74:	68bb      	ldr	r3, [r7, #8]
}
    2c76:	4618      	mov	r0, r3
    2c78:	3714      	adds	r7, #20
    2c7a:	46bd      	mov	sp, r7
    2c7c:	bd90      	pop	{r4, r7, pc}
    2c7e:	bf00      	nop
    2c80:	2000813c 	.word	0x2000813c
    2c84:	20009eac 	.word	0x20009eac
    2c88:	00016c21 	.word	0x00016c21

00002c8c <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState>:
uint32_t	FlashHandler_Class::WriteLastConfigurationData(ConfigurationData& cd){
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::ReadApplicationState(HVACState& as){
    2c8c:	b590      	push	{r4, r7, lr}
    2c8e:	b085      	sub	sp, #20
    2c90:	af00      	add	r7, sp, #0
    2c92:	6078      	str	r0, [r7, #4]
    2c94:	6039      	str	r1, [r7, #0]
	flashAddress=(uint32_t)&flashMap->hvacStateSector.hvacState;
    2c96:	4b0e      	ldr	r3, [pc, #56]	; (2cd0 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x44>)
    2c98:	681b      	ldr	r3, [r3, #0]
    2c9a:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    2c9e:	331c      	adds	r3, #28
    2ca0:	461a      	mov	r2, r3
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	handlerAppState=PTR_HVAC_STATE(&as);
    2ca8:	683a      	ldr	r2, [r7, #0]
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,flashAddress,sizeof(HVACState));
    2cb0:	687b      	ldr	r3, [r7, #4]
    2cb2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2cbc:	2368      	movs	r3, #104	; 0x68
    2cbe:	4805      	ldr	r0, [pc, #20]	; (2cd4 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x48>)
    2cc0:	4c05      	ldr	r4, [pc, #20]	; (2cd8 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x4c>)
    2cc2:	47a0      	blx	r4
    2cc4:	60f8      	str	r0, [r7, #12]
	return	r;
    2cc6:	68fb      	ldr	r3, [r7, #12]
}
    2cc8:	4618      	mov	r0, r3
    2cca:	3714      	adds	r7, #20
    2ccc:	46bd      	mov	sp, r7
    2cce:	bd90      	pop	{r4, r7, pc}
    2cd0:	2000813c 	.word	0x2000813c
    2cd4:	20009eac 	.word	0x20009eac
    2cd8:	00016c55 	.word	0x00016c55

00002cdc <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv>:
uint32_t	FlashHandler_Class::ReadCRCApplicationState(void){
    2cdc:	b590      	push	{r4, r7, lr}
    2cde:	b085      	sub	sp, #20
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	flashAddress=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    2ce4:	4b0b      	ldr	r3, [pc, #44]	; (2d14 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x38>)
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    2cec:	3304      	adds	r3, #4
    2cee:	461a      	mov	r2, r3
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),flashAddress,sizeof(uint32_t));
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2cfc:	f107 0108 	add.w	r1, r7, #8
    2d00:	2304      	movs	r3, #4
    2d02:	4805      	ldr	r0, [pc, #20]	; (2d18 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x3c>)
    2d04:	4c05      	ldr	r4, [pc, #20]	; (2d1c <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x40>)
    2d06:	47a0      	blx	r4
    2d08:	60f8      	str	r0, [r7, #12]
	return	crc;
    2d0a:	68bb      	ldr	r3, [r7, #8]
    2d0c:	4618      	mov	r0, r3
    2d0e:	3714      	adds	r7, #20
    2d10:	46bd      	mov	sp, r7
    2d12:	bd90      	pop	{r4, r7, pc}
    2d14:	2000813c 	.word	0x2000813c
    2d18:	20009eac 	.word	0x20009eac
    2d1c:	00016c55 	.word	0x00016c55

00002d20 <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    2d20:	b480      	push	{r7}
    2d22:	b083      	sub	sp, #12
    2d24:	af00      	add	r7, sp, #0
    2d26:	6078      	str	r0, [r7, #4]
{
	isOK=true;
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	2201      	movs	r2, #1
    2d2c:	701a      	strb	r2, [r3, #0]
} //PBIT_Class
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	4618      	mov	r0, r3
    2d32:	370c      	adds	r7, #12
    2d34:	46bd      	mov	sp, r7
    2d36:	bc80      	pop	{r7}
    2d38:	4770      	bx	lr

00002d3a <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    2d3a:	b480      	push	{r7}
    2d3c:	b083      	sub	sp, #12
    2d3e:	af00      	add	r7, sp, #0
    2d40:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    2d42:	687b      	ldr	r3, [r7, #4]
    2d44:	4618      	mov	r0, r3
    2d46:	370c      	adds	r7, #12
    2d48:	46bd      	mov	sp, r7
    2d4a:	bc80      	pop	{r7}
    2d4c:	4770      	bx	lr

00002d4e <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    2d4e:	b480      	push	{r7}
    2d50:	b083      	sub	sp, #12
    2d52:	af00      	add	r7, sp, #0
    2d54:	6078      	str	r0, [r7, #4]
	return	isOK;
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	b2db      	uxtb	r3, r3
}
    2d5c:	4618      	mov	r0, r3
    2d5e:	370c      	adds	r7, #12
    2d60:	46bd      	mov	sp, r7
    2d62:	bc80      	pop	{r7}
    2d64:	4770      	bx	lr
	...

00002d68 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
    2d68:	b580      	push	{r7, lr}
    2d6a:	b086      	sub	sp, #24
    2d6c:	af00      	add	r7, sp, #0
    2d6e:	6078      	str	r0, [r7, #4]
    2d70:	6039      	str	r1, [r7, #0]
	interfaces.GetStatus(cs);
    2d72:	6839      	ldr	r1, [r7, #0]
    2d74:	4812      	ldr	r0, [pc, #72]	; (2dc0 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x58>)
    2d76:	4b13      	ldr	r3, [pc, #76]	; (2dc4 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x5c>)
    2d78:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
    2d7a:	683b      	ldr	r3, [r7, #0]
    2d7c:	613b      	str	r3, [r7, #16]
	uint32_t	v=*s;
    2d7e:	693b      	ldr	r3, [r7, #16]
    2d80:	681b      	ldr	r3, [r3, #0]
    2d82:	60fb      	str	r3, [r7, #12]

	for (int i=0;i<32;i++)
    2d84:	2300      	movs	r3, #0
    2d86:	617b      	str	r3, [r7, #20]
    2d88:	697b      	ldr	r3, [r7, #20]
    2d8a:	2b1f      	cmp	r3, #31
    2d8c:	dc0d      	bgt.n	2daa <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x42>
	{
		v+=(0x01<<i)&(v);
    2d8e:	2201      	movs	r2, #1
    2d90:	697b      	ldr	r3, [r7, #20]
    2d92:	fa02 f303 	lsl.w	r3, r2, r3
    2d96:	461a      	mov	r2, r3
    2d98:	68fb      	ldr	r3, [r7, #12]
    2d9a:	401a      	ands	r2, r3
    2d9c:	68fb      	ldr	r3, [r7, #12]
    2d9e:	4413      	add	r3, r2
    2da0:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<32;i++)
    2da2:	697b      	ldr	r3, [r7, #20]
    2da4:	3301      	adds	r3, #1
    2da6:	617b      	str	r3, [r7, #20]
    2da8:	e7ee      	b.n	2d88 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x20>
		
	}
	if (v==0)
    2daa:	68fb      	ldr	r3, [r7, #12]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d102      	bne.n	2db6 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x4e>
	{
		isOK=true;
    2db0:	687b      	ldr	r3, [r7, #4]
    2db2:	2201      	movs	r2, #1
    2db4:	701a      	strb	r2, [r3, #0]
	}
	return	v;
    2db6:	68fb      	ldr	r3, [r7, #12]
}
    2db8:	4618      	mov	r0, r3
    2dba:	3718      	adds	r7, #24
    2dbc:	46bd      	mov	sp, r7
    2dbe:	bd80      	pop	{r7, pc}
    2dc0:	20001670 	.word	0x20001670
    2dc4:	0000210d 	.word	0x0000210d

00002dc8 <_Z41__static_initialization_and_destruction_0ii>:
    2dc8:	b580      	push	{r7, lr}
    2dca:	b082      	sub	sp, #8
    2dcc:	af00      	add	r7, sp, #0
    2dce:	6078      	str	r0, [r7, #4]
    2dd0:	6039      	str	r1, [r7, #0]
    2dd2:	687b      	ldr	r3, [r7, #4]
    2dd4:	2b01      	cmp	r3, #1
    2dd6:	d10c      	bne.n	2df2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2dd8:	683b      	ldr	r3, [r7, #0]
    2dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2dde:	4293      	cmp	r3, r2
    2de0:	d107      	bne.n	2df2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2de2:	4806      	ldr	r0, [pc, #24]	; (2dfc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2de4:	4b06      	ldr	r3, [pc, #24]	; (2e00 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2de6:	4798      	blx	r3
    2de8:	4a06      	ldr	r2, [pc, #24]	; (2e04 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2dea:	4907      	ldr	r1, [pc, #28]	; (2e08 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2dec:	4803      	ldr	r0, [pc, #12]	; (2dfc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2dee:	4b07      	ldr	r3, [pc, #28]	; (2e0c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2df0:	4798      	blx	r3
    2df2:	bf00      	nop
    2df4:	3708      	adds	r7, #8
    2df6:	46bd      	mov	sp, r7
    2df8:	bd80      	pop	{r7, pc}
    2dfa:	bf00      	nop
    2dfc:	20008140 	.word	0x20008140
    2e00:	00002d21 	.word	0x00002d21
    2e04:	20000000 	.word	0x20000000
    2e08:	00002d3b 	.word	0x00002d3b
    2e0c:	00019d41 	.word	0x00019d41

00002e10 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    2e10:	b580      	push	{r7, lr}
    2e12:	af00      	add	r7, sp, #0
    2e14:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2e18:	2001      	movs	r0, #1
    2e1a:	4b01      	ldr	r3, [pc, #4]	; (2e20 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    2e1c:	4798      	blx	r3
    2e1e:	bd80      	pop	{r7, pc}
    2e20:	00002dc9 	.word	0x00002dc9

00002e24 <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
    2e24:	b580      	push	{r7, lr}
    2e26:	b082      	sub	sp, #8
    2e28:	af00      	add	r7, sp, #0
    2e2a:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
    2e2c:	687b      	ldr	r3, [r7, #4]
    2e2e:	4618      	mov	r0, r3
    2e30:	4b05      	ldr	r3, [pc, #20]	; (2e48 <_ZN19PersistenceServicesC1Ev+0x24>)
    2e32:	4798      	blx	r3
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	2200      	movs	r2, #0
    2e38:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
	{
	}
    2e3c:	687b      	ldr	r3, [r7, #4]
    2e3e:	4618      	mov	r0, r3
    2e40:	3708      	adds	r7, #8
    2e42:	46bd      	mov	sp, r7
    2e44:	bd80      	pop	{r7, pc}
    2e46:	bf00      	nop
    2e48:	000014cd 	.word	0x000014cd

00002e4c <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:
	
	return result;
	}

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
    2e4c:	b480      	push	{r7}
    2e4e:	b085      	sub	sp, #20
    2e50:	af00      	add	r7, sp, #0
    2e52:	6078      	str	r0, [r7, #4]
    2e54:	6039      	str	r1, [r7, #0]
	bool	result(true);
    2e56:	2301      	movs	r3, #1
    2e58:	73fb      	strb	r3, [r7, #15]

	data.commons.version = kConfigurationDataVersion;
    2e5a:	683b      	ldr	r3, [r7, #0]
    2e5c:	2204      	movs	r2, #4
    2e5e:	605a      	str	r2, [r3, #4]
	data.commons.size = kConfigurationDataSize;
    2e60:	683b      	ldr	r3, [r7, #0]
    2e62:	22ac      	movs	r2, #172	; 0xac
    2e64:	601a      	str	r2, [r3, #0]
	data.commons.partNumber = PARTNUMBER;
    2e66:	683b      	ldr	r3, [r7, #0]
    2e68:	f240 720c 	movw	r2, #1804	; 0x70c
    2e6c:	609a      	str	r2, [r3, #8]



	

	return result;
    2e6e:	7bfb      	ldrb	r3, [r7, #15]
	}
    2e70:	4618      	mov	r0, r3
    2e72:	3714      	adds	r7, #20
    2e74:	46bd      	mov	sp, r7
    2e76:	bc80      	pop	{r7}
    2e78:	4770      	bx	lr
	...

00002e7c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
	value += increment;

	}
	
bool PersistenceServices::IsConfigurationDataUpdated()
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	b086      	sub	sp, #24
    2e80:	af00      	add	r7, sp, #0
    2e82:	6078      	str	r0, [r7, #4]
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
    2e84:	4b17      	ldr	r3, [pc, #92]	; (2ee4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x68>)
    2e86:	685b      	ldr	r3, [r3, #4]
    2e88:	617b      	str	r3, [r7, #20]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
    2e8a:	687b      	ldr	r3, [r7, #4]
    2e8c:	33d4      	adds	r3, #212	; 0xd4
    2e8e:	4619      	mov	r1, r3
    2e90:	4815      	ldr	r0, [pc, #84]	; (2ee8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2e92:	4b16      	ldr	r3, [pc, #88]	; (2eec <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x70>)
    2e94:	4798      	blx	r3
    2e96:	6138      	str	r0, [r7, #16]

	if ((verUp>0))
    2e98:	693b      	ldr	r3, [r7, #16]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d001      	beq.n	2ea2 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x26>
	{
		return false;
    2e9e:	2300      	movs	r3, #0
    2ea0:	e01c      	b.n	2edc <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
	} 
	else
	{
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
    2ea2:	4811      	ldr	r0, [pc, #68]	; (2ee8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2ea4:	4b12      	ldr	r3, [pc, #72]	; (2ef0 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x74>)
    2ea6:	4798      	blx	r3
    2ea8:	60f8      	str	r0, [r7, #12]
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
    2eaa:	6878      	ldr	r0, [r7, #4]
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	33d4      	adds	r3, #212	; 0xd4
    2eb0:	22ac      	movs	r2, #172	; 0xac
    2eb2:	4619      	mov	r1, r3
    2eb4:	4b0f      	ldr	r3, [pc, #60]	; (2ef4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x78>)
    2eb6:	4798      	blx	r3
    2eb8:	60b8      	str	r0, [r7, #8]
		if (refCRC==crc)
    2eba:	68fa      	ldr	r2, [r7, #12]
    2ebc:	68bb      	ldr	r3, [r7, #8]
    2ebe:	429a      	cmp	r2, r3
    2ec0:	d10b      	bne.n	2eda <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x5e>
		{
			verUp=configuration.commons.version;
    2ec2:	687b      	ldr	r3, [r7, #4]
    2ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    2ec8:	613b      	str	r3, [r7, #16]
			return (verUp>ver);
    2eca:	693a      	ldr	r2, [r7, #16]
    2ecc:	697b      	ldr	r3, [r7, #20]
    2ece:	429a      	cmp	r2, r3
    2ed0:	bf8c      	ite	hi
    2ed2:	2301      	movhi	r3, #1
    2ed4:	2300      	movls	r3, #0
    2ed6:	b2db      	uxtb	r3, r3
    2ed8:	e000      	b.n	2edc <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
		} 
		else
		{
			return	false;
    2eda:	2300      	movs	r3, #0
		}
		
	}
	return	false;

}
    2edc:	4618      	mov	r0, r3
    2ede:	3718      	adds	r7, #24
    2ee0:	46bd      	mov	sp, r7
    2ee2:	bd80      	pop	{r7, pc}
    2ee4:	00020290 	.word	0x00020290
    2ee8:	20002d88 	.word	0x20002d88
    2eec:	000029b9 	.word	0x000029b9
    2ef0:	00002a25 	.word	0x00002a25
    2ef4:	00001551 	.word	0x00001551

00002ef8 <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
	

	return result;
	}
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
    2ef8:	b580      	push	{r7, lr}
    2efa:	b084      	sub	sp, #16
    2efc:	af00      	add	r7, sp, #0
    2efe:	6078      	str	r0, [r7, #4]
    2f00:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadCRCApplicationState();
    2f02:	480b      	ldr	r0, [pc, #44]	; (2f30 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x38>)
    2f04:	4b0b      	ldr	r3, [pc, #44]	; (2f34 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x3c>)
    2f06:	4798      	blx	r3
    2f08:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
    2f0a:	687b      	ldr	r3, [r7, #4]
    2f0c:	2268      	movs	r2, #104	; 0x68
    2f0e:	6839      	ldr	r1, [r7, #0]
    2f10:	4618      	mov	r0, r3
    2f12:	4b09      	ldr	r3, [pc, #36]	; (2f38 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x40>)
    2f14:	4798      	blx	r3
    2f16:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    2f18:	68fa      	ldr	r2, [r7, #12]
    2f1a:	68bb      	ldr	r3, [r7, #8]
    2f1c:	429a      	cmp	r2, r3
    2f1e:	bf0c      	ite	eq
    2f20:	2301      	moveq	r3, #1
    2f22:	2300      	movne	r3, #0
    2f24:	b2db      	uxtb	r3, r3
}
    2f26:	4618      	mov	r0, r3
    2f28:	3710      	adds	r7, #16
    2f2a:	46bd      	mov	sp, r7
    2f2c:	bd80      	pop	{r7, pc}
    2f2e:	bf00      	nop
    2f30:	20002d88 	.word	0x20002d88
    2f34:	00002cdd 	.word	0x00002cdd
    2f38:	00001551 	.word	0x00001551

00002f3c <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState>:
bool PersistenceServices::IsFastStateDataValid(HVACState& as)
{
    2f3c:	b580      	push	{r7, lr}
    2f3e:	b084      	sub	sp, #16
    2f40:	af00      	add	r7, sp, #0
    2f42:	6078      	str	r0, [r7, #4]
    2f44:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadFastCRCApplicationState();
    2f46:	480b      	ldr	r0, [pc, #44]	; (2f74 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x38>)
    2f48:	4b0b      	ldr	r3, [pc, #44]	; (2f78 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x3c>)
    2f4a:	4798      	blx	r3
    2f4c:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(HVACState));
    2f4e:	687b      	ldr	r3, [r7, #4]
    2f50:	2268      	movs	r2, #104	; 0x68
    2f52:	6839      	ldr	r1, [r7, #0]
    2f54:	4618      	mov	r0, r3
    2f56:	4b09      	ldr	r3, [pc, #36]	; (2f7c <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x40>)
    2f58:	4798      	blx	r3
    2f5a:	60b8      	str	r0, [r7, #8]
	
	return (refCRC==crc);
    2f5c:	68fa      	ldr	r2, [r7, #12]
    2f5e:	68bb      	ldr	r3, [r7, #8]
    2f60:	429a      	cmp	r2, r3
    2f62:	bf0c      	ite	eq
    2f64:	2301      	moveq	r3, #1
    2f66:	2300      	movne	r3, #0
    2f68:	b2db      	uxtb	r3, r3
}
    2f6a:	4618      	mov	r0, r3
    2f6c:	3710      	adds	r7, #16
    2f6e:	46bd      	mov	sp, r7
    2f70:	bd80      	pop	{r7, pc}
    2f72:	bf00      	nop
    2f74:	20002d78 	.word	0x20002d78
    2f78:	00001a69 	.word	0x00001a69
    2f7c:	00001551 	.word	0x00001551

00002f80 <_ZN9eventDataC1Ei>:
inline eventData::eventData(int v)
    2f80:	b480      	push	{r7}
    2f82:	b083      	sub	sp, #12
    2f84:	af00      	add	r7, sp, #0
    2f86:	6078      	str	r0, [r7, #4]
    2f88:	6039      	str	r1, [r7, #0]
	integerData = v;
    2f8a:	687b      	ldr	r3, [r7, #4]
    2f8c:	683a      	ldr	r2, [r7, #0]
    2f8e:	601a      	str	r2, [r3, #0]
	}
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	4618      	mov	r0, r3
    2f94:	370c      	adds	r7, #12
    2f96:	46bd      	mov	sp, r7
    2f98:	bc80      	pop	{r7}
    2f9a:	4770      	bx	lr

00002f9c <_ZL24HVACOperationTimeElapsedPK10timer_task>:
#include "CBIT_Class.h"
#include "FlapperValve_Class.h"
#include "TemperatureSensors_Class.h"

States_Class*	ptrStatesClass;
static void  HVACOperationTimeElapsed(const struct timer_task *const timer_task){
    2f9c:	b480      	push	{r7}
    2f9e:	b083      	sub	sp, #12
    2fa0:	af00      	add	r7, sp, #0
    2fa2:	6078      	str	r0, [r7, #4]
	ptrStatesClass->timeElapsed=true;
    2fa4:	4b04      	ldr	r3, [pc, #16]	; (2fb8 <_ZL24HVACOperationTimeElapsedPK10timer_task+0x1c>)
    2fa6:	681b      	ldr	r3, [r3, #0]
    2fa8:	2201      	movs	r2, #1
    2faa:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
}
    2fae:	bf00      	nop
    2fb0:	370c      	adds	r7, #12
    2fb2:	46bd      	mov	sp, r7
    2fb4:	bc80      	pop	{r7}
    2fb6:	4770      	bx	lr
    2fb8:	2000816c 	.word	0x2000816c

00002fbc <_ZL14HVACTimerTicksPK10timer_task>:
static void HVACTimerTicks(const struct timer_task *const timer_task)
{
    2fbc:	b480      	push	{r7}
    2fbe:	b083      	sub	sp, #12
    2fc0:	af00      	add	r7, sp, #0
    2fc2:	6078      	str	r0, [r7, #4]
	hvacTimer.ticks++;
    2fc4:	4b04      	ldr	r3, [pc, #16]	; (2fd8 <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2fc6:	689b      	ldr	r3, [r3, #8]
    2fc8:	3301      	adds	r3, #1
    2fca:	4a03      	ldr	r2, [pc, #12]	; (2fd8 <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2fcc:	6093      	str	r3, [r2, #8]
}
    2fce:	bf00      	nop
    2fd0:	370c      	adds	r7, #12
    2fd2:	46bd      	mov	sp, r7
    2fd4:	bc80      	pop	{r7}
    2fd6:	4770      	bx	lr
    2fd8:	2000a310 	.word	0x2000a310

00002fdc <_ZN12States_ClassC1Ev>:

static HVACState staticCurrentState;
	// default constructor
States_Class::States_Class(void)
    2fdc:	b580      	push	{r7, lr}
    2fde:	b082      	sub	sp, #8
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	6078      	str	r0, [r7, #4]
    2fe4:	687b      	ldr	r3, [r7, #4]
    2fe6:	f503 7306 	add.w	r3, r3, #536	; 0x218
    2fea:	4618      	mov	r0, r3
    2fec:	4b1c      	ldr	r3, [pc, #112]	; (3060 <_ZN12States_ClassC1Ev+0x84>)
    2fee:	4798      	blx	r3
    2ff0:	687b      	ldr	r3, [r7, #4]
    2ff2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    2ff6:	4a1b      	ldr	r2, [pc, #108]	; (3064 <_ZN12States_ClassC1Ev+0x88>)
    2ff8:	4611      	mov	r1, r2
    2ffa:	4618      	mov	r0, r3
    2ffc:	4b1a      	ldr	r3, [pc, #104]	; (3068 <_ZN12States_ClassC1Ev+0x8c>)
    2ffe:	4798      	blx	r3
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	3304      	adds	r3, #4
    3004:	4618      	mov	r0, r3
    3006:	4b19      	ldr	r3, [pc, #100]	; (306c <_ZN12States_ClassC1Ev+0x90>)
    3008:	4798      	blx	r3
    300a:	4a19      	ldr	r2, [pc, #100]	; (3070 <_ZN12States_ClassC1Ev+0x94>)
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	601a      	str	r2, [r3, #0]
    3010:	687b      	ldr	r3, [r7, #4]
    3012:	f503 7306 	add.w	r3, r3, #536	; 0x218
    3016:	4a17      	ldr	r2, [pc, #92]	; (3074 <_ZN12States_ClassC1Ev+0x98>)
    3018:	601a      	str	r2, [r3, #0]
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    3020:	4a15      	ldr	r2, [pc, #84]	; (3078 <_ZN12States_ClassC1Ev+0x9c>)
    3022:	601a      	str	r2, [r3, #0]
{
	ptrStatesClass=this;
    3024:	4a15      	ldr	r2, [pc, #84]	; (307c <_ZN12States_ClassC1Ev+0xa0>)
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	6013      	str	r3, [r2, #0]
	listener.eventHandler = NULL;
    302a:	4b15      	ldr	r3, [pc, #84]	; (3080 <_ZN12States_ClassC1Ev+0xa4>)
    302c:	2200      	movs	r2, #0
    302e:	615a      	str	r2, [r3, #20]
	staticCurrentState=defaultState;
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	f503 7306 	add.w	r3, r3, #536	; 0x218
    3036:	4a13      	ldr	r2, [pc, #76]	; (3084 <_ZN12States_ClassC1Ev+0xa8>)
    3038:	4610      	mov	r0, r2
    303a:	3304      	adds	r3, #4
    303c:	2268      	movs	r2, #104	; 0x68
    303e:	4619      	mov	r1, r3
    3040:	4b11      	ldr	r3, [pc, #68]	; (3088 <_ZN12States_ClassC1Ev+0xac>)
    3042:	4798      	blx	r3
	isOK=false;
    3044:	687b      	ldr	r3, [r7, #4]
    3046:	2200      	movs	r2, #0
    3048:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	hvacState=&staticCurrentState;
    304c:	687b      	ldr	r3, [r7, #4]
    304e:	4a0d      	ldr	r2, [pc, #52]	; (3084 <_ZN12States_ClassC1Ev+0xa8>)
    3050:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
    3054:	687b      	ldr	r3, [r7, #4]
    3056:	4618      	mov	r0, r3
    3058:	3708      	adds	r7, #8
    305a:	46bd      	mov	sp, r7
    305c:	bd80      	pop	{r7, pc}
    305e:	bf00      	nop
    3060:	00001081 	.word	0x00001081
    3064:	0002098c 	.word	0x0002098c
    3068:	00001c19 	.word	0x00001c19
    306c:	00001d99 	.word	0x00001d99
    3070:	00020960 	.word	0x00020960
    3074:	00020970 	.word	0x00020970
    3078:	00020980 	.word	0x00020980
    307c:	2000816c 	.word	0x2000816c
    3080:	200099f8 	.word	0x200099f8
    3084:	20008170 	.word	0x20008170
    3088:	0001c4a5 	.word	0x0001c4a5

0000308c <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    308c:	b580      	push	{r7, lr}
    308e:	b082      	sub	sp, #8
    3090:	af00      	add	r7, sp, #0
    3092:	6078      	str	r0, [r7, #4]
    3094:	4a12      	ldr	r2, [pc, #72]	; (30e0 <_ZN12States_ClassD1Ev+0x54>)
    3096:	687b      	ldr	r3, [r7, #4]
    3098:	601a      	str	r2, [r3, #0]
    309a:	687b      	ldr	r3, [r7, #4]
    309c:	f503 7306 	add.w	r3, r3, #536	; 0x218
    30a0:	4a10      	ldr	r2, [pc, #64]	; (30e4 <_ZN12States_ClassD1Ev+0x58>)
    30a2:	601a      	str	r2, [r3, #0]
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    30aa:	4a0f      	ldr	r2, [pc, #60]	; (30e8 <_ZN12States_ClassD1Ev+0x5c>)
    30ac:	601a      	str	r2, [r3, #0]
    30ae:	687b      	ldr	r3, [r7, #4]
    30b0:	3304      	adds	r3, #4
    30b2:	4618      	mov	r0, r3
    30b4:	4b0d      	ldr	r3, [pc, #52]	; (30ec <_ZN12States_ClassD1Ev+0x60>)
    30b6:	4798      	blx	r3
    30b8:	687b      	ldr	r3, [r7, #4]
    30ba:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    30be:	4a0c      	ldr	r2, [pc, #48]	; (30f0 <_ZN12States_ClassD1Ev+0x64>)
    30c0:	4611      	mov	r1, r2
    30c2:	4618      	mov	r0, r3
    30c4:	4b0b      	ldr	r3, [pc, #44]	; (30f4 <_ZN12States_ClassD1Ev+0x68>)
    30c6:	4798      	blx	r3
    30c8:	687b      	ldr	r3, [r7, #4]
    30ca:	f503 7306 	add.w	r3, r3, #536	; 0x218
    30ce:	4618      	mov	r0, r3
    30d0:	4b09      	ldr	r3, [pc, #36]	; (30f8 <_ZN12States_ClassD1Ev+0x6c>)
    30d2:	4798      	blx	r3
{
} //~States_Class
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	4618      	mov	r0, r3
    30d8:	3708      	adds	r7, #8
    30da:	46bd      	mov	sp, r7
    30dc:	bd80      	pop	{r7, pc}
    30de:	bf00      	nop
    30e0:	00020960 	.word	0x00020960
    30e4:	00020970 	.word	0x00020970
    30e8:	00020980 	.word	0x00020980
    30ec:	00001dad 	.word	0x00001dad
    30f0:	0002098c 	.word	0x0002098c
    30f4:	00001c4b 	.word	0x00001c4b
    30f8:	000010e5 	.word	0x000010e5

000030fc <_ZN12States_Class4InitEv>:

bool States_Class::Init(void){
    30fc:	b580      	push	{r7, lr}
    30fe:	b082      	sub	sp, #8
    3100:	af00      	add	r7, sp, #0
    3102:	6078      	str	r0, [r7, #4]
	if (hvacTimer.Init())
    3104:	4816      	ldr	r0, [pc, #88]	; (3160 <_ZN12States_Class4InitEv+0x64>)
    3106:	4b17      	ldr	r3, [pc, #92]	; (3164 <_ZN12States_Class4InitEv+0x68>)
    3108:	4798      	blx	r3
    310a:	4603      	mov	r3, r0
    310c:	2b00      	cmp	r3, #0
    310e:	d004      	beq.n	311a <_ZN12States_Class4InitEv+0x1e>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACTimerTicks),1);
    3110:	2201      	movs	r2, #1
    3112:	4915      	ldr	r1, [pc, #84]	; (3168 <_ZN12States_Class4InitEv+0x6c>)
    3114:	4812      	ldr	r0, [pc, #72]	; (3160 <_ZN12States_Class4InitEv+0x64>)
    3116:	4b15      	ldr	r3, [pc, #84]	; (316c <_ZN12States_Class4InitEv+0x70>)
    3118:	4798      	blx	r3
	}
	isOK=temperatures.Init();
    311a:	4815      	ldr	r0, [pc, #84]	; (3170 <_ZN12States_Class4InitEv+0x74>)
    311c:	4b15      	ldr	r3, [pc, #84]	; (3174 <_ZN12States_Class4InitEv+0x78>)
    311e:	4798      	blx	r3
    3120:	4603      	mov	r3, r0
    3122:	461a      	mov	r2, r3
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	if (isOK)
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
    3130:	b2db      	uxtb	r3, r3
    3132:	2b00      	cmp	r3, #0
    3134:	d002      	beq.n	313c <_ZN12States_Class4InitEv+0x40>
	{
		temperatures.StartOneConversion();
    3136:	480e      	ldr	r0, [pc, #56]	; (3170 <_ZN12States_Class4InitEv+0x74>)
    3138:	4b0f      	ldr	r3, [pc, #60]	; (3178 <_ZN12States_Class4InitEv+0x7c>)
    313a:	4798      	blx	r3
	}
	if (fv1.Init())
    313c:	480f      	ldr	r0, [pc, #60]	; (317c <_ZN12States_Class4InitEv+0x80>)
    313e:	4b10      	ldr	r3, [pc, #64]	; (3180 <_ZN12States_Class4InitEv+0x84>)
    3140:	4798      	blx	r3
    3142:	4603      	mov	r3, r0
    3144:	2b00      	cmp	r3, #0
    3146:	d006      	beq.n	3156 <_ZN12States_Class4InitEv+0x5a>
	{
		hvacState->hvacStatus.statusBits.flapValve1=true;
    3148:	687b      	ldr	r3, [r7, #4]
    314a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    314e:	7d13      	ldrb	r3, [r2, #20]
    3150:	f043 0308 	orr.w	r3, r3, #8
    3154:	7513      	strb	r3, [r2, #20]
	}
	
	

	//return isOK;
	return true;
    3156:	2301      	movs	r3, #1
	
}
    3158:	4618      	mov	r0, r3
    315a:	3708      	adds	r7, #8
    315c:	46bd      	mov	sp, r7
    315e:	bd80      	pop	{r7, pc}
    3160:	2000a310 	.word	0x2000a310
    3164:	00017a7d 	.word	0x00017a7d
    3168:	00002fbd 	.word	0x00002fbd
    316c:	00017b41 	.word	0x00017b41
    3170:	20009c84 	.word	0x20009c84
    3174:	00015cad 	.word	0x00015cad
    3178:	00015dad 	.word	0x00015dad
    317c:	20009b10 	.word	0x20009b10
    3180:	00015301 	.word	0x00015301

00003184 <_ZN12States_Class16ControllerResumeEh>:
void States_Class::ControllerResume(uint8_t	operationMode){
    3184:	b590      	push	{r4, r7, lr}
    3186:	b08f      	sub	sp, #60	; 0x3c
    3188:	af02      	add	r7, sp, #8
    318a:	6078      	str	r0, [r7, #4]
    318c:	460b      	mov	r3, r1
    318e:	70fb      	strb	r3, [r7, #3]
	event e;
    3190:	f107 031c 	add.w	r3, r7, #28
    3194:	4618      	mov	r0, r3
    3196:	4b4b      	ldr	r3, [pc, #300]	; (32c4 <_ZN12States_Class16ControllerResumeEh+0x140>)
    3198:	4798      	blx	r3
	bool done(false);
    319a:	2300      	movs	r3, #0
    319c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	
	
		if (operationMode==0)
    31a0:	78fb      	ldrb	r3, [r7, #3]
    31a2:	2b00      	cmp	r3, #0
    31a4:	d115      	bne.n	31d2 <_ZN12States_Class16ControllerResumeEh+0x4e>
		{
			if (timeElapsed)
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    31ac:	b2db      	uxtb	r3, r3
    31ae:	2b00      	cmp	r3, #0
    31b0:	d00f      	beq.n	31d2 <_ZN12States_Class16ControllerResumeEh+0x4e>
			{
				usb<<"Air Conditioning System Operating"<<NEWLINE;
    31b2:	4945      	ldr	r1, [pc, #276]	; (32c8 <_ZN12States_Class16ControllerResumeEh+0x144>)
    31b4:	4845      	ldr	r0, [pc, #276]	; (32cc <_ZN12States_Class16ControllerResumeEh+0x148>)
    31b6:	4b46      	ldr	r3, [pc, #280]	; (32d0 <_ZN12States_Class16ControllerResumeEh+0x14c>)
    31b8:	4798      	blx	r3
    31ba:	4603      	mov	r3, r0
    31bc:	4945      	ldr	r1, [pc, #276]	; (32d4 <_ZN12States_Class16ControllerResumeEh+0x150>)
    31be:	4618      	mov	r0, r3
    31c0:	4b45      	ldr	r3, [pc, #276]	; (32d8 <_ZN12States_Class16ControllerResumeEh+0x154>)
    31c2:	4798      	blx	r3
				timeElapsed=false;
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	2200      	movs	r2, #0
    31c8:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
				delay_ms(10);
    31cc:	200a      	movs	r0, #10
    31ce:	4b43      	ldr	r3, [pc, #268]	; (32dc <_ZN12States_Class16ControllerResumeEh+0x158>)
    31d0:	4798      	blx	r3
				//alu.PrepareNewTask(kALUCheckCommunication);
				
			}
		}
		if (hvacState->currentState==kHVACStateLeaving)
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    31d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31da:	f240 1243 	movw	r2, #323	; 0x143
    31de:	4293      	cmp	r3, r2
    31e0:	d10a      	bne.n	31f8 <_ZN12States_Class16ControllerResumeEh+0x74>
		{
			prepareStateChangeEvent(hvacState->lastState);
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    31e8:	6a1b      	ldr	r3, [r3, #32]
    31ea:	b29b      	uxth	r3, r3
    31ec:	2200      	movs	r2, #0
    31ee:	4619      	mov	r1, r3
    31f0:	6878      	ldr	r0, [r7, #4]
    31f2:	4b3b      	ldr	r3, [pc, #236]	; (32e0 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    31f4:	4798      	blx	r3
    31f6:	e005      	b.n	3204 <_ZN12States_Class16ControllerResumeEh+0x80>
			
		} 
		else
		{
			prepareStateChangeEvent(kHVACStateInitialize);
    31f8:	2200      	movs	r2, #0
    31fa:	f44f 7197 	mov.w	r1, #302	; 0x12e
    31fe:	6878      	ldr	r0, [r7, #4]
    3200:	4b37      	ldr	r3, [pc, #220]	; (32e0 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    3202:	4798      	blx	r3
		}
		
		if (operationMode>0)
    3204:	78fb      	ldrb	r3, [r7, #3]
    3206:	2b00      	cmp	r3, #0
    3208:	dd51      	ble.n	32ae <_ZN12States_Class16ControllerResumeEh+0x12a>
		{
			
			event	e;
    320a:	f107 030c 	add.w	r3, r7, #12
    320e:	4618      	mov	r0, r3
    3210:	4b2c      	ldr	r3, [pc, #176]	; (32c4 <_ZN12States_Class16ControllerResumeEh+0x140>)
    3212:	4798      	blx	r3
			listener.eventHandler=&States_Class::CheckEvents;
    3214:	4b33      	ldr	r3, [pc, #204]	; (32e4 <_ZN12States_Class16ControllerResumeEh+0x160>)
    3216:	4a34      	ldr	r2, [pc, #208]	; (32e8 <_ZN12States_Class16ControllerResumeEh+0x164>)
    3218:	615a      	str	r2, [r3, #20]
			while ((cBit.IsOK())&&(!done))
    321a:	4834      	ldr	r0, [pc, #208]	; (32ec <_ZN12States_Class16ControllerResumeEh+0x168>)
    321c:	4b34      	ldr	r3, [pc, #208]	; (32f0 <_ZN12States_Class16ControllerResumeEh+0x16c>)
    321e:	4798      	blx	r3
    3220:	4603      	mov	r3, r0
    3222:	2b00      	cmp	r3, #0
    3224:	d008      	beq.n	3238 <_ZN12States_Class16ControllerResumeEh+0xb4>
    3226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    322a:	f083 0301 	eor.w	r3, r3, #1
    322e:	b2db      	uxtb	r3, r3
    3230:	2b00      	cmp	r3, #0
    3232:	d001      	beq.n	3238 <_ZN12States_Class16ControllerResumeEh+0xb4>
    3234:	2301      	movs	r3, #1
    3236:	e000      	b.n	323a <_ZN12States_Class16ControllerResumeEh+0xb6>
    3238:	2300      	movs	r3, #0
    323a:	2b00      	cmp	r3, #0
    323c:	d03e      	beq.n	32bc <_ZN12States_Class16ControllerResumeEh+0x138>
			{
				if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent,8))
    323e:	f107 010c 	add.w	r1, r7, #12
    3242:	2308      	movs	r3, #8
    3244:	9300      	str	r3, [sp, #0]
    3246:	f44f 7300 	mov.w	r3, #512	; 0x200
    324a:	f44f 7200 	mov.w	r2, #512	; 0x200
    324e:	4825      	ldr	r0, [pc, #148]	; (32e4 <_ZN12States_Class16ControllerResumeEh+0x160>)
    3250:	4c28      	ldr	r4, [pc, #160]	; (32f4 <_ZN12States_Class16ControllerResumeEh+0x170>)
    3252:	47a0      	blx	r4
    3254:	4603      	mov	r3, r0
    3256:	2b00      	cmp	r3, #0
    3258:	d011      	beq.n	327e <_ZN12States_Class16ControllerResumeEh+0xfa>
				{
					handleHVACEvent(e);
    325a:	f107 030c 	add.w	r3, r7, #12
    325e:	4619      	mov	r1, r3
    3260:	6878      	ldr	r0, [r7, #4]
    3262:	4b25      	ldr	r3, [pc, #148]	; (32f8 <_ZN12States_Class16ControllerResumeEh+0x174>)
    3264:	4798      	blx	r3
					if (hvacState->currentState==kHVACStateLeaving)
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    326e:	f240 1243 	movw	r2, #323	; 0x143
    3272:	4293      	cmp	r3, r2
    3274:	d1d1      	bne.n	321a <_ZN12States_Class16ControllerResumeEh+0x96>
					{
							done=true;
    3276:	2301      	movs	r3, #1
    3278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
    327c:	e01e      	b.n	32bc <_ZN12States_Class16ControllerResumeEh+0x138>
					} 
						
				}
				else if (listener.WaitForEvent(e, kALUEventClass, kAnyEventType,4)){
    327e:	f107 010c 	add.w	r1, r7, #12
    3282:	2304      	movs	r3, #4
    3284:	9300      	str	r3, [sp, #0]
    3286:	f64f 73ff 	movw	r3, #65535	; 0xffff
    328a:	f44f 7240 	mov.w	r2, #768	; 0x300
    328e:	4815      	ldr	r0, [pc, #84]	; (32e4 <_ZN12States_Class16ControllerResumeEh+0x160>)
    3290:	4c1a      	ldr	r4, [pc, #104]	; (32fc <_ZN12States_Class16ControllerResumeEh+0x178>)
    3292:	47a0      	blx	r4
    3294:	4603      	mov	r3, r0
    3296:	2b00      	cmp	r3, #0
    3298:	d0bf      	beq.n	321a <_ZN12States_Class16ControllerResumeEh+0x96>
					alu.PrepareNewEvent(kALUEventCheckPheripherals);
    329a:	2200      	movs	r2, #0
    329c:	f240 1105 	movw	r1, #261	; 0x105
    32a0:	4817      	ldr	r0, [pc, #92]	; (3300 <_ZN12States_Class16ControllerResumeEh+0x17c>)
    32a2:	4b18      	ldr	r3, [pc, #96]	; (3304 <_ZN12States_Class16ControllerResumeEh+0x180>)
    32a4:	4798      	blx	r3
					done=true;
    32a6:	2301      	movs	r3, #1
    32a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while ((cBit.IsOK())&&(!done))
    32ac:	e7b5      	b.n	321a <_ZN12States_Class16ControllerResumeEh+0x96>
				}
			}
			
		}else{
			alu.PrepareNewEvent(kALUEventSimpleStart);
    32ae:	2200      	movs	r2, #0
    32b0:	f44f 7182 	mov.w	r1, #260	; 0x104
    32b4:	4812      	ldr	r0, [pc, #72]	; (3300 <_ZN12States_Class16ControllerResumeEh+0x17c>)
    32b6:	4b13      	ldr	r3, [pc, #76]	; (3304 <_ZN12States_Class16ControllerResumeEh+0x180>)
    32b8:	4798      	blx	r3
			return;
    32ba:	bf00      	nop
		}
		
}
    32bc:	3734      	adds	r7, #52	; 0x34
    32be:	46bd      	mov	sp, r7
    32c0:	bd90      	pop	{r4, r7, pc}
    32c2:	bf00      	nop
    32c4:	000003c5 	.word	0x000003c5
    32c8:	00020860 	.word	0x00020860
    32cc:	2000a368 	.word	0x2000a368
    32d0:	0000452d 	.word	0x0000452d
    32d4:	00020884 	.word	0x00020884
    32d8:	00000c99 	.word	0x00000c99
    32dc:	00006761 	.word	0x00006761
    32e0:	000040f5 	.word	0x000040f5
    32e4:	200099f8 	.word	0x200099f8
    32e8:	0000444d 	.word	0x0000444d
    32ec:	20008168 	.word	0x20008168
    32f0:	00000fe3 	.word	0x00000fe3
    32f4:	00014cad 	.word	0x00014cad
    32f8:	00003535 	.word	0x00003535
    32fc:	00014ce5 	.word	0x00014ce5
    3300:	20000c80 	.word	0x20000c80
    3304:	00000a49 	.word	0x00000a49

00003308 <_ZN12States_Class5StartEh>:

void States_Class::Start(uint8_t	operationMode)
	{
    3308:	b590      	push	{r4, r7, lr}
    330a:	b08d      	sub	sp, #52	; 0x34
    330c:	af02      	add	r7, sp, #8
    330e:	6078      	str	r0, [r7, #4]
    3310:	460b      	mov	r3, r1
    3312:	70fb      	strb	r3, [r7, #3]
	hvacState->currentState = kHVACStateStart;
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    331a:	f44f 7296 	mov.w	r2, #300	; 0x12c
    331e:	625a      	str	r2, [r3, #36]	; 0x24
	bool done(false);
    3320:	2300      	movs	r3, #0
    3322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (operationMode==0)
    3326:	78fb      	ldrb	r3, [r7, #3]
    3328:	2b00      	cmp	r3, #0
    332a:	d113      	bne.n	3354 <_ZN12States_Class5StartEh+0x4c>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACOperationTimeElapsed),100);
    332c:	2264      	movs	r2, #100	; 0x64
    332e:	4962      	ldr	r1, [pc, #392]	; (34b8 <_ZN12States_Class5StartEh+0x1b0>)
    3330:	4862      	ldr	r0, [pc, #392]	; (34bc <_ZN12States_Class5StartEh+0x1b4>)
    3332:	4b63      	ldr	r3, [pc, #396]	; (34c0 <_ZN12States_Class5StartEh+0x1b8>)
    3334:	4798      	blx	r3
		usb<<"Air Conditioning System Started"<<NEWLINE;
    3336:	4963      	ldr	r1, [pc, #396]	; (34c4 <_ZN12States_Class5StartEh+0x1bc>)
    3338:	4863      	ldr	r0, [pc, #396]	; (34c8 <_ZN12States_Class5StartEh+0x1c0>)
    333a:	4b64      	ldr	r3, [pc, #400]	; (34cc <_ZN12States_Class5StartEh+0x1c4>)
    333c:	4798      	blx	r3
    333e:	4603      	mov	r3, r0
    3340:	4963      	ldr	r1, [pc, #396]	; (34d0 <_ZN12States_Class5StartEh+0x1c8>)
    3342:	4618      	mov	r0, r3
    3344:	4b63      	ldr	r3, [pc, #396]	; (34d4 <_ZN12States_Class5StartEh+0x1cc>)
    3346:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskCheckCommunication);
    3348:	2200      	movs	r2, #0
    334a:	2103      	movs	r1, #3
    334c:	4862      	ldr	r0, [pc, #392]	; (34d8 <_ZN12States_Class5StartEh+0x1d0>)
    334e:	4b63      	ldr	r3, [pc, #396]	; (34dc <_ZN12States_Class5StartEh+0x1d4>)
    3350:	4798      	blx	r3
	
		return;
    3352:	e0ad      	b.n	34b0 <_ZN12States_Class5StartEh+0x1a8>
	}
		
		

    tick_t	timerValue = 0L;
    3354:	2300      	movs	r3, #0
    3356:	623b      	str	r3, [r7, #32]
    bool	isCurrentStateValid = false;
    3358:	2300      	movs	r3, #0
    335a:	77fb      	strb	r3, [r7, #31]
	memory.ReadFastApplicationState(lastHVACState);
    335c:	687b      	ldr	r3, [r7, #4]
    335e:	33f0      	adds	r3, #240	; 0xf0
    3360:	4619      	mov	r1, r3
    3362:	485f      	ldr	r0, [pc, #380]	; (34e0 <_ZN12States_Class5StartEh+0x1d8>)
    3364:	4b5f      	ldr	r3, [pc, #380]	; (34e4 <_ZN12States_Class5StartEh+0x1dc>)
    3366:	4798      	blx	r3
	
	if (calendar.WasInterrupted())
    3368:	485f      	ldr	r0, [pc, #380]	; (34e8 <_ZN12States_Class5StartEh+0x1e0>)
    336a:	4b60      	ldr	r3, [pc, #384]	; (34ec <_ZN12States_Class5StartEh+0x1e4>)
    336c:	4798      	blx	r3
    336e:	4603      	mov	r3, r0
    3370:	2b00      	cmp	r3, #0
    3372:	d019      	beq.n	33a8 <_ZN12States_Class5StartEh+0xa0>
	{
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    3374:	485c      	ldr	r0, [pc, #368]	; (34e8 <_ZN12States_Class5StartEh+0x1e0>)
    3376:	4b5e      	ldr	r3, [pc, #376]	; (34f0 <_ZN12States_Class5StartEh+0x1e8>)
    3378:	4798      	blx	r3
    337a:	4602      	mov	r2, r0
    337c:	687b      	ldr	r3, [r7, #4]
    337e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		#ifdef OFFLINE
		resumeLastStateValid = ((powerInterruptDuration > 0) && (powerInterruptDuration < 5000L));
		#else
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    3388:	2b00      	cmp	r3, #0
    338a:	db08      	blt.n	339e <_ZN12States_Class5StartEh+0x96>
    338c:	687b      	ldr	r3, [r7, #4]
    338e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    3392:	f241 3287 	movw	r2, #4999	; 0x1387
    3396:	4293      	cmp	r3, r2
    3398:	dc01      	bgt.n	339e <_ZN12States_Class5StartEh+0x96>
    339a:	2201      	movs	r2, #1
    339c:	e000      	b.n	33a0 <_ZN12States_Class5StartEh+0x98>
    339e:	2200      	movs	r2, #0
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    33a6:	e002      	b.n	33ae <_ZN12States_Class5StartEh+0xa6>

		usb << "powerInterruptDuration was " << powerInterruptDuration << (resumeLastStateValid?" 200msec":" power resume") << newline;
		
		#endif
	}else{
		memory.LogResetEvent();
    33a8:	4852      	ldr	r0, [pc, #328]	; (34f4 <_ZN12States_Class5StartEh+0x1ec>)
    33aa:	4b53      	ldr	r3, [pc, #332]	; (34f8 <_ZN12States_Class5StartEh+0x1f0>)
    33ac:	4798      	blx	r3
	//	SetDefaultState();
	//}



	readResult=memory.ReadLastConfigurationData(configuration);
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
    33b4:	4619      	mov	r1, r3
    33b6:	4851      	ldr	r0, [pc, #324]	; (34fc <_ZN12States_Class5StartEh+0x1f4>)
    33b8:	4b51      	ldr	r3, [pc, #324]	; (3500 <_ZN12States_Class5StartEh+0x1f8>)
    33ba:	4798      	blx	r3
    33bc:	4602      	mov	r2, r0
    33be:	687b      	ldr	r3, [r7, #4]
    33c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	if (readResult>0)
    33c4:	687b      	ldr	r3, [r7, #4]
    33c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    33ca:	2b00      	cmp	r3, #0
    33cc:	d00b      	beq.n	33e6 <_ZN12States_Class5StartEh+0xde>
		{
		#if __DEBUG__ > 3
			usb << "readConfigurationDataArea failed!" << newline;
		#endif
		SetFactoryDefaults(0, true, false);
    33ce:	687b      	ldr	r3, [r7, #4]
    33d0:	681b      	ldr	r3, [r3, #0]
    33d2:	3b0c      	subs	r3, #12
    33d4:	681b      	ldr	r3, [r3, #0]
    33d6:	461a      	mov	r2, r3
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	1898      	adds	r0, r3, r2
    33dc:	2300      	movs	r3, #0
    33de:	2201      	movs	r2, #1
    33e0:	2100      	movs	r1, #0
    33e2:	4c48      	ldr	r4, [pc, #288]	; (3504 <_ZN12States_Class5StartEh+0x1fc>)
    33e4:	47a0      	blx	r4
// #endif
	

	//interfaces.CheckInternalCommunication();

	if (readResult==0)
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    33ec:	2b00      	cmp	r3, #0
    33ee:	d158      	bne.n	34a2 <_ZN12States_Class5StartEh+0x19a>
    {
		prepareStateChangeEvent(kHVACStateInitialize);
    33f0:	2200      	movs	r2, #0
    33f2:	f44f 7197 	mov.w	r1, #302	; 0x12e
    33f6:	6878      	ldr	r0, [r7, #4]
    33f8:	4b43      	ldr	r3, [pc, #268]	; (3508 <_ZN12States_Class5StartEh+0x200>)
    33fa:	4798      	blx	r3
		event	e;
    33fc:	f107 030c 	add.w	r3, r7, #12
    3400:	4618      	mov	r0, r3
    3402:	4b42      	ldr	r3, [pc, #264]	; (350c <_ZN12States_Class5StartEh+0x204>)
    3404:	4798      	blx	r3
		listener.eventHandler=&States_Class::CheckEvents;
    3406:	4b42      	ldr	r3, [pc, #264]	; (3510 <_ZN12States_Class5StartEh+0x208>)
    3408:	4a42      	ldr	r2, [pc, #264]	; (3514 <_ZN12States_Class5StartEh+0x20c>)
    340a:	615a      	str	r2, [r3, #20]
		while ((cBit.IsOK())&&(!done))
    340c:	4842      	ldr	r0, [pc, #264]	; (3518 <_ZN12States_Class5StartEh+0x210>)
    340e:	4b43      	ldr	r3, [pc, #268]	; (351c <_ZN12States_Class5StartEh+0x214>)
    3410:	4798      	blx	r3
    3412:	4603      	mov	r3, r0
    3414:	2b00      	cmp	r3, #0
    3416:	d008      	beq.n	342a <_ZN12States_Class5StartEh+0x122>
    3418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    341c:	f083 0301 	eor.w	r3, r3, #1
    3420:	b2db      	uxtb	r3, r3
    3422:	2b00      	cmp	r3, #0
    3424:	d001      	beq.n	342a <_ZN12States_Class5StartEh+0x122>
    3426:	2301      	movs	r3, #1
    3428:	e000      	b.n	342c <_ZN12States_Class5StartEh+0x124>
    342a:	2300      	movs	r3, #0
    342c:	2b00      	cmp	r3, #0
    342e:	d03f      	beq.n	34b0 <_ZN12States_Class5StartEh+0x1a8>
		{
			if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent))
    3430:	4b3b      	ldr	r3, [pc, #236]	; (3520 <_ZN12States_Class5StartEh+0x218>)
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	f107 010c 	add.w	r1, r7, #12
    3438:	9300      	str	r3, [sp, #0]
    343a:	f44f 7300 	mov.w	r3, #512	; 0x200
    343e:	f44f 7200 	mov.w	r2, #512	; 0x200
    3442:	4833      	ldr	r0, [pc, #204]	; (3510 <_ZN12States_Class5StartEh+0x208>)
    3444:	4c37      	ldr	r4, [pc, #220]	; (3524 <_ZN12States_Class5StartEh+0x21c>)
    3446:	47a0      	blx	r4
    3448:	4603      	mov	r3, r0
    344a:	2b00      	cmp	r3, #0
    344c:	d011      	beq.n	3472 <_ZN12States_Class5StartEh+0x16a>
			{
		
				handleHVACEvent(e);
    344e:	f107 030c 	add.w	r3, r7, #12
    3452:	4619      	mov	r1, r3
    3454:	6878      	ldr	r0, [r7, #4]
    3456:	4b34      	ldr	r3, [pc, #208]	; (3528 <_ZN12States_Class5StartEh+0x220>)
    3458:	4798      	blx	r3
				if (hvacState->currentState==kHVACStateLeaving)
    345a:	687b      	ldr	r3, [r7, #4]
    345c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3462:	f240 1243 	movw	r2, #323	; 0x143
    3466:	4293      	cmp	r3, r2
    3468:	d1d0      	bne.n	340c <_ZN12States_Class5StartEh+0x104>
				{
						done=true;
    346a:	2301      	movs	r3, #1
    346c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
    3470:	e01e      	b.n	34b0 <_ZN12States_Class5StartEh+0x1a8>
					
				}
			
			}
			else{
				if (listener.WaitForEvent(e, kALUEventClass, kHVACEventDoPendingTasks)){
    3472:	4b2b      	ldr	r3, [pc, #172]	; (3520 <_ZN12States_Class5StartEh+0x218>)
    3474:	681b      	ldr	r3, [r3, #0]
    3476:	f107 010c 	add.w	r1, r7, #12
    347a:	9300      	str	r3, [sp, #0]
    347c:	2303      	movs	r3, #3
    347e:	f44f 7240 	mov.w	r2, #768	; 0x300
    3482:	4823      	ldr	r0, [pc, #140]	; (3510 <_ZN12States_Class5StartEh+0x208>)
    3484:	4c29      	ldr	r4, [pc, #164]	; (352c <_ZN12States_Class5StartEh+0x224>)
    3486:	47a0      	blx	r4
    3488:	4603      	mov	r3, r0
    348a:	2b00      	cmp	r3, #0
    348c:	d0be      	beq.n	340c <_ZN12States_Class5StartEh+0x104>
					alu.PrepareNewEvent(kALUEventSimpleStart);
    348e:	2200      	movs	r2, #0
    3490:	f44f 7182 	mov.w	r1, #260	; 0x104
    3494:	4810      	ldr	r0, [pc, #64]	; (34d8 <_ZN12States_Class5StartEh+0x1d0>)
    3496:	4b26      	ldr	r3, [pc, #152]	; (3530 <_ZN12States_Class5StartEh+0x228>)
    3498:	4798      	blx	r3
					done=true;
    349a:	2301      	movs	r3, #1
    349c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    34a0:	e006      	b.n	34b0 <_ZN12States_Class5StartEh+0x1a8>

			}
		}
			
    }else{
		alu.PrepareNewEvent(kALUEventSimpleStart);
    34a2:	2200      	movs	r2, #0
    34a4:	f44f 7182 	mov.w	r1, #260	; 0x104
    34a8:	480b      	ldr	r0, [pc, #44]	; (34d8 <_ZN12States_Class5StartEh+0x1d0>)
    34aa:	4b21      	ldr	r3, [pc, #132]	; (3530 <_ZN12States_Class5StartEh+0x228>)
    34ac:	4798      	blx	r3
		return;
    34ae:	bf00      	nop
    }



}
    34b0:	372c      	adds	r7, #44	; 0x2c
    34b2:	46bd      	mov	sp, r7
    34b4:	bd90      	pop	{r4, r7, pc}
    34b6:	bf00      	nop
    34b8:	00002f9d 	.word	0x00002f9d
    34bc:	2000a310 	.word	0x2000a310
    34c0:	00017b41 	.word	0x00017b41
    34c4:	00020888 	.word	0x00020888
    34c8:	2000a368 	.word	0x2000a368
    34cc:	0000454d 	.word	0x0000454d
    34d0:	00020884 	.word	0x00020884
    34d4:	00000c99 	.word	0x00000c99
    34d8:	20000c80 	.word	0x20000c80
    34dc:	00000a0d 	.word	0x00000a0d
    34e0:	20002d78 	.word	0x20002d78
    34e4:	00001aa9 	.word	0x00001aa9
    34e8:	2000a0e8 	.word	0x2000a0e8
    34ec:	000177a9 	.word	0x000177a9
    34f0:	000176d1 	.word	0x000176d1
    34f4:	20002708 	.word	0x20002708
    34f8:	00001605 	.word	0x00001605
    34fc:	20002d88 	.word	0x20002d88
    3500:	00002985 	.word	0x00002985
    3504:	00001105 	.word	0x00001105
    3508:	000040f5 	.word	0x000040f5
    350c:	000003c5 	.word	0x000003c5
    3510:	200099f8 	.word	0x200099f8
    3514:	0000444d 	.word	0x0000444d
    3518:	20008168 	.word	0x20008168
    351c:	00000fe3 	.word	0x00000fe3
    3520:	00021fb4 	.word	0x00021fb4
    3524:	00014cad 	.word	0x00014cad
    3528:	00003535 	.word	0x00003535
    352c:	00014ce5 	.word	0x00014ce5
    3530:	00000a49 	.word	0x00000a49

00003534 <_ZN12States_Class15handleHVACEventER5event>:
	return result;
	}


void States_Class::handleHVACEvent(event& e)
	{
    3534:	b590      	push	{r4, r7, lr}
    3536:	b083      	sub	sp, #12
    3538:	af00      	add	r7, sp, #0
    353a:	6078      	str	r0, [r7, #4]
    353c:	6039      	str	r1, [r7, #0]
		hvacState->callingState = hvacState->currentState;
    353e:	687b      	ldr	r3, [r7, #4]
    3540:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3544:	687a      	ldr	r2, [r7, #4]
    3546:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    354a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    354c:	629a      	str	r2, [r3, #40]	; 0x28
	if (hvacState->currentState != kHVACStateResume){
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3556:	f240 122f 	movw	r2, #303	; 0x12f
    355a:	4293      	cmp	r3, r2
    355c:	d00c      	beq.n	3578 <_ZN12States_Class15handleHVACEventER5event+0x44>
		hvacState->currentState = e.data.wordData[0];
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3564:	683a      	ldr	r2, [r7, #0]
    3566:	8912      	ldrh	r2, [r2, #8]
    3568:	625a      	str	r2, [r3, #36]	; 0x24
		hvacState->stateFlags = e.data.wordData[1];
    356a:	687b      	ldr	r3, [r7, #4]
    356c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3570:	683a      	ldr	r2, [r7, #0]
    3572:	8952      	ldrh	r2, [r2, #10]
    3574:	631a      	str	r2, [r3, #48]	; 0x30
    3576:	e007      	b.n	3588 <_ZN12States_Class15handleHVACEventER5event+0x54>
		
	}else{
		hvacState->currentState=hvacState->lastState;
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    357e:	687a      	ldr	r2, [r7, #4]
    3580:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    3584:	6a12      	ldr	r2, [r2, #32]
    3586:	625a      	str	r2, [r3, #36]	; 0x24
	}
	hvacState->stateEntryTime = hvacTimer.Get_ticks();
    3588:	687b      	ldr	r3, [r7, #4]
    358a:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    358e:	4871      	ldr	r0, [pc, #452]	; (3754 <_ZN12States_Class15handleHVACEventER5event+0x220>)
    3590:	4b71      	ldr	r3, [pc, #452]	; (3758 <_ZN12States_Class15handleHVACEventER5event+0x224>)
    3592:	4798      	blx	r3
    3594:	4603      	mov	r3, r0
    3596:	6363      	str	r3, [r4, #52]	; 0x34

#if __DEBUG__ > 0
	
	usb << "handleGAINEvent received: switching from ";
    3598:	4970      	ldr	r1, [pc, #448]	; (375c <_ZN12States_Class15handleHVACEventER5event+0x228>)
    359a:	4871      	ldr	r0, [pc, #452]	; (3760 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    359c:	4b71      	ldr	r3, [pc, #452]	; (3764 <_ZN12States_Class15handleHVACEventER5event+0x230>)
    359e:	4798      	blx	r3
	//usb.write(gainStateDescription[hvacState->callingState]);
	usb << " to ";
    35a0:	4971      	ldr	r1, [pc, #452]	; (3768 <_ZN12States_Class15handleHVACEventER5event+0x234>)
    35a2:	486f      	ldr	r0, [pc, #444]	; (3760 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    35a4:	4b71      	ldr	r3, [pc, #452]	; (376c <_ZN12States_Class15handleHVACEventER5event+0x238>)
    35a6:	4798      	blx	r3
	//usb.write(gainStateDescription[hvacState->currentState]);
	//usb << " (flags == " << hvacState->stateFlags << ')' << NEWLINE;
	
#endif

	saveCurrentState();
    35a8:	6878      	ldr	r0, [r7, #4]
    35aa:	4b71      	ldr	r3, [pc, #452]	; (3770 <_ZN12States_Class15handleHVACEventER5event+0x23c>)
    35ac:	4798      	blx	r3

	switch (hvacState->currentState)
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    35b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35b6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
    35ba:	2b15      	cmp	r3, #21
    35bc:	f200 80c0 	bhi.w	3740 <_ZN12States_Class15handleHVACEventER5event+0x20c>
    35c0:	a201      	add	r2, pc, #4	; (adr r2, 35c8 <_ZN12States_Class15handleHVACEventER5event+0x94>)
    35c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    35c6:	bf00      	nop
    35c8:	00003621 	.word	0x00003621
    35cc:	00003633 	.word	0x00003633
    35d0:	0000368d 	.word	0x0000368d
    35d4:	0000367b 	.word	0x0000367b
    35d8:	00003645 	.word	0x00003645
    35dc:	000036b1 	.word	0x000036b1
    35e0:	00003657 	.word	0x00003657
    35e4:	00003669 	.word	0x00003669
    35e8:	0000369f 	.word	0x0000369f
    35ec:	00003741 	.word	0x00003741
    35f0:	00003741 	.word	0x00003741
    35f4:	000036c3 	.word	0x000036c3
    35f8:	000036e7 	.word	0x000036e7
    35fc:	00003741 	.word	0x00003741
    3600:	000036d5 	.word	0x000036d5
    3604:	00003741 	.word	0x00003741
    3608:	000036f9 	.word	0x000036f9
    360c:	0000370b 	.word	0x0000370b
    3610:	0000371d 	.word	0x0000371d
    3614:	00003741 	.word	0x00003741
    3618:	00003741 	.word	0x00003741
    361c:	0000372f 	.word	0x0000372f
		{
		case kHVACStateInitialize:
			StateInitialize(hvacState->stateFlags);
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3628:	4619      	mov	r1, r3
    362a:	6878      	ldr	r0, [r7, #4]
    362c:	4b51      	ldr	r3, [pc, #324]	; (3774 <_ZN12States_Class15handleHVACEventER5event+0x240>)
    362e:	4798      	blx	r3
			break;
    3630:	e08b      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateResume:
			StateResume(hvacState->stateFlags);
    3632:	687b      	ldr	r3, [r7, #4]
    3634:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    363a:	4619      	mov	r1, r3
    363c:	6878      	ldr	r0, [r7, #4]
    363e:	4b4e      	ldr	r3, [pc, #312]	; (3778 <_ZN12States_Class15handleHVACEventER5event+0x244>)
    3640:	4798      	blx	r3
			break;
    3642:	e082      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStandbyOFF:
			StateStandbyOFF(hvacState->stateFlags);
    3644:	687b      	ldr	r3, [r7, #4]
    3646:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    364c:	4619      	mov	r1, r3
    364e:	6878      	ldr	r0, [r7, #4]
    3650:	4b4a      	ldr	r3, [pc, #296]	; (377c <_ZN12States_Class15handleHVACEventER5event+0x248>)
    3652:	4798      	blx	r3
			break;
    3654:	e079      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStatePrepareStandbyON:
			StatePrepareStandbyON(hvacState->stateFlags);
    3656:	687b      	ldr	r3, [r7, #4]
    3658:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    365e:	4619      	mov	r1, r3
    3660:	6878      	ldr	r0, [r7, #4]
    3662:	4b47      	ldr	r3, [pc, #284]	; (3780 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    3664:	4798      	blx	r3
			break;
    3666:	e070      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStandbyON:
			handleStateStandbyON(hvacState->stateFlags);
    3668:	687b      	ldr	r3, [r7, #4]
    366a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3670:	4619      	mov	r1, r3
    3672:	6878      	ldr	r0, [r7, #4]
    3674:	4b43      	ldr	r3, [pc, #268]	; (3784 <_ZN12States_Class15handleHVACEventER5event+0x250>)
    3676:	4798      	blx	r3
			break;
    3678:	e067      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStateStandbyAUTO:
			StateStandbyAUTO(hvacState->stateFlags);
    367a:	687b      	ldr	r3, [r7, #4]
    367c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3682:	4619      	mov	r1, r3
    3684:	6878      	ldr	r0, [r7, #4]
    3686:	4b40      	ldr	r3, [pc, #256]	; (3788 <_ZN12States_Class15handleHVACEventER5event+0x254>)
    3688:	4798      	blx	r3
			break;
    368a:	e05e      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStateStandbyVENT:
			StateStandbyVENT(hvacState->stateFlags);
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3694:	4619      	mov	r1, r3
    3696:	6878      	ldr	r0, [r7, #4]
    3698:	4b3c      	ldr	r3, [pc, #240]	; (378c <_ZN12States_Class15handleHVACEventER5event+0x258>)
    369a:	4798      	blx	r3
			break;
    369c:	e055      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStandbyReady:
			handleStateStandbyReady(hvacState->stateFlags);
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36a6:	4619      	mov	r1, r3
    36a8:	6878      	ldr	r0, [r7, #4]
    36aa:	4b39      	ldr	r3, [pc, #228]	; (3790 <_ZN12States_Class15handleHVACEventER5event+0x25c>)
    36ac:	4798      	blx	r3
			break;
    36ae:	e04c      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStatePrepareStandbyOFF:
			StatePrepareStandbyOFF(hvacState->stateFlags);
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36b8:	4619      	mov	r1, r3
    36ba:	6878      	ldr	r0, [r7, #4]
    36bc:	4b35      	ldr	r3, [pc, #212]	; (3794 <_ZN12States_Class15handleHVACEventER5event+0x260>)
    36be:	4798      	blx	r3
			break;
    36c0:	e043      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateON:
			handleStateON(hvacState->stateFlags);
    36c2:	687b      	ldr	r3, [r7, #4]
    36c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36ca:	4619      	mov	r1, r3
    36cc:	6878      	ldr	r0, [r7, #4]
    36ce:	4b32      	ldr	r3, [pc, #200]	; (3798 <_ZN12States_Class15handleHVACEventER5event+0x264>)
    36d0:	4798      	blx	r3
			break;
    36d2:	e03a      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateFinished:
			handleStateFinished(hvacState->stateFlags);
    36d4:	687b      	ldr	r3, [r7, #4]
    36d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36dc:	4619      	mov	r1, r3
    36de:	6878      	ldr	r0, [r7, #4]
    36e0:	4b2e      	ldr	r3, [pc, #184]	; (379c <_ZN12States_Class15handleHVACEventER5event+0x268>)
    36e2:	4798      	blx	r3
			break;
    36e4:	e031      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStoppedProcess:
			StateStoppedProcess(hvacState->stateFlags);
    36e6:	687b      	ldr	r3, [r7, #4]
    36e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36ee:	4619      	mov	r1, r3
    36f0:	6878      	ldr	r0, [r7, #4]
    36f2:	4b2b      	ldr	r3, [pc, #172]	; (37a0 <_ZN12States_Class15handleHVACEventER5event+0x26c>)
    36f4:	4798      	blx	r3
			break;
    36f6:	e028      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateSelfProtect:
			handleStateSelfProtect(hvacState->stateFlags);
    36f8:	687b      	ldr	r3, [r7, #4]
    36fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3700:	4619      	mov	r1, r3
    3702:	6878      	ldr	r0, [r7, #4]
    3704:	4b27      	ldr	r3, [pc, #156]	; (37a4 <_ZN12States_Class15handleHVACEventER5event+0x270>)
    3706:	4798      	blx	r3
			break;
    3708:	e01f      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateError:
			handleStateError(hvacState->stateFlags);
    370a:	687b      	ldr	r3, [r7, #4]
    370c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3712:	4619      	mov	r1, r3
    3714:	6878      	ldr	r0, [r7, #4]
    3716:	4b24      	ldr	r3, [pc, #144]	; (37a8 <_ZN12States_Class15handleHVACEventER5event+0x274>)
    3718:	4798      	blx	r3
			break;
    371a:	e016      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateMaintenance:
			handleStateMaintenance(hvacState->stateFlags);
    371c:	687b      	ldr	r3, [r7, #4]
    371e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3724:	4619      	mov	r1, r3
    3726:	6878      	ldr	r0, [r7, #4]
    3728:	4b20      	ldr	r3, [pc, #128]	; (37ac <_ZN12States_Class15handleHVACEventER5event+0x278>)
    372a:	4798      	blx	r3
			break;
    372c:	e00d      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStateLeaving:
			StateLeaving(hvacState->stateFlags);
    372e:	687b      	ldr	r3, [r7, #4]
    3730:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3736:	4619      	mov	r1, r3
    3738:	6878      	ldr	r0, [r7, #4]
    373a:	4b1d      	ldr	r3, [pc, #116]	; (37b0 <_ZN12States_Class15handleHVACEventER5event+0x27c>)
    373c:	4798      	blx	r3
		break;
    373e:	e004      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		default:
			handleStateError(kHVACErrorIllegalStateTransition);
    3740:	2102      	movs	r1, #2
    3742:	6878      	ldr	r0, [r7, #4]
    3744:	4b18      	ldr	r3, [pc, #96]	; (37a8 <_ZN12States_Class15handleHVACEventER5event+0x274>)
    3746:	4798      	blx	r3
			break;
    3748:	bf00      	nop
		}
	}
    374a:	bf00      	nop
    374c:	370c      	adds	r7, #12
    374e:	46bd      	mov	sp, r7
    3750:	bd90      	pop	{r4, r7, pc}
    3752:	bf00      	nop
    3754:	2000a310 	.word	0x2000a310
    3758:	00017c0d 	.word	0x00017c0d
    375c:	000208a8 	.word	0x000208a8
    3760:	2000a368 	.word	0x2000a368
    3764:	0000456d 	.word	0x0000456d
    3768:	000208d4 	.word	0x000208d4
    376c:	0000458d 	.word	0x0000458d
    3770:	00004169 	.word	0x00004169
    3774:	000037b5 	.word	0x000037b5
    3778:	00003875 	.word	0x00003875
    377c:	00003929 	.word	0x00003929
    3780:	00003d69 	.word	0x00003d69
    3784:	00003e5d 	.word	0x00003e5d
    3788:	00003a59 	.word	0x00003a59
    378c:	00003bdd 	.word	0x00003bdd
    3790:	00003ed1 	.word	0x00003ed1
    3794:	00003df1 	.word	0x00003df1
    3798:	00003f09 	.word	0x00003f09
    379c:	00003f55 	.word	0x00003f55
    37a0:	00003fd5 	.word	0x00003fd5
    37a4:	00004015 	.word	0x00004015
    37a8:	0000404d 	.word	0x0000404d
    37ac:	00004085 	.word	0x00004085
    37b0:	00003f8d 	.word	0x00003f8d

000037b4 <_ZN12States_Class15StateInitializeEm>:


void States_Class::StateInitialize(uint32 flags)
	{
    37b4:	b580      	push	{r7, lr}
    37b6:	b088      	sub	sp, #32
    37b8:	af00      	add	r7, sp, #0
    37ba:	6078      	str	r0, [r7, #4]
    37bc:	6039      	str	r1, [r7, #0]
	event	e;
    37be:	f107 030c 	add.w	r3, r7, #12
    37c2:	4618      	mov	r0, r3
    37c4:	4b1e      	ldr	r3, [pc, #120]	; (3840 <_ZN12States_Class15StateInitializeEm+0x8c>)
    37c6:	4798      	blx	r3
	hvacState->currentState=kHVACStateInitialize;
    37c8:	687b      	ldr	r3, [r7, #4]
    37ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    37ce:	f44f 7297 	mov.w	r2, #302	; 0x12e
    37d2:	625a      	str	r2, [r3, #36]	; 0x24
   	uint16	selfTestResult(kHVACNoError);
    37d4:	2300      	movs	r3, #0
    37d6:	83fb      	strh	r3, [r7, #30]
	
#if __DEBUG__ > 0
	
	usb << "handleStateInitialize: flags == 0x" << flags << NEWLINE;
    37d8:	491a      	ldr	r1, [pc, #104]	; (3844 <_ZN12States_Class15StateInitializeEm+0x90>)
    37da:	481b      	ldr	r0, [pc, #108]	; (3848 <_ZN12States_Class15StateInitializeEm+0x94>)
    37dc:	4b1b      	ldr	r3, [pc, #108]	; (384c <_ZN12States_Class15StateInitializeEm+0x98>)
    37de:	4798      	blx	r3
    37e0:	4602      	mov	r2, r0
    37e2:	463b      	mov	r3, r7
    37e4:	4619      	mov	r1, r3
    37e6:	4610      	mov	r0, r2
    37e8:	4b19      	ldr	r3, [pc, #100]	; (3850 <_ZN12States_Class15StateInitializeEm+0x9c>)
    37ea:	4798      	blx	r3
    37ec:	4603      	mov	r3, r0
    37ee:	4919      	ldr	r1, [pc, #100]	; (3854 <_ZN12States_Class15StateInitializeEm+0xa0>)
    37f0:	4618      	mov	r0, r3
    37f2:	4b19      	ldr	r3, [pc, #100]	; (3858 <_ZN12States_Class15StateInitializeEm+0xa4>)
    37f4:	4798      	blx	r3
		
#endif
	
	
	//listener.CheckEvent();
	if (pBit.isOK)
    37f6:	4b19      	ldr	r3, [pc, #100]	; (385c <_ZN12States_Class15StateInitializeEm+0xa8>)
    37f8:	781b      	ldrb	r3, [r3, #0]
    37fa:	b2db      	uxtb	r3, r3
    37fc:	2b00      	cmp	r3, #0
    37fe:	d017      	beq.n	3830 <_ZN12States_Class15StateInitializeEm+0x7c>
	{
		#if __DEBUG__ > 0
		
		usb << "handleStateInitialize" << NEWLINE;
    3800:	4917      	ldr	r1, [pc, #92]	; (3860 <_ZN12States_Class15StateInitializeEm+0xac>)
    3802:	4811      	ldr	r0, [pc, #68]	; (3848 <_ZN12States_Class15StateInitializeEm+0x94>)
    3804:	4b17      	ldr	r3, [pc, #92]	; (3864 <_ZN12States_Class15StateInitializeEm+0xb0>)
    3806:	4798      	blx	r3
    3808:	4603      	mov	r3, r0
    380a:	4912      	ldr	r1, [pc, #72]	; (3854 <_ZN12States_Class15StateInitializeEm+0xa0>)
    380c:	4618      	mov	r0, r3
    380e:	4b12      	ldr	r3, [pc, #72]	; (3858 <_ZN12States_Class15StateInitializeEm+0xa4>)
    3810:	4798      	blx	r3

		#ifdef _OFFLINE
			prepareStateChangeEvent( kHVACStateInterrupted);
			listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    3812:	6878      	ldr	r0, [r7, #4]
    3814:	4b14      	ldr	r3, [pc, #80]	; (3868 <_ZN12States_Class15StateInitializeEm+0xb4>)
    3816:	4798      	blx	r3
    3818:	4603      	mov	r3, r0
    381a:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kHVACNoError)
    381c:	8bfb      	ldrh	r3, [r7, #30]
    381e:	2b00      	cmp	r3, #0
    3820:	d10a      	bne.n	3838 <_ZN12States_Class15StateInitializeEm+0x84>
		{
			prepareStateChangeEvent( kHVACStateStandbyOFF);
    3822:	2200      	movs	r2, #0
    3824:	f44f 7199 	mov.w	r1, #306	; 0x132
    3828:	6878      	ldr	r0, [r7, #4]
    382a:	4b10      	ldr	r3, [pc, #64]	; (386c <_ZN12States_Class15StateInitializeEm+0xb8>)
    382c:	4798      	blx	r3
	}



	
	}
    382e:	e003      	b.n	3838 <_ZN12States_Class15StateInitializeEm+0x84>
		Stop(0);
    3830:	2100      	movs	r1, #0
    3832:	6878      	ldr	r0, [r7, #4]
    3834:	4b0e      	ldr	r3, [pc, #56]	; (3870 <_ZN12States_Class15StateInitializeEm+0xbc>)
    3836:	4798      	blx	r3
	}
    3838:	bf00      	nop
    383a:	3720      	adds	r7, #32
    383c:	46bd      	mov	sp, r7
    383e:	bd80      	pop	{r7, pc}
    3840:	000003c5 	.word	0x000003c5
    3844:	000208dc 	.word	0x000208dc
    3848:	2000a368 	.word	0x2000a368
    384c:	000045ad 	.word	0x000045ad
    3850:	000014a5 	.word	0x000014a5
    3854:	00020884 	.word	0x00020884
    3858:	00000c99 	.word	0x00000c99
    385c:	20008154 	.word	0x20008154
    3860:	00020900 	.word	0x00020900
    3864:	00002441 	.word	0x00002441
    3868:	00004145 	.word	0x00004145
    386c:	000040f5 	.word	0x000040f5
    3870:	000041f9 	.word	0x000041f9

00003874 <_ZN12States_Class11StateResumeEm>:


void States_Class::StateResume(uint32 flags)
	{
    3874:	b580      	push	{r7, lr}
    3876:	b088      	sub	sp, #32
    3878:	af00      	add	r7, sp, #0
    387a:	6078      	str	r0, [r7, #4]
    387c:	6039      	str	r1, [r7, #0]
	event	e;
    387e:	f107 030c 	add.w	r3, r7, #12
    3882:	4618      	mov	r0, r3
    3884:	4b23      	ldr	r3, [pc, #140]	; (3914 <_ZN12States_Class11StateResumeEm+0xa0>)
    3886:	4798      	blx	r3
	uint8	currentState(hvacState->currentState);
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3890:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kHVACNoError);
    3892:	2300      	movs	r3, #0
    3894:	83bb      	strh	r3, [r7, #28]
	usb << "state.currentState (after) " << hvacState->currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kHVACNoError)
    3896:	8bbb      	ldrh	r3, [r7, #28]
    3898:	2b00      	cmp	r3, #0
    389a:	d128      	bne.n	38ee <_ZN12States_Class11StateResumeEm+0x7a>
    {
        switch (hvacState->currentState)
    389c:	687b      	ldr	r3, [r7, #4]
    389e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    38a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    38a4:	f240 1239 	movw	r2, #313	; 0x139
    38a8:	4293      	cmp	r3, r2
    38aa:	d003      	beq.n	38b4 <_ZN12States_Class11StateResumeEm+0x40>
    38ac:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
    38b0:	d00b      	beq.n	38ca <_ZN12States_Class11StateResumeEm+0x56>
    38b2:	e011      	b.n	38d8 <_ZN12States_Class11StateResumeEm+0x64>
        {
        case kHVACStateON:
            prepareStateChangeEvent( hvacState->currentState, true);
    38b4:	687b      	ldr	r3, [r7, #4]
    38b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    38ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    38bc:	b29b      	uxth	r3, r3
    38be:	2201      	movs	r2, #1
    38c0:	4619      	mov	r1, r3
    38c2:	6878      	ldr	r0, [r7, #4]
    38c4:	4b14      	ldr	r3, [pc, #80]	; (3918 <_ZN12States_Class11StateResumeEm+0xa4>)
    38c6:	4798      	blx	r3
            break;
    38c8:	e011      	b.n	38ee <_ZN12States_Class11StateResumeEm+0x7a>

        case kHVACStateStoppedProcess:
            prepareStateChangeEvent( kHVACStateStoppedProcess);
    38ca:	2200      	movs	r2, #0
    38cc:	f44f 719d 	mov.w	r1, #314	; 0x13a
    38d0:	6878      	ldr	r0, [r7, #4]
    38d2:	4b11      	ldr	r3, [pc, #68]	; (3918 <_ZN12States_Class11StateResumeEm+0xa4>)
    38d4:	4798      	blx	r3
            break;
    38d6:	e00a      	b.n	38ee <_ZN12States_Class11StateResumeEm+0x7a>

        default:
            prepareStateChangeEvent( hvacState->currentState);
    38d8:	687b      	ldr	r3, [r7, #4]
    38da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    38de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    38e0:	b29b      	uxth	r3, r3
    38e2:	2200      	movs	r2, #0
    38e4:	4619      	mov	r1, r3
    38e6:	6878      	ldr	r0, [r7, #4]
    38e8:	4b0b      	ldr	r3, [pc, #44]	; (3918 <_ZN12States_Class11StateResumeEm+0xa4>)
    38ea:	4798      	blx	r3
            break;
    38ec:	bf00      	nop
        }
    }

	hvacState->currentState = currentState;
    38ee:	687b      	ldr	r3, [r7, #4]
    38f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    38f4:	7ffa      	ldrb	r2, [r7, #31]
    38f6:	625a      	str	r2, [r3, #36]	; 0x24

	listener.CheckEvent();
    38f8:	4808      	ldr	r0, [pc, #32]	; (391c <_ZN12States_Class11StateResumeEm+0xa8>)
    38fa:	4b09      	ldr	r3, [pc, #36]	; (3920 <_ZN12States_Class11StateResumeEm+0xac>)
    38fc:	4798      	blx	r3
	listener.SendEventSelf(e);
    38fe:	f107 030c 	add.w	r3, r7, #12
    3902:	4619      	mov	r1, r3
    3904:	4805      	ldr	r0, [pc, #20]	; (391c <_ZN12States_Class11StateResumeEm+0xa8>)
    3906:	4b07      	ldr	r3, [pc, #28]	; (3924 <_ZN12States_Class11StateResumeEm+0xb0>)
    3908:	4798      	blx	r3
	}
    390a:	bf00      	nop
    390c:	3720      	adds	r7, #32
    390e:	46bd      	mov	sp, r7
    3910:	bd80      	pop	{r7, pc}
    3912:	bf00      	nop
    3914:	000003c5 	.word	0x000003c5
    3918:	000040f5 	.word	0x000040f5
    391c:	200099f8 	.word	0x200099f8
    3920:	00014ff1 	.word	0x00014ff1
    3924:	00014ea9 	.word	0x00014ea9

00003928 <_ZN12States_Class15StateStandbyOFFEm>:
				
void States_Class::StateStandbyOFF(uint32 flags)
{
    3928:	b580      	push	{r7, lr}
    392a:	b088      	sub	sp, #32
    392c:	af00      	add	r7, sp, #0
    392e:	6078      	str	r0, [r7, #4]
    3930:	6039      	str	r1, [r7, #0]
	event	e;
    3932:	f107 030c 	add.w	r3, r7, #12
    3936:	4618      	mov	r0, r3
    3938:	4b39      	ldr	r3, [pc, #228]	; (3a20 <_ZN12States_Class15StateStandbyOFFEm+0xf8>)
    393a:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyOFF;
    393c:	687b      	ldr	r3, [r7, #4]
    393e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3942:	f44f 7299 	mov.w	r2, #306	; 0x132
    3946:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=OFF;
    3948:	687b      	ldr	r3, [r7, #4]
    394a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    394e:	2200      	movs	r2, #0
    3950:	771a      	strb	r2, [r3, #28]
	hvacState->arincStatus.AC_CMD=false;
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3958:	7f53      	ldrb	r3, [r2, #29]
    395a:	f36f 0300 	bfc	r3, #0, #1
    395e:	7753      	strb	r3, [r2, #29]
	bool	done(false);
    3960:	2300      	movs	r3, #0
    3962:	77fb      	strb	r3, [r7, #31]

#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    3964:	492f      	ldr	r1, [pc, #188]	; (3a24 <_ZN12States_Class15StateStandbyOFFEm+0xfc>)
    3966:	4830      	ldr	r0, [pc, #192]	; (3a28 <_ZN12States_Class15StateStandbyOFFEm+0x100>)
    3968:	4b30      	ldr	r3, [pc, #192]	; (3a2c <_ZN12States_Class15StateStandbyOFFEm+0x104>)
    396a:	4798      	blx	r3
    396c:	4603      	mov	r3, r0
    396e:	4930      	ldr	r1, [pc, #192]	; (3a30 <_ZN12States_Class15StateStandbyOFFEm+0x108>)
    3970:	4618      	mov	r0, r3
    3972:	4b30      	ldr	r3, [pc, #192]	; (3a34 <_ZN12States_Class15StateStandbyOFFEm+0x10c>)
    3974:	4798      	blx	r3
#endif




	listener.eventHandler=&States_Class::CheckEvents;
    3976:	4b30      	ldr	r3, [pc, #192]	; (3a38 <_ZN12States_Class15StateStandbyOFFEm+0x110>)
    3978:	4a30      	ldr	r2, [pc, #192]	; (3a3c <_ZN12States_Class15StateStandbyOFFEm+0x114>)
    397a:	615a      	str	r2, [r3, #20]
	if (fv1.IsPositionChanged())
    397c:	4830      	ldr	r0, [pc, #192]	; (3a40 <_ZN12States_Class15StateStandbyOFFEm+0x118>)
    397e:	4b31      	ldr	r3, [pc, #196]	; (3a44 <_ZN12States_Class15StateStandbyOFFEm+0x11c>)
    3980:	4798      	blx	r3
    3982:	4603      	mov	r3, r0
    3984:	2b00      	cmp	r3, #0
    3986:	d002      	beq.n	398e <_ZN12States_Class15StateStandbyOFFEm+0x66>
	{
		arinc.SaveFlapperValveAngle();
    3988:	482f      	ldr	r0, [pc, #188]	; (3a48 <_ZN12States_Class15StateStandbyOFFEm+0x120>)
    398a:	4b30      	ldr	r3, [pc, #192]	; (3a4c <_ZN12States_Class15StateStandbyOFFEm+0x124>)
    398c:	4798      	blx	r3
	}
	while(!done){
    398e:	7ffb      	ldrb	r3, [r7, #31]
    3990:	2b00      	cmp	r3, #0
    3992:	d141      	bne.n	3a18 <_ZN12States_Class15StateStandbyOFFEm+0xf0>
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    3994:	f107 030c 	add.w	r3, r7, #12
    3998:	2208      	movs	r2, #8
    399a:	4619      	mov	r1, r3
    399c:	6878      	ldr	r0, [r7, #4]
    399e:	4b2c      	ldr	r3, [pc, #176]	; (3a50 <_ZN12States_Class15StateStandbyOFFEm+0x128>)
    39a0:	4798      	blx	r3
    39a2:	4603      	mov	r3, r0
    39a4:	2b00      	cmp	r3, #0
    39a6:	d034      	beq.n	3a12 <_ZN12States_Class15StateStandbyOFFEm+0xea>
		{
			switch(e.eventClass){
    39a8:	89bb      	ldrh	r3, [r7, #12]
    39aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    39ae:	d006      	beq.n	39be <_ZN12States_Class15StateStandbyOFFEm+0x96>
    39b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    39b4:	d01f      	beq.n	39f6 <_ZN12States_Class15StateStandbyOFFEm+0xce>
    39b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    39ba:	d00e      	beq.n	39da <_ZN12States_Class15StateStandbyOFFEm+0xb2>
						break;
					}
		
				break;
				default:
				break;
    39bc:	e02b      	b.n	3a16 <_ZN12States_Class15StateStandbyOFFEm+0xee>
					switch (e.eventType){
    39be:	89fb      	ldrh	r3, [r7, #14]
    39c0:	2b03      	cmp	r3, #3
    39c2:	d000      	beq.n	39c6 <_ZN12States_Class15StateStandbyOFFEm+0x9e>
						break;
    39c4:	e008      	b.n	39d8 <_ZN12States_Class15StateStandbyOFFEm+0xb0>
							prepareStateChangeEvent(kHVACStateLeaving);
    39c6:	2200      	movs	r2, #0
    39c8:	f240 1143 	movw	r1, #323	; 0x143
    39cc:	6878      	ldr	r0, [r7, #4]
    39ce:	4b21      	ldr	r3, [pc, #132]	; (3a54 <_ZN12States_Class15StateStandbyOFFEm+0x12c>)
    39d0:	4798      	blx	r3
							done=true;
    39d2:	2301      	movs	r3, #1
    39d4:	77fb      	strb	r3, [r7, #31]
						break;
    39d6:	bf00      	nop
				break;
    39d8:	e01d      	b.n	3a16 <_ZN12States_Class15StateStandbyOFFEm+0xee>
					switch (e.eventType){
    39da:	89fb      	ldrh	r3, [r7, #14]
    39dc:	2b03      	cmp	r3, #3
    39de:	d000      	beq.n	39e2 <_ZN12States_Class15StateStandbyOFFEm+0xba>
							break;
    39e0:	e008      	b.n	39f4 <_ZN12States_Class15StateStandbyOFFEm+0xcc>
								prepareStateChangeEvent(kHVACStateLeaving);
    39e2:	2200      	movs	r2, #0
    39e4:	f240 1143 	movw	r1, #323	; 0x143
    39e8:	6878      	ldr	r0, [r7, #4]
    39ea:	4b1a      	ldr	r3, [pc, #104]	; (3a54 <_ZN12States_Class15StateStandbyOFFEm+0x12c>)
    39ec:	4798      	blx	r3
								done=true;
    39ee:	2301      	movs	r3, #1
    39f0:	77fb      	strb	r3, [r7, #31]
							break;
    39f2:	bf00      	nop
				break;
    39f4:	e00f      	b.n	3a16 <_ZN12States_Class15StateStandbyOFFEm+0xee>
					switch (e.eventType){
    39f6:	89fb      	ldrh	r3, [r7, #14]
    39f8:	2b04      	cmp	r3, #4
    39fa:	d000      	beq.n	39fe <_ZN12States_Class15StateStandbyOFFEm+0xd6>
						break;
    39fc:	e008      	b.n	3a10 <_ZN12States_Class15StateStandbyOFFEm+0xe8>
							prepareStateChangeEvent(kHVACStatePrepareStandbyON);
    39fe:	2200      	movs	r2, #0
    3a00:	f44f 719a 	mov.w	r1, #308	; 0x134
    3a04:	6878      	ldr	r0, [r7, #4]
    3a06:	4b13      	ldr	r3, [pc, #76]	; (3a54 <_ZN12States_Class15StateStandbyOFFEm+0x12c>)
    3a08:	4798      	blx	r3
							done=true;
    3a0a:	2301      	movs	r3, #1
    3a0c:	77fb      	strb	r3, [r7, #31]
						break;
    3a0e:	bf00      	nop
				break;
    3a10:	e001      	b.n	3a16 <_ZN12States_Class15StateStandbyOFFEm+0xee>
		
			
		} 
		else
		{
			done=false;			
    3a12:	2300      	movs	r3, #0
    3a14:	77fb      	strb	r3, [r7, #31]
	while(!done){
    3a16:	e7ba      	b.n	398e <_ZN12States_Class15StateStandbyOFFEm+0x66>
		}
	}



}
    3a18:	bf00      	nop
    3a1a:	3720      	adds	r7, #32
    3a1c:	46bd      	mov	sp, r7
    3a1e:	bd80      	pop	{r7, pc}
    3a20:	000003c5 	.word	0x000003c5
    3a24:	00020918 	.word	0x00020918
    3a28:	2000a368 	.word	0x2000a368
    3a2c:	00002441 	.word	0x00002441
    3a30:	00020884 	.word	0x00020884
    3a34:	00000c99 	.word	0x00000c99
    3a38:	200099f8 	.word	0x200099f8
    3a3c:	0000444d 	.word	0x0000444d
    3a40:	20009b10 	.word	0x20009b10
    3a44:	0001563d 	.word	0x0001563d
    3a48:	20008ec8 	.word	0x20008ec8
    3a4c:	00012c5d 	.word	0x00012c5d
    3a50:	000040bd 	.word	0x000040bd
    3a54:	000040f5 	.word	0x000040f5

00003a58 <_ZN12States_Class16StateStandbyAUTOEm>:
	
void States_Class::StateStandbyAUTO(uint32 flags)
{
    3a58:	b580      	push	{r7, lr}
    3a5a:	b088      	sub	sp, #32
    3a5c:	af00      	add	r7, sp, #0
    3a5e:	6078      	str	r0, [r7, #4]
    3a60:	6039      	str	r1, [r7, #0]
	event	e;
    3a62:	f107 030c 	add.w	r3, r7, #12
    3a66:	4618      	mov	r0, r3
    3a68:	4b4d      	ldr	r3, [pc, #308]	; (3ba0 <_ZN12States_Class16StateStandbyAUTOEm+0x148>)
    3a6a:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyAUTO;
    3a6c:	687b      	ldr	r3, [r7, #4]
    3a6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3a72:	f240 1231 	movw	r2, #305	; 0x131
    3a76:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=AUTO;
    3a78:	687b      	ldr	r3, [r7, #4]
    3a7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3a7e:	2202      	movs	r2, #2
    3a80:	771a      	strb	r2, [r3, #28]
	hvacState->arincStatus.AC_CMD=true;
    3a82:	687b      	ldr	r3, [r7, #4]
    3a84:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3a88:	7f53      	ldrb	r3, [r2, #29]
    3a8a:	f043 0301 	orr.w	r3, r3, #1
    3a8e:	7753      	strb	r3, [r2, #29]
	bool	done(false);
    3a90:	2300      	movs	r3, #0
    3a92:	77fb      	strb	r3, [r7, #31]
	gotAluEvent=false;
    3a94:	687b      	ldr	r3, [r7, #4]
    3a96:	2200      	movs	r2, #0
    3a98:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	gotHVACEvent=false;
    3a9c:	687b      	ldr	r3, [r7, #4]
    3a9e:	2200      	movs	r2, #0
    3aa0:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	
	#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    3aa4:	493f      	ldr	r1, [pc, #252]	; (3ba4 <_ZN12States_Class16StateStandbyAUTOEm+0x14c>)
    3aa6:	4840      	ldr	r0, [pc, #256]	; (3ba8 <_ZN12States_Class16StateStandbyAUTOEm+0x150>)
    3aa8:	4b40      	ldr	r3, [pc, #256]	; (3bac <_ZN12States_Class16StateStandbyAUTOEm+0x154>)
    3aaa:	4798      	blx	r3
    3aac:	4603      	mov	r3, r0
    3aae:	4940      	ldr	r1, [pc, #256]	; (3bb0 <_ZN12States_Class16StateStandbyAUTOEm+0x158>)
    3ab0:	4618      	mov	r0, r3
    3ab2:	4b40      	ldr	r3, [pc, #256]	; (3bb4 <_ZN12States_Class16StateStandbyAUTOEm+0x15c>)
    3ab4:	4798      	blx	r3
	#endif




	listener.eventHandler=&States_Class::CheckEvents;
    3ab6:	4b40      	ldr	r3, [pc, #256]	; (3bb8 <_ZN12States_Class16StateStandbyAUTOEm+0x160>)
    3ab8:	4a40      	ldr	r2, [pc, #256]	; (3bbc <_ZN12States_Class16StateStandbyAUTOEm+0x164>)
    3aba:	615a      	str	r2, [r3, #20]
	while(!done){
    3abc:	7ffb      	ldrb	r3, [r7, #31]
    3abe:	2b00      	cmp	r3, #0
    3ac0:	d164      	bne.n	3b8c <_ZN12States_Class16StateStandbyAUTOEm+0x134>
		do
		{
				fv1.WriteSetpoint(GetFlapperValveSetpoint());
    3ac2:	687b      	ldr	r3, [r7, #4]
    3ac4:	681b      	ldr	r3, [r3, #0]
    3ac6:	3b10      	subs	r3, #16
    3ac8:	681b      	ldr	r3, [r3, #0]
    3aca:	461a      	mov	r2, r3
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	4413      	add	r3, r2
    3ad0:	4618      	mov	r0, r3
    3ad2:	4b3b      	ldr	r3, [pc, #236]	; (3bc0 <_ZN12States_Class16StateStandbyAUTOEm+0x168>)
    3ad4:	4798      	blx	r3
    3ad6:	4603      	mov	r3, r0
    3ad8:	4619      	mov	r1, r3
    3ada:	483a      	ldr	r0, [pc, #232]	; (3bc4 <_ZN12States_Class16StateStandbyAUTOEm+0x16c>)
    3adc:	4b3a      	ldr	r3, [pc, #232]	; (3bc8 <_ZN12States_Class16StateStandbyAUTOEm+0x170>)
    3ade:	4798      	blx	r3
		}while(IsNewFlapperValveSetpoint());
    3ae0:	687b      	ldr	r3, [r7, #4]
    3ae2:	681b      	ldr	r3, [r3, #0]
    3ae4:	3b10      	subs	r3, #16
    3ae6:	681b      	ldr	r3, [r3, #0]
    3ae8:	461a      	mov	r2, r3
    3aea:	687b      	ldr	r3, [r7, #4]
    3aec:	4413      	add	r3, r2
		do
    3aee:	4618      	mov	r0, r3
    3af0:	4b36      	ldr	r3, [pc, #216]	; (3bcc <_ZN12States_Class16StateStandbyAUTOEm+0x174>)
    3af2:	4798      	blx	r3
    3af4:	4603      	mov	r3, r0
    3af6:	2b00      	cmp	r3, #0
    3af8:	d000      	beq.n	3afc <_ZN12States_Class16StateStandbyAUTOEm+0xa4>
    3afa:	e7e2      	b.n	3ac2 <_ZN12States_Class16StateStandbyAUTOEm+0x6a>
	
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    3afc:	f107 030c 	add.w	r3, r7, #12
    3b00:	2208      	movs	r2, #8
    3b02:	4619      	mov	r1, r3
    3b04:	6878      	ldr	r0, [r7, #4]
    3b06:	4b32      	ldr	r3, [pc, #200]	; (3bd0 <_ZN12States_Class16StateStandbyAUTOEm+0x178>)
    3b08:	4798      	blx	r3
    3b0a:	4603      	mov	r3, r0
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d03a      	beq.n	3b86 <_ZN12States_Class16StateStandbyAUTOEm+0x12e>
		{
			switch(e.eventClass){
    3b10:	89bb      	ldrh	r3, [r7, #12]
    3b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3b16:	d006      	beq.n	3b26 <_ZN12States_Class16StateStandbyAUTOEm+0xce>
    3b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3b1c:	d025      	beq.n	3b6a <_ZN12States_Class16StateStandbyAUTOEm+0x112>
    3b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3b22:	d011      	beq.n	3b48 <_ZN12States_Class16StateStandbyAUTOEm+0xf0>
						break;
					}
				
				break;
				default:
				break;
    3b24:	e031      	b.n	3b8a <_ZN12States_Class16StateStandbyAUTOEm+0x132>
					switch (e.eventType){
    3b26:	89fb      	ldrh	r3, [r7, #14]
    3b28:	2b03      	cmp	r3, #3
    3b2a:	d000      	beq.n	3b2e <_ZN12States_Class16StateStandbyAUTOEm+0xd6>
						break;
    3b2c:	e00b      	b.n	3b46 <_ZN12States_Class16StateStandbyAUTOEm+0xee>
							saveCurrentState();
    3b2e:	6878      	ldr	r0, [r7, #4]
    3b30:	4b28      	ldr	r3, [pc, #160]	; (3bd4 <_ZN12States_Class16StateStandbyAUTOEm+0x17c>)
    3b32:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateLeaving);
    3b34:	2200      	movs	r2, #0
    3b36:	f240 1143 	movw	r1, #323	; 0x143
    3b3a:	6878      	ldr	r0, [r7, #4]
    3b3c:	4b26      	ldr	r3, [pc, #152]	; (3bd8 <_ZN12States_Class16StateStandbyAUTOEm+0x180>)
    3b3e:	4798      	blx	r3
							done=true;
    3b40:	2301      	movs	r3, #1
    3b42:	77fb      	strb	r3, [r7, #31]
						break;
    3b44:	bf00      	nop
				break;
    3b46:	e020      	b.n	3b8a <_ZN12States_Class16StateStandbyAUTOEm+0x132>
					switch (e.eventType){
    3b48:	89fb      	ldrh	r3, [r7, #14]
    3b4a:	2b03      	cmp	r3, #3
    3b4c:	d000      	beq.n	3b50 <_ZN12States_Class16StateStandbyAUTOEm+0xf8>
						break;
    3b4e:	e00b      	b.n	3b68 <_ZN12States_Class16StateStandbyAUTOEm+0x110>
							saveCurrentState();
    3b50:	6878      	ldr	r0, [r7, #4]
    3b52:	4b20      	ldr	r3, [pc, #128]	; (3bd4 <_ZN12States_Class16StateStandbyAUTOEm+0x17c>)
    3b54:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateLeaving);
    3b56:	2200      	movs	r2, #0
    3b58:	f240 1143 	movw	r1, #323	; 0x143
    3b5c:	6878      	ldr	r0, [r7, #4]
    3b5e:	4b1e      	ldr	r3, [pc, #120]	; (3bd8 <_ZN12States_Class16StateStandbyAUTOEm+0x180>)
    3b60:	4798      	blx	r3
							done=true;
    3b62:	2301      	movs	r3, #1
    3b64:	77fb      	strb	r3, [r7, #31]
						break;
    3b66:	bf00      	nop
				break;
    3b68:	e00f      	b.n	3b8a <_ZN12States_Class16StateStandbyAUTOEm+0x132>
					switch (e.eventType){
    3b6a:	89fb      	ldrh	r3, [r7, #14]
    3b6c:	2b05      	cmp	r3, #5
    3b6e:	d000      	beq.n	3b72 <_ZN12States_Class16StateStandbyAUTOEm+0x11a>
						break;
    3b70:	e008      	b.n	3b84 <_ZN12States_Class16StateStandbyAUTOEm+0x12c>
							prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3b72:	2200      	movs	r2, #0
    3b74:	f240 1133 	movw	r1, #307	; 0x133
    3b78:	6878      	ldr	r0, [r7, #4]
    3b7a:	4b17      	ldr	r3, [pc, #92]	; (3bd8 <_ZN12States_Class16StateStandbyAUTOEm+0x180>)
    3b7c:	4798      	blx	r3
							done=true;
    3b7e:	2301      	movs	r3, #1
    3b80:	77fb      	strb	r3, [r7, #31]
						break;
    3b82:	bf00      	nop
				break;
    3b84:	e001      	b.n	3b8a <_ZN12States_Class16StateStandbyAUTOEm+0x132>
			
			
		}
		else
		{
			done=false;
    3b86:	2300      	movs	r3, #0
    3b88:	77fb      	strb	r3, [r7, #31]
	while(!done){
    3b8a:	e797      	b.n	3abc <_ZN12States_Class16StateStandbyAUTOEm+0x64>
		}
	}

	prepareStateChangeEvent(kHVACStateLeaving);
    3b8c:	2200      	movs	r2, #0
    3b8e:	f240 1143 	movw	r1, #323	; 0x143
    3b92:	6878      	ldr	r0, [r7, #4]
    3b94:	4b10      	ldr	r3, [pc, #64]	; (3bd8 <_ZN12States_Class16StateStandbyAUTOEm+0x180>)
    3b96:	4798      	blx	r3

}
    3b98:	bf00      	nop
    3b9a:	3720      	adds	r7, #32
    3b9c:	46bd      	mov	sp, r7
    3b9e:	bd80      	pop	{r7, pc}
    3ba0:	000003c5 	.word	0x000003c5
    3ba4:	00020918 	.word	0x00020918
    3ba8:	2000a368 	.word	0x2000a368
    3bac:	00002441 	.word	0x00002441
    3bb0:	00020884 	.word	0x00020884
    3bb4:	00000c99 	.word	0x00000c99
    3bb8:	200099f8 	.word	0x200099f8
    3bbc:	0000444d 	.word	0x0000444d
    3bc0:	00001d4d 	.word	0x00001d4d
    3bc4:	20009b10 	.word	0x20009b10
    3bc8:	000153c9 	.word	0x000153c9
    3bcc:	00001d65 	.word	0x00001d65
    3bd0:	000040bd 	.word	0x000040bd
    3bd4:	00004169 	.word	0x00004169
    3bd8:	000040f5 	.word	0x000040f5

00003bdc <_ZN12States_Class16StateStandbyVENTEm>:

void States_Class::StateStandbyVENT(uint32 flags)
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b08a      	sub	sp, #40	; 0x28
    3be0:	af00      	add	r7, sp, #0
    3be2:	6078      	str	r0, [r7, #4]
    3be4:	6039      	str	r1, [r7, #0]
	event	e;
    3be6:	f107 030c 	add.w	r3, r7, #12
    3bea:	4618      	mov	r0, r3
    3bec:	4b4b      	ldr	r3, [pc, #300]	; (3d1c <_ZN12States_Class16StateStandbyVENTEm+0x140>)
    3bee:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyVENT;
    3bf0:	687b      	ldr	r3, [r7, #4]
    3bf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3bf6:	f44f 7298 	mov.w	r2, #304	; 0x130
    3bfa:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=VENT;
    3bfc:	687b      	ldr	r3, [r7, #4]
    3bfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3c02:	2201      	movs	r2, #1
    3c04:	771a      	strb	r2, [r3, #28]
	hvacState->arincStatus.AC_CMD=true;
    3c06:	687b      	ldr	r3, [r7, #4]
    3c08:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3c0c:	7f53      	ldrb	r3, [r2, #29]
    3c0e:	f043 0301 	orr.w	r3, r3, #1
    3c12:	7753      	strb	r3, [r2, #29]
	bool	done(false);
    3c14:	2300      	movs	r3, #0
    3c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t	coolingRequired;

	
	#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    3c1a:	4941      	ldr	r1, [pc, #260]	; (3d20 <_ZN12States_Class16StateStandbyVENTEm+0x144>)
    3c1c:	4841      	ldr	r0, [pc, #260]	; (3d24 <_ZN12States_Class16StateStandbyVENTEm+0x148>)
    3c1e:	4b42      	ldr	r3, [pc, #264]	; (3d28 <_ZN12States_Class16StateStandbyVENTEm+0x14c>)
    3c20:	4798      	blx	r3
    3c22:	4603      	mov	r3, r0
    3c24:	4941      	ldr	r1, [pc, #260]	; (3d2c <_ZN12States_Class16StateStandbyVENTEm+0x150>)
    3c26:	4618      	mov	r0, r3
    3c28:	4b41      	ldr	r3, [pc, #260]	; (3d30 <_ZN12States_Class16StateStandbyVENTEm+0x154>)
    3c2a:	4798      	blx	r3
	#endif




	listener.eventHandler=&States_Class::CheckEvents;
    3c2c:	4b41      	ldr	r3, [pc, #260]	; (3d34 <_ZN12States_Class16StateStandbyVENTEm+0x158>)
    3c2e:	4a42      	ldr	r2, [pc, #264]	; (3d38 <_ZN12States_Class16StateStandbyVENTEm+0x15c>)
    3c30:	615a      	str	r2, [r3, #20]
	while(!done){
    3c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3c36:	2b00      	cmp	r3, #0
    3c38:	d166      	bne.n	3d08 <_ZN12States_Class16StateStandbyVENTEm+0x12c>
		cokspitTemperature=temperatures.values[0][1];
    3c3a:	4b40      	ldr	r3, [pc, #256]	; (3d3c <_ZN12States_Class16StateStandbyVENTEm+0x160>)
    3c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3c3e:	623b      	str	r3, [r7, #32]
		coolingRequired=0x80+(uint8_t)(((uint32_t)((cokspitTemperature*10)-200))&0xff);
    3c40:	4b3f      	ldr	r3, [pc, #252]	; (3d40 <_ZN12States_Class16StateStandbyVENTEm+0x164>)
    3c42:	4940      	ldr	r1, [pc, #256]	; (3d44 <_ZN12States_Class16StateStandbyVENTEm+0x168>)
    3c44:	6a38      	ldr	r0, [r7, #32]
    3c46:	4798      	blx	r3
    3c48:	4603      	mov	r3, r0
    3c4a:	461a      	mov	r2, r3
    3c4c:	4b3e      	ldr	r3, [pc, #248]	; (3d48 <_ZN12States_Class16StateStandbyVENTEm+0x16c>)
    3c4e:	493f      	ldr	r1, [pc, #252]	; (3d4c <_ZN12States_Class16StateStandbyVENTEm+0x170>)
    3c50:	4610      	mov	r0, r2
    3c52:	4798      	blx	r3
    3c54:	4603      	mov	r3, r0
    3c56:	461a      	mov	r2, r3
    3c58:	4b3d      	ldr	r3, [pc, #244]	; (3d50 <_ZN12States_Class16StateStandbyVENTEm+0x174>)
    3c5a:	4610      	mov	r0, r2
    3c5c:	4798      	blx	r3
    3c5e:	4603      	mov	r3, r0
    3c60:	b2db      	uxtb	r3, r3
    3c62:	3b80      	subs	r3, #128	; 0x80
    3c64:	77fb      	strb	r3, [r7, #31]
		fv1.WriteSetpoint(coolingRequired);
    3c66:	7ffb      	ldrb	r3, [r7, #31]
    3c68:	4619      	mov	r1, r3
    3c6a:	483a      	ldr	r0, [pc, #232]	; (3d54 <_ZN12States_Class16StateStandbyVENTEm+0x178>)
    3c6c:	4b3a      	ldr	r3, [pc, #232]	; (3d58 <_ZN12States_Class16StateStandbyVENTEm+0x17c>)
    3c6e:	4798      	blx	r3
		
		
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    3c70:	f107 030c 	add.w	r3, r7, #12
    3c74:	2208      	movs	r2, #8
    3c76:	4619      	mov	r1, r3
    3c78:	6878      	ldr	r0, [r7, #4]
    3c7a:	4b38      	ldr	r3, [pc, #224]	; (3d5c <_ZN12States_Class16StateStandbyVENTEm+0x180>)
    3c7c:	4798      	blx	r3
    3c7e:	4603      	mov	r3, r0
    3c80:	2b00      	cmp	r3, #0
    3c82:	d03d      	beq.n	3d00 <_ZN12States_Class16StateStandbyVENTEm+0x124>
		{
			switch(e.eventClass){
    3c84:	89bb      	ldrh	r3, [r7, #12]
    3c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3c8a:	d006      	beq.n	3c9a <_ZN12States_Class16StateStandbyVENTEm+0xbe>
    3c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3c90:	d027      	beq.n	3ce2 <_ZN12States_Class16StateStandbyVENTEm+0x106>
    3c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3c96:	d012      	beq.n	3cbe <_ZN12States_Class16StateStandbyVENTEm+0xe2>
					break;
				}
				
				break;
				default:
				break;
    3c98:	e035      	b.n	3d06 <_ZN12States_Class16StateStandbyVENTEm+0x12a>
				switch (e.eventType){
    3c9a:	89fb      	ldrh	r3, [r7, #14]
    3c9c:	2b03      	cmp	r3, #3
    3c9e:	d000      	beq.n	3ca2 <_ZN12States_Class16StateStandbyVENTEm+0xc6>
					break;
    3ca0:	e00c      	b.n	3cbc <_ZN12States_Class16StateStandbyVENTEm+0xe0>
						saveCurrentState();
    3ca2:	6878      	ldr	r0, [r7, #4]
    3ca4:	4b2e      	ldr	r3, [pc, #184]	; (3d60 <_ZN12States_Class16StateStandbyVENTEm+0x184>)
    3ca6:	4798      	blx	r3
						prepareStateChangeEvent(kHVACStateLeaving);
    3ca8:	2200      	movs	r2, #0
    3caa:	f240 1143 	movw	r1, #323	; 0x143
    3cae:	6878      	ldr	r0, [r7, #4]
    3cb0:	4b2c      	ldr	r3, [pc, #176]	; (3d64 <_ZN12States_Class16StateStandbyVENTEm+0x188>)
    3cb2:	4798      	blx	r3
						done=true;
    3cb4:	2301      	movs	r3, #1
    3cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    3cba:	bf00      	nop
				break;
    3cbc:	e023      	b.n	3d06 <_ZN12States_Class16StateStandbyVENTEm+0x12a>
				switch (e.eventType){
    3cbe:	89fb      	ldrh	r3, [r7, #14]
    3cc0:	2b03      	cmp	r3, #3
    3cc2:	d000      	beq.n	3cc6 <_ZN12States_Class16StateStandbyVENTEm+0xea>
					break;
    3cc4:	e00c      	b.n	3ce0 <_ZN12States_Class16StateStandbyVENTEm+0x104>
						saveCurrentState();
    3cc6:	6878      	ldr	r0, [r7, #4]
    3cc8:	4b25      	ldr	r3, [pc, #148]	; (3d60 <_ZN12States_Class16StateStandbyVENTEm+0x184>)
    3cca:	4798      	blx	r3
						prepareStateChangeEvent(kHVACStateLeaving);
    3ccc:	2200      	movs	r2, #0
    3cce:	f240 1143 	movw	r1, #323	; 0x143
    3cd2:	6878      	ldr	r0, [r7, #4]
    3cd4:	4b23      	ldr	r3, [pc, #140]	; (3d64 <_ZN12States_Class16StateStandbyVENTEm+0x188>)
    3cd6:	4798      	blx	r3
						done=true;
    3cd8:	2301      	movs	r3, #1
    3cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    3cde:	bf00      	nop
				break;
    3ce0:	e011      	b.n	3d06 <_ZN12States_Class16StateStandbyVENTEm+0x12a>
				switch (e.eventType){
    3ce2:	89fb      	ldrh	r3, [r7, #14]
    3ce4:	2b05      	cmp	r3, #5
    3ce6:	d000      	beq.n	3cea <_ZN12States_Class16StateStandbyVENTEm+0x10e>
					break;
    3ce8:	e009      	b.n	3cfe <_ZN12States_Class16StateStandbyVENTEm+0x122>
						prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3cea:	2200      	movs	r2, #0
    3cec:	f240 1133 	movw	r1, #307	; 0x133
    3cf0:	6878      	ldr	r0, [r7, #4]
    3cf2:	4b1c      	ldr	r3, [pc, #112]	; (3d64 <_ZN12States_Class16StateStandbyVENTEm+0x188>)
    3cf4:	4798      	blx	r3
						done=true;
    3cf6:	2301      	movs	r3, #1
    3cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    3cfc:	bf00      	nop
				break;
    3cfe:	e002      	b.n	3d06 <_ZN12States_Class16StateStandbyVENTEm+0x12a>
			
			
		}
		else
		{
			done=false;
    3d00:	2300      	movs	r3, #0
    3d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(!done){
    3d06:	e794      	b.n	3c32 <_ZN12States_Class16StateStandbyVENTEm+0x56>
		}
	}

	prepareStateChangeEvent(kHVACStateLeaving);
    3d08:	2200      	movs	r2, #0
    3d0a:	f240 1143 	movw	r1, #323	; 0x143
    3d0e:	6878      	ldr	r0, [r7, #4]
    3d10:	4b14      	ldr	r3, [pc, #80]	; (3d64 <_ZN12States_Class16StateStandbyVENTEm+0x188>)
    3d12:	4798      	blx	r3

}
    3d14:	bf00      	nop
    3d16:	3728      	adds	r7, #40	; 0x28
    3d18:	46bd      	mov	sp, r7
    3d1a:	bd80      	pop	{r7, pc}
    3d1c:	000003c5 	.word	0x000003c5
    3d20:	00020918 	.word	0x00020918
    3d24:	2000a368 	.word	0x2000a368
    3d28:	00002441 	.word	0x00002441
    3d2c:	00020884 	.word	0x00020884
    3d30:	00000c99 	.word	0x00000c99
    3d34:	200099f8 	.word	0x200099f8
    3d38:	0000444d 	.word	0x0000444d
    3d3c:	20009c84 	.word	0x20009c84
    3d40:	0001bae1 	.word	0x0001bae1
    3d44:	41200000 	.word	0x41200000
    3d48:	0001b8cd 	.word	0x0001b8cd
    3d4c:	43480000 	.word	0x43480000
    3d50:	0001be6d 	.word	0x0001be6d
    3d54:	20009b10 	.word	0x20009b10
    3d58:	000153c9 	.word	0x000153c9
    3d5c:	000040bd 	.word	0x000040bd
    3d60:	00004169 	.word	0x00004169
    3d64:	000040f5 	.word	0x000040f5

00003d68 <_ZN12States_Class21StatePrepareStandbyONEm>:

void States_Class::StatePrepareStandbyON(uint32 flags)
	{
    3d68:	b580      	push	{r7, lr}
    3d6a:	b082      	sub	sp, #8
    3d6c:	af00      	add	r7, sp, #0
    3d6e:	6078      	str	r0, [r7, #4]
    3d70:	6039      	str	r1, [r7, #0]
	hvacState->lastState=hvacState->currentState;
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3d78:	687a      	ldr	r2, [r7, #4]
    3d7a:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    3d7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    3d80:	621a      	str	r2, [r3, #32]
	hvacState->currentState=kHVACStatePrepareStandbyON;
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3d88:	f44f 729a 	mov.w	r2, #308	; 0x134
    3d8c:	625a      	str	r2, [r3, #36]	; 0x24
	//usb << "handleStatePrepareStandbyON" << NEWLINE;
		
#endif

	//tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
		switch (commando270.statusArinc)
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	681b      	ldr	r3, [r3, #0]
    3d92:	3b10      	subs	r3, #16
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	461a      	mov	r2, r3
    3d98:	687b      	ldr	r3, [r7, #4]
    3d9a:	4413      	add	r3, r2
    3d9c:	791b      	ldrb	r3, [r3, #4]
    3d9e:	2b01      	cmp	r3, #1
    3da0:	d00a      	beq.n	3db8 <_ZN12States_Class21StatePrepareStandbyONEm+0x50>
    3da2:	2b02      	cmp	r3, #2
    3da4:	d00f      	beq.n	3dc6 <_ZN12States_Class21StatePrepareStandbyONEm+0x5e>
    3da6:	2b00      	cmp	r3, #0
    3da8:	d114      	bne.n	3dd4 <_ZN12States_Class21StatePrepareStandbyONEm+0x6c>
		{
			case OFF:
				prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3daa:	2200      	movs	r2, #0
    3dac:	f240 1133 	movw	r1, #307	; 0x133
    3db0:	6878      	ldr	r0, [r7, #4]
    3db2:	4b0e      	ldr	r3, [pc, #56]	; (3dec <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3db4:	4798      	blx	r3
			/* Your code here */
			break;
    3db6:	e014      	b.n	3de2 <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			case VENT:
				prepareStateChangeEvent(kHVACStateStandbyVENT);
    3db8:	2200      	movs	r2, #0
    3dba:	f44f 7198 	mov.w	r1, #304	; 0x130
    3dbe:	6878      	ldr	r0, [r7, #4]
    3dc0:	4b0a      	ldr	r3, [pc, #40]	; (3dec <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3dc2:	4798      	blx	r3
			/* Your code here */
			break;
    3dc4:	e00d      	b.n	3de2 <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			case AUTO :
				prepareStateChangeEvent(kHVACStateStandbyAUTO);
    3dc6:	2200      	movs	r2, #0
    3dc8:	f240 1131 	movw	r1, #305	; 0x131
    3dcc:	6878      	ldr	r0, [r7, #4]
    3dce:	4b07      	ldr	r3, [pc, #28]	; (3dec <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3dd0:	4798      	blx	r3
			/* Your code here */
			break;
    3dd2:	e006      	b.n	3de2 <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			default:
				prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3dd4:	2200      	movs	r2, #0
    3dd6:	f240 1133 	movw	r1, #307	; 0x133
    3dda:	6878      	ldr	r0, [r7, #4]
    3ddc:	4b03      	ldr	r3, [pc, #12]	; (3dec <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3dde:	4798      	blx	r3
			/* Your code here */
			break;
    3de0:	bf00      	nop
		}
	


	}
    3de2:	bf00      	nop
    3de4:	3708      	adds	r7, #8
    3de6:	46bd      	mov	sp, r7
    3de8:	bd80      	pop	{r7, pc}
    3dea:	bf00      	nop
    3dec:	000040f5 	.word	0x000040f5

00003df0 <_ZN12States_Class22StatePrepareStandbyOFFEm>:
	
void States_Class::StatePrepareStandbyOFF(uint32 flags)
{
    3df0:	b580      	push	{r7, lr}
    3df2:	b082      	sub	sp, #8
    3df4:	af00      	add	r7, sp, #0
    3df6:	6078      	str	r0, [r7, #4]
    3df8:	6039      	str	r1, [r7, #0]
	
	hvacState->currentState=kHVACStatePrepareStandbyOFF;
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3e00:	f240 1233 	movw	r2, #307	; 0x133
    3e04:	625a      	str	r2, [r3, #36]	; 0x24
	//usb << "handleStatePrepareStandbyON" << NEWLINE;
	
	#endif

	//tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
	switch (hvacState->lastState)
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3e0c:	6a1b      	ldr	r3, [r3, #32]
    3e0e:	f240 1231 	movw	r2, #305	; 0x131
    3e12:	4293      	cmp	r3, r2
    3e14:	d00a      	beq.n	3e2c <_ZN12States_Class22StatePrepareStandbyOFFEm+0x3c>
    3e16:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    3e1a:	d00b      	beq.n	3e34 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x44>
    3e1c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
    3e20:	d000      	beq.n	3e24 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x34>
		/* Your code here */
		break;
		default:
	
		/* Your code here */
		break;
    3e22:	e008      	b.n	3e36 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x46>
			fv1.SetVentilatePosition();
    3e24:	4809      	ldr	r0, [pc, #36]	; (3e4c <_ZN12States_Class22StatePrepareStandbyOFFEm+0x5c>)
    3e26:	4b0a      	ldr	r3, [pc, #40]	; (3e50 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x60>)
    3e28:	4798      	blx	r3
		break;
    3e2a:	e004      	b.n	3e36 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x46>
			fv1.SetOffsetPosition();
    3e2c:	4807      	ldr	r0, [pc, #28]	; (3e4c <_ZN12States_Class22StatePrepareStandbyOFFEm+0x5c>)
    3e2e:	4b09      	ldr	r3, [pc, #36]	; (3e54 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x64>)
    3e30:	4798      	blx	r3
		break;
    3e32:	e000      	b.n	3e36 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x46>
		break;
    3e34:	bf00      	nop
	}
	prepareStateChangeEvent(kHVACStateStandbyOFF);
    3e36:	2200      	movs	r2, #0
    3e38:	f44f 7199 	mov.w	r1, #306	; 0x132
    3e3c:	6878      	ldr	r0, [r7, #4]
    3e3e:	4b06      	ldr	r3, [pc, #24]	; (3e58 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x68>)
    3e40:	4798      	blx	r3


}
    3e42:	bf00      	nop
    3e44:	3708      	adds	r7, #8
    3e46:	46bd      	mov	sp, r7
    3e48:	bd80      	pop	{r7, pc}
    3e4a:	bf00      	nop
    3e4c:	20009b10 	.word	0x20009b10
    3e50:	000154d9 	.word	0x000154d9
    3e54:	00015401 	.word	0x00015401
    3e58:	000040f5 	.word	0x000040f5

00003e5c <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    3e5c:	b580      	push	{r7, lr}
    3e5e:	b088      	sub	sp, #32
    3e60:	af00      	add	r7, sp, #0
    3e62:	6078      	str	r0, [r7, #4]
    3e64:	6039      	str	r1, [r7, #0]
	event	e;
    3e66:	f107 030c 	add.w	r3, r7, #12
    3e6a:	4618      	mov	r0, r3
    3e6c:	4b15      	ldr	r3, [pc, #84]	; (3ec4 <_ZN12States_Class20handleStateStandbyONEm+0x68>)
    3e6e:	4798      	blx	r3
	bool	done(false);
    3e70:	2300      	movs	r3, #0
    3e72:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	hvacState->latchClosedConfirmPending = false;
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3e7a:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
    3e7e:	f36f 1345 	bfc	r3, #5, #1
    3e82:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    hvacState->remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    3e86:	687b      	ldr	r3, [r7, #4]
    3e88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3e8c:	687a      	ldr	r2, [r7, #4]
    3e8e:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    3e92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3e96:	fb01 f202 	mul.w	r2, r1, r2
    3e9a:	645a      	str	r2, [r3, #68]	; 0x44

	
	hvacState->reedRelayOpen = false;
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3ea2:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
    3ea6:	f36f 1304 	bfc	r3, #4, #1
    3eaa:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
	
	listener.SendEventSelf(e);
    3eae:	f107 030c 	add.w	r3, r7, #12
    3eb2:	4619      	mov	r1, r3
    3eb4:	4804      	ldr	r0, [pc, #16]	; (3ec8 <_ZN12States_Class20handleStateStandbyONEm+0x6c>)
    3eb6:	4b05      	ldr	r3, [pc, #20]	; (3ecc <_ZN12States_Class20handleStateStandbyONEm+0x70>)
    3eb8:	4798      	blx	r3
	}
    3eba:	bf00      	nop
    3ebc:	3720      	adds	r7, #32
    3ebe:	46bd      	mov	sp, r7
    3ec0:	bd80      	pop	{r7, pc}
    3ec2:	bf00      	nop
    3ec4:	000003c5 	.word	0x000003c5
    3ec8:	200099f8 	.word	0x200099f8
    3ecc:	00014ea9 	.word	0x00014ea9

00003ed0 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    3ed0:	b580      	push	{r7, lr}
    3ed2:	b088      	sub	sp, #32
    3ed4:	af00      	add	r7, sp, #0
    3ed6:	6078      	str	r0, [r7, #4]
    3ed8:	6039      	str	r1, [r7, #0]
	event	e;
    3eda:	f107 030c 	add.w	r3, r7, #12
    3ede:	4618      	mov	r0, r3
    3ee0:	4b06      	ldr	r3, [pc, #24]	; (3efc <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    3ee2:	4798      	blx	r3
	bool	done(false);
    3ee4:	2300      	movs	r3, #0
    3ee6:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    3ee8:	f107 030c 	add.w	r3, r7, #12
    3eec:	4619      	mov	r1, r3
    3eee:	4804      	ldr	r0, [pc, #16]	; (3f00 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    3ef0:	4b04      	ldr	r3, [pc, #16]	; (3f04 <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    3ef2:	4798      	blx	r3
	}
    3ef4:	bf00      	nop
    3ef6:	3720      	adds	r7, #32
    3ef8:	46bd      	mov	sp, r7
    3efa:	bd80      	pop	{r7, pc}
    3efc:	000003c5 	.word	0x000003c5
    3f00:	200099f8 	.word	0x200099f8
    3f04:	00014ea9 	.word	0x00014ea9

00003f08 <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b088      	sub	sp, #32
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	6078      	str	r0, [r7, #4]
    3f10:	6039      	str	r1, [r7, #0]
	event	e;
    3f12:	f107 030c 	add.w	r3, r7, #12
    3f16:	4618      	mov	r0, r3
    3f18:	4b0b      	ldr	r3, [pc, #44]	; (3f48 <_ZN12States_Class13handleStateONEm+0x40>)
    3f1a:	4798      	blx	r3
	bool	done(false);
    3f1c:	2300      	movs	r3, #0
    3f1e:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    3f20:	2301      	movs	r3, #1
    3f22:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    3f24:	2301      	movs	r3, #1
    3f26:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    3f28:	683b      	ldr	r3, [r7, #0]
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	bf14      	ite	ne
    3f2e:	2301      	movne	r3, #1
    3f30:	2300      	moveq	r3, #0
    3f32:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    3f34:	f107 030c 	add.w	r3, r7, #12
    3f38:	4619      	mov	r1, r3
    3f3a:	4804      	ldr	r0, [pc, #16]	; (3f4c <_ZN12States_Class13handleStateONEm+0x44>)
    3f3c:	4b04      	ldr	r3, [pc, #16]	; (3f50 <_ZN12States_Class13handleStateONEm+0x48>)
    3f3e:	4798      	blx	r3
	}
    3f40:	bf00      	nop
    3f42:	3720      	adds	r7, #32
    3f44:	46bd      	mov	sp, r7
    3f46:	bd80      	pop	{r7, pc}
    3f48:	000003c5 	.word	0x000003c5
    3f4c:	200099f8 	.word	0x200099f8
    3f50:	00014ea9 	.word	0x00014ea9

00003f54 <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    3f54:	b580      	push	{r7, lr}
    3f56:	b088      	sub	sp, #32
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
    3f5c:	6039      	str	r1, [r7, #0]
	event	e;
    3f5e:	f107 030c 	add.w	r3, r7, #12
    3f62:	4618      	mov	r0, r3
    3f64:	4b06      	ldr	r3, [pc, #24]	; (3f80 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    3f66:	4798      	blx	r3
	bool	done(false);
    3f68:	2300      	movs	r3, #0
    3f6a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3f6c:	f107 030c 	add.w	r3, r7, #12
    3f70:	4619      	mov	r1, r3
    3f72:	4804      	ldr	r0, [pc, #16]	; (3f84 <_ZN12States_Class19handleStateFinishedEm+0x30>)
    3f74:	4b04      	ldr	r3, [pc, #16]	; (3f88 <_ZN12States_Class19handleStateFinishedEm+0x34>)
    3f76:	4798      	blx	r3
	}
    3f78:	bf00      	nop
    3f7a:	3720      	adds	r7, #32
    3f7c:	46bd      	mov	sp, r7
    3f7e:	bd80      	pop	{r7, pc}
    3f80:	000003c5 	.word	0x000003c5
    3f84:	200099f8 	.word	0x200099f8
    3f88:	00014ea9 	.word	0x00014ea9

00003f8c <_ZN12States_Class12StateLeavingEm>:
void States_Class::StateLeaving(uint32 flags)
{
    3f8c:	b580      	push	{r7, lr}
    3f8e:	b086      	sub	sp, #24
    3f90:	af00      	add	r7, sp, #0
    3f92:	6078      	str	r0, [r7, #4]
    3f94:	6039      	str	r1, [r7, #0]
	event	e;
    3f96:	f107 0308 	add.w	r3, r7, #8
    3f9a:	4618      	mov	r0, r3
    3f9c:	4b0b      	ldr	r3, [pc, #44]	; (3fcc <_ZN12States_Class12StateLeavingEm+0x40>)
    3f9e:	4798      	blx	r3
	hvacState->lastState=hvacState->callingState;
    3fa0:	687b      	ldr	r3, [r7, #4]
    3fa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3fa6:	687a      	ldr	r2, [r7, #4]
    3fa8:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    3fac:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3fae:	621a      	str	r2, [r3, #32]
	hvacState->currentState=kHVACStateLeaving;
    3fb0:	687b      	ldr	r3, [r7, #4]
    3fb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3fb6:	f240 1243 	movw	r2, #323	; 0x143
    3fba:	625a      	str	r2, [r3, #36]	; 0x24
	
	saveCurrentState();
    3fbc:	6878      	ldr	r0, [r7, #4]
    3fbe:	4b04      	ldr	r3, [pc, #16]	; (3fd0 <_ZN12States_Class12StateLeavingEm+0x44>)
    3fc0:	4798      	blx	r3
	//prepareStateChangeEvent(kHVACStateLeaving,(uint16)hvacState->lastState);
	//bool	done(false);
	//listener.SendEventSelf(e);
}
    3fc2:	bf00      	nop
    3fc4:	3718      	adds	r7, #24
    3fc6:	46bd      	mov	sp, r7
    3fc8:	bd80      	pop	{r7, pc}
    3fca:	bf00      	nop
    3fcc:	000003c5 	.word	0x000003c5
    3fd0:	00004169 	.word	0x00004169

00003fd4 <_ZN12States_Class19StateStoppedProcessEm>:

void States_Class::StateStoppedProcess(uint32 flags)
	{
    3fd4:	b580      	push	{r7, lr}
    3fd6:	b088      	sub	sp, #32
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
    3fdc:	6039      	str	r1, [r7, #0]
	event	e;
    3fde:	f107 030c 	add.w	r3, r7, #12
    3fe2:	4618      	mov	r0, r3
    3fe4:	4b08      	ldr	r3, [pc, #32]	; (4008 <_ZN12States_Class19StateStoppedProcessEm+0x34>)
    3fe6:	4798      	blx	r3
 	bool	done(false);
    3fe8:	2300      	movs	r3, #0
    3fea:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    3fec:	2301      	movs	r3, #1
    3fee:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    3ff0:	683b      	ldr	r3, [r7, #0]
    3ff2:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    3ff4:	f107 030c 	add.w	r3, r7, #12
    3ff8:	4619      	mov	r1, r3
    3ffa:	4804      	ldr	r0, [pc, #16]	; (400c <_ZN12States_Class19StateStoppedProcessEm+0x38>)
    3ffc:	4b04      	ldr	r3, [pc, #16]	; (4010 <_ZN12States_Class19StateStoppedProcessEm+0x3c>)
    3ffe:	4798      	blx	r3
	}
    4000:	bf00      	nop
    4002:	3720      	adds	r7, #32
    4004:	46bd      	mov	sp, r7
    4006:	bd80      	pop	{r7, pc}
    4008:	000003c5 	.word	0x000003c5
    400c:	200099f8 	.word	0x200099f8
    4010:	00014ea9 	.word	0x00014ea9

00004014 <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    4014:	b580      	push	{r7, lr}
    4016:	b088      	sub	sp, #32
    4018:	af00      	add	r7, sp, #0
    401a:	6078      	str	r0, [r7, #4]
    401c:	6039      	str	r1, [r7, #0]
	event	e;
    401e:	f107 030c 	add.w	r3, r7, #12
    4022:	4618      	mov	r0, r3
    4024:	4b06      	ldr	r3, [pc, #24]	; (4040 <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    4026:	4798      	blx	r3
	bool	done(false);
    4028:	2300      	movs	r3, #0
    402a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    402c:	f107 030c 	add.w	r3, r7, #12
    4030:	4619      	mov	r1, r3
    4032:	4804      	ldr	r0, [pc, #16]	; (4044 <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    4034:	4b04      	ldr	r3, [pc, #16]	; (4048 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    4036:	4798      	blx	r3
	}
    4038:	bf00      	nop
    403a:	3720      	adds	r7, #32
    403c:	46bd      	mov	sp, r7
    403e:	bd80      	pop	{r7, pc}
    4040:	000003c5 	.word	0x000003c5
    4044:	200099f8 	.word	0x200099f8
    4048:	00014ea9 	.word	0x00014ea9

0000404c <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    404c:	b580      	push	{r7, lr}
    404e:	b088      	sub	sp, #32
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
    4054:	6039      	str	r1, [r7, #0]
	event	e;
    4056:	f107 030c 	add.w	r3, r7, #12
    405a:	4618      	mov	r0, r3
    405c:	4b06      	ldr	r3, [pc, #24]	; (4078 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    405e:	4798      	blx	r3
	bool	done(false);
    4060:	2300      	movs	r3, #0
    4062:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    4064:	f107 030c 	add.w	r3, r7, #12
    4068:	4619      	mov	r1, r3
    406a:	4804      	ldr	r0, [pc, #16]	; (407c <_ZN12States_Class16handleStateErrorEm+0x30>)
    406c:	4b04      	ldr	r3, [pc, #16]	; (4080 <_ZN12States_Class16handleStateErrorEm+0x34>)
    406e:	4798      	blx	r3
	}
    4070:	bf00      	nop
    4072:	3720      	adds	r7, #32
    4074:	46bd      	mov	sp, r7
    4076:	bd80      	pop	{r7, pc}
    4078:	000003c5 	.word	0x000003c5
    407c:	200099f8 	.word	0x200099f8
    4080:	00014ea9 	.word	0x00014ea9

00004084 <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    4084:	b580      	push	{r7, lr}
    4086:	b088      	sub	sp, #32
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
    408c:	6039      	str	r1, [r7, #0]
	event	e;
    408e:	f107 030c 	add.w	r3, r7, #12
    4092:	4618      	mov	r0, r3
    4094:	4b06      	ldr	r3, [pc, #24]	; (40b0 <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    4096:	4798      	blx	r3
	bool	done(false);
    4098:	2300      	movs	r3, #0
    409a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    409c:	f107 030c 	add.w	r3, r7, #12
    40a0:	4619      	mov	r1, r3
    40a2:	4804      	ldr	r0, [pc, #16]	; (40b4 <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    40a4:	4b04      	ldr	r3, [pc, #16]	; (40b8 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    40a6:	4798      	blx	r3
	}
    40a8:	bf00      	nop
    40aa:	3720      	adds	r7, #32
    40ac:	46bd      	mov	sp, r7
    40ae:	bd80      	pop	{r7, pc}
    40b0:	000003c5 	.word	0x000003c5
    40b4:	200099f8 	.word	0x200099f8
    40b8:	00014ea9 	.word	0x00014ea9

000040bc <_ZN12States_Class12InStateEventER5eventl>:
	result=listener.WaitForEvent(e,kAnyEventClass,kAnyEventType,t);
	
	return result;
	}
	
bool States_Class::InStateEvent(event& e, tick_t t){
    40bc:	b590      	push	{r4, r7, lr}
    40be:	b089      	sub	sp, #36	; 0x24
    40c0:	af02      	add	r7, sp, #8
    40c2:	60f8      	str	r0, [r7, #12]
    40c4:	60b9      	str	r1, [r7, #8]
    40c6:	607a      	str	r2, [r7, #4]

	bool result=listener.WaitForEvent(e,kAnyEventClass,kAnyEventType,t);
    40c8:	687b      	ldr	r3, [r7, #4]
    40ca:	9300      	str	r3, [sp, #0]
    40cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    40d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    40d4:	68b9      	ldr	r1, [r7, #8]
    40d6:	4805      	ldr	r0, [pc, #20]	; (40ec <_ZN12States_Class12InStateEventER5eventl+0x30>)
    40d8:	4c05      	ldr	r4, [pc, #20]	; (40f0 <_ZN12States_Class12InStateEventER5eventl+0x34>)
    40da:	47a0      	blx	r4
    40dc:	4603      	mov	r3, r0
    40de:	75fb      	strb	r3, [r7, #23]
	return result;
    40e0:	7dfb      	ldrb	r3, [r7, #23]

}
    40e2:	4618      	mov	r0, r3
    40e4:	371c      	adds	r7, #28
    40e6:	46bd      	mov	sp, r7
    40e8:	bd90      	pop	{r4, r7, pc}
    40ea:	bf00      	nop
    40ec:	200099f8 	.word	0x200099f8
    40f0:	00014ce5 	.word	0x00014ce5

000040f4 <_ZN12States_Class23prepareStateChangeEventEtt>:

void States_Class::prepareStateChangeEvent(uint16 newState, uint16 data)
	{
    40f4:	b580      	push	{r7, lr}
    40f6:	b086      	sub	sp, #24
    40f8:	af00      	add	r7, sp, #0
    40fa:	6078      	str	r0, [r7, #4]
    40fc:	460b      	mov	r3, r1
    40fe:	807b      	strh	r3, [r7, #2]
    4100:	4613      	mov	r3, r2
    4102:	803b      	strh	r3, [r7, #0]
	event e;
    4104:	f107 0308 	add.w	r3, r7, #8
    4108:	4618      	mov	r0, r3
    410a:	4b0b      	ldr	r3, [pc, #44]	; (4138 <_ZN12States_Class23prepareStateChangeEventEtt+0x44>)
    410c:	4798      	blx	r3
	e.eventClass =(EventClass)kHVACEventClass;
    410e:	f44f 7300 	mov.w	r3, #512	; 0x200
    4112:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kHVACSwitchStateEvent;
    4114:	f44f 7300 	mov.w	r3, #512	; 0x200
    4118:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
    411a:	887b      	ldrh	r3, [r7, #2]
    411c:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
    411e:	883b      	ldrh	r3, [r7, #0]
    4120:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
    4122:	f107 0308 	add.w	r3, r7, #8
    4126:	4619      	mov	r1, r3
    4128:	4804      	ldr	r0, [pc, #16]	; (413c <_ZN12States_Class23prepareStateChangeEventEtt+0x48>)
    412a:	4b05      	ldr	r3, [pc, #20]	; (4140 <_ZN12States_Class23prepareStateChangeEventEtt+0x4c>)
    412c:	4798      	blx	r3
	}
    412e:	bf00      	nop
    4130:	3718      	adds	r7, #24
    4132:	46bd      	mov	sp, r7
    4134:	bd80      	pop	{r7, pc}
    4136:	bf00      	nop
    4138:	000003c5 	.word	0x000003c5
    413c:	200099f8 	.word	0x200099f8
    4140:	00014ea9 	.word	0x00014ea9

00004144 <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    4144:	b580      	push	{r7, lr}
    4146:	b088      	sub	sp, #32
    4148:	af00      	add	r7, sp, #0
    414a:	6078      	str	r0, [r7, #4]
	event	e;
    414c:	f107 030c 	add.w	r3, r7, #12
    4150:	4618      	mov	r0, r3
    4152:	4b04      	ldr	r3, [pc, #16]	; (4164 <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    4154:	4798      	blx	r3
	uint16	selfTestResult(kHVACNoError);
    4156:	2300      	movs	r3, #0
    4158:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    415a:	8bfb      	ldrh	r3, [r7, #30]
	}
    415c:	4618      	mov	r0, r3
    415e:	3720      	adds	r7, #32
    4160:	46bd      	mov	sp, r7
    4162:	bd80      	pop	{r7, pc}
    4164:	000003c5 	.word	0x000003c5

00004168 <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    4168:	b590      	push	{r4, r7, lr}
    416a:	b085      	sub	sp, #20
    416c:	af00      	add	r7, sp, #0
    416e:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    4170:	f107 0308 	add.w	r3, r7, #8
    4174:	4619      	mov	r1, r3
    4176:	4818      	ldr	r0, [pc, #96]	; (41d8 <_ZN12States_Class16saveCurrentStateEv+0x70>)
    4178:	4b18      	ldr	r3, [pc, #96]	; (41dc <_ZN12States_Class16saveCurrentStateEv+0x74>)
    417a:	4798      	blx	r3
		hvacState->dateTime=cdt;
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    4182:	3308      	adds	r3, #8
    4184:	f107 0208 	add.w	r2, r7, #8
    4188:	e892 0003 	ldmia.w	r2, {r0, r1}
    418c:	e883 0003 	stmia.w	r3, {r0, r1}
		hvacState->now = calendar.convert_datetime_to_timestamp(&cdt);
    4190:	687b      	ldr	r3, [r7, #4]
    4192:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    4196:	f107 0308 	add.w	r3, r7, #8
    419a:	4619      	mov	r1, r3
    419c:	480e      	ldr	r0, [pc, #56]	; (41d8 <_ZN12States_Class16saveCurrentStateEv+0x70>)
    419e:	4b10      	ldr	r3, [pc, #64]	; (41e0 <_ZN12States_Class16saveCurrentStateEv+0x78>)
    41a0:	4798      	blx	r3
    41a2:	4603      	mov	r3, r0
    41a4:	6063      	str	r3, [r4, #4]
	if (hvacState->currentState!=kHVACStateMaintenance){
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    41ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    41b2:	d00d      	beq.n	41d0 <_ZN12States_Class16saveCurrentStateEv+0x68>
		memory.WriteFastCurrentState(staticCurrentState);
    41b4:	490b      	ldr	r1, [pc, #44]	; (41e4 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    41b6:	480c      	ldr	r0, [pc, #48]	; (41e8 <_ZN12States_Class16saveCurrentStateEv+0x80>)
    41b8:	4b0c      	ldr	r3, [pc, #48]	; (41ec <_ZN12States_Class16saveCurrentStateEv+0x84>)
    41ba:	4798      	blx	r3
		//memory.ReadFastApplicationState(lastState);
		if (hvacState->currentState==0)
    41bc:	687b      	ldr	r3, [r7, #4]
    41be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    41c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41c4:	2b00      	cmp	r3, #0
    41c6:	d103      	bne.n	41d0 <_ZN12States_Class16saveCurrentStateEv+0x68>
		{
			memory.SaveApplicationState(staticCurrentState);
    41c8:	4906      	ldr	r1, [pc, #24]	; (41e4 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    41ca:	4809      	ldr	r0, [pc, #36]	; (41f0 <_ZN12States_Class16saveCurrentStateEv+0x88>)
    41cc:	4b09      	ldr	r3, [pc, #36]	; (41f4 <_ZN12States_Class16saveCurrentStateEv+0x8c>)
    41ce:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    41d0:	bf00      	nop
    41d2:	3714      	adds	r7, #20
    41d4:	46bd      	mov	sp, r7
    41d6:	bd90      	pop	{r4, r7, pc}
    41d8:	2000a0e8 	.word	0x2000a0e8
    41dc:	00017341 	.word	0x00017341
    41e0:	00017431 	.word	0x00017431
    41e4:	20008170 	.word	0x20008170
    41e8:	20002d78 	.word	0x20002d78
    41ec:	00001af1 	.word	0x00001af1
    41f0:	20002708 	.word	0x20002708
    41f4:	00002829 	.word	0x00002829

000041f8 <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    41f8:	b580      	push	{r7, lr}
    41fa:	b082      	sub	sp, #8
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
    4200:	460b      	mov	r3, r1
    4202:	70fb      	strb	r3, [r7, #3]
		if (layer==0)
    4204:	78fb      	ldrb	r3, [r7, #3]
    4206:	2b00      	cmp	r3, #0
    4208:	d10d      	bne.n	4226 <_ZN12States_Class4StopEh+0x2e>
		{
			usb<<"Air Conditioning System Stopped"<<NEWLINE;
    420a:	4909      	ldr	r1, [pc, #36]	; (4230 <_ZN12States_Class4StopEh+0x38>)
    420c:	4809      	ldr	r0, [pc, #36]	; (4234 <_ZN12States_Class4StopEh+0x3c>)
    420e:	4b0a      	ldr	r3, [pc, #40]	; (4238 <_ZN12States_Class4StopEh+0x40>)
    4210:	4798      	blx	r3
    4212:	4603      	mov	r3, r0
    4214:	4909      	ldr	r1, [pc, #36]	; (423c <_ZN12States_Class4StopEh+0x44>)
    4216:	4618      	mov	r0, r3
    4218:	4b09      	ldr	r3, [pc, #36]	; (4240 <_ZN12States_Class4StopEh+0x48>)
    421a:	4798      	blx	r3
			delay_ms(100);
    421c:	2064      	movs	r0, #100	; 0x64
    421e:	4b09      	ldr	r3, [pc, #36]	; (4244 <_ZN12States_Class4StopEh+0x4c>)
    4220:	4798      	blx	r3
			return layer;
    4222:	78fb      	ldrb	r3, [r7, #3]
    4224:	e000      	b.n	4228 <_ZN12States_Class4StopEh+0x30>
		}
	return	layer;
    4226:	78fb      	ldrb	r3, [r7, #3]
}
    4228:	4618      	mov	r0, r3
    422a:	3708      	adds	r7, #8
    422c:	46bd      	mov	sp, r7
    422e:	bd80      	pop	{r7, pc}
    4230:	00020930 	.word	0x00020930
    4234:	2000a368 	.word	0x2000a368
    4238:	0000454d 	.word	0x0000454d
    423c:	00020884 	.word	0x00020884
    4240:	00000c99 	.word	0x00000c99
    4244:	00006761 	.word	0x00006761

00004248 <_ZN12States_Class15GetCurrentStateER9HVACState>:

void	States_Class::GetCurrentConfiguration(ConfigurationData *cd){
	cd=&configuration;
}
void	States_Class::GetCurrentState(HVACState& hs){
    4248:	b580      	push	{r7, lr}
    424a:	b082      	sub	sp, #8
    424c:	af00      	add	r7, sp, #0
    424e:	6078      	str	r0, [r7, #4]
    4250:	6039      	str	r1, [r7, #0]
	hs=*hvacState;
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    4258:	683a      	ldr	r2, [r7, #0]
    425a:	4610      	mov	r0, r2
    425c:	4619      	mov	r1, r3
    425e:	2368      	movs	r3, #104	; 0x68
    4260:	461a      	mov	r2, r3
    4262:	4b03      	ldr	r3, [pc, #12]	; (4270 <_ZN12States_Class15GetCurrentStateER9HVACState+0x28>)
    4264:	4798      	blx	r3
}
    4266:	bf00      	nop
    4268:	3708      	adds	r7, #8
    426a:	46bd      	mov	sp, r7
    426c:	bd80      	pop	{r7, pc}
    426e:	bf00      	nop
    4270:	0001c4a5 	.word	0x0001c4a5

00004274 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    4274:	b580      	push	{r7, lr}
    4276:	b082      	sub	sp, #8
    4278:	af00      	add	r7, sp, #0
    427a:	6078      	str	r0, [r7, #4]
    427c:	6039      	str	r1, [r7, #0]
	configuration=cd;
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	683a      	ldr	r2, [r7, #0]
    4282:	f503 73b0 	add.w	r3, r3, #352	; 0x160
    4286:	4611      	mov	r1, r2
    4288:	22ac      	movs	r2, #172	; 0xac
    428a:	4618      	mov	r0, r3
    428c:	4b02      	ldr	r3, [pc, #8]	; (4298 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x24>)
    428e:	4798      	blx	r3
}
    4290:	bf00      	nop
    4292:	3708      	adds	r7, #8
    4294:	46bd      	mov	sp, r7
    4296:	bd80      	pop	{r7, pc}
    4298:	0001c4a5 	.word	0x0001c4a5

0000429c <_ZN12States_Class15SetCurrentStateER9HVACState>:
void	States_Class::SetCurrentState(HVACState& hs){
    429c:	b580      	push	{r7, lr}
    429e:	b082      	sub	sp, #8
    42a0:	af00      	add	r7, sp, #0
    42a2:	6078      	str	r0, [r7, #4]
    42a4:	6039      	str	r1, [r7, #0]
	staticCurrentState=hs;
    42a6:	4a06      	ldr	r2, [pc, #24]	; (42c0 <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    42a8:	683b      	ldr	r3, [r7, #0]
    42aa:	4610      	mov	r0, r2
    42ac:	4619      	mov	r1, r3
    42ae:	2368      	movs	r3, #104	; 0x68
    42b0:	461a      	mov	r2, r3
    42b2:	4b04      	ldr	r3, [pc, #16]	; (42c4 <_ZN12States_Class15SetCurrentStateER9HVACState+0x28>)
    42b4:	4798      	blx	r3
}
    42b6:	bf00      	nop
    42b8:	3708      	adds	r7, #8
    42ba:	46bd      	mov	sp, r7
    42bc:	bd80      	pop	{r7, pc}
    42be:	bf00      	nop
    42c0:	20008170 	.word	0x20008170
    42c4:	0001c4a5 	.word	0x0001c4a5

000042c8 <_ZTv0_n12_N12States_Class15SetCurrentStateER9HVACState>:
    42c8:	b580      	push	{r7, lr}
    42ca:	b082      	sub	sp, #8
    42cc:	af00      	add	r7, sp, #0
    42ce:	6078      	str	r0, [r7, #4]
    42d0:	6039      	str	r1, [r7, #0]
    42d2:	687b      	ldr	r3, [r7, #4]
    42d4:	681b      	ldr	r3, [r3, #0]
    42d6:	3b0c      	subs	r3, #12
    42d8:	681b      	ldr	r3, [r3, #0]
    42da:	461a      	mov	r2, r3
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	4413      	add	r3, r2
    42e0:	6839      	ldr	r1, [r7, #0]
    42e2:	4618      	mov	r0, r3
    42e4:	4b02      	ldr	r3, [pc, #8]	; (42f0 <_ZTv0_n12_N12States_Class15SetCurrentStateER9HVACState+0x28>)
    42e6:	4798      	blx	r3
    42e8:	3708      	adds	r7, #8
    42ea:	46bd      	mov	sp, r7
    42ec:	bd80      	pop	{r7, pc}
    42ee:	bf00      	nop
    42f0:	0000429d 	.word	0x0000429d

000042f4 <_ZN12States_Class16SetCRCConfigDataEv>:
void	States_Class::SetCRCConfigData(void){
    42f4:	b580      	push	{r7, lr}
    42f6:	b082      	sub	sp, #8
    42f8:	af00      	add	r7, sp, #0
    42fa:	6078      	str	r0, [r7, #4]
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    42fc:	22ac      	movs	r2, #172	; 0xac
    42fe:	4906      	ldr	r1, [pc, #24]	; (4318 <_ZN12States_Class16SetCRCConfigDataEv+0x24>)
    4300:	4806      	ldr	r0, [pc, #24]	; (431c <_ZN12States_Class16SetCRCConfigDataEv+0x28>)
    4302:	4b07      	ldr	r3, [pc, #28]	; (4320 <_ZN12States_Class16SetCRCConfigDataEv+0x2c>)
    4304:	4798      	blx	r3
    4306:	4602      	mov	r2, r0
    4308:	687b      	ldr	r3, [r7, #4]
    430a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
    430e:	bf00      	nop
    4310:	3708      	adds	r7, #8
    4312:	46bd      	mov	sp, r7
    4314:	bd80      	pop	{r7, pc}
    4316:	bf00      	nop
    4318:	00020290 	.word	0x00020290
    431c:	20002bf4 	.word	0x20002bf4
    4320:	00001551 	.word	0x00001551

00004324 <_ZN12States_Class19ExecutePeriodicTaskEv>:
uint32_t	States_Class::GetStatus(HVACStatus& s){
	s=hvacState->hvacStatus;
	return	hvacState->hvacStatus.rawStatus;
}
void States_Class::ExecutePeriodicTask(void){
    4324:	b590      	push	{r4, r7, lr}
    4326:	b085      	sub	sp, #20
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
	if (IsCommando270Changed())
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	681b      	ldr	r3, [r3, #0]
    4330:	3b10      	subs	r3, #16
    4332:	681b      	ldr	r3, [r3, #0]
    4334:	461a      	mov	r2, r3
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	4413      	add	r3, r2
    433a:	4618      	mov	r0, r3
    433c:	4b36      	ldr	r3, [pc, #216]	; (4418 <_ZN12States_Class19ExecutePeriodicTaskEv+0xf4>)
    433e:	4798      	blx	r3
    4340:	4603      	mov	r3, r0
    4342:	2b00      	cmp	r3, #0
    4344:	d035      	beq.n	43b2 <_ZN12States_Class19ExecutePeriodicTaskEv+0x8e>
	{
		if (commando270.AC_CMD)
    4346:	687b      	ldr	r3, [r7, #4]
    4348:	681b      	ldr	r3, [r3, #0]
    434a:	3b10      	subs	r3, #16
    434c:	681b      	ldr	r3, [r3, #0]
    434e:	461a      	mov	r2, r3
    4350:	687b      	ldr	r3, [r7, #4]
    4352:	4413      	add	r3, r2
    4354:	795b      	ldrb	r3, [r3, #5]
    4356:	f3c3 0300 	ubfx	r3, r3, #0, #1
    435a:	b2db      	uxtb	r3, r3
    435c:	2b00      	cmp	r3, #0
    435e:	d014      	beq.n	438a <_ZN12States_Class19ExecutePeriodicTaskEv+0x66>
		{
			
			prepareStateChangeEvent(kHVACStatePrepareStandbyON);
    4360:	2200      	movs	r2, #0
    4362:	f44f 719a 	mov.w	r1, #308	; 0x134
    4366:	6878      	ldr	r0, [r7, #4]
    4368:	4b2c      	ldr	r3, [pc, #176]	; (441c <_ZN12States_Class19ExecutePeriodicTaskEv+0xf8>)
    436a:	4798      	blx	r3
			listener.SendEventSelf(kInterfaceEventClass,k_AC_CMD_ENABLE_Event);
    436c:	f107 0308 	add.w	r3, r7, #8
    4370:	2100      	movs	r1, #0
    4372:	4618      	mov	r0, r3
    4374:	4b2a      	ldr	r3, [pc, #168]	; (4420 <_ZN12States_Class19ExecutePeriodicTaskEv+0xfc>)
    4376:	4798      	blx	r3
    4378:	f107 0308 	add.w	r3, r7, #8
    437c:	2204      	movs	r2, #4
    437e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4382:	4828      	ldr	r0, [pc, #160]	; (4424 <_ZN12States_Class19ExecutePeriodicTaskEv+0x100>)
    4384:	4c28      	ldr	r4, [pc, #160]	; (4428 <_ZN12States_Class19ExecutePeriodicTaskEv+0x104>)
    4386:	47a0      	blx	r4
    4388:	e013      	b.n	43b2 <_ZN12States_Class19ExecutePeriodicTaskEv+0x8e>
		} 
		else
		{
			prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    438a:	2200      	movs	r2, #0
    438c:	f240 1133 	movw	r1, #307	; 0x133
    4390:	6878      	ldr	r0, [r7, #4]
    4392:	4b22      	ldr	r3, [pc, #136]	; (441c <_ZN12States_Class19ExecutePeriodicTaskEv+0xf8>)
    4394:	4798      	blx	r3
			listener.SendEventSelf(kInterfaceEventClass,k_AC_CMD_DISABLE_Event);
    4396:	f107 030c 	add.w	r3, r7, #12
    439a:	2100      	movs	r1, #0
    439c:	4618      	mov	r0, r3
    439e:	4b20      	ldr	r3, [pc, #128]	; (4420 <_ZN12States_Class19ExecutePeriodicTaskEv+0xfc>)
    43a0:	4798      	blx	r3
    43a2:	f107 030c 	add.w	r3, r7, #12
    43a6:	2205      	movs	r2, #5
    43a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    43ac:	481d      	ldr	r0, [pc, #116]	; (4424 <_ZN12States_Class19ExecutePeriodicTaskEv+0x100>)
    43ae:	4c1e      	ldr	r4, [pc, #120]	; (4428 <_ZN12States_Class19ExecutePeriodicTaskEv+0x104>)
    43b0:	47a0      	blx	r4
		}
		

	}
	if (fv1.IsPositionChanged())
    43b2:	481e      	ldr	r0, [pc, #120]	; (442c <_ZN12States_Class19ExecutePeriodicTaskEv+0x108>)
    43b4:	4b1e      	ldr	r3, [pc, #120]	; (4430 <_ZN12States_Class19ExecutePeriodicTaskEv+0x10c>)
    43b6:	4798      	blx	r3
    43b8:	4603      	mov	r3, r0
    43ba:	2b00      	cmp	r3, #0
    43bc:	d00b      	beq.n	43d6 <_ZN12States_Class19ExecutePeriodicTaskEv+0xb2>
	{
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    43be:	2200      	movs	r2, #0
    43c0:	210b      	movs	r1, #11
    43c2:	481c      	ldr	r0, [pc, #112]	; (4434 <_ZN12States_Class19ExecutePeriodicTaskEv+0x110>)
    43c4:	4b1c      	ldr	r3, [pc, #112]	; (4438 <_ZN12States_Class19ExecutePeriodicTaskEv+0x114>)
    43c6:	4798      	blx	r3
		hvacState->arincStatus.statusFV=fv1.statusFlapperValve;
    43c8:	687b      	ldr	r3, [r7, #4]
    43ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    43ce:	4a17      	ldr	r2, [pc, #92]	; (442c <_ZN12States_Class19ExecutePeriodicTaskEv+0x108>)
    43d0:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    43d4:	779a      	strb	r2, [r3, #30]
		
	}
	if (IsStatusArinclabelChanged())
    43d6:	687b      	ldr	r3, [r7, #4]
    43d8:	681b      	ldr	r3, [r3, #0]
    43da:	3b0c      	subs	r3, #12
    43dc:	681b      	ldr	r3, [r3, #0]
    43de:	461a      	mov	r2, r3
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	4413      	add	r3, r2
    43e4:	4618      	mov	r0, r3
    43e6:	4b15      	ldr	r3, [pc, #84]	; (443c <_ZN12States_Class19ExecutePeriodicTaskEv+0x118>)
    43e8:	4798      	blx	r3
    43ea:	4603      	mov	r3, r0
    43ec:	2b00      	cmp	r3, #0
    43ee:	d00e      	beq.n	440e <_ZN12States_Class19ExecutePeriodicTaskEv+0xea>
 	{
		arinc.SaveStatus(GetAcknowledgeStatus());
    43f0:	687b      	ldr	r3, [r7, #4]
    43f2:	681b      	ldr	r3, [r3, #0]
    43f4:	3b0c      	subs	r3, #12
    43f6:	681b      	ldr	r3, [r3, #0]
    43f8:	461a      	mov	r2, r3
    43fa:	687b      	ldr	r3, [r7, #4]
    43fc:	4413      	add	r3, r2
    43fe:	4618      	mov	r0, r3
    4400:	4b0f      	ldr	r3, [pc, #60]	; (4440 <_ZN12States_Class19ExecutePeriodicTaskEv+0x11c>)
    4402:	4798      	blx	r3
    4404:	4603      	mov	r3, r0
    4406:	4619      	mov	r1, r3
    4408:	480e      	ldr	r0, [pc, #56]	; (4444 <_ZN12States_Class19ExecutePeriodicTaskEv+0x120>)
    440a:	4b0f      	ldr	r3, [pc, #60]	; (4448 <_ZN12States_Class19ExecutePeriodicTaskEv+0x124>)
    440c:	4798      	blx	r3
	}
		
}
    440e:	bf00      	nop
    4410:	3714      	adds	r7, #20
    4412:	46bd      	mov	sp, r7
    4414:	bd90      	pop	{r4, r7, pc}
    4416:	bf00      	nop
    4418:	00001c7d 	.word	0x00001c7d
    441c:	000040f5 	.word	0x000040f5
    4420:	00002f81 	.word	0x00002f81
    4424:	200099f8 	.word	0x200099f8
    4428:	00014f65 	.word	0x00014f65
    442c:	20009b10 	.word	0x20009b10
    4430:	0001563d 	.word	0x0001563d
    4434:	20000c80 	.word	0x20000c80
    4438:	00000a0d 	.word	0x00000a0d
    443c:	000012c9 	.word	0x000012c9
    4440:	000012b1 	.word	0x000012b1
    4444:	20008ec8 	.word	0x20008ec8
    4448:	00012e1d 	.word	0x00012e1d

0000444c <_ZN12States_Class11CheckEventsEv>:

void States_Class::CheckEvents(void){
    444c:	b590      	push	{r4, r7, lr}
    444e:	b087      	sub	sp, #28
    4450:	af00      	add	r7, sp, #0
	event e;
    4452:	463b      	mov	r3, r7
    4454:	4618      	mov	r0, r3
    4456:	4b28      	ldr	r3, [pc, #160]	; (44f8 <_ZN12States_Class11CheckEventsEv+0xac>)
    4458:	4798      	blx	r3
	hvac.ExecutePeriodicTask();
    445a:	4828      	ldr	r0, [pc, #160]	; (44fc <_ZN12States_Class11CheckEventsEv+0xb0>)
    445c:	4b28      	ldr	r3, [pc, #160]	; (4500 <_ZN12States_Class11CheckEventsEv+0xb4>)
    445e:	4798      	blx	r3
	if (interfaces.IsCommunicationRequest())
    4460:	4828      	ldr	r0, [pc, #160]	; (4504 <_ZN12States_Class11CheckEventsEv+0xb8>)
    4462:	4b29      	ldr	r3, [pc, #164]	; (4508 <_ZN12States_Class11CheckEventsEv+0xbc>)
    4464:	4798      	blx	r3
	{
		//e.eventClass=kALUEventClass;
	//	e.eventType=(EventType)kALUEventCheckCommunication;
		
	}
	if ((hvac.hvacState->currentState==kHVACStateStandbyOFF)&&(alu.taskList->head)){
    4466:	4b25      	ldr	r3, [pc, #148]	; (44fc <_ZN12States_Class11CheckEventsEv+0xb0>)
    4468:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    446e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    4472:	d11a      	bne.n	44aa <_ZN12States_Class11CheckEventsEv+0x5e>
    4474:	4b25      	ldr	r3, [pc, #148]	; (450c <_ZN12States_Class11CheckEventsEv+0xc0>)
    4476:	681b      	ldr	r3, [r3, #0]
    4478:	681b      	ldr	r3, [r3, #0]
    447a:	2b00      	cmp	r3, #0
    447c:	d015      	beq.n	44aa <_ZN12States_Class11CheckEventsEv+0x5e>
		fv1.ReadActualPosition();
    447e:	4824      	ldr	r0, [pc, #144]	; (4510 <_ZN12States_Class11CheckEventsEv+0xc4>)
    4480:	4b24      	ldr	r3, [pc, #144]	; (4514 <_ZN12States_Class11CheckEventsEv+0xc8>)
    4482:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    4484:	2200      	movs	r2, #0
    4486:	210b      	movs	r1, #11
    4488:	4820      	ldr	r0, [pc, #128]	; (450c <_ZN12States_Class11CheckEventsEv+0xc0>)
    448a:	4b23      	ldr	r3, [pc, #140]	; (4518 <_ZN12States_Class11CheckEventsEv+0xcc>)
    448c:	4798      	blx	r3
		listener.SendEventSelf(kHVACEventClass,kHVACEventDoPendingTasks);
    448e:	f107 0310 	add.w	r3, r7, #16
    4492:	2100      	movs	r1, #0
    4494:	4618      	mov	r0, r3
    4496:	4b21      	ldr	r3, [pc, #132]	; (451c <_ZN12States_Class11CheckEventsEv+0xd0>)
    4498:	4798      	blx	r3
    449a:	f107 0310 	add.w	r3, r7, #16
    449e:	2203      	movs	r2, #3
    44a0:	f44f 7100 	mov.w	r1, #512	; 0x200
    44a4:	481e      	ldr	r0, [pc, #120]	; (4520 <_ZN12States_Class11CheckEventsEv+0xd4>)
    44a6:	4c1f      	ldr	r4, [pc, #124]	; (4524 <_ZN12States_Class11CheckEventsEv+0xd8>)
    44a8:	47a0      	blx	r4

	}
	if (alu.arincTXTimeUP){
    44aa:	4b18      	ldr	r3, [pc, #96]	; (450c <_ZN12States_Class11CheckEventsEv+0xc0>)
    44ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    44b0:	b2db      	uxtb	r3, r3
    44b2:	2b00      	cmp	r3, #0
    44b4:	d01c      	beq.n	44f0 <_ZN12States_Class11CheckEventsEv+0xa4>
		if ((!alu.IsListedTask(kALUTaskArincTXMessage)))
    44b6:	2102      	movs	r1, #2
    44b8:	4814      	ldr	r0, [pc, #80]	; (450c <_ZN12States_Class11CheckEventsEv+0xc0>)
    44ba:	4b1b      	ldr	r3, [pc, #108]	; (4528 <_ZN12States_Class11CheckEventsEv+0xdc>)
    44bc:	4798      	blx	r3
    44be:	4603      	mov	r3, r0
    44c0:	f083 0301 	eor.w	r3, r3, #1
    44c4:	b2db      	uxtb	r3, r3
    44c6:	2b00      	cmp	r3, #0
    44c8:	d004      	beq.n	44d4 <_ZN12States_Class11CheckEventsEv+0x88>
		{
			alu.PrepareNewTask(kALUTaskArincTXMessage);
    44ca:	2200      	movs	r2, #0
    44cc:	2102      	movs	r1, #2
    44ce:	480f      	ldr	r0, [pc, #60]	; (450c <_ZN12States_Class11CheckEventsEv+0xc0>)
    44d0:	4b11      	ldr	r3, [pc, #68]	; (4518 <_ZN12States_Class11CheckEventsEv+0xcc>)
    44d2:	4798      	blx	r3
		} 
		else
		{
			
		}
		listener.SendEventSelf(kALUEventClass,kHVACEventDoPendingTasks);
    44d4:	f107 0314 	add.w	r3, r7, #20
    44d8:	2100      	movs	r1, #0
    44da:	4618      	mov	r0, r3
    44dc:	4b0f      	ldr	r3, [pc, #60]	; (451c <_ZN12States_Class11CheckEventsEv+0xd0>)
    44de:	4798      	blx	r3
    44e0:	f107 0314 	add.w	r3, r7, #20
    44e4:	2203      	movs	r2, #3
    44e6:	f44f 7140 	mov.w	r1, #768	; 0x300
    44ea:	480d      	ldr	r0, [pc, #52]	; (4520 <_ZN12States_Class11CheckEventsEv+0xd4>)
    44ec:	4c0d      	ldr	r4, [pc, #52]	; (4524 <_ZN12States_Class11CheckEventsEv+0xd8>)
    44ee:	47a0      	blx	r4
	}
		

}
    44f0:	bf00      	nop
    44f2:	371c      	adds	r7, #28
    44f4:	46bd      	mov	sp, r7
    44f6:	bd90      	pop	{r4, r7, pc}
    44f8:	000003c5 	.word	0x000003c5
    44fc:	200081d8 	.word	0x200081d8
    4500:	00004325 	.word	0x00004325
    4504:	20001670 	.word	0x20001670
    4508:	00001e91 	.word	0x00001e91
    450c:	20000c80 	.word	0x20000c80
    4510:	20009b10 	.word	0x20009b10
    4514:	000155cd 	.word	0x000155cd
    4518:	00000a0d 	.word	0x00000a0d
    451c:	00002f81 	.word	0x00002f81
    4520:	200099f8 	.word	0x200099f8
    4524:	00014f65 	.word	0x00014f65
    4528:	000049c9 	.word	0x000049c9

0000452c <_ZlsIA34_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    452c:	b580      	push	{r7, lr}
    452e:	b082      	sub	sp, #8
    4530:	af00      	add	r7, sp, #0
    4532:	6078      	str	r0, [r7, #4]
    4534:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    4536:	6839      	ldr	r1, [r7, #0]
    4538:	6878      	ldr	r0, [r7, #4]
    453a:	4b03      	ldr	r3, [pc, #12]	; (4548 <_ZlsIA34_cER5PrintS2_RKT_+0x1c>)
    453c:	4798      	blx	r3
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	4618      	mov	r0, r3
    4542:	3708      	adds	r7, #8
    4544:	46bd      	mov	sp, r7
    4546:	bd80      	pop	{r7, pc}
    4548:	00018489 	.word	0x00018489

0000454c <_ZlsIA32_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    454c:	b580      	push	{r7, lr}
    454e:	b082      	sub	sp, #8
    4550:	af00      	add	r7, sp, #0
    4552:	6078      	str	r0, [r7, #4]
    4554:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    4556:	6839      	ldr	r1, [r7, #0]
    4558:	6878      	ldr	r0, [r7, #4]
    455a:	4b03      	ldr	r3, [pc, #12]	; (4568 <_ZlsIA32_cER5PrintS2_RKT_+0x1c>)
    455c:	4798      	blx	r3
    455e:	687b      	ldr	r3, [r7, #4]
    4560:	4618      	mov	r0, r3
    4562:	3708      	adds	r7, #8
    4564:	46bd      	mov	sp, r7
    4566:	bd80      	pop	{r7, pc}
    4568:	00018489 	.word	0x00018489

0000456c <_ZlsIA42_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    456c:	b580      	push	{r7, lr}
    456e:	b082      	sub	sp, #8
    4570:	af00      	add	r7, sp, #0
    4572:	6078      	str	r0, [r7, #4]
    4574:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    4576:	6839      	ldr	r1, [r7, #0]
    4578:	6878      	ldr	r0, [r7, #4]
    457a:	4b03      	ldr	r3, [pc, #12]	; (4588 <_ZlsIA42_cER5PrintS2_RKT_+0x1c>)
    457c:	4798      	blx	r3
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	4618      	mov	r0, r3
    4582:	3708      	adds	r7, #8
    4584:	46bd      	mov	sp, r7
    4586:	bd80      	pop	{r7, pc}
    4588:	00018489 	.word	0x00018489

0000458c <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    458c:	b580      	push	{r7, lr}
    458e:	b082      	sub	sp, #8
    4590:	af00      	add	r7, sp, #0
    4592:	6078      	str	r0, [r7, #4]
    4594:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    4596:	6839      	ldr	r1, [r7, #0]
    4598:	6878      	ldr	r0, [r7, #4]
    459a:	4b03      	ldr	r3, [pc, #12]	; (45a8 <_ZlsIA5_cER5PrintS2_RKT_+0x1c>)
    459c:	4798      	blx	r3
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	4618      	mov	r0, r3
    45a2:	3708      	adds	r7, #8
    45a4:	46bd      	mov	sp, r7
    45a6:	bd80      	pop	{r7, pc}
    45a8:	00018489 	.word	0x00018489

000045ac <_ZlsIA35_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    45ac:	b580      	push	{r7, lr}
    45ae:	b082      	sub	sp, #8
    45b0:	af00      	add	r7, sp, #0
    45b2:	6078      	str	r0, [r7, #4]
    45b4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    45b6:	6839      	ldr	r1, [r7, #0]
    45b8:	6878      	ldr	r0, [r7, #4]
    45ba:	4b03      	ldr	r3, [pc, #12]	; (45c8 <_ZlsIA35_cER5PrintS2_RKT_+0x1c>)
    45bc:	4798      	blx	r3
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	4618      	mov	r0, r3
    45c2:	3708      	adds	r7, #8
    45c4:	46bd      	mov	sp, r7
    45c6:	bd80      	pop	{r7, pc}
    45c8:	00018489 	.word	0x00018489

000045cc <_Z41__static_initialization_and_destruction_0ii>:


    45cc:	b580      	push	{r7, lr}
    45ce:	b082      	sub	sp, #8
    45d0:	af00      	add	r7, sp, #0
    45d2:	6078      	str	r0, [r7, #4]
    45d4:	6039      	str	r1, [r7, #0]
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	2b01      	cmp	r3, #1
    45da:	d11c      	bne.n	4616 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    45dc:	683b      	ldr	r3, [r7, #0]
    45de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    45e2:	4293      	cmp	r3, r2
    45e4:	d117      	bne.n	4616 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    45e6:	480e      	ldr	r0, [pc, #56]	; (4620 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    45e8:	4b0e      	ldr	r3, [pc, #56]	; (4624 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    45ea:	4798      	blx	r3
    45ec:	4a0e      	ldr	r2, [pc, #56]	; (4628 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    45ee:	490f      	ldr	r1, [pc, #60]	; (462c <_Z41__static_initialization_and_destruction_0ii+0x60>)
    45f0:	480b      	ldr	r0, [pc, #44]	; (4620 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    45f2:	4b0f      	ldr	r3, [pc, #60]	; (4630 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    45f4:	4798      	blx	r3
    45f6:	480f      	ldr	r0, [pc, #60]	; (4634 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    45f8:	4b0f      	ldr	r3, [pc, #60]	; (4638 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    45fa:	4798      	blx	r3
    45fc:	4a0a      	ldr	r2, [pc, #40]	; (4628 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    45fe:	490f      	ldr	r1, [pc, #60]	; (463c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    4600:	480c      	ldr	r0, [pc, #48]	; (4634 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    4602:	4b0b      	ldr	r3, [pc, #44]	; (4630 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    4604:	4798      	blx	r3
    4606:	480e      	ldr	r0, [pc, #56]	; (4640 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    4608:	4b0e      	ldr	r3, [pc, #56]	; (4644 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    460a:	4798      	blx	r3
    460c:	4a06      	ldr	r2, [pc, #24]	; (4628 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    460e:	490e      	ldr	r1, [pc, #56]	; (4648 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    4610:	480b      	ldr	r0, [pc, #44]	; (4640 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    4612:	4b07      	ldr	r3, [pc, #28]	; (4630 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    4614:	4798      	blx	r3
    4616:	bf00      	nop
    4618:	3708      	adds	r7, #8
    461a:	46bd      	mov	sp, r7
    461c:	bd80      	pop	{r7, pc}
    461e:	bf00      	nop
    4620:	20008154 	.word	0x20008154
    4624:	00002d21 	.word	0x00002d21
    4628:	20000000 	.word	0x20000000
    462c:	00002d3b 	.word	0x00002d3b
    4630:	00019d41 	.word	0x00019d41
    4634:	20008168 	.word	0x20008168
    4638:	00000fb5 	.word	0x00000fb5
    463c:	00000fcf 	.word	0x00000fcf
    4640:	200081d8 	.word	0x200081d8
    4644:	00002fdd 	.word	0x00002fdd
    4648:	0000308d 	.word	0x0000308d

0000464c <_GLOBAL__sub_I_ptrStatesClass>:
    464c:	b580      	push	{r7, lr}
    464e:	af00      	add	r7, sp, #0
    4650:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4654:	2001      	movs	r0, #1
    4656:	4b01      	ldr	r3, [pc, #4]	; (465c <_GLOBAL__sub_I_ptrStatesClass+0x10>)
    4658:	4798      	blx	r3
    465a:	bd80      	pop	{r7, pc}
    465c:	000045cd 	.word	0x000045cd

00004660 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    4660:	b480      	push	{r7}
    4662:	b083      	sub	sp, #12
    4664:	af00      	add	r7, sp, #0
    4666:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    4668:	687b      	ldr	r3, [r7, #4]
    466a:	681b      	ldr	r3, [r3, #0]
}
    466c:	4618      	mov	r0, r3
    466e:	370c      	adds	r7, #12
    4670:	46bd      	mov	sp, r7
    4672:	bc80      	pop	{r7}
    4674:	4770      	bx	lr
	...

00004678 <_ZN17TaskHandler_ClassC1Ev>:
//static TaskHandler_Class	taskStorage[MAXIMUM_TASKS];
//list_descriptor		taskStorage;
static	ControllerTask	taskStorage[MAXIMUM_TASKS];
static	list_element	listElements[MAXIMUM_TASKS];
// default constructor
TaskHandler_Class::TaskHandler_Class()
    4678:	b480      	push	{r7}
    467a:	b083      	sub	sp, #12
    467c:	af00      	add	r7, sp, #0
    467e:	6078      	str	r0, [r7, #4]
{
	taskListPrivate=(list_descriptor*)listElements;
    4680:	687b      	ldr	r3, [r7, #4]
    4682:	4a04      	ldr	r2, [pc, #16]	; (4694 <_ZN17TaskHandler_ClassC1Ev+0x1c>)
    4684:	60da      	str	r2, [r3, #12]
	//taskList->head->next=NULL;
	
	//task->id=(ALUTaskEnum)0;


} //TaskHandler_Class
    4686:	687b      	ldr	r3, [r7, #4]
    4688:	4618      	mov	r0, r3
    468a:	370c      	adds	r7, #12
    468c:	46bd      	mov	sp, r7
    468e:	bc80      	pop	{r7}
    4690:	4770      	bx	lr
    4692:	bf00      	nop
    4694:	20008704 	.word	0x20008704

00004698 <_ZN17TaskHandler_ClassD1Ev>:

// default destructor
TaskHandler_Class::~TaskHandler_Class()
    4698:	b480      	push	{r7}
    469a:	b083      	sub	sp, #12
    469c:	af00      	add	r7, sp, #0
    469e:	6078      	str	r0, [r7, #4]
{
} //~TaskHandler_Class
    46a0:	687b      	ldr	r3, [r7, #4]
    46a2:	4618      	mov	r0, r3
    46a4:	370c      	adds	r7, #12
    46a6:	46bd      	mov	sp, r7
    46a8:	bc80      	pop	{r7}
    46aa:	4770      	bx	lr

000046ac <_ZN17TaskHandler_Class13InitTaskArrayEv>:

void TaskHandler_Class::InitTaskArray(void){
    46ac:	b480      	push	{r7}
    46ae:	b083      	sub	sp, #12
    46b0:	af00      	add	r7, sp, #0
    46b2:	6078      	str	r0, [r7, #4]
	for (i=1; i<MAXIMUM_TASKS; i++)
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	2201      	movs	r2, #1
    46b8:	721a      	strb	r2, [r3, #8]
    46ba:	687b      	ldr	r3, [r7, #4]
    46bc:	7a1b      	ldrb	r3, [r3, #8]
    46be:	2b0b      	cmp	r3, #11
    46c0:	dc31      	bgt.n	4726 <_ZN17TaskHandler_Class13InitTaskArrayEv+0x7a>
	{
		taskStorage[i].elem.next = (list_element*)NULL;
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	7a1b      	ldrb	r3, [r3, #8]
    46c6:	4619      	mov	r1, r3
    46c8:	4b20      	ldr	r3, [pc, #128]	; (474c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    46ca:	2200      	movs	r2, #0
    46cc:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
		taskStorage[i].id=kALUNotTaskEvent;
    46d0:	687b      	ldr	r3, [r7, #4]
    46d2:	7a1b      	ldrb	r3, [r3, #8]
    46d4:	4a1d      	ldr	r2, [pc, #116]	; (474c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    46d6:	00db      	lsls	r3, r3, #3
    46d8:	4413      	add	r3, r2
    46da:	2200      	movs	r2, #0
    46dc:	711a      	strb	r2, [r3, #4]
		taskStorage[i-1].elem.next = &taskStorage[i].elem;
    46de:	687b      	ldr	r3, [r7, #4]
    46e0:	7a1b      	ldrb	r3, [r3, #8]
    46e2:	3b01      	subs	r3, #1
    46e4:	687a      	ldr	r2, [r7, #4]
    46e6:	7a12      	ldrb	r2, [r2, #8]
    46e8:	00d2      	lsls	r2, r2, #3
    46ea:	4918      	ldr	r1, [pc, #96]	; (474c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    46ec:	440a      	add	r2, r1
    46ee:	4917      	ldr	r1, [pc, #92]	; (474c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    46f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		listElements[i].next = (list_element*)NULL;
    46f4:	687b      	ldr	r3, [r7, #4]
    46f6:	7a1b      	ldrb	r3, [r3, #8]
    46f8:	4619      	mov	r1, r3
    46fa:	4b15      	ldr	r3, [pc, #84]	; (4750 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    46fc:	2200      	movs	r2, #0
    46fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		listElements[i-1].next = &listElements[i];
    4702:	687b      	ldr	r3, [r7, #4]
    4704:	7a1b      	ldrb	r3, [r3, #8]
    4706:	3b01      	subs	r3, #1
    4708:	687a      	ldr	r2, [r7, #4]
    470a:	7a12      	ldrb	r2, [r2, #8]
    470c:	0092      	lsls	r2, r2, #2
    470e:	4910      	ldr	r1, [pc, #64]	; (4750 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    4710:	440a      	add	r2, r1
    4712:	490f      	ldr	r1, [pc, #60]	; (4750 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    4714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=1; i<MAXIMUM_TASKS; i++)
    4718:	687b      	ldr	r3, [r7, #4]
    471a:	7a1b      	ldrb	r3, [r3, #8]
    471c:	3301      	adds	r3, #1
    471e:	b2da      	uxtb	r2, r3
    4720:	687b      	ldr	r3, [r7, #4]
    4722:	721a      	strb	r2, [r3, #8]
    4724:	e7c9      	b.n	46ba <_ZN17TaskHandler_Class13InitTaskArrayEv+0xe>
	}
	taskListPrivate->head->next=NULL;
    4726:	687b      	ldr	r3, [r7, #4]
    4728:	68db      	ldr	r3, [r3, #12]
    472a:	681b      	ldr	r3, [r3, #0]
    472c:	2200      	movs	r2, #0
    472e:	601a      	str	r2, [r3, #0]
	taskListPrivate->head=NULL;
    4730:	687b      	ldr	r3, [r7, #4]
    4732:	68db      	ldr	r3, [r3, #12]
    4734:	2200      	movs	r2, #0
    4736:	601a      	str	r2, [r3, #0]

		//taskList->head->next=NULL;
		taskList=taskListPrivate;
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	68da      	ldr	r2, [r3, #12]
    473c:	687b      	ldr	r3, [r7, #4]
    473e:	601a      	str	r2, [r3, #0]
}
    4740:	bf00      	nop
    4742:	370c      	adds	r7, #12
    4744:	46bd      	mov	sp, r7
    4746:	bc80      	pop	{r7}
    4748:	4770      	bx	lr
    474a:	bf00      	nop
    474c:	200086a4 	.word	0x200086a4
    4750:	20008704 	.word	0x20008704

00004754 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask>:
		return ERR_ALREADY_INITIALIZED;
	}
	AddALUTask(taskListPrivate,task);
	return ERR_NONE;
}
int TaskHandler_Class::AddTask(ControllerTask& tk ){
    4754:	b580      	push	{r7, lr}
    4756:	b082      	sub	sp, #8
    4758:	af00      	add	r7, sp, #0
    475a:	6078      	str	r0, [r7, #4]
    475c:	6039      	str	r1, [r7, #0]
	if (IsNotDeclaredTask(tk))
    475e:	6839      	ldr	r1, [r7, #0]
    4760:	6878      	ldr	r0, [r7, #4]
    4762:	4b22      	ldr	r3, [pc, #136]	; (47ec <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x98>)
    4764:	4798      	blx	r3
    4766:	4603      	mov	r3, r0
    4768:	2b00      	cmp	r3, #0
    476a:	d039      	beq.n	47e0 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x8c>
	{
		ChooseAvailableTask();
    476c:	6878      	ldr	r0, [r7, #4]
    476e:	4b20      	ldr	r3, [pc, #128]	; (47f0 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x9c>)
    4770:	4798      	blx	r3
		task->elem=tk.elem;
    4772:	687b      	ldr	r3, [r7, #4]
    4774:	685b      	ldr	r3, [r3, #4]
    4776:	683a      	ldr	r2, [r7, #0]
    4778:	6812      	ldr	r2, [r2, #0]
    477a:	601a      	str	r2, [r3, #0]
		task->id=tk.id;
    477c:	687b      	ldr	r3, [r7, #4]
    477e:	685b      	ldr	r3, [r3, #4]
    4780:	683a      	ldr	r2, [r7, #0]
    4782:	7912      	ldrb	r2, [r2, #4]
    4784:	711a      	strb	r2, [r3, #4]
		task->prio=tk.prio;
    4786:	687b      	ldr	r3, [r7, #4]
    4788:	685b      	ldr	r3, [r3, #4]
    478a:	683a      	ldr	r2, [r7, #0]
    478c:	7952      	ldrb	r2, [r2, #5]
    478e:	715a      	strb	r2, [r3, #5]
		ASSERT((taskListPrivate)&&(task));
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	68db      	ldr	r3, [r3, #12]
    4794:	2b00      	cmp	r3, #0
    4796:	d005      	beq.n	47a4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    4798:	687b      	ldr	r3, [r7, #4]
    479a:	685b      	ldr	r3, [r3, #4]
    479c:	2b00      	cmp	r3, #0
    479e:	d001      	beq.n	47a4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    47a0:	2301      	movs	r3, #1
    47a2:	e000      	b.n	47a6 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x52>
    47a4:	2300      	movs	r3, #0
    47a6:	2242      	movs	r2, #66	; 0x42
    47a8:	4912      	ldr	r1, [pc, #72]	; (47f4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa0>)
    47aa:	4618      	mov	r0, r3
    47ac:	4b12      	ldr	r3, [pc, #72]	; (47f8 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa4>)
    47ae:	4798      	blx	r3
		if (is_list_element(taskListPrivate,task)) {
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	68da      	ldr	r2, [r3, #12]
    47b4:	687b      	ldr	r3, [r7, #4]
    47b6:	685b      	ldr	r3, [r3, #4]
    47b8:	4619      	mov	r1, r3
    47ba:	4610      	mov	r0, r2
    47bc:	4b0f      	ldr	r3, [pc, #60]	; (47fc <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa8>)
    47be:	4798      	blx	r3
    47c0:	4603      	mov	r3, r0
    47c2:	2b00      	cmp	r3, #0
    47c4:	d002      	beq.n	47cc <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x78>

			//ASSERT(false);
			return ERR_ALREADY_INITIALIZED;
    47c6:	f06f 0311 	mvn.w	r3, #17
    47ca:	e00b      	b.n	47e4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
		}
		AddALUTask(taskListPrivate,task);
    47cc:	687b      	ldr	r3, [r7, #4]
    47ce:	68d9      	ldr	r1, [r3, #12]
    47d0:	687b      	ldr	r3, [r7, #4]
    47d2:	685b      	ldr	r3, [r3, #4]
    47d4:	461a      	mov	r2, r3
    47d6:	6878      	ldr	r0, [r7, #4]
    47d8:	4b09      	ldr	r3, [pc, #36]	; (4800 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xac>)
    47da:	4798      	blx	r3
		return ERR_NONE;
    47dc:	2300      	movs	r3, #0
    47de:	e001      	b.n	47e4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
	}else{
		return ERR_ALREADY_INITIALIZED;
    47e0:	f06f 0311 	mvn.w	r3, #17
	}
	
}
    47e4:	4618      	mov	r0, r3
    47e6:	3708      	adds	r7, #8
    47e8:	46bd      	mov	sp, r7
    47ea:	bd80      	pop	{r7, pc}
    47ec:	00004979 	.word	0x00004979
    47f0:	00004931 	.word	0x00004931
    47f4:	000209b0 	.word	0x000209b0
    47f8:	000080d1 	.word	0x000080d1
    47fc:	000080f9 	.word	0x000080f9
    4800:	00004805 	.word	0x00004805

00004804 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask>:

void TaskHandler_Class::AddALUTask(list_descriptor *list,ControllerTask* pct){
    4804:	b580      	push	{r7, lr}
    4806:	b086      	sub	sp, #24
    4808:	af00      	add	r7, sp, #0
    480a:	60f8      	str	r0, [r7, #12]
    480c:	60b9      	str	r1, [r7, #8]
    480e:	607a      	str	r2, [r7, #4]
	ControllerTask *it, *head = (ControllerTask *)list_get_head(list);
    4810:	68b8      	ldr	r0, [r7, #8]
    4812:	4b09      	ldr	r3, [pc, #36]	; (4838 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x34>)
    4814:	4798      	blx	r3
    4816:	6178      	str	r0, [r7, #20]

	if (!head) {
    4818:	697b      	ldr	r3, [r7, #20]
    481a:	2b00      	cmp	r3, #0
    481c:	d104      	bne.n	4828 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x24>
		list_insert_as_head(list, pct);
    481e:	6879      	ldr	r1, [r7, #4]
    4820:	68b8      	ldr	r0, [r7, #8]
    4822:	4b06      	ldr	r3, [pc, #24]	; (483c <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x38>)
    4824:	4798      	blx	r3
		return;
    4826:	e003      	b.n	4830 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x2c>
		}else{
		list_insert_at_end(list,pct);
    4828:	6879      	ldr	r1, [r7, #4]
    482a:	68b8      	ldr	r0, [r7, #8]
    482c:	4b04      	ldr	r3, [pc, #16]	; (4840 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x3c>)
    482e:	4798      	blx	r3
	}

		

}
    4830:	3718      	adds	r7, #24
    4832:	46bd      	mov	sp, r7
    4834:	bd80      	pop	{r7, pc}
    4836:	bf00      	nop
    4838:	00004661 	.word	0x00004661
    483c:	00008131 	.word	0x00008131
    4840:	000081ad 	.word	0x000081ad

00004844 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask>:
		}
		list_delete_element(taskListPrivate, task);

		return ERR_NONE;
}
int32_t TaskHandler_Class::RemoveTask(ControllerTask& tk){
    4844:	b580      	push	{r7, lr}
    4846:	b082      	sub	sp, #8
    4848:	af00      	add	r7, sp, #0
    484a:	6078      	str	r0, [r7, #4]
    484c:	6039      	str	r1, [r7, #0]


	ASSERT(taskListPrivate && (&tk));
    484e:	687b      	ldr	r3, [r7, #4]
    4850:	68db      	ldr	r3, [r3, #12]
    4852:	2b00      	cmp	r3, #0
    4854:	d004      	beq.n	4860 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    4856:	683b      	ldr	r3, [r7, #0]
    4858:	2b00      	cmp	r3, #0
    485a:	d001      	beq.n	4860 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    485c:	2301      	movs	r3, #1
    485e:	e000      	b.n	4862 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1e>
    4860:	2300      	movs	r3, #0
    4862:	226f      	movs	r2, #111	; 0x6f
    4864:	4917      	ldr	r1, [pc, #92]	; (48c4 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x80>)
    4866:	4618      	mov	r0, r3
    4868:	4b17      	ldr	r3, [pc, #92]	; (48c8 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x84>)
    486a:	4798      	blx	r3
	if (IsNotDeclaredTask(tk))
    486c:	6839      	ldr	r1, [r7, #0]
    486e:	6878      	ldr	r0, [r7, #4]
    4870:	4b16      	ldr	r3, [pc, #88]	; (48cc <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x88>)
    4872:	4798      	blx	r3
    4874:	4603      	mov	r3, r0
    4876:	2b00      	cmp	r3, #0
    4878:	d002      	beq.n	4880 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x3c>
	{
			return ERR_NOT_FOUND;
    487a:	f06f 0309 	mvn.w	r3, #9
    487e:	e01d      	b.n	48bc <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
	} 
	else
	{
		
		if (!is_list_element(taskListPrivate, task)) {
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	68da      	ldr	r2, [r3, #12]
    4884:	687b      	ldr	r3, [r7, #4]
    4886:	685b      	ldr	r3, [r3, #4]
    4888:	4619      	mov	r1, r3
    488a:	4610      	mov	r0, r2
    488c:	4b10      	ldr	r3, [pc, #64]	; (48d0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x8c>)
    488e:	4798      	blx	r3
    4890:	4603      	mov	r3, r0
    4892:	f083 0301 	eor.w	r3, r3, #1
    4896:	b2db      	uxtb	r3, r3
    4898:	2b00      	cmp	r3, #0
    489a:	d002      	beq.n	48a2 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x5e>
			//ASSERT(false);
			return ERR_NOT_FOUND;
    489c:	f06f 0309 	mvn.w	r3, #9
    48a0:	e00c      	b.n	48bc <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
		}
			
		list_delete_element(taskListPrivate, task);
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	68da      	ldr	r2, [r3, #12]
    48a6:	687b      	ldr	r3, [r7, #4]
    48a8:	685b      	ldr	r3, [r3, #4]
    48aa:	4619      	mov	r1, r3
    48ac:	4610      	mov	r0, r2
    48ae:	4b09      	ldr	r3, [pc, #36]	; (48d4 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x90>)
    48b0:	4798      	blx	r3
		task->id=kALUNotTaskEvent;
    48b2:	687b      	ldr	r3, [r7, #4]
    48b4:	685b      	ldr	r3, [r3, #4]
    48b6:	2200      	movs	r2, #0
    48b8:	711a      	strb	r2, [r3, #4]
		return ERR_NONE;
    48ba:	2300      	movs	r3, #0
	}

	return ERR_NOT_FOUND;
}
    48bc:	4618      	mov	r0, r3
    48be:	3708      	adds	r7, #8
    48c0:	46bd      	mov	sp, r7
    48c2:	bd80      	pop	{r7, pc}
    48c4:	000209b0 	.word	0x000209b0
    48c8:	000080d1 	.word	0x000080d1
    48cc:	00004979 	.word	0x00004979
    48d0:	000080f9 	.word	0x000080f9
    48d4:	0000825b 	.word	0x0000825b

000048d8 <_ZN17TaskHandler_Class15GetHighPrioTaskEv>:

ControllerTask	TaskHandler_Class::GetHighPrioTask(void){
    48d8:	b480      	push	{r7}
    48da:	b087      	sub	sp, #28
    48dc:	af00      	add	r7, sp, #0
    48de:	6078      	str	r0, [r7, #4]
    48e0:	6039      	str	r1, [r7, #0]
	list_element *it;
	ControllerTask* ct;
	uint8_t		highPrio=kALUNumberTasks;
    48e2:	230c      	movs	r3, #12
    48e4:	73fb      	strb	r3, [r7, #15]
		
	for (it = taskListPrivate->head; it; it = it->next) {
    48e6:	683b      	ldr	r3, [r7, #0]
    48e8:	68db      	ldr	r3, [r3, #12]
    48ea:	681b      	ldr	r3, [r3, #0]
    48ec:	617b      	str	r3, [r7, #20]
    48ee:	697b      	ldr	r3, [r7, #20]
    48f0:	2b00      	cmp	r3, #0
    48f2:	d011      	beq.n	4918 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x40>
		ct=(ControllerTask*)it;
    48f4:	697b      	ldr	r3, [r7, #20]
    48f6:	613b      	str	r3, [r7, #16]
		if ((ct->prio)<(highPrio)) {
    48f8:	693b      	ldr	r3, [r7, #16]
    48fa:	795b      	ldrb	r3, [r3, #5]
    48fc:	461a      	mov	r2, r3
    48fe:	7bfb      	ldrb	r3, [r7, #15]
    4900:	429a      	cmp	r2, r3
    4902:	da05      	bge.n	4910 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x38>
			highPrio=ct->prio;
    4904:	693b      	ldr	r3, [r7, #16]
    4906:	795b      	ldrb	r3, [r3, #5]
    4908:	73fb      	strb	r3, [r7, #15]
			task=ct;
    490a:	683b      	ldr	r3, [r7, #0]
    490c:	693a      	ldr	r2, [r7, #16]
    490e:	605a      	str	r2, [r3, #4]
	for (it = taskListPrivate->head; it; it = it->next) {
    4910:	697b      	ldr	r3, [r7, #20]
    4912:	681b      	ldr	r3, [r3, #0]
    4914:	617b      	str	r3, [r7, #20]
    4916:	e7ea      	b.n	48ee <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x16>
			
		}
	}
	return (ControllerTask)(*task);
    4918:	683b      	ldr	r3, [r7, #0]
    491a:	685a      	ldr	r2, [r3, #4]
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	e892 0003 	ldmia.w	r2, {r0, r1}
    4922:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4926:	6878      	ldr	r0, [r7, #4]
    4928:	371c      	adds	r7, #28
    492a:	46bd      	mov	sp, r7
    492c:	bc80      	pop	{r7}
    492e:	4770      	bx	lr

00004930 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv>:

void	TaskHandler_Class::ChooseAvailableTask(void){
    4930:	b480      	push	{r7}
    4932:	b085      	sub	sp, #20
    4934:	af00      	add	r7, sp, #0
    4936:	6078      	str	r0, [r7, #4]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4938:	2300      	movs	r3, #0
    493a:	73fb      	strb	r3, [r7, #15]
    493c:	7bfb      	ldrb	r3, [r7, #15]
    493e:	2b0b      	cmp	r3, #11
    4940:	dc11      	bgt.n	4966 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x36>
	{
	
		if (taskStorage[ii].id==kALUNotTaskEvent)
    4942:	7bfb      	ldrb	r3, [r7, #15]
    4944:	4a0b      	ldr	r2, [pc, #44]	; (4974 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    4946:	00db      	lsls	r3, r3, #3
    4948:	4413      	add	r3, r2
    494a:	791b      	ldrb	r3, [r3, #4]
    494c:	2b00      	cmp	r3, #0
    494e:	d106      	bne.n	495e <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x2e>
		{			
			task=&taskStorage[ii];
    4950:	7bfb      	ldrb	r3, [r7, #15]
    4952:	00db      	lsls	r3, r3, #3
    4954:	4a07      	ldr	r2, [pc, #28]	; (4974 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    4956:	441a      	add	r2, r3
    4958:	687b      	ldr	r3, [r7, #4]
    495a:	605a      	str	r2, [r3, #4]
			return;
    495c:	e006      	b.n	496c <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x3c>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    495e:	7bfb      	ldrb	r3, [r7, #15]
    4960:	3301      	adds	r3, #1
    4962:	73fb      	strb	r3, [r7, #15]
    4964:	e7ea      	b.n	493c <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0xc>
			
		}
	}
	task=&taskStorage[0];
    4966:	687b      	ldr	r3, [r7, #4]
    4968:	4a02      	ldr	r2, [pc, #8]	; (4974 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    496a:	605a      	str	r2, [r3, #4]

}
    496c:	3714      	adds	r7, #20
    496e:	46bd      	mov	sp, r7
    4970:	bc80      	pop	{r7}
    4972:	4770      	bx	lr
    4974:	200086a4 	.word	0x200086a4

00004978 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask>:

bool	TaskHandler_Class::IsNotDeclaredTask(ControllerTask& tk){
    4978:	b480      	push	{r7}
    497a:	b085      	sub	sp, #20
    497c:	af00      	add	r7, sp, #0
    497e:	6078      	str	r0, [r7, #4]
    4980:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4982:	2300      	movs	r3, #0
    4984:	73fb      	strb	r3, [r7, #15]
    4986:	7bfb      	ldrb	r3, [r7, #15]
    4988:	2b0b      	cmp	r3, #11
    498a:	dc14      	bgt.n	49b6 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x3e>
	{
		if (taskStorage[ii].id==tk.id)
    498c:	7bfb      	ldrb	r3, [r7, #15]
    498e:	4a0d      	ldr	r2, [pc, #52]	; (49c4 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    4990:	00db      	lsls	r3, r3, #3
    4992:	4413      	add	r3, r2
    4994:	791a      	ldrb	r2, [r3, #4]
    4996:	683b      	ldr	r3, [r7, #0]
    4998:	791b      	ldrb	r3, [r3, #4]
    499a:	429a      	cmp	r2, r3
    499c:	d107      	bne.n	49ae <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x36>
		{
			task=&taskStorage[ii];
    499e:	7bfb      	ldrb	r3, [r7, #15]
    49a0:	00db      	lsls	r3, r3, #3
    49a2:	4a08      	ldr	r2, [pc, #32]	; (49c4 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    49a4:	441a      	add	r2, r3
    49a6:	687b      	ldr	r3, [r7, #4]
    49a8:	605a      	str	r2, [r3, #4]
			return false;
    49aa:	2300      	movs	r3, #0
    49ac:	e004      	b.n	49b8 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x40>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    49ae:	7bfb      	ldrb	r3, [r7, #15]
    49b0:	3301      	adds	r3, #1
    49b2:	73fb      	strb	r3, [r7, #15]
    49b4:	e7e7      	b.n	4986 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0xe>
			
		}
	}
	return true;
    49b6:	2301      	movs	r3, #1


}
    49b8:	4618      	mov	r0, r3
    49ba:	3714      	adds	r7, #20
    49bc:	46bd      	mov	sp, r7
    49be:	bc80      	pop	{r7}
    49c0:	4770      	bx	lr
    49c2:	bf00      	nop
    49c4:	200086a4 	.word	0x200086a4

000049c8 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum>:

bool	TaskHandler_Class::IsListedTask(ALUTaskEnum at){
    49c8:	b480      	push	{r7}
    49ca:	b085      	sub	sp, #20
    49cc:	af00      	add	r7, sp, #0
    49ce:	6078      	str	r0, [r7, #4]
    49d0:	460b      	mov	r3, r1
    49d2:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    49d4:	2300      	movs	r3, #0
    49d6:	73fb      	strb	r3, [r7, #15]
    49d8:	7bfb      	ldrb	r3, [r7, #15]
    49da:	2b0b      	cmp	r3, #11
    49dc:	dc0d      	bgt.n	49fa <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x32>
	{
		if (taskStorage[ii].id==at)
    49de:	7bfb      	ldrb	r3, [r7, #15]
    49e0:	4a09      	ldr	r2, [pc, #36]	; (4a08 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x40>)
    49e2:	00db      	lsls	r3, r3, #3
    49e4:	4413      	add	r3, r2
    49e6:	791b      	ldrb	r3, [r3, #4]
    49e8:	78fa      	ldrb	r2, [r7, #3]
    49ea:	429a      	cmp	r2, r3
    49ec:	d101      	bne.n	49f2 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x2a>
		{
		//	task=&taskStorage[ii];
			return true;
    49ee:	2301      	movs	r3, #1
    49f0:	e004      	b.n	49fc <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x34>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    49f2:	7bfb      	ldrb	r3, [r7, #15]
    49f4:	3301      	adds	r3, #1
    49f6:	73fb      	strb	r3, [r7, #15]
    49f8:	e7ee      	b.n	49d8 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x10>
			
		}
	}
	return false;
    49fa:	2300      	movs	r3, #0


    49fc:	4618      	mov	r0, r3
    49fe:	3714      	adds	r7, #20
    4a00:	46bd      	mov	sp, r7
    4a02:	bc80      	pop	{r7}
    4a04:	4770      	bx	lr
    4a06:	bf00      	nop
    4a08:	200086a4 	.word	0x200086a4

00004a0c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    4a0c:	b580      	push	{r7, lr}
    4a0e:	af00      	add	r7, sp, #0
	system_init();
    4a10:	4b03      	ldr	r3, [pc, #12]	; (4a20 <atmel_start_init+0x14>)
    4a12:	4798      	blx	r3
	usb_init();
    4a14:	4b03      	ldr	r3, [pc, #12]	; (4a24 <atmel_start_init+0x18>)
    4a16:	4798      	blx	r3
	spi_nor_flash_init();
    4a18:	4b03      	ldr	r3, [pc, #12]	; (4a28 <atmel_start_init+0x1c>)
    4a1a:	4798      	blx	r3
}
    4a1c:	bf00      	nop
    4a1e:	bd80      	pop	{r7, pc}
    4a20:	00005e4d 	.word	0x00005e4d
    4a24:	00010c75 	.word	0x00010c75
    4a28:	00010c09 	.word	0x00010c09

00004a2c <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    4a2c:	b480      	push	{r7}
    4a2e:	b085      	sub	sp, #20
    4a30:	af00      	add	r7, sp, #0
    4a32:	60f8      	str	r0, [r7, #12]
    4a34:	460b      	mov	r3, r1
    4a36:	607a      	str	r2, [r7, #4]
    4a38:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4a3a:	7afa      	ldrb	r2, [r7, #11]
    4a3c:	68fb      	ldr	r3, [r7, #12]
    4a3e:	3220      	adds	r2, #32
    4a40:	6879      	ldr	r1, [r7, #4]
    4a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    4a46:	bf00      	nop
    4a48:	3714      	adds	r7, #20
    4a4a:	46bd      	mov	sp, r7
    4a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a50:	4770      	bx	lr

00004a52 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    4a52:	b480      	push	{r7}
    4a54:	b083      	sub	sp, #12
    4a56:	af00      	add	r7, sp, #0
    4a58:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    4a5a:	687b      	ldr	r3, [r7, #4]
    4a5c:	691b      	ldr	r3, [r3, #16]
    4a5e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4a62:	687b      	ldr	r3, [r7, #4]
    4a64:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4a66:	bf00      	nop
    4a68:	370c      	adds	r7, #12
    4a6a:	46bd      	mov	sp, r7
    4a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a70:	4770      	bx	lr

00004a72 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    4a72:	b480      	push	{r7}
    4a74:	b083      	sub	sp, #12
    4a76:	af00      	add	r7, sp, #0
    4a78:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    4a7a:	687b      	ldr	r3, [r7, #4]
    4a7c:	691b      	ldr	r3, [r3, #16]
    4a7e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4a82:	687b      	ldr	r3, [r7, #4]
    4a84:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4a86:	bf00      	nop
    4a88:	370c      	adds	r7, #12
    4a8a:	46bd      	mov	sp, r7
    4a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a90:	4770      	bx	lr

00004a92 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    4a92:	b480      	push	{r7}
    4a94:	b083      	sub	sp, #12
    4a96:	af00      	add	r7, sp, #0
    4a98:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    4a9a:	687b      	ldr	r3, [r7, #4]
    4a9c:	691b      	ldr	r3, [r3, #16]
    4a9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4aa6:	bf00      	nop
    4aa8:	370c      	adds	r7, #12
    4aaa:	46bd      	mov	sp, r7
    4aac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ab0:	4770      	bx	lr

00004ab2 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    4ab2:	b480      	push	{r7}
    4ab4:	b083      	sub	sp, #12
    4ab6:	af00      	add	r7, sp, #0
    4ab8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    4aba:	687b      	ldr	r3, [r7, #4]
    4abc:	691b      	ldr	r3, [r3, #16]
    4abe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    4ac2:	687b      	ldr	r3, [r7, #4]
    4ac4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4ac6:	bf00      	nop
    4ac8:	370c      	adds	r7, #12
    4aca:	46bd      	mov	sp, r7
    4acc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ad0:	4770      	bx	lr

00004ad2 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    4ad2:	b480      	push	{r7}
    4ad4:	b083      	sub	sp, #12
    4ad6:	af00      	add	r7, sp, #0
    4ad8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    4ada:	687b      	ldr	r3, [r7, #4]
    4adc:	695b      	ldr	r3, [r3, #20]
    4ade:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    4ae2:	687b      	ldr	r3, [r7, #4]
    4ae4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4ae6:	bf00      	nop
    4ae8:	370c      	adds	r7, #12
    4aea:	46bd      	mov	sp, r7
    4aec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4af0:	4770      	bx	lr

00004af2 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    4af2:	b480      	push	{r7}
    4af4:	b083      	sub	sp, #12
    4af6:	af00      	add	r7, sp, #0
    4af8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    4afa:	687b      	ldr	r3, [r7, #4]
    4afc:	695b      	ldr	r3, [r3, #20]
    4afe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4b06:	bf00      	nop
    4b08:	370c      	adds	r7, #12
    4b0a:	46bd      	mov	sp, r7
    4b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b10:	4770      	bx	lr

00004b12 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    4b12:	b480      	push	{r7}
    4b14:	b083      	sub	sp, #12
    4b16:	af00      	add	r7, sp, #0
    4b18:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    4b1a:	687b      	ldr	r3, [r7, #4]
    4b1c:	695b      	ldr	r3, [r3, #20]
    4b1e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4b22:	687b      	ldr	r3, [r7, #4]
    4b24:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4b26:	bf00      	nop
    4b28:	370c      	adds	r7, #12
    4b2a:	46bd      	mov	sp, r7
    4b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b30:	4770      	bx	lr

00004b32 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    4b32:	b480      	push	{r7}
    4b34:	b083      	sub	sp, #12
    4b36:	af00      	add	r7, sp, #0
    4b38:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    4b3a:	687b      	ldr	r3, [r7, #4]
    4b3c:	695b      	ldr	r3, [r3, #20]
    4b3e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4b42:	687b      	ldr	r3, [r7, #4]
    4b44:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4b46:	bf00      	nop
    4b48:	370c      	adds	r7, #12
    4b4a:	46bd      	mov	sp, r7
    4b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b50:	4770      	bx	lr

00004b52 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    4b52:	b480      	push	{r7}
    4b54:	b083      	sub	sp, #12
    4b56:	af00      	add	r7, sp, #0
    4b58:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    4b5a:	687b      	ldr	r3, [r7, #4]
    4b5c:	695b      	ldr	r3, [r3, #20]
    4b5e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    4b62:	687b      	ldr	r3, [r7, #4]
    4b64:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4b66:	bf00      	nop
    4b68:	370c      	adds	r7, #12
    4b6a:	46bd      	mov	sp, r7
    4b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b70:	4770      	bx	lr

00004b72 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    4b72:	b480      	push	{r7}
    4b74:	b083      	sub	sp, #12
    4b76:	af00      	add	r7, sp, #0
    4b78:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    4b7a:	687b      	ldr	r3, [r7, #4]
    4b7c:	695b      	ldr	r3, [r3, #20]
    4b7e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    4b82:	687b      	ldr	r3, [r7, #4]
    4b84:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4b86:	bf00      	nop
    4b88:	370c      	adds	r7, #12
    4b8a:	46bd      	mov	sp, r7
    4b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b90:	4770      	bx	lr

00004b92 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    4b92:	b480      	push	{r7}
    4b94:	b083      	sub	sp, #12
    4b96:	af00      	add	r7, sp, #0
    4b98:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    4b9a:	687b      	ldr	r3, [r7, #4]
    4b9c:	699b      	ldr	r3, [r3, #24]
    4b9e:	f043 0201 	orr.w	r2, r3, #1
    4ba2:	687b      	ldr	r3, [r7, #4]
    4ba4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4ba6:	bf00      	nop
    4ba8:	370c      	adds	r7, #12
    4baa:	46bd      	mov	sp, r7
    4bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bb0:	4770      	bx	lr

00004bb2 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    4bb2:	b480      	push	{r7}
    4bb4:	b083      	sub	sp, #12
    4bb6:	af00      	add	r7, sp, #0
    4bb8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    4bba:	687b      	ldr	r3, [r7, #4]
    4bbc:	699b      	ldr	r3, [r3, #24]
    4bbe:	f043 0202 	orr.w	r2, r3, #2
    4bc2:	687b      	ldr	r3, [r7, #4]
    4bc4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4bc6:	bf00      	nop
    4bc8:	370c      	adds	r7, #12
    4bca:	46bd      	mov	sp, r7
    4bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bd0:	4770      	bx	lr

00004bd2 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    4bd2:	b480      	push	{r7}
    4bd4:	b083      	sub	sp, #12
    4bd6:	af00      	add	r7, sp, #0
    4bd8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	699b      	ldr	r3, [r3, #24]
    4bde:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    4be2:	687b      	ldr	r3, [r7, #4]
    4be4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4be6:	bf00      	nop
    4be8:	370c      	adds	r7, #12
    4bea:	46bd      	mov	sp, r7
    4bec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bf0:	4770      	bx	lr

00004bf2 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
    4bf2:	b480      	push	{r7}
    4bf4:	b083      	sub	sp, #12
    4bf6:	af00      	add	r7, sp, #0
    4bf8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	699b      	ldr	r3, [r3, #24]
    4bfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c06:	bf00      	nop
    4c08:	370c      	adds	r7, #12
    4c0a:	46bd      	mov	sp, r7
    4c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c10:	4770      	bx	lr

00004c12 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    4c12:	b480      	push	{r7}
    4c14:	b083      	sub	sp, #12
    4c16:	af00      	add	r7, sp, #0
    4c18:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    4c1a:	687b      	ldr	r3, [r7, #4]
    4c1c:	699b      	ldr	r3, [r3, #24]
    4c1e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    4c22:	687b      	ldr	r3, [r7, #4]
    4c24:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c26:	bf00      	nop
    4c28:	370c      	adds	r7, #12
    4c2a:	46bd      	mov	sp, r7
    4c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c30:	4770      	bx	lr

00004c32 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    4c32:	b480      	push	{r7}
    4c34:	b083      	sub	sp, #12
    4c36:	af00      	add	r7, sp, #0
    4c38:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    4c3a:	687b      	ldr	r3, [r7, #4]
    4c3c:	699b      	ldr	r3, [r3, #24]
    4c3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c46:	bf00      	nop
    4c48:	370c      	adds	r7, #12
    4c4a:	46bd      	mov	sp, r7
    4c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c50:	4770      	bx	lr

00004c52 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    4c52:	b480      	push	{r7}
    4c54:	b083      	sub	sp, #12
    4c56:	af00      	add	r7, sp, #0
    4c58:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    4c5a:	687b      	ldr	r3, [r7, #4]
    4c5c:	699b      	ldr	r3, [r3, #24]
    4c5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4c62:	687b      	ldr	r3, [r7, #4]
    4c64:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c66:	bf00      	nop
    4c68:	370c      	adds	r7, #12
    4c6a:	46bd      	mov	sp, r7
    4c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c70:	4770      	bx	lr

00004c72 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    4c72:	b480      	push	{r7}
    4c74:	b083      	sub	sp, #12
    4c76:	af00      	add	r7, sp, #0
    4c78:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    4c7a:	687b      	ldr	r3, [r7, #4]
    4c7c:	69db      	ldr	r3, [r3, #28]
    4c7e:	f043 0220 	orr.w	r2, r3, #32
    4c82:	687b      	ldr	r3, [r7, #4]
    4c84:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c86:	bf00      	nop
    4c88:	370c      	adds	r7, #12
    4c8a:	46bd      	mov	sp, r7
    4c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c90:	4770      	bx	lr

00004c92 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    4c92:	b480      	push	{r7}
    4c94:	b083      	sub	sp, #12
    4c96:	af00      	add	r7, sp, #0
    4c98:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	69db      	ldr	r3, [r3, #28]
    4c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    4ca2:	687b      	ldr	r3, [r7, #4]
    4ca4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4ca6:	bf00      	nop
    4ca8:	370c      	adds	r7, #12
    4caa:	46bd      	mov	sp, r7
    4cac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cb0:	4770      	bx	lr

00004cb2 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    4cb2:	b480      	push	{r7}
    4cb4:	b083      	sub	sp, #12
    4cb6:	af00      	add	r7, sp, #0
    4cb8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    4cba:	687b      	ldr	r3, [r7, #4]
    4cbc:	69db      	ldr	r3, [r3, #28]
    4cbe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4cc2:	687b      	ldr	r3, [r7, #4]
    4cc4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4cc6:	bf00      	nop
    4cc8:	370c      	adds	r7, #12
    4cca:	46bd      	mov	sp, r7
    4ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cd0:	4770      	bx	lr

00004cd2 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    4cd2:	b480      	push	{r7}
    4cd4:	b083      	sub	sp, #12
    4cd6:	af00      	add	r7, sp, #0
    4cd8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    4cda:	687b      	ldr	r3, [r7, #4]
    4cdc:	6a1b      	ldr	r3, [r3, #32]
    4cde:	f043 0201 	orr.w	r2, r3, #1
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4ce6:	bf00      	nop
    4ce8:	370c      	adds	r7, #12
    4cea:	46bd      	mov	sp, r7
    4cec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cf0:	4770      	bx	lr

00004cf2 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    4cf2:	b480      	push	{r7}
    4cf4:	b083      	sub	sp, #12
    4cf6:	af00      	add	r7, sp, #0
    4cf8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4cfa:	687b      	ldr	r3, [r7, #4]
    4cfc:	6a1b      	ldr	r3, [r3, #32]
    4cfe:	f043 0202 	orr.w	r2, r3, #2
    4d02:	687b      	ldr	r3, [r7, #4]
    4d04:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d06:	bf00      	nop
    4d08:	370c      	adds	r7, #12
    4d0a:	46bd      	mov	sp, r7
    4d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d10:	4770      	bx	lr

00004d12 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    4d12:	b480      	push	{r7}
    4d14:	b083      	sub	sp, #12
    4d16:	af00      	add	r7, sp, #0
    4d18:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    4d1a:	687b      	ldr	r3, [r7, #4]
    4d1c:	6a1b      	ldr	r3, [r3, #32]
    4d1e:	f043 0204 	orr.w	r2, r3, #4
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d26:	bf00      	nop
    4d28:	370c      	adds	r7, #12
    4d2a:	46bd      	mov	sp, r7
    4d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d30:	4770      	bx	lr

00004d32 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    4d32:	b480      	push	{r7}
    4d34:	b083      	sub	sp, #12
    4d36:	af00      	add	r7, sp, #0
    4d38:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	6a1b      	ldr	r3, [r3, #32]
    4d3e:	f043 0208 	orr.w	r2, r3, #8
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d46:	bf00      	nop
    4d48:	370c      	adds	r7, #12
    4d4a:	46bd      	mov	sp, r7
    4d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d50:	4770      	bx	lr

00004d52 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    4d52:	b480      	push	{r7}
    4d54:	b083      	sub	sp, #12
    4d56:	af00      	add	r7, sp, #0
    4d58:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	6a1b      	ldr	r3, [r3, #32]
    4d5e:	f043 0220 	orr.w	r2, r3, #32
    4d62:	687b      	ldr	r3, [r7, #4]
    4d64:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d66:	bf00      	nop
    4d68:	370c      	adds	r7, #12
    4d6a:	46bd      	mov	sp, r7
    4d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d70:	4770      	bx	lr

00004d72 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    4d72:	b480      	push	{r7}
    4d74:	b085      	sub	sp, #20
    4d76:	af00      	add	r7, sp, #0
    4d78:	60f8      	str	r0, [r7, #12]
    4d7a:	460b      	mov	r3, r1
    4d7c:	607a      	str	r2, [r7, #4]
    4d7e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4d80:	7afb      	ldrb	r3, [r7, #11]
    4d82:	68fa      	ldr	r2, [r7, #12]
    4d84:	01db      	lsls	r3, r3, #7
    4d86:	4413      	add	r3, r2
    4d88:	3308      	adds	r3, #8
    4d8a:	687a      	ldr	r2, [r7, #4]
    4d8c:	601a      	str	r2, [r3, #0]
}
    4d8e:	bf00      	nop
    4d90:	3714      	adds	r7, #20
    4d92:	46bd      	mov	sp, r7
    4d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d98:	4770      	bx	lr

00004d9a <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    4d9a:	b480      	push	{r7}
    4d9c:	b085      	sub	sp, #20
    4d9e:	af00      	add	r7, sp, #0
    4da0:	60f8      	str	r0, [r7, #12]
    4da2:	460b      	mov	r3, r1
    4da4:	607a      	str	r2, [r7, #4]
    4da6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4da8:	7afb      	ldrb	r3, [r7, #11]
    4daa:	68fa      	ldr	r2, [r7, #12]
    4dac:	01db      	lsls	r3, r3, #7
    4dae:	4413      	add	r3, r2
    4db0:	3304      	adds	r3, #4
    4db2:	687a      	ldr	r2, [r7, #4]
    4db4:	601a      	str	r2, [r3, #0]
}
    4db6:	bf00      	nop
    4db8:	3714      	adds	r7, #20
    4dba:	46bd      	mov	sp, r7
    4dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dc0:	4770      	bx	lr

00004dc2 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4dc2:	b480      	push	{r7}
    4dc4:	b085      	sub	sp, #20
    4dc6:	af00      	add	r7, sp, #0
    4dc8:	60f8      	str	r0, [r7, #12]
    4dca:	460b      	mov	r3, r1
    4dcc:	607a      	str	r2, [r7, #4]
    4dce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4dd0:	7afb      	ldrb	r3, [r7, #11]
    4dd2:	68fa      	ldr	r2, [r7, #12]
    4dd4:	01db      	lsls	r3, r3, #7
    4dd6:	4413      	add	r3, r2
    4dd8:	3318      	adds	r3, #24
    4dda:	687a      	ldr	r2, [r7, #4]
    4ddc:	601a      	str	r2, [r3, #0]
}
    4dde:	bf00      	nop
    4de0:	3714      	adds	r7, #20
    4de2:	46bd      	mov	sp, r7
    4de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4de8:	4770      	bx	lr

00004dea <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4dea:	b480      	push	{r7}
    4dec:	b085      	sub	sp, #20
    4dee:	af00      	add	r7, sp, #0
    4df0:	60f8      	str	r0, [r7, #12]
    4df2:	460b      	mov	r3, r1
    4df4:	607a      	str	r2, [r7, #4]
    4df6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4df8:	7afb      	ldrb	r3, [r7, #11]
    4dfa:	68fa      	ldr	r2, [r7, #12]
    4dfc:	01db      	lsls	r3, r3, #7
    4dfe:	4413      	add	r3, r2
    4e00:	3314      	adds	r3, #20
    4e02:	687a      	ldr	r2, [r7, #4]
    4e04:	601a      	str	r2, [r3, #0]
}
    4e06:	bf00      	nop
    4e08:	3714      	adds	r7, #20
    4e0a:	46bd      	mov	sp, r7
    4e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e10:	4770      	bx	lr

00004e12 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4e12:	b480      	push	{r7}
    4e14:	b085      	sub	sp, #20
    4e16:	af00      	add	r7, sp, #0
    4e18:	6078      	str	r0, [r7, #4]
    4e1a:	4608      	mov	r0, r1
    4e1c:	4611      	mov	r1, r2
    4e1e:	461a      	mov	r2, r3
    4e20:	4603      	mov	r3, r0
    4e22:	70fb      	strb	r3, [r7, #3]
    4e24:	460b      	mov	r3, r1
    4e26:	70bb      	strb	r3, [r7, #2]
    4e28:	4613      	mov	r3, r2
    4e2a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4e2c:	78fa      	ldrb	r2, [r7, #3]
    4e2e:	78bb      	ldrb	r3, [r7, #2]
    4e30:	6879      	ldr	r1, [r7, #4]
    4e32:	01d2      	lsls	r2, r2, #7
    4e34:	440a      	add	r2, r1
    4e36:	4413      	add	r3, r2
    4e38:	3330      	adds	r3, #48	; 0x30
    4e3a:	781b      	ldrb	r3, [r3, #0]
    4e3c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4e3e:	7bfb      	ldrb	r3, [r7, #15]
    4e40:	f023 030f 	bic.w	r3, r3, #15
    4e44:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    4e46:	787b      	ldrb	r3, [r7, #1]
    4e48:	f003 030f 	and.w	r3, r3, #15
    4e4c:	b2da      	uxtb	r2, r3
    4e4e:	7bfb      	ldrb	r3, [r7, #15]
    4e50:	4313      	orrs	r3, r2
    4e52:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4e54:	78fa      	ldrb	r2, [r7, #3]
    4e56:	78bb      	ldrb	r3, [r7, #2]
    4e58:	6879      	ldr	r1, [r7, #4]
    4e5a:	01d2      	lsls	r2, r2, #7
    4e5c:	440a      	add	r2, r1
    4e5e:	4413      	add	r3, r2
    4e60:	3330      	adds	r3, #48	; 0x30
    4e62:	7bfa      	ldrb	r2, [r7, #15]
    4e64:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4e66:	bf00      	nop
    4e68:	3714      	adds	r7, #20
    4e6a:	46bd      	mov	sp, r7
    4e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e70:	4770      	bx	lr

00004e72 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4e72:	b480      	push	{r7}
    4e74:	b085      	sub	sp, #20
    4e76:	af00      	add	r7, sp, #0
    4e78:	6078      	str	r0, [r7, #4]
    4e7a:	4608      	mov	r0, r1
    4e7c:	4611      	mov	r1, r2
    4e7e:	461a      	mov	r2, r3
    4e80:	4603      	mov	r3, r0
    4e82:	70fb      	strb	r3, [r7, #3]
    4e84:	460b      	mov	r3, r1
    4e86:	70bb      	strb	r3, [r7, #2]
    4e88:	4613      	mov	r3, r2
    4e8a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4e8c:	78fa      	ldrb	r2, [r7, #3]
    4e8e:	78bb      	ldrb	r3, [r7, #2]
    4e90:	6879      	ldr	r1, [r7, #4]
    4e92:	01d2      	lsls	r2, r2, #7
    4e94:	440a      	add	r2, r1
    4e96:	4413      	add	r3, r2
    4e98:	3330      	adds	r3, #48	; 0x30
    4e9a:	781b      	ldrb	r3, [r3, #0]
    4e9c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4e9e:	7bfb      	ldrb	r3, [r7, #15]
    4ea0:	f003 030f 	and.w	r3, r3, #15
    4ea4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    4ea6:	787b      	ldrb	r3, [r7, #1]
    4ea8:	011b      	lsls	r3, r3, #4
    4eaa:	b2da      	uxtb	r2, r3
    4eac:	7bfb      	ldrb	r3, [r7, #15]
    4eae:	4313      	orrs	r3, r2
    4eb0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4eb2:	78fa      	ldrb	r2, [r7, #3]
    4eb4:	78bb      	ldrb	r3, [r7, #2]
    4eb6:	6879      	ldr	r1, [r7, #4]
    4eb8:	01d2      	lsls	r2, r2, #7
    4eba:	440a      	add	r2, r1
    4ebc:	4413      	add	r3, r2
    4ebe:	3330      	adds	r3, #48	; 0x30
    4ec0:	7bfa      	ldrb	r2, [r7, #15]
    4ec2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4ec4:	bf00      	nop
    4ec6:	3714      	adds	r7, #20
    4ec8:	46bd      	mov	sp, r7
    4eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ece:	4770      	bx	lr

00004ed0 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    4ed0:	b480      	push	{r7}
    4ed2:	b085      	sub	sp, #20
    4ed4:	af00      	add	r7, sp, #0
    4ed6:	6078      	str	r0, [r7, #4]
    4ed8:	4608      	mov	r0, r1
    4eda:	4611      	mov	r1, r2
    4edc:	461a      	mov	r2, r3
    4ede:	4603      	mov	r3, r0
    4ee0:	70fb      	strb	r3, [r7, #3]
    4ee2:	460b      	mov	r3, r1
    4ee4:	70bb      	strb	r3, [r7, #2]
    4ee6:	4613      	mov	r3, r2
    4ee8:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4eea:	78fa      	ldrb	r2, [r7, #3]
    4eec:	78bb      	ldrb	r3, [r7, #2]
    4eee:	6879      	ldr	r1, [r7, #4]
    4ef0:	01d2      	lsls	r2, r2, #7
    4ef2:	440a      	add	r2, r1
    4ef4:	4413      	add	r3, r2
    4ef6:	3340      	adds	r3, #64	; 0x40
    4ef8:	781b      	ldrb	r3, [r3, #0]
    4efa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    4efc:	7bfb      	ldrb	r3, [r7, #15]
    4efe:	f023 0301 	bic.w	r3, r3, #1
    4f02:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4f04:	787a      	ldrb	r2, [r7, #1]
    4f06:	7bfb      	ldrb	r3, [r7, #15]
    4f08:	4313      	orrs	r3, r2
    4f0a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f0c:	78fa      	ldrb	r2, [r7, #3]
    4f0e:	78bb      	ldrb	r3, [r7, #2]
    4f10:	6879      	ldr	r1, [r7, #4]
    4f12:	01d2      	lsls	r2, r2, #7
    4f14:	440a      	add	r2, r1
    4f16:	4413      	add	r3, r2
    4f18:	3340      	adds	r3, #64	; 0x40
    4f1a:	7bfa      	ldrb	r2, [r7, #15]
    4f1c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4f1e:	bf00      	nop
    4f20:	3714      	adds	r7, #20
    4f22:	46bd      	mov	sp, r7
    4f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f28:	4770      	bx	lr

00004f2a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    4f2a:	b490      	push	{r4, r7}
    4f2c:	b082      	sub	sp, #8
    4f2e:	af00      	add	r7, sp, #0
    4f30:	6078      	str	r0, [r7, #4]
    4f32:	460b      	mov	r3, r1
    4f34:	70fb      	strb	r3, [r7, #3]
    4f36:	4613      	mov	r3, r2
    4f38:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4f3a:	78fa      	ldrb	r2, [r7, #3]
    4f3c:	78bb      	ldrb	r3, [r7, #2]
    4f3e:	78f8      	ldrb	r0, [r7, #3]
    4f40:	78b9      	ldrb	r1, [r7, #2]
    4f42:	687c      	ldr	r4, [r7, #4]
    4f44:	01c0      	lsls	r0, r0, #7
    4f46:	4420      	add	r0, r4
    4f48:	4401      	add	r1, r0
    4f4a:	3140      	adds	r1, #64	; 0x40
    4f4c:	7809      	ldrb	r1, [r1, #0]
    4f4e:	b2c9      	uxtb	r1, r1
    4f50:	f041 0104 	orr.w	r1, r1, #4
    4f54:	b2c8      	uxtb	r0, r1
    4f56:	6879      	ldr	r1, [r7, #4]
    4f58:	01d2      	lsls	r2, r2, #7
    4f5a:	440a      	add	r2, r1
    4f5c:	4413      	add	r3, r2
    4f5e:	3340      	adds	r3, #64	; 0x40
    4f60:	4602      	mov	r2, r0
    4f62:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4f64:	bf00      	nop
    4f66:	3708      	adds	r7, #8
    4f68:	46bd      	mov	sp, r7
    4f6a:	bc90      	pop	{r4, r7}
    4f6c:	4770      	bx	lr

00004f6e <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    4f6e:	b490      	push	{r4, r7}
    4f70:	b082      	sub	sp, #8
    4f72:	af00      	add	r7, sp, #0
    4f74:	6078      	str	r0, [r7, #4]
    4f76:	460b      	mov	r3, r1
    4f78:	70fb      	strb	r3, [r7, #3]
    4f7a:	4613      	mov	r3, r2
    4f7c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4f7e:	78fa      	ldrb	r2, [r7, #3]
    4f80:	78bb      	ldrb	r3, [r7, #2]
    4f82:	78f8      	ldrb	r0, [r7, #3]
    4f84:	78b9      	ldrb	r1, [r7, #2]
    4f86:	687c      	ldr	r4, [r7, #4]
    4f88:	01c0      	lsls	r0, r0, #7
    4f8a:	4420      	add	r0, r4
    4f8c:	4401      	add	r1, r0
    4f8e:	3140      	adds	r1, #64	; 0x40
    4f90:	7809      	ldrb	r1, [r1, #0]
    4f92:	b2c9      	uxtb	r1, r1
    4f94:	f021 0104 	bic.w	r1, r1, #4
    4f98:	b2c8      	uxtb	r0, r1
    4f9a:	6879      	ldr	r1, [r7, #4]
    4f9c:	01d2      	lsls	r2, r2, #7
    4f9e:	440a      	add	r2, r1
    4fa0:	4413      	add	r3, r2
    4fa2:	3340      	adds	r3, #64	; 0x40
    4fa4:	4602      	mov	r2, r0
    4fa6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4fa8:	bf00      	nop
    4faa:	3708      	adds	r7, #8
    4fac:	46bd      	mov	sp, r7
    4fae:	bc90      	pop	{r4, r7}
    4fb0:	4770      	bx	lr

00004fb2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    4fb2:	b480      	push	{r7}
    4fb4:	b085      	sub	sp, #20
    4fb6:	af00      	add	r7, sp, #0
    4fb8:	60f8      	str	r0, [r7, #12]
    4fba:	460b      	mov	r3, r1
    4fbc:	607a      	str	r2, [r7, #4]
    4fbe:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fc0:	7afb      	ldrb	r3, [r7, #11]
    4fc2:	68fa      	ldr	r2, [r7, #12]
    4fc4:	01db      	lsls	r3, r3, #7
    4fc6:	4413      	add	r3, r2
    4fc8:	3328      	adds	r3, #40	; 0x28
    4fca:	687a      	ldr	r2, [r7, #4]
    4fcc:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4fce:	bf00      	nop
    4fd0:	3714      	adds	r7, #20
    4fd2:	46bd      	mov	sp, r7
    4fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fd8:	4770      	bx	lr
	...

00004fdc <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    4fdc:	b580      	push	{r7, lr}
    4fde:	b082      	sub	sp, #8
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	4603      	mov	r3, r0
    4fe4:	6039      	str	r1, [r7, #0]
    4fe6:	71fb      	strb	r3, [r7, #7]
    4fe8:	4613      	mov	r3, r2
    4fea:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    4fec:	79bb      	ldrb	r3, [r7, #6]
    4fee:	2b01      	cmp	r3, #1
    4ff0:	d01c      	beq.n	502c <_gpio_set_direction+0x50>
    4ff2:	2b02      	cmp	r3, #2
    4ff4:	d037      	beq.n	5066 <_gpio_set_direction+0x8a>
    4ff6:	2b00      	cmp	r3, #0
    4ff8:	d14e      	bne.n	5098 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    4ffa:	79fb      	ldrb	r3, [r7, #7]
    4ffc:	683a      	ldr	r2, [r7, #0]
    4ffe:	4619      	mov	r1, r3
    5000:	482a      	ldr	r0, [pc, #168]	; (50ac <_gpio_set_direction+0xd0>)
    5002:	4b2b      	ldr	r3, [pc, #172]	; (50b0 <_gpio_set_direction+0xd4>)
    5004:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    5006:	683b      	ldr	r3, [r7, #0]
    5008:	b29b      	uxth	r3, r3
    500a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    500e:	79fb      	ldrb	r3, [r7, #7]
    5010:	4619      	mov	r1, r3
    5012:	4826      	ldr	r0, [pc, #152]	; (50ac <_gpio_set_direction+0xd0>)
    5014:	4b27      	ldr	r3, [pc, #156]	; (50b4 <_gpio_set_direction+0xd8>)
    5016:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    5018:	683b      	ldr	r3, [r7, #0]
    501a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    501c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    5020:	79fb      	ldrb	r3, [r7, #7]
    5022:	4619      	mov	r1, r3
    5024:	4821      	ldr	r0, [pc, #132]	; (50ac <_gpio_set_direction+0xd0>)
    5026:	4b23      	ldr	r3, [pc, #140]	; (50b4 <_gpio_set_direction+0xd8>)
    5028:	4798      	blx	r3
		break;
    502a:	e03a      	b.n	50a2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    502c:	79fb      	ldrb	r3, [r7, #7]
    502e:	683a      	ldr	r2, [r7, #0]
    5030:	4619      	mov	r1, r3
    5032:	481e      	ldr	r0, [pc, #120]	; (50ac <_gpio_set_direction+0xd0>)
    5034:	4b1e      	ldr	r3, [pc, #120]	; (50b0 <_gpio_set_direction+0xd4>)
    5036:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    5038:	683b      	ldr	r3, [r7, #0]
    503a:	b29b      	uxth	r3, r3
    503c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    5040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5044:	79f9      	ldrb	r1, [r7, #7]
    5046:	461a      	mov	r2, r3
    5048:	4818      	ldr	r0, [pc, #96]	; (50ac <_gpio_set_direction+0xd0>)
    504a:	4b1a      	ldr	r3, [pc, #104]	; (50b4 <_gpio_set_direction+0xd8>)
    504c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    504e:	683b      	ldr	r3, [r7, #0]
    5050:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    5052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    5056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    505a:	79f9      	ldrb	r1, [r7, #7]
    505c:	461a      	mov	r2, r3
    505e:	4813      	ldr	r0, [pc, #76]	; (50ac <_gpio_set_direction+0xd0>)
    5060:	4b14      	ldr	r3, [pc, #80]	; (50b4 <_gpio_set_direction+0xd8>)
    5062:	4798      	blx	r3
		break;
    5064:	e01d      	b.n	50a2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    5066:	79fb      	ldrb	r3, [r7, #7]
    5068:	683a      	ldr	r2, [r7, #0]
    506a:	4619      	mov	r1, r3
    506c:	480f      	ldr	r0, [pc, #60]	; (50ac <_gpio_set_direction+0xd0>)
    506e:	4b12      	ldr	r3, [pc, #72]	; (50b8 <_gpio_set_direction+0xdc>)
    5070:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    5072:	683b      	ldr	r3, [r7, #0]
    5074:	b29b      	uxth	r3, r3
    5076:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    507a:	79fb      	ldrb	r3, [r7, #7]
    507c:	4619      	mov	r1, r3
    507e:	480b      	ldr	r0, [pc, #44]	; (50ac <_gpio_set_direction+0xd0>)
    5080:	4b0c      	ldr	r3, [pc, #48]	; (50b4 <_gpio_set_direction+0xd8>)
    5082:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    5084:	683b      	ldr	r3, [r7, #0]
    5086:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    5088:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    508c:	79fb      	ldrb	r3, [r7, #7]
    508e:	4619      	mov	r1, r3
    5090:	4806      	ldr	r0, [pc, #24]	; (50ac <_gpio_set_direction+0xd0>)
    5092:	4b08      	ldr	r3, [pc, #32]	; (50b4 <_gpio_set_direction+0xd8>)
    5094:	4798      	blx	r3
		break;
    5096:	e004      	b.n	50a2 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    5098:	2246      	movs	r2, #70	; 0x46
    509a:	4908      	ldr	r1, [pc, #32]	; (50bc <_gpio_set_direction+0xe0>)
    509c:	2000      	movs	r0, #0
    509e:	4b08      	ldr	r3, [pc, #32]	; (50c0 <_gpio_set_direction+0xe4>)
    50a0:	4798      	blx	r3
	}
}
    50a2:	bf00      	nop
    50a4:	3708      	adds	r7, #8
    50a6:	46bd      	mov	sp, r7
    50a8:	bd80      	pop	{r7, pc}
    50aa:	bf00      	nop
    50ac:	41008000 	.word	0x41008000
    50b0:	00004d9b 	.word	0x00004d9b
    50b4:	00004fb3 	.word	0x00004fb3
    50b8:	00004d73 	.word	0x00004d73
    50bc:	000209cc 	.word	0x000209cc
    50c0:	000080d1 	.word	0x000080d1

000050c4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    50c4:	b580      	push	{r7, lr}
    50c6:	b082      	sub	sp, #8
    50c8:	af00      	add	r7, sp, #0
    50ca:	4603      	mov	r3, r0
    50cc:	6039      	str	r1, [r7, #0]
    50ce:	71fb      	strb	r3, [r7, #7]
    50d0:	4613      	mov	r3, r2
    50d2:	71bb      	strb	r3, [r7, #6]
	if (level) {
    50d4:	79bb      	ldrb	r3, [r7, #6]
    50d6:	2b00      	cmp	r3, #0
    50d8:	d006      	beq.n	50e8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    50da:	79fb      	ldrb	r3, [r7, #7]
    50dc:	683a      	ldr	r2, [r7, #0]
    50de:	4619      	mov	r1, r3
    50e0:	4806      	ldr	r0, [pc, #24]	; (50fc <_gpio_set_level+0x38>)
    50e2:	4b07      	ldr	r3, [pc, #28]	; (5100 <_gpio_set_level+0x3c>)
    50e4:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    50e6:	e005      	b.n	50f4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    50e8:	79fb      	ldrb	r3, [r7, #7]
    50ea:	683a      	ldr	r2, [r7, #0]
    50ec:	4619      	mov	r1, r3
    50ee:	4803      	ldr	r0, [pc, #12]	; (50fc <_gpio_set_level+0x38>)
    50f0:	4b04      	ldr	r3, [pc, #16]	; (5104 <_gpio_set_level+0x40>)
    50f2:	4798      	blx	r3
}
    50f4:	bf00      	nop
    50f6:	3708      	adds	r7, #8
    50f8:	46bd      	mov	sp, r7
    50fa:	bd80      	pop	{r7, pc}
    50fc:	41008000 	.word	0x41008000
    5100:	00004dc3 	.word	0x00004dc3
    5104:	00004deb 	.word	0x00004deb

00005108 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    5108:	b580      	push	{r7, lr}
    510a:	b082      	sub	sp, #8
    510c:	af00      	add	r7, sp, #0
    510e:	4603      	mov	r3, r0
    5110:	71fb      	strb	r3, [r7, #7]
    5112:	460b      	mov	r3, r1
    5114:	71bb      	strb	r3, [r7, #6]
    5116:	4613      	mov	r3, r2
    5118:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    511a:	797b      	ldrb	r3, [r7, #5]
    511c:	2b01      	cmp	r3, #1
    511e:	d00a      	beq.n	5136 <_gpio_set_pin_pull_mode+0x2e>
    5120:	2b02      	cmp	r3, #2
    5122:	d01f      	beq.n	5164 <_gpio_set_pin_pull_mode+0x5c>
    5124:	2b00      	cmp	r3, #0
    5126:	d134      	bne.n	5192 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    5128:	79ba      	ldrb	r2, [r7, #6]
    512a:	79fb      	ldrb	r3, [r7, #7]
    512c:	4619      	mov	r1, r3
    512e:	481e      	ldr	r0, [pc, #120]	; (51a8 <_gpio_set_pin_pull_mode+0xa0>)
    5130:	4b1e      	ldr	r3, [pc, #120]	; (51ac <_gpio_set_pin_pull_mode+0xa4>)
    5132:	4798      	blx	r3
		break;
    5134:	e033      	b.n	519e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    5136:	79bb      	ldrb	r3, [r7, #6]
    5138:	2201      	movs	r2, #1
    513a:	409a      	lsls	r2, r3
    513c:	79fb      	ldrb	r3, [r7, #7]
    513e:	4619      	mov	r1, r3
    5140:	4819      	ldr	r0, [pc, #100]	; (51a8 <_gpio_set_pin_pull_mode+0xa0>)
    5142:	4b1b      	ldr	r3, [pc, #108]	; (51b0 <_gpio_set_pin_pull_mode+0xa8>)
    5144:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    5146:	79ba      	ldrb	r2, [r7, #6]
    5148:	79fb      	ldrb	r3, [r7, #7]
    514a:	4619      	mov	r1, r3
    514c:	4816      	ldr	r0, [pc, #88]	; (51a8 <_gpio_set_pin_pull_mode+0xa0>)
    514e:	4b19      	ldr	r3, [pc, #100]	; (51b4 <_gpio_set_pin_pull_mode+0xac>)
    5150:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    5152:	79bb      	ldrb	r3, [r7, #6]
    5154:	2201      	movs	r2, #1
    5156:	409a      	lsls	r2, r3
    5158:	79fb      	ldrb	r3, [r7, #7]
    515a:	4619      	mov	r1, r3
    515c:	4812      	ldr	r0, [pc, #72]	; (51a8 <_gpio_set_pin_pull_mode+0xa0>)
    515e:	4b16      	ldr	r3, [pc, #88]	; (51b8 <_gpio_set_pin_pull_mode+0xb0>)
    5160:	4798      	blx	r3
		break;
    5162:	e01c      	b.n	519e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    5164:	79bb      	ldrb	r3, [r7, #6]
    5166:	2201      	movs	r2, #1
    5168:	409a      	lsls	r2, r3
    516a:	79fb      	ldrb	r3, [r7, #7]
    516c:	4619      	mov	r1, r3
    516e:	480e      	ldr	r0, [pc, #56]	; (51a8 <_gpio_set_pin_pull_mode+0xa0>)
    5170:	4b0f      	ldr	r3, [pc, #60]	; (51b0 <_gpio_set_pin_pull_mode+0xa8>)
    5172:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    5174:	79ba      	ldrb	r2, [r7, #6]
    5176:	79fb      	ldrb	r3, [r7, #7]
    5178:	4619      	mov	r1, r3
    517a:	480b      	ldr	r0, [pc, #44]	; (51a8 <_gpio_set_pin_pull_mode+0xa0>)
    517c:	4b0d      	ldr	r3, [pc, #52]	; (51b4 <_gpio_set_pin_pull_mode+0xac>)
    517e:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    5180:	79bb      	ldrb	r3, [r7, #6]
    5182:	2201      	movs	r2, #1
    5184:	409a      	lsls	r2, r3
    5186:	79fb      	ldrb	r3, [r7, #7]
    5188:	4619      	mov	r1, r3
    518a:	4807      	ldr	r0, [pc, #28]	; (51a8 <_gpio_set_pin_pull_mode+0xa0>)
    518c:	4b0b      	ldr	r3, [pc, #44]	; (51bc <_gpio_set_pin_pull_mode+0xb4>)
    518e:	4798      	blx	r3
		break;
    5190:	e005      	b.n	519e <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    5192:	2289      	movs	r2, #137	; 0x89
    5194:	490a      	ldr	r1, [pc, #40]	; (51c0 <_gpio_set_pin_pull_mode+0xb8>)
    5196:	2000      	movs	r0, #0
    5198:	4b0a      	ldr	r3, [pc, #40]	; (51c4 <_gpio_set_pin_pull_mode+0xbc>)
    519a:	4798      	blx	r3
		break;
    519c:	bf00      	nop
	}
}
    519e:	bf00      	nop
    51a0:	3708      	adds	r7, #8
    51a2:	46bd      	mov	sp, r7
    51a4:	bd80      	pop	{r7, pc}
    51a6:	bf00      	nop
    51a8:	41008000 	.word	0x41008000
    51ac:	00004f6f 	.word	0x00004f6f
    51b0:	00004d9b 	.word	0x00004d9b
    51b4:	00004f2b 	.word	0x00004f2b
    51b8:	00004dc3 	.word	0x00004dc3
    51bc:	00004deb 	.word	0x00004deb
    51c0:	000209cc 	.word	0x000209cc
    51c4:	000080d1 	.word	0x000080d1

000051c8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    51c8:	b590      	push	{r4, r7, lr}
    51ca:	b085      	sub	sp, #20
    51cc:	af00      	add	r7, sp, #0
    51ce:	6078      	str	r0, [r7, #4]
    51d0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    51d2:	687b      	ldr	r3, [r7, #4]
    51d4:	095b      	lsrs	r3, r3, #5
    51d6:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	b2db      	uxtb	r3, r3
    51dc:	f003 031f 	and.w	r3, r3, #31
    51e0:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    51e2:	683b      	ldr	r3, [r7, #0]
    51e4:	f1b3 3fff 	cmp.w	r3, #4294967295
    51e8:	d106      	bne.n	51f8 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    51ea:	7bba      	ldrb	r2, [r7, #14]
    51ec:	7bf9      	ldrb	r1, [r7, #15]
    51ee:	2300      	movs	r3, #0
    51f0:	4812      	ldr	r0, [pc, #72]	; (523c <_gpio_set_pin_function+0x74>)
    51f2:	4c13      	ldr	r4, [pc, #76]	; (5240 <_gpio_set_pin_function+0x78>)
    51f4:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    51f6:	e01d      	b.n	5234 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    51f8:	7bba      	ldrb	r2, [r7, #14]
    51fa:	7bf9      	ldrb	r1, [r7, #15]
    51fc:	2301      	movs	r3, #1
    51fe:	480f      	ldr	r0, [pc, #60]	; (523c <_gpio_set_pin_function+0x74>)
    5200:	4c0f      	ldr	r4, [pc, #60]	; (5240 <_gpio_set_pin_function+0x78>)
    5202:	47a0      	blx	r4
		if (pin & 1) {
    5204:	7bbb      	ldrb	r3, [r7, #14]
    5206:	f003 0301 	and.w	r3, r3, #1
    520a:	2b00      	cmp	r3, #0
    520c:	d009      	beq.n	5222 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    520e:	7bbb      	ldrb	r3, [r7, #14]
    5210:	085b      	lsrs	r3, r3, #1
    5212:	b2da      	uxtb	r2, r3
    5214:	683b      	ldr	r3, [r7, #0]
    5216:	b2db      	uxtb	r3, r3
    5218:	7bf9      	ldrb	r1, [r7, #15]
    521a:	4808      	ldr	r0, [pc, #32]	; (523c <_gpio_set_pin_function+0x74>)
    521c:	4c09      	ldr	r4, [pc, #36]	; (5244 <_gpio_set_pin_function+0x7c>)
    521e:	47a0      	blx	r4
}
    5220:	e008      	b.n	5234 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    5222:	7bbb      	ldrb	r3, [r7, #14]
    5224:	085b      	lsrs	r3, r3, #1
    5226:	b2da      	uxtb	r2, r3
    5228:	683b      	ldr	r3, [r7, #0]
    522a:	b2db      	uxtb	r3, r3
    522c:	7bf9      	ldrb	r1, [r7, #15]
    522e:	4803      	ldr	r0, [pc, #12]	; (523c <_gpio_set_pin_function+0x74>)
    5230:	4c05      	ldr	r4, [pc, #20]	; (5248 <_gpio_set_pin_function+0x80>)
    5232:	47a0      	blx	r4
}
    5234:	bf00      	nop
    5236:	3714      	adds	r7, #20
    5238:	46bd      	mov	sp, r7
    523a:	bd90      	pop	{r4, r7, pc}
    523c:	41008000 	.word	0x41008000
    5240:	00004ed1 	.word	0x00004ed1
    5244:	00004e73 	.word	0x00004e73
    5248:	00004e13 	.word	0x00004e13

0000524c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    524c:	b580      	push	{r7, lr}
    524e:	b082      	sub	sp, #8
    5250:	af00      	add	r7, sp, #0
    5252:	4603      	mov	r3, r0
    5254:	460a      	mov	r2, r1
    5256:	71fb      	strb	r3, [r7, #7]
    5258:	4613      	mov	r3, r2
    525a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    525c:	79fb      	ldrb	r3, [r7, #7]
    525e:	095b      	lsrs	r3, r3, #5
    5260:	b2d8      	uxtb	r0, r3
    5262:	79fb      	ldrb	r3, [r7, #7]
    5264:	f003 031f 	and.w	r3, r3, #31
    5268:	b2db      	uxtb	r3, r3
    526a:	79ba      	ldrb	r2, [r7, #6]
    526c:	4619      	mov	r1, r3
    526e:	4b03      	ldr	r3, [pc, #12]	; (527c <gpio_set_pin_pull_mode+0x30>)
    5270:	4798      	blx	r3
}
    5272:	bf00      	nop
    5274:	3708      	adds	r7, #8
    5276:	46bd      	mov	sp, r7
    5278:	bd80      	pop	{r7, pc}
    527a:	bf00      	nop
    527c:	00005109 	.word	0x00005109

00005280 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    5280:	b580      	push	{r7, lr}
    5282:	b082      	sub	sp, #8
    5284:	af00      	add	r7, sp, #0
    5286:	6078      	str	r0, [r7, #4]
    5288:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    528a:	6839      	ldr	r1, [r7, #0]
    528c:	6878      	ldr	r0, [r7, #4]
    528e:	4b03      	ldr	r3, [pc, #12]	; (529c <gpio_set_pin_function+0x1c>)
    5290:	4798      	blx	r3
}
    5292:	bf00      	nop
    5294:	3708      	adds	r7, #8
    5296:	46bd      	mov	sp, r7
    5298:	bd80      	pop	{r7, pc}
    529a:	bf00      	nop
    529c:	000051c9 	.word	0x000051c9

000052a0 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    52a0:	b580      	push	{r7, lr}
    52a2:	b082      	sub	sp, #8
    52a4:	af00      	add	r7, sp, #0
    52a6:	4603      	mov	r3, r0
    52a8:	460a      	mov	r2, r1
    52aa:	71fb      	strb	r3, [r7, #7]
    52ac:	4613      	mov	r3, r2
    52ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    52b0:	79fb      	ldrb	r3, [r7, #7]
    52b2:	095b      	lsrs	r3, r3, #5
    52b4:	b2d8      	uxtb	r0, r3
    52b6:	79fb      	ldrb	r3, [r7, #7]
    52b8:	f003 031f 	and.w	r3, r3, #31
    52bc:	2201      	movs	r2, #1
    52be:	fa02 f303 	lsl.w	r3, r2, r3
    52c2:	79ba      	ldrb	r2, [r7, #6]
    52c4:	4619      	mov	r1, r3
    52c6:	4b03      	ldr	r3, [pc, #12]	; (52d4 <gpio_set_pin_direction+0x34>)
    52c8:	4798      	blx	r3
}
    52ca:	bf00      	nop
    52cc:	3708      	adds	r7, #8
    52ce:	46bd      	mov	sp, r7
    52d0:	bd80      	pop	{r7, pc}
    52d2:	bf00      	nop
    52d4:	00004fdd 	.word	0x00004fdd

000052d8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    52d8:	b580      	push	{r7, lr}
    52da:	b082      	sub	sp, #8
    52dc:	af00      	add	r7, sp, #0
    52de:	4603      	mov	r3, r0
    52e0:	460a      	mov	r2, r1
    52e2:	71fb      	strb	r3, [r7, #7]
    52e4:	4613      	mov	r3, r2
    52e6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    52e8:	79fb      	ldrb	r3, [r7, #7]
    52ea:	095b      	lsrs	r3, r3, #5
    52ec:	b2d8      	uxtb	r0, r3
    52ee:	79fb      	ldrb	r3, [r7, #7]
    52f0:	f003 031f 	and.w	r3, r3, #31
    52f4:	2201      	movs	r2, #1
    52f6:	fa02 f303 	lsl.w	r3, r2, r3
    52fa:	79ba      	ldrb	r2, [r7, #6]
    52fc:	4619      	mov	r1, r3
    52fe:	4b03      	ldr	r3, [pc, #12]	; (530c <gpio_set_pin_level+0x34>)
    5300:	4798      	blx	r3
}
    5302:	bf00      	nop
    5304:	3708      	adds	r7, #8
    5306:	46bd      	mov	sp, r7
    5308:	bd80      	pop	{r7, pc}
    530a:	bf00      	nop
    530c:	000050c5 	.word	0x000050c5

00005310 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    5310:	b580      	push	{r7, lr}
    5312:	af00      	add	r7, sp, #0
	_init_chip();
    5314:	4b01      	ldr	r3, [pc, #4]	; (531c <init_mcu+0xc>)
    5316:	4798      	blx	r3
}
    5318:	bf00      	nop
    531a:	bd80      	pop	{r7, pc}
    531c:	00008cdd 	.word	0x00008cdd

00005320 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    5320:	b580      	push	{r7, lr}
    5322:	b082      	sub	sp, #8
    5324:	af00      	add	r7, sp, #0
    5326:	6078      	str	r0, [r7, #4]
    5328:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    532a:	687b      	ldr	r3, [r7, #4]
    532c:	2b00      	cmp	r3, #0
    532e:	d004      	beq.n	533a <wdt_init+0x1a>
    5330:	683b      	ldr	r3, [r7, #0]
    5332:	2b00      	cmp	r3, #0
    5334:	d001      	beq.n	533a <wdt_init+0x1a>
    5336:	2301      	movs	r3, #1
    5338:	e000      	b.n	533c <wdt_init+0x1c>
    533a:	2300      	movs	r3, #0
    533c:	f003 0301 	and.w	r3, r3, #1
    5340:	b2db      	uxtb	r3, r3
    5342:	2248      	movs	r2, #72	; 0x48
    5344:	4907      	ldr	r1, [pc, #28]	; (5364 <wdt_init+0x44>)
    5346:	4618      	mov	r0, r3
    5348:	4b07      	ldr	r3, [pc, #28]	; (5368 <wdt_init+0x48>)
    534a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	683a      	ldr	r2, [r7, #0]
    5350:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    5352:	687b      	ldr	r3, [r7, #4]
    5354:	4618      	mov	r0, r3
    5356:	4b05      	ldr	r3, [pc, #20]	; (536c <wdt_init+0x4c>)
    5358:	4798      	blx	r3
    535a:	4603      	mov	r3, r0
}
    535c:	4618      	mov	r0, r3
    535e:	3708      	adds	r7, #8
    5360:	46bd      	mov	sp, r7
    5362:	bd80      	pop	{r7, pc}
    5364:	000209e8 	.word	0x000209e8
    5368:	000080d1 	.word	0x000080d1
    536c:	00010481 	.word	0x00010481

00005370 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    5370:	b580      	push	{r7, lr}
    5372:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    5374:	4804      	ldr	r0, [pc, #16]	; (5388 <CRC_CALC_init+0x18>)
    5376:	4b05      	ldr	r3, [pc, #20]	; (538c <CRC_CALC_init+0x1c>)
    5378:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    537a:	4905      	ldr	r1, [pc, #20]	; (5390 <CRC_CALC_init+0x20>)
    537c:	4805      	ldr	r0, [pc, #20]	; (5394 <CRC_CALC_init+0x24>)
    537e:	4b06      	ldr	r3, [pc, #24]	; (5398 <CRC_CALC_init+0x28>)
    5380:	4798      	blx	r3
}
    5382:	bf00      	nop
    5384:	bd80      	pop	{r7, pc}
    5386:	bf00      	nop
    5388:	40000800 	.word	0x40000800
    538c:	00004bb3 	.word	0x00004bb3
    5390:	41002000 	.word	0x41002000
    5394:	2000a920 	.word	0x2000a920
    5398:	00006645 	.word	0x00006645

0000539c <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    539c:	b580      	push	{r7, lr}
    539e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    53a0:	2244      	movs	r2, #68	; 0x44
    53a2:	2104      	movs	r1, #4
    53a4:	4832      	ldr	r0, [pc, #200]	; (5470 <EXTERNAL_IRQ_0_init+0xd4>)
    53a6:	4b33      	ldr	r3, [pc, #204]	; (5474 <EXTERNAL_IRQ_0_init+0xd8>)
    53a8:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    53aa:	4833      	ldr	r0, [pc, #204]	; (5478 <EXTERNAL_IRQ_0_init+0xdc>)
    53ac:	4b33      	ldr	r3, [pc, #204]	; (547c <EXTERNAL_IRQ_0_init+0xe0>)
    53ae:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    53b0:	2101      	movs	r1, #1
    53b2:	2040      	movs	r0, #64	; 0x40
    53b4:	4b32      	ldr	r3, [pc, #200]	; (5480 <EXTERNAL_IRQ_0_init+0xe4>)
    53b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    53b8:	2100      	movs	r1, #0
    53ba:	2040      	movs	r0, #64	; 0x40
    53bc:	4b31      	ldr	r3, [pc, #196]	; (5484 <EXTERNAL_IRQ_0_init+0xe8>)
    53be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    53c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    53c4:	2040      	movs	r0, #64	; 0x40
    53c6:	4b30      	ldr	r3, [pc, #192]	; (5488 <EXTERNAL_IRQ_0_init+0xec>)
    53c8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    53ca:	2101      	movs	r1, #1
    53cc:	2004      	movs	r0, #4
    53ce:	4b2c      	ldr	r3, [pc, #176]	; (5480 <EXTERNAL_IRQ_0_init+0xe4>)
    53d0:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    53d2:	2102      	movs	r1, #2
    53d4:	2004      	movs	r0, #4
    53d6:	4b2b      	ldr	r3, [pc, #172]	; (5484 <EXTERNAL_IRQ_0_init+0xe8>)
    53d8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    53da:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    53de:	2004      	movs	r0, #4
    53e0:	4b29      	ldr	r3, [pc, #164]	; (5488 <EXTERNAL_IRQ_0_init+0xec>)
    53e2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    53e4:	2101      	movs	r1, #1
    53e6:	2005      	movs	r0, #5
    53e8:	4b25      	ldr	r3, [pc, #148]	; (5480 <EXTERNAL_IRQ_0_init+0xe4>)
    53ea:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    53ec:	2102      	movs	r1, #2
    53ee:	2005      	movs	r0, #5
    53f0:	4b24      	ldr	r3, [pc, #144]	; (5484 <EXTERNAL_IRQ_0_init+0xe8>)
    53f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    53f4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    53f8:	2005      	movs	r0, #5
    53fa:	4b23      	ldr	r3, [pc, #140]	; (5488 <EXTERNAL_IRQ_0_init+0xec>)
    53fc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    53fe:	2101      	movs	r1, #1
    5400:	2056      	movs	r0, #86	; 0x56
    5402:	4b1f      	ldr	r3, [pc, #124]	; (5480 <EXTERNAL_IRQ_0_init+0xe4>)
    5404:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    5406:	2102      	movs	r1, #2
    5408:	2056      	movs	r0, #86	; 0x56
    540a:	4b1e      	ldr	r3, [pc, #120]	; (5484 <EXTERNAL_IRQ_0_init+0xe8>)
    540c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    540e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    5412:	2056      	movs	r0, #86	; 0x56
    5414:	4b1c      	ldr	r3, [pc, #112]	; (5488 <EXTERNAL_IRQ_0_init+0xec>)
    5416:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    5418:	2101      	movs	r1, #1
    541a:	2057      	movs	r0, #87	; 0x57
    541c:	4b18      	ldr	r3, [pc, #96]	; (5480 <EXTERNAL_IRQ_0_init+0xe4>)
    541e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    5420:	2102      	movs	r1, #2
    5422:	2057      	movs	r0, #87	; 0x57
    5424:	4b17      	ldr	r3, [pc, #92]	; (5484 <EXTERNAL_IRQ_0_init+0xe8>)
    5426:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    5428:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    542c:	2057      	movs	r0, #87	; 0x57
    542e:	4b16      	ldr	r3, [pc, #88]	; (5488 <EXTERNAL_IRQ_0_init+0xec>)
    5430:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    5432:	2101      	movs	r1, #1
    5434:	2028      	movs	r0, #40	; 0x28
    5436:	4b12      	ldr	r3, [pc, #72]	; (5480 <EXTERNAL_IRQ_0_init+0xe4>)
    5438:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    543a:	2100      	movs	r1, #0
    543c:	2028      	movs	r0, #40	; 0x28
    543e:	4b11      	ldr	r3, [pc, #68]	; (5484 <EXTERNAL_IRQ_0_init+0xe8>)
    5440:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    5442:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    5446:	2028      	movs	r0, #40	; 0x28
    5448:	4b0f      	ldr	r3, [pc, #60]	; (5488 <EXTERNAL_IRQ_0_init+0xec>)
    544a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    544c:	2101      	movs	r1, #1
    544e:	2029      	movs	r0, #41	; 0x29
    5450:	4b0b      	ldr	r3, [pc, #44]	; (5480 <EXTERNAL_IRQ_0_init+0xe4>)
    5452:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    5454:	2100      	movs	r1, #0
    5456:	2029      	movs	r0, #41	; 0x29
    5458:	4b0a      	ldr	r3, [pc, #40]	; (5484 <EXTERNAL_IRQ_0_init+0xe8>)
    545a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    545c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    5460:	2029      	movs	r0, #41	; 0x29
    5462:	4b09      	ldr	r3, [pc, #36]	; (5488 <EXTERNAL_IRQ_0_init+0xec>)
    5464:	4798      	blx	r3

	ext_irq_init();
    5466:	4b09      	ldr	r3, [pc, #36]	; (548c <EXTERNAL_IRQ_0_init+0xf0>)
    5468:	4798      	blx	r3
}
    546a:	bf00      	nop
    546c:	bd80      	pop	{r7, pc}
    546e:	bf00      	nop
    5470:	40001c00 	.word	0x40001c00
    5474:	00004a2d 	.word	0x00004a2d
    5478:	40000800 	.word	0x40000800
    547c:	00004b13 	.word	0x00004b13
    5480:	000052a1 	.word	0x000052a1
    5484:	0000524d 	.word	0x0000524d
    5488:	00005281 	.word	0x00005281
    548c:	000067a9 	.word	0x000067a9

00005490 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    5490:	b580      	push	{r7, lr}
    5492:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5494:	2244      	movs	r2, #68	; 0x44
    5496:	210b      	movs	r1, #11
    5498:	4807      	ldr	r0, [pc, #28]	; (54b8 <EVENT_SYSTEM_0_init+0x28>)
    549a:	4b08      	ldr	r3, [pc, #32]	; (54bc <EVENT_SYSTEM_0_init+0x2c>)
    549c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    549e:	2244      	movs	r2, #68	; 0x44
    54a0:	210c      	movs	r1, #12
    54a2:	4805      	ldr	r0, [pc, #20]	; (54b8 <EVENT_SYSTEM_0_init+0x28>)
    54a4:	4b05      	ldr	r3, [pc, #20]	; (54bc <EVENT_SYSTEM_0_init+0x2c>)
    54a6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    54a8:	4805      	ldr	r0, [pc, #20]	; (54c0 <EVENT_SYSTEM_0_init+0x30>)
    54aa:	4b06      	ldr	r3, [pc, #24]	; (54c4 <EVENT_SYSTEM_0_init+0x34>)
    54ac:	4798      	blx	r3

	event_system_init();
    54ae:	4b06      	ldr	r3, [pc, #24]	; (54c8 <EVENT_SYSTEM_0_init+0x38>)
    54b0:	4798      	blx	r3
}
    54b2:	bf00      	nop
    54b4:	bd80      	pop	{r7, pc}
    54b6:	bf00      	nop
    54b8:	40001c00 	.word	0x40001c00
    54bc:	00004a2d 	.word	0x00004a2d
    54c0:	40000800 	.word	0x40000800
    54c4:	00004bd3 	.word	0x00004bd3
    54c8:	00006795 	.word	0x00006795

000054cc <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    54cc:	b580      	push	{r7, lr}
    54ce:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    54d0:	2101      	movs	r1, #1
    54d2:	202b      	movs	r0, #43	; 0x2b
    54d4:	4b2b      	ldr	r3, [pc, #172]	; (5584 <QSPI_N25Q256_PORT_init+0xb8>)
    54d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    54d8:	2100      	movs	r1, #0
    54da:	202b      	movs	r0, #43	; 0x2b
    54dc:	4b2a      	ldr	r3, [pc, #168]	; (5588 <QSPI_N25Q256_PORT_init+0xbc>)
    54de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    54e0:	492a      	ldr	r1, [pc, #168]	; (558c <QSPI_N25Q256_PORT_init+0xc0>)
    54e2:	202b      	movs	r0, #43	; 0x2b
    54e4:	4b2a      	ldr	r3, [pc, #168]	; (5590 <QSPI_N25Q256_PORT_init+0xc4>)
    54e6:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    54e8:	2102      	movs	r1, #2
    54ea:	2008      	movs	r0, #8
    54ec:	4b25      	ldr	r3, [pc, #148]	; (5584 <QSPI_N25Q256_PORT_init+0xb8>)
    54ee:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    54f0:	2100      	movs	r1, #0
    54f2:	2008      	movs	r0, #8
    54f4:	4b27      	ldr	r3, [pc, #156]	; (5594 <QSPI_N25Q256_PORT_init+0xc8>)
    54f6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    54f8:	2100      	movs	r1, #0
    54fa:	2008      	movs	r0, #8
    54fc:	4b22      	ldr	r3, [pc, #136]	; (5588 <QSPI_N25Q256_PORT_init+0xbc>)
    54fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    5500:	4925      	ldr	r1, [pc, #148]	; (5598 <QSPI_N25Q256_PORT_init+0xcc>)
    5502:	2008      	movs	r0, #8
    5504:	4b22      	ldr	r3, [pc, #136]	; (5590 <QSPI_N25Q256_PORT_init+0xc4>)
    5506:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    5508:	2102      	movs	r1, #2
    550a:	2009      	movs	r0, #9
    550c:	4b1d      	ldr	r3, [pc, #116]	; (5584 <QSPI_N25Q256_PORT_init+0xb8>)
    550e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    5510:	2100      	movs	r1, #0
    5512:	2009      	movs	r0, #9
    5514:	4b1f      	ldr	r3, [pc, #124]	; (5594 <QSPI_N25Q256_PORT_init+0xc8>)
    5516:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    5518:	2100      	movs	r1, #0
    551a:	2009      	movs	r0, #9
    551c:	4b1a      	ldr	r3, [pc, #104]	; (5588 <QSPI_N25Q256_PORT_init+0xbc>)
    551e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    5520:	491e      	ldr	r1, [pc, #120]	; (559c <QSPI_N25Q256_PORT_init+0xd0>)
    5522:	2009      	movs	r0, #9
    5524:	4b1a      	ldr	r3, [pc, #104]	; (5590 <QSPI_N25Q256_PORT_init+0xc4>)
    5526:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    5528:	2102      	movs	r1, #2
    552a:	200a      	movs	r0, #10
    552c:	4b15      	ldr	r3, [pc, #84]	; (5584 <QSPI_N25Q256_PORT_init+0xb8>)
    552e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    5530:	2100      	movs	r1, #0
    5532:	200a      	movs	r0, #10
    5534:	4b17      	ldr	r3, [pc, #92]	; (5594 <QSPI_N25Q256_PORT_init+0xc8>)
    5536:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    5538:	2100      	movs	r1, #0
    553a:	200a      	movs	r0, #10
    553c:	4b12      	ldr	r3, [pc, #72]	; (5588 <QSPI_N25Q256_PORT_init+0xbc>)
    553e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    5540:	4917      	ldr	r1, [pc, #92]	; (55a0 <QSPI_N25Q256_PORT_init+0xd4>)
    5542:	200a      	movs	r0, #10
    5544:	4b12      	ldr	r3, [pc, #72]	; (5590 <QSPI_N25Q256_PORT_init+0xc4>)
    5546:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    5548:	2102      	movs	r1, #2
    554a:	200b      	movs	r0, #11
    554c:	4b0d      	ldr	r3, [pc, #52]	; (5584 <QSPI_N25Q256_PORT_init+0xb8>)
    554e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    5550:	2100      	movs	r1, #0
    5552:	200b      	movs	r0, #11
    5554:	4b0f      	ldr	r3, [pc, #60]	; (5594 <QSPI_N25Q256_PORT_init+0xc8>)
    5556:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    5558:	2100      	movs	r1, #0
    555a:	200b      	movs	r0, #11
    555c:	4b0a      	ldr	r3, [pc, #40]	; (5588 <QSPI_N25Q256_PORT_init+0xbc>)
    555e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    5560:	4910      	ldr	r1, [pc, #64]	; (55a4 <QSPI_N25Q256_PORT_init+0xd8>)
    5562:	200b      	movs	r0, #11
    5564:	4b0a      	ldr	r3, [pc, #40]	; (5590 <QSPI_N25Q256_PORT_init+0xc4>)
    5566:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    5568:	2101      	movs	r1, #1
    556a:	202a      	movs	r0, #42	; 0x2a
    556c:	4b05      	ldr	r3, [pc, #20]	; (5584 <QSPI_N25Q256_PORT_init+0xb8>)
    556e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    5570:	2100      	movs	r1, #0
    5572:	202a      	movs	r0, #42	; 0x2a
    5574:	4b04      	ldr	r3, [pc, #16]	; (5588 <QSPI_N25Q256_PORT_init+0xbc>)
    5576:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    5578:	490b      	ldr	r1, [pc, #44]	; (55a8 <QSPI_N25Q256_PORT_init+0xdc>)
    557a:	202a      	movs	r0, #42	; 0x2a
    557c:	4b04      	ldr	r3, [pc, #16]	; (5590 <QSPI_N25Q256_PORT_init+0xc4>)
    557e:	4798      	blx	r3
}
    5580:	bf00      	nop
    5582:	bd80      	pop	{r7, pc}
    5584:	000052a1 	.word	0x000052a1
    5588:	0000524d 	.word	0x0000524d
    558c:	002b0007 	.word	0x002b0007
    5590:	00005281 	.word	0x00005281
    5594:	000052d9 	.word	0x000052d9
    5598:	00080007 	.word	0x00080007
    559c:	00090007 	.word	0x00090007
    55a0:	000a0007 	.word	0x000a0007
    55a4:	000b0007 	.word	0x000b0007
    55a8:	002a0007 	.word	0x002a0007

000055ac <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    55ac:	b580      	push	{r7, lr}
    55ae:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    55b0:	4805      	ldr	r0, [pc, #20]	; (55c8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    55b2:	4b06      	ldr	r3, [pc, #24]	; (55cc <QSPI_N25Q256_CLOCK_init+0x20>)
    55b4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    55b6:	4804      	ldr	r0, [pc, #16]	; (55c8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    55b8:	4b05      	ldr	r3, [pc, #20]	; (55d0 <QSPI_N25Q256_CLOCK_init+0x24>)
    55ba:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    55bc:	4802      	ldr	r0, [pc, #8]	; (55c8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    55be:	4b05      	ldr	r3, [pc, #20]	; (55d4 <QSPI_N25Q256_CLOCK_init+0x28>)
    55c0:	4798      	blx	r3
}
    55c2:	bf00      	nop
    55c4:	bd80      	pop	{r7, pc}
    55c6:	bf00      	nop
    55c8:	40000800 	.word	0x40000800
    55cc:	00004a73 	.word	0x00004a73
    55d0:	00004ab3 	.word	0x00004ab3
    55d4:	00004cb3 	.word	0x00004cb3

000055d8 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    55d8:	b580      	push	{r7, lr}
    55da:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    55dc:	4b04      	ldr	r3, [pc, #16]	; (55f0 <QSPI_N25Q256_init+0x18>)
    55de:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    55e0:	4904      	ldr	r1, [pc, #16]	; (55f4 <QSPI_N25Q256_init+0x1c>)
    55e2:	4805      	ldr	r0, [pc, #20]	; (55f8 <QSPI_N25Q256_init+0x20>)
    55e4:	4b05      	ldr	r3, [pc, #20]	; (55fc <QSPI_N25Q256_init+0x24>)
    55e6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    55e8:	4b05      	ldr	r3, [pc, #20]	; (5600 <QSPI_N25Q256_init+0x28>)
    55ea:	4798      	blx	r3
}
    55ec:	bf00      	nop
    55ee:	bd80      	pop	{r7, pc}
    55f0:	000055ad 	.word	0x000055ad
    55f4:	42003400 	.word	0x42003400
    55f8:	2000a794 	.word	0x2000a794
    55fc:	00006f2d 	.word	0x00006f2d
    5600:	000054cd 	.word	0x000054cd

00005604 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    5604:	b580      	push	{r7, lr}
    5606:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    5608:	4802      	ldr	r0, [pc, #8]	; (5614 <DATETIME_CLOCK_CLOCK_init+0x10>)
    560a:	4b03      	ldr	r3, [pc, #12]	; (5618 <DATETIME_CLOCK_CLOCK_init+0x14>)
    560c:	4798      	blx	r3
}
    560e:	bf00      	nop
    5610:	bd80      	pop	{r7, pc}
    5612:	bf00      	nop
    5614:	40000800 	.word	0x40000800
    5618:	00004af3 	.word	0x00004af3

0000561c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    561c:	b580      	push	{r7, lr}
    561e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    5620:	4b03      	ldr	r3, [pc, #12]	; (5630 <DATETIME_CLOCK_init+0x14>)
    5622:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    5624:	4903      	ldr	r1, [pc, #12]	; (5634 <DATETIME_CLOCK_init+0x18>)
    5626:	4804      	ldr	r0, [pc, #16]	; (5638 <DATETIME_CLOCK_init+0x1c>)
    5628:	4b04      	ldr	r3, [pc, #16]	; (563c <DATETIME_CLOCK_init+0x20>)
    562a:	4798      	blx	r3
}
    562c:	bf00      	nop
    562e:	bd80      	pop	{r7, pc}
    5630:	00005605 	.word	0x00005605
    5634:	40002400 	.word	0x40002400
    5638:	2000a8fc 	.word	0x2000a8fc
    563c:	00006349 	.word	0x00006349

00005640 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    5640:	b580      	push	{r7, lr}
    5642:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    5644:	2100      	movs	r1, #0
    5646:	2010      	movs	r0, #16
    5648:	4b11      	ldr	r3, [pc, #68]	; (5690 <SPI_MEMORIES_PORT_init+0x50>)
    564a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    564c:	2102      	movs	r1, #2
    564e:	2010      	movs	r0, #16
    5650:	4b10      	ldr	r3, [pc, #64]	; (5694 <SPI_MEMORIES_PORT_init+0x54>)
    5652:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    5654:	4910      	ldr	r1, [pc, #64]	; (5698 <SPI_MEMORIES_PORT_init+0x58>)
    5656:	2010      	movs	r0, #16
    5658:	4b10      	ldr	r3, [pc, #64]	; (569c <SPI_MEMORIES_PORT_init+0x5c>)
    565a:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    565c:	2100      	movs	r1, #0
    565e:	2011      	movs	r0, #17
    5660:	4b0b      	ldr	r3, [pc, #44]	; (5690 <SPI_MEMORIES_PORT_init+0x50>)
    5662:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    5664:	2102      	movs	r1, #2
    5666:	2011      	movs	r0, #17
    5668:	4b0a      	ldr	r3, [pc, #40]	; (5694 <SPI_MEMORIES_PORT_init+0x54>)
    566a:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    566c:	490c      	ldr	r1, [pc, #48]	; (56a0 <SPI_MEMORIES_PORT_init+0x60>)
    566e:	2011      	movs	r0, #17
    5670:	4b0a      	ldr	r3, [pc, #40]	; (569c <SPI_MEMORIES_PORT_init+0x5c>)
    5672:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    5674:	2101      	movs	r1, #1
    5676:	2012      	movs	r0, #18
    5678:	4b06      	ldr	r3, [pc, #24]	; (5694 <SPI_MEMORIES_PORT_init+0x54>)
    567a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    567c:	2100      	movs	r1, #0
    567e:	2012      	movs	r0, #18
    5680:	4b08      	ldr	r3, [pc, #32]	; (56a4 <SPI_MEMORIES_PORT_init+0x64>)
    5682:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    5684:	4908      	ldr	r1, [pc, #32]	; (56a8 <SPI_MEMORIES_PORT_init+0x68>)
    5686:	2012      	movs	r0, #18
    5688:	4b04      	ldr	r3, [pc, #16]	; (569c <SPI_MEMORIES_PORT_init+0x5c>)
    568a:	4798      	blx	r3
}
    568c:	bf00      	nop
    568e:	bd80      	pop	{r7, pc}
    5690:	000052d9 	.word	0x000052d9
    5694:	000052a1 	.word	0x000052a1
    5698:	00100002 	.word	0x00100002
    569c:	00005281 	.word	0x00005281
    56a0:	00110002 	.word	0x00110002
    56a4:	0000524d 	.word	0x0000524d
    56a8:	00120002 	.word	0x00120002

000056ac <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    56ac:	b580      	push	{r7, lr}
    56ae:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    56b0:	2245      	movs	r2, #69	; 0x45
    56b2:	2108      	movs	r1, #8
    56b4:	4806      	ldr	r0, [pc, #24]	; (56d0 <SPI_MEMORIES_CLOCK_init+0x24>)
    56b6:	4b07      	ldr	r3, [pc, #28]	; (56d4 <SPI_MEMORIES_CLOCK_init+0x28>)
    56b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    56ba:	224a      	movs	r2, #74	; 0x4a
    56bc:	2103      	movs	r1, #3
    56be:	4804      	ldr	r0, [pc, #16]	; (56d0 <SPI_MEMORIES_CLOCK_init+0x24>)
    56c0:	4b04      	ldr	r3, [pc, #16]	; (56d4 <SPI_MEMORIES_CLOCK_init+0x28>)
    56c2:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    56c4:	4804      	ldr	r0, [pc, #16]	; (56d8 <SPI_MEMORIES_CLOCK_init+0x2c>)
    56c6:	4b05      	ldr	r3, [pc, #20]	; (56dc <SPI_MEMORIES_CLOCK_init+0x30>)
    56c8:	4798      	blx	r3
}
    56ca:	bf00      	nop
    56cc:	bd80      	pop	{r7, pc}
    56ce:	bf00      	nop
    56d0:	40001c00 	.word	0x40001c00
    56d4:	00004a2d 	.word	0x00004a2d
    56d8:	40000800 	.word	0x40000800
    56dc:	00004b33 	.word	0x00004b33

000056e0 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    56e0:	b580      	push	{r7, lr}
    56e2:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    56e4:	4b04      	ldr	r3, [pc, #16]	; (56f8 <SPI_MEMORIES_init+0x18>)
    56e6:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    56e8:	4904      	ldr	r1, [pc, #16]	; (56fc <SPI_MEMORIES_init+0x1c>)
    56ea:	4805      	ldr	r0, [pc, #20]	; (5700 <SPI_MEMORIES_init+0x20>)
    56ec:	4b05      	ldr	r3, [pc, #20]	; (5704 <SPI_MEMORIES_init+0x24>)
    56ee:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    56f0:	4b05      	ldr	r3, [pc, #20]	; (5708 <SPI_MEMORIES_init+0x28>)
    56f2:	4798      	blx	r3
}
    56f4:	bf00      	nop
    56f6:	bd80      	pop	{r7, pc}
    56f8:	000056ad 	.word	0x000056ad
    56fc:	40003400 	.word	0x40003400
    5700:	2000a72c 	.word	0x2000a72c
    5704:	0000703d 	.word	0x0000703d
    5708:	00005641 	.word	0x00005641

0000570c <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    570c:	b580      	push	{r7, lr}
    570e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA12,
    5710:	2100      	movs	r1, #0
    5712:	200c      	movs	r0, #12
    5714:	4b07      	ldr	r3, [pc, #28]	; (5734 <I2C_SHARED_PORT_init+0x28>)
    5716:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
    5718:	4907      	ldr	r1, [pc, #28]	; (5738 <I2C_SHARED_PORT_init+0x2c>)
    571a:	200c      	movs	r0, #12
    571c:	4b07      	ldr	r3, [pc, #28]	; (573c <I2C_SHARED_PORT_init+0x30>)
    571e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA13,
    5720:	2100      	movs	r1, #0
    5722:	200d      	movs	r0, #13
    5724:	4b03      	ldr	r3, [pc, #12]	; (5734 <I2C_SHARED_PORT_init+0x28>)
    5726:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
    5728:	4905      	ldr	r1, [pc, #20]	; (5740 <I2C_SHARED_PORT_init+0x34>)
    572a:	200d      	movs	r0, #13
    572c:	4b03      	ldr	r3, [pc, #12]	; (573c <I2C_SHARED_PORT_init+0x30>)
    572e:	4798      	blx	r3
}
    5730:	bf00      	nop
    5732:	bd80      	pop	{r7, pc}
    5734:	0000524d 	.word	0x0000524d
    5738:	000c0002 	.word	0x000c0002
    573c:	00005281 	.word	0x00005281
    5740:	000d0002 	.word	0x000d0002

00005744 <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    5744:	b580      	push	{r7, lr}
    5746:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5748:	2242      	movs	r2, #66	; 0x42
    574a:	2117      	movs	r1, #23
    574c:	4806      	ldr	r0, [pc, #24]	; (5768 <I2C_SHARED_CLOCK_init+0x24>)
    574e:	4b07      	ldr	r3, [pc, #28]	; (576c <I2C_SHARED_CLOCK_init+0x28>)
    5750:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5752:	224a      	movs	r2, #74	; 0x4a
    5754:	2103      	movs	r1, #3
    5756:	4804      	ldr	r0, [pc, #16]	; (5768 <I2C_SHARED_CLOCK_init+0x24>)
    5758:	4b04      	ldr	r3, [pc, #16]	; (576c <I2C_SHARED_CLOCK_init+0x28>)
    575a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
    575c:	4804      	ldr	r0, [pc, #16]	; (5770 <I2C_SHARED_CLOCK_init+0x2c>)
    575e:	4b05      	ldr	r3, [pc, #20]	; (5774 <I2C_SHARED_CLOCK_init+0x30>)
    5760:	4798      	blx	r3
}
    5762:	bf00      	nop
    5764:	bd80      	pop	{r7, pc}
    5766:	bf00      	nop
    5768:	40001c00 	.word	0x40001c00
    576c:	00004a2d 	.word	0x00004a2d
    5770:	40000800 	.word	0x40000800
    5774:	00004bf3 	.word	0x00004bf3

00005778 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    5778:	b580      	push	{r7, lr}
    577a:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    577c:	4b04      	ldr	r3, [pc, #16]	; (5790 <I2C_SHARED_init+0x18>)
    577e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM2);
    5780:	4904      	ldr	r1, [pc, #16]	; (5794 <I2C_SHARED_init+0x1c>)
    5782:	4805      	ldr	r0, [pc, #20]	; (5798 <I2C_SHARED_init+0x20>)
    5784:	4b05      	ldr	r3, [pc, #20]	; (579c <I2C_SHARED_init+0x24>)
    5786:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    5788:	4b05      	ldr	r3, [pc, #20]	; (57a0 <I2C_SHARED_init+0x28>)
    578a:	4798      	blx	r3
}
    578c:	bf00      	nop
    578e:	bd80      	pop	{r7, pc}
    5790:	00005745 	.word	0x00005745
    5794:	41012000 	.word	0x41012000
    5798:	2000a87c 	.word	0x2000a87c
    579c:	00006d51 	.word	0x00006d51
    57a0:	0000570d 	.word	0x0000570d

000057a4 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    57a4:	b580      	push	{r7, lr}
    57a6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    57a8:	2100      	movs	r1, #0
    57aa:	203b      	movs	r0, #59	; 0x3b
    57ac:	4b11      	ldr	r3, [pc, #68]	; (57f4 <SPI_TEMP_PORT_init+0x50>)
    57ae:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    57b0:	2102      	movs	r1, #2
    57b2:	203b      	movs	r0, #59	; 0x3b
    57b4:	4b10      	ldr	r3, [pc, #64]	; (57f8 <SPI_TEMP_PORT_init+0x54>)
    57b6:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    57b8:	4910      	ldr	r1, [pc, #64]	; (57fc <SPI_TEMP_PORT_init+0x58>)
    57ba:	203b      	movs	r0, #59	; 0x3b
    57bc:	4b10      	ldr	r3, [pc, #64]	; (5800 <SPI_TEMP_PORT_init+0x5c>)
    57be:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    57c0:	2100      	movs	r1, #0
    57c2:	203a      	movs	r0, #58	; 0x3a
    57c4:	4b0b      	ldr	r3, [pc, #44]	; (57f4 <SPI_TEMP_PORT_init+0x50>)
    57c6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    57c8:	2102      	movs	r1, #2
    57ca:	203a      	movs	r0, #58	; 0x3a
    57cc:	4b0a      	ldr	r3, [pc, #40]	; (57f8 <SPI_TEMP_PORT_init+0x54>)
    57ce:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    57d0:	490c      	ldr	r1, [pc, #48]	; (5804 <SPI_TEMP_PORT_init+0x60>)
    57d2:	203a      	movs	r0, #58	; 0x3a
    57d4:	4b0a      	ldr	r3, [pc, #40]	; (5800 <SPI_TEMP_PORT_init+0x5c>)
    57d6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    57d8:	2101      	movs	r1, #1
    57da:	203c      	movs	r0, #60	; 0x3c
    57dc:	4b06      	ldr	r3, [pc, #24]	; (57f8 <SPI_TEMP_PORT_init+0x54>)
    57de:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    57e0:	2100      	movs	r1, #0
    57e2:	203c      	movs	r0, #60	; 0x3c
    57e4:	4b08      	ldr	r3, [pc, #32]	; (5808 <SPI_TEMP_PORT_init+0x64>)
    57e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    57e8:	4908      	ldr	r1, [pc, #32]	; (580c <SPI_TEMP_PORT_init+0x68>)
    57ea:	203c      	movs	r0, #60	; 0x3c
    57ec:	4b04      	ldr	r3, [pc, #16]	; (5800 <SPI_TEMP_PORT_init+0x5c>)
    57ee:	4798      	blx	r3
}
    57f0:	bf00      	nop
    57f2:	bd80      	pop	{r7, pc}
    57f4:	000052d9 	.word	0x000052d9
    57f8:	000052a1 	.word	0x000052a1
    57fc:	003b0003 	.word	0x003b0003
    5800:	00005281 	.word	0x00005281
    5804:	003a0003 	.word	0x003a0003
    5808:	0000524d 	.word	0x0000524d
    580c:	003c0003 	.word	0x003c0003

00005810 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    5810:	b580      	push	{r7, lr}
    5812:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5814:	2245      	movs	r2, #69	; 0x45
    5816:	2122      	movs	r1, #34	; 0x22
    5818:	4806      	ldr	r0, [pc, #24]	; (5834 <SPI_TEMP_CLOCK_init+0x24>)
    581a:	4b07      	ldr	r3, [pc, #28]	; (5838 <SPI_TEMP_CLOCK_init+0x28>)
    581c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    581e:	224a      	movs	r2, #74	; 0x4a
    5820:	2103      	movs	r1, #3
    5822:	4804      	ldr	r0, [pc, #16]	; (5834 <SPI_TEMP_CLOCK_init+0x24>)
    5824:	4b04      	ldr	r3, [pc, #16]	; (5838 <SPI_TEMP_CLOCK_init+0x28>)
    5826:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    5828:	4804      	ldr	r0, [pc, #16]	; (583c <SPI_TEMP_CLOCK_init+0x2c>)
    582a:	4b05      	ldr	r3, [pc, #20]	; (5840 <SPI_TEMP_CLOCK_init+0x30>)
    582c:	4798      	blx	r3
}
    582e:	bf00      	nop
    5830:	bd80      	pop	{r7, pc}
    5832:	bf00      	nop
    5834:	40001c00 	.word	0x40001c00
    5838:	00004a2d 	.word	0x00004a2d
    583c:	40000800 	.word	0x40000800
    5840:	00004cd3 	.word	0x00004cd3

00005844 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    5844:	b580      	push	{r7, lr}
    5846:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    5848:	4b05      	ldr	r3, [pc, #20]	; (5860 <SPI_TEMP_init+0x1c>)
    584a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    584c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    5850:	4804      	ldr	r0, [pc, #16]	; (5864 <SPI_TEMP_init+0x20>)
    5852:	4b05      	ldr	r3, [pc, #20]	; (5868 <SPI_TEMP_init+0x24>)
    5854:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    5856:	4b05      	ldr	r3, [pc, #20]	; (586c <SPI_TEMP_init+0x28>)
    5858:	4798      	blx	r3
}
    585a:	bf00      	nop
    585c:	bd80      	pop	{r7, pc}
    585e:	bf00      	nop
    5860:	00005811 	.word	0x00005811
    5864:	2000a75c 	.word	0x2000a75c
    5868:	0000703d 	.word	0x0000703d
    586c:	000057a5 	.word	0x000057a5

00005870 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    5870:	b580      	push	{r7, lr}
    5872:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    5874:	2100      	movs	r1, #0
    5876:	2017      	movs	r0, #23
    5878:	4b07      	ldr	r3, [pc, #28]	; (5898 <I2C_EXPANDER_PORT_init+0x28>)
    587a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    587c:	4907      	ldr	r1, [pc, #28]	; (589c <I2C_EXPANDER_PORT_init+0x2c>)
    587e:	2017      	movs	r0, #23
    5880:	4b07      	ldr	r3, [pc, #28]	; (58a0 <I2C_EXPANDER_PORT_init+0x30>)
    5882:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    5884:	2100      	movs	r1, #0
    5886:	2016      	movs	r0, #22
    5888:	4b03      	ldr	r3, [pc, #12]	; (5898 <I2C_EXPANDER_PORT_init+0x28>)
    588a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    588c:	4905      	ldr	r1, [pc, #20]	; (58a4 <I2C_EXPANDER_PORT_init+0x34>)
    588e:	2016      	movs	r0, #22
    5890:	4b03      	ldr	r3, [pc, #12]	; (58a0 <I2C_EXPANDER_PORT_init+0x30>)
    5892:	4798      	blx	r3
}
    5894:	bf00      	nop
    5896:	bd80      	pop	{r7, pc}
    5898:	0000524d 	.word	0x0000524d
    589c:	00170003 	.word	0x00170003
    58a0:	00005281 	.word	0x00005281
    58a4:	00160003 	.word	0x00160003

000058a8 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    58a8:	b580      	push	{r7, lr}
    58aa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    58ac:	2248      	movs	r2, #72	; 0x48
    58ae:	2123      	movs	r1, #35	; 0x23
    58b0:	4806      	ldr	r0, [pc, #24]	; (58cc <I2C_EXPANDER_CLOCK_init+0x24>)
    58b2:	4b07      	ldr	r3, [pc, #28]	; (58d0 <I2C_EXPANDER_CLOCK_init+0x28>)
    58b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    58b6:	224a      	movs	r2, #74	; 0x4a
    58b8:	2103      	movs	r1, #3
    58ba:	4804      	ldr	r0, [pc, #16]	; (58cc <I2C_EXPANDER_CLOCK_init+0x24>)
    58bc:	4b04      	ldr	r3, [pc, #16]	; (58d0 <I2C_EXPANDER_CLOCK_init+0x28>)
    58be:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    58c0:	4804      	ldr	r0, [pc, #16]	; (58d4 <I2C_EXPANDER_CLOCK_init+0x2c>)
    58c2:	4b05      	ldr	r3, [pc, #20]	; (58d8 <I2C_EXPANDER_CLOCK_init+0x30>)
    58c4:	4798      	blx	r3
}
    58c6:	bf00      	nop
    58c8:	bd80      	pop	{r7, pc}
    58ca:	bf00      	nop
    58cc:	40001c00 	.word	0x40001c00
    58d0:	00004a2d 	.word	0x00004a2d
    58d4:	40000800 	.word	0x40000800
    58d8:	00004cf3 	.word	0x00004cf3

000058dc <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    58dc:	b580      	push	{r7, lr}
    58de:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    58e0:	4b04      	ldr	r3, [pc, #16]	; (58f4 <I2C_EXPANDER_init+0x18>)
    58e2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    58e4:	4904      	ldr	r1, [pc, #16]	; (58f8 <I2C_EXPANDER_init+0x1c>)
    58e6:	4805      	ldr	r0, [pc, #20]	; (58fc <I2C_EXPANDER_init+0x20>)
    58e8:	4b05      	ldr	r3, [pc, #20]	; (5900 <I2C_EXPANDER_init+0x24>)
    58ea:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    58ec:	4b05      	ldr	r3, [pc, #20]	; (5904 <I2C_EXPANDER_init+0x28>)
    58ee:	4798      	blx	r3
}
    58f0:	bf00      	nop
    58f2:	bd80      	pop	{r7, pc}
    58f4:	000058a9 	.word	0x000058a9
    58f8:	43000400 	.word	0x43000400
    58fc:	2000a85c 	.word	0x2000a85c
    5900:	00006d51 	.word	0x00006d51
    5904:	00005871 	.word	0x00005871

00005908 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    5908:	b580      	push	{r7, lr}
    590a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    590c:	2100      	movs	r1, #0
    590e:	2044      	movs	r0, #68	; 0x44
    5910:	4b11      	ldr	r3, [pc, #68]	; (5958 <SPI_HI3593_PORT_init+0x50>)
    5912:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    5914:	2102      	movs	r1, #2
    5916:	2044      	movs	r0, #68	; 0x44
    5918:	4b10      	ldr	r3, [pc, #64]	; (595c <SPI_HI3593_PORT_init+0x54>)
    591a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    591c:	4910      	ldr	r1, [pc, #64]	; (5960 <SPI_HI3593_PORT_init+0x58>)
    591e:	2044      	movs	r0, #68	; 0x44
    5920:	4b10      	ldr	r3, [pc, #64]	; (5964 <SPI_HI3593_PORT_init+0x5c>)
    5922:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    5924:	2100      	movs	r1, #0
    5926:	2045      	movs	r0, #69	; 0x45
    5928:	4b0b      	ldr	r3, [pc, #44]	; (5958 <SPI_HI3593_PORT_init+0x50>)
    592a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    592c:	2102      	movs	r1, #2
    592e:	2045      	movs	r0, #69	; 0x45
    5930:	4b0a      	ldr	r3, [pc, #40]	; (595c <SPI_HI3593_PORT_init+0x54>)
    5932:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    5934:	490c      	ldr	r1, [pc, #48]	; (5968 <SPI_HI3593_PORT_init+0x60>)
    5936:	2045      	movs	r0, #69	; 0x45
    5938:	4b0a      	ldr	r3, [pc, #40]	; (5964 <SPI_HI3593_PORT_init+0x5c>)
    593a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    593c:	2101      	movs	r1, #1
    593e:	2047      	movs	r0, #71	; 0x47
    5940:	4b06      	ldr	r3, [pc, #24]	; (595c <SPI_HI3593_PORT_init+0x54>)
    5942:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    5944:	2100      	movs	r1, #0
    5946:	2047      	movs	r0, #71	; 0x47
    5948:	4b08      	ldr	r3, [pc, #32]	; (596c <SPI_HI3593_PORT_init+0x64>)
    594a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    594c:	4908      	ldr	r1, [pc, #32]	; (5970 <SPI_HI3593_PORT_init+0x68>)
    594e:	2047      	movs	r0, #71	; 0x47
    5950:	4b04      	ldr	r3, [pc, #16]	; (5964 <SPI_HI3593_PORT_init+0x5c>)
    5952:	4798      	blx	r3
}
    5954:	bf00      	nop
    5956:	bd80      	pop	{r7, pc}
    5958:	000052d9 	.word	0x000052d9
    595c:	000052a1 	.word	0x000052a1
    5960:	00440002 	.word	0x00440002
    5964:	00005281 	.word	0x00005281
    5968:	00450002 	.word	0x00450002
    596c:	0000524d 	.word	0x0000524d
    5970:	00470002 	.word	0x00470002

00005974 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    5974:	b580      	push	{r7, lr}
    5976:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5978:	2242      	movs	r2, #66	; 0x42
    597a:	2124      	movs	r1, #36	; 0x24
    597c:	4806      	ldr	r0, [pc, #24]	; (5998 <SPI_HI3593_CLOCK_init+0x24>)
    597e:	4b07      	ldr	r3, [pc, #28]	; (599c <SPI_HI3593_CLOCK_init+0x28>)
    5980:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5982:	224a      	movs	r2, #74	; 0x4a
    5984:	2103      	movs	r1, #3
    5986:	4804      	ldr	r0, [pc, #16]	; (5998 <SPI_HI3593_CLOCK_init+0x24>)
    5988:	4b04      	ldr	r3, [pc, #16]	; (599c <SPI_HI3593_CLOCK_init+0x28>)
    598a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    598c:	4804      	ldr	r0, [pc, #16]	; (59a0 <SPI_HI3593_CLOCK_init+0x2c>)
    598e:	4b05      	ldr	r3, [pc, #20]	; (59a4 <SPI_HI3593_CLOCK_init+0x30>)
    5990:	4798      	blx	r3
}
    5992:	bf00      	nop
    5994:	bd80      	pop	{r7, pc}
    5996:	bf00      	nop
    5998:	40001c00 	.word	0x40001c00
    599c:	00004a2d 	.word	0x00004a2d
    59a0:	40000800 	.word	0x40000800
    59a4:	00004d13 	.word	0x00004d13

000059a8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    59a8:	b580      	push	{r7, lr}
    59aa:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    59ac:	4b04      	ldr	r3, [pc, #16]	; (59c0 <SPI_HI3593_init+0x18>)
    59ae:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    59b0:	4904      	ldr	r1, [pc, #16]	; (59c4 <SPI_HI3593_init+0x1c>)
    59b2:	4805      	ldr	r0, [pc, #20]	; (59c8 <SPI_HI3593_init+0x20>)
    59b4:	4b05      	ldr	r3, [pc, #20]	; (59cc <SPI_HI3593_init+0x24>)
    59b6:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    59b8:	4b05      	ldr	r3, [pc, #20]	; (59d0 <SPI_HI3593_init+0x28>)
    59ba:	4798      	blx	r3
}
    59bc:	bf00      	nop
    59be:	bd80      	pop	{r7, pc}
    59c0:	00005975 	.word	0x00005975
    59c4:	43000800 	.word	0x43000800
    59c8:	2000a744 	.word	0x2000a744
    59cc:	0000703d 	.word	0x0000703d
    59d0:	00005909 	.word	0x00005909

000059d4 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    59d4:	b580      	push	{r7, lr}
    59d6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    59d8:	2100      	movs	r1, #0
    59da:	2068      	movs	r0, #104	; 0x68
    59dc:	4b07      	ldr	r3, [pc, #28]	; (59fc <I2C_EEPROM_PORT_init+0x28>)
    59de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    59e0:	4907      	ldr	r1, [pc, #28]	; (5a00 <I2C_EEPROM_PORT_init+0x2c>)
    59e2:	2068      	movs	r0, #104	; 0x68
    59e4:	4b07      	ldr	r3, [pc, #28]	; (5a04 <I2C_EEPROM_PORT_init+0x30>)
    59e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    59e8:	2100      	movs	r1, #0
    59ea:	2069      	movs	r0, #105	; 0x69
    59ec:	4b03      	ldr	r3, [pc, #12]	; (59fc <I2C_EEPROM_PORT_init+0x28>)
    59ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    59f0:	4905      	ldr	r1, [pc, #20]	; (5a08 <I2C_EEPROM_PORT_init+0x34>)
    59f2:	2069      	movs	r0, #105	; 0x69
    59f4:	4b03      	ldr	r3, [pc, #12]	; (5a04 <I2C_EEPROM_PORT_init+0x30>)
    59f6:	4798      	blx	r3
}
    59f8:	bf00      	nop
    59fa:	bd80      	pop	{r7, pc}
    59fc:	0000524d 	.word	0x0000524d
    5a00:	00680002 	.word	0x00680002
    5a04:	00005281 	.word	0x00005281
    5a08:	00690002 	.word	0x00690002

00005a0c <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    5a0c:	b580      	push	{r7, lr}
    5a0e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5a10:	2248      	movs	r2, #72	; 0x48
    5a12:	2125      	movs	r1, #37	; 0x25
    5a14:	4806      	ldr	r0, [pc, #24]	; (5a30 <I2C_EEPROM_CLOCK_init+0x24>)
    5a16:	4b07      	ldr	r3, [pc, #28]	; (5a34 <I2C_EEPROM_CLOCK_init+0x28>)
    5a18:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5a1a:	224a      	movs	r2, #74	; 0x4a
    5a1c:	2103      	movs	r1, #3
    5a1e:	4804      	ldr	r0, [pc, #16]	; (5a30 <I2C_EEPROM_CLOCK_init+0x24>)
    5a20:	4b04      	ldr	r3, [pc, #16]	; (5a34 <I2C_EEPROM_CLOCK_init+0x28>)
    5a22:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    5a24:	4804      	ldr	r0, [pc, #16]	; (5a38 <I2C_EEPROM_CLOCK_init+0x2c>)
    5a26:	4b05      	ldr	r3, [pc, #20]	; (5a3c <I2C_EEPROM_CLOCK_init+0x30>)
    5a28:	4798      	blx	r3
}
    5a2a:	bf00      	nop
    5a2c:	bd80      	pop	{r7, pc}
    5a2e:	bf00      	nop
    5a30:	40001c00 	.word	0x40001c00
    5a34:	00004a2d 	.word	0x00004a2d
    5a38:	40000800 	.word	0x40000800
    5a3c:	00004d33 	.word	0x00004d33

00005a40 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    5a40:	b580      	push	{r7, lr}
    5a42:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    5a44:	4b04      	ldr	r3, [pc, #16]	; (5a58 <I2C_EEPROM_init+0x18>)
    5a46:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    5a48:	4904      	ldr	r1, [pc, #16]	; (5a5c <I2C_EEPROM_init+0x1c>)
    5a4a:	4805      	ldr	r0, [pc, #20]	; (5a60 <I2C_EEPROM_init+0x20>)
    5a4c:	4b05      	ldr	r3, [pc, #20]	; (5a64 <I2C_EEPROM_init+0x24>)
    5a4e:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    5a50:	4b05      	ldr	r3, [pc, #20]	; (5a68 <I2C_EEPROM_init+0x28>)
    5a52:	4798      	blx	r3
}
    5a54:	bf00      	nop
    5a56:	bd80      	pop	{r7, pc}
    5a58:	00005a0d 	.word	0x00005a0d
    5a5c:	43000c00 	.word	0x43000c00
    5a60:	2000a8bc 	.word	0x2000a8bc
    5a64:	00006b0d 	.word	0x00006b0d
    5a68:	000059d5 	.word	0x000059d5

00005a6c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    5a6c:	b580      	push	{r7, lr}
    5a6e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    5a70:	4808      	ldr	r0, [pc, #32]	; (5a94 <TIMER_USB_init+0x28>)
    5a72:	4b09      	ldr	r3, [pc, #36]	; (5a98 <TIMER_USB_init+0x2c>)
    5a74:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5a76:	2243      	movs	r2, #67	; 0x43
    5a78:	2109      	movs	r1, #9
    5a7a:	4808      	ldr	r0, [pc, #32]	; (5a9c <TIMER_USB_init+0x30>)
    5a7c:	4b08      	ldr	r3, [pc, #32]	; (5aa0 <TIMER_USB_init+0x34>)
    5a7e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    5a80:	4b08      	ldr	r3, [pc, #32]	; (5aa4 <TIMER_USB_init+0x38>)
    5a82:	4798      	blx	r3
    5a84:	4603      	mov	r3, r0
    5a86:	461a      	mov	r2, r3
    5a88:	4907      	ldr	r1, [pc, #28]	; (5aa8 <TIMER_USB_init+0x3c>)
    5a8a:	4808      	ldr	r0, [pc, #32]	; (5aac <TIMER_USB_init+0x40>)
    5a8c:	4b08      	ldr	r3, [pc, #32]	; (5ab0 <TIMER_USB_init+0x44>)
    5a8e:	4798      	blx	r3
}
    5a90:	bf00      	nop
    5a92:	bd80      	pop	{r7, pc}
    5a94:	40000800 	.word	0x40000800
    5a98:	00004b53 	.word	0x00004b53
    5a9c:	40001c00 	.word	0x40001c00
    5aa0:	00004a2d 	.word	0x00004a2d
    5aa4:	0000d8c5 	.word	0x0000d8c5
    5aa8:	40003800 	.word	0x40003800
    5aac:	2000a83c 	.word	0x2000a83c
    5ab0:	000072cd 	.word	0x000072cd

00005ab4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    5ab4:	b480      	push	{r7}
    5ab6:	af00      	add	r7, sp, #0
}
    5ab8:	bf00      	nop
    5aba:	46bd      	mov	sp, r7
    5abc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ac0:	4770      	bx	lr
	...

00005ac4 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    5ac4:	b580      	push	{r7, lr}
    5ac6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    5ac8:	4804      	ldr	r0, [pc, #16]	; (5adc <LIVE_PULSE_CLOCK_init+0x18>)
    5aca:	4b05      	ldr	r3, [pc, #20]	; (5ae0 <LIVE_PULSE_CLOCK_init+0x1c>)
    5acc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5ace:	2244      	movs	r2, #68	; 0x44
    5ad0:	2109      	movs	r1, #9
    5ad2:	4804      	ldr	r0, [pc, #16]	; (5ae4 <LIVE_PULSE_CLOCK_init+0x20>)
    5ad4:	4b04      	ldr	r3, [pc, #16]	; (5ae8 <LIVE_PULSE_CLOCK_init+0x24>)
    5ad6:	4798      	blx	r3
}
    5ad8:	bf00      	nop
    5ada:	bd80      	pop	{r7, pc}
    5adc:	40000800 	.word	0x40000800
    5ae0:	00004b73 	.word	0x00004b73
    5ae4:	40001c00 	.word	0x40001c00
    5ae8:	00004a2d 	.word	0x00004a2d

00005aec <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    5aec:	b580      	push	{r7, lr}
    5aee:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    5af0:	4b06      	ldr	r3, [pc, #24]	; (5b0c <LIVE_PULSE_init+0x20>)
    5af2:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    5af4:	4b06      	ldr	r3, [pc, #24]	; (5b10 <LIVE_PULSE_init+0x24>)
    5af6:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC1, _tc_get_pwm());
    5af8:	4b06      	ldr	r3, [pc, #24]	; (5b14 <LIVE_PULSE_init+0x28>)
    5afa:	4798      	blx	r3
    5afc:	4603      	mov	r3, r0
    5afe:	461a      	mov	r2, r3
    5b00:	4905      	ldr	r1, [pc, #20]	; (5b18 <LIVE_PULSE_init+0x2c>)
    5b02:	4806      	ldr	r0, [pc, #24]	; (5b1c <LIVE_PULSE_init+0x30>)
    5b04:	4b06      	ldr	r3, [pc, #24]	; (5b20 <LIVE_PULSE_init+0x34>)
    5b06:	4798      	blx	r3
}
    5b08:	bf00      	nop
    5b0a:	bd80      	pop	{r7, pc}
    5b0c:	00005ac5 	.word	0x00005ac5
    5b10:	00005ab5 	.word	0x00005ab5
    5b14:	0000d8d9 	.word	0x0000d8d9
    5b18:	40003c00 	.word	0x40003c00
    5b1c:	2000a7d8 	.word	0x2000a7d8
    5b20:	00006e2d 	.word	0x00006e2d

00005b24 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    5b24:	b580      	push	{r7, lr}
    5b26:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    5b28:	4808      	ldr	r0, [pc, #32]	; (5b4c <TIMER_ARINC_init+0x28>)
    5b2a:	4b09      	ldr	r3, [pc, #36]	; (5b50 <TIMER_ARINC_init+0x2c>)
    5b2c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5b2e:	2244      	movs	r2, #68	; 0x44
    5b30:	211a      	movs	r1, #26
    5b32:	4808      	ldr	r0, [pc, #32]	; (5b54 <TIMER_ARINC_init+0x30>)
    5b34:	4b08      	ldr	r3, [pc, #32]	; (5b58 <TIMER_ARINC_init+0x34>)
    5b36:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    5b38:	4b08      	ldr	r3, [pc, #32]	; (5b5c <TIMER_ARINC_init+0x38>)
    5b3a:	4798      	blx	r3
    5b3c:	4603      	mov	r3, r0
    5b3e:	461a      	mov	r2, r3
    5b40:	4907      	ldr	r1, [pc, #28]	; (5b60 <TIMER_ARINC_init+0x3c>)
    5b42:	4808      	ldr	r0, [pc, #32]	; (5b64 <TIMER_ARINC_init+0x40>)
    5b44:	4b08      	ldr	r3, [pc, #32]	; (5b68 <TIMER_ARINC_init+0x44>)
    5b46:	4798      	blx	r3
}
    5b48:	bf00      	nop
    5b4a:	bd80      	pop	{r7, pc}
    5b4c:	40000800 	.word	0x40000800
    5b50:	00004c53 	.word	0x00004c53
    5b54:	40001c00 	.word	0x40001c00
    5b58:	00004a2d 	.word	0x00004a2d
    5b5c:	0000d8c5 	.word	0x0000d8c5
    5b60:	4101a000 	.word	0x4101a000
    5b64:	2000a81c 	.word	0x2000a81c
    5b68:	000072cd 	.word	0x000072cd

00005b6c <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    5b6c:	b580      	push	{r7, lr}
    5b6e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    5b70:	4808      	ldr	r0, [pc, #32]	; (5b94 <TIMER_MAINTENANCE_init+0x28>)
    5b72:	4b09      	ldr	r3, [pc, #36]	; (5b98 <TIMER_MAINTENANCE_init+0x2c>)
    5b74:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5b76:	2246      	movs	r2, #70	; 0x46
    5b78:	211e      	movs	r1, #30
    5b7a:	4808      	ldr	r0, [pc, #32]	; (5b9c <TIMER_MAINTENANCE_init+0x30>)
    5b7c:	4b08      	ldr	r3, [pc, #32]	; (5ba0 <TIMER_MAINTENANCE_init+0x34>)
    5b7e:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    5b80:	4b08      	ldr	r3, [pc, #32]	; (5ba4 <TIMER_MAINTENANCE_init+0x38>)
    5b82:	4798      	blx	r3
    5b84:	4603      	mov	r3, r0
    5b86:	461a      	mov	r2, r3
    5b88:	4907      	ldr	r1, [pc, #28]	; (5ba8 <TIMER_MAINTENANCE_init+0x3c>)
    5b8a:	4808      	ldr	r0, [pc, #32]	; (5bac <TIMER_MAINTENANCE_init+0x40>)
    5b8c:	4b08      	ldr	r3, [pc, #32]	; (5bb0 <TIMER_MAINTENANCE_init+0x44>)
    5b8e:	4798      	blx	r3
}
    5b90:	bf00      	nop
    5b92:	bd80      	pop	{r7, pc}
    5b94:	40000800 	.word	0x40000800
    5b98:	00004c73 	.word	0x00004c73
    5b9c:	40001c00 	.word	0x40001c00
    5ba0:	00004a2d 	.word	0x00004a2d
    5ba4:	0000d8c5 	.word	0x0000d8c5
    5ba8:	42001400 	.word	0x42001400
    5bac:	2000a774 	.word	0x2000a774
    5bb0:	000072cd 	.word	0x000072cd

00005bb4 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    5bb4:	b580      	push	{r7, lr}
    5bb6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    5bb8:	4808      	ldr	r0, [pc, #32]	; (5bdc <TIMER_INTERFACE_init+0x28>)
    5bba:	4b09      	ldr	r3, [pc, #36]	; (5be0 <TIMER_INTERFACE_init+0x2c>)
    5bbc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5bbe:	2246      	movs	r2, #70	; 0x46
    5bc0:	211e      	movs	r1, #30
    5bc2:	4808      	ldr	r0, [pc, #32]	; (5be4 <TIMER_INTERFACE_init+0x30>)
    5bc4:	4b08      	ldr	r3, [pc, #32]	; (5be8 <TIMER_INTERFACE_init+0x34>)
    5bc6:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    5bc8:	4b08      	ldr	r3, [pc, #32]	; (5bec <TIMER_INTERFACE_init+0x38>)
    5bca:	4798      	blx	r3
    5bcc:	4603      	mov	r3, r0
    5bce:	461a      	mov	r2, r3
    5bd0:	4907      	ldr	r1, [pc, #28]	; (5bf0 <TIMER_INTERFACE_init+0x3c>)
    5bd2:	4808      	ldr	r0, [pc, #32]	; (5bf4 <TIMER_INTERFACE_init+0x40>)
    5bd4:	4b08      	ldr	r3, [pc, #32]	; (5bf8 <TIMER_INTERFACE_init+0x44>)
    5bd6:	4798      	blx	r3
}
    5bd8:	bf00      	nop
    5bda:	bd80      	pop	{r7, pc}
    5bdc:	40000800 	.word	0x40000800
    5be0:	00004c93 	.word	0x00004c93
    5be4:	40001c00 	.word	0x40001c00
    5be8:	00004a2d 	.word	0x00004a2d
    5bec:	0000d8c5 	.word	0x0000d8c5
    5bf0:	42001800 	.word	0x42001800
    5bf4:	2000a7b8 	.word	0x2000a7b8
    5bf8:	000072cd 	.word	0x000072cd

00005bfc <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    5bfc:	b580      	push	{r7, lr}
    5bfe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    5c00:	4808      	ldr	r0, [pc, #32]	; (5c24 <TIMER_EVENT_init+0x28>)
    5c02:	4b09      	ldr	r3, [pc, #36]	; (5c28 <TIMER_EVENT_init+0x2c>)
    5c04:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5c06:	2246      	movs	r2, #70	; 0x46
    5c08:	2127      	movs	r1, #39	; 0x27
    5c0a:	4808      	ldr	r0, [pc, #32]	; (5c2c <TIMER_EVENT_init+0x30>)
    5c0c:	4b08      	ldr	r3, [pc, #32]	; (5c30 <TIMER_EVENT_init+0x34>)
    5c0e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    5c10:	4b08      	ldr	r3, [pc, #32]	; (5c34 <TIMER_EVENT_init+0x38>)
    5c12:	4798      	blx	r3
    5c14:	4603      	mov	r3, r0
    5c16:	461a      	mov	r2, r3
    5c18:	4907      	ldr	r1, [pc, #28]	; (5c38 <TIMER_EVENT_init+0x3c>)
    5c1a:	4808      	ldr	r0, [pc, #32]	; (5c3c <TIMER_EVENT_init+0x40>)
    5c1c:	4b08      	ldr	r3, [pc, #32]	; (5c40 <TIMER_EVENT_init+0x44>)
    5c1e:	4798      	blx	r3
}
    5c20:	bf00      	nop
    5c22:	bd80      	pop	{r7, pc}
    5c24:	40000800 	.word	0x40000800
    5c28:	00004d53 	.word	0x00004d53
    5c2c:	40001c00 	.word	0x40001c00
    5c30:	00004a2d 	.word	0x00004a2d
    5c34:	0000d8c5 	.word	0x0000d8c5
    5c38:	43001400 	.word	0x43001400
    5c3c:	2000a798 	.word	0x2000a798
    5c40:	000072cd 	.word	0x000072cd

00005c44 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    5c44:	b580      	push	{r7, lr}
    5c46:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    5c48:	4804      	ldr	r0, [pc, #16]	; (5c5c <TIMER_HVAC_CLOCK_init+0x18>)
    5c4a:	4b05      	ldr	r3, [pc, #20]	; (5c60 <TIMER_HVAC_CLOCK_init+0x1c>)
    5c4c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5c4e:	2244      	movs	r2, #68	; 0x44
    5c50:	2119      	movs	r1, #25
    5c52:	4804      	ldr	r0, [pc, #16]	; (5c64 <TIMER_HVAC_CLOCK_init+0x20>)
    5c54:	4b04      	ldr	r3, [pc, #16]	; (5c68 <TIMER_HVAC_CLOCK_init+0x24>)
    5c56:	4798      	blx	r3
}
    5c58:	bf00      	nop
    5c5a:	bd80      	pop	{r7, pc}
    5c5c:	40000800 	.word	0x40000800
    5c60:	00004c13 	.word	0x00004c13
    5c64:	40001c00 	.word	0x40001c00
    5c68:	00004a2d 	.word	0x00004a2d

00005c6c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    5c6c:	b580      	push	{r7, lr}
    5c6e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    5c70:	4b05      	ldr	r3, [pc, #20]	; (5c88 <TIMER_HVAC_init+0x1c>)
    5c72:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    5c74:	4b05      	ldr	r3, [pc, #20]	; (5c8c <TIMER_HVAC_init+0x20>)
    5c76:	4798      	blx	r3
    5c78:	4603      	mov	r3, r0
    5c7a:	461a      	mov	r2, r3
    5c7c:	4904      	ldr	r1, [pc, #16]	; (5c90 <TIMER_HVAC_init+0x24>)
    5c7e:	4805      	ldr	r0, [pc, #20]	; (5c94 <TIMER_HVAC_init+0x28>)
    5c80:	4b05      	ldr	r3, [pc, #20]	; (5c98 <TIMER_HVAC_init+0x2c>)
    5c82:	4798      	blx	r3
}
    5c84:	bf00      	nop
    5c86:	bd80      	pop	{r7, pc}
    5c88:	00005c45 	.word	0x00005c45
    5c8c:	0000cc85 	.word	0x0000cc85
    5c90:	41016000 	.word	0x41016000
    5c94:	2000a89c 	.word	0x2000a89c
    5c98:	000072cd 	.word	0x000072cd

00005c9c <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    5c9c:	b580      	push	{r7, lr}
    5c9e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    5ca0:	4804      	ldr	r0, [pc, #16]	; (5cb4 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    5ca2:	4b05      	ldr	r3, [pc, #20]	; (5cb8 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    5ca4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5ca6:	2244      	movs	r2, #68	; 0x44
    5ca8:	2119      	movs	r1, #25
    5caa:	4804      	ldr	r0, [pc, #16]	; (5cbc <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    5cac:	4b04      	ldr	r3, [pc, #16]	; (5cc0 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    5cae:	4798      	blx	r3
}
    5cb0:	bf00      	nop
    5cb2:	bd80      	pop	{r7, pc}
    5cb4:	40000800 	.word	0x40000800
    5cb8:	00004c33 	.word	0x00004c33
    5cbc:	40001c00 	.word	0x40001c00
    5cc0:	00004a2d 	.word	0x00004a2d

00005cc4 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    5cc4:	b580      	push	{r7, lr}
    5cc6:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    5cc8:	4b05      	ldr	r3, [pc, #20]	; (5ce0 <TIMER_TEMPERATURES_init+0x1c>)
    5cca:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    5ccc:	4b05      	ldr	r3, [pc, #20]	; (5ce4 <TIMER_TEMPERATURES_init+0x20>)
    5cce:	4798      	blx	r3
    5cd0:	4603      	mov	r3, r0
    5cd2:	461a      	mov	r2, r3
    5cd4:	4904      	ldr	r1, [pc, #16]	; (5ce8 <TIMER_TEMPERATURES_init+0x24>)
    5cd6:	4805      	ldr	r0, [pc, #20]	; (5cec <TIMER_TEMPERATURES_init+0x28>)
    5cd8:	4b05      	ldr	r3, [pc, #20]	; (5cf0 <TIMER_TEMPERATURES_init+0x2c>)
    5cda:	4798      	blx	r3
}
    5cdc:	bf00      	nop
    5cde:	bd80      	pop	{r7, pc}
    5ce0:	00005c9d 	.word	0x00005c9d
    5ce4:	0000cc85 	.word	0x0000cc85
    5ce8:	41018000 	.word	0x41018000
    5cec:	2000a70c 	.word	0x2000a70c
    5cf0:	000072cd 	.word	0x000072cd

00005cf4 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    5cf4:	b580      	push	{r7, lr}
    5cf6:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    5cf8:	2102      	movs	r1, #2
    5cfa:	2018      	movs	r0, #24
    5cfc:	4b0f      	ldr	r3, [pc, #60]	; (5d3c <CDCUSB_PORT_init+0x48>)
    5cfe:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    5d00:	2100      	movs	r1, #0
    5d02:	2018      	movs	r0, #24
    5d04:	4b0e      	ldr	r3, [pc, #56]	; (5d40 <CDCUSB_PORT_init+0x4c>)
    5d06:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    5d08:	2100      	movs	r1, #0
    5d0a:	2018      	movs	r0, #24
    5d0c:	4b0d      	ldr	r3, [pc, #52]	; (5d44 <CDCUSB_PORT_init+0x50>)
    5d0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    5d10:	490d      	ldr	r1, [pc, #52]	; (5d48 <CDCUSB_PORT_init+0x54>)
    5d12:	2018      	movs	r0, #24
    5d14:	4b0d      	ldr	r3, [pc, #52]	; (5d4c <CDCUSB_PORT_init+0x58>)
    5d16:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    5d18:	2102      	movs	r1, #2
    5d1a:	2019      	movs	r0, #25
    5d1c:	4b07      	ldr	r3, [pc, #28]	; (5d3c <CDCUSB_PORT_init+0x48>)
    5d1e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    5d20:	2100      	movs	r1, #0
    5d22:	2019      	movs	r0, #25
    5d24:	4b06      	ldr	r3, [pc, #24]	; (5d40 <CDCUSB_PORT_init+0x4c>)
    5d26:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    5d28:	2100      	movs	r1, #0
    5d2a:	2019      	movs	r0, #25
    5d2c:	4b05      	ldr	r3, [pc, #20]	; (5d44 <CDCUSB_PORT_init+0x50>)
    5d2e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    5d30:	4907      	ldr	r1, [pc, #28]	; (5d50 <CDCUSB_PORT_init+0x5c>)
    5d32:	2019      	movs	r0, #25
    5d34:	4b05      	ldr	r3, [pc, #20]	; (5d4c <CDCUSB_PORT_init+0x58>)
    5d36:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    5d38:	bf00      	nop
    5d3a:	bd80      	pop	{r7, pc}
    5d3c:	000052a1 	.word	0x000052a1
    5d40:	000052d9 	.word	0x000052d9
    5d44:	0000524d 	.word	0x0000524d
    5d48:	00180007 	.word	0x00180007
    5d4c:	00005281 	.word	0x00005281
    5d50:	00190007 	.word	0x00190007

00005d54 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    5d54:	b580      	push	{r7, lr}
    5d56:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    5d58:	2242      	movs	r2, #66	; 0x42
    5d5a:	210a      	movs	r1, #10
    5d5c:	4805      	ldr	r0, [pc, #20]	; (5d74 <CDCUSB_CLOCK_init+0x20>)
    5d5e:	4b06      	ldr	r3, [pc, #24]	; (5d78 <CDCUSB_CLOCK_init+0x24>)
    5d60:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    5d62:	4806      	ldr	r0, [pc, #24]	; (5d7c <CDCUSB_CLOCK_init+0x28>)
    5d64:	4b06      	ldr	r3, [pc, #24]	; (5d80 <CDCUSB_CLOCK_init+0x2c>)
    5d66:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    5d68:	4804      	ldr	r0, [pc, #16]	; (5d7c <CDCUSB_CLOCK_init+0x28>)
    5d6a:	4b06      	ldr	r3, [pc, #24]	; (5d84 <CDCUSB_CLOCK_init+0x30>)
    5d6c:	4798      	blx	r3
}
    5d6e:	bf00      	nop
    5d70:	bd80      	pop	{r7, pc}
    5d72:	bf00      	nop
    5d74:	40001c00 	.word	0x40001c00
    5d78:	00004a2d 	.word	0x00004a2d
    5d7c:	40000800 	.word	0x40000800
    5d80:	00004a53 	.word	0x00004a53
    5d84:	00004b93 	.word	0x00004b93

00005d88 <CDCUSB_init>:

void CDCUSB_init(void)
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    5d8c:	4b03      	ldr	r3, [pc, #12]	; (5d9c <CDCUSB_init+0x14>)
    5d8e:	4798      	blx	r3
	usb_d_init();
    5d90:	4b03      	ldr	r3, [pc, #12]	; (5da0 <CDCUSB_init+0x18>)
    5d92:	4798      	blx	r3
	CDCUSB_PORT_init();
    5d94:	4b03      	ldr	r3, [pc, #12]	; (5da4 <CDCUSB_init+0x1c>)
    5d96:	4798      	blx	r3
}
    5d98:	bf00      	nop
    5d9a:	bd80      	pop	{r7, pc}
    5d9c:	00005d55 	.word	0x00005d55
    5da0:	00007b29 	.word	0x00007b29
    5da4:	00005cf5 	.word	0x00005cf5

00005da8 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    5da8:	b580      	push	{r7, lr}
    5daa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    5dac:	4802      	ldr	r0, [pc, #8]	; (5db8 <WATCHDOG_CLOCK_init+0x10>)
    5dae:	4b03      	ldr	r3, [pc, #12]	; (5dbc <WATCHDOG_CLOCK_init+0x14>)
    5db0:	4798      	blx	r3
}
    5db2:	bf00      	nop
    5db4:	bd80      	pop	{r7, pc}
    5db6:	bf00      	nop
    5db8:	40000800 	.word	0x40000800
    5dbc:	00004ad3 	.word	0x00004ad3

00005dc0 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    5dc0:	b580      	push	{r7, lr}
    5dc2:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    5dc4:	4b03      	ldr	r3, [pc, #12]	; (5dd4 <WATCHDOG_init+0x14>)
    5dc6:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    5dc8:	4903      	ldr	r1, [pc, #12]	; (5dd8 <WATCHDOG_init+0x18>)
    5dca:	4804      	ldr	r0, [pc, #16]	; (5ddc <WATCHDOG_init+0x1c>)
    5dcc:	4b04      	ldr	r3, [pc, #16]	; (5de0 <WATCHDOG_init+0x20>)
    5dce:	4798      	blx	r3
}
    5dd0:	bf00      	nop
    5dd2:	bd80      	pop	{r7, pc}
    5dd4:	00005da9 	.word	0x00005da9
    5dd8:	40002000 	.word	0x40002000
    5ddc:	2000a91c 	.word	0x2000a91c
    5de0:	00005321 	.word	0x00005321

00005de4 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    5de4:	b580      	push	{r7, lr}
    5de6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    5de8:	4904      	ldr	r1, [pc, #16]	; (5dfc <CAN_CCU_PORT_init+0x18>)
    5dea:	202d      	movs	r0, #45	; 0x2d
    5dec:	4b04      	ldr	r3, [pc, #16]	; (5e00 <CAN_CCU_PORT_init+0x1c>)
    5dee:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    5df0:	4904      	ldr	r1, [pc, #16]	; (5e04 <CAN_CCU_PORT_init+0x20>)
    5df2:	202c      	movs	r0, #44	; 0x2c
    5df4:	4b02      	ldr	r3, [pc, #8]	; (5e00 <CAN_CCU_PORT_init+0x1c>)
    5df6:	4798      	blx	r3
}
    5df8:	bf00      	nop
    5dfa:	bd80      	pop	{r7, pc}
    5dfc:	002d0007 	.word	0x002d0007
    5e00:	00005281 	.word	0x00005281
    5e04:	002c0007 	.word	0x002c0007

00005e08 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    5e08:	b580      	push	{r7, lr}
    5e0a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    5e0c:	4807      	ldr	r0, [pc, #28]	; (5e2c <CAN_CCU_init+0x24>)
    5e0e:	4b08      	ldr	r3, [pc, #32]	; (5e30 <CAN_CCU_init+0x28>)
    5e10:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5e12:	2243      	movs	r2, #67	; 0x43
    5e14:	211c      	movs	r1, #28
    5e16:	4807      	ldr	r0, [pc, #28]	; (5e34 <CAN_CCU_init+0x2c>)
    5e18:	4b07      	ldr	r3, [pc, #28]	; (5e38 <CAN_CCU_init+0x30>)
    5e1a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    5e1c:	4907      	ldr	r1, [pc, #28]	; (5e3c <CAN_CCU_init+0x34>)
    5e1e:	4808      	ldr	r0, [pc, #32]	; (5e40 <CAN_CCU_init+0x38>)
    5e20:	4b08      	ldr	r3, [pc, #32]	; (5e44 <CAN_CCU_init+0x3c>)
    5e22:	4798      	blx	r3
	CAN_CCU_PORT_init();
    5e24:	4b08      	ldr	r3, [pc, #32]	; (5e48 <CAN_CCU_init+0x40>)
    5e26:	4798      	blx	r3
}
    5e28:	bf00      	nop
    5e2a:	bd80      	pop	{r7, pc}
    5e2c:	40000800 	.word	0x40000800
    5e30:	00004a93 	.word	0x00004a93
    5e34:	40001c00 	.word	0x40001c00
    5e38:	00004a2d 	.word	0x00004a2d
    5e3c:	42000400 	.word	0x42000400
    5e40:	2000a7f4 	.word	0x2000a7f4
    5e44:	00006559 	.word	0x00006559
    5e48:	00005de5 	.word	0x00005de5

00005e4c <system_init>:

void system_init(void)
{
    5e4c:	b580      	push	{r7, lr}
    5e4e:	af00      	add	r7, sp, #0
	init_mcu();
    5e50:	4b58      	ldr	r3, [pc, #352]	; (5fb4 <system_init+0x168>)
    5e52:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    5e54:	2101      	movs	r1, #1
    5e56:	200f      	movs	r0, #15
    5e58:	4b57      	ldr	r3, [pc, #348]	; (5fb8 <system_init+0x16c>)
    5e5a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    5e5c:	2102      	movs	r1, #2
    5e5e:	200f      	movs	r0, #15
    5e60:	4b56      	ldr	r3, [pc, #344]	; (5fbc <system_init+0x170>)
    5e62:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    5e64:	f04f 31ff 	mov.w	r1, #4294967295
    5e68:	200f      	movs	r0, #15
    5e6a:	4b55      	ldr	r3, [pc, #340]	; (5fc0 <system_init+0x174>)
    5e6c:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    5e6e:	2101      	movs	r1, #1
    5e70:	2013      	movs	r0, #19
    5e72:	4b51      	ldr	r3, [pc, #324]	; (5fb8 <system_init+0x16c>)
    5e74:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    5e76:	2102      	movs	r1, #2
    5e78:	2013      	movs	r0, #19
    5e7a:	4b50      	ldr	r3, [pc, #320]	; (5fbc <system_init+0x170>)
    5e7c:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    5e7e:	f04f 31ff 	mov.w	r1, #4294967295
    5e82:	2013      	movs	r0, #19
    5e84:	4b4e      	ldr	r3, [pc, #312]	; (5fc0 <system_init+0x174>)
    5e86:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    5e88:	2101      	movs	r1, #1
    5e8a:	201b      	movs	r0, #27
    5e8c:	4b4a      	ldr	r3, [pc, #296]	; (5fb8 <system_init+0x16c>)
    5e8e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    5e90:	2102      	movs	r1, #2
    5e92:	201b      	movs	r0, #27
    5e94:	4b49      	ldr	r3, [pc, #292]	; (5fbc <system_init+0x170>)
    5e96:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    5e98:	f04f 31ff 	mov.w	r1, #4294967295
    5e9c:	201b      	movs	r0, #27
    5e9e:	4b48      	ldr	r3, [pc, #288]	; (5fc0 <system_init+0x174>)
    5ea0:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    5ea2:	2101      	movs	r1, #1
    5ea4:	2027      	movs	r0, #39	; 0x27
    5ea6:	4b45      	ldr	r3, [pc, #276]	; (5fbc <system_init+0x170>)
    5ea8:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    5eaa:	2102      	movs	r1, #2
    5eac:	2027      	movs	r0, #39	; 0x27
    5eae:	4b45      	ldr	r3, [pc, #276]	; (5fc4 <system_init+0x178>)
    5eb0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    5eb2:	f04f 31ff 	mov.w	r1, #4294967295
    5eb6:	2027      	movs	r0, #39	; 0x27
    5eb8:	4b41      	ldr	r3, [pc, #260]	; (5fc0 <system_init+0x174>)
    5eba:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    5ebc:	2101      	movs	r1, #1
    5ebe:	203d      	movs	r0, #61	; 0x3d
    5ec0:	4b3d      	ldr	r3, [pc, #244]	; (5fb8 <system_init+0x16c>)
    5ec2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    5ec4:	2102      	movs	r1, #2
    5ec6:	203d      	movs	r0, #61	; 0x3d
    5ec8:	4b3c      	ldr	r3, [pc, #240]	; (5fbc <system_init+0x170>)
    5eca:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    5ecc:	f04f 31ff 	mov.w	r1, #4294967295
    5ed0:	203d      	movs	r0, #61	; 0x3d
    5ed2:	4b3b      	ldr	r3, [pc, #236]	; (5fc0 <system_init+0x174>)
    5ed4:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    5ed6:	2101      	movs	r1, #1
    5ed8:	203f      	movs	r0, #63	; 0x3f
    5eda:	4b38      	ldr	r3, [pc, #224]	; (5fbc <system_init+0x170>)
    5edc:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    5ede:	2101      	movs	r1, #1
    5ee0:	203f      	movs	r0, #63	; 0x3f
    5ee2:	4b38      	ldr	r3, [pc, #224]	; (5fc4 <system_init+0x178>)
    5ee4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    5ee6:	f04f 31ff 	mov.w	r1, #4294967295
    5eea:	203f      	movs	r0, #63	; 0x3f
    5eec:	4b34      	ldr	r3, [pc, #208]	; (5fc0 <system_init+0x174>)
    5eee:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    5ef0:	2100      	movs	r1, #0
    5ef2:	204d      	movs	r0, #77	; 0x4d
    5ef4:	4b30      	ldr	r3, [pc, #192]	; (5fb8 <system_init+0x16c>)
    5ef6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    5ef8:	2102      	movs	r1, #2
    5efa:	204d      	movs	r0, #77	; 0x4d
    5efc:	4b2f      	ldr	r3, [pc, #188]	; (5fbc <system_init+0x170>)
    5efe:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    5f00:	f04f 31ff 	mov.w	r1, #4294967295
    5f04:	204d      	movs	r0, #77	; 0x4d
    5f06:	4b2e      	ldr	r3, [pc, #184]	; (5fc0 <system_init+0x174>)
    5f08:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    5f0a:	2101      	movs	r1, #1
    5f0c:	204e      	movs	r0, #78	; 0x4e
    5f0e:	4b2a      	ldr	r3, [pc, #168]	; (5fb8 <system_init+0x16c>)
    5f10:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    5f12:	2102      	movs	r1, #2
    5f14:	204e      	movs	r0, #78	; 0x4e
    5f16:	4b29      	ldr	r3, [pc, #164]	; (5fbc <system_init+0x170>)
    5f18:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    5f1a:	f04f 31ff 	mov.w	r1, #4294967295
    5f1e:	204e      	movs	r0, #78	; 0x4e
    5f20:	4b27      	ldr	r3, [pc, #156]	; (5fc0 <system_init+0x174>)
    5f22:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    5f24:	2100      	movs	r1, #0
    5f26:	204f      	movs	r0, #79	; 0x4f
    5f28:	4b23      	ldr	r3, [pc, #140]	; (5fb8 <system_init+0x16c>)
    5f2a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    5f2c:	2102      	movs	r1, #2
    5f2e:	204f      	movs	r0, #79	; 0x4f
    5f30:	4b22      	ldr	r3, [pc, #136]	; (5fbc <system_init+0x170>)
    5f32:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    5f34:	f04f 31ff 	mov.w	r1, #4294967295
    5f38:	204f      	movs	r0, #79	; 0x4f
    5f3a:	4b21      	ldr	r3, [pc, #132]	; (5fc0 <system_init+0x174>)
    5f3c:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    5f3e:	2100      	movs	r1, #0
    5f40:	2052      	movs	r0, #82	; 0x52
    5f42:	4b1d      	ldr	r3, [pc, #116]	; (5fb8 <system_init+0x16c>)
    5f44:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    5f46:	2102      	movs	r1, #2
    5f48:	2052      	movs	r0, #82	; 0x52
    5f4a:	4b1c      	ldr	r3, [pc, #112]	; (5fbc <system_init+0x170>)
    5f4c:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    5f4e:	f04f 31ff 	mov.w	r1, #4294967295
    5f52:	2052      	movs	r0, #82	; 0x52
    5f54:	4b1a      	ldr	r3, [pc, #104]	; (5fc0 <system_init+0x174>)
    5f56:	4798      	blx	r3

	CRC_CALC_init();
    5f58:	4b1b      	ldr	r3, [pc, #108]	; (5fc8 <system_init+0x17c>)
    5f5a:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    5f5c:	4b1b      	ldr	r3, [pc, #108]	; (5fcc <system_init+0x180>)
    5f5e:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    5f60:	4b1b      	ldr	r3, [pc, #108]	; (5fd0 <system_init+0x184>)
    5f62:	4798      	blx	r3

	QSPI_N25Q256_init();
    5f64:	4b1b      	ldr	r3, [pc, #108]	; (5fd4 <system_init+0x188>)
    5f66:	4798      	blx	r3

	DATETIME_CLOCK_init();
    5f68:	4b1b      	ldr	r3, [pc, #108]	; (5fd8 <system_init+0x18c>)
    5f6a:	4798      	blx	r3

	SPI_MEMORIES_init();
    5f6c:	4b1b      	ldr	r3, [pc, #108]	; (5fdc <system_init+0x190>)
    5f6e:	4798      	blx	r3

	I2C_SHARED_init();
    5f70:	4b1b      	ldr	r3, [pc, #108]	; (5fe0 <system_init+0x194>)
    5f72:	4798      	blx	r3

	SPI_TEMP_init();
    5f74:	4b1b      	ldr	r3, [pc, #108]	; (5fe4 <system_init+0x198>)
    5f76:	4798      	blx	r3

	I2C_EXPANDER_init();
    5f78:	4b1b      	ldr	r3, [pc, #108]	; (5fe8 <system_init+0x19c>)
    5f7a:	4798      	blx	r3

	SPI_HI3593_init();
    5f7c:	4b1b      	ldr	r3, [pc, #108]	; (5fec <system_init+0x1a0>)
    5f7e:	4798      	blx	r3

	I2C_EEPROM_init();
    5f80:	4b1b      	ldr	r3, [pc, #108]	; (5ff0 <system_init+0x1a4>)
    5f82:	4798      	blx	r3

	TIMER_USB_init();
    5f84:	4b1b      	ldr	r3, [pc, #108]	; (5ff4 <system_init+0x1a8>)
    5f86:	4798      	blx	r3
	LIVE_PULSE_init();
    5f88:	4b1b      	ldr	r3, [pc, #108]	; (5ff8 <system_init+0x1ac>)
    5f8a:	4798      	blx	r3

	TIMER_ARINC_init();
    5f8c:	4b1b      	ldr	r3, [pc, #108]	; (5ffc <system_init+0x1b0>)
    5f8e:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    5f90:	4b1b      	ldr	r3, [pc, #108]	; (6000 <system_init+0x1b4>)
    5f92:	4798      	blx	r3
	TIMER_INTERFACE_init();
    5f94:	4b1b      	ldr	r3, [pc, #108]	; (6004 <system_init+0x1b8>)
    5f96:	4798      	blx	r3
	TIMER_EVENT_init();
    5f98:	4b1b      	ldr	r3, [pc, #108]	; (6008 <system_init+0x1bc>)
    5f9a:	4798      	blx	r3
	TIMER_HVAC_init();
    5f9c:	4b1b      	ldr	r3, [pc, #108]	; (600c <system_init+0x1c0>)
    5f9e:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    5fa0:	4b1b      	ldr	r3, [pc, #108]	; (6010 <system_init+0x1c4>)
    5fa2:	4798      	blx	r3

	CDCUSB_init();
    5fa4:	4b1b      	ldr	r3, [pc, #108]	; (6014 <system_init+0x1c8>)
    5fa6:	4798      	blx	r3

	WATCHDOG_init();
    5fa8:	4b1b      	ldr	r3, [pc, #108]	; (6018 <system_init+0x1cc>)
    5faa:	4798      	blx	r3
	CAN_CCU_init();
    5fac:	4b1b      	ldr	r3, [pc, #108]	; (601c <system_init+0x1d0>)
    5fae:	4798      	blx	r3
}
    5fb0:	bf00      	nop
    5fb2:	bd80      	pop	{r7, pc}
    5fb4:	00005311 	.word	0x00005311
    5fb8:	000052d9 	.word	0x000052d9
    5fbc:	000052a1 	.word	0x000052a1
    5fc0:	00005281 	.word	0x00005281
    5fc4:	0000524d 	.word	0x0000524d
    5fc8:	00005371 	.word	0x00005371
    5fcc:	0000539d 	.word	0x0000539d
    5fd0:	00005491 	.word	0x00005491
    5fd4:	000055d9 	.word	0x000055d9
    5fd8:	0000561d 	.word	0x0000561d
    5fdc:	000056e1 	.word	0x000056e1
    5fe0:	00005779 	.word	0x00005779
    5fe4:	00005845 	.word	0x00005845
    5fe8:	000058dd 	.word	0x000058dd
    5fec:	000059a9 	.word	0x000059a9
    5ff0:	00005a41 	.word	0x00005a41
    5ff4:	00005a6d 	.word	0x00005a6d
    5ff8:	00005aed 	.word	0x00005aed
    5ffc:	00005b25 	.word	0x00005b25
    6000:	00005b6d 	.word	0x00005b6d
    6004:	00005bb5 	.word	0x00005bb5
    6008:	00005bfd 	.word	0x00005bfd
    600c:	00005c6d 	.word	0x00005c6d
    6010:	00005cc5 	.word	0x00005cc5
    6014:	00005d89 	.word	0x00005d89
    6018:	00005dc1 	.word	0x00005dc1
    601c:	00005e09 	.word	0x00005e09

00006020 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    6020:	b480      	push	{r7}
    6022:	b083      	sub	sp, #12
    6024:	af00      	add	r7, sp, #0
    6026:	4603      	mov	r3, r0
    6028:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    602a:	88fb      	ldrh	r3, [r7, #6]
    602c:	f003 0303 	and.w	r3, r3, #3
    6030:	2b00      	cmp	r3, #0
    6032:	d001      	beq.n	6038 <leap_year+0x18>
		return false;
    6034:	2300      	movs	r3, #0
    6036:	e000      	b.n	603a <leap_year+0x1a>
	} else {
		return true;
    6038:	2301      	movs	r3, #1
	}
}
    603a:	4618      	mov	r0, r3
    603c:	370c      	adds	r7, #12
    603e:	46bd      	mov	sp, r7
    6040:	f85d 7b04 	ldr.w	r7, [sp], #4
    6044:	4770      	bx	lr
	...

00006048 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    6048:	b580      	push	{r7, lr}
    604a:	b084      	sub	sp, #16
    604c:	af00      	add	r7, sp, #0
    604e:	6078      	str	r0, [r7, #4]
    6050:	460b      	mov	r3, r1
    6052:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    6054:	2300      	movs	r3, #0
    6056:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	b29b      	uxth	r3, r3
    605c:	4618      	mov	r0, r3
    605e:	4b2f      	ldr	r3, [pc, #188]	; (611c <get_secs_in_month+0xd4>)
    6060:	4798      	blx	r3
    6062:	4603      	mov	r3, r0
    6064:	2b00      	cmp	r3, #0
    6066:	d028      	beq.n	60ba <get_secs_in_month+0x72>
		switch (month) {
    6068:	78fb      	ldrb	r3, [r7, #3]
    606a:	3b01      	subs	r3, #1
    606c:	2b0b      	cmp	r3, #11
    606e:	d84c      	bhi.n	610a <get_secs_in_month+0xc2>
    6070:	a201      	add	r2, pc, #4	; (adr r2, 6078 <get_secs_in_month+0x30>)
    6072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6076:	bf00      	nop
    6078:	000060a9 	.word	0x000060a9
    607c:	000060af 	.word	0x000060af
    6080:	000060a9 	.word	0x000060a9
    6084:	000060b5 	.word	0x000060b5
    6088:	000060a9 	.word	0x000060a9
    608c:	000060b5 	.word	0x000060b5
    6090:	000060a9 	.word	0x000060a9
    6094:	000060a9 	.word	0x000060a9
    6098:	000060b5 	.word	0x000060b5
    609c:	000060a9 	.word	0x000060a9
    60a0:	000060b5 	.word	0x000060b5
    60a4:	000060a9 	.word	0x000060a9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    60a8:	4b1d      	ldr	r3, [pc, #116]	; (6120 <get_secs_in_month+0xd8>)
    60aa:	60fb      	str	r3, [r7, #12]
			break;
    60ac:	e030      	b.n	6110 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    60ae:	4b1d      	ldr	r3, [pc, #116]	; (6124 <get_secs_in_month+0xdc>)
    60b0:	60fb      	str	r3, [r7, #12]
			break;
    60b2:	e02d      	b.n	6110 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    60b4:	4b1c      	ldr	r3, [pc, #112]	; (6128 <get_secs_in_month+0xe0>)
    60b6:	60fb      	str	r3, [r7, #12]
			break;
    60b8:	e02a      	b.n	6110 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    60ba:	78fb      	ldrb	r3, [r7, #3]
    60bc:	3b01      	subs	r3, #1
    60be:	2b0b      	cmp	r3, #11
    60c0:	d825      	bhi.n	610e <get_secs_in_month+0xc6>
    60c2:	a201      	add	r2, pc, #4	; (adr r2, 60c8 <get_secs_in_month+0x80>)
    60c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    60c8:	000060f9 	.word	0x000060f9
    60cc:	000060ff 	.word	0x000060ff
    60d0:	000060f9 	.word	0x000060f9
    60d4:	00006105 	.word	0x00006105
    60d8:	000060f9 	.word	0x000060f9
    60dc:	00006105 	.word	0x00006105
    60e0:	000060f9 	.word	0x000060f9
    60e4:	000060f9 	.word	0x000060f9
    60e8:	00006105 	.word	0x00006105
    60ec:	000060f9 	.word	0x000060f9
    60f0:	00006105 	.word	0x00006105
    60f4:	000060f9 	.word	0x000060f9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    60f8:	4b09      	ldr	r3, [pc, #36]	; (6120 <get_secs_in_month+0xd8>)
    60fa:	60fb      	str	r3, [r7, #12]
			break;
    60fc:	e008      	b.n	6110 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    60fe:	4b0b      	ldr	r3, [pc, #44]	; (612c <get_secs_in_month+0xe4>)
    6100:	60fb      	str	r3, [r7, #12]
			break;
    6102:	e005      	b.n	6110 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    6104:	4b08      	ldr	r3, [pc, #32]	; (6128 <get_secs_in_month+0xe0>)
    6106:	60fb      	str	r3, [r7, #12]
			break;
    6108:	e002      	b.n	6110 <get_secs_in_month+0xc8>
			break;
    610a:	bf00      	nop
    610c:	e000      	b.n	6110 <get_secs_in_month+0xc8>
		default:
			break;
    610e:	bf00      	nop
		}
	}

	return sec_in_month;
    6110:	68fb      	ldr	r3, [r7, #12]
}
    6112:	4618      	mov	r0, r3
    6114:	3710      	adds	r7, #16
    6116:	46bd      	mov	sp, r7
    6118:	bd80      	pop	{r7, pc}
    611a:	bf00      	nop
    611c:	00006021 	.word	0x00006021
    6120:	0028de80 	.word	0x0028de80
    6124:	00263b80 	.word	0x00263b80
    6128:	00278d00 	.word	0x00278d00
    612c:	0024ea00 	.word	0x0024ea00

00006130 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    6130:	b580      	push	{r7, lr}
    6132:	b08a      	sub	sp, #40	; 0x28
    6134:	af00      	add	r7, sp, #0
    6136:	60f8      	str	r0, [r7, #12]
    6138:	60b9      	str	r1, [r7, #8]
    613a:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    613c:	68fb      	ldr	r3, [r7, #12]
    613e:	699b      	ldr	r3, [r3, #24]
    6140:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    6142:	2301      	movs	r3, #1
    6144:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    6146:	2301      	movs	r3, #1
    6148:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    614a:	2300      	movs	r3, #0
    614c:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    614e:	2300      	movs	r3, #0
    6150:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    6152:	68bb      	ldr	r3, [r7, #8]
    6154:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    6156:	6a3b      	ldr	r3, [r7, #32]
    6158:	b29b      	uxth	r3, r3
    615a:	4618      	mov	r0, r3
    615c:	4b32      	ldr	r3, [pc, #200]	; (6228 <convert_timestamp_to_datetime+0xf8>)
    615e:	4798      	blx	r3
    6160:	4603      	mov	r3, r0
    6162:	2b00      	cmp	r3, #0
    6164:	d001      	beq.n	616a <convert_timestamp_to_datetime+0x3a>
    6166:	4b31      	ldr	r3, [pc, #196]	; (622c <convert_timestamp_to_datetime+0xfc>)
    6168:	e000      	b.n	616c <convert_timestamp_to_datetime+0x3c>
    616a:	4b31      	ldr	r3, [pc, #196]	; (6230 <convert_timestamp_to_datetime+0x100>)
    616c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    616e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6170:	69bb      	ldr	r3, [r7, #24]
    6172:	429a      	cmp	r2, r3
    6174:	d307      	bcc.n	6186 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    6176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6178:	69bb      	ldr	r3, [r7, #24]
    617a:	1ad3      	subs	r3, r2, r3
    617c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    617e:	6a3b      	ldr	r3, [r7, #32]
    6180:	3301      	adds	r3, #1
    6182:	623b      	str	r3, [r7, #32]
    6184:	e7e7      	b.n	6156 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    6186:	7ffb      	ldrb	r3, [r7, #31]
    6188:	4619      	mov	r1, r3
    618a:	6a38      	ldr	r0, [r7, #32]
    618c:	4b29      	ldr	r3, [pc, #164]	; (6234 <convert_timestamp_to_datetime+0x104>)
    618e:	4798      	blx	r3
    6190:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    6192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6194:	697b      	ldr	r3, [r7, #20]
    6196:	429a      	cmp	r2, r3
    6198:	d307      	bcc.n	61aa <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    619a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    619c:	697b      	ldr	r3, [r7, #20]
    619e:	1ad3      	subs	r3, r2, r3
    61a0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    61a2:	7ffb      	ldrb	r3, [r7, #31]
    61a4:	3301      	adds	r3, #1
    61a6:	77fb      	strb	r3, [r7, #31]
    61a8:	e7ed      	b.n	6186 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    61aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61ac:	4a22      	ldr	r2, [pc, #136]	; (6238 <convert_timestamp_to_datetime+0x108>)
    61ae:	4293      	cmp	r3, r2
    61b0:	d909      	bls.n	61c6 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    61b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61b4:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    61b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    61bc:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    61be:	7fbb      	ldrb	r3, [r7, #30]
    61c0:	3301      	adds	r3, #1
    61c2:	77bb      	strb	r3, [r7, #30]
    61c4:	e7f1      	b.n	61aa <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    61c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61c8:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    61cc:	d307      	bcc.n	61de <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    61ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61d0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    61d4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    61d6:	7f7b      	ldrb	r3, [r7, #29]
    61d8:	3301      	adds	r3, #1
    61da:	777b      	strb	r3, [r7, #29]
    61dc:	e7f3      	b.n	61c6 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    61de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61e0:	2b3b      	cmp	r3, #59	; 0x3b
    61e2:	d906      	bls.n	61f2 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    61e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61e6:	3b3c      	subs	r3, #60	; 0x3c
    61e8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    61ea:	7f3b      	ldrb	r3, [r7, #28]
    61ec:	3301      	adds	r3, #1
    61ee:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    61f0:	e7f5      	b.n	61de <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    61f2:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    61f4:	6a3b      	ldr	r3, [r7, #32]
    61f6:	b29a      	uxth	r2, r3
    61f8:	687b      	ldr	r3, [r7, #4]
    61fa:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	7ffa      	ldrb	r2, [r7, #31]
    6200:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    6202:	687b      	ldr	r3, [r7, #4]
    6204:	7fba      	ldrb	r2, [r7, #30]
    6206:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	7f7a      	ldrb	r2, [r7, #29]
    620c:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    620e:	687b      	ldr	r3, [r7, #4]
    6210:	7f3a      	ldrb	r2, [r7, #28]
    6212:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    6214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6216:	b2da      	uxtb	r2, r3
    6218:	687b      	ldr	r3, [r7, #4]
    621a:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    621c:	2300      	movs	r3, #0
}
    621e:	4618      	mov	r0, r3
    6220:	3728      	adds	r7, #40	; 0x28
    6222:	46bd      	mov	sp, r7
    6224:	bd80      	pop	{r7, pc}
    6226:	bf00      	nop
    6228:	00006021 	.word	0x00006021
    622c:	01e28500 	.word	0x01e28500
    6230:	01e13380 	.word	0x01e13380
    6234:	00006049 	.word	0x00006049
    6238:	0001517f 	.word	0x0001517f

0000623c <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    623c:	b580      	push	{r7, lr}
    623e:	b086      	sub	sp, #24
    6240:	af00      	add	r7, sp, #0
    6242:	6078      	str	r0, [r7, #4]
    6244:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    6246:	2300      	movs	r3, #0
    6248:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    624a:	2300      	movs	r3, #0
    624c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    624e:	683b      	ldr	r3, [r7, #0]
    6250:	88db      	ldrh	r3, [r3, #6]
    6252:	b2da      	uxtb	r2, r3
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	699b      	ldr	r3, [r3, #24]
    6258:	b2db      	uxtb	r3, r3
    625a:	1ad3      	subs	r3, r2, r3
    625c:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    625e:	683b      	ldr	r3, [r7, #0]
    6260:	795b      	ldrb	r3, [r3, #5]
    6262:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    6264:	683b      	ldr	r3, [r7, #0]
    6266:	791b      	ldrb	r3, [r3, #4]
    6268:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    626a:	683b      	ldr	r3, [r7, #0]
    626c:	789b      	ldrb	r3, [r3, #2]
    626e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    6270:	683b      	ldr	r3, [r7, #0]
    6272:	785b      	ldrb	r3, [r3, #1]
    6274:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    6276:	683b      	ldr	r3, [r7, #0]
    6278:	781b      	ldrb	r3, [r3, #0]
    627a:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    627c:	2300      	movs	r3, #0
    627e:	613b      	str	r3, [r7, #16]
    6280:	e01a      	b.n	62b8 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	699b      	ldr	r3, [r3, #24]
    6286:	b29a      	uxth	r2, r3
    6288:	693b      	ldr	r3, [r7, #16]
    628a:	b29b      	uxth	r3, r3
    628c:	4413      	add	r3, r2
    628e:	b29b      	uxth	r3, r3
    6290:	4618      	mov	r0, r3
    6292:	4b29      	ldr	r3, [pc, #164]	; (6338 <convert_datetime_to_timestamp+0xfc>)
    6294:	4798      	blx	r3
    6296:	4603      	mov	r3, r0
    6298:	2b00      	cmp	r3, #0
    629a:	d006      	beq.n	62aa <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    629c:	697b      	ldr	r3, [r7, #20]
    629e:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    62a2:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    62a6:	617b      	str	r3, [r7, #20]
    62a8:	e003      	b.n	62b2 <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    62aa:	697a      	ldr	r2, [r7, #20]
    62ac:	4b23      	ldr	r3, [pc, #140]	; (633c <convert_datetime_to_timestamp+0x100>)
    62ae:	4413      	add	r3, r2
    62b0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    62b2:	693b      	ldr	r3, [r7, #16]
    62b4:	3301      	adds	r3, #1
    62b6:	613b      	str	r3, [r7, #16]
    62b8:	7bfa      	ldrb	r2, [r7, #15]
    62ba:	693b      	ldr	r3, [r7, #16]
    62bc:	429a      	cmp	r2, r3
    62be:	d8e0      	bhi.n	6282 <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    62c0:	2301      	movs	r3, #1
    62c2:	613b      	str	r3, [r7, #16]
    62c4:	e00f      	b.n	62e6 <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    62c6:	683b      	ldr	r3, [r7, #0]
    62c8:	88db      	ldrh	r3, [r3, #6]
    62ca:	461a      	mov	r2, r3
    62cc:	693b      	ldr	r3, [r7, #16]
    62ce:	b2db      	uxtb	r3, r3
    62d0:	4619      	mov	r1, r3
    62d2:	4610      	mov	r0, r2
    62d4:	4b1a      	ldr	r3, [pc, #104]	; (6340 <convert_datetime_to_timestamp+0x104>)
    62d6:	4798      	blx	r3
    62d8:	4602      	mov	r2, r0
    62da:	697b      	ldr	r3, [r7, #20]
    62dc:	4413      	add	r3, r2
    62de:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    62e0:	693b      	ldr	r3, [r7, #16]
    62e2:	3301      	adds	r3, #1
    62e4:	613b      	str	r3, [r7, #16]
    62e6:	7bba      	ldrb	r2, [r7, #14]
    62e8:	693b      	ldr	r3, [r7, #16]
    62ea:	429a      	cmp	r2, r3
    62ec:	d8eb      	bhi.n	62c6 <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    62ee:	7b7b      	ldrb	r3, [r7, #13]
    62f0:	3b01      	subs	r3, #1
    62f2:	4a14      	ldr	r2, [pc, #80]	; (6344 <convert_datetime_to_timestamp+0x108>)
    62f4:	fb02 f303 	mul.w	r3, r2, r3
    62f8:	461a      	mov	r2, r3
    62fa:	697b      	ldr	r3, [r7, #20]
    62fc:	4413      	add	r3, r2
    62fe:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    6300:	7b3b      	ldrb	r3, [r7, #12]
    6302:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    6306:	fb02 f303 	mul.w	r3, r2, r3
    630a:	461a      	mov	r2, r3
    630c:	697b      	ldr	r3, [r7, #20]
    630e:	4413      	add	r3, r2
    6310:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    6312:	7afa      	ldrb	r2, [r7, #11]
    6314:	4613      	mov	r3, r2
    6316:	011b      	lsls	r3, r3, #4
    6318:	1a9b      	subs	r3, r3, r2
    631a:	009b      	lsls	r3, r3, #2
    631c:	461a      	mov	r2, r3
    631e:	697b      	ldr	r3, [r7, #20]
    6320:	4413      	add	r3, r2
    6322:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    6324:	7abb      	ldrb	r3, [r7, #10]
    6326:	697a      	ldr	r2, [r7, #20]
    6328:	4413      	add	r3, r2
    632a:	617b      	str	r3, [r7, #20]

	return tmp;
    632c:	697b      	ldr	r3, [r7, #20]
}
    632e:	4618      	mov	r0, r3
    6330:	3718      	adds	r7, #24
    6332:	46bd      	mov	sp, r7
    6334:	bd80      	pop	{r7, pc}
    6336:	bf00      	nop
    6338:	00006021 	.word	0x00006021
    633c:	01e13380 	.word	0x01e13380
    6340:	00006049 	.word	0x00006049
    6344:	00015180 	.word	0x00015180

00006348 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    6348:	b580      	push	{r7, lr}
    634a:	b084      	sub	sp, #16
    634c:	af00      	add	r7, sp, #0
    634e:	6078      	str	r0, [r7, #4]
    6350:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    6352:	2300      	movs	r3, #0
    6354:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	2b00      	cmp	r3, #0
    635a:	bf14      	ite	ne
    635c:	2301      	movne	r3, #1
    635e:	2300      	moveq	r3, #0
    6360:	b2db      	uxtb	r3, r3
    6362:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    6366:	4911      	ldr	r1, [pc, #68]	; (63ac <calendar_init+0x64>)
    6368:	4618      	mov	r0, r3
    636a:	4b11      	ldr	r3, [pc, #68]	; (63b0 <calendar_init+0x68>)
    636c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    636e:	687b      	ldr	r3, [r7, #4]
    6370:	681a      	ldr	r2, [r3, #0]
    6372:	683b      	ldr	r3, [r7, #0]
    6374:	429a      	cmp	r2, r3
    6376:	d101      	bne.n	637c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    6378:	2300      	movs	r3, #0
    637a:	e013      	b.n	63a4 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    637c:	687b      	ldr	r3, [r7, #4]
    637e:	681b      	ldr	r3, [r3, #0]
    6380:	2b00      	cmp	r3, #0
    6382:	d002      	beq.n	638a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    6384:	f06f 0311 	mvn.w	r3, #17
    6388:	e00c      	b.n	63a4 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    638a:	687b      	ldr	r3, [r7, #4]
    638c:	683a      	ldr	r2, [r7, #0]
    638e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    6390:	687b      	ldr	r3, [r7, #4]
    6392:	4618      	mov	r0, r3
    6394:	4b07      	ldr	r3, [pc, #28]	; (63b4 <calendar_init+0x6c>)
    6396:	4798      	blx	r3
    6398:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    639a:	687b      	ldr	r3, [r7, #4]
    639c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    63a0:	619a      	str	r2, [r3, #24]

	return ret;
    63a2:	68fb      	ldr	r3, [r7, #12]
}
    63a4:	4618      	mov	r0, r3
    63a6:	3710      	adds	r7, #16
    63a8:	46bd      	mov	sp, r7
    63aa:	bd80      	pop	{r7, pc}
    63ac:	00020a04 	.word	0x00020a04
    63b0:	000080d1 	.word	0x000080d1
    63b4:	0000aa0d 	.word	0x0000aa0d

000063b8 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    63b8:	b580      	push	{r7, lr}
    63ba:	b082      	sub	sp, #8
    63bc:	af00      	add	r7, sp, #0
    63be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    63c0:	687b      	ldr	r3, [r7, #4]
    63c2:	2b00      	cmp	r3, #0
    63c4:	bf14      	ite	ne
    63c6:	2301      	movne	r3, #1
    63c8:	2300      	moveq	r3, #0
    63ca:	b2db      	uxtb	r3, r3
    63cc:	f240 12e5 	movw	r2, #485	; 0x1e5
    63d0:	4906      	ldr	r1, [pc, #24]	; (63ec <calendar_enable+0x34>)
    63d2:	4618      	mov	r0, r3
    63d4:	4b06      	ldr	r3, [pc, #24]	; (63f0 <calendar_enable+0x38>)
    63d6:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    63d8:	687b      	ldr	r3, [r7, #4]
    63da:	4618      	mov	r0, r3
    63dc:	4b05      	ldr	r3, [pc, #20]	; (63f4 <calendar_enable+0x3c>)
    63de:	4798      	blx	r3

	return ERR_NONE;
    63e0:	2300      	movs	r3, #0
}
    63e2:	4618      	mov	r0, r3
    63e4:	3708      	adds	r7, #8
    63e6:	46bd      	mov	sp, r7
    63e8:	bd80      	pop	{r7, pc}
    63ea:	bf00      	nop
    63ec:	00020a04 	.word	0x00020a04
    63f0:	000080d1 	.word	0x000080d1
    63f4:	0000aac5 	.word	0x0000aac5

000063f8 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    63f8:	b580      	push	{r7, lr}
    63fa:	b086      	sub	sp, #24
    63fc:	af00      	add	r7, sp, #0
    63fe:	6078      	str	r0, [r7, #4]
    6400:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    6402:	687b      	ldr	r3, [r7, #4]
    6404:	2b00      	cmp	r3, #0
    6406:	bf14      	ite	ne
    6408:	2301      	movne	r3, #1
    640a:	2300      	moveq	r3, #0
    640c:	b2db      	uxtb	r3, r3
    640e:	f44f 7203 	mov.w	r2, #524	; 0x20c
    6412:	4915      	ldr	r1, [pc, #84]	; (6468 <calendar_set_time+0x70>)
    6414:	4618      	mov	r0, r3
    6416:	4b15      	ldr	r3, [pc, #84]	; (646c <calendar_set_time+0x74>)
    6418:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	4618      	mov	r0, r3
    641e:	4b14      	ldr	r3, [pc, #80]	; (6470 <calendar_set_time+0x78>)
    6420:	4798      	blx	r3
    6422:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    6424:	f107 0308 	add.w	r3, r7, #8
    6428:	461a      	mov	r2, r3
    642a:	6979      	ldr	r1, [r7, #20]
    642c:	6878      	ldr	r0, [r7, #4]
    642e:	4b11      	ldr	r3, [pc, #68]	; (6474 <calendar_set_time+0x7c>)
    6430:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    6432:	683b      	ldr	r3, [r7, #0]
    6434:	781b      	ldrb	r3, [r3, #0]
    6436:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    6438:	683b      	ldr	r3, [r7, #0]
    643a:	785b      	ldrb	r3, [r3, #1]
    643c:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    643e:	683b      	ldr	r3, [r7, #0]
    6440:	789b      	ldrb	r3, [r3, #2]
    6442:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    6444:	f107 0308 	add.w	r3, r7, #8
    6448:	4619      	mov	r1, r3
    644a:	6878      	ldr	r0, [r7, #4]
    644c:	4b0a      	ldr	r3, [pc, #40]	; (6478 <calendar_set_time+0x80>)
    644e:	4798      	blx	r3
    6450:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    6452:	687b      	ldr	r3, [r7, #4]
    6454:	6939      	ldr	r1, [r7, #16]
    6456:	4618      	mov	r0, r3
    6458:	4b08      	ldr	r3, [pc, #32]	; (647c <calendar_set_time+0x84>)
    645a:	4798      	blx	r3

	return ERR_NONE;
    645c:	2300      	movs	r3, #0
}
    645e:	4618      	mov	r0, r3
    6460:	3718      	adds	r7, #24
    6462:	46bd      	mov	sp, r7
    6464:	bd80      	pop	{r7, pc}
    6466:	bf00      	nop
    6468:	00020a04 	.word	0x00020a04
    646c:	000080d1 	.word	0x000080d1
    6470:	0000ab61 	.word	0x0000ab61
    6474:	00006131 	.word	0x00006131
    6478:	0000623d 	.word	0x0000623d
    647c:	0000ab11 	.word	0x0000ab11

00006480 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    6480:	b580      	push	{r7, lr}
    6482:	b086      	sub	sp, #24
    6484:	af00      	add	r7, sp, #0
    6486:	6078      	str	r0, [r7, #4]
    6488:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    648a:	687b      	ldr	r3, [r7, #4]
    648c:	2b00      	cmp	r3, #0
    648e:	bf14      	ite	ne
    6490:	2301      	movne	r3, #1
    6492:	2300      	moveq	r3, #0
    6494:	b2db      	uxtb	r3, r3
    6496:	f44f 7209 	mov.w	r2, #548	; 0x224
    649a:	4915      	ldr	r1, [pc, #84]	; (64f0 <calendar_set_date+0x70>)
    649c:	4618      	mov	r0, r3
    649e:	4b15      	ldr	r3, [pc, #84]	; (64f4 <calendar_set_date+0x74>)
    64a0:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    64a2:	687b      	ldr	r3, [r7, #4]
    64a4:	4618      	mov	r0, r3
    64a6:	4b14      	ldr	r3, [pc, #80]	; (64f8 <calendar_set_date+0x78>)
    64a8:	4798      	blx	r3
    64aa:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    64ac:	f107 0308 	add.w	r3, r7, #8
    64b0:	461a      	mov	r2, r3
    64b2:	6979      	ldr	r1, [r7, #20]
    64b4:	6878      	ldr	r0, [r7, #4]
    64b6:	4b11      	ldr	r3, [pc, #68]	; (64fc <calendar_set_date+0x7c>)
    64b8:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    64ba:	683b      	ldr	r3, [r7, #0]
    64bc:	781b      	ldrb	r3, [r3, #0]
    64be:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    64c0:	683b      	ldr	r3, [r7, #0]
    64c2:	785b      	ldrb	r3, [r3, #1]
    64c4:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    64c6:	683b      	ldr	r3, [r7, #0]
    64c8:	885b      	ldrh	r3, [r3, #2]
    64ca:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    64cc:	f107 0308 	add.w	r3, r7, #8
    64d0:	4619      	mov	r1, r3
    64d2:	6878      	ldr	r0, [r7, #4]
    64d4:	4b0a      	ldr	r3, [pc, #40]	; (6500 <calendar_set_date+0x80>)
    64d6:	4798      	blx	r3
    64d8:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    64da:	687b      	ldr	r3, [r7, #4]
    64dc:	6939      	ldr	r1, [r7, #16]
    64de:	4618      	mov	r0, r3
    64e0:	4b08      	ldr	r3, [pc, #32]	; (6504 <calendar_set_date+0x84>)
    64e2:	4798      	blx	r3

	return ERR_NONE;
    64e4:	2300      	movs	r3, #0
}
    64e6:	4618      	mov	r0, r3
    64e8:	3718      	adds	r7, #24
    64ea:	46bd      	mov	sp, r7
    64ec:	bd80      	pop	{r7, pc}
    64ee:	bf00      	nop
    64f0:	00020a04 	.word	0x00020a04
    64f4:	000080d1 	.word	0x000080d1
    64f8:	0000ab61 	.word	0x0000ab61
    64fc:	00006131 	.word	0x00006131
    6500:	0000623d 	.word	0x0000623d
    6504:	0000ab11 	.word	0x0000ab11

00006508 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    6508:	b580      	push	{r7, lr}
    650a:	b084      	sub	sp, #16
    650c:	af00      	add	r7, sp, #0
    650e:	6078      	str	r0, [r7, #4]
    6510:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    6512:	687b      	ldr	r3, [r7, #4]
    6514:	2b00      	cmp	r3, #0
    6516:	bf14      	ite	ne
    6518:	2301      	movne	r3, #1
    651a:	2300      	moveq	r3, #0
    651c:	b2db      	uxtb	r3, r3
    651e:	f240 223b 	movw	r2, #571	; 0x23b
    6522:	4909      	ldr	r1, [pc, #36]	; (6548 <calendar_get_date_time+0x40>)
    6524:	4618      	mov	r0, r3
    6526:	4b09      	ldr	r3, [pc, #36]	; (654c <calendar_get_date_time+0x44>)
    6528:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	4618      	mov	r0, r3
    652e:	4b08      	ldr	r3, [pc, #32]	; (6550 <calendar_get_date_time+0x48>)
    6530:	4798      	blx	r3
    6532:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    6534:	683a      	ldr	r2, [r7, #0]
    6536:	68f9      	ldr	r1, [r7, #12]
    6538:	6878      	ldr	r0, [r7, #4]
    653a:	4b06      	ldr	r3, [pc, #24]	; (6554 <calendar_get_date_time+0x4c>)
    653c:	4798      	blx	r3

	return ERR_NONE;
    653e:	2300      	movs	r3, #0
}
    6540:	4618      	mov	r0, r3
    6542:	3710      	adds	r7, #16
    6544:	46bd      	mov	sp, r7
    6546:	bd80      	pop	{r7, pc}
    6548:	00020a04 	.word	0x00020a04
    654c:	000080d1 	.word	0x000080d1
    6550:	0000ab61 	.word	0x0000ab61
    6554:	00006131 	.word	0x00006131

00006558 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    6558:	b580      	push	{r7, lr}
    655a:	b084      	sub	sp, #16
    655c:	af00      	add	r7, sp, #0
    655e:	6078      	str	r0, [r7, #4]
    6560:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    6562:	687b      	ldr	r3, [r7, #4]
    6564:	2b00      	cmp	r3, #0
    6566:	d004      	beq.n	6572 <can_async_init+0x1a>
    6568:	683b      	ldr	r3, [r7, #0]
    656a:	2b00      	cmp	r3, #0
    656c:	d001      	beq.n	6572 <can_async_init+0x1a>
    656e:	2301      	movs	r3, #1
    6570:	e000      	b.n	6574 <can_async_init+0x1c>
    6572:	2300      	movs	r3, #0
    6574:	f003 0301 	and.w	r3, r3, #1
    6578:	b2db      	uxtb	r3, r3
    657a:	2241      	movs	r2, #65	; 0x41
    657c:	490e      	ldr	r1, [pc, #56]	; (65b8 <can_async_init+0x60>)
    657e:	4618      	mov	r0, r3
    6580:	4b0e      	ldr	r3, [pc, #56]	; (65bc <can_async_init+0x64>)
    6582:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    6584:	687b      	ldr	r3, [r7, #4]
    6586:	6839      	ldr	r1, [r7, #0]
    6588:	4618      	mov	r0, r3
    658a:	4b0d      	ldr	r3, [pc, #52]	; (65c0 <can_async_init+0x68>)
    658c:	4798      	blx	r3
    658e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    6590:	68fb      	ldr	r3, [r7, #12]
    6592:	2b00      	cmp	r3, #0
    6594:	d001      	beq.n	659a <can_async_init+0x42>
		return rc;
    6596:	68fb      	ldr	r3, [r7, #12]
    6598:	e009      	b.n	65ae <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    659a:	687b      	ldr	r3, [r7, #4]
    659c:	4a09      	ldr	r2, [pc, #36]	; (65c4 <can_async_init+0x6c>)
    659e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    65a0:	687b      	ldr	r3, [r7, #4]
    65a2:	4a09      	ldr	r2, [pc, #36]	; (65c8 <can_async_init+0x70>)
    65a4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    65a6:	687b      	ldr	r3, [r7, #4]
    65a8:	4a08      	ldr	r2, [pc, #32]	; (65cc <can_async_init+0x74>)
    65aa:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    65ac:	2300      	movs	r3, #0
}
    65ae:	4618      	mov	r0, r3
    65b0:	3710      	adds	r7, #16
    65b2:	46bd      	mov	sp, r7
    65b4:	bd80      	pop	{r7, pc}
    65b6:	bf00      	nop
    65b8:	00020a20 	.word	0x00020a20
    65bc:	000080d1 	.word	0x000080d1
    65c0:	0000862d 	.word	0x0000862d
    65c4:	000065d1 	.word	0x000065d1
    65c8:	000065f5 	.word	0x000065f5
    65cc:	00006619 	.word	0x00006619

000065d0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    65d0:	b580      	push	{r7, lr}
    65d2:	b084      	sub	sp, #16
    65d4:	af00      	add	r7, sp, #0
    65d6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    65dc:	68fb      	ldr	r3, [r7, #12]
    65de:	69db      	ldr	r3, [r3, #28]
    65e0:	2b00      	cmp	r3, #0
    65e2:	d003      	beq.n	65ec <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    65e4:	68fb      	ldr	r3, [r7, #12]
    65e6:	69db      	ldr	r3, [r3, #28]
    65e8:	68f8      	ldr	r0, [r7, #12]
    65ea:	4798      	blx	r3
	}
}
    65ec:	bf00      	nop
    65ee:	3710      	adds	r7, #16
    65f0:	46bd      	mov	sp, r7
    65f2:	bd80      	pop	{r7, pc}

000065f4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    65f4:	b580      	push	{r7, lr}
    65f6:	b084      	sub	sp, #16
    65f8:	af00      	add	r7, sp, #0
    65fa:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    65fc:	687b      	ldr	r3, [r7, #4]
    65fe:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    6600:	68fb      	ldr	r3, [r7, #12]
    6602:	6a1b      	ldr	r3, [r3, #32]
    6604:	2b00      	cmp	r3, #0
    6606:	d003      	beq.n	6610 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    6608:	68fb      	ldr	r3, [r7, #12]
    660a:	6a1b      	ldr	r3, [r3, #32]
    660c:	68f8      	ldr	r0, [r7, #12]
    660e:	4798      	blx	r3
	}
}
    6610:	bf00      	nop
    6612:	3710      	adds	r7, #16
    6614:	46bd      	mov	sp, r7
    6616:	bd80      	pop	{r7, pc}

00006618 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    6618:	b580      	push	{r7, lr}
    661a:	b084      	sub	sp, #16
    661c:	af00      	add	r7, sp, #0
    661e:	6078      	str	r0, [r7, #4]
    6620:	460b      	mov	r3, r1
    6622:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    6624:	687b      	ldr	r3, [r7, #4]
    6626:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    6628:	68fb      	ldr	r3, [r7, #12]
    662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    662c:	2b00      	cmp	r3, #0
    662e:	d005      	beq.n	663c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    6630:	68fb      	ldr	r3, [r7, #12]
    6632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6634:	78fa      	ldrb	r2, [r7, #3]
    6636:	4611      	mov	r1, r2
    6638:	68f8      	ldr	r0, [r7, #12]
    663a:	4798      	blx	r3
	}
}
    663c:	bf00      	nop
    663e:	3710      	adds	r7, #16
    6640:	46bd      	mov	sp, r7
    6642:	bd80      	pop	{r7, pc}

00006644 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    6644:	b580      	push	{r7, lr}
    6646:	b082      	sub	sp, #8
    6648:	af00      	add	r7, sp, #0
    664a:	6078      	str	r0, [r7, #4]
    664c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    664e:	687b      	ldr	r3, [r7, #4]
    6650:	2b00      	cmp	r3, #0
    6652:	d004      	beq.n	665e <crc_sync_init+0x1a>
    6654:	683b      	ldr	r3, [r7, #0]
    6656:	2b00      	cmp	r3, #0
    6658:	d001      	beq.n	665e <crc_sync_init+0x1a>
    665a:	2301      	movs	r3, #1
    665c:	e000      	b.n	6660 <crc_sync_init+0x1c>
    665e:	2300      	movs	r3, #0
    6660:	f003 0301 	and.w	r3, r3, #1
    6664:	b2db      	uxtb	r3, r3
    6666:	222b      	movs	r2, #43	; 0x2b
    6668:	4906      	ldr	r1, [pc, #24]	; (6684 <crc_sync_init+0x40>)
    666a:	4618      	mov	r0, r3
    666c:	4b06      	ldr	r3, [pc, #24]	; (6688 <crc_sync_init+0x44>)
    666e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    6670:	687b      	ldr	r3, [r7, #4]
    6672:	6839      	ldr	r1, [r7, #0]
    6674:	4618      	mov	r0, r3
    6676:	4b05      	ldr	r3, [pc, #20]	; (668c <crc_sync_init+0x48>)
    6678:	4798      	blx	r3
    667a:	4603      	mov	r3, r0
}
    667c:	4618      	mov	r0, r3
    667e:	3708      	adds	r7, #8
    6680:	46bd      	mov	sp, r7
    6682:	bd80      	pop	{r7, pc}
    6684:	00020a3c 	.word	0x00020a3c
    6688:	000080d1 	.word	0x000080d1
    668c:	00008e59 	.word	0x00008e59

00006690 <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    6690:	b580      	push	{r7, lr}
    6692:	b082      	sub	sp, #8
    6694:	af00      	add	r7, sp, #0
    6696:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    6698:	687b      	ldr	r3, [r7, #4]
    669a:	2b00      	cmp	r3, #0
    669c:	bf14      	ite	ne
    669e:	2301      	movne	r3, #1
    66a0:	2300      	moveq	r3, #0
    66a2:	b2db      	uxtb	r3, r3
    66a4:	223f      	movs	r2, #63	; 0x3f
    66a6:	4906      	ldr	r1, [pc, #24]	; (66c0 <crc_sync_enable+0x30>)
    66a8:	4618      	mov	r0, r3
    66aa:	4b06      	ldr	r3, [pc, #24]	; (66c4 <crc_sync_enable+0x34>)
    66ac:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    66ae:	687b      	ldr	r3, [r7, #4]
    66b0:	4618      	mov	r0, r3
    66b2:	4b05      	ldr	r3, [pc, #20]	; (66c8 <crc_sync_enable+0x38>)
    66b4:	4798      	blx	r3
    66b6:	4603      	mov	r3, r0
}
    66b8:	4618      	mov	r0, r3
    66ba:	3708      	adds	r7, #8
    66bc:	46bd      	mov	sp, r7
    66be:	bd80      	pop	{r7, pc}
    66c0:	00020a3c 	.word	0x00020a3c
    66c4:	000080d1 	.word	0x000080d1
    66c8:	00008e77 	.word	0x00008e77

000066cc <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    66cc:	b590      	push	{r4, r7, lr}
    66ce:	b085      	sub	sp, #20
    66d0:	af00      	add	r7, sp, #0
    66d2:	60f8      	str	r0, [r7, #12]
    66d4:	60b9      	str	r1, [r7, #8]
    66d6:	607a      	str	r2, [r7, #4]
    66d8:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    66da:	68fb      	ldr	r3, [r7, #12]
    66dc:	2b00      	cmp	r3, #0
    66de:	d00a      	beq.n	66f6 <crc_sync_crc32+0x2a>
    66e0:	68bb      	ldr	r3, [r7, #8]
    66e2:	2b00      	cmp	r3, #0
    66e4:	d007      	beq.n	66f6 <crc_sync_crc32+0x2a>
    66e6:	687b      	ldr	r3, [r7, #4]
    66e8:	2b00      	cmp	r3, #0
    66ea:	d004      	beq.n	66f6 <crc_sync_crc32+0x2a>
    66ec:	683b      	ldr	r3, [r7, #0]
    66ee:	2b00      	cmp	r3, #0
    66f0:	d001      	beq.n	66f6 <crc_sync_crc32+0x2a>
    66f2:	2301      	movs	r3, #1
    66f4:	e000      	b.n	66f8 <crc_sync_crc32+0x2c>
    66f6:	2300      	movs	r3, #0
    66f8:	f003 0301 	and.w	r3, r3, #1
    66fc:	b2db      	uxtb	r3, r3
    66fe:	2253      	movs	r2, #83	; 0x53
    6700:	4907      	ldr	r1, [pc, #28]	; (6720 <crc_sync_crc32+0x54>)
    6702:	4618      	mov	r0, r3
    6704:	4b07      	ldr	r3, [pc, #28]	; (6724 <crc_sync_crc32+0x58>)
    6706:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    6708:	68f8      	ldr	r0, [r7, #12]
    670a:	683b      	ldr	r3, [r7, #0]
    670c:	687a      	ldr	r2, [r7, #4]
    670e:	68b9      	ldr	r1, [r7, #8]
    6710:	4c05      	ldr	r4, [pc, #20]	; (6728 <crc_sync_crc32+0x5c>)
    6712:	47a0      	blx	r4
    6714:	4603      	mov	r3, r0
}
    6716:	4618      	mov	r0, r3
    6718:	3714      	adds	r7, #20
    671a:	46bd      	mov	sp, r7
    671c:	bd90      	pop	{r4, r7, pc}
    671e:	bf00      	nop
    6720:	00020a3c 	.word	0x00020a3c
    6724:	000080d1 	.word	0x000080d1
    6728:	00008e8d 	.word	0x00008e8d

0000672c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    672c:	b590      	push	{r4, r7, lr}
    672e:	b083      	sub	sp, #12
    6730:	af00      	add	r7, sp, #0
    6732:	4603      	mov	r3, r0
    6734:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    6736:	4b07      	ldr	r3, [pc, #28]	; (6754 <delay_us+0x28>)
    6738:	681c      	ldr	r4, [r3, #0]
    673a:	88fb      	ldrh	r3, [r7, #6]
    673c:	4618      	mov	r0, r3
    673e:	4b06      	ldr	r3, [pc, #24]	; (6758 <delay_us+0x2c>)
    6740:	4798      	blx	r3
    6742:	4603      	mov	r3, r0
    6744:	4619      	mov	r1, r3
    6746:	4620      	mov	r0, r4
    6748:	4b04      	ldr	r3, [pc, #16]	; (675c <delay_us+0x30>)
    674a:	4798      	blx	r3
}
    674c:	bf00      	nop
    674e:	370c      	adds	r7, #12
    6750:	46bd      	mov	sp, r7
    6752:	bd90      	pop	{r4, r7, pc}
    6754:	20008734 	.word	0x20008734
    6758:	00008a85 	.word	0x00008a85
    675c:	00008c19 	.word	0x00008c19

00006760 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    6760:	b590      	push	{r4, r7, lr}
    6762:	b083      	sub	sp, #12
    6764:	af00      	add	r7, sp, #0
    6766:	4603      	mov	r3, r0
    6768:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    676a:	4b07      	ldr	r3, [pc, #28]	; (6788 <delay_ms+0x28>)
    676c:	681c      	ldr	r4, [r3, #0]
    676e:	88fb      	ldrh	r3, [r7, #6]
    6770:	4618      	mov	r0, r3
    6772:	4b06      	ldr	r3, [pc, #24]	; (678c <delay_ms+0x2c>)
    6774:	4798      	blx	r3
    6776:	4603      	mov	r3, r0
    6778:	4619      	mov	r1, r3
    677a:	4620      	mov	r0, r4
    677c:	4b04      	ldr	r3, [pc, #16]	; (6790 <delay_ms+0x30>)
    677e:	4798      	blx	r3
}
    6780:	bf00      	nop
    6782:	370c      	adds	r7, #12
    6784:	46bd      	mov	sp, r7
    6786:	bd90      	pop	{r4, r7, pc}
    6788:	20008734 	.word	0x20008734
    678c:	00008bf1 	.word	0x00008bf1
    6790:	00008c19 	.word	0x00008c19

00006794 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    6794:	b580      	push	{r7, lr}
    6796:	af00      	add	r7, sp, #0
	return _event_system_init();
    6798:	4b02      	ldr	r3, [pc, #8]	; (67a4 <event_system_init+0x10>)
    679a:	4798      	blx	r3
    679c:	4603      	mov	r3, r0
}
    679e:	4618      	mov	r0, r3
    67a0:	bd80      	pop	{r7, pc}
    67a2:	bf00      	nop
    67a4:	00009701 	.word	0x00009701

000067a8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    67a8:	b580      	push	{r7, lr}
    67aa:	b082      	sub	sp, #8
    67ac:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    67ae:	2300      	movs	r3, #0
    67b0:	80fb      	strh	r3, [r7, #6]
    67b2:	e00e      	b.n	67d2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    67b4:	88fb      	ldrh	r3, [r7, #6]
    67b6:	4a0c      	ldr	r2, [pc, #48]	; (67e8 <ext_irq_init+0x40>)
    67b8:	00db      	lsls	r3, r3, #3
    67ba:	4413      	add	r3, r2
    67bc:	f04f 32ff 	mov.w	r2, #4294967295
    67c0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    67c2:	88fb      	ldrh	r3, [r7, #6]
    67c4:	4a08      	ldr	r2, [pc, #32]	; (67e8 <ext_irq_init+0x40>)
    67c6:	2100      	movs	r1, #0
    67c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    67cc:	88fb      	ldrh	r3, [r7, #6]
    67ce:	3301      	adds	r3, #1
    67d0:	80fb      	strh	r3, [r7, #6]
    67d2:	88fb      	ldrh	r3, [r7, #6]
    67d4:	2b06      	cmp	r3, #6
    67d6:	d9ed      	bls.n	67b4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    67d8:	4804      	ldr	r0, [pc, #16]	; (67ec <ext_irq_init+0x44>)
    67da:	4b05      	ldr	r3, [pc, #20]	; (67f0 <ext_irq_init+0x48>)
    67dc:	4798      	blx	r3
    67de:	4603      	mov	r3, r0
}
    67e0:	4618      	mov	r0, r3
    67e2:	3708      	adds	r7, #8
    67e4:	46bd      	mov	sp, r7
    67e6:	bd80      	pop	{r7, pc}
    67e8:	20008738 	.word	0x20008738
    67ec:	0000694d 	.word	0x0000694d
    67f0:	000092c9 	.word	0x000092c9

000067f4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    67f4:	b580      	push	{r7, lr}
    67f6:	b086      	sub	sp, #24
    67f8:	af00      	add	r7, sp, #0
    67fa:	6078      	str	r0, [r7, #4]
    67fc:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    67fe:	2300      	movs	r3, #0
    6800:	75fb      	strb	r3, [r7, #23]
    6802:	2300      	movs	r3, #0
    6804:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    6806:	2300      	movs	r3, #0
    6808:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    680a:	e012      	b.n	6832 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    680c:	7dfb      	ldrb	r3, [r7, #23]
    680e:	4a4d      	ldr	r2, [pc, #308]	; (6944 <ext_irq_register+0x150>)
    6810:	00db      	lsls	r3, r3, #3
    6812:	4413      	add	r3, r2
    6814:	685a      	ldr	r2, [r3, #4]
    6816:	687b      	ldr	r3, [r7, #4]
    6818:	429a      	cmp	r2, r3
    681a:	d107      	bne.n	682c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    681c:	7dfb      	ldrb	r3, [r7, #23]
    681e:	4949      	ldr	r1, [pc, #292]	; (6944 <ext_irq_register+0x150>)
    6820:	683a      	ldr	r2, [r7, #0]
    6822:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    6826:	2301      	movs	r3, #1
    6828:	757b      	strb	r3, [r7, #21]
			break;
    682a:	e005      	b.n	6838 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    682c:	7dfb      	ldrb	r3, [r7, #23]
    682e:	3301      	adds	r3, #1
    6830:	75fb      	strb	r3, [r7, #23]
    6832:	7dfb      	ldrb	r3, [r7, #23]
    6834:	2b06      	cmp	r3, #6
    6836:	d9e9      	bls.n	680c <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    6838:	683b      	ldr	r3, [r7, #0]
    683a:	2b00      	cmp	r3, #0
    683c:	d10e      	bne.n	685c <ext_irq_register+0x68>
		if (!found) {
    683e:	7d7b      	ldrb	r3, [r7, #21]
    6840:	f083 0301 	eor.w	r3, r3, #1
    6844:	b2db      	uxtb	r3, r3
    6846:	2b00      	cmp	r3, #0
    6848:	d002      	beq.n	6850 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    684a:	f06f 030c 	mvn.w	r3, #12
    684e:	e074      	b.n	693a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    6850:	2100      	movs	r1, #0
    6852:	6878      	ldr	r0, [r7, #4]
    6854:	4b3c      	ldr	r3, [pc, #240]	; (6948 <ext_irq_register+0x154>)
    6856:	4798      	blx	r3
    6858:	4603      	mov	r3, r0
    685a:	e06e      	b.n	693a <ext_irq_register+0x146>
	}

	if (!found) {
    685c:	7d7b      	ldrb	r3, [r7, #21]
    685e:	f083 0301 	eor.w	r3, r3, #1
    6862:	b2db      	uxtb	r3, r3
    6864:	2b00      	cmp	r3, #0
    6866:	d05a      	beq.n	691e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    6868:	2300      	movs	r3, #0
    686a:	75fb      	strb	r3, [r7, #23]
    686c:	e016      	b.n	689c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    686e:	7dfb      	ldrb	r3, [r7, #23]
    6870:	4a34      	ldr	r2, [pc, #208]	; (6944 <ext_irq_register+0x150>)
    6872:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    6876:	2b00      	cmp	r3, #0
    6878:	d10d      	bne.n	6896 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    687a:	7dfb      	ldrb	r3, [r7, #23]
    687c:	4931      	ldr	r1, [pc, #196]	; (6944 <ext_irq_register+0x150>)
    687e:	683a      	ldr	r2, [r7, #0]
    6880:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    6884:	7dfb      	ldrb	r3, [r7, #23]
    6886:	4a2f      	ldr	r2, [pc, #188]	; (6944 <ext_irq_register+0x150>)
    6888:	00db      	lsls	r3, r3, #3
    688a:	4413      	add	r3, r2
    688c:	687a      	ldr	r2, [r7, #4]
    688e:	605a      	str	r2, [r3, #4]
				found           = true;
    6890:	2301      	movs	r3, #1
    6892:	757b      	strb	r3, [r7, #21]
				break;
    6894:	e005      	b.n	68a2 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    6896:	7dfb      	ldrb	r3, [r7, #23]
    6898:	3301      	adds	r3, #1
    689a:	75fb      	strb	r3, [r7, #23]
    689c:	7dfb      	ldrb	r3, [r7, #23]
    689e:	2b06      	cmp	r3, #6
    68a0:	d9e5      	bls.n	686e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    68a2:	e036      	b.n	6912 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    68a4:	7dfb      	ldrb	r3, [r7, #23]
    68a6:	4a27      	ldr	r2, [pc, #156]	; (6944 <ext_irq_register+0x150>)
    68a8:	00db      	lsls	r3, r3, #3
    68aa:	4413      	add	r3, r2
    68ac:	685a      	ldr	r2, [r3, #4]
    68ae:	7dbb      	ldrb	r3, [r7, #22]
    68b0:	4924      	ldr	r1, [pc, #144]	; (6944 <ext_irq_register+0x150>)
    68b2:	00db      	lsls	r3, r3, #3
    68b4:	440b      	add	r3, r1
    68b6:	685b      	ldr	r3, [r3, #4]
    68b8:	429a      	cmp	r2, r3
    68ba:	d227      	bcs.n	690c <ext_irq_register+0x118>
    68bc:	7dbb      	ldrb	r3, [r7, #22]
    68be:	4a21      	ldr	r2, [pc, #132]	; (6944 <ext_irq_register+0x150>)
    68c0:	00db      	lsls	r3, r3, #3
    68c2:	4413      	add	r3, r2
    68c4:	685b      	ldr	r3, [r3, #4]
    68c6:	f1b3 3fff 	cmp.w	r3, #4294967295
    68ca:	d01f      	beq.n	690c <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    68cc:	7dbb      	ldrb	r3, [r7, #22]
    68ce:	491d      	ldr	r1, [pc, #116]	; (6944 <ext_irq_register+0x150>)
    68d0:	f107 020c 	add.w	r2, r7, #12
    68d4:	00db      	lsls	r3, r3, #3
    68d6:	440b      	add	r3, r1
    68d8:	e893 0003 	ldmia.w	r3, {r0, r1}
    68dc:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    68e0:	7dbb      	ldrb	r3, [r7, #22]
    68e2:	7dfa      	ldrb	r2, [r7, #23]
    68e4:	4817      	ldr	r0, [pc, #92]	; (6944 <ext_irq_register+0x150>)
    68e6:	4917      	ldr	r1, [pc, #92]	; (6944 <ext_irq_register+0x150>)
    68e8:	00db      	lsls	r3, r3, #3
    68ea:	4403      	add	r3, r0
    68ec:	00d2      	lsls	r2, r2, #3
    68ee:	440a      	add	r2, r1
    68f0:	e892 0003 	ldmia.w	r2, {r0, r1}
    68f4:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    68f8:	7dfb      	ldrb	r3, [r7, #23]
    68fa:	4a12      	ldr	r2, [pc, #72]	; (6944 <ext_irq_register+0x150>)
    68fc:	00db      	lsls	r3, r3, #3
    68fe:	4413      	add	r3, r2
    6900:	f107 020c 	add.w	r2, r7, #12
    6904:	e892 0003 	ldmia.w	r2, {r0, r1}
    6908:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    690c:	7dbb      	ldrb	r3, [r7, #22]
    690e:	3301      	adds	r3, #1
    6910:	75bb      	strb	r3, [r7, #22]
    6912:	7dbb      	ldrb	r3, [r7, #22]
    6914:	2b06      	cmp	r3, #6
    6916:	d802      	bhi.n	691e <ext_irq_register+0x12a>
    6918:	7dfb      	ldrb	r3, [r7, #23]
    691a:	2b06      	cmp	r3, #6
    691c:	d9c2      	bls.n	68a4 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    691e:	7d7b      	ldrb	r3, [r7, #21]
    6920:	f083 0301 	eor.w	r3, r3, #1
    6924:	b2db      	uxtb	r3, r3
    6926:	2b00      	cmp	r3, #0
    6928:	d002      	beq.n	6930 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    692a:	f06f 030c 	mvn.w	r3, #12
    692e:	e004      	b.n	693a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    6930:	2101      	movs	r1, #1
    6932:	6878      	ldr	r0, [r7, #4]
    6934:	4b04      	ldr	r3, [pc, #16]	; (6948 <ext_irq_register+0x154>)
    6936:	4798      	blx	r3
    6938:	4603      	mov	r3, r0
}
    693a:	4618      	mov	r0, r3
    693c:	3718      	adds	r7, #24
    693e:	46bd      	mov	sp, r7
    6940:	bd80      	pop	{r7, pc}
    6942:	bf00      	nop
    6944:	20008738 	.word	0x20008738
    6948:	00009439 	.word	0x00009439

0000694c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    694c:	b580      	push	{r7, lr}
    694e:	b084      	sub	sp, #16
    6950:	af00      	add	r7, sp, #0
    6952:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    6954:	2300      	movs	r3, #0
    6956:	73fb      	strb	r3, [r7, #15]
    6958:	2307      	movs	r3, #7
    695a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    695c:	e02a      	b.n	69b4 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    695e:	7bba      	ldrb	r2, [r7, #14]
    6960:	7bfb      	ldrb	r3, [r7, #15]
    6962:	4413      	add	r3, r2
    6964:	105b      	asrs	r3, r3, #1
    6966:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    6968:	7b7b      	ldrb	r3, [r7, #13]
    696a:	2b06      	cmp	r3, #6
    696c:	d827      	bhi.n	69be <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    696e:	7b7b      	ldrb	r3, [r7, #13]
    6970:	4a16      	ldr	r2, [pc, #88]	; (69cc <process_ext_irq+0x80>)
    6972:	00db      	lsls	r3, r3, #3
    6974:	4413      	add	r3, r2
    6976:	685a      	ldr	r2, [r3, #4]
    6978:	687b      	ldr	r3, [r7, #4]
    697a:	429a      	cmp	r2, r3
    697c:	d10b      	bne.n	6996 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    697e:	7b7b      	ldrb	r3, [r7, #13]
    6980:	4a12      	ldr	r2, [pc, #72]	; (69cc <process_ext_irq+0x80>)
    6982:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    6986:	2b00      	cmp	r3, #0
    6988:	d01b      	beq.n	69c2 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    698a:	7b7b      	ldrb	r3, [r7, #13]
    698c:	4a0f      	ldr	r2, [pc, #60]	; (69cc <process_ext_irq+0x80>)
    698e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    6992:	4798      	blx	r3
			}
			return;
    6994:	e015      	b.n	69c2 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    6996:	7b7b      	ldrb	r3, [r7, #13]
    6998:	4a0c      	ldr	r2, [pc, #48]	; (69cc <process_ext_irq+0x80>)
    699a:	00db      	lsls	r3, r3, #3
    699c:	4413      	add	r3, r2
    699e:	685a      	ldr	r2, [r3, #4]
    69a0:	687b      	ldr	r3, [r7, #4]
    69a2:	429a      	cmp	r2, r3
    69a4:	d203      	bcs.n	69ae <process_ext_irq+0x62>
			lower = middle + 1;
    69a6:	7b7b      	ldrb	r3, [r7, #13]
    69a8:	3301      	adds	r3, #1
    69aa:	73fb      	strb	r3, [r7, #15]
    69ac:	e002      	b.n	69b4 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    69ae:	7b7b      	ldrb	r3, [r7, #13]
    69b0:	3b01      	subs	r3, #1
    69b2:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    69b4:	7bba      	ldrb	r2, [r7, #14]
    69b6:	7bfb      	ldrb	r3, [r7, #15]
    69b8:	429a      	cmp	r2, r3
    69ba:	d2d0      	bcs.n	695e <process_ext_irq+0x12>
    69bc:	e002      	b.n	69c4 <process_ext_irq+0x78>
			return;
    69be:	bf00      	nop
    69c0:	e000      	b.n	69c4 <process_ext_irq+0x78>
			return;
    69c2:	bf00      	nop
		}
	}
}
    69c4:	3710      	adds	r7, #16
    69c6:	46bd      	mov	sp, r7
    69c8:	bd80      	pop	{r7, pc}
    69ca:	bf00      	nop
    69cc:	20008738 	.word	0x20008738

000069d0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    69d0:	b580      	push	{r7, lr}
    69d2:	b084      	sub	sp, #16
    69d4:	af00      	add	r7, sp, #0
    69d6:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    69d8:	687b      	ldr	r3, [r7, #4]
    69da:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    69dc:	687b      	ldr	r3, [r7, #4]
    69de:	885b      	ldrh	r3, [r3, #2]
    69e0:	b29b      	uxth	r3, r3
    69e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    69e6:	2b00      	cmp	r3, #0
    69e8:	d107      	bne.n	69fa <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    69ea:	68fb      	ldr	r3, [r7, #12]
    69ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    69ee:	2b00      	cmp	r3, #0
    69f0:	d003      	beq.n	69fa <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    69f2:	68fb      	ldr	r3, [r7, #12]
    69f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    69f6:	68f8      	ldr	r0, [r7, #12]
    69f8:	4798      	blx	r3
		}
	}
}
    69fa:	bf00      	nop
    69fc:	3710      	adds	r7, #16
    69fe:	46bd      	mov	sp, r7
    6a00:	bd80      	pop	{r7, pc}

00006a02 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    6a02:	b580      	push	{r7, lr}
    6a04:	b084      	sub	sp, #16
    6a06:	af00      	add	r7, sp, #0
    6a08:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    6a0a:	687b      	ldr	r3, [r7, #4]
    6a0c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    6a0e:	687b      	ldr	r3, [r7, #4]
    6a10:	885b      	ldrh	r3, [r3, #2]
    6a12:	b29b      	uxth	r3, r3
    6a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d107      	bne.n	6a2c <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    6a1c:	68fb      	ldr	r3, [r7, #12]
    6a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6a20:	2b00      	cmp	r3, #0
    6a22:	d003      	beq.n	6a2c <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    6a24:	68fb      	ldr	r3, [r7, #12]
    6a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6a28:	68f8      	ldr	r0, [r7, #12]
    6a2a:	4798      	blx	r3
		}
	}
}
    6a2c:	bf00      	nop
    6a2e:	3710      	adds	r7, #16
    6a30:	46bd      	mov	sp, r7
    6a32:	bd80      	pop	{r7, pc}

00006a34 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    6a34:	b580      	push	{r7, lr}
    6a36:	b084      	sub	sp, #16
    6a38:	af00      	add	r7, sp, #0
    6a3a:	6078      	str	r0, [r7, #4]
    6a3c:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    6a3e:	687b      	ldr	r3, [r7, #4]
    6a40:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    6a42:	687b      	ldr	r3, [r7, #4]
    6a44:	885b      	ldrh	r3, [r3, #2]
    6a46:	b29b      	uxth	r3, r3
    6a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6a4c:	2b00      	cmp	r3, #0
    6a4e:	d108      	bne.n	6a62 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    6a50:	68fb      	ldr	r3, [r7, #12]
    6a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6a54:	2b00      	cmp	r3, #0
    6a56:	d004      	beq.n	6a62 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    6a58:	68fb      	ldr	r3, [r7, #12]
    6a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6a5c:	6839      	ldr	r1, [r7, #0]
    6a5e:	68f8      	ldr	r0, [r7, #12]
    6a60:	4798      	blx	r3
		}
	}
}
    6a62:	bf00      	nop
    6a64:	3710      	adds	r7, #16
    6a66:	46bd      	mov	sp, r7
    6a68:	bd80      	pop	{r7, pc}
	...

00006a6c <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    6a6c:	b580      	push	{r7, lr}
    6a6e:	b08a      	sub	sp, #40	; 0x28
    6a70:	af00      	add	r7, sp, #0
    6a72:	60f8      	str	r0, [r7, #12]
    6a74:	60b9      	str	r1, [r7, #8]
    6a76:	4613      	mov	r3, r2
    6a78:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    6a7a:	68fb      	ldr	r3, [r7, #12]
    6a7c:	3b28      	subs	r3, #40	; 0x28
    6a7e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    6a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a82:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    6a84:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6a86:	88fb      	ldrh	r3, [r7, #6]
    6a88:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    6a8a:	f248 0301 	movw	r3, #32769	; 0x8001
    6a8e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    6a90:	68bb      	ldr	r3, [r7, #8]
    6a92:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    6a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a96:	f107 0214 	add.w	r2, r7, #20
    6a9a:	4611      	mov	r1, r2
    6a9c:	4618      	mov	r0, r3
    6a9e:	4b06      	ldr	r3, [pc, #24]	; (6ab8 <i2c_m_async_read+0x4c>)
    6aa0:	4798      	blx	r3
    6aa2:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    6aa4:	6a3b      	ldr	r3, [r7, #32]
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d001      	beq.n	6aae <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    6aaa:	6a3b      	ldr	r3, [r7, #32]
    6aac:	e000      	b.n	6ab0 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    6aae:	88fb      	ldrh	r3, [r7, #6]
}
    6ab0:	4618      	mov	r0, r3
    6ab2:	3728      	adds	r7, #40	; 0x28
    6ab4:	46bd      	mov	sp, r7
    6ab6:	bd80      	pop	{r7, pc}
    6ab8:	0000ba2d 	.word	0x0000ba2d

00006abc <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    6abc:	b580      	push	{r7, lr}
    6abe:	b08a      	sub	sp, #40	; 0x28
    6ac0:	af00      	add	r7, sp, #0
    6ac2:	60f8      	str	r0, [r7, #12]
    6ac4:	60b9      	str	r1, [r7, #8]
    6ac6:	4613      	mov	r3, r2
    6ac8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    6aca:	68fb      	ldr	r3, [r7, #12]
    6acc:	3b28      	subs	r3, #40	; 0x28
    6ace:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    6ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ad2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    6ad4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6ad6:	88fb      	ldrh	r3, [r7, #6]
    6ad8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    6ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6ade:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6ae0:	68bb      	ldr	r3, [r7, #8]
    6ae2:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    6ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ae6:	f107 0214 	add.w	r2, r7, #20
    6aea:	4611      	mov	r1, r2
    6aec:	4618      	mov	r0, r3
    6aee:	4b06      	ldr	r3, [pc, #24]	; (6b08 <i2c_m_async_write+0x4c>)
    6af0:	4798      	blx	r3
    6af2:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    6af4:	6a3b      	ldr	r3, [r7, #32]
    6af6:	2b00      	cmp	r3, #0
    6af8:	d001      	beq.n	6afe <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    6afa:	6a3b      	ldr	r3, [r7, #32]
    6afc:	e000      	b.n	6b00 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    6afe:	88fb      	ldrh	r3, [r7, #6]
}
    6b00:	4618      	mov	r0, r3
    6b02:	3728      	adds	r7, #40	; 0x28
    6b04:	46bd      	mov	sp, r7
    6b06:	bd80      	pop	{r7, pc}
    6b08:	0000ba2d 	.word	0x0000ba2d

00006b0c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    6b0c:	b580      	push	{r7, lr}
    6b0e:	b084      	sub	sp, #16
    6b10:	af00      	add	r7, sp, #0
    6b12:	6078      	str	r0, [r7, #4]
    6b14:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    6b16:	687b      	ldr	r3, [r7, #4]
    6b18:	2b00      	cmp	r3, #0
    6b1a:	bf14      	ite	ne
    6b1c:	2301      	movne	r3, #1
    6b1e:	2300      	moveq	r3, #0
    6b20:	b2db      	uxtb	r3, r3
    6b22:	2289      	movs	r2, #137	; 0x89
    6b24:	4915      	ldr	r1, [pc, #84]	; (6b7c <i2c_m_async_init+0x70>)
    6b26:	4618      	mov	r0, r3
    6b28:	4b15      	ldr	r3, [pc, #84]	; (6b80 <i2c_m_async_init+0x74>)
    6b2a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    6b2c:	687b      	ldr	r3, [r7, #4]
    6b2e:	6839      	ldr	r1, [r7, #0]
    6b30:	4618      	mov	r0, r3
    6b32:	4b14      	ldr	r3, [pc, #80]	; (6b84 <i2c_m_async_init+0x78>)
    6b34:	4798      	blx	r3
    6b36:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6b38:	68fb      	ldr	r3, [r7, #12]
    6b3a:	2b00      	cmp	r3, #0
    6b3c:	d001      	beq.n	6b42 <i2c_m_async_init+0x36>
		return init_status;
    6b3e:	68fb      	ldr	r3, [r7, #12]
    6b40:	e018      	b.n	6b74 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	4a10      	ldr	r2, [pc, #64]	; (6b88 <i2c_m_async_init+0x7c>)
    6b46:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    6b48:	687b      	ldr	r3, [r7, #4]
    6b4a:	4a10      	ldr	r2, [pc, #64]	; (6b8c <i2c_m_async_init+0x80>)
    6b4c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    6b4e:	687b      	ldr	r3, [r7, #4]
    6b50:	4a0f      	ldr	r2, [pc, #60]	; (6b90 <i2c_m_async_init+0x84>)
    6b52:	2101      	movs	r1, #1
    6b54:	4618      	mov	r0, r3
    6b56:	4b0f      	ldr	r3, [pc, #60]	; (6b94 <i2c_m_async_init+0x88>)
    6b58:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    6b5a:	687b      	ldr	r3, [r7, #4]
    6b5c:	4a0e      	ldr	r2, [pc, #56]	; (6b98 <i2c_m_async_init+0x8c>)
    6b5e:	2102      	movs	r1, #2
    6b60:	4618      	mov	r0, r3
    6b62:	4b0c      	ldr	r3, [pc, #48]	; (6b94 <i2c_m_async_init+0x88>)
    6b64:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	4a0c      	ldr	r2, [pc, #48]	; (6b9c <i2c_m_async_init+0x90>)
    6b6a:	2100      	movs	r1, #0
    6b6c:	4618      	mov	r0, r3
    6b6e:	4b09      	ldr	r3, [pc, #36]	; (6b94 <i2c_m_async_init+0x88>)
    6b70:	4798      	blx	r3

	return ERR_NONE;
    6b72:	2300      	movs	r3, #0
}
    6b74:	4618      	mov	r0, r3
    6b76:	3710      	adds	r7, #16
    6b78:	46bd      	mov	sp, r7
    6b7a:	bd80      	pop	{r7, pc}
    6b7c:	00020a58 	.word	0x00020a58
    6b80:	000080d1 	.word	0x000080d1
    6b84:	0000b87d 	.word	0x0000b87d
    6b88:	00006a6d 	.word	0x00006a6d
    6b8c:	00006abd 	.word	0x00006abd
    6b90:	000069d1 	.word	0x000069d1
    6b94:	0000bb01 	.word	0x0000bb01
    6b98:	00006a03 	.word	0x00006a03
    6b9c:	00006a35 	.word	0x00006a35

00006ba0 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    6ba0:	b580      	push	{r7, lr}
    6ba2:	b084      	sub	sp, #16
    6ba4:	af00      	add	r7, sp, #0
    6ba6:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    6ba8:	687b      	ldr	r3, [r7, #4]
    6baa:	2b00      	cmp	r3, #0
    6bac:	bf14      	ite	ne
    6bae:	2301      	movne	r3, #1
    6bb0:	2300      	moveq	r3, #0
    6bb2:	b2db      	uxtb	r3, r3
    6bb4:	22b9      	movs	r2, #185	; 0xb9
    6bb6:	4911      	ldr	r1, [pc, #68]	; (6bfc <i2c_m_async_enable+0x5c>)
    6bb8:	4618      	mov	r0, r3
    6bba:	4b11      	ldr	r3, [pc, #68]	; (6c00 <i2c_m_async_enable+0x60>)
    6bbc:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    6bbe:	687b      	ldr	r3, [r7, #4]
    6bc0:	4618      	mov	r0, r3
    6bc2:	4b10      	ldr	r3, [pc, #64]	; (6c04 <i2c_m_async_enable+0x64>)
    6bc4:	4798      	blx	r3
    6bc6:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    6bc8:	68fb      	ldr	r3, [r7, #12]
    6bca:	2b00      	cmp	r3, #0
    6bcc:	d111      	bne.n	6bf2 <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	2201      	movs	r2, #1
    6bd2:	2101      	movs	r1, #1
    6bd4:	4618      	mov	r0, r3
    6bd6:	4b0c      	ldr	r3, [pc, #48]	; (6c08 <i2c_m_async_enable+0x68>)
    6bd8:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    6bda:	687b      	ldr	r3, [r7, #4]
    6bdc:	2201      	movs	r2, #1
    6bde:	2102      	movs	r1, #2
    6be0:	4618      	mov	r0, r3
    6be2:	4b09      	ldr	r3, [pc, #36]	; (6c08 <i2c_m_async_enable+0x68>)
    6be4:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	2201      	movs	r2, #1
    6bea:	2100      	movs	r1, #0
    6bec:	4618      	mov	r0, r3
    6bee:	4b06      	ldr	r3, [pc, #24]	; (6c08 <i2c_m_async_enable+0x68>)
    6bf0:	4798      	blx	r3
	}
	return rc;
    6bf2:	68fb      	ldr	r3, [r7, #12]
}
    6bf4:	4618      	mov	r0, r3
    6bf6:	3710      	adds	r7, #16
    6bf8:	46bd      	mov	sp, r7
    6bfa:	bd80      	pop	{r7, pc}
    6bfc:	00020a58 	.word	0x00020a58
    6c00:	000080d1 	.word	0x000080d1
    6c04:	0000b819 	.word	0x0000b819
    6c08:	0000bbcd 	.word	0x0000bbcd

00006c0c <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    6c0c:	b480      	push	{r7}
    6c0e:	b085      	sub	sp, #20
    6c10:	af00      	add	r7, sp, #0
    6c12:	60f8      	str	r0, [r7, #12]
    6c14:	460b      	mov	r3, r1
    6c16:	607a      	str	r2, [r7, #4]
    6c18:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    6c1a:	897b      	ldrh	r3, [r7, #10]
    6c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6c20:	b21a      	sxth	r2, r3
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	b21b      	sxth	r3, r3
    6c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6c2a:	b21b      	sxth	r3, r3
    6c2c:	4313      	orrs	r3, r2
    6c2e:	b21b      	sxth	r3, r3
    6c30:	b29a      	uxth	r2, r3
    6c32:	68fb      	ldr	r3, [r7, #12]
    6c34:	879a      	strh	r2, [r3, #60]	; 0x3c
    6c36:	68fb      	ldr	r3, [r7, #12]
    6c38:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    6c3a:	4618      	mov	r0, r3
    6c3c:	3714      	adds	r7, #20
    6c3e:	46bd      	mov	sp, r7
    6c40:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c44:	4770      	bx	lr

00006c46 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    6c46:	b480      	push	{r7}
    6c48:	b085      	sub	sp, #20
    6c4a:	af00      	add	r7, sp, #0
    6c4c:	60f8      	str	r0, [r7, #12]
    6c4e:	460b      	mov	r3, r1
    6c50:	607a      	str	r2, [r7, #4]
    6c52:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6c54:	7afb      	ldrb	r3, [r7, #11]
    6c56:	2b01      	cmp	r3, #1
    6c58:	d007      	beq.n	6c6a <i2c_m_async_register_callback+0x24>
    6c5a:	2b02      	cmp	r3, #2
    6c5c:	d009      	beq.n	6c72 <i2c_m_async_register_callback+0x2c>
    6c5e:	2b00      	cmp	r3, #0
    6c60:	d10b      	bne.n	6c7a <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    6c62:	68fb      	ldr	r3, [r7, #12]
    6c64:	687a      	ldr	r2, [r7, #4]
    6c66:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    6c68:	e00a      	b.n	6c80 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    6c6a:	68fb      	ldr	r3, [r7, #12]
    6c6c:	687a      	ldr	r2, [r7, #4]
    6c6e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    6c70:	e006      	b.n	6c80 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    6c72:	68fb      	ldr	r3, [r7, #12]
    6c74:	687a      	ldr	r2, [r7, #4]
    6c76:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    6c78:	e002      	b.n	6c80 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    6c7a:	f06f 030c 	mvn.w	r3, #12
    6c7e:	e000      	b.n	6c82 <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    6c80:	2300      	movs	r3, #0
}
    6c82:	4618      	mov	r0, r3
    6c84:	3714      	adds	r7, #20
    6c86:	46bd      	mov	sp, r7
    6c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c8c:	4770      	bx	lr

00006c8e <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    6c8e:	b480      	push	{r7}
    6c90:	b083      	sub	sp, #12
    6c92:	af00      	add	r7, sp, #0
    6c94:	6078      	str	r0, [r7, #4]
    6c96:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    6c98:	687b      	ldr	r3, [r7, #4]
    6c9a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    6c9e:	683b      	ldr	r3, [r7, #0]
    6ca0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    6ca2:	2300      	movs	r3, #0
}
    6ca4:	4618      	mov	r0, r3
    6ca6:	370c      	adds	r7, #12
    6ca8:	46bd      	mov	sp, r7
    6caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cae:	4770      	bx	lr

00006cb0 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    6cb0:	b580      	push	{r7, lr}
    6cb2:	b08a      	sub	sp, #40	; 0x28
    6cb4:	af00      	add	r7, sp, #0
    6cb6:	60f8      	str	r0, [r7, #12]
    6cb8:	60b9      	str	r1, [r7, #8]
    6cba:	4613      	mov	r3, r2
    6cbc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6cbe:	68fb      	ldr	r3, [r7, #12]
    6cc0:	3b14      	subs	r3, #20
    6cc2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6cc6:	8b9b      	ldrh	r3, [r3, #28]
    6cc8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6cca:	88fb      	ldrh	r3, [r7, #6]
    6ccc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    6cce:	f248 0301 	movw	r3, #32769	; 0x8001
    6cd2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    6cd4:	68bb      	ldr	r3, [r7, #8]
    6cd6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6cda:	f107 0214 	add.w	r2, r7, #20
    6cde:	4611      	mov	r1, r2
    6ce0:	4618      	mov	r0, r3
    6ce2:	4b06      	ldr	r3, [pc, #24]	; (6cfc <i2c_m_sync_read+0x4c>)
    6ce4:	4798      	blx	r3
    6ce6:	6238      	str	r0, [r7, #32]

	if (ret) {
    6ce8:	6a3b      	ldr	r3, [r7, #32]
    6cea:	2b00      	cmp	r3, #0
    6cec:	d001      	beq.n	6cf2 <i2c_m_sync_read+0x42>
		return ret;
    6cee:	6a3b      	ldr	r3, [r7, #32]
    6cf0:	e000      	b.n	6cf4 <i2c_m_sync_read+0x44>
	}

	return n;
    6cf2:	88fb      	ldrh	r3, [r7, #6]
}
    6cf4:	4618      	mov	r0, r3
    6cf6:	3728      	adds	r7, #40	; 0x28
    6cf8:	46bd      	mov	sp, r7
    6cfa:	bd80      	pop	{r7, pc}
    6cfc:	0000bdad 	.word	0x0000bdad

00006d00 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    6d00:	b580      	push	{r7, lr}
    6d02:	b08a      	sub	sp, #40	; 0x28
    6d04:	af00      	add	r7, sp, #0
    6d06:	60f8      	str	r0, [r7, #12]
    6d08:	60b9      	str	r1, [r7, #8]
    6d0a:	4613      	mov	r3, r2
    6d0c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6d0e:	68fb      	ldr	r3, [r7, #12]
    6d10:	3b14      	subs	r3, #20
    6d12:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d16:	8b9b      	ldrh	r3, [r3, #28]
    6d18:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6d1a:	88fb      	ldrh	r3, [r7, #6]
    6d1c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    6d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6d22:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6d24:	68bb      	ldr	r3, [r7, #8]
    6d26:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d2a:	f107 0214 	add.w	r2, r7, #20
    6d2e:	4611      	mov	r1, r2
    6d30:	4618      	mov	r0, r3
    6d32:	4b06      	ldr	r3, [pc, #24]	; (6d4c <i2c_m_sync_write+0x4c>)
    6d34:	4798      	blx	r3
    6d36:	6238      	str	r0, [r7, #32]

	if (ret) {
    6d38:	6a3b      	ldr	r3, [r7, #32]
    6d3a:	2b00      	cmp	r3, #0
    6d3c:	d001      	beq.n	6d42 <i2c_m_sync_write+0x42>
		return ret;
    6d3e:	6a3b      	ldr	r3, [r7, #32]
    6d40:	e000      	b.n	6d44 <i2c_m_sync_write+0x44>
	}

	return n;
    6d42:	88fb      	ldrh	r3, [r7, #6]
}
    6d44:	4618      	mov	r0, r3
    6d46:	3728      	adds	r7, #40	; 0x28
    6d48:	46bd      	mov	sp, r7
    6d4a:	bd80      	pop	{r7, pc}
    6d4c:	0000bdad 	.word	0x0000bdad

00006d50 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    6d50:	b580      	push	{r7, lr}
    6d52:	b084      	sub	sp, #16
    6d54:	af00      	add	r7, sp, #0
    6d56:	6078      	str	r0, [r7, #4]
    6d58:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    6d5a:	687b      	ldr	r3, [r7, #4]
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	bf14      	ite	ne
    6d60:	2301      	movne	r3, #1
    6d62:	2300      	moveq	r3, #0
    6d64:	b2db      	uxtb	r3, r3
    6d66:	225e      	movs	r2, #94	; 0x5e
    6d68:	490c      	ldr	r1, [pc, #48]	; (6d9c <i2c_m_sync_init+0x4c>)
    6d6a:	4618      	mov	r0, r3
    6d6c:	4b0c      	ldr	r3, [pc, #48]	; (6da0 <i2c_m_sync_init+0x50>)
    6d6e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    6d70:	687b      	ldr	r3, [r7, #4]
    6d72:	6839      	ldr	r1, [r7, #0]
    6d74:	4618      	mov	r0, r3
    6d76:	4b0b      	ldr	r3, [pc, #44]	; (6da4 <i2c_m_sync_init+0x54>)
    6d78:	4798      	blx	r3
    6d7a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6d7c:	68fb      	ldr	r3, [r7, #12]
    6d7e:	2b00      	cmp	r3, #0
    6d80:	d001      	beq.n	6d86 <i2c_m_sync_init+0x36>
		return init_status;
    6d82:	68fb      	ldr	r3, [r7, #12]
    6d84:	e006      	b.n	6d94 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    6d86:	687b      	ldr	r3, [r7, #4]
    6d88:	4a07      	ldr	r2, [pc, #28]	; (6da8 <i2c_m_sync_init+0x58>)
    6d8a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	4a07      	ldr	r2, [pc, #28]	; (6dac <i2c_m_sync_init+0x5c>)
    6d90:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    6d92:	2300      	movs	r3, #0
}
    6d94:	4618      	mov	r0, r3
    6d96:	3710      	adds	r7, #16
    6d98:	46bd      	mov	sp, r7
    6d9a:	bd80      	pop	{r7, pc}
    6d9c:	00020a78 	.word	0x00020a78
    6da0:	000080d1 	.word	0x000080d1
    6da4:	0000bb45 	.word	0x0000bb45
    6da8:	00006cb1 	.word	0x00006cb1
    6dac:	00006d01 	.word	0x00006d01

00006db0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    6db0:	b580      	push	{r7, lr}
    6db2:	b082      	sub	sp, #8
    6db4:	af00      	add	r7, sp, #0
    6db6:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	4618      	mov	r0, r3
    6dbc:	4b03      	ldr	r3, [pc, #12]	; (6dcc <i2c_m_sync_enable+0x1c>)
    6dbe:	4798      	blx	r3
    6dc0:	4603      	mov	r3, r0
}
    6dc2:	4618      	mov	r0, r3
    6dc4:	3708      	adds	r7, #8
    6dc6:	46bd      	mov	sp, r7
    6dc8:	bd80      	pop	{r7, pc}
    6dca:	bf00      	nop
    6dcc:	0000bb8d 	.word	0x0000bb8d

00006dd0 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    6dd0:	b480      	push	{r7}
    6dd2:	b085      	sub	sp, #20
    6dd4:	af00      	add	r7, sp, #0
    6dd6:	60f8      	str	r0, [r7, #12]
    6dd8:	460b      	mov	r3, r1
    6dda:	607a      	str	r2, [r7, #4]
    6ddc:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    6dde:	897b      	ldrh	r3, [r7, #10]
    6de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6de4:	b21a      	sxth	r2, r3
    6de6:	687b      	ldr	r3, [r7, #4]
    6de8:	b21b      	sxth	r3, r3
    6dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6dee:	b21b      	sxth	r3, r3
    6df0:	4313      	orrs	r3, r2
    6df2:	b21b      	sxth	r3, r3
    6df4:	b29a      	uxth	r2, r3
    6df6:	68fb      	ldr	r3, [r7, #12]
    6df8:	839a      	strh	r2, [r3, #28]
    6dfa:	68fb      	ldr	r3, [r7, #12]
    6dfc:	8b9b      	ldrh	r3, [r3, #28]
}
    6dfe:	4618      	mov	r0, r3
    6e00:	3714      	adds	r7, #20
    6e02:	46bd      	mov	sp, r7
    6e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e08:	4770      	bx	lr

00006e0a <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    6e0a:	b480      	push	{r7}
    6e0c:	b083      	sub	sp, #12
    6e0e:	af00      	add	r7, sp, #0
    6e10:	6078      	str	r0, [r7, #4]
    6e12:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    6e14:	687b      	ldr	r3, [r7, #4]
    6e16:	f103 0214 	add.w	r2, r3, #20
    6e1a:	683b      	ldr	r3, [r7, #0]
    6e1c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    6e1e:	2300      	movs	r3, #0
}
    6e20:	4618      	mov	r0, r3
    6e22:	370c      	adds	r7, #12
    6e24:	46bd      	mov	sp, r7
    6e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e2a:	4770      	bx	lr

00006e2c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    6e2c:	b580      	push	{r7, lr}
    6e2e:	b084      	sub	sp, #16
    6e30:	af00      	add	r7, sp, #0
    6e32:	60f8      	str	r0, [r7, #12]
    6e34:	60b9      	str	r1, [r7, #8]
    6e36:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    6e38:	68fb      	ldr	r3, [r7, #12]
    6e3a:	2b00      	cmp	r3, #0
    6e3c:	d004      	beq.n	6e48 <pwm_init+0x1c>
    6e3e:	68bb      	ldr	r3, [r7, #8]
    6e40:	2b00      	cmp	r3, #0
    6e42:	d001      	beq.n	6e48 <pwm_init+0x1c>
    6e44:	2301      	movs	r3, #1
    6e46:	e000      	b.n	6e4a <pwm_init+0x1e>
    6e48:	2300      	movs	r3, #0
    6e4a:	f003 0301 	and.w	r3, r3, #1
    6e4e:	b2db      	uxtb	r3, r3
    6e50:	2233      	movs	r2, #51	; 0x33
    6e52:	490a      	ldr	r1, [pc, #40]	; (6e7c <pwm_init+0x50>)
    6e54:	4618      	mov	r0, r3
    6e56:	4b0a      	ldr	r3, [pc, #40]	; (6e80 <pwm_init+0x54>)
    6e58:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    6e5a:	68fb      	ldr	r3, [r7, #12]
    6e5c:	68b9      	ldr	r1, [r7, #8]
    6e5e:	4618      	mov	r0, r3
    6e60:	4b08      	ldr	r3, [pc, #32]	; (6e84 <pwm_init+0x58>)
    6e62:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    6e64:	68fb      	ldr	r3, [r7, #12]
    6e66:	4a08      	ldr	r2, [pc, #32]	; (6e88 <pwm_init+0x5c>)
    6e68:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    6e6a:	68fb      	ldr	r3, [r7, #12]
    6e6c:	4a07      	ldr	r2, [pc, #28]	; (6e8c <pwm_init+0x60>)
    6e6e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    6e70:	2300      	movs	r3, #0
}
    6e72:	4618      	mov	r0, r3
    6e74:	3710      	adds	r7, #16
    6e76:	46bd      	mov	sp, r7
    6e78:	bd80      	pop	{r7, pc}
    6e7a:	bf00      	nop
    6e7c:	00020a94 	.word	0x00020a94
    6e80:	000080d1 	.word	0x000080d1
    6e84:	0000d4b5 	.word	0x0000d4b5
    6e88:	00006ee5 	.word	0x00006ee5
    6e8c:	00006f09 	.word	0x00006f09

00006e90 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    6e90:	b580      	push	{r7, lr}
    6e92:	b082      	sub	sp, #8
    6e94:	af00      	add	r7, sp, #0
    6e96:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    6e98:	687b      	ldr	r3, [r7, #4]
    6e9a:	2b00      	cmp	r3, #0
    6e9c:	bf14      	ite	ne
    6e9e:	2301      	movne	r3, #1
    6ea0:	2300      	moveq	r3, #0
    6ea2:	b2db      	uxtb	r3, r3
    6ea4:	224a      	movs	r2, #74	; 0x4a
    6ea6:	490b      	ldr	r1, [pc, #44]	; (6ed4 <pwm_enable+0x44>)
    6ea8:	4618      	mov	r0, r3
    6eaa:	4b0b      	ldr	r3, [pc, #44]	; (6ed8 <pwm_enable+0x48>)
    6eac:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    6eae:	687b      	ldr	r3, [r7, #4]
    6eb0:	4618      	mov	r0, r3
    6eb2:	4b0a      	ldr	r3, [pc, #40]	; (6edc <pwm_enable+0x4c>)
    6eb4:	4798      	blx	r3
    6eb6:	4603      	mov	r3, r0
    6eb8:	2b00      	cmp	r3, #0
    6eba:	d002      	beq.n	6ec2 <pwm_enable+0x32>
		return ERR_DENIED;
    6ebc:	f06f 0310 	mvn.w	r3, #16
    6ec0:	e004      	b.n	6ecc <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    6ec2:	687b      	ldr	r3, [r7, #4]
    6ec4:	4618      	mov	r0, r3
    6ec6:	4b06      	ldr	r3, [pc, #24]	; (6ee0 <pwm_enable+0x50>)
    6ec8:	4798      	blx	r3

	return ERR_NONE;
    6eca:	2300      	movs	r3, #0
}
    6ecc:	4618      	mov	r0, r3
    6ece:	3708      	adds	r7, #8
    6ed0:	46bd      	mov	sp, r7
    6ed2:	bd80      	pop	{r7, pc}
    6ed4:	00020a94 	.word	0x00020a94
    6ed8:	000080d1 	.word	0x000080d1
    6edc:	0000d8a5 	.word	0x0000d8a5
    6ee0:	0000d761 	.word	0x0000d761

00006ee4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    6ee4:	b580      	push	{r7, lr}
    6ee6:	b084      	sub	sp, #16
    6ee8:	af00      	add	r7, sp, #0
    6eea:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    6eec:	687b      	ldr	r3, [r7, #4]
    6eee:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    6ef0:	68fb      	ldr	r3, [r7, #12]
    6ef2:	695b      	ldr	r3, [r3, #20]
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	d003      	beq.n	6f00 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    6ef8:	68fb      	ldr	r3, [r7, #12]
    6efa:	695b      	ldr	r3, [r3, #20]
    6efc:	68f8      	ldr	r0, [r7, #12]
    6efe:	4798      	blx	r3
	}
}
    6f00:	bf00      	nop
    6f02:	3710      	adds	r7, #16
    6f04:	46bd      	mov	sp, r7
    6f06:	bd80      	pop	{r7, pc}

00006f08 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    6f08:	b580      	push	{r7, lr}
    6f0a:	b084      	sub	sp, #16
    6f0c:	af00      	add	r7, sp, #0
    6f0e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    6f10:	687b      	ldr	r3, [r7, #4]
    6f12:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    6f14:	68fb      	ldr	r3, [r7, #12]
    6f16:	699b      	ldr	r3, [r3, #24]
    6f18:	2b00      	cmp	r3, #0
    6f1a:	d003      	beq.n	6f24 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    6f1c:	68fb      	ldr	r3, [r7, #12]
    6f1e:	699b      	ldr	r3, [r3, #24]
    6f20:	68f8      	ldr	r0, [r7, #12]
    6f22:	4798      	blx	r3
	}
}
    6f24:	bf00      	nop
    6f26:	3710      	adds	r7, #16
    6f28:	46bd      	mov	sp, r7
    6f2a:	bd80      	pop	{r7, pc}

00006f2c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    6f2c:	b580      	push	{r7, lr}
    6f2e:	b082      	sub	sp, #8
    6f30:	af00      	add	r7, sp, #0
    6f32:	6078      	str	r0, [r7, #4]
    6f34:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    6f36:	687b      	ldr	r3, [r7, #4]
    6f38:	2b00      	cmp	r3, #0
    6f3a:	d004      	beq.n	6f46 <qspi_sync_init+0x1a>
    6f3c:	683b      	ldr	r3, [r7, #0]
    6f3e:	2b00      	cmp	r3, #0
    6f40:	d001      	beq.n	6f46 <qspi_sync_init+0x1a>
    6f42:	2301      	movs	r3, #1
    6f44:	e000      	b.n	6f48 <qspi_sync_init+0x1c>
    6f46:	2300      	movs	r3, #0
    6f48:	f003 0301 	and.w	r3, r3, #1
    6f4c:	b2db      	uxtb	r3, r3
    6f4e:	2231      	movs	r2, #49	; 0x31
    6f50:	4906      	ldr	r1, [pc, #24]	; (6f6c <qspi_sync_init+0x40>)
    6f52:	4618      	mov	r0, r3
    6f54:	4b06      	ldr	r3, [pc, #24]	; (6f70 <qspi_sync_init+0x44>)
    6f56:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    6f58:	687b      	ldr	r3, [r7, #4]
    6f5a:	6839      	ldr	r1, [r7, #0]
    6f5c:	4618      	mov	r0, r3
    6f5e:	4b05      	ldr	r3, [pc, #20]	; (6f74 <qspi_sync_init+0x48>)
    6f60:	4798      	blx	r3
    6f62:	4603      	mov	r3, r0
}
    6f64:	4618      	mov	r0, r3
    6f66:	3708      	adds	r7, #8
    6f68:	46bd      	mov	sp, r7
    6f6a:	bd80      	pop	{r7, pc}
    6f6c:	00020aac 	.word	0x00020aac
    6f70:	000080d1 	.word	0x000080d1
    6f74:	0000a5d5 	.word	0x0000a5d5

00006f78 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    6f78:	b580      	push	{r7, lr}
    6f7a:	b082      	sub	sp, #8
    6f7c:	af00      	add	r7, sp, #0
    6f7e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    6f80:	687b      	ldr	r3, [r7, #4]
    6f82:	2b00      	cmp	r3, #0
    6f84:	bf14      	ite	ne
    6f86:	2301      	movne	r3, #1
    6f88:	2300      	moveq	r3, #0
    6f8a:	b2db      	uxtb	r3, r3
    6f8c:	223f      	movs	r2, #63	; 0x3f
    6f8e:	4906      	ldr	r1, [pc, #24]	; (6fa8 <qspi_sync_enable+0x30>)
    6f90:	4618      	mov	r0, r3
    6f92:	4b06      	ldr	r3, [pc, #24]	; (6fac <qspi_sync_enable+0x34>)
    6f94:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    6f96:	687b      	ldr	r3, [r7, #4]
    6f98:	4618      	mov	r0, r3
    6f9a:	4b05      	ldr	r3, [pc, #20]	; (6fb0 <qspi_sync_enable+0x38>)
    6f9c:	4798      	blx	r3
    6f9e:	4603      	mov	r3, r0
}
    6fa0:	4618      	mov	r0, r3
    6fa2:	3708      	adds	r7, #8
    6fa4:	46bd      	mov	sp, r7
    6fa6:	bd80      	pop	{r7, pc}
    6fa8:	00020aac 	.word	0x00020aac
    6fac:	000080d1 	.word	0x000080d1
    6fb0:	0000a649 	.word	0x0000a649

00006fb4 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    6fb4:	b580      	push	{r7, lr}
    6fb6:	b082      	sub	sp, #8
    6fb8:	af00      	add	r7, sp, #0
    6fba:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    6fbc:	687b      	ldr	r3, [r7, #4]
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	bf14      	ite	ne
    6fc2:	2301      	movne	r3, #1
    6fc4:	2300      	moveq	r3, #0
    6fc6:	b2db      	uxtb	r3, r3
    6fc8:	2246      	movs	r2, #70	; 0x46
    6fca:	4906      	ldr	r1, [pc, #24]	; (6fe4 <qspi_sync_disable+0x30>)
    6fcc:	4618      	mov	r0, r3
    6fce:	4b06      	ldr	r3, [pc, #24]	; (6fe8 <qspi_sync_disable+0x34>)
    6fd0:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    6fd2:	687b      	ldr	r3, [r7, #4]
    6fd4:	4618      	mov	r0, r3
    6fd6:	4b05      	ldr	r3, [pc, #20]	; (6fec <qspi_sync_disable+0x38>)
    6fd8:	4798      	blx	r3
    6fda:	4603      	mov	r3, r0
}
    6fdc:	4618      	mov	r0, r3
    6fde:	3708      	adds	r7, #8
    6fe0:	46bd      	mov	sp, r7
    6fe2:	bd80      	pop	{r7, pc}
    6fe4:	00020aac 	.word	0x00020aac
    6fe8:	000080d1 	.word	0x000080d1
    6fec:	0000a66d 	.word	0x0000a66d

00006ff0 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    6ff0:	b580      	push	{r7, lr}
    6ff2:	b082      	sub	sp, #8
    6ff4:	af00      	add	r7, sp, #0
    6ff6:	6078      	str	r0, [r7, #4]
    6ff8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    6ffa:	687b      	ldr	r3, [r7, #4]
    6ffc:	2b00      	cmp	r3, #0
    6ffe:	d004      	beq.n	700a <qspi_sync_serial_run_command+0x1a>
    7000:	683b      	ldr	r3, [r7, #0]
    7002:	2b00      	cmp	r3, #0
    7004:	d001      	beq.n	700a <qspi_sync_serial_run_command+0x1a>
    7006:	2301      	movs	r3, #1
    7008:	e000      	b.n	700c <qspi_sync_serial_run_command+0x1c>
    700a:	2300      	movs	r3, #0
    700c:	f003 0301 	and.w	r3, r3, #1
    7010:	b2db      	uxtb	r3, r3
    7012:	224d      	movs	r2, #77	; 0x4d
    7014:	4906      	ldr	r1, [pc, #24]	; (7030 <qspi_sync_serial_run_command+0x40>)
    7016:	4618      	mov	r0, r3
    7018:	4b06      	ldr	r3, [pc, #24]	; (7034 <qspi_sync_serial_run_command+0x44>)
    701a:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    701c:	687b      	ldr	r3, [r7, #4]
    701e:	6839      	ldr	r1, [r7, #0]
    7020:	4618      	mov	r0, r3
    7022:	4b05      	ldr	r3, [pc, #20]	; (7038 <qspi_sync_serial_run_command+0x48>)
    7024:	4798      	blx	r3
    7026:	4603      	mov	r3, r0
}
    7028:	4618      	mov	r0, r3
    702a:	3708      	adds	r7, #8
    702c:	46bd      	mov	sp, r7
    702e:	bd80      	pop	{r7, pc}
    7030:	00020aac 	.word	0x00020aac
    7034:	000080d1 	.word	0x000080d1
    7038:	0000a7b9 	.word	0x0000a7b9

0000703c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    703c:	b580      	push	{r7, lr}
    703e:	b084      	sub	sp, #16
    7040:	af00      	add	r7, sp, #0
    7042:	6078      	str	r0, [r7, #4]
    7044:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    7046:	2300      	movs	r3, #0
    7048:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    704a:	687b      	ldr	r3, [r7, #4]
    704c:	2b00      	cmp	r3, #0
    704e:	d004      	beq.n	705a <spi_m_sync_init+0x1e>
    7050:	683b      	ldr	r3, [r7, #0]
    7052:	2b00      	cmp	r3, #0
    7054:	d001      	beq.n	705a <spi_m_sync_init+0x1e>
    7056:	2301      	movs	r3, #1
    7058:	e000      	b.n	705c <spi_m_sync_init+0x20>
    705a:	2300      	movs	r3, #0
    705c:	f003 0301 	and.w	r3, r3, #1
    7060:	b2db      	uxtb	r3, r3
    7062:	2240      	movs	r2, #64	; 0x40
    7064:	4910      	ldr	r1, [pc, #64]	; (70a8 <spi_m_sync_init+0x6c>)
    7066:	4618      	mov	r0, r3
    7068:	4b10      	ldr	r3, [pc, #64]	; (70ac <spi_m_sync_init+0x70>)
    706a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	683a      	ldr	r2, [r7, #0]
    7070:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    7072:	687b      	ldr	r3, [r7, #4]
    7074:	3304      	adds	r3, #4
    7076:	6839      	ldr	r1, [r7, #0]
    7078:	4618      	mov	r0, r3
    707a:	4b0d      	ldr	r3, [pc, #52]	; (70b0 <spi_m_sync_init+0x74>)
    707c:	4798      	blx	r3
    707e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    7080:	68fb      	ldr	r3, [r7, #12]
    7082:	2b00      	cmp	r3, #0
    7084:	da01      	bge.n	708a <spi_m_sync_init+0x4e>
		return rc;
    7086:	68fb      	ldr	r3, [r7, #12]
    7088:	e00a      	b.n	70a0 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    708a:	687b      	ldr	r3, [r7, #4]
    708c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    7090:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    7092:	687b      	ldr	r3, [r7, #4]
    7094:	4a07      	ldr	r2, [pc, #28]	; (70b4 <spi_m_sync_init+0x78>)
    7096:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    7098:	687b      	ldr	r3, [r7, #4]
    709a:	4a07      	ldr	r2, [pc, #28]	; (70b8 <spi_m_sync_init+0x7c>)
    709c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    709e:	2300      	movs	r3, #0
}
    70a0:	4618      	mov	r0, r3
    70a2:	3710      	adds	r7, #16
    70a4:	46bd      	mov	sp, r7
    70a6:	bd80      	pop	{r7, pc}
    70a8:	00020ac8 	.word	0x00020ac8
    70ac:	000080d1 	.word	0x000080d1
    70b0:	0000c319 	.word	0x0000c319
    70b4:	00007135 	.word	0x00007135
    70b8:	0000718d 	.word	0x0000718d

000070bc <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    70bc:	b580      	push	{r7, lr}
    70be:	b082      	sub	sp, #8
    70c0:	af00      	add	r7, sp, #0
    70c2:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    70c4:	687b      	ldr	r3, [r7, #4]
    70c6:	2b00      	cmp	r3, #0
    70c8:	bf14      	ite	ne
    70ca:	2301      	movne	r3, #1
    70cc:	2300      	moveq	r3, #0
    70ce:	b2db      	uxtb	r3, r3
    70d0:	2257      	movs	r2, #87	; 0x57
    70d2:	4906      	ldr	r1, [pc, #24]	; (70ec <spi_m_sync_enable+0x30>)
    70d4:	4618      	mov	r0, r3
    70d6:	4b06      	ldr	r3, [pc, #24]	; (70f0 <spi_m_sync_enable+0x34>)
    70d8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    70da:	687b      	ldr	r3, [r7, #4]
    70dc:	3304      	adds	r3, #4
    70de:	4618      	mov	r0, r3
    70e0:	4b04      	ldr	r3, [pc, #16]	; (70f4 <spi_m_sync_enable+0x38>)
    70e2:	4798      	blx	r3
}
    70e4:	bf00      	nop
    70e6:	3708      	adds	r7, #8
    70e8:	46bd      	mov	sp, r7
    70ea:	bd80      	pop	{r7, pc}
    70ec:	00020ac8 	.word	0x00020ac8
    70f0:	000080d1 	.word	0x000080d1
    70f4:	0000c425 	.word	0x0000c425

000070f8 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    70f8:	b580      	push	{r7, lr}
    70fa:	b082      	sub	sp, #8
    70fc:	af00      	add	r7, sp, #0
    70fe:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    7100:	687b      	ldr	r3, [r7, #4]
    7102:	2b00      	cmp	r3, #0
    7104:	bf14      	ite	ne
    7106:	2301      	movne	r3, #1
    7108:	2300      	moveq	r3, #0
    710a:	b2db      	uxtb	r3, r3
    710c:	225d      	movs	r2, #93	; 0x5d
    710e:	4906      	ldr	r1, [pc, #24]	; (7128 <spi_m_sync_disable+0x30>)
    7110:	4618      	mov	r0, r3
    7112:	4b06      	ldr	r3, [pc, #24]	; (712c <spi_m_sync_disable+0x34>)
    7114:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    7116:	687b      	ldr	r3, [r7, #4]
    7118:	3304      	adds	r3, #4
    711a:	4618      	mov	r0, r3
    711c:	4b04      	ldr	r3, [pc, #16]	; (7130 <spi_m_sync_disable+0x38>)
    711e:	4798      	blx	r3
}
    7120:	bf00      	nop
    7122:	3708      	adds	r7, #8
    7124:	46bd      	mov	sp, r7
    7126:	bd80      	pop	{r7, pc}
    7128:	00020ac8 	.word	0x00020ac8
    712c:	000080d1 	.word	0x000080d1
    7130:	0000c475 	.word	0x0000c475

00007134 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    7134:	b580      	push	{r7, lr}
    7136:	b088      	sub	sp, #32
    7138:	af00      	add	r7, sp, #0
    713a:	60f8      	str	r0, [r7, #12]
    713c:	60b9      	str	r1, [r7, #8]
    713e:	4613      	mov	r3, r2
    7140:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    7142:	68fb      	ldr	r3, [r7, #12]
    7144:	2b00      	cmp	r3, #0
    7146:	bf14      	ite	ne
    7148:	2301      	movne	r3, #1
    714a:	2300      	moveq	r3, #0
    714c:	b2db      	uxtb	r3, r3
    714e:	2287      	movs	r2, #135	; 0x87
    7150:	490b      	ldr	r1, [pc, #44]	; (7180 <_spi_m_sync_io_read+0x4c>)
    7152:	4618      	mov	r0, r3
    7154:	4b0b      	ldr	r3, [pc, #44]	; (7184 <_spi_m_sync_io_read+0x50>)
    7156:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    7158:	68fb      	ldr	r3, [r7, #12]
    715a:	3b0c      	subs	r3, #12
    715c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    715e:	68bb      	ldr	r3, [r7, #8]
    7160:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    7162:	2300      	movs	r3, #0
    7164:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    7166:	88fb      	ldrh	r3, [r7, #6]
    7168:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    716a:	f107 0310 	add.w	r3, r7, #16
    716e:	4619      	mov	r1, r3
    7170:	69f8      	ldr	r0, [r7, #28]
    7172:	4b05      	ldr	r3, [pc, #20]	; (7188 <_spi_m_sync_io_read+0x54>)
    7174:	4798      	blx	r3
    7176:	4603      	mov	r3, r0
}
    7178:	4618      	mov	r0, r3
    717a:	3720      	adds	r7, #32
    717c:	46bd      	mov	sp, r7
    717e:	bd80      	pop	{r7, pc}
    7180:	00020ac8 	.word	0x00020ac8
    7184:	000080d1 	.word	0x000080d1
    7188:	000071e5 	.word	0x000071e5

0000718c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    718c:	b580      	push	{r7, lr}
    718e:	b088      	sub	sp, #32
    7190:	af00      	add	r7, sp, #0
    7192:	60f8      	str	r0, [r7, #12]
    7194:	60b9      	str	r1, [r7, #8]
    7196:	4613      	mov	r3, r2
    7198:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    719a:	68fb      	ldr	r3, [r7, #12]
    719c:	2b00      	cmp	r3, #0
    719e:	bf14      	ite	ne
    71a0:	2301      	movne	r3, #1
    71a2:	2300      	moveq	r3, #0
    71a4:	b2db      	uxtb	r3, r3
    71a6:	22a3      	movs	r2, #163	; 0xa3
    71a8:	490b      	ldr	r1, [pc, #44]	; (71d8 <_spi_m_sync_io_write+0x4c>)
    71aa:	4618      	mov	r0, r3
    71ac:	4b0b      	ldr	r3, [pc, #44]	; (71dc <_spi_m_sync_io_write+0x50>)
    71ae:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    71b0:	68fb      	ldr	r3, [r7, #12]
    71b2:	3b0c      	subs	r3, #12
    71b4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    71b6:	2300      	movs	r3, #0
    71b8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    71ba:	68bb      	ldr	r3, [r7, #8]
    71bc:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    71be:	88fb      	ldrh	r3, [r7, #6]
    71c0:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    71c2:	f107 0310 	add.w	r3, r7, #16
    71c6:	4619      	mov	r1, r3
    71c8:	69f8      	ldr	r0, [r7, #28]
    71ca:	4b05      	ldr	r3, [pc, #20]	; (71e0 <_spi_m_sync_io_write+0x54>)
    71cc:	4798      	blx	r3
    71ce:	4603      	mov	r3, r0
}
    71d0:	4618      	mov	r0, r3
    71d2:	3720      	adds	r7, #32
    71d4:	46bd      	mov	sp, r7
    71d6:	bd80      	pop	{r7, pc}
    71d8:	00020ac8 	.word	0x00020ac8
    71dc:	000080d1 	.word	0x000080d1
    71e0:	000071e5 	.word	0x000071e5

000071e4 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    71e4:	b580      	push	{r7, lr}
    71e6:	b086      	sub	sp, #24
    71e8:	af00      	add	r7, sp, #0
    71ea:	6078      	str	r0, [r7, #4]
    71ec:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    71ee:	687b      	ldr	r3, [r7, #4]
    71f0:	2b00      	cmp	r3, #0
    71f2:	d004      	beq.n	71fe <spi_m_sync_transfer+0x1a>
    71f4:	683b      	ldr	r3, [r7, #0]
    71f6:	2b00      	cmp	r3, #0
    71f8:	d001      	beq.n	71fe <spi_m_sync_transfer+0x1a>
    71fa:	2301      	movs	r3, #1
    71fc:	e000      	b.n	7200 <spi_m_sync_transfer+0x1c>
    71fe:	2300      	movs	r3, #0
    7200:	f003 0301 	and.w	r3, r3, #1
    7204:	b2db      	uxtb	r3, r3
    7206:	22b3      	movs	r2, #179	; 0xb3
    7208:	490c      	ldr	r1, [pc, #48]	; (723c <spi_m_sync_transfer+0x58>)
    720a:	4618      	mov	r0, r3
    720c:	4b0c      	ldr	r3, [pc, #48]	; (7240 <spi_m_sync_transfer+0x5c>)
    720e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    7210:	683b      	ldr	r3, [r7, #0]
    7212:	681b      	ldr	r3, [r3, #0]
    7214:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    7216:	683b      	ldr	r3, [r7, #0]
    7218:	685b      	ldr	r3, [r3, #4]
    721a:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    721c:	683b      	ldr	r3, [r7, #0]
    721e:	689b      	ldr	r3, [r3, #8]
    7220:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    7222:	687b      	ldr	r3, [r7, #4]
    7224:	3304      	adds	r3, #4
    7226:	f107 020c 	add.w	r2, r7, #12
    722a:	4611      	mov	r1, r2
    722c:	4618      	mov	r0, r3
    722e:	4b05      	ldr	r3, [pc, #20]	; (7244 <spi_m_sync_transfer+0x60>)
    7230:	4798      	blx	r3
    7232:	4603      	mov	r3, r0
}
    7234:	4618      	mov	r0, r3
    7236:	3718      	adds	r7, #24
    7238:	46bd      	mov	sp, r7
    723a:	bd80      	pop	{r7, pc}
    723c:	00020ac8 	.word	0x00020ac8
    7240:	000080d1 	.word	0x000080d1
    7244:	0000c619 	.word	0x0000c619

00007248 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    7248:	b580      	push	{r7, lr}
    724a:	b082      	sub	sp, #8
    724c:	af00      	add	r7, sp, #0
    724e:	6078      	str	r0, [r7, #4]
    7250:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	2b00      	cmp	r3, #0
    7256:	d004      	beq.n	7262 <spi_m_sync_get_io_descriptor+0x1a>
    7258:	683b      	ldr	r3, [r7, #0]
    725a:	2b00      	cmp	r3, #0
    725c:	d001      	beq.n	7262 <spi_m_sync_get_io_descriptor+0x1a>
    725e:	2301      	movs	r3, #1
    7260:	e000      	b.n	7264 <spi_m_sync_get_io_descriptor+0x1c>
    7262:	2300      	movs	r3, #0
    7264:	f003 0301 	and.w	r3, r3, #1
    7268:	b2db      	uxtb	r3, r3
    726a:	22bd      	movs	r2, #189	; 0xbd
    726c:	4906      	ldr	r1, [pc, #24]	; (7288 <spi_m_sync_get_io_descriptor+0x40>)
    726e:	4618      	mov	r0, r3
    7270:	4b06      	ldr	r3, [pc, #24]	; (728c <spi_m_sync_get_io_descriptor+0x44>)
    7272:	4798      	blx	r3
	*io = &spi->io;
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	f103 020c 	add.w	r2, r3, #12
    727a:	683b      	ldr	r3, [r7, #0]
    727c:	601a      	str	r2, [r3, #0]
	return 0;
    727e:	2300      	movs	r3, #0
}
    7280:	4618      	mov	r0, r3
    7282:	3708      	adds	r7, #8
    7284:	46bd      	mov	sp, r7
    7286:	bd80      	pop	{r7, pc}
    7288:	00020ac8 	.word	0x00020ac8
    728c:	000080d1 	.word	0x000080d1

00007290 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    7290:	b480      	push	{r7}
    7292:	b083      	sub	sp, #12
    7294:	af00      	add	r7, sp, #0
    7296:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    7298:	687b      	ldr	r3, [r7, #4]
    729a:	681b      	ldr	r3, [r3, #0]
}
    729c:	4618      	mov	r0, r3
    729e:	370c      	adds	r7, #12
    72a0:	46bd      	mov	sp, r7
    72a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    72a6:	4770      	bx	lr

000072a8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    72a8:	b480      	push	{r7}
    72aa:	b083      	sub	sp, #12
    72ac:	af00      	add	r7, sp, #0
    72ae:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    72b0:	687b      	ldr	r3, [r7, #4]
    72b2:	2b00      	cmp	r3, #0
    72b4:	d002      	beq.n	72bc <list_get_next_element+0x14>
    72b6:	687b      	ldr	r3, [r7, #4]
    72b8:	681b      	ldr	r3, [r3, #0]
    72ba:	e000      	b.n	72be <list_get_next_element+0x16>
    72bc:	2300      	movs	r3, #0
}
    72be:	4618      	mov	r0, r3
    72c0:	370c      	adds	r7, #12
    72c2:	46bd      	mov	sp, r7
    72c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    72c8:	4770      	bx	lr
	...

000072cc <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    72cc:	b580      	push	{r7, lr}
    72ce:	b084      	sub	sp, #16
    72d0:	af00      	add	r7, sp, #0
    72d2:	60f8      	str	r0, [r7, #12]
    72d4:	60b9      	str	r1, [r7, #8]
    72d6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    72d8:	68fb      	ldr	r3, [r7, #12]
    72da:	2b00      	cmp	r3, #0
    72dc:	d007      	beq.n	72ee <timer_init+0x22>
    72de:	68bb      	ldr	r3, [r7, #8]
    72e0:	2b00      	cmp	r3, #0
    72e2:	d004      	beq.n	72ee <timer_init+0x22>
    72e4:	687b      	ldr	r3, [r7, #4]
    72e6:	2b00      	cmp	r3, #0
    72e8:	d001      	beq.n	72ee <timer_init+0x22>
    72ea:	2301      	movs	r3, #1
    72ec:	e000      	b.n	72f0 <timer_init+0x24>
    72ee:	2300      	movs	r3, #0
    72f0:	f003 0301 	and.w	r3, r3, #1
    72f4:	b2db      	uxtb	r3, r3
    72f6:	223b      	movs	r2, #59	; 0x3b
    72f8:	490c      	ldr	r1, [pc, #48]	; (732c <timer_init+0x60>)
    72fa:	4618      	mov	r0, r3
    72fc:	4b0c      	ldr	r3, [pc, #48]	; (7330 <timer_init+0x64>)
    72fe:	4798      	blx	r3
	descr->func = func;
    7300:	68fb      	ldr	r3, [r7, #12]
    7302:	687a      	ldr	r2, [r7, #4]
    7304:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    7306:	68fb      	ldr	r3, [r7, #12]
    7308:	681b      	ldr	r3, [r3, #0]
    730a:	681b      	ldr	r3, [r3, #0]
    730c:	68fa      	ldr	r2, [r7, #12]
    730e:	3204      	adds	r2, #4
    7310:	68b9      	ldr	r1, [r7, #8]
    7312:	4610      	mov	r0, r2
    7314:	4798      	blx	r3
	descr->time                           = 0;
    7316:	68fb      	ldr	r3, [r7, #12]
    7318:	2200      	movs	r2, #0
    731a:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    731c:	68fb      	ldr	r3, [r7, #12]
    731e:	4a05      	ldr	r2, [pc, #20]	; (7334 <timer_init+0x68>)
    7320:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    7322:	2300      	movs	r3, #0
}
    7324:	4618      	mov	r0, r3
    7326:	3710      	adds	r7, #16
    7328:	46bd      	mov	sp, r7
    732a:	bd80      	pop	{r7, pc}
    732c:	00020ae4 	.word	0x00020ae4
    7330:	000080d1 	.word	0x000080d1
    7334:	000076bd 	.word	0x000076bd

00007338 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    7338:	b580      	push	{r7, lr}
    733a:	b082      	sub	sp, #8
    733c:	af00      	add	r7, sp, #0
    733e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    7340:	687b      	ldr	r3, [r7, #4]
    7342:	2b00      	cmp	r3, #0
    7344:	d005      	beq.n	7352 <timer_start+0x1a>
    7346:	687b      	ldr	r3, [r7, #4]
    7348:	681b      	ldr	r3, [r3, #0]
    734a:	2b00      	cmp	r3, #0
    734c:	d001      	beq.n	7352 <timer_start+0x1a>
    734e:	2301      	movs	r3, #1
    7350:	e000      	b.n	7354 <timer_start+0x1c>
    7352:	2300      	movs	r3, #0
    7354:	f003 0301 	and.w	r3, r3, #1
    7358:	b2db      	uxtb	r3, r3
    735a:	2254      	movs	r2, #84	; 0x54
    735c:	490e      	ldr	r1, [pc, #56]	; (7398 <timer_start+0x60>)
    735e:	4618      	mov	r0, r3
    7360:	4b0e      	ldr	r3, [pc, #56]	; (739c <timer_start+0x64>)
    7362:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    7364:	687b      	ldr	r3, [r7, #4]
    7366:	681b      	ldr	r3, [r3, #0]
    7368:	699b      	ldr	r3, [r3, #24]
    736a:	687a      	ldr	r2, [r7, #4]
    736c:	3204      	adds	r2, #4
    736e:	4610      	mov	r0, r2
    7370:	4798      	blx	r3
    7372:	4603      	mov	r3, r0
    7374:	2b00      	cmp	r3, #0
    7376:	d002      	beq.n	737e <timer_start+0x46>
		return ERR_DENIED;
    7378:	f06f 0310 	mvn.w	r3, #16
    737c:	e007      	b.n	738e <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    737e:	687b      	ldr	r3, [r7, #4]
    7380:	681b      	ldr	r3, [r3, #0]
    7382:	689b      	ldr	r3, [r3, #8]
    7384:	687a      	ldr	r2, [r7, #4]
    7386:	3204      	adds	r2, #4
    7388:	4610      	mov	r0, r2
    738a:	4798      	blx	r3

	return ERR_NONE;
    738c:	2300      	movs	r3, #0
}
    738e:	4618      	mov	r0, r3
    7390:	3708      	adds	r7, #8
    7392:	46bd      	mov	sp, r7
    7394:	bd80      	pop	{r7, pc}
    7396:	bf00      	nop
    7398:	00020ae4 	.word	0x00020ae4
    739c:	000080d1 	.word	0x000080d1

000073a0 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    73a0:	b580      	push	{r7, lr}
    73a2:	b082      	sub	sp, #8
    73a4:	af00      	add	r7, sp, #0
    73a6:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    73a8:	687b      	ldr	r3, [r7, #4]
    73aa:	2b00      	cmp	r3, #0
    73ac:	d005      	beq.n	73ba <timer_stop+0x1a>
    73ae:	687b      	ldr	r3, [r7, #4]
    73b0:	681b      	ldr	r3, [r3, #0]
    73b2:	2b00      	cmp	r3, #0
    73b4:	d001      	beq.n	73ba <timer_stop+0x1a>
    73b6:	2301      	movs	r3, #1
    73b8:	e000      	b.n	73bc <timer_stop+0x1c>
    73ba:	2300      	movs	r3, #0
    73bc:	f003 0301 	and.w	r3, r3, #1
    73c0:	b2db      	uxtb	r3, r3
    73c2:	2262      	movs	r2, #98	; 0x62
    73c4:	490f      	ldr	r1, [pc, #60]	; (7404 <timer_stop+0x64>)
    73c6:	4618      	mov	r0, r3
    73c8:	4b0f      	ldr	r3, [pc, #60]	; (7408 <timer_stop+0x68>)
    73ca:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    73cc:	687b      	ldr	r3, [r7, #4]
    73ce:	681b      	ldr	r3, [r3, #0]
    73d0:	699b      	ldr	r3, [r3, #24]
    73d2:	687a      	ldr	r2, [r7, #4]
    73d4:	3204      	adds	r2, #4
    73d6:	4610      	mov	r0, r2
    73d8:	4798      	blx	r3
    73da:	4603      	mov	r3, r0
    73dc:	f083 0301 	eor.w	r3, r3, #1
    73e0:	b2db      	uxtb	r3, r3
    73e2:	2b00      	cmp	r3, #0
    73e4:	d002      	beq.n	73ec <timer_stop+0x4c>
		return ERR_DENIED;
    73e6:	f06f 0310 	mvn.w	r3, #16
    73ea:	e007      	b.n	73fc <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    73ec:	687b      	ldr	r3, [r7, #4]
    73ee:	681b      	ldr	r3, [r3, #0]
    73f0:	68db      	ldr	r3, [r3, #12]
    73f2:	687a      	ldr	r2, [r7, #4]
    73f4:	3204      	adds	r2, #4
    73f6:	4610      	mov	r0, r2
    73f8:	4798      	blx	r3

	return ERR_NONE;
    73fa:	2300      	movs	r3, #0
}
    73fc:	4618      	mov	r0, r3
    73fe:	3708      	adds	r7, #8
    7400:	46bd      	mov	sp, r7
    7402:	bd80      	pop	{r7, pc}
    7404:	00020ae4 	.word	0x00020ae4
    7408:	000080d1 	.word	0x000080d1

0000740c <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    740c:	b580      	push	{r7, lr}
    740e:	b084      	sub	sp, #16
    7410:	af00      	add	r7, sp, #0
    7412:	6078      	str	r0, [r7, #4]
    7414:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    7416:	687b      	ldr	r3, [r7, #4]
    7418:	2b00      	cmp	r3, #0
    741a:	d008      	beq.n	742e <timer_add_task+0x22>
    741c:	683b      	ldr	r3, [r7, #0]
    741e:	2b00      	cmp	r3, #0
    7420:	d005      	beq.n	742e <timer_add_task+0x22>
    7422:	687b      	ldr	r3, [r7, #4]
    7424:	681b      	ldr	r3, [r3, #0]
    7426:	2b00      	cmp	r3, #0
    7428:	d001      	beq.n	742e <timer_add_task+0x22>
    742a:	2301      	movs	r3, #1
    742c:	e000      	b.n	7430 <timer_add_task+0x24>
    742e:	2300      	movs	r3, #0
    7430:	f003 0301 	and.w	r3, r3, #1
    7434:	b2db      	uxtb	r3, r3
    7436:	227b      	movs	r2, #123	; 0x7b
    7438:	492f      	ldr	r1, [pc, #188]	; (74f8 <timer_add_task+0xec>)
    743a:	4618      	mov	r0, r3
    743c:	4b2f      	ldr	r3, [pc, #188]	; (74fc <timer_add_task+0xf0>)
    743e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    7440:	687b      	ldr	r3, [r7, #4]
    7442:	7f1b      	ldrb	r3, [r3, #28]
    7444:	b2db      	uxtb	r3, r3
    7446:	f043 0301 	orr.w	r3, r3, #1
    744a:	b2da      	uxtb	r2, r3
    744c:	687b      	ldr	r3, [r7, #4]
    744e:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    7450:	687b      	ldr	r3, [r7, #4]
    7452:	3318      	adds	r3, #24
    7454:	6839      	ldr	r1, [r7, #0]
    7456:	4618      	mov	r0, r3
    7458:	4b29      	ldr	r3, [pc, #164]	; (7500 <timer_add_task+0xf4>)
    745a:	4798      	blx	r3
    745c:	4603      	mov	r3, r0
    745e:	2b00      	cmp	r3, #0
    7460:	d00f      	beq.n	7482 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    7462:	687b      	ldr	r3, [r7, #4]
    7464:	7f1b      	ldrb	r3, [r3, #28]
    7466:	b2db      	uxtb	r3, r3
    7468:	f023 0301 	bic.w	r3, r3, #1
    746c:	b2da      	uxtb	r2, r3
    746e:	687b      	ldr	r3, [r7, #4]
    7470:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    7472:	2280      	movs	r2, #128	; 0x80
    7474:	4920      	ldr	r1, [pc, #128]	; (74f8 <timer_add_task+0xec>)
    7476:	2000      	movs	r0, #0
    7478:	4b20      	ldr	r3, [pc, #128]	; (74fc <timer_add_task+0xf0>)
    747a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    747c:	f06f 0311 	mvn.w	r3, #17
    7480:	e035      	b.n	74ee <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    7482:	687b      	ldr	r3, [r7, #4]
    7484:	695a      	ldr	r2, [r3, #20]
    7486:	683b      	ldr	r3, [r7, #0]
    7488:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	f103 0018 	add.w	r0, r3, #24
    7490:	687b      	ldr	r3, [r7, #4]
    7492:	695b      	ldr	r3, [r3, #20]
    7494:	461a      	mov	r2, r3
    7496:	6839      	ldr	r1, [r7, #0]
    7498:	4b1a      	ldr	r3, [pc, #104]	; (7504 <timer_add_task+0xf8>)
    749a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    749c:	687b      	ldr	r3, [r7, #4]
    749e:	7f1b      	ldrb	r3, [r3, #28]
    74a0:	b2db      	uxtb	r3, r3
    74a2:	f023 0301 	bic.w	r3, r3, #1
    74a6:	b2da      	uxtb	r2, r3
    74a8:	687b      	ldr	r3, [r7, #4]
    74aa:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    74ac:	687b      	ldr	r3, [r7, #4]
    74ae:	7f1b      	ldrb	r3, [r3, #28]
    74b0:	b2db      	uxtb	r3, r3
    74b2:	f003 0302 	and.w	r3, r3, #2
    74b6:	2b00      	cmp	r3, #0
    74b8:	d018      	beq.n	74ec <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    74ba:	f107 030c 	add.w	r3, r7, #12
    74be:	4618      	mov	r0, r3
    74c0:	4b11      	ldr	r3, [pc, #68]	; (7508 <timer_add_task+0xfc>)
    74c2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    74c4:	687b      	ldr	r3, [r7, #4]
    74c6:	7f1b      	ldrb	r3, [r3, #28]
    74c8:	b2db      	uxtb	r3, r3
    74ca:	f023 0302 	bic.w	r3, r3, #2
    74ce:	b2da      	uxtb	r2, r3
    74d0:	687b      	ldr	r3, [r7, #4]
    74d2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    74d4:	687b      	ldr	r3, [r7, #4]
    74d6:	681b      	ldr	r3, [r3, #0]
    74d8:	69db      	ldr	r3, [r3, #28]
    74da:	687a      	ldr	r2, [r7, #4]
    74dc:	3204      	adds	r2, #4
    74de:	4610      	mov	r0, r2
    74e0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    74e2:	f107 030c 	add.w	r3, r7, #12
    74e6:	4618      	mov	r0, r3
    74e8:	4b08      	ldr	r3, [pc, #32]	; (750c <timer_add_task+0x100>)
    74ea:	4798      	blx	r3
	}

	return ERR_NONE;
    74ec:	2300      	movs	r3, #0
}
    74ee:	4618      	mov	r0, r3
    74f0:	3710      	adds	r7, #16
    74f2:	46bd      	mov	sp, r7
    74f4:	bd80      	pop	{r7, pc}
    74f6:	bf00      	nop
    74f8:	00020ae4 	.word	0x00020ae4
    74fc:	000080d1 	.word	0x000080d1
    7500:	000080f9 	.word	0x000080f9
    7504:	0000760d 	.word	0x0000760d
    7508:	00010c85 	.word	0x00010c85
    750c:	00010cab 	.word	0x00010cab

00007510 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    7510:	b580      	push	{r7, lr}
    7512:	b084      	sub	sp, #16
    7514:	af00      	add	r7, sp, #0
    7516:	6078      	str	r0, [r7, #4]
    7518:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    751a:	687b      	ldr	r3, [r7, #4]
    751c:	2b00      	cmp	r3, #0
    751e:	d008      	beq.n	7532 <timer_remove_task+0x22>
    7520:	683b      	ldr	r3, [r7, #0]
    7522:	2b00      	cmp	r3, #0
    7524:	d005      	beq.n	7532 <timer_remove_task+0x22>
    7526:	687b      	ldr	r3, [r7, #4]
    7528:	681b      	ldr	r3, [r3, #0]
    752a:	2b00      	cmp	r3, #0
    752c:	d001      	beq.n	7532 <timer_remove_task+0x22>
    752e:	2301      	movs	r3, #1
    7530:	e000      	b.n	7534 <timer_remove_task+0x24>
    7532:	2300      	movs	r3, #0
    7534:	f003 0301 	and.w	r3, r3, #1
    7538:	b2db      	uxtb	r3, r3
    753a:	2296      	movs	r2, #150	; 0x96
    753c:	492d      	ldr	r1, [pc, #180]	; (75f4 <timer_remove_task+0xe4>)
    753e:	4618      	mov	r0, r3
    7540:	4b2d      	ldr	r3, [pc, #180]	; (75f8 <timer_remove_task+0xe8>)
    7542:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    7544:	687b      	ldr	r3, [r7, #4]
    7546:	7f1b      	ldrb	r3, [r3, #28]
    7548:	b2db      	uxtb	r3, r3
    754a:	f043 0301 	orr.w	r3, r3, #1
    754e:	b2da      	uxtb	r2, r3
    7550:	687b      	ldr	r3, [r7, #4]
    7552:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    7554:	687b      	ldr	r3, [r7, #4]
    7556:	3318      	adds	r3, #24
    7558:	6839      	ldr	r1, [r7, #0]
    755a:	4618      	mov	r0, r3
    755c:	4b27      	ldr	r3, [pc, #156]	; (75fc <timer_remove_task+0xec>)
    755e:	4798      	blx	r3
    7560:	4603      	mov	r3, r0
    7562:	f083 0301 	eor.w	r3, r3, #1
    7566:	b2db      	uxtb	r3, r3
    7568:	2b00      	cmp	r3, #0
    756a:	d00f      	beq.n	758c <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    756c:	687b      	ldr	r3, [r7, #4]
    756e:	7f1b      	ldrb	r3, [r3, #28]
    7570:	b2db      	uxtb	r3, r3
    7572:	f023 0301 	bic.w	r3, r3, #1
    7576:	b2da      	uxtb	r2, r3
    7578:	687b      	ldr	r3, [r7, #4]
    757a:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    757c:	229b      	movs	r2, #155	; 0x9b
    757e:	491d      	ldr	r1, [pc, #116]	; (75f4 <timer_remove_task+0xe4>)
    7580:	2000      	movs	r0, #0
    7582:	4b1d      	ldr	r3, [pc, #116]	; (75f8 <timer_remove_task+0xe8>)
    7584:	4798      	blx	r3
		return ERR_NOT_FOUND;
    7586:	f06f 0309 	mvn.w	r3, #9
    758a:	e02e      	b.n	75ea <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    758c:	687b      	ldr	r3, [r7, #4]
    758e:	3318      	adds	r3, #24
    7590:	6839      	ldr	r1, [r7, #0]
    7592:	4618      	mov	r0, r3
    7594:	4b1a      	ldr	r3, [pc, #104]	; (7600 <timer_remove_task+0xf0>)
    7596:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    7598:	687b      	ldr	r3, [r7, #4]
    759a:	7f1b      	ldrb	r3, [r3, #28]
    759c:	b2db      	uxtb	r3, r3
    759e:	f023 0301 	bic.w	r3, r3, #1
    75a2:	b2da      	uxtb	r2, r3
    75a4:	687b      	ldr	r3, [r7, #4]
    75a6:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    75a8:	687b      	ldr	r3, [r7, #4]
    75aa:	7f1b      	ldrb	r3, [r3, #28]
    75ac:	b2db      	uxtb	r3, r3
    75ae:	f003 0302 	and.w	r3, r3, #2
    75b2:	2b00      	cmp	r3, #0
    75b4:	d018      	beq.n	75e8 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    75b6:	f107 030c 	add.w	r3, r7, #12
    75ba:	4618      	mov	r0, r3
    75bc:	4b11      	ldr	r3, [pc, #68]	; (7604 <timer_remove_task+0xf4>)
    75be:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    75c0:	687b      	ldr	r3, [r7, #4]
    75c2:	7f1b      	ldrb	r3, [r3, #28]
    75c4:	b2db      	uxtb	r3, r3
    75c6:	f023 0302 	bic.w	r3, r3, #2
    75ca:	b2da      	uxtb	r2, r3
    75cc:	687b      	ldr	r3, [r7, #4]
    75ce:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    75d0:	687b      	ldr	r3, [r7, #4]
    75d2:	681b      	ldr	r3, [r3, #0]
    75d4:	69db      	ldr	r3, [r3, #28]
    75d6:	687a      	ldr	r2, [r7, #4]
    75d8:	3204      	adds	r2, #4
    75da:	4610      	mov	r0, r2
    75dc:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    75de:	f107 030c 	add.w	r3, r7, #12
    75e2:	4618      	mov	r0, r3
    75e4:	4b08      	ldr	r3, [pc, #32]	; (7608 <timer_remove_task+0xf8>)
    75e6:	4798      	blx	r3
	}

	return ERR_NONE;
    75e8:	2300      	movs	r3, #0
}
    75ea:	4618      	mov	r0, r3
    75ec:	3710      	adds	r7, #16
    75ee:	46bd      	mov	sp, r7
    75f0:	bd80      	pop	{r7, pc}
    75f2:	bf00      	nop
    75f4:	00020ae4 	.word	0x00020ae4
    75f8:	000080d1 	.word	0x000080d1
    75fc:	000080f9 	.word	0x000080f9
    7600:	0000825b 	.word	0x0000825b
    7604:	00010c85 	.word	0x00010c85
    7608:	00010cab 	.word	0x00010cab

0000760c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    760c:	b580      	push	{r7, lr}
    760e:	b088      	sub	sp, #32
    7610:	af00      	add	r7, sp, #0
    7612:	60f8      	str	r0, [r7, #12]
    7614:	60b9      	str	r1, [r7, #8]
    7616:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    7618:	2300      	movs	r3, #0
    761a:	61bb      	str	r3, [r7, #24]
    761c:	68f8      	ldr	r0, [r7, #12]
    761e:	4b23      	ldr	r3, [pc, #140]	; (76ac <timer_add_timer_task+0xa0>)
    7620:	4798      	blx	r3
    7622:	6138      	str	r0, [r7, #16]

	if (!head) {
    7624:	693b      	ldr	r3, [r7, #16]
    7626:	2b00      	cmp	r3, #0
    7628:	d104      	bne.n	7634 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    762a:	68b9      	ldr	r1, [r7, #8]
    762c:	68f8      	ldr	r0, [r7, #12]
    762e:	4b20      	ldr	r3, [pc, #128]	; (76b0 <timer_add_timer_task+0xa4>)
    7630:	4798      	blx	r3
		return;
    7632:	e037      	b.n	76a4 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    7634:	693b      	ldr	r3, [r7, #16]
    7636:	61fb      	str	r3, [r7, #28]
    7638:	e022      	b.n	7680 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    763a:	69fb      	ldr	r3, [r7, #28]
    763c:	685a      	ldr	r2, [r3, #4]
    763e:	687b      	ldr	r3, [r7, #4]
    7640:	429a      	cmp	r2, r3
    7642:	d808      	bhi.n	7656 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    7644:	69fb      	ldr	r3, [r7, #28]
    7646:	689a      	ldr	r2, [r3, #8]
    7648:	69fb      	ldr	r3, [r7, #28]
    764a:	6859      	ldr	r1, [r3, #4]
    764c:	687b      	ldr	r3, [r7, #4]
    764e:	1acb      	subs	r3, r1, r3
    7650:	4413      	add	r3, r2
    7652:	617b      	str	r3, [r7, #20]
    7654:	e009      	b.n	766a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    7656:	69fb      	ldr	r3, [r7, #28]
    7658:	689a      	ldr	r2, [r3, #8]
    765a:	69fb      	ldr	r3, [r7, #28]
    765c:	685b      	ldr	r3, [r3, #4]
    765e:	441a      	add	r2, r3
    7660:	687b      	ldr	r3, [r7, #4]
    7662:	425b      	negs	r3, r3
    7664:	4413      	add	r3, r2
    7666:	3301      	adds	r3, #1
    7668:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    766a:	68bb      	ldr	r3, [r7, #8]
    766c:	689a      	ldr	r2, [r3, #8]
    766e:	697b      	ldr	r3, [r7, #20]
    7670:	429a      	cmp	r2, r3
    7672:	d909      	bls.n	7688 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    7674:	69fb      	ldr	r3, [r7, #28]
    7676:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    7678:	69f8      	ldr	r0, [r7, #28]
    767a:	4b0e      	ldr	r3, [pc, #56]	; (76b4 <timer_add_timer_task+0xa8>)
    767c:	4798      	blx	r3
    767e:	61f8      	str	r0, [r7, #28]
    7680:	69fb      	ldr	r3, [r7, #28]
    7682:	2b00      	cmp	r3, #0
    7684:	d1d9      	bne.n	763a <timer_add_timer_task+0x2e>
    7686:	e000      	b.n	768a <timer_add_timer_task+0x7e>
			break;
    7688:	bf00      	nop
	}

	if (it == head) {
    768a:	69fa      	ldr	r2, [r7, #28]
    768c:	693b      	ldr	r3, [r7, #16]
    768e:	429a      	cmp	r2, r3
    7690:	d104      	bne.n	769c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    7692:	68b9      	ldr	r1, [r7, #8]
    7694:	68f8      	ldr	r0, [r7, #12]
    7696:	4b06      	ldr	r3, [pc, #24]	; (76b0 <timer_add_timer_task+0xa4>)
    7698:	4798      	blx	r3
    769a:	e003      	b.n	76a4 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    769c:	68b9      	ldr	r1, [r7, #8]
    769e:	69b8      	ldr	r0, [r7, #24]
    76a0:	4b05      	ldr	r3, [pc, #20]	; (76b8 <timer_add_timer_task+0xac>)
    76a2:	4798      	blx	r3
	}
}
    76a4:	3720      	adds	r7, #32
    76a6:	46bd      	mov	sp, r7
    76a8:	bd80      	pop	{r7, pc}
    76aa:	bf00      	nop
    76ac:	00007291 	.word	0x00007291
    76b0:	00008131 	.word	0x00008131
    76b4:	000072a9 	.word	0x000072a9
    76b8:	00008189 	.word	0x00008189

000076bc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    76bc:	b580      	push	{r7, lr}
    76be:	b086      	sub	sp, #24
    76c0:	af00      	add	r7, sp, #0
    76c2:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    76c4:	687b      	ldr	r3, [r7, #4]
    76c6:	3b04      	subs	r3, #4
    76c8:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    76ca:	693b      	ldr	r3, [r7, #16]
    76cc:	3318      	adds	r3, #24
    76ce:	4618      	mov	r0, r3
    76d0:	4b27      	ldr	r3, [pc, #156]	; (7770 <timer_process_counted+0xb4>)
    76d2:	4798      	blx	r3
    76d4:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    76d6:	693b      	ldr	r3, [r7, #16]
    76d8:	695b      	ldr	r3, [r3, #20]
    76da:	1c5a      	adds	r2, r3, #1
    76dc:	693b      	ldr	r3, [r7, #16]
    76de:	615a      	str	r2, [r3, #20]
    76e0:	693b      	ldr	r3, [r7, #16]
    76e2:	695b      	ldr	r3, [r3, #20]
    76e4:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    76e6:	693b      	ldr	r3, [r7, #16]
    76e8:	7f1b      	ldrb	r3, [r3, #28]
    76ea:	b2db      	uxtb	r3, r3
    76ec:	f003 0301 	and.w	r3, r3, #1
    76f0:	2b00      	cmp	r3, #0
    76f2:	d106      	bne.n	7702 <timer_process_counted+0x46>
    76f4:	693b      	ldr	r3, [r7, #16]
    76f6:	7f1b      	ldrb	r3, [r3, #28]
    76f8:	b2db      	uxtb	r3, r3
    76fa:	f003 0302 	and.w	r3, r3, #2
    76fe:	2b00      	cmp	r3, #0
    7700:	d027      	beq.n	7752 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    7702:	693b      	ldr	r3, [r7, #16]
    7704:	7f1b      	ldrb	r3, [r3, #28]
    7706:	b2db      	uxtb	r3, r3
    7708:	f043 0302 	orr.w	r3, r3, #2
    770c:	b2da      	uxtb	r2, r3
    770e:	693b      	ldr	r3, [r7, #16]
    7710:	771a      	strb	r2, [r3, #28]
		return;
    7712:	e029      	b.n	7768 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    7714:	697b      	ldr	r3, [r7, #20]
    7716:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    7718:	693b      	ldr	r3, [r7, #16]
    771a:	3318      	adds	r3, #24
    771c:	4618      	mov	r0, r3
    771e:	4b15      	ldr	r3, [pc, #84]	; (7774 <timer_process_counted+0xb8>)
    7720:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    7722:	68bb      	ldr	r3, [r7, #8]
    7724:	7c1b      	ldrb	r3, [r3, #16]
    7726:	2b01      	cmp	r3, #1
    7728:	d109      	bne.n	773e <timer_process_counted+0x82>
			tmp->time_label = time;
    772a:	68bb      	ldr	r3, [r7, #8]
    772c:	68fa      	ldr	r2, [r7, #12]
    772e:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    7730:	693b      	ldr	r3, [r7, #16]
    7732:	3318      	adds	r3, #24
    7734:	68fa      	ldr	r2, [r7, #12]
    7736:	68b9      	ldr	r1, [r7, #8]
    7738:	4618      	mov	r0, r3
    773a:	4b0f      	ldr	r3, [pc, #60]	; (7778 <timer_process_counted+0xbc>)
    773c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    773e:	693b      	ldr	r3, [r7, #16]
    7740:	3318      	adds	r3, #24
    7742:	4618      	mov	r0, r3
    7744:	4b0a      	ldr	r3, [pc, #40]	; (7770 <timer_process_counted+0xb4>)
    7746:	4798      	blx	r3
    7748:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    774a:	68bb      	ldr	r3, [r7, #8]
    774c:	68db      	ldr	r3, [r3, #12]
    774e:	68b8      	ldr	r0, [r7, #8]
    7750:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    7752:	697b      	ldr	r3, [r7, #20]
    7754:	2b00      	cmp	r3, #0
    7756:	d007      	beq.n	7768 <timer_process_counted+0xac>
    7758:	697b      	ldr	r3, [r7, #20]
    775a:	685b      	ldr	r3, [r3, #4]
    775c:	68fa      	ldr	r2, [r7, #12]
    775e:	1ad2      	subs	r2, r2, r3
    7760:	697b      	ldr	r3, [r7, #20]
    7762:	689b      	ldr	r3, [r3, #8]
    7764:	429a      	cmp	r2, r3
    7766:	d2d5      	bcs.n	7714 <timer_process_counted+0x58>
	}
}
    7768:	3718      	adds	r7, #24
    776a:	46bd      	mov	sp, r7
    776c:	bd80      	pop	{r7, pc}
    776e:	bf00      	nop
    7770:	00007291 	.word	0x00007291
    7774:	00008229 	.word	0x00008229
    7778:	0000760d 	.word	0x0000760d

0000777c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    777c:	b480      	push	{r7}
    777e:	b085      	sub	sp, #20
    7780:	af00      	add	r7, sp, #0
    7782:	4603      	mov	r3, r0
    7784:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7786:	2300      	movs	r3, #0
    7788:	73fb      	strb	r3, [r7, #15]
    778a:	e029      	b.n	77e0 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    778c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7790:	4a19      	ldr	r2, [pc, #100]	; (77f8 <_usb_d_find_ep+0x7c>)
    7792:	015b      	lsls	r3, r3, #5
    7794:	4413      	add	r3, r2
    7796:	3301      	adds	r3, #1
    7798:	781b      	ldrb	r3, [r3, #0]
    779a:	79fa      	ldrb	r2, [r7, #7]
    779c:	429a      	cmp	r2, r3
    779e:	d102      	bne.n	77a6 <_usb_d_find_ep+0x2a>
			return i;
    77a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    77a4:	e022      	b.n	77ec <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    77a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    77aa:	4a13      	ldr	r2, [pc, #76]	; (77f8 <_usb_d_find_ep+0x7c>)
    77ac:	015b      	lsls	r3, r3, #5
    77ae:	4413      	add	r3, r2
    77b0:	781b      	ldrb	r3, [r3, #0]
    77b2:	2b00      	cmp	r3, #0
    77b4:	d10e      	bne.n	77d4 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    77b6:	79fb      	ldrb	r3, [r7, #7]
    77b8:	f003 030f 	and.w	r3, r3, #15
    77bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77c0:	490d      	ldr	r1, [pc, #52]	; (77f8 <_usb_d_find_ep+0x7c>)
    77c2:	0152      	lsls	r2, r2, #5
    77c4:	440a      	add	r2, r1
    77c6:	3201      	adds	r2, #1
    77c8:	7812      	ldrb	r2, [r2, #0]
    77ca:	4293      	cmp	r3, r2
    77cc:	d102      	bne.n	77d4 <_usb_d_find_ep+0x58>
			return i;
    77ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
    77d2:	e00b      	b.n	77ec <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    77d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    77d8:	b2db      	uxtb	r3, r3
    77da:	3301      	adds	r3, #1
    77dc:	b2db      	uxtb	r3, r3
    77de:	73fb      	strb	r3, [r7, #15]
    77e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    77e4:	2b03      	cmp	r3, #3
    77e6:	ddd1      	ble.n	778c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    77e8:	f04f 33ff 	mov.w	r3, #4294967295
}
    77ec:	4618      	mov	r0, r3
    77ee:	3714      	adds	r7, #20
    77f0:	46bd      	mov	sp, r7
    77f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    77f6:	4770      	bx	lr
    77f8:	20008770 	.word	0x20008770

000077fc <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    77fc:	b580      	push	{r7, lr}
    77fe:	b088      	sub	sp, #32
    7800:	af00      	add	r7, sp, #0
    7802:	60ba      	str	r2, [r7, #8]
    7804:	607b      	str	r3, [r7, #4]
    7806:	4603      	mov	r3, r0
    7808:	73fb      	strb	r3, [r7, #15]
    780a:	460b      	mov	r3, r1
    780c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    780e:	68bb      	ldr	r3, [r7, #8]
    7810:	617b      	str	r3, [r7, #20]
    7812:	687b      	ldr	r3, [r7, #4]
    7814:	61bb      	str	r3, [r7, #24]
    7816:	7bbb      	ldrb	r3, [r7, #14]
    7818:	2b00      	cmp	r3, #0
    781a:	d004      	beq.n	7826 <_usb_d_trans+0x2a>
    781c:	7bfb      	ldrb	r3, [r7, #15]
    781e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7822:	b2db      	uxtb	r3, r3
    7824:	e003      	b.n	782e <_usb_d_trans+0x32>
    7826:	7bfb      	ldrb	r3, [r7, #15]
    7828:	f003 030f 	and.w	r3, r3, #15
    782c:	b2db      	uxtb	r3, r3
    782e:	773b      	strb	r3, [r7, #28]
    7830:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    7834:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    7836:	f107 0314 	add.w	r3, r7, #20
    783a:	4618      	mov	r0, r3
    783c:	4b03      	ldr	r3, [pc, #12]	; (784c <_usb_d_trans+0x50>)
    783e:	4798      	blx	r3
    7840:	4603      	mov	r3, r0
}
    7842:	4618      	mov	r0, r3
    7844:	3720      	adds	r7, #32
    7846:	46bd      	mov	sp, r7
    7848:	bd80      	pop	{r7, pc}
    784a:	bf00      	nop
    784c:	00010039 	.word	0x00010039

00007850 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    7850:	b480      	push	{r7}
    7852:	b085      	sub	sp, #20
    7854:	af00      	add	r7, sp, #0
    7856:	60f8      	str	r0, [r7, #12]
    7858:	60b9      	str	r1, [r7, #8]
    785a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    785c:	2300      	movs	r3, #0
}
    785e:	4618      	mov	r0, r3
    7860:	3714      	adds	r7, #20
    7862:	46bd      	mov	sp, r7
    7864:	f85d 7b04 	ldr.w	r7, [sp], #4
    7868:	4770      	bx	lr
	...

0000786c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    786c:	b580      	push	{r7, lr}
    786e:	b086      	sub	sp, #24
    7870:	af00      	add	r7, sp, #0
    7872:	4603      	mov	r3, r0
    7874:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7876:	79fb      	ldrb	r3, [r7, #7]
    7878:	4618      	mov	r0, r3
    787a:	4b2a      	ldr	r3, [pc, #168]	; (7924 <usb_d_cb_trans_setup+0xb8>)
    787c:	4798      	blx	r3
    787e:	4603      	mov	r3, r0
    7880:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7882:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7886:	015b      	lsls	r3, r3, #5
    7888:	4a27      	ldr	r2, [pc, #156]	; (7928 <usb_d_cb_trans_setup+0xbc>)
    788a:	4413      	add	r3, r2
    788c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    788e:	693b      	ldr	r3, [r7, #16]
    7890:	330c      	adds	r3, #12
    7892:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    7894:	79fb      	ldrb	r3, [r7, #7]
    7896:	68f9      	ldr	r1, [r7, #12]
    7898:	4618      	mov	r0, r3
    789a:	4b24      	ldr	r3, [pc, #144]	; (792c <usb_d_cb_trans_setup+0xc0>)
    789c:	4798      	blx	r3
    789e:	4603      	mov	r3, r0
    78a0:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    78a2:	7afb      	ldrb	r3, [r7, #11]
    78a4:	2b08      	cmp	r3, #8
    78a6:	d00d      	beq.n	78c4 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    78a8:	79fb      	ldrb	r3, [r7, #7]
    78aa:	2101      	movs	r1, #1
    78ac:	4618      	mov	r0, r3
    78ae:	4b20      	ldr	r3, [pc, #128]	; (7930 <usb_d_cb_trans_setup+0xc4>)
    78b0:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    78b2:	79fb      	ldrb	r3, [r7, #7]
    78b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    78b8:	b2db      	uxtb	r3, r3
    78ba:	2101      	movs	r1, #1
    78bc:	4618      	mov	r0, r3
    78be:	4b1c      	ldr	r3, [pc, #112]	; (7930 <usb_d_cb_trans_setup+0xc4>)
    78c0:	4798      	blx	r3
		return;
    78c2:	e02b      	b.n	791c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    78c4:	79fb      	ldrb	r3, [r7, #7]
    78c6:	2100      	movs	r1, #0
    78c8:	4618      	mov	r0, r3
    78ca:	4b19      	ldr	r3, [pc, #100]	; (7930 <usb_d_cb_trans_setup+0xc4>)
    78cc:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    78ce:	79fb      	ldrb	r3, [r7, #7]
    78d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    78d4:	b2db      	uxtb	r3, r3
    78d6:	2100      	movs	r1, #0
    78d8:	4618      	mov	r0, r3
    78da:	4b15      	ldr	r3, [pc, #84]	; (7930 <usb_d_cb_trans_setup+0xc4>)
    78dc:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    78de:	693b      	ldr	r3, [r7, #16]
    78e0:	2201      	movs	r2, #1
    78e2:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    78e4:	693b      	ldr	r3, [r7, #16]
    78e6:	695b      	ldr	r3, [r3, #20]
    78e8:	79fa      	ldrb	r2, [r7, #7]
    78ea:	68f9      	ldr	r1, [r7, #12]
    78ec:	4610      	mov	r0, r2
    78ee:	4798      	blx	r3
    78f0:	4603      	mov	r3, r0
    78f2:	f083 0301 	eor.w	r3, r3, #1
    78f6:	b2db      	uxtb	r3, r3
    78f8:	2b00      	cmp	r3, #0
    78fa:	d00f      	beq.n	791c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    78fc:	693b      	ldr	r3, [r7, #16]
    78fe:	2205      	movs	r2, #5
    7900:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7902:	79fb      	ldrb	r3, [r7, #7]
    7904:	2101      	movs	r1, #1
    7906:	4618      	mov	r0, r3
    7908:	4b09      	ldr	r3, [pc, #36]	; (7930 <usb_d_cb_trans_setup+0xc4>)
    790a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    790c:	79fb      	ldrb	r3, [r7, #7]
    790e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7912:	b2db      	uxtb	r3, r3
    7914:	2101      	movs	r1, #1
    7916:	4618      	mov	r0, r3
    7918:	4b05      	ldr	r3, [pc, #20]	; (7930 <usb_d_cb_trans_setup+0xc4>)
    791a:	4798      	blx	r3
	}
}
    791c:	3718      	adds	r7, #24
    791e:	46bd      	mov	sp, r7
    7920:	bd80      	pop	{r7, pc}
    7922:	bf00      	nop
    7924:	0000777d 	.word	0x0000777d
    7928:	20008770 	.word	0x20008770
    792c:	0000ff91 	.word	0x0000ff91
    7930:	0000fe09 	.word	0x0000fe09

00007934 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    7934:	b580      	push	{r7, lr}
    7936:	b084      	sub	sp, #16
    7938:	af00      	add	r7, sp, #0
    793a:	4603      	mov	r3, r0
    793c:	6039      	str	r1, [r7, #0]
    793e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7940:	79fb      	ldrb	r3, [r7, #7]
    7942:	4618      	mov	r0, r3
    7944:	4b0d      	ldr	r3, [pc, #52]	; (797c <usb_d_cb_trans_more+0x48>)
    7946:	4798      	blx	r3
    7948:	4603      	mov	r3, r0
    794a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    794c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7950:	015b      	lsls	r3, r3, #5
    7952:	4a0b      	ldr	r2, [pc, #44]	; (7980 <usb_d_cb_trans_more+0x4c>)
    7954:	4413      	add	r3, r2
    7956:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    7958:	68bb      	ldr	r3, [r7, #8]
    795a:	789b      	ldrb	r3, [r3, #2]
    795c:	2b03      	cmp	r3, #3
    795e:	d107      	bne.n	7970 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    7960:	68bb      	ldr	r3, [r7, #8]
    7962:	699b      	ldr	r3, [r3, #24]
    7964:	79fa      	ldrb	r2, [r7, #7]
    7966:	6839      	ldr	r1, [r7, #0]
    7968:	4610      	mov	r0, r2
    796a:	4798      	blx	r3
    796c:	4603      	mov	r3, r0
    796e:	e000      	b.n	7972 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    7970:	2300      	movs	r3, #0
}
    7972:	4618      	mov	r0, r3
    7974:	3710      	adds	r7, #16
    7976:	46bd      	mov	sp, r7
    7978:	bd80      	pop	{r7, pc}
    797a:	bf00      	nop
    797c:	0000777d 	.word	0x0000777d
    7980:	20008770 	.word	0x20008770

00007984 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    7984:	b590      	push	{r4, r7, lr}
    7986:	b087      	sub	sp, #28
    7988:	af02      	add	r7, sp, #8
    798a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    798c:	687b      	ldr	r3, [r7, #4]
    798e:	789b      	ldrb	r3, [r3, #2]
    7990:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	7b1b      	ldrb	r3, [r3, #12]
    7996:	f003 0380 	and.w	r3, r3, #128	; 0x80
    799a:	2b00      	cmp	r3, #0
    799c:	bf14      	ite	ne
    799e:	2301      	movne	r3, #1
    79a0:	2300      	moveq	r3, #0
    79a2:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    79a4:	7bfb      	ldrb	r3, [r7, #15]
    79a6:	2b03      	cmp	r3, #3
    79a8:	d13a      	bne.n	7a20 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    79aa:	687b      	ldr	r3, [r7, #4]
    79ac:	69db      	ldr	r3, [r3, #28]
    79ae:	687a      	ldr	r2, [r7, #4]
    79b0:	7850      	ldrb	r0, [r2, #1]
    79b2:	687a      	ldr	r2, [r7, #4]
    79b4:	320c      	adds	r2, #12
    79b6:	2101      	movs	r1, #1
    79b8:	4798      	blx	r3
    79ba:	4603      	mov	r3, r0
    79bc:	737b      	strb	r3, [r7, #13]
		if (err) {
    79be:	7b7b      	ldrb	r3, [r7, #13]
    79c0:	2b00      	cmp	r3, #0
    79c2:	d015      	beq.n	79f0 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    79c4:	687b      	ldr	r3, [r7, #4]
    79c6:	2205      	movs	r2, #5
    79c8:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    79ca:	687b      	ldr	r3, [r7, #4]
    79cc:	2202      	movs	r2, #2
    79ce:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    79d0:	7bbb      	ldrb	r3, [r7, #14]
    79d2:	2b00      	cmp	r3, #0
    79d4:	d002      	beq.n	79dc <usb_d_ctrl_trans_done+0x58>
    79d6:	687b      	ldr	r3, [r7, #4]
    79d8:	785b      	ldrb	r3, [r3, #1]
    79da:	e004      	b.n	79e6 <usb_d_ctrl_trans_done+0x62>
    79dc:	687b      	ldr	r3, [r7, #4]
    79de:	785b      	ldrb	r3, [r3, #1]
    79e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    79e4:	b2db      	uxtb	r3, r3
    79e6:	2101      	movs	r1, #1
    79e8:	4618      	mov	r0, r3
    79ea:	4b15      	ldr	r3, [pc, #84]	; (7a40 <usb_d_ctrl_trans_done+0xbc>)
    79ec:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    79ee:	e022      	b.n	7a36 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	2204      	movs	r2, #4
    79f4:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    79f6:	687b      	ldr	r3, [r7, #4]
    79f8:	7858      	ldrb	r0, [r3, #1]
    79fa:	7bbb      	ldrb	r3, [r7, #14]
    79fc:	2b00      	cmp	r3, #0
    79fe:	bf14      	ite	ne
    7a00:	2301      	movne	r3, #1
    7a02:	2300      	moveq	r3, #0
    7a04:	b2db      	uxtb	r3, r3
    7a06:	f083 0301 	eor.w	r3, r3, #1
    7a0a:	b2db      	uxtb	r3, r3
    7a0c:	f003 0301 	and.w	r3, r3, #1
    7a10:	b2d9      	uxtb	r1, r3
    7a12:	2301      	movs	r3, #1
    7a14:	9300      	str	r3, [sp, #0]
    7a16:	2300      	movs	r3, #0
    7a18:	2200      	movs	r2, #0
    7a1a:	4c0a      	ldr	r4, [pc, #40]	; (7a44 <usb_d_ctrl_trans_done+0xc0>)
    7a1c:	47a0      	blx	r4
}
    7a1e:	e00a      	b.n	7a36 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    7a20:	687b      	ldr	r3, [r7, #4]
    7a22:	69db      	ldr	r3, [r3, #28]
    7a24:	687a      	ldr	r2, [r7, #4]
    7a26:	7850      	ldrb	r0, [r2, #1]
    7a28:	687a      	ldr	r2, [r7, #4]
    7a2a:	320c      	adds	r2, #12
    7a2c:	2100      	movs	r1, #0
    7a2e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7a30:	687b      	ldr	r3, [r7, #4]
    7a32:	2202      	movs	r2, #2
    7a34:	709a      	strb	r2, [r3, #2]
}
    7a36:	bf00      	nop
    7a38:	3714      	adds	r7, #20
    7a3a:	46bd      	mov	sp, r7
    7a3c:	bd90      	pop	{r4, r7, pc}
    7a3e:	bf00      	nop
    7a40:	0000fe09 	.word	0x0000fe09
    7a44:	000077fd 	.word	0x000077fd

00007a48 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    7a48:	b580      	push	{r7, lr}
    7a4a:	b086      	sub	sp, #24
    7a4c:	af00      	add	r7, sp, #0
    7a4e:	4603      	mov	r3, r0
    7a50:	60b9      	str	r1, [r7, #8]
    7a52:	607a      	str	r2, [r7, #4]
    7a54:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7a56:	7bfb      	ldrb	r3, [r7, #15]
    7a58:	4618      	mov	r0, r3
    7a5a:	4b2f      	ldr	r3, [pc, #188]	; (7b18 <_usb_d_cb_trans_done+0xd0>)
    7a5c:	4798      	blx	r3
    7a5e:	4603      	mov	r3, r0
    7a60:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7a66:	015b      	lsls	r3, r3, #5
    7a68:	4a2c      	ldr	r2, [pc, #176]	; (7b1c <_usb_d_cb_trans_done+0xd4>)
    7a6a:	4413      	add	r3, r2
    7a6c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    7a6e:	68bb      	ldr	r3, [r7, #8]
    7a70:	2b00      	cmp	r3, #0
    7a72:	d10e      	bne.n	7a92 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    7a74:	693b      	ldr	r3, [r7, #16]
    7a76:	2200      	movs	r2, #0
    7a78:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7a7a:	693b      	ldr	r3, [r7, #16]
    7a7c:	781b      	ldrb	r3, [r3, #0]
    7a7e:	2b00      	cmp	r3, #0
    7a80:	d103      	bne.n	7a8a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    7a82:	6938      	ldr	r0, [r7, #16]
    7a84:	4b26      	ldr	r3, [pc, #152]	; (7b20 <_usb_d_cb_trans_done+0xd8>)
    7a86:	4798      	blx	r3
			return;
    7a88:	e043      	b.n	7b12 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    7a8a:	693b      	ldr	r3, [r7, #16]
    7a8c:	2201      	movs	r2, #1
    7a8e:	709a      	strb	r2, [r3, #2]
    7a90:	e038      	b.n	7b04 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    7a92:	68bb      	ldr	r3, [r7, #8]
    7a94:	2b01      	cmp	r3, #1
    7a96:	d113      	bne.n	7ac0 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    7a98:	693b      	ldr	r3, [r7, #16]
    7a9a:	2202      	movs	r2, #2
    7a9c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7a9e:	693b      	ldr	r3, [r7, #16]
    7aa0:	781b      	ldrb	r3, [r3, #0]
    7aa2:	2b00      	cmp	r3, #0
    7aa4:	d108      	bne.n	7ab8 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7aa6:	693b      	ldr	r3, [r7, #16]
    7aa8:	2202      	movs	r2, #2
    7aaa:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7aac:	7bfb      	ldrb	r3, [r7, #15]
    7aae:	2100      	movs	r1, #0
    7ab0:	4618      	mov	r0, r3
    7ab2:	4b1c      	ldr	r3, [pc, #112]	; (7b24 <_usb_d_cb_trans_done+0xdc>)
    7ab4:	4798      	blx	r3
    7ab6:	e025      	b.n	7b04 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    7ab8:	693b      	ldr	r3, [r7, #16]
    7aba:	2205      	movs	r2, #5
    7abc:	709a      	strb	r2, [r3, #2]
    7abe:	e021      	b.n	7b04 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    7ac0:	68bb      	ldr	r3, [r7, #8]
    7ac2:	2b02      	cmp	r3, #2
    7ac4:	d10e      	bne.n	7ae4 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    7ac6:	693b      	ldr	r3, [r7, #16]
    7ac8:	2204      	movs	r2, #4
    7aca:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7acc:	693b      	ldr	r3, [r7, #16]
    7ace:	781b      	ldrb	r3, [r3, #0]
    7ad0:	2b00      	cmp	r3, #0
    7ad2:	d103      	bne.n	7adc <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7ad4:	693b      	ldr	r3, [r7, #16]
    7ad6:	2202      	movs	r2, #2
    7ad8:	709a      	strb	r2, [r3, #2]
			return;
    7ada:	e01a      	b.n	7b12 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    7adc:	693b      	ldr	r3, [r7, #16]
    7ade:	2201      	movs	r2, #1
    7ae0:	709a      	strb	r2, [r3, #2]
    7ae2:	e00f      	b.n	7b04 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    7ae4:	68bb      	ldr	r3, [r7, #8]
    7ae6:	2b03      	cmp	r3, #3
    7ae8:	d106      	bne.n	7af8 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    7aea:	693b      	ldr	r3, [r7, #16]
    7aec:	2200      	movs	r2, #0
    7aee:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    7af0:	693b      	ldr	r3, [r7, #16]
    7af2:	2205      	movs	r2, #5
    7af4:	70da      	strb	r2, [r3, #3]
    7af6:	e005      	b.n	7b04 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    7af8:	693b      	ldr	r3, [r7, #16]
    7afa:	2206      	movs	r2, #6
    7afc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    7afe:	693b      	ldr	r3, [r7, #16]
    7b00:	2206      	movs	r2, #6
    7b02:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    7b04:	693b      	ldr	r3, [r7, #16]
    7b06:	69db      	ldr	r3, [r3, #28]
    7b08:	693a      	ldr	r2, [r7, #16]
    7b0a:	78d1      	ldrb	r1, [r2, #3]
    7b0c:	687a      	ldr	r2, [r7, #4]
    7b0e:	7bf8      	ldrb	r0, [r7, #15]
    7b10:	4798      	blx	r3
}
    7b12:	3718      	adds	r7, #24
    7b14:	46bd      	mov	sp, r7
    7b16:	bd80      	pop	{r7, pc}
    7b18:	0000777d 	.word	0x0000777d
    7b1c:	20008770 	.word	0x20008770
    7b20:	00007985 	.word	0x00007985
    7b24:	0000fe09 	.word	0x0000fe09

00007b28 <usb_d_init>:

int32_t usb_d_init(void)
{
    7b28:	b580      	push	{r7, lr}
    7b2a:	b082      	sub	sp, #8
    7b2c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    7b2e:	4b21      	ldr	r3, [pc, #132]	; (7bb4 <usb_d_init+0x8c>)
    7b30:	4798      	blx	r3
    7b32:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    7b34:	683b      	ldr	r3, [r7, #0]
    7b36:	2b00      	cmp	r3, #0
    7b38:	da01      	bge.n	7b3e <usb_d_init+0x16>
		return rc;
    7b3a:	683b      	ldr	r3, [r7, #0]
    7b3c:	e036      	b.n	7bac <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    7b3e:	2280      	movs	r2, #128	; 0x80
    7b40:	2100      	movs	r1, #0
    7b42:	481d      	ldr	r0, [pc, #116]	; (7bb8 <usb_d_init+0x90>)
    7b44:	4b1d      	ldr	r3, [pc, #116]	; (7bbc <usb_d_init+0x94>)
    7b46:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7b48:	2300      	movs	r3, #0
    7b4a:	71fb      	strb	r3, [r7, #7]
    7b4c:	e01e      	b.n	7b8c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    7b4e:	79fb      	ldrb	r3, [r7, #7]
    7b50:	4a19      	ldr	r2, [pc, #100]	; (7bb8 <usb_d_init+0x90>)
    7b52:	015b      	lsls	r3, r3, #5
    7b54:	4413      	add	r3, r2
    7b56:	3301      	adds	r3, #1
    7b58:	22ff      	movs	r2, #255	; 0xff
    7b5a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    7b5c:	79fb      	ldrb	r3, [r7, #7]
    7b5e:	4a16      	ldr	r2, [pc, #88]	; (7bb8 <usb_d_init+0x90>)
    7b60:	015b      	lsls	r3, r3, #5
    7b62:	4413      	add	r3, r2
    7b64:	3314      	adds	r3, #20
    7b66:	4a16      	ldr	r2, [pc, #88]	; (7bc0 <usb_d_init+0x98>)
    7b68:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    7b6a:	79fb      	ldrb	r3, [r7, #7]
    7b6c:	4a12      	ldr	r2, [pc, #72]	; (7bb8 <usb_d_init+0x90>)
    7b6e:	015b      	lsls	r3, r3, #5
    7b70:	4413      	add	r3, r2
    7b72:	3318      	adds	r3, #24
    7b74:	4a12      	ldr	r2, [pc, #72]	; (7bc0 <usb_d_init+0x98>)
    7b76:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    7b78:	79fb      	ldrb	r3, [r7, #7]
    7b7a:	4a0f      	ldr	r2, [pc, #60]	; (7bb8 <usb_d_init+0x90>)
    7b7c:	015b      	lsls	r3, r3, #5
    7b7e:	4413      	add	r3, r2
    7b80:	331c      	adds	r3, #28
    7b82:	4a0f      	ldr	r2, [pc, #60]	; (7bc0 <usb_d_init+0x98>)
    7b84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7b86:	79fb      	ldrb	r3, [r7, #7]
    7b88:	3301      	adds	r3, #1
    7b8a:	71fb      	strb	r3, [r7, #7]
    7b8c:	79fb      	ldrb	r3, [r7, #7]
    7b8e:	2b03      	cmp	r3, #3
    7b90:	d9dd      	bls.n	7b4e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    7b92:	490c      	ldr	r1, [pc, #48]	; (7bc4 <usb_d_init+0x9c>)
    7b94:	2000      	movs	r0, #0
    7b96:	4b0c      	ldr	r3, [pc, #48]	; (7bc8 <usb_d_init+0xa0>)
    7b98:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    7b9a:	490c      	ldr	r1, [pc, #48]	; (7bcc <usb_d_init+0xa4>)
    7b9c:	2001      	movs	r0, #1
    7b9e:	4b0a      	ldr	r3, [pc, #40]	; (7bc8 <usb_d_init+0xa0>)
    7ba0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    7ba2:	490b      	ldr	r1, [pc, #44]	; (7bd0 <usb_d_init+0xa8>)
    7ba4:	2002      	movs	r0, #2
    7ba6:	4b08      	ldr	r3, [pc, #32]	; (7bc8 <usb_d_init+0xa0>)
    7ba8:	4798      	blx	r3
	return ERR_NONE;
    7baa:	2300      	movs	r3, #0
}
    7bac:	4618      	mov	r0, r3
    7bae:	3708      	adds	r7, #8
    7bb0:	46bd      	mov	sp, r7
    7bb2:	bd80      	pop	{r7, pc}
    7bb4:	0000f651 	.word	0x0000f651
    7bb8:	20008770 	.word	0x20008770
    7bbc:	0001c5d9 	.word	0x0001c5d9
    7bc0:	00007851 	.word	0x00007851
    7bc4:	0000786d 	.word	0x0000786d
    7bc8:	00010299 	.word	0x00010299
    7bcc:	00007935 	.word	0x00007935
    7bd0:	00007a49 	.word	0x00007a49

00007bd4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    7bd4:	b580      	push	{r7, lr}
    7bd6:	b082      	sub	sp, #8
    7bd8:	af00      	add	r7, sp, #0
    7bda:	4603      	mov	r3, r0
    7bdc:	6039      	str	r1, [r7, #0]
    7bde:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    7be0:	79fb      	ldrb	r3, [r7, #7]
    7be2:	6839      	ldr	r1, [r7, #0]
    7be4:	4618      	mov	r0, r3
    7be6:	4b03      	ldr	r3, [pc, #12]	; (7bf4 <usb_d_register_callback+0x20>)
    7be8:	4798      	blx	r3
}
    7bea:	bf00      	nop
    7bec:	3708      	adds	r7, #8
    7bee:	46bd      	mov	sp, r7
    7bf0:	bd80      	pop	{r7, pc}
    7bf2:	bf00      	nop
    7bf4:	00010251 	.word	0x00010251

00007bf8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    7bf8:	b580      	push	{r7, lr}
    7bfa:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    7bfc:	4b02      	ldr	r3, [pc, #8]	; (7c08 <usb_d_enable+0x10>)
    7bfe:	4798      	blx	r3
    7c00:	4603      	mov	r3, r0
}
    7c02:	4618      	mov	r0, r3
    7c04:	bd80      	pop	{r7, pc}
    7c06:	bf00      	nop
    7c08:	0000f741 	.word	0x0000f741

00007c0c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    7c0c:	b580      	push	{r7, lr}
    7c0e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    7c10:	4b01      	ldr	r3, [pc, #4]	; (7c18 <usb_d_attach+0xc>)
    7c12:	4798      	blx	r3
}
    7c14:	bf00      	nop
    7c16:	bd80      	pop	{r7, pc}
    7c18:	0000f7c5 	.word	0x0000f7c5

00007c1c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    7c1c:	b580      	push	{r7, lr}
    7c1e:	b082      	sub	sp, #8
    7c20:	af00      	add	r7, sp, #0
    7c22:	4603      	mov	r3, r0
    7c24:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    7c26:	79fb      	ldrb	r3, [r7, #7]
    7c28:	4618      	mov	r0, r3
    7c2a:	4b03      	ldr	r3, [pc, #12]	; (7c38 <usb_d_set_address+0x1c>)
    7c2c:	4798      	blx	r3
}
    7c2e:	bf00      	nop
    7c30:	3708      	adds	r7, #8
    7c32:	46bd      	mov	sp, r7
    7c34:	bd80      	pop	{r7, pc}
    7c36:	bf00      	nop
    7c38:	0000f7d9 	.word	0x0000f7d9

00007c3c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    7c3c:	b580      	push	{r7, lr}
    7c3e:	b082      	sub	sp, #8
    7c40:	af00      	add	r7, sp, #0
    7c42:	4603      	mov	r3, r0
    7c44:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    7c46:	79fb      	ldrb	r3, [r7, #7]
    7c48:	b29b      	uxth	r3, r3
    7c4a:	461a      	mov	r2, r3
    7c4c:	2100      	movs	r1, #0
    7c4e:	2000      	movs	r0, #0
    7c50:	4b03      	ldr	r3, [pc, #12]	; (7c60 <usb_d_ep0_init+0x24>)
    7c52:	4798      	blx	r3
    7c54:	4603      	mov	r3, r0
}
    7c56:	4618      	mov	r0, r3
    7c58:	3708      	adds	r7, #8
    7c5a:	46bd      	mov	sp, r7
    7c5c:	bd80      	pop	{r7, pc}
    7c5e:	bf00      	nop
    7c60:	00007c65 	.word	0x00007c65

00007c64 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    7c64:	b580      	push	{r7, lr}
    7c66:	b086      	sub	sp, #24
    7c68:	af00      	add	r7, sp, #0
    7c6a:	4603      	mov	r3, r0
    7c6c:	71fb      	strb	r3, [r7, #7]
    7c6e:	460b      	mov	r3, r1
    7c70:	71bb      	strb	r3, [r7, #6]
    7c72:	4613      	mov	r3, r2
    7c74:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    7c76:	79fb      	ldrb	r3, [r7, #7]
    7c78:	4618      	mov	r0, r3
    7c7a:	4b1e      	ldr	r3, [pc, #120]	; (7cf4 <usb_d_ep_init+0x90>)
    7c7c:	4798      	blx	r3
    7c7e:	4603      	mov	r3, r0
    7c80:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7c82:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7c86:	015b      	lsls	r3, r3, #5
    7c88:	4a1b      	ldr	r2, [pc, #108]	; (7cf8 <usb_d_ep_init+0x94>)
    7c8a:	4413      	add	r3, r2
    7c8c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    7c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7c92:	2b00      	cmp	r3, #0
    7c94:	db02      	blt.n	7c9c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    7c96:	f06f 0313 	mvn.w	r3, #19
    7c9a:	e027      	b.n	7cec <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    7c9c:	20ff      	movs	r0, #255	; 0xff
    7c9e:	4b15      	ldr	r3, [pc, #84]	; (7cf4 <usb_d_ep_init+0x90>)
    7ca0:	4798      	blx	r3
    7ca2:	4603      	mov	r3, r0
    7ca4:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    7ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7caa:	2b00      	cmp	r3, #0
    7cac:	da02      	bge.n	7cb4 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    7cae:	f06f 0314 	mvn.w	r3, #20
    7cb2:	e01b      	b.n	7cec <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    7cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7cb8:	015b      	lsls	r3, r3, #5
    7cba:	4a0f      	ldr	r2, [pc, #60]	; (7cf8 <usb_d_ep_init+0x94>)
    7cbc:	4413      	add	r3, r2
    7cbe:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    7cc0:	88ba      	ldrh	r2, [r7, #4]
    7cc2:	79b9      	ldrb	r1, [r7, #6]
    7cc4:	79fb      	ldrb	r3, [r7, #7]
    7cc6:	4618      	mov	r0, r3
    7cc8:	4b0c      	ldr	r3, [pc, #48]	; (7cfc <usb_d_ep_init+0x98>)
    7cca:	4798      	blx	r3
    7ccc:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    7cce:	68fb      	ldr	r3, [r7, #12]
    7cd0:	2b00      	cmp	r3, #0
    7cd2:	da01      	bge.n	7cd8 <usb_d_ep_init+0x74>
		return rc;
    7cd4:	68fb      	ldr	r3, [r7, #12]
    7cd6:	e009      	b.n	7cec <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    7cd8:	693b      	ldr	r3, [r7, #16]
    7cda:	79fa      	ldrb	r2, [r7, #7]
    7cdc:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    7cde:	79bb      	ldrb	r3, [r7, #6]
    7ce0:	f003 0303 	and.w	r3, r3, #3
    7ce4:	b2da      	uxtb	r2, r3
    7ce6:	693b      	ldr	r3, [r7, #16]
    7ce8:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    7cea:	2300      	movs	r3, #0
}
    7cec:	4618      	mov	r0, r3
    7cee:	3718      	adds	r7, #24
    7cf0:	46bd      	mov	sp, r7
    7cf2:	bd80      	pop	{r7, pc}
    7cf4:	0000777d 	.word	0x0000777d
    7cf8:	20008770 	.word	0x20008770
    7cfc:	0000f879 	.word	0x0000f879

00007d00 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    7d00:	b580      	push	{r7, lr}
    7d02:	b084      	sub	sp, #16
    7d04:	af00      	add	r7, sp, #0
    7d06:	4603      	mov	r3, r0
    7d08:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7d0a:	79fb      	ldrb	r3, [r7, #7]
    7d0c:	4618      	mov	r0, r3
    7d0e:	4b0d      	ldr	r3, [pc, #52]	; (7d44 <usb_d_ep_deinit+0x44>)
    7d10:	4798      	blx	r3
    7d12:	4603      	mov	r3, r0
    7d14:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7d1a:	015b      	lsls	r3, r3, #5
    7d1c:	4a0a      	ldr	r2, [pc, #40]	; (7d48 <usb_d_ep_deinit+0x48>)
    7d1e:	4413      	add	r3, r2
    7d20:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    7d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7d26:	2b00      	cmp	r3, #0
    7d28:	db07      	blt.n	7d3a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    7d2a:	79fb      	ldrb	r3, [r7, #7]
    7d2c:	4618      	mov	r0, r3
    7d2e:	4b07      	ldr	r3, [pc, #28]	; (7d4c <usb_d_ep_deinit+0x4c>)
    7d30:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    7d32:	68bb      	ldr	r3, [r7, #8]
    7d34:	22ff      	movs	r2, #255	; 0xff
    7d36:	705a      	strb	r2, [r3, #1]
    7d38:	e000      	b.n	7d3c <usb_d_ep_deinit+0x3c>
		return;
    7d3a:	bf00      	nop
}
    7d3c:	3710      	adds	r7, #16
    7d3e:	46bd      	mov	sp, r7
    7d40:	bd80      	pop	{r7, pc}
    7d42:	bf00      	nop
    7d44:	0000777d 	.word	0x0000777d
    7d48:	20008770 	.word	0x20008770
    7d4c:	0000f9ad 	.word	0x0000f9ad

00007d50 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    7d50:	b580      	push	{r7, lr}
    7d52:	b086      	sub	sp, #24
    7d54:	af00      	add	r7, sp, #0
    7d56:	4603      	mov	r3, r0
    7d58:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7d5a:	79fb      	ldrb	r3, [r7, #7]
    7d5c:	4618      	mov	r0, r3
    7d5e:	4b15      	ldr	r3, [pc, #84]	; (7db4 <usb_d_ep_enable+0x64>)
    7d60:	4798      	blx	r3
    7d62:	4603      	mov	r3, r0
    7d64:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7d6a:	015b      	lsls	r3, r3, #5
    7d6c:	4a12      	ldr	r2, [pc, #72]	; (7db8 <usb_d_ep_enable+0x68>)
    7d6e:	4413      	add	r3, r2
    7d70:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    7d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7d76:	2b00      	cmp	r3, #0
    7d78:	da02      	bge.n	7d80 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    7d7a:	f06f 0311 	mvn.w	r3, #17
    7d7e:	e014      	b.n	7daa <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    7d80:	693b      	ldr	r3, [r7, #16]
    7d82:	781b      	ldrb	r3, [r3, #0]
    7d84:	2b00      	cmp	r3, #0
    7d86:	d101      	bne.n	7d8c <usb_d_ep_enable+0x3c>
    7d88:	2202      	movs	r2, #2
    7d8a:	e000      	b.n	7d8e <usb_d_ep_enable+0x3e>
    7d8c:	2201      	movs	r2, #1
    7d8e:	693b      	ldr	r3, [r7, #16]
    7d90:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    7d92:	79fb      	ldrb	r3, [r7, #7]
    7d94:	4618      	mov	r0, r3
    7d96:	4b09      	ldr	r3, [pc, #36]	; (7dbc <usb_d_ep_enable+0x6c>)
    7d98:	4798      	blx	r3
    7d9a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    7d9c:	68fb      	ldr	r3, [r7, #12]
    7d9e:	2b00      	cmp	r3, #0
    7da0:	da02      	bge.n	7da8 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    7da2:	693b      	ldr	r3, [r7, #16]
    7da4:	2200      	movs	r2, #0
    7da6:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    7da8:	68fb      	ldr	r3, [r7, #12]
}
    7daa:	4618      	mov	r0, r3
    7dac:	3718      	adds	r7, #24
    7dae:	46bd      	mov	sp, r7
    7db0:	bd80      	pop	{r7, pc}
    7db2:	bf00      	nop
    7db4:	0000777d 	.word	0x0000777d
    7db8:	20008770 	.word	0x20008770
    7dbc:	0000fa91 	.word	0x0000fa91

00007dc0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    7dc0:	b590      	push	{r4, r7, lr}
    7dc2:	b08d      	sub	sp, #52	; 0x34
    7dc4:	af02      	add	r7, sp, #8
    7dc6:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    7dc8:	687b      	ldr	r3, [r7, #4]
    7dca:	7a1b      	ldrb	r3, [r3, #8]
    7dcc:	4618      	mov	r0, r3
    7dce:	4b51      	ldr	r3, [pc, #324]	; (7f14 <usb_d_ep_transfer+0x154>)
    7dd0:	4798      	blx	r3
    7dd2:	4603      	mov	r3, r0
    7dd4:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    7dd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
    7dda:	015b      	lsls	r3, r3, #5
    7ddc:	4a4e      	ldr	r2, [pc, #312]	; (7f18 <usb_d_ep_transfer+0x158>)
    7dde:	4413      	add	r3, r2
    7de0:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    7de2:	687b      	ldr	r3, [r7, #4]
    7de4:	7a1b      	ldrb	r3, [r3, #8]
    7de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7dea:	2b00      	cmp	r3, #0
    7dec:	bf14      	ite	ne
    7dee:	2301      	movne	r3, #1
    7df0:	2300      	moveq	r3, #0
    7df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    7df6:	687b      	ldr	r3, [r7, #4]
    7df8:	7a5b      	ldrb	r3, [r3, #9]
    7dfa:	2b00      	cmp	r3, #0
    7dfc:	bf14      	ite	ne
    7dfe:	2301      	movne	r3, #1
    7e00:	2300      	moveq	r3, #0
    7e02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    7e06:	687b      	ldr	r3, [r7, #4]
    7e08:	685b      	ldr	r3, [r3, #4]
    7e0a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    7e0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    7e10:	2b00      	cmp	r3, #0
    7e12:	da02      	bge.n	7e1a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    7e14:	f06f 0311 	mvn.w	r3, #17
    7e18:	e077      	b.n	7f0a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    7e1a:	f107 0308 	add.w	r3, r7, #8
    7e1e:	4618      	mov	r0, r3
    7e20:	4b3e      	ldr	r3, [pc, #248]	; (7f1c <usb_d_ep_transfer+0x15c>)
    7e22:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    7e24:	69bb      	ldr	r3, [r7, #24]
    7e26:	789b      	ldrb	r3, [r3, #2]
    7e28:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    7e2a:	7bfb      	ldrb	r3, [r7, #15]
    7e2c:	b2db      	uxtb	r3, r3
    7e2e:	2b01      	cmp	r3, #1
    7e30:	d10c      	bne.n	7e4c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    7e32:	69bb      	ldr	r3, [r7, #24]
    7e34:	2203      	movs	r2, #3
    7e36:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    7e38:	f107 0308 	add.w	r3, r7, #8
    7e3c:	4618      	mov	r0, r3
    7e3e:	4b38      	ldr	r3, [pc, #224]	; (7f20 <usb_d_ep_transfer+0x160>)
    7e40:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7e42:	69bb      	ldr	r3, [r7, #24]
    7e44:	781b      	ldrb	r3, [r3, #0]
    7e46:	2b00      	cmp	r3, #0
    7e48:	d151      	bne.n	7eee <usb_d_ep_transfer+0x12e>
    7e4a:	e017      	b.n	7e7c <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    7e4c:	f107 0308 	add.w	r3, r7, #8
    7e50:	4618      	mov	r0, r3
    7e52:	4b33      	ldr	r3, [pc, #204]	; (7f20 <usb_d_ep_transfer+0x160>)
    7e54:	4798      	blx	r3
		switch (state) {
    7e56:	7bfb      	ldrb	r3, [r7, #15]
    7e58:	b2db      	uxtb	r3, r3
    7e5a:	2b05      	cmp	r3, #5
    7e5c:	d004      	beq.n	7e68 <usb_d_ep_transfer+0xa8>
    7e5e:	2b06      	cmp	r3, #6
    7e60:	d004      	beq.n	7e6c <usb_d_ep_transfer+0xac>
    7e62:	2b00      	cmp	r3, #0
    7e64:	d005      	beq.n	7e72 <usb_d_ep_transfer+0xb2>
    7e66:	e007      	b.n	7e78 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    7e68:	2302      	movs	r3, #2
    7e6a:	e04e      	b.n	7f0a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    7e6c:	f06f 030f 	mvn.w	r3, #15
    7e70:	e04b      	b.n	7f0a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    7e72:	f06f 0312 	mvn.w	r3, #18
    7e76:	e048      	b.n	7f0a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    7e78:	2301      	movs	r3, #1
    7e7a:	e046      	b.n	7f0a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    7e7c:	69bb      	ldr	r3, [r7, #24]
    7e7e:	7c9b      	ldrb	r3, [r3, #18]
    7e80:	b29a      	uxth	r2, r3
    7e82:	69bb      	ldr	r3, [r7, #24]
    7e84:	7cdb      	ldrb	r3, [r3, #19]
    7e86:	b29b      	uxth	r3, r3
    7e88:	021b      	lsls	r3, r3, #8
    7e8a:	b29b      	uxth	r3, r3
    7e8c:	4413      	add	r3, r2
    7e8e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    7e90:	8afb      	ldrh	r3, [r7, #22]
    7e92:	2b00      	cmp	r3, #0
    7e94:	d10b      	bne.n	7eae <usb_d_ep_transfer+0xee>
			dir                 = true;
    7e96:	2301      	movs	r3, #1
    7e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    7e9c:	2300      	movs	r3, #0
    7e9e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    7ea0:	2301      	movs	r3, #1
    7ea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    7ea6:	69bb      	ldr	r3, [r7, #24]
    7ea8:	2204      	movs	r2, #4
    7eaa:	709a      	strb	r2, [r3, #2]
    7eac:	e01f      	b.n	7eee <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    7eae:	69bb      	ldr	r3, [r7, #24]
    7eb0:	7b1b      	ldrb	r3, [r3, #12]
    7eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7eb6:	2b00      	cmp	r3, #0
    7eb8:	bf14      	ite	ne
    7eba:	2301      	movne	r3, #1
    7ebc:	2300      	moveq	r3, #0
    7ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    7ec2:	8afa      	ldrh	r2, [r7, #22]
    7ec4:	6a3b      	ldr	r3, [r7, #32]
    7ec6:	429a      	cmp	r2, r3
    7ec8:	d201      	bcs.n	7ece <usb_d_ep_transfer+0x10e>
				len = req_len;
    7eca:	8afb      	ldrh	r3, [r7, #22]
    7ecc:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    7ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7ed2:	2b00      	cmp	r3, #0
    7ed4:	d008      	beq.n	7ee8 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    7ed6:	8afa      	ldrh	r2, [r7, #22]
    7ed8:	6a3b      	ldr	r3, [r7, #32]
    7eda:	429a      	cmp	r2, r3
    7edc:	bf8c      	ite	hi
    7ede:	2301      	movhi	r3, #1
    7ee0:	2300      	movls	r3, #0
    7ee2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    7ee6:	e002      	b.n	7eee <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    7ee8:	2300      	movs	r3, #0
    7eea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    7eee:	687b      	ldr	r3, [r7, #4]
    7ef0:	7a18      	ldrb	r0, [r3, #8]
    7ef2:	687b      	ldr	r3, [r7, #4]
    7ef4:	681a      	ldr	r2, [r3, #0]
    7ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    7efa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    7efe:	9300      	str	r3, [sp, #0]
    7f00:	6a3b      	ldr	r3, [r7, #32]
    7f02:	4c08      	ldr	r4, [pc, #32]	; (7f24 <usb_d_ep_transfer+0x164>)
    7f04:	47a0      	blx	r4
    7f06:	6138      	str	r0, [r7, #16]
	return rc;
    7f08:	693b      	ldr	r3, [r7, #16]
}
    7f0a:	4618      	mov	r0, r3
    7f0c:	372c      	adds	r7, #44	; 0x2c
    7f0e:	46bd      	mov	sp, r7
    7f10:	bd90      	pop	{r4, r7, pc}
    7f12:	bf00      	nop
    7f14:	0000777d 	.word	0x0000777d
    7f18:	20008770 	.word	0x20008770
    7f1c:	00010c85 	.word	0x00010c85
    7f20:	00010cab 	.word	0x00010cab
    7f24:	000077fd 	.word	0x000077fd

00007f28 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    7f28:	b580      	push	{r7, lr}
    7f2a:	b084      	sub	sp, #16
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	4603      	mov	r3, r0
    7f30:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7f32:	79fb      	ldrb	r3, [r7, #7]
    7f34:	4618      	mov	r0, r3
    7f36:	4b0e      	ldr	r3, [pc, #56]	; (7f70 <usb_d_ep_abort+0x48>)
    7f38:	4798      	blx	r3
    7f3a:	4603      	mov	r3, r0
    7f3c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7f42:	015b      	lsls	r3, r3, #5
    7f44:	4a0b      	ldr	r2, [pc, #44]	; (7f74 <usb_d_ep_abort+0x4c>)
    7f46:	4413      	add	r3, r2
    7f48:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    7f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7f4e:	2b00      	cmp	r3, #0
    7f50:	db0a      	blt.n	7f68 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    7f52:	79fb      	ldrb	r3, [r7, #7]
    7f54:	4618      	mov	r0, r3
    7f56:	4b08      	ldr	r3, [pc, #32]	; (7f78 <usb_d_ep_abort+0x50>)
    7f58:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7f5a:	68bb      	ldr	r3, [r7, #8]
    7f5c:	2201      	movs	r2, #1
    7f5e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    7f60:	68bb      	ldr	r3, [r7, #8]
    7f62:	2204      	movs	r2, #4
    7f64:	70da      	strb	r2, [r3, #3]
    7f66:	e000      	b.n	7f6a <usb_d_ep_abort+0x42>
		return;
    7f68:	bf00      	nop
}
    7f6a:	3710      	adds	r7, #16
    7f6c:	46bd      	mov	sp, r7
    7f6e:	bd80      	pop	{r7, pc}
    7f70:	0000777d 	.word	0x0000777d
    7f74:	20008770 	.word	0x20008770
    7f78:	000101fd 	.word	0x000101fd

00007f7c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    7f7c:	b580      	push	{r7, lr}
    7f7e:	b086      	sub	sp, #24
    7f80:	af00      	add	r7, sp, #0
    7f82:	4603      	mov	r3, r0
    7f84:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7f86:	79fb      	ldrb	r3, [r7, #7]
    7f88:	4618      	mov	r0, r3
    7f8a:	4b1a      	ldr	r3, [pc, #104]	; (7ff4 <_usb_d_ep_halt_clr+0x78>)
    7f8c:	4798      	blx	r3
    7f8e:	4603      	mov	r3, r0
    7f90:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7f92:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7f96:	015b      	lsls	r3, r3, #5
    7f98:	4a17      	ldr	r2, [pc, #92]	; (7ff8 <_usb_d_ep_halt_clr+0x7c>)
    7f9a:	4413      	add	r3, r2
    7f9c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    7f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7fa2:	2b00      	cmp	r3, #0
    7fa4:	da02      	bge.n	7fac <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    7fa6:	f06f 0311 	mvn.w	r3, #17
    7faa:	e01f      	b.n	7fec <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    7fac:	79fb      	ldrb	r3, [r7, #7]
    7fae:	2102      	movs	r1, #2
    7fb0:	4618      	mov	r0, r3
    7fb2:	4b12      	ldr	r3, [pc, #72]	; (7ffc <_usb_d_ep_halt_clr+0x80>)
    7fb4:	4798      	blx	r3
    7fb6:	4603      	mov	r3, r0
    7fb8:	2b00      	cmp	r3, #0
    7fba:	d016      	beq.n	7fea <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7fbc:	79fb      	ldrb	r3, [r7, #7]
    7fbe:	2100      	movs	r1, #0
    7fc0:	4618      	mov	r0, r3
    7fc2:	4b0e      	ldr	r3, [pc, #56]	; (7ffc <_usb_d_ep_halt_clr+0x80>)
    7fc4:	4798      	blx	r3
    7fc6:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    7fc8:	68fb      	ldr	r3, [r7, #12]
    7fca:	2b00      	cmp	r3, #0
    7fcc:	da01      	bge.n	7fd2 <_usb_d_ep_halt_clr+0x56>
			return rc;
    7fce:	68fb      	ldr	r3, [r7, #12]
    7fd0:	e00c      	b.n	7fec <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7fd2:	693b      	ldr	r3, [r7, #16]
    7fd4:	2201      	movs	r2, #1
    7fd6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    7fd8:	693b      	ldr	r3, [r7, #16]
    7fda:	2203      	movs	r2, #3
    7fdc:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    7fde:	693b      	ldr	r3, [r7, #16]
    7fe0:	69db      	ldr	r3, [r3, #28]
    7fe2:	79f8      	ldrb	r0, [r7, #7]
    7fe4:	2200      	movs	r2, #0
    7fe6:	2103      	movs	r1, #3
    7fe8:	4798      	blx	r3
	}
	return ERR_NONE;
    7fea:	2300      	movs	r3, #0
}
    7fec:	4618      	mov	r0, r3
    7fee:	3718      	adds	r7, #24
    7ff0:	46bd      	mov	sp, r7
    7ff2:	bd80      	pop	{r7, pc}
    7ff4:	0000777d 	.word	0x0000777d
    7ff8:	20008770 	.word	0x20008770
    7ffc:	0000fe09 	.word	0x0000fe09

00008000 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    8000:	b580      	push	{r7, lr}
    8002:	b082      	sub	sp, #8
    8004:	af00      	add	r7, sp, #0
    8006:	4603      	mov	r3, r0
    8008:	460a      	mov	r2, r1
    800a:	71fb      	strb	r3, [r7, #7]
    800c:	4613      	mov	r3, r2
    800e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    8010:	79bb      	ldrb	r3, [r7, #6]
    8012:	2b00      	cmp	r3, #0
    8014:	d105      	bne.n	8022 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    8016:	79fb      	ldrb	r3, [r7, #7]
    8018:	4618      	mov	r0, r3
    801a:	4b0c      	ldr	r3, [pc, #48]	; (804c <usb_d_ep_halt+0x4c>)
    801c:	4798      	blx	r3
    801e:	4603      	mov	r3, r0
    8020:	e00f      	b.n	8042 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    8022:	79bb      	ldrb	r3, [r7, #6]
    8024:	2b01      	cmp	r3, #1
    8026:	d106      	bne.n	8036 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    8028:	79fb      	ldrb	r3, [r7, #7]
    802a:	2101      	movs	r1, #1
    802c:	4618      	mov	r0, r3
    802e:	4b08      	ldr	r3, [pc, #32]	; (8050 <usb_d_ep_halt+0x50>)
    8030:	4798      	blx	r3
    8032:	4603      	mov	r3, r0
    8034:	e005      	b.n	8042 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    8036:	79fb      	ldrb	r3, [r7, #7]
    8038:	2102      	movs	r1, #2
    803a:	4618      	mov	r0, r3
    803c:	4b04      	ldr	r3, [pc, #16]	; (8050 <usb_d_ep_halt+0x50>)
    803e:	4798      	blx	r3
    8040:	4603      	mov	r3, r0
	}
}
    8042:	4618      	mov	r0, r3
    8044:	3708      	adds	r7, #8
    8046:	46bd      	mov	sp, r7
    8048:	bd80      	pop	{r7, pc}
    804a:	bf00      	nop
    804c:	00007f7d 	.word	0x00007f7d
    8050:	0000fe09 	.word	0x0000fe09

00008054 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    8054:	b580      	push	{r7, lr}
    8056:	b086      	sub	sp, #24
    8058:	af00      	add	r7, sp, #0
    805a:	4603      	mov	r3, r0
    805c:	603a      	str	r2, [r7, #0]
    805e:	71fb      	strb	r3, [r7, #7]
    8060:	460b      	mov	r3, r1
    8062:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    8064:	79fb      	ldrb	r3, [r7, #7]
    8066:	4618      	mov	r0, r3
    8068:	4b16      	ldr	r3, [pc, #88]	; (80c4 <usb_d_ep_register_callback+0x70>)
    806a:	4798      	blx	r3
    806c:	4603      	mov	r3, r0
    806e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    8070:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8074:	015b      	lsls	r3, r3, #5
    8076:	4a14      	ldr	r2, [pc, #80]	; (80c8 <usb_d_ep_register_callback+0x74>)
    8078:	4413      	add	r3, r2
    807a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    807c:	683b      	ldr	r3, [r7, #0]
    807e:	2b00      	cmp	r3, #0
    8080:	d001      	beq.n	8086 <usb_d_ep_register_callback+0x32>
    8082:	683b      	ldr	r3, [r7, #0]
    8084:	e000      	b.n	8088 <usb_d_ep_register_callback+0x34>
    8086:	4b11      	ldr	r3, [pc, #68]	; (80cc <usb_d_ep_register_callback+0x78>)
    8088:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    808a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    808e:	2b00      	cmp	r3, #0
    8090:	db13      	blt.n	80ba <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    8092:	79bb      	ldrb	r3, [r7, #6]
    8094:	2b01      	cmp	r3, #1
    8096:	d008      	beq.n	80aa <usb_d_ep_register_callback+0x56>
    8098:	2b02      	cmp	r3, #2
    809a:	d00a      	beq.n	80b2 <usb_d_ep_register_callback+0x5e>
    809c:	2b00      	cmp	r3, #0
    809e:	d000      	beq.n	80a2 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    80a0:	e00c      	b.n	80bc <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    80a2:	693b      	ldr	r3, [r7, #16]
    80a4:	68fa      	ldr	r2, [r7, #12]
    80a6:	615a      	str	r2, [r3, #20]
		break;
    80a8:	e008      	b.n	80bc <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    80aa:	693b      	ldr	r3, [r7, #16]
    80ac:	68fa      	ldr	r2, [r7, #12]
    80ae:	619a      	str	r2, [r3, #24]
		break;
    80b0:	e004      	b.n	80bc <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    80b2:	693b      	ldr	r3, [r7, #16]
    80b4:	68fa      	ldr	r2, [r7, #12]
    80b6:	61da      	str	r2, [r3, #28]
		break;
    80b8:	e000      	b.n	80bc <usb_d_ep_register_callback+0x68>
		return;
    80ba:	bf00      	nop
	}
}
    80bc:	3718      	adds	r7, #24
    80be:	46bd      	mov	sp, r7
    80c0:	bd80      	pop	{r7, pc}
    80c2:	bf00      	nop
    80c4:	0000777d 	.word	0x0000777d
    80c8:	20008770 	.word	0x20008770
    80cc:	00007851 	.word	0x00007851

000080d0 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    80d0:	b480      	push	{r7}
    80d2:	b085      	sub	sp, #20
    80d4:	af00      	add	r7, sp, #0
    80d6:	4603      	mov	r3, r0
    80d8:	60b9      	str	r1, [r7, #8]
    80da:	607a      	str	r2, [r7, #4]
    80dc:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    80de:	7bfb      	ldrb	r3, [r7, #15]
    80e0:	f083 0301 	eor.w	r3, r3, #1
    80e4:	b2db      	uxtb	r3, r3
    80e6:	2b00      	cmp	r3, #0
    80e8:	d000      	beq.n	80ec <assert+0x1c>
		__asm("BKPT #0");
    80ea:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    80ec:	bf00      	nop
    80ee:	3714      	adds	r7, #20
    80f0:	46bd      	mov	sp, r7
    80f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    80f6:	4770      	bx	lr

000080f8 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    80f8:	b480      	push	{r7}
    80fa:	b085      	sub	sp, #20
    80fc:	af00      	add	r7, sp, #0
    80fe:	6078      	str	r0, [r7, #4]
    8100:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    8102:	687b      	ldr	r3, [r7, #4]
    8104:	681b      	ldr	r3, [r3, #0]
    8106:	60fb      	str	r3, [r7, #12]
    8108:	e008      	b.n	811c <is_list_element+0x24>
		if (it == element) {
    810a:	68fa      	ldr	r2, [r7, #12]
    810c:	683b      	ldr	r3, [r7, #0]
    810e:	429a      	cmp	r2, r3
    8110:	d101      	bne.n	8116 <is_list_element+0x1e>
			return true;
    8112:	2301      	movs	r3, #1
    8114:	e006      	b.n	8124 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    8116:	68fb      	ldr	r3, [r7, #12]
    8118:	681b      	ldr	r3, [r3, #0]
    811a:	60fb      	str	r3, [r7, #12]
    811c:	68fb      	ldr	r3, [r7, #12]
    811e:	2b00      	cmp	r3, #0
    8120:	d1f3      	bne.n	810a <is_list_element+0x12>
		}
	}

	return false;
    8122:	2300      	movs	r3, #0
}
    8124:	4618      	mov	r0, r3
    8126:	3714      	adds	r7, #20
    8128:	46bd      	mov	sp, r7
    812a:	f85d 7b04 	ldr.w	r7, [sp], #4
    812e:	4770      	bx	lr

00008130 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    8130:	b580      	push	{r7, lr}
    8132:	b082      	sub	sp, #8
    8134:	af00      	add	r7, sp, #0
    8136:	6078      	str	r0, [r7, #4]
    8138:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    813a:	6839      	ldr	r1, [r7, #0]
    813c:	6878      	ldr	r0, [r7, #4]
    813e:	4b0f      	ldr	r3, [pc, #60]	; (817c <list_insert_as_head+0x4c>)
    8140:	4798      	blx	r3
    8142:	4603      	mov	r3, r0
    8144:	2b00      	cmp	r3, #0
    8146:	bf14      	ite	ne
    8148:	2301      	movne	r3, #1
    814a:	2300      	moveq	r3, #0
    814c:	b2db      	uxtb	r3, r3
    814e:	f083 0301 	eor.w	r3, r3, #1
    8152:	b2db      	uxtb	r3, r3
    8154:	f003 0301 	and.w	r3, r3, #1
    8158:	b2db      	uxtb	r3, r3
    815a:	2239      	movs	r2, #57	; 0x39
    815c:	4908      	ldr	r1, [pc, #32]	; (8180 <list_insert_as_head+0x50>)
    815e:	4618      	mov	r0, r3
    8160:	4b08      	ldr	r3, [pc, #32]	; (8184 <list_insert_as_head+0x54>)
    8162:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    8164:	687b      	ldr	r3, [r7, #4]
    8166:	681a      	ldr	r2, [r3, #0]
    8168:	683b      	ldr	r3, [r7, #0]
    816a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    816c:	687b      	ldr	r3, [r7, #4]
    816e:	683a      	ldr	r2, [r7, #0]
    8170:	601a      	str	r2, [r3, #0]
}
    8172:	bf00      	nop
    8174:	3708      	adds	r7, #8
    8176:	46bd      	mov	sp, r7
    8178:	bd80      	pop	{r7, pc}
    817a:	bf00      	nop
    817c:	000080f9 	.word	0x000080f9
    8180:	00020afc 	.word	0x00020afc
    8184:	000080d1 	.word	0x000080d1

00008188 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    8188:	b480      	push	{r7}
    818a:	b083      	sub	sp, #12
    818c:	af00      	add	r7, sp, #0
    818e:	6078      	str	r0, [r7, #4]
    8190:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    8192:	687b      	ldr	r3, [r7, #4]
    8194:	681a      	ldr	r2, [r3, #0]
    8196:	683b      	ldr	r3, [r7, #0]
    8198:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    819a:	687b      	ldr	r3, [r7, #4]
    819c:	683a      	ldr	r2, [r7, #0]
    819e:	601a      	str	r2, [r3, #0]
}
    81a0:	bf00      	nop
    81a2:	370c      	adds	r7, #12
    81a4:	46bd      	mov	sp, r7
    81a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    81aa:	4770      	bx	lr

000081ac <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    81ac:	b580      	push	{r7, lr}
    81ae:	b084      	sub	sp, #16
    81b0:	af00      	add	r7, sp, #0
    81b2:	6078      	str	r0, [r7, #4]
    81b4:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    81b6:	687b      	ldr	r3, [r7, #4]
    81b8:	681b      	ldr	r3, [r3, #0]
    81ba:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    81bc:	6839      	ldr	r1, [r7, #0]
    81be:	6878      	ldr	r0, [r7, #4]
    81c0:	4b16      	ldr	r3, [pc, #88]	; (821c <list_insert_at_end+0x70>)
    81c2:	4798      	blx	r3
    81c4:	4603      	mov	r3, r0
    81c6:	2b00      	cmp	r3, #0
    81c8:	bf14      	ite	ne
    81ca:	2301      	movne	r3, #1
    81cc:	2300      	moveq	r3, #0
    81ce:	b2db      	uxtb	r3, r3
    81d0:	f083 0301 	eor.w	r3, r3, #1
    81d4:	b2db      	uxtb	r3, r3
    81d6:	f003 0301 	and.w	r3, r3, #1
    81da:	b2db      	uxtb	r3, r3
    81dc:	224f      	movs	r2, #79	; 0x4f
    81de:	4910      	ldr	r1, [pc, #64]	; (8220 <list_insert_at_end+0x74>)
    81e0:	4618      	mov	r0, r3
    81e2:	4b10      	ldr	r3, [pc, #64]	; (8224 <list_insert_at_end+0x78>)
    81e4:	4798      	blx	r3

	if (!list->head) {
    81e6:	687b      	ldr	r3, [r7, #4]
    81e8:	681b      	ldr	r3, [r3, #0]
    81ea:	2b00      	cmp	r3, #0
    81ec:	d109      	bne.n	8202 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    81ee:	687b      	ldr	r3, [r7, #4]
    81f0:	683a      	ldr	r2, [r7, #0]
    81f2:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    81f4:	683b      	ldr	r3, [r7, #0]
    81f6:	2200      	movs	r2, #0
    81f8:	601a      	str	r2, [r3, #0]
		return;
    81fa:	e00c      	b.n	8216 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    81fc:	68fb      	ldr	r3, [r7, #12]
    81fe:	681b      	ldr	r3, [r3, #0]
    8200:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    8202:	68fb      	ldr	r3, [r7, #12]
    8204:	681b      	ldr	r3, [r3, #0]
    8206:	2b00      	cmp	r3, #0
    8208:	d1f8      	bne.n	81fc <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    820a:	68fb      	ldr	r3, [r7, #12]
    820c:	683a      	ldr	r2, [r7, #0]
    820e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    8210:	683b      	ldr	r3, [r7, #0]
    8212:	2200      	movs	r2, #0
    8214:	601a      	str	r2, [r3, #0]
}
    8216:	3710      	adds	r7, #16
    8218:	46bd      	mov	sp, r7
    821a:	bd80      	pop	{r7, pc}
    821c:	000080f9 	.word	0x000080f9
    8220:	00020afc 	.word	0x00020afc
    8224:	000080d1 	.word	0x000080d1

00008228 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    8228:	b480      	push	{r7}
    822a:	b085      	sub	sp, #20
    822c:	af00      	add	r7, sp, #0
    822e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    8230:	687b      	ldr	r3, [r7, #4]
    8232:	681b      	ldr	r3, [r3, #0]
    8234:	2b00      	cmp	r3, #0
    8236:	d009      	beq.n	824c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    8238:	687b      	ldr	r3, [r7, #4]
    823a:	681b      	ldr	r3, [r3, #0]
    823c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    823e:	687b      	ldr	r3, [r7, #4]
    8240:	681b      	ldr	r3, [r3, #0]
    8242:	681a      	ldr	r2, [r3, #0]
    8244:	687b      	ldr	r3, [r7, #4]
    8246:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    8248:	68fb      	ldr	r3, [r7, #12]
    824a:	e000      	b.n	824e <list_remove_head+0x26>
	}

	return NULL;
    824c:	2300      	movs	r3, #0
}
    824e:	4618      	mov	r0, r3
    8250:	3714      	adds	r7, #20
    8252:	46bd      	mov	sp, r7
    8254:	f85d 7b04 	ldr.w	r7, [sp], #4
    8258:	4770      	bx	lr

0000825a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    825a:	b480      	push	{r7}
    825c:	b085      	sub	sp, #20
    825e:	af00      	add	r7, sp, #0
    8260:	6078      	str	r0, [r7, #4]
    8262:	6039      	str	r1, [r7, #0]
	if (!element) {
    8264:	683b      	ldr	r3, [r7, #0]
    8266:	2b00      	cmp	r3, #0
    8268:	d101      	bne.n	826e <list_delete_element+0x14>
		return false;
    826a:	2300      	movs	r3, #0
    826c:	e024      	b.n	82b8 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    826e:	687b      	ldr	r3, [r7, #4]
    8270:	681a      	ldr	r2, [r3, #0]
    8272:	683b      	ldr	r3, [r7, #0]
    8274:	429a      	cmp	r2, r3
    8276:	d106      	bne.n	8286 <list_delete_element+0x2c>
		list->head = list->head->next;
    8278:	687b      	ldr	r3, [r7, #4]
    827a:	681b      	ldr	r3, [r3, #0]
    827c:	681a      	ldr	r2, [r3, #0]
    827e:	687b      	ldr	r3, [r7, #4]
    8280:	601a      	str	r2, [r3, #0]
		return true;
    8282:	2301      	movs	r3, #1
    8284:	e018      	b.n	82b8 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    8286:	687b      	ldr	r3, [r7, #4]
    8288:	681b      	ldr	r3, [r3, #0]
    828a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    828c:	e002      	b.n	8294 <list_delete_element+0x3a>
			it = it->next;
    828e:	68fb      	ldr	r3, [r7, #12]
    8290:	681b      	ldr	r3, [r3, #0]
    8292:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    8294:	68fb      	ldr	r3, [r7, #12]
    8296:	2b00      	cmp	r3, #0
    8298:	d004      	beq.n	82a4 <list_delete_element+0x4a>
    829a:	68fb      	ldr	r3, [r7, #12]
    829c:	681a      	ldr	r2, [r3, #0]
    829e:	683b      	ldr	r3, [r7, #0]
    82a0:	429a      	cmp	r2, r3
    82a2:	d1f4      	bne.n	828e <list_delete_element+0x34>
		}
		if (it) {
    82a4:	68fb      	ldr	r3, [r7, #12]
    82a6:	2b00      	cmp	r3, #0
    82a8:	d005      	beq.n	82b6 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    82aa:	683b      	ldr	r3, [r7, #0]
    82ac:	681a      	ldr	r2, [r3, #0]
    82ae:	68fb      	ldr	r3, [r7, #12]
    82b0:	601a      	str	r2, [r3, #0]
			return true;
    82b2:	2301      	movs	r3, #1
    82b4:	e000      	b.n	82b8 <list_delete_element+0x5e>
		}
	}

	return false;
    82b6:	2300      	movs	r3, #0
}
    82b8:	4618      	mov	r0, r3
    82ba:	3714      	adds	r7, #20
    82bc:	46bd      	mov	sp, r7
    82be:	f85d 7b04 	ldr.w	r7, [sp], #4
    82c2:	4770      	bx	lr

000082c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    82c4:	b480      	push	{r7}
    82c6:	b083      	sub	sp, #12
    82c8:	af00      	add	r7, sp, #0
    82ca:	4603      	mov	r3, r0
    82cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    82ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82d2:	2b00      	cmp	r3, #0
    82d4:	db0b      	blt.n	82ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82d6:	4909      	ldr	r1, [pc, #36]	; (82fc <__NVIC_EnableIRQ+0x38>)
    82d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82dc:	095b      	lsrs	r3, r3, #5
    82de:	88fa      	ldrh	r2, [r7, #6]
    82e0:	f002 021f 	and.w	r2, r2, #31
    82e4:	2001      	movs	r0, #1
    82e6:	fa00 f202 	lsl.w	r2, r0, r2
    82ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    82ee:	bf00      	nop
    82f0:	370c      	adds	r7, #12
    82f2:	46bd      	mov	sp, r7
    82f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    82f8:	4770      	bx	lr
    82fa:	bf00      	nop
    82fc:	e000e100 	.word	0xe000e100

00008300 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    8300:	b480      	push	{r7}
    8302:	b083      	sub	sp, #12
    8304:	af00      	add	r7, sp, #0
    8306:	4603      	mov	r3, r0
    8308:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    830a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    830e:	2b00      	cmp	r3, #0
    8310:	db10      	blt.n	8334 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8312:	490b      	ldr	r1, [pc, #44]	; (8340 <__NVIC_DisableIRQ+0x40>)
    8314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8318:	095b      	lsrs	r3, r3, #5
    831a:	88fa      	ldrh	r2, [r7, #6]
    831c:	f002 021f 	and.w	r2, r2, #31
    8320:	2001      	movs	r0, #1
    8322:	fa00 f202 	lsl.w	r2, r0, r2
    8326:	3320      	adds	r3, #32
    8328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    832c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8330:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    8334:	bf00      	nop
    8336:	370c      	adds	r7, #12
    8338:	46bd      	mov	sp, r7
    833a:	f85d 7b04 	ldr.w	r7, [sp], #4
    833e:	4770      	bx	lr
    8340:	e000e100 	.word	0xe000e100

00008344 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    8344:	b480      	push	{r7}
    8346:	b083      	sub	sp, #12
    8348:	af00      	add	r7, sp, #0
    834a:	4603      	mov	r3, r0
    834c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    834e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8352:	2b00      	cmp	r3, #0
    8354:	db0c      	blt.n	8370 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8356:	4909      	ldr	r1, [pc, #36]	; (837c <__NVIC_ClearPendingIRQ+0x38>)
    8358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    835c:	095b      	lsrs	r3, r3, #5
    835e:	88fa      	ldrh	r2, [r7, #6]
    8360:	f002 021f 	and.w	r2, r2, #31
    8364:	2001      	movs	r0, #1
    8366:	fa00 f202 	lsl.w	r2, r0, r2
    836a:	3360      	adds	r3, #96	; 0x60
    836c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    8370:	bf00      	nop
    8372:	370c      	adds	r7, #12
    8374:	46bd      	mov	sp, r7
    8376:	f85d 7b04 	ldr.w	r7, [sp], #4
    837a:	4770      	bx	lr
    837c:	e000e100 	.word	0xe000e100

00008380 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    8380:	b480      	push	{r7}
    8382:	b083      	sub	sp, #12
    8384:	af00      	add	r7, sp, #0
    8386:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    8388:	687b      	ldr	r3, [r7, #4]
    838a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    838c:	095b      	lsrs	r3, r3, #5
    838e:	f003 0301 	and.w	r3, r3, #1
    8392:	2b00      	cmp	r3, #0
    8394:	bf14      	ite	ne
    8396:	2301      	movne	r3, #1
    8398:	2300      	moveq	r3, #0
    839a:	b2db      	uxtb	r3, r3
}
    839c:	4618      	mov	r0, r3
    839e:	370c      	adds	r7, #12
    83a0:	46bd      	mov	sp, r7
    83a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83a6:	4770      	bx	lr

000083a8 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    83a8:	b480      	push	{r7}
    83aa:	b083      	sub	sp, #12
    83ac:	af00      	add	r7, sp, #0
    83ae:	6078      	str	r0, [r7, #4]
    83b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    83b2:	687b      	ldr	r3, [r7, #4]
    83b4:	683a      	ldr	r2, [r7, #0]
    83b6:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    83b8:	bf00      	nop
    83ba:	370c      	adds	r7, #12
    83bc:	46bd      	mov	sp, r7
    83be:	f85d 7b04 	ldr.w	r7, [sp], #4
    83c2:	4770      	bx	lr

000083c4 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    83c4:	b480      	push	{r7}
    83c6:	b083      	sub	sp, #12
    83c8:	af00      	add	r7, sp, #0
    83ca:	6078      	str	r0, [r7, #4]
    83cc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    83ce:	687b      	ldr	r3, [r7, #4]
    83d0:	683a      	ldr	r2, [r7, #0]
    83d2:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    83d4:	bf00      	nop
    83d6:	370c      	adds	r7, #12
    83d8:	46bd      	mov	sp, r7
    83da:	f85d 7b04 	ldr.w	r7, [sp], #4
    83de:	4770      	bx	lr

000083e0 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    83e0:	b480      	push	{r7}
    83e2:	b083      	sub	sp, #12
    83e4:	af00      	add	r7, sp, #0
    83e6:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    83e8:	687b      	ldr	r3, [r7, #4]
    83ea:	699b      	ldr	r3, [r3, #24]
    83ec:	f043 0201 	orr.w	r2, r3, #1
    83f0:	687b      	ldr	r3, [r7, #4]
    83f2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    83f4:	bf00      	nop
    83f6:	370c      	adds	r7, #12
    83f8:	46bd      	mov	sp, r7
    83fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    83fe:	4770      	bx	lr

00008400 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    8400:	b480      	push	{r7}
    8402:	b085      	sub	sp, #20
    8404:	af00      	add	r7, sp, #0
    8406:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    8408:	687b      	ldr	r3, [r7, #4]
    840a:	699b      	ldr	r3, [r3, #24]
    840c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    840e:	68fb      	ldr	r3, [r7, #12]
    8410:	f003 0301 	and.w	r3, r3, #1
    8414:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8416:	68fb      	ldr	r3, [r7, #12]
    8418:	2b00      	cmp	r3, #0
    841a:	bf14      	ite	ne
    841c:	2301      	movne	r3, #1
    841e:	2300      	moveq	r3, #0
    8420:	b2db      	uxtb	r3, r3
}
    8422:	4618      	mov	r0, r3
    8424:	3714      	adds	r7, #20
    8426:	46bd      	mov	sp, r7
    8428:	f85d 7b04 	ldr.w	r7, [sp], #4
    842c:	4770      	bx	lr

0000842e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    842e:	b480      	push	{r7}
    8430:	b083      	sub	sp, #12
    8432:	af00      	add	r7, sp, #0
    8434:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    8436:	687b      	ldr	r3, [r7, #4]
    8438:	699b      	ldr	r3, [r3, #24]
    843a:	f023 0201 	bic.w	r2, r3, #1
    843e:	687b      	ldr	r3, [r7, #4]
    8440:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8442:	bf00      	nop
    8444:	370c      	adds	r7, #12
    8446:	46bd      	mov	sp, r7
    8448:	f85d 7b04 	ldr.w	r7, [sp], #4
    844c:	4770      	bx	lr

0000844e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    844e:	b480      	push	{r7}
    8450:	b083      	sub	sp, #12
    8452:	af00      	add	r7, sp, #0
    8454:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    8456:	687b      	ldr	r3, [r7, #4]
    8458:	699b      	ldr	r3, [r3, #24]
    845a:	f043 0202 	orr.w	r2, r3, #2
    845e:	687b      	ldr	r3, [r7, #4]
    8460:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8462:	bf00      	nop
    8464:	370c      	adds	r7, #12
    8466:	46bd      	mov	sp, r7
    8468:	f85d 7b04 	ldr.w	r7, [sp], #4
    846c:	4770      	bx	lr

0000846e <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    846e:	b480      	push	{r7}
    8470:	b083      	sub	sp, #12
    8472:	af00      	add	r7, sp, #0
    8474:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    8476:	687b      	ldr	r3, [r7, #4]
    8478:	699b      	ldr	r3, [r3, #24]
    847a:	f023 0202 	bic.w	r2, r3, #2
    847e:	687b      	ldr	r3, [r7, #4]
    8480:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8482:	bf00      	nop
    8484:	370c      	adds	r7, #12
    8486:	46bd      	mov	sp, r7
    8488:	f85d 7b04 	ldr.w	r7, [sp], #4
    848c:	4770      	bx	lr

0000848e <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    848e:	b480      	push	{r7}
    8490:	b083      	sub	sp, #12
    8492:	af00      	add	r7, sp, #0
    8494:	6078      	str	r0, [r7, #4]
    8496:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    8498:	687b      	ldr	r3, [r7, #4]
    849a:	699a      	ldr	r2, [r3, #24]
    849c:	683b      	ldr	r3, [r7, #0]
    849e:	431a      	orrs	r2, r3
    84a0:	687b      	ldr	r3, [r7, #4]
    84a2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    84a4:	bf00      	nop
    84a6:	370c      	adds	r7, #12
    84a8:	46bd      	mov	sp, r7
    84aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ae:	4770      	bx	lr

000084b0 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    84b0:	b480      	push	{r7}
    84b2:	b083      	sub	sp, #12
    84b4:	af00      	add	r7, sp, #0
    84b6:	6078      	str	r0, [r7, #4]
    84b8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    84ba:	687b      	ldr	r3, [r7, #4]
    84bc:	683a      	ldr	r2, [r7, #0]
    84be:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    84c0:	bf00      	nop
    84c2:	370c      	adds	r7, #12
    84c4:	46bd      	mov	sp, r7
    84c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ca:	4770      	bx	lr

000084cc <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    84cc:	b480      	push	{r7}
    84ce:	b083      	sub	sp, #12
    84d0:	af00      	add	r7, sp, #0
    84d2:	6078      	str	r0, [r7, #4]
    84d4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    84d6:	687b      	ldr	r3, [r7, #4]
    84d8:	683a      	ldr	r2, [r7, #0]
    84da:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    84dc:	bf00      	nop
    84de:	370c      	adds	r7, #12
    84e0:	46bd      	mov	sp, r7
    84e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    84e6:	4770      	bx	lr

000084e8 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    84e8:	b480      	push	{r7}
    84ea:	b083      	sub	sp, #12
    84ec:	af00      	add	r7, sp, #0
    84ee:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    84f0:	687b      	ldr	r3, [r7, #4]
    84f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    84f4:	4618      	mov	r0, r3
    84f6:	370c      	adds	r7, #12
    84f8:	46bd      	mov	sp, r7
    84fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    84fe:	4770      	bx	lr

00008500 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    8500:	b480      	push	{r7}
    8502:	b083      	sub	sp, #12
    8504:	af00      	add	r7, sp, #0
    8506:	6078      	str	r0, [r7, #4]
    8508:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    850a:	687b      	ldr	r3, [r7, #4]
    850c:	683a      	ldr	r2, [r7, #0]
    850e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    8510:	bf00      	nop
    8512:	370c      	adds	r7, #12
    8514:	46bd      	mov	sp, r7
    8516:	f85d 7b04 	ldr.w	r7, [sp], #4
    851a:	4770      	bx	lr

0000851c <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    851c:	b480      	push	{r7}
    851e:	b083      	sub	sp, #12
    8520:	af00      	add	r7, sp, #0
    8522:	6078      	str	r0, [r7, #4]
    8524:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    8526:	687b      	ldr	r3, [r7, #4]
    8528:	683a      	ldr	r2, [r7, #0]
    852a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    852e:	bf00      	nop
    8530:	370c      	adds	r7, #12
    8532:	46bd      	mov	sp, r7
    8534:	f85d 7b04 	ldr.w	r7, [sp], #4
    8538:	4770      	bx	lr

0000853a <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    853a:	b480      	push	{r7}
    853c:	b083      	sub	sp, #12
    853e:	af00      	add	r7, sp, #0
    8540:	6078      	str	r0, [r7, #4]
    8542:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    8544:	687b      	ldr	r3, [r7, #4]
    8546:	683a      	ldr	r2, [r7, #0]
    8548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    854c:	bf00      	nop
    854e:	370c      	adds	r7, #12
    8550:	46bd      	mov	sp, r7
    8552:	f85d 7b04 	ldr.w	r7, [sp], #4
    8556:	4770      	bx	lr

00008558 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    8558:	b480      	push	{r7}
    855a:	b083      	sub	sp, #12
    855c:	af00      	add	r7, sp, #0
    855e:	6078      	str	r0, [r7, #4]
    8560:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	683a      	ldr	r2, [r7, #0]
    8566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    856a:	bf00      	nop
    856c:	370c      	adds	r7, #12
    856e:	46bd      	mov	sp, r7
    8570:	f85d 7b04 	ldr.w	r7, [sp], #4
    8574:	4770      	bx	lr

00008576 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    8576:	b480      	push	{r7}
    8578:	b083      	sub	sp, #12
    857a:	af00      	add	r7, sp, #0
    857c:	6078      	str	r0, [r7, #4]
    857e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    8580:	687b      	ldr	r3, [r7, #4]
    8582:	683a      	ldr	r2, [r7, #0]
    8584:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    8588:	bf00      	nop
    858a:	370c      	adds	r7, #12
    858c:	46bd      	mov	sp, r7
    858e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8592:	4770      	bx	lr

00008594 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    8594:	b480      	push	{r7}
    8596:	b083      	sub	sp, #12
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
    859c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    859e:	687b      	ldr	r3, [r7, #4]
    85a0:	683a      	ldr	r2, [r7, #0]
    85a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    85a6:	bf00      	nop
    85a8:	370c      	adds	r7, #12
    85aa:	46bd      	mov	sp, r7
    85ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    85b0:	4770      	bx	lr

000085b2 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    85b2:	b480      	push	{r7}
    85b4:	b083      	sub	sp, #12
    85b6:	af00      	add	r7, sp, #0
    85b8:	6078      	str	r0, [r7, #4]
    85ba:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    85bc:	687b      	ldr	r3, [r7, #4]
    85be:	683a      	ldr	r2, [r7, #0]
    85c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    85c4:	bf00      	nop
    85c6:	370c      	adds	r7, #12
    85c8:	46bd      	mov	sp, r7
    85ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ce:	4770      	bx	lr

000085d0 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    85d0:	b480      	push	{r7}
    85d2:	b083      	sub	sp, #12
    85d4:	af00      	add	r7, sp, #0
    85d6:	6078      	str	r0, [r7, #4]
    85d8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    85da:	687b      	ldr	r3, [r7, #4]
    85dc:	683a      	ldr	r2, [r7, #0]
    85de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    85e2:	bf00      	nop
    85e4:	370c      	adds	r7, #12
    85e6:	46bd      	mov	sp, r7
    85e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ec:	4770      	bx	lr

000085ee <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    85ee:	b480      	push	{r7}
    85f0:	b083      	sub	sp, #12
    85f2:	af00      	add	r7, sp, #0
    85f4:	6078      	str	r0, [r7, #4]
    85f6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    85f8:	687b      	ldr	r3, [r7, #4]
    85fa:	683a      	ldr	r2, [r7, #0]
    85fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    8600:	bf00      	nop
    8602:	370c      	adds	r7, #12
    8604:	46bd      	mov	sp, r7
    8606:	f85d 7b04 	ldr.w	r7, [sp], #4
    860a:	4770      	bx	lr

0000860c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    860c:	b480      	push	{r7}
    860e:	b083      	sub	sp, #12
    8610:	af00      	add	r7, sp, #0
    8612:	6078      	str	r0, [r7, #4]
    8614:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	683a      	ldr	r2, [r7, #0]
    861a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    861e:	bf00      	nop
    8620:	370c      	adds	r7, #12
    8622:	46bd      	mov	sp, r7
    8624:	f85d 7b04 	ldr.w	r7, [sp], #4
    8628:	4770      	bx	lr
	...

0000862c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    862c:	b580      	push	{r7, lr}
    862e:	b082      	sub	sp, #8
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
    8634:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    8636:	687b      	ldr	r3, [r7, #4]
    8638:	683a      	ldr	r2, [r7, #0]
    863a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    863c:	687b      	ldr	r3, [r7, #4]
    863e:	681b      	ldr	r3, [r3, #0]
    8640:	4618      	mov	r0, r3
    8642:	4b55      	ldr	r3, [pc, #340]	; (8798 <_can_async_init+0x16c>)
    8644:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    8646:	bf00      	nop
    8648:	687b      	ldr	r3, [r7, #4]
    864a:	681b      	ldr	r3, [r3, #0]
    864c:	4618      	mov	r0, r3
    864e:	4b53      	ldr	r3, [pc, #332]	; (879c <_can_async_init+0x170>)
    8650:	4798      	blx	r3
    8652:	4603      	mov	r3, r0
    8654:	f083 0301 	eor.w	r3, r3, #1
    8658:	b2db      	uxtb	r3, r3
    865a:	2b00      	cmp	r3, #0
    865c:	d1f4      	bne.n	8648 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    865e:	687b      	ldr	r3, [r7, #4]
    8660:	681b      	ldr	r3, [r3, #0]
    8662:	4618      	mov	r0, r3
    8664:	4b4e      	ldr	r3, [pc, #312]	; (87a0 <_can_async_init+0x174>)
    8666:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    8668:	683b      	ldr	r3, [r7, #0]
    866a:	4a4e      	ldr	r2, [pc, #312]	; (87a4 <_can_async_init+0x178>)
    866c:	4293      	cmp	r3, r2
    866e:	d17a      	bne.n	8766 <_can_async_init+0x13a>
		_can1_dev    = dev;
    8670:	4a4d      	ldr	r2, [pc, #308]	; (87a8 <_can_async_init+0x17c>)
    8672:	687b      	ldr	r3, [r7, #4]
    8674:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    8676:	687b      	ldr	r3, [r7, #4]
    8678:	4a4c      	ldr	r2, [pc, #304]	; (87ac <_can_async_init+0x180>)
    867a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    867c:	687b      	ldr	r3, [r7, #4]
    867e:	681b      	ldr	r3, [r3, #0]
    8680:	f44f 7140 	mov.w	r1, #768	; 0x300
    8684:	4618      	mov	r0, r3
    8686:	4b4a      	ldr	r3, [pc, #296]	; (87b0 <_can_async_init+0x184>)
    8688:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    868a:	687b      	ldr	r3, [r7, #4]
    868c:	681b      	ldr	r3, [r3, #0]
    868e:	2102      	movs	r1, #2
    8690:	4618      	mov	r0, r3
    8692:	4b48      	ldr	r3, [pc, #288]	; (87b4 <_can_async_init+0x188>)
    8694:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    8696:	687b      	ldr	r3, [r7, #4]
    8698:	681b      	ldr	r3, [r3, #0]
    869a:	4947      	ldr	r1, [pc, #284]	; (87b8 <_can_async_init+0x18c>)
    869c:	4618      	mov	r0, r3
    869e:	4b47      	ldr	r3, [pc, #284]	; (87bc <_can_async_init+0x190>)
    86a0:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    86a2:	687b      	ldr	r3, [r7, #4]
    86a4:	681b      	ldr	r3, [r3, #0]
    86a6:	4946      	ldr	r1, [pc, #280]	; (87c0 <_can_async_init+0x194>)
    86a8:	4618      	mov	r0, r3
    86aa:	4b46      	ldr	r3, [pc, #280]	; (87c4 <_can_async_init+0x198>)
    86ac:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    86ae:	687b      	ldr	r3, [r7, #4]
    86b0:	681a      	ldr	r2, [r3, #0]
    86b2:	4b45      	ldr	r3, [pc, #276]	; (87c8 <_can_async_init+0x19c>)
    86b4:	b29b      	uxth	r3, r3
    86b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    86ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    86be:	4619      	mov	r1, r3
    86c0:	4610      	mov	r0, r2
    86c2:	4b42      	ldr	r3, [pc, #264]	; (87cc <_can_async_init+0x1a0>)
    86c4:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    86c6:	687b      	ldr	r3, [r7, #4]
    86c8:	681b      	ldr	r3, [r3, #0]
    86ca:	2107      	movs	r1, #7
    86cc:	4618      	mov	r0, r3
    86ce:	4b40      	ldr	r3, [pc, #256]	; (87d0 <_can_async_init+0x1a4>)
    86d0:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	681b      	ldr	r3, [r3, #0]
    86d6:	2107      	movs	r1, #7
    86d8:	4618      	mov	r0, r3
    86da:	4b3e      	ldr	r3, [pc, #248]	; (87d4 <_can_async_init+0x1a8>)
    86dc:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    86de:	687b      	ldr	r3, [r7, #4]
    86e0:	681a      	ldr	r2, [r3, #0]
    86e2:	4b3d      	ldr	r3, [pc, #244]	; (87d8 <_can_async_init+0x1ac>)
    86e4:	b29b      	uxth	r3, r3
    86e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    86ea:	4619      	mov	r1, r3
    86ec:	4610      	mov	r0, r2
    86ee:	4b3b      	ldr	r3, [pc, #236]	; (87dc <_can_async_init+0x1b0>)
    86f0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    86f2:	687b      	ldr	r3, [r7, #4]
    86f4:	681a      	ldr	r2, [r3, #0]
    86f6:	4b3a      	ldr	r3, [pc, #232]	; (87e0 <_can_async_init+0x1b4>)
    86f8:	b29b      	uxth	r3, r3
    86fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    86fe:	4619      	mov	r1, r3
    8700:	4610      	mov	r0, r2
    8702:	4b38      	ldr	r3, [pc, #224]	; (87e4 <_can_async_init+0x1b8>)
    8704:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    8706:	687b      	ldr	r3, [r7, #4]
    8708:	681b      	ldr	r3, [r3, #0]
    870a:	2108      	movs	r1, #8
    870c:	4618      	mov	r0, r3
    870e:	4b36      	ldr	r3, [pc, #216]	; (87e8 <_can_async_init+0x1bc>)
    8710:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    8712:	687b      	ldr	r3, [r7, #4]
    8714:	681a      	ldr	r2, [r3, #0]
    8716:	4b35      	ldr	r3, [pc, #212]	; (87ec <_can_async_init+0x1c0>)
    8718:	b29b      	uxth	r3, r3
    871a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    871e:	4619      	mov	r1, r3
    8720:	4610      	mov	r0, r2
    8722:	4b33      	ldr	r3, [pc, #204]	; (87f0 <_can_async_init+0x1c4>)
    8724:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    8726:	687b      	ldr	r3, [r7, #4]
    8728:	681a      	ldr	r2, [r3, #0]
    872a:	4b32      	ldr	r3, [pc, #200]	; (87f4 <_can_async_init+0x1c8>)
    872c:	b29b      	uxth	r3, r3
    872e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8732:	4619      	mov	r1, r3
    8734:	4610      	mov	r0, r2
    8736:	4b30      	ldr	r3, [pc, #192]	; (87f8 <_can_async_init+0x1cc>)
    8738:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    873a:	687b      	ldr	r3, [r7, #4]
    873c:	681b      	ldr	r3, [r3, #0]
    873e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    8742:	4618      	mov	r0, r3
    8744:	4b2d      	ldr	r3, [pc, #180]	; (87fc <_can_async_init+0x1d0>)
    8746:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    8748:	204f      	movs	r0, #79	; 0x4f
    874a:	4b2d      	ldr	r3, [pc, #180]	; (8800 <_can_async_init+0x1d4>)
    874c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    874e:	204f      	movs	r0, #79	; 0x4f
    8750:	4b2c      	ldr	r3, [pc, #176]	; (8804 <_can_async_init+0x1d8>)
    8752:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    8754:	204f      	movs	r0, #79	; 0x4f
    8756:	4b2c      	ldr	r3, [pc, #176]	; (8808 <_can_async_init+0x1dc>)
    8758:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    875a:	687b      	ldr	r3, [r7, #4]
    875c:	681b      	ldr	r3, [r3, #0]
    875e:	2101      	movs	r1, #1
    8760:	4618      	mov	r0, r3
    8762:	4b2a      	ldr	r3, [pc, #168]	; (880c <_can_async_init+0x1e0>)
    8764:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    8766:	687b      	ldr	r3, [r7, #4]
    8768:	681b      	ldr	r3, [r3, #0]
    876a:	4618      	mov	r0, r3
    876c:	4b28      	ldr	r3, [pc, #160]	; (8810 <_can_async_init+0x1e4>)
    876e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    8770:	687b      	ldr	r3, [r7, #4]
    8772:	681b      	ldr	r3, [r3, #0]
    8774:	4618      	mov	r0, r3
    8776:	4b27      	ldr	r3, [pc, #156]	; (8814 <_can_async_init+0x1e8>)
    8778:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    877a:	bf00      	nop
    877c:	687b      	ldr	r3, [r7, #4]
    877e:	681b      	ldr	r3, [r3, #0]
    8780:	4618      	mov	r0, r3
    8782:	4b06      	ldr	r3, [pc, #24]	; (879c <_can_async_init+0x170>)
    8784:	4798      	blx	r3
    8786:	4603      	mov	r3, r0
    8788:	2b00      	cmp	r3, #0
    878a:	d1f7      	bne.n	877c <_can_async_init+0x150>
	};

	return ERR_NONE;
    878c:	2300      	movs	r3, #0
}
    878e:	4618      	mov	r0, r3
    8790:	3708      	adds	r7, #8
    8792:	46bd      	mov	sp, r7
    8794:	bd80      	pop	{r7, pc}
    8796:	bf00      	nop
    8798:	000083e1 	.word	0x000083e1
    879c:	00008401 	.word	0x00008401
    87a0:	0000844f 	.word	0x0000844f
    87a4:	42000400 	.word	0x42000400
    87a8:	20008890 	.word	0x20008890
    87ac:	20000068 	.word	0x20000068
    87b0:	0000848f 	.word	0x0000848f
    87b4:	000083a9 	.word	0x000083a9
    87b8:	00010c01 	.word	0x00010c01
    87bc:	000084b1 	.word	0x000084b1
    87c0:	00010c10 	.word	0x00010c10
    87c4:	000083c5 	.word	0x000083c5
    87c8:	2000a96c 	.word	0x2000a96c
    87cc:	00008595 	.word	0x00008595
    87d0:	000085b3 	.word	0x000085b3
    87d4:	000085ef 	.word	0x000085ef
    87d8:	2000a924 	.word	0x2000a924
    87dc:	000085d1 	.word	0x000085d1
    87e0:	200087f0 	.word	0x200087f0
    87e4:	0000860d 	.word	0x0000860d
    87e8:	0000851d 	.word	0x0000851d
    87ec:	20008800 	.word	0x20008800
    87f0:	0000853b 	.word	0x0000853b
    87f4:	20008880 	.word	0x20008880
    87f8:	00008559 	.word	0x00008559
    87fc:	00008577 	.word	0x00008577
    8800:	00008301 	.word	0x00008301
    8804:	00008345 	.word	0x00008345
    8808:	000082c5 	.word	0x000082c5
    880c:	00008501 	.word	0x00008501
    8810:	0000846f 	.word	0x0000846f
    8814:	0000842f 	.word	0x0000842f

00008818 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    8818:	b590      	push	{r4, r7, lr}
    881a:	b083      	sub	sp, #12
    881c:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    881e:	4b2c      	ldr	r3, [pc, #176]	; (88d0 <CAN1_Handler+0xb8>)
    8820:	681b      	ldr	r3, [r3, #0]
    8822:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    8824:	687b      	ldr	r3, [r7, #4]
    8826:	681b      	ldr	r3, [r3, #0]
    8828:	4618      	mov	r0, r3
    882a:	4b2a      	ldr	r3, [pc, #168]	; (88d4 <CAN1_Handler+0xbc>)
    882c:	4798      	blx	r3
    882e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    8830:	683b      	ldr	r3, [r7, #0]
    8832:	f003 0301 	and.w	r3, r3, #1
    8836:	2b00      	cmp	r3, #0
    8838:	d003      	beq.n	8842 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    883a:	687b      	ldr	r3, [r7, #4]
    883c:	689b      	ldr	r3, [r3, #8]
    883e:	6878      	ldr	r0, [r7, #4]
    8840:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    8842:	683b      	ldr	r3, [r7, #0]
    8844:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8848:	2b00      	cmp	r3, #0
    884a:	d003      	beq.n	8854 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    884c:	687b      	ldr	r3, [r7, #4]
    884e:	685b      	ldr	r3, [r3, #4]
    8850:	6878      	ldr	r0, [r7, #4]
    8852:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    8854:	683b      	ldr	r3, [r7, #0]
    8856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    885a:	2b00      	cmp	r3, #0
    885c:	d004      	beq.n	8868 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    885e:	687b      	ldr	r3, [r7, #4]
    8860:	68db      	ldr	r3, [r3, #12]
    8862:	2103      	movs	r1, #3
    8864:	6878      	ldr	r0, [r7, #4]
    8866:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    8868:	683b      	ldr	r3, [r7, #0]
    886a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    886e:	2b00      	cmp	r3, #0
    8870:	d004      	beq.n	887c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    8872:	687b      	ldr	r3, [r7, #4]
    8874:	68db      	ldr	r3, [r3, #12]
    8876:	2100      	movs	r1, #0
    8878:	6878      	ldr	r0, [r7, #4]
    887a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    887c:	683b      	ldr	r3, [r7, #0]
    887e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    8882:	2b00      	cmp	r3, #0
    8884:	d00f      	beq.n	88a6 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    8886:	687b      	ldr	r3, [r7, #4]
    8888:	68dc      	ldr	r4, [r3, #12]
    888a:	687b      	ldr	r3, [r7, #4]
    888c:	681b      	ldr	r3, [r3, #0]
    888e:	4618      	mov	r0, r3
    8890:	4b11      	ldr	r3, [pc, #68]	; (88d8 <CAN1_Handler+0xc0>)
    8892:	4798      	blx	r3
    8894:	4603      	mov	r3, r0
    8896:	2b00      	cmp	r3, #0
    8898:	d001      	beq.n	889e <CAN1_Handler+0x86>
    889a:	2302      	movs	r3, #2
    889c:	e000      	b.n	88a0 <CAN1_Handler+0x88>
    889e:	2301      	movs	r3, #1
    88a0:	4619      	mov	r1, r3
    88a2:	6878      	ldr	r0, [r7, #4]
    88a4:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    88a6:	683b      	ldr	r3, [r7, #0]
    88a8:	f003 0308 	and.w	r3, r3, #8
    88ac:	2b00      	cmp	r3, #0
    88ae:	d004      	beq.n	88ba <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    88b0:	687b      	ldr	r3, [r7, #4]
    88b2:	68db      	ldr	r3, [r3, #12]
    88b4:	2104      	movs	r1, #4
    88b6:	6878      	ldr	r0, [r7, #4]
    88b8:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    88ba:	687b      	ldr	r3, [r7, #4]
    88bc:	681b      	ldr	r3, [r3, #0]
    88be:	6839      	ldr	r1, [r7, #0]
    88c0:	4618      	mov	r0, r3
    88c2:	4b06      	ldr	r3, [pc, #24]	; (88dc <CAN1_Handler+0xc4>)
    88c4:	4798      	blx	r3
}
    88c6:	bf00      	nop
    88c8:	370c      	adds	r7, #12
    88ca:	46bd      	mov	sp, r7
    88cc:	bd90      	pop	{r4, r7, pc}
    88ce:	bf00      	nop
    88d0:	20008890 	.word	0x20008890
    88d4:	000084e9 	.word	0x000084e9
    88d8:	00008381 	.word	0x00008381
    88dc:	000084cd 	.word	0x000084cd

000088e0 <__NVIC_SetPendingIRQ>:
{
    88e0:	b480      	push	{r7}
    88e2:	b083      	sub	sp, #12
    88e4:	af00      	add	r7, sp, #0
    88e6:	4603      	mov	r3, r0
    88e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    88ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    88ee:	2b00      	cmp	r3, #0
    88f0:	db0c      	blt.n	890c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    88f2:	4909      	ldr	r1, [pc, #36]	; (8918 <__NVIC_SetPendingIRQ+0x38>)
    88f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    88f8:	095b      	lsrs	r3, r3, #5
    88fa:	88fa      	ldrh	r2, [r7, #6]
    88fc:	f002 021f 	and.w	r2, r2, #31
    8900:	2001      	movs	r0, #1
    8902:	fa00 f202 	lsl.w	r2, r0, r2
    8906:	3340      	adds	r3, #64	; 0x40
    8908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    890c:	bf00      	nop
    890e:	370c      	adds	r7, #12
    8910:	46bd      	mov	sp, r7
    8912:	f85d 7b04 	ldr.w	r7, [sp], #4
    8916:	4770      	bx	lr
    8918:	e000e100 	.word	0xe000e100

0000891c <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    891c:	b580      	push	{r7, lr}
    891e:	b082      	sub	sp, #8
    8920:	af00      	add	r7, sp, #0
    8922:	4603      	mov	r3, r0
    8924:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    8926:	79fb      	ldrb	r3, [r7, #7]
    8928:	b21b      	sxth	r3, r3
    892a:	4618      	mov	r0, r3
    892c:	4b02      	ldr	r3, [pc, #8]	; (8938 <_irq_set+0x1c>)
    892e:	4798      	blx	r3
}
    8930:	bf00      	nop
    8932:	3708      	adds	r7, #8
    8934:	46bd      	mov	sp, r7
    8936:	bd80      	pop	{r7, pc}
    8938:	000088e1 	.word	0x000088e1

0000893c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    893c:	b480      	push	{r7}
    893e:	b083      	sub	sp, #12
    8940:	af00      	add	r7, sp, #0
    8942:	4603      	mov	r3, r0
    8944:	6039      	str	r1, [r7, #0]
    8946:	80fb      	strh	r3, [r7, #6]
    8948:	4613      	mov	r3, r2
    894a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    894c:	797b      	ldrb	r3, [r7, #5]
    894e:	3b04      	subs	r3, #4
    8950:	2b05      	cmp	r3, #5
    8952:	d86b      	bhi.n	8a2c <_get_cycles_for_us_internal+0xf0>
    8954:	a201      	add	r2, pc, #4	; (adr r2, 895c <_get_cycles_for_us_internal+0x20>)
    8956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    895a:	bf00      	nop
    895c:	00008a0b 	.word	0x00008a0b
    8960:	000089eb 	.word	0x000089eb
    8964:	000089cd 	.word	0x000089cd
    8968:	000089af 	.word	0x000089af
    896c:	00008991 	.word	0x00008991
    8970:	00008975 	.word	0x00008975
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    8974:	88fb      	ldrh	r3, [r7, #6]
    8976:	683a      	ldr	r2, [r7, #0]
    8978:	4935      	ldr	r1, [pc, #212]	; (8a50 <_get_cycles_for_us_internal+0x114>)
    897a:	fba1 1202 	umull	r1, r2, r1, r2
    897e:	0c92      	lsrs	r2, r2, #18
    8980:	fb02 f303 	mul.w	r3, r2, r3
    8984:	3302      	adds	r3, #2
    8986:	4a33      	ldr	r2, [pc, #204]	; (8a54 <_get_cycles_for_us_internal+0x118>)
    8988:	fba2 2303 	umull	r2, r3, r2, r3
    898c:	085b      	lsrs	r3, r3, #1
    898e:	e059      	b.n	8a44 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    8990:	88fb      	ldrh	r3, [r7, #6]
    8992:	683a      	ldr	r2, [r7, #0]
    8994:	0952      	lsrs	r2, r2, #5
    8996:	4930      	ldr	r1, [pc, #192]	; (8a58 <_get_cycles_for_us_internal+0x11c>)
    8998:	fba1 1202 	umull	r1, r2, r1, r2
    899c:	09d2      	lsrs	r2, r2, #7
    899e:	fb02 f303 	mul.w	r3, r2, r3
    89a2:	331d      	adds	r3, #29
    89a4:	4a2d      	ldr	r2, [pc, #180]	; (8a5c <_get_cycles_for_us_internal+0x120>)
    89a6:	fba2 2303 	umull	r2, r3, r2, r3
    89aa:	091b      	lsrs	r3, r3, #4
    89ac:	e04a      	b.n	8a44 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    89ae:	88fb      	ldrh	r3, [r7, #6]
    89b0:	683a      	ldr	r2, [r7, #0]
    89b2:	492b      	ldr	r1, [pc, #172]	; (8a60 <_get_cycles_for_us_internal+0x124>)
    89b4:	fba1 1202 	umull	r1, r2, r1, r2
    89b8:	0b52      	lsrs	r2, r2, #13
    89ba:	fb02 f303 	mul.w	r3, r2, r3
    89be:	f203 132b 	addw	r3, r3, #299	; 0x12b
    89c2:	4a28      	ldr	r2, [pc, #160]	; (8a64 <_get_cycles_for_us_internal+0x128>)
    89c4:	fba2 2303 	umull	r2, r3, r2, r3
    89c8:	095b      	lsrs	r3, r3, #5
    89ca:	e03b      	b.n	8a44 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    89cc:	88fb      	ldrh	r3, [r7, #6]
    89ce:	683a      	ldr	r2, [r7, #0]
    89d0:	4925      	ldr	r1, [pc, #148]	; (8a68 <_get_cycles_for_us_internal+0x12c>)
    89d2:	fba1 1202 	umull	r1, r2, r1, r2
    89d6:	0992      	lsrs	r2, r2, #6
    89d8:	fb02 f303 	mul.w	r3, r2, r3
    89dc:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    89e0:	4a22      	ldr	r2, [pc, #136]	; (8a6c <_get_cycles_for_us_internal+0x130>)
    89e2:	fba2 2303 	umull	r2, r3, r2, r3
    89e6:	099b      	lsrs	r3, r3, #6
    89e8:	e02c      	b.n	8a44 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    89ea:	88fb      	ldrh	r3, [r7, #6]
    89ec:	683a      	ldr	r2, [r7, #0]
    89ee:	4920      	ldr	r1, [pc, #128]	; (8a70 <_get_cycles_for_us_internal+0x134>)
    89f0:	fba1 1202 	umull	r1, r2, r1, r2
    89f4:	0952      	lsrs	r2, r2, #5
    89f6:	fb02 f303 	mul.w	r3, r2, r3
    89fa:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    89fe:	332f      	adds	r3, #47	; 0x2f
    8a00:	4a1c      	ldr	r2, [pc, #112]	; (8a74 <_get_cycles_for_us_internal+0x138>)
    8a02:	fba2 2303 	umull	r2, r3, r2, r3
    8a06:	0b5b      	lsrs	r3, r3, #13
    8a08:	e01c      	b.n	8a44 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    8a0a:	88fb      	ldrh	r3, [r7, #6]
    8a0c:	683a      	ldr	r2, [r7, #0]
    8a0e:	491a      	ldr	r1, [pc, #104]	; (8a78 <_get_cycles_for_us_internal+0x13c>)
    8a10:	fba1 1202 	umull	r1, r2, r1, r2
    8a14:	08d2      	lsrs	r2, r2, #3
    8a16:	fb02 f303 	mul.w	r3, r2, r3
    8a1a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    8a1e:	f203 33df 	addw	r3, r3, #991	; 0x3df
    8a22:	4a16      	ldr	r2, [pc, #88]	; (8a7c <_get_cycles_for_us_internal+0x140>)
    8a24:	fba2 2303 	umull	r2, r3, r2, r3
    8a28:	0c5b      	lsrs	r3, r3, #17
    8a2a:	e00b      	b.n	8a44 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    8a2c:	88fb      	ldrh	r3, [r7, #6]
    8a2e:	683a      	ldr	r2, [r7, #0]
    8a30:	fb02 f303 	mul.w	r3, r2, r3
    8a34:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    8a38:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    8a3c:	4a10      	ldr	r2, [pc, #64]	; (8a80 <_get_cycles_for_us_internal+0x144>)
    8a3e:	fba2 2303 	umull	r2, r3, r2, r3
    8a42:	0c9b      	lsrs	r3, r3, #18
	}
}
    8a44:	4618      	mov	r0, r3
    8a46:	370c      	adds	r7, #12
    8a48:	46bd      	mov	sp, r7
    8a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a4e:	4770      	bx	lr
    8a50:	431bde83 	.word	0x431bde83
    8a54:	aaaaaaab 	.word	0xaaaaaaab
    8a58:	0a7c5ac5 	.word	0x0a7c5ac5
    8a5c:	88888889 	.word	0x88888889
    8a60:	d1b71759 	.word	0xd1b71759
    8a64:	1b4e81b5 	.word	0x1b4e81b5
    8a68:	10624dd3 	.word	0x10624dd3
    8a6c:	057619f1 	.word	0x057619f1
    8a70:	51eb851f 	.word	0x51eb851f
    8a74:	45e7b273 	.word	0x45e7b273
    8a78:	cccccccd 	.word	0xcccccccd
    8a7c:	6fd91d85 	.word	0x6fd91d85
    8a80:	165e9f81 	.word	0x165e9f81

00008a84 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    8a84:	b580      	push	{r7, lr}
    8a86:	b082      	sub	sp, #8
    8a88:	af00      	add	r7, sp, #0
    8a8a:	4603      	mov	r3, r0
    8a8c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    8a8e:	88fb      	ldrh	r3, [r7, #6]
    8a90:	2209      	movs	r2, #9
    8a92:	4904      	ldr	r1, [pc, #16]	; (8aa4 <_get_cycles_for_us+0x20>)
    8a94:	4618      	mov	r0, r3
    8a96:	4b04      	ldr	r3, [pc, #16]	; (8aa8 <_get_cycles_for_us+0x24>)
    8a98:	4798      	blx	r3
    8a9a:	4603      	mov	r3, r0
}
    8a9c:	4618      	mov	r0, r3
    8a9e:	3708      	adds	r7, #8
    8aa0:	46bd      	mov	sp, r7
    8aa2:	bd80      	pop	{r7, pc}
    8aa4:	07270e00 	.word	0x07270e00
    8aa8:	0000893d 	.word	0x0000893d

00008aac <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    8aac:	b480      	push	{r7}
    8aae:	b083      	sub	sp, #12
    8ab0:	af00      	add	r7, sp, #0
    8ab2:	4603      	mov	r3, r0
    8ab4:	6039      	str	r1, [r7, #0]
    8ab6:	80fb      	strh	r3, [r7, #6]
    8ab8:	4613      	mov	r3, r2
    8aba:	717b      	strb	r3, [r7, #5]
	switch (power) {
    8abc:	797b      	ldrb	r3, [r7, #5]
    8abe:	3b04      	subs	r3, #4
    8ac0:	2b05      	cmp	r3, #5
    8ac2:	d870      	bhi.n	8ba6 <_get_cycles_for_ms_internal+0xfa>
    8ac4:	a201      	add	r2, pc, #4	; (adr r2, 8acc <_get_cycles_for_ms_internal+0x20>)
    8ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8aca:	bf00      	nop
    8acc:	00008b89 	.word	0x00008b89
    8ad0:	00008b6d 	.word	0x00008b6d
    8ad4:	00008b51 	.word	0x00008b51
    8ad8:	00008b2d 	.word	0x00008b2d
    8adc:	00008b09 	.word	0x00008b09
    8ae0:	00008ae5 	.word	0x00008ae5
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    8ae4:	88fb      	ldrh	r3, [r7, #6]
    8ae6:	683a      	ldr	r2, [r7, #0]
    8ae8:	4937      	ldr	r1, [pc, #220]	; (8bc8 <_get_cycles_for_ms_internal+0x11c>)
    8aea:	fba1 1202 	umull	r1, r2, r1, r2
    8aee:	0c92      	lsrs	r2, r2, #18
    8af0:	fb02 f303 	mul.w	r3, r2, r3
    8af4:	3302      	adds	r3, #2
    8af6:	4a35      	ldr	r2, [pc, #212]	; (8bcc <_get_cycles_for_ms_internal+0x120>)
    8af8:	fba2 2303 	umull	r2, r3, r2, r3
    8afc:	085b      	lsrs	r3, r3, #1
    8afe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8b02:	fb02 f303 	mul.w	r3, r2, r3
    8b06:	e058      	b.n	8bba <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    8b08:	88fb      	ldrh	r3, [r7, #6]
    8b0a:	683a      	ldr	r2, [r7, #0]
    8b0c:	0952      	lsrs	r2, r2, #5
    8b0e:	4930      	ldr	r1, [pc, #192]	; (8bd0 <_get_cycles_for_ms_internal+0x124>)
    8b10:	fba1 1202 	umull	r1, r2, r1, r2
    8b14:	09d2      	lsrs	r2, r2, #7
    8b16:	fb02 f303 	mul.w	r3, r2, r3
    8b1a:	3302      	adds	r3, #2
    8b1c:	4a2b      	ldr	r2, [pc, #172]	; (8bcc <_get_cycles_for_ms_internal+0x120>)
    8b1e:	fba2 2303 	umull	r2, r3, r2, r3
    8b22:	085b      	lsrs	r3, r3, #1
    8b24:	2264      	movs	r2, #100	; 0x64
    8b26:	fb02 f303 	mul.w	r3, r2, r3
    8b2a:	e046      	b.n	8bba <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    8b2c:	88fb      	ldrh	r3, [r7, #6]
    8b2e:	683a      	ldr	r2, [r7, #0]
    8b30:	4928      	ldr	r1, [pc, #160]	; (8bd4 <_get_cycles_for_ms_internal+0x128>)
    8b32:	fba1 1202 	umull	r1, r2, r1, r2
    8b36:	0b52      	lsrs	r2, r2, #13
    8b38:	fb02 f303 	mul.w	r3, r2, r3
    8b3c:	3302      	adds	r3, #2
    8b3e:	4a23      	ldr	r2, [pc, #140]	; (8bcc <_get_cycles_for_ms_internal+0x120>)
    8b40:	fba2 2303 	umull	r2, r3, r2, r3
    8b44:	085a      	lsrs	r2, r3, #1
    8b46:	4613      	mov	r3, r2
    8b48:	009b      	lsls	r3, r3, #2
    8b4a:	4413      	add	r3, r2
    8b4c:	005b      	lsls	r3, r3, #1
    8b4e:	e034      	b.n	8bba <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    8b50:	88fb      	ldrh	r3, [r7, #6]
    8b52:	683a      	ldr	r2, [r7, #0]
    8b54:	4920      	ldr	r1, [pc, #128]	; (8bd8 <_get_cycles_for_ms_internal+0x12c>)
    8b56:	fba1 1202 	umull	r1, r2, r1, r2
    8b5a:	0992      	lsrs	r2, r2, #6
    8b5c:	fb02 f303 	mul.w	r3, r2, r3
    8b60:	3302      	adds	r3, #2
    8b62:	4a1a      	ldr	r2, [pc, #104]	; (8bcc <_get_cycles_for_ms_internal+0x120>)
    8b64:	fba2 2303 	umull	r2, r3, r2, r3
    8b68:	085b      	lsrs	r3, r3, #1
    8b6a:	e026      	b.n	8bba <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    8b6c:	88fb      	ldrh	r3, [r7, #6]
    8b6e:	683a      	ldr	r2, [r7, #0]
    8b70:	491a      	ldr	r1, [pc, #104]	; (8bdc <_get_cycles_for_ms_internal+0x130>)
    8b72:	fba1 1202 	umull	r1, r2, r1, r2
    8b76:	0952      	lsrs	r2, r2, #5
    8b78:	fb02 f303 	mul.w	r3, r2, r3
    8b7c:	331d      	adds	r3, #29
    8b7e:	4a18      	ldr	r2, [pc, #96]	; (8be0 <_get_cycles_for_ms_internal+0x134>)
    8b80:	fba2 2303 	umull	r2, r3, r2, r3
    8b84:	091b      	lsrs	r3, r3, #4
    8b86:	e018      	b.n	8bba <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    8b88:	88fb      	ldrh	r3, [r7, #6]
    8b8a:	683a      	ldr	r2, [r7, #0]
    8b8c:	4915      	ldr	r1, [pc, #84]	; (8be4 <_get_cycles_for_ms_internal+0x138>)
    8b8e:	fba1 1202 	umull	r1, r2, r1, r2
    8b92:	08d2      	lsrs	r2, r2, #3
    8b94:	fb02 f303 	mul.w	r3, r2, r3
    8b98:	f203 132b 	addw	r3, r3, #299	; 0x12b
    8b9c:	4a12      	ldr	r2, [pc, #72]	; (8be8 <_get_cycles_for_ms_internal+0x13c>)
    8b9e:	fba2 2303 	umull	r2, r3, r2, r3
    8ba2:	095b      	lsrs	r3, r3, #5
    8ba4:	e009      	b.n	8bba <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    8ba6:	88fb      	ldrh	r3, [r7, #6]
    8ba8:	683a      	ldr	r2, [r7, #0]
    8baa:	fb02 f303 	mul.w	r3, r2, r3
    8bae:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8bb2:	4a0e      	ldr	r2, [pc, #56]	; (8bec <_get_cycles_for_ms_internal+0x140>)
    8bb4:	fba2 2303 	umull	r2, r3, r2, r3
    8bb8:	099b      	lsrs	r3, r3, #6
	}
}
    8bba:	4618      	mov	r0, r3
    8bbc:	370c      	adds	r7, #12
    8bbe:	46bd      	mov	sp, r7
    8bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bc4:	4770      	bx	lr
    8bc6:	bf00      	nop
    8bc8:	431bde83 	.word	0x431bde83
    8bcc:	aaaaaaab 	.word	0xaaaaaaab
    8bd0:	0a7c5ac5 	.word	0x0a7c5ac5
    8bd4:	d1b71759 	.word	0xd1b71759
    8bd8:	10624dd3 	.word	0x10624dd3
    8bdc:	51eb851f 	.word	0x51eb851f
    8be0:	88888889 	.word	0x88888889
    8be4:	cccccccd 	.word	0xcccccccd
    8be8:	1b4e81b5 	.word	0x1b4e81b5
    8bec:	057619f1 	.word	0x057619f1

00008bf0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    8bf0:	b580      	push	{r7, lr}
    8bf2:	b082      	sub	sp, #8
    8bf4:	af00      	add	r7, sp, #0
    8bf6:	4603      	mov	r3, r0
    8bf8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    8bfa:	88fb      	ldrh	r3, [r7, #6]
    8bfc:	2209      	movs	r2, #9
    8bfe:	4904      	ldr	r1, [pc, #16]	; (8c10 <_get_cycles_for_ms+0x20>)
    8c00:	4618      	mov	r0, r3
    8c02:	4b04      	ldr	r3, [pc, #16]	; (8c14 <_get_cycles_for_ms+0x24>)
    8c04:	4798      	blx	r3
    8c06:	4603      	mov	r3, r0
}
    8c08:	4618      	mov	r0, r3
    8c0a:	3708      	adds	r7, #8
    8c0c:	46bd      	mov	sp, r7
    8c0e:	bd80      	pop	{r7, pc}
    8c10:	07270e00 	.word	0x07270e00
    8c14:	00008aad 	.word	0x00008aad

00008c18 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    8c18:	b480      	push	{r7}
    8c1a:	b083      	sub	sp, #12
    8c1c:	af00      	add	r7, sp, #0
    8c1e:	6078      	str	r0, [r7, #4]
    8c20:	6039      	str	r1, [r7, #0]
    8c22:	bf00      	nop
    8c24:	f3af 8000 	nop.w

00008c28 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    8c28:	3901      	subs	r1, #1
    8c2a:	d8fd      	bhi.n	8c28 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    8c2c:	bf00      	nop
    8c2e:	370c      	adds	r7, #12
    8c30:	46bd      	mov	sp, r7
    8c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c36:	4770      	bx	lr

00008c38 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    8c38:	b480      	push	{r7}
    8c3a:	b083      	sub	sp, #12
    8c3c:	af00      	add	r7, sp, #0
    8c3e:	6078      	str	r0, [r7, #4]
    8c40:	460b      	mov	r3, r1
    8c42:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    8c44:	687b      	ldr	r3, [r7, #4]
    8c46:	881b      	ldrh	r3, [r3, #0]
    8c48:	b29a      	uxth	r2, r3
    8c4a:	887b      	ldrh	r3, [r7, #2]
    8c4c:	021b      	lsls	r3, r3, #8
    8c4e:	b29b      	uxth	r3, r3
    8c50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    8c54:	b29b      	uxth	r3, r3
    8c56:	4313      	orrs	r3, r2
    8c58:	b29a      	uxth	r2, r3
    8c5a:	687b      	ldr	r3, [r7, #4]
    8c5c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    8c5e:	bf00      	nop
    8c60:	370c      	adds	r7, #12
    8c62:	46bd      	mov	sp, r7
    8c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c68:	4770      	bx	lr

00008c6a <hri_port_set_EVCTRL_reg>:
{
    8c6a:	b480      	push	{r7}
    8c6c:	b085      	sub	sp, #20
    8c6e:	af00      	add	r7, sp, #0
    8c70:	60f8      	str	r0, [r7, #12]
    8c72:	460b      	mov	r3, r1
    8c74:	607a      	str	r2, [r7, #4]
    8c76:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    8c78:	7afb      	ldrb	r3, [r7, #11]
    8c7a:	7afa      	ldrb	r2, [r7, #11]
    8c7c:	68f9      	ldr	r1, [r7, #12]
    8c7e:	01d2      	lsls	r2, r2, #7
    8c80:	440a      	add	r2, r1
    8c82:	322c      	adds	r2, #44	; 0x2c
    8c84:	6811      	ldr	r1, [r2, #0]
    8c86:	687a      	ldr	r2, [r7, #4]
    8c88:	430a      	orrs	r2, r1
    8c8a:	68f9      	ldr	r1, [r7, #12]
    8c8c:	01db      	lsls	r3, r3, #7
    8c8e:	440b      	add	r3, r1
    8c90:	332c      	adds	r3, #44	; 0x2c
    8c92:	601a      	str	r2, [r3, #0]
}
    8c94:	bf00      	nop
    8c96:	3714      	adds	r7, #20
    8c98:	46bd      	mov	sp, r7
    8c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c9e:	4770      	bx	lr

00008ca0 <_port_event_init>:

static inline void _port_event_init()
{
    8ca0:	b580      	push	{r7, lr}
    8ca2:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    8ca4:	2200      	movs	r2, #0
    8ca6:	2100      	movs	r1, #0
    8ca8:	480a      	ldr	r0, [pc, #40]	; (8cd4 <_port_event_init+0x34>)
    8caa:	4b0b      	ldr	r3, [pc, #44]	; (8cd8 <_port_event_init+0x38>)
    8cac:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    8cae:	2200      	movs	r2, #0
    8cb0:	2101      	movs	r1, #1
    8cb2:	4808      	ldr	r0, [pc, #32]	; (8cd4 <_port_event_init+0x34>)
    8cb4:	4b08      	ldr	r3, [pc, #32]	; (8cd8 <_port_event_init+0x38>)
    8cb6:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    8cb8:	f64e 72ef 	movw	r2, #61423	; 0xefef
    8cbc:	2102      	movs	r1, #2
    8cbe:	4805      	ldr	r0, [pc, #20]	; (8cd4 <_port_event_init+0x34>)
    8cc0:	4b05      	ldr	r3, [pc, #20]	; (8cd8 <_port_event_init+0x38>)
    8cc2:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    8cc4:	2200      	movs	r2, #0
    8cc6:	2103      	movs	r1, #3
    8cc8:	4802      	ldr	r0, [pc, #8]	; (8cd4 <_port_event_init+0x34>)
    8cca:	4b03      	ldr	r3, [pc, #12]	; (8cd8 <_port_event_init+0x38>)
    8ccc:	4798      	blx	r3
}
    8cce:	bf00      	nop
    8cd0:	bd80      	pop	{r7, pc}
    8cd2:	bf00      	nop
    8cd4:	41008000 	.word	0x41008000
    8cd8:	00008c6b 	.word	0x00008c6b

00008cdc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    8cdc:	b580      	push	{r7, lr}
    8cde:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    8ce0:	2104      	movs	r1, #4
    8ce2:	480b      	ldr	r0, [pc, #44]	; (8d10 <_init_chip+0x34>)
    8ce4:	4b0b      	ldr	r3, [pc, #44]	; (8d14 <_init_chip+0x38>)
    8ce6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    8ce8:	4b0b      	ldr	r3, [pc, #44]	; (8d18 <_init_chip+0x3c>)
    8cea:	4798      	blx	r3
	_oscctrl_init_sources();
    8cec:	4b0b      	ldr	r3, [pc, #44]	; (8d1c <_init_chip+0x40>)
    8cee:	4798      	blx	r3
	_mclk_init();
    8cf0:	4b0b      	ldr	r3, [pc, #44]	; (8d20 <_init_chip+0x44>)
    8cf2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    8cf4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    8cf8:	4b0a      	ldr	r3, [pc, #40]	; (8d24 <_init_chip+0x48>)
    8cfa:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    8cfc:	4b0a      	ldr	r3, [pc, #40]	; (8d28 <_init_chip+0x4c>)
    8cfe:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    8d00:	f640 30df 	movw	r0, #3039	; 0xbdf
    8d04:	4b07      	ldr	r3, [pc, #28]	; (8d24 <_init_chip+0x48>)
    8d06:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    8d08:	4b08      	ldr	r3, [pc, #32]	; (8d2c <_init_chip+0x50>)
    8d0a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    8d0c:	bf00      	nop
    8d0e:	bd80      	pop	{r7, pc}
    8d10:	41004000 	.word	0x41004000
    8d14:	00008c39 	.word	0x00008c39
    8d18:	00009a01 	.word	0x00009a01
    8d1c:	00009ec9 	.word	0x00009ec9
    8d20:	00009921 	.word	0x00009921
    8d24:	000097e1 	.word	0x000097e1
    8d28:	00009f09 	.word	0x00009f09
    8d2c:	00008ca1 	.word	0x00008ca1

00008d30 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    8d30:	b480      	push	{r7}
    8d32:	b083      	sub	sp, #12
    8d34:	af00      	add	r7, sp, #0
    8d36:	6078      	str	r0, [r7, #4]
    8d38:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    8d3a:	687b      	ldr	r3, [r7, #4]
    8d3c:	683a      	ldr	r2, [r7, #0]
    8d3e:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8d40:	bf00      	nop
    8d42:	370c      	adds	r7, #12
    8d44:	46bd      	mov	sp, r7
    8d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d4a:	4770      	bx	lr

00008d4c <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    8d4c:	b480      	push	{r7}
    8d4e:	b085      	sub	sp, #20
    8d50:	af00      	add	r7, sp, #0
    8d52:	6078      	str	r0, [r7, #4]
    8d54:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    8d56:	687b      	ldr	r3, [r7, #4]
    8d58:	689b      	ldr	r3, [r3, #8]
    8d5a:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    8d5c:	68fb      	ldr	r3, [r7, #12]
    8d5e:	f003 0303 	and.w	r3, r3, #3
    8d62:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    8d64:	683b      	ldr	r3, [r7, #0]
    8d66:	009b      	lsls	r3, r3, #2
    8d68:	68fa      	ldr	r2, [r7, #12]
    8d6a:	4313      	orrs	r3, r2
    8d6c:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    8d6e:	687b      	ldr	r3, [r7, #4]
    8d70:	68fa      	ldr	r2, [r7, #12]
    8d72:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8d74:	bf00      	nop
    8d76:	3714      	adds	r7, #20
    8d78:	46bd      	mov	sp, r7
    8d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d7e:	4770      	bx	lr

00008d80 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    8d80:	b480      	push	{r7}
    8d82:	b083      	sub	sp, #12
    8d84:	af00      	add	r7, sp, #0
    8d86:	6078      	str	r0, [r7, #4]
    8d88:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    8d8a:	687b      	ldr	r3, [r7, #4]
    8d8c:	683a      	ldr	r2, [r7, #0]
    8d8e:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8d90:	bf00      	nop
    8d92:	370c      	adds	r7, #12
    8d94:	46bd      	mov	sp, r7
    8d96:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d9a:	4770      	bx	lr

00008d9c <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    8d9c:	b480      	push	{r7}
    8d9e:	b083      	sub	sp, #12
    8da0:	af00      	add	r7, sp, #0
    8da2:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    8da4:	687b      	ldr	r3, [r7, #4]
    8da6:	68db      	ldr	r3, [r3, #12]
}
    8da8:	4618      	mov	r0, r3
    8daa:	370c      	adds	r7, #12
    8dac:	46bd      	mov	sp, r7
    8dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    8db2:	4770      	bx	lr

00008db4 <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    8db4:	b480      	push	{r7}
    8db6:	b083      	sub	sp, #12
    8db8:	af00      	add	r7, sp, #0
    8dba:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    8dbc:	687b      	ldr	r3, [r7, #4]
    8dbe:	785b      	ldrb	r3, [r3, #1]
    8dc0:	b2db      	uxtb	r3, r3
    8dc2:	f003 0301 	and.w	r3, r3, #1
    8dc6:	2b00      	cmp	r3, #0
    8dc8:	bf14      	ite	ne
    8dca:	2301      	movne	r3, #1
    8dcc:	2300      	moveq	r3, #0
    8dce:	b2db      	uxtb	r3, r3
}
    8dd0:	4618      	mov	r0, r3
    8dd2:	370c      	adds	r7, #12
    8dd4:	46bd      	mov	sp, r7
    8dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dda:	4770      	bx	lr

00008ddc <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    8ddc:	b480      	push	{r7}
    8dde:	b083      	sub	sp, #12
    8de0:	af00      	add	r7, sp, #0
    8de2:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    8de4:	687b      	ldr	r3, [r7, #4]
    8de6:	2201      	movs	r2, #1
    8de8:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8dea:	bf00      	nop
    8dec:	370c      	adds	r7, #12
    8dee:	46bd      	mov	sp, r7
    8df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8df4:	4770      	bx	lr

00008df6 <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    8df6:	b480      	push	{r7}
    8df8:	b083      	sub	sp, #12
    8dfa:	af00      	add	r7, sp, #0
    8dfc:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    8dfe:	687b      	ldr	r3, [r7, #4]
    8e00:	785b      	ldrb	r3, [r3, #1]
    8e02:	b2db      	uxtb	r3, r3
    8e04:	089b      	lsrs	r3, r3, #2
    8e06:	f003 0301 	and.w	r3, r3, #1
    8e0a:	2b00      	cmp	r3, #0
    8e0c:	bf14      	ite	ne
    8e0e:	2301      	movne	r3, #1
    8e10:	2300      	moveq	r3, #0
    8e12:	b2db      	uxtb	r3, r3
}
    8e14:	4618      	mov	r0, r3
    8e16:	370c      	adds	r7, #12
    8e18:	46bd      	mov	sp, r7
    8e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e1e:	4770      	bx	lr

00008e20 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    8e20:	b480      	push	{r7}
    8e22:	b083      	sub	sp, #12
    8e24:	af00      	add	r7, sp, #0
    8e26:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    8e28:	687b      	ldr	r3, [r7, #4]
    8e2a:	2204      	movs	r2, #4
    8e2c:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8e2e:	bf00      	nop
    8e30:	370c      	adds	r7, #12
    8e32:	46bd      	mov	sp, r7
    8e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e38:	4770      	bx	lr

00008e3a <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    8e3a:	b480      	push	{r7}
    8e3c:	b083      	sub	sp, #12
    8e3e:	af00      	add	r7, sp, #0
    8e40:	6078      	str	r0, [r7, #4]
    8e42:	460b      	mov	r3, r1
    8e44:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    8e46:	687b      	ldr	r3, [r7, #4]
    8e48:	78fa      	ldrb	r2, [r7, #3]
    8e4a:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8e4c:	bf00      	nop
    8e4e:	370c      	adds	r7, #12
    8e50:	46bd      	mov	sp, r7
    8e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e56:	4770      	bx	lr

00008e58 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    8e58:	b480      	push	{r7}
    8e5a:	b083      	sub	sp, #12
    8e5c:	af00      	add	r7, sp, #0
    8e5e:	6078      	str	r0, [r7, #4]
    8e60:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    8e62:	687b      	ldr	r3, [r7, #4]
    8e64:	683a      	ldr	r2, [r7, #0]
    8e66:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    8e68:	2300      	movs	r3, #0
}
    8e6a:	4618      	mov	r0, r3
    8e6c:	370c      	adds	r7, #12
    8e6e:	46bd      	mov	sp, r7
    8e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e74:	4770      	bx	lr

00008e76 <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    8e76:	b480      	push	{r7}
    8e78:	b083      	sub	sp, #12
    8e7a:	af00      	add	r7, sp, #0
    8e7c:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    8e7e:	2300      	movs	r3, #0
}
    8e80:	4618      	mov	r0, r3
    8e82:	370c      	adds	r7, #12
    8e84:	46bd      	mov	sp, r7
    8e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e8a:	4770      	bx	lr

00008e8c <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    8e8c:	b580      	push	{r7, lr}
    8e8e:	b086      	sub	sp, #24
    8e90:	af00      	add	r7, sp, #0
    8e92:	60f8      	str	r0, [r7, #12]
    8e94:	60b9      	str	r1, [r7, #8]
    8e96:	607a      	str	r2, [r7, #4]
    8e98:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    8e9a:	2300      	movs	r3, #0
    8e9c:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    8e9e:	68bb      	ldr	r3, [r7, #8]
    8ea0:	f003 0303 	and.w	r3, r3, #3
    8ea4:	2b00      	cmp	r3, #0
    8ea6:	d002      	beq.n	8eae <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    8ea8:	f06f 030c 	mvn.w	r3, #12
    8eac:	e05e      	b.n	8f6c <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    8eae:	f107 0310 	add.w	r3, r7, #16
    8eb2:	4618      	mov	r0, r3
    8eb4:	4b2f      	ldr	r3, [pc, #188]	; (8f74 <_crc_sync_crc32+0xe8>)
    8eb6:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    8eb8:	68fb      	ldr	r3, [r7, #12]
    8eba:	681b      	ldr	r3, [r3, #0]
    8ebc:	4618      	mov	r0, r3
    8ebe:	4b2e      	ldr	r3, [pc, #184]	; (8f78 <_crc_sync_crc32+0xec>)
    8ec0:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    8ec2:	68fb      	ldr	r3, [r7, #12]
    8ec4:	681b      	ldr	r3, [r3, #0]
    8ec6:	68ba      	ldr	r2, [r7, #8]
    8ec8:	4611      	mov	r1, r2
    8eca:	4618      	mov	r0, r3
    8ecc:	4b2b      	ldr	r3, [pc, #172]	; (8f7c <_crc_sync_crc32+0xf0>)
    8ece:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    8ed0:	68fb      	ldr	r3, [r7, #12]
    8ed2:	681b      	ldr	r3, [r3, #0]
    8ed4:	6879      	ldr	r1, [r7, #4]
    8ed6:	4618      	mov	r0, r3
    8ed8:	4b29      	ldr	r3, [pc, #164]	; (8f80 <_crc_sync_crc32+0xf4>)
    8eda:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    8edc:	68fb      	ldr	r3, [r7, #12]
    8ede:	681a      	ldr	r2, [r3, #0]
    8ee0:	683b      	ldr	r3, [r7, #0]
    8ee2:	681b      	ldr	r3, [r3, #0]
    8ee4:	4619      	mov	r1, r3
    8ee6:	4610      	mov	r0, r2
    8ee8:	4b26      	ldr	r3, [pc, #152]	; (8f84 <_crc_sync_crc32+0xf8>)
    8eea:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    8eec:	68fb      	ldr	r3, [r7, #12]
    8eee:	681b      	ldr	r3, [r3, #0]
    8ef0:	2104      	movs	r1, #4
    8ef2:	4618      	mov	r0, r3
    8ef4:	4b24      	ldr	r3, [pc, #144]	; (8f88 <_crc_sync_crc32+0xfc>)
    8ef6:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    8ef8:	bf00      	nop
    8efa:	68fb      	ldr	r3, [r7, #12]
    8efc:	681b      	ldr	r3, [r3, #0]
    8efe:	4618      	mov	r0, r3
    8f00:	4b22      	ldr	r3, [pc, #136]	; (8f8c <_crc_sync_crc32+0x100>)
    8f02:	4798      	blx	r3
    8f04:	4603      	mov	r3, r0
    8f06:	f083 0301 	eor.w	r3, r3, #1
    8f0a:	b2db      	uxtb	r3, r3
    8f0c:	2b00      	cmp	r3, #0
    8f0e:	d1f4      	bne.n	8efa <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    8f10:	68fb      	ldr	r3, [r7, #12]
    8f12:	681b      	ldr	r3, [r3, #0]
    8f14:	4618      	mov	r0, r3
    8f16:	4b1e      	ldr	r3, [pc, #120]	; (8f90 <_crc_sync_crc32+0x104>)
    8f18:	4798      	blx	r3
    8f1a:	4603      	mov	r3, r0
    8f1c:	2b00      	cmp	r3, #0
    8f1e:	d00d      	beq.n	8f3c <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    8f20:	68fb      	ldr	r3, [r7, #12]
    8f22:	681b      	ldr	r3, [r3, #0]
    8f24:	4618      	mov	r0, r3
    8f26:	4b1b      	ldr	r3, [pc, #108]	; (8f94 <_crc_sync_crc32+0x108>)
    8f28:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    8f2a:	68fb      	ldr	r3, [r7, #12]
    8f2c:	681b      	ldr	r3, [r3, #0]
    8f2e:	4618      	mov	r0, r3
    8f30:	4b19      	ldr	r3, [pc, #100]	; (8f98 <_crc_sync_crc32+0x10c>)
    8f32:	4798      	blx	r3
		rc = ERR_IO;
    8f34:	f06f 0305 	mvn.w	r3, #5
    8f38:	617b      	str	r3, [r7, #20]
    8f3a:	e007      	b.n	8f4c <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    8f3c:	68fb      	ldr	r3, [r7, #12]
    8f3e:	681b      	ldr	r3, [r3, #0]
    8f40:	4618      	mov	r0, r3
    8f42:	4b16      	ldr	r3, [pc, #88]	; (8f9c <_crc_sync_crc32+0x110>)
    8f44:	4798      	blx	r3
    8f46:	4602      	mov	r2, r0
    8f48:	683b      	ldr	r3, [r7, #0]
    8f4a:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    8f4c:	68fb      	ldr	r3, [r7, #12]
    8f4e:	681b      	ldr	r3, [r3, #0]
    8f50:	4618      	mov	r0, r3
    8f52:	4b11      	ldr	r3, [pc, #68]	; (8f98 <_crc_sync_crc32+0x10c>)
    8f54:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    8f56:	68fb      	ldr	r3, [r7, #12]
    8f58:	681b      	ldr	r3, [r3, #0]
    8f5a:	4618      	mov	r0, r3
    8f5c:	4b10      	ldr	r3, [pc, #64]	; (8fa0 <_crc_sync_crc32+0x114>)
    8f5e:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    8f60:	f107 0310 	add.w	r3, r7, #16
    8f64:	4618      	mov	r0, r3
    8f66:	4b0f      	ldr	r3, [pc, #60]	; (8fa4 <_crc_sync_crc32+0x118>)
    8f68:	4798      	blx	r3

	return rc;
    8f6a:	697b      	ldr	r3, [r7, #20]
}
    8f6c:	4618      	mov	r0, r3
    8f6e:	3718      	adds	r7, #24
    8f70:	46bd      	mov	sp, r7
    8f72:	bd80      	pop	{r7, pc}
    8f74:	00010c85 	.word	0x00010c85
    8f78:	0000a2a9 	.word	0x0000a2a9
    8f7c:	00008d31 	.word	0x00008d31
    8f80:	00008d4d 	.word	0x00008d4d
    8f84:	00008d81 	.word	0x00008d81
    8f88:	00008e3b 	.word	0x00008e3b
    8f8c:	00008db5 	.word	0x00008db5
    8f90:	00008df7 	.word	0x00008df7
    8f94:	00008e21 	.word	0x00008e21
    8f98:	00008ddd 	.word	0x00008ddd
    8f9c:	00008d9d 	.word	0x00008d9d
    8fa0:	0000a21d 	.word	0x0000a21d
    8fa4:	00010cab 	.word	0x00010cab

00008fa8 <__NVIC_EnableIRQ>:
{
    8fa8:	b480      	push	{r7}
    8faa:	b083      	sub	sp, #12
    8fac:	af00      	add	r7, sp, #0
    8fae:	4603      	mov	r3, r0
    8fb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8fb6:	2b00      	cmp	r3, #0
    8fb8:	db0b      	blt.n	8fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8fba:	4909      	ldr	r1, [pc, #36]	; (8fe0 <__NVIC_EnableIRQ+0x38>)
    8fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8fc0:	095b      	lsrs	r3, r3, #5
    8fc2:	88fa      	ldrh	r2, [r7, #6]
    8fc4:	f002 021f 	and.w	r2, r2, #31
    8fc8:	2001      	movs	r0, #1
    8fca:	fa00 f202 	lsl.w	r2, r0, r2
    8fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8fd2:	bf00      	nop
    8fd4:	370c      	adds	r7, #12
    8fd6:	46bd      	mov	sp, r7
    8fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fdc:	4770      	bx	lr
    8fde:	bf00      	nop
    8fe0:	e000e100 	.word	0xe000e100

00008fe4 <__NVIC_DisableIRQ>:
{
    8fe4:	b480      	push	{r7}
    8fe6:	b083      	sub	sp, #12
    8fe8:	af00      	add	r7, sp, #0
    8fea:	4603      	mov	r3, r0
    8fec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ff2:	2b00      	cmp	r3, #0
    8ff4:	db10      	blt.n	9018 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ff6:	490b      	ldr	r1, [pc, #44]	; (9024 <__NVIC_DisableIRQ+0x40>)
    8ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ffc:	095b      	lsrs	r3, r3, #5
    8ffe:	88fa      	ldrh	r2, [r7, #6]
    9000:	f002 021f 	and.w	r2, r2, #31
    9004:	2001      	movs	r0, #1
    9006:	fa00 f202 	lsl.w	r2, r0, r2
    900a:	3320      	adds	r3, #32
    900c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    9010:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9014:	f3bf 8f6f 	isb	sy
}
    9018:	bf00      	nop
    901a:	370c      	adds	r7, #12
    901c:	46bd      	mov	sp, r7
    901e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9022:	4770      	bx	lr
    9024:	e000e100 	.word	0xe000e100

00009028 <__NVIC_ClearPendingIRQ>:
{
    9028:	b480      	push	{r7}
    902a:	b083      	sub	sp, #12
    902c:	af00      	add	r7, sp, #0
    902e:	4603      	mov	r3, r0
    9030:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9036:	2b00      	cmp	r3, #0
    9038:	db0c      	blt.n	9054 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    903a:	4909      	ldr	r1, [pc, #36]	; (9060 <__NVIC_ClearPendingIRQ+0x38>)
    903c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9040:	095b      	lsrs	r3, r3, #5
    9042:	88fa      	ldrh	r2, [r7, #6]
    9044:	f002 021f 	and.w	r2, r2, #31
    9048:	2001      	movs	r0, #1
    904a:	fa00 f202 	lsl.w	r2, r0, r2
    904e:	3360      	adds	r3, #96	; 0x60
    9050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9054:	bf00      	nop
    9056:	370c      	adds	r7, #12
    9058:	46bd      	mov	sp, r7
    905a:	f85d 7b04 	ldr.w	r7, [sp], #4
    905e:	4770      	bx	lr
    9060:	e000e100 	.word	0xe000e100

00009064 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    9064:	b480      	push	{r7}
    9066:	b083      	sub	sp, #12
    9068:	af00      	add	r7, sp, #0
    906a:	6078      	str	r0, [r7, #4]
    906c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    906e:	bf00      	nop
    9070:	687b      	ldr	r3, [r7, #4]
    9072:	685a      	ldr	r2, [r3, #4]
    9074:	683b      	ldr	r3, [r7, #0]
    9076:	4013      	ands	r3, r2
    9078:	2b00      	cmp	r3, #0
    907a:	d1f9      	bne.n	9070 <hri_eic_wait_for_sync+0xc>
	};
}
    907c:	bf00      	nop
    907e:	370c      	adds	r7, #12
    9080:	46bd      	mov	sp, r7
    9082:	f85d 7b04 	ldr.w	r7, [sp], #4
    9086:	4770      	bx	lr

00009088 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    9088:	b480      	push	{r7}
    908a:	b083      	sub	sp, #12
    908c:	af00      	add	r7, sp, #0
    908e:	6078      	str	r0, [r7, #4]
    9090:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    9092:	687b      	ldr	r3, [r7, #4]
    9094:	685a      	ldr	r2, [r3, #4]
    9096:	683b      	ldr	r3, [r7, #0]
    9098:	4013      	ands	r3, r2
    909a:	2b00      	cmp	r3, #0
    909c:	bf14      	ite	ne
    909e:	2301      	movne	r3, #1
    90a0:	2300      	moveq	r3, #0
    90a2:	b2db      	uxtb	r3, r3
}
    90a4:	4618      	mov	r0, r3
    90a6:	370c      	adds	r7, #12
    90a8:	46bd      	mov	sp, r7
    90aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    90ae:	4770      	bx	lr

000090b0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    90b0:	b480      	push	{r7}
    90b2:	b083      	sub	sp, #12
    90b4:	af00      	add	r7, sp, #0
    90b6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    90b8:	687b      	ldr	r3, [r7, #4]
    90ba:	695b      	ldr	r3, [r3, #20]
}
    90bc:	4618      	mov	r0, r3
    90be:	370c      	adds	r7, #12
    90c0:	46bd      	mov	sp, r7
    90c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    90c6:	4770      	bx	lr

000090c8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    90c8:	b480      	push	{r7}
    90ca:	b083      	sub	sp, #12
    90cc:	af00      	add	r7, sp, #0
    90ce:	6078      	str	r0, [r7, #4]
    90d0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	683a      	ldr	r2, [r7, #0]
    90d6:	615a      	str	r2, [r3, #20]
}
    90d8:	bf00      	nop
    90da:	370c      	adds	r7, #12
    90dc:	46bd      	mov	sp, r7
    90de:	f85d 7b04 	ldr.w	r7, [sp], #4
    90e2:	4770      	bx	lr

000090e4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    90e4:	b480      	push	{r7}
    90e6:	b083      	sub	sp, #12
    90e8:	af00      	add	r7, sp, #0
    90ea:	6078      	str	r0, [r7, #4]
    90ec:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    90ee:	687b      	ldr	r3, [r7, #4]
    90f0:	683a      	ldr	r2, [r7, #0]
    90f2:	611a      	str	r2, [r3, #16]
}
    90f4:	bf00      	nop
    90f6:	370c      	adds	r7, #12
    90f8:	46bd      	mov	sp, r7
    90fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    90fe:	4770      	bx	lr

00009100 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    9100:	b480      	push	{r7}
    9102:	b083      	sub	sp, #12
    9104:	af00      	add	r7, sp, #0
    9106:	6078      	str	r0, [r7, #4]
    9108:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    910a:	687b      	ldr	r3, [r7, #4]
    910c:	683a      	ldr	r2, [r7, #0]
    910e:	60da      	str	r2, [r3, #12]
}
    9110:	bf00      	nop
    9112:	370c      	adds	r7, #12
    9114:	46bd      	mov	sp, r7
    9116:	f85d 7b04 	ldr.w	r7, [sp], #4
    911a:	4770      	bx	lr

0000911c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    911c:	b580      	push	{r7, lr}
    911e:	b082      	sub	sp, #8
    9120:	af00      	add	r7, sp, #0
    9122:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    9124:	687b      	ldr	r3, [r7, #4]
    9126:	781b      	ldrb	r3, [r3, #0]
    9128:	b2db      	uxtb	r3, r3
    912a:	f043 0302 	orr.w	r3, r3, #2
    912e:	b2da      	uxtb	r2, r3
    9130:	687b      	ldr	r3, [r7, #4]
    9132:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    9134:	2103      	movs	r1, #3
    9136:	6878      	ldr	r0, [r7, #4]
    9138:	4b02      	ldr	r3, [pc, #8]	; (9144 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    913a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    913c:	bf00      	nop
    913e:	3708      	adds	r7, #8
    9140:	46bd      	mov	sp, r7
    9142:	bd80      	pop	{r7, pc}
    9144:	00009065 	.word	0x00009065

00009148 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9148:	b580      	push	{r7, lr}
    914a:	b082      	sub	sp, #8
    914c:	af00      	add	r7, sp, #0
    914e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    9150:	687b      	ldr	r3, [r7, #4]
    9152:	781b      	ldrb	r3, [r3, #0]
    9154:	b2db      	uxtb	r3, r3
    9156:	f023 0302 	bic.w	r3, r3, #2
    915a:	b2da      	uxtb	r2, r3
    915c:	687b      	ldr	r3, [r7, #4]
    915e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    9160:	2103      	movs	r1, #3
    9162:	6878      	ldr	r0, [r7, #4]
    9164:	4b02      	ldr	r3, [pc, #8]	; (9170 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    9166:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    9168:	bf00      	nop
    916a:	3708      	adds	r7, #8
    916c:	46bd      	mov	sp, r7
    916e:	bd80      	pop	{r7, pc}
    9170:	00009065 	.word	0x00009065

00009174 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    9174:	b580      	push	{r7, lr}
    9176:	b084      	sub	sp, #16
    9178:	af00      	add	r7, sp, #0
    917a:	6078      	str	r0, [r7, #4]
    917c:	460b      	mov	r3, r1
    917e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    9180:	687b      	ldr	r3, [r7, #4]
    9182:	781b      	ldrb	r3, [r3, #0]
    9184:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    9186:	7bfb      	ldrb	r3, [r7, #15]
    9188:	f023 0310 	bic.w	r3, r3, #16
    918c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    918e:	78fb      	ldrb	r3, [r7, #3]
    9190:	011b      	lsls	r3, r3, #4
    9192:	b25a      	sxtb	r2, r3
    9194:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9198:	4313      	orrs	r3, r2
    919a:	b25b      	sxtb	r3, r3
    919c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    919e:	687b      	ldr	r3, [r7, #4]
    91a0:	7bfa      	ldrb	r2, [r7, #15]
    91a2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    91a4:	2103      	movs	r1, #3
    91a6:	6878      	ldr	r0, [r7, #4]
    91a8:	4b02      	ldr	r3, [pc, #8]	; (91b4 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    91aa:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    91ac:	bf00      	nop
    91ae:	3710      	adds	r7, #16
    91b0:	46bd      	mov	sp, r7
    91b2:	bd80      	pop	{r7, pc}
    91b4:	00009065 	.word	0x00009065

000091b8 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    91b8:	b580      	push	{r7, lr}
    91ba:	b084      	sub	sp, #16
    91bc:	af00      	add	r7, sp, #0
    91be:	6078      	str	r0, [r7, #4]
    91c0:	460b      	mov	r3, r1
    91c2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    91c4:	2103      	movs	r1, #3
    91c6:	6878      	ldr	r0, [r7, #4]
    91c8:	4b06      	ldr	r3, [pc, #24]	; (91e4 <hri_eic_get_CTRLA_reg+0x2c>)
    91ca:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    91cc:	687b      	ldr	r3, [r7, #4]
    91ce:	781b      	ldrb	r3, [r3, #0]
    91d0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    91d2:	7bfa      	ldrb	r2, [r7, #15]
    91d4:	78fb      	ldrb	r3, [r7, #3]
    91d6:	4013      	ands	r3, r2
    91d8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    91da:	7bfb      	ldrb	r3, [r7, #15]
}
    91dc:	4618      	mov	r0, r3
    91de:	3710      	adds	r7, #16
    91e0:	46bd      	mov	sp, r7
    91e2:	bd80      	pop	{r7, pc}
    91e4:	00009065 	.word	0x00009065

000091e8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    91e8:	b580      	push	{r7, lr}
    91ea:	b082      	sub	sp, #8
    91ec:	af00      	add	r7, sp, #0
    91ee:	6078      	str	r0, [r7, #4]
    91f0:	460b      	mov	r3, r1
    91f2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    91f4:	687b      	ldr	r3, [r7, #4]
    91f6:	78fa      	ldrb	r2, [r7, #3]
    91f8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    91fa:	2103      	movs	r1, #3
    91fc:	6878      	ldr	r0, [r7, #4]
    91fe:	4b03      	ldr	r3, [pc, #12]	; (920c <hri_eic_write_CTRLA_reg+0x24>)
    9200:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    9202:	bf00      	nop
    9204:	3708      	adds	r7, #8
    9206:	46bd      	mov	sp, r7
    9208:	bd80      	pop	{r7, pc}
    920a:	bf00      	nop
    920c:	00009065 	.word	0x00009065

00009210 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    9210:	b480      	push	{r7}
    9212:	b083      	sub	sp, #12
    9214:	af00      	add	r7, sp, #0
    9216:	6078      	str	r0, [r7, #4]
    9218:	460b      	mov	r3, r1
    921a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    921c:	687b      	ldr	r3, [r7, #4]
    921e:	78fa      	ldrb	r2, [r7, #3]
    9220:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    9222:	bf00      	nop
    9224:	370c      	adds	r7, #12
    9226:	46bd      	mov	sp, r7
    9228:	f85d 7b04 	ldr.w	r7, [sp], #4
    922c:	4770      	bx	lr

0000922e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    922e:	b480      	push	{r7}
    9230:	b083      	sub	sp, #12
    9232:	af00      	add	r7, sp, #0
    9234:	6078      	str	r0, [r7, #4]
    9236:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    9238:	687b      	ldr	r3, [r7, #4]
    923a:	683a      	ldr	r2, [r7, #0]
    923c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    923e:	bf00      	nop
    9240:	370c      	adds	r7, #12
    9242:	46bd      	mov	sp, r7
    9244:	f85d 7b04 	ldr.w	r7, [sp], #4
    9248:	4770      	bx	lr

0000924a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    924a:	b480      	push	{r7}
    924c:	b083      	sub	sp, #12
    924e:	af00      	add	r7, sp, #0
    9250:	6078      	str	r0, [r7, #4]
    9252:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    9254:	687b      	ldr	r3, [r7, #4]
    9256:	683a      	ldr	r2, [r7, #0]
    9258:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    925a:	bf00      	nop
    925c:	370c      	adds	r7, #12
    925e:	46bd      	mov	sp, r7
    9260:	f85d 7b04 	ldr.w	r7, [sp], #4
    9264:	4770      	bx	lr

00009266 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    9266:	b480      	push	{r7}
    9268:	b085      	sub	sp, #20
    926a:	af00      	add	r7, sp, #0
    926c:	60f8      	str	r0, [r7, #12]
    926e:	460b      	mov	r3, r1
    9270:	607a      	str	r2, [r7, #4]
    9272:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    9274:	7afb      	ldrb	r3, [r7, #11]
    9276:	68fa      	ldr	r2, [r7, #12]
    9278:	3306      	adds	r3, #6
    927a:	009b      	lsls	r3, r3, #2
    927c:	4413      	add	r3, r2
    927e:	687a      	ldr	r2, [r7, #4]
    9280:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    9282:	bf00      	nop
    9284:	3714      	adds	r7, #20
    9286:	46bd      	mov	sp, r7
    9288:	f85d 7b04 	ldr.w	r7, [sp], #4
    928c:	4770      	bx	lr

0000928e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    928e:	b480      	push	{r7}
    9290:	b083      	sub	sp, #12
    9292:	af00      	add	r7, sp, #0
    9294:	6078      	str	r0, [r7, #4]
    9296:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    9298:	687b      	ldr	r3, [r7, #4]
    929a:	683a      	ldr	r2, [r7, #0]
    929c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    929e:	bf00      	nop
    92a0:	370c      	adds	r7, #12
    92a2:	46bd      	mov	sp, r7
    92a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    92a8:	4770      	bx	lr

000092aa <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    92aa:	b480      	push	{r7}
    92ac:	b083      	sub	sp, #12
    92ae:	af00      	add	r7, sp, #0
    92b0:	6078      	str	r0, [r7, #4]
    92b2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    92b4:	687b      	ldr	r3, [r7, #4]
    92b6:	683a      	ldr	r2, [r7, #0]
    92b8:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    92ba:	bf00      	nop
    92bc:	370c      	adds	r7, #12
    92be:	46bd      	mov	sp, r7
    92c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    92c4:	4770      	bx	lr
	...

000092c8 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    92c8:	b580      	push	{r7, lr}
    92ca:	b082      	sub	sp, #8
    92cc:	af00      	add	r7, sp, #0
    92ce:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    92d0:	2101      	movs	r1, #1
    92d2:	4846      	ldr	r0, [pc, #280]	; (93ec <_ext_irq_init+0x124>)
    92d4:	4b46      	ldr	r3, [pc, #280]	; (93f0 <_ext_irq_init+0x128>)
    92d6:	4798      	blx	r3
    92d8:	4603      	mov	r3, r0
    92da:	f083 0301 	eor.w	r3, r3, #1
    92de:	b2db      	uxtb	r3, r3
    92e0:	2b00      	cmp	r3, #0
    92e2:	d011      	beq.n	9308 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    92e4:	2102      	movs	r1, #2
    92e6:	4841      	ldr	r0, [pc, #260]	; (93ec <_ext_irq_init+0x124>)
    92e8:	4b42      	ldr	r3, [pc, #264]	; (93f4 <_ext_irq_init+0x12c>)
    92ea:	4798      	blx	r3
    92ec:	4603      	mov	r3, r0
    92ee:	2b00      	cmp	r3, #0
    92f0:	d006      	beq.n	9300 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    92f2:	483e      	ldr	r0, [pc, #248]	; (93ec <_ext_irq_init+0x124>)
    92f4:	4b40      	ldr	r3, [pc, #256]	; (93f8 <_ext_irq_init+0x130>)
    92f6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    92f8:	2102      	movs	r1, #2
    92fa:	483c      	ldr	r0, [pc, #240]	; (93ec <_ext_irq_init+0x124>)
    92fc:	4b3f      	ldr	r3, [pc, #252]	; (93fc <_ext_irq_init+0x134>)
    92fe:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    9300:	2101      	movs	r1, #1
    9302:	483a      	ldr	r0, [pc, #232]	; (93ec <_ext_irq_init+0x124>)
    9304:	4b3e      	ldr	r3, [pc, #248]	; (9400 <_ext_irq_init+0x138>)
    9306:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    9308:	2101      	movs	r1, #1
    930a:	4838      	ldr	r0, [pc, #224]	; (93ec <_ext_irq_init+0x124>)
    930c:	4b3b      	ldr	r3, [pc, #236]	; (93fc <_ext_irq_init+0x134>)
    930e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    9310:	2100      	movs	r1, #0
    9312:	4836      	ldr	r0, [pc, #216]	; (93ec <_ext_irq_init+0x124>)
    9314:	4b3b      	ldr	r3, [pc, #236]	; (9404 <_ext_irq_init+0x13c>)
    9316:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    9318:	2100      	movs	r1, #0
    931a:	4834      	ldr	r0, [pc, #208]	; (93ec <_ext_irq_init+0x124>)
    931c:	4b3a      	ldr	r3, [pc, #232]	; (9408 <_ext_irq_init+0x140>)
    931e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    9320:	2100      	movs	r1, #0
    9322:	4832      	ldr	r0, [pc, #200]	; (93ec <_ext_irq_init+0x124>)
    9324:	4b39      	ldr	r3, [pc, #228]	; (940c <_ext_irq_init+0x144>)
    9326:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    9328:	f240 31b1 	movw	r1, #945	; 0x3b1
    932c:	482f      	ldr	r0, [pc, #188]	; (93ec <_ext_irq_init+0x124>)
    932e:	4b38      	ldr	r3, [pc, #224]	; (9410 <_ext_irq_init+0x148>)
    9330:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    9332:	f240 3131 	movw	r1, #817	; 0x331
    9336:	482d      	ldr	r0, [pc, #180]	; (93ec <_ext_irq_init+0x124>)
    9338:	4b36      	ldr	r3, [pc, #216]	; (9414 <_ext_irq_init+0x14c>)
    933a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    933c:	2100      	movs	r1, #0
    933e:	482b      	ldr	r0, [pc, #172]	; (93ec <_ext_irq_init+0x124>)
    9340:	4b35      	ldr	r3, [pc, #212]	; (9418 <_ext_irq_init+0x150>)
    9342:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    9344:	4a35      	ldr	r2, [pc, #212]	; (941c <_ext_irq_init+0x154>)
    9346:	2100      	movs	r1, #0
    9348:	4828      	ldr	r0, [pc, #160]	; (93ec <_ext_irq_init+0x124>)
    934a:	4b35      	ldr	r3, [pc, #212]	; (9420 <_ext_irq_init+0x158>)
    934c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    934e:	2211      	movs	r2, #17
    9350:	2101      	movs	r1, #1
    9352:	4826      	ldr	r0, [pc, #152]	; (93ec <_ext_irq_init+0x124>)
    9354:	4b32      	ldr	r3, [pc, #200]	; (9420 <_ext_irq_init+0x158>)
    9356:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    9358:	4824      	ldr	r0, [pc, #144]	; (93ec <_ext_irq_init+0x124>)
    935a:	4b32      	ldr	r3, [pc, #200]	; (9424 <_ext_irq_init+0x15c>)
    935c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    935e:	200c      	movs	r0, #12
    9360:	4b31      	ldr	r3, [pc, #196]	; (9428 <_ext_irq_init+0x160>)
    9362:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    9364:	200c      	movs	r0, #12
    9366:	4b31      	ldr	r3, [pc, #196]	; (942c <_ext_irq_init+0x164>)
    9368:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    936a:	200c      	movs	r0, #12
    936c:	4b30      	ldr	r3, [pc, #192]	; (9430 <_ext_irq_init+0x168>)
    936e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    9370:	2010      	movs	r0, #16
    9372:	4b2d      	ldr	r3, [pc, #180]	; (9428 <_ext_irq_init+0x160>)
    9374:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    9376:	2010      	movs	r0, #16
    9378:	4b2c      	ldr	r3, [pc, #176]	; (942c <_ext_irq_init+0x164>)
    937a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    937c:	2010      	movs	r0, #16
    937e:	4b2c      	ldr	r3, [pc, #176]	; (9430 <_ext_irq_init+0x168>)
    9380:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    9382:	2011      	movs	r0, #17
    9384:	4b28      	ldr	r3, [pc, #160]	; (9428 <_ext_irq_init+0x160>)
    9386:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    9388:	2011      	movs	r0, #17
    938a:	4b28      	ldr	r3, [pc, #160]	; (942c <_ext_irq_init+0x164>)
    938c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    938e:	2011      	movs	r0, #17
    9390:	4b27      	ldr	r3, [pc, #156]	; (9430 <_ext_irq_init+0x168>)
    9392:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    9394:	2012      	movs	r0, #18
    9396:	4b24      	ldr	r3, [pc, #144]	; (9428 <_ext_irq_init+0x160>)
    9398:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    939a:	2012      	movs	r0, #18
    939c:	4b23      	ldr	r3, [pc, #140]	; (942c <_ext_irq_init+0x164>)
    939e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    93a0:	2012      	movs	r0, #18
    93a2:	4b23      	ldr	r3, [pc, #140]	; (9430 <_ext_irq_init+0x168>)
    93a4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    93a6:	2013      	movs	r0, #19
    93a8:	4b1f      	ldr	r3, [pc, #124]	; (9428 <_ext_irq_init+0x160>)
    93aa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    93ac:	2013      	movs	r0, #19
    93ae:	4b1f      	ldr	r3, [pc, #124]	; (942c <_ext_irq_init+0x164>)
    93b0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    93b2:	2013      	movs	r0, #19
    93b4:	4b1e      	ldr	r3, [pc, #120]	; (9430 <_ext_irq_init+0x168>)
    93b6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    93b8:	2014      	movs	r0, #20
    93ba:	4b1b      	ldr	r3, [pc, #108]	; (9428 <_ext_irq_init+0x160>)
    93bc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    93be:	2014      	movs	r0, #20
    93c0:	4b1a      	ldr	r3, [pc, #104]	; (942c <_ext_irq_init+0x164>)
    93c2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    93c4:	2014      	movs	r0, #20
    93c6:	4b1a      	ldr	r3, [pc, #104]	; (9430 <_ext_irq_init+0x168>)
    93c8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    93ca:	2015      	movs	r0, #21
    93cc:	4b16      	ldr	r3, [pc, #88]	; (9428 <_ext_irq_init+0x160>)
    93ce:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    93d0:	2015      	movs	r0, #21
    93d2:	4b16      	ldr	r3, [pc, #88]	; (942c <_ext_irq_init+0x164>)
    93d4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    93d6:	2015      	movs	r0, #21
    93d8:	4b15      	ldr	r3, [pc, #84]	; (9430 <_ext_irq_init+0x168>)
    93da:	4798      	blx	r3

	callback = cb;
    93dc:	4a15      	ldr	r2, [pc, #84]	; (9434 <_ext_irq_init+0x16c>)
    93de:	687b      	ldr	r3, [r7, #4]
    93e0:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    93e2:	2300      	movs	r3, #0
}
    93e4:	4618      	mov	r0, r3
    93e6:	3708      	adds	r7, #8
    93e8:	46bd      	mov	sp, r7
    93ea:	bd80      	pop	{r7, pc}
    93ec:	40002800 	.word	0x40002800
    93f0:	00009089 	.word	0x00009089
    93f4:	000091b9 	.word	0x000091b9
    93f8:	00009149 	.word	0x00009149
    93fc:	00009065 	.word	0x00009065
    9400:	000091e9 	.word	0x000091e9
    9404:	00009175 	.word	0x00009175
    9408:	00009211 	.word	0x00009211
    940c:	0000922f 	.word	0x0000922f
    9410:	0000924b 	.word	0x0000924b
    9414:	0000928f 	.word	0x0000928f
    9418:	000092ab 	.word	0x000092ab
    941c:	90990003 	.word	0x90990003
    9420:	00009267 	.word	0x00009267
    9424:	0000911d 	.word	0x0000911d
    9428:	00008fe5 	.word	0x00008fe5
    942c:	00009029 	.word	0x00009029
    9430:	00008fa9 	.word	0x00008fa9
    9434:	20008894 	.word	0x20008894

00009438 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    9438:	b580      	push	{r7, lr}
    943a:	b084      	sub	sp, #16
    943c:	af00      	add	r7, sp, #0
    943e:	6078      	str	r0, [r7, #4]
    9440:	460b      	mov	r3, r1
    9442:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    9444:	23ff      	movs	r3, #255	; 0xff
    9446:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    9448:	2300      	movs	r3, #0
    944a:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    944c:	e010      	b.n	9470 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    944e:	7bbb      	ldrb	r3, [r7, #14]
    9450:	4a1c      	ldr	r2, [pc, #112]	; (94c4 <_ext_irq_enable+0x8c>)
    9452:	00db      	lsls	r3, r3, #3
    9454:	4413      	add	r3, r2
    9456:	685a      	ldr	r2, [r3, #4]
    9458:	687b      	ldr	r3, [r7, #4]
    945a:	429a      	cmp	r2, r3
    945c:	d105      	bne.n	946a <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    945e:	7bbb      	ldrb	r3, [r7, #14]
    9460:	4a18      	ldr	r2, [pc, #96]	; (94c4 <_ext_irq_enable+0x8c>)
    9462:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    9466:	73fb      	strb	r3, [r7, #15]
			break;
    9468:	e005      	b.n	9476 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    946a:	7bbb      	ldrb	r3, [r7, #14]
    946c:	3301      	adds	r3, #1
    946e:	73bb      	strb	r3, [r7, #14]
    9470:	7bbb      	ldrb	r3, [r7, #14]
    9472:	2b06      	cmp	r3, #6
    9474:	d9eb      	bls.n	944e <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    9476:	7bfb      	ldrb	r3, [r7, #15]
    9478:	2bff      	cmp	r3, #255	; 0xff
    947a:	d102      	bne.n	9482 <_ext_irq_enable+0x4a>
		return -1;
    947c:	f04f 33ff 	mov.w	r3, #4294967295
    9480:	e01c      	b.n	94bc <_ext_irq_enable+0x84>
	}

	if (enable) {
    9482:	78fb      	ldrb	r3, [r7, #3]
    9484:	2b00      	cmp	r3, #0
    9486:	d008      	beq.n	949a <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    9488:	7bfb      	ldrb	r3, [r7, #15]
    948a:	2201      	movs	r2, #1
    948c:	fa02 f303 	lsl.w	r3, r2, r3
    9490:	4619      	mov	r1, r3
    9492:	480d      	ldr	r0, [pc, #52]	; (94c8 <_ext_irq_enable+0x90>)
    9494:	4b0d      	ldr	r3, [pc, #52]	; (94cc <_ext_irq_enable+0x94>)
    9496:	4798      	blx	r3
    9498:	e00f      	b.n	94ba <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    949a:	7bfb      	ldrb	r3, [r7, #15]
    949c:	2201      	movs	r2, #1
    949e:	fa02 f303 	lsl.w	r3, r2, r3
    94a2:	4619      	mov	r1, r3
    94a4:	4808      	ldr	r0, [pc, #32]	; (94c8 <_ext_irq_enable+0x90>)
    94a6:	4b0a      	ldr	r3, [pc, #40]	; (94d0 <_ext_irq_enable+0x98>)
    94a8:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    94aa:	7bfb      	ldrb	r3, [r7, #15]
    94ac:	2201      	movs	r2, #1
    94ae:	fa02 f303 	lsl.w	r3, r2, r3
    94b2:	4619      	mov	r1, r3
    94b4:	4804      	ldr	r0, [pc, #16]	; (94c8 <_ext_irq_enable+0x90>)
    94b6:	4b07      	ldr	r3, [pc, #28]	; (94d4 <_ext_irq_enable+0x9c>)
    94b8:	4798      	blx	r3
	}

	return ERR_NONE;
    94ba:	2300      	movs	r3, #0
}
    94bc:	4618      	mov	r0, r3
    94be:	3710      	adds	r7, #16
    94c0:	46bd      	mov	sp, r7
    94c2:	bd80      	pop	{r7, pc}
    94c4:	00020b1c 	.word	0x00020b1c
    94c8:	40002800 	.word	0x40002800
    94cc:	000090e5 	.word	0x000090e5
    94d0:	00009101 	.word	0x00009101
    94d4:	000090c9 	.word	0x000090c9

000094d8 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    94d8:	b580      	push	{r7, lr}
    94da:	b084      	sub	sp, #16
    94dc:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    94de:	4841      	ldr	r0, [pc, #260]	; (95e4 <_ext_irq_handler+0x10c>)
    94e0:	4b41      	ldr	r3, [pc, #260]	; (95e8 <_ext_irq_handler+0x110>)
    94e2:	4798      	blx	r3
    94e4:	4603      	mov	r3, r0
    94e6:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    94e8:	f04f 33ff 	mov.w	r3, #4294967295
    94ec:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    94ee:	683b      	ldr	r3, [r7, #0]
    94f0:	4619      	mov	r1, r3
    94f2:	483c      	ldr	r0, [pc, #240]	; (95e4 <_ext_irq_handler+0x10c>)
    94f4:	4b3d      	ldr	r3, [pc, #244]	; (95ec <_ext_irq_handler+0x114>)
    94f6:	4798      	blx	r3

	ASSERT(callback);
    94f8:	4b3d      	ldr	r3, [pc, #244]	; (95f0 <_ext_irq_handler+0x118>)
    94fa:	681b      	ldr	r3, [r3, #0]
    94fc:	2b00      	cmp	r3, #0
    94fe:	bf14      	ite	ne
    9500:	2301      	movne	r3, #1
    9502:	2300      	moveq	r3, #0
    9504:	b2db      	uxtb	r3, r3
    9506:	f44f 7280 	mov.w	r2, #256	; 0x100
    950a:	493a      	ldr	r1, [pc, #232]	; (95f4 <_ext_irq_handler+0x11c>)
    950c:	4618      	mov	r0, r3
    950e:	4b3a      	ldr	r3, [pc, #232]	; (95f8 <_ext_irq_handler+0x120>)
    9510:	4798      	blx	r3

	while (flags) {
    9512:	e060      	b.n	95d6 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    9514:	683b      	ldr	r3, [r7, #0]
    9516:	4618      	mov	r0, r3
    9518:	4b38      	ldr	r3, [pc, #224]	; (95fc <_ext_irq_handler+0x124>)
    951a:	4798      	blx	r3
    951c:	4603      	mov	r3, r0
    951e:	b2db      	uxtb	r3, r3
    9520:	3b01      	subs	r3, #1
    9522:	b2db      	uxtb	r3, r3
    9524:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    9526:	e047      	b.n	95b8 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    9528:	2300      	movs	r3, #0
    952a:	71fb      	strb	r3, [r7, #7]
    952c:	2307      	movs	r3, #7
    952e:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    9530:	e024      	b.n	957c <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    9532:	79ba      	ldrb	r2, [r7, #6]
    9534:	79fb      	ldrb	r3, [r7, #7]
    9536:	4413      	add	r3, r2
    9538:	105b      	asrs	r3, r3, #1
    953a:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    953c:	797b      	ldrb	r3, [r7, #5]
    953e:	4a30      	ldr	r2, [pc, #192]	; (9600 <_ext_irq_handler+0x128>)
    9540:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    9544:	461a      	mov	r2, r3
    9546:	f997 300f 	ldrsb.w	r3, [r7, #15]
    954a:	429a      	cmp	r2, r3
    954c:	d106      	bne.n	955c <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    954e:	797b      	ldrb	r3, [r7, #5]
    9550:	4a2b      	ldr	r2, [pc, #172]	; (9600 <_ext_irq_handler+0x128>)
    9552:	00db      	lsls	r3, r3, #3
    9554:	4413      	add	r3, r2
    9556:	685b      	ldr	r3, [r3, #4]
    9558:	60bb      	str	r3, [r7, #8]
					break;
    955a:	e013      	b.n	9584 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    955c:	797b      	ldrb	r3, [r7, #5]
    955e:	4a28      	ldr	r2, [pc, #160]	; (9600 <_ext_irq_handler+0x128>)
    9560:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    9564:	461a      	mov	r2, r3
    9566:	f997 300f 	ldrsb.w	r3, [r7, #15]
    956a:	429a      	cmp	r2, r3
    956c:	da03      	bge.n	9576 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    956e:	797b      	ldrb	r3, [r7, #5]
    9570:	3301      	adds	r3, #1
    9572:	71fb      	strb	r3, [r7, #7]
    9574:	e002      	b.n	957c <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    9576:	797b      	ldrb	r3, [r7, #5]
    9578:	3b01      	subs	r3, #1
    957a:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    957c:	79ba      	ldrb	r2, [r7, #6]
    957e:	79fb      	ldrb	r3, [r7, #7]
    9580:	429a      	cmp	r2, r3
    9582:	d2d6      	bcs.n	9532 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    9584:	68bb      	ldr	r3, [r7, #8]
    9586:	f1b3 3fff 	cmp.w	r3, #4294967295
    958a:	d003      	beq.n	9594 <_ext_irq_handler+0xbc>
				callback(pin);
    958c:	4b18      	ldr	r3, [pc, #96]	; (95f0 <_ext_irq_handler+0x118>)
    958e:	681b      	ldr	r3, [r3, #0]
    9590:	68b8      	ldr	r0, [r7, #8]
    9592:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    9594:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9598:	2201      	movs	r2, #1
    959a:	fa02 f303 	lsl.w	r3, r2, r3
    959e:	43da      	mvns	r2, r3
    95a0:	683b      	ldr	r3, [r7, #0]
    95a2:	4013      	ands	r3, r2
    95a4:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    95a6:	683b      	ldr	r3, [r7, #0]
    95a8:	4618      	mov	r0, r3
    95aa:	4b14      	ldr	r3, [pc, #80]	; (95fc <_ext_irq_handler+0x124>)
    95ac:	4798      	blx	r3
    95ae:	4603      	mov	r3, r0
    95b0:	b2db      	uxtb	r3, r3
    95b2:	3b01      	subs	r3, #1
    95b4:	b2db      	uxtb	r3, r3
    95b6:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    95b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    95bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    95c0:	d1b2      	bne.n	9528 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    95c2:	4808      	ldr	r0, [pc, #32]	; (95e4 <_ext_irq_handler+0x10c>)
    95c4:	4b08      	ldr	r3, [pc, #32]	; (95e8 <_ext_irq_handler+0x110>)
    95c6:	4798      	blx	r3
    95c8:	4603      	mov	r3, r0
    95ca:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    95cc:	683b      	ldr	r3, [r7, #0]
    95ce:	4619      	mov	r1, r3
    95d0:	4804      	ldr	r0, [pc, #16]	; (95e4 <_ext_irq_handler+0x10c>)
    95d2:	4b06      	ldr	r3, [pc, #24]	; (95ec <_ext_irq_handler+0x114>)
    95d4:	4798      	blx	r3
	while (flags) {
    95d6:	683b      	ldr	r3, [r7, #0]
    95d8:	2b00      	cmp	r3, #0
    95da:	d19b      	bne.n	9514 <_ext_irq_handler+0x3c>
	}
}
    95dc:	bf00      	nop
    95de:	3710      	adds	r7, #16
    95e0:	46bd      	mov	sp, r7
    95e2:	bd80      	pop	{r7, pc}
    95e4:	40002800 	.word	0x40002800
    95e8:	000090b1 	.word	0x000090b1
    95ec:	000090c9 	.word	0x000090c9
    95f0:	20008894 	.word	0x20008894
    95f4:	00020b54 	.word	0x00020b54
    95f8:	000080d1 	.word	0x000080d1
    95fc:	0001c1f1 	.word	0x0001c1f1
    9600:	00020b1c 	.word	0x00020b1c

00009604 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    9604:	b580      	push	{r7, lr}
    9606:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9608:	4b01      	ldr	r3, [pc, #4]	; (9610 <EIC_0_Handler+0xc>)
    960a:	4798      	blx	r3
} /**
    960c:	bf00      	nop
    960e:	bd80      	pop	{r7, pc}
    9610:	000094d9 	.word	0x000094d9

00009614 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    9614:	b580      	push	{r7, lr}
    9616:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9618:	4b01      	ldr	r3, [pc, #4]	; (9620 <EIC_4_Handler+0xc>)
    961a:	4798      	blx	r3
} /**
    961c:	bf00      	nop
    961e:	bd80      	pop	{r7, pc}
    9620:	000094d9 	.word	0x000094d9

00009624 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    9624:	b580      	push	{r7, lr}
    9626:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9628:	4b01      	ldr	r3, [pc, #4]	; (9630 <EIC_5_Handler+0xc>)
    962a:	4798      	blx	r3
} /**
    962c:	bf00      	nop
    962e:	bd80      	pop	{r7, pc}
    9630:	000094d9 	.word	0x000094d9

00009634 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    9634:	b580      	push	{r7, lr}
    9636:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9638:	4b01      	ldr	r3, [pc, #4]	; (9640 <EIC_6_Handler+0xc>)
    963a:	4798      	blx	r3
} /**
    963c:	bf00      	nop
    963e:	bd80      	pop	{r7, pc}
    9640:	000094d9 	.word	0x000094d9

00009644 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    9644:	b580      	push	{r7, lr}
    9646:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9648:	4b01      	ldr	r3, [pc, #4]	; (9650 <EIC_7_Handler+0xc>)
    964a:	4798      	blx	r3
} /**
    964c:	bf00      	nop
    964e:	bd80      	pop	{r7, pc}
    9650:	000094d9 	.word	0x000094d9

00009654 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    9654:	b580      	push	{r7, lr}
    9656:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9658:	4b01      	ldr	r3, [pc, #4]	; (9660 <EIC_8_Handler+0xc>)
    965a:	4798      	blx	r3
} /**
    965c:	bf00      	nop
    965e:	bd80      	pop	{r7, pc}
    9660:	000094d9 	.word	0x000094d9

00009664 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    9664:	b580      	push	{r7, lr}
    9666:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9668:	4b01      	ldr	r3, [pc, #4]	; (9670 <EIC_9_Handler+0xc>)
    966a:	4798      	blx	r3
}
    966c:	bf00      	nop
    966e:	bd80      	pop	{r7, pc}
    9670:	000094d9 	.word	0x000094d9

00009674 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    9674:	b480      	push	{r7}
    9676:	b085      	sub	sp, #20
    9678:	af00      	add	r7, sp, #0
    967a:	60f8      	str	r0, [r7, #12]
    967c:	460b      	mov	r3, r1
    967e:	607a      	str	r2, [r7, #4]
    9680:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    9682:	7afa      	ldrb	r2, [r7, #11]
    9684:	68fb      	ldr	r3, [r7, #12]
    9686:	3248      	adds	r2, #72	; 0x48
    9688:	6879      	ldr	r1, [r7, #4]
    968a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    968e:	bf00      	nop
    9690:	3714      	adds	r7, #20
    9692:	46bd      	mov	sp, r7
    9694:	f85d 7b04 	ldr.w	r7, [sp], #4
    9698:	4770      	bx	lr

0000969a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    969a:	b480      	push	{r7}
    969c:	b083      	sub	sp, #12
    969e:	af00      	add	r7, sp, #0
    96a0:	6078      	str	r0, [r7, #4]
    96a2:	460b      	mov	r3, r1
    96a4:	70fb      	strb	r3, [r7, #3]
    96a6:	4613      	mov	r3, r2
    96a8:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    96aa:	78fb      	ldrb	r3, [r7, #3]
    96ac:	687a      	ldr	r2, [r7, #4]
    96ae:	3304      	adds	r3, #4
    96b0:	00db      	lsls	r3, r3, #3
    96b2:	4413      	add	r3, r2
    96b4:	78ba      	ldrb	r2, [r7, #2]
    96b6:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    96b8:	78fb      	ldrb	r3, [r7, #3]
    96ba:	78ba      	ldrb	r2, [r7, #2]
    96bc:	43d2      	mvns	r2, r2
    96be:	b2d1      	uxtb	r1, r2
    96c0:	687a      	ldr	r2, [r7, #4]
    96c2:	3304      	adds	r3, #4
    96c4:	00db      	lsls	r3, r3, #3
    96c6:	4413      	add	r3, r2
    96c8:	460a      	mov	r2, r1
    96ca:	711a      	strb	r2, [r3, #4]
}
    96cc:	bf00      	nop
    96ce:	370c      	adds	r7, #12
    96d0:	46bd      	mov	sp, r7
    96d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    96d6:	4770      	bx	lr

000096d8 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    96d8:	b480      	push	{r7}
    96da:	b085      	sub	sp, #20
    96dc:	af00      	add	r7, sp, #0
    96de:	60f8      	str	r0, [r7, #12]
    96e0:	460b      	mov	r3, r1
    96e2:	607a      	str	r2, [r7, #4]
    96e4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    96e6:	7afa      	ldrb	r2, [r7, #11]
    96e8:	68fb      	ldr	r3, [r7, #12]
    96ea:	3204      	adds	r2, #4
    96ec:	6879      	ldr	r1, [r7, #4]
    96ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    96f2:	bf00      	nop
    96f4:	3714      	adds	r7, #20
    96f6:	46bd      	mov	sp, r7
    96f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    96fc:	4770      	bx	lr
	...

00009700 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    9700:	b580      	push	{r7, lr}
    9702:	b082      	sub	sp, #8
    9704:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    9706:	2300      	movs	r3, #0
    9708:	71fb      	strb	r3, [r7, #7]
    970a:	e00b      	b.n	9724 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    970c:	79fb      	ldrb	r3, [r7, #7]
    970e:	4a18      	ldr	r2, [pc, #96]	; (9770 <_event_system_init+0x70>)
    9710:	5cd3      	ldrb	r3, [r2, r3]
    9712:	461a      	mov	r2, r3
    9714:	79fb      	ldrb	r3, [r7, #7]
    9716:	4619      	mov	r1, r3
    9718:	4816      	ldr	r0, [pc, #88]	; (9774 <_event_system_init+0x74>)
    971a:	4b17      	ldr	r3, [pc, #92]	; (9778 <_event_system_init+0x78>)
    971c:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    971e:	79fb      	ldrb	r3, [r7, #7]
    9720:	3301      	adds	r3, #1
    9722:	71fb      	strb	r3, [r7, #7]
    9724:	79fb      	ldrb	r3, [r7, #7]
    9726:	2b42      	cmp	r3, #66	; 0x42
    9728:	d9f0      	bls.n	970c <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    972a:	2300      	movs	r3, #0
    972c:	71fb      	strb	r3, [r7, #7]
    972e:	e016      	b.n	975e <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    9730:	79fb      	ldrb	r3, [r7, #7]
    9732:	4a12      	ldr	r2, [pc, #72]	; (977c <_event_system_init+0x7c>)
    9734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    9738:	461a      	mov	r2, r3
    973a:	79fb      	ldrb	r3, [r7, #7]
    973c:	4619      	mov	r1, r3
    973e:	480d      	ldr	r0, [pc, #52]	; (9774 <_event_system_init+0x74>)
    9740:	4b0f      	ldr	r3, [pc, #60]	; (9780 <_event_system_init+0x80>)
    9742:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    9744:	79fb      	ldrb	r3, [r7, #7]
    9746:	4a0f      	ldr	r2, [pc, #60]	; (9784 <_event_system_init+0x84>)
    9748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    974c:	b2da      	uxtb	r2, r3
    974e:	79fb      	ldrb	r3, [r7, #7]
    9750:	4619      	mov	r1, r3
    9752:	4808      	ldr	r0, [pc, #32]	; (9774 <_event_system_init+0x74>)
    9754:	4b0c      	ldr	r3, [pc, #48]	; (9788 <_event_system_init+0x88>)
    9756:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    9758:	79fb      	ldrb	r3, [r7, #7]
    975a:	3301      	adds	r3, #1
    975c:	71fb      	strb	r3, [r7, #7]
    975e:	79fb      	ldrb	r3, [r7, #7]
    9760:	2b1f      	cmp	r3, #31
    9762:	d9e5      	bls.n	9730 <_event_system_init+0x30>
	}

	return ERR_NONE;
    9764:	2300      	movs	r3, #0
}
    9766:	4618      	mov	r0, r3
    9768:	3708      	adds	r7, #8
    976a:	46bd      	mov	sp, r7
    976c:	bd80      	pop	{r7, pc}
    976e:	bf00      	nop
    9770:	00020b6c 	.word	0x00020b6c
    9774:	4100e000 	.word	0x4100e000
    9778:	00009675 	.word	0x00009675
    977c:	00020bb0 	.word	0x00020bb0
    9780:	000096d9 	.word	0x000096d9
    9784:	00020bf0 	.word	0x00020bf0
    9788:	0000969b 	.word	0x0000969b

0000978c <hri_gclk_wait_for_sync>:
{
    978c:	b480      	push	{r7}
    978e:	b083      	sub	sp, #12
    9790:	af00      	add	r7, sp, #0
    9792:	6078      	str	r0, [r7, #4]
    9794:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9796:	bf00      	nop
    9798:	687b      	ldr	r3, [r7, #4]
    979a:	685a      	ldr	r2, [r3, #4]
    979c:	683b      	ldr	r3, [r7, #0]
    979e:	4013      	ands	r3, r2
    97a0:	2b00      	cmp	r3, #0
    97a2:	d1f9      	bne.n	9798 <hri_gclk_wait_for_sync+0xc>
}
    97a4:	bf00      	nop
    97a6:	370c      	adds	r7, #12
    97a8:	46bd      	mov	sp, r7
    97aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    97ae:	4770      	bx	lr

000097b0 <hri_gclk_write_GENCTRL_reg>:
{
    97b0:	b580      	push	{r7, lr}
    97b2:	b084      	sub	sp, #16
    97b4:	af00      	add	r7, sp, #0
    97b6:	60f8      	str	r0, [r7, #12]
    97b8:	460b      	mov	r3, r1
    97ba:	607a      	str	r2, [r7, #4]
    97bc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    97be:	7afa      	ldrb	r2, [r7, #11]
    97c0:	68fb      	ldr	r3, [r7, #12]
    97c2:	3208      	adds	r2, #8
    97c4:	6879      	ldr	r1, [r7, #4]
    97c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    97ca:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    97ce:	68f8      	ldr	r0, [r7, #12]
    97d0:	4b02      	ldr	r3, [pc, #8]	; (97dc <hri_gclk_write_GENCTRL_reg+0x2c>)
    97d2:	4798      	blx	r3
}
    97d4:	bf00      	nop
    97d6:	3710      	adds	r7, #16
    97d8:	46bd      	mov	sp, r7
    97da:	bd80      	pop	{r7, pc}
    97dc:	0000978d 	.word	0x0000978d

000097e0 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    97e0:	b580      	push	{r7, lr}
    97e2:	b082      	sub	sp, #8
    97e4:	af00      	add	r7, sp, #0
    97e6:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    97e8:	687b      	ldr	r3, [r7, #4]
    97ea:	f003 0301 	and.w	r3, r3, #1
    97ee:	2b00      	cmp	r3, #0
    97f0:	d004      	beq.n	97fc <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    97f2:	4a36      	ldr	r2, [pc, #216]	; (98cc <_gclk_init_generators_by_fref+0xec>)
    97f4:	2100      	movs	r1, #0
    97f6:	4836      	ldr	r0, [pc, #216]	; (98d0 <_gclk_init_generators_by_fref+0xf0>)
    97f8:	4b36      	ldr	r3, [pc, #216]	; (98d4 <_gclk_init_generators_by_fref+0xf4>)
    97fa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    97fc:	687b      	ldr	r3, [r7, #4]
    97fe:	f003 0302 	and.w	r3, r3, #2
    9802:	2b00      	cmp	r3, #0
    9804:	d004      	beq.n	9810 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    9806:	4a34      	ldr	r2, [pc, #208]	; (98d8 <_gclk_init_generators_by_fref+0xf8>)
    9808:	2101      	movs	r1, #1
    980a:	4831      	ldr	r0, [pc, #196]	; (98d0 <_gclk_init_generators_by_fref+0xf0>)
    980c:	4b31      	ldr	r3, [pc, #196]	; (98d4 <_gclk_init_generators_by_fref+0xf4>)
    980e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    9810:	687b      	ldr	r3, [r7, #4]
    9812:	f003 0304 	and.w	r3, r3, #4
    9816:	2b00      	cmp	r3, #0
    9818:	d004      	beq.n	9824 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    981a:	4a30      	ldr	r2, [pc, #192]	; (98dc <_gclk_init_generators_by_fref+0xfc>)
    981c:	2102      	movs	r1, #2
    981e:	482c      	ldr	r0, [pc, #176]	; (98d0 <_gclk_init_generators_by_fref+0xf0>)
    9820:	4b2c      	ldr	r3, [pc, #176]	; (98d4 <_gclk_init_generators_by_fref+0xf4>)
    9822:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    9824:	687b      	ldr	r3, [r7, #4]
    9826:	f003 0308 	and.w	r3, r3, #8
    982a:	2b00      	cmp	r3, #0
    982c:	d004      	beq.n	9838 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    982e:	4a2c      	ldr	r2, [pc, #176]	; (98e0 <_gclk_init_generators_by_fref+0x100>)
    9830:	2103      	movs	r1, #3
    9832:	4827      	ldr	r0, [pc, #156]	; (98d0 <_gclk_init_generators_by_fref+0xf0>)
    9834:	4b27      	ldr	r3, [pc, #156]	; (98d4 <_gclk_init_generators_by_fref+0xf4>)
    9836:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    9838:	687b      	ldr	r3, [r7, #4]
    983a:	f003 0310 	and.w	r3, r3, #16
    983e:	2b00      	cmp	r3, #0
    9840:	d004      	beq.n	984c <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    9842:	4a28      	ldr	r2, [pc, #160]	; (98e4 <_gclk_init_generators_by_fref+0x104>)
    9844:	2104      	movs	r1, #4
    9846:	4822      	ldr	r0, [pc, #136]	; (98d0 <_gclk_init_generators_by_fref+0xf0>)
    9848:	4b22      	ldr	r3, [pc, #136]	; (98d4 <_gclk_init_generators_by_fref+0xf4>)
    984a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    984c:	687b      	ldr	r3, [r7, #4]
    984e:	f003 0320 	and.w	r3, r3, #32
    9852:	2b00      	cmp	r3, #0
    9854:	d004      	beq.n	9860 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    9856:	4a24      	ldr	r2, [pc, #144]	; (98e8 <_gclk_init_generators_by_fref+0x108>)
    9858:	2105      	movs	r1, #5
    985a:	481d      	ldr	r0, [pc, #116]	; (98d0 <_gclk_init_generators_by_fref+0xf0>)
    985c:	4b1d      	ldr	r3, [pc, #116]	; (98d4 <_gclk_init_generators_by_fref+0xf4>)
    985e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    9860:	687b      	ldr	r3, [r7, #4]
    9862:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9866:	2b00      	cmp	r3, #0
    9868:	d004      	beq.n	9874 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    986a:	4a20      	ldr	r2, [pc, #128]	; (98ec <_gclk_init_generators_by_fref+0x10c>)
    986c:	2106      	movs	r1, #6
    986e:	4818      	ldr	r0, [pc, #96]	; (98d0 <_gclk_init_generators_by_fref+0xf0>)
    9870:	4b18      	ldr	r3, [pc, #96]	; (98d4 <_gclk_init_generators_by_fref+0xf4>)
    9872:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    9874:	687b      	ldr	r3, [r7, #4]
    9876:	f003 0380 	and.w	r3, r3, #128	; 0x80
    987a:	2b00      	cmp	r3, #0
    987c:	d004      	beq.n	9888 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    987e:	4a1c      	ldr	r2, [pc, #112]	; (98f0 <_gclk_init_generators_by_fref+0x110>)
    9880:	2107      	movs	r1, #7
    9882:	4813      	ldr	r0, [pc, #76]	; (98d0 <_gclk_init_generators_by_fref+0xf0>)
    9884:	4b13      	ldr	r3, [pc, #76]	; (98d4 <_gclk_init_generators_by_fref+0xf4>)
    9886:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    9888:	687b      	ldr	r3, [r7, #4]
    988a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    988e:	2b00      	cmp	r3, #0
    9890:	d004      	beq.n	989c <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    9892:	4a18      	ldr	r2, [pc, #96]	; (98f4 <_gclk_init_generators_by_fref+0x114>)
    9894:	2108      	movs	r1, #8
    9896:	480e      	ldr	r0, [pc, #56]	; (98d0 <_gclk_init_generators_by_fref+0xf0>)
    9898:	4b0e      	ldr	r3, [pc, #56]	; (98d4 <_gclk_init_generators_by_fref+0xf4>)
    989a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    989c:	687b      	ldr	r3, [r7, #4]
    989e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    98a2:	2b00      	cmp	r3, #0
    98a4:	d004      	beq.n	98b0 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    98a6:	4a14      	ldr	r2, [pc, #80]	; (98f8 <_gclk_init_generators_by_fref+0x118>)
    98a8:	210a      	movs	r1, #10
    98aa:	4809      	ldr	r0, [pc, #36]	; (98d0 <_gclk_init_generators_by_fref+0xf0>)
    98ac:	4b09      	ldr	r3, [pc, #36]	; (98d4 <_gclk_init_generators_by_fref+0xf4>)
    98ae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    98b0:	687b      	ldr	r3, [r7, #4]
    98b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    98b6:	2b00      	cmp	r3, #0
    98b8:	d004      	beq.n	98c4 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    98ba:	4a10      	ldr	r2, [pc, #64]	; (98fc <_gclk_init_generators_by_fref+0x11c>)
    98bc:	210b      	movs	r1, #11
    98be:	4804      	ldr	r0, [pc, #16]	; (98d0 <_gclk_init_generators_by_fref+0xf0>)
    98c0:	4b04      	ldr	r3, [pc, #16]	; (98d4 <_gclk_init_generators_by_fref+0xf4>)
    98c2:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    98c4:	bf00      	nop
    98c6:	3708      	adds	r7, #8
    98c8:	46bd      	mov	sp, r7
    98ca:	bd80      	pop	{r7, pc}
    98cc:	00010107 	.word	0x00010107
    98d0:	40001c00 	.word	0x40001c00
    98d4:	000097b1 	.word	0x000097b1
    98d8:	00010907 	.word	0x00010907
    98dc:	00010906 	.word	0x00010906
    98e0:	00020908 	.word	0x00020908
    98e4:	00010901 	.word	0x00010901
    98e8:	00062901 	.word	0x00062901
    98ec:	000c2901 	.word	0x000c2901
    98f0:	00082908 	.word	0x00082908
    98f4:	00032901 	.word	0x00032901
    98f8:	00010905 	.word	0x00010905
    98fc:	00041905 	.word	0x00041905

00009900 <hri_mclk_write_CPUDIV_reg>:
{
    9900:	b480      	push	{r7}
    9902:	b083      	sub	sp, #12
    9904:	af00      	add	r7, sp, #0
    9906:	6078      	str	r0, [r7, #4]
    9908:	460b      	mov	r3, r1
    990a:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    990c:	687b      	ldr	r3, [r7, #4]
    990e:	78fa      	ldrb	r2, [r7, #3]
    9910:	715a      	strb	r2, [r3, #5]
}
    9912:	bf00      	nop
    9914:	370c      	adds	r7, #12
    9916:	46bd      	mov	sp, r7
    9918:	f85d 7b04 	ldr.w	r7, [sp], #4
    991c:	4770      	bx	lr
	...

00009920 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    9920:	b580      	push	{r7, lr}
    9922:	b082      	sub	sp, #8
    9924:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    9926:	4b05      	ldr	r3, [pc, #20]	; (993c <_mclk_init+0x1c>)
    9928:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    992a:	2101      	movs	r1, #1
    992c:	6878      	ldr	r0, [r7, #4]
    992e:	4b04      	ldr	r3, [pc, #16]	; (9940 <_mclk_init+0x20>)
    9930:	4798      	blx	r3
}
    9932:	bf00      	nop
    9934:	3708      	adds	r7, #8
    9936:	46bd      	mov	sp, r7
    9938:	bd80      	pop	{r7, pc}
    993a:	bf00      	nop
    993c:	40000800 	.word	0x40000800
    9940:	00009901 	.word	0x00009901

00009944 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    9944:	b480      	push	{r7}
    9946:	b083      	sub	sp, #12
    9948:	af00      	add	r7, sp, #0
    994a:	6078      	str	r0, [r7, #4]
    994c:	460b      	mov	r3, r1
    994e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    9950:	687b      	ldr	r3, [r7, #4]
    9952:	78fa      	ldrb	r2, [r7, #3]
    9954:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9956:	bf00      	nop
    9958:	370c      	adds	r7, #12
    995a:	46bd      	mov	sp, r7
    995c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9960:	4770      	bx	lr

00009962 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    9962:	b480      	push	{r7}
    9964:	b083      	sub	sp, #12
    9966:	af00      	add	r7, sp, #0
    9968:	6078      	str	r0, [r7, #4]
    996a:	460b      	mov	r3, r1
    996c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    996e:	687b      	ldr	r3, [r7, #4]
    9970:	887a      	ldrh	r2, [r7, #2]
    9972:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9974:	bf00      	nop
    9976:	370c      	adds	r7, #12
    9978:	46bd      	mov	sp, r7
    997a:	f85d 7b04 	ldr.w	r7, [sp], #4
    997e:	4770      	bx	lr

00009980 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    9980:	b480      	push	{r7}
    9982:	b083      	sub	sp, #12
    9984:	af00      	add	r7, sp, #0
    9986:	6078      	str	r0, [r7, #4]
    9988:	460b      	mov	r3, r1
    998a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    998c:	687b      	ldr	r3, [r7, #4]
    998e:	78fa      	ldrb	r2, [r7, #3]
    9990:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9992:	bf00      	nop
    9994:	370c      	adds	r7, #12
    9996:	46bd      	mov	sp, r7
    9998:	f85d 7b04 	ldr.w	r7, [sp], #4
    999c:	4770      	bx	lr

0000999e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    999e:	b480      	push	{r7}
    99a0:	b083      	sub	sp, #12
    99a2:	af00      	add	r7, sp, #0
    99a4:	6078      	str	r0, [r7, #4]
    99a6:	460b      	mov	r3, r1
    99a8:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    99aa:	687b      	ldr	r3, [r7, #4]
    99ac:	78fa      	ldrb	r2, [r7, #3]
    99ae:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    99b0:	bf00      	nop
    99b2:	370c      	adds	r7, #12
    99b4:	46bd      	mov	sp, r7
    99b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    99ba:	4770      	bx	lr

000099bc <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    99bc:	b480      	push	{r7}
    99be:	b085      	sub	sp, #20
    99c0:	af00      	add	r7, sp, #0
    99c2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    99c4:	687b      	ldr	r3, [r7, #4]
    99c6:	69db      	ldr	r3, [r3, #28]
    99c8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    99ca:	68fb      	ldr	r3, [r7, #12]
    99cc:	0a1b      	lsrs	r3, r3, #8
    99ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    99d2:	60fb      	str	r3, [r7, #12]
	return tmp;
    99d4:	68fb      	ldr	r3, [r7, #12]
}
    99d6:	4618      	mov	r0, r3
    99d8:	3714      	adds	r7, #20
    99da:	46bd      	mov	sp, r7
    99dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    99e0:	4770      	bx	lr

000099e2 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    99e2:	b480      	push	{r7}
    99e4:	b083      	sub	sp, #12
    99e6:	af00      	add	r7, sp, #0
    99e8:	6078      	str	r0, [r7, #4]
    99ea:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	683a      	ldr	r2, [r7, #0]
    99f0:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    99f2:	bf00      	nop
    99f4:	370c      	adds	r7, #12
    99f6:	46bd      	mov	sp, r7
    99f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    99fc:	4770      	bx	lr
	...

00009a00 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    9a00:	b580      	push	{r7, lr}
    9a02:	b082      	sub	sp, #8
    9a04:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    9a06:	4b13      	ldr	r3, [pc, #76]	; (9a54 <_osc32kctrl_init_sources+0x54>)
    9a08:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    9a0a:	2300      	movs	r3, #0
    9a0c:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    9a0e:	f242 018e 	movw	r1, #8334	; 0x208e
    9a12:	6878      	ldr	r0, [r7, #4]
    9a14:	4b10      	ldr	r3, [pc, #64]	; (9a58 <_osc32kctrl_init_sources+0x58>)
    9a16:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    9a18:	2100      	movs	r1, #0
    9a1a:	6878      	ldr	r0, [r7, #4]
    9a1c:	4b0f      	ldr	r3, [pc, #60]	; (9a5c <_osc32kctrl_init_sources+0x5c>)
    9a1e:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    9a20:	2100      	movs	r1, #0
    9a22:	6878      	ldr	r0, [r7, #4]
    9a24:	4b0e      	ldr	r3, [pc, #56]	; (9a60 <_osc32kctrl_init_sources+0x60>)
    9a26:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    9a28:	6878      	ldr	r0, [r7, #4]
    9a2a:	4b0e      	ldr	r3, [pc, #56]	; (9a64 <_osc32kctrl_init_sources+0x64>)
    9a2c:	4798      	blx	r3
    9a2e:	4603      	mov	r3, r0
    9a30:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    9a32:	887b      	ldrh	r3, [r7, #2]
    9a34:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    9a36:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    9a3a:	4619      	mov	r1, r3
    9a3c:	6878      	ldr	r0, [r7, #4]
    9a3e:	4b0a      	ldr	r3, [pc, #40]	; (9a68 <_osc32kctrl_init_sources+0x68>)
    9a40:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    9a42:	2100      	movs	r1, #0
    9a44:	6878      	ldr	r0, [r7, #4]
    9a46:	4b09      	ldr	r3, [pc, #36]	; (9a6c <_osc32kctrl_init_sources+0x6c>)
    9a48:	4798      	blx	r3
	(void)calib;
}
    9a4a:	bf00      	nop
    9a4c:	3708      	adds	r7, #8
    9a4e:	46bd      	mov	sp, r7
    9a50:	bd80      	pop	{r7, pc}
    9a52:	bf00      	nop
    9a54:	40001400 	.word	0x40001400
    9a58:	00009963 	.word	0x00009963
    9a5c:	00009981 	.word	0x00009981
    9a60:	0000999f 	.word	0x0000999f
    9a64:	000099bd 	.word	0x000099bd
    9a68:	000099e3 	.word	0x000099e3
    9a6c:	00009945 	.word	0x00009945

00009a70 <hri_gclk_wait_for_sync>:
{
    9a70:	b480      	push	{r7}
    9a72:	b083      	sub	sp, #12
    9a74:	af00      	add	r7, sp, #0
    9a76:	6078      	str	r0, [r7, #4]
    9a78:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9a7a:	bf00      	nop
    9a7c:	687b      	ldr	r3, [r7, #4]
    9a7e:	685a      	ldr	r2, [r3, #4]
    9a80:	683b      	ldr	r3, [r7, #0]
    9a82:	4013      	ands	r3, r2
    9a84:	2b00      	cmp	r3, #0
    9a86:	d1f9      	bne.n	9a7c <hri_gclk_wait_for_sync+0xc>
}
    9a88:	bf00      	nop
    9a8a:	370c      	adds	r7, #12
    9a8c:	46bd      	mov	sp, r7
    9a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a92:	4770      	bx	lr

00009a94 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    9a94:	b480      	push	{r7}
    9a96:	b083      	sub	sp, #12
    9a98:	af00      	add	r7, sp, #0
    9a9a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    9a9c:	687b      	ldr	r3, [r7, #4]
    9a9e:	685b      	ldr	r3, [r3, #4]
    9aa0:	089b      	lsrs	r3, r3, #2
    9aa2:	f003 0301 	and.w	r3, r3, #1
    9aa6:	2b00      	cmp	r3, #0
    9aa8:	bf14      	ite	ne
    9aaa:	2301      	movne	r3, #1
    9aac:	2300      	moveq	r3, #0
    9aae:	b2db      	uxtb	r3, r3
}
    9ab0:	4618      	mov	r0, r3
    9ab2:	370c      	adds	r7, #12
    9ab4:	46bd      	mov	sp, r7
    9ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aba:	4770      	bx	lr

00009abc <hri_gclk_read_SYNCBUSY_reg>:
{
    9abc:	b480      	push	{r7}
    9abe:	b083      	sub	sp, #12
    9ac0:	af00      	add	r7, sp, #0
    9ac2:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    9ac4:	687b      	ldr	r3, [r7, #4]
    9ac6:	685b      	ldr	r3, [r3, #4]
}
    9ac8:	4618      	mov	r0, r3
    9aca:	370c      	adds	r7, #12
    9acc:	46bd      	mov	sp, r7
    9ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ad2:	4770      	bx	lr

00009ad4 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    9ad4:	b580      	push	{r7, lr}
    9ad6:	b086      	sub	sp, #24
    9ad8:	af00      	add	r7, sp, #0
    9ada:	60f8      	str	r0, [r7, #12]
    9adc:	460b      	mov	r3, r1
    9ade:	607a      	str	r2, [r7, #4]
    9ae0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    9ae2:	7afa      	ldrb	r2, [r7, #11]
    9ae4:	68fb      	ldr	r3, [r7, #12]
    9ae6:	3208      	adds	r2, #8
    9ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9aec:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    9aee:	697b      	ldr	r3, [r7, #20]
    9af0:	f023 030f 	bic.w	r3, r3, #15
    9af4:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    9af6:	687b      	ldr	r3, [r7, #4]
    9af8:	f003 030f 	and.w	r3, r3, #15
    9afc:	697a      	ldr	r2, [r7, #20]
    9afe:	4313      	orrs	r3, r2
    9b00:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    9b02:	7afa      	ldrb	r2, [r7, #11]
    9b04:	68fb      	ldr	r3, [r7, #12]
    9b06:	3208      	adds	r2, #8
    9b08:	6979      	ldr	r1, [r7, #20]
    9b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    9b0e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    9b12:	68f8      	ldr	r0, [r7, #12]
    9b14:	4b02      	ldr	r3, [pc, #8]	; (9b20 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    9b16:	4798      	blx	r3
}
    9b18:	bf00      	nop
    9b1a:	3718      	adds	r7, #24
    9b1c:	46bd      	mov	sp, r7
    9b1e:	bd80      	pop	{r7, pc}
    9b20:	00009a71 	.word	0x00009a71

00009b24 <hri_gclk_write_PCHCTRL_reg>:
{
    9b24:	b480      	push	{r7}
    9b26:	b085      	sub	sp, #20
    9b28:	af00      	add	r7, sp, #0
    9b2a:	60f8      	str	r0, [r7, #12]
    9b2c:	460b      	mov	r3, r1
    9b2e:	607a      	str	r2, [r7, #4]
    9b30:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    9b32:	7afa      	ldrb	r2, [r7, #11]
    9b34:	68fb      	ldr	r3, [r7, #12]
    9b36:	3220      	adds	r2, #32
    9b38:	6879      	ldr	r1, [r7, #4]
    9b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    9b3e:	bf00      	nop
    9b40:	3714      	adds	r7, #20
    9b42:	46bd      	mov	sp, r7
    9b44:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b48:	4770      	bx	lr

00009b4a <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    9b4a:	b480      	push	{r7}
    9b4c:	b085      	sub	sp, #20
    9b4e:	af00      	add	r7, sp, #0
    9b50:	60f8      	str	r0, [r7, #12]
    9b52:	460b      	mov	r3, r1
    9b54:	607a      	str	r2, [r7, #4]
    9b56:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    9b58:	bf00      	nop
    9b5a:	7afa      	ldrb	r2, [r7, #11]
    9b5c:	68f9      	ldr	r1, [r7, #12]
    9b5e:	4613      	mov	r3, r2
    9b60:	009b      	lsls	r3, r3, #2
    9b62:	4413      	add	r3, r2
    9b64:	009b      	lsls	r3, r3, #2
    9b66:	440b      	add	r3, r1
    9b68:	333c      	adds	r3, #60	; 0x3c
    9b6a:	681a      	ldr	r2, [r3, #0]
    9b6c:	687b      	ldr	r3, [r7, #4]
    9b6e:	4013      	ands	r3, r2
    9b70:	2b00      	cmp	r3, #0
    9b72:	d1f2      	bne.n	9b5a <hri_oscctrl_wait_for_sync+0x10>
	};
}
    9b74:	bf00      	nop
    9b76:	3714      	adds	r7, #20
    9b78:	46bd      	mov	sp, r7
    9b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b7e:	4770      	bx	lr

00009b80 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    9b80:	b480      	push	{r7}
    9b82:	b083      	sub	sp, #12
    9b84:	af00      	add	r7, sp, #0
    9b86:	6078      	str	r0, [r7, #4]
    9b88:	460b      	mov	r3, r1
    9b8a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    9b8c:	78fa      	ldrb	r2, [r7, #3]
    9b8e:	6879      	ldr	r1, [r7, #4]
    9b90:	4613      	mov	r3, r2
    9b92:	009b      	lsls	r3, r3, #2
    9b94:	4413      	add	r3, r2
    9b96:	009b      	lsls	r3, r3, #2
    9b98:	440b      	add	r3, r1
    9b9a:	3340      	adds	r3, #64	; 0x40
    9b9c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    9b9e:	f003 0301 	and.w	r3, r3, #1
    9ba2:	2b00      	cmp	r3, #0
    9ba4:	bf14      	ite	ne
    9ba6:	2301      	movne	r3, #1
    9ba8:	2300      	moveq	r3, #0
    9baa:	b2db      	uxtb	r3, r3
}
    9bac:	4618      	mov	r0, r3
    9bae:	370c      	adds	r7, #12
    9bb0:	46bd      	mov	sp, r7
    9bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bb6:	4770      	bx	lr

00009bb8 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    9bb8:	b480      	push	{r7}
    9bba:	b083      	sub	sp, #12
    9bbc:	af00      	add	r7, sp, #0
    9bbe:	6078      	str	r0, [r7, #4]
    9bc0:	460b      	mov	r3, r1
    9bc2:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    9bc4:	78fa      	ldrb	r2, [r7, #3]
    9bc6:	6879      	ldr	r1, [r7, #4]
    9bc8:	4613      	mov	r3, r2
    9bca:	009b      	lsls	r3, r3, #2
    9bcc:	4413      	add	r3, r2
    9bce:	009b      	lsls	r3, r3, #2
    9bd0:	440b      	add	r3, r1
    9bd2:	3340      	adds	r3, #64	; 0x40
    9bd4:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    9bd6:	085b      	lsrs	r3, r3, #1
    9bd8:	f003 0301 	and.w	r3, r3, #1
    9bdc:	2b00      	cmp	r3, #0
    9bde:	bf14      	ite	ne
    9be0:	2301      	movne	r3, #1
    9be2:	2300      	moveq	r3, #0
    9be4:	b2db      	uxtb	r3, r3
}
    9be6:	4618      	mov	r0, r3
    9be8:	370c      	adds	r7, #12
    9bea:	46bd      	mov	sp, r7
    9bec:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bf0:	4770      	bx	lr
	...

00009bf4 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    9bf4:	b580      	push	{r7, lr}
    9bf6:	b082      	sub	sp, #8
    9bf8:	af00      	add	r7, sp, #0
    9bfa:	6078      	str	r0, [r7, #4]
    9bfc:	460b      	mov	r3, r1
    9bfe:	70fb      	strb	r3, [r7, #3]
    9c00:	4613      	mov	r3, r2
    9c02:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    9c04:	78fa      	ldrb	r2, [r7, #3]
    9c06:	6879      	ldr	r1, [r7, #4]
    9c08:	4613      	mov	r3, r2
    9c0a:	009b      	lsls	r3, r3, #2
    9c0c:	4413      	add	r3, r2
    9c0e:	009b      	lsls	r3, r3, #2
    9c10:	440b      	add	r3, r1
    9c12:	3330      	adds	r3, #48	; 0x30
    9c14:	78ba      	ldrb	r2, [r7, #2]
    9c16:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    9c18:	78fb      	ldrb	r3, [r7, #3]
    9c1a:	2202      	movs	r2, #2
    9c1c:	4619      	mov	r1, r3
    9c1e:	6878      	ldr	r0, [r7, #4]
    9c20:	4b02      	ldr	r3, [pc, #8]	; (9c2c <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    9c22:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9c24:	bf00      	nop
    9c26:	3708      	adds	r7, #8
    9c28:	46bd      	mov	sp, r7
    9c2a:	bd80      	pop	{r7, pc}
    9c2c:	00009b4b 	.word	0x00009b4b

00009c30 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    9c30:	b580      	push	{r7, lr}
    9c32:	b084      	sub	sp, #16
    9c34:	af00      	add	r7, sp, #0
    9c36:	60f8      	str	r0, [r7, #12]
    9c38:	460b      	mov	r3, r1
    9c3a:	607a      	str	r2, [r7, #4]
    9c3c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    9c3e:	7afa      	ldrb	r2, [r7, #11]
    9c40:	68f9      	ldr	r1, [r7, #12]
    9c42:	4613      	mov	r3, r2
    9c44:	009b      	lsls	r3, r3, #2
    9c46:	4413      	add	r3, r2
    9c48:	009b      	lsls	r3, r3, #2
    9c4a:	440b      	add	r3, r1
    9c4c:	3334      	adds	r3, #52	; 0x34
    9c4e:	687a      	ldr	r2, [r7, #4]
    9c50:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    9c52:	7afb      	ldrb	r3, [r7, #11]
    9c54:	2206      	movs	r2, #6
    9c56:	4619      	mov	r1, r3
    9c58:	68f8      	ldr	r0, [r7, #12]
    9c5a:	4b03      	ldr	r3, [pc, #12]	; (9c68 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    9c5c:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9c5e:	bf00      	nop
    9c60:	3710      	adds	r7, #16
    9c62:	46bd      	mov	sp, r7
    9c64:	bd80      	pop	{r7, pc}
    9c66:	bf00      	nop
    9c68:	00009b4b 	.word	0x00009b4b

00009c6c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    9c6c:	b480      	push	{r7}
    9c6e:	b085      	sub	sp, #20
    9c70:	af00      	add	r7, sp, #0
    9c72:	60f8      	str	r0, [r7, #12]
    9c74:	460b      	mov	r3, r1
    9c76:	607a      	str	r2, [r7, #4]
    9c78:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    9c7a:	7afa      	ldrb	r2, [r7, #11]
    9c7c:	68f9      	ldr	r1, [r7, #12]
    9c7e:	4613      	mov	r3, r2
    9c80:	009b      	lsls	r3, r3, #2
    9c82:	4413      	add	r3, r2
    9c84:	009b      	lsls	r3, r3, #2
    9c86:	440b      	add	r3, r1
    9c88:	3338      	adds	r3, #56	; 0x38
    9c8a:	687a      	ldr	r2, [r7, #4]
    9c8c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9c8e:	bf00      	nop
    9c90:	3714      	adds	r7, #20
    9c92:	46bd      	mov	sp, r7
    9c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c98:	4770      	bx	lr

00009c9a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    9c9a:	b480      	push	{r7}
    9c9c:	b083      	sub	sp, #12
    9c9e:	af00      	add	r7, sp, #0
    9ca0:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    9ca2:	687b      	ldr	r3, [r7, #4]
    9ca4:	691b      	ldr	r3, [r3, #16]
    9ca6:	085b      	lsrs	r3, r3, #1
    9ca8:	f003 0301 	and.w	r3, r3, #1
    9cac:	2b00      	cmp	r3, #0
    9cae:	bf14      	ite	ne
    9cb0:	2301      	movne	r3, #1
    9cb2:	2300      	moveq	r3, #0
    9cb4:	b2db      	uxtb	r3, r3
}
    9cb6:	4618      	mov	r0, r3
    9cb8:	370c      	adds	r7, #12
    9cba:	46bd      	mov	sp, r7
    9cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cc0:	4770      	bx	lr

00009cc2 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    9cc2:	b480      	push	{r7}
    9cc4:	b083      	sub	sp, #12
    9cc6:	af00      	add	r7, sp, #0
    9cc8:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    9cca:	687b      	ldr	r3, [r7, #4]
    9ccc:	691b      	ldr	r3, [r3, #16]
    9cce:	0a1b      	lsrs	r3, r3, #8
    9cd0:	f003 0301 	and.w	r3, r3, #1
    9cd4:	2b00      	cmp	r3, #0
    9cd6:	bf14      	ite	ne
    9cd8:	2301      	movne	r3, #1
    9cda:	2300      	moveq	r3, #0
    9cdc:	b2db      	uxtb	r3, r3
}
    9cde:	4618      	mov	r0, r3
    9ce0:	370c      	adds	r7, #12
    9ce2:	46bd      	mov	sp, r7
    9ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ce8:	4770      	bx	lr

00009cea <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    9cea:	b480      	push	{r7}
    9cec:	b085      	sub	sp, #20
    9cee:	af00      	add	r7, sp, #0
    9cf0:	6078      	str	r0, [r7, #4]
    9cf2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9cf4:	687b      	ldr	r3, [r7, #4]
    9cf6:	691b      	ldr	r3, [r3, #16]
    9cf8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9cfa:	68fa      	ldr	r2, [r7, #12]
    9cfc:	683b      	ldr	r3, [r7, #0]
    9cfe:	4013      	ands	r3, r2
    9d00:	60fb      	str	r3, [r7, #12]
	return tmp;
    9d02:	68fb      	ldr	r3, [r7, #12]
}
    9d04:	4618      	mov	r0, r3
    9d06:	3714      	adds	r7, #20
    9d08:	46bd      	mov	sp, r7
    9d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d0e:	4770      	bx	lr

00009d10 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    9d10:	b480      	push	{r7}
    9d12:	b085      	sub	sp, #20
    9d14:	af00      	add	r7, sp, #0
    9d16:	60f8      	str	r0, [r7, #12]
    9d18:	460b      	mov	r3, r1
    9d1a:	607a      	str	r2, [r7, #4]
    9d1c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    9d1e:	7afb      	ldrb	r3, [r7, #11]
    9d20:	68fa      	ldr	r2, [r7, #12]
    9d22:	3304      	adds	r3, #4
    9d24:	009b      	lsls	r3, r3, #2
    9d26:	4413      	add	r3, r2
    9d28:	687a      	ldr	r2, [r7, #4]
    9d2a:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9d2c:	bf00      	nop
    9d2e:	3714      	adds	r7, #20
    9d30:	46bd      	mov	sp, r7
    9d32:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d36:	4770      	bx	lr

00009d38 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    9d38:	b480      	push	{r7}
    9d3a:	b083      	sub	sp, #12
    9d3c:	af00      	add	r7, sp, #0
    9d3e:	6078      	str	r0, [r7, #4]
    9d40:	460b      	mov	r3, r1
    9d42:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    9d44:	687b      	ldr	r3, [r7, #4]
    9d46:	78fa      	ldrb	r2, [r7, #3]
    9d48:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9d4a:	bf00      	nop
    9d4c:	370c      	adds	r7, #12
    9d4e:	46bd      	mov	sp, r7
    9d50:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d54:	4770      	bx	lr

00009d56 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    9d56:	b480      	push	{r7}
    9d58:	b085      	sub	sp, #20
    9d5a:	af00      	add	r7, sp, #0
    9d5c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    9d5e:	687b      	ldr	r3, [r7, #4]
    9d60:	f893 3020 	ldrb.w	r3, [r3, #32]
    9d64:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9d66:	7bfb      	ldrb	r3, [r7, #15]
    9d68:	f003 0301 	and.w	r3, r3, #1
    9d6c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9d6e:	7bfb      	ldrb	r3, [r7, #15]
    9d70:	2b00      	cmp	r3, #0
    9d72:	bf14      	ite	ne
    9d74:	2301      	movne	r3, #1
    9d76:	2300      	moveq	r3, #0
    9d78:	b2db      	uxtb	r3, r3
}
    9d7a:	4618      	mov	r0, r3
    9d7c:	3714      	adds	r7, #20
    9d7e:	46bd      	mov	sp, r7
    9d80:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d84:	4770      	bx	lr

00009d86 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    9d86:	b480      	push	{r7}
    9d88:	b083      	sub	sp, #12
    9d8a:	af00      	add	r7, sp, #0
    9d8c:	6078      	str	r0, [r7, #4]
    9d8e:	460b      	mov	r3, r1
    9d90:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    9d92:	687b      	ldr	r3, [r7, #4]
    9d94:	78fa      	ldrb	r2, [r7, #3]
    9d96:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9d9a:	bf00      	nop
    9d9c:	370c      	adds	r7, #12
    9d9e:	46bd      	mov	sp, r7
    9da0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9da4:	4770      	bx	lr

00009da6 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    9da6:	b480      	push	{r7}
    9da8:	b083      	sub	sp, #12
    9daa:	af00      	add	r7, sp, #0
    9dac:	6078      	str	r0, [r7, #4]
    9dae:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    9db0:	687b      	ldr	r3, [r7, #4]
    9db2:	683a      	ldr	r2, [r7, #0]
    9db4:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9db6:	bf00      	nop
    9db8:	370c      	adds	r7, #12
    9dba:	46bd      	mov	sp, r7
    9dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dc0:	4770      	bx	lr

00009dc2 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    9dc2:	b480      	push	{r7}
    9dc4:	b083      	sub	sp, #12
    9dc6:	af00      	add	r7, sp, #0
    9dc8:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    9dca:	687b      	ldr	r3, [r7, #4]
    9dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    9dce:	4618      	mov	r0, r3
    9dd0:	370c      	adds	r7, #12
    9dd2:	46bd      	mov	sp, r7
    9dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dd8:	4770      	bx	lr

00009dda <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    9dda:	b480      	push	{r7}
    9ddc:	b083      	sub	sp, #12
    9dde:	af00      	add	r7, sp, #0
    9de0:	6078      	str	r0, [r7, #4]
    9de2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    9de4:	687b      	ldr	r3, [r7, #4]
    9de6:	683a      	ldr	r2, [r7, #0]
    9de8:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9dea:	bf00      	nop
    9dec:	370c      	adds	r7, #12
    9dee:	46bd      	mov	sp, r7
    9df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9df4:	4770      	bx	lr

00009df6 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    9df6:	b480      	push	{r7}
    9df8:	b085      	sub	sp, #20
    9dfa:	af00      	add	r7, sp, #0
    9dfc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9dfe:	687b      	ldr	r3, [r7, #4]
    9e00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9e04:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    9e06:	7bfb      	ldrb	r3, [r7, #15]
    9e08:	085b      	lsrs	r3, r3, #1
    9e0a:	b2db      	uxtb	r3, r3
    9e0c:	f003 0301 	and.w	r3, r3, #1
    9e10:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9e12:	7bfb      	ldrb	r3, [r7, #15]
    9e14:	2b00      	cmp	r3, #0
    9e16:	bf14      	ite	ne
    9e18:	2301      	movne	r3, #1
    9e1a:	2300      	moveq	r3, #0
    9e1c:	b2db      	uxtb	r3, r3
}
    9e1e:	4618      	mov	r0, r3
    9e20:	3714      	adds	r7, #20
    9e22:	46bd      	mov	sp, r7
    9e24:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e28:	4770      	bx	lr

00009e2a <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    9e2a:	b480      	push	{r7}
    9e2c:	b085      	sub	sp, #20
    9e2e:	af00      	add	r7, sp, #0
    9e30:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9e32:	687b      	ldr	r3, [r7, #4]
    9e34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9e38:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    9e3a:	7bfb      	ldrb	r3, [r7, #15]
    9e3c:	089b      	lsrs	r3, r3, #2
    9e3e:	b2db      	uxtb	r3, r3
    9e40:	f003 0301 	and.w	r3, r3, #1
    9e44:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9e46:	7bfb      	ldrb	r3, [r7, #15]
    9e48:	2b00      	cmp	r3, #0
    9e4a:	bf14      	ite	ne
    9e4c:	2301      	movne	r3, #1
    9e4e:	2300      	moveq	r3, #0
    9e50:	b2db      	uxtb	r3, r3
}
    9e52:	4618      	mov	r0, r3
    9e54:	3714      	adds	r7, #20
    9e56:	46bd      	mov	sp, r7
    9e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e5c:	4770      	bx	lr

00009e5e <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    9e5e:	b480      	push	{r7}
    9e60:	b085      	sub	sp, #20
    9e62:	af00      	add	r7, sp, #0
    9e64:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9e66:	687b      	ldr	r3, [r7, #4]
    9e68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9e6c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    9e6e:	7bfb      	ldrb	r3, [r7, #15]
    9e70:	08db      	lsrs	r3, r3, #3
    9e72:	b2db      	uxtb	r3, r3
    9e74:	f003 0301 	and.w	r3, r3, #1
    9e78:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9e7a:	7bfb      	ldrb	r3, [r7, #15]
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	bf14      	ite	ne
    9e80:	2301      	movne	r3, #1
    9e82:	2300      	moveq	r3, #0
    9e84:	b2db      	uxtb	r3, r3
}
    9e86:	4618      	mov	r0, r3
    9e88:	3714      	adds	r7, #20
    9e8a:	46bd      	mov	sp, r7
    9e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e90:	4770      	bx	lr

00009e92 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    9e92:	b480      	push	{r7}
    9e94:	b085      	sub	sp, #20
    9e96:	af00      	add	r7, sp, #0
    9e98:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9e9a:	687b      	ldr	r3, [r7, #4]
    9e9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9ea0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    9ea2:	7bfb      	ldrb	r3, [r7, #15]
    9ea4:	091b      	lsrs	r3, r3, #4
    9ea6:	b2db      	uxtb	r3, r3
    9ea8:	f003 0301 	and.w	r3, r3, #1
    9eac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9eae:	7bfb      	ldrb	r3, [r7, #15]
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	bf14      	ite	ne
    9eb4:	2301      	movne	r3, #1
    9eb6:	2300      	moveq	r3, #0
    9eb8:	b2db      	uxtb	r3, r3
}
    9eba:	4618      	mov	r0, r3
    9ebc:	3714      	adds	r7, #20
    9ebe:	46bd      	mov	sp, r7
    9ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ec4:	4770      	bx	lr
	...

00009ec8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    9ec8:	b580      	push	{r7, lr}
    9eca:	b082      	sub	sp, #8
    9ecc:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9ece:	4b0a      	ldr	r3, [pc, #40]	; (9ef8 <_oscctrl_init_sources+0x30>)
    9ed0:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    9ed2:	4a0a      	ldr	r2, [pc, #40]	; (9efc <_oscctrl_init_sources+0x34>)
    9ed4:	2101      	movs	r1, #1
    9ed6:	6878      	ldr	r0, [r7, #4]
    9ed8:	4b09      	ldr	r3, [pc, #36]	; (9f00 <_oscctrl_init_sources+0x38>)
    9eda:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    9edc:	bf00      	nop
    9ede:	6878      	ldr	r0, [r7, #4]
    9ee0:	4b08      	ldr	r3, [pc, #32]	; (9f04 <_oscctrl_init_sources+0x3c>)
    9ee2:	4798      	blx	r3
    9ee4:	4603      	mov	r3, r0
    9ee6:	f083 0301 	eor.w	r3, r3, #1
    9eea:	b2db      	uxtb	r3, r3
    9eec:	2b00      	cmp	r3, #0
    9eee:	d1f6      	bne.n	9ede <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    9ef0:	bf00      	nop
    9ef2:	3708      	adds	r7, #8
    9ef4:	46bd      	mov	sp, r7
    9ef6:	bd80      	pop	{r7, pc}
    9ef8:	40001000 	.word	0x40001000
    9efc:	03002646 	.word	0x03002646
    9f00:	00009d11 	.word	0x00009d11
    9f04:	00009c9b 	.word	0x00009c9b

00009f08 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    9f08:	b580      	push	{r7, lr}
    9f0a:	b084      	sub	sp, #16
    9f0c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9f0e:	4b6b      	ldr	r3, [pc, #428]	; (a0bc <_oscctrl_init_referenced_generators+0x1b4>)
    9f10:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    9f12:	2204      	movs	r2, #4
    9f14:	2100      	movs	r1, #0
    9f16:	486a      	ldr	r0, [pc, #424]	; (a0c0 <_oscctrl_init_referenced_generators+0x1b8>)
    9f18:	4b6a      	ldr	r3, [pc, #424]	; (a0c4 <_oscctrl_init_referenced_generators+0x1bc>)
    9f1a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9f1c:	bf00      	nop
    9f1e:	4868      	ldr	r0, [pc, #416]	; (a0c0 <_oscctrl_init_referenced_generators+0x1b8>)
    9f20:	4b69      	ldr	r3, [pc, #420]	; (a0c8 <_oscctrl_init_referenced_generators+0x1c0>)
    9f22:	4798      	blx	r3
    9f24:	4603      	mov	r3, r0
    9f26:	2b00      	cmp	r3, #0
    9f28:	d1f9      	bne.n	9f1e <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    9f2a:	2100      	movs	r1, #0
    9f2c:	68f8      	ldr	r0, [r7, #12]
    9f2e:	4b67      	ldr	r3, [pc, #412]	; (a0cc <_oscctrl_init_referenced_generators+0x1c4>)
    9f30:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    9f32:	4967      	ldr	r1, [pc, #412]	; (a0d0 <_oscctrl_init_referenced_generators+0x1c8>)
    9f34:	68f8      	ldr	r0, [r7, #12]
    9f36:	4b67      	ldr	r3, [pc, #412]	; (a0d4 <_oscctrl_init_referenced_generators+0x1cc>)
    9f38:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    9f3a:	bf00      	nop
    9f3c:	68f8      	ldr	r0, [r7, #12]
    9f3e:	4b66      	ldr	r3, [pc, #408]	; (a0d8 <_oscctrl_init_referenced_generators+0x1d0>)
    9f40:	4798      	blx	r3
    9f42:	4603      	mov	r3, r0
    9f44:	2b00      	cmp	r3, #0
    9f46:	d1f9      	bne.n	9f3c <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    9f48:	2100      	movs	r1, #0
    9f4a:	68f8      	ldr	r0, [r7, #12]
    9f4c:	4b63      	ldr	r3, [pc, #396]	; (a0dc <_oscctrl_init_referenced_generators+0x1d4>)
    9f4e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9f50:	bf00      	nop
    9f52:	68f8      	ldr	r0, [r7, #12]
    9f54:	4b62      	ldr	r3, [pc, #392]	; (a0e0 <_oscctrl_init_referenced_generators+0x1d8>)
    9f56:	4798      	blx	r3
    9f58:	4603      	mov	r3, r0
    9f5a:	2b00      	cmp	r3, #0
    9f5c:	d1f9      	bne.n	9f52 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    9f5e:	2302      	movs	r3, #2
    9f60:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    9f62:	7afb      	ldrb	r3, [r7, #11]
    9f64:	4619      	mov	r1, r3
    9f66:	68f8      	ldr	r0, [r7, #12]
    9f68:	4b58      	ldr	r3, [pc, #352]	; (a0cc <_oscctrl_init_referenced_generators+0x1c4>)
    9f6a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    9f6c:	bf00      	nop
    9f6e:	68f8      	ldr	r0, [r7, #12]
    9f70:	4b5c      	ldr	r3, [pc, #368]	; (a0e4 <_oscctrl_init_referenced_generators+0x1dc>)
    9f72:	4798      	blx	r3
    9f74:	4603      	mov	r3, r0
    9f76:	2b00      	cmp	r3, #0
    9f78:	d1f9      	bne.n	9f6e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    9f7a:	68f8      	ldr	r0, [r7, #12]
    9f7c:	4b5a      	ldr	r3, [pc, #360]	; (a0e8 <_oscctrl_init_referenced_generators+0x1e0>)
    9f7e:	4798      	blx	r3
    9f80:	4603      	mov	r3, r0
    9f82:	4619      	mov	r1, r3
    9f84:	68f8      	ldr	r0, [r7, #12]
    9f86:	4b59      	ldr	r3, [pc, #356]	; (a0ec <_oscctrl_init_referenced_generators+0x1e4>)
    9f88:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    9f8a:	bf00      	nop
    9f8c:	68f8      	ldr	r0, [r7, #12]
    9f8e:	4b58      	ldr	r3, [pc, #352]	; (a0f0 <_oscctrl_init_referenced_generators+0x1e8>)
    9f90:	4798      	blx	r3
    9f92:	4603      	mov	r3, r0
    9f94:	2b00      	cmp	r3, #0
    9f96:	d1f9      	bne.n	9f8c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    9f98:	2319      	movs	r3, #25
    9f9a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    9f9c:	7afb      	ldrb	r3, [r7, #11]
    9f9e:	4619      	mov	r1, r3
    9fa0:	68f8      	ldr	r0, [r7, #12]
    9fa2:	4b4e      	ldr	r3, [pc, #312]	; (a0dc <_oscctrl_init_referenced_generators+0x1d4>)
    9fa4:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9fa6:	bf00      	nop
    9fa8:	68f8      	ldr	r0, [r7, #12]
    9faa:	4b4d      	ldr	r3, [pc, #308]	; (a0e0 <_oscctrl_init_referenced_generators+0x1d8>)
    9fac:	4798      	blx	r3
    9fae:	4603      	mov	r3, r0
    9fb0:	2b00      	cmp	r3, #0
    9fb2:	d1f9      	bne.n	9fa8 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    9fb4:	2245      	movs	r2, #69	; 0x45
    9fb6:	2101      	movs	r1, #1
    9fb8:	4841      	ldr	r0, [pc, #260]	; (a0c0 <_oscctrl_init_referenced_generators+0x1b8>)
    9fba:	4b4e      	ldr	r3, [pc, #312]	; (a0f4 <_oscctrl_init_referenced_generators+0x1ec>)
    9fbc:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    9fbe:	223b      	movs	r2, #59	; 0x3b
    9fc0:	2100      	movs	r1, #0
    9fc2:	68f8      	ldr	r0, [r7, #12]
    9fc4:	4b4c      	ldr	r3, [pc, #304]	; (a0f8 <_oscctrl_init_referenced_generators+0x1f0>)
    9fc6:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    9fc8:	f44f 6201 	mov.w	r2, #2064	; 0x810
    9fcc:	2100      	movs	r1, #0
    9fce:	68f8      	ldr	r0, [r7, #12]
    9fd0:	4b4a      	ldr	r3, [pc, #296]	; (a0fc <_oscctrl_init_referenced_generators+0x1f4>)
    9fd2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9fd4:	2242      	movs	r2, #66	; 0x42
    9fd6:	2100      	movs	r1, #0
    9fd8:	68f8      	ldr	r0, [r7, #12]
    9fda:	4b49      	ldr	r3, [pc, #292]	; (a100 <_oscctrl_init_referenced_generators+0x1f8>)
    9fdc:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    9fde:	4a49      	ldr	r2, [pc, #292]	; (a104 <_oscctrl_init_referenced_generators+0x1fc>)
    9fe0:	2101      	movs	r1, #1
    9fe2:	68f8      	ldr	r0, [r7, #12]
    9fe4:	4b44      	ldr	r3, [pc, #272]	; (a0f8 <_oscctrl_init_referenced_generators+0x1f0>)
    9fe6:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    9fe8:	f44f 6203 	mov.w	r2, #2096	; 0x830
    9fec:	2101      	movs	r1, #1
    9fee:	68f8      	ldr	r0, [r7, #12]
    9ff0:	4b42      	ldr	r3, [pc, #264]	; (a0fc <_oscctrl_init_referenced_generators+0x1f4>)
    9ff2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9ff4:	2202      	movs	r2, #2
    9ff6:	2101      	movs	r1, #1
    9ff8:	68f8      	ldr	r0, [r7, #12]
    9ffa:	4b41      	ldr	r3, [pc, #260]	; (a100 <_oscctrl_init_referenced_generators+0x1f8>)
    9ffc:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    9ffe:	68f8      	ldr	r0, [r7, #12]
    a000:	4b41      	ldr	r3, [pc, #260]	; (a108 <_oscctrl_init_referenced_generators+0x200>)
    a002:	4798      	blx	r3
    a004:	4603      	mov	r3, r0
    a006:	2b00      	cmp	r3, #0
    a008:	d00c      	beq.n	a024 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    a00a:	f44f 6310 	mov.w	r3, #2304	; 0x900
    a00e:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    a010:	bf00      	nop
    a012:	6879      	ldr	r1, [r7, #4]
    a014:	68f8      	ldr	r0, [r7, #12]
    a016:	4b3d      	ldr	r3, [pc, #244]	; (a10c <_oscctrl_init_referenced_generators+0x204>)
    a018:	4798      	blx	r3
    a01a:	4602      	mov	r2, r0
    a01c:	687b      	ldr	r3, [r7, #4]
    a01e:	429a      	cmp	r2, r3
    a020:	d1f7      	bne.n	a012 <_oscctrl_init_referenced_generators+0x10a>
    a022:	e009      	b.n	a038 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    a024:	bf00      	nop
    a026:	68f8      	ldr	r0, [r7, #12]
    a028:	4b39      	ldr	r3, [pc, #228]	; (a110 <_oscctrl_init_referenced_generators+0x208>)
    a02a:	4798      	blx	r3
    a02c:	4603      	mov	r3, r0
    a02e:	f083 0301 	eor.w	r3, r3, #1
    a032:	b2db      	uxtb	r3, r3
    a034:	2b00      	cmp	r3, #0
    a036:	d1f6      	bne.n	a026 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    a038:	bf00      	nop
    a03a:	2100      	movs	r1, #0
    a03c:	68f8      	ldr	r0, [r7, #12]
    a03e:	4b35      	ldr	r3, [pc, #212]	; (a114 <_oscctrl_init_referenced_generators+0x20c>)
    a040:	4798      	blx	r3
    a042:	4603      	mov	r3, r0
    a044:	f083 0301 	eor.w	r3, r3, #1
    a048:	b2db      	uxtb	r3, r3
    a04a:	2b00      	cmp	r3, #0
    a04c:	d009      	beq.n	a062 <_oscctrl_init_referenced_generators+0x15a>
    a04e:	2100      	movs	r1, #0
    a050:	68f8      	ldr	r0, [r7, #12]
    a052:	4b31      	ldr	r3, [pc, #196]	; (a118 <_oscctrl_init_referenced_generators+0x210>)
    a054:	4798      	blx	r3
    a056:	4603      	mov	r3, r0
    a058:	f083 0301 	eor.w	r3, r3, #1
    a05c:	b2db      	uxtb	r3, r3
    a05e:	2b00      	cmp	r3, #0
    a060:	d1eb      	bne.n	a03a <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    a062:	bf00      	nop
    a064:	2101      	movs	r1, #1
    a066:	68f8      	ldr	r0, [r7, #12]
    a068:	4b2a      	ldr	r3, [pc, #168]	; (a114 <_oscctrl_init_referenced_generators+0x20c>)
    a06a:	4798      	blx	r3
    a06c:	4603      	mov	r3, r0
    a06e:	f083 0301 	eor.w	r3, r3, #1
    a072:	b2db      	uxtb	r3, r3
    a074:	2b00      	cmp	r3, #0
    a076:	d009      	beq.n	a08c <_oscctrl_init_referenced_generators+0x184>
    a078:	2101      	movs	r1, #1
    a07a:	68f8      	ldr	r0, [r7, #12]
    a07c:	4b26      	ldr	r3, [pc, #152]	; (a118 <_oscctrl_init_referenced_generators+0x210>)
    a07e:	4798      	blx	r3
    a080:	4603      	mov	r3, r0
    a082:	f083 0301 	eor.w	r3, r3, #1
    a086:	b2db      	uxtb	r3, r3
    a088:	2b00      	cmp	r3, #0
    a08a:	d1eb      	bne.n	a064 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    a08c:	bf00      	nop
    a08e:	480c      	ldr	r0, [pc, #48]	; (a0c0 <_oscctrl_init_referenced_generators+0x1b8>)
    a090:	4b22      	ldr	r3, [pc, #136]	; (a11c <_oscctrl_init_referenced_generators+0x214>)
    a092:	4798      	blx	r3
    a094:	4603      	mov	r3, r0
    a096:	2b00      	cmp	r3, #0
    a098:	d1f9      	bne.n	a08e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    a09a:	2207      	movs	r2, #7
    a09c:	2100      	movs	r1, #0
    a09e:	4808      	ldr	r0, [pc, #32]	; (a0c0 <_oscctrl_init_referenced_generators+0x1b8>)
    a0a0:	4b08      	ldr	r3, [pc, #32]	; (a0c4 <_oscctrl_init_referenced_generators+0x1bc>)
    a0a2:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    a0a4:	bf00      	nop
    a0a6:	4806      	ldr	r0, [pc, #24]	; (a0c0 <_oscctrl_init_referenced_generators+0x1b8>)
    a0a8:	4b07      	ldr	r3, [pc, #28]	; (a0c8 <_oscctrl_init_referenced_generators+0x1c0>)
    a0aa:	4798      	blx	r3
    a0ac:	4603      	mov	r3, r0
    a0ae:	2b00      	cmp	r3, #0
    a0b0:	d1f9      	bne.n	a0a6 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    a0b2:	bf00      	nop
    a0b4:	3710      	adds	r7, #16
    a0b6:	46bd      	mov	sp, r7
    a0b8:	bd80      	pop	{r7, pc}
    a0ba:	bf00      	nop
    a0bc:	40001000 	.word	0x40001000
    a0c0:	40001c00 	.word	0x40001c00
    a0c4:	00009ad5 	.word	0x00009ad5
    a0c8:	00009a95 	.word	0x00009a95
    a0cc:	00009d39 	.word	0x00009d39
    a0d0:	0401bb80 	.word	0x0401bb80
    a0d4:	00009ddb 	.word	0x00009ddb
    a0d8:	00009e93 	.word	0x00009e93
    a0dc:	00009d87 	.word	0x00009d87
    a0e0:	00009e2b 	.word	0x00009e2b
    a0e4:	00009df7 	.word	0x00009df7
    a0e8:	00009dc3 	.word	0x00009dc3
    a0ec:	00009da7 	.word	0x00009da7
    a0f0:	00009e5f 	.word	0x00009e5f
    a0f4:	00009b25 	.word	0x00009b25
    a0f8:	00009c31 	.word	0x00009c31
    a0fc:	00009c6d 	.word	0x00009c6d
    a100:	00009bf5 	.word	0x00009bf5
    a104:	000407a0 	.word	0x000407a0
    a108:	00009d57 	.word	0x00009d57
    a10c:	00009ceb 	.word	0x00009ceb
    a110:	00009cc3 	.word	0x00009cc3
    a114:	00009b81 	.word	0x00009b81
    a118:	00009bb9 	.word	0x00009bb9
    a11c:	00009abd 	.word	0x00009abd

0000a120 <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    a120:	b480      	push	{r7}
    a122:	b085      	sub	sp, #20
    a124:	af00      	add	r7, sp, #0
    a126:	6078      	str	r0, [r7, #4]
    a128:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    a12a:	687b      	ldr	r3, [r7, #4]
    a12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a12e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a130:	68fa      	ldr	r2, [r7, #12]
    a132:	683b      	ldr	r3, [r7, #0]
    a134:	4013      	ands	r3, r2
    a136:	60fb      	str	r3, [r7, #12]
	return tmp;
    a138:	68fb      	ldr	r3, [r7, #12]
}
    a13a:	4618      	mov	r0, r3
    a13c:	3714      	adds	r7, #20
    a13e:	46bd      	mov	sp, r7
    a140:	f85d 7b04 	ldr.w	r7, [sp], #4
    a144:	4770      	bx	lr

0000a146 <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    a146:	b480      	push	{r7}
    a148:	b085      	sub	sp, #20
    a14a:	af00      	add	r7, sp, #0
    a14c:	6078      	str	r0, [r7, #4]
    a14e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    a150:	687b      	ldr	r3, [r7, #4]
    a152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a154:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a156:	68fa      	ldr	r2, [r7, #12]
    a158:	683b      	ldr	r3, [r7, #0]
    a15a:	4013      	ands	r3, r2
    a15c:	60fb      	str	r3, [r7, #12]
	return tmp;
    a15e:	68fb      	ldr	r3, [r7, #12]
}
    a160:	4618      	mov	r0, r3
    a162:	3714      	adds	r7, #20
    a164:	46bd      	mov	sp, r7
    a166:	f85d 7b04 	ldr.w	r7, [sp], #4
    a16a:	4770      	bx	lr

0000a16c <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    a16c:	b480      	push	{r7}
    a16e:	b085      	sub	sp, #20
    a170:	af00      	add	r7, sp, #0
    a172:	6078      	str	r0, [r7, #4]
    a174:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    a176:	687b      	ldr	r3, [r7, #4]
    a178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    a17a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a17c:	68fa      	ldr	r2, [r7, #12]
    a17e:	683b      	ldr	r3, [r7, #0]
    a180:	4013      	ands	r3, r2
    a182:	60fb      	str	r3, [r7, #12]
	return tmp;
    a184:	68fb      	ldr	r3, [r7, #12]
}
    a186:	4618      	mov	r0, r3
    a188:	3714      	adds	r7, #20
    a18a:	46bd      	mov	sp, r7
    a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a190:	4770      	bx	lr

0000a192 <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    a192:	b480      	push	{r7}
    a194:	b085      	sub	sp, #20
    a196:	af00      	add	r7, sp, #0
    a198:	6078      	str	r0, [r7, #4]
    a19a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    a19c:	687b      	ldr	r3, [r7, #4]
    a19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a1a0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a1a2:	68fa      	ldr	r2, [r7, #12]
    a1a4:	683b      	ldr	r3, [r7, #0]
    a1a6:	4013      	ands	r3, r2
    a1a8:	60fb      	str	r3, [r7, #12]
	return tmp;
    a1aa:	68fb      	ldr	r3, [r7, #12]
}
    a1ac:	4618      	mov	r0, r3
    a1ae:	3714      	adds	r7, #20
    a1b0:	46bd      	mov	sp, r7
    a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1b6:	4770      	bx	lr

0000a1b8 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    a1b8:	b480      	push	{r7}
    a1ba:	b083      	sub	sp, #12
    a1bc:	af00      	add	r7, sp, #0
    a1be:	6078      	str	r0, [r7, #4]
    a1c0:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    a1c2:	687b      	ldr	r3, [r7, #4]
    a1c4:	683a      	ldr	r2, [r7, #0]
    a1c6:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    a1c8:	bf00      	nop
    a1ca:	370c      	adds	r7, #12
    a1cc:	46bd      	mov	sp, r7
    a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1d2:	4770      	bx	lr

0000a1d4 <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    a1d4:	b480      	push	{r7}
    a1d6:	b085      	sub	sp, #20
    a1d8:	af00      	add	r7, sp, #0
    a1da:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    a1dc:	230a      	movs	r3, #10
    a1de:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    a1e0:	687b      	ldr	r3, [r7, #4]
    a1e2:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    a1e6:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    a1ea:	d101      	bne.n	a1f0 <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    a1ec:	230d      	movs	r3, #13
    a1ee:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    a1f0:	687b      	ldr	r3, [r7, #4]
    a1f2:	0e1b      	lsrs	r3, r3, #24
    a1f4:	f003 030f 	and.w	r3, r3, #15
    a1f8:	015a      	lsls	r2, r3, #5
    a1fa:	6879      	ldr	r1, [r7, #4]
    a1fc:	4b06      	ldr	r3, [pc, #24]	; (a218 <_pac_get_peripheral_id+0x44>)
    a1fe:	400b      	ands	r3, r1
    a200:	68f9      	ldr	r1, [r7, #12]
    a202:	40cb      	lsrs	r3, r1
    a204:	4413      	add	r3, r2
    a206:	60fb      	str	r3, [r7, #12]

	return peripheral;
    a208:	68fb      	ldr	r3, [r7, #12]
}
    a20a:	4618      	mov	r0, r3
    a20c:	3714      	adds	r7, #20
    a20e:	46bd      	mov	sp, r7
    a210:	f85d 7b04 	ldr.w	r7, [sp], #4
    a214:	4770      	bx	lr
    a216:	bf00      	nop
    a218:	000fff00 	.word	0x000fff00

0000a21c <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    a21c:	b580      	push	{r7, lr}
    a21e:	b086      	sub	sp, #24
    a220:	af00      	add	r7, sp, #0
    a222:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    a224:	687b      	ldr	r3, [r7, #4]
    a226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a22a:	bf8c      	ite	hi
    a22c:	2301      	movhi	r3, #1
    a22e:	2300      	movls	r3, #0
    a230:	b2db      	uxtb	r3, r3
    a232:	2239      	movs	r2, #57	; 0x39
    a234:	4917      	ldr	r1, [pc, #92]	; (a294 <_periph_lock+0x78>)
    a236:	4618      	mov	r0, r3
    a238:	4b17      	ldr	r3, [pc, #92]	; (a298 <_periph_lock+0x7c>)
    a23a:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    a23c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a240:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    a242:	6878      	ldr	r0, [r7, #4]
    a244:	4b15      	ldr	r3, [pc, #84]	; (a29c <_periph_lock+0x80>)
    a246:	4798      	blx	r3
    a248:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    a24a:	693b      	ldr	r3, [r7, #16]
    a24c:	b29b      	uxth	r3, r3
    a24e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a252:	4619      	mov	r1, r3
    a254:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a258:	4b11      	ldr	r3, [pc, #68]	; (a2a0 <_periph_lock+0x84>)
    a25a:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    a25c:	f107 030f 	add.w	r3, r7, #15
    a260:	4619      	mov	r1, r3
    a262:	6878      	ldr	r0, [r7, #4]
    a264:	4b0f      	ldr	r3, [pc, #60]	; (a2a4 <_periph_lock+0x88>)
    a266:	4798      	blx	r3
	} while (!stat && timeout--);
    a268:	7bfb      	ldrb	r3, [r7, #15]
    a26a:	f083 0301 	eor.w	r3, r3, #1
    a26e:	b2db      	uxtb	r3, r3
    a270:	2b00      	cmp	r3, #0
    a272:	d004      	beq.n	a27e <_periph_lock+0x62>
    a274:	697b      	ldr	r3, [r7, #20]
    a276:	1e5a      	subs	r2, r3, #1
    a278:	617a      	str	r2, [r7, #20]
    a27a:	2b00      	cmp	r3, #0
    a27c:	d1ee      	bne.n	a25c <_periph_lock+0x40>

	if (timeout < 0) {
    a27e:	697b      	ldr	r3, [r7, #20]
    a280:	2b00      	cmp	r3, #0
    a282:	da02      	bge.n	a28a <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    a284:	f06f 0307 	mvn.w	r3, #7
    a288:	e000      	b.n	a28c <_periph_lock+0x70>
	}

	return ERR_NONE;
    a28a:	2300      	movs	r3, #0
}
    a28c:	4618      	mov	r0, r3
    a28e:	3718      	adds	r7, #24
    a290:	46bd      	mov	sp, r7
    a292:	bd80      	pop	{r7, pc}
    a294:	00020c70 	.word	0x00020c70
    a298:	000080d1 	.word	0x000080d1
    a29c:	0000a1d5 	.word	0x0000a1d5
    a2a0:	0000a1b9 	.word	0x0000a1b9
    a2a4:	0000a331 	.word	0x0000a331

0000a2a8 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    a2a8:	b580      	push	{r7, lr}
    a2aa:	b086      	sub	sp, #24
    a2ac:	af00      	add	r7, sp, #0
    a2ae:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    a2b0:	687b      	ldr	r3, [r7, #4]
    a2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a2b6:	bf8c      	ite	hi
    a2b8:	2301      	movhi	r3, #1
    a2ba:	2300      	movls	r3, #0
    a2bc:	b2db      	uxtb	r3, r3
    a2be:	2253      	movs	r2, #83	; 0x53
    a2c0:	4916      	ldr	r1, [pc, #88]	; (a31c <_periph_unlock+0x74>)
    a2c2:	4618      	mov	r0, r3
    a2c4:	4b16      	ldr	r3, [pc, #88]	; (a320 <_periph_unlock+0x78>)
    a2c6:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    a2c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a2cc:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    a2ce:	6878      	ldr	r0, [r7, #4]
    a2d0:	4b14      	ldr	r3, [pc, #80]	; (a324 <_periph_unlock+0x7c>)
    a2d2:	4798      	blx	r3
    a2d4:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    a2d6:	693b      	ldr	r3, [r7, #16]
    a2d8:	b29b      	uxth	r3, r3
    a2da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a2de:	4619      	mov	r1, r3
    a2e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a2e4:	4b10      	ldr	r3, [pc, #64]	; (a328 <_periph_unlock+0x80>)
    a2e6:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    a2e8:	f107 030f 	add.w	r3, r7, #15
    a2ec:	4619      	mov	r1, r3
    a2ee:	6878      	ldr	r0, [r7, #4]
    a2f0:	4b0e      	ldr	r3, [pc, #56]	; (a32c <_periph_unlock+0x84>)
    a2f2:	4798      	blx	r3
	} while (stat && timeout--);
    a2f4:	7bfb      	ldrb	r3, [r7, #15]
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	d004      	beq.n	a304 <_periph_unlock+0x5c>
    a2fa:	697b      	ldr	r3, [r7, #20]
    a2fc:	1e5a      	subs	r2, r3, #1
    a2fe:	617a      	str	r2, [r7, #20]
    a300:	2b00      	cmp	r3, #0
    a302:	d1f1      	bne.n	a2e8 <_periph_unlock+0x40>

	if (timeout < 0) {
    a304:	697b      	ldr	r3, [r7, #20]
    a306:	2b00      	cmp	r3, #0
    a308:	da02      	bge.n	a310 <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    a30a:	f06f 0307 	mvn.w	r3, #7
    a30e:	e000      	b.n	a312 <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    a310:	2300      	movs	r3, #0
}
    a312:	4618      	mov	r0, r3
    a314:	3718      	adds	r7, #24
    a316:	46bd      	mov	sp, r7
    a318:	bd80      	pop	{r7, pc}
    a31a:	bf00      	nop
    a31c:	00020c70 	.word	0x00020c70
    a320:	000080d1 	.word	0x000080d1
    a324:	0000a1d5 	.word	0x0000a1d5
    a328:	0000a1b9 	.word	0x0000a1b9
    a32c:	0000a331 	.word	0x0000a331

0000a330 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    a330:	b580      	push	{r7, lr}
    a332:	b084      	sub	sp, #16
    a334:	af00      	add	r7, sp, #0
    a336:	6078      	str	r0, [r7, #4]
    a338:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    a33a:	687b      	ldr	r3, [r7, #4]
    a33c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a340:	bf8c      	ite	hi
    a342:	2301      	movhi	r3, #1
    a344:	2300      	movls	r3, #0
    a346:	b2db      	uxtb	r3, r3
    a348:	226d      	movs	r2, #109	; 0x6d
    a34a:	4931      	ldr	r1, [pc, #196]	; (a410 <_periph_get_lock_state+0xe0>)
    a34c:	4618      	mov	r0, r3
    a34e:	4b31      	ldr	r3, [pc, #196]	; (a414 <_periph_get_lock_state+0xe4>)
    a350:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    a352:	6878      	ldr	r0, [r7, #4]
    a354:	4b30      	ldr	r3, [pc, #192]	; (a418 <_periph_get_lock_state+0xe8>)
    a356:	4798      	blx	r3
    a358:	4603      	mov	r3, r0
    a35a:	f003 031f 	and.w	r3, r3, #31
    a35e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    a360:	687b      	ldr	r3, [r7, #4]
    a362:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    a366:	d211      	bcs.n	a38c <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    a368:	2201      	movs	r2, #1
    a36a:	68fb      	ldr	r3, [r7, #12]
    a36c:	fa02 f303 	lsl.w	r3, r2, r3
    a370:	4619      	mov	r1, r3
    a372:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a376:	4b29      	ldr	r3, [pc, #164]	; (a41c <_periph_get_lock_state+0xec>)
    a378:	4798      	blx	r3
    a37a:	4603      	mov	r3, r0
    a37c:	2b00      	cmp	r3, #0
    a37e:	bf14      	ite	ne
    a380:	2301      	movne	r3, #1
    a382:	2300      	moveq	r3, #0
    a384:	b2da      	uxtb	r2, r3
    a386:	683b      	ldr	r3, [r7, #0]
    a388:	701a      	strb	r2, [r3, #0]
    a38a:	e03c      	b.n	a406 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    a38c:	687b      	ldr	r3, [r7, #4]
    a38e:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    a392:	d211      	bcs.n	a3b8 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    a394:	2201      	movs	r2, #1
    a396:	68fb      	ldr	r3, [r7, #12]
    a398:	fa02 f303 	lsl.w	r3, r2, r3
    a39c:	4619      	mov	r1, r3
    a39e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a3a2:	4b1f      	ldr	r3, [pc, #124]	; (a420 <_periph_get_lock_state+0xf0>)
    a3a4:	4798      	blx	r3
    a3a6:	4603      	mov	r3, r0
    a3a8:	2b00      	cmp	r3, #0
    a3aa:	bf14      	ite	ne
    a3ac:	2301      	movne	r3, #1
    a3ae:	2300      	moveq	r3, #0
    a3b0:	b2da      	uxtb	r2, r3
    a3b2:	683b      	ldr	r3, [r7, #0]
    a3b4:	701a      	strb	r2, [r3, #0]
    a3b6:	e026      	b.n	a406 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    a3b8:	687b      	ldr	r3, [r7, #4]
    a3ba:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    a3be:	d211      	bcs.n	a3e4 <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    a3c0:	2201      	movs	r2, #1
    a3c2:	68fb      	ldr	r3, [r7, #12]
    a3c4:	fa02 f303 	lsl.w	r3, r2, r3
    a3c8:	4619      	mov	r1, r3
    a3ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a3ce:	4b15      	ldr	r3, [pc, #84]	; (a424 <_periph_get_lock_state+0xf4>)
    a3d0:	4798      	blx	r3
    a3d2:	4603      	mov	r3, r0
    a3d4:	2b00      	cmp	r3, #0
    a3d6:	bf14      	ite	ne
    a3d8:	2301      	movne	r3, #1
    a3da:	2300      	moveq	r3, #0
    a3dc:	b2da      	uxtb	r2, r3
    a3de:	683b      	ldr	r3, [r7, #0]
    a3e0:	701a      	strb	r2, [r3, #0]
    a3e2:	e010      	b.n	a406 <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    a3e4:	2201      	movs	r2, #1
    a3e6:	68fb      	ldr	r3, [r7, #12]
    a3e8:	fa02 f303 	lsl.w	r3, r2, r3
    a3ec:	4619      	mov	r1, r3
    a3ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a3f2:	4b0d      	ldr	r3, [pc, #52]	; (a428 <_periph_get_lock_state+0xf8>)
    a3f4:	4798      	blx	r3
    a3f6:	4603      	mov	r3, r0
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	bf14      	ite	ne
    a3fc:	2301      	movne	r3, #1
    a3fe:	2300      	moveq	r3, #0
    a400:	b2da      	uxtb	r2, r3
    a402:	683b      	ldr	r3, [r7, #0]
    a404:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    a406:	2300      	movs	r3, #0
}
    a408:	4618      	mov	r0, r3
    a40a:	3710      	adds	r7, #16
    a40c:	46bd      	mov	sp, r7
    a40e:	bd80      	pop	{r7, pc}
    a410:	00020c70 	.word	0x00020c70
    a414:	000080d1 	.word	0x000080d1
    a418:	0000a1d5 	.word	0x0000a1d5
    a41c:	0000a121 	.word	0x0000a121
    a420:	0000a147 	.word	0x0000a147
    a424:	0000a16d 	.word	0x0000a16d
    a428:	0000a193 	.word	0x0000a193

0000a42c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    a42c:	b480      	push	{r7}
    a42e:	b083      	sub	sp, #12
    a430:	af00      	add	r7, sp, #0
    a432:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    a434:	687b      	ldr	r3, [r7, #4]
    a436:	69db      	ldr	r3, [r3, #28]
    a438:	0a9b      	lsrs	r3, r3, #10
    a43a:	f003 0301 	and.w	r3, r3, #1
    a43e:	2b00      	cmp	r3, #0
    a440:	bf14      	ite	ne
    a442:	2301      	movne	r3, #1
    a444:	2300      	moveq	r3, #0
    a446:	b2db      	uxtb	r3, r3
}
    a448:	4618      	mov	r0, r3
    a44a:	370c      	adds	r7, #12
    a44c:	46bd      	mov	sp, r7
    a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a452:	4770      	bx	lr

0000a454 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    a454:	b480      	push	{r7}
    a456:	b083      	sub	sp, #12
    a458:	af00      	add	r7, sp, #0
    a45a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    a45c:	687b      	ldr	r3, [r7, #4]
    a45e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a462:	61da      	str	r2, [r3, #28]
}
    a464:	bf00      	nop
    a466:	370c      	adds	r7, #12
    a468:	46bd      	mov	sp, r7
    a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a46e:	4770      	bx	lr

0000a470 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    a470:	b480      	push	{r7}
    a472:	b083      	sub	sp, #12
    a474:	af00      	add	r7, sp, #0
    a476:	6078      	str	r0, [r7, #4]
    a478:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    a47a:	687b      	ldr	r3, [r7, #4]
    a47c:	683a      	ldr	r2, [r7, #0]
    a47e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a480:	bf00      	nop
    a482:	370c      	adds	r7, #12
    a484:	46bd      	mov	sp, r7
    a486:	f85d 7b04 	ldr.w	r7, [sp], #4
    a48a:	4770      	bx	lr

0000a48c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    a48c:	b480      	push	{r7}
    a48e:	b083      	sub	sp, #12
    a490:	af00      	add	r7, sp, #0
    a492:	6078      	str	r0, [r7, #4]
    a494:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    a496:	687b      	ldr	r3, [r7, #4]
    a498:	683a      	ldr	r2, [r7, #0]
    a49a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a49c:	bf00      	nop
    a49e:	370c      	adds	r7, #12
    a4a0:	46bd      	mov	sp, r7
    a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4a6:	4770      	bx	lr

0000a4a8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    a4a8:	b480      	push	{r7}
    a4aa:	b083      	sub	sp, #12
    a4ac:	af00      	add	r7, sp, #0
    a4ae:	6078      	str	r0, [r7, #4]
    a4b0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    a4b2:	687b      	ldr	r3, [r7, #4]
    a4b4:	683a      	ldr	r2, [r7, #0]
    a4b6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a4b8:	bf00      	nop
    a4ba:	370c      	adds	r7, #12
    a4bc:	46bd      	mov	sp, r7
    a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4c2:	4770      	bx	lr

0000a4c4 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    a4c4:	b480      	push	{r7}
    a4c6:	b083      	sub	sp, #12
    a4c8:	af00      	add	r7, sp, #0
    a4ca:	6078      	str	r0, [r7, #4]
    a4cc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    a4ce:	687b      	ldr	r3, [r7, #4]
    a4d0:	683a      	ldr	r2, [r7, #0]
    a4d2:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a4d4:	bf00      	nop
    a4d6:	370c      	adds	r7, #12
    a4d8:	46bd      	mov	sp, r7
    a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4de:	4770      	bx	lr

0000a4e0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    a4e0:	b480      	push	{r7}
    a4e2:	b085      	sub	sp, #20
    a4e4:	af00      	add	r7, sp, #0
    a4e6:	6078      	str	r0, [r7, #4]
    a4e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    a4ea:	687b      	ldr	r3, [r7, #4]
    a4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a4ee:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    a4f0:	68fb      	ldr	r3, [r7, #12]
    a4f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a4f6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    a4f8:	683b      	ldr	r3, [r7, #0]
    a4fa:	b2db      	uxtb	r3, r3
    a4fc:	68fa      	ldr	r2, [r7, #12]
    a4fe:	4313      	orrs	r3, r2
    a500:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    a502:	687b      	ldr	r3, [r7, #4]
    a504:	68fa      	ldr	r2, [r7, #12]
    a506:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a508:	bf00      	nop
    a50a:	3714      	adds	r7, #20
    a50c:	46bd      	mov	sp, r7
    a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a512:	4770      	bx	lr

0000a514 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    a514:	b480      	push	{r7}
    a516:	b085      	sub	sp, #20
    a518:	af00      	add	r7, sp, #0
    a51a:	6078      	str	r0, [r7, #4]
    a51c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    a51e:	687b      	ldr	r3, [r7, #4]
    a520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a522:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    a524:	68fb      	ldr	r3, [r7, #12]
    a526:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    a52a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    a52c:	683b      	ldr	r3, [r7, #0]
    a52e:	041b      	lsls	r3, r3, #16
    a530:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a534:	68fa      	ldr	r2, [r7, #12]
    a536:	4313      	orrs	r3, r2
    a538:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    a53a:	687b      	ldr	r3, [r7, #4]
    a53c:	68fa      	ldr	r2, [r7, #12]
    a53e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a540:	bf00      	nop
    a542:	3714      	adds	r7, #20
    a544:	46bd      	mov	sp, r7
    a546:	f85d 7b04 	ldr.w	r7, [sp], #4
    a54a:	4770      	bx	lr

0000a54c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    a54c:	b480      	push	{r7}
    a54e:	b083      	sub	sp, #12
    a550:	af00      	add	r7, sp, #0
    a552:	6078      	str	r0, [r7, #4]
    a554:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    a556:	687b      	ldr	r3, [r7, #4]
    a558:	683a      	ldr	r2, [r7, #0]
    a55a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a55c:	bf00      	nop
    a55e:	370c      	adds	r7, #12
    a560:	46bd      	mov	sp, r7
    a562:	f85d 7b04 	ldr.w	r7, [sp], #4
    a566:	4770      	bx	lr

0000a568 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    a568:	b480      	push	{r7}
    a56a:	b083      	sub	sp, #12
    a56c:	af00      	add	r7, sp, #0
    a56e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    a570:	687b      	ldr	r3, [r7, #4]
    a572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    a574:	4618      	mov	r0, r3
    a576:	370c      	adds	r7, #12
    a578:	46bd      	mov	sp, r7
    a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a57e:	4770      	bx	lr

0000a580 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    a580:	b480      	push	{r7}
    a582:	b085      	sub	sp, #20
    a584:	af00      	add	r7, sp, #0
    a586:	60f8      	str	r0, [r7, #12]
    a588:	60b9      	str	r1, [r7, #8]
    a58a:	607a      	str	r2, [r7, #4]
	while (count--) {
    a58c:	e007      	b.n	a59e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    a58e:	68fb      	ldr	r3, [r7, #12]
    a590:	1c5a      	adds	r2, r3, #1
    a592:	60fa      	str	r2, [r7, #12]
    a594:	68ba      	ldr	r2, [r7, #8]
    a596:	1c51      	adds	r1, r2, #1
    a598:	60b9      	str	r1, [r7, #8]
    a59a:	7812      	ldrb	r2, [r2, #0]
    a59c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    a59e:	687b      	ldr	r3, [r7, #4]
    a5a0:	1e5a      	subs	r2, r3, #1
    a5a2:	607a      	str	r2, [r7, #4]
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	d1f2      	bne.n	a58e <_qspi_memcpy+0xe>
	}
}
    a5a8:	bf00      	nop
    a5aa:	3714      	adds	r7, #20
    a5ac:	46bd      	mov	sp, r7
    a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5b2:	4770      	bx	lr

0000a5b4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    a5b4:	b580      	push	{r7, lr}
    a5b6:	b082      	sub	sp, #8
    a5b8:	af00      	add	r7, sp, #0
    a5ba:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    a5bc:	4903      	ldr	r1, [pc, #12]	; (a5cc <_qspi_end_transfer+0x18>)
    a5be:	6878      	ldr	r0, [r7, #4]
    a5c0:	4b03      	ldr	r3, [pc, #12]	; (a5d0 <_qspi_end_transfer+0x1c>)
    a5c2:	4798      	blx	r3
}
    a5c4:	bf00      	nop
    a5c6:	3708      	adds	r7, #8
    a5c8:	46bd      	mov	sp, r7
    a5ca:	bd80      	pop	{r7, pc}
    a5cc:	01000002 	.word	0x01000002
    a5d0:	0000a471 	.word	0x0000a471

0000a5d4 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    a5d4:	b580      	push	{r7, lr}
    a5d6:	b082      	sub	sp, #8
    a5d8:	af00      	add	r7, sp, #0
    a5da:	6078      	str	r0, [r7, #4]
    a5dc:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    a5de:	687b      	ldr	r3, [r7, #4]
    a5e0:	2b00      	cmp	r3, #0
    a5e2:	d004      	beq.n	a5ee <_qspi_sync_init+0x1a>
    a5e4:	683b      	ldr	r3, [r7, #0]
    a5e6:	2b00      	cmp	r3, #0
    a5e8:	d001      	beq.n	a5ee <_qspi_sync_init+0x1a>
    a5ea:	2301      	movs	r3, #1
    a5ec:	e000      	b.n	a5f0 <_qspi_sync_init+0x1c>
    a5ee:	2300      	movs	r3, #0
    a5f0:	f003 0301 	and.w	r3, r3, #1
    a5f4:	b2db      	uxtb	r3, r3
    a5f6:	2240      	movs	r2, #64	; 0x40
    a5f8:	490c      	ldr	r1, [pc, #48]	; (a62c <_qspi_sync_init+0x58>)
    a5fa:	4618      	mov	r0, r3
    a5fc:	4b0c      	ldr	r3, [pc, #48]	; (a630 <_qspi_sync_init+0x5c>)
    a5fe:	4798      	blx	r3
	dev->prvt = hw;
    a600:	687b      	ldr	r3, [r7, #4]
    a602:	683a      	ldr	r2, [r7, #0]
    a604:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    a606:	687b      	ldr	r3, [r7, #4]
    a608:	681b      	ldr	r3, [r3, #0]
    a60a:	2101      	movs	r1, #1
    a60c:	4618      	mov	r0, r3
    a60e:	4b09      	ldr	r3, [pc, #36]	; (a634 <_qspi_sync_init+0x60>)
    a610:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    a612:	4909      	ldr	r1, [pc, #36]	; (a638 <_qspi_sync_init+0x64>)
    a614:	6838      	ldr	r0, [r7, #0]
    a616:	4b09      	ldr	r3, [pc, #36]	; (a63c <_qspi_sync_init+0x68>)
    a618:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    a61a:	4909      	ldr	r1, [pc, #36]	; (a640 <_qspi_sync_init+0x6c>)
    a61c:	6838      	ldr	r0, [r7, #0]
    a61e:	4b09      	ldr	r3, [pc, #36]	; (a644 <_qspi_sync_init+0x70>)
    a620:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    a622:	2300      	movs	r3, #0
}
    a624:	4618      	mov	r0, r3
    a626:	3708      	adds	r7, #8
    a628:	46bd      	mov	sp, r7
    a62a:	bd80      	pop	{r7, pc}
    a62c:	00020c88 	.word	0x00020c88
    a630:	000080d1 	.word	0x000080d1
    a634:	0000a471 	.word	0x0000a471
    a638:	06000011 	.word	0x06000011
    a63c:	0000a48d 	.word	0x0000a48d
    a640:	00241300 	.word	0x00241300
    a644:	0000a4a9 	.word	0x0000a4a9

0000a648 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    a648:	b580      	push	{r7, lr}
    a64a:	b082      	sub	sp, #8
    a64c:	af00      	add	r7, sp, #0
    a64e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    a650:	687b      	ldr	r3, [r7, #4]
    a652:	681b      	ldr	r3, [r3, #0]
    a654:	2102      	movs	r1, #2
    a656:	4618      	mov	r0, r3
    a658:	4b03      	ldr	r3, [pc, #12]	; (a668 <_qspi_sync_enable+0x20>)
    a65a:	4798      	blx	r3
	return ERR_NONE;
    a65c:	2300      	movs	r3, #0
}
    a65e:	4618      	mov	r0, r3
    a660:	3708      	adds	r7, #8
    a662:	46bd      	mov	sp, r7
    a664:	bd80      	pop	{r7, pc}
    a666:	bf00      	nop
    a668:	0000a471 	.word	0x0000a471

0000a66c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    a66c:	b580      	push	{r7, lr}
    a66e:	b082      	sub	sp, #8
    a670:	af00      	add	r7, sp, #0
    a672:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    a674:	687b      	ldr	r3, [r7, #4]
    a676:	681b      	ldr	r3, [r3, #0]
    a678:	2100      	movs	r1, #0
    a67a:	4618      	mov	r0, r3
    a67c:	4b03      	ldr	r3, [pc, #12]	; (a68c <_qspi_sync_disable+0x20>)
    a67e:	4798      	blx	r3
	return ERR_NONE;
    a680:	2300      	movs	r3, #0
}
    a682:	4618      	mov	r0, r3
    a684:	3708      	adds	r7, #8
    a686:	46bd      	mov	sp, r7
    a688:	bd80      	pop	{r7, pc}
    a68a:	bf00      	nop
    a68c:	0000a471 	.word	0x0000a471

0000a690 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a690:	b580      	push	{r7, lr}
    a692:	b084      	sub	sp, #16
    a694:	af00      	add	r7, sp, #0
    a696:	6078      	str	r0, [r7, #4]
    a698:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    a69a:	687b      	ldr	r3, [r7, #4]
    a69c:	681b      	ldr	r3, [r3, #0]
    a69e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    a6a0:	683b      	ldr	r3, [r7, #0]
    a6a2:	781b      	ldrb	r3, [r3, #0]
    a6a4:	f003 0320 	and.w	r3, r3, #32
    a6a8:	b2db      	uxtb	r3, r3
    a6aa:	2b00      	cmp	r3, #0
    a6ac:	d005      	beq.n	a6ba <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    a6ae:	683b      	ldr	r3, [r7, #0]
    a6b0:	689b      	ldr	r3, [r3, #8]
    a6b2:	4619      	mov	r1, r3
    a6b4:	68f8      	ldr	r0, [r7, #12]
    a6b6:	4b13      	ldr	r3, [pc, #76]	; (a704 <_qspi_sync_command_set_ifr+0x74>)
    a6b8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    a6ba:	683b      	ldr	r3, [r7, #0]
    a6bc:	781b      	ldrb	r3, [r3, #0]
    a6be:	f003 0310 	and.w	r3, r3, #16
    a6c2:	b2db      	uxtb	r3, r3
    a6c4:	2b00      	cmp	r3, #0
    a6c6:	d005      	beq.n	a6d4 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    a6c8:	683b      	ldr	r3, [r7, #0]
    a6ca:	791b      	ldrb	r3, [r3, #4]
    a6cc:	4619      	mov	r1, r3
    a6ce:	68f8      	ldr	r0, [r7, #12]
    a6d0:	4b0d      	ldr	r3, [pc, #52]	; (a708 <_qspi_sync_command_set_ifr+0x78>)
    a6d2:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    a6d4:	683b      	ldr	r3, [r7, #0]
    a6d6:	781b      	ldrb	r3, [r3, #0]
    a6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a6dc:	b2db      	uxtb	r3, r3
    a6de:	2b00      	cmp	r3, #0
    a6e0:	d005      	beq.n	a6ee <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    a6e2:	683b      	ldr	r3, [r7, #0]
    a6e4:	795b      	ldrb	r3, [r3, #5]
    a6e6:	4619      	mov	r1, r3
    a6e8:	68f8      	ldr	r0, [r7, #12]
    a6ea:	4b08      	ldr	r3, [pc, #32]	; (a70c <_qspi_sync_command_set_ifr+0x7c>)
    a6ec:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    a6ee:	683b      	ldr	r3, [r7, #0]
    a6f0:	681b      	ldr	r3, [r3, #0]
    a6f2:	4619      	mov	r1, r3
    a6f4:	68f8      	ldr	r0, [r7, #12]
    a6f6:	4b06      	ldr	r3, [pc, #24]	; (a710 <_qspi_sync_command_set_ifr+0x80>)
    a6f8:	4798      	blx	r3
}
    a6fa:	bf00      	nop
    a6fc:	3710      	adds	r7, #16
    a6fe:	46bd      	mov	sp, r7
    a700:	bd80      	pop	{r7, pc}
    a702:	bf00      	nop
    a704:	0000a4c5 	.word	0x0000a4c5
    a708:	0000a4e1 	.word	0x0000a4e1
    a70c:	0000a515 	.word	0x0000a515
    a710:	0000a54d 	.word	0x0000a54d

0000a714 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a714:	b580      	push	{r7, lr}
    a716:	b084      	sub	sp, #16
    a718:	af00      	add	r7, sp, #0
    a71a:	6078      	str	r0, [r7, #4]
    a71c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    a71e:	687b      	ldr	r3, [r7, #4]
    a720:	681b      	ldr	r3, [r3, #0]
    a722:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    a724:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a728:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    a72a:	683b      	ldr	r3, [r7, #0]
    a72c:	781b      	ldrb	r3, [r3, #0]
    a72e:	f003 0320 	and.w	r3, r3, #32
    a732:	b2db      	uxtb	r3, r3
    a734:	2b00      	cmp	r3, #0
    a736:	d004      	beq.n	a742 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    a738:	683b      	ldr	r3, [r7, #0]
    a73a:	689b      	ldr	r3, [r3, #8]
    a73c:	68fa      	ldr	r2, [r7, #12]
    a73e:	4413      	add	r3, r2
    a740:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    a742:	68b8      	ldr	r0, [r7, #8]
    a744:	4b18      	ldr	r3, [pc, #96]	; (a7a8 <_qspi_sync_run_transfer+0x94>)
    a746:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    a748:	683b      	ldr	r3, [r7, #0]
    a74a:	691b      	ldr	r3, [r3, #16]
    a74c:	2b00      	cmp	r3, #0
    a74e:	d103      	bne.n	a758 <_qspi_sync_run_transfer+0x44>
    a750:	683b      	ldr	r3, [r7, #0]
    a752:	695b      	ldr	r3, [r3, #20]
    a754:	2b00      	cmp	r3, #0
    a756:	d001      	beq.n	a75c <_qspi_sync_run_transfer+0x48>
    a758:	2301      	movs	r3, #1
    a75a:	e000      	b.n	a75e <_qspi_sync_run_transfer+0x4a>
    a75c:	2300      	movs	r3, #0
    a75e:	f003 0301 	and.w	r3, r3, #1
    a762:	b2db      	uxtb	r3, r3
    a764:	2282      	movs	r2, #130	; 0x82
    a766:	4911      	ldr	r1, [pc, #68]	; (a7ac <_qspi_sync_run_transfer+0x98>)
    a768:	4618      	mov	r0, r3
    a76a:	4b11      	ldr	r3, [pc, #68]	; (a7b0 <_qspi_sync_run_transfer+0x9c>)
    a76c:	4798      	blx	r3

	if (cmd->tx_buf) {
    a76e:	683b      	ldr	r3, [r7, #0]
    a770:	691b      	ldr	r3, [r3, #16]
    a772:	2b00      	cmp	r3, #0
    a774:	d008      	beq.n	a788 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    a776:	683b      	ldr	r3, [r7, #0]
    a778:	6919      	ldr	r1, [r3, #16]
    a77a:	683b      	ldr	r3, [r7, #0]
    a77c:	68db      	ldr	r3, [r3, #12]
    a77e:	461a      	mov	r2, r3
    a780:	68f8      	ldr	r0, [r7, #12]
    a782:	4b0c      	ldr	r3, [pc, #48]	; (a7b4 <_qspi_sync_run_transfer+0xa0>)
    a784:	4798      	blx	r3
    a786:	e007      	b.n	a798 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    a788:	683b      	ldr	r3, [r7, #0]
    a78a:	6958      	ldr	r0, [r3, #20]
    a78c:	683b      	ldr	r3, [r7, #0]
    a78e:	68db      	ldr	r3, [r3, #12]
    a790:	461a      	mov	r2, r3
    a792:	68f9      	ldr	r1, [r7, #12]
    a794:	4b07      	ldr	r3, [pc, #28]	; (a7b4 <_qspi_sync_run_transfer+0xa0>)
    a796:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    a798:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a79c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    a7a0:	bf00      	nop
    a7a2:	3710      	adds	r7, #16
    a7a4:	46bd      	mov	sp, r7
    a7a6:	bd80      	pop	{r7, pc}
    a7a8:	0000a569 	.word	0x0000a569
    a7ac:	00020c88 	.word	0x00020c88
    a7b0:	000080d1 	.word	0x000080d1
    a7b4:	0000a581 	.word	0x0000a581

0000a7b8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a7b8:	b580      	push	{r7, lr}
    a7ba:	b082      	sub	sp, #8
    a7bc:	af00      	add	r7, sp, #0
    a7be:	6078      	str	r0, [r7, #4]
    a7c0:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    a7c2:	6839      	ldr	r1, [r7, #0]
    a7c4:	6878      	ldr	r0, [r7, #4]
    a7c6:	4b14      	ldr	r3, [pc, #80]	; (a818 <_qspi_sync_serial_run_command+0x60>)
    a7c8:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    a7ca:	683b      	ldr	r3, [r7, #0]
    a7cc:	781b      	ldrb	r3, [r3, #0]
    a7ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a7d2:	b2db      	uxtb	r3, r3
    a7d4:	2b00      	cmp	r3, #0
    a7d6:	d003      	beq.n	a7e0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    a7d8:	6839      	ldr	r1, [r7, #0]
    a7da:	6878      	ldr	r0, [r7, #4]
    a7dc:	4b0f      	ldr	r3, [pc, #60]	; (a81c <_qspi_sync_serial_run_command+0x64>)
    a7de:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	681b      	ldr	r3, [r3, #0]
    a7e4:	4618      	mov	r0, r3
    a7e6:	4b0e      	ldr	r3, [pc, #56]	; (a820 <_qspi_sync_serial_run_command+0x68>)
    a7e8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    a7ea:	bf00      	nop
    a7ec:	687b      	ldr	r3, [r7, #4]
    a7ee:	681b      	ldr	r3, [r3, #0]
    a7f0:	4618      	mov	r0, r3
    a7f2:	4b0c      	ldr	r3, [pc, #48]	; (a824 <_qspi_sync_serial_run_command+0x6c>)
    a7f4:	4798      	blx	r3
    a7f6:	4603      	mov	r3, r0
    a7f8:	f083 0301 	eor.w	r3, r3, #1
    a7fc:	b2db      	uxtb	r3, r3
    a7fe:	2b00      	cmp	r3, #0
    a800:	d1f4      	bne.n	a7ec <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    a802:	687b      	ldr	r3, [r7, #4]
    a804:	681b      	ldr	r3, [r3, #0]
    a806:	4618      	mov	r0, r3
    a808:	4b07      	ldr	r3, [pc, #28]	; (a828 <_qspi_sync_serial_run_command+0x70>)
    a80a:	4798      	blx	r3
	return ERR_NONE;
    a80c:	2300      	movs	r3, #0
}
    a80e:	4618      	mov	r0, r3
    a810:	3708      	adds	r7, #8
    a812:	46bd      	mov	sp, r7
    a814:	bd80      	pop	{r7, pc}
    a816:	bf00      	nop
    a818:	0000a691 	.word	0x0000a691
    a81c:	0000a715 	.word	0x0000a715
    a820:	0000a5b5 	.word	0x0000a5b5
    a824:	0000a42d 	.word	0x0000a42d
    a828:	0000a455 	.word	0x0000a455

0000a82c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    a82c:	b480      	push	{r7}
    a82e:	b083      	sub	sp, #12
    a830:	af00      	add	r7, sp, #0
    a832:	6078      	str	r0, [r7, #4]
    a834:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    a836:	bf00      	nop
    a838:	687b      	ldr	r3, [r7, #4]
    a83a:	691a      	ldr	r2, [r3, #16]
    a83c:	683b      	ldr	r3, [r7, #0]
    a83e:	4013      	ands	r3, r2
    a840:	2b00      	cmp	r3, #0
    a842:	d1f9      	bne.n	a838 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    a844:	bf00      	nop
    a846:	370c      	adds	r7, #12
    a848:	46bd      	mov	sp, r7
    a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a84e:	4770      	bx	lr

0000a850 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    a850:	b480      	push	{r7}
    a852:	b083      	sub	sp, #12
    a854:	af00      	add	r7, sp, #0
    a856:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    a858:	687b      	ldr	r3, [r7, #4]
    a85a:	f44f 7280 	mov.w	r2, #256	; 0x100
    a85e:	819a      	strh	r2, [r3, #12]
}
    a860:	bf00      	nop
    a862:	370c      	adds	r7, #12
    a864:	46bd      	mov	sp, r7
    a866:	f85d 7b04 	ldr.w	r7, [sp], #4
    a86a:	4770      	bx	lr

0000a86c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    a86c:	b480      	push	{r7}
    a86e:	b083      	sub	sp, #12
    a870:	af00      	add	r7, sp, #0
    a872:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    a874:	687b      	ldr	r3, [r7, #4]
    a876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a87a:	819a      	strh	r2, [r3, #12]
}
    a87c:	bf00      	nop
    a87e:	370c      	adds	r7, #12
    a880:	46bd      	mov	sp, r7
    a882:	f85d 7b04 	ldr.w	r7, [sp], #4
    a886:	4770      	bx	lr

0000a888 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    a888:	b480      	push	{r7}
    a88a:	b083      	sub	sp, #12
    a88c:	af00      	add	r7, sp, #0
    a88e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    a890:	687b      	ldr	r3, [r7, #4]
    a892:	899b      	ldrh	r3, [r3, #12]
    a894:	b29b      	uxth	r3, r3
}
    a896:	4618      	mov	r0, r3
    a898:	370c      	adds	r7, #12
    a89a:	46bd      	mov	sp, r7
    a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8a0:	4770      	bx	lr

0000a8a2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    a8a2:	b480      	push	{r7}
    a8a4:	b083      	sub	sp, #12
    a8a6:	af00      	add	r7, sp, #0
    a8a8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    a8aa:	687b      	ldr	r3, [r7, #4]
    a8ac:	895b      	ldrh	r3, [r3, #10]
    a8ae:	b29b      	uxth	r3, r3
}
    a8b0:	4618      	mov	r0, r3
    a8b2:	370c      	adds	r7, #12
    a8b4:	46bd      	mov	sp, r7
    a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8ba:	4770      	bx	lr

0000a8bc <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    a8bc:	b580      	push	{r7, lr}
    a8be:	b082      	sub	sp, #8
    a8c0:	af00      	add	r7, sp, #0
    a8c2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	881b      	ldrh	r3, [r3, #0]
    a8c8:	b29b      	uxth	r3, r3
    a8ca:	f043 0301 	orr.w	r3, r3, #1
    a8ce:	b29a      	uxth	r2, r3
    a8d0:	687b      	ldr	r3, [r7, #4]
    a8d2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    a8d4:	2101      	movs	r1, #1
    a8d6:	6878      	ldr	r0, [r7, #4]
    a8d8:	4b02      	ldr	r3, [pc, #8]	; (a8e4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    a8da:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a8dc:	bf00      	nop
    a8de:	3708      	adds	r7, #8
    a8e0:	46bd      	mov	sp, r7
    a8e2:	bd80      	pop	{r7, pc}
    a8e4:	0000a82d 	.word	0x0000a82d

0000a8e8 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a8e8:	b580      	push	{r7, lr}
    a8ea:	b082      	sub	sp, #8
    a8ec:	af00      	add	r7, sp, #0
    a8ee:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    a8f0:	687b      	ldr	r3, [r7, #4]
    a8f2:	881b      	ldrh	r3, [r3, #0]
    a8f4:	b29b      	uxth	r3, r3
    a8f6:	f043 0302 	orr.w	r3, r3, #2
    a8fa:	b29a      	uxth	r2, r3
    a8fc:	687b      	ldr	r3, [r7, #4]
    a8fe:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a900:	f248 0103 	movw	r1, #32771	; 0x8003
    a904:	6878      	ldr	r0, [r7, #4]
    a906:	4b03      	ldr	r3, [pc, #12]	; (a914 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    a908:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a90a:	bf00      	nop
    a90c:	3708      	adds	r7, #8
    a90e:	46bd      	mov	sp, r7
    a910:	bd80      	pop	{r7, pc}
    a912:	bf00      	nop
    a914:	0000a82d 	.word	0x0000a82d

0000a918 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a918:	b580      	push	{r7, lr}
    a91a:	b084      	sub	sp, #16
    a91c:	af00      	add	r7, sp, #0
    a91e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a920:	f248 0103 	movw	r1, #32771	; 0x8003
    a924:	6878      	ldr	r0, [r7, #4]
    a926:	4b0a      	ldr	r3, [pc, #40]	; (a950 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    a928:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    a92a:	687b      	ldr	r3, [r7, #4]
    a92c:	881b      	ldrh	r3, [r3, #0]
    a92e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    a930:	89fb      	ldrh	r3, [r7, #14]
    a932:	085b      	lsrs	r3, r3, #1
    a934:	b29b      	uxth	r3, r3
    a936:	f003 0301 	and.w	r3, r3, #1
    a93a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    a93c:	89fb      	ldrh	r3, [r7, #14]
    a93e:	2b00      	cmp	r3, #0
    a940:	bf14      	ite	ne
    a942:	2301      	movne	r3, #1
    a944:	2300      	moveq	r3, #0
    a946:	b2db      	uxtb	r3, r3
}
    a948:	4618      	mov	r0, r3
    a94a:	3710      	adds	r7, #16
    a94c:	46bd      	mov	sp, r7
    a94e:	bd80      	pop	{r7, pc}
    a950:	0000a82d 	.word	0x0000a82d

0000a954 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a954:	b580      	push	{r7, lr}
    a956:	b082      	sub	sp, #8
    a958:	af00      	add	r7, sp, #0
    a95a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    a95c:	687b      	ldr	r3, [r7, #4]
    a95e:	881b      	ldrh	r3, [r3, #0]
    a960:	b29b      	uxth	r3, r3
    a962:	f023 0302 	bic.w	r3, r3, #2
    a966:	b29a      	uxth	r2, r3
    a968:	687b      	ldr	r3, [r7, #4]
    a96a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a96c:	f248 0103 	movw	r1, #32771	; 0x8003
    a970:	6878      	ldr	r0, [r7, #4]
    a972:	4b03      	ldr	r3, [pc, #12]	; (a980 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    a974:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a976:	bf00      	nop
    a978:	3708      	adds	r7, #8
    a97a:	46bd      	mov	sp, r7
    a97c:	bd80      	pop	{r7, pc}
    a97e:	bf00      	nop
    a980:	0000a82d 	.word	0x0000a82d

0000a984 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    a984:	b580      	push	{r7, lr}
    a986:	b082      	sub	sp, #8
    a988:	af00      	add	r7, sp, #0
    a98a:	6078      	str	r0, [r7, #4]
    a98c:	460b      	mov	r3, r1
    a98e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    a990:	687b      	ldr	r3, [r7, #4]
    a992:	887a      	ldrh	r2, [r7, #2]
    a994:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a996:	f248 0103 	movw	r1, #32771	; 0x8003
    a99a:	6878      	ldr	r0, [r7, #4]
    a99c:	4b02      	ldr	r3, [pc, #8]	; (a9a8 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    a99e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a9a0:	bf00      	nop
    a9a2:	3708      	adds	r7, #8
    a9a4:	46bd      	mov	sp, r7
    a9a6:	bd80      	pop	{r7, pc}
    a9a8:	0000a82d 	.word	0x0000a82d

0000a9ac <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    a9ac:	b580      	push	{r7, lr}
    a9ae:	b082      	sub	sp, #8
    a9b0:	af00      	add	r7, sp, #0
    a9b2:	6078      	str	r0, [r7, #4]
    a9b4:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    a9b6:	687b      	ldr	r3, [r7, #4]
    a9b8:	683a      	ldr	r2, [r7, #0]
    a9ba:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    a9bc:	2108      	movs	r1, #8
    a9be:	6878      	ldr	r0, [r7, #4]
    a9c0:	4b02      	ldr	r3, [pc, #8]	; (a9cc <hri_rtcmode0_write_COUNT_reg+0x20>)
    a9c2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a9c4:	bf00      	nop
    a9c6:	3708      	adds	r7, #8
    a9c8:	46bd      	mov	sp, r7
    a9ca:	bd80      	pop	{r7, pc}
    a9cc:	0000a82d 	.word	0x0000a82d

0000a9d0 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    a9d0:	b580      	push	{r7, lr}
    a9d2:	b082      	sub	sp, #8
    a9d4:	af00      	add	r7, sp, #0
    a9d6:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    a9d8:	2108      	movs	r1, #8
    a9da:	6878      	ldr	r0, [r7, #4]
    a9dc:	4b03      	ldr	r3, [pc, #12]	; (a9ec <hri_rtcmode0_read_COUNT_reg+0x1c>)
    a9de:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    a9e0:	687b      	ldr	r3, [r7, #4]
    a9e2:	699b      	ldr	r3, [r3, #24]
}
    a9e4:	4618      	mov	r0, r3
    a9e6:	3708      	adds	r7, #8
    a9e8:	46bd      	mov	sp, r7
    a9ea:	bd80      	pop	{r7, pc}
    a9ec:	0000a82d 	.word	0x0000a82d

0000a9f0 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    a9f0:	b480      	push	{r7}
    a9f2:	b083      	sub	sp, #12
    a9f4:	af00      	add	r7, sp, #0
    a9f6:	6078      	str	r0, [r7, #4]
    a9f8:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    a9fa:	687b      	ldr	r3, [r7, #4]
    a9fc:	683a      	ldr	r2, [r7, #0]
    a9fe:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    aa00:	bf00      	nop
    aa02:	370c      	adds	r7, #12
    aa04:	46bd      	mov	sp, r7
    aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa0a:	4770      	bx	lr

0000aa0c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    aa0c:	b580      	push	{r7, lr}
    aa0e:	b082      	sub	sp, #8
    aa10:	af00      	add	r7, sp, #0
    aa12:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    aa14:	687b      	ldr	r3, [r7, #4]
    aa16:	2b00      	cmp	r3, #0
    aa18:	d005      	beq.n	aa26 <_calendar_init+0x1a>
    aa1a:	687b      	ldr	r3, [r7, #4]
    aa1c:	681b      	ldr	r3, [r3, #0]
    aa1e:	2b00      	cmp	r3, #0
    aa20:	d001      	beq.n	aa26 <_calendar_init+0x1a>
    aa22:	2301      	movs	r3, #1
    aa24:	e000      	b.n	aa28 <_calendar_init+0x1c>
    aa26:	2300      	movs	r3, #0
    aa28:	f003 0301 	and.w	r3, r3, #1
    aa2c:	b2db      	uxtb	r3, r3
    aa2e:	222f      	movs	r2, #47	; 0x2f
    aa30:	491b      	ldr	r1, [pc, #108]	; (aaa0 <_calendar_init+0x94>)
    aa32:	4618      	mov	r0, r3
    aa34:	4b1b      	ldr	r3, [pc, #108]	; (aaa4 <_calendar_init+0x98>)
    aa36:	4798      	blx	r3

	_rtc_dev = dev;
    aa38:	4a1b      	ldr	r2, [pc, #108]	; (aaa8 <_calendar_init+0x9c>)
    aa3a:	687b      	ldr	r3, [r7, #4]
    aa3c:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    aa3e:	687b      	ldr	r3, [r7, #4]
    aa40:	681b      	ldr	r3, [r3, #0]
    aa42:	4618      	mov	r0, r3
    aa44:	4b19      	ldr	r3, [pc, #100]	; (aaac <_calendar_init+0xa0>)
    aa46:	4798      	blx	r3
    aa48:	4603      	mov	r3, r0
    aa4a:	2b00      	cmp	r3, #0
    aa4c:	d00a      	beq.n	aa64 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    aa4e:	687b      	ldr	r3, [r7, #4]
    aa50:	681b      	ldr	r3, [r3, #0]
    aa52:	4618      	mov	r0, r3
    aa54:	4b16      	ldr	r3, [pc, #88]	; (aab0 <_calendar_init+0xa4>)
    aa56:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    aa58:	687b      	ldr	r3, [r7, #4]
    aa5a:	681b      	ldr	r3, [r3, #0]
    aa5c:	2102      	movs	r1, #2
    aa5e:	4618      	mov	r0, r3
    aa60:	4b14      	ldr	r3, [pc, #80]	; (aab4 <_calendar_init+0xa8>)
    aa62:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    aa64:	687b      	ldr	r3, [r7, #4]
    aa66:	681b      	ldr	r3, [r3, #0]
    aa68:	4618      	mov	r0, r3
    aa6a:	4b13      	ldr	r3, [pc, #76]	; (aab8 <_calendar_init+0xac>)
    aa6c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    aa6e:	687b      	ldr	r3, [r7, #4]
    aa70:	681b      	ldr	r3, [r3, #0]
    aa72:	2101      	movs	r1, #1
    aa74:	4618      	mov	r0, r3
    aa76:	4b0f      	ldr	r3, [pc, #60]	; (aab4 <_calendar_init+0xa8>)
    aa78:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    aa7a:	687b      	ldr	r3, [r7, #4]
    aa7c:	681b      	ldr	r3, [r3, #0]
    aa7e:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    aa82:	4618      	mov	r0, r3
    aa84:	4b0d      	ldr	r3, [pc, #52]	; (aabc <_calendar_init+0xb0>)
    aa86:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    aa88:	687b      	ldr	r3, [r7, #4]
    aa8a:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    aa8c:	2100      	movs	r1, #0
    aa8e:	4618      	mov	r0, r3
    aa90:	4b0b      	ldr	r3, [pc, #44]	; (aac0 <_calendar_init+0xb4>)
    aa92:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    aa94:	2300      	movs	r3, #0
}
    aa96:	4618      	mov	r0, r3
    aa98:	3708      	adds	r7, #8
    aa9a:	46bd      	mov	sp, r7
    aa9c:	bd80      	pop	{r7, pc}
    aa9e:	bf00      	nop
    aaa0:	00020ca0 	.word	0x00020ca0
    aaa4:	000080d1 	.word	0x000080d1
    aaa8:	20008898 	.word	0x20008898
    aaac:	0000a919 	.word	0x0000a919
    aab0:	0000a955 	.word	0x0000a955
    aab4:	0000a82d 	.word	0x0000a82d
    aab8:	0000a8bd 	.word	0x0000a8bd
    aabc:	0000a985 	.word	0x0000a985
    aac0:	0000a9f1 	.word	0x0000a9f1

0000aac4 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    aac4:	b580      	push	{r7, lr}
    aac6:	b082      	sub	sp, #8
    aac8:	af00      	add	r7, sp, #0
    aaca:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    aacc:	687b      	ldr	r3, [r7, #4]
    aace:	2b00      	cmp	r3, #0
    aad0:	d005      	beq.n	aade <_calendar_enable+0x1a>
    aad2:	687b      	ldr	r3, [r7, #4]
    aad4:	681b      	ldr	r3, [r3, #0]
    aad6:	2b00      	cmp	r3, #0
    aad8:	d001      	beq.n	aade <_calendar_enable+0x1a>
    aada:	2301      	movs	r3, #1
    aadc:	e000      	b.n	aae0 <_calendar_enable+0x1c>
    aade:	2300      	movs	r3, #0
    aae0:	f003 0301 	and.w	r3, r3, #1
    aae4:	b2db      	uxtb	r3, r3
    aae6:	2275      	movs	r2, #117	; 0x75
    aae8:	4906      	ldr	r1, [pc, #24]	; (ab04 <_calendar_enable+0x40>)
    aaea:	4618      	mov	r0, r3
    aaec:	4b06      	ldr	r3, [pc, #24]	; (ab08 <_calendar_enable+0x44>)
    aaee:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    aaf0:	687b      	ldr	r3, [r7, #4]
    aaf2:	681b      	ldr	r3, [r3, #0]
    aaf4:	4618      	mov	r0, r3
    aaf6:	4b05      	ldr	r3, [pc, #20]	; (ab0c <_calendar_enable+0x48>)
    aaf8:	4798      	blx	r3

	return ERR_NONE;
    aafa:	2300      	movs	r3, #0
}
    aafc:	4618      	mov	r0, r3
    aafe:	3708      	adds	r7, #8
    ab00:	46bd      	mov	sp, r7
    ab02:	bd80      	pop	{r7, pc}
    ab04:	00020ca0 	.word	0x00020ca0
    ab08:	000080d1 	.word	0x000080d1
    ab0c:	0000a8e9 	.word	0x0000a8e9

0000ab10 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    ab10:	b580      	push	{r7, lr}
    ab12:	b082      	sub	sp, #8
    ab14:	af00      	add	r7, sp, #0
    ab16:	6078      	str	r0, [r7, #4]
    ab18:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    ab1a:	687b      	ldr	r3, [r7, #4]
    ab1c:	2b00      	cmp	r3, #0
    ab1e:	d005      	beq.n	ab2c <_calendar_set_counter+0x1c>
    ab20:	687b      	ldr	r3, [r7, #4]
    ab22:	681b      	ldr	r3, [r3, #0]
    ab24:	2b00      	cmp	r3, #0
    ab26:	d001      	beq.n	ab2c <_calendar_set_counter+0x1c>
    ab28:	2301      	movs	r3, #1
    ab2a:	e000      	b.n	ab2e <_calendar_set_counter+0x1e>
    ab2c:	2300      	movs	r3, #0
    ab2e:	f003 0301 	and.w	r3, r3, #1
    ab32:	b2db      	uxtb	r3, r3
    ab34:	228d      	movs	r2, #141	; 0x8d
    ab36:	4907      	ldr	r1, [pc, #28]	; (ab54 <_calendar_set_counter+0x44>)
    ab38:	4618      	mov	r0, r3
    ab3a:	4b07      	ldr	r3, [pc, #28]	; (ab58 <_calendar_set_counter+0x48>)
    ab3c:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    ab3e:	687b      	ldr	r3, [r7, #4]
    ab40:	681b      	ldr	r3, [r3, #0]
    ab42:	6839      	ldr	r1, [r7, #0]
    ab44:	4618      	mov	r0, r3
    ab46:	4b05      	ldr	r3, [pc, #20]	; (ab5c <_calendar_set_counter+0x4c>)
    ab48:	4798      	blx	r3

	return ERR_NONE;
    ab4a:	2300      	movs	r3, #0
}
    ab4c:	4618      	mov	r0, r3
    ab4e:	3708      	adds	r7, #8
    ab50:	46bd      	mov	sp, r7
    ab52:	bd80      	pop	{r7, pc}
    ab54:	00020ca0 	.word	0x00020ca0
    ab58:	000080d1 	.word	0x000080d1
    ab5c:	0000a9ad 	.word	0x0000a9ad

0000ab60 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    ab60:	b580      	push	{r7, lr}
    ab62:	b082      	sub	sp, #8
    ab64:	af00      	add	r7, sp, #0
    ab66:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    ab68:	687b      	ldr	r3, [r7, #4]
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	d005      	beq.n	ab7a <_calendar_get_counter+0x1a>
    ab6e:	687b      	ldr	r3, [r7, #4]
    ab70:	681b      	ldr	r3, [r3, #0]
    ab72:	2b00      	cmp	r3, #0
    ab74:	d001      	beq.n	ab7a <_calendar_get_counter+0x1a>
    ab76:	2301      	movs	r3, #1
    ab78:	e000      	b.n	ab7c <_calendar_get_counter+0x1c>
    ab7a:	2300      	movs	r3, #0
    ab7c:	f003 0301 	and.w	r3, r3, #1
    ab80:	b2db      	uxtb	r3, r3
    ab82:	2299      	movs	r2, #153	; 0x99
    ab84:	4906      	ldr	r1, [pc, #24]	; (aba0 <_calendar_get_counter+0x40>)
    ab86:	4618      	mov	r0, r3
    ab88:	4b06      	ldr	r3, [pc, #24]	; (aba4 <_calendar_get_counter+0x44>)
    ab8a:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    ab8c:	687b      	ldr	r3, [r7, #4]
    ab8e:	681b      	ldr	r3, [r3, #0]
    ab90:	4618      	mov	r0, r3
    ab92:	4b05      	ldr	r3, [pc, #20]	; (aba8 <_calendar_get_counter+0x48>)
    ab94:	4798      	blx	r3
    ab96:	4603      	mov	r3, r0
}
    ab98:	4618      	mov	r0, r3
    ab9a:	3708      	adds	r7, #8
    ab9c:	46bd      	mov	sp, r7
    ab9e:	bd80      	pop	{r7, pc}
    aba0:	00020ca0 	.word	0x00020ca0
    aba4:	000080d1 	.word	0x000080d1
    aba8:	0000a9d1 	.word	0x0000a9d1

0000abac <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    abac:	b580      	push	{r7, lr}
    abae:	b084      	sub	sp, #16
    abb0:	af00      	add	r7, sp, #0
    abb2:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    abb4:	687b      	ldr	r3, [r7, #4]
    abb6:	681b      	ldr	r3, [r3, #0]
    abb8:	4618      	mov	r0, r3
    abba:	4b19      	ldr	r3, [pc, #100]	; (ac20 <_rtc_interrupt_handler+0x74>)
    abbc:	4798      	blx	r3
    abbe:	4603      	mov	r3, r0
    abc0:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    abc2:	687b      	ldr	r3, [r7, #4]
    abc4:	681b      	ldr	r3, [r3, #0]
    abc6:	4618      	mov	r0, r3
    abc8:	4b16      	ldr	r3, [pc, #88]	; (ac24 <_rtc_interrupt_handler+0x78>)
    abca:	4798      	blx	r3
    abcc:	4603      	mov	r3, r0
    abce:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    abd0:	89fa      	ldrh	r2, [r7, #14]
    abd2:	89bb      	ldrh	r3, [r7, #12]
    abd4:	4013      	ands	r3, r2
    abd6:	b29b      	uxth	r3, r3
    abd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    abdc:	2b00      	cmp	r3, #0
    abde:	d009      	beq.n	abf4 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    abe0:	687b      	ldr	r3, [r7, #4]
    abe2:	685b      	ldr	r3, [r3, #4]
    abe4:	6878      	ldr	r0, [r7, #4]
    abe6:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    abe8:	687b      	ldr	r3, [r7, #4]
    abea:	681b      	ldr	r3, [r3, #0]
    abec:	4618      	mov	r0, r3
    abee:	4b0e      	ldr	r3, [pc, #56]	; (ac28 <_rtc_interrupt_handler+0x7c>)
    abf0:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    abf2:	e010      	b.n	ac16 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    abf4:	89fa      	ldrh	r2, [r7, #14]
    abf6:	89bb      	ldrh	r3, [r7, #12]
    abf8:	4013      	ands	r3, r2
    abfa:	b29b      	uxth	r3, r3
    abfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    ac00:	2b00      	cmp	r3, #0
    ac02:	d008      	beq.n	ac16 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    ac04:	687b      	ldr	r3, [r7, #4]
    ac06:	689b      	ldr	r3, [r3, #8]
    ac08:	6878      	ldr	r0, [r7, #4]
    ac0a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    ac0c:	687b      	ldr	r3, [r7, #4]
    ac0e:	681b      	ldr	r3, [r3, #0]
    ac10:	4618      	mov	r0, r3
    ac12:	4b06      	ldr	r3, [pc, #24]	; (ac2c <_rtc_interrupt_handler+0x80>)
    ac14:	4798      	blx	r3
}
    ac16:	bf00      	nop
    ac18:	3710      	adds	r7, #16
    ac1a:	46bd      	mov	sp, r7
    ac1c:	bd80      	pop	{r7, pc}
    ac1e:	bf00      	nop
    ac20:	0000a889 	.word	0x0000a889
    ac24:	0000a8a3 	.word	0x0000a8a3
    ac28:	0000a851 	.word	0x0000a851
    ac2c:	0000a86d 	.word	0x0000a86d

0000ac30 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    ac30:	b580      	push	{r7, lr}
    ac32:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    ac34:	4b03      	ldr	r3, [pc, #12]	; (ac44 <RTC_Handler+0x14>)
    ac36:	681b      	ldr	r3, [r3, #0]
    ac38:	4618      	mov	r0, r3
    ac3a:	4b03      	ldr	r3, [pc, #12]	; (ac48 <RTC_Handler+0x18>)
    ac3c:	4798      	blx	r3
}
    ac3e:	bf00      	nop
    ac40:	bd80      	pop	{r7, pc}
    ac42:	bf00      	nop
    ac44:	20008898 	.word	0x20008898
    ac48:	0000abad 	.word	0x0000abad

0000ac4c <__NVIC_EnableIRQ>:
{
    ac4c:	b480      	push	{r7}
    ac4e:	b083      	sub	sp, #12
    ac50:	af00      	add	r7, sp, #0
    ac52:	4603      	mov	r3, r0
    ac54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ac56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ac5a:	2b00      	cmp	r3, #0
    ac5c:	db0b      	blt.n	ac76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ac5e:	4909      	ldr	r1, [pc, #36]	; (ac84 <__NVIC_EnableIRQ+0x38>)
    ac60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ac64:	095b      	lsrs	r3, r3, #5
    ac66:	88fa      	ldrh	r2, [r7, #6]
    ac68:	f002 021f 	and.w	r2, r2, #31
    ac6c:	2001      	movs	r0, #1
    ac6e:	fa00 f202 	lsl.w	r2, r0, r2
    ac72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac76:	bf00      	nop
    ac78:	370c      	adds	r7, #12
    ac7a:	46bd      	mov	sp, r7
    ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac80:	4770      	bx	lr
    ac82:	bf00      	nop
    ac84:	e000e100 	.word	0xe000e100

0000ac88 <__NVIC_DisableIRQ>:
{
    ac88:	b480      	push	{r7}
    ac8a:	b083      	sub	sp, #12
    ac8c:	af00      	add	r7, sp, #0
    ac8e:	4603      	mov	r3, r0
    ac90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ac92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ac96:	2b00      	cmp	r3, #0
    ac98:	db10      	blt.n	acbc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ac9a:	490b      	ldr	r1, [pc, #44]	; (acc8 <__NVIC_DisableIRQ+0x40>)
    ac9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aca0:	095b      	lsrs	r3, r3, #5
    aca2:	88fa      	ldrh	r2, [r7, #6]
    aca4:	f002 021f 	and.w	r2, r2, #31
    aca8:	2001      	movs	r0, #1
    acaa:	fa00 f202 	lsl.w	r2, r0, r2
    acae:	3320      	adds	r3, #32
    acb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    acb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    acb8:	f3bf 8f6f 	isb	sy
}
    acbc:	bf00      	nop
    acbe:	370c      	adds	r7, #12
    acc0:	46bd      	mov	sp, r7
    acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    acc6:	4770      	bx	lr
    acc8:	e000e100 	.word	0xe000e100

0000accc <__NVIC_ClearPendingIRQ>:
{
    accc:	b480      	push	{r7}
    acce:	b083      	sub	sp, #12
    acd0:	af00      	add	r7, sp, #0
    acd2:	4603      	mov	r3, r0
    acd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    acd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    acda:	2b00      	cmp	r3, #0
    acdc:	db0c      	blt.n	acf8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    acde:	4909      	ldr	r1, [pc, #36]	; (ad04 <__NVIC_ClearPendingIRQ+0x38>)
    ace0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ace4:	095b      	lsrs	r3, r3, #5
    ace6:	88fa      	ldrh	r2, [r7, #6]
    ace8:	f002 021f 	and.w	r2, r2, #31
    acec:	2001      	movs	r0, #1
    acee:	fa00 f202 	lsl.w	r2, r0, r2
    acf2:	3360      	adds	r3, #96	; 0x60
    acf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    acf8:	bf00      	nop
    acfa:	370c      	adds	r7, #12
    acfc:	46bd      	mov	sp, r7
    acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad02:	4770      	bx	lr
    ad04:	e000e100 	.word	0xe000e100

0000ad08 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    ad08:	b480      	push	{r7}
    ad0a:	b083      	sub	sp, #12
    ad0c:	af00      	add	r7, sp, #0
    ad0e:	6078      	str	r0, [r7, #4]
    ad10:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    ad12:	bf00      	nop
    ad14:	687b      	ldr	r3, [r7, #4]
    ad16:	69da      	ldr	r2, [r3, #28]
    ad18:	683b      	ldr	r3, [r7, #0]
    ad1a:	4013      	ands	r3, r2
    ad1c:	2b00      	cmp	r3, #0
    ad1e:	d1f9      	bne.n	ad14 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    ad20:	bf00      	nop
    ad22:	370c      	adds	r7, #12
    ad24:	46bd      	mov	sp, r7
    ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad2a:	4770      	bx	lr

0000ad2c <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    ad2c:	b480      	push	{r7}
    ad2e:	b083      	sub	sp, #12
    ad30:	af00      	add	r7, sp, #0
    ad32:	6078      	str	r0, [r7, #4]
    ad34:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    ad36:	687b      	ldr	r3, [r7, #4]
    ad38:	69da      	ldr	r2, [r3, #28]
    ad3a:	683b      	ldr	r3, [r7, #0]
    ad3c:	4013      	ands	r3, r2
    ad3e:	2b00      	cmp	r3, #0
    ad40:	bf14      	ite	ne
    ad42:	2301      	movne	r3, #1
    ad44:	2300      	moveq	r3, #0
    ad46:	b2db      	uxtb	r3, r3
}
    ad48:	4618      	mov	r0, r3
    ad4a:	370c      	adds	r7, #12
    ad4c:	46bd      	mov	sp, r7
    ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad52:	4770      	bx	lr

0000ad54 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    ad54:	b480      	push	{r7}
    ad56:	b083      	sub	sp, #12
    ad58:	af00      	add	r7, sp, #0
    ad5a:	6078      	str	r0, [r7, #4]
    ad5c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    ad5e:	bf00      	nop
    ad60:	687b      	ldr	r3, [r7, #4]
    ad62:	69da      	ldr	r2, [r3, #28]
    ad64:	683b      	ldr	r3, [r7, #0]
    ad66:	4013      	ands	r3, r2
    ad68:	2b00      	cmp	r3, #0
    ad6a:	d1f9      	bne.n	ad60 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    ad6c:	bf00      	nop
    ad6e:	370c      	adds	r7, #12
    ad70:	46bd      	mov	sp, r7
    ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad76:	4770      	bx	lr

0000ad78 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    ad78:	b480      	push	{r7}
    ad7a:	b083      	sub	sp, #12
    ad7c:	af00      	add	r7, sp, #0
    ad7e:	6078      	str	r0, [r7, #4]
    ad80:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    ad82:	687b      	ldr	r3, [r7, #4]
    ad84:	69da      	ldr	r2, [r3, #28]
    ad86:	683b      	ldr	r3, [r7, #0]
    ad88:	4013      	ands	r3, r2
    ad8a:	2b00      	cmp	r3, #0
    ad8c:	bf14      	ite	ne
    ad8e:	2301      	movne	r3, #1
    ad90:	2300      	moveq	r3, #0
    ad92:	b2db      	uxtb	r3, r3
}
    ad94:	4618      	mov	r0, r3
    ad96:	370c      	adds	r7, #12
    ad98:	46bd      	mov	sp, r7
    ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad9e:	4770      	bx	lr

0000ada0 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    ada0:	b480      	push	{r7}
    ada2:	b083      	sub	sp, #12
    ada4:	af00      	add	r7, sp, #0
    ada6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    ada8:	687b      	ldr	r3, [r7, #4]
    adaa:	2201      	movs	r2, #1
    adac:	761a      	strb	r2, [r3, #24]
}
    adae:	bf00      	nop
    adb0:	370c      	adds	r7, #12
    adb2:	46bd      	mov	sp, r7
    adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    adb8:	4770      	bx	lr

0000adba <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    adba:	b480      	push	{r7}
    adbc:	b083      	sub	sp, #12
    adbe:	af00      	add	r7, sp, #0
    adc0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    adc2:	687b      	ldr	r3, [r7, #4]
    adc4:	2202      	movs	r2, #2
    adc6:	761a      	strb	r2, [r3, #24]
}
    adc8:	bf00      	nop
    adca:	370c      	adds	r7, #12
    adcc:	46bd      	mov	sp, r7
    adce:	f85d 7b04 	ldr.w	r7, [sp], #4
    add2:	4770      	bx	lr

0000add4 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    add4:	b480      	push	{r7}
    add6:	b083      	sub	sp, #12
    add8:	af00      	add	r7, sp, #0
    adda:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    addc:	687b      	ldr	r3, [r7, #4]
    adde:	7e1b      	ldrb	r3, [r3, #24]
    ade0:	b2db      	uxtb	r3, r3
}
    ade2:	4618      	mov	r0, r3
    ade4:	370c      	adds	r7, #12
    ade6:	46bd      	mov	sp, r7
    ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
    adec:	4770      	bx	lr

0000adee <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    adee:	b480      	push	{r7}
    adf0:	b083      	sub	sp, #12
    adf2:	af00      	add	r7, sp, #0
    adf4:	6078      	str	r0, [r7, #4]
    adf6:	460b      	mov	r3, r1
    adf8:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    adfa:	687b      	ldr	r3, [r7, #4]
    adfc:	78fa      	ldrb	r2, [r7, #3]
    adfe:	761a      	strb	r2, [r3, #24]
}
    ae00:	bf00      	nop
    ae02:	370c      	adds	r7, #12
    ae04:	46bd      	mov	sp, r7
    ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae0a:	4770      	bx	lr

0000ae0c <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    ae0c:	b480      	push	{r7}
    ae0e:	b085      	sub	sp, #20
    ae10:	af00      	add	r7, sp, #0
    ae12:	6078      	str	r0, [r7, #4]
    ae14:	460b      	mov	r3, r1
    ae16:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    ae18:	687b      	ldr	r3, [r7, #4]
    ae1a:	7e1b      	ldrb	r3, [r3, #24]
    ae1c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    ae1e:	7bfa      	ldrb	r2, [r7, #15]
    ae20:	78fb      	ldrb	r3, [r7, #3]
    ae22:	4013      	ands	r3, r2
    ae24:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ae26:	7bfb      	ldrb	r3, [r7, #15]
}
    ae28:	4618      	mov	r0, r3
    ae2a:	3714      	adds	r7, #20
    ae2c:	46bd      	mov	sp, r7
    ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae32:	4770      	bx	lr

0000ae34 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    ae34:	b480      	push	{r7}
    ae36:	b083      	sub	sp, #12
    ae38:	af00      	add	r7, sp, #0
    ae3a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    ae3c:	687b      	ldr	r3, [r7, #4]
    ae3e:	7e1b      	ldrb	r3, [r3, #24]
    ae40:	b2db      	uxtb	r3, r3
}
    ae42:	4618      	mov	r0, r3
    ae44:	370c      	adds	r7, #12
    ae46:	46bd      	mov	sp, r7
    ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae4c:	4770      	bx	lr

0000ae4e <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    ae4e:	b480      	push	{r7}
    ae50:	b083      	sub	sp, #12
    ae52:	af00      	add	r7, sp, #0
    ae54:	6078      	str	r0, [r7, #4]
    ae56:	460b      	mov	r3, r1
    ae58:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    ae5a:	687b      	ldr	r3, [r7, #4]
    ae5c:	78fa      	ldrb	r2, [r7, #3]
    ae5e:	761a      	strb	r2, [r3, #24]
}
    ae60:	bf00      	nop
    ae62:	370c      	adds	r7, #12
    ae64:	46bd      	mov	sp, r7
    ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae6a:	4770      	bx	lr

0000ae6c <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    ae6c:	b480      	push	{r7}
    ae6e:	b083      	sub	sp, #12
    ae70:	af00      	add	r7, sp, #0
    ae72:	6078      	str	r0, [r7, #4]
    ae74:	460b      	mov	r3, r1
    ae76:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    ae78:	78fb      	ldrb	r3, [r7, #3]
    ae7a:	f083 0301 	eor.w	r3, r3, #1
    ae7e:	b2db      	uxtb	r3, r3
    ae80:	2b00      	cmp	r3, #0
    ae82:	d003      	beq.n	ae8c <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    ae84:	687b      	ldr	r3, [r7, #4]
    ae86:	2201      	movs	r2, #1
    ae88:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    ae8a:	e002      	b.n	ae92 <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    ae8c:	687b      	ldr	r3, [r7, #4]
    ae8e:	2201      	movs	r2, #1
    ae90:	759a      	strb	r2, [r3, #22]
}
    ae92:	bf00      	nop
    ae94:	370c      	adds	r7, #12
    ae96:	46bd      	mov	sp, r7
    ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae9c:	4770      	bx	lr

0000ae9e <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    ae9e:	b480      	push	{r7}
    aea0:	b083      	sub	sp, #12
    aea2:	af00      	add	r7, sp, #0
    aea4:	6078      	str	r0, [r7, #4]
    aea6:	460b      	mov	r3, r1
    aea8:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    aeaa:	78fb      	ldrb	r3, [r7, #3]
    aeac:	f083 0301 	eor.w	r3, r3, #1
    aeb0:	b2db      	uxtb	r3, r3
    aeb2:	2b00      	cmp	r3, #0
    aeb4:	d003      	beq.n	aebe <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    aeb6:	687b      	ldr	r3, [r7, #4]
    aeb8:	2202      	movs	r2, #2
    aeba:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    aebc:	e002      	b.n	aec4 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    aebe:	687b      	ldr	r3, [r7, #4]
    aec0:	2202      	movs	r2, #2
    aec2:	759a      	strb	r2, [r3, #22]
}
    aec4:	bf00      	nop
    aec6:	370c      	adds	r7, #12
    aec8:	46bd      	mov	sp, r7
    aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
    aece:	4770      	bx	lr

0000aed0 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    aed0:	b480      	push	{r7}
    aed2:	b083      	sub	sp, #12
    aed4:	af00      	add	r7, sp, #0
    aed6:	6078      	str	r0, [r7, #4]
    aed8:	460b      	mov	r3, r1
    aeda:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    aedc:	78fb      	ldrb	r3, [r7, #3]
    aede:	f083 0301 	eor.w	r3, r3, #1
    aee2:	b2db      	uxtb	r3, r3
    aee4:	2b00      	cmp	r3, #0
    aee6:	d003      	beq.n	aef0 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    aee8:	687b      	ldr	r3, [r7, #4]
    aeea:	2280      	movs	r2, #128	; 0x80
    aeec:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    aeee:	e002      	b.n	aef6 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    aef0:	687b      	ldr	r3, [r7, #4]
    aef2:	2280      	movs	r2, #128	; 0x80
    aef4:	759a      	strb	r2, [r3, #22]
}
    aef6:	bf00      	nop
    aef8:	370c      	adds	r7, #12
    aefa:	46bd      	mov	sp, r7
    aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
    af00:	4770      	bx	lr
	...

0000af04 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    af04:	b580      	push	{r7, lr}
    af06:	b082      	sub	sp, #8
    af08:	af00      	add	r7, sp, #0
    af0a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    af0c:	687b      	ldr	r3, [r7, #4]
    af0e:	681b      	ldr	r3, [r3, #0]
    af10:	f043 0202 	orr.w	r2, r3, #2
    af14:	687b      	ldr	r3, [r7, #4]
    af16:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    af18:	2103      	movs	r1, #3
    af1a:	6878      	ldr	r0, [r7, #4]
    af1c:	4b02      	ldr	r3, [pc, #8]	; (af28 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    af1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af20:	bf00      	nop
    af22:	3708      	adds	r7, #8
    af24:	46bd      	mov	sp, r7
    af26:	bd80      	pop	{r7, pc}
    af28:	0000ad09 	.word	0x0000ad09

0000af2c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    af2c:	b580      	push	{r7, lr}
    af2e:	b082      	sub	sp, #8
    af30:	af00      	add	r7, sp, #0
    af32:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    af34:	687b      	ldr	r3, [r7, #4]
    af36:	681b      	ldr	r3, [r3, #0]
    af38:	f023 0202 	bic.w	r2, r3, #2
    af3c:	687b      	ldr	r3, [r7, #4]
    af3e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    af40:	2103      	movs	r1, #3
    af42:	6878      	ldr	r0, [r7, #4]
    af44:	4b02      	ldr	r3, [pc, #8]	; (af50 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    af46:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af48:	bf00      	nop
    af4a:	3708      	adds	r7, #8
    af4c:	46bd      	mov	sp, r7
    af4e:	bd80      	pop	{r7, pc}
    af50:	0000ad09 	.word	0x0000ad09

0000af54 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    af54:	b480      	push	{r7}
    af56:	b085      	sub	sp, #20
    af58:	af00      	add	r7, sp, #0
    af5a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    af5c:	687b      	ldr	r3, [r7, #4]
    af5e:	681b      	ldr	r3, [r3, #0]
    af60:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    af62:	68fb      	ldr	r3, [r7, #12]
    af64:	0edb      	lsrs	r3, r3, #27
    af66:	f003 0301 	and.w	r3, r3, #1
    af6a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    af6c:	68fb      	ldr	r3, [r7, #12]
    af6e:	2b00      	cmp	r3, #0
    af70:	bf14      	ite	ne
    af72:	2301      	movne	r3, #1
    af74:	2300      	moveq	r3, #0
    af76:	b2db      	uxtb	r3, r3
}
    af78:	4618      	mov	r0, r3
    af7a:	3714      	adds	r7, #20
    af7c:	46bd      	mov	sp, r7
    af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    af82:	4770      	bx	lr

0000af84 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    af84:	b580      	push	{r7, lr}
    af86:	b084      	sub	sp, #16
    af88:	af00      	add	r7, sp, #0
    af8a:	6078      	str	r0, [r7, #4]
    af8c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    af8e:	2103      	movs	r1, #3
    af90:	6878      	ldr	r0, [r7, #4]
    af92:	4b07      	ldr	r3, [pc, #28]	; (afb0 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    af94:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    af96:	687b      	ldr	r3, [r7, #4]
    af98:	681b      	ldr	r3, [r3, #0]
    af9a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    af9c:	68fa      	ldr	r2, [r7, #12]
    af9e:	683b      	ldr	r3, [r7, #0]
    afa0:	4013      	ands	r3, r2
    afa2:	60fb      	str	r3, [r7, #12]
	return tmp;
    afa4:	68fb      	ldr	r3, [r7, #12]
}
    afa6:	4618      	mov	r0, r3
    afa8:	3710      	adds	r7, #16
    afaa:	46bd      	mov	sp, r7
    afac:	bd80      	pop	{r7, pc}
    afae:	bf00      	nop
    afb0:	0000ad09 	.word	0x0000ad09

0000afb4 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    afb4:	b580      	push	{r7, lr}
    afb6:	b082      	sub	sp, #8
    afb8:	af00      	add	r7, sp, #0
    afba:	6078      	str	r0, [r7, #4]
    afbc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    afbe:	687b      	ldr	r3, [r7, #4]
    afc0:	683a      	ldr	r2, [r7, #0]
    afc2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    afc4:	2103      	movs	r1, #3
    afc6:	6878      	ldr	r0, [r7, #4]
    afc8:	4b02      	ldr	r3, [pc, #8]	; (afd4 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    afca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    afcc:	bf00      	nop
    afce:	3708      	adds	r7, #8
    afd0:	46bd      	mov	sp, r7
    afd2:	bd80      	pop	{r7, pc}
    afd4:	0000ad09 	.word	0x0000ad09

0000afd8 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    afd8:	b580      	push	{r7, lr}
    afda:	b082      	sub	sp, #8
    afdc:	af00      	add	r7, sp, #0
    afde:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    afe0:	687b      	ldr	r3, [r7, #4]
    afe2:	681b      	ldr	r3, [r3, #0]
    afe4:	f043 0202 	orr.w	r2, r3, #2
    afe8:	687b      	ldr	r3, [r7, #4]
    afea:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    afec:	2103      	movs	r1, #3
    afee:	6878      	ldr	r0, [r7, #4]
    aff0:	4b02      	ldr	r3, [pc, #8]	; (affc <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    aff2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aff4:	bf00      	nop
    aff6:	3708      	adds	r7, #8
    aff8:	46bd      	mov	sp, r7
    affa:	bd80      	pop	{r7, pc}
    affc:	0000ad55 	.word	0x0000ad55

0000b000 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b000:	b580      	push	{r7, lr}
    b002:	b084      	sub	sp, #16
    b004:	af00      	add	r7, sp, #0
    b006:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    b008:	2103      	movs	r1, #3
    b00a:	6878      	ldr	r0, [r7, #4]
    b00c:	4b09      	ldr	r3, [pc, #36]	; (b034 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    b00e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    b010:	687b      	ldr	r3, [r7, #4]
    b012:	681b      	ldr	r3, [r3, #0]
    b014:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    b016:	68fb      	ldr	r3, [r7, #12]
    b018:	085b      	lsrs	r3, r3, #1
    b01a:	f003 0301 	and.w	r3, r3, #1
    b01e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    b020:	68fb      	ldr	r3, [r7, #12]
    b022:	2b00      	cmp	r3, #0
    b024:	bf14      	ite	ne
    b026:	2301      	movne	r3, #1
    b028:	2300      	moveq	r3, #0
    b02a:	b2db      	uxtb	r3, r3
}
    b02c:	4618      	mov	r0, r3
    b02e:	3710      	adds	r7, #16
    b030:	46bd      	mov	sp, r7
    b032:	bd80      	pop	{r7, pc}
    b034:	0000ad55 	.word	0x0000ad55

0000b038 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    b038:	b580      	push	{r7, lr}
    b03a:	b082      	sub	sp, #8
    b03c:	af00      	add	r7, sp, #0
    b03e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    b040:	687b      	ldr	r3, [r7, #4]
    b042:	681b      	ldr	r3, [r3, #0]
    b044:	f023 0202 	bic.w	r2, r3, #2
    b048:	687b      	ldr	r3, [r7, #4]
    b04a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    b04c:	2103      	movs	r1, #3
    b04e:	6878      	ldr	r0, [r7, #4]
    b050:	4b02      	ldr	r3, [pc, #8]	; (b05c <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    b052:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b054:	bf00      	nop
    b056:	3708      	adds	r7, #8
    b058:	46bd      	mov	sp, r7
    b05a:	bd80      	pop	{r7, pc}
    b05c:	0000ad55 	.word	0x0000ad55

0000b060 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    b060:	b580      	push	{r7, lr}
    b062:	b084      	sub	sp, #16
    b064:	af00      	add	r7, sp, #0
    b066:	6078      	str	r0, [r7, #4]
    b068:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    b06a:	2103      	movs	r1, #3
    b06c:	6878      	ldr	r0, [r7, #4]
    b06e:	4b07      	ldr	r3, [pc, #28]	; (b08c <hri_sercomspi_get_CTRLA_reg+0x2c>)
    b070:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    b072:	687b      	ldr	r3, [r7, #4]
    b074:	681b      	ldr	r3, [r3, #0]
    b076:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b078:	68fa      	ldr	r2, [r7, #12]
    b07a:	683b      	ldr	r3, [r7, #0]
    b07c:	4013      	ands	r3, r2
    b07e:	60fb      	str	r3, [r7, #12]
	return tmp;
    b080:	68fb      	ldr	r3, [r7, #12]
}
    b082:	4618      	mov	r0, r3
    b084:	3710      	adds	r7, #16
    b086:	46bd      	mov	sp, r7
    b088:	bd80      	pop	{r7, pc}
    b08a:	bf00      	nop
    b08c:	0000ad55 	.word	0x0000ad55

0000b090 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    b090:	b580      	push	{r7, lr}
    b092:	b082      	sub	sp, #8
    b094:	af00      	add	r7, sp, #0
    b096:	6078      	str	r0, [r7, #4]
    b098:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    b09a:	687b      	ldr	r3, [r7, #4]
    b09c:	683a      	ldr	r2, [r7, #0]
    b09e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    b0a0:	2103      	movs	r1, #3
    b0a2:	6878      	ldr	r0, [r7, #4]
    b0a4:	4b02      	ldr	r3, [pc, #8]	; (b0b0 <hri_sercomspi_write_CTRLA_reg+0x20>)
    b0a6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b0a8:	bf00      	nop
    b0aa:	3708      	adds	r7, #8
    b0ac:	46bd      	mov	sp, r7
    b0ae:	bd80      	pop	{r7, pc}
    b0b0:	0000ad55 	.word	0x0000ad55

0000b0b4 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    b0b4:	b580      	push	{r7, lr}
    b0b6:	b082      	sub	sp, #8
    b0b8:	af00      	add	r7, sp, #0
    b0ba:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    b0bc:	687b      	ldr	r3, [r7, #4]
    b0be:	685b      	ldr	r3, [r3, #4]
    b0c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    b0c4:	687b      	ldr	r3, [r7, #4]
    b0c6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b0c8:	2104      	movs	r1, #4
    b0ca:	6878      	ldr	r0, [r7, #4]
    b0cc:	4b02      	ldr	r3, [pc, #8]	; (b0d8 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    b0ce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b0d0:	bf00      	nop
    b0d2:	3708      	adds	r7, #8
    b0d4:	46bd      	mov	sp, r7
    b0d6:	bd80      	pop	{r7, pc}
    b0d8:	0000ad09 	.word	0x0000ad09

0000b0dc <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    b0dc:	b580      	push	{r7, lr}
    b0de:	b082      	sub	sp, #8
    b0e0:	af00      	add	r7, sp, #0
    b0e2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    b0e4:	687b      	ldr	r3, [r7, #4]
    b0e6:	685b      	ldr	r3, [r3, #4]
    b0e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    b0ec:	687b      	ldr	r3, [r7, #4]
    b0ee:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b0f0:	2104      	movs	r1, #4
    b0f2:	6878      	ldr	r0, [r7, #4]
    b0f4:	4b02      	ldr	r3, [pc, #8]	; (b100 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    b0f6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b0f8:	bf00      	nop
    b0fa:	3708      	adds	r7, #8
    b0fc:	46bd      	mov	sp, r7
    b0fe:	bd80      	pop	{r7, pc}
    b100:	0000ad09 	.word	0x0000ad09

0000b104 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    b104:	b580      	push	{r7, lr}
    b106:	b082      	sub	sp, #8
    b108:	af00      	add	r7, sp, #0
    b10a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b10c:	687b      	ldr	r3, [r7, #4]
    b10e:	685b      	ldr	r3, [r3, #4]
    b110:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    b114:	687b      	ldr	r3, [r7, #4]
    b116:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b118:	2104      	movs	r1, #4
    b11a:	6878      	ldr	r0, [r7, #4]
    b11c:	4b02      	ldr	r3, [pc, #8]	; (b128 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    b11e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b120:	bf00      	nop
    b122:	3708      	adds	r7, #8
    b124:	46bd      	mov	sp, r7
    b126:	bd80      	pop	{r7, pc}
    b128:	0000ad09 	.word	0x0000ad09

0000b12c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    b12c:	b580      	push	{r7, lr}
    b12e:	b082      	sub	sp, #8
    b130:	af00      	add	r7, sp, #0
    b132:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    b134:	687b      	ldr	r3, [r7, #4]
    b136:	685b      	ldr	r3, [r3, #4]
    b138:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    b13c:	687b      	ldr	r3, [r7, #4]
    b13e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b140:	2104      	movs	r1, #4
    b142:	6878      	ldr	r0, [r7, #4]
    b144:	4b02      	ldr	r3, [pc, #8]	; (b150 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    b146:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b148:	bf00      	nop
    b14a:	3708      	adds	r7, #8
    b14c:	46bd      	mov	sp, r7
    b14e:	bd80      	pop	{r7, pc}
    b150:	0000ad09 	.word	0x0000ad09

0000b154 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    b154:	b580      	push	{r7, lr}
    b156:	b082      	sub	sp, #8
    b158:	af00      	add	r7, sp, #0
    b15a:	6078      	str	r0, [r7, #4]
    b15c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    b15e:	687b      	ldr	r3, [r7, #4]
    b160:	685a      	ldr	r2, [r3, #4]
    b162:	683b      	ldr	r3, [r7, #0]
    b164:	041b      	lsls	r3, r3, #16
    b166:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    b16a:	431a      	orrs	r2, r3
    b16c:	687b      	ldr	r3, [r7, #4]
    b16e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b170:	2104      	movs	r1, #4
    b172:	6878      	ldr	r0, [r7, #4]
    b174:	4b02      	ldr	r3, [pc, #8]	; (b180 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    b176:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b178:	bf00      	nop
    b17a:	3708      	adds	r7, #8
    b17c:	46bd      	mov	sp, r7
    b17e:	bd80      	pop	{r7, pc}
    b180:	0000ad09 	.word	0x0000ad09

0000b184 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    b184:	b580      	push	{r7, lr}
    b186:	b082      	sub	sp, #8
    b188:	af00      	add	r7, sp, #0
    b18a:	6078      	str	r0, [r7, #4]
    b18c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    b18e:	687b      	ldr	r3, [r7, #4]
    b190:	683a      	ldr	r2, [r7, #0]
    b192:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b194:	2104      	movs	r1, #4
    b196:	6878      	ldr	r0, [r7, #4]
    b198:	4b02      	ldr	r3, [pc, #8]	; (b1a4 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    b19a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b19c:	bf00      	nop
    b19e:	3708      	adds	r7, #8
    b1a0:	46bd      	mov	sp, r7
    b1a2:	bd80      	pop	{r7, pc}
    b1a4:	0000ad09 	.word	0x0000ad09

0000b1a8 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    b1a8:	b580      	push	{r7, lr}
    b1aa:	b082      	sub	sp, #8
    b1ac:	af00      	add	r7, sp, #0
    b1ae:	6078      	str	r0, [r7, #4]
    b1b0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    b1b2:	687b      	ldr	r3, [r7, #4]
    b1b4:	683a      	ldr	r2, [r7, #0]
    b1b6:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    b1b8:	2117      	movs	r1, #23
    b1ba:	6878      	ldr	r0, [r7, #4]
    b1bc:	4b02      	ldr	r3, [pc, #8]	; (b1c8 <hri_sercomspi_write_CTRLB_reg+0x20>)
    b1be:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b1c0:	bf00      	nop
    b1c2:	3708      	adds	r7, #8
    b1c4:	46bd      	mov	sp, r7
    b1c6:	bd80      	pop	{r7, pc}
    b1c8:	0000ad55 	.word	0x0000ad55

0000b1cc <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    b1cc:	b480      	push	{r7}
    b1ce:	b083      	sub	sp, #12
    b1d0:	af00      	add	r7, sp, #0
    b1d2:	6078      	str	r0, [r7, #4]
    b1d4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    b1d6:	687b      	ldr	r3, [r7, #4]
    b1d8:	683a      	ldr	r2, [r7, #0]
    b1da:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b1dc:	bf00      	nop
    b1de:	370c      	adds	r7, #12
    b1e0:	46bd      	mov	sp, r7
    b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1e6:	4770      	bx	lr

0000b1e8 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    b1e8:	b480      	push	{r7}
    b1ea:	b083      	sub	sp, #12
    b1ec:	af00      	add	r7, sp, #0
    b1ee:	6078      	str	r0, [r7, #4]
    b1f0:	460b      	mov	r3, r1
    b1f2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    b1f4:	687b      	ldr	r3, [r7, #4]
    b1f6:	78fa      	ldrb	r2, [r7, #3]
    b1f8:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b1fa:	bf00      	nop
    b1fc:	370c      	adds	r7, #12
    b1fe:	46bd      	mov	sp, r7
    b200:	f85d 7b04 	ldr.w	r7, [sp], #4
    b204:	4770      	bx	lr
	...

0000b208 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    b208:	b580      	push	{r7, lr}
    b20a:	b084      	sub	sp, #16
    b20c:	af00      	add	r7, sp, #0
    b20e:	6078      	str	r0, [r7, #4]
    b210:	460b      	mov	r3, r1
    b212:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    b214:	687b      	ldr	r3, [r7, #4]
    b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b218:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    b21a:	68fb      	ldr	r3, [r7, #12]
    b21c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    b220:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    b222:	78fb      	ldrb	r3, [r7, #3]
    b224:	039b      	lsls	r3, r3, #14
    b226:	461a      	mov	r2, r3
    b228:	68fb      	ldr	r3, [r7, #12]
    b22a:	4313      	orrs	r3, r2
    b22c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    b22e:	687b      	ldr	r3, [r7, #4]
    b230:	68fa      	ldr	r2, [r7, #12]
    b232:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b234:	2104      	movs	r1, #4
    b236:	6878      	ldr	r0, [r7, #4]
    b238:	4b02      	ldr	r3, [pc, #8]	; (b244 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    b23a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b23c:	bf00      	nop
    b23e:	3710      	adds	r7, #16
    b240:	46bd      	mov	sp, r7
    b242:	bd80      	pop	{r7, pc}
    b244:	0000ad09 	.word	0x0000ad09

0000b248 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    b248:	b580      	push	{r7, lr}
    b24a:	b082      	sub	sp, #8
    b24c:	af00      	add	r7, sp, #0
    b24e:	6078      	str	r0, [r7, #4]
    b250:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    b252:	687b      	ldr	r3, [r7, #4]
    b254:	683a      	ldr	r2, [r7, #0]
    b256:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b258:	2104      	movs	r1, #4
    b25a:	6878      	ldr	r0, [r7, #4]
    b25c:	4b02      	ldr	r3, [pc, #8]	; (b268 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    b25e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b260:	bf00      	nop
    b262:	3708      	adds	r7, #8
    b264:	46bd      	mov	sp, r7
    b266:	bd80      	pop	{r7, pc}
    b268:	0000ad09 	.word	0x0000ad09

0000b26c <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    b26c:	b580      	push	{r7, lr}
    b26e:	b082      	sub	sp, #8
    b270:	af00      	add	r7, sp, #0
    b272:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b274:	2104      	movs	r1, #4
    b276:	6878      	ldr	r0, [r7, #4]
    b278:	4b03      	ldr	r3, [pc, #12]	; (b288 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    b27a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    b27c:	687b      	ldr	r3, [r7, #4]
    b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    b280:	4618      	mov	r0, r3
    b282:	3708      	adds	r7, #8
    b284:	46bd      	mov	sp, r7
    b286:	bd80      	pop	{r7, pc}
    b288:	0000ad09 	.word	0x0000ad09

0000b28c <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    b28c:	b480      	push	{r7}
    b28e:	b083      	sub	sp, #12
    b290:	af00      	add	r7, sp, #0
    b292:	6078      	str	r0, [r7, #4]
    b294:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    b296:	687b      	ldr	r3, [r7, #4]
    b298:	683a      	ldr	r2, [r7, #0]
    b29a:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b29c:	bf00      	nop
    b29e:	370c      	adds	r7, #12
    b2a0:	46bd      	mov	sp, r7
    b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2a6:	4770      	bx	lr

0000b2a8 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    b2a8:	b580      	push	{r7, lr}
    b2aa:	b082      	sub	sp, #8
    b2ac:	af00      	add	r7, sp, #0
    b2ae:	6078      	str	r0, [r7, #4]
    b2b0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    b2b2:	687b      	ldr	r3, [r7, #4]
    b2b4:	683a      	ldr	r2, [r7, #0]
    b2b6:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b2b8:	2104      	movs	r1, #4
    b2ba:	6878      	ldr	r0, [r7, #4]
    b2bc:	4b02      	ldr	r3, [pc, #8]	; (b2c8 <hri_sercomi2cm_write_DATA_reg+0x20>)
    b2be:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b2c0:	bf00      	nop
    b2c2:	3708      	adds	r7, #8
    b2c4:	46bd      	mov	sp, r7
    b2c6:	bd80      	pop	{r7, pc}
    b2c8:	0000ad09 	.word	0x0000ad09

0000b2cc <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    b2cc:	b580      	push	{r7, lr}
    b2ce:	b082      	sub	sp, #8
    b2d0:	af00      	add	r7, sp, #0
    b2d2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b2d4:	2104      	movs	r1, #4
    b2d6:	6878      	ldr	r0, [r7, #4]
    b2d8:	4b03      	ldr	r3, [pc, #12]	; (b2e8 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    b2da:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    b2dc:	687b      	ldr	r3, [r7, #4]
    b2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    b2e0:	4618      	mov	r0, r3
    b2e2:	3708      	adds	r7, #8
    b2e4:	46bd      	mov	sp, r7
    b2e6:	bd80      	pop	{r7, pc}
    b2e8:	0000ad09 	.word	0x0000ad09

0000b2ec <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    b2ec:	b480      	push	{r7}
    b2ee:	b083      	sub	sp, #12
    b2f0:	af00      	add	r7, sp, #0
    b2f2:	6078      	str	r0, [r7, #4]
    b2f4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    b2f6:	687b      	ldr	r3, [r7, #4]
    b2f8:	683a      	ldr	r2, [r7, #0]
    b2fa:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b2fc:	bf00      	nop
    b2fe:	370c      	adds	r7, #12
    b300:	46bd      	mov	sp, r7
    b302:	f85d 7b04 	ldr.w	r7, [sp], #4
    b306:	4770      	bx	lr

0000b308 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    b308:	b480      	push	{r7}
    b30a:	b083      	sub	sp, #12
    b30c:	af00      	add	r7, sp, #0
    b30e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    b310:	687b      	ldr	r3, [r7, #4]
    b312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    b314:	4618      	mov	r0, r3
    b316:	370c      	adds	r7, #12
    b318:	46bd      	mov	sp, r7
    b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b31e:	4770      	bx	lr

0000b320 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    b320:	b480      	push	{r7}
    b322:	b083      	sub	sp, #12
    b324:	af00      	add	r7, sp, #0
    b326:	6078      	str	r0, [r7, #4]
    b328:	460b      	mov	r3, r1
    b32a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    b32c:	687b      	ldr	r3, [r7, #4]
    b32e:	78fa      	ldrb	r2, [r7, #3]
    b330:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b334:	bf00      	nop
    b336:	370c      	adds	r7, #12
    b338:	46bd      	mov	sp, r7
    b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b33e:	4770      	bx	lr

0000b340 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    b340:	b480      	push	{r7}
    b342:	b083      	sub	sp, #12
    b344:	af00      	add	r7, sp, #0
    b346:	6078      	str	r0, [r7, #4]
    b348:	460b      	mov	r3, r1
    b34a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    b34c:	687b      	ldr	r3, [r7, #4]
    b34e:	887a      	ldrh	r2, [r7, #2]
    b350:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b352:	bf00      	nop
    b354:	370c      	adds	r7, #12
    b356:	46bd      	mov	sp, r7
    b358:	f85d 7b04 	ldr.w	r7, [sp], #4
    b35c:	4770      	bx	lr
	...

0000b360 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    b360:	b580      	push	{r7, lr}
    b362:	b082      	sub	sp, #8
    b364:	af00      	add	r7, sp, #0
    b366:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b368:	2104      	movs	r1, #4
    b36a:	6878      	ldr	r0, [r7, #4]
    b36c:	4b06      	ldr	r3, [pc, #24]	; (b388 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    b36e:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    b370:	687b      	ldr	r3, [r7, #4]
    b372:	8b5b      	ldrh	r3, [r3, #26]
    b374:	b29b      	uxth	r3, r3
    b376:	091b      	lsrs	r3, r3, #4
    b378:	b29b      	uxth	r3, r3
    b37a:	f003 0303 	and.w	r3, r3, #3
    b37e:	b29b      	uxth	r3, r3
}
    b380:	4618      	mov	r0, r3
    b382:	3708      	adds	r7, #8
    b384:	46bd      	mov	sp, r7
    b386:	bd80      	pop	{r7, pc}
    b388:	0000ad09 	.word	0x0000ad09

0000b38c <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    b38c:	b580      	push	{r7, lr}
    b38e:	b082      	sub	sp, #8
    b390:	af00      	add	r7, sp, #0
    b392:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b394:	2104      	movs	r1, #4
    b396:	6878      	ldr	r0, [r7, #4]
    b398:	4b04      	ldr	r3, [pc, #16]	; (b3ac <hri_sercomi2cm_read_STATUS_reg+0x20>)
    b39a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    b39c:	687b      	ldr	r3, [r7, #4]
    b39e:	8b5b      	ldrh	r3, [r3, #26]
    b3a0:	b29b      	uxth	r3, r3
}
    b3a2:	4618      	mov	r0, r3
    b3a4:	3708      	adds	r7, #8
    b3a6:	46bd      	mov	sp, r7
    b3a8:	bd80      	pop	{r7, pc}
    b3aa:	bf00      	nop
    b3ac:	0000ad09 	.word	0x0000ad09

0000b3b0 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    b3b0:	b580      	push	{r7, lr}
    b3b2:	b082      	sub	sp, #8
    b3b4:	af00      	add	r7, sp, #0
    b3b6:	6078      	str	r0, [r7, #4]
    b3b8:	460b      	mov	r3, r1
    b3ba:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    b3bc:	687b      	ldr	r3, [r7, #4]
    b3be:	887a      	ldrh	r2, [r7, #2]
    b3c0:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b3c2:	2104      	movs	r1, #4
    b3c4:	6878      	ldr	r0, [r7, #4]
    b3c6:	4b03      	ldr	r3, [pc, #12]	; (b3d4 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    b3c8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b3ca:	bf00      	nop
    b3cc:	3708      	adds	r7, #8
    b3ce:	46bd      	mov	sp, r7
    b3d0:	bd80      	pop	{r7, pc}
    b3d2:	bf00      	nop
    b3d4:	0000ad09 	.word	0x0000ad09

0000b3d8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    b3d8:	b4b0      	push	{r4, r5, r7}
    b3da:	b08d      	sub	sp, #52	; 0x34
    b3dc:	af00      	add	r7, sp, #0
    b3de:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    b3e0:	4b13      	ldr	r3, [pc, #76]	; (b430 <_sercom_get_hardware_index+0x58>)
    b3e2:	f107 040c 	add.w	r4, r7, #12
    b3e6:	461d      	mov	r5, r3
    b3e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b3ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b3ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b3f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b3f4:	2300      	movs	r3, #0
    b3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    b3f8:	e010      	b.n	b41c <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    b3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3fc:	009b      	lsls	r3, r3, #2
    b3fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b402:	4413      	add	r3, r2
    b404:	f853 3c24 	ldr.w	r3, [r3, #-36]
    b408:	461a      	mov	r2, r3
    b40a:	687b      	ldr	r3, [r7, #4]
    b40c:	429a      	cmp	r2, r3
    b40e:	d102      	bne.n	b416 <_sercom_get_hardware_index+0x3e>
			return i;
    b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b412:	b2db      	uxtb	r3, r3
    b414:	e006      	b.n	b424 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b418:	3301      	adds	r3, #1
    b41a:	62fb      	str	r3, [r7, #44]	; 0x2c
    b41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b41e:	2b07      	cmp	r3, #7
    b420:	d9eb      	bls.n	b3fa <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    b422:	2300      	movs	r3, #0
}
    b424:	4618      	mov	r0, r3
    b426:	3734      	adds	r7, #52	; 0x34
    b428:	46bd      	mov	sp, r7
    b42a:	bcb0      	pop	{r4, r5, r7}
    b42c:	4770      	bx	lr
    b42e:	bf00      	nop
    b430:	00020cd4 	.word	0x00020cd4

0000b434 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    b434:	b480      	push	{r7}
    b436:	b083      	sub	sp, #12
    b438:	af00      	add	r7, sp, #0
    b43a:	6078      	str	r0, [r7, #4]
    b43c:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    b43e:	687b      	ldr	r3, [r7, #4]
    b440:	4a05      	ldr	r2, [pc, #20]	; (b458 <_sercom_init_irq_param+0x24>)
    b442:	4293      	cmp	r3, r2
    b444:	d102      	bne.n	b44c <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    b446:	4a05      	ldr	r2, [pc, #20]	; (b45c <_sercom_init_irq_param+0x28>)
    b448:	683b      	ldr	r3, [r7, #0]
    b44a:	6013      	str	r3, [r2, #0]
	}
}
    b44c:	bf00      	nop
    b44e:	370c      	adds	r7, #12
    b450:	46bd      	mov	sp, r7
    b452:	f85d 7b04 	ldr.w	r7, [sp], #4
    b456:	4770      	bx	lr
    b458:	43000c00 	.word	0x43000c00
    b45c:	200088b4 	.word	0x200088b4

0000b460 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    b460:	b580      	push	{r7, lr}
    b462:	b084      	sub	sp, #16
    b464:	af00      	add	r7, sp, #0
    b466:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    b468:	6878      	ldr	r0, [r7, #4]
    b46a:	4b13      	ldr	r3, [pc, #76]	; (b4b8 <_get_i2cm_index+0x58>)
    b46c:	4798      	blx	r3
    b46e:	4603      	mov	r3, r0
    b470:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    b472:	2300      	movs	r3, #0
    b474:	73fb      	strb	r3, [r7, #15]
    b476:	e010      	b.n	b49a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    b478:	7bfa      	ldrb	r2, [r7, #15]
    b47a:	4910      	ldr	r1, [pc, #64]	; (b4bc <_get_i2cm_index+0x5c>)
    b47c:	4613      	mov	r3, r2
    b47e:	005b      	lsls	r3, r3, #1
    b480:	4413      	add	r3, r2
    b482:	00db      	lsls	r3, r3, #3
    b484:	440b      	add	r3, r1
    b486:	781b      	ldrb	r3, [r3, #0]
    b488:	7bba      	ldrb	r2, [r7, #14]
    b48a:	429a      	cmp	r2, r3
    b48c:	d102      	bne.n	b494 <_get_i2cm_index+0x34>
			return i;
    b48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b492:	e00d      	b.n	b4b0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    b494:	7bfb      	ldrb	r3, [r7, #15]
    b496:	3301      	adds	r3, #1
    b498:	73fb      	strb	r3, [r7, #15]
    b49a:	7bfb      	ldrb	r3, [r7, #15]
    b49c:	2b02      	cmp	r3, #2
    b49e:	d9eb      	bls.n	b478 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    b4a0:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    b4a4:	4906      	ldr	r1, [pc, #24]	; (b4c0 <_get_i2cm_index+0x60>)
    b4a6:	2000      	movs	r0, #0
    b4a8:	4b06      	ldr	r3, [pc, #24]	; (b4c4 <_get_i2cm_index+0x64>)
    b4aa:	4798      	blx	r3
	return -1;
    b4ac:	f04f 33ff 	mov.w	r3, #4294967295
}
    b4b0:	4618      	mov	r0, r3
    b4b2:	3710      	adds	r7, #16
    b4b4:	46bd      	mov	sp, r7
    b4b6:	bd80      	pop	{r7, pc}
    b4b8:	0000b3d9 	.word	0x0000b3d9
    b4bc:	2000007c 	.word	0x2000007c
    b4c0:	00020cb8 	.word	0x00020cb8
    b4c4:	000080d1 	.word	0x000080d1

0000b4c8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    b4c8:	b580      	push	{r7, lr}
    b4ca:	b082      	sub	sp, #8
    b4cc:	af00      	add	r7, sp, #0
    b4ce:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    b4d0:	2103      	movs	r1, #3
    b4d2:	6878      	ldr	r0, [r7, #4]
    b4d4:	4b02      	ldr	r3, [pc, #8]	; (b4e0 <_sercom_i2c_send_stop+0x18>)
    b4d6:	4798      	blx	r3
}
    b4d8:	bf00      	nop
    b4da:	3708      	adds	r7, #8
    b4dc:	46bd      	mov	sp, r7
    b4de:	bd80      	pop	{r7, pc}
    b4e0:	0000b155 	.word	0x0000b155

0000b4e4 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    b4e4:	b590      	push	{r4, r7, lr}
    b4e6:	b087      	sub	sp, #28
    b4e8:	af00      	add	r7, sp, #0
    b4ea:	60f8      	str	r0, [r7, #12]
    b4ec:	60b9      	str	r1, [r7, #8]
    b4ee:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b4f0:	68f8      	ldr	r0, [r7, #12]
    b4f2:	4b7d      	ldr	r3, [pc, #500]	; (b6e8 <_sercom_i2c_sync_analyse_flags+0x204>)
    b4f4:	4798      	blx	r3
    b4f6:	4603      	mov	r3, r0
    b4f8:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    b4fa:	68f8      	ldr	r0, [r7, #12]
    b4fc:	4b7b      	ldr	r3, [pc, #492]	; (b6ec <_sercom_i2c_sync_analyse_flags+0x208>)
    b4fe:	4798      	blx	r3
    b500:	4603      	mov	r3, r0
    b502:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    b504:	68bb      	ldr	r3, [r7, #8]
    b506:	f003 0301 	and.w	r3, r3, #1
    b50a:	2b00      	cmp	r3, #0
    b50c:	f000 8095 	beq.w	b63a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    b510:	8a7b      	ldrh	r3, [r7, #18]
    b512:	f003 0302 	and.w	r3, r3, #2
    b516:	2b00      	cmp	r3, #0
    b518:	d01d      	beq.n	b556 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    b51a:	68f8      	ldr	r0, [r7, #12]
    b51c:	4b74      	ldr	r3, [pc, #464]	; (b6f0 <_sercom_i2c_sync_analyse_flags+0x20c>)
    b51e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    b520:	687b      	ldr	r3, [r7, #4]
    b522:	885b      	ldrh	r3, [r3, #2]
    b524:	b29b      	uxth	r3, r3
    b526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    b52a:	b29a      	uxth	r2, r3
    b52c:	687b      	ldr	r3, [r7, #4]
    b52e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    b530:	687b      	ldr	r3, [r7, #4]
    b532:	885b      	ldrh	r3, [r3, #2]
    b534:	b29b      	uxth	r3, r3
    b536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b53a:	b29a      	uxth	r2, r3
    b53c:	687b      	ldr	r3, [r7, #4]
    b53e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    b540:	8a7b      	ldrh	r3, [r7, #18]
    b542:	f003 0301 	and.w	r3, r3, #1
    b546:	2b00      	cmp	r3, #0
    b548:	d002      	beq.n	b550 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    b54a:	f06f 0304 	mvn.w	r3, #4
    b54e:	e0c6      	b.n	b6de <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    b550:	f06f 0303 	mvn.w	r3, #3
    b554:	e0c3      	b.n	b6de <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    b556:	8a7b      	ldrh	r3, [r7, #18]
    b558:	f003 0304 	and.w	r3, r3, #4
    b55c:	2b00      	cmp	r3, #0
    b55e:	d01f      	beq.n	b5a0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    b560:	687b      	ldr	r3, [r7, #4]
    b562:	685b      	ldr	r3, [r3, #4]
    b564:	2b00      	cmp	r3, #0
    b566:	dd07      	ble.n	b578 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    b568:	687b      	ldr	r3, [r7, #4]
    b56a:	885b      	ldrh	r3, [r3, #2]
    b56c:	b29b      	uxth	r3, r3
    b56e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    b572:	b29a      	uxth	r2, r3
    b574:	687b      	ldr	r3, [r7, #4]
    b576:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    b578:	687b      	ldr	r3, [r7, #4]
    b57a:	885b      	ldrh	r3, [r3, #2]
    b57c:	b29b      	uxth	r3, r3
    b57e:	b21b      	sxth	r3, r3
    b580:	2b00      	cmp	r3, #0
    b582:	da02      	bge.n	b58a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    b584:	68f8      	ldr	r0, [r7, #12]
    b586:	4b5b      	ldr	r3, [pc, #364]	; (b6f4 <_sercom_i2c_sync_analyse_flags+0x210>)
    b588:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b58a:	687b      	ldr	r3, [r7, #4]
    b58c:	885b      	ldrh	r3, [r3, #2]
    b58e:	b29b      	uxth	r3, r3
    b590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b594:	b29a      	uxth	r2, r3
    b596:	687b      	ldr	r3, [r7, #4]
    b598:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    b59a:	f06f 0301 	mvn.w	r3, #1
    b59e:	e09e      	b.n	b6de <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    b5a0:	687b      	ldr	r3, [r7, #4]
    b5a2:	885b      	ldrh	r3, [r3, #2]
    b5a4:	b29b      	uxth	r3, r3
    b5a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b5aa:	2b00      	cmp	r3, #0
    b5ac:	d01c      	beq.n	b5e8 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    b5ae:	687b      	ldr	r3, [r7, #4]
    b5b0:	881b      	ldrh	r3, [r3, #0]
    b5b2:	121b      	asrs	r3, r3, #8
    b5b4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b5b6:	f003 0406 	and.w	r4, r3, #6
    b5ba:	68f8      	ldr	r0, [r7, #12]
    b5bc:	4b4e      	ldr	r3, [pc, #312]	; (b6f8 <_sercom_i2c_sync_analyse_flags+0x214>)
    b5be:	4798      	blx	r3
    b5c0:	4603      	mov	r3, r0
    b5c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b5c6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    b5c8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    b5cc:	4619      	mov	r1, r3
    b5ce:	68f8      	ldr	r0, [r7, #12]
    b5d0:	4b4a      	ldr	r3, [pc, #296]	; (b6fc <_sercom_i2c_sync_analyse_flags+0x218>)
    b5d2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    b5d4:	687b      	ldr	r3, [r7, #4]
    b5d6:	885b      	ldrh	r3, [r3, #2]
    b5d8:	b29b      	uxth	r3, r3
    b5da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    b5de:	b29a      	uxth	r2, r3
    b5e0:	687b      	ldr	r3, [r7, #4]
    b5e2:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    b5e4:	2300      	movs	r3, #0
    b5e6:	e07a      	b.n	b6de <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    b5e8:	687b      	ldr	r3, [r7, #4]
    b5ea:	685b      	ldr	r3, [r3, #4]
    b5ec:	2b00      	cmp	r3, #0
    b5ee:	d111      	bne.n	b614 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    b5f0:	687b      	ldr	r3, [r7, #4]
    b5f2:	885b      	ldrh	r3, [r3, #2]
    b5f4:	b29b      	uxth	r3, r3
    b5f6:	b21b      	sxth	r3, r3
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	da02      	bge.n	b602 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    b5fc:	68f8      	ldr	r0, [r7, #12]
    b5fe:	4b3d      	ldr	r3, [pc, #244]	; (b6f4 <_sercom_i2c_sync_analyse_flags+0x210>)
    b600:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b602:	687b      	ldr	r3, [r7, #4]
    b604:	885b      	ldrh	r3, [r3, #2]
    b606:	b29b      	uxth	r3, r3
    b608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b60c:	b29a      	uxth	r2, r3
    b60e:	687b      	ldr	r3, [r7, #4]
    b610:	805a      	strh	r2, [r3, #2]
    b612:	e010      	b.n	b636 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    b614:	687b      	ldr	r3, [r7, #4]
    b616:	689b      	ldr	r3, [r3, #8]
    b618:	781b      	ldrb	r3, [r3, #0]
    b61a:	4619      	mov	r1, r3
    b61c:	68f8      	ldr	r0, [r7, #12]
    b61e:	4b38      	ldr	r3, [pc, #224]	; (b700 <_sercom_i2c_sync_analyse_flags+0x21c>)
    b620:	4798      	blx	r3
				msg->buffer++;
    b622:	687b      	ldr	r3, [r7, #4]
    b624:	689b      	ldr	r3, [r3, #8]
    b626:	1c5a      	adds	r2, r3, #1
    b628:	687b      	ldr	r3, [r7, #4]
    b62a:	609a      	str	r2, [r3, #8]
				msg->len--;
    b62c:	687b      	ldr	r3, [r7, #4]
    b62e:	685b      	ldr	r3, [r3, #4]
    b630:	1e5a      	subs	r2, r3, #1
    b632:	687b      	ldr	r3, [r7, #4]
    b634:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    b636:	2300      	movs	r3, #0
    b638:	e051      	b.n	b6de <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    b63a:	68bb      	ldr	r3, [r7, #8]
    b63c:	f003 0302 	and.w	r3, r3, #2
    b640:	2b00      	cmp	r3, #0
    b642:	d04b      	beq.n	b6dc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    b644:	687b      	ldr	r3, [r7, #4]
    b646:	685b      	ldr	r3, [r3, #4]
    b648:	2b00      	cmp	r3, #0
    b64a:	d041      	beq.n	b6d0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    b64c:	8a7b      	ldrh	r3, [r7, #18]
    b64e:	f003 0304 	and.w	r3, r3, #4
    b652:	2b00      	cmp	r3, #0
    b654:	d13c      	bne.n	b6d0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    b656:	687b      	ldr	r3, [r7, #4]
    b658:	685b      	ldr	r3, [r3, #4]
    b65a:	1e5a      	subs	r2, r3, #1
    b65c:	687b      	ldr	r3, [r7, #4]
    b65e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    b660:	687b      	ldr	r3, [r7, #4]
    b662:	685b      	ldr	r3, [r3, #4]
    b664:	2b00      	cmp	r3, #0
    b666:	d102      	bne.n	b66e <_sercom_i2c_sync_analyse_flags+0x18a>
    b668:	697b      	ldr	r3, [r7, #20]
    b66a:	2b00      	cmp	r3, #0
    b66c:	d006      	beq.n	b67c <_sercom_i2c_sync_analyse_flags+0x198>
    b66e:	687b      	ldr	r3, [r7, #4]
    b670:	685b      	ldr	r3, [r3, #4]
    b672:	2b01      	cmp	r3, #1
    b674:	d105      	bne.n	b682 <_sercom_i2c_sync_analyse_flags+0x19e>
    b676:	697b      	ldr	r3, [r7, #20]
    b678:	2b00      	cmp	r3, #0
    b67a:	d002      	beq.n	b682 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b67c:	68f8      	ldr	r0, [r7, #12]
    b67e:	4b21      	ldr	r3, [pc, #132]	; (b704 <_sercom_i2c_sync_analyse_flags+0x220>)
    b680:	4798      	blx	r3
			}

			if (msg->len == 0) {
    b682:	687b      	ldr	r3, [r7, #4]
    b684:	685b      	ldr	r3, [r3, #4]
    b686:	2b00      	cmp	r3, #0
    b688:	d113      	bne.n	b6b2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    b68a:	687b      	ldr	r3, [r7, #4]
    b68c:	885b      	ldrh	r3, [r3, #2]
    b68e:	b29b      	uxth	r3, r3
    b690:	b21b      	sxth	r3, r3
    b692:	2b00      	cmp	r3, #0
    b694:	da05      	bge.n	b6a2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    b696:	68f8      	ldr	r0, [r7, #12]
    b698:	4b1b      	ldr	r3, [pc, #108]	; (b708 <_sercom_i2c_sync_analyse_flags+0x224>)
    b69a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    b69c:	68f8      	ldr	r0, [r7, #12]
    b69e:	4b15      	ldr	r3, [pc, #84]	; (b6f4 <_sercom_i2c_sync_analyse_flags+0x210>)
    b6a0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b6a2:	687b      	ldr	r3, [r7, #4]
    b6a4:	885b      	ldrh	r3, [r3, #2]
    b6a6:	b29b      	uxth	r3, r3
    b6a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b6ac:	b29a      	uxth	r2, r3
    b6ae:	687b      	ldr	r3, [r7, #4]
    b6b0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    b6b2:	687b      	ldr	r3, [r7, #4]
    b6b4:	689c      	ldr	r4, [r3, #8]
    b6b6:	1c62      	adds	r2, r4, #1
    b6b8:	687b      	ldr	r3, [r7, #4]
    b6ba:	609a      	str	r2, [r3, #8]
    b6bc:	68f8      	ldr	r0, [r7, #12]
    b6be:	4b13      	ldr	r3, [pc, #76]	; (b70c <_sercom_i2c_sync_analyse_flags+0x228>)
    b6c0:	4798      	blx	r3
    b6c2:	4603      	mov	r3, r0
    b6c4:	b2db      	uxtb	r3, r3
    b6c6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    b6c8:	68f8      	ldr	r0, [r7, #12]
    b6ca:	4b11      	ldr	r3, [pc, #68]	; (b710 <_sercom_i2c_sync_analyse_flags+0x22c>)
    b6cc:	4798      	blx	r3
    b6ce:	e005      	b.n	b6dc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    b6d0:	68f8      	ldr	r0, [r7, #12]
    b6d2:	4b0f      	ldr	r3, [pc, #60]	; (b710 <_sercom_i2c_sync_analyse_flags+0x22c>)
    b6d4:	4798      	blx	r3
			return I2C_NACK;
    b6d6:	f06f 0301 	mvn.w	r3, #1
    b6da:	e000      	b.n	b6de <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    b6dc:	2300      	movs	r3, #0
}
    b6de:	4618      	mov	r0, r3
    b6e0:	371c      	adds	r7, #28
    b6e2:	46bd      	mov	sp, r7
    b6e4:	bd90      	pop	{r4, r7, pc}
    b6e6:	bf00      	nop
    b6e8:	0000af55 	.word	0x0000af55
    b6ec:	0000b38d 	.word	0x0000b38d
    b6f0:	0000ada1 	.word	0x0000ada1
    b6f4:	0000b4c9 	.word	0x0000b4c9
    b6f8:	0000b26d 	.word	0x0000b26d
    b6fc:	0000b249 	.word	0x0000b249
    b700:	0000b2a9 	.word	0x0000b2a9
    b704:	0000b105 	.word	0x0000b105
    b708:	0000b0dd 	.word	0x0000b0dd
    b70c:	0000b2cd 	.word	0x0000b2cd
    b710:	0000adbb 	.word	0x0000adbb

0000b714 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    b714:	b580      	push	{r7, lr}
    b716:	b086      	sub	sp, #24
    b718:	af00      	add	r7, sp, #0
    b71a:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    b71c:	687b      	ldr	r3, [r7, #4]
    b71e:	691b      	ldr	r3, [r3, #16]
    b720:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    b722:	6938      	ldr	r0, [r7, #16]
    b724:	4b37      	ldr	r3, [pc, #220]	; (b804 <_sercom_i2c_m_irq_handler+0xf0>)
    b726:	4798      	blx	r3
    b728:	4603      	mov	r3, r0
    b72a:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    b72c:	2300      	movs	r3, #0
    b72e:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    b730:	687b      	ldr	r3, [r7, #4]
    b732:	2b00      	cmp	r3, #0
    b734:	bf14      	ite	ne
    b736:	2301      	movne	r3, #1
    b738:	2300      	moveq	r3, #0
    b73a:	b2db      	uxtb	r3, r3
    b73c:	f240 421e 	movw	r2, #1054	; 0x41e
    b740:	4931      	ldr	r1, [pc, #196]	; (b808 <_sercom_i2c_m_irq_handler+0xf4>)
    b742:	4618      	mov	r0, r3
    b744:	4b31      	ldr	r3, [pc, #196]	; (b80c <_sercom_i2c_m_irq_handler+0xf8>)
    b746:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b748:	687b      	ldr	r3, [r7, #4]
    b74a:	691b      	ldr	r3, [r3, #16]
    b74c:	2b00      	cmp	r3, #0
    b74e:	bf14      	ite	ne
    b750:	2301      	movne	r3, #1
    b752:	2300      	moveq	r3, #0
    b754:	b2db      	uxtb	r3, r3
    b756:	f240 421f 	movw	r2, #1055	; 0x41f
    b75a:	492b      	ldr	r1, [pc, #172]	; (b808 <_sercom_i2c_m_irq_handler+0xf4>)
    b75c:	4618      	mov	r0, r3
    b75e:	4b2b      	ldr	r3, [pc, #172]	; (b80c <_sercom_i2c_m_irq_handler+0xf8>)
    b760:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    b762:	bf00      	nop
    b764:	68fb      	ldr	r3, [r7, #12]
    b766:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b76a:	2b00      	cmp	r3, #0
    b76c:	d126      	bne.n	b7bc <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    b76e:	687b      	ldr	r3, [r7, #4]
    b770:	461a      	mov	r2, r3
    b772:	68f9      	ldr	r1, [r7, #12]
    b774:	6938      	ldr	r0, [r7, #16]
    b776:	4b26      	ldr	r3, [pc, #152]	; (b810 <_sercom_i2c_m_irq_handler+0xfc>)
    b778:	4798      	blx	r3
    b77a:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    b77c:	697b      	ldr	r3, [r7, #20]
    b77e:	2b00      	cmp	r3, #0
    b780:	d11b      	bne.n	b7ba <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    b782:	68fb      	ldr	r3, [r7, #12]
    b784:	f003 0301 	and.w	r3, r3, #1
    b788:	2b00      	cmp	r3, #0
    b78a:	d008      	beq.n	b79e <_sercom_i2c_m_irq_handler+0x8a>
    b78c:	687b      	ldr	r3, [r7, #4]
    b78e:	699b      	ldr	r3, [r3, #24]
    b790:	2b00      	cmp	r3, #0
    b792:	d004      	beq.n	b79e <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    b794:	687b      	ldr	r3, [r7, #4]
    b796:	699b      	ldr	r3, [r3, #24]
    b798:	6878      	ldr	r0, [r7, #4]
    b79a:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    b79c:	e02e      	b.n	b7fc <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    b79e:	68fb      	ldr	r3, [r7, #12]
    b7a0:	f003 0302 	and.w	r3, r3, #2
    b7a4:	2b00      	cmp	r3, #0
    b7a6:	d029      	beq.n	b7fc <_sercom_i2c_m_irq_handler+0xe8>
    b7a8:	687b      	ldr	r3, [r7, #4]
    b7aa:	69db      	ldr	r3, [r3, #28]
    b7ac:	2b00      	cmp	r3, #0
    b7ae:	d025      	beq.n	b7fc <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    b7b0:	687b      	ldr	r3, [r7, #4]
    b7b2:	69db      	ldr	r3, [r3, #28]
    b7b4:	6878      	ldr	r0, [r7, #4]
    b7b6:	4798      	blx	r3
		return;
    b7b8:	e020      	b.n	b7fc <_sercom_i2c_m_irq_handler+0xe8>
			break;
    b7ba:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b7bc:	687b      	ldr	r3, [r7, #4]
    b7be:	885b      	ldrh	r3, [r3, #2]
    b7c0:	b29b      	uxth	r3, r3
    b7c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b7c6:	b29a      	uxth	r2, r3
    b7c8:	687b      	ldr	r3, [r7, #4]
    b7ca:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    b7cc:	687b      	ldr	r3, [r7, #4]
    b7ce:	695b      	ldr	r3, [r3, #20]
    b7d0:	2b00      	cmp	r3, #0
    b7d2:	d014      	beq.n	b7fe <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    b7d4:	697b      	ldr	r3, [r7, #20]
    b7d6:	2b00      	cmp	r3, #0
    b7d8:	d005      	beq.n	b7e6 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    b7da:	687b      	ldr	r3, [r7, #4]
    b7dc:	695b      	ldr	r3, [r3, #20]
    b7de:	6979      	ldr	r1, [r7, #20]
    b7e0:	6878      	ldr	r0, [r7, #4]
    b7e2:	4798      	blx	r3
    b7e4:	e005      	b.n	b7f2 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    b7e6:	687b      	ldr	r3, [r7, #4]
    b7e8:	695b      	ldr	r3, [r3, #20]
    b7ea:	f06f 0104 	mvn.w	r1, #4
    b7ee:	6878      	ldr	r0, [r7, #4]
    b7f0:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    b7f2:	2180      	movs	r1, #128	; 0x80
    b7f4:	6938      	ldr	r0, [r7, #16]
    b7f6:	4b07      	ldr	r3, [pc, #28]	; (b814 <_sercom_i2c_m_irq_handler+0x100>)
    b7f8:	4798      	blx	r3
    b7fa:	e000      	b.n	b7fe <_sercom_i2c_m_irq_handler+0xea>
		return;
    b7fc:	bf00      	nop
	}
}
    b7fe:	3718      	adds	r7, #24
    b800:	46bd      	mov	sp, r7
    b802:	bd80      	pop	{r7, pc}
    b804:	0000add5 	.word	0x0000add5
    b808:	00020cb8 	.word	0x00020cb8
    b80c:	000080d1 	.word	0x000080d1
    b810:	0000b4e5 	.word	0x0000b4e5
    b814:	0000adef 	.word	0x0000adef

0000b818 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    b818:	b580      	push	{r7, lr}
    b81a:	b082      	sub	sp, #8
    b81c:	af00      	add	r7, sp, #0
    b81e:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    b820:	687b      	ldr	r3, [r7, #4]
    b822:	2b00      	cmp	r3, #0
    b824:	bf14      	ite	ne
    b826:	2301      	movne	r3, #1
    b828:	2300      	moveq	r3, #0
    b82a:	b2db      	uxtb	r3, r3
    b82c:	f240 4244 	movw	r2, #1092	; 0x444
    b830:	4906      	ldr	r1, [pc, #24]	; (b84c <_i2c_m_async_enable+0x34>)
    b832:	4618      	mov	r0, r3
    b834:	4b06      	ldr	r3, [pc, #24]	; (b850 <_i2c_m_async_enable+0x38>)
    b836:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    b838:	687b      	ldr	r3, [r7, #4]
    b83a:	691b      	ldr	r3, [r3, #16]
    b83c:	4618      	mov	r0, r3
    b83e:	4b05      	ldr	r3, [pc, #20]	; (b854 <_i2c_m_async_enable+0x3c>)
    b840:	4798      	blx	r3
    b842:	4603      	mov	r3, r0
}
    b844:	4618      	mov	r0, r3
    b846:	3708      	adds	r7, #8
    b848:	46bd      	mov	sp, r7
    b84a:	bd80      	pop	{r7, pc}
    b84c:	00020cb8 	.word	0x00020cb8
    b850:	000080d1 	.word	0x000080d1
    b854:	0000bed9 	.word	0x0000bed9

0000b858 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    b858:	b580      	push	{r7, lr}
    b85a:	b082      	sub	sp, #8
    b85c:	af00      	add	r7, sp, #0
    b85e:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    b860:	6878      	ldr	r0, [r7, #4]
    b862:	4b05      	ldr	r3, [pc, #20]	; (b878 <_sercom_get_irq_num+0x20>)
    b864:	4798      	blx	r3
    b866:	4603      	mov	r3, r0
    b868:	009b      	lsls	r3, r3, #2
    b86a:	b2db      	uxtb	r3, r3
    b86c:	332e      	adds	r3, #46	; 0x2e
    b86e:	b2db      	uxtb	r3, r3
}
    b870:	4618      	mov	r0, r3
    b872:	3708      	adds	r7, #8
    b874:	46bd      	mov	sp, r7
    b876:	bd80      	pop	{r7, pc}
    b878:	0000b3d9 	.word	0x0000b3d9

0000b87c <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    b87c:	b580      	push	{r7, lr}
    b87e:	b086      	sub	sp, #24
    b880:	af00      	add	r7, sp, #0
    b882:	6078      	str	r0, [r7, #4]
    b884:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    b886:	687b      	ldr	r3, [r7, #4]
    b888:	2b00      	cmp	r3, #0
    b88a:	bf14      	ite	ne
    b88c:	2301      	movne	r3, #1
    b88e:	2300      	moveq	r3, #0
    b890:	b2db      	uxtb	r3, r3
    b892:	f240 4292 	movw	r2, #1170	; 0x492
    b896:	491d      	ldr	r1, [pc, #116]	; (b90c <_i2c_m_async_init+0x90>)
    b898:	4618      	mov	r0, r3
    b89a:	4b1d      	ldr	r3, [pc, #116]	; (b910 <_i2c_m_async_init+0x94>)
    b89c:	4798      	blx	r3

	i2c_dev->hw = hw;
    b89e:	687b      	ldr	r3, [r7, #4]
    b8a0:	683a      	ldr	r2, [r7, #0]
    b8a2:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    b8a4:	687b      	ldr	r3, [r7, #4]
    b8a6:	6839      	ldr	r1, [r7, #0]
    b8a8:	4618      	mov	r0, r3
    b8aa:	4b1a      	ldr	r3, [pc, #104]	; (b914 <_i2c_m_async_init+0x98>)
    b8ac:	4798      	blx	r3
    b8ae:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    b8b0:	68fb      	ldr	r3, [r7, #12]
    b8b2:	2b00      	cmp	r3, #0
    b8b4:	d001      	beq.n	b8ba <_i2c_m_async_init+0x3e>
		return init_status;
    b8b6:	68fb      	ldr	r3, [r7, #12]
    b8b8:	e024      	b.n	b904 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    b8ba:	6879      	ldr	r1, [r7, #4]
    b8bc:	6838      	ldr	r0, [r7, #0]
    b8be:	4b16      	ldr	r3, [pc, #88]	; (b918 <_i2c_m_async_init+0x9c>)
    b8c0:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    b8c2:	6838      	ldr	r0, [r7, #0]
    b8c4:	4b15      	ldr	r3, [pc, #84]	; (b91c <_i2c_m_async_init+0xa0>)
    b8c6:	4798      	blx	r3
    b8c8:	4603      	mov	r3, r0
    b8ca:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b8cc:	2300      	movs	r3, #0
    b8ce:	613b      	str	r3, [r7, #16]
    b8d0:	e014      	b.n	b8fc <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    b8d2:	7dfb      	ldrb	r3, [r7, #23]
    b8d4:	b21b      	sxth	r3, r3
    b8d6:	4618      	mov	r0, r3
    b8d8:	4b11      	ldr	r3, [pc, #68]	; (b920 <_i2c_m_async_init+0xa4>)
    b8da:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    b8dc:	7dfb      	ldrb	r3, [r7, #23]
    b8de:	b21b      	sxth	r3, r3
    b8e0:	4618      	mov	r0, r3
    b8e2:	4b10      	ldr	r3, [pc, #64]	; (b924 <_i2c_m_async_init+0xa8>)
    b8e4:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    b8e6:	7dfb      	ldrb	r3, [r7, #23]
    b8e8:	b21b      	sxth	r3, r3
    b8ea:	4618      	mov	r0, r3
    b8ec:	4b0e      	ldr	r3, [pc, #56]	; (b928 <_i2c_m_async_init+0xac>)
    b8ee:	4798      	blx	r3
		irq++;
    b8f0:	7dfb      	ldrb	r3, [r7, #23]
    b8f2:	3301      	adds	r3, #1
    b8f4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b8f6:	693b      	ldr	r3, [r7, #16]
    b8f8:	3301      	adds	r3, #1
    b8fa:	613b      	str	r3, [r7, #16]
    b8fc:	693b      	ldr	r3, [r7, #16]
    b8fe:	2b03      	cmp	r3, #3
    b900:	d9e7      	bls.n	b8d2 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    b902:	2300      	movs	r3, #0
}
    b904:	4618      	mov	r0, r3
    b906:	3718      	adds	r7, #24
    b908:	46bd      	mov	sp, r7
    b90a:	bd80      	pop	{r7, pc}
    b90c:	00020cb8 	.word	0x00020cb8
    b910:	000080d1 	.word	0x000080d1
    b914:	0000bf65 	.word	0x0000bf65
    b918:	0000b435 	.word	0x0000b435
    b91c:	0000b859 	.word	0x0000b859
    b920:	0000ac89 	.word	0x0000ac89
    b924:	0000accd 	.word	0x0000accd
    b928:	0000ac4d 	.word	0x0000ac4d

0000b92c <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    b92c:	b590      	push	{r4, r7, lr}
    b92e:	b087      	sub	sp, #28
    b930:	af00      	add	r7, sp, #0
    b932:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    b934:	687b      	ldr	r3, [r7, #4]
    b936:	691b      	ldr	r3, [r3, #16]
    b938:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    b93a:	687b      	ldr	r3, [r7, #4]
    b93c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b93e:	6978      	ldr	r0, [r7, #20]
    b940:	4b33      	ldr	r3, [pc, #204]	; (ba10 <_sercom_i2c_send_address+0xe4>)
    b942:	4798      	blx	r3
    b944:	4603      	mov	r3, r0
    b946:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    b948:	687b      	ldr	r3, [r7, #4]
    b94a:	2b00      	cmp	r3, #0
    b94c:	bf14      	ite	ne
    b94e:	2301      	movne	r3, #1
    b950:	2300      	moveq	r3, #0
    b952:	b2db      	uxtb	r3, r3
    b954:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    b958:	492e      	ldr	r1, [pc, #184]	; (ba14 <_sercom_i2c_send_address+0xe8>)
    b95a:	4618      	mov	r0, r3
    b95c:	4b2e      	ldr	r3, [pc, #184]	; (ba18 <_sercom_i2c_send_address+0xec>)
    b95e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    b960:	693b      	ldr	r3, [r7, #16]
    b962:	685b      	ldr	r3, [r3, #4]
    b964:	2b01      	cmp	r3, #1
    b966:	d106      	bne.n	b976 <_sercom_i2c_send_address+0x4a>
    b968:	68fb      	ldr	r3, [r7, #12]
    b96a:	2b00      	cmp	r3, #0
    b96c:	d003      	beq.n	b976 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b96e:	6978      	ldr	r0, [r7, #20]
    b970:	4b2a      	ldr	r3, [pc, #168]	; (ba1c <_sercom_i2c_send_address+0xf0>)
    b972:	4798      	blx	r3
    b974:	e002      	b.n	b97c <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    b976:	6978      	ldr	r0, [r7, #20]
    b978:	4b29      	ldr	r3, [pc, #164]	; (ba20 <_sercom_i2c_send_address+0xf4>)
    b97a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    b97c:	693b      	ldr	r3, [r7, #16]
    b97e:	881b      	ldrh	r3, [r3, #0]
    b980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b984:	2b00      	cmp	r3, #0
    b986:	d022      	beq.n	b9ce <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    b988:	693b      	ldr	r3, [r7, #16]
    b98a:	885b      	ldrh	r3, [r3, #2]
    b98c:	b29b      	uxth	r3, r3
    b98e:	f003 0301 	and.w	r3, r3, #1
    b992:	2b00      	cmp	r3, #0
    b994:	d007      	beq.n	b9a6 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    b996:	693b      	ldr	r3, [r7, #16]
    b998:	885b      	ldrh	r3, [r3, #2]
    b99a:	b29b      	uxth	r3, r3
    b99c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    b9a0:	b29a      	uxth	r2, r3
    b9a2:	693b      	ldr	r3, [r7, #16]
    b9a4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    b9a6:	693b      	ldr	r3, [r7, #16]
    b9a8:	881b      	ldrh	r3, [r3, #0]
    b9aa:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b9ac:	f240 74fe 	movw	r4, #2046	; 0x7fe
    b9b0:	401c      	ands	r4, r3
    b9b2:	6978      	ldr	r0, [r7, #20]
    b9b4:	4b1b      	ldr	r3, [pc, #108]	; (ba24 <_sercom_i2c_send_address+0xf8>)
    b9b6:	4798      	blx	r3
    b9b8:	4603      	mov	r3, r0
    b9ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b9be:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    b9c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b9c4:	4619      	mov	r1, r3
    b9c6:	6978      	ldr	r0, [r7, #20]
    b9c8:	4b17      	ldr	r3, [pc, #92]	; (ba28 <_sercom_i2c_send_address+0xfc>)
    b9ca:	4798      	blx	r3
    b9cc:	e01a      	b.n	ba04 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    b9ce:	693b      	ldr	r3, [r7, #16]
    b9d0:	881b      	ldrh	r3, [r3, #0]
    b9d2:	005b      	lsls	r3, r3, #1
    b9d4:	b2db      	uxtb	r3, r3
    b9d6:	693a      	ldr	r2, [r7, #16]
    b9d8:	8852      	ldrh	r2, [r2, #2]
    b9da:	b292      	uxth	r2, r2
    b9dc:	f002 0201 	and.w	r2, r2, #1
    b9e0:	2a00      	cmp	r2, #0
    b9e2:	bf14      	ite	ne
    b9e4:	2201      	movne	r2, #1
    b9e6:	2200      	moveq	r2, #0
    b9e8:	b2d2      	uxtb	r2, r2
    b9ea:	4313      	orrs	r3, r2
    b9ec:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b9ee:	6978      	ldr	r0, [r7, #20]
    b9f0:	4b0c      	ldr	r3, [pc, #48]	; (ba24 <_sercom_i2c_send_address+0xf8>)
    b9f2:	4798      	blx	r3
    b9f4:	4603      	mov	r3, r0
    b9f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    b9fa:	4323      	orrs	r3, r4
    b9fc:	4619      	mov	r1, r3
    b9fe:	6978      	ldr	r0, [r7, #20]
    ba00:	4b09      	ldr	r3, [pc, #36]	; (ba28 <_sercom_i2c_send_address+0xfc>)
    ba02:	4798      	blx	r3
	}

	return ERR_NONE;
    ba04:	2300      	movs	r3, #0
}
    ba06:	4618      	mov	r0, r3
    ba08:	371c      	adds	r7, #28
    ba0a:	46bd      	mov	sp, r7
    ba0c:	bd90      	pop	{r4, r7, pc}
    ba0e:	bf00      	nop
    ba10:	0000af55 	.word	0x0000af55
    ba14:	00020cb8 	.word	0x00020cb8
    ba18:	000080d1 	.word	0x000080d1
    ba1c:	0000b105 	.word	0x0000b105
    ba20:	0000b12d 	.word	0x0000b12d
    ba24:	0000b26d 	.word	0x0000b26d
    ba28:	0000b249 	.word	0x0000b249

0000ba2c <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    ba2c:	b580      	push	{r7, lr}
    ba2e:	b084      	sub	sp, #16
    ba30:	af00      	add	r7, sp, #0
    ba32:	6078      	str	r0, [r7, #4]
    ba34:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    ba36:	687b      	ldr	r3, [r7, #4]
    ba38:	2b00      	cmp	r3, #0
    ba3a:	bf14      	ite	ne
    ba3c:	2301      	movne	r3, #1
    ba3e:	2300      	moveq	r3, #0
    ba40:	b2db      	uxtb	r3, r3
    ba42:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    ba46:	492a      	ldr	r1, [pc, #168]	; (baf0 <_i2c_m_async_transfer+0xc4>)
    ba48:	4618      	mov	r0, r3
    ba4a:	4b2a      	ldr	r3, [pc, #168]	; (baf4 <_i2c_m_async_transfer+0xc8>)
    ba4c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    ba4e:	687b      	ldr	r3, [r7, #4]
    ba50:	691b      	ldr	r3, [r3, #16]
    ba52:	2b00      	cmp	r3, #0
    ba54:	bf14      	ite	ne
    ba56:	2301      	movne	r3, #1
    ba58:	2300      	moveq	r3, #0
    ba5a:	b2db      	uxtb	r3, r3
    ba5c:	f240 42e9 	movw	r2, #1257	; 0x4e9
    ba60:	4923      	ldr	r1, [pc, #140]	; (baf0 <_i2c_m_async_transfer+0xc4>)
    ba62:	4618      	mov	r0, r3
    ba64:	4b23      	ldr	r3, [pc, #140]	; (baf4 <_i2c_m_async_transfer+0xc8>)
    ba66:	4798      	blx	r3
	ASSERT(msg);
    ba68:	683b      	ldr	r3, [r7, #0]
    ba6a:	2b00      	cmp	r3, #0
    ba6c:	bf14      	ite	ne
    ba6e:	2301      	movne	r3, #1
    ba70:	2300      	moveq	r3, #0
    ba72:	b2db      	uxtb	r3, r3
    ba74:	f240 42ea 	movw	r2, #1258	; 0x4ea
    ba78:	491d      	ldr	r1, [pc, #116]	; (baf0 <_i2c_m_async_transfer+0xc4>)
    ba7a:	4618      	mov	r0, r3
    ba7c:	4b1d      	ldr	r3, [pc, #116]	; (baf4 <_i2c_m_async_transfer+0xc8>)
    ba7e:	4798      	blx	r3

	if (msg->len == 0) {
    ba80:	683b      	ldr	r3, [r7, #0]
    ba82:	685b      	ldr	r3, [r3, #4]
    ba84:	2b00      	cmp	r3, #0
    ba86:	d101      	bne.n	ba8c <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    ba88:	2300      	movs	r3, #0
    ba8a:	e02d      	b.n	bae8 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    ba8c:	687b      	ldr	r3, [r7, #4]
    ba8e:	885b      	ldrh	r3, [r3, #2]
    ba90:	b29b      	uxth	r3, r3
    ba92:	f403 7380 	and.w	r3, r3, #256	; 0x100
    ba96:	2b00      	cmp	r3, #0
    ba98:	d002      	beq.n	baa0 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    ba9a:	f06f 0303 	mvn.w	r3, #3
    ba9e:	e023      	b.n	bae8 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    baa0:	683b      	ldr	r3, [r7, #0]
    baa2:	885b      	ldrh	r3, [r3, #2]
    baa4:	b29b      	uxth	r3, r3
    baa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    baaa:	b29a      	uxth	r2, r3
    baac:	683b      	ldr	r3, [r7, #0]
    baae:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    bab0:	687b      	ldr	r3, [r7, #4]
    bab2:	683a      	ldr	r2, [r7, #0]
    bab4:	ca07      	ldmia	r2, {r0, r1, r2}
    bab6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    baba:	687b      	ldr	r3, [r7, #4]
    babc:	691b      	ldr	r3, [r3, #16]
    babe:	4618      	mov	r0, r3
    bac0:	4b0d      	ldr	r3, [pc, #52]	; (baf8 <_i2c_m_async_transfer+0xcc>)
    bac2:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    bac4:	6878      	ldr	r0, [r7, #4]
    bac6:	4b0d      	ldr	r3, [pc, #52]	; (bafc <_i2c_m_async_transfer+0xd0>)
    bac8:	4798      	blx	r3
    baca:	60f8      	str	r0, [r7, #12]

	if (ret) {
    bacc:	68fb      	ldr	r3, [r7, #12]
    bace:	2b00      	cmp	r3, #0
    bad0:	d009      	beq.n	bae6 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    bad2:	687b      	ldr	r3, [r7, #4]
    bad4:	885b      	ldrh	r3, [r3, #2]
    bad6:	b29b      	uxth	r3, r3
    bad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    badc:	b29a      	uxth	r2, r3
    bade:	687b      	ldr	r3, [r7, #4]
    bae0:	805a      	strh	r2, [r3, #2]

		return ret;
    bae2:	68fb      	ldr	r3, [r7, #12]
    bae4:	e000      	b.n	bae8 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    bae6:	2300      	movs	r3, #0
}
    bae8:	4618      	mov	r0, r3
    baea:	3710      	adds	r7, #16
    baec:	46bd      	mov	sp, r7
    baee:	bd80      	pop	{r7, pc}
    baf0:	00020cb8 	.word	0x00020cb8
    baf4:	000080d1 	.word	0x000080d1
    baf8:	0000b0b5 	.word	0x0000b0b5
    bafc:	0000b92d 	.word	0x0000b92d

0000bb00 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    bb00:	b480      	push	{r7}
    bb02:	b085      	sub	sp, #20
    bb04:	af00      	add	r7, sp, #0
    bb06:	60f8      	str	r0, [r7, #12]
    bb08:	460b      	mov	r3, r1
    bb0a:	607a      	str	r2, [r7, #4]
    bb0c:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    bb0e:	7afb      	ldrb	r3, [r7, #11]
    bb10:	2b01      	cmp	r3, #1
    bb12:	d008      	beq.n	bb26 <_i2c_m_async_register_callback+0x26>
    bb14:	2b02      	cmp	r3, #2
    bb16:	d00a      	beq.n	bb2e <_i2c_m_async_register_callback+0x2e>
    bb18:	2b00      	cmp	r3, #0
    bb1a:	d000      	beq.n	bb1e <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    bb1c:	e00b      	b.n	bb36 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    bb1e:	68fb      	ldr	r3, [r7, #12]
    bb20:	687a      	ldr	r2, [r7, #4]
    bb22:	615a      	str	r2, [r3, #20]
		break;
    bb24:	e007      	b.n	bb36 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    bb26:	68fb      	ldr	r3, [r7, #12]
    bb28:	687a      	ldr	r2, [r7, #4]
    bb2a:	619a      	str	r2, [r3, #24]
		break;
    bb2c:	e003      	b.n	bb36 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    bb2e:	68fb      	ldr	r3, [r7, #12]
    bb30:	687a      	ldr	r2, [r7, #4]
    bb32:	61da      	str	r2, [r3, #28]
		break;
    bb34:	bf00      	nop
	}

	return ERR_NONE;
    bb36:	2300      	movs	r3, #0
}
    bb38:	4618      	mov	r0, r3
    bb3a:	3714      	adds	r7, #20
    bb3c:	46bd      	mov	sp, r7
    bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb42:	4770      	bx	lr

0000bb44 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    bb44:	b580      	push	{r7, lr}
    bb46:	b082      	sub	sp, #8
    bb48:	af00      	add	r7, sp, #0
    bb4a:	6078      	str	r0, [r7, #4]
    bb4c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    bb4e:	687b      	ldr	r3, [r7, #4]
    bb50:	2b00      	cmp	r3, #0
    bb52:	bf14      	ite	ne
    bb54:	2301      	movne	r3, #1
    bb56:	2300      	moveq	r3, #0
    bb58:	b2db      	uxtb	r3, r3
    bb5a:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    bb5e:	4908      	ldr	r1, [pc, #32]	; (bb80 <_i2c_m_sync_init+0x3c>)
    bb60:	4618      	mov	r0, r3
    bb62:	4b08      	ldr	r3, [pc, #32]	; (bb84 <_i2c_m_sync_init+0x40>)
    bb64:	4798      	blx	r3

	i2c_dev->hw = hw;
    bb66:	687b      	ldr	r3, [r7, #4]
    bb68:	683a      	ldr	r2, [r7, #0]
    bb6a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    bb6c:	687b      	ldr	r3, [r7, #4]
    bb6e:	6839      	ldr	r1, [r7, #0]
    bb70:	4618      	mov	r0, r3
    bb72:	4b05      	ldr	r3, [pc, #20]	; (bb88 <_i2c_m_sync_init+0x44>)
    bb74:	4798      	blx	r3
    bb76:	4603      	mov	r3, r0
}
    bb78:	4618      	mov	r0, r3
    bb7a:	3708      	adds	r7, #8
    bb7c:	46bd      	mov	sp, r7
    bb7e:	bd80      	pop	{r7, pc}
    bb80:	00020cb8 	.word	0x00020cb8
    bb84:	000080d1 	.word	0x000080d1
    bb88:	0000bf65 	.word	0x0000bf65

0000bb8c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    bb8c:	b580      	push	{r7, lr}
    bb8e:	b082      	sub	sp, #8
    bb90:	af00      	add	r7, sp, #0
    bb92:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    bb94:	687b      	ldr	r3, [r7, #4]
    bb96:	2b00      	cmp	r3, #0
    bb98:	bf14      	ite	ne
    bb9a:	2301      	movne	r3, #1
    bb9c:	2300      	moveq	r3, #0
    bb9e:	b2db      	uxtb	r3, r3
    bba0:	f240 5265 	movw	r2, #1381	; 0x565
    bba4:	4906      	ldr	r1, [pc, #24]	; (bbc0 <_i2c_m_sync_enable+0x34>)
    bba6:	4618      	mov	r0, r3
    bba8:	4b06      	ldr	r3, [pc, #24]	; (bbc4 <_i2c_m_sync_enable+0x38>)
    bbaa:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    bbac:	687b      	ldr	r3, [r7, #4]
    bbae:	691b      	ldr	r3, [r3, #16]
    bbb0:	4618      	mov	r0, r3
    bbb2:	4b05      	ldr	r3, [pc, #20]	; (bbc8 <_i2c_m_sync_enable+0x3c>)
    bbb4:	4798      	blx	r3
    bbb6:	4603      	mov	r3, r0
}
    bbb8:	4618      	mov	r0, r3
    bbba:	3708      	adds	r7, #8
    bbbc:	46bd      	mov	sp, r7
    bbbe:	bd80      	pop	{r7, pc}
    bbc0:	00020cb8 	.word	0x00020cb8
    bbc4:	000080d1 	.word	0x000080d1
    bbc8:	0000bed9 	.word	0x0000bed9

0000bbcc <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    bbcc:	b580      	push	{r7, lr}
    bbce:	b082      	sub	sp, #8
    bbd0:	af00      	add	r7, sp, #0
    bbd2:	6078      	str	r0, [r7, #4]
    bbd4:	460b      	mov	r3, r1
    bbd6:	70fb      	strb	r3, [r7, #3]
    bbd8:	4613      	mov	r3, r2
    bbda:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    bbdc:	78fb      	ldrb	r3, [r7, #3]
    bbde:	2b01      	cmp	r3, #1
    bbe0:	d002      	beq.n	bbe8 <_i2c_m_async_set_irq_state+0x1c>
    bbe2:	78fb      	ldrb	r3, [r7, #3]
    bbe4:	2b02      	cmp	r3, #2
    bbe6:	d10e      	bne.n	bc06 <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    bbe8:	687b      	ldr	r3, [r7, #4]
    bbea:	691b      	ldr	r3, [r3, #16]
    bbec:	78ba      	ldrb	r2, [r7, #2]
    bbee:	4611      	mov	r1, r2
    bbf0:	4618      	mov	r0, r3
    bbf2:	4b0c      	ldr	r3, [pc, #48]	; (bc24 <_i2c_m_async_set_irq_state+0x58>)
    bbf4:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    bbf6:	687b      	ldr	r3, [r7, #4]
    bbf8:	691b      	ldr	r3, [r3, #16]
    bbfa:	78ba      	ldrb	r2, [r7, #2]
    bbfc:	4611      	mov	r1, r2
    bbfe:	4618      	mov	r0, r3
    bc00:	4b09      	ldr	r3, [pc, #36]	; (bc28 <_i2c_m_async_set_irq_state+0x5c>)
    bc02:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    bc04:	e009      	b.n	bc1a <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    bc06:	78fb      	ldrb	r3, [r7, #3]
    bc08:	2b00      	cmp	r3, #0
    bc0a:	d106      	bne.n	bc1a <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    bc0c:	687b      	ldr	r3, [r7, #4]
    bc0e:	691b      	ldr	r3, [r3, #16]
    bc10:	78ba      	ldrb	r2, [r7, #2]
    bc12:	4611      	mov	r1, r2
    bc14:	4618      	mov	r0, r3
    bc16:	4b05      	ldr	r3, [pc, #20]	; (bc2c <_i2c_m_async_set_irq_state+0x60>)
    bc18:	4798      	blx	r3
}
    bc1a:	bf00      	nop
    bc1c:	3708      	adds	r7, #8
    bc1e:	46bd      	mov	sp, r7
    bc20:	bd80      	pop	{r7, pc}
    bc22:	bf00      	nop
    bc24:	0000ae9f 	.word	0x0000ae9f
    bc28:	0000ae6d 	.word	0x0000ae6d
    bc2c:	0000aed1 	.word	0x0000aed1

0000bc30 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    bc30:	b580      	push	{r7, lr}
    bc32:	b084      	sub	sp, #16
    bc34:	af00      	add	r7, sp, #0
    bc36:	6078      	str	r0, [r7, #4]
    bc38:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    bc3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bc3e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    bc40:	687b      	ldr	r3, [r7, #4]
    bc42:	691b      	ldr	r3, [r3, #16]
    bc44:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    bc46:	68b8      	ldr	r0, [r7, #8]
    bc48:	4b0f      	ldr	r3, [pc, #60]	; (bc88 <_sercom_i2c_sync_wait_bus+0x58>)
    bc4a:	4798      	blx	r3
    bc4c:	4603      	mov	r3, r0
    bc4e:	461a      	mov	r2, r3
    bc50:	683b      	ldr	r3, [r7, #0]
    bc52:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    bc54:	68fb      	ldr	r3, [r7, #12]
    bc56:	1e5a      	subs	r2, r3, #1
    bc58:	60fa      	str	r2, [r7, #12]
    bc5a:	2b00      	cmp	r3, #0
    bc5c:	d102      	bne.n	bc64 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    bc5e:	f06f 0304 	mvn.w	r3, #4
    bc62:	e00c      	b.n	bc7e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    bc64:	683b      	ldr	r3, [r7, #0]
    bc66:	681b      	ldr	r3, [r3, #0]
    bc68:	f003 0301 	and.w	r3, r3, #1
    bc6c:	2b00      	cmp	r3, #0
    bc6e:	d105      	bne.n	bc7c <_sercom_i2c_sync_wait_bus+0x4c>
    bc70:	683b      	ldr	r3, [r7, #0]
    bc72:	681b      	ldr	r3, [r3, #0]
    bc74:	f003 0302 	and.w	r3, r3, #2
    bc78:	2b00      	cmp	r3, #0
    bc7a:	d0e4      	beq.n	bc46 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    bc7c:	2300      	movs	r3, #0
}
    bc7e:	4618      	mov	r0, r3
    bc80:	3710      	adds	r7, #16
    bc82:	46bd      	mov	sp, r7
    bc84:	bd80      	pop	{r7, pc}
    bc86:	bf00      	nop
    bc88:	0000add5 	.word	0x0000add5

0000bc8c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    bc8c:	b590      	push	{r4, r7, lr}
    bc8e:	b087      	sub	sp, #28
    bc90:	af00      	add	r7, sp, #0
    bc92:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    bc94:	687b      	ldr	r3, [r7, #4]
    bc96:	691b      	ldr	r3, [r3, #16]
    bc98:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    bc9a:	687b      	ldr	r3, [r7, #4]
    bc9c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    bc9e:	6978      	ldr	r0, [r7, #20]
    bca0:	4b39      	ldr	r3, [pc, #228]	; (bd88 <_sercom_i2c_sync_send_address+0xfc>)
    bca2:	4798      	blx	r3
    bca4:	4603      	mov	r3, r0
    bca6:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    bca8:	687b      	ldr	r3, [r7, #4]
    bcaa:	2b00      	cmp	r3, #0
    bcac:	bf14      	ite	ne
    bcae:	2301      	movne	r3, #1
    bcb0:	2300      	moveq	r3, #0
    bcb2:	b2db      	uxtb	r3, r3
    bcb4:	f240 52d5 	movw	r2, #1493	; 0x5d5
    bcb8:	4934      	ldr	r1, [pc, #208]	; (bd8c <_sercom_i2c_sync_send_address+0x100>)
    bcba:	4618      	mov	r0, r3
    bcbc:	4b34      	ldr	r3, [pc, #208]	; (bd90 <_sercom_i2c_sync_send_address+0x104>)
    bcbe:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    bcc0:	693b      	ldr	r3, [r7, #16]
    bcc2:	685b      	ldr	r3, [r3, #4]
    bcc4:	2b01      	cmp	r3, #1
    bcc6:	d106      	bne.n	bcd6 <_sercom_i2c_sync_send_address+0x4a>
    bcc8:	68fb      	ldr	r3, [r7, #12]
    bcca:	2b00      	cmp	r3, #0
    bccc:	d003      	beq.n	bcd6 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    bcce:	6978      	ldr	r0, [r7, #20]
    bcd0:	4b30      	ldr	r3, [pc, #192]	; (bd94 <_sercom_i2c_sync_send_address+0x108>)
    bcd2:	4798      	blx	r3
    bcd4:	e002      	b.n	bcdc <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    bcd6:	6978      	ldr	r0, [r7, #20]
    bcd8:	4b2f      	ldr	r3, [pc, #188]	; (bd98 <_sercom_i2c_sync_send_address+0x10c>)
    bcda:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    bcdc:	693b      	ldr	r3, [r7, #16]
    bcde:	881b      	ldrh	r3, [r3, #0]
    bce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    bce4:	2b00      	cmp	r3, #0
    bce6:	d022      	beq.n	bd2e <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    bce8:	693b      	ldr	r3, [r7, #16]
    bcea:	885b      	ldrh	r3, [r3, #2]
    bcec:	b29b      	uxth	r3, r3
    bcee:	f003 0301 	and.w	r3, r3, #1
    bcf2:	2b00      	cmp	r3, #0
    bcf4:	d007      	beq.n	bd06 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    bcf6:	693b      	ldr	r3, [r7, #16]
    bcf8:	885b      	ldrh	r3, [r3, #2]
    bcfa:	b29b      	uxth	r3, r3
    bcfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    bd00:	b29a      	uxth	r2, r3
    bd02:	693b      	ldr	r3, [r7, #16]
    bd04:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    bd06:	693b      	ldr	r3, [r7, #16]
    bd08:	881b      	ldrh	r3, [r3, #0]
    bd0a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    bd0c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    bd10:	401c      	ands	r4, r3
    bd12:	6978      	ldr	r0, [r7, #20]
    bd14:	4b21      	ldr	r3, [pc, #132]	; (bd9c <_sercom_i2c_sync_send_address+0x110>)
    bd16:	4798      	blx	r3
    bd18:	4603      	mov	r3, r0
    bd1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    bd1e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    bd20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    bd24:	4619      	mov	r1, r3
    bd26:	6978      	ldr	r0, [r7, #20]
    bd28:	4b1d      	ldr	r3, [pc, #116]	; (bda0 <_sercom_i2c_sync_send_address+0x114>)
    bd2a:	4798      	blx	r3
    bd2c:	e01a      	b.n	bd64 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    bd2e:	693b      	ldr	r3, [r7, #16]
    bd30:	881b      	ldrh	r3, [r3, #0]
    bd32:	005b      	lsls	r3, r3, #1
    bd34:	b2db      	uxtb	r3, r3
    bd36:	693a      	ldr	r2, [r7, #16]
    bd38:	8852      	ldrh	r2, [r2, #2]
    bd3a:	b292      	uxth	r2, r2
    bd3c:	f002 0201 	and.w	r2, r2, #1
    bd40:	2a00      	cmp	r2, #0
    bd42:	bf14      	ite	ne
    bd44:	2201      	movne	r2, #1
    bd46:	2200      	moveq	r2, #0
    bd48:	b2d2      	uxtb	r2, r2
    bd4a:	4313      	orrs	r3, r2
    bd4c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    bd4e:	6978      	ldr	r0, [r7, #20]
    bd50:	4b12      	ldr	r3, [pc, #72]	; (bd9c <_sercom_i2c_sync_send_address+0x110>)
    bd52:	4798      	blx	r3
    bd54:	4603      	mov	r3, r0
    bd56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    bd5a:	4323      	orrs	r3, r4
    bd5c:	4619      	mov	r1, r3
    bd5e:	6978      	ldr	r0, [r7, #20]
    bd60:	4b0f      	ldr	r3, [pc, #60]	; (bda0 <_sercom_i2c_sync_send_address+0x114>)
    bd62:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    bd64:	f107 0308 	add.w	r3, r7, #8
    bd68:	4619      	mov	r1, r3
    bd6a:	6878      	ldr	r0, [r7, #4]
    bd6c:	4b0d      	ldr	r3, [pc, #52]	; (bda4 <_sercom_i2c_sync_send_address+0x118>)
    bd6e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    bd70:	68bb      	ldr	r3, [r7, #8]
    bd72:	693a      	ldr	r2, [r7, #16]
    bd74:	4619      	mov	r1, r3
    bd76:	6978      	ldr	r0, [r7, #20]
    bd78:	4b0b      	ldr	r3, [pc, #44]	; (bda8 <_sercom_i2c_sync_send_address+0x11c>)
    bd7a:	4798      	blx	r3
    bd7c:	4603      	mov	r3, r0
}
    bd7e:	4618      	mov	r0, r3
    bd80:	371c      	adds	r7, #28
    bd82:	46bd      	mov	sp, r7
    bd84:	bd90      	pop	{r4, r7, pc}
    bd86:	bf00      	nop
    bd88:	0000af55 	.word	0x0000af55
    bd8c:	00020cb8 	.word	0x00020cb8
    bd90:	000080d1 	.word	0x000080d1
    bd94:	0000b105 	.word	0x0000b105
    bd98:	0000b12d 	.word	0x0000b12d
    bd9c:	0000b26d 	.word	0x0000b26d
    bda0:	0000b249 	.word	0x0000b249
    bda4:	0000bc31 	.word	0x0000bc31
    bda8:	0000b4e5 	.word	0x0000b4e5

0000bdac <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    bdac:	b580      	push	{r7, lr}
    bdae:	b086      	sub	sp, #24
    bdb0:	af00      	add	r7, sp, #0
    bdb2:	6078      	str	r0, [r7, #4]
    bdb4:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    bdb6:	687b      	ldr	r3, [r7, #4]
    bdb8:	691b      	ldr	r3, [r3, #16]
    bdba:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    bdbc:	687b      	ldr	r3, [r7, #4]
    bdbe:	2b00      	cmp	r3, #0
    bdc0:	bf14      	ite	ne
    bdc2:	2301      	movne	r3, #1
    bdc4:	2300      	moveq	r3, #0
    bdc6:	b2db      	uxtb	r3, r3
    bdc8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    bdcc:	493b      	ldr	r1, [pc, #236]	; (bebc <_i2c_m_sync_transfer+0x110>)
    bdce:	4618      	mov	r0, r3
    bdd0:	4b3b      	ldr	r3, [pc, #236]	; (bec0 <_i2c_m_sync_transfer+0x114>)
    bdd2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    bdd4:	687b      	ldr	r3, [r7, #4]
    bdd6:	691b      	ldr	r3, [r3, #16]
    bdd8:	2b00      	cmp	r3, #0
    bdda:	bf14      	ite	ne
    bddc:	2301      	movne	r3, #1
    bdde:	2300      	moveq	r3, #0
    bde0:	b2db      	uxtb	r3, r3
    bde2:	f240 6201 	movw	r2, #1537	; 0x601
    bde6:	4935      	ldr	r1, [pc, #212]	; (bebc <_i2c_m_sync_transfer+0x110>)
    bde8:	4618      	mov	r0, r3
    bdea:	4b35      	ldr	r3, [pc, #212]	; (bec0 <_i2c_m_sync_transfer+0x114>)
    bdec:	4798      	blx	r3
	ASSERT(msg);
    bdee:	683b      	ldr	r3, [r7, #0]
    bdf0:	2b00      	cmp	r3, #0
    bdf2:	bf14      	ite	ne
    bdf4:	2301      	movne	r3, #1
    bdf6:	2300      	moveq	r3, #0
    bdf8:	b2db      	uxtb	r3, r3
    bdfa:	f240 6202 	movw	r2, #1538	; 0x602
    bdfe:	492f      	ldr	r1, [pc, #188]	; (bebc <_i2c_m_sync_transfer+0x110>)
    be00:	4618      	mov	r0, r3
    be02:	4b2f      	ldr	r3, [pc, #188]	; (bec0 <_i2c_m_sync_transfer+0x114>)
    be04:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    be06:	687b      	ldr	r3, [r7, #4]
    be08:	885b      	ldrh	r3, [r3, #2]
    be0a:	b29b      	uxth	r3, r3
    be0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    be10:	2b00      	cmp	r3, #0
    be12:	d002      	beq.n	be1a <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    be14:	f06f 0305 	mvn.w	r3, #5
    be18:	e04c      	b.n	beb4 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    be1a:	683b      	ldr	r3, [r7, #0]
    be1c:	885b      	ldrh	r3, [r3, #2]
    be1e:	b29b      	uxth	r3, r3
    be20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    be24:	b29a      	uxth	r2, r3
    be26:	683b      	ldr	r3, [r7, #0]
    be28:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    be2a:	687b      	ldr	r3, [r7, #4]
    be2c:	683a      	ldr	r2, [r7, #0]
    be2e:	ca07      	ldmia	r2, {r0, r1, r2}
    be30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    be34:	6938      	ldr	r0, [r7, #16]
    be36:	4b23      	ldr	r3, [pc, #140]	; (bec4 <_i2c_m_sync_transfer+0x118>)
    be38:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    be3a:	6878      	ldr	r0, [r7, #4]
    be3c:	4b22      	ldr	r3, [pc, #136]	; (bec8 <_i2c_m_sync_transfer+0x11c>)
    be3e:	4798      	blx	r3
    be40:	6178      	str	r0, [r7, #20]

	if (ret) {
    be42:	697b      	ldr	r3, [r7, #20]
    be44:	2b00      	cmp	r3, #0
    be46:	d02d      	beq.n	bea4 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    be48:	687b      	ldr	r3, [r7, #4]
    be4a:	885b      	ldrh	r3, [r3, #2]
    be4c:	b29b      	uxth	r3, r3
    be4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    be52:	b29a      	uxth	r2, r3
    be54:	687b      	ldr	r3, [r7, #4]
    be56:	805a      	strh	r2, [r3, #2]

		return ret;
    be58:	697b      	ldr	r3, [r7, #20]
    be5a:	e02b      	b.n	beb4 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    be5c:	f107 030c 	add.w	r3, r7, #12
    be60:	4619      	mov	r1, r3
    be62:	6878      	ldr	r0, [r7, #4]
    be64:	4b19      	ldr	r3, [pc, #100]	; (becc <_i2c_m_sync_transfer+0x120>)
    be66:	4798      	blx	r3
    be68:	6178      	str	r0, [r7, #20]

		if (ret) {
    be6a:	697b      	ldr	r3, [r7, #20]
    be6c:	2b00      	cmp	r3, #0
    be6e:	d012      	beq.n	be96 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    be70:	683b      	ldr	r3, [r7, #0]
    be72:	885b      	ldrh	r3, [r3, #2]
    be74:	b29b      	uxth	r3, r3
    be76:	b21b      	sxth	r3, r3
    be78:	2b00      	cmp	r3, #0
    be7a:	da02      	bge.n	be82 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    be7c:	6938      	ldr	r0, [r7, #16]
    be7e:	4b14      	ldr	r3, [pc, #80]	; (bed0 <_i2c_m_sync_transfer+0x124>)
    be80:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    be82:	687b      	ldr	r3, [r7, #4]
    be84:	885b      	ldrh	r3, [r3, #2]
    be86:	b29b      	uxth	r3, r3
    be88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    be8c:	b29a      	uxth	r2, r3
    be8e:	687b      	ldr	r3, [r7, #4]
    be90:	805a      	strh	r2, [r3, #2]

			return ret;
    be92:	697b      	ldr	r3, [r7, #20]
    be94:	e00e      	b.n	beb4 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    be96:	68fb      	ldr	r3, [r7, #12]
    be98:	687a      	ldr	r2, [r7, #4]
    be9a:	4619      	mov	r1, r3
    be9c:	6938      	ldr	r0, [r7, #16]
    be9e:	4b0d      	ldr	r3, [pc, #52]	; (bed4 <_i2c_m_sync_transfer+0x128>)
    bea0:	4798      	blx	r3
    bea2:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    bea4:	687b      	ldr	r3, [r7, #4]
    bea6:	885b      	ldrh	r3, [r3, #2]
    bea8:	b29b      	uxth	r3, r3
    beaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
    beae:	2b00      	cmp	r3, #0
    beb0:	d1d4      	bne.n	be5c <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    beb2:	697b      	ldr	r3, [r7, #20]
}
    beb4:	4618      	mov	r0, r3
    beb6:	3718      	adds	r7, #24
    beb8:	46bd      	mov	sp, r7
    beba:	bd80      	pop	{r7, pc}
    bebc:	00020cb8 	.word	0x00020cb8
    bec0:	000080d1 	.word	0x000080d1
    bec4:	0000b0b5 	.word	0x0000b0b5
    bec8:	0000bc8d 	.word	0x0000bc8d
    becc:	0000bc31 	.word	0x0000bc31
    bed0:	0000b4c9 	.word	0x0000b4c9
    bed4:	0000b4e5 	.word	0x0000b4e5

0000bed8 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    bed8:	b580      	push	{r7, lr}
    beda:	b084      	sub	sp, #16
    bedc:	af00      	add	r7, sp, #0
    bede:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    bee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bee4:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    bee6:	2304      	movs	r3, #4
    bee8:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    beea:	687b      	ldr	r3, [r7, #4]
    beec:	2b00      	cmp	r3, #0
    beee:	bf14      	ite	ne
    bef0:	2301      	movne	r3, #1
    bef2:	2300      	moveq	r3, #0
    bef4:	b2db      	uxtb	r3, r3
    bef6:	f240 6235 	movw	r2, #1589	; 0x635
    befa:	4915      	ldr	r1, [pc, #84]	; (bf50 <_i2c_m_enable_implementation+0x78>)
    befc:	4618      	mov	r0, r3
    befe:	4b15      	ldr	r3, [pc, #84]	; (bf54 <_i2c_m_enable_implementation+0x7c>)
    bf00:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    bf02:	6878      	ldr	r0, [r7, #4]
    bf04:	4b14      	ldr	r3, [pc, #80]	; (bf58 <_i2c_m_enable_implementation+0x80>)
    bf06:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    bf08:	e016      	b.n	bf38 <_i2c_m_enable_implementation+0x60>
		timeout--;
    bf0a:	68fb      	ldr	r3, [r7, #12]
    bf0c:	3b01      	subs	r3, #1
    bf0e:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    bf10:	68fb      	ldr	r3, [r7, #12]
    bf12:	2b00      	cmp	r3, #0
    bf14:	dc10      	bgt.n	bf38 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    bf16:	68bb      	ldr	r3, [r7, #8]
    bf18:	3b01      	subs	r3, #1
    bf1a:	60bb      	str	r3, [r7, #8]
    bf1c:	68bb      	ldr	r3, [r7, #8]
    bf1e:	2b00      	cmp	r3, #0
    bf20:	d007      	beq.n	bf32 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    bf22:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bf26:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    bf28:	2110      	movs	r1, #16
    bf2a:	6878      	ldr	r0, [r7, #4]
    bf2c:	4b0b      	ldr	r3, [pc, #44]	; (bf5c <_i2c_m_enable_implementation+0x84>)
    bf2e:	4798      	blx	r3
    bf30:	e002      	b.n	bf38 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    bf32:	f06f 0305 	mvn.w	r3, #5
    bf36:	e006      	b.n	bf46 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    bf38:	6878      	ldr	r0, [r7, #4]
    bf3a:	4b09      	ldr	r3, [pc, #36]	; (bf60 <_i2c_m_enable_implementation+0x88>)
    bf3c:	4798      	blx	r3
    bf3e:	4603      	mov	r3, r0
    bf40:	2b01      	cmp	r3, #1
    bf42:	d1e2      	bne.n	bf0a <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    bf44:	2300      	movs	r3, #0
}
    bf46:	4618      	mov	r0, r3
    bf48:	3710      	adds	r7, #16
    bf4a:	46bd      	mov	sp, r7
    bf4c:	bd80      	pop	{r7, pc}
    bf4e:	bf00      	nop
    bf50:	00020cb8 	.word	0x00020cb8
    bf54:	000080d1 	.word	0x000080d1
    bf58:	0000af05 	.word	0x0000af05
    bf5c:	0000b3b1 	.word	0x0000b3b1
    bf60:	0000b361 	.word	0x0000b361

0000bf64 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    bf64:	b580      	push	{r7, lr}
    bf66:	b084      	sub	sp, #16
    bf68:	af00      	add	r7, sp, #0
    bf6a:	6078      	str	r0, [r7, #4]
    bf6c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    bf6e:	6838      	ldr	r0, [r7, #0]
    bf70:	4b42      	ldr	r3, [pc, #264]	; (c07c <_i2c_m_sync_init_impl+0x118>)
    bf72:	4798      	blx	r3
    bf74:	4603      	mov	r3, r0
    bf76:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    bf78:	2101      	movs	r1, #1
    bf7a:	6838      	ldr	r0, [r7, #0]
    bf7c:	4b40      	ldr	r3, [pc, #256]	; (c080 <_i2c_m_sync_init_impl+0x11c>)
    bf7e:	4798      	blx	r3
    bf80:	4603      	mov	r3, r0
    bf82:	f083 0301 	eor.w	r3, r3, #1
    bf86:	b2db      	uxtb	r3, r3
    bf88:	2b00      	cmp	r3, #0
    bf8a:	d020      	beq.n	bfce <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    bf8c:	7bfa      	ldrb	r2, [r7, #15]
    bf8e:	493d      	ldr	r1, [pc, #244]	; (c084 <_i2c_m_sync_init_impl+0x120>)
    bf90:	4613      	mov	r3, r2
    bf92:	005b      	lsls	r3, r3, #1
    bf94:	4413      	add	r3, r2
    bf96:	00db      	lsls	r3, r3, #3
    bf98:	440b      	add	r3, r1
    bf9a:	3304      	adds	r3, #4
    bf9c:	681b      	ldr	r3, [r3, #0]
    bf9e:	f003 031c 	and.w	r3, r3, #28
    bfa2:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    bfa4:	2102      	movs	r1, #2
    bfa6:	6838      	ldr	r0, [r7, #0]
    bfa8:	4b37      	ldr	r3, [pc, #220]	; (c088 <_i2c_m_sync_init_impl+0x124>)
    bfaa:	4798      	blx	r3
    bfac:	4603      	mov	r3, r0
    bfae:	2b00      	cmp	r3, #0
    bfb0:	d006      	beq.n	bfc0 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    bfb2:	6838      	ldr	r0, [r7, #0]
    bfb4:	4b35      	ldr	r3, [pc, #212]	; (c08c <_i2c_m_sync_init_impl+0x128>)
    bfb6:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    bfb8:	2102      	movs	r1, #2
    bfba:	6838      	ldr	r0, [r7, #0]
    bfbc:	4b34      	ldr	r3, [pc, #208]	; (c090 <_i2c_m_sync_init_impl+0x12c>)
    bfbe:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    bfc0:	68bb      	ldr	r3, [r7, #8]
    bfc2:	f043 0301 	orr.w	r3, r3, #1
    bfc6:	4619      	mov	r1, r3
    bfc8:	6838      	ldr	r0, [r7, #0]
    bfca:	4b32      	ldr	r3, [pc, #200]	; (c094 <_i2c_m_sync_init_impl+0x130>)
    bfcc:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    bfce:	2101      	movs	r1, #1
    bfd0:	6838      	ldr	r0, [r7, #0]
    bfd2:	4b2f      	ldr	r3, [pc, #188]	; (c090 <_i2c_m_sync_init_impl+0x12c>)
    bfd4:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    bfd6:	7bfa      	ldrb	r2, [r7, #15]
    bfd8:	492a      	ldr	r1, [pc, #168]	; (c084 <_i2c_m_sync_init_impl+0x120>)
    bfda:	4613      	mov	r3, r2
    bfdc:	005b      	lsls	r3, r3, #1
    bfde:	4413      	add	r3, r2
    bfe0:	00db      	lsls	r3, r3, #3
    bfe2:	440b      	add	r3, r1
    bfe4:	3304      	adds	r3, #4
    bfe6:	681b      	ldr	r3, [r3, #0]
    bfe8:	4619      	mov	r1, r3
    bfea:	6838      	ldr	r0, [r7, #0]
    bfec:	4b29      	ldr	r3, [pc, #164]	; (c094 <_i2c_m_sync_init_impl+0x130>)
    bfee:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    bff0:	7bfa      	ldrb	r2, [r7, #15]
    bff2:	4924      	ldr	r1, [pc, #144]	; (c084 <_i2c_m_sync_init_impl+0x120>)
    bff4:	4613      	mov	r3, r2
    bff6:	005b      	lsls	r3, r3, #1
    bff8:	4413      	add	r3, r2
    bffa:	00db      	lsls	r3, r3, #3
    bffc:	440b      	add	r3, r1
    bffe:	3308      	adds	r3, #8
    c000:	681b      	ldr	r3, [r3, #0]
    c002:	4619      	mov	r1, r3
    c004:	6838      	ldr	r0, [r7, #0]
    c006:	4b24      	ldr	r3, [pc, #144]	; (c098 <_i2c_m_sync_init_impl+0x134>)
    c008:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    c00a:	7bfa      	ldrb	r2, [r7, #15]
    c00c:	491d      	ldr	r1, [pc, #116]	; (c084 <_i2c_m_sync_init_impl+0x120>)
    c00e:	4613      	mov	r3, r2
    c010:	005b      	lsls	r3, r3, #1
    c012:	4413      	add	r3, r2
    c014:	00db      	lsls	r3, r3, #3
    c016:	440b      	add	r3, r1
    c018:	330c      	adds	r3, #12
    c01a:	681b      	ldr	r3, [r3, #0]
    c01c:	4619      	mov	r1, r3
    c01e:	6838      	ldr	r0, [r7, #0]
    c020:	4b1e      	ldr	r3, [pc, #120]	; (c09c <_i2c_m_sync_init_impl+0x138>)
    c022:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    c024:	7bfa      	ldrb	r2, [r7, #15]
    c026:	4917      	ldr	r1, [pc, #92]	; (c084 <_i2c_m_sync_init_impl+0x120>)
    c028:	4613      	mov	r3, r2
    c02a:	005b      	lsls	r3, r3, #1
    c02c:	4413      	add	r3, r2
    c02e:	00db      	lsls	r3, r3, #3
    c030:	440b      	add	r3, r1
    c032:	3304      	adds	r3, #4
    c034:	681b      	ldr	r3, [r3, #0]
    c036:	0e1b      	lsrs	r3, r3, #24
    c038:	b29b      	uxth	r3, r3
    c03a:	f003 0303 	and.w	r3, r3, #3
    c03e:	b29a      	uxth	r2, r3
    c040:	687b      	ldr	r3, [r7, #4]
    c042:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    c044:	687b      	ldr	r3, [r7, #4]
    c046:	899b      	ldrh	r3, [r3, #12]
    c048:	2b01      	cmp	r3, #1
    c04a:	bf8c      	ite	hi
    c04c:	2301      	movhi	r3, #1
    c04e:	2300      	movls	r3, #0
    c050:	b2db      	uxtb	r3, r3
    c052:	4619      	mov	r1, r3
    c054:	6838      	ldr	r0, [r7, #0]
    c056:	4b12      	ldr	r3, [pc, #72]	; (c0a0 <_i2c_m_sync_init_impl+0x13c>)
    c058:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    c05a:	7bfa      	ldrb	r2, [r7, #15]
    c05c:	4909      	ldr	r1, [pc, #36]	; (c084 <_i2c_m_sync_init_impl+0x120>)
    c05e:	4613      	mov	r3, r2
    c060:	005b      	lsls	r3, r3, #1
    c062:	4413      	add	r3, r2
    c064:	00db      	lsls	r3, r3, #3
    c066:	440b      	add	r3, r1
    c068:	3312      	adds	r3, #18
    c06a:	881a      	ldrh	r2, [r3, #0]
    c06c:	687b      	ldr	r3, [r7, #4]
    c06e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    c070:	2300      	movs	r3, #0
}
    c072:	4618      	mov	r0, r3
    c074:	3710      	adds	r7, #16
    c076:	46bd      	mov	sp, r7
    c078:	bd80      	pop	{r7, pc}
    c07a:	bf00      	nop
    c07c:	0000b461 	.word	0x0000b461
    c080:	0000ad2d 	.word	0x0000ad2d
    c084:	2000007c 	.word	0x2000007c
    c088:	0000af85 	.word	0x0000af85
    c08c:	0000af2d 	.word	0x0000af2d
    c090:	0000ad09 	.word	0x0000ad09
    c094:	0000afb5 	.word	0x0000afb5
    c098:	0000b185 	.word	0x0000b185
    c09c:	0000b1cd 	.word	0x0000b1cd
    c0a0:	0000b209 	.word	0x0000b209

0000c0a4 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    c0a4:	b580      	push	{r7, lr}
    c0a6:	b082      	sub	sp, #8
    c0a8:	af00      	add	r7, sp, #0
    c0aa:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    c0ac:	2101      	movs	r1, #1
    c0ae:	6878      	ldr	r0, [r7, #4]
    c0b0:	4b07      	ldr	r3, [pc, #28]	; (c0d0 <_spi_sync_enable+0x2c>)
    c0b2:	4798      	blx	r3
    c0b4:	4603      	mov	r3, r0
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d002      	beq.n	c0c0 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    c0ba:	f06f 0303 	mvn.w	r3, #3
    c0be:	e003      	b.n	c0c8 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    c0c0:	6878      	ldr	r0, [r7, #4]
    c0c2:	4b04      	ldr	r3, [pc, #16]	; (c0d4 <_spi_sync_enable+0x30>)
    c0c4:	4798      	blx	r3

	return ERR_NONE;
    c0c6:	2300      	movs	r3, #0
}
    c0c8:	4618      	mov	r0, r3
    c0ca:	3708      	adds	r7, #8
    c0cc:	46bd      	mov	sp, r7
    c0ce:	bd80      	pop	{r7, pc}
    c0d0:	0000ad79 	.word	0x0000ad79
    c0d4:	0000afd9 	.word	0x0000afd9

0000c0d8 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    c0d8:	b580      	push	{r7, lr}
    c0da:	b082      	sub	sp, #8
    c0dc:	af00      	add	r7, sp, #0
    c0de:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    c0e0:	2101      	movs	r1, #1
    c0e2:	6878      	ldr	r0, [r7, #4]
    c0e4:	4b07      	ldr	r3, [pc, #28]	; (c104 <_spi_sync_disable+0x2c>)
    c0e6:	4798      	blx	r3
    c0e8:	4603      	mov	r3, r0
    c0ea:	2b00      	cmp	r3, #0
    c0ec:	d002      	beq.n	c0f4 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    c0ee:	f06f 0303 	mvn.w	r3, #3
    c0f2:	e003      	b.n	c0fc <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    c0f4:	6878      	ldr	r0, [r7, #4]
    c0f6:	4b04      	ldr	r3, [pc, #16]	; (c108 <_spi_sync_disable+0x30>)
    c0f8:	4798      	blx	r3

	return ERR_NONE;
    c0fa:	2300      	movs	r3, #0
}
    c0fc:	4618      	mov	r0, r3
    c0fe:	3708      	adds	r7, #8
    c100:	46bd      	mov	sp, r7
    c102:	bd80      	pop	{r7, pc}
    c104:	0000ad79 	.word	0x0000ad79
    c108:	0000b039 	.word	0x0000b039

0000c10c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    c10c:	b580      	push	{r7, lr}
    c10e:	b082      	sub	sp, #8
    c110:	af00      	add	r7, sp, #0
    c112:	6078      	str	r0, [r7, #4]
    c114:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    c116:	687b      	ldr	r3, [r7, #4]
    c118:	2b00      	cmp	r3, #0
    c11a:	d004      	beq.n	c126 <_spi_load_regs_master+0x1a>
    c11c:	683b      	ldr	r3, [r7, #0]
    c11e:	2b00      	cmp	r3, #0
    c120:	d001      	beq.n	c126 <_spi_load_regs_master+0x1a>
    c122:	2301      	movs	r3, #1
    c124:	e000      	b.n	c128 <_spi_load_regs_master+0x1c>
    c126:	2300      	movs	r3, #0
    c128:	f003 0301 	and.w	r3, r3, #1
    c12c:	b2db      	uxtb	r3, r3
    c12e:	f640 1239 	movw	r2, #2361	; 0x939
    c132:	4915      	ldr	r1, [pc, #84]	; (c188 <_spi_load_regs_master+0x7c>)
    c134:	4618      	mov	r0, r3
    c136:	4b15      	ldr	r3, [pc, #84]	; (c18c <_spi_load_regs_master+0x80>)
    c138:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    c13a:	683b      	ldr	r3, [r7, #0]
    c13c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    c13e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    c142:	f023 0301 	bic.w	r3, r3, #1
    c146:	4619      	mov	r1, r3
    c148:	6878      	ldr	r0, [r7, #4]
    c14a:	4b11      	ldr	r3, [pc, #68]	; (c190 <_spi_load_regs_master+0x84>)
    c14c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    c14e:	683b      	ldr	r3, [r7, #0]
    c150:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    c152:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    c156:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    c15a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    c15e:	4619      	mov	r1, r3
    c160:	6878      	ldr	r0, [r7, #4]
    c162:	4b0c      	ldr	r3, [pc, #48]	; (c194 <_spi_load_regs_master+0x88>)
    c164:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    c166:	683b      	ldr	r3, [r7, #0]
    c168:	7b1b      	ldrb	r3, [r3, #12]
    c16a:	4619      	mov	r1, r3
    c16c:	6878      	ldr	r0, [r7, #4]
    c16e:	4b0a      	ldr	r3, [pc, #40]	; (c198 <_spi_load_regs_master+0x8c>)
    c170:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    c172:	683b      	ldr	r3, [r7, #0]
    c174:	7b5b      	ldrb	r3, [r3, #13]
    c176:	4619      	mov	r1, r3
    c178:	6878      	ldr	r0, [r7, #4]
    c17a:	4b08      	ldr	r3, [pc, #32]	; (c19c <_spi_load_regs_master+0x90>)
    c17c:	4798      	blx	r3
}
    c17e:	bf00      	nop
    c180:	3708      	adds	r7, #8
    c182:	46bd      	mov	sp, r7
    c184:	bd80      	pop	{r7, pc}
    c186:	bf00      	nop
    c188:	00020cb8 	.word	0x00020cb8
    c18c:	000080d1 	.word	0x000080d1
    c190:	0000b091 	.word	0x0000b091
    c194:	0000b1a9 	.word	0x0000b1a9
    c198:	0000b1e9 	.word	0x0000b1e9
    c19c:	0000b321 	.word	0x0000b321

0000c1a0 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	b082      	sub	sp, #8
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	6078      	str	r0, [r7, #4]
    c1a8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    c1aa:	687b      	ldr	r3, [r7, #4]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	d004      	beq.n	c1ba <_spi_load_regs_slave+0x1a>
    c1b0:	683b      	ldr	r3, [r7, #0]
    c1b2:	2b00      	cmp	r3, #0
    c1b4:	d001      	beq.n	c1ba <_spi_load_regs_slave+0x1a>
    c1b6:	2301      	movs	r3, #1
    c1b8:	e000      	b.n	c1bc <_spi_load_regs_slave+0x1c>
    c1ba:	2300      	movs	r3, #0
    c1bc:	f003 0301 	and.w	r3, r3, #1
    c1c0:	b2db      	uxtb	r3, r3
    c1c2:	f640 124d 	movw	r2, #2381	; 0x94d
    c1c6:	491a      	ldr	r1, [pc, #104]	; (c230 <_spi_load_regs_slave+0x90>)
    c1c8:	4618      	mov	r0, r3
    c1ca:	4b1a      	ldr	r3, [pc, #104]	; (c234 <_spi_load_regs_slave+0x94>)
    c1cc:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    c1ce:	683b      	ldr	r3, [r7, #0]
    c1d0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    c1d2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    c1d6:	f023 0301 	bic.w	r3, r3, #1
    c1da:	4619      	mov	r1, r3
    c1dc:	6878      	ldr	r0, [r7, #4]
    c1de:	4b16      	ldr	r3, [pc, #88]	; (c238 <_spi_load_regs_slave+0x98>)
    c1e0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    c1e2:	683b      	ldr	r3, [r7, #0]
    c1e4:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    c1e6:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    c1ea:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    c1ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    c1f2:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    c1f6:	4619      	mov	r1, r3
    c1f8:	6878      	ldr	r0, [r7, #4]
    c1fa:	4b10      	ldr	r3, [pc, #64]	; (c23c <_spi_load_regs_slave+0x9c>)
    c1fc:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    c1fe:	683b      	ldr	r3, [r7, #0]
    c200:	689b      	ldr	r3, [r3, #8]
    c202:	4619      	mov	r1, r3
    c204:	6878      	ldr	r0, [r7, #4]
    c206:	4b0e      	ldr	r3, [pc, #56]	; (c240 <_spi_load_regs_slave+0xa0>)
    c208:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    c20a:	683b      	ldr	r3, [r7, #0]
    c20c:	7b5b      	ldrb	r3, [r3, #13]
    c20e:	4619      	mov	r1, r3
    c210:	6878      	ldr	r0, [r7, #4]
    c212:	4b0c      	ldr	r3, [pc, #48]	; (c244 <_spi_load_regs_slave+0xa4>)
    c214:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    c216:	bf00      	nop
    c218:	f04f 31ff 	mov.w	r1, #4294967295
    c21c:	6878      	ldr	r0, [r7, #4]
    c21e:	4b0a      	ldr	r3, [pc, #40]	; (c248 <_spi_load_regs_slave+0xa8>)
    c220:	4798      	blx	r3
    c222:	4603      	mov	r3, r0
    c224:	2b00      	cmp	r3, #0
    c226:	d1f7      	bne.n	c218 <_spi_load_regs_slave+0x78>
		;
}
    c228:	bf00      	nop
    c22a:	3708      	adds	r7, #8
    c22c:	46bd      	mov	sp, r7
    c22e:	bd80      	pop	{r7, pc}
    c230:	00020cb8 	.word	0x00020cb8
    c234:	000080d1 	.word	0x000080d1
    c238:	0000b091 	.word	0x0000b091
    c23c:	0000b1a9 	.word	0x0000b1a9
    c240:	0000b28d 	.word	0x0000b28d
    c244:	0000b321 	.word	0x0000b321
    c248:	0000ad79 	.word	0x0000ad79

0000c24c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    c24c:	b580      	push	{r7, lr}
    c24e:	b084      	sub	sp, #16
    c250:	af00      	add	r7, sp, #0
    c252:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    c254:	687b      	ldr	r3, [r7, #4]
    c256:	4618      	mov	r0, r3
    c258:	4b11      	ldr	r3, [pc, #68]	; (c2a0 <_spi_get_regs+0x54>)
    c25a:	4798      	blx	r3
    c25c:	4603      	mov	r3, r0
    c25e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    c260:	2300      	movs	r3, #0
    c262:	73fb      	strb	r3, [r7, #15]
    c264:	e014      	b.n	c290 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    c266:	7bfa      	ldrb	r2, [r7, #15]
    c268:	490e      	ldr	r1, [pc, #56]	; (c2a4 <_spi_get_regs+0x58>)
    c26a:	4613      	mov	r3, r2
    c26c:	011b      	lsls	r3, r3, #4
    c26e:	4413      	add	r3, r2
    c270:	440b      	add	r3, r1
    c272:	3310      	adds	r3, #16
    c274:	781b      	ldrb	r3, [r3, #0]
    c276:	7bba      	ldrb	r2, [r7, #14]
    c278:	429a      	cmp	r2, r3
    c27a:	d106      	bne.n	c28a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    c27c:	7bfa      	ldrb	r2, [r7, #15]
    c27e:	4613      	mov	r3, r2
    c280:	011b      	lsls	r3, r3, #4
    c282:	4413      	add	r3, r2
    c284:	4a07      	ldr	r2, [pc, #28]	; (c2a4 <_spi_get_regs+0x58>)
    c286:	4413      	add	r3, r2
    c288:	e006      	b.n	c298 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    c28a:	7bfb      	ldrb	r3, [r7, #15]
    c28c:	3301      	adds	r3, #1
    c28e:	73fb      	strb	r3, [r7, #15]
    c290:	7bfb      	ldrb	r3, [r7, #15]
    c292:	2b02      	cmp	r3, #2
    c294:	d9e7      	bls.n	c266 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    c296:	2300      	movs	r3, #0
}
    c298:	4618      	mov	r0, r3
    c29a:	3710      	adds	r7, #16
    c29c:	46bd      	mov	sp, r7
    c29e:	bd80      	pop	{r7, pc}
    c2a0:	0000b3d9 	.word	0x0000b3d9
    c2a4:	00020cf4 	.word	0x00020cf4

0000c2a8 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    c2a8:	b580      	push	{r7, lr}
    c2aa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c2ac:	4b03      	ldr	r3, [pc, #12]	; (c2bc <SERCOM7_0_Handler+0x14>)
    c2ae:	681b      	ldr	r3, [r3, #0]
    c2b0:	4618      	mov	r0, r3
    c2b2:	4b03      	ldr	r3, [pc, #12]	; (c2c0 <SERCOM7_0_Handler+0x18>)
    c2b4:	4798      	blx	r3
}
    c2b6:	bf00      	nop
    c2b8:	bd80      	pop	{r7, pc}
    c2ba:	bf00      	nop
    c2bc:	200088b4 	.word	0x200088b4
    c2c0:	0000b715 	.word	0x0000b715

0000c2c4 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c2c8:	4b03      	ldr	r3, [pc, #12]	; (c2d8 <SERCOM7_1_Handler+0x14>)
    c2ca:	681b      	ldr	r3, [r3, #0]
    c2cc:	4618      	mov	r0, r3
    c2ce:	4b03      	ldr	r3, [pc, #12]	; (c2dc <SERCOM7_1_Handler+0x18>)
    c2d0:	4798      	blx	r3
}
    c2d2:	bf00      	nop
    c2d4:	bd80      	pop	{r7, pc}
    c2d6:	bf00      	nop
    c2d8:	200088b4 	.word	0x200088b4
    c2dc:	0000b715 	.word	0x0000b715

0000c2e0 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    c2e0:	b580      	push	{r7, lr}
    c2e2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c2e4:	4b03      	ldr	r3, [pc, #12]	; (c2f4 <SERCOM7_2_Handler+0x14>)
    c2e6:	681b      	ldr	r3, [r3, #0]
    c2e8:	4618      	mov	r0, r3
    c2ea:	4b03      	ldr	r3, [pc, #12]	; (c2f8 <SERCOM7_2_Handler+0x18>)
    c2ec:	4798      	blx	r3
}
    c2ee:	bf00      	nop
    c2f0:	bd80      	pop	{r7, pc}
    c2f2:	bf00      	nop
    c2f4:	200088b4 	.word	0x200088b4
    c2f8:	0000b715 	.word	0x0000b715

0000c2fc <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    c2fc:	b580      	push	{r7, lr}
    c2fe:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c300:	4b03      	ldr	r3, [pc, #12]	; (c310 <SERCOM7_3_Handler+0x14>)
    c302:	681b      	ldr	r3, [r3, #0]
    c304:	4618      	mov	r0, r3
    c306:	4b03      	ldr	r3, [pc, #12]	; (c314 <SERCOM7_3_Handler+0x18>)
    c308:	4798      	blx	r3
}
    c30a:	bf00      	nop
    c30c:	bd80      	pop	{r7, pc}
    c30e:	bf00      	nop
    c310:	200088b4 	.word	0x200088b4
    c314:	0000b715 	.word	0x0000b715

0000c318 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    c318:	b580      	push	{r7, lr}
    c31a:	b084      	sub	sp, #16
    c31c:	af00      	add	r7, sp, #0
    c31e:	6078      	str	r0, [r7, #4]
    c320:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    c322:	683b      	ldr	r3, [r7, #0]
    c324:	4618      	mov	r0, r3
    c326:	4b35      	ldr	r3, [pc, #212]	; (c3fc <_spi_m_sync_init+0xe4>)
    c328:	4798      	blx	r3
    c32a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    c32c:	687b      	ldr	r3, [r7, #4]
    c32e:	2b00      	cmp	r3, #0
    c330:	d004      	beq.n	c33c <_spi_m_sync_init+0x24>
    c332:	683b      	ldr	r3, [r7, #0]
    c334:	2b00      	cmp	r3, #0
    c336:	d001      	beq.n	c33c <_spi_m_sync_init+0x24>
    c338:	2301      	movs	r3, #1
    c33a:	e000      	b.n	c33e <_spi_m_sync_init+0x26>
    c33c:	2300      	movs	r3, #0
    c33e:	f003 0301 	and.w	r3, r3, #1
    c342:	b2db      	uxtb	r3, r3
    c344:	f640 128c 	movw	r2, #2444	; 0x98c
    c348:	492d      	ldr	r1, [pc, #180]	; (c400 <_spi_m_sync_init+0xe8>)
    c34a:	4618      	mov	r0, r3
    c34c:	4b2d      	ldr	r3, [pc, #180]	; (c404 <_spi_m_sync_init+0xec>)
    c34e:	4798      	blx	r3

	if (regs == NULL) {
    c350:	68fb      	ldr	r3, [r7, #12]
    c352:	2b00      	cmp	r3, #0
    c354:	d102      	bne.n	c35c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    c356:	f06f 030c 	mvn.w	r3, #12
    c35a:	e04a      	b.n	c3f2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    c35c:	2101      	movs	r1, #1
    c35e:	6838      	ldr	r0, [r7, #0]
    c360:	4b29      	ldr	r3, [pc, #164]	; (c408 <_spi_m_sync_init+0xf0>)
    c362:	4798      	blx	r3
    c364:	4603      	mov	r3, r0
    c366:	f083 0301 	eor.w	r3, r3, #1
    c36a:	b2db      	uxtb	r3, r3
    c36c:	2b00      	cmp	r3, #0
    c36e:	d019      	beq.n	c3a4 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    c370:	68fb      	ldr	r3, [r7, #12]
    c372:	681b      	ldr	r3, [r3, #0]
    c374:	f003 031c 	and.w	r3, r3, #28
    c378:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    c37a:	2102      	movs	r1, #2
    c37c:	6838      	ldr	r0, [r7, #0]
    c37e:	4b23      	ldr	r3, [pc, #140]	; (c40c <_spi_m_sync_init+0xf4>)
    c380:	4798      	blx	r3
    c382:	4603      	mov	r3, r0
    c384:	2b00      	cmp	r3, #0
    c386:	d006      	beq.n	c396 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    c388:	6838      	ldr	r0, [r7, #0]
    c38a:	4b21      	ldr	r3, [pc, #132]	; (c410 <_spi_m_sync_init+0xf8>)
    c38c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    c38e:	2102      	movs	r1, #2
    c390:	6838      	ldr	r0, [r7, #0]
    c392:	4b20      	ldr	r3, [pc, #128]	; (c414 <_spi_m_sync_init+0xfc>)
    c394:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    c396:	68bb      	ldr	r3, [r7, #8]
    c398:	f043 0301 	orr.w	r3, r3, #1
    c39c:	4619      	mov	r1, r3
    c39e:	6838      	ldr	r0, [r7, #0]
    c3a0:	4b1d      	ldr	r3, [pc, #116]	; (c418 <_spi_m_sync_init+0x100>)
    c3a2:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    c3a4:	2101      	movs	r1, #1
    c3a6:	6838      	ldr	r0, [r7, #0]
    c3a8:	4b1a      	ldr	r3, [pc, #104]	; (c414 <_spi_m_sync_init+0xfc>)
    c3aa:	4798      	blx	r3

	dev->prvt = hw;
    c3ac:	687b      	ldr	r3, [r7, #4]
    c3ae:	683a      	ldr	r2, [r7, #0]
    c3b0:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    c3b2:	68fb      	ldr	r3, [r7, #12]
    c3b4:	681b      	ldr	r3, [r3, #0]
    c3b6:	f003 031c 	and.w	r3, r3, #28
    c3ba:	2b08      	cmp	r3, #8
    c3bc:	d104      	bne.n	c3c8 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    c3be:	68f9      	ldr	r1, [r7, #12]
    c3c0:	6838      	ldr	r0, [r7, #0]
    c3c2:	4b16      	ldr	r3, [pc, #88]	; (c41c <_spi_m_sync_init+0x104>)
    c3c4:	4798      	blx	r3
    c3c6:	e003      	b.n	c3d0 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    c3c8:	68f9      	ldr	r1, [r7, #12]
    c3ca:	6838      	ldr	r0, [r7, #0]
    c3cc:	4b14      	ldr	r3, [pc, #80]	; (c420 <_spi_m_sync_init+0x108>)
    c3ce:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    c3d0:	68fb      	ldr	r3, [r7, #12]
    c3d2:	685b      	ldr	r3, [r3, #4]
    c3d4:	f003 0307 	and.w	r3, r3, #7
    c3d8:	2b00      	cmp	r3, #0
    c3da:	d101      	bne.n	c3e0 <_spi_m_sync_init+0xc8>
    c3dc:	2201      	movs	r2, #1
    c3de:	e000      	b.n	c3e2 <_spi_m_sync_init+0xca>
    c3e0:	2202      	movs	r2, #2
    c3e2:	687b      	ldr	r3, [r7, #4]
    c3e4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    c3e6:	68fb      	ldr	r3, [r7, #12]
    c3e8:	89db      	ldrh	r3, [r3, #14]
    c3ea:	b29a      	uxth	r2, r3
    c3ec:	687b      	ldr	r3, [r7, #4]
    c3ee:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    c3f0:	2300      	movs	r3, #0
}
    c3f2:	4618      	mov	r0, r3
    c3f4:	3710      	adds	r7, #16
    c3f6:	46bd      	mov	sp, r7
    c3f8:	bd80      	pop	{r7, pc}
    c3fa:	bf00      	nop
    c3fc:	0000c24d 	.word	0x0000c24d
    c400:	00020cb8 	.word	0x00020cb8
    c404:	000080d1 	.word	0x000080d1
    c408:	0000ad79 	.word	0x0000ad79
    c40c:	0000b061 	.word	0x0000b061
    c410:	0000b039 	.word	0x0000b039
    c414:	0000ad55 	.word	0x0000ad55
    c418:	0000b091 	.word	0x0000b091
    c41c:	0000c1a1 	.word	0x0000c1a1
    c420:	0000c10d 	.word	0x0000c10d

0000c424 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    c424:	b580      	push	{r7, lr}
    c426:	b082      	sub	sp, #8
    c428:	af00      	add	r7, sp, #0
    c42a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c42c:	687b      	ldr	r3, [r7, #4]
    c42e:	2b00      	cmp	r3, #0
    c430:	d005      	beq.n	c43e <_spi_m_sync_enable+0x1a>
    c432:	687b      	ldr	r3, [r7, #4]
    c434:	681b      	ldr	r3, [r3, #0]
    c436:	2b00      	cmp	r3, #0
    c438:	d001      	beq.n	c43e <_spi_m_sync_enable+0x1a>
    c43a:	2301      	movs	r3, #1
    c43c:	e000      	b.n	c440 <_spi_m_sync_enable+0x1c>
    c43e:	2300      	movs	r3, #0
    c440:	f003 0301 	and.w	r3, r3, #1
    c444:	b2db      	uxtb	r3, r3
    c446:	f640 12eb 	movw	r2, #2539	; 0x9eb
    c44a:	4907      	ldr	r1, [pc, #28]	; (c468 <_spi_m_sync_enable+0x44>)
    c44c:	4618      	mov	r0, r3
    c44e:	4b07      	ldr	r3, [pc, #28]	; (c46c <_spi_m_sync_enable+0x48>)
    c450:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    c452:	687b      	ldr	r3, [r7, #4]
    c454:	681b      	ldr	r3, [r3, #0]
    c456:	4618      	mov	r0, r3
    c458:	4b05      	ldr	r3, [pc, #20]	; (c470 <_spi_m_sync_enable+0x4c>)
    c45a:	4798      	blx	r3
    c45c:	4603      	mov	r3, r0
}
    c45e:	4618      	mov	r0, r3
    c460:	3708      	adds	r7, #8
    c462:	46bd      	mov	sp, r7
    c464:	bd80      	pop	{r7, pc}
    c466:	bf00      	nop
    c468:	00020cb8 	.word	0x00020cb8
    c46c:	000080d1 	.word	0x000080d1
    c470:	0000c0a5 	.word	0x0000c0a5

0000c474 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    c474:	b580      	push	{r7, lr}
    c476:	b082      	sub	sp, #8
    c478:	af00      	add	r7, sp, #0
    c47a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c47c:	687b      	ldr	r3, [r7, #4]
    c47e:	2b00      	cmp	r3, #0
    c480:	d005      	beq.n	c48e <_spi_m_sync_disable+0x1a>
    c482:	687b      	ldr	r3, [r7, #4]
    c484:	681b      	ldr	r3, [r3, #0]
    c486:	2b00      	cmp	r3, #0
    c488:	d001      	beq.n	c48e <_spi_m_sync_disable+0x1a>
    c48a:	2301      	movs	r3, #1
    c48c:	e000      	b.n	c490 <_spi_m_sync_disable+0x1c>
    c48e:	2300      	movs	r3, #0
    c490:	f003 0301 	and.w	r3, r3, #1
    c494:	b2db      	uxtb	r3, r3
    c496:	f640 2207 	movw	r2, #2567	; 0xa07
    c49a:	4907      	ldr	r1, [pc, #28]	; (c4b8 <_spi_m_sync_disable+0x44>)
    c49c:	4618      	mov	r0, r3
    c49e:	4b07      	ldr	r3, [pc, #28]	; (c4bc <_spi_m_sync_disable+0x48>)
    c4a0:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    c4a2:	687b      	ldr	r3, [r7, #4]
    c4a4:	681b      	ldr	r3, [r3, #0]
    c4a6:	4618      	mov	r0, r3
    c4a8:	4b05      	ldr	r3, [pc, #20]	; (c4c0 <_spi_m_sync_disable+0x4c>)
    c4aa:	4798      	blx	r3
    c4ac:	4603      	mov	r3, r0
}
    c4ae:	4618      	mov	r0, r3
    c4b0:	3708      	adds	r7, #8
    c4b2:	46bd      	mov	sp, r7
    c4b4:	bd80      	pop	{r7, pc}
    c4b6:	bf00      	nop
    c4b8:	00020cb8 	.word	0x00020cb8
    c4bc:	000080d1 	.word	0x000080d1
    c4c0:	0000c0d9 	.word	0x0000c0d9

0000c4c4 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    c4c4:	b580      	push	{r7, lr}
    c4c6:	b082      	sub	sp, #8
    c4c8:	af00      	add	r7, sp, #0
    c4ca:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    c4cc:	bf00      	nop
    c4ce:	2103      	movs	r1, #3
    c4d0:	6878      	ldr	r0, [r7, #4]
    c4d2:	4b06      	ldr	r3, [pc, #24]	; (c4ec <_spi_wait_bus_idle+0x28>)
    c4d4:	4798      	blx	r3
    c4d6:	4603      	mov	r3, r0
    c4d8:	2b00      	cmp	r3, #0
    c4da:	d0f8      	beq.n	c4ce <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    c4dc:	2103      	movs	r1, #3
    c4de:	6878      	ldr	r0, [r7, #4]
    c4e0:	4b03      	ldr	r3, [pc, #12]	; (c4f0 <_spi_wait_bus_idle+0x2c>)
    c4e2:	4798      	blx	r3
}
    c4e4:	bf00      	nop
    c4e6:	3708      	adds	r7, #8
    c4e8:	46bd      	mov	sp, r7
    c4ea:	bd80      	pop	{r7, pc}
    c4ec:	0000ae0d 	.word	0x0000ae0d
    c4f0:	0000ae4f 	.word	0x0000ae4f

0000c4f4 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    c4f4:	b580      	push	{r7, lr}
    c4f6:	b086      	sub	sp, #24
    c4f8:	af00      	add	r7, sp, #0
    c4fa:	60f8      	str	r0, [r7, #12]
    c4fc:	60b9      	str	r1, [r7, #8]
    c4fe:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    c500:	68bb      	ldr	r3, [r7, #8]
    c502:	f003 0304 	and.w	r3, r3, #4
    c506:	2b00      	cmp	r3, #0
    c508:	d101      	bne.n	c50e <_spi_rx_check_and_receive+0x1a>
		return false;
    c50a:	2300      	movs	r3, #0
    c50c:	e022      	b.n	c554 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    c50e:	68f8      	ldr	r0, [r7, #12]
    c510:	4b12      	ldr	r3, [pc, #72]	; (c55c <_spi_rx_check_and_receive+0x68>)
    c512:	4798      	blx	r3
    c514:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    c516:	687b      	ldr	r3, [r7, #4]
    c518:	685b      	ldr	r3, [r3, #4]
    c51a:	2b00      	cmp	r3, #0
    c51c:	d014      	beq.n	c548 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    c51e:	687b      	ldr	r3, [r7, #4]
    c520:	685b      	ldr	r3, [r3, #4]
    c522:	1c59      	adds	r1, r3, #1
    c524:	687a      	ldr	r2, [r7, #4]
    c526:	6051      	str	r1, [r2, #4]
    c528:	697a      	ldr	r2, [r7, #20]
    c52a:	b2d2      	uxtb	r2, r2
    c52c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    c52e:	687b      	ldr	r3, [r7, #4]
    c530:	7c1b      	ldrb	r3, [r3, #16]
    c532:	2b01      	cmp	r3, #1
    c534:	d908      	bls.n	c548 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    c536:	687b      	ldr	r3, [r7, #4]
    c538:	685b      	ldr	r3, [r3, #4]
    c53a:	1c59      	adds	r1, r3, #1
    c53c:	687a      	ldr	r2, [r7, #4]
    c53e:	6051      	str	r1, [r2, #4]
    c540:	697a      	ldr	r2, [r7, #20]
    c542:	0a12      	lsrs	r2, r2, #8
    c544:	b2d2      	uxtb	r2, r2
    c546:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    c548:	687b      	ldr	r3, [r7, #4]
    c54a:	68db      	ldr	r3, [r3, #12]
    c54c:	1c5a      	adds	r2, r3, #1
    c54e:	687b      	ldr	r3, [r7, #4]
    c550:	60da      	str	r2, [r3, #12]

	return true;
    c552:	2301      	movs	r3, #1
}
    c554:	4618      	mov	r0, r3
    c556:	3718      	adds	r7, #24
    c558:	46bd      	mov	sp, r7
    c55a:	bd80      	pop	{r7, pc}
    c55c:	0000b309 	.word	0x0000b309

0000c560 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    c560:	b580      	push	{r7, lr}
    c562:	b086      	sub	sp, #24
    c564:	af00      	add	r7, sp, #0
    c566:	60f8      	str	r0, [r7, #12]
    c568:	60b9      	str	r1, [r7, #8]
    c56a:	607a      	str	r2, [r7, #4]
    c56c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    c56e:	68bb      	ldr	r3, [r7, #8]
    c570:	f003 0301 	and.w	r3, r3, #1
    c574:	2b00      	cmp	r3, #0
    c576:	d028      	beq.n	c5ca <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    c578:	687b      	ldr	r3, [r7, #4]
    c57a:	681b      	ldr	r3, [r3, #0]
    c57c:	2b00      	cmp	r3, #0
    c57e:	d018      	beq.n	c5b2 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    c580:	687b      	ldr	r3, [r7, #4]
    c582:	681b      	ldr	r3, [r3, #0]
    c584:	1c59      	adds	r1, r3, #1
    c586:	687a      	ldr	r2, [r7, #4]
    c588:	6011      	str	r1, [r2, #0]
    c58a:	781b      	ldrb	r3, [r3, #0]
    c58c:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    c58e:	687b      	ldr	r3, [r7, #4]
    c590:	7c1b      	ldrb	r3, [r3, #16]
    c592:	2b01      	cmp	r3, #1
    c594:	d90f      	bls.n	c5b6 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    c596:	687b      	ldr	r3, [r7, #4]
    c598:	681b      	ldr	r3, [r3, #0]
    c59a:	781b      	ldrb	r3, [r3, #0]
    c59c:	021b      	lsls	r3, r3, #8
    c59e:	461a      	mov	r2, r3
    c5a0:	697b      	ldr	r3, [r7, #20]
    c5a2:	4313      	orrs	r3, r2
    c5a4:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    c5a6:	687b      	ldr	r3, [r7, #4]
    c5a8:	681b      	ldr	r3, [r3, #0]
    c5aa:	1c5a      	adds	r2, r3, #1
    c5ac:	687b      	ldr	r3, [r7, #4]
    c5ae:	601a      	str	r2, [r3, #0]
    c5b0:	e001      	b.n	c5b6 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    c5b2:	887b      	ldrh	r3, [r7, #2]
    c5b4:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    c5b6:	687b      	ldr	r3, [r7, #4]
    c5b8:	689b      	ldr	r3, [r3, #8]
    c5ba:	1c5a      	adds	r2, r3, #1
    c5bc:	687b      	ldr	r3, [r7, #4]
    c5be:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    c5c0:	6979      	ldr	r1, [r7, #20]
    c5c2:	68f8      	ldr	r0, [r7, #12]
    c5c4:	4b03      	ldr	r3, [pc, #12]	; (c5d4 <_spi_tx_check_and_send+0x74>)
    c5c6:	4798      	blx	r3
    c5c8:	e000      	b.n	c5cc <_spi_tx_check_and_send+0x6c>
		return;
    c5ca:	bf00      	nop
}
    c5cc:	3718      	adds	r7, #24
    c5ce:	46bd      	mov	sp, r7
    c5d0:	bd80      	pop	{r7, pc}
    c5d2:	bf00      	nop
    c5d4:	0000b2ed 	.word	0x0000b2ed

0000c5d8 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    c5d8:	b580      	push	{r7, lr}
    c5da:	b082      	sub	sp, #8
    c5dc:	af00      	add	r7, sp, #0
    c5de:	6078      	str	r0, [r7, #4]
    c5e0:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    c5e2:	687b      	ldr	r3, [r7, #4]
    c5e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d00b      	beq.n	c604 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    c5ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c5f0:	6838      	ldr	r0, [r7, #0]
    c5f2:	4b07      	ldr	r3, [pc, #28]	; (c610 <_spi_err_check+0x38>)
    c5f4:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    c5f6:	2180      	movs	r1, #128	; 0x80
    c5f8:	6838      	ldr	r0, [r7, #0]
    c5fa:	4b06      	ldr	r3, [pc, #24]	; (c614 <_spi_err_check+0x3c>)
    c5fc:	4798      	blx	r3
		return ERR_OVERFLOW;
    c5fe:	f06f 0312 	mvn.w	r3, #18
    c602:	e000      	b.n	c606 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    c604:	2300      	movs	r3, #0
}
    c606:	4618      	mov	r0, r3
    c608:	3708      	adds	r7, #8
    c60a:	46bd      	mov	sp, r7
    c60c:	bd80      	pop	{r7, pc}
    c60e:	bf00      	nop
    c610:	0000b341 	.word	0x0000b341
    c614:	0000ae4f 	.word	0x0000ae4f

0000c618 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    c618:	b590      	push	{r4, r7, lr}
    c61a:	b08b      	sub	sp, #44	; 0x2c
    c61c:	af00      	add	r7, sp, #0
    c61e:	6078      	str	r0, [r7, #4]
    c620:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    c622:	687b      	ldr	r3, [r7, #4]
    c624:	681b      	ldr	r3, [r3, #0]
    c626:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    c628:	2300      	movs	r3, #0
    c62a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    c62c:	683b      	ldr	r3, [r7, #0]
    c62e:	681b      	ldr	r3, [r3, #0]
    c630:	60bb      	str	r3, [r7, #8]
    c632:	683b      	ldr	r3, [r7, #0]
    c634:	685b      	ldr	r3, [r3, #4]
    c636:	60fb      	str	r3, [r7, #12]
    c638:	2300      	movs	r3, #0
    c63a:	613b      	str	r3, [r7, #16]
    c63c:	2300      	movs	r3, #0
    c63e:	617b      	str	r3, [r7, #20]
    c640:	687b      	ldr	r3, [r7, #4]
    c642:	791b      	ldrb	r3, [r3, #4]
    c644:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    c646:	687b      	ldr	r3, [r7, #4]
    c648:	2b00      	cmp	r3, #0
    c64a:	d004      	beq.n	c656 <_spi_m_sync_trans+0x3e>
    c64c:	6a3b      	ldr	r3, [r7, #32]
    c64e:	2b00      	cmp	r3, #0
    c650:	d001      	beq.n	c656 <_spi_m_sync_trans+0x3e>
    c652:	2301      	movs	r3, #1
    c654:	e000      	b.n	c658 <_spi_m_sync_trans+0x40>
    c656:	2300      	movs	r3, #0
    c658:	f003 0301 	and.w	r3, r3, #1
    c65c:	b2db      	uxtb	r3, r3
    c65e:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    c662:	492b      	ldr	r1, [pc, #172]	; (c710 <_spi_m_sync_trans+0xf8>)
    c664:	4618      	mov	r0, r3
    c666:	4b2b      	ldr	r3, [pc, #172]	; (c714 <_spi_m_sync_trans+0xfc>)
    c668:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    c66a:	2107      	movs	r1, #7
    c66c:	6a38      	ldr	r0, [r7, #32]
    c66e:	4b2a      	ldr	r3, [pc, #168]	; (c718 <_spi_m_sync_trans+0x100>)
    c670:	4798      	blx	r3
    c672:	4603      	mov	r3, r0
    c674:	2b00      	cmp	r3, #0
    c676:	d002      	beq.n	c67e <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    c678:	f06f 0303 	mvn.w	r3, #3
    c67c:	e043      	b.n	c706 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    c67e:	6a38      	ldr	r0, [r7, #32]
    c680:	4b26      	ldr	r3, [pc, #152]	; (c71c <_spi_m_sync_trans+0x104>)
    c682:	4798      	blx	r3
    c684:	4603      	mov	r3, r0
    c686:	f083 0301 	eor.w	r3, r3, #1
    c68a:	b2db      	uxtb	r3, r3
    c68c:	2b00      	cmp	r3, #0
    c68e:	d002      	beq.n	c696 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    c690:	f06f 0313 	mvn.w	r3, #19
    c694:	e037      	b.n	c706 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    c696:	6a38      	ldr	r0, [r7, #32]
    c698:	4b21      	ldr	r3, [pc, #132]	; (c720 <_spi_m_sync_trans+0x108>)
    c69a:	4798      	blx	r3
    c69c:	4603      	mov	r3, r0
    c69e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    c6a0:	f107 0308 	add.w	r3, r7, #8
    c6a4:	461a      	mov	r2, r3
    c6a6:	69f9      	ldr	r1, [r7, #28]
    c6a8:	6a38      	ldr	r0, [r7, #32]
    c6aa:	4b1e      	ldr	r3, [pc, #120]	; (c724 <_spi_m_sync_trans+0x10c>)
    c6ac:	4798      	blx	r3
    c6ae:	4603      	mov	r3, r0
    c6b0:	f083 0301 	eor.w	r3, r3, #1
    c6b4:	b2db      	uxtb	r3, r3
    c6b6:	2b00      	cmp	r3, #0
    c6b8:	d00b      	beq.n	c6d2 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    c6ba:	697a      	ldr	r2, [r7, #20]
    c6bc:	693b      	ldr	r3, [r7, #16]
    c6be:	429a      	cmp	r2, r3
    c6c0:	d307      	bcc.n	c6d2 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    c6c2:	687b      	ldr	r3, [r7, #4]
    c6c4:	88db      	ldrh	r3, [r3, #6]
    c6c6:	f107 0208 	add.w	r2, r7, #8
    c6ca:	69f9      	ldr	r1, [r7, #28]
    c6cc:	6a38      	ldr	r0, [r7, #32]
    c6ce:	4c16      	ldr	r4, [pc, #88]	; (c728 <_spi_m_sync_trans+0x110>)
    c6d0:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    c6d2:	6a39      	ldr	r1, [r7, #32]
    c6d4:	69f8      	ldr	r0, [r7, #28]
    c6d6:	4b15      	ldr	r3, [pc, #84]	; (c72c <_spi_m_sync_trans+0x114>)
    c6d8:	4798      	blx	r3
    c6da:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c6de:	2b00      	cmp	r3, #0
    c6e0:	db0c      	blt.n	c6fc <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    c6e2:	693a      	ldr	r2, [r7, #16]
    c6e4:	683b      	ldr	r3, [r7, #0]
    c6e6:	689b      	ldr	r3, [r3, #8]
    c6e8:	429a      	cmp	r2, r3
    c6ea:	d3d4      	bcc.n	c696 <_spi_m_sync_trans+0x7e>
    c6ec:	697a      	ldr	r2, [r7, #20]
    c6ee:	683b      	ldr	r3, [r7, #0]
    c6f0:	689b      	ldr	r3, [r3, #8]
    c6f2:	429a      	cmp	r2, r3
    c6f4:	d3cf      	bcc.n	c696 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    c6f6:	693b      	ldr	r3, [r7, #16]
    c6f8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    c6fa:	e000      	b.n	c6fe <_spi_m_sync_trans+0xe6>
			break;
    c6fc:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    c6fe:	6a38      	ldr	r0, [r7, #32]
    c700:	4b0b      	ldr	r3, [pc, #44]	; (c730 <_spi_m_sync_trans+0x118>)
    c702:	4798      	blx	r3

	return rc;
    c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c706:	4618      	mov	r0, r3
    c708:	372c      	adds	r7, #44	; 0x2c
    c70a:	46bd      	mov	sp, r7
    c70c:	bd90      	pop	{r4, r7, pc}
    c70e:	bf00      	nop
    c710:	00020cb8 	.word	0x00020cb8
    c714:	000080d1 	.word	0x000080d1
    c718:	0000ad79 	.word	0x0000ad79
    c71c:	0000b001 	.word	0x0000b001
    c720:	0000ae35 	.word	0x0000ae35
    c724:	0000c4f5 	.word	0x0000c4f5
    c728:	0000c561 	.word	0x0000c561
    c72c:	0000c5d9 	.word	0x0000c5d9
    c730:	0000c4c5 	.word	0x0000c4c5

0000c734 <__NVIC_EnableIRQ>:
{
    c734:	b480      	push	{r7}
    c736:	b083      	sub	sp, #12
    c738:	af00      	add	r7, sp, #0
    c73a:	4603      	mov	r3, r0
    c73c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c73e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c742:	2b00      	cmp	r3, #0
    c744:	db0b      	blt.n	c75e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c746:	4909      	ldr	r1, [pc, #36]	; (c76c <__NVIC_EnableIRQ+0x38>)
    c748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c74c:	095b      	lsrs	r3, r3, #5
    c74e:	88fa      	ldrh	r2, [r7, #6]
    c750:	f002 021f 	and.w	r2, r2, #31
    c754:	2001      	movs	r0, #1
    c756:	fa00 f202 	lsl.w	r2, r0, r2
    c75a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c75e:	bf00      	nop
    c760:	370c      	adds	r7, #12
    c762:	46bd      	mov	sp, r7
    c764:	f85d 7b04 	ldr.w	r7, [sp], #4
    c768:	4770      	bx	lr
    c76a:	bf00      	nop
    c76c:	e000e100 	.word	0xe000e100

0000c770 <__NVIC_DisableIRQ>:
{
    c770:	b480      	push	{r7}
    c772:	b083      	sub	sp, #12
    c774:	af00      	add	r7, sp, #0
    c776:	4603      	mov	r3, r0
    c778:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c77a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c77e:	2b00      	cmp	r3, #0
    c780:	db10      	blt.n	c7a4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c782:	490b      	ldr	r1, [pc, #44]	; (c7b0 <__NVIC_DisableIRQ+0x40>)
    c784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c788:	095b      	lsrs	r3, r3, #5
    c78a:	88fa      	ldrh	r2, [r7, #6]
    c78c:	f002 021f 	and.w	r2, r2, #31
    c790:	2001      	movs	r0, #1
    c792:	fa00 f202 	lsl.w	r2, r0, r2
    c796:	3320      	adds	r3, #32
    c798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    c79c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c7a0:	f3bf 8f6f 	isb	sy
}
    c7a4:	bf00      	nop
    c7a6:	370c      	adds	r7, #12
    c7a8:	46bd      	mov	sp, r7
    c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7ae:	4770      	bx	lr
    c7b0:	e000e100 	.word	0xe000e100

0000c7b4 <__NVIC_ClearPendingIRQ>:
{
    c7b4:	b480      	push	{r7}
    c7b6:	b083      	sub	sp, #12
    c7b8:	af00      	add	r7, sp, #0
    c7ba:	4603      	mov	r3, r0
    c7bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c7be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c7c2:	2b00      	cmp	r3, #0
    c7c4:	db0c      	blt.n	c7e0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c7c6:	4909      	ldr	r1, [pc, #36]	; (c7ec <__NVIC_ClearPendingIRQ+0x38>)
    c7c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c7cc:	095b      	lsrs	r3, r3, #5
    c7ce:	88fa      	ldrh	r2, [r7, #6]
    c7d0:	f002 021f 	and.w	r2, r2, #31
    c7d4:	2001      	movs	r0, #1
    c7d6:	fa00 f202 	lsl.w	r2, r0, r2
    c7da:	3360      	adds	r3, #96	; 0x60
    c7dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c7e0:	bf00      	nop
    c7e2:	370c      	adds	r7, #12
    c7e4:	46bd      	mov	sp, r7
    c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7ea:	4770      	bx	lr
    c7ec:	e000e100 	.word	0xe000e100

0000c7f0 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    c7f0:	b480      	push	{r7}
    c7f2:	b083      	sub	sp, #12
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	6078      	str	r0, [r7, #4]
    c7f8:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    c7fa:	bf00      	nop
    c7fc:	687b      	ldr	r3, [r7, #4]
    c7fe:	689a      	ldr	r2, [r3, #8]
    c800:	683b      	ldr	r3, [r7, #0]
    c802:	4013      	ands	r3, r2
    c804:	2b00      	cmp	r3, #0
    c806:	d1f9      	bne.n	c7fc <hri_tcc_wait_for_sync+0xc>
	};
}
    c808:	bf00      	nop
    c80a:	370c      	adds	r7, #12
    c80c:	46bd      	mov	sp, r7
    c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c812:	4770      	bx	lr

0000c814 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    c814:	b480      	push	{r7}
    c816:	b083      	sub	sp, #12
    c818:	af00      	add	r7, sp, #0
    c81a:	6078      	str	r0, [r7, #4]
    c81c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    c81e:	687b      	ldr	r3, [r7, #4]
    c820:	689a      	ldr	r2, [r3, #8]
    c822:	683b      	ldr	r3, [r7, #0]
    c824:	4013      	ands	r3, r2
    c826:	2b00      	cmp	r3, #0
    c828:	bf14      	ite	ne
    c82a:	2301      	movne	r3, #1
    c82c:	2300      	moveq	r3, #0
    c82e:	b2db      	uxtb	r3, r3
}
    c830:	4618      	mov	r0, r3
    c832:	370c      	adds	r7, #12
    c834:	46bd      	mov	sp, r7
    c836:	f85d 7b04 	ldr.w	r7, [sp], #4
    c83a:	4770      	bx	lr

0000c83c <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    c83c:	b480      	push	{r7}
    c83e:	b083      	sub	sp, #12
    c840:	af00      	add	r7, sp, #0
    c842:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    c844:	687b      	ldr	r3, [r7, #4]
    c846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c848:	f003 0301 	and.w	r3, r3, #1
    c84c:	2b00      	cmp	r3, #0
    c84e:	bf14      	ite	ne
    c850:	2301      	movne	r3, #1
    c852:	2300      	moveq	r3, #0
    c854:	b2db      	uxtb	r3, r3
}
    c856:	4618      	mov	r0, r3
    c858:	370c      	adds	r7, #12
    c85a:	46bd      	mov	sp, r7
    c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c860:	4770      	bx	lr

0000c862 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    c862:	b480      	push	{r7}
    c864:	b083      	sub	sp, #12
    c866:	af00      	add	r7, sp, #0
    c868:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    c86a:	687b      	ldr	r3, [r7, #4]
    c86c:	2201      	movs	r2, #1
    c86e:	62da      	str	r2, [r3, #44]	; 0x2c
}
    c870:	bf00      	nop
    c872:	370c      	adds	r7, #12
    c874:	46bd      	mov	sp, r7
    c876:	f85d 7b04 	ldr.w	r7, [sp], #4
    c87a:	4770      	bx	lr

0000c87c <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    c87c:	b480      	push	{r7}
    c87e:	b083      	sub	sp, #12
    c880:	af00      	add	r7, sp, #0
    c882:	6078      	str	r0, [r7, #4]
    c884:	460b      	mov	r3, r1
    c886:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    c888:	687b      	ldr	r3, [r7, #4]
    c88a:	78fa      	ldrb	r2, [r7, #3]
    c88c:	715a      	strb	r2, [r3, #5]
}
    c88e:	bf00      	nop
    c890:	370c      	adds	r7, #12
    c892:	46bd      	mov	sp, r7
    c894:	f85d 7b04 	ldr.w	r7, [sp], #4
    c898:	4770      	bx	lr

0000c89a <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    c89a:	b480      	push	{r7}
    c89c:	b083      	sub	sp, #12
    c89e:	af00      	add	r7, sp, #0
    c8a0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    c8a2:	687b      	ldr	r3, [r7, #4]
    c8a4:	2201      	movs	r2, #1
    c8a6:	629a      	str	r2, [r3, #40]	; 0x28
}
    c8a8:	bf00      	nop
    c8aa:	370c      	adds	r7, #12
    c8ac:	46bd      	mov	sp, r7
    c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8b2:	4770      	bx	lr

0000c8b4 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    c8b4:	b580      	push	{r7, lr}
    c8b6:	b082      	sub	sp, #8
    c8b8:	af00      	add	r7, sp, #0
    c8ba:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    c8bc:	687b      	ldr	r3, [r7, #4]
    c8be:	681b      	ldr	r3, [r3, #0]
    c8c0:	f043 0201 	orr.w	r2, r3, #1
    c8c4:	687b      	ldr	r3, [r7, #4]
    c8c6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    c8c8:	2101      	movs	r1, #1
    c8ca:	6878      	ldr	r0, [r7, #4]
    c8cc:	4b02      	ldr	r3, [pc, #8]	; (c8d8 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    c8ce:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c8d0:	bf00      	nop
    c8d2:	3708      	adds	r7, #8
    c8d4:	46bd      	mov	sp, r7
    c8d6:	bd80      	pop	{r7, pc}
    c8d8:	0000c7f1 	.word	0x0000c7f1

0000c8dc <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    c8dc:	b580      	push	{r7, lr}
    c8de:	b082      	sub	sp, #8
    c8e0:	af00      	add	r7, sp, #0
    c8e2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    c8e4:	687b      	ldr	r3, [r7, #4]
    c8e6:	681b      	ldr	r3, [r3, #0]
    c8e8:	f043 0202 	orr.w	r2, r3, #2
    c8ec:	687b      	ldr	r3, [r7, #4]
    c8ee:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c8f0:	2103      	movs	r1, #3
    c8f2:	6878      	ldr	r0, [r7, #4]
    c8f4:	4b02      	ldr	r3, [pc, #8]	; (c900 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    c8f6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c8f8:	bf00      	nop
    c8fa:	3708      	adds	r7, #8
    c8fc:	46bd      	mov	sp, r7
    c8fe:	bd80      	pop	{r7, pc}
    c900:	0000c7f1 	.word	0x0000c7f1

0000c904 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c904:	b580      	push	{r7, lr}
    c906:	b084      	sub	sp, #16
    c908:	af00      	add	r7, sp, #0
    c90a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c90c:	2103      	movs	r1, #3
    c90e:	6878      	ldr	r0, [r7, #4]
    c910:	4b09      	ldr	r3, [pc, #36]	; (c938 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    c912:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    c914:	687b      	ldr	r3, [r7, #4]
    c916:	681b      	ldr	r3, [r3, #0]
    c918:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    c91a:	68fb      	ldr	r3, [r7, #12]
    c91c:	085b      	lsrs	r3, r3, #1
    c91e:	f003 0301 	and.w	r3, r3, #1
    c922:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    c924:	68fb      	ldr	r3, [r7, #12]
    c926:	2b00      	cmp	r3, #0
    c928:	bf14      	ite	ne
    c92a:	2301      	movne	r3, #1
    c92c:	2300      	moveq	r3, #0
    c92e:	b2db      	uxtb	r3, r3
}
    c930:	4618      	mov	r0, r3
    c932:	3710      	adds	r7, #16
    c934:	46bd      	mov	sp, r7
    c936:	bd80      	pop	{r7, pc}
    c938:	0000c7f1 	.word	0x0000c7f1

0000c93c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c93c:	b580      	push	{r7, lr}
    c93e:	b082      	sub	sp, #8
    c940:	af00      	add	r7, sp, #0
    c942:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    c944:	687b      	ldr	r3, [r7, #4]
    c946:	681b      	ldr	r3, [r3, #0]
    c948:	f023 0202 	bic.w	r2, r3, #2
    c94c:	687b      	ldr	r3, [r7, #4]
    c94e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c950:	2103      	movs	r1, #3
    c952:	6878      	ldr	r0, [r7, #4]
    c954:	4b02      	ldr	r3, [pc, #8]	; (c960 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    c956:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c958:	bf00      	nop
    c95a:	3708      	adds	r7, #8
    c95c:	46bd      	mov	sp, r7
    c95e:	bd80      	pop	{r7, pc}
    c960:	0000c7f1 	.word	0x0000c7f1

0000c964 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    c964:	b580      	push	{r7, lr}
    c966:	b084      	sub	sp, #16
    c968:	af00      	add	r7, sp, #0
    c96a:	6078      	str	r0, [r7, #4]
    c96c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c96e:	2103      	movs	r1, #3
    c970:	6878      	ldr	r0, [r7, #4]
    c972:	4b07      	ldr	r3, [pc, #28]	; (c990 <hri_tcc_get_CTRLA_reg+0x2c>)
    c974:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    c976:	687b      	ldr	r3, [r7, #4]
    c978:	681b      	ldr	r3, [r3, #0]
    c97a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c97c:	68fa      	ldr	r2, [r7, #12]
    c97e:	683b      	ldr	r3, [r7, #0]
    c980:	4013      	ands	r3, r2
    c982:	60fb      	str	r3, [r7, #12]
	return tmp;
    c984:	68fb      	ldr	r3, [r7, #12]
}
    c986:	4618      	mov	r0, r3
    c988:	3710      	adds	r7, #16
    c98a:	46bd      	mov	sp, r7
    c98c:	bd80      	pop	{r7, pc}
    c98e:	bf00      	nop
    c990:	0000c7f1 	.word	0x0000c7f1

0000c994 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    c994:	b580      	push	{r7, lr}
    c996:	b082      	sub	sp, #8
    c998:	af00      	add	r7, sp, #0
    c99a:	6078      	str	r0, [r7, #4]
    c99c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    c99e:	687b      	ldr	r3, [r7, #4]
    c9a0:	683a      	ldr	r2, [r7, #0]
    c9a2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c9a4:	2103      	movs	r1, #3
    c9a6:	6878      	ldr	r0, [r7, #4]
    c9a8:	4b02      	ldr	r3, [pc, #8]	; (c9b4 <hri_tcc_write_CTRLA_reg+0x20>)
    c9aa:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c9ac:	bf00      	nop
    c9ae:	3708      	adds	r7, #8
    c9b0:	46bd      	mov	sp, r7
    c9b2:	bd80      	pop	{r7, pc}
    c9b4:	0000c7f1 	.word	0x0000c7f1

0000c9b8 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    c9b8:	b480      	push	{r7}
    c9ba:	b083      	sub	sp, #12
    c9bc:	af00      	add	r7, sp, #0
    c9be:	6078      	str	r0, [r7, #4]
    c9c0:	460b      	mov	r3, r1
    c9c2:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    c9c4:	687b      	ldr	r3, [r7, #4]
    c9c6:	78fa      	ldrb	r2, [r7, #3]
    c9c8:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    c9ca:	bf00      	nop
    c9cc:	370c      	adds	r7, #12
    c9ce:	46bd      	mov	sp, r7
    c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9d4:	4770      	bx	lr

0000c9d6 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    c9d6:	b480      	push	{r7}
    c9d8:	b083      	sub	sp, #12
    c9da:	af00      	add	r7, sp, #0
    c9dc:	6078      	str	r0, [r7, #4]
    c9de:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    c9e0:	687b      	ldr	r3, [r7, #4]
    c9e2:	683a      	ldr	r2, [r7, #0]
    c9e4:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    c9e6:	bf00      	nop
    c9e8:	370c      	adds	r7, #12
    c9ea:	46bd      	mov	sp, r7
    c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9f0:	4770      	bx	lr
	...

0000c9f4 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    c9f4:	b580      	push	{r7, lr}
    c9f6:	b082      	sub	sp, #8
    c9f8:	af00      	add	r7, sp, #0
    c9fa:	6078      	str	r0, [r7, #4]
    c9fc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    c9fe:	687b      	ldr	r3, [r7, #4]
    ca00:	683a      	ldr	r2, [r7, #0]
    ca02:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    ca04:	2180      	movs	r1, #128	; 0x80
    ca06:	6878      	ldr	r0, [r7, #4]
    ca08:	4b02      	ldr	r3, [pc, #8]	; (ca14 <hri_tcc_write_PER_reg+0x20>)
    ca0a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    ca0c:	bf00      	nop
    ca0e:	3708      	adds	r7, #8
    ca10:	46bd      	mov	sp, r7
    ca12:	bd80      	pop	{r7, pc}
    ca14:	0000c7f1 	.word	0x0000c7f1

0000ca18 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    ca18:	b580      	push	{r7, lr}
    ca1a:	b082      	sub	sp, #8
    ca1c:	af00      	add	r7, sp, #0
    ca1e:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    ca20:	2180      	movs	r1, #128	; 0x80
    ca22:	6878      	ldr	r0, [r7, #4]
    ca24:	4b03      	ldr	r3, [pc, #12]	; (ca34 <hri_tcc_read_PER_reg+0x1c>)
    ca26:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    ca28:	687b      	ldr	r3, [r7, #4]
    ca2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    ca2c:	4618      	mov	r0, r3
    ca2e:	3708      	adds	r7, #8
    ca30:	46bd      	mov	sp, r7
    ca32:	bd80      	pop	{r7, pc}
    ca34:	0000c7f1 	.word	0x0000c7f1

0000ca38 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    ca38:	b480      	push	{r7}
    ca3a:	b083      	sub	sp, #12
    ca3c:	af00      	add	r7, sp, #0
    ca3e:	6078      	str	r0, [r7, #4]
    ca40:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    ca42:	687b      	ldr	r3, [r7, #4]
    ca44:	4a09      	ldr	r2, [pc, #36]	; (ca6c <_tcc_init_irq_param+0x34>)
    ca46:	4293      	cmp	r3, r2
    ca48:	d102      	bne.n	ca50 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    ca4a:	4a09      	ldr	r2, [pc, #36]	; (ca70 <_tcc_init_irq_param+0x38>)
    ca4c:	683b      	ldr	r3, [r7, #0]
    ca4e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    ca50:	687b      	ldr	r3, [r7, #4]
    ca52:	4a08      	ldr	r2, [pc, #32]	; (ca74 <_tcc_init_irq_param+0x3c>)
    ca54:	4293      	cmp	r3, r2
    ca56:	d102      	bne.n	ca5e <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    ca58:	4a07      	ldr	r2, [pc, #28]	; (ca78 <_tcc_init_irq_param+0x40>)
    ca5a:	683b      	ldr	r3, [r7, #0]
    ca5c:	6013      	str	r3, [r2, #0]
	}
}
    ca5e:	bf00      	nop
    ca60:	370c      	adds	r7, #12
    ca62:	46bd      	mov	sp, r7
    ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca68:	4770      	bx	lr
    ca6a:	bf00      	nop
    ca6c:	41016000 	.word	0x41016000
    ca70:	200088c8 	.word	0x200088c8
    ca74:	41018000 	.word	0x41018000
    ca78:	200088cc 	.word	0x200088cc

0000ca7c <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    ca7c:	b580      	push	{r7, lr}
    ca7e:	b084      	sub	sp, #16
    ca80:	af00      	add	r7, sp, #0
    ca82:	6078      	str	r0, [r7, #4]
    ca84:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    ca86:	6838      	ldr	r0, [r7, #0]
    ca88:	4b33      	ldr	r3, [pc, #204]	; (cb58 <_tcc_timer_init+0xdc>)
    ca8a:	4798      	blx	r3
    ca8c:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    ca8e:	68fb      	ldr	r3, [r7, #12]
    ca90:	2b00      	cmp	r3, #0
    ca92:	d102      	bne.n	ca9a <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    ca94:	f06f 0309 	mvn.w	r3, #9
    ca98:	e05a      	b.n	cb50 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    ca9a:	687b      	ldr	r3, [r7, #4]
    ca9c:	683a      	ldr	r2, [r7, #0]
    ca9e:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    caa0:	2101      	movs	r1, #1
    caa2:	6838      	ldr	r0, [r7, #0]
    caa4:	4b2d      	ldr	r3, [pc, #180]	; (cb5c <_tcc_timer_init+0xe0>)
    caa6:	4798      	blx	r3
    caa8:	4603      	mov	r3, r0
    caaa:	f083 0301 	eor.w	r3, r3, #1
    caae:	b2db      	uxtb	r3, r3
    cab0:	2b00      	cmp	r3, #0
    cab2:	d011      	beq.n	cad8 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    cab4:	2102      	movs	r1, #2
    cab6:	6838      	ldr	r0, [r7, #0]
    cab8:	4b29      	ldr	r3, [pc, #164]	; (cb60 <_tcc_timer_init+0xe4>)
    caba:	4798      	blx	r3
    cabc:	4603      	mov	r3, r0
    cabe:	2b00      	cmp	r3, #0
    cac0:	d006      	beq.n	cad0 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    cac2:	6838      	ldr	r0, [r7, #0]
    cac4:	4b27      	ldr	r3, [pc, #156]	; (cb64 <_tcc_timer_init+0xe8>)
    cac6:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    cac8:	2102      	movs	r1, #2
    caca:	6838      	ldr	r0, [r7, #0]
    cacc:	4b26      	ldr	r3, [pc, #152]	; (cb68 <_tcc_timer_init+0xec>)
    cace:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    cad0:	2101      	movs	r1, #1
    cad2:	6838      	ldr	r0, [r7, #0]
    cad4:	4b25      	ldr	r3, [pc, #148]	; (cb6c <_tcc_timer_init+0xf0>)
    cad6:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    cad8:	2101      	movs	r1, #1
    cada:	6838      	ldr	r0, [r7, #0]
    cadc:	4b22      	ldr	r3, [pc, #136]	; (cb68 <_tcc_timer_init+0xec>)
    cade:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    cae0:	68fb      	ldr	r3, [r7, #12]
    cae2:	689b      	ldr	r3, [r3, #8]
    cae4:	4619      	mov	r1, r3
    cae6:	6838      	ldr	r0, [r7, #0]
    cae8:	4b20      	ldr	r3, [pc, #128]	; (cb6c <_tcc_timer_init+0xf0>)
    caea:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    caec:	68fb      	ldr	r3, [r7, #12]
    caee:	7b1b      	ldrb	r3, [r3, #12]
    caf0:	4619      	mov	r1, r3
    caf2:	6838      	ldr	r0, [r7, #0]
    caf4:	4b1e      	ldr	r3, [pc, #120]	; (cb70 <_tcc_timer_init+0xf4>)
    caf6:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    caf8:	68fb      	ldr	r3, [r7, #12]
    cafa:	7b5b      	ldrb	r3, [r3, #13]
    cafc:	4619      	mov	r1, r3
    cafe:	6838      	ldr	r0, [r7, #0]
    cb00:	4b1c      	ldr	r3, [pc, #112]	; (cb74 <_tcc_timer_init+0xf8>)
    cb02:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    cb04:	68fb      	ldr	r3, [r7, #12]
    cb06:	691b      	ldr	r3, [r3, #16]
    cb08:	4619      	mov	r1, r3
    cb0a:	6838      	ldr	r0, [r7, #0]
    cb0c:	4b1a      	ldr	r3, [pc, #104]	; (cb78 <_tcc_timer_init+0xfc>)
    cb0e:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    cb10:	68fb      	ldr	r3, [r7, #12]
    cb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    cb14:	4619      	mov	r1, r3
    cb16:	6838      	ldr	r0, [r7, #0]
    cb18:	4b18      	ldr	r3, [pc, #96]	; (cb7c <_tcc_timer_init+0x100>)
    cb1a:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    cb1c:	6838      	ldr	r0, [r7, #0]
    cb1e:	4b18      	ldr	r3, [pc, #96]	; (cb80 <_tcc_timer_init+0x104>)
    cb20:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    cb22:	6879      	ldr	r1, [r7, #4]
    cb24:	6838      	ldr	r0, [r7, #0]
    cb26:	4b17      	ldr	r3, [pc, #92]	; (cb84 <_tcc_timer_init+0x108>)
    cb28:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    cb2a:	68fb      	ldr	r3, [r7, #12]
    cb2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cb30:	4618      	mov	r0, r3
    cb32:	4b15      	ldr	r3, [pc, #84]	; (cb88 <_tcc_timer_init+0x10c>)
    cb34:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    cb36:	68fb      	ldr	r3, [r7, #12]
    cb38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cb3c:	4618      	mov	r0, r3
    cb3e:	4b13      	ldr	r3, [pc, #76]	; (cb8c <_tcc_timer_init+0x110>)
    cb40:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    cb42:	68fb      	ldr	r3, [r7, #12]
    cb44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cb48:	4618      	mov	r0, r3
    cb4a:	4b11      	ldr	r3, [pc, #68]	; (cb90 <_tcc_timer_init+0x114>)
    cb4c:	4798      	blx	r3

	return ERR_NONE;
    cb4e:	2300      	movs	r3, #0
}
    cb50:	4618      	mov	r0, r3
    cb52:	3710      	adds	r7, #16
    cb54:	46bd      	mov	sp, r7
    cb56:	bd80      	pop	{r7, pc}
    cb58:	0000cd45 	.word	0x0000cd45
    cb5c:	0000c815 	.word	0x0000c815
    cb60:	0000c965 	.word	0x0000c965
    cb64:	0000c93d 	.word	0x0000c93d
    cb68:	0000c7f1 	.word	0x0000c7f1
    cb6c:	0000c995 	.word	0x0000c995
    cb70:	0000c87d 	.word	0x0000c87d
    cb74:	0000c9b9 	.word	0x0000c9b9
    cb78:	0000c9d7 	.word	0x0000c9d7
    cb7c:	0000c9f5 	.word	0x0000c9f5
    cb80:	0000c89b 	.word	0x0000c89b
    cb84:	0000ca39 	.word	0x0000ca39
    cb88:	0000c771 	.word	0x0000c771
    cb8c:	0000c7b5 	.word	0x0000c7b5
    cb90:	0000c735 	.word	0x0000c735

0000cb94 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    cb94:	b580      	push	{r7, lr}
    cb96:	b084      	sub	sp, #16
    cb98:	af00      	add	r7, sp, #0
    cb9a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    cb9c:	687b      	ldr	r3, [r7, #4]
    cb9e:	68db      	ldr	r3, [r3, #12]
    cba0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    cba2:	68f8      	ldr	r0, [r7, #12]
    cba4:	4b0a      	ldr	r3, [pc, #40]	; (cbd0 <_tcc_timer_deinit+0x3c>)
    cba6:	4798      	blx	r3
    cba8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    cbaa:	68bb      	ldr	r3, [r7, #8]
    cbac:	2b00      	cmp	r3, #0
    cbae:	d00b      	beq.n	cbc8 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    cbb0:	68bb      	ldr	r3, [r7, #8]
    cbb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cbb6:	4618      	mov	r0, r3
    cbb8:	4b06      	ldr	r3, [pc, #24]	; (cbd4 <_tcc_timer_deinit+0x40>)
    cbba:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    cbbc:	68f8      	ldr	r0, [r7, #12]
    cbbe:	4b06      	ldr	r3, [pc, #24]	; (cbd8 <_tcc_timer_deinit+0x44>)
    cbc0:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    cbc2:	68f8      	ldr	r0, [r7, #12]
    cbc4:	4b05      	ldr	r3, [pc, #20]	; (cbdc <_tcc_timer_deinit+0x48>)
    cbc6:	4798      	blx	r3
	}
}
    cbc8:	bf00      	nop
    cbca:	3710      	adds	r7, #16
    cbcc:	46bd      	mov	sp, r7
    cbce:	bd80      	pop	{r7, pc}
    cbd0:	0000cd45 	.word	0x0000cd45
    cbd4:	0000c771 	.word	0x0000c771
    cbd8:	0000c93d 	.word	0x0000c93d
    cbdc:	0000c8b5 	.word	0x0000c8b5

0000cbe0 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    cbe0:	b580      	push	{r7, lr}
    cbe2:	b082      	sub	sp, #8
    cbe4:	af00      	add	r7, sp, #0
    cbe6:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    cbe8:	687b      	ldr	r3, [r7, #4]
    cbea:	68db      	ldr	r3, [r3, #12]
    cbec:	4618      	mov	r0, r3
    cbee:	4b03      	ldr	r3, [pc, #12]	; (cbfc <_tcc_timer_start+0x1c>)
    cbf0:	4798      	blx	r3
}
    cbf2:	bf00      	nop
    cbf4:	3708      	adds	r7, #8
    cbf6:	46bd      	mov	sp, r7
    cbf8:	bd80      	pop	{r7, pc}
    cbfa:	bf00      	nop
    cbfc:	0000c8dd 	.word	0x0000c8dd

0000cc00 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    cc00:	b580      	push	{r7, lr}
    cc02:	b082      	sub	sp, #8
    cc04:	af00      	add	r7, sp, #0
    cc06:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    cc08:	687b      	ldr	r3, [r7, #4]
    cc0a:	68db      	ldr	r3, [r3, #12]
    cc0c:	4618      	mov	r0, r3
    cc0e:	4b03      	ldr	r3, [pc, #12]	; (cc1c <_tcc_timer_stop+0x1c>)
    cc10:	4798      	blx	r3
}
    cc12:	bf00      	nop
    cc14:	3708      	adds	r7, #8
    cc16:	46bd      	mov	sp, r7
    cc18:	bd80      	pop	{r7, pc}
    cc1a:	bf00      	nop
    cc1c:	0000c93d 	.word	0x0000c93d

0000cc20 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    cc20:	b580      	push	{r7, lr}
    cc22:	b082      	sub	sp, #8
    cc24:	af00      	add	r7, sp, #0
    cc26:	6078      	str	r0, [r7, #4]
    cc28:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    cc2a:	687b      	ldr	r3, [r7, #4]
    cc2c:	68db      	ldr	r3, [r3, #12]
    cc2e:	6839      	ldr	r1, [r7, #0]
    cc30:	4618      	mov	r0, r3
    cc32:	4b03      	ldr	r3, [pc, #12]	; (cc40 <_tcc_timer_set_period+0x20>)
    cc34:	4798      	blx	r3
}
    cc36:	bf00      	nop
    cc38:	3708      	adds	r7, #8
    cc3a:	46bd      	mov	sp, r7
    cc3c:	bd80      	pop	{r7, pc}
    cc3e:	bf00      	nop
    cc40:	0000c9f5 	.word	0x0000c9f5

0000cc44 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    cc44:	b580      	push	{r7, lr}
    cc46:	b082      	sub	sp, #8
    cc48:	af00      	add	r7, sp, #0
    cc4a:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    cc4c:	687b      	ldr	r3, [r7, #4]
    cc4e:	68db      	ldr	r3, [r3, #12]
    cc50:	4618      	mov	r0, r3
    cc52:	4b03      	ldr	r3, [pc, #12]	; (cc60 <_tcc_timer_get_period+0x1c>)
    cc54:	4798      	blx	r3
    cc56:	4603      	mov	r3, r0
}
    cc58:	4618      	mov	r0, r3
    cc5a:	3708      	adds	r7, #8
    cc5c:	46bd      	mov	sp, r7
    cc5e:	bd80      	pop	{r7, pc}
    cc60:	0000ca19 	.word	0x0000ca19

0000cc64 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    cc64:	b580      	push	{r7, lr}
    cc66:	b082      	sub	sp, #8
    cc68:	af00      	add	r7, sp, #0
    cc6a:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    cc6c:	687b      	ldr	r3, [r7, #4]
    cc6e:	68db      	ldr	r3, [r3, #12]
    cc70:	4618      	mov	r0, r3
    cc72:	4b03      	ldr	r3, [pc, #12]	; (cc80 <_tcc_timer_is_started+0x1c>)
    cc74:	4798      	blx	r3
    cc76:	4603      	mov	r3, r0
}
    cc78:	4618      	mov	r0, r3
    cc7a:	3708      	adds	r7, #8
    cc7c:	46bd      	mov	sp, r7
    cc7e:	bd80      	pop	{r7, pc}
    cc80:	0000c905 	.word	0x0000c905

0000cc84 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    cc84:	b480      	push	{r7}
    cc86:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    cc88:	4b02      	ldr	r3, [pc, #8]	; (cc94 <_tcc_get_timer+0x10>)
}
    cc8a:	4618      	mov	r0, r3
    cc8c:	46bd      	mov	sp, r7
    cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc92:	4770      	bx	lr
    cc94:	20000124 	.word	0x20000124

0000cc98 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    cc98:	b580      	push	{r7, lr}
    cc9a:	b084      	sub	sp, #16
    cc9c:	af00      	add	r7, sp, #0
    cc9e:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    cca0:	687b      	ldr	r3, [r7, #4]
    cca2:	68db      	ldr	r3, [r3, #12]
    cca4:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    cca6:	68f8      	ldr	r0, [r7, #12]
    cca8:	4b08      	ldr	r3, [pc, #32]	; (cccc <_tcc_timer_set_irq+0x34>)
    ccaa:	4798      	blx	r3
    ccac:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    ccae:	68bb      	ldr	r3, [r7, #8]
    ccb0:	2b00      	cmp	r3, #0
    ccb2:	d006      	beq.n	ccc2 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    ccb4:	68bb      	ldr	r3, [r7, #8]
    ccb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    ccba:	b2db      	uxtb	r3, r3
    ccbc:	4618      	mov	r0, r3
    ccbe:	4b04      	ldr	r3, [pc, #16]	; (ccd0 <_tcc_timer_set_irq+0x38>)
    ccc0:	4798      	blx	r3
	}
}
    ccc2:	bf00      	nop
    ccc4:	3710      	adds	r7, #16
    ccc6:	46bd      	mov	sp, r7
    ccc8:	bd80      	pop	{r7, pc}
    ccca:	bf00      	nop
    cccc:	0000cd45 	.word	0x0000cd45
    ccd0:	0000891d 	.word	0x0000891d

0000ccd4 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    ccd4:	b580      	push	{r7, lr}
    ccd6:	b084      	sub	sp, #16
    ccd8:	af00      	add	r7, sp, #0
    ccda:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    ccdc:	687b      	ldr	r3, [r7, #4]
    ccde:	68db      	ldr	r3, [r3, #12]
    cce0:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    cce2:	68f8      	ldr	r0, [r7, #12]
    cce4:	4b07      	ldr	r3, [pc, #28]	; (cd04 <tcc_interrupt_handler+0x30>)
    cce6:	4798      	blx	r3
    cce8:	4603      	mov	r3, r0
    ccea:	2b00      	cmp	r3, #0
    ccec:	d006      	beq.n	ccfc <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    ccee:	68f8      	ldr	r0, [r7, #12]
    ccf0:	4b05      	ldr	r3, [pc, #20]	; (cd08 <tcc_interrupt_handler+0x34>)
    ccf2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    ccf4:	687b      	ldr	r3, [r7, #4]
    ccf6:	681b      	ldr	r3, [r3, #0]
    ccf8:	6878      	ldr	r0, [r7, #4]
    ccfa:	4798      	blx	r3
	}
}
    ccfc:	bf00      	nop
    ccfe:	3710      	adds	r7, #16
    cd00:	46bd      	mov	sp, r7
    cd02:	bd80      	pop	{r7, pc}
    cd04:	0000c83d 	.word	0x0000c83d
    cd08:	0000c863 	.word	0x0000c863

0000cd0c <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    cd0c:	b580      	push	{r7, lr}
    cd0e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    cd10:	4b03      	ldr	r3, [pc, #12]	; (cd20 <TCC0_0_Handler+0x14>)
    cd12:	681b      	ldr	r3, [r3, #0]
    cd14:	4618      	mov	r0, r3
    cd16:	4b03      	ldr	r3, [pc, #12]	; (cd24 <TCC0_0_Handler+0x18>)
    cd18:	4798      	blx	r3
}
    cd1a:	bf00      	nop
    cd1c:	bd80      	pop	{r7, pc}
    cd1e:	bf00      	nop
    cd20:	200088c8 	.word	0x200088c8
    cd24:	0000ccd5 	.word	0x0000ccd5

0000cd28 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    cd28:	b580      	push	{r7, lr}
    cd2a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    cd2c:	4b03      	ldr	r3, [pc, #12]	; (cd3c <TCC1_0_Handler+0x14>)
    cd2e:	681b      	ldr	r3, [r3, #0]
    cd30:	4618      	mov	r0, r3
    cd32:	4b03      	ldr	r3, [pc, #12]	; (cd40 <TCC1_0_Handler+0x18>)
    cd34:	4798      	blx	r3
}
    cd36:	bf00      	nop
    cd38:	bd80      	pop	{r7, pc}
    cd3a:	bf00      	nop
    cd3c:	200088cc 	.word	0x200088cc
    cd40:	0000ccd5 	.word	0x0000ccd5

0000cd44 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    cd44:	b480      	push	{r7}
    cd46:	b085      	sub	sp, #20
    cd48:	af00      	add	r7, sp, #0
    cd4a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    cd4c:	2300      	movs	r3, #0
    cd4e:	73fb      	strb	r3, [r7, #15]
    cd50:	e015      	b.n	cd7e <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    cd52:	7bfa      	ldrb	r2, [r7, #15]
    cd54:	490f      	ldr	r1, [pc, #60]	; (cd94 <_get_tcc_cfg+0x50>)
    cd56:	4613      	mov	r3, r2
    cd58:	005b      	lsls	r3, r3, #1
    cd5a:	4413      	add	r3, r2
    cd5c:	011b      	lsls	r3, r3, #4
    cd5e:	440b      	add	r3, r1
    cd60:	681a      	ldr	r2, [r3, #0]
    cd62:	687b      	ldr	r3, [r7, #4]
    cd64:	429a      	cmp	r2, r3
    cd66:	d107      	bne.n	cd78 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    cd68:	7bfa      	ldrb	r2, [r7, #15]
    cd6a:	4613      	mov	r3, r2
    cd6c:	005b      	lsls	r3, r3, #1
    cd6e:	4413      	add	r3, r2
    cd70:	011b      	lsls	r3, r3, #4
    cd72:	4a08      	ldr	r2, [pc, #32]	; (cd94 <_get_tcc_cfg+0x50>)
    cd74:	4413      	add	r3, r2
    cd76:	e006      	b.n	cd86 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    cd78:	7bfb      	ldrb	r3, [r7, #15]
    cd7a:	3301      	adds	r3, #1
    cd7c:	73fb      	strb	r3, [r7, #15]
    cd7e:	7bfb      	ldrb	r3, [r7, #15]
    cd80:	2b01      	cmp	r3, #1
    cd82:	d9e6      	bls.n	cd52 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    cd84:	2300      	movs	r3, #0
}
    cd86:	4618      	mov	r0, r3
    cd88:	3714      	adds	r7, #20
    cd8a:	46bd      	mov	sp, r7
    cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd90:	4770      	bx	lr
    cd92:	bf00      	nop
    cd94:	200000c4 	.word	0x200000c4

0000cd98 <__NVIC_EnableIRQ>:
{
    cd98:	b480      	push	{r7}
    cd9a:	b083      	sub	sp, #12
    cd9c:	af00      	add	r7, sp, #0
    cd9e:	4603      	mov	r3, r0
    cda0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    cda2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cda6:	2b00      	cmp	r3, #0
    cda8:	db0b      	blt.n	cdc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cdaa:	4909      	ldr	r1, [pc, #36]	; (cdd0 <__NVIC_EnableIRQ+0x38>)
    cdac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cdb0:	095b      	lsrs	r3, r3, #5
    cdb2:	88fa      	ldrh	r2, [r7, #6]
    cdb4:	f002 021f 	and.w	r2, r2, #31
    cdb8:	2001      	movs	r0, #1
    cdba:	fa00 f202 	lsl.w	r2, r0, r2
    cdbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cdc2:	bf00      	nop
    cdc4:	370c      	adds	r7, #12
    cdc6:	46bd      	mov	sp, r7
    cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdcc:	4770      	bx	lr
    cdce:	bf00      	nop
    cdd0:	e000e100 	.word	0xe000e100

0000cdd4 <__NVIC_DisableIRQ>:
{
    cdd4:	b480      	push	{r7}
    cdd6:	b083      	sub	sp, #12
    cdd8:	af00      	add	r7, sp, #0
    cdda:	4603      	mov	r3, r0
    cddc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    cdde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cde2:	2b00      	cmp	r3, #0
    cde4:	db10      	blt.n	ce08 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cde6:	490b      	ldr	r1, [pc, #44]	; (ce14 <__NVIC_DisableIRQ+0x40>)
    cde8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cdec:	095b      	lsrs	r3, r3, #5
    cdee:	88fa      	ldrh	r2, [r7, #6]
    cdf0:	f002 021f 	and.w	r2, r2, #31
    cdf4:	2001      	movs	r0, #1
    cdf6:	fa00 f202 	lsl.w	r2, r0, r2
    cdfa:	3320      	adds	r3, #32
    cdfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    ce00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ce04:	f3bf 8f6f 	isb	sy
}
    ce08:	bf00      	nop
    ce0a:	370c      	adds	r7, #12
    ce0c:	46bd      	mov	sp, r7
    ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce12:	4770      	bx	lr
    ce14:	e000e100 	.word	0xe000e100

0000ce18 <__NVIC_ClearPendingIRQ>:
{
    ce18:	b480      	push	{r7}
    ce1a:	b083      	sub	sp, #12
    ce1c:	af00      	add	r7, sp, #0
    ce1e:	4603      	mov	r3, r0
    ce20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ce22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ce26:	2b00      	cmp	r3, #0
    ce28:	db0c      	blt.n	ce44 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ce2a:	4909      	ldr	r1, [pc, #36]	; (ce50 <__NVIC_ClearPendingIRQ+0x38>)
    ce2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ce30:	095b      	lsrs	r3, r3, #5
    ce32:	88fa      	ldrh	r2, [r7, #6]
    ce34:	f002 021f 	and.w	r2, r2, #31
    ce38:	2001      	movs	r0, #1
    ce3a:	fa00 f202 	lsl.w	r2, r0, r2
    ce3e:	3360      	adds	r3, #96	; 0x60
    ce40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce44:	bf00      	nop
    ce46:	370c      	adds	r7, #12
    ce48:	46bd      	mov	sp, r7
    ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce4e:	4770      	bx	lr
    ce50:	e000e100 	.word	0xe000e100

0000ce54 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    ce54:	b480      	push	{r7}
    ce56:	b083      	sub	sp, #12
    ce58:	af00      	add	r7, sp, #0
    ce5a:	6078      	str	r0, [r7, #4]
    ce5c:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    ce5e:	bf00      	nop
    ce60:	687b      	ldr	r3, [r7, #4]
    ce62:	691a      	ldr	r2, [r3, #16]
    ce64:	683b      	ldr	r3, [r7, #0]
    ce66:	4013      	ands	r3, r2
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d1f9      	bne.n	ce60 <hri_tc_wait_for_sync+0xc>
	};
}
    ce6c:	bf00      	nop
    ce6e:	370c      	adds	r7, #12
    ce70:	46bd      	mov	sp, r7
    ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce76:	4770      	bx	lr

0000ce78 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    ce78:	b480      	push	{r7}
    ce7a:	b083      	sub	sp, #12
    ce7c:	af00      	add	r7, sp, #0
    ce7e:	6078      	str	r0, [r7, #4]
    ce80:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    ce82:	687b      	ldr	r3, [r7, #4]
    ce84:	691a      	ldr	r2, [r3, #16]
    ce86:	683b      	ldr	r3, [r7, #0]
    ce88:	4013      	ands	r3, r2
    ce8a:	2b00      	cmp	r3, #0
    ce8c:	bf14      	ite	ne
    ce8e:	2301      	movne	r3, #1
    ce90:	2300      	moveq	r3, #0
    ce92:	b2db      	uxtb	r3, r3
}
    ce94:	4618      	mov	r0, r3
    ce96:	370c      	adds	r7, #12
    ce98:	46bd      	mov	sp, r7
    ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce9e:	4770      	bx	lr

0000cea0 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    cea0:	b480      	push	{r7}
    cea2:	b083      	sub	sp, #12
    cea4:	af00      	add	r7, sp, #0
    cea6:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    cea8:	687b      	ldr	r3, [r7, #4]
    ceaa:	7a9b      	ldrb	r3, [r3, #10]
    ceac:	b2db      	uxtb	r3, r3
    ceae:	f003 0301 	and.w	r3, r3, #1
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	bf14      	ite	ne
    ceb6:	2301      	movne	r3, #1
    ceb8:	2300      	moveq	r3, #0
    ceba:	b2db      	uxtb	r3, r3
}
    cebc:	4618      	mov	r0, r3
    cebe:	370c      	adds	r7, #12
    cec0:	46bd      	mov	sp, r7
    cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cec6:	4770      	bx	lr

0000cec8 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    cec8:	b480      	push	{r7}
    ceca:	b083      	sub	sp, #12
    cecc:	af00      	add	r7, sp, #0
    cece:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    ced0:	687b      	ldr	r3, [r7, #4]
    ced2:	2201      	movs	r2, #1
    ced4:	729a      	strb	r2, [r3, #10]
}
    ced6:	bf00      	nop
    ced8:	370c      	adds	r7, #12
    ceda:	46bd      	mov	sp, r7
    cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cee0:	4770      	bx	lr

0000cee2 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    cee2:	b480      	push	{r7}
    cee4:	b083      	sub	sp, #12
    cee6:	af00      	add	r7, sp, #0
    cee8:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    ceea:	687b      	ldr	r3, [r7, #4]
    ceec:	2202      	movs	r2, #2
    ceee:	729a      	strb	r2, [r3, #10]
}
    cef0:	bf00      	nop
    cef2:	370c      	adds	r7, #12
    cef4:	46bd      	mov	sp, r7
    cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    cefa:	4770      	bx	lr

0000cefc <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    cefc:	b480      	push	{r7}
    cefe:	b083      	sub	sp, #12
    cf00:	af00      	add	r7, sp, #0
    cf02:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    cf04:	687b      	ldr	r3, [r7, #4]
    cf06:	2201      	movs	r2, #1
    cf08:	725a      	strb	r2, [r3, #9]
}
    cf0a:	bf00      	nop
    cf0c:	370c      	adds	r7, #12
    cf0e:	46bd      	mov	sp, r7
    cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf14:	4770      	bx	lr

0000cf16 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    cf16:	b480      	push	{r7}
    cf18:	b083      	sub	sp, #12
    cf1a:	af00      	add	r7, sp, #0
    cf1c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    cf1e:	687b      	ldr	r3, [r7, #4]
    cf20:	7a5b      	ldrb	r3, [r3, #9]
    cf22:	b2db      	uxtb	r3, r3
    cf24:	085b      	lsrs	r3, r3, #1
    cf26:	f003 0301 	and.w	r3, r3, #1
    cf2a:	2b00      	cmp	r3, #0
    cf2c:	bf14      	ite	ne
    cf2e:	2301      	movne	r3, #1
    cf30:	2300      	moveq	r3, #0
    cf32:	b2db      	uxtb	r3, r3
}
    cf34:	4618      	mov	r0, r3
    cf36:	370c      	adds	r7, #12
    cf38:	46bd      	mov	sp, r7
    cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf3e:	4770      	bx	lr

0000cf40 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    cf40:	b580      	push	{r7, lr}
    cf42:	b082      	sub	sp, #8
    cf44:	af00      	add	r7, sp, #0
    cf46:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    cf48:	687b      	ldr	r3, [r7, #4]
    cf4a:	681b      	ldr	r3, [r3, #0]
    cf4c:	f043 0201 	orr.w	r2, r3, #1
    cf50:	687b      	ldr	r3, [r7, #4]
    cf52:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    cf54:	2101      	movs	r1, #1
    cf56:	6878      	ldr	r0, [r7, #4]
    cf58:	4b02      	ldr	r3, [pc, #8]	; (cf64 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    cf5a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cf5c:	bf00      	nop
    cf5e:	3708      	adds	r7, #8
    cf60:	46bd      	mov	sp, r7
    cf62:	bd80      	pop	{r7, pc}
    cf64:	0000ce55 	.word	0x0000ce55

0000cf68 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    cf68:	b580      	push	{r7, lr}
    cf6a:	b082      	sub	sp, #8
    cf6c:	af00      	add	r7, sp, #0
    cf6e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    cf70:	687b      	ldr	r3, [r7, #4]
    cf72:	681b      	ldr	r3, [r3, #0]
    cf74:	f043 0202 	orr.w	r2, r3, #2
    cf78:	687b      	ldr	r3, [r7, #4]
    cf7a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cf7c:	2103      	movs	r1, #3
    cf7e:	6878      	ldr	r0, [r7, #4]
    cf80:	4b02      	ldr	r3, [pc, #8]	; (cf8c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    cf82:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cf84:	bf00      	nop
    cf86:	3708      	adds	r7, #8
    cf88:	46bd      	mov	sp, r7
    cf8a:	bd80      	pop	{r7, pc}
    cf8c:	0000ce55 	.word	0x0000ce55

0000cf90 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    cf90:	b580      	push	{r7, lr}
    cf92:	b084      	sub	sp, #16
    cf94:	af00      	add	r7, sp, #0
    cf96:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cf98:	2103      	movs	r1, #3
    cf9a:	6878      	ldr	r0, [r7, #4]
    cf9c:	4b09      	ldr	r3, [pc, #36]	; (cfc4 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    cf9e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    cfa0:	687b      	ldr	r3, [r7, #4]
    cfa2:	681b      	ldr	r3, [r3, #0]
    cfa4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    cfa6:	68fb      	ldr	r3, [r7, #12]
    cfa8:	085b      	lsrs	r3, r3, #1
    cfaa:	f003 0301 	and.w	r3, r3, #1
    cfae:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    cfb0:	68fb      	ldr	r3, [r7, #12]
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	bf14      	ite	ne
    cfb6:	2301      	movne	r3, #1
    cfb8:	2300      	moveq	r3, #0
    cfba:	b2db      	uxtb	r3, r3
}
    cfbc:	4618      	mov	r0, r3
    cfbe:	3710      	adds	r7, #16
    cfc0:	46bd      	mov	sp, r7
    cfc2:	bd80      	pop	{r7, pc}
    cfc4:	0000ce55 	.word	0x0000ce55

0000cfc8 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    cfc8:	b580      	push	{r7, lr}
    cfca:	b082      	sub	sp, #8
    cfcc:	af00      	add	r7, sp, #0
    cfce:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    cfd0:	687b      	ldr	r3, [r7, #4]
    cfd2:	681b      	ldr	r3, [r3, #0]
    cfd4:	f023 0202 	bic.w	r2, r3, #2
    cfd8:	687b      	ldr	r3, [r7, #4]
    cfda:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cfdc:	2103      	movs	r1, #3
    cfde:	6878      	ldr	r0, [r7, #4]
    cfe0:	4b02      	ldr	r3, [pc, #8]	; (cfec <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    cfe2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cfe4:	bf00      	nop
    cfe6:	3708      	adds	r7, #8
    cfe8:	46bd      	mov	sp, r7
    cfea:	bd80      	pop	{r7, pc}
    cfec:	0000ce55 	.word	0x0000ce55

0000cff0 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    cff0:	b480      	push	{r7}
    cff2:	b085      	sub	sp, #20
    cff4:	af00      	add	r7, sp, #0
    cff6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    cff8:	687b      	ldr	r3, [r7, #4]
    cffa:	681b      	ldr	r3, [r3, #0]
    cffc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    cffe:	68fb      	ldr	r3, [r7, #12]
    d000:	089b      	lsrs	r3, r3, #2
    d002:	f003 0303 	and.w	r3, r3, #3
    d006:	60fb      	str	r3, [r7, #12]
	return tmp;
    d008:	68fb      	ldr	r3, [r7, #12]
}
    d00a:	4618      	mov	r0, r3
    d00c:	3714      	adds	r7, #20
    d00e:	46bd      	mov	sp, r7
    d010:	f85d 7b04 	ldr.w	r7, [sp], #4
    d014:	4770      	bx	lr
	...

0000d018 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    d018:	b580      	push	{r7, lr}
    d01a:	b084      	sub	sp, #16
    d01c:	af00      	add	r7, sp, #0
    d01e:	6078      	str	r0, [r7, #4]
    d020:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d022:	2103      	movs	r1, #3
    d024:	6878      	ldr	r0, [r7, #4]
    d026:	4b07      	ldr	r3, [pc, #28]	; (d044 <hri_tc_get_CTRLA_reg+0x2c>)
    d028:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    d02a:	687b      	ldr	r3, [r7, #4]
    d02c:	681b      	ldr	r3, [r3, #0]
    d02e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    d030:	68fa      	ldr	r2, [r7, #12]
    d032:	683b      	ldr	r3, [r7, #0]
    d034:	4013      	ands	r3, r2
    d036:	60fb      	str	r3, [r7, #12]
	return tmp;
    d038:	68fb      	ldr	r3, [r7, #12]
}
    d03a:	4618      	mov	r0, r3
    d03c:	3710      	adds	r7, #16
    d03e:	46bd      	mov	sp, r7
    d040:	bd80      	pop	{r7, pc}
    d042:	bf00      	nop
    d044:	0000ce55 	.word	0x0000ce55

0000d048 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    d048:	b580      	push	{r7, lr}
    d04a:	b082      	sub	sp, #8
    d04c:	af00      	add	r7, sp, #0
    d04e:	6078      	str	r0, [r7, #4]
    d050:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    d052:	687b      	ldr	r3, [r7, #4]
    d054:	683a      	ldr	r2, [r7, #0]
    d056:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d058:	2103      	movs	r1, #3
    d05a:	6878      	ldr	r0, [r7, #4]
    d05c:	4b02      	ldr	r3, [pc, #8]	; (d068 <hri_tc_write_CTRLA_reg+0x20>)
    d05e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d060:	bf00      	nop
    d062:	3708      	adds	r7, #8
    d064:	46bd      	mov	sp, r7
    d066:	bd80      	pop	{r7, pc}
    d068:	0000ce55 	.word	0x0000ce55

0000d06c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    d06c:	b480      	push	{r7}
    d06e:	b083      	sub	sp, #12
    d070:	af00      	add	r7, sp, #0
    d072:	6078      	str	r0, [r7, #4]
    d074:	460b      	mov	r3, r1
    d076:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    d078:	687b      	ldr	r3, [r7, #4]
    d07a:	887a      	ldrh	r2, [r7, #2]
    d07c:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    d07e:	bf00      	nop
    d080:	370c      	adds	r7, #12
    d082:	46bd      	mov	sp, r7
    d084:	f85d 7b04 	ldr.w	r7, [sp], #4
    d088:	4770      	bx	lr

0000d08a <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    d08a:	b480      	push	{r7}
    d08c:	b083      	sub	sp, #12
    d08e:	af00      	add	r7, sp, #0
    d090:	6078      	str	r0, [r7, #4]
    d092:	460b      	mov	r3, r1
    d094:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    d096:	687b      	ldr	r3, [r7, #4]
    d098:	78fa      	ldrb	r2, [r7, #3]
    d09a:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    d09c:	bf00      	nop
    d09e:	370c      	adds	r7, #12
    d0a0:	46bd      	mov	sp, r7
    d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0a6:	4770      	bx	lr

0000d0a8 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    d0a8:	b480      	push	{r7}
    d0aa:	b083      	sub	sp, #12
    d0ac:	af00      	add	r7, sp, #0
    d0ae:	6078      	str	r0, [r7, #4]
    d0b0:	460b      	mov	r3, r1
    d0b2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    d0b4:	687b      	ldr	r3, [r7, #4]
    d0b6:	78fa      	ldrb	r2, [r7, #3]
    d0b8:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    d0ba:	bf00      	nop
    d0bc:	370c      	adds	r7, #12
    d0be:	46bd      	mov	sp, r7
    d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0c4:	4770      	bx	lr
	...

0000d0c8 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    d0c8:	b580      	push	{r7, lr}
    d0ca:	b082      	sub	sp, #8
    d0cc:	af00      	add	r7, sp, #0
    d0ce:	6078      	str	r0, [r7, #4]
    d0d0:	460b      	mov	r3, r1
    d0d2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    d0d4:	687b      	ldr	r3, [r7, #4]
    d0d6:	78fa      	ldrb	r2, [r7, #3]
    d0d8:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    d0da:	2120      	movs	r1, #32
    d0dc:	6878      	ldr	r0, [r7, #4]
    d0de:	4b03      	ldr	r3, [pc, #12]	; (d0ec <hri_tccount8_write_PER_reg+0x24>)
    d0e0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d0e2:	bf00      	nop
    d0e4:	3708      	adds	r7, #8
    d0e6:	46bd      	mov	sp, r7
    d0e8:	bd80      	pop	{r7, pc}
    d0ea:	bf00      	nop
    d0ec:	0000ce55 	.word	0x0000ce55

0000d0f0 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    d0f0:	b580      	push	{r7, lr}
    d0f2:	b082      	sub	sp, #8
    d0f4:	af00      	add	r7, sp, #0
    d0f6:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    d0f8:	2120      	movs	r1, #32
    d0fa:	6878      	ldr	r0, [r7, #4]
    d0fc:	4b04      	ldr	r3, [pc, #16]	; (d110 <hri_tccount8_read_PER_reg+0x20>)
    d0fe:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    d100:	687b      	ldr	r3, [r7, #4]
    d102:	7edb      	ldrb	r3, [r3, #27]
    d104:	b2db      	uxtb	r3, r3
}
    d106:	4618      	mov	r0, r3
    d108:	3708      	adds	r7, #8
    d10a:	46bd      	mov	sp, r7
    d10c:	bd80      	pop	{r7, pc}
    d10e:	bf00      	nop
    d110:	0000ce55 	.word	0x0000ce55

0000d114 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    d114:	b580      	push	{r7, lr}
    d116:	b082      	sub	sp, #8
    d118:	af00      	add	r7, sp, #0
    d11a:	6078      	str	r0, [r7, #4]
    d11c:	460b      	mov	r3, r1
    d11e:	70fb      	strb	r3, [r7, #3]
    d120:	4613      	mov	r3, r2
    d122:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    d124:	78fb      	ldrb	r3, [r7, #3]
    d126:	687a      	ldr	r2, [r7, #4]
    d128:	4413      	add	r3, r2
    d12a:	78ba      	ldrb	r2, [r7, #2]
    d12c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d12e:	21c0      	movs	r1, #192	; 0xc0
    d130:	6878      	ldr	r0, [r7, #4]
    d132:	4b03      	ldr	r3, [pc, #12]	; (d140 <hri_tccount8_write_CC_reg+0x2c>)
    d134:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d136:	bf00      	nop
    d138:	3708      	adds	r7, #8
    d13a:	46bd      	mov	sp, r7
    d13c:	bd80      	pop	{r7, pc}
    d13e:	bf00      	nop
    d140:	0000ce55 	.word	0x0000ce55

0000d144 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    d144:	b580      	push	{r7, lr}
    d146:	b082      	sub	sp, #8
    d148:	af00      	add	r7, sp, #0
    d14a:	6078      	str	r0, [r7, #4]
    d14c:	460b      	mov	r3, r1
    d14e:	70fb      	strb	r3, [r7, #3]
    d150:	4613      	mov	r3, r2
    d152:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    d154:	78fb      	ldrb	r3, [r7, #3]
    d156:	687a      	ldr	r2, [r7, #4]
    d158:	330c      	adds	r3, #12
    d15a:	005b      	lsls	r3, r3, #1
    d15c:	4413      	add	r3, r2
    d15e:	883a      	ldrh	r2, [r7, #0]
    d160:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d162:	21c0      	movs	r1, #192	; 0xc0
    d164:	6878      	ldr	r0, [r7, #4]
    d166:	4b03      	ldr	r3, [pc, #12]	; (d174 <hri_tccount16_write_CC_reg+0x30>)
    d168:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d16a:	bf00      	nop
    d16c:	3708      	adds	r7, #8
    d16e:	46bd      	mov	sp, r7
    d170:	bd80      	pop	{r7, pc}
    d172:	bf00      	nop
    d174:	0000ce55 	.word	0x0000ce55

0000d178 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    d178:	b580      	push	{r7, lr}
    d17a:	b082      	sub	sp, #8
    d17c:	af00      	add	r7, sp, #0
    d17e:	6078      	str	r0, [r7, #4]
    d180:	460b      	mov	r3, r1
    d182:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d184:	21c0      	movs	r1, #192	; 0xc0
    d186:	6878      	ldr	r0, [r7, #4]
    d188:	4b06      	ldr	r3, [pc, #24]	; (d1a4 <hri_tccount16_read_CC_reg+0x2c>)
    d18a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    d18c:	78fb      	ldrb	r3, [r7, #3]
    d18e:	687a      	ldr	r2, [r7, #4]
    d190:	330c      	adds	r3, #12
    d192:	005b      	lsls	r3, r3, #1
    d194:	4413      	add	r3, r2
    d196:	889b      	ldrh	r3, [r3, #4]
    d198:	b29b      	uxth	r3, r3
}
    d19a:	4618      	mov	r0, r3
    d19c:	3708      	adds	r7, #8
    d19e:	46bd      	mov	sp, r7
    d1a0:	bd80      	pop	{r7, pc}
    d1a2:	bf00      	nop
    d1a4:	0000ce55 	.word	0x0000ce55

0000d1a8 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    d1a8:	b580      	push	{r7, lr}
    d1aa:	b084      	sub	sp, #16
    d1ac:	af00      	add	r7, sp, #0
    d1ae:	60f8      	str	r0, [r7, #12]
    d1b0:	460b      	mov	r3, r1
    d1b2:	607a      	str	r2, [r7, #4]
    d1b4:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    d1b6:	7afb      	ldrb	r3, [r7, #11]
    d1b8:	68fa      	ldr	r2, [r7, #12]
    d1ba:	3306      	adds	r3, #6
    d1bc:	009b      	lsls	r3, r3, #2
    d1be:	4413      	add	r3, r2
    d1c0:	687a      	ldr	r2, [r7, #4]
    d1c2:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d1c4:	21c0      	movs	r1, #192	; 0xc0
    d1c6:	68f8      	ldr	r0, [r7, #12]
    d1c8:	4b02      	ldr	r3, [pc, #8]	; (d1d4 <hri_tccount32_write_CC_reg+0x2c>)
    d1ca:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d1cc:	bf00      	nop
    d1ce:	3710      	adds	r7, #16
    d1d0:	46bd      	mov	sp, r7
    d1d2:	bd80      	pop	{r7, pc}
    d1d4:	0000ce55 	.word	0x0000ce55

0000d1d8 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    d1d8:	b580      	push	{r7, lr}
    d1da:	b082      	sub	sp, #8
    d1dc:	af00      	add	r7, sp, #0
    d1de:	6078      	str	r0, [r7, #4]
    d1e0:	460b      	mov	r3, r1
    d1e2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d1e4:	21c0      	movs	r1, #192	; 0xc0
    d1e6:	6878      	ldr	r0, [r7, #4]
    d1e8:	4b05      	ldr	r3, [pc, #20]	; (d200 <hri_tccount32_read_CC_reg+0x28>)
    d1ea:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    d1ec:	78fb      	ldrb	r3, [r7, #3]
    d1ee:	687a      	ldr	r2, [r7, #4]
    d1f0:	3306      	adds	r3, #6
    d1f2:	009b      	lsls	r3, r3, #2
    d1f4:	4413      	add	r3, r2
    d1f6:	685b      	ldr	r3, [r3, #4]
}
    d1f8:	4618      	mov	r0, r3
    d1fa:	3708      	adds	r7, #8
    d1fc:	46bd      	mov	sp, r7
    d1fe:	bd80      	pop	{r7, pc}
    d200:	0000ce55 	.word	0x0000ce55

0000d204 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    d204:	b580      	push	{r7, lr}
    d206:	b084      	sub	sp, #16
    d208:	af00      	add	r7, sp, #0
    d20a:	6078      	str	r0, [r7, #4]
    d20c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    d20e:	6838      	ldr	r0, [r7, #0]
    d210:	4b93      	ldr	r3, [pc, #588]	; (d460 <_tc_timer_init+0x25c>)
    d212:	4798      	blx	r3
    d214:	4603      	mov	r3, r0
    d216:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    d218:	687b      	ldr	r3, [r7, #4]
    d21a:	683a      	ldr	r2, [r7, #0]
    d21c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    d21e:	22a4      	movs	r2, #164	; 0xa4
    d220:	4990      	ldr	r1, [pc, #576]	; (d464 <_tc_timer_init+0x260>)
    d222:	2001      	movs	r0, #1
    d224:	4b90      	ldr	r3, [pc, #576]	; (d468 <_tc_timer_init+0x264>)
    d226:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    d228:	2101      	movs	r1, #1
    d22a:	6838      	ldr	r0, [r7, #0]
    d22c:	4b8f      	ldr	r3, [pc, #572]	; (d46c <_tc_timer_init+0x268>)
    d22e:	4798      	blx	r3
    d230:	4603      	mov	r3, r0
    d232:	f083 0301 	eor.w	r3, r3, #1
    d236:	b2db      	uxtb	r3, r3
    d238:	2b00      	cmp	r3, #0
    d23a:	d011      	beq.n	d260 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    d23c:	2102      	movs	r1, #2
    d23e:	6838      	ldr	r0, [r7, #0]
    d240:	4b8b      	ldr	r3, [pc, #556]	; (d470 <_tc_timer_init+0x26c>)
    d242:	4798      	blx	r3
    d244:	4603      	mov	r3, r0
    d246:	2b00      	cmp	r3, #0
    d248:	d006      	beq.n	d258 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d24a:	6838      	ldr	r0, [r7, #0]
    d24c:	4b89      	ldr	r3, [pc, #548]	; (d474 <_tc_timer_init+0x270>)
    d24e:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    d250:	2102      	movs	r1, #2
    d252:	6838      	ldr	r0, [r7, #0]
    d254:	4b88      	ldr	r3, [pc, #544]	; (d478 <_tc_timer_init+0x274>)
    d256:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    d258:	2101      	movs	r1, #1
    d25a:	6838      	ldr	r0, [r7, #0]
    d25c:	4b87      	ldr	r3, [pc, #540]	; (d47c <_tc_timer_init+0x278>)
    d25e:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    d260:	2101      	movs	r1, #1
    d262:	6838      	ldr	r0, [r7, #0]
    d264:	4b84      	ldr	r3, [pc, #528]	; (d478 <_tc_timer_init+0x274>)
    d266:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    d268:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d26c:	4984      	ldr	r1, [pc, #528]	; (d480 <_tc_timer_init+0x27c>)
    d26e:	4613      	mov	r3, r2
    d270:	009b      	lsls	r3, r3, #2
    d272:	4413      	add	r3, r2
    d274:	009b      	lsls	r3, r3, #2
    d276:	440b      	add	r3, r1
    d278:	3304      	adds	r3, #4
    d27a:	681b      	ldr	r3, [r3, #0]
    d27c:	4619      	mov	r1, r3
    d27e:	6838      	ldr	r0, [r7, #0]
    d280:	4b7e      	ldr	r3, [pc, #504]	; (d47c <_tc_timer_init+0x278>)
    d282:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    d284:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d288:	497d      	ldr	r1, [pc, #500]	; (d480 <_tc_timer_init+0x27c>)
    d28a:	4613      	mov	r3, r2
    d28c:	009b      	lsls	r3, r3, #2
    d28e:	4413      	add	r3, r2
    d290:	009b      	lsls	r3, r3, #2
    d292:	440b      	add	r3, r1
    d294:	330a      	adds	r3, #10
    d296:	781b      	ldrb	r3, [r3, #0]
    d298:	4619      	mov	r1, r3
    d29a:	6838      	ldr	r0, [r7, #0]
    d29c:	4b79      	ldr	r3, [pc, #484]	; (d484 <_tc_timer_init+0x280>)
    d29e:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    d2a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d2a4:	4976      	ldr	r1, [pc, #472]	; (d480 <_tc_timer_init+0x27c>)
    d2a6:	4613      	mov	r3, r2
    d2a8:	009b      	lsls	r3, r3, #2
    d2aa:	4413      	add	r3, r2
    d2ac:	009b      	lsls	r3, r3, #2
    d2ae:	440b      	add	r3, r1
    d2b0:	3308      	adds	r3, #8
    d2b2:	881b      	ldrh	r3, [r3, #0]
    d2b4:	4619      	mov	r1, r3
    d2b6:	6838      	ldr	r0, [r7, #0]
    d2b8:	4b73      	ldr	r3, [pc, #460]	; (d488 <_tc_timer_init+0x284>)
    d2ba:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    d2bc:	2101      	movs	r1, #1
    d2be:	6838      	ldr	r0, [r7, #0]
    d2c0:	4b72      	ldr	r3, [pc, #456]	; (d48c <_tc_timer_init+0x288>)
    d2c2:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    d2c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d2c8:	496d      	ldr	r1, [pc, #436]	; (d480 <_tc_timer_init+0x27c>)
    d2ca:	4613      	mov	r3, r2
    d2cc:	009b      	lsls	r3, r3, #2
    d2ce:	4413      	add	r3, r2
    d2d0:	009b      	lsls	r3, r3, #2
    d2d2:	440b      	add	r3, r1
    d2d4:	3304      	adds	r3, #4
    d2d6:	681b      	ldr	r3, [r3, #0]
    d2d8:	f003 030c 	and.w	r3, r3, #12
    d2dc:	2b08      	cmp	r3, #8
    d2de:	d11e      	bne.n	d31e <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    d2e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d2e4:	4966      	ldr	r1, [pc, #408]	; (d480 <_tc_timer_init+0x27c>)
    d2e6:	4613      	mov	r3, r2
    d2e8:	009b      	lsls	r3, r3, #2
    d2ea:	4413      	add	r3, r2
    d2ec:	009b      	lsls	r3, r3, #2
    d2ee:	440b      	add	r3, r1
    d2f0:	330c      	adds	r3, #12
    d2f2:	681b      	ldr	r3, [r3, #0]
    d2f4:	461a      	mov	r2, r3
    d2f6:	2100      	movs	r1, #0
    d2f8:	6838      	ldr	r0, [r7, #0]
    d2fa:	4b65      	ldr	r3, [pc, #404]	; (d490 <_tc_timer_init+0x28c>)
    d2fc:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    d2fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d302:	495f      	ldr	r1, [pc, #380]	; (d480 <_tc_timer_init+0x27c>)
    d304:	4613      	mov	r3, r2
    d306:	009b      	lsls	r3, r3, #2
    d308:	4413      	add	r3, r2
    d30a:	009b      	lsls	r3, r3, #2
    d30c:	440b      	add	r3, r1
    d30e:	3310      	adds	r3, #16
    d310:	681b      	ldr	r3, [r3, #0]
    d312:	461a      	mov	r2, r3
    d314:	2101      	movs	r1, #1
    d316:	6838      	ldr	r0, [r7, #0]
    d318:	4b5d      	ldr	r3, [pc, #372]	; (d490 <_tc_timer_init+0x28c>)
    d31a:	4798      	blx	r3
    d31c:	e06a      	b.n	d3f4 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    d31e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d322:	4957      	ldr	r1, [pc, #348]	; (d480 <_tc_timer_init+0x27c>)
    d324:	4613      	mov	r3, r2
    d326:	009b      	lsls	r3, r3, #2
    d328:	4413      	add	r3, r2
    d32a:	009b      	lsls	r3, r3, #2
    d32c:	440b      	add	r3, r1
    d32e:	3304      	adds	r3, #4
    d330:	681b      	ldr	r3, [r3, #0]
    d332:	f003 030c 	and.w	r3, r3, #12
    d336:	2b00      	cmp	r3, #0
    d338:	d120      	bne.n	d37c <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    d33a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d33e:	4950      	ldr	r1, [pc, #320]	; (d480 <_tc_timer_init+0x27c>)
    d340:	4613      	mov	r3, r2
    d342:	009b      	lsls	r3, r3, #2
    d344:	4413      	add	r3, r2
    d346:	009b      	lsls	r3, r3, #2
    d348:	440b      	add	r3, r1
    d34a:	330c      	adds	r3, #12
    d34c:	681b      	ldr	r3, [r3, #0]
    d34e:	b29b      	uxth	r3, r3
    d350:	461a      	mov	r2, r3
    d352:	2100      	movs	r1, #0
    d354:	6838      	ldr	r0, [r7, #0]
    d356:	4b4f      	ldr	r3, [pc, #316]	; (d494 <_tc_timer_init+0x290>)
    d358:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    d35a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d35e:	4948      	ldr	r1, [pc, #288]	; (d480 <_tc_timer_init+0x27c>)
    d360:	4613      	mov	r3, r2
    d362:	009b      	lsls	r3, r3, #2
    d364:	4413      	add	r3, r2
    d366:	009b      	lsls	r3, r3, #2
    d368:	440b      	add	r3, r1
    d36a:	3310      	adds	r3, #16
    d36c:	681b      	ldr	r3, [r3, #0]
    d36e:	b29b      	uxth	r3, r3
    d370:	461a      	mov	r2, r3
    d372:	2101      	movs	r1, #1
    d374:	6838      	ldr	r0, [r7, #0]
    d376:	4b47      	ldr	r3, [pc, #284]	; (d494 <_tc_timer_init+0x290>)
    d378:	4798      	blx	r3
    d37a:	e03b      	b.n	d3f4 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    d37c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d380:	493f      	ldr	r1, [pc, #252]	; (d480 <_tc_timer_init+0x27c>)
    d382:	4613      	mov	r3, r2
    d384:	009b      	lsls	r3, r3, #2
    d386:	4413      	add	r3, r2
    d388:	009b      	lsls	r3, r3, #2
    d38a:	440b      	add	r3, r1
    d38c:	3304      	adds	r3, #4
    d38e:	681b      	ldr	r3, [r3, #0]
    d390:	f003 030c 	and.w	r3, r3, #12
    d394:	2b04      	cmp	r3, #4
    d396:	d12d      	bne.n	d3f4 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    d398:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d39c:	4938      	ldr	r1, [pc, #224]	; (d480 <_tc_timer_init+0x27c>)
    d39e:	4613      	mov	r3, r2
    d3a0:	009b      	lsls	r3, r3, #2
    d3a2:	4413      	add	r3, r2
    d3a4:	009b      	lsls	r3, r3, #2
    d3a6:	440b      	add	r3, r1
    d3a8:	330c      	adds	r3, #12
    d3aa:	681b      	ldr	r3, [r3, #0]
    d3ac:	b2db      	uxtb	r3, r3
    d3ae:	461a      	mov	r2, r3
    d3b0:	2100      	movs	r1, #0
    d3b2:	6838      	ldr	r0, [r7, #0]
    d3b4:	4b38      	ldr	r3, [pc, #224]	; (d498 <_tc_timer_init+0x294>)
    d3b6:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    d3b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d3bc:	4930      	ldr	r1, [pc, #192]	; (d480 <_tc_timer_init+0x27c>)
    d3be:	4613      	mov	r3, r2
    d3c0:	009b      	lsls	r3, r3, #2
    d3c2:	4413      	add	r3, r2
    d3c4:	009b      	lsls	r3, r3, #2
    d3c6:	440b      	add	r3, r1
    d3c8:	3310      	adds	r3, #16
    d3ca:	681b      	ldr	r3, [r3, #0]
    d3cc:	b2db      	uxtb	r3, r3
    d3ce:	461a      	mov	r2, r3
    d3d0:	2101      	movs	r1, #1
    d3d2:	6838      	ldr	r0, [r7, #0]
    d3d4:	4b30      	ldr	r3, [pc, #192]	; (d498 <_tc_timer_init+0x294>)
    d3d6:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    d3d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d3dc:	4928      	ldr	r1, [pc, #160]	; (d480 <_tc_timer_init+0x27c>)
    d3de:	4613      	mov	r3, r2
    d3e0:	009b      	lsls	r3, r3, #2
    d3e2:	4413      	add	r3, r2
    d3e4:	009b      	lsls	r3, r3, #2
    d3e6:	440b      	add	r3, r1
    d3e8:	330b      	adds	r3, #11
    d3ea:	781b      	ldrb	r3, [r3, #0]
    d3ec:	4619      	mov	r1, r3
    d3ee:	6838      	ldr	r0, [r7, #0]
    d3f0:	4b2a      	ldr	r3, [pc, #168]	; (d49c <_tc_timer_init+0x298>)
    d3f2:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    d3f4:	6838      	ldr	r0, [r7, #0]
    d3f6:	4b2a      	ldr	r3, [pc, #168]	; (d4a0 <_tc_timer_init+0x29c>)
    d3f8:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    d3fa:	6879      	ldr	r1, [r7, #4]
    d3fc:	6838      	ldr	r0, [r7, #0]
    d3fe:	4b29      	ldr	r3, [pc, #164]	; (d4a4 <_tc_timer_init+0x2a0>)
    d400:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    d402:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d406:	491e      	ldr	r1, [pc, #120]	; (d480 <_tc_timer_init+0x27c>)
    d408:	4613      	mov	r3, r2
    d40a:	009b      	lsls	r3, r3, #2
    d40c:	4413      	add	r3, r2
    d40e:	009b      	lsls	r3, r3, #2
    d410:	440b      	add	r3, r1
    d412:	3302      	adds	r3, #2
    d414:	f9b3 3000 	ldrsh.w	r3, [r3]
    d418:	4618      	mov	r0, r3
    d41a:	4b23      	ldr	r3, [pc, #140]	; (d4a8 <_tc_timer_init+0x2a4>)
    d41c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    d41e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d422:	4917      	ldr	r1, [pc, #92]	; (d480 <_tc_timer_init+0x27c>)
    d424:	4613      	mov	r3, r2
    d426:	009b      	lsls	r3, r3, #2
    d428:	4413      	add	r3, r2
    d42a:	009b      	lsls	r3, r3, #2
    d42c:	440b      	add	r3, r1
    d42e:	3302      	adds	r3, #2
    d430:	f9b3 3000 	ldrsh.w	r3, [r3]
    d434:	4618      	mov	r0, r3
    d436:	4b1d      	ldr	r3, [pc, #116]	; (d4ac <_tc_timer_init+0x2a8>)
    d438:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    d43a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d43e:	4910      	ldr	r1, [pc, #64]	; (d480 <_tc_timer_init+0x27c>)
    d440:	4613      	mov	r3, r2
    d442:	009b      	lsls	r3, r3, #2
    d444:	4413      	add	r3, r2
    d446:	009b      	lsls	r3, r3, #2
    d448:	440b      	add	r3, r1
    d44a:	3302      	adds	r3, #2
    d44c:	f9b3 3000 	ldrsh.w	r3, [r3]
    d450:	4618      	mov	r0, r3
    d452:	4b17      	ldr	r3, [pc, #92]	; (d4b0 <_tc_timer_init+0x2ac>)
    d454:	4798      	blx	r3

	return ERR_NONE;
    d456:	2300      	movs	r3, #0
}
    d458:	4618      	mov	r0, r3
    d45a:	3710      	adds	r7, #16
    d45c:	46bd      	mov	sp, r7
    d45e:	bd80      	pop	{r7, pc}
    d460:	0000da95 	.word	0x0000da95
    d464:	00020d28 	.word	0x00020d28
    d468:	000080d1 	.word	0x000080d1
    d46c:	0000ce79 	.word	0x0000ce79
    d470:	0000d019 	.word	0x0000d019
    d474:	0000cfc9 	.word	0x0000cfc9
    d478:	0000ce55 	.word	0x0000ce55
    d47c:	0000d049 	.word	0x0000d049
    d480:	20000144 	.word	0x20000144
    d484:	0000d0a9 	.word	0x0000d0a9
    d488:	0000d06d 	.word	0x0000d06d
    d48c:	0000d08b 	.word	0x0000d08b
    d490:	0000d1a9 	.word	0x0000d1a9
    d494:	0000d145 	.word	0x0000d145
    d498:	0000d115 	.word	0x0000d115
    d49c:	0000d0c9 	.word	0x0000d0c9
    d4a0:	0000cefd 	.word	0x0000cefd
    d4a4:	0000dafd 	.word	0x0000dafd
    d4a8:	0000cdd5 	.word	0x0000cdd5
    d4ac:	0000ce19 	.word	0x0000ce19
    d4b0:	0000cd99 	.word	0x0000cd99

0000d4b4 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    d4b4:	b580      	push	{r7, lr}
    d4b6:	b084      	sub	sp, #16
    d4b8:	af00      	add	r7, sp, #0
    d4ba:	6078      	str	r0, [r7, #4]
    d4bc:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    d4be:	6838      	ldr	r0, [r7, #0]
    d4c0:	4b73      	ldr	r3, [pc, #460]	; (d690 <_pwm_init+0x1dc>)
    d4c2:	4798      	blx	r3
    d4c4:	4603      	mov	r3, r0
    d4c6:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    d4c8:	687b      	ldr	r3, [r7, #4]
    d4ca:	683a      	ldr	r2, [r7, #0]
    d4cc:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    d4ce:	2101      	movs	r1, #1
    d4d0:	6838      	ldr	r0, [r7, #0]
    d4d2:	4b70      	ldr	r3, [pc, #448]	; (d694 <_pwm_init+0x1e0>)
    d4d4:	4798      	blx	r3
    d4d6:	4603      	mov	r3, r0
    d4d8:	f083 0301 	eor.w	r3, r3, #1
    d4dc:	b2db      	uxtb	r3, r3
    d4de:	2b00      	cmp	r3, #0
    d4e0:	d011      	beq.n	d506 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    d4e2:	2102      	movs	r1, #2
    d4e4:	6838      	ldr	r0, [r7, #0]
    d4e6:	4b6c      	ldr	r3, [pc, #432]	; (d698 <_pwm_init+0x1e4>)
    d4e8:	4798      	blx	r3
    d4ea:	4603      	mov	r3, r0
    d4ec:	2b00      	cmp	r3, #0
    d4ee:	d006      	beq.n	d4fe <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d4f0:	6838      	ldr	r0, [r7, #0]
    d4f2:	4b6a      	ldr	r3, [pc, #424]	; (d69c <_pwm_init+0x1e8>)
    d4f4:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    d4f6:	2102      	movs	r1, #2
    d4f8:	6838      	ldr	r0, [r7, #0]
    d4fa:	4b69      	ldr	r3, [pc, #420]	; (d6a0 <_pwm_init+0x1ec>)
    d4fc:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    d4fe:	2101      	movs	r1, #1
    d500:	6838      	ldr	r0, [r7, #0]
    d502:	4b68      	ldr	r3, [pc, #416]	; (d6a4 <_pwm_init+0x1f0>)
    d504:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    d506:	2101      	movs	r1, #1
    d508:	6838      	ldr	r0, [r7, #0]
    d50a:	4b65      	ldr	r3, [pc, #404]	; (d6a0 <_pwm_init+0x1ec>)
    d50c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    d50e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d512:	4965      	ldr	r1, [pc, #404]	; (d6a8 <_pwm_init+0x1f4>)
    d514:	4613      	mov	r3, r2
    d516:	009b      	lsls	r3, r3, #2
    d518:	4413      	add	r3, r2
    d51a:	009b      	lsls	r3, r3, #2
    d51c:	440b      	add	r3, r1
    d51e:	3304      	adds	r3, #4
    d520:	681b      	ldr	r3, [r3, #0]
    d522:	4619      	mov	r1, r3
    d524:	6838      	ldr	r0, [r7, #0]
    d526:	4b5f      	ldr	r3, [pc, #380]	; (d6a4 <_pwm_init+0x1f0>)
    d528:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    d52a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d52e:	495e      	ldr	r1, [pc, #376]	; (d6a8 <_pwm_init+0x1f4>)
    d530:	4613      	mov	r3, r2
    d532:	009b      	lsls	r3, r3, #2
    d534:	4413      	add	r3, r2
    d536:	009b      	lsls	r3, r3, #2
    d538:	440b      	add	r3, r1
    d53a:	330a      	adds	r3, #10
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	4619      	mov	r1, r3
    d540:	6838      	ldr	r0, [r7, #0]
    d542:	4b5a      	ldr	r3, [pc, #360]	; (d6ac <_pwm_init+0x1f8>)
    d544:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    d546:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d54a:	4957      	ldr	r1, [pc, #348]	; (d6a8 <_pwm_init+0x1f4>)
    d54c:	4613      	mov	r3, r2
    d54e:	009b      	lsls	r3, r3, #2
    d550:	4413      	add	r3, r2
    d552:	009b      	lsls	r3, r3, #2
    d554:	440b      	add	r3, r1
    d556:	3308      	adds	r3, #8
    d558:	881b      	ldrh	r3, [r3, #0]
    d55a:	4619      	mov	r1, r3
    d55c:	6838      	ldr	r0, [r7, #0]
    d55e:	4b54      	ldr	r3, [pc, #336]	; (d6b0 <_pwm_init+0x1fc>)
    d560:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    d562:	2103      	movs	r1, #3
    d564:	6838      	ldr	r0, [r7, #0]
    d566:	4b53      	ldr	r3, [pc, #332]	; (d6b4 <_pwm_init+0x200>)
    d568:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    d56a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d56e:	494e      	ldr	r1, [pc, #312]	; (d6a8 <_pwm_init+0x1f4>)
    d570:	4613      	mov	r3, r2
    d572:	009b      	lsls	r3, r3, #2
    d574:	4413      	add	r3, r2
    d576:	009b      	lsls	r3, r3, #2
    d578:	440b      	add	r3, r1
    d57a:	3304      	adds	r3, #4
    d57c:	681b      	ldr	r3, [r3, #0]
    d57e:	f003 030c 	and.w	r3, r3, #12
    d582:	2b08      	cmp	r3, #8
    d584:	d11e      	bne.n	d5c4 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    d586:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d58a:	4947      	ldr	r1, [pc, #284]	; (d6a8 <_pwm_init+0x1f4>)
    d58c:	4613      	mov	r3, r2
    d58e:	009b      	lsls	r3, r3, #2
    d590:	4413      	add	r3, r2
    d592:	009b      	lsls	r3, r3, #2
    d594:	440b      	add	r3, r1
    d596:	330c      	adds	r3, #12
    d598:	681b      	ldr	r3, [r3, #0]
    d59a:	461a      	mov	r2, r3
    d59c:	2100      	movs	r1, #0
    d59e:	6838      	ldr	r0, [r7, #0]
    d5a0:	4b45      	ldr	r3, [pc, #276]	; (d6b8 <_pwm_init+0x204>)
    d5a2:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    d5a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d5a8:	493f      	ldr	r1, [pc, #252]	; (d6a8 <_pwm_init+0x1f4>)
    d5aa:	4613      	mov	r3, r2
    d5ac:	009b      	lsls	r3, r3, #2
    d5ae:	4413      	add	r3, r2
    d5b0:	009b      	lsls	r3, r3, #2
    d5b2:	440b      	add	r3, r1
    d5b4:	3310      	adds	r3, #16
    d5b6:	681b      	ldr	r3, [r3, #0]
    d5b8:	461a      	mov	r2, r3
    d5ba:	2101      	movs	r1, #1
    d5bc:	6838      	ldr	r0, [r7, #0]
    d5be:	4b3e      	ldr	r3, [pc, #248]	; (d6b8 <_pwm_init+0x204>)
    d5c0:	4798      	blx	r3
    d5c2:	e031      	b.n	d628 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    d5c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d5c8:	4937      	ldr	r1, [pc, #220]	; (d6a8 <_pwm_init+0x1f4>)
    d5ca:	4613      	mov	r3, r2
    d5cc:	009b      	lsls	r3, r3, #2
    d5ce:	4413      	add	r3, r2
    d5d0:	009b      	lsls	r3, r3, #2
    d5d2:	440b      	add	r3, r1
    d5d4:	3304      	adds	r3, #4
    d5d6:	681b      	ldr	r3, [r3, #0]
    d5d8:	f003 030c 	and.w	r3, r3, #12
    d5dc:	2b00      	cmp	r3, #0
    d5de:	d120      	bne.n	d622 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    d5e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d5e4:	4930      	ldr	r1, [pc, #192]	; (d6a8 <_pwm_init+0x1f4>)
    d5e6:	4613      	mov	r3, r2
    d5e8:	009b      	lsls	r3, r3, #2
    d5ea:	4413      	add	r3, r2
    d5ec:	009b      	lsls	r3, r3, #2
    d5ee:	440b      	add	r3, r1
    d5f0:	330c      	adds	r3, #12
    d5f2:	681b      	ldr	r3, [r3, #0]
    d5f4:	b29b      	uxth	r3, r3
    d5f6:	461a      	mov	r2, r3
    d5f8:	2100      	movs	r1, #0
    d5fa:	6838      	ldr	r0, [r7, #0]
    d5fc:	4b2f      	ldr	r3, [pc, #188]	; (d6bc <_pwm_init+0x208>)
    d5fe:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    d600:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d604:	4928      	ldr	r1, [pc, #160]	; (d6a8 <_pwm_init+0x1f4>)
    d606:	4613      	mov	r3, r2
    d608:	009b      	lsls	r3, r3, #2
    d60a:	4413      	add	r3, r2
    d60c:	009b      	lsls	r3, r3, #2
    d60e:	440b      	add	r3, r1
    d610:	3310      	adds	r3, #16
    d612:	681b      	ldr	r3, [r3, #0]
    d614:	b29b      	uxth	r3, r3
    d616:	461a      	mov	r2, r3
    d618:	2101      	movs	r1, #1
    d61a:	6838      	ldr	r0, [r7, #0]
    d61c:	4b27      	ldr	r3, [pc, #156]	; (d6bc <_pwm_init+0x208>)
    d61e:	4798      	blx	r3
    d620:	e002      	b.n	d628 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    d622:	f04f 33ff 	mov.w	r3, #4294967295
    d626:	e02e      	b.n	d686 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    d628:	6879      	ldr	r1, [r7, #4]
    d62a:	6838      	ldr	r0, [r7, #0]
    d62c:	4b24      	ldr	r3, [pc, #144]	; (d6c0 <_pwm_init+0x20c>)
    d62e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    d630:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d634:	491c      	ldr	r1, [pc, #112]	; (d6a8 <_pwm_init+0x1f4>)
    d636:	4613      	mov	r3, r2
    d638:	009b      	lsls	r3, r3, #2
    d63a:	4413      	add	r3, r2
    d63c:	009b      	lsls	r3, r3, #2
    d63e:	440b      	add	r3, r1
    d640:	3302      	adds	r3, #2
    d642:	f9b3 3000 	ldrsh.w	r3, [r3]
    d646:	4618      	mov	r0, r3
    d648:	4b1e      	ldr	r3, [pc, #120]	; (d6c4 <_pwm_init+0x210>)
    d64a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    d64c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d650:	4915      	ldr	r1, [pc, #84]	; (d6a8 <_pwm_init+0x1f4>)
    d652:	4613      	mov	r3, r2
    d654:	009b      	lsls	r3, r3, #2
    d656:	4413      	add	r3, r2
    d658:	009b      	lsls	r3, r3, #2
    d65a:	440b      	add	r3, r1
    d65c:	3302      	adds	r3, #2
    d65e:	f9b3 3000 	ldrsh.w	r3, [r3]
    d662:	4618      	mov	r0, r3
    d664:	4b18      	ldr	r3, [pc, #96]	; (d6c8 <_pwm_init+0x214>)
    d666:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    d668:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d66c:	490e      	ldr	r1, [pc, #56]	; (d6a8 <_pwm_init+0x1f4>)
    d66e:	4613      	mov	r3, r2
    d670:	009b      	lsls	r3, r3, #2
    d672:	4413      	add	r3, r2
    d674:	009b      	lsls	r3, r3, #2
    d676:	440b      	add	r3, r1
    d678:	3302      	adds	r3, #2
    d67a:	f9b3 3000 	ldrsh.w	r3, [r3]
    d67e:	4618      	mov	r0, r3
    d680:	4b12      	ldr	r3, [pc, #72]	; (d6cc <_pwm_init+0x218>)
    d682:	4798      	blx	r3

	return 0;
    d684:	2300      	movs	r3, #0
}
    d686:	4618      	mov	r0, r3
    d688:	3710      	adds	r7, #16
    d68a:	46bd      	mov	sp, r7
    d68c:	bd80      	pop	{r7, pc}
    d68e:	bf00      	nop
    d690:	0000da95 	.word	0x0000da95
    d694:	0000ce79 	.word	0x0000ce79
    d698:	0000d019 	.word	0x0000d019
    d69c:	0000cfc9 	.word	0x0000cfc9
    d6a0:	0000ce55 	.word	0x0000ce55
    d6a4:	0000d049 	.word	0x0000d049
    d6a8:	20000144 	.word	0x20000144
    d6ac:	0000d0a9 	.word	0x0000d0a9
    d6b0:	0000d06d 	.word	0x0000d06d
    d6b4:	0000d08b 	.word	0x0000d08b
    d6b8:	0000d1a9 	.word	0x0000d1a9
    d6bc:	0000d145 	.word	0x0000d145
    d6c0:	0000dafd 	.word	0x0000dafd
    d6c4:	0000cdd5 	.word	0x0000cdd5
    d6c8:	0000ce19 	.word	0x0000ce19
    d6cc:	0000cd99 	.word	0x0000cd99

0000d6d0 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    d6d0:	b580      	push	{r7, lr}
    d6d2:	b084      	sub	sp, #16
    d6d4:	af00      	add	r7, sp, #0
    d6d6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d6d8:	687b      	ldr	r3, [r7, #4]
    d6da:	68db      	ldr	r3, [r3, #12]
    d6dc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    d6de:	68f8      	ldr	r0, [r7, #12]
    d6e0:	4b10      	ldr	r3, [pc, #64]	; (d724 <_tc_timer_deinit+0x54>)
    d6e2:	4798      	blx	r3
    d6e4:	4603      	mov	r3, r0
    d6e6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    d6e8:	22f9      	movs	r2, #249	; 0xf9
    d6ea:	490f      	ldr	r1, [pc, #60]	; (d728 <_tc_timer_deinit+0x58>)
    d6ec:	2001      	movs	r0, #1
    d6ee:	4b0f      	ldr	r3, [pc, #60]	; (d72c <_tc_timer_deinit+0x5c>)
    d6f0:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    d6f2:	f997 200b 	ldrsb.w	r2, [r7, #11]
    d6f6:	490e      	ldr	r1, [pc, #56]	; (d730 <_tc_timer_deinit+0x60>)
    d6f8:	4613      	mov	r3, r2
    d6fa:	009b      	lsls	r3, r3, #2
    d6fc:	4413      	add	r3, r2
    d6fe:	009b      	lsls	r3, r3, #2
    d700:	440b      	add	r3, r1
    d702:	3302      	adds	r3, #2
    d704:	f9b3 3000 	ldrsh.w	r3, [r3]
    d708:	4618      	mov	r0, r3
    d70a:	4b0a      	ldr	r3, [pc, #40]	; (d734 <_tc_timer_deinit+0x64>)
    d70c:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d70e:	68f8      	ldr	r0, [r7, #12]
    d710:	4b09      	ldr	r3, [pc, #36]	; (d738 <_tc_timer_deinit+0x68>)
    d712:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    d714:	68f8      	ldr	r0, [r7, #12]
    d716:	4b09      	ldr	r3, [pc, #36]	; (d73c <_tc_timer_deinit+0x6c>)
    d718:	4798      	blx	r3
}
    d71a:	bf00      	nop
    d71c:	3710      	adds	r7, #16
    d71e:	46bd      	mov	sp, r7
    d720:	bd80      	pop	{r7, pc}
    d722:	bf00      	nop
    d724:	0000da95 	.word	0x0000da95
    d728:	00020d28 	.word	0x00020d28
    d72c:	000080d1 	.word	0x000080d1
    d730:	20000144 	.word	0x20000144
    d734:	0000cdd5 	.word	0x0000cdd5
    d738:	0000cfc9 	.word	0x0000cfc9
    d73c:	0000cf41 	.word	0x0000cf41

0000d740 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    d740:	b580      	push	{r7, lr}
    d742:	b082      	sub	sp, #8
    d744:	af00      	add	r7, sp, #0
    d746:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    d748:	687b      	ldr	r3, [r7, #4]
    d74a:	68db      	ldr	r3, [r3, #12]
    d74c:	4618      	mov	r0, r3
    d74e:	4b03      	ldr	r3, [pc, #12]	; (d75c <_tc_timer_start+0x1c>)
    d750:	4798      	blx	r3
}
    d752:	bf00      	nop
    d754:	3708      	adds	r7, #8
    d756:	46bd      	mov	sp, r7
    d758:	bd80      	pop	{r7, pc}
    d75a:	bf00      	nop
    d75c:	0000cf69 	.word	0x0000cf69

0000d760 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    d760:	b580      	push	{r7, lr}
    d762:	b082      	sub	sp, #8
    d764:	af00      	add	r7, sp, #0
    d766:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    d768:	687b      	ldr	r3, [r7, #4]
    d76a:	691b      	ldr	r3, [r3, #16]
    d76c:	4618      	mov	r0, r3
    d76e:	4b03      	ldr	r3, [pc, #12]	; (d77c <_pwm_enable+0x1c>)
    d770:	4798      	blx	r3
}
    d772:	bf00      	nop
    d774:	3708      	adds	r7, #8
    d776:	46bd      	mov	sp, r7
    d778:	bd80      	pop	{r7, pc}
    d77a:	bf00      	nop
    d77c:	0000cf69 	.word	0x0000cf69

0000d780 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    d780:	b580      	push	{r7, lr}
    d782:	b082      	sub	sp, #8
    d784:	af00      	add	r7, sp, #0
    d786:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    d788:	687b      	ldr	r3, [r7, #4]
    d78a:	68db      	ldr	r3, [r3, #12]
    d78c:	4618      	mov	r0, r3
    d78e:	4b03      	ldr	r3, [pc, #12]	; (d79c <_tc_timer_stop+0x1c>)
    d790:	4798      	blx	r3
}
    d792:	bf00      	nop
    d794:	3708      	adds	r7, #8
    d796:	46bd      	mov	sp, r7
    d798:	bd80      	pop	{r7, pc}
    d79a:	bf00      	nop
    d79c:	0000cfc9 	.word	0x0000cfc9

0000d7a0 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    d7a0:	b580      	push	{r7, lr}
    d7a2:	b084      	sub	sp, #16
    d7a4:	af00      	add	r7, sp, #0
    d7a6:	6078      	str	r0, [r7, #4]
    d7a8:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    d7aa:	687b      	ldr	r3, [r7, #4]
    d7ac:	68db      	ldr	r3, [r3, #12]
    d7ae:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d7b0:	68f8      	ldr	r0, [r7, #12]
    d7b2:	4b14      	ldr	r3, [pc, #80]	; (d804 <_tc_timer_set_period+0x64>)
    d7b4:	4798      	blx	r3
    d7b6:	4603      	mov	r3, r0
    d7b8:	2b02      	cmp	r3, #2
    d7ba:	d105      	bne.n	d7c8 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    d7bc:	683a      	ldr	r2, [r7, #0]
    d7be:	2100      	movs	r1, #0
    d7c0:	68f8      	ldr	r0, [r7, #12]
    d7c2:	4b11      	ldr	r3, [pc, #68]	; (d808 <_tc_timer_set_period+0x68>)
    d7c4:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    d7c6:	e019      	b.n	d7fc <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d7c8:	68f8      	ldr	r0, [r7, #12]
    d7ca:	4b0e      	ldr	r3, [pc, #56]	; (d804 <_tc_timer_set_period+0x64>)
    d7cc:	4798      	blx	r3
    d7ce:	4603      	mov	r3, r0
    d7d0:	2b00      	cmp	r3, #0
    d7d2:	d107      	bne.n	d7e4 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    d7d4:	683b      	ldr	r3, [r7, #0]
    d7d6:	b29b      	uxth	r3, r3
    d7d8:	461a      	mov	r2, r3
    d7da:	2100      	movs	r1, #0
    d7dc:	68f8      	ldr	r0, [r7, #12]
    d7de:	4b0b      	ldr	r3, [pc, #44]	; (d80c <_tc_timer_set_period+0x6c>)
    d7e0:	4798      	blx	r3
}
    d7e2:	e00b      	b.n	d7fc <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d7e4:	68f8      	ldr	r0, [r7, #12]
    d7e6:	4b07      	ldr	r3, [pc, #28]	; (d804 <_tc_timer_set_period+0x64>)
    d7e8:	4798      	blx	r3
    d7ea:	4603      	mov	r3, r0
    d7ec:	2b01      	cmp	r3, #1
    d7ee:	d105      	bne.n	d7fc <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    d7f0:	683b      	ldr	r3, [r7, #0]
    d7f2:	b2db      	uxtb	r3, r3
    d7f4:	4619      	mov	r1, r3
    d7f6:	68f8      	ldr	r0, [r7, #12]
    d7f8:	4b05      	ldr	r3, [pc, #20]	; (d810 <_tc_timer_set_period+0x70>)
    d7fa:	4798      	blx	r3
}
    d7fc:	bf00      	nop
    d7fe:	3710      	adds	r7, #16
    d800:	46bd      	mov	sp, r7
    d802:	bd80      	pop	{r7, pc}
    d804:	0000cff1 	.word	0x0000cff1
    d808:	0000d1a9 	.word	0x0000d1a9
    d80c:	0000d145 	.word	0x0000d145
    d810:	0000d0c9 	.word	0x0000d0c9

0000d814 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    d814:	b580      	push	{r7, lr}
    d816:	b084      	sub	sp, #16
    d818:	af00      	add	r7, sp, #0
    d81a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d81c:	687b      	ldr	r3, [r7, #4]
    d81e:	68db      	ldr	r3, [r3, #12]
    d820:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d822:	68f8      	ldr	r0, [r7, #12]
    d824:	4b13      	ldr	r3, [pc, #76]	; (d874 <_tc_timer_get_period+0x60>)
    d826:	4798      	blx	r3
    d828:	4603      	mov	r3, r0
    d82a:	2b02      	cmp	r3, #2
    d82c:	d105      	bne.n	d83a <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    d82e:	2100      	movs	r1, #0
    d830:	68f8      	ldr	r0, [r7, #12]
    d832:	4b11      	ldr	r3, [pc, #68]	; (d878 <_tc_timer_get_period+0x64>)
    d834:	4798      	blx	r3
    d836:	4603      	mov	r3, r0
    d838:	e017      	b.n	d86a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d83a:	68f8      	ldr	r0, [r7, #12]
    d83c:	4b0d      	ldr	r3, [pc, #52]	; (d874 <_tc_timer_get_period+0x60>)
    d83e:	4798      	blx	r3
    d840:	4603      	mov	r3, r0
    d842:	2b00      	cmp	r3, #0
    d844:	d105      	bne.n	d852 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    d846:	2100      	movs	r1, #0
    d848:	68f8      	ldr	r0, [r7, #12]
    d84a:	4b0c      	ldr	r3, [pc, #48]	; (d87c <_tc_timer_get_period+0x68>)
    d84c:	4798      	blx	r3
    d84e:	4603      	mov	r3, r0
    d850:	e00b      	b.n	d86a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d852:	68f8      	ldr	r0, [r7, #12]
    d854:	4b07      	ldr	r3, [pc, #28]	; (d874 <_tc_timer_get_period+0x60>)
    d856:	4798      	blx	r3
    d858:	4603      	mov	r3, r0
    d85a:	2b01      	cmp	r3, #1
    d85c:	d104      	bne.n	d868 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    d85e:	68f8      	ldr	r0, [r7, #12]
    d860:	4b07      	ldr	r3, [pc, #28]	; (d880 <_tc_timer_get_period+0x6c>)
    d862:	4798      	blx	r3
    d864:	4603      	mov	r3, r0
    d866:	e000      	b.n	d86a <_tc_timer_get_period+0x56>
	}

	return 0;
    d868:	2300      	movs	r3, #0
}
    d86a:	4618      	mov	r0, r3
    d86c:	3710      	adds	r7, #16
    d86e:	46bd      	mov	sp, r7
    d870:	bd80      	pop	{r7, pc}
    d872:	bf00      	nop
    d874:	0000cff1 	.word	0x0000cff1
    d878:	0000d1d9 	.word	0x0000d1d9
    d87c:	0000d179 	.word	0x0000d179
    d880:	0000d0f1 	.word	0x0000d0f1

0000d884 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    d884:	b580      	push	{r7, lr}
    d886:	b082      	sub	sp, #8
    d888:	af00      	add	r7, sp, #0
    d88a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    d88c:	687b      	ldr	r3, [r7, #4]
    d88e:	68db      	ldr	r3, [r3, #12]
    d890:	4618      	mov	r0, r3
    d892:	4b03      	ldr	r3, [pc, #12]	; (d8a0 <_tc_timer_is_started+0x1c>)
    d894:	4798      	blx	r3
    d896:	4603      	mov	r3, r0
}
    d898:	4618      	mov	r0, r3
    d89a:	3708      	adds	r7, #8
    d89c:	46bd      	mov	sp, r7
    d89e:	bd80      	pop	{r7, pc}
    d8a0:	0000cf91 	.word	0x0000cf91

0000d8a4 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    d8a4:	b580      	push	{r7, lr}
    d8a6:	b082      	sub	sp, #8
    d8a8:	af00      	add	r7, sp, #0
    d8aa:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    d8ac:	687b      	ldr	r3, [r7, #4]
    d8ae:	691b      	ldr	r3, [r3, #16]
    d8b0:	4618      	mov	r0, r3
    d8b2:	4b03      	ldr	r3, [pc, #12]	; (d8c0 <_pwm_is_enabled+0x1c>)
    d8b4:	4798      	blx	r3
    d8b6:	4603      	mov	r3, r0
}
    d8b8:	4618      	mov	r0, r3
    d8ba:	3708      	adds	r7, #8
    d8bc:	46bd      	mov	sp, r7
    d8be:	bd80      	pop	{r7, pc}
    d8c0:	0000cf91 	.word	0x0000cf91

0000d8c4 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    d8c4:	b480      	push	{r7}
    d8c6:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    d8c8:	4b02      	ldr	r3, [pc, #8]	; (d8d4 <_tc_get_timer+0x10>)
}
    d8ca:	4618      	mov	r0, r3
    d8cc:	46bd      	mov	sp, r7
    d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8d2:	4770      	bx	lr
    d8d4:	200001bc 	.word	0x200001bc

0000d8d8 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    d8d8:	b480      	push	{r7}
    d8da:	af00      	add	r7, sp, #0
	return NULL;
    d8dc:	2300      	movs	r3, #0
}
    d8de:	4618      	mov	r0, r3
    d8e0:	46bd      	mov	sp, r7
    d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8e6:	4770      	bx	lr

0000d8e8 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    d8e8:	b580      	push	{r7, lr}
    d8ea:	b084      	sub	sp, #16
    d8ec:	af00      	add	r7, sp, #0
    d8ee:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d8f0:	687b      	ldr	r3, [r7, #4]
    d8f2:	68db      	ldr	r3, [r3, #12]
    d8f4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    d8f6:	68f8      	ldr	r0, [r7, #12]
    d8f8:	4b0e      	ldr	r3, [pc, #56]	; (d934 <_tc_timer_set_irq+0x4c>)
    d8fa:	4798      	blx	r3
    d8fc:	4603      	mov	r3, r0
    d8fe:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    d900:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    d904:	490c      	ldr	r1, [pc, #48]	; (d938 <_tc_timer_set_irq+0x50>)
    d906:	2001      	movs	r0, #1
    d908:	4b0c      	ldr	r3, [pc, #48]	; (d93c <_tc_timer_set_irq+0x54>)
    d90a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    d90c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    d910:	490b      	ldr	r1, [pc, #44]	; (d940 <_tc_timer_set_irq+0x58>)
    d912:	4613      	mov	r3, r2
    d914:	009b      	lsls	r3, r3, #2
    d916:	4413      	add	r3, r2
    d918:	009b      	lsls	r3, r3, #2
    d91a:	440b      	add	r3, r1
    d91c:	3302      	adds	r3, #2
    d91e:	f9b3 3000 	ldrsh.w	r3, [r3]
    d922:	b2db      	uxtb	r3, r3
    d924:	4618      	mov	r0, r3
    d926:	4b07      	ldr	r3, [pc, #28]	; (d944 <_tc_timer_set_irq+0x5c>)
    d928:	4798      	blx	r3
}
    d92a:	bf00      	nop
    d92c:	3710      	adds	r7, #16
    d92e:	46bd      	mov	sp, r7
    d930:	bd80      	pop	{r7, pc}
    d932:	bf00      	nop
    d934:	0000da95 	.word	0x0000da95
    d938:	00020d28 	.word	0x00020d28
    d93c:	000080d1 	.word	0x000080d1
    d940:	20000144 	.word	0x20000144
    d944:	0000891d 	.word	0x0000891d

0000d948 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    d948:	b580      	push	{r7, lr}
    d94a:	b084      	sub	sp, #16
    d94c:	af00      	add	r7, sp, #0
    d94e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d950:	687b      	ldr	r3, [r7, #4]
    d952:	68db      	ldr	r3, [r3, #12]
    d954:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    d956:	68f8      	ldr	r0, [r7, #12]
    d958:	4b07      	ldr	r3, [pc, #28]	; (d978 <tc_interrupt_handler+0x30>)
    d95a:	4798      	blx	r3
    d95c:	4603      	mov	r3, r0
    d95e:	2b00      	cmp	r3, #0
    d960:	d006      	beq.n	d970 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    d962:	68f8      	ldr	r0, [r7, #12]
    d964:	4b05      	ldr	r3, [pc, #20]	; (d97c <tc_interrupt_handler+0x34>)
    d966:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    d968:	687b      	ldr	r3, [r7, #4]
    d96a:	681b      	ldr	r3, [r3, #0]
    d96c:	6878      	ldr	r0, [r7, #4]
    d96e:	4798      	blx	r3
	}
}
    d970:	bf00      	nop
    d972:	3710      	adds	r7, #16
    d974:	46bd      	mov	sp, r7
    d976:	bd80      	pop	{r7, pc}
    d978:	0000cea1 	.word	0x0000cea1
    d97c:	0000cec9 	.word	0x0000cec9

0000d980 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    d980:	b580      	push	{r7, lr}
    d982:	b084      	sub	sp, #16
    d984:	af00      	add	r7, sp, #0
    d986:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d988:	687b      	ldr	r3, [r7, #4]
    d98a:	691b      	ldr	r3, [r3, #16]
    d98c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    d98e:	68f8      	ldr	r0, [r7, #12]
    d990:	4b12      	ldr	r3, [pc, #72]	; (d9dc <tc_pwm_interrupt_handler+0x5c>)
    d992:	4798      	blx	r3
    d994:	4603      	mov	r3, r0
    d996:	2b00      	cmp	r3, #0
    d998:	d00a      	beq.n	d9b0 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    d99a:	68f8      	ldr	r0, [r7, #12]
    d99c:	4b10      	ldr	r3, [pc, #64]	; (d9e0 <tc_pwm_interrupt_handler+0x60>)
    d99e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    d9a0:	687b      	ldr	r3, [r7, #4]
    d9a2:	681b      	ldr	r3, [r3, #0]
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	d003      	beq.n	d9b0 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    d9a8:	687b      	ldr	r3, [r7, #4]
    d9aa:	681b      	ldr	r3, [r3, #0]
    d9ac:	6878      	ldr	r0, [r7, #4]
    d9ae:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    d9b0:	68f8      	ldr	r0, [r7, #12]
    d9b2:	4b0c      	ldr	r3, [pc, #48]	; (d9e4 <tc_pwm_interrupt_handler+0x64>)
    d9b4:	4798      	blx	r3
    d9b6:	4603      	mov	r3, r0
    d9b8:	2b00      	cmp	r3, #0
    d9ba:	d00a      	beq.n	d9d2 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    d9bc:	68f8      	ldr	r0, [r7, #12]
    d9be:	4b0a      	ldr	r3, [pc, #40]	; (d9e8 <tc_pwm_interrupt_handler+0x68>)
    d9c0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    d9c2:	687b      	ldr	r3, [r7, #4]
    d9c4:	685b      	ldr	r3, [r3, #4]
    d9c6:	2b00      	cmp	r3, #0
    d9c8:	d003      	beq.n	d9d2 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    d9ca:	687b      	ldr	r3, [r7, #4]
    d9cc:	685b      	ldr	r3, [r3, #4]
    d9ce:	6878      	ldr	r0, [r7, #4]
    d9d0:	4798      	blx	r3
		}
	}
}
    d9d2:	bf00      	nop
    d9d4:	3710      	adds	r7, #16
    d9d6:	46bd      	mov	sp, r7
    d9d8:	bd80      	pop	{r7, pc}
    d9da:	bf00      	nop
    d9dc:	0000cea1 	.word	0x0000cea1
    d9e0:	0000cec9 	.word	0x0000cec9
    d9e4:	0000cf17 	.word	0x0000cf17
    d9e8:	0000cee3 	.word	0x0000cee3

0000d9ec <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    d9ec:	b580      	push	{r7, lr}
    d9ee:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    d9f0:	4b03      	ldr	r3, [pc, #12]	; (da00 <TC0_Handler+0x14>)
    d9f2:	681b      	ldr	r3, [r3, #0]
    d9f4:	4618      	mov	r0, r3
    d9f6:	4b03      	ldr	r3, [pc, #12]	; (da04 <TC0_Handler+0x18>)
    d9f8:	4798      	blx	r3
}
    d9fa:	bf00      	nop
    d9fc:	bd80      	pop	{r7, pc}
    d9fe:	bf00      	nop
    da00:	200088d0 	.word	0x200088d0
    da04:	0000d949 	.word	0x0000d949

0000da08 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    da08:	b580      	push	{r7, lr}
    da0a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc1_dev);
    da0c:	4b03      	ldr	r3, [pc, #12]	; (da1c <TC1_Handler+0x14>)
    da0e:	681b      	ldr	r3, [r3, #0]
    da10:	4618      	mov	r0, r3
    da12:	4b03      	ldr	r3, [pc, #12]	; (da20 <TC1_Handler+0x18>)
    da14:	4798      	blx	r3
}
    da16:	bf00      	nop
    da18:	bd80      	pop	{r7, pc}
    da1a:	bf00      	nop
    da1c:	200088d4 	.word	0x200088d4
    da20:	0000d981 	.word	0x0000d981

0000da24 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    da24:	b580      	push	{r7, lr}
    da26:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    da28:	4b03      	ldr	r3, [pc, #12]	; (da38 <TC2_Handler+0x14>)
    da2a:	681b      	ldr	r3, [r3, #0]
    da2c:	4618      	mov	r0, r3
    da2e:	4b03      	ldr	r3, [pc, #12]	; (da3c <TC2_Handler+0x18>)
    da30:	4798      	blx	r3
}
    da32:	bf00      	nop
    da34:	bd80      	pop	{r7, pc}
    da36:	bf00      	nop
    da38:	200088d8 	.word	0x200088d8
    da3c:	0000d949 	.word	0x0000d949

0000da40 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    da40:	b580      	push	{r7, lr}
    da42:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    da44:	4b03      	ldr	r3, [pc, #12]	; (da54 <TC4_Handler+0x14>)
    da46:	681b      	ldr	r3, [r3, #0]
    da48:	4618      	mov	r0, r3
    da4a:	4b03      	ldr	r3, [pc, #12]	; (da58 <TC4_Handler+0x18>)
    da4c:	4798      	blx	r3
}
    da4e:	bf00      	nop
    da50:	bd80      	pop	{r7, pc}
    da52:	bf00      	nop
    da54:	200088dc 	.word	0x200088dc
    da58:	0000d949 	.word	0x0000d949

0000da5c <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    da5c:	b580      	push	{r7, lr}
    da5e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    da60:	4b03      	ldr	r3, [pc, #12]	; (da70 <TC5_Handler+0x14>)
    da62:	681b      	ldr	r3, [r3, #0]
    da64:	4618      	mov	r0, r3
    da66:	4b03      	ldr	r3, [pc, #12]	; (da74 <TC5_Handler+0x18>)
    da68:	4798      	blx	r3
}
    da6a:	bf00      	nop
    da6c:	bd80      	pop	{r7, pc}
    da6e:	bf00      	nop
    da70:	200088e0 	.word	0x200088e0
    da74:	0000d949 	.word	0x0000d949

0000da78 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    da78:	b580      	push	{r7, lr}
    da7a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    da7c:	4b03      	ldr	r3, [pc, #12]	; (da8c <TC6_Handler+0x14>)
    da7e:	681b      	ldr	r3, [r3, #0]
    da80:	4618      	mov	r0, r3
    da82:	4b03      	ldr	r3, [pc, #12]	; (da90 <TC6_Handler+0x18>)
    da84:	4798      	blx	r3
}
    da86:	bf00      	nop
    da88:	bd80      	pop	{r7, pc}
    da8a:	bf00      	nop
    da8c:	200088e4 	.word	0x200088e4
    da90:	0000d949 	.word	0x0000d949

0000da94 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    da94:	b580      	push	{r7, lr}
    da96:	b084      	sub	sp, #16
    da98:	af00      	add	r7, sp, #0
    da9a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    da9c:	6878      	ldr	r0, [r7, #4]
    da9e:	4b13      	ldr	r3, [pc, #76]	; (daec <get_tc_index+0x58>)
    daa0:	4798      	blx	r3
    daa2:	4603      	mov	r3, r0
    daa4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    daa6:	2300      	movs	r3, #0
    daa8:	73fb      	strb	r3, [r7, #15]
    daaa:	e010      	b.n	dace <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    daac:	7bfa      	ldrb	r2, [r7, #15]
    daae:	4910      	ldr	r1, [pc, #64]	; (daf0 <get_tc_index+0x5c>)
    dab0:	4613      	mov	r3, r2
    dab2:	009b      	lsls	r3, r3, #2
    dab4:	4413      	add	r3, r2
    dab6:	009b      	lsls	r3, r3, #2
    dab8:	440b      	add	r3, r1
    daba:	781b      	ldrb	r3, [r3, #0]
    dabc:	7bba      	ldrb	r2, [r7, #14]
    dabe:	429a      	cmp	r2, r3
    dac0:	d102      	bne.n	dac8 <get_tc_index+0x34>
			return i;
    dac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    dac6:	e00d      	b.n	dae4 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    dac8:	7bfb      	ldrb	r3, [r7, #15]
    daca:	3301      	adds	r3, #1
    dacc:	73fb      	strb	r3, [r7, #15]
    dace:	7bfb      	ldrb	r3, [r7, #15]
    dad0:	2b05      	cmp	r3, #5
    dad2:	d9eb      	bls.n	daac <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    dad4:	f240 221d 	movw	r2, #541	; 0x21d
    dad8:	4906      	ldr	r1, [pc, #24]	; (daf4 <get_tc_index+0x60>)
    dada:	2000      	movs	r0, #0
    dadc:	4b06      	ldr	r3, [pc, #24]	; (daf8 <get_tc_index+0x64>)
    dade:	4798      	blx	r3
	return -1;
    dae0:	f04f 33ff 	mov.w	r3, #4294967295
}
    dae4:	4618      	mov	r0, r3
    dae6:	3710      	adds	r7, #16
    dae8:	46bd      	mov	sp, r7
    daea:	bd80      	pop	{r7, pc}
    daec:	0000db99 	.word	0x0000db99
    daf0:	20000144 	.word	0x20000144
    daf4:	00020d28 	.word	0x00020d28
    daf8:	000080d1 	.word	0x000080d1

0000dafc <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    dafc:	b480      	push	{r7}
    dafe:	b083      	sub	sp, #12
    db00:	af00      	add	r7, sp, #0
    db02:	6078      	str	r0, [r7, #4]
    db04:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    db06:	687b      	ldr	r3, [r7, #4]
    db08:	4a17      	ldr	r2, [pc, #92]	; (db68 <_tc_init_irq_param+0x6c>)
    db0a:	4293      	cmp	r3, r2
    db0c:	d102      	bne.n	db14 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    db0e:	4a17      	ldr	r2, [pc, #92]	; (db6c <_tc_init_irq_param+0x70>)
    db10:	683b      	ldr	r3, [r7, #0]
    db12:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    db14:	687b      	ldr	r3, [r7, #4]
    db16:	4a16      	ldr	r2, [pc, #88]	; (db70 <_tc_init_irq_param+0x74>)
    db18:	4293      	cmp	r3, r2
    db1a:	d102      	bne.n	db22 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _pwm_device *)dev;
    db1c:	4a15      	ldr	r2, [pc, #84]	; (db74 <_tc_init_irq_param+0x78>)
    db1e:	683b      	ldr	r3, [r7, #0]
    db20:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    db22:	687b      	ldr	r3, [r7, #4]
    db24:	4a14      	ldr	r2, [pc, #80]	; (db78 <_tc_init_irq_param+0x7c>)
    db26:	4293      	cmp	r3, r2
    db28:	d102      	bne.n	db30 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    db2a:	4a14      	ldr	r2, [pc, #80]	; (db7c <_tc_init_irq_param+0x80>)
    db2c:	683b      	ldr	r3, [r7, #0]
    db2e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    db30:	687b      	ldr	r3, [r7, #4]
    db32:	4a13      	ldr	r2, [pc, #76]	; (db80 <_tc_init_irq_param+0x84>)
    db34:	4293      	cmp	r3, r2
    db36:	d102      	bne.n	db3e <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
    db38:	4a12      	ldr	r2, [pc, #72]	; (db84 <_tc_init_irq_param+0x88>)
    db3a:	683b      	ldr	r3, [r7, #0]
    db3c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    db3e:	687b      	ldr	r3, [r7, #4]
    db40:	4a11      	ldr	r2, [pc, #68]	; (db88 <_tc_init_irq_param+0x8c>)
    db42:	4293      	cmp	r3, r2
    db44:	d102      	bne.n	db4c <_tc_init_irq_param+0x50>
		_tc5_dev = (struct _timer_device *)dev;
    db46:	4a11      	ldr	r2, [pc, #68]	; (db8c <_tc_init_irq_param+0x90>)
    db48:	683b      	ldr	r3, [r7, #0]
    db4a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    db4c:	687b      	ldr	r3, [r7, #4]
    db4e:	4a10      	ldr	r2, [pc, #64]	; (db90 <_tc_init_irq_param+0x94>)
    db50:	4293      	cmp	r3, r2
    db52:	d102      	bne.n	db5a <_tc_init_irq_param+0x5e>
		_tc6_dev = (struct _timer_device *)dev;
    db54:	4a0f      	ldr	r2, [pc, #60]	; (db94 <_tc_init_irq_param+0x98>)
    db56:	683b      	ldr	r3, [r7, #0]
    db58:	6013      	str	r3, [r2, #0]
	}
}
    db5a:	bf00      	nop
    db5c:	370c      	adds	r7, #12
    db5e:	46bd      	mov	sp, r7
    db60:	f85d 7b04 	ldr.w	r7, [sp], #4
    db64:	4770      	bx	lr
    db66:	bf00      	nop
    db68:	40003800 	.word	0x40003800
    db6c:	200088d0 	.word	0x200088d0
    db70:	40003c00 	.word	0x40003c00
    db74:	200088d4 	.word	0x200088d4
    db78:	4101a000 	.word	0x4101a000
    db7c:	200088d8 	.word	0x200088d8
    db80:	42001400 	.word	0x42001400
    db84:	200088dc 	.word	0x200088dc
    db88:	42001800 	.word	0x42001800
    db8c:	200088e0 	.word	0x200088e0
    db90:	43001400 	.word	0x43001400
    db94:	200088e4 	.word	0x200088e4

0000db98 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    db98:	b4b0      	push	{r4, r5, r7}
    db9a:	b08d      	sub	sp, #52	; 0x34
    db9c:	af00      	add	r7, sp, #0
    db9e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    dba0:	4b13      	ldr	r3, [pc, #76]	; (dbf0 <_get_hardware_offset+0x58>)
    dba2:	f107 040c 	add.w	r4, r7, #12
    dba6:	461d      	mov	r5, r3
    dba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dbaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dbac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    dbb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    dbb4:	2300      	movs	r3, #0
    dbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dbb8:	e010      	b.n	dbdc <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    dbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbbc:	009b      	lsls	r3, r3, #2
    dbbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
    dbc2:	4413      	add	r3, r2
    dbc4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    dbc8:	461a      	mov	r2, r3
    dbca:	687b      	ldr	r3, [r7, #4]
    dbcc:	429a      	cmp	r2, r3
    dbce:	d102      	bne.n	dbd6 <_get_hardware_offset+0x3e>
			return i;
    dbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbd2:	b2db      	uxtb	r3, r3
    dbd4:	e006      	b.n	dbe4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    dbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbd8:	3301      	adds	r3, #1
    dbda:	62fb      	str	r3, [r7, #44]	; 0x2c
    dbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbde:	2b07      	cmp	r3, #7
    dbe0:	d9eb      	bls.n	dbba <_get_hardware_offset+0x22>
		}
	}
	return 0;
    dbe2:	2300      	movs	r3, #0
}
    dbe4:	4618      	mov	r0, r3
    dbe6:	3734      	adds	r7, #52	; 0x34
    dbe8:	46bd      	mov	sp, r7
    dbea:	bcb0      	pop	{r4, r5, r7}
    dbec:	4770      	bx	lr
    dbee:	bf00      	nop
    dbf0:	00020d3c 	.word	0x00020d3c

0000dbf4 <__NVIC_EnableIRQ>:
{
    dbf4:	b480      	push	{r7}
    dbf6:	b083      	sub	sp, #12
    dbf8:	af00      	add	r7, sp, #0
    dbfa:	4603      	mov	r3, r0
    dbfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    dbfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    dc02:	2b00      	cmp	r3, #0
    dc04:	db0b      	blt.n	dc1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dc06:	4909      	ldr	r1, [pc, #36]	; (dc2c <__NVIC_EnableIRQ+0x38>)
    dc08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    dc0c:	095b      	lsrs	r3, r3, #5
    dc0e:	88fa      	ldrh	r2, [r7, #6]
    dc10:	f002 021f 	and.w	r2, r2, #31
    dc14:	2001      	movs	r0, #1
    dc16:	fa00 f202 	lsl.w	r2, r0, r2
    dc1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc1e:	bf00      	nop
    dc20:	370c      	adds	r7, #12
    dc22:	46bd      	mov	sp, r7
    dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc28:	4770      	bx	lr
    dc2a:	bf00      	nop
    dc2c:	e000e100 	.word	0xe000e100

0000dc30 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    dc30:	b480      	push	{r7}
    dc32:	b087      	sub	sp, #28
    dc34:	af00      	add	r7, sp, #0
    dc36:	60f8      	str	r0, [r7, #12]
    dc38:	460b      	mov	r3, r1
    dc3a:	607a      	str	r2, [r7, #4]
    dc3c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    dc3e:	7afa      	ldrb	r2, [r7, #11]
    dc40:	68f9      	ldr	r1, [r7, #12]
    dc42:	4613      	mov	r3, r2
    dc44:	009b      	lsls	r3, r3, #2
    dc46:	4413      	add	r3, r2
    dc48:	009b      	lsls	r3, r3, #2
    dc4a:	440b      	add	r3, r1
    dc4c:	3340      	adds	r3, #64	; 0x40
    dc4e:	681b      	ldr	r3, [r3, #0]
    dc50:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    dc52:	697a      	ldr	r2, [r7, #20]
    dc54:	687b      	ldr	r3, [r7, #4]
    dc56:	4013      	ands	r3, r2
    dc58:	617b      	str	r3, [r7, #20]
	return tmp;
    dc5a:	697b      	ldr	r3, [r7, #20]
}
    dc5c:	4618      	mov	r0, r3
    dc5e:	371c      	adds	r7, #28
    dc60:	46bd      	mov	sp, r7
    dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc66:	4770      	bx	lr

0000dc68 <hri_oscctrl_get_STATUS_reg>:
{
    dc68:	b480      	push	{r7}
    dc6a:	b085      	sub	sp, #20
    dc6c:	af00      	add	r7, sp, #0
    dc6e:	6078      	str	r0, [r7, #4]
    dc70:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    dc72:	687b      	ldr	r3, [r7, #4]
    dc74:	691b      	ldr	r3, [r3, #16]
    dc76:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    dc78:	68fa      	ldr	r2, [r7, #12]
    dc7a:	683b      	ldr	r3, [r7, #0]
    dc7c:	4013      	ands	r3, r2
    dc7e:	60fb      	str	r3, [r7, #12]
	return tmp;
    dc80:	68fb      	ldr	r3, [r7, #12]
}
    dc82:	4618      	mov	r0, r3
    dc84:	3714      	adds	r7, #20
    dc86:	46bd      	mov	sp, r7
    dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc8c:	4770      	bx	lr

0000dc8e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    dc8e:	b480      	push	{r7}
    dc90:	b085      	sub	sp, #20
    dc92:	af00      	add	r7, sp, #0
    dc94:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    dc96:	687b      	ldr	r3, [r7, #4]
    dc98:	f893 3020 	ldrb.w	r3, [r3, #32]
    dc9c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    dc9e:	7bfb      	ldrb	r3, [r7, #15]
    dca0:	f003 0301 	and.w	r3, r3, #1
    dca4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    dca6:	7bfb      	ldrb	r3, [r7, #15]
    dca8:	2b00      	cmp	r3, #0
    dcaa:	bf14      	ite	ne
    dcac:	2301      	movne	r3, #1
    dcae:	2300      	moveq	r3, #0
    dcb0:	b2db      	uxtb	r3, r3
}
    dcb2:	4618      	mov	r0, r3
    dcb4:	3714      	adds	r7, #20
    dcb6:	46bd      	mov	sp, r7
    dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    dcbc:	4770      	bx	lr

0000dcbe <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    dcbe:	b480      	push	{r7}
    dcc0:	b083      	sub	sp, #12
    dcc2:	af00      	add	r7, sp, #0
    dcc4:	6078      	str	r0, [r7, #4]
    dcc6:	460b      	mov	r3, r1
    dcc8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    dcca:	bf00      	nop
    dccc:	687b      	ldr	r3, [r7, #4]
    dcce:	789b      	ldrb	r3, [r3, #2]
    dcd0:	b2da      	uxtb	r2, r3
    dcd2:	78fb      	ldrb	r3, [r7, #3]
    dcd4:	4013      	ands	r3, r2
    dcd6:	b2db      	uxtb	r3, r3
    dcd8:	2b00      	cmp	r3, #0
    dcda:	d1f7      	bne.n	dccc <hri_usb_wait_for_sync+0xe>
	};
}
    dcdc:	bf00      	nop
    dcde:	370c      	adds	r7, #12
    dce0:	46bd      	mov	sp, r7
    dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    dce6:	4770      	bx	lr

0000dce8 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    dce8:	b480      	push	{r7}
    dcea:	b083      	sub	sp, #12
    dcec:	af00      	add	r7, sp, #0
    dcee:	6078      	str	r0, [r7, #4]
    dcf0:	460b      	mov	r3, r1
    dcf2:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    dcf4:	687b      	ldr	r3, [r7, #4]
    dcf6:	789b      	ldrb	r3, [r3, #2]
    dcf8:	b2da      	uxtb	r2, r3
    dcfa:	78fb      	ldrb	r3, [r7, #3]
    dcfc:	4013      	ands	r3, r2
    dcfe:	b2db      	uxtb	r3, r3
    dd00:	2b00      	cmp	r3, #0
    dd02:	bf14      	ite	ne
    dd04:	2301      	movne	r3, #1
    dd06:	2300      	moveq	r3, #0
    dd08:	b2db      	uxtb	r3, r3
}
    dd0a:	4618      	mov	r0, r3
    dd0c:	370c      	adds	r7, #12
    dd0e:	46bd      	mov	sp, r7
    dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd14:	4770      	bx	lr

0000dd16 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    dd16:	b480      	push	{r7}
    dd18:	b085      	sub	sp, #20
    dd1a:	af00      	add	r7, sp, #0
    dd1c:	6078      	str	r0, [r7, #4]
    dd1e:	460b      	mov	r3, r1
    dd20:	70fb      	strb	r3, [r7, #3]
    dd22:	4613      	mov	r3, r2
    dd24:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    dd26:	78fb      	ldrb	r3, [r7, #3]
    dd28:	687a      	ldr	r2, [r7, #4]
    dd2a:	3308      	adds	r3, #8
    dd2c:	015b      	lsls	r3, r3, #5
    dd2e:	4413      	add	r3, r2
    dd30:	3307      	adds	r3, #7
    dd32:	781b      	ldrb	r3, [r3, #0]
    dd34:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    dd36:	7bfa      	ldrb	r2, [r7, #15]
    dd38:	78bb      	ldrb	r3, [r7, #2]
    dd3a:	4013      	ands	r3, r2
    dd3c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    dd3e:	7bfb      	ldrb	r3, [r7, #15]
}
    dd40:	4618      	mov	r0, r3
    dd42:	3714      	adds	r7, #20
    dd44:	46bd      	mov	sp, r7
    dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd4a:	4770      	bx	lr

0000dd4c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    dd4c:	b480      	push	{r7}
    dd4e:	b083      	sub	sp, #12
    dd50:	af00      	add	r7, sp, #0
    dd52:	6078      	str	r0, [r7, #4]
    dd54:	460b      	mov	r3, r1
    dd56:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    dd58:	78fb      	ldrb	r3, [r7, #3]
    dd5a:	687a      	ldr	r2, [r7, #4]
    dd5c:	3308      	adds	r3, #8
    dd5e:	015b      	lsls	r3, r3, #5
    dd60:	4413      	add	r3, r2
    dd62:	3307      	adds	r3, #7
    dd64:	781b      	ldrb	r3, [r3, #0]
    dd66:	b2db      	uxtb	r3, r3
}
    dd68:	4618      	mov	r0, r3
    dd6a:	370c      	adds	r7, #12
    dd6c:	46bd      	mov	sp, r7
    dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd72:	4770      	bx	lr

0000dd74 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    dd74:	b480      	push	{r7}
    dd76:	b083      	sub	sp, #12
    dd78:	af00      	add	r7, sp, #0
    dd7a:	6078      	str	r0, [r7, #4]
    dd7c:	460b      	mov	r3, r1
    dd7e:	70fb      	strb	r3, [r7, #3]
    dd80:	4613      	mov	r3, r2
    dd82:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    dd84:	78fb      	ldrb	r3, [r7, #3]
    dd86:	687a      	ldr	r2, [r7, #4]
    dd88:	3308      	adds	r3, #8
    dd8a:	015b      	lsls	r3, r3, #5
    dd8c:	4413      	add	r3, r2
    dd8e:	3307      	adds	r3, #7
    dd90:	78ba      	ldrb	r2, [r7, #2]
    dd92:	701a      	strb	r2, [r3, #0]
}
    dd94:	bf00      	nop
    dd96:	370c      	adds	r7, #12
    dd98:	46bd      	mov	sp, r7
    dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd9e:	4770      	bx	lr

0000dda0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    dda0:	b480      	push	{r7}
    dda2:	b083      	sub	sp, #12
    dda4:	af00      	add	r7, sp, #0
    dda6:	6078      	str	r0, [r7, #4]
    dda8:	460b      	mov	r3, r1
    ddaa:	70fb      	strb	r3, [r7, #3]
    ddac:	4613      	mov	r3, r2
    ddae:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    ddb0:	78fb      	ldrb	r3, [r7, #3]
    ddb2:	687a      	ldr	r2, [r7, #4]
    ddb4:	3308      	adds	r3, #8
    ddb6:	015b      	lsls	r3, r3, #5
    ddb8:	4413      	add	r3, r2
    ddba:	3305      	adds	r3, #5
    ddbc:	78ba      	ldrb	r2, [r7, #2]
    ddbe:	701a      	strb	r2, [r3, #0]
}
    ddc0:	bf00      	nop
    ddc2:	370c      	adds	r7, #12
    ddc4:	46bd      	mov	sp, r7
    ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    ddca:	4770      	bx	lr

0000ddcc <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    ddcc:	b480      	push	{r7}
    ddce:	b083      	sub	sp, #12
    ddd0:	af00      	add	r7, sp, #0
    ddd2:	6078      	str	r0, [r7, #4]
    ddd4:	460b      	mov	r3, r1
    ddd6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    ddd8:	78fb      	ldrb	r3, [r7, #3]
    ddda:	687a      	ldr	r2, [r7, #4]
    dddc:	3308      	adds	r3, #8
    ddde:	015b      	lsls	r3, r3, #5
    dde0:	4413      	add	r3, r2
    dde2:	3306      	adds	r3, #6
    dde4:	781b      	ldrb	r3, [r3, #0]
    dde6:	b2db      	uxtb	r3, r3
}
    dde8:	4618      	mov	r0, r3
    ddea:	370c      	adds	r7, #12
    ddec:	46bd      	mov	sp, r7
    ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
    ddf2:	4770      	bx	lr

0000ddf4 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    ddf4:	b480      	push	{r7}
    ddf6:	b083      	sub	sp, #12
    ddf8:	af00      	add	r7, sp, #0
    ddfa:	6078      	str	r0, [r7, #4]
    ddfc:	460b      	mov	r3, r1
    ddfe:	70fb      	strb	r3, [r7, #3]
    de00:	4613      	mov	r3, r2
    de02:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    de04:	78fb      	ldrb	r3, [r7, #3]
    de06:	687a      	ldr	r2, [r7, #4]
    de08:	3308      	adds	r3, #8
    de0a:	015b      	lsls	r3, r3, #5
    de0c:	4413      	add	r3, r2
    de0e:	3304      	adds	r3, #4
    de10:	78ba      	ldrb	r2, [r7, #2]
    de12:	701a      	strb	r2, [r3, #0]
}
    de14:	bf00      	nop
    de16:	370c      	adds	r7, #12
    de18:	46bd      	mov	sp, r7
    de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    de1e:	4770      	bx	lr

0000de20 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    de20:	b480      	push	{r7}
    de22:	b083      	sub	sp, #12
    de24:	af00      	add	r7, sp, #0
    de26:	6078      	str	r0, [r7, #4]
    de28:	460b      	mov	r3, r1
    de2a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    de2c:	78fb      	ldrb	r3, [r7, #3]
    de2e:	687a      	ldr	r2, [r7, #4]
    de30:	015b      	lsls	r3, r3, #5
    de32:	4413      	add	r3, r2
    de34:	f503 7384 	add.w	r3, r3, #264	; 0x108
    de38:	2210      	movs	r2, #16
    de3a:	701a      	strb	r2, [r3, #0]
}
    de3c:	bf00      	nop
    de3e:	370c      	adds	r7, #12
    de40:	46bd      	mov	sp, r7
    de42:	f85d 7b04 	ldr.w	r7, [sp], #4
    de46:	4770      	bx	lr

0000de48 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    de48:	b480      	push	{r7}
    de4a:	b083      	sub	sp, #12
    de4c:	af00      	add	r7, sp, #0
    de4e:	6078      	str	r0, [r7, #4]
    de50:	460b      	mov	r3, r1
    de52:	70fb      	strb	r3, [r7, #3]
    de54:	4613      	mov	r3, r2
    de56:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    de58:	78fb      	ldrb	r3, [r7, #3]
    de5a:	687a      	ldr	r2, [r7, #4]
    de5c:	015b      	lsls	r3, r3, #5
    de5e:	4413      	add	r3, r2
    de60:	f203 1309 	addw	r3, r3, #265	; 0x109
    de64:	78ba      	ldrb	r2, [r7, #2]
    de66:	701a      	strb	r2, [r3, #0]
}
    de68:	bf00      	nop
    de6a:	370c      	adds	r7, #12
    de6c:	46bd      	mov	sp, r7
    de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    de72:	4770      	bx	lr

0000de74 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    de74:	b480      	push	{r7}
    de76:	b083      	sub	sp, #12
    de78:	af00      	add	r7, sp, #0
    de7a:	6078      	str	r0, [r7, #4]
    de7c:	460b      	mov	r3, r1
    de7e:	70fb      	strb	r3, [r7, #3]
    de80:	4613      	mov	r3, r2
    de82:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    de84:	78fb      	ldrb	r3, [r7, #3]
    de86:	687a      	ldr	r2, [r7, #4]
    de88:	015b      	lsls	r3, r3, #5
    de8a:	4413      	add	r3, r2
    de8c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    de90:	78ba      	ldrb	r2, [r7, #2]
    de92:	701a      	strb	r2, [r3, #0]
}
    de94:	bf00      	nop
    de96:	370c      	adds	r7, #12
    de98:	46bd      	mov	sp, r7
    de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    de9e:	4770      	bx	lr

0000dea0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    dea0:	b480      	push	{r7}
    dea2:	b085      	sub	sp, #20
    dea4:	af00      	add	r7, sp, #0
    dea6:	6078      	str	r0, [r7, #4]
    dea8:	460b      	mov	r3, r1
    deaa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    deac:	78fb      	ldrb	r3, [r7, #3]
    deae:	687a      	ldr	r2, [r7, #4]
    deb0:	3308      	adds	r3, #8
    deb2:	015b      	lsls	r3, r3, #5
    deb4:	4413      	add	r3, r2
    deb6:	781b      	ldrb	r3, [r3, #0]
    deb8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    deba:	7bfb      	ldrb	r3, [r7, #15]
    debc:	f003 0307 	and.w	r3, r3, #7
    dec0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    dec2:	7bfb      	ldrb	r3, [r7, #15]
}
    dec4:	4618      	mov	r0, r3
    dec6:	3714      	adds	r7, #20
    dec8:	46bd      	mov	sp, r7
    deca:	f85d 7b04 	ldr.w	r7, [sp], #4
    dece:	4770      	bx	lr

0000ded0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    ded0:	b480      	push	{r7}
    ded2:	b085      	sub	sp, #20
    ded4:	af00      	add	r7, sp, #0
    ded6:	6078      	str	r0, [r7, #4]
    ded8:	460b      	mov	r3, r1
    deda:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    dedc:	78fb      	ldrb	r3, [r7, #3]
    dede:	687a      	ldr	r2, [r7, #4]
    dee0:	3308      	adds	r3, #8
    dee2:	015b      	lsls	r3, r3, #5
    dee4:	4413      	add	r3, r2
    dee6:	781b      	ldrb	r3, [r3, #0]
    dee8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    deea:	7bfb      	ldrb	r3, [r7, #15]
    deec:	091b      	lsrs	r3, r3, #4
    deee:	b2db      	uxtb	r3, r3
    def0:	f003 0307 	and.w	r3, r3, #7
    def4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    def6:	7bfb      	ldrb	r3, [r7, #15]
}
    def8:	4618      	mov	r0, r3
    defa:	3714      	adds	r7, #20
    defc:	46bd      	mov	sp, r7
    defe:	f85d 7b04 	ldr.w	r7, [sp], #4
    df02:	4770      	bx	lr

0000df04 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    df04:	b480      	push	{r7}
    df06:	b083      	sub	sp, #12
    df08:	af00      	add	r7, sp, #0
    df0a:	6078      	str	r0, [r7, #4]
    df0c:	460b      	mov	r3, r1
    df0e:	70fb      	strb	r3, [r7, #3]
    df10:	4613      	mov	r3, r2
    df12:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    df14:	78fb      	ldrb	r3, [r7, #3]
    df16:	687a      	ldr	r2, [r7, #4]
    df18:	3308      	adds	r3, #8
    df1a:	015b      	lsls	r3, r3, #5
    df1c:	4413      	add	r3, r2
    df1e:	78ba      	ldrb	r2, [r7, #2]
    df20:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    df22:	bf00      	nop
    df24:	370c      	adds	r7, #12
    df26:	46bd      	mov	sp, r7
    df28:	f85d 7b04 	ldr.w	r7, [sp], #4
    df2c:	4770      	bx	lr

0000df2e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    df2e:	b480      	push	{r7}
    df30:	b083      	sub	sp, #12
    df32:	af00      	add	r7, sp, #0
    df34:	6078      	str	r0, [r7, #4]
    df36:	460b      	mov	r3, r1
    df38:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    df3a:	78fb      	ldrb	r3, [r7, #3]
    df3c:	687a      	ldr	r2, [r7, #4]
    df3e:	3308      	adds	r3, #8
    df40:	015b      	lsls	r3, r3, #5
    df42:	4413      	add	r3, r2
    df44:	781b      	ldrb	r3, [r3, #0]
    df46:	b2db      	uxtb	r3, r3
}
    df48:	4618      	mov	r0, r3
    df4a:	370c      	adds	r7, #12
    df4c:	46bd      	mov	sp, r7
    df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    df52:	4770      	bx	lr

0000df54 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    df54:	b480      	push	{r7}
    df56:	b083      	sub	sp, #12
    df58:	af00      	add	r7, sp, #0
    df5a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    df5c:	687b      	ldr	r3, [r7, #4]
    df5e:	8b9b      	ldrh	r3, [r3, #28]
    df60:	b29b      	uxth	r3, r3
}
    df62:	4618      	mov	r0, r3
    df64:	370c      	adds	r7, #12
    df66:	46bd      	mov	sp, r7
    df68:	f85d 7b04 	ldr.w	r7, [sp], #4
    df6c:	4770      	bx	lr

0000df6e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    df6e:	b480      	push	{r7}
    df70:	b083      	sub	sp, #12
    df72:	af00      	add	r7, sp, #0
    df74:	6078      	str	r0, [r7, #4]
    df76:	460b      	mov	r3, r1
    df78:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    df7a:	687b      	ldr	r3, [r7, #4]
    df7c:	887a      	ldrh	r2, [r7, #2]
    df7e:	839a      	strh	r2, [r3, #28]
}
    df80:	bf00      	nop
    df82:	370c      	adds	r7, #12
    df84:	46bd      	mov	sp, r7
    df86:	f85d 7b04 	ldr.w	r7, [sp], #4
    df8a:	4770      	bx	lr

0000df8c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    df8c:	b480      	push	{r7}
    df8e:	b083      	sub	sp, #12
    df90:	af00      	add	r7, sp, #0
    df92:	6078      	str	r0, [r7, #4]
    df94:	460b      	mov	r3, r1
    df96:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    df98:	687b      	ldr	r3, [r7, #4]
    df9a:	887a      	ldrh	r2, [r7, #2]
    df9c:	831a      	strh	r2, [r3, #24]
}
    df9e:	bf00      	nop
    dfa0:	370c      	adds	r7, #12
    dfa2:	46bd      	mov	sp, r7
    dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfa8:	4770      	bx	lr

0000dfaa <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    dfaa:	b480      	push	{r7}
    dfac:	b083      	sub	sp, #12
    dfae:	af00      	add	r7, sp, #0
    dfb0:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    dfb2:	687b      	ldr	r3, [r7, #4]
    dfb4:	8b1b      	ldrh	r3, [r3, #24]
    dfb6:	b29b      	uxth	r3, r3
}
    dfb8:	4618      	mov	r0, r3
    dfba:	370c      	adds	r7, #12
    dfbc:	46bd      	mov	sp, r7
    dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfc2:	4770      	bx	lr

0000dfc4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    dfc4:	b480      	push	{r7}
    dfc6:	b083      	sub	sp, #12
    dfc8:	af00      	add	r7, sp, #0
    dfca:	6078      	str	r0, [r7, #4]
    dfcc:	460b      	mov	r3, r1
    dfce:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    dfd0:	687b      	ldr	r3, [r7, #4]
    dfd2:	887a      	ldrh	r2, [r7, #2]
    dfd4:	829a      	strh	r2, [r3, #20]
}
    dfd6:	bf00      	nop
    dfd8:	370c      	adds	r7, #12
    dfda:	46bd      	mov	sp, r7
    dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfe0:	4770      	bx	lr

0000dfe2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    dfe2:	b480      	push	{r7}
    dfe4:	b085      	sub	sp, #20
    dfe6:	af00      	add	r7, sp, #0
    dfe8:	6078      	str	r0, [r7, #4]
    dfea:	460b      	mov	r3, r1
    dfec:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    dfee:	687b      	ldr	r3, [r7, #4]
    dff0:	789b      	ldrb	r3, [r3, #2]
    dff2:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    dff4:	7bfa      	ldrb	r2, [r7, #15]
    dff6:	78fb      	ldrb	r3, [r7, #3]
    dff8:	4013      	ands	r3, r2
    dffa:	73fb      	strb	r3, [r7, #15]
	return tmp;
    dffc:	7bfb      	ldrb	r3, [r7, #15]
}
    dffe:	4618      	mov	r0, r3
    e000:	3714      	adds	r7, #20
    e002:	46bd      	mov	sp, r7
    e004:	f85d 7b04 	ldr.w	r7, [sp], #4
    e008:	4770      	bx	lr
	...

0000e00c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    e00c:	b580      	push	{r7, lr}
    e00e:	b082      	sub	sp, #8
    e010:	af00      	add	r7, sp, #0
    e012:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    e014:	687b      	ldr	r3, [r7, #4]
    e016:	781b      	ldrb	r3, [r3, #0]
    e018:	b2db      	uxtb	r3, r3
    e01a:	f023 0302 	bic.w	r3, r3, #2
    e01e:	b2da      	uxtb	r2, r3
    e020:	687b      	ldr	r3, [r7, #4]
    e022:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    e024:	2103      	movs	r1, #3
    e026:	6878      	ldr	r0, [r7, #4]
    e028:	4b02      	ldr	r3, [pc, #8]	; (e034 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    e02a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    e02c:	bf00      	nop
    e02e:	3708      	adds	r7, #8
    e030:	46bd      	mov	sp, r7
    e032:	bd80      	pop	{r7, pc}
    e034:	0000dcbf 	.word	0x0000dcbf

0000e038 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    e038:	b580      	push	{r7, lr}
    e03a:	b084      	sub	sp, #16
    e03c:	af00      	add	r7, sp, #0
    e03e:	6078      	str	r0, [r7, #4]
    e040:	460b      	mov	r3, r1
    e042:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e044:	2103      	movs	r1, #3
    e046:	6878      	ldr	r0, [r7, #4]
    e048:	4b06      	ldr	r3, [pc, #24]	; (e064 <hri_usb_get_CTRLA_reg+0x2c>)
    e04a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    e04c:	687b      	ldr	r3, [r7, #4]
    e04e:	781b      	ldrb	r3, [r3, #0]
    e050:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    e052:	7bfa      	ldrb	r2, [r7, #15]
    e054:	78fb      	ldrb	r3, [r7, #3]
    e056:	4013      	ands	r3, r2
    e058:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e05a:	7bfb      	ldrb	r3, [r7, #15]
}
    e05c:	4618      	mov	r0, r3
    e05e:	3710      	adds	r7, #16
    e060:	46bd      	mov	sp, r7
    e062:	bd80      	pop	{r7, pc}
    e064:	0000dcbf 	.word	0x0000dcbf

0000e068 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    e068:	b580      	push	{r7, lr}
    e06a:	b082      	sub	sp, #8
    e06c:	af00      	add	r7, sp, #0
    e06e:	6078      	str	r0, [r7, #4]
    e070:	460b      	mov	r3, r1
    e072:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    e074:	687b      	ldr	r3, [r7, #4]
    e076:	78fa      	ldrb	r2, [r7, #3]
    e078:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e07a:	2103      	movs	r1, #3
    e07c:	6878      	ldr	r0, [r7, #4]
    e07e:	4b03      	ldr	r3, [pc, #12]	; (e08c <hri_usb_write_CTRLA_reg+0x24>)
    e080:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    e082:	bf00      	nop
    e084:	3708      	adds	r7, #8
    e086:	46bd      	mov	sp, r7
    e088:	bd80      	pop	{r7, pc}
    e08a:	bf00      	nop
    e08c:	0000dcbf 	.word	0x0000dcbf

0000e090 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    e090:	b580      	push	{r7, lr}
    e092:	b082      	sub	sp, #8
    e094:	af00      	add	r7, sp, #0
    e096:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e098:	2103      	movs	r1, #3
    e09a:	6878      	ldr	r0, [r7, #4]
    e09c:	4b04      	ldr	r3, [pc, #16]	; (e0b0 <hri_usb_read_CTRLA_reg+0x20>)
    e09e:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    e0a0:	687b      	ldr	r3, [r7, #4]
    e0a2:	781b      	ldrb	r3, [r3, #0]
    e0a4:	b2db      	uxtb	r3, r3
}
    e0a6:	4618      	mov	r0, r3
    e0a8:	3708      	adds	r7, #8
    e0aa:	46bd      	mov	sp, r7
    e0ac:	bd80      	pop	{r7, pc}
    e0ae:	bf00      	nop
    e0b0:	0000dcbf 	.word	0x0000dcbf

0000e0b4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    e0b4:	b480      	push	{r7}
    e0b6:	b083      	sub	sp, #12
    e0b8:	af00      	add	r7, sp, #0
    e0ba:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    e0bc:	687b      	ldr	r3, [r7, #4]
    e0be:	891b      	ldrh	r3, [r3, #8]
    e0c0:	b29b      	uxth	r3, r3
    e0c2:	f023 0301 	bic.w	r3, r3, #1
    e0c6:	b29a      	uxth	r2, r3
    e0c8:	687b      	ldr	r3, [r7, #4]
    e0ca:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    e0cc:	bf00      	nop
    e0ce:	370c      	adds	r7, #12
    e0d0:	46bd      	mov	sp, r7
    e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0d6:	4770      	bx	lr

0000e0d8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    e0d8:	b480      	push	{r7}
    e0da:	b083      	sub	sp, #12
    e0dc:	af00      	add	r7, sp, #0
    e0de:	6078      	str	r0, [r7, #4]
    e0e0:	460b      	mov	r3, r1
    e0e2:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    e0e4:	687b      	ldr	r3, [r7, #4]
    e0e6:	887a      	ldrh	r2, [r7, #2]
    e0e8:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    e0ea:	bf00      	nop
    e0ec:	370c      	adds	r7, #12
    e0ee:	46bd      	mov	sp, r7
    e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0f4:	4770      	bx	lr

0000e0f6 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    e0f6:	b480      	push	{r7}
    e0f8:	b083      	sub	sp, #12
    e0fa:	af00      	add	r7, sp, #0
    e0fc:	6078      	str	r0, [r7, #4]
    e0fe:	460b      	mov	r3, r1
    e100:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    e102:	687b      	ldr	r3, [r7, #4]
    e104:	78fa      	ldrb	r2, [r7, #3]
    e106:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    e108:	bf00      	nop
    e10a:	370c      	adds	r7, #12
    e10c:	46bd      	mov	sp, r7
    e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e112:	4770      	bx	lr

0000e114 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    e114:	b480      	push	{r7}
    e116:	b083      	sub	sp, #12
    e118:	af00      	add	r7, sp, #0
    e11a:	6078      	str	r0, [r7, #4]
    e11c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    e11e:	687b      	ldr	r3, [r7, #4]
    e120:	683a      	ldr	r2, [r7, #0]
    e122:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    e124:	bf00      	nop
    e126:	370c      	adds	r7, #12
    e128:	46bd      	mov	sp, r7
    e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e12e:	4770      	bx	lr

0000e130 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    e130:	b480      	push	{r7}
    e132:	b083      	sub	sp, #12
    e134:	af00      	add	r7, sp, #0
    e136:	6078      	str	r0, [r7, #4]
    e138:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    e13a:	2300      	movs	r3, #0
}
    e13c:	4618      	mov	r0, r3
    e13e:	370c      	adds	r7, #12
    e140:	46bd      	mov	sp, r7
    e142:	f85d 7b04 	ldr.w	r7, [sp], #4
    e146:	4770      	bx	lr

0000e148 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    e148:	b480      	push	{r7}
    e14a:	b085      	sub	sp, #20
    e14c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    e14e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e152:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    e154:	4b28      	ldr	r3, [pc, #160]	; (e1f8 <_usb_load_calib+0xb0>)
    e156:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    e158:	f003 031f 	and.w	r3, r3, #31
    e15c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    e15e:	4b26      	ldr	r3, [pc, #152]	; (e1f8 <_usb_load_calib+0xb0>)
    e160:	681b      	ldr	r3, [r3, #0]
    e162:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    e164:	f003 031f 	and.w	r3, r3, #31
    e168:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    e16a:	4b23      	ldr	r3, [pc, #140]	; (e1f8 <_usb_load_calib+0xb0>)
    e16c:	681b      	ldr	r3, [r3, #0]
    e16e:	0a9b      	lsrs	r3, r3, #10
    e170:	f003 0307 	and.w	r3, r3, #7
    e174:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    e176:	68fb      	ldr	r3, [r7, #12]
    e178:	2b00      	cmp	r3, #0
    e17a:	d002      	beq.n	e182 <_usb_load_calib+0x3a>
    e17c:	68fb      	ldr	r3, [r7, #12]
    e17e:	2b1f      	cmp	r3, #31
    e180:	d101      	bne.n	e186 <_usb_load_calib+0x3e>
		pad_transn = 9;
    e182:	2309      	movs	r3, #9
    e184:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    e186:	68bb      	ldr	r3, [r7, #8]
    e188:	2b00      	cmp	r3, #0
    e18a:	d002      	beq.n	e192 <_usb_load_calib+0x4a>
    e18c:	68bb      	ldr	r3, [r7, #8]
    e18e:	2b1f      	cmp	r3, #31
    e190:	d101      	bne.n	e196 <_usb_load_calib+0x4e>
		pad_transp = 25;
    e192:	2319      	movs	r3, #25
    e194:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    e196:	687b      	ldr	r3, [r7, #4]
    e198:	2b00      	cmp	r3, #0
    e19a:	d002      	beq.n	e1a2 <_usb_load_calib+0x5a>
    e19c:	687b      	ldr	r3, [r7, #4]
    e19e:	2b07      	cmp	r3, #7
    e1a0:	d101      	bne.n	e1a6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    e1a2:	2306      	movs	r3, #6
    e1a4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    e1a6:	68fb      	ldr	r3, [r7, #12]
    e1a8:	b29b      	uxth	r3, r3
    e1aa:	019b      	lsls	r3, r3, #6
    e1ac:	b29b      	uxth	r3, r3
    e1ae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    e1b2:	b29a      	uxth	r2, r3
    e1b4:	68bb      	ldr	r3, [r7, #8]
    e1b6:	b29b      	uxth	r3, r3
    e1b8:	f003 031f 	and.w	r3, r3, #31
    e1bc:	b29b      	uxth	r3, r3
    e1be:	4313      	orrs	r3, r2
    e1c0:	b29a      	uxth	r2, r3
    e1c2:	687b      	ldr	r3, [r7, #4]
    e1c4:	b29b      	uxth	r3, r3
    e1c6:	031b      	lsls	r3, r3, #12
    e1c8:	b29b      	uxth	r3, r3
    e1ca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    e1ce:	b29b      	uxth	r3, r3
    e1d0:	4313      	orrs	r3, r2
    e1d2:	b29a      	uxth	r2, r3
    e1d4:	683b      	ldr	r3, [r7, #0]
    e1d6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    e1d8:	683a      	ldr	r2, [r7, #0]
    e1da:	78d3      	ldrb	r3, [r2, #3]
    e1dc:	f043 0303 	orr.w	r3, r3, #3
    e1e0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    e1e2:	683a      	ldr	r2, [r7, #0]
    e1e4:	78d3      	ldrb	r3, [r2, #3]
    e1e6:	f043 030c 	orr.w	r3, r3, #12
    e1ea:	70d3      	strb	r3, [r2, #3]
}
    e1ec:	bf00      	nop
    e1ee:	3714      	adds	r7, #20
    e1f0:	46bd      	mov	sp, r7
    e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1f6:	4770      	bx	lr
    e1f8:	00800084 	.word	0x00800084

0000e1fc <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    e1fc:	b580      	push	{r7, lr}
    e1fe:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    e200:	bf00      	nop
    e202:	2203      	movs	r2, #3
    e204:	2100      	movs	r1, #0
    e206:	4804      	ldr	r0, [pc, #16]	; (e218 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    e208:	4b04      	ldr	r3, [pc, #16]	; (e21c <_usb_d_dev_wait_dpll_rdy+0x20>)
    e20a:	4798      	blx	r3
    e20c:	4603      	mov	r3, r0
    e20e:	2b03      	cmp	r3, #3
    e210:	d1f7      	bne.n	e202 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    e212:	bf00      	nop
    e214:	bd80      	pop	{r7, pc}
    e216:	bf00      	nop
    e218:	40001000 	.word	0x40001000
    e21c:	0000dc31 	.word	0x0000dc31

0000e220 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    e220:	b580      	push	{r7, lr}
    e222:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    e224:	480e      	ldr	r0, [pc, #56]	; (e260 <_usb_d_dev_wait_dfll_rdy+0x40>)
    e226:	4b0f      	ldr	r3, [pc, #60]	; (e264 <_usb_d_dev_wait_dfll_rdy+0x44>)
    e228:	4798      	blx	r3
    e22a:	4603      	mov	r3, r0
    e22c:	2b00      	cmp	r3, #0
    e22e:	d00a      	beq.n	e246 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    e230:	bf00      	nop
    e232:	f44f 6110 	mov.w	r1, #2304	; 0x900
    e236:	480a      	ldr	r0, [pc, #40]	; (e260 <_usb_d_dev_wait_dfll_rdy+0x40>)
    e238:	4b0b      	ldr	r3, [pc, #44]	; (e268 <_usb_d_dev_wait_dfll_rdy+0x48>)
    e23a:	4798      	blx	r3
    e23c:	4603      	mov	r3, r0
    e23e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    e242:	d1f6      	bne.n	e232 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    e244:	e009      	b.n	e25a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    e246:	bf00      	nop
    e248:	f44f 7180 	mov.w	r1, #256	; 0x100
    e24c:	4804      	ldr	r0, [pc, #16]	; (e260 <_usb_d_dev_wait_dfll_rdy+0x40>)
    e24e:	4b06      	ldr	r3, [pc, #24]	; (e268 <_usb_d_dev_wait_dfll_rdy+0x48>)
    e250:	4798      	blx	r3
    e252:	4603      	mov	r3, r0
    e254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e258:	d1f6      	bne.n	e248 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    e25a:	bf00      	nop
    e25c:	bd80      	pop	{r7, pc}
    e25e:	bf00      	nop
    e260:	40001000 	.word	0x40001000
    e264:	0000dc8f 	.word	0x0000dc8f
    e268:	0000dc69 	.word	0x0000dc69

0000e26c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    e26c:	b580      	push	{r7, lr}
    e26e:	b082      	sub	sp, #8
    e270:	af00      	add	r7, sp, #0
    e272:	4603      	mov	r3, r0
    e274:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    e276:	79fb      	ldrb	r3, [r7, #7]
    e278:	2b00      	cmp	r3, #0
    e27a:	d102      	bne.n	e282 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    e27c:	4b05      	ldr	r3, [pc, #20]	; (e294 <_usb_d_dev_wait_clk_rdy+0x28>)
    e27e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    e280:	e004      	b.n	e28c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    e282:	79fb      	ldrb	r3, [r7, #7]
    e284:	2b01      	cmp	r3, #1
    e286:	d101      	bne.n	e28c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    e288:	4b03      	ldr	r3, [pc, #12]	; (e298 <_usb_d_dev_wait_clk_rdy+0x2c>)
    e28a:	4798      	blx	r3
}
    e28c:	bf00      	nop
    e28e:	3708      	adds	r7, #8
    e290:	46bd      	mov	sp, r7
    e292:	bd80      	pop	{r7, pc}
    e294:	0000e221 	.word	0x0000e221
    e298:	0000e1fd 	.word	0x0000e1fd

0000e29c <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    e29c:	b580      	push	{r7, lr}
    e29e:	b082      	sub	sp, #8
    e2a0:	af00      	add	r7, sp, #0
    e2a2:	4603      	mov	r3, r0
    e2a4:	6039      	str	r1, [r7, #0]
    e2a6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    e2a8:	683b      	ldr	r3, [r7, #0]
    e2aa:	b2da      	uxtb	r2, r3
    e2ac:	79fb      	ldrb	r3, [r7, #7]
    e2ae:	4619      	mov	r1, r3
    e2b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e2b4:	4b02      	ldr	r3, [pc, #8]	; (e2c0 <_usbd_ep_int_ack+0x24>)
    e2b6:	4798      	blx	r3
}
    e2b8:	bf00      	nop
    e2ba:	3708      	adds	r7, #8
    e2bc:	46bd      	mov	sp, r7
    e2be:	bd80      	pop	{r7, pc}
    e2c0:	0000dd75 	.word	0x0000dd75

0000e2c4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    e2c4:	b580      	push	{r7, lr}
    e2c6:	b082      	sub	sp, #8
    e2c8:	af00      	add	r7, sp, #0
    e2ca:	4603      	mov	r3, r0
    e2cc:	6039      	str	r1, [r7, #0]
    e2ce:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    e2d0:	683b      	ldr	r3, [r7, #0]
    e2d2:	b2da      	uxtb	r2, r3
    e2d4:	79fb      	ldrb	r3, [r7, #7]
    e2d6:	4619      	mov	r1, r3
    e2d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e2dc:	4b02      	ldr	r3, [pc, #8]	; (e2e8 <_usbd_ep_int_en+0x24>)
    e2de:	4798      	blx	r3
}
    e2e0:	bf00      	nop
    e2e2:	3708      	adds	r7, #8
    e2e4:	46bd      	mov	sp, r7
    e2e6:	bd80      	pop	{r7, pc}
    e2e8:	0000de49 	.word	0x0000de49

0000e2ec <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    e2ec:	b580      	push	{r7, lr}
    e2ee:	b082      	sub	sp, #8
    e2f0:	af00      	add	r7, sp, #0
    e2f2:	4603      	mov	r3, r0
    e2f4:	6039      	str	r1, [r7, #0]
    e2f6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    e2f8:	683b      	ldr	r3, [r7, #0]
    e2fa:	b2da      	uxtb	r2, r3
    e2fc:	79fb      	ldrb	r3, [r7, #7]
    e2fe:	4619      	mov	r1, r3
    e300:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e304:	4b02      	ldr	r3, [pc, #8]	; (e310 <_usbd_ep_int_dis+0x24>)
    e306:	4798      	blx	r3
}
    e308:	bf00      	nop
    e30a:	3708      	adds	r7, #8
    e30c:	46bd      	mov	sp, r7
    e30e:	bd80      	pop	{r7, pc}
    e310:	0000de75 	.word	0x0000de75

0000e314 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    e314:	b580      	push	{r7, lr}
    e316:	b082      	sub	sp, #8
    e318:	af00      	add	r7, sp, #0
    e31a:	4603      	mov	r3, r0
    e31c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    e31e:	79fb      	ldrb	r3, [r7, #7]
    e320:	4619      	mov	r1, r3
    e322:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e326:	4b06      	ldr	r3, [pc, #24]	; (e340 <_usbd_ep_is_ctrl+0x2c>)
    e328:	4798      	blx	r3
    e32a:	4603      	mov	r3, r0
    e32c:	2b11      	cmp	r3, #17
    e32e:	bf0c      	ite	eq
    e330:	2301      	moveq	r3, #1
    e332:	2300      	movne	r3, #0
    e334:	b2db      	uxtb	r3, r3
}
    e336:	4618      	mov	r0, r3
    e338:	3708      	adds	r7, #8
    e33a:	46bd      	mov	sp, r7
    e33c:	bd80      	pop	{r7, pc}
    e33e:	bf00      	nop
    e340:	0000df2f 	.word	0x0000df2f

0000e344 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    e344:	b580      	push	{r7, lr}
    e346:	b082      	sub	sp, #8
    e348:	af00      	add	r7, sp, #0
    e34a:	4603      	mov	r3, r0
    e34c:	71fb      	strb	r3, [r7, #7]
    e34e:	460b      	mov	r3, r1
    e350:	71bb      	strb	r3, [r7, #6]
    e352:	4613      	mov	r3, r2
    e354:	717b      	strb	r3, [r7, #5]
	if (st) {
    e356:	797b      	ldrb	r3, [r7, #5]
    e358:	2b00      	cmp	r3, #0
    e35a:	d00b      	beq.n	e374 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e35c:	79bb      	ldrb	r3, [r7, #6]
    e35e:	2210      	movs	r2, #16
    e360:	fa02 f303 	lsl.w	r3, r2, r3
    e364:	b2da      	uxtb	r2, r3
    e366:	79fb      	ldrb	r3, [r7, #7]
    e368:	4619      	mov	r1, r3
    e36a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e36e:	4b09      	ldr	r3, [pc, #36]	; (e394 <_usbd_ep_set_stall+0x50>)
    e370:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    e372:	e00a      	b.n	e38a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e374:	79bb      	ldrb	r3, [r7, #6]
    e376:	2210      	movs	r2, #16
    e378:	fa02 f303 	lsl.w	r3, r2, r3
    e37c:	b2da      	uxtb	r2, r3
    e37e:	79fb      	ldrb	r3, [r7, #7]
    e380:	4619      	mov	r1, r3
    e382:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e386:	4b04      	ldr	r3, [pc, #16]	; (e398 <_usbd_ep_set_stall+0x54>)
    e388:	4798      	blx	r3
}
    e38a:	bf00      	nop
    e38c:	3708      	adds	r7, #8
    e38e:	46bd      	mov	sp, r7
    e390:	bd80      	pop	{r7, pc}
    e392:	bf00      	nop
    e394:	0000dda1 	.word	0x0000dda1
    e398:	0000ddf5 	.word	0x0000ddf5

0000e39c <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    e39c:	b580      	push	{r7, lr}
    e39e:	b084      	sub	sp, #16
    e3a0:	af00      	add	r7, sp, #0
    e3a2:	4603      	mov	r3, r0
    e3a4:	460a      	mov	r2, r1
    e3a6:	71fb      	strb	r3, [r7, #7]
    e3a8:	4613      	mov	r3, r2
    e3aa:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    e3ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e3b0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e3b2:	79fb      	ldrb	r3, [r7, #7]
    e3b4:	4619      	mov	r1, r3
    e3b6:	68f8      	ldr	r0, [r7, #12]
    e3b8:	4b08      	ldr	r3, [pc, #32]	; (e3dc <_usbd_ep_is_stalled+0x40>)
    e3ba:	4798      	blx	r3
    e3bc:	4603      	mov	r3, r0
    e3be:	4619      	mov	r1, r3
    e3c0:	79bb      	ldrb	r3, [r7, #6]
    e3c2:	2210      	movs	r2, #16
    e3c4:	fa02 f303 	lsl.w	r3, r2, r3
    e3c8:	400b      	ands	r3, r1
    e3ca:	2b00      	cmp	r3, #0
    e3cc:	bf14      	ite	ne
    e3ce:	2301      	movne	r3, #1
    e3d0:	2300      	moveq	r3, #0
    e3d2:	b2db      	uxtb	r3, r3
}
    e3d4:	4618      	mov	r0, r3
    e3d6:	3710      	adds	r7, #16
    e3d8:	46bd      	mov	sp, r7
    e3da:	bd80      	pop	{r7, pc}
    e3dc:	0000ddcd 	.word	0x0000ddcd

0000e3e0 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    e3e0:	b580      	push	{r7, lr}
    e3e2:	b084      	sub	sp, #16
    e3e4:	af00      	add	r7, sp, #0
    e3e6:	4603      	mov	r3, r0
    e3e8:	460a      	mov	r2, r1
    e3ea:	71fb      	strb	r3, [r7, #7]
    e3ec:	4613      	mov	r3, r2
    e3ee:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    e3f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e3f4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    e3f6:	79fb      	ldrb	r3, [r7, #7]
    e3f8:	4619      	mov	r1, r3
    e3fa:	68f8      	ldr	r0, [r7, #12]
    e3fc:	4b08      	ldr	r3, [pc, #32]	; (e420 <_usbd_ep_is_stall_sent+0x40>)
    e3fe:	4798      	blx	r3
    e400:	4603      	mov	r3, r0
    e402:	4619      	mov	r1, r3
    e404:	79bb      	ldrb	r3, [r7, #6]
    e406:	2220      	movs	r2, #32
    e408:	fa02 f303 	lsl.w	r3, r2, r3
    e40c:	400b      	ands	r3, r1
    e40e:	2b00      	cmp	r3, #0
    e410:	bf14      	ite	ne
    e412:	2301      	movne	r3, #1
    e414:	2300      	moveq	r3, #0
    e416:	b2db      	uxtb	r3, r3
}
    e418:	4618      	mov	r0, r3
    e41a:	3710      	adds	r7, #16
    e41c:	46bd      	mov	sp, r7
    e41e:	bd80      	pop	{r7, pc}
    e420:	0000dd4d 	.word	0x0000dd4d

0000e424 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    e424:	b580      	push	{r7, lr}
    e426:	b082      	sub	sp, #8
    e428:	af00      	add	r7, sp, #0
    e42a:	4603      	mov	r3, r0
    e42c:	460a      	mov	r2, r1
    e42e:	71fb      	strb	r3, [r7, #7]
    e430:	4613      	mov	r3, r2
    e432:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    e434:	79bb      	ldrb	r3, [r7, #6]
    e436:	2220      	movs	r2, #32
    e438:	409a      	lsls	r2, r3
    e43a:	79fb      	ldrb	r3, [r7, #7]
    e43c:	4611      	mov	r1, r2
    e43e:	4618      	mov	r0, r3
    e440:	4b02      	ldr	r3, [pc, #8]	; (e44c <_usbd_ep_ack_stall+0x28>)
    e442:	4798      	blx	r3
}
    e444:	bf00      	nop
    e446:	3708      	adds	r7, #8
    e448:	46bd      	mov	sp, r7
    e44a:	bd80      	pop	{r7, pc}
    e44c:	0000e29d 	.word	0x0000e29d

0000e450 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    e450:	b580      	push	{r7, lr}
    e452:	b082      	sub	sp, #8
    e454:	af00      	add	r7, sp, #0
    e456:	4603      	mov	r3, r0
    e458:	71fb      	strb	r3, [r7, #7]
    e45a:	460b      	mov	r3, r1
    e45c:	71bb      	strb	r3, [r7, #6]
    e45e:	4613      	mov	r3, r2
    e460:	717b      	strb	r3, [r7, #5]
	if (en) {
    e462:	797b      	ldrb	r3, [r7, #5]
    e464:	2b00      	cmp	r3, #0
    e466:	d008      	beq.n	e47a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    e468:	79bb      	ldrb	r3, [r7, #6]
    e46a:	2220      	movs	r2, #32
    e46c:	409a      	lsls	r2, r3
    e46e:	79fb      	ldrb	r3, [r7, #7]
    e470:	4611      	mov	r1, r2
    e472:	4618      	mov	r0, r3
    e474:	4b07      	ldr	r3, [pc, #28]	; (e494 <_usbd_ep_int_stall_en+0x44>)
    e476:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    e478:	e007      	b.n	e48a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    e47a:	79bb      	ldrb	r3, [r7, #6]
    e47c:	2220      	movs	r2, #32
    e47e:	409a      	lsls	r2, r3
    e480:	79fb      	ldrb	r3, [r7, #7]
    e482:	4611      	mov	r1, r2
    e484:	4618      	mov	r0, r3
    e486:	4b04      	ldr	r3, [pc, #16]	; (e498 <_usbd_ep_int_stall_en+0x48>)
    e488:	4798      	blx	r3
}
    e48a:	bf00      	nop
    e48c:	3708      	adds	r7, #8
    e48e:	46bd      	mov	sp, r7
    e490:	bd80      	pop	{r7, pc}
    e492:	bf00      	nop
    e494:	0000e2c5 	.word	0x0000e2c5
    e498:	0000e2ed 	.word	0x0000e2ed

0000e49c <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    e49c:	b580      	push	{r7, lr}
    e49e:	b082      	sub	sp, #8
    e4a0:	af00      	add	r7, sp, #0
    e4a2:	4603      	mov	r3, r0
    e4a4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    e4a6:	79fb      	ldrb	r3, [r7, #7]
    e4a8:	4619      	mov	r1, r3
    e4aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e4ae:	4b03      	ldr	r3, [pc, #12]	; (e4bc <_usbd_ep_stop_setup+0x20>)
    e4b0:	4798      	blx	r3
}
    e4b2:	bf00      	nop
    e4b4:	3708      	adds	r7, #8
    e4b6:	46bd      	mov	sp, r7
    e4b8:	bd80      	pop	{r7, pc}
    e4ba:	bf00      	nop
    e4bc:	0000de21 	.word	0x0000de21

0000e4c0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    e4c0:	b580      	push	{r7, lr}
    e4c2:	b082      	sub	sp, #8
    e4c4:	af00      	add	r7, sp, #0
    e4c6:	4603      	mov	r3, r0
    e4c8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    e4ca:	79fb      	ldrb	r3, [r7, #7]
    e4cc:	2210      	movs	r2, #16
    e4ce:	4619      	mov	r1, r3
    e4d0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e4d4:	4b05      	ldr	r3, [pc, #20]	; (e4ec <_usbd_ep_is_setup+0x2c>)
    e4d6:	4798      	blx	r3
    e4d8:	4603      	mov	r3, r0
    e4da:	2b00      	cmp	r3, #0
    e4dc:	bf14      	ite	ne
    e4de:	2301      	movne	r3, #1
    e4e0:	2300      	moveq	r3, #0
    e4e2:	b2db      	uxtb	r3, r3
}
    e4e4:	4618      	mov	r0, r3
    e4e6:	3708      	adds	r7, #8
    e4e8:	46bd      	mov	sp, r7
    e4ea:	bd80      	pop	{r7, pc}
    e4ec:	0000dd17 	.word	0x0000dd17

0000e4f0 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    e4f0:	b580      	push	{r7, lr}
    e4f2:	b082      	sub	sp, #8
    e4f4:	af00      	add	r7, sp, #0
    e4f6:	4603      	mov	r3, r0
    e4f8:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    e4fa:	79fb      	ldrb	r3, [r7, #7]
    e4fc:	2110      	movs	r1, #16
    e4fe:	4618      	mov	r0, r3
    e500:	4b02      	ldr	r3, [pc, #8]	; (e50c <_usbd_ep_ack_setup+0x1c>)
    e502:	4798      	blx	r3
}
    e504:	bf00      	nop
    e506:	3708      	adds	r7, #8
    e508:	46bd      	mov	sp, r7
    e50a:	bd80      	pop	{r7, pc}
    e50c:	0000e29d 	.word	0x0000e29d

0000e510 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    e510:	b580      	push	{r7, lr}
    e512:	b082      	sub	sp, #8
    e514:	af00      	add	r7, sp, #0
    e516:	4603      	mov	r3, r0
    e518:	71fb      	strb	r3, [r7, #7]
    e51a:	460b      	mov	r3, r1
    e51c:	71bb      	strb	r3, [r7, #6]
    e51e:	4613      	mov	r3, r2
    e520:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    e522:	797b      	ldrb	r3, [r7, #5]
    e524:	2b00      	cmp	r3, #0
    e526:	d00b      	beq.n	e540 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    e528:	79bb      	ldrb	r3, [r7, #6]
    e52a:	2201      	movs	r2, #1
    e52c:	fa02 f303 	lsl.w	r3, r2, r3
    e530:	b2da      	uxtb	r2, r3
    e532:	79fb      	ldrb	r3, [r7, #7]
    e534:	4619      	mov	r1, r3
    e536:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e53a:	4b09      	ldr	r3, [pc, #36]	; (e560 <_usbd_ep_set_toggle+0x50>)
    e53c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    e53e:	e00a      	b.n	e556 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    e540:	79bb      	ldrb	r3, [r7, #6]
    e542:	2201      	movs	r2, #1
    e544:	fa02 f303 	lsl.w	r3, r2, r3
    e548:	b2da      	uxtb	r2, r3
    e54a:	79fb      	ldrb	r3, [r7, #7]
    e54c:	4619      	mov	r1, r3
    e54e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e552:	4b04      	ldr	r3, [pc, #16]	; (e564 <_usbd_ep_set_toggle+0x54>)
    e554:	4798      	blx	r3
}
    e556:	bf00      	nop
    e558:	3708      	adds	r7, #8
    e55a:	46bd      	mov	sp, r7
    e55c:	bd80      	pop	{r7, pc}
    e55e:	bf00      	nop
    e560:	0000dda1 	.word	0x0000dda1
    e564:	0000ddf5 	.word	0x0000ddf5

0000e568 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    e568:	b580      	push	{r7, lr}
    e56a:	b082      	sub	sp, #8
    e56c:	af00      	add	r7, sp, #0
    e56e:	4603      	mov	r3, r0
    e570:	460a      	mov	r2, r1
    e572:	71fb      	strb	r3, [r7, #7]
    e574:	4613      	mov	r3, r2
    e576:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    e578:	79bb      	ldrb	r3, [r7, #6]
    e57a:	2201      	movs	r2, #1
    e57c:	409a      	lsls	r2, r3
    e57e:	79fb      	ldrb	r3, [r7, #7]
    e580:	4611      	mov	r1, r2
    e582:	4618      	mov	r0, r3
    e584:	4b02      	ldr	r3, [pc, #8]	; (e590 <_usbd_ep_ack_io_cpt+0x28>)
    e586:	4798      	blx	r3
}
    e588:	bf00      	nop
    e58a:	3708      	adds	r7, #8
    e58c:	46bd      	mov	sp, r7
    e58e:	bd80      	pop	{r7, pc}
    e590:	0000e29d 	.word	0x0000e29d

0000e594 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    e594:	b480      	push	{r7}
    e596:	b085      	sub	sp, #20
    e598:	af00      	add	r7, sp, #0
    e59a:	4603      	mov	r3, r0
    e59c:	603a      	str	r2, [r7, #0]
    e59e:	71fb      	strb	r3, [r7, #7]
    e5a0:	460b      	mov	r3, r1
    e5a2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e5a4:	79fa      	ldrb	r2, [r7, #7]
    e5a6:	79bb      	ldrb	r3, [r7, #6]
    e5a8:	0052      	lsls	r2, r2, #1
    e5aa:	4413      	add	r3, r2
    e5ac:	011b      	lsls	r3, r3, #4
    e5ae:	4a06      	ldr	r2, [pc, #24]	; (e5c8 <_usbd_ep_set_buf+0x34>)
    e5b0:	4413      	add	r3, r2
    e5b2:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    e5b4:	68fb      	ldr	r3, [r7, #12]
    e5b6:	683a      	ldr	r2, [r7, #0]
    e5b8:	601a      	str	r2, [r3, #0]
}
    e5ba:	bf00      	nop
    e5bc:	3714      	adds	r7, #20
    e5be:	46bd      	mov	sp, r7
    e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e5c4:	4770      	bx	lr
    e5c6:	bf00      	nop
    e5c8:	20008bf0 	.word	0x20008bf0

0000e5cc <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    e5cc:	b480      	push	{r7}
    e5ce:	b085      	sub	sp, #20
    e5d0:	af00      	add	r7, sp, #0
    e5d2:	4603      	mov	r3, r0
    e5d4:	71fb      	strb	r3, [r7, #7]
    e5d6:	460b      	mov	r3, r1
    e5d8:	71bb      	strb	r3, [r7, #6]
    e5da:	4613      	mov	r3, r2
    e5dc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e5de:	79fa      	ldrb	r2, [r7, #7]
    e5e0:	79bb      	ldrb	r3, [r7, #6]
    e5e2:	0052      	lsls	r2, r2, #1
    e5e4:	4413      	add	r3, r2
    e5e6:	011b      	lsls	r3, r3, #4
    e5e8:	4a08      	ldr	r2, [pc, #32]	; (e60c <_usbd_ep_set_in_count+0x40>)
    e5ea:	4413      	add	r3, r2
    e5ec:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    e5ee:	88bb      	ldrh	r3, [r7, #4]
    e5f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e5f4:	b299      	uxth	r1, r3
    e5f6:	68fa      	ldr	r2, [r7, #12]
    e5f8:	6853      	ldr	r3, [r2, #4]
    e5fa:	f361 339b 	bfi	r3, r1, #14, #14
    e5fe:	6053      	str	r3, [r2, #4]
}
    e600:	bf00      	nop
    e602:	3714      	adds	r7, #20
    e604:	46bd      	mov	sp, r7
    e606:	f85d 7b04 	ldr.w	r7, [sp], #4
    e60a:	4770      	bx	lr
    e60c:	20008bf0 	.word	0x20008bf0

0000e610 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    e610:	b480      	push	{r7}
    e612:	b085      	sub	sp, #20
    e614:	af00      	add	r7, sp, #0
    e616:	4603      	mov	r3, r0
    e618:	71fb      	strb	r3, [r7, #7]
    e61a:	460b      	mov	r3, r1
    e61c:	71bb      	strb	r3, [r7, #6]
    e61e:	4613      	mov	r3, r2
    e620:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e622:	79fa      	ldrb	r2, [r7, #7]
    e624:	79bb      	ldrb	r3, [r7, #6]
    e626:	0052      	lsls	r2, r2, #1
    e628:	4413      	add	r3, r2
    e62a:	011b      	lsls	r3, r3, #4
    e62c:	4a08      	ldr	r2, [pc, #32]	; (e650 <_usbd_ep_set_in_size+0x40>)
    e62e:	4413      	add	r3, r2
    e630:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    e632:	88bb      	ldrh	r3, [r7, #4]
    e634:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e638:	b299      	uxth	r1, r3
    e63a:	68fa      	ldr	r2, [r7, #12]
    e63c:	6853      	ldr	r3, [r2, #4]
    e63e:	f361 030d 	bfi	r3, r1, #0, #14
    e642:	6053      	str	r3, [r2, #4]
}
    e644:	bf00      	nop
    e646:	3714      	adds	r7, #20
    e648:	46bd      	mov	sp, r7
    e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e64e:	4770      	bx	lr
    e650:	20008bf0 	.word	0x20008bf0

0000e654 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    e654:	b480      	push	{r7}
    e656:	b085      	sub	sp, #20
    e658:	af00      	add	r7, sp, #0
    e65a:	4603      	mov	r3, r0
    e65c:	71fb      	strb	r3, [r7, #7]
    e65e:	460b      	mov	r3, r1
    e660:	71bb      	strb	r3, [r7, #6]
    e662:	4613      	mov	r3, r2
    e664:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e666:	79fa      	ldrb	r2, [r7, #7]
    e668:	79bb      	ldrb	r3, [r7, #6]
    e66a:	0052      	lsls	r2, r2, #1
    e66c:	4413      	add	r3, r2
    e66e:	011b      	lsls	r3, r3, #4
    e670:	4a08      	ldr	r2, [pc, #32]	; (e694 <_usbd_ep_set_out_count+0x40>)
    e672:	4413      	add	r3, r2
    e674:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    e676:	88bb      	ldrh	r3, [r7, #4]
    e678:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e67c:	b299      	uxth	r1, r3
    e67e:	68fa      	ldr	r2, [r7, #12]
    e680:	6853      	ldr	r3, [r2, #4]
    e682:	f361 030d 	bfi	r3, r1, #0, #14
    e686:	6053      	str	r3, [r2, #4]
}
    e688:	bf00      	nop
    e68a:	3714      	adds	r7, #20
    e68c:	46bd      	mov	sp, r7
    e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e692:	4770      	bx	lr
    e694:	20008bf0 	.word	0x20008bf0

0000e698 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    e698:	b480      	push	{r7}
    e69a:	b085      	sub	sp, #20
    e69c:	af00      	add	r7, sp, #0
    e69e:	4603      	mov	r3, r0
    e6a0:	71fb      	strb	r3, [r7, #7]
    e6a2:	460b      	mov	r3, r1
    e6a4:	71bb      	strb	r3, [r7, #6]
    e6a6:	4613      	mov	r3, r2
    e6a8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e6aa:	79fa      	ldrb	r2, [r7, #7]
    e6ac:	79bb      	ldrb	r3, [r7, #6]
    e6ae:	0052      	lsls	r2, r2, #1
    e6b0:	4413      	add	r3, r2
    e6b2:	011b      	lsls	r3, r3, #4
    e6b4:	4a08      	ldr	r2, [pc, #32]	; (e6d8 <_usbd_ep_set_out_size+0x40>)
    e6b6:	4413      	add	r3, r2
    e6b8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    e6ba:	88bb      	ldrh	r3, [r7, #4]
    e6bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e6c0:	b299      	uxth	r1, r3
    e6c2:	68fa      	ldr	r2, [r7, #12]
    e6c4:	6853      	ldr	r3, [r2, #4]
    e6c6:	f361 339b 	bfi	r3, r1, #14, #14
    e6ca:	6053      	str	r3, [r2, #4]
}
    e6cc:	bf00      	nop
    e6ce:	3714      	adds	r7, #20
    e6d0:	46bd      	mov	sp, r7
    e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e6d6:	4770      	bx	lr
    e6d8:	20008bf0 	.word	0x20008bf0

0000e6dc <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    e6dc:	b580      	push	{r7, lr}
    e6de:	b084      	sub	sp, #16
    e6e0:	af00      	add	r7, sp, #0
    e6e2:	60ba      	str	r2, [r7, #8]
    e6e4:	607b      	str	r3, [r7, #4]
    e6e6:	4603      	mov	r3, r0
    e6e8:	73fb      	strb	r3, [r7, #15]
    e6ea:	460b      	mov	r3, r1
    e6ec:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    e6ee:	68bb      	ldr	r3, [r7, #8]
    e6f0:	b29a      	uxth	r2, r3
    e6f2:	7bb9      	ldrb	r1, [r7, #14]
    e6f4:	7bfb      	ldrb	r3, [r7, #15]
    e6f6:	4618      	mov	r0, r3
    e6f8:	4b06      	ldr	r3, [pc, #24]	; (e714 <_usbd_ep_set_in_trans+0x38>)
    e6fa:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    e6fc:	687b      	ldr	r3, [r7, #4]
    e6fe:	b29a      	uxth	r2, r3
    e700:	7bb9      	ldrb	r1, [r7, #14]
    e702:	7bfb      	ldrb	r3, [r7, #15]
    e704:	4618      	mov	r0, r3
    e706:	4b04      	ldr	r3, [pc, #16]	; (e718 <_usbd_ep_set_in_trans+0x3c>)
    e708:	4798      	blx	r3
}
    e70a:	bf00      	nop
    e70c:	3710      	adds	r7, #16
    e70e:	46bd      	mov	sp, r7
    e710:	bd80      	pop	{r7, pc}
    e712:	bf00      	nop
    e714:	0000e611 	.word	0x0000e611
    e718:	0000e5cd 	.word	0x0000e5cd

0000e71c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    e71c:	b580      	push	{r7, lr}
    e71e:	b084      	sub	sp, #16
    e720:	af00      	add	r7, sp, #0
    e722:	60ba      	str	r2, [r7, #8]
    e724:	607b      	str	r3, [r7, #4]
    e726:	4603      	mov	r3, r0
    e728:	73fb      	strb	r3, [r7, #15]
    e72a:	460b      	mov	r3, r1
    e72c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    e72e:	68bb      	ldr	r3, [r7, #8]
    e730:	b29a      	uxth	r2, r3
    e732:	7bb9      	ldrb	r1, [r7, #14]
    e734:	7bfb      	ldrb	r3, [r7, #15]
    e736:	4618      	mov	r0, r3
    e738:	4b06      	ldr	r3, [pc, #24]	; (e754 <_usbd_ep_set_out_trans+0x38>)
    e73a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    e73c:	687b      	ldr	r3, [r7, #4]
    e73e:	b29a      	uxth	r2, r3
    e740:	7bb9      	ldrb	r1, [r7, #14]
    e742:	7bfb      	ldrb	r3, [r7, #15]
    e744:	4618      	mov	r0, r3
    e746:	4b04      	ldr	r3, [pc, #16]	; (e758 <_usbd_ep_set_out_trans+0x3c>)
    e748:	4798      	blx	r3
}
    e74a:	bf00      	nop
    e74c:	3710      	adds	r7, #16
    e74e:	46bd      	mov	sp, r7
    e750:	bd80      	pop	{r7, pc}
    e752:	bf00      	nop
    e754:	0000e699 	.word	0x0000e699
    e758:	0000e655 	.word	0x0000e655

0000e75c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    e75c:	b480      	push	{r7}
    e75e:	b085      	sub	sp, #20
    e760:	af00      	add	r7, sp, #0
    e762:	4603      	mov	r3, r0
    e764:	460a      	mov	r2, r1
    e766:	71fb      	strb	r3, [r7, #7]
    e768:	4613      	mov	r3, r2
    e76a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e76c:	79fa      	ldrb	r2, [r7, #7]
    e76e:	79bb      	ldrb	r3, [r7, #6]
    e770:	0052      	lsls	r2, r2, #1
    e772:	4413      	add	r3, r2
    e774:	011b      	lsls	r3, r3, #4
    e776:	4a06      	ldr	r2, [pc, #24]	; (e790 <_usbd_ep_clear_bank_status+0x34>)
    e778:	4413      	add	r3, r2
    e77a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    e77c:	68fb      	ldr	r3, [r7, #12]
    e77e:	2200      	movs	r2, #0
    e780:	729a      	strb	r2, [r3, #10]
}
    e782:	bf00      	nop
    e784:	3714      	adds	r7, #20
    e786:	46bd      	mov	sp, r7
    e788:	f85d 7b04 	ldr.w	r7, [sp], #4
    e78c:	4770      	bx	lr
    e78e:	bf00      	nop
    e790:	20008bf0 	.word	0x20008bf0

0000e794 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    e794:	b580      	push	{r7, lr}
    e796:	b082      	sub	sp, #8
    e798:	af00      	add	r7, sp, #0
    e79a:	4603      	mov	r3, r0
    e79c:	71fb      	strb	r3, [r7, #7]
    e79e:	460b      	mov	r3, r1
    e7a0:	71bb      	strb	r3, [r7, #6]
    e7a2:	4613      	mov	r3, r2
    e7a4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    e7a6:	797b      	ldrb	r3, [r7, #5]
    e7a8:	2b00      	cmp	r3, #0
    e7aa:	d00b      	beq.n	e7c4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e7ac:	79bb      	ldrb	r3, [r7, #6]
    e7ae:	2240      	movs	r2, #64	; 0x40
    e7b0:	fa02 f303 	lsl.w	r3, r2, r3
    e7b4:	b2da      	uxtb	r2, r3
    e7b6:	79fb      	ldrb	r3, [r7, #7]
    e7b8:	4619      	mov	r1, r3
    e7ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e7be:	4b09      	ldr	r3, [pc, #36]	; (e7e4 <_usbd_ep_set_in_rdy+0x50>)
    e7c0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    e7c2:	e00a      	b.n	e7da <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e7c4:	79bb      	ldrb	r3, [r7, #6]
    e7c6:	2240      	movs	r2, #64	; 0x40
    e7c8:	fa02 f303 	lsl.w	r3, r2, r3
    e7cc:	b2da      	uxtb	r2, r3
    e7ce:	79fb      	ldrb	r3, [r7, #7]
    e7d0:	4619      	mov	r1, r3
    e7d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e7d6:	4b04      	ldr	r3, [pc, #16]	; (e7e8 <_usbd_ep_set_in_rdy+0x54>)
    e7d8:	4798      	blx	r3
}
    e7da:	bf00      	nop
    e7dc:	3708      	adds	r7, #8
    e7de:	46bd      	mov	sp, r7
    e7e0:	bd80      	pop	{r7, pc}
    e7e2:	bf00      	nop
    e7e4:	0000dda1 	.word	0x0000dda1
    e7e8:	0000ddf5 	.word	0x0000ddf5

0000e7ec <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    e7ec:	b580      	push	{r7, lr}
    e7ee:	b082      	sub	sp, #8
    e7f0:	af00      	add	r7, sp, #0
    e7f2:	4603      	mov	r3, r0
    e7f4:	71fb      	strb	r3, [r7, #7]
    e7f6:	460b      	mov	r3, r1
    e7f8:	71bb      	strb	r3, [r7, #6]
    e7fa:	4613      	mov	r3, r2
    e7fc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    e7fe:	797b      	ldrb	r3, [r7, #5]
    e800:	2b00      	cmp	r3, #0
    e802:	d00b      	beq.n	e81c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e804:	79bb      	ldrb	r3, [r7, #6]
    e806:	2240      	movs	r2, #64	; 0x40
    e808:	fa02 f303 	lsl.w	r3, r2, r3
    e80c:	b2da      	uxtb	r2, r3
    e80e:	79fb      	ldrb	r3, [r7, #7]
    e810:	4619      	mov	r1, r3
    e812:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e816:	4b09      	ldr	r3, [pc, #36]	; (e83c <_usbd_ep_set_out_rdy+0x50>)
    e818:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    e81a:	e00a      	b.n	e832 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e81c:	79bb      	ldrb	r3, [r7, #6]
    e81e:	2240      	movs	r2, #64	; 0x40
    e820:	fa02 f303 	lsl.w	r3, r2, r3
    e824:	b2da      	uxtb	r2, r3
    e826:	79fb      	ldrb	r3, [r7, #7]
    e828:	4619      	mov	r1, r3
    e82a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e82e:	4b04      	ldr	r3, [pc, #16]	; (e840 <_usbd_ep_set_out_rdy+0x54>)
    e830:	4798      	blx	r3
}
    e832:	bf00      	nop
    e834:	3708      	adds	r7, #8
    e836:	46bd      	mov	sp, r7
    e838:	bd80      	pop	{r7, pc}
    e83a:	bf00      	nop
    e83c:	0000ddf5 	.word	0x0000ddf5
    e840:	0000dda1 	.word	0x0000dda1

0000e844 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    e844:	b480      	push	{r7}
    e846:	b083      	sub	sp, #12
    e848:	af00      	add	r7, sp, #0
    e84a:	4603      	mov	r3, r0
    e84c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    e84e:	88fb      	ldrh	r3, [r7, #6]
    e850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e854:	d820      	bhi.n	e898 <_usbd_ep_pcksize_size+0x54>
    e856:	88fb      	ldrh	r3, [r7, #6]
    e858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e85c:	d81a      	bhi.n	e894 <_usbd_ep_pcksize_size+0x50>
    e85e:	88fb      	ldrh	r3, [r7, #6]
    e860:	2b80      	cmp	r3, #128	; 0x80
    e862:	d815      	bhi.n	e890 <_usbd_ep_pcksize_size+0x4c>
    e864:	88fb      	ldrh	r3, [r7, #6]
    e866:	2b40      	cmp	r3, #64	; 0x40
    e868:	d810      	bhi.n	e88c <_usbd_ep_pcksize_size+0x48>
    e86a:	88fb      	ldrh	r3, [r7, #6]
    e86c:	2b20      	cmp	r3, #32
    e86e:	d80b      	bhi.n	e888 <_usbd_ep_pcksize_size+0x44>
    e870:	88fb      	ldrh	r3, [r7, #6]
    e872:	2b10      	cmp	r3, #16
    e874:	d806      	bhi.n	e884 <_usbd_ep_pcksize_size+0x40>
    e876:	88fb      	ldrh	r3, [r7, #6]
    e878:	2b08      	cmp	r3, #8
    e87a:	bf8c      	ite	hi
    e87c:	2301      	movhi	r3, #1
    e87e:	2300      	movls	r3, #0
    e880:	b2db      	uxtb	r3, r3
    e882:	e00a      	b.n	e89a <_usbd_ep_pcksize_size+0x56>
    e884:	2302      	movs	r3, #2
    e886:	e008      	b.n	e89a <_usbd_ep_pcksize_size+0x56>
    e888:	2303      	movs	r3, #3
    e88a:	e006      	b.n	e89a <_usbd_ep_pcksize_size+0x56>
    e88c:	2304      	movs	r3, #4
    e88e:	e004      	b.n	e89a <_usbd_ep_pcksize_size+0x56>
    e890:	2305      	movs	r3, #5
    e892:	e002      	b.n	e89a <_usbd_ep_pcksize_size+0x56>
    e894:	2306      	movs	r3, #6
    e896:	e000      	b.n	e89a <_usbd_ep_pcksize_size+0x56>
    e898:	2307      	movs	r3, #7
}
    e89a:	4618      	mov	r0, r3
    e89c:	370c      	adds	r7, #12
    e89e:	46bd      	mov	sp, r7
    e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e8a4:	4770      	bx	lr
	...

0000e8a8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    e8a8:	b480      	push	{r7}
    e8aa:	b085      	sub	sp, #20
    e8ac:	af00      	add	r7, sp, #0
    e8ae:	4603      	mov	r3, r0
    e8b0:	460a      	mov	r2, r1
    e8b2:	71fb      	strb	r3, [r7, #7]
    e8b4:	4613      	mov	r3, r2
    e8b6:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    e8b8:	79fb      	ldrb	r3, [r7, #7]
    e8ba:	2b00      	cmp	r3, #0
    e8bc:	d008      	beq.n	e8d0 <_usb_d_dev_ept+0x28>
    e8be:	79bb      	ldrb	r3, [r7, #6]
    e8c0:	2b00      	cmp	r3, #0
    e8c2:	d003      	beq.n	e8cc <_usb_d_dev_ept+0x24>
    e8c4:	79fb      	ldrb	r3, [r7, #7]
    e8c6:	3304      	adds	r3, #4
    e8c8:	b2db      	uxtb	r3, r3
    e8ca:	e002      	b.n	e8d2 <_usb_d_dev_ept+0x2a>
    e8cc:	79fb      	ldrb	r3, [r7, #7]
    e8ce:	e000      	b.n	e8d2 <_usb_d_dev_ept+0x2a>
    e8d0:	2300      	movs	r3, #0
    e8d2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    e8d4:	7bfa      	ldrb	r2, [r7, #15]
    e8d6:	4613      	mov	r3, r2
    e8d8:	009b      	lsls	r3, r3, #2
    e8da:	4413      	add	r3, r2
    e8dc:	009b      	lsls	r3, r3, #2
    e8de:	3310      	adds	r3, #16
    e8e0:	4a04      	ldr	r2, [pc, #16]	; (e8f4 <_usb_d_dev_ept+0x4c>)
    e8e2:	4413      	add	r3, r2
    e8e4:	3304      	adds	r3, #4
}
    e8e6:	4618      	mov	r0, r3
    e8e8:	3714      	adds	r7, #20
    e8ea:	46bd      	mov	sp, r7
    e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    e8f0:	4770      	bx	lr
    e8f2:	bf00      	nop
    e8f4:	20008b28 	.word	0x20008b28

0000e8f8 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    e8f8:	b580      	push	{r7, lr}
    e8fa:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    e8fc:	2104      	movs	r1, #4
    e8fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e902:	4b03      	ldr	r3, [pc, #12]	; (e910 <_usb_d_dev_sof+0x18>)
    e904:	4798      	blx	r3
	dev_inst.callbacks.sof();
    e906:	4b03      	ldr	r3, [pc, #12]	; (e914 <_usb_d_dev_sof+0x1c>)
    e908:	681b      	ldr	r3, [r3, #0]
    e90a:	4798      	blx	r3
}
    e90c:	bf00      	nop
    e90e:	bd80      	pop	{r7, pc}
    e910:	0000df6f 	.word	0x0000df6f
    e914:	20008b28 	.word	0x20008b28

0000e918 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    e918:	b580      	push	{r7, lr}
    e91a:	b084      	sub	sp, #16
    e91c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    e91e:	2300      	movs	r3, #0
    e920:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e922:	f240 2101 	movw	r1, #513	; 0x201
    e926:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e92a:	4b1a      	ldr	r3, [pc, #104]	; (e994 <_usb_d_dev_lpmsusp+0x7c>)
    e92c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e92e:	f240 2101 	movw	r1, #513	; 0x201
    e932:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e936:	4b18      	ldr	r3, [pc, #96]	; (e998 <_usb_d_dev_lpmsusp+0x80>)
    e938:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e93a:	2170      	movs	r1, #112	; 0x70
    e93c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e940:	4b16      	ldr	r3, [pc, #88]	; (e99c <_usb_d_dev_lpmsusp+0x84>)
    e942:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    e944:	2300      	movs	r3, #0
    e946:	73fb      	strb	r3, [r7, #15]
    e948:	e018      	b.n	e97c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    e94a:	7bfb      	ldrb	r3, [r7, #15]
    e94c:	015b      	lsls	r3, r3, #5
    e94e:	4a14      	ldr	r2, [pc, #80]	; (e9a0 <_usb_d_dev_lpmsusp+0x88>)
    e950:	4413      	add	r3, r2
    e952:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    e954:	687b      	ldr	r3, [r7, #4]
    e956:	891b      	ldrh	r3, [r3, #8]
    e958:	f3c3 0303 	ubfx	r3, r3, #0, #4
    e95c:	b2db      	uxtb	r3, r3
    e95e:	2b03      	cmp	r3, #3
    e960:	d109      	bne.n	e976 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    e962:	687b      	ldr	r3, [r7, #4]
    e964:	891b      	ldrh	r3, [r3, #8]
    e966:	f3c3 130a 	ubfx	r3, r3, #4, #11
    e96a:	b29b      	uxth	r3, r3
    e96c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    e96e:	687b      	ldr	r3, [r7, #4]
    e970:	2200      	movs	r2, #0
    e972:	811a      	strh	r2, [r3, #8]
			break;
    e974:	e005      	b.n	e982 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    e976:	7bfb      	ldrb	r3, [r7, #15]
    e978:	3301      	adds	r3, #1
    e97a:	73fb      	strb	r3, [r7, #15]
    e97c:	7bfb      	ldrb	r3, [r7, #15]
    e97e:	2b03      	cmp	r3, #3
    e980:	d9e3      	bls.n	e94a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    e982:	4b08      	ldr	r3, [pc, #32]	; (e9a4 <_usb_d_dev_lpmsusp+0x8c>)
    e984:	685b      	ldr	r3, [r3, #4]
    e986:	68b9      	ldr	r1, [r7, #8]
    e988:	2003      	movs	r0, #3
    e98a:	4798      	blx	r3
}
    e98c:	bf00      	nop
    e98e:	3710      	adds	r7, #16
    e990:	46bd      	mov	sp, r7
    e992:	bd80      	pop	{r7, pc}
    e994:	0000df6f 	.word	0x0000df6f
    e998:	0000dfc5 	.word	0x0000dfc5
    e99c:	0000df8d 	.word	0x0000df8d
    e9a0:	20008bf0 	.word	0x20008bf0
    e9a4:	20008b28 	.word	0x20008b28

0000e9a8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    e9a8:	b580      	push	{r7, lr}
    e9aa:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    e9ac:	2180      	movs	r1, #128	; 0x80
    e9ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e9b2:	4b04      	ldr	r3, [pc, #16]	; (e9c4 <_usb_d_dev_ramerr+0x1c>)
    e9b4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    e9b6:	4b04      	ldr	r3, [pc, #16]	; (e9c8 <_usb_d_dev_ramerr+0x20>)
    e9b8:	685b      	ldr	r3, [r3, #4]
    e9ba:	2100      	movs	r1, #0
    e9bc:	2005      	movs	r0, #5
    e9be:	4798      	blx	r3
}
    e9c0:	bf00      	nop
    e9c2:	bd80      	pop	{r7, pc}
    e9c4:	0000df6f 	.word	0x0000df6f
    e9c8:	20008b28 	.word	0x20008b28

0000e9cc <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    e9cc:	b580      	push	{r7, lr}
    e9ce:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e9d0:	2170      	movs	r1, #112	; 0x70
    e9d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e9d6:	4b0b      	ldr	r3, [pc, #44]	; (ea04 <_usb_d_dev_wakeup+0x38>)
    e9d8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e9da:	2170      	movs	r1, #112	; 0x70
    e9dc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e9e0:	4b09      	ldr	r3, [pc, #36]	; (ea08 <_usb_d_dev_wakeup+0x3c>)
    e9e2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e9e4:	f240 2101 	movw	r1, #513	; 0x201
    e9e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e9ec:	4b07      	ldr	r3, [pc, #28]	; (ea0c <_usb_d_dev_wakeup+0x40>)
    e9ee:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    e9f0:	2000      	movs	r0, #0
    e9f2:	4b07      	ldr	r3, [pc, #28]	; (ea10 <_usb_d_dev_wakeup+0x44>)
    e9f4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    e9f6:	4b07      	ldr	r3, [pc, #28]	; (ea14 <_usb_d_dev_wakeup+0x48>)
    e9f8:	685b      	ldr	r3, [r3, #4]
    e9fa:	2100      	movs	r1, #0
    e9fc:	2002      	movs	r0, #2
    e9fe:	4798      	blx	r3
}
    ea00:	bf00      	nop
    ea02:	bd80      	pop	{r7, pc}
    ea04:	0000df6f 	.word	0x0000df6f
    ea08:	0000dfc5 	.word	0x0000dfc5
    ea0c:	0000df8d 	.word	0x0000df8d
    ea10:	0000e26d 	.word	0x0000e26d
    ea14:	20008b28 	.word	0x20008b28

0000ea18 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    ea18:	b580      	push	{r7, lr}
    ea1a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    ea1c:	2200      	movs	r2, #0
    ea1e:	2100      	movs	r1, #0
    ea20:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea24:	4b0d      	ldr	r3, [pc, #52]	; (ea5c <_usb_d_dev_reset+0x44>)
    ea26:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    ea28:	2108      	movs	r1, #8
    ea2a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea2e:	4b0c      	ldr	r3, [pc, #48]	; (ea60 <_usb_d_dev_reset+0x48>)
    ea30:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ea32:	2170      	movs	r1, #112	; 0x70
    ea34:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea38:	4b0a      	ldr	r3, [pc, #40]	; (ea64 <_usb_d_dev_reset+0x4c>)
    ea3a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ea3c:	f240 2101 	movw	r1, #513	; 0x201
    ea40:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea44:	4b08      	ldr	r3, [pc, #32]	; (ea68 <_usb_d_dev_reset+0x50>)
    ea46:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    ea48:	4b08      	ldr	r3, [pc, #32]	; (ea6c <_usb_d_dev_reset+0x54>)
    ea4a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    ea4c:	4b08      	ldr	r3, [pc, #32]	; (ea70 <_usb_d_dev_reset+0x58>)
    ea4e:	685b      	ldr	r3, [r3, #4]
    ea50:	2100      	movs	r1, #0
    ea52:	2001      	movs	r0, #1
    ea54:	4798      	blx	r3
}
    ea56:	bf00      	nop
    ea58:	bd80      	pop	{r7, pc}
    ea5a:	bf00      	nop
    ea5c:	0000df05 	.word	0x0000df05
    ea60:	0000df6f 	.word	0x0000df6f
    ea64:	0000dfc5 	.word	0x0000dfc5
    ea68:	0000df8d 	.word	0x0000df8d
    ea6c:	0000f5d5 	.word	0x0000f5d5
    ea70:	20008b28 	.word	0x20008b28

0000ea74 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    ea74:	b580      	push	{r7, lr}
    ea76:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ea78:	f240 2101 	movw	r1, #513	; 0x201
    ea7c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea80:	4b09      	ldr	r3, [pc, #36]	; (eaa8 <_usb_d_dev_suspend+0x34>)
    ea82:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ea84:	f240 2101 	movw	r1, #513	; 0x201
    ea88:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea8c:	4b07      	ldr	r3, [pc, #28]	; (eaac <_usb_d_dev_suspend+0x38>)
    ea8e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ea90:	2170      	movs	r1, #112	; 0x70
    ea92:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea96:	4b06      	ldr	r3, [pc, #24]	; (eab0 <_usb_d_dev_suspend+0x3c>)
    ea98:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    ea9a:	4b06      	ldr	r3, [pc, #24]	; (eab4 <_usb_d_dev_suspend+0x40>)
    ea9c:	685b      	ldr	r3, [r3, #4]
    ea9e:	2100      	movs	r1, #0
    eaa0:	2004      	movs	r0, #4
    eaa2:	4798      	blx	r3
}
    eaa4:	bf00      	nop
    eaa6:	bd80      	pop	{r7, pc}
    eaa8:	0000df6f 	.word	0x0000df6f
    eaac:	0000dfc5 	.word	0x0000dfc5
    eab0:	0000df8d 	.word	0x0000df8d
    eab4:	20008b28 	.word	0x20008b28

0000eab8 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    eab8:	b580      	push	{r7, lr}
    eaba:	b082      	sub	sp, #8
    eabc:	af00      	add	r7, sp, #0
	bool     rc    = true;
    eabe:	2301      	movs	r3, #1
    eac0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    eac2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eac6:	4b22      	ldr	r3, [pc, #136]	; (eb50 <_usb_d_dev_handle_nep+0x98>)
    eac8:	4798      	blx	r3
    eaca:	4603      	mov	r3, r0
    eacc:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    eace:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ead2:	4b20      	ldr	r3, [pc, #128]	; (eb54 <_usb_d_dev_handle_nep+0x9c>)
    ead4:	4798      	blx	r3
    ead6:	4603      	mov	r3, r0
    ead8:	461a      	mov	r2, r3
    eada:	88bb      	ldrh	r3, [r7, #4]
    eadc:	4013      	ands	r3, r2
    eade:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    eae0:	88bb      	ldrh	r3, [r7, #4]
    eae2:	f003 0304 	and.w	r3, r3, #4
    eae6:	2b00      	cmp	r3, #0
    eae8:	d003      	beq.n	eaf2 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    eaea:	4b1b      	ldr	r3, [pc, #108]	; (eb58 <_usb_d_dev_handle_nep+0xa0>)
    eaec:	4798      	blx	r3
		return true;
    eaee:	2301      	movs	r3, #1
    eaf0:	e02a      	b.n	eb48 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    eaf2:	88bb      	ldrh	r3, [r7, #4]
    eaf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    eaf8:	2b00      	cmp	r3, #0
    eafa:	d002      	beq.n	eb02 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    eafc:	4b17      	ldr	r3, [pc, #92]	; (eb5c <_usb_d_dev_handle_nep+0xa4>)
    eafe:	4798      	blx	r3
    eb00:	e021      	b.n	eb46 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    eb02:	88bb      	ldrh	r3, [r7, #4]
    eb04:	f003 0380 	and.w	r3, r3, #128	; 0x80
    eb08:	2b00      	cmp	r3, #0
    eb0a:	d002      	beq.n	eb12 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    eb0c:	4b14      	ldr	r3, [pc, #80]	; (eb60 <_usb_d_dev_handle_nep+0xa8>)
    eb0e:	4798      	blx	r3
    eb10:	e019      	b.n	eb46 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    eb12:	88bb      	ldrh	r3, [r7, #4]
    eb14:	f003 0370 	and.w	r3, r3, #112	; 0x70
    eb18:	2b00      	cmp	r3, #0
    eb1a:	d002      	beq.n	eb22 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    eb1c:	4b11      	ldr	r3, [pc, #68]	; (eb64 <_usb_d_dev_handle_nep+0xac>)
    eb1e:	4798      	blx	r3
    eb20:	e011      	b.n	eb46 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    eb22:	88bb      	ldrh	r3, [r7, #4]
    eb24:	f003 0308 	and.w	r3, r3, #8
    eb28:	2b00      	cmp	r3, #0
    eb2a:	d002      	beq.n	eb32 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    eb2c:	4b0e      	ldr	r3, [pc, #56]	; (eb68 <_usb_d_dev_handle_nep+0xb0>)
    eb2e:	4798      	blx	r3
    eb30:	e009      	b.n	eb46 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    eb32:	88bb      	ldrh	r3, [r7, #4]
    eb34:	f003 0301 	and.w	r3, r3, #1
    eb38:	2b00      	cmp	r3, #0
    eb3a:	d002      	beq.n	eb42 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    eb3c:	4b0b      	ldr	r3, [pc, #44]	; (eb6c <_usb_d_dev_handle_nep+0xb4>)
    eb3e:	4798      	blx	r3
    eb40:	e001      	b.n	eb46 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    eb42:	2300      	movs	r3, #0
    eb44:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    eb46:	79fb      	ldrb	r3, [r7, #7]
}
    eb48:	4618      	mov	r0, r3
    eb4a:	3708      	adds	r7, #8
    eb4c:	46bd      	mov	sp, r7
    eb4e:	bd80      	pop	{r7, pc}
    eb50:	0000df55 	.word	0x0000df55
    eb54:	0000dfab 	.word	0x0000dfab
    eb58:	0000e8f9 	.word	0x0000e8f9
    eb5c:	0000e919 	.word	0x0000e919
    eb60:	0000e9a9 	.word	0x0000e9a9
    eb64:	0000e9cd 	.word	0x0000e9cd
    eb68:	0000ea19 	.word	0x0000ea19
    eb6c:	0000ea75 	.word	0x0000ea75

0000eb70 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    eb70:	b590      	push	{r4, r7, lr}
    eb72:	b089      	sub	sp, #36	; 0x24
    eb74:	af00      	add	r7, sp, #0
    eb76:	6078      	str	r0, [r7, #4]
    eb78:	460b      	mov	r3, r1
    eb7a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    eb7c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    eb80:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    eb82:	687b      	ldr	r3, [r7, #4]
    eb84:	7c9b      	ldrb	r3, [r3, #18]
    eb86:	f003 030f 	and.w	r3, r3, #15
    eb8a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    eb8c:	7dfb      	ldrb	r3, [r7, #23]
    eb8e:	015b      	lsls	r3, r3, #5
    eb90:	4a73      	ldr	r2, [pc, #460]	; (ed60 <_usb_d_dev_in_next+0x1f0>)
    eb92:	4413      	add	r3, r2
    eb94:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    eb96:	78fb      	ldrb	r3, [r7, #3]
    eb98:	2b00      	cmp	r3, #0
    eb9a:	d006      	beq.n	ebaa <_usb_d_dev_in_next+0x3a>
    eb9c:	693b      	ldr	r3, [r7, #16]
    eb9e:	3310      	adds	r3, #16
    eba0:	685b      	ldr	r3, [r3, #4]
    eba2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    eba6:	b29b      	uxth	r3, r3
    eba8:	e000      	b.n	ebac <_usb_d_dev_in_next+0x3c>
    ebaa:	2300      	movs	r3, #0
    ebac:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    ebae:	687b      	ldr	r3, [r7, #4]
    ebb0:	8a1b      	ldrh	r3, [r3, #16]
    ebb2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ebb6:	4293      	cmp	r3, r2
    ebb8:	d103      	bne.n	ebc2 <_usb_d_dev_in_next+0x52>
    ebba:	687b      	ldr	r3, [r7, #4]
    ebbc:	8a1b      	ldrh	r3, [r3, #16]
    ebbe:	b21b      	sxth	r3, r3
    ebc0:	e004      	b.n	ebcc <_usb_d_dev_in_next+0x5c>
    ebc2:	687b      	ldr	r3, [r7, #4]
    ebc4:	8a1b      	ldrh	r3, [r3, #16]
    ebc6:	3b01      	subs	r3, #1
    ebc8:	b29b      	uxth	r3, r3
    ebca:	b21b      	sxth	r3, r3
    ebcc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    ebd0:	4013      	ands	r3, r2
    ebd2:	b21b      	sxth	r3, r3
    ebd4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    ebd6:	2300      	movs	r3, #0
    ebd8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    ebda:	687b      	ldr	r3, [r7, #4]
    ebdc:	7cdb      	ldrb	r3, [r3, #19]
    ebde:	f003 0307 	and.w	r3, r3, #7
    ebe2:	b2db      	uxtb	r3, r3
    ebe4:	2b01      	cmp	r3, #1
    ebe6:	bf0c      	ite	eq
    ebe8:	2301      	moveq	r3, #1
    ebea:	2300      	movne	r3, #0
    ebec:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    ebee:	78fb      	ldrb	r3, [r7, #3]
    ebf0:	2b00      	cmp	r3, #0
    ebf2:	d004      	beq.n	ebfe <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    ebf4:	7dfb      	ldrb	r3, [r7, #23]
    ebf6:	2101      	movs	r1, #1
    ebf8:	4618      	mov	r0, r3
    ebfa:	4b5a      	ldr	r3, [pc, #360]	; (ed64 <_usb_d_dev_in_next+0x1f4>)
    ebfc:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    ebfe:	687b      	ldr	r3, [r7, #4]
    ec00:	689a      	ldr	r2, [r3, #8]
    ec02:	89fb      	ldrh	r3, [r7, #14]
    ec04:	441a      	add	r2, r3
    ec06:	687b      	ldr	r3, [r7, #4]
    ec08:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    ec0a:	687b      	ldr	r3, [r7, #4]
    ec0c:	689a      	ldr	r2, [r3, #8]
    ec0e:	687b      	ldr	r3, [r7, #4]
    ec10:	685b      	ldr	r3, [r3, #4]
    ec12:	429a      	cmp	r2, r3
    ec14:	d243      	bcs.n	ec9e <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    ec16:	687b      	ldr	r3, [r7, #4]
    ec18:	685b      	ldr	r3, [r3, #4]
    ec1a:	b29a      	uxth	r2, r3
    ec1c:	687b      	ldr	r3, [r7, #4]
    ec1e:	689b      	ldr	r3, [r3, #8]
    ec20:	b29b      	uxth	r3, r3
    ec22:	1ad3      	subs	r3, r2, r3
    ec24:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    ec26:	687b      	ldr	r3, [r7, #4]
    ec28:	7cdb      	ldrb	r3, [r3, #19]
    ec2a:	f003 0320 	and.w	r3, r3, #32
    ec2e:	b2db      	uxtb	r3, r3
    ec30:	2b00      	cmp	r3, #0
    ec32:	d01b      	beq.n	ec6c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    ec34:	687b      	ldr	r3, [r7, #4]
    ec36:	8a1b      	ldrh	r3, [r3, #16]
    ec38:	8bfa      	ldrh	r2, [r7, #30]
    ec3a:	429a      	cmp	r2, r3
    ec3c:	d902      	bls.n	ec44 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    ec3e:	687b      	ldr	r3, [r7, #4]
    ec40:	8a1b      	ldrh	r3, [r3, #16]
    ec42:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    ec44:	687b      	ldr	r3, [r7, #4]
    ec46:	68d8      	ldr	r0, [r3, #12]
    ec48:	687b      	ldr	r3, [r7, #4]
    ec4a:	681a      	ldr	r2, [r3, #0]
    ec4c:	687b      	ldr	r3, [r7, #4]
    ec4e:	689b      	ldr	r3, [r3, #8]
    ec50:	4413      	add	r3, r2
    ec52:	8bfa      	ldrh	r2, [r7, #30]
    ec54:	4619      	mov	r1, r3
    ec56:	4b44      	ldr	r3, [pc, #272]	; (ed68 <_usb_d_dev_in_next+0x1f8>)
    ec58:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    ec5a:	687b      	ldr	r3, [r7, #4]
    ec5c:	68db      	ldr	r3, [r3, #12]
    ec5e:	461a      	mov	r2, r3
    ec60:	7dfb      	ldrb	r3, [r7, #23]
    ec62:	2101      	movs	r1, #1
    ec64:	4618      	mov	r0, r3
    ec66:	4b41      	ldr	r3, [pc, #260]	; (ed6c <_usb_d_dev_in_next+0x1fc>)
    ec68:	4798      	blx	r3
    ec6a:	e011      	b.n	ec90 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    ec6c:	8bfb      	ldrh	r3, [r7, #30]
    ec6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ec72:	d902      	bls.n	ec7a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    ec74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ec78:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    ec7a:	687b      	ldr	r3, [r7, #4]
    ec7c:	681a      	ldr	r2, [r3, #0]
    ec7e:	687b      	ldr	r3, [r7, #4]
    ec80:	689b      	ldr	r3, [r3, #8]
    ec82:	4413      	add	r3, r2
    ec84:	461a      	mov	r2, r3
    ec86:	7dfb      	ldrb	r3, [r7, #23]
    ec88:	2101      	movs	r1, #1
    ec8a:	4618      	mov	r0, r3
    ec8c:	4b37      	ldr	r3, [pc, #220]	; (ed6c <_usb_d_dev_in_next+0x1fc>)
    ec8e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    ec90:	8bfa      	ldrh	r2, [r7, #30]
    ec92:	7df8      	ldrb	r0, [r7, #23]
    ec94:	2300      	movs	r3, #0
    ec96:	2101      	movs	r1, #1
    ec98:	4c35      	ldr	r4, [pc, #212]	; (ed70 <_usb_d_dev_in_next+0x200>)
    ec9a:	47a0      	blx	r4
		goto _in_tx_exec;
    ec9c:	e041      	b.n	ed22 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    ec9e:	687b      	ldr	r3, [r7, #4]
    eca0:	7cdb      	ldrb	r3, [r3, #19]
    eca2:	f003 0310 	and.w	r3, r3, #16
    eca6:	b2db      	uxtb	r3, r3
    eca8:	2b00      	cmp	r3, #0
    ecaa:	d00b      	beq.n	ecc4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    ecac:	687a      	ldr	r2, [r7, #4]
    ecae:	7cd3      	ldrb	r3, [r2, #19]
    ecb0:	f36f 1304 	bfc	r3, #4, #1
    ecb4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    ecb6:	7df8      	ldrb	r0, [r7, #23]
    ecb8:	2300      	movs	r3, #0
    ecba:	2200      	movs	r2, #0
    ecbc:	2101      	movs	r1, #1
    ecbe:	4c2c      	ldr	r4, [pc, #176]	; (ed70 <_usb_d_dev_in_next+0x200>)
    ecc0:	47a0      	blx	r4
		goto _in_tx_exec;
    ecc2:	e02e      	b.n	ed22 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    ecc4:	7afb      	ldrb	r3, [r7, #11]
    ecc6:	2b00      	cmp	r3, #0
    ecc8:	d006      	beq.n	ecd8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    ecca:	7dfb      	ldrb	r3, [r7, #23]
    eccc:	224b      	movs	r2, #75	; 0x4b
    ecce:	4619      	mov	r1, r3
    ecd0:	69b8      	ldr	r0, [r7, #24]
    ecd2:	4b28      	ldr	r3, [pc, #160]	; (ed74 <_usb_d_dev_in_next+0x204>)
    ecd4:	4798      	blx	r3
    ecd6:	e005      	b.n	ece4 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    ecd8:	7dfb      	ldrb	r3, [r7, #23]
    ecda:	224a      	movs	r2, #74	; 0x4a
    ecdc:	4619      	mov	r1, r3
    ecde:	69b8      	ldr	r0, [r7, #24]
    ece0:	4b24      	ldr	r3, [pc, #144]	; (ed74 <_usb_d_dev_in_next+0x204>)
    ece2:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    ece4:	687b      	ldr	r3, [r7, #4]
    ece6:	8a1b      	ldrh	r3, [r3, #16]
    ece8:	89ba      	ldrh	r2, [r7, #12]
    ecea:	429a      	cmp	r2, r3
    ecec:	d114      	bne.n	ed18 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    ecee:	687a      	ldr	r2, [r7, #4]
    ecf0:	7cd3      	ldrb	r3, [r2, #19]
    ecf2:	f36f 1386 	bfc	r3, #6, #1
    ecf6:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    ecf8:	4b1f      	ldr	r3, [pc, #124]	; (ed78 <_usb_d_dev_in_next+0x208>)
    ecfa:	68db      	ldr	r3, [r3, #12]
    ecfc:	687a      	ldr	r2, [r7, #4]
    ecfe:	7c90      	ldrb	r0, [r2, #18]
    ed00:	687a      	ldr	r2, [r7, #4]
    ed02:	6892      	ldr	r2, [r2, #8]
    ed04:	4611      	mov	r1, r2
    ed06:	4798      	blx	r3
    ed08:	4603      	mov	r3, r0
    ed0a:	2b00      	cmp	r3, #0
    ed0c:	d124      	bne.n	ed58 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    ed0e:	687a      	ldr	r2, [r7, #4]
    ed10:	7cd3      	ldrb	r3, [r2, #19]
    ed12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ed16:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    ed18:	2100      	movs	r1, #0
    ed1a:	6878      	ldr	r0, [r7, #4]
    ed1c:	4b17      	ldr	r3, [pc, #92]	; (ed7c <_usb_d_dev_in_next+0x20c>)
    ed1e:	4798      	blx	r3
	return;
    ed20:	e01b      	b.n	ed5a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    ed22:	78fb      	ldrb	r3, [r7, #3]
    ed24:	f083 0301 	eor.w	r3, r3, #1
    ed28:	b2db      	uxtb	r3, r3
    ed2a:	2b00      	cmp	r3, #0
    ed2c:	d00d      	beq.n	ed4a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    ed2e:	7afb      	ldrb	r3, [r7, #11]
    ed30:	2b00      	cmp	r3, #0
    ed32:	d002      	beq.n	ed3a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    ed34:	234e      	movs	r3, #78	; 0x4e
    ed36:	777b      	strb	r3, [r7, #29]
    ed38:	e001      	b.n	ed3e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    ed3a:	234a      	movs	r3, #74	; 0x4a
    ed3c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    ed3e:	7f7a      	ldrb	r2, [r7, #29]
    ed40:	7dfb      	ldrb	r3, [r7, #23]
    ed42:	4619      	mov	r1, r3
    ed44:	69b8      	ldr	r0, [r7, #24]
    ed46:	4b0e      	ldr	r3, [pc, #56]	; (ed80 <_usb_d_dev_in_next+0x210>)
    ed48:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    ed4a:	7dfb      	ldrb	r3, [r7, #23]
    ed4c:	2201      	movs	r2, #1
    ed4e:	2101      	movs	r1, #1
    ed50:	4618      	mov	r0, r3
    ed52:	4b0c      	ldr	r3, [pc, #48]	; (ed84 <_usb_d_dev_in_next+0x214>)
    ed54:	4798      	blx	r3
    ed56:	e000      	b.n	ed5a <_usb_d_dev_in_next+0x1ea>
			return;
    ed58:	bf00      	nop
}
    ed5a:	3724      	adds	r7, #36	; 0x24
    ed5c:	46bd      	mov	sp, r7
    ed5e:	bd90      	pop	{r4, r7, pc}
    ed60:	20008bf0 	.word	0x20008bf0
    ed64:	0000e569 	.word	0x0000e569
    ed68:	0001c4a5 	.word	0x0001c4a5
    ed6c:	0000e595 	.word	0x0000e595
    ed70:	0000e6dd 	.word	0x0000e6dd
    ed74:	0000de75 	.word	0x0000de75
    ed78:	20008b28 	.word	0x20008b28
    ed7c:	0000fe99 	.word	0x0000fe99
    ed80:	0000de49 	.word	0x0000de49
    ed84:	0000e795 	.word	0x0000e795

0000ed88 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    ed88:	b590      	push	{r4, r7, lr}
    ed8a:	b08b      	sub	sp, #44	; 0x2c
    ed8c:	af00      	add	r7, sp, #0
    ed8e:	6078      	str	r0, [r7, #4]
    ed90:	460b      	mov	r3, r1
    ed92:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    ed94:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ed98:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    ed9a:	687b      	ldr	r3, [r7, #4]
    ed9c:	7c9b      	ldrb	r3, [r3, #18]
    ed9e:	f003 030f 	and.w	r3, r3, #15
    eda2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    eda4:	7ffb      	ldrb	r3, [r7, #31]
    eda6:	015b      	lsls	r3, r3, #5
    eda8:	4a94      	ldr	r2, [pc, #592]	; (effc <_usb_d_dev_out_next+0x274>)
    edaa:	4413      	add	r3, r2
    edac:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    edae:	78fb      	ldrb	r3, [r7, #3]
    edb0:	2b00      	cmp	r3, #0
    edb2:	d005      	beq.n	edc0 <_usb_d_dev_out_next+0x38>
    edb4:	69bb      	ldr	r3, [r7, #24]
    edb6:	685b      	ldr	r3, [r3, #4]
    edb8:	f3c3 338d 	ubfx	r3, r3, #14, #14
    edbc:	b29b      	uxth	r3, r3
    edbe:	e000      	b.n	edc2 <_usb_d_dev_out_next+0x3a>
    edc0:	2300      	movs	r3, #0
    edc2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    edc4:	78fb      	ldrb	r3, [r7, #3]
    edc6:	2b00      	cmp	r3, #0
    edc8:	d005      	beq.n	edd6 <_usb_d_dev_out_next+0x4e>
    edca:	69bb      	ldr	r3, [r7, #24]
    edcc:	685b      	ldr	r3, [r3, #4]
    edce:	f3c3 030d 	ubfx	r3, r3, #0, #14
    edd2:	b29b      	uxth	r3, r3
    edd4:	e000      	b.n	edd8 <_usb_d_dev_out_next+0x50>
    edd6:	2300      	movs	r3, #0
    edd8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    edda:	687b      	ldr	r3, [r7, #4]
    eddc:	8a1b      	ldrh	r3, [r3, #16]
    edde:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ede2:	4293      	cmp	r3, r2
    ede4:	d004      	beq.n	edf0 <_usb_d_dev_out_next+0x68>
    ede6:	687b      	ldr	r3, [r7, #4]
    ede8:	8a1b      	ldrh	r3, [r3, #16]
    edea:	3b01      	subs	r3, #1
    edec:	b29b      	uxth	r3, r3
    edee:	e001      	b.n	edf4 <_usb_d_dev_out_next+0x6c>
    edf0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    edf4:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    edf6:	8aba      	ldrh	r2, [r7, #20]
    edf8:	8a7b      	ldrh	r3, [r7, #18]
    edfa:	4013      	ands	r3, r2
    edfc:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    edfe:	687b      	ldr	r3, [r7, #4]
    ee00:	7cdb      	ldrb	r3, [r3, #19]
    ee02:	f003 0307 	and.w	r3, r3, #7
    ee06:	b2db      	uxtb	r3, r3
    ee08:	2b01      	cmp	r3, #1
    ee0a:	bf0c      	ite	eq
    ee0c:	2301      	moveq	r3, #1
    ee0e:	2300      	movne	r3, #0
    ee10:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    ee12:	78fb      	ldrb	r3, [r7, #3]
    ee14:	2b00      	cmp	r3, #0
    ee16:	d004      	beq.n	ee22 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    ee18:	7ffb      	ldrb	r3, [r7, #31]
    ee1a:	2100      	movs	r1, #0
    ee1c:	4618      	mov	r0, r3
    ee1e:	4b78      	ldr	r3, [pc, #480]	; (f000 <_usb_d_dev_out_next+0x278>)
    ee20:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    ee22:	687b      	ldr	r3, [r7, #4]
    ee24:	7cdb      	ldrb	r3, [r3, #19]
    ee26:	f003 0320 	and.w	r3, r3, #32
    ee2a:	b2db      	uxtb	r3, r3
    ee2c:	2b00      	cmp	r3, #0
    ee2e:	d01c      	beq.n	ee6a <_usb_d_dev_out_next+0xe2>
    ee30:	687b      	ldr	r3, [r7, #4]
    ee32:	685b      	ldr	r3, [r3, #4]
    ee34:	2b00      	cmp	r3, #0
    ee36:	d018      	beq.n	ee6a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    ee38:	687b      	ldr	r3, [r7, #4]
    ee3a:	685b      	ldr	r3, [r3, #4]
    ee3c:	b29a      	uxth	r2, r3
    ee3e:	687b      	ldr	r3, [r7, #4]
    ee40:	689b      	ldr	r3, [r3, #8]
    ee42:	b29b      	uxth	r3, r3
    ee44:	1ad3      	subs	r3, r2, r3
    ee46:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    ee48:	687b      	ldr	r3, [r7, #4]
    ee4a:	681a      	ldr	r2, [r3, #0]
    ee4c:	687b      	ldr	r3, [r7, #4]
    ee4e:	689b      	ldr	r3, [r3, #8]
    ee50:	18d0      	adds	r0, r2, r3
    ee52:	687b      	ldr	r3, [r7, #4]
    ee54:	68d9      	ldr	r1, [r3, #12]
    ee56:	89ba      	ldrh	r2, [r7, #12]
    ee58:	8a3b      	ldrh	r3, [r7, #16]
    ee5a:	429a      	cmp	r2, r3
    ee5c:	d901      	bls.n	ee62 <_usb_d_dev_out_next+0xda>
    ee5e:	8a3b      	ldrh	r3, [r7, #16]
    ee60:	e000      	b.n	ee64 <_usb_d_dev_out_next+0xdc>
    ee62:	89bb      	ldrh	r3, [r7, #12]
    ee64:	461a      	mov	r2, r3
    ee66:	4b67      	ldr	r3, [pc, #412]	; (f004 <_usb_d_dev_out_next+0x27c>)
    ee68:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    ee6a:	687b      	ldr	r3, [r7, #4]
    ee6c:	685b      	ldr	r3, [r3, #4]
    ee6e:	2b00      	cmp	r3, #0
    ee70:	d121      	bne.n	eeb6 <_usb_d_dev_out_next+0x12e>
    ee72:	687b      	ldr	r3, [r7, #4]
    ee74:	7cdb      	ldrb	r3, [r3, #19]
    ee76:	f003 0310 	and.w	r3, r3, #16
    ee7a:	b2db      	uxtb	r3, r3
    ee7c:	2b00      	cmp	r3, #0
    ee7e:	d01a      	beq.n	eeb6 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    ee80:	687a      	ldr	r2, [r7, #4]
    ee82:	7cd3      	ldrb	r3, [r2, #19]
    ee84:	f36f 1304 	bfc	r3, #4, #1
    ee88:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    ee8a:	687a      	ldr	r2, [r7, #4]
    ee8c:	7cd3      	ldrb	r3, [r2, #19]
    ee8e:	f043 0320 	orr.w	r3, r3, #32
    ee92:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ee94:	687b      	ldr	r3, [r7, #4]
    ee96:	68db      	ldr	r3, [r3, #12]
    ee98:	461a      	mov	r2, r3
    ee9a:	7ffb      	ldrb	r3, [r7, #31]
    ee9c:	2100      	movs	r1, #0
    ee9e:	4618      	mov	r0, r3
    eea0:	4b59      	ldr	r3, [pc, #356]	; (f008 <_usb_d_dev_out_next+0x280>)
    eea2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    eea4:	687b      	ldr	r3, [r7, #4]
    eea6:	8a1b      	ldrh	r3, [r3, #16]
    eea8:	461a      	mov	r2, r3
    eeaa:	7ff8      	ldrb	r0, [r7, #31]
    eeac:	2300      	movs	r3, #0
    eeae:	2100      	movs	r1, #0
    eeb0:	4c56      	ldr	r4, [pc, #344]	; (f00c <_usb_d_dev_out_next+0x284>)
    eeb2:	47a0      	blx	r4
		goto _out_rx_exec;
    eeb4:	e090      	b.n	efd8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    eeb6:	78fb      	ldrb	r3, [r7, #3]
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d010      	beq.n	eede <_usb_d_dev_out_next+0x156>
    eebc:	687b      	ldr	r3, [r7, #4]
    eebe:	8a1b      	ldrh	r3, [r3, #16]
    eec0:	8a3a      	ldrh	r2, [r7, #16]
    eec2:	429a      	cmp	r2, r3
    eec4:	d20b      	bcs.n	eede <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    eec6:	687a      	ldr	r2, [r7, #4]
    eec8:	7cd3      	ldrb	r3, [r2, #19]
    eeca:	f36f 1304 	bfc	r3, #4, #1
    eece:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    eed0:	687b      	ldr	r3, [r7, #4]
    eed2:	689a      	ldr	r2, [r3, #8]
    eed4:	8abb      	ldrh	r3, [r7, #20]
    eed6:	441a      	add	r2, r3
    eed8:	687b      	ldr	r3, [r7, #4]
    eeda:	609a      	str	r2, [r3, #8]
    eedc:	e05c      	b.n	ef98 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    eede:	687b      	ldr	r3, [r7, #4]
    eee0:	689a      	ldr	r2, [r3, #8]
    eee2:	8afb      	ldrh	r3, [r7, #22]
    eee4:	441a      	add	r2, r3
    eee6:	687b      	ldr	r3, [r7, #4]
    eee8:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    eeea:	687b      	ldr	r3, [r7, #4]
    eeec:	689a      	ldr	r2, [r3, #8]
    eeee:	687b      	ldr	r3, [r7, #4]
    eef0:	685b      	ldr	r3, [r3, #4]
    eef2:	429a      	cmp	r2, r3
    eef4:	d250      	bcs.n	ef98 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    eef6:	687b      	ldr	r3, [r7, #4]
    eef8:	685b      	ldr	r3, [r3, #4]
    eefa:	b29a      	uxth	r2, r3
    eefc:	687b      	ldr	r3, [r7, #4]
    eefe:	689b      	ldr	r3, [r3, #8]
    ef00:	b29b      	uxth	r3, r3
    ef02:	1ad3      	subs	r3, r2, r3
    ef04:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    ef06:	687b      	ldr	r3, [r7, #4]
    ef08:	7cdb      	ldrb	r3, [r3, #19]
    ef0a:	f003 0320 	and.w	r3, r3, #32
    ef0e:	b2db      	uxtb	r3, r3
    ef10:	2b00      	cmp	r3, #0
    ef12:	d010      	beq.n	ef36 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    ef14:	687b      	ldr	r3, [r7, #4]
    ef16:	8a1b      	ldrh	r3, [r3, #16]
    ef18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ef1a:	429a      	cmp	r2, r3
    ef1c:	d902      	bls.n	ef24 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    ef1e:	687b      	ldr	r3, [r7, #4]
    ef20:	8a1b      	ldrh	r3, [r3, #16]
    ef22:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ef24:	687b      	ldr	r3, [r7, #4]
    ef26:	68db      	ldr	r3, [r3, #12]
    ef28:	461a      	mov	r2, r3
    ef2a:	7ffb      	ldrb	r3, [r7, #31]
    ef2c:	2100      	movs	r1, #0
    ef2e:	4618      	mov	r0, r3
    ef30:	4b35      	ldr	r3, [pc, #212]	; (f008 <_usb_d_dev_out_next+0x280>)
    ef32:	4798      	blx	r3
    ef34:	e029      	b.n	ef8a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    ef36:	687b      	ldr	r3, [r7, #4]
    ef38:	8a1b      	ldrh	r3, [r3, #16]
    ef3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ef3c:	429a      	cmp	r2, r3
    ef3e:	d90f      	bls.n	ef60 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    ef40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    ef42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ef46:	d903      	bls.n	ef50 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    ef48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ef4c:	84fb      	strh	r3, [r7, #38]	; 0x26
    ef4e:	e011      	b.n	ef74 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    ef50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ef52:	8a7b      	ldrh	r3, [r7, #18]
    ef54:	4013      	ands	r3, r2
    ef56:	b29b      	uxth	r3, r3
    ef58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ef5a:	1ad3      	subs	r3, r2, r3
    ef5c:	84fb      	strh	r3, [r7, #38]	; 0x26
    ef5e:	e009      	b.n	ef74 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    ef60:	687b      	ldr	r3, [r7, #4]
    ef62:	8a1b      	ldrh	r3, [r3, #16]
    ef64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ef66:	429a      	cmp	r2, r3
    ef68:	d204      	bcs.n	ef74 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    ef6a:	687a      	ldr	r2, [r7, #4]
    ef6c:	7cd3      	ldrb	r3, [r2, #19]
    ef6e:	f043 0320 	orr.w	r3, r3, #32
    ef72:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    ef74:	687b      	ldr	r3, [r7, #4]
    ef76:	681a      	ldr	r2, [r3, #0]
    ef78:	687b      	ldr	r3, [r7, #4]
    ef7a:	689b      	ldr	r3, [r3, #8]
    ef7c:	4413      	add	r3, r2
    ef7e:	461a      	mov	r2, r3
    ef80:	7ffb      	ldrb	r3, [r7, #31]
    ef82:	2100      	movs	r1, #0
    ef84:	4618      	mov	r0, r3
    ef86:	4b20      	ldr	r3, [pc, #128]	; (f008 <_usb_d_dev_out_next+0x280>)
    ef88:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    ef8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ef8c:	7ff8      	ldrb	r0, [r7, #31]
    ef8e:	2300      	movs	r3, #0
    ef90:	2100      	movs	r1, #0
    ef92:	4c1e      	ldr	r4, [pc, #120]	; (f00c <_usb_d_dev_out_next+0x284>)
    ef94:	47a0      	blx	r4
			goto _out_rx_exec;
    ef96:	e01f      	b.n	efd8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    ef98:	7bfb      	ldrb	r3, [r7, #15]
    ef9a:	2b00      	cmp	r3, #0
    ef9c:	d006      	beq.n	efac <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    ef9e:	7ffb      	ldrb	r3, [r7, #31]
    efa0:	222d      	movs	r2, #45	; 0x2d
    efa2:	4619      	mov	r1, r3
    efa4:	6a38      	ldr	r0, [r7, #32]
    efa6:	4b1a      	ldr	r3, [pc, #104]	; (f010 <_usb_d_dev_out_next+0x288>)
    efa8:	4798      	blx	r3
    efaa:	e005      	b.n	efb8 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    efac:	7ffb      	ldrb	r3, [r7, #31]
    efae:	2225      	movs	r2, #37	; 0x25
    efb0:	4619      	mov	r1, r3
    efb2:	6a38      	ldr	r0, [r7, #32]
    efb4:	4b16      	ldr	r3, [pc, #88]	; (f010 <_usb_d_dev_out_next+0x288>)
    efb6:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    efb8:	7ffb      	ldrb	r3, [r7, #31]
    efba:	2b00      	cmp	r3, #0
    efbc:	d107      	bne.n	efce <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    efbe:	687b      	ldr	r3, [r7, #4]
    efc0:	68db      	ldr	r3, [r3, #12]
    efc2:	461a      	mov	r2, r3
    efc4:	7ffb      	ldrb	r3, [r7, #31]
    efc6:	2100      	movs	r1, #0
    efc8:	4618      	mov	r0, r3
    efca:	4b0f      	ldr	r3, [pc, #60]	; (f008 <_usb_d_dev_out_next+0x280>)
    efcc:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    efce:	2100      	movs	r1, #0
    efd0:	6878      	ldr	r0, [r7, #4]
    efd2:	4b10      	ldr	r3, [pc, #64]	; (f014 <_usb_d_dev_out_next+0x28c>)
    efd4:	4798      	blx	r3
	return;
    efd6:	e031      	b.n	f03c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    efd8:	78fb      	ldrb	r3, [r7, #3]
    efda:	f083 0301 	eor.w	r3, r3, #1
    efde:	b2db      	uxtb	r3, r3
    efe0:	2b00      	cmp	r3, #0
    efe2:	d025      	beq.n	f030 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    efe4:	7bfb      	ldrb	r3, [r7, #15]
    efe6:	2b00      	cmp	r3, #0
    efe8:	d018      	beq.n	f01c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    efea:	7ffb      	ldrb	r3, [r7, #31]
    efec:	2101      	movs	r1, #1
    efee:	4618      	mov	r0, r3
    eff0:	4b09      	ldr	r3, [pc, #36]	; (f018 <_usb_d_dev_out_next+0x290>)
    eff2:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    eff4:	232d      	movs	r3, #45	; 0x2d
    eff6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    effa:	e012      	b.n	f022 <_usb_d_dev_out_next+0x29a>
    effc:	20008bf0 	.word	0x20008bf0
    f000:	0000e569 	.word	0x0000e569
    f004:	0001c4a5 	.word	0x0001c4a5
    f008:	0000e595 	.word	0x0000e595
    f00c:	0000e71d 	.word	0x0000e71d
    f010:	0000de75 	.word	0x0000de75
    f014:	0000fe99 	.word	0x0000fe99
    f018:	0000e75d 	.word	0x0000e75d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    f01c:	2325      	movs	r3, #37	; 0x25
    f01e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    f022:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    f026:	7ffb      	ldrb	r3, [r7, #31]
    f028:	4619      	mov	r1, r3
    f02a:	6a38      	ldr	r0, [r7, #32]
    f02c:	4b05      	ldr	r3, [pc, #20]	; (f044 <_usb_d_dev_out_next+0x2bc>)
    f02e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    f030:	7ffb      	ldrb	r3, [r7, #31]
    f032:	2201      	movs	r2, #1
    f034:	2100      	movs	r1, #0
    f036:	4618      	mov	r0, r3
    f038:	4b03      	ldr	r3, [pc, #12]	; (f048 <_usb_d_dev_out_next+0x2c0>)
    f03a:	4798      	blx	r3
}
    f03c:	372c      	adds	r7, #44	; 0x2c
    f03e:	46bd      	mov	sp, r7
    f040:	bd90      	pop	{r4, r7, pc}
    f042:	bf00      	nop
    f044:	0000de49 	.word	0x0000de49
    f048:	0000e7ed 	.word	0x0000e7ed

0000f04c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    f04c:	b580      	push	{r7, lr}
    f04e:	b084      	sub	sp, #16
    f050:	af00      	add	r7, sp, #0
    f052:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    f054:	687b      	ldr	r3, [r7, #4]
    f056:	7c9b      	ldrb	r3, [r3, #18]
    f058:	f003 030f 	and.w	r3, r3, #15
    f05c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    f05e:	687b      	ldr	r3, [r7, #4]
    f060:	7cdb      	ldrb	r3, [r3, #19]
    f062:	f003 0307 	and.w	r3, r3, #7
    f066:	b2db      	uxtb	r3, r3
    f068:	2b01      	cmp	r3, #1
    f06a:	bf0c      	ite	eq
    f06c:	2301      	moveq	r3, #1
    f06e:	2300      	movne	r3, #0
    f070:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    f072:	7bbb      	ldrb	r3, [r7, #14]
    f074:	f083 0301 	eor.w	r3, r3, #1
    f078:	b2db      	uxtb	r3, r3
    f07a:	2b00      	cmp	r3, #0
    f07c:	d008      	beq.n	f090 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    f07e:	7bfb      	ldrb	r3, [r7, #15]
    f080:	4618      	mov	r0, r3
    f082:	4b20      	ldr	r3, [pc, #128]	; (f104 <_usb_d_dev_handle_setup+0xb8>)
    f084:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    f086:	7bfb      	ldrb	r3, [r7, #15]
    f088:	4618      	mov	r0, r3
    f08a:	4b1f      	ldr	r3, [pc, #124]	; (f108 <_usb_d_dev_handle_setup+0xbc>)
    f08c:	4798      	blx	r3
		return;
    f08e:	e036      	b.n	f0fe <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    f090:	687b      	ldr	r3, [r7, #4]
    f092:	7cdb      	ldrb	r3, [r3, #19]
    f094:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f098:	b2db      	uxtb	r3, r3
    f09a:	2b00      	cmp	r3, #0
    f09c:	d010      	beq.n	f0c0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    f09e:	687a      	ldr	r2, [r7, #4]
    f0a0:	7cd3      	ldrb	r3, [r2, #19]
    f0a2:	f36f 1386 	bfc	r3, #6, #1
    f0a6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    f0a8:	7bfb      	ldrb	r3, [r7, #15]
    f0aa:	2200      	movs	r2, #0
    f0ac:	2101      	movs	r1, #1
    f0ae:	4618      	mov	r0, r3
    f0b0:	4b16      	ldr	r3, [pc, #88]	; (f10c <_usb_d_dev_handle_setup+0xc0>)
    f0b2:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    f0b4:	7bfb      	ldrb	r3, [r7, #15]
    f0b6:	2200      	movs	r2, #0
    f0b8:	2100      	movs	r1, #0
    f0ba:	4618      	mov	r0, r3
    f0bc:	4b14      	ldr	r3, [pc, #80]	; (f110 <_usb_d_dev_handle_setup+0xc4>)
    f0be:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    f0c0:	687a      	ldr	r2, [r7, #4]
    f0c2:	7cd3      	ldrb	r3, [r2, #19]
    f0c4:	f36f 03c3 	bfc	r3, #3, #1
    f0c8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    f0ca:	7bfb      	ldrb	r3, [r7, #15]
    f0cc:	2100      	movs	r1, #0
    f0ce:	4618      	mov	r0, r3
    f0d0:	4b10      	ldr	r3, [pc, #64]	; (f114 <_usb_d_dev_handle_setup+0xc8>)
    f0d2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    f0d4:	7bfb      	ldrb	r3, [r7, #15]
    f0d6:	2101      	movs	r1, #1
    f0d8:	4618      	mov	r0, r3
    f0da:	4b0e      	ldr	r3, [pc, #56]	; (f114 <_usb_d_dev_handle_setup+0xc8>)
    f0dc:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    f0de:	7bfb      	ldrb	r3, [r7, #15]
    f0e0:	216f      	movs	r1, #111	; 0x6f
    f0e2:	4618      	mov	r0, r3
    f0e4:	4b0c      	ldr	r3, [pc, #48]	; (f118 <_usb_d_dev_handle_setup+0xcc>)
    f0e6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    f0e8:	7bfb      	ldrb	r3, [r7, #15]
    f0ea:	216f      	movs	r1, #111	; 0x6f
    f0ec:	4618      	mov	r0, r3
    f0ee:	4b0b      	ldr	r3, [pc, #44]	; (f11c <_usb_d_dev_handle_setup+0xd0>)
    f0f0:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    f0f2:	4b0b      	ldr	r3, [pc, #44]	; (f120 <_usb_d_dev_handle_setup+0xd4>)
    f0f4:	689b      	ldr	r3, [r3, #8]
    f0f6:	687a      	ldr	r2, [r7, #4]
    f0f8:	7c92      	ldrb	r2, [r2, #18]
    f0fa:	4610      	mov	r0, r2
    f0fc:	4798      	blx	r3
}
    f0fe:	3710      	adds	r7, #16
    f100:	46bd      	mov	sp, r7
    f102:	bd80      	pop	{r7, pc}
    f104:	0000e4f1 	.word	0x0000e4f1
    f108:	0000e49d 	.word	0x0000e49d
    f10c:	0000e795 	.word	0x0000e795
    f110:	0000e7ed 	.word	0x0000e7ed
    f114:	0000e75d 	.word	0x0000e75d
    f118:	0000e29d 	.word	0x0000e29d
    f11c:	0000e2ed 	.word	0x0000e2ed
    f120:	20008b28 	.word	0x20008b28

0000f124 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    f124:	b580      	push	{r7, lr}
    f126:	b084      	sub	sp, #16
    f128:	af00      	add	r7, sp, #0
    f12a:	6078      	str	r0, [r7, #4]
    f12c:	460b      	mov	r3, r1
    f12e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f130:	687b      	ldr	r3, [r7, #4]
    f132:	7c9b      	ldrb	r3, [r3, #18]
    f134:	f003 030f 	and.w	r3, r3, #15
    f138:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    f13a:	78f9      	ldrb	r1, [r7, #3]
    f13c:	7bfb      	ldrb	r3, [r7, #15]
    f13e:	2200      	movs	r2, #0
    f140:	4618      	mov	r0, r3
    f142:	4b07      	ldr	r3, [pc, #28]	; (f160 <_usb_d_dev_handle_stall+0x3c>)
    f144:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    f146:	4b07      	ldr	r3, [pc, #28]	; (f164 <_usb_d_dev_handle_stall+0x40>)
    f148:	691b      	ldr	r3, [r3, #16]
    f14a:	687a      	ldr	r2, [r7, #4]
    f14c:	7c90      	ldrb	r0, [r2, #18]
    f14e:	687a      	ldr	r2, [r7, #4]
    f150:	6892      	ldr	r2, [r2, #8]
    f152:	2101      	movs	r1, #1
    f154:	4798      	blx	r3
}
    f156:	bf00      	nop
    f158:	3710      	adds	r7, #16
    f15a:	46bd      	mov	sp, r7
    f15c:	bd80      	pop	{r7, pc}
    f15e:	bf00      	nop
    f160:	0000e451 	.word	0x0000e451
    f164:	20008b28 	.word	0x20008b28

0000f168 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    f168:	b580      	push	{r7, lr}
    f16a:	b088      	sub	sp, #32
    f16c:	af00      	add	r7, sp, #0
    f16e:	6078      	str	r0, [r7, #4]
    f170:	460b      	mov	r3, r1
    f172:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    f174:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f178:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    f17a:	687b      	ldr	r3, [r7, #4]
    f17c:	7c9b      	ldrb	r3, [r3, #18]
    f17e:	f003 030f 	and.w	r3, r3, #15
    f182:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    f184:	4b61      	ldr	r3, [pc, #388]	; (f30c <_usb_d_dev_handle_trfail+0x1a4>)
    f186:	881b      	ldrh	r3, [r3, #0]
    f188:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    f18a:	7efb      	ldrb	r3, [r7, #27]
    f18c:	015b      	lsls	r3, r3, #5
    f18e:	4a60      	ldr	r2, [pc, #384]	; (f310 <_usb_d_dev_handle_trfail+0x1a8>)
    f190:	4413      	add	r3, r2
    f192:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    f194:	78fb      	ldrb	r3, [r7, #3]
    f196:	2b00      	cmp	r3, #0
    f198:	d006      	beq.n	f1a8 <_usb_d_dev_handle_trfail+0x40>
    f19a:	7efb      	ldrb	r3, [r7, #27]
    f19c:	4619      	mov	r1, r3
    f19e:	69f8      	ldr	r0, [r7, #28]
    f1a0:	4b5c      	ldr	r3, [pc, #368]	; (f314 <_usb_d_dev_handle_trfail+0x1ac>)
    f1a2:	4798      	blx	r3
    f1a4:	4603      	mov	r3, r0
    f1a6:	e005      	b.n	f1b4 <_usb_d_dev_handle_trfail+0x4c>
    f1a8:	7efb      	ldrb	r3, [r7, #27]
    f1aa:	4619      	mov	r1, r3
    f1ac:	69f8      	ldr	r0, [r7, #28]
    f1ae:	4b5a      	ldr	r3, [pc, #360]	; (f318 <_usb_d_dev_handle_trfail+0x1b0>)
    f1b0:	4798      	blx	r3
    f1b2:	4603      	mov	r3, r0
    f1b4:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    f1b6:	687b      	ldr	r3, [r7, #4]
    f1b8:	7cdb      	ldrb	r3, [r3, #19]
    f1ba:	f003 0307 	and.w	r3, r3, #7
    f1be:	b2db      	uxtb	r3, r3
    f1c0:	2b01      	cmp	r3, #1
    f1c2:	bf0c      	ite	eq
    f1c4:	2301      	moveq	r3, #1
    f1c6:	2300      	movne	r3, #0
    f1c8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    f1ca:	78fb      	ldrb	r3, [r7, #3]
    f1cc:	011b      	lsls	r3, r3, #4
    f1ce:	697a      	ldr	r2, [r7, #20]
    f1d0:	4413      	add	r3, r2
    f1d2:	7a9b      	ldrb	r3, [r3, #10]
    f1d4:	b2db      	uxtb	r3, r3
    f1d6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    f1d8:	7cfb      	ldrb	r3, [r7, #19]
    f1da:	2b02      	cmp	r3, #2
    f1dc:	d12f      	bne.n	f23e <_usb_d_dev_handle_trfail+0xd6>
    f1de:	7b3b      	ldrb	r3, [r7, #12]
    f1e0:	f003 0301 	and.w	r3, r3, #1
    f1e4:	b2db      	uxtb	r3, r3
    f1e6:	2b00      	cmp	r3, #0
    f1e8:	d029      	beq.n	f23e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    f1ea:	78fb      	ldrb	r3, [r7, #3]
    f1ec:	011b      	lsls	r3, r3, #4
    f1ee:	697a      	ldr	r2, [r7, #20]
    f1f0:	441a      	add	r2, r3
    f1f2:	7a93      	ldrb	r3, [r2, #10]
    f1f4:	f36f 0300 	bfc	r3, #0, #1
    f1f8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f1fa:	78fb      	ldrb	r3, [r7, #3]
    f1fc:	f107 0220 	add.w	r2, r7, #32
    f200:	4413      	add	r3, r2
    f202:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f206:	7efb      	ldrb	r3, [r7, #27]
    f208:	4619      	mov	r1, r3
    f20a:	69f8      	ldr	r0, [r7, #28]
    f20c:	4b43      	ldr	r3, [pc, #268]	; (f31c <_usb_d_dev_handle_trfail+0x1b4>)
    f20e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f210:	78fb      	ldrb	r3, [r7, #3]
    f212:	f107 0220 	add.w	r2, r7, #32
    f216:	4413      	add	r3, r2
    f218:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f21c:	7efb      	ldrb	r3, [r7, #27]
    f21e:	4619      	mov	r1, r3
    f220:	69f8      	ldr	r0, [r7, #28]
    f222:	4b3f      	ldr	r3, [pc, #252]	; (f320 <_usb_d_dev_handle_trfail+0x1b8>)
    f224:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    f226:	78fb      	ldrb	r3, [r7, #3]
    f228:	2b00      	cmp	r3, #0
    f22a:	bf14      	ite	ne
    f22c:	2301      	movne	r3, #1
    f22e:	2300      	moveq	r3, #0
    f230:	b2db      	uxtb	r3, r3
    f232:	2204      	movs	r2, #4
    f234:	4619      	mov	r1, r3
    f236:	6878      	ldr	r0, [r7, #4]
    f238:	4b3a      	ldr	r3, [pc, #232]	; (f324 <_usb_d_dev_handle_trfail+0x1bc>)
    f23a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    f23c:	e062      	b.n	f304 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    f23e:	7b3b      	ldrb	r3, [r7, #12]
    f240:	f003 0302 	and.w	r3, r3, #2
    f244:	b2db      	uxtb	r3, r3
    f246:	2b00      	cmp	r3, #0
    f248:	d040      	beq.n	f2cc <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    f24a:	78fb      	ldrb	r3, [r7, #3]
    f24c:	011b      	lsls	r3, r3, #4
    f24e:	697a      	ldr	r2, [r7, #20]
    f250:	441a      	add	r2, r3
    f252:	7a93      	ldrb	r3, [r2, #10]
    f254:	f36f 0341 	bfc	r3, #1, #1
    f258:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f25a:	78fb      	ldrb	r3, [r7, #3]
    f25c:	f107 0220 	add.w	r2, r7, #32
    f260:	4413      	add	r3, r2
    f262:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f266:	7efb      	ldrb	r3, [r7, #27]
    f268:	4619      	mov	r1, r3
    f26a:	69f8      	ldr	r0, [r7, #28]
    f26c:	4b2b      	ldr	r3, [pc, #172]	; (f31c <_usb_d_dev_handle_trfail+0x1b4>)
    f26e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f270:	78fb      	ldrb	r3, [r7, #3]
    f272:	f107 0220 	add.w	r2, r7, #32
    f276:	4413      	add	r3, r2
    f278:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f27c:	7efb      	ldrb	r3, [r7, #27]
    f27e:	4619      	mov	r1, r3
    f280:	69f8      	ldr	r0, [r7, #28]
    f282:	4b27      	ldr	r3, [pc, #156]	; (f320 <_usb_d_dev_handle_trfail+0x1b8>)
    f284:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    f286:	7cbb      	ldrb	r3, [r7, #18]
    f288:	2b00      	cmp	r3, #0
    f28a:	d03b      	beq.n	f304 <_usb_d_dev_handle_trfail+0x19c>
    f28c:	687b      	ldr	r3, [r7, #4]
    f28e:	7cdb      	ldrb	r3, [r3, #19]
    f290:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f294:	b2db      	uxtb	r3, r3
    f296:	2b00      	cmp	r3, #0
    f298:	d034      	beq.n	f304 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    f29a:	687b      	ldr	r3, [r7, #4]
    f29c:	7cdb      	ldrb	r3, [r3, #19]
    f29e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    f2a2:	b2db      	uxtb	r3, r3
    f2a4:	461a      	mov	r2, r3
    f2a6:	78fb      	ldrb	r3, [r7, #3]
    f2a8:	4293      	cmp	r3, r2
    f2aa:	d02b      	beq.n	f304 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    f2ac:	687b      	ldr	r3, [r7, #4]
    f2ae:	7cdb      	ldrb	r3, [r3, #19]
    f2b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    f2b4:	b2db      	uxtb	r3, r3
    f2b6:	2b00      	cmp	r3, #0
    f2b8:	bf14      	ite	ne
    f2ba:	2301      	movne	r3, #1
    f2bc:	2300      	moveq	r3, #0
    f2be:	b2db      	uxtb	r3, r3
    f2c0:	2200      	movs	r2, #0
    f2c2:	4619      	mov	r1, r3
    f2c4:	6878      	ldr	r0, [r7, #4]
    f2c6:	4b17      	ldr	r3, [pc, #92]	; (f324 <_usb_d_dev_handle_trfail+0x1bc>)
    f2c8:	4798      	blx	r3
}
    f2ca:	e01b      	b.n	f304 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    f2cc:	78fa      	ldrb	r2, [r7, #3]
    f2ce:	7efb      	ldrb	r3, [r7, #27]
    f2d0:	4611      	mov	r1, r2
    f2d2:	4618      	mov	r0, r3
    f2d4:	4b14      	ldr	r3, [pc, #80]	; (f328 <_usb_d_dev_handle_trfail+0x1c0>)
    f2d6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f2d8:	78fb      	ldrb	r3, [r7, #3]
    f2da:	f107 0220 	add.w	r2, r7, #32
    f2de:	4413      	add	r3, r2
    f2e0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f2e4:	7efb      	ldrb	r3, [r7, #27]
    f2e6:	4619      	mov	r1, r3
    f2e8:	69f8      	ldr	r0, [r7, #28]
    f2ea:	4b0c      	ldr	r3, [pc, #48]	; (f31c <_usb_d_dev_handle_trfail+0x1b4>)
    f2ec:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f2ee:	78fb      	ldrb	r3, [r7, #3]
    f2f0:	f107 0220 	add.w	r2, r7, #32
    f2f4:	4413      	add	r3, r2
    f2f6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f2fa:	7efb      	ldrb	r3, [r7, #27]
    f2fc:	4619      	mov	r1, r3
    f2fe:	69f8      	ldr	r0, [r7, #28]
    f300:	4b07      	ldr	r3, [pc, #28]	; (f320 <_usb_d_dev_handle_trfail+0x1b8>)
    f302:	4798      	blx	r3
}
    f304:	bf00      	nop
    f306:	3720      	adds	r7, #32
    f308:	46bd      	mov	sp, r7
    f30a:	bd80      	pop	{r7, pc}
    f30c:	00020d98 	.word	0x00020d98
    f310:	20008bf0 	.word	0x20008bf0
    f314:	0000ded1 	.word	0x0000ded1
    f318:	0000dea1 	.word	0x0000dea1
    f31c:	0000dd75 	.word	0x0000dd75
    f320:	0000de75 	.word	0x0000de75
    f324:	0000fee1 	.word	0x0000fee1
    f328:	0000e75d 	.word	0x0000e75d

0000f32c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f32c:	b580      	push	{r7, lr}
    f32e:	b082      	sub	sp, #8
    f330:	af00      	add	r7, sp, #0
    f332:	6078      	str	r0, [r7, #4]
    f334:	460b      	mov	r3, r1
    f336:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f338:	78fb      	ldrb	r3, [r7, #3]
    f33a:	f003 0310 	and.w	r3, r3, #16
    f33e:	2b00      	cmp	r3, #0
    f340:	d003      	beq.n	f34a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    f342:	6878      	ldr	r0, [r7, #4]
    f344:	4b0c      	ldr	r3, [pc, #48]	; (f378 <_usb_d_dev_trans_setup_isr+0x4c>)
    f346:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    f348:	e012      	b.n	f370 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    f34a:	78fb      	ldrb	r3, [r7, #3]
    f34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f350:	2b00      	cmp	r3, #0
    f352:	d004      	beq.n	f35e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    f354:	2101      	movs	r1, #1
    f356:	6878      	ldr	r0, [r7, #4]
    f358:	4b08      	ldr	r3, [pc, #32]	; (f37c <_usb_d_dev_trans_setup_isr+0x50>)
    f35a:	4798      	blx	r3
}
    f35c:	e008      	b.n	f370 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    f35e:	78fb      	ldrb	r3, [r7, #3]
    f360:	f003 0320 	and.w	r3, r3, #32
    f364:	2b00      	cmp	r3, #0
    f366:	d003      	beq.n	f370 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    f368:	2100      	movs	r1, #0
    f36a:	6878      	ldr	r0, [r7, #4]
    f36c:	4b03      	ldr	r3, [pc, #12]	; (f37c <_usb_d_dev_trans_setup_isr+0x50>)
    f36e:	4798      	blx	r3
}
    f370:	bf00      	nop
    f372:	3708      	adds	r7, #8
    f374:	46bd      	mov	sp, r7
    f376:	bd80      	pop	{r7, pc}
    f378:	0000f04d 	.word	0x0000f04d
    f37c:	0000f125 	.word	0x0000f125

0000f380 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f380:	b580      	push	{r7, lr}
    f382:	b082      	sub	sp, #8
    f384:	af00      	add	r7, sp, #0
    f386:	6078      	str	r0, [r7, #4]
    f388:	460b      	mov	r3, r1
    f38a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    f38c:	78fb      	ldrb	r3, [r7, #3]
    f38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f392:	2b00      	cmp	r3, #0
    f394:	d004      	beq.n	f3a0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    f396:	2101      	movs	r1, #1
    f398:	6878      	ldr	r0, [r7, #4]
    f39a:	4b1a      	ldr	r3, [pc, #104]	; (f404 <_usb_d_dev_trans_in_isr+0x84>)
    f39c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    f39e:	e02c      	b.n	f3fa <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    f3a0:	78fb      	ldrb	r3, [r7, #3]
    f3a2:	f003 0308 	and.w	r3, r3, #8
    f3a6:	2b00      	cmp	r3, #0
    f3a8:	d004      	beq.n	f3b4 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    f3aa:	2101      	movs	r1, #1
    f3ac:	6878      	ldr	r0, [r7, #4]
    f3ae:	4b16      	ldr	r3, [pc, #88]	; (f408 <_usb_d_dev_trans_in_isr+0x88>)
    f3b0:	4798      	blx	r3
}
    f3b2:	e022      	b.n	f3fa <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    f3b4:	78fb      	ldrb	r3, [r7, #3]
    f3b6:	f003 0302 	and.w	r3, r3, #2
    f3ba:	2b00      	cmp	r3, #0
    f3bc:	d004      	beq.n	f3c8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    f3be:	2101      	movs	r1, #1
    f3c0:	6878      	ldr	r0, [r7, #4]
    f3c2:	4b12      	ldr	r3, [pc, #72]	; (f40c <_usb_d_dev_trans_in_isr+0x8c>)
    f3c4:	4798      	blx	r3
}
    f3c6:	e018      	b.n	f3fa <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    f3c8:	687b      	ldr	r3, [r7, #4]
    f3ca:	7cdb      	ldrb	r3, [r3, #19]
    f3cc:	f003 0307 	and.w	r3, r3, #7
    f3d0:	b2db      	uxtb	r3, r3
    f3d2:	2b01      	cmp	r3, #1
    f3d4:	d111      	bne.n	f3fa <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    f3d6:	78fb      	ldrb	r3, [r7, #3]
    f3d8:	f003 0304 	and.w	r3, r3, #4
    f3dc:	2b00      	cmp	r3, #0
    f3de:	d004      	beq.n	f3ea <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    f3e0:	2100      	movs	r1, #0
    f3e2:	6878      	ldr	r0, [r7, #4]
    f3e4:	4b08      	ldr	r3, [pc, #32]	; (f408 <_usb_d_dev_trans_in_isr+0x88>)
    f3e6:	4798      	blx	r3
}
    f3e8:	e007      	b.n	f3fa <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f3ea:	78fb      	ldrb	r3, [r7, #3]
    f3ec:	f003 0310 	and.w	r3, r3, #16
    f3f0:	2b00      	cmp	r3, #0
    f3f2:	d002      	beq.n	f3fa <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    f3f4:	6878      	ldr	r0, [r7, #4]
    f3f6:	4b06      	ldr	r3, [pc, #24]	; (f410 <_usb_d_dev_trans_in_isr+0x90>)
    f3f8:	4798      	blx	r3
}
    f3fa:	bf00      	nop
    f3fc:	3708      	adds	r7, #8
    f3fe:	46bd      	mov	sp, r7
    f400:	bd80      	pop	{r7, pc}
    f402:	bf00      	nop
    f404:	0000f125 	.word	0x0000f125
    f408:	0000f169 	.word	0x0000f169
    f40c:	0000eb71 	.word	0x0000eb71
    f410:	0000f04d 	.word	0x0000f04d

0000f414 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f414:	b580      	push	{r7, lr}
    f416:	b082      	sub	sp, #8
    f418:	af00      	add	r7, sp, #0
    f41a:	6078      	str	r0, [r7, #4]
    f41c:	460b      	mov	r3, r1
    f41e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    f420:	78fb      	ldrb	r3, [r7, #3]
    f422:	f003 0320 	and.w	r3, r3, #32
    f426:	2b00      	cmp	r3, #0
    f428:	d004      	beq.n	f434 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    f42a:	2100      	movs	r1, #0
    f42c:	6878      	ldr	r0, [r7, #4]
    f42e:	4b1a      	ldr	r3, [pc, #104]	; (f498 <_usb_d_dev_trans_out_isr+0x84>)
    f430:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    f432:	e02c      	b.n	f48e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    f434:	78fb      	ldrb	r3, [r7, #3]
    f436:	f003 0304 	and.w	r3, r3, #4
    f43a:	2b00      	cmp	r3, #0
    f43c:	d004      	beq.n	f448 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    f43e:	2100      	movs	r1, #0
    f440:	6878      	ldr	r0, [r7, #4]
    f442:	4b16      	ldr	r3, [pc, #88]	; (f49c <_usb_d_dev_trans_out_isr+0x88>)
    f444:	4798      	blx	r3
}
    f446:	e022      	b.n	f48e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    f448:	78fb      	ldrb	r3, [r7, #3]
    f44a:	f003 0301 	and.w	r3, r3, #1
    f44e:	2b00      	cmp	r3, #0
    f450:	d004      	beq.n	f45c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    f452:	2101      	movs	r1, #1
    f454:	6878      	ldr	r0, [r7, #4]
    f456:	4b12      	ldr	r3, [pc, #72]	; (f4a0 <_usb_d_dev_trans_out_isr+0x8c>)
    f458:	4798      	blx	r3
}
    f45a:	e018      	b.n	f48e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    f45c:	687b      	ldr	r3, [r7, #4]
    f45e:	7cdb      	ldrb	r3, [r3, #19]
    f460:	f003 0307 	and.w	r3, r3, #7
    f464:	b2db      	uxtb	r3, r3
    f466:	2b01      	cmp	r3, #1
    f468:	d111      	bne.n	f48e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    f46a:	78fb      	ldrb	r3, [r7, #3]
    f46c:	f003 0308 	and.w	r3, r3, #8
    f470:	2b00      	cmp	r3, #0
    f472:	d004      	beq.n	f47e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    f474:	2101      	movs	r1, #1
    f476:	6878      	ldr	r0, [r7, #4]
    f478:	4b08      	ldr	r3, [pc, #32]	; (f49c <_usb_d_dev_trans_out_isr+0x88>)
    f47a:	4798      	blx	r3
}
    f47c:	e007      	b.n	f48e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f47e:	78fb      	ldrb	r3, [r7, #3]
    f480:	f003 0310 	and.w	r3, r3, #16
    f484:	2b00      	cmp	r3, #0
    f486:	d002      	beq.n	f48e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    f488:	6878      	ldr	r0, [r7, #4]
    f48a:	4b06      	ldr	r3, [pc, #24]	; (f4a4 <_usb_d_dev_trans_out_isr+0x90>)
    f48c:	4798      	blx	r3
}
    f48e:	bf00      	nop
    f490:	3708      	adds	r7, #8
    f492:	46bd      	mov	sp, r7
    f494:	bd80      	pop	{r7, pc}
    f496:	bf00      	nop
    f498:	0000f125 	.word	0x0000f125
    f49c:	0000f169 	.word	0x0000f169
    f4a0:	0000ed89 	.word	0x0000ed89
    f4a4:	0000f04d 	.word	0x0000f04d

0000f4a8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    f4a8:	b580      	push	{r7, lr}
    f4aa:	b084      	sub	sp, #16
    f4ac:	af00      	add	r7, sp, #0
    f4ae:	6078      	str	r0, [r7, #4]
    f4b0:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    f4b2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f4b6:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f4b8:	683b      	ldr	r3, [r7, #0]
    f4ba:	7c9b      	ldrb	r3, [r3, #18]
    f4bc:	f003 030f 	and.w	r3, r3, #15
    f4c0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    f4c2:	7afb      	ldrb	r3, [r7, #11]
    f4c4:	2201      	movs	r2, #1
    f4c6:	409a      	lsls	r2, r3
    f4c8:	687b      	ldr	r3, [r7, #4]
    f4ca:	4013      	ands	r3, r2
    f4cc:	2b00      	cmp	r3, #0
    f4ce:	d03d      	beq.n	f54c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    f4d0:	7afb      	ldrb	r3, [r7, #11]
    f4d2:	68fa      	ldr	r2, [r7, #12]
    f4d4:	3308      	adds	r3, #8
    f4d6:	015b      	lsls	r3, r3, #5
    f4d8:	4413      	add	r3, r2
    f4da:	3307      	adds	r3, #7
    f4dc:	781b      	ldrb	r3, [r3, #0]
    f4de:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    f4e0:	7afb      	ldrb	r3, [r7, #11]
    f4e2:	68fa      	ldr	r2, [r7, #12]
    f4e4:	015b      	lsls	r3, r3, #5
    f4e6:	4413      	add	r3, r2
    f4e8:	f203 1309 	addw	r3, r3, #265	; 0x109
    f4ec:	781b      	ldrb	r3, [r3, #0]
    f4ee:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    f4f0:	7aba      	ldrb	r2, [r7, #10]
    f4f2:	7a7b      	ldrb	r3, [r7, #9]
    f4f4:	4013      	ands	r3, r2
    f4f6:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    f4f8:	7abb      	ldrb	r3, [r7, #10]
    f4fa:	2b00      	cmp	r3, #0
    f4fc:	d027      	beq.n	f54e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    f4fe:	683b      	ldr	r3, [r7, #0]
    f500:	7cdb      	ldrb	r3, [r3, #19]
    f502:	f003 0307 	and.w	r3, r3, #7
    f506:	b2db      	uxtb	r3, r3
    f508:	2b01      	cmp	r3, #1
    f50a:	d10c      	bne.n	f526 <_usb_d_dev_handle_eps+0x7e>
    f50c:	683b      	ldr	r3, [r7, #0]
    f50e:	7cdb      	ldrb	r3, [r3, #19]
    f510:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f514:	b2db      	uxtb	r3, r3
    f516:	2b00      	cmp	r3, #0
    f518:	d105      	bne.n	f526 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    f51a:	7abb      	ldrb	r3, [r7, #10]
    f51c:	4619      	mov	r1, r3
    f51e:	6838      	ldr	r0, [r7, #0]
    f520:	4b0c      	ldr	r3, [pc, #48]	; (f554 <_usb_d_dev_handle_eps+0xac>)
    f522:	4798      	blx	r3
    f524:	e013      	b.n	f54e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    f526:	683b      	ldr	r3, [r7, #0]
    f528:	7cdb      	ldrb	r3, [r3, #19]
    f52a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    f52e:	b2db      	uxtb	r3, r3
    f530:	2b00      	cmp	r3, #0
    f532:	d005      	beq.n	f540 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    f534:	7abb      	ldrb	r3, [r7, #10]
    f536:	4619      	mov	r1, r3
    f538:	6838      	ldr	r0, [r7, #0]
    f53a:	4b07      	ldr	r3, [pc, #28]	; (f558 <_usb_d_dev_handle_eps+0xb0>)
    f53c:	4798      	blx	r3
    f53e:	e006      	b.n	f54e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    f540:	7abb      	ldrb	r3, [r7, #10]
    f542:	4619      	mov	r1, r3
    f544:	6838      	ldr	r0, [r7, #0]
    f546:	4b05      	ldr	r3, [pc, #20]	; (f55c <_usb_d_dev_handle_eps+0xb4>)
    f548:	4798      	blx	r3
    f54a:	e000      	b.n	f54e <_usb_d_dev_handle_eps+0xa6>
		return;
    f54c:	bf00      	nop
		}
	}
}
    f54e:	3710      	adds	r7, #16
    f550:	46bd      	mov	sp, r7
    f552:	bd80      	pop	{r7, pc}
    f554:	0000f32d 	.word	0x0000f32d
    f558:	0000f381 	.word	0x0000f381
    f55c:	0000f415 	.word	0x0000f415

0000f560 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    f560:	b580      	push	{r7, lr}
    f562:	b084      	sub	sp, #16
    f564:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    f566:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f56a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    f56c:	68bb      	ldr	r3, [r7, #8]
    f56e:	8c1b      	ldrh	r3, [r3, #32]
    f570:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    f572:	88fb      	ldrh	r3, [r7, #6]
    f574:	2b00      	cmp	r3, #0
    f576:	d104      	bne.n	f582 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    f578:	4b13      	ldr	r3, [pc, #76]	; (f5c8 <_usb_d_dev_handler+0x68>)
    f57a:	4798      	blx	r3
    f57c:	4603      	mov	r3, r0
    f57e:	2b00      	cmp	r3, #0
    f580:	d11e      	bne.n	f5c0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    f582:	2300      	movs	r3, #0
    f584:	73fb      	strb	r3, [r7, #15]
    f586:	e017      	b.n	f5b8 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    f588:	7bfa      	ldrb	r2, [r7, #15]
    f58a:	4613      	mov	r3, r2
    f58c:	009b      	lsls	r3, r3, #2
    f58e:	4413      	add	r3, r2
    f590:	009b      	lsls	r3, r3, #2
    f592:	3310      	adds	r3, #16
    f594:	4a0d      	ldr	r2, [pc, #52]	; (f5cc <_usb_d_dev_handler+0x6c>)
    f596:	4413      	add	r3, r2
    f598:	3304      	adds	r3, #4
    f59a:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    f59c:	683b      	ldr	r3, [r7, #0]
    f59e:	7c9b      	ldrb	r3, [r3, #18]
    f5a0:	2bff      	cmp	r3, #255	; 0xff
    f5a2:	d005      	beq.n	f5b0 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    f5a4:	88fb      	ldrh	r3, [r7, #6]
    f5a6:	6839      	ldr	r1, [r7, #0]
    f5a8:	4618      	mov	r0, r3
    f5aa:	4b09      	ldr	r3, [pc, #36]	; (f5d0 <_usb_d_dev_handler+0x70>)
    f5ac:	4798      	blx	r3
    f5ae:	e000      	b.n	f5b2 <_usb_d_dev_handler+0x52>
			continue;
    f5b0:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    f5b2:	7bfb      	ldrb	r3, [r7, #15]
    f5b4:	3301      	adds	r3, #1
    f5b6:	73fb      	strb	r3, [r7, #15]
    f5b8:	7bfb      	ldrb	r3, [r7, #15]
    f5ba:	2b08      	cmp	r3, #8
    f5bc:	d9e4      	bls.n	f588 <_usb_d_dev_handler+0x28>
    f5be:	e000      	b.n	f5c2 <_usb_d_dev_handler+0x62>
			return;
    f5c0:	bf00      	nop
	}
}
    f5c2:	3710      	adds	r7, #16
    f5c4:	46bd      	mov	sp, r7
    f5c6:	bd80      	pop	{r7, pc}
    f5c8:	0000eab9 	.word	0x0000eab9
    f5cc:	20008b28 	.word	0x20008b28
    f5d0:	0000f4a9 	.word	0x0000f4a9

0000f5d4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    f5d4:	b580      	push	{r7, lr}
    f5d6:	b082      	sub	sp, #8
    f5d8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    f5da:	2300      	movs	r3, #0
    f5dc:	71fb      	strb	r3, [r7, #7]
    f5de:	e023      	b.n	f628 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    f5e0:	79fa      	ldrb	r2, [r7, #7]
    f5e2:	4613      	mov	r3, r2
    f5e4:	009b      	lsls	r3, r3, #2
    f5e6:	4413      	add	r3, r2
    f5e8:	009b      	lsls	r3, r3, #2
    f5ea:	3310      	adds	r3, #16
    f5ec:	4a14      	ldr	r2, [pc, #80]	; (f640 <_usb_d_dev_reset_epts+0x6c>)
    f5ee:	4413      	add	r3, r2
    f5f0:	3304      	adds	r3, #4
    f5f2:	2103      	movs	r1, #3
    f5f4:	4618      	mov	r0, r3
    f5f6:	4b13      	ldr	r3, [pc, #76]	; (f644 <_usb_d_dev_reset_epts+0x70>)
    f5f8:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    f5fa:	79fa      	ldrb	r2, [r7, #7]
    f5fc:	4910      	ldr	r1, [pc, #64]	; (f640 <_usb_d_dev_reset_epts+0x6c>)
    f5fe:	4613      	mov	r3, r2
    f600:	009b      	lsls	r3, r3, #2
    f602:	4413      	add	r3, r2
    f604:	009b      	lsls	r3, r3, #2
    f606:	440b      	add	r3, r1
    f608:	3326      	adds	r3, #38	; 0x26
    f60a:	22ff      	movs	r2, #255	; 0xff
    f60c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    f60e:	79fa      	ldrb	r2, [r7, #7]
    f610:	490b      	ldr	r1, [pc, #44]	; (f640 <_usb_d_dev_reset_epts+0x6c>)
    f612:	4613      	mov	r3, r2
    f614:	009b      	lsls	r3, r3, #2
    f616:	4413      	add	r3, r2
    f618:	009b      	lsls	r3, r3, #2
    f61a:	440b      	add	r3, r1
    f61c:	3327      	adds	r3, #39	; 0x27
    f61e:	2200      	movs	r2, #0
    f620:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    f622:	79fb      	ldrb	r3, [r7, #7]
    f624:	3301      	adds	r3, #1
    f626:	71fb      	strb	r3, [r7, #7]
    f628:	79fb      	ldrb	r3, [r7, #7]
    f62a:	2b08      	cmp	r3, #8
    f62c:	d9d8      	bls.n	f5e0 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    f62e:	22a0      	movs	r2, #160	; 0xa0
    f630:	2100      	movs	r1, #0
    f632:	4805      	ldr	r0, [pc, #20]	; (f648 <_usb_d_dev_reset_epts+0x74>)
    f634:	4b05      	ldr	r3, [pc, #20]	; (f64c <_usb_d_dev_reset_epts+0x78>)
    f636:	4798      	blx	r3
}
    f638:	bf00      	nop
    f63a:	3708      	adds	r7, #8
    f63c:	46bd      	mov	sp, r7
    f63e:	bd80      	pop	{r7, pc}
    f640:	20008b28 	.word	0x20008b28
    f644:	0000fe99 	.word	0x0000fe99
    f648:	20008bf0 	.word	0x20008bf0
    f64c:	0001c5d9 	.word	0x0001c5d9

0000f650 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    f650:	b580      	push	{r7, lr}
    f652:	b084      	sub	sp, #16
    f654:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    f656:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f65a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    f65c:	2301      	movs	r3, #1
    f65e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    f660:	2304      	movs	r3, #4
    f662:	713b      	strb	r3, [r7, #4]
    f664:	2300      	movs	r3, #0
    f666:	717b      	strb	r3, [r7, #5]
    f668:	2300      	movs	r3, #0
    f66a:	71bb      	strb	r3, [r7, #6]
    f66c:	2300      	movs	r3, #0
    f66e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    f670:	2101      	movs	r1, #1
    f672:	68f8      	ldr	r0, [r7, #12]
    f674:	4b26      	ldr	r3, [pc, #152]	; (f710 <_usb_d_dev_init+0xc0>)
    f676:	4798      	blx	r3
    f678:	4603      	mov	r3, r0
    f67a:	f083 0301 	eor.w	r3, r3, #1
    f67e:	b2db      	uxtb	r3, r3
    f680:	2b00      	cmp	r3, #0
    f682:	d011      	beq.n	f6a8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    f684:	2102      	movs	r1, #2
    f686:	68f8      	ldr	r0, [r7, #12]
    f688:	4b22      	ldr	r3, [pc, #136]	; (f714 <_usb_d_dev_init+0xc4>)
    f68a:	4798      	blx	r3
    f68c:	4603      	mov	r3, r0
    f68e:	2b00      	cmp	r3, #0
    f690:	d006      	beq.n	f6a0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    f692:	68f8      	ldr	r0, [r7, #12]
    f694:	4b20      	ldr	r3, [pc, #128]	; (f718 <_usb_d_dev_init+0xc8>)
    f696:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    f698:	2102      	movs	r1, #2
    f69a:	68f8      	ldr	r0, [r7, #12]
    f69c:	4b1f      	ldr	r3, [pc, #124]	; (f71c <_usb_d_dev_init+0xcc>)
    f69e:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    f6a0:	2101      	movs	r1, #1
    f6a2:	68f8      	ldr	r0, [r7, #12]
    f6a4:	4b1e      	ldr	r3, [pc, #120]	; (f720 <_usb_d_dev_init+0xd0>)
    f6a6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    f6a8:	2101      	movs	r1, #1
    f6aa:	68f8      	ldr	r0, [r7, #12]
    f6ac:	4b1b      	ldr	r3, [pc, #108]	; (f71c <_usb_d_dev_init+0xcc>)
    f6ae:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    f6b0:	4b1c      	ldr	r3, [pc, #112]	; (f724 <_usb_d_dev_init+0xd4>)
    f6b2:	4a1d      	ldr	r2, [pc, #116]	; (f728 <_usb_d_dev_init+0xd8>)
    f6b4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    f6b6:	4b1b      	ldr	r3, [pc, #108]	; (f724 <_usb_d_dev_init+0xd4>)
    f6b8:	4a1b      	ldr	r2, [pc, #108]	; (f728 <_usb_d_dev_init+0xd8>)
    f6ba:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    f6bc:	4b19      	ldr	r3, [pc, #100]	; (f724 <_usb_d_dev_init+0xd4>)
    f6be:	4a1a      	ldr	r2, [pc, #104]	; (f728 <_usb_d_dev_init+0xd8>)
    f6c0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    f6c2:	4b18      	ldr	r3, [pc, #96]	; (f724 <_usb_d_dev_init+0xd4>)
    f6c4:	4a18      	ldr	r2, [pc, #96]	; (f728 <_usb_d_dev_init+0xd8>)
    f6c6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    f6c8:	4b16      	ldr	r3, [pc, #88]	; (f724 <_usb_d_dev_init+0xd4>)
    f6ca:	4a17      	ldr	r2, [pc, #92]	; (f728 <_usb_d_dev_init+0xd8>)
    f6cc:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    f6ce:	4b17      	ldr	r3, [pc, #92]	; (f72c <_usb_d_dev_init+0xdc>)
    f6d0:	4798      	blx	r3

	_usb_load_calib();
    f6d2:	4b17      	ldr	r3, [pc, #92]	; (f730 <_usb_d_dev_init+0xe0>)
    f6d4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    f6d6:	2104      	movs	r1, #4
    f6d8:	68f8      	ldr	r0, [r7, #12]
    f6da:	4b11      	ldr	r3, [pc, #68]	; (f720 <_usb_d_dev_init+0xd0>)
    f6dc:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    f6de:	4b15      	ldr	r3, [pc, #84]	; (f734 <_usb_d_dev_init+0xe4>)
    f6e0:	4619      	mov	r1, r3
    f6e2:	68f8      	ldr	r0, [r7, #12]
    f6e4:	4b14      	ldr	r3, [pc, #80]	; (f738 <_usb_d_dev_init+0xe8>)
    f6e6:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    f6e8:	7afb      	ldrb	r3, [r7, #11]
    f6ea:	f107 0210 	add.w	r2, r7, #16
    f6ee:	4413      	add	r3, r2
    f6f0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    f6f4:	f043 0301 	orr.w	r3, r3, #1
    f6f8:	b2db      	uxtb	r3, r3
    f6fa:	b29b      	uxth	r3, r3
    f6fc:	4619      	mov	r1, r3
    f6fe:	68f8      	ldr	r0, [r7, #12]
    f700:	4b0e      	ldr	r3, [pc, #56]	; (f73c <_usb_d_dev_init+0xec>)
    f702:	4798      	blx	r3

	return ERR_NONE;
    f704:	2300      	movs	r3, #0
}
    f706:	4618      	mov	r0, r3
    f708:	3710      	adds	r7, #16
    f70a:	46bd      	mov	sp, r7
    f70c:	bd80      	pop	{r7, pc}
    f70e:	bf00      	nop
    f710:	0000dce9 	.word	0x0000dce9
    f714:	0000e039 	.word	0x0000e039
    f718:	0000e00d 	.word	0x0000e00d
    f71c:	0000dcbf 	.word	0x0000dcbf
    f720:	0000e069 	.word	0x0000e069
    f724:	20008b28 	.word	0x20008b28
    f728:	0000e131 	.word	0x0000e131
    f72c:	0000f5d5 	.word	0x0000f5d5
    f730:	0000e149 	.word	0x0000e149
    f734:	20008bf0 	.word	0x20008bf0
    f738:	0000e115 	.word	0x0000e115
    f73c:	0000e0d9 	.word	0x0000e0d9

0000f740 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    f740:	b580      	push	{r7, lr}
    f742:	b082      	sub	sp, #8
    f744:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    f746:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f74a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    f74c:	2103      	movs	r1, #3
    f74e:	6878      	ldr	r0, [r7, #4]
    f750:	4b17      	ldr	r3, [pc, #92]	; (f7b0 <_usb_d_dev_enable+0x70>)
    f752:	4798      	blx	r3
    f754:	4603      	mov	r3, r0
    f756:	2b00      	cmp	r3, #0
    f758:	d002      	beq.n	f760 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    f75a:	f06f 0310 	mvn.w	r3, #16
    f75e:	e023      	b.n	f7a8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    f760:	6878      	ldr	r0, [r7, #4]
    f762:	4b14      	ldr	r3, [pc, #80]	; (f7b4 <_usb_d_dev_enable+0x74>)
    f764:	4798      	blx	r3
    f766:	4603      	mov	r3, r0
    f768:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    f76a:	78fb      	ldrb	r3, [r7, #3]
    f76c:	f003 0302 	and.w	r3, r3, #2
    f770:	2b00      	cmp	r3, #0
    f772:	d107      	bne.n	f784 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    f774:	78fb      	ldrb	r3, [r7, #3]
    f776:	f043 0302 	orr.w	r3, r3, #2
    f77a:	b2db      	uxtb	r3, r3
    f77c:	4619      	mov	r1, r3
    f77e:	6878      	ldr	r0, [r7, #4]
    f780:	4b0d      	ldr	r3, [pc, #52]	; (f7b8 <_usb_d_dev_enable+0x78>)
    f782:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    f784:	2050      	movs	r0, #80	; 0x50
    f786:	4b0d      	ldr	r3, [pc, #52]	; (f7bc <_usb_d_dev_enable+0x7c>)
    f788:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    f78a:	2051      	movs	r0, #81	; 0x51
    f78c:	4b0b      	ldr	r3, [pc, #44]	; (f7bc <_usb_d_dev_enable+0x7c>)
    f78e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    f790:	2052      	movs	r0, #82	; 0x52
    f792:	4b0a      	ldr	r3, [pc, #40]	; (f7bc <_usb_d_dev_enable+0x7c>)
    f794:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    f796:	2053      	movs	r0, #83	; 0x53
    f798:	4b08      	ldr	r3, [pc, #32]	; (f7bc <_usb_d_dev_enable+0x7c>)
    f79a:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    f79c:	f240 218d 	movw	r1, #653	; 0x28d
    f7a0:	6878      	ldr	r0, [r7, #4]
    f7a2:	4b07      	ldr	r3, [pc, #28]	; (f7c0 <_usb_d_dev_enable+0x80>)
    f7a4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    f7a6:	2300      	movs	r3, #0
}
    f7a8:	4618      	mov	r0, r3
    f7aa:	3708      	adds	r7, #8
    f7ac:	46bd      	mov	sp, r7
    f7ae:	bd80      	pop	{r7, pc}
    f7b0:	0000dfe3 	.word	0x0000dfe3
    f7b4:	0000e091 	.word	0x0000e091
    f7b8:	0000e069 	.word	0x0000e069
    f7bc:	0000dbf5 	.word	0x0000dbf5
    f7c0:	0000df8d 	.word	0x0000df8d

0000f7c4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    f7c4:	b580      	push	{r7, lr}
    f7c6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    f7c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f7cc:	4b01      	ldr	r3, [pc, #4]	; (f7d4 <_usb_d_dev_attach+0x10>)
    f7ce:	4798      	blx	r3
}
    f7d0:	bf00      	nop
    f7d2:	bd80      	pop	{r7, pc}
    f7d4:	0000e0b5 	.word	0x0000e0b5

0000f7d8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    f7d8:	b580      	push	{r7, lr}
    f7da:	b082      	sub	sp, #8
    f7dc:	af00      	add	r7, sp, #0
    f7de:	4603      	mov	r3, r0
    f7e0:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    f7e2:	79fb      	ldrb	r3, [r7, #7]
    f7e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f7e8:	b2db      	uxtb	r3, r3
    f7ea:	4619      	mov	r1, r3
    f7ec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f7f0:	4b02      	ldr	r3, [pc, #8]	; (f7fc <_usb_d_dev_set_address+0x24>)
    f7f2:	4798      	blx	r3
}
    f7f4:	bf00      	nop
    f7f6:	3708      	adds	r7, #8
    f7f8:	46bd      	mov	sp, r7
    f7fa:	bd80      	pop	{r7, pc}
    f7fc:	0000e0f7 	.word	0x0000e0f7

0000f800 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    f800:	b590      	push	{r4, r7, lr}
    f802:	b085      	sub	sp, #20
    f804:	af00      	add	r7, sp, #0
    f806:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    f808:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f80c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f80e:	687b      	ldr	r3, [r7, #4]
    f810:	7c9b      	ldrb	r3, [r3, #18]
    f812:	f003 030f 	and.w	r3, r3, #15
    f816:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f818:	687b      	ldr	r3, [r7, #4]
    f81a:	68db      	ldr	r3, [r3, #12]
    f81c:	461a      	mov	r2, r3
    f81e:	7afb      	ldrb	r3, [r7, #11]
    f820:	2100      	movs	r1, #0
    f822:	4618      	mov	r0, r3
    f824:	4b0f      	ldr	r3, [pc, #60]	; (f864 <_usb_d_dev_trans_setup+0x64>)
    f826:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    f828:	687b      	ldr	r3, [r7, #4]
    f82a:	8a1b      	ldrh	r3, [r3, #16]
    f82c:	461a      	mov	r2, r3
    f82e:	7af8      	ldrb	r0, [r7, #11]
    f830:	2300      	movs	r3, #0
    f832:	2100      	movs	r1, #0
    f834:	4c0c      	ldr	r4, [pc, #48]	; (f868 <_usb_d_dev_trans_setup+0x68>)
    f836:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    f838:	7afb      	ldrb	r3, [r7, #11]
    f83a:	22b0      	movs	r2, #176	; 0xb0
    f83c:	4619      	mov	r1, r3
    f83e:	68f8      	ldr	r0, [r7, #12]
    f840:	4b0a      	ldr	r3, [pc, #40]	; (f86c <_usb_d_dev_trans_setup+0x6c>)
    f842:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    f844:	7afb      	ldrb	r3, [r7, #11]
    f846:	2200      	movs	r2, #0
    f848:	2100      	movs	r1, #0
    f84a:	4618      	mov	r0, r3
    f84c:	4b08      	ldr	r3, [pc, #32]	; (f870 <_usb_d_dev_trans_setup+0x70>)
    f84e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    f850:	7afb      	ldrb	r3, [r7, #11]
    f852:	2210      	movs	r2, #16
    f854:	4619      	mov	r1, r3
    f856:	68f8      	ldr	r0, [r7, #12]
    f858:	4b06      	ldr	r3, [pc, #24]	; (f874 <_usb_d_dev_trans_setup+0x74>)
    f85a:	4798      	blx	r3
}
    f85c:	bf00      	nop
    f85e:	3714      	adds	r7, #20
    f860:	46bd      	mov	sp, r7
    f862:	bd90      	pop	{r4, r7, pc}
    f864:	0000e595 	.word	0x0000e595
    f868:	0000e71d 	.word	0x0000e71d
    f86c:	0000ddf5 	.word	0x0000ddf5
    f870:	0000e7ed 	.word	0x0000e7ed
    f874:	0000de49 	.word	0x0000de49

0000f878 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    f878:	b580      	push	{r7, lr}
    f87a:	b088      	sub	sp, #32
    f87c:	af00      	add	r7, sp, #0
    f87e:	4603      	mov	r3, r0
    f880:	71fb      	strb	r3, [r7, #7]
    f882:	460b      	mov	r3, r1
    f884:	71bb      	strb	r3, [r7, #6]
    f886:	4613      	mov	r3, r2
    f888:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    f88a:	79fb      	ldrb	r3, [r7, #7]
    f88c:	f003 030f 	and.w	r3, r3, #15
    f890:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    f892:	79fb      	ldrb	r3, [r7, #7]
    f894:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f898:	2b00      	cmp	r3, #0
    f89a:	bf14      	ite	ne
    f89c:	2301      	movne	r3, #1
    f89e:	2300      	moveq	r3, #0
    f8a0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f8a2:	7fba      	ldrb	r2, [r7, #30]
    f8a4:	7ffb      	ldrb	r3, [r7, #31]
    f8a6:	4611      	mov	r1, r2
    f8a8:	4618      	mov	r0, r3
    f8aa:	4b3e      	ldr	r3, [pc, #248]	; (f9a4 <_usb_d_dev_ep_init+0x12c>)
    f8ac:	4798      	blx	r3
    f8ae:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    f8b0:	79bb      	ldrb	r3, [r7, #6]
    f8b2:	f003 0303 	and.w	r3, r3, #3
    f8b6:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    f8b8:	7ffa      	ldrb	r2, [r7, #31]
    f8ba:	4613      	mov	r3, r2
    f8bc:	005b      	lsls	r3, r3, #1
    f8be:	4413      	add	r3, r2
    f8c0:	009b      	lsls	r3, r3, #2
    f8c2:	4a39      	ldr	r2, [pc, #228]	; (f9a8 <_usb_d_dev_ep_init+0x130>)
    f8c4:	4413      	add	r3, r2
    f8c6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    f8c8:	7ffb      	ldrb	r3, [r7, #31]
    f8ca:	2b04      	cmp	r3, #4
    f8cc:	d902      	bls.n	f8d4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    f8ce:	f06f 0311 	mvn.w	r3, #17
    f8d2:	e063      	b.n	f99c <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    f8d4:	69bb      	ldr	r3, [r7, #24]
    f8d6:	7c9b      	ldrb	r3, [r3, #18]
    f8d8:	2bff      	cmp	r3, #255	; 0xff
    f8da:	d002      	beq.n	f8e2 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    f8dc:	f06f 0313 	mvn.w	r3, #19
    f8e0:	e05c      	b.n	f99c <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    f8e2:	7dfb      	ldrb	r3, [r7, #23]
    f8e4:	2b00      	cmp	r3, #0
    f8e6:	d11f      	bne.n	f928 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    f8e8:	7fbb      	ldrb	r3, [r7, #30]
    f8ea:	2b00      	cmp	r3, #0
    f8ec:	bf14      	ite	ne
    f8ee:	2301      	movne	r3, #1
    f8f0:	2300      	moveq	r3, #0
    f8f2:	b2db      	uxtb	r3, r3
    f8f4:	f083 0301 	eor.w	r3, r3, #1
    f8f8:	b2db      	uxtb	r3, r3
    f8fa:	f003 0301 	and.w	r3, r3, #1
    f8fe:	b2da      	uxtb	r2, r3
    f900:	7ffb      	ldrb	r3, [r7, #31]
    f902:	4611      	mov	r1, r2
    f904:	4618      	mov	r0, r3
    f906:	4b27      	ldr	r3, [pc, #156]	; (f9a4 <_usb_d_dev_ep_init+0x12c>)
    f908:	4798      	blx	r3
    f90a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    f90c:	68fb      	ldr	r3, [r7, #12]
    f90e:	7c9b      	ldrb	r3, [r3, #18]
    f910:	2bff      	cmp	r3, #255	; 0xff
    f912:	d002      	beq.n	f91a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    f914:	f06f 0313 	mvn.w	r3, #19
    f918:	e040      	b.n	f99c <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    f91a:	693b      	ldr	r3, [r7, #16]
    f91c:	681b      	ldr	r3, [r3, #0]
    f91e:	2b00      	cmp	r3, #0
    f920:	d102      	bne.n	f928 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    f922:	f06f 0312 	mvn.w	r3, #18
    f926:	e039      	b.n	f99c <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    f928:	7fbb      	ldrb	r3, [r7, #30]
    f92a:	2b00      	cmp	r3, #0
    f92c:	d007      	beq.n	f93e <_usb_d_dev_ep_init+0xc6>
    f92e:	693b      	ldr	r3, [r7, #16]
    f930:	685b      	ldr	r3, [r3, #4]
    f932:	2b00      	cmp	r3, #0
    f934:	bf14      	ite	ne
    f936:	2301      	movne	r3, #1
    f938:	2300      	moveq	r3, #0
    f93a:	b2db      	uxtb	r3, r3
    f93c:	e006      	b.n	f94c <_usb_d_dev_ep_init+0xd4>
    f93e:	693b      	ldr	r3, [r7, #16]
    f940:	681b      	ldr	r3, [r3, #0]
    f942:	2b00      	cmp	r3, #0
    f944:	bf14      	ite	ne
    f946:	2301      	movne	r3, #1
    f948:	2300      	moveq	r3, #0
    f94a:	b2db      	uxtb	r3, r3
    f94c:	2b00      	cmp	r3, #0
    f94e:	d00f      	beq.n	f970 <_usb_d_dev_ep_init+0xf8>
    f950:	7fbb      	ldrb	r3, [r7, #30]
    f952:	2b00      	cmp	r3, #0
    f954:	d003      	beq.n	f95e <_usb_d_dev_ep_init+0xe6>
    f956:	693b      	ldr	r3, [r7, #16]
    f958:	895b      	ldrh	r3, [r3, #10]
    f95a:	461a      	mov	r2, r3
    f95c:	e002      	b.n	f964 <_usb_d_dev_ep_init+0xec>
    f95e:	693b      	ldr	r3, [r7, #16]
    f960:	891b      	ldrh	r3, [r3, #8]
    f962:	461a      	mov	r2, r3
    f964:	88bb      	ldrh	r3, [r7, #4]
    f966:	429a      	cmp	r2, r3
    f968:	da02      	bge.n	f970 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    f96a:	f06f 0312 	mvn.w	r3, #18
    f96e:	e015      	b.n	f99c <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    f970:	7fbb      	ldrb	r3, [r7, #30]
    f972:	2b00      	cmp	r3, #0
    f974:	d002      	beq.n	f97c <_usb_d_dev_ep_init+0x104>
    f976:	693b      	ldr	r3, [r7, #16]
    f978:	685b      	ldr	r3, [r3, #4]
    f97a:	e001      	b.n	f980 <_usb_d_dev_ep_init+0x108>
    f97c:	693b      	ldr	r3, [r7, #16]
    f97e:	681b      	ldr	r3, [r3, #0]
    f980:	69ba      	ldr	r2, [r7, #24]
    f982:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    f984:	69bb      	ldr	r3, [r7, #24]
    f986:	88ba      	ldrh	r2, [r7, #4]
    f988:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    f98a:	7dfb      	ldrb	r3, [r7, #23]
    f98c:	3301      	adds	r3, #1
    f98e:	b2da      	uxtb	r2, r3
    f990:	69bb      	ldr	r3, [r7, #24]
    f992:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    f994:	69bb      	ldr	r3, [r7, #24]
    f996:	79fa      	ldrb	r2, [r7, #7]
    f998:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    f99a:	2300      	movs	r3, #0
}
    f99c:	4618      	mov	r0, r3
    f99e:	3720      	adds	r7, #32
    f9a0:	46bd      	mov	sp, r7
    f9a2:	bd80      	pop	{r7, pc}
    f9a4:	0000e8a9 	.word	0x0000e8a9
    f9a8:	00020d5c 	.word	0x00020d5c

0000f9ac <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    f9ac:	b580      	push	{r7, lr}
    f9ae:	b086      	sub	sp, #24
    f9b0:	af00      	add	r7, sp, #0
    f9b2:	4603      	mov	r3, r0
    f9b4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    f9b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f9ba:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    f9bc:	79fb      	ldrb	r3, [r7, #7]
    f9be:	f003 030f 	and.w	r3, r3, #15
    f9c2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    f9c4:	79fb      	ldrb	r3, [r7, #7]
    f9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f9ca:	2b00      	cmp	r3, #0
    f9cc:	bf14      	ite	ne
    f9ce:	2301      	movne	r3, #1
    f9d0:	2300      	moveq	r3, #0
    f9d2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f9d4:	7cba      	ldrb	r2, [r7, #18]
    f9d6:	7cfb      	ldrb	r3, [r7, #19]
    f9d8:	4611      	mov	r1, r2
    f9da:	4618      	mov	r0, r3
    f9dc:	4b2a      	ldr	r3, [pc, #168]	; (fa88 <_usb_d_dev_ep_deinit+0xdc>)
    f9de:	4798      	blx	r3
    f9e0:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    f9e2:	7cfb      	ldrb	r3, [r7, #19]
    f9e4:	2b04      	cmp	r3, #4
    f9e6:	d84a      	bhi.n	fa7e <_usb_d_dev_ep_deinit+0xd2>
    f9e8:	68fb      	ldr	r3, [r7, #12]
    f9ea:	7c9b      	ldrb	r3, [r3, #18]
    f9ec:	2bff      	cmp	r3, #255	; 0xff
    f9ee:	d046      	beq.n	fa7e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    f9f0:	7cbb      	ldrb	r3, [r7, #18]
    f9f2:	2203      	movs	r2, #3
    f9f4:	4619      	mov	r1, r3
    f9f6:	68f8      	ldr	r0, [r7, #12]
    f9f8:	4b24      	ldr	r3, [pc, #144]	; (fa8c <_usb_d_dev_ep_deinit+0xe0>)
    f9fa:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    f9fc:	68fb      	ldr	r3, [r7, #12]
    f9fe:	7cdb      	ldrb	r3, [r3, #19]
    fa00:	f003 0307 	and.w	r3, r3, #7
    fa04:	b2db      	uxtb	r3, r3
    fa06:	2b01      	cmp	r3, #1
    fa08:	d107      	bne.n	fa1a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    fa0a:	79fb      	ldrb	r3, [r7, #7]
    fa0c:	697a      	ldr	r2, [r7, #20]
    fa0e:	3308      	adds	r3, #8
    fa10:	015b      	lsls	r3, r3, #5
    fa12:	4413      	add	r3, r2
    fa14:	2200      	movs	r2, #0
    fa16:	701a      	strb	r2, [r3, #0]
    fa18:	e02a      	b.n	fa70 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    fa1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    fa1e:	2b00      	cmp	r3, #0
    fa20:	da15      	bge.n	fa4e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    fa22:	79fb      	ldrb	r3, [r7, #7]
    fa24:	f003 030f 	and.w	r3, r3, #15
    fa28:	79fa      	ldrb	r2, [r7, #7]
    fa2a:	f002 020f 	and.w	r2, r2, #15
    fa2e:	6979      	ldr	r1, [r7, #20]
    fa30:	3208      	adds	r2, #8
    fa32:	0152      	lsls	r2, r2, #5
    fa34:	440a      	add	r2, r1
    fa36:	7812      	ldrb	r2, [r2, #0]
    fa38:	b2d2      	uxtb	r2, r2
    fa3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    fa3e:	b2d1      	uxtb	r1, r2
    fa40:	697a      	ldr	r2, [r7, #20]
    fa42:	3308      	adds	r3, #8
    fa44:	015b      	lsls	r3, r3, #5
    fa46:	4413      	add	r3, r2
    fa48:	460a      	mov	r2, r1
    fa4a:	701a      	strb	r2, [r3, #0]
    fa4c:	e010      	b.n	fa70 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    fa4e:	79fb      	ldrb	r3, [r7, #7]
    fa50:	79fa      	ldrb	r2, [r7, #7]
    fa52:	6979      	ldr	r1, [r7, #20]
    fa54:	3208      	adds	r2, #8
    fa56:	0152      	lsls	r2, r2, #5
    fa58:	440a      	add	r2, r1
    fa5a:	7812      	ldrb	r2, [r2, #0]
    fa5c:	b2d2      	uxtb	r2, r2
    fa5e:	f022 0207 	bic.w	r2, r2, #7
    fa62:	b2d1      	uxtb	r1, r2
    fa64:	697a      	ldr	r2, [r7, #20]
    fa66:	3308      	adds	r3, #8
    fa68:	015b      	lsls	r3, r3, #5
    fa6a:	4413      	add	r3, r2
    fa6c:	460a      	mov	r2, r1
    fa6e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    fa70:	68fb      	ldr	r3, [r7, #12]
    fa72:	2200      	movs	r2, #0
    fa74:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    fa76:	68fb      	ldr	r3, [r7, #12]
    fa78:	22ff      	movs	r2, #255	; 0xff
    fa7a:	749a      	strb	r2, [r3, #18]
    fa7c:	e000      	b.n	fa80 <_usb_d_dev_ep_deinit+0xd4>
		return;
    fa7e:	bf00      	nop
}
    fa80:	3718      	adds	r7, #24
    fa82:	46bd      	mov	sp, r7
    fa84:	bd80      	pop	{r7, pc}
    fa86:	bf00      	nop
    fa88:	0000e8a9 	.word	0x0000e8a9
    fa8c:	0000fee1 	.word	0x0000fee1

0000fa90 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    fa90:	b5b0      	push	{r4, r5, r7, lr}
    fa92:	b088      	sub	sp, #32
    fa94:	af00      	add	r7, sp, #0
    fa96:	4603      	mov	r3, r0
    fa98:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    fa9a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fa9e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    faa0:	79fb      	ldrb	r3, [r7, #7]
    faa2:	f003 030f 	and.w	r3, r3, #15
    faa6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    faa8:	79fb      	ldrb	r3, [r7, #7]
    faaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    faae:	2b00      	cmp	r3, #0
    fab0:	bf14      	ite	ne
    fab2:	2301      	movne	r3, #1
    fab4:	2300      	moveq	r3, #0
    fab6:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    fab8:	7eba      	ldrb	r2, [r7, #26]
    faba:	7efb      	ldrb	r3, [r7, #27]
    fabc:	4611      	mov	r1, r2
    fabe:	4618      	mov	r0, r3
    fac0:	4b70      	ldr	r3, [pc, #448]	; (fc84 <_usb_d_dev_ep_enable+0x1f4>)
    fac2:	4798      	blx	r3
    fac4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    fac6:	7efb      	ldrb	r3, [r7, #27]
    fac8:	4619      	mov	r1, r3
    faca:	69f8      	ldr	r0, [r7, #28]
    facc:	4b6e      	ldr	r3, [pc, #440]	; (fc88 <_usb_d_dev_ep_enable+0x1f8>)
    face:	4798      	blx	r3
    fad0:	4603      	mov	r3, r0
    fad2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    fad4:	7efb      	ldrb	r3, [r7, #27]
    fad6:	2b04      	cmp	r3, #4
    fad8:	d803      	bhi.n	fae2 <_usb_d_dev_ep_enable+0x52>
    fada:	697b      	ldr	r3, [r7, #20]
    fadc:	7c9b      	ldrb	r3, [r3, #18]
    fade:	2bff      	cmp	r3, #255	; 0xff
    fae0:	d102      	bne.n	fae8 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    fae2:	f06f 0311 	mvn.w	r3, #17
    fae6:	e0c8      	b.n	fc7a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    fae8:	7efb      	ldrb	r3, [r7, #27]
    faea:	015b      	lsls	r3, r3, #5
    faec:	4a67      	ldr	r2, [pc, #412]	; (fc8c <_usb_d_dev_ep_enable+0x1fc>)
    faee:	4413      	add	r3, r2
    faf0:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    faf2:	697b      	ldr	r3, [r7, #20]
    faf4:	7cdb      	ldrb	r3, [r3, #19]
    faf6:	f003 0307 	and.w	r3, r3, #7
    fafa:	b2db      	uxtb	r3, r3
    fafc:	2b01      	cmp	r3, #1
    fafe:	d14b      	bne.n	fb98 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    fb00:	7cfb      	ldrb	r3, [r7, #19]
    fb02:	f003 0377 	and.w	r3, r3, #119	; 0x77
    fb06:	2b00      	cmp	r3, #0
    fb08:	d002      	beq.n	fb10 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    fb0a:	f06f 0313 	mvn.w	r3, #19
    fb0e:	e0b4      	b.n	fc7a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    fb10:	7efb      	ldrb	r3, [r7, #27]
    fb12:	2211      	movs	r2, #17
    fb14:	4619      	mov	r1, r3
    fb16:	69f8      	ldr	r0, [r7, #28]
    fb18:	4b5d      	ldr	r3, [pc, #372]	; (fc90 <_usb_d_dev_ep_enable+0x200>)
    fb1a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    fb1c:	697b      	ldr	r3, [r7, #20]
    fb1e:	8a1b      	ldrh	r3, [r3, #16]
    fb20:	039b      	lsls	r3, r3, #14
    fb22:	4c5c      	ldr	r4, [pc, #368]	; (fc94 <_usb_d_dev_ep_enable+0x204>)
    fb24:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fb26:	697b      	ldr	r3, [r7, #20]
    fb28:	8a1b      	ldrh	r3, [r3, #16]
    fb2a:	4618      	mov	r0, r3
    fb2c:	4b5a      	ldr	r3, [pc, #360]	; (fc98 <_usb_d_dev_ep_enable+0x208>)
    fb2e:	4798      	blx	r3
    fb30:	4603      	mov	r3, r0
    fb32:	071b      	lsls	r3, r3, #28
    fb34:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    fb38:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    fb3c:	68fb      	ldr	r3, [r7, #12]
    fb3e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    fb40:	68fb      	ldr	r3, [r7, #12]
    fb42:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fb46:	697b      	ldr	r3, [r7, #20]
    fb48:	8a1b      	ldrh	r3, [r3, #16]
    fb4a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    fb4e:	697b      	ldr	r3, [r7, #20]
    fb50:	8a1b      	ldrh	r3, [r3, #16]
    fb52:	4618      	mov	r0, r3
    fb54:	4b50      	ldr	r3, [pc, #320]	; (fc98 <_usb_d_dev_ep_enable+0x208>)
    fb56:	4798      	blx	r3
    fb58:	4603      	mov	r3, r0
    fb5a:	071b      	lsls	r3, r3, #28
    fb5c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    fb60:	432b      	orrs	r3, r5
    fb62:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    fb64:	7efb      	ldrb	r3, [r7, #27]
    fb66:	2200      	movs	r2, #0
    fb68:	2100      	movs	r1, #0
    fb6a:	4618      	mov	r0, r3
    fb6c:	4b4b      	ldr	r3, [pc, #300]	; (fc9c <_usb_d_dev_ep_enable+0x20c>)
    fb6e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    fb70:	7efb      	ldrb	r3, [r7, #27]
    fb72:	2200      	movs	r2, #0
    fb74:	2101      	movs	r1, #1
    fb76:	4618      	mov	r0, r3
    fb78:	4b49      	ldr	r3, [pc, #292]	; (fca0 <_usb_d_dev_ep_enable+0x210>)
    fb7a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    fb7c:	7efb      	ldrb	r3, [r7, #27]
    fb7e:	2100      	movs	r1, #0
    fb80:	4618      	mov	r0, r3
    fb82:	4b48      	ldr	r3, [pc, #288]	; (fca4 <_usb_d_dev_ep_enable+0x214>)
    fb84:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    fb86:	7efb      	ldrb	r3, [r7, #27]
    fb88:	2101      	movs	r1, #1
    fb8a:	4618      	mov	r0, r3
    fb8c:	4b45      	ldr	r3, [pc, #276]	; (fca4 <_usb_d_dev_ep_enable+0x214>)
    fb8e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    fb90:	6978      	ldr	r0, [r7, #20]
    fb92:	4b45      	ldr	r3, [pc, #276]	; (fca8 <_usb_d_dev_ep_enable+0x218>)
    fb94:	4798      	blx	r3
    fb96:	e06f      	b.n	fc78 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    fb98:	7ebb      	ldrb	r3, [r7, #26]
    fb9a:	2b00      	cmp	r3, #0
    fb9c:	d038      	beq.n	fc10 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    fb9e:	7cfb      	ldrb	r3, [r7, #19]
    fba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    fba4:	2b00      	cmp	r3, #0
    fba6:	d002      	beq.n	fbae <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    fba8:	f06f 0313 	mvn.w	r3, #19
    fbac:	e065      	b.n	fc7a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    fbae:	697b      	ldr	r3, [r7, #20]
    fbb0:	7cdb      	ldrb	r3, [r3, #19]
    fbb2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fbb6:	b2db      	uxtb	r3, r3
    fbb8:	011b      	lsls	r3, r3, #4
    fbba:	b2db      	uxtb	r3, r3
    fbbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    fbc0:	b2da      	uxtb	r2, r3
    fbc2:	7cfb      	ldrb	r3, [r7, #19]
    fbc4:	4313      	orrs	r3, r2
    fbc6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    fbc8:	7cfa      	ldrb	r2, [r7, #19]
    fbca:	7efb      	ldrb	r3, [r7, #27]
    fbcc:	4619      	mov	r1, r3
    fbce:	69f8      	ldr	r0, [r7, #28]
    fbd0:	4b2f      	ldr	r3, [pc, #188]	; (fc90 <_usb_d_dev_ep_enable+0x200>)
    fbd2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    fbd4:	68fb      	ldr	r3, [r7, #12]
    fbd6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fbda:	697b      	ldr	r3, [r7, #20]
    fbdc:	8a1b      	ldrh	r3, [r3, #16]
    fbde:	f3c3 050d 	ubfx	r5, r3, #0, #14
    fbe2:	697b      	ldr	r3, [r7, #20]
    fbe4:	8a1b      	ldrh	r3, [r3, #16]
    fbe6:	4618      	mov	r0, r3
    fbe8:	4b2b      	ldr	r3, [pc, #172]	; (fc98 <_usb_d_dev_ep_enable+0x208>)
    fbea:	4798      	blx	r3
    fbec:	4603      	mov	r3, r0
    fbee:	071b      	lsls	r3, r3, #28
    fbf0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    fbf4:	432b      	orrs	r3, r5
    fbf6:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    fbf8:	7efb      	ldrb	r3, [r7, #27]
    fbfa:	2200      	movs	r2, #0
    fbfc:	2101      	movs	r1, #1
    fbfe:	4618      	mov	r0, r3
    fc00:	4b27      	ldr	r3, [pc, #156]	; (fca0 <_usb_d_dev_ep_enable+0x210>)
    fc02:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    fc04:	7efb      	ldrb	r3, [r7, #27]
    fc06:	2101      	movs	r1, #1
    fc08:	4618      	mov	r0, r3
    fc0a:	4b26      	ldr	r3, [pc, #152]	; (fca4 <_usb_d_dev_ep_enable+0x214>)
    fc0c:	4798      	blx	r3
    fc0e:	e033      	b.n	fc78 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    fc10:	7cfb      	ldrb	r3, [r7, #19]
    fc12:	f003 0307 	and.w	r3, r3, #7
    fc16:	2b00      	cmp	r3, #0
    fc18:	d002      	beq.n	fc20 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    fc1a:	f06f 0313 	mvn.w	r3, #19
    fc1e:	e02c      	b.n	fc7a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    fc20:	697b      	ldr	r3, [r7, #20]
    fc22:	7cdb      	ldrb	r3, [r3, #19]
    fc24:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fc28:	b2db      	uxtb	r3, r3
    fc2a:	461a      	mov	r2, r3
    fc2c:	7cfb      	ldrb	r3, [r7, #19]
    fc2e:	4313      	orrs	r3, r2
    fc30:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    fc32:	7cfa      	ldrb	r2, [r7, #19]
    fc34:	7efb      	ldrb	r3, [r7, #27]
    fc36:	4619      	mov	r1, r3
    fc38:	69f8      	ldr	r0, [r7, #28]
    fc3a:	4b15      	ldr	r3, [pc, #84]	; (fc90 <_usb_d_dev_ep_enable+0x200>)
    fc3c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    fc3e:	697b      	ldr	r3, [r7, #20]
    fc40:	8a1b      	ldrh	r3, [r3, #16]
    fc42:	039b      	lsls	r3, r3, #14
    fc44:	4c13      	ldr	r4, [pc, #76]	; (fc94 <_usb_d_dev_ep_enable+0x204>)
    fc46:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fc48:	697b      	ldr	r3, [r7, #20]
    fc4a:	8a1b      	ldrh	r3, [r3, #16]
    fc4c:	4618      	mov	r0, r3
    fc4e:	4b12      	ldr	r3, [pc, #72]	; (fc98 <_usb_d_dev_ep_enable+0x208>)
    fc50:	4798      	blx	r3
    fc52:	4603      	mov	r3, r0
    fc54:	071b      	lsls	r3, r3, #28
    fc56:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    fc5a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    fc5e:	68fb      	ldr	r3, [r7, #12]
    fc60:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    fc62:	7efb      	ldrb	r3, [r7, #27]
    fc64:	2200      	movs	r2, #0
    fc66:	2100      	movs	r1, #0
    fc68:	4618      	mov	r0, r3
    fc6a:	4b0c      	ldr	r3, [pc, #48]	; (fc9c <_usb_d_dev_ep_enable+0x20c>)
    fc6c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    fc6e:	7efb      	ldrb	r3, [r7, #27]
    fc70:	2100      	movs	r1, #0
    fc72:	4618      	mov	r0, r3
    fc74:	4b0b      	ldr	r3, [pc, #44]	; (fca4 <_usb_d_dev_ep_enable+0x214>)
    fc76:	4798      	blx	r3
	}

	return USB_OK;
    fc78:	2300      	movs	r3, #0
}
    fc7a:	4618      	mov	r0, r3
    fc7c:	3720      	adds	r7, #32
    fc7e:	46bd      	mov	sp, r7
    fc80:	bdb0      	pop	{r4, r5, r7, pc}
    fc82:	bf00      	nop
    fc84:	0000e8a9 	.word	0x0000e8a9
    fc88:	0000df2f 	.word	0x0000df2f
    fc8c:	20008bf0 	.word	0x20008bf0
    fc90:	0000df05 	.word	0x0000df05
    fc94:	0fffc000 	.word	0x0fffc000
    fc98:	0000e845 	.word	0x0000e845
    fc9c:	0000e7ed 	.word	0x0000e7ed
    fca0:	0000e795 	.word	0x0000e795
    fca4:	0000e75d 	.word	0x0000e75d
    fca8:	0000f801 	.word	0x0000f801

0000fcac <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    fcac:	b580      	push	{r7, lr}
    fcae:	b084      	sub	sp, #16
    fcb0:	af00      	add	r7, sp, #0
    fcb2:	6078      	str	r0, [r7, #4]
    fcb4:	460b      	mov	r3, r1
    fcb6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    fcb8:	687b      	ldr	r3, [r7, #4]
    fcba:	7c9b      	ldrb	r3, [r3, #18]
    fcbc:	f003 030f 	and.w	r3, r3, #15
    fcc0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    fcc2:	78fa      	ldrb	r2, [r7, #3]
    fcc4:	7bfb      	ldrb	r3, [r7, #15]
    fcc6:	4611      	mov	r1, r2
    fcc8:	4618      	mov	r0, r3
    fcca:	4b03      	ldr	r3, [pc, #12]	; (fcd8 <_usb_d_dev_ep_stall_get+0x2c>)
    fccc:	4798      	blx	r3
    fcce:	4603      	mov	r3, r0
}
    fcd0:	4618      	mov	r0, r3
    fcd2:	3710      	adds	r7, #16
    fcd4:	46bd      	mov	sp, r7
    fcd6:	bd80      	pop	{r7, pc}
    fcd8:	0000e39d 	.word	0x0000e39d

0000fcdc <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    fcdc:	b580      	push	{r7, lr}
    fcde:	b084      	sub	sp, #16
    fce0:	af00      	add	r7, sp, #0
    fce2:	6078      	str	r0, [r7, #4]
    fce4:	460b      	mov	r3, r1
    fce6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    fce8:	687b      	ldr	r3, [r7, #4]
    fcea:	7c9b      	ldrb	r3, [r3, #18]
    fcec:	f003 030f 	and.w	r3, r3, #15
    fcf0:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    fcf2:	78f9      	ldrb	r1, [r7, #3]
    fcf4:	7bfb      	ldrb	r3, [r7, #15]
    fcf6:	2201      	movs	r2, #1
    fcf8:	4618      	mov	r0, r3
    fcfa:	4b0a      	ldr	r3, [pc, #40]	; (fd24 <_usb_d_dev_ep_stall_set+0x48>)
    fcfc:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    fcfe:	78fb      	ldrb	r3, [r7, #3]
    fd00:	2220      	movs	r2, #32
    fd02:	409a      	lsls	r2, r3
    fd04:	7bfb      	ldrb	r3, [r7, #15]
    fd06:	4611      	mov	r1, r2
    fd08:	4618      	mov	r0, r3
    fd0a:	4b07      	ldr	r3, [pc, #28]	; (fd28 <_usb_d_dev_ep_stall_set+0x4c>)
    fd0c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    fd0e:	687a      	ldr	r2, [r7, #4]
    fd10:	7cd3      	ldrb	r3, [r2, #19]
    fd12:	f043 0308 	orr.w	r3, r3, #8
    fd16:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    fd18:	2300      	movs	r3, #0
}
    fd1a:	4618      	mov	r0, r3
    fd1c:	3710      	adds	r7, #16
    fd1e:	46bd      	mov	sp, r7
    fd20:	bd80      	pop	{r7, pc}
    fd22:	bf00      	nop
    fd24:	0000e345 	.word	0x0000e345
    fd28:	0000e2c5 	.word	0x0000e2c5

0000fd2c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    fd2c:	b580      	push	{r7, lr}
    fd2e:	b084      	sub	sp, #16
    fd30:	af00      	add	r7, sp, #0
    fd32:	6078      	str	r0, [r7, #4]
    fd34:	460b      	mov	r3, r1
    fd36:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    fd38:	687b      	ldr	r3, [r7, #4]
    fd3a:	7c9b      	ldrb	r3, [r3, #18]
    fd3c:	f003 030f 	and.w	r3, r3, #15
    fd40:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    fd42:	78fa      	ldrb	r2, [r7, #3]
    fd44:	7bfb      	ldrb	r3, [r7, #15]
    fd46:	4611      	mov	r1, r2
    fd48:	4618      	mov	r0, r3
    fd4a:	4b28      	ldr	r3, [pc, #160]	; (fdec <_usb_d_dev_ep_stall_clr+0xc0>)
    fd4c:	4798      	blx	r3
    fd4e:	4603      	mov	r3, r0
    fd50:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    fd52:	7bbb      	ldrb	r3, [r7, #14]
    fd54:	f083 0301 	eor.w	r3, r3, #1
    fd58:	b2db      	uxtb	r3, r3
    fd5a:	2b00      	cmp	r3, #0
    fd5c:	d001      	beq.n	fd62 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    fd5e:	2300      	movs	r3, #0
    fd60:	e040      	b.n	fde4 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    fd62:	78f9      	ldrb	r1, [r7, #3]
    fd64:	7bfb      	ldrb	r3, [r7, #15]
    fd66:	2200      	movs	r2, #0
    fd68:	4618      	mov	r0, r3
    fd6a:	4b21      	ldr	r3, [pc, #132]	; (fdf0 <_usb_d_dev_ep_stall_clr+0xc4>)
    fd6c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    fd6e:	78fb      	ldrb	r3, [r7, #3]
    fd70:	2220      	movs	r2, #32
    fd72:	409a      	lsls	r2, r3
    fd74:	7bfb      	ldrb	r3, [r7, #15]
    fd76:	4611      	mov	r1, r2
    fd78:	4618      	mov	r0, r3
    fd7a:	4b1e      	ldr	r3, [pc, #120]	; (fdf4 <_usb_d_dev_ep_stall_clr+0xc8>)
    fd7c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    fd7e:	78fa      	ldrb	r2, [r7, #3]
    fd80:	7bfb      	ldrb	r3, [r7, #15]
    fd82:	4611      	mov	r1, r2
    fd84:	4618      	mov	r0, r3
    fd86:	4b1c      	ldr	r3, [pc, #112]	; (fdf8 <_usb_d_dev_ep_stall_clr+0xcc>)
    fd88:	4798      	blx	r3
    fd8a:	4603      	mov	r3, r0
    fd8c:	2b00      	cmp	r3, #0
    fd8e:	d00b      	beq.n	fda8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    fd90:	78fa      	ldrb	r2, [r7, #3]
    fd92:	7bfb      	ldrb	r3, [r7, #15]
    fd94:	4611      	mov	r1, r2
    fd96:	4618      	mov	r0, r3
    fd98:	4b18      	ldr	r3, [pc, #96]	; (fdfc <_usb_d_dev_ep_stall_clr+0xd0>)
    fd9a:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    fd9c:	78f9      	ldrb	r1, [r7, #3]
    fd9e:	7bfb      	ldrb	r3, [r7, #15]
    fda0:	2200      	movs	r2, #0
    fda2:	4618      	mov	r0, r3
    fda4:	4b16      	ldr	r3, [pc, #88]	; (fe00 <_usb_d_dev_ep_stall_clr+0xd4>)
    fda6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    fda8:	687b      	ldr	r3, [r7, #4]
    fdaa:	7cdb      	ldrb	r3, [r3, #19]
    fdac:	f003 0307 	and.w	r3, r3, #7
    fdb0:	b2db      	uxtb	r3, r3
    fdb2:	2b01      	cmp	r3, #1
    fdb4:	d110      	bne.n	fdd8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    fdb6:	7bfb      	ldrb	r3, [r7, #15]
    fdb8:	4619      	mov	r1, r3
    fdba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fdbe:	4b11      	ldr	r3, [pc, #68]	; (fe04 <_usb_d_dev_ep_stall_clr+0xd8>)
    fdc0:	4798      	blx	r3
    fdc2:	4603      	mov	r3, r0
    fdc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    fdc8:	2b00      	cmp	r3, #0
    fdca:	d10a      	bne.n	fde2 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    fdcc:	687a      	ldr	r2, [r7, #4]
    fdce:	7cd3      	ldrb	r3, [r2, #19]
    fdd0:	f36f 03c3 	bfc	r3, #3, #1
    fdd4:	74d3      	strb	r3, [r2, #19]
    fdd6:	e004      	b.n	fde2 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    fdd8:	687a      	ldr	r2, [r7, #4]
    fdda:	7cd3      	ldrb	r3, [r2, #19]
    fddc:	f36f 03c3 	bfc	r3, #3, #1
    fde0:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    fde2:	2300      	movs	r3, #0
}
    fde4:	4618      	mov	r0, r3
    fde6:	3710      	adds	r7, #16
    fde8:	46bd      	mov	sp, r7
    fdea:	bd80      	pop	{r7, pc}
    fdec:	0000e39d 	.word	0x0000e39d
    fdf0:	0000e345 	.word	0x0000e345
    fdf4:	0000e2ed 	.word	0x0000e2ed
    fdf8:	0000e3e1 	.word	0x0000e3e1
    fdfc:	0000e425 	.word	0x0000e425
    fe00:	0000e511 	.word	0x0000e511
    fe04:	0000ddcd 	.word	0x0000ddcd

0000fe08 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    fe08:	b580      	push	{r7, lr}
    fe0a:	b086      	sub	sp, #24
    fe0c:	af00      	add	r7, sp, #0
    fe0e:	4603      	mov	r3, r0
    fe10:	460a      	mov	r2, r1
    fe12:	71fb      	strb	r3, [r7, #7]
    fe14:	4613      	mov	r3, r2
    fe16:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    fe18:	79fb      	ldrb	r3, [r7, #7]
    fe1a:	f003 030f 	and.w	r3, r3, #15
    fe1e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    fe20:	79fb      	ldrb	r3, [r7, #7]
    fe22:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fe26:	2b00      	cmp	r3, #0
    fe28:	bf14      	ite	ne
    fe2a:	2301      	movne	r3, #1
    fe2c:	2300      	moveq	r3, #0
    fe2e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    fe30:	7cba      	ldrb	r2, [r7, #18]
    fe32:	7cfb      	ldrb	r3, [r7, #19]
    fe34:	4611      	mov	r1, r2
    fe36:	4618      	mov	r0, r3
    fe38:	4b13      	ldr	r3, [pc, #76]	; (fe88 <_usb_d_dev_ep_stall+0x80>)
    fe3a:	4798      	blx	r3
    fe3c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    fe3e:	7cfb      	ldrb	r3, [r7, #19]
    fe40:	2b04      	cmp	r3, #4
    fe42:	d902      	bls.n	fe4a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    fe44:	f06f 0311 	mvn.w	r3, #17
    fe48:	e01a      	b.n	fe80 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    fe4a:	79bb      	ldrb	r3, [r7, #6]
    fe4c:	2b01      	cmp	r3, #1
    fe4e:	d106      	bne.n	fe5e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    fe50:	7cbb      	ldrb	r3, [r7, #18]
    fe52:	4619      	mov	r1, r3
    fe54:	68f8      	ldr	r0, [r7, #12]
    fe56:	4b0d      	ldr	r3, [pc, #52]	; (fe8c <_usb_d_dev_ep_stall+0x84>)
    fe58:	4798      	blx	r3
    fe5a:	6178      	str	r0, [r7, #20]
    fe5c:	e00f      	b.n	fe7e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    fe5e:	79bb      	ldrb	r3, [r7, #6]
    fe60:	2b00      	cmp	r3, #0
    fe62:	d106      	bne.n	fe72 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    fe64:	7cbb      	ldrb	r3, [r7, #18]
    fe66:	4619      	mov	r1, r3
    fe68:	68f8      	ldr	r0, [r7, #12]
    fe6a:	4b09      	ldr	r3, [pc, #36]	; (fe90 <_usb_d_dev_ep_stall+0x88>)
    fe6c:	4798      	blx	r3
    fe6e:	6178      	str	r0, [r7, #20]
    fe70:	e005      	b.n	fe7e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    fe72:	7cbb      	ldrb	r3, [r7, #18]
    fe74:	4619      	mov	r1, r3
    fe76:	68f8      	ldr	r0, [r7, #12]
    fe78:	4b06      	ldr	r3, [pc, #24]	; (fe94 <_usb_d_dev_ep_stall+0x8c>)
    fe7a:	4798      	blx	r3
    fe7c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    fe7e:	697b      	ldr	r3, [r7, #20]
}
    fe80:	4618      	mov	r0, r3
    fe82:	3718      	adds	r7, #24
    fe84:	46bd      	mov	sp, r7
    fe86:	bd80      	pop	{r7, pc}
    fe88:	0000e8a9 	.word	0x0000e8a9
    fe8c:	0000fcdd 	.word	0x0000fcdd
    fe90:	0000fd2d 	.word	0x0000fd2d
    fe94:	0000fcad 	.word	0x0000fcad

0000fe98 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    fe98:	b580      	push	{r7, lr}
    fe9a:	b082      	sub	sp, #8
    fe9c:	af00      	add	r7, sp, #0
    fe9e:	6078      	str	r0, [r7, #4]
    fea0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    fea2:	687b      	ldr	r3, [r7, #4]
    fea4:	7c9b      	ldrb	r3, [r3, #18]
    fea6:	2bff      	cmp	r3, #255	; 0xff
    fea8:	d014      	beq.n	fed4 <_usb_d_dev_trans_done+0x3c>
    feaa:	687b      	ldr	r3, [r7, #4]
    feac:	7cdb      	ldrb	r3, [r3, #19]
    feae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    feb2:	b2db      	uxtb	r3, r3
    feb4:	2b00      	cmp	r3, #0
    feb6:	d00d      	beq.n	fed4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    feb8:	687a      	ldr	r2, [r7, #4]
    feba:	7cd3      	ldrb	r3, [r2, #19]
    febc:	f36f 1386 	bfc	r3, #6, #1
    fec0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    fec2:	4b06      	ldr	r3, [pc, #24]	; (fedc <_usb_d_dev_trans_done+0x44>)
    fec4:	691b      	ldr	r3, [r3, #16]
    fec6:	687a      	ldr	r2, [r7, #4]
    fec8:	7c90      	ldrb	r0, [r2, #18]
    feca:	687a      	ldr	r2, [r7, #4]
    fecc:	6892      	ldr	r2, [r2, #8]
    fece:	6839      	ldr	r1, [r7, #0]
    fed0:	4798      	blx	r3
    fed2:	e000      	b.n	fed6 <_usb_d_dev_trans_done+0x3e>
		return;
    fed4:	bf00      	nop
}
    fed6:	3708      	adds	r7, #8
    fed8:	46bd      	mov	sp, r7
    feda:	bd80      	pop	{r7, pc}
    fedc:	20008b28 	.word	0x20008b28

0000fee0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    fee0:	b580      	push	{r7, lr}
    fee2:	b086      	sub	sp, #24
    fee4:	af00      	add	r7, sp, #0
    fee6:	60f8      	str	r0, [r7, #12]
    fee8:	460b      	mov	r3, r1
    feea:	607a      	str	r2, [r7, #4]
    feec:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    feee:	68fb      	ldr	r3, [r7, #12]
    fef0:	7c9b      	ldrb	r3, [r3, #18]
    fef2:	f003 030f 	and.w	r3, r3, #15
    fef6:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    fef8:	4b1f      	ldr	r3, [pc, #124]	; (ff78 <_usb_d_dev_trans_stop+0x98>)
    fefa:	881b      	ldrh	r3, [r3, #0]
    fefc:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    fefe:	68fb      	ldr	r3, [r7, #12]
    ff00:	7c9b      	ldrb	r3, [r3, #18]
    ff02:	2bff      	cmp	r3, #255	; 0xff
    ff04:	d033      	beq.n	ff6e <_usb_d_dev_trans_stop+0x8e>
    ff06:	68fb      	ldr	r3, [r7, #12]
    ff08:	7cdb      	ldrb	r3, [r3, #19]
    ff0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ff0e:	b2db      	uxtb	r3, r3
    ff10:	2b00      	cmp	r3, #0
    ff12:	d02c      	beq.n	ff6e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    ff14:	7afb      	ldrb	r3, [r7, #11]
    ff16:	2b00      	cmp	r3, #0
    ff18:	d006      	beq.n	ff28 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    ff1a:	7dfb      	ldrb	r3, [r7, #23]
    ff1c:	2200      	movs	r2, #0
    ff1e:	2101      	movs	r1, #1
    ff20:	4618      	mov	r0, r3
    ff22:	4b16      	ldr	r3, [pc, #88]	; (ff7c <_usb_d_dev_trans_stop+0x9c>)
    ff24:	4798      	blx	r3
    ff26:	e005      	b.n	ff34 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ff28:	7dfb      	ldrb	r3, [r7, #23]
    ff2a:	2200      	movs	r2, #0
    ff2c:	2100      	movs	r1, #0
    ff2e:	4618      	mov	r0, r3
    ff30:	4b13      	ldr	r3, [pc, #76]	; (ff80 <_usb_d_dev_trans_stop+0xa0>)
    ff32:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    ff34:	7afb      	ldrb	r3, [r7, #11]
    ff36:	f107 0218 	add.w	r2, r7, #24
    ff3a:	4413      	add	r3, r2
    ff3c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    ff40:	461a      	mov	r2, r3
    ff42:	7dfb      	ldrb	r3, [r7, #23]
    ff44:	4611      	mov	r1, r2
    ff46:	4618      	mov	r0, r3
    ff48:	4b0e      	ldr	r3, [pc, #56]	; (ff84 <_usb_d_dev_trans_stop+0xa4>)
    ff4a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    ff4c:	7afb      	ldrb	r3, [r7, #11]
    ff4e:	f107 0218 	add.w	r2, r7, #24
    ff52:	4413      	add	r3, r2
    ff54:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    ff58:	461a      	mov	r2, r3
    ff5a:	7dfb      	ldrb	r3, [r7, #23]
    ff5c:	4611      	mov	r1, r2
    ff5e:	4618      	mov	r0, r3
    ff60:	4b09      	ldr	r3, [pc, #36]	; (ff88 <_usb_d_dev_trans_stop+0xa8>)
    ff62:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    ff64:	6879      	ldr	r1, [r7, #4]
    ff66:	68f8      	ldr	r0, [r7, #12]
    ff68:	4b08      	ldr	r3, [pc, #32]	; (ff8c <_usb_d_dev_trans_stop+0xac>)
    ff6a:	4798      	blx	r3
    ff6c:	e000      	b.n	ff70 <_usb_d_dev_trans_stop+0x90>
		return;
    ff6e:	bf00      	nop
}
    ff70:	3718      	adds	r7, #24
    ff72:	46bd      	mov	sp, r7
    ff74:	bd80      	pop	{r7, pc}
    ff76:	bf00      	nop
    ff78:	00020d9c 	.word	0x00020d9c
    ff7c:	0000e795 	.word	0x0000e795
    ff80:	0000e7ed 	.word	0x0000e7ed
    ff84:	0000e29d 	.word	0x0000e29d
    ff88:	0000e2ed 	.word	0x0000e2ed
    ff8c:	0000fe99 	.word	0x0000fe99

0000ff90 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    ff90:	b580      	push	{r7, lr}
    ff92:	b086      	sub	sp, #24
    ff94:	af00      	add	r7, sp, #0
    ff96:	4603      	mov	r3, r0
    ff98:	6039      	str	r1, [r7, #0]
    ff9a:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    ff9c:	79fb      	ldrb	r3, [r7, #7]
    ff9e:	f003 030f 	and.w	r3, r3, #15
    ffa2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    ffa4:	7dfb      	ldrb	r3, [r7, #23]
    ffa6:	015b      	lsls	r3, r3, #5
    ffa8:	4a1e      	ldr	r2, [pc, #120]	; (10024 <STACK_SIZE+0x24>)
    ffaa:	4413      	add	r3, r2
    ffac:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    ffae:	693b      	ldr	r3, [r7, #16]
    ffb0:	681b      	ldr	r3, [r3, #0]
    ffb2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    ffb4:	693b      	ldr	r3, [r7, #16]
    ffb6:	685b      	ldr	r3, [r3, #4]
    ffb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ffbc:	b29b      	uxth	r3, r3
    ffbe:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    ffc0:	7dfb      	ldrb	r3, [r7, #23]
    ffc2:	2b04      	cmp	r3, #4
    ffc4:	d802      	bhi.n	ffcc <_usb_d_dev_ep_read_req+0x3c>
    ffc6:	683b      	ldr	r3, [r7, #0]
    ffc8:	2b00      	cmp	r3, #0
    ffca:	d102      	bne.n	ffd2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    ffcc:	f06f 0311 	mvn.w	r3, #17
    ffd0:	e023      	b.n	1001a <STACK_SIZE+0x1a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    ffd2:	7dfb      	ldrb	r3, [r7, #23]
    ffd4:	4618      	mov	r0, r3
    ffd6:	4b14      	ldr	r3, [pc, #80]	; (10028 <STACK_SIZE+0x28>)
    ffd8:	4798      	blx	r3
    ffda:	4603      	mov	r3, r0
    ffdc:	f083 0301 	eor.w	r3, r3, #1
    ffe0:	b2db      	uxtb	r3, r3
    ffe2:	2b00      	cmp	r3, #0
    ffe4:	d002      	beq.n	ffec <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    ffe6:	f06f 0312 	mvn.w	r3, #18
    ffea:	e016      	b.n	1001a <STACK_SIZE+0x1a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    ffec:	7dfb      	ldrb	r3, [r7, #23]
    ffee:	4618      	mov	r0, r3
    fff0:	4b0e      	ldr	r3, [pc, #56]	; (1002c <STACK_SIZE+0x2c>)
    fff2:	4798      	blx	r3
    fff4:	4603      	mov	r3, r0
    fff6:	f083 0301 	eor.w	r3, r3, #1
    fffa:	b2db      	uxtb	r3, r3
    fffc:	2b00      	cmp	r3, #0
    fffe:	d001      	beq.n	10004 <STACK_SIZE+0x4>
		return ERR_NONE;
   10000:	2300      	movs	r3, #0
   10002:	e00a      	b.n	1001a <STACK_SIZE+0x1a>
	}
	memcpy(req_buf, (void *)addr, 8);
   10004:	68fb      	ldr	r3, [r7, #12]
   10006:	2208      	movs	r2, #8
   10008:	4619      	mov	r1, r3
   1000a:	6838      	ldr	r0, [r7, #0]
   1000c:	4b08      	ldr	r3, [pc, #32]	; (10030 <STACK_SIZE+0x30>)
   1000e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
   10010:	7dfb      	ldrb	r3, [r7, #23]
   10012:	4618      	mov	r0, r3
   10014:	4b07      	ldr	r3, [pc, #28]	; (10034 <STACK_SIZE+0x34>)
   10016:	4798      	blx	r3

	return bytes;
   10018:	897b      	ldrh	r3, [r7, #10]
}
   1001a:	4618      	mov	r0, r3
   1001c:	3718      	adds	r7, #24
   1001e:	46bd      	mov	sp, r7
   10020:	bd80      	pop	{r7, pc}
   10022:	bf00      	nop
   10024:	20008bf0 	.word	0x20008bf0
   10028:	0000e315 	.word	0x0000e315
   1002c:	0000e4c1 	.word	0x0000e4c1
   10030:	0001c4a5 	.word	0x0001c4a5
   10034:	0000e4f1 	.word	0x0000e4f1

00010038 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   10038:	b580      	push	{r7, lr}
   1003a:	b086      	sub	sp, #24
   1003c:	af00      	add	r7, sp, #0
   1003e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   10040:	687b      	ldr	r3, [r7, #4]
   10042:	7a1b      	ldrb	r3, [r3, #8]
   10044:	f003 030f 	and.w	r3, r3, #15
   10048:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   1004a:	687b      	ldr	r3, [r7, #4]
   1004c:	7a1b      	ldrb	r3, [r3, #8]
   1004e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10052:	2b00      	cmp	r3, #0
   10054:	bf14      	ite	ne
   10056:	2301      	movne	r3, #1
   10058:	2300      	moveq	r3, #0
   1005a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   1005c:	7d7a      	ldrb	r2, [r7, #21]
   1005e:	7dbb      	ldrb	r3, [r7, #22]
   10060:	4611      	mov	r1, r2
   10062:	4618      	mov	r0, r3
   10064:	4b5f      	ldr	r3, [pc, #380]	; (101e4 <_usb_d_dev_ep_trans+0x1ac>)
   10066:	4798      	blx	r3
   10068:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1006a:	693b      	ldr	r3, [r7, #16]
   1006c:	8a1b      	ldrh	r3, [r3, #16]
   1006e:	f240 32ff 	movw	r2, #1023	; 0x3ff
   10072:	4293      	cmp	r3, r2
   10074:	d004      	beq.n	10080 <_usb_d_dev_ep_trans+0x48>
   10076:	693b      	ldr	r3, [r7, #16]
   10078:	8a1b      	ldrh	r3, [r3, #16]
   1007a:	3b01      	subs	r3, #1
   1007c:	b29b      	uxth	r3, r3
   1007e:	e001      	b.n	10084 <_usb_d_dev_ep_trans+0x4c>
   10080:	f240 33ff 	movw	r3, #1023	; 0x3ff
   10084:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
   10086:	687b      	ldr	r3, [r7, #4]
   10088:	685a      	ldr	r2, [r3, #4]
   1008a:	89fb      	ldrh	r3, [r7, #14]
   1008c:	4013      	ands	r3, r2
   1008e:	2b00      	cmp	r3, #0
   10090:	bf14      	ite	ne
   10092:	2301      	movne	r3, #1
   10094:	2300      	moveq	r3, #0
   10096:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
   10098:	2300      	movs	r3, #0
   1009a:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   1009c:	7dbb      	ldrb	r3, [r7, #22]
   1009e:	2b04      	cmp	r3, #4
   100a0:	d902      	bls.n	100a8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
   100a2:	f06f 0311 	mvn.w	r3, #17
   100a6:	e098      	b.n	101da <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   100a8:	687b      	ldr	r3, [r7, #4]
   100aa:	681b      	ldr	r3, [r3, #0]
   100ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   100b0:	d31a      	bcc.n	100e8 <_usb_d_dev_ep_trans+0xb0>
   100b2:	687b      	ldr	r3, [r7, #4]
   100b4:	681b      	ldr	r3, [r3, #0]
   100b6:	461a      	mov	r2, r3
   100b8:	687b      	ldr	r3, [r7, #4]
   100ba:	685b      	ldr	r3, [r3, #4]
   100bc:	4413      	add	r3, r2
   100be:	4a4a      	ldr	r2, [pc, #296]	; (101e8 <_usb_d_dev_ep_trans+0x1b0>)
   100c0:	4293      	cmp	r3, r2
   100c2:	d811      	bhi.n	100e8 <_usb_d_dev_ep_trans+0xb0>
   100c4:	687b      	ldr	r3, [r7, #4]
   100c6:	681b      	ldr	r3, [r3, #0]
   100c8:	f003 0303 	and.w	r3, r3, #3
   100cc:	2b00      	cmp	r3, #0
   100ce:	d10b      	bne.n	100e8 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
   100d0:	7d7b      	ldrb	r3, [r7, #21]
   100d2:	f083 0301 	eor.w	r3, r3, #1
   100d6:	b2db      	uxtb	r3, r3
   100d8:	2b00      	cmp	r3, #0
   100da:	d00e      	beq.n	100fa <_usb_d_dev_ep_trans+0xc2>
   100dc:	687b      	ldr	r3, [r7, #4]
   100de:	685b      	ldr	r3, [r3, #4]
   100e0:	693a      	ldr	r2, [r7, #16]
   100e2:	8a12      	ldrh	r2, [r2, #16]
   100e4:	4293      	cmp	r3, r2
   100e6:	d208      	bcs.n	100fa <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
   100e8:	693b      	ldr	r3, [r7, #16]
   100ea:	68db      	ldr	r3, [r3, #12]
   100ec:	2b00      	cmp	r3, #0
   100ee:	d102      	bne.n	100f6 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
   100f0:	f06f 0312 	mvn.w	r3, #18
   100f4:	e071      	b.n	101da <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
   100f6:	2301      	movs	r3, #1
   100f8:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
   100fa:	7d7b      	ldrb	r3, [r7, #21]
   100fc:	f083 0301 	eor.w	r3, r3, #1
   10100:	b2db      	uxtb	r3, r3
   10102:	2b00      	cmp	r3, #0
   10104:	d009      	beq.n	1011a <_usb_d_dev_ep_trans+0xe2>
   10106:	7b7b      	ldrb	r3, [r7, #13]
   10108:	2b00      	cmp	r3, #0
   1010a:	d006      	beq.n	1011a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
   1010c:	693b      	ldr	r3, [r7, #16]
   1010e:	68db      	ldr	r3, [r3, #12]
   10110:	2b00      	cmp	r3, #0
   10112:	d102      	bne.n	1011a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
   10114:	f06f 0311 	mvn.w	r3, #17
   10118:	e05f      	b.n	101da <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   1011a:	693b      	ldr	r3, [r7, #16]
   1011c:	7cdb      	ldrb	r3, [r3, #19]
   1011e:	f003 0308 	and.w	r3, r3, #8
   10122:	b2db      	uxtb	r3, r3
   10124:	2b00      	cmp	r3, #0
   10126:	d001      	beq.n	1012c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
   10128:	2302      	movs	r3, #2
   1012a:	e056      	b.n	101da <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
   1012c:	f107 0308 	add.w	r3, r7, #8
   10130:	4618      	mov	r0, r3
   10132:	4b2e      	ldr	r3, [pc, #184]	; (101ec <_usb_d_dev_ep_trans+0x1b4>)
   10134:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
   10136:	693b      	ldr	r3, [r7, #16]
   10138:	7cdb      	ldrb	r3, [r3, #19]
   1013a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1013e:	b2db      	uxtb	r3, r3
   10140:	2b00      	cmp	r3, #0
   10142:	d006      	beq.n	10152 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
   10144:	f107 0308 	add.w	r3, r7, #8
   10148:	4618      	mov	r0, r3
   1014a:	4b29      	ldr	r3, [pc, #164]	; (101f0 <_usb_d_dev_ep_trans+0x1b8>)
   1014c:	4798      	blx	r3
		return USB_BUSY;
   1014e:	2301      	movs	r3, #1
   10150:	e043      	b.n	101da <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
   10152:	693a      	ldr	r2, [r7, #16]
   10154:	7cd3      	ldrb	r3, [r2, #19]
   10156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1015a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
   1015c:	f107 0308 	add.w	r3, r7, #8
   10160:	4618      	mov	r0, r3
   10162:	4b23      	ldr	r3, [pc, #140]	; (101f0 <_usb_d_dev_ep_trans+0x1b8>)
   10164:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
   10166:	687b      	ldr	r3, [r7, #4]
   10168:	681a      	ldr	r2, [r3, #0]
   1016a:	693b      	ldr	r3, [r7, #16]
   1016c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
   1016e:	687b      	ldr	r3, [r7, #4]
   10170:	685a      	ldr	r2, [r3, #4]
   10172:	693b      	ldr	r3, [r7, #16]
   10174:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
   10176:	693b      	ldr	r3, [r7, #16]
   10178:	2200      	movs	r2, #0
   1017a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
   1017c:	693a      	ldr	r2, [r7, #16]
   1017e:	7cd3      	ldrb	r3, [r2, #19]
   10180:	7d79      	ldrb	r1, [r7, #21]
   10182:	f361 13c7 	bfi	r3, r1, #7, #1
   10186:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
   10188:	693a      	ldr	r2, [r7, #16]
   1018a:	7cd3      	ldrb	r3, [r2, #19]
   1018c:	7df9      	ldrb	r1, [r7, #23]
   1018e:	f361 1345 	bfi	r3, r1, #5, #1
   10192:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   10194:	687b      	ldr	r3, [r7, #4]
   10196:	7a5b      	ldrb	r3, [r3, #9]
   10198:	2b00      	cmp	r3, #0
   1019a:	d007      	beq.n	101ac <_usb_d_dev_ep_trans+0x174>
   1019c:	7b7b      	ldrb	r3, [r7, #13]
   1019e:	f083 0301 	eor.w	r3, r3, #1
   101a2:	b2db      	uxtb	r3, r3
   101a4:	2b00      	cmp	r3, #0
   101a6:	d001      	beq.n	101ac <_usb_d_dev_ep_trans+0x174>
   101a8:	2301      	movs	r3, #1
   101aa:	e000      	b.n	101ae <_usb_d_dev_ep_trans+0x176>
   101ac:	2300      	movs	r3, #0
   101ae:	b2db      	uxtb	r3, r3
   101b0:	f003 0301 	and.w	r3, r3, #1
   101b4:	b2d9      	uxtb	r1, r3
   101b6:	693a      	ldr	r2, [r7, #16]
   101b8:	7cd3      	ldrb	r3, [r2, #19]
   101ba:	f361 1304 	bfi	r3, r1, #4, #1
   101be:	74d3      	strb	r3, [r2, #19]

	if (dir) {
   101c0:	7d7b      	ldrb	r3, [r7, #21]
   101c2:	2b00      	cmp	r3, #0
   101c4:	d004      	beq.n	101d0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
   101c6:	2100      	movs	r1, #0
   101c8:	6938      	ldr	r0, [r7, #16]
   101ca:	4b0a      	ldr	r3, [pc, #40]	; (101f4 <_usb_d_dev_ep_trans+0x1bc>)
   101cc:	4798      	blx	r3
   101ce:	e003      	b.n	101d8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
   101d0:	2100      	movs	r1, #0
   101d2:	6938      	ldr	r0, [r7, #16]
   101d4:	4b08      	ldr	r3, [pc, #32]	; (101f8 <_usb_d_dev_ep_trans+0x1c0>)
   101d6:	4798      	blx	r3
	}

	return ERR_NONE;
   101d8:	2300      	movs	r3, #0
}
   101da:	4618      	mov	r0, r3
   101dc:	3718      	adds	r7, #24
   101de:	46bd      	mov	sp, r7
   101e0:	bd80      	pop	{r7, pc}
   101e2:	bf00      	nop
   101e4:	0000e8a9 	.word	0x0000e8a9
   101e8:	20041fff 	.word	0x20041fff
   101ec:	00010c85 	.word	0x00010c85
   101f0:	00010cab 	.word	0x00010cab
   101f4:	0000eb71 	.word	0x0000eb71
   101f8:	0000ed89 	.word	0x0000ed89

000101fc <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   101fc:	b580      	push	{r7, lr}
   101fe:	b084      	sub	sp, #16
   10200:	af00      	add	r7, sp, #0
   10202:	4603      	mov	r3, r0
   10204:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
   10206:	79fb      	ldrb	r3, [r7, #7]
   10208:	f003 030f 	and.w	r3, r3, #15
   1020c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
   1020e:	79fb      	ldrb	r3, [r7, #7]
   10210:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10214:	2b00      	cmp	r3, #0
   10216:	bf14      	ite	ne
   10218:	2301      	movne	r3, #1
   1021a:	2300      	moveq	r3, #0
   1021c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   1021e:	7bba      	ldrb	r2, [r7, #14]
   10220:	7bfb      	ldrb	r3, [r7, #15]
   10222:	4611      	mov	r1, r2
   10224:	4618      	mov	r0, r3
   10226:	4b08      	ldr	r3, [pc, #32]	; (10248 <_usb_d_dev_ep_abort+0x4c>)
   10228:	4798      	blx	r3
   1022a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
   1022c:	7bfb      	ldrb	r3, [r7, #15]
   1022e:	2b04      	cmp	r3, #4
   10230:	d806      	bhi.n	10240 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
   10232:	7bbb      	ldrb	r3, [r7, #14]
   10234:	2202      	movs	r2, #2
   10236:	4619      	mov	r1, r3
   10238:	68b8      	ldr	r0, [r7, #8]
   1023a:	4b04      	ldr	r3, [pc, #16]	; (1024c <_usb_d_dev_ep_abort+0x50>)
   1023c:	4798      	blx	r3
   1023e:	e000      	b.n	10242 <_usb_d_dev_ep_abort+0x46>
		return;
   10240:	bf00      	nop
}
   10242:	3710      	adds	r7, #16
   10244:	46bd      	mov	sp, r7
   10246:	bd80      	pop	{r7, pc}
   10248:	0000e8a9 	.word	0x0000e8a9
   1024c:	0000fee1 	.word	0x0000fee1

00010250 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
   10250:	b480      	push	{r7}
   10252:	b085      	sub	sp, #20
   10254:	af00      	add	r7, sp, #0
   10256:	4603      	mov	r3, r0
   10258:	6039      	str	r1, [r7, #0]
   1025a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   1025c:	683b      	ldr	r3, [r7, #0]
   1025e:	2b00      	cmp	r3, #0
   10260:	d001      	beq.n	10266 <_usb_d_dev_register_callback+0x16>
   10262:	683b      	ldr	r3, [r7, #0]
   10264:	e000      	b.n	10268 <_usb_d_dev_register_callback+0x18>
   10266:	4b0a      	ldr	r3, [pc, #40]	; (10290 <_usb_d_dev_register_callback+0x40>)
   10268:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
   1026a:	79fb      	ldrb	r3, [r7, #7]
   1026c:	2b01      	cmp	r3, #1
   1026e:	d103      	bne.n	10278 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   10270:	4a08      	ldr	r2, [pc, #32]	; (10294 <_usb_d_dev_register_callback+0x44>)
   10272:	68fb      	ldr	r3, [r7, #12]
   10274:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
   10276:	e005      	b.n	10284 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
   10278:	79fb      	ldrb	r3, [r7, #7]
   1027a:	2b00      	cmp	r3, #0
   1027c:	d102      	bne.n	10284 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   1027e:	4a05      	ldr	r2, [pc, #20]	; (10294 <_usb_d_dev_register_callback+0x44>)
   10280:	68fb      	ldr	r3, [r7, #12]
   10282:	6013      	str	r3, [r2, #0]
}
   10284:	bf00      	nop
   10286:	3714      	adds	r7, #20
   10288:	46bd      	mov	sp, r7
   1028a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1028e:	4770      	bx	lr
   10290:	0000e131 	.word	0x0000e131
   10294:	20008b28 	.word	0x20008b28

00010298 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
   10298:	b480      	push	{r7}
   1029a:	b085      	sub	sp, #20
   1029c:	af00      	add	r7, sp, #0
   1029e:	4603      	mov	r3, r0
   102a0:	6039      	str	r1, [r7, #0]
   102a2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   102a4:	683b      	ldr	r3, [r7, #0]
   102a6:	2b00      	cmp	r3, #0
   102a8:	d001      	beq.n	102ae <_usb_d_dev_register_ep_callback+0x16>
   102aa:	683b      	ldr	r3, [r7, #0]
   102ac:	e000      	b.n	102b0 <_usb_d_dev_register_ep_callback+0x18>
   102ae:	4b0e      	ldr	r3, [pc, #56]	; (102e8 <_usb_d_dev_register_ep_callback+0x50>)
   102b0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
   102b2:	79fb      	ldrb	r3, [r7, #7]
   102b4:	2b00      	cmp	r3, #0
   102b6:	d103      	bne.n	102c0 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   102b8:	4a0c      	ldr	r2, [pc, #48]	; (102ec <_usb_d_dev_register_ep_callback+0x54>)
   102ba:	68fb      	ldr	r3, [r7, #12]
   102bc:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
   102be:	e00c      	b.n	102da <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   102c0:	79fb      	ldrb	r3, [r7, #7]
   102c2:	2b01      	cmp	r3, #1
   102c4:	d103      	bne.n	102ce <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   102c6:	4a09      	ldr	r2, [pc, #36]	; (102ec <_usb_d_dev_register_ep_callback+0x54>)
   102c8:	68fb      	ldr	r3, [r7, #12]
   102ca:	60d3      	str	r3, [r2, #12]
}
   102cc:	e005      	b.n	102da <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   102ce:	79fb      	ldrb	r3, [r7, #7]
   102d0:	2b02      	cmp	r3, #2
   102d2:	d102      	bne.n	102da <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   102d4:	4a05      	ldr	r2, [pc, #20]	; (102ec <_usb_d_dev_register_ep_callback+0x54>)
   102d6:	68fb      	ldr	r3, [r7, #12]
   102d8:	6113      	str	r3, [r2, #16]
}
   102da:	bf00      	nop
   102dc:	3714      	adds	r7, #20
   102de:	46bd      	mov	sp, r7
   102e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   102e4:	4770      	bx	lr
   102e6:	bf00      	nop
   102e8:	0000e131 	.word	0x0000e131
   102ec:	20008b28 	.word	0x20008b28

000102f0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
   102f0:	b580      	push	{r7, lr}
   102f2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   102f4:	4b01      	ldr	r3, [pc, #4]	; (102fc <USB_0_Handler+0xc>)
   102f6:	4798      	blx	r3
}
   102f8:	bf00      	nop
   102fa:	bd80      	pop	{r7, pc}
   102fc:	0000f561 	.word	0x0000f561

00010300 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
   10300:	b580      	push	{r7, lr}
   10302:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   10304:	4b01      	ldr	r3, [pc, #4]	; (1030c <USB_1_Handler+0xc>)
   10306:	4798      	blx	r3
}
   10308:	bf00      	nop
   1030a:	bd80      	pop	{r7, pc}
   1030c:	0000f561 	.word	0x0000f561

00010310 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
   10310:	b580      	push	{r7, lr}
   10312:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   10314:	4b01      	ldr	r3, [pc, #4]	; (1031c <USB_2_Handler+0xc>)
   10316:	4798      	blx	r3
}
   10318:	bf00      	nop
   1031a:	bd80      	pop	{r7, pc}
   1031c:	0000f561 	.word	0x0000f561

00010320 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
   10320:	b580      	push	{r7, lr}
   10322:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   10324:	4b01      	ldr	r3, [pc, #4]	; (1032c <USB_3_Handler+0xc>)
   10326:	4798      	blx	r3
}
   10328:	bf00      	nop
   1032a:	bd80      	pop	{r7, pc}
   1032c:	0000f561 	.word	0x0000f561

00010330 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
   10330:	b480      	push	{r7}
   10332:	b083      	sub	sp, #12
   10334:	af00      	add	r7, sp, #0
   10336:	6078      	str	r0, [r7, #4]
   10338:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
   1033a:	bf00      	nop
   1033c:	687b      	ldr	r3, [r7, #4]
   1033e:	689a      	ldr	r2, [r3, #8]
   10340:	683b      	ldr	r3, [r7, #0]
   10342:	4013      	ands	r3, r2
   10344:	2b00      	cmp	r3, #0
   10346:	d1f9      	bne.n	1033c <hri_wdt_wait_for_sync+0xc>
	};
}
   10348:	bf00      	nop
   1034a:	370c      	adds	r7, #12
   1034c:	46bd      	mov	sp, r7
   1034e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10352:	4770      	bx	lr

00010354 <hri_wdt_set_CTRLA_ENABLE_bit>:
{
	return ((Wdt *)hw)->SYNCBUSY.reg;
}

static inline void hri_wdt_set_CTRLA_ENABLE_bit(const void *const hw)
{
   10354:	b580      	push	{r7, lr}
   10356:	b082      	sub	sp, #8
   10358:	af00      	add	r7, sp, #0
   1035a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
   1035c:	687b      	ldr	r3, [r7, #4]
   1035e:	781b      	ldrb	r3, [r3, #0]
   10360:	b2db      	uxtb	r3, r3
   10362:	f043 0302 	orr.w	r3, r3, #2
   10366:	b2da      	uxtb	r2, r3
   10368:	687b      	ldr	r3, [r7, #4]
   1036a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   1036c:	210e      	movs	r1, #14
   1036e:	6878      	ldr	r0, [r7, #4]
   10370:	4b02      	ldr	r3, [pc, #8]	; (1037c <hri_wdt_set_CTRLA_ENABLE_bit+0x28>)
   10372:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   10374:	bf00      	nop
   10376:	3708      	adds	r7, #8
   10378:	46bd      	mov	sp, r7
   1037a:	bd80      	pop	{r7, pc}
   1037c:	00010331 	.word	0x00010331

00010380 <hri_wdt_get_CTRLA_ENABLE_bit>:

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
   10380:	b580      	push	{r7, lr}
   10382:	b084      	sub	sp, #16
   10384:	af00      	add	r7, sp, #0
   10386:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   10388:	210e      	movs	r1, #14
   1038a:	6878      	ldr	r0, [r7, #4]
   1038c:	4b0a      	ldr	r3, [pc, #40]	; (103b8 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
   1038e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   10390:	687b      	ldr	r3, [r7, #4]
   10392:	781b      	ldrb	r3, [r3, #0]
   10394:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
   10396:	7bfb      	ldrb	r3, [r7, #15]
   10398:	085b      	lsrs	r3, r3, #1
   1039a:	b2db      	uxtb	r3, r3
   1039c:	f003 0301 	and.w	r3, r3, #1
   103a0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   103a2:	7bfb      	ldrb	r3, [r7, #15]
   103a4:	2b00      	cmp	r3, #0
   103a6:	bf14      	ite	ne
   103a8:	2301      	movne	r3, #1
   103aa:	2300      	moveq	r3, #0
   103ac:	b2db      	uxtb	r3, r3
}
   103ae:	4618      	mov	r0, r3
   103b0:	3710      	adds	r7, #16
   103b2:	46bd      	mov	sp, r7
   103b4:	bd80      	pop	{r7, pc}
   103b6:	bf00      	nop
   103b8:	00010331 	.word	0x00010331

000103bc <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
   103bc:	b580      	push	{r7, lr}
   103be:	b082      	sub	sp, #8
   103c0:	af00      	add	r7, sp, #0
   103c2:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
   103c4:	687b      	ldr	r3, [r7, #4]
   103c6:	781b      	ldrb	r3, [r3, #0]
   103c8:	b2db      	uxtb	r3, r3
   103ca:	f023 0304 	bic.w	r3, r3, #4
   103ce:	b2da      	uxtb	r2, r3
   103d0:	687b      	ldr	r3, [r7, #4]
   103d2:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   103d4:	210e      	movs	r1, #14
   103d6:	6878      	ldr	r0, [r7, #4]
   103d8:	4b02      	ldr	r3, [pc, #8]	; (103e4 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
   103da:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   103dc:	bf00      	nop
   103de:	3708      	adds	r7, #8
   103e0:	46bd      	mov	sp, r7
   103e2:	bd80      	pop	{r7, pc}
   103e4:	00010331 	.word	0x00010331

000103e8 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
   103e8:	b580      	push	{r7, lr}
   103ea:	b084      	sub	sp, #16
   103ec:	af00      	add	r7, sp, #0
   103ee:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   103f0:	210e      	movs	r1, #14
   103f2:	6878      	ldr	r0, [r7, #4]
   103f4:	4b08      	ldr	r3, [pc, #32]	; (10418 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
   103f6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   103f8:	687b      	ldr	r3, [r7, #4]
   103fa:	781b      	ldrb	r3, [r3, #0]
   103fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
   103fe:	7bfb      	ldrb	r3, [r7, #15]
   10400:	09db      	lsrs	r3, r3, #7
   10402:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   10404:	7bfb      	ldrb	r3, [r7, #15]
   10406:	2b00      	cmp	r3, #0
   10408:	bf14      	ite	ne
   1040a:	2301      	movne	r3, #1
   1040c:	2300      	moveq	r3, #0
   1040e:	b2db      	uxtb	r3, r3
}
   10410:	4618      	mov	r0, r3
   10412:	3710      	adds	r7, #16
   10414:	46bd      	mov	sp, r7
   10416:	bd80      	pop	{r7, pc}
   10418:	00010331 	.word	0x00010331

0001041c <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
   1041c:	b480      	push	{r7}
   1041e:	b085      	sub	sp, #20
   10420:	af00      	add	r7, sp, #0
   10422:	6078      	str	r0, [r7, #4]
   10424:	460b      	mov	r3, r1
   10426:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
   10428:	687b      	ldr	r3, [r7, #4]
   1042a:	785b      	ldrb	r3, [r3, #1]
   1042c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
   1042e:	7bfb      	ldrb	r3, [r7, #15]
   10430:	f023 030f 	bic.w	r3, r3, #15
   10434:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
   10436:	78fb      	ldrb	r3, [r7, #3]
   10438:	f003 030f 	and.w	r3, r3, #15
   1043c:	b2da      	uxtb	r2, r3
   1043e:	7bfb      	ldrb	r3, [r7, #15]
   10440:	4313      	orrs	r3, r2
   10442:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
   10444:	687b      	ldr	r3, [r7, #4]
   10446:	7bfa      	ldrb	r2, [r7, #15]
   10448:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
   1044a:	bf00      	nop
   1044c:	3714      	adds	r7, #20
   1044e:	46bd      	mov	sp, r7
   10450:	f85d 7b04 	ldr.w	r7, [sp], #4
   10454:	4770      	bx	lr
	...

00010458 <hri_wdt_write_CLEAR_reg>:
{
	return ((Wdt *)hw)->EWCTRL.reg;
}

static inline void hri_wdt_write_CLEAR_reg(const void *const hw, hri_wdt_clear_reg_t data)
{
   10458:	b580      	push	{r7, lr}
   1045a:	b082      	sub	sp, #8
   1045c:	af00      	add	r7, sp, #0
   1045e:	6078      	str	r0, [r7, #4]
   10460:	460b      	mov	r3, r1
   10462:	70fb      	strb	r3, [r7, #3]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CLEAR.reg = data;
   10464:	687b      	ldr	r3, [r7, #4]
   10466:	78fa      	ldrb	r2, [r7, #3]
   10468:	731a      	strb	r2, [r3, #12]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_CLEAR);
   1046a:	2110      	movs	r1, #16
   1046c:	6878      	ldr	r0, [r7, #4]
   1046e:	4b03      	ldr	r3, [pc, #12]	; (1047c <hri_wdt_write_CLEAR_reg+0x24>)
   10470:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   10472:	bf00      	nop
   10474:	3708      	adds	r7, #8
   10476:	46bd      	mov	sp, r7
   10478:	bd80      	pop	{r7, pc}
   1047a:	bf00      	nop
   1047c:	00010331 	.word	0x00010331

00010480 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
   10480:	b580      	push	{r7, lr}
   10482:	b082      	sub	sp, #8
   10484:	af00      	add	r7, sp, #0
   10486:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   10488:	687b      	ldr	r3, [r7, #4]
   1048a:	2b00      	cmp	r3, #0
   1048c:	d005      	beq.n	1049a <_wdt_init+0x1a>
   1048e:	687b      	ldr	r3, [r7, #4]
   10490:	681b      	ldr	r3, [r3, #0]
   10492:	2b00      	cmp	r3, #0
   10494:	d001      	beq.n	1049a <_wdt_init+0x1a>
   10496:	2301      	movs	r3, #1
   10498:	e000      	b.n	1049c <_wdt_init+0x1c>
   1049a:	2300      	movs	r3, #0
   1049c:	f003 0301 	and.w	r3, r3, #1
   104a0:	b2db      	uxtb	r3, r3
   104a2:	2250      	movs	r2, #80	; 0x50
   104a4:	4913      	ldr	r1, [pc, #76]	; (104f4 <_wdt_init+0x74>)
   104a6:	4618      	mov	r0, r3
   104a8:	4b13      	ldr	r3, [pc, #76]	; (104f8 <_wdt_init+0x78>)
   104aa:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
   104ac:	687b      	ldr	r3, [r7, #4]
   104ae:	681b      	ldr	r3, [r3, #0]
   104b0:	4618      	mov	r0, r3
   104b2:	4b12      	ldr	r3, [pc, #72]	; (104fc <_wdt_init+0x7c>)
   104b4:	4798      	blx	r3
   104b6:	4603      	mov	r3, r0
   104b8:	2b00      	cmp	r3, #0
   104ba:	d107      	bne.n	104cc <_wdt_init+0x4c>
   104bc:	687b      	ldr	r3, [r7, #4]
   104be:	681b      	ldr	r3, [r3, #0]
   104c0:	4618      	mov	r0, r3
   104c2:	4b0f      	ldr	r3, [pc, #60]	; (10500 <_wdt_init+0x80>)
   104c4:	4798      	blx	r3
   104c6:	4603      	mov	r3, r0
   104c8:	2b00      	cmp	r3, #0
   104ca:	d002      	beq.n	104d2 <_wdt_init+0x52>
		return ERR_DENIED;
   104cc:	f06f 0310 	mvn.w	r3, #16
   104d0:	e00b      	b.n	104ea <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
   104d2:	687b      	ldr	r3, [r7, #4]
   104d4:	681b      	ldr	r3, [r3, #0]
   104d6:	4618      	mov	r0, r3
   104d8:	4b0a      	ldr	r3, [pc, #40]	; (10504 <_wdt_init+0x84>)
   104da:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
   104dc:	687b      	ldr	r3, [r7, #4]
   104de:	681b      	ldr	r3, [r3, #0]
   104e0:	210b      	movs	r1, #11
   104e2:	4618      	mov	r0, r3
   104e4:	4b08      	ldr	r3, [pc, #32]	; (10508 <_wdt_init+0x88>)
   104e6:	4798      	blx	r3
	}

	return ERR_NONE;
   104e8:	2300      	movs	r3, #0
}
   104ea:	4618      	mov	r0, r3
   104ec:	3708      	adds	r7, #8
   104ee:	46bd      	mov	sp, r7
   104f0:	bd80      	pop	{r7, pc}
   104f2:	bf00      	nop
   104f4:	00020da0 	.word	0x00020da0
   104f8:	000080d1 	.word	0x000080d1
   104fc:	000103e9 	.word	0x000103e9
   10500:	00010381 	.word	0x00010381
   10504:	000103bd 	.word	0x000103bd
   10508:	0001041d 	.word	0x0001041d

0001050c <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
   1050c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1050e:	b08b      	sub	sp, #44	; 0x2c
   10510:	af00      	add	r7, sp, #0
   10512:	60f8      	str	r0, [r7, #12]
   10514:	60b9      	str	r1, [r7, #8]
   10516:	4613      	mov	r3, r2
   10518:	80fb      	strh	r3, [r7, #6]
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   1051a:	68fb      	ldr	r3, [r7, #12]
   1051c:	2b00      	cmp	r3, #0
   1051e:	d005      	beq.n	1052c <_wdt_set_timeout_period+0x20>
   10520:	68fb      	ldr	r3, [r7, #12]
   10522:	681b      	ldr	r3, [r3, #0]
   10524:	2b00      	cmp	r3, #0
   10526:	d001      	beq.n	1052c <_wdt_set_timeout_period+0x20>
   10528:	2301      	movs	r3, #1
   1052a:	e000      	b.n	1052e <_wdt_set_timeout_period+0x22>
   1052c:	2300      	movs	r3, #0
   1052e:	f003 0301 	and.w	r3, r3, #1
   10532:	b2db      	uxtb	r3, r3
   10534:	227a      	movs	r2, #122	; 0x7a
   10536:	4954      	ldr	r1, [pc, #336]	; (10688 <_wdt_set_timeout_period+0x17c>)
   10538:	4618      	mov	r0, r3
   1053a:	4b54      	ldr	r3, [pc, #336]	; (1068c <_wdt_set_timeout_period+0x180>)
   1053c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
   1053e:	68fb      	ldr	r3, [r7, #12]
   10540:	681b      	ldr	r3, [r3, #0]
   10542:	4618      	mov	r0, r3
   10544:	4b52      	ldr	r3, [pc, #328]	; (10690 <_wdt_set_timeout_period+0x184>)
   10546:	4798      	blx	r3
   10548:	4603      	mov	r3, r0
   1054a:	2b00      	cmp	r3, #0
   1054c:	d107      	bne.n	1055e <_wdt_set_timeout_period+0x52>
   1054e:	68fb      	ldr	r3, [r7, #12]
   10550:	681b      	ldr	r3, [r3, #0]
   10552:	4618      	mov	r0, r3
   10554:	4b4f      	ldr	r3, [pc, #316]	; (10694 <_wdt_set_timeout_period+0x188>)
   10556:	4798      	blx	r3
   10558:	4603      	mov	r3, r0
   1055a:	2b00      	cmp	r3, #0
   1055c:	d002      	beq.n	10564 <_wdt_set_timeout_period+0x58>
		return ERR_DENIED;
   1055e:	f06f 0310 	mvn.w	r3, #16
   10562:	e08c      	b.n	1067e <_wdt_set_timeout_period+0x172>
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
   10564:	88f9      	ldrh	r1, [r7, #6]
   10566:	f04f 0200 	mov.w	r2, #0
   1056a:	68bb      	ldr	r3, [r7, #8]
   1056c:	f04f 0400 	mov.w	r4, #0
   10570:	fb03 fe02 	mul.w	lr, r3, r2
   10574:	fb01 f004 	mul.w	r0, r1, r4
   10578:	4470      	add	r0, lr
   1057a:	fba1 3403 	umull	r3, r4, r1, r3
   1057e:	1902      	adds	r2, r0, r4
   10580:	4614      	mov	r4, r2
   10582:	e9c7 3406 	strd	r3, r4, [r7, #24]
   10586:	e9c7 3406 	strd	r3, r4, [r7, #24]

		/* check whether overflow*/
		if (tmp >> 32) {
   1058a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1058e:	0025      	movs	r5, r4
   10590:	2600      	movs	r6, #0
   10592:	ea55 0306 	orrs.w	r3, r5, r6
   10596:	d002      	beq.n	1059e <_wdt_set_timeout_period+0x92>
			return ERR_INVALID_ARG;
   10598:	f06f 030c 	mvn.w	r3, #12
   1059c:	e06f      	b.n	1067e <_wdt_set_timeout_period+0x172>
		}

		period_cycles = (uint32_t)tmp;
   1059e:	69bb      	ldr	r3, [r7, #24]
   105a0:	617b      	str	r3, [r7, #20]
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
   105a2:	697b      	ldr	r3, [r7, #20]
   105a4:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
   105a8:	d041      	beq.n	1062e <_wdt_set_timeout_period+0x122>
   105aa:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
   105ae:	d813      	bhi.n	105d8 <_wdt_set_timeout_period+0xcc>
   105b0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   105b4:	d02f      	beq.n	10616 <_wdt_set_timeout_period+0x10a>
   105b6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   105ba:	d806      	bhi.n	105ca <_wdt_set_timeout_period+0xbe>
   105bc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   105c0:	d021      	beq.n	10606 <_wdt_set_timeout_period+0xfa>
   105c2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   105c6:	d022      	beq.n	1060e <_wdt_set_timeout_period+0x102>
   105c8:	e04d      	b.n	10666 <_wdt_set_timeout_period+0x15a>
   105ca:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
   105ce:	d026      	beq.n	1061e <_wdt_set_timeout_period+0x112>
   105d0:	f5b3 3ffa 	cmp.w	r3, #128000	; 0x1f400
   105d4:	d027      	beq.n	10626 <_wdt_set_timeout_period+0x11a>
   105d6:	e046      	b.n	10666 <_wdt_set_timeout_period+0x15a>
   105d8:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
   105dc:	d033      	beq.n	10646 <_wdt_set_timeout_period+0x13a>
   105de:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
   105e2:	d806      	bhi.n	105f2 <_wdt_set_timeout_period+0xe6>
   105e4:	f5b3 2ffa 	cmp.w	r3, #512000	; 0x7d000
   105e8:	d025      	beq.n	10636 <_wdt_set_timeout_period+0x12a>
   105ea:	f5b3 2f7a 	cmp.w	r3, #1024000	; 0xfa000
   105ee:	d026      	beq.n	1063e <_wdt_set_timeout_period+0x132>
   105f0:	e039      	b.n	10666 <_wdt_set_timeout_period+0x15a>
   105f2:	f5b3 0ffa 	cmp.w	r3, #8192000	; 0x7d0000
   105f6:	d02e      	beq.n	10656 <_wdt_set_timeout_period+0x14a>
   105f8:	f5b3 0f7a 	cmp.w	r3, #16384000	; 0xfa0000
   105fc:	d02f      	beq.n	1065e <_wdt_set_timeout_period+0x152>
   105fe:	f5b3 1f7a 	cmp.w	r3, #4096000	; 0x3e8000
   10602:	d024      	beq.n	1064e <_wdt_set_timeout_period+0x142>
   10604:	e02f      	b.n	10666 <_wdt_set_timeout_period+0x15a>
		case WDT_CLK_8CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8CYCLE;
   10606:	2300      	movs	r3, #0
   10608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1060c:	e02e      	b.n	1066c <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16CYCLE;
   1060e:	2301      	movs	r3, #1
   10610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   10614:	e02a      	b.n	1066c <_wdt_set_timeout_period+0x160>
		case WDT_CLK_32CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_32CYCLE;
   10616:	2302      	movs	r3, #2
   10618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1061c:	e026      	b.n	1066c <_wdt_set_timeout_period+0x160>
		case WDT_CLK_64CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_64CYCLE;
   1061e:	2303      	movs	r3, #3
   10620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   10624:	e022      	b.n	1066c <_wdt_set_timeout_period+0x160>
		case WDT_CLK_128CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_128CYCLE;
   10626:	2304      	movs	r3, #4
   10628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1062c:	e01e      	b.n	1066c <_wdt_set_timeout_period+0x160>
		case WDT_CLK_256CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_256CYCLE;
   1062e:	2305      	movs	r3, #5
   10630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   10634:	e01a      	b.n	1066c <_wdt_set_timeout_period+0x160>
		case WDT_CLK_512CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_512CYCLE;
   10636:	2306      	movs	r3, #6
   10638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1063c:	e016      	b.n	1066c <_wdt_set_timeout_period+0x160>
		case WDT_CLK_1024CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
   1063e:	2307      	movs	r3, #7
   10640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   10644:	e012      	b.n	1066c <_wdt_set_timeout_period+0x160>
		case WDT_CLK_2048CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
   10646:	2308      	movs	r3, #8
   10648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1064c:	e00e      	b.n	1066c <_wdt_set_timeout_period+0x160>
		case WDT_CLK_4096CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
   1064e:	2309      	movs	r3, #9
   10650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   10654:	e00a      	b.n	1066c <_wdt_set_timeout_period+0x160>
		case WDT_CLK_8192CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
   10656:	230a      	movs	r3, #10
   10658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1065c:	e006      	b.n	1066c <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
   1065e:	230b      	movs	r3, #11
   10660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   10664:	e002      	b.n	1066c <_wdt_set_timeout_period+0x160>
		default:
			return ERR_INVALID_ARG;
   10666:	f06f 030c 	mvn.w	r3, #12
   1066a:	e008      	b.n	1067e <_wdt_set_timeout_period+0x172>
		}
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);
   1066c:	68fb      	ldr	r3, [r7, #12]
   1066e:	681b      	ldr	r3, [r3, #0]
   10670:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   10674:	4611      	mov	r1, r2
   10676:	4618      	mov	r0, r3
   10678:	4b07      	ldr	r3, [pc, #28]	; (10698 <_wdt_set_timeout_period+0x18c>)
   1067a:	4798      	blx	r3

	return ERR_NONE;
   1067c:	2300      	movs	r3, #0
}
   1067e:	4618      	mov	r0, r3
   10680:	372c      	adds	r7, #44	; 0x2c
   10682:	46bd      	mov	sp, r7
   10684:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10686:	bf00      	nop
   10688:	00020da0 	.word	0x00020da0
   1068c:	000080d1 	.word	0x000080d1
   10690:	000103e9 	.word	0x000103e9
   10694:	00010381 	.word	0x00010381
   10698:	0001041d 	.word	0x0001041d

0001069c <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
   1069c:	b580      	push	{r7, lr}
   1069e:	b082      	sub	sp, #8
   106a0:	af00      	add	r7, sp, #0
   106a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   106a4:	687b      	ldr	r3, [r7, #4]
   106a6:	2b00      	cmp	r3, #0
   106a8:	d005      	beq.n	106b6 <_wdt_enable+0x1a>
   106aa:	687b      	ldr	r3, [r7, #4]
   106ac:	681b      	ldr	r3, [r3, #0]
   106ae:	2b00      	cmp	r3, #0
   106b0:	d001      	beq.n	106b6 <_wdt_enable+0x1a>
   106b2:	2301      	movs	r3, #1
   106b4:	e000      	b.n	106b8 <_wdt_enable+0x1c>
   106b6:	2300      	movs	r3, #0
   106b8:	f003 0301 	and.w	r3, r3, #1
   106bc:	b2db      	uxtb	r3, r3
   106be:	22fb      	movs	r2, #251	; 0xfb
   106c0:	4906      	ldr	r1, [pc, #24]	; (106dc <_wdt_enable+0x40>)
   106c2:	4618      	mov	r0, r3
   106c4:	4b06      	ldr	r3, [pc, #24]	; (106e0 <_wdt_enable+0x44>)
   106c6:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
   106c8:	687b      	ldr	r3, [r7, #4]
   106ca:	681b      	ldr	r3, [r3, #0]
   106cc:	4618      	mov	r0, r3
   106ce:	4b05      	ldr	r3, [pc, #20]	; (106e4 <_wdt_enable+0x48>)
   106d0:	4798      	blx	r3

	return ERR_NONE;
   106d2:	2300      	movs	r3, #0
}
   106d4:	4618      	mov	r0, r3
   106d6:	3708      	adds	r7, #8
   106d8:	46bd      	mov	sp, r7
   106da:	bd80      	pop	{r7, pc}
   106dc:	00020da0 	.word	0x00020da0
   106e0:	000080d1 	.word	0x000080d1
   106e4:	00010355 	.word	0x00010355

000106e8 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
   106e8:	b580      	push	{r7, lr}
   106ea:	b082      	sub	sp, #8
   106ec:	af00      	add	r7, sp, #0
   106ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   106f0:	687b      	ldr	r3, [r7, #4]
   106f2:	2b00      	cmp	r3, #0
   106f4:	d005      	beq.n	10702 <_wdt_feed+0x1a>
   106f6:	687b      	ldr	r3, [r7, #4]
   106f8:	681b      	ldr	r3, [r3, #0]
   106fa:	2b00      	cmp	r3, #0
   106fc:	d001      	beq.n	10702 <_wdt_feed+0x1a>
   106fe:	2301      	movs	r3, #1
   10700:	e000      	b.n	10704 <_wdt_feed+0x1c>
   10702:	2300      	movs	r3, #0
   10704:	f003 0301 	and.w	r3, r3, #1
   10708:	b2db      	uxtb	r3, r3
   1070a:	f240 1219 	movw	r2, #281	; 0x119
   1070e:	4907      	ldr	r1, [pc, #28]	; (1072c <_wdt_feed+0x44>)
   10710:	4618      	mov	r0, r3
   10712:	4b07      	ldr	r3, [pc, #28]	; (10730 <_wdt_feed+0x48>)
   10714:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
   10716:	687b      	ldr	r3, [r7, #4]
   10718:	681b      	ldr	r3, [r3, #0]
   1071a:	21a5      	movs	r1, #165	; 0xa5
   1071c:	4618      	mov	r0, r3
   1071e:	4b05      	ldr	r3, [pc, #20]	; (10734 <_wdt_feed+0x4c>)
   10720:	4798      	blx	r3

	return ERR_NONE;
   10722:	2300      	movs	r3, #0
}
   10724:	4618      	mov	r0, r3
   10726:	3708      	adds	r7, #8
   10728:	46bd      	mov	sp, r7
   1072a:	bd80      	pop	{r7, pc}
   1072c:	00020da0 	.word	0x00020da0
   10730:	000080d1 	.word	0x000080d1
   10734:	00010459 	.word	0x00010459

00010738 <hri_port_set_DIR_reg>:
{
   10738:	b480      	push	{r7}
   1073a:	b085      	sub	sp, #20
   1073c:	af00      	add	r7, sp, #0
   1073e:	60f8      	str	r0, [r7, #12]
   10740:	460b      	mov	r3, r1
   10742:	607a      	str	r2, [r7, #4]
   10744:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   10746:	7afb      	ldrb	r3, [r7, #11]
   10748:	68fa      	ldr	r2, [r7, #12]
   1074a:	01db      	lsls	r3, r3, #7
   1074c:	4413      	add	r3, r2
   1074e:	3308      	adds	r3, #8
   10750:	687a      	ldr	r2, [r7, #4]
   10752:	601a      	str	r2, [r3, #0]
}
   10754:	bf00      	nop
   10756:	3714      	adds	r7, #20
   10758:	46bd      	mov	sp, r7
   1075a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1075e:	4770      	bx	lr

00010760 <hri_port_clear_DIR_reg>:
{
   10760:	b480      	push	{r7}
   10762:	b085      	sub	sp, #20
   10764:	af00      	add	r7, sp, #0
   10766:	60f8      	str	r0, [r7, #12]
   10768:	460b      	mov	r3, r1
   1076a:	607a      	str	r2, [r7, #4]
   1076c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   1076e:	7afb      	ldrb	r3, [r7, #11]
   10770:	68fa      	ldr	r2, [r7, #12]
   10772:	01db      	lsls	r3, r3, #7
   10774:	4413      	add	r3, r2
   10776:	3304      	adds	r3, #4
   10778:	687a      	ldr	r2, [r7, #4]
   1077a:	601a      	str	r2, [r3, #0]
}
   1077c:	bf00      	nop
   1077e:	3714      	adds	r7, #20
   10780:	46bd      	mov	sp, r7
   10782:	f85d 7b04 	ldr.w	r7, [sp], #4
   10786:	4770      	bx	lr

00010788 <hri_port_set_OUT_reg>:
{
   10788:	b480      	push	{r7}
   1078a:	b085      	sub	sp, #20
   1078c:	af00      	add	r7, sp, #0
   1078e:	60f8      	str	r0, [r7, #12]
   10790:	460b      	mov	r3, r1
   10792:	607a      	str	r2, [r7, #4]
   10794:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   10796:	7afb      	ldrb	r3, [r7, #11]
   10798:	68fa      	ldr	r2, [r7, #12]
   1079a:	01db      	lsls	r3, r3, #7
   1079c:	4413      	add	r3, r2
   1079e:	3318      	adds	r3, #24
   107a0:	687a      	ldr	r2, [r7, #4]
   107a2:	601a      	str	r2, [r3, #0]
}
   107a4:	bf00      	nop
   107a6:	3714      	adds	r7, #20
   107a8:	46bd      	mov	sp, r7
   107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   107ae:	4770      	bx	lr

000107b0 <hri_port_clear_OUT_reg>:
{
   107b0:	b480      	push	{r7}
   107b2:	b085      	sub	sp, #20
   107b4:	af00      	add	r7, sp, #0
   107b6:	60f8      	str	r0, [r7, #12]
   107b8:	460b      	mov	r3, r1
   107ba:	607a      	str	r2, [r7, #4]
   107bc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   107be:	7afb      	ldrb	r3, [r7, #11]
   107c0:	68fa      	ldr	r2, [r7, #12]
   107c2:	01db      	lsls	r3, r3, #7
   107c4:	4413      	add	r3, r2
   107c6:	3314      	adds	r3, #20
   107c8:	687a      	ldr	r2, [r7, #4]
   107ca:	601a      	str	r2, [r3, #0]
}
   107cc:	bf00      	nop
   107ce:	3714      	adds	r7, #20
   107d0:	46bd      	mov	sp, r7
   107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   107d6:	4770      	bx	lr

000107d8 <hri_port_write_PMUX_PMUXE_bf>:
{
   107d8:	b480      	push	{r7}
   107da:	b085      	sub	sp, #20
   107dc:	af00      	add	r7, sp, #0
   107de:	6078      	str	r0, [r7, #4]
   107e0:	4608      	mov	r0, r1
   107e2:	4611      	mov	r1, r2
   107e4:	461a      	mov	r2, r3
   107e6:	4603      	mov	r3, r0
   107e8:	70fb      	strb	r3, [r7, #3]
   107ea:	460b      	mov	r3, r1
   107ec:	70bb      	strb	r3, [r7, #2]
   107ee:	4613      	mov	r3, r2
   107f0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   107f2:	78fa      	ldrb	r2, [r7, #3]
   107f4:	78bb      	ldrb	r3, [r7, #2]
   107f6:	6879      	ldr	r1, [r7, #4]
   107f8:	01d2      	lsls	r2, r2, #7
   107fa:	440a      	add	r2, r1
   107fc:	4413      	add	r3, r2
   107fe:	3330      	adds	r3, #48	; 0x30
   10800:	781b      	ldrb	r3, [r3, #0]
   10802:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   10804:	7bfb      	ldrb	r3, [r7, #15]
   10806:	f023 030f 	bic.w	r3, r3, #15
   1080a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   1080c:	787b      	ldrb	r3, [r7, #1]
   1080e:	f003 030f 	and.w	r3, r3, #15
   10812:	b2da      	uxtb	r2, r3
   10814:	7bfb      	ldrb	r3, [r7, #15]
   10816:	4313      	orrs	r3, r2
   10818:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   1081a:	78fa      	ldrb	r2, [r7, #3]
   1081c:	78bb      	ldrb	r3, [r7, #2]
   1081e:	6879      	ldr	r1, [r7, #4]
   10820:	01d2      	lsls	r2, r2, #7
   10822:	440a      	add	r2, r1
   10824:	4413      	add	r3, r2
   10826:	3330      	adds	r3, #48	; 0x30
   10828:	7bfa      	ldrb	r2, [r7, #15]
   1082a:	701a      	strb	r2, [r3, #0]
}
   1082c:	bf00      	nop
   1082e:	3714      	adds	r7, #20
   10830:	46bd      	mov	sp, r7
   10832:	f85d 7b04 	ldr.w	r7, [sp], #4
   10836:	4770      	bx	lr

00010838 <hri_port_write_PMUX_PMUXO_bf>:
{
   10838:	b480      	push	{r7}
   1083a:	b085      	sub	sp, #20
   1083c:	af00      	add	r7, sp, #0
   1083e:	6078      	str	r0, [r7, #4]
   10840:	4608      	mov	r0, r1
   10842:	4611      	mov	r1, r2
   10844:	461a      	mov	r2, r3
   10846:	4603      	mov	r3, r0
   10848:	70fb      	strb	r3, [r7, #3]
   1084a:	460b      	mov	r3, r1
   1084c:	70bb      	strb	r3, [r7, #2]
   1084e:	4613      	mov	r3, r2
   10850:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   10852:	78fa      	ldrb	r2, [r7, #3]
   10854:	78bb      	ldrb	r3, [r7, #2]
   10856:	6879      	ldr	r1, [r7, #4]
   10858:	01d2      	lsls	r2, r2, #7
   1085a:	440a      	add	r2, r1
   1085c:	4413      	add	r3, r2
   1085e:	3330      	adds	r3, #48	; 0x30
   10860:	781b      	ldrb	r3, [r3, #0]
   10862:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   10864:	7bfb      	ldrb	r3, [r7, #15]
   10866:	f003 030f 	and.w	r3, r3, #15
   1086a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   1086c:	787b      	ldrb	r3, [r7, #1]
   1086e:	011b      	lsls	r3, r3, #4
   10870:	b2da      	uxtb	r2, r3
   10872:	7bfb      	ldrb	r3, [r7, #15]
   10874:	4313      	orrs	r3, r2
   10876:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10878:	78fa      	ldrb	r2, [r7, #3]
   1087a:	78bb      	ldrb	r3, [r7, #2]
   1087c:	6879      	ldr	r1, [r7, #4]
   1087e:	01d2      	lsls	r2, r2, #7
   10880:	440a      	add	r2, r1
   10882:	4413      	add	r3, r2
   10884:	3330      	adds	r3, #48	; 0x30
   10886:	7bfa      	ldrb	r2, [r7, #15]
   10888:	701a      	strb	r2, [r3, #0]
}
   1088a:	bf00      	nop
   1088c:	3714      	adds	r7, #20
   1088e:	46bd      	mov	sp, r7
   10890:	f85d 7b04 	ldr.w	r7, [sp], #4
   10894:	4770      	bx	lr

00010896 <hri_port_write_PINCFG_PMUXEN_bit>:
{
   10896:	b480      	push	{r7}
   10898:	b085      	sub	sp, #20
   1089a:	af00      	add	r7, sp, #0
   1089c:	6078      	str	r0, [r7, #4]
   1089e:	4608      	mov	r0, r1
   108a0:	4611      	mov	r1, r2
   108a2:	461a      	mov	r2, r3
   108a4:	4603      	mov	r3, r0
   108a6:	70fb      	strb	r3, [r7, #3]
   108a8:	460b      	mov	r3, r1
   108aa:	70bb      	strb	r3, [r7, #2]
   108ac:	4613      	mov	r3, r2
   108ae:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   108b0:	78fa      	ldrb	r2, [r7, #3]
   108b2:	78bb      	ldrb	r3, [r7, #2]
   108b4:	6879      	ldr	r1, [r7, #4]
   108b6:	01d2      	lsls	r2, r2, #7
   108b8:	440a      	add	r2, r1
   108ba:	4413      	add	r3, r2
   108bc:	3340      	adds	r3, #64	; 0x40
   108be:	781b      	ldrb	r3, [r3, #0]
   108c0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   108c2:	7bfb      	ldrb	r3, [r7, #15]
   108c4:	f023 0301 	bic.w	r3, r3, #1
   108c8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   108ca:	787a      	ldrb	r2, [r7, #1]
   108cc:	7bfb      	ldrb	r3, [r7, #15]
   108ce:	4313      	orrs	r3, r2
   108d0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   108d2:	78fa      	ldrb	r2, [r7, #3]
   108d4:	78bb      	ldrb	r3, [r7, #2]
   108d6:	6879      	ldr	r1, [r7, #4]
   108d8:	01d2      	lsls	r2, r2, #7
   108da:	440a      	add	r2, r1
   108dc:	4413      	add	r3, r2
   108de:	3340      	adds	r3, #64	; 0x40
   108e0:	7bfa      	ldrb	r2, [r7, #15]
   108e2:	701a      	strb	r2, [r3, #0]
}
   108e4:	bf00      	nop
   108e6:	3714      	adds	r7, #20
   108e8:	46bd      	mov	sp, r7
   108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   108ee:	4770      	bx	lr

000108f0 <hri_port_write_WRCONFIG_reg>:
{
   108f0:	b480      	push	{r7}
   108f2:	b085      	sub	sp, #20
   108f4:	af00      	add	r7, sp, #0
   108f6:	60f8      	str	r0, [r7, #12]
   108f8:	460b      	mov	r3, r1
   108fa:	607a      	str	r2, [r7, #4]
   108fc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   108fe:	7afb      	ldrb	r3, [r7, #11]
   10900:	68fa      	ldr	r2, [r7, #12]
   10902:	01db      	lsls	r3, r3, #7
   10904:	4413      	add	r3, r2
   10906:	3328      	adds	r3, #40	; 0x28
   10908:	687a      	ldr	r2, [r7, #4]
   1090a:	601a      	str	r2, [r3, #0]
}
   1090c:	bf00      	nop
   1090e:	3714      	adds	r7, #20
   10910:	46bd      	mov	sp, r7
   10912:	f85d 7b04 	ldr.w	r7, [sp], #4
   10916:	4770      	bx	lr

00010918 <_gpio_set_direction>:
{
   10918:	b580      	push	{r7, lr}
   1091a:	b082      	sub	sp, #8
   1091c:	af00      	add	r7, sp, #0
   1091e:	4603      	mov	r3, r0
   10920:	6039      	str	r1, [r7, #0]
   10922:	71fb      	strb	r3, [r7, #7]
   10924:	4613      	mov	r3, r2
   10926:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   10928:	79bb      	ldrb	r3, [r7, #6]
   1092a:	2b01      	cmp	r3, #1
   1092c:	d01c      	beq.n	10968 <_gpio_set_direction+0x50>
   1092e:	2b02      	cmp	r3, #2
   10930:	d037      	beq.n	109a2 <_gpio_set_direction+0x8a>
   10932:	2b00      	cmp	r3, #0
   10934:	d14e      	bne.n	109d4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10936:	79fb      	ldrb	r3, [r7, #7]
   10938:	683a      	ldr	r2, [r7, #0]
   1093a:	4619      	mov	r1, r3
   1093c:	482a      	ldr	r0, [pc, #168]	; (109e8 <_gpio_set_direction+0xd0>)
   1093e:	4b2b      	ldr	r3, [pc, #172]	; (109ec <_gpio_set_direction+0xd4>)
   10940:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   10942:	683b      	ldr	r3, [r7, #0]
   10944:	b29b      	uxth	r3, r3
   10946:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1094a:	79fb      	ldrb	r3, [r7, #7]
   1094c:	4619      	mov	r1, r3
   1094e:	4826      	ldr	r0, [pc, #152]	; (109e8 <_gpio_set_direction+0xd0>)
   10950:	4b27      	ldr	r3, [pc, #156]	; (109f0 <_gpio_set_direction+0xd8>)
   10952:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10954:	683b      	ldr	r3, [r7, #0]
   10956:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10958:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   1095c:	79fb      	ldrb	r3, [r7, #7]
   1095e:	4619      	mov	r1, r3
   10960:	4821      	ldr	r0, [pc, #132]	; (109e8 <_gpio_set_direction+0xd0>)
   10962:	4b23      	ldr	r3, [pc, #140]	; (109f0 <_gpio_set_direction+0xd8>)
   10964:	4798      	blx	r3
		break;
   10966:	e03a      	b.n	109de <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10968:	79fb      	ldrb	r3, [r7, #7]
   1096a:	683a      	ldr	r2, [r7, #0]
   1096c:	4619      	mov	r1, r3
   1096e:	481e      	ldr	r0, [pc, #120]	; (109e8 <_gpio_set_direction+0xd0>)
   10970:	4b1e      	ldr	r3, [pc, #120]	; (109ec <_gpio_set_direction+0xd4>)
   10972:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   10974:	683b      	ldr	r3, [r7, #0]
   10976:	b29b      	uxth	r3, r3
   10978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10980:	79f9      	ldrb	r1, [r7, #7]
   10982:	461a      	mov	r2, r3
   10984:	4818      	ldr	r0, [pc, #96]	; (109e8 <_gpio_set_direction+0xd0>)
   10986:	4b1a      	ldr	r3, [pc, #104]	; (109f0 <_gpio_set_direction+0xd8>)
   10988:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   1098a:	683b      	ldr	r3, [r7, #0]
   1098c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   1098e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   10992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10996:	79f9      	ldrb	r1, [r7, #7]
   10998:	461a      	mov	r2, r3
   1099a:	4813      	ldr	r0, [pc, #76]	; (109e8 <_gpio_set_direction+0xd0>)
   1099c:	4b14      	ldr	r3, [pc, #80]	; (109f0 <_gpio_set_direction+0xd8>)
   1099e:	4798      	blx	r3
		break;
   109a0:	e01d      	b.n	109de <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   109a2:	79fb      	ldrb	r3, [r7, #7]
   109a4:	683a      	ldr	r2, [r7, #0]
   109a6:	4619      	mov	r1, r3
   109a8:	480f      	ldr	r0, [pc, #60]	; (109e8 <_gpio_set_direction+0xd0>)
   109aa:	4b12      	ldr	r3, [pc, #72]	; (109f4 <_gpio_set_direction+0xdc>)
   109ac:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   109ae:	683b      	ldr	r3, [r7, #0]
   109b0:	b29b      	uxth	r3, r3
   109b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   109b6:	79fb      	ldrb	r3, [r7, #7]
   109b8:	4619      	mov	r1, r3
   109ba:	480b      	ldr	r0, [pc, #44]	; (109e8 <_gpio_set_direction+0xd0>)
   109bc:	4b0c      	ldr	r3, [pc, #48]	; (109f0 <_gpio_set_direction+0xd8>)
   109be:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   109c0:	683b      	ldr	r3, [r7, #0]
   109c2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   109c4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   109c8:	79fb      	ldrb	r3, [r7, #7]
   109ca:	4619      	mov	r1, r3
   109cc:	4806      	ldr	r0, [pc, #24]	; (109e8 <_gpio_set_direction+0xd0>)
   109ce:	4b08      	ldr	r3, [pc, #32]	; (109f0 <_gpio_set_direction+0xd8>)
   109d0:	4798      	blx	r3
		break;
   109d2:	e004      	b.n	109de <_gpio_set_direction+0xc6>
		ASSERT(false);
   109d4:	2246      	movs	r2, #70	; 0x46
   109d6:	4908      	ldr	r1, [pc, #32]	; (109f8 <_gpio_set_direction+0xe0>)
   109d8:	2000      	movs	r0, #0
   109da:	4b08      	ldr	r3, [pc, #32]	; (109fc <_gpio_set_direction+0xe4>)
   109dc:	4798      	blx	r3
}
   109de:	bf00      	nop
   109e0:	3708      	adds	r7, #8
   109e2:	46bd      	mov	sp, r7
   109e4:	bd80      	pop	{r7, pc}
   109e6:	bf00      	nop
   109e8:	41008000 	.word	0x41008000
   109ec:	00010761 	.word	0x00010761
   109f0:	000108f1 	.word	0x000108f1
   109f4:	00010739 	.word	0x00010739
   109f8:	00020db8 	.word	0x00020db8
   109fc:	000080d1 	.word	0x000080d1

00010a00 <_gpio_set_level>:
{
   10a00:	b580      	push	{r7, lr}
   10a02:	b082      	sub	sp, #8
   10a04:	af00      	add	r7, sp, #0
   10a06:	4603      	mov	r3, r0
   10a08:	6039      	str	r1, [r7, #0]
   10a0a:	71fb      	strb	r3, [r7, #7]
   10a0c:	4613      	mov	r3, r2
   10a0e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   10a10:	79bb      	ldrb	r3, [r7, #6]
   10a12:	2b00      	cmp	r3, #0
   10a14:	d006      	beq.n	10a24 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10a16:	79fb      	ldrb	r3, [r7, #7]
   10a18:	683a      	ldr	r2, [r7, #0]
   10a1a:	4619      	mov	r1, r3
   10a1c:	4806      	ldr	r0, [pc, #24]	; (10a38 <_gpio_set_level+0x38>)
   10a1e:	4b07      	ldr	r3, [pc, #28]	; (10a3c <_gpio_set_level+0x3c>)
   10a20:	4798      	blx	r3
}
   10a22:	e005      	b.n	10a30 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   10a24:	79fb      	ldrb	r3, [r7, #7]
   10a26:	683a      	ldr	r2, [r7, #0]
   10a28:	4619      	mov	r1, r3
   10a2a:	4803      	ldr	r0, [pc, #12]	; (10a38 <_gpio_set_level+0x38>)
   10a2c:	4b04      	ldr	r3, [pc, #16]	; (10a40 <_gpio_set_level+0x40>)
   10a2e:	4798      	blx	r3
}
   10a30:	bf00      	nop
   10a32:	3708      	adds	r7, #8
   10a34:	46bd      	mov	sp, r7
   10a36:	bd80      	pop	{r7, pc}
   10a38:	41008000 	.word	0x41008000
   10a3c:	00010789 	.word	0x00010789
   10a40:	000107b1 	.word	0x000107b1

00010a44 <_gpio_set_pin_function>:
{
   10a44:	b590      	push	{r4, r7, lr}
   10a46:	b085      	sub	sp, #20
   10a48:	af00      	add	r7, sp, #0
   10a4a:	6078      	str	r0, [r7, #4]
   10a4c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   10a4e:	687b      	ldr	r3, [r7, #4]
   10a50:	095b      	lsrs	r3, r3, #5
   10a52:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   10a54:	687b      	ldr	r3, [r7, #4]
   10a56:	b2db      	uxtb	r3, r3
   10a58:	f003 031f 	and.w	r3, r3, #31
   10a5c:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
   10a5e:	683b      	ldr	r3, [r7, #0]
   10a60:	f1b3 3fff 	cmp.w	r3, #4294967295
   10a64:	d106      	bne.n	10a74 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   10a66:	7bba      	ldrb	r2, [r7, #14]
   10a68:	7bf9      	ldrb	r1, [r7, #15]
   10a6a:	2300      	movs	r3, #0
   10a6c:	4812      	ldr	r0, [pc, #72]	; (10ab8 <_gpio_set_pin_function+0x74>)
   10a6e:	4c13      	ldr	r4, [pc, #76]	; (10abc <_gpio_set_pin_function+0x78>)
   10a70:	47a0      	blx	r4
}
   10a72:	e01d      	b.n	10ab0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   10a74:	7bba      	ldrb	r2, [r7, #14]
   10a76:	7bf9      	ldrb	r1, [r7, #15]
   10a78:	2301      	movs	r3, #1
   10a7a:	480f      	ldr	r0, [pc, #60]	; (10ab8 <_gpio_set_pin_function+0x74>)
   10a7c:	4c0f      	ldr	r4, [pc, #60]	; (10abc <_gpio_set_pin_function+0x78>)
   10a7e:	47a0      	blx	r4
		if (pin & 1) {
   10a80:	7bbb      	ldrb	r3, [r7, #14]
   10a82:	f003 0301 	and.w	r3, r3, #1
   10a86:	2b00      	cmp	r3, #0
   10a88:	d009      	beq.n	10a9e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   10a8a:	7bbb      	ldrb	r3, [r7, #14]
   10a8c:	085b      	lsrs	r3, r3, #1
   10a8e:	b2da      	uxtb	r2, r3
   10a90:	683b      	ldr	r3, [r7, #0]
   10a92:	b2db      	uxtb	r3, r3
   10a94:	7bf9      	ldrb	r1, [r7, #15]
   10a96:	4808      	ldr	r0, [pc, #32]	; (10ab8 <_gpio_set_pin_function+0x74>)
   10a98:	4c09      	ldr	r4, [pc, #36]	; (10ac0 <_gpio_set_pin_function+0x7c>)
   10a9a:	47a0      	blx	r4
}
   10a9c:	e008      	b.n	10ab0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   10a9e:	7bbb      	ldrb	r3, [r7, #14]
   10aa0:	085b      	lsrs	r3, r3, #1
   10aa2:	b2da      	uxtb	r2, r3
   10aa4:	683b      	ldr	r3, [r7, #0]
   10aa6:	b2db      	uxtb	r3, r3
   10aa8:	7bf9      	ldrb	r1, [r7, #15]
   10aaa:	4803      	ldr	r0, [pc, #12]	; (10ab8 <_gpio_set_pin_function+0x74>)
   10aac:	4c05      	ldr	r4, [pc, #20]	; (10ac4 <_gpio_set_pin_function+0x80>)
   10aae:	47a0      	blx	r4
}
   10ab0:	bf00      	nop
   10ab2:	3714      	adds	r7, #20
   10ab4:	46bd      	mov	sp, r7
   10ab6:	bd90      	pop	{r4, r7, pc}
   10ab8:	41008000 	.word	0x41008000
   10abc:	00010897 	.word	0x00010897
   10ac0:	00010839 	.word	0x00010839
   10ac4:	000107d9 	.word	0x000107d9

00010ac8 <gpio_set_pin_function>:
{
   10ac8:	b580      	push	{r7, lr}
   10aca:	b082      	sub	sp, #8
   10acc:	af00      	add	r7, sp, #0
   10ace:	6078      	str	r0, [r7, #4]
   10ad0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   10ad2:	6839      	ldr	r1, [r7, #0]
   10ad4:	6878      	ldr	r0, [r7, #4]
   10ad6:	4b03      	ldr	r3, [pc, #12]	; (10ae4 <gpio_set_pin_function+0x1c>)
   10ad8:	4798      	blx	r3
}
   10ada:	bf00      	nop
   10adc:	3708      	adds	r7, #8
   10ade:	46bd      	mov	sp, r7
   10ae0:	bd80      	pop	{r7, pc}
   10ae2:	bf00      	nop
   10ae4:	00010a45 	.word	0x00010a45

00010ae8 <gpio_set_pin_direction>:
{
   10ae8:	b580      	push	{r7, lr}
   10aea:	b082      	sub	sp, #8
   10aec:	af00      	add	r7, sp, #0
   10aee:	4603      	mov	r3, r0
   10af0:	460a      	mov	r2, r1
   10af2:	71fb      	strb	r3, [r7, #7]
   10af4:	4613      	mov	r3, r2
   10af6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   10af8:	79fb      	ldrb	r3, [r7, #7]
   10afa:	095b      	lsrs	r3, r3, #5
   10afc:	b2d8      	uxtb	r0, r3
   10afe:	79fb      	ldrb	r3, [r7, #7]
   10b00:	f003 031f 	and.w	r3, r3, #31
   10b04:	2201      	movs	r2, #1
   10b06:	fa02 f303 	lsl.w	r3, r2, r3
   10b0a:	79ba      	ldrb	r2, [r7, #6]
   10b0c:	4619      	mov	r1, r3
   10b0e:	4b03      	ldr	r3, [pc, #12]	; (10b1c <gpio_set_pin_direction+0x34>)
   10b10:	4798      	blx	r3
}
   10b12:	bf00      	nop
   10b14:	3708      	adds	r7, #8
   10b16:	46bd      	mov	sp, r7
   10b18:	bd80      	pop	{r7, pc}
   10b1a:	bf00      	nop
   10b1c:	00010919 	.word	0x00010919

00010b20 <gpio_set_pin_level>:
{
   10b20:	b580      	push	{r7, lr}
   10b22:	b082      	sub	sp, #8
   10b24:	af00      	add	r7, sp, #0
   10b26:	4603      	mov	r3, r0
   10b28:	460a      	mov	r2, r1
   10b2a:	71fb      	strb	r3, [r7, #7]
   10b2c:	4613      	mov	r3, r2
   10b2e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   10b30:	79fb      	ldrb	r3, [r7, #7]
   10b32:	095b      	lsrs	r3, r3, #5
   10b34:	b2d8      	uxtb	r0, r3
   10b36:	79fb      	ldrb	r3, [r7, #7]
   10b38:	f003 031f 	and.w	r3, r3, #31
   10b3c:	2201      	movs	r2, #1
   10b3e:	fa02 f303 	lsl.w	r3, r2, r3
   10b42:	79ba      	ldrb	r2, [r7, #6]
   10b44:	4619      	mov	r1, r3
   10b46:	4b03      	ldr	r3, [pc, #12]	; (10b54 <gpio_set_pin_level+0x34>)
   10b48:	4798      	blx	r3
}
   10b4a:	bf00      	nop
   10b4c:	3708      	adds	r7, #8
   10b4e:	46bd      	mov	sp, r7
   10b50:	bd80      	pop	{r7, pc}
   10b52:	bf00      	nop
   10b54:	00010a01 	.word	0x00010a01

00010b58 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
   10b58:	b580      	push	{r7, lr}
   10b5a:	b082      	sub	sp, #8
   10b5c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   10b5e:	2100      	movs	r1, #0
   10b60:	2008      	movs	r0, #8
   10b62:	4b24      	ldr	r3, [pc, #144]	; (10bf4 <QSPI_N25Q256_exit_xip+0x9c>)
   10b64:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   10b66:	2100      	movs	r1, #0
   10b68:	202b      	movs	r0, #43	; 0x2b
   10b6a:	4b22      	ldr	r3, [pc, #136]	; (10bf4 <QSPI_N25Q256_exit_xip+0x9c>)
   10b6c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   10b6e:	2100      	movs	r1, #0
   10b70:	202a      	movs	r0, #42	; 0x2a
   10b72:	4b20      	ldr	r3, [pc, #128]	; (10bf4 <QSPI_N25Q256_exit_xip+0x9c>)
   10b74:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   10b76:	2102      	movs	r1, #2
   10b78:	2008      	movs	r0, #8
   10b7a:	4b1f      	ldr	r3, [pc, #124]	; (10bf8 <QSPI_N25Q256_exit_xip+0xa0>)
   10b7c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   10b7e:	2102      	movs	r1, #2
   10b80:	202b      	movs	r0, #43	; 0x2b
   10b82:	4b1d      	ldr	r3, [pc, #116]	; (10bf8 <QSPI_N25Q256_exit_xip+0xa0>)
   10b84:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   10b86:	2102      	movs	r1, #2
   10b88:	202a      	movs	r0, #42	; 0x2a
   10b8a:	4b1b      	ldr	r3, [pc, #108]	; (10bf8 <QSPI_N25Q256_exit_xip+0xa0>)
   10b8c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   10b8e:	2101      	movs	r1, #1
   10b90:	2008      	movs	r0, #8
   10b92:	4b1a      	ldr	r3, [pc, #104]	; (10bfc <QSPI_N25Q256_exit_xip+0xa4>)
   10b94:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   10b96:	2100      	movs	r1, #0
   10b98:	202b      	movs	r0, #43	; 0x2b
   10b9a:	4b18      	ldr	r3, [pc, #96]	; (10bfc <QSPI_N25Q256_exit_xip+0xa4>)
   10b9c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   10b9e:	2100      	movs	r1, #0
   10ba0:	202a      	movs	r0, #42	; 0x2a
   10ba2:	4b16      	ldr	r3, [pc, #88]	; (10bfc <QSPI_N25Q256_exit_xip+0xa4>)
   10ba4:	4798      	blx	r3

	delay_us(1);
   10ba6:	2001      	movs	r0, #1
   10ba8:	4b15      	ldr	r3, [pc, #84]	; (10c00 <QSPI_N25Q256_exit_xip+0xa8>)
   10baa:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   10bac:	2300      	movs	r3, #0
   10bae:	607b      	str	r3, [r7, #4]
   10bb0:	e010      	b.n	10bd4 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
   10bb2:	2101      	movs	r1, #1
   10bb4:	202a      	movs	r0, #42	; 0x2a
   10bb6:	4b11      	ldr	r3, [pc, #68]	; (10bfc <QSPI_N25Q256_exit_xip+0xa4>)
   10bb8:	4798      	blx	r3
		delay_us(1);
   10bba:	2001      	movs	r0, #1
   10bbc:	4b10      	ldr	r3, [pc, #64]	; (10c00 <QSPI_N25Q256_exit_xip+0xa8>)
   10bbe:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   10bc0:	2100      	movs	r1, #0
   10bc2:	202a      	movs	r0, #42	; 0x2a
   10bc4:	4b0d      	ldr	r3, [pc, #52]	; (10bfc <QSPI_N25Q256_exit_xip+0xa4>)
   10bc6:	4798      	blx	r3
		delay_us(1);
   10bc8:	2001      	movs	r0, #1
   10bca:	4b0d      	ldr	r3, [pc, #52]	; (10c00 <QSPI_N25Q256_exit_xip+0xa8>)
   10bcc:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   10bce:	687b      	ldr	r3, [r7, #4]
   10bd0:	3301      	adds	r3, #1
   10bd2:	607b      	str	r3, [r7, #4]
   10bd4:	687b      	ldr	r3, [r7, #4]
   10bd6:	2b06      	cmp	r3, #6
   10bd8:	ddeb      	ble.n	10bb2 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
   10bda:	2101      	movs	r1, #1
   10bdc:	202b      	movs	r0, #43	; 0x2b
   10bde:	4b07      	ldr	r3, [pc, #28]	; (10bfc <QSPI_N25Q256_exit_xip+0xa4>)
   10be0:	4798      	blx	r3
	delay_us(1);
   10be2:	2001      	movs	r0, #1
   10be4:	4b06      	ldr	r3, [pc, #24]	; (10c00 <QSPI_N25Q256_exit_xip+0xa8>)
   10be6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   10be8:	4b06      	ldr	r3, [pc, #24]	; (10c04 <QSPI_N25Q256_exit_xip+0xac>)
   10bea:	4798      	blx	r3
}
   10bec:	bf00      	nop
   10bee:	3708      	adds	r7, #8
   10bf0:	46bd      	mov	sp, r7
   10bf2:	bd80      	pop	{r7, pc}
   10bf4:	00010ac9 	.word	0x00010ac9
   10bf8:	00010ae9 	.word	0x00010ae9
   10bfc:	00010b21 	.word	0x00010b21
   10c00:	0000672d 	.word	0x0000672d
   10c04:	000054cd 	.word	0x000054cd

00010c08 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
   10c08:	b598      	push	{r3, r4, r7, lr}
   10c0a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
   10c0c:	4806      	ldr	r0, [pc, #24]	; (10c28 <spi_nor_flash_init+0x20>)
   10c0e:	4b07      	ldr	r3, [pc, #28]	; (10c2c <spi_nor_flash_init+0x24>)
   10c10:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
   10c12:	2300      	movs	r3, #0
   10c14:	4a06      	ldr	r2, [pc, #24]	; (10c30 <spi_nor_flash_init+0x28>)
   10c16:	4904      	ldr	r1, [pc, #16]	; (10c28 <spi_nor_flash_init+0x20>)
   10c18:	4806      	ldr	r0, [pc, #24]	; (10c34 <spi_nor_flash_init+0x2c>)
   10c1a:	4c07      	ldr	r4, [pc, #28]	; (10c38 <spi_nor_flash_init+0x30>)
   10c1c:	47a0      	blx	r4
   10c1e:	4602      	mov	r2, r0
   10c20:	4b06      	ldr	r3, [pc, #24]	; (10c3c <spi_nor_flash_init+0x34>)
   10c22:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
   10c24:	bf00      	nop
   10c26:	bd98      	pop	{r3, r4, r7, pc}
   10c28:	2000a794 	.word	0x2000a794
   10c2c:	00006f79 	.word	0x00006f79
   10c30:	00010b59 	.word	0x00010b59
   10c34:	20008c90 	.word	0x20008c90
   10c38:	00011075 	.word	0x00011075
   10c3c:	2000a9b4 	.word	0x2000a9b4

00010c40 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
   10c40:	b580      	push	{r7, lr}
   10c42:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
   10c44:	4805      	ldr	r0, [pc, #20]	; (10c5c <cdc_device_acm_init+0x1c>)
   10c46:	4b06      	ldr	r3, [pc, #24]	; (10c60 <cdc_device_acm_init+0x20>)
   10c48:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
   10c4a:	4b06      	ldr	r3, [pc, #24]	; (10c64 <cdc_device_acm_init+0x24>)
   10c4c:	4798      	blx	r3

	usbdc_start(single_desc);
   10c4e:	4806      	ldr	r0, [pc, #24]	; (10c68 <cdc_device_acm_init+0x28>)
   10c50:	4b06      	ldr	r3, [pc, #24]	; (10c6c <cdc_device_acm_init+0x2c>)
   10c52:	4798      	blx	r3
	usbdc_attach();
   10c54:	4b06      	ldr	r3, [pc, #24]	; (10c70 <cdc_device_acm_init+0x30>)
   10c56:	4798      	blx	r3
}
   10c58:	bf00      	nop
   10c5a:	bd80      	pop	{r7, pc}
   10c5c:	20008ce0 	.word	0x20008ce0
   10c60:	0001279d 	.word	0x0001279d
   10c64:	00011a15 	.word	0x00011a15
   10c68:	20000234 	.word	0x20000234
   10c6c:	00012839 	.word	0x00012839
   10c70:	00012889 	.word	0x00012889

00010c74 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
   10c74:	b580      	push	{r7, lr}
   10c76:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
   10c78:	4b01      	ldr	r3, [pc, #4]	; (10c80 <usb_init+0xc>)
   10c7a:	4798      	blx	r3
}
   10c7c:	bf00      	nop
   10c7e:	bd80      	pop	{r7, pc}
   10c80:	00010c41 	.word	0x00010c41

00010c84 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
   10c84:	b480      	push	{r7}
   10c86:	b085      	sub	sp, #20
   10c88:	af00      	add	r7, sp, #0
   10c8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   10c8c:	f3ef 8310 	mrs	r3, PRIMASK
   10c90:	60fb      	str	r3, [r7, #12]
  return(result);
   10c92:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
   10c94:	687b      	ldr	r3, [r7, #4]
   10c96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   10c98:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   10c9a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
   10c9e:	bf00      	nop
   10ca0:	3714      	adds	r7, #20
   10ca2:	46bd      	mov	sp, r7
   10ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ca8:	4770      	bx	lr

00010caa <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
   10caa:	b480      	push	{r7}
   10cac:	b085      	sub	sp, #20
   10cae:	af00      	add	r7, sp, #0
   10cb0:	6078      	str	r0, [r7, #4]
   10cb2:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
   10cb6:	687b      	ldr	r3, [r7, #4]
   10cb8:	681b      	ldr	r3, [r3, #0]
   10cba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   10cbc:	68fb      	ldr	r3, [r7, #12]
   10cbe:	f383 8810 	msr	PRIMASK, r3
}
   10cc2:	bf00      	nop
   10cc4:	3714      	adds	r7, #20
   10cc6:	46bd      	mov	sp, r7
   10cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ccc:	4770      	bx	lr
	...

00010cd0 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
   10cd0:	b580      	push	{r7, lr}
   10cd2:	b08c      	sub	sp, #48	; 0x30
   10cd4:	af00      	add	r7, sp, #0
   10cd6:	6078      	str	r0, [r7, #4]
   10cd8:	460b      	mov	r3, r1
   10cda:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10cdc:	687b      	ldr	r3, [r7, #4]
   10cde:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10ce0:	687b      	ldr	r3, [r7, #4]
   10ce2:	681b      	ldr	r3, [r3, #0]
   10ce4:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
   10ce6:	f107 030c 	add.w	r3, r7, #12
   10cea:	2200      	movs	r2, #0
   10cec:	601a      	str	r2, [r3, #0]
   10cee:	605a      	str	r2, [r3, #4]
   10cf0:	609a      	str	r2, [r3, #8]
   10cf2:	60da      	str	r2, [r3, #12]
   10cf4:	611a      	str	r2, [r3, #16]
   10cf6:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   10cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10cfa:	7b1b      	ldrb	r3, [r3, #12]
   10cfc:	2b00      	cmp	r3, #0
   10cfe:	d001      	beq.n	10d04 <n25q256a_xip_confirm+0x34>
   10d00:	2206      	movs	r2, #6
   10d02:	e000      	b.n	10d06 <n25q256a_xip_confirm+0x36>
   10d04:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   10d06:	7b3b      	ldrb	r3, [r7, #12]
   10d08:	f362 0302 	bfi	r3, r2, #0, #3
   10d0c:	733b      	strb	r3, [r7, #12]
   10d0e:	7b3b      	ldrb	r3, [r7, #12]
   10d10:	f043 0310 	orr.w	r3, r3, #16
   10d14:	733b      	strb	r3, [r7, #12]
   10d16:	7b3b      	ldrb	r3, [r7, #12]
   10d18:	f043 0320 	orr.w	r3, r3, #32
   10d1c:	733b      	strb	r3, [r7, #12]
   10d1e:	7b3b      	ldrb	r3, [r7, #12]
   10d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d24:	733b      	strb	r3, [r7, #12]
   10d26:	7b3b      	ldrb	r3, [r7, #12]
   10d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10d2c:	733b      	strb	r3, [r7, #12]
   10d2e:	7b7b      	ldrb	r3, [r7, #13]
   10d30:	f043 0303 	orr.w	r3, r3, #3
   10d34:	737b      	strb	r3, [r7, #13]
   10d36:	7b7b      	ldrb	r3, [r7, #13]
   10d38:	2201      	movs	r2, #1
   10d3a:	f362 1305 	bfi	r3, r2, #4, #2
   10d3e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
   10d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d42:	7b1b      	ldrb	r3, [r3, #12]
   10d44:	2b00      	cmp	r3, #0
   10d46:	d001      	beq.n	10d4c <n25q256a_xip_confirm+0x7c>
   10d48:	2208      	movs	r2, #8
   10d4a:	e000      	b.n	10d4e <n25q256a_xip_confirm+0x7e>
   10d4c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   10d4e:	7bbb      	ldrb	r3, [r7, #14]
   10d50:	f362 0304 	bfi	r3, r2, #0, #5
   10d54:	73bb      	strb	r3, [r7, #14]
   10d56:	230b      	movs	r3, #11
   10d58:	743b      	strb	r3, [r7, #16]
   10d5a:	78fb      	ldrb	r3, [r7, #3]
   10d5c:	2b00      	cmp	r3, #0
   10d5e:	d001      	beq.n	10d64 <n25q256a_xip_confirm+0x94>
   10d60:	2300      	movs	r3, #0
   10d62:	e000      	b.n	10d66 <n25q256a_xip_confirm+0x96>
   10d64:	23ff      	movs	r3, #255	; 0xff
   10d66:	747b      	strb	r3, [r7, #17]
   10d68:	2301      	movs	r3, #1
   10d6a:	61bb      	str	r3, [r7, #24]
   10d6c:	f107 0327 	add.w	r3, r7, #39	; 0x27
   10d70:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
   10d72:	f107 030c 	add.w	r3, r7, #12
   10d76:	4619      	mov	r1, r3
   10d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10d7a:	4b07      	ldr	r3, [pc, #28]	; (10d98 <n25q256a_xip_confirm+0xc8>)
   10d7c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
   10d7e:	78fb      	ldrb	r3, [r7, #3]
   10d80:	2b00      	cmp	r3, #0
   10d82:	d001      	beq.n	10d88 <n25q256a_xip_confirm+0xb8>
   10d84:	2202      	movs	r2, #2
   10d86:	e000      	b.n	10d8a <n25q256a_xip_confirm+0xba>
   10d88:	2201      	movs	r2, #1
   10d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d8c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   10d8e:	2300      	movs	r3, #0
}
   10d90:	4618      	mov	r0, r3
   10d92:	3730      	adds	r7, #48	; 0x30
   10d94:	46bd      	mov	sp, r7
   10d96:	bd80      	pop	{r7, pc}
   10d98:	00006ff1 	.word	0x00006ff1

00010d9c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
   10d9c:	b580      	push	{r7, lr}
   10d9e:	b08c      	sub	sp, #48	; 0x30
   10da0:	af00      	add	r7, sp, #0
   10da2:	6078      	str	r0, [r7, #4]
   10da4:	460b      	mov	r3, r1
   10da6:	70fb      	strb	r3, [r7, #3]
   10da8:	4613      	mov	r3, r2
   10daa:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
   10dac:	2300      	movs	r3, #0
   10dae:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
   10db0:	687b      	ldr	r3, [r7, #4]
   10db2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
   10db4:	687b      	ldr	r3, [r7, #4]
   10db6:	681b      	ldr	r3, [r3, #0]
   10db8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
   10dba:	f107 030c 	add.w	r3, r7, #12
   10dbe:	2200      	movs	r2, #0
   10dc0:	601a      	str	r2, [r3, #0]
   10dc2:	605a      	str	r2, [r3, #4]
   10dc4:	609a      	str	r2, [r3, #8]
   10dc6:	60da      	str	r2, [r3, #12]
   10dc8:	611a      	str	r2, [r3, #16]
   10dca:	615a      	str	r2, [r3, #20]
   10dcc:	78fb      	ldrb	r3, [r7, #3]
   10dce:	f003 0307 	and.w	r3, r3, #7
   10dd2:	b2da      	uxtb	r2, r3
   10dd4:	7b3b      	ldrb	r3, [r7, #12]
   10dd6:	f362 0302 	bfi	r3, r2, #0, #3
   10dda:	733b      	strb	r3, [r7, #12]
   10ddc:	7b3b      	ldrb	r3, [r7, #12]
   10dde:	f043 0310 	orr.w	r3, r3, #16
   10de2:	733b      	strb	r3, [r7, #12]
   10de4:	7b3b      	ldrb	r3, [r7, #12]
   10de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10dea:	733b      	strb	r3, [r7, #12]
   10dec:	78bb      	ldrb	r3, [r7, #2]
   10dee:	743b      	strb	r3, [r7, #16]
   10df0:	2301      	movs	r3, #1
   10df2:	61bb      	str	r3, [r7, #24]
   10df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
   10df8:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
   10dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10dfc:	7b5b      	ldrb	r3, [r3, #13]
   10dfe:	2b00      	cmp	r3, #0
   10e00:	d003      	beq.n	10e0a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
   10e02:	2100      	movs	r1, #0
   10e04:	6878      	ldr	r0, [r7, #4]
   10e06:	4b0a      	ldr	r3, [pc, #40]	; (10e30 <n25q256a_read_reg+0x94>)
   10e08:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   10e0a:	f107 030c 	add.w	r3, r7, #12
   10e0e:	4619      	mov	r1, r3
   10e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10e12:	4b08      	ldr	r3, [pc, #32]	; (10e34 <n25q256a_read_reg+0x98>)
   10e14:	4798      	blx	r3
	if (n25q->xip_mode) {
   10e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e18:	7b5b      	ldrb	r3, [r3, #13]
   10e1a:	2b00      	cmp	r3, #0
   10e1c:	d003      	beq.n	10e26 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
   10e1e:	2101      	movs	r1, #1
   10e20:	6878      	ldr	r0, [r7, #4]
   10e22:	4b03      	ldr	r3, [pc, #12]	; (10e30 <n25q256a_read_reg+0x94>)
   10e24:	4798      	blx	r3
	}
	return status;
   10e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   10e28:	4618      	mov	r0, r3
   10e2a:	3730      	adds	r7, #48	; 0x30
   10e2c:	46bd      	mov	sp, r7
   10e2e:	bd80      	pop	{r7, pc}
   10e30:	00010cd1 	.word	0x00010cd1
   10e34:	00006ff1 	.word	0x00006ff1

00010e38 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
   10e38:	b580      	push	{r7, lr}
   10e3a:	b08c      	sub	sp, #48	; 0x30
   10e3c:	af00      	add	r7, sp, #0
   10e3e:	60f8      	str	r0, [r7, #12]
   10e40:	607b      	str	r3, [r7, #4]
   10e42:	460b      	mov	r3, r1
   10e44:	72fb      	strb	r3, [r7, #11]
   10e46:	4613      	mov	r3, r2
   10e48:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10e4a:	68fb      	ldr	r3, [r7, #12]
   10e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10e4e:	68fb      	ldr	r3, [r7, #12]
   10e50:	681b      	ldr	r3, [r3, #0]
   10e52:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
   10e54:	f107 0310 	add.w	r3, r7, #16
   10e58:	2200      	movs	r2, #0
   10e5a:	601a      	str	r2, [r3, #0]
   10e5c:	605a      	str	r2, [r3, #4]
   10e5e:	609a      	str	r2, [r3, #8]
   10e60:	60da      	str	r2, [r3, #12]
   10e62:	611a      	str	r2, [r3, #16]
   10e64:	615a      	str	r2, [r3, #20]
   10e66:	7afb      	ldrb	r3, [r7, #11]
   10e68:	f003 0307 	and.w	r3, r3, #7
   10e6c:	b2da      	uxtb	r2, r3
   10e6e:	7c3b      	ldrb	r3, [r7, #16]
   10e70:	f362 0302 	bfi	r3, r2, #0, #3
   10e74:	743b      	strb	r3, [r7, #16]
   10e76:	7c3b      	ldrb	r3, [r7, #16]
   10e78:	f043 0310 	orr.w	r3, r3, #16
   10e7c:	743b      	strb	r3, [r7, #16]
   10e7e:	7c3b      	ldrb	r3, [r7, #16]
   10e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10e84:	743b      	strb	r3, [r7, #16]
   10e86:	7c7b      	ldrb	r3, [r7, #17]
   10e88:	2202      	movs	r2, #2
   10e8a:	f362 1305 	bfi	r3, r2, #4, #2
   10e8e:	747b      	strb	r3, [r7, #17]
   10e90:	7abb      	ldrb	r3, [r7, #10]
   10e92:	753b      	strb	r3, [r7, #20]
   10e94:	2301      	movs	r3, #1
   10e96:	61fb      	str	r3, [r7, #28]
   10e98:	1d3b      	adds	r3, r7, #4
   10e9a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
   10e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e9e:	7b5b      	ldrb	r3, [r3, #13]
   10ea0:	2b00      	cmp	r3, #0
   10ea2:	d003      	beq.n	10eac <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
   10ea4:	2100      	movs	r1, #0
   10ea6:	68f8      	ldr	r0, [r7, #12]
   10ea8:	4b09      	ldr	r3, [pc, #36]	; (10ed0 <n25q256a_write_reg+0x98>)
   10eaa:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   10eac:	f107 0310 	add.w	r3, r7, #16
   10eb0:	4619      	mov	r1, r3
   10eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10eb4:	4b07      	ldr	r3, [pc, #28]	; (10ed4 <n25q256a_write_reg+0x9c>)
   10eb6:	4798      	blx	r3
	if (n25q->xip_mode) {
   10eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10eba:	7b5b      	ldrb	r3, [r3, #13]
   10ebc:	2b00      	cmp	r3, #0
   10ebe:	d003      	beq.n	10ec8 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
   10ec0:	2101      	movs	r1, #1
   10ec2:	68f8      	ldr	r0, [r7, #12]
   10ec4:	4b02      	ldr	r3, [pc, #8]	; (10ed0 <n25q256a_write_reg+0x98>)
   10ec6:	4798      	blx	r3
	}
}
   10ec8:	bf00      	nop
   10eca:	3730      	adds	r7, #48	; 0x30
   10ecc:	46bd      	mov	sp, r7
   10ece:	bd80      	pop	{r7, pc}
   10ed0:	00010cd1 	.word	0x00010cd1
   10ed4:	00006ff1 	.word	0x00006ff1

00010ed8 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
   10ed8:	b580      	push	{r7, lr}
   10eda:	b090      	sub	sp, #64	; 0x40
   10edc:	af00      	add	r7, sp, #0
   10ede:	6078      	str	r0, [r7, #4]
   10ee0:	460b      	mov	r3, r1
   10ee2:	70fb      	strb	r3, [r7, #3]
   10ee4:	4613      	mov	r3, r2
   10ee6:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10ee8:	687b      	ldr	r3, [r7, #4]
   10eea:	681b      	ldr	r3, [r3, #0]
   10eec:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
   10eee:	78bb      	ldrb	r3, [r7, #2]
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	d001      	beq.n	10ef8 <n25q256a_write_enable+0x20>
   10ef4:	2306      	movs	r3, #6
   10ef6:	e000      	b.n	10efa <n25q256a_write_enable+0x22>
   10ef8:	2304      	movs	r3, #4
   10efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
   10efe:	f107 0320 	add.w	r3, r7, #32
   10f02:	2200      	movs	r2, #0
   10f04:	601a      	str	r2, [r3, #0]
   10f06:	605a      	str	r2, [r3, #4]
   10f08:	609a      	str	r2, [r3, #8]
   10f0a:	60da      	str	r2, [r3, #12]
   10f0c:	611a      	str	r2, [r3, #16]
   10f0e:	615a      	str	r2, [r3, #20]
   10f10:	78fb      	ldrb	r3, [r7, #3]
   10f12:	f003 0307 	and.w	r3, r3, #7
   10f16:	b2da      	uxtb	r2, r3
   10f18:	f897 3020 	ldrb.w	r3, [r7, #32]
   10f1c:	f362 0302 	bfi	r3, r2, #0, #3
   10f20:	f887 3020 	strb.w	r3, [r7, #32]
   10f24:	f897 3020 	ldrb.w	r3, [r7, #32]
   10f28:	f043 0310 	orr.w	r3, r3, #16
   10f2c:	f887 3020 	strb.w	r3, [r7, #32]
   10f30:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   10f34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
   10f38:	f107 0308 	add.w	r3, r7, #8
   10f3c:	2200      	movs	r2, #0
   10f3e:	601a      	str	r2, [r3, #0]
   10f40:	605a      	str	r2, [r3, #4]
   10f42:	609a      	str	r2, [r3, #8]
   10f44:	60da      	str	r2, [r3, #12]
   10f46:	611a      	str	r2, [r3, #16]
   10f48:	615a      	str	r2, [r3, #20]
   10f4a:	78fb      	ldrb	r3, [r7, #3]
   10f4c:	f003 0307 	and.w	r3, r3, #7
   10f50:	b2da      	uxtb	r2, r3
   10f52:	7a3b      	ldrb	r3, [r7, #8]
   10f54:	f362 0302 	bfi	r3, r2, #0, #3
   10f58:	723b      	strb	r3, [r7, #8]
   10f5a:	7a3b      	ldrb	r3, [r7, #8]
   10f5c:	f043 0310 	orr.w	r3, r3, #16
   10f60:	723b      	strb	r3, [r7, #8]
   10f62:	7a3b      	ldrb	r3, [r7, #8]
   10f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10f68:	723b      	strb	r3, [r7, #8]
   10f6a:	2305      	movs	r3, #5
   10f6c:	733b      	strb	r3, [r7, #12]
   10f6e:	2301      	movs	r3, #1
   10f70:	617b      	str	r3, [r7, #20]
   10f72:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   10f76:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
   10f78:	f107 0320 	add.w	r3, r7, #32
   10f7c:	4619      	mov	r1, r3
   10f7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   10f80:	4b08      	ldr	r3, [pc, #32]	; (10fa4 <n25q256a_write_enable+0xcc>)
   10f82:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
   10f84:	f107 0308 	add.w	r3, r7, #8
   10f88:	4619      	mov	r1, r3
   10f8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   10f8c:	4b05      	ldr	r3, [pc, #20]	; (10fa4 <n25q256a_write_enable+0xcc>)
   10f8e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
   10f90:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   10f94:	f003 0302 	and.w	r3, r3, #2
   10f98:	2b00      	cmp	r3, #0
   10f9a:	d0ed      	beq.n	10f78 <n25q256a_write_enable+0xa0>
}
   10f9c:	bf00      	nop
   10f9e:	3740      	adds	r7, #64	; 0x40
   10fa0:	46bd      	mov	sp, r7
   10fa2:	bd80      	pop	{r7, pc}
   10fa4:	00006ff1 	.word	0x00006ff1

00010fa8 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
   10fa8:	b590      	push	{r4, r7, lr}
   10faa:	b087      	sub	sp, #28
   10fac:	af00      	add	r7, sp, #0
   10fae:	6078      	str	r0, [r7, #4]
   10fb0:	460b      	mov	r3, r1
   10fb2:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
   10fb4:	687b      	ldr	r3, [r7, #4]
   10fb6:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10fb8:	68fb      	ldr	r3, [r7, #12]
   10fba:	7b1b      	ldrb	r3, [r3, #12]
   10fbc:	2b00      	cmp	r3, #0
   10fbe:	d001      	beq.n	10fc4 <n25q256a_switch_mode+0x1c>
   10fc0:	2306      	movs	r3, #6
   10fc2:	e000      	b.n	10fc6 <n25q256a_switch_mode+0x1e>
   10fc4:	2300      	movs	r3, #0
   10fc6:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   10fc8:	7afb      	ldrb	r3, [r7, #11]
   10fca:	2265      	movs	r2, #101	; 0x65
   10fcc:	4619      	mov	r1, r3
   10fce:	6878      	ldr	r0, [r7, #4]
   10fd0:	4b25      	ldr	r3, [pc, #148]	; (11068 <n25q256a_switch_mode+0xc0>)
   10fd2:	4798      	blx	r3
   10fd4:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
   10fd6:	2300      	movs	r3, #0
   10fd8:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
   10fda:	68fb      	ldr	r3, [r7, #12]
   10fdc:	7b1b      	ldrb	r3, [r3, #12]
   10fde:	78fa      	ldrb	r2, [r7, #3]
   10fe0:	429a      	cmp	r2, r3
   10fe2:	d03d      	beq.n	11060 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
   10fe4:	78fb      	ldrb	r3, [r7, #3]
   10fe6:	2b00      	cmp	r3, #0
   10fe8:	d00b      	beq.n	11002 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
   10fea:	697b      	ldr	r3, [r7, #20]
   10fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10ff0:	2b00      	cmp	r3, #0
   10ff2:	d011      	beq.n	11018 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
   10ff4:	697b      	ldr	r3, [r7, #20]
   10ff6:	f003 031f 	and.w	r3, r3, #31
   10ffa:	617b      	str	r3, [r7, #20]
			modify = 1;
   10ffc:	2301      	movs	r3, #1
   10ffe:	74fb      	strb	r3, [r7, #19]
   11000:	e00a      	b.n	11018 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
   11002:	697b      	ldr	r3, [r7, #20]
   11004:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11008:	2b00      	cmp	r3, #0
   1100a:	d105      	bne.n	11018 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
   1100c:	697b      	ldr	r3, [r7, #20]
   1100e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   11012:	617b      	str	r3, [r7, #20]
			modify = 1;
   11014:	2301      	movs	r3, #1
   11016:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
   11018:	7cfb      	ldrb	r3, [r7, #19]
   1101a:	2b00      	cmp	r3, #0
   1101c:	d021      	beq.n	11062 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
   1101e:	68fb      	ldr	r3, [r7, #12]
   11020:	78fa      	ldrb	r2, [r7, #3]
   11022:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
   11024:	7afb      	ldrb	r3, [r7, #11]
   11026:	2201      	movs	r2, #1
   11028:	4619      	mov	r1, r3
   1102a:	6878      	ldr	r0, [r7, #4]
   1102c:	4b0f      	ldr	r3, [pc, #60]	; (1106c <n25q256a_switch_mode+0xc4>)
   1102e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
   11030:	7af9      	ldrb	r1, [r7, #11]
   11032:	697b      	ldr	r3, [r7, #20]
   11034:	2261      	movs	r2, #97	; 0x61
   11036:	6878      	ldr	r0, [r7, #4]
   11038:	4c0d      	ldr	r4, [pc, #52]	; (11070 <n25q256a_switch_mode+0xc8>)
   1103a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   1103c:	78fb      	ldrb	r3, [r7, #3]
   1103e:	2b00      	cmp	r3, #0
   11040:	d001      	beq.n	11046 <n25q256a_switch_mode+0x9e>
   11042:	2306      	movs	r3, #6
   11044:	e000      	b.n	11048 <n25q256a_switch_mode+0xa0>
   11046:	2300      	movs	r3, #0
   11048:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   1104a:	7afb      	ldrb	r3, [r7, #11]
   1104c:	2265      	movs	r2, #101	; 0x65
   1104e:	4619      	mov	r1, r3
   11050:	6878      	ldr	r0, [r7, #4]
   11052:	4b05      	ldr	r3, [pc, #20]	; (11068 <n25q256a_switch_mode+0xc0>)
   11054:	4798      	blx	r3
   11056:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
   11058:	68fb      	ldr	r3, [r7, #12]
   1105a:	78fa      	ldrb	r2, [r7, #3]
   1105c:	731a      	strb	r2, [r3, #12]
   1105e:	e000      	b.n	11062 <n25q256a_switch_mode+0xba>
		return;
   11060:	bf00      	nop
	}
}
   11062:	371c      	adds	r7, #28
   11064:	46bd      	mov	sp, r7
   11066:	bd90      	pop	{r4, r7, pc}
   11068:	00010d9d 	.word	0x00010d9d
   1106c:	00010ed9 	.word	0x00010ed9
   11070:	00010e39 	.word	0x00010e39

00011074 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
   11074:	b580      	push	{r7, lr}
   11076:	b086      	sub	sp, #24
   11078:	af00      	add	r7, sp, #0
   1107a:	60f8      	str	r0, [r7, #12]
   1107c:	60b9      	str	r1, [r7, #8]
   1107e:	607a      	str	r2, [r7, #4]
   11080:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
   11082:	68fb      	ldr	r3, [r7, #12]
   11084:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
   11086:	4a0c      	ldr	r2, [pc, #48]	; (110b8 <n25q256a_construct+0x44>)
   11088:	68b9      	ldr	r1, [r7, #8]
   1108a:	68f8      	ldr	r0, [r7, #12]
   1108c:	4b0b      	ldr	r3, [pc, #44]	; (110bc <n25q256a_construct+0x48>)
   1108e:	4798      	blx	r3
	n25q->quad_mode    = 0;
   11090:	697b      	ldr	r3, [r7, #20]
   11092:	2200      	movs	r2, #0
   11094:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
   11096:	697b      	ldr	r3, [r7, #20]
   11098:	2200      	movs	r2, #0
   1109a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
   1109c:	697b      	ldr	r3, [r7, #20]
   1109e:	687a      	ldr	r2, [r7, #4]
   110a0:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
   110a2:	78fb      	ldrb	r3, [r7, #3]
   110a4:	4619      	mov	r1, r3
   110a6:	68f8      	ldr	r0, [r7, #12]
   110a8:	4b05      	ldr	r3, [pc, #20]	; (110c0 <n25q256a_construct+0x4c>)
   110aa:	4798      	blx	r3
	return me;
   110ac:	68fb      	ldr	r3, [r7, #12]
}
   110ae:	4618      	mov	r0, r3
   110b0:	3718      	adds	r7, #24
   110b2:	46bd      	mov	sp, r7
   110b4:	bd80      	pop	{r7, pc}
   110b6:	bf00      	nop
   110b8:	00020dd4 	.word	0x00020dd4
   110bc:	00011551 	.word	0x00011551
   110c0:	00010fa9 	.word	0x00010fa9

000110c4 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   110c4:	b580      	push	{r7, lr}
   110c6:	b08c      	sub	sp, #48	; 0x30
   110c8:	af00      	add	r7, sp, #0
   110ca:	60f8      	str	r0, [r7, #12]
   110cc:	60b9      	str	r1, [r7, #8]
   110ce:	607a      	str	r2, [r7, #4]
   110d0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   110d2:	68fb      	ldr	r3, [r7, #12]
   110d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   110d6:	68fb      	ldr	r3, [r7, #12]
   110d8:	681b      	ldr	r3, [r3, #0]
   110da:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
   110dc:	f107 0310 	add.w	r3, r7, #16
   110e0:	2200      	movs	r2, #0
   110e2:	601a      	str	r2, [r3, #0]
   110e4:	605a      	str	r2, [r3, #4]
   110e6:	609a      	str	r2, [r3, #8]
   110e8:	60da      	str	r2, [r3, #12]
   110ea:	611a      	str	r2, [r3, #16]
   110ec:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   110ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   110f0:	7b1b      	ldrb	r3, [r3, #12]
   110f2:	2b00      	cmp	r3, #0
   110f4:	d001      	beq.n	110fa <n25q256a_read+0x36>
   110f6:	2206      	movs	r2, #6
   110f8:	e000      	b.n	110fc <n25q256a_read+0x38>
   110fa:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
   110fc:	7c3b      	ldrb	r3, [r7, #16]
   110fe:	f362 0302 	bfi	r3, r2, #0, #3
   11102:	743b      	strb	r3, [r7, #16]
   11104:	7c3b      	ldrb	r3, [r7, #16]
   11106:	f043 0310 	orr.w	r3, r3, #16
   1110a:	743b      	strb	r3, [r7, #16]
   1110c:	7c3b      	ldrb	r3, [r7, #16]
   1110e:	f043 0320 	orr.w	r3, r3, #32
   11112:	743b      	strb	r3, [r7, #16]
   11114:	7c3b      	ldrb	r3, [r7, #16]
   11116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1111a:	743b      	strb	r3, [r7, #16]
   1111c:	7c7b      	ldrb	r3, [r7, #17]
   1111e:	2201      	movs	r2, #1
   11120:	f362 1305 	bfi	r3, r2, #4, #2
   11124:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
   11126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11128:	7b1b      	ldrb	r3, [r3, #12]
   1112a:	2b00      	cmp	r3, #0
   1112c:	d001      	beq.n	11132 <n25q256a_read+0x6e>
   1112e:	220a      	movs	r2, #10
   11130:	e000      	b.n	11134 <n25q256a_read+0x70>
   11132:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
   11134:	7cbb      	ldrb	r3, [r7, #18]
   11136:	f362 0304 	bfi	r3, r2, #0, #5
   1113a:	74bb      	strb	r3, [r7, #18]
   1113c:	230b      	movs	r3, #11
   1113e:	753b      	strb	r3, [r7, #20]
   11140:	687b      	ldr	r3, [r7, #4]
   11142:	61bb      	str	r3, [r7, #24]
   11144:	683b      	ldr	r3, [r7, #0]
   11146:	61fb      	str	r3, [r7, #28]
   11148:	68bb      	ldr	r3, [r7, #8]
   1114a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
   1114c:	f107 0310 	add.w	r3, r7, #16
   11150:	4619      	mov	r1, r3
   11152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11154:	4b03      	ldr	r3, [pc, #12]	; (11164 <n25q256a_read+0xa0>)
   11156:	4798      	blx	r3
	return ERR_NONE;
   11158:	2300      	movs	r3, #0
}
   1115a:	4618      	mov	r0, r3
   1115c:	3730      	adds	r7, #48	; 0x30
   1115e:	46bd      	mov	sp, r7
   11160:	bd80      	pop	{r7, pc}
   11162:	bf00      	nop
   11164:	00006ff1 	.word	0x00006ff1

00011168 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   11168:	b580      	push	{r7, lr}
   1116a:	b08c      	sub	sp, #48	; 0x30
   1116c:	af00      	add	r7, sp, #0
   1116e:	60f8      	str	r0, [r7, #12]
   11170:	60b9      	str	r1, [r7, #8]
   11172:	607a      	str	r2, [r7, #4]
   11174:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   11176:	68fb      	ldr	r3, [r7, #12]
   11178:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   1117a:	68fb      	ldr	r3, [r7, #12]
   1117c:	681b      	ldr	r3, [r3, #0]
   1117e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
   11180:	f107 0310 	add.w	r3, r7, #16
   11184:	2200      	movs	r2, #0
   11186:	601a      	str	r2, [r3, #0]
   11188:	605a      	str	r2, [r3, #4]
   1118a:	609a      	str	r2, [r3, #8]
   1118c:	60da      	str	r2, [r3, #12]
   1118e:	611a      	str	r2, [r3, #16]
   11190:	615a      	str	r2, [r3, #20]
   11192:	7c3b      	ldrb	r3, [r7, #16]
   11194:	f043 0310 	orr.w	r3, r3, #16
   11198:	743b      	strb	r3, [r7, #16]
   1119a:	7c3b      	ldrb	r3, [r7, #16]
   1119c:	f043 0320 	orr.w	r3, r3, #32
   111a0:	743b      	strb	r3, [r7, #16]
   111a2:	7c3b      	ldrb	r3, [r7, #16]
   111a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   111a8:	743b      	strb	r3, [r7, #16]
   111aa:	7c7b      	ldrb	r3, [r7, #17]
   111ac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   111b0:	747b      	strb	r3, [r7, #17]
   111b2:	2302      	movs	r3, #2
   111b4:	753b      	strb	r3, [r7, #20]
   111b6:	687b      	ldr	r3, [r7, #4]
   111b8:	61bb      	str	r3, [r7, #24]
   111ba:	683b      	ldr	r3, [r7, #0]
   111bc:	61fb      	str	r3, [r7, #28]
   111be:	68bb      	ldr	r3, [r7, #8]
   111c0:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   111c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   111c4:	7b1b      	ldrb	r3, [r3, #12]
   111c6:	2b00      	cmp	r3, #0
   111c8:	d001      	beq.n	111ce <n25q256a_write+0x66>
   111ca:	2206      	movs	r2, #6
   111cc:	e000      	b.n	111d0 <n25q256a_write+0x68>
   111ce:	2200      	movs	r2, #0
   111d0:	7c3b      	ldrb	r3, [r7, #16]
   111d2:	f362 0302 	bfi	r3, r2, #0, #3
   111d6:	743b      	strb	r3, [r7, #16]
	while (length) {
   111d8:	e035      	b.n	11246 <n25q256a_write+0xde>
		cmd.address = address;
   111da:	687b      	ldr	r3, [r7, #4]
   111dc:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
   111de:	683b      	ldr	r3, [r7, #0]
   111e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   111e4:	d802      	bhi.n	111ec <n25q256a_write+0x84>
			cmd.buf_len = length;
   111e6:	683b      	ldr	r3, [r7, #0]
   111e8:	61fb      	str	r3, [r7, #28]
   111ea:	e002      	b.n	111f2 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
   111ec:	f44f 7380 	mov.w	r3, #256	; 0x100
   111f0:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   111f2:	7c3b      	ldrb	r3, [r7, #16]
   111f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   111f8:	b2db      	uxtb	r3, r3
   111fa:	2201      	movs	r2, #1
   111fc:	4619      	mov	r1, r3
   111fe:	68f8      	ldr	r0, [r7, #12]
   11200:	4b19      	ldr	r3, [pc, #100]	; (11268 <n25q256a_write+0x100>)
   11202:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
   11204:	f107 0310 	add.w	r3, r7, #16
   11208:	4619      	mov	r1, r3
   1120a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1120c:	4b17      	ldr	r3, [pc, #92]	; (1126c <n25q256a_write+0x104>)
   1120e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   11210:	bf00      	nop
   11212:	7c3b      	ldrb	r3, [r7, #16]
   11214:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11218:	b2db      	uxtb	r3, r3
   1121a:	2270      	movs	r2, #112	; 0x70
   1121c:	4619      	mov	r1, r3
   1121e:	68f8      	ldr	r0, [r7, #12]
   11220:	4b13      	ldr	r3, [pc, #76]	; (11270 <n25q256a_write+0x108>)
   11222:	4798      	blx	r3
   11224:	4603      	mov	r3, r0
   11226:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1122a:	2b00      	cmp	r3, #0
   1122c:	d0f1      	beq.n	11212 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
   1122e:	6a3a      	ldr	r2, [r7, #32]
   11230:	69fb      	ldr	r3, [r7, #28]
   11232:	4413      	add	r3, r2
   11234:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
   11236:	69fb      	ldr	r3, [r7, #28]
   11238:	683a      	ldr	r2, [r7, #0]
   1123a:	1ad3      	subs	r3, r2, r3
   1123c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
   1123e:	69fb      	ldr	r3, [r7, #28]
   11240:	687a      	ldr	r2, [r7, #4]
   11242:	4413      	add	r3, r2
   11244:	607b      	str	r3, [r7, #4]
	while (length) {
   11246:	683b      	ldr	r3, [r7, #0]
   11248:	2b00      	cmp	r3, #0
   1124a:	d1c6      	bne.n	111da <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
   1124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1124e:	7b5b      	ldrb	r3, [r3, #13]
   11250:	2b00      	cmp	r3, #0
   11252:	d003      	beq.n	1125c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
   11254:	2101      	movs	r1, #1
   11256:	68f8      	ldr	r0, [r7, #12]
   11258:	4b06      	ldr	r3, [pc, #24]	; (11274 <n25q256a_write+0x10c>)
   1125a:	4798      	blx	r3
	}
	return ERR_NONE;
   1125c:	2300      	movs	r3, #0
}
   1125e:	4618      	mov	r0, r3
   11260:	3730      	adds	r7, #48	; 0x30
   11262:	46bd      	mov	sp, r7
   11264:	bd80      	pop	{r7, pc}
   11266:	bf00      	nop
   11268:	00010ed9 	.word	0x00010ed9
   1126c:	00006ff1 	.word	0x00006ff1
   11270:	00010d9d 	.word	0x00010d9d
   11274:	00010cd1 	.word	0x00010cd1

00011278 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
   11278:	b580      	push	{r7, lr}
   1127a:	b090      	sub	sp, #64	; 0x40
   1127c:	af00      	add	r7, sp, #0
   1127e:	60f8      	str	r0, [r7, #12]
   11280:	60b9      	str	r1, [r7, #8]
   11282:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   11284:	68fb      	ldr	r3, [r7, #12]
   11286:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11288:	68fb      	ldr	r3, [r7, #12]
   1128a:	681b      	ldr	r3, [r3, #0]
   1128c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
   1128e:	f107 0314 	add.w	r3, r7, #20
   11292:	2200      	movs	r2, #0
   11294:	601a      	str	r2, [r3, #0]
   11296:	605a      	str	r2, [r3, #4]
   11298:	609a      	str	r2, [r3, #8]
   1129a:	60da      	str	r2, [r3, #12]
   1129c:	611a      	str	r2, [r3, #16]
   1129e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   112a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   112a2:	7b1b      	ldrb	r3, [r3, #12]
   112a4:	2b00      	cmp	r3, #0
   112a6:	d001      	beq.n	112ac <n25q256a_erase+0x34>
   112a8:	2206      	movs	r2, #6
   112aa:	e000      	b.n	112ae <n25q256a_erase+0x36>
   112ac:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
   112ae:	7d3b      	ldrb	r3, [r7, #20]
   112b0:	f362 0302 	bfi	r3, r2, #0, #3
   112b4:	753b      	strb	r3, [r7, #20]
   112b6:	7d3b      	ldrb	r3, [r7, #20]
   112b8:	f043 0310 	orr.w	r3, r3, #16
   112bc:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
   112be:	687b      	ldr	r3, [r7, #4]
   112c0:	4a56      	ldr	r2, [pc, #344]	; (1141c <n25q256a_erase+0x1a4>)
   112c2:	4293      	cmp	r3, r2
   112c4:	bf94      	ite	ls
   112c6:	2301      	movls	r3, #1
   112c8:	2300      	movhi	r3, #0
   112ca:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
   112cc:	7d3b      	ldrb	r3, [r7, #20]
   112ce:	f362 1345 	bfi	r3, r2, #5, #1
   112d2:	753b      	strb	r3, [r7, #20]
   112d4:	7d7b      	ldrb	r3, [r7, #21]
   112d6:	2202      	movs	r2, #2
   112d8:	f362 1305 	bfi	r3, r2, #4, #2
   112dc:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
   112de:	68bb      	ldr	r3, [r7, #8]
   112e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
   112e2:	687b      	ldr	r3, [r7, #4]
   112e4:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
   112e6:	2300      	movs	r3, #0
   112e8:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
   112ea:	687b      	ldr	r3, [r7, #4]
   112ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
   112f0:	2b00      	cmp	r3, #0
   112f2:	d104      	bne.n	112fe <n25q256a_erase+0x86>
   112f4:	68bb      	ldr	r3, [r7, #8]
   112f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
   112fa:	2b00      	cmp	r3, #0
   112fc:	d002      	beq.n	11304 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
   112fe:	f06f 030c 	mvn.w	r3, #12
   11302:	e087      	b.n	11414 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
   11304:	687b      	ldr	r3, [r7, #4]
   11306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   1130a:	d368      	bcc.n	113de <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
   1130c:	23c7      	movs	r3, #199	; 0xc7
   1130e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   11310:	7d3b      	ldrb	r3, [r7, #20]
   11312:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11316:	b2db      	uxtb	r3, r3
   11318:	2201      	movs	r2, #1
   1131a:	4619      	mov	r1, r3
   1131c:	68f8      	ldr	r0, [r7, #12]
   1131e:	4b40      	ldr	r3, [pc, #256]	; (11420 <n25q256a_erase+0x1a8>)
   11320:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
   11322:	f107 0314 	add.w	r3, r7, #20
   11326:	4619      	mov	r1, r3
   11328:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1132a:	4b3e      	ldr	r3, [pc, #248]	; (11424 <n25q256a_erase+0x1ac>)
   1132c:	4798      	blx	r3
   1132e:	e059      	b.n	113e4 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
   11330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11332:	b29b      	uxth	r3, r3
   11334:	2b00      	cmp	r3, #0
   11336:	d11f      	bne.n	11378 <n25q256a_erase+0x100>
   11338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1133a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1133e:	d31b      	bcc.n	11378 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
   11340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11342:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
   11344:	23d8      	movs	r3, #216	; 0xd8
   11346:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   11348:	7d3b      	ldrb	r3, [r7, #20]
   1134a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1134e:	b2db      	uxtb	r3, r3
   11350:	2201      	movs	r2, #1
   11352:	4619      	mov	r1, r3
   11354:	68f8      	ldr	r0, [r7, #12]
   11356:	4b32      	ldr	r3, [pc, #200]	; (11420 <n25q256a_erase+0x1a8>)
   11358:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   1135a:	f107 0314 	add.w	r3, r7, #20
   1135e:	4619      	mov	r1, r3
   11360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11362:	4b30      	ldr	r3, [pc, #192]	; (11424 <n25q256a_erase+0x1ac>)
   11364:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
   11366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11368:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   1136c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
   1136e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11370:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   11374:	63bb      	str	r3, [r7, #56]	; 0x38
   11376:	e023      	b.n	113c0 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
   11378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1137a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1137e:	d31b      	bcc.n	113b8 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
   11380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11382:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
   11384:	2320      	movs	r3, #32
   11386:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   11388:	7d3b      	ldrb	r3, [r7, #20]
   1138a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1138e:	b2db      	uxtb	r3, r3
   11390:	2201      	movs	r2, #1
   11392:	4619      	mov	r1, r3
   11394:	68f8      	ldr	r0, [r7, #12]
   11396:	4b22      	ldr	r3, [pc, #136]	; (11420 <n25q256a_erase+0x1a8>)
   11398:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   1139a:	f107 0314 	add.w	r3, r7, #20
   1139e:	4619      	mov	r1, r3
   113a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   113a2:	4b20      	ldr	r3, [pc, #128]	; (11424 <n25q256a_erase+0x1ac>)
   113a4:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
   113a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   113a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   113ac:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
   113ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   113b0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   113b4:	63bb      	str	r3, [r7, #56]	; 0x38
   113b6:	e003      	b.n	113c0 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
   113b8:	f06f 030c 	mvn.w	r3, #12
   113bc:	637b      	str	r3, [r7, #52]	; 0x34
				break;
   113be:	e011      	b.n	113e4 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   113c0:	bf00      	nop
   113c2:	7d3b      	ldrb	r3, [r7, #20]
   113c4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   113c8:	b2db      	uxtb	r3, r3
   113ca:	2270      	movs	r2, #112	; 0x70
   113cc:	4619      	mov	r1, r3
   113ce:	68f8      	ldr	r0, [r7, #12]
   113d0:	4b15      	ldr	r3, [pc, #84]	; (11428 <n25q256a_erase+0x1b0>)
   113d2:	4798      	blx	r3
   113d4:	4603      	mov	r3, r0
   113d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   113da:	2b00      	cmp	r3, #0
   113dc:	d0f1      	beq.n	113c2 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
   113de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   113e0:	2b00      	cmp	r3, #0
   113e2:	d1a5      	bne.n	11330 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   113e4:	bf00      	nop
   113e6:	7d3b      	ldrb	r3, [r7, #20]
   113e8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   113ec:	b2db      	uxtb	r3, r3
   113ee:	2270      	movs	r2, #112	; 0x70
   113f0:	4619      	mov	r1, r3
   113f2:	68f8      	ldr	r0, [r7, #12]
   113f4:	4b0c      	ldr	r3, [pc, #48]	; (11428 <n25q256a_erase+0x1b0>)
   113f6:	4798      	blx	r3
   113f8:	4603      	mov	r3, r0
   113fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
   113fe:	2b00      	cmp	r3, #0
   11400:	d0f1      	beq.n	113e6 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
   11402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11404:	7b5b      	ldrb	r3, [r3, #13]
   11406:	2b00      	cmp	r3, #0
   11408:	d003      	beq.n	11412 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
   1140a:	2101      	movs	r1, #1
   1140c:	68f8      	ldr	r0, [r7, #12]
   1140e:	4b07      	ldr	r3, [pc, #28]	; (1142c <n25q256a_erase+0x1b4>)
   11410:	4798      	blx	r3
	}
	return rc;
   11412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   11414:	4618      	mov	r0, r3
   11416:	3740      	adds	r7, #64	; 0x40
   11418:	46bd      	mov	sp, r7
   1141a:	bd80      	pop	{r7, pc}
   1141c:	001fffff 	.word	0x001fffff
   11420:	00010ed9 	.word	0x00010ed9
   11424:	00006ff1 	.word	0x00006ff1
   11428:	00010d9d 	.word	0x00010d9d
   1142c:	00010cd1 	.word	0x00010cd1

00011430 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
   11430:	b590      	push	{r4, r7, lr}
   11432:	b085      	sub	sp, #20
   11434:	af00      	add	r7, sp, #0
   11436:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
   11438:	687b      	ldr	r3, [r7, #4]
   1143a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   1143c:	68fb      	ldr	r3, [r7, #12]
   1143e:	7b1b      	ldrb	r3, [r3, #12]
   11440:	2b00      	cmp	r3, #0
   11442:	d001      	beq.n	11448 <n25q256a_enable_xip+0x18>
   11444:	2306      	movs	r3, #6
   11446:	e000      	b.n	1144a <n25q256a_enable_xip+0x1a>
   11448:	2300      	movs	r3, #0
   1144a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
   1144c:	68fb      	ldr	r3, [r7, #12]
   1144e:	7b5b      	ldrb	r3, [r3, #13]
   11450:	2b00      	cmp	r3, #0
   11452:	d129      	bne.n	114a8 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   11454:	7afb      	ldrb	r3, [r7, #11]
   11456:	2285      	movs	r2, #133	; 0x85
   11458:	4619      	mov	r1, r3
   1145a:	6878      	ldr	r0, [r7, #4]
   1145c:	4b15      	ldr	r3, [pc, #84]	; (114b4 <n25q256a_enable_xip+0x84>)
   1145e:	4798      	blx	r3
   11460:	4603      	mov	r3, r0
   11462:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
   11464:	7abb      	ldrb	r3, [r7, #10]
   11466:	f003 0308 	and.w	r3, r3, #8
   1146a:	2b00      	cmp	r3, #0
   1146c:	d015      	beq.n	1149a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
   1146e:	7abb      	ldrb	r3, [r7, #10]
   11470:	f023 0308 	bic.w	r3, r3, #8
   11474:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
   11476:	7abb      	ldrb	r3, [r7, #10]
   11478:	7af9      	ldrb	r1, [r7, #11]
   1147a:	2281      	movs	r2, #129	; 0x81
   1147c:	6878      	ldr	r0, [r7, #4]
   1147e:	4c0e      	ldr	r4, [pc, #56]	; (114b8 <n25q256a_enable_xip+0x88>)
   11480:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   11482:	bf00      	nop
   11484:	7afb      	ldrb	r3, [r7, #11]
   11486:	2270      	movs	r2, #112	; 0x70
   11488:	4619      	mov	r1, r3
   1148a:	6878      	ldr	r0, [r7, #4]
   1148c:	4b09      	ldr	r3, [pc, #36]	; (114b4 <n25q256a_enable_xip+0x84>)
   1148e:	4798      	blx	r3
   11490:	4603      	mov	r3, r0
   11492:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11496:	2b00      	cmp	r3, #0
   11498:	d0f4      	beq.n	11484 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
   1149a:	68fb      	ldr	r3, [r7, #12]
   1149c:	2201      	movs	r2, #1
   1149e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
   114a0:	2101      	movs	r1, #1
   114a2:	6878      	ldr	r0, [r7, #4]
   114a4:	4b05      	ldr	r3, [pc, #20]	; (114bc <n25q256a_enable_xip+0x8c>)
   114a6:	4798      	blx	r3
	}
	return ERR_NONE;
   114a8:	2300      	movs	r3, #0
}
   114aa:	4618      	mov	r0, r3
   114ac:	3714      	adds	r7, #20
   114ae:	46bd      	mov	sp, r7
   114b0:	bd90      	pop	{r4, r7, pc}
   114b2:	bf00      	nop
   114b4:	00010d9d 	.word	0x00010d9d
   114b8:	00010e39 	.word	0x00010e39
   114bc:	00010cd1 	.word	0x00010cd1

000114c0 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
   114c0:	b580      	push	{r7, lr}
   114c2:	b086      	sub	sp, #24
   114c4:	af00      	add	r7, sp, #0
   114c6:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   114c8:	687b      	ldr	r3, [r7, #4]
   114ca:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   114cc:	687b      	ldr	r3, [r7, #4]
   114ce:	681b      	ldr	r3, [r3, #0]
   114d0:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   114d2:	697b      	ldr	r3, [r7, #20]
   114d4:	7b1b      	ldrb	r3, [r3, #12]
   114d6:	2b00      	cmp	r3, #0
   114d8:	d001      	beq.n	114de <n25q256a_disable_xip+0x1e>
   114da:	2306      	movs	r3, #6
   114dc:	e000      	b.n	114e0 <n25q256a_disable_xip+0x20>
   114de:	2300      	movs	r3, #0
   114e0:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
   114e2:	2100      	movs	r1, #0
   114e4:	6878      	ldr	r0, [r7, #4]
   114e6:	4b15      	ldr	r3, [pc, #84]	; (1153c <n25q256a_disable_xip+0x7c>)
   114e8:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   114ea:	7bfb      	ldrb	r3, [r7, #15]
   114ec:	2285      	movs	r2, #133	; 0x85
   114ee:	4619      	mov	r1, r3
   114f0:	6878      	ldr	r0, [r7, #4]
   114f2:	4b13      	ldr	r3, [pc, #76]	; (11540 <n25q256a_disable_xip+0x80>)
   114f4:	4798      	blx	r3
   114f6:	4603      	mov	r3, r0
   114f8:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
   114fa:	7bbb      	ldrb	r3, [r7, #14]
   114fc:	f003 0308 	and.w	r3, r3, #8
   11500:	2b00      	cmp	r3, #0
   11502:	d113      	bne.n	1152c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
   11504:	697b      	ldr	r3, [r7, #20]
   11506:	689b      	ldr	r3, [r3, #8]
   11508:	2b00      	cmp	r3, #0
   1150a:	d00f      	beq.n	1152c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
   1150c:	693b      	ldr	r3, [r7, #16]
   1150e:	681b      	ldr	r3, [r3, #0]
   11510:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
   11512:	6938      	ldr	r0, [r7, #16]
   11514:	4b0b      	ldr	r3, [pc, #44]	; (11544 <n25q256a_disable_xip+0x84>)
   11516:	4798      	blx	r3
			n25q->pin_exit_xip();
   11518:	697b      	ldr	r3, [r7, #20]
   1151a:	689b      	ldr	r3, [r3, #8]
   1151c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
   1151e:	68b9      	ldr	r1, [r7, #8]
   11520:	6938      	ldr	r0, [r7, #16]
   11522:	4b09      	ldr	r3, [pc, #36]	; (11548 <n25q256a_disable_xip+0x88>)
   11524:	4798      	blx	r3
			qspi_sync_enable(descr);
   11526:	6938      	ldr	r0, [r7, #16]
   11528:	4b08      	ldr	r3, [pc, #32]	; (1154c <n25q256a_disable_xip+0x8c>)
   1152a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
   1152c:	697b      	ldr	r3, [r7, #20]
   1152e:	2200      	movs	r2, #0
   11530:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   11532:	2300      	movs	r3, #0
}
   11534:	4618      	mov	r0, r3
   11536:	3718      	adds	r7, #24
   11538:	46bd      	mov	sp, r7
   1153a:	bd80      	pop	{r7, pc}
   1153c:	00010cd1 	.word	0x00010cd1
   11540:	00010d9d 	.word	0x00010d9d
   11544:	00006fb5 	.word	0x00006fb5
   11548:	00006f2d 	.word	0x00006f2d
   1154c:	00006f79 	.word	0x00006f79

00011550 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
   11550:	b480      	push	{r7}
   11552:	b085      	sub	sp, #20
   11554:	af00      	add	r7, sp, #0
   11556:	60f8      	str	r0, [r7, #12]
   11558:	60b9      	str	r1, [r7, #8]
   1155a:	607a      	str	r2, [r7, #4]
	me->io        = io;
   1155c:	68fb      	ldr	r3, [r7, #12]
   1155e:	68ba      	ldr	r2, [r7, #8]
   11560:	601a      	str	r2, [r3, #0]
	me->interface = interface;
   11562:	68fb      	ldr	r3, [r7, #12]
   11564:	687a      	ldr	r2, [r7, #4]
   11566:	605a      	str	r2, [r3, #4]

	return me;
   11568:	68fb      	ldr	r3, [r7, #12]
}
   1156a:	4618      	mov	r0, r3
   1156c:	3714      	adds	r7, #20
   1156e:	46bd      	mov	sp, r7
   11570:	f85d 7b04 	ldr.w	r7, [sp], #4
   11574:	4770      	bx	lr

00011576 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
   11576:	b480      	push	{r7}
   11578:	b083      	sub	sp, #12
   1157a:	af00      	add	r7, sp, #0
   1157c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   1157e:	687b      	ldr	r3, [r7, #4]
   11580:	781b      	ldrb	r3, [r3, #0]
   11582:	b29a      	uxth	r2, r3
   11584:	687b      	ldr	r3, [r7, #4]
   11586:	3301      	adds	r3, #1
   11588:	781b      	ldrb	r3, [r3, #0]
   1158a:	b29b      	uxth	r3, r3
   1158c:	021b      	lsls	r3, r3, #8
   1158e:	b29b      	uxth	r3, r3
   11590:	4413      	add	r3, r2
   11592:	b29b      	uxth	r3, r3
}
   11594:	4618      	mov	r0, r3
   11596:	370c      	adds	r7, #12
   11598:	46bd      	mov	sp, r7
   1159a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1159e:	4770      	bx	lr

000115a0 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
   115a0:	b480      	push	{r7}
   115a2:	b083      	sub	sp, #12
   115a4:	af00      	add	r7, sp, #0
   115a6:	6078      	str	r0, [r7, #4]
	return desc[0];
   115a8:	687b      	ldr	r3, [r7, #4]
   115aa:	781b      	ldrb	r3, [r3, #0]
}
   115ac:	4618      	mov	r0, r3
   115ae:	370c      	adds	r7, #12
   115b0:	46bd      	mov	sp, r7
   115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   115b6:	4770      	bx	lr

000115b8 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
   115b8:	b580      	push	{r7, lr}
   115ba:	b082      	sub	sp, #8
   115bc:	af00      	add	r7, sp, #0
   115be:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   115c0:	6878      	ldr	r0, [r7, #4]
   115c2:	4b05      	ldr	r3, [pc, #20]	; (115d8 <usb_desc_next+0x20>)
   115c4:	4798      	blx	r3
   115c6:	4603      	mov	r3, r0
   115c8:	461a      	mov	r2, r3
   115ca:	687b      	ldr	r3, [r7, #4]
   115cc:	4413      	add	r3, r2
}
   115ce:	4618      	mov	r0, r3
   115d0:	3708      	adds	r7, #8
   115d2:	46bd      	mov	sp, r7
   115d4:	bd80      	pop	{r7, pc}
   115d6:	bf00      	nop
   115d8:	000115a1 	.word	0x000115a1

000115dc <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   115dc:	b580      	push	{r7, lr}
   115de:	b08c      	sub	sp, #48	; 0x30
   115e0:	af00      	add	r7, sp, #0
   115e2:	6078      	str	r0, [r7, #4]
   115e4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   115e6:	687b      	ldr	r3, [r7, #4]
   115e8:	689b      	ldr	r3, [r3, #8]
   115ea:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
   115ec:	683b      	ldr	r3, [r7, #0]
   115ee:	681b      	ldr	r3, [r3, #0]
   115f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   115f2:	2300      	movs	r3, #0
   115f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   115f8:	e08f      	b.n	1171a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
   115fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   115fc:	2b00      	cmp	r3, #0
   115fe:	d102      	bne.n	11606 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
   11600:	f06f 0309 	mvn.w	r3, #9
   11604:	e092      	b.n	1172c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
   11606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11608:	789b      	ldrb	r3, [r3, #2]
   1160a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
   1160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1160e:	795b      	ldrb	r3, [r3, #5]
   11610:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
   11612:	7c7b      	ldrb	r3, [r7, #17]
   11614:	2b02      	cmp	r3, #2
   11616:	d002      	beq.n	1161e <cdcdf_acm_enable+0x42>
   11618:	7c7b      	ldrb	r3, [r7, #17]
   1161a:	2b0a      	cmp	r3, #10
   1161c:	d121      	bne.n	11662 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   1161e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11622:	6a3a      	ldr	r2, [r7, #32]
   11624:	5cd2      	ldrb	r2, [r2, r3]
   11626:	7bbb      	ldrb	r3, [r7, #14]
   11628:	429a      	cmp	r2, r3
   1162a:	d102      	bne.n	11632 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
   1162c:	f06f 0311 	mvn.w	r3, #17
   11630:	e07c      	b.n	1172c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
   11632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11636:	6a3a      	ldr	r2, [r7, #32]
   11638:	5cd3      	ldrb	r3, [r2, r3]
   1163a:	2bff      	cmp	r3, #255	; 0xff
   1163c:	d002      	beq.n	11644 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
   1163e:	f06f 031b 	mvn.w	r3, #27
   11642:	e073      	b.n	1172c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
   11644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11648:	7bb9      	ldrb	r1, [r7, #14]
   1164a:	6a3a      	ldr	r2, [r7, #32]
   1164c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   1164e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
   11650:	683b      	ldr	r3, [r7, #0]
   11652:	685b      	ldr	r3, [r3, #4]
   11654:	2205      	movs	r2, #5
   11656:	4619      	mov	r1, r3
   11658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1165a:	4b36      	ldr	r3, [pc, #216]	; (11734 <cdcdf_acm_enable+0x158>)
   1165c:	4798      	blx	r3
   1165e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   11660:	e047      	b.n	116f2 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
   11662:	f06f 0309 	mvn.w	r3, #9
   11666:	e061      	b.n	1172c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
   11668:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1166a:	789b      	ldrb	r3, [r3, #2]
   1166c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
   1166e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11670:	78db      	ldrb	r3, [r3, #3]
   11672:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
   11674:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11676:	3304      	adds	r3, #4
   11678:	4618      	mov	r0, r3
   1167a:	4b2f      	ldr	r3, [pc, #188]	; (11738 <cdcdf_acm_enable+0x15c>)
   1167c:	4798      	blx	r3
   1167e:	4603      	mov	r3, r0
   11680:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
   11682:	7ebb      	ldrb	r3, [r7, #26]
   11684:	7ef9      	ldrb	r1, [r7, #27]
   11686:	8bba      	ldrh	r2, [r7, #28]
   11688:	4618      	mov	r0, r3
   1168a:	4b2c      	ldr	r3, [pc, #176]	; (1173c <cdcdf_acm_enable+0x160>)
   1168c:	4798      	blx	r3
   1168e:	4603      	mov	r3, r0
   11690:	2b00      	cmp	r3, #0
   11692:	d002      	beq.n	1169a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
   11694:	f06f 0313 	mvn.w	r3, #19
   11698:	e048      	b.n	1172c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
   1169a:	7ebb      	ldrb	r3, [r7, #26]
   1169c:	b25b      	sxtb	r3, r3
   1169e:	2b00      	cmp	r3, #0
   116a0:	da0f      	bge.n	116c2 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
   116a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   116a6:	7eb9      	ldrb	r1, [r7, #26]
   116a8:	6a3a      	ldr	r2, [r7, #32]
   116aa:	4413      	add	r3, r2
   116ac:	460a      	mov	r2, r1
   116ae:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
   116b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   116b4:	6a3a      	ldr	r2, [r7, #32]
   116b6:	4413      	add	r3, r2
   116b8:	789b      	ldrb	r3, [r3, #2]
   116ba:	4618      	mov	r0, r3
   116bc:	4b20      	ldr	r3, [pc, #128]	; (11740 <cdcdf_acm_enable+0x164>)
   116be:	4798      	blx	r3
   116c0:	e007      	b.n	116d2 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
   116c2:	7eba      	ldrb	r2, [r7, #26]
   116c4:	6a3b      	ldr	r3, [r7, #32]
   116c6:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
   116c8:	6a3b      	ldr	r3, [r7, #32]
   116ca:	791b      	ldrb	r3, [r3, #4]
   116cc:	4618      	mov	r0, r3
   116ce:	4b1c      	ldr	r3, [pc, #112]	; (11740 <cdcdf_acm_enable+0x164>)
   116d0:	4798      	blx	r3
			}
			desc->sod = ep;
   116d2:	683b      	ldr	r3, [r7, #0]
   116d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   116d6:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
   116d8:	683b      	ldr	r3, [r7, #0]
   116da:	681b      	ldr	r3, [r3, #0]
   116dc:	4618      	mov	r0, r3
   116de:	4b19      	ldr	r3, [pc, #100]	; (11744 <cdcdf_acm_enable+0x168>)
   116e0:	4798      	blx	r3
   116e2:	4602      	mov	r2, r0
   116e4:	683b      	ldr	r3, [r7, #0]
   116e6:	685b      	ldr	r3, [r3, #4]
   116e8:	4619      	mov	r1, r3
   116ea:	4610      	mov	r0, r2
   116ec:	4b16      	ldr	r3, [pc, #88]	; (11748 <cdcdf_acm_enable+0x16c>)
   116ee:	4798      	blx	r3
   116f0:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   116f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   116f4:	2b00      	cmp	r3, #0
   116f6:	d1b7      	bne.n	11668 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
   116f8:	683b      	ldr	r3, [r7, #0]
   116fa:	681b      	ldr	r3, [r3, #0]
   116fc:	4618      	mov	r0, r3
   116fe:	4b11      	ldr	r3, [pc, #68]	; (11744 <cdcdf_acm_enable+0x168>)
   11700:	4798      	blx	r3
   11702:	683b      	ldr	r3, [r7, #0]
   11704:	685b      	ldr	r3, [r3, #4]
   11706:	2204      	movs	r2, #4
   11708:	4619      	mov	r1, r3
   1170a:	4b0a      	ldr	r3, [pc, #40]	; (11734 <cdcdf_acm_enable+0x158>)
   1170c:	4798      	blx	r3
   1170e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   11710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11714:	3301      	adds	r3, #1
   11716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   1171a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1171e:	2b01      	cmp	r3, #1
   11720:	f67f af6b 	bls.w	115fa <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
   11724:	4b09      	ldr	r3, [pc, #36]	; (1174c <cdcdf_acm_enable+0x170>)
   11726:	2201      	movs	r2, #1
   11728:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   1172a:	2300      	movs	r3, #0
}
   1172c:	4618      	mov	r0, r3
   1172e:	3730      	adds	r7, #48	; 0x30
   11730:	46bd      	mov	sp, r7
   11732:	bd80      	pop	{r7, pc}
   11734:	0001299d 	.word	0x0001299d
   11738:	00011577 	.word	0x00011577
   1173c:	00007c65 	.word	0x00007c65
   11740:	00007d51 	.word	0x00007d51
   11744:	000115b9 	.word	0x000115b9
   11748:	000129f9 	.word	0x000129f9
   1174c:	20008d2c 	.word	0x20008d2c

00011750 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   11750:	b580      	push	{r7, lr}
   11752:	b088      	sub	sp, #32
   11754:	af00      	add	r7, sp, #0
   11756:	6078      	str	r0, [r7, #4]
   11758:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   1175a:	687b      	ldr	r3, [r7, #4]
   1175c:	689b      	ldr	r3, [r3, #8]
   1175e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
   11760:	683b      	ldr	r3, [r7, #0]
   11762:	2b00      	cmp	r3, #0
   11764:	d00c      	beq.n	11780 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
   11766:	683b      	ldr	r3, [r7, #0]
   11768:	681b      	ldr	r3, [r3, #0]
   1176a:	795b      	ldrb	r3, [r3, #5]
   1176c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
   1176e:	7c7b      	ldrb	r3, [r7, #17]
   11770:	2b02      	cmp	r3, #2
   11772:	d005      	beq.n	11780 <cdcdf_acm_disable+0x30>
   11774:	7c7b      	ldrb	r3, [r7, #17]
   11776:	2b0a      	cmp	r3, #10
   11778:	d002      	beq.n	11780 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
   1177a:	f06f 0309 	mvn.w	r3, #9
   1177e:	e035      	b.n	117ec <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
   11780:	2300      	movs	r3, #0
   11782:	77fb      	strb	r3, [r7, #31]
   11784:	e01f      	b.n	117c6 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
   11786:	7ffb      	ldrb	r3, [r7, #31]
   11788:	69ba      	ldr	r2, [r7, #24]
   1178a:	5cd3      	ldrb	r3, [r2, r3]
   1178c:	2bff      	cmp	r3, #255	; 0xff
   1178e:	d016      	beq.n	117be <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
   11790:	7ffb      	ldrb	r3, [r7, #31]
   11792:	69ba      	ldr	r2, [r7, #24]
   11794:	21ff      	movs	r1, #255	; 0xff
   11796:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
   11798:	7ffb      	ldrb	r3, [r7, #31]
   1179a:	69ba      	ldr	r2, [r7, #24]
   1179c:	4413      	add	r3, r2
   1179e:	789b      	ldrb	r3, [r3, #2]
   117a0:	2bff      	cmp	r3, #255	; 0xff
   117a2:	d00d      	beq.n	117c0 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
   117a4:	7ffb      	ldrb	r3, [r7, #31]
   117a6:	69ba      	ldr	r2, [r7, #24]
   117a8:	4413      	add	r3, r2
   117aa:	789b      	ldrb	r3, [r3, #2]
   117ac:	4618      	mov	r0, r3
   117ae:	4b11      	ldr	r3, [pc, #68]	; (117f4 <cdcdf_acm_disable+0xa4>)
   117b0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
   117b2:	7ffb      	ldrb	r3, [r7, #31]
   117b4:	69ba      	ldr	r2, [r7, #24]
   117b6:	4413      	add	r3, r2
   117b8:	22ff      	movs	r2, #255	; 0xff
   117ba:	709a      	strb	r2, [r3, #2]
   117bc:	e000      	b.n	117c0 <cdcdf_acm_disable+0x70>
			continue;
   117be:	bf00      	nop
	for (i = 0; i < 2; i++) {
   117c0:	7ffb      	ldrb	r3, [r7, #31]
   117c2:	3301      	adds	r3, #1
   117c4:	77fb      	strb	r3, [r7, #31]
   117c6:	7ffb      	ldrb	r3, [r7, #31]
   117c8:	2b01      	cmp	r3, #1
   117ca:	d9dc      	bls.n	11786 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
   117cc:	69bb      	ldr	r3, [r7, #24]
   117ce:	791b      	ldrb	r3, [r3, #4]
   117d0:	2bff      	cmp	r3, #255	; 0xff
   117d2:	d007      	beq.n	117e4 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
   117d4:	69bb      	ldr	r3, [r7, #24]
   117d6:	791b      	ldrb	r3, [r3, #4]
   117d8:	4618      	mov	r0, r3
   117da:	4b06      	ldr	r3, [pc, #24]	; (117f4 <cdcdf_acm_disable+0xa4>)
   117dc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
   117de:	69bb      	ldr	r3, [r7, #24]
   117e0:	22ff      	movs	r2, #255	; 0xff
   117e2:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
   117e4:	4b04      	ldr	r3, [pc, #16]	; (117f8 <cdcdf_acm_disable+0xa8>)
   117e6:	2200      	movs	r2, #0
   117e8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   117ea:	2300      	movs	r3, #0
}
   117ec:	4618      	mov	r0, r3
   117ee:	3720      	adds	r7, #32
   117f0:	46bd      	mov	sp, r7
   117f2:	bd80      	pop	{r7, pc}
   117f4:	00007d01 	.word	0x00007d01
   117f8:	20008d2c 	.word	0x20008d2c

000117fc <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
   117fc:	b580      	push	{r7, lr}
   117fe:	b084      	sub	sp, #16
   11800:	af00      	add	r7, sp, #0
   11802:	60f8      	str	r0, [r7, #12]
   11804:	460b      	mov	r3, r1
   11806:	607a      	str	r2, [r7, #4]
   11808:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
   1180a:	7afb      	ldrb	r3, [r7, #11]
   1180c:	2b01      	cmp	r3, #1
   1180e:	d009      	beq.n	11824 <cdcdf_acm_ctrl+0x28>
   11810:	2b02      	cmp	r3, #2
   11812:	d00d      	beq.n	11830 <cdcdf_acm_ctrl+0x34>
   11814:	2b00      	cmp	r3, #0
   11816:	d10e      	bne.n	11836 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
   11818:	6879      	ldr	r1, [r7, #4]
   1181a:	68f8      	ldr	r0, [r7, #12]
   1181c:	4b09      	ldr	r3, [pc, #36]	; (11844 <cdcdf_acm_ctrl+0x48>)
   1181e:	4798      	blx	r3
   11820:	4603      	mov	r3, r0
   11822:	e00a      	b.n	1183a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
   11824:	6879      	ldr	r1, [r7, #4]
   11826:	68f8      	ldr	r0, [r7, #12]
   11828:	4b07      	ldr	r3, [pc, #28]	; (11848 <cdcdf_acm_ctrl+0x4c>)
   1182a:	4798      	blx	r3
   1182c:	4603      	mov	r3, r0
   1182e:	e004      	b.n	1183a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
   11830:	f06f 031a 	mvn.w	r3, #26
   11834:	e001      	b.n	1183a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
   11836:	f06f 030c 	mvn.w	r3, #12
	}
}
   1183a:	4618      	mov	r0, r3
   1183c:	3710      	adds	r7, #16
   1183e:	46bd      	mov	sp, r7
   11840:	bd80      	pop	{r7, pc}
   11842:	bf00      	nop
   11844:	000115dd 	.word	0x000115dd
   11848:	00011751 	.word	0x00011751

0001184c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   1184c:	b590      	push	{r4, r7, lr}
   1184e:	b087      	sub	sp, #28
   11850:	af00      	add	r7, sp, #0
   11852:	4603      	mov	r3, r0
   11854:	6039      	str	r1, [r7, #0]
   11856:	71fb      	strb	r3, [r7, #7]
   11858:	4613      	mov	r3, r2
   1185a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
   1185c:	683b      	ldr	r3, [r7, #0]
   1185e:	799a      	ldrb	r2, [r3, #6]
   11860:	79db      	ldrb	r3, [r3, #7]
   11862:	021b      	lsls	r3, r3, #8
   11864:	4313      	orrs	r3, r2
   11866:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
   11868:	4b2b      	ldr	r3, [pc, #172]	; (11918 <cdcdf_acm_set_req+0xcc>)
   1186a:	4798      	blx	r3
   1186c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
   1186e:	683b      	ldr	r3, [r7, #0]
   11870:	785b      	ldrb	r3, [r3, #1]
   11872:	2b20      	cmp	r3, #32
   11874:	d002      	beq.n	1187c <cdcdf_acm_set_req+0x30>
   11876:	2b22      	cmp	r3, #34	; 0x22
   11878:	d034      	beq.n	118e4 <cdcdf_acm_set_req+0x98>
   1187a:	e046      	b.n	1190a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   1187c:	8afb      	ldrh	r3, [r7, #22]
   1187e:	2b07      	cmp	r3, #7
   11880:	d002      	beq.n	11888 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
   11882:	f04f 33ff 	mov.w	r3, #4294967295
   11886:	e042      	b.n	1190e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
   11888:	79bb      	ldrb	r3, [r7, #6]
   1188a:	2b00      	cmp	r3, #0
   1188c:	d107      	bne.n	1189e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
   1188e:	8afa      	ldrh	r2, [r7, #22]
   11890:	79f8      	ldrb	r0, [r7, #7]
   11892:	2300      	movs	r3, #0
   11894:	6939      	ldr	r1, [r7, #16]
   11896:	4c21      	ldr	r4, [pc, #132]	; (1191c <cdcdf_acm_set_req+0xd0>)
   11898:	47a0      	blx	r4
   1189a:	4603      	mov	r3, r0
   1189c:	e037      	b.n	1190e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
   1189e:	693a      	ldr	r2, [r7, #16]
   118a0:	f107 0308 	add.w	r3, r7, #8
   118a4:	6810      	ldr	r0, [r2, #0]
   118a6:	6018      	str	r0, [r3, #0]
   118a8:	8891      	ldrh	r1, [r2, #4]
   118aa:	7992      	ldrb	r2, [r2, #6]
   118ac:	8099      	strh	r1, [r3, #4]
   118ae:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
   118b0:	4b1b      	ldr	r3, [pc, #108]	; (11920 <cdcdf_acm_set_req+0xd4>)
   118b2:	681b      	ldr	r3, [r3, #0]
   118b4:	2b00      	cmp	r3, #0
   118b6:	d008      	beq.n	118ca <cdcdf_acm_set_req+0x7e>
   118b8:	4b19      	ldr	r3, [pc, #100]	; (11920 <cdcdf_acm_set_req+0xd4>)
   118ba:	681b      	ldr	r3, [r3, #0]
   118bc:	f107 0208 	add.w	r2, r7, #8
   118c0:	4610      	mov	r0, r2
   118c2:	4798      	blx	r3
   118c4:	4603      	mov	r3, r0
   118c6:	2b00      	cmp	r3, #0
   118c8:	d00a      	beq.n	118e0 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
   118ca:	4b16      	ldr	r3, [pc, #88]	; (11924 <cdcdf_acm_set_req+0xd8>)
   118cc:	f107 0208 	add.w	r2, r7, #8
   118d0:	e892 0003 	ldmia.w	r2, {r0, r1}
   118d4:	6018      	str	r0, [r3, #0]
   118d6:	3304      	adds	r3, #4
   118d8:	8019      	strh	r1, [r3, #0]
   118da:	3302      	adds	r3, #2
   118dc:	0c0a      	lsrs	r2, r1, #16
   118de:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
   118e0:	2300      	movs	r3, #0
   118e2:	e014      	b.n	1190e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
   118e4:	2300      	movs	r3, #0
   118e6:	2200      	movs	r2, #0
   118e8:	2100      	movs	r1, #0
   118ea:	2000      	movs	r0, #0
   118ec:	4c0b      	ldr	r4, [pc, #44]	; (1191c <cdcdf_acm_set_req+0xd0>)
   118ee:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
   118f0:	4b0d      	ldr	r3, [pc, #52]	; (11928 <cdcdf_acm_set_req+0xdc>)
   118f2:	681b      	ldr	r3, [r3, #0]
   118f4:	2b00      	cmp	r3, #0
   118f6:	d006      	beq.n	11906 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
   118f8:	4b0b      	ldr	r3, [pc, #44]	; (11928 <cdcdf_acm_set_req+0xdc>)
   118fa:	681b      	ldr	r3, [r3, #0]
   118fc:	683a      	ldr	r2, [r7, #0]
   118fe:	8852      	ldrh	r2, [r2, #2]
   11900:	b292      	uxth	r2, r2
   11902:	4610      	mov	r0, r2
   11904:	4798      	blx	r3
		}
		return ERR_NONE;
   11906:	2300      	movs	r3, #0
   11908:	e001      	b.n	1190e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
   1190a:	f06f 030c 	mvn.w	r3, #12
	}
}
   1190e:	4618      	mov	r0, r3
   11910:	371c      	adds	r7, #28
   11912:	46bd      	mov	sp, r7
   11914:	bd90      	pop	{r4, r7, pc}
   11916:	bf00      	nop
   11918:	00012899 	.word	0x00012899
   1191c:	0001270d 	.word	0x0001270d
   11920:	20008d40 	.word	0x20008d40
   11924:	20008d34 	.word	0x20008d34
   11928:	20008d3c 	.word	0x20008d3c

0001192c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   1192c:	b590      	push	{r4, r7, lr}
   1192e:	b085      	sub	sp, #20
   11930:	af00      	add	r7, sp, #0
   11932:	4603      	mov	r3, r0
   11934:	6039      	str	r1, [r7, #0]
   11936:	71fb      	strb	r3, [r7, #7]
   11938:	4613      	mov	r3, r2
   1193a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
   1193c:	683b      	ldr	r3, [r7, #0]
   1193e:	799a      	ldrb	r2, [r3, #6]
   11940:	79db      	ldrb	r3, [r3, #7]
   11942:	021b      	lsls	r3, r3, #8
   11944:	4313      	orrs	r3, r2
   11946:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
   11948:	79bb      	ldrb	r3, [r7, #6]
   1194a:	2b01      	cmp	r3, #1
   1194c:	d101      	bne.n	11952 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
   1194e:	2300      	movs	r3, #0
   11950:	e013      	b.n	1197a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
   11952:	683b      	ldr	r3, [r7, #0]
   11954:	785b      	ldrb	r3, [r3, #1]
   11956:	2b21      	cmp	r3, #33	; 0x21
   11958:	d10d      	bne.n	11976 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   1195a:	89fb      	ldrh	r3, [r7, #14]
   1195c:	2b07      	cmp	r3, #7
   1195e:	d002      	beq.n	11966 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
   11960:	f04f 33ff 	mov.w	r3, #4294967295
   11964:	e009      	b.n	1197a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
   11966:	89fa      	ldrh	r2, [r7, #14]
   11968:	79f8      	ldrb	r0, [r7, #7]
   1196a:	2300      	movs	r3, #0
   1196c:	4905      	ldr	r1, [pc, #20]	; (11984 <cdcdf_acm_get_req+0x58>)
   1196e:	4c06      	ldr	r4, [pc, #24]	; (11988 <cdcdf_acm_get_req+0x5c>)
   11970:	47a0      	blx	r4
   11972:	4603      	mov	r3, r0
   11974:	e001      	b.n	1197a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
   11976:	f06f 030c 	mvn.w	r3, #12
	}
}
   1197a:	4618      	mov	r0, r3
   1197c:	3714      	adds	r7, #20
   1197e:	46bd      	mov	sp, r7
   11980:	bd90      	pop	{r4, r7, pc}
   11982:	bf00      	nop
   11984:	20008d34 	.word	0x20008d34
   11988:	0001270d 	.word	0x0001270d

0001198c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   1198c:	b580      	push	{r7, lr}
   1198e:	b082      	sub	sp, #8
   11990:	af00      	add	r7, sp, #0
   11992:	4603      	mov	r3, r0
   11994:	6039      	str	r1, [r7, #0]
   11996:	71fb      	strb	r3, [r7, #7]
   11998:	4613      	mov	r3, r2
   1199a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
   1199c:	683b      	ldr	r3, [r7, #0]
   1199e:	781b      	ldrb	r3, [r3, #0]
   119a0:	095b      	lsrs	r3, r3, #5
   119a2:	b2db      	uxtb	r3, r3
   119a4:	f003 0303 	and.w	r3, r3, #3
   119a8:	2b01      	cmp	r3, #1
   119aa:	d002      	beq.n	119b2 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
   119ac:	f06f 0309 	mvn.w	r3, #9
   119b0:	e026      	b.n	11a00 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
   119b2:	683b      	ldr	r3, [r7, #0]
   119b4:	889b      	ldrh	r3, [r3, #4]
   119b6:	b29a      	uxth	r2, r3
   119b8:	4b13      	ldr	r3, [pc, #76]	; (11a08 <cdcdf_acm_req+0x7c>)
   119ba:	781b      	ldrb	r3, [r3, #0]
   119bc:	b29b      	uxth	r3, r3
   119be:	429a      	cmp	r2, r3
   119c0:	d007      	beq.n	119d2 <cdcdf_acm_req+0x46>
   119c2:	683b      	ldr	r3, [r7, #0]
   119c4:	889b      	ldrh	r3, [r3, #4]
   119c6:	b29a      	uxth	r2, r3
   119c8:	4b0f      	ldr	r3, [pc, #60]	; (11a08 <cdcdf_acm_req+0x7c>)
   119ca:	785b      	ldrb	r3, [r3, #1]
   119cc:	b29b      	uxth	r3, r3
   119ce:	429a      	cmp	r2, r3
   119d0:	d114      	bne.n	119fc <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
   119d2:	683b      	ldr	r3, [r7, #0]
   119d4:	781b      	ldrb	r3, [r3, #0]
   119d6:	b25b      	sxtb	r3, r3
   119d8:	2b00      	cmp	r3, #0
   119da:	da07      	bge.n	119ec <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
   119dc:	79ba      	ldrb	r2, [r7, #6]
   119de:	79fb      	ldrb	r3, [r7, #7]
   119e0:	6839      	ldr	r1, [r7, #0]
   119e2:	4618      	mov	r0, r3
   119e4:	4b09      	ldr	r3, [pc, #36]	; (11a0c <cdcdf_acm_req+0x80>)
   119e6:	4798      	blx	r3
   119e8:	4603      	mov	r3, r0
   119ea:	e009      	b.n	11a00 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
   119ec:	79ba      	ldrb	r2, [r7, #6]
   119ee:	79fb      	ldrb	r3, [r7, #7]
   119f0:	6839      	ldr	r1, [r7, #0]
   119f2:	4618      	mov	r0, r3
   119f4:	4b06      	ldr	r3, [pc, #24]	; (11a10 <cdcdf_acm_req+0x84>)
   119f6:	4798      	blx	r3
   119f8:	4603      	mov	r3, r0
   119fa:	e001      	b.n	11a00 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
   119fc:	f06f 0309 	mvn.w	r3, #9
	}
}
   11a00:	4618      	mov	r0, r3
   11a02:	3708      	adds	r7, #8
   11a04:	46bd      	mov	sp, r7
   11a06:	bd80      	pop	{r7, pc}
   11a08:	20008d2c 	.word	0x20008d2c
   11a0c:	0001192d 	.word	0x0001192d
   11a10:	0001184d 	.word	0x0001184d

00011a14 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
   11a14:	b580      	push	{r7, lr}
   11a16:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
   11a18:	4b0b      	ldr	r3, [pc, #44]	; (11a48 <cdcdf_acm_init+0x34>)
   11a1a:	4798      	blx	r3
   11a1c:	4603      	mov	r3, r0
   11a1e:	2b01      	cmp	r3, #1
   11a20:	d902      	bls.n	11a28 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
   11a22:	f06f 0310 	mvn.w	r3, #16
   11a26:	e00d      	b.n	11a44 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
   11a28:	4b08      	ldr	r3, [pc, #32]	; (11a4c <cdcdf_acm_init+0x38>)
   11a2a:	4a09      	ldr	r2, [pc, #36]	; (11a50 <cdcdf_acm_init+0x3c>)
   11a2c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
   11a2e:	4b07      	ldr	r3, [pc, #28]	; (11a4c <cdcdf_acm_init+0x38>)
   11a30:	4a08      	ldr	r2, [pc, #32]	; (11a54 <cdcdf_acm_init+0x40>)
   11a32:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
   11a34:	4805      	ldr	r0, [pc, #20]	; (11a4c <cdcdf_acm_init+0x38>)
   11a36:	4b08      	ldr	r3, [pc, #32]	; (11a58 <cdcdf_acm_init+0x44>)
   11a38:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
   11a3a:	4908      	ldr	r1, [pc, #32]	; (11a5c <cdcdf_acm_init+0x48>)
   11a3c:	2001      	movs	r0, #1
   11a3e:	4b08      	ldr	r3, [pc, #32]	; (11a60 <cdcdf_acm_init+0x4c>)
   11a40:	4798      	blx	r3
	return ERR_NONE;
   11a42:	2300      	movs	r3, #0
}
   11a44:	4618      	mov	r0, r3
   11a46:	bd80      	pop	{r7, pc}
   11a48:	000128b1 	.word	0x000128b1
   11a4c:	20008d20 	.word	0x20008d20
   11a50:	000117fd 	.word	0x000117fd
   11a54:	20008d2c 	.word	0x20008d2c
   11a58:	00012819 	.word	0x00012819
   11a5c:	2000023c 	.word	0x2000023c
   11a60:	00012749 	.word	0x00012749

00011a64 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
   11a64:	b590      	push	{r4, r7, lr}
   11a66:	b083      	sub	sp, #12
   11a68:	af00      	add	r7, sp, #0
   11a6a:	6078      	str	r0, [r7, #4]
   11a6c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   11a6e:	4b0b      	ldr	r3, [pc, #44]	; (11a9c <cdcdf_acm_read+0x38>)
   11a70:	4798      	blx	r3
   11a72:	4603      	mov	r3, r0
   11a74:	f083 0301 	eor.w	r3, r3, #1
   11a78:	b2db      	uxtb	r3, r3
   11a7a:	2b00      	cmp	r3, #0
   11a7c:	d002      	beq.n	11a84 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
   11a7e:	f06f 0310 	mvn.w	r3, #16
   11a82:	e007      	b.n	11a94 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
   11a84:	4b06      	ldr	r3, [pc, #24]	; (11aa0 <cdcdf_acm_read+0x3c>)
   11a86:	7918      	ldrb	r0, [r3, #4]
   11a88:	2300      	movs	r3, #0
   11a8a:	683a      	ldr	r2, [r7, #0]
   11a8c:	6879      	ldr	r1, [r7, #4]
   11a8e:	4c05      	ldr	r4, [pc, #20]	; (11aa4 <cdcdf_acm_read+0x40>)
   11a90:	47a0      	blx	r4
   11a92:	4603      	mov	r3, r0
}
   11a94:	4618      	mov	r0, r3
   11a96:	370c      	adds	r7, #12
   11a98:	46bd      	mov	sp, r7
   11a9a:	bd90      	pop	{r4, r7, pc}
   11a9c:	00011b89 	.word	0x00011b89
   11aa0:	20008d2c 	.word	0x20008d2c
   11aa4:	0001270d 	.word	0x0001270d

00011aa8 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
   11aa8:	b590      	push	{r4, r7, lr}
   11aaa:	b083      	sub	sp, #12
   11aac:	af00      	add	r7, sp, #0
   11aae:	6078      	str	r0, [r7, #4]
   11ab0:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   11ab2:	4b0b      	ldr	r3, [pc, #44]	; (11ae0 <cdcdf_acm_write+0x38>)
   11ab4:	4798      	blx	r3
   11ab6:	4603      	mov	r3, r0
   11ab8:	f083 0301 	eor.w	r3, r3, #1
   11abc:	b2db      	uxtb	r3, r3
   11abe:	2b00      	cmp	r3, #0
   11ac0:	d002      	beq.n	11ac8 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
   11ac2:	f06f 0310 	mvn.w	r3, #16
   11ac6:	e007      	b.n	11ad8 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
   11ac8:	4b06      	ldr	r3, [pc, #24]	; (11ae4 <cdcdf_acm_write+0x3c>)
   11aca:	78d8      	ldrb	r0, [r3, #3]
   11acc:	2301      	movs	r3, #1
   11ace:	683a      	ldr	r2, [r7, #0]
   11ad0:	6879      	ldr	r1, [r7, #4]
   11ad2:	4c05      	ldr	r4, [pc, #20]	; (11ae8 <cdcdf_acm_write+0x40>)
   11ad4:	47a0      	blx	r4
   11ad6:	4603      	mov	r3, r0
}
   11ad8:	4618      	mov	r0, r3
   11ada:	370c      	adds	r7, #12
   11adc:	46bd      	mov	sp, r7
   11ade:	bd90      	pop	{r4, r7, pc}
   11ae0:	00011b89 	.word	0x00011b89
   11ae4:	20008d2c 	.word	0x20008d2c
   11ae8:	0001270d 	.word	0x0001270d

00011aec <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
   11aec:	b580      	push	{r7, lr}
   11aee:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
   11af0:	4b05      	ldr	r3, [pc, #20]	; (11b08 <cdcdf_acm_stop_xfer+0x1c>)
   11af2:	78db      	ldrb	r3, [r3, #3]
   11af4:	4618      	mov	r0, r3
   11af6:	4b05      	ldr	r3, [pc, #20]	; (11b0c <cdcdf_acm_stop_xfer+0x20>)
   11af8:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
   11afa:	4b03      	ldr	r3, [pc, #12]	; (11b08 <cdcdf_acm_stop_xfer+0x1c>)
   11afc:	791b      	ldrb	r3, [r3, #4]
   11afe:	4618      	mov	r0, r3
   11b00:	4b02      	ldr	r3, [pc, #8]	; (11b0c <cdcdf_acm_stop_xfer+0x20>)
   11b02:	4798      	blx	r3
}
   11b04:	bf00      	nop
   11b06:	bd80      	pop	{r7, pc}
   11b08:	20008d2c 	.word	0x20008d2c
   11b0c:	00007f29 	.word	0x00007f29

00011b10 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
   11b10:	b580      	push	{r7, lr}
   11b12:	b082      	sub	sp, #8
   11b14:	af00      	add	r7, sp, #0
   11b16:	4603      	mov	r3, r0
   11b18:	6039      	str	r1, [r7, #0]
   11b1a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
   11b1c:	79fb      	ldrb	r3, [r7, #7]
   11b1e:	2b03      	cmp	r3, #3
   11b20:	d822      	bhi.n	11b68 <cdcdf_acm_register_callback+0x58>
   11b22:	a201      	add	r2, pc, #4	; (adr r2, 11b28 <cdcdf_acm_register_callback+0x18>)
   11b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11b28:	00011b39 	.word	0x00011b39
   11b2c:	00011b49 	.word	0x00011b49
   11b30:	00011b59 	.word	0x00011b59
   11b34:	00011b61 	.word	0x00011b61
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
   11b38:	4b0f      	ldr	r3, [pc, #60]	; (11b78 <cdcdf_acm_register_callback+0x68>)
   11b3a:	791b      	ldrb	r3, [r3, #4]
   11b3c:	683a      	ldr	r2, [r7, #0]
   11b3e:	2102      	movs	r1, #2
   11b40:	4618      	mov	r0, r3
   11b42:	4b0e      	ldr	r3, [pc, #56]	; (11b7c <cdcdf_acm_register_callback+0x6c>)
   11b44:	4798      	blx	r3
		break;
   11b46:	e012      	b.n	11b6e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
   11b48:	4b0b      	ldr	r3, [pc, #44]	; (11b78 <cdcdf_acm_register_callback+0x68>)
   11b4a:	78db      	ldrb	r3, [r3, #3]
   11b4c:	683a      	ldr	r2, [r7, #0]
   11b4e:	2102      	movs	r1, #2
   11b50:	4618      	mov	r0, r3
   11b52:	4b0a      	ldr	r3, [pc, #40]	; (11b7c <cdcdf_acm_register_callback+0x6c>)
   11b54:	4798      	blx	r3
		break;
   11b56:	e00a      	b.n	11b6e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
   11b58:	4a09      	ldr	r2, [pc, #36]	; (11b80 <cdcdf_acm_register_callback+0x70>)
   11b5a:	683b      	ldr	r3, [r7, #0]
   11b5c:	6013      	str	r3, [r2, #0]
		break;
   11b5e:	e006      	b.n	11b6e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
   11b60:	4a08      	ldr	r2, [pc, #32]	; (11b84 <cdcdf_acm_register_callback+0x74>)
   11b62:	683b      	ldr	r3, [r7, #0]
   11b64:	6013      	str	r3, [r2, #0]
		break;
   11b66:	e002      	b.n	11b6e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
   11b68:	f06f 030c 	mvn.w	r3, #12
   11b6c:	e000      	b.n	11b70 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
   11b6e:	2300      	movs	r3, #0
}
   11b70:	4618      	mov	r0, r3
   11b72:	3708      	adds	r7, #8
   11b74:	46bd      	mov	sp, r7
   11b76:	bd80      	pop	{r7, pc}
   11b78:	20008d2c 	.word	0x20008d2c
   11b7c:	00008055 	.word	0x00008055
   11b80:	20008d40 	.word	0x20008d40
   11b84:	20008d3c 	.word	0x20008d3c

00011b88 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
   11b88:	b480      	push	{r7}
   11b8a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
   11b8c:	4b03      	ldr	r3, [pc, #12]	; (11b9c <cdcdf_acm_is_enabled+0x14>)
   11b8e:	795b      	ldrb	r3, [r3, #5]
}
   11b90:	4618      	mov	r0, r3
   11b92:	46bd      	mov	sp, r7
   11b94:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b98:	4770      	bx	lr
   11b9a:	bf00      	nop
   11b9c:	20008d2c 	.word	0x20008d2c

00011ba0 <usb_get_u16>:
{
   11ba0:	b480      	push	{r7}
   11ba2:	b083      	sub	sp, #12
   11ba4:	af00      	add	r7, sp, #0
   11ba6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   11ba8:	687b      	ldr	r3, [r7, #4]
   11baa:	781b      	ldrb	r3, [r3, #0]
   11bac:	b29a      	uxth	r2, r3
   11bae:	687b      	ldr	r3, [r7, #4]
   11bb0:	3301      	adds	r3, #1
   11bb2:	781b      	ldrb	r3, [r3, #0]
   11bb4:	b29b      	uxth	r3, r3
   11bb6:	021b      	lsls	r3, r3, #8
   11bb8:	b29b      	uxth	r3, r3
   11bba:	4413      	add	r3, r2
   11bbc:	b29b      	uxth	r3, r3
}
   11bbe:	4618      	mov	r0, r3
   11bc0:	370c      	adds	r7, #12
   11bc2:	46bd      	mov	sp, r7
   11bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   11bc8:	4770      	bx	lr

00011bca <usb_desc_len>:
{
   11bca:	b480      	push	{r7}
   11bcc:	b083      	sub	sp, #12
   11bce:	af00      	add	r7, sp, #0
   11bd0:	6078      	str	r0, [r7, #4]
	return desc[0];
   11bd2:	687b      	ldr	r3, [r7, #4]
   11bd4:	781b      	ldrb	r3, [r3, #0]
}
   11bd6:	4618      	mov	r0, r3
   11bd8:	370c      	adds	r7, #12
   11bda:	46bd      	mov	sp, r7
   11bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
   11be0:	4770      	bx	lr
	...

00011be4 <usb_desc_next>:
{
   11be4:	b580      	push	{r7, lr}
   11be6:	b082      	sub	sp, #8
   11be8:	af00      	add	r7, sp, #0
   11bea:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   11bec:	6878      	ldr	r0, [r7, #4]
   11bee:	4b05      	ldr	r3, [pc, #20]	; (11c04 <usb_desc_next+0x20>)
   11bf0:	4798      	blx	r3
   11bf2:	4603      	mov	r3, r0
   11bf4:	461a      	mov	r2, r3
   11bf6:	687b      	ldr	r3, [r7, #4]
   11bf8:	4413      	add	r3, r2
}
   11bfa:	4618      	mov	r0, r3
   11bfc:	3708      	adds	r7, #8
   11bfe:	46bd      	mov	sp, r7
   11c00:	bd80      	pop	{r7, pc}
   11c02:	bf00      	nop
   11c04:	00011bcb 	.word	0x00011bcb

00011c08 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
   11c08:	b580      	push	{r7, lr}
   11c0a:	b082      	sub	sp, #8
   11c0c:	af00      	add	r7, sp, #0
   11c0e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   11c10:	687b      	ldr	r3, [r7, #4]
   11c12:	3302      	adds	r3, #2
   11c14:	4618      	mov	r0, r3
   11c16:	4b03      	ldr	r3, [pc, #12]	; (11c24 <usb_cfg_desc_total_len+0x1c>)
   11c18:	4798      	blx	r3
   11c1a:	4603      	mov	r3, r0
}
   11c1c:	4618      	mov	r0, r3
   11c1e:	3708      	adds	r7, #8
   11c20:	46bd      	mov	sp, r7
   11c22:	bd80      	pop	{r7, pc}
   11c24:	00011ba1 	.word	0x00011ba1

00011c28 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
   11c28:	b590      	push	{r4, r7, lr}
   11c2a:	b085      	sub	sp, #20
   11c2c:	af00      	add	r7, sp, #0
   11c2e:	4603      	mov	r3, r0
   11c30:	6039      	str	r1, [r7, #0]
   11c32:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
   11c34:	2300      	movs	r3, #0
   11c36:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
   11c38:	683b      	ldr	r3, [r7, #0]
   11c3a:	799a      	ldrb	r2, [r3, #6]
   11c3c:	79db      	ldrb	r3, [r3, #7]
   11c3e:	021b      	lsls	r3, r3, #8
   11c40:	4313      	orrs	r3, r2
   11c42:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
   11c44:	897b      	ldrh	r3, [r7, #10]
   11c46:	2b12      	cmp	r3, #18
   11c48:	d901      	bls.n	11c4e <usbdc_get_dev_desc+0x26>
		length = 0x12;
   11c4a:	2312      	movs	r3, #18
   11c4c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
   11c4e:	68fb      	ldr	r3, [r7, #12]
   11c50:	2b00      	cmp	r3, #0
   11c52:	d10a      	bne.n	11c6a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   11c54:	4b0f      	ldr	r3, [pc, #60]	; (11c94 <usbdc_get_dev_desc+0x6c>)
   11c56:	681b      	ldr	r3, [r3, #0]
   11c58:	6818      	ldr	r0, [r3, #0]
   11c5a:	4b0e      	ldr	r3, [pc, #56]	; (11c94 <usbdc_get_dev_desc+0x6c>)
   11c5c:	681b      	ldr	r3, [r3, #0]
   11c5e:	685b      	ldr	r3, [r3, #4]
   11c60:	2201      	movs	r2, #1
   11c62:	4619      	mov	r1, r3
   11c64:	4b0c      	ldr	r3, [pc, #48]	; (11c98 <usbdc_get_dev_desc+0x70>)
   11c66:	4798      	blx	r3
   11c68:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
   11c6a:	68fb      	ldr	r3, [r7, #12]
   11c6c:	2b00      	cmp	r3, #0
   11c6e:	d101      	bne.n	11c74 <usbdc_get_dev_desc+0x4c>
		return false;
   11c70:	2300      	movs	r3, #0
   11c72:	e00b      	b.n	11c8c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   11c74:	897a      	ldrh	r2, [r7, #10]
   11c76:	79f8      	ldrb	r0, [r7, #7]
   11c78:	2300      	movs	r3, #0
   11c7a:	68f9      	ldr	r1, [r7, #12]
   11c7c:	4c07      	ldr	r4, [pc, #28]	; (11c9c <usbdc_get_dev_desc+0x74>)
   11c7e:	47a0      	blx	r4
   11c80:	4603      	mov	r3, r0
   11c82:	2b00      	cmp	r3, #0
   11c84:	d001      	beq.n	11c8a <usbdc_get_dev_desc+0x62>
		return false;
   11c86:	2300      	movs	r3, #0
   11c88:	e000      	b.n	11c8c <usbdc_get_dev_desc+0x64>
	}
	return true;
   11c8a:	2301      	movs	r3, #1
}
   11c8c:	4618      	mov	r0, r3
   11c8e:	3714      	adds	r7, #20
   11c90:	46bd      	mov	sp, r7
   11c92:	bd90      	pop	{r4, r7, pc}
   11c94:	20008d44 	.word	0x20008d44
   11c98:	0001299d 	.word	0x0001299d
   11c9c:	0001270d 	.word	0x0001270d

00011ca0 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   11ca0:	b590      	push	{r4, r7, lr}
   11ca2:	b087      	sub	sp, #28
   11ca4:	af00      	add	r7, sp, #0
   11ca6:	4603      	mov	r3, r0
   11ca8:	6039      	str	r1, [r7, #0]
   11caa:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   11cac:	2300      	movs	r3, #0
   11cae:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   11cb0:	683b      	ldr	r3, [r7, #0]
   11cb2:	799a      	ldrb	r2, [r3, #6]
   11cb4:	79db      	ldrb	r3, [r3, #7]
   11cb6:	021b      	lsls	r3, r3, #8
   11cb8:	4313      	orrs	r3, r2
   11cba:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   11cbc:	683b      	ldr	r3, [r7, #0]
   11cbe:	885b      	ldrh	r3, [r3, #2]
   11cc0:	b29b      	uxth	r3, r3
   11cc2:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11cc4:	8a7a      	ldrh	r2, [r7, #18]
   11cc6:	4b1e      	ldr	r3, [pc, #120]	; (11d40 <usbdc_get_cfg_desc+0xa0>)
   11cc8:	7f1b      	ldrb	r3, [r3, #28]
   11cca:	3b01      	subs	r3, #1
   11ccc:	4013      	ands	r3, r2
   11cce:	2b00      	cmp	r3, #0
   11cd0:	bf0c      	ite	eq
   11cd2:	2301      	moveq	r3, #1
   11cd4:	2300      	movne	r3, #0
   11cd6:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   11cd8:	697b      	ldr	r3, [r7, #20]
   11cda:	2b00      	cmp	r3, #0
   11cdc:	d10c      	bne.n	11cf8 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   11cde:	4b18      	ldr	r3, [pc, #96]	; (11d40 <usbdc_get_cfg_desc+0xa0>)
   11ce0:	681b      	ldr	r3, [r3, #0]
   11ce2:	6818      	ldr	r0, [r3, #0]
   11ce4:	4b16      	ldr	r3, [pc, #88]	; (11d40 <usbdc_get_cfg_desc+0xa0>)
   11ce6:	681b      	ldr	r3, [r3, #0]
   11ce8:	6859      	ldr	r1, [r3, #4]
   11cea:	7c3b      	ldrb	r3, [r7, #16]
   11cec:	3301      	adds	r3, #1
   11cee:	b2db      	uxtb	r3, r3
   11cf0:	461a      	mov	r2, r3
   11cf2:	4b14      	ldr	r3, [pc, #80]	; (11d44 <usbdc_get_cfg_desc+0xa4>)
   11cf4:	4798      	blx	r3
   11cf6:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   11cf8:	697b      	ldr	r3, [r7, #20]
   11cfa:	2b00      	cmp	r3, #0
   11cfc:	d101      	bne.n	11d02 <usbdc_get_cfg_desc+0x62>
		return false;
   11cfe:	2300      	movs	r3, #0
   11d00:	e019      	b.n	11d36 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   11d02:	6978      	ldr	r0, [r7, #20]
   11d04:	4b10      	ldr	r3, [pc, #64]	; (11d48 <usbdc_get_cfg_desc+0xa8>)
   11d06:	4798      	blx	r3
   11d08:	4603      	mov	r3, r0
   11d0a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   11d0c:	8a7a      	ldrh	r2, [r7, #18]
   11d0e:	89fb      	ldrh	r3, [r7, #14]
   11d10:	429a      	cmp	r2, r3
   11d12:	d802      	bhi.n	11d1a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   11d14:	2300      	movs	r3, #0
   11d16:	747b      	strb	r3, [r7, #17]
   11d18:	e001      	b.n	11d1e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   11d1a:	89fb      	ldrh	r3, [r7, #14]
   11d1c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   11d1e:	8a7a      	ldrh	r2, [r7, #18]
   11d20:	7c7b      	ldrb	r3, [r7, #17]
   11d22:	79f8      	ldrb	r0, [r7, #7]
   11d24:	6979      	ldr	r1, [r7, #20]
   11d26:	4c09      	ldr	r4, [pc, #36]	; (11d4c <usbdc_get_cfg_desc+0xac>)
   11d28:	47a0      	blx	r4
   11d2a:	4603      	mov	r3, r0
   11d2c:	2b00      	cmp	r3, #0
   11d2e:	d001      	beq.n	11d34 <usbdc_get_cfg_desc+0x94>
		return false;
   11d30:	2300      	movs	r3, #0
   11d32:	e000      	b.n	11d36 <usbdc_get_cfg_desc+0x96>
	}
	return true;
   11d34:	2301      	movs	r3, #1
}
   11d36:	4618      	mov	r0, r3
   11d38:	371c      	adds	r7, #28
   11d3a:	46bd      	mov	sp, r7
   11d3c:	bd90      	pop	{r4, r7, pc}
   11d3e:	bf00      	nop
   11d40:	20008d44 	.word	0x20008d44
   11d44:	00012a5d 	.word	0x00012a5d
   11d48:	00011c09 	.word	0x00011c09
   11d4c:	0001270d 	.word	0x0001270d

00011d50 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   11d50:	b590      	push	{r4, r7, lr}
   11d52:	b085      	sub	sp, #20
   11d54:	af00      	add	r7, sp, #0
   11d56:	4603      	mov	r3, r0
   11d58:	6039      	str	r1, [r7, #0]
   11d5a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   11d5c:	683b      	ldr	r3, [r7, #0]
   11d5e:	799a      	ldrb	r2, [r3, #6]
   11d60:	79db      	ldrb	r3, [r3, #7]
   11d62:	021b      	lsls	r3, r3, #8
   11d64:	4313      	orrs	r3, r2
   11d66:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   11d68:	683b      	ldr	r3, [r7, #0]
   11d6a:	885b      	ldrh	r3, [r3, #2]
   11d6c:	b29b      	uxth	r3, r3
   11d6e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11d70:	89fa      	ldrh	r2, [r7, #14]
   11d72:	4b1a      	ldr	r3, [pc, #104]	; (11ddc <usbdc_get_str_desc+0x8c>)
   11d74:	7f1b      	ldrb	r3, [r3, #28]
   11d76:	3b01      	subs	r3, #1
   11d78:	4013      	ands	r3, r2
   11d7a:	2b00      	cmp	r3, #0
   11d7c:	bf0c      	ite	eq
   11d7e:	2301      	moveq	r3, #1
   11d80:	2300      	movne	r3, #0
   11d82:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   11d84:	4b15      	ldr	r3, [pc, #84]	; (11ddc <usbdc_get_str_desc+0x8c>)
   11d86:	681b      	ldr	r3, [r3, #0]
   11d88:	6818      	ldr	r0, [r3, #0]
   11d8a:	4b14      	ldr	r3, [pc, #80]	; (11ddc <usbdc_get_str_desc+0x8c>)
   11d8c:	681b      	ldr	r3, [r3, #0]
   11d8e:	685b      	ldr	r3, [r3, #4]
   11d90:	7b3a      	ldrb	r2, [r7, #12]
   11d92:	4619      	mov	r1, r3
   11d94:	4b12      	ldr	r3, [pc, #72]	; (11de0 <usbdc_get_str_desc+0x90>)
   11d96:	4798      	blx	r3
   11d98:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   11d9a:	68bb      	ldr	r3, [r7, #8]
   11d9c:	2b00      	cmp	r3, #0
   11d9e:	d101      	bne.n	11da4 <usbdc_get_str_desc+0x54>
		return false;
   11da0:	2300      	movs	r3, #0
   11da2:	e017      	b.n	11dd4 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   11da4:	68bb      	ldr	r3, [r7, #8]
   11da6:	781b      	ldrb	r3, [r3, #0]
   11da8:	b29b      	uxth	r3, r3
   11daa:	89fa      	ldrh	r2, [r7, #14]
   11dac:	429a      	cmp	r2, r3
   11dae:	d802      	bhi.n	11db6 <usbdc_get_str_desc+0x66>
		need_zlp = false;
   11db0:	2300      	movs	r3, #0
   11db2:	737b      	strb	r3, [r7, #13]
   11db4:	e002      	b.n	11dbc <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   11db6:	68bb      	ldr	r3, [r7, #8]
   11db8:	781b      	ldrb	r3, [r3, #0]
   11dba:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   11dbc:	89fa      	ldrh	r2, [r7, #14]
   11dbe:	7b7b      	ldrb	r3, [r7, #13]
   11dc0:	79f8      	ldrb	r0, [r7, #7]
   11dc2:	68b9      	ldr	r1, [r7, #8]
   11dc4:	4c07      	ldr	r4, [pc, #28]	; (11de4 <usbdc_get_str_desc+0x94>)
   11dc6:	47a0      	blx	r4
   11dc8:	4603      	mov	r3, r0
   11dca:	2b00      	cmp	r3, #0
   11dcc:	d001      	beq.n	11dd2 <usbdc_get_str_desc+0x82>
		return false;
   11dce:	2300      	movs	r3, #0
   11dd0:	e000      	b.n	11dd4 <usbdc_get_str_desc+0x84>
	}
	return true;
   11dd2:	2301      	movs	r3, #1
}
   11dd4:	4618      	mov	r0, r3
   11dd6:	3714      	adds	r7, #20
   11dd8:	46bd      	mov	sp, r7
   11dda:	bd90      	pop	{r4, r7, pc}
   11ddc:	20008d44 	.word	0x20008d44
   11de0:	00012ad5 	.word	0x00012ad5
   11de4:	0001270d 	.word	0x0001270d

00011de8 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   11de8:	b580      	push	{r7, lr}
   11dea:	b084      	sub	sp, #16
   11dec:	af00      	add	r7, sp, #0
   11dee:	4603      	mov	r3, r0
   11df0:	6039      	str	r1, [r7, #0]
   11df2:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   11df4:	683b      	ldr	r3, [r7, #0]
   11df6:	885b      	ldrh	r3, [r3, #2]
   11df8:	b29b      	uxth	r3, r3
   11dfa:	0a1b      	lsrs	r3, r3, #8
   11dfc:	b29b      	uxth	r3, r3
   11dfe:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   11e00:	7bfb      	ldrb	r3, [r7, #15]
   11e02:	2b02      	cmp	r3, #2
   11e04:	d00d      	beq.n	11e22 <usbdc_get_desc_req+0x3a>
   11e06:	2b03      	cmp	r3, #3
   11e08:	d012      	beq.n	11e30 <usbdc_get_desc_req+0x48>
   11e0a:	2b01      	cmp	r3, #1
   11e0c:	d002      	beq.n	11e14 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   11e0e:	bf00      	nop
	}
	return false;
   11e10:	2300      	movs	r3, #0
   11e12:	e013      	b.n	11e3c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   11e14:	79fb      	ldrb	r3, [r7, #7]
   11e16:	6839      	ldr	r1, [r7, #0]
   11e18:	4618      	mov	r0, r3
   11e1a:	4b0a      	ldr	r3, [pc, #40]	; (11e44 <usbdc_get_desc_req+0x5c>)
   11e1c:	4798      	blx	r3
   11e1e:	4603      	mov	r3, r0
   11e20:	e00c      	b.n	11e3c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   11e22:	79fb      	ldrb	r3, [r7, #7]
   11e24:	6839      	ldr	r1, [r7, #0]
   11e26:	4618      	mov	r0, r3
   11e28:	4b07      	ldr	r3, [pc, #28]	; (11e48 <usbdc_get_desc_req+0x60>)
   11e2a:	4798      	blx	r3
   11e2c:	4603      	mov	r3, r0
   11e2e:	e005      	b.n	11e3c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   11e30:	79fb      	ldrb	r3, [r7, #7]
   11e32:	6839      	ldr	r1, [r7, #0]
   11e34:	4618      	mov	r0, r3
   11e36:	4b05      	ldr	r3, [pc, #20]	; (11e4c <usbdc_get_desc_req+0x64>)
   11e38:	4798      	blx	r3
   11e3a:	4603      	mov	r3, r0
}
   11e3c:	4618      	mov	r0, r3
   11e3e:	3710      	adds	r7, #16
   11e40:	46bd      	mov	sp, r7
   11e42:	bd80      	pop	{r7, pc}
   11e44:	00011c29 	.word	0x00011c29
   11e48:	00011ca1 	.word	0x00011ca1
   11e4c:	00011d51 	.word	0x00011d51

00011e50 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   11e50:	b590      	push	{r4, r7, lr}
   11e52:	b085      	sub	sp, #20
   11e54:	af00      	add	r7, sp, #0
   11e56:	4603      	mov	r3, r0
   11e58:	6039      	str	r1, [r7, #0]
   11e5a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11e5c:	683b      	ldr	r3, [r7, #0]
   11e5e:	781b      	ldrb	r3, [r3, #0]
   11e60:	f003 031f 	and.w	r3, r3, #31
   11e64:	2b00      	cmp	r3, #0
   11e66:	db1b      	blt.n	11ea0 <usbdc_get_status_req+0x50>
   11e68:	2b01      	cmp	r3, #1
   11e6a:	dd02      	ble.n	11e72 <usbdc_get_status_req+0x22>
   11e6c:	2b02      	cmp	r3, #2
   11e6e:	d003      	beq.n	11e78 <usbdc_get_status_req+0x28>
   11e70:	e016      	b.n	11ea0 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   11e72:	2300      	movs	r3, #0
   11e74:	60fb      	str	r3, [r7, #12]
		break;
   11e76:	e015      	b.n	11ea4 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   11e78:	683b      	ldr	r3, [r7, #0]
   11e7a:	889b      	ldrh	r3, [r3, #4]
   11e7c:	b29b      	uxth	r3, r3
   11e7e:	b2db      	uxtb	r3, r3
   11e80:	2102      	movs	r1, #2
   11e82:	4618      	mov	r0, r3
   11e84:	4b0f      	ldr	r3, [pc, #60]	; (11ec4 <usbdc_get_status_req+0x74>)
   11e86:	4798      	blx	r3
   11e88:	4603      	mov	r3, r0
   11e8a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   11e8c:	68fb      	ldr	r3, [r7, #12]
   11e8e:	2b00      	cmp	r3, #0
   11e90:	da01      	bge.n	11e96 <usbdc_get_status_req+0x46>
			return false;
   11e92:	2300      	movs	r3, #0
   11e94:	e012      	b.n	11ebc <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   11e96:	68fb      	ldr	r3, [r7, #12]
   11e98:	f003 0301 	and.w	r3, r3, #1
   11e9c:	60fb      	str	r3, [r7, #12]
		break;
   11e9e:	e001      	b.n	11ea4 <usbdc_get_status_req+0x54>
	default:
		return false;
   11ea0:	2300      	movs	r3, #0
   11ea2:	e00b      	b.n	11ebc <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   11ea4:	4b08      	ldr	r3, [pc, #32]	; (11ec8 <usbdc_get_status_req+0x78>)
   11ea6:	695b      	ldr	r3, [r3, #20]
   11ea8:	89ba      	ldrh	r2, [r7, #12]
   11eaa:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   11eac:	4b06      	ldr	r3, [pc, #24]	; (11ec8 <usbdc_get_status_req+0x78>)
   11eae:	6959      	ldr	r1, [r3, #20]
   11eb0:	79f8      	ldrb	r0, [r7, #7]
   11eb2:	2300      	movs	r3, #0
   11eb4:	2202      	movs	r2, #2
   11eb6:	4c05      	ldr	r4, [pc, #20]	; (11ecc <usbdc_get_status_req+0x7c>)
   11eb8:	47a0      	blx	r4
	return true;
   11eba:	2301      	movs	r3, #1
}
   11ebc:	4618      	mov	r0, r3
   11ebe:	3714      	adds	r7, #20
   11ec0:	46bd      	mov	sp, r7
   11ec2:	bd90      	pop	{r4, r7, pc}
   11ec4:	00008001 	.word	0x00008001
   11ec8:	20008d44 	.word	0x20008d44
   11ecc:	0001270d 	.word	0x0001270d

00011ed0 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   11ed0:	b590      	push	{r4, r7, lr}
   11ed2:	b085      	sub	sp, #20
   11ed4:	af00      	add	r7, sp, #0
   11ed6:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   11ed8:	4b1f      	ldr	r3, [pc, #124]	; (11f58 <usbdc_get_interface+0x88>)
   11eda:	691b      	ldr	r3, [r3, #16]
   11edc:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   11ede:	4b1e      	ldr	r3, [pc, #120]	; (11f58 <usbdc_get_interface+0x88>)
   11ee0:	7f5b      	ldrb	r3, [r3, #29]
   11ee2:	461a      	mov	r2, r3
   11ee4:	687b      	ldr	r3, [r7, #4]
   11ee6:	889b      	ldrh	r3, [r3, #4]
   11ee8:	b29b      	uxth	r3, r3
   11eea:	fa42 f303 	asr.w	r3, r2, r3
   11eee:	f003 0301 	and.w	r3, r3, #1
   11ef2:	2b00      	cmp	r3, #0
   11ef4:	d128      	bne.n	11f48 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   11ef6:	4b18      	ldr	r3, [pc, #96]	; (11f58 <usbdc_get_interface+0x88>)
   11ef8:	695b      	ldr	r3, [r3, #20]
   11efa:	2200      	movs	r2, #0
   11efc:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11efe:	4b16      	ldr	r3, [pc, #88]	; (11f58 <usbdc_get_interface+0x88>)
   11f00:	6959      	ldr	r1, [r3, #20]
   11f02:	2300      	movs	r3, #0
   11f04:	2201      	movs	r2, #1
   11f06:	2000      	movs	r0, #0
   11f08:	4c14      	ldr	r4, [pc, #80]	; (11f5c <usbdc_get_interface+0x8c>)
   11f0a:	47a0      	blx	r4
		return true;
   11f0c:	2301      	movs	r3, #1
   11f0e:	e01f      	b.n	11f50 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   11f10:	68fb      	ldr	r3, [r7, #12]
   11f12:	685b      	ldr	r3, [r3, #4]
   11f14:	687a      	ldr	r2, [r7, #4]
   11f16:	2102      	movs	r1, #2
   11f18:	68f8      	ldr	r0, [r7, #12]
   11f1a:	4798      	blx	r3
   11f1c:	60b8      	str	r0, [r7, #8]
   11f1e:	68bb      	ldr	r3, [r7, #8]
   11f20:	2b00      	cmp	r3, #0
   11f22:	da03      	bge.n	11f2c <usbdc_get_interface+0x5c>
			func = func->next;
   11f24:	68fb      	ldr	r3, [r7, #12]
   11f26:	681b      	ldr	r3, [r3, #0]
   11f28:	60fb      	str	r3, [r7, #12]
   11f2a:	e00d      	b.n	11f48 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   11f2c:	4b0a      	ldr	r3, [pc, #40]	; (11f58 <usbdc_get_interface+0x88>)
   11f2e:	695b      	ldr	r3, [r3, #20]
   11f30:	68ba      	ldr	r2, [r7, #8]
   11f32:	b2d2      	uxtb	r2, r2
   11f34:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11f36:	4b08      	ldr	r3, [pc, #32]	; (11f58 <usbdc_get_interface+0x88>)
   11f38:	6959      	ldr	r1, [r3, #20]
   11f3a:	2300      	movs	r3, #0
   11f3c:	2201      	movs	r2, #1
   11f3e:	2000      	movs	r0, #0
   11f40:	4c06      	ldr	r4, [pc, #24]	; (11f5c <usbdc_get_interface+0x8c>)
   11f42:	47a0      	blx	r4
			return true;
   11f44:	2301      	movs	r3, #1
   11f46:	e003      	b.n	11f50 <usbdc_get_interface+0x80>
	while (NULL != func) {
   11f48:	68fb      	ldr	r3, [r7, #12]
   11f4a:	2b00      	cmp	r3, #0
   11f4c:	d1e0      	bne.n	11f10 <usbdc_get_interface+0x40>
		}
	}
	return false;
   11f4e:	2300      	movs	r3, #0
}
   11f50:	4618      	mov	r0, r3
   11f52:	3714      	adds	r7, #20
   11f54:	46bd      	mov	sp, r7
   11f56:	bd90      	pop	{r4, r7, pc}
   11f58:	20008d44 	.word	0x20008d44
   11f5c:	0001270d 	.word	0x0001270d

00011f60 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   11f60:	b590      	push	{r4, r7, lr}
   11f62:	b083      	sub	sp, #12
   11f64:	af00      	add	r7, sp, #0
   11f66:	4603      	mov	r3, r0
   11f68:	6039      	str	r1, [r7, #0]
   11f6a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   11f6c:	683b      	ldr	r3, [r7, #0]
   11f6e:	785b      	ldrb	r3, [r3, #1]
   11f70:	2b0a      	cmp	r3, #10
   11f72:	d83a      	bhi.n	11fea <usbdc_get_req+0x8a>
   11f74:	a201      	add	r2, pc, #4	; (adr r2, 11f7c <usbdc_get_req+0x1c>)
   11f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11f7a:	bf00      	nop
   11f7c:	00011fd3 	.word	0x00011fd3
   11f80:	00011feb 	.word	0x00011feb
   11f84:	00011feb 	.word	0x00011feb
   11f88:	00011feb 	.word	0x00011feb
   11f8c:	00011feb 	.word	0x00011feb
   11f90:	00011feb 	.word	0x00011feb
   11f94:	00011fa9 	.word	0x00011fa9
   11f98:	00011feb 	.word	0x00011feb
   11f9c:	00011fb7 	.word	0x00011fb7
   11fa0:	00011feb 	.word	0x00011feb
   11fa4:	00011fe1 	.word	0x00011fe1
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   11fa8:	79fb      	ldrb	r3, [r7, #7]
   11faa:	6839      	ldr	r1, [r7, #0]
   11fac:	4618      	mov	r0, r3
   11fae:	4b11      	ldr	r3, [pc, #68]	; (11ff4 <usbdc_get_req+0x94>)
   11fb0:	4798      	blx	r3
   11fb2:	4603      	mov	r3, r0
   11fb4:	e01a      	b.n	11fec <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   11fb6:	4b10      	ldr	r3, [pc, #64]	; (11ff8 <usbdc_get_req+0x98>)
   11fb8:	695b      	ldr	r3, [r3, #20]
   11fba:	4a0f      	ldr	r2, [pc, #60]	; (11ff8 <usbdc_get_req+0x98>)
   11fbc:	7ed2      	ldrb	r2, [r2, #27]
   11fbe:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   11fc0:	4b0d      	ldr	r3, [pc, #52]	; (11ff8 <usbdc_get_req+0x98>)
   11fc2:	6959      	ldr	r1, [r3, #20]
   11fc4:	79f8      	ldrb	r0, [r7, #7]
   11fc6:	2300      	movs	r3, #0
   11fc8:	2201      	movs	r2, #1
   11fca:	4c0c      	ldr	r4, [pc, #48]	; (11ffc <usbdc_get_req+0x9c>)
   11fcc:	47a0      	blx	r4
		return true;
   11fce:	2301      	movs	r3, #1
   11fd0:	e00c      	b.n	11fec <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   11fd2:	79fb      	ldrb	r3, [r7, #7]
   11fd4:	6839      	ldr	r1, [r7, #0]
   11fd6:	4618      	mov	r0, r3
   11fd8:	4b09      	ldr	r3, [pc, #36]	; (12000 <usbdc_get_req+0xa0>)
   11fda:	4798      	blx	r3
   11fdc:	4603      	mov	r3, r0
   11fde:	e005      	b.n	11fec <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   11fe0:	6838      	ldr	r0, [r7, #0]
   11fe2:	4b08      	ldr	r3, [pc, #32]	; (12004 <usbdc_get_req+0xa4>)
   11fe4:	4798      	blx	r3
   11fe6:	4603      	mov	r3, r0
   11fe8:	e000      	b.n	11fec <usbdc_get_req+0x8c>
	default:
		return false;
   11fea:	2300      	movs	r3, #0
	}
}
   11fec:	4618      	mov	r0, r3
   11fee:	370c      	adds	r7, #12
   11ff0:	46bd      	mov	sp, r7
   11ff2:	bd90      	pop	{r4, r7, pc}
   11ff4:	00011de9 	.word	0x00011de9
   11ff8:	20008d44 	.word	0x20008d44
   11ffc:	0001270d 	.word	0x0001270d
   12000:	00011e51 	.word	0x00011e51
   12004:	00011ed1 	.word	0x00011ed1

00012008 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   12008:	b590      	push	{r4, r7, lr}
   1200a:	b083      	sub	sp, #12
   1200c:	af00      	add	r7, sp, #0
   1200e:	4603      	mov	r3, r0
   12010:	6039      	str	r1, [r7, #0]
   12012:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   12014:	683b      	ldr	r3, [r7, #0]
   12016:	781b      	ldrb	r3, [r3, #0]
   12018:	f003 031f 	and.w	r3, r3, #31
   1201c:	2b02      	cmp	r3, #2
   1201e:	d116      	bne.n	1204e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   12020:	683b      	ldr	r3, [r7, #0]
   12022:	88db      	ldrh	r3, [r3, #6]
   12024:	b29b      	uxth	r3, r3
   12026:	2b00      	cmp	r3, #0
   12028:	d001      	beq.n	1202e <usbdc_clear_ftr_req+0x26>
			return false;
   1202a:	2300      	movs	r3, #0
   1202c:	e010      	b.n	12050 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   1202e:	683b      	ldr	r3, [r7, #0]
   12030:	889b      	ldrh	r3, [r3, #4]
   12032:	b29b      	uxth	r3, r3
   12034:	b2db      	uxtb	r3, r3
   12036:	2100      	movs	r1, #0
   12038:	4618      	mov	r0, r3
   1203a:	4b07      	ldr	r3, [pc, #28]	; (12058 <usbdc_clear_ftr_req+0x50>)
   1203c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   1203e:	79f8      	ldrb	r0, [r7, #7]
   12040:	2301      	movs	r3, #1
   12042:	2200      	movs	r2, #0
   12044:	2100      	movs	r1, #0
   12046:	4c05      	ldr	r4, [pc, #20]	; (1205c <usbdc_clear_ftr_req+0x54>)
   12048:	47a0      	blx	r4
		return true;
   1204a:	2301      	movs	r3, #1
   1204c:	e000      	b.n	12050 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   1204e:	2300      	movs	r3, #0
	}
}
   12050:	4618      	mov	r0, r3
   12052:	370c      	adds	r7, #12
   12054:	46bd      	mov	sp, r7
   12056:	bd90      	pop	{r4, r7, pc}
   12058:	00008001 	.word	0x00008001
   1205c:	0001270d 	.word	0x0001270d

00012060 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   12060:	b590      	push	{r4, r7, lr}
   12062:	b083      	sub	sp, #12
   12064:	af00      	add	r7, sp, #0
   12066:	4603      	mov	r3, r0
   12068:	6039      	str	r1, [r7, #0]
   1206a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   1206c:	683b      	ldr	r3, [r7, #0]
   1206e:	781b      	ldrb	r3, [r3, #0]
   12070:	f003 031f 	and.w	r3, r3, #31
   12074:	2b02      	cmp	r3, #2
   12076:	d116      	bne.n	120a6 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   12078:	683b      	ldr	r3, [r7, #0]
   1207a:	88db      	ldrh	r3, [r3, #6]
   1207c:	b29b      	uxth	r3, r3
   1207e:	2b00      	cmp	r3, #0
   12080:	d001      	beq.n	12086 <usbdc_set_ftr_req+0x26>
			return false;
   12082:	2300      	movs	r3, #0
   12084:	e010      	b.n	120a8 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   12086:	683b      	ldr	r3, [r7, #0]
   12088:	889b      	ldrh	r3, [r3, #4]
   1208a:	b29b      	uxth	r3, r3
   1208c:	b2db      	uxtb	r3, r3
   1208e:	2101      	movs	r1, #1
   12090:	4618      	mov	r0, r3
   12092:	4b07      	ldr	r3, [pc, #28]	; (120b0 <usbdc_set_ftr_req+0x50>)
   12094:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   12096:	79f8      	ldrb	r0, [r7, #7]
   12098:	2301      	movs	r3, #1
   1209a:	2200      	movs	r2, #0
   1209c:	2100      	movs	r1, #0
   1209e:	4c05      	ldr	r4, [pc, #20]	; (120b4 <usbdc_set_ftr_req+0x54>)
   120a0:	47a0      	blx	r4
		return true;
   120a2:	2301      	movs	r3, #1
   120a4:	e000      	b.n	120a8 <usbdc_set_ftr_req+0x48>
	default:
		return false;
   120a6:	2300      	movs	r3, #0
	}
}
   120a8:	4618      	mov	r0, r3
   120aa:	370c      	adds	r7, #12
   120ac:	46bd      	mov	sp, r7
   120ae:	bd90      	pop	{r4, r7, pc}
   120b0:	00008001 	.word	0x00008001
   120b4:	0001270d 	.word	0x0001270d

000120b8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   120b8:	b580      	push	{r7, lr}
   120ba:	b082      	sub	sp, #8
   120bc:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   120be:	4b0a      	ldr	r3, [pc, #40]	; (120e8 <usbdc_unconfig+0x30>)
   120c0:	691b      	ldr	r3, [r3, #16]
   120c2:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   120c4:	e008      	b.n	120d8 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   120c6:	687b      	ldr	r3, [r7, #4]
   120c8:	685b      	ldr	r3, [r3, #4]
   120ca:	2200      	movs	r2, #0
   120cc:	2101      	movs	r1, #1
   120ce:	6878      	ldr	r0, [r7, #4]
   120d0:	4798      	blx	r3
		func = func->next;
   120d2:	687b      	ldr	r3, [r7, #4]
   120d4:	681b      	ldr	r3, [r3, #0]
   120d6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   120d8:	687b      	ldr	r3, [r7, #4]
   120da:	2b00      	cmp	r3, #0
   120dc:	d1f3      	bne.n	120c6 <usbdc_unconfig+0xe>
	}
}
   120de:	bf00      	nop
   120e0:	3708      	adds	r7, #8
   120e2:	46bd      	mov	sp, r7
   120e4:	bd80      	pop	{r7, pc}
   120e6:	bf00      	nop
   120e8:	20008d44 	.word	0x20008d44

000120ec <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   120ec:	b580      	push	{r7, lr}
   120ee:	b088      	sub	sp, #32
   120f0:	af00      	add	r7, sp, #0
   120f2:	4603      	mov	r3, r0
   120f4:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   120f6:	2300      	movs	r3, #0
   120f8:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   120fa:	23ff      	movs	r3, #255	; 0xff
   120fc:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   120fe:	79fb      	ldrb	r3, [r7, #7]
   12100:	2b00      	cmp	r3, #0
   12102:	d103      	bne.n	1210c <usbdc_set_config+0x20>
		usbdc_unconfig();
   12104:	4b2e      	ldr	r3, [pc, #184]	; (121c0 <usbdc_set_config+0xd4>)
   12106:	4798      	blx	r3
		return true;
   12108:	2301      	movs	r3, #1
   1210a:	e055      	b.n	121b8 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   1210c:	69bb      	ldr	r3, [r7, #24]
   1210e:	2b00      	cmp	r3, #0
   12110:	d10a      	bne.n	12128 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   12112:	4b2c      	ldr	r3, [pc, #176]	; (121c4 <usbdc_set_config+0xd8>)
   12114:	681b      	ldr	r3, [r3, #0]
   12116:	6818      	ldr	r0, [r3, #0]
   12118:	4b2a      	ldr	r3, [pc, #168]	; (121c4 <usbdc_set_config+0xd8>)
   1211a:	681b      	ldr	r3, [r3, #0]
   1211c:	685b      	ldr	r3, [r3, #4]
   1211e:	79fa      	ldrb	r2, [r7, #7]
   12120:	4619      	mov	r1, r3
   12122:	4b29      	ldr	r3, [pc, #164]	; (121c8 <usbdc_set_config+0xdc>)
   12124:	4798      	blx	r3
   12126:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   12128:	69bb      	ldr	r3, [r7, #24]
   1212a:	2b00      	cmp	r3, #0
   1212c:	d101      	bne.n	12132 <usbdc_set_config+0x46>
		return false;
   1212e:	2300      	movs	r3, #0
   12130:	e042      	b.n	121b8 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   12132:	69b8      	ldr	r0, [r7, #24]
   12134:	4b25      	ldr	r3, [pc, #148]	; (121cc <usbdc_set_config+0xe0>)
   12136:	4798      	blx	r3
   12138:	4603      	mov	r3, r0
   1213a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   1213c:	8abb      	ldrh	r3, [r7, #20]
   1213e:	69ba      	ldr	r2, [r7, #24]
   12140:	4413      	add	r3, r2
   12142:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   12144:	693b      	ldr	r3, [r7, #16]
   12146:	2204      	movs	r2, #4
   12148:	4619      	mov	r1, r3
   1214a:	69b8      	ldr	r0, [r7, #24]
   1214c:	4b20      	ldr	r3, [pc, #128]	; (121d0 <usbdc_set_config+0xe4>)
   1214e:	4798      	blx	r3
   12150:	4603      	mov	r3, r0
   12152:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   12154:	e02c      	b.n	121b0 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   12156:	68fb      	ldr	r3, [r7, #12]
   12158:	3302      	adds	r3, #2
   1215a:	781b      	ldrb	r3, [r3, #0]
   1215c:	7dfa      	ldrb	r2, [r7, #23]
   1215e:	429a      	cmp	r2, r3
   12160:	d018      	beq.n	12194 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   12162:	68fb      	ldr	r3, [r7, #12]
   12164:	789b      	ldrb	r3, [r3, #2]
   12166:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   12168:	4b16      	ldr	r3, [pc, #88]	; (121c4 <usbdc_set_config+0xd8>)
   1216a:	691b      	ldr	r3, [r3, #16]
   1216c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   1216e:	e00c      	b.n	1218a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   12170:	69fb      	ldr	r3, [r7, #28]
   12172:	685b      	ldr	r3, [r3, #4]
   12174:	f107 020c 	add.w	r2, r7, #12
   12178:	2100      	movs	r1, #0
   1217a:	69f8      	ldr	r0, [r7, #28]
   1217c:	4798      	blx	r3
   1217e:	4603      	mov	r3, r0
   12180:	2b00      	cmp	r3, #0
   12182:	d006      	beq.n	12192 <usbdc_set_config+0xa6>
					func = func->next;
   12184:	69fb      	ldr	r3, [r7, #28]
   12186:	681b      	ldr	r3, [r3, #0]
   12188:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   1218a:	69fb      	ldr	r3, [r7, #28]
   1218c:	2b00      	cmp	r3, #0
   1218e:	d1ef      	bne.n	12170 <usbdc_set_config+0x84>
   12190:	e000      	b.n	12194 <usbdc_set_config+0xa8>
				} else {
					break;
   12192:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   12194:	68fb      	ldr	r3, [r7, #12]
   12196:	4618      	mov	r0, r3
   12198:	4b0e      	ldr	r3, [pc, #56]	; (121d4 <usbdc_set_config+0xe8>)
   1219a:	4798      	blx	r3
   1219c:	4603      	mov	r3, r0
   1219e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   121a0:	68fb      	ldr	r3, [r7, #12]
   121a2:	6939      	ldr	r1, [r7, #16]
   121a4:	2204      	movs	r2, #4
   121a6:	4618      	mov	r0, r3
   121a8:	4b09      	ldr	r3, [pc, #36]	; (121d0 <usbdc_set_config+0xe4>)
   121aa:	4798      	blx	r3
   121ac:	4603      	mov	r3, r0
   121ae:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   121b0:	68fb      	ldr	r3, [r7, #12]
   121b2:	2b00      	cmp	r3, #0
   121b4:	d1cf      	bne.n	12156 <usbdc_set_config+0x6a>
	}
	return true;
   121b6:	2301      	movs	r3, #1
}
   121b8:	4618      	mov	r0, r3
   121ba:	3720      	adds	r7, #32
   121bc:	46bd      	mov	sp, r7
   121be:	bd80      	pop	{r7, pc}
   121c0:	000120b9 	.word	0x000120b9
   121c4:	20008d44 	.word	0x20008d44
   121c8:	00012a5d 	.word	0x00012a5d
   121cc:	00011c09 	.word	0x00011c09
   121d0:	0001299d 	.word	0x0001299d
   121d4:	00011be5 	.word	0x00011be5

000121d8 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   121d8:	b580      	push	{r7, lr}
   121da:	b082      	sub	sp, #8
   121dc:	af00      	add	r7, sp, #0
   121de:	4603      	mov	r3, r0
   121e0:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   121e2:	79fb      	ldrb	r3, [r7, #7]
   121e4:	4618      	mov	r0, r3
   121e6:	4b03      	ldr	r3, [pc, #12]	; (121f4 <usbdc_set_address+0x1c>)
   121e8:	4798      	blx	r3
}
   121ea:	bf00      	nop
   121ec:	3708      	adds	r7, #8
   121ee:	46bd      	mov	sp, r7
   121f0:	bd80      	pop	{r7, pc}
   121f2:	bf00      	nop
   121f4:	00007c1d 	.word	0x00007c1d

000121f8 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   121f8:	b590      	push	{r4, r7, lr}
   121fa:	b087      	sub	sp, #28
   121fc:	af00      	add	r7, sp, #0
   121fe:	4603      	mov	r3, r0
   12200:	460a      	mov	r2, r1
   12202:	80fb      	strh	r3, [r7, #6]
   12204:	4613      	mov	r3, r2
   12206:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   12208:	2300      	movs	r3, #0
   1220a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   1220c:	693b      	ldr	r3, [r7, #16]
   1220e:	2b00      	cmp	r3, #0
   12210:	d10b      	bne.n	1222a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   12212:	4b43      	ldr	r3, [pc, #268]	; (12320 <usbdc_set_interface+0x128>)
   12214:	681b      	ldr	r3, [r3, #0]
   12216:	6818      	ldr	r0, [r3, #0]
   12218:	4b41      	ldr	r3, [pc, #260]	; (12320 <usbdc_set_interface+0x128>)
   1221a:	681b      	ldr	r3, [r3, #0]
   1221c:	6859      	ldr	r1, [r3, #4]
   1221e:	4b40      	ldr	r3, [pc, #256]	; (12320 <usbdc_set_interface+0x128>)
   12220:	7edb      	ldrb	r3, [r3, #27]
   12222:	461a      	mov	r2, r3
   12224:	4b3f      	ldr	r3, [pc, #252]	; (12324 <usbdc_set_interface+0x12c>)
   12226:	4798      	blx	r3
   12228:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   1222a:	693b      	ldr	r3, [r7, #16]
   1222c:	2b00      	cmp	r3, #0
   1222e:	d101      	bne.n	12234 <usbdc_set_interface+0x3c>
		return false;
   12230:	2300      	movs	r3, #0
   12232:	e071      	b.n	12318 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   12234:	693b      	ldr	r3, [r7, #16]
   12236:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   12238:	6938      	ldr	r0, [r7, #16]
   1223a:	4b3b      	ldr	r3, [pc, #236]	; (12328 <usbdc_set_interface+0x130>)
   1223c:	4798      	blx	r3
   1223e:	4603      	mov	r3, r0
   12240:	461a      	mov	r2, r3
   12242:	693b      	ldr	r3, [r7, #16]
   12244:	4413      	add	r3, r2
   12246:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   12248:	68bb      	ldr	r3, [r7, #8]
   1224a:	68f9      	ldr	r1, [r7, #12]
   1224c:	2204      	movs	r2, #4
   1224e:	4618      	mov	r0, r3
   12250:	4b36      	ldr	r3, [pc, #216]	; (1232c <usbdc_set_interface+0x134>)
   12252:	4798      	blx	r3
   12254:	6138      	str	r0, [r7, #16]
   12256:	693b      	ldr	r3, [r7, #16]
   12258:	2b00      	cmp	r3, #0
   1225a:	d113      	bne.n	12284 <usbdc_set_interface+0x8c>
		return false;
   1225c:	2300      	movs	r3, #0
   1225e:	e05b      	b.n	12318 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   12260:	68bb      	ldr	r3, [r7, #8]
   12262:	4618      	mov	r0, r3
   12264:	4b32      	ldr	r3, [pc, #200]	; (12330 <usbdc_set_interface+0x138>)
   12266:	4798      	blx	r3
   12268:	4603      	mov	r3, r0
   1226a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   1226c:	68bb      	ldr	r3, [r7, #8]
   1226e:	68f9      	ldr	r1, [r7, #12]
   12270:	2204      	movs	r2, #4
   12272:	4618      	mov	r0, r3
   12274:	4b2d      	ldr	r3, [pc, #180]	; (1232c <usbdc_set_interface+0x134>)
   12276:	4798      	blx	r3
   12278:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   1227a:	693b      	ldr	r3, [r7, #16]
   1227c:	2b00      	cmp	r3, #0
   1227e:	d101      	bne.n	12284 <usbdc_set_interface+0x8c>
			return false;
   12280:	2300      	movs	r3, #0
   12282:	e049      	b.n	12318 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   12284:	693b      	ldr	r3, [r7, #16]
   12286:	3302      	adds	r3, #2
   12288:	781b      	ldrb	r3, [r3, #0]
   1228a:	b29b      	uxth	r3, r3
   1228c:	88ba      	ldrh	r2, [r7, #4]
   1228e:	429a      	cmp	r2, r3
   12290:	d1e6      	bne.n	12260 <usbdc_set_interface+0x68>
   12292:	693b      	ldr	r3, [r7, #16]
   12294:	3303      	adds	r3, #3
   12296:	781b      	ldrb	r3, [r3, #0]
   12298:	b29b      	uxth	r3, r3
   1229a:	88fa      	ldrh	r2, [r7, #6]
   1229c:	429a      	cmp	r2, r3
   1229e:	d1df      	bne.n	12260 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   122a0:	693b      	ldr	r3, [r7, #16]
   122a2:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   122a4:	4b1e      	ldr	r3, [pc, #120]	; (12320 <usbdc_set_interface+0x128>)
   122a6:	691b      	ldr	r3, [r3, #16]
   122a8:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   122aa:	e031      	b.n	12310 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   122ac:	697b      	ldr	r3, [r7, #20]
   122ae:	685b      	ldr	r3, [r3, #4]
   122b0:	f107 0208 	add.w	r2, r7, #8
   122b4:	2101      	movs	r1, #1
   122b6:	6978      	ldr	r0, [r7, #20]
   122b8:	4798      	blx	r3
   122ba:	4603      	mov	r3, r0
   122bc:	2b00      	cmp	r3, #0
   122be:	d003      	beq.n	122c8 <usbdc_set_interface+0xd0>
			func = func->next;
   122c0:	697b      	ldr	r3, [r7, #20]
   122c2:	681b      	ldr	r3, [r3, #0]
   122c4:	617b      	str	r3, [r7, #20]
   122c6:	e023      	b.n	12310 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   122c8:	697b      	ldr	r3, [r7, #20]
   122ca:	685b      	ldr	r3, [r3, #4]
   122cc:	f107 0208 	add.w	r2, r7, #8
   122d0:	2100      	movs	r1, #0
   122d2:	6978      	ldr	r0, [r7, #20]
   122d4:	4798      	blx	r3
   122d6:	4603      	mov	r3, r0
   122d8:	2b00      	cmp	r3, #0
   122da:	d117      	bne.n	1230c <usbdc_set_interface+0x114>
			if (alt_set) {
   122dc:	88fb      	ldrh	r3, [r7, #6]
   122de:	2b00      	cmp	r3, #0
   122e0:	d00c      	beq.n	122fc <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   122e2:	4b0f      	ldr	r3, [pc, #60]	; (12320 <usbdc_set_interface+0x128>)
   122e4:	7f5b      	ldrb	r3, [r3, #29]
   122e6:	b25a      	sxtb	r2, r3
   122e8:	88bb      	ldrh	r3, [r7, #4]
   122ea:	2101      	movs	r1, #1
   122ec:	fa01 f303 	lsl.w	r3, r1, r3
   122f0:	b25b      	sxtb	r3, r3
   122f2:	4313      	orrs	r3, r2
   122f4:	b25b      	sxtb	r3, r3
   122f6:	b2da      	uxtb	r2, r3
   122f8:	4b09      	ldr	r3, [pc, #36]	; (12320 <usbdc_set_interface+0x128>)
   122fa:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   122fc:	2300      	movs	r3, #0
   122fe:	2200      	movs	r2, #0
   12300:	2100      	movs	r1, #0
   12302:	2000      	movs	r0, #0
   12304:	4c0b      	ldr	r4, [pc, #44]	; (12334 <usbdc_set_interface+0x13c>)
   12306:	47a0      	blx	r4
			return true;
   12308:	2301      	movs	r3, #1
   1230a:	e005      	b.n	12318 <usbdc_set_interface+0x120>
		} else {
			return false;
   1230c:	2300      	movs	r3, #0
   1230e:	e003      	b.n	12318 <usbdc_set_interface+0x120>
	while (NULL != func) {
   12310:	697b      	ldr	r3, [r7, #20]
   12312:	2b00      	cmp	r3, #0
   12314:	d1ca      	bne.n	122ac <usbdc_set_interface+0xb4>
		}
	}

	return false;
   12316:	2300      	movs	r3, #0
}
   12318:	4618      	mov	r0, r3
   1231a:	371c      	adds	r7, #28
   1231c:	46bd      	mov	sp, r7
   1231e:	bd90      	pop	{r4, r7, pc}
   12320:	20008d44 	.word	0x20008d44
   12324:	00012a5d 	.word	0x00012a5d
   12328:	00011c09 	.word	0x00011c09
   1232c:	0001299d 	.word	0x0001299d
   12330:	00011be5 	.word	0x00011be5
   12334:	0001270d 	.word	0x0001270d

00012338 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   12338:	b590      	push	{r4, r7, lr}
   1233a:	b083      	sub	sp, #12
   1233c:	af00      	add	r7, sp, #0
   1233e:	4603      	mov	r3, r0
   12340:	6039      	str	r1, [r7, #0]
   12342:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   12344:	683b      	ldr	r3, [r7, #0]
   12346:	785b      	ldrb	r3, [r3, #1]
   12348:	3b01      	subs	r3, #1
   1234a:	2b0a      	cmp	r3, #10
   1234c:	d85b      	bhi.n	12406 <usbdc_set_req+0xce>
   1234e:	a201      	add	r2, pc, #4	; (adr r2, 12354 <usbdc_set_req+0x1c>)
   12350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12354:	000123d3 	.word	0x000123d3
   12358:	00012407 	.word	0x00012407
   1235c:	000123e1 	.word	0x000123e1
   12360:	00012407 	.word	0x00012407
   12364:	00012381 	.word	0x00012381
   12368:	00012407 	.word	0x00012407
   1236c:	00012407 	.word	0x00012407
   12370:	00012407 	.word	0x00012407
   12374:	0001239b 	.word	0x0001239b
   12378:	00012407 	.word	0x00012407
   1237c:	000123ef 	.word	0x000123ef
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   12380:	79f8      	ldrb	r0, [r7, #7]
   12382:	2301      	movs	r3, #1
   12384:	2200      	movs	r2, #0
   12386:	2100      	movs	r1, #0
   12388:	4c21      	ldr	r4, [pc, #132]	; (12410 <usbdc_set_req+0xd8>)
   1238a:	47a0      	blx	r4
   1238c:	4603      	mov	r3, r0
   1238e:	2b00      	cmp	r3, #0
   12390:	bf0c      	ite	eq
   12392:	2301      	moveq	r3, #1
   12394:	2300      	movne	r3, #0
   12396:	b2db      	uxtb	r3, r3
   12398:	e036      	b.n	12408 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   1239a:	683b      	ldr	r3, [r7, #0]
   1239c:	885b      	ldrh	r3, [r3, #2]
   1239e:	b29b      	uxth	r3, r3
   123a0:	b2db      	uxtb	r3, r3
   123a2:	4618      	mov	r0, r3
   123a4:	4b1b      	ldr	r3, [pc, #108]	; (12414 <usbdc_set_req+0xdc>)
   123a6:	4798      	blx	r3
   123a8:	4603      	mov	r3, r0
   123aa:	f083 0301 	eor.w	r3, r3, #1
   123ae:	b2db      	uxtb	r3, r3
   123b0:	2b00      	cmp	r3, #0
   123b2:	d001      	beq.n	123b8 <usbdc_set_req+0x80>
			return false;
   123b4:	2300      	movs	r3, #0
   123b6:	e027      	b.n	12408 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   123b8:	79f8      	ldrb	r0, [r7, #7]
   123ba:	2301      	movs	r3, #1
   123bc:	2200      	movs	r2, #0
   123be:	2100      	movs	r1, #0
   123c0:	4c13      	ldr	r4, [pc, #76]	; (12410 <usbdc_set_req+0xd8>)
   123c2:	47a0      	blx	r4
   123c4:	4603      	mov	r3, r0
   123c6:	2b00      	cmp	r3, #0
   123c8:	bf0c      	ite	eq
   123ca:	2301      	moveq	r3, #1
   123cc:	2300      	movne	r3, #0
   123ce:	b2db      	uxtb	r3, r3
   123d0:	e01a      	b.n	12408 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   123d2:	79fb      	ldrb	r3, [r7, #7]
   123d4:	6839      	ldr	r1, [r7, #0]
   123d6:	4618      	mov	r0, r3
   123d8:	4b0f      	ldr	r3, [pc, #60]	; (12418 <usbdc_set_req+0xe0>)
   123da:	4798      	blx	r3
   123dc:	4603      	mov	r3, r0
   123de:	e013      	b.n	12408 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   123e0:	79fb      	ldrb	r3, [r7, #7]
   123e2:	6839      	ldr	r1, [r7, #0]
   123e4:	4618      	mov	r0, r3
   123e6:	4b0d      	ldr	r3, [pc, #52]	; (1241c <usbdc_set_req+0xe4>)
   123e8:	4798      	blx	r3
   123ea:	4603      	mov	r3, r0
   123ec:	e00c      	b.n	12408 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   123ee:	683b      	ldr	r3, [r7, #0]
   123f0:	885b      	ldrh	r3, [r3, #2]
   123f2:	b29a      	uxth	r2, r3
   123f4:	683b      	ldr	r3, [r7, #0]
   123f6:	889b      	ldrh	r3, [r3, #4]
   123f8:	b29b      	uxth	r3, r3
   123fa:	4619      	mov	r1, r3
   123fc:	4610      	mov	r0, r2
   123fe:	4b08      	ldr	r3, [pc, #32]	; (12420 <usbdc_set_req+0xe8>)
   12400:	4798      	blx	r3
   12402:	4603      	mov	r3, r0
   12404:	e000      	b.n	12408 <usbdc_set_req+0xd0>
	default:
		return false;
   12406:	2300      	movs	r3, #0
	}
}
   12408:	4618      	mov	r0, r3
   1240a:	370c      	adds	r7, #12
   1240c:	46bd      	mov	sp, r7
   1240e:	bd90      	pop	{r4, r7, pc}
   12410:	0001270d 	.word	0x0001270d
   12414:	000120ed 	.word	0x000120ed
   12418:	00012009 	.word	0x00012009
   1241c:	00012061 	.word	0x00012061
   12420:	000121f9 	.word	0x000121f9

00012424 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	b082      	sub	sp, #8
   12428:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   1242a:	4b0a      	ldr	r3, [pc, #40]	; (12454 <usbdc_sof_notify+0x30>)
   1242c:	685b      	ldr	r3, [r3, #4]
   1242e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   12430:	e009      	b.n	12446 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   12432:	687b      	ldr	r3, [r7, #4]
   12434:	685b      	ldr	r3, [r3, #4]
   12436:	2b00      	cmp	r3, #0
   12438:	d002      	beq.n	12440 <usbdc_sof_notify+0x1c>
			sof->cb();
   1243a:	687b      	ldr	r3, [r7, #4]
   1243c:	685b      	ldr	r3, [r3, #4]
   1243e:	4798      	blx	r3
		}
		sof = sof->next;
   12440:	687b      	ldr	r3, [r7, #4]
   12442:	681b      	ldr	r3, [r3, #0]
   12444:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   12446:	687b      	ldr	r3, [r7, #4]
   12448:	2b00      	cmp	r3, #0
   1244a:	d1f2      	bne.n	12432 <usbdc_sof_notify+0xe>
	}
}
   1244c:	bf00      	nop
   1244e:	3708      	adds	r7, #8
   12450:	46bd      	mov	sp, r7
   12452:	bd80      	pop	{r7, pc}
   12454:	20008d44 	.word	0x20008d44

00012458 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   12458:	b580      	push	{r7, lr}
   1245a:	b084      	sub	sp, #16
   1245c:	af00      	add	r7, sp, #0
   1245e:	4603      	mov	r3, r0
   12460:	6039      	str	r1, [r7, #0]
   12462:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   12464:	4b0b      	ldr	r3, [pc, #44]	; (12494 <usbdc_change_notify+0x3c>)
   12466:	68db      	ldr	r3, [r3, #12]
   12468:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   1246a:	e00c      	b.n	12486 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   1246c:	68fb      	ldr	r3, [r7, #12]
   1246e:	685b      	ldr	r3, [r3, #4]
   12470:	2b00      	cmp	r3, #0
   12472:	d005      	beq.n	12480 <usbdc_change_notify+0x28>
			cg->cb(change, value);
   12474:	68fb      	ldr	r3, [r7, #12]
   12476:	685b      	ldr	r3, [r3, #4]
   12478:	79fa      	ldrb	r2, [r7, #7]
   1247a:	6839      	ldr	r1, [r7, #0]
   1247c:	4610      	mov	r0, r2
   1247e:	4798      	blx	r3
		}
		cg = cg->next;
   12480:	68fb      	ldr	r3, [r7, #12]
   12482:	681b      	ldr	r3, [r3, #0]
   12484:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   12486:	68fb      	ldr	r3, [r7, #12]
   12488:	2b00      	cmp	r3, #0
   1248a:	d1ef      	bne.n	1246c <usbdc_change_notify+0x14>
	}
}
   1248c:	bf00      	nop
   1248e:	3710      	adds	r7, #16
   12490:	46bd      	mov	sp, r7
   12492:	bd80      	pop	{r7, pc}
   12494:	20008d44 	.word	0x20008d44

00012498 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   12498:	b580      	push	{r7, lr}
   1249a:	b084      	sub	sp, #16
   1249c:	af00      	add	r7, sp, #0
   1249e:	4603      	mov	r3, r0
   124a0:	6039      	str	r1, [r7, #0]
   124a2:	71fb      	strb	r3, [r7, #7]
   124a4:	4613      	mov	r3, r2
   124a6:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   124a8:	4b12      	ldr	r3, [pc, #72]	; (124f4 <usbdc_request_handler+0x5c>)
   124aa:	689b      	ldr	r3, [r3, #8]
   124ac:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   124ae:	e019      	b.n	124e4 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   124b0:	68fb      	ldr	r3, [r7, #12]
   124b2:	685b      	ldr	r3, [r3, #4]
   124b4:	2b00      	cmp	r3, #0
   124b6:	d012      	beq.n	124de <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   124b8:	68fb      	ldr	r3, [r7, #12]
   124ba:	685b      	ldr	r3, [r3, #4]
   124bc:	79ba      	ldrb	r2, [r7, #6]
   124be:	79f8      	ldrb	r0, [r7, #7]
   124c0:	6839      	ldr	r1, [r7, #0]
   124c2:	4798      	blx	r3
   124c4:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   124c6:	68bb      	ldr	r3, [r7, #8]
   124c8:	2b00      	cmp	r3, #0
   124ca:	d101      	bne.n	124d0 <usbdc_request_handler+0x38>
				return true;
   124cc:	2301      	movs	r3, #1
   124ce:	e00d      	b.n	124ec <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   124d0:	68bb      	ldr	r3, [r7, #8]
   124d2:	f113 0f0a 	cmn.w	r3, #10
   124d6:	d002      	beq.n	124de <usbdc_request_handler+0x46>
				return -1;
   124d8:	f04f 33ff 	mov.w	r3, #4294967295
   124dc:	e006      	b.n	124ec <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   124de:	68fb      	ldr	r3, [r7, #12]
   124e0:	681b      	ldr	r3, [r3, #0]
   124e2:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   124e4:	68fb      	ldr	r3, [r7, #12]
   124e6:	2b00      	cmp	r3, #0
   124e8:	d1e2      	bne.n	124b0 <usbdc_request_handler+0x18>
	}
	return false;
   124ea:	2300      	movs	r3, #0
}
   124ec:	4618      	mov	r0, r3
   124ee:	3710      	adds	r7, #16
   124f0:	46bd      	mov	sp, r7
   124f2:	bd80      	pop	{r7, pc}
   124f4:	20008d44 	.word	0x20008d44

000124f8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   124f8:	b580      	push	{r7, lr}
   124fa:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   124fc:	4b01      	ldr	r3, [pc, #4]	; (12504 <usbd_sof_cb+0xc>)
   124fe:	4798      	blx	r3
}
   12500:	bf00      	nop
   12502:	bd80      	pop	{r7, pc}
   12504:	00012425 	.word	0x00012425

00012508 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   12508:	b580      	push	{r7, lr}
   1250a:	b082      	sub	sp, #8
   1250c:	af00      	add	r7, sp, #0
   1250e:	4603      	mov	r3, r0
   12510:	6039      	str	r1, [r7, #0]
   12512:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   12514:	79fb      	ldrb	r3, [r7, #7]
   12516:	2200      	movs	r2, #0
   12518:	6839      	ldr	r1, [r7, #0]
   1251a:	4618      	mov	r0, r3
   1251c:	4b14      	ldr	r3, [pc, #80]	; (12570 <usbdc_cb_ctl_req+0x68>)
   1251e:	4798      	blx	r3
   12520:	4603      	mov	r3, r0
   12522:	f1b3 3fff 	cmp.w	r3, #4294967295
   12526:	d00b      	beq.n	12540 <usbdc_cb_ctl_req+0x38>
   12528:	2b01      	cmp	r3, #1
   1252a:	d007      	beq.n	1253c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   1252c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   1252e:	683b      	ldr	r3, [r7, #0]
   12530:	781b      	ldrb	r3, [r3, #0]
   12532:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   12536:	2b00      	cmp	r3, #0
   12538:	d007      	beq.n	1254a <usbdc_cb_ctl_req+0x42>
   1253a:	e003      	b.n	12544 <usbdc_cb_ctl_req+0x3c>
		return true;
   1253c:	2301      	movs	r3, #1
   1253e:	e013      	b.n	12568 <usbdc_cb_ctl_req+0x60>
		return false;
   12540:	2300      	movs	r3, #0
   12542:	e011      	b.n	12568 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   12544:	2b80      	cmp	r3, #128	; 0x80
   12546:	d007      	beq.n	12558 <usbdc_cb_ctl_req+0x50>
   12548:	e00d      	b.n	12566 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   1254a:	79fb      	ldrb	r3, [r7, #7]
   1254c:	6839      	ldr	r1, [r7, #0]
   1254e:	4618      	mov	r0, r3
   12550:	4b08      	ldr	r3, [pc, #32]	; (12574 <usbdc_cb_ctl_req+0x6c>)
   12552:	4798      	blx	r3
   12554:	4603      	mov	r3, r0
   12556:	e007      	b.n	12568 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   12558:	79fb      	ldrb	r3, [r7, #7]
   1255a:	6839      	ldr	r1, [r7, #0]
   1255c:	4618      	mov	r0, r3
   1255e:	4b06      	ldr	r3, [pc, #24]	; (12578 <usbdc_cb_ctl_req+0x70>)
   12560:	4798      	blx	r3
   12562:	4603      	mov	r3, r0
   12564:	e000      	b.n	12568 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   12566:	2300      	movs	r3, #0
	}
}
   12568:	4618      	mov	r0, r3
   1256a:	3708      	adds	r7, #8
   1256c:	46bd      	mov	sp, r7
   1256e:	bd80      	pop	{r7, pc}
   12570:	00012499 	.word	0x00012499
   12574:	00012339 	.word	0x00012339
   12578:	00011f61 	.word	0x00011f61

0001257c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   1257c:	b580      	push	{r7, lr}
   1257e:	b082      	sub	sp, #8
   12580:	af00      	add	r7, sp, #0
   12582:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   12584:	687b      	ldr	r3, [r7, #4]
   12586:	781b      	ldrb	r3, [r3, #0]
   12588:	2b00      	cmp	r3, #0
   1258a:	d135      	bne.n	125f8 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   1258c:	687b      	ldr	r3, [r7, #4]
   1258e:	785b      	ldrb	r3, [r3, #1]
   12590:	2b05      	cmp	r3, #5
   12592:	d019      	beq.n	125c8 <usbdc_ctrl_status_end+0x4c>
   12594:	2b09      	cmp	r3, #9
   12596:	d000      	beq.n	1259a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   12598:	e02f      	b.n	125fa <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   1259a:	687b      	ldr	r3, [r7, #4]
   1259c:	885b      	ldrh	r3, [r3, #2]
   1259e:	b29b      	uxth	r3, r3
   125a0:	b2da      	uxtb	r2, r3
   125a2:	4b17      	ldr	r3, [pc, #92]	; (12600 <usbdc_ctrl_status_end+0x84>)
   125a4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   125a6:	687b      	ldr	r3, [r7, #4]
   125a8:	885b      	ldrh	r3, [r3, #2]
   125aa:	b29b      	uxth	r3, r3
   125ac:	2b00      	cmp	r3, #0
   125ae:	d001      	beq.n	125b4 <usbdc_ctrl_status_end+0x38>
   125b0:	2204      	movs	r2, #4
   125b2:	e000      	b.n	125b6 <usbdc_ctrl_status_end+0x3a>
   125b4:	2203      	movs	r2, #3
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <usbdc_ctrl_status_end+0x84>)
   125b8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   125ba:	4b11      	ldr	r3, [pc, #68]	; (12600 <usbdc_ctrl_status_end+0x84>)
   125bc:	7e9b      	ldrb	r3, [r3, #26]
   125be:	4619      	mov	r1, r3
   125c0:	2001      	movs	r0, #1
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <usbdc_ctrl_status_end+0x88>)
   125c4:	4798      	blx	r3
		break;
   125c6:	e018      	b.n	125fa <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   125c8:	687b      	ldr	r3, [r7, #4]
   125ca:	885b      	ldrh	r3, [r3, #2]
   125cc:	b29b      	uxth	r3, r3
   125ce:	b2db      	uxtb	r3, r3
   125d0:	4618      	mov	r0, r3
   125d2:	4b0d      	ldr	r3, [pc, #52]	; (12608 <usbdc_ctrl_status_end+0x8c>)
   125d4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	885b      	ldrh	r3, [r3, #2]
   125da:	b29b      	uxth	r3, r3
   125dc:	2b00      	cmp	r3, #0
   125de:	d001      	beq.n	125e4 <usbdc_ctrl_status_end+0x68>
   125e0:	2203      	movs	r2, #3
   125e2:	e000      	b.n	125e6 <usbdc_ctrl_status_end+0x6a>
   125e4:	2202      	movs	r2, #2
   125e6:	4b06      	ldr	r3, [pc, #24]	; (12600 <usbdc_ctrl_status_end+0x84>)
   125e8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   125ea:	4b05      	ldr	r3, [pc, #20]	; (12600 <usbdc_ctrl_status_end+0x84>)
   125ec:	7e9b      	ldrb	r3, [r3, #26]
   125ee:	4619      	mov	r1, r3
   125f0:	2001      	movs	r0, #1
   125f2:	4b04      	ldr	r3, [pc, #16]	; (12604 <usbdc_ctrl_status_end+0x88>)
   125f4:	4798      	blx	r3
		break;
   125f6:	e000      	b.n	125fa <usbdc_ctrl_status_end+0x7e>
		return;
   125f8:	bf00      	nop
	}
}
   125fa:	3708      	adds	r7, #8
   125fc:	46bd      	mov	sp, r7
   125fe:	bd80      	pop	{r7, pc}
   12600:	20008d44 	.word	0x20008d44
   12604:	00012459 	.word	0x00012459
   12608:	000121d9 	.word	0x000121d9

0001260c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   12614:	2201      	movs	r2, #1
   12616:	6879      	ldr	r1, [r7, #4]
   12618:	2000      	movs	r0, #0
   1261a:	4b03      	ldr	r3, [pc, #12]	; (12628 <usbdc_ctrl_data_end+0x1c>)
   1261c:	4798      	blx	r3
	return false;
   1261e:	2300      	movs	r3, #0
}
   12620:	4618      	mov	r0, r3
   12622:	3708      	adds	r7, #8
   12624:	46bd      	mov	sp, r7
   12626:	bd80      	pop	{r7, pc}
   12628:	00012499 	.word	0x00012499

0001262c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   1262c:	b580      	push	{r7, lr}
   1262e:	b082      	sub	sp, #8
   12630:	af00      	add	r7, sp, #0
   12632:	4603      	mov	r3, r0
   12634:	603a      	str	r2, [r7, #0]
   12636:	71fb      	strb	r3, [r7, #7]
   12638:	460b      	mov	r3, r1
   1263a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   1263c:	79bb      	ldrb	r3, [r7, #6]
   1263e:	2b00      	cmp	r3, #0
   12640:	d002      	beq.n	12648 <usbdc_cb_ctl_done+0x1c>
   12642:	2b01      	cmp	r3, #1
   12644:	d004      	beq.n	12650 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   12646:	e008      	b.n	1265a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   12648:	6838      	ldr	r0, [r7, #0]
   1264a:	4b06      	ldr	r3, [pc, #24]	; (12664 <usbdc_cb_ctl_done+0x38>)
   1264c:	4798      	blx	r3
		break;
   1264e:	e004      	b.n	1265a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   12650:	6838      	ldr	r0, [r7, #0]
   12652:	4b05      	ldr	r3, [pc, #20]	; (12668 <usbdc_cb_ctl_done+0x3c>)
   12654:	4798      	blx	r3
   12656:	4603      	mov	r3, r0
   12658:	e000      	b.n	1265c <usbdc_cb_ctl_done+0x30>
	}
	return false;
   1265a:	2300      	movs	r3, #0
}
   1265c:	4618      	mov	r0, r3
   1265e:	3708      	adds	r7, #8
   12660:	46bd      	mov	sp, r7
   12662:	bd80      	pop	{r7, pc}
   12664:	0001257d 	.word	0x0001257d
   12668:	0001260d 	.word	0x0001260d

0001266c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   1266c:	b580      	push	{r7, lr}
   1266e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   12670:	4b10      	ldr	r3, [pc, #64]	; (126b4 <usbdc_reset+0x48>)
   12672:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   12674:	4b10      	ldr	r3, [pc, #64]	; (126b8 <usbdc_reset+0x4c>)
   12676:	2202      	movs	r2, #2
   12678:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   1267a:	4b0f      	ldr	r3, [pc, #60]	; (126b8 <usbdc_reset+0x4c>)
   1267c:	2200      	movs	r2, #0
   1267e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   12680:	4b0d      	ldr	r3, [pc, #52]	; (126b8 <usbdc_reset+0x4c>)
   12682:	2200      	movs	r2, #0
   12684:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   12686:	2000      	movs	r0, #0
   12688:	4b0c      	ldr	r3, [pc, #48]	; (126bc <usbdc_reset+0x50>)
   1268a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   1268c:	4b0a      	ldr	r3, [pc, #40]	; (126b8 <usbdc_reset+0x4c>)
   1268e:	7f1b      	ldrb	r3, [r3, #28]
   12690:	4618      	mov	r0, r3
   12692:	4b0b      	ldr	r3, [pc, #44]	; (126c0 <usbdc_reset+0x54>)
   12694:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   12696:	4a0b      	ldr	r2, [pc, #44]	; (126c4 <usbdc_reset+0x58>)
   12698:	2100      	movs	r1, #0
   1269a:	2000      	movs	r0, #0
   1269c:	4b0a      	ldr	r3, [pc, #40]	; (126c8 <usbdc_reset+0x5c>)
   1269e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   126a0:	4a0a      	ldr	r2, [pc, #40]	; (126cc <usbdc_reset+0x60>)
   126a2:	2102      	movs	r1, #2
   126a4:	2000      	movs	r0, #0
   126a6:	4b08      	ldr	r3, [pc, #32]	; (126c8 <usbdc_reset+0x5c>)
   126a8:	4798      	blx	r3
	usb_d_ep_enable(0);
   126aa:	2000      	movs	r0, #0
   126ac:	4b08      	ldr	r3, [pc, #32]	; (126d0 <usbdc_reset+0x64>)
   126ae:	4798      	blx	r3
}
   126b0:	bf00      	nop
   126b2:	bd80      	pop	{r7, pc}
   126b4:	000120b9 	.word	0x000120b9
   126b8:	20008d44 	.word	0x20008d44
   126bc:	00007d01 	.word	0x00007d01
   126c0:	00007c3d 	.word	0x00007c3d
   126c4:	00012509 	.word	0x00012509
   126c8:	00008055 	.word	0x00008055
   126cc:	0001262d 	.word	0x0001262d
   126d0:	00007d51 	.word	0x00007d51

000126d4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   126d4:	b580      	push	{r7, lr}
   126d6:	b082      	sub	sp, #8
   126d8:	af00      	add	r7, sp, #0
   126da:	4603      	mov	r3, r0
   126dc:	6039      	str	r1, [r7, #0]
   126de:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   126e0:	79fb      	ldrb	r3, [r7, #7]
   126e2:	2b00      	cmp	r3, #0
   126e4:	d002      	beq.n	126ec <usbd_event_cb+0x18>
   126e6:	2b01      	cmp	r3, #1
   126e8:	d005      	beq.n	126f6 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   126ea:	e007      	b.n	126fc <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   126ec:	6839      	ldr	r1, [r7, #0]
   126ee:	2000      	movs	r0, #0
   126f0:	4b04      	ldr	r3, [pc, #16]	; (12704 <usbd_event_cb+0x30>)
   126f2:	4798      	blx	r3
		break;
   126f4:	e002      	b.n	126fc <usbd_event_cb+0x28>
		usbdc_reset();
   126f6:	4b04      	ldr	r3, [pc, #16]	; (12708 <usbd_event_cb+0x34>)
   126f8:	4798      	blx	r3
		break;
   126fa:	bf00      	nop
	}
}
   126fc:	bf00      	nop
   126fe:	3708      	adds	r7, #8
   12700:	46bd      	mov	sp, r7
   12702:	bd80      	pop	{r7, pc}
   12704:	00012459 	.word	0x00012459
   12708:	0001266d 	.word	0x0001266d

0001270c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   1270c:	b580      	push	{r7, lr}
   1270e:	b088      	sub	sp, #32
   12710:	af00      	add	r7, sp, #0
   12712:	60b9      	str	r1, [r7, #8]
   12714:	607a      	str	r2, [r7, #4]
   12716:	461a      	mov	r2, r3
   12718:	4603      	mov	r3, r0
   1271a:	73fb      	strb	r3, [r7, #15]
   1271c:	4613      	mov	r3, r2
   1271e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   12720:	68bb      	ldr	r3, [r7, #8]
   12722:	617b      	str	r3, [r7, #20]
   12724:	687b      	ldr	r3, [r7, #4]
   12726:	61bb      	str	r3, [r7, #24]
   12728:	7bfb      	ldrb	r3, [r7, #15]
   1272a:	773b      	strb	r3, [r7, #28]
   1272c:	7bbb      	ldrb	r3, [r7, #14]
   1272e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   12730:	f107 0314 	add.w	r3, r7, #20
   12734:	4618      	mov	r0, r3
   12736:	4b03      	ldr	r3, [pc, #12]	; (12744 <usbdc_xfer+0x38>)
   12738:	4798      	blx	r3
   1273a:	4603      	mov	r3, r0
}
   1273c:	4618      	mov	r0, r3
   1273e:	3720      	adds	r7, #32
   12740:	46bd      	mov	sp, r7
   12742:	bd80      	pop	{r7, pc}
   12744:	00007dc1 	.word	0x00007dc1

00012748 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   12748:	b580      	push	{r7, lr}
   1274a:	b082      	sub	sp, #8
   1274c:	af00      	add	r7, sp, #0
   1274e:	4603      	mov	r3, r0
   12750:	6039      	str	r1, [r7, #0]
   12752:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   12754:	79fb      	ldrb	r3, [r7, #7]
   12756:	2b01      	cmp	r3, #1
   12758:	d009      	beq.n	1276e <usbdc_register_handler+0x26>
   1275a:	2b02      	cmp	r3, #2
   1275c:	d00c      	beq.n	12778 <usbdc_register_handler+0x30>
   1275e:	2b00      	cmp	r3, #0
   12760:	d000      	beq.n	12764 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   12762:	e00e      	b.n	12782 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   12764:	6839      	ldr	r1, [r7, #0]
   12766:	4809      	ldr	r0, [pc, #36]	; (1278c <usbdc_register_handler+0x44>)
   12768:	4b09      	ldr	r3, [pc, #36]	; (12790 <usbdc_register_handler+0x48>)
   1276a:	4798      	blx	r3
		break;
   1276c:	e009      	b.n	12782 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   1276e:	6839      	ldr	r1, [r7, #0]
   12770:	4808      	ldr	r0, [pc, #32]	; (12794 <usbdc_register_handler+0x4c>)
   12772:	4b07      	ldr	r3, [pc, #28]	; (12790 <usbdc_register_handler+0x48>)
   12774:	4798      	blx	r3
		break;
   12776:	e004      	b.n	12782 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   12778:	6839      	ldr	r1, [r7, #0]
   1277a:	4807      	ldr	r0, [pc, #28]	; (12798 <usbdc_register_handler+0x50>)
   1277c:	4b04      	ldr	r3, [pc, #16]	; (12790 <usbdc_register_handler+0x48>)
   1277e:	4798      	blx	r3
		break;
   12780:	bf00      	nop
	}
}
   12782:	bf00      	nop
   12784:	3708      	adds	r7, #8
   12786:	46bd      	mov	sp, r7
   12788:	bd80      	pop	{r7, pc}
   1278a:	bf00      	nop
   1278c:	20008d48 	.word	0x20008d48
   12790:	000081ad 	.word	0x000081ad
   12794:	20008d4c 	.word	0x20008d4c
   12798:	20008d50 	.word	0x20008d50

0001279c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   1279c:	b580      	push	{r7, lr}
   1279e:	b084      	sub	sp, #16
   127a0:	af00      	add	r7, sp, #0
   127a2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	2b00      	cmp	r3, #0
   127a8:	bf14      	ite	ne
   127aa:	2301      	movne	r3, #1
   127ac:	2300      	moveq	r3, #0
   127ae:	b2db      	uxtb	r3, r3
   127b0:	f240 3255 	movw	r2, #853	; 0x355
   127b4:	4910      	ldr	r1, [pc, #64]	; (127f8 <usbdc_init+0x5c>)
   127b6:	4618      	mov	r0, r3
   127b8:	4b10      	ldr	r3, [pc, #64]	; (127fc <usbdc_init+0x60>)
   127ba:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   127bc:	4b10      	ldr	r3, [pc, #64]	; (12800 <usbdc_init+0x64>)
   127be:	4798      	blx	r3
   127c0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   127c2:	68fb      	ldr	r3, [r7, #12]
   127c4:	2b00      	cmp	r3, #0
   127c6:	da01      	bge.n	127cc <usbdc_init+0x30>
		return rc;
   127c8:	68fb      	ldr	r3, [r7, #12]
   127ca:	e010      	b.n	127ee <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   127cc:	2220      	movs	r2, #32
   127ce:	2100      	movs	r1, #0
   127d0:	480c      	ldr	r0, [pc, #48]	; (12804 <usbdc_init+0x68>)
   127d2:	4b0d      	ldr	r3, [pc, #52]	; (12808 <usbdc_init+0x6c>)
   127d4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   127d6:	4a0b      	ldr	r2, [pc, #44]	; (12804 <usbdc_init+0x68>)
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   127dc:	490b      	ldr	r1, [pc, #44]	; (1280c <usbdc_init+0x70>)
   127de:	2000      	movs	r0, #0
   127e0:	4b0b      	ldr	r3, [pc, #44]	; (12810 <usbdc_init+0x74>)
   127e2:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   127e4:	490b      	ldr	r1, [pc, #44]	; (12814 <usbdc_init+0x78>)
   127e6:	2001      	movs	r0, #1
   127e8:	4b09      	ldr	r3, [pc, #36]	; (12810 <usbdc_init+0x74>)
   127ea:	4798      	blx	r3

	return 0;
   127ec:	2300      	movs	r3, #0
}
   127ee:	4618      	mov	r0, r3
   127f0:	3710      	adds	r7, #16
   127f2:	46bd      	mov	sp, r7
   127f4:	bd80      	pop	{r7, pc}
   127f6:	bf00      	nop
   127f8:	00020de8 	.word	0x00020de8
   127fc:	000080d1 	.word	0x000080d1
   12800:	00007b29 	.word	0x00007b29
   12804:	20008d44 	.word	0x20008d44
   12808:	0001c5d9 	.word	0x0001c5d9
   1280c:	000124f9 	.word	0x000124f9
   12810:	00007bd5 	.word	0x00007bd5
   12814:	000126d5 	.word	0x000126d5

00012818 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   12818:	b580      	push	{r7, lr}
   1281a:	b082      	sub	sp, #8
   1281c:	af00      	add	r7, sp, #0
   1281e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   12820:	6879      	ldr	r1, [r7, #4]
   12822:	4803      	ldr	r0, [pc, #12]	; (12830 <usbdc_register_function+0x18>)
   12824:	4b03      	ldr	r3, [pc, #12]	; (12834 <usbdc_register_function+0x1c>)
   12826:	4798      	blx	r3
}
   12828:	bf00      	nop
   1282a:	3708      	adds	r7, #8
   1282c:	46bd      	mov	sp, r7
   1282e:	bd80      	pop	{r7, pc}
   12830:	20008d54 	.word	0x20008d54
   12834:	000081ad 	.word	0x000081ad

00012838 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   12838:	b580      	push	{r7, lr}
   1283a:	b082      	sub	sp, #8
   1283c:	af00      	add	r7, sp, #0
   1283e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   12840:	4b0f      	ldr	r3, [pc, #60]	; (12880 <usbdc_start+0x48>)
   12842:	7e9b      	ldrb	r3, [r3, #26]
   12844:	2b00      	cmp	r3, #0
   12846:	d002      	beq.n	1284e <usbdc_start+0x16>
		return ERR_BUSY;
   12848:	f06f 0303 	mvn.w	r3, #3
   1284c:	e013      	b.n	12876 <usbdc_start+0x3e>
	}

	if (desces) {
   1284e:	687b      	ldr	r3, [r7, #4]
   12850:	2b00      	cmp	r3, #0
   12852:	d00e      	beq.n	12872 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   12854:	4a0a      	ldr	r2, [pc, #40]	; (12880 <usbdc_start+0x48>)
   12856:	687b      	ldr	r3, [r7, #4]
   12858:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   1285a:	687b      	ldr	r3, [r7, #4]
   1285c:	681b      	ldr	r3, [r3, #0]
   1285e:	79da      	ldrb	r2, [r3, #7]
   12860:	4b07      	ldr	r3, [pc, #28]	; (12880 <usbdc_start+0x48>)
   12862:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   12864:	4b06      	ldr	r3, [pc, #24]	; (12880 <usbdc_start+0x48>)
   12866:	2201      	movs	r2, #1
   12868:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   1286a:	4b06      	ldr	r3, [pc, #24]	; (12884 <usbdc_start+0x4c>)
   1286c:	4798      	blx	r3
	return ERR_NONE;
   1286e:	2300      	movs	r3, #0
   12870:	e001      	b.n	12876 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   12872:	f06f 0308 	mvn.w	r3, #8
}
   12876:	4618      	mov	r0, r3
   12878:	3708      	adds	r7, #8
   1287a:	46bd      	mov	sp, r7
   1287c:	bd80      	pop	{r7, pc}
   1287e:	bf00      	nop
   12880:	20008d44 	.word	0x20008d44
   12884:	00007bf9 	.word	0x00007bf9

00012888 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   12888:	b580      	push	{r7, lr}
   1288a:	af00      	add	r7, sp, #0
	usb_d_attach();
   1288c:	4b01      	ldr	r3, [pc, #4]	; (12894 <usbdc_attach+0xc>)
   1288e:	4798      	blx	r3
}
   12890:	bf00      	nop
   12892:	bd80      	pop	{r7, pc}
   12894:	00007c0d 	.word	0x00007c0d

00012898 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   12898:	b480      	push	{r7}
   1289a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   1289c:	4b03      	ldr	r3, [pc, #12]	; (128ac <usbdc_get_ctrl_buffer+0x14>)
   1289e:	695b      	ldr	r3, [r3, #20]
}
   128a0:	4618      	mov	r0, r3
   128a2:	46bd      	mov	sp, r7
   128a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   128a8:	4770      	bx	lr
   128aa:	bf00      	nop
   128ac:	20008d44 	.word	0x20008d44

000128b0 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   128b0:	b480      	push	{r7}
   128b2:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   128b4:	4b07      	ldr	r3, [pc, #28]	; (128d4 <usbdc_get_state+0x24>)
   128b6:	7e9b      	ldrb	r3, [r3, #26]
   128b8:	f003 0310 	and.w	r3, r3, #16
   128bc:	2b00      	cmp	r3, #0
   128be:	d001      	beq.n	128c4 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   128c0:	2310      	movs	r3, #16
   128c2:	e001      	b.n	128c8 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   128c4:	4b03      	ldr	r3, [pc, #12]	; (128d4 <usbdc_get_state+0x24>)
   128c6:	7e9b      	ldrb	r3, [r3, #26]
}
   128c8:	4618      	mov	r0, r3
   128ca:	46bd      	mov	sp, r7
   128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   128d0:	4770      	bx	lr
   128d2:	bf00      	nop
   128d4:	20008d44 	.word	0x20008d44

000128d8 <usb_get_u16>:
{
   128d8:	b480      	push	{r7}
   128da:	b083      	sub	sp, #12
   128dc:	af00      	add	r7, sp, #0
   128de:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   128e0:	687b      	ldr	r3, [r7, #4]
   128e2:	781b      	ldrb	r3, [r3, #0]
   128e4:	b29a      	uxth	r2, r3
   128e6:	687b      	ldr	r3, [r7, #4]
   128e8:	3301      	adds	r3, #1
   128ea:	781b      	ldrb	r3, [r3, #0]
   128ec:	b29b      	uxth	r3, r3
   128ee:	021b      	lsls	r3, r3, #8
   128f0:	b29b      	uxth	r3, r3
   128f2:	4413      	add	r3, r2
   128f4:	b29b      	uxth	r3, r3
}
   128f6:	4618      	mov	r0, r3
   128f8:	370c      	adds	r7, #12
   128fa:	46bd      	mov	sp, r7
   128fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   12900:	4770      	bx	lr

00012902 <usb_desc_len>:
{
   12902:	b480      	push	{r7}
   12904:	b083      	sub	sp, #12
   12906:	af00      	add	r7, sp, #0
   12908:	6078      	str	r0, [r7, #4]
	return desc[0];
   1290a:	687b      	ldr	r3, [r7, #4]
   1290c:	781b      	ldrb	r3, [r3, #0]
}
   1290e:	4618      	mov	r0, r3
   12910:	370c      	adds	r7, #12
   12912:	46bd      	mov	sp, r7
   12914:	f85d 7b04 	ldr.w	r7, [sp], #4
   12918:	4770      	bx	lr

0001291a <usb_desc_type>:
{
   1291a:	b480      	push	{r7}
   1291c:	b083      	sub	sp, #12
   1291e:	af00      	add	r7, sp, #0
   12920:	6078      	str	r0, [r7, #4]
	return desc[1];
   12922:	687b      	ldr	r3, [r7, #4]
   12924:	3301      	adds	r3, #1
   12926:	781b      	ldrb	r3, [r3, #0]
}
   12928:	4618      	mov	r0, r3
   1292a:	370c      	adds	r7, #12
   1292c:	46bd      	mov	sp, r7
   1292e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12932:	4770      	bx	lr

00012934 <usb_desc_next>:
{
   12934:	b580      	push	{r7, lr}
   12936:	b082      	sub	sp, #8
   12938:	af00      	add	r7, sp, #0
   1293a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   1293c:	6878      	ldr	r0, [r7, #4]
   1293e:	4b05      	ldr	r3, [pc, #20]	; (12954 <usb_desc_next+0x20>)
   12940:	4798      	blx	r3
   12942:	4603      	mov	r3, r0
   12944:	461a      	mov	r2, r3
   12946:	687b      	ldr	r3, [r7, #4]
   12948:	4413      	add	r3, r2
}
   1294a:	4618      	mov	r0, r3
   1294c:	3708      	adds	r7, #8
   1294e:	46bd      	mov	sp, r7
   12950:	bd80      	pop	{r7, pc}
   12952:	bf00      	nop
   12954:	00012903 	.word	0x00012903

00012958 <usb_cfg_desc_total_len>:
{
   12958:	b580      	push	{r7, lr}
   1295a:	b082      	sub	sp, #8
   1295c:	af00      	add	r7, sp, #0
   1295e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   12960:	687b      	ldr	r3, [r7, #4]
   12962:	3302      	adds	r3, #2
   12964:	4618      	mov	r0, r3
   12966:	4b03      	ldr	r3, [pc, #12]	; (12974 <usb_cfg_desc_total_len+0x1c>)
   12968:	4798      	blx	r3
   1296a:	4603      	mov	r3, r0
}
   1296c:	4618      	mov	r0, r3
   1296e:	3708      	adds	r7, #8
   12970:	46bd      	mov	sp, r7
   12972:	bd80      	pop	{r7, pc}
   12974:	000128d9 	.word	0x000128d9

00012978 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   12978:	b580      	push	{r7, lr}
   1297a:	b082      	sub	sp, #8
   1297c:	af00      	add	r7, sp, #0
   1297e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   12980:	6878      	ldr	r0, [r7, #4]
   12982:	4b05      	ldr	r3, [pc, #20]	; (12998 <usb_cfg_desc_next+0x20>)
   12984:	4798      	blx	r3
   12986:	4603      	mov	r3, r0
   12988:	461a      	mov	r2, r3
   1298a:	687b      	ldr	r3, [r7, #4]
   1298c:	4413      	add	r3, r2
}
   1298e:	4618      	mov	r0, r3
   12990:	3708      	adds	r7, #8
   12992:	46bd      	mov	sp, r7
   12994:	bd80      	pop	{r7, pc}
   12996:	bf00      	nop
   12998:	00012959 	.word	0x00012959

0001299c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   1299c:	b580      	push	{r7, lr}
   1299e:	b084      	sub	sp, #16
   129a0:	af00      	add	r7, sp, #0
   129a2:	60f8      	str	r0, [r7, #12]
   129a4:	60b9      	str	r1, [r7, #8]
   129a6:	4613      	mov	r3, r2
   129a8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   129aa:	e015      	b.n	129d8 <usb_find_desc+0x3c>
		_desc_len_check();
   129ac:	68f8      	ldr	r0, [r7, #12]
   129ae:	4b0f      	ldr	r3, [pc, #60]	; (129ec <usb_find_desc+0x50>)
   129b0:	4798      	blx	r3
   129b2:	4603      	mov	r3, r0
   129b4:	2b01      	cmp	r3, #1
   129b6:	d801      	bhi.n	129bc <usb_find_desc+0x20>
   129b8:	2300      	movs	r3, #0
   129ba:	e012      	b.n	129e2 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   129bc:	68f8      	ldr	r0, [r7, #12]
   129be:	4b0c      	ldr	r3, [pc, #48]	; (129f0 <usb_find_desc+0x54>)
   129c0:	4798      	blx	r3
   129c2:	4603      	mov	r3, r0
   129c4:	461a      	mov	r2, r3
   129c6:	79fb      	ldrb	r3, [r7, #7]
   129c8:	4293      	cmp	r3, r2
   129ca:	d101      	bne.n	129d0 <usb_find_desc+0x34>
			return desc;
   129cc:	68fb      	ldr	r3, [r7, #12]
   129ce:	e008      	b.n	129e2 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   129d0:	68f8      	ldr	r0, [r7, #12]
   129d2:	4b08      	ldr	r3, [pc, #32]	; (129f4 <usb_find_desc+0x58>)
   129d4:	4798      	blx	r3
   129d6:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   129d8:	68fa      	ldr	r2, [r7, #12]
   129da:	68bb      	ldr	r3, [r7, #8]
   129dc:	429a      	cmp	r2, r3
   129de:	d3e5      	bcc.n	129ac <usb_find_desc+0x10>
	}
	return NULL;
   129e0:	2300      	movs	r3, #0
}
   129e2:	4618      	mov	r0, r3
   129e4:	3710      	adds	r7, #16
   129e6:	46bd      	mov	sp, r7
   129e8:	bd80      	pop	{r7, pc}
   129ea:	bf00      	nop
   129ec:	00012903 	.word	0x00012903
   129f0:	0001291b 	.word	0x0001291b
   129f4:	00012935 	.word	0x00012935

000129f8 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   129f8:	b580      	push	{r7, lr}
   129fa:	b082      	sub	sp, #8
   129fc:	af00      	add	r7, sp, #0
   129fe:	6078      	str	r0, [r7, #4]
   12a00:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   12a02:	e019      	b.n	12a38 <usb_find_ep_desc+0x40>
		_desc_len_check();
   12a04:	6878      	ldr	r0, [r7, #4]
   12a06:	4b12      	ldr	r3, [pc, #72]	; (12a50 <usb_find_ep_desc+0x58>)
   12a08:	4798      	blx	r3
   12a0a:	4603      	mov	r3, r0
   12a0c:	2b01      	cmp	r3, #1
   12a0e:	d801      	bhi.n	12a14 <usb_find_ep_desc+0x1c>
   12a10:	2300      	movs	r3, #0
   12a12:	e018      	b.n	12a46 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   12a14:	6878      	ldr	r0, [r7, #4]
   12a16:	4b0f      	ldr	r3, [pc, #60]	; (12a54 <usb_find_ep_desc+0x5c>)
   12a18:	4798      	blx	r3
   12a1a:	4603      	mov	r3, r0
   12a1c:	2b04      	cmp	r3, #4
   12a1e:	d010      	beq.n	12a42 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   12a20:	6878      	ldr	r0, [r7, #4]
   12a22:	4b0c      	ldr	r3, [pc, #48]	; (12a54 <usb_find_ep_desc+0x5c>)
   12a24:	4798      	blx	r3
   12a26:	4603      	mov	r3, r0
   12a28:	2b05      	cmp	r3, #5
   12a2a:	d101      	bne.n	12a30 <usb_find_ep_desc+0x38>
			return desc;
   12a2c:	687b      	ldr	r3, [r7, #4]
   12a2e:	e00a      	b.n	12a46 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   12a30:	6878      	ldr	r0, [r7, #4]
   12a32:	4b09      	ldr	r3, [pc, #36]	; (12a58 <usb_find_ep_desc+0x60>)
   12a34:	4798      	blx	r3
   12a36:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   12a38:	687a      	ldr	r2, [r7, #4]
   12a3a:	683b      	ldr	r3, [r7, #0]
   12a3c:	429a      	cmp	r2, r3
   12a3e:	d3e1      	bcc.n	12a04 <usb_find_ep_desc+0xc>
   12a40:	e000      	b.n	12a44 <usb_find_ep_desc+0x4c>
			break;
   12a42:	bf00      	nop
	}
	return NULL;
   12a44:	2300      	movs	r3, #0
}
   12a46:	4618      	mov	r0, r3
   12a48:	3708      	adds	r7, #8
   12a4a:	46bd      	mov	sp, r7
   12a4c:	bd80      	pop	{r7, pc}
   12a4e:	bf00      	nop
   12a50:	00012903 	.word	0x00012903
   12a54:	0001291b 	.word	0x0001291b
   12a58:	00012935 	.word	0x00012935

00012a5c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   12a5c:	b580      	push	{r7, lr}
   12a5e:	b084      	sub	sp, #16
   12a60:	af00      	add	r7, sp, #0
   12a62:	60f8      	str	r0, [r7, #12]
   12a64:	60b9      	str	r1, [r7, #8]
   12a66:	4613      	mov	r3, r2
   12a68:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   12a6a:	2202      	movs	r2, #2
   12a6c:	68b9      	ldr	r1, [r7, #8]
   12a6e:	68f8      	ldr	r0, [r7, #12]
   12a70:	4b15      	ldr	r3, [pc, #84]	; (12ac8 <usb_find_cfg_desc+0x6c>)
   12a72:	4798      	blx	r3
   12a74:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   12a76:	68fb      	ldr	r3, [r7, #12]
   12a78:	2b00      	cmp	r3, #0
   12a7a:	d11a      	bne.n	12ab2 <usb_find_cfg_desc+0x56>
		return NULL;
   12a7c:	2300      	movs	r3, #0
   12a7e:	e01f      	b.n	12ac0 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   12a80:	68f8      	ldr	r0, [r7, #12]
   12a82:	4b12      	ldr	r3, [pc, #72]	; (12acc <usb_find_cfg_desc+0x70>)
   12a84:	4798      	blx	r3
   12a86:	4603      	mov	r3, r0
   12a88:	2b01      	cmp	r3, #1
   12a8a:	d801      	bhi.n	12a90 <usb_find_cfg_desc+0x34>
   12a8c:	2300      	movs	r3, #0
   12a8e:	e017      	b.n	12ac0 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   12a90:	68fb      	ldr	r3, [r7, #12]
   12a92:	3301      	adds	r3, #1
   12a94:	781b      	ldrb	r3, [r3, #0]
   12a96:	2b02      	cmp	r3, #2
   12a98:	d110      	bne.n	12abc <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   12a9a:	68fb      	ldr	r3, [r7, #12]
   12a9c:	3305      	adds	r3, #5
   12a9e:	781b      	ldrb	r3, [r3, #0]
   12aa0:	79fa      	ldrb	r2, [r7, #7]
   12aa2:	429a      	cmp	r2, r3
   12aa4:	d101      	bne.n	12aaa <usb_find_cfg_desc+0x4e>
			return desc;
   12aa6:	68fb      	ldr	r3, [r7, #12]
   12aa8:	e00a      	b.n	12ac0 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   12aaa:	68f8      	ldr	r0, [r7, #12]
   12aac:	4b08      	ldr	r3, [pc, #32]	; (12ad0 <usb_find_cfg_desc+0x74>)
   12aae:	4798      	blx	r3
   12ab0:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   12ab2:	68fa      	ldr	r2, [r7, #12]
   12ab4:	68bb      	ldr	r3, [r7, #8]
   12ab6:	429a      	cmp	r2, r3
   12ab8:	d3e2      	bcc.n	12a80 <usb_find_cfg_desc+0x24>
   12aba:	e000      	b.n	12abe <usb_find_cfg_desc+0x62>
			break;
   12abc:	bf00      	nop
	}
	return NULL;
   12abe:	2300      	movs	r3, #0
}
   12ac0:	4618      	mov	r0, r3
   12ac2:	3710      	adds	r7, #16
   12ac4:	46bd      	mov	sp, r7
   12ac6:	bd80      	pop	{r7, pc}
   12ac8:	0001299d 	.word	0x0001299d
   12acc:	00012903 	.word	0x00012903
   12ad0:	00012979 	.word	0x00012979

00012ad4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   12ad4:	b580      	push	{r7, lr}
   12ad6:	b086      	sub	sp, #24
   12ad8:	af00      	add	r7, sp, #0
   12ada:	60f8      	str	r0, [r7, #12]
   12adc:	60b9      	str	r1, [r7, #8]
   12ade:	4613      	mov	r3, r2
   12ae0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   12ae2:	2300      	movs	r3, #0
   12ae4:	75fb      	strb	r3, [r7, #23]
   12ae6:	e020      	b.n	12b2a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   12ae8:	2203      	movs	r2, #3
   12aea:	68b9      	ldr	r1, [r7, #8]
   12aec:	68f8      	ldr	r0, [r7, #12]
   12aee:	4b13      	ldr	r3, [pc, #76]	; (12b3c <usb_find_str_desc+0x68>)
   12af0:	4798      	blx	r3
   12af2:	60f8      	str	r0, [r7, #12]
		if (desc) {
   12af4:	68fb      	ldr	r3, [r7, #12]
   12af6:	2b00      	cmp	r3, #0
   12af8:	d015      	beq.n	12b26 <usb_find_str_desc+0x52>
			_desc_len_check();
   12afa:	68f8      	ldr	r0, [r7, #12]
   12afc:	4b10      	ldr	r3, [pc, #64]	; (12b40 <usb_find_str_desc+0x6c>)
   12afe:	4798      	blx	r3
   12b00:	4603      	mov	r3, r0
   12b02:	2b01      	cmp	r3, #1
   12b04:	d801      	bhi.n	12b0a <usb_find_str_desc+0x36>
   12b06:	2300      	movs	r3, #0
   12b08:	e014      	b.n	12b34 <usb_find_str_desc+0x60>
			if (i == str_index) {
   12b0a:	7dfa      	ldrb	r2, [r7, #23]
   12b0c:	79fb      	ldrb	r3, [r7, #7]
   12b0e:	429a      	cmp	r2, r3
   12b10:	d101      	bne.n	12b16 <usb_find_str_desc+0x42>
				return desc;
   12b12:	68fb      	ldr	r3, [r7, #12]
   12b14:	e00e      	b.n	12b34 <usb_find_str_desc+0x60>
			}
			i++;
   12b16:	7dfb      	ldrb	r3, [r7, #23]
   12b18:	3301      	adds	r3, #1
   12b1a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   12b1c:	68f8      	ldr	r0, [r7, #12]
   12b1e:	4b09      	ldr	r3, [pc, #36]	; (12b44 <usb_find_str_desc+0x70>)
   12b20:	4798      	blx	r3
   12b22:	60f8      	str	r0, [r7, #12]
   12b24:	e001      	b.n	12b2a <usb_find_str_desc+0x56>
		} else {
			return NULL;
   12b26:	2300      	movs	r3, #0
   12b28:	e004      	b.n	12b34 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   12b2a:	68fa      	ldr	r2, [r7, #12]
   12b2c:	68bb      	ldr	r3, [r7, #8]
   12b2e:	429a      	cmp	r2, r3
   12b30:	d3da      	bcc.n	12ae8 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   12b32:	2300      	movs	r3, #0
}
   12b34:	4618      	mov	r0, r3
   12b36:	3718      	adds	r7, #24
   12b38:	46bd      	mov	sp, r7
   12b3a:	bd80      	pop	{r7, pc}
   12b3c:	0001299d 	.word	0x0001299d
   12b40:	00012903 	.word	0x00012903
   12b44:	00012935 	.word	0x00012935

00012b48 <_ZN18ARINC_Buffer_ClassC2Ev>:
static 	uint8_t bufferReceiverBuffer[RX_LABELS_NUMBER][4];             // [# of buffers][16 bytes]
static	uint8_t	bufferTransmitBuffer[TX_LABELS_NUMBER][4];


// default constructor
ARINC_Buffer_Class::ARINC_Buffer_Class()
   12b48:	b480      	push	{r7}
   12b4a:	b083      	sub	sp, #12
   12b4c:	af00      	add	r7, sp, #0
   12b4e:	6078      	str	r0, [r7, #4]
   12b50:	6039      	str	r1, [r7, #0]
   12b52:	683b      	ldr	r3, [r7, #0]
   12b54:	681a      	ldr	r2, [r3, #0]
   12b56:	687b      	ldr	r3, [r7, #4]
   12b58:	601a      	str	r2, [r3, #0]
   12b5a:	687b      	ldr	r3, [r7, #4]
   12b5c:	681b      	ldr	r3, [r3, #0]
   12b5e:	3b0c      	subs	r3, #12
   12b60:	681b      	ldr	r3, [r3, #0]
   12b62:	461a      	mov	r2, r3
   12b64:	687b      	ldr	r3, [r7, #4]
   12b66:	4413      	add	r3, r2
   12b68:	683a      	ldr	r2, [r7, #0]
   12b6a:	6852      	ldr	r2, [r2, #4]
   12b6c:	601a      	str	r2, [r3, #0]
   12b6e:	687b      	ldr	r3, [r7, #4]
   12b70:	681b      	ldr	r3, [r3, #0]
   12b72:	3b10      	subs	r3, #16
   12b74:	681b      	ldr	r3, [r3, #0]
   12b76:	461a      	mov	r2, r3
   12b78:	687b      	ldr	r3, [r7, #4]
   12b7a:	4413      	add	r3, r2
   12b7c:	683a      	ldr	r2, [r7, #0]
   12b7e:	6892      	ldr	r2, [r2, #8]
   12b80:	601a      	str	r2, [r3, #0]
{
	

	//receiverBuffer=            // [# of buffers][16 bytes]
	//transmitBuffer=&bufferTransmitBuffer[0];
} //ARINC_Buffer_Class
   12b82:	687b      	ldr	r3, [r7, #4]
   12b84:	4618      	mov	r0, r3
   12b86:	370c      	adds	r7, #12
   12b88:	46bd      	mov	sp, r7
   12b8a:	bc80      	pop	{r7}
   12b8c:	4770      	bx	lr

00012b8e <_ZN18ARINC_Buffer_ClassD2Ev>:

// default destructor
ARINC_Buffer_Class::~ARINC_Buffer_Class()
   12b8e:	b480      	push	{r7}
   12b90:	b083      	sub	sp, #12
   12b92:	af00      	add	r7, sp, #0
   12b94:	6078      	str	r0, [r7, #4]
   12b96:	6039      	str	r1, [r7, #0]
   12b98:	683b      	ldr	r3, [r7, #0]
   12b9a:	681a      	ldr	r2, [r3, #0]
   12b9c:	687b      	ldr	r3, [r7, #4]
   12b9e:	601a      	str	r2, [r3, #0]
   12ba0:	687b      	ldr	r3, [r7, #4]
   12ba2:	681b      	ldr	r3, [r3, #0]
   12ba4:	3b0c      	subs	r3, #12
   12ba6:	681b      	ldr	r3, [r3, #0]
   12ba8:	461a      	mov	r2, r3
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	4413      	add	r3, r2
   12bae:	683a      	ldr	r2, [r7, #0]
   12bb0:	6852      	ldr	r2, [r2, #4]
   12bb2:	601a      	str	r2, [r3, #0]
   12bb4:	687b      	ldr	r3, [r7, #4]
   12bb6:	681b      	ldr	r3, [r3, #0]
   12bb8:	3b10      	subs	r3, #16
   12bba:	681b      	ldr	r3, [r3, #0]
   12bbc:	461a      	mov	r2, r3
   12bbe:	687b      	ldr	r3, [r7, #4]
   12bc0:	4413      	add	r3, r2
   12bc2:	683a      	ldr	r2, [r7, #0]
   12bc4:	6892      	ldr	r2, [r2, #8]
   12bc6:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Buffer_Class
   12bc8:	687b      	ldr	r3, [r7, #4]
   12bca:	4618      	mov	r0, r3
   12bcc:	370c      	adds	r7, #12
   12bce:	46bd      	mov	sp, r7
   12bd0:	bc80      	pop	{r7}
   12bd2:	4770      	bx	lr

00012bd4 <_ZN18ARINC_Buffer_Class10InitBufferEv>:

void	ARINC_Buffer_Class::InitBuffer(void){
   12bd4:	b480      	push	{r7}
   12bd6:	b085      	sub	sp, #20
   12bd8:	af00      	add	r7, sp, #0
   12bda:	6078      	str	r0, [r7, #4]
	LabelsArrayTX=&bufferLabelsArrayTX[0];
   12bdc:	687b      	ldr	r3, [r7, #4]
   12bde:	4a1a      	ldr	r2, [pc, #104]	; (12c48 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x74>)
   12be0:	605a      	str	r2, [r3, #4]
	LabelsArrayRX1=&bufferLabelsArrayRX1[0];
   12be2:	687b      	ldr	r3, [r7, #4]
   12be4:	4a19      	ldr	r2, [pc, #100]	; (12c4c <_ZN18ARINC_Buffer_Class10InitBufferEv+0x78>)
   12be6:	609a      	str	r2, [r3, #8]
	LabelsArrayRX2=&bufferLabelsArrayRX2[0];
   12be8:	687b      	ldr	r3, [r7, #4]
   12bea:	4a19      	ldr	r2, [pc, #100]	; (12c50 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x7c>)
   12bec:	60da      	str	r2, [r3, #12]
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
   12bee:	2300      	movs	r3, #0
   12bf0:	73fb      	strb	r3, [r7, #15]
   12bf2:	7bfb      	ldrb	r3, [r7, #15]
   12bf4:	2b1f      	cmp	r3, #31
   12bf6:	dc17      	bgt.n	12c28 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x54>
		{
			pointerArrayRX[i]=bufferReceiverBuffer[i];
   12bf8:	7bfb      	ldrb	r3, [r7, #15]
   12bfa:	7bfa      	ldrb	r2, [r7, #15]
   12bfc:	0092      	lsls	r2, r2, #2
   12bfe:	4915      	ldr	r1, [pc, #84]	; (12c54 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x80>)
   12c00:	440a      	add	r2, r1
   12c02:	6879      	ldr	r1, [r7, #4]
   12c04:	3328      	adds	r3, #40	; 0x28
   12c06:	009b      	lsls	r3, r3, #2
   12c08:	440b      	add	r3, r1
   12c0a:	605a      	str	r2, [r3, #4]
			pointerArrayTX[i]=bufferTransmitBuffer[i];
   12c0c:	7bfb      	ldrb	r3, [r7, #15]
   12c0e:	7bfa      	ldrb	r2, [r7, #15]
   12c10:	0092      	lsls	r2, r2, #2
   12c12:	4911      	ldr	r1, [pc, #68]	; (12c58 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x84>)
   12c14:	440a      	add	r2, r1
   12c16:	6879      	ldr	r1, [r7, #4]
   12c18:	3308      	adds	r3, #8
   12c1a:	009b      	lsls	r3, r3, #2
   12c1c:	440b      	add	r3, r1
   12c1e:	605a      	str	r2, [r3, #4]
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
   12c20:	7bfb      	ldrb	r3, [r7, #15]
   12c22:	3301      	adds	r3, #1
   12c24:	73fb      	strb	r3, [r7, #15]
   12c26:	e7e4      	b.n	12bf2 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x1e>
		}
		receiverBuffer=pointerArrayRX;
   12c28:	687b      	ldr	r3, [r7, #4]
   12c2a:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
   12c2e:	687b      	ldr	r3, [r7, #4]
   12c30:	611a      	str	r2, [r3, #16]
		transmitBuffer=pointerArrayTX;
   12c32:	687b      	ldr	r3, [r7, #4]
   12c34:	f103 0224 	add.w	r2, r3, #36	; 0x24
   12c38:	687b      	ldr	r3, [r7, #4]
   12c3a:	615a      	str	r2, [r3, #20]
}
   12c3c:	bf00      	nop
   12c3e:	3714      	adds	r7, #20
   12c40:	46bd      	mov	sp, r7
   12c42:	bc80      	pop	{r7}
   12c44:	4770      	bx	lr
   12c46:	bf00      	nop
   12c48:	20008d64 	.word	0x20008d64
   12c4c:	20008d84 	.word	0x20008d84
   12c50:	20008da4 	.word	0x20008da4
   12c54:	20008dc4 	.word	0x20008dc4
   12c58:	20008e44 	.word	0x20008e44

00012c5c <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv>:

void ARINC_Buffer_Class::SaveFlapperValveAngle(void){
   12c5c:	b580      	push	{r7, lr}
   12c5e:	b084      	sub	sp, #16
   12c60:	af00      	add	r7, sp, #0
   12c62:	6078      	str	r0, [r7, #4]
	octalLabel=Label2Byte(FlapperValveAngle);
   12c64:	687b      	ldr	r3, [r7, #4]
   12c66:	681b      	ldr	r3, [r3, #0]
   12c68:	3b0c      	subs	r3, #12
   12c6a:	681b      	ldr	r3, [r3, #0]
   12c6c:	461a      	mov	r2, r3
   12c6e:	687b      	ldr	r3, [r7, #4]
   12c70:	4413      	add	r3, r2
   12c72:	681b      	ldr	r3, [r3, #0]
   12c74:	3304      	adds	r3, #4
   12c76:	681b      	ldr	r3, [r3, #0]
   12c78:	687a      	ldr	r2, [r7, #4]
   12c7a:	6812      	ldr	r2, [r2, #0]
   12c7c:	3a0c      	subs	r2, #12
   12c7e:	6812      	ldr	r2, [r2, #0]
   12c80:	4611      	mov	r1, r2
   12c82:	687a      	ldr	r2, [r7, #4]
   12c84:	440a      	add	r2, r1
   12c86:	f240 1113 	movw	r1, #275	; 0x113
   12c8a:	4610      	mov	r0, r2
   12c8c:	4798      	blx	r3
   12c8e:	4603      	mov	r3, r0
   12c90:	461a      	mov	r2, r3
   12c92:	687b      	ldr	r3, [r7, #4]
   12c94:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   12c96:	687b      	ldr	r3, [r7, #4]
   12c98:	681b      	ldr	r3, [r3, #0]
   12c9a:	3b0c      	subs	r3, #12
   12c9c:	681b      	ldr	r3, [r3, #0]
   12c9e:	461a      	mov	r2, r3
   12ca0:	687b      	ldr	r3, [r7, #4]
   12ca2:	1898      	adds	r0, r3, r2
   12ca4:	687b      	ldr	r3, [r7, #4]
   12ca6:	7e59      	ldrb	r1, [r3, #25]
   12ca8:	687b      	ldr	r3, [r7, #4]
   12caa:	685b      	ldr	r3, [r3, #4]
   12cac:	461a      	mov	r2, r3
   12cae:	4b1b      	ldr	r3, [pc, #108]	; (12d1c <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xc0>)
   12cb0:	4798      	blx	r3
   12cb2:	4603      	mov	r3, r0
   12cb4:	461a      	mov	r2, r3
   12cb6:	687b      	ldr	r3, [r7, #4]
   12cb8:	761a      	strb	r2, [r3, #24]
	uint8_t angle=fv1.GetCurrentAngle();
   12cba:	4819      	ldr	r0, [pc, #100]	; (12d20 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xc4>)
   12cbc:	4b19      	ldr	r3, [pc, #100]	; (12d24 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xc8>)
   12cbe:	4798      	blx	r3
   12cc0:	4603      	mov	r3, r0
   12cc2:	73fb      	strb	r3, [r7, #15]
	data=MakeTXLabel275(angle);
   12cc4:	687b      	ldr	r3, [r7, #4]
   12cc6:	681b      	ldr	r3, [r3, #0]
   12cc8:	3b10      	subs	r3, #16
   12cca:	681b      	ldr	r3, [r3, #0]
   12ccc:	461a      	mov	r2, r3
   12cce:	687b      	ldr	r3, [r7, #4]
   12cd0:	4413      	add	r3, r2
   12cd2:	7bfa      	ldrb	r2, [r7, #15]
   12cd4:	4611      	mov	r1, r2
   12cd6:	4618      	mov	r0, r3
   12cd8:	4b13      	ldr	r3, [pc, #76]	; (12d28 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xcc>)
   12cda:	4798      	blx	r3
   12cdc:	4602      	mov	r2, r0
   12cde:	687b      	ldr	r3, [r7, #4]
   12ce0:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12ce2:	687b      	ldr	r3, [r7, #4]
   12ce4:	681b      	ldr	r3, [r3, #0]
   12ce6:	3b0c      	subs	r3, #12
   12ce8:	681b      	ldr	r3, [r3, #0]
   12cea:	461a      	mov	r2, r3
   12cec:	687b      	ldr	r3, [r7, #4]
   12cee:	1898      	adds	r0, r3, r2
   12cf0:	687b      	ldr	r3, [r7, #4]
   12cf2:	69d9      	ldr	r1, [r3, #28]
   12cf4:	687b      	ldr	r3, [r7, #4]
   12cf6:	3320      	adds	r3, #32
   12cf8:	461a      	mov	r2, r3
   12cfa:	4b0c      	ldr	r3, [pc, #48]	; (12d2c <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xd0>)
   12cfc:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   12cfe:	687b      	ldr	r3, [r7, #4]
   12d00:	695a      	ldr	r2, [r3, #20]
   12d02:	687b      	ldr	r3, [r7, #4]
   12d04:	7e1b      	ldrb	r3, [r3, #24]
   12d06:	009b      	lsls	r3, r3, #2
   12d08:	4413      	add	r3, r2
   12d0a:	681b      	ldr	r3, [r3, #0]
   12d0c:	687a      	ldr	r2, [r7, #4]
   12d0e:	3220      	adds	r2, #32
   12d10:	6812      	ldr	r2, [r2, #0]
   12d12:	601a      	str	r2, [r3, #0]
}
   12d14:	bf00      	nop
   12d16:	3710      	adds	r7, #16
   12d18:	46bd      	mov	sp, r7
   12d1a:	bd80      	pop	{r7, pc}
   12d1c:	00013137 	.word	0x00013137
   12d20:	20009b10 	.word	0x20009b10
   12d24:	000155b5 	.word	0x000155b5
   12d28:	0001471d 	.word	0x0001471d
   12d2c:	000131c5 	.word	0x000131c5

00012d30 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv>:

void ARINC_Buffer_Class::SaveTemperature(void){
   12d30:	b590      	push	{r4, r7, lr}
   12d32:	b085      	sub	sp, #20
   12d34:	af00      	add	r7, sp, #0
   12d36:	6078      	str	r0, [r7, #4]
	octalLabel=Label2Byte(COCKPITS_TEMPERATURE);
   12d38:	687b      	ldr	r3, [r7, #4]
   12d3a:	681b      	ldr	r3, [r3, #0]
   12d3c:	3b0c      	subs	r3, #12
   12d3e:	681b      	ldr	r3, [r3, #0]
   12d40:	461a      	mov	r2, r3
   12d42:	687b      	ldr	r3, [r7, #4]
   12d44:	4413      	add	r3, r2
   12d46:	681b      	ldr	r3, [r3, #0]
   12d48:	3304      	adds	r3, #4
   12d4a:	681b      	ldr	r3, [r3, #0]
   12d4c:	687a      	ldr	r2, [r7, #4]
   12d4e:	6812      	ldr	r2, [r2, #0]
   12d50:	3a0c      	subs	r2, #12
   12d52:	6812      	ldr	r2, [r2, #0]
   12d54:	4611      	mov	r1, r2
   12d56:	687a      	ldr	r2, [r7, #4]
   12d58:	440a      	add	r2, r1
   12d5a:	f44f 71bb 	mov.w	r1, #374	; 0x176
   12d5e:	4610      	mov	r0, r2
   12d60:	4798      	blx	r3
   12d62:	4603      	mov	r3, r0
   12d64:	461a      	mov	r2, r3
   12d66:	687b      	ldr	r3, [r7, #4]
   12d68:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   12d6a:	687b      	ldr	r3, [r7, #4]
   12d6c:	681b      	ldr	r3, [r3, #0]
   12d6e:	3b0c      	subs	r3, #12
   12d70:	681b      	ldr	r3, [r3, #0]
   12d72:	461a      	mov	r2, r3
   12d74:	687b      	ldr	r3, [r7, #4]
   12d76:	1898      	adds	r0, r3, r2
   12d78:	687b      	ldr	r3, [r7, #4]
   12d7a:	7e59      	ldrb	r1, [r3, #25]
   12d7c:	687b      	ldr	r3, [r7, #4]
   12d7e:	685b      	ldr	r3, [r3, #4]
   12d80:	461a      	mov	r2, r3
   12d82:	4b21      	ldr	r3, [pc, #132]	; (12e08 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xd8>)
   12d84:	4798      	blx	r3
   12d86:	4603      	mov	r3, r0
   12d88:	461a      	mov	r2, r3
   12d8a:	687b      	ldr	r3, [r7, #4]
   12d8c:	761a      	strb	r2, [r3, #24]
	float temperature=temperatures.values[0][1];
   12d8e:	4b1f      	ldr	r3, [pc, #124]	; (12e0c <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xdc>)
   12d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12d92:	60fb      	str	r3, [r7, #12]
	data=MakeLabel374(FloatTwoComplement(temperature,15),temperature);
   12d94:	687b      	ldr	r3, [r7, #4]
   12d96:	681b      	ldr	r3, [r3, #0]
   12d98:	3b10      	subs	r3, #16
   12d9a:	681b      	ldr	r3, [r3, #0]
   12d9c:	461a      	mov	r2, r3
   12d9e:	687b      	ldr	r3, [r7, #4]
   12da0:	189c      	adds	r4, r3, r2
   12da2:	687b      	ldr	r3, [r7, #4]
   12da4:	681b      	ldr	r3, [r3, #0]
   12da6:	3b0c      	subs	r3, #12
   12da8:	681b      	ldr	r3, [r3, #0]
   12daa:	461a      	mov	r2, r3
   12dac:	687b      	ldr	r3, [r7, #4]
   12dae:	4413      	add	r3, r2
   12db0:	220f      	movs	r2, #15
   12db2:	68f9      	ldr	r1, [r7, #12]
   12db4:	4618      	mov	r0, r3
   12db6:	4b16      	ldr	r3, [pc, #88]	; (12e10 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe0>)
   12db8:	4798      	blx	r3
   12dba:	4603      	mov	r3, r0
   12dbc:	68fa      	ldr	r2, [r7, #12]
   12dbe:	4619      	mov	r1, r3
   12dc0:	4620      	mov	r0, r4
   12dc2:	4b14      	ldr	r3, [pc, #80]	; (12e14 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe4>)
   12dc4:	4798      	blx	r3
   12dc6:	4602      	mov	r2, r0
   12dc8:	687b      	ldr	r3, [r7, #4]
   12dca:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12dcc:	687b      	ldr	r3, [r7, #4]
   12dce:	681b      	ldr	r3, [r3, #0]
   12dd0:	3b0c      	subs	r3, #12
   12dd2:	681b      	ldr	r3, [r3, #0]
   12dd4:	461a      	mov	r2, r3
   12dd6:	687b      	ldr	r3, [r7, #4]
   12dd8:	1898      	adds	r0, r3, r2
   12dda:	687b      	ldr	r3, [r7, #4]
   12ddc:	69d9      	ldr	r1, [r3, #28]
   12dde:	687b      	ldr	r3, [r7, #4]
   12de0:	3320      	adds	r3, #32
   12de2:	461a      	mov	r2, r3
   12de4:	4b0c      	ldr	r3, [pc, #48]	; (12e18 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe8>)
   12de6:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   12de8:	687b      	ldr	r3, [r7, #4]
   12dea:	695a      	ldr	r2, [r3, #20]
   12dec:	687b      	ldr	r3, [r7, #4]
   12dee:	7e1b      	ldrb	r3, [r3, #24]
   12df0:	009b      	lsls	r3, r3, #2
   12df2:	4413      	add	r3, r2
   12df4:	681b      	ldr	r3, [r3, #0]
   12df6:	687a      	ldr	r2, [r7, #4]
   12df8:	3220      	adds	r2, #32
   12dfa:	6812      	ldr	r2, [r2, #0]
   12dfc:	601a      	str	r2, [r3, #0]
}
   12dfe:	bf00      	nop
   12e00:	3714      	adds	r7, #20
   12e02:	46bd      	mov	sp, r7
   12e04:	bd90      	pop	{r4, r7, pc}
   12e06:	bf00      	nop
   12e08:	00013137 	.word	0x00013137
   12e0c:	20009c84 	.word	0x20009c84
   12e10:	00013209 	.word	0x00013209
   12e14:	00014685 	.word	0x00014685
   12e18:	000131c5 	.word	0x000131c5

00012e1c <_ZN18ARINC_Buffer_Class10SaveStatusEm>:

void ARINC_Buffer_Class::SaveStatus(uint32_t st){
   12e1c:	b580      	push	{r7, lr}
   12e1e:	b082      	sub	sp, #8
   12e20:	af00      	add	r7, sp, #0
   12e22:	6078      	str	r0, [r7, #4]
   12e24:	6039      	str	r1, [r7, #0]
	octalLabel=Label2Byte(ECS_COMMAND_ACKNOWLEDGE);
   12e26:	687b      	ldr	r3, [r7, #4]
   12e28:	681b      	ldr	r3, [r3, #0]
   12e2a:	3b0c      	subs	r3, #12
   12e2c:	681b      	ldr	r3, [r3, #0]
   12e2e:	461a      	mov	r2, r3
   12e30:	687b      	ldr	r3, [r7, #4]
   12e32:	4413      	add	r3, r2
   12e34:	681b      	ldr	r3, [r3, #0]
   12e36:	3304      	adds	r3, #4
   12e38:	681b      	ldr	r3, [r3, #0]
   12e3a:	687a      	ldr	r2, [r7, #4]
   12e3c:	6812      	ldr	r2, [r2, #0]
   12e3e:	3a0c      	subs	r2, #12
   12e40:	6812      	ldr	r2, [r2, #0]
   12e42:	4611      	mov	r1, r2
   12e44:	687a      	ldr	r2, [r7, #4]
   12e46:	440a      	add	r2, r1
   12e48:	f44f 7187 	mov.w	r1, #270	; 0x10e
   12e4c:	4610      	mov	r0, r2
   12e4e:	4798      	blx	r3
   12e50:	4603      	mov	r3, r0
   12e52:	461a      	mov	r2, r3
   12e54:	687b      	ldr	r3, [r7, #4]
   12e56:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   12e58:	687b      	ldr	r3, [r7, #4]
   12e5a:	681b      	ldr	r3, [r3, #0]
   12e5c:	3b0c      	subs	r3, #12
   12e5e:	681b      	ldr	r3, [r3, #0]
   12e60:	461a      	mov	r2, r3
   12e62:	687b      	ldr	r3, [r7, #4]
   12e64:	1898      	adds	r0, r3, r2
   12e66:	687b      	ldr	r3, [r7, #4]
   12e68:	7e59      	ldrb	r1, [r3, #25]
   12e6a:	687b      	ldr	r3, [r7, #4]
   12e6c:	685b      	ldr	r3, [r3, #4]
   12e6e:	461a      	mov	r2, r3
   12e70:	4b18      	ldr	r3, [pc, #96]	; (12ed4 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xb8>)
   12e72:	4798      	blx	r3
   12e74:	4603      	mov	r3, r0
   12e76:	461a      	mov	r2, r3
   12e78:	687b      	ldr	r3, [r7, #4]
   12e7a:	761a      	strb	r2, [r3, #24]
	data=MakeLabel270(st);
   12e7c:	687b      	ldr	r3, [r7, #4]
   12e7e:	681b      	ldr	r3, [r3, #0]
   12e80:	3b10      	subs	r3, #16
   12e82:	681b      	ldr	r3, [r3, #0]
   12e84:	461a      	mov	r2, r3
   12e86:	687b      	ldr	r3, [r7, #4]
   12e88:	4413      	add	r3, r2
   12e8a:	6839      	ldr	r1, [r7, #0]
   12e8c:	4618      	mov	r0, r3
   12e8e:	4b12      	ldr	r3, [pc, #72]	; (12ed8 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xbc>)
   12e90:	4798      	blx	r3
   12e92:	4602      	mov	r2, r0
   12e94:	687b      	ldr	r3, [r7, #4]
   12e96:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12e98:	687b      	ldr	r3, [r7, #4]
   12e9a:	681b      	ldr	r3, [r3, #0]
   12e9c:	3b0c      	subs	r3, #12
   12e9e:	681b      	ldr	r3, [r3, #0]
   12ea0:	461a      	mov	r2, r3
   12ea2:	687b      	ldr	r3, [r7, #4]
   12ea4:	1898      	adds	r0, r3, r2
   12ea6:	687b      	ldr	r3, [r7, #4]
   12ea8:	69d9      	ldr	r1, [r3, #28]
   12eaa:	687b      	ldr	r3, [r7, #4]
   12eac:	3320      	adds	r3, #32
   12eae:	461a      	mov	r2, r3
   12eb0:	4b0a      	ldr	r3, [pc, #40]	; (12edc <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xc0>)
   12eb2:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   12eb4:	687b      	ldr	r3, [r7, #4]
   12eb6:	695a      	ldr	r2, [r3, #20]
   12eb8:	687b      	ldr	r3, [r7, #4]
   12eba:	7e1b      	ldrb	r3, [r3, #24]
   12ebc:	009b      	lsls	r3, r3, #2
   12ebe:	4413      	add	r3, r2
   12ec0:	681b      	ldr	r3, [r3, #0]
   12ec2:	687a      	ldr	r2, [r7, #4]
   12ec4:	3220      	adds	r2, #32
   12ec6:	6812      	ldr	r2, [r2, #0]
   12ec8:	601a      	str	r2, [r3, #0]
}
   12eca:	bf00      	nop
   12ecc:	3708      	adds	r7, #8
   12ece:	46bd      	mov	sp, r7
   12ed0:	bd80      	pop	{r7, pc}
   12ed2:	bf00      	nop
   12ed4:	00013137 	.word	0x00013137
   12ed8:	00014795 	.word	0x00014795
   12edc:	000131c5 	.word	0x000131c5

00012ee0 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh>:

void ARINC_Buffer_Class::SortReceivedData(uint8_t* receiver){
   12ee0:	b480      	push	{r7}
   12ee2:	b085      	sub	sp, #20
   12ee4:	af00      	add	r7, sp, #0
   12ee6:	6078      	str	r0, [r7, #4]
   12ee8:	6039      	str	r1, [r7, #0]
		uint8_t i,j,l;
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
   12eea:	2300      	movs	r3, #0
   12eec:	73fb      	strb	r3, [r7, #15]
   12eee:	7bfb      	ldrb	r3, [r7, #15]
   12ef0:	2b1f      	cmp	r3, #31
   12ef2:	dc1d      	bgt.n	12f30 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x50>
		{
			if (LabelsArrayRX1[i]>0)
   12ef4:	687b      	ldr	r3, [r7, #4]
   12ef6:	689a      	ldr	r2, [r3, #8]
   12ef8:	7bfb      	ldrb	r3, [r7, #15]
   12efa:	4413      	add	r3, r2
   12efc:	781b      	ldrb	r3, [r3, #0]
   12efe:	2b00      	cmp	r3, #0
   12f00:	dd12      	ble.n	12f28 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x48>
			{
			
					if (receiver[3]==LabelsArrayRX1[i])
   12f02:	683b      	ldr	r3, [r7, #0]
   12f04:	3303      	adds	r3, #3
   12f06:	781a      	ldrb	r2, [r3, #0]
   12f08:	687b      	ldr	r3, [r7, #4]
   12f0a:	6899      	ldr	r1, [r3, #8]
   12f0c:	7bfb      	ldrb	r3, [r7, #15]
   12f0e:	440b      	add	r3, r1
   12f10:	781b      	ldrb	r3, [r3, #0]
   12f12:	429a      	cmp	r2, r3
   12f14:	d108      	bne.n	12f28 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x48>
					{
						memcpy(receiverBuffer[i],receiver,4);
   12f16:	687b      	ldr	r3, [r7, #4]
   12f18:	691a      	ldr	r2, [r3, #16]
   12f1a:	7bfb      	ldrb	r3, [r7, #15]
   12f1c:	009b      	lsls	r3, r3, #2
   12f1e:	4413      	add	r3, r2
   12f20:	681b      	ldr	r3, [r3, #0]
   12f22:	683a      	ldr	r2, [r7, #0]
   12f24:	6812      	ldr	r2, [r2, #0]
   12f26:	601a      	str	r2, [r3, #0]
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
   12f28:	7bfb      	ldrb	r3, [r7, #15]
   12f2a:	3301      	adds	r3, #1
   12f2c:	73fb      	strb	r3, [r7, #15]
   12f2e:	e7de      	b.n	12eee <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0xe>
					}
			
	
			}
		}
   12f30:	bf00      	nop
   12f32:	3714      	adds	r7, #20
   12f34:	46bd      	mov	sp, r7
   12f36:	bc80      	pop	{r7}
   12f38:	4770      	bx	lr
	...

00012f3c <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
   12f3c:	b480      	push	{r7}
   12f3e:	b083      	sub	sp, #12
   12f40:	af00      	add	r7, sp, #0
   12f42:	6078      	str	r0, [r7, #4]
   12f44:	4a04      	ldr	r2, [pc, #16]	; (12f58 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
   12f46:	687b      	ldr	r3, [r7, #4]
   12f48:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
   12f4a:	687b      	ldr	r3, [r7, #4]
   12f4c:	4618      	mov	r0, r3
   12f4e:	370c      	adds	r7, #12
   12f50:	46bd      	mov	sp, r7
   12f52:	bc80      	pop	{r7}
   12f54:	4770      	bx	lr
   12f56:	bf00      	nop
   12f58:	00020e08 	.word	0x00020e08

00012f5c <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
   12f5c:	b480      	push	{r7}
   12f5e:	b083      	sub	sp, #12
   12f60:	af00      	add	r7, sp, #0
   12f62:	6078      	str	r0, [r7, #4]
   12f64:	4a04      	ldr	r2, [pc, #16]	; (12f78 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
   12f66:	687b      	ldr	r3, [r7, #4]
   12f68:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
   12f6a:	687b      	ldr	r3, [r7, #4]
   12f6c:	4618      	mov	r0, r3
   12f6e:	370c      	adds	r7, #12
   12f70:	46bd      	mov	sp, r7
   12f72:	bc80      	pop	{r7}
   12f74:	4770      	bx	lr
   12f76:	bf00      	nop
   12f78:	00020e08 	.word	0x00020e08

00012f7c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   12f7c:	b5b0      	push	{r4, r5, r7, lr}
   12f7e:	b082      	sub	sp, #8
   12f80:	af00      	add	r7, sp, #0
   12f82:	6078      	str	r0, [r7, #4]
   12f84:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   12f86:	4b0a      	ldr	r3, [pc, #40]	; (12fb0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   12f88:	6878      	ldr	r0, [r7, #4]
   12f8a:	4798      	blx	r3
   12f8c:	4604      	mov	r4, r0
   12f8e:	460d      	mov	r5, r1
   12f90:	4b07      	ldr	r3, [pc, #28]	; (12fb0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   12f92:	6838      	ldr	r0, [r7, #0]
   12f94:	4798      	blx	r3
   12f96:	4602      	mov	r2, r0
   12f98:	460b      	mov	r3, r1
   12f9a:	4620      	mov	r0, r4
   12f9c:	4629      	mov	r1, r5
   12f9e:	4c05      	ldr	r4, [pc, #20]	; (12fb4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
   12fa0:	47a0      	blx	r4
   12fa2:	4603      	mov	r3, r0
   12fa4:	460c      	mov	r4, r1
    }
   12fa6:	4618      	mov	r0, r3
   12fa8:	4621      	mov	r1, r4
   12faa:	3708      	adds	r7, #8
   12fac:	46bd      	mov	sp, r7
   12fae:	bdb0      	pop	{r4, r5, r7, pc}
   12fb0:	0001b259 	.word	0x0001b259
   12fb4:	00019e69 	.word	0x00019e69

00012fb8 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   12fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12fbc:	b085      	sub	sp, #20
   12fbe:	af00      	add	r7, sp, #0
   12fc0:	6078      	str	r0, [r7, #4]
   12fc2:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
   12fc4:	2300      	movs	r3, #0
   12fc6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   12fc8:	2300      	movs	r3, #0
   12fca:	73bb      	strb	r3, [r7, #14]
   12fcc:	7bbb      	ldrb	r3, [r7, #14]
   12fce:	2b02      	cmp	r3, #2
   12fd0:	d86d      	bhi.n	130ae <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   12fd2:	7bbb      	ldrb	r3, [r7, #14]
   12fd4:	f1c3 0402 	rsb	r4, r3, #2
   12fd8:	4b3c      	ldr	r3, [pc, #240]	; (130cc <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   12fda:	6838      	ldr	r0, [r7, #0]
   12fdc:	4798      	blx	r3
   12fde:	4680      	mov	r8, r0
   12fe0:	4689      	mov	r9, r1
   12fe2:	7bbb      	ldrb	r3, [r7, #14]
   12fe4:	f1c3 0302 	rsb	r3, r3, #2
   12fe8:	4619      	mov	r1, r3
   12fea:	200a      	movs	r0, #10
   12fec:	4b38      	ldr	r3, [pc, #224]	; (130d0 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   12fee:	4798      	blx	r3
   12ff0:	4602      	mov	r2, r0
   12ff2:	460b      	mov	r3, r1
   12ff4:	4d37      	ldr	r5, [pc, #220]	; (130d4 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
   12ff6:	4640      	mov	r0, r8
   12ff8:	4649      	mov	r1, r9
   12ffa:	47a8      	blx	r5
   12ffc:	4602      	mov	r2, r0
   12ffe:	460b      	mov	r3, r1
   13000:	4611      	mov	r1, r2
   13002:	461a      	mov	r2, r3
   13004:	4b34      	ldr	r3, [pc, #208]	; (130d8 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   13006:	4608      	mov	r0, r1
   13008:	4611      	mov	r1, r2
   1300a:	4798      	blx	r3
   1300c:	4603      	mov	r3, r0
   1300e:	b2da      	uxtb	r2, r3
   13010:	f107 0310 	add.w	r3, r7, #16
   13014:	4423      	add	r3, r4
   13016:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
   1301a:	7bbb      	ldrb	r3, [r7, #14]
   1301c:	f1c3 0302 	rsb	r3, r3, #2
   13020:	f107 0210 	add.w	r2, r7, #16
   13024:	4413      	add	r3, r2
   13026:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1302a:	461a      	mov	r2, r3
   1302c:	4b2b      	ldr	r3, [pc, #172]	; (130dc <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
   1302e:	4610      	mov	r0, r2
   13030:	4798      	blx	r3
   13032:	4605      	mov	r5, r0
   13034:	460e      	mov	r6, r1
   13036:	7bbb      	ldrb	r3, [r7, #14]
   13038:	f1c3 0302 	rsb	r3, r3, #2
   1303c:	4619      	mov	r1, r3
   1303e:	200a      	movs	r0, #10
   13040:	4b23      	ldr	r3, [pc, #140]	; (130d0 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   13042:	4798      	blx	r3
   13044:	4602      	mov	r2, r0
   13046:	460b      	mov	r3, r1
   13048:	4c25      	ldr	r4, [pc, #148]	; (130e0 <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
   1304a:	4628      	mov	r0, r5
   1304c:	4631      	mov	r1, r6
   1304e:	47a0      	blx	r4
   13050:	4603      	mov	r3, r0
   13052:	460c      	mov	r4, r1
   13054:	461d      	mov	r5, r3
   13056:	4626      	mov	r6, r4
   13058:	4b1c      	ldr	r3, [pc, #112]	; (130cc <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   1305a:	6838      	ldr	r0, [r7, #0]
   1305c:	4798      	blx	r3
   1305e:	4c21      	ldr	r4, [pc, #132]	; (130e4 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
   13060:	462a      	mov	r2, r5
   13062:	4633      	mov	r3, r6
   13064:	47a0      	blx	r4
   13066:	4603      	mov	r3, r0
   13068:	460c      	mov	r4, r1
   1306a:	4619      	mov	r1, r3
   1306c:	4622      	mov	r2, r4
   1306e:	4b1a      	ldr	r3, [pc, #104]	; (130d8 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   13070:	4608      	mov	r0, r1
   13072:	4611      	mov	r1, r2
   13074:	4798      	blx	r3
   13076:	4603      	mov	r3, r0
   13078:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
   1307a:	7bbb      	ldrb	r3, [r7, #14]
   1307c:	f1c3 0302 	rsb	r3, r3, #2
   13080:	f107 0210 	add.w	r2, r7, #16
   13084:	4413      	add	r3, r2
   13086:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1308a:	461a      	mov	r2, r3
   1308c:	7bbb      	ldrb	r3, [r7, #14]
   1308e:	4619      	mov	r1, r3
   13090:	009b      	lsls	r3, r3, #2
   13092:	1acb      	subs	r3, r1, r3
   13094:	3306      	adds	r3, #6
   13096:	fa02 f303 	lsl.w	r3, r2, r3
   1309a:	b25a      	sxtb	r2, r3
   1309c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   130a0:	4313      	orrs	r3, r2
   130a2:	b25b      	sxtb	r3, r3
   130a4:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   130a6:	7bbb      	ldrb	r3, [r7, #14]
   130a8:	3301      	adds	r3, #1
   130aa:	73bb      	strb	r3, [r7, #14]
   130ac:	e78e      	b.n	12fcc <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
   130ae:	687b      	ldr	r3, [r7, #4]
   130b0:	681b      	ldr	r3, [r3, #0]
   130b2:	681b      	ldr	r3, [r3, #0]
   130b4:	7bfa      	ldrb	r2, [r7, #15]
   130b6:	4611      	mov	r1, r2
   130b8:	6878      	ldr	r0, [r7, #4]
   130ba:	4798      	blx	r3
   130bc:	4603      	mov	r3, r0
   130be:	73fb      	strb	r3, [r7, #15]
	return result;
   130c0:	7bfb      	ldrb	r3, [r7, #15]
	
}
   130c2:	4618      	mov	r0, r3
   130c4:	3714      	adds	r7, #20
   130c6:	46bd      	mov	sp, r7
   130c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   130cc:	0001b239 	.word	0x0001b239
   130d0:	00012f7d 	.word	0x00012f7d
   130d4:	0001b579 	.word	0x0001b579
   130d8:	0001b885 	.word	0x0001b885
   130dc:	0001b259 	.word	0x0001b259
   130e0:	0001b325 	.word	0x0001b325
   130e4:	0001afbd 	.word	0x0001afbd

000130e8 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
   130e8:	b480      	push	{r7}
   130ea:	b085      	sub	sp, #20
   130ec:	af00      	add	r7, sp, #0
   130ee:	6078      	str	r0, [r7, #4]
   130f0:	460b      	mov	r3, r1
   130f2:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
   130f4:	2300      	movs	r3, #0
   130f6:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   130f8:	2300      	movs	r3, #0
   130fa:	60bb      	str	r3, [r7, #8]
   130fc:	68bb      	ldr	r3, [r7, #8]
   130fe:	2b07      	cmp	r3, #7
   13100:	dc13      	bgt.n	1312a <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
   13102:	7bfb      	ldrb	r3, [r7, #15]
   13104:	005b      	lsls	r3, r3, #1
   13106:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   13108:	78fa      	ldrb	r2, [r7, #3]
   1310a:	68bb      	ldr	r3, [r7, #8]
   1310c:	fa42 f303 	asr.w	r3, r2, r3
   13110:	b25b      	sxtb	r3, r3
   13112:	f003 0301 	and.w	r3, r3, #1
   13116:	b25a      	sxtb	r2, r3
   13118:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1311c:	4313      	orrs	r3, r2
   1311e:	b25b      	sxtb	r3, r3
   13120:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   13122:	68bb      	ldr	r3, [r7, #8]
   13124:	3301      	adds	r3, #1
   13126:	60bb      	str	r3, [r7, #8]
   13128:	e7e8      	b.n	130fc <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
   1312a:	7bfb      	ldrb	r3, [r7, #15]
}
   1312c:	4618      	mov	r0, r3
   1312e:	3714      	adds	r7, #20
   13130:	46bd      	mov	sp, r7
   13132:	bc80      	pop	{r7}
   13134:	4770      	bx	lr

00013136 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh>:
uint8_t ARINC_Conversions::GetIndexTXLabelarray(uint8_t l, uint8_t* arr){
   13136:	b480      	push	{r7}
   13138:	b087      	sub	sp, #28
   1313a:	af00      	add	r7, sp, #0
   1313c:	60f8      	str	r0, [r7, #12]
   1313e:	460b      	mov	r3, r1
   13140:	607a      	str	r2, [r7, #4]
   13142:	72fb      	strb	r3, [r7, #11]
	for (uint8_t ii = 0; ii < 32; ii++)
   13144:	2300      	movs	r3, #0
   13146:	75fb      	strb	r3, [r7, #23]
   13148:	7dfb      	ldrb	r3, [r7, #23]
   1314a:	2b1f      	cmp	r3, #31
   1314c:	dc0c      	bgt.n	13168 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x32>
	{
		if (arr[ii]==l)
   1314e:	7dfb      	ldrb	r3, [r7, #23]
   13150:	687a      	ldr	r2, [r7, #4]
   13152:	4413      	add	r3, r2
   13154:	781b      	ldrb	r3, [r3, #0]
   13156:	7afa      	ldrb	r2, [r7, #11]
   13158:	429a      	cmp	r2, r3
   1315a:	d101      	bne.n	13160 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x2a>
		{
			return ii;
   1315c:	7dfb      	ldrb	r3, [r7, #23]
   1315e:	e004      	b.n	1316a <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x34>
	for (uint8_t ii = 0; ii < 32; ii++)
   13160:	7dfb      	ldrb	r3, [r7, #23]
   13162:	3301      	adds	r3, #1
   13164:	75fb      	strb	r3, [r7, #23]
   13166:	e7ef      	b.n	13148 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x12>
		}
		
	}
	return 32;
   13168:	2320      	movs	r3, #32
}
   1316a:	4618      	mov	r0, r3
   1316c:	371c      	adds	r7, #28
   1316e:	46bd      	mov	sp, r7
   13170:	bc80      	pop	{r7}
   13172:	4770      	bx	lr

00013174 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh>:
		
	}


}
uint32_t	ARINC_Conversions::FourBytesArray2Uint32(uint8_t* arr){
   13174:	b480      	push	{r7}
   13176:	b085      	sub	sp, #20
   13178:	af00      	add	r7, sp, #0
   1317a:	6078      	str	r0, [r7, #4]
   1317c:	6039      	str	r1, [r7, #0]

		result=0;
   1317e:	687b      	ldr	r3, [r7, #4]
   13180:	2200      	movs	r2, #0
   13182:	609a      	str	r2, [r3, #8]
		for (uint8_t ii = 0; ii < 4; ii++)
   13184:	2300      	movs	r3, #0
   13186:	73fb      	strb	r3, [r7, #15]
   13188:	7bfb      	ldrb	r3, [r7, #15]
   1318a:	2b03      	cmp	r3, #3
   1318c:	dc13      	bgt.n	131b6 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x42>
		{
			result|=((uint32_t)arr[ii])<<(24-ii*8);
   1318e:	687b      	ldr	r3, [r7, #4]
   13190:	689a      	ldr	r2, [r3, #8]
   13192:	7bfb      	ldrb	r3, [r7, #15]
   13194:	6839      	ldr	r1, [r7, #0]
   13196:	440b      	add	r3, r1
   13198:	781b      	ldrb	r3, [r3, #0]
   1319a:	4619      	mov	r1, r3
   1319c:	7bfb      	ldrb	r3, [r7, #15]
   1319e:	f1c3 0303 	rsb	r3, r3, #3
   131a2:	00db      	lsls	r3, r3, #3
   131a4:	fa01 f303 	lsl.w	r3, r1, r3
   131a8:	431a      	orrs	r2, r3
   131aa:	687b      	ldr	r3, [r7, #4]
   131ac:	609a      	str	r2, [r3, #8]
		for (uint8_t ii = 0; ii < 4; ii++)
   131ae:	7bfb      	ldrb	r3, [r7, #15]
   131b0:	3301      	adds	r3, #1
   131b2:	73fb      	strb	r3, [r7, #15]
   131b4:	e7e8      	b.n	13188 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x14>

		}
		return result;
   131b6:	687b      	ldr	r3, [r7, #4]
   131b8:	689b      	ldr	r3, [r3, #8]
}
   131ba:	4618      	mov	r0, r3
   131bc:	3714      	adds	r7, #20
   131be:	46bd      	mov	sp, r7
   131c0:	bc80      	pop	{r7}
   131c2:	4770      	bx	lr

000131c4 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh>:
void	ARINC_Conversions::Uint32FourBytesArray(uint32_t data,uint8_t *dest){
   131c4:	b480      	push	{r7}
   131c6:	b087      	sub	sp, #28
   131c8:	af00      	add	r7, sp, #0
   131ca:	60f8      	str	r0, [r7, #12]
   131cc:	60b9      	str	r1, [r7, #8]
   131ce:	607a      	str	r2, [r7, #4]

	uint8_t d;
	for (uint8_t ii = 0; ii < 4; ii++)
   131d0:	2300      	movs	r3, #0
   131d2:	75fb      	strb	r3, [r7, #23]
   131d4:	7dfb      	ldrb	r3, [r7, #23]
   131d6:	2b03      	cmp	r3, #3
   131d8:	dc10      	bgt.n	131fc <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x38>
	{
		d=(uint8_t)((data>>(24-ii*8))&(0xff));
   131da:	7dfb      	ldrb	r3, [r7, #23]
   131dc:	f1c3 0303 	rsb	r3, r3, #3
   131e0:	00db      	lsls	r3, r3, #3
   131e2:	68ba      	ldr	r2, [r7, #8]
   131e4:	fa22 f303 	lsr.w	r3, r2, r3
   131e8:	75bb      	strb	r3, [r7, #22]
		dest[ii]=d;
   131ea:	7dfb      	ldrb	r3, [r7, #23]
   131ec:	687a      	ldr	r2, [r7, #4]
   131ee:	4413      	add	r3, r2
   131f0:	7dba      	ldrb	r2, [r7, #22]
   131f2:	701a      	strb	r2, [r3, #0]
	for (uint8_t ii = 0; ii < 4; ii++)
   131f4:	7dfb      	ldrb	r3, [r7, #23]
   131f6:	3301      	adds	r3, #1
   131f8:	75fb      	strb	r3, [r7, #23]
   131fa:	e7eb      	b.n	131d4 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x10>

	}

}
   131fc:	bf00      	nop
   131fe:	371c      	adds	r7, #28
   13200:	46bd      	mov	sp, r7
   13202:	bc80      	pop	{r7}
   13204:	4770      	bx	lr
	...

00013208 <_ZN17ARINC_Conversions18FloatTwoComplementEfh>:
uint32_t	ARINC_Conversions::FloatTwoComplement(float f, uint8_t size){
   13208:	b580      	push	{r7, lr}
   1320a:	b084      	sub	sp, #16
   1320c:	af00      	add	r7, sp, #0
   1320e:	60f8      	str	r0, [r7, #12]
   13210:	60b9      	str	r1, [r7, #8]
   13212:	4613      	mov	r3, r2
   13214:	71fb      	strb	r3, [r7, #7]
	
	if (f>=0)
   13216:	4b17      	ldr	r3, [pc, #92]	; (13274 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x6c>)
   13218:	f04f 0100 	mov.w	r1, #0
   1321c:	68b8      	ldr	r0, [r7, #8]
   1321e:	4798      	blx	r3
   13220:	4603      	mov	r3, r0
   13222:	2b00      	cmp	r3, #0
   13224:	d006      	beq.n	13234 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x2c>
	{
		value=(uint32_t)f;
   13226:	4b14      	ldr	r3, [pc, #80]	; (13278 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   13228:	68b8      	ldr	r0, [r7, #8]
   1322a:	4798      	blx	r3
   1322c:	4602      	mov	r2, r0
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	60da      	str	r2, [r3, #12]
   13232:	e018      	b.n	13266 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x5e>
	} 
	else
	{
		value=(uint32_t)(-1*f);
   13234:	68bb      	ldr	r3, [r7, #8]
   13236:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   1323a:	4b0f      	ldr	r3, [pc, #60]	; (13278 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   1323c:	4610      	mov	r0, r2
   1323e:	4798      	blx	r3
   13240:	4602      	mov	r2, r0
   13242:	68fb      	ldr	r3, [r7, #12]
   13244:	60da      	str	r2, [r3, #12]
		value=(~value)&((1<<(size))-1);
   13246:	68fb      	ldr	r3, [r7, #12]
   13248:	68db      	ldr	r3, [r3, #12]
   1324a:	43db      	mvns	r3, r3
   1324c:	79fa      	ldrb	r2, [r7, #7]
   1324e:	4611      	mov	r1, r2
   13250:	2201      	movs	r2, #1
   13252:	408a      	lsls	r2, r1
   13254:	3a01      	subs	r2, #1
   13256:	401a      	ands	r2, r3
   13258:	68fb      	ldr	r3, [r7, #12]
   1325a:	60da      	str	r2, [r3, #12]
		value+=1;
   1325c:	68fb      	ldr	r3, [r7, #12]
   1325e:	68db      	ldr	r3, [r3, #12]
   13260:	1c5a      	adds	r2, r3, #1
   13262:	68fb      	ldr	r3, [r7, #12]
   13264:	60da      	str	r2, [r3, #12]
	}
	return value;
   13266:	68fb      	ldr	r3, [r7, #12]
   13268:	68db      	ldr	r3, [r3, #12]
}
   1326a:	4618      	mov	r0, r3
   1326c:	3710      	adds	r7, #16
   1326e:	46bd      	mov	sp, r7
   13270:	bd80      	pop	{r7, pc}
   13272:	bf00      	nop
   13274:	0001be45 	.word	0x0001be45
   13278:	0001be6d 	.word	0x0001be6d

0001327c <_ZN17ARINC_Conversions10FindParityEm>:


// Function to find the parity
bool ARINC_Conversions::FindParity(uint32_t x)
{
   1327c:	b480      	push	{r7}
   1327e:	b085      	sub	sp, #20
   13280:	af00      	add	r7, sp, #0
   13282:	6078      	str	r0, [r7, #4]
   13284:	6039      	str	r1, [r7, #0]
	uint32_t y = x ^ (x >> 1);
   13286:	683b      	ldr	r3, [r7, #0]
   13288:	085a      	lsrs	r2, r3, #1
   1328a:	683b      	ldr	r3, [r7, #0]
   1328c:	4053      	eors	r3, r2
   1328e:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 2);
   13290:	68fb      	ldr	r3, [r7, #12]
   13292:	089b      	lsrs	r3, r3, #2
   13294:	68fa      	ldr	r2, [r7, #12]
   13296:	4053      	eors	r3, r2
   13298:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 4);
   1329a:	68fb      	ldr	r3, [r7, #12]
   1329c:	091b      	lsrs	r3, r3, #4
   1329e:	68fa      	ldr	r2, [r7, #12]
   132a0:	4053      	eors	r3, r2
   132a2:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 8);
   132a4:	68fb      	ldr	r3, [r7, #12]
   132a6:	0a1b      	lsrs	r3, r3, #8
   132a8:	68fa      	ldr	r2, [r7, #12]
   132aa:	4053      	eors	r3, r2
   132ac:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 16);
   132ae:	68fb      	ldr	r3, [r7, #12]
   132b0:	0c1b      	lsrs	r3, r3, #16
   132b2:	68fa      	ldr	r2, [r7, #12]
   132b4:	4053      	eors	r3, r2
   132b6:	60fb      	str	r3, [r7, #12]

	// Rightmost bit of y holds the parity value
	// if (y&1) is 1 then parity is odd else even
	if (y & 1){
   132b8:	68fb      	ldr	r3, [r7, #12]
   132ba:	f003 0301 	and.w	r3, r3, #1
   132be:	2b00      	cmp	r3, #0
   132c0:	d001      	beq.n	132c6 <_ZN17ARINC_Conversions10FindParityEm+0x4a>
			return 1;
   132c2:	2301      	movs	r3, #1
   132c4:	e000      	b.n	132c8 <_ZN17ARINC_Conversions10FindParityEm+0x4c>
	}

	return 0;
   132c6:	2300      	movs	r3, #0
}
   132c8:	4618      	mov	r0, r3
   132ca:	3714      	adds	r7, #20
   132cc:	46bd      	mov	sp, r7
   132ce:	bc80      	pop	{r7}
   132d0:	4770      	bx	lr

000132d2 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   132d2:	b480      	push	{r7}
   132d4:	b085      	sub	sp, #20
   132d6:	af00      	add	r7, sp, #0
   132d8:	60f8      	str	r0, [r7, #12]
   132da:	460b      	mov	r3, r1
   132dc:	607a      	str	r2, [r7, #4]
   132de:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   132e0:	7afb      	ldrb	r3, [r7, #11]
   132e2:	68fa      	ldr	r2, [r7, #12]
   132e4:	01db      	lsls	r3, r3, #7
   132e6:	4413      	add	r3, r2
   132e8:	3318      	adds	r3, #24
   132ea:	687a      	ldr	r2, [r7, #4]
   132ec:	601a      	str	r2, [r3, #0]
}
   132ee:	bf00      	nop
   132f0:	3714      	adds	r7, #20
   132f2:	46bd      	mov	sp, r7
   132f4:	bc80      	pop	{r7}
   132f6:	4770      	bx	lr

000132f8 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   132f8:	b480      	push	{r7}
   132fa:	b085      	sub	sp, #20
   132fc:	af00      	add	r7, sp, #0
   132fe:	60f8      	str	r0, [r7, #12]
   13300:	460b      	mov	r3, r1
   13302:	607a      	str	r2, [r7, #4]
   13304:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   13306:	7afb      	ldrb	r3, [r7, #11]
   13308:	68fa      	ldr	r2, [r7, #12]
   1330a:	01db      	lsls	r3, r3, #7
   1330c:	4413      	add	r3, r2
   1330e:	3314      	adds	r3, #20
   13310:	687a      	ldr	r2, [r7, #4]
   13312:	601a      	str	r2, [r3, #0]
}
   13314:	bf00      	nop
   13316:	3714      	adds	r7, #20
   13318:	46bd      	mov	sp, r7
   1331a:	bc80      	pop	{r7}
   1331c:	4770      	bx	lr
	...

00013320 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   13320:	b580      	push	{r7, lr}
   13322:	b082      	sub	sp, #8
   13324:	af00      	add	r7, sp, #0
   13326:	4603      	mov	r3, r0
   13328:	6039      	str	r1, [r7, #0]
   1332a:	71fb      	strb	r3, [r7, #7]
   1332c:	4613      	mov	r3, r2
   1332e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   13330:	79bb      	ldrb	r3, [r7, #6]
   13332:	2b00      	cmp	r3, #0
   13334:	d006      	beq.n	13344 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   13336:	79fb      	ldrb	r3, [r7, #7]
   13338:	683a      	ldr	r2, [r7, #0]
   1333a:	4619      	mov	r1, r3
   1333c:	4806      	ldr	r0, [pc, #24]	; (13358 <_gpio_set_level+0x38>)
   1333e:	4b07      	ldr	r3, [pc, #28]	; (1335c <_gpio_set_level+0x3c>)
   13340:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   13342:	e005      	b.n	13350 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   13344:	79fb      	ldrb	r3, [r7, #7]
   13346:	683a      	ldr	r2, [r7, #0]
   13348:	4619      	mov	r1, r3
   1334a:	4803      	ldr	r0, [pc, #12]	; (13358 <_gpio_set_level+0x38>)
   1334c:	4b04      	ldr	r3, [pc, #16]	; (13360 <_gpio_set_level+0x40>)
   1334e:	4798      	blx	r3
}
   13350:	bf00      	nop
   13352:	3708      	adds	r7, #8
   13354:	46bd      	mov	sp, r7
   13356:	bd80      	pop	{r7, pc}
   13358:	41008000 	.word	0x41008000
   1335c:	000132d3 	.word	0x000132d3
   13360:	000132f9 	.word	0x000132f9

00013364 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   13364:	b580      	push	{r7, lr}
   13366:	b082      	sub	sp, #8
   13368:	af00      	add	r7, sp, #0
   1336a:	4603      	mov	r3, r0
   1336c:	460a      	mov	r2, r1
   1336e:	71fb      	strb	r3, [r7, #7]
   13370:	4613      	mov	r3, r2
   13372:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13374:	79fb      	ldrb	r3, [r7, #7]
   13376:	115b      	asrs	r3, r3, #5
   13378:	b2d8      	uxtb	r0, r3
   1337a:	79fb      	ldrb	r3, [r7, #7]
   1337c:	f003 031f 	and.w	r3, r3, #31
   13380:	2201      	movs	r2, #1
   13382:	fa02 f303 	lsl.w	r3, r2, r3
   13386:	79ba      	ldrb	r2, [r7, #6]
   13388:	4619      	mov	r1, r3
   1338a:	4b03      	ldr	r3, [pc, #12]	; (13398 <gpio_set_pin_level+0x34>)
   1338c:	4798      	blx	r3
}
   1338e:	bf00      	nop
   13390:	3708      	adds	r7, #8
   13392:	46bd      	mov	sp, r7
   13394:	bd80      	pop	{r7, pc}
   13396:	bf00      	nop
   13398:	00013321 	.word	0x00013321

0001339c <_ZL10blink_LED0PK10timer_task>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(const struct timer_task *const timer_task){
   1339c:	b480      	push	{r7}
   1339e:	b083      	sub	sp, #12
   133a0:	af00      	add	r7, sp, #0
   133a2:	6078      	str	r0, [r7, #4]
	//gpio_toggle_pin_level(LED0);
}
   133a4:	bf00      	nop
   133a6:	370c      	adds	r7, #12
   133a8:	46bd      	mov	sp, r7
   133aa:	bc80      	pop	{r7}
   133ac:	4770      	bx	lr
	...

000133b0 <_ZL9TxTimeoutPK10timer_task>:
static void TxTimeout(const struct timer_task *const timer_task){
   133b0:	b480      	push	{r7}
   133b2:	b083      	sub	sp, #12
   133b4:	af00      	add	r7, sp, #0
   133b6:	6078      	str	r0, [r7, #4]
	ptrARINCInterface->txTimeout=true;
   133b8:	4b04      	ldr	r3, [pc, #16]	; (133cc <_ZL9TxTimeoutPK10timer_task+0x1c>)
   133ba:	681b      	ldr	r3, [r3, #0]
   133bc:	2201      	movs	r2, #1
   133be:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
}
   133c2:	bf00      	nop
   133c4:	370c      	adds	r7, #12
   133c6:	46bd      	mov	sp, r7
   133c8:	bc80      	pop	{r7}
   133ca:	4770      	bx	lr
   133cc:	20008ec4 	.word	0x20008ec4

000133d0 <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
   133d0:	b480      	push	{r7}
   133d2:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
   133d4:	4b04      	ldr	r3, [pc, #16]	; (133e8 <_ZL12Receiver1Intv+0x18>)
   133d6:	681b      	ldr	r3, [r3, #0]
   133d8:	2201      	movs	r2, #1
   133da:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
   133de:	bf00      	nop
   133e0:	46bd      	mov	sp, r7
   133e2:	bc80      	pop	{r7}
   133e4:	4770      	bx	lr
   133e6:	bf00      	nop
   133e8:	20008ec4 	.word	0x20008ec4

000133ec <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
   133ec:	b580      	push	{r7, lr}
   133ee:	b082      	sub	sp, #8
   133f0:	af00      	add	r7, sp, #0
   133f2:	6078      	str	r0, [r7, #4]
   133f4:	6039      	str	r1, [r7, #0]
   133f6:	687a      	ldr	r2, [r7, #4]
   133f8:	683b      	ldr	r3, [r7, #0]
   133fa:	3304      	adds	r3, #4
   133fc:	4619      	mov	r1, r3
   133fe:	4610      	mov	r0, r2
   13400:	4b13      	ldr	r3, [pc, #76]	; (13450 <_ZN15ARINC_InterfaceC2Ev+0x64>)
   13402:	4798      	blx	r3
   13404:	683b      	ldr	r3, [r7, #0]
   13406:	681a      	ldr	r2, [r3, #0]
   13408:	687b      	ldr	r3, [r7, #4]
   1340a:	601a      	str	r2, [r3, #0]
   1340c:	687b      	ldr	r3, [r7, #4]
   1340e:	681b      	ldr	r3, [r3, #0]
   13410:	3b0c      	subs	r3, #12
   13412:	681b      	ldr	r3, [r3, #0]
   13414:	461a      	mov	r2, r3
   13416:	687b      	ldr	r3, [r7, #4]
   13418:	4413      	add	r3, r2
   1341a:	683a      	ldr	r2, [r7, #0]
   1341c:	6912      	ldr	r2, [r2, #16]
   1341e:	601a      	str	r2, [r3, #0]
   13420:	687b      	ldr	r3, [r7, #4]
   13422:	681b      	ldr	r3, [r3, #0]
   13424:	3b10      	subs	r3, #16
   13426:	681b      	ldr	r3, [r3, #0]
   13428:	461a      	mov	r2, r3
   1342a:	687b      	ldr	r3, [r7, #4]
   1342c:	4413      	add	r3, r2
   1342e:	683a      	ldr	r2, [r7, #0]
   13430:	6952      	ldr	r2, [r2, #20]
   13432:	601a      	str	r2, [r3, #0]
   13434:	687b      	ldr	r3, [r7, #4]
   13436:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   1343a:	4618      	mov	r0, r3
   1343c:	4b05      	ldr	r3, [pc, #20]	; (13454 <_ZN15ARINC_InterfaceC2Ev+0x68>)
   1343e:	4798      	blx	r3
{
	ptrARINCInterface=this;
   13440:	4a05      	ldr	r2, [pc, #20]	; (13458 <_ZN15ARINC_InterfaceC2Ev+0x6c>)
   13442:	687b      	ldr	r3, [r7, #4]
   13444:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
   13446:	687b      	ldr	r3, [r7, #4]
   13448:	4618      	mov	r0, r3
   1344a:	3708      	adds	r7, #8
   1344c:	46bd      	mov	sp, r7
   1344e:	bd80      	pop	{r7, pc}
   13450:	00012b49 	.word	0x00012b49
   13454:	00013ef1 	.word	0x00013ef1
   13458:	20008ec4 	.word	0x20008ec4

0001345c <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   1345c:	b580      	push	{r7, lr}
   1345e:	b082      	sub	sp, #8
   13460:	af00      	add	r7, sp, #0
   13462:	6078      	str	r0, [r7, #4]
   13464:	687b      	ldr	r3, [r7, #4]
   13466:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
   1346a:	4618      	mov	r0, r3
   1346c:	4b15      	ldr	r3, [pc, #84]	; (134c4 <_ZN15ARINC_InterfaceC1Ev+0x68>)
   1346e:	4798      	blx	r3
   13470:	687b      	ldr	r3, [r7, #4]
   13472:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   13476:	4a14      	ldr	r2, [pc, #80]	; (134c8 <_ZN15ARINC_InterfaceC1Ev+0x6c>)
   13478:	4611      	mov	r1, r2
   1347a:	4618      	mov	r0, r3
   1347c:	4b13      	ldr	r3, [pc, #76]	; (134cc <_ZN15ARINC_InterfaceC1Ev+0x70>)
   1347e:	4798      	blx	r3
   13480:	687b      	ldr	r3, [r7, #4]
   13482:	4a13      	ldr	r2, [pc, #76]	; (134d0 <_ZN15ARINC_InterfaceC1Ev+0x74>)
   13484:	4611      	mov	r1, r2
   13486:	4618      	mov	r0, r3
   13488:	4b12      	ldr	r3, [pc, #72]	; (134d4 <_ZN15ARINC_InterfaceC1Ev+0x78>)
   1348a:	4798      	blx	r3
   1348c:	4a12      	ldr	r2, [pc, #72]	; (134d8 <_ZN15ARINC_InterfaceC1Ev+0x7c>)
   1348e:	687b      	ldr	r3, [r7, #4]
   13490:	601a      	str	r2, [r3, #0]
   13492:	687b      	ldr	r3, [r7, #4]
   13494:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
   13498:	4a10      	ldr	r2, [pc, #64]	; (134dc <_ZN15ARINC_InterfaceC1Ev+0x80>)
   1349a:	601a      	str	r2, [r3, #0]
   1349c:	687b      	ldr	r3, [r7, #4]
   1349e:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   134a2:	4a0f      	ldr	r2, [pc, #60]	; (134e0 <_ZN15ARINC_InterfaceC1Ev+0x84>)
   134a4:	601a      	str	r2, [r3, #0]
   134a6:	687b      	ldr	r3, [r7, #4]
   134a8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   134ac:	4618      	mov	r0, r3
   134ae:	4b0d      	ldr	r3, [pc, #52]	; (134e4 <_ZN15ARINC_InterfaceC1Ev+0x88>)
   134b0:	4798      	blx	r3
	ptrARINCInterface=this;
   134b2:	4a0d      	ldr	r2, [pc, #52]	; (134e8 <_ZN15ARINC_InterfaceC1Ev+0x8c>)
   134b4:	687b      	ldr	r3, [r7, #4]
   134b6:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
   134b8:	687b      	ldr	r3, [r7, #4]
   134ba:	4618      	mov	r0, r3
   134bc:	3708      	adds	r7, #8
   134be:	46bd      	mov	sp, r7
   134c0:	bd80      	pop	{r7, pc}
   134c2:	bf00      	nop
   134c4:	00012f3d 	.word	0x00012f3d
   134c8:	000218cc 	.word	0x000218cc
   134cc:	00000d6d 	.word	0x00000d6d
   134d0:	000218b8 	.word	0x000218b8
   134d4:	00012b49 	.word	0x00012b49
   134d8:	00021870 	.word	0x00021870
   134dc:	0002188c 	.word	0x0002188c
   134e0:	000218a8 	.word	0x000218a8
   134e4:	00013ef1 	.word	0x00013ef1
   134e8:	20008ec4 	.word	0x20008ec4

000134ec <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
   134ec:	b580      	push	{r7, lr}
   134ee:	b082      	sub	sp, #8
   134f0:	af00      	add	r7, sp, #0
   134f2:	6078      	str	r0, [r7, #4]
   134f4:	6039      	str	r1, [r7, #0]
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	681a      	ldr	r2, [r3, #0]
   134fa:	687b      	ldr	r3, [r7, #4]
   134fc:	601a      	str	r2, [r3, #0]
   134fe:	687b      	ldr	r3, [r7, #4]
   13500:	681b      	ldr	r3, [r3, #0]
   13502:	3b0c      	subs	r3, #12
   13504:	681b      	ldr	r3, [r3, #0]
   13506:	461a      	mov	r2, r3
   13508:	687b      	ldr	r3, [r7, #4]
   1350a:	4413      	add	r3, r2
   1350c:	683a      	ldr	r2, [r7, #0]
   1350e:	6912      	ldr	r2, [r2, #16]
   13510:	601a      	str	r2, [r3, #0]
   13512:	687b      	ldr	r3, [r7, #4]
   13514:	681b      	ldr	r3, [r3, #0]
   13516:	3b10      	subs	r3, #16
   13518:	681b      	ldr	r3, [r3, #0]
   1351a:	461a      	mov	r2, r3
   1351c:	687b      	ldr	r3, [r7, #4]
   1351e:	4413      	add	r3, r2
   13520:	683a      	ldr	r2, [r7, #0]
   13522:	6952      	ldr	r2, [r2, #20]
   13524:	601a      	str	r2, [r3, #0]
   13526:	687b      	ldr	r3, [r7, #4]
   13528:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   1352c:	4618      	mov	r0, r3
   1352e:	4b07      	ldr	r3, [pc, #28]	; (1354c <_ZN15ARINC_InterfaceD2Ev+0x60>)
   13530:	4798      	blx	r3
   13532:	687a      	ldr	r2, [r7, #4]
   13534:	683b      	ldr	r3, [r7, #0]
   13536:	3304      	adds	r3, #4
   13538:	4619      	mov	r1, r3
   1353a:	4610      	mov	r0, r2
   1353c:	4b04      	ldr	r3, [pc, #16]	; (13550 <_ZN15ARINC_InterfaceD2Ev+0x64>)
   1353e:	4798      	blx	r3
{
} //~ARINC_Interface
   13540:	687b      	ldr	r3, [r7, #4]
   13542:	4618      	mov	r0, r3
   13544:	3708      	adds	r7, #8
   13546:	46bd      	mov	sp, r7
   13548:	bd80      	pop	{r7, pc}
   1354a:	bf00      	nop
   1354c:	00013f11 	.word	0x00013f11
   13550:	00012b8f 	.word	0x00012b8f

00013554 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
   13554:	b580      	push	{r7, lr}
   13556:	b082      	sub	sp, #8
   13558:	af00      	add	r7, sp, #0
   1355a:	6078      	str	r0, [r7, #4]
   1355c:	4a15      	ldr	r2, [pc, #84]	; (135b4 <_ZN15ARINC_InterfaceD1Ev+0x60>)
   1355e:	687b      	ldr	r3, [r7, #4]
   13560:	601a      	str	r2, [r3, #0]
   13562:	687b      	ldr	r3, [r7, #4]
   13564:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
   13568:	4a13      	ldr	r2, [pc, #76]	; (135b8 <_ZN15ARINC_InterfaceD1Ev+0x64>)
   1356a:	601a      	str	r2, [r3, #0]
   1356c:	687b      	ldr	r3, [r7, #4]
   1356e:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   13572:	4a12      	ldr	r2, [pc, #72]	; (135bc <_ZN15ARINC_InterfaceD1Ev+0x68>)
   13574:	601a      	str	r2, [r3, #0]
   13576:	687b      	ldr	r3, [r7, #4]
   13578:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   1357c:	4618      	mov	r0, r3
   1357e:	4b10      	ldr	r3, [pc, #64]	; (135c0 <_ZN15ARINC_InterfaceD1Ev+0x6c>)
   13580:	4798      	blx	r3
   13582:	687b      	ldr	r3, [r7, #4]
   13584:	4a0f      	ldr	r2, [pc, #60]	; (135c4 <_ZN15ARINC_InterfaceD1Ev+0x70>)
   13586:	4611      	mov	r1, r2
   13588:	4618      	mov	r0, r3
   1358a:	4b0f      	ldr	r3, [pc, #60]	; (135c8 <_ZN15ARINC_InterfaceD1Ev+0x74>)
   1358c:	4798      	blx	r3
   1358e:	687b      	ldr	r3, [r7, #4]
   13590:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   13594:	4a0d      	ldr	r2, [pc, #52]	; (135cc <_ZN15ARINC_InterfaceD1Ev+0x78>)
   13596:	4611      	mov	r1, r2
   13598:	4618      	mov	r0, r3
   1359a:	4b0d      	ldr	r3, [pc, #52]	; (135d0 <_ZN15ARINC_InterfaceD1Ev+0x7c>)
   1359c:	4798      	blx	r3
   1359e:	687b      	ldr	r3, [r7, #4]
   135a0:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
   135a4:	4618      	mov	r0, r3
   135a6:	4b0b      	ldr	r3, [pc, #44]	; (135d4 <_ZN15ARINC_InterfaceD1Ev+0x80>)
   135a8:	4798      	blx	r3
} //~ARINC_Interface
   135aa:	687b      	ldr	r3, [r7, #4]
   135ac:	4618      	mov	r0, r3
   135ae:	3708      	adds	r7, #8
   135b0:	46bd      	mov	sp, r7
   135b2:	bd80      	pop	{r7, pc}
   135b4:	00021870 	.word	0x00021870
   135b8:	0002188c 	.word	0x0002188c
   135bc:	000218a8 	.word	0x000218a8
   135c0:	00013f11 	.word	0x00013f11
   135c4:	000218b8 	.word	0x000218b8
   135c8:	00012b8f 	.word	0x00012b8f
   135cc:	000218cc 	.word	0x000218cc
   135d0:	000145f9 	.word	0x000145f9
   135d4:	00012f5d 	.word	0x00012f5d

000135d8 <_ZTv0_n16_N15ARINC_InterfaceD1Ev>:
   135d8:	b580      	push	{r7, lr}
   135da:	b082      	sub	sp, #8
   135dc:	af00      	add	r7, sp, #0
   135de:	6078      	str	r0, [r7, #4]
   135e0:	687b      	ldr	r3, [r7, #4]
   135e2:	681b      	ldr	r3, [r3, #0]
   135e4:	3b10      	subs	r3, #16
   135e6:	681b      	ldr	r3, [r3, #0]
   135e8:	461a      	mov	r2, r3
   135ea:	687b      	ldr	r3, [r7, #4]
   135ec:	4413      	add	r3, r2
   135ee:	4618      	mov	r0, r3
   135f0:	4b03      	ldr	r3, [pc, #12]	; (13600 <_ZTv0_n16_N15ARINC_InterfaceD1Ev+0x28>)
   135f2:	4798      	blx	r3
   135f4:	4603      	mov	r3, r0
   135f6:	4618      	mov	r0, r3
   135f8:	3708      	adds	r7, #8
   135fa:	46bd      	mov	sp, r7
   135fc:	bd80      	pop	{r7, pc}
   135fe:	bf00      	nop
   13600:	00013555 	.word	0x00013555

00013604 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   13604:	b580      	push	{r7, lr}
   13606:	b082      	sub	sp, #8
   13608:	af00      	add	r7, sp, #0
   1360a:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
   1360c:	6878      	ldr	r0, [r7, #4]
   1360e:	4b06      	ldr	r3, [pc, #24]	; (13628 <_ZN15ARINC_InterfaceD0Ev+0x24>)
   13610:	4798      	blx	r3
   13612:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   13616:	6878      	ldr	r0, [r7, #4]
   13618:	4b04      	ldr	r3, [pc, #16]	; (1362c <_ZN15ARINC_InterfaceD0Ev+0x28>)
   1361a:	4798      	blx	r3
   1361c:	687b      	ldr	r3, [r7, #4]
   1361e:	4618      	mov	r0, r3
   13620:	3708      	adds	r7, #8
   13622:	46bd      	mov	sp, r7
   13624:	bd80      	pop	{r7, pc}
   13626:	bf00      	nop
   13628:	00013555 	.word	0x00013555
   1362c:	00019d4d 	.word	0x00019d4d

00013630 <_ZTv0_n16_N15ARINC_InterfaceD0Ev>:
   13630:	b580      	push	{r7, lr}
   13632:	b082      	sub	sp, #8
   13634:	af00      	add	r7, sp, #0
   13636:	6078      	str	r0, [r7, #4]
   13638:	687b      	ldr	r3, [r7, #4]
   1363a:	681b      	ldr	r3, [r3, #0]
   1363c:	3b10      	subs	r3, #16
   1363e:	681b      	ldr	r3, [r3, #0]
   13640:	461a      	mov	r2, r3
   13642:	687b      	ldr	r3, [r7, #4]
   13644:	4413      	add	r3, r2
   13646:	4618      	mov	r0, r3
   13648:	4b03      	ldr	r3, [pc, #12]	; (13658 <_ZTv0_n16_N15ARINC_InterfaceD0Ev+0x28>)
   1364a:	4798      	blx	r3
   1364c:	4603      	mov	r3, r0
   1364e:	4618      	mov	r0, r3
   13650:	3708      	adds	r7, #8
   13652:	46bd      	mov	sp, r7
   13654:	bd80      	pop	{r7, pc}
   13656:	bf00      	nop
   13658:	00013605 	.word	0x00013605

0001365c <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
   1365c:	b580      	push	{r7, lr}
   1365e:	b082      	sub	sp, #8
   13660:	af00      	add	r7, sp, #0
   13662:	6078      	str	r0, [r7, #4]
	MessageCount=0; MessageCount1=0; MessageCount2=0;
   13664:	687b      	ldr	r3, [r7, #4]
   13666:	2200      	movs	r2, #0
   13668:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
   1366c:	687b      	ldr	r3, [r7, #4]
   1366e:	2200      	movs	r2, #0
   13670:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
   13674:	687b      	ldr	r3, [r7, #4]
   13676:	2200      	movs	r2, #0
   13678:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	BITRATE0=false;
   1367c:	687b      	ldr	r3, [r7, #4]
   1367e:	2200      	movs	r2, #0
   13680:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	BITRATE1=false;
   13684:	687b      	ldr	r3, [r7, #4]
   13686:	2200      	movs	r2, #0
   13688:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	BITRATE2=false;
   1368c:	687b      	ldr	r3, [r7, #4]
   1368e:	2200      	movs	r2, #0
   13690:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a

	PARITY=false;
   13694:	687b      	ldr	r3, [r7, #4]
   13696:	2200      	movs	r2, #0
   13698:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	HW_RESET();
   1369c:	6878      	ldr	r0, [r7, #4]
   1369e:	4b3d      	ldr	r3, [pc, #244]	; (13794 <_ZN15ARINC_Interface4InitEv+0x138>)
   136a0:	4798      	blx	r3
	InitBuffer();
   136a2:	687b      	ldr	r3, [r7, #4]
   136a4:	4618      	mov	r0, r3
   136a6:	4b3c      	ldr	r3, [pc, #240]	; (13798 <_ZN15ARINC_Interface4InitEv+0x13c>)
   136a8:	4798      	blx	r3
	statusHolt=HI3593.Init();
   136aa:	687b      	ldr	r3, [r7, #4]
   136ac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   136b0:	4618      	mov	r0, r3
   136b2:	4b3a      	ldr	r3, [pc, #232]	; (1379c <_ZN15ARINC_Interface4InitEv+0x140>)
   136b4:	4798      	blx	r3
   136b6:	4603      	mov	r3, r0
   136b8:	461a      	mov	r2, r3
   136ba:	687b      	ldr	r3, [r7, #4]
   136bc:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
	if (statusHolt!=TSR_Default){
   136c0:	687b      	ldr	r3, [r7, #4]
   136c2:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
   136c6:	2b01      	cmp	r3, #1
   136c8:	d008      	beq.n	136dc <_ZN15ARINC_Interface4InitEv+0x80>
		usb.println("\n\rHI-3593 failed to Initilize\n\r");
   136ca:	4935      	ldr	r1, [pc, #212]	; (137a0 <_ZN15ARINC_Interface4InitEv+0x144>)
   136cc:	4835      	ldr	r0, [pc, #212]	; (137a4 <_ZN15ARINC_Interface4InitEv+0x148>)
   136ce:	4b36      	ldr	r3, [pc, #216]	; (137a8 <_ZN15ARINC_Interface4InitEv+0x14c>)
   136d0:	4798      	blx	r3
		isOK=false;
   136d2:	687b      	ldr	r3, [r7, #4]
   136d4:	2200      	movs	r2, #0
   136d6:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
   136da:	e03d      	b.n	13758 <_ZN15ARINC_Interface4InitEv+0xfc>
	}else{
		isOK=true;
   136dc:	687b      	ldr	r3, [r7, #4]
   136de:	2201      	movs	r2, #1
   136e0:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
		newMessageR1=false;
   136e4:	687b      	ldr	r3, [r7, #4]
   136e6:	2200      	movs	r2, #0
   136e8:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		newMessageR2=false;
   136ec:	687b      	ldr	r3, [r7, #4]
   136ee:	2200      	movs	r2, #0
   136f0:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
		BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   136f4:	687b      	ldr	r3, [r7, #4]
   136f6:	2200      	movs	r2, #0
   136f8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		MessageCount=0;
   136fc:	687b      	ldr	r3, [r7, #4]
   136fe:	2200      	movs	r2, #0
   13700:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
		octalLabel = 0x1D;         // Write ARINC Label
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	221d      	movs	r2, #29
   13708:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		Arate=0;
   1370c:	687b      	ldr	r3, [r7, #4]
   1370e:	2200      	movs	r2, #0
   13710:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		
		(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   13714:	687b      	ldr	r3, [r7, #4]
   13716:	f203 1327 	addw	r3, r3, #295	; 0x127
   1371a:	2210      	movs	r2, #16
   1371c:	2100      	movs	r1, #0
   1371e:	4618      	mov	r0, r3
   13720:	4b22      	ldr	r3, [pc, #136]	; (137ac <_ZN15ARINC_Interface4InitEv+0x150>)
   13722:	4798      	blx	r3
			
		// Setup the Labels
		HI3593.InitReceiver1Labels();     // initial Rec1 labels
   13724:	687b      	ldr	r3, [r7, #4]
   13726:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   1372a:	4618      	mov	r0, r3
   1372c:	4b20      	ldr	r3, [pc, #128]	; (137b0 <_ZN15ARINC_Interface4InitEv+0x154>)
   1372e:	4798      	blx	r3
		HI3593.initReceiver2Labels();     // initial Rec2 labels
   13730:	687b      	ldr	r3, [r7, #4]
   13732:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   13736:	4618      	mov	r0, r3
   13738:	4b1e      	ldr	r3, [pc, #120]	; (137b4 <_ZN15ARINC_Interface4InitEv+0x158>)
   1373a:	4798      	blx	r3
		HI3593.InitPriorityLabels();
   1373c:	687b      	ldr	r3, [r7, #4]
   1373e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   13742:	4618      	mov	r0, r3
   13744:	4b1c      	ldr	r3, [pc, #112]	; (137b8 <_ZN15ARINC_Interface4InitEv+0x15c>)
   13746:	4798      	blx	r3
		//HI3593.MultiByteRead(REC1MEMORY, 32, LabelsArrayRX1); // read in all Rec-1 labels into the passed array
		//HI3593.MultiByteRead(REC2MEMORY, 32, LabelsArrayRX2); // read in all Rec-2 labels into the passed array

		Rec1Parity =0;
   13748:	687b      	ldr	r3, [r7, #4]
   1374a:	2200      	movs	r2, #0
   1374c:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
		Rec2Parity =0;
   13750:	687b      	ldr	r3, [r7, #4]
   13752:	2200      	movs	r2, #0
   13754:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b

		//HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
		//HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
	}
	
	arincTimer.Init();
   13758:	4818      	ldr	r0, [pc, #96]	; (137bc <_ZN15ARINC_Interface4InitEv+0x160>)
   1375a:	4b19      	ldr	r3, [pc, #100]	; (137c0 <_ZN15ARINC_Interface4InitEv+0x164>)
   1375c:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(blink_LED0),1000);
   1375e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13762:	4918      	ldr	r1, [pc, #96]	; (137c4 <_ZN15ARINC_Interface4InitEv+0x168>)
   13764:	4815      	ldr	r0, [pc, #84]	; (137bc <_ZN15ARINC_Interface4InitEv+0x160>)
   13766:	4b18      	ldr	r3, [pc, #96]	; (137c8 <_ZN15ARINC_Interface4InitEv+0x16c>)
   13768:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(TxTimeout),500);
   1376a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1376e:	4917      	ldr	r1, [pc, #92]	; (137cc <_ZN15ARINC_Interface4InitEv+0x170>)
   13770:	4812      	ldr	r0, [pc, #72]	; (137bc <_ZN15ARINC_Interface4InitEv+0x160>)
   13772:	4b15      	ldr	r3, [pc, #84]	; (137c8 <_ZN15ARINC_Interface4InitEv+0x16c>)
   13774:	4798      	blx	r3
	ext_irq_register(ARINCR1Int, Receiver1Int);
   13776:	4916      	ldr	r1, [pc, #88]	; (137d0 <_ZN15ARINC_Interface4InitEv+0x174>)
   13778:	2057      	movs	r0, #87	; 0x57
   1377a:	4b16      	ldr	r3, [pc, #88]	; (137d4 <_ZN15ARINC_Interface4InitEv+0x178>)
   1377c:	4798      	blx	r3
	arincTimer.start();
   1377e:	480f      	ldr	r0, [pc, #60]	; (137bc <_ZN15ARINC_Interface4InitEv+0x160>)
   13780:	4b15      	ldr	r3, [pc, #84]	; (137d8 <_ZN15ARINC_Interface4InitEv+0x17c>)
   13782:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
   13784:	687b      	ldr	r3, [r7, #4]
   13786:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
}
   1378a:	4618      	mov	r0, r3
   1378c:	3708      	adds	r7, #8
   1378e:	46bd      	mov	sp, r7
   13790:	bd80      	pop	{r7, pc}
   13792:	bf00      	nop
   13794:	00013db1 	.word	0x00013db1
   13798:	00012bd5 	.word	0x00012bd5
   1379c:	00013f31 	.word	0x00013f31
   137a0:	00020e48 	.word	0x00020e48
   137a4:	2000a368 	.word	0x2000a368
   137a8:	0001856d 	.word	0x0001856d
   137ac:	0001c5d9 	.word	0x0001c5d9
   137b0:	00014141 	.word	0x00014141
   137b4:	000142cd 	.word	0x000142cd
   137b8:	000141ad 	.word	0x000141ad
   137bc:	2000a348 	.word	0x2000a348
   137c0:	00017a7d 	.word	0x00017a7d
   137c4:	0001339d 	.word	0x0001339d
   137c8:	00017b8d 	.word	0x00017b8d
   137cc:	000133b1 	.word	0x000133b1
   137d0:	000133d1 	.word	0x000133d1
   137d4:	000067f5 	.word	0x000067f5
   137d8:	00017acd 	.word	0x00017acd

000137dc <_ZN15ARINC_Interface12ReadRXBufferEh>:
	else
	{
		return false;
	}
}
uint32_t ARINC_Interface::ReadRXBuffer(uint8_t n){
   137dc:	b580      	push	{r7, lr}
   137de:	b0c4      	sub	sp, #272	; 0x110
   137e0:	af00      	add	r7, sp, #0
   137e2:	1d3b      	adds	r3, r7, #4
   137e4:	6018      	str	r0, [r3, #0]
   137e6:	460a      	mov	r2, r1
   137e8:	1cfb      	adds	r3, r7, #3
   137ea:	701a      	strb	r2, [r3, #0]
	
	usb.println("r\n---!got message!----");
   137ec:	4949      	ldr	r1, [pc, #292]	; (13914 <_ZN15ARINC_Interface12ReadRXBufferEh+0x138>)
   137ee:	484a      	ldr	r0, [pc, #296]	; (13918 <_ZN15ARINC_Interface12ReadRXBufferEh+0x13c>)
   137f0:	4b4a      	ldr	r3, [pc, #296]	; (1391c <_ZN15ARINC_Interface12ReadRXBufferEh+0x140>)
   137f2:	4798      	blx	r3
	uint8_t receiver[2*RX_LABELS_NUMBER][4];
	uint8_t	messagesCounter=0;
   137f4:	2300      	movs	r3, #0
   137f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	cpu_irq_disable();
   137fa:	1d3b      	adds	r3, r7, #4
   137fc:	6818      	ldr	r0, [r3, #0]
   137fe:	4b48      	ldr	r3, [pc, #288]	; (13920 <_ZN15ARINC_Interface12ReadRXBufferEh+0x144>)
   13800:	4798      	blx	r3
	                     // Poll Receiver1 status register
	
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
   13802:	2300      	movs	r3, #0
   13804:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
   13808:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
   1380c:	2b3f      	cmp	r3, #63	; 0x3f
   1380e:	dc46      	bgt.n	1389e <_ZN15ARINC_Interface12ReadRXBufferEh+0xc2>
	{
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   13810:	1d3b      	adds	r3, r7, #4
   13812:	681b      	ldr	r3, [r3, #0]
   13814:	f503 72c8 	add.w	r2, r3, #400	; 0x190
   13818:	1cfb      	adds	r3, r7, #3
   1381a:	781b      	ldrb	r3, [r3, #0]
   1381c:	3b01      	subs	r3, #1
   1381e:	b2db      	uxtb	r3, r3
   13820:	015b      	lsls	r3, r3, #5
   13822:	b2db      	uxtb	r3, r3
   13824:	3b70      	subs	r3, #112	; 0x70
   13826:	b2db      	uxtb	r3, r3
   13828:	4619      	mov	r1, r3
   1382a:	4610      	mov	r0, r2
   1382c:	4b3d      	ldr	r3, [pc, #244]	; (13924 <_ZN15ARINC_Interface12ReadRXBufferEh+0x148>)
   1382e:	4798      	blx	r3
   13830:	4603      	mov	r3, r0
   13832:	461a      	mov	r2, r3
   13834:	1d3b      	adds	r3, r7, #4
   13836:	681b      	ldr	r3, [r3, #0]
   13838:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
		if(((statusRegister & FFEMPTY) == 0))
   1383c:	1d3b      	adds	r3, r7, #4
   1383e:	681b      	ldr	r3, [r3, #0]
   13840:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   13844:	f003 0301 	and.w	r3, r3, #1
   13848:	2b00      	cmp	r3, #0
   1384a:	d127      	bne.n	1389c <_ZN15ARINC_Interface12ReadRXBufferEh+0xc0>
		{
				
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   1384c:	1d3b      	adds	r3, r7, #4
   1384e:	681b      	ldr	r3, [r3, #0]
   13850:	f503 70c8 	add.w	r0, r3, #400	; 0x190
   13854:	1cfb      	adds	r3, r7, #3
   13856:	781b      	ldrb	r3, [r3, #0]
   13858:	3304      	adds	r3, #4
   1385a:	b2db      	uxtb	r3, r3
   1385c:	015b      	lsls	r3, r3, #5
   1385e:	b2d9      	uxtb	r1, r3
   13860:	1d3b      	adds	r3, r7, #4
   13862:	681b      	ldr	r3, [r3, #0]
   13864:	f503 73b2 	add.w	r3, r3, #356	; 0x164
   13868:	461a      	mov	r2, r3
   1386a:	4b2f      	ldr	r3, [pc, #188]	; (13928 <_ZN15ARINC_Interface12ReadRXBufferEh+0x14c>)
   1386c:	4798      	blx	r3
				
			memcpy(receiver[messagesCounter],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
   1386e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   13872:	f107 020c 	add.w	r2, r7, #12
   13876:	009b      	lsls	r3, r3, #2
   13878:	4413      	add	r3, r2
   1387a:	1d3a      	adds	r2, r7, #4
   1387c:	6812      	ldr	r2, [r2, #0]
   1387e:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   13882:	6812      	ldr	r2, [r2, #0]
   13884:	601a      	str	r2, [r3, #0]
				
			//		printARINCData(REC1_HEADER,RXBuffer);
		//	CheckMessageCountMax();
			messagesCounter++;
   13886:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   1388a:	3301      	adds	r3, #1
   1388c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
   13890:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
   13894:	3301      	adds	r3, #1
   13896:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
   1389a:	e7b5      	b.n	13808 <_ZN15ARINC_Interface12ReadRXBufferEh+0x2c>
				
		}else{
			break;
   1389c:	bf00      	nop
		}
	}

	cpu_irq_enable();
   1389e:	1d3b      	adds	r3, r7, #4
   138a0:	6818      	ldr	r0, [r3, #0]
   138a2:	4b22      	ldr	r3, [pc, #136]	; (1392c <_ZN15ARINC_Interface12ReadRXBufferEh+0x150>)
   138a4:	4798      	blx	r3

		if ((n==1))
   138a6:	1cfb      	adds	r3, r7, #3
   138a8:	781b      	ldrb	r3, [r3, #0]
   138aa:	2b01      	cmp	r3, #1
   138ac:	d105      	bne.n	138ba <_ZN15ARINC_Interface12ReadRXBufferEh+0xde>
		{
			newMessageR1=false;
   138ae:	1d3b      	adds	r3, r7, #4
   138b0:	681b      	ldr	r3, [r3, #0]
   138b2:	2200      	movs	r2, #0
   138b4:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
   138b8:	e008      	b.n	138cc <_ZN15ARINC_Interface12ReadRXBufferEh+0xf0>
		}
		else if (n==2)
   138ba:	1cfb      	adds	r3, r7, #3
   138bc:	781b      	ldrb	r3, [r3, #0]
   138be:	2b02      	cmp	r3, #2
   138c0:	d104      	bne.n	138cc <_ZN15ARINC_Interface12ReadRXBufferEh+0xf0>
		{
			newMessageR2=false;
   138c2:	1d3b      	adds	r3, r7, #4
   138c4:	681b      	ldr	r3, [r3, #0]
   138c6:	2200      	movs	r2, #0
   138c8:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
		}
	for (uint8_t i = 0; i < messagesCounter; i++)
   138cc:	2300      	movs	r3, #0
   138ce:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
   138d2:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
   138d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   138da:	429a      	cmp	r2, r3
   138dc:	da10      	bge.n	13900 <_ZN15ARINC_Interface12ReadRXBufferEh+0x124>
	{
		SortReceivedData(receiver[i]);
   138de:	1d3b      	adds	r3, r7, #4
   138e0:	6818      	ldr	r0, [r3, #0]
   138e2:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
   138e6:	f107 020c 	add.w	r2, r7, #12
   138ea:	009b      	lsls	r3, r3, #2
   138ec:	4413      	add	r3, r2
   138ee:	4619      	mov	r1, r3
   138f0:	4b0f      	ldr	r3, [pc, #60]	; (13930 <_ZN15ARINC_Interface12ReadRXBufferEh+0x154>)
   138f2:	4798      	blx	r3
	for (uint8_t i = 0; i < messagesCounter; i++)
   138f4:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
   138f8:	3301      	adds	r3, #1
   138fa:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
   138fe:	e7e8      	b.n	138d2 <_ZN15ARINC_Interface12ReadRXBufferEh+0xf6>
	}
	
	return statusRegister;	
   13900:	1d3b      	adds	r3, r7, #4
   13902:	681b      	ldr	r3, [r3, #0]
   13904:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
}
   13908:	4618      	mov	r0, r3
   1390a:	f507 7788 	add.w	r7, r7, #272	; 0x110
   1390e:	46bd      	mov	sp, r7
   13910:	bd80      	pop	{r7, pc}
   13912:	bf00      	nop
   13914:	00020e8c 	.word	0x00020e8c
   13918:	2000a368 	.word	0x2000a368
   1391c:	0001856d 	.word	0x0001856d
   13920:	00013ced 	.word	0x00013ced
   13924:	00014579 	.word	0x00014579
   13928:	00014339 	.word	0x00014339
   1392c:	00013cd5 	.word	0x00013cd5
   13930:	00012ee1 	.word	0x00012ee1

00013934 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   13934:	b580      	push	{r7, lr}
   13936:	b084      	sub	sp, #16
   13938:	af00      	add	r7, sp, #0
   1393a:	6078      	str	r0, [r7, #4]
   1393c:	460b      	mov	r3, r1
   1393e:	70fb      	strb	r3, [r7, #3]
	uint32_t data;

	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   13940:	2300      	movs	r3, #0
   13942:	73fb      	strb	r3, [r7, #15]
   13944:	7bfb      	ldrb	r3, [r7, #15]
   13946:	2b1f      	cmp	r3, #31
   13948:	dc21      	bgt.n	1398e <_ZN15ARINC_Interface15ReadBufferLabelEh+0x5a>
		if (receiverBuffer[i][3]==label)
   1394a:	687b      	ldr	r3, [r7, #4]
   1394c:	691a      	ldr	r2, [r3, #16]
   1394e:	7bfb      	ldrb	r3, [r7, #15]
   13950:	009b      	lsls	r3, r3, #2
   13952:	4413      	add	r3, r2
   13954:	681b      	ldr	r3, [r3, #0]
   13956:	3303      	adds	r3, #3
   13958:	781b      	ldrb	r3, [r3, #0]
   1395a:	78fa      	ldrb	r2, [r7, #3]
   1395c:	429a      	cmp	r2, r3
   1395e:	d112      	bne.n	13986 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x52>
		{
			data=FourBytesArray2Uint32(receiverBuffer[i]);
   13960:	687b      	ldr	r3, [r7, #4]
   13962:	681b      	ldr	r3, [r3, #0]
   13964:	3b0c      	subs	r3, #12
   13966:	681b      	ldr	r3, [r3, #0]
   13968:	461a      	mov	r2, r3
   1396a:	687b      	ldr	r3, [r7, #4]
   1396c:	1898      	adds	r0, r3, r2
   1396e:	687b      	ldr	r3, [r7, #4]
   13970:	691a      	ldr	r2, [r3, #16]
   13972:	7bfb      	ldrb	r3, [r7, #15]
   13974:	009b      	lsls	r3, r3, #2
   13976:	4413      	add	r3, r2
   13978:	681b      	ldr	r3, [r3, #0]
   1397a:	4619      	mov	r1, r3
   1397c:	4b06      	ldr	r3, [pc, #24]	; (13998 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x64>)
   1397e:	4798      	blx	r3
   13980:	60b8      	str	r0, [r7, #8]
			return data;
   13982:	68bb      	ldr	r3, [r7, #8]
   13984:	e004      	b.n	13990 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x5c>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   13986:	7bfb      	ldrb	r3, [r7, #15]
   13988:	3301      	adds	r3, #1
   1398a:	73fb      	strb	r3, [r7, #15]
   1398c:	e7da      	b.n	13944 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
   1398e:	2300      	movs	r3, #0
}
   13990:	4618      	mov	r0, r3
   13992:	3710      	adds	r7, #16
   13994:	46bd      	mov	sp, r7
   13996:	bd80      	pop	{r7, pc}
   13998:	00013175 	.word	0x00013175

0001399c <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh>:
   1399c:	b580      	push	{r7, lr}
   1399e:	b082      	sub	sp, #8
   139a0:	af00      	add	r7, sp, #0
   139a2:	6078      	str	r0, [r7, #4]
   139a4:	460b      	mov	r3, r1
   139a6:	70fb      	strb	r3, [r7, #3]
   139a8:	687b      	ldr	r3, [r7, #4]
   139aa:	681b      	ldr	r3, [r3, #0]
   139ac:	3b14      	subs	r3, #20
   139ae:	681b      	ldr	r3, [r3, #0]
   139b0:	461a      	mov	r2, r3
   139b2:	687b      	ldr	r3, [r7, #4]
   139b4:	4413      	add	r3, r2
   139b6:	78fa      	ldrb	r2, [r7, #3]
   139b8:	4611      	mov	r1, r2
   139ba:	4618      	mov	r0, r3
   139bc:	4b03      	ldr	r3, [pc, #12]	; (139cc <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh+0x30>)
   139be:	4798      	blx	r3
   139c0:	4603      	mov	r3, r0
   139c2:	4618      	mov	r0, r3
   139c4:	3708      	adds	r7, #8
   139c6:	46bd      	mov	sp, r7
   139c8:	bd80      	pop	{r7, pc}
   139ca:	bf00      	nop
   139cc:	00013935 	.word	0x00013935

000139d0 <_ZN15ARINC_Interface15ReadBufferLabelEm>:
uint32_t ARINC_Interface::ReadBufferLabel(uint32_t label){
   139d0:	b580      	push	{r7, lr}
   139d2:	b084      	sub	sp, #16
   139d4:	af00      	add	r7, sp, #0
   139d6:	6078      	str	r0, [r7, #4]
   139d8:	6039      	str	r1, [r7, #0]
	uint8_t	l=Label2Byte((uint32_t)label);
   139da:	687b      	ldr	r3, [r7, #4]
   139dc:	681b      	ldr	r3, [r3, #0]
   139de:	3b0c      	subs	r3, #12
   139e0:	681b      	ldr	r3, [r3, #0]
   139e2:	461a      	mov	r2, r3
   139e4:	687b      	ldr	r3, [r7, #4]
   139e6:	4413      	add	r3, r2
   139e8:	681b      	ldr	r3, [r3, #0]
   139ea:	3304      	adds	r3, #4
   139ec:	681b      	ldr	r3, [r3, #0]
   139ee:	687a      	ldr	r2, [r7, #4]
   139f0:	6812      	ldr	r2, [r2, #0]
   139f2:	3a0c      	subs	r2, #12
   139f4:	6812      	ldr	r2, [r2, #0]
   139f6:	4611      	mov	r1, r2
   139f8:	687a      	ldr	r2, [r7, #4]
   139fa:	440a      	add	r2, r1
   139fc:	6839      	ldr	r1, [r7, #0]
   139fe:	4610      	mov	r0, r2
   13a00:	4798      	blx	r3
   13a02:	4603      	mov	r3, r0
   13a04:	73fb      	strb	r3, [r7, #15]
	return (uint32_t)ReadBufferLabel(l);
   13a06:	687b      	ldr	r3, [r7, #4]
   13a08:	681b      	ldr	r3, [r3, #0]
   13a0a:	3308      	adds	r3, #8
   13a0c:	681b      	ldr	r3, [r3, #0]
   13a0e:	7bfa      	ldrb	r2, [r7, #15]
   13a10:	4611      	mov	r1, r2
   13a12:	6878      	ldr	r0, [r7, #4]
   13a14:	4798      	blx	r3
   13a16:	4603      	mov	r3, r0
}
   13a18:	4618      	mov	r0, r3
   13a1a:	3710      	adds	r7, #16
   13a1c:	46bd      	mov	sp, r7
   13a1e:	bd80      	pop	{r7, pc}

00013a20 <_ZN15ARINC_Interface18TrasmitSingleLabelEv>:
uint32_t ARINC_Interface::TrasmitSingleLabel(void){
   13a20:	b580      	push	{r7, lr}
   13a22:	b082      	sub	sp, #8
   13a24:	af00      	add	r7, sp, #0
   13a26:	6078      	str	r0, [r7, #4]
	return	TrasmitSingleLabel((uint32_t)DEFAULT_LABEL);
   13a28:	f44f 7187 	mov.w	r1, #270	; 0x10e
   13a2c:	6878      	ldr	r0, [r7, #4]
   13a2e:	4b03      	ldr	r3, [pc, #12]	; (13a3c <_ZN15ARINC_Interface18TrasmitSingleLabelEv+0x1c>)
   13a30:	4798      	blx	r3
   13a32:	4603      	mov	r3, r0
}
   13a34:	4618      	mov	r0, r3
   13a36:	3708      	adds	r7, #8
   13a38:	46bd      	mov	sp, r7
   13a3a:	bd80      	pop	{r7, pc}
   13a3c:	00013a41 	.word	0x00013a41

00013a40 <_ZN15ARINC_Interface18TrasmitSingleLabelEm>:

uint32_t ARINC_Interface::TrasmitSingleLabel(uint32_t l){
   13a40:	b590      	push	{r4, r7, lr}
   13a42:	b085      	sub	sp, #20
   13a44:	af00      	add	r7, sp, #0
   13a46:	6078      	str	r0, [r7, #4]
   13a48:	6039      	str	r1, [r7, #0]
	gpio_set_pin_level(LED0,false);
   13a4a:	2100      	movs	r1, #0
   13a4c:	2052      	movs	r0, #82	; 0x52
   13a4e:	4b45      	ldr	r3, [pc, #276]	; (13b64 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   13a50:	4798      	blx	r3
	octalLabel=Label2Byte(l);
   13a52:	687b      	ldr	r3, [r7, #4]
   13a54:	681b      	ldr	r3, [r3, #0]
   13a56:	3b0c      	subs	r3, #12
   13a58:	681b      	ldr	r3, [r3, #0]
   13a5a:	461a      	mov	r2, r3
   13a5c:	687b      	ldr	r3, [r7, #4]
   13a5e:	4413      	add	r3, r2
   13a60:	681b      	ldr	r3, [r3, #0]
   13a62:	3304      	adds	r3, #4
   13a64:	681b      	ldr	r3, [r3, #0]
   13a66:	687a      	ldr	r2, [r7, #4]
   13a68:	6812      	ldr	r2, [r2, #0]
   13a6a:	3a0c      	subs	r2, #12
   13a6c:	6812      	ldr	r2, [r2, #0]
   13a6e:	4611      	mov	r1, r2
   13a70:	687a      	ldr	r2, [r7, #4]
   13a72:	440a      	add	r2, r1
   13a74:	6839      	ldr	r1, [r7, #0]
   13a76:	4610      	mov	r0, r2
   13a78:	4798      	blx	r3
   13a7a:	4603      	mov	r3, r0
   13a7c:	461a      	mov	r2, r3
   13a7e:	687b      	ldr	r3, [r7, #4]
   13a80:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	index=GetIndexTXLabelarray(FlipByte(octalLabel),LabelsArrayTX);
   13a84:	687b      	ldr	r3, [r7, #4]
   13a86:	681b      	ldr	r3, [r3, #0]
   13a88:	3b0c      	subs	r3, #12
   13a8a:	681b      	ldr	r3, [r3, #0]
   13a8c:	461a      	mov	r2, r3
   13a8e:	687b      	ldr	r3, [r7, #4]
   13a90:	189c      	adds	r4, r3, r2
   13a92:	687b      	ldr	r3, [r7, #4]
   13a94:	681b      	ldr	r3, [r3, #0]
   13a96:	3b0c      	subs	r3, #12
   13a98:	681b      	ldr	r3, [r3, #0]
   13a9a:	461a      	mov	r2, r3
   13a9c:	687b      	ldr	r3, [r7, #4]
   13a9e:	4413      	add	r3, r2
   13aa0:	681b      	ldr	r3, [r3, #0]
   13aa2:	681b      	ldr	r3, [r3, #0]
   13aa4:	687a      	ldr	r2, [r7, #4]
   13aa6:	6812      	ldr	r2, [r2, #0]
   13aa8:	3a0c      	subs	r2, #12
   13aaa:	6812      	ldr	r2, [r2, #0]
   13aac:	4611      	mov	r1, r2
   13aae:	687a      	ldr	r2, [r7, #4]
   13ab0:	1850      	adds	r0, r2, r1
   13ab2:	687a      	ldr	r2, [r7, #4]
   13ab4:	f892 2188 	ldrb.w	r2, [r2, #392]	; 0x188
   13ab8:	4611      	mov	r1, r2
   13aba:	4798      	blx	r3
   13abc:	4603      	mov	r3, r0
   13abe:	4619      	mov	r1, r3
   13ac0:	687b      	ldr	r3, [r7, #4]
   13ac2:	685b      	ldr	r3, [r3, #4]
   13ac4:	461a      	mov	r2, r3
   13ac6:	4620      	mov	r0, r4
   13ac8:	4b27      	ldr	r3, [pc, #156]	; (13b68 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x128>)
   13aca:	4798      	blx	r3
   13acc:	4603      	mov	r3, r0
   13ace:	461a      	mov	r2, r3
   13ad0:	687b      	ldr	r3, [r7, #4]
   13ad2:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
	uint8_t localBuffer[4];
//	memcpy(localBuffer,LabelsArrayTX,4);
	memcpy(localBuffer,transmitBuffer[index],4);
   13ad6:	687b      	ldr	r3, [r7, #4]
   13ad8:	695a      	ldr	r2, [r3, #20]
   13ada:	687b      	ldr	r3, [r7, #4]
   13adc:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
   13ae0:	009b      	lsls	r3, r3, #2
   13ae2:	4413      	add	r3, r2
   13ae4:	681b      	ldr	r3, [r3, #0]
   13ae6:	681b      	ldr	r3, [r3, #0]
   13ae8:	60fb      	str	r3, [r7, #12]
//	Uint32FourBytesArray(0x1234561d,localBuffer);
//	PrepareSingleTXBuffer(TXBuffer,LabelsArrayTX);
	usb.println(" transmitting...");
   13aea:	4920      	ldr	r1, [pc, #128]	; (13b6c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x12c>)
   13aec:	4820      	ldr	r0, [pc, #128]	; (13b70 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   13aee:	4b21      	ldr	r3, [pc, #132]	; (13b74 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   13af0:	4798      	blx	r3
	cpu_irq_disable();
   13af2:	6878      	ldr	r0, [r7, #4]
   13af4:	4b20      	ldr	r3, [pc, #128]	; (13b78 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x138>)
   13af6:	4798      	blx	r3
	HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   13af8:	687b      	ldr	r3, [r7, #4]
   13afa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   13afe:	f107 020c 	add.w	r2, r7, #12
   13b02:	210c      	movs	r1, #12
   13b04:	4618      	mov	r0, r3
   13b06:	4b1d      	ldr	r3, [pc, #116]	; (13b7c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x13c>)
   13b08:	4798      	blx	r3
	cpu_irq_enable();
   13b0a:	6878      	ldr	r0, [r7, #4]
   13b0c:	4b1c      	ldr	r3, [pc, #112]	; (13b80 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x140>)
   13b0e:	4798      	blx	r3
	usb.println(" Transmitted!");
   13b10:	491c      	ldr	r1, [pc, #112]	; (13b84 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x144>)
   13b12:	4817      	ldr	r0, [pc, #92]	; (13b70 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   13b14:	4b17      	ldr	r3, [pc, #92]	; (13b74 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   13b16:	4798      	blx	r3
	usb.println(">");
   13b18:	491b      	ldr	r1, [pc, #108]	; (13b88 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x148>)
   13b1a:	4815      	ldr	r0, [pc, #84]	; (13b70 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   13b1c:	4b15      	ldr	r3, [pc, #84]	; (13b74 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   13b1e:	4798      	blx	r3
	printARINCTXData(TXBuffer);
   13b20:	687b      	ldr	r3, [r7, #4]
   13b22:	f203 1327 	addw	r3, r3, #295	; 0x127
   13b26:	4619      	mov	r1, r3
   13b28:	6878      	ldr	r0, [r7, #4]
   13b2a:	4b18      	ldr	r3, [pc, #96]	; (13b8c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x14c>)
   13b2c:	4798      	blx	r3
	txTimeout=false;
   13b2e:	687b      	ldr	r3, [r7, #4]
   13b30:	2200      	movs	r2, #0
   13b32:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	gpio_set_pin_level(LED0,true);
   13b36:	2101      	movs	r1, #1
   13b38:	2052      	movs	r0, #82	; 0x52
   13b3a:	4b0a      	ldr	r3, [pc, #40]	; (13b64 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   13b3c:	4798      	blx	r3
	return FourBytesArray2Uint32(TXBuffer);
   13b3e:	687b      	ldr	r3, [r7, #4]
   13b40:	681b      	ldr	r3, [r3, #0]
   13b42:	3b0c      	subs	r3, #12
   13b44:	681b      	ldr	r3, [r3, #0]
   13b46:	461a      	mov	r2, r3
   13b48:	687b      	ldr	r3, [r7, #4]
   13b4a:	441a      	add	r2, r3
   13b4c:	687b      	ldr	r3, [r7, #4]
   13b4e:	f203 1327 	addw	r3, r3, #295	; 0x127
   13b52:	4619      	mov	r1, r3
   13b54:	4610      	mov	r0, r2
   13b56:	4b0e      	ldr	r3, [pc, #56]	; (13b90 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x150>)
   13b58:	4798      	blx	r3
   13b5a:	4603      	mov	r3, r0
}
   13b5c:	4618      	mov	r0, r3
   13b5e:	3714      	adds	r7, #20
   13b60:	46bd      	mov	sp, r7
   13b62:	bd90      	pop	{r4, r7, pc}
   13b64:	00013365 	.word	0x00013365
   13b68:	00013137 	.word	0x00013137
   13b6c:	00020ea4 	.word	0x00020ea4
   13b70:	2000a368 	.word	0x2000a368
   13b74:	0001856d 	.word	0x0001856d
   13b78:	00013ced 	.word	0x00013ced
   13b7c:	00014405 	.word	0x00014405
   13b80:	00013cd5 	.word	0x00013cd5
   13b84:	00020eb8 	.word	0x00020eb8
   13b88:	00020ec8 	.word	0x00020ec8
   13b8c:	00013d3d 	.word	0x00013d3d
   13b90:	00013175 	.word	0x00013175

00013b94 <_ZN15ARINC_Interface18TrasmitSingleLabelEh>:

uint8_t ARINC_Interface::TrasmitSingleLabel(uint8_t l){
   13b94:	b580      	push	{r7, lr}
   13b96:	b082      	sub	sp, #8
   13b98:	af00      	add	r7, sp, #0
   13b9a:	6078      	str	r0, [r7, #4]
   13b9c:	460b      	mov	r3, r1
   13b9e:	70fb      	strb	r3, [r7, #3]
	
	index=GetIndexTXLabelarray(l,LabelsArrayTX);
   13ba0:	687b      	ldr	r3, [r7, #4]
   13ba2:	681b      	ldr	r3, [r3, #0]
   13ba4:	3b0c      	subs	r3, #12
   13ba6:	681b      	ldr	r3, [r3, #0]
   13ba8:	461a      	mov	r2, r3
   13baa:	687b      	ldr	r3, [r7, #4]
   13bac:	1898      	adds	r0, r3, r2
   13bae:	687b      	ldr	r3, [r7, #4]
   13bb0:	685a      	ldr	r2, [r3, #4]
   13bb2:	78fb      	ldrb	r3, [r7, #3]
   13bb4:	4619      	mov	r1, r3
   13bb6:	4b29      	ldr	r3, [pc, #164]	; (13c5c <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0xc8>)
   13bb8:	4798      	blx	r3
   13bba:	4603      	mov	r3, r0
   13bbc:	461a      	mov	r2, r3
   13bbe:	687b      	ldr	r3, [r7, #4]
   13bc0:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
	
	if (transmitBuffer[index][3]|transmitBuffer[index][2]|transmitBuffer[index][1]>0)
   13bc4:	687b      	ldr	r3, [r7, #4]
   13bc6:	695a      	ldr	r2, [r3, #20]
   13bc8:	687b      	ldr	r3, [r7, #4]
   13bca:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
   13bce:	009b      	lsls	r3, r3, #2
   13bd0:	4413      	add	r3, r2
   13bd2:	681b      	ldr	r3, [r3, #0]
   13bd4:	3303      	adds	r3, #3
   13bd6:	781a      	ldrb	r2, [r3, #0]
   13bd8:	687b      	ldr	r3, [r7, #4]
   13bda:	6959      	ldr	r1, [r3, #20]
   13bdc:	687b      	ldr	r3, [r7, #4]
   13bde:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
   13be2:	009b      	lsls	r3, r3, #2
   13be4:	440b      	add	r3, r1
   13be6:	681b      	ldr	r3, [r3, #0]
   13be8:	3302      	adds	r3, #2
   13bea:	781b      	ldrb	r3, [r3, #0]
   13bec:	4313      	orrs	r3, r2
   13bee:	b2db      	uxtb	r3, r3
   13bf0:	4619      	mov	r1, r3
   13bf2:	687b      	ldr	r3, [r7, #4]
   13bf4:	695a      	ldr	r2, [r3, #20]
   13bf6:	687b      	ldr	r3, [r7, #4]
   13bf8:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
   13bfc:	009b      	lsls	r3, r3, #2
   13bfe:	4413      	add	r3, r2
   13c00:	681b      	ldr	r3, [r3, #0]
   13c02:	3301      	adds	r3, #1
   13c04:	781b      	ldrb	r3, [r3, #0]
   13c06:	2b00      	cmp	r3, #0
   13c08:	bfcc      	ite	gt
   13c0a:	2301      	movgt	r3, #1
   13c0c:	2300      	movle	r3, #0
   13c0e:	b2db      	uxtb	r3, r3
   13c10:	430b      	orrs	r3, r1
   13c12:	2b00      	cmp	r3, #0
   13c14:	d01c      	beq.n	13c50 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0xbc>
	{

			memcpy(localBuffer,transmitBuffer[index],4);
   13c16:	687b      	ldr	r3, [r7, #4]
   13c18:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   13c1c:	687a      	ldr	r2, [r7, #4]
   13c1e:	6951      	ldr	r1, [r2, #20]
   13c20:	687a      	ldr	r2, [r7, #4]
   13c22:	f892 218c 	ldrb.w	r2, [r2, #396]	; 0x18c
   13c26:	0092      	lsls	r2, r2, #2
   13c28:	440a      	add	r2, r1
   13c2a:	6812      	ldr	r2, [r2, #0]
   13c2c:	6812      	ldr	r2, [r2, #0]
   13c2e:	601a      	str	r2, [r3, #0]

			cpu_irq_disable();
   13c30:	6878      	ldr	r0, [r7, #4]
   13c32:	4b0b      	ldr	r3, [pc, #44]	; (13c60 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0xcc>)
   13c34:	4798      	blx	r3
			HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   13c36:	687b      	ldr	r3, [r7, #4]
   13c38:	f503 70c8 	add.w	r0, r3, #400	; 0x190
   13c3c:	687b      	ldr	r3, [r7, #4]
   13c3e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   13c42:	461a      	mov	r2, r3
   13c44:	210c      	movs	r1, #12
   13c46:	4b07      	ldr	r3, [pc, #28]	; (13c64 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0xd0>)
   13c48:	4798      	blx	r3
			cpu_irq_enable();
   13c4a:	6878      	ldr	r0, [r7, #4]
   13c4c:	4b06      	ldr	r3, [pc, #24]	; (13c68 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0xd4>)
   13c4e:	4798      	blx	r3
	}



	return l;
   13c50:	78fb      	ldrb	r3, [r7, #3]
}
   13c52:	4618      	mov	r0, r3
   13c54:	3708      	adds	r7, #8
   13c56:	46bd      	mov	sp, r7
   13c58:	bd80      	pop	{r7, pc}
   13c5a:	bf00      	nop
   13c5c:	00013137 	.word	0x00013137
   13c60:	00013ced 	.word	0x00013ced
   13c64:	00014405 	.word	0x00014405
   13c68:	00013cd5 	.word	0x00013cd5

00013c6c <_ZN15ARINC_Interface16TransmitTXBufferEv>:

void	ARINC_Interface::TransmitTXBuffer(void){
   13c6c:	b580      	push	{r7, lr}
   13c6e:	b084      	sub	sp, #16
   13c70:	af00      	add	r7, sp, #0
   13c72:	6078      	str	r0, [r7, #4]
	uint8_t i,l;
	gpio_set_pin_level(LED0,false);
   13c74:	2100      	movs	r1, #0
   13c76:	2052      	movs	r0, #82	; 0x52
   13c78:	4b14      	ldr	r3, [pc, #80]	; (13ccc <_ZN15ARINC_Interface16TransmitTXBufferEv+0x60>)
   13c7a:	4798      	blx	r3
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   13c7c:	2300      	movs	r3, #0
   13c7e:	73fb      	strb	r3, [r7, #15]
   13c80:	7bfb      	ldrb	r3, [r7, #15]
   13c82:	2b1f      	cmp	r3, #31
   13c84:	dc15      	bgt.n	13cb2 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x46>
	{
		if (LabelsArrayTX[i]>0)
   13c86:	687b      	ldr	r3, [r7, #4]
   13c88:	685a      	ldr	r2, [r3, #4]
   13c8a:	7bfb      	ldrb	r3, [r7, #15]
   13c8c:	4413      	add	r3, r2
   13c8e:	781b      	ldrb	r3, [r3, #0]
   13c90:	2b00      	cmp	r3, #0
   13c92:	dd0a      	ble.n	13caa <_ZN15ARINC_Interface16TransmitTXBufferEv+0x3e>
		{
			l=LabelsArrayTX[i];
   13c94:	687b      	ldr	r3, [r7, #4]
   13c96:	685a      	ldr	r2, [r3, #4]
   13c98:	7bfb      	ldrb	r3, [r7, #15]
   13c9a:	4413      	add	r3, r2
   13c9c:	781b      	ldrb	r3, [r3, #0]
   13c9e:	73bb      	strb	r3, [r7, #14]
			TrasmitSingleLabel(l);
   13ca0:	7bbb      	ldrb	r3, [r7, #14]
   13ca2:	4619      	mov	r1, r3
   13ca4:	6878      	ldr	r0, [r7, #4]
   13ca6:	4b0a      	ldr	r3, [pc, #40]	; (13cd0 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x64>)
   13ca8:	4798      	blx	r3
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   13caa:	7bfb      	ldrb	r3, [r7, #15]
   13cac:	3301      	adds	r3, #1
   13cae:	73fb      	strb	r3, [r7, #15]
   13cb0:	e7e6      	b.n	13c80 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x14>
		}
	}
	txTimeout=false;
   13cb2:	687b      	ldr	r3, [r7, #4]
   13cb4:	2200      	movs	r2, #0
   13cb6:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	gpio_set_pin_level(LED0,true);
   13cba:	2101      	movs	r1, #1
   13cbc:	2052      	movs	r0, #82	; 0x52
   13cbe:	4b03      	ldr	r3, [pc, #12]	; (13ccc <_ZN15ARINC_Interface16TransmitTXBufferEv+0x60>)
   13cc0:	4798      	blx	r3
}
   13cc2:	bf00      	nop
   13cc4:	3710      	adds	r7, #16
   13cc6:	46bd      	mov	sp, r7
   13cc8:	bd80      	pop	{r7, pc}
   13cca:	bf00      	nop
   13ccc:	00013365 	.word	0x00013365
   13cd0:	00013b95 	.word	0x00013b95

00013cd4 <_ZN15ARINC_Interface14cpu_irq_enableEv>:
	usb.println("  I = Increment Message and Transmit. Explorer Mode  - ONLY!");
	usb.println("  M = Enter Custom Message. Explorer Mode  - ONLY!");
	usb.println("  ENTER= Transmit next message. Explorer Mode  - ONLY!");
}

void	ARINC_Interface::cpu_irq_enable(void){
   13cd4:	b480      	push	{r7}
   13cd6:	b083      	sub	sp, #12
   13cd8:	af00      	add	r7, sp, #0
   13cda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   13cdc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   13ce0:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   13ce2:	bf00      	nop
   13ce4:	370c      	adds	r7, #12
   13ce6:	46bd      	mov	sp, r7
   13ce8:	bc80      	pop	{r7}
   13cea:	4770      	bx	lr

00013cec <_ZN15ARINC_Interface15cpu_irq_disableEv>:
void	ARINC_Interface::cpu_irq_disable(void){
   13cec:	b480      	push	{r7}
   13cee:	b083      	sub	sp, #12
   13cf0:	af00      	add	r7, sp, #0
   13cf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   13cf4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   13cf8:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   13cfa:	bf00      	nop
   13cfc:	370c      	adds	r7, #12
   13cfe:	46bd      	mov	sp, r7
   13d00:	bc80      	pop	{r7}
   13d02:	4770      	bx	lr

00013d04 <_ZN15ARINC_Interface12PrintHexByteEh>:
	usb.write(&p,1);
	p=0x0D;
	usb.write(&p,1);
}
void ARINC_Interface::PrintHexByte(uint8_t c)
{
   13d04:	b580      	push	{r7, lr}
   13d06:	b082      	sub	sp, #8
   13d08:	af00      	add	r7, sp, #0
   13d0a:	6078      	str	r0, [r7, #4]
   13d0c:	460b      	mov	r3, r1
   13d0e:	70fb      	strb	r3, [r7, #3]
	usb<<"0x ";
   13d10:	4906      	ldr	r1, [pc, #24]	; (13d2c <_ZN15ARINC_Interface12PrintHexByteEh+0x28>)
   13d12:	4807      	ldr	r0, [pc, #28]	; (13d30 <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   13d14:	4b07      	ldr	r3, [pc, #28]	; (13d34 <_ZN15ARINC_Interface12PrintHexByteEh+0x30>)
   13d16:	4798      	blx	r3
	usb.println(c,HEX);
   13d18:	78fb      	ldrb	r3, [r7, #3]
   13d1a:	2210      	movs	r2, #16
   13d1c:	4619      	mov	r1, r3
   13d1e:	4804      	ldr	r0, [pc, #16]	; (13d30 <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   13d20:	4b05      	ldr	r3, [pc, #20]	; (13d38 <_ZN15ARINC_Interface12PrintHexByteEh+0x34>)
   13d22:	4798      	blx	r3
	
}
   13d24:	bf00      	nop
   13d26:	3708      	adds	r7, #8
   13d28:	46bd      	mov	sp, r7
   13d2a:	bd80      	pop	{r7, pc}
   13d2c:	00021368 	.word	0x00021368
   13d30:	2000a368 	.word	0x2000a368
   13d34:	00001485 	.word	0x00001485
   13d38:	000185a1 	.word	0x000185a1

00013d3c <_ZN15ARINC_Interface16printARINCTXDataEPh>:
		usb.println("\n\rLabels 192-255:  ");
	}
	
}

void ARINC_Interface::printARINCTXData(unsigned char *array) {
   13d3c:	b580      	push	{r7, lr}
   13d3e:	b084      	sub	sp, #16
   13d40:	af00      	add	r7, sp, #0
   13d42:	6078      	str	r0, [r7, #4]
   13d44:	6039      	str	r1, [r7, #0]
	unsigned char i;
	
	usb.println("\n\r>TX    Data:");
   13d46:	4914      	ldr	r1, [pc, #80]	; (13d98 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x5c>)
   13d48:	4814      	ldr	r0, [pc, #80]	; (13d9c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13d4a:	4b15      	ldr	r3, [pc, #84]	; (13da0 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13d4c:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   13d4e:	2300      	movs	r3, #0
   13d50:	73fb      	strb	r3, [r7, #15]
   13d52:	7bfb      	ldrb	r3, [r7, #15]
   13d54:	2b02      	cmp	r3, #2
   13d56:	dc0b      	bgt.n	13d70 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x34>
		PrintHexByte(array[i]);          // Output the data
   13d58:	7bfb      	ldrb	r3, [r7, #15]
   13d5a:	683a      	ldr	r2, [r7, #0]
   13d5c:	4413      	add	r3, r2
   13d5e:	781b      	ldrb	r3, [r3, #0]
   13d60:	4619      	mov	r1, r3
   13d62:	6878      	ldr	r0, [r7, #4]
   13d64:	4b0f      	ldr	r3, [pc, #60]	; (13da4 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   13d66:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   13d68:	7bfb      	ldrb	r3, [r7, #15]
   13d6a:	3301      	adds	r3, #1
   13d6c:	73fb      	strb	r3, [r7, #15]
   13d6e:	e7f0      	b.n	13d52 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x16>
	}
	usb.println("Label:");
   13d70:	490d      	ldr	r1, [pc, #52]	; (13da8 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x6c>)
   13d72:	480a      	ldr	r0, [pc, #40]	; (13d9c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13d74:	4b0a      	ldr	r3, [pc, #40]	; (13da0 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13d76:	4798      	blx	r3
	PrintHexByte(array[3]);             // Output the label data
   13d78:	683b      	ldr	r3, [r7, #0]
   13d7a:	3303      	adds	r3, #3
   13d7c:	781b      	ldrb	r3, [r3, #0]
   13d7e:	4619      	mov	r1, r3
   13d80:	6878      	ldr	r0, [r7, #4]
   13d82:	4b08      	ldr	r3, [pc, #32]	; (13da4 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   13d84:	4798      	blx	r3
	
	//crlf();
	usb.println(">");
   13d86:	4909      	ldr	r1, [pc, #36]	; (13dac <_ZN15ARINC_Interface16printARINCTXDataEPh+0x70>)
   13d88:	4804      	ldr	r0, [pc, #16]	; (13d9c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13d8a:	4b05      	ldr	r3, [pc, #20]	; (13da0 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13d8c:	4798      	blx	r3
}
   13d8e:	bf00      	nop
   13d90:	3710      	adds	r7, #16
   13d92:	46bd      	mov	sp, r7
   13d94:	bd80      	pop	{r7, pc}
   13d96:	bf00      	nop
   13d98:	00021538 	.word	0x00021538
   13d9c:	2000a368 	.word	0x2000a368
   13da0:	0001856d 	.word	0x0001856d
   13da4:	00013d05 	.word	0x00013d05
   13da8:	00021548 	.word	0x00021548
   13dac:	00020ec8 	.word	0x00020ec8

00013db0 <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
   13db0:	b580      	push	{r7, lr}
   13db2:	b082      	sub	sp, #8
   13db4:	af00      	add	r7, sp, #0
   13db6:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   13db8:	2001      	movs	r0, #1
   13dba:	4b03      	ldr	r3, [pc, #12]	; (13dc8 <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
   13dbc:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
   13dbe:	bf00      	nop
   13dc0:	3708      	adds	r7, #8
   13dc2:	46bd      	mov	sp, r7
   13dc4:	bd80      	pop	{r7, pc}
   13dc6:	bf00      	nop
   13dc8:	0000672d 	.word	0x0000672d

00013dcc <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

 ARINC_Interface	arinc;
   13dcc:	b580      	push	{r7, lr}
   13dce:	b082      	sub	sp, #8
   13dd0:	af00      	add	r7, sp, #0
   13dd2:	6078      	str	r0, [r7, #4]
   13dd4:	6039      	str	r1, [r7, #0]
   13dd6:	687b      	ldr	r3, [r7, #4]
   13dd8:	2b01      	cmp	r3, #1
   13dda:	d10c      	bne.n	13df6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13ddc:	683b      	ldr	r3, [r7, #0]
   13dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13de2:	4293      	cmp	r3, r2
   13de4:	d107      	bne.n	13df6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13de6:	4806      	ldr	r0, [pc, #24]	; (13e00 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13de8:	4b06      	ldr	r3, [pc, #24]	; (13e04 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13dea:	4798      	blx	r3
   13dec:	4a06      	ldr	r2, [pc, #24]	; (13e08 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13dee:	4907      	ldr	r1, [pc, #28]	; (13e0c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13df0:	4803      	ldr	r0, [pc, #12]	; (13e00 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13df2:	4b07      	ldr	r3, [pc, #28]	; (13e10 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13df4:	4798      	blx	r3
   13df6:	bf00      	nop
   13df8:	3708      	adds	r7, #8
   13dfa:	46bd      	mov	sp, r7
   13dfc:	bd80      	pop	{r7, pc}
   13dfe:	bf00      	nop
   13e00:	20008ec8 	.word	0x20008ec8
   13e04:	0001345d 	.word	0x0001345d
   13e08:	20000000 	.word	0x20000000
   13e0c:	00013555 	.word	0x00013555
   13e10:	00019d41 	.word	0x00019d41

00013e14 <_GLOBAL__sub_I_HexSymbols>:
   13e14:	b580      	push	{r7, lr}
   13e16:	af00      	add	r7, sp, #0
   13e18:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13e1c:	2001      	movs	r0, #1
   13e1e:	4b01      	ldr	r3, [pc, #4]	; (13e24 <_GLOBAL__sub_I_HexSymbols+0x10>)
   13e20:	4798      	blx	r3
   13e22:	bd80      	pop	{r7, pc}
   13e24:	00013dcd 	.word	0x00013dcd

00013e28 <hri_port_set_OUT_reg>:
{
   13e28:	b480      	push	{r7}
   13e2a:	b085      	sub	sp, #20
   13e2c:	af00      	add	r7, sp, #0
   13e2e:	60f8      	str	r0, [r7, #12]
   13e30:	460b      	mov	r3, r1
   13e32:	607a      	str	r2, [r7, #4]
   13e34:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   13e36:	7afb      	ldrb	r3, [r7, #11]
   13e38:	68fa      	ldr	r2, [r7, #12]
   13e3a:	01db      	lsls	r3, r3, #7
   13e3c:	4413      	add	r3, r2
   13e3e:	3318      	adds	r3, #24
   13e40:	687a      	ldr	r2, [r7, #4]
   13e42:	601a      	str	r2, [r3, #0]
}
   13e44:	bf00      	nop
   13e46:	3714      	adds	r7, #20
   13e48:	46bd      	mov	sp, r7
   13e4a:	bc80      	pop	{r7}
   13e4c:	4770      	bx	lr

00013e4e <hri_port_clear_OUT_reg>:
{
   13e4e:	b480      	push	{r7}
   13e50:	b085      	sub	sp, #20
   13e52:	af00      	add	r7, sp, #0
   13e54:	60f8      	str	r0, [r7, #12]
   13e56:	460b      	mov	r3, r1
   13e58:	607a      	str	r2, [r7, #4]
   13e5a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   13e5c:	7afb      	ldrb	r3, [r7, #11]
   13e5e:	68fa      	ldr	r2, [r7, #12]
   13e60:	01db      	lsls	r3, r3, #7
   13e62:	4413      	add	r3, r2
   13e64:	3314      	adds	r3, #20
   13e66:	687a      	ldr	r2, [r7, #4]
   13e68:	601a      	str	r2, [r3, #0]
}
   13e6a:	bf00      	nop
   13e6c:	3714      	adds	r7, #20
   13e6e:	46bd      	mov	sp, r7
   13e70:	bc80      	pop	{r7}
   13e72:	4770      	bx	lr

00013e74 <_gpio_set_level>:
{
   13e74:	b580      	push	{r7, lr}
   13e76:	b082      	sub	sp, #8
   13e78:	af00      	add	r7, sp, #0
   13e7a:	4603      	mov	r3, r0
   13e7c:	6039      	str	r1, [r7, #0]
   13e7e:	71fb      	strb	r3, [r7, #7]
   13e80:	4613      	mov	r3, r2
   13e82:	71bb      	strb	r3, [r7, #6]
	if (level) {
   13e84:	79bb      	ldrb	r3, [r7, #6]
   13e86:	2b00      	cmp	r3, #0
   13e88:	d006      	beq.n	13e98 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   13e8a:	79fb      	ldrb	r3, [r7, #7]
   13e8c:	683a      	ldr	r2, [r7, #0]
   13e8e:	4619      	mov	r1, r3
   13e90:	4806      	ldr	r0, [pc, #24]	; (13eac <_gpio_set_level+0x38>)
   13e92:	4b07      	ldr	r3, [pc, #28]	; (13eb0 <_gpio_set_level+0x3c>)
   13e94:	4798      	blx	r3
}
   13e96:	e005      	b.n	13ea4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   13e98:	79fb      	ldrb	r3, [r7, #7]
   13e9a:	683a      	ldr	r2, [r7, #0]
   13e9c:	4619      	mov	r1, r3
   13e9e:	4803      	ldr	r0, [pc, #12]	; (13eac <_gpio_set_level+0x38>)
   13ea0:	4b04      	ldr	r3, [pc, #16]	; (13eb4 <_gpio_set_level+0x40>)
   13ea2:	4798      	blx	r3
}
   13ea4:	bf00      	nop
   13ea6:	3708      	adds	r7, #8
   13ea8:	46bd      	mov	sp, r7
   13eaa:	bd80      	pop	{r7, pc}
   13eac:	41008000 	.word	0x41008000
   13eb0:	00013e29 	.word	0x00013e29
   13eb4:	00013e4f 	.word	0x00013e4f

00013eb8 <gpio_set_pin_level>:
{
   13eb8:	b580      	push	{r7, lr}
   13eba:	b082      	sub	sp, #8
   13ebc:	af00      	add	r7, sp, #0
   13ebe:	4603      	mov	r3, r0
   13ec0:	460a      	mov	r2, r1
   13ec2:	71fb      	strb	r3, [r7, #7]
   13ec4:	4613      	mov	r3, r2
   13ec6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13ec8:	79fb      	ldrb	r3, [r7, #7]
   13eca:	115b      	asrs	r3, r3, #5
   13ecc:	b2d8      	uxtb	r0, r3
   13ece:	79fb      	ldrb	r3, [r7, #7]
   13ed0:	f003 031f 	and.w	r3, r3, #31
   13ed4:	2201      	movs	r2, #1
   13ed6:	fa02 f303 	lsl.w	r3, r2, r3
   13eda:	79ba      	ldrb	r2, [r7, #6]
   13edc:	4619      	mov	r1, r3
   13ede:	4b03      	ldr	r3, [pc, #12]	; (13eec <gpio_set_pin_level+0x34>)
   13ee0:	4798      	blx	r3
}
   13ee2:	bf00      	nop
   13ee4:	3708      	adds	r7, #8
   13ee6:	46bd      	mov	sp, r7
   13ee8:	bd80      	pop	{r7, pc}
   13eea:	bf00      	nop
   13eec:	00013e75 	.word	0x00013e75

00013ef0 <_ZN15Holt_3593_ClassC1Ev>:
#include "Holt_3593_Class.h"
#include "ARINC_Interface.h"
#include "string.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
   13ef0:	b580      	push	{r7, lr}
   13ef2:	b082      	sub	sp, #8
   13ef4:	af00      	add	r7, sp, #0
   13ef6:	6078      	str	r0, [r7, #4]
   13ef8:	687b      	ldr	r3, [r7, #4]
   13efa:	4618      	mov	r0, r3
   13efc:	4b03      	ldr	r3, [pc, #12]	; (13f0c <_ZN15Holt_3593_ClassC1Ev+0x1c>)
   13efe:	4798      	blx	r3
{
} //Holt_3593_Class
   13f00:	687b      	ldr	r3, [r7, #4]
   13f02:	4618      	mov	r0, r3
   13f04:	3708      	adds	r7, #8
   13f06:	46bd      	mov	sp, r7
   13f08:	bd80      	pop	{r7, pc}
   13f0a:	bf00      	nop
   13f0c:	00015ff1 	.word	0x00015ff1

00013f10 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
   13f10:	b580      	push	{r7, lr}
   13f12:	b082      	sub	sp, #8
   13f14:	af00      	add	r7, sp, #0
   13f16:	6078      	str	r0, [r7, #4]
   13f18:	687b      	ldr	r3, [r7, #4]
   13f1a:	4618      	mov	r0, r3
   13f1c:	4b03      	ldr	r3, [pc, #12]	; (13f2c <_ZN15Holt_3593_ClassD1Ev+0x1c>)
   13f1e:	4798      	blx	r3
{
} //~Holt_3593_Class
   13f20:	687b      	ldr	r3, [r7, #4]
   13f22:	4618      	mov	r0, r3
   13f24:	3708      	adds	r7, #8
   13f26:	46bd      	mov	sp, r7
   13f28:	bd80      	pop	{r7, pc}
   13f2a:	bf00      	nop
   13f2c:	00016011 	.word	0x00016011

00013f30 <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
   13f30:	b590      	push	{r4, r7, lr}
   13f32:	b089      	sub	sp, #36	; 0x24
   13f34:	af02      	add	r7, sp, #8
   13f36:	6078      	str	r0, [r7, #4]
	 
	 spi.SetDescriptor(&SPI_HI3593);
   13f38:	687b      	ldr	r3, [r7, #4]
   13f3a:	492c      	ldr	r1, [pc, #176]	; (13fec <_ZN15Holt_3593_Class4InitEv+0xbc>)
   13f3c:	4618      	mov	r0, r3
   13f3e:	4b2c      	ldr	r3, [pc, #176]	; (13ff0 <_ZN15Holt_3593_Class4InitEv+0xc0>)
   13f40:	4798      	blx	r3
	  spi.init();
   13f42:	687b      	ldr	r3, [r7, #4]
   13f44:	4618      	mov	r0, r3
   13f46:	4b2b      	ldr	r3, [pc, #172]	; (13ff4 <_ZN15Holt_3593_Class4InitEv+0xc4>)
   13f48:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
   13f4a:	2340      	movs	r3, #64	; 0x40
   13f4c:	9301      	str	r3, [sp, #4]
   13f4e:	2300      	movs	r3, #0
   13f50:	9300      	str	r3, [sp, #0]
   13f52:	2300      	movs	r3, #0
   13f54:	2201      	movs	r2, #1
   13f56:	2104      	movs	r1, #4
   13f58:	6878      	ldr	r0, [r7, #4]
   13f5a:	4c27      	ldr	r4, [pc, #156]	; (13ff8 <_ZN15Holt_3593_Class4InitEv+0xc8>)
   13f5c:	47a0      	blx	r4
   13f5e:	4603      	mov	r3, r0
   13f60:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
   13f62:	2300      	movs	r3, #0
   13f64:	617b      	str	r3, [r7, #20]
   13f66:	697b      	ldr	r3, [r7, #20]
   13f68:	2b1f      	cmp	r3, #31
   13f6a:	dc27      	bgt.n	13fbc <_ZN15Holt_3593_Class4InitEv+0x8c>
	{
// 		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
// 		LabelArray_1[i]=LabelArray_2[i];
		LabelArray_2[i]=LabelArray_1[i];
   13f6c:	4a23      	ldr	r2, [pc, #140]	; (13ffc <_ZN15Holt_3593_Class4InitEv+0xcc>)
   13f6e:	697b      	ldr	r3, [r7, #20]
   13f70:	4413      	add	r3, r2
   13f72:	7819      	ldrb	r1, [r3, #0]
   13f74:	4a22      	ldr	r2, [pc, #136]	; (14000 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13f76:	697b      	ldr	r3, [r7, #20]
   13f78:	4413      	add	r3, r2
   13f7a:	460a      	mov	r2, r1
   13f7c:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX1[i]=LabelArray_2[i];
   13f7e:	4b21      	ldr	r3, [pc, #132]	; (14004 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13f80:	689a      	ldr	r2, [r3, #8]
   13f82:	697b      	ldr	r3, [r7, #20]
   13f84:	4413      	add	r3, r2
   13f86:	491e      	ldr	r1, [pc, #120]	; (14000 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13f88:	697a      	ldr	r2, [r7, #20]
   13f8a:	440a      	add	r2, r1
   13f8c:	7812      	ldrb	r2, [r2, #0]
   13f8e:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX2[i]=LabelArray_2[i];
   13f90:	4b1c      	ldr	r3, [pc, #112]	; (14004 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13f92:	68da      	ldr	r2, [r3, #12]
   13f94:	697b      	ldr	r3, [r7, #20]
   13f96:	4413      	add	r3, r2
   13f98:	4919      	ldr	r1, [pc, #100]	; (14000 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13f9a:	697a      	ldr	r2, [r7, #20]
   13f9c:	440a      	add	r2, r1
   13f9e:	7812      	ldrb	r2, [r2, #0]
   13fa0:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayTX[i]=LabelArray_2[i];
   13fa2:	4b18      	ldr	r3, [pc, #96]	; (14004 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13fa4:	685a      	ldr	r2, [r3, #4]
   13fa6:	697b      	ldr	r3, [r7, #20]
   13fa8:	4413      	add	r3, r2
   13faa:	4915      	ldr	r1, [pc, #84]	; (14000 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13fac:	697a      	ldr	r2, [r7, #20]
   13fae:	440a      	add	r2, r1
   13fb0:	7812      	ldrb	r2, [r2, #0]
   13fb2:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
   13fb4:	697b      	ldr	r3, [r7, #20]
   13fb6:	3301      	adds	r3, #1
   13fb8:	617b      	str	r3, [r7, #20]
   13fba:	e7d4      	b.n	13f66 <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
   13fbc:	2300      	movs	r3, #0
   13fbe:	613b      	str	r3, [r7, #16]
   13fc0:	693b      	ldr	r3, [r7, #16]
   13fc2:	2b02      	cmp	r3, #2
   13fc4:	dc0c      	bgt.n	13fe0 <_ZN15Holt_3593_Class4InitEv+0xb0>
	{
		//LabelPriority2[i]=FlipByte(LabelPriority1[i]);
		LabelPriority2[i]=LabelPriority1[i];
   13fc6:	4a10      	ldr	r2, [pc, #64]	; (14008 <_ZN15Holt_3593_Class4InitEv+0xd8>)
   13fc8:	693b      	ldr	r3, [r7, #16]
   13fca:	4413      	add	r3, r2
   13fcc:	7819      	ldrb	r1, [r3, #0]
   13fce:	4a0f      	ldr	r2, [pc, #60]	; (1400c <_ZN15Holt_3593_Class4InitEv+0xdc>)
   13fd0:	693b      	ldr	r3, [r7, #16]
   13fd2:	4413      	add	r3, r2
   13fd4:	460a      	mov	r2, r1
   13fd6:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
   13fd8:	693b      	ldr	r3, [r7, #16]
   13fda:	3301      	adds	r3, #1
   13fdc:	613b      	str	r3, [r7, #16]
   13fde:	e7ef      	b.n	13fc0 <_ZN15Holt_3593_Class4InitEv+0x90>
	}
	//memcpy(arinc.LabelsArrayRX1,LabelArray_1,LABEL_ARRAY_SIZE);	
//	memcpy(arinc.LabelsArrayRX2,LabelArray_2,LABEL_ARRAY_SIZE);	
	//memcpy(arinc.LabelsArrayTX,LabelArray_2,LABEL_ARRAY_SIZE);		
	return	status;
   13fe0:	7bfb      	ldrb	r3, [r7, #15]
 } 
   13fe2:	4618      	mov	r0, r3
   13fe4:	371c      	adds	r7, #28
   13fe6:	46bd      	mov	sp, r7
   13fe8:	bd90      	pop	{r4, r7, pc}
   13fea:	bf00      	nop
   13fec:	2000a744 	.word	0x2000a744
   13ff0:	0001606d 	.word	0x0001606d
   13ff4:	00016025 	.word	0x00016025
   13ff8:	00014011 	.word	0x00014011
   13ffc:	00021954 	.word	0x00021954
   14000:	200091b8 	.word	0x200091b8
   14004:	20008ec8 	.word	0x20008ec8
   14008:	20000244 	.word	0x20000244
   1400c:	200091d8 	.word	0x200091d8

00014010 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
   14010:	b580      	push	{r7, lr}
   14012:	b084      	sub	sp, #16
   14014:	af00      	add	r7, sp, #0
   14016:	6078      	str	r0, [r7, #4]
   14018:	4608      	mov	r0, r1
   1401a:	4611      	mov	r1, r2
   1401c:	461a      	mov	r2, r3
   1401e:	4603      	mov	r3, r0
   14020:	70fb      	strb	r3, [r7, #3]
   14022:	460b      	mov	r3, r1
   14024:	70bb      	strb	r3, [r7, #2]
   14026:	4613      	mov	r3, r2
   14028:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
   1402a:	2300      	movs	r3, #0
   1402c:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
   1402e:	2104      	movs	r1, #4
   14030:	6878      	ldr	r0, [r7, #4]
   14032:	4b18      	ldr	r3, [pc, #96]	; (14094 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
   14034:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   14036:	78fb      	ldrb	r3, [r7, #3]
   14038:	461a      	mov	r2, r3
   1403a:	2138      	movs	r1, #56	; 0x38
   1403c:	6878      	ldr	r0, [r7, #4]
   1403e:	4b16      	ldr	r3, [pc, #88]	; (14098 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   14040:	4798      	blx	r3
	 cmd =  arate;
   14042:	7e3b      	ldrb	r3, [r7, #24]
   14044:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
   14046:	787b      	ldrb	r3, [r7, #1]
   14048:	011b      	lsls	r3, r3, #4
   1404a:	b25a      	sxtb	r2, r3
   1404c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14050:	4313      	orrs	r3, r2
   14052:	b25b      	sxtb	r3, r3
   14054:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
   14056:	78bb      	ldrb	r3, [r7, #2]
   14058:	015b      	lsls	r3, r3, #5
   1405a:	b25a      	sxtb	r2, r3
   1405c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14060:	4313      	orrs	r3, r2
   14062:	b25b      	sxtb	r3, r3
   14064:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
   14066:	7f3b      	ldrb	r3, [r7, #28]
   14068:	019b      	lsls	r3, r3, #6
   1406a:	b25a      	sxtb	r2, r3
   1406c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14070:	4313      	orrs	r3, r2
   14072:	b25b      	sxtb	r3, r3
   14074:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   14076:	7bfb      	ldrb	r3, [r7, #15]
   14078:	461a      	mov	r2, r3
   1407a:	2108      	movs	r1, #8
   1407c:	6878      	ldr	r0, [r7, #4]
   1407e:	4b06      	ldr	r3, [pc, #24]	; (14098 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   14080:	4798      	blx	r3
	 return R_Register (R_TSR);
   14082:	2180      	movs	r1, #128	; 0x80
   14084:	6878      	ldr	r0, [r7, #4]
   14086:	4b05      	ldr	r3, [pc, #20]	; (1409c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
   14088:	4798      	blx	r3
   1408a:	4603      	mov	r3, r0
	 
	 
 }
   1408c:	4618      	mov	r0, r3
   1408e:	3710      	adds	r7, #16
   14090:	46bd      	mov	sp, r7
   14092:	bd80      	pop	{r7, pc}
   14094:	000144b1 	.word	0x000144b1
   14098:	00014505 	.word	0x00014505
   1409c:	00014579 	.word	0x00014579

000140a0 <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
   140a0:	b580      	push	{r7, lr}
   140a2:	b082      	sub	sp, #8
   140a4:	af00      	add	r7, sp, #0
   140a6:	6078      	str	r0, [r7, #4]
	 	spi.Enable();
   140a8:	687b      	ldr	r3, [r7, #4]
   140aa:	4618      	mov	r0, r3
   140ac:	4b04      	ldr	r3, [pc, #16]	; (140c0 <_ZN15Holt_3593_Class4openEv+0x20>)
   140ae:	4798      	blx	r3
		 SS_Low();
   140b0:	6878      	ldr	r0, [r7, #4]
   140b2:	4b04      	ldr	r3, [pc, #16]	; (140c4 <_ZN15Holt_3593_Class4openEv+0x24>)
   140b4:	4798      	blx	r3
 }
   140b6:	bf00      	nop
   140b8:	3708      	adds	r7, #8
   140ba:	46bd      	mov	sp, r7
   140bc:	bd80      	pop	{r7, pc}
   140be:	bf00      	nop
   140c0:	00016091 	.word	0x00016091
   140c4:	000145c1 	.word	0x000145c1

000140c8 <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
   140c8:	b580      	push	{r7, lr}
   140ca:	b082      	sub	sp, #8
   140cc:	af00      	add	r7, sp, #0
   140ce:	6078      	str	r0, [r7, #4]
	    SS_High();
   140d0:	6878      	ldr	r0, [r7, #4]
   140d2:	4b05      	ldr	r3, [pc, #20]	; (140e8 <_ZN15Holt_3593_Class5closeEv+0x20>)
   140d4:	4798      	blx	r3
	  spi.Disable();
   140d6:	687b      	ldr	r3, [r7, #4]
   140d8:	4618      	mov	r0, r3
   140da:	4b04      	ldr	r3, [pc, #16]	; (140ec <_ZN15Holt_3593_Class5closeEv+0x24>)
   140dc:	4798      	blx	r3
	
  }
   140de:	bf00      	nop
   140e0:	3708      	adds	r7, #8
   140e2:	46bd      	mov	sp, r7
   140e4:	bd80      	pop	{r7, pc}
   140e6:	bf00      	nop
   140e8:	000145dd 	.word	0x000145dd
   140ec:	00016155 	.word	0x00016155

000140f0 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   140f0:	b580      	push	{r7, lr}
   140f2:	b084      	sub	sp, #16
   140f4:	af00      	add	r7, sp, #0
   140f6:	6078      	str	r0, [r7, #4]
   140f8:	460b      	mov	r3, r1
   140fa:	70fb      	strb	r3, [r7, #3]
   140fc:	4613      	mov	r3, r2
   140fe:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
   14100:	78fb      	ldrb	r3, [r7, #3]
   14102:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   14104:	7bfb      	ldrb	r3, [r7, #15]
   14106:	4619      	mov	r1, r3
   14108:	6878      	ldr	r0, [r7, #4]
   1410a:	4b0b      	ldr	r3, [pc, #44]	; (14138 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
   1410c:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
   1410e:	78bb      	ldrb	r3, [r7, #2]
   14110:	2b00      	cmp	r3, #0
   14112:	d00a      	beq.n	1412a <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.IsSPIReady());     
   14114:	687b      	ldr	r3, [r7, #4]
   14116:	4618      	mov	r0, r3
   14118:	4b08      	ldr	r3, [pc, #32]	; (1413c <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
   1411a:	4798      	blx	r3
   1411c:	4603      	mov	r3, r0
   1411e:	f083 0301 	eor.w	r3, r3, #1
   14122:	b2db      	uxtb	r3, r3
   14124:	2b00      	cmp	r3, #0
   14126:	d000      	beq.n	1412a <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
   14128:	e7f4      	b.n	14114 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
   1412a:	78fb      	ldrb	r3, [r7, #3]
   1412c:	73bb      	strb	r3, [r7, #14]
   1412e:	7bbb      	ldrb	r3, [r7, #14]
  
}
   14130:	4618      	mov	r0, r3
   14132:	3710      	adds	r7, #16
   14134:	46bd      	mov	sp, r7
   14136:	bd80      	pop	{r7, pc}
   14138:	00014221 	.word	0x00014221
   1413c:	00016175 	.word	0x00016175

00014140 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::InitReceiver1Labels(void)
{
   14140:	b580      	push	{r7, lr}
   14142:	b084      	sub	sp, #16
   14144:	af00      	add	r7, sp, #0
   14146:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
   14148:	6878      	ldr	r0, [r7, #4]
   1414a:	4b14      	ldr	r3, [pc, #80]	; (1419c <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x5c>)
   1414c:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
   1414e:	2201      	movs	r2, #1
   14150:	2114      	movs	r1, #20
   14152:	6878      	ldr	r0, [r7, #4]
   14154:	4b12      	ldr	r3, [pc, #72]	; (141a0 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   14156:	4798      	blx	r3
   14158:	4603      	mov	r3, r0
   1415a:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   1415c:	231f      	movs	r3, #31
   1415e:	73fb      	strb	r3, [r7, #15]
   14160:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14164:	2b00      	cmp	r3, #0
   14166:	db11      	blt.n	1418c <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   14168:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1416c:	4a0d      	ldr	r2, [pc, #52]	; (141a4 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x64>)
   1416e:	5cd3      	ldrb	r3, [r2, r3]
   14170:	2201      	movs	r2, #1
   14172:	4619      	mov	r1, r3
   14174:	6878      	ldr	r0, [r7, #4]
   14176:	4b0a      	ldr	r3, [pc, #40]	; (141a0 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   14178:	4798      	blx	r3
   1417a:	4603      	mov	r3, r0
   1417c:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   1417e:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14182:	b2db      	uxtb	r3, r3
   14184:	3b01      	subs	r3, #1
   14186:	b2db      	uxtb	r3, r3
   14188:	73fb      	strb	r3, [r7, #15]
   1418a:	e7e9      	b.n	14160 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x20>
  }    
 	  
	close();
   1418c:	6878      	ldr	r0, [r7, #4]
   1418e:	4b06      	ldr	r3, [pc, #24]	; (141a8 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x68>)
   14190:	4798      	blx	r3
}
   14192:	bf00      	nop
   14194:	3710      	adds	r7, #16
   14196:	46bd      	mov	sp, r7
   14198:	bd80      	pop	{r7, pc}
   1419a:	bf00      	nop
   1419c:	000140a1 	.word	0x000140a1
   141a0:	000140f1 	.word	0x000140f1
   141a4:	00021954 	.word	0x00021954
   141a8:	000140c9 	.word	0x000140c9

000141ac <_ZN15Holt_3593_Class18InitPriorityLabelsEv>:
void Holt_3593_Class::InitPriorityLabels(void)
{
   141ac:	b580      	push	{r7, lr}
   141ae:	b082      	sub	sp, #8
   141b0:	af00      	add	r7, sp, #0
   141b2:	6078      	str	r0, [r7, #4]
	
	// Priorty Labels
	TXBuffer[0] =  LabelPriority1[0];   // filter 3
   141b4:	4b17      	ldr	r3, [pc, #92]	; (14214 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   141b6:	781a      	ldrb	r2, [r3, #0]
   141b8:	687b      	ldr	r3, [r7, #4]
   141ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	TXBuffer[1] =  LabelPriority1[1];   // filter 2
   141be:	4b15      	ldr	r3, [pc, #84]	; (14214 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   141c0:	785a      	ldrb	r2, [r3, #1]
   141c2:	687b      	ldr	r3, [r7, #4]
   141c4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	TXBuffer[2] =  LabelPriority1[2];   // filter 1
   141c8:	4b12      	ldr	r3, [pc, #72]	; (14214 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   141ca:	789a      	ldrb	r2, [r3, #2]
   141cc:	687b      	ldr	r3, [r7, #4]
   141ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	TransmitCommandAndData(W_PL1Match,TXBuffer);  // initialize the Receiver1 PL match registers
   141d2:	687b      	ldr	r3, [r7, #4]
   141d4:	3321      	adds	r3, #33	; 0x21
   141d6:	461a      	mov	r2, r3
   141d8:	2118      	movs	r1, #24
   141da:	6878      	ldr	r0, [r7, #4]
   141dc:	4b0e      	ldr	r3, [pc, #56]	; (14218 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x6c>)
   141de:	4798      	blx	r3
	
	TXBuffer[0] =  LabelPriority2[0];   // filter 3
   141e0:	4b0e      	ldr	r3, [pc, #56]	; (1421c <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   141e2:	781a      	ldrb	r2, [r3, #0]
   141e4:	687b      	ldr	r3, [r7, #4]
   141e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
   141ea:	4b0c      	ldr	r3, [pc, #48]	; (1421c <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   141ec:	785a      	ldrb	r2, [r3, #1]
   141ee:	687b      	ldr	r3, [r7, #4]
   141f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
   141f4:	4b09      	ldr	r3, [pc, #36]	; (1421c <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   141f6:	789a      	ldrb	r2, [r3, #2]
   141f8:	687b      	ldr	r3, [r7, #4]
   141fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
   141fe:	687b      	ldr	r3, [r7, #4]
   14200:	3321      	adds	r3, #33	; 0x21
   14202:	461a      	mov	r2, r3
   14204:	212c      	movs	r1, #44	; 0x2c
   14206:	6878      	ldr	r0, [r7, #4]
   14208:	4b03      	ldr	r3, [pc, #12]	; (14218 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x6c>)
   1420a:	4798      	blx	r3
}
   1420c:	bf00      	nop
   1420e:	3708      	adds	r7, #8
   14210:	46bd      	mov	sp, r7
   14212:	bd80      	pop	{r7, pc}
   14214:	20000244 	.word	0x20000244
   14218:	00014405 	.word	0x00014405
   1421c:	200091d8 	.word	0x200091d8

00014220 <_ZN15Holt_3593_Class9Send_ByteEh>:
	}
	return rev;
}

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   14220:	b580      	push	{r7, lr}
   14222:	b082      	sub	sp, #8
   14224:	af00      	add	r7, sp, #0
   14226:	6078      	str	r0, [r7, #4]
   14228:	460b      	mov	r3, r1
   1422a:	70fb      	strb	r3, [r7, #3]
	while (!spi.IsSPIReady()); 
   1422c:	687b      	ldr	r3, [r7, #4]
   1422e:	4618      	mov	r0, r3
   14230:	4b0f      	ldr	r3, [pc, #60]	; (14270 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   14232:	4798      	blx	r3
   14234:	4603      	mov	r3, r0
   14236:	f083 0301 	eor.w	r3, r3, #1
   1423a:	b2db      	uxtb	r3, r3
   1423c:	2b00      	cmp	r3, #0
   1423e:	d000      	beq.n	14242 <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
   14240:	e7f4      	b.n	1422c <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.Write(&byte,1);
   14242:	687b      	ldr	r3, [r7, #4]
   14244:	1cf9      	adds	r1, r7, #3
   14246:	2201      	movs	r2, #1
   14248:	4618      	mov	r0, r3
   1424a:	4b0a      	ldr	r3, [pc, #40]	; (14274 <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
   1424c:	4798      	blx	r3
	while (!spi.IsSPIReady());  
   1424e:	687b      	ldr	r3, [r7, #4]
   14250:	4618      	mov	r0, r3
   14252:	4b07      	ldr	r3, [pc, #28]	; (14270 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   14254:	4798      	blx	r3
   14256:	4603      	mov	r3, r0
   14258:	f083 0301 	eor.w	r3, r3, #1
   1425c:	b2db      	uxtb	r3, r3
   1425e:	2b00      	cmp	r3, #0
   14260:	d000      	beq.n	14264 <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
   14262:	e7f4      	b.n	1424e <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
   14264:	78fb      	ldrb	r3, [r7, #3]
}
   14266:	4618      	mov	r0, r3
   14268:	3708      	adds	r7, #8
   1426a:	46bd      	mov	sp, r7
   1426c:	bd80      	pop	{r7, pc}
   1426e:	bf00      	nop
   14270:	00016175 	.word	0x00016175
   14274:	000160cd 	.word	0x000160cd

00014278 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   14278:	b580      	push	{r7, lr}
   1427a:	b084      	sub	sp, #16
   1427c:	af00      	add	r7, sp, #0
   1427e:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.IsSPIReady());
   14280:	687b      	ldr	r3, [r7, #4]
   14282:	4618      	mov	r0, r3
   14284:	4b0f      	ldr	r3, [pc, #60]	; (142c4 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   14286:	4798      	blx	r3
   14288:	4603      	mov	r3, r0
   1428a:	f083 0301 	eor.w	r3, r3, #1
   1428e:	b2db      	uxtb	r3, r3
   14290:	2b00      	cmp	r3, #0
   14292:	d000      	beq.n	14296 <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
   14294:	e7f4      	b.n	14280 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.Read(&byte,1);
   14296:	687b      	ldr	r3, [r7, #4]
   14298:	f107 010f 	add.w	r1, r7, #15
   1429c:	2201      	movs	r2, #1
   1429e:	4618      	mov	r0, r3
   142a0:	4b09      	ldr	r3, [pc, #36]	; (142c8 <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
   142a2:	4798      	blx	r3
	while (!spi.IsSPIReady());
   142a4:	687b      	ldr	r3, [r7, #4]
   142a6:	4618      	mov	r0, r3
   142a8:	4b06      	ldr	r3, [pc, #24]	; (142c4 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   142aa:	4798      	blx	r3
   142ac:	4603      	mov	r3, r0
   142ae:	f083 0301 	eor.w	r3, r3, #1
   142b2:	b2db      	uxtb	r3, r3
   142b4:	2b00      	cmp	r3, #0
   142b6:	d000      	beq.n	142ba <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
   142b8:	e7f4      	b.n	142a4 <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
   142ba:	7bfb      	ldrb	r3, [r7, #15]
}	
   142bc:	4618      	mov	r0, r3
   142be:	3710      	adds	r7, #16
   142c0:	46bd      	mov	sp, r7
   142c2:	bd80      	pop	{r7, pc}
   142c4:	00016175 	.word	0x00016175
   142c8:	00016111 	.word	0x00016111

000142cc <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   142cc:	b580      	push	{r7, lr}
   142ce:	b084      	sub	sp, #16
   142d0:	af00      	add	r7, sp, #0
   142d2:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   142d4:	6878      	ldr	r0, [r7, #4]
   142d6:	4b14      	ldr	r3, [pc, #80]	; (14328 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
   142d8:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   142da:	2201      	movs	r2, #1
   142dc:	2128      	movs	r1, #40	; 0x28
   142de:	6878      	ldr	r0, [r7, #4]
   142e0:	4b12      	ldr	r3, [pc, #72]	; (1432c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   142e2:	4798      	blx	r3
   142e4:	4603      	mov	r3, r0
   142e6:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   142e8:	231f      	movs	r3, #31
   142ea:	73fb      	strb	r3, [r7, #15]
   142ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
   142f0:	2b00      	cmp	r3, #0
   142f2:	db11      	blt.n	14318 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   142f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   142f8:	4a0d      	ldr	r2, [pc, #52]	; (14330 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
   142fa:	5cd3      	ldrb	r3, [r2, r3]
   142fc:	2201      	movs	r2, #1
   142fe:	4619      	mov	r1, r3
   14300:	6878      	ldr	r0, [r7, #4]
   14302:	4b0a      	ldr	r3, [pc, #40]	; (1432c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   14304:	4798      	blx	r3
   14306:	4603      	mov	r3, r0
   14308:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   1430a:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1430e:	b2db      	uxtb	r3, r3
   14310:	3b01      	subs	r3, #1
   14312:	b2db      	uxtb	r3, r3
   14314:	73fb      	strb	r3, [r7, #15]
   14316:	e7e9      	b.n	142ec <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
   14318:	6878      	ldr	r0, [r7, #4]
   1431a:	4b06      	ldr	r3, [pc, #24]	; (14334 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
   1431c:	4798      	blx	r3
}
   1431e:	bf00      	nop
   14320:	3710      	adds	r7, #16
   14322:	46bd      	mov	sp, r7
   14324:	bd80      	pop	{r7, pc}
   14326:	bf00      	nop
   14328:	000140a1 	.word	0x000140a1
   1432c:	000140f1 	.word	0x000140f1
   14330:	200091b8 	.word	0x200091b8
   14334:	000140c9 	.word	0x000140c9

00014338 <_ZN15Holt_3593_Class9ArincReadEhPh>:
// ------------------------------------------------------
// Fetch the FIFO ARINC data from the desired receiver channel 
//
// ------------------------------------------------------
void Holt_3593_Class::ArincRead(uint8_t source, unsigned char *passedArray)
{
   14338:	b580      	push	{r7, lr}
   1433a:	b086      	sub	sp, #24
   1433c:	af00      	add	r7, sp, #0
   1433e:	60f8      	str	r0, [r7, #12]
   14340:	460b      	mov	r3, r1
   14342:	607a      	str	r2, [r7, #4]
   14344:	72fb      	strb	r3, [r7, #11]
   uint8_t dummy, ByteCount, count;
   
   count = 3;                // assume it's a Priority Label Word?
   14346:	2303      	movs	r3, #3
   14348:	75bb      	strb	r3, [r7, #22]
   if(source==0xA0 || source == 0xC0){  // is it a normal Word?
   1434a:	7afb      	ldrb	r3, [r7, #11]
   1434c:	2ba0      	cmp	r3, #160	; 0xa0
   1434e:	d002      	beq.n	14356 <_ZN15Holt_3593_Class9ArincReadEhPh+0x1e>
   14350:	7afb      	ldrb	r3, [r7, #11]
   14352:	2bc0      	cmp	r3, #192	; 0xc0
   14354:	d102      	bne.n	1435c <_ZN15Holt_3593_Class9ArincReadEhPh+0x24>
       count++;								 // then it has 4 bytes.
   14356:	7dbb      	ldrb	r3, [r7, #22]
   14358:	3301      	adds	r3, #1
   1435a:	75bb      	strb	r3, [r7, #22]
	   }                        
  open();
   1435c:	68f8      	ldr	r0, [r7, #12]
   1435e:	4b11      	ldr	r3, [pc, #68]	; (143a4 <_ZN15Holt_3593_Class9ArincReadEhPh+0x6c>)
   14360:	4798      	blx	r3
  // dummy = Get_Byte();                   // clear SPI status register    
   Send_Byte(source) ;                  // source command to read FIFO data
   14362:	7afb      	ldrb	r3, [r7, #11]
   14364:	4619      	mov	r1, r3
   14366:	68f8      	ldr	r0, [r7, #12]
   14368:	4b0f      	ldr	r3, [pc, #60]	; (143a8 <_ZN15Holt_3593_Class9ArincReadEhPh+0x70>)
   1436a:	4798      	blx	r3
   
 //  dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   1436c:	2300      	movs	r3, #0
   1436e:	75fb      	strb	r3, [r7, #23]
   14370:	7dfa      	ldrb	r2, [r7, #23]
   14372:	7dbb      	ldrb	r3, [r7, #22]
   14374:	429a      	cmp	r2, r3
   14376:	da0d      	bge.n	14394 <_ZN15Holt_3593_Class9ArincReadEhPh+0x5c>
      dummy = Get_Byte(); 
   14378:	68f8      	ldr	r0, [r7, #12]
   1437a:	4b0c      	ldr	r3, [pc, #48]	; (143ac <_ZN15Holt_3593_Class9ArincReadEhPh+0x74>)
   1437c:	4798      	blx	r3
   1437e:	4603      	mov	r3, r0
   14380:	757b      	strb	r3, [r7, #21]
      passedArray[ByteCount] = dummy; 
   14382:	7dfb      	ldrb	r3, [r7, #23]
   14384:	687a      	ldr	r2, [r7, #4]
   14386:	4413      	add	r3, r2
   14388:	7d7a      	ldrb	r2, [r7, #21]
   1438a:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   1438c:	7dfb      	ldrb	r3, [r7, #23]
   1438e:	3301      	adds	r3, #1
   14390:	75fb      	strb	r3, [r7, #23]
   14392:	e7ed      	b.n	14370 <_ZN15Holt_3593_Class9ArincReadEhPh+0x38>
     }

  close();
   14394:	68f8      	ldr	r0, [r7, #12]
   14396:	4b06      	ldr	r3, [pc, #24]	; (143b0 <_ZN15Holt_3593_Class9ArincReadEhPh+0x78>)
   14398:	4798      	blx	r3
  
}
   1439a:	bf00      	nop
   1439c:	3718      	adds	r7, #24
   1439e:	46bd      	mov	sp, r7
   143a0:	bd80      	pop	{r7, pc}
   143a2:	bf00      	nop
   143a4:	000140a1 	.word	0x000140a1
   143a8:	00014221 	.word	0x00014221
   143ac:	00014279 	.word	0x00014279
   143b0:	000140c9 	.word	0x000140c9

000143b4 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   143b4:	b580      	push	{r7, lr}
   143b6:	b084      	sub	sp, #16
   143b8:	af00      	add	r7, sp, #0
   143ba:	6078      	str	r0, [r7, #4]
   143bc:	460b      	mov	r3, r1
   143be:	70fb      	strb	r3, [r7, #3]
   143c0:	4613      	mov	r3, r2
   143c2:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   143c4:	78fb      	ldrb	r3, [r7, #3]
   143c6:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   143c8:	7bfb      	ldrb	r3, [r7, #15]
   143ca:	4619      	mov	r1, r3
   143cc:	6878      	ldr	r0, [r7, #4]
   143ce:	4b0b      	ldr	r3, [pc, #44]	; (143fc <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
   143d0:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   143d2:	78bb      	ldrb	r3, [r7, #2]
   143d4:	2b00      	cmp	r3, #0
   143d6:	d00a      	beq.n	143ee <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.IsSPIReady());      
   143d8:	687b      	ldr	r3, [r7, #4]
   143da:	4618      	mov	r0, r3
   143dc:	4b08      	ldr	r3, [pc, #32]	; (14400 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
   143de:	4798      	blx	r3
   143e0:	4603      	mov	r3, r0
   143e2:	f083 0301 	eor.w	r3, r3, #1
   143e6:	b2db      	uxtb	r3, r3
   143e8:	2b00      	cmp	r3, #0
   143ea:	d000      	beq.n	143ee <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
   143ec:	e7f4      	b.n	143d8 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
   143ee:	78fb      	ldrb	r3, [r7, #3]
   143f0:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
   143f2:	7bbb      	ldrb	r3, [r7, #14]
  
 }
   143f4:	4618      	mov	r0, r3
   143f6:	3710      	adds	r7, #16
   143f8:	46bd      	mov	sp, r7
   143fa:	bd80      	pop	{r7, pc}
   143fc:	00014221 	.word	0x00014221
   14400:	00016175 	.word	0x00016175

00014404 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
   14404:	b580      	push	{r7, lr}
   14406:	b084      	sub	sp, #16
   14408:	af00      	add	r7, sp, #0
   1440a:	60f8      	str	r0, [r7, #12]
   1440c:	460b      	mov	r3, r1
   1440e:	607a      	str	r2, [r7, #4]
   14410:	72fb      	strb	r3, [r7, #11]
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
   14412:	68f8      	ldr	r0, [r7, #12]
   14414:	4b20      	ldr	r3, [pc, #128]	; (14498 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x94>)
   14416:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   14418:	4b20      	ldr	r3, [pc, #128]	; (1449c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   1441a:	2204      	movs	r2, #4
   1441c:	701a      	strb	r2, [r3, #0]
   if(cmd==W_PL1Match || cmd==W_PL2Match){       // if writing PL Match registers send only 3 bytes
   1441e:	7afb      	ldrb	r3, [r7, #11]
   14420:	2b18      	cmp	r3, #24
   14422:	d002      	beq.n	1442a <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x26>
   14424:	7afb      	ldrb	r3, [r7, #11]
   14426:	2b2c      	cmp	r3, #44	; 0x2c
   14428:	d105      	bne.n	14436 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x32>
      transmitCount--;
   1442a:	4b1c      	ldr	r3, [pc, #112]	; (1449c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   1442c:	781b      	ldrb	r3, [r3, #0]
   1442e:	3b01      	subs	r3, #1
   14430:	b2da      	uxtb	r2, r3
   14432:	4b1a      	ldr	r3, [pc, #104]	; (1449c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   14434:	701a      	strb	r2, [r3, #0]
   }
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
   14436:	7afb      	ldrb	r3, [r7, #11]
   14438:	2201      	movs	r2, #1
   1443a:	4619      	mov	r1, r3
   1443c:	68f8      	ldr	r0, [r7, #12]
   1443e:	4b18      	ldr	r3, [pc, #96]	; (144a0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   14440:	4798      	blx	r3
   14442:	4603      	mov	r3, r0
   14444:	461a      	mov	r2, r3
   14446:	4b17      	ldr	r3, [pc, #92]	; (144a4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   14448:	701a      	strb	r2, [r3, #0]

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   1444a:	4b17      	ldr	r3, [pc, #92]	; (144a8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   1444c:	2200      	movs	r2, #0
   1444e:	701a      	strb	r2, [r3, #0]
   14450:	4b15      	ldr	r3, [pc, #84]	; (144a8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   14452:	781b      	ldrb	r3, [r3, #0]
   14454:	461a      	mov	r2, r3
   14456:	4b11      	ldr	r3, [pc, #68]	; (1449c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   14458:	781b      	ldrb	r3, [r3, #0]
   1445a:	429a      	cmp	r2, r3
   1445c:	da15      	bge.n	1448a <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x86>
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   1445e:	4b12      	ldr	r3, [pc, #72]	; (144a8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   14460:	781b      	ldrb	r3, [r3, #0]
   14462:	461a      	mov	r2, r3
   14464:	687b      	ldr	r3, [r7, #4]
   14466:	4413      	add	r3, r2
   14468:	781b      	ldrb	r3, [r3, #0]
   1446a:	2201      	movs	r2, #1
   1446c:	4619      	mov	r1, r3
   1446e:	68f8      	ldr	r0, [r7, #12]
   14470:	4b0b      	ldr	r3, [pc, #44]	; (144a0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   14472:	4798      	blx	r3
   14474:	4603      	mov	r3, r0
   14476:	461a      	mov	r2, r3
   14478:	4b0a      	ldr	r3, [pc, #40]	; (144a4 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   1447a:	701a      	strb	r2, [r3, #0]
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   1447c:	4b0a      	ldr	r3, [pc, #40]	; (144a8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   1447e:	781b      	ldrb	r3, [r3, #0]
   14480:	3301      	adds	r3, #1
   14482:	b2da      	uxtb	r2, r3
   14484:	4b08      	ldr	r3, [pc, #32]	; (144a8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   14486:	701a      	strb	r2, [r3, #0]
   14488:	e7e2      	b.n	14450 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x4c>
      }   
 close();
   1448a:	68f8      	ldr	r0, [r7, #12]
   1448c:	4b07      	ldr	r3, [pc, #28]	; (144ac <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa8>)
   1448e:	4798      	blx	r3
}
   14490:	bf00      	nop
   14492:	3710      	adds	r7, #16
   14494:	46bd      	mov	sp, r7
   14496:	bd80      	pop	{r7, pc}
   14498:	000140a1 	.word	0x000140a1
   1449c:	200091dd 	.word	0x200091dd
   144a0:	000143b5 	.word	0x000143b5
   144a4:	200091dc 	.word	0x200091dc
   144a8:	200091db 	.word	0x200091db
   144ac:	000140c9 	.word	0x000140c9

000144b0 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   144b0:	b580      	push	{r7, lr}
   144b2:	b084      	sub	sp, #16
   144b4:	af00      	add	r7, sp, #0
   144b6:	6078      	str	r0, [r7, #4]
   144b8:	460b      	mov	r3, r1
   144ba:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
   144bc:	78fb      	ldrb	r3, [r7, #3]
   144be:	73fb      	strb	r3, [r7, #15]
  open();
   144c0:	6878      	ldr	r0, [r7, #4]
   144c2:	4b0c      	ldr	r3, [pc, #48]	; (144f4 <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
   144c4:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   144c6:	7bfb      	ldrb	r3, [r7, #15]
   144c8:	4619      	mov	r1, r3
   144ca:	6878      	ldr	r0, [r7, #4]
   144cc:	4b0a      	ldr	r3, [pc, #40]	; (144f8 <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
   144ce:	4798      	blx	r3
  while (!spi.IsSPIReady()) {;}      // Wait for data to come back in.
   144d0:	687b      	ldr	r3, [r7, #4]
   144d2:	4618      	mov	r0, r3
   144d4:	4b09      	ldr	r3, [pc, #36]	; (144fc <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
   144d6:	4798      	blx	r3
   144d8:	4603      	mov	r3, r0
   144da:	f083 0301 	eor.w	r3, r3, #1
   144de:	b2db      	uxtb	r3, r3
   144e0:	2b00      	cmp	r3, #0
   144e2:	d000      	beq.n	144e6 <_ZN15Holt_3593_Class9W_CommandEc+0x36>
   144e4:	e7f4      	b.n	144d0 <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   144e6:	6878      	ldr	r0, [r7, #4]
   144e8:	4b05      	ldr	r3, [pc, #20]	; (14500 <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
   144ea:	4798      	blx	r3
}
   144ec:	bf00      	nop
   144ee:	3710      	adds	r7, #16
   144f0:	46bd      	mov	sp, r7
   144f2:	bd80      	pop	{r7, pc}
   144f4:	000140a1 	.word	0x000140a1
   144f8:	00014221 	.word	0x00014221
   144fc:	00016175 	.word	0x00016175
   14500:	000140c9 	.word	0x000140c9

00014504 <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   14504:	b580      	push	{r7, lr}
   14506:	b082      	sub	sp, #8
   14508:	af00      	add	r7, sp, #0
   1450a:	6078      	str	r0, [r7, #4]
   1450c:	460b      	mov	r3, r1
   1450e:	70fb      	strb	r3, [r7, #3]
   14510:	4613      	mov	r3, r2
   14512:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
   14514:	6878      	ldr	r0, [r7, #4]
   14516:	4b14      	ldr	r3, [pc, #80]	; (14568 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
   14518:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   1451a:	78fb      	ldrb	r3, [r7, #3]
   1451c:	4619      	mov	r1, r3
   1451e:	6878      	ldr	r0, [r7, #4]
   14520:	4b12      	ldr	r3, [pc, #72]	; (1456c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   14522:	4798      	blx	r3
  while (!spi.IsSPIReady());    
   14524:	687b      	ldr	r3, [r7, #4]
   14526:	4618      	mov	r0, r3
   14528:	4b11      	ldr	r3, [pc, #68]	; (14570 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   1452a:	4798      	blx	r3
   1452c:	4603      	mov	r3, r0
   1452e:	f083 0301 	eor.w	r3, r3, #1
   14532:	b2db      	uxtb	r3, r3
   14534:	2b00      	cmp	r3, #0
   14536:	d000      	beq.n	1453a <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
   14538:	e7f4      	b.n	14524 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   1453a:	78bb      	ldrb	r3, [r7, #2]
   1453c:	4619      	mov	r1, r3
   1453e:	6878      	ldr	r0, [r7, #4]
   14540:	4b0a      	ldr	r3, [pc, #40]	; (1456c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   14542:	4798      	blx	r3
  while (!spi.IsSPIReady());    
   14544:	687b      	ldr	r3, [r7, #4]
   14546:	4618      	mov	r0, r3
   14548:	4b09      	ldr	r3, [pc, #36]	; (14570 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   1454a:	4798      	blx	r3
   1454c:	4603      	mov	r3, r0
   1454e:	f083 0301 	eor.w	r3, r3, #1
   14552:	b2db      	uxtb	r3, r3
   14554:	2b00      	cmp	r3, #0
   14556:	d000      	beq.n	1455a <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
   14558:	e7f4      	b.n	14544 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   1455a:	6878      	ldr	r0, [r7, #4]
   1455c:	4b05      	ldr	r3, [pc, #20]	; (14574 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
   1455e:	4798      	blx	r3
}
   14560:	bf00      	nop
   14562:	3708      	adds	r7, #8
   14564:	46bd      	mov	sp, r7
   14566:	bd80      	pop	{r7, pc}
   14568:	000140a1 	.word	0x000140a1
   1456c:	00014221 	.word	0x00014221
   14570:	00016175 	.word	0x00016175
   14574:	000140c9 	.word	0x000140c9

00014578 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   14578:	b580      	push	{r7, lr}
   1457a:	b084      	sub	sp, #16
   1457c:	af00      	add	r7, sp, #0
   1457e:	6078      	str	r0, [r7, #4]
   14580:	460b      	mov	r3, r1
   14582:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
   14584:	6878      	ldr	r0, [r7, #4]
   14586:	4b0a      	ldr	r3, [pc, #40]	; (145b0 <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
   14588:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   1458a:	78fb      	ldrb	r3, [r7, #3]
   1458c:	2201      	movs	r2, #1
   1458e:	4619      	mov	r1, r3
   14590:	6878      	ldr	r0, [r7, #4]
   14592:	4b08      	ldr	r3, [pc, #32]	; (145b4 <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
   14594:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   14596:	6878      	ldr	r0, [r7, #4]
   14598:	4b07      	ldr	r3, [pc, #28]	; (145b8 <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
   1459a:	4798      	blx	r3
   1459c:	4603      	mov	r3, r0
   1459e:	73fb      	strb	r3, [r7, #15]
         
  close();
   145a0:	6878      	ldr	r0, [r7, #4]
   145a2:	4b06      	ldr	r3, [pc, #24]	; (145bc <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
   145a4:	4798      	blx	r3
  return R_Reg;
   145a6:	7bfb      	ldrb	r3, [r7, #15]
}
   145a8:	4618      	mov	r0, r3
   145aa:	3710      	adds	r7, #16
   145ac:	46bd      	mov	sp, r7
   145ae:	bd80      	pop	{r7, pc}
   145b0:	000140a1 	.word	0x000140a1
   145b4:	000143b5 	.word	0x000143b5
   145b8:	00014279 	.word	0x00014279
   145bc:	000140c9 	.word	0x000140c9

000145c0 <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
   145c0:	b580      	push	{r7, lr}
   145c2:	b082      	sub	sp, #8
   145c4:	af00      	add	r7, sp, #0
   145c6:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
   145c8:	2100      	movs	r1, #0
   145ca:	204e      	movs	r0, #78	; 0x4e
   145cc:	4b02      	ldr	r3, [pc, #8]	; (145d8 <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
   145ce:	4798      	blx	r3
}
   145d0:	bf00      	nop
   145d2:	3708      	adds	r7, #8
   145d4:	46bd      	mov	sp, r7
   145d6:	bd80      	pop	{r7, pc}
   145d8:	00013eb9 	.word	0x00013eb9

000145dc <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
   145dc:	b580      	push	{r7, lr}
   145de:	b082      	sub	sp, #8
   145e0:	af00      	add	r7, sp, #0
   145e2:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
   145e4:	2101      	movs	r1, #1
   145e6:	204e      	movs	r0, #78	; 0x4e
   145e8:	4b02      	ldr	r3, [pc, #8]	; (145f4 <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
   145ea:	4798      	blx	r3
}
   145ec:	bf00      	nop
   145ee:	3708      	adds	r7, #8
   145f0:	46bd      	mov	sp, r7
   145f2:	bd80      	pop	{r7, pc}
   145f4:	00013eb9 	.word	0x00013eb9

000145f8 <_ZN14Protocol_ClassD2Ev>:
#include "Protocol_Class.h"
#include "stdlib.h"
#include "math.h"

// virtual destructor
Protocol_Class::~Protocol_Class()
   145f8:	b480      	push	{r7}
   145fa:	b083      	sub	sp, #12
   145fc:	af00      	add	r7, sp, #0
   145fe:	6078      	str	r0, [r7, #4]
   14600:	6039      	str	r1, [r7, #0]
   14602:	683b      	ldr	r3, [r7, #0]
   14604:	681a      	ldr	r2, [r3, #0]
   14606:	687b      	ldr	r3, [r7, #4]
   14608:	601a      	str	r2, [r3, #0]
   1460a:	687b      	ldr	r3, [r7, #4]
   1460c:	681b      	ldr	r3, [r3, #0]
   1460e:	3b0c      	subs	r3, #12
   14610:	681b      	ldr	r3, [r3, #0]
   14612:	461a      	mov	r2, r3
   14614:	687b      	ldr	r3, [r7, #4]
   14616:	4413      	add	r3, r2
   14618:	683a      	ldr	r2, [r7, #0]
   1461a:	6852      	ldr	r2, [r2, #4]
   1461c:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
   1461e:	687b      	ldr	r3, [r7, #4]
   14620:	4618      	mov	r0, r3
   14622:	370c      	adds	r7, #12
   14624:	46bd      	mov	sp, r7
   14626:	bc80      	pop	{r7}
   14628:	4770      	bx	lr

0001462a <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   1462a:	b590      	push	{r4, r7, lr}
   1462c:	b085      	sub	sp, #20
   1462e:	af00      	add	r7, sp, #0
   14630:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   14632:	687b      	ldr	r3, [r7, #4]
   14634:	681b      	ldr	r3, [r3, #0]
   14636:	3308      	adds	r3, #8
   14638:	681c      	ldr	r4, [r3, #0]
   1463a:	687b      	ldr	r3, [r7, #4]
   1463c:	681b      	ldr	r3, [r3, #0]
   1463e:	3b0c      	subs	r3, #12
   14640:	681b      	ldr	r3, [r3, #0]
   14642:	461a      	mov	r2, r3
   14644:	687b      	ldr	r3, [r7, #4]
   14646:	4413      	add	r3, r2
   14648:	681b      	ldr	r3, [r3, #0]
   1464a:	3304      	adds	r3, #4
   1464c:	681b      	ldr	r3, [r3, #0]
   1464e:	687a      	ldr	r2, [r7, #4]
   14650:	6812      	ldr	r2, [r2, #0]
   14652:	3a0c      	subs	r2, #12
   14654:	6812      	ldr	r2, [r2, #0]
   14656:	4611      	mov	r1, r2
   14658:	687a      	ldr	r2, [r7, #4]
   1465a:	440a      	add	r2, r1
   1465c:	f44f 7187 	mov.w	r1, #270	; 0x10e
   14660:	4610      	mov	r0, r2
   14662:	4798      	blx	r3
   14664:	4603      	mov	r3, r0
   14666:	4619      	mov	r1, r3
   14668:	6878      	ldr	r0, [r7, #4]
   1466a:	47a0      	blx	r4
   1466c:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
   1466e:	68fb      	ldr	r3, [r7, #12]
   14670:	0c9b      	lsrs	r3, r3, #18
   14672:	b2db      	uxtb	r3, r3
   14674:	f003 0303 	and.w	r3, r3, #3
   14678:	72fb      	strb	r3, [r7, #11]

	return key;
   1467a:	7afb      	ldrb	r3, [r7, #11]
}
   1467c:	4618      	mov	r0, r3
   1467e:	3714      	adds	r7, #20
   14680:	46bd      	mov	sp, r7
   14682:	bd90      	pop	{r4, r7, pc}

00014684 <_ZN14Protocol_Class12MakeLabel374Emf>:
	data=(0x1ffffc00&d)>>10;
	datagram.bit.dataField=data;

	return	data;
}
uint32_t Protocol_Class::MakeLabel374(uint32_t d,float v){
   14684:	b580      	push	{r7, lr}
   14686:	b084      	sub	sp, #16
   14688:	af00      	add	r7, sp, #0
   1468a:	60f8      	str	r0, [r7, #12]
   1468c:	60b9      	str	r1, [r7, #8]
   1468e:	607a      	str	r2, [r7, #4]
	value=d<<12;
   14690:	68bb      	ldr	r3, [r7, #8]
   14692:	031a      	lsls	r2, r3, #12
   14694:	68fb      	ldr	r3, [r7, #12]
   14696:	60da      	str	r2, [r3, #12]
	label=Label2Byte(374);
   14698:	68fb      	ldr	r3, [r7, #12]
   1469a:	681b      	ldr	r3, [r3, #0]
   1469c:	3b0c      	subs	r3, #12
   1469e:	681b      	ldr	r3, [r3, #0]
   146a0:	461a      	mov	r2, r3
   146a2:	68fb      	ldr	r3, [r7, #12]
   146a4:	4413      	add	r3, r2
   146a6:	681b      	ldr	r3, [r3, #0]
   146a8:	3304      	adds	r3, #4
   146aa:	681b      	ldr	r3, [r3, #0]
   146ac:	68fa      	ldr	r2, [r7, #12]
   146ae:	6812      	ldr	r2, [r2, #0]
   146b0:	3a0c      	subs	r2, #12
   146b2:	6812      	ldr	r2, [r2, #0]
   146b4:	4611      	mov	r1, r2
   146b6:	68fa      	ldr	r2, [r7, #12]
   146b8:	440a      	add	r2, r1
   146ba:	f44f 71bb 	mov.w	r1, #374	; 0x176
   146be:	4610      	mov	r0, r2
   146c0:	4798      	blx	r3
   146c2:	4603      	mov	r3, r0
   146c4:	461a      	mov	r2, r3
   146c6:	68fb      	ldr	r3, [r7, #12]
   146c8:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   146ca:	68fb      	ldr	r3, [r7, #12]
   146cc:	68db      	ldr	r3, [r3, #12]
   146ce:	68fa      	ldr	r2, [r7, #12]
   146d0:	7c12      	ldrb	r2, [r2, #16]
   146d2:	431a      	orrs	r2, r3
   146d4:	68fb      	ldr	r3, [r7, #12]
   146d6:	60da      	str	r2, [r3, #12]
	if (v<0)
   146d8:	4b0e      	ldr	r3, [pc, #56]	; (14714 <_ZN14Protocol_Class12MakeLabel374Emf+0x90>)
   146da:	f04f 0100 	mov.w	r1, #0
   146de:	6878      	ldr	r0, [r7, #4]
   146e0:	4798      	blx	r3
   146e2:	4603      	mov	r3, r0
   146e4:	2b00      	cmp	r3, #0
   146e6:	d005      	beq.n	146f4 <_ZN14Protocol_Class12MakeLabel374Emf+0x70>
	{
		value|=0x1<<28;
   146e8:	68fb      	ldr	r3, [r7, #12]
   146ea:	68db      	ldr	r3, [r3, #12]
   146ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
   146f0:	68fb      	ldr	r3, [r7, #12]
   146f2:	60da      	str	r2, [r3, #12]
	}
	value=MakeEvenParity(value);
   146f4:	68fb      	ldr	r3, [r7, #12]
   146f6:	68db      	ldr	r3, [r3, #12]
   146f8:	4619      	mov	r1, r3
   146fa:	68f8      	ldr	r0, [r7, #12]
   146fc:	4b06      	ldr	r3, [pc, #24]	; (14718 <_ZN14Protocol_Class12MakeLabel374Emf+0x94>)
   146fe:	4798      	blx	r3
   14700:	4602      	mov	r2, r0
   14702:	68fb      	ldr	r3, [r7, #12]
   14704:	60da      	str	r2, [r3, #12]
	return value;
   14706:	68fb      	ldr	r3, [r7, #12]
   14708:	68db      	ldr	r3, [r3, #12]
	
}
   1470a:	4618      	mov	r0, r3
   1470c:	3710      	adds	r7, #16
   1470e:	46bd      	mov	sp, r7
   14710:	bd80      	pop	{r7, pc}
   14712:	bf00      	nop
   14714:	0001be1d 	.word	0x0001be1d
   14718:	00014809 	.word	0x00014809

0001471c <_ZN14Protocol_Class14MakeTXLabel275Eh>:
uint32_t Protocol_Class::MakeTXLabel275(uint8_t d){
   1471c:	b580      	push	{r7, lr}
   1471e:	b082      	sub	sp, #8
   14720:	af00      	add	r7, sp, #0
   14722:	6078      	str	r0, [r7, #4]
   14724:	460b      	mov	r3, r1
   14726:	70fb      	strb	r3, [r7, #3]
	value=((uint32_t)d)<<10;
   14728:	78fb      	ldrb	r3, [r7, #3]
   1472a:	029a      	lsls	r2, r3, #10
   1472c:	687b      	ldr	r3, [r7, #4]
   1472e:	60da      	str	r2, [r3, #12]
	label=Label2Byte(275);
   14730:	687b      	ldr	r3, [r7, #4]
   14732:	681b      	ldr	r3, [r3, #0]
   14734:	3b0c      	subs	r3, #12
   14736:	681b      	ldr	r3, [r3, #0]
   14738:	461a      	mov	r2, r3
   1473a:	687b      	ldr	r3, [r7, #4]
   1473c:	4413      	add	r3, r2
   1473e:	681b      	ldr	r3, [r3, #0]
   14740:	3304      	adds	r3, #4
   14742:	681b      	ldr	r3, [r3, #0]
   14744:	687a      	ldr	r2, [r7, #4]
   14746:	6812      	ldr	r2, [r2, #0]
   14748:	3a0c      	subs	r2, #12
   1474a:	6812      	ldr	r2, [r2, #0]
   1474c:	4611      	mov	r1, r2
   1474e:	687a      	ldr	r2, [r7, #4]
   14750:	440a      	add	r2, r1
   14752:	f240 1113 	movw	r1, #275	; 0x113
   14756:	4610      	mov	r0, r2
   14758:	4798      	blx	r3
   1475a:	4603      	mov	r3, r0
   1475c:	461a      	mov	r2, r3
   1475e:	687b      	ldr	r3, [r7, #4]
   14760:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   14762:	687b      	ldr	r3, [r7, #4]
   14764:	68db      	ldr	r3, [r3, #12]
   14766:	687a      	ldr	r2, [r7, #4]
   14768:	7c12      	ldrb	r2, [r2, #16]
   1476a:	431a      	orrs	r2, r3
   1476c:	687b      	ldr	r3, [r7, #4]
   1476e:	60da      	str	r2, [r3, #12]

	value=MakeEvenParity(value);
   14770:	687b      	ldr	r3, [r7, #4]
   14772:	68db      	ldr	r3, [r3, #12]
   14774:	4619      	mov	r1, r3
   14776:	6878      	ldr	r0, [r7, #4]
   14778:	4b05      	ldr	r3, [pc, #20]	; (14790 <_ZN14Protocol_Class14MakeTXLabel275Eh+0x74>)
   1477a:	4798      	blx	r3
   1477c:	4602      	mov	r2, r0
   1477e:	687b      	ldr	r3, [r7, #4]
   14780:	60da      	str	r2, [r3, #12]
	return value;
   14782:	687b      	ldr	r3, [r7, #4]
   14784:	68db      	ldr	r3, [r3, #12]
	
}
   14786:	4618      	mov	r0, r3
   14788:	3708      	adds	r7, #8
   1478a:	46bd      	mov	sp, r7
   1478c:	bd80      	pop	{r7, pc}
   1478e:	bf00      	nop
   14790:	00014809 	.word	0x00014809

00014794 <_ZN14Protocol_Class12MakeLabel270Em>:
uint32_t Protocol_Class::MakeLabel270(uint32_t d){
   14794:	b580      	push	{r7, lr}
   14796:	b082      	sub	sp, #8
   14798:	af00      	add	r7, sp, #0
   1479a:	6078      	str	r0, [r7, #4]
   1479c:	6039      	str	r1, [r7, #0]
	
	value=d<<10;
   1479e:	683b      	ldr	r3, [r7, #0]
   147a0:	029a      	lsls	r2, r3, #10
   147a2:	687b      	ldr	r3, [r7, #4]
   147a4:	60da      	str	r2, [r3, #12]
	label=Label2Byte(270);
   147a6:	687b      	ldr	r3, [r7, #4]
   147a8:	681b      	ldr	r3, [r3, #0]
   147aa:	3b0c      	subs	r3, #12
   147ac:	681b      	ldr	r3, [r3, #0]
   147ae:	461a      	mov	r2, r3
   147b0:	687b      	ldr	r3, [r7, #4]
   147b2:	4413      	add	r3, r2
   147b4:	681b      	ldr	r3, [r3, #0]
   147b6:	3304      	adds	r3, #4
   147b8:	681b      	ldr	r3, [r3, #0]
   147ba:	687a      	ldr	r2, [r7, #4]
   147bc:	6812      	ldr	r2, [r2, #0]
   147be:	3a0c      	subs	r2, #12
   147c0:	6812      	ldr	r2, [r2, #0]
   147c2:	4611      	mov	r1, r2
   147c4:	687a      	ldr	r2, [r7, #4]
   147c6:	440a      	add	r2, r1
   147c8:	f44f 7187 	mov.w	r1, #270	; 0x10e
   147cc:	4610      	mov	r0, r2
   147ce:	4798      	blx	r3
   147d0:	4603      	mov	r3, r0
   147d2:	461a      	mov	r2, r3
   147d4:	687b      	ldr	r3, [r7, #4]
   147d6:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   147d8:	687b      	ldr	r3, [r7, #4]
   147da:	68db      	ldr	r3, [r3, #12]
   147dc:	687a      	ldr	r2, [r7, #4]
   147de:	7c12      	ldrb	r2, [r2, #16]
   147e0:	431a      	orrs	r2, r3
   147e2:	687b      	ldr	r3, [r7, #4]
   147e4:	60da      	str	r2, [r3, #12]
//	value|=(uint32_t)(((uint8_t)WavingValue()))<<19;
	value=MakeEvenParity(value);
   147e6:	687b      	ldr	r3, [r7, #4]
   147e8:	68db      	ldr	r3, [r3, #12]
   147ea:	4619      	mov	r1, r3
   147ec:	6878      	ldr	r0, [r7, #4]
   147ee:	4b05      	ldr	r3, [pc, #20]	; (14804 <_ZN14Protocol_Class12MakeLabel270Em+0x70>)
   147f0:	4798      	blx	r3
   147f2:	4602      	mov	r2, r0
   147f4:	687b      	ldr	r3, [r7, #4]
   147f6:	60da      	str	r2, [r3, #12]
	return value;
   147f8:	687b      	ldr	r3, [r7, #4]
   147fa:	68db      	ldr	r3, [r3, #12]
	
}
   147fc:	4618      	mov	r0, r3
   147fe:	3708      	adds	r7, #8
   14800:	46bd      	mov	sp, r7
   14802:	bd80      	pop	{r7, pc}
   14804:	00014809 	.word	0x00014809

00014808 <_ZN14Protocol_Class14MakeEvenParityEm>:
uint32_t Protocol_Class::MakeEvenParity(uint32_t data){
   14808:	b580      	push	{r7, lr}
   1480a:	b082      	sub	sp, #8
   1480c:	af00      	add	r7, sp, #0
   1480e:	6078      	str	r0, [r7, #4]
   14810:	6039      	str	r1, [r7, #0]
	if (FindParity(data))
   14812:	687b      	ldr	r3, [r7, #4]
   14814:	681b      	ldr	r3, [r3, #0]
   14816:	3b0c      	subs	r3, #12
   14818:	681b      	ldr	r3, [r3, #0]
   1481a:	461a      	mov	r2, r3
   1481c:	687b      	ldr	r3, [r7, #4]
   1481e:	4413      	add	r3, r2
   14820:	6839      	ldr	r1, [r7, #0]
   14822:	4618      	mov	r0, r3
   14824:	4b06      	ldr	r3, [pc, #24]	; (14840 <_ZN14Protocol_Class14MakeEvenParityEm+0x38>)
   14826:	4798      	blx	r3
   14828:	4603      	mov	r3, r0
   1482a:	2b00      	cmp	r3, #0
   1482c:	d003      	beq.n	14836 <_ZN14Protocol_Class14MakeEvenParityEm+0x2e>
	{
		data|=0x01<<31;
   1482e:	683b      	ldr	r3, [r7, #0]
   14830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14834:	603b      	str	r3, [r7, #0]
	} 
	else
	{
		
	}
	return data;
   14836:	683b      	ldr	r3, [r7, #0]
}
   14838:	4618      	mov	r0, r3
   1483a:	3708      	adds	r7, #8
   1483c:	46bd      	mov	sp, r7
   1483e:	bd80      	pop	{r7, pc}
   14840:	0001327d 	.word	0x0001327d

00014844 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   14844:	b480      	push	{r7}
   14846:	b083      	sub	sp, #12
   14848:	af00      	add	r7, sp, #0
   1484a:	6078      	str	r0, [r7, #4]
    return (void *)0;
   1484c:	2300      	movs	r3, #0
	}
   1484e:	4618      	mov	r0, r3
   14850:	370c      	adds	r7, #12
   14852:	46bd      	mov	sp, r7
   14854:	bc80      	pop	{r7}
   14856:	4770      	bx	lr

00014858 <free>:
//............................................................................
extern "C" void free(void *)
	{
   14858:	b480      	push	{r7}
   1485a:	b083      	sub	sp, #12
   1485c:	af00      	add	r7, sp, #0
   1485e:	6078      	str	r0, [r7, #4]
	}
   14860:	bf00      	nop
   14862:	370c      	adds	r7, #12
   14864:	46bd      	mov	sp, r7
   14866:	bc80      	pop	{r7}
   14868:	4770      	bx	lr

0001486a <_sbrk>:

extern "C" void *_sbrk (ptrdiff_t)
	{
   1486a:	b480      	push	{r7}
   1486c:	b083      	sub	sp, #12
   1486e:	af00      	add	r7, sp, #0
   14870:	6078      	str	r0, [r7, #4]
    return (void *)0;
   14872:	2300      	movs	r3, #0
	}
   14874:	4618      	mov	r0, r3
   14876:	370c      	adds	r7, #12
   14878:	46bd      	mov	sp, r7
   1487a:	bc80      	pop	{r7}
   1487c:	4770      	bx	lr

0001487e <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   1487e:	b480      	push	{r7}
   14880:	af00      	add	r7, sp, #0
		}
   14882:	bf00      	nop
   14884:	46bd      	mov	sp, r7
   14886:	bc80      	pop	{r7}
   14888:	4770      	bx	lr
	...

0001488c <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   1488c:	b580      	push	{r7, lr}
   1488e:	b082      	sub	sp, #8
   14890:	af00      	add	r7, sp, #0
   14892:	6078      	str	r0, [r7, #4]
	free(p);
   14894:	6878      	ldr	r0, [r7, #4]
   14896:	4b03      	ldr	r3, [pc, #12]	; (148a4 <_ZdlPv+0x18>)
   14898:	4798      	blx	r3
	}
   1489a:	bf00      	nop
   1489c:	3708      	adds	r7, #8
   1489e:	46bd      	mov	sp, r7
   148a0:	bd80      	pop	{r7, pc}
   148a2:	bf00      	nop
   148a4:	00014859 	.word	0x00014859

000148a8 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
   148a8:	b480      	push	{r7}
   148aa:	b083      	sub	sp, #12
   148ac:	af00      	add	r7, sp, #0
   148ae:	6078      	str	r0, [r7, #4]
   148b0:	687b      	ldr	r3, [r7, #4]
   148b2:	4618      	mov	r0, r3
   148b4:	370c      	adds	r7, #12
   148b6:	46bd      	mov	sp, r7
   148b8:	bc80      	pop	{r7}
   148ba:	4770      	bx	lr

000148bc <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
   148bc:	b480      	push	{r7}
   148be:	b083      	sub	sp, #12
   148c0:	af00      	add	r7, sp, #0
   148c2:	6078      	str	r0, [r7, #4]
   148c4:	687b      	ldr	r3, [r7, #4]
   148c6:	4618      	mov	r0, r3
   148c8:	370c      	adds	r7, #12
   148ca:	46bd      	mov	sp, r7
   148cc:	bc80      	pop	{r7}
   148ce:	4770      	bx	lr

000148d0 <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
   148d0:	b580      	push	{r7, lr}
   148d2:	b084      	sub	sp, #16
   148d4:	af00      	add	r7, sp, #0
   148d6:	6078      	str	r0, [r7, #4]
   148d8:	460b      	mov	r3, r1
   148da:	70fb      	strb	r3, [r7, #3]
   148dc:	4613      	mov	r3, r2
   148de:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
   148e0:	687b      	ldr	r3, [r7, #4]
   148e2:	78fa      	ldrb	r2, [r7, #3]
   148e4:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
   148e6:	78bb      	ldrb	r3, [r7, #2]
   148e8:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
   148ea:	7bfb      	ldrb	r3, [r7, #15]
   148ec:	2b00      	cmp	r3, #0
   148ee:	f000 80ba 	beq.w	14a66 <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
   148f2:	78fb      	ldrb	r3, [r7, #3]
   148f4:	2b14      	cmp	r3, #20
   148f6:	f200 80a2 	bhi.w	14a3e <_ZN11Diagnostics12troubleshootEhb+0x16e>
   148fa:	a201      	add	r2, pc, #4	; (adr r2, 14900 <_ZN11Diagnostics12troubleshootEhb+0x30>)
   148fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14900:	00014955 	.word	0x00014955
   14904:	00014969 	.word	0x00014969
   14908:	00014973 	.word	0x00014973
   1490c:	0001497d 	.word	0x0001497d
   14910:	00014987 	.word	0x00014987
   14914:	00014999 	.word	0x00014999
   14918:	000149a3 	.word	0x000149a3
   1491c:	000149b5 	.word	0x000149b5
   14920:	000149c7 	.word	0x000149c7
   14924:	000149db 	.word	0x000149db
   14928:	000149e5 	.word	0x000149e5
   1492c:	0001495f 	.word	0x0001495f
   14930:	000149d1 	.word	0x000149d1
   14934:	000149ef 	.word	0x000149ef
   14938:	000149f9 	.word	0x000149f9
   1493c:	00014a03 	.word	0x00014a03
   14940:	00014a0d 	.word	0x00014a0d
   14944:	00014a17 	.word	0x00014a17
   14948:	00014a21 	.word	0x00014a21
   1494c:	00014a2b 	.word	0x00014a2b
   14950:	00014a35 	.word	0x00014a35
      case SUCCESS:
      usb.println(F("Function executed successfully"));
   14954:	4946      	ldr	r1, [pc, #280]	; (14a70 <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
   14956:	4847      	ldr	r0, [pc, #284]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14958:	4b47      	ldr	r3, [pc, #284]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1495a:	4798      	blx	r3
      break;
   1495c:	e074      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
   1495e:	4947      	ldr	r1, [pc, #284]	; (14a7c <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
   14960:	4844      	ldr	r0, [pc, #272]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14962:	4b45      	ldr	r3, [pc, #276]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14964:	4798      	blx	r3
      break;
   14966:	e06f      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
   14968:	4945      	ldr	r1, [pc, #276]	; (14a80 <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
   1496a:	4842      	ldr	r0, [pc, #264]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1496c:	4b42      	ldr	r3, [pc, #264]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1496e:	4798      	blx	r3
      break;
   14970:	e06a      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
   14972:	4944      	ldr	r1, [pc, #272]	; (14a84 <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
   14974:	483f      	ldr	r0, [pc, #252]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14976:	4b40      	ldr	r3, [pc, #256]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14978:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
   1497a:	e065      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
   1497c:	4942      	ldr	r1, [pc, #264]	; (14a88 <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
   1497e:	483d      	ldr	r0, [pc, #244]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14980:	4b3d      	ldr	r3, [pc, #244]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14982:	4798      	blx	r3
      break;
   14984:	e060      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
   14986:	4941      	ldr	r1, [pc, #260]	; (14a8c <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
   14988:	483a      	ldr	r0, [pc, #232]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1498a:	4b3b      	ldr	r3, [pc, #236]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1498c:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
   1498e:	4940      	ldr	r1, [pc, #256]	; (14a90 <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
   14990:	4838      	ldr	r0, [pc, #224]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14992:	4b39      	ldr	r3, [pc, #228]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14994:	4798      	blx	r3
      break;
   14996:	e057      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
   14998:	493e      	ldr	r1, [pc, #248]	; (14a94 <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
   1499a:	4836      	ldr	r0, [pc, #216]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1499c:	4b36      	ldr	r3, [pc, #216]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1499e:	4798      	blx	r3
      break;
   149a0:	e052      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
   149a2:	493d      	ldr	r1, [pc, #244]	; (14a98 <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
   149a4:	4833      	ldr	r0, [pc, #204]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149a6:	4b34      	ldr	r3, [pc, #208]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   149a8:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
   149aa:	493c      	ldr	r1, [pc, #240]	; (14a9c <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
   149ac:	4831      	ldr	r0, [pc, #196]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149ae:	4b32      	ldr	r3, [pc, #200]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   149b0:	4798      	blx	r3
      break;
   149b2:	e049      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
   149b4:	493a      	ldr	r1, [pc, #232]	; (14aa0 <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
   149b6:	482f      	ldr	r0, [pc, #188]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149b8:	4b2f      	ldr	r3, [pc, #188]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   149ba:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
   149bc:	4939      	ldr	r1, [pc, #228]	; (14aa4 <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
   149be:	482d      	ldr	r0, [pc, #180]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149c0:	4b2d      	ldr	r3, [pc, #180]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   149c2:	4798      	blx	r3
      break;
   149c4:	e040      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
   149c6:	4938      	ldr	r1, [pc, #224]	; (14aa8 <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
   149c8:	482a      	ldr	r0, [pc, #168]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149ca:	4b2b      	ldr	r3, [pc, #172]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   149cc:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
   149ce:	e03b      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
   149d0:	4936      	ldr	r1, [pc, #216]	; (14aac <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
   149d2:	4828      	ldr	r0, [pc, #160]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149d4:	4b28      	ldr	r3, [pc, #160]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   149d6:	4798      	blx	r3
      break;
   149d8:	e036      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
   149da:	4935      	ldr	r1, [pc, #212]	; (14ab0 <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
   149dc:	4825      	ldr	r0, [pc, #148]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149de:	4b26      	ldr	r3, [pc, #152]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   149e0:	4798      	blx	r3
      break;
   149e2:	e031      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
   149e4:	4933      	ldr	r1, [pc, #204]	; (14ab4 <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
   149e6:	4823      	ldr	r0, [pc, #140]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149e8:	4b23      	ldr	r3, [pc, #140]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   149ea:	4798      	blx	r3
      break;
   149ec:	e02c      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
   149ee:	4932      	ldr	r1, [pc, #200]	; (14ab8 <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
   149f0:	4820      	ldr	r0, [pc, #128]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149f2:	4b21      	ldr	r3, [pc, #132]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   149f4:	4798      	blx	r3
      break;
   149f6:	e027      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
   149f8:	4930      	ldr	r1, [pc, #192]	; (14abc <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
   149fa:	481e      	ldr	r0, [pc, #120]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149fc:	4b1e      	ldr	r3, [pc, #120]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   149fe:	4798      	blx	r3
      break;
   14a00:	e022      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
   14a02:	492f      	ldr	r1, [pc, #188]	; (14ac0 <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
   14a04:	481b      	ldr	r0, [pc, #108]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a06:	4b1c      	ldr	r3, [pc, #112]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a08:	4798      	blx	r3
      break;
   14a0a:	e01d      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
   14a0c:	492d      	ldr	r1, [pc, #180]	; (14ac4 <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
   14a0e:	4819      	ldr	r0, [pc, #100]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a10:	4b19      	ldr	r3, [pc, #100]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a12:	4798      	blx	r3
      break;
   14a14:	e018      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
   14a16:	492c      	ldr	r1, [pc, #176]	; (14ac8 <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
   14a18:	4816      	ldr	r0, [pc, #88]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a1a:	4b17      	ldr	r3, [pc, #92]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a1c:	4798      	blx	r3
      break;
   14a1e:	e013      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
   14a20:	492a      	ldr	r1, [pc, #168]	; (14acc <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
   14a22:	4814      	ldr	r0, [pc, #80]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a24:	4b14      	ldr	r3, [pc, #80]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a26:	4798      	blx	r3
      break;
   14a28:	e00e      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
   14a2a:	4929      	ldr	r1, [pc, #164]	; (14ad0 <_ZN11Diagnostics12troubleshootEhb+0x200>)
   14a2c:	4811      	ldr	r0, [pc, #68]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a2e:	4b12      	ldr	r3, [pc, #72]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a30:	4798      	blx	r3
      break;
   14a32:	e009      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
   14a34:	4927      	ldr	r1, [pc, #156]	; (14ad4 <_ZN11Diagnostics12troubleshootEhb+0x204>)
   14a36:	480f      	ldr	r0, [pc, #60]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a38:	4b0f      	ldr	r3, [pc, #60]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a3a:	4798      	blx	r3
      break;
   14a3c:	e004      	b.n	14a48 <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
   14a3e:	4926      	ldr	r1, [pc, #152]	; (14ad8 <_ZN11Diagnostics12troubleshootEhb+0x208>)
   14a40:	480c      	ldr	r0, [pc, #48]	; (14a74 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a42:	4b0d      	ldr	r3, [pc, #52]	; (14a78 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a44:	4798      	blx	r3
      break;
   14a46:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
   14a48:	78fb      	ldrb	r3, [r7, #3]
   14a4a:	2b0a      	cmp	r3, #10
   14a4c:	d008      	beq.n	14a60 <_ZN11Diagnostics12troubleshootEhb+0x190>
   14a4e:	78fb      	ldrb	r3, [r7, #3]
   14a50:	2b06      	cmp	r3, #6
   14a52:	d005      	beq.n	14a60 <_ZN11Diagnostics12troubleshootEhb+0x190>
   14a54:	78fb      	ldrb	r3, [r7, #3]
   14a56:	2b02      	cmp	r3, #2
   14a58:	d002      	beq.n	14a60 <_ZN11Diagnostics12troubleshootEhb+0x190>
   14a5a:	78fb      	ldrb	r3, [r7, #3]
   14a5c:	2b0b      	cmp	r3, #11
   14a5e:	d102      	bne.n	14a66 <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
   14a60:	6878      	ldr	r0, [r7, #4]
   14a62:	4b1e      	ldr	r3, [pc, #120]	; (14adc <_ZN11Diagnostics12troubleshootEhb+0x20c>)
   14a64:	4798      	blx	r3
    }
  #endif
  }
}
   14a66:	bf00      	nop
   14a68:	3710      	adds	r7, #16
   14a6a:	46bd      	mov	sp, r7
   14a6c:	bd80      	pop	{r7, pc}
   14a6e:	bf00      	nop
   14a70:	00021974 	.word	0x00021974
   14a74:	2000a368 	.word	0x2000a368
   14a78:	00018515 	.word	0x00018515
   14a7c:	00021994 	.word	0x00021994
   14a80:	000219c8 	.word	0x000219c8
   14a84:	00021a08 	.word	0x00021a08
   14a88:	00021a48 	.word	0x00021a48
   14a8c:	00021ae0 	.word	0x00021ae0
   14a90:	00021af0 	.word	0x00021af0
   14a94:	00021b20 	.word	0x00021b20
   14a98:	00021b6c 	.word	0x00021b6c
   14a9c:	00021b90 	.word	0x00021b90
   14aa0:	00021bd4 	.word	0x00021bd4
   14aa4:	00021bf8 	.word	0x00021bf8
   14aa8:	00021c34 	.word	0x00021c34
   14aac:	00021c84 	.word	0x00021c84
   14ab0:	00021cc4 	.word	0x00021cc4
   14ab4:	00021ce8 	.word	0x00021ce8
   14ab8:	00021d10 	.word	0x00021d10
   14abc:	00021d34 	.word	0x00021d34
   14ac0:	00021d5c 	.word	0x00021d5c
   14ac4:	00021d80 	.word	0x00021d80
   14ac8:	00021da8 	.word	0x00021da8
   14acc:	00021df4 	.word	0x00021df4
   14ad0:	00021e44 	.word	0x00021e44
   14ad4:	00021e94 	.word	0x00021e94
   14ad8:	00021ec8 	.word	0x00021ec8
   14adc:	00014ae1 	.word	0x00014ae1

00014ae0 <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
   14ae0:	b580      	push	{r7, lr}
   14ae2:	b082      	sub	sp, #8
   14ae4:	af00      	add	r7, sp, #0
   14ae6:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
   14ae8:	4905      	ldr	r1, [pc, #20]	; (14b00 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
   14aea:	4806      	ldr	r0, [pc, #24]	; (14b04 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   14aec:	4b06      	ldr	r3, [pc, #24]	; (14b08 <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
   14aee:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
   14af0:	4906      	ldr	r1, [pc, #24]	; (14b0c <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
   14af2:	4804      	ldr	r0, [pc, #16]	; (14b04 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   14af4:	4b06      	ldr	r3, [pc, #24]	; (14b10 <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
   14af6:	4798      	blx	r3
}
   14af8:	bf00      	nop
   14afa:	3708      	adds	r7, #8
   14afc:	46bd      	mov	sp, r7
   14afe:	bd80      	pop	{r7, pc}
   14b00:	00021eec 	.word	0x00021eec
   14b04:	2000a368 	.word	0x2000a368
   14b08:	00018469 	.word	0x00018469
   14b0c:	00021f20 	.word	0x00021f20
   14b10:	00018515 	.word	0x00018515

00014b14 <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
   14b14:	b580      	push	{r7, lr}
   14b16:	b082      	sub	sp, #8
   14b18:	af00      	add	r7, sp, #0
   14b1a:	6078      	str	r0, [r7, #4]
   14b1c:	6039      	str	r1, [r7, #0]
   14b1e:	687b      	ldr	r3, [r7, #4]
   14b20:	2b01      	cmp	r3, #1
   14b22:	d10c      	bne.n	14b3e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   14b24:	683b      	ldr	r3, [r7, #0]
   14b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14b2a:	4293      	cmp	r3, r2
   14b2c:	d107      	bne.n	14b3e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   14b2e:	4806      	ldr	r0, [pc, #24]	; (14b48 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14b30:	4b06      	ldr	r3, [pc, #24]	; (14b4c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14b32:	4798      	blx	r3
   14b34:	4a06      	ldr	r2, [pc, #24]	; (14b50 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   14b36:	4907      	ldr	r1, [pc, #28]	; (14b54 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   14b38:	4803      	ldr	r0, [pc, #12]	; (14b48 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14b3a:	4b07      	ldr	r3, [pc, #28]	; (14b58 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   14b3c:	4798      	blx	r3
   14b3e:	bf00      	nop
   14b40:	3708      	adds	r7, #8
   14b42:	46bd      	mov	sp, r7
   14b44:	bd80      	pop	{r7, pc}
   14b46:	bf00      	nop
   14b48:	200091e0 	.word	0x200091e0
   14b4c:	000148a9 	.word	0x000148a9
   14b50:	20000000 	.word	0x20000000
   14b54:	000148bd 	.word	0x000148bd
   14b58:	00019d41 	.word	0x00019d41

00014b5c <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
   14b5c:	b580      	push	{r7, lr}
   14b5e:	af00      	add	r7, sp, #0
   14b60:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14b64:	2001      	movs	r0, #1
   14b66:	4b01      	ldr	r3, [pc, #4]	; (14b6c <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
   14b68:	4798      	blx	r3
   14b6a:	bd80      	pop	{r7, pc}
   14b6c:	00014b15 	.word	0x00014b15

00014b70 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   14b70:	b480      	push	{r7}
   14b72:	b083      	sub	sp, #12
   14b74:	af00      	add	r7, sp, #0
   14b76:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   14b78:	4b04      	ldr	r3, [pc, #16]	; (14b8c <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   14b7a:	681b      	ldr	r3, [r3, #0]
   14b7c:	2201      	movs	r2, #1
   14b7e:	741a      	strb	r2, [r3, #16]
}
   14b80:	bf00      	nop
   14b82:	370c      	adds	r7, #12
   14b84:	46bd      	mov	sp, r7
   14b86:	bc80      	pop	{r7}
   14b88:	4770      	bx	lr
   14b8a:	bf00      	nop
   14b8c:	200099e8 	.word	0x200099e8

00014b90 <_ZL15EventTimerTicksPK10timer_task>:

static void EventTimerTicks(const struct timer_task *const timer_task)
{
   14b90:	b480      	push	{r7}
   14b92:	b083      	sub	sp, #12
   14b94:	af00      	add	r7, sp, #0
   14b96:	6078      	str	r0, [r7, #4]
	eventTimer.ticks++;
   14b98:	4b04      	ldr	r3, [pc, #16]	; (14bac <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   14b9a:	689b      	ldr	r3, [r3, #8]
   14b9c:	3301      	adds	r3, #1
   14b9e:	4a03      	ldr	r2, [pc, #12]	; (14bac <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   14ba0:	6093      	str	r3, [r2, #8]
}
   14ba2:	bf00      	nop
   14ba4:	370c      	adds	r7, #12
   14ba6:	46bd      	mov	sp, r7
   14ba8:	bc80      	pop	{r7}
   14baa:	4770      	bx	lr
   14bac:	2000a2f4 	.word	0x2000a2f4

00014bb0 <_ZN18EventHandler_ClassC1Ev>:

// default constructor
EventHandler_Class::EventHandler_Class()
   14bb0:	b580      	push	{r7, lr}
   14bb2:	b082      	sub	sp, #8
   14bb4:	af00      	add	r7, sp, #0
   14bb6:	6078      	str	r0, [r7, #4]
   14bb8:	687b      	ldr	r3, [r7, #4]
   14bba:	4618      	mov	r0, r3
   14bbc:	4b06      	ldr	r3, [pc, #24]	; (14bd8 <_ZN18EventHandler_ClassC1Ev+0x28>)
   14bbe:	4798      	blx	r3
{
	ptrEventHandlerClass=this;
   14bc0:	4a06      	ldr	r2, [pc, #24]	; (14bdc <_ZN18EventHandler_ClassC1Ev+0x2c>)
   14bc2:	687b      	ldr	r3, [r7, #4]
   14bc4:	6013      	str	r3, [r2, #0]
	eventQueue = eventStorage;
   14bc6:	687b      	ldr	r3, [r7, #4]
   14bc8:	4a05      	ldr	r2, [pc, #20]	; (14be0 <_ZN18EventHandler_ClassC1Ev+0x30>)
   14bca:	631a      	str	r2, [r3, #48]	; 0x30
} //EventHandler_Class
   14bcc:	687b      	ldr	r3, [r7, #4]
   14bce:	4618      	mov	r0, r3
   14bd0:	3708      	adds	r7, #8
   14bd2:	46bd      	mov	sp, r7
   14bd4:	bd80      	pop	{r7, pc}
   14bd6:	bf00      	nop
   14bd8:	000003c5 	.word	0x000003c5
   14bdc:	200099e8 	.word	0x200099e8
   14be0:	200091e4 	.word	0x200091e4

00014be4 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   14be4:	b480      	push	{r7}
   14be6:	b083      	sub	sp, #12
   14be8:	af00      	add	r7, sp, #0
   14bea:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   14bec:	4a04      	ldr	r2, [pc, #16]	; (14c00 <_ZN18EventHandler_ClassD1Ev+0x1c>)
   14bee:	687b      	ldr	r3, [r7, #4]
   14bf0:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   14bf2:	687b      	ldr	r3, [r7, #4]
   14bf4:	4618      	mov	r0, r3
   14bf6:	370c      	adds	r7, #12
   14bf8:	46bd      	mov	sp, r7
   14bfa:	bc80      	pop	{r7}
   14bfc:	4770      	bx	lr
   14bfe:	bf00      	nop
   14c00:	200099e8 	.word	0x200099e8

00014c04 <_ZN18EventHandler_Class4InitEv>:



bool EventHandler_Class::Init(void)
{
   14c04:	b580      	push	{r7, lr}
   14c06:	b084      	sub	sp, #16
   14c08:	af00      	add	r7, sp, #0
   14c0a:	6078      	str	r0, [r7, #4]
	int16	i;
	eventTimeout=false;
   14c0c:	687b      	ldr	r3, [r7, #4]
   14c0e:	2200      	movs	r2, #0
   14c10:	741a      	strb	r2, [r3, #16]
	eventsInUse=0;
   14c12:	687b      	ldr	r3, [r7, #4]
   14c14:	2200      	movs	r2, #0
   14c16:	61da      	str	r2, [r3, #28]
	eventsInUsePeak=0;
   14c18:	687b      	ldr	r3, [r7, #4]
   14c1a:	2200      	movs	r2, #0
   14c1c:	621a      	str	r2, [r3, #32]
	eventCollisions=0;
   14c1e:	687b      	ldr	r3, [r7, #4]
   14c20:	2200      	movs	r2, #0
   14c22:	625a      	str	r2, [r3, #36]	; 0x24
	eventEvalCollisions=0;
   14c24:	687b      	ldr	r3, [r7, #4]
   14c26:	2200      	movs	r2, #0
   14c28:	629a      	str	r2, [r3, #40]	; 0x28
	eventQueueUnderflow=0;
   14c2a:	687b      	ldr	r3, [r7, #4]
   14c2c:	2200      	movs	r2, #0
   14c2e:	62da      	str	r2, [r3, #44]	; 0x2c

	usb << "initializeEvents\r";

	#endif

	for (i=1; i<sizeOfEventQueue; i++)
   14c30:	2301      	movs	r3, #1
   14c32:	81fb      	strh	r3, [r7, #14]
   14c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14c38:	2b7f      	cmp	r3, #127	; 0x7f
   14c3a:	dc1b      	bgt.n	14c74 <_ZN18EventHandler_Class4InitEv+0x70>
	{
		eventStorage[i].next = (event*)NULL;
   14c3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14c40:	4a15      	ldr	r2, [pc, #84]	; (14c98 <_ZN18EventHandler_Class4InitEv+0x94>)
   14c42:	011b      	lsls	r3, r3, #4
   14c44:	4413      	add	r3, r2
   14c46:	330c      	adds	r3, #12
   14c48:	2200      	movs	r2, #0
   14c4a:	601a      	str	r2, [r3, #0]
		eventStorage[i-1].next = &eventStorage[i];
   14c4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14c50:	3b01      	subs	r3, #1
   14c52:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
   14c56:	0112      	lsls	r2, r2, #4
   14c58:	490f      	ldr	r1, [pc, #60]	; (14c98 <_ZN18EventHandler_Class4InitEv+0x94>)
   14c5a:	440a      	add	r2, r1
   14c5c:	490e      	ldr	r1, [pc, #56]	; (14c98 <_ZN18EventHandler_Class4InitEv+0x94>)
   14c5e:	011b      	lsls	r3, r3, #4
   14c60:	440b      	add	r3, r1
   14c62:	330c      	adds	r3, #12
   14c64:	601a      	str	r2, [r3, #0]
	for (i=1; i<sizeOfEventQueue; i++)
   14c66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14c6a:	b29b      	uxth	r3, r3
   14c6c:	3301      	adds	r3, #1
   14c6e:	b29b      	uxth	r3, r3
   14c70:	81fb      	strh	r3, [r7, #14]
   14c72:	e7df      	b.n	14c34 <_ZN18EventHandler_Class4InitEv+0x30>
	}
	isOK=eventTimer.Init();
   14c74:	4809      	ldr	r0, [pc, #36]	; (14c9c <_ZN18EventHandler_Class4InitEv+0x98>)
   14c76:	4b0a      	ldr	r3, [pc, #40]	; (14ca0 <_ZN18EventHandler_Class4InitEv+0x9c>)
   14c78:	4798      	blx	r3
   14c7a:	4603      	mov	r3, r0
   14c7c:	461a      	mov	r2, r3
   14c7e:	687b      	ldr	r3, [r7, #4]
   14c80:	761a      	strb	r2, [r3, #24]
	eventTimer.Start_periodic_task(FUNC_PTR(EventTimerTicks),1);
   14c82:	2201      	movs	r2, #1
   14c84:	4907      	ldr	r1, [pc, #28]	; (14ca4 <_ZN18EventHandler_Class4InitEv+0xa0>)
   14c86:	4805      	ldr	r0, [pc, #20]	; (14c9c <_ZN18EventHandler_Class4InitEv+0x98>)
   14c88:	4b07      	ldr	r3, [pc, #28]	; (14ca8 <_ZN18EventHandler_Class4InitEv+0xa4>)
   14c8a:	4798      	blx	r3
	{
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
	return (bool)&eventStorage[0];
   14c8c:	2301      	movs	r3, #1
}
   14c8e:	4618      	mov	r0, r3
   14c90:	3710      	adds	r7, #16
   14c92:	46bd      	mov	sp, r7
   14c94:	bd80      	pop	{r7, pc}
   14c96:	bf00      	nop
   14c98:	200091e4 	.word	0x200091e4
   14c9c:	2000a2f4 	.word	0x2000a2f4
   14ca0:	00017a7d 	.word	0x00017a7d
   14ca4:	00014b91 	.word	0x00014b91
   14ca8:	00017b41 	.word	0x00017b41

00014cac <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   14cac:	b590      	push	{r4, r7, lr}
   14cae:	b087      	sub	sp, #28
   14cb0:	af02      	add	r7, sp, #8
   14cb2:	60f8      	str	r0, [r7, #12]
   14cb4:	60b9      	str	r1, [r7, #8]
   14cb6:	4611      	mov	r1, r2
   14cb8:	461a      	mov	r2, r3
   14cba:	460b      	mov	r3, r1
   14cbc:	80fb      	strh	r3, [r7, #6]
   14cbe:	4613      	mov	r3, r2
   14cc0:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   14cc2:	88b9      	ldrh	r1, [r7, #4]
   14cc4:	88fa      	ldrh	r2, [r7, #6]
   14cc6:	6a3b      	ldr	r3, [r7, #32]
   14cc8:	9300      	str	r3, [sp, #0]
   14cca:	460b      	mov	r3, r1
   14ccc:	68b9      	ldr	r1, [r7, #8]
   14cce:	68f8      	ldr	r0, [r7, #12]
   14cd0:	4c03      	ldr	r4, [pc, #12]	; (14ce0 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   14cd2:	47a0      	blx	r4
   14cd4:	4603      	mov	r3, r0
}
   14cd6:	4618      	mov	r0, r3
   14cd8:	3714      	adds	r7, #20
   14cda:	46bd      	mov	sp, r7
   14cdc:	bd90      	pop	{r4, r7, pc}
   14cde:	bf00      	nop
   14ce0:	00014ce5 	.word	0x00014ce5

00014ce4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   14ce4:	b590      	push	{r4, r7, lr}
   14ce6:	b089      	sub	sp, #36	; 0x24
   14ce8:	af00      	add	r7, sp, #0
   14cea:	60f8      	str	r0, [r7, #12]
   14cec:	60b9      	str	r1, [r7, #8]
   14cee:	4611      	mov	r1, r2
   14cf0:	461a      	mov	r2, r3
   14cf2:	460b      	mov	r3, r1
   14cf4:	80fb      	strh	r3, [r7, #6]
   14cf6:	4613      	mov	r3, r2
   14cf8:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   14cfa:	2300      	movs	r3, #0
   14cfc:	77fb      	strb	r3, [r7, #31]
	event*	queue;
	event*	queuePrev(NULL);
   14cfe:	2300      	movs	r3, #0
   14d00:	617b      	str	r3, [r7, #20]
	eventTimeout=false;
   14d02:	68fb      	ldr	r3, [r7, #12]
   14d04:	2200      	movs	r2, #0
   14d06:	741a      	strb	r2, [r3, #16]

	
	e.eventClass = eventClass;
   14d08:	68bb      	ldr	r3, [r7, #8]
   14d0a:	88fa      	ldrh	r2, [r7, #6]
   14d0c:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   14d0e:	68bb      	ldr	r3, [r7, #8]
   14d10:	88ba      	ldrh	r2, [r7, #4]
   14d12:	805a      	strh	r2, [r3, #2]

	
	if (timeout != forever){
   14d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14d16:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   14d1a:	4293      	cmp	r3, r2
   14d1c:	d006      	beq.n	14d2c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x48>
		eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,(uint32_t)timeout);
   14d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14d20:	461a      	mov	r2, r3
   14d22:	493a      	ldr	r1, [pc, #232]	; (14e0c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14d24:	483a      	ldr	r0, [pc, #232]	; (14e10 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14d26:	4b3b      	ldr	r3, [pc, #236]	; (14e14 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   14d28:	4798      	blx	r3
   14d2a:	e004      	b.n	14d36 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>

	}else{
		
			eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   14d2c:	2232      	movs	r2, #50	; 0x32
   14d2e:	4937      	ldr	r1, [pc, #220]	; (14e0c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14d30:	4837      	ldr	r0, [pc, #220]	; (14e10 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14d32:	4b38      	ldr	r3, [pc, #224]	; (14e14 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   14d34:	4798      	blx	r3
	}

	while (!result && (!eventTimeout))
   14d36:	7ffb      	ldrb	r3, [r7, #31]
   14d38:	f083 0301 	eor.w	r3, r3, #1
   14d3c:	b2db      	uxtb	r3, r3
   14d3e:	2b00      	cmp	r3, #0
   14d40:	d009      	beq.n	14d56 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   14d42:	68fb      	ldr	r3, [r7, #12]
   14d44:	7c1b      	ldrb	r3, [r3, #16]
   14d46:	b2db      	uxtb	r3, r3
   14d48:	f083 0301 	eor.w	r3, r3, #1
   14d4c:	b2db      	uxtb	r3, r3
   14d4e:	2b00      	cmp	r3, #0
   14d50:	d001      	beq.n	14d56 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   14d52:	2301      	movs	r3, #1
   14d54:	e000      	b.n	14d58 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x74>
   14d56:	2300      	movs	r3, #0
   14d58:	2b00      	cmp	r3, #0
   14d5a:	d04d      	beq.n	14df8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x114>
	{
		if (eventHandler)
   14d5c:	68fb      	ldr	r3, [r7, #12]
   14d5e:	695b      	ldr	r3, [r3, #20]
   14d60:	2b00      	cmp	r3, #0
   14d62:	d002      	beq.n	14d6a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x86>
		{
			eventHandler();
   14d64:	68fb      	ldr	r3, [r7, #12]
   14d66:	695b      	ldr	r3, [r3, #20]
   14d68:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   14d6a:	4b2b      	ldr	r3, [pc, #172]	; (14e18 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   14d6c:	681b      	ldr	r3, [r3, #0]
   14d6e:	61bb      	str	r3, [r7, #24]

		while (queue)
   14d70:	69bb      	ldr	r3, [r7, #24]
   14d72:	2b00      	cmp	r3, #0
   14d74:	d0df      	beq.n	14d36 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
		
			#endif
			if (((e.eventClass == kAnyEventClass) ||(queue->eventClass == e.eventClass))
   14d76:	68bb      	ldr	r3, [r7, #8]
   14d78:	881b      	ldrh	r3, [r3, #0]
   14d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14d7e:	4293      	cmp	r3, r2
   14d80:	d005      	beq.n	14d8e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xaa>
   14d82:	69bb      	ldr	r3, [r7, #24]
   14d84:	881a      	ldrh	r2, [r3, #0]
   14d86:	68bb      	ldr	r3, [r7, #8]
   14d88:	881b      	ldrh	r3, [r3, #0]
   14d8a:	429a      	cmp	r2, r3
   14d8c:	d12e      	bne.n	14dec <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			&& ((e.eventType == kAnyEventType) ||	(queue->eventType == e.eventType)))
   14d8e:	68bb      	ldr	r3, [r7, #8]
   14d90:	885b      	ldrh	r3, [r3, #2]
   14d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14d96:	4293      	cmp	r3, r2
   14d98:	d005      	beq.n	14da6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xc2>
   14d9a:	69bb      	ldr	r3, [r7, #24]
   14d9c:	885a      	ldrh	r2, [r3, #2]
   14d9e:	68bb      	ldr	r3, [r7, #8]
   14da0:	885b      	ldrh	r3, [r3, #2]
   14da2:	429a      	cmp	r2, r3
   14da4:	d122      	bne.n	14dec <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			{
				if (queuePrev)
   14da6:	697b      	ldr	r3, [r7, #20]
   14da8:	2b00      	cmp	r3, #0
   14daa:	d004      	beq.n	14db6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xd2>
				{
					queuePrev->next = queue->next;
   14dac:	69bb      	ldr	r3, [r7, #24]
   14dae:	68da      	ldr	r2, [r3, #12]
   14db0:	697b      	ldr	r3, [r7, #20]
   14db2:	60da      	str	r2, [r3, #12]
   14db4:	e003      	b.n	14dbe <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xda>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   14db6:	69bb      	ldr	r3, [r7, #24]
   14db8:	68db      	ldr	r3, [r3, #12]
   14dba:	4a17      	ldr	r2, [pc, #92]	; (14e18 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   14dbc:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   14dbe:	68ba      	ldr	r2, [r7, #8]
   14dc0:	69bb      	ldr	r3, [r7, #24]
   14dc2:	4614      	mov	r4, r2
   14dc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   14dca:	68fb      	ldr	r3, [r7, #12]
   14dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   14dce:	69bb      	ldr	r3, [r7, #24]
   14dd0:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   14dd2:	68fb      	ldr	r3, [r7, #12]
   14dd4:	69ba      	ldr	r2, [r7, #24]
   14dd6:	631a      	str	r2, [r3, #48]	; 0x30
				
				eventsInUse--;
   14dd8:	68fb      	ldr	r3, [r7, #12]
   14dda:	69db      	ldr	r3, [r3, #28]
   14ddc:	1e5a      	subs	r2, r3, #1
   14dde:	68fb      	ldr	r3, [r7, #12]
   14de0:	61da      	str	r2, [r3, #28]

				queue = NULL;
   14de2:	2300      	movs	r3, #0
   14de4:	61bb      	str	r3, [r7, #24]
				result = true;
   14de6:	2301      	movs	r3, #1
   14de8:	77fb      	strb	r3, [r7, #31]
   14dea:	e004      	b.n	14df6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x112>
			}
			else
			{
				queuePrev = queue;
   14dec:	69bb      	ldr	r3, [r7, #24]
   14dee:	617b      	str	r3, [r7, #20]
				queue = queue->next;
   14df0:	69bb      	ldr	r3, [r7, #24]
   14df2:	68db      	ldr	r3, [r3, #12]
   14df4:	61bb      	str	r3, [r7, #24]
		while (queue)
   14df6:	e7bb      	b.n	14d70 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x8c>
			//while (!eventTimeout);
		
		}
		
	}
	eventTimer.Remove_task(FUNC_PTR(EventTimerTask));
   14df8:	4904      	ldr	r1, [pc, #16]	; (14e0c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14dfa:	4805      	ldr	r0, [pc, #20]	; (14e10 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14dfc:	4b07      	ldr	r3, [pc, #28]	; (14e1c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x138>)
   14dfe:	4798      	blx	r3
	//eventTimer.stop();
	return result;
   14e00:	7ffb      	ldrb	r3, [r7, #31]
}
   14e02:	4618      	mov	r0, r3
   14e04:	3724      	adds	r7, #36	; 0x24
   14e06:	46bd      	mov	sp, r7
   14e08:	bd90      	pop	{r4, r7, pc}
   14e0a:	bf00      	nop
   14e0c:	00014b71 	.word	0x00014b71
   14e10:	2000a2f4 	.word	0x2000a2f4
   14e14:	00017c25 	.word	0x00017c25
   14e18:	200099e4 	.word	0x200099e4
   14e1c:	00017bb5 	.word	0x00017bb5

00014e20 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass>:

bool	EventHandler_Class::IsEventListed(EventType eventType, EventClass eventClass)
{
   14e20:	b480      	push	{r7}
   14e22:	b087      	sub	sp, #28
   14e24:	af00      	add	r7, sp, #0
   14e26:	6078      	str	r0, [r7, #4]
   14e28:	460b      	mov	r3, r1
   14e2a:	807b      	strh	r3, [r7, #2]
   14e2c:	4613      	mov	r3, r2
   14e2e:	803b      	strh	r3, [r7, #0]
	bool	result(false);
   14e30:	2300      	movs	r3, #0
   14e32:	75fb      	strb	r3, [r7, #23]
	event*	queue;
	event*	queuePrev(NULL);
   14e34:	2300      	movs	r3, #0
   14e36:	60fb      	str	r3, [r7, #12]

	if ((eventsInUse==0))
   14e38:	687b      	ldr	r3, [r7, #4]
   14e3a:	69db      	ldr	r3, [r3, #28]
   14e3c:	2b00      	cmp	r3, #0
   14e3e:	d102      	bne.n	14e46 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x26>
	{
		result = false;
   14e40:	2300      	movs	r3, #0
   14e42:	75fb      	strb	r3, [r7, #23]
   14e44:	e027      	b.n	14e96 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
	}
	else
	{
		queue = (event*)mainThreadEventQueue;
   14e46:	4b17      	ldr	r3, [pc, #92]	; (14ea4 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x84>)
   14e48:	681b      	ldr	r3, [r3, #0]
   14e4a:	613b      	str	r3, [r7, #16]
		while (queue)
   14e4c:	693b      	ldr	r3, [r7, #16]
   14e4e:	2b00      	cmp	r3, #0
   14e50:	d021      	beq.n	14e96 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
			
			#endif
			if (((eventClass == kAnyEventClass)|(queue->eventClass == eventClass)) && (queue->eventType == eventType))
   14e52:	883b      	ldrh	r3, [r7, #0]
   14e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14e58:	4293      	cmp	r3, r2
   14e5a:	bf0c      	ite	eq
   14e5c:	2301      	moveq	r3, #1
   14e5e:	2300      	movne	r3, #0
   14e60:	b2da      	uxtb	r2, r3
   14e62:	693b      	ldr	r3, [r7, #16]
   14e64:	881b      	ldrh	r3, [r3, #0]
   14e66:	8839      	ldrh	r1, [r7, #0]
   14e68:	4299      	cmp	r1, r3
   14e6a:	bf0c      	ite	eq
   14e6c:	2301      	moveq	r3, #1
   14e6e:	2300      	movne	r3, #0
   14e70:	b2db      	uxtb	r3, r3
   14e72:	4313      	orrs	r3, r2
   14e74:	b2db      	uxtb	r3, r3
   14e76:	2b00      	cmp	r3, #0
   14e78:	d007      	beq.n	14e8a <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
   14e7a:	693b      	ldr	r3, [r7, #16]
   14e7c:	885b      	ldrh	r3, [r3, #2]
   14e7e:	887a      	ldrh	r2, [r7, #2]
   14e80:	429a      	cmp	r2, r3
   14e82:	d102      	bne.n	14e8a <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
			{

				result = true;
   14e84:	2301      	movs	r3, #1
   14e86:	75fb      	strb	r3, [r7, #23]
				break;
   14e88:	e005      	b.n	14e96 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			}
			else
			{
				queuePrev = queue;
   14e8a:	693b      	ldr	r3, [r7, #16]
   14e8c:	60fb      	str	r3, [r7, #12]
				queue = queue->next;
   14e8e:	693b      	ldr	r3, [r7, #16]
   14e90:	68db      	ldr	r3, [r3, #12]
   14e92:	613b      	str	r3, [r7, #16]
		while (queue)
   14e94:	e7da      	b.n	14e4c <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x2c>
		
	}

	
	//eventTimer.stop();
	return result;
   14e96:	7dfb      	ldrb	r3, [r7, #23]
}
   14e98:	4618      	mov	r0, r3
   14e9a:	371c      	adds	r7, #28
   14e9c:	46bd      	mov	sp, r7
   14e9e:	bc80      	pop	{r7}
   14ea0:	4770      	bx	lr
   14ea2:	bf00      	nop
   14ea4:	200099e4 	.word	0x200099e4

00014ea8 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
}



void EventHandler_Class::SendEventSelf(const event& e)
{
   14ea8:	b580      	push	{r7, lr}
   14eaa:	b084      	sub	sp, #16
   14eac:	af00      	add	r7, sp, #0
   14eae:	6078      	str	r0, [r7, #4]
   14eb0:	6039      	str	r1, [r7, #0]
	if (IsEventListed(e.eventType,e.eventClass))
   14eb2:	683b      	ldr	r3, [r7, #0]
   14eb4:	8859      	ldrh	r1, [r3, #2]
   14eb6:	683b      	ldr	r3, [r7, #0]
   14eb8:	881b      	ldrh	r3, [r3, #0]
   14eba:	461a      	mov	r2, r3
   14ebc:	6878      	ldr	r0, [r7, #4]
   14ebe:	4b25      	ldr	r3, [pc, #148]	; (14f54 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xac>)
   14ec0:	4798      	blx	r3
   14ec2:	4603      	mov	r3, r0
   14ec4:	2b00      	cmp	r3, #0
   14ec6:	d140      	bne.n	14f4a <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
	{
		
	} 
	else
	{
		event*	theEvent(eventQueue);
   14ec8:	687b      	ldr	r3, [r7, #4]
   14eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14ecc:	60bb      	str	r3, [r7, #8]
		
		if (theEvent)
   14ece:	68bb      	ldr	r3, [r7, #8]
   14ed0:	2b00      	cmp	r3, #0
   14ed2:	d035      	beq.n	14f40 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>
		{
			eventQueue = eventQueue->next;
   14ed4:	687b      	ldr	r3, [r7, #4]
   14ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14ed8:	68da      	ldr	r2, [r3, #12]
   14eda:	687b      	ldr	r3, [r7, #4]
   14edc:	631a      	str	r2, [r3, #48]	; 0x30
			theEvent->next = NULL;
   14ede:	68bb      	ldr	r3, [r7, #8]
   14ee0:	2200      	movs	r2, #0
   14ee2:	60da      	str	r2, [r3, #12]
			eventsInUse++;
   14ee4:	687b      	ldr	r3, [r7, #4]
   14ee6:	69db      	ldr	r3, [r3, #28]
   14ee8:	1c5a      	adds	r2, r3, #1
   14eea:	687b      	ldr	r3, [r7, #4]
   14eec:	61da      	str	r2, [r3, #28]

			event*	threadQueue((event*)mainThreadEventQueue);
   14eee:	4b1a      	ldr	r3, [pc, #104]	; (14f58 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   14ef0:	681b      	ldr	r3, [r3, #0]
   14ef2:	60fb      	str	r3, [r7, #12]
			if (threadQueue == NULL)
   14ef4:	68fb      	ldr	r3, [r7, #12]
   14ef6:	2b00      	cmp	r3, #0
   14ef8:	d103      	bne.n	14f02 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
			mainThreadEventQueue = theEvent;
   14efa:	4a17      	ldr	r2, [pc, #92]	; (14f58 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   14efc:	68bb      	ldr	r3, [r7, #8]
   14efe:	6013      	str	r3, [r2, #0]
   14f00:	e00a      	b.n	14f18 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x70>
			else
			{
				while (threadQueue->next)
   14f02:	68fb      	ldr	r3, [r7, #12]
   14f04:	68db      	ldr	r3, [r3, #12]
   14f06:	2b00      	cmp	r3, #0
   14f08:	d003      	beq.n	14f12 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x6a>
				threadQueue = threadQueue->next;
   14f0a:	68fb      	ldr	r3, [r7, #12]
   14f0c:	68db      	ldr	r3, [r3, #12]
   14f0e:	60fb      	str	r3, [r7, #12]
				while (threadQueue->next)
   14f10:	e7f7      	b.n	14f02 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
				threadQueue->next = theEvent;
   14f12:	68fb      	ldr	r3, [r7, #12]
   14f14:	68ba      	ldr	r2, [r7, #8]
   14f16:	60da      	str	r2, [r3, #12]
				usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
				
			}
			#endif

			(*theEvent).eventClass = e.eventClass;
   14f18:	683b      	ldr	r3, [r7, #0]
   14f1a:	881a      	ldrh	r2, [r3, #0]
   14f1c:	68bb      	ldr	r3, [r7, #8]
   14f1e:	801a      	strh	r2, [r3, #0]
			(*theEvent).eventType = e.eventType;
   14f20:	683b      	ldr	r3, [r7, #0]
   14f22:	885a      	ldrh	r2, [r3, #2]
   14f24:	68bb      	ldr	r3, [r7, #8]
   14f26:	805a      	strh	r2, [r3, #2]
			(*theEvent).data = e.data;
   14f28:	68bb      	ldr	r3, [r7, #8]
   14f2a:	683a      	ldr	r2, [r7, #0]
   14f2c:	6892      	ldr	r2, [r2, #8]
   14f2e:	609a      	str	r2, [r3, #8]
			(*theEvent).timestamp = eventTimer.Get_ticks();
   14f30:	480a      	ldr	r0, [pc, #40]	; (14f5c <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb4>)
   14f32:	4b0b      	ldr	r3, [pc, #44]	; (14f60 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb8>)
   14f34:	4798      	blx	r3
   14f36:	4603      	mov	r3, r0
   14f38:	461a      	mov	r2, r3
   14f3a:	68bb      	ldr	r3, [r7, #8]
   14f3c:	605a      	str	r2, [r3, #4]
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	
}
   14f3e:	e004      	b.n	14f4a <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
			eventQueueUnderflow++;
   14f40:	687b      	ldr	r3, [r7, #4]
   14f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14f44:	1c5a      	adds	r2, r3, #1
   14f46:	687b      	ldr	r3, [r7, #4]
   14f48:	62da      	str	r2, [r3, #44]	; 0x2c
}
   14f4a:	bf00      	nop
   14f4c:	3710      	adds	r7, #16
   14f4e:	46bd      	mov	sp, r7
   14f50:	bd80      	pop	{r7, pc}
   14f52:	bf00      	nop
   14f54:	00014e21 	.word	0x00014e21
   14f58:	200099e4 	.word	0x200099e4
   14f5c:	2000a2f4 	.word	0x2000a2f4
   14f60:	00017c0d 	.word	0x00017c0d

00014f64 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendEventSelf(EventClass eventClass, EventType eventType, const eventData& data)
{
   14f64:	b580      	push	{r7, lr}
   14f66:	b088      	sub	sp, #32
   14f68:	af00      	add	r7, sp, #0
   14f6a:	60f8      	str	r0, [r7, #12]
   14f6c:	607b      	str	r3, [r7, #4]
   14f6e:	460b      	mov	r3, r1
   14f70:	817b      	strh	r3, [r7, #10]
   14f72:	4613      	mov	r3, r2
   14f74:	813b      	strh	r3, [r7, #8]
	event		theEvent;
   14f76:	f107 0310 	add.w	r3, r7, #16
   14f7a:	4618      	mov	r0, r3
   14f7c:	4b09      	ldr	r3, [pc, #36]	; (14fa4 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData+0x40>)
   14f7e:	4798      	blx	r3

	theEvent.eventClass = eventClass;
   14f80:	897b      	ldrh	r3, [r7, #10]
   14f82:	823b      	strh	r3, [r7, #16]
	theEvent.eventType = eventType;
   14f84:	893b      	ldrh	r3, [r7, #8]
   14f86:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   14f88:	687b      	ldr	r3, [r7, #4]
   14f8a:	681b      	ldr	r3, [r3, #0]
   14f8c:	61bb      	str	r3, [r7, #24]
	
	SendEventSelf(theEvent);
   14f8e:	f107 0310 	add.w	r3, r7, #16
   14f92:	4619      	mov	r1, r3
   14f94:	68f8      	ldr	r0, [r7, #12]
   14f96:	4b04      	ldr	r3, [pc, #16]	; (14fa8 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData+0x44>)
   14f98:	4798      	blx	r3
}
   14f9a:	bf00      	nop
   14f9c:	3720      	adds	r7, #32
   14f9e:	46bd      	mov	sp, r7
   14fa0:	bd80      	pop	{r7, pc}
   14fa2:	bf00      	nop
   14fa4:	000003c5 	.word	0x000003c5
   14fa8:	00014ea9 	.word	0x00014ea9

00014fac <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
   14fac:	b580      	push	{r7, lr}
   14fae:	b088      	sub	sp, #32
   14fb0:	af00      	add	r7, sp, #0
   14fb2:	60f8      	str	r0, [r7, #12]
   14fb4:	460b      	mov	r3, r1
   14fb6:	607a      	str	r2, [r7, #4]
   14fb8:	817b      	strh	r3, [r7, #10]
	event		theEvent;
   14fba:	f107 0310 	add.w	r3, r7, #16
   14fbe:	4618      	mov	r0, r3
   14fc0:	4b09      	ldr	r3, [pc, #36]	; (14fe8 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
   14fc2:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
   14fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14fc8:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(EventType)et ;
   14fca:	897b      	ldrh	r3, [r7, #10]
   14fcc:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   14fce:	687b      	ldr	r3, [r7, #4]
   14fd0:	681b      	ldr	r3, [r3, #0]
   14fd2:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
   14fd4:	f107 0310 	add.w	r3, r7, #16
   14fd8:	4619      	mov	r1, r3
   14fda:	68f8      	ldr	r0, [r7, #12]
   14fdc:	4b03      	ldr	r3, [pc, #12]	; (14fec <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
   14fde:	4798      	blx	r3
}
   14fe0:	bf00      	nop
   14fe2:	3720      	adds	r7, #32
   14fe4:	46bd      	mov	sp, r7
   14fe6:	bd80      	pop	{r7, pc}
   14fe8:	000003c5 	.word	0x000003c5
   14fec:	00014ea9 	.word	0x00014ea9

00014ff0 <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
   14ff0:	b580      	push	{r7, lr}
   14ff2:	b08a      	sub	sp, #40	; 0x28
   14ff4:	af00      	add	r7, sp, #0
   14ff6:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   14ff8:	f04f 0300 	mov.w	r3, #0
   14ffc:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   14ffe:	f04f 0300 	mov.w	r3, #0
   15002:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   15004:	f04f 0300 	mov.w	r3, #0
   15008:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   1500a:	f107 030c 	add.w	r3, r7, #12
   1500e:	4618      	mov	r0, r3
   15010:	4b03      	ldr	r3, [pc, #12]	; (15020 <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   15012:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   15014:	687b      	ldr	r3, [r7, #4]
   15016:	69db      	ldr	r3, [r3, #28]
	
}
   15018:	4618      	mov	r0, r3
   1501a:	3728      	adds	r7, #40	; 0x28
   1501c:	46bd      	mov	sp, r7
   1501e:	bd80      	pop	{r7, pc}
   15020:	000003c5 	.word	0x000003c5

00015024 <_Z41__static_initialization_and_destruction_0ii>:

	EventHandler_Class	listener;
   15024:	b5b0      	push	{r4, r5, r7, lr}
   15026:	b082      	sub	sp, #8
   15028:	af00      	add	r7, sp, #0
   1502a:	6078      	str	r0, [r7, #4]
   1502c:	6039      	str	r1, [r7, #0]
   1502e:	687b      	ldr	r3, [r7, #4]
   15030:	2b01      	cmp	r3, #1
   15032:	d117      	bne.n	15064 <_Z41__static_initialization_and_destruction_0ii+0x40>
   15034:	683b      	ldr	r3, [r7, #0]
   15036:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1503a:	4293      	cmp	r3, r2
   1503c:	d112      	bne.n	15064 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   1503e:	4b0b      	ldr	r3, [pc, #44]	; (1506c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   15040:	247f      	movs	r4, #127	; 0x7f
   15042:	461d      	mov	r5, r3
   15044:	2c00      	cmp	r4, #0
   15046:	db05      	blt.n	15054 <_Z41__static_initialization_and_destruction_0ii+0x30>
   15048:	4628      	mov	r0, r5
   1504a:	4b09      	ldr	r3, [pc, #36]	; (15070 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   1504c:	4798      	blx	r3
   1504e:	3510      	adds	r5, #16
   15050:	3c01      	subs	r4, #1
   15052:	e7f7      	b.n	15044 <_Z41__static_initialization_and_destruction_0ii+0x20>
	EventHandler_Class	listener;
   15054:	4807      	ldr	r0, [pc, #28]	; (15074 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15056:	4b08      	ldr	r3, [pc, #32]	; (15078 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15058:	4798      	blx	r3
   1505a:	4a08      	ldr	r2, [pc, #32]	; (1507c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1505c:	4908      	ldr	r1, [pc, #32]	; (15080 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1505e:	4805      	ldr	r0, [pc, #20]	; (15074 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15060:	4b08      	ldr	r3, [pc, #32]	; (15084 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   15062:	4798      	blx	r3
   15064:	bf00      	nop
   15066:	3708      	adds	r7, #8
   15068:	46bd      	mov	sp, r7
   1506a:	bdb0      	pop	{r4, r5, r7, pc}
   1506c:	200091e4 	.word	0x200091e4
   15070:	000003c5 	.word	0x000003c5
   15074:	200099f8 	.word	0x200099f8
   15078:	00014bb1 	.word	0x00014bb1
   1507c:	20000000 	.word	0x20000000
   15080:	00014be5 	.word	0x00014be5
   15084:	00019d41 	.word	0x00019d41

00015088 <_GLOBAL__sub_I_maxEventCount>:
   15088:	b580      	push	{r7, lr}
   1508a:	af00      	add	r7, sp, #0
   1508c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15090:	2001      	movs	r0, #1
   15092:	4b01      	ldr	r3, [pc, #4]	; (15098 <_GLOBAL__sub_I_maxEventCount+0x10>)
   15094:	4798      	blx	r3
   15096:	bd80      	pop	{r7, pc}
   15098:	00015025 	.word	0x00015025

0001509c <_ZN14I2C_Sync_ClassC1Ev>:
#include "I2C_Sync_Class.h"
static	uint8_t	txI2CStaticBuffer[I2C_SYN_BUFFER_SIZE];
static	uint8_t	rxI2CStaticBuffer[I2C_SYN_BUFFER_SIZE];

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
   1509c:	b480      	push	{r7}
   1509e:	b083      	sub	sp, #12
   150a0:	af00      	add	r7, sp, #0
   150a2:	6078      	str	r0, [r7, #4]
{
} //I2C_Sync_Class
   150a4:	687b      	ldr	r3, [r7, #4]
   150a6:	4618      	mov	r0, r3
   150a8:	370c      	adds	r7, #12
   150aa:	46bd      	mov	sp, r7
   150ac:	bc80      	pop	{r7}
   150ae:	4770      	bx	lr

000150b0 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
   150b0:	b480      	push	{r7}
   150b2:	b083      	sub	sp, #12
   150b4:	af00      	add	r7, sp, #0
   150b6:	6078      	str	r0, [r7, #4]
   150b8:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
   150ba:	687b      	ldr	r3, [r7, #4]
   150bc:	683a      	ldr	r2, [r7, #0]
   150be:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
   150c0:	687b      	ldr	r3, [r7, #4]
   150c2:	4618      	mov	r0, r3
   150c4:	370c      	adds	r7, #12
   150c6:	46bd      	mov	sp, r7
   150c8:	bc80      	pop	{r7}
   150ca:	4770      	bx	lr

000150cc <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   150cc:	b480      	push	{r7}
   150ce:	b083      	sub	sp, #12
   150d0:	af00      	add	r7, sp, #0
   150d2:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   150d4:	687b      	ldr	r3, [r7, #4]
   150d6:	4618      	mov	r0, r3
   150d8:	370c      	adds	r7, #12
   150da:	46bd      	mov	sp, r7
   150dc:	bc80      	pop	{r7}
   150de:	4770      	bx	lr

000150e0 <_ZN14I2C_Sync_Class13SetDescriptorEP15i2c_m_sync_desc>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
   150e0:	b480      	push	{r7}
   150e2:	b083      	sub	sp, #12
   150e4:	af00      	add	r7, sp, #0
   150e6:	6078      	str	r0, [r7, #4]
   150e8:	6039      	str	r1, [r7, #0]
	ptrI2CDescr=i2c_a;
   150ea:	687b      	ldr	r3, [r7, #4]
   150ec:	683a      	ldr	r2, [r7, #0]
   150ee:	611a      	str	r2, [r3, #16]
	asm("nop");
   150f0:	bf00      	nop

}
   150f2:	bf00      	nop
   150f4:	370c      	adds	r7, #12
   150f6:	46bd      	mov	sp, r7
   150f8:	bc80      	pop	{r7}
   150fa:	4770      	bx	lr

000150fc <_ZN14I2C_Sync_Class4InitEv>:
bool	I2C_Sync_Class::Init(void){
   150fc:	b580      	push	{r7, lr}
   150fe:	b084      	sub	sp, #16
   15100:	af00      	add	r7, sp, #0
   15102:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
   15104:	687b      	ldr	r3, [r7, #4]
   15106:	4a14      	ldr	r2, [pc, #80]	; (15158 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   15108:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
   1510a:	687b      	ldr	r3, [r7, #4]
   1510c:	4a12      	ldr	r2, [pc, #72]	; (15158 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   1510e:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
   15110:	687b      	ldr	r3, [r7, #4]
   15112:	691a      	ldr	r2, [r3, #16]
   15114:	687b      	ldr	r3, [r7, #4]
   15116:	330c      	adds	r3, #12
   15118:	4619      	mov	r1, r3
   1511a:	4610      	mov	r0, r2
   1511c:	4b0f      	ldr	r3, [pc, #60]	; (1515c <_ZN14I2C_Sync_Class4InitEv+0x60>)
   1511e:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   15120:	687b      	ldr	r3, [r7, #4]
   15122:	691b      	ldr	r3, [r3, #16]
   15124:	4618      	mov	r0, r3
   15126:	4b0e      	ldr	r3, [pc, #56]	; (15160 <_ZN14I2C_Sync_Class4InitEv+0x64>)
   15128:	4798      	blx	r3
   1512a:	4603      	mov	r3, r0
   1512c:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
   1512e:	7bfb      	ldrb	r3, [r7, #15]
   15130:	2b00      	cmp	r3, #0
   15132:	bf0c      	ite	eq
   15134:	2301      	moveq	r3, #1
   15136:	2300      	movne	r3, #0
   15138:	b2da      	uxtb	r2, r3
   1513a:	687b      	ldr	r3, [r7, #4]
   1513c:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
   1513e:	687b      	ldr	r3, [r7, #4]
   15140:	7a5b      	ldrb	r3, [r3, #9]
   15142:	b2da      	uxtb	r2, r3
   15144:	687b      	ldr	r3, [r7, #4]
   15146:	721a      	strb	r2, [r3, #8]
	return isOK;
   15148:	687b      	ldr	r3, [r7, #4]
   1514a:	7a5b      	ldrb	r3, [r3, #9]
   1514c:	b2db      	uxtb	r3, r3
	
}
   1514e:	4618      	mov	r0, r3
   15150:	3710      	adds	r7, #16
   15152:	46bd      	mov	sp, r7
   15154:	bd80      	pop	{r7, pc}
   15156:	bf00      	nop
   15158:	20009a2c 	.word	0x20009a2c
   1515c:	00006e0b 	.word	0x00006e0b
   15160:	00006db1 	.word	0x00006db1

00015164 <_ZN14I2C_Sync_Class4InitEh>:

bool	I2C_Sync_Class::Init(uint8_t add){
   15164:	b580      	push	{r7, lr}
   15166:	b082      	sub	sp, #8
   15168:	af00      	add	r7, sp, #0
   1516a:	6078      	str	r0, [r7, #4]
   1516c:	460b      	mov	r3, r1
   1516e:	70fb      	strb	r3, [r7, #3]
	isOK=Init();
   15170:	6878      	ldr	r0, [r7, #4]
   15172:	4b0b      	ldr	r3, [pc, #44]	; (151a0 <_ZN14I2C_Sync_Class4InitEh+0x3c>)
   15174:	4798      	blx	r3
   15176:	4603      	mov	r3, r0
   15178:	461a      	mov	r2, r3
   1517a:	687b      	ldr	r3, [r7, #4]
   1517c:	725a      	strb	r2, [r3, #9]
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   1517e:	687b      	ldr	r3, [r7, #4]
   15180:	691b      	ldr	r3, [r3, #16]
   15182:	78fa      	ldrb	r2, [r7, #3]
   15184:	b211      	sxth	r1, r2
   15186:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1518a:	4618      	mov	r0, r3
   1518c:	4b05      	ldr	r3, [pc, #20]	; (151a4 <_ZN14I2C_Sync_Class4InitEh+0x40>)
   1518e:	4798      	blx	r3

	return isOK;
   15190:	687b      	ldr	r3, [r7, #4]
   15192:	7a5b      	ldrb	r3, [r3, #9]
   15194:	b2db      	uxtb	r3, r3
}
   15196:	4618      	mov	r0, r3
   15198:	3708      	adds	r7, #8
   1519a:	46bd      	mov	sp, r7
   1519c:	bd80      	pop	{r7, pc}
   1519e:	bf00      	nop
   151a0:	000150fd 	.word	0x000150fd
   151a4:	00006dd1 	.word	0x00006dd1

000151a8 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
}

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   151a8:	b580      	push	{r7, lr}
   151aa:	b086      	sub	sp, #24
   151ac:	af00      	add	r7, sp, #0
   151ae:	60f8      	str	r0, [r7, #12]
   151b0:	60b9      	str	r1, [r7, #8]
   151b2:	4613      	mov	r3, r2
   151b4:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
   151b6:	68fb      	ldr	r3, [r7, #12]
   151b8:	68db      	ldr	r3, [r3, #12]
   151ba:	88fa      	ldrh	r2, [r7, #6]
   151bc:	68b9      	ldr	r1, [r7, #8]
   151be:	4618      	mov	r0, r3
   151c0:	4b03      	ldr	r3, [pc, #12]	; (151d0 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
   151c2:	4798      	blx	r3
   151c4:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
   151c6:	697b      	ldr	r3, [r7, #20]
}
   151c8:	4618      	mov	r0, r3
   151ca:	3718      	adds	r7, #24
   151cc:	46bd      	mov	sp, r7
   151ce:	bd80      	pop	{r7, pc}
   151d0:	00019ca1 	.word	0x00019ca1

000151d4 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   151d4:	b580      	push	{r7, lr}
   151d6:	b086      	sub	sp, #24
   151d8:	af00      	add	r7, sp, #0
   151da:	60f8      	str	r0, [r7, #12]
   151dc:	60b9      	str	r1, [r7, #8]
   151de:	4613      	mov	r3, r2
   151e0:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
   151e2:	68fb      	ldr	r3, [r7, #12]
   151e4:	68db      	ldr	r3, [r3, #12]
   151e6:	88fa      	ldrh	r2, [r7, #6]
   151e8:	68b9      	ldr	r1, [r7, #8]
   151ea:	4618      	mov	r0, r3
   151ec:	4b03      	ldr	r3, [pc, #12]	; (151fc <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
   151ee:	4798      	blx	r3
   151f0:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
   151f2:	697b      	ldr	r3, [r7, #20]
}
   151f4:	4618      	mov	r0, r3
   151f6:	3718      	adds	r7, #24
   151f8:	46bd      	mov	sp, r7
   151fa:	bd80      	pop	{r7, pc}
   151fc:	00019cf1 	.word	0x00019cf1

00015200 <_ZL16Fv1StatusChangedv>:
#include "ARINC_Interface.h"
FlapperValve_Class	*ptrFlapperValveClass;
//I2C_Asyn_Class		i2cFVs(&I2C_EXPANDER);
static MCP23017_Class staticExpander(&I2C_EXPANDER);

static void	Fv1StatusChanged(void){
   15200:	b480      	push	{r7}
   15202:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv1StatusChanged=true;
   15204:	4b03      	ldr	r3, [pc, #12]	; (15214 <_ZL16Fv1StatusChangedv+0x14>)
   15206:	681b      	ldr	r3, [r3, #0]
   15208:	2201      	movs	r2, #1
   1520a:	77da      	strb	r2, [r3, #31]

}
   1520c:	bf00      	nop
   1520e:	46bd      	mov	sp, r7
   15210:	bc80      	pop	{r7}
   15212:	4770      	bx	lr
   15214:	20009aac 	.word	0x20009aac

00015218 <_ZL16Fv2StatusChangedv>:
static void	Fv2StatusChanged(void){
   15218:	b480      	push	{r7}
   1521a:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv2StatusChanged=true;
   1521c:	4b04      	ldr	r3, [pc, #16]	; (15230 <_ZL16Fv2StatusChangedv+0x18>)
   1521e:	681b      	ldr	r3, [r3, #0]
   15220:	2201      	movs	r2, #1
   15222:	f883 2020 	strb.w	r2, [r3, #32]

}
   15226:	bf00      	nop
   15228:	46bd      	mov	sp, r7
   1522a:	bc80      	pop	{r7}
   1522c:	4770      	bx	lr
   1522e:	bf00      	nop
   15230:	20009aac 	.word	0x20009aac

00015234 <_ZL16RegulatorTimeoutPK10timer_task>:

static bool	I2CFlapperValvesInit(void){
	 bool ok= i2cFVs.Init();
	 //ptrFlapperValveClass->isOK=ok;
}
static void	RegulatorTimeout(const struct timer_task *const timer_task){
   15234:	b480      	push	{r7}
   15236:	b083      	sub	sp, #12
   15238:	af00      	add	r7, sp, #0
   1523a:	6078      	str	r0, [r7, #4]
	ptrFlapperValveClass->regulatorTimeout=true;
   1523c:	4b05      	ldr	r3, [pc, #20]	; (15254 <_ZL16RegulatorTimeoutPK10timer_task+0x20>)
   1523e:	681b      	ldr	r3, [r3, #0]
   15240:	2201      	movs	r2, #1
   15242:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	asm("nop");
   15246:	bf00      	nop
}
   15248:	bf00      	nop
   1524a:	370c      	adds	r7, #12
   1524c:	46bd      	mov	sp, r7
   1524e:	bc80      	pop	{r7}
   15250:	4770      	bx	lr
   15252:	bf00      	nop
   15254:	20009aac 	.word	0x20009aac

00015258 <_ZN18FlapperValve_ClassC1Eh>:

FlapperValve_Class::FlapperValve_Class(uint8_t id)
   15258:	b5b0      	push	{r4, r5, r7, lr}
   1525a:	b082      	sub	sp, #8
   1525c:	af00      	add	r7, sp, #0
   1525e:	6078      	str	r0, [r7, #4]
   15260:	460b      	mov	r3, r1
   15262:	70fb      	strb	r3, [r7, #3]
   15264:	687b      	ldr	r3, [r7, #4]
   15266:	4618      	mov	r0, r3
   15268:	4b10      	ldr	r3, [pc, #64]	; (152ac <_ZN18FlapperValve_ClassC1Eh+0x54>)
   1526a:	4798      	blx	r3
   1526c:	687b      	ldr	r3, [r7, #4]
   1526e:	3344      	adds	r3, #68	; 0x44
   15270:	2403      	movs	r4, #3
   15272:	461d      	mov	r5, r3
   15274:	2c00      	cmp	r4, #0
   15276:	db05      	blt.n	15284 <_ZN18FlapperValve_ClassC1Eh+0x2c>
   15278:	4628      	mov	r0, r5
   1527a:	4b0d      	ldr	r3, [pc, #52]	; (152b0 <_ZN18FlapperValve_ClassC1Eh+0x58>)
   1527c:	4798      	blx	r3
   1527e:	3520      	adds	r5, #32
   15280:	3c01      	subs	r4, #1
   15282:	e7f7      	b.n	15274 <_ZN18FlapperValve_ClassC1Eh+0x1c>
{	
	valveID=id;
   15284:	687b      	ldr	r3, [r7, #4]
   15286:	78fa      	ldrb	r2, [r7, #3]
   15288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	//i2cDescr=&I2C_EXPANDER;
	simpleExpander=&staticExpander;
   1528c:	687b      	ldr	r3, [r7, #4]
   1528e:	4a09      	ldr	r2, [pc, #36]	; (152b4 <_ZN18FlapperValve_ClassC1Eh+0x5c>)
   15290:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	ptrFlapperValveClass=this;
   15294:	4a08      	ldr	r2, [pc, #32]	; (152b8 <_ZN18FlapperValve_ClassC1Eh+0x60>)
   15296:	687b      	ldr	r3, [r7, #4]
   15298:	6013      	str	r3, [r2, #0]
	isOK=false;
   1529a:	687b      	ldr	r3, [r7, #4]
   1529c:	2200      	movs	r2, #0
   1529e:	779a      	strb	r2, [r3, #30]
} //FlapperValve_Class
   152a0:	687b      	ldr	r3, [r7, #4]
   152a2:	4618      	mov	r0, r3
   152a4:	3708      	adds	r7, #8
   152a6:	46bd      	mov	sp, r7
   152a8:	bdb0      	pop	{r4, r5, r7, pc}
   152aa:	bf00      	nop
   152ac:	000190e5 	.word	0x000190e5
   152b0:	00015769 	.word	0x00015769
   152b4:	20009ab0 	.word	0x20009ab0
   152b8:	20009aac 	.word	0x20009aac

000152bc <_ZN18FlapperValve_ClassD1Ev>:
	//i2cDescr=&I2C_EXPANDER;
	ptrFlapperValveClass=this;
} //FlapperValve_Class

// default destructor
FlapperValve_Class::~FlapperValve_Class()
   152bc:	b590      	push	{r4, r7, lr}
   152be:	b083      	sub	sp, #12
   152c0:	af00      	add	r7, sp, #0
   152c2:	6078      	str	r0, [r7, #4]
   152c4:	687b      	ldr	r3, [r7, #4]
   152c6:	3344      	adds	r3, #68	; 0x44
   152c8:	2b00      	cmp	r3, #0
   152ca:	d00c      	beq.n	152e6 <_ZN18FlapperValve_ClassD1Ev+0x2a>
   152cc:	687b      	ldr	r3, [r7, #4]
   152ce:	3344      	adds	r3, #68	; 0x44
   152d0:	f103 0480 	add.w	r4, r3, #128	; 0x80
   152d4:	687b      	ldr	r3, [r7, #4]
   152d6:	3344      	adds	r3, #68	; 0x44
   152d8:	42a3      	cmp	r3, r4
   152da:	d004      	beq.n	152e6 <_ZN18FlapperValve_ClassD1Ev+0x2a>
   152dc:	3c20      	subs	r4, #32
   152de:	4620      	mov	r0, r4
   152e0:	4b05      	ldr	r3, [pc, #20]	; (152f8 <_ZN18FlapperValve_ClassD1Ev+0x3c>)
   152e2:	4798      	blx	r3
   152e4:	e7f6      	b.n	152d4 <_ZN18FlapperValve_ClassD1Ev+0x18>
   152e6:	687b      	ldr	r3, [r7, #4]
   152e8:	4618      	mov	r0, r3
   152ea:	4b04      	ldr	r3, [pc, #16]	; (152fc <_ZN18FlapperValve_ClassD1Ev+0x40>)
   152ec:	4798      	blx	r3
{
} //~FlapperValve_Class
   152ee:	687b      	ldr	r3, [r7, #4]
   152f0:	4618      	mov	r0, r3
   152f2:	370c      	adds	r7, #12
   152f4:	46bd      	mov	sp, r7
   152f6:	bd90      	pop	{r4, r7, pc}
   152f8:	0001577d 	.word	0x0001577d
   152fc:	000190f9 	.word	0x000190f9

00015300 <_ZN18FlapperValve_Class4InitEv>:


bool	FlapperValve_Class::Init(void){
   15300:	b580      	push	{r7, lr}
   15302:	b084      	sub	sp, #16
   15304:	af00      	add	r7, sp, #0
   15306:	6078      	str	r0, [r7, #4]
	ptrFlapperValveClass=this;
   15308:	4a26      	ldr	r2, [pc, #152]	; (153a4 <_ZN18FlapperValve_Class4InitEv+0xa4>)
   1530a:	687b      	ldr	r3, [r7, #4]
   1530c:	6013      	str	r3, [r2, #0]
		UserParameters up=defaultParameters;
   1530e:	4b26      	ldr	r3, [pc, #152]	; (153a8 <_ZN18FlapperValve_Class4InitEv+0xa8>)
   15310:	781b      	ldrb	r3, [r3, #0]
   15312:	733b      	strb	r3, [r7, #12]
		offset=up.flapperValveOffset;
   15314:	7b3a      	ldrb	r2, [r7, #12]
   15316:	687b      	ldr	r3, [r7, #4]
   15318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
// 		else
// 		{
// 		}
// 		return isOK;
	
		if (simpleExpander->isReady==false)
   1531c:	687b      	ldr	r3, [r7, #4]
   1531e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   15322:	781b      	ldrb	r3, [r3, #0]
   15324:	b2db      	uxtb	r3, r3
   15326:	f083 0301 	eor.w	r3, r3, #1
   1532a:	b2db      	uxtb	r3, r3
   1532c:	2b00      	cmp	r3, #0
   1532e:	d011      	beq.n	15354 <_ZN18FlapperValve_Class4InitEv+0x54>
		{
				simpleExpander->Init();
   15330:	687b      	ldr	r3, [r7, #4]
   15332:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   15336:	4618      	mov	r0, r3
   15338:	4b1c      	ldr	r3, [pc, #112]	; (153ac <_ZN18FlapperValve_Class4InitEv+0xac>)
   1533a:	4798      	blx	r3
				simpleExpander->SetPortAInput();
   1533c:	687b      	ldr	r3, [r7, #4]
   1533e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   15342:	4618      	mov	r0, r3
   15344:	4b1a      	ldr	r3, [pc, #104]	; (153b0 <_ZN18FlapperValve_Class4InitEv+0xb0>)
   15346:	4798      	blx	r3
				simpleExpander->SetPortBOutput();
   15348:	687b      	ldr	r3, [r7, #4]
   1534a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   1534e:	4618      	mov	r0, r3
   15350:	4b18      	ldr	r3, [pc, #96]	; (153b4 <_ZN18FlapperValve_Class4InitEv+0xb4>)
   15352:	4798      	blx	r3
		}

		if (simpleExpander->isReady)
   15354:	687b      	ldr	r3, [r7, #4]
   15356:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   1535a:	781b      	ldrb	r3, [r3, #0]
   1535c:	b2db      	uxtb	r3, r3
   1535e:	2b00      	cmp	r3, #0
   15360:	d01a      	beq.n	15398 <_ZN18FlapperValve_Class4InitEv+0x98>
		{
			if (valveID==1)
   15362:	687b      	ldr	r3, [r7, #4]
   15364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   15368:	2b01      	cmp	r3, #1
   1536a:	d104      	bne.n	15376 <_ZN18FlapperValve_Class4InitEv+0x76>
			{
				ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
   1536c:	4912      	ldr	r1, [pc, #72]	; (153b8 <_ZN18FlapperValve_Class4InitEv+0xb8>)
   1536e:	2004      	movs	r0, #4
   15370:	4b12      	ldr	r3, [pc, #72]	; (153bc <_ZN18FlapperValve_Class4InitEv+0xbc>)
   15372:	4798      	blx	r3
   15374:	e008      	b.n	15388 <_ZN18FlapperValve_Class4InitEv+0x88>
			}
			else if  (valveID==2)
   15376:	687b      	ldr	r3, [r7, #4]
   15378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1537c:	2b02      	cmp	r3, #2
   1537e:	d103      	bne.n	15388 <_ZN18FlapperValve_Class4InitEv+0x88>
			{
				ext_irq_register(PIN_PA05,FUNC_PTR(Fv2StatusChanged));
   15380:	490f      	ldr	r1, [pc, #60]	; (153c0 <_ZN18FlapperValve_Class4InitEv+0xc0>)
   15382:	2005      	movs	r0, #5
   15384:	4b0d      	ldr	r3, [pc, #52]	; (153bc <_ZN18FlapperValve_Class4InitEv+0xbc>)
   15386:	4798      	blx	r3
			}
		//	InitExpanderArray(valveID);
			isOK=Selftest();
   15388:	6878      	ldr	r0, [r7, #4]
   1538a:	4b0e      	ldr	r3, [pc, #56]	; (153c4 <_ZN18FlapperValve_Class4InitEv+0xc4>)
   1538c:	4798      	blx	r3
   1538e:	4603      	mov	r3, r0
   15390:	461a      	mov	r2, r3
   15392:	687b      	ldr	r3, [r7, #4]
   15394:	779a      	strb	r2, [r3, #30]
   15396:	e000      	b.n	1539a <_ZN18FlapperValve_Class4InitEv+0x9a>
		}
		else
		{
			asm("nop");
   15398:	bf00      	nop
		}
// 		return isOK;	


}
   1539a:	bf00      	nop
   1539c:	4618      	mov	r0, r3
   1539e:	3710      	adds	r7, #16
   153a0:	46bd      	mov	sp, r7
   153a2:	bd80      	pop	{r7, pc}
   153a4:	20009aac 	.word	0x20009aac
   153a8:	00021ff0 	.word	0x00021ff0
   153ac:	0001586d 	.word	0x0001586d
   153b0:	00015995 	.word	0x00015995
   153b4:	000159d9 	.word	0x000159d9
   153b8:	00015201 	.word	0x00015201
   153bc:	000067f5 	.word	0x000067f5
   153c0:	00015219 	.word	0x00015219
   153c4:	00015675 	.word	0x00015675

000153c8 <_ZN18FlapperValve_Class13WriteSetpointEh>:
StatusInputs FlapperValve_Class::ReadStatusInputs(void){
	value=expanders[1].ReadGPIORegister();
	statusInputs=FillStatusInputs(value);
	return statusInputs;
}
uint8_t FlapperValve_Class::WriteSetpoint(uint8_t sp){
   153c8:	b580      	push	{r7, lr}
   153ca:	b082      	sub	sp, #8
   153cc:	af00      	add	r7, sp, #0
   153ce:	6078      	str	r0, [r7, #4]
   153d0:	460b      	mov	r3, r1
   153d2:	70fb      	strb	r3, [r7, #3]
	//setpointPosition= expanders[2].WriteGPIORegister(sp);
	setpointPosition= simpleExpander->WriteRegisterB(sp) ;
   153d4:	687b      	ldr	r3, [r7, #4]
   153d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   153da:	78fa      	ldrb	r2, [r7, #3]
   153dc:	4611      	mov	r1, r2
   153de:	4618      	mov	r0, r3
   153e0:	4b06      	ldr	r3, [pc, #24]	; (153fc <_ZN18FlapperValve_Class13WriteSetpointEh+0x34>)
   153e2:	4798      	blx	r3
   153e4:	4603      	mov	r3, r0
   153e6:	461a      	mov	r2, r3
   153e8:	687b      	ldr	r3, [r7, #4]
   153ea:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
	return setpointPosition;
   153ee:	687b      	ldr	r3, [r7, #4]
   153f0:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
}
   153f4:	4618      	mov	r0, r3
   153f6:	3708      	adds	r7, #8
   153f8:	46bd      	mov	sp, r7
   153fa:	bd80      	pop	{r7, pc}
   153fc:	0001596d 	.word	0x0001596d

00015400 <_ZN18FlapperValve_Class17SetOffsetPositionEv>:
uint8_t FlapperValve_Class::SetOffsetPosition(void){
   15400:	b590      	push	{r4, r7, lr}
   15402:	b083      	sub	sp, #12
   15404:	af00      	add	r7, sp, #0
   15406:	6078      	str	r0, [r7, #4]
		WriteSetpoint(offset);
   15408:	687b      	ldr	r3, [r7, #4]
   1540a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   1540e:	4619      	mov	r1, r3
   15410:	6878      	ldr	r0, [r7, #4]
   15412:	4b27      	ldr	r3, [pc, #156]	; (154b0 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb0>)
   15414:	4798      	blx	r3
		regulatorTimeout=false;
   15416:	687b      	ldr	r3, [r7, #4]
   15418:	2200      	movs	r2, #0
   1541a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		hvacTimer.Start_oneShot_task(FUNC_PTR(RegulatorTimeout),1000*60*1);
   1541e:	f64e 2260 	movw	r2, #60000	; 0xea60
   15422:	4924      	ldr	r1, [pc, #144]	; (154b4 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb4>)
   15424:	4824      	ldr	r0, [pc, #144]	; (154b8 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb8>)
   15426:	4b25      	ldr	r3, [pc, #148]	; (154bc <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xbc>)
   15428:	4798      	blx	r3
		while ((!regulatorTimeout)&&(abs(ReadActualPosition()-setpointPosition)>3)){
   1542a:	687b      	ldr	r3, [r7, #4]
   1542c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   15430:	b2db      	uxtb	r3, r3
   15432:	f083 0301 	eor.w	r3, r3, #1
   15436:	b2db      	uxtb	r3, r3
   15438:	2b00      	cmp	r3, #0
   1543a:	d021      	beq.n	15480 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x80>
   1543c:	6878      	ldr	r0, [r7, #4]
   1543e:	4b20      	ldr	r3, [pc, #128]	; (154c0 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc0>)
   15440:	4798      	blx	r3
   15442:	4603      	mov	r3, r0
   15444:	461a      	mov	r2, r3
   15446:	687b      	ldr	r3, [r7, #4]
   15448:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   1544c:	1ad3      	subs	r3, r2, r3
   1544e:	2b00      	cmp	r3, #0
   15450:	dd09      	ble.n	15466 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x66>
   15452:	6878      	ldr	r0, [r7, #4]
   15454:	4b1a      	ldr	r3, [pc, #104]	; (154c0 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc0>)
   15456:	4798      	blx	r3
   15458:	4603      	mov	r3, r0
   1545a:	461a      	mov	r2, r3
   1545c:	687b      	ldr	r3, [r7, #4]
   1545e:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   15462:	1ad3      	subs	r3, r2, r3
   15464:	e008      	b.n	15478 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x78>
   15466:	687b      	ldr	r3, [r7, #4]
   15468:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   1546c:	461c      	mov	r4, r3
   1546e:	6878      	ldr	r0, [r7, #4]
   15470:	4b13      	ldr	r3, [pc, #76]	; (154c0 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc0>)
   15472:	4798      	blx	r3
   15474:	4603      	mov	r3, r0
   15476:	1ae3      	subs	r3, r4, r3
   15478:	2b03      	cmp	r3, #3
   1547a:	dd01      	ble.n	15480 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x80>
   1547c:	2301      	movs	r3, #1
   1547e:	e000      	b.n	15482 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x82>
   15480:	2300      	movs	r3, #0
   15482:	2b00      	cmp	r3, #0
   15484:	d009      	beq.n	1549a <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x9a>
			arinc.SaveFlapperValveAngle();
   15486:	480f      	ldr	r0, [pc, #60]	; (154c4 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc4>)
   15488:	4b0f      	ldr	r3, [pc, #60]	; (154c8 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc8>)
   1548a:	4798      	blx	r3
			delay_ms(50);
   1548c:	2032      	movs	r0, #50	; 0x32
   1548e:	4b0f      	ldr	r3, [pc, #60]	; (154cc <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xcc>)
   15490:	4798      	blx	r3
			arinc.TransmitTXBuffer();
   15492:	480c      	ldr	r0, [pc, #48]	; (154c4 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc4>)
   15494:	4b0e      	ldr	r3, [pc, #56]	; (154d0 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xd0>)
   15496:	4798      	blx	r3
		while ((!regulatorTimeout)&&(abs(ReadActualPosition()-setpointPosition)>3)){
   15498:	e7c7      	b.n	1542a <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x2a>
			
		}
		hvacTimer.Remove_task(FUNC_PTR(RegulatorTimeout));
   1549a:	4906      	ldr	r1, [pc, #24]	; (154b4 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb4>)
   1549c:	4806      	ldr	r0, [pc, #24]	; (154b8 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb8>)
   1549e:	4b0d      	ldr	r3, [pc, #52]	; (154d4 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xd4>)
   154a0:	4798      	blx	r3
		return actualPosition;
   154a2:	687b      	ldr	r3, [r7, #4]
   154a4:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
		
}
   154a8:	4618      	mov	r0, r3
   154aa:	370c      	adds	r7, #12
   154ac:	46bd      	mov	sp, r7
   154ae:	bd90      	pop	{r4, r7, pc}
   154b0:	000153c9 	.word	0x000153c9
   154b4:	00015235 	.word	0x00015235
   154b8:	2000a310 	.word	0x2000a310
   154bc:	00017c25 	.word	0x00017c25
   154c0:	000155cd 	.word	0x000155cd
   154c4:	20008ec8 	.word	0x20008ec8
   154c8:	00012c5d 	.word	0x00012c5d
   154cc:	00006761 	.word	0x00006761
   154d0:	00013c6d 	.word	0x00013c6d
   154d4:	00017bb5 	.word	0x00017bb5

000154d8 <_ZN18FlapperValve_Class20SetVentilatePositionEv>:
uint8_t FlapperValve_Class::SetVentilatePosition(void){
   154d8:	b590      	push	{r4, r7, lr}
   154da:	b083      	sub	sp, #12
   154dc:	af00      	add	r7, sp, #0
   154de:	6078      	str	r0, [r7, #4]
	WriteSetpoint(0xff-offset);
   154e0:	687b      	ldr	r3, [r7, #4]
   154e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   154e6:	43db      	mvns	r3, r3
   154e8:	b2db      	uxtb	r3, r3
   154ea:	4619      	mov	r1, r3
   154ec:	6878      	ldr	r0, [r7, #4]
   154ee:	4b27      	ldr	r3, [pc, #156]	; (1558c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xb4>)
   154f0:	4798      	blx	r3
	regulatorTimeout=false;
   154f2:	687b      	ldr	r3, [r7, #4]
   154f4:	2200      	movs	r2, #0
   154f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	hvacTimer.Start_oneShot_task(FUNC_PTR(RegulatorTimeout),1000*60);
   154fa:	f64e 2260 	movw	r2, #60000	; 0xea60
   154fe:	4924      	ldr	r1, [pc, #144]	; (15590 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xb8>)
   15500:	4824      	ldr	r0, [pc, #144]	; (15594 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xbc>)
   15502:	4b25      	ldr	r3, [pc, #148]	; (15598 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc0>)
   15504:	4798      	blx	r3
	while ((!regulatorTimeout)&&(abs(ReadActualPosition()-setpointPosition)>3)){
   15506:	687b      	ldr	r3, [r7, #4]
   15508:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1550c:	b2db      	uxtb	r3, r3
   1550e:	f083 0301 	eor.w	r3, r3, #1
   15512:	b2db      	uxtb	r3, r3
   15514:	2b00      	cmp	r3, #0
   15516:	d021      	beq.n	1555c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x84>
   15518:	6878      	ldr	r0, [r7, #4]
   1551a:	4b20      	ldr	r3, [pc, #128]	; (1559c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc4>)
   1551c:	4798      	blx	r3
   1551e:	4603      	mov	r3, r0
   15520:	461a      	mov	r2, r3
   15522:	687b      	ldr	r3, [r7, #4]
   15524:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   15528:	1ad3      	subs	r3, r2, r3
   1552a:	2b00      	cmp	r3, #0
   1552c:	dd09      	ble.n	15542 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x6a>
   1552e:	6878      	ldr	r0, [r7, #4]
   15530:	4b1a      	ldr	r3, [pc, #104]	; (1559c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc4>)
   15532:	4798      	blx	r3
   15534:	4603      	mov	r3, r0
   15536:	461a      	mov	r2, r3
   15538:	687b      	ldr	r3, [r7, #4]
   1553a:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   1553e:	1ad3      	subs	r3, r2, r3
   15540:	e008      	b.n	15554 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x7c>
   15542:	687b      	ldr	r3, [r7, #4]
   15544:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   15548:	461c      	mov	r4, r3
   1554a:	6878      	ldr	r0, [r7, #4]
   1554c:	4b13      	ldr	r3, [pc, #76]	; (1559c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc4>)
   1554e:	4798      	blx	r3
   15550:	4603      	mov	r3, r0
   15552:	1ae3      	subs	r3, r4, r3
   15554:	2b03      	cmp	r3, #3
   15556:	dd01      	ble.n	1555c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x84>
   15558:	2301      	movs	r3, #1
   1555a:	e000      	b.n	1555e <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x86>
   1555c:	2300      	movs	r3, #0
   1555e:	2b00      	cmp	r3, #0
   15560:	d009      	beq.n	15576 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x9e>
			arinc.SaveFlapperValveAngle();
   15562:	480f      	ldr	r0, [pc, #60]	; (155a0 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc8>)
   15564:	4b0f      	ldr	r3, [pc, #60]	; (155a4 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xcc>)
   15566:	4798      	blx	r3
			delay_ms(50);
   15568:	2032      	movs	r0, #50	; 0x32
   1556a:	4b0f      	ldr	r3, [pc, #60]	; (155a8 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xd0>)
   1556c:	4798      	blx	r3
			arinc.TransmitTXBuffer();
   1556e:	480c      	ldr	r0, [pc, #48]	; (155a0 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc8>)
   15570:	4b0e      	ldr	r3, [pc, #56]	; (155ac <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xd4>)
   15572:	4798      	blx	r3
	while ((!regulatorTimeout)&&(abs(ReadActualPosition()-setpointPosition)>3)){
   15574:	e7c7      	b.n	15506 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x2e>
	}
	hvacTimer.Remove_task(FUNC_PTR(RegulatorTimeout));
   15576:	4906      	ldr	r1, [pc, #24]	; (15590 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xb8>)
   15578:	4806      	ldr	r0, [pc, #24]	; (15594 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xbc>)
   1557a:	4b0d      	ldr	r3, [pc, #52]	; (155b0 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xd8>)
   1557c:	4798      	blx	r3
	return actualPosition;
   1557e:	687b      	ldr	r3, [r7, #4]
   15580:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
	
}
   15584:	4618      	mov	r0, r3
   15586:	370c      	adds	r7, #12
   15588:	46bd      	mov	sp, r7
   1558a:	bd90      	pop	{r4, r7, pc}
   1558c:	000153c9 	.word	0x000153c9
   15590:	00015235 	.word	0x00015235
   15594:	2000a310 	.word	0x2000a310
   15598:	00017c25 	.word	0x00017c25
   1559c:	000155cd 	.word	0x000155cd
   155a0:	20008ec8 	.word	0x20008ec8
   155a4:	00012c5d 	.word	0x00012c5d
   155a8:	00006761 	.word	0x00006761
   155ac:	00013c6d 	.word	0x00013c6d
   155b0:	00017bb5 	.word	0x00017bb5

000155b4 <_ZN18FlapperValve_Class15GetCurrentAngleEv>:
uint8_t FlapperValve_Class::ReadSetpoint(){
	setpointPosition= expanders[2].ReadGPIORegister();
	return setpointPosition;
}
uint8_t FlapperValve_Class::GetCurrentAngle(void){
   155b4:	b480      	push	{r7}
   155b6:	b083      	sub	sp, #12
   155b8:	af00      	add	r7, sp, #0
   155ba:	6078      	str	r0, [r7, #4]
	return actualPosition;
   155bc:	687b      	ldr	r3, [r7, #4]
   155be:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
}
   155c2:	4618      	mov	r0, r3
   155c4:	370c      	adds	r7, #12
   155c6:	46bd      	mov	sp, r7
   155c8:	bc80      	pop	{r7}
   155ca:	4770      	bx	lr

000155cc <_ZN18FlapperValve_Class18ReadActualPositionEv>:
uint8_t FlapperValve_Class::ReadActualPosition(void){
   155cc:	b580      	push	{r7, lr}
   155ce:	b082      	sub	sp, #8
   155d0:	af00      	add	r7, sp, #0
   155d2:	6078      	str	r0, [r7, #4]
/*	actualPosition= expanders[3].ReadGPIORegister();*/
	lastPosition=actualPosition;
   155d4:	687b      	ldr	r3, [r7, #4]
   155d6:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
   155da:	687b      	ldr	r3, [r7, #4]
   155dc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
   155e0:	687b      	ldr	r3, [r7, #4]
   155e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   155e6:	2112      	movs	r1, #18
   155e8:	4618      	mov	r0, r3
   155ea:	4b13      	ldr	r3, [pc, #76]	; (15638 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x6c>)
   155ec:	4798      	blx	r3
   155ee:	4603      	mov	r3, r0
   155f0:	461a      	mov	r2, r3
   155f2:	687b      	ldr	r3, [r7, #4]
   155f4:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	if (actualPosition>200)
   155f8:	687b      	ldr	r3, [r7, #4]
   155fa:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   155fe:	2bc8      	cmp	r3, #200	; 0xc8
   15600:	dd04      	ble.n	1560c <_ZN18FlapperValve_Class18ReadActualPositionEv+0x40>
	{
		statusFlapperValve=RECYCLE;
   15602:	687b      	ldr	r3, [r7, #4]
   15604:	2202      	movs	r2, #2
   15606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   1560a:	e00d      	b.n	15628 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x5c>
	}else if (actualPosition>100)
   1560c:	687b      	ldr	r3, [r7, #4]
   1560e:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   15612:	2b64      	cmp	r3, #100	; 0x64
   15614:	dd04      	ble.n	15620 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x54>
	{
		statusFlapperValve=INTERM;
   15616:	687b      	ldr	r3, [r7, #4]
   15618:	2201      	movs	r2, #1
   1561a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   1561e:	e003      	b.n	15628 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x5c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR;
   15620:	687b      	ldr	r3, [r7, #4]
   15622:	2200      	movs	r2, #0
   15624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	}
	return actualPosition;
   15628:	687b      	ldr	r3, [r7, #4]
   1562a:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
}
   1562e:	4618      	mov	r0, r3
   15630:	3708      	adds	r7, #8
   15632:	46bd      	mov	sp, r7
   15634:	bd80      	pop	{r7, pc}
   15636:	bf00      	nop
   15638:	000158f9 	.word	0x000158f9

0001563c <_ZN18FlapperValve_Class17IsPositionChangedEv>:
void FlapperValve_Class::UpdateFlapperValveData(){
	fvData.controlStatus=ReadControlStatus();
	fvData.statusInputs=ReadStatusInputs();
	fvData.actualPosition=ReadActualPosition();
}
bool FlapperValve_Class::IsPositionChanged(void){
   1563c:	b590      	push	{r4, r7, lr}
   1563e:	b083      	sub	sp, #12
   15640:	af00      	add	r7, sp, #0
   15642:	6078      	str	r0, [r7, #4]
	if (lastPosition==ReadActualPosition())
   15644:	687b      	ldr	r3, [r7, #4]
   15646:	f893 40e0 	ldrb.w	r4, [r3, #224]	; 0xe0
   1564a:	6878      	ldr	r0, [r7, #4]
   1564c:	4b08      	ldr	r3, [pc, #32]	; (15670 <_ZN18FlapperValve_Class17IsPositionChangedEv+0x34>)
   1564e:	4798      	blx	r3
   15650:	4603      	mov	r3, r0
   15652:	429c      	cmp	r4, r3
   15654:	bf0c      	ite	eq
   15656:	2301      	moveq	r3, #1
   15658:	2300      	movne	r3, #0
   1565a:	b2db      	uxtb	r3, r3
   1565c:	2b00      	cmp	r3, #0
   1565e:	d001      	beq.n	15664 <_ZN18FlapperValve_Class17IsPositionChangedEv+0x28>
	{
		return false;
   15660:	2300      	movs	r3, #0
   15662:	e000      	b.n	15666 <_ZN18FlapperValve_Class17IsPositionChangedEv+0x2a>
	} 
	else
	{
		return true;
   15664:	2301      	movs	r3, #1
	}
	return true;
}
   15666:	4618      	mov	r0, r3
   15668:	370c      	adds	r7, #12
   1566a:	46bd      	mov	sp, r7
   1566c:	bd90      	pop	{r4, r7, pc}
   1566e:	bf00      	nop
   15670:	000155cd 	.word	0x000155cd

00015674 <_ZN18FlapperValve_Class8SelftestEv>:
bool FlapperValve_Class::Selftest(void){
   15674:	b590      	push	{r4, r7, lr}
   15676:	b083      	sub	sp, #12
   15678:	af00      	add	r7, sp, #0
   1567a:	6078      	str	r0, [r7, #4]

	SetOffsetPosition();
   1567c:	6878      	ldr	r0, [r7, #4]
   1567e:	4b18      	ldr	r3, [pc, #96]	; (156e0 <_ZN18FlapperValve_Class8SelftestEv+0x6c>)
   15680:	4798      	blx	r3
	//UpdateFlapperValveData();
	isOK=abs(ReadActualPosition()-setpointPosition)<4;
   15682:	6878      	ldr	r0, [r7, #4]
   15684:	4b17      	ldr	r3, [pc, #92]	; (156e4 <_ZN18FlapperValve_Class8SelftestEv+0x70>)
   15686:	4798      	blx	r3
   15688:	4603      	mov	r3, r0
   1568a:	461a      	mov	r2, r3
   1568c:	687b      	ldr	r3, [r7, #4]
   1568e:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   15692:	1ad3      	subs	r3, r2, r3
   15694:	2b00      	cmp	r3, #0
   15696:	dd0e      	ble.n	156b6 <_ZN18FlapperValve_Class8SelftestEv+0x42>
   15698:	6878      	ldr	r0, [r7, #4]
   1569a:	4b12      	ldr	r3, [pc, #72]	; (156e4 <_ZN18FlapperValve_Class8SelftestEv+0x70>)
   1569c:	4798      	blx	r3
   1569e:	4603      	mov	r3, r0
   156a0:	461a      	mov	r2, r3
   156a2:	687b      	ldr	r3, [r7, #4]
   156a4:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   156a8:	1ad3      	subs	r3, r2, r3
   156aa:	2b03      	cmp	r3, #3
   156ac:	bfd4      	ite	le
   156ae:	2301      	movle	r3, #1
   156b0:	2300      	movgt	r3, #0
   156b2:	b2db      	uxtb	r3, r3
   156b4:	e00d      	b.n	156d2 <_ZN18FlapperValve_Class8SelftestEv+0x5e>
   156b6:	687b      	ldr	r3, [r7, #4]
   156b8:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   156bc:	461c      	mov	r4, r3
   156be:	6878      	ldr	r0, [r7, #4]
   156c0:	4b08      	ldr	r3, [pc, #32]	; (156e4 <_ZN18FlapperValve_Class8SelftestEv+0x70>)
   156c2:	4798      	blx	r3
   156c4:	4603      	mov	r3, r0
   156c6:	1ae3      	subs	r3, r4, r3
   156c8:	2b03      	cmp	r3, #3
   156ca:	bfd4      	ite	le
   156cc:	2301      	movle	r3, #1
   156ce:	2300      	movgt	r3, #0
   156d0:	b2db      	uxtb	r3, r3
   156d2:	687a      	ldr	r2, [r7, #4]
   156d4:	7793      	strb	r3, [r2, #30]
	//return isOK;
	return true;
   156d6:	2301      	movs	r3, #1
}
   156d8:	4618      	mov	r0, r3
   156da:	370c      	adds	r7, #12
   156dc:	46bd      	mov	sp, r7
   156de:	bd90      	pop	{r4, r7, pc}
   156e0:	00015401 	.word	0x00015401
   156e4:	000155cd 	.word	0x000155cd

000156e8 <_Z41__static_initialization_and_destruction_0ii>:

FlapperValve_Class::operator bool(){
	return	isOK;
}

   156e8:	b580      	push	{r7, lr}
   156ea:	b082      	sub	sp, #8
   156ec:	af00      	add	r7, sp, #0
   156ee:	6078      	str	r0, [r7, #4]
   156f0:	6039      	str	r1, [r7, #0]
   156f2:	687b      	ldr	r3, [r7, #4]
   156f4:	2b01      	cmp	r3, #1
   156f6:	d116      	bne.n	15726 <_Z41__static_initialization_and_destruction_0ii+0x3e>
   156f8:	683b      	ldr	r3, [r7, #0]
   156fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   156fe:	4293      	cmp	r3, r2
   15700:	d111      	bne.n	15726 <_Z41__static_initialization_and_destruction_0ii+0x3e>
static MCP23017_Class staticExpander(&I2C_EXPANDER);
   15702:	490b      	ldr	r1, [pc, #44]	; (15730 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   15704:	480b      	ldr	r0, [pc, #44]	; (15734 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15706:	4b0c      	ldr	r3, [pc, #48]	; (15738 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15708:	4798      	blx	r3
   1570a:	4a0c      	ldr	r2, [pc, #48]	; (1573c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1570c:	490c      	ldr	r1, [pc, #48]	; (15740 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1570e:	4809      	ldr	r0, [pc, #36]	; (15734 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15710:	4b0c      	ldr	r3, [pc, #48]	; (15744 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15712:	4798      	blx	r3
   15714:	2101      	movs	r1, #1
   15716:	480c      	ldr	r0, [pc, #48]	; (15748 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   15718:	4b0c      	ldr	r3, [pc, #48]	; (1574c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1571a:	4798      	blx	r3
   1571c:	4a07      	ldr	r2, [pc, #28]	; (1573c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1571e:	490c      	ldr	r1, [pc, #48]	; (15750 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   15720:	4809      	ldr	r0, [pc, #36]	; (15748 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   15722:	4b08      	ldr	r3, [pc, #32]	; (15744 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15724:	4798      	blx	r3
   15726:	bf00      	nop
   15728:	3708      	adds	r7, #8
   1572a:	46bd      	mov	sp, r7
   1572c:	bd80      	pop	{r7, pc}
   1572e:	bf00      	nop
   15730:	2000a85c 	.word	0x2000a85c
   15734:	20009ab0 	.word	0x20009ab0
   15738:	000157a9 	.word	0x000157a9
   1573c:	20000000 	.word	0x20000000
   15740:	000157ed 	.word	0x000157ed
   15744:	00019d41 	.word	0x00019d41
   15748:	20009b10 	.word	0x20009b10
   1574c:	00015259 	.word	0x00015259
   15750:	000152bd 	.word	0x000152bd

00015754 <_GLOBAL__sub_I_ptrFlapperValveClass>:
   15754:	b580      	push	{r7, lr}
   15756:	af00      	add	r7, sp, #0
   15758:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1575c:	2001      	movs	r0, #1
   1575e:	4b01      	ldr	r3, [pc, #4]	; (15764 <_GLOBAL__sub_I_ptrFlapperValveClass+0x10>)
   15760:	4798      	blx	r3
   15762:	bd80      	pop	{r7, pc}
   15764:	000156e9 	.word	0x000156e9

00015768 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   15768:	b480      	push	{r7}
   1576a:	b083      	sub	sp, #12
   1576c:	af00      	add	r7, sp, #0
   1576e:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   15770:	687b      	ldr	r3, [r7, #4]
   15772:	4618      	mov	r0, r3
   15774:	370c      	adds	r7, #12
   15776:	46bd      	mov	sp, r7
   15778:	bc80      	pop	{r7}
   1577a:	4770      	bx	lr

0001577c <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   1577c:	b480      	push	{r7}
   1577e:	b083      	sub	sp, #12
   15780:	af00      	add	r7, sp, #0
   15782:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   15784:	687b      	ldr	r3, [r7, #4]
   15786:	4618      	mov	r0, r3
   15788:	370c      	adds	r7, #12
   1578a:	46bd      	mov	sp, r7
   1578c:	bc80      	pop	{r7}
   1578e:	4770      	bx	lr

00015790 <_ZL13MCPHadChangedv>:


MCP23017_Class	*ptrMCP23017Class;
static I2C_Sync_Class  i2cStatic;

static void	MCPHadChanged(void){
   15790:	b480      	push	{r7}
   15792:	af00      	add	r7, sp, #0
	
			ptrMCP23017Class->hasChanged=true;
   15794:	4b03      	ldr	r3, [pc, #12]	; (157a4 <_ZL13MCPHadChangedv+0x14>)
   15796:	681b      	ldr	r3, [r3, #0]
   15798:	2201      	movs	r2, #1
   1579a:	705a      	strb	r2, [r3, #1]

}
   1579c:	bf00      	nop
   1579e:	46bd      	mov	sp, r7
   157a0:	bc80      	pop	{r7}
   157a2:	4770      	bx	lr
   157a4:	20009bf4 	.word	0x20009bf4

000157a8 <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc>:
{
	ptrI2CAsynDescr=i2cDes;
	ptrMCP23017Class=this;
} //AT24MAC_Class

MCP23017_Class::MCP23017_Class(i2c_m_sync_desc *i2cDes)
   157a8:	b580      	push	{r7, lr}
   157aa:	b082      	sub	sp, #8
   157ac:	af00      	add	r7, sp, #0
   157ae:	6078      	str	r0, [r7, #4]
   157b0:	6039      	str	r1, [r7, #0]
   157b2:	687b      	ldr	r3, [r7, #4]
   157b4:	3304      	adds	r3, #4
   157b6:	4618      	mov	r0, r3
   157b8:	4b09      	ldr	r3, [pc, #36]	; (157e0 <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc+0x38>)
   157ba:	4798      	blx	r3
{
	ptrI2CDescr=i2cDes;
   157bc:	687b      	ldr	r3, [r7, #4]
   157be:	683a      	ldr	r2, [r7, #0]
   157c0:	64da      	str	r2, [r3, #76]	; 0x4c
	ptrMCP23017Class=this;
   157c2:	4a08      	ldr	r2, [pc, #32]	; (157e4 <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc+0x3c>)
   157c4:	687b      	ldr	r3, [r7, #4]
   157c6:	6013      	str	r3, [r2, #0]
	isReady=false;
   157c8:	687b      	ldr	r3, [r7, #4]
   157ca:	2200      	movs	r2, #0
   157cc:	701a      	strb	r2, [r3, #0]
	i2c=&i2cStatic;
   157ce:	687b      	ldr	r3, [r7, #4]
   157d0:	4a05      	ldr	r2, [pc, #20]	; (157e8 <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc+0x40>)
   157d2:	651a      	str	r2, [r3, #80]	; 0x50
} //AT24MAC_Class
   157d4:	687b      	ldr	r3, [r7, #4]
   157d6:	4618      	mov	r0, r3
   157d8:	3708      	adds	r7, #8
   157da:	46bd      	mov	sp, r7
   157dc:	bd80      	pop	{r7, pc}
   157de:	bf00      	nop
   157e0:	00018d55 	.word	0x00018d55
   157e4:	20009bf4 	.word	0x20009bf4
   157e8:	20009bf8 	.word	0x20009bf8

000157ec <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
   157ec:	b580      	push	{r7, lr}
   157ee:	b082      	sub	sp, #8
   157f0:	af00      	add	r7, sp, #0
   157f2:	6078      	str	r0, [r7, #4]
   157f4:	687b      	ldr	r3, [r7, #4]
   157f6:	3304      	adds	r3, #4
   157f8:	4618      	mov	r0, r3
   157fa:	4b03      	ldr	r3, [pc, #12]	; (15808 <_ZN14MCP23017_ClassD1Ev+0x1c>)
   157fc:	4798      	blx	r3
{
} //~AT24MAC_Class
   157fe:	687b      	ldr	r3, [r7, #4]
   15800:	4618      	mov	r0, r3
   15802:	3708      	adds	r7, #8
   15804:	46bd      	mov	sp, r7
   15806:	bd80      	pop	{r7, pc}
   15808:	00018d85 	.word	0x00018d85

0001580c <_ZN14MCP23017_Class4InitEh>:

void MCP23017_Class::Init(uint8_t addr) {
   1580c:	b580      	push	{r7, lr}
   1580e:	b082      	sub	sp, #8
   15810:	af00      	add	r7, sp, #0
   15812:	6078      	str	r0, [r7, #4]
   15814:	460b      	mov	r3, r1
   15816:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   15818:	687b      	ldr	r3, [r7, #4]
   1581a:	78fa      	ldrb	r2, [r7, #3]
   1581c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c->SetDescriptor(ptrI2CDescr);
   15820:	687b      	ldr	r3, [r7, #4]
   15822:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   15824:	687b      	ldr	r3, [r7, #4]
   15826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15828:	4619      	mov	r1, r3
   1582a:	4610      	mov	r0, r2
   1582c:	4b0b      	ldr	r3, [pc, #44]	; (1585c <_ZN14MCP23017_Class4InitEh+0x50>)
   1582e:	4798      	blx	r3
	isReady=i2c->Init(addr)==0;
   15830:	687b      	ldr	r3, [r7, #4]
   15832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   15834:	78fa      	ldrb	r2, [r7, #3]
   15836:	4611      	mov	r1, r2
   15838:	4618      	mov	r0, r3
   1583a:	4b09      	ldr	r3, [pc, #36]	; (15860 <_ZN14MCP23017_Class4InitEh+0x54>)
   1583c:	4798      	blx	r3
   1583e:	4603      	mov	r3, r0
   15840:	f083 0301 	eor.w	r3, r3, #1
   15844:	b2da      	uxtb	r2, r3
   15846:	687b      	ldr	r3, [r7, #4]
   15848:	701a      	strb	r2, [r3, #0]
	ext_irq_register(PIN_PA04,FUNC_PTR(MCPHadChanged));
   1584a:	4906      	ldr	r1, [pc, #24]	; (15864 <_ZN14MCP23017_Class4InitEh+0x58>)
   1584c:	2004      	movs	r0, #4
   1584e:	4b06      	ldr	r3, [pc, #24]	; (15868 <_ZN14MCP23017_Class4InitEh+0x5c>)
   15850:	4798      	blx	r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   15852:	bf00      	nop
   15854:	3708      	adds	r7, #8
   15856:	46bd      	mov	sp, r7
   15858:	bd80      	pop	{r7, pc}
   1585a:	bf00      	nop
   1585c:	000150e1 	.word	0x000150e1
   15860:	00015165 	.word	0x00015165
   15864:	00015791 	.word	0x00015791
   15868:	000067f5 	.word	0x000067f5

0001586c <_ZN14MCP23017_Class4InitEv>:


/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
bool MCP23017_Class::Init(void) {
   1586c:	b580      	push	{r7, lr}
   1586e:	b082      	sub	sp, #8
   15870:	af00      	add	r7, sp, #0
   15872:	6078      	str	r0, [r7, #4]
    Init((uint8_t)MCP23017_ADDRESS);
   15874:	2127      	movs	r1, #39	; 0x27
   15876:	6878      	ldr	r0, [r7, #4]
   15878:	4b0a      	ldr	r3, [pc, #40]	; (158a4 <_ZN14MCP23017_Class4InitEv+0x38>)
   1587a:	4798      	blx	r3
	isOK=i2c->isOK;
   1587c:	687b      	ldr	r3, [r7, #4]
   1587e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   15880:	7a5b      	ldrb	r3, [r3, #9]
   15882:	b2da      	uxtb	r2, r3
   15884:	687b      	ldr	r3, [r7, #4]
   15886:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	isReady=isOK;
   1588a:	687b      	ldr	r3, [r7, #4]
   1588c:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
   15890:	687b      	ldr	r3, [r7, #4]
   15892:	701a      	strb	r2, [r3, #0]
	return	isOK;	
   15894:	687b      	ldr	r3, [r7, #4]
   15896:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
}
   1589a:	4618      	mov	r0, r3
   1589c:	3708      	adds	r7, #8
   1589e:	46bd      	mov	sp, r7
   158a0:	bd80      	pop	{r7, pc}
   158a2:	bf00      	nop
   158a4:	0001580d 	.word	0x0001580d

000158a8 <_ZN14MCP23017_Class9bitForPinEh>:
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23017_Class::bitForPin(uint8_t pin){
   158a8:	b480      	push	{r7}
   158aa:	b083      	sub	sp, #12
   158ac:	af00      	add	r7, sp, #0
   158ae:	6078      	str	r0, [r7, #4]
   158b0:	460b      	mov	r3, r1
   158b2:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   158b4:	78fb      	ldrb	r3, [r7, #3]
   158b6:	f003 0307 	and.w	r3, r3, #7
   158ba:	b2db      	uxtb	r3, r3
}
   158bc:	4618      	mov	r0, r3
   158be:	370c      	adds	r7, #12
   158c0:	46bd      	mov	sp, r7
   158c2:	bc80      	pop	{r7}
   158c4:	4770      	bx	lr

000158c6 <_ZN14MCP23017_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23017_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   158c6:	b480      	push	{r7}
   158c8:	b083      	sub	sp, #12
   158ca:	af00      	add	r7, sp, #0
   158cc:	6078      	str	r0, [r7, #4]
   158ce:	4608      	mov	r0, r1
   158d0:	4611      	mov	r1, r2
   158d2:	461a      	mov	r2, r3
   158d4:	4603      	mov	r3, r0
   158d6:	70fb      	strb	r3, [r7, #3]
   158d8:	460b      	mov	r3, r1
   158da:	70bb      	strb	r3, [r7, #2]
   158dc:	4613      	mov	r3, r2
   158de:	707b      	strb	r3, [r7, #1]
    return(pin<8) ?portAaddr:portBaddr;
   158e0:	78fb      	ldrb	r3, [r7, #3]
   158e2:	2b07      	cmp	r3, #7
   158e4:	dc01      	bgt.n	158ea <_ZN14MCP23017_Class9regForPinEhhh+0x24>
   158e6:	78bb      	ldrb	r3, [r7, #2]
   158e8:	e000      	b.n	158ec <_ZN14MCP23017_Class9regForPinEhhh+0x26>
   158ea:	787b      	ldrb	r3, [r7, #1]
}
   158ec:	4618      	mov	r0, r3
   158ee:	370c      	adds	r7, #12
   158f0:	46bd      	mov	sp, r7
   158f2:	bc80      	pop	{r7}
   158f4:	4770      	bx	lr
	...

000158f8 <_ZN14MCP23017_Class12ReadRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23017_Class::ReadRegister(uint8_t addr){
   158f8:	b580      	push	{r7, lr}
   158fa:	b082      	sub	sp, #8
   158fc:	af00      	add	r7, sp, #0
   158fe:	6078      	str	r0, [r7, #4]
   15900:	460b      	mov	r3, r1
   15902:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);

	//i2c->ReadCommand(addr,&registerValue,1);
	i2c->Write(&addr,1);
   15904:	687b      	ldr	r3, [r7, #4]
   15906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   15908:	1cf9      	adds	r1, r7, #3
   1590a:	2201      	movs	r2, #1
   1590c:	4618      	mov	r0, r3
   1590e:	4b08      	ldr	r3, [pc, #32]	; (15930 <_ZN14MCP23017_Class12ReadRegisterEh+0x38>)
   15910:	4798      	blx	r3
	i2c->Read(&registerValue,1);
   15912:	687b      	ldr	r3, [r7, #4]
   15914:	6d18      	ldr	r0, [r3, #80]	; 0x50
   15916:	687b      	ldr	r3, [r7, #4]
   15918:	3355      	adds	r3, #85	; 0x55
   1591a:	2201      	movs	r2, #1
   1591c:	4619      	mov	r1, r3
   1591e:	4b05      	ldr	r3, [pc, #20]	; (15934 <_ZN14MCP23017_Class12ReadRegisterEh+0x3c>)
   15920:	4798      	blx	r3
	return registerValue;
   15922:	687b      	ldr	r3, [r7, #4]
   15924:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
}
   15928:	4618      	mov	r0, r3
   1592a:	3708      	adds	r7, #8
   1592c:	46bd      	mov	sp, r7
   1592e:	bd80      	pop	{r7, pc}
   15930:	000151a9 	.word	0x000151a9
   15934:	000151d5 	.word	0x000151d5

00015938 <_ZN14MCP23017_Class13WriteRegisterEhh>:


/**
 * Writes a given register
 */
void MCP23017_Class::WriteRegister(uint8_t addr, uint8_t value){
   15938:	b580      	push	{r7, lr}
   1593a:	b084      	sub	sp, #16
   1593c:	af00      	add	r7, sp, #0
   1593e:	6078      	str	r0, [r7, #4]
   15940:	460b      	mov	r3, r1
   15942:	70fb      	strb	r3, [r7, #3]
   15944:	4613      	mov	r3, r2
   15946:	70bb      	strb	r3, [r7, #2]
	// Write the register
	//isReady=false;
	uint8_t array[2];
	array[0]=addr;
   15948:	78fb      	ldrb	r3, [r7, #3]
   1594a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   1594c:	78bb      	ldrb	r3, [r7, #2]
   1594e:	737b      	strb	r3, [r7, #13]
	i2c->Write(array,2);
   15950:	687b      	ldr	r3, [r7, #4]
   15952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   15954:	f107 010c 	add.w	r1, r7, #12
   15958:	2202      	movs	r2, #2
   1595a:	4618      	mov	r0, r3
   1595c:	4b02      	ldr	r3, [pc, #8]	; (15968 <_ZN14MCP23017_Class13WriteRegisterEhh+0x30>)
   1595e:	4798      	blx	r3
	//while(!i2ca.txReady);
}
   15960:	bf00      	nop
   15962:	3710      	adds	r7, #16
   15964:	46bd      	mov	sp, r7
   15966:	bd80      	pop	{r7, pc}
   15968:	000151a9 	.word	0x000151a9

0001596c <_ZN14MCP23017_Class14WriteRegisterBEh>:
uint8_t MCP23017_Class::WriteRegisterB(uint8_t value){
   1596c:	b580      	push	{r7, lr}
   1596e:	b082      	sub	sp, #8
   15970:	af00      	add	r7, sp, #0
   15972:	6078      	str	r0, [r7, #4]
   15974:	460b      	mov	r3, r1
   15976:	70fb      	strb	r3, [r7, #3]
	WriteRegister(MCP23017_GPIOB,value);
   15978:	78fb      	ldrb	r3, [r7, #3]
   1597a:	461a      	mov	r2, r3
   1597c:	2113      	movs	r1, #19
   1597e:	6878      	ldr	r0, [r7, #4]
   15980:	4b03      	ldr	r3, [pc, #12]	; (15990 <_ZN14MCP23017_Class14WriteRegisterBEh+0x24>)
   15982:	4798      	blx	r3
	return value;
   15984:	78fb      	ldrb	r3, [r7, #3]
}
   15986:	4618      	mov	r0, r3
   15988:	3708      	adds	r7, #8
   1598a:	46bd      	mov	sp, r7
   1598c:	bd80      	pop	{r7, pc}
   1598e:	bf00      	nop
   15990:	00015939 	.word	0x00015939

00015994 <_ZN14MCP23017_Class13SetPortAInputEv>:

void	MCP23017_Class::SetPortAInput(void){
   15994:	b580      	push	{r7, lr}
   15996:	b084      	sub	sp, #16
   15998:	af00      	add	r7, sp, #0
   1599a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   1599c:	2300      	movs	r3, #0
   1599e:	73fb      	strb	r3, [r7, #15]
   159a0:	7bfb      	ldrb	r3, [r7, #15]
   159a2:	2b07      	cmp	r3, #7
   159a4:	dc0f      	bgt.n	159c6 <_ZN14MCP23017_Class13SetPortAInputEv+0x32>
	{
		pinMode(i,INPUT);
   159a6:	7bfb      	ldrb	r3, [r7, #15]
   159a8:	2200      	movs	r2, #0
   159aa:	4619      	mov	r1, r3
   159ac:	6878      	ldr	r0, [r7, #4]
   159ae:	4b08      	ldr	r3, [pc, #32]	; (159d0 <_ZN14MCP23017_Class13SetPortAInputEv+0x3c>)
   159b0:	4798      	blx	r3
		pullUp(i,HIGH);
   159b2:	7bfb      	ldrb	r3, [r7, #15]
   159b4:	2201      	movs	r2, #1
   159b6:	4619      	mov	r1, r3
   159b8:	6878      	ldr	r0, [r7, #4]
   159ba:	4b06      	ldr	r3, [pc, #24]	; (159d4 <_ZN14MCP23017_Class13SetPortAInputEv+0x40>)
   159bc:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   159be:	7bfb      	ldrb	r3, [r7, #15]
   159c0:	3301      	adds	r3, #1
   159c2:	73fb      	strb	r3, [r7, #15]
   159c4:	e7ec      	b.n	159a0 <_ZN14MCP23017_Class13SetPortAInputEv+0xc>
	}
}
   159c6:	bf00      	nop
   159c8:	3710      	adds	r7, #16
   159ca:	46bd      	mov	sp, r7
   159cc:	bd80      	pop	{r7, pc}
   159ce:	bf00      	nop
   159d0:	00015aa9 	.word	0x00015aa9
   159d4:	00015ae1 	.word	0x00015ae1

000159d8 <_ZN14MCP23017_Class14SetPortBOutputEv>:
void	MCP23017_Class::SetPortBOutput(void){
   159d8:	b580      	push	{r7, lr}
   159da:	b084      	sub	sp, #16
   159dc:	af00      	add	r7, sp, #0
   159de:	6078      	str	r0, [r7, #4]
	for (uint8_t i=8;i<16;i++)
   159e0:	2308      	movs	r3, #8
   159e2:	73fb      	strb	r3, [r7, #15]
   159e4:	7bfb      	ldrb	r3, [r7, #15]
   159e6:	2b0f      	cmp	r3, #15
   159e8:	dc09      	bgt.n	159fe <_ZN14MCP23017_Class14SetPortBOutputEv+0x26>
	{
		pinMode(i,OUTPUT);
   159ea:	7bfb      	ldrb	r3, [r7, #15]
   159ec:	2201      	movs	r2, #1
   159ee:	4619      	mov	r1, r3
   159f0:	6878      	ldr	r0, [r7, #4]
   159f2:	4b05      	ldr	r3, [pc, #20]	; (15a08 <_ZN14MCP23017_Class14SetPortBOutputEv+0x30>)
   159f4:	4798      	blx	r3
	for (uint8_t i=8;i<16;i++)
   159f6:	7bfb      	ldrb	r3, [r7, #15]
   159f8:	3301      	adds	r3, #1
   159fa:	73fb      	strb	r3, [r7, #15]
   159fc:	e7f2      	b.n	159e4 <_ZN14MCP23017_Class14SetPortBOutputEv+0xc>
	}
}
   159fe:	bf00      	nop
   15a00:	3710      	adds	r7, #16
   15a02:	46bd      	mov	sp, r7
   15a04:	bd80      	pop	{r7, pc}
   15a06:	bf00      	nop
   15a08:	00015aa9 	.word	0x00015aa9

00015a0c <_ZN14MCP23017_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23017_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   15a0c:	b590      	push	{r4, r7, lr}
   15a0e:	b085      	sub	sp, #20
   15a10:	af00      	add	r7, sp, #0
   15a12:	6078      	str	r0, [r7, #4]
   15a14:	4608      	mov	r0, r1
   15a16:	4611      	mov	r1, r2
   15a18:	461a      	mov	r2, r3
   15a1a:	4603      	mov	r3, r0
   15a1c:	70fb      	strb	r3, [r7, #3]
   15a1e:	460b      	mov	r3, r1
   15a20:	70bb      	strb	r3, [r7, #2]
   15a22:	4613      	mov	r3, r2
   15a24:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
   15a26:	f897 3020 	ldrb.w	r3, [r7, #32]
   15a2a:	787a      	ldrb	r2, [r7, #1]
   15a2c:	78f9      	ldrb	r1, [r7, #3]
   15a2e:	6878      	ldr	r0, [r7, #4]
   15a30:	4c19      	ldr	r4, [pc, #100]	; (15a98 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x8c>)
   15a32:	47a0      	blx	r4
   15a34:	4603      	mov	r3, r0
   15a36:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   15a38:	78fb      	ldrb	r3, [r7, #3]
   15a3a:	4619      	mov	r1, r3
   15a3c:	6878      	ldr	r0, [r7, #4]
   15a3e:	4b17      	ldr	r3, [pc, #92]	; (15a9c <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x90>)
   15a40:	4798      	blx	r3
   15a42:	4603      	mov	r3, r0
   15a44:	737b      	strb	r3, [r7, #13]
	regValue = ReadRegister(regAddr);
   15a46:	7bfb      	ldrb	r3, [r7, #15]
   15a48:	4619      	mov	r1, r3
   15a4a:	6878      	ldr	r0, [r7, #4]
   15a4c:	4b14      	ldr	r3, [pc, #80]	; (15aa0 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x94>)
   15a4e:	4798      	blx	r3
   15a50:	4603      	mov	r3, r0
   15a52:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   15a54:	78bb      	ldrb	r3, [r7, #2]
   15a56:	2b00      	cmp	r3, #0
   15a58:	d009      	beq.n	15a6e <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x62>
   15a5a:	7bba      	ldrb	r2, [r7, #14]
   15a5c:	7b7b      	ldrb	r3, [r7, #13]
   15a5e:	4619      	mov	r1, r3
   15a60:	2301      	movs	r3, #1
   15a62:	408b      	lsls	r3, r1
   15a64:	b2db      	uxtb	r3, r3
   15a66:	4313      	orrs	r3, r2
   15a68:	b2db      	uxtb	r3, r3
   15a6a:	73bb      	strb	r3, [r7, #14]
   15a6c:	e00a      	b.n	15a84 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x78>
   15a6e:	7bba      	ldrb	r2, [r7, #14]
   15a70:	7b7b      	ldrb	r3, [r7, #13]
   15a72:	4619      	mov	r1, r3
   15a74:	2301      	movs	r3, #1
   15a76:	408b      	lsls	r3, r1
   15a78:	b2db      	uxtb	r3, r3
   15a7a:	43db      	mvns	r3, r3
   15a7c:	b2db      	uxtb	r3, r3
   15a7e:	4013      	ands	r3, r2
   15a80:	b2db      	uxtb	r3, r3
   15a82:	73bb      	strb	r3, [r7, #14]

	WriteRegister(regAddr,regValue);
   15a84:	7bba      	ldrb	r2, [r7, #14]
   15a86:	7bfb      	ldrb	r3, [r7, #15]
   15a88:	4619      	mov	r1, r3
   15a8a:	6878      	ldr	r0, [r7, #4]
   15a8c:	4b05      	ldr	r3, [pc, #20]	; (15aa4 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x98>)
   15a8e:	4798      	blx	r3
}
   15a90:	bf00      	nop
   15a92:	3714      	adds	r7, #20
   15a94:	46bd      	mov	sp, r7
   15a96:	bd90      	pop	{r4, r7, pc}
   15a98:	000158c7 	.word	0x000158c7
   15a9c:	000158a9 	.word	0x000158a9
   15aa0:	000158f9 	.word	0x000158f9
   15aa4:	00015939 	.word	0x00015939

00015aa8 <_ZN14MCP23017_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23017_Class::pinMode(uint8_t p, uint8_t d) {
   15aa8:	b590      	push	{r4, r7, lr}
   15aaa:	b085      	sub	sp, #20
   15aac:	af02      	add	r7, sp, #8
   15aae:	6078      	str	r0, [r7, #4]
   15ab0:	460b      	mov	r3, r1
   15ab2:	70fb      	strb	r3, [r7, #3]
   15ab4:	4613      	mov	r3, r2
   15ab6:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   15ab8:	78bb      	ldrb	r3, [r7, #2]
   15aba:	2b00      	cmp	r3, #0
   15abc:	bf0c      	ite	eq
   15abe:	2301      	moveq	r3, #1
   15ac0:	2300      	movne	r3, #0
   15ac2:	b2db      	uxtb	r3, r3
   15ac4:	461a      	mov	r2, r3
   15ac6:	78f9      	ldrb	r1, [r7, #3]
   15ac8:	2301      	movs	r3, #1
   15aca:	9300      	str	r3, [sp, #0]
   15acc:	2300      	movs	r3, #0
   15ace:	6878      	ldr	r0, [r7, #4]
   15ad0:	4c02      	ldr	r4, [pc, #8]	; (15adc <_ZN14MCP23017_Class7pinModeEhh+0x34>)
   15ad2:	47a0      	blx	r4
}
   15ad4:	bf00      	nop
   15ad6:	370c      	adds	r7, #12
   15ad8:	46bd      	mov	sp, r7
   15ada:	bd90      	pop	{r4, r7, pc}
   15adc:	00015a0d 	.word	0x00015a0d

00015ae0 <_ZN14MCP23017_Class6pullUpEhh>:
	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	WriteRegister(regAddr,gpio);
}

void MCP23017_Class::pullUp(uint8_t p, uint8_t d) {
   15ae0:	b590      	push	{r4, r7, lr}
   15ae2:	b085      	sub	sp, #20
   15ae4:	af02      	add	r7, sp, #8
   15ae6:	6078      	str	r0, [r7, #4]
   15ae8:	460b      	mov	r3, r1
   15aea:	70fb      	strb	r3, [r7, #3]
   15aec:	4613      	mov	r3, r2
   15aee:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   15af0:	78ba      	ldrb	r2, [r7, #2]
   15af2:	78f9      	ldrb	r1, [r7, #3]
   15af4:	230d      	movs	r3, #13
   15af6:	9300      	str	r3, [sp, #0]
   15af8:	230c      	movs	r3, #12
   15afa:	6878      	ldr	r0, [r7, #4]
   15afc:	4c02      	ldr	r4, [pc, #8]	; (15b08 <_ZN14MCP23017_Class6pullUpEhh+0x28>)
   15afe:	47a0      	blx	r4
}
   15b00:	bf00      	nop
   15b02:	370c      	adds	r7, #12
   15b04:	46bd      	mov	sp, r7
   15b06:	bd90      	pop	{r4, r7, pc}
   15b08:	00015a0d 	.word	0x00015a0d

00015b0c <_Z41__static_initialization_and_destruction_0ii>:
	{
		isOK=false;
	}
	return isOK;
}
   15b0c:	b580      	push	{r7, lr}
   15b0e:	b082      	sub	sp, #8
   15b10:	af00      	add	r7, sp, #0
   15b12:	6078      	str	r0, [r7, #4]
   15b14:	6039      	str	r1, [r7, #0]
   15b16:	687b      	ldr	r3, [r7, #4]
   15b18:	2b01      	cmp	r3, #1
   15b1a:	d115      	bne.n	15b48 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   15b1c:	683b      	ldr	r3, [r7, #0]
   15b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15b22:	4293      	cmp	r3, r2
   15b24:	d110      	bne.n	15b48 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static I2C_Sync_Class  i2cStatic;
   15b26:	480a      	ldr	r0, [pc, #40]	; (15b50 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15b28:	4b0a      	ldr	r3, [pc, #40]	; (15b54 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   15b2a:	4798      	blx	r3
   15b2c:	4a0a      	ldr	r2, [pc, #40]	; (15b58 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15b2e:	490b      	ldr	r1, [pc, #44]	; (15b5c <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15b30:	4807      	ldr	r0, [pc, #28]	; (15b50 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15b32:	4b0b      	ldr	r3, [pc, #44]	; (15b60 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15b34:	4798      	blx	r3
   15b36:	490b      	ldr	r1, [pc, #44]	; (15b64 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   15b38:	480b      	ldr	r0, [pc, #44]	; (15b68 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15b3a:	4b0c      	ldr	r3, [pc, #48]	; (15b6c <_Z41__static_initialization_and_destruction_0ii+0x60>)
   15b3c:	4798      	blx	r3
   15b3e:	4a06      	ldr	r2, [pc, #24]	; (15b58 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15b40:	490b      	ldr	r1, [pc, #44]	; (15b70 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   15b42:	4809      	ldr	r0, [pc, #36]	; (15b68 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15b44:	4b06      	ldr	r3, [pc, #24]	; (15b60 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15b46:	4798      	blx	r3
   15b48:	bf00      	nop
   15b4a:	3708      	adds	r7, #8
   15b4c:	46bd      	mov	sp, r7
   15b4e:	bd80      	pop	{r7, pc}
   15b50:	20009bf8 	.word	0x20009bf8
   15b54:	0001509d 	.word	0x0001509d
   15b58:	20000000 	.word	0x20000000
   15b5c:	000150cd 	.word	0x000150cd
   15b60:	00019d41 	.word	0x00019d41
   15b64:	2000a85c 	.word	0x2000a85c
   15b68:	20009c0c 	.word	0x20009c0c
   15b6c:	000157a9 	.word	0x000157a9
   15b70:	000157ed 	.word	0x000157ed

00015b74 <_GLOBAL__sub_I_ptrMCP23017Class>:
   15b74:	b580      	push	{r7, lr}
   15b76:	af00      	add	r7, sp, #0
   15b78:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15b7c:	2001      	movs	r0, #1
   15b7e:	4b01      	ldr	r3, [pc, #4]	; (15b84 <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
   15b80:	4798      	blx	r3
   15b82:	bd80      	pop	{r7, pc}
   15b84:	00015b0d 	.word	0x00015b0d

00015b88 <_ZL15Converter1Readyv>:


#include "TemperatureSensors_Class.h"
static TemperatureSensors_Class	*ptrTemperaturesClass;

static void Converter1Ready(void){
   15b88:	b580      	push	{r7, lr}
   15b8a:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[0]=true;
   15b8c:	4b08      	ldr	r3, [pc, #32]	; (15bb0 <_ZL15Converter1Readyv+0x28>)
   15b8e:	681b      	ldr	r3, [r3, #0]
   15b90:	2201      	movs	r2, #1
   15b92:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	ptrTemperaturesClass->SetModuleReady(0);
   15b96:	4b06      	ldr	r3, [pc, #24]	; (15bb0 <_ZL15Converter1Readyv+0x28>)
   15b98:	681b      	ldr	r3, [r3, #0]
   15b9a:	2100      	movs	r1, #0
   15b9c:	4618      	mov	r0, r3
   15b9e:	4b05      	ldr	r3, [pc, #20]	; (15bb4 <_ZL15Converter1Readyv+0x2c>)
   15ba0:	4798      	blx	r3
	ptrTemperaturesClass->converterTimeout=false;
   15ba2:	4b03      	ldr	r3, [pc, #12]	; (15bb0 <_ZL15Converter1Readyv+0x28>)
   15ba4:	681b      	ldr	r3, [r3, #0]
   15ba6:	2200      	movs	r2, #0
   15ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
   15bac:	bf00      	nop
   15bae:	bd80      	pop	{r7, pc}
   15bb0:	20009c6c 	.word	0x20009c6c
   15bb4:	00015f39 	.word	0x00015f39

00015bb8 <_ZL15Converter2Readyv>:
static void Converter2Ready(void){
   15bb8:	b580      	push	{r7, lr}
   15bba:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[1]=true;
   15bbc:	4b08      	ldr	r3, [pc, #32]	; (15be0 <_ZL15Converter2Readyv+0x28>)
   15bbe:	681b      	ldr	r3, [r3, #0]
   15bc0:	2201      	movs	r2, #1
   15bc2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	ptrTemperaturesClass->SetModuleReady(1);
   15bc6:	4b06      	ldr	r3, [pc, #24]	; (15be0 <_ZL15Converter2Readyv+0x28>)
   15bc8:	681b      	ldr	r3, [r3, #0]
   15bca:	2101      	movs	r1, #1
   15bcc:	4618      	mov	r0, r3
   15bce:	4b05      	ldr	r3, [pc, #20]	; (15be4 <_ZL15Converter2Readyv+0x2c>)
   15bd0:	4798      	blx	r3
	ptrTemperaturesClass->converterTimeout=false;
   15bd2:	4b03      	ldr	r3, [pc, #12]	; (15be0 <_ZL15Converter2Readyv+0x28>)
   15bd4:	681b      	ldr	r3, [r3, #0]
   15bd6:	2200      	movs	r2, #0
   15bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
   15bdc:	bf00      	nop
   15bde:	bd80      	pop	{r7, pc}
   15be0:	20009c6c 	.word	0x20009c6c
   15be4:	00015f39 	.word	0x00015f39

00015be8 <_ZL17ConversionTimeoutPK10timer_task>:
static void	ConversionTimeout(const struct timer_task *const timer_task){
   15be8:	b480      	push	{r7}
   15bea:	b083      	sub	sp, #12
   15bec:	af00      	add	r7, sp, #0
   15bee:	6078      	str	r0, [r7, #4]
	ptrTemperaturesClass->converterTimeout=true;
   15bf0:	4b05      	ldr	r3, [pc, #20]	; (15c08 <_ZL17ConversionTimeoutPK10timer_task+0x20>)
   15bf2:	681b      	ldr	r3, [r3, #0]
   15bf4:	2201      	movs	r2, #1
   15bf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	asm("nop");
   15bfa:	bf00      	nop
}
   15bfc:	bf00      	nop
   15bfe:	370c      	adds	r7, #12
   15c00:	46bd      	mov	sp, r7
   15c02:	bc80      	pop	{r7}
   15c04:	4770      	bx	lr
   15c06:	bf00      	nop
   15c08:	20009c6c 	.word	0x20009c6c

00015c0c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
static LT_SPI	ltSPI;
// default constructor
TemperatureSensors_Class::TemperatureSensors_Class()
{
} //TemperatureSensors_Class
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   15c0c:	b5b0      	push	{r4, r5, r7, lr}
   15c0e:	b082      	sub	sp, #8
   15c10:	af00      	add	r7, sp, #0
   15c12:	6078      	str	r0, [r7, #4]
   15c14:	6039      	str	r1, [r7, #0]
   15c16:	687b      	ldr	r3, [r7, #4]
   15c18:	4618      	mov	r0, r3
   15c1a:	4b0f      	ldr	r3, [pc, #60]	; (15c58 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x4c>)
   15c1c:	4798      	blx	r3
   15c1e:	687b      	ldr	r3, [r7, #4]
   15c20:	3384      	adds	r3, #132	; 0x84
   15c22:	2401      	movs	r4, #1
   15c24:	461d      	mov	r5, r3
   15c26:	2c00      	cmp	r4, #0
   15c28:	db05      	blt.n	15c36 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x2a>
   15c2a:	4628      	mov	r0, r5
   15c2c:	4b0b      	ldr	r3, [pc, #44]	; (15c5c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x50>)
   15c2e:	4798      	blx	r3
   15c30:	355c      	adds	r5, #92	; 0x5c
   15c32:	3c01      	subs	r4, #1
   15c34:	e7f7      	b.n	15c26 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x1a>
{
		spiLite=&ltSPI;
   15c36:	687b      	ldr	r3, [r7, #4]
   15c38:	4a09      	ldr	r2, [pc, #36]	; (15c60 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x54>)
   15c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		ptrTemperaturesClass=this;
   15c3e:	4a09      	ldr	r2, [pc, #36]	; (15c64 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x58>)
   15c40:	687b      	ldr	r3, [r7, #4]
   15c42:	6013      	str	r3, [r2, #0]
		SPIA=SPI_LTC;
   15c44:	687b      	ldr	r3, [r7, #4]
   15c46:	683a      	ldr	r2, [r7, #0]
   15c48:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		
} //TemperatureSensors_Class
   15c4c:	687b      	ldr	r3, [r7, #4]
   15c4e:	4618      	mov	r0, r3
   15c50:	3708      	adds	r7, #8
   15c52:	46bd      	mov	sp, r7
   15c54:	bdb0      	pop	{r4, r5, r7, pc}
   15c56:	bf00      	nop
   15c58:	0001912d 	.word	0x0001912d
   15c5c:	0001912d 	.word	0x0001912d
   15c60:	20009c70 	.word	0x20009c70
   15c64:	20009c6c 	.word	0x20009c6c

00015c68 <_ZN24TemperatureSensors_ClassD1Ev>:

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   15c68:	b590      	push	{r4, r7, lr}
   15c6a:	b083      	sub	sp, #12
   15c6c:	af00      	add	r7, sp, #0
   15c6e:	6078      	str	r0, [r7, #4]
   15c70:	687b      	ldr	r3, [r7, #4]
   15c72:	3384      	adds	r3, #132	; 0x84
   15c74:	2b00      	cmp	r3, #0
   15c76:	d00c      	beq.n	15c92 <_ZN24TemperatureSensors_ClassD1Ev+0x2a>
   15c78:	687b      	ldr	r3, [r7, #4]
   15c7a:	3384      	adds	r3, #132	; 0x84
   15c7c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
   15c80:	687b      	ldr	r3, [r7, #4]
   15c82:	3384      	adds	r3, #132	; 0x84
   15c84:	42a3      	cmp	r3, r4
   15c86:	d004      	beq.n	15c92 <_ZN24TemperatureSensors_ClassD1Ev+0x2a>
   15c88:	3c5c      	subs	r4, #92	; 0x5c
   15c8a:	4620      	mov	r0, r4
   15c8c:	4b05      	ldr	r3, [pc, #20]	; (15ca4 <_ZN24TemperatureSensors_ClassD1Ev+0x3c>)
   15c8e:	4798      	blx	r3
   15c90:	e7f6      	b.n	15c80 <_ZN24TemperatureSensors_ClassD1Ev+0x18>
   15c92:	687b      	ldr	r3, [r7, #4]
   15c94:	4618      	mov	r0, r3
   15c96:	4b04      	ldr	r3, [pc, #16]	; (15ca8 <_ZN24TemperatureSensors_ClassD1Ev+0x40>)
   15c98:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   15c9a:	687b      	ldr	r3, [r7, #4]
   15c9c:	4618      	mov	r0, r3
   15c9e:	370c      	adds	r7, #12
   15ca0:	46bd      	mov	sp, r7
   15ca2:	bd90      	pop	{r4, r7, pc}
   15ca4:	00019141 	.word	0x00019141
   15ca8:	00019141 	.word	0x00019141

00015cac <_ZN24TemperatureSensors_Class4InitEv>:

bool	TemperatureSensors_Class::Init(void){
   15cac:	b580      	push	{r7, lr}
   15cae:	b082      	sub	sp, #8
   15cb0:	af00      	add	r7, sp, #0
   15cb2:	6078      	str	r0, [r7, #4]
	spiLite->set_descriptor(SPIA);
   15cb4:	687b      	ldr	r3, [r7, #4]
   15cb6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   15cba:	687b      	ldr	r3, [r7, #4]
   15cbc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   15cc0:	4619      	mov	r1, r3
   15cc2:	4610      	mov	r0, r2
   15cc4:	4b1a      	ldr	r3, [pc, #104]	; (15d30 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   15cc6:	4798      	blx	r3
	spiLite->init();
   15cc8:	687b      	ldr	r3, [r7, #4]
   15cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   15cce:	4618      	mov	r0, r3
   15cd0:	4b18      	ldr	r3, [pc, #96]	; (15d34 <_ZN24TemperatureSensors_Class4InitEv+0x88>)
   15cd2:	4798      	blx	r3
	ptrTemperaturesClass=this;
   15cd4:	4a18      	ldr	r2, [pc, #96]	; (15d38 <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
   15cd6:	687b      	ldr	r3, [r7, #4]
   15cd8:	6013      	str	r3, [r2, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   15cda:	4918      	ldr	r1, [pc, #96]	; (15d3c <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   15cdc:	2028      	movs	r0, #40	; 0x28
   15cde:	4b18      	ldr	r3, [pc, #96]	; (15d40 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   15ce0:	4798      	blx	r3
	ext_irq_register(PIN_PB09, Converter2Ready);
   15ce2:	4918      	ldr	r1, [pc, #96]	; (15d44 <_ZN24TemperatureSensors_Class4InitEv+0x98>)
   15ce4:	2029      	movs	r0, #41	; 0x29
   15ce6:	4b16      	ldr	r3, [pc, #88]	; (15d40 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   15ce8:	4798      	blx	r3
	InitModules();
   15cea:	6878      	ldr	r0, [r7, #4]
   15cec:	4b16      	ldr	r3, [pc, #88]	; (15d48 <_ZN24TemperatureSensors_Class4InitEv+0x9c>)
   15cee:	4798      	blx	r3
	currentModule=0; currentChannelIndex=0;
   15cf0:	687b      	ldr	r3, [r7, #4]
   15cf2:	2200      	movs	r2, #0
   15cf4:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
   15cf8:	687b      	ldr	r3, [r7, #4]
   15cfa:	2200      	movs	r2, #0
   15cfc:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	isOK=(module[0].isOK)&(module[1].isOK);
   15d00:	687b      	ldr	r3, [r7, #4]
   15d02:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   15d06:	461a      	mov	r2, r3
   15d08:	687b      	ldr	r3, [r7, #4]
   15d0a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
   15d0e:	4013      	ands	r3, r2
   15d10:	2b00      	cmp	r3, #0
   15d12:	bf14      	ite	ne
   15d14:	2301      	movne	r3, #1
   15d16:	2300      	moveq	r3, #0
   15d18:	b2da      	uxtb	r2, r3
   15d1a:	687b      	ldr	r3, [r7, #4]
   15d1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return isOK;
   15d20:	687b      	ldr	r3, [r7, #4]
   15d22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   15d26:	b2db      	uxtb	r3, r3
}
   15d28:	4618      	mov	r0, r3
   15d2a:	3708      	adds	r7, #8
   15d2c:	46bd      	mov	sp, r7
   15d2e:	bd80      	pop	{r7, pc}
   15d30:	00019979 	.word	0x00019979
   15d34:	0001991d 	.word	0x0001991d
   15d38:	20009c6c 	.word	0x20009c6c
   15d3c:	00015b89 	.word	0x00015b89
   15d40:	000067f5 	.word	0x000067f5
   15d44:	00015bb9 	.word	0x00015bb9
   15d48:	00015d4d 	.word	0x00015d4d

00015d4c <_ZN24TemperatureSensors_Class11InitModulesEv>:

bool TemperatureSensors_Class::InitModules(void){
   15d4c:	b580      	push	{r7, lr}
   15d4e:	b084      	sub	sp, #16
   15d50:	af00      	add	r7, sp, #0
   15d52:	6078      	str	r0, [r7, #4]
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2;
   15d54:	687b      	ldr	r3, [r7, #4]
   15d56:	223d      	movs	r2, #61	; 0x3d
   15d58:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   15d5c:	687b      	ldr	r3, [r7, #4]
   15d5e:	221b      	movs	r2, #27
   15d60:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   15d64:	2300      	movs	r3, #0
   15d66:	73fb      	strb	r3, [r7, #15]
   15d68:	7bfb      	ldrb	r3, [r7, #15]
   15d6a:	2b01      	cmp	r3, #1
   15d6c:	dc17      	bgt.n	15d9e <_ZN24TemperatureSensors_Class11InitModulesEv+0x52>
	{
		module[ii].Init(csPins[ii],spiLite);
   15d6e:	7bfb      	ldrb	r3, [r7, #15]
   15d70:	225c      	movs	r2, #92	; 0x5c
   15d72:	fb02 f303 	mul.w	r3, r2, r3
   15d76:	3380      	adds	r3, #128	; 0x80
   15d78:	687a      	ldr	r2, [r7, #4]
   15d7a:	4413      	add	r3, r2
   15d7c:	1d18      	adds	r0, r3, #4
   15d7e:	7bfb      	ldrb	r3, [r7, #15]
   15d80:	687a      	ldr	r2, [r7, #4]
   15d82:	334e      	adds	r3, #78	; 0x4e
   15d84:	009b      	lsls	r3, r3, #2
   15d86:	4413      	add	r3, r2
   15d88:	6859      	ldr	r1, [r3, #4]
   15d8a:	687b      	ldr	r3, [r7, #4]
   15d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   15d90:	461a      	mov	r2, r3
   15d92:	4b05      	ldr	r3, [pc, #20]	; (15da8 <_ZN24TemperatureSensors_Class11InitModulesEv+0x5c>)
   15d94:	4798      	blx	r3
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   15d96:	7bfb      	ldrb	r3, [r7, #15]
   15d98:	3301      	adds	r3, #1
   15d9a:	73fb      	strb	r3, [r7, #15]
   15d9c:	e7e4      	b.n	15d68 <_ZN24TemperatureSensors_Class11InitModulesEv+0x1c>
	}

}
   15d9e:	bf00      	nop
   15da0:	4618      	mov	r0, r3
   15da2:	3710      	adds	r7, #16
   15da4:	46bd      	mov	sp, r7
   15da6:	bd80      	pop	{r7, pc}
   15da8:	00019155 	.word	0x00019155

00015dac <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   15dac:	b580      	push	{r7, lr}
   15dae:	b082      	sub	sp, #8
   15db0:	af00      	add	r7, sp, #0
   15db2:	6078      	str	r0, [r7, #4]
	converterTimeout=false;
   15db4:	687b      	ldr	r3, [r7, #4]
   15db6:	2200      	movs	r2, #0
   15db8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	converterReady[currentModule]=false;
   15dbc:	687b      	ldr	r3, [r7, #4]
   15dbe:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15dc2:	461a      	mov	r2, r3
   15dc4:	687b      	ldr	r3, [r7, #4]
   15dc6:	4413      	add	r3, r2
   15dc8:	2200      	movs	r2, #0
   15dca:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   15dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15dd2:	490d      	ldr	r1, [pc, #52]	; (15e08 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x5c>)
   15dd4:	480d      	ldr	r0, [pc, #52]	; (15e0c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x60>)
   15dd6:	4b0e      	ldr	r3, [pc, #56]	; (15e10 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x64>)
   15dd8:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   15dda:	687b      	ldr	r3, [r7, #4]
   15ddc:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15de0:	461a      	mov	r2, r3
   15de2:	235c      	movs	r3, #92	; 0x5c
   15de4:	fb03 f302 	mul.w	r3, r3, r2
   15de8:	3380      	adds	r3, #128	; 0x80
   15dea:	687a      	ldr	r2, [r7, #4]
   15dec:	4413      	add	r3, r2
   15dee:	1d1a      	adds	r2, r3, #4
   15df0:	687b      	ldr	r3, [r7, #4]
   15df2:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15df6:	4619      	mov	r1, r3
   15df8:	4610      	mov	r0, r2
   15dfa:	4b06      	ldr	r3, [pc, #24]	; (15e14 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x68>)
   15dfc:	4798      	blx	r3
	
}
   15dfe:	bf00      	nop
   15e00:	3708      	adds	r7, #8
   15e02:	46bd      	mov	sp, r7
   15e04:	bd80      	pop	{r7, pc}
   15e06:	bf00      	nop
   15e08:	00015be9 	.word	0x00015be9
   15e0c:	2000a2d8 	.word	0x2000a2d8
   15e10:	00017c25 	.word	0x00017c25
   15e14:	00019241 	.word	0x00019241

00015e18 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   15e18:	b590      	push	{r4, r7, lr}
   15e1a:	b083      	sub	sp, #12
   15e1c:	af00      	add	r7, sp, #0
   15e1e:	6078      	str	r0, [r7, #4]
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   15e20:	4934      	ldr	r1, [pc, #208]	; (15ef4 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xdc>)
   15e22:	4835      	ldr	r0, [pc, #212]	; (15ef8 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe0>)
   15e24:	4b35      	ldr	r3, [pc, #212]	; (15efc <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe4>)
   15e26:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   15e28:	687b      	ldr	r3, [r7, #4]
   15e2a:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15e2e:	461a      	mov	r2, r3
   15e30:	235c      	movs	r3, #92	; 0x5c
   15e32:	fb03 f302 	mul.w	r3, r3, r2
   15e36:	3380      	adds	r3, #128	; 0x80
   15e38:	687a      	ldr	r2, [r7, #4]
   15e3a:	4413      	add	r3, r2
   15e3c:	1d1a      	adds	r2, r3, #4
   15e3e:	687b      	ldr	r3, [r7, #4]
   15e40:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15e44:	4619      	mov	r1, r3
   15e46:	4610      	mov	r0, r2
   15e48:	4b2d      	ldr	r3, [pc, #180]	; (15f00 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe8>)
   15e4a:	4798      	blx	r3
   15e4c:	4602      	mov	r2, r0
   15e4e:	687b      	ldr	r3, [r7, #4]
   15e50:	67da      	str	r2, [r3, #124]	; 0x7c
	faultData=module[currentModule].fault_data;
   15e52:	687b      	ldr	r3, [r7, #4]
   15e54:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15e58:	4619      	mov	r1, r3
   15e5a:	687a      	ldr	r2, [r7, #4]
   15e5c:	235c      	movs	r3, #92	; 0x5c
   15e5e:	fb03 f301 	mul.w	r3, r3, r1
   15e62:	4413      	add	r3, r2
   15e64:	338a      	adds	r3, #138	; 0x8a
   15e66:	781a      	ldrb	r2, [r3, #0]
   15e68:	687b      	ldr	r3, [r7, #4]
   15e6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		if (faultData==VALID_TEMPERATURE)
   15e6e:	687b      	ldr	r3, [r7, #4]
   15e70:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   15e74:	2b01      	cmp	r3, #1
   15e76:	d112      	bne.n	15e9e <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x86>
		{
			values[currentModule][currentChannelIndex]=lastValue;
   15e78:	687b      	ldr	r3, [r7, #4]
   15e7a:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15e7e:	4618      	mov	r0, r3
   15e80:	687b      	ldr	r3, [r7, #4]
   15e82:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15e86:	461c      	mov	r4, r3
   15e88:	687b      	ldr	r3, [r7, #4]
   15e8a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
   15e8c:	687a      	ldr	r2, [r7, #4]
   15e8e:	4603      	mov	r3, r0
   15e90:	005b      	lsls	r3, r3, #1
   15e92:	4403      	add	r3, r0
   15e94:	4423      	add	r3, r4
   15e96:	3318      	adds	r3, #24
   15e98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   15e9c:	e002      	b.n	15ea4 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>
		}
		else
		{
			lastValue=-999;
   15e9e:	687b      	ldr	r3, [r7, #4]
   15ea0:	4a18      	ldr	r2, [pc, #96]	; (15f04 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xec>)
   15ea2:	67da      	str	r2, [r3, #124]	; 0x7c
		}
	
	currentChannelIndex++;
   15ea4:	687b      	ldr	r3, [r7, #4]
   15ea6:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15eaa:	3301      	adds	r3, #1
   15eac:	b2da      	uxtb	r2, r3
   15eae:	687b      	ldr	r3, [r7, #4]
   15eb0:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   15eb4:	687b      	ldr	r3, [r7, #4]
   15eb6:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15eba:	2b03      	cmp	r3, #3
   15ebc:	d114      	bne.n	15ee8 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xd0>
	{
		currentChannelIndex=0;
   15ebe:	687b      	ldr	r3, [r7, #4]
   15ec0:	2200      	movs	r2, #0
   15ec2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
		currentModule++;
   15ec6:	687b      	ldr	r3, [r7, #4]
   15ec8:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15ecc:	3301      	adds	r3, #1
   15ece:	b2da      	uxtb	r2, r3
   15ed0:	687b      	ldr	r3, [r7, #4]
   15ed2:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		if (currentModule==NUMBER_LTC2983_MODULES)
   15ed6:	687b      	ldr	r3, [r7, #4]
   15ed8:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15edc:	2b02      	cmp	r3, #2
   15ede:	d103      	bne.n	15ee8 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xd0>
		{
			currentModule=0;
   15ee0:	687b      	ldr	r3, [r7, #4]
   15ee2:	2200      	movs	r2, #0
   15ee4:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		}
	} 
	else
	{
	}
	return lastValue;
   15ee8:	687b      	ldr	r3, [r7, #4]
   15eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
   15eec:	4618      	mov	r0, r3
   15eee:	370c      	adds	r7, #12
   15ef0:	46bd      	mov	sp, r7
   15ef2:	bd90      	pop	{r4, r7, pc}
   15ef4:	00015be9 	.word	0x00015be9
   15ef8:	2000a2d8 	.word	0x2000a2d8
   15efc:	00017bb5 	.word	0x00017bb5
   15f00:	00019389 	.word	0x00019389
   15f04:	c479c000 	.word	0xc479c000

00015f08 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
bool	TemperatureSensors_Class::IsConversionFinished(){
   15f08:	b480      	push	{r7}
   15f0a:	b083      	sub	sp, #12
   15f0c:	af00      	add	r7, sp, #0
   15f0e:	6078      	str	r0, [r7, #4]
	return converterReady[0]&converterReady[1];
   15f10:	687b      	ldr	r3, [r7, #4]
   15f12:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
   15f16:	b2db      	uxtb	r3, r3
   15f18:	461a      	mov	r2, r3
   15f1a:	687b      	ldr	r3, [r7, #4]
   15f1c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
   15f20:	b2db      	uxtb	r3, r3
   15f22:	4013      	ands	r3, r2
   15f24:	2b00      	cmp	r3, #0
   15f26:	bf14      	ite	ne
   15f28:	2301      	movne	r3, #1
   15f2a:	2300      	moveq	r3, #0
   15f2c:	b2db      	uxtb	r3, r3
}
   15f2e:	4618      	mov	r0, r3
   15f30:	370c      	adds	r7, #12
   15f32:	46bd      	mov	sp, r7
   15f34:	bc80      	pop	{r7}
   15f36:	4770      	bx	lr

00015f38 <_ZN24TemperatureSensors_Class14SetModuleReadyEh>:
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
   15f38:	b480      	push	{r7}
   15f3a:	b083      	sub	sp, #12
   15f3c:	af00      	add	r7, sp, #0
   15f3e:	6078      	str	r0, [r7, #4]
   15f40:	460b      	mov	r3, r1
   15f42:	70fb      	strb	r3, [r7, #3]
	module[m].ready=true;
   15f44:	78fb      	ldrb	r3, [r7, #3]
   15f46:	687a      	ldr	r2, [r7, #4]
   15f48:	215c      	movs	r1, #92	; 0x5c
   15f4a:	fb01 f303 	mul.w	r3, r1, r3
   15f4e:	4413      	add	r3, r2
   15f50:	3384      	adds	r3, #132	; 0x84
   15f52:	2201      	movs	r2, #1
   15f54:	701a      	strb	r2, [r3, #0]
	return module[m].ready;
   15f56:	78fb      	ldrb	r3, [r7, #3]
   15f58:	687a      	ldr	r2, [r7, #4]
   15f5a:	215c      	movs	r1, #92	; 0x5c
   15f5c:	fb01 f303 	mul.w	r3, r1, r3
   15f60:	4413      	add	r3, r2
   15f62:	3384      	adds	r3, #132	; 0x84
   15f64:	781b      	ldrb	r3, [r3, #0]
   15f66:	b2db      	uxtb	r3, r3
}
   15f68:	4618      	mov	r0, r3
   15f6a:	370c      	adds	r7, #12
   15f6c:	46bd      	mov	sp, r7
   15f6e:	bc80      	pop	{r7}
   15f70:	4770      	bx	lr
	...

00015f74 <_Z41__static_initialization_and_destruction_0ii>:

TemperatureSensors_Class temperatures(&SPI_TEMP);
   15f74:	b580      	push	{r7, lr}
   15f76:	b082      	sub	sp, #8
   15f78:	af00      	add	r7, sp, #0
   15f7a:	6078      	str	r0, [r7, #4]
   15f7c:	6039      	str	r1, [r7, #0]
   15f7e:	687b      	ldr	r3, [r7, #4]
   15f80:	2b01      	cmp	r3, #1
   15f82:	d115      	bne.n	15fb0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   15f84:	683b      	ldr	r3, [r7, #0]
   15f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15f8a:	4293      	cmp	r3, r2
   15f8c:	d110      	bne.n	15fb0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static LT_SPI	ltSPI;
   15f8e:	480a      	ldr	r0, [pc, #40]	; (15fb8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15f90:	4b0a      	ldr	r3, [pc, #40]	; (15fbc <_Z41__static_initialization_and_destruction_0ii+0x48>)
   15f92:	4798      	blx	r3
   15f94:	4a0a      	ldr	r2, [pc, #40]	; (15fc0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15f96:	490b      	ldr	r1, [pc, #44]	; (15fc4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15f98:	4807      	ldr	r0, [pc, #28]	; (15fb8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15f9a:	4b0b      	ldr	r3, [pc, #44]	; (15fc8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15f9c:	4798      	blx	r3
TemperatureSensors_Class temperatures(&SPI_TEMP);
   15f9e:	490b      	ldr	r1, [pc, #44]	; (15fcc <_Z41__static_initialization_and_destruction_0ii+0x58>)
   15fa0:	480b      	ldr	r0, [pc, #44]	; (15fd0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15fa2:	4b0c      	ldr	r3, [pc, #48]	; (15fd4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   15fa4:	4798      	blx	r3
   15fa6:	4a06      	ldr	r2, [pc, #24]	; (15fc0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15fa8:	490b      	ldr	r1, [pc, #44]	; (15fd8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   15faa:	4809      	ldr	r0, [pc, #36]	; (15fd0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15fac:	4b06      	ldr	r3, [pc, #24]	; (15fc8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15fae:	4798      	blx	r3
   15fb0:	bf00      	nop
   15fb2:	3708      	adds	r7, #8
   15fb4:	46bd      	mov	sp, r7
   15fb6:	bd80      	pop	{r7, pc}
   15fb8:	20009c70 	.word	0x20009c70
   15fbc:	000198e1 	.word	0x000198e1
   15fc0:	20000000 	.word	0x20000000
   15fc4:	00019909 	.word	0x00019909
   15fc8:	00019d41 	.word	0x00019d41
   15fcc:	2000a75c 	.word	0x2000a75c
   15fd0:	20009c84 	.word	0x20009c84
   15fd4:	00015c0d 	.word	0x00015c0d
   15fd8:	00015c69 	.word	0x00015c69

00015fdc <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
   15fdc:	b580      	push	{r7, lr}
   15fde:	af00      	add	r7, sp, #0
   15fe0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15fe4:	2001      	movs	r0, #1
   15fe6:	4b01      	ldr	r3, [pc, #4]	; (15fec <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x10>)
   15fe8:	4798      	blx	r3
   15fea:	bd80      	pop	{r7, pc}
   15fec:	00015f75 	.word	0x00015f75

00015ff0 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   15ff0:	b480      	push	{r7}
   15ff2:	b083      	sub	sp, #12
   15ff4:	af00      	add	r7, sp, #0
   15ff6:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   15ff8:	4a04      	ldr	r2, [pc, #16]	; (1600c <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   15ffa:	687b      	ldr	r3, [r7, #4]
   15ffc:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   15ffe:	687b      	ldr	r3, [r7, #4]
   16000:	4618      	mov	r0, r3
   16002:	370c      	adds	r7, #12
   16004:	46bd      	mov	sp, r7
   16006:	bc80      	pop	{r7}
   16008:	4770      	bx	lr
   1600a:	bf00      	nop
   1600c:	20009dd4 	.word	0x20009dd4

00016010 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   16010:	b480      	push	{r7}
   16012:	b083      	sub	sp, #12
   16014:	af00      	add	r7, sp, #0
   16016:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   16018:	687b      	ldr	r3, [r7, #4]
   1601a:	4618      	mov	r0, r3
   1601c:	370c      	adds	r7, #12
   1601e:	46bd      	mov	sp, r7
   16020:	bc80      	pop	{r7}
   16022:	4770      	bx	lr

00016024 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   16024:	b580      	push	{r7, lr}
   16026:	b082      	sub	sp, #8
   16028:	af00      	add	r7, sp, #0
   1602a:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   1602c:	687b      	ldr	r3, [r7, #4]
   1602e:	68da      	ldr	r2, [r3, #12]
   16030:	687b      	ldr	r3, [r7, #4]
   16032:	3310      	adds	r3, #16
   16034:	4619      	mov	r1, r3
   16036:	4610      	mov	r0, r2
   16038:	4b09      	ldr	r3, [pc, #36]	; (16060 <_ZN13SPI_Syn_Class4initEv+0x3c>)
   1603a:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   1603c:	687b      	ldr	r3, [r7, #4]
   1603e:	68db      	ldr	r3, [r3, #12]
   16040:	4618      	mov	r0, r3
   16042:	4b08      	ldr	r3, [pc, #32]	; (16064 <_ZN13SPI_Syn_Class4initEv+0x40>)
   16044:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   16046:	687b      	ldr	r3, [r7, #4]
   16048:	4a07      	ldr	r2, [pc, #28]	; (16068 <_ZN13SPI_Syn_Class4initEv+0x44>)
   1604a:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   1604c:	687b      	ldr	r3, [r7, #4]
   1604e:	4a06      	ldr	r2, [pc, #24]	; (16068 <_ZN13SPI_Syn_Class4initEv+0x44>)
   16050:	609a      	str	r2, [r3, #8]
	ready=true;
   16052:	687b      	ldr	r3, [r7, #4]
   16054:	2201      	movs	r2, #1
   16056:	701a      	strb	r2, [r3, #0]
	
}
   16058:	bf00      	nop
   1605a:	3708      	adds	r7, #8
   1605c:	46bd      	mov	sp, r7
   1605e:	bd80      	pop	{r7, pc}
   16060:	00007249 	.word	0x00007249
   16064:	000070bd 	.word	0x000070bd
   16068:	20009dd8 	.word	0x20009dd8

0001606c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   1606c:	b480      	push	{r7}
   1606e:	b083      	sub	sp, #12
   16070:	af00      	add	r7, sp, #0
   16072:	6078      	str	r0, [r7, #4]
   16074:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   16076:	4a05      	ldr	r2, [pc, #20]	; (1608c <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   16078:	687b      	ldr	r3, [r7, #4]
   1607a:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   1607c:	687b      	ldr	r3, [r7, #4]
   1607e:	683a      	ldr	r2, [r7, #0]
   16080:	60da      	str	r2, [r3, #12]
}
   16082:	bf00      	nop
   16084:	370c      	adds	r7, #12
   16086:	46bd      	mov	sp, r7
   16088:	bc80      	pop	{r7}
   1608a:	4770      	bx	lr
   1608c:	20009dd4 	.word	0x20009dd4

00016090 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   16090:	b580      	push	{r7, lr}
   16092:	b082      	sub	sp, #8
   16094:	af00      	add	r7, sp, #0
   16096:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   16098:	687b      	ldr	r3, [r7, #4]
   1609a:	68da      	ldr	r2, [r3, #12]
   1609c:	687b      	ldr	r3, [r7, #4]
   1609e:	3310      	adds	r3, #16
   160a0:	4619      	mov	r1, r3
   160a2:	4610      	mov	r0, r2
   160a4:	4b07      	ldr	r3, [pc, #28]	; (160c4 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   160a6:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   160a8:	687b      	ldr	r3, [r7, #4]
   160aa:	68db      	ldr	r3, [r3, #12]
   160ac:	4618      	mov	r0, r3
   160ae:	4b06      	ldr	r3, [pc, #24]	; (160c8 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   160b0:	4798      	blx	r3
	ready=true;
   160b2:	687b      	ldr	r3, [r7, #4]
   160b4:	2201      	movs	r2, #1
   160b6:	701a      	strb	r2, [r3, #0]
	return 0;
   160b8:	2300      	movs	r3, #0
}
   160ba:	4618      	mov	r0, r3
   160bc:	3708      	adds	r7, #8
   160be:	46bd      	mov	sp, r7
   160c0:	bd80      	pop	{r7, pc}
   160c2:	bf00      	nop
   160c4:	00007249 	.word	0x00007249
   160c8:	000070bd 	.word	0x000070bd

000160cc <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   160cc:	b580      	push	{r7, lr}
   160ce:	b086      	sub	sp, #24
   160d0:	af00      	add	r7, sp, #0
   160d2:	60f8      	str	r0, [r7, #12]
   160d4:	60b9      	str	r1, [r7, #8]
   160d6:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   160d8:	68fb      	ldr	r3, [r7, #12]
   160da:	2201      	movs	r2, #1
   160dc:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   160de:	68fb      	ldr	r3, [r7, #12]
   160e0:	691b      	ldr	r3, [r3, #16]
   160e2:	687a      	ldr	r2, [r7, #4]
   160e4:	b292      	uxth	r2, r2
   160e6:	68b9      	ldr	r1, [r7, #8]
   160e8:	4618      	mov	r0, r3
   160ea:	4b08      	ldr	r3, [pc, #32]	; (1610c <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   160ec:	4798      	blx	r3
   160ee:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   160f0:	697b      	ldr	r3, [r7, #20]
   160f2:	2b00      	cmp	r3, #0
   160f4:	bf14      	ite	ne
   160f6:	2301      	movne	r3, #1
   160f8:	2300      	moveq	r3, #0
   160fa:	b2da      	uxtb	r2, r3
   160fc:	68fb      	ldr	r3, [r7, #12]
   160fe:	761a      	strb	r2, [r3, #24]
	 return w;
   16100:	697b      	ldr	r3, [r7, #20]
	
}
   16102:	4618      	mov	r0, r3
   16104:	3718      	adds	r7, #24
   16106:	46bd      	mov	sp, r7
   16108:	bd80      	pop	{r7, pc}
   1610a:	bf00      	nop
   1610c:	00019ca1 	.word	0x00019ca1

00016110 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   16110:	b580      	push	{r7, lr}
   16112:	b086      	sub	sp, #24
   16114:	af00      	add	r7, sp, #0
   16116:	60f8      	str	r0, [r7, #12]
   16118:	60b9      	str	r1, [r7, #8]
   1611a:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   1611c:	68fb      	ldr	r3, [r7, #12]
   1611e:	2201      	movs	r2, #1
   16120:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   16122:	68fb      	ldr	r3, [r7, #12]
   16124:	691b      	ldr	r3, [r3, #16]
   16126:	687a      	ldr	r2, [r7, #4]
   16128:	b292      	uxth	r2, r2
   1612a:	68b9      	ldr	r1, [r7, #8]
   1612c:	4618      	mov	r0, r3
   1612e:	4b08      	ldr	r3, [pc, #32]	; (16150 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   16130:	4798      	blx	r3
   16132:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   16134:	697b      	ldr	r3, [r7, #20]
   16136:	2b00      	cmp	r3, #0
   16138:	bf14      	ite	ne
   1613a:	2301      	movne	r3, #1
   1613c:	2300      	moveq	r3, #0
   1613e:	b2da      	uxtb	r2, r3
   16140:	68fb      	ldr	r3, [r7, #12]
   16142:	765a      	strb	r2, [r3, #25]
	return  r;
   16144:	697b      	ldr	r3, [r7, #20]
}
   16146:	4618      	mov	r0, r3
   16148:	3718      	adds	r7, #24
   1614a:	46bd      	mov	sp, r7
   1614c:	bd80      	pop	{r7, pc}
   1614e:	bf00      	nop
   16150:	00019cf1 	.word	0x00019cf1

00016154 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   16154:	b580      	push	{r7, lr}
   16156:	b082      	sub	sp, #8
   16158:	af00      	add	r7, sp, #0
   1615a:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   1615c:	687b      	ldr	r3, [r7, #4]
   1615e:	68db      	ldr	r3, [r3, #12]
   16160:	4618      	mov	r0, r3
   16162:	4b03      	ldr	r3, [pc, #12]	; (16170 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   16164:	4798      	blx	r3
	
}
   16166:	bf00      	nop
   16168:	3708      	adds	r7, #8
   1616a:	46bd      	mov	sp, r7
   1616c:	bd80      	pop	{r7, pc}
   1616e:	bf00      	nop
   16170:	000070f9 	.word	0x000070f9

00016174 <_ZN13SPI_Syn_Class10IsSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::IsSPIReady(void){
   16174:	b480      	push	{r7}
   16176:	b083      	sub	sp, #12
   16178:	af00      	add	r7, sp, #0
   1617a:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   1617c:	687b      	ldr	r3, [r7, #4]
   1617e:	2201      	movs	r2, #1
   16180:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   16182:	687b      	ldr	r3, [r7, #4]
   16184:	781b      	ldrb	r3, [r3, #0]
   16186:	b2db      	uxtb	r3, r3
   16188:	2b00      	cmp	r3, #0
   1618a:	d001      	beq.n	16190 <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1c>
	{
		
		return true;
   1618c:	2301      	movs	r3, #1
   1618e:	e000      	b.n	16192 <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1e>
	} 
	else
	{
		return false;
   16190:	2300      	movs	r3, #0
	}
	return ready;
	
}
   16192:	4618      	mov	r0, r3
   16194:	370c      	adds	r7, #12
   16196:	46bd      	mov	sp, r7
   16198:	bc80      	pop	{r7}
   1619a:	4770      	bx	lr

0001619c <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
   1619c:	b480      	push	{r7}
   1619e:	b083      	sub	sp, #12
   161a0:	af00      	add	r7, sp, #0
   161a2:	6078      	str	r0, [r7, #4]
   161a4:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=i2c;
   161a6:	687b      	ldr	r3, [r7, #4]
   161a8:	683a      	ldr	r2, [r7, #0]
   161aa:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
   161ac:	4a05      	ldr	r2, [pc, #20]	; (161c4 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x28>)
   161ae:	687b      	ldr	r3, [r7, #4]
   161b0:	6013      	str	r3, [r2, #0]
	i2ca=&i2cAsync;
   161b2:	687b      	ldr	r3, [r7, #4]
   161b4:	4a04      	ldr	r2, [pc, #16]	; (161c8 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
   161b6:	609a      	str	r2, [r3, #8]
} //AT24MAC_Class
   161b8:	687b      	ldr	r3, [r7, #4]
   161ba:	4618      	mov	r0, r3
   161bc:	370c      	adds	r7, #12
   161be:	46bd      	mov	sp, r7
   161c0:	bc80      	pop	{r7}
   161c2:	4770      	bx	lr
   161c4:	20009e18 	.word	0x20009e18
   161c8:	20009e20 	.word	0x20009e20

000161cc <_ZN13AT24MAC_ClassD1Ev>:


// default destructor
AT24MAC_Class::~AT24MAC_Class()
   161cc:	b480      	push	{r7}
   161ce:	b083      	sub	sp, #12
   161d0:	af00      	add	r7, sp, #0
   161d2:	6078      	str	r0, [r7, #4]
{
} //~AT24MAC_Class
   161d4:	687b      	ldr	r3, [r7, #4]
   161d6:	4618      	mov	r0, r3
   161d8:	370c      	adds	r7, #12
   161da:	46bd      	mov	sp, r7
   161dc:	bc80      	pop	{r7}
   161de:	4770      	bx	lr

000161e0 <_ZN13AT24MAC_Class4InitEv>:



bool AT24MAC_Class::Init(void){
   161e0:	b580      	push	{r7, lr}
   161e2:	b082      	sub	sp, #8
   161e4:	af00      	add	r7, sp, #0
   161e6:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
   161e8:	2156      	movs	r1, #86	; 0x56
   161ea:	6878      	ldr	r0, [r7, #4]
   161ec:	4b04      	ldr	r3, [pc, #16]	; (16200 <_ZN13AT24MAC_Class4InitEv+0x20>)
   161ee:	4798      	blx	r3
	return SelfTest();
   161f0:	6878      	ldr	r0, [r7, #4]
   161f2:	4b04      	ldr	r3, [pc, #16]	; (16204 <_ZN13AT24MAC_Class4InitEv+0x24>)
   161f4:	4798      	blx	r3
   161f6:	4603      	mov	r3, r0
}
   161f8:	4618      	mov	r0, r3
   161fa:	3708      	adds	r7, #8
   161fc:	46bd      	mov	sp, r7
   161fe:	bd80      	pop	{r7, pc}
   16200:	00016209 	.word	0x00016209
   16204:	000164b9 	.word	0x000164b9

00016208 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
   16208:	b580      	push	{r7, lr}
   1620a:	b082      	sub	sp, #8
   1620c:	af00      	add	r7, sp, #0
   1620e:	6078      	str	r0, [r7, #4]
   16210:	460b      	mov	r3, r1
   16212:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   16214:	687b      	ldr	r3, [r7, #4]
   16216:	78fa      	ldrb	r2, [r7, #3]
   16218:	731a      	strb	r2, [r3, #12]
	i2ca->Set_descriptor(ptrI2CDescr);
   1621a:	687b      	ldr	r3, [r7, #4]
   1621c:	689a      	ldr	r2, [r3, #8]
   1621e:	687b      	ldr	r3, [r7, #4]
   16220:	685b      	ldr	r3, [r3, #4]
   16222:	4619      	mov	r1, r3
   16224:	4610      	mov	r0, r2
   16226:	4b09      	ldr	r3, [pc, #36]	; (1624c <_ZN13AT24MAC_Class4InitEh+0x44>)
   16228:	4798      	blx	r3
	isReady=i2ca->Init(addr)==0;
   1622a:	687b      	ldr	r3, [r7, #4]
   1622c:	689b      	ldr	r3, [r3, #8]
   1622e:	78fa      	ldrb	r2, [r7, #3]
   16230:	4611      	mov	r1, r2
   16232:	4618      	mov	r0, r3
   16234:	4b06      	ldr	r3, [pc, #24]	; (16250 <_ZN13AT24MAC_Class4InitEh+0x48>)
   16236:	4798      	blx	r3
   16238:	4603      	mov	r3, r0
   1623a:	f083 0301 	eor.w	r3, r3, #1
   1623e:	b2da      	uxtb	r2, r3
   16240:	687b      	ldr	r3, [r7, #4]
   16242:	701a      	strb	r2, [r3, #0]
}
   16244:	bf00      	nop
   16246:	3708      	adds	r7, #8
   16248:	46bd      	mov	sp, r7
   1624a:	bd80      	pop	{r7, pc}
   1624c:	00018da5 	.word	0x00018da5
   16250:	00018ead 	.word	0x00018ead

00016254 <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
	array[1]=value;
	uint32_t w= i2ca->Write(array,2);
	while(!i2ca->txReady);
	return	w;
}
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
   16254:	b580      	push	{r7, lr}
   16256:	b08c      	sub	sp, #48	; 0x30
   16258:	af00      	add	r7, sp, #0
   1625a:	60f8      	str	r0, [r7, #12]
   1625c:	60b9      	str	r1, [r7, #8]
   1625e:	4611      	mov	r1, r2
   16260:	461a      	mov	r2, r3
   16262:	460b      	mov	r3, r1
   16264:	71fb      	strb	r3, [r7, #7]
   16266:	4613      	mov	r3, r2
   16268:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	uint8_t i;
	uint8_t	*ptr=p;
   1626a:	68bb      	ldr	r3, [r7, #8]
   1626c:	627b      	str	r3, [r7, #36]	; 0x24
// 		delay_us(1500);
// 		p++;
// 	
// 		while(!AcknolledgePolling());
// 	}
	isReady=false;
   1626e:	68fb      	ldr	r3, [r7, #12]
   16270:	2200      	movs	r2, #0
   16272:	701a      	strb	r2, [r3, #0]
	uint8_t array[1+AT24MAC_BUFFER_SIZE],value,size0,addr0=addr;
   16274:	79fb      	ldrb	r3, [r7, #7]
   16276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if ( size>AT24MAC_BUFFER_SIZE)
   1627a:	79bb      	ldrb	r3, [r7, #6]
   1627c:	2b10      	cmp	r3, #16
   1627e:	dd6e      	ble.n	1635e <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x10a>
	{
		array[0]=addr0;
   16280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   16284:	743b      	strb	r3, [r7, #16]
		size0=AT24MAC_BUFFER_SIZE-addr%(AT24MAC_BUFFER_SIZE);
   16286:	79fb      	ldrb	r3, [r7, #7]
   16288:	f003 030f 	and.w	r3, r3, #15
   1628c:	b2db      	uxtb	r3, r3
   1628e:	f1c3 0310 	rsb	r3, r3, #16
   16292:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		memcpy((void*)&array[1],ptr,size0);
   16296:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
   1629a:	f107 0310 	add.w	r3, r7, #16
   1629e:	3301      	adds	r3, #1
   162a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   162a2:	4618      	mov	r0, r3
   162a4:	4b41      	ldr	r3, [pc, #260]	; (163ac <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   162a6:	4798      	blx	r3
		w= i2ca->Write(array,1+size0);
   162a8:	68fb      	ldr	r3, [r7, #12]
   162aa:	6898      	ldr	r0, [r3, #8]
   162ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   162b0:	b29b      	uxth	r3, r3
   162b2:	3301      	adds	r3, #1
   162b4:	b29a      	uxth	r2, r3
   162b6:	f107 0310 	add.w	r3, r7, #16
   162ba:	4619      	mov	r1, r3
   162bc:	4b3c      	ldr	r3, [pc, #240]	; (163b0 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   162be:	4798      	blx	r3
   162c0:	4603      	mov	r3, r0
   162c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(!i2ca->txReady);
   162c4:	68fb      	ldr	r3, [r7, #12]
   162c6:	689b      	ldr	r3, [r3, #8]
   162c8:	7d1b      	ldrb	r3, [r3, #20]
   162ca:	b2db      	uxtb	r3, r3
   162cc:	f083 0301 	eor.w	r3, r3, #1
   162d0:	b2db      	uxtb	r3, r3
   162d2:	2b00      	cmp	r3, #0
   162d4:	d000      	beq.n	162d8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>
   162d6:	e7f5      	b.n	162c4 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
		ptr+=size0;
   162d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   162dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   162de:	4413      	add	r3, r2
   162e0:	627b      	str	r3, [r7, #36]	; 0x24
		addr0+=size0;
   162e2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   162e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   162ea:	4413      	add	r3, r2
   162ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for (i = size0; i <size+1; i+=AT24MAC_BUFFER_SIZE)
   162f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   162f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   162f8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   162fc:	79bb      	ldrb	r3, [r7, #6]
   162fe:	3301      	adds	r3, #1
   16300:	429a      	cmp	r2, r3
   16302:	da4d      	bge.n	163a0 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x14c>
		{
			array[0]=addr0;
   16304:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   16308:	743b      	strb	r3, [r7, #16]
			memcpy((void*)&array[1],ptr,AT24MAC_BUFFER_SIZE);
   1630a:	f107 0310 	add.w	r3, r7, #16
   1630e:	3301      	adds	r3, #1
   16310:	2210      	movs	r2, #16
   16312:	6a79      	ldr	r1, [r7, #36]	; 0x24
   16314:	4618      	mov	r0, r3
   16316:	4b25      	ldr	r3, [pc, #148]	; (163ac <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   16318:	4798      	blx	r3
			w= i2ca->Write(array,1+AT24MAC_BUFFER_SIZE);
   1631a:	68fb      	ldr	r3, [r7, #12]
   1631c:	689b      	ldr	r3, [r3, #8]
   1631e:	f107 0110 	add.w	r1, r7, #16
   16322:	2211      	movs	r2, #17
   16324:	4618      	mov	r0, r3
   16326:	4b22      	ldr	r3, [pc, #136]	; (163b0 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   16328:	4798      	blx	r3
   1632a:	4603      	mov	r3, r0
   1632c:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(!i2ca->txReady);
   1632e:	68fb      	ldr	r3, [r7, #12]
   16330:	689b      	ldr	r3, [r3, #8]
   16332:	7d1b      	ldrb	r3, [r3, #20]
   16334:	b2db      	uxtb	r3, r3
   16336:	f083 0301 	eor.w	r3, r3, #1
   1633a:	b2db      	uxtb	r3, r3
   1633c:	2b00      	cmp	r3, #0
   1633e:	d000      	beq.n	16342 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xee>
   16340:	e7f5      	b.n	1632e <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xda>
			ptr+=AT24MAC_BUFFER_SIZE;
   16342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16344:	3310      	adds	r3, #16
   16346:	627b      	str	r3, [r7, #36]	; 0x24
			addr0+=AT24MAC_BUFFER_SIZE;
   16348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1634c:	3310      	adds	r3, #16
   1634e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for (i = size0; i <size+1; i+=AT24MAC_BUFFER_SIZE)
   16352:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   16356:	3310      	adds	r3, #16
   16358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   1635c:	e7cc      	b.n	162f8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xa4>
		}
		
	} 
	else
	{
		array[0]=addr;
   1635e:	79fb      	ldrb	r3, [r7, #7]
   16360:	743b      	strb	r3, [r7, #16]
		memcpy((void*)&array[1],p,size);
   16362:	79ba      	ldrb	r2, [r7, #6]
   16364:	f107 0310 	add.w	r3, r7, #16
   16368:	3301      	adds	r3, #1
   1636a:	68b9      	ldr	r1, [r7, #8]
   1636c:	4618      	mov	r0, r3
   1636e:	4b0f      	ldr	r3, [pc, #60]	; (163ac <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   16370:	4798      	blx	r3
		w= i2ca->Write(array,1+size);
   16372:	68fb      	ldr	r3, [r7, #12]
   16374:	6898      	ldr	r0, [r3, #8]
   16376:	79bb      	ldrb	r3, [r7, #6]
   16378:	b29b      	uxth	r3, r3
   1637a:	3301      	adds	r3, #1
   1637c:	b29a      	uxth	r2, r3
   1637e:	f107 0310 	add.w	r3, r7, #16
   16382:	4619      	mov	r1, r3
   16384:	4b0a      	ldr	r3, [pc, #40]	; (163b0 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   16386:	4798      	blx	r3
   16388:	4603      	mov	r3, r0
   1638a:	62fb      	str	r3, [r7, #44]	; 0x2c
		//AcknolledgePolling();
		while(!i2ca->txReady);
   1638c:	68fb      	ldr	r3, [r7, #12]
   1638e:	689b      	ldr	r3, [r3, #8]
   16390:	7d1b      	ldrb	r3, [r3, #20]
   16392:	b2db      	uxtb	r3, r3
   16394:	f083 0301 	eor.w	r3, r3, #1
   16398:	b2db      	uxtb	r3, r3
   1639a:	2b00      	cmp	r3, #0
   1639c:	d000      	beq.n	163a0 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x14c>
   1639e:	e7f5      	b.n	1638c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x138>
	}
	
	
	
	return	w;
   163a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   163a2:	4618      	mov	r0, r3
   163a4:	3730      	adds	r7, #48	; 0x30
   163a6:	46bd      	mov	sp, r7
   163a8:	bd80      	pop	{r7, pc}
   163aa:	bf00      	nop
   163ac:	0001c4a5 	.word	0x0001c4a5
   163b0:	00018efd 	.word	0x00018efd

000163b4 <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
   163b4:	b590      	push	{r4, r7, lr}
   163b6:	b087      	sub	sp, #28
   163b8:	af00      	add	r7, sp, #0
   163ba:	60f8      	str	r0, [r7, #12]
   163bc:	60b9      	str	r1, [r7, #8]
   163be:	4611      	mov	r1, r2
   163c0:	461a      	mov	r2, r3
   163c2:	460b      	mov	r3, r1
   163c4:	80fb      	strh	r3, [r7, #6]
   163c6:	4613      	mov	r3, r2
   163c8:	717b      	strb	r3, [r7, #5]
	

	uint8_t add=(uint8_t)(0xff&addr);
   163ca:	88fb      	ldrh	r3, [r7, #6]
   163cc:	75fb      	strb	r3, [r7, #23]
	return	WriteAddress(p,add,size);
   163ce:	797b      	ldrb	r3, [r7, #5]
   163d0:	7dfa      	ldrb	r2, [r7, #23]
   163d2:	68b9      	ldr	r1, [r7, #8]
   163d4:	68f8      	ldr	r0, [r7, #12]
   163d6:	4c03      	ldr	r4, [pc, #12]	; (163e4 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>)
   163d8:	47a0      	blx	r4
   163da:	4603      	mov	r3, r0
}
   163dc:	4618      	mov	r0, r3
   163de:	371c      	adds	r7, #28
   163e0:	46bd      	mov	sp, r7
   163e2:	bd90      	pop	{r4, r7, pc}
   163e4:	00016255 	.word	0x00016255

000163e8 <_ZN13AT24MAC_Class11ReadAddressEPhhh>:
	i2ca->Read(&value,1);
	
	return value;
}

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
   163e8:	b580      	push	{r7, lr}
   163ea:	b086      	sub	sp, #24
   163ec:	af00      	add	r7, sp, #0
   163ee:	60f8      	str	r0, [r7, #12]
   163f0:	60b9      	str	r1, [r7, #8]
   163f2:	4611      	mov	r1, r2
   163f4:	461a      	mov	r2, r3
   163f6:	460b      	mov	r3, r1
   163f8:	71fb      	strb	r3, [r7, #7]
   163fa:	4613      	mov	r3, r2
   163fc:	71bb      	strb	r3, [r7, #6]
	
	uint32_t r;
	uint8_t	value;
	while(!i2ca->rxReady);
   163fe:	68fb      	ldr	r3, [r7, #12]
   16400:	689b      	ldr	r3, [r3, #8]
   16402:	7d5b      	ldrb	r3, [r3, #21]
   16404:	b2db      	uxtb	r3, r3
   16406:	f083 0301 	eor.w	r3, r3, #1
   1640a:	b2db      	uxtb	r3, r3
   1640c:	2b00      	cmp	r3, #0
   1640e:	d000      	beq.n	16412 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x2a>
   16410:	e7f5      	b.n	163fe <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x16>
	i2ca->Write(&addr,1);
   16412:	68fb      	ldr	r3, [r7, #12]
   16414:	689b      	ldr	r3, [r3, #8]
   16416:	1df9      	adds	r1, r7, #7
   16418:	2201      	movs	r2, #1
   1641a:	4618      	mov	r0, r3
   1641c:	4b12      	ldr	r3, [pc, #72]	; (16468 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x80>)
   1641e:	4798      	blx	r3
	while(!i2ca->txReady);
   16420:	68fb      	ldr	r3, [r7, #12]
   16422:	689b      	ldr	r3, [r3, #8]
   16424:	7d1b      	ldrb	r3, [r3, #20]
   16426:	b2db      	uxtb	r3, r3
   16428:	f083 0301 	eor.w	r3, r3, #1
   1642c:	b2db      	uxtb	r3, r3
   1642e:	2b00      	cmp	r3, #0
   16430:	d000      	beq.n	16434 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4c>
   16432:	e7f5      	b.n	16420 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x38>
	r= i2ca->Read(p,size);
   16434:	68fb      	ldr	r3, [r7, #12]
   16436:	689b      	ldr	r3, [r3, #8]
   16438:	79ba      	ldrb	r2, [r7, #6]
   1643a:	b292      	uxth	r2, r2
   1643c:	68b9      	ldr	r1, [r7, #8]
   1643e:	4618      	mov	r0, r3
   16440:	4b0a      	ldr	r3, [pc, #40]	; (1646c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x84>)
   16442:	4798      	blx	r3
   16444:	4603      	mov	r3, r0
   16446:	617b      	str	r3, [r7, #20]
	while(!i2ca->rxReady);
   16448:	68fb      	ldr	r3, [r7, #12]
   1644a:	689b      	ldr	r3, [r3, #8]
   1644c:	7d5b      	ldrb	r3, [r3, #21]
   1644e:	b2db      	uxtb	r3, r3
   16450:	f083 0301 	eor.w	r3, r3, #1
   16454:	b2db      	uxtb	r3, r3
   16456:	2b00      	cmp	r3, #0
   16458:	d000      	beq.n	1645c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x74>
   1645a:	e7f5      	b.n	16448 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x60>
			localAddress+=localSize;
		}
	}
	*/
	
	return r;
   1645c:	697b      	ldr	r3, [r7, #20]
}
   1645e:	4618      	mov	r0, r3
   16460:	3718      	adds	r7, #24
   16462:	46bd      	mov	sp, r7
   16464:	bd80      	pop	{r7, pc}
   16466:	bf00      	nop
   16468:	00018efd 	.word	0x00018efd
   1646c:	00018f41 	.word	0x00018f41

00016470 <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
   16470:	b590      	push	{r4, r7, lr}
   16472:	b087      	sub	sp, #28
   16474:	af00      	add	r7, sp, #0
   16476:	60f8      	str	r0, [r7, #12]
   16478:	60b9      	str	r1, [r7, #8]
   1647a:	4611      	mov	r1, r2
   1647c:	461a      	mov	r2, r3
   1647e:	460b      	mov	r3, r1
   16480:	80fb      	strh	r3, [r7, #6]
   16482:	4613      	mov	r3, r2
   16484:	717b      	strb	r3, [r7, #5]
	uint8_t add=(uint8_t)(0xff&addr);
   16486:	88fb      	ldrh	r3, [r7, #6]
   16488:	75fb      	strb	r3, [r7, #23]
	while(!i2ca->rxReady);
   1648a:	68fb      	ldr	r3, [r7, #12]
   1648c:	689b      	ldr	r3, [r3, #8]
   1648e:	7d5b      	ldrb	r3, [r3, #21]
   16490:	b2db      	uxtb	r3, r3
   16492:	f083 0301 	eor.w	r3, r3, #1
   16496:	b2db      	uxtb	r3, r3
   16498:	2b00      	cmp	r3, #0
   1649a:	d000      	beq.n	1649e <_ZN13AT24MAC_Class11ReadAddressEPhth+0x2e>
   1649c:	e7f5      	b.n	1648a <_ZN13AT24MAC_Class11ReadAddressEPhth+0x1a>
	return ReadAddress(p,add,size);
   1649e:	797b      	ldrb	r3, [r7, #5]
   164a0:	7dfa      	ldrb	r2, [r7, #23]
   164a2:	68b9      	ldr	r1, [r7, #8]
   164a4:	68f8      	ldr	r0, [r7, #12]
   164a6:	4c03      	ldr	r4, [pc, #12]	; (164b4 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x44>)
   164a8:	47a0      	blx	r4
   164aa:	4603      	mov	r3, r0
}
   164ac:	4618      	mov	r0, r3
   164ae:	371c      	adds	r7, #28
   164b0:	46bd      	mov	sp, r7
   164b2:	bd90      	pop	{r4, r7, pc}
   164b4:	000163e9 	.word	0x000163e9

000164b8 <_ZN13AT24MAC_Class8SelfTestEv>:
		GetAcknowledge();
	} while (!IsReady());
	return isReady;
}

bool	AT24MAC_Class::SelfTest(void){
   164b8:	b590      	push	{r4, r7, lr}
   164ba:	b085      	sub	sp, #20
   164bc:	af00      	add	r7, sp, #0
   164be:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE*2;
   164c0:	687b      	ldr	r3, [r7, #4]
   164c2:	22e0      	movs	r2, #224	; 0xe0
   164c4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   164c8:	2300      	movs	r3, #0
   164ca:	60fb      	str	r3, [r7, #12]
   164cc:	68fb      	ldr	r3, [r7, #12]
   164ce:	2b0f      	cmp	r3, #15
   164d0:	dc18      	bgt.n	16504 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
   164d2:	4b33      	ldr	r3, [pc, #204]	; (165a0 <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
   164d4:	4798      	blx	r3
   164d6:	4603      	mov	r3, r0
   164d8:	b2d9      	uxtb	r1, r3
   164da:	687a      	ldr	r2, [r7, #4]
   164dc:	68fb      	ldr	r3, [r7, #12]
   164de:	4413      	add	r3, r2
   164e0:	330e      	adds	r3, #14
   164e2:	460a      	mov	r2, r1
   164e4:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
   164e6:	68fb      	ldr	r3, [r7, #12]
   164e8:	b2db      	uxtb	r3, r3
   164ea:	f1c3 0310 	rsb	r3, r3, #16
   164ee:	b2d9      	uxtb	r1, r3
   164f0:	687a      	ldr	r2, [r7, #4]
   164f2:	68fb      	ldr	r3, [r7, #12]
   164f4:	4413      	add	r3, r2
   164f6:	331e      	adds	r3, #30
   164f8:	460a      	mov	r2, r1
   164fa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   164fc:	68fb      	ldr	r3, [r7, #12]
   164fe:	3301      	adds	r3, #1
   16500:	60fb      	str	r3, [r7, #12]
   16502:	e7e3      	b.n	164cc <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
   16504:	6878      	ldr	r0, [r7, #4]
   16506:	4b27      	ldr	r3, [pc, #156]	; (165a4 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   16508:	4798      	blx	r3
   1650a:	4603      	mov	r3, r0
   1650c:	f083 0301 	eor.w	r3, r3, #1
   16510:	b2db      	uxtb	r3, r3
   16512:	2b00      	cmp	r3, #0
   16514:	d000      	beq.n	16518 <_ZN13AT24MAC_Class8SelfTestEv+0x60>
   16516:	e7f5      	b.n	16504 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   16518:	687b      	ldr	r3, [r7, #4]
   1651a:	f103 010e 	add.w	r1, r3, #14
   1651e:	687b      	ldr	r3, [r7, #4]
   16520:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   16524:	2310      	movs	r3, #16
   16526:	6878      	ldr	r0, [r7, #4]
   16528:	4c1f      	ldr	r4, [pc, #124]	; (165a8 <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
   1652a:	47a0      	blx	r4
	while(!IsReady());
   1652c:	6878      	ldr	r0, [r7, #4]
   1652e:	4b1d      	ldr	r3, [pc, #116]	; (165a4 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   16530:	4798      	blx	r3
   16532:	4603      	mov	r3, r0
   16534:	f083 0301 	eor.w	r3, r3, #1
   16538:	b2db      	uxtb	r3, r3
   1653a:	2b00      	cmp	r3, #0
   1653c:	d000      	beq.n	16540 <_ZN13AT24MAC_Class8SelfTestEv+0x88>
   1653e:	e7f5      	b.n	1652c <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   16540:	687b      	ldr	r3, [r7, #4]
   16542:	f103 011e 	add.w	r1, r3, #30
   16546:	687b      	ldr	r3, [r7, #4]
   16548:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   1654c:	2310      	movs	r3, #16
   1654e:	6878      	ldr	r0, [r7, #4]
   16550:	4c16      	ldr	r4, [pc, #88]	; (165ac <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
   16552:	47a0      	blx	r4
	isOK = true;
   16554:	687b      	ldr	r3, [r7, #4]
   16556:	2201      	movs	r2, #1
   16558:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   1655c:	2300      	movs	r3, #0
   1655e:	60bb      	str	r3, [r7, #8]
   16560:	68bb      	ldr	r3, [r7, #8]
   16562:	2b0f      	cmp	r3, #15
   16564:	dc14      	bgt.n	16590 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
   16566:	687a      	ldr	r2, [r7, #4]
   16568:	68bb      	ldr	r3, [r7, #8]
   1656a:	4413      	add	r3, r2
   1656c:	330e      	adds	r3, #14
   1656e:	781a      	ldrb	r2, [r3, #0]
   16570:	6879      	ldr	r1, [r7, #4]
   16572:	68bb      	ldr	r3, [r7, #8]
   16574:	440b      	add	r3, r1
   16576:	331e      	adds	r3, #30
   16578:	781b      	ldrb	r3, [r3, #0]
   1657a:	429a      	cmp	r2, r3
   1657c:	d004      	beq.n	16588 <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
   1657e:	687b      	ldr	r3, [r7, #4]
   16580:	2200      	movs	r2, #0
   16582:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
   16586:	e003      	b.n	16590 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   16588:	68bb      	ldr	r3, [r7, #8]
   1658a:	3301      	adds	r3, #1
   1658c:	60bb      	str	r3, [r7, #8]
   1658e:	e7e7      	b.n	16560 <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
   16590:	687b      	ldr	r3, [r7, #4]
   16592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
   16596:	4618      	mov	r0, r3
   16598:	3714      	adds	r7, #20
   1659a:	46bd      	mov	sp, r7
   1659c:	bd90      	pop	{r4, r7, pc}
   1659e:	bf00      	nop
   165a0:	0001c675 	.word	0x0001c675
   165a4:	000165b1 	.word	0x000165b1
   165a8:	00016255 	.word	0x00016255
   165ac:	000163e9 	.word	0x000163e9

000165b0 <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
   165b0:	b480      	push	{r7}
   165b2:	b083      	sub	sp, #12
   165b4:	af00      	add	r7, sp, #0
   165b6:	6078      	str	r0, [r7, #4]

	if (i2ca->txReady && i2ca->rxReady)
   165b8:	687b      	ldr	r3, [r7, #4]
   165ba:	689b      	ldr	r3, [r3, #8]
   165bc:	7d1b      	ldrb	r3, [r3, #20]
   165be:	b2db      	uxtb	r3, r3
   165c0:	2b00      	cmp	r3, #0
   165c2:	d007      	beq.n	165d4 <_ZN13AT24MAC_Class7IsReadyEv+0x24>
   165c4:	687b      	ldr	r3, [r7, #4]
   165c6:	689b      	ldr	r3, [r3, #8]
   165c8:	7d5b      	ldrb	r3, [r3, #21]
   165ca:	b2db      	uxtb	r3, r3
   165cc:	2b00      	cmp	r3, #0
   165ce:	d001      	beq.n	165d4 <_ZN13AT24MAC_Class7IsReadyEv+0x24>
   165d0:	2301      	movs	r3, #1
   165d2:	e000      	b.n	165d6 <_ZN13AT24MAC_Class7IsReadyEv+0x26>
   165d4:	2300      	movs	r3, #0
   165d6:	2b00      	cmp	r3, #0
   165d8:	d003      	beq.n	165e2 <_ZN13AT24MAC_Class7IsReadyEv+0x32>
	{
		isReady=true;
   165da:	687b      	ldr	r3, [r7, #4]
   165dc:	2201      	movs	r2, #1
   165de:	701a      	strb	r2, [r3, #0]
   165e0:	e002      	b.n	165e8 <_ZN13AT24MAC_Class7IsReadyEv+0x38>
	}
	else
	{
		isReady=false;
   165e2:	687b      	ldr	r3, [r7, #4]
   165e4:	2200      	movs	r2, #0
   165e6:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
   165e8:	687b      	ldr	r3, [r7, #4]
   165ea:	781b      	ldrb	r3, [r3, #0]
   165ec:	b2db      	uxtb	r3, r3
}
   165ee:	4618      	mov	r0, r3
   165f0:	370c      	adds	r7, #12
   165f2:	46bd      	mov	sp, r7
   165f4:	bc80      	pop	{r7}
   165f6:	4770      	bx	lr

000165f8 <_Z41__static_initialization_and_destruction_0ii>:

   165f8:	b580      	push	{r7, lr}
   165fa:	b082      	sub	sp, #8
   165fc:	af00      	add	r7, sp, #0
   165fe:	6078      	str	r0, [r7, #4]
   16600:	6039      	str	r1, [r7, #0]
   16602:	687b      	ldr	r3, [r7, #4]
   16604:	2b01      	cmp	r3, #1
   16606:	d115      	bne.n	16634 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   16608:	683b      	ldr	r3, [r7, #0]
   1660a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1660e:	4293      	cmp	r3, r2
   16610:	d110      	bne.n	16634 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static  I2C_Asyn_Class	i2cAsync;
   16612:	480a      	ldr	r0, [pc, #40]	; (1663c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   16614:	4b0a      	ldr	r3, [pc, #40]	; (16640 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   16616:	4798      	blx	r3
   16618:	4a0a      	ldr	r2, [pc, #40]	; (16644 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   1661a:	490b      	ldr	r1, [pc, #44]	; (16648 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   1661c:	4807      	ldr	r0, [pc, #28]	; (1663c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1661e:	4b0b      	ldr	r3, [pc, #44]	; (1664c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   16620:	4798      	blx	r3
   16622:	490b      	ldr	r1, [pc, #44]	; (16650 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   16624:	480b      	ldr	r0, [pc, #44]	; (16654 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   16626:	4b0c      	ldr	r3, [pc, #48]	; (16658 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   16628:	4798      	blx	r3
   1662a:	4a06      	ldr	r2, [pc, #24]	; (16644 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   1662c:	490b      	ldr	r1, [pc, #44]	; (1665c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1662e:	4809      	ldr	r0, [pc, #36]	; (16654 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   16630:	4b06      	ldr	r3, [pc, #24]	; (1664c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   16632:	4798      	blx	r3
   16634:	bf00      	nop
   16636:	3708      	adds	r7, #8
   16638:	46bd      	mov	sp, r7
   1663a:	bd80      	pop	{r7, pc}
   1663c:	20009e20 	.word	0x20009e20
   16640:	00018d55 	.word	0x00018d55
   16644:	20000000 	.word	0x20000000
   16648:	00018d85 	.word	0x00018d85
   1664c:	00019d41 	.word	0x00019d41
   16650:	2000a8bc 	.word	0x2000a8bc
   16654:	20009e64 	.word	0x20009e64
   16658:	0001619d 	.word	0x0001619d
   1665c:	000161cd 	.word	0x000161cd

00016660 <_GLOBAL__sub_I_ptrAT24MACClass>:
   16660:	b580      	push	{r7, lr}
   16662:	af00      	add	r7, sp, #0
   16664:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16668:	2001      	movs	r0, #1
   1666a:	4b01      	ldr	r3, [pc, #4]	; (16670 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
   1666c:	4798      	blx	r3
   1666e:	bd80      	pop	{r7, pc}
   16670:	000165f9 	.word	0x000165f9

00016674 <hri_port_set_DIR_reg>:
{
   16674:	b480      	push	{r7}
   16676:	b085      	sub	sp, #20
   16678:	af00      	add	r7, sp, #0
   1667a:	60f8      	str	r0, [r7, #12]
   1667c:	460b      	mov	r3, r1
   1667e:	607a      	str	r2, [r7, #4]
   16680:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   16682:	7afb      	ldrb	r3, [r7, #11]
   16684:	68fa      	ldr	r2, [r7, #12]
   16686:	01db      	lsls	r3, r3, #7
   16688:	4413      	add	r3, r2
   1668a:	3308      	adds	r3, #8
   1668c:	687a      	ldr	r2, [r7, #4]
   1668e:	601a      	str	r2, [r3, #0]
}
   16690:	bf00      	nop
   16692:	3714      	adds	r7, #20
   16694:	46bd      	mov	sp, r7
   16696:	bc80      	pop	{r7}
   16698:	4770      	bx	lr

0001669a <hri_port_clear_DIR_reg>:
{
   1669a:	b480      	push	{r7}
   1669c:	b085      	sub	sp, #20
   1669e:	af00      	add	r7, sp, #0
   166a0:	60f8      	str	r0, [r7, #12]
   166a2:	460b      	mov	r3, r1
   166a4:	607a      	str	r2, [r7, #4]
   166a6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   166a8:	7afb      	ldrb	r3, [r7, #11]
   166aa:	68fa      	ldr	r2, [r7, #12]
   166ac:	01db      	lsls	r3, r3, #7
   166ae:	4413      	add	r3, r2
   166b0:	3304      	adds	r3, #4
   166b2:	687a      	ldr	r2, [r7, #4]
   166b4:	601a      	str	r2, [r3, #0]
}
   166b6:	bf00      	nop
   166b8:	3714      	adds	r7, #20
   166ba:	46bd      	mov	sp, r7
   166bc:	bc80      	pop	{r7}
   166be:	4770      	bx	lr

000166c0 <hri_port_set_OUT_reg>:
{
   166c0:	b480      	push	{r7}
   166c2:	b085      	sub	sp, #20
   166c4:	af00      	add	r7, sp, #0
   166c6:	60f8      	str	r0, [r7, #12]
   166c8:	460b      	mov	r3, r1
   166ca:	607a      	str	r2, [r7, #4]
   166cc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   166ce:	7afb      	ldrb	r3, [r7, #11]
   166d0:	68fa      	ldr	r2, [r7, #12]
   166d2:	01db      	lsls	r3, r3, #7
   166d4:	4413      	add	r3, r2
   166d6:	3318      	adds	r3, #24
   166d8:	687a      	ldr	r2, [r7, #4]
   166da:	601a      	str	r2, [r3, #0]
}
   166dc:	bf00      	nop
   166de:	3714      	adds	r7, #20
   166e0:	46bd      	mov	sp, r7
   166e2:	bc80      	pop	{r7}
   166e4:	4770      	bx	lr

000166e6 <hri_port_clear_OUT_reg>:
{
   166e6:	b480      	push	{r7}
   166e8:	b085      	sub	sp, #20
   166ea:	af00      	add	r7, sp, #0
   166ec:	60f8      	str	r0, [r7, #12]
   166ee:	460b      	mov	r3, r1
   166f0:	607a      	str	r2, [r7, #4]
   166f2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   166f4:	7afb      	ldrb	r3, [r7, #11]
   166f6:	68fa      	ldr	r2, [r7, #12]
   166f8:	01db      	lsls	r3, r3, #7
   166fa:	4413      	add	r3, r2
   166fc:	3314      	adds	r3, #20
   166fe:	687a      	ldr	r2, [r7, #4]
   16700:	601a      	str	r2, [r3, #0]
}
   16702:	bf00      	nop
   16704:	3714      	adds	r7, #20
   16706:	46bd      	mov	sp, r7
   16708:	bc80      	pop	{r7}
   1670a:	4770      	bx	lr

0001670c <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   1670c:	b480      	push	{r7}
   1670e:	b085      	sub	sp, #20
   16710:	af00      	add	r7, sp, #0
   16712:	6078      	str	r0, [r7, #4]
   16714:	4608      	mov	r0, r1
   16716:	4611      	mov	r1, r2
   16718:	461a      	mov	r2, r3
   1671a:	4603      	mov	r3, r0
   1671c:	70fb      	strb	r3, [r7, #3]
   1671e:	460b      	mov	r3, r1
   16720:	70bb      	strb	r3, [r7, #2]
   16722:	4613      	mov	r3, r2
   16724:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   16726:	78fa      	ldrb	r2, [r7, #3]
   16728:	78bb      	ldrb	r3, [r7, #2]
   1672a:	6879      	ldr	r1, [r7, #4]
   1672c:	01d2      	lsls	r2, r2, #7
   1672e:	440a      	add	r2, r1
   16730:	4413      	add	r3, r2
   16732:	3330      	adds	r3, #48	; 0x30
   16734:	781b      	ldrb	r3, [r3, #0]
   16736:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   16738:	7bfb      	ldrb	r3, [r7, #15]
   1673a:	f023 030f 	bic.w	r3, r3, #15
   1673e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   16740:	787b      	ldrb	r3, [r7, #1]
   16742:	f003 030f 	and.w	r3, r3, #15
   16746:	b2da      	uxtb	r2, r3
   16748:	7bfb      	ldrb	r3, [r7, #15]
   1674a:	4313      	orrs	r3, r2
   1674c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   1674e:	78fa      	ldrb	r2, [r7, #3]
   16750:	78bb      	ldrb	r3, [r7, #2]
   16752:	6879      	ldr	r1, [r7, #4]
   16754:	01d2      	lsls	r2, r2, #7
   16756:	440a      	add	r2, r1
   16758:	4413      	add	r3, r2
   1675a:	3330      	adds	r3, #48	; 0x30
   1675c:	7bfa      	ldrb	r2, [r7, #15]
   1675e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   16760:	bf00      	nop
   16762:	3714      	adds	r7, #20
   16764:	46bd      	mov	sp, r7
   16766:	bc80      	pop	{r7}
   16768:	4770      	bx	lr

0001676a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   1676a:	b480      	push	{r7}
   1676c:	b085      	sub	sp, #20
   1676e:	af00      	add	r7, sp, #0
   16770:	6078      	str	r0, [r7, #4]
   16772:	4608      	mov	r0, r1
   16774:	4611      	mov	r1, r2
   16776:	461a      	mov	r2, r3
   16778:	4603      	mov	r3, r0
   1677a:	70fb      	strb	r3, [r7, #3]
   1677c:	460b      	mov	r3, r1
   1677e:	70bb      	strb	r3, [r7, #2]
   16780:	4613      	mov	r3, r2
   16782:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   16784:	78fa      	ldrb	r2, [r7, #3]
   16786:	78bb      	ldrb	r3, [r7, #2]
   16788:	6879      	ldr	r1, [r7, #4]
   1678a:	01d2      	lsls	r2, r2, #7
   1678c:	440a      	add	r2, r1
   1678e:	4413      	add	r3, r2
   16790:	3330      	adds	r3, #48	; 0x30
   16792:	781b      	ldrb	r3, [r3, #0]
   16794:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   16796:	7bfb      	ldrb	r3, [r7, #15]
   16798:	f003 030f 	and.w	r3, r3, #15
   1679c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   1679e:	787b      	ldrb	r3, [r7, #1]
   167a0:	011b      	lsls	r3, r3, #4
   167a2:	b2da      	uxtb	r2, r3
   167a4:	7bfb      	ldrb	r3, [r7, #15]
   167a6:	4313      	orrs	r3, r2
   167a8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   167aa:	78fa      	ldrb	r2, [r7, #3]
   167ac:	78bb      	ldrb	r3, [r7, #2]
   167ae:	6879      	ldr	r1, [r7, #4]
   167b0:	01d2      	lsls	r2, r2, #7
   167b2:	440a      	add	r2, r1
   167b4:	4413      	add	r3, r2
   167b6:	3330      	adds	r3, #48	; 0x30
   167b8:	7bfa      	ldrb	r2, [r7, #15]
   167ba:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   167bc:	bf00      	nop
   167be:	3714      	adds	r7, #20
   167c0:	46bd      	mov	sp, r7
   167c2:	bc80      	pop	{r7}
   167c4:	4770      	bx	lr

000167c6 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   167c6:	b480      	push	{r7}
   167c8:	b085      	sub	sp, #20
   167ca:	af00      	add	r7, sp, #0
   167cc:	6078      	str	r0, [r7, #4]
   167ce:	4608      	mov	r0, r1
   167d0:	4611      	mov	r1, r2
   167d2:	461a      	mov	r2, r3
   167d4:	4603      	mov	r3, r0
   167d6:	70fb      	strb	r3, [r7, #3]
   167d8:	460b      	mov	r3, r1
   167da:	70bb      	strb	r3, [r7, #2]
   167dc:	4613      	mov	r3, r2
   167de:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   167e0:	78fa      	ldrb	r2, [r7, #3]
   167e2:	78bb      	ldrb	r3, [r7, #2]
   167e4:	6879      	ldr	r1, [r7, #4]
   167e6:	01d2      	lsls	r2, r2, #7
   167e8:	440a      	add	r2, r1
   167ea:	4413      	add	r3, r2
   167ec:	3340      	adds	r3, #64	; 0x40
   167ee:	781b      	ldrb	r3, [r3, #0]
   167f0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   167f2:	7bfb      	ldrb	r3, [r7, #15]
   167f4:	f023 0301 	bic.w	r3, r3, #1
   167f8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   167fa:	787a      	ldrb	r2, [r7, #1]
   167fc:	7bfb      	ldrb	r3, [r7, #15]
   167fe:	4313      	orrs	r3, r2
   16800:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   16802:	78fa      	ldrb	r2, [r7, #3]
   16804:	78bb      	ldrb	r3, [r7, #2]
   16806:	6879      	ldr	r1, [r7, #4]
   16808:	01d2      	lsls	r2, r2, #7
   1680a:	440a      	add	r2, r1
   1680c:	4413      	add	r3, r2
   1680e:	3340      	adds	r3, #64	; 0x40
   16810:	7bfa      	ldrb	r2, [r7, #15]
   16812:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   16814:	bf00      	nop
   16816:	3714      	adds	r7, #20
   16818:	46bd      	mov	sp, r7
   1681a:	bc80      	pop	{r7}
   1681c:	4770      	bx	lr

0001681e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   1681e:	b480      	push	{r7}
   16820:	b085      	sub	sp, #20
   16822:	af00      	add	r7, sp, #0
   16824:	60f8      	str	r0, [r7, #12]
   16826:	460b      	mov	r3, r1
   16828:	607a      	str	r2, [r7, #4]
   1682a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   1682c:	7afb      	ldrb	r3, [r7, #11]
   1682e:	68fa      	ldr	r2, [r7, #12]
   16830:	01db      	lsls	r3, r3, #7
   16832:	4413      	add	r3, r2
   16834:	3328      	adds	r3, #40	; 0x28
   16836:	687a      	ldr	r2, [r7, #4]
   16838:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1683a:	bf00      	nop
   1683c:	3714      	adds	r7, #20
   1683e:	46bd      	mov	sp, r7
   16840:	bc80      	pop	{r7}
   16842:	4770      	bx	lr

00016844 <_gpio_set_direction>:
{
   16844:	b580      	push	{r7, lr}
   16846:	b082      	sub	sp, #8
   16848:	af00      	add	r7, sp, #0
   1684a:	4603      	mov	r3, r0
   1684c:	6039      	str	r1, [r7, #0]
   1684e:	71fb      	strb	r3, [r7, #7]
   16850:	4613      	mov	r3, r2
   16852:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   16854:	79bb      	ldrb	r3, [r7, #6]
   16856:	2b01      	cmp	r3, #1
   16858:	d01c      	beq.n	16894 <_gpio_set_direction+0x50>
   1685a:	2b02      	cmp	r3, #2
   1685c:	d037      	beq.n	168ce <_gpio_set_direction+0x8a>
   1685e:	2b00      	cmp	r3, #0
   16860:	d14e      	bne.n	16900 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   16862:	79fb      	ldrb	r3, [r7, #7]
   16864:	683a      	ldr	r2, [r7, #0]
   16866:	4619      	mov	r1, r3
   16868:	482a      	ldr	r0, [pc, #168]	; (16914 <_gpio_set_direction+0xd0>)
   1686a:	4b2b      	ldr	r3, [pc, #172]	; (16918 <_gpio_set_direction+0xd4>)
   1686c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   1686e:	683b      	ldr	r3, [r7, #0]
   16870:	b29b      	uxth	r3, r3
   16872:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   16876:	79fb      	ldrb	r3, [r7, #7]
   16878:	4619      	mov	r1, r3
   1687a:	4826      	ldr	r0, [pc, #152]	; (16914 <_gpio_set_direction+0xd0>)
   1687c:	4b27      	ldr	r3, [pc, #156]	; (1691c <_gpio_set_direction+0xd8>)
   1687e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16880:	683b      	ldr	r3, [r7, #0]
   16882:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   16884:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16888:	79fb      	ldrb	r3, [r7, #7]
   1688a:	4619      	mov	r1, r3
   1688c:	4821      	ldr	r0, [pc, #132]	; (16914 <_gpio_set_direction+0xd0>)
   1688e:	4b23      	ldr	r3, [pc, #140]	; (1691c <_gpio_set_direction+0xd8>)
   16890:	4798      	blx	r3
		break;
   16892:	e03a      	b.n	1690a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   16894:	79fb      	ldrb	r3, [r7, #7]
   16896:	683a      	ldr	r2, [r7, #0]
   16898:	4619      	mov	r1, r3
   1689a:	481e      	ldr	r0, [pc, #120]	; (16914 <_gpio_set_direction+0xd0>)
   1689c:	4b1e      	ldr	r3, [pc, #120]	; (16918 <_gpio_set_direction+0xd4>)
   1689e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   168a0:	683b      	ldr	r3, [r7, #0]
   168a2:	b29b      	uxth	r3, r3
   168a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   168a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   168ac:	79f9      	ldrb	r1, [r7, #7]
   168ae:	461a      	mov	r2, r3
   168b0:	4818      	ldr	r0, [pc, #96]	; (16914 <_gpio_set_direction+0xd0>)
   168b2:	4b1a      	ldr	r3, [pc, #104]	; (1691c <_gpio_set_direction+0xd8>)
   168b4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   168b6:	683b      	ldr	r3, [r7, #0]
   168b8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   168ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   168be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   168c2:	79f9      	ldrb	r1, [r7, #7]
   168c4:	461a      	mov	r2, r3
   168c6:	4813      	ldr	r0, [pc, #76]	; (16914 <_gpio_set_direction+0xd0>)
   168c8:	4b14      	ldr	r3, [pc, #80]	; (1691c <_gpio_set_direction+0xd8>)
   168ca:	4798      	blx	r3
		break;
   168cc:	e01d      	b.n	1690a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   168ce:	79fb      	ldrb	r3, [r7, #7]
   168d0:	683a      	ldr	r2, [r7, #0]
   168d2:	4619      	mov	r1, r3
   168d4:	480f      	ldr	r0, [pc, #60]	; (16914 <_gpio_set_direction+0xd0>)
   168d6:	4b12      	ldr	r3, [pc, #72]	; (16920 <_gpio_set_direction+0xdc>)
   168d8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   168da:	683b      	ldr	r3, [r7, #0]
   168dc:	b29b      	uxth	r3, r3
   168de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   168e2:	79fb      	ldrb	r3, [r7, #7]
   168e4:	4619      	mov	r1, r3
   168e6:	480b      	ldr	r0, [pc, #44]	; (16914 <_gpio_set_direction+0xd0>)
   168e8:	4b0c      	ldr	r3, [pc, #48]	; (1691c <_gpio_set_direction+0xd8>)
   168ea:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   168ec:	683b      	ldr	r3, [r7, #0]
   168ee:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   168f0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   168f4:	79fb      	ldrb	r3, [r7, #7]
   168f6:	4619      	mov	r1, r3
   168f8:	4806      	ldr	r0, [pc, #24]	; (16914 <_gpio_set_direction+0xd0>)
   168fa:	4b08      	ldr	r3, [pc, #32]	; (1691c <_gpio_set_direction+0xd8>)
   168fc:	4798      	blx	r3
		break;
   168fe:	e004      	b.n	1690a <_gpio_set_direction+0xc6>
		ASSERT(false);
   16900:	2246      	movs	r2, #70	; 0x46
   16902:	4908      	ldr	r1, [pc, #32]	; (16924 <_gpio_set_direction+0xe0>)
   16904:	2000      	movs	r0, #0
   16906:	4b08      	ldr	r3, [pc, #32]	; (16928 <_gpio_set_direction+0xe4>)
   16908:	4798      	blx	r3
}
   1690a:	bf00      	nop
   1690c:	3708      	adds	r7, #8
   1690e:	46bd      	mov	sp, r7
   16910:	bd80      	pop	{r7, pc}
   16912:	bf00      	nop
   16914:	41008000 	.word	0x41008000
   16918:	0001669b 	.word	0x0001669b
   1691c:	0001681f 	.word	0x0001681f
   16920:	00016675 	.word	0x00016675
   16924:	00021fb8 	.word	0x00021fb8
   16928:	000080d1 	.word	0x000080d1

0001692c <_gpio_set_level>:
{
   1692c:	b580      	push	{r7, lr}
   1692e:	b082      	sub	sp, #8
   16930:	af00      	add	r7, sp, #0
   16932:	4603      	mov	r3, r0
   16934:	6039      	str	r1, [r7, #0]
   16936:	71fb      	strb	r3, [r7, #7]
   16938:	4613      	mov	r3, r2
   1693a:	71bb      	strb	r3, [r7, #6]
	if (level) {
   1693c:	79bb      	ldrb	r3, [r7, #6]
   1693e:	2b00      	cmp	r3, #0
   16940:	d006      	beq.n	16950 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   16942:	79fb      	ldrb	r3, [r7, #7]
   16944:	683a      	ldr	r2, [r7, #0]
   16946:	4619      	mov	r1, r3
   16948:	4806      	ldr	r0, [pc, #24]	; (16964 <_gpio_set_level+0x38>)
   1694a:	4b07      	ldr	r3, [pc, #28]	; (16968 <_gpio_set_level+0x3c>)
   1694c:	4798      	blx	r3
}
   1694e:	e005      	b.n	1695c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   16950:	79fb      	ldrb	r3, [r7, #7]
   16952:	683a      	ldr	r2, [r7, #0]
   16954:	4619      	mov	r1, r3
   16956:	4803      	ldr	r0, [pc, #12]	; (16964 <_gpio_set_level+0x38>)
   16958:	4b04      	ldr	r3, [pc, #16]	; (1696c <_gpio_set_level+0x40>)
   1695a:	4798      	blx	r3
}
   1695c:	bf00      	nop
   1695e:	3708      	adds	r7, #8
   16960:	46bd      	mov	sp, r7
   16962:	bd80      	pop	{r7, pc}
   16964:	41008000 	.word	0x41008000
   16968:	000166c1 	.word	0x000166c1
   1696c:	000166e7 	.word	0x000166e7

00016970 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   16970:	b590      	push	{r4, r7, lr}
   16972:	b085      	sub	sp, #20
   16974:	af00      	add	r7, sp, #0
   16976:	6078      	str	r0, [r7, #4]
   16978:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   1697a:	687b      	ldr	r3, [r7, #4]
   1697c:	095b      	lsrs	r3, r3, #5
   1697e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   16980:	687b      	ldr	r3, [r7, #4]
   16982:	b2db      	uxtb	r3, r3
   16984:	f003 031f 	and.w	r3, r3, #31
   16988:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   1698a:	683b      	ldr	r3, [r7, #0]
   1698c:	f1b3 3fff 	cmp.w	r3, #4294967295
   16990:	d106      	bne.n	169a0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   16992:	7bba      	ldrb	r2, [r7, #14]
   16994:	7bf9      	ldrb	r1, [r7, #15]
   16996:	2300      	movs	r3, #0
   16998:	4812      	ldr	r0, [pc, #72]	; (169e4 <_gpio_set_pin_function+0x74>)
   1699a:	4c13      	ldr	r4, [pc, #76]	; (169e8 <_gpio_set_pin_function+0x78>)
   1699c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   1699e:	e01d      	b.n	169dc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   169a0:	7bba      	ldrb	r2, [r7, #14]
   169a2:	7bf9      	ldrb	r1, [r7, #15]
   169a4:	2301      	movs	r3, #1
   169a6:	480f      	ldr	r0, [pc, #60]	; (169e4 <_gpio_set_pin_function+0x74>)
   169a8:	4c0f      	ldr	r4, [pc, #60]	; (169e8 <_gpio_set_pin_function+0x78>)
   169aa:	47a0      	blx	r4
		if (pin & 1) {
   169ac:	7bbb      	ldrb	r3, [r7, #14]
   169ae:	f003 0301 	and.w	r3, r3, #1
   169b2:	2b00      	cmp	r3, #0
   169b4:	d009      	beq.n	169ca <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   169b6:	7bbb      	ldrb	r3, [r7, #14]
   169b8:	105b      	asrs	r3, r3, #1
   169ba:	b2da      	uxtb	r2, r3
   169bc:	683b      	ldr	r3, [r7, #0]
   169be:	b2db      	uxtb	r3, r3
   169c0:	7bf9      	ldrb	r1, [r7, #15]
   169c2:	4808      	ldr	r0, [pc, #32]	; (169e4 <_gpio_set_pin_function+0x74>)
   169c4:	4c09      	ldr	r4, [pc, #36]	; (169ec <_gpio_set_pin_function+0x7c>)
   169c6:	47a0      	blx	r4
}
   169c8:	e008      	b.n	169dc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   169ca:	7bbb      	ldrb	r3, [r7, #14]
   169cc:	105b      	asrs	r3, r3, #1
   169ce:	b2da      	uxtb	r2, r3
   169d0:	683b      	ldr	r3, [r7, #0]
   169d2:	b2db      	uxtb	r3, r3
   169d4:	7bf9      	ldrb	r1, [r7, #15]
   169d6:	4803      	ldr	r0, [pc, #12]	; (169e4 <_gpio_set_pin_function+0x74>)
   169d8:	4c05      	ldr	r4, [pc, #20]	; (169f0 <_gpio_set_pin_function+0x80>)
   169da:	47a0      	blx	r4
}
   169dc:	bf00      	nop
   169de:	3714      	adds	r7, #20
   169e0:	46bd      	mov	sp, r7
   169e2:	bd90      	pop	{r4, r7, pc}
   169e4:	41008000 	.word	0x41008000
   169e8:	000167c7 	.word	0x000167c7
   169ec:	0001676b 	.word	0x0001676b
   169f0:	0001670d 	.word	0x0001670d

000169f4 <gpio_set_pin_function>:
{
   169f4:	b580      	push	{r7, lr}
   169f6:	b082      	sub	sp, #8
   169f8:	af00      	add	r7, sp, #0
   169fa:	6078      	str	r0, [r7, #4]
   169fc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   169fe:	6839      	ldr	r1, [r7, #0]
   16a00:	6878      	ldr	r0, [r7, #4]
   16a02:	4b03      	ldr	r3, [pc, #12]	; (16a10 <gpio_set_pin_function+0x1c>)
   16a04:	4798      	blx	r3
}
   16a06:	bf00      	nop
   16a08:	3708      	adds	r7, #8
   16a0a:	46bd      	mov	sp, r7
   16a0c:	bd80      	pop	{r7, pc}
   16a0e:	bf00      	nop
   16a10:	00016971 	.word	0x00016971

00016a14 <gpio_set_pin_direction>:
{
   16a14:	b580      	push	{r7, lr}
   16a16:	b082      	sub	sp, #8
   16a18:	af00      	add	r7, sp, #0
   16a1a:	4603      	mov	r3, r0
   16a1c:	460a      	mov	r2, r1
   16a1e:	71fb      	strb	r3, [r7, #7]
   16a20:	4613      	mov	r3, r2
   16a22:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   16a24:	79fb      	ldrb	r3, [r7, #7]
   16a26:	115b      	asrs	r3, r3, #5
   16a28:	b2d8      	uxtb	r0, r3
   16a2a:	79fb      	ldrb	r3, [r7, #7]
   16a2c:	f003 031f 	and.w	r3, r3, #31
   16a30:	2201      	movs	r2, #1
   16a32:	fa02 f303 	lsl.w	r3, r2, r3
   16a36:	79ba      	ldrb	r2, [r7, #6]
   16a38:	4619      	mov	r1, r3
   16a3a:	4b03      	ldr	r3, [pc, #12]	; (16a48 <gpio_set_pin_direction+0x34>)
   16a3c:	4798      	blx	r3
}
   16a3e:	bf00      	nop
   16a40:	3708      	adds	r7, #8
   16a42:	46bd      	mov	sp, r7
   16a44:	bd80      	pop	{r7, pc}
   16a46:	bf00      	nop
   16a48:	00016845 	.word	0x00016845

00016a4c <gpio_set_pin_level>:
{
   16a4c:	b580      	push	{r7, lr}
   16a4e:	b082      	sub	sp, #8
   16a50:	af00      	add	r7, sp, #0
   16a52:	4603      	mov	r3, r0
   16a54:	460a      	mov	r2, r1
   16a56:	71fb      	strb	r3, [r7, #7]
   16a58:	4613      	mov	r3, r2
   16a5a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   16a5c:	79fb      	ldrb	r3, [r7, #7]
   16a5e:	115b      	asrs	r3, r3, #5
   16a60:	b2d8      	uxtb	r0, r3
   16a62:	79fb      	ldrb	r3, [r7, #7]
   16a64:	f003 031f 	and.w	r3, r3, #31
   16a68:	2201      	movs	r2, #1
   16a6a:	fa02 f303 	lsl.w	r3, r2, r3
   16a6e:	79ba      	ldrb	r2, [r7, #6]
   16a70:	4619      	mov	r1, r3
   16a72:	4b03      	ldr	r3, [pc, #12]	; (16a80 <gpio_set_pin_level+0x34>)
   16a74:	4798      	blx	r3
}
   16a76:	bf00      	nop
   16a78:	3708      	adds	r7, #8
   16a7a:	46bd      	mov	sp, r7
   16a7c:	bd80      	pop	{r7, pc}
   16a7e:	bf00      	nop
   16a80:	0001692d 	.word	0x0001692d

00016a84 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   16a84:	b580      	push	{r7, lr}
   16a86:	b082      	sub	sp, #8
   16a88:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   16a8a:	2100      	movs	r1, #0
   16a8c:	2008      	movs	r0, #8
   16a8e:	4b24      	ldr	r3, [pc, #144]	; (16b20 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   16a90:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   16a92:	2100      	movs	r1, #0
   16a94:	202b      	movs	r0, #43	; 0x2b
   16a96:	4b22      	ldr	r3, [pc, #136]	; (16b20 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   16a98:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   16a9a:	2100      	movs	r1, #0
   16a9c:	202a      	movs	r0, #42	; 0x2a
   16a9e:	4b20      	ldr	r3, [pc, #128]	; (16b20 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   16aa0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   16aa2:	2102      	movs	r1, #2
   16aa4:	2008      	movs	r0, #8
   16aa6:	4b1f      	ldr	r3, [pc, #124]	; (16b24 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   16aa8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   16aaa:	2102      	movs	r1, #2
   16aac:	202b      	movs	r0, #43	; 0x2b
   16aae:	4b1d      	ldr	r3, [pc, #116]	; (16b24 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   16ab0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   16ab2:	2102      	movs	r1, #2
   16ab4:	202a      	movs	r0, #42	; 0x2a
   16ab6:	4b1b      	ldr	r3, [pc, #108]	; (16b24 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   16ab8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   16aba:	2101      	movs	r1, #1
   16abc:	2008      	movs	r0, #8
   16abe:	4b1a      	ldr	r3, [pc, #104]	; (16b28 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16ac0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   16ac2:	2100      	movs	r1, #0
   16ac4:	202b      	movs	r0, #43	; 0x2b
   16ac6:	4b18      	ldr	r3, [pc, #96]	; (16b28 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16ac8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   16aca:	2100      	movs	r1, #0
   16acc:	202a      	movs	r0, #42	; 0x2a
   16ace:	4b16      	ldr	r3, [pc, #88]	; (16b28 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16ad0:	4798      	blx	r3

	delay_us(1);
   16ad2:	2001      	movs	r0, #1
   16ad4:	4b15      	ldr	r3, [pc, #84]	; (16b2c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16ad6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   16ad8:	2300      	movs	r3, #0
   16ada:	607b      	str	r3, [r7, #4]
   16adc:	687b      	ldr	r3, [r7, #4]
   16ade:	2b06      	cmp	r3, #6
   16ae0:	dc11      	bgt.n	16b06 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   16ae2:	2101      	movs	r1, #1
   16ae4:	202a      	movs	r0, #42	; 0x2a
   16ae6:	4b10      	ldr	r3, [pc, #64]	; (16b28 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16ae8:	4798      	blx	r3
		delay_us(1);
   16aea:	2001      	movs	r0, #1
   16aec:	4b0f      	ldr	r3, [pc, #60]	; (16b2c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16aee:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   16af0:	2100      	movs	r1, #0
   16af2:	202a      	movs	r0, #42	; 0x2a
   16af4:	4b0c      	ldr	r3, [pc, #48]	; (16b28 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16af6:	4798      	blx	r3
		delay_us(1);
   16af8:	2001      	movs	r0, #1
   16afa:	4b0c      	ldr	r3, [pc, #48]	; (16b2c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16afc:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   16afe:	687b      	ldr	r3, [r7, #4]
   16b00:	3301      	adds	r3, #1
   16b02:	607b      	str	r3, [r7, #4]
   16b04:	e7ea      	b.n	16adc <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   16b06:	2101      	movs	r1, #1
   16b08:	202b      	movs	r0, #43	; 0x2b
   16b0a:	4b07      	ldr	r3, [pc, #28]	; (16b28 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16b0c:	4798      	blx	r3
	delay_us(1);
   16b0e:	2001      	movs	r0, #1
   16b10:	4b06      	ldr	r3, [pc, #24]	; (16b2c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16b12:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   16b14:	4b06      	ldr	r3, [pc, #24]	; (16b30 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   16b16:	4798      	blx	r3
}
   16b18:	bf00      	nop
   16b1a:	3708      	adds	r7, #8
   16b1c:	46bd      	mov	sp, r7
   16b1e:	bd80      	pop	{r7, pc}
   16b20:	000169f5 	.word	0x000169f5
   16b24:	00016a15 	.word	0x00016a15
   16b28:	00016a4d 	.word	0x00016a4d
   16b2c:	0000672d 	.word	0x0000672d
   16b30:	000054cd 	.word	0x000054cd

00016b34 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   16b34:	b480      	push	{r7}
   16b36:	b083      	sub	sp, #12
   16b38:	af00      	add	r7, sp, #0
   16b3a:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   16b3c:	687b      	ldr	r3, [r7, #4]
   16b3e:	4618      	mov	r0, r3
   16b40:	370c      	adds	r7, #12
   16b42:	46bd      	mov	sp, r7
   16b44:	bc80      	pop	{r7}
   16b46:	4770      	bx	lr

00016b48 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   16b48:	b480      	push	{r7}
   16b4a:	b083      	sub	sp, #12
   16b4c:	af00      	add	r7, sp, #0
   16b4e:	6078      	str	r0, [r7, #4]
   16b50:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   16b52:	687b      	ldr	r3, [r7, #4]
   16b54:	683a      	ldr	r2, [r7, #0]
   16b56:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   16b58:	687b      	ldr	r3, [r7, #4]
   16b5a:	4a04      	ldr	r2, [pc, #16]	; (16b6c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   16b5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   16b60:	687b      	ldr	r3, [r7, #4]
   16b62:	4618      	mov	r0, r3
   16b64:	370c      	adds	r7, #12
   16b66:	46bd      	mov	sp, r7
   16b68:	bc80      	pop	{r7}
   16b6a:	4770      	bx	lr
   16b6c:	001fff00 	.word	0x001fff00

00016b70 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   16b70:	b480      	push	{r7}
   16b72:	b083      	sub	sp, #12
   16b74:	af00      	add	r7, sp, #0
   16b76:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   16b78:	687b      	ldr	r3, [r7, #4]
   16b7a:	4618      	mov	r0, r3
   16b7c:	370c      	adds	r7, #12
   16b7e:	46bd      	mov	sp, r7
   16b80:	bc80      	pop	{r7}
   16b82:	4770      	bx	lr

00016b84 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   16b84:	b580      	push	{r7, lr}
   16b86:	b082      	sub	sp, #8
   16b88:	af00      	add	r7, sp, #0
   16b8a:	6078      	str	r0, [r7, #4]
	xferDone=false;
   16b8c:	687b      	ldr	r3, [r7, #4]
   16b8e:	2200      	movs	r2, #0
   16b90:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   16b92:	6878      	ldr	r0, [r7, #4]
   16b94:	4b04      	ldr	r3, [pc, #16]	; (16ba8 <_ZN13N25Q256_Class4InitEv+0x24>)
   16b96:	4798      	blx	r3
	return SelfTest();
   16b98:	6878      	ldr	r0, [r7, #4]
   16b9a:	4b04      	ldr	r3, [pc, #16]	; (16bac <_ZN13N25Q256_Class4InitEv+0x28>)
   16b9c:	4798      	blx	r3
   16b9e:	4603      	mov	r3, r0
}
   16ba0:	4618      	mov	r0, r3
   16ba2:	3708      	adds	r7, #8
   16ba4:	46bd      	mov	sp, r7
   16ba6:	bd80      	pop	{r7, pc}
   16ba8:	00016bb1 	.word	0x00016bb1
   16bac:	00016d65 	.word	0x00016d65

00016bb0 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   16bb0:	b590      	push	{r4, r7, lr}
   16bb2:	b083      	sub	sp, #12
   16bb4:	af00      	add	r7, sp, #0
   16bb6:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   16bb8:	687b      	ldr	r3, [r7, #4]
   16bba:	685b      	ldr	r3, [r3, #4]
   16bbc:	4618      	mov	r0, r3
   16bbe:	4b08      	ldr	r3, [pc, #32]	; (16be0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   16bc0:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   16bc2:	687b      	ldr	r3, [r7, #4]
   16bc4:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   16bc6:	2300      	movs	r3, #0
   16bc8:	4a06      	ldr	r2, [pc, #24]	; (16be4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   16bca:	4807      	ldr	r0, [pc, #28]	; (16be8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   16bcc:	4c07      	ldr	r4, [pc, #28]	; (16bec <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   16bce:	47a0      	blx	r4
   16bd0:	4602      	mov	r2, r0
   16bd2:	687b      	ldr	r3, [r7, #4]
   16bd4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   16bd8:	bf00      	nop
   16bda:	370c      	adds	r7, #12
   16bdc:	46bd      	mov	sp, r7
   16bde:	bd90      	pop	{r4, r7, pc}
   16be0:	00006f79 	.word	0x00006f79
   16be4:	00016a85 	.word	0x00016a85
   16be8:	20009e9c 	.word	0x20009e9c
   16bec:	00011075 	.word	0x00011075

00016bf0 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   16bf0:	b580      	push	{r7, lr}
   16bf2:	b084      	sub	sp, #16
   16bf4:	af00      	add	r7, sp, #0
   16bf6:	6078      	str	r0, [r7, #4]
   16bf8:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   16bfa:	687b      	ldr	r3, [r7, #4]
   16bfc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   16c00:	685b      	ldr	r3, [r3, #4]
   16c02:	689b      	ldr	r3, [r3, #8]
   16c04:	687a      	ldr	r2, [r7, #4]
   16c06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   16c0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16c0e:	6839      	ldr	r1, [r7, #0]
   16c10:	4798      	blx	r3
   16c12:	4603      	mov	r3, r0
   16c14:	60fb      	str	r3, [r7, #12]
	return	e;
   16c16:	68fb      	ldr	r3, [r7, #12]
}
   16c18:	4618      	mov	r0, r3
   16c1a:	3710      	adds	r7, #16
   16c1c:	46bd      	mov	sp, r7
   16c1e:	bd80      	pop	{r7, pc}

00016c20 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   16c20:	b590      	push	{r4, r7, lr}
   16c22:	b087      	sub	sp, #28
   16c24:	af00      	add	r7, sp, #0
   16c26:	60f8      	str	r0, [r7, #12]
   16c28:	60b9      	str	r1, [r7, #8]
   16c2a:	607a      	str	r2, [r7, #4]
   16c2c:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   16c2e:	68fb      	ldr	r3, [r7, #12]
   16c30:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   16c34:	685b      	ldr	r3, [r3, #4]
   16c36:	685c      	ldr	r4, [r3, #4]
   16c38:	68fb      	ldr	r3, [r7, #12]
   16c3a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   16c3e:	683b      	ldr	r3, [r7, #0]
   16c40:	687a      	ldr	r2, [r7, #4]
   16c42:	68b9      	ldr	r1, [r7, #8]
   16c44:	47a0      	blx	r4
   16c46:	4603      	mov	r3, r0
   16c48:	617b      	str	r3, [r7, #20]
	return	w;
   16c4a:	697b      	ldr	r3, [r7, #20]
}
   16c4c:	4618      	mov	r0, r3
   16c4e:	371c      	adds	r7, #28
   16c50:	46bd      	mov	sp, r7
   16c52:	bd90      	pop	{r4, r7, pc}

00016c54 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   16c54:	b590      	push	{r4, r7, lr}
   16c56:	b087      	sub	sp, #28
   16c58:	af00      	add	r7, sp, #0
   16c5a:	60f8      	str	r0, [r7, #12]
   16c5c:	60b9      	str	r1, [r7, #8]
   16c5e:	607a      	str	r2, [r7, #4]
   16c60:	603b      	str	r3, [r7, #0]
	xferDone=false;
   16c62:	68fb      	ldr	r3, [r7, #12]
   16c64:	2200      	movs	r2, #0
   16c66:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   16c68:	68fb      	ldr	r3, [r7, #12]
   16c6a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   16c6e:	685b      	ldr	r3, [r3, #4]
   16c70:	681c      	ldr	r4, [r3, #0]
   16c72:	68fb      	ldr	r3, [r7, #12]
   16c74:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   16c78:	683b      	ldr	r3, [r7, #0]
   16c7a:	687a      	ldr	r2, [r7, #4]
   16c7c:	68b9      	ldr	r1, [r7, #8]
   16c7e:	47a0      	blx	r4
   16c80:	4603      	mov	r3, r0
   16c82:	617b      	str	r3, [r7, #20]
	return	r;
   16c84:	697b      	ldr	r3, [r7, #20]
}
   16c86:	4618      	mov	r0, r3
   16c88:	371c      	adds	r7, #28
   16c8a:	46bd      	mov	sp, r7
   16c8c:	bd90      	pop	{r4, r7, pc}
	...

00016c90 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   16c90:	b580      	push	{r7, lr}
   16c92:	b082      	sub	sp, #8
   16c94:	af00      	add	r7, sp, #0
   16c96:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   16c98:	687a      	ldr	r2, [r7, #4]
   16c9a:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   16c9e:	f043 0310 	orr.w	r3, r3, #16
   16ca2:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   16ca6:	687a      	ldr	r2, [r7, #4]
   16ca8:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   16cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16cb0:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   16cb4:	687a      	ldr	r2, [r7, #4]
   16cb6:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   16cba:	f36f 1305 	bfc	r3, #4, #2
   16cbe:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   16cc2:	687b      	ldr	r3, [r7, #4]
   16cc4:	2205      	movs	r2, #5
   16cc6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   16cca:	687b      	ldr	r3, [r7, #4]
   16ccc:	2201      	movs	r2, #1
   16cce:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   16cd2:	687b      	ldr	r3, [r7, #4]
   16cd4:	f203 2212 	addw	r2, r3, #530	; 0x212
   16cd8:	687b      	ldr	r3, [r7, #4]
   16cda:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   16cde:	687b      	ldr	r3, [r7, #4]
   16ce0:	685a      	ldr	r2, [r3, #4]
   16ce2:	687b      	ldr	r3, [r7, #4]
   16ce4:	f503 7305 	add.w	r3, r3, #532	; 0x214
   16ce8:	4619      	mov	r1, r3
   16cea:	4610      	mov	r0, r2
   16cec:	4b04      	ldr	r3, [pc, #16]	; (16d00 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   16cee:	4798      	blx	r3
		return status;
   16cf0:	687b      	ldr	r3, [r7, #4]
   16cf2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   16cf6:	4618      	mov	r0, r3
   16cf8:	3708      	adds	r7, #8
   16cfa:	46bd      	mov	sp, r7
   16cfc:	bd80      	pop	{r7, pc}
   16cfe:	bf00      	nop
   16d00:	00006ff1 	.word	0x00006ff1

00016d04 <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
uint32_t	N25Q256_Class::GetMemoryCapacity(){
   16d04:	b480      	push	{r7}
   16d06:	b083      	sub	sp, #12
   16d08:	af00      	add	r7, sp, #0
   16d0a:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
   16d0c:	687b      	ldr	r3, [r7, #4]
   16d0e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
   16d12:	4618      	mov	r0, r3
   16d14:	370c      	adds	r7, #12
   16d16:	46bd      	mov	sp, r7
   16d18:	bc80      	pop	{r7}
   16d1a:	4770      	bx	lr

00016d1c <_ZN13N25Q256_Class10WaitOnBusyEv>:
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   16d1c:	b580      	push	{r7, lr}
   16d1e:	b082      	sub	sp, #8
   16d20:	af00      	add	r7, sp, #0
   16d22:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   16d24:	6878      	ldr	r0, [r7, #4]
   16d26:	4b0e      	ldr	r3, [pc, #56]	; (16d60 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   16d28:	4798      	blx	r3
   16d2a:	4603      	mov	r3, r0
   16d2c:	461a      	mov	r2, r3
   16d2e:	687b      	ldr	r3, [r7, #4]
   16d30:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   16d34:	687b      	ldr	r3, [r7, #4]
   16d36:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   16d3a:	f003 0301 	and.w	r3, r3, #1
   16d3e:	2b00      	cmp	r3, #0
   16d40:	d000      	beq.n	16d44 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   16d42:	e7ef      	b.n	16d24 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   16d44:	687b      	ldr	r3, [r7, #4]
   16d46:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   16d4a:	f003 0301 	and.w	r3, r3, #1
   16d4e:	2b00      	cmp	r3, #0
   16d50:	bf0c      	ite	eq
   16d52:	2301      	moveq	r3, #1
   16d54:	2300      	movne	r3, #0
   16d56:	b2db      	uxtb	r3, r3
}
   16d58:	4618      	mov	r0, r3
   16d5a:	3708      	adds	r7, #8
   16d5c:	46bd      	mov	sp, r7
   16d5e:	bd80      	pop	{r7, pc}
   16d60:	00016c91 	.word	0x00016c91

00016d64 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   16d64:	b590      	push	{r4, r7, lr}
   16d66:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   16d6a:	b085      	sub	sp, #20
   16d6c:	af00      	add	r7, sp, #0
   16d6e:	f107 0310 	add.w	r3, r7, #16
   16d72:	3b0c      	subs	r3, #12
   16d74:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   16d76:	f107 0310 	add.w	r3, r7, #16
   16d7a:	3b0c      	subs	r3, #12
   16d7c:	681b      	ldr	r3, [r3, #0]
   16d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16d82:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   16d86:	f107 0310 	add.w	r3, r7, #16
   16d8a:	3b0c      	subs	r3, #12
   16d8c:	681b      	ldr	r3, [r3, #0]
   16d8e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16d92:	f107 0110 	add.w	r1, r7, #16
   16d96:	3904      	subs	r1, #4
   16d98:	f107 0010 	add.w	r0, r7, #16
   16d9c:	380c      	subs	r0, #12
   16d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16da2:	6800      	ldr	r0, [r0, #0]
   16da4:	4c4b      	ldr	r4, [pc, #300]	; (16ed4 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   16da6:	47a0      	blx	r4
	WaitOnBusy();
   16da8:	f107 0310 	add.w	r3, r7, #16
   16dac:	3b0c      	subs	r3, #12
   16dae:	6818      	ldr	r0, [r3, #0]
   16db0:	4b49      	ldr	r3, [pc, #292]	; (16ed8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16db2:	4798      	blx	r3
	Erase(currentAddress);
   16db4:	f107 0310 	add.w	r3, r7, #16
   16db8:	3b0c      	subs	r3, #12
   16dba:	681b      	ldr	r3, [r3, #0]
   16dbc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16dc0:	f107 0310 	add.w	r3, r7, #16
   16dc4:	3b0c      	subs	r3, #12
   16dc6:	4611      	mov	r1, r2
   16dc8:	6818      	ldr	r0, [r3, #0]
   16dca:	4b44      	ldr	r3, [pc, #272]	; (16edc <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   16dcc:	4798      	blx	r3
	WaitOnBusy();
   16dce:	f107 0310 	add.w	r3, r7, #16
   16dd2:	3b0c      	subs	r3, #12
   16dd4:	6818      	ldr	r0, [r3, #0]
   16dd6:	4b40      	ldr	r3, [pc, #256]	; (16ed8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16dd8:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   16dda:	f107 0310 	add.w	r3, r7, #16
   16dde:	3b0c      	subs	r3, #12
   16de0:	681b      	ldr	r3, [r3, #0]
   16de2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16de6:	f107 0110 	add.w	r1, r7, #16
   16dea:	3904      	subs	r1, #4
   16dec:	f107 0010 	add.w	r0, r7, #16
   16df0:	380c      	subs	r0, #12
   16df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16df6:	6800      	ldr	r0, [r0, #0]
   16df8:	4c39      	ldr	r4, [pc, #228]	; (16ee0 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   16dfa:	47a0      	blx	r4
	WaitOnBusy();
   16dfc:	f107 0310 	add.w	r3, r7, #16
   16e00:	3b0c      	subs	r3, #12
   16e02:	6818      	ldr	r0, [r3, #0]
   16e04:	4b34      	ldr	r3, [pc, #208]	; (16ed8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16e06:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   16e08:	f107 0310 	add.w	r3, r7, #16
   16e0c:	3b0c      	subs	r3, #12
   16e0e:	681b      	ldr	r3, [r3, #0]
   16e10:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16e14:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   16e18:	f101 0110 	add.w	r1, r1, #16
   16e1c:	3904      	subs	r1, #4
   16e1e:	f107 0010 	add.w	r0, r7, #16
   16e22:	380c      	subs	r0, #12
   16e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16e28:	6800      	ldr	r0, [r0, #0]
   16e2a:	4c2a      	ldr	r4, [pc, #168]	; (16ed4 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   16e2c:	47a0      	blx	r4
	WaitOnBusy();
   16e2e:	f107 0310 	add.w	r3, r7, #16
   16e32:	3b0c      	subs	r3, #12
   16e34:	6818      	ldr	r0, [r3, #0]
   16e36:	4b28      	ldr	r3, [pc, #160]	; (16ed8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16e38:	4798      	blx	r3
	isOK	 = true;
   16e3a:	f107 0310 	add.w	r3, r7, #16
   16e3e:	3b0c      	subs	r3, #12
   16e40:	681b      	ldr	r3, [r3, #0]
   16e42:	2201      	movs	r2, #1
   16e44:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   16e48:	2300      	movs	r3, #0
   16e4a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   16e4e:	f102 020c 	add.w	r2, r2, #12
   16e52:	6013      	str	r3, [r2, #0]
   16e54:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   16e58:	f103 030c 	add.w	r3, r3, #12
   16e5c:	681b      	ldr	r3, [r3, #0]
   16e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16e62:	da2b      	bge.n	16ebc <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   16e64:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   16e68:	f103 0310 	add.w	r3, r3, #16
   16e6c:	3b04      	subs	r3, #4
   16e6e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   16e72:	f102 020c 	add.w	r2, r2, #12
   16e76:	6812      	ldr	r2, [r2, #0]
   16e78:	4413      	add	r3, r2
   16e7a:	781a      	ldrb	r2, [r3, #0]
   16e7c:	f107 0310 	add.w	r3, r7, #16
   16e80:	3b04      	subs	r3, #4
   16e82:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   16e86:	f101 010c 	add.w	r1, r1, #12
   16e8a:	6809      	ldr	r1, [r1, #0]
   16e8c:	440b      	add	r3, r1
   16e8e:	781b      	ldrb	r3, [r3, #0]
   16e90:	429a      	cmp	r2, r3
   16e92:	d007      	beq.n	16ea4 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   16e94:	f107 0310 	add.w	r3, r7, #16
   16e98:	3b0c      	subs	r3, #12
   16e9a:	681b      	ldr	r3, [r3, #0]
   16e9c:	2200      	movs	r2, #0
   16e9e:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   16ea2:	e00b      	b.n	16ebc <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   16ea4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   16ea8:	f103 030c 	add.w	r3, r3, #12
   16eac:	681b      	ldr	r3, [r3, #0]
   16eae:	3301      	adds	r3, #1
   16eb0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   16eb4:	f102 020c 	add.w	r2, r2, #12
   16eb8:	6013      	str	r3, [r2, #0]
   16eba:	e7cb      	b.n	16e54 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   16ebc:	f107 0310 	add.w	r3, r7, #16
   16ec0:	3b0c      	subs	r3, #12
   16ec2:	681b      	ldr	r3, [r3, #0]
   16ec4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   16ec8:	4618      	mov	r0, r3
   16eca:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   16ece:	3714      	adds	r7, #20
   16ed0:	46bd      	mov	sp, r7
   16ed2:	bd90      	pop	{r4, r7, pc}
   16ed4:	00016c55 	.word	0x00016c55
   16ed8:	00016d1d 	.word	0x00016d1d
   16edc:	00016bf1 	.word	0x00016bf1
   16ee0:	00016c21 	.word	0x00016c21

00016ee4 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   16ee4:	b580      	push	{r7, lr}
   16ee6:	b082      	sub	sp, #8
   16ee8:	af00      	add	r7, sp, #0
   16eea:	6078      	str	r0, [r7, #4]
   16eec:	6039      	str	r1, [r7, #0]
   16eee:	687b      	ldr	r3, [r7, #4]
   16ef0:	2b01      	cmp	r3, #1
   16ef2:	d10d      	bne.n	16f10 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   16ef4:	683b      	ldr	r3, [r7, #0]
   16ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16efa:	4293      	cmp	r3, r2
   16efc:	d108      	bne.n	16f10 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   16efe:	4906      	ldr	r1, [pc, #24]	; (16f18 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   16f00:	4806      	ldr	r0, [pc, #24]	; (16f1c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   16f02:	4b07      	ldr	r3, [pc, #28]	; (16f20 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   16f04:	4798      	blx	r3
   16f06:	4a07      	ldr	r2, [pc, #28]	; (16f24 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   16f08:	4907      	ldr	r1, [pc, #28]	; (16f28 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   16f0a:	4804      	ldr	r0, [pc, #16]	; (16f1c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   16f0c:	4b07      	ldr	r3, [pc, #28]	; (16f2c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   16f0e:	4798      	blx	r3
   16f10:	bf00      	nop
   16f12:	3708      	adds	r7, #8
   16f14:	46bd      	mov	sp, r7
   16f16:	bd80      	pop	{r7, pc}
   16f18:	2000a794 	.word	0x2000a794
   16f1c:	20009eac 	.word	0x20009eac
   16f20:	00016b49 	.word	0x00016b49
   16f24:	20000000 	.word	0x20000000
   16f28:	00016b71 	.word	0x00016b71
   16f2c:	00019d41 	.word	0x00019d41

00016f30 <_GLOBAL__sub_I_ptrN25Q256Class>:
   16f30:	b580      	push	{r7, lr}
   16f32:	af00      	add	r7, sp, #0
   16f34:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16f38:	2001      	movs	r0, #1
   16f3a:	4b01      	ldr	r3, [pc, #4]	; (16f40 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   16f3c:	4798      	blx	r3
   16f3e:	bd80      	pop	{r7, pc}
   16f40:	00016ee5 	.word	0x00016ee5

00016f44 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   16f44:	b580      	push	{r7, lr}
   16f46:	b082      	sub	sp, #8
   16f48:	af00      	add	r7, sp, #0
   16f4a:	6078      	str	r0, [r7, #4]
   16f4c:	687b      	ldr	r3, [r7, #4]
   16f4e:	4618      	mov	r0, r3
   16f50:	4b06      	ldr	r3, [pc, #24]	; (16f6c <_ZN14Calendar_ClassC1Ev+0x28>)
   16f52:	4798      	blx	r3
   16f54:	4a06      	ldr	r2, [pc, #24]	; (16f70 <_ZN14Calendar_ClassC1Ev+0x2c>)
   16f56:	687b      	ldr	r3, [r7, #4]
   16f58:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   16f5a:	4a06      	ldr	r2, [pc, #24]	; (16f74 <_ZN14Calendar_ClassC1Ev+0x30>)
   16f5c:	687b      	ldr	r3, [r7, #4]
   16f5e:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   16f60:	687b      	ldr	r3, [r7, #4]
   16f62:	4618      	mov	r0, r3
   16f64:	3708      	adds	r7, #8
   16f66:	46bd      	mov	sp, r7
   16f68:	bd80      	pop	{r7, pc}
   16f6a:	bf00      	nop
   16f6c:	00017691 	.word	0x00017691
   16f70:	00022004 	.word	0x00022004
   16f74:	2000a0e0 	.word	0x2000a0e0

00016f78 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   16f78:	b580      	push	{r7, lr}
   16f7a:	b082      	sub	sp, #8
   16f7c:	af00      	add	r7, sp, #0
   16f7e:	6078      	str	r0, [r7, #4]
   16f80:	6039      	str	r1, [r7, #0]
   16f82:	687b      	ldr	r3, [r7, #4]
   16f84:	4618      	mov	r0, r3
   16f86:	4b08      	ldr	r3, [pc, #32]	; (16fa8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   16f88:	4798      	blx	r3
   16f8a:	4a08      	ldr	r2, [pc, #32]	; (16fac <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   16f8c:	687b      	ldr	r3, [r7, #4]
   16f8e:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   16f90:	687b      	ldr	r3, [r7, #4]
   16f92:	683a      	ldr	r2, [r7, #0]
   16f94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   16f98:	4a05      	ldr	r2, [pc, #20]	; (16fb0 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   16f9a:	687b      	ldr	r3, [r7, #4]
   16f9c:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   16f9e:	687b      	ldr	r3, [r7, #4]
   16fa0:	4618      	mov	r0, r3
   16fa2:	3708      	adds	r7, #8
   16fa4:	46bd      	mov	sp, r7
   16fa6:	bd80      	pop	{r7, pc}
   16fa8:	00017691 	.word	0x00017691
   16fac:	00022004 	.word	0x00022004
   16fb0:	2000a0e0 	.word	0x2000a0e0

00016fb4 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   16fb4:	b580      	push	{r7, lr}
   16fb6:	b082      	sub	sp, #8
   16fb8:	af00      	add	r7, sp, #0
   16fba:	6078      	str	r0, [r7, #4]
   16fbc:	4a05      	ldr	r2, [pc, #20]	; (16fd4 <_ZN14Calendar_ClassD1Ev+0x20>)
   16fbe:	687b      	ldr	r3, [r7, #4]
   16fc0:	601a      	str	r2, [r3, #0]
   16fc2:	687b      	ldr	r3, [r7, #4]
   16fc4:	4618      	mov	r0, r3
   16fc6:	4b04      	ldr	r3, [pc, #16]	; (16fd8 <_ZN14Calendar_ClassD1Ev+0x24>)
   16fc8:	4798      	blx	r3
{
} //~Calendar_Class
   16fca:	687b      	ldr	r3, [r7, #4]
   16fcc:	4618      	mov	r0, r3
   16fce:	3708      	adds	r7, #8
   16fd0:	46bd      	mov	sp, r7
   16fd2:	bd80      	pop	{r7, pc}
   16fd4:	00022004 	.word	0x00022004
   16fd8:	000176b1 	.word	0x000176b1

00016fdc <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
   16fdc:	b580      	push	{r7, lr}
   16fde:	b082      	sub	sp, #8
   16fe0:	af00      	add	r7, sp, #0
   16fe2:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
   16fe4:	687b      	ldr	r3, [r7, #4]
   16fe6:	4a50      	ldr	r2, [pc, #320]	; (17128 <_ZN14Calendar_Class4InitEv+0x14c>)
   16fe8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
   16fec:	687b      	ldr	r3, [r7, #4]
   16fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16ff2:	4618      	mov	r0, r3
   16ff4:	4b4d      	ldr	r3, [pc, #308]	; (1712c <_ZN14Calendar_Class4InitEv+0x150>)
   16ff6:	4798      	blx	r3
	
	InitMaxDate();
   16ff8:	6878      	ldr	r0, [r7, #4]
   16ffa:	4b4d      	ldr	r3, [pc, #308]	; (17130 <_ZN14Calendar_Class4InitEv+0x154>)
   16ffc:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
   16ffe:	687b      	ldr	r3, [r7, #4]
   17000:	4618      	mov	r0, r3
   17002:	4b4c      	ldr	r3, [pc, #304]	; (17134 <_ZN14Calendar_Class4InitEv+0x158>)
   17004:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   17006:	687b      	ldr	r3, [r7, #4]
   17008:	681b      	ldr	r3, [r3, #0]
   1700a:	3304      	adds	r3, #4
   1700c:	681b      	ldr	r3, [r3, #0]
   1700e:	687a      	ldr	r2, [r7, #4]
   17010:	3260      	adds	r2, #96	; 0x60
   17012:	4611      	mov	r1, r2
   17014:	6878      	ldr	r0, [r7, #4]
   17016:	4798      	blx	r3
   17018:	4602      	mov	r2, r0
   1701a:	687b      	ldr	r3, [r7, #4]
   1701c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   17020:	687b      	ldr	r3, [r7, #4]
   17022:	681b      	ldr	r3, [r3, #0]
   17024:	3304      	adds	r3, #4
   17026:	681b      	ldr	r3, [r3, #0]
   17028:	687a      	ldr	r2, [r7, #4]
   1702a:	326c      	adds	r2, #108	; 0x6c
   1702c:	4611      	mov	r1, r2
   1702e:	6878      	ldr	r0, [r7, #4]
   17030:	4798      	blx	r3
   17032:	4602      	mov	r2, r0
   17034:	687b      	ldr	r3, [r7, #4]
   17036:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   1703a:	687b      	ldr	r3, [r7, #4]
   1703c:	681b      	ldr	r3, [r3, #0]
   1703e:	3304      	adds	r3, #4
   17040:	681b      	ldr	r3, [r3, #0]
   17042:	687a      	ldr	r2, [r7, #4]
   17044:	327c      	adds	r2, #124	; 0x7c
   17046:	4611      	mov	r1, r2
   17048:	6878      	ldr	r0, [r7, #4]
   1704a:	4798      	blx	r3
   1704c:	4602      	mov	r2, r0
   1704e:	687b      	ldr	r3, [r7, #4]
   17050:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   17054:	687b      	ldr	r3, [r7, #4]
   17056:	681b      	ldr	r3, [r3, #0]
   17058:	3304      	adds	r3, #4
   1705a:	681b      	ldr	r3, [r3, #0]
   1705c:	687a      	ldr	r2, [r7, #4]
   1705e:	3284      	adds	r2, #132	; 0x84
   17060:	4611      	mov	r1, r2
   17062:	6878      	ldr	r0, [r7, #4]
   17064:	4798      	blx	r3
   17066:	4602      	mov	r2, r0
   17068:	687b      	ldr	r3, [r7, #4]
   1706a:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   1706c:	6878      	ldr	r0, [r7, #4]
   1706e:	4b32      	ldr	r3, [pc, #200]	; (17138 <_ZN14Calendar_Class4InitEv+0x15c>)
   17070:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   17072:	687b      	ldr	r3, [r7, #4]
   17074:	681b      	ldr	r3, [r3, #0]
   17076:	3304      	adds	r3, #4
   17078:	681b      	ldr	r3, [r3, #0]
   1707a:	687a      	ldr	r2, [r7, #4]
   1707c:	3274      	adds	r2, #116	; 0x74
   1707e:	4611      	mov	r1, r2
   17080:	6878      	ldr	r0, [r7, #4]
   17082:	4798      	blx	r3
   17084:	4602      	mov	r2, r0
   17086:	687b      	ldr	r3, [r7, #4]
   17088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   1708c:	687b      	ldr	r3, [r7, #4]
   1708e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   17092:	687b      	ldr	r3, [r7, #4]
   17094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   17098:	429a      	cmp	r2, r3
   1709a:	d80e      	bhi.n	170ba <_ZN14Calendar_Class4InitEv+0xde>
   1709c:	687b      	ldr	r3, [r7, #4]
   1709e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   170a2:	687b      	ldr	r3, [r7, #4]
   170a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   170a8:	429a      	cmp	r2, r3
   170aa:	d006      	beq.n	170ba <_ZN14Calendar_Class4InitEv+0xde>
   170ac:	687b      	ldr	r3, [r7, #4]
   170ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   170b2:	687b      	ldr	r3, [r7, #4]
   170b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   170b6:	429a      	cmp	r2, r3
   170b8:	d106      	bne.n	170c8 <_ZN14Calendar_Class4InitEv+0xec>
	{
		SetDateTime(&compilationDateTime);
   170ba:	687b      	ldr	r3, [r7, #4]
   170bc:	3374      	adds	r3, #116	; 0x74
   170be:	4619      	mov	r1, r3
   170c0:	6878      	ldr	r0, [r7, #4]
   170c2:	4b1e      	ldr	r3, [pc, #120]	; (1713c <_ZN14Calendar_Class4InitEv+0x160>)
   170c4:	4798      	blx	r3
   170c6:	e022      	b.n	1710e <_ZN14Calendar_Class4InitEv+0x132>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
   170c8:	687b      	ldr	r3, [r7, #4]
   170ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   170ce:	687b      	ldr	r3, [r7, #4]
   170d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   170d4:	429a      	cmp	r2, r3
   170d6:	d206      	bcs.n	170e6 <_ZN14Calendar_Class4InitEv+0x10a>
		{
			SetDateTime(&compilationDateTime);
   170d8:	687b      	ldr	r3, [r7, #4]
   170da:	3374      	adds	r3, #116	; 0x74
   170dc:	4619      	mov	r1, r3
   170de:	6878      	ldr	r0, [r7, #4]
   170e0:	4b16      	ldr	r3, [pc, #88]	; (1713c <_ZN14Calendar_Class4InitEv+0x160>)
   170e2:	4798      	blx	r3
   170e4:	e013      	b.n	1710e <_ZN14Calendar_Class4InitEv+0x132>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   170e6:	687b      	ldr	r3, [r7, #4]
   170e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   170ec:	687b      	ldr	r3, [r7, #4]
   170ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   170f0:	429a      	cmp	r2, r3
   170f2:	d106      	bne.n	17102 <_ZN14Calendar_Class4InitEv+0x126>
			{
				SetDateTime(&compilationDateTime);
   170f4:	687b      	ldr	r3, [r7, #4]
   170f6:	3374      	adds	r3, #116	; 0x74
   170f8:	4619      	mov	r1, r3
   170fa:	6878      	ldr	r0, [r7, #4]
   170fc:	4b0f      	ldr	r3, [pc, #60]	; (1713c <_ZN14Calendar_Class4InitEv+0x160>)
   170fe:	4798      	blx	r3
   17100:	e005      	b.n	1710e <_ZN14Calendar_Class4InitEv+0x132>
			} 
			else
			{
				SetDateTime(&lastDateTime);
   17102:	687b      	ldr	r3, [r7, #4]
   17104:	3360      	adds	r3, #96	; 0x60
   17106:	4619      	mov	r1, r3
   17108:	6878      	ldr	r0, [r7, #4]
   1710a:	4b0c      	ldr	r3, [pc, #48]	; (1713c <_ZN14Calendar_Class4InitEv+0x160>)
   1710c:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
   1710e:	687b      	ldr	r3, [r7, #4]
   17110:	2200      	movs	r2, #0
   17112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
   17116:	687b      	ldr	r3, [r7, #4]
   17118:	4618      	mov	r0, r3
   1711a:	4b09      	ldr	r3, [pc, #36]	; (17140 <_ZN14Calendar_Class4InitEv+0x164>)
   1711c:	4798      	blx	r3
	
}
   1711e:	bf00      	nop
   17120:	3708      	adds	r7, #8
   17122:	46bd      	mov	sp, r7
   17124:	bd80      	pop	{r7, pc}
   17126:	bf00      	nop
   17128:	20009e64 	.word	0x20009e64
   1712c:	000063b9 	.word	0x000063b9
   17130:	00017145 	.word	0x00017145
   17134:	00017965 	.word	0x00017965
   17138:	000171eb 	.word	0x000171eb
   1713c:	000173e1 	.word	0x000173e1
   17140:	000178f5 	.word	0x000178f5

00017144 <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
   17144:	b480      	push	{r7}
   17146:	b083      	sub	sp, #12
   17148:	af00      	add	r7, sp, #0
   1714a:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   1714c:	687b      	ldr	r3, [r7, #4]
   1714e:	f640 0202 	movw	r2, #2050	; 0x802
   17152:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   17156:	687b      	ldr	r3, [r7, #4]
   17158:	220c      	movs	r2, #12
   1715a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   1715e:	687b      	ldr	r3, [r7, #4]
   17160:	221f      	movs	r2, #31
   17162:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   17166:	687b      	ldr	r3, [r7, #4]
   17168:	220c      	movs	r2, #12
   1716a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   1716e:	687b      	ldr	r3, [r7, #4]
   17170:	223b      	movs	r2, #59	; 0x3b
   17172:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   17176:	687b      	ldr	r3, [r7, #4]
   17178:	223b      	movs	r2, #59	; 0x3b
   1717a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   1717e:	687b      	ldr	r3, [r7, #4]
   17180:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17184:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   17188:	687b      	ldr	r3, [r7, #4]
   1718a:	22ff      	movs	r2, #255	; 0xff
   1718c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   17190:	687b      	ldr	r3, [r7, #4]
   17192:	22ff      	movs	r2, #255	; 0xff
   17194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   17198:	687b      	ldr	r3, [r7, #4]
   1719a:	22ff      	movs	r2, #255	; 0xff
   1719c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   171a0:	687b      	ldr	r3, [r7, #4]
   171a2:	22ff      	movs	r2, #255	; 0xff
   171a4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   171a8:	687b      	ldr	r3, [r7, #4]
   171aa:	22ff      	movs	r2, #255	; 0xff
   171ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   171b0:	687b      	ldr	r3, [r7, #4]
   171b2:	2200      	movs	r2, #0
   171b4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   171b8:	687b      	ldr	r3, [r7, #4]
   171ba:	2200      	movs	r2, #0
   171bc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   171c0:	687b      	ldr	r3, [r7, #4]
   171c2:	2200      	movs	r2, #0
   171c4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   171c8:	687b      	ldr	r3, [r7, #4]
   171ca:	2200      	movs	r2, #0
   171cc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   171d0:	687b      	ldr	r3, [r7, #4]
   171d2:	2200      	movs	r2, #0
   171d4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   171d8:	687b      	ldr	r3, [r7, #4]
   171da:	2200      	movs	r2, #0
   171dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   171e0:	bf00      	nop
   171e2:	370c      	adds	r7, #12
   171e4:	46bd      	mov	sp, r7
   171e6:	bc80      	pop	{r7}
   171e8:	4770      	bx	lr

000171ea <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   171ea:	b480      	push	{r7}
   171ec:	b083      	sub	sp, #12
   171ee:	af00      	add	r7, sp, #0
   171f0:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   171f2:	2332      	movs	r3, #50	; 0x32
   171f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   171f8:	4613      	mov	r3, r2
   171fa:	009b      	lsls	r3, r3, #2
   171fc:	4413      	add	r3, r2
   171fe:	005b      	lsls	r3, r3, #1
   17200:	461a      	mov	r2, r3
   17202:	2330      	movs	r3, #48	; 0x30
   17204:	3b30      	subs	r3, #48	; 0x30
   17206:	441a      	add	r2, r3
   17208:	4613      	mov	r3, r2
   1720a:	009b      	lsls	r3, r3, #2
   1720c:	4413      	add	r3, r2
   1720e:	005b      	lsls	r3, r3, #1
   17210:	461a      	mov	r2, r3
   17212:	2332      	movs	r3, #50	; 0x32
   17214:	3b30      	subs	r3, #48	; 0x30
   17216:	4413      	add	r3, r2
   17218:	b29b      	uxth	r3, r3
   1721a:	461a      	mov	r2, r3
   1721c:	0092      	lsls	r2, r2, #2
   1721e:	4413      	add	r3, r2
   17220:	005b      	lsls	r3, r3, #1
   17222:	b29a      	uxth	r2, r3
   17224:	2330      	movs	r3, #48	; 0x30
   17226:	b29b      	uxth	r3, r3
   17228:	4413      	add	r3, r2
   1722a:	b29b      	uxth	r3, r3
   1722c:	3b30      	subs	r3, #48	; 0x30
   1722e:	b29a      	uxth	r2, r3
   17230:	687b      	ldr	r3, [r7, #4]
   17232:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   17236:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   17238:	2b6e      	cmp	r3, #110	; 0x6e
   1723a:	d106      	bne.n	1724a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   1723c:	2363      	movs	r3, #99	; 0x63
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1723e:	2b61      	cmp	r3, #97	; 0x61
   17240:	d101      	bne.n	17246 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   17242:	2301      	movs	r3, #1
   17244:	e02f      	b.n	172a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   17246:	2306      	movs	r3, #6
   17248:	e02d      	b.n	172a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   1724a:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1724c:	2b62      	cmp	r3, #98	; 0x62
   1724e:	d029      	beq.n	172a4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   17250:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   17252:	2b72      	cmp	r3, #114	; 0x72
   17254:	d106      	bne.n	17264 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   17256:	234f      	movs	r3, #79	; 0x4f
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   17258:	2b4d      	cmp	r3, #77	; 0x4d
   1725a:	d101      	bne.n	17260 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   1725c:	2303      	movs	r3, #3
   1725e:	e022      	b.n	172a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   17260:	2304      	movs	r3, #4
   17262:	e020      	b.n	172a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   17264:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   17266:	2b79      	cmp	r3, #121	; 0x79
   17268:	d01a      	beq.n	172a0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   1726a:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1726c:	2b6c      	cmp	r3, #108	; 0x6c
   1726e:	d015      	beq.n	1729c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   17270:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   17272:	2b67      	cmp	r3, #103	; 0x67
   17274:	d010      	beq.n	17298 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   17276:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   17278:	2b70      	cmp	r3, #112	; 0x70
   1727a:	d00b      	beq.n	17294 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   1727c:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1727e:	2b74      	cmp	r3, #116	; 0x74
   17280:	d006      	beq.n	17290 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   17282:	2374      	movs	r3, #116	; 0x74
   17284:	2b76      	cmp	r3, #118	; 0x76
   17286:	d101      	bne.n	1728c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   17288:	230b      	movs	r3, #11
   1728a:	e00c      	b.n	172a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1728c:	230c      	movs	r3, #12
   1728e:	e00a      	b.n	172a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   17290:	230a      	movs	r3, #10
   17292:	e008      	b.n	172a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   17294:	2309      	movs	r3, #9
   17296:	e006      	b.n	172a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   17298:	2308      	movs	r3, #8
   1729a:	e004      	b.n	172a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1729c:	2307      	movs	r3, #7
   1729e:	e002      	b.n	172a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   172a0:	2305      	movs	r3, #5
   172a2:	e000      	b.n	172a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   172a4:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   172a6:	687a      	ldr	r2, [r7, #4]
   172a8:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   172ac:	2332      	movs	r3, #50	; 0x32
   172ae:	2b20      	cmp	r3, #32
   172b0:	d008      	beq.n	172c4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   172b2:	2332      	movs	r3, #50	; 0x32
   172b4:	3b30      	subs	r3, #48	; 0x30
   172b6:	b2db      	uxtb	r3, r3
   172b8:	461a      	mov	r2, r3
   172ba:	0092      	lsls	r2, r2, #2
   172bc:	4413      	add	r3, r2
   172be:	005b      	lsls	r3, r3, #1
   172c0:	b2db      	uxtb	r3, r3
   172c2:	e000      	b.n	172c6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   172c4:	2300      	movs	r3, #0
   172c6:	2232      	movs	r2, #50	; 0x32
   172c8:	4413      	add	r3, r2
   172ca:	b2db      	uxtb	r3, r3
   172cc:	3b30      	subs	r3, #48	; 0x30
   172ce:	b2da      	uxtb	r2, r3
   172d0:	687b      	ldr	r3, [r7, #4]
   172d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   172d6:	2331      	movs	r3, #49	; 0x31
   172d8:	3b30      	subs	r3, #48	; 0x30
   172da:	b2db      	uxtb	r3, r3
   172dc:	461a      	mov	r2, r3
   172de:	0092      	lsls	r2, r2, #2
   172e0:	4413      	add	r3, r2
   172e2:	005b      	lsls	r3, r3, #1
   172e4:	b2db      	uxtb	r3, r3
   172e6:	2234      	movs	r2, #52	; 0x34
   172e8:	4413      	add	r3, r2
   172ea:	b2db      	uxtb	r3, r3
   172ec:	3b30      	subs	r3, #48	; 0x30
   172ee:	b2da      	uxtb	r2, r3
   172f0:	687b      	ldr	r3, [r7, #4]
   172f2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   172f6:	2331      	movs	r3, #49	; 0x31
   172f8:	3b30      	subs	r3, #48	; 0x30
   172fa:	b2db      	uxtb	r3, r3
   172fc:	461a      	mov	r2, r3
   172fe:	0092      	lsls	r2, r2, #2
   17300:	4413      	add	r3, r2
   17302:	005b      	lsls	r3, r3, #1
   17304:	b2db      	uxtb	r3, r3
   17306:	2236      	movs	r2, #54	; 0x36
   17308:	4413      	add	r3, r2
   1730a:	b2db      	uxtb	r3, r3
   1730c:	3b30      	subs	r3, #48	; 0x30
   1730e:	b2da      	uxtb	r2, r3
   17310:	687b      	ldr	r3, [r7, #4]
   17312:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   17316:	2331      	movs	r3, #49	; 0x31
   17318:	3b30      	subs	r3, #48	; 0x30
   1731a:	b2db      	uxtb	r3, r3
   1731c:	461a      	mov	r2, r3
   1731e:	0092      	lsls	r2, r2, #2
   17320:	4413      	add	r3, r2
   17322:	005b      	lsls	r3, r3, #1
   17324:	b2db      	uxtb	r3, r3
   17326:	2230      	movs	r2, #48	; 0x30
   17328:	4413      	add	r3, r2
   1732a:	b2db      	uxtb	r3, r3
   1732c:	3b30      	subs	r3, #48	; 0x30
   1732e:	b2da      	uxtb	r2, r3
   17330:	687b      	ldr	r3, [r7, #4]
   17332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
   17336:	bf00      	nop
   17338:	370c      	adds	r7, #12
   1733a:	46bd      	mov	sp, r7
   1733c:	bc80      	pop	{r7}
   1733e:	4770      	bx	lr

00017340 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   17340:	b580      	push	{r7, lr}
   17342:	b082      	sub	sp, #8
   17344:	af00      	add	r7, sp, #0
   17346:	6078      	str	r0, [r7, #4]
   17348:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   1734a:	687b      	ldr	r3, [r7, #4]
   1734c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   17350:	6839      	ldr	r1, [r7, #0]
   17352:	4618      	mov	r0, r3
   17354:	4b03      	ldr	r3, [pc, #12]	; (17364 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   17356:	4798      	blx	r3
   17358:	4603      	mov	r3, r0
}
   1735a:	4618      	mov	r0, r3
   1735c:	3708      	adds	r7, #8
   1735e:	46bd      	mov	sp, r7
   17360:	bd80      	pop	{r7, pc}
   17362:	bf00      	nop
   17364:	00006509 	.word	0x00006509

00017368 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   17368:	b480      	push	{r7}
   1736a:	b083      	sub	sp, #12
   1736c:	af00      	add	r7, sp, #0
   1736e:	6078      	str	r0, [r7, #4]
   17370:	460b      	mov	r3, r1
   17372:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   17374:	887b      	ldrh	r3, [r7, #2]
   17376:	f003 0303 	and.w	r3, r3, #3
   1737a:	2b00      	cmp	r3, #0
   1737c:	d001      	beq.n	17382 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   1737e:	2300      	movs	r3, #0
   17380:	e000      	b.n	17384 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   17382:	2301      	movs	r3, #1
	}
}
   17384:	4618      	mov	r0, r3
   17386:	370c      	adds	r7, #12
   17388:	46bd      	mov	sp, r7
   1738a:	bc80      	pop	{r7}
   1738c:	4770      	bx	lr
	...

00017390 <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   17390:	b580      	push	{r7, lr}
   17392:	b082      	sub	sp, #8
   17394:	af00      	add	r7, sp, #0
   17396:	6078      	str	r0, [r7, #4]
   17398:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   1739a:	687b      	ldr	r3, [r7, #4]
   1739c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   173a0:	6839      	ldr	r1, [r7, #0]
   173a2:	4618      	mov	r0, r3
   173a4:	4b03      	ldr	r3, [pc, #12]	; (173b4 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   173a6:	4798      	blx	r3
   173a8:	4603      	mov	r3, r0
}
   173aa:	4618      	mov	r0, r3
   173ac:	3708      	adds	r7, #8
   173ae:	46bd      	mov	sp, r7
   173b0:	bd80      	pop	{r7, pc}
   173b2:	bf00      	nop
   173b4:	000063f9 	.word	0x000063f9

000173b8 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   173b8:	b580      	push	{r7, lr}
   173ba:	b082      	sub	sp, #8
   173bc:	af00      	add	r7, sp, #0
   173be:	6078      	str	r0, [r7, #4]
   173c0:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   173c2:	687b      	ldr	r3, [r7, #4]
   173c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   173c8:	6839      	ldr	r1, [r7, #0]
   173ca:	4618      	mov	r0, r3
   173cc:	4b03      	ldr	r3, [pc, #12]	; (173dc <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   173ce:	4798      	blx	r3
   173d0:	4603      	mov	r3, r0
}
   173d2:	4618      	mov	r0, r3
   173d4:	3708      	adds	r7, #8
   173d6:	46bd      	mov	sp, r7
   173d8:	bd80      	pop	{r7, pc}
   173da:	bf00      	nop
   173dc:	00006481 	.word	0x00006481

000173e0 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   173e0:	b580      	push	{r7, lr}
   173e2:	b084      	sub	sp, #16
   173e4:	af00      	add	r7, sp, #0
   173e6:	6078      	str	r0, [r7, #4]
   173e8:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   173ea:	683a      	ldr	r2, [r7, #0]
   173ec:	f107 030c 	add.w	r3, r7, #12
   173f0:	3204      	adds	r2, #4
   173f2:	6810      	ldr	r0, [r2, #0]
   173f4:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   173f6:	f107 030c 	add.w	r3, r7, #12
   173fa:	4619      	mov	r1, r3
   173fc:	6878      	ldr	r0, [r7, #4]
   173fe:	4b0a      	ldr	r3, [pc, #40]	; (17428 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   17400:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   17402:	683a      	ldr	r2, [r7, #0]
   17404:	f107 0308 	add.w	r3, r7, #8
   17408:	8811      	ldrh	r1, [r2, #0]
   1740a:	7892      	ldrb	r2, [r2, #2]
   1740c:	8019      	strh	r1, [r3, #0]
   1740e:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   17410:	f107 0308 	add.w	r3, r7, #8
   17414:	4619      	mov	r1, r3
   17416:	6878      	ldr	r0, [r7, #4]
   17418:	4b04      	ldr	r3, [pc, #16]	; (1742c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   1741a:	4798      	blx	r3
   1741c:	4603      	mov	r3, r0
			
}
   1741e:	4618      	mov	r0, r3
   17420:	3710      	adds	r7, #16
   17422:	46bd      	mov	sp, r7
   17424:	bd80      	pop	{r7, pc}
   17426:	bf00      	nop
   17428:	000173b9 	.word	0x000173b9
   1742c:	00017391 	.word	0x00017391

00017430 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   17430:	b580      	push	{r7, lr}
   17432:	b086      	sub	sp, #24
   17434:	af00      	add	r7, sp, #0
   17436:	6078      	str	r0, [r7, #4]
   17438:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   1743a:	2300      	movs	r3, #0
   1743c:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   1743e:	2300      	movs	r3, #0
   17440:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   17442:	683b      	ldr	r3, [r7, #0]
   17444:	88db      	ldrh	r3, [r3, #6]
   17446:	b2da      	uxtb	r2, r3
   17448:	687b      	ldr	r3, [r7, #4]
   1744a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1744e:	699b      	ldr	r3, [r3, #24]
   17450:	b2db      	uxtb	r3, r3
   17452:	1ad3      	subs	r3, r2, r3
   17454:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   17456:	683b      	ldr	r3, [r7, #0]
   17458:	795b      	ldrb	r3, [r3, #5]
   1745a:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   1745c:	683b      	ldr	r3, [r7, #0]
   1745e:	791b      	ldrb	r3, [r3, #4]
   17460:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   17462:	683b      	ldr	r3, [r7, #0]
   17464:	789b      	ldrb	r3, [r3, #2]
   17466:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   17468:	683b      	ldr	r3, [r7, #0]
   1746a:	785b      	ldrb	r3, [r3, #1]
   1746c:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   1746e:	683b      	ldr	r3, [r7, #0]
   17470:	781b      	ldrb	r3, [r3, #0]
   17472:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   17474:	2300      	movs	r3, #0
   17476:	613b      	str	r3, [r7, #16]
   17478:	7bfa      	ldrb	r2, [r7, #15]
   1747a:	693b      	ldr	r3, [r7, #16]
   1747c:	429a      	cmp	r2, r3
   1747e:	d91e      	bls.n	174be <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   17480:	687b      	ldr	r3, [r7, #4]
   17482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   17486:	699b      	ldr	r3, [r3, #24]
   17488:	b29a      	uxth	r2, r3
   1748a:	693b      	ldr	r3, [r7, #16]
   1748c:	b29b      	uxth	r3, r3
   1748e:	4413      	add	r3, r2
   17490:	b29b      	uxth	r3, r3
   17492:	4619      	mov	r1, r3
   17494:	6878      	ldr	r0, [r7, #4]
   17496:	4b27      	ldr	r3, [pc, #156]	; (17534 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   17498:	4798      	blx	r3
   1749a:	4603      	mov	r3, r0
   1749c:	2b00      	cmp	r3, #0
   1749e:	d006      	beq.n	174ae <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   174a0:	697b      	ldr	r3, [r7, #20]
   174a2:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   174a6:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   174aa:	617b      	str	r3, [r7, #20]
   174ac:	e003      	b.n	174b6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   174ae:	697a      	ldr	r2, [r7, #20]
   174b0:	4b21      	ldr	r3, [pc, #132]	; (17538 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   174b2:	4413      	add	r3, r2
   174b4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   174b6:	693b      	ldr	r3, [r7, #16]
   174b8:	3301      	adds	r3, #1
   174ba:	613b      	str	r3, [r7, #16]
   174bc:	e7dc      	b.n	17478 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   174be:	2301      	movs	r3, #1
   174c0:	613b      	str	r3, [r7, #16]
   174c2:	7bba      	ldrb	r2, [r7, #14]
   174c4:	693b      	ldr	r3, [r7, #16]
   174c6:	429a      	cmp	r2, r3
   174c8:	d910      	bls.n	174ec <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   174ca:	683b      	ldr	r3, [r7, #0]
   174cc:	88db      	ldrh	r3, [r3, #6]
   174ce:	4619      	mov	r1, r3
   174d0:	693b      	ldr	r3, [r7, #16]
   174d2:	b2db      	uxtb	r3, r3
   174d4:	461a      	mov	r2, r3
   174d6:	6878      	ldr	r0, [r7, #4]
   174d8:	4b18      	ldr	r3, [pc, #96]	; (1753c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   174da:	4798      	blx	r3
   174dc:	4602      	mov	r2, r0
   174de:	697b      	ldr	r3, [r7, #20]
   174e0:	4413      	add	r3, r2
   174e2:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   174e4:	693b      	ldr	r3, [r7, #16]
   174e6:	3301      	adds	r3, #1
   174e8:	613b      	str	r3, [r7, #16]
   174ea:	e7ea      	b.n	174c2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   174ec:	7b7b      	ldrb	r3, [r7, #13]
   174ee:	3b01      	subs	r3, #1
   174f0:	4a13      	ldr	r2, [pc, #76]	; (17540 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   174f2:	fb02 f303 	mul.w	r3, r2, r3
   174f6:	461a      	mov	r2, r3
   174f8:	697b      	ldr	r3, [r7, #20]
   174fa:	4413      	add	r3, r2
   174fc:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   174fe:	7b3b      	ldrb	r3, [r7, #12]
   17500:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   17504:	fb02 f303 	mul.w	r3, r2, r3
   17508:	461a      	mov	r2, r3
   1750a:	697b      	ldr	r3, [r7, #20]
   1750c:	4413      	add	r3, r2
   1750e:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   17510:	7afa      	ldrb	r2, [r7, #11]
   17512:	4613      	mov	r3, r2
   17514:	011b      	lsls	r3, r3, #4
   17516:	1a9b      	subs	r3, r3, r2
   17518:	009b      	lsls	r3, r3, #2
   1751a:	461a      	mov	r2, r3
   1751c:	697b      	ldr	r3, [r7, #20]
   1751e:	4413      	add	r3, r2
   17520:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   17522:	7abb      	ldrb	r3, [r7, #10]
   17524:	697a      	ldr	r2, [r7, #20]
   17526:	4413      	add	r3, r2
   17528:	617b      	str	r3, [r7, #20]

	return tmp;
   1752a:	697b      	ldr	r3, [r7, #20]
}
   1752c:	4618      	mov	r0, r3
   1752e:	3718      	adds	r7, #24
   17530:	46bd      	mov	sp, r7
   17532:	bd80      	pop	{r7, pc}
   17534:	00017369 	.word	0x00017369
   17538:	01e13380 	.word	0x01e13380
   1753c:	00017545 	.word	0x00017545
   17540:	00015180 	.word	0x00015180

00017544 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   17544:	b580      	push	{r7, lr}
   17546:	b086      	sub	sp, #24
   17548:	af00      	add	r7, sp, #0
   1754a:	60f8      	str	r0, [r7, #12]
   1754c:	60b9      	str	r1, [r7, #8]
   1754e:	4613      	mov	r3, r2
   17550:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   17552:	2300      	movs	r3, #0
   17554:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   17556:	68bb      	ldr	r3, [r7, #8]
   17558:	b29b      	uxth	r3, r3
   1755a:	4619      	mov	r1, r3
   1755c:	68f8      	ldr	r0, [r7, #12]
   1755e:	4b2f      	ldr	r3, [pc, #188]	; (1761c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   17560:	4798      	blx	r3
   17562:	4603      	mov	r3, r0
   17564:	2b00      	cmp	r3, #0
   17566:	d028      	beq.n	175ba <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   17568:	79fb      	ldrb	r3, [r7, #7]
   1756a:	3b01      	subs	r3, #1
   1756c:	2b0b      	cmp	r3, #11
   1756e:	d84c      	bhi.n	1760a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   17570:	a201      	add	r2, pc, #4	; (adr r2, 17578 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   17572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17576:	bf00      	nop
   17578:	000175a9 	.word	0x000175a9
   1757c:	000175af 	.word	0x000175af
   17580:	000175a9 	.word	0x000175a9
   17584:	000175b5 	.word	0x000175b5
   17588:	000175a9 	.word	0x000175a9
   1758c:	000175b5 	.word	0x000175b5
   17590:	000175a9 	.word	0x000175a9
   17594:	000175a9 	.word	0x000175a9
   17598:	000175b5 	.word	0x000175b5
   1759c:	000175a9 	.word	0x000175a9
   175a0:	000175b5 	.word	0x000175b5
   175a4:	000175a9 	.word	0x000175a9
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   175a8:	4b1d      	ldr	r3, [pc, #116]	; (17620 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   175aa:	617b      	str	r3, [r7, #20]
			break;
   175ac:	e030      	b.n	17610 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   175ae:	4b1d      	ldr	r3, [pc, #116]	; (17624 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   175b0:	617b      	str	r3, [r7, #20]
			break;
   175b2:	e02d      	b.n	17610 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   175b4:	4b1c      	ldr	r3, [pc, #112]	; (17628 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   175b6:	617b      	str	r3, [r7, #20]
			break;
   175b8:	e02a      	b.n	17610 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   175ba:	79fb      	ldrb	r3, [r7, #7]
   175bc:	3b01      	subs	r3, #1
   175be:	2b0b      	cmp	r3, #11
   175c0:	d825      	bhi.n	1760e <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   175c2:	a201      	add	r2, pc, #4	; (adr r2, 175c8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   175c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   175c8:	000175f9 	.word	0x000175f9
   175cc:	000175ff 	.word	0x000175ff
   175d0:	000175f9 	.word	0x000175f9
   175d4:	00017605 	.word	0x00017605
   175d8:	000175f9 	.word	0x000175f9
   175dc:	00017605 	.word	0x00017605
   175e0:	000175f9 	.word	0x000175f9
   175e4:	000175f9 	.word	0x000175f9
   175e8:	00017605 	.word	0x00017605
   175ec:	000175f9 	.word	0x000175f9
   175f0:	00017605 	.word	0x00017605
   175f4:	000175f9 	.word	0x000175f9
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   175f8:	4b09      	ldr	r3, [pc, #36]	; (17620 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   175fa:	617b      	str	r3, [r7, #20]
			break;
   175fc:	e008      	b.n	17610 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   175fe:	4b0b      	ldr	r3, [pc, #44]	; (1762c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   17600:	617b      	str	r3, [r7, #20]
			break;
   17602:	e005      	b.n	17610 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   17604:	4b08      	ldr	r3, [pc, #32]	; (17628 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   17606:	617b      	str	r3, [r7, #20]
			break;
   17608:	e002      	b.n	17610 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   1760a:	bf00      	nop
   1760c:	e000      	b.n	17610 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   1760e:	bf00      	nop
		}
	}

	return sec_in_month;
   17610:	697b      	ldr	r3, [r7, #20]
}
   17612:	4618      	mov	r0, r3
   17614:	3718      	adds	r7, #24
   17616:	46bd      	mov	sp, r7
   17618:	bd80      	pop	{r7, pc}
   1761a:	bf00      	nop
   1761c:	00017369 	.word	0x00017369
   17620:	0028de80 	.word	0x0028de80
   17624:	00263b80 	.word	0x00263b80
   17628:	00278d00 	.word	0x00278d00
   1762c:	0024ea00 	.word	0x0024ea00

00017630 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   17630:	b580      	push	{r7, lr}
   17632:	b082      	sub	sp, #8
   17634:	af00      	add	r7, sp, #0
   17636:	6078      	str	r0, [r7, #4]
   17638:	6039      	str	r1, [r7, #0]
   1763a:	687b      	ldr	r3, [r7, #4]
   1763c:	2b01      	cmp	r3, #1
   1763e:	d10d      	bne.n	1765c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   17640:	683b      	ldr	r3, [r7, #0]
   17642:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17646:	4293      	cmp	r3, r2
   17648:	d108      	bne.n	1765c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1764a:	4906      	ldr	r1, [pc, #24]	; (17664 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1764c:	4806      	ldr	r0, [pc, #24]	; (17668 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1764e:	4b07      	ldr	r3, [pc, #28]	; (1766c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   17650:	4798      	blx	r3
   17652:	4a07      	ldr	r2, [pc, #28]	; (17670 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   17654:	4907      	ldr	r1, [pc, #28]	; (17674 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   17656:	4804      	ldr	r0, [pc, #16]	; (17668 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   17658:	4b07      	ldr	r3, [pc, #28]	; (17678 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1765a:	4798      	blx	r3
   1765c:	bf00      	nop
   1765e:	3708      	adds	r7, #8
   17660:	46bd      	mov	sp, r7
   17662:	bd80      	pop	{r7, pc}
   17664:	2000a8fc 	.word	0x2000a8fc
   17668:	2000a0e8 	.word	0x2000a0e8
   1766c:	00016f79 	.word	0x00016f79
   17670:	20000000 	.word	0x20000000
   17674:	00016fb5 	.word	0x00016fb5
   17678:	00019d41 	.word	0x00019d41

0001767c <_GLOBAL__sub_I_ptrCalendarClass>:
   1767c:	b580      	push	{r7, lr}
   1767e:	af00      	add	r7, sp, #0
   17680:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17684:	2001      	movs	r0, #1
   17686:	4b01      	ldr	r3, [pc, #4]	; (1768c <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   17688:	4798      	blx	r3
   1768a:	bd80      	pop	{r7, pc}
   1768c:	00017631 	.word	0x00017631

00017690 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   17690:	b480      	push	{r7}
   17692:	b083      	sub	sp, #12
   17694:	af00      	add	r7, sp, #0
   17696:	6078      	str	r0, [r7, #4]
   17698:	4a04      	ldr	r2, [pc, #16]	; (176ac <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   1769a:	687b      	ldr	r3, [r7, #4]
   1769c:	601a      	str	r2, [r3, #0]
{
} //~D
   1769e:	687b      	ldr	r3, [r7, #4]
   176a0:	4618      	mov	r0, r3
   176a2:	370c      	adds	r7, #12
   176a4:	46bd      	mov	sp, r7
   176a6:	bc80      	pop	{r7}
   176a8:	4770      	bx	lr
   176aa:	bf00      	nop
   176ac:	00022014 	.word	0x00022014

000176b0 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   176b0:	b480      	push	{r7}
   176b2:	b083      	sub	sp, #12
   176b4:	af00      	add	r7, sp, #0
   176b6:	6078      	str	r0, [r7, #4]
   176b8:	4a04      	ldr	r2, [pc, #16]	; (176cc <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   176ba:	687b      	ldr	r3, [r7, #4]
   176bc:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   176be:	687b      	ldr	r3, [r7, #4]
   176c0:	4618      	mov	r0, r3
   176c2:	370c      	adds	r7, #12
   176c4:	46bd      	mov	sp, r7
   176c6:	bc80      	pop	{r7}
   176c8:	4770      	bx	lr
   176ca:	bf00      	nop
   176cc:	00022014 	.word	0x00022014

000176d0 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
   176d0:	b590      	push	{r4, r7, lr}
   176d2:	b085      	sub	sp, #20
   176d4:	af00      	add	r7, sp, #0
   176d6:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
   176d8:	687b      	ldr	r3, [r7, #4]
   176da:	681b      	ldr	r3, [r3, #0]
   176dc:	681b      	ldr	r3, [r3, #0]
   176de:	687a      	ldr	r2, [r7, #4]
   176e0:	3226      	adds	r2, #38	; 0x26
   176e2:	4611      	mov	r1, r2
   176e4:	6878      	ldr	r0, [r7, #4]
   176e6:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
   176e8:	687b      	ldr	r3, [r7, #4]
   176ea:	681b      	ldr	r3, [r3, #0]
   176ec:	3304      	adds	r3, #4
   176ee:	681b      	ldr	r3, [r3, #0]
   176f0:	687a      	ldr	r2, [r7, #4]
   176f2:	3226      	adds	r2, #38	; 0x26
   176f4:	4611      	mov	r1, r2
   176f6:	6878      	ldr	r0, [r7, #4]
   176f8:	4798      	blx	r3
   176fa:	4602      	mov	r2, r0
   176fc:	687b      	ldr	r3, [r7, #4]
   176fe:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
   17700:	6878      	ldr	r0, [r7, #4]
   17702:	4b1a      	ldr	r3, [pc, #104]	; (1776c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x9c>)
   17704:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   17706:	687b      	ldr	r3, [r7, #4]
   17708:	681b      	ldr	r3, [r3, #0]
   1770a:	3304      	adds	r3, #4
   1770c:	681b      	ldr	r3, [r3, #0]
   1770e:	687a      	ldr	r2, [r7, #4]
   17710:	322e      	adds	r2, #46	; 0x2e
   17712:	4611      	mov	r1, r2
   17714:	6878      	ldr	r0, [r7, #4]
   17716:	4798      	blx	r3
   17718:	4602      	mov	r2, r0
   1771a:	687b      	ldr	r3, [r7, #4]
   1771c:	60da      	str	r2, [r3, #12]
	tick_t diferencia;
	if (lastTimestamp==calendar.nullTimestamp)
   1771e:	687b      	ldr	r3, [r7, #4]
   17720:	68da      	ldr	r2, [r3, #12]
   17722:	4b13      	ldr	r3, [pc, #76]	; (17770 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa0>)
   17724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   17726:	429a      	cmp	r2, r3
   17728:	d103      	bne.n	17732 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x62>
	{
		diferencia=UPDATE_TIME_MAX*2;
   1772a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1772e:	60fb      	str	r3, [r7, #12]
   17730:	e016      	b.n	17760 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>
	} 
	else
	{
		timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
   17732:	687b      	ldr	r3, [r7, #4]
   17734:	689b      	ldr	r3, [r3, #8]
   17736:	461a      	mov	r2, r3
   17738:	687b      	ldr	r3, [r7, #4]
   1773a:	68db      	ldr	r3, [r3, #12]
   1773c:	4619      	mov	r1, r3
   1773e:	4610      	mov	r0, r2
   17740:	4b0c      	ldr	r3, [pc, #48]	; (17774 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa4>)
   17742:	4798      	blx	r3
   17744:	4603      	mov	r3, r0
   17746:	460c      	mov	r4, r1
   17748:	687a      	ldr	r2, [r7, #4]
   1774a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		diferencia=(uint32_t)timeDifference;
   1774e:	687b      	ldr	r3, [r7, #4]
   17750:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
   17754:	4a08      	ldr	r2, [pc, #32]	; (17778 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa8>)
   17756:	4618      	mov	r0, r3
   17758:	4621      	mov	r1, r4
   1775a:	4790      	blx	r2
   1775c:	4603      	mov	r3, r0
   1775e:	60fb      	str	r3, [r7, #12]
	}

	return	diferencia;
   17760:	68fb      	ldr	r3, [r7, #12]
}
   17762:	4618      	mov	r0, r3
   17764:	3714      	adds	r7, #20
   17766:	46bd      	mov	sp, r7
   17768:	bd90      	pop	{r4, r7, pc}
   1776a:	bf00      	nop
   1776c:	00017965 	.word	0x00017965
   17770:	2000a0e8 	.word	0x2000a0e8
   17774:	0001c1d9 	.word	0x0001c1d9
   17778:	0001b885 	.word	0x0001b885

0001777c <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
   1777c:	b5b0      	push	{r4, r5, r7, lr}
   1777e:	b082      	sub	sp, #8
   17780:	af00      	add	r7, sp, #0
   17782:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
   17784:	4b07      	ldr	r3, [pc, #28]	; (177a4 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
   17786:	6878      	ldr	r0, [r7, #4]
   17788:	4798      	blx	r3
   1778a:	4602      	mov	r2, r0
   1778c:	460b      	mov	r3, r1
   1778e:	4614      	mov	r4, r2
   17790:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   17794:	4623      	mov	r3, r4
   17796:	462c      	mov	r4, r5
   17798:	4618      	mov	r0, r3
   1779a:	4621      	mov	r1, r4
   1779c:	3708      	adds	r7, #8
   1779e:	46bd      	mov	sp, r7
   177a0:	bdb0      	pop	{r4, r5, r7, pc}
   177a2:	bf00      	nop
   177a4:	0001b259 	.word	0x0001b259

000177a8 <_ZN17DateTimeLog_Class14WasInterruptedEv>:

bool	DateTimeLog_Class::WasInterrupted(void){
   177a8:	b5b0      	push	{r4, r5, r7, lr}
   177aa:	b082      	sub	sp, #8
   177ac:	af00      	add	r7, sp, #0
   177ae:	6078      	str	r0, [r7, #4]
	
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
   177b0:	6878      	ldr	r0, [r7, #4]
   177b2:	4b12      	ldr	r3, [pc, #72]	; (177fc <_ZN17DateTimeLog_Class14WasInterruptedEv+0x54>)
   177b4:	4798      	blx	r3
   177b6:	4603      	mov	r3, r0
   177b8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   177bc:	4618      	mov	r0, r3
   177be:	4b10      	ldr	r3, [pc, #64]	; (17800 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x58>)
   177c0:	4798      	blx	r3
   177c2:	2301      	movs	r3, #1
   177c4:	461d      	mov	r5, r3
   177c6:	4c0f      	ldr	r4, [pc, #60]	; (17804 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x5c>)
   177c8:	f04f 0200 	mov.w	r2, #0
   177cc:	4b0e      	ldr	r3, [pc, #56]	; (17808 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x60>)
   177ce:	47a0      	blx	r4
   177d0:	4603      	mov	r3, r0
   177d2:	2b00      	cmp	r3, #0
   177d4:	d101      	bne.n	177da <_ZN17DateTimeLog_Class14WasInterruptedEv+0x32>
   177d6:	2300      	movs	r3, #0
   177d8:	461d      	mov	r5, r3
   177da:	b2eb      	uxtb	r3, r5
   177dc:	2b00      	cmp	r3, #0
   177de:	d003      	beq.n	177e8 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x40>
	{
		powerInterrupt=true;
   177e0:	687b      	ldr	r3, [r7, #4]
   177e2:	2201      	movs	r2, #1
   177e4:	711a      	strb	r2, [r3, #4]
   177e6:	e002      	b.n	177ee <_ZN17DateTimeLog_Class14WasInterruptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
   177e8:	687b      	ldr	r3, [r7, #4]
   177ea:	2200      	movs	r2, #0
   177ec:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
   177ee:	687b      	ldr	r3, [r7, #4]
   177f0:	791b      	ldrb	r3, [r3, #4]
   177f2:	b2db      	uxtb	r3, r3
}
   177f4:	4618      	mov	r0, r3
   177f6:	3708      	adds	r7, #8
   177f8:	46bd      	mov	sp, r7
   177fa:	bdb0      	pop	{r4, r5, r7, pc}
   177fc:	000176d1 	.word	0x000176d1
   17800:	0001777d 	.word	0x0001777d
   17804:	0001b845 	.word	0x0001b845
   17808:	40490000 	.word	0x40490000

0001780c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
   1780c:	b590      	push	{r4, r7, lr}
   1780e:	b085      	sub	sp, #20
   17810:	af00      	add	r7, sp, #0
   17812:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
   17814:	687b      	ldr	r3, [r7, #4]
   17816:	f103 0122 	add.w	r1, r3, #34	; 0x22
   1781a:	687b      	ldr	r3, [r7, #4]
   1781c:	8c1a      	ldrh	r2, [r3, #32]
   1781e:	2301      	movs	r3, #1
   17820:	480c      	ldr	r0, [pc, #48]	; (17854 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   17822:	4c0d      	ldr	r4, [pc, #52]	; (17858 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
   17824:	47a0      	blx	r4
   17826:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
   17828:	6878      	ldr	r0, [r7, #4]
   1782a:	4b0c      	ldr	r3, [pc, #48]	; (1785c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
   1782c:	4798      	blx	r3
   1782e:	4603      	mov	r3, r0
   17830:	b29a      	uxth	r2, r3
   17832:	687b      	ldr	r3, [r7, #4]
   17834:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
   17836:	687b      	ldr	r3, [r7, #4]
   17838:	f103 0122 	add.w	r1, r3, #34	; 0x22
   1783c:	687b      	ldr	r3, [r7, #4]
   1783e:	8c1a      	ldrh	r2, [r3, #32]
   17840:	2301      	movs	r3, #1
   17842:	4804      	ldr	r0, [pc, #16]	; (17854 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   17844:	4c06      	ldr	r4, [pc, #24]	; (17860 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
   17846:	47a0      	blx	r4
   17848:	60f8      	str	r0, [r7, #12]
	return r;
   1784a:	68fb      	ldr	r3, [r7, #12]
}
   1784c:	4618      	mov	r0, r3
   1784e:	3714      	adds	r7, #20
   17850:	46bd      	mov	sp, r7
   17852:	bd90      	pop	{r4, r7, pc}
   17854:	20009e64 	.word	0x20009e64
   17858:	00016471 	.word	0x00016471
   1785c:	00017865 	.word	0x00017865
   17860:	000163b5 	.word	0x000163b5

00017864 <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
   17864:	b480      	push	{r7}
   17866:	b083      	sub	sp, #12
   17868:	af00      	add	r7, sp, #0
   1786a:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
   1786c:	687b      	ldr	r3, [r7, #4]
   1786e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   17870:	b2db      	uxtb	r3, r3
   17872:	3301      	adds	r3, #1
   17874:	b2db      	uxtb	r3, r3
   17876:	f003 030f 	and.w	r3, r3, #15
   1787a:	b2db      	uxtb	r3, r3
 }
   1787c:	4618      	mov	r0, r3
   1787e:	370c      	adds	r7, #12
   17880:	46bd      	mov	sp, r7
   17882:	bc80      	pop	{r7}
   17884:	4770      	bx	lr
	...

00017888 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
   17888:	b590      	push	{r4, r7, lr}
   1788a:	b085      	sub	sp, #20
   1788c:	af00      	add	r7, sp, #0
   1788e:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
   17890:	687b      	ldr	r3, [r7, #4]
   17892:	8c1a      	ldrh	r2, [r3, #32]
   17894:	f107 010f 	add.w	r1, r7, #15
   17898:	2301      	movs	r3, #1
   1789a:	4804      	ldr	r0, [pc, #16]	; (178ac <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
   1789c:	4c04      	ldr	r4, [pc, #16]	; (178b0 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
   1789e:	47a0      	blx	r4
	 return	s;
   178a0:	7bfb      	ldrb	r3, [r7, #15]
 }
   178a2:	4618      	mov	r0, r3
   178a4:	3714      	adds	r7, #20
   178a6:	46bd      	mov	sp, r7
   178a8:	bd90      	pop	{r4, r7, pc}
   178aa:	bf00      	nop
   178ac:	20009e64 	.word	0x20009e64
   178b0:	00016471 	.word	0x00016471

000178b4 <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
   178b4:	b480      	push	{r7}
   178b6:	b083      	sub	sp, #12
   178b8:	af00      	add	r7, sp, #0
   178ba:	6078      	str	r0, [r7, #4]
   178bc:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
   178be:	683b      	ldr	r3, [r7, #0]
   178c0:	b29a      	uxth	r2, r3
   178c2:	687b      	ldr	r3, [r7, #4]
   178c4:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
   178c6:	687b      	ldr	r3, [r7, #4]
   178c8:	8c1b      	ldrh	r3, [r3, #32]
 }
   178ca:	4618      	mov	r0, r3
   178cc:	370c      	adds	r7, #12
   178ce:	46bd      	mov	sp, r7
   178d0:	bc80      	pop	{r7}
   178d2:	4770      	bx	lr

000178d4 <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
   178d4:	b480      	push	{r7}
   178d6:	b083      	sub	sp, #12
   178d8:	af00      	add	r7, sp, #0
   178da:	6078      	str	r0, [r7, #4]
   178dc:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
   178de:	683b      	ldr	r3, [r7, #0]
   178e0:	b29a      	uxth	r2, r3
   178e2:	687b      	ldr	r3, [r7, #4]
   178e4:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
   178e6:	687b      	ldr	r3, [r7, #4]
   178e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
   178ea:	4618      	mov	r0, r3
   178ec:	370c      	adds	r7, #12
   178ee:	46bd      	mov	sp, r7
   178f0:	bc80      	pop	{r7}
   178f2:	4770      	bx	lr

000178f4 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
   178f4:	b590      	push	{r4, r7, lr}
   178f6:	b085      	sub	sp, #20
   178f8:	af00      	add	r7, sp, #0
   178fa:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   178fc:	6878      	ldr	r0, [r7, #4]
   178fe:	4b15      	ldr	r3, [pc, #84]	; (17954 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
   17900:	4798      	blx	r3
   17902:	4603      	mov	r3, r0
   17904:	b29a      	uxth	r2, r3
   17906:	687b      	ldr	r3, [r7, #4]
   17908:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
   1790a:	687b      	ldr	r3, [r7, #4]
   1790c:	681b      	ldr	r3, [r3, #0]
   1790e:	681b      	ldr	r3, [r3, #0]
   17910:	687a      	ldr	r2, [r7, #4]
   17912:	3226      	adds	r2, #38	; 0x26
   17914:	4611      	mov	r1, r2
   17916:	6878      	ldr	r0, [r7, #4]
   17918:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
   1791a:	687b      	ldr	r3, [r7, #4]
   1791c:	3326      	adds	r3, #38	; 0x26
   1791e:	461a      	mov	r2, r3
   17920:	687b      	ldr	r3, [r7, #4]
   17922:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   17924:	687b      	ldr	r3, [r7, #4]
   17926:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17928:	687b      	ldr	r3, [r7, #4]
   1792a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1792c:	b2da      	uxtb	r2, r3
   1792e:	687b      	ldr	r3, [r7, #4]
   17930:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   17932:	b2db      	uxtb	r3, r3
   17934:	4413      	add	r3, r2
   17936:	b2da      	uxtb	r2, r3
   17938:	2308      	movs	r3, #8
   1793a:	4807      	ldr	r0, [pc, #28]	; (17958 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
   1793c:	4c07      	ldr	r4, [pc, #28]	; (1795c <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
   1793e:	47a0      	blx	r4
   17940:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
   17942:	6878      	ldr	r0, [r7, #4]
   17944:	4b06      	ldr	r3, [pc, #24]	; (17960 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
   17946:	4798      	blx	r3
	return	w;
   17948:	68fb      	ldr	r3, [r7, #12]
}
   1794a:	4618      	mov	r0, r3
   1794c:	3714      	adds	r7, #20
   1794e:	46bd      	mov	sp, r7
   17950:	bd90      	pop	{r4, r7, pc}
   17952:	bf00      	nop
   17954:	00017889 	.word	0x00017889
   17958:	20009e64 	.word	0x20009e64
   1795c:	00016255 	.word	0x00016255
   17960:	0001780d 	.word	0x0001780d

00017964 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
   17964:	b590      	push	{r4, r7, lr}
   17966:	b085      	sub	sp, #20
   17968:	af00      	add	r7, sp, #0
   1796a:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   1796c:	6878      	ldr	r0, [r7, #4]
   1796e:	4b0f      	ldr	r3, [pc, #60]	; (179ac <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
   17970:	4798      	blx	r3
   17972:	4603      	mov	r3, r0
   17974:	b29a      	uxth	r2, r3
   17976:	687b      	ldr	r3, [r7, #4]
   17978:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
   1797a:	687b      	ldr	r3, [r7, #4]
   1797c:	332e      	adds	r3, #46	; 0x2e
   1797e:	461a      	mov	r2, r3
   17980:	687b      	ldr	r3, [r7, #4]
   17982:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   17984:	687b      	ldr	r3, [r7, #4]
   17986:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17988:	687b      	ldr	r3, [r7, #4]
   1798a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1798c:	b2da      	uxtb	r2, r3
   1798e:	687b      	ldr	r3, [r7, #4]
   17990:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   17992:	b2db      	uxtb	r3, r3
   17994:	4413      	add	r3, r2
   17996:	b2da      	uxtb	r2, r3
   17998:	2308      	movs	r3, #8
   1799a:	4805      	ldr	r0, [pc, #20]	; (179b0 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
   1799c:	4c05      	ldr	r4, [pc, #20]	; (179b4 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
   1799e:	47a0      	blx	r4
   179a0:	60f8      	str	r0, [r7, #12]
	return	r;
   179a2:	68fb      	ldr	r3, [r7, #12]
}
   179a4:	4618      	mov	r0, r3
   179a6:	3714      	adds	r7, #20
   179a8:	46bd      	mov	sp, r7
   179aa:	bd90      	pop	{r4, r7, pc}
   179ac:	00017889 	.word	0x00017889
   179b0:	20009e64 	.word	0x20009e64
   179b4:	000163e9 	.word	0x000163e9

000179b8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   179b8:	b480      	push	{r7}
   179ba:	b083      	sub	sp, #12
   179bc:	af00      	add	r7, sp, #0
   179be:	6078      	str	r0, [r7, #4]
   179c0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   179c2:	687b      	ldr	r3, [r7, #4]
   179c4:	683a      	ldr	r2, [r7, #0]
   179c6:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   179c8:	4a06      	ldr	r2, [pc, #24]	; (179e4 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
   179ca:	687b      	ldr	r3, [r7, #4]
   179cc:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   179ce:	687b      	ldr	r3, [r7, #4]
   179d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   179d4:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   179d6:	687b      	ldr	r3, [r7, #4]
   179d8:	4618      	mov	r0, r3
   179da:	370c      	adds	r7, #12
   179dc:	46bd      	mov	sp, r7
   179de:	bc80      	pop	{r7}
   179e0:	4770      	bx	lr
   179e2:	bf00      	nop
   179e4:	2000a190 	.word	0x2000a190

000179e8 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   179e8:	b480      	push	{r7}
   179ea:	b083      	sub	sp, #12
   179ec:	af00      	add	r7, sp, #0
   179ee:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   179f0:	687b      	ldr	r3, [r7, #4]
   179f2:	2200      	movs	r2, #0
   179f4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   179f6:	687b      	ldr	r3, [r7, #4]
   179f8:	4618      	mov	r0, r3
   179fa:	370c      	adds	r7, #12
   179fc:	46bd      	mov	sp, r7
   179fe:	bc80      	pop	{r7}
   17a00:	4770      	bx	lr
	...

00017a04 <_ZL9InitArrayv>:


static void InitArray(){
   17a04:	b480      	push	{r7}
   17a06:	b083      	sub	sp, #12
   17a08:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
   17a0a:	2301      	movs	r3, #1
   17a0c:	607b      	str	r3, [r7, #4]
   17a0e:	687b      	ldr	r3, [r7, #4]
   17a10:	2b0f      	cmp	r3, #15
   17a12:	dc26      	bgt.n	17a62 <_ZL9InitArrayv+0x5e>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   17a14:	4917      	ldr	r1, [pc, #92]	; (17a74 <_ZL9InitArrayv+0x70>)
   17a16:	687a      	ldr	r2, [r7, #4]
   17a18:	4613      	mov	r3, r2
   17a1a:	009b      	lsls	r3, r3, #2
   17a1c:	4413      	add	r3, r2
   17a1e:	009b      	lsls	r3, r3, #2
   17a20:	440b      	add	r3, r1
   17a22:	2200      	movs	r2, #0
   17a24:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   17a26:	4913      	ldr	r1, [pc, #76]	; (17a74 <_ZL9InitArrayv+0x70>)
   17a28:	687a      	ldr	r2, [r7, #4]
   17a2a:	4613      	mov	r3, r2
   17a2c:	009b      	lsls	r3, r3, #2
   17a2e:	4413      	add	r3, r2
   17a30:	009b      	lsls	r3, r3, #2
   17a32:	440b      	add	r3, r1
   17a34:	330c      	adds	r3, #12
   17a36:	2200      	movs	r2, #0
   17a38:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   17a3a:	687b      	ldr	r3, [r7, #4]
   17a3c:	1e5a      	subs	r2, r3, #1
   17a3e:	6879      	ldr	r1, [r7, #4]
   17a40:	460b      	mov	r3, r1
   17a42:	009b      	lsls	r3, r3, #2
   17a44:	440b      	add	r3, r1
   17a46:	009b      	lsls	r3, r3, #2
   17a48:	490a      	ldr	r1, [pc, #40]	; (17a74 <_ZL9InitArrayv+0x70>)
   17a4a:	4419      	add	r1, r3
   17a4c:	4809      	ldr	r0, [pc, #36]	; (17a74 <_ZL9InitArrayv+0x70>)
   17a4e:	4613      	mov	r3, r2
   17a50:	009b      	lsls	r3, r3, #2
   17a52:	4413      	add	r3, r2
   17a54:	009b      	lsls	r3, r3, #2
   17a56:	4403      	add	r3, r0
   17a58:	6019      	str	r1, [r3, #0]
	for (int i=1; i<TASK_NUMBER	; i++)
   17a5a:	687b      	ldr	r3, [r7, #4]
   17a5c:	3301      	adds	r3, #1
   17a5e:	607b      	str	r3, [r7, #4]
   17a60:	e7d5      	b.n	17a0e <_ZL9InitArrayv+0xa>
	}
	arrayInitiated=true;
   17a62:	4b05      	ldr	r3, [pc, #20]	; (17a78 <_ZL9InitArrayv+0x74>)
   17a64:	2201      	movs	r2, #1
   17a66:	701a      	strb	r2, [r3, #0]
		
}
   17a68:	bf00      	nop
   17a6a:	370c      	adds	r7, #12
   17a6c:	46bd      	mov	sp, r7
   17a6e:	bc80      	pop	{r7}
   17a70:	4770      	bx	lr
   17a72:	bf00      	nop
   17a74:	2000a194 	.word	0x2000a194
   17a78:	2000a2d4 	.word	0x2000a2d4

00017a7c <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   17a7c:	b580      	push	{r7, lr}
   17a7e:	b082      	sub	sp, #8
   17a80:	af00      	add	r7, sp, #0
   17a82:	6078      	str	r0, [r7, #4]
	ticks=0;
   17a84:	687b      	ldr	r3, [r7, #4]
   17a86:	2200      	movs	r2, #0
   17a88:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
   17a8a:	4b0d      	ldr	r3, [pc, #52]	; (17ac0 <_ZN11Timer_Class4InitEv+0x44>)
   17a8c:	781b      	ldrb	r3, [r3, #0]
   17a8e:	f083 0301 	eor.w	r3, r3, #1
   17a92:	b2db      	uxtb	r3, r3
   17a94:	2b00      	cmp	r3, #0
   17a96:	d001      	beq.n	17a9c <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
   17a98:	4b0a      	ldr	r3, [pc, #40]	; (17ac4 <_ZN11Timer_Class4InitEv+0x48>)
   17a9a:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=start()==ERR_NONE;
   17a9c:	6878      	ldr	r0, [r7, #4]
   17a9e:	4b0a      	ldr	r3, [pc, #40]	; (17ac8 <_ZN11Timer_Class4InitEv+0x4c>)
   17aa0:	4798      	blx	r3
   17aa2:	4603      	mov	r3, r0
   17aa4:	2b00      	cmp	r3, #0
   17aa6:	bf0c      	ite	eq
   17aa8:	2301      	moveq	r3, #1
   17aaa:	2300      	movne	r3, #0
   17aac:	b2da      	uxtb	r2, r3
   17aae:	687b      	ldr	r3, [r7, #4]
   17ab0:	709a      	strb	r2, [r3, #2]
	return isOK;
   17ab2:	687b      	ldr	r3, [r7, #4]
   17ab4:	789b      	ldrb	r3, [r3, #2]
   17ab6:	b2db      	uxtb	r3, r3
}
   17ab8:	4618      	mov	r0, r3
   17aba:	3708      	adds	r7, #8
   17abc:	46bd      	mov	sp, r7
   17abe:	bd80      	pop	{r7, pc}
   17ac0:	2000a2d4 	.word	0x2000a2d4
   17ac4:	00017a05 	.word	0x00017a05
   17ac8:	00017acd 	.word	0x00017acd

00017acc <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   17acc:	b580      	push	{r7, lr}
   17ace:	b084      	sub	sp, #16
   17ad0:	af00      	add	r7, sp, #0
   17ad2:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   17ad4:	687b      	ldr	r3, [r7, #4]
   17ad6:	68db      	ldr	r3, [r3, #12]
   17ad8:	4618      	mov	r0, r3
   17ada:	4b04      	ldr	r3, [pc, #16]	; (17aec <_ZN11Timer_Class5startEv+0x20>)
   17adc:	4798      	blx	r3
   17ade:	60f8      	str	r0, [r7, #12]
	return status;
   17ae0:	68fb      	ldr	r3, [r7, #12]
	
}
   17ae2:	4618      	mov	r0, r3
   17ae4:	3710      	adds	r7, #16
   17ae6:	46bd      	mov	sp, r7
   17ae8:	bd80      	pop	{r7, pc}
   17aea:	bf00      	nop
   17aec:	00007339 	.word	0x00007339

00017af0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   17af0:	b580      	push	{r7, lr}
   17af2:	b086      	sub	sp, #24
   17af4:	af00      	add	r7, sp, #0
   17af6:	60f8      	str	r0, [r7, #12]
   17af8:	60b9      	str	r1, [r7, #8]
   17afa:	607a      	str	r2, [r7, #4]
   17afc:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   17afe:	68f8      	ldr	r0, [r7, #12]
   17b00:	4b0d      	ldr	r3, [pc, #52]	; (17b38 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   17b02:	4798      	blx	r3
	task->interval = interval;
   17b04:	68fb      	ldr	r3, [r7, #12]
   17b06:	699b      	ldr	r3, [r3, #24]
   17b08:	687a      	ldr	r2, [r7, #4]
   17b0a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   17b0c:	68fb      	ldr	r3, [r7, #12]
   17b0e:	699b      	ldr	r3, [r3, #24]
   17b10:	68ba      	ldr	r2, [r7, #8]
   17b12:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   17b14:	68fb      	ldr	r3, [r7, #12]
   17b16:	699b      	ldr	r3, [r3, #24]
   17b18:	78fa      	ldrb	r2, [r7, #3]
   17b1a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   17b1c:	68fb      	ldr	r3, [r7, #12]
   17b1e:	68da      	ldr	r2, [r3, #12]
   17b20:	68fb      	ldr	r3, [r7, #12]
   17b22:	699b      	ldr	r3, [r3, #24]
   17b24:	4619      	mov	r1, r3
   17b26:	4610      	mov	r0, r2
   17b28:	4b04      	ldr	r3, [pc, #16]	; (17b3c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   17b2a:	4798      	blx	r3
   17b2c:	6178      	str	r0, [r7, #20]
	
	return status;
   17b2e:	697b      	ldr	r3, [r7, #20]
}
   17b30:	4618      	mov	r0, r3
   17b32:	3718      	adds	r7, #24
   17b34:	46bd      	mov	sp, r7
   17b36:	bd80      	pop	{r7, pc}
   17b38:	00017c75 	.word	0x00017c75
   17b3c:	0000740d 	.word	0x0000740d

00017b40 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   17b40:	b580      	push	{r7, lr}
   17b42:	b086      	sub	sp, #24
   17b44:	af00      	add	r7, sp, #0
   17b46:	60f8      	str	r0, [r7, #12]
   17b48:	60b9      	str	r1, [r7, #8]
   17b4a:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
   17b4c:	687a      	ldr	r2, [r7, #4]
   17b4e:	68b9      	ldr	r1, [r7, #8]
   17b50:	68f8      	ldr	r0, [r7, #12]
   17b52:	4b0c      	ldr	r3, [pc, #48]	; (17b84 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
   17b54:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
   17b56:	68fb      	ldr	r3, [r7, #12]
   17b58:	68db      	ldr	r3, [r3, #12]
   17b5a:	681b      	ldr	r3, [r3, #0]
   17b5c:	699b      	ldr	r3, [r3, #24]
   17b5e:	68fa      	ldr	r2, [r7, #12]
   17b60:	68d2      	ldr	r2, [r2, #12]
   17b62:	3204      	adds	r2, #4
   17b64:	4610      	mov	r0, r2
   17b66:	4798      	blx	r3
   17b68:	4603      	mov	r3, r0
   17b6a:	2b00      	cmp	r3, #0
   17b6c:	d105      	bne.n	17b7a <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
   17b6e:	68fb      	ldr	r3, [r7, #12]
   17b70:	68db      	ldr	r3, [r3, #12]
   17b72:	4618      	mov	r0, r3
   17b74:	4b04      	ldr	r3, [pc, #16]	; (17b88 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
   17b76:	4798      	blx	r3
   17b78:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
   17b7a:	697b      	ldr	r3, [r7, #20]
}
   17b7c:	4618      	mov	r0, r3
   17b7e:	3718      	adds	r7, #24
   17b80:	46bd      	mov	sp, r7
   17b82:	bd80      	pop	{r7, pc}
   17b84:	00017b8d 	.word	0x00017b8d
   17b88:	00007339 	.word	0x00007339

00017b8c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   17b8c:	b590      	push	{r4, r7, lr}
   17b8e:	b087      	sub	sp, #28
   17b90:	af00      	add	r7, sp, #0
   17b92:	60f8      	str	r0, [r7, #12]
   17b94:	60b9      	str	r1, [r7, #8]
   17b96:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   17b98:	2301      	movs	r3, #1
   17b9a:	687a      	ldr	r2, [r7, #4]
   17b9c:	68b9      	ldr	r1, [r7, #8]
   17b9e:	68f8      	ldr	r0, [r7, #12]
   17ba0:	4c03      	ldr	r4, [pc, #12]	; (17bb0 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   17ba2:	47a0      	blx	r4
   17ba4:	6178      	str	r0, [r7, #20]
		return status;
   17ba6:	697b      	ldr	r3, [r7, #20]
}
   17ba8:	4618      	mov	r0, r3
   17baa:	371c      	adds	r7, #28
   17bac:	46bd      	mov	sp, r7
   17bae:	bd90      	pop	{r4, r7, pc}
   17bb0:	00017af1 	.word	0x00017af1

00017bb4 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
   17bb4:	b580      	push	{r7, lr}
   17bb6:	b082      	sub	sp, #8
   17bb8:	af00      	add	r7, sp, #0
   17bba:	6078      	str	r0, [r7, #4]
   17bbc:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   17bbe:	6839      	ldr	r1, [r7, #0]
   17bc0:	6878      	ldr	r0, [r7, #4]
   17bc2:	4b0f      	ldr	r3, [pc, #60]	; (17c00 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   17bc4:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   17bc6:	687b      	ldr	r3, [r7, #4]
   17bc8:	68db      	ldr	r3, [r3, #12]
   17bca:	f103 0218 	add.w	r2, r3, #24
   17bce:	687b      	ldr	r3, [r7, #4]
   17bd0:	699b      	ldr	r3, [r3, #24]
   17bd2:	4619      	mov	r1, r3
   17bd4:	4610      	mov	r0, r2
   17bd6:	4b0b      	ldr	r3, [pc, #44]	; (17c04 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   17bd8:	4798      	blx	r3
   17bda:	4603      	mov	r3, r0
   17bdc:	2b00      	cmp	r3, #0
   17bde:	d007      	beq.n	17bf0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   17be0:	687b      	ldr	r3, [r7, #4]
   17be2:	68da      	ldr	r2, [r3, #12]
   17be4:	687b      	ldr	r3, [r7, #4]
   17be6:	699b      	ldr	r3, [r3, #24]
   17be8:	4619      	mov	r1, r3
   17bea:	4610      	mov	r0, r2
   17bec:	4b06      	ldr	r3, [pc, #24]	; (17c08 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   17bee:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   17bf0:	687b      	ldr	r3, [r7, #4]
   17bf2:	699b      	ldr	r3, [r3, #24]
   17bf4:	2200      	movs	r2, #0
   17bf6:	60da      	str	r2, [r3, #12]
}
   17bf8:	bf00      	nop
   17bfa:	3708      	adds	r7, #8
   17bfc:	46bd      	mov	sp, r7
   17bfe:	bd80      	pop	{r7, pc}
   17c00:	00017cd5 	.word	0x00017cd5
   17c04:	000080f9 	.word	0x000080f9
   17c08:	00007511 	.word	0x00007511

00017c0c <_ZN11Timer_Class9Get_ticksEv>:



uint32_t	Timer_Class::Get_ticks(void){
   17c0c:	b480      	push	{r7}
   17c0e:	b083      	sub	sp, #12
   17c10:	af00      	add	r7, sp, #0
   17c12:	6078      	str	r0, [r7, #4]
	
		return ticks;
   17c14:	687b      	ldr	r3, [r7, #4]
   17c16:	689b      	ldr	r3, [r3, #8]
}
   17c18:	4618      	mov	r0, r3
   17c1a:	370c      	adds	r7, #12
   17c1c:	46bd      	mov	sp, r7
   17c1e:	bc80      	pop	{r7}
   17c20:	4770      	bx	lr
	...

00017c24 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   17c24:	b590      	push	{r4, r7, lr}
   17c26:	b087      	sub	sp, #28
   17c28:	af00      	add	r7, sp, #0
   17c2a:	60f8      	str	r0, [r7, #12]
   17c2c:	60b9      	str	r1, [r7, #8]
   17c2e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   17c30:	2300      	movs	r3, #0
   17c32:	687a      	ldr	r2, [r7, #4]
   17c34:	68b9      	ldr	r1, [r7, #8]
   17c36:	68f8      	ldr	r0, [r7, #12]
   17c38:	4c0c      	ldr	r4, [pc, #48]	; (17c6c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   17c3a:	47a0      	blx	r4
   17c3c:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   17c3e:	68fb      	ldr	r3, [r7, #12]
   17c40:	68db      	ldr	r3, [r3, #12]
   17c42:	681b      	ldr	r3, [r3, #0]
   17c44:	699b      	ldr	r3, [r3, #24]
   17c46:	68fa      	ldr	r2, [r7, #12]
   17c48:	68d2      	ldr	r2, [r2, #12]
   17c4a:	3204      	adds	r2, #4
   17c4c:	4610      	mov	r0, r2
   17c4e:	4798      	blx	r3
   17c50:	4603      	mov	r3, r0
   17c52:	2b00      	cmp	r3, #0
   17c54:	d105      	bne.n	17c62 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   17c56:	68fb      	ldr	r3, [r7, #12]
   17c58:	68db      	ldr	r3, [r3, #12]
   17c5a:	4618      	mov	r0, r3
   17c5c:	4b04      	ldr	r3, [pc, #16]	; (17c70 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   17c5e:	4798      	blx	r3
   17c60:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   17c62:	697b      	ldr	r3, [r7, #20]
}
   17c64:	4618      	mov	r0, r3
   17c66:	371c      	adds	r7, #28
   17c68:	46bd      	mov	sp, r7
   17c6a:	bd90      	pop	{r4, r7, pc}
   17c6c:	00017af1 	.word	0x00017af1
   17c70:	00007339 	.word	0x00007339

00017c74 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   17c74:	b480      	push	{r7}
   17c76:	b085      	sub	sp, #20
   17c78:	af00      	add	r7, sp, #0
   17c7a:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17c7c:	2300      	movs	r3, #0
   17c7e:	73fb      	strb	r3, [r7, #15]
   17c80:	7bfb      	ldrb	r3, [r7, #15]
   17c82:	2b0f      	cmp	r3, #15
   17c84:	dc1c      	bgt.n	17cc0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
   17c86:	7bfb      	ldrb	r3, [r7, #15]
   17c88:	f003 030f 	and.w	r3, r3, #15
   17c8c:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   17c8e:	7bba      	ldrb	r2, [r7, #14]
   17c90:	490f      	ldr	r1, [pc, #60]	; (17cd0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   17c92:	4613      	mov	r3, r2
   17c94:	009b      	lsls	r3, r3, #2
   17c96:	4413      	add	r3, r2
   17c98:	009b      	lsls	r3, r3, #2
   17c9a:	440b      	add	r3, r1
   17c9c:	330c      	adds	r3, #12
   17c9e:	681b      	ldr	r3, [r3, #0]
   17ca0:	2b00      	cmp	r3, #0
   17ca2:	d109      	bne.n	17cb8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
   17ca4:	7bba      	ldrb	r2, [r7, #14]
   17ca6:	4613      	mov	r3, r2
   17ca8:	009b      	lsls	r3, r3, #2
   17caa:	4413      	add	r3, r2
   17cac:	009b      	lsls	r3, r3, #2
   17cae:	4a08      	ldr	r2, [pc, #32]	; (17cd0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   17cb0:	441a      	add	r2, r3
   17cb2:	687b      	ldr	r3, [r7, #4]
   17cb4:	619a      	str	r2, [r3, #24]
			return;
   17cb6:	e006      	b.n	17cc6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17cb8:	7bfb      	ldrb	r3, [r7, #15]
   17cba:	3301      	adds	r3, #1
   17cbc:	73fb      	strb	r3, [r7, #15]
   17cbe:	e7df      	b.n	17c80 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   17cc0:	687b      	ldr	r3, [r7, #4]
   17cc2:	4a03      	ldr	r2, [pc, #12]	; (17cd0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   17cc4:	619a      	str	r2, [r3, #24]

}
   17cc6:	3714      	adds	r7, #20
   17cc8:	46bd      	mov	sp, r7
   17cca:	bc80      	pop	{r7}
   17ccc:	4770      	bx	lr
   17cce:	bf00      	nop
   17cd0:	2000a194 	.word	0x2000a194

00017cd4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   17cd4:	b480      	push	{r7}
   17cd6:	b085      	sub	sp, #20
   17cd8:	af00      	add	r7, sp, #0
   17cda:	6078      	str	r0, [r7, #4]
   17cdc:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17cde:	2300      	movs	r3, #0
   17ce0:	73fb      	strb	r3, [r7, #15]
   17ce2:	7bfb      	ldrb	r3, [r7, #15]
   17ce4:	2b0f      	cmp	r3, #15
   17ce6:	dc19      	bgt.n	17d1c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   17ce8:	7bfa      	ldrb	r2, [r7, #15]
   17cea:	490f      	ldr	r1, [pc, #60]	; (17d28 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   17cec:	4613      	mov	r3, r2
   17cee:	009b      	lsls	r3, r3, #2
   17cf0:	4413      	add	r3, r2
   17cf2:	009b      	lsls	r3, r3, #2
   17cf4:	440b      	add	r3, r1
   17cf6:	330c      	adds	r3, #12
   17cf8:	681a      	ldr	r2, [r3, #0]
   17cfa:	683b      	ldr	r3, [r7, #0]
   17cfc:	429a      	cmp	r2, r3
   17cfe:	d109      	bne.n	17d14 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   17d00:	7bfa      	ldrb	r2, [r7, #15]
   17d02:	4613      	mov	r3, r2
   17d04:	009b      	lsls	r3, r3, #2
   17d06:	4413      	add	r3, r2
   17d08:	009b      	lsls	r3, r3, #2
   17d0a:	4a07      	ldr	r2, [pc, #28]	; (17d28 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   17d0c:	441a      	add	r2, r3
   17d0e:	687b      	ldr	r3, [r7, #4]
   17d10:	619a      	str	r2, [r3, #24]
			return;
   17d12:	e004      	b.n	17d1e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17d14:	7bfb      	ldrb	r3, [r7, #15]
   17d16:	3301      	adds	r3, #1
   17d18:	73fb      	strb	r3, [r7, #15]
   17d1a:	e7e2      	b.n	17ce2 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   17d1c:	bf00      	nop
}
   17d1e:	3714      	adds	r7, #20
   17d20:	46bd      	mov	sp, r7
   17d22:	bc80      	pop	{r7}
   17d24:	4770      	bx	lr
   17d26:	bf00      	nop
   17d28:	2000a194 	.word	0x2000a194

00017d2c <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
   17d2c:	b580      	push	{r7, lr}
   17d2e:	b082      	sub	sp, #8
   17d30:	af00      	add	r7, sp, #0
   17d32:	6078      	str	r0, [r7, #4]
   17d34:	6039      	str	r1, [r7, #0]
   17d36:	687b      	ldr	r3, [r7, #4]
   17d38:	2b01      	cmp	r3, #1
   17d3a:	d131      	bne.n	17da0 <_Z41__static_initialization_and_destruction_0ii+0x74>
   17d3c:	683b      	ldr	r3, [r7, #0]
   17d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17d42:	4293      	cmp	r3, r2
   17d44:	d12c      	bne.n	17da0 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   17d46:	4918      	ldr	r1, [pc, #96]	; (17da8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   17d48:	4818      	ldr	r0, [pc, #96]	; (17dac <_Z41__static_initialization_and_destruction_0ii+0x80>)
   17d4a:	4b19      	ldr	r3, [pc, #100]	; (17db0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17d4c:	4798      	blx	r3
   17d4e:	4a19      	ldr	r2, [pc, #100]	; (17db4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17d50:	4919      	ldr	r1, [pc, #100]	; (17db8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17d52:	4816      	ldr	r0, [pc, #88]	; (17dac <_Z41__static_initialization_and_destruction_0ii+0x80>)
   17d54:	4b19      	ldr	r3, [pc, #100]	; (17dbc <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17d56:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
   17d58:	4919      	ldr	r1, [pc, #100]	; (17dc0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
   17d5a:	481a      	ldr	r0, [pc, #104]	; (17dc4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   17d5c:	4b14      	ldr	r3, [pc, #80]	; (17db0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17d5e:	4798      	blx	r3
   17d60:	4a14      	ldr	r2, [pc, #80]	; (17db4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17d62:	4915      	ldr	r1, [pc, #84]	; (17db8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17d64:	4817      	ldr	r0, [pc, #92]	; (17dc4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   17d66:	4b15      	ldr	r3, [pc, #84]	; (17dbc <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17d68:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   17d6a:	4917      	ldr	r1, [pc, #92]	; (17dc8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
   17d6c:	4817      	ldr	r0, [pc, #92]	; (17dcc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   17d6e:	4b10      	ldr	r3, [pc, #64]	; (17db0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17d70:	4798      	blx	r3
   17d72:	4a10      	ldr	r2, [pc, #64]	; (17db4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17d74:	4910      	ldr	r1, [pc, #64]	; (17db8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17d76:	4815      	ldr	r0, [pc, #84]	; (17dcc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   17d78:	4b10      	ldr	r3, [pc, #64]	; (17dbc <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17d7a:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
   17d7c:	4914      	ldr	r1, [pc, #80]	; (17dd0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   17d7e:	4815      	ldr	r0, [pc, #84]	; (17dd4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   17d80:	4b0b      	ldr	r3, [pc, #44]	; (17db0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17d82:	4798      	blx	r3
   17d84:	4a0b      	ldr	r2, [pc, #44]	; (17db4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17d86:	490c      	ldr	r1, [pc, #48]	; (17db8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17d88:	4812      	ldr	r0, [pc, #72]	; (17dd4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   17d8a:	4b0c      	ldr	r3, [pc, #48]	; (17dbc <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17d8c:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
   17d8e:	4912      	ldr	r1, [pc, #72]	; (17dd8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   17d90:	4812      	ldr	r0, [pc, #72]	; (17ddc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   17d92:	4b07      	ldr	r3, [pc, #28]	; (17db0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17d94:	4798      	blx	r3
   17d96:	4a07      	ldr	r2, [pc, #28]	; (17db4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17d98:	4907      	ldr	r1, [pc, #28]	; (17db8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17d9a:	4810      	ldr	r0, [pc, #64]	; (17ddc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   17d9c:	4b07      	ldr	r3, [pc, #28]	; (17dbc <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17d9e:	4798      	blx	r3
   17da0:	bf00      	nop
   17da2:	3708      	adds	r7, #8
   17da4:	46bd      	mov	sp, r7
   17da6:	bd80      	pop	{r7, pc}
   17da8:	2000a70c 	.word	0x2000a70c
   17dac:	2000a2d8 	.word	0x2000a2d8
   17db0:	000179b9 	.word	0x000179b9
   17db4:	20000000 	.word	0x20000000
   17db8:	000179e9 	.word	0x000179e9
   17dbc:	00019d41 	.word	0x00019d41
   17dc0:	2000a798 	.word	0x2000a798
   17dc4:	2000a2f4 	.word	0x2000a2f4
   17dc8:	2000a89c 	.word	0x2000a89c
   17dcc:	2000a310 	.word	0x2000a310
   17dd0:	2000a7b8 	.word	0x2000a7b8
   17dd4:	2000a32c 	.word	0x2000a32c
   17dd8:	2000a81c 	.word	0x2000a81c
   17ddc:	2000a348 	.word	0x2000a348

00017de0 <_GLOBAL__sub_I_ptrTimerClass>:
   17de0:	b580      	push	{r7, lr}
   17de2:	af00      	add	r7, sp, #0
   17de4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17de8:	2001      	movs	r0, #1
   17dea:	4b01      	ldr	r3, [pc, #4]	; (17df0 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   17dec:	4798      	blx	r3
   17dee:	bd80      	pop	{r7, pc}
   17df0:	00017d2d 	.word	0x00017d2d

00017df4 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   17df4:	b480      	push	{r7}
   17df6:	b083      	sub	sp, #12
   17df8:	af00      	add	r7, sp, #0
   17dfa:	6078      	str	r0, [r7, #4]
   17dfc:	4a05      	ldr	r2, [pc, #20]	; (17e14 <_ZN5PrintC1Ev+0x20>)
   17dfe:	687b      	ldr	r3, [r7, #4]
   17e00:	601a      	str	r2, [r3, #0]
   17e02:	687b      	ldr	r3, [r7, #4]
   17e04:	2200      	movs	r2, #0
   17e06:	605a      	str	r2, [r3, #4]
   17e08:	687b      	ldr	r3, [r7, #4]
   17e0a:	4618      	mov	r0, r3
   17e0c:	370c      	adds	r7, #12
   17e0e:	46bd      	mov	sp, r7
   17e10:	bc80      	pop	{r7}
   17e12:	4770      	bx	lr
   17e14:	00022090 	.word	0x00022090

00017e18 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   17e18:	b480      	push	{r7}
   17e1a:	b083      	sub	sp, #12
   17e1c:	af00      	add	r7, sp, #0
   17e1e:	6078      	str	r0, [r7, #4]
   17e20:	2300      	movs	r3, #0
   17e22:	4618      	mov	r0, r3
   17e24:	370c      	adds	r7, #12
   17e26:	46bd      	mov	sp, r7
   17e28:	bc80      	pop	{r7}
   17e2a:	4770      	bx	lr

00017e2c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   17e2c:	b480      	push	{r7}
   17e2e:	b083      	sub	sp, #12
   17e30:	af00      	add	r7, sp, #0
   17e32:	6078      	str	r0, [r7, #4]
   17e34:	bf00      	nop
   17e36:	370c      	adds	r7, #12
   17e38:	46bd      	mov	sp, r7
   17e3a:	bc80      	pop	{r7}
   17e3c:	4770      	bx	lr
	...

00017e40 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   17e40:	b580      	push	{r7, lr}
   17e42:	b082      	sub	sp, #8
   17e44:	af00      	add	r7, sp, #0
   17e46:	6078      	str	r0, [r7, #4]
   17e48:	687b      	ldr	r3, [r7, #4]
   17e4a:	4618      	mov	r0, r3
   17e4c:	4b06      	ldr	r3, [pc, #24]	; (17e68 <_ZN6StreamC1Ev+0x28>)
   17e4e:	4798      	blx	r3
   17e50:	4a06      	ldr	r2, [pc, #24]	; (17e6c <_ZN6StreamC1Ev+0x2c>)
   17e52:	687b      	ldr	r3, [r7, #4]
   17e54:	601a      	str	r2, [r3, #0]
   17e56:	687b      	ldr	r3, [r7, #4]
   17e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17e5c:	609a      	str	r2, [r3, #8]
   17e5e:	687b      	ldr	r3, [r7, #4]
   17e60:	4618      	mov	r0, r3
   17e62:	3708      	adds	r7, #8
   17e64:	46bd      	mov	sp, r7
   17e66:	bd80      	pop	{r7, pc}
   17e68:	00017df5 	.word	0x00017df5
   17e6c:	00022054 	.word	0x00022054

00017e70 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   17e70:	b480      	push	{r7}
   17e72:	b083      	sub	sp, #12
   17e74:	af00      	add	r7, sp, #0
   17e76:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   17e78:	4b06      	ldr	r3, [pc, #24]	; (17e94 <_ZL10USBTimeoutPK10timer_task+0x24>)
   17e7a:	681b      	ldr	r3, [r3, #0]
   17e7c:	2201      	movs	r2, #1
   17e7e:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   17e80:	4b04      	ldr	r3, [pc, #16]	; (17e94 <_ZL10USBTimeoutPK10timer_task+0x24>)
   17e82:	681b      	ldr	r3, [r3, #0]
   17e84:	2200      	movs	r2, #0
   17e86:	741a      	strb	r2, [r3, #16]
	
}
   17e88:	bf00      	nop
   17e8a:	370c      	adds	r7, #12
   17e8c:	46bd      	mov	sp, r7
   17e8e:	bc80      	pop	{r7}
   17e90:	4770      	bx	lr
   17e92:	bf00      	nop
   17e94:	2000a364 	.word	0x2000a364

00017e98 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   17e98:	b480      	push	{r7}
   17e9a:	b083      	sub	sp, #12
   17e9c:	af00      	add	r7, sp, #0
   17e9e:	4603      	mov	r3, r0
   17ea0:	603a      	str	r2, [r7, #0]
   17ea2:	71fb      	strb	r3, [r7, #7]
   17ea4:	460b      	mov	r3, r1
   17ea6:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   17ea8:	4b08      	ldr	r3, [pc, #32]	; (17ecc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   17eaa:	681b      	ldr	r3, [r3, #0]
   17eac:	2201      	movs	r2, #1
   17eae:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   17eb0:	4b06      	ldr	r3, [pc, #24]	; (17ecc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   17eb2:	681b      	ldr	r3, [r3, #0]
   17eb4:	2201      	movs	r2, #1
   17eb6:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   17eb8:	4b04      	ldr	r3, [pc, #16]	; (17ecc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   17eba:	681b      	ldr	r3, [r3, #0]
   17ebc:	2201      	movs	r2, #1
   17ebe:	741a      	strb	r2, [r3, #16]


	return false;
   17ec0:	2300      	movs	r3, #0
}
   17ec2:	4618      	mov	r0, r3
   17ec4:	370c      	adds	r7, #12
   17ec6:	46bd      	mov	sp, r7
   17ec8:	bc80      	pop	{r7}
   17eca:	4770      	bx	lr
   17ecc:	2000a364 	.word	0x2000a364

00017ed0 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   17ed0:	b480      	push	{r7}
   17ed2:	b083      	sub	sp, #12
   17ed4:	af00      	add	r7, sp, #0
   17ed6:	4603      	mov	r3, r0
   17ed8:	603a      	str	r2, [r7, #0]
   17eda:	71fb      	strb	r3, [r7, #7]
   17edc:	460b      	mov	r3, r1
   17ede:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   17ee0:	4b08      	ldr	r3, [pc, #32]	; (17f04 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   17ee2:	681b      	ldr	r3, [r3, #0]
   17ee4:	2201      	movs	r2, #1
   17ee6:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   17ee8:	4b06      	ldr	r3, [pc, #24]	; (17f04 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   17eea:	681b      	ldr	r3, [r3, #0]
   17eec:	2201      	movs	r2, #1
   17eee:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   17ef0:	4b04      	ldr	r3, [pc, #16]	; (17f04 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   17ef2:	681b      	ldr	r3, [r3, #0]
   17ef4:	2201      	movs	r2, #1
   17ef6:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   17ef8:	2300      	movs	r3, #0
}
   17efa:	4618      	mov	r0, r3
   17efc:	370c      	adds	r7, #12
   17efe:	46bd      	mov	sp, r7
   17f00:	bc80      	pop	{r7}
   17f02:	4770      	bx	lr
   17f04:	2000a364 	.word	0x2000a364

00017f08 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   17f08:	b580      	push	{r7, lr}
   17f0a:	b082      	sub	sp, #8
   17f0c:	af00      	add	r7, sp, #0
   17f0e:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   17f10:	793b      	ldrb	r3, [r7, #4]
   17f12:	f003 0301 	and.w	r3, r3, #1
   17f16:	b2db      	uxtb	r3, r3
   17f18:	2b00      	cmp	r3, #0
   17f1a:	d013      	beq.n	17f44 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   17f1c:	490c      	ldr	r1, [pc, #48]	; (17f50 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   17f1e:	2000      	movs	r0, #0
   17f20:	4b0c      	ldr	r3, [pc, #48]	; (17f54 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   17f22:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   17f24:	490c      	ldr	r1, [pc, #48]	; (17f58 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   17f26:	2001      	movs	r0, #1
   17f28:	4b0a      	ldr	r3, [pc, #40]	; (17f54 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   17f2a:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   17f2c:	4b0b      	ldr	r3, [pc, #44]	; (17f5c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   17f2e:	681b      	ldr	r3, [r3, #0]
   17f30:	2201      	movs	r2, #1
   17f32:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   17f34:	4b09      	ldr	r3, [pc, #36]	; (17f5c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   17f36:	681b      	ldr	r3, [r3, #0]
   17f38:	2201      	movs	r2, #1
   17f3a:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   17f3c:	4b07      	ldr	r3, [pc, #28]	; (17f5c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   17f3e:	681b      	ldr	r3, [r3, #0]
   17f40:	2201      	movs	r2, #1
   17f42:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   17f44:	2300      	movs	r3, #0
}
   17f46:	4618      	mov	r0, r3
   17f48:	3708      	adds	r7, #8
   17f4a:	46bd      	mov	sp, r7
   17f4c:	bd80      	pop	{r7, pc}
   17f4e:	bf00      	nop
   17f50:	00017e99 	.word	0x00017e99
   17f54:	00011b11 	.word	0x00011b11
   17f58:	00017ed1 	.word	0x00017ed1
   17f5c:	2000a364 	.word	0x2000a364

00017f60 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   17f60:	b580      	push	{r7, lr}
   17f62:	b082      	sub	sp, #8
   17f64:	af00      	add	r7, sp, #0
   17f66:	6078      	str	r0, [r7, #4]
   17f68:	687b      	ldr	r3, [r7, #4]
   17f6a:	4618      	mov	r0, r3
   17f6c:	4b0a      	ldr	r3, [pc, #40]	; (17f98 <_ZN9CDC_ClassC1Ev+0x38>)
   17f6e:	4798      	blx	r3
   17f70:	687b      	ldr	r3, [r7, #4]
   17f72:	3310      	adds	r3, #16
   17f74:	4618      	mov	r0, r3
   17f76:	4b09      	ldr	r3, [pc, #36]	; (17f9c <_ZN9CDC_ClassC1Ev+0x3c>)
   17f78:	4798      	blx	r3
   17f7a:	4a09      	ldr	r2, [pc, #36]	; (17fa0 <_ZN9CDC_ClassC1Ev+0x40>)
   17f7c:	687b      	ldr	r3, [r7, #4]
   17f7e:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   17f80:	687b      	ldr	r3, [r7, #4]
   17f82:	f04f 32ff 	mov.w	r2, #4294967295
   17f86:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   17f88:	4a06      	ldr	r2, [pc, #24]	; (17fa4 <_ZN9CDC_ClassC1Ev+0x44>)
   17f8a:	687b      	ldr	r3, [r7, #4]
   17f8c:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   17f8e:	687b      	ldr	r3, [r7, #4]
   17f90:	4618      	mov	r0, r3
   17f92:	3708      	adds	r7, #8
   17f94:	46bd      	mov	sp, r7
   17f96:	bd80      	pop	{r7, pc}
   17f98:	00017e41 	.word	0x00017e41
   17f9c:	00018811 	.word	0x00018811
   17fa0:	00022024 	.word	0x00022024
   17fa4:	2000a364 	.word	0x2000a364

00017fa8 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   17fa8:	b580      	push	{r7, lr}
   17faa:	b082      	sub	sp, #8
   17fac:	af00      	add	r7, sp, #0
   17fae:	6078      	str	r0, [r7, #4]
   17fb0:	4a06      	ldr	r2, [pc, #24]	; (17fcc <_ZN9CDC_ClassD1Ev+0x24>)
   17fb2:	687b      	ldr	r3, [r7, #4]
   17fb4:	601a      	str	r2, [r3, #0]
   17fb6:	687b      	ldr	r3, [r7, #4]
   17fb8:	3310      	adds	r3, #16
   17fba:	4618      	mov	r0, r3
   17fbc:	4b04      	ldr	r3, [pc, #16]	; (17fd0 <_ZN9CDC_ClassD1Ev+0x28>)
   17fbe:	4798      	blx	r3
{
} //~CDC_Class
   17fc0:	687b      	ldr	r3, [r7, #4]
   17fc2:	4618      	mov	r0, r3
   17fc4:	3708      	adds	r7, #8
   17fc6:	46bd      	mov	sp, r7
   17fc8:	bd80      	pop	{r7, pc}
   17fca:	bf00      	nop
   17fcc:	00022024 	.word	0x00022024
   17fd0:	00018831 	.word	0x00018831

00017fd4 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   17fd4:	b580      	push	{r7, lr}
   17fd6:	b082      	sub	sp, #8
   17fd8:	af00      	add	r7, sp, #0
   17fda:	6078      	str	r0, [r7, #4]
	
	OnInit();
   17fdc:	687b      	ldr	r3, [r7, #4]
   17fde:	3310      	adds	r3, #16
   17fe0:	4618      	mov	r0, r3
   17fe2:	4b09      	ldr	r3, [pc, #36]	; (18008 <_ZN9CDC_Class4InitEv+0x34>)
   17fe4:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   17fe6:	4909      	ldr	r1, [pc, #36]	; (1800c <_ZN9CDC_Class4InitEv+0x38>)
   17fe8:	2003      	movs	r0, #3
   17fea:	4b09      	ldr	r3, [pc, #36]	; (18010 <_ZN9CDC_Class4InitEv+0x3c>)
   17fec:	4798      	blx	r3
	delay_ms(100);
   17fee:	2064      	movs	r0, #100	; 0x64
   17ff0:	4b08      	ldr	r3, [pc, #32]	; (18014 <_ZN9CDC_Class4InitEv+0x40>)
   17ff2:	4798      	blx	r3
		
	if (connected)
   17ff4:	687b      	ldr	r3, [r7, #4]
   17ff6:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
   17ff8:	2064      	movs	r0, #100	; 0x64
   17ffa:	4b06      	ldr	r3, [pc, #24]	; (18014 <_ZN9CDC_Class4InitEv+0x40>)
   17ffc:	4798      	blx	r3

	

}
   17ffe:	bf00      	nop
   18000:	3708      	adds	r7, #8
   18002:	46bd      	mov	sp, r7
   18004:	bd80      	pop	{r7, pc}
   18006:	bf00      	nop
   18008:	00018845 	.word	0x00018845
   1800c:	00017f09 	.word	0x00017f09
   18010:	00011b11 	.word	0x00011b11
   18014:	00006761 	.word	0x00006761

00018018 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   18018:	b580      	push	{r7, lr}
   1801a:	b082      	sub	sp, #8
   1801c:	af00      	add	r7, sp, #0
   1801e:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   18020:	4b03      	ldr	r3, [pc, #12]	; (18030 <_ZN9CDC_Class9IsEnabledEv+0x18>)
   18022:	4798      	blx	r3
   18024:	4603      	mov	r3, r0
	
}
   18026:	4618      	mov	r0, r3
   18028:	3708      	adds	r7, #8
   1802a:	46bd      	mov	sp, r7
   1802c:	bd80      	pop	{r7, pc}
   1802e:	bf00      	nop
   18030:	00011b89 	.word	0x00011b89

00018034 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   18034:	b580      	push	{r7, lr}
   18036:	b084      	sub	sp, #16
   18038:	af00      	add	r7, sp, #0
   1803a:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   1803c:	687b      	ldr	r3, [r7, #4]
   1803e:	699b      	ldr	r3, [r3, #24]
   18040:	f1b3 3fff 	cmp.w	r3, #4294967295
   18044:	bf14      	ite	ne
   18046:	2301      	movne	r3, #1
   18048:	2300      	moveq	r3, #0
   1804a:	b2db      	uxtb	r3, r3
   1804c:	2b00      	cmp	r3, #0
   1804e:	d002      	beq.n	18056 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   18050:	687b      	ldr	r3, [r7, #4]
   18052:	699b      	ldr	r3, [r3, #24]
   18054:	e011      	b.n	1807a <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   18056:	687b      	ldr	r3, [r7, #4]
   18058:	681b      	ldr	r3, [r3, #0]
   1805a:	331c      	adds	r3, #28
   1805c:	681b      	ldr	r3, [r3, #0]
   1805e:	f107 010f 	add.w	r1, r7, #15
   18062:	2201      	movs	r2, #1
   18064:	6878      	ldr	r0, [r7, #4]
   18066:	4798      	blx	r3
   18068:	4602      	mov	r2, r0
   1806a:	687b      	ldr	r3, [r7, #4]
   1806c:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   1806e:	7bfb      	ldrb	r3, [r7, #15]
   18070:	461a      	mov	r2, r3
   18072:	687b      	ldr	r3, [r7, #4]
   18074:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   18076:	687b      	ldr	r3, [r7, #4]
   18078:	699b      	ldr	r3, [r3, #24]
}
   1807a:	4618      	mov	r0, r3
   1807c:	3710      	adds	r7, #16
   1807e:	46bd      	mov	sp, r7
   18080:	bd80      	pop	{r7, pc}
	...

00018084 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   18084:	b580      	push	{r7, lr}
   18086:	b086      	sub	sp, #24
   18088:	af00      	add	r7, sp, #0
   1808a:	60f8      	str	r0, [r7, #12]
   1808c:	60b9      	str	r1, [r7, #8]
   1808e:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   18090:	68fb      	ldr	r3, [r7, #12]
   18092:	7c1b      	ldrb	r3, [r3, #16]
   18094:	b2db      	uxtb	r3, r3
   18096:	2b00      	cmp	r3, #0
   18098:	d02e      	beq.n	180f8 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   1809a:	687a      	ldr	r2, [r7, #4]
   1809c:	4613      	mov	r3, r2
   1809e:	009b      	lsls	r3, r3, #2
   180a0:	4413      	add	r3, r2
   180a2:	005b      	lsls	r3, r3, #1
   180a4:	461a      	mov	r2, r3
   180a6:	4918      	ldr	r1, [pc, #96]	; (18108 <_ZN9CDC_Class8readDataEPvl+0x84>)
   180a8:	4818      	ldr	r0, [pc, #96]	; (1810c <_ZN9CDC_Class8readDataEPvl+0x88>)
   180aa:	4b19      	ldr	r3, [pc, #100]	; (18110 <_ZN9CDC_Class8readDataEPvl+0x8c>)
   180ac:	4798      	blx	r3
		rxReady=false;
   180ae:	68fb      	ldr	r3, [r7, #12]
   180b0:	2200      	movs	r2, #0
   180b2:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   180b4:	687b      	ldr	r3, [r7, #4]
   180b6:	4619      	mov	r1, r3
   180b8:	68b8      	ldr	r0, [r7, #8]
   180ba:	4b16      	ldr	r3, [pc, #88]	; (18114 <_ZN9CDC_Class8readDataEPvl+0x90>)
   180bc:	4798      	blx	r3
   180be:	4603      	mov	r3, r0
   180c0:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   180c2:	68fb      	ldr	r3, [r7, #12]
   180c4:	7d5b      	ldrb	r3, [r3, #21]
   180c6:	b2db      	uxtb	r3, r3
   180c8:	f083 0301 	eor.w	r3, r3, #1
   180cc:	b2db      	uxtb	r3, r3
   180ce:	2b00      	cmp	r3, #0
   180d0:	d006      	beq.n	180e0 <_ZN9CDC_Class8readDataEPvl+0x5c>
   180d2:	68fb      	ldr	r3, [r7, #12]
   180d4:	7c1b      	ldrb	r3, [r3, #16]
   180d6:	b2db      	uxtb	r3, r3
   180d8:	2b00      	cmp	r3, #0
   180da:	d001      	beq.n	180e0 <_ZN9CDC_Class8readDataEPvl+0x5c>
   180dc:	2301      	movs	r3, #1
   180de:	e000      	b.n	180e2 <_ZN9CDC_Class8readDataEPvl+0x5e>
   180e0:	2300      	movs	r3, #0
   180e2:	2b00      	cmp	r3, #0
   180e4:	d000      	beq.n	180e8 <_ZN9CDC_Class8readDataEPvl+0x64>
   180e6:	e7ec      	b.n	180c2 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   180e8:	4808      	ldr	r0, [pc, #32]	; (1810c <_ZN9CDC_Class8readDataEPvl+0x88>)
   180ea:	4b0b      	ldr	r3, [pc, #44]	; (18118 <_ZN9CDC_Class8readDataEPvl+0x94>)
   180ec:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   180ee:	4906      	ldr	r1, [pc, #24]	; (18108 <_ZN9CDC_Class8readDataEPvl+0x84>)
   180f0:	4806      	ldr	r0, [pc, #24]	; (1810c <_ZN9CDC_Class8readDataEPvl+0x88>)
   180f2:	4b0a      	ldr	r3, [pc, #40]	; (1811c <_ZN9CDC_Class8readDataEPvl+0x98>)
   180f4:	4798      	blx	r3
   180f6:	e001      	b.n	180fc <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   180f8:	2300      	movs	r3, #0
   180fa:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   180fc:	7dfb      	ldrb	r3, [r7, #23]
}
   180fe:	4618      	mov	r0, r3
   18100:	3718      	adds	r7, #24
   18102:	46bd      	mov	sp, r7
   18104:	bd80      	pop	{r7, pc}
   18106:	bf00      	nop
   18108:	00017e71 	.word	0x00017e71
   1810c:	2000a420 	.word	0x2000a420
   18110:	00018ab1 	.word	0x00018ab1
   18114:	00011a65 	.word	0x00011a65
   18118:	000189d1 	.word	0x000189d1
   1811c:	00018b15 	.word	0x00018b15

00018120 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   18120:	b580      	push	{r7, lr}
   18122:	b086      	sub	sp, #24
   18124:	af00      	add	r7, sp, #0
   18126:	60f8      	str	r0, [r7, #12]
   18128:	60b9      	str	r1, [r7, #8]
   1812a:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   1812c:	68fb      	ldr	r3, [r7, #12]
   1812e:	2200      	movs	r2, #0
   18130:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   18132:	687b      	ldr	r3, [r7, #4]
   18134:	4619      	mov	r1, r3
   18136:	68b8      	ldr	r0, [r7, #8]
   18138:	4b04      	ldr	r3, [pc, #16]	; (1814c <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   1813a:	4798      	blx	r3
   1813c:	4603      	mov	r3, r0
   1813e:	617b      	str	r3, [r7, #20]
	return r;
   18140:	697b      	ldr	r3, [r7, #20]
}
   18142:	4618      	mov	r0, r3
   18144:	3718      	adds	r7, #24
   18146:	46bd      	mov	sp, r7
   18148:	bd80      	pop	{r7, pc}
   1814a:	bf00      	nop
   1814c:	00011a65 	.word	0x00011a65

00018150 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   18150:	b580      	push	{r7, lr}
   18152:	b084      	sub	sp, #16
   18154:	af00      	add	r7, sp, #0
   18156:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   18158:	687b      	ldr	r3, [r7, #4]
   1815a:	2200      	movs	r2, #0
   1815c:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   1815e:	f107 030f 	add.w	r3, r7, #15
   18162:	2101      	movs	r1, #1
   18164:	4618      	mov	r0, r3
   18166:	4b08      	ldr	r3, [pc, #32]	; (18188 <_ZN9CDC_Class4readEv+0x38>)
   18168:	4798      	blx	r3
	while(!rxReady);
   1816a:	687b      	ldr	r3, [r7, #4]
   1816c:	7d5b      	ldrb	r3, [r3, #21]
   1816e:	b2db      	uxtb	r3, r3
   18170:	f083 0301 	eor.w	r3, r3, #1
   18174:	b2db      	uxtb	r3, r3
   18176:	2b00      	cmp	r3, #0
   18178:	d000      	beq.n	1817c <_ZN9CDC_Class4readEv+0x2c>
   1817a:	e7f6      	b.n	1816a <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   1817c:	7bfb      	ldrb	r3, [r7, #15]
}
   1817e:	4618      	mov	r0, r3
   18180:	3710      	adds	r7, #16
   18182:	46bd      	mov	sp, r7
   18184:	bd80      	pop	{r7, pc}
   18186:	bf00      	nop
   18188:	00011a65 	.word	0x00011a65

0001818c <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   1818c:	b580      	push	{r7, lr}
   1818e:	b082      	sub	sp, #8
   18190:	af00      	add	r7, sp, #0
   18192:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   18194:	687b      	ldr	r3, [r7, #4]
   18196:	331c      	adds	r3, #28
   18198:	2140      	movs	r1, #64	; 0x40
   1819a:	4618      	mov	r0, r3
   1819c:	4b02      	ldr	r3, [pc, #8]	; (181a8 <_ZN9CDC_Class5flushEv+0x1c>)
   1819e:	4798      	blx	r3
}
   181a0:	bf00      	nop
   181a2:	3708      	adds	r7, #8
   181a4:	46bd      	mov	sp, r7
   181a6:	bd80      	pop	{r7, pc}
   181a8:	00011aa9 	.word	0x00011aa9

000181ac <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   181ac:	b580      	push	{r7, lr}
   181ae:	b082      	sub	sp, #8
   181b0:	af00      	add	r7, sp, #0
   181b2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   181b4:	4b02      	ldr	r3, [pc, #8]	; (181c0 <_ZN9CDC_Class5clearEv+0x14>)
   181b6:	4798      	blx	r3
}
   181b8:	bf00      	nop
   181ba:	3708      	adds	r7, #8
   181bc:	46bd      	mov	sp, r7
   181be:	bd80      	pop	{r7, pc}
   181c0:	00011aed 	.word	0x00011aed

000181c4 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   181c4:	b580      	push	{r7, lr}
   181c6:	b082      	sub	sp, #8
   181c8:	af00      	add	r7, sp, #0
   181ca:	6078      	str	r0, [r7, #4]
   181cc:	460b      	mov	r3, r1
   181ce:	70fb      	strb	r3, [r7, #3]
	if (connected){
   181d0:	687b      	ldr	r3, [r7, #4]
   181d2:	7c1b      	ldrb	r3, [r3, #16]
   181d4:	b2db      	uxtb	r3, r3
   181d6:	2b00      	cmp	r3, #0
   181d8:	d012      	beq.n	18200 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   181da:	687b      	ldr	r3, [r7, #4]
   181dc:	7d1b      	ldrb	r3, [r3, #20]
   181de:	b2db      	uxtb	r3, r3
   181e0:	f083 0301 	eor.w	r3, r3, #1
   181e4:	b2db      	uxtb	r3, r3
   181e6:	2b00      	cmp	r3, #0
   181e8:	d000      	beq.n	181ec <_ZN9CDC_Class5writeEh+0x28>
   181ea:	e7f6      	b.n	181da <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   181ec:	687b      	ldr	r3, [r7, #4]
   181ee:	681b      	ldr	r3, [r3, #0]
   181f0:	3324      	adds	r3, #36	; 0x24
   181f2:	681b      	ldr	r3, [r3, #0]
   181f4:	1cf9      	adds	r1, r7, #3
   181f6:	2201      	movs	r2, #1
   181f8:	6878      	ldr	r0, [r7, #4]
   181fa:	4798      	blx	r3
   181fc:	4603      	mov	r3, r0
   181fe:	e000      	b.n	18202 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   18200:	2300      	movs	r3, #0
	}
		
}
   18202:	4618      	mov	r0, r3
   18204:	3708      	adds	r7, #8
   18206:	46bd      	mov	sp, r7
   18208:	bd80      	pop	{r7, pc}
	...

0001820c <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   1820c:	b580      	push	{r7, lr}
   1820e:	b086      	sub	sp, #24
   18210:	af00      	add	r7, sp, #0
   18212:	60f8      	str	r0, [r7, #12]
   18214:	60b9      	str	r1, [r7, #8]
   18216:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   18218:	68fb      	ldr	r3, [r7, #12]
   1821a:	7c1b      	ldrb	r3, [r3, #16]
   1821c:	b2db      	uxtb	r3, r3
   1821e:	2b00      	cmp	r3, #0
   18220:	d02f      	beq.n	18282 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   18222:	687a      	ldr	r2, [r7, #4]
   18224:	4613      	mov	r3, r2
   18226:	009b      	lsls	r3, r3, #2
   18228:	4413      	add	r3, r2
   1822a:	005b      	lsls	r3, r3, #1
   1822c:	461a      	mov	r2, r3
   1822e:	4917      	ldr	r1, [pc, #92]	; (1828c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   18230:	4817      	ldr	r0, [pc, #92]	; (18290 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   18232:	4b18      	ldr	r3, [pc, #96]	; (18294 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   18234:	4798      	blx	r3
		txReady=false;
   18236:	68fb      	ldr	r3, [r7, #12]
   18238:	2200      	movs	r2, #0
   1823a:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   1823c:	687b      	ldr	r3, [r7, #4]
   1823e:	4619      	mov	r1, r3
   18240:	68b8      	ldr	r0, [r7, #8]
   18242:	4b15      	ldr	r3, [pc, #84]	; (18298 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   18244:	4798      	blx	r3
   18246:	4603      	mov	r3, r0
   18248:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   1824a:	68fb      	ldr	r3, [r7, #12]
   1824c:	7d1b      	ldrb	r3, [r3, #20]
   1824e:	b2db      	uxtb	r3, r3
   18250:	f083 0301 	eor.w	r3, r3, #1
   18254:	b2db      	uxtb	r3, r3
   18256:	2b00      	cmp	r3, #0
   18258:	d006      	beq.n	18268 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   1825a:	68fb      	ldr	r3, [r7, #12]
   1825c:	7c1b      	ldrb	r3, [r3, #16]
   1825e:	b2db      	uxtb	r3, r3
   18260:	2b00      	cmp	r3, #0
   18262:	d001      	beq.n	18268 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   18264:	2301      	movs	r3, #1
   18266:	e000      	b.n	1826a <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   18268:	2300      	movs	r3, #0
   1826a:	2b00      	cmp	r3, #0
   1826c:	d000      	beq.n	18270 <_ZN9CDC_Class9writeDataEPKvl+0x64>
   1826e:	e7ec      	b.n	1824a <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   18270:	4807      	ldr	r0, [pc, #28]	; (18290 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   18272:	4b0a      	ldr	r3, [pc, #40]	; (1829c <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   18274:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   18276:	4905      	ldr	r1, [pc, #20]	; (1828c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   18278:	4805      	ldr	r0, [pc, #20]	; (18290 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   1827a:	4b09      	ldr	r3, [pc, #36]	; (182a0 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   1827c:	4798      	blx	r3
		return r;
   1827e:	697b      	ldr	r3, [r7, #20]
   18280:	e000      	b.n	18284 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   18282:	2300      	movs	r3, #0
	}
	

}
   18284:	4618      	mov	r0, r3
   18286:	3718      	adds	r7, #24
   18288:	46bd      	mov	sp, r7
   1828a:	bd80      	pop	{r7, pc}
   1828c:	00017e71 	.word	0x00017e71
   18290:	2000a420 	.word	0x2000a420
   18294:	00018ab1 	.word	0x00018ab1
   18298:	00011aa9 	.word	0x00011aa9
   1829c:	000189d1 	.word	0x000189d1
   182a0:	00018b15 	.word	0x00018b15

000182a4 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   182a4:	b580      	push	{r7, lr}
   182a6:	b086      	sub	sp, #24
   182a8:	af00      	add	r7, sp, #0
   182aa:	60f8      	str	r0, [r7, #12]
   182ac:	60b9      	str	r1, [r7, #8]
   182ae:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   182b0:	68fb      	ldr	r3, [r7, #12]
   182b2:	2200      	movs	r2, #0
   182b4:	751a      	strb	r2, [r3, #20]

 	if (connected){
   182b6:	68fb      	ldr	r3, [r7, #12]
   182b8:	7c1b      	ldrb	r3, [r3, #16]
   182ba:	b2db      	uxtb	r3, r3
   182bc:	2b00      	cmp	r3, #0
   182be:	d02a      	beq.n	18316 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   182c0:	687a      	ldr	r2, [r7, #4]
   182c2:	4613      	mov	r3, r2
   182c4:	009b      	lsls	r3, r3, #2
   182c6:	4413      	add	r3, r2
   182c8:	005b      	lsls	r3, r3, #1
   182ca:	461a      	mov	r2, r3
   182cc:	4915      	ldr	r1, [pc, #84]	; (18324 <_ZN9CDC_Class5writeEPKhj+0x80>)
   182ce:	4816      	ldr	r0, [pc, #88]	; (18328 <_ZN9CDC_Class5writeEPKhj+0x84>)
   182d0:	4b16      	ldr	r3, [pc, #88]	; (1832c <_ZN9CDC_Class5writeEPKhj+0x88>)
   182d2:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   182d4:	6879      	ldr	r1, [r7, #4]
   182d6:	68b8      	ldr	r0, [r7, #8]
   182d8:	4b15      	ldr	r3, [pc, #84]	; (18330 <_ZN9CDC_Class5writeEPKhj+0x8c>)
   182da:	4798      	blx	r3
   182dc:	4603      	mov	r3, r0
   182de:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   182e0:	68fb      	ldr	r3, [r7, #12]
   182e2:	7d1b      	ldrb	r3, [r3, #20]
   182e4:	b2db      	uxtb	r3, r3
   182e6:	f083 0301 	eor.w	r3, r3, #1
   182ea:	b2db      	uxtb	r3, r3
   182ec:	2b00      	cmp	r3, #0
   182ee:	d006      	beq.n	182fe <_ZN9CDC_Class5writeEPKhj+0x5a>
   182f0:	68fb      	ldr	r3, [r7, #12]
   182f2:	7c1b      	ldrb	r3, [r3, #16]
   182f4:	b2db      	uxtb	r3, r3
   182f6:	2b00      	cmp	r3, #0
   182f8:	d001      	beq.n	182fe <_ZN9CDC_Class5writeEPKhj+0x5a>
   182fa:	2301      	movs	r3, #1
   182fc:	e000      	b.n	18300 <_ZN9CDC_Class5writeEPKhj+0x5c>
   182fe:	2300      	movs	r3, #0
   18300:	2b00      	cmp	r3, #0
   18302:	d000      	beq.n	18306 <_ZN9CDC_Class5writeEPKhj+0x62>
   18304:	e7ec      	b.n	182e0 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   18306:	4808      	ldr	r0, [pc, #32]	; (18328 <_ZN9CDC_Class5writeEPKhj+0x84>)
   18308:	4b0a      	ldr	r3, [pc, #40]	; (18334 <_ZN9CDC_Class5writeEPKhj+0x90>)
   1830a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   1830c:	4905      	ldr	r1, [pc, #20]	; (18324 <_ZN9CDC_Class5writeEPKhj+0x80>)
   1830e:	4806      	ldr	r0, [pc, #24]	; (18328 <_ZN9CDC_Class5writeEPKhj+0x84>)
   18310:	4b09      	ldr	r3, [pc, #36]	; (18338 <_ZN9CDC_Class5writeEPKhj+0x94>)
   18312:	4798      	blx	r3
   18314:	e001      	b.n	1831a <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   18316:	2300      	movs	r3, #0
   18318:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   1831a:	697b      	ldr	r3, [r7, #20]
}
   1831c:	4618      	mov	r0, r3
   1831e:	3718      	adds	r7, #24
   18320:	46bd      	mov	sp, r7
   18322:	bd80      	pop	{r7, pc}
   18324:	00017e71 	.word	0x00017e71
   18328:	2000a420 	.word	0x2000a420
   1832c:	00018ab1 	.word	0x00018ab1
   18330:	00011aa9 	.word	0x00011aa9
   18334:	000189d1 	.word	0x000189d1
   18338:	00018b15 	.word	0x00018b15

0001833c <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   1833c:	b480      	push	{r7}
   1833e:	b083      	sub	sp, #12
   18340:	af00      	add	r7, sp, #0
   18342:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   18344:	687b      	ldr	r3, [r7, #4]
   18346:	7d5b      	ldrb	r3, [r3, #21]
   18348:	b2db      	uxtb	r3, r3
   1834a:	2b00      	cmp	r3, #0
   1834c:	d006      	beq.n	1835c <_ZN9CDC_Class9availableEv+0x20>
   1834e:	687b      	ldr	r3, [r7, #4]
   18350:	7d1b      	ldrb	r3, [r3, #20]
   18352:	b2db      	uxtb	r3, r3
   18354:	2b00      	cmp	r3, #0
   18356:	d001      	beq.n	1835c <_ZN9CDC_Class9availableEv+0x20>
   18358:	2301      	movs	r3, #1
   1835a:	e000      	b.n	1835e <_ZN9CDC_Class9availableEv+0x22>
   1835c:	2300      	movs	r3, #0
   1835e:	2b00      	cmp	r3, #0
   18360:	d001      	beq.n	18366 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   18362:	2301      	movs	r3, #1
   18364:	e000      	b.n	18368 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   18366:	2300      	movs	r3, #0
	}
	
}
   18368:	4618      	mov	r0, r3
   1836a:	370c      	adds	r7, #12
   1836c:	46bd      	mov	sp, r7
   1836e:	bc80      	pop	{r7}
   18370:	4770      	bx	lr
	...

00018374 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   18374:	b580      	push	{r7, lr}
   18376:	b082      	sub	sp, #8
   18378:	af00      	add	r7, sp, #0
   1837a:	6078      	str	r0, [r7, #4]
   1837c:	6039      	str	r1, [r7, #0]
   1837e:	687b      	ldr	r3, [r7, #4]
   18380:	2b01      	cmp	r3, #1
   18382:	d10c      	bne.n	1839e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   18384:	683b      	ldr	r3, [r7, #0]
   18386:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1838a:	4293      	cmp	r3, r2
   1838c:	d107      	bne.n	1839e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1838e:	4806      	ldr	r0, [pc, #24]	; (183a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   18390:	4b06      	ldr	r3, [pc, #24]	; (183ac <_Z41__static_initialization_and_destruction_0ii+0x38>)
   18392:	4798      	blx	r3
   18394:	4a06      	ldr	r2, [pc, #24]	; (183b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   18396:	4907      	ldr	r1, [pc, #28]	; (183b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   18398:	4803      	ldr	r0, [pc, #12]	; (183a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1839a:	4b07      	ldr	r3, [pc, #28]	; (183b8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1839c:	4798      	blx	r3
   1839e:	bf00      	nop
   183a0:	3708      	adds	r7, #8
   183a2:	46bd      	mov	sp, r7
   183a4:	bd80      	pop	{r7, pc}
   183a6:	bf00      	nop
   183a8:	2000a368 	.word	0x2000a368
   183ac:	00017f61 	.word	0x00017f61
   183b0:	20000000 	.word	0x20000000
   183b4:	00017fa9 	.word	0x00017fa9
   183b8:	00019d41 	.word	0x00019d41

000183bc <_GLOBAL__sub_I_ptrCDCClass>:
   183bc:	b580      	push	{r7, lr}
   183be:	af00      	add	r7, sp, #0
   183c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   183c4:	2001      	movs	r0, #1
   183c6:	4b01      	ldr	r3, [pc, #4]	; (183cc <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   183c8:	4798      	blx	r3
   183ca:	bd80      	pop	{r7, pc}
   183cc:	00018375 	.word	0x00018375

000183d0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   183d0:	b590      	push	{r4, r7, lr}
   183d2:	b083      	sub	sp, #12
   183d4:	af00      	add	r7, sp, #0
   183d6:	6078      	str	r0, [r7, #4]
   183d8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
   183da:	683b      	ldr	r3, [r7, #0]
   183dc:	2b00      	cmp	r3, #0
   183de:	d101      	bne.n	183e4 <_ZN5Print5writeEPKc+0x14>
   183e0:	2300      	movs	r3, #0
   183e2:	e00c      	b.n	183fe <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
   183e4:	687b      	ldr	r3, [r7, #4]
   183e6:	681b      	ldr	r3, [r3, #0]
   183e8:	3304      	adds	r3, #4
   183ea:	681c      	ldr	r4, [r3, #0]
   183ec:	6838      	ldr	r0, [r7, #0]
   183ee:	4b06      	ldr	r3, [pc, #24]	; (18408 <_ZN5Print5writeEPKc+0x38>)
   183f0:	4798      	blx	r3
   183f2:	4603      	mov	r3, r0
   183f4:	461a      	mov	r2, r3
   183f6:	6839      	ldr	r1, [r7, #0]
   183f8:	6878      	ldr	r0, [r7, #4]
   183fa:	47a0      	blx	r4
   183fc:	4603      	mov	r3, r0
    }
   183fe:	4618      	mov	r0, r3
   18400:	370c      	adds	r7, #12
   18402:	46bd      	mov	sp, r7
   18404:	bd90      	pop	{r4, r7, pc}
   18406:	bf00      	nop
   18408:	0001c6c1 	.word	0x0001c6c1

0001840c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   1840c:	b580      	push	{r7, lr}
   1840e:	b086      	sub	sp, #24
   18410:	af00      	add	r7, sp, #0
   18412:	60f8      	str	r0, [r7, #12]
   18414:	60b9      	str	r1, [r7, #8]
   18416:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   18418:	2300      	movs	r3, #0
   1841a:	617b      	str	r3, [r7, #20]
  while (size--) {
   1841c:	687b      	ldr	r3, [r7, #4]
   1841e:	1e5a      	subs	r2, r3, #1
   18420:	607a      	str	r2, [r7, #4]
   18422:	2b00      	cmp	r3, #0
   18424:	bf14      	ite	ne
   18426:	2301      	movne	r3, #1
   18428:	2300      	moveq	r3, #0
   1842a:	b2db      	uxtb	r3, r3
   1842c:	2b00      	cmp	r3, #0
   1842e:	d016      	beq.n	1845e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   18430:	68fb      	ldr	r3, [r7, #12]
   18432:	681b      	ldr	r3, [r3, #0]
   18434:	681a      	ldr	r2, [r3, #0]
   18436:	68bb      	ldr	r3, [r7, #8]
   18438:	1c59      	adds	r1, r3, #1
   1843a:	60b9      	str	r1, [r7, #8]
   1843c:	781b      	ldrb	r3, [r3, #0]
   1843e:	4619      	mov	r1, r3
   18440:	68f8      	ldr	r0, [r7, #12]
   18442:	4790      	blx	r2
   18444:	4603      	mov	r3, r0
   18446:	2b00      	cmp	r3, #0
   18448:	bf14      	ite	ne
   1844a:	2301      	movne	r3, #1
   1844c:	2300      	moveq	r3, #0
   1844e:	b2db      	uxtb	r3, r3
   18450:	2b00      	cmp	r3, #0
   18452:	d003      	beq.n	1845c <_ZN5Print5writeEPKhj+0x50>
   18454:	697b      	ldr	r3, [r7, #20]
   18456:	3301      	adds	r3, #1
   18458:	617b      	str	r3, [r7, #20]
  while (size--) {
   1845a:	e7df      	b.n	1841c <_ZN5Print5writeEPKhj+0x10>
    else break;
   1845c:	bf00      	nop
  }
  return n;
   1845e:	697b      	ldr	r3, [r7, #20]
}
   18460:	4618      	mov	r0, r3
   18462:	3718      	adds	r7, #24
   18464:	46bd      	mov	sp, r7
   18466:	bd80      	pop	{r7, pc}

00018468 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
   18468:	b580      	push	{r7, lr}
   1846a:	b082      	sub	sp, #8
   1846c:	af00      	add	r7, sp, #0
   1846e:	6078      	str	r0, [r7, #4]
   18470:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
   18472:	6839      	ldr	r1, [r7, #0]
   18474:	6878      	ldr	r0, [r7, #4]
   18476:	4b03      	ldr	r3, [pc, #12]	; (18484 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
   18478:	4798      	blx	r3
   1847a:	4603      	mov	r3, r0
}
   1847c:	4618      	mov	r0, r3
   1847e:	3708      	adds	r7, #8
   18480:	46bd      	mov	sp, r7
   18482:	bd80      	pop	{r7, pc}
   18484:	00018489 	.word	0x00018489

00018488 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   18488:	b580      	push	{r7, lr}
   1848a:	b082      	sub	sp, #8
   1848c:	af00      	add	r7, sp, #0
   1848e:	6078      	str	r0, [r7, #4]
   18490:	6039      	str	r1, [r7, #0]
  return write(str);
   18492:	6839      	ldr	r1, [r7, #0]
   18494:	6878      	ldr	r0, [r7, #4]
   18496:	4b03      	ldr	r3, [pc, #12]	; (184a4 <_ZN5Print5printEPKc+0x1c>)
   18498:	4798      	blx	r3
   1849a:	4603      	mov	r3, r0
}
   1849c:	4618      	mov	r0, r3
   1849e:	3708      	adds	r7, #8
   184a0:	46bd      	mov	sp, r7
   184a2:	bd80      	pop	{r7, pc}
   184a4:	000183d1 	.word	0x000183d1

000184a8 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   184a8:	b580      	push	{r7, lr}
   184aa:	b084      	sub	sp, #16
   184ac:	af00      	add	r7, sp, #0
   184ae:	60f8      	str	r0, [r7, #12]
   184b0:	460b      	mov	r3, r1
   184b2:	607a      	str	r2, [r7, #4]
   184b4:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   184b6:	7afb      	ldrb	r3, [r7, #11]
   184b8:	687a      	ldr	r2, [r7, #4]
   184ba:	4619      	mov	r1, r3
   184bc:	68f8      	ldr	r0, [r7, #12]
   184be:	4b03      	ldr	r3, [pc, #12]	; (184cc <_ZN5Print5printEhi+0x24>)
   184c0:	4798      	blx	r3
   184c2:	4603      	mov	r3, r0
}
   184c4:	4618      	mov	r0, r3
   184c6:	3710      	adds	r7, #16
   184c8:	46bd      	mov	sp, r7
   184ca:	bd80      	pop	{r7, pc}
   184cc:	000184d1 	.word	0x000184d1

000184d0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   184d0:	b580      	push	{r7, lr}
   184d2:	b084      	sub	sp, #16
   184d4:	af00      	add	r7, sp, #0
   184d6:	60f8      	str	r0, [r7, #12]
   184d8:	60b9      	str	r1, [r7, #8]
   184da:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   184dc:	687b      	ldr	r3, [r7, #4]
   184de:	2b00      	cmp	r3, #0
   184e0:	d109      	bne.n	184f6 <_ZN5Print5printEmi+0x26>
   184e2:	68fb      	ldr	r3, [r7, #12]
   184e4:	681b      	ldr	r3, [r3, #0]
   184e6:	681b      	ldr	r3, [r3, #0]
   184e8:	68ba      	ldr	r2, [r7, #8]
   184ea:	b2d2      	uxtb	r2, r2
   184ec:	4611      	mov	r1, r2
   184ee:	68f8      	ldr	r0, [r7, #12]
   184f0:	4798      	blx	r3
   184f2:	4603      	mov	r3, r0
   184f4:	e007      	b.n	18506 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   184f6:	687b      	ldr	r3, [r7, #4]
   184f8:	b2db      	uxtb	r3, r3
   184fa:	461a      	mov	r2, r3
   184fc:	68b9      	ldr	r1, [r7, #8]
   184fe:	68f8      	ldr	r0, [r7, #12]
   18500:	4b03      	ldr	r3, [pc, #12]	; (18510 <_ZN5Print5printEmi+0x40>)
   18502:	4798      	blx	r3
   18504:	4603      	mov	r3, r0
}
   18506:	4618      	mov	r0, r3
   18508:	3710      	adds	r7, #16
   1850a:	46bd      	mov	sp, r7
   1850c:	bd80      	pop	{r7, pc}
   1850e:	bf00      	nop
   18510:	00018615 	.word	0x00018615

00018514 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
   18514:	b580      	push	{r7, lr}
   18516:	b084      	sub	sp, #16
   18518:	af00      	add	r7, sp, #0
   1851a:	6078      	str	r0, [r7, #4]
   1851c:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
   1851e:	6839      	ldr	r1, [r7, #0]
   18520:	6878      	ldr	r0, [r7, #4]
   18522:	4b07      	ldr	r3, [pc, #28]	; (18540 <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
   18524:	4798      	blx	r3
   18526:	60f8      	str	r0, [r7, #12]
  n += println();
   18528:	6878      	ldr	r0, [r7, #4]
   1852a:	4b06      	ldr	r3, [pc, #24]	; (18544 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
   1852c:	4798      	blx	r3
   1852e:	4602      	mov	r2, r0
   18530:	68fb      	ldr	r3, [r7, #12]
   18532:	4413      	add	r3, r2
   18534:	60fb      	str	r3, [r7, #12]
  return n;
   18536:	68fb      	ldr	r3, [r7, #12]
}
   18538:	4618      	mov	r0, r3
   1853a:	3710      	adds	r7, #16
   1853c:	46bd      	mov	sp, r7
   1853e:	bd80      	pop	{r7, pc}
   18540:	00018469 	.word	0x00018469
   18544:	00018549 	.word	0x00018549

00018548 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   18548:	b580      	push	{r7, lr}
   1854a:	b082      	sub	sp, #8
   1854c:	af00      	add	r7, sp, #0
   1854e:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   18550:	4904      	ldr	r1, [pc, #16]	; (18564 <_ZN5Print7printlnEv+0x1c>)
   18552:	6878      	ldr	r0, [r7, #4]
   18554:	4b04      	ldr	r3, [pc, #16]	; (18568 <_ZN5Print7printlnEv+0x20>)
   18556:	4798      	blx	r3
   18558:	4603      	mov	r3, r0
}
   1855a:	4618      	mov	r0, r3
   1855c:	3708      	adds	r7, #8
   1855e:	46bd      	mov	sp, r7
   18560:	bd80      	pop	{r7, pc}
   18562:	bf00      	nop
   18564:	00022078 	.word	0x00022078
   18568:	000183d1 	.word	0x000183d1

0001856c <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   1856c:	b580      	push	{r7, lr}
   1856e:	b084      	sub	sp, #16
   18570:	af00      	add	r7, sp, #0
   18572:	6078      	str	r0, [r7, #4]
   18574:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   18576:	6839      	ldr	r1, [r7, #0]
   18578:	6878      	ldr	r0, [r7, #4]
   1857a:	4b07      	ldr	r3, [pc, #28]	; (18598 <_ZN5Print7printlnEPKc+0x2c>)
   1857c:	4798      	blx	r3
   1857e:	60f8      	str	r0, [r7, #12]
  n += println();
   18580:	6878      	ldr	r0, [r7, #4]
   18582:	4b06      	ldr	r3, [pc, #24]	; (1859c <_ZN5Print7printlnEPKc+0x30>)
   18584:	4798      	blx	r3
   18586:	4602      	mov	r2, r0
   18588:	68fb      	ldr	r3, [r7, #12]
   1858a:	4413      	add	r3, r2
   1858c:	60fb      	str	r3, [r7, #12]
  return n;
   1858e:	68fb      	ldr	r3, [r7, #12]
}
   18590:	4618      	mov	r0, r3
   18592:	3710      	adds	r7, #16
   18594:	46bd      	mov	sp, r7
   18596:	bd80      	pop	{r7, pc}
   18598:	00018489 	.word	0x00018489
   1859c:	00018549 	.word	0x00018549

000185a0 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   185a0:	b580      	push	{r7, lr}
   185a2:	b086      	sub	sp, #24
   185a4:	af00      	add	r7, sp, #0
   185a6:	60f8      	str	r0, [r7, #12]
   185a8:	460b      	mov	r3, r1
   185aa:	607a      	str	r2, [r7, #4]
   185ac:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
   185ae:	7afb      	ldrb	r3, [r7, #11]
   185b0:	687a      	ldr	r2, [r7, #4]
   185b2:	4619      	mov	r1, r3
   185b4:	68f8      	ldr	r0, [r7, #12]
   185b6:	4b07      	ldr	r3, [pc, #28]	; (185d4 <_ZN5Print7printlnEhi+0x34>)
   185b8:	4798      	blx	r3
   185ba:	6178      	str	r0, [r7, #20]
  n += println();
   185bc:	68f8      	ldr	r0, [r7, #12]
   185be:	4b06      	ldr	r3, [pc, #24]	; (185d8 <_ZN5Print7printlnEhi+0x38>)
   185c0:	4798      	blx	r3
   185c2:	4602      	mov	r2, r0
   185c4:	697b      	ldr	r3, [r7, #20]
   185c6:	4413      	add	r3, r2
   185c8:	617b      	str	r3, [r7, #20]
  return n;
   185ca:	697b      	ldr	r3, [r7, #20]
}
   185cc:	4618      	mov	r0, r3
   185ce:	3718      	adds	r7, #24
   185d0:	46bd      	mov	sp, r7
   185d2:	bd80      	pop	{r7, pc}
   185d4:	000184a9 	.word	0x000184a9
   185d8:	00018549 	.word	0x00018549

000185dc <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   185dc:	b580      	push	{r7, lr}
   185de:	b086      	sub	sp, #24
   185e0:	af00      	add	r7, sp, #0
   185e2:	60f8      	str	r0, [r7, #12]
   185e4:	60b9      	str	r1, [r7, #8]
   185e6:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
   185e8:	687a      	ldr	r2, [r7, #4]
   185ea:	68b9      	ldr	r1, [r7, #8]
   185ec:	68f8      	ldr	r0, [r7, #12]
   185ee:	4b07      	ldr	r3, [pc, #28]	; (1860c <_ZN5Print7printlnEmi+0x30>)
   185f0:	4798      	blx	r3
   185f2:	6178      	str	r0, [r7, #20]
  n += println();
   185f4:	68f8      	ldr	r0, [r7, #12]
   185f6:	4b06      	ldr	r3, [pc, #24]	; (18610 <_ZN5Print7printlnEmi+0x34>)
   185f8:	4798      	blx	r3
   185fa:	4602      	mov	r2, r0
   185fc:	697b      	ldr	r3, [r7, #20]
   185fe:	4413      	add	r3, r2
   18600:	617b      	str	r3, [r7, #20]
  return n;
   18602:	697b      	ldr	r3, [r7, #20]
}
   18604:	4618      	mov	r0, r3
   18606:	3718      	adds	r7, #24
   18608:	46bd      	mov	sp, r7
   1860a:	bd80      	pop	{r7, pc}
   1860c:	000184d1 	.word	0x000184d1
   18610:	00018549 	.word	0x00018549

00018614 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   18614:	b580      	push	{r7, lr}
   18616:	b08e      	sub	sp, #56	; 0x38
   18618:	af00      	add	r7, sp, #0
   1861a:	60f8      	str	r0, [r7, #12]
   1861c:	60b9      	str	r1, [r7, #8]
   1861e:	4613      	mov	r3, r2
   18620:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   18622:	f107 0310 	add.w	r3, r7, #16
   18626:	3320      	adds	r3, #32
   18628:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   1862a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1862c:	2200      	movs	r2, #0
   1862e:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   18630:	79fb      	ldrb	r3, [r7, #7]
   18632:	2b01      	cmp	r3, #1
   18634:	dc01      	bgt.n	1863a <_ZN5Print11printNumberEmh+0x26>
   18636:	230a      	movs	r3, #10
   18638:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   1863a:	79fa      	ldrb	r2, [r7, #7]
   1863c:	68bb      	ldr	r3, [r7, #8]
   1863e:	fbb3 f1f2 	udiv	r1, r3, r2
   18642:	fb02 f201 	mul.w	r2, r2, r1
   18646:	1a9b      	subs	r3, r3, r2
   18648:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   1864c:	79fb      	ldrb	r3, [r7, #7]
   1864e:	68ba      	ldr	r2, [r7, #8]
   18650:	fbb2 f3f3 	udiv	r3, r2, r3
   18654:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   18656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18658:	3b01      	subs	r3, #1
   1865a:	637b      	str	r3, [r7, #52]	; 0x34
   1865c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   18660:	2b09      	cmp	r3, #9
   18662:	dc04      	bgt.n	1866e <_ZN5Print11printNumberEmh+0x5a>
   18664:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   18668:	3330      	adds	r3, #48	; 0x30
   1866a:	b2db      	uxtb	r3, r3
   1866c:	e003      	b.n	18676 <_ZN5Print11printNumberEmh+0x62>
   1866e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   18672:	3337      	adds	r3, #55	; 0x37
   18674:	b2db      	uxtb	r3, r3
   18676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   18678:	7013      	strb	r3, [r2, #0]
  } while(n);
   1867a:	68bb      	ldr	r3, [r7, #8]
   1867c:	2b00      	cmp	r3, #0
   1867e:	d000      	beq.n	18682 <_ZN5Print11printNumberEmh+0x6e>
  do {
   18680:	e7db      	b.n	1863a <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   18682:	6b79      	ldr	r1, [r7, #52]	; 0x34
   18684:	68f8      	ldr	r0, [r7, #12]
   18686:	4b03      	ldr	r3, [pc, #12]	; (18694 <_ZN5Print11printNumberEmh+0x80>)
   18688:	4798      	blx	r3
   1868a:	4603      	mov	r3, r0
}
   1868c:	4618      	mov	r0, r3
   1868e:	3738      	adds	r7, #56	; 0x38
   18690:	46bd      	mov	sp, r7
   18692:	bd80      	pop	{r7, pc}
   18694:	000183d1 	.word	0x000183d1

00018698 <hri_port_read_DIR_reg>:
{
   18698:	b480      	push	{r7}
   1869a:	b083      	sub	sp, #12
   1869c:	af00      	add	r7, sp, #0
   1869e:	6078      	str	r0, [r7, #4]
   186a0:	460b      	mov	r3, r1
   186a2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   186a4:	78fb      	ldrb	r3, [r7, #3]
   186a6:	687a      	ldr	r2, [r7, #4]
   186a8:	01db      	lsls	r3, r3, #7
   186aa:	4413      	add	r3, r2
   186ac:	681b      	ldr	r3, [r3, #0]
}
   186ae:	4618      	mov	r0, r3
   186b0:	370c      	adds	r7, #12
   186b2:	46bd      	mov	sp, r7
   186b4:	bc80      	pop	{r7}
   186b6:	4770      	bx	lr

000186b8 <hri_port_read_OUT_reg>:
{
   186b8:	b480      	push	{r7}
   186ba:	b083      	sub	sp, #12
   186bc:	af00      	add	r7, sp, #0
   186be:	6078      	str	r0, [r7, #4]
   186c0:	460b      	mov	r3, r1
   186c2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   186c4:	78fb      	ldrb	r3, [r7, #3]
   186c6:	687a      	ldr	r2, [r7, #4]
   186c8:	01db      	lsls	r3, r3, #7
   186ca:	4413      	add	r3, r2
   186cc:	3310      	adds	r3, #16
   186ce:	681b      	ldr	r3, [r3, #0]
}
   186d0:	4618      	mov	r0, r3
   186d2:	370c      	adds	r7, #12
   186d4:	46bd      	mov	sp, r7
   186d6:	bc80      	pop	{r7}
   186d8:	4770      	bx	lr

000186da <hri_port_read_IN_reg>:
{
   186da:	b480      	push	{r7}
   186dc:	b083      	sub	sp, #12
   186de:	af00      	add	r7, sp, #0
   186e0:	6078      	str	r0, [r7, #4]
   186e2:	460b      	mov	r3, r1
   186e4:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   186e6:	78fb      	ldrb	r3, [r7, #3]
   186e8:	687a      	ldr	r2, [r7, #4]
   186ea:	01db      	lsls	r3, r3, #7
   186ec:	4413      	add	r3, r2
   186ee:	3320      	adds	r3, #32
   186f0:	681b      	ldr	r3, [r3, #0]
}
   186f2:	4618      	mov	r0, r3
   186f4:	370c      	adds	r7, #12
   186f6:	46bd      	mov	sp, r7
   186f8:	bc80      	pop	{r7}
   186fa:	4770      	bx	lr

000186fc <_gpio_get_level>:
{
   186fc:	b580      	push	{r7, lr}
   186fe:	b086      	sub	sp, #24
   18700:	af00      	add	r7, sp, #0
   18702:	4603      	mov	r3, r0
   18704:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
   18706:	f107 030c 	add.w	r3, r7, #12
   1870a:	4618      	mov	r0, r3
   1870c:	4b13      	ldr	r3, [pc, #76]	; (1875c <_gpio_get_level+0x60>)
   1870e:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   18710:	79fb      	ldrb	r3, [r7, #7]
   18712:	4619      	mov	r1, r3
   18714:	4812      	ldr	r0, [pc, #72]	; (18760 <_gpio_get_level+0x64>)
   18716:	4b13      	ldr	r3, [pc, #76]	; (18764 <_gpio_get_level+0x68>)
   18718:	4798      	blx	r3
   1871a:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   1871c:	79fb      	ldrb	r3, [r7, #7]
   1871e:	4619      	mov	r1, r3
   18720:	480f      	ldr	r0, [pc, #60]	; (18760 <_gpio_get_level+0x64>)
   18722:	4b11      	ldr	r3, [pc, #68]	; (18768 <_gpio_get_level+0x6c>)
   18724:	4798      	blx	r3
   18726:	4602      	mov	r2, r0
   18728:	697b      	ldr	r3, [r7, #20]
   1872a:	43db      	mvns	r3, r3
   1872c:	4013      	ands	r3, r2
   1872e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   18730:	79fb      	ldrb	r3, [r7, #7]
   18732:	4619      	mov	r1, r3
   18734:	480a      	ldr	r0, [pc, #40]	; (18760 <_gpio_get_level+0x64>)
   18736:	4b0d      	ldr	r3, [pc, #52]	; (1876c <_gpio_get_level+0x70>)
   18738:	4798      	blx	r3
   1873a:	4602      	mov	r2, r0
   1873c:	697b      	ldr	r3, [r7, #20]
   1873e:	4013      	ands	r3, r2
   18740:	693a      	ldr	r2, [r7, #16]
   18742:	4313      	orrs	r3, r2
   18744:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
   18746:	f107 030c 	add.w	r3, r7, #12
   1874a:	4618      	mov	r0, r3
   1874c:	4b08      	ldr	r3, [pc, #32]	; (18770 <_gpio_get_level+0x74>)
   1874e:	4798      	blx	r3
	return tmp;
   18750:	693b      	ldr	r3, [r7, #16]
}
   18752:	4618      	mov	r0, r3
   18754:	3718      	adds	r7, #24
   18756:	46bd      	mov	sp, r7
   18758:	bd80      	pop	{r7, pc}
   1875a:	bf00      	nop
   1875c:	00010c85 	.word	0x00010c85
   18760:	41008000 	.word	0x41008000
   18764:	00018699 	.word	0x00018699
   18768:	000186db 	.word	0x000186db
   1876c:	000186b9 	.word	0x000186b9
   18770:	00010cab 	.word	0x00010cab

00018774 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   18774:	b580      	push	{r7, lr}
   18776:	b082      	sub	sp, #8
   18778:	af00      	add	r7, sp, #0
   1877a:	4603      	mov	r3, r0
   1877c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   1877e:	79fb      	ldrb	r3, [r7, #7]
   18780:	115b      	asrs	r3, r3, #5
   18782:	b2db      	uxtb	r3, r3
   18784:	4618      	mov	r0, r3
   18786:	4b09      	ldr	r3, [pc, #36]	; (187ac <gpio_get_pin_level+0x38>)
   18788:	4798      	blx	r3
   1878a:	4601      	mov	r1, r0
   1878c:	79fb      	ldrb	r3, [r7, #7]
   1878e:	f003 031f 	and.w	r3, r3, #31
   18792:	2201      	movs	r2, #1
   18794:	fa02 f303 	lsl.w	r3, r2, r3
   18798:	400b      	ands	r3, r1
   1879a:	2b00      	cmp	r3, #0
   1879c:	bf14      	ite	ne
   1879e:	2301      	movne	r3, #1
   187a0:	2300      	moveq	r3, #0
   187a2:	b2db      	uxtb	r3, r3
}
   187a4:	4618      	mov	r0, r3
   187a6:	3708      	adds	r7, #8
   187a8:	46bd      	mov	sp, r7
   187aa:	bd80      	pop	{r7, pc}
   187ac:	000186fd 	.word	0x000186fd

000187b0 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   187b0:	b480      	push	{r7}
   187b2:	b083      	sub	sp, #12
   187b4:	af00      	add	r7, sp, #0
   187b6:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   187b8:	4b06      	ldr	r3, [pc, #24]	; (187d4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   187ba:	681b      	ldr	r3, [r3, #0]
   187bc:	2201      	movs	r2, #1
   187be:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   187c0:	4b04      	ldr	r3, [pc, #16]	; (187d4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   187c2:	681b      	ldr	r3, [r3, #0]
   187c4:	2200      	movs	r2, #0
   187c6:	705a      	strb	r2, [r3, #1]
}
   187c8:	bf00      	nop
   187ca:	370c      	adds	r7, #12
   187cc:	46bd      	mov	sp, r7
   187ce:	bc80      	pop	{r7}
   187d0:	4770      	bx	lr
   187d2:	bf00      	nop
   187d4:	2000a3c8 	.word	0x2000a3c8

000187d8 <_ZL10USBPluggedv>:

static void USBPlugged(void){
   187d8:	b580      	push	{r7, lr}
   187da:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   187dc:	2040      	movs	r0, #64	; 0x40
   187de:	4b0a      	ldr	r3, [pc, #40]	; (18808 <_ZL10USBPluggedv+0x30>)
   187e0:	4798      	blx	r3
   187e2:	4603      	mov	r3, r0
   187e4:	2b00      	cmp	r3, #0
   187e6:	d004      	beq.n	187f2 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   187e8:	4b08      	ldr	r3, [pc, #32]	; (1880c <_ZL10USBPluggedv+0x34>)
   187ea:	681b      	ldr	r3, [r3, #0]
   187ec:	2201      	movs	r2, #1
   187ee:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   187f0:	e007      	b.n	18802 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   187f2:	4b06      	ldr	r3, [pc, #24]	; (1880c <_ZL10USBPluggedv+0x34>)
   187f4:	681b      	ldr	r3, [r3, #0]
   187f6:	2200      	movs	r2, #0
   187f8:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   187fa:	4b04      	ldr	r3, [pc, #16]	; (1880c <_ZL10USBPluggedv+0x34>)
   187fc:	681b      	ldr	r3, [r3, #0]
   187fe:	2200      	movs	r2, #0
   18800:	701a      	strb	r2, [r3, #0]
}
   18802:	bf00      	nop
   18804:	bd80      	pop	{r7, pc}
   18806:	bf00      	nop
   18808:	00018775 	.word	0x00018775
   1880c:	2000a3c8 	.word	0x2000a3c8

00018810 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   18810:	b480      	push	{r7}
   18812:	b083      	sub	sp, #12
   18814:	af00      	add	r7, sp, #0
   18816:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   18818:	4a04      	ldr	r2, [pc, #16]	; (1882c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   1881a:	687b      	ldr	r3, [r7, #4]
   1881c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   1881e:	687b      	ldr	r3, [r7, #4]
   18820:	4618      	mov	r0, r3
   18822:	370c      	adds	r7, #12
   18824:	46bd      	mov	sp, r7
   18826:	bc80      	pop	{r7}
   18828:	4770      	bx	lr
   1882a:	bf00      	nop
   1882c:	2000a3c8 	.word	0x2000a3c8

00018830 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   18830:	b480      	push	{r7}
   18832:	b083      	sub	sp, #12
   18834:	af00      	add	r7, sp, #0
   18836:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   18838:	687b      	ldr	r3, [r7, #4]
   1883a:	4618      	mov	r0, r3
   1883c:	370c      	adds	r7, #12
   1883e:	46bd      	mov	sp, r7
   18840:	bc80      	pop	{r7}
   18842:	4770      	bx	lr

00018844 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   18844:	b580      	push	{r7, lr}
   18846:	b082      	sub	sp, #8
   18848:	af00      	add	r7, sp, #0
   1884a:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   1884c:	491f      	ldr	r1, [pc, #124]	; (188cc <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   1884e:	2040      	movs	r0, #64	; 0x40
   18850:	4b1f      	ldr	r3, [pc, #124]	; (188d0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   18852:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   18854:	481f      	ldr	r0, [pc, #124]	; (188d4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   18856:	4b20      	ldr	r3, [pc, #128]	; (188d8 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   18858:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   1885a:	2040      	movs	r0, #64	; 0x40
   1885c:	4b1f      	ldr	r3, [pc, #124]	; (188dc <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   1885e:	4798      	blx	r3
   18860:	4603      	mov	r3, r0
   18862:	461a      	mov	r2, r3
   18864:	687b      	ldr	r3, [r7, #4]
   18866:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   18868:	687b      	ldr	r3, [r7, #4]
   1886a:	78db      	ldrb	r3, [r3, #3]
   1886c:	2b00      	cmp	r3, #0
   1886e:	d024      	beq.n	188ba <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
   18870:	687b      	ldr	r3, [r7, #4]
   18872:	2200      	movs	r2, #0
   18874:	709a      	strb	r2, [r3, #2]
			plugged=true;
   18876:	687b      	ldr	r3, [r7, #4]
   18878:	2201      	movs	r2, #1
   1887a:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   1887c:	f44f 7216 	mov.w	r2, #600	; 0x258
   18880:	4917      	ldr	r1, [pc, #92]	; (188e0 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   18882:	4814      	ldr	r0, [pc, #80]	; (188d4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   18884:	4b17      	ldr	r3, [pc, #92]	; (188e4 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   18886:	4798      	blx	r3
			usbTerminalTimer.Start();
   18888:	4812      	ldr	r0, [pc, #72]	; (188d4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   1888a:	4b17      	ldr	r3, [pc, #92]	; (188e8 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   1888c:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   1888e:	4817      	ldr	r0, [pc, #92]	; (188ec <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   18890:	4b17      	ldr	r3, [pc, #92]	; (188f0 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
   18892:	4798      	blx	r3
   18894:	4603      	mov	r3, r0
   18896:	f083 0301 	eor.w	r3, r3, #1
   1889a:	b2db      	uxtb	r3, r3
   1889c:	2b00      	cmp	r3, #0
   1889e:	d008      	beq.n	188b2 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
   188a0:	687b      	ldr	r3, [r7, #4]
   188a2:	789b      	ldrb	r3, [r3, #2]
   188a4:	b2db      	uxtb	r3, r3
   188a6:	2b00      	cmp	r3, #0
   188a8:	d0f1      	beq.n	1888e <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
   188aa:	687b      	ldr	r3, [r7, #4]
   188ac:	2200      	movs	r2, #0
   188ae:	701a      	strb	r2, [r3, #0]
					return;
   188b0:	e009      	b.n	188c6 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   188b2:	4808      	ldr	r0, [pc, #32]	; (188d4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   188b4:	4b0f      	ldr	r3, [pc, #60]	; (188f4 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
   188b6:	4798      	blx	r3
   188b8:	e005      	b.n	188c6 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
   188ba:	687b      	ldr	r3, [r7, #4]
   188bc:	2200      	movs	r2, #0
   188be:	701a      	strb	r2, [r3, #0]
			plugged=false;
   188c0:	687b      	ldr	r3, [r7, #4]
   188c2:	2200      	movs	r2, #0
   188c4:	705a      	strb	r2, [r3, #1]
		}
		
}
   188c6:	3708      	adds	r7, #8
   188c8:	46bd      	mov	sp, r7
   188ca:	bd80      	pop	{r7, pc}
   188cc:	000187d9 	.word	0x000187d9
   188d0:	000067f5 	.word	0x000067f5
   188d4:	2000a420 	.word	0x2000a420
   188d8:	00018975 	.word	0x00018975
   188dc:	00018775 	.word	0x00018775
   188e0:	000187b1 	.word	0x000187b1
   188e4:	00018a89 	.word	0x00018a89
   188e8:	000189ad 	.word	0x000189ad
   188ec:	2000a368 	.word	0x2000a368
   188f0:	00018019 	.word	0x00018019
   188f4:	000189d1 	.word	0x000189d1

000188f8 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   188f8:	b580      	push	{r7, lr}
   188fa:	b082      	sub	sp, #8
   188fc:	af00      	add	r7, sp, #0
   188fe:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   18900:	4b04      	ldr	r3, [pc, #16]	; (18914 <_ZL7task_cbPK10timer_task+0x1c>)
   18902:	681b      	ldr	r3, [r3, #0]
   18904:	4618      	mov	r0, r3
   18906:	4b04      	ldr	r3, [pc, #16]	; (18918 <_ZL7task_cbPK10timer_task+0x20>)
   18908:	4798      	blx	r3
}
   1890a:	bf00      	nop
   1890c:	3708      	adds	r7, #8
   1890e:	46bd      	mov	sp, r7
   18910:	bd80      	pop	{r7, pc}
   18912:	bf00      	nop
   18914:	2000a3cc 	.word	0x2000a3cc
   18918:	000189f9 	.word	0x000189f9

0001891c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   1891c:	b480      	push	{r7}
   1891e:	b083      	sub	sp, #12
   18920:	af00      	add	r7, sp, #0
   18922:	6078      	str	r0, [r7, #4]
   18924:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   18926:	687b      	ldr	r3, [r7, #4]
   18928:	683a      	ldr	r2, [r7, #0]
   1892a:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
   1892c:	4a08      	ldr	r2, [pc, #32]	; (18950 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   1892e:	687b      	ldr	r3, [r7, #4]
   18930:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   18932:	687b      	ldr	r3, [r7, #4]
   18934:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18938:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
   1893a:	687b      	ldr	r3, [r7, #4]
   1893c:	689b      	ldr	r3, [r3, #8]
   1893e:	4a05      	ldr	r2, [pc, #20]	; (18954 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
   18940:	60da      	str	r2, [r3, #12]
} //Timer_Class
   18942:	687b      	ldr	r3, [r7, #4]
   18944:	4618      	mov	r0, r3
   18946:	370c      	adds	r7, #12
   18948:	46bd      	mov	sp, r7
   1894a:	bc80      	pop	{r7}
   1894c:	4770      	bx	lr
   1894e:	bf00      	nop
   18950:	2000a3cc 	.word	0x2000a3cc
   18954:	000188f9 	.word	0x000188f9

00018958 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   18958:	b480      	push	{r7}
   1895a:	b083      	sub	sp, #12
   1895c:	af00      	add	r7, sp, #0
   1895e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   18960:	687b      	ldr	r3, [r7, #4]
   18962:	2200      	movs	r2, #0
   18964:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   18966:	687b      	ldr	r3, [r7, #4]
   18968:	4618      	mov	r0, r3
   1896a:	370c      	adds	r7, #12
   1896c:	46bd      	mov	sp, r7
   1896e:	bc80      	pop	{r7}
   18970:	4770      	bx	lr
	...

00018974 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
   18974:	b580      	push	{r7, lr}
   18976:	b082      	sub	sp, #8
   18978:	af00      	add	r7, sp, #0
   1897a:	6078      	str	r0, [r7, #4]
	
	ticks=0;
   1897c:	687b      	ldr	r3, [r7, #4]
   1897e:	2200      	movs	r2, #0
   18980:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
   18982:	6878      	ldr	r0, [r7, #4]
   18984:	4b08      	ldr	r3, [pc, #32]	; (189a8 <_ZN17TimerSerial_Class4InitEv+0x34>)
   18986:	4798      	blx	r3
   18988:	4603      	mov	r3, r0
   1898a:	2b00      	cmp	r3, #0
   1898c:	bf0c      	ite	eq
   1898e:	2301      	moveq	r3, #1
   18990:	2300      	movne	r3, #0
   18992:	b2da      	uxtb	r2, r3
   18994:	687b      	ldr	r3, [r7, #4]
   18996:	709a      	strb	r2, [r3, #2]
	return isOK;
   18998:	687b      	ldr	r3, [r7, #4]
   1899a:	789b      	ldrb	r3, [r3, #2]
   1899c:	b2db      	uxtb	r3, r3
}
   1899e:	4618      	mov	r0, r3
   189a0:	3708      	adds	r7, #8
   189a2:	46bd      	mov	sp, r7
   189a4:	bd80      	pop	{r7, pc}
   189a6:	bf00      	nop
   189a8:	000189ad 	.word	0x000189ad

000189ac <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   189ac:	b580      	push	{r7, lr}
   189ae:	b084      	sub	sp, #16
   189b0:	af00      	add	r7, sp, #0
   189b2:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   189b4:	687b      	ldr	r3, [r7, #4]
   189b6:	691b      	ldr	r3, [r3, #16]
   189b8:	4618      	mov	r0, r3
   189ba:	4b04      	ldr	r3, [pc, #16]	; (189cc <_ZN17TimerSerial_Class5StartEv+0x20>)
   189bc:	4798      	blx	r3
   189be:	60f8      	str	r0, [r7, #12]
	return status;
   189c0:	68fb      	ldr	r3, [r7, #12]
	
}
   189c2:	4618      	mov	r0, r3
   189c4:	3710      	adds	r7, #16
   189c6:	46bd      	mov	sp, r7
   189c8:	bd80      	pop	{r7, pc}
   189ca:	bf00      	nop
   189cc:	00007339 	.word	0x00007339

000189d0 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   189d0:	b580      	push	{r7, lr}
   189d2:	b084      	sub	sp, #16
   189d4:	af00      	add	r7, sp, #0
   189d6:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   189d8:	687b      	ldr	r3, [r7, #4]
   189da:	691b      	ldr	r3, [r3, #16]
   189dc:	4618      	mov	r0, r3
   189de:	4b05      	ldr	r3, [pc, #20]	; (189f4 <_ZN17TimerSerial_Class4StopEv+0x24>)
   189e0:	4798      	blx	r3
   189e2:	60f8      	str	r0, [r7, #12]
	timeout=0;
   189e4:	687b      	ldr	r3, [r7, #4]
   189e6:	2200      	movs	r2, #0
   189e8:	705a      	strb	r2, [r3, #1]
	return status;
   189ea:	68fb      	ldr	r3, [r7, #12]
}
   189ec:	4618      	mov	r0, r3
   189ee:	3710      	adds	r7, #16
   189f0:	46bd      	mov	sp, r7
   189f2:	bd80      	pop	{r7, pc}
   189f4:	000073a1 	.word	0x000073a1

000189f8 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
   189f8:	b480      	push	{r7}
   189fa:	b083      	sub	sp, #12
   189fc:	af00      	add	r7, sp, #0
   189fe:	6078      	str	r0, [r7, #4]
	timeout=1;
   18a00:	687b      	ldr	r3, [r7, #4]
   18a02:	2201      	movs	r2, #1
   18a04:	705a      	strb	r2, [r3, #1]
}
   18a06:	bf00      	nop
   18a08:	370c      	adds	r7, #12
   18a0a:	46bd      	mov	sp, r7
   18a0c:	bc80      	pop	{r7}
   18a0e:	4770      	bx	lr

00018a10 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   18a10:	b580      	push	{r7, lr}
   18a12:	b086      	sub	sp, #24
   18a14:	af00      	add	r7, sp, #0
   18a16:	60f8      	str	r0, [r7, #12]
   18a18:	60b9      	str	r1, [r7, #8]
   18a1a:	607a      	str	r2, [r7, #4]
   18a1c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   18a1e:	68f8      	ldr	r0, [r7, #12]
   18a20:	4b0d      	ldr	r3, [pc, #52]	; (18a58 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   18a22:	4798      	blx	r3
	task->interval = interval;
   18a24:	68fb      	ldr	r3, [r7, #12]
   18a26:	689b      	ldr	r3, [r3, #8]
   18a28:	687a      	ldr	r2, [r7, #4]
   18a2a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   18a2c:	68fb      	ldr	r3, [r7, #12]
   18a2e:	689b      	ldr	r3, [r3, #8]
   18a30:	68ba      	ldr	r2, [r7, #8]
   18a32:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   18a34:	68fb      	ldr	r3, [r7, #12]
   18a36:	689b      	ldr	r3, [r3, #8]
   18a38:	78fa      	ldrb	r2, [r7, #3]
   18a3a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   18a3c:	68fb      	ldr	r3, [r7, #12]
   18a3e:	691a      	ldr	r2, [r3, #16]
   18a40:	68fb      	ldr	r3, [r7, #12]
   18a42:	689b      	ldr	r3, [r3, #8]
   18a44:	4619      	mov	r1, r3
   18a46:	4610      	mov	r0, r2
   18a48:	4b04      	ldr	r3, [pc, #16]	; (18a5c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   18a4a:	4798      	blx	r3
   18a4c:	6178      	str	r0, [r7, #20]
	
	return status;
   18a4e:	697b      	ldr	r3, [r7, #20]
}
   18a50:	4618      	mov	r0, r3
   18a52:	3718      	adds	r7, #24
   18a54:	46bd      	mov	sp, r7
   18a56:	bd80      	pop	{r7, pc}
   18a58:	00018b6d 	.word	0x00018b6d
   18a5c:	0000740d 	.word	0x0000740d

00018a60 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   18a60:	b590      	push	{r4, r7, lr}
   18a62:	b087      	sub	sp, #28
   18a64:	af00      	add	r7, sp, #0
   18a66:	60f8      	str	r0, [r7, #12]
   18a68:	60b9      	str	r1, [r7, #8]
   18a6a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   18a6c:	2301      	movs	r3, #1
   18a6e:	687a      	ldr	r2, [r7, #4]
   18a70:	68b9      	ldr	r1, [r7, #8]
   18a72:	68f8      	ldr	r0, [r7, #12]
   18a74:	4c03      	ldr	r4, [pc, #12]	; (18a84 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
   18a76:	47a0      	blx	r4
   18a78:	6178      	str	r0, [r7, #20]
		return status;
   18a7a:	697b      	ldr	r3, [r7, #20]
}
   18a7c:	4618      	mov	r0, r3
   18a7e:	371c      	adds	r7, #28
   18a80:	46bd      	mov	sp, r7
   18a82:	bd90      	pop	{r4, r7, pc}
   18a84:	00018a11 	.word	0x00018a11

00018a88 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   18a88:	b590      	push	{r4, r7, lr}
   18a8a:	b087      	sub	sp, #28
   18a8c:	af00      	add	r7, sp, #0
   18a8e:	60f8      	str	r0, [r7, #12]
   18a90:	60b9      	str	r1, [r7, #8]
   18a92:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   18a94:	2300      	movs	r3, #0
   18a96:	687a      	ldr	r2, [r7, #4]
   18a98:	68b9      	ldr	r1, [r7, #8]
   18a9a:	68f8      	ldr	r0, [r7, #12]
   18a9c:	4c03      	ldr	r4, [pc, #12]	; (18aac <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   18a9e:	47a0      	blx	r4
   18aa0:	6178      	str	r0, [r7, #20]
	return status;
   18aa2:	697b      	ldr	r3, [r7, #20]
}
   18aa4:	4618      	mov	r0, r3
   18aa6:	371c      	adds	r7, #28
   18aa8:	46bd      	mov	sp, r7
   18aaa:	bd90      	pop	{r4, r7, pc}
   18aac:	00018a11 	.word	0x00018a11

00018ab0 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   18ab0:	b590      	push	{r4, r7, lr}
   18ab2:	b087      	sub	sp, #28
   18ab4:	af00      	add	r7, sp, #0
   18ab6:	60f8      	str	r0, [r7, #12]
   18ab8:	60b9      	str	r1, [r7, #8]
   18aba:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   18abc:	2300      	movs	r3, #0
   18abe:	687a      	ldr	r2, [r7, #4]
   18ac0:	68b9      	ldr	r1, [r7, #8]
   18ac2:	68f8      	ldr	r0, [r7, #12]
   18ac4:	4c06      	ldr	r4, [pc, #24]	; (18ae0 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
   18ac6:	47a0      	blx	r4
   18ac8:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   18aca:	68fb      	ldr	r3, [r7, #12]
   18acc:	691b      	ldr	r3, [r3, #16]
   18ace:	4618      	mov	r0, r3
   18ad0:	4b04      	ldr	r3, [pc, #16]	; (18ae4 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
   18ad2:	4798      	blx	r3
   18ad4:	6178      	str	r0, [r7, #20]
	return status;
   18ad6:	697b      	ldr	r3, [r7, #20]
}
   18ad8:	4618      	mov	r0, r3
   18ada:	371c      	adds	r7, #28
   18adc:	46bd      	mov	sp, r7
   18ade:	bd90      	pop	{r4, r7, pc}
   18ae0:	00018a11 	.word	0x00018a11
   18ae4:	00007339 	.word	0x00007339

00018ae8 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
   18ae8:	b580      	push	{r7, lr}
   18aea:	b082      	sub	sp, #8
   18aec:	af00      	add	r7, sp, #0
   18aee:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   18af0:	687b      	ldr	r3, [r7, #4]
   18af2:	691a      	ldr	r2, [r3, #16]
   18af4:	687b      	ldr	r3, [r7, #4]
   18af6:	689b      	ldr	r3, [r3, #8]
   18af8:	4619      	mov	r1, r3
   18afa:	4610      	mov	r0, r2
   18afc:	4b04      	ldr	r3, [pc, #16]	; (18b10 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
   18afe:	4798      	blx	r3
	task->cb=NULL;
   18b00:	687b      	ldr	r3, [r7, #4]
   18b02:	689b      	ldr	r3, [r3, #8]
   18b04:	2200      	movs	r2, #0
   18b06:	60da      	str	r2, [r3, #12]
}
   18b08:	bf00      	nop
   18b0a:	3708      	adds	r7, #8
   18b0c:	46bd      	mov	sp, r7
   18b0e:	bd80      	pop	{r7, pc}
   18b10:	00007511 	.word	0x00007511

00018b14 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
   18b14:	b580      	push	{r7, lr}
   18b16:	b082      	sub	sp, #8
   18b18:	af00      	add	r7, sp, #0
   18b1a:	6078      	str	r0, [r7, #4]
   18b1c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   18b1e:	6839      	ldr	r1, [r7, #0]
   18b20:	6878      	ldr	r0, [r7, #4]
   18b22:	4b0f      	ldr	r3, [pc, #60]	; (18b60 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
   18b24:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   18b26:	687b      	ldr	r3, [r7, #4]
   18b28:	691b      	ldr	r3, [r3, #16]
   18b2a:	f103 0218 	add.w	r2, r3, #24
   18b2e:	687b      	ldr	r3, [r7, #4]
   18b30:	689b      	ldr	r3, [r3, #8]
   18b32:	4619      	mov	r1, r3
   18b34:	4610      	mov	r0, r2
   18b36:	4b0b      	ldr	r3, [pc, #44]	; (18b64 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
   18b38:	4798      	blx	r3
   18b3a:	4603      	mov	r3, r0
   18b3c:	2b00      	cmp	r3, #0
   18b3e:	d007      	beq.n	18b50 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   18b40:	687b      	ldr	r3, [r7, #4]
   18b42:	691a      	ldr	r2, [r3, #16]
   18b44:	687b      	ldr	r3, [r7, #4]
   18b46:	689b      	ldr	r3, [r3, #8]
   18b48:	4619      	mov	r1, r3
   18b4a:	4610      	mov	r0, r2
   18b4c:	4b06      	ldr	r3, [pc, #24]	; (18b68 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
   18b4e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   18b50:	687b      	ldr	r3, [r7, #4]
   18b52:	689b      	ldr	r3, [r3, #8]
   18b54:	2200      	movs	r2, #0
   18b56:	60da      	str	r2, [r3, #12]
}
   18b58:	bf00      	nop
   18b5a:	3708      	adds	r7, #8
   18b5c:	46bd      	mov	sp, r7
   18b5e:	bd80      	pop	{r7, pc}
   18b60:	00018bc5 	.word	0x00018bc5
   18b64:	000080f9 	.word	0x000080f9
   18b68:	00007511 	.word	0x00007511

00018b6c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
   18b6c:	b480      	push	{r7}
   18b6e:	b085      	sub	sp, #20
   18b70:	af00      	add	r7, sp, #0
   18b72:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   18b74:	2300      	movs	r3, #0
   18b76:	73fb      	strb	r3, [r7, #15]
   18b78:	7bfb      	ldrb	r3, [r7, #15]
   18b7a:	2b03      	cmp	r3, #3
   18b7c:	dc18      	bgt.n	18bb0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
   18b7e:	7bfa      	ldrb	r2, [r7, #15]
   18b80:	490f      	ldr	r1, [pc, #60]	; (18bc0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   18b82:	4613      	mov	r3, r2
   18b84:	009b      	lsls	r3, r3, #2
   18b86:	4413      	add	r3, r2
   18b88:	009b      	lsls	r3, r3, #2
   18b8a:	440b      	add	r3, r1
   18b8c:	330c      	adds	r3, #12
   18b8e:	681b      	ldr	r3, [r3, #0]
   18b90:	2b00      	cmp	r3, #0
   18b92:	d109      	bne.n	18ba8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
   18b94:	7bfa      	ldrb	r2, [r7, #15]
   18b96:	4613      	mov	r3, r2
   18b98:	009b      	lsls	r3, r3, #2
   18b9a:	4413      	add	r3, r2
   18b9c:	009b      	lsls	r3, r3, #2
   18b9e:	4a08      	ldr	r2, [pc, #32]	; (18bc0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   18ba0:	441a      	add	r2, r3
   18ba2:	687b      	ldr	r3, [r7, #4]
   18ba4:	609a      	str	r2, [r3, #8]
			return;
   18ba6:	e006      	b.n	18bb6 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   18ba8:	7bfb      	ldrb	r3, [r7, #15]
   18baa:	3301      	adds	r3, #1
   18bac:	73fb      	strb	r3, [r7, #15]
   18bae:	e7e3      	b.n	18b78 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
   18bb0:	687b      	ldr	r3, [r7, #4]
   18bb2:	4a03      	ldr	r2, [pc, #12]	; (18bc0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   18bb4:	609a      	str	r2, [r3, #8]

}
   18bb6:	3714      	adds	r7, #20
   18bb8:	46bd      	mov	sp, r7
   18bba:	bc80      	pop	{r7}
   18bbc:	4770      	bx	lr
   18bbe:	bf00      	nop
   18bc0:	2000a3d0 	.word	0x2000a3d0

00018bc4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
   18bc4:	b480      	push	{r7}
   18bc6:	b085      	sub	sp, #20
   18bc8:	af00      	add	r7, sp, #0
   18bca:	6078      	str	r0, [r7, #4]
   18bcc:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   18bce:	2300      	movs	r3, #0
   18bd0:	73fb      	strb	r3, [r7, #15]
   18bd2:	7bfb      	ldrb	r3, [r7, #15]
   18bd4:	2b03      	cmp	r3, #3
   18bd6:	dc19      	bgt.n	18c0c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   18bd8:	7bfa      	ldrb	r2, [r7, #15]
   18bda:	490e      	ldr	r1, [pc, #56]	; (18c14 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   18bdc:	4613      	mov	r3, r2
   18bde:	009b      	lsls	r3, r3, #2
   18be0:	4413      	add	r3, r2
   18be2:	009b      	lsls	r3, r3, #2
   18be4:	440b      	add	r3, r1
   18be6:	330c      	adds	r3, #12
   18be8:	681a      	ldr	r2, [r3, #0]
   18bea:	683b      	ldr	r3, [r7, #0]
   18bec:	429a      	cmp	r2, r3
   18bee:	d109      	bne.n	18c04 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   18bf0:	7bfa      	ldrb	r2, [r7, #15]
   18bf2:	4613      	mov	r3, r2
   18bf4:	009b      	lsls	r3, r3, #2
   18bf6:	4413      	add	r3, r2
   18bf8:	009b      	lsls	r3, r3, #2
   18bfa:	4a06      	ldr	r2, [pc, #24]	; (18c14 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   18bfc:	441a      	add	r2, r3
   18bfe:	687b      	ldr	r3, [r7, #4]
   18c00:	609a      	str	r2, [r3, #8]
			return;
   18c02:	e003      	b.n	18c0c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   18c04:	7bfb      	ldrb	r3, [r7, #15]
   18c06:	3301      	adds	r3, #1
   18c08:	73fb      	strb	r3, [r7, #15]
   18c0a:	e7e2      	b.n	18bd2 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
   18c0c:	3714      	adds	r7, #20
   18c0e:	46bd      	mov	sp, r7
   18c10:	bc80      	pop	{r7}
   18c12:	4770      	bx	lr
   18c14:	2000a3d0 	.word	0x2000a3d0

00018c18 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   18c18:	b580      	push	{r7, lr}
   18c1a:	b082      	sub	sp, #8
   18c1c:	af00      	add	r7, sp, #0
   18c1e:	6078      	str	r0, [r7, #4]
   18c20:	6039      	str	r1, [r7, #0]
   18c22:	687b      	ldr	r3, [r7, #4]
   18c24:	2b01      	cmp	r3, #1
   18c26:	d116      	bne.n	18c56 <_Z41__static_initialization_and_destruction_0ii+0x3e>
   18c28:	683b      	ldr	r3, [r7, #0]
   18c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18c2e:	4293      	cmp	r3, r2
   18c30:	d111      	bne.n	18c56 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
   18c32:	490b      	ldr	r1, [pc, #44]	; (18c60 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   18c34:	480b      	ldr	r0, [pc, #44]	; (18c64 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   18c36:	4b0c      	ldr	r3, [pc, #48]	; (18c68 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   18c38:	4798      	blx	r3
   18c3a:	4a0c      	ldr	r2, [pc, #48]	; (18c6c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   18c3c:	490c      	ldr	r1, [pc, #48]	; (18c70 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   18c3e:	4809      	ldr	r0, [pc, #36]	; (18c64 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   18c40:	4b0c      	ldr	r3, [pc, #48]	; (18c74 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   18c42:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   18c44:	490c      	ldr	r1, [pc, #48]	; (18c78 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   18c46:	480d      	ldr	r0, [pc, #52]	; (18c7c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   18c48:	4b07      	ldr	r3, [pc, #28]	; (18c68 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   18c4a:	4798      	blx	r3
   18c4c:	4a07      	ldr	r2, [pc, #28]	; (18c6c <_Z41__static_initialization_and_destruction_0ii+0x54>)
   18c4e:	4908      	ldr	r1, [pc, #32]	; (18c70 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   18c50:	480a      	ldr	r0, [pc, #40]	; (18c7c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   18c52:	4b08      	ldr	r3, [pc, #32]	; (18c74 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   18c54:	4798      	blx	r3
   18c56:	bf00      	nop
   18c58:	3708      	adds	r7, #8
   18c5a:	46bd      	mov	sp, r7
   18c5c:	bd80      	pop	{r7, pc}
   18c5e:	bf00      	nop
   18c60:	2000a83c 	.word	0x2000a83c
   18c64:	2000a420 	.word	0x2000a420
   18c68:	0001891d 	.word	0x0001891d
   18c6c:	20000000 	.word	0x20000000
   18c70:	00018959 	.word	0x00018959
   18c74:	00019d41 	.word	0x00019d41
   18c78:	2000a774 	.word	0x2000a774
   18c7c:	2000a440 	.word	0x2000a440

00018c80 <_GLOBAL__sub_I_ptrTimerSerialClass>:
   18c80:	b580      	push	{r7, lr}
   18c82:	af00      	add	r7, sp, #0
   18c84:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18c88:	2001      	movs	r0, #1
   18c8a:	4b01      	ldr	r3, [pc, #4]	; (18c90 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   18c8c:	4798      	blx	r3
   18c8e:	bd80      	pop	{r7, pc}
   18c90:	00018c19 	.word	0x00018c19

00018c94 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc>:

I2C_Asyn_Class	*ptrI2C_Asyn_Class;
//static list_descriptor i2cList=NULL;
//i2cList=NULL;
list_descriptor i2cList;
static void GetRelativeClassPointer(i2c_m_async_desc*  i2c){
   18c94:	b580      	push	{r7, lr}
   18c96:	b084      	sub	sp, #16
   18c98:	af00      	add	r7, sp, #0
   18c9a:	6078      	str	r0, [r7, #4]
	uint32_t  *ptr=(uint32_t*)ptrI2C_Asyn_Class->GetClassPointer(i2c);;
   18c9c:	4b08      	ldr	r3, [pc, #32]	; (18cc0 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   18c9e:	681b      	ldr	r3, [r3, #0]
   18ca0:	6879      	ldr	r1, [r7, #4]
   18ca2:	4618      	mov	r0, r3
   18ca4:	4b07      	ldr	r3, [pc, #28]	; (18cc4 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x30>)
   18ca6:	4798      	blx	r3
   18ca8:	4603      	mov	r3, r0
   18caa:	60fb      	str	r3, [r7, #12]
	I2C_Asyn_Class	*ptrClass=(I2C_Asyn_Class*)ptr;
   18cac:	68fb      	ldr	r3, [r7, #12]
   18cae:	60bb      	str	r3, [r7, #8]
	ptrI2C_Asyn_Class=ptrClass;
   18cb0:	4a03      	ldr	r2, [pc, #12]	; (18cc0 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   18cb2:	68bb      	ldr	r3, [r7, #8]
   18cb4:	6013      	str	r3, [r2, #0]
}
   18cb6:	bf00      	nop
   18cb8:	3710      	adds	r7, #16
   18cba:	46bd      	mov	sp, r7
   18cbc:	bd80      	pop	{r7, pc}
   18cbe:	bf00      	nop
   18cc0:	2000a560 	.word	0x2000a560
   18cc4:	000190a1 	.word	0x000190a1

00018cc8 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
   18cc8:	b580      	push	{r7, lr}
   18cca:	b082      	sub	sp, #8
   18ccc:	af00      	add	r7, sp, #0
   18cce:	6078      	str	r0, [r7, #4]
	
	GetRelativeClassPointer(i2c);
   18cd0:	6878      	ldr	r0, [r7, #4]
   18cd2:	4b05      	ldr	r3, [pc, #20]	; (18ce8 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x20>)
   18cd4:	4798      	blx	r3
	ptrI2C_Asyn_Class->txReady=true;
   18cd6:	4b05      	ldr	r3, [pc, #20]	; (18cec <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x24>)
   18cd8:	681b      	ldr	r3, [r3, #0]
   18cda:	2201      	movs	r2, #1
   18cdc:	751a      	strb	r2, [r3, #20]


}
   18cde:	bf00      	nop
   18ce0:	3708      	adds	r7, #8
   18ce2:	46bd      	mov	sp, r7
   18ce4:	bd80      	pop	{r7, pc}
   18ce6:	bf00      	nop
   18ce8:	00018c95 	.word	0x00018c95
   18cec:	2000a560 	.word	0x2000a560

00018cf0 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
   18cf0:	b580      	push	{r7, lr}
   18cf2:	b082      	sub	sp, #8
   18cf4:	af00      	add	r7, sp, #0
   18cf6:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   18cf8:	6878      	ldr	r0, [r7, #4]
   18cfa:	4b05      	ldr	r3, [pc, #20]	; (18d10 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x20>)
   18cfc:	4798      	blx	r3
	ptrI2C_Asyn_Class->rxReady=true;
   18cfe:	4b05      	ldr	r3, [pc, #20]	; (18d14 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x24>)
   18d00:	681b      	ldr	r3, [r3, #0]
   18d02:	2201      	movs	r2, #1
   18d04:	755a      	strb	r2, [r3, #21]
}
   18d06:	bf00      	nop
   18d08:	3708      	adds	r7, #8
   18d0a:	46bd      	mov	sp, r7
   18d0c:	bd80      	pop	{r7, pc}
   18d0e:	bf00      	nop
   18d10:	00018c95 	.word	0x00018c95
   18d14:	2000a560 	.word	0x2000a560

00018d18 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
   18d18:	b580      	push	{r7, lr}
   18d1a:	b082      	sub	sp, #8
   18d1c:	af00      	add	r7, sp, #0
   18d1e:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   18d20:	6878      	ldr	r0, [r7, #4]
   18d22:	4b09      	ldr	r3, [pc, #36]	; (18d48 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
   18d24:	4798      	blx	r3
		ptrI2C_Asyn_Class->Clear_ack();
   18d26:	4b09      	ldr	r3, [pc, #36]	; (18d4c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   18d28:	681b      	ldr	r3, [r3, #0]
   18d2a:	4618      	mov	r0, r3
   18d2c:	4b08      	ldr	r3, [pc, #32]	; (18d50 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x38>)
   18d2e:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
   18d30:	4b06      	ldr	r3, [pc, #24]	; (18d4c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   18d32:	681b      	ldr	r3, [r3, #0]
   18d34:	2201      	movs	r2, #1
   18d36:	751a      	strb	r2, [r3, #20]
		ptrI2C_Asyn_Class->rxReady=true;
   18d38:	4b04      	ldr	r3, [pc, #16]	; (18d4c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   18d3a:	681b      	ldr	r3, [r3, #0]
   18d3c:	2201      	movs	r2, #1
   18d3e:	755a      	strb	r2, [r3, #21]
 }
   18d40:	bf00      	nop
   18d42:	3708      	adds	r7, #8
   18d44:	46bd      	mov	sp, r7
   18d46:	bd80      	pop	{r7, pc}
   18d48:	00018c95 	.word	0x00018c95
   18d4c:	2000a560 	.word	0x2000a560
   18d50:	00018f85 	.word	0x00018f85

00018d54 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
   18d54:	b580      	push	{r7, lr}
   18d56:	b082      	sub	sp, #8
   18d58:	af00      	add	r7, sp, #0
   18d5a:	6078      	str	r0, [r7, #4]
   18d5c:	687b      	ldr	r3, [r7, #4]
   18d5e:	4618      	mov	r0, r3
   18d60:	4b06      	ldr	r3, [pc, #24]	; (18d7c <_ZN14I2C_Asyn_ClassC1Ev+0x28>)
   18d62:	4798      	blx	r3
{
	//ptrI2CAsynDescr=&I2C_EXPANDER;
	ptrClass=this;
   18d64:	687b      	ldr	r3, [r7, #4]
   18d66:	687a      	ldr	r2, [r7, #4]
   18d68:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   18d6a:	4a05      	ldr	r2, [pc, #20]	; (18d80 <_ZN14I2C_Asyn_ClassC1Ev+0x2c>)
   18d6c:	687b      	ldr	r3, [r7, #4]
   18d6e:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
   18d70:	687b      	ldr	r3, [r7, #4]
   18d72:	4618      	mov	r0, r3
   18d74:	3708      	adds	r7, #8
   18d76:	46bd      	mov	sp, r7
   18d78:	bd80      	pop	{r7, pc}
   18d7a:	bf00      	nop
   18d7c:	00018fb9 	.word	0x00018fb9
   18d80:	2000a560 	.word	0x2000a560

00018d84 <_ZN14I2C_Asyn_ClassD1Ev>:
	isOK=false;
	initiated=false;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
   18d84:	b580      	push	{r7, lr}
   18d86:	b082      	sub	sp, #8
   18d88:	af00      	add	r7, sp, #0
   18d8a:	6078      	str	r0, [r7, #4]
   18d8c:	687b      	ldr	r3, [r7, #4]
   18d8e:	4618      	mov	r0, r3
   18d90:	4b03      	ldr	r3, [pc, #12]	; (18da0 <_ZN14I2C_Asyn_ClassD1Ev+0x1c>)
   18d92:	4798      	blx	r3
{

} //~I2C_Asyn_Class
   18d94:	687b      	ldr	r3, [r7, #4]
   18d96:	4618      	mov	r0, r3
   18d98:	3708      	adds	r7, #8
   18d9a:	46bd      	mov	sp, r7
   18d9c:	bd80      	pop	{r7, pc}
   18d9e:	bf00      	nop
   18da0:	00018fd9 	.word	0x00018fd9

00018da4 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
   18da4:	b480      	push	{r7}
   18da6:	b083      	sub	sp, #12
   18da8:	af00      	add	r7, sp, #0
   18daa:	6078      	str	r0, [r7, #4]
   18dac:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
   18dae:	687b      	ldr	r3, [r7, #4]
   18db0:	683a      	ldr	r2, [r7, #0]
   18db2:	62da      	str	r2, [r3, #44]	; 0x2c
	ptrClass=this;
   18db4:	687b      	ldr	r3, [r7, #4]
   18db6:	687a      	ldr	r2, [r7, #4]
   18db8:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   18dba:	4a04      	ldr	r2, [pc, #16]	; (18dcc <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x28>)
   18dbc:	687b      	ldr	r3, [r7, #4]
   18dbe:	6013      	str	r3, [r2, #0]
}
   18dc0:	bf00      	nop
   18dc2:	370c      	adds	r7, #12
   18dc4:	46bd      	mov	sp, r7
   18dc6:	bc80      	pop	{r7}
   18dc8:	4770      	bx	lr
   18dca:	bf00      	nop
   18dcc:	2000a560 	.word	0x2000a560

00018dd0 <_ZN14I2C_Asyn_Class4InitEv>:

bool	I2C_Asyn_Class::Init(void){
   18dd0:	b580      	push	{r7, lr}
   18dd2:	b084      	sub	sp, #16
   18dd4:	af00      	add	r7, sp, #0
   18dd6:	6078      	str	r0, [r7, #4]
	txBuffer=txStaticBuffer;
   18dd8:	687b      	ldr	r3, [r7, #4]
   18dda:	4a2c      	ldr	r2, [pc, #176]	; (18e8c <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   18ddc:	621a      	str	r2, [r3, #32]
	rxBuffer=txStaticBuffer;
   18dde:	687b      	ldr	r3, [r7, #4]
   18de0:	4a2a      	ldr	r2, [pc, #168]	; (18e8c <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   18de2:	625a      	str	r2, [r3, #36]	; 0x24

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
   18de4:	687b      	ldr	r3, [r7, #4]
   18de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18de8:	687b      	ldr	r3, [r7, #4]
   18dea:	3328      	adds	r3, #40	; 0x28
   18dec:	4619      	mov	r1, r3
   18dee:	4610      	mov	r0, r2
   18df0:	4b27      	ldr	r3, [pc, #156]	; (18e90 <_ZN14I2C_Asyn_Class4InitEv+0xc0>)
   18df2:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
   18df4:	687b      	ldr	r3, [r7, #4]
   18df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18df8:	4618      	mov	r0, r3
   18dfa:	4b26      	ldr	r3, [pc, #152]	; (18e94 <_ZN14I2C_Asyn_Class4InitEv+0xc4>)
   18dfc:	4798      	blx	r3
   18dfe:	4603      	mov	r3, r0
   18e00:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
   18e02:	687b      	ldr	r3, [r7, #4]
   18e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18e06:	4a24      	ldr	r2, [pc, #144]	; (18e98 <_ZN14I2C_Asyn_Class4InitEv+0xc8>)
   18e08:	2101      	movs	r1, #1
   18e0a:	4618      	mov	r0, r3
   18e0c:	4b23      	ldr	r3, [pc, #140]	; (18e9c <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   18e0e:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
   18e10:	687b      	ldr	r3, [r7, #4]
   18e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18e14:	4a22      	ldr	r2, [pc, #136]	; (18ea0 <_ZN14I2C_Asyn_Class4InitEv+0xd0>)
   18e16:	2102      	movs	r1, #2
   18e18:	4618      	mov	r0, r3
   18e1a:	4b20      	ldr	r3, [pc, #128]	; (18e9c <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   18e1c:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
   18e1e:	687b      	ldr	r3, [r7, #4]
   18e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18e22:	4a20      	ldr	r2, [pc, #128]	; (18ea4 <_ZN14I2C_Asyn_Class4InitEv+0xd4>)
   18e24:	2100      	movs	r1, #0
   18e26:	4618      	mov	r0, r3
   18e28:	4b1c      	ldr	r3, [pc, #112]	; (18e9c <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   18e2a:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	coupleKey.ptrI2CAsynClass=(uint32_t)ptrClass;
   18e2c:	687b      	ldr	r3, [r7, #4]
   18e2e:	69db      	ldr	r3, [r3, #28]
   18e30:	461a      	mov	r2, r3
   18e32:	687b      	ldr	r3, [r7, #4]
   18e34:	641a      	str	r2, [r3, #64]	; 0x40
	coupleKey.i2cDescr=ptrI2CAsynDescr;
   18e36:	687b      	ldr	r3, [r7, #4]
   18e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18e3a:	687b      	ldr	r3, [r7, #4]
   18e3c:	63da      	str	r2, [r3, #60]	; 0x3c
	coupleKey.dummy=(uint32_t)ptrClass;
   18e3e:	687b      	ldr	r3, [r7, #4]
   18e40:	69db      	ldr	r3, [r3, #28]
   18e42:	461a      	mov	r2, r3
   18e44:	687b      	ldr	r3, [r7, #4]
   18e46:	639a      	str	r2, [r3, #56]	; 0x38
	AddI2CObject(coupleKey);
   18e48:	687a      	ldr	r2, [r7, #4]
   18e4a:	687b      	ldr	r3, [r7, #4]
   18e4c:	3334      	adds	r3, #52	; 0x34
   18e4e:	4619      	mov	r1, r3
   18e50:	4610      	mov	r0, r2
   18e52:	4b15      	ldr	r3, [pc, #84]	; (18ea8 <_ZN14I2C_Asyn_Class4InitEv+0xd8>)
   18e54:	4798      	blx	r3
	txReady=true;
   18e56:	687b      	ldr	r3, [r7, #4]
   18e58:	2201      	movs	r2, #1
   18e5a:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   18e5c:	687b      	ldr	r3, [r7, #4]
   18e5e:	2201      	movs	r2, #1
   18e60:	755a      	strb	r2, [r3, #21]
	isOK=ena==0;
   18e62:	7bfb      	ldrb	r3, [r7, #15]
   18e64:	2b00      	cmp	r3, #0
   18e66:	bf0c      	ite	eq
   18e68:	2301      	moveq	r3, #1
   18e6a:	2300      	movne	r3, #0
   18e6c:	b2da      	uxtb	r2, r3
   18e6e:	687b      	ldr	r3, [r7, #4]
   18e70:	761a      	strb	r2, [r3, #24]
	initiated=isOK;
   18e72:	687b      	ldr	r3, [r7, #4]
   18e74:	7e1b      	ldrb	r3, [r3, #24]
   18e76:	b2da      	uxtb	r2, r3
   18e78:	687b      	ldr	r3, [r7, #4]
   18e7a:	759a      	strb	r2, [r3, #22]
	return isOK;
   18e7c:	687b      	ldr	r3, [r7, #4]
   18e7e:	7e1b      	ldrb	r3, [r3, #24]
   18e80:	b2db      	uxtb	r3, r3
	
}
   18e82:	4618      	mov	r0, r3
   18e84:	3710      	adds	r7, #16
   18e86:	46bd      	mov	sp, r7
   18e88:	bd80      	pop	{r7, pc}
   18e8a:	bf00      	nop
   18e8c:	2000a460 	.word	0x2000a460
   18e90:	00006c8f 	.word	0x00006c8f
   18e94:	00006ba1 	.word	0x00006ba1
   18e98:	00018cc9 	.word	0x00018cc9
   18e9c:	00006c47 	.word	0x00006c47
   18ea0:	00018cf1 	.word	0x00018cf1
   18ea4:	00018d19 	.word	0x00018d19
   18ea8:	00018fed 	.word	0x00018fed

00018eac <_ZN14I2C_Asyn_Class4InitEh>:
bool	I2C_Asyn_Class::Init(uint8_t add){
   18eac:	b580      	push	{r7, lr}
   18eae:	b082      	sub	sp, #8
   18eb0:	af00      	add	r7, sp, #0
   18eb2:	6078      	str	r0, [r7, #4]
   18eb4:	460b      	mov	r3, r1
   18eb6:	70fb      	strb	r3, [r7, #3]
	isOK=Init();
   18eb8:	6878      	ldr	r0, [r7, #4]
   18eba:	4b0e      	ldr	r3, [pc, #56]	; (18ef4 <_ZN14I2C_Asyn_Class4InitEh+0x48>)
   18ebc:	4798      	blx	r3
   18ebe:	4603      	mov	r3, r0
   18ec0:	461a      	mov	r2, r3
   18ec2:	687b      	ldr	r3, [r7, #4]
   18ec4:	761a      	strb	r2, [r3, #24]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   18ec6:	687b      	ldr	r3, [r7, #4]
   18ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18eca:	78fa      	ldrb	r2, [r7, #3]
   18ecc:	b211      	sxth	r1, r2
   18ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18ed2:	4618      	mov	r0, r3
   18ed4:	4b08      	ldr	r3, [pc, #32]	; (18ef8 <_ZN14I2C_Asyn_Class4InitEh+0x4c>)
   18ed6:	4798      	blx	r3
	txReady=true;
   18ed8:	687b      	ldr	r3, [r7, #4]
   18eda:	2201      	movs	r2, #1
   18edc:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   18ede:	687b      	ldr	r3, [r7, #4]
   18ee0:	2201      	movs	r2, #1
   18ee2:	755a      	strb	r2, [r3, #21]
	return isOK;
   18ee4:	687b      	ldr	r3, [r7, #4]
   18ee6:	7e1b      	ldrb	r3, [r3, #24]
   18ee8:	b2db      	uxtb	r3, r3
}
   18eea:	4618      	mov	r0, r3
   18eec:	3708      	adds	r7, #8
   18eee:	46bd      	mov	sp, r7
   18ef0:	bd80      	pop	{r7, pc}
   18ef2:	bf00      	nop
   18ef4:	00018dd1 	.word	0x00018dd1
   18ef8:	00006c0d 	.word	0x00006c0d

00018efc <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
   18efc:	b580      	push	{r7, lr}
   18efe:	b084      	sub	sp, #16
   18f00:	af00      	add	r7, sp, #0
   18f02:	60f8      	str	r0, [r7, #12]
   18f04:	60b9      	str	r1, [r7, #8]
   18f06:	4613      	mov	r3, r2
   18f08:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
   18f0a:	68fb      	ldr	r3, [r7, #12]
   18f0c:	7d1b      	ldrb	r3, [r3, #20]
   18f0e:	b2db      	uxtb	r3, r3
   18f10:	f083 0301 	eor.w	r3, r3, #1
   18f14:	b2db      	uxtb	r3, r3
   18f16:	2b00      	cmp	r3, #0
   18f18:	d000      	beq.n	18f1c <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
   18f1a:	e7f6      	b.n	18f0a <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
   18f1c:	68fb      	ldr	r3, [r7, #12]
   18f1e:	2200      	movs	r2, #0
   18f20:	751a      	strb	r2, [r3, #20]
	return io_write(I2C_io, buffer, lenght);
   18f22:	68fb      	ldr	r3, [r7, #12]
   18f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18f26:	88fa      	ldrh	r2, [r7, #6]
   18f28:	68b9      	ldr	r1, [r7, #8]
   18f2a:	4618      	mov	r0, r3
   18f2c:	4b03      	ldr	r3, [pc, #12]	; (18f3c <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
   18f2e:	4798      	blx	r3
   18f30:	4603      	mov	r3, r0
}
   18f32:	4618      	mov	r0, r3
   18f34:	3710      	adds	r7, #16
   18f36:	46bd      	mov	sp, r7
   18f38:	bd80      	pop	{r7, pc}
   18f3a:	bf00      	nop
   18f3c:	00019ca1 	.word	0x00019ca1

00018f40 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
   18f40:	b580      	push	{r7, lr}
   18f42:	b084      	sub	sp, #16
   18f44:	af00      	add	r7, sp, #0
   18f46:	60f8      	str	r0, [r7, #12]
   18f48:	60b9      	str	r1, [r7, #8]
   18f4a:	4613      	mov	r3, r2
   18f4c:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
   18f4e:	68fb      	ldr	r3, [r7, #12]
   18f50:	7d5b      	ldrb	r3, [r3, #21]
   18f52:	b2db      	uxtb	r3, r3
   18f54:	f083 0301 	eor.w	r3, r3, #1
   18f58:	b2db      	uxtb	r3, r3
   18f5a:	2b00      	cmp	r3, #0
   18f5c:	d000      	beq.n	18f60 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
   18f5e:	e7f6      	b.n	18f4e <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
   18f60:	68fb      	ldr	r3, [r7, #12]
   18f62:	2200      	movs	r2, #0
   18f64:	755a      	strb	r2, [r3, #21]
		return io_read(I2C_io, buffer, lenght);
   18f66:	68fb      	ldr	r3, [r7, #12]
   18f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18f6a:	88fa      	ldrh	r2, [r7, #6]
   18f6c:	68b9      	ldr	r1, [r7, #8]
   18f6e:	4618      	mov	r0, r3
   18f70:	4b03      	ldr	r3, [pc, #12]	; (18f80 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
   18f72:	4798      	blx	r3
   18f74:	4603      	mov	r3, r0
}
   18f76:	4618      	mov	r0, r3
   18f78:	3710      	adds	r7, #16
   18f7a:	46bd      	mov	sp, r7
   18f7c:	bd80      	pop	{r7, pc}
   18f7e:	bf00      	nop
   18f80:	00019cf1 	.word	0x00019cf1

00018f84 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
   18f84:	b480      	push	{r7}
   18f86:	b083      	sub	sp, #12
   18f88:	af00      	add	r7, sp, #0
   18f8a:	6078      	str	r0, [r7, #4]
	 ack=false;
   18f8c:	687b      	ldr	r3, [r7, #4]
   18f8e:	2200      	movs	r2, #0
   18f90:	75da      	strb	r2, [r3, #23]
	 return ack;
   18f92:	687b      	ldr	r3, [r7, #4]
   18f94:	7ddb      	ldrb	r3, [r3, #23]
   18f96:	b2db      	uxtb	r3, r3
 }
   18f98:	4618      	mov	r0, r3
   18f9a:	370c      	adds	r7, #12
   18f9c:	46bd      	mov	sp, r7
   18f9e:	bc80      	pop	{r7}
   18fa0:	4770      	bx	lr

00018fa2 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
   18fa2:	b480      	push	{r7}
   18fa4:	b083      	sub	sp, #12
   18fa6:	af00      	add	r7, sp, #0
   18fa8:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
   18faa:	687b      	ldr	r3, [r7, #4]
   18fac:	681b      	ldr	r3, [r3, #0]
}
   18fae:	4618      	mov	r0, r3
   18fb0:	370c      	adds	r7, #12
   18fb2:	46bd      	mov	sp, r7
   18fb4:	bc80      	pop	{r7}
   18fb6:	4770      	bx	lr

00018fb8 <_ZN14I2C_ObjectListC1Ev>:

#include "I2C_ObjectList.h"
#include "I2C_Asyn_Class.h"

// default constructor
I2C_ObjectList::I2C_ObjectList()
   18fb8:	b480      	push	{r7}
   18fba:	b083      	sub	sp, #12
   18fbc:	af00      	add	r7, sp, #0
   18fbe:	6078      	str	r0, [r7, #4]
{
	objList=&i2cList;
   18fc0:	687b      	ldr	r3, [r7, #4]
   18fc2:	4a04      	ldr	r2, [pc, #16]	; (18fd4 <_ZN14I2C_ObjectListC1Ev+0x1c>)
   18fc4:	611a      	str	r2, [r3, #16]
} //I2C_ObjectList
   18fc6:	687b      	ldr	r3, [r7, #4]
   18fc8:	4618      	mov	r0, r3
   18fca:	370c      	adds	r7, #12
   18fcc:	46bd      	mov	sp, r7
   18fce:	bc80      	pop	{r7}
   18fd0:	4770      	bx	lr
   18fd2:	bf00      	nop
   18fd4:	2000a564 	.word	0x2000a564

00018fd8 <_ZN14I2C_ObjectListD1Ev>:

// default destructor
I2C_ObjectList::~I2C_ObjectList()
   18fd8:	b480      	push	{r7}
   18fda:	b083      	sub	sp, #12
   18fdc:	af00      	add	r7, sp, #0
   18fde:	6078      	str	r0, [r7, #4]
{
} //~I2C_ObjectList
   18fe0:	687b      	ldr	r3, [r7, #4]
   18fe2:	4618      	mov	r0, r3
   18fe4:	370c      	adds	r7, #12
   18fe6:	46bd      	mov	sp, r7
   18fe8:	bc80      	pop	{r7}
   18fea:	4770      	bx	lr

00018fec <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor>:

int I2C_ObjectList::AddI2CObject(I2CPointerAndDescriptor& ck ){
   18fec:	b580      	push	{r7, lr}
   18fee:	b082      	sub	sp, #8
   18ff0:	af00      	add	r7, sp, #0
   18ff2:	6078      	str	r0, [r7, #4]
   18ff4:	6039      	str	r1, [r7, #0]
	
		ASSERT((objList)&&(&ck));
   18ff6:	687b      	ldr	r3, [r7, #4]
   18ff8:	691b      	ldr	r3, [r3, #16]
   18ffa:	2b00      	cmp	r3, #0
   18ffc:	d004      	beq.n	19008 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   18ffe:	683b      	ldr	r3, [r7, #0]
   19000:	2b00      	cmp	r3, #0
   19002:	d001      	beq.n	19008 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   19004:	2301      	movs	r3, #1
   19006:	e000      	b.n	1900a <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1e>
   19008:	2300      	movs	r3, #0
   1900a:	2219      	movs	r2, #25
   1900c:	4910      	ldr	r1, [pc, #64]	; (19050 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   1900e:	4618      	mov	r0, r3
   19010:	4b10      	ldr	r3, [pc, #64]	; (19054 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   19012:	4798      	blx	r3
		if (is_list_element(objList,&ck)) {
   19014:	687b      	ldr	r3, [r7, #4]
   19016:	691b      	ldr	r3, [r3, #16]
   19018:	6839      	ldr	r1, [r7, #0]
   1901a:	4618      	mov	r0, r3
   1901c:	4b0e      	ldr	r3, [pc, #56]	; (19058 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x6c>)
   1901e:	4798      	blx	r3
   19020:	4603      	mov	r3, r0
   19022:	2b00      	cmp	r3, #0
   19024:	d007      	beq.n	19036 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x4a>

			ASSERT(false);
   19026:	221c      	movs	r2, #28
   19028:	4909      	ldr	r1, [pc, #36]	; (19050 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   1902a:	2000      	movs	r0, #0
   1902c:	4b09      	ldr	r3, [pc, #36]	; (19054 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   1902e:	4798      	blx	r3
			return ERR_ALREADY_INITIALIZED;
   19030:	f06f 0311 	mvn.w	r3, #17
   19034:	e007      	b.n	19046 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x5a>
		}
		AddObject(objList,&ck);
   19036:	687b      	ldr	r3, [r7, #4]
   19038:	691b      	ldr	r3, [r3, #16]
   1903a:	683a      	ldr	r2, [r7, #0]
   1903c:	4619      	mov	r1, r3
   1903e:	6878      	ldr	r0, [r7, #4]
   19040:	4b06      	ldr	r3, [pc, #24]	; (1905c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x70>)
   19042:	4798      	blx	r3
		return ERR_NONE;
   19044:	2300      	movs	r3, #0
}
   19046:	4618      	mov	r0, r3
   19048:	3708      	adds	r7, #8
   1904a:	46bd      	mov	sp, r7
   1904c:	bd80      	pop	{r7, pc}
   1904e:	bf00      	nop
   19050:	000220a0 	.word	0x000220a0
   19054:	000080d1 	.word	0x000080d1
   19058:	000080f9 	.word	0x000080f9
   1905c:	00019061 	.word	0x00019061

00019060 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor>:
		coupleKey.i2cDescr=ptrI2C;
		ck=coupleKey;
			
}

void I2C_ObjectList::AddObject(list_descriptor *list,I2CPointerAndDescriptor* nck){
   19060:	b580      	push	{r7, lr}
   19062:	b086      	sub	sp, #24
   19064:	af00      	add	r7, sp, #0
   19066:	60f8      	str	r0, [r7, #12]
   19068:	60b9      	str	r1, [r7, #8]
   1906a:	607a      	str	r2, [r7, #4]
		I2CPointerAndDescriptor *it, *head = (I2CPointerAndDescriptor *)list_get_head(list);
   1906c:	68b8      	ldr	r0, [r7, #8]
   1906e:	4b09      	ldr	r3, [pc, #36]	; (19094 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x34>)
   19070:	4798      	blx	r3
   19072:	6178      	str	r0, [r7, #20]

		if (!head) {
   19074:	697b      	ldr	r3, [r7, #20]
   19076:	2b00      	cmp	r3, #0
   19078:	d104      	bne.n	19084 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x24>
			list_insert_as_head(list, nck);
   1907a:	6879      	ldr	r1, [r7, #4]
   1907c:	68b8      	ldr	r0, [r7, #8]
   1907e:	4b06      	ldr	r3, [pc, #24]	; (19098 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x38>)
   19080:	4798      	blx	r3
			return;
   19082:	e003      	b.n	1908c <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x2c>
		}else{
			list_insert_at_end(list,nck);
   19084:	6879      	ldr	r1, [r7, #4]
   19086:	68b8      	ldr	r0, [r7, #8]
   19088:	4b04      	ldr	r3, [pc, #16]	; (1909c <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x3c>)
   1908a:	4798      	blx	r3
		}
}
   1908c:	3718      	adds	r7, #24
   1908e:	46bd      	mov	sp, r7
   19090:	bd80      	pop	{r7, pc}
   19092:	bf00      	nop
   19094:	00018fa3 	.word	0x00018fa3
   19098:	00008131 	.word	0x00008131
   1909c:	000081ad 	.word	0x000081ad

000190a0 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc>:

uint32_t I2C_ObjectList::GetClassPointer(i2c_m_async_desc*	i2cDescr){
   190a0:	b480      	push	{r7}
   190a2:	b087      	sub	sp, #28
   190a4:	af00      	add	r7, sp, #0
   190a6:	6078      	str	r0, [r7, #4]
   190a8:	6039      	str	r1, [r7, #0]
		struct list_element *it;
		//I2CPointerAndDescriptor *it;
		I2CPointerAndDescriptor *k;
		uint32_t ptr;
		for (it = objList->head; it; it = it->next) {
   190aa:	687b      	ldr	r3, [r7, #4]
   190ac:	691b      	ldr	r3, [r3, #16]
   190ae:	681b      	ldr	r3, [r3, #0]
   190b0:	617b      	str	r3, [r7, #20]
   190b2:	697b      	ldr	r3, [r7, #20]
   190b4:	2b00      	cmp	r3, #0
   190b6:	d00f      	beq.n	190d8 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x38>
			k=(I2CPointerAndDescriptor*)it;
   190b8:	697b      	ldr	r3, [r7, #20]
   190ba:	613b      	str	r3, [r7, #16]
			
			if (k->i2cDescr== i2cDescr){
   190bc:	693b      	ldr	r3, [r7, #16]
   190be:	689a      	ldr	r2, [r3, #8]
   190c0:	683b      	ldr	r3, [r7, #0]
   190c2:	429a      	cmp	r2, r3
   190c4:	d104      	bne.n	190d0 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x30>
				ptr=k->ptrI2CAsynClass;
   190c6:	693b      	ldr	r3, [r7, #16]
   190c8:	68db      	ldr	r3, [r3, #12]
   190ca:	60fb      	str	r3, [r7, #12]
				return ptr;
   190cc:	68fb      	ldr	r3, [r7, #12]
   190ce:	e004      	b.n	190da <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x3a>
		for (it = objList->head; it; it = it->next) {
   190d0:	697b      	ldr	r3, [r7, #20]
   190d2:	681b      	ldr	r3, [r3, #0]
   190d4:	617b      	str	r3, [r7, #20]
   190d6:	e7ec      	b.n	190b2 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x12>
			}
		}

		return 0;
   190d8:	2300      	movs	r3, #0
   190da:	4618      	mov	r0, r3
   190dc:	371c      	adds	r7, #28
   190de:	46bd      	mov	sp, r7
   190e0:	bc80      	pop	{r7}
   190e2:	4770      	bx	lr

000190e4 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   190e4:	b480      	push	{r7}
   190e6:	b083      	sub	sp, #12
   190e8:	af00      	add	r7, sp, #0
   190ea:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   190ec:	687b      	ldr	r3, [r7, #4]
   190ee:	4618      	mov	r0, r3
   190f0:	370c      	adds	r7, #12
   190f2:	46bd      	mov	sp, r7
   190f4:	bc80      	pop	{r7}
   190f6:	4770      	bx	lr

000190f8 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   190f8:	b480      	push	{r7}
   190fa:	b083      	sub	sp, #12
   190fc:	af00      	add	r7, sp, #0
   190fe:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   19100:	687b      	ldr	r3, [r7, #4]
   19102:	4618      	mov	r0, r3
   19104:	370c      	adds	r7, #12
   19106:	46bd      	mov	sp, r7
   19108:	bc80      	pop	{r7}
   1910a:	4770      	bx	lr

0001910c <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   1910c:	b480      	push	{r7}
   1910e:	b083      	sub	sp, #12
   19110:	af00      	add	r7, sp, #0
   19112:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   19114:	4b04      	ldr	r3, [pc, #16]	; (19128 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   19116:	681b      	ldr	r3, [r3, #0]
   19118:	2201      	movs	r2, #1
   1911a:	709a      	strb	r2, [r3, #2]
	asm("nop");
   1911c:	bf00      	nop
}
   1911e:	bf00      	nop
   19120:	370c      	adds	r7, #12
   19122:	46bd      	mov	sp, r7
   19124:	bc80      	pop	{r7}
   19126:	4770      	bx	lr
   19128:	2000a568 	.word	0x2000a568

0001912c <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   1912c:	b480      	push	{r7}
   1912e:	b083      	sub	sp, #12
   19130:	af00      	add	r7, sp, #0
   19132:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   19134:	687b      	ldr	r3, [r7, #4]
   19136:	4618      	mov	r0, r3
   19138:	370c      	adds	r7, #12
   1913a:	46bd      	mov	sp, r7
   1913c:	bc80      	pop	{r7}
   1913e:	4770      	bx	lr

00019140 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   19140:	b480      	push	{r7}
   19142:	b083      	sub	sp, #12
   19144:	af00      	add	r7, sp, #0
   19146:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   19148:	687b      	ldr	r3, [r7, #4]
   1914a:	4618      	mov	r0, r3
   1914c:	370c      	adds	r7, #12
   1914e:	46bd      	mov	sp, r7
   19150:	bc80      	pop	{r7}
   19152:	4770      	bx	lr

00019154 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   19154:	b580      	push	{r7, lr}
   19156:	b084      	sub	sp, #16
   19158:	af00      	add	r7, sp, #0
   1915a:	60f8      	str	r0, [r7, #12]
   1915c:	60b9      	str	r1, [r7, #8]
   1915e:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   19160:	4a1a      	ldr	r2, [pc, #104]	; (191cc <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x78>)
   19162:	68fb      	ldr	r3, [r7, #12]
   19164:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   19166:	68fb      	ldr	r3, [r7, #12]
   19168:	68ba      	ldr	r2, [r7, #8]
   1916a:	64da      	str	r2, [r3, #76]	; 0x4c
	spiLT=spiLite;
   1916c:	68fb      	ldr	r3, [r7, #12]
   1916e:	687a      	ldr	r2, [r7, #4]
   19170:	619a      	str	r2, [r3, #24]
	rx=spiLT->rxLiteBuffer;
   19172:	68fb      	ldr	r3, [r7, #12]
   19174:	699b      	ldr	r3, [r3, #24]
   19176:	68da      	ldr	r2, [r3, #12]
   19178:	68fb      	ldr	r3, [r7, #12]
   1917a:	625a      	str	r2, [r3, #36]	; 0x24
	tx=spiLT->txLiteBuffer;
   1917c:	68fb      	ldr	r3, [r7, #12]
   1917e:	699b      	ldr	r3, [r3, #24]
   19180:	689a      	ldr	r2, [r3, #8]
   19182:	68fb      	ldr	r3, [r7, #12]
   19184:	621a      	str	r2, [r3, #32]
	auxTimer=&hvacTimer;
   19186:	68fb      	ldr	r3, [r7, #12]
   19188:	4a11      	ldr	r2, [pc, #68]	; (191d0 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x7c>)
   1918a:	629a      	str	r2, [r3, #40]	; 0x28
	activeChannels[0]=4;
   1918c:	68fb      	ldr	r3, [r7, #12]
   1918e:	2204      	movs	r2, #4
   19190:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=8;
   19192:	68fb      	ldr	r3, [r7, #12]
   19194:	2208      	movs	r2, #8
   19196:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=15;
   19198:	68fb      	ldr	r3, [r7, #12]
   1919a:	220f      	movs	r2, #15
   1919c:	715a      	strb	r2, [r3, #5]
	delay_ms(200);
   1919e:	20c8      	movs	r0, #200	; 0xc8
   191a0:	4b0c      	ldr	r3, [pc, #48]	; (191d4 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   191a2:	4798      	blx	r3
	temperatureTimer.Init();
   191a4:	480c      	ldr	r0, [pc, #48]	; (191d8 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   191a6:	4b0d      	ldr	r3, [pc, #52]	; (191dc <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   191a8:	4798      	blx	r3
	configure_channels();
   191aa:	68f8      	ldr	r0, [r7, #12]
   191ac:	4b0c      	ldr	r3, [pc, #48]	; (191e0 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   191ae:	4798      	blx	r3
	configure_global_parameters();
   191b0:	68f8      	ldr	r0, [r7, #12]
   191b2:	4b0c      	ldr	r3, [pc, #48]	; (191e4 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   191b4:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   191b6:	68fb      	ldr	r3, [r7, #12]
   191b8:	2201      	movs	r2, #1
   191ba:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   191bc:	68f8      	ldr	r0, [r7, #12]
   191be:	4b0a      	ldr	r3, [pc, #40]	; (191e8 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   191c0:	4798      	blx	r3
   191c2:	4603      	mov	r3, r0
}
   191c4:	4618      	mov	r0, r3
   191c6:	3710      	adds	r7, #16
   191c8:	46bd      	mov	sp, r7
   191ca:	bd80      	pop	{r7, pc}
   191cc:	2000a568 	.word	0x2000a568
   191d0:	2000a310 	.word	0x2000a310
   191d4:	00006761 	.word	0x00006761
   191d8:	2000a2d8 	.word	0x2000a2d8
   191dc:	00017a7d 	.word	0x00017a7d
   191e0:	00019635 	.word	0x00019635
   191e4:	000196c5 	.word	0x000196c5
   191e8:	000196fd 	.word	0x000196fd

000191ec <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   191ec:	b590      	push	{r4, r7, lr}
   191ee:	b089      	sub	sp, #36	; 0x24
   191f0:	af02      	add	r7, sp, #8
   191f2:	60f8      	str	r0, [r7, #12]
   191f4:	60b9      	str	r1, [r7, #8]
   191f6:	603b      	str	r3, [r7, #0]
   191f8:	4613      	mov	r3, r2
   191fa:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   191fc:	79fb      	ldrb	r3, [r7, #7]
   191fe:	461a      	mov	r2, r3
   19200:	f44f 7100 	mov.w	r1, #512	; 0x200
   19204:	68f8      	ldr	r0, [r7, #12]
   19206:	4b0b      	ldr	r3, [pc, #44]	; (19234 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   19208:	4798      	blx	r3
   1920a:	4603      	mov	r3, r0
   1920c:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   1920e:	8afa      	ldrh	r2, [r7, #22]
   19210:	683b      	ldr	r3, [r7, #0]
   19212:	9300      	str	r3, [sp, #0]
   19214:	4613      	mov	r3, r2
   19216:	2202      	movs	r2, #2
   19218:	68b9      	ldr	r1, [r7, #8]
   1921a:	68f8      	ldr	r0, [r7, #12]
   1921c:	4c06      	ldr	r4, [pc, #24]	; (19238 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   1921e:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   19220:	8afb      	ldrh	r3, [r7, #22]
   19222:	79fa      	ldrb	r2, [r7, #7]
   19224:	68b9      	ldr	r1, [r7, #8]
   19226:	68f8      	ldr	r0, [r7, #12]
   19228:	4c04      	ldr	r4, [pc, #16]	; (1923c <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   1922a:	47a0      	blx	r4
}
   1922c:	bf00      	nop
   1922e:	371c      	adds	r7, #28
   19230:	46bd      	mov	sp, r7
   19232:	bd90      	pop	{r4, r7, pc}
   19234:	00019609 	.word	0x00019609
   19238:	000194c9 	.word	0x000194c9
   1923c:	0001928d 	.word	0x0001928d

00019240 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   19240:	b590      	push	{r4, r7, lr}
   19242:	b087      	sub	sp, #28
   19244:	af02      	add	r7, sp, #8
   19246:	6078      	str	r0, [r7, #4]
   19248:	460b      	mov	r3, r1
   1924a:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   1924c:	78fb      	ldrb	r3, [r7, #3]
   1924e:	687a      	ldr	r2, [r7, #4]
   19250:	4413      	add	r3, r2
   19252:	78db      	ldrb	r3, [r3, #3]
   19254:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   19256:	687b      	ldr	r3, [r7, #4]
   19258:	2200      	movs	r2, #0
   1925a:	705a      	strb	r2, [r3, #1]
	ready=false;
   1925c:	687b      	ldr	r3, [r7, #4]
   1925e:	2200      	movs	r2, #0
   19260:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   19262:	687b      	ldr	r3, [r7, #4]
   19264:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   19266:	7bfb      	ldrb	r3, [r7, #15]
   19268:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1926c:	b2db      	uxtb	r3, r3
   1926e:	9300      	str	r3, [sp, #0]
   19270:	2300      	movs	r3, #0
   19272:	2202      	movs	r2, #2
   19274:	6878      	ldr	r0, [r7, #4]
   19276:	4c04      	ldr	r4, [pc, #16]	; (19288 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   19278:	47a0      	blx	r4
	channelOnProcess=channel_number;
   1927a:	687b      	ldr	r3, [r7, #4]
   1927c:	7bfa      	ldrb	r2, [r7, #15]
   1927e:	71da      	strb	r2, [r3, #7]
	//wait_for_process_to_finish(chip_select);
}
   19280:	bf00      	nop
   19282:	3714      	adds	r7, #20
   19284:	46bd      	mov	sp, r7
   19286:	bd90      	pop	{r4, r7, pc}
   19288:	00019599 	.word	0x00019599

0001928c <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   1928c:	b590      	push	{r4, r7, lr}
   1928e:	b089      	sub	sp, #36	; 0x24
   19290:	af02      	add	r7, sp, #8
   19292:	60f8      	str	r0, [r7, #12]
   19294:	60b9      	str	r1, [r7, #8]
   19296:	4611      	mov	r1, r2
   19298:	461a      	mov	r2, r3
   1929a:	460b      	mov	r3, r1
   1929c:	71fb      	strb	r3, [r7, #7]
   1929e:	4613      	mov	r3, r2
   192a0:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   192a2:	88ba      	ldrh	r2, [r7, #4]
   192a4:	2300      	movs	r3, #0
   192a6:	9300      	str	r3, [sp, #0]
   192a8:	4613      	mov	r3, r2
   192aa:	2203      	movs	r2, #3
   192ac:	68b9      	ldr	r1, [r7, #8]
   192ae:	68f8      	ldr	r0, [r7, #12]
   192b0:	4c0c      	ldr	r4, [pc, #48]	; (192e4 <_ZN13LTC2983_Class20print_config_channelEmht+0x58>)
   192b2:	47a0      	blx	r4
   192b4:	6178      	str	r0, [r7, #20]

	usb.print(F("\nChannel Config "));
   192b6:	490c      	ldr	r1, [pc, #48]	; (192e8 <_ZN13LTC2983_Class20print_config_channelEmht+0x5c>)
   192b8:	480c      	ldr	r0, [pc, #48]	; (192ec <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   192ba:	4b0d      	ldr	r3, [pc, #52]	; (192f0 <_ZN13LTC2983_Class20print_config_channelEmht+0x64>)
   192bc:	4798      	blx	r3
	usb.println(channel_number);
   192be:	79fb      	ldrb	r3, [r7, #7]
   192c0:	220a      	movs	r2, #10
   192c2:	4619      	mov	r1, r3
   192c4:	4809      	ldr	r0, [pc, #36]	; (192ec <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   192c6:	4b0b      	ldr	r3, [pc, #44]	; (192f4 <_ZN13LTC2983_Class20print_config_channelEmht+0x68>)
   192c8:	4798      	blx	r3

	// 24 LSB's are conversion result
	
	usb<<"register value: ";
   192ca:	490b      	ldr	r1, [pc, #44]	; (192f8 <_ZN13LTC2983_Class20print_config_channelEmht+0x6c>)
   192cc:	4807      	ldr	r0, [pc, #28]	; (192ec <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   192ce:	4b0b      	ldr	r3, [pc, #44]	; (192fc <_ZN13LTC2983_Class20print_config_channelEmht+0x70>)
   192d0:	4798      	blx	r3
	usb.println(raw_data,HEX);
   192d2:	2210      	movs	r2, #16
   192d4:	6979      	ldr	r1, [r7, #20]
   192d6:	4805      	ldr	r0, [pc, #20]	; (192ec <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   192d8:	4b09      	ldr	r3, [pc, #36]	; (19300 <_ZN13LTC2983_Class20print_config_channelEmht+0x74>)
   192da:	4798      	blx	r3
	
}
   192dc:	bf00      	nop
   192de:	371c      	adds	r7, #28
   192e0:	46bd      	mov	sp, r7
   192e2:	bd90      	pop	{r4, r7, pc}
   192e4:	000194c9 	.word	0x000194c9
   192e8:	00022294 	.word	0x00022294
   192ec:	2000a368 	.word	0x2000a368
   192f0:	00018469 	.word	0x00018469
   192f4:	000185a1 	.word	0x000185a1
   192f8:	000222a8 	.word	0x000222a8
   192fc:	000197f9 	.word	0x000197f9
   19300:	000185dd 	.word	0x000185dd

00019304 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   19304:	b590      	push	{r4, r7, lr}
   19306:	b085      	sub	sp, #20
   19308:	af02      	add	r7, sp, #8
   1930a:	6078      	str	r0, [r7, #4]
   1930c:	460b      	mov	r3, r1
   1930e:	70fb      	strb	r3, [r7, #3]
   19310:	4613      	mov	r3, r2
   19312:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   19314:	78fb      	ldrb	r3, [r7, #3]
   19316:	461a      	mov	r2, r3
   19318:	2110      	movs	r1, #16
   1931a:	6878      	ldr	r0, [r7, #4]
   1931c:	4b17      	ldr	r3, [pc, #92]	; (1937c <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   1931e:	4798      	blx	r3
   19320:	4603      	mov	r3, r0
   19322:	461a      	mov	r2, r3
   19324:	687b      	ldr	r3, [r7, #4]
   19326:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   1932a:	687b      	ldr	r3, [r7, #4]
   1932c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1932e:	687b      	ldr	r3, [r7, #4]
   19330:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
   19334:	2300      	movs	r3, #0
   19336:	9300      	str	r3, [sp, #0]
   19338:	4613      	mov	r3, r2
   1933a:	2203      	movs	r2, #3
   1933c:	6878      	ldr	r0, [r7, #4]
   1933e:	4c10      	ldr	r4, [pc, #64]	; (19380 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   19340:	47a0      	blx	r4
   19342:	4602      	mov	r2, r0
   19344:	687b      	ldr	r3, [r7, #4]
   19346:	649a      	str	r2, [r3, #72]	; 0x48


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   19348:	687b      	ldr	r3, [r7, #4]
   1934a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1934c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   19350:	687b      	ldr	r3, [r7, #4]
   19352:	645a      	str	r2, [r3, #68]	; 0x44
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   19354:	687b      	ldr	r3, [r7, #4]
   19356:	6c59      	ldr	r1, [r3, #68]	; 0x44
   19358:	78bb      	ldrb	r3, [r7, #2]
   1935a:	78fa      	ldrb	r2, [r7, #3]
   1935c:	6878      	ldr	r0, [r7, #4]
   1935e:	4c09      	ldr	r4, [pc, #36]	; (19384 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   19360:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   19362:	687b      	ldr	r3, [r7, #4]
   19364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19366:	0e1b      	lsrs	r3, r3, #24
   19368:	b2da      	uxtb	r2, r3
   1936a:	687b      	ldr	r3, [r7, #4]
   1936c:	719a      	strb	r2, [r3, #6]
	return scaled_result;
   1936e:	687b      	ldr	r3, [r7, #4]
   19370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
   19372:	4618      	mov	r0, r3
   19374:	370c      	adds	r7, #12
   19376:	46bd      	mov	sp, r7
   19378:	bd90      	pop	{r4, r7, pc}
   1937a:	bf00      	nop
   1937c:	00019609 	.word	0x00019609
   19380:	000194c9 	.word	0x000194c9
   19384:	000193dd 	.word	0x000193dd

00019388 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   19388:	b580      	push	{r7, lr}
   1938a:	b082      	sub	sp, #8
   1938c:	af00      	add	r7, sp, #0
   1938e:	6078      	str	r0, [r7, #4]
   19390:	460b      	mov	r3, r1
   19392:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   19394:	78fb      	ldrb	r3, [r7, #3]
   19396:	687a      	ldr	r2, [r7, #4]
   19398:	4413      	add	r3, r2
   1939a:	78db      	ldrb	r3, [r3, #3]
   1939c:	4619      	mov	r1, r3
   1939e:	6878      	ldr	r0, [r7, #4]
   193a0:	4b03      	ldr	r3, [pc, #12]	; (193b0 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   193a2:	4798      	blx	r3
   193a4:	4603      	mov	r3, r0
}
   193a6:	4618      	mov	r0, r3
   193a8:	3708      	adds	r7, #8
   193aa:	46bd      	mov	sp, r7
   193ac:	bd80      	pop	{r7, pc}
   193ae:	bf00      	nop
   193b0:	000193b5 	.word	0x000193b5

000193b4 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   193b4:	b580      	push	{r7, lr}
   193b6:	b082      	sub	sp, #8
   193b8:	af00      	add	r7, sp, #0
   193ba:	6078      	str	r0, [r7, #4]
   193bc:	460b      	mov	r3, r1
   193be:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   193c0:	78fb      	ldrb	r3, [r7, #3]
   193c2:	2202      	movs	r2, #2
   193c4:	4619      	mov	r1, r3
   193c6:	6878      	ldr	r0, [r7, #4]
   193c8:	4b03      	ldr	r3, [pc, #12]	; (193d8 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   193ca:	4798      	blx	r3
   193cc:	4603      	mov	r3, r0
}
   193ce:	4618      	mov	r0, r3
   193d0:	3708      	adds	r7, #8
   193d2:	46bd      	mov	sp, r7
   193d4:	bd80      	pop	{r7, pc}
   193d6:	bf00      	nop
   193d8:	00019305 	.word	0x00019305

000193dc <_ZN13LTC2983_Class13ConvertResultEmhh>:
		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   193dc:	b580      	push	{r7, lr}
   193de:	b084      	sub	sp, #16
   193e0:	af00      	add	r7, sp, #0
   193e2:	60f8      	str	r0, [r7, #12]
   193e4:	60b9      	str	r1, [r7, #8]
   193e6:	4611      	mov	r1, r2
   193e8:	461a      	mov	r2, r3
   193ea:	460b      	mov	r3, r1
   193ec:	71fb      	strb	r3, [r7, #7]
   193ee:	4613      	mov	r3, r2
   193f0:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   193f2:	68ba      	ldr	r2, [r7, #8]
   193f4:	68fb      	ldr	r3, [r7, #12]
   193f6:	655a      	str	r2, [r3, #84]	; 0x54
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   193f8:	68fb      	ldr	r3, [r7, #12]
   193fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   193fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   19400:	2b00      	cmp	r3, #0
   19402:	d006      	beq.n	19412 <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   19404:	68fb      	ldr	r3, [r7, #12]
   19406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   19408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1940c:	461a      	mov	r2, r3
   1940e:	68fb      	ldr	r3, [r7, #12]
   19410:	655a      	str	r2, [r3, #84]	; 0x54

	// Translate and print result
	if (channel_output == TEMPERATURE)
   19412:	79bb      	ldrb	r3, [r7, #6]
   19414:	2b02      	cmp	r3, #2
   19416:	d11c      	bne.n	19452 <_ZN13LTC2983_Class13ConvertResultEmhh+0x76>
	{
		scaled_result= float(signed_data) / 1024;
   19418:	68fb      	ldr	r3, [r7, #12]
   1941a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1941c:	4b18      	ldr	r3, [pc, #96]	; (19480 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   1941e:	4610      	mov	r0, r2
   19420:	4798      	blx	r3
   19422:	4602      	mov	r2, r0
   19424:	4b17      	ldr	r3, [pc, #92]	; (19484 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   19426:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   1942a:	4610      	mov	r0, r2
   1942c:	4798      	blx	r3
   1942e:	4603      	mov	r3, r0
   19430:	461a      	mov	r2, r3
   19432:	68fb      	ldr	r3, [r7, #12]
   19434:	651a      	str	r2, [r3, #80]	; 0x50
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   19436:	79fb      	ldrb	r3, [r7, #7]
   19438:	4619      	mov	r1, r3
   1943a:	68f8      	ldr	r0, [r7, #12]
   1943c:	4b12      	ldr	r3, [pc, #72]	; (19488 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   1943e:	4798      	blx	r3
   19440:	4603      	mov	r3, r0
   19442:	461a      	mov	r2, r3
   19444:	68fb      	ldr	r3, [r7, #12]
   19446:	6d19      	ldr	r1, [r3, #80]	; 0x50
   19448:	68fb      	ldr	r3, [r7, #12]
   1944a:	3202      	adds	r2, #2
   1944c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   19450:	e011      	b.n	19476 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
	else if (channel_output == VOLTAGE)
   19452:	79bb      	ldrb	r3, [r7, #6]
   19454:	2b01      	cmp	r3, #1
   19456:	d10e      	bne.n	19476 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
		scaled_result = float(signed_data) / 2097152;
   19458:	68fb      	ldr	r3, [r7, #12]
   1945a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1945c:	4b08      	ldr	r3, [pc, #32]	; (19480 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   1945e:	4610      	mov	r0, r2
   19460:	4798      	blx	r3
   19462:	4602      	mov	r2, r0
   19464:	4b07      	ldr	r3, [pc, #28]	; (19484 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   19466:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   1946a:	4610      	mov	r0, r2
   1946c:	4798      	blx	r3
   1946e:	4603      	mov	r3, r0
   19470:	461a      	mov	r2, r3
   19472:	68fb      	ldr	r3, [r7, #12]
   19474:	651a      	str	r2, [r3, #80]	; 0x50
}
   19476:	bf00      	nop
   19478:	3710      	adds	r7, #16
   1947a:	46bd      	mov	sp, r7
   1947c:	bd80      	pop	{r7, pc}
   1947e:	bf00      	nop
   19480:	0001ba39 	.word	0x0001ba39
   19484:	0001bc49 	.word	0x0001bc49
   19488:	0001948d 	.word	0x0001948d

0001948c <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   1948c:	b480      	push	{r7}
   1948e:	b085      	sub	sp, #20
   19490:	af00      	add	r7, sp, #0
   19492:	6078      	str	r0, [r7, #4]
   19494:	460b      	mov	r3, r1
   19496:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   19498:	2300      	movs	r3, #0
   1949a:	73fb      	strb	r3, [r7, #15]
   1949c:	7bfb      	ldrb	r3, [r7, #15]
   1949e:	2b02      	cmp	r3, #2
   194a0:	dc0c      	bgt.n	194bc <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   194a2:	7bfb      	ldrb	r3, [r7, #15]
   194a4:	687a      	ldr	r2, [r7, #4]
   194a6:	4413      	add	r3, r2
   194a8:	78db      	ldrb	r3, [r3, #3]
   194aa:	78fa      	ldrb	r2, [r7, #3]
   194ac:	429a      	cmp	r2, r3
   194ae:	d101      	bne.n	194b4 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   194b0:	7bfb      	ldrb	r3, [r7, #15]
   194b2:	e004      	b.n	194be <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   194b4:	7bfb      	ldrb	r3, [r7, #15]
   194b6:	3301      	adds	r3, #1
   194b8:	73fb      	strb	r3, [r7, #15]
   194ba:	e7ef      	b.n	1949c <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   194bc:	2300      	movs	r3, #0
}
   194be:	4618      	mov	r0, r3
   194c0:	3714      	adds	r7, #20
   194c2:	46bd      	mov	sp, r7
   194c4:	bc80      	pop	{r7}
   194c6:	4770      	bx	lr

000194c8 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   194c8:	b590      	push	{r4, r7, lr}
   194ca:	b089      	sub	sp, #36	; 0x24
   194cc:	af02      	add	r7, sp, #8
   194ce:	60f8      	str	r0, [r7, #12]
   194d0:	60b9      	str	r1, [r7, #8]
   194d2:	4611      	mov	r1, r2
   194d4:	461a      	mov	r2, r3
   194d6:	460b      	mov	r3, r1
   194d8:	71fb      	strb	r3, [r7, #7]
   194da:	4613      	mov	r3, r2
   194dc:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   194de:	2300      	movs	r3, #0
   194e0:	75fb      	strb	r3, [r7, #23]
   194e2:	7dfb      	ldrb	r3, [r7, #23]
   194e4:	2b06      	cmp	r3, #6
   194e6:	dc09      	bgt.n	194fc <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   194e8:	68fb      	ldr	r3, [r7, #12]
   194ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   194ec:	7dfb      	ldrb	r3, [r7, #23]
   194ee:	4413      	add	r3, r2
   194f0:	2200      	movs	r2, #0
   194f2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   194f4:	7dfb      	ldrb	r3, [r7, #23]
   194f6:	3301      	adds	r3, #1
   194f8:	75fb      	strb	r3, [r7, #23]
   194fa:	e7f2      	b.n	194e2 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   194fc:	68fb      	ldr	r3, [r7, #12]
   194fe:	6a1b      	ldr	r3, [r3, #32]
   19500:	79fa      	ldrb	r2, [r7, #7]
   19502:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   19504:	68fb      	ldr	r3, [r7, #12]
   19506:	6a1b      	ldr	r3, [r3, #32]
   19508:	3301      	adds	r3, #1
   1950a:	88ba      	ldrh	r2, [r7, #4]
   1950c:	1212      	asrs	r2, r2, #8
   1950e:	b2d2      	uxtb	r2, r2
   19510:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   19512:	68fb      	ldr	r3, [r7, #12]
   19514:	6a1b      	ldr	r3, [r3, #32]
   19516:	3302      	adds	r3, #2
   19518:	88ba      	ldrh	r2, [r7, #4]
   1951a:	b2d2      	uxtb	r2, r2
   1951c:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   1951e:	68fb      	ldr	r3, [r7, #12]
   19520:	6a1b      	ldr	r3, [r3, #32]
   19522:	3303      	adds	r3, #3
   19524:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19526:	0e12      	lsrs	r2, r2, #24
   19528:	b2d2      	uxtb	r2, r2
   1952a:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   1952c:	68fb      	ldr	r3, [r7, #12]
   1952e:	6a1b      	ldr	r3, [r3, #32]
   19530:	3304      	adds	r3, #4
   19532:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19534:	0c12      	lsrs	r2, r2, #16
   19536:	b2d2      	uxtb	r2, r2
   19538:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   1953a:	68fb      	ldr	r3, [r7, #12]
   1953c:	6a1b      	ldr	r3, [r3, #32]
   1953e:	3305      	adds	r3, #5
   19540:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19542:	0a12      	lsrs	r2, r2, #8
   19544:	b2d2      	uxtb	r2, r2
   19546:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   19548:	68fb      	ldr	r3, [r7, #12]
   1954a:	6a1b      	ldr	r3, [r3, #32]
   1954c:	3306      	adds	r3, #6
   1954e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19550:	b2d2      	uxtb	r2, r2
   19552:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   19554:	68fb      	ldr	r3, [r7, #12]
   19556:	6998      	ldr	r0, [r3, #24]
   19558:	68fb      	ldr	r3, [r7, #12]
   1955a:	6a1a      	ldr	r2, [r3, #32]
   1955c:	f107 0110 	add.w	r1, r7, #16
   19560:	2307      	movs	r3, #7
   19562:	9300      	str	r3, [sp, #0]
   19564:	460b      	mov	r3, r1
   19566:	68b9      	ldr	r1, [r7, #8]
   19568:	4c0a      	ldr	r4, [pc, #40]	; (19594 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   1956a:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   1956c:	7c3b      	ldrb	r3, [r7, #16]
   1956e:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   19570:	7c7b      	ldrb	r3, [r7, #17]
   19572:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   19574:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   19576:	7cbb      	ldrb	r3, [r7, #18]
   19578:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   1957a:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   1957c:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   1957e:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   19580:	68fb      	ldr	r3, [r7, #12]
   19582:	61da      	str	r2, [r3, #28]
	asm("nop");
   19584:	bf00      	nop
	return output_data;
   19586:	68fb      	ldr	r3, [r7, #12]
   19588:	69db      	ldr	r3, [r3, #28]
}
   1958a:	4618      	mov	r0, r3
   1958c:	371c      	adds	r7, #28
   1958e:	46bd      	mov	sp, r7
   19590:	bd90      	pop	{r4, r7, pc}
   19592:	bf00      	nop
   19594:	0001999d 	.word	0x0001999d

00019598 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   19598:	b590      	push	{r4, r7, lr}
   1959a:	b087      	sub	sp, #28
   1959c:	af02      	add	r7, sp, #8
   1959e:	60f8      	str	r0, [r7, #12]
   195a0:	60b9      	str	r1, [r7, #8]
   195a2:	4611      	mov	r1, r2
   195a4:	461a      	mov	r2, r3
   195a6:	460b      	mov	r3, r1
   195a8:	71fb      	strb	r3, [r7, #7]
   195aa:	4613      	mov	r3, r2
   195ac:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   195ae:	68fb      	ldr	r3, [r7, #12]
   195b0:	6a1b      	ldr	r3, [r3, #32]
   195b2:	79fa      	ldrb	r2, [r7, #7]
   195b4:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   195b6:	68fb      	ldr	r3, [r7, #12]
   195b8:	6a1b      	ldr	r3, [r3, #32]
   195ba:	3301      	adds	r3, #1
   195bc:	88ba      	ldrh	r2, [r7, #4]
   195be:	1212      	asrs	r2, r2, #8
   195c0:	b2d2      	uxtb	r2, r2
   195c2:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   195c4:	68fb      	ldr	r3, [r7, #12]
   195c6:	6a1b      	ldr	r3, [r3, #32]
   195c8:	3302      	adds	r3, #2
   195ca:	88ba      	ldrh	r2, [r7, #4]
   195cc:	b2d2      	uxtb	r2, r2
   195ce:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   195d0:	68fb      	ldr	r3, [r7, #12]
   195d2:	6a1b      	ldr	r3, [r3, #32]
   195d4:	3303      	adds	r3, #3
   195d6:	f897 2020 	ldrb.w	r2, [r7, #32]
   195da:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   195dc:	68fb      	ldr	r3, [r7, #12]
   195de:	6998      	ldr	r0, [r3, #24]
   195e0:	68fb      	ldr	r3, [r7, #12]
   195e2:	6a1a      	ldr	r2, [r3, #32]
   195e4:	68fb      	ldr	r3, [r7, #12]
   195e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
   195e8:	2304      	movs	r3, #4
   195ea:	9300      	str	r3, [sp, #0]
   195ec:	460b      	mov	r3, r1
   195ee:	68b9      	ldr	r1, [r7, #8]
   195f0:	4c04      	ldr	r4, [pc, #16]	; (19604 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   195f2:	47a0      	blx	r4
	return rx[0];
   195f4:	68fb      	ldr	r3, [r7, #12]
   195f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   195f8:	781b      	ldrb	r3, [r3, #0]
}
   195fa:	4618      	mov	r0, r3
   195fc:	3714      	adds	r7, #20
   195fe:	46bd      	mov	sp, r7
   19600:	bd90      	pop	{r4, r7, pc}
   19602:	bf00      	nop
   19604:	0001999d 	.word	0x0001999d

00019608 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   19608:	b480      	push	{r7}
   1960a:	b083      	sub	sp, #12
   1960c:	af00      	add	r7, sp, #0
   1960e:	6078      	str	r0, [r7, #4]
   19610:	460b      	mov	r3, r1
   19612:	807b      	strh	r3, [r7, #2]
   19614:	4613      	mov	r3, r2
   19616:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   19618:	787b      	ldrb	r3, [r7, #1]
   1961a:	3b01      	subs	r3, #1
   1961c:	b29b      	uxth	r3, r3
   1961e:	009b      	lsls	r3, r3, #2
   19620:	b29a      	uxth	r2, r3
   19622:	887b      	ldrh	r3, [r7, #2]
   19624:	4413      	add	r3, r2
   19626:	b29b      	uxth	r3, r3
}
   19628:	4618      	mov	r0, r3
   1962a:	370c      	adds	r7, #12
   1962c:	46bd      	mov	sp, r7
   1962e:	bc80      	pop	{r7}
   19630:	4770      	bx	lr
	...

00019634 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   19634:	b590      	push	{r4, r7, lr}
   19636:	b085      	sub	sp, #20
   19638:	af00      	add	r7, sp, #0
   1963a:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	// ----- Channel 2: Assign Sense Resistor -----
	channel_assignment_data =
   1963c:	4b1c      	ldr	r3, [pc, #112]	; (196b0 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   1963e:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 2, channel_assignment_data);
   19640:	687b      	ldr	r3, [r7, #4]
   19642:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   19644:	68fb      	ldr	r3, [r7, #12]
   19646:	2202      	movs	r2, #2
   19648:	6878      	ldr	r0, [r7, #4]
   1964a:	4c1a      	ldr	r4, [pc, #104]	; (196b4 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   1964c:	47a0      	blx	r4
	// ----- Channel 4: Assign RTD PT-100 -----
	channel_assignment_data =
   1964e:	4b1a      	ldr	r3, [pc, #104]	; (196b8 <_ZN13LTC2983_Class18configure_channelsEv+0x84>)
   19650:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__2 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 4, channel_assignment_data);
   19652:	687b      	ldr	r3, [r7, #4]
   19654:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   19656:	68fb      	ldr	r3, [r7, #12]
   19658:	2204      	movs	r2, #4
   1965a:	6878      	ldr	r0, [r7, #4]
   1965c:	4c15      	ldr	r4, [pc, #84]	; (196b4 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   1965e:	47a0      	blx	r4
	// ----- Channel 6: Assign Sense Resistor -----
	channel_assignment_data =
   19660:	4b13      	ldr	r3, [pc, #76]	; (196b0 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   19662:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 6, channel_assignment_data);
   19664:	687b      	ldr	r3, [r7, #4]
   19666:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   19668:	68fb      	ldr	r3, [r7, #12]
   1966a:	2206      	movs	r2, #6
   1966c:	6878      	ldr	r0, [r7, #4]
   1966e:	4c11      	ldr	r4, [pc, #68]	; (196b4 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   19670:	47a0      	blx	r4
	// ----- Channel 8: Assign RTD PT-100 -----
	channel_assignment_data =
   19672:	4b12      	ldr	r3, [pc, #72]	; (196bc <_ZN13LTC2983_Class18configure_channelsEv+0x88>)
   19674:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__6 |
	RTD_NUM_WIRES__4_WIRE |
	RTD_EXCITATION_MODE__ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 8, channel_assignment_data);
   19676:	687b      	ldr	r3, [r7, #4]
   19678:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1967a:	68fb      	ldr	r3, [r7, #12]
   1967c:	2208      	movs	r2, #8
   1967e:	6878      	ldr	r0, [r7, #4]
   19680:	4c0c      	ldr	r4, [pc, #48]	; (196b4 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   19682:	47a0      	blx	r4
	// ----- Channel 13: Assign Sense Resistor -----
	channel_assignment_data =
   19684:	4b0a      	ldr	r3, [pc, #40]	; (196b0 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   19686:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 13, channel_assignment_data);
   19688:	687b      	ldr	r3, [r7, #4]
   1968a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1968c:	68fb      	ldr	r3, [r7, #12]
   1968e:	220d      	movs	r2, #13
   19690:	6878      	ldr	r0, [r7, #4]
   19692:	4c08      	ldr	r4, [pc, #32]	; (196b4 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   19694:	47a0      	blx	r4
	// ----- Channel 15: Assign RTD PT-100 -----
	channel_assignment_data =
   19696:	4b0a      	ldr	r3, [pc, #40]	; (196c0 <_ZN13LTC2983_Class18configure_channelsEv+0x8c>)
   19698:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__13 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 15, channel_assignment_data);
   1969a:	687b      	ldr	r3, [r7, #4]
   1969c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1969e:	68fb      	ldr	r3, [r7, #12]
   196a0:	220f      	movs	r2, #15
   196a2:	6878      	ldr	r0, [r7, #4]
   196a4:	4c03      	ldr	r4, [pc, #12]	; (196b4 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   196a6:	47a0      	blx	r4

}
   196a8:	bf00      	nop
   196aa:	3714      	adds	r7, #20
   196ac:	46bd      	mov	sp, r7
   196ae:	bd90      	pop	{r4, r7, pc}
   196b0:	e89c4000 	.word	0xe89c4000
   196b4:	000191ed 	.word	0x000191ed
   196b8:	60851000 	.word	0x60851000
   196bc:	61a91000 	.word	0x61a91000
   196c0:	63451000 	.word	0x63451000

000196c4 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   196c4:	b590      	push	{r4, r7, lr}
   196c6:	b085      	sub	sp, #20
   196c8:	af02      	add	r7, sp, #8
   196ca:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   196cc:	687b      	ldr	r3, [r7, #4]
   196ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	REJECTION__50_60_HZ);
   196d0:	2300      	movs	r3, #0
   196d2:	9300      	str	r3, [sp, #0]
   196d4:	23f0      	movs	r3, #240	; 0xf0
   196d6:	2202      	movs	r2, #2
   196d8:	6878      	ldr	r0, [r7, #4]
   196da:	4c07      	ldr	r4, [pc, #28]	; (196f8 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   196dc:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   196de:	687b      	ldr	r3, [r7, #4]
   196e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   196e2:	2300      	movs	r3, #0
   196e4:	9300      	str	r3, [sp, #0]
   196e6:	23ff      	movs	r3, #255	; 0xff
   196e8:	2202      	movs	r2, #2
   196ea:	6878      	ldr	r0, [r7, #4]
   196ec:	4c02      	ldr	r4, [pc, #8]	; (196f8 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   196ee:	47a0      	blx	r4
}
   196f0:	bf00      	nop
   196f2:	370c      	adds	r7, #12
   196f4:	46bd      	mov	sp, r7
   196f6:	bd90      	pop	{r4, r7, pc}
   196f8:	00019599 	.word	0x00019599

000196fc <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   196fc:	b580      	push	{r7, lr}
   196fe:	b082      	sub	sp, #8
   19700:	af00      	add	r7, sp, #0
   19702:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   19704:	687b      	ldr	r3, [r7, #4]
   19706:	2200      	movs	r2, #0
   19708:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	meassureTimeout=false;
   1970c:	687b      	ldr	r3, [r7, #4]
   1970e:	2200      	movs	r2, #0
   19710:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   19712:	4a31      	ldr	r2, [pc, #196]	; (197d8 <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   19714:	687b      	ldr	r3, [r7, #4]
   19716:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   19718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1971c:	492f      	ldr	r1, [pc, #188]	; (197dc <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   1971e:	4830      	ldr	r0, [pc, #192]	; (197e0 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   19720:	4b30      	ldr	r3, [pc, #192]	; (197e4 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   19722:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   19724:	687b      	ldr	r3, [r7, #4]
   19726:	799b      	ldrb	r3, [r3, #6]
   19728:	2b01      	cmp	r3, #1
   1972a:	d009      	beq.n	19740 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   1972c:	687b      	ldr	r3, [r7, #4]
   1972e:	789b      	ldrb	r3, [r3, #2]
   19730:	b2db      	uxtb	r3, r3
   19732:	f083 0301 	eor.w	r3, r3, #1
   19736:	b2db      	uxtb	r3, r3
   19738:	2b00      	cmp	r3, #0
   1973a:	d001      	beq.n	19740 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   1973c:	2301      	movs	r3, #1
   1973e:	e000      	b.n	19742 <_ZN13LTC2983_Class8SelfTestEv+0x46>
   19740:	2300      	movs	r3, #0
   19742:	2b00      	cmp	r3, #0
   19744:	d034      	beq.n	197b0 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   19746:	2100      	movs	r1, #0
   19748:	6878      	ldr	r0, [r7, #4]
   1974a:	4b27      	ldr	r3, [pc, #156]	; (197e8 <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   1974c:	4798      	blx	r3
		delay_ms(1);
   1974e:	2001      	movs	r0, #1
   19750:	4b26      	ldr	r3, [pc, #152]	; (197ec <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   19752:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   19754:	687b      	ldr	r3, [r7, #4]
   19756:	781b      	ldrb	r3, [r3, #0]
   19758:	b2db      	uxtb	r3, r3
   1975a:	f083 0301 	eor.w	r3, r3, #1
   1975e:	b2db      	uxtb	r3, r3
   19760:	2b00      	cmp	r3, #0
   19762:	d009      	beq.n	19778 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   19764:	687b      	ldr	r3, [r7, #4]
   19766:	789b      	ldrb	r3, [r3, #2]
   19768:	b2db      	uxtb	r3, r3
   1976a:	f083 0301 	eor.w	r3, r3, #1
   1976e:	b2db      	uxtb	r3, r3
   19770:	2b00      	cmp	r3, #0
   19772:	d001      	beq.n	19778 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   19774:	2301      	movs	r3, #1
   19776:	e000      	b.n	1977a <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   19778:	2300      	movs	r3, #0
   1977a:	2b00      	cmp	r3, #0
   1977c:	d000      	beq.n	19780 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   1977e:	e7e9      	b.n	19754 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   19780:	687b      	ldr	r3, [r7, #4]
   19782:	789b      	ldrb	r3, [r3, #2]
   19784:	b2db      	uxtb	r3, r3
   19786:	f083 0301 	eor.w	r3, r3, #1
   1978a:	b2db      	uxtb	r3, r3
   1978c:	2b00      	cmp	r3, #0
   1978e:	d0c9      	beq.n	19724 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   19790:	687b      	ldr	r3, [r7, #4]
   19792:	781b      	ldrb	r3, [r3, #0]
   19794:	b2db      	uxtb	r3, r3
   19796:	2b00      	cmp	r3, #0
   19798:	d006      	beq.n	197a8 <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   1979a:	687b      	ldr	r3, [r7, #4]
   1979c:	78db      	ldrb	r3, [r3, #3]
   1979e:	4619      	mov	r1, r3
   197a0:	6878      	ldr	r0, [r7, #4]
   197a2:	4b13      	ldr	r3, [pc, #76]	; (197f0 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   197a4:	4798      	blx	r3
   197a6:	e7bd      	b.n	19724 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   197a8:	2001      	movs	r0, #1
   197aa:	4b10      	ldr	r3, [pc, #64]	; (197ec <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   197ac:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   197ae:	e7b9      	b.n	19724 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   197b0:	490a      	ldr	r1, [pc, #40]	; (197dc <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   197b2:	480b      	ldr	r0, [pc, #44]	; (197e0 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   197b4:	4b0f      	ldr	r3, [pc, #60]	; (197f4 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   197b6:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   197b8:	687b      	ldr	r3, [r7, #4]
   197ba:	799b      	ldrb	r3, [r3, #6]
   197bc:	2b01      	cmp	r3, #1
   197be:	bf0c      	ite	eq
   197c0:	2301      	moveq	r3, #1
   197c2:	2300      	movne	r3, #0
   197c4:	b2da      	uxtb	r2, r3
   197c6:	687b      	ldr	r3, [r7, #4]
   197c8:	751a      	strb	r2, [r3, #20]
	return	isOK;
   197ca:	687b      	ldr	r3, [r7, #4]
   197cc:	7d1b      	ldrb	r3, [r3, #20]
	}
   197ce:	4618      	mov	r0, r3
   197d0:	3708      	adds	r7, #8
   197d2:	46bd      	mov	sp, r7
   197d4:	bd80      	pop	{r7, pc}
   197d6:	bf00      	nop
   197d8:	2000a568 	.word	0x2000a568
   197dc:	0001910d 	.word	0x0001910d
   197e0:	2000a2d8 	.word	0x2000a2d8
   197e4:	00017c25 	.word	0x00017c25
   197e8:	00019241 	.word	0x00019241
   197ec:	00006761 	.word	0x00006761
   197f0:	000193b5 	.word	0x000193b5
   197f4:	00017bb5 	.word	0x00017bb5

000197f8 <_ZlsIA17_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
   197f8:	b580      	push	{r7, lr}
   197fa:	b082      	sub	sp, #8
   197fc:	af00      	add	r7, sp, #0
   197fe:	6078      	str	r0, [r7, #4]
   19800:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
   19802:	6839      	ldr	r1, [r7, #0]
   19804:	6878      	ldr	r0, [r7, #4]
   19806:	4b03      	ldr	r3, [pc, #12]	; (19814 <_ZlsIA17_cER5PrintS2_RKT_+0x1c>)
   19808:	4798      	blx	r3
   1980a:	687b      	ldr	r3, [r7, #4]
   1980c:	4618      	mov	r0, r3
   1980e:	3708      	adds	r7, #8
   19810:	46bd      	mov	sp, r7
   19812:	bd80      	pop	{r7, pc}
   19814:	00018489 	.word	0x00018489

00019818 <hri_port_set_OUT_reg>:
{
   19818:	b480      	push	{r7}
   1981a:	b085      	sub	sp, #20
   1981c:	af00      	add	r7, sp, #0
   1981e:	60f8      	str	r0, [r7, #12]
   19820:	460b      	mov	r3, r1
   19822:	607a      	str	r2, [r7, #4]
   19824:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   19826:	7afb      	ldrb	r3, [r7, #11]
   19828:	68fa      	ldr	r2, [r7, #12]
   1982a:	01db      	lsls	r3, r3, #7
   1982c:	4413      	add	r3, r2
   1982e:	3318      	adds	r3, #24
   19830:	687a      	ldr	r2, [r7, #4]
   19832:	601a      	str	r2, [r3, #0]
}
   19834:	bf00      	nop
   19836:	3714      	adds	r7, #20
   19838:	46bd      	mov	sp, r7
   1983a:	bc80      	pop	{r7}
   1983c:	4770      	bx	lr

0001983e <hri_port_clear_OUT_reg>:
{
   1983e:	b480      	push	{r7}
   19840:	b085      	sub	sp, #20
   19842:	af00      	add	r7, sp, #0
   19844:	60f8      	str	r0, [r7, #12]
   19846:	460b      	mov	r3, r1
   19848:	607a      	str	r2, [r7, #4]
   1984a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1984c:	7afb      	ldrb	r3, [r7, #11]
   1984e:	68fa      	ldr	r2, [r7, #12]
   19850:	01db      	lsls	r3, r3, #7
   19852:	4413      	add	r3, r2
   19854:	3314      	adds	r3, #20
   19856:	687a      	ldr	r2, [r7, #4]
   19858:	601a      	str	r2, [r3, #0]
}
   1985a:	bf00      	nop
   1985c:	3714      	adds	r7, #20
   1985e:	46bd      	mov	sp, r7
   19860:	bc80      	pop	{r7}
   19862:	4770      	bx	lr

00019864 <_gpio_set_level>:
{
   19864:	b580      	push	{r7, lr}
   19866:	b082      	sub	sp, #8
   19868:	af00      	add	r7, sp, #0
   1986a:	4603      	mov	r3, r0
   1986c:	6039      	str	r1, [r7, #0]
   1986e:	71fb      	strb	r3, [r7, #7]
   19870:	4613      	mov	r3, r2
   19872:	71bb      	strb	r3, [r7, #6]
	if (level) {
   19874:	79bb      	ldrb	r3, [r7, #6]
   19876:	2b00      	cmp	r3, #0
   19878:	d006      	beq.n	19888 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1987a:	79fb      	ldrb	r3, [r7, #7]
   1987c:	683a      	ldr	r2, [r7, #0]
   1987e:	4619      	mov	r1, r3
   19880:	4806      	ldr	r0, [pc, #24]	; (1989c <_gpio_set_level+0x38>)
   19882:	4b07      	ldr	r3, [pc, #28]	; (198a0 <_gpio_set_level+0x3c>)
   19884:	4798      	blx	r3
}
   19886:	e005      	b.n	19894 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   19888:	79fb      	ldrb	r3, [r7, #7]
   1988a:	683a      	ldr	r2, [r7, #0]
   1988c:	4619      	mov	r1, r3
   1988e:	4803      	ldr	r0, [pc, #12]	; (1989c <_gpio_set_level+0x38>)
   19890:	4b04      	ldr	r3, [pc, #16]	; (198a4 <_gpio_set_level+0x40>)
   19892:	4798      	blx	r3
}
   19894:	bf00      	nop
   19896:	3708      	adds	r7, #8
   19898:	46bd      	mov	sp, r7
   1989a:	bd80      	pop	{r7, pc}
   1989c:	41008000 	.word	0x41008000
   198a0:	00019819 	.word	0x00019819
   198a4:	0001983f 	.word	0x0001983f

000198a8 <gpio_set_pin_level>:
{
   198a8:	b580      	push	{r7, lr}
   198aa:	b082      	sub	sp, #8
   198ac:	af00      	add	r7, sp, #0
   198ae:	4603      	mov	r3, r0
   198b0:	460a      	mov	r2, r1
   198b2:	71fb      	strb	r3, [r7, #7]
   198b4:	4613      	mov	r3, r2
   198b6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   198b8:	79fb      	ldrb	r3, [r7, #7]
   198ba:	115b      	asrs	r3, r3, #5
   198bc:	b2d8      	uxtb	r0, r3
   198be:	79fb      	ldrb	r3, [r7, #7]
   198c0:	f003 031f 	and.w	r3, r3, #31
   198c4:	2201      	movs	r2, #1
   198c6:	fa02 f303 	lsl.w	r3, r2, r3
   198ca:	79ba      	ldrb	r2, [r7, #6]
   198cc:	4619      	mov	r1, r3
   198ce:	4b03      	ldr	r3, [pc, #12]	; (198dc <gpio_set_pin_level+0x34>)
   198d0:	4798      	blx	r3
}
   198d2:	bf00      	nop
   198d4:	3708      	adds	r7, #8
   198d6:	46bd      	mov	sp, r7
   198d8:	bd80      	pop	{r7, pc}
   198da:	bf00      	nop
   198dc:	00019865 	.word	0x00019865

000198e0 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   198e0:	b480      	push	{r7}
   198e2:	b083      	sub	sp, #12
   198e4:	af00      	add	r7, sp, #0
   198e6:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   198e8:	4a05      	ldr	r2, [pc, #20]	; (19900 <_ZN6LT_SPIC1Ev+0x20>)
   198ea:	687b      	ldr	r3, [r7, #4]
   198ec:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   198ee:	687b      	ldr	r3, [r7, #4]
   198f0:	4a04      	ldr	r2, [pc, #16]	; (19904 <_ZN6LT_SPIC1Ev+0x24>)
   198f2:	605a      	str	r2, [r3, #4]
} //LT_SPI
   198f4:	687b      	ldr	r3, [r7, #4]
   198f6:	4618      	mov	r0, r3
   198f8:	370c      	adds	r7, #12
   198fa:	46bd      	mov	sp, r7
   198fc:	bc80      	pop	{r7}
   198fe:	4770      	bx	lr
   19900:	2000a56c 	.word	0x2000a56c
   19904:	2000a570 	.word	0x2000a570

00019908 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   19908:	b480      	push	{r7}
   1990a:	b083      	sub	sp, #12
   1990c:	af00      	add	r7, sp, #0
   1990e:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   19910:	687b      	ldr	r3, [r7, #4]
   19912:	4618      	mov	r0, r3
   19914:	370c      	adds	r7, #12
   19916:	46bd      	mov	sp, r7
   19918:	bc80      	pop	{r7}
   1991a:	4770      	bx	lr

0001991c <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   1991c:	b580      	push	{r7, lr}
   1991e:	b082      	sub	sp, #8
   19920:	af00      	add	r7, sp, #0
   19922:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   19924:	687b      	ldr	r3, [r7, #4]
   19926:	685a      	ldr	r2, [r3, #4]
   19928:	687b      	ldr	r3, [r7, #4]
   1992a:	691b      	ldr	r3, [r3, #16]
   1992c:	4619      	mov	r1, r3
   1992e:	4610      	mov	r0, r2
   19930:	4b0e      	ldr	r3, [pc, #56]	; (1996c <_ZN6LT_SPI4initEv+0x50>)
   19932:	4798      	blx	r3
	spiTemp->init();
   19934:	687b      	ldr	r3, [r7, #4]
   19936:	685b      	ldr	r3, [r3, #4]
   19938:	4618      	mov	r0, r3
   1993a:	4b0d      	ldr	r3, [pc, #52]	; (19970 <_ZN6LT_SPI4initEv+0x54>)
   1993c:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   1993e:	687b      	ldr	r3, [r7, #4]
   19940:	685b      	ldr	r3, [r3, #4]
   19942:	685a      	ldr	r2, [r3, #4]
   19944:	687b      	ldr	r3, [r7, #4]
   19946:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   19948:	687b      	ldr	r3, [r7, #4]
   1994a:	685b      	ldr	r3, [r3, #4]
   1994c:	689a      	ldr	r2, [r3, #8]
   1994e:	687b      	ldr	r3, [r7, #4]
   19950:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   19952:	687b      	ldr	r3, [r7, #4]
   19954:	685b      	ldr	r3, [r3, #4]
   19956:	4618      	mov	r0, r3
   19958:	4b06      	ldr	r3, [pc, #24]	; (19974 <_ZN6LT_SPI4initEv+0x58>)
   1995a:	4798      	blx	r3
	ready=true;
   1995c:	687b      	ldr	r3, [r7, #4]
   1995e:	2201      	movs	r2, #1
   19960:	701a      	strb	r2, [r3, #0]
}
   19962:	bf00      	nop
   19964:	3708      	adds	r7, #8
   19966:	46bd      	mov	sp, r7
   19968:	bd80      	pop	{r7, pc}
   1996a:	bf00      	nop
   1996c:	0001606d 	.word	0x0001606d
   19970:	00016025 	.word	0x00016025
   19974:	00016091 	.word	0x00016091

00019978 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   19978:	b480      	push	{r7}
   1997a:	b083      	sub	sp, #12
   1997c:	af00      	add	r7, sp, #0
   1997e:	6078      	str	r0, [r7, #4]
   19980:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   19982:	687b      	ldr	r3, [r7, #4]
   19984:	683a      	ldr	r2, [r7, #0]
   19986:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   19988:	4a03      	ldr	r2, [pc, #12]	; (19998 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   1998a:	687b      	ldr	r3, [r7, #4]
   1998c:	6013      	str	r3, [r2, #0]
}
   1998e:	bf00      	nop
   19990:	370c      	adds	r7, #12
   19992:	46bd      	mov	sp, r7
   19994:	bc80      	pop	{r7}
   19996:	4770      	bx	lr
   19998:	2000a56c 	.word	0x2000a56c

0001999c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   1999c:	b580      	push	{r7, lr}
   1999e:	b086      	sub	sp, #24
   199a0:	af00      	add	r7, sp, #0
   199a2:	60f8      	str	r0, [r7, #12]
   199a4:	60b9      	str	r1, [r7, #8]
   199a6:	607a      	str	r2, [r7, #4]
   199a8:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   199aa:	687b      	ldr	r3, [r7, #4]
   199ac:	781b      	ldrb	r3, [r3, #0]
   199ae:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   199b0:	68b9      	ldr	r1, [r7, #8]
   199b2:	68f8      	ldr	r0, [r7, #12]
   199b4:	4b25      	ldr	r3, [pc, #148]	; (19a4c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   199b6:	4798      	blx	r3
	
	switch(rOrw){
   199b8:	7dfb      	ldrb	r3, [r7, #23]
   199ba:	2b02      	cmp	r3, #2
   199bc:	d002      	beq.n	199c4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   199be:	2b03      	cmp	r3, #3
   199c0:	d009      	beq.n	199d6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   199c2:	e028      	b.n	19a16 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   199c4:	68fb      	ldr	r3, [r7, #12]
   199c6:	685b      	ldr	r3, [r3, #4]
   199c8:	f897 2020 	ldrb.w	r2, [r7, #32]
   199cc:	6879      	ldr	r1, [r7, #4]
   199ce:	4618      	mov	r0, r3
   199d0:	4b1f      	ldr	r3, [pc, #124]	; (19a50 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   199d2:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   199d4:	e031      	b.n	19a3a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   199d6:	68fb      	ldr	r3, [r7, #12]
   199d8:	685b      	ldr	r3, [r3, #4]
   199da:	2203      	movs	r2, #3
   199dc:	6879      	ldr	r1, [r7, #4]
   199de:	4618      	mov	r0, r3
   199e0:	4b1b      	ldr	r3, [pc, #108]	; (19a50 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   199e2:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   199e4:	f897 3020 	ldrb.w	r3, [r7, #32]
   199e8:	2b04      	cmp	r3, #4
   199ea:	dd0b      	ble.n	19a04 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   199ec:	68fb      	ldr	r3, [r7, #12]
   199ee:	6858      	ldr	r0, [r3, #4]
   199f0:	f897 3020 	ldrb.w	r3, [r7, #32]
   199f4:	3b03      	subs	r3, #3
   199f6:	461a      	mov	r2, r3
   199f8:	6839      	ldr	r1, [r7, #0]
   199fa:	4b16      	ldr	r3, [pc, #88]	; (19a54 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   199fc:	4798      	blx	r3
					asm("nop");
   199fe:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   19a00:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   19a02:	e01a      	b.n	19a3a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   19a04:	68fb      	ldr	r3, [r7, #12]
   19a06:	685b      	ldr	r3, [r3, #4]
   19a08:	2201      	movs	r2, #1
   19a0a:	6839      	ldr	r1, [r7, #0]
   19a0c:	4618      	mov	r0, r3
   19a0e:	4b11      	ldr	r3, [pc, #68]	; (19a54 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   19a10:	4798      	blx	r3
				asm("nop");
   19a12:	bf00      	nop
			break;
   19a14:	e011      	b.n	19a3a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   19a16:	68fb      	ldr	r3, [r7, #12]
   19a18:	685b      	ldr	r3, [r3, #4]
   19a1a:	f897 2020 	ldrb.w	r2, [r7, #32]
   19a1e:	6879      	ldr	r1, [r7, #4]
   19a20:	4618      	mov	r0, r3
   19a22:	4b0b      	ldr	r3, [pc, #44]	; (19a50 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   19a24:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   19a26:	68fb      	ldr	r3, [r7, #12]
   19a28:	6858      	ldr	r0, [r3, #4]
   19a2a:	f897 3020 	ldrb.w	r3, [r7, #32]
   19a2e:	3b03      	subs	r3, #3
   19a30:	461a      	mov	r2, r3
   19a32:	6839      	ldr	r1, [r7, #0]
   19a34:	4b07      	ldr	r3, [pc, #28]	; (19a54 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   19a36:	4798      	blx	r3
			break;
   19a38:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   19a3a:	68b9      	ldr	r1, [r7, #8]
   19a3c:	68f8      	ldr	r0, [r7, #12]
   19a3e:	4b06      	ldr	r3, [pc, #24]	; (19a58 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   19a40:	4798      	blx	r3
	asm("nop");
   19a42:	bf00      	nop
	
}
   19a44:	bf00      	nop
   19a46:	3718      	adds	r7, #24
   19a48:	46bd      	mov	sp, r7
   19a4a:	bd80      	pop	{r7, pc}
   19a4c:	00019a5d 	.word	0x00019a5d
   19a50:	000160cd 	.word	0x000160cd
   19a54:	00016111 	.word	0x00016111
   19a58:	00019aa5 	.word	0x00019aa5

00019a5c <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   19a5c:	b580      	push	{r7, lr}
   19a5e:	b082      	sub	sp, #8
   19a60:	af00      	add	r7, sp, #0
   19a62:	6078      	str	r0, [r7, #4]
   19a64:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   19a66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   19a6a:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   19a6c:	683b      	ldr	r3, [r7, #0]
   19a6e:	b2db      	uxtb	r3, r3
   19a70:	2100      	movs	r1, #0
   19a72:	4618      	mov	r0, r3
   19a74:	4b08      	ldr	r3, [pc, #32]	; (19a98 <_ZN6LT_SPI4OpenEm+0x3c>)
   19a76:	4798      	blx	r3
	 delay_us(10);
   19a78:	200a      	movs	r0, #10
   19a7a:	4b08      	ldr	r3, [pc, #32]	; (19a9c <_ZN6LT_SPI4OpenEm+0x40>)
   19a7c:	4798      	blx	r3
	spiTemp->Enable();
   19a7e:	687b      	ldr	r3, [r7, #4]
   19a80:	685b      	ldr	r3, [r3, #4]
   19a82:	4618      	mov	r0, r3
   19a84:	4b06      	ldr	r3, [pc, #24]	; (19aa0 <_ZN6LT_SPI4OpenEm+0x44>)
   19a86:	4798      	blx	r3
	 delay_us(10);
   19a88:	200a      	movs	r0, #10
   19a8a:	4b04      	ldr	r3, [pc, #16]	; (19a9c <_ZN6LT_SPI4OpenEm+0x40>)
   19a8c:	4798      	blx	r3
 }
   19a8e:	bf00      	nop
   19a90:	3708      	adds	r7, #8
   19a92:	46bd      	mov	sp, r7
   19a94:	bd80      	pop	{r7, pc}
   19a96:	bf00      	nop
   19a98:	000198a9 	.word	0x000198a9
   19a9c:	0000672d 	.word	0x0000672d
   19aa0:	00016091 	.word	0x00016091

00019aa4 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   19aa4:	b580      	push	{r7, lr}
   19aa6:	b082      	sub	sp, #8
   19aa8:	af00      	add	r7, sp, #0
   19aaa:	6078      	str	r0, [r7, #4]
   19aac:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   19aae:	200a      	movs	r0, #10
   19ab0:	4b0b      	ldr	r3, [pc, #44]	; (19ae0 <_ZN6LT_SPI5CloseEm+0x3c>)
   19ab2:	4798      	blx	r3
	 spiTemp->Disable();
   19ab4:	687b      	ldr	r3, [r7, #4]
   19ab6:	685b      	ldr	r3, [r3, #4]
   19ab8:	4618      	mov	r0, r3
   19aba:	4b0a      	ldr	r3, [pc, #40]	; (19ae4 <_ZN6LT_SPI5CloseEm+0x40>)
   19abc:	4798      	blx	r3
	delay_us(10);
   19abe:	200a      	movs	r0, #10
   19ac0:	4b07      	ldr	r3, [pc, #28]	; (19ae0 <_ZN6LT_SPI5CloseEm+0x3c>)
   19ac2:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   19ac4:	683b      	ldr	r3, [r7, #0]
   19ac6:	b2db      	uxtb	r3, r3
   19ac8:	2101      	movs	r1, #1
   19aca:	4618      	mov	r0, r3
   19acc:	4b06      	ldr	r3, [pc, #24]	; (19ae8 <_ZN6LT_SPI5CloseEm+0x44>)
   19ace:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   19ad0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   19ad4:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   19ad6:	bf00      	nop
   19ad8:	3708      	adds	r7, #8
   19ada:	46bd      	mov	sp, r7
   19adc:	bd80      	pop	{r7, pc}
   19ade:	bf00      	nop
   19ae0:	0000672d 	.word	0x0000672d
   19ae4:	00016155 	.word	0x00016155
   19ae8:	000198a9 	.word	0x000198a9

00019aec <_Z41__static_initialization_and_destruction_0ii>:
   19aec:	b580      	push	{r7, lr}
   19aee:	b082      	sub	sp, #8
   19af0:	af00      	add	r7, sp, #0
   19af2:	6078      	str	r0, [r7, #4]
   19af4:	6039      	str	r1, [r7, #0]
   19af6:	687b      	ldr	r3, [r7, #4]
   19af8:	2b01      	cmp	r3, #1
   19afa:	d10c      	bne.n	19b16 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   19afc:	683b      	ldr	r3, [r7, #0]
   19afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19b02:	4293      	cmp	r3, r2
   19b04:	d107      	bne.n	19b16 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   19b06:	4806      	ldr	r0, [pc, #24]	; (19b20 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19b08:	4b06      	ldr	r3, [pc, #24]	; (19b24 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   19b0a:	4798      	blx	r3
   19b0c:	4a06      	ldr	r2, [pc, #24]	; (19b28 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   19b0e:	4907      	ldr	r1, [pc, #28]	; (19b2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   19b10:	4803      	ldr	r0, [pc, #12]	; (19b20 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19b12:	4b07      	ldr	r3, [pc, #28]	; (19b30 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   19b14:	4798      	blx	r3
   19b16:	bf00      	nop
   19b18:	3708      	adds	r7, #8
   19b1a:	46bd      	mov	sp, r7
   19b1c:	bd80      	pop	{r7, pc}
   19b1e:	bf00      	nop
   19b20:	2000a570 	.word	0x2000a570
   19b24:	00015ff1 	.word	0x00015ff1
   19b28:	20000000 	.word	0x20000000
   19b2c:	00016011 	.word	0x00016011
   19b30:	00019d41 	.word	0x00019d41

00019b34 <_GLOBAL__sub_I_ptrLTSPIClass>:
   19b34:	b580      	push	{r7, lr}
   19b36:	af00      	add	r7, sp, #0
   19b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19b3c:	2001      	movs	r0, #1
   19b3e:	4b01      	ldr	r3, [pc, #4]	; (19b44 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   19b40:	4798      	blx	r3
   19b42:	bd80      	pop	{r7, pc}
   19b44:	00019aed 	.word	0x00019aed

00019b48 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
   19b48:	4b02      	ldr	r3, [pc, #8]	; (19b54 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
   19b4a:	681a      	ldr	r2, [r3, #0]
   19b4c:	6813      	ldr	r3, [r2, #0]
   19b4e:	3301      	adds	r3, #1
   19b50:	6013      	str	r3, [r2, #0]
   19b52:	4770      	bx	lr
   19b54:	2000a58c 	.word	0x2000a58c

00019b58 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
   19b58:	4b02      	ldr	r3, [pc, #8]	; (19b64 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
   19b5a:	681b      	ldr	r3, [r3, #0]
   19b5c:	2200      	movs	r2, #0
   19b5e:	711a      	strb	r2, [r3, #4]
   19b60:	4770      	bx	lr
   19b62:	bf00      	nop
   19b64:	2000a58c 	.word	0x2000a58c

00019b68 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
   19b68:	b538      	push	{r3, r4, r5, lr}
   19b6a:	4604      	mov	r4, r0
{
	ticks=0;
   19b6c:	2300      	movs	r3, #0
   19b6e:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
   19b70:	4d04      	ldr	r5, [pc, #16]	; (19b84 <_ZN16Maintenance_ToolD1Ev+0x1c>)
   19b72:	4628      	mov	r0, r5
   19b74:	4b04      	ldr	r3, [pc, #16]	; (19b88 <_ZN16Maintenance_ToolD1Ev+0x20>)
   19b76:	4798      	blx	r3
	interfaceTimer.Remove_task();
   19b78:	4628      	mov	r0, r5
   19b7a:	4b04      	ldr	r3, [pc, #16]	; (19b8c <_ZN16Maintenance_ToolD1Ev+0x24>)
   19b7c:	4798      	blx	r3
	
} //~Maintenance_Tool
   19b7e:	4620      	mov	r0, r4
   19b80:	bd38      	pop	{r3, r4, r5, pc}
   19b82:	bf00      	nop
   19b84:	2000a440 	.word	0x2000a440
   19b88:	000189d1 	.word	0x000189d1
   19b8c:	00018ae9 	.word	0x00018ae9

00019b90 <_ZN16Maintenance_ToolC1Ev>:
	ptrMaintenanceTool=this;
   19b90:	4a04      	ldr	r2, [pc, #16]	; (19ba4 <_ZN16Maintenance_ToolC1Ev+0x14>)
   19b92:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
   19b94:	2200      	movs	r2, #0
   19b96:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	nextMaintenanceSyncTime = 0;
   19b9a:	6482      	str	r2, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
   19b9c:	64c2      	str	r2, [r0, #76]	; 0x4c
	ticks=0;
   19b9e:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
   19ba0:	4770      	bx	lr
   19ba2:	bf00      	nop
   19ba4:	2000a58c 	.word	0x2000a58c

00019ba8 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
   19ba8:	b510      	push	{r4, lr}
		maintenanceIsConnected = isConnected;
   19baa:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
		if (isConnected)
   19bae:	b919      	cbnz	r1, 19bb8 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
   19bb0:	4808      	ldr	r0, [pc, #32]	; (19bd4 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   19bb2:	4b09      	ldr	r3, [pc, #36]	; (19bd8 <_ZN16Maintenance_Tool12setConnectedEb+0x30>)
   19bb4:	4798      	blx	r3
   19bb6:	bd10      	pop	{r4, pc}
			interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
   19bb8:	4c06      	ldr	r4, [pc, #24]	; (19bd4 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   19bba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19bbe:	4907      	ldr	r1, [pc, #28]	; (19bdc <_ZN16Maintenance_Tool12setConnectedEb+0x34>)
   19bc0:	4620      	mov	r0, r4
   19bc2:	4b07      	ldr	r3, [pc, #28]	; (19be0 <_ZN16Maintenance_Tool12setConnectedEb+0x38>)
   19bc4:	4798      	blx	r3
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
   19bc6:	f64e 2260 	movw	r2, #60000	; 0xea60
   19bca:	4906      	ldr	r1, [pc, #24]	; (19be4 <_ZN16Maintenance_Tool12setConnectedEb+0x3c>)
   19bcc:	4620      	mov	r0, r4
   19bce:	4b06      	ldr	r3, [pc, #24]	; (19be8 <_ZN16Maintenance_Tool12setConnectedEb+0x40>)
   19bd0:	4798      	blx	r3
   19bd2:	bd10      	pop	{r4, pc}
   19bd4:	2000a440 	.word	0x2000a440
   19bd8:	000189d1 	.word	0x000189d1
   19bdc:	00019b49 	.word	0x00019b49
   19be0:	00018a61 	.word	0x00018a61
   19be4:	00019b59 	.word	0x00019b59
   19be8:	00018ab1 	.word	0x00018ab1

00019bec <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
   19bec:	b510      	push	{r4, lr}
   19bee:	4604      	mov	r4, r0
	result=false;
   19bf0:	2300      	movs	r3, #0
   19bf2:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	magic=0;
   19bf6:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	if (gotAccess==true)
   19bfa:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
   19bfe:	b12b      	cbz	r3, 19c0c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
   19c00:	2301      	movs	r3, #1
   19c02:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	return	result;
   19c06:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
}
   19c0a:	bd10      	pop	{r4, pc}
		if (usb.connected)
   19c0c:	4b15      	ldr	r3, [pc, #84]	; (19c64 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   19c0e:	7c1b      	ldrb	r3, [r3, #16]
   19c10:	2b00      	cmp	r3, #0
   19c12:	d0f8      	beq.n	19c06 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
			if (usb.rxReady)
   19c14:	4b13      	ldr	r3, [pc, #76]	; (19c64 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   19c16:	7d5b      	ldrb	r3, [r3, #21]
   19c18:	b18b      	cbz	r3, 19c3e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x52>
   19c1a:	1d43      	adds	r3, r0, #5
   19c1c:	3009      	adds	r0, #9
   19c1e:	2200      	movs	r2, #0
					magic|= localBuffer[i];
   19c20:	f813 1b01 	ldrb.w	r1, [r3], #1
   19c24:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
				for (int i = 0; i < 4; i++)
   19c28:	4283      	cmp	r3, r0
   19c2a:	d1f9      	bne.n	19c20 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x34>
   19c2c:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
				xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
   19c30:	4b0d      	ldr	r3, [pc, #52]	; (19c68 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
   19c32:	ea82 0103 	eor.w	r1, r2, r3
   19c36:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
				if (xorResult==0)
   19c3a:	429a      	cmp	r2, r3
   19c3c:	d005      	beq.n	19c4a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x5e>
			usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   19c3e:	2240      	movs	r2, #64	; 0x40
   19c40:	1d61      	adds	r1, r4, #5
   19c42:	4808      	ldr	r0, [pc, #32]	; (19c64 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   19c44:	4b09      	ldr	r3, [pc, #36]	; (19c6c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
   19c46:	4798      	blx	r3
   19c48:	e7dd      	b.n	19c06 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
					gotAccess=true;
   19c4a:	2101      	movs	r1, #1
   19c4c:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
					result=true;
   19c50:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
					is_MTPC_Beaming=true;
   19c54:	7121      	strb	r1, [r4, #4]
					setConnected(true);
   19c56:	4620      	mov	r0, r4
   19c58:	4b05      	ldr	r3, [pc, #20]	; (19c70 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
   19c5a:	4798      	blx	r3
					return	result;
   19c5c:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
   19c60:	bd10      	pop	{r4, pc}
   19c62:	bf00      	nop
   19c64:	2000a368 	.word	0x2000a368
   19c68:	61626364 	.word	0x61626364
   19c6c:	00018121 	.word	0x00018121
   19c70:	00019ba9 	.word	0x00019ba9

00019c74 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	{
		memcpy(buffer+4*ii, (uint8_t*)(add+4*ii), 4);
	}

}
   19c74:	b510      	push	{r4, lr}
   19c76:	4c05      	ldr	r4, [pc, #20]	; (19c8c <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
   19c78:	4620      	mov	r0, r4
   19c7a:	4b05      	ldr	r3, [pc, #20]	; (19c90 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
   19c7c:	4798      	blx	r3
   19c7e:	4a05      	ldr	r2, [pc, #20]	; (19c94 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
   19c80:	4905      	ldr	r1, [pc, #20]	; (19c98 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
   19c82:	4620      	mov	r0, r4
   19c84:	4b05      	ldr	r3, [pc, #20]	; (19c9c <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
   19c86:	4798      	blx	r3
   19c88:	bd10      	pop	{r4, pc}
   19c8a:	bf00      	nop
   19c8c:	2000a590 	.word	0x2000a590
   19c90:	00019b91 	.word	0x00019b91
   19c94:	20000000 	.word	0x20000000
   19c98:	00019b69 	.word	0x00019b69
   19c9c:	00019d41 	.word	0x00019d41

00019ca0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   19ca0:	b580      	push	{r7, lr}
   19ca2:	b084      	sub	sp, #16
   19ca4:	af00      	add	r7, sp, #0
   19ca6:	60f8      	str	r0, [r7, #12]
   19ca8:	60b9      	str	r1, [r7, #8]
   19caa:	4613      	mov	r3, r2
   19cac:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   19cae:	68fb      	ldr	r3, [r7, #12]
   19cb0:	2b00      	cmp	r3, #0
   19cb2:	d004      	beq.n	19cbe <io_write+0x1e>
   19cb4:	68bb      	ldr	r3, [r7, #8]
   19cb6:	2b00      	cmp	r3, #0
   19cb8:	d001      	beq.n	19cbe <io_write+0x1e>
   19cba:	2301      	movs	r3, #1
   19cbc:	e000      	b.n	19cc0 <io_write+0x20>
   19cbe:	2300      	movs	r3, #0
   19cc0:	f003 0301 	and.w	r3, r3, #1
   19cc4:	b2db      	uxtb	r3, r3
   19cc6:	2234      	movs	r2, #52	; 0x34
   19cc8:	4907      	ldr	r1, [pc, #28]	; (19ce8 <io_write+0x48>)
   19cca:	4618      	mov	r0, r3
   19ccc:	4b07      	ldr	r3, [pc, #28]	; (19cec <io_write+0x4c>)
   19cce:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   19cd0:	68fb      	ldr	r3, [r7, #12]
   19cd2:	681b      	ldr	r3, [r3, #0]
   19cd4:	88fa      	ldrh	r2, [r7, #6]
   19cd6:	68b9      	ldr	r1, [r7, #8]
   19cd8:	68f8      	ldr	r0, [r7, #12]
   19cda:	4798      	blx	r3
   19cdc:	4603      	mov	r3, r0
}
   19cde:	4618      	mov	r0, r3
   19ce0:	3710      	adds	r7, #16
   19ce2:	46bd      	mov	sp, r7
   19ce4:	bd80      	pop	{r7, pc}
   19ce6:	bf00      	nop
   19ce8:	000223f0 	.word	0x000223f0
   19cec:	000080d1 	.word	0x000080d1

00019cf0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   19cf0:	b580      	push	{r7, lr}
   19cf2:	b084      	sub	sp, #16
   19cf4:	af00      	add	r7, sp, #0
   19cf6:	60f8      	str	r0, [r7, #12]
   19cf8:	60b9      	str	r1, [r7, #8]
   19cfa:	4613      	mov	r3, r2
   19cfc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   19cfe:	68fb      	ldr	r3, [r7, #12]
   19d00:	2b00      	cmp	r3, #0
   19d02:	d004      	beq.n	19d0e <io_read+0x1e>
   19d04:	68bb      	ldr	r3, [r7, #8]
   19d06:	2b00      	cmp	r3, #0
   19d08:	d001      	beq.n	19d0e <io_read+0x1e>
   19d0a:	2301      	movs	r3, #1
   19d0c:	e000      	b.n	19d10 <io_read+0x20>
   19d0e:	2300      	movs	r3, #0
   19d10:	f003 0301 	and.w	r3, r3, #1
   19d14:	b2db      	uxtb	r3, r3
   19d16:	223d      	movs	r2, #61	; 0x3d
   19d18:	4907      	ldr	r1, [pc, #28]	; (19d38 <io_read+0x48>)
   19d1a:	4618      	mov	r0, r3
   19d1c:	4b07      	ldr	r3, [pc, #28]	; (19d3c <io_read+0x4c>)
   19d1e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   19d20:	68fb      	ldr	r3, [r7, #12]
   19d22:	685b      	ldr	r3, [r3, #4]
   19d24:	88fa      	ldrh	r2, [r7, #6]
   19d26:	68b9      	ldr	r1, [r7, #8]
   19d28:	68f8      	ldr	r0, [r7, #12]
   19d2a:	4798      	blx	r3
   19d2c:	4603      	mov	r3, r0
}
   19d2e:	4618      	mov	r0, r3
   19d30:	3710      	adds	r7, #16
   19d32:	46bd      	mov	sp, r7
   19d34:	bd80      	pop	{r7, pc}
   19d36:	bf00      	nop
   19d38:	000223f0 	.word	0x000223f0
   19d3c:	000080d1 	.word	0x000080d1

00019d40 <__aeabi_atexit>:
   19d40:	460b      	mov	r3, r1
   19d42:	4601      	mov	r1, r0
   19d44:	4618      	mov	r0, r3
   19d46:	f002 ba41 	b.w	1c1cc <__cxa_atexit>
   19d4a:	bf00      	nop

00019d4c <_ZdlPvj>:
   19d4c:	f7fa bd9e 	b.w	1488c <_ZdlPv>

00019d50 <floor>:
   19d50:	f3c1 520a 	ubfx	r2, r1, #20, #11
   19d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d58:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   19d5c:	2e13      	cmp	r6, #19
   19d5e:	460b      	mov	r3, r1
   19d60:	460d      	mov	r5, r1
   19d62:	4604      	mov	r4, r0
   19d64:	4688      	mov	r8, r1
   19d66:	4607      	mov	r7, r0
   19d68:	dc1d      	bgt.n	19da6 <floor+0x56>
   19d6a:	2e00      	cmp	r6, #0
   19d6c:	db40      	blt.n	19df0 <floor+0xa0>
   19d6e:	4a3c      	ldr	r2, [pc, #240]	; (19e60 <floor+0x110>)
   19d70:	fa42 f906 	asr.w	r9, r2, r6
   19d74:	ea01 0209 	and.w	r2, r1, r9
   19d78:	4302      	orrs	r2, r0
   19d7a:	4686      	mov	lr, r0
   19d7c:	d018      	beq.n	19db0 <floor+0x60>
   19d7e:	a336      	add	r3, pc, #216	; (adr r3, 19e58 <floor+0x108>)
   19d80:	e9d3 2300 	ldrd	r2, r3, [r3]
   19d84:	f001 f91c 	bl	1afc0 <__adddf3>
   19d88:	2200      	movs	r2, #0
   19d8a:	2300      	movs	r3, #0
   19d8c:	f001 fd5a 	bl	1b844 <__aeabi_dcmpgt>
   19d90:	b120      	cbz	r0, 19d9c <floor+0x4c>
   19d92:	2d00      	cmp	r5, #0
   19d94:	db42      	blt.n	19e1c <floor+0xcc>
   19d96:	ea28 0509 	bic.w	r5, r8, r9
   19d9a:	2700      	movs	r7, #0
   19d9c:	463c      	mov	r4, r7
   19d9e:	4629      	mov	r1, r5
   19da0:	4620      	mov	r0, r4
   19da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19da6:	2e33      	cmp	r6, #51	; 0x33
   19da8:	dd06      	ble.n	19db8 <floor+0x68>
   19daa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   19dae:	d02f      	beq.n	19e10 <floor+0xc0>
   19db0:	4619      	mov	r1, r3
   19db2:	4620      	mov	r0, r4
   19db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19db8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   19dbc:	f04f 39ff 	mov.w	r9, #4294967295
   19dc0:	fa29 f902 	lsr.w	r9, r9, r2
   19dc4:	ea10 0f09 	tst.w	r0, r9
   19dc8:	d0f2      	beq.n	19db0 <floor+0x60>
   19dca:	a323      	add	r3, pc, #140	; (adr r3, 19e58 <floor+0x108>)
   19dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   19dd0:	f001 f8f6 	bl	1afc0 <__adddf3>
   19dd4:	2200      	movs	r2, #0
   19dd6:	2300      	movs	r3, #0
   19dd8:	f001 fd34 	bl	1b844 <__aeabi_dcmpgt>
   19ddc:	2800      	cmp	r0, #0
   19dde:	d0dd      	beq.n	19d9c <floor+0x4c>
   19de0:	2d00      	cmp	r5, #0
   19de2:	db21      	blt.n	19e28 <floor+0xd8>
   19de4:	4645      	mov	r5, r8
   19de6:	ea27 0709 	bic.w	r7, r7, r9
   19dea:	463c      	mov	r4, r7
   19dec:	4629      	mov	r1, r5
   19dee:	e7d7      	b.n	19da0 <floor+0x50>
   19df0:	a319      	add	r3, pc, #100	; (adr r3, 19e58 <floor+0x108>)
   19df2:	e9d3 2300 	ldrd	r2, r3, [r3]
   19df6:	f001 f8e3 	bl	1afc0 <__adddf3>
   19dfa:	2200      	movs	r2, #0
   19dfc:	2300      	movs	r3, #0
   19dfe:	f001 fd21 	bl	1b844 <__aeabi_dcmpgt>
   19e02:	2800      	cmp	r0, #0
   19e04:	d0ca      	beq.n	19d9c <floor+0x4c>
   19e06:	2d00      	cmp	r5, #0
   19e08:	db19      	blt.n	19e3e <floor+0xee>
   19e0a:	2700      	movs	r7, #0
   19e0c:	463d      	mov	r5, r7
   19e0e:	e7c5      	b.n	19d9c <floor+0x4c>
   19e10:	4602      	mov	r2, r0
   19e12:	460b      	mov	r3, r1
   19e14:	f001 f8d4 	bl	1afc0 <__adddf3>
   19e18:	4604      	mov	r4, r0
   19e1a:	e7ca      	b.n	19db2 <floor+0x62>
   19e1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   19e20:	fa43 f606 	asr.w	r6, r3, r6
   19e24:	44b0      	add	r8, r6
   19e26:	e7b6      	b.n	19d96 <floor+0x46>
   19e28:	2e14      	cmp	r6, #20
   19e2a:	d010      	beq.n	19e4e <floor+0xfe>
   19e2c:	2301      	movs	r3, #1
   19e2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   19e32:	fa03 f606 	lsl.w	r6, r3, r6
   19e36:	1937      	adds	r7, r6, r4
   19e38:	bf28      	it	cs
   19e3a:	4498      	addcs	r8, r3
   19e3c:	e7d2      	b.n	19de4 <floor+0x94>
   19e3e:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   19e42:	4b08      	ldr	r3, [pc, #32]	; (19e64 <floor+0x114>)
   19e44:	4322      	orrs	r2, r4
   19e46:	bf18      	it	ne
   19e48:	461d      	movne	r5, r3
   19e4a:	2700      	movs	r7, #0
   19e4c:	e7a6      	b.n	19d9c <floor+0x4c>
   19e4e:	f105 0801 	add.w	r8, r5, #1
   19e52:	e7c7      	b.n	19de4 <floor+0x94>
   19e54:	f3af 8000 	nop.w
   19e58:	8800759c 	.word	0x8800759c
   19e5c:	7e37e43c 	.word	0x7e37e43c
   19e60:	000fffff 	.word	0x000fffff
   19e64:	bff00000 	.word	0xbff00000

00019e68 <pow>:
   19e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e6c:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 1a160 <pow+0x2f8>
   19e70:	b08d      	sub	sp, #52	; 0x34
   19e72:	4606      	mov	r6, r0
   19e74:	460f      	mov	r7, r1
   19e76:	4614      	mov	r4, r2
   19e78:	461d      	mov	r5, r3
   19e7a:	f000 f975 	bl	1a168 <__ieee754_pow>
   19e7e:	f999 8000 	ldrsb.w	r8, [r9]
   19e82:	f1b8 3fff 	cmp.w	r8, #4294967295
   19e86:	e9cd 0100 	strd	r0, r1, [sp]
   19e8a:	d036      	beq.n	19efa <pow+0x92>
   19e8c:	4622      	mov	r2, r4
   19e8e:	462b      	mov	r3, r5
   19e90:	4620      	mov	r0, r4
   19e92:	4629      	mov	r1, r5
   19e94:	f001 fce0 	bl	1b858 <__aeabi_dcmpun>
   19e98:	4683      	mov	fp, r0
   19e9a:	bb70      	cbnz	r0, 19efa <pow+0x92>
   19e9c:	4632      	mov	r2, r6
   19e9e:	463b      	mov	r3, r7
   19ea0:	4630      	mov	r0, r6
   19ea2:	4639      	mov	r1, r7
   19ea4:	f001 fcd8 	bl	1b858 <__aeabi_dcmpun>
   19ea8:	2200      	movs	r2, #0
   19eaa:	4682      	mov	sl, r0
   19eac:	2300      	movs	r3, #0
   19eae:	2800      	cmp	r0, #0
   19eb0:	f040 80a0 	bne.w	19ff4 <pow+0x18c>
   19eb4:	4630      	mov	r0, r6
   19eb6:	4639      	mov	r1, r7
   19eb8:	f001 fc9c 	bl	1b7f4 <__aeabi_dcmpeq>
   19ebc:	b310      	cbz	r0, 19f04 <pow+0x9c>
   19ebe:	2200      	movs	r2, #0
   19ec0:	2300      	movs	r3, #0
   19ec2:	4620      	mov	r0, r4
   19ec4:	4629      	mov	r1, r5
   19ec6:	f001 fc95 	bl	1b7f4 <__aeabi_dcmpeq>
   19eca:	4683      	mov	fp, r0
   19ecc:	2800      	cmp	r0, #0
   19ece:	d06a      	beq.n	19fa6 <pow+0x13e>
   19ed0:	2201      	movs	r2, #1
   19ed2:	4b9c      	ldr	r3, [pc, #624]	; (1a144 <pow+0x2dc>)
   19ed4:	9202      	str	r2, [sp, #8]
   19ed6:	2100      	movs	r1, #0
   19ed8:	2200      	movs	r2, #0
   19eda:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   19ede:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19ee2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19ee6:	e9cd 1208 	strd	r1, r2, [sp, #32]
   19eea:	9303      	str	r3, [sp, #12]
   19eec:	f1b8 0f00 	cmp.w	r8, #0
   19ef0:	d045      	beq.n	19f7e <pow+0x116>
   19ef2:	4c95      	ldr	r4, [pc, #596]	; (1a148 <pow+0x2e0>)
   19ef4:	2300      	movs	r3, #0
   19ef6:	e9cd 3400 	strd	r3, r4, [sp]
   19efa:	e9dd 0100 	ldrd	r0, r1, [sp]
   19efe:	b00d      	add	sp, #52	; 0x34
   19f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f04:	e9dd 0100 	ldrd	r0, r1, [sp]
   19f08:	f000 ff34 	bl	1ad74 <finite>
   19f0c:	4680      	mov	r8, r0
   19f0e:	2800      	cmp	r0, #0
   19f10:	f000 808b 	beq.w	1a02a <pow+0x1c2>
   19f14:	f04f 0a00 	mov.w	sl, #0
   19f18:	f04f 0b00 	mov.w	fp, #0
   19f1c:	4652      	mov	r2, sl
   19f1e:	465b      	mov	r3, fp
   19f20:	e9dd 0100 	ldrd	r0, r1, [sp]
   19f24:	f001 fc66 	bl	1b7f4 <__aeabi_dcmpeq>
   19f28:	2800      	cmp	r0, #0
   19f2a:	d0e6      	beq.n	19efa <pow+0x92>
   19f2c:	4630      	mov	r0, r6
   19f2e:	4639      	mov	r1, r7
   19f30:	f000 ff20 	bl	1ad74 <finite>
   19f34:	2800      	cmp	r0, #0
   19f36:	d0e0      	beq.n	19efa <pow+0x92>
   19f38:	4620      	mov	r0, r4
   19f3a:	4629      	mov	r1, r5
   19f3c:	f000 ff1a 	bl	1ad74 <finite>
   19f40:	2800      	cmp	r0, #0
   19f42:	d0da      	beq.n	19efa <pow+0x92>
   19f44:	f999 3000 	ldrsb.w	r3, [r9]
   19f48:	4a7e      	ldr	r2, [pc, #504]	; (1a144 <pow+0x2dc>)
   19f4a:	9203      	str	r2, [sp, #12]
   19f4c:	2104      	movs	r1, #4
   19f4e:	2200      	movs	r2, #0
   19f50:	2b02      	cmp	r3, #2
   19f52:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19f56:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19f5a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   19f5e:	9102      	str	r1, [sp, #8]
   19f60:	920a      	str	r2, [sp, #40]	; 0x28
   19f62:	d003      	beq.n	19f6c <pow+0x104>
   19f64:	a802      	add	r0, sp, #8
   19f66:	f000 ff0b 	bl	1ad80 <matherr>
   19f6a:	b968      	cbnz	r0, 19f88 <pow+0x120>
   19f6c:	f002 f93a 	bl	1c1e4 <__errno>
   19f70:	2322      	movs	r3, #34	; 0x22
   19f72:	6003      	str	r3, [r0, #0]
   19f74:	e008      	b.n	19f88 <pow+0x120>
   19f76:	2300      	movs	r3, #0
   19f78:	2400      	movs	r4, #0
   19f7a:	e9cd 3408 	strd	r3, r4, [sp, #32]
   19f7e:	a802      	add	r0, sp, #8
   19f80:	f000 fefe 	bl	1ad80 <matherr>
   19f84:	2800      	cmp	r0, #0
   19f86:	d030      	beq.n	19fea <pow+0x182>
   19f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19f8a:	b11b      	cbz	r3, 19f94 <pow+0x12c>
   19f8c:	f002 f92a 	bl	1c1e4 <__errno>
   19f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19f92:	6003      	str	r3, [r0, #0]
   19f94:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   19f98:	e9cd 3400 	strd	r3, r4, [sp]
   19f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
   19fa0:	b00d      	add	sp, #52	; 0x34
   19fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fa6:	4620      	mov	r0, r4
   19fa8:	4629      	mov	r1, r5
   19faa:	f000 fee3 	bl	1ad74 <finite>
   19fae:	2800      	cmp	r0, #0
   19fb0:	d0a3      	beq.n	19efa <pow+0x92>
   19fb2:	2200      	movs	r2, #0
   19fb4:	2300      	movs	r3, #0
   19fb6:	4620      	mov	r0, r4
   19fb8:	4629      	mov	r1, r5
   19fba:	f001 fc25 	bl	1b808 <__aeabi_dcmplt>
   19fbe:	2800      	cmp	r0, #0
   19fc0:	d09b      	beq.n	19efa <pow+0x92>
   19fc2:	f999 3000 	ldrsb.w	r3, [r9]
   19fc6:	4a5f      	ldr	r2, [pc, #380]	; (1a144 <pow+0x2dc>)
   19fc8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   19fcc:	2101      	movs	r1, #1
   19fce:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19fd2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19fd6:	9102      	str	r1, [sp, #8]
   19fd8:	9203      	str	r2, [sp, #12]
   19fda:	2b00      	cmp	r3, #0
   19fdc:	d0cb      	beq.n	19f76 <pow+0x10e>
   19fde:	495b      	ldr	r1, [pc, #364]	; (1a14c <pow+0x2e4>)
   19fe0:	2000      	movs	r0, #0
   19fe2:	2b02      	cmp	r3, #2
   19fe4:	e9cd 0108 	strd	r0, r1, [sp, #32]
   19fe8:	d1c9      	bne.n	19f7e <pow+0x116>
   19fea:	f002 f8fb 	bl	1c1e4 <__errno>
   19fee:	2321      	movs	r3, #33	; 0x21
   19ff0:	6003      	str	r3, [r0, #0]
   19ff2:	e7c9      	b.n	19f88 <pow+0x120>
   19ff4:	4620      	mov	r0, r4
   19ff6:	4629      	mov	r1, r5
   19ff8:	f001 fbfc 	bl	1b7f4 <__aeabi_dcmpeq>
   19ffc:	2800      	cmp	r0, #0
   19ffe:	f43f af7c 	beq.w	19efa <pow+0x92>
   1a002:	4b51      	ldr	r3, [pc, #324]	; (1a148 <pow+0x2e0>)
   1a004:	494f      	ldr	r1, [pc, #316]	; (1a144 <pow+0x2dc>)
   1a006:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   1a00a:	2001      	movs	r0, #1
   1a00c:	2200      	movs	r2, #0
   1a00e:	f1b8 0f02 	cmp.w	r8, #2
   1a012:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1a016:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1a01a:	9002      	str	r0, [sp, #8]
   1a01c:	9103      	str	r1, [sp, #12]
   1a01e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a022:	d1ac      	bne.n	19f7e <pow+0x116>
   1a024:	e9cd 2300 	strd	r2, r3, [sp]
   1a028:	e767      	b.n	19efa <pow+0x92>
   1a02a:	4630      	mov	r0, r6
   1a02c:	4639      	mov	r1, r7
   1a02e:	f000 fea1 	bl	1ad74 <finite>
   1a032:	2800      	cmp	r0, #0
   1a034:	f43f af6e 	beq.w	19f14 <pow+0xac>
   1a038:	4620      	mov	r0, r4
   1a03a:	4629      	mov	r1, r5
   1a03c:	f000 fe9a 	bl	1ad74 <finite>
   1a040:	2800      	cmp	r0, #0
   1a042:	f43f af67 	beq.w	19f14 <pow+0xac>
   1a046:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a04a:	4610      	mov	r0, r2
   1a04c:	4619      	mov	r1, r3
   1a04e:	f001 fc03 	bl	1b858 <__aeabi_dcmpun>
   1a052:	2800      	cmp	r0, #0
   1a054:	d158      	bne.n	1a108 <pow+0x2a0>
   1a056:	2303      	movs	r3, #3
   1a058:	f999 8000 	ldrsb.w	r8, [r9]
   1a05c:	9302      	str	r3, [sp, #8]
   1a05e:	4b39      	ldr	r3, [pc, #228]	; (1a144 <pow+0x2dc>)
   1a060:	900a      	str	r0, [sp, #40]	; 0x28
   1a062:	9303      	str	r3, [sp, #12]
   1a064:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1a068:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1a06c:	2200      	movs	r2, #0
   1a06e:	2300      	movs	r3, #0
   1a070:	4630      	mov	r0, r6
   1a072:	4639      	mov	r1, r7
   1a074:	f1b8 0f00 	cmp.w	r8, #0
   1a078:	d126      	bne.n	1a0c8 <pow+0x260>
   1a07a:	4f35      	ldr	r7, [pc, #212]	; (1a150 <pow+0x2e8>)
   1a07c:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   1a080:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1a084:	f001 fbc0 	bl	1b808 <__aeabi_dcmplt>
   1a088:	2800      	cmp	r0, #0
   1a08a:	f43f af6b 	beq.w	19f64 <pow+0xfc>
   1a08e:	2200      	movs	r2, #0
   1a090:	4b30      	ldr	r3, [pc, #192]	; (1a154 <pow+0x2ec>)
   1a092:	4620      	mov	r0, r4
   1a094:	4629      	mov	r1, r5
   1a096:	f001 f945 	bl	1b324 <__aeabi_dmul>
   1a09a:	4604      	mov	r4, r0
   1a09c:	460d      	mov	r5, r1
   1a09e:	f000 fe77 	bl	1ad90 <rint>
   1a0a2:	4602      	mov	r2, r0
   1a0a4:	460b      	mov	r3, r1
   1a0a6:	4620      	mov	r0, r4
   1a0a8:	4629      	mov	r1, r5
   1a0aa:	f001 fba3 	bl	1b7f4 <__aeabi_dcmpeq>
   1a0ae:	bb40      	cbnz	r0, 1a102 <pow+0x29a>
   1a0b0:	4b29      	ldr	r3, [pc, #164]	; (1a158 <pow+0x2f0>)
   1a0b2:	f999 8000 	ldrsb.w	r8, [r9]
   1a0b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1a0ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a0be:	f1b8 0f02 	cmp.w	r8, #2
   1a0c2:	f47f af4f 	bne.w	19f64 <pow+0xfc>
   1a0c6:	e751      	b.n	19f6c <pow+0x104>
   1a0c8:	4f24      	ldr	r7, [pc, #144]	; (1a15c <pow+0x2f4>)
   1a0ca:	2600      	movs	r6, #0
   1a0cc:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1a0d0:	f001 fb9a 	bl	1b808 <__aeabi_dcmplt>
   1a0d4:	2800      	cmp	r0, #0
   1a0d6:	d0f2      	beq.n	1a0be <pow+0x256>
   1a0d8:	2200      	movs	r2, #0
   1a0da:	4b1e      	ldr	r3, [pc, #120]	; (1a154 <pow+0x2ec>)
   1a0dc:	4620      	mov	r0, r4
   1a0de:	4629      	mov	r1, r5
   1a0e0:	f001 f920 	bl	1b324 <__aeabi_dmul>
   1a0e4:	4604      	mov	r4, r0
   1a0e6:	460d      	mov	r5, r1
   1a0e8:	f000 fe52 	bl	1ad90 <rint>
   1a0ec:	4602      	mov	r2, r0
   1a0ee:	460b      	mov	r3, r1
   1a0f0:	4620      	mov	r0, r4
   1a0f2:	4629      	mov	r1, r5
   1a0f4:	f001 fb7e 	bl	1b7f4 <__aeabi_dcmpeq>
   1a0f8:	b918      	cbnz	r0, 1a102 <pow+0x29a>
   1a0fa:	4b14      	ldr	r3, [pc, #80]	; (1a14c <pow+0x2e4>)
   1a0fc:	2200      	movs	r2, #0
   1a0fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a102:	f999 8000 	ldrsb.w	r8, [r9]
   1a106:	e7da      	b.n	1a0be <pow+0x256>
   1a108:	f999 9000 	ldrsb.w	r9, [r9]
   1a10c:	4b0d      	ldr	r3, [pc, #52]	; (1a144 <pow+0x2dc>)
   1a10e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1a112:	2201      	movs	r2, #1
   1a114:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1a118:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1a11c:	9202      	str	r2, [sp, #8]
   1a11e:	9303      	str	r3, [sp, #12]
   1a120:	f1b9 0f00 	cmp.w	r9, #0
   1a124:	f43f af27 	beq.w	19f76 <pow+0x10e>
   1a128:	2200      	movs	r2, #0
   1a12a:	2300      	movs	r3, #0
   1a12c:	4610      	mov	r0, r2
   1a12e:	4619      	mov	r1, r3
   1a130:	f001 fa22 	bl	1b578 <__aeabi_ddiv>
   1a134:	f1b9 0f02 	cmp.w	r9, #2
   1a138:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1a13c:	f43f af55 	beq.w	19fea <pow+0x182>
   1a140:	e71d      	b.n	19f7e <pow+0x116>
   1a142:	bf00      	nop
   1a144:	00022404 	.word	0x00022404
   1a148:	3ff00000 	.word	0x3ff00000
   1a14c:	fff00000 	.word	0xfff00000
   1a150:	47efffff 	.word	0x47efffff
   1a154:	3fe00000 	.word	0x3fe00000
   1a158:	c7efffff 	.word	0xc7efffff
   1a15c:	7ff00000 	.word	0x7ff00000
   1a160:	20000247 	.word	0x20000247
   1a164:	00000000 	.word	0x00000000

0001a168 <__ieee754_pow>:
   1a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a16c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1a170:	ea57 0402 	orrs.w	r4, r7, r2
   1a174:	b093      	sub	sp, #76	; 0x4c
   1a176:	d037      	beq.n	1a1e8 <__ieee754_pow+0x80>
   1a178:	4c67      	ldr	r4, [pc, #412]	; (1a318 <__ieee754_pow+0x1b0>)
   1a17a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   1a17e:	42a6      	cmp	r6, r4
   1a180:	4683      	mov	fp, r0
   1a182:	460d      	mov	r5, r1
   1a184:	dc29      	bgt.n	1a1da <__ieee754_pow+0x72>
   1a186:	469a      	mov	sl, r3
   1a188:	4696      	mov	lr, r2
   1a18a:	d025      	beq.n	1a1d8 <__ieee754_pow+0x70>
   1a18c:	42a7      	cmp	r7, r4
   1a18e:	dc24      	bgt.n	1a1da <__ieee754_pow+0x72>
   1a190:	4c61      	ldr	r4, [pc, #388]	; (1a318 <__ieee754_pow+0x1b0>)
   1a192:	42a7      	cmp	r7, r4
   1a194:	d079      	beq.n	1a28a <__ieee754_pow+0x122>
   1a196:	2d00      	cmp	r5, #0
   1a198:	4689      	mov	r9, r1
   1a19a:	4680      	mov	r8, r0
   1a19c:	e9cd 2300 	strd	r2, r3, [sp]
   1a1a0:	db77      	blt.n	1a292 <__ieee754_pow+0x12a>
   1a1a2:	2400      	movs	r4, #0
   1a1a4:	f1be 0f00 	cmp.w	lr, #0
   1a1a8:	d12c      	bne.n	1a204 <__ieee754_pow+0x9c>
   1a1aa:	4b5b      	ldr	r3, [pc, #364]	; (1a318 <__ieee754_pow+0x1b0>)
   1a1ac:	429f      	cmp	r7, r3
   1a1ae:	f000 808b 	beq.w	1a2c8 <__ieee754_pow+0x160>
   1a1b2:	4b5a      	ldr	r3, [pc, #360]	; (1a31c <__ieee754_pow+0x1b4>)
   1a1b4:	429f      	cmp	r7, r3
   1a1b6:	d061      	beq.n	1a27c <__ieee754_pow+0x114>
   1a1b8:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   1a1bc:	f000 83ba 	beq.w	1a934 <__ieee754_pow+0x7cc>
   1a1c0:	4b57      	ldr	r3, [pc, #348]	; (1a320 <__ieee754_pow+0x1b8>)
   1a1c2:	459a      	cmp	sl, r3
   1a1c4:	d11e      	bne.n	1a204 <__ieee754_pow+0x9c>
   1a1c6:	2d00      	cmp	r5, #0
   1a1c8:	db1c      	blt.n	1a204 <__ieee754_pow+0x9c>
   1a1ca:	4640      	mov	r0, r8
   1a1cc:	4649      	mov	r1, r9
   1a1ce:	b013      	add	sp, #76	; 0x4c
   1a1d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1d4:	f000 bd0e 	b.w	1abf4 <__ieee754_sqrt>
   1a1d8:	b158      	cbz	r0, 1a1f2 <__ieee754_pow+0x8a>
   1a1da:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   1a1de:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   1a1e2:	ea56 030b 	orrs.w	r3, r6, fp
   1a1e6:	d106      	bne.n	1a1f6 <__ieee754_pow+0x8e>
   1a1e8:	494c      	ldr	r1, [pc, #304]	; (1a31c <__ieee754_pow+0x1b4>)
   1a1ea:	2000      	movs	r0, #0
   1a1ec:	b013      	add	sp, #76	; 0x4c
   1a1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1f2:	42b7      	cmp	r7, r6
   1a1f4:	ddcc      	ble.n	1a190 <__ieee754_pow+0x28>
   1a1f6:	484b      	ldr	r0, [pc, #300]	; (1a324 <__ieee754_pow+0x1bc>)
   1a1f8:	b013      	add	sp, #76	; 0x4c
   1a1fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1fe:	f000 bdc1 	b.w	1ad84 <nan>
   1a202:	2400      	movs	r4, #0
   1a204:	4640      	mov	r0, r8
   1a206:	4649      	mov	r1, r9
   1a208:	f000 fdb0 	bl	1ad6c <fabs>
   1a20c:	f1bb 0f00 	cmp.w	fp, #0
   1a210:	d119      	bne.n	1a246 <__ieee754_pow+0xde>
   1a212:	b126      	cbz	r6, 1a21e <__ieee754_pow+0xb6>
   1a214:	4b41      	ldr	r3, [pc, #260]	; (1a31c <__ieee754_pow+0x1b4>)
   1a216:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   1a21a:	429a      	cmp	r2, r3
   1a21c:	d113      	bne.n	1a246 <__ieee754_pow+0xde>
   1a21e:	f1ba 0f00 	cmp.w	sl, #0
   1a222:	f2c0 83bc 	blt.w	1a99e <__ieee754_pow+0x836>
   1a226:	2d00      	cmp	r5, #0
   1a228:	dae0      	bge.n	1a1ec <__ieee754_pow+0x84>
   1a22a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   1a22e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   1a232:	ea56 0304 	orrs.w	r3, r6, r4
   1a236:	f000 848f 	beq.w	1ab58 <__ieee754_pow+0x9f0>
   1a23a:	2c01      	cmp	r4, #1
   1a23c:	d1d6      	bne.n	1a1ec <__ieee754_pow+0x84>
   1a23e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1a242:	4619      	mov	r1, r3
   1a244:	e7d2      	b.n	1a1ec <__ieee754_pow+0x84>
   1a246:	0fed      	lsrs	r5, r5, #31
   1a248:	3d01      	subs	r5, #1
   1a24a:	ea54 0305 	orrs.w	r3, r4, r5
   1a24e:	d04e      	beq.n	1a2ee <__ieee754_pow+0x186>
   1a250:	4b35      	ldr	r3, [pc, #212]	; (1a328 <__ieee754_pow+0x1c0>)
   1a252:	429f      	cmp	r7, r3
   1a254:	dd6e      	ble.n	1a334 <__ieee754_pow+0x1cc>
   1a256:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   1a25a:	429f      	cmp	r7, r3
   1a25c:	f340 83e8 	ble.w	1aa30 <__ieee754_pow+0x8c8>
   1a260:	4b32      	ldr	r3, [pc, #200]	; (1a32c <__ieee754_pow+0x1c4>)
   1a262:	429e      	cmp	r6, r3
   1a264:	dd4e      	ble.n	1a304 <__ieee754_pow+0x19c>
   1a266:	f1ba 0f00 	cmp.w	sl, #0
   1a26a:	dd4e      	ble.n	1a30a <__ieee754_pow+0x1a2>
   1a26c:	a328      	add	r3, pc, #160	; (adr r3, 1a310 <__ieee754_pow+0x1a8>)
   1a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a272:	4610      	mov	r0, r2
   1a274:	4619      	mov	r1, r3
   1a276:	f001 f855 	bl	1b324 <__aeabi_dmul>
   1a27a:	e7b7      	b.n	1a1ec <__ieee754_pow+0x84>
   1a27c:	f1ba 0f00 	cmp.w	sl, #0
   1a280:	f2c0 843c 	blt.w	1aafc <__ieee754_pow+0x994>
   1a284:	4640      	mov	r0, r8
   1a286:	4649      	mov	r1, r9
   1a288:	e7b0      	b.n	1a1ec <__ieee754_pow+0x84>
   1a28a:	f1be 0f00 	cmp.w	lr, #0
   1a28e:	d082      	beq.n	1a196 <__ieee754_pow+0x2e>
   1a290:	e7a3      	b.n	1a1da <__ieee754_pow+0x72>
   1a292:	4b27      	ldr	r3, [pc, #156]	; (1a330 <__ieee754_pow+0x1c8>)
   1a294:	429f      	cmp	r7, r3
   1a296:	dc28      	bgt.n	1a2ea <__ieee754_pow+0x182>
   1a298:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   1a29c:	429f      	cmp	r7, r3
   1a29e:	dd80      	ble.n	1a1a2 <__ieee754_pow+0x3a>
   1a2a0:	153b      	asrs	r3, r7, #20
   1a2a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1a2a6:	2b14      	cmp	r3, #20
   1a2a8:	f340 843e 	ble.w	1ab28 <__ieee754_pow+0x9c0>
   1a2ac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   1a2b0:	fa2e f203 	lsr.w	r2, lr, r3
   1a2b4:	fa02 f303 	lsl.w	r3, r2, r3
   1a2b8:	459e      	cmp	lr, r3
   1a2ba:	f47f af72 	bne.w	1a1a2 <__ieee754_pow+0x3a>
   1a2be:	f002 0201 	and.w	r2, r2, #1
   1a2c2:	f1c2 0402 	rsb	r4, r2, #2
   1a2c6:	e76d      	b.n	1a1a4 <__ieee754_pow+0x3c>
   1a2c8:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   1a2cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1a2d0:	ea53 030b 	orrs.w	r3, r3, fp
   1a2d4:	d088      	beq.n	1a1e8 <__ieee754_pow+0x80>
   1a2d6:	4b15      	ldr	r3, [pc, #84]	; (1a32c <__ieee754_pow+0x1c4>)
   1a2d8:	429e      	cmp	r6, r3
   1a2da:	f340 8332 	ble.w	1a942 <__ieee754_pow+0x7da>
   1a2de:	f1ba 0f00 	cmp.w	sl, #0
   1a2e2:	db12      	blt.n	1a30a <__ieee754_pow+0x1a2>
   1a2e4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a2e8:	e780      	b.n	1a1ec <__ieee754_pow+0x84>
   1a2ea:	2402      	movs	r4, #2
   1a2ec:	e75a      	b.n	1a1a4 <__ieee754_pow+0x3c>
   1a2ee:	4642      	mov	r2, r8
   1a2f0:	464b      	mov	r3, r9
   1a2f2:	4640      	mov	r0, r8
   1a2f4:	4649      	mov	r1, r9
   1a2f6:	f000 fe61 	bl	1afbc <__aeabi_dsub>
   1a2fa:	4602      	mov	r2, r0
   1a2fc:	460b      	mov	r3, r1
   1a2fe:	f001 f93b 	bl	1b578 <__aeabi_ddiv>
   1a302:	e773      	b.n	1a1ec <__ieee754_pow+0x84>
   1a304:	f1ba 0f00 	cmp.w	sl, #0
   1a308:	dbb0      	blt.n	1a26c <__ieee754_pow+0x104>
   1a30a:	2000      	movs	r0, #0
   1a30c:	2100      	movs	r1, #0
   1a30e:	e76d      	b.n	1a1ec <__ieee754_pow+0x84>
   1a310:	8800759c 	.word	0x8800759c
   1a314:	7e37e43c 	.word	0x7e37e43c
   1a318:	7ff00000 	.word	0x7ff00000
   1a31c:	3ff00000 	.word	0x3ff00000
   1a320:	3fe00000 	.word	0x3fe00000
   1a324:	0002253c 	.word	0x0002253c
   1a328:	41e00000 	.word	0x41e00000
   1a32c:	3fefffff 	.word	0x3fefffff
   1a330:	433fffff 	.word	0x433fffff
   1a334:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   1a338:	f04f 0200 	mov.w	r2, #0
   1a33c:	da05      	bge.n	1a34a <__ieee754_pow+0x1e2>
   1a33e:	4bd4      	ldr	r3, [pc, #848]	; (1a690 <__ieee754_pow+0x528>)
   1a340:	f000 fff0 	bl	1b324 <__aeabi_dmul>
   1a344:	f06f 0234 	mvn.w	r2, #52	; 0x34
   1a348:	460e      	mov	r6, r1
   1a34a:	1533      	asrs	r3, r6, #20
   1a34c:	4fd1      	ldr	r7, [pc, #836]	; (1a694 <__ieee754_pow+0x52c>)
   1a34e:	f3c6 0613 	ubfx	r6, r6, #0, #20
   1a352:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1a356:	4413      	add	r3, r2
   1a358:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   1a35c:	42be      	cmp	r6, r7
   1a35e:	461a      	mov	r2, r3
   1a360:	930d      	str	r3, [sp, #52]	; 0x34
   1a362:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   1a366:	f340 8321 	ble.w	1a9ac <__ieee754_pow+0x844>
   1a36a:	4bcb      	ldr	r3, [pc, #812]	; (1a698 <__ieee754_pow+0x530>)
   1a36c:	429e      	cmp	r6, r3
   1a36e:	f340 83fd 	ble.w	1ab6c <__ieee754_pow+0xa04>
   1a372:	4613      	mov	r3, r2
   1a374:	3301      	adds	r3, #1
   1a376:	930d      	str	r3, [sp, #52]	; 0x34
   1a378:	4bc8      	ldr	r3, [pc, #800]	; (1a69c <__ieee754_pow+0x534>)
   1a37a:	2200      	movs	r2, #0
   1a37c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a380:	2700      	movs	r7, #0
   1a382:	2600      	movs	r6, #0
   1a384:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1a388:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   1a38c:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   1a390:	2700      	movs	r7, #0
   1a392:	4602      	mov	r2, r0
   1a394:	4653      	mov	r3, sl
   1a396:	4651      	mov	r1, sl
   1a398:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1a39c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a3a0:	f000 fe0c 	bl	1afbc <__aeabi_dsub>
   1a3a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a3a8:	4680      	mov	r8, r0
   1a3aa:	4689      	mov	r9, r1
   1a3ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1a3b0:	f000 fe06 	bl	1afc0 <__adddf3>
   1a3b4:	4602      	mov	r2, r0
   1a3b6:	460b      	mov	r3, r1
   1a3b8:	2000      	movs	r0, #0
   1a3ba:	49b8      	ldr	r1, [pc, #736]	; (1a69c <__ieee754_pow+0x534>)
   1a3bc:	f001 f8dc 	bl	1b578 <__aeabi_ddiv>
   1a3c0:	460a      	mov	r2, r1
   1a3c2:	4601      	mov	r1, r0
   1a3c4:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   1a3c8:	4613      	mov	r3, r2
   1a3ca:	4649      	mov	r1, r9
   1a3cc:	4602      	mov	r2, r0
   1a3ce:	4640      	mov	r0, r8
   1a3d0:	f000 ffa8 	bl	1b324 <__aeabi_dmul>
   1a3d4:	ea4f 036a 	mov.w	r3, sl, asr #1
   1a3d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1a3dc:	468c      	mov	ip, r1
   1a3de:	4683      	mov	fp, r0
   1a3e0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   1a3e4:	e9cd bc04 	strd	fp, ip, [sp, #16]
   1a3e8:	46da      	mov	sl, fp
   1a3ea:	468b      	mov	fp, r1
   1a3ec:	19d9      	adds	r1, r3, r7
   1a3ee:	2300      	movs	r3, #0
   1a3f0:	e9cd ab02 	strd	sl, fp, [sp, #8]
   1a3f4:	9302      	str	r3, [sp, #8]
   1a3f6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1a3fa:	2000      	movs	r0, #0
   1a3fc:	4606      	mov	r6, r0
   1a3fe:	460f      	mov	r7, r1
   1a400:	4602      	mov	r2, r0
   1a402:	460b      	mov	r3, r1
   1a404:	4650      	mov	r0, sl
   1a406:	4659      	mov	r1, fp
   1a408:	f000 ff8c 	bl	1b324 <__aeabi_dmul>
   1a40c:	4602      	mov	r2, r0
   1a40e:	460b      	mov	r3, r1
   1a410:	4640      	mov	r0, r8
   1a412:	4649      	mov	r1, r9
   1a414:	f000 fdd2 	bl	1afbc <__aeabi_dsub>
   1a418:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a41c:	4680      	mov	r8, r0
   1a41e:	4689      	mov	r9, r1
   1a420:	4630      	mov	r0, r6
   1a422:	4639      	mov	r1, r7
   1a424:	f000 fdca 	bl	1afbc <__aeabi_dsub>
   1a428:	4602      	mov	r2, r0
   1a42a:	460b      	mov	r3, r1
   1a42c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1a430:	f000 fdc4 	bl	1afbc <__aeabi_dsub>
   1a434:	4652      	mov	r2, sl
   1a436:	465b      	mov	r3, fp
   1a438:	f000 ff74 	bl	1b324 <__aeabi_dmul>
   1a43c:	4602      	mov	r2, r0
   1a43e:	460b      	mov	r3, r1
   1a440:	4640      	mov	r0, r8
   1a442:	4649      	mov	r1, r9
   1a444:	f000 fdba 	bl	1afbc <__aeabi_dsub>
   1a448:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1a44c:	f000 ff6a 	bl	1b324 <__aeabi_dmul>
   1a450:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   1a454:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1a458:	4632      	mov	r2, r6
   1a45a:	463b      	mov	r3, r7
   1a45c:	4630      	mov	r0, r6
   1a45e:	4639      	mov	r1, r7
   1a460:	f000 ff60 	bl	1b324 <__aeabi_dmul>
   1a464:	a378      	add	r3, pc, #480	; (adr r3, 1a648 <__ieee754_pow+0x4e0>)
   1a466:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a46a:	4606      	mov	r6, r0
   1a46c:	460f      	mov	r7, r1
   1a46e:	f000 ff59 	bl	1b324 <__aeabi_dmul>
   1a472:	a377      	add	r3, pc, #476	; (adr r3, 1a650 <__ieee754_pow+0x4e8>)
   1a474:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a478:	f000 fda2 	bl	1afc0 <__adddf3>
   1a47c:	4632      	mov	r2, r6
   1a47e:	463b      	mov	r3, r7
   1a480:	f000 ff50 	bl	1b324 <__aeabi_dmul>
   1a484:	a374      	add	r3, pc, #464	; (adr r3, 1a658 <__ieee754_pow+0x4f0>)
   1a486:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a48a:	f000 fd99 	bl	1afc0 <__adddf3>
   1a48e:	4632      	mov	r2, r6
   1a490:	463b      	mov	r3, r7
   1a492:	f000 ff47 	bl	1b324 <__aeabi_dmul>
   1a496:	a372      	add	r3, pc, #456	; (adr r3, 1a660 <__ieee754_pow+0x4f8>)
   1a498:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a49c:	f000 fd90 	bl	1afc0 <__adddf3>
   1a4a0:	4632      	mov	r2, r6
   1a4a2:	463b      	mov	r3, r7
   1a4a4:	f000 ff3e 	bl	1b324 <__aeabi_dmul>
   1a4a8:	a36f      	add	r3, pc, #444	; (adr r3, 1a668 <__ieee754_pow+0x500>)
   1a4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a4ae:	f000 fd87 	bl	1afc0 <__adddf3>
   1a4b2:	4632      	mov	r2, r6
   1a4b4:	463b      	mov	r3, r7
   1a4b6:	f000 ff35 	bl	1b324 <__aeabi_dmul>
   1a4ba:	a36d      	add	r3, pc, #436	; (adr r3, 1a670 <__ieee754_pow+0x508>)
   1a4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a4c0:	f000 fd7e 	bl	1afc0 <__adddf3>
   1a4c4:	4632      	mov	r2, r6
   1a4c6:	4680      	mov	r8, r0
   1a4c8:	4689      	mov	r9, r1
   1a4ca:	463b      	mov	r3, r7
   1a4cc:	4630      	mov	r0, r6
   1a4ce:	4639      	mov	r1, r7
   1a4d0:	f000 ff28 	bl	1b324 <__aeabi_dmul>
   1a4d4:	4602      	mov	r2, r0
   1a4d6:	460b      	mov	r3, r1
   1a4d8:	4640      	mov	r0, r8
   1a4da:	4649      	mov	r1, r9
   1a4dc:	f000 ff22 	bl	1b324 <__aeabi_dmul>
   1a4e0:	4652      	mov	r2, sl
   1a4e2:	4606      	mov	r6, r0
   1a4e4:	460f      	mov	r7, r1
   1a4e6:	465b      	mov	r3, fp
   1a4e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a4ec:	f000 fd68 	bl	1afc0 <__adddf3>
   1a4f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a4f4:	f000 ff16 	bl	1b324 <__aeabi_dmul>
   1a4f8:	4632      	mov	r2, r6
   1a4fa:	463b      	mov	r3, r7
   1a4fc:	f000 fd60 	bl	1afc0 <__adddf3>
   1a500:	4652      	mov	r2, sl
   1a502:	4680      	mov	r8, r0
   1a504:	4689      	mov	r9, r1
   1a506:	465b      	mov	r3, fp
   1a508:	4650      	mov	r0, sl
   1a50a:	4659      	mov	r1, fp
   1a50c:	f000 ff0a 	bl	1b324 <__aeabi_dmul>
   1a510:	2200      	movs	r2, #0
   1a512:	4b63      	ldr	r3, [pc, #396]	; (1a6a0 <__ieee754_pow+0x538>)
   1a514:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1a518:	f000 fd52 	bl	1afc0 <__adddf3>
   1a51c:	4642      	mov	r2, r8
   1a51e:	464b      	mov	r3, r9
   1a520:	f000 fd4e 	bl	1afc0 <__adddf3>
   1a524:	9802      	ldr	r0, [sp, #8]
   1a526:	460f      	mov	r7, r1
   1a528:	4606      	mov	r6, r0
   1a52a:	4632      	mov	r2, r6
   1a52c:	463b      	mov	r3, r7
   1a52e:	4650      	mov	r0, sl
   1a530:	4659      	mov	r1, fp
   1a532:	f000 fef7 	bl	1b324 <__aeabi_dmul>
   1a536:	2200      	movs	r2, #0
   1a538:	4682      	mov	sl, r0
   1a53a:	468b      	mov	fp, r1
   1a53c:	4b58      	ldr	r3, [pc, #352]	; (1a6a0 <__ieee754_pow+0x538>)
   1a53e:	4630      	mov	r0, r6
   1a540:	4639      	mov	r1, r7
   1a542:	f000 fd3b 	bl	1afbc <__aeabi_dsub>
   1a546:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1a54a:	f000 fd37 	bl	1afbc <__aeabi_dsub>
   1a54e:	4602      	mov	r2, r0
   1a550:	460b      	mov	r3, r1
   1a552:	4640      	mov	r0, r8
   1a554:	4649      	mov	r1, r9
   1a556:	f000 fd31 	bl	1afbc <__aeabi_dsub>
   1a55a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a55e:	f000 fee1 	bl	1b324 <__aeabi_dmul>
   1a562:	4632      	mov	r2, r6
   1a564:	4680      	mov	r8, r0
   1a566:	4689      	mov	r9, r1
   1a568:	463b      	mov	r3, r7
   1a56a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1a56e:	f000 fed9 	bl	1b324 <__aeabi_dmul>
   1a572:	4602      	mov	r2, r0
   1a574:	460b      	mov	r3, r1
   1a576:	4640      	mov	r0, r8
   1a578:	4649      	mov	r1, r9
   1a57a:	f000 fd21 	bl	1afc0 <__adddf3>
   1a57e:	4680      	mov	r8, r0
   1a580:	4689      	mov	r9, r1
   1a582:	4602      	mov	r2, r0
   1a584:	460b      	mov	r3, r1
   1a586:	4650      	mov	r0, sl
   1a588:	4659      	mov	r1, fp
   1a58a:	e9cd ab04 	strd	sl, fp, [sp, #16]
   1a58e:	f000 fd17 	bl	1afc0 <__adddf3>
   1a592:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1a596:	a338      	add	r3, pc, #224	; (adr r3, 1a678 <__ieee754_pow+0x510>)
   1a598:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a59c:	4650      	mov	r0, sl
   1a59e:	460f      	mov	r7, r1
   1a5a0:	f000 fec0 	bl	1b324 <__aeabi_dmul>
   1a5a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a5a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1a5ac:	4639      	mov	r1, r7
   1a5ae:	4650      	mov	r0, sl
   1a5b0:	f000 fd04 	bl	1afbc <__aeabi_dsub>
   1a5b4:	4602      	mov	r2, r0
   1a5b6:	460b      	mov	r3, r1
   1a5b8:	4640      	mov	r0, r8
   1a5ba:	4649      	mov	r1, r9
   1a5bc:	f000 fcfe 	bl	1afbc <__aeabi_dsub>
   1a5c0:	a32f      	add	r3, pc, #188	; (adr r3, 1a680 <__ieee754_pow+0x518>)
   1a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a5c6:	f000 fead 	bl	1b324 <__aeabi_dmul>
   1a5ca:	a32f      	add	r3, pc, #188	; (adr r3, 1a688 <__ieee754_pow+0x520>)
   1a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a5d0:	4680      	mov	r8, r0
   1a5d2:	4689      	mov	r9, r1
   1a5d4:	4650      	mov	r0, sl
   1a5d6:	4639      	mov	r1, r7
   1a5d8:	f000 fea4 	bl	1b324 <__aeabi_dmul>
   1a5dc:	4602      	mov	r2, r0
   1a5de:	460b      	mov	r3, r1
   1a5e0:	4640      	mov	r0, r8
   1a5e2:	4649      	mov	r1, r9
   1a5e4:	f000 fcec 	bl	1afc0 <__adddf3>
   1a5e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1a5ec:	f000 fce8 	bl	1afc0 <__adddf3>
   1a5f0:	4680      	mov	r8, r0
   1a5f2:	980d      	ldr	r0, [sp, #52]	; 0x34
   1a5f4:	4689      	mov	r9, r1
   1a5f6:	f000 fe2f 	bl	1b258 <__aeabi_i2d>
   1a5fa:	4642      	mov	r2, r8
   1a5fc:	4606      	mov	r6, r0
   1a5fe:	460f      	mov	r7, r1
   1a600:	464b      	mov	r3, r9
   1a602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1a606:	f000 fcdb 	bl	1afc0 <__adddf3>
   1a60a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1a60e:	f000 fcd7 	bl	1afc0 <__adddf3>
   1a612:	4632      	mov	r2, r6
   1a614:	463b      	mov	r3, r7
   1a616:	f000 fcd3 	bl	1afc0 <__adddf3>
   1a61a:	4632      	mov	r2, r6
   1a61c:	463b      	mov	r3, r7
   1a61e:	4650      	mov	r0, sl
   1a620:	468b      	mov	fp, r1
   1a622:	f000 fccb 	bl	1afbc <__aeabi_dsub>
   1a626:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1a62a:	f000 fcc7 	bl	1afbc <__aeabi_dsub>
   1a62e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a632:	f000 fcc3 	bl	1afbc <__aeabi_dsub>
   1a636:	4602      	mov	r2, r0
   1a638:	460b      	mov	r3, r1
   1a63a:	4640      	mov	r0, r8
   1a63c:	4649      	mov	r1, r9
   1a63e:	f000 fcbd 	bl	1afbc <__aeabi_dsub>
   1a642:	4680      	mov	r8, r0
   1a644:	e02e      	b.n	1a6a4 <__ieee754_pow+0x53c>
   1a646:	bf00      	nop
   1a648:	4a454eef 	.word	0x4a454eef
   1a64c:	3fca7e28 	.word	0x3fca7e28
   1a650:	93c9db65 	.word	0x93c9db65
   1a654:	3fcd864a 	.word	0x3fcd864a
   1a658:	a91d4101 	.word	0xa91d4101
   1a65c:	3fd17460 	.word	0x3fd17460
   1a660:	518f264d 	.word	0x518f264d
   1a664:	3fd55555 	.word	0x3fd55555
   1a668:	db6fabff 	.word	0xdb6fabff
   1a66c:	3fdb6db6 	.word	0x3fdb6db6
   1a670:	33333303 	.word	0x33333303
   1a674:	3fe33333 	.word	0x3fe33333
   1a678:	e0000000 	.word	0xe0000000
   1a67c:	3feec709 	.word	0x3feec709
   1a680:	dc3a03fd 	.word	0xdc3a03fd
   1a684:	3feec709 	.word	0x3feec709
   1a688:	145b01f5 	.word	0x145b01f5
   1a68c:	be3e2fe0 	.word	0xbe3e2fe0
   1a690:	43400000 	.word	0x43400000
   1a694:	0003988e 	.word	0x0003988e
   1a698:	000bb679 	.word	0x000bb679
   1a69c:	3ff00000 	.word	0x3ff00000
   1a6a0:	40080000 	.word	0x40080000
   1a6a4:	4689      	mov	r9, r1
   1a6a6:	3c01      	subs	r4, #1
   1a6a8:	ea54 0305 	orrs.w	r3, r4, r5
   1a6ac:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a6b0:	bf14      	ite	ne
   1a6b2:	4cd9      	ldrne	r4, [pc, #868]	; (1aa18 <__ieee754_pow+0x8b0>)
   1a6b4:	4cd9      	ldreq	r4, [pc, #868]	; (1aa1c <__ieee754_pow+0x8b4>)
   1a6b6:	2300      	movs	r3, #0
   1a6b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1a6bc:	4603      	mov	r3, r0
   1a6be:	460c      	mov	r4, r1
   1a6c0:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1a6c4:	2300      	movs	r3, #0
   1a6c6:	9302      	str	r3, [sp, #8]
   1a6c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   1a6cc:	4622      	mov	r2, r4
   1a6ce:	462b      	mov	r3, r5
   1a6d0:	f000 fc74 	bl	1afbc <__aeabi_dsub>
   1a6d4:	4652      	mov	r2, sl
   1a6d6:	465b      	mov	r3, fp
   1a6d8:	f000 fe24 	bl	1b324 <__aeabi_dmul>
   1a6dc:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a6e0:	4606      	mov	r6, r0
   1a6e2:	460f      	mov	r7, r1
   1a6e4:	4640      	mov	r0, r8
   1a6e6:	4649      	mov	r1, r9
   1a6e8:	f000 fe1c 	bl	1b324 <__aeabi_dmul>
   1a6ec:	4602      	mov	r2, r0
   1a6ee:	460b      	mov	r3, r1
   1a6f0:	4630      	mov	r0, r6
   1a6f2:	4639      	mov	r1, r7
   1a6f4:	f000 fc64 	bl	1afc0 <__adddf3>
   1a6f8:	4622      	mov	r2, r4
   1a6fa:	4680      	mov	r8, r0
   1a6fc:	4689      	mov	r9, r1
   1a6fe:	462b      	mov	r3, r5
   1a700:	4650      	mov	r0, sl
   1a702:	4659      	mov	r1, fp
   1a704:	e9cd 8900 	strd	r8, r9, [sp]
   1a708:	f000 fe0c 	bl	1b324 <__aeabi_dmul>
   1a70c:	460b      	mov	r3, r1
   1a70e:	4602      	mov	r2, r0
   1a710:	4606      	mov	r6, r0
   1a712:	460f      	mov	r7, r1
   1a714:	4640      	mov	r0, r8
   1a716:	4649      	mov	r1, r9
   1a718:	f000 fc52 	bl	1afc0 <__adddf3>
   1a71c:	4bc0      	ldr	r3, [pc, #768]	; (1aa20 <__ieee754_pow+0x8b8>)
   1a71e:	4299      	cmp	r1, r3
   1a720:	4604      	mov	r4, r0
   1a722:	460d      	mov	r5, r1
   1a724:	468a      	mov	sl, r1
   1a726:	f340 8116 	ble.w	1a956 <__ieee754_pow+0x7ee>
   1a72a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   1a72e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   1a732:	4303      	orrs	r3, r0
   1a734:	f040 81ea 	bne.w	1ab0c <__ieee754_pow+0x9a4>
   1a738:	a3a3      	add	r3, pc, #652	; (adr r3, 1a9c8 <__ieee754_pow+0x860>)
   1a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a73e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a742:	f000 fc3d 	bl	1afc0 <__adddf3>
   1a746:	4632      	mov	r2, r6
   1a748:	4680      	mov	r8, r0
   1a74a:	4689      	mov	r9, r1
   1a74c:	463b      	mov	r3, r7
   1a74e:	4620      	mov	r0, r4
   1a750:	4629      	mov	r1, r5
   1a752:	f000 fc33 	bl	1afbc <__aeabi_dsub>
   1a756:	4602      	mov	r2, r0
   1a758:	460b      	mov	r3, r1
   1a75a:	4640      	mov	r0, r8
   1a75c:	4649      	mov	r1, r9
   1a75e:	f001 f871 	bl	1b844 <__aeabi_dcmpgt>
   1a762:	2800      	cmp	r0, #0
   1a764:	f040 81d2 	bne.w	1ab0c <__ieee754_pow+0x9a4>
   1a768:	46a8      	mov	r8, r5
   1a76a:	ea4f 5328 	mov.w	r3, r8, asr #20
   1a76e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1a772:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1a776:	fa42 f303 	asr.w	r3, r2, r3
   1a77a:	4453      	add	r3, sl
   1a77c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   1a780:	4da8      	ldr	r5, [pc, #672]	; (1aa24 <__ieee754_pow+0x8bc>)
   1a782:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   1a786:	4115      	asrs	r5, r2
   1a788:	f3c3 0413 	ubfx	r4, r3, #0, #20
   1a78c:	ea23 0105 	bic.w	r1, r3, r5
   1a790:	2000      	movs	r0, #0
   1a792:	f1c2 0b14 	rsb	fp, r2, #20
   1a796:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   1a79a:	f1ba 0f00 	cmp.w	sl, #0
   1a79e:	4602      	mov	r2, r0
   1a7a0:	460b      	mov	r3, r1
   1a7a2:	fa44 fb0b 	asr.w	fp, r4, fp
   1a7a6:	4630      	mov	r0, r6
   1a7a8:	4639      	mov	r1, r7
   1a7aa:	bfb8      	it	lt
   1a7ac:	f1cb 0b00 	rsblt	fp, fp, #0
   1a7b0:	f000 fc04 	bl	1afbc <__aeabi_dsub>
   1a7b4:	4602      	mov	r2, r0
   1a7b6:	460b      	mov	r3, r1
   1a7b8:	4606      	mov	r6, r0
   1a7ba:	460f      	mov	r7, r1
   1a7bc:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a7c0:	f000 fbfe 	bl	1afc0 <__adddf3>
   1a7c4:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   1a7c8:	460d      	mov	r5, r1
   1a7ca:	2400      	movs	r4, #0
   1a7cc:	a380      	add	r3, pc, #512	; (adr r3, 1a9d0 <__ieee754_pow+0x868>)
   1a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a7d2:	4620      	mov	r0, r4
   1a7d4:	4629      	mov	r1, r5
   1a7d6:	f000 fda5 	bl	1b324 <__aeabi_dmul>
   1a7da:	4632      	mov	r2, r6
   1a7dc:	4680      	mov	r8, r0
   1a7de:	4689      	mov	r9, r1
   1a7e0:	463b      	mov	r3, r7
   1a7e2:	4620      	mov	r0, r4
   1a7e4:	4629      	mov	r1, r5
   1a7e6:	f000 fbe9 	bl	1afbc <__aeabi_dsub>
   1a7ea:	4602      	mov	r2, r0
   1a7ec:	460b      	mov	r3, r1
   1a7ee:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a7f2:	f000 fbe3 	bl	1afbc <__aeabi_dsub>
   1a7f6:	a378      	add	r3, pc, #480	; (adr r3, 1a9d8 <__ieee754_pow+0x870>)
   1a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a7fc:	f000 fd92 	bl	1b324 <__aeabi_dmul>
   1a800:	a377      	add	r3, pc, #476	; (adr r3, 1a9e0 <__ieee754_pow+0x878>)
   1a802:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a806:	4606      	mov	r6, r0
   1a808:	460f      	mov	r7, r1
   1a80a:	4620      	mov	r0, r4
   1a80c:	4629      	mov	r1, r5
   1a80e:	f000 fd89 	bl	1b324 <__aeabi_dmul>
   1a812:	4602      	mov	r2, r0
   1a814:	460b      	mov	r3, r1
   1a816:	4630      	mov	r0, r6
   1a818:	4639      	mov	r1, r7
   1a81a:	f000 fbd1 	bl	1afc0 <__adddf3>
   1a81e:	4606      	mov	r6, r0
   1a820:	460f      	mov	r7, r1
   1a822:	4602      	mov	r2, r0
   1a824:	460b      	mov	r3, r1
   1a826:	4640      	mov	r0, r8
   1a828:	4649      	mov	r1, r9
   1a82a:	f000 fbc9 	bl	1afc0 <__adddf3>
   1a82e:	4642      	mov	r2, r8
   1a830:	464b      	mov	r3, r9
   1a832:	4604      	mov	r4, r0
   1a834:	460d      	mov	r5, r1
   1a836:	f000 fbc1 	bl	1afbc <__aeabi_dsub>
   1a83a:	4602      	mov	r2, r0
   1a83c:	460b      	mov	r3, r1
   1a83e:	4630      	mov	r0, r6
   1a840:	4639      	mov	r1, r7
   1a842:	f000 fbbb 	bl	1afbc <__aeabi_dsub>
   1a846:	4622      	mov	r2, r4
   1a848:	4680      	mov	r8, r0
   1a84a:	4689      	mov	r9, r1
   1a84c:	462b      	mov	r3, r5
   1a84e:	4620      	mov	r0, r4
   1a850:	4629      	mov	r1, r5
   1a852:	f000 fd67 	bl	1b324 <__aeabi_dmul>
   1a856:	a364      	add	r3, pc, #400	; (adr r3, 1a9e8 <__ieee754_pow+0x880>)
   1a858:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a85c:	4606      	mov	r6, r0
   1a85e:	460f      	mov	r7, r1
   1a860:	f000 fd60 	bl	1b324 <__aeabi_dmul>
   1a864:	a362      	add	r3, pc, #392	; (adr r3, 1a9f0 <__ieee754_pow+0x888>)
   1a866:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a86a:	f000 fba7 	bl	1afbc <__aeabi_dsub>
   1a86e:	4632      	mov	r2, r6
   1a870:	463b      	mov	r3, r7
   1a872:	f000 fd57 	bl	1b324 <__aeabi_dmul>
   1a876:	a360      	add	r3, pc, #384	; (adr r3, 1a9f8 <__ieee754_pow+0x890>)
   1a878:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a87c:	f000 fba0 	bl	1afc0 <__adddf3>
   1a880:	4632      	mov	r2, r6
   1a882:	463b      	mov	r3, r7
   1a884:	f000 fd4e 	bl	1b324 <__aeabi_dmul>
   1a888:	a35d      	add	r3, pc, #372	; (adr r3, 1aa00 <__ieee754_pow+0x898>)
   1a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a88e:	f000 fb95 	bl	1afbc <__aeabi_dsub>
   1a892:	4632      	mov	r2, r6
   1a894:	463b      	mov	r3, r7
   1a896:	f000 fd45 	bl	1b324 <__aeabi_dmul>
   1a89a:	a35b      	add	r3, pc, #364	; (adr r3, 1aa08 <__ieee754_pow+0x8a0>)
   1a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a8a0:	f000 fb8e 	bl	1afc0 <__adddf3>
   1a8a4:	4632      	mov	r2, r6
   1a8a6:	463b      	mov	r3, r7
   1a8a8:	f000 fd3c 	bl	1b324 <__aeabi_dmul>
   1a8ac:	4602      	mov	r2, r0
   1a8ae:	460b      	mov	r3, r1
   1a8b0:	4620      	mov	r0, r4
   1a8b2:	4629      	mov	r1, r5
   1a8b4:	f000 fb82 	bl	1afbc <__aeabi_dsub>
   1a8b8:	4606      	mov	r6, r0
   1a8ba:	460f      	mov	r7, r1
   1a8bc:	4602      	mov	r2, r0
   1a8be:	460b      	mov	r3, r1
   1a8c0:	4620      	mov	r0, r4
   1a8c2:	4629      	mov	r1, r5
   1a8c4:	f000 fd2e 	bl	1b324 <__aeabi_dmul>
   1a8c8:	2200      	movs	r2, #0
   1a8ca:	e9cd 0100 	strd	r0, r1, [sp]
   1a8ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a8d2:	4630      	mov	r0, r6
   1a8d4:	4639      	mov	r1, r7
   1a8d6:	f000 fb71 	bl	1afbc <__aeabi_dsub>
   1a8da:	4602      	mov	r2, r0
   1a8dc:	460b      	mov	r3, r1
   1a8de:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a8e2:	f000 fe49 	bl	1b578 <__aeabi_ddiv>
   1a8e6:	4642      	mov	r2, r8
   1a8e8:	4606      	mov	r6, r0
   1a8ea:	460f      	mov	r7, r1
   1a8ec:	464b      	mov	r3, r9
   1a8ee:	4620      	mov	r0, r4
   1a8f0:	4629      	mov	r1, r5
   1a8f2:	f000 fd17 	bl	1b324 <__aeabi_dmul>
   1a8f6:	4642      	mov	r2, r8
   1a8f8:	464b      	mov	r3, r9
   1a8fa:	f000 fb61 	bl	1afc0 <__adddf3>
   1a8fe:	4602      	mov	r2, r0
   1a900:	460b      	mov	r3, r1
   1a902:	4630      	mov	r0, r6
   1a904:	4639      	mov	r1, r7
   1a906:	f000 fb59 	bl	1afbc <__aeabi_dsub>
   1a90a:	4622      	mov	r2, r4
   1a90c:	462b      	mov	r3, r5
   1a90e:	f000 fb55 	bl	1afbc <__aeabi_dsub>
   1a912:	4602      	mov	r2, r0
   1a914:	460b      	mov	r3, r1
   1a916:	2000      	movs	r0, #0
   1a918:	493f      	ldr	r1, [pc, #252]	; (1aa18 <__ieee754_pow+0x8b0>)
   1a91a:	f000 fb4f 	bl	1afbc <__aeabi_dsub>
   1a91e:	448a      	add	sl, r1
   1a920:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   1a924:	f2c0 8133 	blt.w	1ab8e <__ieee754_pow+0xa26>
   1a928:	4651      	mov	r1, sl
   1a92a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a92e:	f000 fcf9 	bl	1b324 <__aeabi_dmul>
   1a932:	e45b      	b.n	1a1ec <__ieee754_pow+0x84>
   1a934:	4642      	mov	r2, r8
   1a936:	4640      	mov	r0, r8
   1a938:	464b      	mov	r3, r9
   1a93a:	4649      	mov	r1, r9
   1a93c:	f000 fcf2 	bl	1b324 <__aeabi_dmul>
   1a940:	e454      	b.n	1a1ec <__ieee754_pow+0x84>
   1a942:	f1ba 0f00 	cmp.w	sl, #0
   1a946:	f6bf ace0 	bge.w	1a30a <__ieee754_pow+0x1a2>
   1a94a:	e9dd 3400 	ldrd	r3, r4, [sp]
   1a94e:	4618      	mov	r0, r3
   1a950:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1a954:	e44a      	b.n	1a1ec <__ieee754_pow+0x84>
   1a956:	4b34      	ldr	r3, [pc, #208]	; (1aa28 <__ieee754_pow+0x8c0>)
   1a958:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   1a95c:	4598      	cmp	r8, r3
   1a95e:	f340 80f2 	ble.w	1ab46 <__ieee754_pow+0x9de>
   1a962:	4b32      	ldr	r3, [pc, #200]	; (1aa2c <__ieee754_pow+0x8c4>)
   1a964:	440b      	add	r3, r1
   1a966:	4303      	orrs	r3, r0
   1a968:	d10c      	bne.n	1a984 <__ieee754_pow+0x81c>
   1a96a:	4632      	mov	r2, r6
   1a96c:	463b      	mov	r3, r7
   1a96e:	f000 fb25 	bl	1afbc <__aeabi_dsub>
   1a972:	4602      	mov	r2, r0
   1a974:	460b      	mov	r3, r1
   1a976:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a97a:	f000 ff4f 	bl	1b81c <__aeabi_dcmple>
   1a97e:	2800      	cmp	r0, #0
   1a980:	f43f aef3 	beq.w	1a76a <__ieee754_pow+0x602>
   1a984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a988:	a321      	add	r3, pc, #132	; (adr r3, 1aa10 <__ieee754_pow+0x8a8>)
   1a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a98e:	f000 fcc9 	bl	1b324 <__aeabi_dmul>
   1a992:	a31f      	add	r3, pc, #124	; (adr r3, 1aa10 <__ieee754_pow+0x8a8>)
   1a994:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a998:	f000 fcc4 	bl	1b324 <__aeabi_dmul>
   1a99c:	e426      	b.n	1a1ec <__ieee754_pow+0x84>
   1a99e:	4602      	mov	r2, r0
   1a9a0:	460b      	mov	r3, r1
   1a9a2:	2000      	movs	r0, #0
   1a9a4:	491c      	ldr	r1, [pc, #112]	; (1aa18 <__ieee754_pow+0x8b0>)
   1a9a6:	f000 fde7 	bl	1b578 <__aeabi_ddiv>
   1a9aa:	e43c      	b.n	1a226 <__ieee754_pow+0xbe>
   1a9ac:	2200      	movs	r2, #0
   1a9ae:	2300      	movs	r3, #0
   1a9b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a9b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1a9b8:	4b17      	ldr	r3, [pc, #92]	; (1aa18 <__ieee754_pow+0x8b0>)
   1a9ba:	2200      	movs	r2, #0
   1a9bc:	2700      	movs	r7, #0
   1a9be:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a9c2:	e4e6      	b.n	1a392 <__ieee754_pow+0x22a>
   1a9c4:	f3af 8000 	nop.w
   1a9c8:	652b82fe 	.word	0x652b82fe
   1a9cc:	3c971547 	.word	0x3c971547
   1a9d0:	00000000 	.word	0x00000000
   1a9d4:	3fe62e43 	.word	0x3fe62e43
   1a9d8:	fefa39ef 	.word	0xfefa39ef
   1a9dc:	3fe62e42 	.word	0x3fe62e42
   1a9e0:	0ca86c39 	.word	0x0ca86c39
   1a9e4:	be205c61 	.word	0xbe205c61
   1a9e8:	72bea4d0 	.word	0x72bea4d0
   1a9ec:	3e663769 	.word	0x3e663769
   1a9f0:	c5d26bf1 	.word	0xc5d26bf1
   1a9f4:	3ebbbd41 	.word	0x3ebbbd41
   1a9f8:	af25de2c 	.word	0xaf25de2c
   1a9fc:	3f11566a 	.word	0x3f11566a
   1aa00:	16bebd93 	.word	0x16bebd93
   1aa04:	3f66c16c 	.word	0x3f66c16c
   1aa08:	5555553e 	.word	0x5555553e
   1aa0c:	3fc55555 	.word	0x3fc55555
   1aa10:	c2f8f359 	.word	0xc2f8f359
   1aa14:	01a56e1f 	.word	0x01a56e1f
   1aa18:	3ff00000 	.word	0x3ff00000
   1aa1c:	bff00000 	.word	0xbff00000
   1aa20:	408fffff 	.word	0x408fffff
   1aa24:	000fffff 	.word	0x000fffff
   1aa28:	4090cbff 	.word	0x4090cbff
   1aa2c:	3f6f3400 	.word	0x3f6f3400
   1aa30:	4b6b      	ldr	r3, [pc, #428]	; (1abe0 <__ieee754_pow+0xa78>)
   1aa32:	429e      	cmp	r6, r3
   1aa34:	f77f ac66 	ble.w	1a304 <__ieee754_pow+0x19c>
   1aa38:	4b6a      	ldr	r3, [pc, #424]	; (1abe4 <__ieee754_pow+0xa7c>)
   1aa3a:	429e      	cmp	r6, r3
   1aa3c:	f73f ac13 	bgt.w	1a266 <__ieee754_pow+0xfe>
   1aa40:	2200      	movs	r2, #0
   1aa42:	4b68      	ldr	r3, [pc, #416]	; (1abe4 <__ieee754_pow+0xa7c>)
   1aa44:	f000 faba 	bl	1afbc <__aeabi_dsub>
   1aa48:	a357      	add	r3, pc, #348	; (adr r3, 1aba8 <__ieee754_pow+0xa40>)
   1aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa4e:	4606      	mov	r6, r0
   1aa50:	460f      	mov	r7, r1
   1aa52:	f000 fc67 	bl	1b324 <__aeabi_dmul>
   1aa56:	a356      	add	r3, pc, #344	; (adr r3, 1abb0 <__ieee754_pow+0xa48>)
   1aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa5c:	4680      	mov	r8, r0
   1aa5e:	4689      	mov	r9, r1
   1aa60:	4630      	mov	r0, r6
   1aa62:	4639      	mov	r1, r7
   1aa64:	f000 fc5e 	bl	1b324 <__aeabi_dmul>
   1aa68:	2200      	movs	r2, #0
   1aa6a:	4682      	mov	sl, r0
   1aa6c:	468b      	mov	fp, r1
   1aa6e:	4b5e      	ldr	r3, [pc, #376]	; (1abe8 <__ieee754_pow+0xa80>)
   1aa70:	4630      	mov	r0, r6
   1aa72:	4639      	mov	r1, r7
   1aa74:	f000 fc56 	bl	1b324 <__aeabi_dmul>
   1aa78:	4602      	mov	r2, r0
   1aa7a:	460b      	mov	r3, r1
   1aa7c:	a14e      	add	r1, pc, #312	; (adr r1, 1abb8 <__ieee754_pow+0xa50>)
   1aa7e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1aa82:	f000 fa9b 	bl	1afbc <__aeabi_dsub>
   1aa86:	4632      	mov	r2, r6
   1aa88:	463b      	mov	r3, r7
   1aa8a:	f000 fc4b 	bl	1b324 <__aeabi_dmul>
   1aa8e:	4602      	mov	r2, r0
   1aa90:	460b      	mov	r3, r1
   1aa92:	2000      	movs	r0, #0
   1aa94:	4955      	ldr	r1, [pc, #340]	; (1abec <__ieee754_pow+0xa84>)
   1aa96:	f000 fa91 	bl	1afbc <__aeabi_dsub>
   1aa9a:	4632      	mov	r2, r6
   1aa9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1aaa0:	463b      	mov	r3, r7
   1aaa2:	4630      	mov	r0, r6
   1aaa4:	4639      	mov	r1, r7
   1aaa6:	f000 fc3d 	bl	1b324 <__aeabi_dmul>
   1aaaa:	4602      	mov	r2, r0
   1aaac:	460b      	mov	r3, r1
   1aaae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1aab2:	f000 fc37 	bl	1b324 <__aeabi_dmul>
   1aab6:	a342      	add	r3, pc, #264	; (adr r3, 1abc0 <__ieee754_pow+0xa58>)
   1aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aabc:	f000 fc32 	bl	1b324 <__aeabi_dmul>
   1aac0:	4602      	mov	r2, r0
   1aac2:	460b      	mov	r3, r1
   1aac4:	4650      	mov	r0, sl
   1aac6:	4659      	mov	r1, fp
   1aac8:	f000 fa78 	bl	1afbc <__aeabi_dsub>
   1aacc:	4602      	mov	r2, r0
   1aace:	460b      	mov	r3, r1
   1aad0:	4606      	mov	r6, r0
   1aad2:	460f      	mov	r7, r1
   1aad4:	4640      	mov	r0, r8
   1aad6:	4649      	mov	r1, r9
   1aad8:	f000 fa72 	bl	1afc0 <__adddf3>
   1aadc:	4642      	mov	r2, r8
   1aade:	464b      	mov	r3, r9
   1aae0:	2000      	movs	r0, #0
   1aae2:	4682      	mov	sl, r0
   1aae4:	468b      	mov	fp, r1
   1aae6:	f000 fa69 	bl	1afbc <__aeabi_dsub>
   1aaea:	4602      	mov	r2, r0
   1aaec:	460b      	mov	r3, r1
   1aaee:	4630      	mov	r0, r6
   1aaf0:	4639      	mov	r1, r7
   1aaf2:	f000 fa63 	bl	1afbc <__aeabi_dsub>
   1aaf6:	4680      	mov	r8, r0
   1aaf8:	4689      	mov	r9, r1
   1aafa:	e5d4      	b.n	1a6a6 <__ieee754_pow+0x53e>
   1aafc:	4642      	mov	r2, r8
   1aafe:	464b      	mov	r3, r9
   1ab00:	2000      	movs	r0, #0
   1ab02:	4938      	ldr	r1, [pc, #224]	; (1abe4 <__ieee754_pow+0xa7c>)
   1ab04:	f000 fd38 	bl	1b578 <__aeabi_ddiv>
   1ab08:	f7ff bb70 	b.w	1a1ec <__ieee754_pow+0x84>
   1ab0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ab10:	a32d      	add	r3, pc, #180	; (adr r3, 1abc8 <__ieee754_pow+0xa60>)
   1ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab16:	f000 fc05 	bl	1b324 <__aeabi_dmul>
   1ab1a:	a32b      	add	r3, pc, #172	; (adr r3, 1abc8 <__ieee754_pow+0xa60>)
   1ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab20:	f000 fc00 	bl	1b324 <__aeabi_dmul>
   1ab24:	f7ff bb62 	b.w	1a1ec <__ieee754_pow+0x84>
   1ab28:	f1be 0f00 	cmp.w	lr, #0
   1ab2c:	f47f ab69 	bne.w	1a202 <__ieee754_pow+0x9a>
   1ab30:	f1c3 0314 	rsb	r3, r3, #20
   1ab34:	fa47 f203 	asr.w	r2, r7, r3
   1ab38:	fa02 f303 	lsl.w	r3, r2, r3
   1ab3c:	429f      	cmp	r7, r3
   1ab3e:	d02a      	beq.n	1ab96 <__ieee754_pow+0xa2e>
   1ab40:	4674      	mov	r4, lr
   1ab42:	f7ff bb36 	b.w	1a1b2 <__ieee754_pow+0x4a>
   1ab46:	4b29      	ldr	r3, [pc, #164]	; (1abec <__ieee754_pow+0xa84>)
   1ab48:	4598      	cmp	r8, r3
   1ab4a:	f73f ae0e 	bgt.w	1a76a <__ieee754_pow+0x602>
   1ab4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ab52:	4692      	mov	sl, r2
   1ab54:	4693      	mov	fp, r2
   1ab56:	e638      	b.n	1a7ca <__ieee754_pow+0x662>
   1ab58:	4602      	mov	r2, r0
   1ab5a:	460b      	mov	r3, r1
   1ab5c:	f000 fa2e 	bl	1afbc <__aeabi_dsub>
   1ab60:	4602      	mov	r2, r0
   1ab62:	460b      	mov	r3, r1
   1ab64:	f000 fd08 	bl	1b578 <__aeabi_ddiv>
   1ab68:	f7ff bb40 	b.w	1a1ec <__ieee754_pow+0x84>
   1ab6c:	a318      	add	r3, pc, #96	; (adr r3, 1abd0 <__ieee754_pow+0xa68>)
   1ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab72:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1ab76:	a318      	add	r3, pc, #96	; (adr r3, 1abd8 <__ieee754_pow+0xa70>)
   1ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab7c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1ab80:	4b1b      	ldr	r3, [pc, #108]	; (1abf0 <__ieee754_pow+0xa88>)
   1ab82:	2200      	movs	r2, #0
   1ab84:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   1ab88:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ab8c:	e401      	b.n	1a392 <__ieee754_pow+0x22a>
   1ab8e:	465a      	mov	r2, fp
   1ab90:	f000 f98a 	bl	1aea8 <scalbn>
   1ab94:	e6c9      	b.n	1a92a <__ieee754_pow+0x7c2>
   1ab96:	f002 0201 	and.w	r2, r2, #1
   1ab9a:	f1c2 0402 	rsb	r4, r2, #2
   1ab9e:	f7ff bb08 	b.w	1a1b2 <__ieee754_pow+0x4a>
   1aba2:	bf00      	nop
   1aba4:	f3af 8000 	nop.w
   1aba8:	60000000 	.word	0x60000000
   1abac:	3ff71547 	.word	0x3ff71547
   1abb0:	f85ddf44 	.word	0xf85ddf44
   1abb4:	3e54ae0b 	.word	0x3e54ae0b
   1abb8:	55555555 	.word	0x55555555
   1abbc:	3fd55555 	.word	0x3fd55555
   1abc0:	652b82fe 	.word	0x652b82fe
   1abc4:	3ff71547 	.word	0x3ff71547
   1abc8:	8800759c 	.word	0x8800759c
   1abcc:	7e37e43c 	.word	0x7e37e43c
   1abd0:	40000000 	.word	0x40000000
   1abd4:	3fe2b803 	.word	0x3fe2b803
   1abd8:	43cfd006 	.word	0x43cfd006
   1abdc:	3e4cfdeb 	.word	0x3e4cfdeb
   1abe0:	3feffffe 	.word	0x3feffffe
   1abe4:	3ff00000 	.word	0x3ff00000
   1abe8:	3fd00000 	.word	0x3fd00000
   1abec:	3fe00000 	.word	0x3fe00000
   1abf0:	3ff80000 	.word	0x3ff80000

0001abf4 <__ieee754_sqrt>:
   1abf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1abf8:	4f5b      	ldr	r7, [pc, #364]	; (1ad68 <__ieee754_sqrt+0x174>)
   1abfa:	438f      	bics	r7, r1
   1abfc:	4605      	mov	r5, r0
   1abfe:	460c      	mov	r4, r1
   1ac00:	f000 8092 	beq.w	1ad28 <__ieee754_sqrt+0x134>
   1ac04:	2900      	cmp	r1, #0
   1ac06:	460b      	mov	r3, r1
   1ac08:	4602      	mov	r2, r0
   1ac0a:	dd6f      	ble.n	1acec <__ieee754_sqrt+0xf8>
   1ac0c:	150f      	asrs	r7, r1, #20
   1ac0e:	d07b      	beq.n	1ad08 <__ieee754_sqrt+0x114>
   1ac10:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   1ac14:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1ac18:	07f8      	lsls	r0, r7, #31
   1ac1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1ac1e:	d45c      	bmi.n	1acda <__ieee754_sqrt+0xe6>
   1ac20:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   1ac24:	2600      	movs	r6, #0
   1ac26:	440b      	add	r3, r1
   1ac28:	107f      	asrs	r7, r7, #1
   1ac2a:	0052      	lsls	r2, r2, #1
   1ac2c:	46b6      	mov	lr, r6
   1ac2e:	2016      	movs	r0, #22
   1ac30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   1ac34:	eb0e 0401 	add.w	r4, lr, r1
   1ac38:	429c      	cmp	r4, r3
   1ac3a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   1ac3e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1ac42:	dc03      	bgt.n	1ac4c <__ieee754_sqrt+0x58>
   1ac44:	1b1b      	subs	r3, r3, r4
   1ac46:	eb04 0e01 	add.w	lr, r4, r1
   1ac4a:	440e      	add	r6, r1
   1ac4c:	3801      	subs	r0, #1
   1ac4e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1ac52:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1ac56:	d1ed      	bne.n	1ac34 <__ieee754_sqrt+0x40>
   1ac58:	4684      	mov	ip, r0
   1ac5a:	2420      	movs	r4, #32
   1ac5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1ac60:	e009      	b.n	1ac76 <__ieee754_sqrt+0x82>
   1ac62:	d020      	beq.n	1aca6 <__ieee754_sqrt+0xb2>
   1ac64:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   1ac68:	3c01      	subs	r4, #1
   1ac6a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1ac6e:	442b      	add	r3, r5
   1ac70:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1ac74:	d020      	beq.n	1acb8 <__ieee754_sqrt+0xc4>
   1ac76:	4573      	cmp	r3, lr
   1ac78:	eb01 050c 	add.w	r5, r1, ip
   1ac7c:	ddf1      	ble.n	1ac62 <__ieee754_sqrt+0x6e>
   1ac7e:	2d00      	cmp	r5, #0
   1ac80:	eb05 0c01 	add.w	ip, r5, r1
   1ac84:	db09      	blt.n	1ac9a <__ieee754_sqrt+0xa6>
   1ac86:	46f0      	mov	r8, lr
   1ac88:	4295      	cmp	r5, r2
   1ac8a:	eba3 030e 	sub.w	r3, r3, lr
   1ac8e:	d900      	bls.n	1ac92 <__ieee754_sqrt+0x9e>
   1ac90:	3b01      	subs	r3, #1
   1ac92:	1b52      	subs	r2, r2, r5
   1ac94:	4408      	add	r0, r1
   1ac96:	46c6      	mov	lr, r8
   1ac98:	e7e4      	b.n	1ac64 <__ieee754_sqrt+0x70>
   1ac9a:	f1bc 0f00 	cmp.w	ip, #0
   1ac9e:	dbf2      	blt.n	1ac86 <__ieee754_sqrt+0x92>
   1aca0:	f10e 0801 	add.w	r8, lr, #1
   1aca4:	e7f0      	b.n	1ac88 <__ieee754_sqrt+0x94>
   1aca6:	4295      	cmp	r5, r2
   1aca8:	d8dc      	bhi.n	1ac64 <__ieee754_sqrt+0x70>
   1acaa:	2d00      	cmp	r5, #0
   1acac:	eb05 0c01 	add.w	ip, r5, r1
   1acb0:	db44      	blt.n	1ad3c <__ieee754_sqrt+0x148>
   1acb2:	4698      	mov	r8, r3
   1acb4:	2300      	movs	r3, #0
   1acb6:	e7ec      	b.n	1ac92 <__ieee754_sqrt+0x9e>
   1acb8:	4313      	orrs	r3, r2
   1acba:	d113      	bne.n	1ace4 <__ieee754_sqrt+0xf0>
   1acbc:	0840      	lsrs	r0, r0, #1
   1acbe:	1073      	asrs	r3, r6, #1
   1acc0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   1acc4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   1acc8:	07f2      	lsls	r2, r6, #31
   1acca:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   1acce:	bf48      	it	mi
   1acd0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   1acd4:	4649      	mov	r1, r9
   1acd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1acda:	005b      	lsls	r3, r3, #1
   1acdc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   1ace0:	0052      	lsls	r2, r2, #1
   1ace2:	e79d      	b.n	1ac20 <__ieee754_sqrt+0x2c>
   1ace4:	1c41      	adds	r1, r0, #1
   1ace6:	d02d      	beq.n	1ad44 <__ieee754_sqrt+0x150>
   1ace8:	3001      	adds	r0, #1
   1acea:	e7e7      	b.n	1acbc <__ieee754_sqrt+0xc8>
   1acec:	4606      	mov	r6, r0
   1acee:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   1acf2:	433e      	orrs	r6, r7
   1acf4:	d0ef      	beq.n	1acd6 <__ieee754_sqrt+0xe2>
   1acf6:	bb69      	cbnz	r1, 1ad54 <__ieee754_sqrt+0x160>
   1acf8:	460f      	mov	r7, r1
   1acfa:	0ad3      	lsrs	r3, r2, #11
   1acfc:	3f15      	subs	r7, #21
   1acfe:	0552      	lsls	r2, r2, #21
   1ad00:	2b00      	cmp	r3, #0
   1ad02:	d0fa      	beq.n	1acfa <__ieee754_sqrt+0x106>
   1ad04:	02de      	lsls	r6, r3, #11
   1ad06:	d420      	bmi.n	1ad4a <__ieee754_sqrt+0x156>
   1ad08:	2400      	movs	r4, #0
   1ad0a:	e000      	b.n	1ad0e <__ieee754_sqrt+0x11a>
   1ad0c:	4604      	mov	r4, r0
   1ad0e:	005b      	lsls	r3, r3, #1
   1ad10:	02dd      	lsls	r5, r3, #11
   1ad12:	f104 0001 	add.w	r0, r4, #1
   1ad16:	d5f9      	bpl.n	1ad0c <__ieee754_sqrt+0x118>
   1ad18:	f1c0 0120 	rsb	r1, r0, #32
   1ad1c:	fa22 f101 	lsr.w	r1, r2, r1
   1ad20:	430b      	orrs	r3, r1
   1ad22:	1b3f      	subs	r7, r7, r4
   1ad24:	4082      	lsls	r2, r0
   1ad26:	e773      	b.n	1ac10 <__ieee754_sqrt+0x1c>
   1ad28:	4602      	mov	r2, r0
   1ad2a:	460b      	mov	r3, r1
   1ad2c:	f000 fafa 	bl	1b324 <__aeabi_dmul>
   1ad30:	462a      	mov	r2, r5
   1ad32:	4623      	mov	r3, r4
   1ad34:	f000 f944 	bl	1afc0 <__adddf3>
   1ad38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ad3c:	f1bc 0f00 	cmp.w	ip, #0
   1ad40:	daae      	bge.n	1aca0 <__ieee754_sqrt+0xac>
   1ad42:	e7b6      	b.n	1acb2 <__ieee754_sqrt+0xbe>
   1ad44:	3601      	adds	r6, #1
   1ad46:	4620      	mov	r0, r4
   1ad48:	e7b9      	b.n	1acbe <__ieee754_sqrt+0xca>
   1ad4a:	2000      	movs	r0, #0
   1ad4c:	2120      	movs	r1, #32
   1ad4e:	f04f 34ff 	mov.w	r4, #4294967295
   1ad52:	e7e3      	b.n	1ad1c <__ieee754_sqrt+0x128>
   1ad54:	4602      	mov	r2, r0
   1ad56:	460b      	mov	r3, r1
   1ad58:	f000 f930 	bl	1afbc <__aeabi_dsub>
   1ad5c:	4602      	mov	r2, r0
   1ad5e:	460b      	mov	r3, r1
   1ad60:	f000 fc0a 	bl	1b578 <__aeabi_ddiv>
   1ad64:	e7b7      	b.n	1acd6 <__ieee754_sqrt+0xe2>
   1ad66:	bf00      	nop
   1ad68:	7ff00000 	.word	0x7ff00000

0001ad6c <fabs>:
   1ad6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ad70:	4770      	bx	lr
   1ad72:	bf00      	nop

0001ad74 <finite>:
   1ad74:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   1ad78:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   1ad7c:	0fc0      	lsrs	r0, r0, #31
   1ad7e:	4770      	bx	lr

0001ad80 <matherr>:
   1ad80:	2000      	movs	r0, #0
   1ad82:	4770      	bx	lr

0001ad84 <nan>:
   1ad84:	2000      	movs	r0, #0
   1ad86:	4901      	ldr	r1, [pc, #4]	; (1ad8c <nan+0x8>)
   1ad88:	4770      	bx	lr
   1ad8a:	bf00      	nop
   1ad8c:	7ff80000 	.word	0x7ff80000

0001ad90 <rint>:
   1ad90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad92:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   1ad96:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   1ad9a:	2e13      	cmp	r6, #19
   1ad9c:	b083      	sub	sp, #12
   1ad9e:	4602      	mov	r2, r0
   1ada0:	460b      	mov	r3, r1
   1ada2:	460c      	mov	r4, r1
   1ada4:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   1ada8:	4607      	mov	r7, r0
   1adaa:	dc2e      	bgt.n	1ae0a <rint+0x7a>
   1adac:	2e00      	cmp	r6, #0
   1adae:	db49      	blt.n	1ae44 <rint+0xb4>
   1adb0:	493a      	ldr	r1, [pc, #232]	; (1ae9c <rint+0x10c>)
   1adb2:	4131      	asrs	r1, r6
   1adb4:	ea03 0001 	and.w	r0, r3, r1
   1adb8:	4310      	orrs	r0, r2
   1adba:	d02b      	beq.n	1ae14 <rint+0x84>
   1adbc:	0849      	lsrs	r1, r1, #1
   1adbe:	400b      	ands	r3, r1
   1adc0:	ea53 0702 	orrs.w	r7, r3, r2
   1adc4:	d00c      	beq.n	1ade0 <rint+0x50>
   1adc6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1adca:	2e13      	cmp	r6, #19
   1adcc:	ea24 0101 	bic.w	r1, r4, r1
   1add0:	fa43 f406 	asr.w	r4, r3, r6
   1add4:	ea44 0401 	orr.w	r4, r4, r1
   1add8:	bf0c      	ite	eq
   1adda:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   1adde:	2700      	movne	r7, #0
   1ade0:	4b2f      	ldr	r3, [pc, #188]	; (1aea0 <rint+0x110>)
   1ade2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1ade6:	4621      	mov	r1, r4
   1ade8:	e9d5 4500 	ldrd	r4, r5, [r5]
   1adec:	4638      	mov	r0, r7
   1adee:	4622      	mov	r2, r4
   1adf0:	462b      	mov	r3, r5
   1adf2:	f000 f8e5 	bl	1afc0 <__adddf3>
   1adf6:	e9cd 0100 	strd	r0, r1, [sp]
   1adfa:	4622      	mov	r2, r4
   1adfc:	462b      	mov	r3, r5
   1adfe:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ae02:	f000 f8db 	bl	1afbc <__aeabi_dsub>
   1ae06:	b003      	add	sp, #12
   1ae08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae0a:	2e33      	cmp	r6, #51	; 0x33
   1ae0c:	dd06      	ble.n	1ae1c <rint+0x8c>
   1ae0e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1ae12:	d040      	beq.n	1ae96 <rint+0x106>
   1ae14:	4610      	mov	r0, r2
   1ae16:	4619      	mov	r1, r3
   1ae18:	b003      	add	sp, #12
   1ae1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae1c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   1ae20:	f04f 31ff 	mov.w	r1, #4294967295
   1ae24:	fa21 f10e 	lsr.w	r1, r1, lr
   1ae28:	4208      	tst	r0, r1
   1ae2a:	d0f3      	beq.n	1ae14 <rint+0x84>
   1ae2c:	0849      	lsrs	r1, r1, #1
   1ae2e:	4208      	tst	r0, r1
   1ae30:	d0d6      	beq.n	1ade0 <rint+0x50>
   1ae32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ae36:	ea20 0101 	bic.w	r1, r0, r1
   1ae3a:	fa43 fe0e 	asr.w	lr, r3, lr
   1ae3e:	ea4e 0701 	orr.w	r7, lr, r1
   1ae42:	e7cd      	b.n	1ade0 <rint+0x50>
   1ae44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ae48:	4301      	orrs	r1, r0
   1ae4a:	d0e3      	beq.n	1ae14 <rint+0x84>
   1ae4c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   1ae50:	4e13      	ldr	r6, [pc, #76]	; (1aea0 <rint+0x110>)
   1ae52:	4301      	orrs	r1, r0
   1ae54:	f1c1 0c00 	rsb	ip, r1, #0
   1ae58:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   1ae5c:	e9d6 6700 	ldrd	r6, r7, [r6]
   1ae60:	ea4c 0c01 	orr.w	ip, ip, r1
   1ae64:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   1ae68:	0c5c      	lsrs	r4, r3, #17
   1ae6a:	0464      	lsls	r4, r4, #17
   1ae6c:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   1ae70:	ea43 0104 	orr.w	r1, r3, r4
   1ae74:	4632      	mov	r2, r6
   1ae76:	463b      	mov	r3, r7
   1ae78:	f000 f8a2 	bl	1afc0 <__adddf3>
   1ae7c:	e9cd 0100 	strd	r0, r1, [sp]
   1ae80:	4632      	mov	r2, r6
   1ae82:	463b      	mov	r3, r7
   1ae84:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ae88:	f000 f898 	bl	1afbc <__aeabi_dsub>
   1ae8c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1ae90:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   1ae94:	e7c0      	b.n	1ae18 <rint+0x88>
   1ae96:	f000 f893 	bl	1afc0 <__adddf3>
   1ae9a:	e7bd      	b.n	1ae18 <rint+0x88>
   1ae9c:	000fffff 	.word	0x000fffff
   1aea0:	00022408 	.word	0x00022408
   1aea4:	00000000 	.word	0x00000000

0001aea8 <scalbn>:
   1aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aeaa:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1aeae:	4604      	mov	r4, r0
   1aeb0:	460d      	mov	r5, r1
   1aeb2:	460b      	mov	r3, r1
   1aeb4:	4617      	mov	r7, r2
   1aeb6:	bb0e      	cbnz	r6, 1aefc <scalbn+0x54>
   1aeb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1aebc:	4303      	orrs	r3, r0
   1aebe:	4686      	mov	lr, r0
   1aec0:	d025      	beq.n	1af0e <scalbn+0x66>
   1aec2:	2200      	movs	r2, #0
   1aec4:	4b34      	ldr	r3, [pc, #208]	; (1af98 <scalbn+0xf0>)
   1aec6:	f000 fa2d 	bl	1b324 <__aeabi_dmul>
   1aeca:	4a34      	ldr	r2, [pc, #208]	; (1af9c <scalbn+0xf4>)
   1aecc:	4297      	cmp	r7, r2
   1aece:	4604      	mov	r4, r0
   1aed0:	460d      	mov	r5, r1
   1aed2:	460b      	mov	r3, r1
   1aed4:	db2a      	blt.n	1af2c <scalbn+0x84>
   1aed6:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1aeda:	3e36      	subs	r6, #54	; 0x36
   1aedc:	443e      	add	r6, r7
   1aede:	f240 72fe 	movw	r2, #2046	; 0x7fe
   1aee2:	4296      	cmp	r6, r2
   1aee4:	dc28      	bgt.n	1af38 <scalbn+0x90>
   1aee6:	2e00      	cmp	r6, #0
   1aee8:	dd12      	ble.n	1af10 <scalbn+0x68>
   1aeea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1aeee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1aef2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1aef6:	4620      	mov	r0, r4
   1aef8:	4629      	mov	r1, r5
   1aefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aefc:	f240 72ff 	movw	r2, #2047	; 0x7ff
   1af00:	4296      	cmp	r6, r2
   1af02:	d1eb      	bne.n	1aedc <scalbn+0x34>
   1af04:	4602      	mov	r2, r0
   1af06:	460b      	mov	r3, r1
   1af08:	f000 f85a 	bl	1afc0 <__adddf3>
   1af0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af10:	f116 0f35 	cmn.w	r6, #53	; 0x35
   1af14:	da1d      	bge.n	1af52 <scalbn+0xaa>
   1af16:	f24c 3350 	movw	r3, #50000	; 0xc350
   1af1a:	429f      	cmp	r7, r3
   1af1c:	4622      	mov	r2, r4
   1af1e:	462b      	mov	r3, r5
   1af20:	dc25      	bgt.n	1af6e <scalbn+0xc6>
   1af22:	a119      	add	r1, pc, #100	; (adr r1, 1af88 <scalbn+0xe0>)
   1af24:	e9d1 0100 	ldrd	r0, r1, [r1]
   1af28:	f000 f83c 	bl	1afa4 <copysign>
   1af2c:	a316      	add	r3, pc, #88	; (adr r3, 1af88 <scalbn+0xe0>)
   1af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af32:	f000 f9f7 	bl	1b324 <__aeabi_dmul>
   1af36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af38:	4622      	mov	r2, r4
   1af3a:	462b      	mov	r3, r5
   1af3c:	a114      	add	r1, pc, #80	; (adr r1, 1af90 <scalbn+0xe8>)
   1af3e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1af42:	f000 f82f 	bl	1afa4 <copysign>
   1af46:	a312      	add	r3, pc, #72	; (adr r3, 1af90 <scalbn+0xe8>)
   1af48:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af4c:	f000 f9ea 	bl	1b324 <__aeabi_dmul>
   1af50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1af56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1af5a:	3636      	adds	r6, #54	; 0x36
   1af5c:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1af60:	4620      	mov	r0, r4
   1af62:	4629      	mov	r1, r5
   1af64:	2200      	movs	r2, #0
   1af66:	4b0e      	ldr	r3, [pc, #56]	; (1afa0 <scalbn+0xf8>)
   1af68:	f000 f9dc 	bl	1b324 <__aeabi_dmul>
   1af6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af6e:	a108      	add	r1, pc, #32	; (adr r1, 1af90 <scalbn+0xe8>)
   1af70:	e9d1 0100 	ldrd	r0, r1, [r1]
   1af74:	f000 f816 	bl	1afa4 <copysign>
   1af78:	a305      	add	r3, pc, #20	; (adr r3, 1af90 <scalbn+0xe8>)
   1af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af7e:	f000 f9d1 	bl	1b324 <__aeabi_dmul>
   1af82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af84:	f3af 8000 	nop.w
   1af88:	c2f8f359 	.word	0xc2f8f359
   1af8c:	01a56e1f 	.word	0x01a56e1f
   1af90:	8800759c 	.word	0x8800759c
   1af94:	7e37e43c 	.word	0x7e37e43c
   1af98:	43500000 	.word	0x43500000
   1af9c:	ffff3cb0 	.word	0xffff3cb0
   1afa0:	3c900000 	.word	0x3c900000

0001afa4 <copysign>:
   1afa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   1afa8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1afac:	ea42 0103 	orr.w	r1, r2, r3
   1afb0:	4770      	bx	lr
   1afb2:	bf00      	nop

0001afb4 <__aeabi_drsub>:
   1afb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1afb8:	e002      	b.n	1afc0 <__adddf3>
   1afba:	bf00      	nop

0001afbc <__aeabi_dsub>:
   1afbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001afc0 <__adddf3>:
   1afc0:	b530      	push	{r4, r5, lr}
   1afc2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1afc6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1afca:	ea94 0f05 	teq	r4, r5
   1afce:	bf08      	it	eq
   1afd0:	ea90 0f02 	teqeq	r0, r2
   1afd4:	bf1f      	itttt	ne
   1afd6:	ea54 0c00 	orrsne.w	ip, r4, r0
   1afda:	ea55 0c02 	orrsne.w	ip, r5, r2
   1afde:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1afe2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1afe6:	f000 80e2 	beq.w	1b1ae <__adddf3+0x1ee>
   1afea:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1afee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1aff2:	bfb8      	it	lt
   1aff4:	426d      	neglt	r5, r5
   1aff6:	dd0c      	ble.n	1b012 <__adddf3+0x52>
   1aff8:	442c      	add	r4, r5
   1affa:	ea80 0202 	eor.w	r2, r0, r2
   1affe:	ea81 0303 	eor.w	r3, r1, r3
   1b002:	ea82 0000 	eor.w	r0, r2, r0
   1b006:	ea83 0101 	eor.w	r1, r3, r1
   1b00a:	ea80 0202 	eor.w	r2, r0, r2
   1b00e:	ea81 0303 	eor.w	r3, r1, r3
   1b012:	2d36      	cmp	r5, #54	; 0x36
   1b014:	bf88      	it	hi
   1b016:	bd30      	pophi	{r4, r5, pc}
   1b018:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b01c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b020:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1b024:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1b028:	d002      	beq.n	1b030 <__adddf3+0x70>
   1b02a:	4240      	negs	r0, r0
   1b02c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b030:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1b034:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b038:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1b03c:	d002      	beq.n	1b044 <__adddf3+0x84>
   1b03e:	4252      	negs	r2, r2
   1b040:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1b044:	ea94 0f05 	teq	r4, r5
   1b048:	f000 80a7 	beq.w	1b19a <__adddf3+0x1da>
   1b04c:	f1a4 0401 	sub.w	r4, r4, #1
   1b050:	f1d5 0e20 	rsbs	lr, r5, #32
   1b054:	db0d      	blt.n	1b072 <__adddf3+0xb2>
   1b056:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b05a:	fa22 f205 	lsr.w	r2, r2, r5
   1b05e:	1880      	adds	r0, r0, r2
   1b060:	f141 0100 	adc.w	r1, r1, #0
   1b064:	fa03 f20e 	lsl.w	r2, r3, lr
   1b068:	1880      	adds	r0, r0, r2
   1b06a:	fa43 f305 	asr.w	r3, r3, r5
   1b06e:	4159      	adcs	r1, r3
   1b070:	e00e      	b.n	1b090 <__adddf3+0xd0>
   1b072:	f1a5 0520 	sub.w	r5, r5, #32
   1b076:	f10e 0e20 	add.w	lr, lr, #32
   1b07a:	2a01      	cmp	r2, #1
   1b07c:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b080:	bf28      	it	cs
   1b082:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b086:	fa43 f305 	asr.w	r3, r3, r5
   1b08a:	18c0      	adds	r0, r0, r3
   1b08c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b090:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b094:	d507      	bpl.n	1b0a6 <__adddf3+0xe6>
   1b096:	f04f 0e00 	mov.w	lr, #0
   1b09a:	f1dc 0c00 	rsbs	ip, ip, #0
   1b09e:	eb7e 0000 	sbcs.w	r0, lr, r0
   1b0a2:	eb6e 0101 	sbc.w	r1, lr, r1
   1b0a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1b0aa:	d31b      	bcc.n	1b0e4 <__adddf3+0x124>
   1b0ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1b0b0:	d30c      	bcc.n	1b0cc <__adddf3+0x10c>
   1b0b2:	0849      	lsrs	r1, r1, #1
   1b0b4:	ea5f 0030 	movs.w	r0, r0, rrx
   1b0b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1b0bc:	f104 0401 	add.w	r4, r4, #1
   1b0c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1b0c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b0c8:	f080 809a 	bcs.w	1b200 <__adddf3+0x240>
   1b0cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b0d0:	bf08      	it	eq
   1b0d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b0d6:	f150 0000 	adcs.w	r0, r0, #0
   1b0da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b0de:	ea41 0105 	orr.w	r1, r1, r5
   1b0e2:	bd30      	pop	{r4, r5, pc}
   1b0e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b0e8:	4140      	adcs	r0, r0
   1b0ea:	eb41 0101 	adc.w	r1, r1, r1
   1b0ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b0f2:	f1a4 0401 	sub.w	r4, r4, #1
   1b0f6:	d1e9      	bne.n	1b0cc <__adddf3+0x10c>
   1b0f8:	f091 0f00 	teq	r1, #0
   1b0fc:	bf04      	itt	eq
   1b0fe:	4601      	moveq	r1, r0
   1b100:	2000      	moveq	r0, #0
   1b102:	fab1 f381 	clz	r3, r1
   1b106:	bf08      	it	eq
   1b108:	3320      	addeq	r3, #32
   1b10a:	f1a3 030b 	sub.w	r3, r3, #11
   1b10e:	f1b3 0220 	subs.w	r2, r3, #32
   1b112:	da0c      	bge.n	1b12e <__adddf3+0x16e>
   1b114:	320c      	adds	r2, #12
   1b116:	dd08      	ble.n	1b12a <__adddf3+0x16a>
   1b118:	f102 0c14 	add.w	ip, r2, #20
   1b11c:	f1c2 020c 	rsb	r2, r2, #12
   1b120:	fa01 f00c 	lsl.w	r0, r1, ip
   1b124:	fa21 f102 	lsr.w	r1, r1, r2
   1b128:	e00c      	b.n	1b144 <__adddf3+0x184>
   1b12a:	f102 0214 	add.w	r2, r2, #20
   1b12e:	bfd8      	it	le
   1b130:	f1c2 0c20 	rsble	ip, r2, #32
   1b134:	fa01 f102 	lsl.w	r1, r1, r2
   1b138:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b13c:	bfdc      	itt	le
   1b13e:	ea41 010c 	orrle.w	r1, r1, ip
   1b142:	4090      	lslle	r0, r2
   1b144:	1ae4      	subs	r4, r4, r3
   1b146:	bfa2      	ittt	ge
   1b148:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b14c:	4329      	orrge	r1, r5
   1b14e:	bd30      	popge	{r4, r5, pc}
   1b150:	ea6f 0404 	mvn.w	r4, r4
   1b154:	3c1f      	subs	r4, #31
   1b156:	da1c      	bge.n	1b192 <__adddf3+0x1d2>
   1b158:	340c      	adds	r4, #12
   1b15a:	dc0e      	bgt.n	1b17a <__adddf3+0x1ba>
   1b15c:	f104 0414 	add.w	r4, r4, #20
   1b160:	f1c4 0220 	rsb	r2, r4, #32
   1b164:	fa20 f004 	lsr.w	r0, r0, r4
   1b168:	fa01 f302 	lsl.w	r3, r1, r2
   1b16c:	ea40 0003 	orr.w	r0, r0, r3
   1b170:	fa21 f304 	lsr.w	r3, r1, r4
   1b174:	ea45 0103 	orr.w	r1, r5, r3
   1b178:	bd30      	pop	{r4, r5, pc}
   1b17a:	f1c4 040c 	rsb	r4, r4, #12
   1b17e:	f1c4 0220 	rsb	r2, r4, #32
   1b182:	fa20 f002 	lsr.w	r0, r0, r2
   1b186:	fa01 f304 	lsl.w	r3, r1, r4
   1b18a:	ea40 0003 	orr.w	r0, r0, r3
   1b18e:	4629      	mov	r1, r5
   1b190:	bd30      	pop	{r4, r5, pc}
   1b192:	fa21 f004 	lsr.w	r0, r1, r4
   1b196:	4629      	mov	r1, r5
   1b198:	bd30      	pop	{r4, r5, pc}
   1b19a:	f094 0f00 	teq	r4, #0
   1b19e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1b1a2:	bf06      	itte	eq
   1b1a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1b1a8:	3401      	addeq	r4, #1
   1b1aa:	3d01      	subne	r5, #1
   1b1ac:	e74e      	b.n	1b04c <__adddf3+0x8c>
   1b1ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b1b2:	bf18      	it	ne
   1b1b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b1b8:	d029      	beq.n	1b20e <__adddf3+0x24e>
   1b1ba:	ea94 0f05 	teq	r4, r5
   1b1be:	bf08      	it	eq
   1b1c0:	ea90 0f02 	teqeq	r0, r2
   1b1c4:	d005      	beq.n	1b1d2 <__adddf3+0x212>
   1b1c6:	ea54 0c00 	orrs.w	ip, r4, r0
   1b1ca:	bf04      	itt	eq
   1b1cc:	4619      	moveq	r1, r3
   1b1ce:	4610      	moveq	r0, r2
   1b1d0:	bd30      	pop	{r4, r5, pc}
   1b1d2:	ea91 0f03 	teq	r1, r3
   1b1d6:	bf1e      	ittt	ne
   1b1d8:	2100      	movne	r1, #0
   1b1da:	2000      	movne	r0, #0
   1b1dc:	bd30      	popne	{r4, r5, pc}
   1b1de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1b1e2:	d105      	bne.n	1b1f0 <__adddf3+0x230>
   1b1e4:	0040      	lsls	r0, r0, #1
   1b1e6:	4149      	adcs	r1, r1
   1b1e8:	bf28      	it	cs
   1b1ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1b1ee:	bd30      	pop	{r4, r5, pc}
   1b1f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1b1f4:	bf3c      	itt	cc
   1b1f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1b1fa:	bd30      	popcc	{r4, r5, pc}
   1b1fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b200:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1b204:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b208:	f04f 0000 	mov.w	r0, #0
   1b20c:	bd30      	pop	{r4, r5, pc}
   1b20e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b212:	bf1a      	itte	ne
   1b214:	4619      	movne	r1, r3
   1b216:	4610      	movne	r0, r2
   1b218:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1b21c:	bf1c      	itt	ne
   1b21e:	460b      	movne	r3, r1
   1b220:	4602      	movne	r2, r0
   1b222:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b226:	bf06      	itte	eq
   1b228:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1b22c:	ea91 0f03 	teqeq	r1, r3
   1b230:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1b234:	bd30      	pop	{r4, r5, pc}
   1b236:	bf00      	nop

0001b238 <__aeabi_ui2d>:
   1b238:	f090 0f00 	teq	r0, #0
   1b23c:	bf04      	itt	eq
   1b23e:	2100      	moveq	r1, #0
   1b240:	4770      	bxeq	lr
   1b242:	b530      	push	{r4, r5, lr}
   1b244:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b248:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b24c:	f04f 0500 	mov.w	r5, #0
   1b250:	f04f 0100 	mov.w	r1, #0
   1b254:	e750      	b.n	1b0f8 <__adddf3+0x138>
   1b256:	bf00      	nop

0001b258 <__aeabi_i2d>:
   1b258:	f090 0f00 	teq	r0, #0
   1b25c:	bf04      	itt	eq
   1b25e:	2100      	moveq	r1, #0
   1b260:	4770      	bxeq	lr
   1b262:	b530      	push	{r4, r5, lr}
   1b264:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b268:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b26c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1b270:	bf48      	it	mi
   1b272:	4240      	negmi	r0, r0
   1b274:	f04f 0100 	mov.w	r1, #0
   1b278:	e73e      	b.n	1b0f8 <__adddf3+0x138>
   1b27a:	bf00      	nop

0001b27c <__aeabi_f2d>:
   1b27c:	0042      	lsls	r2, r0, #1
   1b27e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1b282:	ea4f 0131 	mov.w	r1, r1, rrx
   1b286:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1b28a:	bf1f      	itttt	ne
   1b28c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1b290:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b294:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1b298:	4770      	bxne	lr
   1b29a:	f092 0f00 	teq	r2, #0
   1b29e:	bf14      	ite	ne
   1b2a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b2a4:	4770      	bxeq	lr
   1b2a6:	b530      	push	{r4, r5, lr}
   1b2a8:	f44f 7460 	mov.w	r4, #896	; 0x380
   1b2ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b2b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b2b4:	e720      	b.n	1b0f8 <__adddf3+0x138>
   1b2b6:	bf00      	nop

0001b2b8 <__aeabi_ul2d>:
   1b2b8:	ea50 0201 	orrs.w	r2, r0, r1
   1b2bc:	bf08      	it	eq
   1b2be:	4770      	bxeq	lr
   1b2c0:	b530      	push	{r4, r5, lr}
   1b2c2:	f04f 0500 	mov.w	r5, #0
   1b2c6:	e00a      	b.n	1b2de <__aeabi_l2d+0x16>

0001b2c8 <__aeabi_l2d>:
   1b2c8:	ea50 0201 	orrs.w	r2, r0, r1
   1b2cc:	bf08      	it	eq
   1b2ce:	4770      	bxeq	lr
   1b2d0:	b530      	push	{r4, r5, lr}
   1b2d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1b2d6:	d502      	bpl.n	1b2de <__aeabi_l2d+0x16>
   1b2d8:	4240      	negs	r0, r0
   1b2da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b2de:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b2e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b2e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1b2ea:	f43f aedc 	beq.w	1b0a6 <__adddf3+0xe6>
   1b2ee:	f04f 0203 	mov.w	r2, #3
   1b2f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b2f6:	bf18      	it	ne
   1b2f8:	3203      	addne	r2, #3
   1b2fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b2fe:	bf18      	it	ne
   1b300:	3203      	addne	r2, #3
   1b302:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1b306:	f1c2 0320 	rsb	r3, r2, #32
   1b30a:	fa00 fc03 	lsl.w	ip, r0, r3
   1b30e:	fa20 f002 	lsr.w	r0, r0, r2
   1b312:	fa01 fe03 	lsl.w	lr, r1, r3
   1b316:	ea40 000e 	orr.w	r0, r0, lr
   1b31a:	fa21 f102 	lsr.w	r1, r1, r2
   1b31e:	4414      	add	r4, r2
   1b320:	e6c1      	b.n	1b0a6 <__adddf3+0xe6>
   1b322:	bf00      	nop

0001b324 <__aeabi_dmul>:
   1b324:	b570      	push	{r4, r5, r6, lr}
   1b326:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1b32a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1b32e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1b332:	bf1d      	ittte	ne
   1b334:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1b338:	ea94 0f0c 	teqne	r4, ip
   1b33c:	ea95 0f0c 	teqne	r5, ip
   1b340:	f000 f8de 	bleq	1b500 <__aeabi_dmul+0x1dc>
   1b344:	442c      	add	r4, r5
   1b346:	ea81 0603 	eor.w	r6, r1, r3
   1b34a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1b34e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1b352:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1b356:	bf18      	it	ne
   1b358:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1b35c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b364:	d038      	beq.n	1b3d8 <__aeabi_dmul+0xb4>
   1b366:	fba0 ce02 	umull	ip, lr, r0, r2
   1b36a:	f04f 0500 	mov.w	r5, #0
   1b36e:	fbe1 e502 	umlal	lr, r5, r1, r2
   1b372:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1b376:	fbe0 e503 	umlal	lr, r5, r0, r3
   1b37a:	f04f 0600 	mov.w	r6, #0
   1b37e:	fbe1 5603 	umlal	r5, r6, r1, r3
   1b382:	f09c 0f00 	teq	ip, #0
   1b386:	bf18      	it	ne
   1b388:	f04e 0e01 	orrne.w	lr, lr, #1
   1b38c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1b390:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1b394:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1b398:	d204      	bcs.n	1b3a4 <__aeabi_dmul+0x80>
   1b39a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1b39e:	416d      	adcs	r5, r5
   1b3a0:	eb46 0606 	adc.w	r6, r6, r6
   1b3a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1b3a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1b3ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1b3b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1b3b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1b3b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1b3bc:	bf88      	it	hi
   1b3be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1b3c2:	d81e      	bhi.n	1b402 <__aeabi_dmul+0xde>
   1b3c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1b3c8:	bf08      	it	eq
   1b3ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1b3ce:	f150 0000 	adcs.w	r0, r0, #0
   1b3d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b3d6:	bd70      	pop	{r4, r5, r6, pc}
   1b3d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1b3dc:	ea46 0101 	orr.w	r1, r6, r1
   1b3e0:	ea40 0002 	orr.w	r0, r0, r2
   1b3e4:	ea81 0103 	eor.w	r1, r1, r3
   1b3e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1b3ec:	bfc2      	ittt	gt
   1b3ee:	ebd4 050c 	rsbsgt	r5, r4, ip
   1b3f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1b3f6:	bd70      	popgt	{r4, r5, r6, pc}
   1b3f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b3fc:	f04f 0e00 	mov.w	lr, #0
   1b400:	3c01      	subs	r4, #1
   1b402:	f300 80ab 	bgt.w	1b55c <__aeabi_dmul+0x238>
   1b406:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1b40a:	bfde      	ittt	le
   1b40c:	2000      	movle	r0, #0
   1b40e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1b412:	bd70      	pople	{r4, r5, r6, pc}
   1b414:	f1c4 0400 	rsb	r4, r4, #0
   1b418:	3c20      	subs	r4, #32
   1b41a:	da35      	bge.n	1b488 <__aeabi_dmul+0x164>
   1b41c:	340c      	adds	r4, #12
   1b41e:	dc1b      	bgt.n	1b458 <__aeabi_dmul+0x134>
   1b420:	f104 0414 	add.w	r4, r4, #20
   1b424:	f1c4 0520 	rsb	r5, r4, #32
   1b428:	fa00 f305 	lsl.w	r3, r0, r5
   1b42c:	fa20 f004 	lsr.w	r0, r0, r4
   1b430:	fa01 f205 	lsl.w	r2, r1, r5
   1b434:	ea40 0002 	orr.w	r0, r0, r2
   1b438:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1b43c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b440:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1b444:	fa21 f604 	lsr.w	r6, r1, r4
   1b448:	eb42 0106 	adc.w	r1, r2, r6
   1b44c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1b450:	bf08      	it	eq
   1b452:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1b456:	bd70      	pop	{r4, r5, r6, pc}
   1b458:	f1c4 040c 	rsb	r4, r4, #12
   1b45c:	f1c4 0520 	rsb	r5, r4, #32
   1b460:	fa00 f304 	lsl.w	r3, r0, r4
   1b464:	fa20 f005 	lsr.w	r0, r0, r5
   1b468:	fa01 f204 	lsl.w	r2, r1, r4
   1b46c:	ea40 0002 	orr.w	r0, r0, r2
   1b470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1b474:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1b478:	f141 0100 	adc.w	r1, r1, #0
   1b47c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1b480:	bf08      	it	eq
   1b482:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1b486:	bd70      	pop	{r4, r5, r6, pc}
   1b488:	f1c4 0520 	rsb	r5, r4, #32
   1b48c:	fa00 f205 	lsl.w	r2, r0, r5
   1b490:	ea4e 0e02 	orr.w	lr, lr, r2
   1b494:	fa20 f304 	lsr.w	r3, r0, r4
   1b498:	fa01 f205 	lsl.w	r2, r1, r5
   1b49c:	ea43 0302 	orr.w	r3, r3, r2
   1b4a0:	fa21 f004 	lsr.w	r0, r1, r4
   1b4a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1b4a8:	fa21 f204 	lsr.w	r2, r1, r4
   1b4ac:	ea20 0002 	bic.w	r0, r0, r2
   1b4b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1b4b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1b4b8:	bf08      	it	eq
   1b4ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1b4be:	bd70      	pop	{r4, r5, r6, pc}
   1b4c0:	f094 0f00 	teq	r4, #0
   1b4c4:	d10f      	bne.n	1b4e6 <__aeabi_dmul+0x1c2>
   1b4c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1b4ca:	0040      	lsls	r0, r0, #1
   1b4cc:	eb41 0101 	adc.w	r1, r1, r1
   1b4d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b4d4:	bf08      	it	eq
   1b4d6:	3c01      	subeq	r4, #1
   1b4d8:	d0f7      	beq.n	1b4ca <__aeabi_dmul+0x1a6>
   1b4da:	ea41 0106 	orr.w	r1, r1, r6
   1b4de:	f095 0f00 	teq	r5, #0
   1b4e2:	bf18      	it	ne
   1b4e4:	4770      	bxne	lr
   1b4e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1b4ea:	0052      	lsls	r2, r2, #1
   1b4ec:	eb43 0303 	adc.w	r3, r3, r3
   1b4f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1b4f4:	bf08      	it	eq
   1b4f6:	3d01      	subeq	r5, #1
   1b4f8:	d0f7      	beq.n	1b4ea <__aeabi_dmul+0x1c6>
   1b4fa:	ea43 0306 	orr.w	r3, r3, r6
   1b4fe:	4770      	bx	lr
   1b500:	ea94 0f0c 	teq	r4, ip
   1b504:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1b508:	bf18      	it	ne
   1b50a:	ea95 0f0c 	teqne	r5, ip
   1b50e:	d00c      	beq.n	1b52a <__aeabi_dmul+0x206>
   1b510:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1b514:	bf18      	it	ne
   1b516:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1b51a:	d1d1      	bne.n	1b4c0 <__aeabi_dmul+0x19c>
   1b51c:	ea81 0103 	eor.w	r1, r1, r3
   1b520:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1b524:	f04f 0000 	mov.w	r0, #0
   1b528:	bd70      	pop	{r4, r5, r6, pc}
   1b52a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1b52e:	bf06      	itte	eq
   1b530:	4610      	moveq	r0, r2
   1b532:	4619      	moveq	r1, r3
   1b534:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1b538:	d019      	beq.n	1b56e <__aeabi_dmul+0x24a>
   1b53a:	ea94 0f0c 	teq	r4, ip
   1b53e:	d102      	bne.n	1b546 <__aeabi_dmul+0x222>
   1b540:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1b544:	d113      	bne.n	1b56e <__aeabi_dmul+0x24a>
   1b546:	ea95 0f0c 	teq	r5, ip
   1b54a:	d105      	bne.n	1b558 <__aeabi_dmul+0x234>
   1b54c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1b550:	bf1c      	itt	ne
   1b552:	4610      	movne	r0, r2
   1b554:	4619      	movne	r1, r3
   1b556:	d10a      	bne.n	1b56e <__aeabi_dmul+0x24a>
   1b558:	ea81 0103 	eor.w	r1, r1, r3
   1b55c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1b560:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1b564:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b568:	f04f 0000 	mov.w	r0, #0
   1b56c:	bd70      	pop	{r4, r5, r6, pc}
   1b56e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1b572:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1b576:	bd70      	pop	{r4, r5, r6, pc}

0001b578 <__aeabi_ddiv>:
   1b578:	b570      	push	{r4, r5, r6, lr}
   1b57a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1b57e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1b582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1b586:	bf1d      	ittte	ne
   1b588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1b58c:	ea94 0f0c 	teqne	r4, ip
   1b590:	ea95 0f0c 	teqne	r5, ip
   1b594:	f000 f8a7 	bleq	1b6e6 <__aeabi_ddiv+0x16e>
   1b598:	eba4 0405 	sub.w	r4, r4, r5
   1b59c:	ea81 0e03 	eor.w	lr, r1, r3
   1b5a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1b5a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b5a8:	f000 8088 	beq.w	1b6bc <__aeabi_ddiv+0x144>
   1b5ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b5b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1b5b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1b5b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1b5bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1b5c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1b5c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1b5c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1b5cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1b5d0:	429d      	cmp	r5, r3
   1b5d2:	bf08      	it	eq
   1b5d4:	4296      	cmpeq	r6, r2
   1b5d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1b5da:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1b5de:	d202      	bcs.n	1b5e6 <__aeabi_ddiv+0x6e>
   1b5e0:	085b      	lsrs	r3, r3, #1
   1b5e2:	ea4f 0232 	mov.w	r2, r2, rrx
   1b5e6:	1ab6      	subs	r6, r6, r2
   1b5e8:	eb65 0503 	sbc.w	r5, r5, r3
   1b5ec:	085b      	lsrs	r3, r3, #1
   1b5ee:	ea4f 0232 	mov.w	r2, r2, rrx
   1b5f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1b5f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1b5fa:	ebb6 0e02 	subs.w	lr, r6, r2
   1b5fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   1b602:	bf22      	ittt	cs
   1b604:	1ab6      	subcs	r6, r6, r2
   1b606:	4675      	movcs	r5, lr
   1b608:	ea40 000c 	orrcs.w	r0, r0, ip
   1b60c:	085b      	lsrs	r3, r3, #1
   1b60e:	ea4f 0232 	mov.w	r2, r2, rrx
   1b612:	ebb6 0e02 	subs.w	lr, r6, r2
   1b616:	eb75 0e03 	sbcs.w	lr, r5, r3
   1b61a:	bf22      	ittt	cs
   1b61c:	1ab6      	subcs	r6, r6, r2
   1b61e:	4675      	movcs	r5, lr
   1b620:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1b624:	085b      	lsrs	r3, r3, #1
   1b626:	ea4f 0232 	mov.w	r2, r2, rrx
   1b62a:	ebb6 0e02 	subs.w	lr, r6, r2
   1b62e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1b632:	bf22      	ittt	cs
   1b634:	1ab6      	subcs	r6, r6, r2
   1b636:	4675      	movcs	r5, lr
   1b638:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1b63c:	085b      	lsrs	r3, r3, #1
   1b63e:	ea4f 0232 	mov.w	r2, r2, rrx
   1b642:	ebb6 0e02 	subs.w	lr, r6, r2
   1b646:	eb75 0e03 	sbcs.w	lr, r5, r3
   1b64a:	bf22      	ittt	cs
   1b64c:	1ab6      	subcs	r6, r6, r2
   1b64e:	4675      	movcs	r5, lr
   1b650:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1b654:	ea55 0e06 	orrs.w	lr, r5, r6
   1b658:	d018      	beq.n	1b68c <__aeabi_ddiv+0x114>
   1b65a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1b65e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1b662:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1b666:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1b66a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1b66e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1b672:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1b676:	d1c0      	bne.n	1b5fa <__aeabi_ddiv+0x82>
   1b678:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b67c:	d10b      	bne.n	1b696 <__aeabi_ddiv+0x11e>
   1b67e:	ea41 0100 	orr.w	r1, r1, r0
   1b682:	f04f 0000 	mov.w	r0, #0
   1b686:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1b68a:	e7b6      	b.n	1b5fa <__aeabi_ddiv+0x82>
   1b68c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b690:	bf04      	itt	eq
   1b692:	4301      	orreq	r1, r0
   1b694:	2000      	moveq	r0, #0
   1b696:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1b69a:	bf88      	it	hi
   1b69c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1b6a0:	f63f aeaf 	bhi.w	1b402 <__aeabi_dmul+0xde>
   1b6a4:	ebb5 0c03 	subs.w	ip, r5, r3
   1b6a8:	bf04      	itt	eq
   1b6aa:	ebb6 0c02 	subseq.w	ip, r6, r2
   1b6ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b6b2:	f150 0000 	adcs.w	r0, r0, #0
   1b6b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b6ba:	bd70      	pop	{r4, r5, r6, pc}
   1b6bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1b6c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1b6c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1b6c8:	bfc2      	ittt	gt
   1b6ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   1b6ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1b6d2:	bd70      	popgt	{r4, r5, r6, pc}
   1b6d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b6d8:	f04f 0e00 	mov.w	lr, #0
   1b6dc:	3c01      	subs	r4, #1
   1b6de:	e690      	b.n	1b402 <__aeabi_dmul+0xde>
   1b6e0:	ea45 0e06 	orr.w	lr, r5, r6
   1b6e4:	e68d      	b.n	1b402 <__aeabi_dmul+0xde>
   1b6e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1b6ea:	ea94 0f0c 	teq	r4, ip
   1b6ee:	bf08      	it	eq
   1b6f0:	ea95 0f0c 	teqeq	r5, ip
   1b6f4:	f43f af3b 	beq.w	1b56e <__aeabi_dmul+0x24a>
   1b6f8:	ea94 0f0c 	teq	r4, ip
   1b6fc:	d10a      	bne.n	1b714 <__aeabi_ddiv+0x19c>
   1b6fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b702:	f47f af34 	bne.w	1b56e <__aeabi_dmul+0x24a>
   1b706:	ea95 0f0c 	teq	r5, ip
   1b70a:	f47f af25 	bne.w	1b558 <__aeabi_dmul+0x234>
   1b70e:	4610      	mov	r0, r2
   1b710:	4619      	mov	r1, r3
   1b712:	e72c      	b.n	1b56e <__aeabi_dmul+0x24a>
   1b714:	ea95 0f0c 	teq	r5, ip
   1b718:	d106      	bne.n	1b728 <__aeabi_ddiv+0x1b0>
   1b71a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1b71e:	f43f aefd 	beq.w	1b51c <__aeabi_dmul+0x1f8>
   1b722:	4610      	mov	r0, r2
   1b724:	4619      	mov	r1, r3
   1b726:	e722      	b.n	1b56e <__aeabi_dmul+0x24a>
   1b728:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1b72c:	bf18      	it	ne
   1b72e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1b732:	f47f aec5 	bne.w	1b4c0 <__aeabi_dmul+0x19c>
   1b736:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1b73a:	f47f af0d 	bne.w	1b558 <__aeabi_dmul+0x234>
   1b73e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1b742:	f47f aeeb 	bne.w	1b51c <__aeabi_dmul+0x1f8>
   1b746:	e712      	b.n	1b56e <__aeabi_dmul+0x24a>

0001b748 <__gedf2>:
   1b748:	f04f 3cff 	mov.w	ip, #4294967295
   1b74c:	e006      	b.n	1b75c <__cmpdf2+0x4>
   1b74e:	bf00      	nop

0001b750 <__ledf2>:
   1b750:	f04f 0c01 	mov.w	ip, #1
   1b754:	e002      	b.n	1b75c <__cmpdf2+0x4>
   1b756:	bf00      	nop

0001b758 <__cmpdf2>:
   1b758:	f04f 0c01 	mov.w	ip, #1
   1b75c:	f84d cd04 	str.w	ip, [sp, #-4]!
   1b760:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1b764:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b768:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1b76c:	bf18      	it	ne
   1b76e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1b772:	d01b      	beq.n	1b7ac <__cmpdf2+0x54>
   1b774:	b001      	add	sp, #4
   1b776:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1b77a:	bf0c      	ite	eq
   1b77c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1b780:	ea91 0f03 	teqne	r1, r3
   1b784:	bf02      	ittt	eq
   1b786:	ea90 0f02 	teqeq	r0, r2
   1b78a:	2000      	moveq	r0, #0
   1b78c:	4770      	bxeq	lr
   1b78e:	f110 0f00 	cmn.w	r0, #0
   1b792:	ea91 0f03 	teq	r1, r3
   1b796:	bf58      	it	pl
   1b798:	4299      	cmppl	r1, r3
   1b79a:	bf08      	it	eq
   1b79c:	4290      	cmpeq	r0, r2
   1b79e:	bf2c      	ite	cs
   1b7a0:	17d8      	asrcs	r0, r3, #31
   1b7a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1b7a6:	f040 0001 	orr.w	r0, r0, #1
   1b7aa:	4770      	bx	lr
   1b7ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1b7b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b7b4:	d102      	bne.n	1b7bc <__cmpdf2+0x64>
   1b7b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1b7ba:	d107      	bne.n	1b7cc <__cmpdf2+0x74>
   1b7bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1b7c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b7c4:	d1d6      	bne.n	1b774 <__cmpdf2+0x1c>
   1b7c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1b7ca:	d0d3      	beq.n	1b774 <__cmpdf2+0x1c>
   1b7cc:	f85d 0b04 	ldr.w	r0, [sp], #4
   1b7d0:	4770      	bx	lr
   1b7d2:	bf00      	nop

0001b7d4 <__aeabi_cdrcmple>:
   1b7d4:	4684      	mov	ip, r0
   1b7d6:	4610      	mov	r0, r2
   1b7d8:	4662      	mov	r2, ip
   1b7da:	468c      	mov	ip, r1
   1b7dc:	4619      	mov	r1, r3
   1b7de:	4663      	mov	r3, ip
   1b7e0:	e000      	b.n	1b7e4 <__aeabi_cdcmpeq>
   1b7e2:	bf00      	nop

0001b7e4 <__aeabi_cdcmpeq>:
   1b7e4:	b501      	push	{r0, lr}
   1b7e6:	f7ff ffb7 	bl	1b758 <__cmpdf2>
   1b7ea:	2800      	cmp	r0, #0
   1b7ec:	bf48      	it	mi
   1b7ee:	f110 0f00 	cmnmi.w	r0, #0
   1b7f2:	bd01      	pop	{r0, pc}

0001b7f4 <__aeabi_dcmpeq>:
   1b7f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b7f8:	f7ff fff4 	bl	1b7e4 <__aeabi_cdcmpeq>
   1b7fc:	bf0c      	ite	eq
   1b7fe:	2001      	moveq	r0, #1
   1b800:	2000      	movne	r0, #0
   1b802:	f85d fb08 	ldr.w	pc, [sp], #8
   1b806:	bf00      	nop

0001b808 <__aeabi_dcmplt>:
   1b808:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b80c:	f7ff ffea 	bl	1b7e4 <__aeabi_cdcmpeq>
   1b810:	bf34      	ite	cc
   1b812:	2001      	movcc	r0, #1
   1b814:	2000      	movcs	r0, #0
   1b816:	f85d fb08 	ldr.w	pc, [sp], #8
   1b81a:	bf00      	nop

0001b81c <__aeabi_dcmple>:
   1b81c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b820:	f7ff ffe0 	bl	1b7e4 <__aeabi_cdcmpeq>
   1b824:	bf94      	ite	ls
   1b826:	2001      	movls	r0, #1
   1b828:	2000      	movhi	r0, #0
   1b82a:	f85d fb08 	ldr.w	pc, [sp], #8
   1b82e:	bf00      	nop

0001b830 <__aeabi_dcmpge>:
   1b830:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b834:	f7ff ffce 	bl	1b7d4 <__aeabi_cdrcmple>
   1b838:	bf94      	ite	ls
   1b83a:	2001      	movls	r0, #1
   1b83c:	2000      	movhi	r0, #0
   1b83e:	f85d fb08 	ldr.w	pc, [sp], #8
   1b842:	bf00      	nop

0001b844 <__aeabi_dcmpgt>:
   1b844:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b848:	f7ff ffc4 	bl	1b7d4 <__aeabi_cdrcmple>
   1b84c:	bf34      	ite	cc
   1b84e:	2001      	movcc	r0, #1
   1b850:	2000      	movcs	r0, #0
   1b852:	f85d fb08 	ldr.w	pc, [sp], #8
   1b856:	bf00      	nop

0001b858 <__aeabi_dcmpun>:
   1b858:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1b85c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b860:	d102      	bne.n	1b868 <__aeabi_dcmpun+0x10>
   1b862:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1b866:	d10a      	bne.n	1b87e <__aeabi_dcmpun+0x26>
   1b868:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1b86c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b870:	d102      	bne.n	1b878 <__aeabi_dcmpun+0x20>
   1b872:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1b876:	d102      	bne.n	1b87e <__aeabi_dcmpun+0x26>
   1b878:	f04f 0000 	mov.w	r0, #0
   1b87c:	4770      	bx	lr
   1b87e:	f04f 0001 	mov.w	r0, #1
   1b882:	4770      	bx	lr

0001b884 <__aeabi_d2uiz>:
   1b884:	004a      	lsls	r2, r1, #1
   1b886:	d211      	bcs.n	1b8ac <__aeabi_d2uiz+0x28>
   1b888:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1b88c:	d211      	bcs.n	1b8b2 <__aeabi_d2uiz+0x2e>
   1b88e:	d50d      	bpl.n	1b8ac <__aeabi_d2uiz+0x28>
   1b890:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1b894:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1b898:	d40e      	bmi.n	1b8b8 <__aeabi_d2uiz+0x34>
   1b89a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1b89e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b8a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1b8a6:	fa23 f002 	lsr.w	r0, r3, r2
   1b8aa:	4770      	bx	lr
   1b8ac:	f04f 0000 	mov.w	r0, #0
   1b8b0:	4770      	bx	lr
   1b8b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1b8b6:	d102      	bne.n	1b8be <__aeabi_d2uiz+0x3a>
   1b8b8:	f04f 30ff 	mov.w	r0, #4294967295
   1b8bc:	4770      	bx	lr
   1b8be:	f04f 0000 	mov.w	r0, #0
   1b8c2:	4770      	bx	lr

0001b8c4 <__aeabi_frsub>:
   1b8c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1b8c8:	e002      	b.n	1b8d0 <__addsf3>
   1b8ca:	bf00      	nop

0001b8cc <__aeabi_fsub>:
   1b8cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001b8d0 <__addsf3>:
   1b8d0:	0042      	lsls	r2, r0, #1
   1b8d2:	bf1f      	itttt	ne
   1b8d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1b8d8:	ea92 0f03 	teqne	r2, r3
   1b8dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1b8e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1b8e4:	d06a      	beq.n	1b9bc <__addsf3+0xec>
   1b8e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1b8ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1b8ee:	bfc1      	itttt	gt
   1b8f0:	18d2      	addgt	r2, r2, r3
   1b8f2:	4041      	eorgt	r1, r0
   1b8f4:	4048      	eorgt	r0, r1
   1b8f6:	4041      	eorgt	r1, r0
   1b8f8:	bfb8      	it	lt
   1b8fa:	425b      	neglt	r3, r3
   1b8fc:	2b19      	cmp	r3, #25
   1b8fe:	bf88      	it	hi
   1b900:	4770      	bxhi	lr
   1b902:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1b906:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b90a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1b90e:	bf18      	it	ne
   1b910:	4240      	negne	r0, r0
   1b912:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b916:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1b91a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1b91e:	bf18      	it	ne
   1b920:	4249      	negne	r1, r1
   1b922:	ea92 0f03 	teq	r2, r3
   1b926:	d03f      	beq.n	1b9a8 <__addsf3+0xd8>
   1b928:	f1a2 0201 	sub.w	r2, r2, #1
   1b92c:	fa41 fc03 	asr.w	ip, r1, r3
   1b930:	eb10 000c 	adds.w	r0, r0, ip
   1b934:	f1c3 0320 	rsb	r3, r3, #32
   1b938:	fa01 f103 	lsl.w	r1, r1, r3
   1b93c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1b940:	d502      	bpl.n	1b948 <__addsf3+0x78>
   1b942:	4249      	negs	r1, r1
   1b944:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1b948:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b94c:	d313      	bcc.n	1b976 <__addsf3+0xa6>
   1b94e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1b952:	d306      	bcc.n	1b962 <__addsf3+0x92>
   1b954:	0840      	lsrs	r0, r0, #1
   1b956:	ea4f 0131 	mov.w	r1, r1, rrx
   1b95a:	f102 0201 	add.w	r2, r2, #1
   1b95e:	2afe      	cmp	r2, #254	; 0xfe
   1b960:	d251      	bcs.n	1ba06 <__addsf3+0x136>
   1b962:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1b966:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1b96a:	bf08      	it	eq
   1b96c:	f020 0001 	biceq.w	r0, r0, #1
   1b970:	ea40 0003 	orr.w	r0, r0, r3
   1b974:	4770      	bx	lr
   1b976:	0049      	lsls	r1, r1, #1
   1b978:	eb40 0000 	adc.w	r0, r0, r0
   1b97c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1b980:	f1a2 0201 	sub.w	r2, r2, #1
   1b984:	d1ed      	bne.n	1b962 <__addsf3+0x92>
   1b986:	fab0 fc80 	clz	ip, r0
   1b98a:	f1ac 0c08 	sub.w	ip, ip, #8
   1b98e:	ebb2 020c 	subs.w	r2, r2, ip
   1b992:	fa00 f00c 	lsl.w	r0, r0, ip
   1b996:	bfaa      	itet	ge
   1b998:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1b99c:	4252      	neglt	r2, r2
   1b99e:	4318      	orrge	r0, r3
   1b9a0:	bfbc      	itt	lt
   1b9a2:	40d0      	lsrlt	r0, r2
   1b9a4:	4318      	orrlt	r0, r3
   1b9a6:	4770      	bx	lr
   1b9a8:	f092 0f00 	teq	r2, #0
   1b9ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1b9b0:	bf06      	itte	eq
   1b9b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1b9b6:	3201      	addeq	r2, #1
   1b9b8:	3b01      	subne	r3, #1
   1b9ba:	e7b5      	b.n	1b928 <__addsf3+0x58>
   1b9bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1b9c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1b9c4:	bf18      	it	ne
   1b9c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1b9ca:	d021      	beq.n	1ba10 <__addsf3+0x140>
   1b9cc:	ea92 0f03 	teq	r2, r3
   1b9d0:	d004      	beq.n	1b9dc <__addsf3+0x10c>
   1b9d2:	f092 0f00 	teq	r2, #0
   1b9d6:	bf08      	it	eq
   1b9d8:	4608      	moveq	r0, r1
   1b9da:	4770      	bx	lr
   1b9dc:	ea90 0f01 	teq	r0, r1
   1b9e0:	bf1c      	itt	ne
   1b9e2:	2000      	movne	r0, #0
   1b9e4:	4770      	bxne	lr
   1b9e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1b9ea:	d104      	bne.n	1b9f6 <__addsf3+0x126>
   1b9ec:	0040      	lsls	r0, r0, #1
   1b9ee:	bf28      	it	cs
   1b9f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1b9f4:	4770      	bx	lr
   1b9f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1b9fa:	bf3c      	itt	cc
   1b9fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1ba00:	4770      	bxcc	lr
   1ba02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1ba06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1ba0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ba0e:	4770      	bx	lr
   1ba10:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1ba14:	bf16      	itet	ne
   1ba16:	4608      	movne	r0, r1
   1ba18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1ba1c:	4601      	movne	r1, r0
   1ba1e:	0242      	lsls	r2, r0, #9
   1ba20:	bf06      	itte	eq
   1ba22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1ba26:	ea90 0f01 	teqeq	r0, r1
   1ba2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1ba2e:	4770      	bx	lr

0001ba30 <__aeabi_ui2f>:
   1ba30:	f04f 0300 	mov.w	r3, #0
   1ba34:	e004      	b.n	1ba40 <__aeabi_i2f+0x8>
   1ba36:	bf00      	nop

0001ba38 <__aeabi_i2f>:
   1ba38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1ba3c:	bf48      	it	mi
   1ba3e:	4240      	negmi	r0, r0
   1ba40:	ea5f 0c00 	movs.w	ip, r0
   1ba44:	bf08      	it	eq
   1ba46:	4770      	bxeq	lr
   1ba48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1ba4c:	4601      	mov	r1, r0
   1ba4e:	f04f 0000 	mov.w	r0, #0
   1ba52:	e01c      	b.n	1ba8e <__aeabi_l2f+0x2a>

0001ba54 <__aeabi_ul2f>:
   1ba54:	ea50 0201 	orrs.w	r2, r0, r1
   1ba58:	bf08      	it	eq
   1ba5a:	4770      	bxeq	lr
   1ba5c:	f04f 0300 	mov.w	r3, #0
   1ba60:	e00a      	b.n	1ba78 <__aeabi_l2f+0x14>
   1ba62:	bf00      	nop

0001ba64 <__aeabi_l2f>:
   1ba64:	ea50 0201 	orrs.w	r2, r0, r1
   1ba68:	bf08      	it	eq
   1ba6a:	4770      	bxeq	lr
   1ba6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1ba70:	d502      	bpl.n	1ba78 <__aeabi_l2f+0x14>
   1ba72:	4240      	negs	r0, r0
   1ba74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ba78:	ea5f 0c01 	movs.w	ip, r1
   1ba7c:	bf02      	ittt	eq
   1ba7e:	4684      	moveq	ip, r0
   1ba80:	4601      	moveq	r1, r0
   1ba82:	2000      	moveq	r0, #0
   1ba84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1ba88:	bf08      	it	eq
   1ba8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1ba8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1ba92:	fabc f28c 	clz	r2, ip
   1ba96:	3a08      	subs	r2, #8
   1ba98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1ba9c:	db10      	blt.n	1bac0 <__aeabi_l2f+0x5c>
   1ba9e:	fa01 fc02 	lsl.w	ip, r1, r2
   1baa2:	4463      	add	r3, ip
   1baa4:	fa00 fc02 	lsl.w	ip, r0, r2
   1baa8:	f1c2 0220 	rsb	r2, r2, #32
   1baac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1bab0:	fa20 f202 	lsr.w	r2, r0, r2
   1bab4:	eb43 0002 	adc.w	r0, r3, r2
   1bab8:	bf08      	it	eq
   1baba:	f020 0001 	biceq.w	r0, r0, #1
   1babe:	4770      	bx	lr
   1bac0:	f102 0220 	add.w	r2, r2, #32
   1bac4:	fa01 fc02 	lsl.w	ip, r1, r2
   1bac8:	f1c2 0220 	rsb	r2, r2, #32
   1bacc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1bad0:	fa21 f202 	lsr.w	r2, r1, r2
   1bad4:	eb43 0002 	adc.w	r0, r3, r2
   1bad8:	bf08      	it	eq
   1bada:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1bade:	4770      	bx	lr

0001bae0 <__aeabi_fmul>:
   1bae0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bae4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1bae8:	bf1e      	ittt	ne
   1baea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1baee:	ea92 0f0c 	teqne	r2, ip
   1baf2:	ea93 0f0c 	teqne	r3, ip
   1baf6:	d06f      	beq.n	1bbd8 <__aeabi_fmul+0xf8>
   1baf8:	441a      	add	r2, r3
   1bafa:	ea80 0c01 	eor.w	ip, r0, r1
   1bafe:	0240      	lsls	r0, r0, #9
   1bb00:	bf18      	it	ne
   1bb02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1bb06:	d01e      	beq.n	1bb46 <__aeabi_fmul+0x66>
   1bb08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1bb0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1bb10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1bb14:	fba0 3101 	umull	r3, r1, r0, r1
   1bb18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1bb1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1bb20:	bf3e      	ittt	cc
   1bb22:	0049      	lslcc	r1, r1, #1
   1bb24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1bb28:	005b      	lslcc	r3, r3, #1
   1bb2a:	ea40 0001 	orr.w	r0, r0, r1
   1bb2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1bb32:	2afd      	cmp	r2, #253	; 0xfd
   1bb34:	d81d      	bhi.n	1bb72 <__aeabi_fmul+0x92>
   1bb36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1bb3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1bb3e:	bf08      	it	eq
   1bb40:	f020 0001 	biceq.w	r0, r0, #1
   1bb44:	4770      	bx	lr
   1bb46:	f090 0f00 	teq	r0, #0
   1bb4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1bb4e:	bf08      	it	eq
   1bb50:	0249      	lsleq	r1, r1, #9
   1bb52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1bb56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1bb5a:	3a7f      	subs	r2, #127	; 0x7f
   1bb5c:	bfc2      	ittt	gt
   1bb5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1bb62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1bb66:	4770      	bxgt	lr
   1bb68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bb6c:	f04f 0300 	mov.w	r3, #0
   1bb70:	3a01      	subs	r2, #1
   1bb72:	dc5d      	bgt.n	1bc30 <__aeabi_fmul+0x150>
   1bb74:	f112 0f19 	cmn.w	r2, #25
   1bb78:	bfdc      	itt	le
   1bb7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1bb7e:	4770      	bxle	lr
   1bb80:	f1c2 0200 	rsb	r2, r2, #0
   1bb84:	0041      	lsls	r1, r0, #1
   1bb86:	fa21 f102 	lsr.w	r1, r1, r2
   1bb8a:	f1c2 0220 	rsb	r2, r2, #32
   1bb8e:	fa00 fc02 	lsl.w	ip, r0, r2
   1bb92:	ea5f 0031 	movs.w	r0, r1, rrx
   1bb96:	f140 0000 	adc.w	r0, r0, #0
   1bb9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1bb9e:	bf08      	it	eq
   1bba0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1bba4:	4770      	bx	lr
   1bba6:	f092 0f00 	teq	r2, #0
   1bbaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1bbae:	bf02      	ittt	eq
   1bbb0:	0040      	lsleq	r0, r0, #1
   1bbb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1bbb6:	3a01      	subeq	r2, #1
   1bbb8:	d0f9      	beq.n	1bbae <__aeabi_fmul+0xce>
   1bbba:	ea40 000c 	orr.w	r0, r0, ip
   1bbbe:	f093 0f00 	teq	r3, #0
   1bbc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1bbc6:	bf02      	ittt	eq
   1bbc8:	0049      	lsleq	r1, r1, #1
   1bbca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1bbce:	3b01      	subeq	r3, #1
   1bbd0:	d0f9      	beq.n	1bbc6 <__aeabi_fmul+0xe6>
   1bbd2:	ea41 010c 	orr.w	r1, r1, ip
   1bbd6:	e78f      	b.n	1baf8 <__aeabi_fmul+0x18>
   1bbd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1bbdc:	ea92 0f0c 	teq	r2, ip
   1bbe0:	bf18      	it	ne
   1bbe2:	ea93 0f0c 	teqne	r3, ip
   1bbe6:	d00a      	beq.n	1bbfe <__aeabi_fmul+0x11e>
   1bbe8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1bbec:	bf18      	it	ne
   1bbee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1bbf2:	d1d8      	bne.n	1bba6 <__aeabi_fmul+0xc6>
   1bbf4:	ea80 0001 	eor.w	r0, r0, r1
   1bbf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1bbfc:	4770      	bx	lr
   1bbfe:	f090 0f00 	teq	r0, #0
   1bc02:	bf17      	itett	ne
   1bc04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1bc08:	4608      	moveq	r0, r1
   1bc0a:	f091 0f00 	teqne	r1, #0
   1bc0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1bc12:	d014      	beq.n	1bc3e <__aeabi_fmul+0x15e>
   1bc14:	ea92 0f0c 	teq	r2, ip
   1bc18:	d101      	bne.n	1bc1e <__aeabi_fmul+0x13e>
   1bc1a:	0242      	lsls	r2, r0, #9
   1bc1c:	d10f      	bne.n	1bc3e <__aeabi_fmul+0x15e>
   1bc1e:	ea93 0f0c 	teq	r3, ip
   1bc22:	d103      	bne.n	1bc2c <__aeabi_fmul+0x14c>
   1bc24:	024b      	lsls	r3, r1, #9
   1bc26:	bf18      	it	ne
   1bc28:	4608      	movne	r0, r1
   1bc2a:	d108      	bne.n	1bc3e <__aeabi_fmul+0x15e>
   1bc2c:	ea80 0001 	eor.w	r0, r0, r1
   1bc30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1bc34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1bc38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bc3c:	4770      	bx	lr
   1bc3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1bc42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1bc46:	4770      	bx	lr

0001bc48 <__aeabi_fdiv>:
   1bc48:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bc4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1bc50:	bf1e      	ittt	ne
   1bc52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1bc56:	ea92 0f0c 	teqne	r2, ip
   1bc5a:	ea93 0f0c 	teqne	r3, ip
   1bc5e:	d069      	beq.n	1bd34 <__aeabi_fdiv+0xec>
   1bc60:	eba2 0203 	sub.w	r2, r2, r3
   1bc64:	ea80 0c01 	eor.w	ip, r0, r1
   1bc68:	0249      	lsls	r1, r1, #9
   1bc6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1bc6e:	d037      	beq.n	1bce0 <__aeabi_fdiv+0x98>
   1bc70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1bc74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1bc78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1bc7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1bc80:	428b      	cmp	r3, r1
   1bc82:	bf38      	it	cc
   1bc84:	005b      	lslcc	r3, r3, #1
   1bc86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1bc8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1bc8e:	428b      	cmp	r3, r1
   1bc90:	bf24      	itt	cs
   1bc92:	1a5b      	subcs	r3, r3, r1
   1bc94:	ea40 000c 	orrcs.w	r0, r0, ip
   1bc98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1bc9c:	bf24      	itt	cs
   1bc9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1bca2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1bca6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1bcaa:	bf24      	itt	cs
   1bcac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1bcb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1bcb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1bcb8:	bf24      	itt	cs
   1bcba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1bcbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1bcc2:	011b      	lsls	r3, r3, #4
   1bcc4:	bf18      	it	ne
   1bcc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1bcca:	d1e0      	bne.n	1bc8e <__aeabi_fdiv+0x46>
   1bccc:	2afd      	cmp	r2, #253	; 0xfd
   1bcce:	f63f af50 	bhi.w	1bb72 <__aeabi_fmul+0x92>
   1bcd2:	428b      	cmp	r3, r1
   1bcd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1bcd8:	bf08      	it	eq
   1bcda:	f020 0001 	biceq.w	r0, r0, #1
   1bcde:	4770      	bx	lr
   1bce0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1bce4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1bce8:	327f      	adds	r2, #127	; 0x7f
   1bcea:	bfc2      	ittt	gt
   1bcec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1bcf0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1bcf4:	4770      	bxgt	lr
   1bcf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bcfa:	f04f 0300 	mov.w	r3, #0
   1bcfe:	3a01      	subs	r2, #1
   1bd00:	e737      	b.n	1bb72 <__aeabi_fmul+0x92>
   1bd02:	f092 0f00 	teq	r2, #0
   1bd06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1bd0a:	bf02      	ittt	eq
   1bd0c:	0040      	lsleq	r0, r0, #1
   1bd0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1bd12:	3a01      	subeq	r2, #1
   1bd14:	d0f9      	beq.n	1bd0a <__aeabi_fdiv+0xc2>
   1bd16:	ea40 000c 	orr.w	r0, r0, ip
   1bd1a:	f093 0f00 	teq	r3, #0
   1bd1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1bd22:	bf02      	ittt	eq
   1bd24:	0049      	lsleq	r1, r1, #1
   1bd26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1bd2a:	3b01      	subeq	r3, #1
   1bd2c:	d0f9      	beq.n	1bd22 <__aeabi_fdiv+0xda>
   1bd2e:	ea41 010c 	orr.w	r1, r1, ip
   1bd32:	e795      	b.n	1bc60 <__aeabi_fdiv+0x18>
   1bd34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1bd38:	ea92 0f0c 	teq	r2, ip
   1bd3c:	d108      	bne.n	1bd50 <__aeabi_fdiv+0x108>
   1bd3e:	0242      	lsls	r2, r0, #9
   1bd40:	f47f af7d 	bne.w	1bc3e <__aeabi_fmul+0x15e>
   1bd44:	ea93 0f0c 	teq	r3, ip
   1bd48:	f47f af70 	bne.w	1bc2c <__aeabi_fmul+0x14c>
   1bd4c:	4608      	mov	r0, r1
   1bd4e:	e776      	b.n	1bc3e <__aeabi_fmul+0x15e>
   1bd50:	ea93 0f0c 	teq	r3, ip
   1bd54:	d104      	bne.n	1bd60 <__aeabi_fdiv+0x118>
   1bd56:	024b      	lsls	r3, r1, #9
   1bd58:	f43f af4c 	beq.w	1bbf4 <__aeabi_fmul+0x114>
   1bd5c:	4608      	mov	r0, r1
   1bd5e:	e76e      	b.n	1bc3e <__aeabi_fmul+0x15e>
   1bd60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1bd64:	bf18      	it	ne
   1bd66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1bd6a:	d1ca      	bne.n	1bd02 <__aeabi_fdiv+0xba>
   1bd6c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1bd70:	f47f af5c 	bne.w	1bc2c <__aeabi_fmul+0x14c>
   1bd74:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1bd78:	f47f af3c 	bne.w	1bbf4 <__aeabi_fmul+0x114>
   1bd7c:	e75f      	b.n	1bc3e <__aeabi_fmul+0x15e>
   1bd7e:	bf00      	nop

0001bd80 <__gesf2>:
   1bd80:	f04f 3cff 	mov.w	ip, #4294967295
   1bd84:	e006      	b.n	1bd94 <__cmpsf2+0x4>
   1bd86:	bf00      	nop

0001bd88 <__lesf2>:
   1bd88:	f04f 0c01 	mov.w	ip, #1
   1bd8c:	e002      	b.n	1bd94 <__cmpsf2+0x4>
   1bd8e:	bf00      	nop

0001bd90 <__cmpsf2>:
   1bd90:	f04f 0c01 	mov.w	ip, #1
   1bd94:	f84d cd04 	str.w	ip, [sp, #-4]!
   1bd98:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1bd9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1bda0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1bda4:	bf18      	it	ne
   1bda6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1bdaa:	d011      	beq.n	1bdd0 <__cmpsf2+0x40>
   1bdac:	b001      	add	sp, #4
   1bdae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1bdb2:	bf18      	it	ne
   1bdb4:	ea90 0f01 	teqne	r0, r1
   1bdb8:	bf58      	it	pl
   1bdba:	ebb2 0003 	subspl.w	r0, r2, r3
   1bdbe:	bf88      	it	hi
   1bdc0:	17c8      	asrhi	r0, r1, #31
   1bdc2:	bf38      	it	cc
   1bdc4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1bdc8:	bf18      	it	ne
   1bdca:	f040 0001 	orrne.w	r0, r0, #1
   1bdce:	4770      	bx	lr
   1bdd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1bdd4:	d102      	bne.n	1bddc <__cmpsf2+0x4c>
   1bdd6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1bdda:	d105      	bne.n	1bde8 <__cmpsf2+0x58>
   1bddc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1bde0:	d1e4      	bne.n	1bdac <__cmpsf2+0x1c>
   1bde2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1bde6:	d0e1      	beq.n	1bdac <__cmpsf2+0x1c>
   1bde8:	f85d 0b04 	ldr.w	r0, [sp], #4
   1bdec:	4770      	bx	lr
   1bdee:	bf00      	nop

0001bdf0 <__aeabi_cfrcmple>:
   1bdf0:	4684      	mov	ip, r0
   1bdf2:	4608      	mov	r0, r1
   1bdf4:	4661      	mov	r1, ip
   1bdf6:	e7ff      	b.n	1bdf8 <__aeabi_cfcmpeq>

0001bdf8 <__aeabi_cfcmpeq>:
   1bdf8:	b50f      	push	{r0, r1, r2, r3, lr}
   1bdfa:	f7ff ffc9 	bl	1bd90 <__cmpsf2>
   1bdfe:	2800      	cmp	r0, #0
   1be00:	bf48      	it	mi
   1be02:	f110 0f00 	cmnmi.w	r0, #0
   1be06:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001be08 <__aeabi_fcmpeq>:
   1be08:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be0c:	f7ff fff4 	bl	1bdf8 <__aeabi_cfcmpeq>
   1be10:	bf0c      	ite	eq
   1be12:	2001      	moveq	r0, #1
   1be14:	2000      	movne	r0, #0
   1be16:	f85d fb08 	ldr.w	pc, [sp], #8
   1be1a:	bf00      	nop

0001be1c <__aeabi_fcmplt>:
   1be1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be20:	f7ff ffea 	bl	1bdf8 <__aeabi_cfcmpeq>
   1be24:	bf34      	ite	cc
   1be26:	2001      	movcc	r0, #1
   1be28:	2000      	movcs	r0, #0
   1be2a:	f85d fb08 	ldr.w	pc, [sp], #8
   1be2e:	bf00      	nop

0001be30 <__aeabi_fcmple>:
   1be30:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be34:	f7ff ffe0 	bl	1bdf8 <__aeabi_cfcmpeq>
   1be38:	bf94      	ite	ls
   1be3a:	2001      	movls	r0, #1
   1be3c:	2000      	movhi	r0, #0
   1be3e:	f85d fb08 	ldr.w	pc, [sp], #8
   1be42:	bf00      	nop

0001be44 <__aeabi_fcmpge>:
   1be44:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be48:	f7ff ffd2 	bl	1bdf0 <__aeabi_cfrcmple>
   1be4c:	bf94      	ite	ls
   1be4e:	2001      	movls	r0, #1
   1be50:	2000      	movhi	r0, #0
   1be52:	f85d fb08 	ldr.w	pc, [sp], #8
   1be56:	bf00      	nop

0001be58 <__aeabi_fcmpgt>:
   1be58:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be5c:	f7ff ffc8 	bl	1bdf0 <__aeabi_cfrcmple>
   1be60:	bf34      	ite	cc
   1be62:	2001      	movcc	r0, #1
   1be64:	2000      	movcs	r0, #0
   1be66:	f85d fb08 	ldr.w	pc, [sp], #8
   1be6a:	bf00      	nop

0001be6c <__aeabi_f2uiz>:
   1be6c:	0042      	lsls	r2, r0, #1
   1be6e:	d20e      	bcs.n	1be8e <__aeabi_f2uiz+0x22>
   1be70:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1be74:	d30b      	bcc.n	1be8e <__aeabi_f2uiz+0x22>
   1be76:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1be7a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1be7e:	d409      	bmi.n	1be94 <__aeabi_f2uiz+0x28>
   1be80:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1be84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1be88:	fa23 f002 	lsr.w	r0, r3, r2
   1be8c:	4770      	bx	lr
   1be8e:	f04f 0000 	mov.w	r0, #0
   1be92:	4770      	bx	lr
   1be94:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1be98:	d101      	bne.n	1be9e <__aeabi_f2uiz+0x32>
   1be9a:	0242      	lsls	r2, r0, #9
   1be9c:	d102      	bne.n	1bea4 <__aeabi_f2uiz+0x38>
   1be9e:	f04f 30ff 	mov.w	r0, #4294967295
   1bea2:	4770      	bx	lr
   1bea4:	f04f 0000 	mov.w	r0, #0
   1bea8:	4770      	bx	lr
   1beaa:	bf00      	nop

0001beac <__aeabi_uldivmod>:
   1beac:	b953      	cbnz	r3, 1bec4 <__aeabi_uldivmod+0x18>
   1beae:	b94a      	cbnz	r2, 1bec4 <__aeabi_uldivmod+0x18>
   1beb0:	2900      	cmp	r1, #0
   1beb2:	bf08      	it	eq
   1beb4:	2800      	cmpeq	r0, #0
   1beb6:	bf1c      	itt	ne
   1beb8:	f04f 31ff 	movne.w	r1, #4294967295
   1bebc:	f04f 30ff 	movne.w	r0, #4294967295
   1bec0:	f000 b97a 	b.w	1c1b8 <__aeabi_idiv0>
   1bec4:	f1ad 0c08 	sub.w	ip, sp, #8
   1bec8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1becc:	f000 f806 	bl	1bedc <__udivmoddi4>
   1bed0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1bed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1bed8:	b004      	add	sp, #16
   1beda:	4770      	bx	lr

0001bedc <__udivmoddi4>:
   1bedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bee0:	468c      	mov	ip, r1
   1bee2:	460d      	mov	r5, r1
   1bee4:	4604      	mov	r4, r0
   1bee6:	9e08      	ldr	r6, [sp, #32]
   1bee8:	2b00      	cmp	r3, #0
   1beea:	d151      	bne.n	1bf90 <__udivmoddi4+0xb4>
   1beec:	428a      	cmp	r2, r1
   1beee:	4617      	mov	r7, r2
   1bef0:	d96d      	bls.n	1bfce <__udivmoddi4+0xf2>
   1bef2:	fab2 fe82 	clz	lr, r2
   1bef6:	f1be 0f00 	cmp.w	lr, #0
   1befa:	d00b      	beq.n	1bf14 <__udivmoddi4+0x38>
   1befc:	f1ce 0c20 	rsb	ip, lr, #32
   1bf00:	fa01 f50e 	lsl.w	r5, r1, lr
   1bf04:	fa20 fc0c 	lsr.w	ip, r0, ip
   1bf08:	fa02 f70e 	lsl.w	r7, r2, lr
   1bf0c:	ea4c 0c05 	orr.w	ip, ip, r5
   1bf10:	fa00 f40e 	lsl.w	r4, r0, lr
   1bf14:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1bf18:	0c25      	lsrs	r5, r4, #16
   1bf1a:	fbbc f8fa 	udiv	r8, ip, sl
   1bf1e:	fa1f f987 	uxth.w	r9, r7
   1bf22:	fb0a cc18 	mls	ip, sl, r8, ip
   1bf26:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1bf2a:	fb08 f309 	mul.w	r3, r8, r9
   1bf2e:	42ab      	cmp	r3, r5
   1bf30:	d90a      	bls.n	1bf48 <__udivmoddi4+0x6c>
   1bf32:	19ed      	adds	r5, r5, r7
   1bf34:	f108 32ff 	add.w	r2, r8, #4294967295
   1bf38:	f080 8123 	bcs.w	1c182 <__udivmoddi4+0x2a6>
   1bf3c:	42ab      	cmp	r3, r5
   1bf3e:	f240 8120 	bls.w	1c182 <__udivmoddi4+0x2a6>
   1bf42:	f1a8 0802 	sub.w	r8, r8, #2
   1bf46:	443d      	add	r5, r7
   1bf48:	1aed      	subs	r5, r5, r3
   1bf4a:	b2a4      	uxth	r4, r4
   1bf4c:	fbb5 f0fa 	udiv	r0, r5, sl
   1bf50:	fb0a 5510 	mls	r5, sl, r0, r5
   1bf54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1bf58:	fb00 f909 	mul.w	r9, r0, r9
   1bf5c:	45a1      	cmp	r9, r4
   1bf5e:	d909      	bls.n	1bf74 <__udivmoddi4+0x98>
   1bf60:	19e4      	adds	r4, r4, r7
   1bf62:	f100 33ff 	add.w	r3, r0, #4294967295
   1bf66:	f080 810a 	bcs.w	1c17e <__udivmoddi4+0x2a2>
   1bf6a:	45a1      	cmp	r9, r4
   1bf6c:	f240 8107 	bls.w	1c17e <__udivmoddi4+0x2a2>
   1bf70:	3802      	subs	r0, #2
   1bf72:	443c      	add	r4, r7
   1bf74:	eba4 0409 	sub.w	r4, r4, r9
   1bf78:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1bf7c:	2100      	movs	r1, #0
   1bf7e:	2e00      	cmp	r6, #0
   1bf80:	d061      	beq.n	1c046 <__udivmoddi4+0x16a>
   1bf82:	fa24 f40e 	lsr.w	r4, r4, lr
   1bf86:	2300      	movs	r3, #0
   1bf88:	6034      	str	r4, [r6, #0]
   1bf8a:	6073      	str	r3, [r6, #4]
   1bf8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bf90:	428b      	cmp	r3, r1
   1bf92:	d907      	bls.n	1bfa4 <__udivmoddi4+0xc8>
   1bf94:	2e00      	cmp	r6, #0
   1bf96:	d054      	beq.n	1c042 <__udivmoddi4+0x166>
   1bf98:	2100      	movs	r1, #0
   1bf9a:	e886 0021 	stmia.w	r6, {r0, r5}
   1bf9e:	4608      	mov	r0, r1
   1bfa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bfa4:	fab3 f183 	clz	r1, r3
   1bfa8:	2900      	cmp	r1, #0
   1bfaa:	f040 808e 	bne.w	1c0ca <__udivmoddi4+0x1ee>
   1bfae:	42ab      	cmp	r3, r5
   1bfb0:	d302      	bcc.n	1bfb8 <__udivmoddi4+0xdc>
   1bfb2:	4282      	cmp	r2, r0
   1bfb4:	f200 80fa 	bhi.w	1c1ac <__udivmoddi4+0x2d0>
   1bfb8:	1a84      	subs	r4, r0, r2
   1bfba:	eb65 0503 	sbc.w	r5, r5, r3
   1bfbe:	2001      	movs	r0, #1
   1bfc0:	46ac      	mov	ip, r5
   1bfc2:	2e00      	cmp	r6, #0
   1bfc4:	d03f      	beq.n	1c046 <__udivmoddi4+0x16a>
   1bfc6:	e886 1010 	stmia.w	r6, {r4, ip}
   1bfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bfce:	b912      	cbnz	r2, 1bfd6 <__udivmoddi4+0xfa>
   1bfd0:	2701      	movs	r7, #1
   1bfd2:	fbb7 f7f2 	udiv	r7, r7, r2
   1bfd6:	fab7 fe87 	clz	lr, r7
   1bfda:	f1be 0f00 	cmp.w	lr, #0
   1bfde:	d134      	bne.n	1c04a <__udivmoddi4+0x16e>
   1bfe0:	1beb      	subs	r3, r5, r7
   1bfe2:	0c3a      	lsrs	r2, r7, #16
   1bfe4:	fa1f fc87 	uxth.w	ip, r7
   1bfe8:	2101      	movs	r1, #1
   1bfea:	fbb3 f8f2 	udiv	r8, r3, r2
   1bfee:	0c25      	lsrs	r5, r4, #16
   1bff0:	fb02 3318 	mls	r3, r2, r8, r3
   1bff4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1bff8:	fb0c f308 	mul.w	r3, ip, r8
   1bffc:	42ab      	cmp	r3, r5
   1bffe:	d907      	bls.n	1c010 <__udivmoddi4+0x134>
   1c000:	19ed      	adds	r5, r5, r7
   1c002:	f108 30ff 	add.w	r0, r8, #4294967295
   1c006:	d202      	bcs.n	1c00e <__udivmoddi4+0x132>
   1c008:	42ab      	cmp	r3, r5
   1c00a:	f200 80d1 	bhi.w	1c1b0 <__udivmoddi4+0x2d4>
   1c00e:	4680      	mov	r8, r0
   1c010:	1aed      	subs	r5, r5, r3
   1c012:	b2a3      	uxth	r3, r4
   1c014:	fbb5 f0f2 	udiv	r0, r5, r2
   1c018:	fb02 5510 	mls	r5, r2, r0, r5
   1c01c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1c020:	fb0c fc00 	mul.w	ip, ip, r0
   1c024:	45a4      	cmp	ip, r4
   1c026:	d907      	bls.n	1c038 <__udivmoddi4+0x15c>
   1c028:	19e4      	adds	r4, r4, r7
   1c02a:	f100 33ff 	add.w	r3, r0, #4294967295
   1c02e:	d202      	bcs.n	1c036 <__udivmoddi4+0x15a>
   1c030:	45a4      	cmp	ip, r4
   1c032:	f200 80b8 	bhi.w	1c1a6 <__udivmoddi4+0x2ca>
   1c036:	4618      	mov	r0, r3
   1c038:	eba4 040c 	sub.w	r4, r4, ip
   1c03c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c040:	e79d      	b.n	1bf7e <__udivmoddi4+0xa2>
   1c042:	4631      	mov	r1, r6
   1c044:	4630      	mov	r0, r6
   1c046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c04a:	f1ce 0420 	rsb	r4, lr, #32
   1c04e:	fa05 f30e 	lsl.w	r3, r5, lr
   1c052:	fa07 f70e 	lsl.w	r7, r7, lr
   1c056:	fa20 f804 	lsr.w	r8, r0, r4
   1c05a:	0c3a      	lsrs	r2, r7, #16
   1c05c:	fa25 f404 	lsr.w	r4, r5, r4
   1c060:	ea48 0803 	orr.w	r8, r8, r3
   1c064:	fbb4 f1f2 	udiv	r1, r4, r2
   1c068:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1c06c:	fb02 4411 	mls	r4, r2, r1, r4
   1c070:	fa1f fc87 	uxth.w	ip, r7
   1c074:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1c078:	fb01 f30c 	mul.w	r3, r1, ip
   1c07c:	42ab      	cmp	r3, r5
   1c07e:	fa00 f40e 	lsl.w	r4, r0, lr
   1c082:	d909      	bls.n	1c098 <__udivmoddi4+0x1bc>
   1c084:	19ed      	adds	r5, r5, r7
   1c086:	f101 30ff 	add.w	r0, r1, #4294967295
   1c08a:	f080 808a 	bcs.w	1c1a2 <__udivmoddi4+0x2c6>
   1c08e:	42ab      	cmp	r3, r5
   1c090:	f240 8087 	bls.w	1c1a2 <__udivmoddi4+0x2c6>
   1c094:	3902      	subs	r1, #2
   1c096:	443d      	add	r5, r7
   1c098:	1aeb      	subs	r3, r5, r3
   1c09a:	fa1f f588 	uxth.w	r5, r8
   1c09e:	fbb3 f0f2 	udiv	r0, r3, r2
   1c0a2:	fb02 3310 	mls	r3, r2, r0, r3
   1c0a6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c0aa:	fb00 f30c 	mul.w	r3, r0, ip
   1c0ae:	42ab      	cmp	r3, r5
   1c0b0:	d907      	bls.n	1c0c2 <__udivmoddi4+0x1e6>
   1c0b2:	19ed      	adds	r5, r5, r7
   1c0b4:	f100 38ff 	add.w	r8, r0, #4294967295
   1c0b8:	d26f      	bcs.n	1c19a <__udivmoddi4+0x2be>
   1c0ba:	42ab      	cmp	r3, r5
   1c0bc:	d96d      	bls.n	1c19a <__udivmoddi4+0x2be>
   1c0be:	3802      	subs	r0, #2
   1c0c0:	443d      	add	r5, r7
   1c0c2:	1aeb      	subs	r3, r5, r3
   1c0c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c0c8:	e78f      	b.n	1bfea <__udivmoddi4+0x10e>
   1c0ca:	f1c1 0720 	rsb	r7, r1, #32
   1c0ce:	fa22 f807 	lsr.w	r8, r2, r7
   1c0d2:	408b      	lsls	r3, r1
   1c0d4:	fa05 f401 	lsl.w	r4, r5, r1
   1c0d8:	ea48 0303 	orr.w	r3, r8, r3
   1c0dc:	fa20 fe07 	lsr.w	lr, r0, r7
   1c0e0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1c0e4:	40fd      	lsrs	r5, r7
   1c0e6:	ea4e 0e04 	orr.w	lr, lr, r4
   1c0ea:	fbb5 f9fc 	udiv	r9, r5, ip
   1c0ee:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1c0f2:	fb0c 5519 	mls	r5, ip, r9, r5
   1c0f6:	fa1f f883 	uxth.w	r8, r3
   1c0fa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1c0fe:	fb09 f408 	mul.w	r4, r9, r8
   1c102:	42ac      	cmp	r4, r5
   1c104:	fa02 f201 	lsl.w	r2, r2, r1
   1c108:	fa00 fa01 	lsl.w	sl, r0, r1
   1c10c:	d908      	bls.n	1c120 <__udivmoddi4+0x244>
   1c10e:	18ed      	adds	r5, r5, r3
   1c110:	f109 30ff 	add.w	r0, r9, #4294967295
   1c114:	d243      	bcs.n	1c19e <__udivmoddi4+0x2c2>
   1c116:	42ac      	cmp	r4, r5
   1c118:	d941      	bls.n	1c19e <__udivmoddi4+0x2c2>
   1c11a:	f1a9 0902 	sub.w	r9, r9, #2
   1c11e:	441d      	add	r5, r3
   1c120:	1b2d      	subs	r5, r5, r4
   1c122:	fa1f fe8e 	uxth.w	lr, lr
   1c126:	fbb5 f0fc 	udiv	r0, r5, ip
   1c12a:	fb0c 5510 	mls	r5, ip, r0, r5
   1c12e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1c132:	fb00 f808 	mul.w	r8, r0, r8
   1c136:	45a0      	cmp	r8, r4
   1c138:	d907      	bls.n	1c14a <__udivmoddi4+0x26e>
   1c13a:	18e4      	adds	r4, r4, r3
   1c13c:	f100 35ff 	add.w	r5, r0, #4294967295
   1c140:	d229      	bcs.n	1c196 <__udivmoddi4+0x2ba>
   1c142:	45a0      	cmp	r8, r4
   1c144:	d927      	bls.n	1c196 <__udivmoddi4+0x2ba>
   1c146:	3802      	subs	r0, #2
   1c148:	441c      	add	r4, r3
   1c14a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1c14e:	eba4 0408 	sub.w	r4, r4, r8
   1c152:	fba0 8902 	umull	r8, r9, r0, r2
   1c156:	454c      	cmp	r4, r9
   1c158:	46c6      	mov	lr, r8
   1c15a:	464d      	mov	r5, r9
   1c15c:	d315      	bcc.n	1c18a <__udivmoddi4+0x2ae>
   1c15e:	d012      	beq.n	1c186 <__udivmoddi4+0x2aa>
   1c160:	b156      	cbz	r6, 1c178 <__udivmoddi4+0x29c>
   1c162:	ebba 030e 	subs.w	r3, sl, lr
   1c166:	eb64 0405 	sbc.w	r4, r4, r5
   1c16a:	fa04 f707 	lsl.w	r7, r4, r7
   1c16e:	40cb      	lsrs	r3, r1
   1c170:	431f      	orrs	r7, r3
   1c172:	40cc      	lsrs	r4, r1
   1c174:	6037      	str	r7, [r6, #0]
   1c176:	6074      	str	r4, [r6, #4]
   1c178:	2100      	movs	r1, #0
   1c17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c17e:	4618      	mov	r0, r3
   1c180:	e6f8      	b.n	1bf74 <__udivmoddi4+0x98>
   1c182:	4690      	mov	r8, r2
   1c184:	e6e0      	b.n	1bf48 <__udivmoddi4+0x6c>
   1c186:	45c2      	cmp	sl, r8
   1c188:	d2ea      	bcs.n	1c160 <__udivmoddi4+0x284>
   1c18a:	ebb8 0e02 	subs.w	lr, r8, r2
   1c18e:	eb69 0503 	sbc.w	r5, r9, r3
   1c192:	3801      	subs	r0, #1
   1c194:	e7e4      	b.n	1c160 <__udivmoddi4+0x284>
   1c196:	4628      	mov	r0, r5
   1c198:	e7d7      	b.n	1c14a <__udivmoddi4+0x26e>
   1c19a:	4640      	mov	r0, r8
   1c19c:	e791      	b.n	1c0c2 <__udivmoddi4+0x1e6>
   1c19e:	4681      	mov	r9, r0
   1c1a0:	e7be      	b.n	1c120 <__udivmoddi4+0x244>
   1c1a2:	4601      	mov	r1, r0
   1c1a4:	e778      	b.n	1c098 <__udivmoddi4+0x1bc>
   1c1a6:	3802      	subs	r0, #2
   1c1a8:	443c      	add	r4, r7
   1c1aa:	e745      	b.n	1c038 <__udivmoddi4+0x15c>
   1c1ac:	4608      	mov	r0, r1
   1c1ae:	e708      	b.n	1bfc2 <__udivmoddi4+0xe6>
   1c1b0:	f1a8 0802 	sub.w	r8, r8, #2
   1c1b4:	443d      	add	r5, r7
   1c1b6:	e72b      	b.n	1c010 <__udivmoddi4+0x134>

0001c1b8 <__aeabi_idiv0>:
   1c1b8:	4770      	bx	lr
   1c1ba:	bf00      	nop

0001c1bc <ctime>:
   1c1bc:	b508      	push	{r3, lr}
   1c1be:	f000 f84d 	bl	1c25c <localtime>
   1c1c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c1c6:	f000 bdbf 	b.w	1cd48 <asctime>
   1c1ca:	bf00      	nop

0001c1cc <__cxa_atexit>:
   1c1cc:	4613      	mov	r3, r2
   1c1ce:	460a      	mov	r2, r1
   1c1d0:	4601      	mov	r1, r0
   1c1d2:	2002      	movs	r0, #2
   1c1d4:	f000 bd4c 	b.w	1cc70 <__register_exitproc>

0001c1d8 <difftime>:
   1c1d8:	b508      	push	{r3, lr}
   1c1da:	1a40      	subs	r0, r0, r1
   1c1dc:	f7ff f83c 	bl	1b258 <__aeabi_i2d>
   1c1e0:	bd08      	pop	{r3, pc}
   1c1e2:	bf00      	nop

0001c1e4 <__errno>:
   1c1e4:	4b01      	ldr	r3, [pc, #4]	; (1c1ec <__errno+0x8>)
   1c1e6:	6818      	ldr	r0, [r3, #0]
   1c1e8:	4770      	bx	lr
   1c1ea:	bf00      	nop
   1c1ec:	20000248 	.word	0x20000248

0001c1f0 <ffs>:
   1c1f0:	b140      	cbz	r0, 1c204 <ffs+0x14>
   1c1f2:	2300      	movs	r3, #0
   1c1f4:	fa40 f103 	asr.w	r1, r0, r3
   1c1f8:	1c5a      	adds	r2, r3, #1
   1c1fa:	07c9      	lsls	r1, r1, #31
   1c1fc:	4613      	mov	r3, r2
   1c1fe:	d5f9      	bpl.n	1c1f4 <ffs+0x4>
   1c200:	4610      	mov	r0, r2
   1c202:	4770      	bx	lr
   1c204:	4602      	mov	r2, r0
   1c206:	4610      	mov	r0, r2
   1c208:	4770      	bx	lr
   1c20a:	bf00      	nop

0001c20c <__libc_init_array>:
   1c20c:	b570      	push	{r4, r5, r6, lr}
   1c20e:	4e0f      	ldr	r6, [pc, #60]	; (1c24c <__libc_init_array+0x40>)
   1c210:	4d0f      	ldr	r5, [pc, #60]	; (1c250 <__libc_init_array+0x44>)
   1c212:	1b76      	subs	r6, r6, r5
   1c214:	10b6      	asrs	r6, r6, #2
   1c216:	bf18      	it	ne
   1c218:	2400      	movne	r4, #0
   1c21a:	d005      	beq.n	1c228 <__libc_init_array+0x1c>
   1c21c:	3401      	adds	r4, #1
   1c21e:	f855 3b04 	ldr.w	r3, [r5], #4
   1c222:	4798      	blx	r3
   1c224:	42a6      	cmp	r6, r4
   1c226:	d1f9      	bne.n	1c21c <__libc_init_array+0x10>
   1c228:	4e0a      	ldr	r6, [pc, #40]	; (1c254 <__libc_init_array+0x48>)
   1c22a:	4d0b      	ldr	r5, [pc, #44]	; (1c258 <__libc_init_array+0x4c>)
   1c22c:	1b76      	subs	r6, r6, r5
   1c22e:	f006 fa41 	bl	226b4 <_init>
   1c232:	10b6      	asrs	r6, r6, #2
   1c234:	bf18      	it	ne
   1c236:	2400      	movne	r4, #0
   1c238:	d006      	beq.n	1c248 <__libc_init_array+0x3c>
   1c23a:	3401      	adds	r4, #1
   1c23c:	f855 3b04 	ldr.w	r3, [r5], #4
   1c240:	4798      	blx	r3
   1c242:	42a6      	cmp	r6, r4
   1c244:	d1f9      	bne.n	1c23a <__libc_init_array+0x2e>
   1c246:	bd70      	pop	{r4, r5, r6, pc}
   1c248:	bd70      	pop	{r4, r5, r6, pc}
   1c24a:	bf00      	nop
   1c24c:	000226c0 	.word	0x000226c0
   1c250:	000226c0 	.word	0x000226c0
   1c254:	00022728 	.word	0x00022728
   1c258:	000226c0 	.word	0x000226c0

0001c25c <localtime>:
   1c25c:	4b02      	ldr	r3, [pc, #8]	; (1c268 <localtime+0xc>)
   1c25e:	6819      	ldr	r1, [r3, #0]
   1c260:	317c      	adds	r1, #124	; 0x7c
   1c262:	f000 b803 	b.w	1c26c <localtime_r>
   1c266:	bf00      	nop
   1c268:	20000248 	.word	0x20000248

0001c26c <localtime_r>:
   1c26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c270:	460c      	mov	r4, r1
   1c272:	4607      	mov	r7, r0
   1c274:	f000 fdfc 	bl	1ce70 <__gettzinfo>
   1c278:	4621      	mov	r1, r4
   1c27a:	4680      	mov	r8, r0
   1c27c:	4638      	mov	r0, r7
   1c27e:	f000 fdfb 	bl	1ce78 <gmtime_r>
   1c282:	6946      	ldr	r6, [r0, #20]
   1c284:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1c288:	07b1      	lsls	r1, r6, #30
   1c28a:	4604      	mov	r4, r0
   1c28c:	f000 80b9 	beq.w	1c402 <localtime_r+0x196>
   1c290:	17f5      	asrs	r5, r6, #31
   1c292:	4b7f      	ldr	r3, [pc, #508]	; (1c490 <localtime_r+0x224>)
   1c294:	fb83 2306 	smull	r2, r3, r3, r6
   1c298:	ebc5 15e3 	rsb	r5, r5, r3, asr #7
   1c29c:	f44f 73c8 	mov.w	r3, #400	; 0x190
   1c2a0:	fb03 6515 	mls	r5, r3, r5, r6
   1c2a4:	2d00      	cmp	r5, #0
   1c2a6:	bf0c      	ite	eq
   1c2a8:	2530      	moveq	r5, #48	; 0x30
   1c2aa:	2500      	movne	r5, #0
   1c2ac:	4b79      	ldr	r3, [pc, #484]	; (1c494 <localtime_r+0x228>)
   1c2ae:	441d      	add	r5, r3
   1c2b0:	f000 fb36 	bl	1c920 <__tz_lock>
   1c2b4:	f000 fb40 	bl	1c938 <_tzset_unlocked>
   1c2b8:	4b77      	ldr	r3, [pc, #476]	; (1c498 <localtime_r+0x22c>)
   1c2ba:	681b      	ldr	r3, [r3, #0]
   1c2bc:	b343      	cbz	r3, 1c310 <localtime_r+0xa4>
   1c2be:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c2c2:	429e      	cmp	r6, r3
   1c2c4:	d005      	beq.n	1c2d2 <localtime_r+0x66>
   1c2c6:	4630      	mov	r0, r6
   1c2c8:	f000 fa68 	bl	1c79c <__tzcalc_limits>
   1c2cc:	2800      	cmp	r0, #0
   1c2ce:	f000 80a6 	beq.w	1c41e <localtime_r+0x1b2>
   1c2d2:	f8d8 3000 	ldr.w	r3, [r8]
   1c2d6:	b983      	cbnz	r3, 1c2fa <localtime_r+0x8e>
   1c2d8:	683b      	ldr	r3, [r7, #0]
   1c2da:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1c2de:	4293      	cmp	r3, r2
   1c2e0:	f280 80a1 	bge.w	1c426 <localtime_r+0x1ba>
   1c2e4:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1c2e8:	4293      	cmp	r3, r2
   1c2ea:	bfb4      	ite	lt
   1c2ec:	2301      	movlt	r3, #1
   1c2ee:	2300      	movge	r3, #0
   1c2f0:	6223      	str	r3, [r4, #32]
   1c2f2:	da0e      	bge.n	1c312 <localtime_r+0xa6>
   1c2f4:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
   1c2f8:	e00d      	b.n	1c316 <localtime_r+0xaa>
   1c2fa:	683b      	ldr	r3, [r7, #0]
   1c2fc:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1c300:	4293      	cmp	r3, r2
   1c302:	db04      	blt.n	1c30e <localtime_r+0xa2>
   1c304:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1c308:	4293      	cmp	r3, r2
   1c30a:	f2c0 808c 	blt.w	1c426 <localtime_r+0x1ba>
   1c30e:	2300      	movs	r3, #0
   1c310:	6223      	str	r3, [r4, #32]
   1c312:	f8d8 6020 	ldr.w	r6, [r8, #32]
   1c316:	4a61      	ldr	r2, [pc, #388]	; (1c49c <localtime_r+0x230>)
   1c318:	4f61      	ldr	r7, [pc, #388]	; (1c4a0 <localtime_r+0x234>)
   1c31a:	68a1      	ldr	r1, [r4, #8]
   1c31c:	fb82 3206 	smull	r3, r2, r2, r6
   1c320:	4432      	add	r2, r6
   1c322:	17f3      	asrs	r3, r6, #31
   1c324:	12d2      	asrs	r2, r2, #11
   1c326:	1ad0      	subs	r0, r2, r3
   1c328:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1c32c:	fb0e 6010 	mls	r0, lr, r0, r6
   1c330:	fb87 6700 	smull	r6, r7, r7, r0
   1c334:	183e      	adds	r6, r7, r0
   1c336:	17c7      	asrs	r7, r0, #31
   1c338:	ebc7 1766 	rsb	r7, r7, r6, asr #5
   1c33c:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
   1c340:	6826      	ldr	r6, [r4, #0]
   1c342:	1ad3      	subs	r3, r2, r3
   1c344:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
   1c348:	6862      	ldr	r2, [r4, #4]
   1c34a:	1a30      	subs	r0, r6, r0
   1c34c:	1acb      	subs	r3, r1, r3
   1c34e:	1bd2      	subs	r2, r2, r7
   1c350:	283b      	cmp	r0, #59	; 0x3b
   1c352:	e884 000d 	stmia.w	r4, {r0, r2, r3}
   1c356:	dd4d      	ble.n	1c3f4 <localtime_r+0x188>
   1c358:	3201      	adds	r2, #1
   1c35a:	383c      	subs	r0, #60	; 0x3c
   1c35c:	e884 0005 	stmia.w	r4, {r0, r2}
   1c360:	2a3b      	cmp	r2, #59	; 0x3b
   1c362:	dd40      	ble.n	1c3e6 <localtime_r+0x17a>
   1c364:	3301      	adds	r3, #1
   1c366:	3a3c      	subs	r2, #60	; 0x3c
   1c368:	60a3      	str	r3, [r4, #8]
   1c36a:	6062      	str	r2, [r4, #4]
   1c36c:	2b17      	cmp	r3, #23
   1c36e:	dd1d      	ble.n	1c3ac <localtime_r+0x140>
   1c370:	69a2      	ldr	r2, [r4, #24]
   1c372:	69e1      	ldr	r1, [r4, #28]
   1c374:	3201      	adds	r2, #1
   1c376:	2a06      	cmp	r2, #6
   1c378:	bfc8      	it	gt
   1c37a:	2200      	movgt	r2, #0
   1c37c:	61a2      	str	r2, [r4, #24]
   1c37e:	68e2      	ldr	r2, [r4, #12]
   1c380:	3101      	adds	r1, #1
   1c382:	61e1      	str	r1, [r4, #28]
   1c384:	3b18      	subs	r3, #24
   1c386:	3201      	adds	r2, #1
   1c388:	6921      	ldr	r1, [r4, #16]
   1c38a:	60a3      	str	r3, [r4, #8]
   1c38c:	60e2      	str	r2, [r4, #12]
   1c38e:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1c392:	429a      	cmp	r2, r3
   1c394:	dd05      	ble.n	1c3a2 <localtime_r+0x136>
   1c396:	3101      	adds	r1, #1
   1c398:	1ad2      	subs	r2, r2, r3
   1c39a:	290c      	cmp	r1, #12
   1c39c:	60e2      	str	r2, [r4, #12]
   1c39e:	d045      	beq.n	1c42c <localtime_r+0x1c0>
   1c3a0:	6121      	str	r1, [r4, #16]
   1c3a2:	f000 fac3 	bl	1c92c <__tz_unlock>
   1c3a6:	4620      	mov	r0, r4
   1c3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c3ac:	2b00      	cmp	r3, #0
   1c3ae:	daf8      	bge.n	1c3a2 <localtime_r+0x136>
   1c3b0:	69a2      	ldr	r2, [r4, #24]
   1c3b2:	69e1      	ldr	r1, [r4, #28]
   1c3b4:	3a01      	subs	r2, #1
   1c3b6:	bf48      	it	mi
   1c3b8:	2206      	movmi	r2, #6
   1c3ba:	61a2      	str	r2, [r4, #24]
   1c3bc:	68e2      	ldr	r2, [r4, #12]
   1c3be:	3901      	subs	r1, #1
   1c3c0:	3318      	adds	r3, #24
   1c3c2:	3a01      	subs	r2, #1
   1c3c4:	61e1      	str	r1, [r4, #28]
   1c3c6:	60a3      	str	r3, [r4, #8]
   1c3c8:	60e2      	str	r2, [r4, #12]
   1c3ca:	2a00      	cmp	r2, #0
   1c3cc:	d1e9      	bne.n	1c3a2 <localtime_r+0x136>
   1c3ce:	6923      	ldr	r3, [r4, #16]
   1c3d0:	3b01      	subs	r3, #1
   1c3d2:	d432      	bmi.n	1c43a <localtime_r+0x1ce>
   1c3d4:	6123      	str	r3, [r4, #16]
   1c3d6:	009b      	lsls	r3, r3, #2
   1c3d8:	58eb      	ldr	r3, [r5, r3]
   1c3da:	60e3      	str	r3, [r4, #12]
   1c3dc:	f000 faa6 	bl	1c92c <__tz_unlock>
   1c3e0:	4620      	mov	r0, r4
   1c3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c3e6:	2a00      	cmp	r2, #0
   1c3e8:	dac0      	bge.n	1c36c <localtime_r+0x100>
   1c3ea:	3b01      	subs	r3, #1
   1c3ec:	323c      	adds	r2, #60	; 0x3c
   1c3ee:	60a3      	str	r3, [r4, #8]
   1c3f0:	6062      	str	r2, [r4, #4]
   1c3f2:	e7bb      	b.n	1c36c <localtime_r+0x100>
   1c3f4:	2800      	cmp	r0, #0
   1c3f6:	dab3      	bge.n	1c360 <localtime_r+0xf4>
   1c3f8:	3a01      	subs	r2, #1
   1c3fa:	303c      	adds	r0, #60	; 0x3c
   1c3fc:	e884 0005 	stmia.w	r4, {r0, r2}
   1c400:	e7ae      	b.n	1c360 <localtime_r+0xf4>
   1c402:	4b23      	ldr	r3, [pc, #140]	; (1c490 <localtime_r+0x224>)
   1c404:	17f5      	asrs	r5, r6, #31
   1c406:	fb83 2306 	smull	r2, r3, r3, r6
   1c40a:	ebc5 1363 	rsb	r3, r5, r3, asr #5
   1c40e:	2264      	movs	r2, #100	; 0x64
   1c410:	fb02 6313 	mls	r3, r2, r3, r6
   1c414:	2b00      	cmp	r3, #0
   1c416:	f43f af3c 	beq.w	1c292 <localtime_r+0x26>
   1c41a:	2530      	movs	r5, #48	; 0x30
   1c41c:	e746      	b.n	1c2ac <localtime_r+0x40>
   1c41e:	f04f 33ff 	mov.w	r3, #4294967295
   1c422:	6223      	str	r3, [r4, #32]
   1c424:	e775      	b.n	1c312 <localtime_r+0xa6>
   1c426:	2301      	movs	r3, #1
   1c428:	6223      	str	r3, [r4, #32]
   1c42a:	e763      	b.n	1c2f4 <localtime_r+0x88>
   1c42c:	6963      	ldr	r3, [r4, #20]
   1c42e:	2200      	movs	r2, #0
   1c430:	3301      	adds	r3, #1
   1c432:	6163      	str	r3, [r4, #20]
   1c434:	6122      	str	r2, [r4, #16]
   1c436:	61e2      	str	r2, [r4, #28]
   1c438:	e7b3      	b.n	1c3a2 <localtime_r+0x136>
   1c43a:	6963      	ldr	r3, [r4, #20]
   1c43c:	1e5a      	subs	r2, r3, #1
   1c43e:	210b      	movs	r1, #11
   1c440:	6162      	str	r2, [r4, #20]
   1c442:	0792      	lsls	r2, r2, #30
   1c444:	6121      	str	r1, [r4, #16]
   1c446:	d013      	beq.n	1c470 <localtime_r+0x204>
   1c448:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1c44c:	17d3      	asrs	r3, r2, #31
   1c44e:	4910      	ldr	r1, [pc, #64]	; (1c490 <localtime_r+0x224>)
   1c450:	fb81 0102 	smull	r0, r1, r1, r2
   1c454:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
   1c458:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1c45c:	fb01 2313 	mls	r3, r1, r3, r2
   1c460:	fab3 f383 	clz	r3, r3
   1c464:	095b      	lsrs	r3, r3, #5
   1c466:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   1c46a:	61e3      	str	r3, [r4, #28]
   1c46c:	232c      	movs	r3, #44	; 0x2c
   1c46e:	e7b3      	b.n	1c3d8 <localtime_r+0x16c>
   1c470:	4907      	ldr	r1, [pc, #28]	; (1c490 <localtime_r+0x224>)
   1c472:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1c476:	fb81 3102 	smull	r3, r1, r1, r2
   1c47a:	17d3      	asrs	r3, r2, #31
   1c47c:	ebc3 1161 	rsb	r1, r3, r1, asr #5
   1c480:	2064      	movs	r0, #100	; 0x64
   1c482:	fb00 2111 	mls	r1, r0, r1, r2
   1c486:	2900      	cmp	r1, #0
   1c488:	d0e1      	beq.n	1c44e <localtime_r+0x1e2>
   1c48a:	f240 136d 	movw	r3, #365	; 0x16d
   1c48e:	e7ec      	b.n	1c46a <localtime_r+0x1fe>
   1c490:	51eb851f 	.word	0x51eb851f
   1c494:	0002241c 	.word	0x0002241c
   1c498:	2000a6cc 	.word	0x2000a6cc
   1c49c:	91a2b3c5 	.word	0x91a2b3c5
   1c4a0:	88888889 	.word	0x88888889

0001c4a4 <memcpy>:
   1c4a4:	4684      	mov	ip, r0
   1c4a6:	ea41 0300 	orr.w	r3, r1, r0
   1c4aa:	f013 0303 	ands.w	r3, r3, #3
   1c4ae:	d16d      	bne.n	1c58c <memcpy+0xe8>
   1c4b0:	3a40      	subs	r2, #64	; 0x40
   1c4b2:	d341      	bcc.n	1c538 <memcpy+0x94>
   1c4b4:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4b8:	f840 3b04 	str.w	r3, [r0], #4
   1c4bc:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4c0:	f840 3b04 	str.w	r3, [r0], #4
   1c4c4:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4c8:	f840 3b04 	str.w	r3, [r0], #4
   1c4cc:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4d0:	f840 3b04 	str.w	r3, [r0], #4
   1c4d4:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4d8:	f840 3b04 	str.w	r3, [r0], #4
   1c4dc:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4e0:	f840 3b04 	str.w	r3, [r0], #4
   1c4e4:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4e8:	f840 3b04 	str.w	r3, [r0], #4
   1c4ec:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4f0:	f840 3b04 	str.w	r3, [r0], #4
   1c4f4:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4f8:	f840 3b04 	str.w	r3, [r0], #4
   1c4fc:	f851 3b04 	ldr.w	r3, [r1], #4
   1c500:	f840 3b04 	str.w	r3, [r0], #4
   1c504:	f851 3b04 	ldr.w	r3, [r1], #4
   1c508:	f840 3b04 	str.w	r3, [r0], #4
   1c50c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c510:	f840 3b04 	str.w	r3, [r0], #4
   1c514:	f851 3b04 	ldr.w	r3, [r1], #4
   1c518:	f840 3b04 	str.w	r3, [r0], #4
   1c51c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c520:	f840 3b04 	str.w	r3, [r0], #4
   1c524:	f851 3b04 	ldr.w	r3, [r1], #4
   1c528:	f840 3b04 	str.w	r3, [r0], #4
   1c52c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c530:	f840 3b04 	str.w	r3, [r0], #4
   1c534:	3a40      	subs	r2, #64	; 0x40
   1c536:	d2bd      	bcs.n	1c4b4 <memcpy+0x10>
   1c538:	3230      	adds	r2, #48	; 0x30
   1c53a:	d311      	bcc.n	1c560 <memcpy+0xbc>
   1c53c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c540:	f840 3b04 	str.w	r3, [r0], #4
   1c544:	f851 3b04 	ldr.w	r3, [r1], #4
   1c548:	f840 3b04 	str.w	r3, [r0], #4
   1c54c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c550:	f840 3b04 	str.w	r3, [r0], #4
   1c554:	f851 3b04 	ldr.w	r3, [r1], #4
   1c558:	f840 3b04 	str.w	r3, [r0], #4
   1c55c:	3a10      	subs	r2, #16
   1c55e:	d2ed      	bcs.n	1c53c <memcpy+0x98>
   1c560:	320c      	adds	r2, #12
   1c562:	d305      	bcc.n	1c570 <memcpy+0xcc>
   1c564:	f851 3b04 	ldr.w	r3, [r1], #4
   1c568:	f840 3b04 	str.w	r3, [r0], #4
   1c56c:	3a04      	subs	r2, #4
   1c56e:	d2f9      	bcs.n	1c564 <memcpy+0xc0>
   1c570:	3204      	adds	r2, #4
   1c572:	d008      	beq.n	1c586 <memcpy+0xe2>
   1c574:	07d2      	lsls	r2, r2, #31
   1c576:	bf1c      	itt	ne
   1c578:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1c57c:	f800 3b01 	strbne.w	r3, [r0], #1
   1c580:	d301      	bcc.n	1c586 <memcpy+0xe2>
   1c582:	880b      	ldrh	r3, [r1, #0]
   1c584:	8003      	strh	r3, [r0, #0]
   1c586:	4660      	mov	r0, ip
   1c588:	4770      	bx	lr
   1c58a:	bf00      	nop
   1c58c:	2a08      	cmp	r2, #8
   1c58e:	d313      	bcc.n	1c5b8 <memcpy+0x114>
   1c590:	078b      	lsls	r3, r1, #30
   1c592:	d08d      	beq.n	1c4b0 <memcpy+0xc>
   1c594:	f010 0303 	ands.w	r3, r0, #3
   1c598:	d08a      	beq.n	1c4b0 <memcpy+0xc>
   1c59a:	f1c3 0304 	rsb	r3, r3, #4
   1c59e:	1ad2      	subs	r2, r2, r3
   1c5a0:	07db      	lsls	r3, r3, #31
   1c5a2:	bf1c      	itt	ne
   1c5a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1c5a8:	f800 3b01 	strbne.w	r3, [r0], #1
   1c5ac:	d380      	bcc.n	1c4b0 <memcpy+0xc>
   1c5ae:	f831 3b02 	ldrh.w	r3, [r1], #2
   1c5b2:	f820 3b02 	strh.w	r3, [r0], #2
   1c5b6:	e77b      	b.n	1c4b0 <memcpy+0xc>
   1c5b8:	3a04      	subs	r2, #4
   1c5ba:	d3d9      	bcc.n	1c570 <memcpy+0xcc>
   1c5bc:	3a01      	subs	r2, #1
   1c5be:	f811 3b01 	ldrb.w	r3, [r1], #1
   1c5c2:	f800 3b01 	strb.w	r3, [r0], #1
   1c5c6:	d2f9      	bcs.n	1c5bc <memcpy+0x118>
   1c5c8:	780b      	ldrb	r3, [r1, #0]
   1c5ca:	7003      	strb	r3, [r0, #0]
   1c5cc:	784b      	ldrb	r3, [r1, #1]
   1c5ce:	7043      	strb	r3, [r0, #1]
   1c5d0:	788b      	ldrb	r3, [r1, #2]
   1c5d2:	7083      	strb	r3, [r0, #2]
   1c5d4:	4660      	mov	r0, ip
   1c5d6:	4770      	bx	lr

0001c5d8 <memset>:
   1c5d8:	b470      	push	{r4, r5, r6}
   1c5da:	0786      	lsls	r6, r0, #30
   1c5dc:	d046      	beq.n	1c66c <memset+0x94>
   1c5de:	1e54      	subs	r4, r2, #1
   1c5e0:	2a00      	cmp	r2, #0
   1c5e2:	d041      	beq.n	1c668 <memset+0x90>
   1c5e4:	b2ca      	uxtb	r2, r1
   1c5e6:	4603      	mov	r3, r0
   1c5e8:	e002      	b.n	1c5f0 <memset+0x18>
   1c5ea:	f114 34ff 	adds.w	r4, r4, #4294967295
   1c5ee:	d33b      	bcc.n	1c668 <memset+0x90>
   1c5f0:	f803 2b01 	strb.w	r2, [r3], #1
   1c5f4:	079d      	lsls	r5, r3, #30
   1c5f6:	d1f8      	bne.n	1c5ea <memset+0x12>
   1c5f8:	2c03      	cmp	r4, #3
   1c5fa:	d92e      	bls.n	1c65a <memset+0x82>
   1c5fc:	b2cd      	uxtb	r5, r1
   1c5fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1c602:	2c0f      	cmp	r4, #15
   1c604:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1c608:	d919      	bls.n	1c63e <memset+0x66>
   1c60a:	f103 0210 	add.w	r2, r3, #16
   1c60e:	4626      	mov	r6, r4
   1c610:	3e10      	subs	r6, #16
   1c612:	2e0f      	cmp	r6, #15
   1c614:	f842 5c10 	str.w	r5, [r2, #-16]
   1c618:	f842 5c0c 	str.w	r5, [r2, #-12]
   1c61c:	f842 5c08 	str.w	r5, [r2, #-8]
   1c620:	f842 5c04 	str.w	r5, [r2, #-4]
   1c624:	f102 0210 	add.w	r2, r2, #16
   1c628:	d8f2      	bhi.n	1c610 <memset+0x38>
   1c62a:	f1a4 0210 	sub.w	r2, r4, #16
   1c62e:	f022 020f 	bic.w	r2, r2, #15
   1c632:	f004 040f 	and.w	r4, r4, #15
   1c636:	3210      	adds	r2, #16
   1c638:	2c03      	cmp	r4, #3
   1c63a:	4413      	add	r3, r2
   1c63c:	d90d      	bls.n	1c65a <memset+0x82>
   1c63e:	461e      	mov	r6, r3
   1c640:	4622      	mov	r2, r4
   1c642:	3a04      	subs	r2, #4
   1c644:	2a03      	cmp	r2, #3
   1c646:	f846 5b04 	str.w	r5, [r6], #4
   1c64a:	d8fa      	bhi.n	1c642 <memset+0x6a>
   1c64c:	1f22      	subs	r2, r4, #4
   1c64e:	f022 0203 	bic.w	r2, r2, #3
   1c652:	3204      	adds	r2, #4
   1c654:	4413      	add	r3, r2
   1c656:	f004 0403 	and.w	r4, r4, #3
   1c65a:	b12c      	cbz	r4, 1c668 <memset+0x90>
   1c65c:	b2c9      	uxtb	r1, r1
   1c65e:	441c      	add	r4, r3
   1c660:	f803 1b01 	strb.w	r1, [r3], #1
   1c664:	429c      	cmp	r4, r3
   1c666:	d1fb      	bne.n	1c660 <memset+0x88>
   1c668:	bc70      	pop	{r4, r5, r6}
   1c66a:	4770      	bx	lr
   1c66c:	4614      	mov	r4, r2
   1c66e:	4603      	mov	r3, r0
   1c670:	e7c2      	b.n	1c5f8 <memset+0x20>
   1c672:	bf00      	nop

0001c674 <rand>:
   1c674:	b410      	push	{r4}
   1c676:	4b0c      	ldr	r3, [pc, #48]	; (1c6a8 <rand+0x34>)
   1c678:	480c      	ldr	r0, [pc, #48]	; (1c6ac <rand+0x38>)
   1c67a:	6819      	ldr	r1, [r3, #0]
   1c67c:	4c0c      	ldr	r4, [pc, #48]	; (1c6b0 <rand+0x3c>)
   1c67e:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   1c682:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   1c686:	fb00 f002 	mul.w	r0, r0, r2
   1c68a:	fb04 0003 	mla	r0, r4, r3, r0
   1c68e:	fba2 2304 	umull	r2, r3, r2, r4
   1c692:	4403      	add	r3, r0
   1c694:	3201      	adds	r2, #1
   1c696:	f143 0300 	adc.w	r3, r3, #0
   1c69a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   1c69e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1c6a2:	bc10      	pop	{r4}
   1c6a4:	4770      	bx	lr
   1c6a6:	bf00      	nop
   1c6a8:	20000248 	.word	0x20000248
   1c6ac:	5851f42d 	.word	0x5851f42d
   1c6b0:	4c957f2d 	.word	0x4c957f2d
	...

0001c6c0 <strlen>:
   1c6c0:	f890 f000 	pld	[r0]
   1c6c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1c6c8:	f020 0107 	bic.w	r1, r0, #7
   1c6cc:	f06f 0c00 	mvn.w	ip, #0
   1c6d0:	f010 0407 	ands.w	r4, r0, #7
   1c6d4:	f891 f020 	pld	[r1, #32]
   1c6d8:	f040 8049 	bne.w	1c76e <strlen+0xae>
   1c6dc:	f04f 0400 	mov.w	r4, #0
   1c6e0:	f06f 0007 	mvn.w	r0, #7
   1c6e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c6e8:	f891 f040 	pld	[r1, #64]	; 0x40
   1c6ec:	f100 0008 	add.w	r0, r0, #8
   1c6f0:	fa82 f24c 	uadd8	r2, r2, ip
   1c6f4:	faa4 f28c 	sel	r2, r4, ip
   1c6f8:	fa83 f34c 	uadd8	r3, r3, ip
   1c6fc:	faa2 f38c 	sel	r3, r2, ip
   1c700:	bb4b      	cbnz	r3, 1c756 <strlen+0x96>
   1c702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1c706:	fa82 f24c 	uadd8	r2, r2, ip
   1c70a:	f100 0008 	add.w	r0, r0, #8
   1c70e:	faa4 f28c 	sel	r2, r4, ip
   1c712:	fa83 f34c 	uadd8	r3, r3, ip
   1c716:	faa2 f38c 	sel	r3, r2, ip
   1c71a:	b9e3      	cbnz	r3, 1c756 <strlen+0x96>
   1c71c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1c720:	fa82 f24c 	uadd8	r2, r2, ip
   1c724:	f100 0008 	add.w	r0, r0, #8
   1c728:	faa4 f28c 	sel	r2, r4, ip
   1c72c:	fa83 f34c 	uadd8	r3, r3, ip
   1c730:	faa2 f38c 	sel	r3, r2, ip
   1c734:	b97b      	cbnz	r3, 1c756 <strlen+0x96>
   1c736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1c73a:	f101 0120 	add.w	r1, r1, #32
   1c73e:	fa82 f24c 	uadd8	r2, r2, ip
   1c742:	f100 0008 	add.w	r0, r0, #8
   1c746:	faa4 f28c 	sel	r2, r4, ip
   1c74a:	fa83 f34c 	uadd8	r3, r3, ip
   1c74e:	faa2 f38c 	sel	r3, r2, ip
   1c752:	2b00      	cmp	r3, #0
   1c754:	d0c6      	beq.n	1c6e4 <strlen+0x24>
   1c756:	2a00      	cmp	r2, #0
   1c758:	bf04      	itt	eq
   1c75a:	3004      	addeq	r0, #4
   1c75c:	461a      	moveq	r2, r3
   1c75e:	ba12      	rev	r2, r2
   1c760:	fab2 f282 	clz	r2, r2
   1c764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1c768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1c76c:	4770      	bx	lr
   1c76e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c772:	f004 0503 	and.w	r5, r4, #3
   1c776:	f1c4 0000 	rsb	r0, r4, #0
   1c77a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1c77e:	f014 0f04 	tst.w	r4, #4
   1c782:	f891 f040 	pld	[r1, #64]	; 0x40
   1c786:	fa0c f505 	lsl.w	r5, ip, r5
   1c78a:	ea62 0205 	orn	r2, r2, r5
   1c78e:	bf1c      	itt	ne
   1c790:	ea63 0305 	ornne	r3, r3, r5
   1c794:	4662      	movne	r2, ip
   1c796:	f04f 0400 	mov.w	r4, #0
   1c79a:	e7a9      	b.n	1c6f0 <strlen+0x30>

0001c79c <__tzcalc_limits>:
   1c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7a0:	b083      	sub	sp, #12
   1c7a2:	4605      	mov	r5, r0
   1c7a4:	f000 fb64 	bl	1ce70 <__gettzinfo>
   1c7a8:	f240 73b1 	movw	r3, #1969	; 0x7b1
   1c7ac:	429d      	cmp	r5, r3
   1c7ae:	f340 8093 	ble.w	1c8d8 <__tzcalc_limits+0x13c>
   1c7b2:	4c57      	ldr	r4, [pc, #348]	; (1c910 <__tzcalc_limits+0x174>)
   1c7b4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1c91c <__tzcalc_limits+0x180>
   1c7b8:	6045      	str	r5, [r0, #4]
   1c7ba:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   1c7be:	18ee      	adds	r6, r5, r3
   1c7c0:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
   1c7c4:	fb84 3102 	smull	r3, r1, r4, r2
   1c7c8:	10b7      	asrs	r7, r6, #2
   1c7ca:	f240 1e6d 	movw	lr, #365	; 0x16d
   1c7ce:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   1c7d2:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
   1c7d6:	17d2      	asrs	r2, r2, #31
   1c7d8:	eb05 030c 	add.w	r3, r5, ip
   1c7dc:	fb0e 7606 	mla	r6, lr, r6, r7
   1c7e0:	eba2 1261 	sub.w	r2, r2, r1, asr #5
   1c7e4:	17ef      	asrs	r7, r5, #31
   1c7e6:	fb84 c105 	smull	ip, r1, r4, r5
   1c7ea:	4416      	add	r6, r2
   1c7ec:	fb84 e403 	smull	lr, r4, r4, r3
   1c7f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1c7f4:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
   1c7f8:	17db      	asrs	r3, r3, #31
   1c7fa:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
   1c7fe:	fb02 5e1e 	mls	lr, r2, lr, r5
   1c802:	ebc7 1761 	rsb	r7, r7, r1, asr #5
   1c806:	2264      	movs	r2, #100	; 0x64
   1c808:	441e      	add	r6, r3
   1c80a:	f1be 0f00 	cmp.w	lr, #0
   1c80e:	bf0c      	ite	eq
   1c810:	2330      	moveq	r3, #48	; 0x30
   1c812:	2300      	movne	r3, #0
   1c814:	fb02 5717 	mls	r7, r2, r7, r5
   1c818:	9301      	str	r3, [sp, #4]
   1c81a:	f005 0503 	and.w	r5, r5, #3
   1c81e:	4604      	mov	r4, r0
   1c820:	f100 0c38 	add.w	ip, r0, #56	; 0x38
   1c824:	7a23      	ldrb	r3, [r4, #8]
   1c826:	2b4a      	cmp	r3, #74	; 0x4a
   1c828:	d05a      	beq.n	1c8e0 <__tzcalc_limits+0x144>
   1c82a:	2b44      	cmp	r3, #68	; 0x44
   1c82c:	d068      	beq.n	1c900 <__tzcalc_limits+0x164>
   1c82e:	2d00      	cmp	r5, #0
   1c830:	d04b      	beq.n	1c8ca <__tzcalc_limits+0x12e>
   1c832:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1c836:	68e3      	ldr	r3, [r4, #12]
   1c838:	4a36      	ldr	r2, [pc, #216]	; (1c914 <__tzcalc_limits+0x178>)
   1c83a:	2b01      	cmp	r3, #1
   1c83c:	4491      	add	r9, r2
   1c83e:	dd62      	ble.n	1c906 <__tzcalc_limits+0x16a>
   1c840:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
   1c844:	f1ab 0b02 	sub.w	fp, fp, #2
   1c848:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   1c84c:	eb09 0a0b 	add.w	sl, r9, fp
   1c850:	f1a9 0304 	sub.w	r3, r9, #4
   1c854:	4632      	mov	r2, r6
   1c856:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1c85a:	459a      	cmp	sl, r3
   1c85c:	440a      	add	r2, r1
   1c85e:	d1fa      	bne.n	1c856 <__tzcalc_limits+0xba>
   1c860:	f10b 0b04 	add.w	fp, fp, #4
   1c864:	4b2c      	ldr	r3, [pc, #176]	; (1c918 <__tzcalc_limits+0x17c>)
   1c866:	f859 900b 	ldr.w	r9, [r9, fp]
   1c86a:	1d11      	adds	r1, r2, #4
   1c86c:	fb83 a301 	smull	sl, r3, r3, r1
   1c870:	440b      	add	r3, r1
   1c872:	ea4f 7ae1 	mov.w	sl, r1, asr #31
   1c876:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
   1c87a:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
   1c87e:	6963      	ldr	r3, [r4, #20]
   1c880:	eba1 010a 	sub.w	r1, r1, sl
   1c884:	1a59      	subs	r1, r3, r1
   1c886:	6923      	ldr	r3, [r4, #16]
   1c888:	f103 33ff 	add.w	r3, r3, #4294967295
   1c88c:	bf48      	it	mi
   1c88e:	3107      	addmi	r1, #7
   1c890:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1c894:	440b      	add	r3, r1
   1c896:	454b      	cmp	r3, r9
   1c898:	db02      	blt.n	1c8a0 <__tzcalc_limits+0x104>
   1c89a:	3b07      	subs	r3, #7
   1c89c:	454b      	cmp	r3, r9
   1c89e:	dafc      	bge.n	1c89a <__tzcalc_limits+0xfe>
   1c8a0:	441a      	add	r2, r3
   1c8a2:	69a1      	ldr	r1, [r4, #24]
   1c8a4:	6a23      	ldr	r3, [r4, #32]
   1c8a6:	fb08 1102 	mla	r1, r8, r2, r1
   1c8aa:	440b      	add	r3, r1
   1c8ac:	f844 3f1c 	str.w	r3, [r4, #28]!
   1c8b0:	45a4      	cmp	ip, r4
   1c8b2:	d1b7      	bne.n	1c824 <__tzcalc_limits+0x88>
   1c8b4:	69c3      	ldr	r3, [r0, #28]
   1c8b6:	6b82      	ldr	r2, [r0, #56]	; 0x38
   1c8b8:	4293      	cmp	r3, r2
   1c8ba:	bfac      	ite	ge
   1c8bc:	2300      	movge	r3, #0
   1c8be:	2301      	movlt	r3, #1
   1c8c0:	6003      	str	r3, [r0, #0]
   1c8c2:	2001      	movs	r0, #1
   1c8c4:	b003      	add	sp, #12
   1c8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8ca:	9b01      	ldr	r3, [sp, #4]
   1c8cc:	2f00      	cmp	r7, #0
   1c8ce:	bf0c      	ite	eq
   1c8d0:	4699      	moveq	r9, r3
   1c8d2:	f04f 0930 	movne.w	r9, #48	; 0x30
   1c8d6:	e7ae      	b.n	1c836 <__tzcalc_limits+0x9a>
   1c8d8:	2000      	movs	r0, #0
   1c8da:	b003      	add	sp, #12
   1c8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8e0:	6962      	ldr	r2, [r4, #20]
   1c8e2:	18b1      	adds	r1, r6, r2
   1c8e4:	b93d      	cbnz	r5, 1c8f6 <__tzcalc_limits+0x15a>
   1c8e6:	b137      	cbz	r7, 1c8f6 <__tzcalc_limits+0x15a>
   1c8e8:	2a3b      	cmp	r2, #59	; 0x3b
   1c8ea:	bfd4      	ite	le
   1c8ec:	2200      	movle	r2, #0
   1c8ee:	2201      	movgt	r2, #1
   1c8f0:	440a      	add	r2, r1
   1c8f2:	3a01      	subs	r2, #1
   1c8f4:	e7d5      	b.n	1c8a2 <__tzcalc_limits+0x106>
   1c8f6:	f1be 0f00 	cmp.w	lr, #0
   1c8fa:	d0f5      	beq.n	1c8e8 <__tzcalc_limits+0x14c>
   1c8fc:	2200      	movs	r2, #0
   1c8fe:	e7f7      	b.n	1c8f0 <__tzcalc_limits+0x154>
   1c900:	6962      	ldr	r2, [r4, #20]
   1c902:	4432      	add	r2, r6
   1c904:	e7cd      	b.n	1c8a2 <__tzcalc_limits+0x106>
   1c906:	4632      	mov	r2, r6
   1c908:	f04f 0b00 	mov.w	fp, #0
   1c90c:	e7aa      	b.n	1c864 <__tzcalc_limits+0xc8>
   1c90e:	bf00      	nop
   1c910:	51eb851f 	.word	0x51eb851f
   1c914:	0002241c 	.word	0x0002241c
   1c918:	92492493 	.word	0x92492493
   1c91c:	00015180 	.word	0x00015180

0001c920 <__tz_lock>:
   1c920:	4801      	ldr	r0, [pc, #4]	; (1c928 <__tz_lock+0x8>)
   1c922:	f000 bb93 	b.w	1d04c <__retarget_lock_acquire>
   1c926:	bf00      	nop
   1c928:	2000a9d4 	.word	0x2000a9d4

0001c92c <__tz_unlock>:
   1c92c:	4801      	ldr	r0, [pc, #4]	; (1c934 <__tz_unlock+0x8>)
   1c92e:	f000 bb91 	b.w	1d054 <__retarget_lock_release>
   1c932:	bf00      	nop
   1c934:	2000a9d4 	.word	0x2000a9d4

0001c938 <_tzset_unlocked>:
   1c938:	4b01      	ldr	r3, [pc, #4]	; (1c940 <_tzset_unlocked+0x8>)
   1c93a:	6818      	ldr	r0, [r3, #0]
   1c93c:	f000 b802 	b.w	1c944 <_tzset_unlocked_r>
   1c940:	20000248 	.word	0x20000248

0001c944 <_tzset_unlocked_r>:
   1c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c948:	b08b      	sub	sp, #44	; 0x2c
   1c94a:	4607      	mov	r7, r0
   1c94c:	f000 fa90 	bl	1ce70 <__gettzinfo>
   1c950:	49bb      	ldr	r1, [pc, #748]	; (1cc40 <_tzset_unlocked_r+0x2fc>)
   1c952:	4dbc      	ldr	r5, [pc, #752]	; (1cc44 <_tzset_unlocked_r+0x300>)
   1c954:	4606      	mov	r6, r0
   1c956:	4638      	mov	r0, r7
   1c958:	f000 fa82 	bl	1ce60 <_getenv_r>
   1c95c:	4604      	mov	r4, r0
   1c95e:	2800      	cmp	r0, #0
   1c960:	f000 80f7 	beq.w	1cb52 <_tzset_unlocked_r+0x20e>
   1c964:	6829      	ldr	r1, [r5, #0]
   1c966:	b131      	cbz	r1, 1c976 <_tzset_unlocked_r+0x32>
   1c968:	f000 fefe 	bl	1d768 <strcmp>
   1c96c:	b910      	cbnz	r0, 1c974 <_tzset_unlocked_r+0x30>
   1c96e:	b00b      	add	sp, #44	; 0x2c
   1c970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c974:	6829      	ldr	r1, [r5, #0]
   1c976:	4608      	mov	r0, r1
   1c978:	f7f7 ff6e 	bl	14858 <free>
   1c97c:	4620      	mov	r0, r4
   1c97e:	f7ff fe9f 	bl	1c6c0 <strlen>
   1c982:	1c41      	adds	r1, r0, #1
   1c984:	4638      	mov	r0, r7
   1c986:	f000 fb69 	bl	1d05c <_malloc_r>
   1c98a:	6028      	str	r0, [r5, #0]
   1c98c:	b110      	cbz	r0, 1c994 <_tzset_unlocked_r+0x50>
   1c98e:	4621      	mov	r1, r4
   1c990:	f001 f854 	bl	1da3c <strcpy>
   1c994:	7823      	ldrb	r3, [r4, #0]
   1c996:	4aac      	ldr	r2, [pc, #688]	; (1cc48 <_tzset_unlocked_r+0x304>)
   1c998:	49ac      	ldr	r1, [pc, #688]	; (1cc4c <_tzset_unlocked_r+0x308>)
   1c99a:	2b3a      	cmp	r3, #58	; 0x3a
   1c99c:	bf08      	it	eq
   1c99e:	3401      	addeq	r4, #1
   1c9a0:	ad08      	add	r5, sp, #32
   1c9a2:	462b      	mov	r3, r5
   1c9a4:	4620      	mov	r0, r4
   1c9a6:	f000 fe9f 	bl	1d6e8 <siscanf>
   1c9aa:	2800      	cmp	r0, #0
   1c9ac:	dddf      	ble.n	1c96e <_tzset_unlocked_r+0x2a>
   1c9ae:	9b08      	ldr	r3, [sp, #32]
   1c9b0:	5ce2      	ldrb	r2, [r4, r3]
   1c9b2:	2a2d      	cmp	r2, #45	; 0x2d
   1c9b4:	441c      	add	r4, r3
   1c9b6:	f000 80c8 	beq.w	1cb4a <_tzset_unlocked_r+0x206>
   1c9ba:	2a2b      	cmp	r2, #43	; 0x2b
   1c9bc:	bf08      	it	eq
   1c9be:	3401      	addeq	r4, #1
   1c9c0:	f04f 0801 	mov.w	r8, #1
   1c9c4:	ab06      	add	r3, sp, #24
   1c9c6:	9302      	str	r3, [sp, #8]
   1c9c8:	f10d 0316 	add.w	r3, sp, #22
   1c9cc:	2700      	movs	r7, #0
   1c9ce:	9300      	str	r3, [sp, #0]
   1c9d0:	9503      	str	r5, [sp, #12]
   1c9d2:	9501      	str	r5, [sp, #4]
   1c9d4:	aa05      	add	r2, sp, #20
   1c9d6:	462b      	mov	r3, r5
   1c9d8:	499d      	ldr	r1, [pc, #628]	; (1cc50 <_tzset_unlocked_r+0x30c>)
   1c9da:	f8ad 7016 	strh.w	r7, [sp, #22]
   1c9de:	4620      	mov	r0, r4
   1c9e0:	f8ad 7018 	strh.w	r7, [sp, #24]
   1c9e4:	f000 fe80 	bl	1d6e8 <siscanf>
   1c9e8:	42b8      	cmp	r0, r7
   1c9ea:	ddc0      	ble.n	1c96e <_tzset_unlocked_r+0x2a>
   1c9ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1c9f0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1c9f4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1c9f8:	9808      	ldr	r0, [sp, #32]
   1c9fa:	f8df a26c 	ldr.w	sl, [pc, #620]	; 1cc68 <_tzset_unlocked_r+0x324>
   1c9fe:	f8df 925c 	ldr.w	r9, [pc, #604]	; 1cc5c <_tzset_unlocked_r+0x318>
   1ca02:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1ca06:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1ca0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1ca0e:	fb01 3302 	mla	r3, r1, r2, r3
   1ca12:	fb08 f303 	mul.w	r3, r8, r3
   1ca16:	6233      	str	r3, [r6, #32]
   1ca18:	4404      	add	r4, r0
   1ca1a:	4b8b      	ldr	r3, [pc, #556]	; (1cc48 <_tzset_unlocked_r+0x304>)
   1ca1c:	f8c9 3000 	str.w	r3, [r9]
   1ca20:	4620      	mov	r0, r4
   1ca22:	4652      	mov	r2, sl
   1ca24:	4989      	ldr	r1, [pc, #548]	; (1cc4c <_tzset_unlocked_r+0x308>)
   1ca26:	462b      	mov	r3, r5
   1ca28:	f000 fe5e 	bl	1d6e8 <siscanf>
   1ca2c:	42b8      	cmp	r0, r7
   1ca2e:	f340 8082 	ble.w	1cb36 <_tzset_unlocked_r+0x1f2>
   1ca32:	9808      	ldr	r0, [sp, #32]
   1ca34:	f8c9 a004 	str.w	sl, [r9, #4]
   1ca38:	5c23      	ldrb	r3, [r4, r0]
   1ca3a:	2b2d      	cmp	r3, #45	; 0x2d
   1ca3c:	4404      	add	r4, r0
   1ca3e:	f000 8095 	beq.w	1cb6c <_tzset_unlocked_r+0x228>
   1ca42:	2b2b      	cmp	r3, #43	; 0x2b
   1ca44:	bf08      	it	eq
   1ca46:	3401      	addeq	r4, #1
   1ca48:	f04f 0801 	mov.w	r8, #1
   1ca4c:	ab06      	add	r3, sp, #24
   1ca4e:	9302      	str	r3, [sp, #8]
   1ca50:	f10d 0316 	add.w	r3, sp, #22
   1ca54:	2700      	movs	r7, #0
   1ca56:	9300      	str	r3, [sp, #0]
   1ca58:	9503      	str	r5, [sp, #12]
   1ca5a:	9501      	str	r5, [sp, #4]
   1ca5c:	462b      	mov	r3, r5
   1ca5e:	aa05      	add	r2, sp, #20
   1ca60:	497b      	ldr	r1, [pc, #492]	; (1cc50 <_tzset_unlocked_r+0x30c>)
   1ca62:	f8ad 7014 	strh.w	r7, [sp, #20]
   1ca66:	4620      	mov	r0, r4
   1ca68:	f8ad 7016 	strh.w	r7, [sp, #22]
   1ca6c:	f8ad 7018 	strh.w	r7, [sp, #24]
   1ca70:	9708      	str	r7, [sp, #32]
   1ca72:	f000 fe39 	bl	1d6e8 <siscanf>
   1ca76:	42b8      	cmp	r0, r7
   1ca78:	dd7c      	ble.n	1cb74 <_tzset_unlocked_r+0x230>
   1ca7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1ca7e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1ca82:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1ca86:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1ca8a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1ca8e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1ca92:	fb01 3302 	mla	r3, r1, r2, r3
   1ca96:	fb08 f303 	mul.w	r3, r8, r3
   1ca9a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1ca9c:	9b08      	ldr	r3, [sp, #32]
   1ca9e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 1cc6c <_tzset_unlocked_r+0x328>
   1caa2:	441c      	add	r4, r3
   1caa4:	46b0      	mov	r8, r6
   1caa6:	f04f 0a00 	mov.w	sl, #0
   1caaa:	7827      	ldrb	r7, [r4, #0]
   1caac:	2f2c      	cmp	r7, #44	; 0x2c
   1caae:	bf04      	itt	eq
   1cab0:	7867      	ldrbeq	r7, [r4, #1]
   1cab2:	3401      	addeq	r4, #1
   1cab4:	2f4d      	cmp	r7, #77	; 0x4d
   1cab6:	d062      	beq.n	1cb7e <_tzset_unlocked_r+0x23a>
   1cab8:	2f4a      	cmp	r7, #74	; 0x4a
   1caba:	bf08      	it	eq
   1cabc:	3401      	addeq	r4, #1
   1cabe:	f04f 020a 	mov.w	r2, #10
   1cac2:	a909      	add	r1, sp, #36	; 0x24
   1cac4:	4620      	mov	r0, r4
   1cac6:	bf18      	it	ne
   1cac8:	2744      	movne	r7, #68	; 0x44
   1caca:	f001 f91d 	bl	1dd08 <strtoul>
   1cace:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1cad2:	f8ad 001e 	strh.w	r0, [sp, #30]
   1cad6:	454c      	cmp	r4, r9
   1cad8:	f000 809c 	beq.w	1cc14 <_tzset_unlocked_r+0x2d0>
   1cadc:	b280      	uxth	r0, r0
   1cade:	f8c8 0014 	str.w	r0, [r8, #20]
   1cae2:	f888 7008 	strb.w	r7, [r8, #8]
   1cae6:	2400      	movs	r4, #0
   1cae8:	2302      	movs	r3, #2
   1caea:	f8ad 3014 	strh.w	r3, [sp, #20]
   1caee:	f8ad 4016 	strh.w	r4, [sp, #22]
   1caf2:	f8ad 4018 	strh.w	r4, [sp, #24]
   1caf6:	9408      	str	r4, [sp, #32]
   1caf8:	f899 3000 	ldrb.w	r3, [r9]
   1cafc:	2b2f      	cmp	r3, #47	; 0x2f
   1cafe:	d06c      	beq.n	1cbda <_tzset_unlocked_r+0x296>
   1cb00:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   1cb04:	f10a 0a01 	add.w	sl, sl, #1
   1cb08:	f1ba 0f02 	cmp.w	sl, #2
   1cb0c:	f8c8 3018 	str.w	r3, [r8, #24]
   1cb10:	444c      	add	r4, r9
   1cb12:	f108 081c 	add.w	r8, r8, #28
   1cb16:	d1c8      	bne.n	1caaa <_tzset_unlocked_r+0x166>
   1cb18:	6870      	ldr	r0, [r6, #4]
   1cb1a:	f7ff fe3f 	bl	1c79c <__tzcalc_limits>
   1cb1e:	6a32      	ldr	r2, [r6, #32]
   1cb20:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1cb22:	484c      	ldr	r0, [pc, #304]	; (1cc54 <_tzset_unlocked_r+0x310>)
   1cb24:	494c      	ldr	r1, [pc, #304]	; (1cc58 <_tzset_unlocked_r+0x314>)
   1cb26:	1a9b      	subs	r3, r3, r2
   1cb28:	bf18      	it	ne
   1cb2a:	2301      	movne	r3, #1
   1cb2c:	6003      	str	r3, [r0, #0]
   1cb2e:	600a      	str	r2, [r1, #0]
   1cb30:	b00b      	add	sp, #44	; 0x2c
   1cb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb36:	4948      	ldr	r1, [pc, #288]	; (1cc58 <_tzset_unlocked_r+0x314>)
   1cb38:	4a46      	ldr	r2, [pc, #280]	; (1cc54 <_tzset_unlocked_r+0x310>)
   1cb3a:	6a30      	ldr	r0, [r6, #32]
   1cb3c:	f8d9 3000 	ldr.w	r3, [r9]
   1cb40:	6008      	str	r0, [r1, #0]
   1cb42:	6017      	str	r7, [r2, #0]
   1cb44:	f8c9 3004 	str.w	r3, [r9, #4]
   1cb48:	e711      	b.n	1c96e <_tzset_unlocked_r+0x2a>
   1cb4a:	3401      	adds	r4, #1
   1cb4c:	f04f 38ff 	mov.w	r8, #4294967295
   1cb50:	e738      	b.n	1c9c4 <_tzset_unlocked_r+0x80>
   1cb52:	4b42      	ldr	r3, [pc, #264]	; (1cc5c <_tzset_unlocked_r+0x318>)
   1cb54:	493f      	ldr	r1, [pc, #252]	; (1cc54 <_tzset_unlocked_r+0x310>)
   1cb56:	4e40      	ldr	r6, [pc, #256]	; (1cc58 <_tzset_unlocked_r+0x314>)
   1cb58:	4a41      	ldr	r2, [pc, #260]	; (1cc60 <_tzset_unlocked_r+0x31c>)
   1cb5a:	6828      	ldr	r0, [r5, #0]
   1cb5c:	6034      	str	r4, [r6, #0]
   1cb5e:	600c      	str	r4, [r1, #0]
   1cb60:	601a      	str	r2, [r3, #0]
   1cb62:	605a      	str	r2, [r3, #4]
   1cb64:	f7f7 fe78 	bl	14858 <free>
   1cb68:	602c      	str	r4, [r5, #0]
   1cb6a:	e700      	b.n	1c96e <_tzset_unlocked_r+0x2a>
   1cb6c:	3401      	adds	r4, #1
   1cb6e:	f04f 38ff 	mov.w	r8, #4294967295
   1cb72:	e76b      	b.n	1ca4c <_tzset_unlocked_r+0x108>
   1cb74:	6a33      	ldr	r3, [r6, #32]
   1cb76:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   1cb7a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1cb7c:	e78e      	b.n	1ca9c <_tzset_unlocked_r+0x158>
   1cb7e:	f10d 021e 	add.w	r2, sp, #30
   1cb82:	ab07      	add	r3, sp, #28
   1cb84:	9202      	str	r2, [sp, #8]
   1cb86:	9300      	str	r3, [sp, #0]
   1cb88:	9503      	str	r5, [sp, #12]
   1cb8a:	9501      	str	r5, [sp, #4]
   1cb8c:	462b      	mov	r3, r5
   1cb8e:	f10d 021a 	add.w	r2, sp, #26
   1cb92:	4659      	mov	r1, fp
   1cb94:	4620      	mov	r0, r4
   1cb96:	f000 fda7 	bl	1d6e8 <siscanf>
   1cb9a:	2803      	cmp	r0, #3
   1cb9c:	f47f aee7 	bne.w	1c96e <_tzset_unlocked_r+0x2a>
   1cba0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1cba4:	1e5a      	subs	r2, r3, #1
   1cba6:	2a0b      	cmp	r2, #11
   1cba8:	f63f aee1 	bhi.w	1c96e <_tzset_unlocked_r+0x2a>
   1cbac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1cbb0:	1e51      	subs	r1, r2, #1
   1cbb2:	2904      	cmp	r1, #4
   1cbb4:	f63f aedb 	bhi.w	1c96e <_tzset_unlocked_r+0x2a>
   1cbb8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   1cbbc:	2906      	cmp	r1, #6
   1cbbe:	f63f aed6 	bhi.w	1c96e <_tzset_unlocked_r+0x2a>
   1cbc2:	f888 7008 	strb.w	r7, [r8, #8]
   1cbc6:	f8c8 300c 	str.w	r3, [r8, #12]
   1cbca:	f8c8 2010 	str.w	r2, [r8, #16]
   1cbce:	f8c8 1014 	str.w	r1, [r8, #20]
   1cbd2:	9b08      	ldr	r3, [sp, #32]
   1cbd4:	eb04 0903 	add.w	r9, r4, r3
   1cbd8:	e785      	b.n	1cae6 <_tzset_unlocked_r+0x1a2>
   1cbda:	ab06      	add	r3, sp, #24
   1cbdc:	9302      	str	r3, [sp, #8]
   1cbde:	f10d 0316 	add.w	r3, sp, #22
   1cbe2:	9300      	str	r3, [sp, #0]
   1cbe4:	aa05      	add	r2, sp, #20
   1cbe6:	462b      	mov	r3, r5
   1cbe8:	491e      	ldr	r1, [pc, #120]	; (1cc64 <_tzset_unlocked_r+0x320>)
   1cbea:	9503      	str	r5, [sp, #12]
   1cbec:	9501      	str	r5, [sp, #4]
   1cbee:	4648      	mov	r0, r9
   1cbf0:	f000 fd7a 	bl	1d6e8 <siscanf>
   1cbf4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1cbf8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1cbfc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1cc00:	9c08      	ldr	r4, [sp, #32]
   1cc02:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   1cc06:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1cc0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1cc0e:	fb01 2303 	mla	r3, r1, r3, r2
   1cc12:	e777      	b.n	1cb04 <_tzset_unlocked_r+0x1c0>
   1cc14:	f1ba 0f00 	cmp.w	sl, #0
   1cc18:	d009      	beq.n	1cc2e <_tzset_unlocked_r+0x2ea>
   1cc1a:	224d      	movs	r2, #77	; 0x4d
   1cc1c:	230b      	movs	r3, #11
   1cc1e:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
   1cc22:	62b3      	str	r3, [r6, #40]	; 0x28
   1cc24:	2201      	movs	r2, #1
   1cc26:	2300      	movs	r3, #0
   1cc28:	62f2      	str	r2, [r6, #44]	; 0x2c
   1cc2a:	6333      	str	r3, [r6, #48]	; 0x30
   1cc2c:	e75b      	b.n	1cae6 <_tzset_unlocked_r+0x1a2>
   1cc2e:	234d      	movs	r3, #77	; 0x4d
   1cc30:	2203      	movs	r2, #3
   1cc32:	7233      	strb	r3, [r6, #8]
   1cc34:	2302      	movs	r3, #2
   1cc36:	f8c6 a014 	str.w	sl, [r6, #20]
   1cc3a:	60f2      	str	r2, [r6, #12]
   1cc3c:	6133      	str	r3, [r6, #16]
   1cc3e:	e752      	b.n	1cae6 <_tzset_unlocked_r+0x1a2>
   1cc40:	0002247c 	.word	0x0002247c
   1cc44:	2000a6c8 	.word	0x2000a6c8
   1cc48:	2000a6bc 	.word	0x2000a6bc
   1cc4c:	00022484 	.word	0x00022484
   1cc50:	00022494 	.word	0x00022494
   1cc54:	2000a6cc 	.word	0x2000a6cc
   1cc58:	2000a6d0 	.word	0x2000a6d0
   1cc5c:	20000678 	.word	0x20000678
   1cc60:	00022480 	.word	0x00022480
   1cc64:	000224bc 	.word	0x000224bc
   1cc68:	2000a6b0 	.word	0x2000a6b0
   1cc6c:	000224a8 	.word	0x000224a8

0001cc70 <__register_exitproc>:
   1cc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cc74:	4d2c      	ldr	r5, [pc, #176]	; (1cd28 <__register_exitproc+0xb8>)
   1cc76:	4606      	mov	r6, r0
   1cc78:	6828      	ldr	r0, [r5, #0]
   1cc7a:	4698      	mov	r8, r3
   1cc7c:	460f      	mov	r7, r1
   1cc7e:	4691      	mov	r9, r2
   1cc80:	f000 f9e6 	bl	1d050 <__retarget_lock_acquire_recursive>
   1cc84:	4b29      	ldr	r3, [pc, #164]	; (1cd2c <__register_exitproc+0xbc>)
   1cc86:	681c      	ldr	r4, [r3, #0]
   1cc88:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1cc8c:	2b00      	cmp	r3, #0
   1cc8e:	d03e      	beq.n	1cd0e <__register_exitproc+0x9e>
   1cc90:	685a      	ldr	r2, [r3, #4]
   1cc92:	2a1f      	cmp	r2, #31
   1cc94:	dc1c      	bgt.n	1ccd0 <__register_exitproc+0x60>
   1cc96:	f102 0e01 	add.w	lr, r2, #1
   1cc9a:	b176      	cbz	r6, 1ccba <__register_exitproc+0x4a>
   1cc9c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1cca0:	2401      	movs	r4, #1
   1cca2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1cca6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1ccaa:	4094      	lsls	r4, r2
   1ccac:	4320      	orrs	r0, r4
   1ccae:	2e02      	cmp	r6, #2
   1ccb0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1ccb4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1ccb8:	d023      	beq.n	1cd02 <__register_exitproc+0x92>
   1ccba:	3202      	adds	r2, #2
   1ccbc:	f8c3 e004 	str.w	lr, [r3, #4]
   1ccc0:	6828      	ldr	r0, [r5, #0]
   1ccc2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1ccc6:	f000 f9c7 	bl	1d058 <__retarget_lock_release_recursive>
   1ccca:	2000      	movs	r0, #0
   1cccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ccd0:	4b17      	ldr	r3, [pc, #92]	; (1cd30 <__register_exitproc+0xc0>)
   1ccd2:	b30b      	cbz	r3, 1cd18 <__register_exitproc+0xa8>
   1ccd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1ccd8:	f7f7 fdb4 	bl	14844 <malloc>
   1ccdc:	4603      	mov	r3, r0
   1ccde:	b1d8      	cbz	r0, 1cd18 <__register_exitproc+0xa8>
   1cce0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1cce4:	6002      	str	r2, [r0, #0]
   1cce6:	2100      	movs	r1, #0
   1cce8:	6041      	str	r1, [r0, #4]
   1ccea:	460a      	mov	r2, r1
   1ccec:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1ccf0:	f04f 0e01 	mov.w	lr, #1
   1ccf4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1ccf8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1ccfc:	2e00      	cmp	r6, #0
   1ccfe:	d0dc      	beq.n	1ccba <__register_exitproc+0x4a>
   1cd00:	e7cc      	b.n	1cc9c <__register_exitproc+0x2c>
   1cd02:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1cd06:	430c      	orrs	r4, r1
   1cd08:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1cd0c:	e7d5      	b.n	1ccba <__register_exitproc+0x4a>
   1cd0e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1cd12:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1cd16:	e7bb      	b.n	1cc90 <__register_exitproc+0x20>
   1cd18:	6828      	ldr	r0, [r5, #0]
   1cd1a:	f000 f99d 	bl	1d058 <__retarget_lock_release_recursive>
   1cd1e:	f04f 30ff 	mov.w	r0, #4294967295
   1cd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cd26:	bf00      	nop
   1cd28:	20000680 	.word	0x20000680
   1cd2c:	00022418 	.word	0x00022418
   1cd30:	00014845 	.word	0x00014845

0001cd34 <register_fini>:
   1cd34:	4b02      	ldr	r3, [pc, #8]	; (1cd40 <register_fini+0xc>)
   1cd36:	b113      	cbz	r3, 1cd3e <register_fini+0xa>
   1cd38:	4802      	ldr	r0, [pc, #8]	; (1cd44 <register_fini+0x10>)
   1cd3a:	f000 b833 	b.w	1cda4 <atexit>
   1cd3e:	4770      	bx	lr
   1cd40:	00000000 	.word	0x00000000
   1cd44:	0001cdb1 	.word	0x0001cdb1

0001cd48 <asctime>:
   1cd48:	4b02      	ldr	r3, [pc, #8]	; (1cd54 <asctime+0xc>)
   1cd4a:	6819      	ldr	r1, [r3, #0]
   1cd4c:	3160      	adds	r1, #96	; 0x60
   1cd4e:	f000 b803 	b.w	1cd58 <asctime_r>
   1cd52:	bf00      	nop
   1cd54:	20000248 	.word	0x20000248

0001cd58 <asctime_r>:
   1cd58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd5a:	6946      	ldr	r6, [r0, #20]
   1cd5c:	6807      	ldr	r7, [r0, #0]
   1cd5e:	6905      	ldr	r5, [r0, #16]
   1cd60:	6984      	ldr	r4, [r0, #24]
   1cd62:	4b0d      	ldr	r3, [pc, #52]	; (1cd98 <asctime_r+0x40>)
   1cd64:	4a0d      	ldr	r2, [pc, #52]	; (1cd9c <asctime_r+0x44>)
   1cd66:	b087      	sub	sp, #28
   1cd68:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1cd6c:	9703      	str	r7, [sp, #12]
   1cd6e:	460f      	mov	r7, r1
   1cd70:	6841      	ldr	r1, [r0, #4]
   1cd72:	9604      	str	r6, [sp, #16]
   1cd74:	6886      	ldr	r6, [r0, #8]
   1cd76:	68c0      	ldr	r0, [r0, #12]
   1cd78:	9102      	str	r1, [sp, #8]
   1cd7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1cd7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1cd82:	e88d 0041 	stmia.w	sp, {r0, r6}
   1cd86:	442b      	add	r3, r5
   1cd88:	4422      	add	r2, r4
   1cd8a:	4638      	mov	r0, r7
   1cd8c:	4904      	ldr	r1, [pc, #16]	; (1cda0 <asctime_r+0x48>)
   1cd8e:	f000 fc85 	bl	1d69c <siprintf>
   1cd92:	4638      	mov	r0, r7
   1cd94:	b007      	add	sp, #28
   1cd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cd98:	00022508 	.word	0x00022508
   1cd9c:	000224f0 	.word	0x000224f0
   1cda0:	000224d0 	.word	0x000224d0

0001cda4 <atexit>:
   1cda4:	2300      	movs	r3, #0
   1cda6:	4601      	mov	r1, r0
   1cda8:	461a      	mov	r2, r3
   1cdaa:	4618      	mov	r0, r3
   1cdac:	f7ff bf60 	b.w	1cc70 <__register_exitproc>

0001cdb0 <__libc_fini_array>:
   1cdb0:	b538      	push	{r3, r4, r5, lr}
   1cdb2:	4c0a      	ldr	r4, [pc, #40]	; (1cddc <__libc_fini_array+0x2c>)
   1cdb4:	4d0a      	ldr	r5, [pc, #40]	; (1cde0 <__libc_fini_array+0x30>)
   1cdb6:	1b64      	subs	r4, r4, r5
   1cdb8:	10a4      	asrs	r4, r4, #2
   1cdba:	d00a      	beq.n	1cdd2 <__libc_fini_array+0x22>
   1cdbc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1cdc0:	3b01      	subs	r3, #1
   1cdc2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1cdc6:	3c01      	subs	r4, #1
   1cdc8:	f855 3904 	ldr.w	r3, [r5], #-4
   1cdcc:	4798      	blx	r3
   1cdce:	2c00      	cmp	r4, #0
   1cdd0:	d1f9      	bne.n	1cdc6 <__libc_fini_array+0x16>
   1cdd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cdd6:	f005 bca7 	b.w	22728 <_fini>
   1cdda:	bf00      	nop
   1cddc:	00022738 	.word	0x00022738
   1cde0:	00022734 	.word	0x00022734

0001cde4 <_findenv_r>:
   1cde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cde8:	4f1c      	ldr	r7, [pc, #112]	; (1ce5c <_findenv_r+0x78>)
   1cdea:	460e      	mov	r6, r1
   1cdec:	4691      	mov	r9, r2
   1cdee:	4680      	mov	r8, r0
   1cdf0:	f002 faf2 	bl	1f3d8 <__env_lock>
   1cdf4:	683d      	ldr	r5, [r7, #0]
   1cdf6:	b1f5      	cbz	r5, 1ce36 <_findenv_r+0x52>
   1cdf8:	7834      	ldrb	r4, [r6, #0]
   1cdfa:	b15c      	cbz	r4, 1ce14 <_findenv_r+0x30>
   1cdfc:	2c3d      	cmp	r4, #61	; 0x3d
   1cdfe:	bf18      	it	ne
   1ce00:	4634      	movne	r4, r6
   1ce02:	d102      	bne.n	1ce0a <_findenv_r+0x26>
   1ce04:	e017      	b.n	1ce36 <_findenv_r+0x52>
   1ce06:	2b3d      	cmp	r3, #61	; 0x3d
   1ce08:	d015      	beq.n	1ce36 <_findenv_r+0x52>
   1ce0a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ce0e:	2b00      	cmp	r3, #0
   1ce10:	d1f9      	bne.n	1ce06 <_findenv_r+0x22>
   1ce12:	1ba4      	subs	r4, r4, r6
   1ce14:	6828      	ldr	r0, [r5, #0]
   1ce16:	b170      	cbz	r0, 1ce36 <_findenv_r+0x52>
   1ce18:	4622      	mov	r2, r4
   1ce1a:	4631      	mov	r1, r6
   1ce1c:	f000 fe6c 	bl	1daf8 <strncmp>
   1ce20:	b928      	cbnz	r0, 1ce2e <_findenv_r+0x4a>
   1ce22:	6828      	ldr	r0, [r5, #0]
   1ce24:	5d03      	ldrb	r3, [r0, r4]
   1ce26:	2b3d      	cmp	r3, #61	; 0x3d
   1ce28:	eb00 0a04 	add.w	sl, r0, r4
   1ce2c:	d009      	beq.n	1ce42 <_findenv_r+0x5e>
   1ce2e:	f855 0f04 	ldr.w	r0, [r5, #4]!
   1ce32:	2800      	cmp	r0, #0
   1ce34:	d1f0      	bne.n	1ce18 <_findenv_r+0x34>
   1ce36:	4640      	mov	r0, r8
   1ce38:	f002 fad4 	bl	1f3e4 <__env_unlock>
   1ce3c:	2000      	movs	r0, #0
   1ce3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ce42:	683b      	ldr	r3, [r7, #0]
   1ce44:	1aed      	subs	r5, r5, r3
   1ce46:	10ad      	asrs	r5, r5, #2
   1ce48:	4640      	mov	r0, r8
   1ce4a:	f8c9 5000 	str.w	r5, [r9]
   1ce4e:	f002 fac9 	bl	1f3e4 <__env_unlock>
   1ce52:	f10a 0001 	add.w	r0, sl, #1
   1ce56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ce5a:	bf00      	nop
   1ce5c:	20000ad4 	.word	0x20000ad4

0001ce60 <_getenv_r>:
   1ce60:	b500      	push	{lr}
   1ce62:	b083      	sub	sp, #12
   1ce64:	aa01      	add	r2, sp, #4
   1ce66:	f7ff ffbd 	bl	1cde4 <_findenv_r>
   1ce6a:	b003      	add	sp, #12
   1ce6c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ce70 <__gettzinfo>:
   1ce70:	4800      	ldr	r0, [pc, #0]	; (1ce74 <__gettzinfo+0x4>)
   1ce72:	4770      	bx	lr
   1ce74:	20000684 	.word	0x20000684

0001ce78 <gmtime_r>:
   1ce78:	6800      	ldr	r0, [r0, #0]
   1ce7a:	4b65      	ldr	r3, [pc, #404]	; (1d010 <gmtime_r+0x198>)
   1ce7c:	fb83 2300 	smull	r2, r3, r3, r0
   1ce80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ce84:	4403      	add	r3, r0
   1ce86:	4d63      	ldr	r5, [pc, #396]	; (1d014 <gmtime_r+0x19c>)
   1ce88:	17c2      	asrs	r2, r0, #31
   1ce8a:	ebc2 4323 	rsb	r3, r2, r3, asr #16
   1ce8e:	fb05 0513 	mls	r5, r5, r3, r0
   1ce92:	2d00      	cmp	r5, #0
   1ce94:	f2c0 80b3 	blt.w	1cffe <gmtime_r+0x186>
   1ce98:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1ce9c:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
   1cea0:	4e5d      	ldr	r6, [pc, #372]	; (1d018 <gmtime_r+0x1a0>)
   1cea2:	485e      	ldr	r0, [pc, #376]	; (1d01c <gmtime_r+0x1a4>)
   1cea4:	4a5e      	ldr	r2, [pc, #376]	; (1d020 <gmtime_r+0x1a8>)
   1cea6:	4c5f      	ldr	r4, [pc, #380]	; (1d024 <gmtime_r+0x1ac>)
   1cea8:	f8df c18c 	ldr.w	ip, [pc, #396]	; 1d038 <gmtime_r+0x1c0>
   1ceac:	f8df e18c 	ldr.w	lr, [pc, #396]	; 1d03c <gmtime_r+0x1c4>
   1ceb0:	fb86 7603 	smull	r7, r6, r6, r3
   1ceb4:	17df      	asrs	r7, r3, #31
   1ceb6:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
   1ceba:	fb00 3006 	mla	r0, r0, r6, r3
   1cebe:	0887      	lsrs	r7, r0, #2
   1cec0:	fba2 8207 	umull	r8, r2, r2, r7
   1cec4:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
   1cec8:	fba4 8707 	umull	r8, r7, r4, r7
   1cecc:	ea4f 1810 	mov.w	r8, r0, lsr #4
   1ced0:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
   1ced4:	fbac c708 	umull	ip, r7, ip, r8
   1ced8:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
   1cedc:	f8df c160 	ldr.w	ip, [pc, #352]	; 1d040 <gmtime_r+0x1c8>
   1cee0:	4f51      	ldr	r7, [pc, #324]	; (1d028 <gmtime_r+0x1b0>)
   1cee2:	fbae 8e02 	umull	r8, lr, lr, r2
   1cee6:	fbac 9c02 	umull	r9, ip, ip, r2
   1ceea:	eba2 080e 	sub.w	r8, r2, lr
   1ceee:	0892      	lsrs	r2, r2, #2
   1cef0:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
   1cef4:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
   1cef8:	fba4 4202 	umull	r4, r2, r4, r2
   1cefc:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
   1cf00:	ea4f 241e 	mov.w	r4, lr, lsr #8
   1cf04:	f240 106d 	movw	r0, #365	; 0x16d
   1cf08:	fb00 2214 	mls	r2, r0, r4, r2
   1cf0c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1d044 <gmtime_r+0x1cc>
   1cf10:	fb87 0e05 	smull	r0, lr, r7, r5
   1cf14:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1cf18:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1cf1c:	44ae      	add	lr, r5
   1cf1e:	3002      	adds	r0, #2
   1cf20:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
   1cf24:	4f41      	ldr	r7, [pc, #260]	; (1d02c <gmtime_r+0x1b4>)
   1cf26:	f8c1 e008 	str.w	lr, [r1, #8]
   1cf2a:	f103 0c03 	add.w	ip, r3, #3
   1cf2e:	fba8 3000 	umull	r3, r0, r8, r0
   1cf32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   1cf36:	fb03 551e 	mls	r5, r3, lr, r5
   1cf3a:	4b3d      	ldr	r3, [pc, #244]	; (1d030 <gmtime_r+0x1b8>)
   1cf3c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1d048 <gmtime_r+0x1d0>
   1cf40:	fb87 e705 	smull	lr, r7, r7, r5
   1cf44:	fb83 390c 	smull	r3, r9, r3, ip
   1cf48:	197b      	adds	r3, r7, r5
   1cf4a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   1cf4e:	fb07 4606 	mla	r6, r7, r6, r4
   1cf52:	17ef      	asrs	r7, r5, #31
   1cf54:	44e1      	add	r9, ip
   1cf56:	ebc7 1363 	rsb	r3, r7, r3, asr #5
   1cf5a:	ea4f 77ec 	mov.w	r7, ip, asr #31
   1cf5e:	09c0      	lsrs	r0, r0, #7
   1cf60:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
   1cf64:	2809      	cmp	r0, #9
   1cf66:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
   1cf6a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
   1cf6e:	ebac 0707 	sub.w	r7, ip, r7
   1cf72:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
   1cf76:	bf8c      	ite	hi
   1cf78:	f06f 0c09 	mvnhi.w	ip, #9
   1cf7c:	f04f 0c02 	movls.w	ip, #2
   1cf80:	4460      	add	r0, ip
   1cf82:	f10e 0e02 	add.w	lr, lr, #2
   1cf86:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
   1cf8a:	fba8 8e0e 	umull	r8, lr, r8, lr
   1cf8e:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
   1cf92:	f102 0801 	add.w	r8, r2, #1
   1cf96:	2801      	cmp	r0, #1
   1cf98:	bf98      	it	ls
   1cf9a:	3601      	addls	r6, #1
   1cf9c:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
   1cfa0:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
   1cfa4:	604b      	str	r3, [r1, #4]
   1cfa6:	600d      	str	r5, [r1, #0]
   1cfa8:	618f      	str	r7, [r1, #24]
   1cfaa:	d225      	bcs.n	1cff8 <gmtime_r+0x180>
   1cfac:	07a3      	lsls	r3, r4, #30
   1cfae:	d018      	beq.n	1cfe2 <gmtime_r+0x16a>
   1cfb0:	4b20      	ldr	r3, [pc, #128]	; (1d034 <gmtime_r+0x1bc>)
   1cfb2:	fba3 5304 	umull	r5, r3, r3, r4
   1cfb6:	09db      	lsrs	r3, r3, #7
   1cfb8:	f44f 75c8 	mov.w	r5, #400	; 0x190
   1cfbc:	fb05 4413 	mls	r4, r5, r3, r4
   1cfc0:	fab4 f484 	clz	r4, r4
   1cfc4:	0964      	lsrs	r4, r4, #5
   1cfc6:	323b      	adds	r2, #59	; 0x3b
   1cfc8:	4422      	add	r2, r4
   1cfca:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   1cfce:	2300      	movs	r3, #0
   1cfd0:	6108      	str	r0, [r1, #16]
   1cfd2:	614e      	str	r6, [r1, #20]
   1cfd4:	61ca      	str	r2, [r1, #28]
   1cfd6:	f8c1 e00c 	str.w	lr, [r1, #12]
   1cfda:	620b      	str	r3, [r1, #32]
   1cfdc:	4608      	mov	r0, r1
   1cfde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cfe2:	4b14      	ldr	r3, [pc, #80]	; (1d034 <gmtime_r+0x1bc>)
   1cfe4:	fba3 5304 	umull	r5, r3, r3, r4
   1cfe8:	095b      	lsrs	r3, r3, #5
   1cfea:	2564      	movs	r5, #100	; 0x64
   1cfec:	fb05 4313 	mls	r3, r5, r3, r4
   1cff0:	2b00      	cmp	r3, #0
   1cff2:	d0dd      	beq.n	1cfb0 <gmtime_r+0x138>
   1cff4:	2401      	movs	r4, #1
   1cff6:	e7e6      	b.n	1cfc6 <gmtime_r+0x14e>
   1cff8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
   1cffc:	e7e5      	b.n	1cfca <gmtime_r+0x152>
   1cffe:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
   1d002:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1d006:	f505 75c0 	add.w	r5, r5, #384	; 0x180
   1d00a:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
   1d00e:	e747      	b.n	1cea0 <gmtime_r+0x28>
   1d010:	c22e4507 	.word	0xc22e4507
   1d014:	00015180 	.word	0x00015180
   1d018:	396b06bd 	.word	0x396b06bd
   1d01c:	fffdc54f 	.word	0xfffdc54f
   1d020:	396b207f 	.word	0x396b207f
   1d024:	59c67cd9 	.word	0x59c67cd9
   1d028:	91a2b3c5 	.word	0x91a2b3c5
   1d02c:	88888889 	.word	0x88888889
   1d030:	92492493 	.word	0x92492493
   1d034:	51eb851f 	.word	0x51eb851f
   1d038:	0072d641 	.word	0x0072d641
   1d03c:	6719f361 	.word	0x6719f361
   1d040:	e5d32b1f 	.word	0xe5d32b1f
   1d044:	d62b80d7 	.word	0xd62b80d7
   1d048:	cccccccd 	.word	0xcccccccd

0001d04c <__retarget_lock_acquire>:
   1d04c:	4770      	bx	lr
   1d04e:	bf00      	nop

0001d050 <__retarget_lock_acquire_recursive>:
   1d050:	4770      	bx	lr
   1d052:	bf00      	nop

0001d054 <__retarget_lock_release>:
   1d054:	4770      	bx	lr
   1d056:	bf00      	nop

0001d058 <__retarget_lock_release_recursive>:
   1d058:	4770      	bx	lr
   1d05a:	bf00      	nop

0001d05c <_malloc_r>:
   1d05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d060:	f101 060b 	add.w	r6, r1, #11
   1d064:	2e16      	cmp	r6, #22
   1d066:	b083      	sub	sp, #12
   1d068:	4605      	mov	r5, r0
   1d06a:	f240 809e 	bls.w	1d1aa <_malloc_r+0x14e>
   1d06e:	f036 0607 	bics.w	r6, r6, #7
   1d072:	f100 80bd 	bmi.w	1d1f0 <_malloc_r+0x194>
   1d076:	42b1      	cmp	r1, r6
   1d078:	f200 80ba 	bhi.w	1d1f0 <_malloc_r+0x194>
   1d07c:	f000 faf0 	bl	1d660 <__malloc_lock>
   1d080:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1d084:	f0c0 8293 	bcc.w	1d5ae <_malloc_r+0x552>
   1d088:	0a73      	lsrs	r3, r6, #9
   1d08a:	f000 80b8 	beq.w	1d1fe <_malloc_r+0x1a2>
   1d08e:	2b04      	cmp	r3, #4
   1d090:	f200 8179 	bhi.w	1d386 <_malloc_r+0x32a>
   1d094:	09b3      	lsrs	r3, r6, #6
   1d096:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1d09a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1d09e:	00c3      	lsls	r3, r0, #3
   1d0a0:	4fbf      	ldr	r7, [pc, #764]	; (1d3a0 <_malloc_r+0x344>)
   1d0a2:	443b      	add	r3, r7
   1d0a4:	f1a3 0108 	sub.w	r1, r3, #8
   1d0a8:	685c      	ldr	r4, [r3, #4]
   1d0aa:	42a1      	cmp	r1, r4
   1d0ac:	d106      	bne.n	1d0bc <_malloc_r+0x60>
   1d0ae:	e00c      	b.n	1d0ca <_malloc_r+0x6e>
   1d0b0:	2a00      	cmp	r2, #0
   1d0b2:	f280 80aa 	bge.w	1d20a <_malloc_r+0x1ae>
   1d0b6:	68e4      	ldr	r4, [r4, #12]
   1d0b8:	42a1      	cmp	r1, r4
   1d0ba:	d006      	beq.n	1d0ca <_malloc_r+0x6e>
   1d0bc:	6863      	ldr	r3, [r4, #4]
   1d0be:	f023 0303 	bic.w	r3, r3, #3
   1d0c2:	1b9a      	subs	r2, r3, r6
   1d0c4:	2a0f      	cmp	r2, #15
   1d0c6:	ddf3      	ble.n	1d0b0 <_malloc_r+0x54>
   1d0c8:	4670      	mov	r0, lr
   1d0ca:	693c      	ldr	r4, [r7, #16]
   1d0cc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1d3b4 <_malloc_r+0x358>
   1d0d0:	4574      	cmp	r4, lr
   1d0d2:	f000 81ab 	beq.w	1d42c <_malloc_r+0x3d0>
   1d0d6:	6863      	ldr	r3, [r4, #4]
   1d0d8:	f023 0303 	bic.w	r3, r3, #3
   1d0dc:	1b9a      	subs	r2, r3, r6
   1d0de:	2a0f      	cmp	r2, #15
   1d0e0:	f300 8190 	bgt.w	1d404 <_malloc_r+0x3a8>
   1d0e4:	2a00      	cmp	r2, #0
   1d0e6:	f8c7 e014 	str.w	lr, [r7, #20]
   1d0ea:	f8c7 e010 	str.w	lr, [r7, #16]
   1d0ee:	f280 809d 	bge.w	1d22c <_malloc_r+0x1d0>
   1d0f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1d0f6:	f080 8161 	bcs.w	1d3bc <_malloc_r+0x360>
   1d0fa:	08db      	lsrs	r3, r3, #3
   1d0fc:	f103 0c01 	add.w	ip, r3, #1
   1d100:	1099      	asrs	r1, r3, #2
   1d102:	687a      	ldr	r2, [r7, #4]
   1d104:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1d108:	f8c4 8008 	str.w	r8, [r4, #8]
   1d10c:	2301      	movs	r3, #1
   1d10e:	408b      	lsls	r3, r1
   1d110:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1d114:	4313      	orrs	r3, r2
   1d116:	3908      	subs	r1, #8
   1d118:	60e1      	str	r1, [r4, #12]
   1d11a:	607b      	str	r3, [r7, #4]
   1d11c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1d120:	f8c8 400c 	str.w	r4, [r8, #12]
   1d124:	1082      	asrs	r2, r0, #2
   1d126:	2401      	movs	r4, #1
   1d128:	4094      	lsls	r4, r2
   1d12a:	429c      	cmp	r4, r3
   1d12c:	f200 808b 	bhi.w	1d246 <_malloc_r+0x1ea>
   1d130:	421c      	tst	r4, r3
   1d132:	d106      	bne.n	1d142 <_malloc_r+0xe6>
   1d134:	f020 0003 	bic.w	r0, r0, #3
   1d138:	0064      	lsls	r4, r4, #1
   1d13a:	421c      	tst	r4, r3
   1d13c:	f100 0004 	add.w	r0, r0, #4
   1d140:	d0fa      	beq.n	1d138 <_malloc_r+0xdc>
   1d142:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1d146:	46cc      	mov	ip, r9
   1d148:	4680      	mov	r8, r0
   1d14a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1d14e:	459c      	cmp	ip, r3
   1d150:	d107      	bne.n	1d162 <_malloc_r+0x106>
   1d152:	e16d      	b.n	1d430 <_malloc_r+0x3d4>
   1d154:	2a00      	cmp	r2, #0
   1d156:	f280 817b 	bge.w	1d450 <_malloc_r+0x3f4>
   1d15a:	68db      	ldr	r3, [r3, #12]
   1d15c:	459c      	cmp	ip, r3
   1d15e:	f000 8167 	beq.w	1d430 <_malloc_r+0x3d4>
   1d162:	6859      	ldr	r1, [r3, #4]
   1d164:	f021 0103 	bic.w	r1, r1, #3
   1d168:	1b8a      	subs	r2, r1, r6
   1d16a:	2a0f      	cmp	r2, #15
   1d16c:	ddf2      	ble.n	1d154 <_malloc_r+0xf8>
   1d16e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1d172:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1d176:	9300      	str	r3, [sp, #0]
   1d178:	199c      	adds	r4, r3, r6
   1d17a:	4628      	mov	r0, r5
   1d17c:	f046 0601 	orr.w	r6, r6, #1
   1d180:	f042 0501 	orr.w	r5, r2, #1
   1d184:	605e      	str	r6, [r3, #4]
   1d186:	f8c8 c00c 	str.w	ip, [r8, #12]
   1d18a:	f8cc 8008 	str.w	r8, [ip, #8]
   1d18e:	617c      	str	r4, [r7, #20]
   1d190:	613c      	str	r4, [r7, #16]
   1d192:	f8c4 e00c 	str.w	lr, [r4, #12]
   1d196:	f8c4 e008 	str.w	lr, [r4, #8]
   1d19a:	6065      	str	r5, [r4, #4]
   1d19c:	505a      	str	r2, [r3, r1]
   1d19e:	f000 fa65 	bl	1d66c <__malloc_unlock>
   1d1a2:	9b00      	ldr	r3, [sp, #0]
   1d1a4:	f103 0408 	add.w	r4, r3, #8
   1d1a8:	e01e      	b.n	1d1e8 <_malloc_r+0x18c>
   1d1aa:	2910      	cmp	r1, #16
   1d1ac:	d820      	bhi.n	1d1f0 <_malloc_r+0x194>
   1d1ae:	f000 fa57 	bl	1d660 <__malloc_lock>
   1d1b2:	2610      	movs	r6, #16
   1d1b4:	2318      	movs	r3, #24
   1d1b6:	2002      	movs	r0, #2
   1d1b8:	4f79      	ldr	r7, [pc, #484]	; (1d3a0 <_malloc_r+0x344>)
   1d1ba:	443b      	add	r3, r7
   1d1bc:	f1a3 0208 	sub.w	r2, r3, #8
   1d1c0:	685c      	ldr	r4, [r3, #4]
   1d1c2:	4294      	cmp	r4, r2
   1d1c4:	f000 813d 	beq.w	1d442 <_malloc_r+0x3e6>
   1d1c8:	6863      	ldr	r3, [r4, #4]
   1d1ca:	68e1      	ldr	r1, [r4, #12]
   1d1cc:	68a6      	ldr	r6, [r4, #8]
   1d1ce:	f023 0303 	bic.w	r3, r3, #3
   1d1d2:	4423      	add	r3, r4
   1d1d4:	4628      	mov	r0, r5
   1d1d6:	685a      	ldr	r2, [r3, #4]
   1d1d8:	60f1      	str	r1, [r6, #12]
   1d1da:	f042 0201 	orr.w	r2, r2, #1
   1d1de:	608e      	str	r6, [r1, #8]
   1d1e0:	605a      	str	r2, [r3, #4]
   1d1e2:	f000 fa43 	bl	1d66c <__malloc_unlock>
   1d1e6:	3408      	adds	r4, #8
   1d1e8:	4620      	mov	r0, r4
   1d1ea:	b003      	add	sp, #12
   1d1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1f0:	2400      	movs	r4, #0
   1d1f2:	230c      	movs	r3, #12
   1d1f4:	4620      	mov	r0, r4
   1d1f6:	602b      	str	r3, [r5, #0]
   1d1f8:	b003      	add	sp, #12
   1d1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1fe:	2040      	movs	r0, #64	; 0x40
   1d200:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d204:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1d208:	e74a      	b.n	1d0a0 <_malloc_r+0x44>
   1d20a:	4423      	add	r3, r4
   1d20c:	68e1      	ldr	r1, [r4, #12]
   1d20e:	685a      	ldr	r2, [r3, #4]
   1d210:	68a6      	ldr	r6, [r4, #8]
   1d212:	f042 0201 	orr.w	r2, r2, #1
   1d216:	60f1      	str	r1, [r6, #12]
   1d218:	4628      	mov	r0, r5
   1d21a:	608e      	str	r6, [r1, #8]
   1d21c:	605a      	str	r2, [r3, #4]
   1d21e:	f000 fa25 	bl	1d66c <__malloc_unlock>
   1d222:	3408      	adds	r4, #8
   1d224:	4620      	mov	r0, r4
   1d226:	b003      	add	sp, #12
   1d228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d22c:	4423      	add	r3, r4
   1d22e:	4628      	mov	r0, r5
   1d230:	685a      	ldr	r2, [r3, #4]
   1d232:	f042 0201 	orr.w	r2, r2, #1
   1d236:	605a      	str	r2, [r3, #4]
   1d238:	f000 fa18 	bl	1d66c <__malloc_unlock>
   1d23c:	3408      	adds	r4, #8
   1d23e:	4620      	mov	r0, r4
   1d240:	b003      	add	sp, #12
   1d242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d246:	68bc      	ldr	r4, [r7, #8]
   1d248:	6863      	ldr	r3, [r4, #4]
   1d24a:	f023 0803 	bic.w	r8, r3, #3
   1d24e:	45b0      	cmp	r8, r6
   1d250:	d304      	bcc.n	1d25c <_malloc_r+0x200>
   1d252:	eba8 0306 	sub.w	r3, r8, r6
   1d256:	2b0f      	cmp	r3, #15
   1d258:	f300 8085 	bgt.w	1d366 <_malloc_r+0x30a>
   1d25c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1d3b8 <_malloc_r+0x35c>
   1d260:	4b50      	ldr	r3, [pc, #320]	; (1d3a4 <_malloc_r+0x348>)
   1d262:	f8d9 2000 	ldr.w	r2, [r9]
   1d266:	681b      	ldr	r3, [r3, #0]
   1d268:	3201      	adds	r2, #1
   1d26a:	4433      	add	r3, r6
   1d26c:	eb04 0a08 	add.w	sl, r4, r8
   1d270:	f000 8155 	beq.w	1d51e <_malloc_r+0x4c2>
   1d274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1d278:	330f      	adds	r3, #15
   1d27a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1d27e:	f02b 0b0f 	bic.w	fp, fp, #15
   1d282:	4659      	mov	r1, fp
   1d284:	4628      	mov	r0, r5
   1d286:	f000 f9f7 	bl	1d678 <_sbrk_r>
   1d28a:	1c41      	adds	r1, r0, #1
   1d28c:	4602      	mov	r2, r0
   1d28e:	f000 80fc 	beq.w	1d48a <_malloc_r+0x42e>
   1d292:	4582      	cmp	sl, r0
   1d294:	f200 80f7 	bhi.w	1d486 <_malloc_r+0x42a>
   1d298:	4b43      	ldr	r3, [pc, #268]	; (1d3a8 <_malloc_r+0x34c>)
   1d29a:	6819      	ldr	r1, [r3, #0]
   1d29c:	4459      	add	r1, fp
   1d29e:	6019      	str	r1, [r3, #0]
   1d2a0:	f000 814d 	beq.w	1d53e <_malloc_r+0x4e2>
   1d2a4:	f8d9 0000 	ldr.w	r0, [r9]
   1d2a8:	3001      	adds	r0, #1
   1d2aa:	bf1b      	ittet	ne
   1d2ac:	eba2 0a0a 	subne.w	sl, r2, sl
   1d2b0:	4451      	addne	r1, sl
   1d2b2:	f8c9 2000 	streq.w	r2, [r9]
   1d2b6:	6019      	strne	r1, [r3, #0]
   1d2b8:	f012 0107 	ands.w	r1, r2, #7
   1d2bc:	f000 8115 	beq.w	1d4ea <_malloc_r+0x48e>
   1d2c0:	f1c1 0008 	rsb	r0, r1, #8
   1d2c4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1d2c8:	4402      	add	r2, r0
   1d2ca:	3108      	adds	r1, #8
   1d2cc:	eb02 090b 	add.w	r9, r2, fp
   1d2d0:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1d2d4:	eba1 0909 	sub.w	r9, r1, r9
   1d2d8:	4649      	mov	r1, r9
   1d2da:	4628      	mov	r0, r5
   1d2dc:	9301      	str	r3, [sp, #4]
   1d2de:	9200      	str	r2, [sp, #0]
   1d2e0:	f000 f9ca 	bl	1d678 <_sbrk_r>
   1d2e4:	1c43      	adds	r3, r0, #1
   1d2e6:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1d2ea:	f000 8143 	beq.w	1d574 <_malloc_r+0x518>
   1d2ee:	1a80      	subs	r0, r0, r2
   1d2f0:	4448      	add	r0, r9
   1d2f2:	f040 0001 	orr.w	r0, r0, #1
   1d2f6:	6819      	ldr	r1, [r3, #0]
   1d2f8:	60ba      	str	r2, [r7, #8]
   1d2fa:	4449      	add	r1, r9
   1d2fc:	42bc      	cmp	r4, r7
   1d2fe:	6050      	str	r0, [r2, #4]
   1d300:	6019      	str	r1, [r3, #0]
   1d302:	d017      	beq.n	1d334 <_malloc_r+0x2d8>
   1d304:	f1b8 0f0f 	cmp.w	r8, #15
   1d308:	f240 80fb 	bls.w	1d502 <_malloc_r+0x4a6>
   1d30c:	6860      	ldr	r0, [r4, #4]
   1d30e:	f1a8 020c 	sub.w	r2, r8, #12
   1d312:	f022 0207 	bic.w	r2, r2, #7
   1d316:	eb04 0e02 	add.w	lr, r4, r2
   1d31a:	f000 0001 	and.w	r0, r0, #1
   1d31e:	f04f 0c05 	mov.w	ip, #5
   1d322:	4310      	orrs	r0, r2
   1d324:	2a0f      	cmp	r2, #15
   1d326:	6060      	str	r0, [r4, #4]
   1d328:	f8ce c004 	str.w	ip, [lr, #4]
   1d32c:	f8ce c008 	str.w	ip, [lr, #8]
   1d330:	f200 8117 	bhi.w	1d562 <_malloc_r+0x506>
   1d334:	4b1d      	ldr	r3, [pc, #116]	; (1d3ac <_malloc_r+0x350>)
   1d336:	68bc      	ldr	r4, [r7, #8]
   1d338:	681a      	ldr	r2, [r3, #0]
   1d33a:	4291      	cmp	r1, r2
   1d33c:	bf88      	it	hi
   1d33e:	6019      	strhi	r1, [r3, #0]
   1d340:	4b1b      	ldr	r3, [pc, #108]	; (1d3b0 <_malloc_r+0x354>)
   1d342:	681a      	ldr	r2, [r3, #0]
   1d344:	4291      	cmp	r1, r2
   1d346:	6862      	ldr	r2, [r4, #4]
   1d348:	bf88      	it	hi
   1d34a:	6019      	strhi	r1, [r3, #0]
   1d34c:	f022 0203 	bic.w	r2, r2, #3
   1d350:	4296      	cmp	r6, r2
   1d352:	eba2 0306 	sub.w	r3, r2, r6
   1d356:	d801      	bhi.n	1d35c <_malloc_r+0x300>
   1d358:	2b0f      	cmp	r3, #15
   1d35a:	dc04      	bgt.n	1d366 <_malloc_r+0x30a>
   1d35c:	4628      	mov	r0, r5
   1d35e:	f000 f985 	bl	1d66c <__malloc_unlock>
   1d362:	2400      	movs	r4, #0
   1d364:	e740      	b.n	1d1e8 <_malloc_r+0x18c>
   1d366:	19a2      	adds	r2, r4, r6
   1d368:	f043 0301 	orr.w	r3, r3, #1
   1d36c:	f046 0601 	orr.w	r6, r6, #1
   1d370:	6066      	str	r6, [r4, #4]
   1d372:	4628      	mov	r0, r5
   1d374:	60ba      	str	r2, [r7, #8]
   1d376:	6053      	str	r3, [r2, #4]
   1d378:	f000 f978 	bl	1d66c <__malloc_unlock>
   1d37c:	3408      	adds	r4, #8
   1d37e:	4620      	mov	r0, r4
   1d380:	b003      	add	sp, #12
   1d382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d386:	2b14      	cmp	r3, #20
   1d388:	d971      	bls.n	1d46e <_malloc_r+0x412>
   1d38a:	2b54      	cmp	r3, #84	; 0x54
   1d38c:	f200 80a3 	bhi.w	1d4d6 <_malloc_r+0x47a>
   1d390:	0b33      	lsrs	r3, r6, #12
   1d392:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1d396:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1d39a:	00c3      	lsls	r3, r0, #3
   1d39c:	e680      	b.n	1d0a0 <_malloc_r+0x44>
   1d39e:	bf00      	nop
   1d3a0:	200006c4 	.word	0x200006c4
   1d3a4:	2000a704 	.word	0x2000a704
   1d3a8:	2000a6d4 	.word	0x2000a6d4
   1d3ac:	2000a6fc 	.word	0x2000a6fc
   1d3b0:	2000a700 	.word	0x2000a700
   1d3b4:	200006cc 	.word	0x200006cc
   1d3b8:	20000acc 	.word	0x20000acc
   1d3bc:	0a5a      	lsrs	r2, r3, #9
   1d3be:	2a04      	cmp	r2, #4
   1d3c0:	d95b      	bls.n	1d47a <_malloc_r+0x41e>
   1d3c2:	2a14      	cmp	r2, #20
   1d3c4:	f200 80ae 	bhi.w	1d524 <_malloc_r+0x4c8>
   1d3c8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1d3cc:	00c9      	lsls	r1, r1, #3
   1d3ce:	325b      	adds	r2, #91	; 0x5b
   1d3d0:	eb07 0c01 	add.w	ip, r7, r1
   1d3d4:	5879      	ldr	r1, [r7, r1]
   1d3d6:	f1ac 0c08 	sub.w	ip, ip, #8
   1d3da:	458c      	cmp	ip, r1
   1d3dc:	f000 8088 	beq.w	1d4f0 <_malloc_r+0x494>
   1d3e0:	684a      	ldr	r2, [r1, #4]
   1d3e2:	f022 0203 	bic.w	r2, r2, #3
   1d3e6:	4293      	cmp	r3, r2
   1d3e8:	d273      	bcs.n	1d4d2 <_malloc_r+0x476>
   1d3ea:	6889      	ldr	r1, [r1, #8]
   1d3ec:	458c      	cmp	ip, r1
   1d3ee:	d1f7      	bne.n	1d3e0 <_malloc_r+0x384>
   1d3f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1d3f4:	687b      	ldr	r3, [r7, #4]
   1d3f6:	60e2      	str	r2, [r4, #12]
   1d3f8:	f8c4 c008 	str.w	ip, [r4, #8]
   1d3fc:	6094      	str	r4, [r2, #8]
   1d3fe:	f8cc 400c 	str.w	r4, [ip, #12]
   1d402:	e68f      	b.n	1d124 <_malloc_r+0xc8>
   1d404:	19a1      	adds	r1, r4, r6
   1d406:	f046 0c01 	orr.w	ip, r6, #1
   1d40a:	f042 0601 	orr.w	r6, r2, #1
   1d40e:	f8c4 c004 	str.w	ip, [r4, #4]
   1d412:	4628      	mov	r0, r5
   1d414:	6179      	str	r1, [r7, #20]
   1d416:	6139      	str	r1, [r7, #16]
   1d418:	f8c1 e00c 	str.w	lr, [r1, #12]
   1d41c:	f8c1 e008 	str.w	lr, [r1, #8]
   1d420:	604e      	str	r6, [r1, #4]
   1d422:	50e2      	str	r2, [r4, r3]
   1d424:	f000 f922 	bl	1d66c <__malloc_unlock>
   1d428:	3408      	adds	r4, #8
   1d42a:	e6dd      	b.n	1d1e8 <_malloc_r+0x18c>
   1d42c:	687b      	ldr	r3, [r7, #4]
   1d42e:	e679      	b.n	1d124 <_malloc_r+0xc8>
   1d430:	f108 0801 	add.w	r8, r8, #1
   1d434:	f018 0f03 	tst.w	r8, #3
   1d438:	f10c 0c08 	add.w	ip, ip, #8
   1d43c:	f47f ae85 	bne.w	1d14a <_malloc_r+0xee>
   1d440:	e02d      	b.n	1d49e <_malloc_r+0x442>
   1d442:	68dc      	ldr	r4, [r3, #12]
   1d444:	42a3      	cmp	r3, r4
   1d446:	bf08      	it	eq
   1d448:	3002      	addeq	r0, #2
   1d44a:	f43f ae3e 	beq.w	1d0ca <_malloc_r+0x6e>
   1d44e:	e6bb      	b.n	1d1c8 <_malloc_r+0x16c>
   1d450:	4419      	add	r1, r3
   1d452:	461c      	mov	r4, r3
   1d454:	684a      	ldr	r2, [r1, #4]
   1d456:	68db      	ldr	r3, [r3, #12]
   1d458:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1d45c:	f042 0201 	orr.w	r2, r2, #1
   1d460:	604a      	str	r2, [r1, #4]
   1d462:	4628      	mov	r0, r5
   1d464:	60f3      	str	r3, [r6, #12]
   1d466:	609e      	str	r6, [r3, #8]
   1d468:	f000 f900 	bl	1d66c <__malloc_unlock>
   1d46c:	e6bc      	b.n	1d1e8 <_malloc_r+0x18c>
   1d46e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1d472:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1d476:	00c3      	lsls	r3, r0, #3
   1d478:	e612      	b.n	1d0a0 <_malloc_r+0x44>
   1d47a:	099a      	lsrs	r2, r3, #6
   1d47c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1d480:	00c9      	lsls	r1, r1, #3
   1d482:	3238      	adds	r2, #56	; 0x38
   1d484:	e7a4      	b.n	1d3d0 <_malloc_r+0x374>
   1d486:	42bc      	cmp	r4, r7
   1d488:	d054      	beq.n	1d534 <_malloc_r+0x4d8>
   1d48a:	68bc      	ldr	r4, [r7, #8]
   1d48c:	6862      	ldr	r2, [r4, #4]
   1d48e:	f022 0203 	bic.w	r2, r2, #3
   1d492:	e75d      	b.n	1d350 <_malloc_r+0x2f4>
   1d494:	f859 3908 	ldr.w	r3, [r9], #-8
   1d498:	4599      	cmp	r9, r3
   1d49a:	f040 8086 	bne.w	1d5aa <_malloc_r+0x54e>
   1d49e:	f010 0f03 	tst.w	r0, #3
   1d4a2:	f100 30ff 	add.w	r0, r0, #4294967295
   1d4a6:	d1f5      	bne.n	1d494 <_malloc_r+0x438>
   1d4a8:	687b      	ldr	r3, [r7, #4]
   1d4aa:	ea23 0304 	bic.w	r3, r3, r4
   1d4ae:	607b      	str	r3, [r7, #4]
   1d4b0:	0064      	lsls	r4, r4, #1
   1d4b2:	429c      	cmp	r4, r3
   1d4b4:	f63f aec7 	bhi.w	1d246 <_malloc_r+0x1ea>
   1d4b8:	2c00      	cmp	r4, #0
   1d4ba:	f43f aec4 	beq.w	1d246 <_malloc_r+0x1ea>
   1d4be:	421c      	tst	r4, r3
   1d4c0:	4640      	mov	r0, r8
   1d4c2:	f47f ae3e 	bne.w	1d142 <_malloc_r+0xe6>
   1d4c6:	0064      	lsls	r4, r4, #1
   1d4c8:	421c      	tst	r4, r3
   1d4ca:	f100 0004 	add.w	r0, r0, #4
   1d4ce:	d0fa      	beq.n	1d4c6 <_malloc_r+0x46a>
   1d4d0:	e637      	b.n	1d142 <_malloc_r+0xe6>
   1d4d2:	468c      	mov	ip, r1
   1d4d4:	e78c      	b.n	1d3f0 <_malloc_r+0x394>
   1d4d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1d4da:	d815      	bhi.n	1d508 <_malloc_r+0x4ac>
   1d4dc:	0bf3      	lsrs	r3, r6, #15
   1d4de:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1d4e2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1d4e6:	00c3      	lsls	r3, r0, #3
   1d4e8:	e5da      	b.n	1d0a0 <_malloc_r+0x44>
   1d4ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1d4ee:	e6ed      	b.n	1d2cc <_malloc_r+0x270>
   1d4f0:	687b      	ldr	r3, [r7, #4]
   1d4f2:	1092      	asrs	r2, r2, #2
   1d4f4:	2101      	movs	r1, #1
   1d4f6:	fa01 f202 	lsl.w	r2, r1, r2
   1d4fa:	4313      	orrs	r3, r2
   1d4fc:	607b      	str	r3, [r7, #4]
   1d4fe:	4662      	mov	r2, ip
   1d500:	e779      	b.n	1d3f6 <_malloc_r+0x39a>
   1d502:	2301      	movs	r3, #1
   1d504:	6053      	str	r3, [r2, #4]
   1d506:	e729      	b.n	1d35c <_malloc_r+0x300>
   1d508:	f240 5254 	movw	r2, #1364	; 0x554
   1d50c:	4293      	cmp	r3, r2
   1d50e:	d822      	bhi.n	1d556 <_malloc_r+0x4fa>
   1d510:	0cb3      	lsrs	r3, r6, #18
   1d512:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1d516:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1d51a:	00c3      	lsls	r3, r0, #3
   1d51c:	e5c0      	b.n	1d0a0 <_malloc_r+0x44>
   1d51e:	f103 0b10 	add.w	fp, r3, #16
   1d522:	e6ae      	b.n	1d282 <_malloc_r+0x226>
   1d524:	2a54      	cmp	r2, #84	; 0x54
   1d526:	d829      	bhi.n	1d57c <_malloc_r+0x520>
   1d528:	0b1a      	lsrs	r2, r3, #12
   1d52a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1d52e:	00c9      	lsls	r1, r1, #3
   1d530:	326e      	adds	r2, #110	; 0x6e
   1d532:	e74d      	b.n	1d3d0 <_malloc_r+0x374>
   1d534:	4b20      	ldr	r3, [pc, #128]	; (1d5b8 <_malloc_r+0x55c>)
   1d536:	6819      	ldr	r1, [r3, #0]
   1d538:	4459      	add	r1, fp
   1d53a:	6019      	str	r1, [r3, #0]
   1d53c:	e6b2      	b.n	1d2a4 <_malloc_r+0x248>
   1d53e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1d542:	2800      	cmp	r0, #0
   1d544:	f47f aeae 	bne.w	1d2a4 <_malloc_r+0x248>
   1d548:	eb08 030b 	add.w	r3, r8, fp
   1d54c:	68ba      	ldr	r2, [r7, #8]
   1d54e:	f043 0301 	orr.w	r3, r3, #1
   1d552:	6053      	str	r3, [r2, #4]
   1d554:	e6ee      	b.n	1d334 <_malloc_r+0x2d8>
   1d556:	207f      	movs	r0, #127	; 0x7f
   1d558:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1d55c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1d560:	e59e      	b.n	1d0a0 <_malloc_r+0x44>
   1d562:	f104 0108 	add.w	r1, r4, #8
   1d566:	4628      	mov	r0, r5
   1d568:	9300      	str	r3, [sp, #0]
   1d56a:	f001 ff91 	bl	1f490 <_free_r>
   1d56e:	9b00      	ldr	r3, [sp, #0]
   1d570:	6819      	ldr	r1, [r3, #0]
   1d572:	e6df      	b.n	1d334 <_malloc_r+0x2d8>
   1d574:	2001      	movs	r0, #1
   1d576:	f04f 0900 	mov.w	r9, #0
   1d57a:	e6bc      	b.n	1d2f6 <_malloc_r+0x29a>
   1d57c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1d580:	d805      	bhi.n	1d58e <_malloc_r+0x532>
   1d582:	0bda      	lsrs	r2, r3, #15
   1d584:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1d588:	00c9      	lsls	r1, r1, #3
   1d58a:	3277      	adds	r2, #119	; 0x77
   1d58c:	e720      	b.n	1d3d0 <_malloc_r+0x374>
   1d58e:	f240 5154 	movw	r1, #1364	; 0x554
   1d592:	428a      	cmp	r2, r1
   1d594:	d805      	bhi.n	1d5a2 <_malloc_r+0x546>
   1d596:	0c9a      	lsrs	r2, r3, #18
   1d598:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1d59c:	00c9      	lsls	r1, r1, #3
   1d59e:	327c      	adds	r2, #124	; 0x7c
   1d5a0:	e716      	b.n	1d3d0 <_malloc_r+0x374>
   1d5a2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1d5a6:	227e      	movs	r2, #126	; 0x7e
   1d5a8:	e712      	b.n	1d3d0 <_malloc_r+0x374>
   1d5aa:	687b      	ldr	r3, [r7, #4]
   1d5ac:	e780      	b.n	1d4b0 <_malloc_r+0x454>
   1d5ae:	08f0      	lsrs	r0, r6, #3
   1d5b0:	f106 0308 	add.w	r3, r6, #8
   1d5b4:	e600      	b.n	1d1b8 <_malloc_r+0x15c>
   1d5b6:	bf00      	nop
   1d5b8:	2000a6d4 	.word	0x2000a6d4
   1d5bc:	00000000 	.word	0x00000000

0001d5c0 <memchr>:
   1d5c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d5c4:	2a10      	cmp	r2, #16
   1d5c6:	db2b      	blt.n	1d620 <memchr+0x60>
   1d5c8:	f010 0f07 	tst.w	r0, #7
   1d5cc:	d008      	beq.n	1d5e0 <memchr+0x20>
   1d5ce:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d5d2:	3a01      	subs	r2, #1
   1d5d4:	428b      	cmp	r3, r1
   1d5d6:	d02d      	beq.n	1d634 <memchr+0x74>
   1d5d8:	f010 0f07 	tst.w	r0, #7
   1d5dc:	b342      	cbz	r2, 1d630 <memchr+0x70>
   1d5de:	d1f6      	bne.n	1d5ce <memchr+0xe>
   1d5e0:	b4f0      	push	{r4, r5, r6, r7}
   1d5e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1d5e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1d5ea:	f022 0407 	bic.w	r4, r2, #7
   1d5ee:	f07f 0700 	mvns.w	r7, #0
   1d5f2:	2300      	movs	r3, #0
   1d5f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1d5f8:	3c08      	subs	r4, #8
   1d5fa:	ea85 0501 	eor.w	r5, r5, r1
   1d5fe:	ea86 0601 	eor.w	r6, r6, r1
   1d602:	fa85 f547 	uadd8	r5, r5, r7
   1d606:	faa3 f587 	sel	r5, r3, r7
   1d60a:	fa86 f647 	uadd8	r6, r6, r7
   1d60e:	faa5 f687 	sel	r6, r5, r7
   1d612:	b98e      	cbnz	r6, 1d638 <memchr+0x78>
   1d614:	d1ee      	bne.n	1d5f4 <memchr+0x34>
   1d616:	bcf0      	pop	{r4, r5, r6, r7}
   1d618:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d61c:	f002 0207 	and.w	r2, r2, #7
   1d620:	b132      	cbz	r2, 1d630 <memchr+0x70>
   1d622:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d626:	3a01      	subs	r2, #1
   1d628:	ea83 0301 	eor.w	r3, r3, r1
   1d62c:	b113      	cbz	r3, 1d634 <memchr+0x74>
   1d62e:	d1f8      	bne.n	1d622 <memchr+0x62>
   1d630:	2000      	movs	r0, #0
   1d632:	4770      	bx	lr
   1d634:	3801      	subs	r0, #1
   1d636:	4770      	bx	lr
   1d638:	2d00      	cmp	r5, #0
   1d63a:	bf06      	itte	eq
   1d63c:	4635      	moveq	r5, r6
   1d63e:	3803      	subeq	r0, #3
   1d640:	3807      	subne	r0, #7
   1d642:	f015 0f01 	tst.w	r5, #1
   1d646:	d107      	bne.n	1d658 <memchr+0x98>
   1d648:	3001      	adds	r0, #1
   1d64a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1d64e:	bf02      	ittt	eq
   1d650:	3001      	addeq	r0, #1
   1d652:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1d656:	3001      	addeq	r0, #1
   1d658:	bcf0      	pop	{r4, r5, r6, r7}
   1d65a:	3801      	subs	r0, #1
   1d65c:	4770      	bx	lr
   1d65e:	bf00      	nop

0001d660 <__malloc_lock>:
   1d660:	4801      	ldr	r0, [pc, #4]	; (1d668 <__malloc_lock+0x8>)
   1d662:	f7ff bcf5 	b.w	1d050 <__retarget_lock_acquire_recursive>
   1d666:	bf00      	nop
   1d668:	2000a9c8 	.word	0x2000a9c8

0001d66c <__malloc_unlock>:
   1d66c:	4801      	ldr	r0, [pc, #4]	; (1d674 <__malloc_unlock+0x8>)
   1d66e:	f7ff bcf3 	b.w	1d058 <__retarget_lock_release_recursive>
   1d672:	bf00      	nop
   1d674:	2000a9c8 	.word	0x2000a9c8

0001d678 <_sbrk_r>:
   1d678:	b538      	push	{r3, r4, r5, lr}
   1d67a:	4c07      	ldr	r4, [pc, #28]	; (1d698 <_sbrk_r+0x20>)
   1d67c:	2300      	movs	r3, #0
   1d67e:	4605      	mov	r5, r0
   1d680:	4608      	mov	r0, r1
   1d682:	6023      	str	r3, [r4, #0]
   1d684:	f7f7 f8f1 	bl	1486a <_sbrk>
   1d688:	1c43      	adds	r3, r0, #1
   1d68a:	d000      	beq.n	1d68e <_sbrk_r+0x16>
   1d68c:	bd38      	pop	{r3, r4, r5, pc}
   1d68e:	6823      	ldr	r3, [r4, #0]
   1d690:	2b00      	cmp	r3, #0
   1d692:	d0fb      	beq.n	1d68c <_sbrk_r+0x14>
   1d694:	602b      	str	r3, [r5, #0]
   1d696:	bd38      	pop	{r3, r4, r5, pc}
   1d698:	2000a9dc 	.word	0x2000a9dc

0001d69c <siprintf>:
   1d69c:	b40e      	push	{r1, r2, r3}
   1d69e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6a0:	b09c      	sub	sp, #112	; 0x70
   1d6a2:	ab21      	add	r3, sp, #132	; 0x84
   1d6a4:	490f      	ldr	r1, [pc, #60]	; (1d6e4 <siprintf+0x48>)
   1d6a6:	f853 2b04 	ldr.w	r2, [r3], #4
   1d6aa:	9301      	str	r3, [sp, #4]
   1d6ac:	4605      	mov	r5, r0
   1d6ae:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1d6b2:	6808      	ldr	r0, [r1, #0]
   1d6b4:	9502      	str	r5, [sp, #8]
   1d6b6:	f44f 7702 	mov.w	r7, #520	; 0x208
   1d6ba:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1d6be:	a902      	add	r1, sp, #8
   1d6c0:	9506      	str	r5, [sp, #24]
   1d6c2:	f8ad 7014 	strh.w	r7, [sp, #20]
   1d6c6:	9404      	str	r4, [sp, #16]
   1d6c8:	9407      	str	r4, [sp, #28]
   1d6ca:	f8ad 6016 	strh.w	r6, [sp, #22]
   1d6ce:	f000 fbaf 	bl	1de30 <_svfiprintf_r>
   1d6d2:	9b02      	ldr	r3, [sp, #8]
   1d6d4:	2200      	movs	r2, #0
   1d6d6:	701a      	strb	r2, [r3, #0]
   1d6d8:	b01c      	add	sp, #112	; 0x70
   1d6da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d6de:	b003      	add	sp, #12
   1d6e0:	4770      	bx	lr
   1d6e2:	bf00      	nop
   1d6e4:	20000248 	.word	0x20000248

0001d6e8 <siscanf>:
   1d6e8:	b40e      	push	{r1, r2, r3}
   1d6ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6ec:	b09c      	sub	sp, #112	; 0x70
   1d6ee:	ac21      	add	r4, sp, #132	; 0x84
   1d6f0:	f44f 7201 	mov.w	r2, #516	; 0x204
   1d6f4:	f854 6b04 	ldr.w	r6, [r4], #4
   1d6f8:	f8ad 2014 	strh.w	r2, [sp, #20]
   1d6fc:	9002      	str	r0, [sp, #8]
   1d6fe:	9006      	str	r0, [sp, #24]
   1d700:	f7fe ffde 	bl	1c6c0 <strlen>
   1d704:	4b0c      	ldr	r3, [pc, #48]	; (1d738 <siscanf+0x50>)
   1d706:	9401      	str	r4, [sp, #4]
   1d708:	4605      	mov	r5, r0
   1d70a:	4632      	mov	r2, r6
   1d70c:	4f0b      	ldr	r7, [pc, #44]	; (1d73c <siscanf+0x54>)
   1d70e:	6818      	ldr	r0, [r3, #0]
   1d710:	9503      	str	r5, [sp, #12]
   1d712:	4623      	mov	r3, r4
   1d714:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1d718:	2400      	movs	r4, #0
   1d71a:	a902      	add	r1, sp, #8
   1d71c:	9507      	str	r5, [sp, #28]
   1d71e:	970a      	str	r7, [sp, #40]	; 0x28
   1d720:	940e      	str	r4, [sp, #56]	; 0x38
   1d722:	9413      	str	r4, [sp, #76]	; 0x4c
   1d724:	f8ad 6016 	strh.w	r6, [sp, #22]
   1d728:	f001 f94a 	bl	1e9c0 <__ssvfiscanf_r>
   1d72c:	b01c      	add	sp, #112	; 0x70
   1d72e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d732:	b003      	add	sp, #12
   1d734:	4770      	bx	lr
   1d736:	bf00      	nop
   1d738:	20000248 	.word	0x20000248
   1d73c:	0001d741 	.word	0x0001d741

0001d740 <__seofread>:
   1d740:	2000      	movs	r0, #0
   1d742:	4770      	bx	lr
	...
   1d760:	eba2 0003 	sub.w	r0, r2, r3
   1d764:	4770      	bx	lr
   1d766:	bf00      	nop

0001d768 <strcmp>:
   1d768:	7802      	ldrb	r2, [r0, #0]
   1d76a:	780b      	ldrb	r3, [r1, #0]
   1d76c:	2a01      	cmp	r2, #1
   1d76e:	bf28      	it	cs
   1d770:	429a      	cmpcs	r2, r3
   1d772:	d1f5      	bne.n	1d760 <__seofread+0x20>
   1d774:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1d778:	ea40 0401 	orr.w	r4, r0, r1
   1d77c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1d780:	f06f 0c00 	mvn.w	ip, #0
   1d784:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1d788:	b312      	cbz	r2, 1d7d0 <strcmp+0x68>
   1d78a:	ea80 0401 	eor.w	r4, r0, r1
   1d78e:	f014 0f07 	tst.w	r4, #7
   1d792:	d16a      	bne.n	1d86a <strcmp+0x102>
   1d794:	f000 0407 	and.w	r4, r0, #7
   1d798:	f020 0007 	bic.w	r0, r0, #7
   1d79c:	f004 0503 	and.w	r5, r4, #3
   1d7a0:	f021 0107 	bic.w	r1, r1, #7
   1d7a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1d7a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1d7ac:	f014 0f04 	tst.w	r4, #4
   1d7b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1d7b4:	fa0c f405 	lsl.w	r4, ip, r5
   1d7b8:	ea62 0204 	orn	r2, r2, r4
   1d7bc:	ea66 0604 	orn	r6, r6, r4
   1d7c0:	d00a      	beq.n	1d7d8 <strcmp+0x70>
   1d7c2:	ea63 0304 	orn	r3, r3, r4
   1d7c6:	4662      	mov	r2, ip
   1d7c8:	ea67 0704 	orn	r7, r7, r4
   1d7cc:	4666      	mov	r6, ip
   1d7ce:	e003      	b.n	1d7d8 <strcmp+0x70>
   1d7d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1d7d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1d7d8:	fa82 f54c 	uadd8	r5, r2, ip
   1d7dc:	ea82 0406 	eor.w	r4, r2, r6
   1d7e0:	faa4 f48c 	sel	r4, r4, ip
   1d7e4:	bb6c      	cbnz	r4, 1d842 <strcmp+0xda>
   1d7e6:	fa83 f54c 	uadd8	r5, r3, ip
   1d7ea:	ea83 0507 	eor.w	r5, r3, r7
   1d7ee:	faa5 f58c 	sel	r5, r5, ip
   1d7f2:	b995      	cbnz	r5, 1d81a <strcmp+0xb2>
   1d7f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1d7f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1d7fc:	fa82 f54c 	uadd8	r5, r2, ip
   1d800:	ea82 0406 	eor.w	r4, r2, r6
   1d804:	faa4 f48c 	sel	r4, r4, ip
   1d808:	fa83 f54c 	uadd8	r5, r3, ip
   1d80c:	ea83 0507 	eor.w	r5, r3, r7
   1d810:	faa5 f58c 	sel	r5, r5, ip
   1d814:	4325      	orrs	r5, r4
   1d816:	d0db      	beq.n	1d7d0 <strcmp+0x68>
   1d818:	b99c      	cbnz	r4, 1d842 <strcmp+0xda>
   1d81a:	ba2d      	rev	r5, r5
   1d81c:	fab5 f485 	clz	r4, r5
   1d820:	f024 0407 	bic.w	r4, r4, #7
   1d824:	fa27 f104 	lsr.w	r1, r7, r4
   1d828:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1d82c:	fa23 f304 	lsr.w	r3, r3, r4
   1d830:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1d834:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d838:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d83c:	eba0 0001 	sub.w	r0, r0, r1
   1d840:	4770      	bx	lr
   1d842:	ba24      	rev	r4, r4
   1d844:	fab4 f484 	clz	r4, r4
   1d848:	f024 0407 	bic.w	r4, r4, #7
   1d84c:	fa26 f104 	lsr.w	r1, r6, r4
   1d850:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1d854:	fa22 f204 	lsr.w	r2, r2, r4
   1d858:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1d85c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d860:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d864:	eba0 0001 	sub.w	r0, r0, r1
   1d868:	4770      	bx	lr
   1d86a:	f014 0f03 	tst.w	r4, #3
   1d86e:	d13c      	bne.n	1d8ea <strcmp+0x182>
   1d870:	f010 0403 	ands.w	r4, r0, #3
   1d874:	d128      	bne.n	1d8c8 <strcmp+0x160>
   1d876:	f850 2b08 	ldr.w	r2, [r0], #8
   1d87a:	f851 3b08 	ldr.w	r3, [r1], #8
   1d87e:	fa82 f54c 	uadd8	r5, r2, ip
   1d882:	ea82 0503 	eor.w	r5, r2, r3
   1d886:	faa5 f58c 	sel	r5, r5, ip
   1d88a:	b95d      	cbnz	r5, 1d8a4 <strcmp+0x13c>
   1d88c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1d890:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1d894:	fa82 f54c 	uadd8	r5, r2, ip
   1d898:	ea82 0503 	eor.w	r5, r2, r3
   1d89c:	faa5 f58c 	sel	r5, r5, ip
   1d8a0:	2d00      	cmp	r5, #0
   1d8a2:	d0e8      	beq.n	1d876 <strcmp+0x10e>
   1d8a4:	ba2d      	rev	r5, r5
   1d8a6:	fab5 f485 	clz	r4, r5
   1d8aa:	f024 0407 	bic.w	r4, r4, #7
   1d8ae:	fa23 f104 	lsr.w	r1, r3, r4
   1d8b2:	fa22 f204 	lsr.w	r2, r2, r4
   1d8b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1d8ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d8be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d8c2:	eba0 0001 	sub.w	r0, r0, r1
   1d8c6:	4770      	bx	lr
   1d8c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1d8cc:	f020 0003 	bic.w	r0, r0, #3
   1d8d0:	f850 2b08 	ldr.w	r2, [r0], #8
   1d8d4:	f021 0103 	bic.w	r1, r1, #3
   1d8d8:	f851 3b08 	ldr.w	r3, [r1], #8
   1d8dc:	fa0c f404 	lsl.w	r4, ip, r4
   1d8e0:	ea62 0204 	orn	r2, r2, r4
   1d8e4:	ea63 0304 	orn	r3, r3, r4
   1d8e8:	e7c9      	b.n	1d87e <strcmp+0x116>
   1d8ea:	f010 0403 	ands.w	r4, r0, #3
   1d8ee:	d01a      	beq.n	1d926 <strcmp+0x1be>
   1d8f0:	eba1 0104 	sub.w	r1, r1, r4
   1d8f4:	f020 0003 	bic.w	r0, r0, #3
   1d8f8:	07e4      	lsls	r4, r4, #31
   1d8fa:	f850 2b04 	ldr.w	r2, [r0], #4
   1d8fe:	d006      	beq.n	1d90e <strcmp+0x1a6>
   1d900:	d20f      	bcs.n	1d922 <strcmp+0x1ba>
   1d902:	788b      	ldrb	r3, [r1, #2]
   1d904:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1d908:	1ae4      	subs	r4, r4, r3
   1d90a:	d106      	bne.n	1d91a <strcmp+0x1b2>
   1d90c:	b12b      	cbz	r3, 1d91a <strcmp+0x1b2>
   1d90e:	78cb      	ldrb	r3, [r1, #3]
   1d910:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1d914:	1ae4      	subs	r4, r4, r3
   1d916:	d100      	bne.n	1d91a <strcmp+0x1b2>
   1d918:	b91b      	cbnz	r3, 1d922 <strcmp+0x1ba>
   1d91a:	4620      	mov	r0, r4
   1d91c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1d920:	4770      	bx	lr
   1d922:	f101 0104 	add.w	r1, r1, #4
   1d926:	f850 2b04 	ldr.w	r2, [r0], #4
   1d92a:	07cc      	lsls	r4, r1, #31
   1d92c:	f021 0103 	bic.w	r1, r1, #3
   1d930:	f851 3b04 	ldr.w	r3, [r1], #4
   1d934:	d848      	bhi.n	1d9c8 <strcmp+0x260>
   1d936:	d224      	bcs.n	1d982 <strcmp+0x21a>
   1d938:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1d93c:	fa82 f54c 	uadd8	r5, r2, ip
   1d940:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1d944:	faa5 f58c 	sel	r5, r5, ip
   1d948:	d10a      	bne.n	1d960 <strcmp+0x1f8>
   1d94a:	b965      	cbnz	r5, 1d966 <strcmp+0x1fe>
   1d94c:	f851 3b04 	ldr.w	r3, [r1], #4
   1d950:	ea84 0402 	eor.w	r4, r4, r2
   1d954:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1d958:	d10e      	bne.n	1d978 <strcmp+0x210>
   1d95a:	f850 2b04 	ldr.w	r2, [r0], #4
   1d95e:	e7eb      	b.n	1d938 <strcmp+0x1d0>
   1d960:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1d964:	e055      	b.n	1da12 <strcmp+0x2aa>
   1d966:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1d96a:	d14d      	bne.n	1da08 <strcmp+0x2a0>
   1d96c:	7808      	ldrb	r0, [r1, #0]
   1d96e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d972:	f1c0 0000 	rsb	r0, r0, #0
   1d976:	4770      	bx	lr
   1d978:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1d97c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1d980:	e047      	b.n	1da12 <strcmp+0x2aa>
   1d982:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1d986:	fa82 f54c 	uadd8	r5, r2, ip
   1d98a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1d98e:	faa5 f58c 	sel	r5, r5, ip
   1d992:	d10a      	bne.n	1d9aa <strcmp+0x242>
   1d994:	b965      	cbnz	r5, 1d9b0 <strcmp+0x248>
   1d996:	f851 3b04 	ldr.w	r3, [r1], #4
   1d99a:	ea84 0402 	eor.w	r4, r4, r2
   1d99e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1d9a2:	d10c      	bne.n	1d9be <strcmp+0x256>
   1d9a4:	f850 2b04 	ldr.w	r2, [r0], #4
   1d9a8:	e7eb      	b.n	1d982 <strcmp+0x21a>
   1d9aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1d9ae:	e030      	b.n	1da12 <strcmp+0x2aa>
   1d9b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1d9b4:	d128      	bne.n	1da08 <strcmp+0x2a0>
   1d9b6:	880b      	ldrh	r3, [r1, #0]
   1d9b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1d9bc:	e029      	b.n	1da12 <strcmp+0x2aa>
   1d9be:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1d9c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1d9c6:	e024      	b.n	1da12 <strcmp+0x2aa>
   1d9c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1d9cc:	fa82 f54c 	uadd8	r5, r2, ip
   1d9d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1d9d4:	faa5 f58c 	sel	r5, r5, ip
   1d9d8:	d10a      	bne.n	1d9f0 <strcmp+0x288>
   1d9da:	b965      	cbnz	r5, 1d9f6 <strcmp+0x28e>
   1d9dc:	f851 3b04 	ldr.w	r3, [r1], #4
   1d9e0:	ea84 0402 	eor.w	r4, r4, r2
   1d9e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1d9e8:	d109      	bne.n	1d9fe <strcmp+0x296>
   1d9ea:	f850 2b04 	ldr.w	r2, [r0], #4
   1d9ee:	e7eb      	b.n	1d9c8 <strcmp+0x260>
   1d9f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1d9f4:	e00d      	b.n	1da12 <strcmp+0x2aa>
   1d9f6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1d9fa:	d105      	bne.n	1da08 <strcmp+0x2a0>
   1d9fc:	680b      	ldr	r3, [r1, #0]
   1d9fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1da02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1da06:	e004      	b.n	1da12 <strcmp+0x2aa>
   1da08:	f04f 0000 	mov.w	r0, #0
   1da0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1da10:	4770      	bx	lr
   1da12:	ba12      	rev	r2, r2
   1da14:	ba1b      	rev	r3, r3
   1da16:	fa82 f44c 	uadd8	r4, r2, ip
   1da1a:	ea82 0403 	eor.w	r4, r2, r3
   1da1e:	faa4 f58c 	sel	r5, r4, ip
   1da22:	fab5 f485 	clz	r4, r5
   1da26:	fa02 f204 	lsl.w	r2, r2, r4
   1da2a:	fa03 f304 	lsl.w	r3, r3, r4
   1da2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1da32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1da36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1da3a:	4770      	bx	lr

0001da3c <strcpy>:
   1da3c:	ea80 0201 	eor.w	r2, r0, r1
   1da40:	4684      	mov	ip, r0
   1da42:	f012 0f03 	tst.w	r2, #3
   1da46:	d14f      	bne.n	1dae8 <strcpy+0xac>
   1da48:	f011 0f03 	tst.w	r1, #3
   1da4c:	d132      	bne.n	1dab4 <strcpy+0x78>
   1da4e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1da52:	f011 0f04 	tst.w	r1, #4
   1da56:	f851 3b04 	ldr.w	r3, [r1], #4
   1da5a:	d00b      	beq.n	1da74 <strcpy+0x38>
   1da5c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1da60:	439a      	bics	r2, r3
   1da62:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1da66:	bf04      	itt	eq
   1da68:	f84c 3b04 	streq.w	r3, [ip], #4
   1da6c:	f851 3b04 	ldreq.w	r3, [r1], #4
   1da70:	d116      	bne.n	1daa0 <strcpy+0x64>
   1da72:	bf00      	nop
   1da74:	f851 4b04 	ldr.w	r4, [r1], #4
   1da78:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1da7c:	439a      	bics	r2, r3
   1da7e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1da82:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1da86:	d10b      	bne.n	1daa0 <strcpy+0x64>
   1da88:	f84c 3b04 	str.w	r3, [ip], #4
   1da8c:	43a2      	bics	r2, r4
   1da8e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1da92:	bf04      	itt	eq
   1da94:	f851 3b04 	ldreq.w	r3, [r1], #4
   1da98:	f84c 4b04 	streq.w	r4, [ip], #4
   1da9c:	d0ea      	beq.n	1da74 <strcpy+0x38>
   1da9e:	4623      	mov	r3, r4
   1daa0:	f80c 3b01 	strb.w	r3, [ip], #1
   1daa4:	f013 0fff 	tst.w	r3, #255	; 0xff
   1daa8:	ea4f 2333 	mov.w	r3, r3, ror #8
   1daac:	d1f8      	bne.n	1daa0 <strcpy+0x64>
   1daae:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dab2:	4770      	bx	lr
   1dab4:	f011 0f01 	tst.w	r1, #1
   1dab8:	d006      	beq.n	1dac8 <strcpy+0x8c>
   1daba:	f811 2b01 	ldrb.w	r2, [r1], #1
   1dabe:	f80c 2b01 	strb.w	r2, [ip], #1
   1dac2:	2a00      	cmp	r2, #0
   1dac4:	bf08      	it	eq
   1dac6:	4770      	bxeq	lr
   1dac8:	f011 0f02 	tst.w	r1, #2
   1dacc:	d0bf      	beq.n	1da4e <strcpy+0x12>
   1dace:	f831 2b02 	ldrh.w	r2, [r1], #2
   1dad2:	f012 0fff 	tst.w	r2, #255	; 0xff
   1dad6:	bf16      	itet	ne
   1dad8:	f82c 2b02 	strhne.w	r2, [ip], #2
   1dadc:	f88c 2000 	strbeq.w	r2, [ip]
   1dae0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1dae4:	d1b3      	bne.n	1da4e <strcpy+0x12>
   1dae6:	4770      	bx	lr
   1dae8:	f811 2b01 	ldrb.w	r2, [r1], #1
   1daec:	f80c 2b01 	strb.w	r2, [ip], #1
   1daf0:	2a00      	cmp	r2, #0
   1daf2:	d1f9      	bne.n	1dae8 <strcpy+0xac>
   1daf4:	4770      	bx	lr
   1daf6:	bf00      	nop

0001daf8 <strncmp>:
   1daf8:	2a00      	cmp	r2, #0
   1dafa:	d041      	beq.n	1db80 <strncmp+0x88>
   1dafc:	ea40 0301 	orr.w	r3, r0, r1
   1db00:	f013 0303 	ands.w	r3, r3, #3
   1db04:	b4f0      	push	{r4, r5, r6, r7}
   1db06:	d125      	bne.n	1db54 <strncmp+0x5c>
   1db08:	2a03      	cmp	r2, #3
   1db0a:	d923      	bls.n	1db54 <strncmp+0x5c>
   1db0c:	6804      	ldr	r4, [r0, #0]
   1db0e:	680d      	ldr	r5, [r1, #0]
   1db10:	42ac      	cmp	r4, r5
   1db12:	d11f      	bne.n	1db54 <strncmp+0x5c>
   1db14:	3a04      	subs	r2, #4
   1db16:	d038      	beq.n	1db8a <strncmp+0x92>
   1db18:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1db1c:	ea25 0404 	bic.w	r4, r5, r4
   1db20:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1db24:	d12e      	bne.n	1db84 <strncmp+0x8c>
   1db26:	3004      	adds	r0, #4
   1db28:	3104      	adds	r1, #4
   1db2a:	e00f      	b.n	1db4c <strncmp+0x54>
   1db2c:	f850 3b04 	ldr.w	r3, [r0], #4
   1db30:	680e      	ldr	r6, [r1, #0]
   1db32:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1db36:	42b3      	cmp	r3, r6
   1db38:	ea24 0403 	bic.w	r4, r4, r3
   1db3c:	f101 0104 	add.w	r1, r1, #4
   1db40:	d126      	bne.n	1db90 <strncmp+0x98>
   1db42:	3a04      	subs	r2, #4
   1db44:	d021      	beq.n	1db8a <strncmp+0x92>
   1db46:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1db4a:	d11b      	bne.n	1db84 <strncmp+0x8c>
   1db4c:	2a03      	cmp	r2, #3
   1db4e:	4607      	mov	r7, r0
   1db50:	460d      	mov	r5, r1
   1db52:	d8eb      	bhi.n	1db2c <strncmp+0x34>
   1db54:	7805      	ldrb	r5, [r0, #0]
   1db56:	780c      	ldrb	r4, [r1, #0]
   1db58:	42ac      	cmp	r4, r5
   1db5a:	f102 33ff 	add.w	r3, r2, #4294967295
   1db5e:	d11a      	bne.n	1db96 <strncmp+0x9e>
   1db60:	b183      	cbz	r3, 1db84 <strncmp+0x8c>
   1db62:	b914      	cbnz	r4, 1db6a <strncmp+0x72>
   1db64:	e00e      	b.n	1db84 <strncmp+0x8c>
   1db66:	b16b      	cbz	r3, 1db84 <strncmp+0x8c>
   1db68:	b17a      	cbz	r2, 1db8a <strncmp+0x92>
   1db6a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1db6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1db72:	42a2      	cmp	r2, r4
   1db74:	f103 33ff 	add.w	r3, r3, #4294967295
   1db78:	d0f5      	beq.n	1db66 <strncmp+0x6e>
   1db7a:	1b10      	subs	r0, r2, r4
   1db7c:	bcf0      	pop	{r4, r5, r6, r7}
   1db7e:	4770      	bx	lr
   1db80:	4610      	mov	r0, r2
   1db82:	4770      	bx	lr
   1db84:	2000      	movs	r0, #0
   1db86:	bcf0      	pop	{r4, r5, r6, r7}
   1db88:	4770      	bx	lr
   1db8a:	4610      	mov	r0, r2
   1db8c:	bcf0      	pop	{r4, r5, r6, r7}
   1db8e:	4770      	bx	lr
   1db90:	4629      	mov	r1, r5
   1db92:	4638      	mov	r0, r7
   1db94:	e7de      	b.n	1db54 <strncmp+0x5c>
   1db96:	462a      	mov	r2, r5
   1db98:	e7ef      	b.n	1db7a <strncmp+0x82>
   1db9a:	bf00      	nop

0001db9c <_strtoul_l.isra.0>:
   1db9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dba0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1dba4:	460e      	mov	r6, r1
   1dba6:	4607      	mov	r7, r0
   1dba8:	4615      	mov	r5, r2
   1dbaa:	4698      	mov	r8, r3
   1dbac:	468a      	mov	sl, r1
   1dbae:	e000      	b.n	1dbb2 <_strtoul_l.isra.0+0x16>
   1dbb0:	46a2      	mov	sl, r4
   1dbb2:	4654      	mov	r4, sl
   1dbb4:	4648      	mov	r0, r9
   1dbb6:	f814 bb01 	ldrb.w	fp, [r4], #1
   1dbba:	f001 fd6b 	bl	1f694 <__locale_ctype_ptr_l>
   1dbbe:	4458      	add	r0, fp
   1dbc0:	7840      	ldrb	r0, [r0, #1]
   1dbc2:	f010 0008 	ands.w	r0, r0, #8
   1dbc6:	d1f3      	bne.n	1dbb0 <_strtoul_l.isra.0+0x14>
   1dbc8:	4659      	mov	r1, fp
   1dbca:	292d      	cmp	r1, #45	; 0x2d
   1dbcc:	d059      	beq.n	1dc82 <_strtoul_l.isra.0+0xe6>
   1dbce:	292b      	cmp	r1, #43	; 0x2b
   1dbd0:	bf04      	itt	eq
   1dbd2:	7821      	ldrbeq	r1, [r4, #0]
   1dbd4:	f10a 0402 	addeq.w	r4, sl, #2
   1dbd8:	f1b8 0f00 	cmp.w	r8, #0
   1dbdc:	d00c      	beq.n	1dbf8 <_strtoul_l.isra.0+0x5c>
   1dbde:	f1b8 0f10 	cmp.w	r8, #16
   1dbe2:	d053      	beq.n	1dc8c <_strtoul_l.isra.0+0xf0>
   1dbe4:	f04f 3cff 	mov.w	ip, #4294967295
   1dbe8:	fbbc fcf8 	udiv	ip, ip, r8
   1dbec:	fb08 fa0c 	mul.w	sl, r8, ip
   1dbf0:	ea6f 0a0a 	mvn.w	sl, sl
   1dbf4:	46c1      	mov	r9, r8
   1dbf6:	e008      	b.n	1dc0a <_strtoul_l.isra.0+0x6e>
   1dbf8:	2930      	cmp	r1, #48	; 0x30
   1dbfa:	d058      	beq.n	1dcae <_strtoul_l.isra.0+0x112>
   1dbfc:	f04f 080a 	mov.w	r8, #10
   1dc00:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 1dce0 <_strtoul_l.isra.0+0x144>
   1dc04:	46c1      	mov	r9, r8
   1dc06:	f04f 0a05 	mov.w	sl, #5
   1dc0a:	2300      	movs	r3, #0
   1dc0c:	469e      	mov	lr, r3
   1dc0e:	e005      	b.n	1dc1c <_strtoul_l.isra.0+0x80>
   1dc10:	d02a      	beq.n	1dc68 <_strtoul_l.isra.0+0xcc>
   1dc12:	fb09 2e0e 	mla	lr, r9, lr, r2
   1dc16:	2301      	movs	r3, #1
   1dc18:	f814 1b01 	ldrb.w	r1, [r4], #1
   1dc1c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1dc20:	2a09      	cmp	r2, #9
   1dc22:	d905      	bls.n	1dc30 <_strtoul_l.isra.0+0x94>
   1dc24:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1dc28:	2a19      	cmp	r2, #25
   1dc2a:	d80a      	bhi.n	1dc42 <_strtoul_l.isra.0+0xa6>
   1dc2c:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   1dc30:	4590      	cmp	r8, r2
   1dc32:	dd0e      	ble.n	1dc52 <_strtoul_l.isra.0+0xb6>
   1dc34:	2b00      	cmp	r3, #0
   1dc36:	db01      	blt.n	1dc3c <_strtoul_l.isra.0+0xa0>
   1dc38:	45e6      	cmp	lr, ip
   1dc3a:	d9e9      	bls.n	1dc10 <_strtoul_l.isra.0+0x74>
   1dc3c:	f04f 33ff 	mov.w	r3, #4294967295
   1dc40:	e7ea      	b.n	1dc18 <_strtoul_l.isra.0+0x7c>
   1dc42:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1dc46:	2a19      	cmp	r2, #25
   1dc48:	d803      	bhi.n	1dc52 <_strtoul_l.isra.0+0xb6>
   1dc4a:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   1dc4e:	4590      	cmp	r8, r2
   1dc50:	dcf0      	bgt.n	1dc34 <_strtoul_l.isra.0+0x98>
   1dc52:	2b00      	cmp	r3, #0
   1dc54:	db0d      	blt.n	1dc72 <_strtoul_l.isra.0+0xd6>
   1dc56:	b108      	cbz	r0, 1dc5c <_strtoul_l.isra.0+0xc0>
   1dc58:	f1ce 0e00 	rsb	lr, lr, #0
   1dc5c:	b10d      	cbz	r5, 1dc62 <_strtoul_l.isra.0+0xc6>
   1dc5e:	b973      	cbnz	r3, 1dc7e <_strtoul_l.isra.0+0xe2>
   1dc60:	602e      	str	r6, [r5, #0]
   1dc62:	4670      	mov	r0, lr
   1dc64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc68:	4552      	cmp	r2, sl
   1dc6a:	ddd2      	ble.n	1dc12 <_strtoul_l.isra.0+0x76>
   1dc6c:	f04f 33ff 	mov.w	r3, #4294967295
   1dc70:	e7d2      	b.n	1dc18 <_strtoul_l.isra.0+0x7c>
   1dc72:	2322      	movs	r3, #34	; 0x22
   1dc74:	603b      	str	r3, [r7, #0]
   1dc76:	f04f 3eff 	mov.w	lr, #4294967295
   1dc7a:	2d00      	cmp	r5, #0
   1dc7c:	d0f1      	beq.n	1dc62 <_strtoul_l.isra.0+0xc6>
   1dc7e:	1e66      	subs	r6, r4, #1
   1dc80:	e7ee      	b.n	1dc60 <_strtoul_l.isra.0+0xc4>
   1dc82:	7821      	ldrb	r1, [r4, #0]
   1dc84:	2001      	movs	r0, #1
   1dc86:	f10a 0402 	add.w	r4, sl, #2
   1dc8a:	e7a5      	b.n	1dbd8 <_strtoul_l.isra.0+0x3c>
   1dc8c:	2930      	cmp	r1, #48	; 0x30
   1dc8e:	d11b      	bne.n	1dcc8 <_strtoul_l.isra.0+0x12c>
   1dc90:	7823      	ldrb	r3, [r4, #0]
   1dc92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1dc96:	2b58      	cmp	r3, #88	; 0x58
   1dc98:	d11c      	bne.n	1dcd4 <_strtoul_l.isra.0+0x138>
   1dc9a:	f04f 0910 	mov.w	r9, #16
   1dc9e:	7861      	ldrb	r1, [r4, #1]
   1dca0:	46c8      	mov	r8, r9
   1dca2:	f04f 0a0f 	mov.w	sl, #15
   1dca6:	3402      	adds	r4, #2
   1dca8:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1dcac:	e7ad      	b.n	1dc0a <_strtoul_l.isra.0+0x6e>
   1dcae:	7823      	ldrb	r3, [r4, #0]
   1dcb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1dcb4:	2b58      	cmp	r3, #88	; 0x58
   1dcb6:	d0f0      	beq.n	1dc9a <_strtoul_l.isra.0+0xfe>
   1dcb8:	f04f 0808 	mov.w	r8, #8
   1dcbc:	46c1      	mov	r9, r8
   1dcbe:	f04f 0a07 	mov.w	sl, #7
   1dcc2:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   1dcc6:	e7a0      	b.n	1dc0a <_strtoul_l.isra.0+0x6e>
   1dcc8:	f04f 0a0f 	mov.w	sl, #15
   1dccc:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1dcd0:	46c1      	mov	r9, r8
   1dcd2:	e79a      	b.n	1dc0a <_strtoul_l.isra.0+0x6e>
   1dcd4:	46c1      	mov	r9, r8
   1dcd6:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1dcda:	f04f 0a0f 	mov.w	sl, #15
   1dcde:	e794      	b.n	1dc0a <_strtoul_l.isra.0+0x6e>
   1dce0:	19999999 	.word	0x19999999

0001dce4 <_strtoul_r>:
   1dce4:	b530      	push	{r4, r5, lr}
   1dce6:	4c06      	ldr	r4, [pc, #24]	; (1dd00 <_strtoul_r+0x1c>)
   1dce8:	4d06      	ldr	r5, [pc, #24]	; (1dd04 <_strtoul_r+0x20>)
   1dcea:	6824      	ldr	r4, [r4, #0]
   1dcec:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1dcee:	b083      	sub	sp, #12
   1dcf0:	2c00      	cmp	r4, #0
   1dcf2:	bf08      	it	eq
   1dcf4:	462c      	moveq	r4, r5
   1dcf6:	9400      	str	r4, [sp, #0]
   1dcf8:	f7ff ff50 	bl	1db9c <_strtoul_l.isra.0>
   1dcfc:	b003      	add	sp, #12
   1dcfe:	bd30      	pop	{r4, r5, pc}
   1dd00:	20000248 	.word	0x20000248
   1dd04:	20000ad8 	.word	0x20000ad8

0001dd08 <strtoul>:
   1dd08:	b530      	push	{r4, r5, lr}
   1dd0a:	4c08      	ldr	r4, [pc, #32]	; (1dd2c <strtoul+0x24>)
   1dd0c:	4b08      	ldr	r3, [pc, #32]	; (1dd30 <strtoul+0x28>)
   1dd0e:	6825      	ldr	r5, [r4, #0]
   1dd10:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   1dd12:	b083      	sub	sp, #12
   1dd14:	2c00      	cmp	r4, #0
   1dd16:	bf08      	it	eq
   1dd18:	461c      	moveq	r4, r3
   1dd1a:	9400      	str	r4, [sp, #0]
   1dd1c:	4613      	mov	r3, r2
   1dd1e:	460a      	mov	r2, r1
   1dd20:	4601      	mov	r1, r0
   1dd22:	4628      	mov	r0, r5
   1dd24:	f7ff ff3a 	bl	1db9c <_strtoul_l.isra.0>
   1dd28:	b003      	add	sp, #12
   1dd2a:	bd30      	pop	{r4, r5, pc}
   1dd2c:	20000248 	.word	0x20000248
   1dd30:	20000ad8 	.word	0x20000ad8

0001dd34 <__ssprint_r>:
   1dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd38:	6893      	ldr	r3, [r2, #8]
   1dd3a:	b083      	sub	sp, #12
   1dd3c:	4690      	mov	r8, r2
   1dd3e:	2b00      	cmp	r3, #0
   1dd40:	d070      	beq.n	1de24 <__ssprint_r+0xf0>
   1dd42:	4682      	mov	sl, r0
   1dd44:	460c      	mov	r4, r1
   1dd46:	6817      	ldr	r7, [r2, #0]
   1dd48:	688d      	ldr	r5, [r1, #8]
   1dd4a:	6808      	ldr	r0, [r1, #0]
   1dd4c:	e042      	b.n	1ddd4 <__ssprint_r+0xa0>
   1dd4e:	89a3      	ldrh	r3, [r4, #12]
   1dd50:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1dd54:	d02e      	beq.n	1ddb4 <__ssprint_r+0x80>
   1dd56:	6965      	ldr	r5, [r4, #20]
   1dd58:	6921      	ldr	r1, [r4, #16]
   1dd5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1dd5e:	eba0 0b01 	sub.w	fp, r0, r1
   1dd62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1dd66:	f10b 0001 	add.w	r0, fp, #1
   1dd6a:	106d      	asrs	r5, r5, #1
   1dd6c:	4430      	add	r0, r6
   1dd6e:	42a8      	cmp	r0, r5
   1dd70:	462a      	mov	r2, r5
   1dd72:	bf84      	itt	hi
   1dd74:	4605      	movhi	r5, r0
   1dd76:	462a      	movhi	r2, r5
   1dd78:	055b      	lsls	r3, r3, #21
   1dd7a:	d538      	bpl.n	1ddee <__ssprint_r+0xba>
   1dd7c:	4611      	mov	r1, r2
   1dd7e:	4650      	mov	r0, sl
   1dd80:	f7ff f96c 	bl	1d05c <_malloc_r>
   1dd84:	2800      	cmp	r0, #0
   1dd86:	d03c      	beq.n	1de02 <__ssprint_r+0xce>
   1dd88:	465a      	mov	r2, fp
   1dd8a:	6921      	ldr	r1, [r4, #16]
   1dd8c:	9001      	str	r0, [sp, #4]
   1dd8e:	f7fe fb89 	bl	1c4a4 <memcpy>
   1dd92:	89a2      	ldrh	r2, [r4, #12]
   1dd94:	9b01      	ldr	r3, [sp, #4]
   1dd96:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1dd9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1dd9e:	81a2      	strh	r2, [r4, #12]
   1dda0:	eba5 020b 	sub.w	r2, r5, fp
   1dda4:	eb03 000b 	add.w	r0, r3, fp
   1dda8:	6165      	str	r5, [r4, #20]
   1ddaa:	6123      	str	r3, [r4, #16]
   1ddac:	6020      	str	r0, [r4, #0]
   1ddae:	60a2      	str	r2, [r4, #8]
   1ddb0:	4635      	mov	r5, r6
   1ddb2:	46b3      	mov	fp, r6
   1ddb4:	465a      	mov	r2, fp
   1ddb6:	4649      	mov	r1, r9
   1ddb8:	f001 fcc2 	bl	1f740 <memmove>
   1ddbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1ddc0:	68a2      	ldr	r2, [r4, #8]
   1ddc2:	6820      	ldr	r0, [r4, #0]
   1ddc4:	1b55      	subs	r5, r2, r5
   1ddc6:	4458      	add	r0, fp
   1ddc8:	1b9e      	subs	r6, r3, r6
   1ddca:	60a5      	str	r5, [r4, #8]
   1ddcc:	6020      	str	r0, [r4, #0]
   1ddce:	f8c8 6008 	str.w	r6, [r8, #8]
   1ddd2:	b33e      	cbz	r6, 1de24 <__ssprint_r+0xf0>
   1ddd4:	687e      	ldr	r6, [r7, #4]
   1ddd6:	463b      	mov	r3, r7
   1ddd8:	3708      	adds	r7, #8
   1ddda:	2e00      	cmp	r6, #0
   1dddc:	d0fa      	beq.n	1ddd4 <__ssprint_r+0xa0>
   1ddde:	42ae      	cmp	r6, r5
   1dde0:	f8d3 9000 	ldr.w	r9, [r3]
   1dde4:	46ab      	mov	fp, r5
   1dde6:	d2b2      	bcs.n	1dd4e <__ssprint_r+0x1a>
   1dde8:	4635      	mov	r5, r6
   1ddea:	46b3      	mov	fp, r6
   1ddec:	e7e2      	b.n	1ddb4 <__ssprint_r+0x80>
   1ddee:	4650      	mov	r0, sl
   1ddf0:	f001 fd0a 	bl	1f808 <_realloc_r>
   1ddf4:	4603      	mov	r3, r0
   1ddf6:	2800      	cmp	r0, #0
   1ddf8:	d1d2      	bne.n	1dda0 <__ssprint_r+0x6c>
   1ddfa:	6921      	ldr	r1, [r4, #16]
   1ddfc:	4650      	mov	r0, sl
   1ddfe:	f001 fb47 	bl	1f490 <_free_r>
   1de02:	230c      	movs	r3, #12
   1de04:	f8ca 3000 	str.w	r3, [sl]
   1de08:	89a3      	ldrh	r3, [r4, #12]
   1de0a:	2200      	movs	r2, #0
   1de0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1de10:	f04f 30ff 	mov.w	r0, #4294967295
   1de14:	81a3      	strh	r3, [r4, #12]
   1de16:	f8c8 2008 	str.w	r2, [r8, #8]
   1de1a:	f8c8 2004 	str.w	r2, [r8, #4]
   1de1e:	b003      	add	sp, #12
   1de20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de24:	2000      	movs	r0, #0
   1de26:	f8c8 0004 	str.w	r0, [r8, #4]
   1de2a:	b003      	add	sp, #12
   1de2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001de30 <_svfiprintf_r>:
   1de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de34:	b0ad      	sub	sp, #180	; 0xb4
   1de36:	460c      	mov	r4, r1
   1de38:	9105      	str	r1, [sp, #20]
   1de3a:	8989      	ldrh	r1, [r1, #12]
   1de3c:	9307      	str	r3, [sp, #28]
   1de3e:	060d      	lsls	r5, r1, #24
   1de40:	900a      	str	r0, [sp, #40]	; 0x28
   1de42:	d503      	bpl.n	1de4c <_svfiprintf_r+0x1c>
   1de44:	6923      	ldr	r3, [r4, #16]
   1de46:	2b00      	cmp	r3, #0
   1de48:	f000 84d6 	beq.w	1e7f8 <_svfiprintf_r+0x9c8>
   1de4c:	2300      	movs	r3, #0
   1de4e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   1de52:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1de54:	930b      	str	r3, [sp, #44]	; 0x2c
   1de56:	4693      	mov	fp, r2
   1de58:	9311      	str	r3, [sp, #68]	; 0x44
   1de5a:	9310      	str	r3, [sp, #64]	; 0x40
   1de5c:	9302      	str	r3, [sp, #8]
   1de5e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   1de62:	46d1      	mov	r9, sl
   1de64:	f89b 3000 	ldrb.w	r3, [fp]
   1de68:	465c      	mov	r4, fp
   1de6a:	b1eb      	cbz	r3, 1dea8 <_svfiprintf_r+0x78>
   1de6c:	2b25      	cmp	r3, #37	; 0x25
   1de6e:	d102      	bne.n	1de76 <_svfiprintf_r+0x46>
   1de70:	e01a      	b.n	1dea8 <_svfiprintf_r+0x78>
   1de72:	2b25      	cmp	r3, #37	; 0x25
   1de74:	d003      	beq.n	1de7e <_svfiprintf_r+0x4e>
   1de76:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1de7a:	2b00      	cmp	r3, #0
   1de7c:	d1f9      	bne.n	1de72 <_svfiprintf_r+0x42>
   1de7e:	eba4 050b 	sub.w	r5, r4, fp
   1de82:	b18d      	cbz	r5, 1dea8 <_svfiprintf_r+0x78>
   1de84:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1de86:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1de88:	f8c9 b000 	str.w	fp, [r9]
   1de8c:	3301      	adds	r3, #1
   1de8e:	442a      	add	r2, r5
   1de90:	2b07      	cmp	r3, #7
   1de92:	f8c9 5004 	str.w	r5, [r9, #4]
   1de96:	9211      	str	r2, [sp, #68]	; 0x44
   1de98:	9310      	str	r3, [sp, #64]	; 0x40
   1de9a:	f300 83c3 	bgt.w	1e624 <_svfiprintf_r+0x7f4>
   1de9e:	f109 0908 	add.w	r9, r9, #8
   1dea2:	9b02      	ldr	r3, [sp, #8]
   1dea4:	442b      	add	r3, r5
   1dea6:	9302      	str	r3, [sp, #8]
   1dea8:	7823      	ldrb	r3, [r4, #0]
   1deaa:	2b00      	cmp	r3, #0
   1deac:	f000 834b 	beq.w	1e546 <_svfiprintf_r+0x716>
   1deb0:	2000      	movs	r0, #0
   1deb2:	f04f 0300 	mov.w	r3, #0
   1deb6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1deba:	f104 0b01 	add.w	fp, r4, #1
   1debe:	7862      	ldrb	r2, [r4, #1]
   1dec0:	4605      	mov	r5, r0
   1dec2:	4603      	mov	r3, r0
   1dec4:	f04f 38ff 	mov.w	r8, #4294967295
   1dec8:	4604      	mov	r4, r0
   1deca:	f10b 0b01 	add.w	fp, fp, #1
   1dece:	f1a2 0120 	sub.w	r1, r2, #32
   1ded2:	2958      	cmp	r1, #88	; 0x58
   1ded4:	f200 826b 	bhi.w	1e3ae <_svfiprintf_r+0x57e>
   1ded8:	e8df f011 	tbh	[pc, r1, lsl #1]
   1dedc:	026900bd 	.word	0x026900bd
   1dee0:	00b80269 	.word	0x00b80269
   1dee4:	02690269 	.word	0x02690269
   1dee8:	02690269 	.word	0x02690269
   1deec:	02690269 	.word	0x02690269
   1def0:	00b30059 	.word	0x00b30059
   1def4:	00630269 	.word	0x00630269
   1def8:	026901c0 	.word	0x026901c0
   1defc:	01ad01bb 	.word	0x01ad01bb
   1df00:	01ad01ad 	.word	0x01ad01ad
   1df04:	01ad01ad 	.word	0x01ad01ad
   1df08:	01ad01ad 	.word	0x01ad01ad
   1df0c:	01ad01ad 	.word	0x01ad01ad
   1df10:	02690269 	.word	0x02690269
   1df14:	02690269 	.word	0x02690269
   1df18:	02690269 	.word	0x02690269
   1df1c:	02690269 	.word	0x02690269
   1df20:	02690269 	.word	0x02690269
   1df24:	0269015f 	.word	0x0269015f
   1df28:	02690269 	.word	0x02690269
   1df2c:	02690269 	.word	0x02690269
   1df30:	02690269 	.word	0x02690269
   1df34:	02690269 	.word	0x02690269
   1df38:	014d0269 	.word	0x014d0269
   1df3c:	02690269 	.word	0x02690269
   1df40:	02690269 	.word	0x02690269
   1df44:	013c0269 	.word	0x013c0269
   1df48:	02690269 	.word	0x02690269
   1df4c:	02690125 	.word	0x02690125
   1df50:	02690269 	.word	0x02690269
   1df54:	02690269 	.word	0x02690269
   1df58:	02690269 	.word	0x02690269
   1df5c:	02690269 	.word	0x02690269
   1df60:	00c50269 	.word	0x00c50269
   1df64:	02690200 	.word	0x02690200
   1df68:	02690269 	.word	0x02690269
   1df6c:	020001fb 	.word	0x020001fb
   1df70:	02690269 	.word	0x02690269
   1df74:	026901ee 	.word	0x026901ee
   1df78:	007a01da 	.word	0x007a01da
   1df7c:	02310236 	.word	0x02310236
   1df80:	020e0269 	.word	0x020e0269
   1df84:	00680269 	.word	0x00680269
   1df88:	02690269 	.word	0x02690269
   1df8c:	008f      	.short	0x008f
   1df8e:	9907      	ldr	r1, [sp, #28]
   1df90:	680c      	ldr	r4, [r1, #0]
   1df92:	460a      	mov	r2, r1
   1df94:	2c00      	cmp	r4, #0
   1df96:	f102 0204 	add.w	r2, r2, #4
   1df9a:	f280 83c9 	bge.w	1e730 <_svfiprintf_r+0x900>
   1df9e:	4264      	negs	r4, r4
   1dfa0:	9207      	str	r2, [sp, #28]
   1dfa2:	f043 0304 	orr.w	r3, r3, #4
   1dfa6:	f89b 2000 	ldrb.w	r2, [fp]
   1dfaa:	e78e      	b.n	1deca <_svfiprintf_r+0x9a>
   1dfac:	9406      	str	r4, [sp, #24]
   1dfae:	069c      	lsls	r4, r3, #26
   1dfb0:	f100 80d6 	bmi.w	1e160 <_svfiprintf_r+0x330>
   1dfb4:	9907      	ldr	r1, [sp, #28]
   1dfb6:	06d8      	lsls	r0, r3, #27
   1dfb8:	460a      	mov	r2, r1
   1dfba:	f100 820a 	bmi.w	1e3d2 <_svfiprintf_r+0x5a2>
   1dfbe:	065e      	lsls	r6, r3, #25
   1dfc0:	f140 8207 	bpl.w	1e3d2 <_svfiprintf_r+0x5a2>
   1dfc4:	880c      	ldrh	r4, [r1, #0]
   1dfc6:	3104      	adds	r1, #4
   1dfc8:	2500      	movs	r5, #0
   1dfca:	2201      	movs	r2, #1
   1dfcc:	9107      	str	r1, [sp, #28]
   1dfce:	e1cc      	b.n	1e36a <_svfiprintf_r+0x53a>
   1dfd0:	f013 0220 	ands.w	r2, r3, #32
   1dfd4:	9406      	str	r4, [sp, #24]
   1dfd6:	f040 80d5 	bne.w	1e184 <_svfiprintf_r+0x354>
   1dfda:	f013 0110 	ands.w	r1, r3, #16
   1dfde:	f040 81fe 	bne.w	1e3de <_svfiprintf_r+0x5ae>
   1dfe2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   1dfe6:	f000 81fa 	beq.w	1e3de <_svfiprintf_r+0x5ae>
   1dfea:	9807      	ldr	r0, [sp, #28]
   1dfec:	460a      	mov	r2, r1
   1dfee:	4601      	mov	r1, r0
   1dff0:	3104      	adds	r1, #4
   1dff2:	8804      	ldrh	r4, [r0, #0]
   1dff4:	9107      	str	r1, [sp, #28]
   1dff6:	2500      	movs	r5, #0
   1dff8:	e1b7      	b.n	1e36a <_svfiprintf_r+0x53a>
   1dffa:	9406      	str	r4, [sp, #24]
   1dffc:	2800      	cmp	r0, #0
   1dffe:	f040 8431 	bne.w	1e864 <_svfiprintf_r+0xa34>
   1e002:	49ba      	ldr	r1, [pc, #744]	; (1e2ec <_svfiprintf_r+0x4bc>)
   1e004:	910b      	str	r1, [sp, #44]	; 0x2c
   1e006:	069d      	lsls	r5, r3, #26
   1e008:	f100 8096 	bmi.w	1e138 <_svfiprintf_r+0x308>
   1e00c:	9807      	ldr	r0, [sp, #28]
   1e00e:	06dc      	lsls	r4, r3, #27
   1e010:	4601      	mov	r1, r0
   1e012:	d402      	bmi.n	1e01a <_svfiprintf_r+0x1ea>
   1e014:	0658      	lsls	r0, r3, #25
   1e016:	f100 83a9 	bmi.w	1e76c <_svfiprintf_r+0x93c>
   1e01a:	680c      	ldr	r4, [r1, #0]
   1e01c:	3104      	adds	r1, #4
   1e01e:	9107      	str	r1, [sp, #28]
   1e020:	2500      	movs	r5, #0
   1e022:	07d9      	lsls	r1, r3, #31
   1e024:	f140 8094 	bpl.w	1e150 <_svfiprintf_r+0x320>
   1e028:	ea54 0105 	orrs.w	r1, r4, r5
   1e02c:	f000 8090 	beq.w	1e150 <_svfiprintf_r+0x320>
   1e030:	2130      	movs	r1, #48	; 0x30
   1e032:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1e036:	f043 0302 	orr.w	r3, r3, #2
   1e03a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1e03e:	2202      	movs	r2, #2
   1e040:	e193      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e042:	f89b 2000 	ldrb.w	r2, [fp]
   1e046:	2001      	movs	r0, #1
   1e048:	252b      	movs	r5, #43	; 0x2b
   1e04a:	e73e      	b.n	1deca <_svfiprintf_r+0x9a>
   1e04c:	f043 0301 	orr.w	r3, r3, #1
   1e050:	f89b 2000 	ldrb.w	r2, [fp]
   1e054:	e739      	b.n	1deca <_svfiprintf_r+0x9a>
   1e056:	f89b 2000 	ldrb.w	r2, [fp]
   1e05a:	2d00      	cmp	r5, #0
   1e05c:	f47f af35 	bne.w	1deca <_svfiprintf_r+0x9a>
   1e060:	2001      	movs	r0, #1
   1e062:	2520      	movs	r5, #32
   1e064:	e731      	b.n	1deca <_svfiprintf_r+0x9a>
   1e066:	9907      	ldr	r1, [sp, #28]
   1e068:	9406      	str	r4, [sp, #24]
   1e06a:	680a      	ldr	r2, [r1, #0]
   1e06c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1e070:	f04f 0000 	mov.w	r0, #0
   1e074:	460a      	mov	r2, r1
   1e076:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1e07a:	3204      	adds	r2, #4
   1e07c:	2001      	movs	r0, #1
   1e07e:	9000      	str	r0, [sp, #0]
   1e080:	9207      	str	r2, [sp, #28]
   1e082:	9004      	str	r0, [sp, #16]
   1e084:	ae12      	add	r6, sp, #72	; 0x48
   1e086:	9301      	str	r3, [sp, #4]
   1e088:	f04f 0800 	mov.w	r8, #0
   1e08c:	9b01      	ldr	r3, [sp, #4]
   1e08e:	f013 0302 	ands.w	r3, r3, #2
   1e092:	9308      	str	r3, [sp, #32]
   1e094:	d002      	beq.n	1e09c <_svfiprintf_r+0x26c>
   1e096:	9b00      	ldr	r3, [sp, #0]
   1e098:	3302      	adds	r3, #2
   1e09a:	9300      	str	r3, [sp, #0]
   1e09c:	9b01      	ldr	r3, [sp, #4]
   1e09e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   1e0a2:	9309      	str	r3, [sp, #36]	; 0x24
   1e0a4:	f040 81a2 	bne.w	1e3ec <_svfiprintf_r+0x5bc>
   1e0a8:	9b06      	ldr	r3, [sp, #24]
   1e0aa:	9a00      	ldr	r2, [sp, #0]
   1e0ac:	1a9c      	subs	r4, r3, r2
   1e0ae:	2c00      	cmp	r4, #0
   1e0b0:	f340 819c 	ble.w	1e3ec <_svfiprintf_r+0x5bc>
   1e0b4:	2c10      	cmp	r4, #16
   1e0b6:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e0b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e0ba:	4d8d      	ldr	r5, [pc, #564]	; (1e2f0 <_svfiprintf_r+0x4c0>)
   1e0bc:	dd25      	ble.n	1e10a <_svfiprintf_r+0x2da>
   1e0be:	4648      	mov	r0, r9
   1e0c0:	2310      	movs	r3, #16
   1e0c2:	46c1      	mov	r9, r8
   1e0c4:	46b0      	mov	r8, r6
   1e0c6:	9e05      	ldr	r6, [sp, #20]
   1e0c8:	e004      	b.n	1e0d4 <_svfiprintf_r+0x2a4>
   1e0ca:	3c10      	subs	r4, #16
   1e0cc:	2c10      	cmp	r4, #16
   1e0ce:	f100 0008 	add.w	r0, r0, #8
   1e0d2:	dd17      	ble.n	1e104 <_svfiprintf_r+0x2d4>
   1e0d4:	3201      	adds	r2, #1
   1e0d6:	3110      	adds	r1, #16
   1e0d8:	2a07      	cmp	r2, #7
   1e0da:	9111      	str	r1, [sp, #68]	; 0x44
   1e0dc:	9210      	str	r2, [sp, #64]	; 0x40
   1e0de:	6005      	str	r5, [r0, #0]
   1e0e0:	6043      	str	r3, [r0, #4]
   1e0e2:	ddf2      	ble.n	1e0ca <_svfiprintf_r+0x29a>
   1e0e4:	aa0f      	add	r2, sp, #60	; 0x3c
   1e0e6:	4631      	mov	r1, r6
   1e0e8:	4638      	mov	r0, r7
   1e0ea:	9303      	str	r3, [sp, #12]
   1e0ec:	f7ff fe22 	bl	1dd34 <__ssprint_r>
   1e0f0:	2800      	cmp	r0, #0
   1e0f2:	f040 822f 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e0f6:	3c10      	subs	r4, #16
   1e0f8:	2c10      	cmp	r4, #16
   1e0fa:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e0fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e0fe:	9b03      	ldr	r3, [sp, #12]
   1e100:	4650      	mov	r0, sl
   1e102:	dce7      	bgt.n	1e0d4 <_svfiprintf_r+0x2a4>
   1e104:	4646      	mov	r6, r8
   1e106:	46c8      	mov	r8, r9
   1e108:	4681      	mov	r9, r0
   1e10a:	1c53      	adds	r3, r2, #1
   1e10c:	4421      	add	r1, r4
   1e10e:	2b07      	cmp	r3, #7
   1e110:	9111      	str	r1, [sp, #68]	; 0x44
   1e112:	9310      	str	r3, [sp, #64]	; 0x40
   1e114:	f8c9 5000 	str.w	r5, [r9]
   1e118:	f8c9 4004 	str.w	r4, [r9, #4]
   1e11c:	f300 82f2 	bgt.w	1e704 <_svfiprintf_r+0x8d4>
   1e120:	f109 0908 	add.w	r9, r9, #8
   1e124:	e164      	b.n	1e3f0 <_svfiprintf_r+0x5c0>
   1e126:	9406      	str	r4, [sp, #24]
   1e128:	2800      	cmp	r0, #0
   1e12a:	f040 83a5 	bne.w	1e878 <_svfiprintf_r+0xa48>
   1e12e:	4971      	ldr	r1, [pc, #452]	; (1e2f4 <_svfiprintf_r+0x4c4>)
   1e130:	910b      	str	r1, [sp, #44]	; 0x2c
   1e132:	069d      	lsls	r5, r3, #26
   1e134:	f57f af6a 	bpl.w	1e00c <_svfiprintf_r+0x1dc>
   1e138:	9c07      	ldr	r4, [sp, #28]
   1e13a:	3407      	adds	r4, #7
   1e13c:	f024 0107 	bic.w	r1, r4, #7
   1e140:	f101 0008 	add.w	r0, r1, #8
   1e144:	e9d1 4500 	ldrd	r4, r5, [r1]
   1e148:	07d9      	lsls	r1, r3, #31
   1e14a:	9007      	str	r0, [sp, #28]
   1e14c:	f53f af6c 	bmi.w	1e028 <_svfiprintf_r+0x1f8>
   1e150:	2202      	movs	r2, #2
   1e152:	e10a      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e154:	f043 0310 	orr.w	r3, r3, #16
   1e158:	9406      	str	r4, [sp, #24]
   1e15a:	069c      	lsls	r4, r3, #26
   1e15c:	f57f af2a 	bpl.w	1dfb4 <_svfiprintf_r+0x184>
   1e160:	9c07      	ldr	r4, [sp, #28]
   1e162:	3407      	adds	r4, #7
   1e164:	f024 0207 	bic.w	r2, r4, #7
   1e168:	f102 0108 	add.w	r1, r2, #8
   1e16c:	e9d2 4500 	ldrd	r4, r5, [r2]
   1e170:	9107      	str	r1, [sp, #28]
   1e172:	2201      	movs	r2, #1
   1e174:	e0f9      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e176:	f043 0310 	orr.w	r3, r3, #16
   1e17a:	f013 0220 	ands.w	r2, r3, #32
   1e17e:	9406      	str	r4, [sp, #24]
   1e180:	f43f af2b 	beq.w	1dfda <_svfiprintf_r+0x1aa>
   1e184:	9c07      	ldr	r4, [sp, #28]
   1e186:	3407      	adds	r4, #7
   1e188:	f024 0207 	bic.w	r2, r4, #7
   1e18c:	f102 0108 	add.w	r1, r2, #8
   1e190:	e9d2 4500 	ldrd	r4, r5, [r2]
   1e194:	9107      	str	r1, [sp, #28]
   1e196:	2200      	movs	r2, #0
   1e198:	e0e7      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e19a:	9406      	str	r4, [sp, #24]
   1e19c:	2800      	cmp	r0, #0
   1e19e:	f040 8365 	bne.w	1e86c <_svfiprintf_r+0xa3c>
   1e1a2:	f043 0310 	orr.w	r3, r3, #16
   1e1a6:	069c      	lsls	r4, r3, #26
   1e1a8:	f100 82fa 	bmi.w	1e7a0 <_svfiprintf_r+0x970>
   1e1ac:	06d8      	lsls	r0, r3, #27
   1e1ae:	d402      	bmi.n	1e1b6 <_svfiprintf_r+0x386>
   1e1b0:	0659      	lsls	r1, r3, #25
   1e1b2:	f100 82c4 	bmi.w	1e73e <_svfiprintf_r+0x90e>
   1e1b6:	9907      	ldr	r1, [sp, #28]
   1e1b8:	680c      	ldr	r4, [r1, #0]
   1e1ba:	460a      	mov	r2, r1
   1e1bc:	17e5      	asrs	r5, r4, #31
   1e1be:	3204      	adds	r2, #4
   1e1c0:	9207      	str	r2, [sp, #28]
   1e1c2:	4620      	mov	r0, r4
   1e1c4:	4629      	mov	r1, r5
   1e1c6:	2800      	cmp	r0, #0
   1e1c8:	f171 0200 	sbcs.w	r2, r1, #0
   1e1cc:	f2c0 82c5 	blt.w	1e75a <_svfiprintf_r+0x92a>
   1e1d0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1e1d4:	9203      	str	r2, [sp, #12]
   1e1d6:	f1b8 3fff 	cmp.w	r8, #4294967295
   1e1da:	f04f 0201 	mov.w	r2, #1
   1e1de:	f040 80ce 	bne.w	1e37e <_svfiprintf_r+0x54e>
   1e1e2:	ea54 0105 	orrs.w	r1, r4, r5
   1e1e6:	f000 820d 	beq.w	1e604 <_svfiprintf_r+0x7d4>
   1e1ea:	9301      	str	r3, [sp, #4]
   1e1ec:	2a01      	cmp	r2, #1
   1e1ee:	f000 826b 	beq.w	1e6c8 <_svfiprintf_r+0x898>
   1e1f2:	2a02      	cmp	r2, #2
   1e1f4:	f040 822d 	bne.w	1e652 <_svfiprintf_r+0x822>
   1e1f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1e1fa:	4656      	mov	r6, sl
   1e1fc:	0923      	lsrs	r3, r4, #4
   1e1fe:	f004 010f 	and.w	r1, r4, #15
   1e202:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1e206:	092a      	lsrs	r2, r5, #4
   1e208:	461c      	mov	r4, r3
   1e20a:	4615      	mov	r5, r2
   1e20c:	5c43      	ldrb	r3, [r0, r1]
   1e20e:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1e212:	ea54 0305 	orrs.w	r3, r4, r5
   1e216:	d1f1      	bne.n	1e1fc <_svfiprintf_r+0x3cc>
   1e218:	ebaa 0306 	sub.w	r3, sl, r6
   1e21c:	9304      	str	r3, [sp, #16]
   1e21e:	9b04      	ldr	r3, [sp, #16]
   1e220:	9a03      	ldr	r2, [sp, #12]
   1e222:	4543      	cmp	r3, r8
   1e224:	bfb8      	it	lt
   1e226:	4643      	movlt	r3, r8
   1e228:	9300      	str	r3, [sp, #0]
   1e22a:	2a00      	cmp	r2, #0
   1e22c:	f43f af2e 	beq.w	1e08c <_svfiprintf_r+0x25c>
   1e230:	3301      	adds	r3, #1
   1e232:	9300      	str	r3, [sp, #0]
   1e234:	e72a      	b.n	1e08c <_svfiprintf_r+0x25c>
   1e236:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e23a:	2400      	movs	r4, #0
   1e23c:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1e240:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1e244:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   1e248:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e24c:	2909      	cmp	r1, #9
   1e24e:	d9f5      	bls.n	1e23c <_svfiprintf_r+0x40c>
   1e250:	e63d      	b.n	1dece <_svfiprintf_r+0x9e>
   1e252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e256:	f89b 2000 	ldrb.w	r2, [fp]
   1e25a:	e636      	b.n	1deca <_svfiprintf_r+0x9a>
   1e25c:	f89b 2000 	ldrb.w	r2, [fp]
   1e260:	2a2a      	cmp	r2, #42	; 0x2a
   1e262:	f10b 0601 	add.w	r6, fp, #1
   1e266:	f000 82e7 	beq.w	1e838 <_svfiprintf_r+0xa08>
   1e26a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e26e:	2909      	cmp	r1, #9
   1e270:	46b3      	mov	fp, r6
   1e272:	f04f 0800 	mov.w	r8, #0
   1e276:	f63f ae2a 	bhi.w	1dece <_svfiprintf_r+0x9e>
   1e27a:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1e27e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1e282:	eb01 0848 	add.w	r8, r1, r8, lsl #1
   1e286:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e28a:	2909      	cmp	r1, #9
   1e28c:	d9f5      	bls.n	1e27a <_svfiprintf_r+0x44a>
   1e28e:	e61e      	b.n	1dece <_svfiprintf_r+0x9e>
   1e290:	2800      	cmp	r0, #0
   1e292:	f040 82dd 	bne.w	1e850 <_svfiprintf_r+0xa20>
   1e296:	069a      	lsls	r2, r3, #26
   1e298:	f100 8276 	bmi.w	1e788 <_svfiprintf_r+0x958>
   1e29c:	06de      	lsls	r6, r3, #27
   1e29e:	f100 8297 	bmi.w	1e7d0 <_svfiprintf_r+0x9a0>
   1e2a2:	065d      	lsls	r5, r3, #25
   1e2a4:	f140 8294 	bpl.w	1e7d0 <_svfiprintf_r+0x9a0>
   1e2a8:	9a07      	ldr	r2, [sp, #28]
   1e2aa:	6813      	ldr	r3, [r2, #0]
   1e2ac:	3204      	adds	r2, #4
   1e2ae:	9207      	str	r2, [sp, #28]
   1e2b0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1e2b4:	801a      	strh	r2, [r3, #0]
   1e2b6:	e5d5      	b.n	1de64 <_svfiprintf_r+0x34>
   1e2b8:	f89b 2000 	ldrb.w	r2, [fp]
   1e2bc:	2a6c      	cmp	r2, #108	; 0x6c
   1e2be:	bf03      	ittte	eq
   1e2c0:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
   1e2c4:	f043 0320 	orreq.w	r3, r3, #32
   1e2c8:	f10b 0b01 	addeq.w	fp, fp, #1
   1e2cc:	f043 0310 	orrne.w	r3, r3, #16
   1e2d0:	e5fb      	b.n	1deca <_svfiprintf_r+0x9a>
   1e2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e2d6:	f89b 2000 	ldrb.w	r2, [fp]
   1e2da:	e5f6      	b.n	1deca <_svfiprintf_r+0x9a>
   1e2dc:	9406      	str	r4, [sp, #24]
   1e2de:	2800      	cmp	r0, #0
   1e2e0:	f43f af61 	beq.w	1e1a6 <_svfiprintf_r+0x376>
   1e2e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e2e8:	e75d      	b.n	1e1a6 <_svfiprintf_r+0x376>
   1e2ea:	bf00      	nop
   1e2ec:	00022540 	.word	0x00022540
   1e2f0:	0002255c 	.word	0x0002255c
   1e2f4:	0002252c 	.word	0x0002252c
   1e2f8:	9907      	ldr	r1, [sp, #28]
   1e2fa:	9406      	str	r4, [sp, #24]
   1e2fc:	680e      	ldr	r6, [r1, #0]
   1e2fe:	f04f 0200 	mov.w	r2, #0
   1e302:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1e306:	1d0c      	adds	r4, r1, #4
   1e308:	2e00      	cmp	r6, #0
   1e30a:	f000 8283 	beq.w	1e814 <_svfiprintf_r+0x9e4>
   1e30e:	f1b8 3fff 	cmp.w	r8, #4294967295
   1e312:	f000 8265 	beq.w	1e7e0 <_svfiprintf_r+0x9b0>
   1e316:	4642      	mov	r2, r8
   1e318:	2100      	movs	r1, #0
   1e31a:	4630      	mov	r0, r6
   1e31c:	9300      	str	r3, [sp, #0]
   1e31e:	f7ff f94f 	bl	1d5c0 <memchr>
   1e322:	9b00      	ldr	r3, [sp, #0]
   1e324:	2800      	cmp	r0, #0
   1e326:	f000 827e 	beq.w	1e826 <_svfiprintf_r+0x9f6>
   1e32a:	1b82      	subs	r2, r0, r6
   1e32c:	9301      	str	r3, [sp, #4]
   1e32e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1e332:	9204      	str	r2, [sp, #16]
   1e334:	9407      	str	r4, [sp, #28]
   1e336:	9303      	str	r3, [sp, #12]
   1e338:	f04f 0800 	mov.w	r8, #0
   1e33c:	e76f      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e33e:	f043 0320 	orr.w	r3, r3, #32
   1e342:	f89b 2000 	ldrb.w	r2, [fp]
   1e346:	e5c0      	b.n	1deca <_svfiprintf_r+0x9a>
   1e348:	9807      	ldr	r0, [sp, #28]
   1e34a:	4ab3      	ldr	r2, [pc, #716]	; (1e618 <_svfiprintf_r+0x7e8>)
   1e34c:	9406      	str	r4, [sp, #24]
   1e34e:	920b      	str	r2, [sp, #44]	; 0x2c
   1e350:	6804      	ldr	r4, [r0, #0]
   1e352:	2278      	movs	r2, #120	; 0x78
   1e354:	2130      	movs	r1, #48	; 0x30
   1e356:	3004      	adds	r0, #4
   1e358:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1e35c:	f043 0302 	orr.w	r3, r3, #2
   1e360:	9007      	str	r0, [sp, #28]
   1e362:	2500      	movs	r5, #0
   1e364:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1e368:	2202      	movs	r2, #2
   1e36a:	f04f 0100 	mov.w	r1, #0
   1e36e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   1e372:	2100      	movs	r1, #0
   1e374:	9103      	str	r1, [sp, #12]
   1e376:	f1b8 3fff 	cmp.w	r8, #4294967295
   1e37a:	f43f af32 	beq.w	1e1e2 <_svfiprintf_r+0x3b2>
   1e37e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   1e382:	9101      	str	r1, [sp, #4]
   1e384:	ea54 0105 	orrs.w	r1, r4, r5
   1e388:	f47f af30 	bne.w	1e1ec <_svfiprintf_r+0x3bc>
   1e38c:	f1b8 0f00 	cmp.w	r8, #0
   1e390:	f040 8137 	bne.w	1e602 <_svfiprintf_r+0x7d2>
   1e394:	2a00      	cmp	r2, #0
   1e396:	f040 81b1 	bne.w	1e6fc <_svfiprintf_r+0x8cc>
   1e39a:	f013 0301 	ands.w	r3, r3, #1
   1e39e:	9304      	str	r3, [sp, #16]
   1e3a0:	f000 81cb 	beq.w	1e73a <_svfiprintf_r+0x90a>
   1e3a4:	ae2c      	add	r6, sp, #176	; 0xb0
   1e3a6:	2330      	movs	r3, #48	; 0x30
   1e3a8:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1e3ac:	e737      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e3ae:	9406      	str	r4, [sp, #24]
   1e3b0:	2800      	cmp	r0, #0
   1e3b2:	f040 825e 	bne.w	1e872 <_svfiprintf_r+0xa42>
   1e3b6:	2a00      	cmp	r2, #0
   1e3b8:	f000 80c5 	beq.w	1e546 <_svfiprintf_r+0x716>
   1e3bc:	2101      	movs	r1, #1
   1e3be:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1e3c2:	f04f 0200 	mov.w	r2, #0
   1e3c6:	9100      	str	r1, [sp, #0]
   1e3c8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1e3cc:	9104      	str	r1, [sp, #16]
   1e3ce:	ae12      	add	r6, sp, #72	; 0x48
   1e3d0:	e659      	b.n	1e086 <_svfiprintf_r+0x256>
   1e3d2:	3104      	adds	r1, #4
   1e3d4:	6814      	ldr	r4, [r2, #0]
   1e3d6:	9107      	str	r1, [sp, #28]
   1e3d8:	2201      	movs	r2, #1
   1e3da:	2500      	movs	r5, #0
   1e3dc:	e7c5      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e3de:	9807      	ldr	r0, [sp, #28]
   1e3e0:	4601      	mov	r1, r0
   1e3e2:	3104      	adds	r1, #4
   1e3e4:	6804      	ldr	r4, [r0, #0]
   1e3e6:	9107      	str	r1, [sp, #28]
   1e3e8:	2500      	movs	r5, #0
   1e3ea:	e7be      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e3ec:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e3ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e3f0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1e3f4:	b16a      	cbz	r2, 1e412 <_svfiprintf_r+0x5e2>
   1e3f6:	3301      	adds	r3, #1
   1e3f8:	3101      	adds	r1, #1
   1e3fa:	f10d 0037 	add.w	r0, sp, #55	; 0x37
   1e3fe:	2201      	movs	r2, #1
   1e400:	2b07      	cmp	r3, #7
   1e402:	9111      	str	r1, [sp, #68]	; 0x44
   1e404:	9310      	str	r3, [sp, #64]	; 0x40
   1e406:	e889 0005 	stmia.w	r9, {r0, r2}
   1e40a:	f300 8145 	bgt.w	1e698 <_svfiprintf_r+0x868>
   1e40e:	f109 0908 	add.w	r9, r9, #8
   1e412:	9a08      	ldr	r2, [sp, #32]
   1e414:	b162      	cbz	r2, 1e430 <_svfiprintf_r+0x600>
   1e416:	3301      	adds	r3, #1
   1e418:	3102      	adds	r1, #2
   1e41a:	a80e      	add	r0, sp, #56	; 0x38
   1e41c:	2202      	movs	r2, #2
   1e41e:	2b07      	cmp	r3, #7
   1e420:	9111      	str	r1, [sp, #68]	; 0x44
   1e422:	9310      	str	r3, [sp, #64]	; 0x40
   1e424:	e889 0005 	stmia.w	r9, {r0, r2}
   1e428:	f300 8142 	bgt.w	1e6b0 <_svfiprintf_r+0x880>
   1e42c:	f109 0908 	add.w	r9, r9, #8
   1e430:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e432:	2a80      	cmp	r2, #128	; 0x80
   1e434:	f000 809b 	beq.w	1e56e <_svfiprintf_r+0x73e>
   1e438:	9a04      	ldr	r2, [sp, #16]
   1e43a:	eba8 0502 	sub.w	r5, r8, r2
   1e43e:	2d00      	cmp	r5, #0
   1e440:	dd31      	ble.n	1e4a6 <_svfiprintf_r+0x676>
   1e442:	2d10      	cmp	r5, #16
   1e444:	4c75      	ldr	r4, [pc, #468]	; (1e61c <_svfiprintf_r+0x7ec>)
   1e446:	dd23      	ble.n	1e490 <_svfiprintf_r+0x660>
   1e448:	464a      	mov	r2, r9
   1e44a:	f04f 0810 	mov.w	r8, #16
   1e44e:	46b1      	mov	r9, r6
   1e450:	4626      	mov	r6, r4
   1e452:	9c05      	ldr	r4, [sp, #20]
   1e454:	e004      	b.n	1e460 <_svfiprintf_r+0x630>
   1e456:	3d10      	subs	r5, #16
   1e458:	2d10      	cmp	r5, #16
   1e45a:	f102 0208 	add.w	r2, r2, #8
   1e45e:	dd14      	ble.n	1e48a <_svfiprintf_r+0x65a>
   1e460:	3301      	adds	r3, #1
   1e462:	3110      	adds	r1, #16
   1e464:	2b07      	cmp	r3, #7
   1e466:	9111      	str	r1, [sp, #68]	; 0x44
   1e468:	9310      	str	r3, [sp, #64]	; 0x40
   1e46a:	e882 0140 	stmia.w	r2, {r6, r8}
   1e46e:	ddf2      	ble.n	1e456 <_svfiprintf_r+0x626>
   1e470:	aa0f      	add	r2, sp, #60	; 0x3c
   1e472:	4621      	mov	r1, r4
   1e474:	4638      	mov	r0, r7
   1e476:	f7ff fc5d 	bl	1dd34 <__ssprint_r>
   1e47a:	2800      	cmp	r0, #0
   1e47c:	d16a      	bne.n	1e554 <_svfiprintf_r+0x724>
   1e47e:	3d10      	subs	r5, #16
   1e480:	2d10      	cmp	r5, #16
   1e482:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e484:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e486:	4652      	mov	r2, sl
   1e488:	dcea      	bgt.n	1e460 <_svfiprintf_r+0x630>
   1e48a:	4634      	mov	r4, r6
   1e48c:	464e      	mov	r6, r9
   1e48e:	4691      	mov	r9, r2
   1e490:	3301      	adds	r3, #1
   1e492:	4429      	add	r1, r5
   1e494:	2b07      	cmp	r3, #7
   1e496:	9111      	str	r1, [sp, #68]	; 0x44
   1e498:	9310      	str	r3, [sp, #64]	; 0x40
   1e49a:	e889 0030 	stmia.w	r9, {r4, r5}
   1e49e:	f300 80ca 	bgt.w	1e636 <_svfiprintf_r+0x806>
   1e4a2:	f109 0908 	add.w	r9, r9, #8
   1e4a6:	9804      	ldr	r0, [sp, #16]
   1e4a8:	f8c9 6000 	str.w	r6, [r9]
   1e4ac:	3301      	adds	r3, #1
   1e4ae:	4401      	add	r1, r0
   1e4b0:	2b07      	cmp	r3, #7
   1e4b2:	9111      	str	r1, [sp, #68]	; 0x44
   1e4b4:	9310      	str	r3, [sp, #64]	; 0x40
   1e4b6:	f8c9 0004 	str.w	r0, [r9, #4]
   1e4ba:	f300 8090 	bgt.w	1e5de <_svfiprintf_r+0x7ae>
   1e4be:	f109 0908 	add.w	r9, r9, #8
   1e4c2:	9b01      	ldr	r3, [sp, #4]
   1e4c4:	075b      	lsls	r3, r3, #29
   1e4c6:	d530      	bpl.n	1e52a <_svfiprintf_r+0x6fa>
   1e4c8:	9b06      	ldr	r3, [sp, #24]
   1e4ca:	9a00      	ldr	r2, [sp, #0]
   1e4cc:	1a9c      	subs	r4, r3, r2
   1e4ce:	2c00      	cmp	r4, #0
   1e4d0:	dd2b      	ble.n	1e52a <_svfiprintf_r+0x6fa>
   1e4d2:	2c10      	cmp	r4, #16
   1e4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e4d6:	4d52      	ldr	r5, [pc, #328]	; (1e620 <_svfiprintf_r+0x7f0>)
   1e4d8:	dd1c      	ble.n	1e514 <_svfiprintf_r+0x6e4>
   1e4da:	2610      	movs	r6, #16
   1e4dc:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1e4e0:	e004      	b.n	1e4ec <_svfiprintf_r+0x6bc>
   1e4e2:	3c10      	subs	r4, #16
   1e4e4:	2c10      	cmp	r4, #16
   1e4e6:	f109 0908 	add.w	r9, r9, #8
   1e4ea:	dd13      	ble.n	1e514 <_svfiprintf_r+0x6e4>
   1e4ec:	3301      	adds	r3, #1
   1e4ee:	3110      	adds	r1, #16
   1e4f0:	2b07      	cmp	r3, #7
   1e4f2:	9111      	str	r1, [sp, #68]	; 0x44
   1e4f4:	9310      	str	r3, [sp, #64]	; 0x40
   1e4f6:	e889 0060 	stmia.w	r9, {r5, r6}
   1e4fa:	ddf2      	ble.n	1e4e2 <_svfiprintf_r+0x6b2>
   1e4fc:	aa0f      	add	r2, sp, #60	; 0x3c
   1e4fe:	4641      	mov	r1, r8
   1e500:	4638      	mov	r0, r7
   1e502:	f7ff fc17 	bl	1dd34 <__ssprint_r>
   1e506:	bb28      	cbnz	r0, 1e554 <_svfiprintf_r+0x724>
   1e508:	3c10      	subs	r4, #16
   1e50a:	2c10      	cmp	r4, #16
   1e50c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e50e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e510:	46d1      	mov	r9, sl
   1e512:	dceb      	bgt.n	1e4ec <_svfiprintf_r+0x6bc>
   1e514:	3301      	adds	r3, #1
   1e516:	4421      	add	r1, r4
   1e518:	2b07      	cmp	r3, #7
   1e51a:	9111      	str	r1, [sp, #68]	; 0x44
   1e51c:	9310      	str	r3, [sp, #64]	; 0x40
   1e51e:	f8c9 5000 	str.w	r5, [r9]
   1e522:	f8c9 4004 	str.w	r4, [r9, #4]
   1e526:	f300 80f9 	bgt.w	1e71c <_svfiprintf_r+0x8ec>
   1e52a:	9b02      	ldr	r3, [sp, #8]
   1e52c:	9a06      	ldr	r2, [sp, #24]
   1e52e:	9800      	ldr	r0, [sp, #0]
   1e530:	4282      	cmp	r2, r0
   1e532:	bfac      	ite	ge
   1e534:	189b      	addge	r3, r3, r2
   1e536:	181b      	addlt	r3, r3, r0
   1e538:	9302      	str	r3, [sp, #8]
   1e53a:	2900      	cmp	r1, #0
   1e53c:	d159      	bne.n	1e5f2 <_svfiprintf_r+0x7c2>
   1e53e:	2300      	movs	r3, #0
   1e540:	9310      	str	r3, [sp, #64]	; 0x40
   1e542:	46d1      	mov	r9, sl
   1e544:	e48e      	b.n	1de64 <_svfiprintf_r+0x34>
   1e546:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e548:	b123      	cbz	r3, 1e554 <_svfiprintf_r+0x724>
   1e54a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e54c:	9905      	ldr	r1, [sp, #20]
   1e54e:	aa0f      	add	r2, sp, #60	; 0x3c
   1e550:	f7ff fbf0 	bl	1dd34 <__ssprint_r>
   1e554:	9b05      	ldr	r3, [sp, #20]
   1e556:	899b      	ldrh	r3, [r3, #12]
   1e558:	f013 0f40 	tst.w	r3, #64	; 0x40
   1e55c:	9b02      	ldr	r3, [sp, #8]
   1e55e:	bf18      	it	ne
   1e560:	f04f 33ff 	movne.w	r3, #4294967295
   1e564:	9302      	str	r3, [sp, #8]
   1e566:	9802      	ldr	r0, [sp, #8]
   1e568:	b02d      	add	sp, #180	; 0xb4
   1e56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e56e:	9a06      	ldr	r2, [sp, #24]
   1e570:	9800      	ldr	r0, [sp, #0]
   1e572:	1a15      	subs	r5, r2, r0
   1e574:	2d00      	cmp	r5, #0
   1e576:	f77f af5f 	ble.w	1e438 <_svfiprintf_r+0x608>
   1e57a:	2d10      	cmp	r5, #16
   1e57c:	4c27      	ldr	r4, [pc, #156]	; (1e61c <_svfiprintf_r+0x7ec>)
   1e57e:	dd22      	ble.n	1e5c6 <_svfiprintf_r+0x796>
   1e580:	464a      	mov	r2, r9
   1e582:	46b1      	mov	r9, r6
   1e584:	4626      	mov	r6, r4
   1e586:	9c05      	ldr	r4, [sp, #20]
   1e588:	e004      	b.n	1e594 <_svfiprintf_r+0x764>
   1e58a:	3d10      	subs	r5, #16
   1e58c:	2d10      	cmp	r5, #16
   1e58e:	f102 0208 	add.w	r2, r2, #8
   1e592:	dd15      	ble.n	1e5c0 <_svfiprintf_r+0x790>
   1e594:	3301      	adds	r3, #1
   1e596:	3110      	adds	r1, #16
   1e598:	2010      	movs	r0, #16
   1e59a:	2b07      	cmp	r3, #7
   1e59c:	9111      	str	r1, [sp, #68]	; 0x44
   1e59e:	9310      	str	r3, [sp, #64]	; 0x40
   1e5a0:	6016      	str	r6, [r2, #0]
   1e5a2:	6050      	str	r0, [r2, #4]
   1e5a4:	ddf1      	ble.n	1e58a <_svfiprintf_r+0x75a>
   1e5a6:	aa0f      	add	r2, sp, #60	; 0x3c
   1e5a8:	4621      	mov	r1, r4
   1e5aa:	4638      	mov	r0, r7
   1e5ac:	f7ff fbc2 	bl	1dd34 <__ssprint_r>
   1e5b0:	2800      	cmp	r0, #0
   1e5b2:	d1cf      	bne.n	1e554 <_svfiprintf_r+0x724>
   1e5b4:	3d10      	subs	r5, #16
   1e5b6:	2d10      	cmp	r5, #16
   1e5b8:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e5ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e5bc:	4652      	mov	r2, sl
   1e5be:	dce9      	bgt.n	1e594 <_svfiprintf_r+0x764>
   1e5c0:	4634      	mov	r4, r6
   1e5c2:	464e      	mov	r6, r9
   1e5c4:	4691      	mov	r9, r2
   1e5c6:	3301      	adds	r3, #1
   1e5c8:	4429      	add	r1, r5
   1e5ca:	2b07      	cmp	r3, #7
   1e5cc:	9111      	str	r1, [sp, #68]	; 0x44
   1e5ce:	9310      	str	r3, [sp, #64]	; 0x40
   1e5d0:	e889 0030 	stmia.w	r9, {r4, r5}
   1e5d4:	f300 80f0 	bgt.w	1e7b8 <_svfiprintf_r+0x988>
   1e5d8:	f109 0908 	add.w	r9, r9, #8
   1e5dc:	e72c      	b.n	1e438 <_svfiprintf_r+0x608>
   1e5de:	aa0f      	add	r2, sp, #60	; 0x3c
   1e5e0:	9905      	ldr	r1, [sp, #20]
   1e5e2:	4638      	mov	r0, r7
   1e5e4:	f7ff fba6 	bl	1dd34 <__ssprint_r>
   1e5e8:	2800      	cmp	r0, #0
   1e5ea:	d1b3      	bne.n	1e554 <_svfiprintf_r+0x724>
   1e5ec:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e5ee:	46d1      	mov	r9, sl
   1e5f0:	e767      	b.n	1e4c2 <_svfiprintf_r+0x692>
   1e5f2:	aa0f      	add	r2, sp, #60	; 0x3c
   1e5f4:	9905      	ldr	r1, [sp, #20]
   1e5f6:	4638      	mov	r0, r7
   1e5f8:	f7ff fb9c 	bl	1dd34 <__ssprint_r>
   1e5fc:	2800      	cmp	r0, #0
   1e5fe:	d09e      	beq.n	1e53e <_svfiprintf_r+0x70e>
   1e600:	e7a8      	b.n	1e554 <_svfiprintf_r+0x724>
   1e602:	9b01      	ldr	r3, [sp, #4]
   1e604:	2a01      	cmp	r2, #1
   1e606:	f000 80b7 	beq.w	1e778 <_svfiprintf_r+0x948>
   1e60a:	2a02      	cmp	r2, #2
   1e60c:	d11e      	bne.n	1e64c <_svfiprintf_r+0x81c>
   1e60e:	9301      	str	r3, [sp, #4]
   1e610:	2400      	movs	r4, #0
   1e612:	2500      	movs	r5, #0
   1e614:	e5f0      	b.n	1e1f8 <_svfiprintf_r+0x3c8>
   1e616:	bf00      	nop
   1e618:	00022540 	.word	0x00022540
   1e61c:	0002256c 	.word	0x0002256c
   1e620:	0002255c 	.word	0x0002255c
   1e624:	aa0f      	add	r2, sp, #60	; 0x3c
   1e626:	9905      	ldr	r1, [sp, #20]
   1e628:	4638      	mov	r0, r7
   1e62a:	f7ff fb83 	bl	1dd34 <__ssprint_r>
   1e62e:	2800      	cmp	r0, #0
   1e630:	d190      	bne.n	1e554 <_svfiprintf_r+0x724>
   1e632:	46d1      	mov	r9, sl
   1e634:	e435      	b.n	1dea2 <_svfiprintf_r+0x72>
   1e636:	aa0f      	add	r2, sp, #60	; 0x3c
   1e638:	9905      	ldr	r1, [sp, #20]
   1e63a:	4638      	mov	r0, r7
   1e63c:	f7ff fb7a 	bl	1dd34 <__ssprint_r>
   1e640:	2800      	cmp	r0, #0
   1e642:	d187      	bne.n	1e554 <_svfiprintf_r+0x724>
   1e644:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e646:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e648:	46d1      	mov	r9, sl
   1e64a:	e72c      	b.n	1e4a6 <_svfiprintf_r+0x676>
   1e64c:	9301      	str	r3, [sp, #4]
   1e64e:	2400      	movs	r4, #0
   1e650:	2500      	movs	r5, #0
   1e652:	4651      	mov	r1, sl
   1e654:	e000      	b.n	1e658 <_svfiprintf_r+0x828>
   1e656:	4631      	mov	r1, r6
   1e658:	08e2      	lsrs	r2, r4, #3
   1e65a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1e65e:	08e8      	lsrs	r0, r5, #3
   1e660:	f004 0307 	and.w	r3, r4, #7
   1e664:	4605      	mov	r5, r0
   1e666:	4614      	mov	r4, r2
   1e668:	3330      	adds	r3, #48	; 0x30
   1e66a:	ea54 0205 	orrs.w	r2, r4, r5
   1e66e:	f801 3c01 	strb.w	r3, [r1, #-1]
   1e672:	f101 36ff 	add.w	r6, r1, #4294967295
   1e676:	d1ee      	bne.n	1e656 <_svfiprintf_r+0x826>
   1e678:	9a01      	ldr	r2, [sp, #4]
   1e67a:	07d2      	lsls	r2, r2, #31
   1e67c:	f57f adcc 	bpl.w	1e218 <_svfiprintf_r+0x3e8>
   1e680:	2b30      	cmp	r3, #48	; 0x30
   1e682:	f43f adc9 	beq.w	1e218 <_svfiprintf_r+0x3e8>
   1e686:	3902      	subs	r1, #2
   1e688:	2330      	movs	r3, #48	; 0x30
   1e68a:	f806 3c01 	strb.w	r3, [r6, #-1]
   1e68e:	ebaa 0301 	sub.w	r3, sl, r1
   1e692:	9304      	str	r3, [sp, #16]
   1e694:	460e      	mov	r6, r1
   1e696:	e5c2      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e698:	aa0f      	add	r2, sp, #60	; 0x3c
   1e69a:	9905      	ldr	r1, [sp, #20]
   1e69c:	4638      	mov	r0, r7
   1e69e:	f7ff fb49 	bl	1dd34 <__ssprint_r>
   1e6a2:	2800      	cmp	r0, #0
   1e6a4:	f47f af56 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e6a8:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e6aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e6ac:	46d1      	mov	r9, sl
   1e6ae:	e6b0      	b.n	1e412 <_svfiprintf_r+0x5e2>
   1e6b0:	aa0f      	add	r2, sp, #60	; 0x3c
   1e6b2:	9905      	ldr	r1, [sp, #20]
   1e6b4:	4638      	mov	r0, r7
   1e6b6:	f7ff fb3d 	bl	1dd34 <__ssprint_r>
   1e6ba:	2800      	cmp	r0, #0
   1e6bc:	f47f af4a 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e6c0:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e6c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e6c4:	46d1      	mov	r9, sl
   1e6c6:	e6b3      	b.n	1e430 <_svfiprintf_r+0x600>
   1e6c8:	2d00      	cmp	r5, #0
   1e6ca:	bf08      	it	eq
   1e6cc:	2c0a      	cmpeq	r4, #10
   1e6ce:	d352      	bcc.n	1e776 <_svfiprintf_r+0x946>
   1e6d0:	4656      	mov	r6, sl
   1e6d2:	4620      	mov	r0, r4
   1e6d4:	4629      	mov	r1, r5
   1e6d6:	220a      	movs	r2, #10
   1e6d8:	2300      	movs	r3, #0
   1e6da:	f7fd fbe7 	bl	1beac <__aeabi_uldivmod>
   1e6de:	3230      	adds	r2, #48	; 0x30
   1e6e0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1e6e4:	4620      	mov	r0, r4
   1e6e6:	4629      	mov	r1, r5
   1e6e8:	2300      	movs	r3, #0
   1e6ea:	220a      	movs	r2, #10
   1e6ec:	f7fd fbde 	bl	1beac <__aeabi_uldivmod>
   1e6f0:	4604      	mov	r4, r0
   1e6f2:	460d      	mov	r5, r1
   1e6f4:	ea54 0305 	orrs.w	r3, r4, r5
   1e6f8:	d1eb      	bne.n	1e6d2 <_svfiprintf_r+0x8a2>
   1e6fa:	e58d      	b.n	1e218 <_svfiprintf_r+0x3e8>
   1e6fc:	f8cd 8010 	str.w	r8, [sp, #16]
   1e700:	4656      	mov	r6, sl
   1e702:	e58c      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e704:	aa0f      	add	r2, sp, #60	; 0x3c
   1e706:	9905      	ldr	r1, [sp, #20]
   1e708:	4638      	mov	r0, r7
   1e70a:	f7ff fb13 	bl	1dd34 <__ssprint_r>
   1e70e:	2800      	cmp	r0, #0
   1e710:	f47f af20 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e714:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e716:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e718:	46d1      	mov	r9, sl
   1e71a:	e669      	b.n	1e3f0 <_svfiprintf_r+0x5c0>
   1e71c:	aa0f      	add	r2, sp, #60	; 0x3c
   1e71e:	9905      	ldr	r1, [sp, #20]
   1e720:	4638      	mov	r0, r7
   1e722:	f7ff fb07 	bl	1dd34 <__ssprint_r>
   1e726:	2800      	cmp	r0, #0
   1e728:	f47f af14 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e72c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e72e:	e6fc      	b.n	1e52a <_svfiprintf_r+0x6fa>
   1e730:	9207      	str	r2, [sp, #28]
   1e732:	f89b 2000 	ldrb.w	r2, [fp]
   1e736:	f7ff bbc8 	b.w	1deca <_svfiprintf_r+0x9a>
   1e73a:	4656      	mov	r6, sl
   1e73c:	e56f      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e73e:	9e07      	ldr	r6, [sp, #28]
   1e740:	f9b6 4000 	ldrsh.w	r4, [r6]
   1e744:	4632      	mov	r2, r6
   1e746:	17e5      	asrs	r5, r4, #31
   1e748:	4620      	mov	r0, r4
   1e74a:	3204      	adds	r2, #4
   1e74c:	4629      	mov	r1, r5
   1e74e:	2800      	cmp	r0, #0
   1e750:	9207      	str	r2, [sp, #28]
   1e752:	f171 0200 	sbcs.w	r2, r1, #0
   1e756:	f6bf ad3b 	bge.w	1e1d0 <_svfiprintf_r+0x3a0>
   1e75a:	222d      	movs	r2, #45	; 0x2d
   1e75c:	4264      	negs	r4, r4
   1e75e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1e762:	9203      	str	r2, [sp, #12]
   1e764:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1e768:	2201      	movs	r2, #1
   1e76a:	e604      	b.n	1e376 <_svfiprintf_r+0x546>
   1e76c:	880c      	ldrh	r4, [r1, #0]
   1e76e:	3104      	adds	r1, #4
   1e770:	2500      	movs	r5, #0
   1e772:	9107      	str	r1, [sp, #28]
   1e774:	e455      	b.n	1e022 <_svfiprintf_r+0x1f2>
   1e776:	9b01      	ldr	r3, [sp, #4]
   1e778:	9301      	str	r3, [sp, #4]
   1e77a:	ae2c      	add	r6, sp, #176	; 0xb0
   1e77c:	3430      	adds	r4, #48	; 0x30
   1e77e:	2301      	movs	r3, #1
   1e780:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1e784:	9304      	str	r3, [sp, #16]
   1e786:	e54a      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e788:	9a07      	ldr	r2, [sp, #28]
   1e78a:	9902      	ldr	r1, [sp, #8]
   1e78c:	6813      	ldr	r3, [r2, #0]
   1e78e:	17cd      	asrs	r5, r1, #31
   1e790:	4608      	mov	r0, r1
   1e792:	3204      	adds	r2, #4
   1e794:	4629      	mov	r1, r5
   1e796:	9207      	str	r2, [sp, #28]
   1e798:	e9c3 0100 	strd	r0, r1, [r3]
   1e79c:	f7ff bb62 	b.w	1de64 <_svfiprintf_r+0x34>
   1e7a0:	9c07      	ldr	r4, [sp, #28]
   1e7a2:	3407      	adds	r4, #7
   1e7a4:	f024 0407 	bic.w	r4, r4, #7
   1e7a8:	e9d4 0100 	ldrd	r0, r1, [r4]
   1e7ac:	f104 0208 	add.w	r2, r4, #8
   1e7b0:	9207      	str	r2, [sp, #28]
   1e7b2:	4604      	mov	r4, r0
   1e7b4:	460d      	mov	r5, r1
   1e7b6:	e506      	b.n	1e1c6 <_svfiprintf_r+0x396>
   1e7b8:	aa0f      	add	r2, sp, #60	; 0x3c
   1e7ba:	9905      	ldr	r1, [sp, #20]
   1e7bc:	4638      	mov	r0, r7
   1e7be:	f7ff fab9 	bl	1dd34 <__ssprint_r>
   1e7c2:	2800      	cmp	r0, #0
   1e7c4:	f47f aec6 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e7c8:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e7ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e7cc:	46d1      	mov	r9, sl
   1e7ce:	e633      	b.n	1e438 <_svfiprintf_r+0x608>
   1e7d0:	9a07      	ldr	r2, [sp, #28]
   1e7d2:	6813      	ldr	r3, [r2, #0]
   1e7d4:	3204      	adds	r2, #4
   1e7d6:	9207      	str	r2, [sp, #28]
   1e7d8:	9a02      	ldr	r2, [sp, #8]
   1e7da:	601a      	str	r2, [r3, #0]
   1e7dc:	f7ff bb42 	b.w	1de64 <_svfiprintf_r+0x34>
   1e7e0:	4630      	mov	r0, r6
   1e7e2:	9301      	str	r3, [sp, #4]
   1e7e4:	9407      	str	r4, [sp, #28]
   1e7e6:	f7fd ff6b 	bl	1c6c0 <strlen>
   1e7ea:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1e7ee:	9004      	str	r0, [sp, #16]
   1e7f0:	9303      	str	r3, [sp, #12]
   1e7f2:	f04f 0800 	mov.w	r8, #0
   1e7f6:	e512      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e7f8:	2140      	movs	r1, #64	; 0x40
   1e7fa:	9200      	str	r2, [sp, #0]
   1e7fc:	f7fe fc2e 	bl	1d05c <_malloc_r>
   1e800:	9a05      	ldr	r2, [sp, #20]
   1e802:	6010      	str	r0, [r2, #0]
   1e804:	6110      	str	r0, [r2, #16]
   1e806:	9a00      	ldr	r2, [sp, #0]
   1e808:	b328      	cbz	r0, 1e856 <_svfiprintf_r+0xa26>
   1e80a:	9905      	ldr	r1, [sp, #20]
   1e80c:	2340      	movs	r3, #64	; 0x40
   1e80e:	614b      	str	r3, [r1, #20]
   1e810:	f7ff bb1c 	b.w	1de4c <_svfiprintf_r+0x1c>
   1e814:	4642      	mov	r2, r8
   1e816:	2a06      	cmp	r2, #6
   1e818:	bf28      	it	cs
   1e81a:	2206      	movcs	r2, #6
   1e81c:	9204      	str	r2, [sp, #16]
   1e81e:	9407      	str	r4, [sp, #28]
   1e820:	9200      	str	r2, [sp, #0]
   1e822:	4e17      	ldr	r6, [pc, #92]	; (1e880 <_svfiprintf_r+0xa50>)
   1e824:	e42f      	b.n	1e086 <_svfiprintf_r+0x256>
   1e826:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1e82a:	f8cd 8010 	str.w	r8, [sp, #16]
   1e82e:	9203      	str	r2, [sp, #12]
   1e830:	9407      	str	r4, [sp, #28]
   1e832:	9301      	str	r3, [sp, #4]
   1e834:	4680      	mov	r8, r0
   1e836:	e4f2      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e838:	9a07      	ldr	r2, [sp, #28]
   1e83a:	6811      	ldr	r1, [r2, #0]
   1e83c:	f89b 2001 	ldrb.w	r2, [fp, #1]
   1e840:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
   1e844:	9907      	ldr	r1, [sp, #28]
   1e846:	3104      	adds	r1, #4
   1e848:	46b3      	mov	fp, r6
   1e84a:	9107      	str	r1, [sp, #28]
   1e84c:	f7ff bb3d 	b.w	1deca <_svfiprintf_r+0x9a>
   1e850:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e854:	e51f      	b.n	1e296 <_svfiprintf_r+0x466>
   1e856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e858:	230c      	movs	r3, #12
   1e85a:	6013      	str	r3, [r2, #0]
   1e85c:	f04f 33ff 	mov.w	r3, #4294967295
   1e860:	9302      	str	r3, [sp, #8]
   1e862:	e680      	b.n	1e566 <_svfiprintf_r+0x736>
   1e864:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e868:	f7ff bbcb 	b.w	1e002 <_svfiprintf_r+0x1d2>
   1e86c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e870:	e497      	b.n	1e1a2 <_svfiprintf_r+0x372>
   1e872:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e876:	e59e      	b.n	1e3b6 <_svfiprintf_r+0x586>
   1e878:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e87c:	e457      	b.n	1e12e <_svfiprintf_r+0x2fe>
   1e87e:	bf00      	nop
   1e880:	00022554 	.word	0x00022554

0001e884 <_sungetc_r>:
   1e884:	b538      	push	{r3, r4, r5, lr}
   1e886:	1c4b      	adds	r3, r1, #1
   1e888:	d01a      	beq.n	1e8c0 <_sungetc_r+0x3c>
   1e88a:	8993      	ldrh	r3, [r2, #12]
   1e88c:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1e88e:	f023 0320 	bic.w	r3, r3, #32
   1e892:	b2cd      	uxtb	r5, r1
   1e894:	8193      	strh	r3, [r2, #12]
   1e896:	b1b4      	cbz	r4, 1e8c6 <_sungetc_r+0x42>
   1e898:	4614      	mov	r4, r2
   1e89a:	6852      	ldr	r2, [r2, #4]
   1e89c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e89e:	429a      	cmp	r2, r3
   1e8a0:	da09      	bge.n	1e8b6 <_sungetc_r+0x32>
   1e8a2:	6823      	ldr	r3, [r4, #0]
   1e8a4:	1e5a      	subs	r2, r3, #1
   1e8a6:	6022      	str	r2, [r4, #0]
   1e8a8:	f803 5c01 	strb.w	r5, [r3, #-1]
   1e8ac:	6863      	ldr	r3, [r4, #4]
   1e8ae:	3301      	adds	r3, #1
   1e8b0:	6063      	str	r3, [r4, #4]
   1e8b2:	4628      	mov	r0, r5
   1e8b4:	bd38      	pop	{r3, r4, r5, pc}
   1e8b6:	4621      	mov	r1, r4
   1e8b8:	f000 fd52 	bl	1f360 <__submore>
   1e8bc:	2800      	cmp	r0, #0
   1e8be:	d0f0      	beq.n	1e8a2 <_sungetc_r+0x1e>
   1e8c0:	f04f 35ff 	mov.w	r5, #4294967295
   1e8c4:	e7f5      	b.n	1e8b2 <_sungetc_r+0x2e>
   1e8c6:	6911      	ldr	r1, [r2, #16]
   1e8c8:	6813      	ldr	r3, [r2, #0]
   1e8ca:	b129      	cbz	r1, 1e8d8 <_sungetc_r+0x54>
   1e8cc:	4299      	cmp	r1, r3
   1e8ce:	d203      	bcs.n	1e8d8 <_sungetc_r+0x54>
   1e8d0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   1e8d4:	428d      	cmp	r5, r1
   1e8d6:	d00f      	beq.n	1e8f8 <_sungetc_r+0x74>
   1e8d8:	6393      	str	r3, [r2, #56]	; 0x38
   1e8da:	4613      	mov	r3, r2
   1e8dc:	6854      	ldr	r4, [r2, #4]
   1e8de:	63d4      	str	r4, [r2, #60]	; 0x3c
   1e8e0:	f102 0040 	add.w	r0, r2, #64	; 0x40
   1e8e4:	2103      	movs	r1, #3
   1e8e6:	6310      	str	r0, [r2, #48]	; 0x30
   1e8e8:	6351      	str	r1, [r2, #52]	; 0x34
   1e8ea:	f803 5f42 	strb.w	r5, [r3, #66]!
   1e8ee:	2101      	movs	r1, #1
   1e8f0:	6013      	str	r3, [r2, #0]
   1e8f2:	6051      	str	r1, [r2, #4]
   1e8f4:	4628      	mov	r0, r5
   1e8f6:	bd38      	pop	{r3, r4, r5, pc}
   1e8f8:	6851      	ldr	r1, [r2, #4]
   1e8fa:	3b01      	subs	r3, #1
   1e8fc:	3101      	adds	r1, #1
   1e8fe:	6013      	str	r3, [r2, #0]
   1e900:	6051      	str	r1, [r2, #4]
   1e902:	e7d6      	b.n	1e8b2 <_sungetc_r+0x2e>

0001e904 <__ssrefill_r>:
   1e904:	b510      	push	{r4, lr}
   1e906:	460c      	mov	r4, r1
   1e908:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1e90a:	b169      	cbz	r1, 1e928 <__ssrefill_r+0x24>
   1e90c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1e910:	4299      	cmp	r1, r3
   1e912:	d001      	beq.n	1e918 <__ssrefill_r+0x14>
   1e914:	f000 fdbc 	bl	1f490 <_free_r>
   1e918:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e91a:	6063      	str	r3, [r4, #4]
   1e91c:	2000      	movs	r0, #0
   1e91e:	6320      	str	r0, [r4, #48]	; 0x30
   1e920:	b113      	cbz	r3, 1e928 <__ssrefill_r+0x24>
   1e922:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e924:	6023      	str	r3, [r4, #0]
   1e926:	bd10      	pop	{r4, pc}
   1e928:	89a3      	ldrh	r3, [r4, #12]
   1e92a:	6922      	ldr	r2, [r4, #16]
   1e92c:	6022      	str	r2, [r4, #0]
   1e92e:	f043 0320 	orr.w	r3, r3, #32
   1e932:	2200      	movs	r2, #0
   1e934:	81a3      	strh	r3, [r4, #12]
   1e936:	6062      	str	r2, [r4, #4]
   1e938:	f04f 30ff 	mov.w	r0, #4294967295
   1e93c:	bd10      	pop	{r4, pc}
   1e93e:	bf00      	nop

0001e940 <_sfread_r>:
   1e940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e944:	b083      	sub	sp, #12
   1e946:	fb02 f903 	mul.w	r9, r2, r3
   1e94a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1e94c:	f1b9 0f00 	cmp.w	r9, #0
   1e950:	d028      	beq.n	1e9a4 <_sfread_r+0x64>
   1e952:	4607      	mov	r7, r0
   1e954:	469a      	mov	sl, r3
   1e956:	9201      	str	r2, [sp, #4]
   1e958:	460d      	mov	r5, r1
   1e95a:	464e      	mov	r6, r9
   1e95c:	f04f 0800 	mov.w	r8, #0
   1e960:	e00f      	b.n	1e982 <_sfread_r+0x42>
   1e962:	6821      	ldr	r1, [r4, #0]
   1e964:	f7fd fd9e 	bl	1c4a4 <memcpy>
   1e968:	6822      	ldr	r2, [r4, #0]
   1e96a:	f8c4 8004 	str.w	r8, [r4, #4]
   1e96e:	445a      	add	r2, fp
   1e970:	6022      	str	r2, [r4, #0]
   1e972:	4621      	mov	r1, r4
   1e974:	4638      	mov	r0, r7
   1e976:	445d      	add	r5, fp
   1e978:	eba6 060b 	sub.w	r6, r6, fp
   1e97c:	f7ff ffc2 	bl	1e904 <__ssrefill_r>
   1e980:	b9a0      	cbnz	r0, 1e9ac <_sfread_r+0x6c>
   1e982:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1e986:	455e      	cmp	r6, fp
   1e988:	4628      	mov	r0, r5
   1e98a:	465a      	mov	r2, fp
   1e98c:	d8e9      	bhi.n	1e962 <_sfread_r+0x22>
   1e98e:	4632      	mov	r2, r6
   1e990:	6821      	ldr	r1, [r4, #0]
   1e992:	f7fd fd87 	bl	1c4a4 <memcpy>
   1e996:	6862      	ldr	r2, [r4, #4]
   1e998:	6823      	ldr	r3, [r4, #0]
   1e99a:	1b92      	subs	r2, r2, r6
   1e99c:	441e      	add	r6, r3
   1e99e:	46d1      	mov	r9, sl
   1e9a0:	6062      	str	r2, [r4, #4]
   1e9a2:	6026      	str	r6, [r4, #0]
   1e9a4:	4648      	mov	r0, r9
   1e9a6:	b003      	add	sp, #12
   1e9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9ac:	9b01      	ldr	r3, [sp, #4]
   1e9ae:	eba9 0906 	sub.w	r9, r9, r6
   1e9b2:	fbb9 f9f3 	udiv	r9, r9, r3
   1e9b6:	4648      	mov	r0, r9
   1e9b8:	b003      	add	sp, #12
   1e9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9be:	bf00      	nop

0001e9c0 <__ssvfiscanf_r>:
   1e9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9c4:	468b      	mov	fp, r1
   1e9c6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1e9ca:	b0d9      	sub	sp, #356	; 0x164
   1e9cc:	4607      	mov	r7, r0
   1e9ce:	0488      	lsls	r0, r1, #18
   1e9d0:	9306      	str	r3, [sp, #24]
   1e9d2:	d409      	bmi.n	1e9e8 <__ssvfiscanf_r+0x28>
   1e9d4:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1e9d8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1e9dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1e9e0:	f8ab 100c 	strh.w	r1, [fp, #12]
   1e9e4:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   1e9e8:	4614      	mov	r4, r2
   1e9ea:	4626      	mov	r6, r4
   1e9ec:	2300      	movs	r3, #0
   1e9ee:	9307      	str	r3, [sp, #28]
   1e9f0:	9304      	str	r3, [sp, #16]
   1e9f2:	469a      	mov	sl, r3
   1e9f4:	9305      	str	r3, [sp, #20]
   1e9f6:	f816 3b01 	ldrb.w	r3, [r6], #1
   1e9fa:	930b      	str	r3, [sp, #44]	; 0x2c
   1e9fc:	b363      	cbz	r3, 1ea58 <__ssvfiscanf_r+0x98>
   1e9fe:	f000 fe4d 	bl	1f69c <__locale_ctype_ptr>
   1ea02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ea04:	4418      	add	r0, r3
   1ea06:	7845      	ldrb	r5, [r0, #1]
   1ea08:	f015 0508 	ands.w	r5, r5, #8
   1ea0c:	d028      	beq.n	1ea60 <__ssvfiscanf_r+0xa0>
   1ea0e:	f8db 2004 	ldr.w	r2, [fp, #4]
   1ea12:	e012      	b.n	1ea3a <__ssvfiscanf_r+0x7a>
   1ea14:	f000 fe42 	bl	1f69c <__locale_ctype_ptr>
   1ea18:	f8db 3000 	ldr.w	r3, [fp]
   1ea1c:	781a      	ldrb	r2, [r3, #0]
   1ea1e:	4410      	add	r0, r2
   1ea20:	3301      	adds	r3, #1
   1ea22:	7842      	ldrb	r2, [r0, #1]
   1ea24:	0712      	lsls	r2, r2, #28
   1ea26:	d510      	bpl.n	1ea4a <__ssvfiscanf_r+0x8a>
   1ea28:	f8db 2004 	ldr.w	r2, [fp, #4]
   1ea2c:	f8cb 3000 	str.w	r3, [fp]
   1ea30:	3a01      	subs	r2, #1
   1ea32:	f10a 0a01 	add.w	sl, sl, #1
   1ea36:	f8cb 2004 	str.w	r2, [fp, #4]
   1ea3a:	2a00      	cmp	r2, #0
   1ea3c:	dcea      	bgt.n	1ea14 <__ssvfiscanf_r+0x54>
   1ea3e:	4659      	mov	r1, fp
   1ea40:	4638      	mov	r0, r7
   1ea42:	f7ff ff5f 	bl	1e904 <__ssrefill_r>
   1ea46:	2800      	cmp	r0, #0
   1ea48:	d0e4      	beq.n	1ea14 <__ssvfiscanf_r+0x54>
   1ea4a:	4634      	mov	r4, r6
   1ea4c:	4626      	mov	r6, r4
   1ea4e:	f816 3b01 	ldrb.w	r3, [r6], #1
   1ea52:	930b      	str	r3, [sp, #44]	; 0x2c
   1ea54:	2b00      	cmp	r3, #0
   1ea56:	d1d2      	bne.n	1e9fe <__ssvfiscanf_r+0x3e>
   1ea58:	9805      	ldr	r0, [sp, #20]
   1ea5a:	b059      	add	sp, #356	; 0x164
   1ea5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea60:	2b25      	cmp	r3, #37	; 0x25
   1ea62:	f040 8084 	bne.w	1eb6e <__ssvfiscanf_r+0x1ae>
   1ea66:	f894 8001 	ldrb.w	r8, [r4, #1]
   1ea6a:	462c      	mov	r4, r5
   1ea6c:	1c73      	adds	r3, r6, #1
   1ea6e:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
   1ea72:	f200 8187 	bhi.w	1ed84 <__ssvfiscanf_r+0x3c4>
   1ea76:	e8df f018 	tbh	[pc, r8, lsl #1]
   1ea7a:	0093      	.short	0x0093
   1ea7c:	01850185 	.word	0x01850185
   1ea80:	01850185 	.word	0x01850185
   1ea84:	01850185 	.word	0x01850185
   1ea88:	01850185 	.word	0x01850185
   1ea8c:	01850185 	.word	0x01850185
   1ea90:	01850185 	.word	0x01850185
   1ea94:	01850185 	.word	0x01850185
   1ea98:	01850185 	.word	0x01850185
   1ea9c:	01850185 	.word	0x01850185
   1eaa0:	01850185 	.word	0x01850185
   1eaa4:	01850185 	.word	0x01850185
   1eaa8:	01850185 	.word	0x01850185
   1eaac:	01850185 	.word	0x01850185
   1eab0:	01850185 	.word	0x01850185
   1eab4:	01850185 	.word	0x01850185
   1eab8:	01850185 	.word	0x01850185
   1eabc:	01850185 	.word	0x01850185
   1eac0:	01850185 	.word	0x01850185
   1eac4:	01850079 	.word	0x01850079
   1eac8:	01850185 	.word	0x01850185
   1eacc:	017f0185 	.word	0x017f0185
   1ead0:	01850185 	.word	0x01850185
   1ead4:	01850185 	.word	0x01850185
   1ead8:	01760185 	.word	0x01760185
   1eadc:	01760176 	.word	0x01760176
   1eae0:	01760176 	.word	0x01760176
   1eae4:	01760176 	.word	0x01760176
   1eae8:	01760176 	.word	0x01760176
   1eaec:	01850176 	.word	0x01850176
   1eaf0:	01850185 	.word	0x01850185
   1eaf4:	01850185 	.word	0x01850185
   1eaf8:	01850185 	.word	0x01850185
   1eafc:	01850185 	.word	0x01850185
   1eb00:	01720185 	.word	0x01720185
   1eb04:	01850185 	.word	0x01850185
   1eb08:	01850185 	.word	0x01850185
   1eb0c:	01850185 	.word	0x01850185
   1eb10:	016c0185 	.word	0x016c0185
   1eb14:	01850185 	.word	0x01850185
   1eb18:	01850168 	.word	0x01850168
   1eb1c:	01850185 	.word	0x01850185
   1eb20:	01850185 	.word	0x01850185
   1eb24:	01850185 	.word	0x01850185
   1eb28:	01640185 	.word	0x01640185
   1eb2c:	01850185 	.word	0x01850185
   1eb30:	0185015b 	.word	0x0185015b
   1eb34:	01850185 	.word	0x01850185
   1eb38:	01850185 	.word	0x01850185
   1eb3c:	01850185 	.word	0x01850185
   1eb40:	01030115 	.word	0x01030115
   1eb44:	01850185 	.word	0x01850185
   1eb48:	011a0185 	.word	0x011a0185
   1eb4c:	0185009a 	.word	0x0185009a
   1eb50:	01510185 	.word	0x01510185
   1eb54:	013a0185 	.word	0x013a0185
   1eb58:	012a0133 	.word	0x012a0133
   1eb5c:	01850185 	.word	0x01850185
   1eb60:	01850127 	.word	0x01850127
   1eb64:	01850120 	.word	0x01850120
   1eb68:	01640185 	.word	0x01640185
   1eb6c:	461e      	mov	r6, r3
   1eb6e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1eb72:	2b00      	cmp	r3, #0
   1eb74:	f340 8375 	ble.w	1f262 <__ssvfiscanf_r+0x8a2>
   1eb78:	f8db 3000 	ldr.w	r3, [fp]
   1eb7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   1eb80:	7819      	ldrb	r1, [r3, #0]
   1eb82:	4291      	cmp	r1, r2
   1eb84:	f47f af68 	bne.w	1ea58 <__ssvfiscanf_r+0x98>
   1eb88:	f8db 2004 	ldr.w	r2, [fp, #4]
   1eb8c:	3301      	adds	r3, #1
   1eb8e:	3a01      	subs	r2, #1
   1eb90:	f8cb 3000 	str.w	r3, [fp]
   1eb94:	f10a 0a01 	add.w	sl, sl, #1
   1eb98:	f8cb 2004 	str.w	r2, [fp, #4]
   1eb9c:	4634      	mov	r4, r6
   1eb9e:	e755      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1eba0:	f04f 33ff 	mov.w	r3, #4294967295
   1eba4:	9305      	str	r3, [sp, #20]
   1eba6:	9805      	ldr	r0, [sp, #20]
   1eba8:	b059      	add	sp, #356	; 0x164
   1ebaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebae:	9303      	str	r3, [sp, #12]
   1ebb0:	4ba7      	ldr	r3, [pc, #668]	; (1ee50 <__ssvfiscanf_r+0x490>)
   1ebb2:	9307      	str	r3, [sp, #28]
   1ebb4:	2300      	movs	r3, #0
   1ebb6:	9304      	str	r3, [sp, #16]
   1ebb8:	2603      	movs	r6, #3
   1ebba:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ebbe:	2b00      	cmp	r3, #0
   1ebc0:	dd69      	ble.n	1ec96 <__ssvfiscanf_r+0x2d6>
   1ebc2:	0669      	lsls	r1, r5, #25
   1ebc4:	d533      	bpl.n	1ec2e <__ssvfiscanf_r+0x26e>
   1ebc6:	2e02      	cmp	r6, #2
   1ebc8:	f000 81f7 	beq.w	1efba <__ssvfiscanf_r+0x5fa>
   1ebcc:	2e03      	cmp	r6, #3
   1ebce:	f000 8143 	beq.w	1ee58 <__ssvfiscanf_r+0x498>
   1ebd2:	2e01      	cmp	r6, #1
   1ebd4:	f000 810a 	beq.w	1edec <__ssvfiscanf_r+0x42c>
   1ebd8:	2c00      	cmp	r4, #0
   1ebda:	bf08      	it	eq
   1ebdc:	2401      	moveq	r4, #1
   1ebde:	f015 0301 	ands.w	r3, r5, #1
   1ebe2:	f040 8247 	bne.w	1f074 <__ssvfiscanf_r+0x6b4>
   1ebe6:	06ed      	lsls	r5, r5, #27
   1ebe8:	f140 831c 	bpl.w	1f224 <__ssvfiscanf_r+0x864>
   1ebec:	461d      	mov	r5, r3
   1ebee:	e009      	b.n	1ec04 <__ssvfiscanf_r+0x244>
   1ebf0:	4413      	add	r3, r2
   1ebf2:	f8cb 3000 	str.w	r3, [fp]
   1ebf6:	4415      	add	r5, r2
   1ebf8:	1aa4      	subs	r4, r4, r2
   1ebfa:	f7ff fe83 	bl	1e904 <__ssrefill_r>
   1ebfe:	2800      	cmp	r0, #0
   1ec00:	f040 82d6 	bne.w	1f1b0 <__ssvfiscanf_r+0x7f0>
   1ec04:	f8db 2004 	ldr.w	r2, [fp, #4]
   1ec08:	f8db 3000 	ldr.w	r3, [fp]
   1ec0c:	42a2      	cmp	r2, r4
   1ec0e:	4659      	mov	r1, fp
   1ec10:	4638      	mov	r0, r7
   1ec12:	dbed      	blt.n	1ebf0 <__ssvfiscanf_r+0x230>
   1ec14:	1b12      	subs	r2, r2, r4
   1ec16:	4423      	add	r3, r4
   1ec18:	f8cb 2004 	str.w	r2, [fp, #4]
   1ec1c:	4425      	add	r5, r4
   1ec1e:	f8cb 3000 	str.w	r3, [fp]
   1ec22:	9e03      	ldr	r6, [sp, #12]
   1ec24:	44aa      	add	sl, r5
   1ec26:	4634      	mov	r4, r6
   1ec28:	e710      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1ec2a:	f8cb 3000 	str.w	r3, [fp]
   1ec2e:	f000 fd35 	bl	1f69c <__locale_ctype_ptr>
   1ec32:	f8db 3000 	ldr.w	r3, [fp]
   1ec36:	781a      	ldrb	r2, [r3, #0]
   1ec38:	4410      	add	r0, r2
   1ec3a:	3301      	adds	r3, #1
   1ec3c:	7842      	ldrb	r2, [r0, #1]
   1ec3e:	0712      	lsls	r2, r2, #28
   1ec40:	d5c1      	bpl.n	1ebc6 <__ssvfiscanf_r+0x206>
   1ec42:	f8db 2004 	ldr.w	r2, [fp, #4]
   1ec46:	3a01      	subs	r2, #1
   1ec48:	2a00      	cmp	r2, #0
   1ec4a:	f10a 0a01 	add.w	sl, sl, #1
   1ec4e:	f8cb 2004 	str.w	r2, [fp, #4]
   1ec52:	dcea      	bgt.n	1ec2a <__ssvfiscanf_r+0x26a>
   1ec54:	4659      	mov	r1, fp
   1ec56:	4638      	mov	r0, r7
   1ec58:	f7ff fe54 	bl	1e904 <__ssrefill_r>
   1ec5c:	2800      	cmp	r0, #0
   1ec5e:	d0e6      	beq.n	1ec2e <__ssvfiscanf_r+0x26e>
   1ec60:	9a05      	ldr	r2, [sp, #20]
   1ec62:	2a00      	cmp	r2, #0
   1ec64:	d09c      	beq.n	1eba0 <__ssvfiscanf_r+0x1e0>
   1ec66:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1ec6a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ec6e:	4613      	mov	r3, r2
   1ec70:	bf18      	it	ne
   1ec72:	f04f 33ff 	movne.w	r3, #4294967295
   1ec76:	9305      	str	r3, [sp, #20]
   1ec78:	9805      	ldr	r0, [sp, #20]
   1ec7a:	b059      	add	sp, #356	; 0x164
   1ec7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec80:	9303      	str	r3, [sp, #12]
   1ec82:	4b73      	ldr	r3, [pc, #460]	; (1ee50 <__ssvfiscanf_r+0x490>)
   1ec84:	9307      	str	r3, [sp, #28]
   1ec86:	230a      	movs	r3, #10
   1ec88:	9304      	str	r3, [sp, #16]
   1ec8a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ec8e:	2b00      	cmp	r3, #0
   1ec90:	f04f 0603 	mov.w	r6, #3
   1ec94:	dc95      	bgt.n	1ebc2 <__ssvfiscanf_r+0x202>
   1ec96:	4659      	mov	r1, fp
   1ec98:	4638      	mov	r0, r7
   1ec9a:	f7ff fe33 	bl	1e904 <__ssrefill_r>
   1ec9e:	2800      	cmp	r0, #0
   1eca0:	d08f      	beq.n	1ebc2 <__ssvfiscanf_r+0x202>
   1eca2:	e7dd      	b.n	1ec60 <__ssvfiscanf_r+0x2a0>
   1eca4:	9303      	str	r3, [sp, #12]
   1eca6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1ecaa:	2600      	movs	r6, #0
   1ecac:	e785      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ecae:	f896 8001 	ldrb.w	r8, [r6, #1]
   1ecb2:	f045 0504 	orr.w	r5, r5, #4
   1ecb6:	461e      	mov	r6, r3
   1ecb8:	e6d8      	b.n	1ea6c <__ssvfiscanf_r+0xac>
   1ecba:	9303      	str	r3, [sp, #12]
   1ecbc:	4b65      	ldr	r3, [pc, #404]	; (1ee54 <__ssvfiscanf_r+0x494>)
   1ecbe:	9307      	str	r3, [sp, #28]
   1ecc0:	230a      	movs	r3, #10
   1ecc2:	9304      	str	r3, [sp, #16]
   1ecc4:	2603      	movs	r6, #3
   1ecc6:	e778      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ecc8:	9303      	str	r3, [sp, #12]
   1ecca:	2602      	movs	r6, #2
   1eccc:	e775      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ecce:	9303      	str	r3, [sp, #12]
   1ecd0:	f445 7508 	orr.w	r5, r5, #544	; 0x220
   1ecd4:	4b5f      	ldr	r3, [pc, #380]	; (1ee54 <__ssvfiscanf_r+0x494>)
   1ecd6:	9307      	str	r3, [sp, #28]
   1ecd8:	2310      	movs	r3, #16
   1ecda:	9304      	str	r3, [sp, #16]
   1ecdc:	2603      	movs	r6, #3
   1ecde:	e76c      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ece0:	9303      	str	r3, [sp, #12]
   1ece2:	4b5c      	ldr	r3, [pc, #368]	; (1ee54 <__ssvfiscanf_r+0x494>)
   1ece4:	9307      	str	r3, [sp, #28]
   1ece6:	2308      	movs	r3, #8
   1ece8:	9304      	str	r3, [sp, #16]
   1ecea:	2603      	movs	r6, #3
   1ecec:	e765      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ecee:	9303      	str	r3, [sp, #12]
   1ecf0:	06eb      	lsls	r3, r5, #27
   1ecf2:	d478      	bmi.n	1ede6 <__ssvfiscanf_r+0x426>
   1ecf4:	076e      	lsls	r6, r5, #29
   1ecf6:	f100 82d4 	bmi.w	1f2a2 <__ssvfiscanf_r+0x8e2>
   1ecfa:	07ec      	lsls	r4, r5, #31
   1ecfc:	f100 82c0 	bmi.w	1f280 <__ssvfiscanf_r+0x8c0>
   1ed00:	07a8      	lsls	r0, r5, #30
   1ed02:	f140 82bd 	bpl.w	1f280 <__ssvfiscanf_r+0x8c0>
   1ed06:	9a06      	ldr	r2, [sp, #24]
   1ed08:	9e03      	ldr	r6, [sp, #12]
   1ed0a:	6813      	ldr	r3, [r2, #0]
   1ed0c:	4650      	mov	r0, sl
   1ed0e:	17c1      	asrs	r1, r0, #31
   1ed10:	3204      	adds	r2, #4
   1ed12:	9206      	str	r2, [sp, #24]
   1ed14:	e9c3 0100 	strd	r0, r1, [r3]
   1ed18:	4634      	mov	r4, r6
   1ed1a:	e697      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1ed1c:	f896 8001 	ldrb.w	r8, [r6, #1]
   1ed20:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ed24:	f000 82a5 	beq.w	1f272 <__ssvfiscanf_r+0x8b2>
   1ed28:	f045 0501 	orr.w	r5, r5, #1
   1ed2c:	461e      	mov	r6, r3
   1ed2e:	e69d      	b.n	1ea6c <__ssvfiscanf_r+0xac>
   1ed30:	4619      	mov	r1, r3
   1ed32:	a818      	add	r0, sp, #96	; 0x60
   1ed34:	f000 ff0e 	bl	1fb54 <__sccl>
   1ed38:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1ed3c:	9003      	str	r0, [sp, #12]
   1ed3e:	2601      	movs	r6, #1
   1ed40:	e73b      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ed42:	9303      	str	r3, [sp, #12]
   1ed44:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1ed48:	e7c4      	b.n	1ecd4 <__ssvfiscanf_r+0x314>
   1ed4a:	9303      	str	r3, [sp, #12]
   1ed4c:	f045 0501 	orr.w	r5, r5, #1
   1ed50:	e7c7      	b.n	1ece2 <__ssvfiscanf_r+0x322>
   1ed52:	f896 8001 	ldrb.w	r8, [r6, #1]
   1ed56:	f045 0502 	orr.w	r5, r5, #2
   1ed5a:	461e      	mov	r6, r3
   1ed5c:	e686      	b.n	1ea6c <__ssvfiscanf_r+0xac>
   1ed5e:	9303      	str	r3, [sp, #12]
   1ed60:	f045 0501 	orr.w	r5, r5, #1
   1ed64:	e78d      	b.n	1ec82 <__ssvfiscanf_r+0x2c2>
   1ed66:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1ed6a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
   1ed6e:	3c30      	subs	r4, #48	; 0x30
   1ed70:	f896 8001 	ldrb.w	r8, [r6, #1]
   1ed74:	461e      	mov	r6, r3
   1ed76:	e679      	b.n	1ea6c <__ssvfiscanf_r+0xac>
   1ed78:	f896 8001 	ldrb.w	r8, [r6, #1]
   1ed7c:	f045 0510 	orr.w	r5, r5, #16
   1ed80:	461e      	mov	r6, r3
   1ed82:	e673      	b.n	1ea6c <__ssvfiscanf_r+0xac>
   1ed84:	9303      	str	r3, [sp, #12]
   1ed86:	f000 fc89 	bl	1f69c <__locale_ctype_ptr>
   1ed8a:	4440      	add	r0, r8
   1ed8c:	7843      	ldrb	r3, [r0, #1]
   1ed8e:	f003 0303 	and.w	r3, r3, #3
   1ed92:	2b01      	cmp	r3, #1
   1ed94:	f47f af75 	bne.w	1ec82 <__ssvfiscanf_r+0x2c2>
   1ed98:	f045 0501 	orr.w	r5, r5, #1
   1ed9c:	e771      	b.n	1ec82 <__ssvfiscanf_r+0x2c2>
   1ed9e:	ab0c      	add	r3, sp, #48	; 0x30
   1eda0:	4618      	mov	r0, r3
   1eda2:	2208      	movs	r2, #8
   1eda4:	2100      	movs	r1, #0
   1eda6:	9308      	str	r3, [sp, #32]
   1eda8:	f7fd fc16 	bl	1c5d8 <memset>
   1edac:	f015 0310 	ands.w	r3, r5, #16
   1edb0:	9309      	str	r3, [sp, #36]	; 0x24
   1edb2:	f000 81e1 	beq.w	1f178 <__ssvfiscanf_r+0x7b8>
   1edb6:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   1edba:	2600      	movs	r6, #0
   1edbc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1edc0:	f000 fc6c 	bl	1f69c <__locale_ctype_ptr>
   1edc4:	f8db 3000 	ldr.w	r3, [fp]
   1edc8:	781b      	ldrb	r3, [r3, #0]
   1edca:	4403      	add	r3, r0
   1edcc:	785b      	ldrb	r3, [r3, #1]
   1edce:	071a      	lsls	r2, r3, #28
   1edd0:	d402      	bmi.n	1edd8 <__ssvfiscanf_r+0x418>
   1edd2:	2c00      	cmp	r4, #0
   1edd4:	f040 8270 	bne.w	1f2b8 <__ssvfiscanf_r+0x8f8>
   1edd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1edda:	b923      	cbnz	r3, 1ede6 <__ssvfiscanf_r+0x426>
   1eddc:	f8c9 3000 	str.w	r3, [r9]
   1ede0:	9b05      	ldr	r3, [sp, #20]
   1ede2:	3301      	adds	r3, #1
   1ede4:	9305      	str	r3, [sp, #20]
   1ede6:	9e03      	ldr	r6, [sp, #12]
   1ede8:	4634      	mov	r4, r6
   1edea:	e62f      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1edec:	2c00      	cmp	r4, #0
   1edee:	bf08      	it	eq
   1edf0:	f04f 34ff 	moveq.w	r4, #4294967295
   1edf4:	06e8      	lsls	r0, r5, #27
   1edf6:	f140 810b 	bpl.w	1f010 <__ssvfiscanf_r+0x650>
   1edfa:	f8db 2000 	ldr.w	r2, [fp]
   1edfe:	2500      	movs	r5, #0
   1ee00:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1ee04:	7813      	ldrb	r3, [r2, #0]
   1ee06:	f818 3003 	ldrb.w	r3, [r8, r3]
   1ee0a:	3201      	adds	r2, #1
   1ee0c:	b1db      	cbz	r3, 1ee46 <__ssvfiscanf_r+0x486>
   1ee0e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ee12:	f8cb 2000 	str.w	r2, [fp]
   1ee16:	3501      	adds	r5, #1
   1ee18:	3b01      	subs	r3, #1
   1ee1a:	42ac      	cmp	r4, r5
   1ee1c:	f8cb 3004 	str.w	r3, [fp, #4]
   1ee20:	f43f aeff 	beq.w	1ec22 <__ssvfiscanf_r+0x262>
   1ee24:	2b00      	cmp	r3, #0
   1ee26:	dced      	bgt.n	1ee04 <__ssvfiscanf_r+0x444>
   1ee28:	4659      	mov	r1, fp
   1ee2a:	4638      	mov	r0, r7
   1ee2c:	f7ff fd6a 	bl	1e904 <__ssrefill_r>
   1ee30:	2800      	cmp	r0, #0
   1ee32:	f47f aef6 	bne.w	1ec22 <__ssvfiscanf_r+0x262>
   1ee36:	f8db 2000 	ldr.w	r2, [fp]
   1ee3a:	7813      	ldrb	r3, [r2, #0]
   1ee3c:	f818 3003 	ldrb.w	r3, [r8, r3]
   1ee40:	3201      	adds	r2, #1
   1ee42:	2b00      	cmp	r3, #0
   1ee44:	d1e3      	bne.n	1ee0e <__ssvfiscanf_r+0x44e>
   1ee46:	2d00      	cmp	r5, #0
   1ee48:	f47f aeeb 	bne.w	1ec22 <__ssvfiscanf_r+0x262>
   1ee4c:	e604      	b.n	1ea58 <__ssvfiscanf_r+0x98>
   1ee4e:	bf00      	nop
   1ee50:	0001fcf1 	.word	0x0001fcf1
   1ee54:	0001dce5 	.word	0x0001dce5
   1ee58:	1e63      	subs	r3, r4, #1
   1ee5a:	2b26      	cmp	r3, #38	; 0x26
   1ee5c:	bf8c      	ite	hi
   1ee5e:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
   1ee62:	2200      	movls	r2, #0
   1ee64:	f04f 0900 	mov.w	r9, #0
   1ee68:	4611      	mov	r1, r2
   1ee6a:	ae0e      	add	r6, sp, #56	; 0x38
   1ee6c:	464b      	mov	r3, r9
   1ee6e:	46b9      	mov	r9, r7
   1ee70:	9f04      	ldr	r7, [sp, #16]
   1ee72:	4652      	mov	r2, sl
   1ee74:	bf88      	it	hi
   1ee76:	2427      	movhi	r4, #39	; 0x27
   1ee78:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
   1ee7c:	46b0      	mov	r8, r6
   1ee7e:	468a      	mov	sl, r1
   1ee80:	f8db 0000 	ldr.w	r0, [fp]
   1ee84:	f890 e000 	ldrb.w	lr, [r0]
   1ee88:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
   1ee8c:	294d      	cmp	r1, #77	; 0x4d
   1ee8e:	d842      	bhi.n	1ef16 <__ssvfiscanf_r+0x556>
   1ee90:	e8df f001 	tbb	[pc, r1]
   1ee94:	418e418e 	.word	0x418e418e
   1ee98:	5d5d6341 	.word	0x5d5d6341
   1ee9c:	5d5d5d5d 	.word	0x5d5d5d5d
   1eea0:	4188885d 	.word	0x4188885d
   1eea4:	41414141 	.word	0x41414141
   1eea8:	58584141 	.word	0x58584141
   1eeac:	58585858 	.word	0x58585858
   1eeb0:	41414141 	.word	0x41414141
   1eeb4:	41414141 	.word	0x41414141
   1eeb8:	41414141 	.word	0x41414141
   1eebc:	41414141 	.word	0x41414141
   1eec0:	41412741 	.word	0x41412741
   1eec4:	41414141 	.word	0x41414141
   1eec8:	58584141 	.word	0x58584141
   1eecc:	58585858 	.word	0x58585858
   1eed0:	41414141 	.word	0x41414141
   1eed4:	41414141 	.word	0x41414141
   1eed8:	41414141 	.word	0x41414141
   1eedc:	41414141 	.word	0x41414141
   1eee0:	2741      	.short	0x2741
   1eee2:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
   1eee6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1eeea:	d114      	bne.n	1ef16 <__ssvfiscanf_r+0x556>
   1eeec:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   1eef0:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
   1eef4:	2710      	movs	r7, #16
   1eef6:	f8db 1004 	ldr.w	r1, [fp, #4]
   1eefa:	f888 e000 	strb.w	lr, [r8]
   1eefe:	3901      	subs	r1, #1
   1ef00:	2900      	cmp	r1, #0
   1ef02:	f108 0801 	add.w	r8, r8, #1
   1ef06:	f8cb 1004 	str.w	r1, [fp, #4]
   1ef0a:	dd40      	ble.n	1ef8e <__ssvfiscanf_r+0x5ce>
   1ef0c:	3001      	adds	r0, #1
   1ef0e:	f8cb 0000 	str.w	r0, [fp]
   1ef12:	3c01      	subs	r4, #1
   1ef14:	d1b4      	bne.n	1ee80 <__ssvfiscanf_r+0x4c0>
   1ef16:	05e8      	lsls	r0, r5, #23
   1ef18:	9704      	str	r7, [sp, #16]
   1ef1a:	4692      	mov	sl, r2
   1ef1c:	464f      	mov	r7, r9
   1ef1e:	4699      	mov	r9, r3
   1ef20:	d505      	bpl.n	1ef2e <__ssvfiscanf_r+0x56e>
   1ef22:	45b0      	cmp	r8, r6
   1ef24:	f200 8194 	bhi.w	1f250 <__ssvfiscanf_r+0x890>
   1ef28:	45b0      	cmp	r8, r6
   1ef2a:	f43f ad95 	beq.w	1ea58 <__ssvfiscanf_r+0x98>
   1ef2e:	f015 0410 	ands.w	r4, r5, #16
   1ef32:	f000 80e5 	beq.w	1f100 <__ssvfiscanf_r+0x740>
   1ef36:	eba8 0606 	sub.w	r6, r8, r6
   1ef3a:	44b1      	add	r9, r6
   1ef3c:	9e03      	ldr	r6, [sp, #12]
   1ef3e:	44ca      	add	sl, r9
   1ef40:	4634      	mov	r4, r6
   1ef42:	e583      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1ef44:	2f0a      	cmp	r7, #10
   1ef46:	dde6      	ble.n	1ef16 <__ssvfiscanf_r+0x556>
   1ef48:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1ef4c:	e7d3      	b.n	1eef6 <__ssvfiscanf_r+0x536>
   1ef4e:	49b3      	ldr	r1, [pc, #716]	; (1f21c <__ssvfiscanf_r+0x85c>)
   1ef50:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1ef54:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1ef58:	e7cd      	b.n	1eef6 <__ssvfiscanf_r+0x536>
   1ef5a:	0529      	lsls	r1, r5, #20
   1ef5c:	d5cb      	bpl.n	1eef6 <__ssvfiscanf_r+0x536>
   1ef5e:	b917      	cbnz	r7, 1ef66 <__ssvfiscanf_r+0x5a6>
   1ef60:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1ef64:	2708      	movs	r7, #8
   1ef66:	0569      	lsls	r1, r5, #21
   1ef68:	f100 80fa 	bmi.w	1f160 <__ssvfiscanf_r+0x7a0>
   1ef6c:	f425 7560 	bic.w	r5, r5, #896	; 0x380
   1ef70:	f1ba 0f00 	cmp.w	sl, #0
   1ef74:	d002      	beq.n	1ef7c <__ssvfiscanf_r+0x5bc>
   1ef76:	f10a 3aff 	add.w	sl, sl, #4294967295
   1ef7a:	3401      	adds	r4, #1
   1ef7c:	f8db 1004 	ldr.w	r1, [fp, #4]
   1ef80:	3901      	subs	r1, #1
   1ef82:	2900      	cmp	r1, #0
   1ef84:	f103 0301 	add.w	r3, r3, #1
   1ef88:	f8cb 1004 	str.w	r1, [fp, #4]
   1ef8c:	dcbe      	bgt.n	1ef0c <__ssvfiscanf_r+0x54c>
   1ef8e:	4659      	mov	r1, fp
   1ef90:	4648      	mov	r0, r9
   1ef92:	9308      	str	r3, [sp, #32]
   1ef94:	9204      	str	r2, [sp, #16]
   1ef96:	f7ff fcb5 	bl	1e904 <__ssrefill_r>
   1ef9a:	9a04      	ldr	r2, [sp, #16]
   1ef9c:	9b08      	ldr	r3, [sp, #32]
   1ef9e:	2800      	cmp	r0, #0
   1efa0:	d0b7      	beq.n	1ef12 <__ssvfiscanf_r+0x552>
   1efa2:	e7b8      	b.n	1ef16 <__ssvfiscanf_r+0x556>
   1efa4:	499d      	ldr	r1, [pc, #628]	; (1f21c <__ssvfiscanf_r+0x85c>)
   1efa6:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1efaa:	2f08      	cmp	r7, #8
   1efac:	dccc      	bgt.n	1ef48 <__ssvfiscanf_r+0x588>
   1efae:	e7b2      	b.n	1ef16 <__ssvfiscanf_r+0x556>
   1efb0:	0629      	lsls	r1, r5, #24
   1efb2:	d5b0      	bpl.n	1ef16 <__ssvfiscanf_r+0x556>
   1efb4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   1efb8:	e79d      	b.n	1eef6 <__ssvfiscanf_r+0x536>
   1efba:	2c00      	cmp	r4, #0
   1efbc:	bf08      	it	eq
   1efbe:	f04f 34ff 	moveq.w	r4, #4294967295
   1efc2:	f015 0601 	ands.w	r6, r5, #1
   1efc6:	f47f aeea 	bne.w	1ed9e <__ssvfiscanf_r+0x3de>
   1efca:	06eb      	lsls	r3, r5, #27
   1efcc:	f140 80f4 	bpl.w	1f1b8 <__ssvfiscanf_r+0x7f8>
   1efd0:	f000 fb64 	bl	1f69c <__locale_ctype_ptr>
   1efd4:	f8db 3000 	ldr.w	r3, [fp]
   1efd8:	781a      	ldrb	r2, [r3, #0]
   1efda:	4410      	add	r0, r2
   1efdc:	3301      	adds	r3, #1
   1efde:	7842      	ldrb	r2, [r0, #1]
   1efe0:	0715      	lsls	r5, r2, #28
   1efe2:	d411      	bmi.n	1f008 <__ssvfiscanf_r+0x648>
   1efe4:	f8db 2004 	ldr.w	r2, [fp, #4]
   1efe8:	f8cb 3000 	str.w	r3, [fp]
   1efec:	3601      	adds	r6, #1
   1efee:	3a01      	subs	r2, #1
   1eff0:	42b4      	cmp	r4, r6
   1eff2:	f8cb 2004 	str.w	r2, [fp, #4]
   1eff6:	d007      	beq.n	1f008 <__ssvfiscanf_r+0x648>
   1eff8:	2a00      	cmp	r2, #0
   1effa:	dce9      	bgt.n	1efd0 <__ssvfiscanf_r+0x610>
   1effc:	4659      	mov	r1, fp
   1effe:	4638      	mov	r0, r7
   1f000:	f7ff fc80 	bl	1e904 <__ssrefill_r>
   1f004:	2800      	cmp	r0, #0
   1f006:	d0e3      	beq.n	1efd0 <__ssvfiscanf_r+0x610>
   1f008:	44b2      	add	sl, r6
   1f00a:	9e03      	ldr	r6, [sp, #12]
   1f00c:	4634      	mov	r4, r6
   1f00e:	e51d      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1f010:	9a06      	ldr	r2, [sp, #24]
   1f012:	6815      	ldr	r5, [r2, #0]
   1f014:	1d16      	adds	r6, r2, #4
   1f016:	46a9      	mov	r9, r5
   1f018:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1f01c:	f8db 3000 	ldr.w	r3, [fp]
   1f020:	781a      	ldrb	r2, [r3, #0]
   1f022:	f818 2002 	ldrb.w	r2, [r8, r2]
   1f026:	1c59      	adds	r1, r3, #1
   1f028:	b1c2      	cbz	r2, 1f05c <__ssvfiscanf_r+0x69c>
   1f02a:	f8db 2004 	ldr.w	r2, [fp, #4]
   1f02e:	f8cb 1000 	str.w	r1, [fp]
   1f032:	3a01      	subs	r2, #1
   1f034:	f8cb 2004 	str.w	r2, [fp, #4]
   1f038:	781b      	ldrb	r3, [r3, #0]
   1f03a:	f809 3b01 	strb.w	r3, [r9], #1
   1f03e:	3c01      	subs	r4, #1
   1f040:	d00c      	beq.n	1f05c <__ssvfiscanf_r+0x69c>
   1f042:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f046:	2b00      	cmp	r3, #0
   1f048:	dce8      	bgt.n	1f01c <__ssvfiscanf_r+0x65c>
   1f04a:	4659      	mov	r1, fp
   1f04c:	4638      	mov	r0, r7
   1f04e:	f7ff fc59 	bl	1e904 <__ssrefill_r>
   1f052:	2800      	cmp	r0, #0
   1f054:	d0e2      	beq.n	1f01c <__ssvfiscanf_r+0x65c>
   1f056:	454d      	cmp	r5, r9
   1f058:	f43f ae02 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f05c:	ebb9 0505 	subs.w	r5, r9, r5
   1f060:	f43f acfa 	beq.w	1ea58 <__ssvfiscanf_r+0x98>
   1f064:	9a05      	ldr	r2, [sp, #20]
   1f066:	9606      	str	r6, [sp, #24]
   1f068:	2300      	movs	r3, #0
   1f06a:	3201      	adds	r2, #1
   1f06c:	9205      	str	r2, [sp, #20]
   1f06e:	f889 3000 	strb.w	r3, [r9]
   1f072:	e5d6      	b.n	1ec22 <__ssvfiscanf_r+0x262>
   1f074:	ab0c      	add	r3, sp, #48	; 0x30
   1f076:	4618      	mov	r0, r3
   1f078:	2208      	movs	r2, #8
   1f07a:	2100      	movs	r1, #0
   1f07c:	9308      	str	r3, [sp, #32]
   1f07e:	f7fd faab 	bl	1c5d8 <memset>
   1f082:	f015 0310 	ands.w	r3, r5, #16
   1f086:	9309      	str	r3, [sp, #36]	; 0x24
   1f088:	d06d      	beq.n	1f166 <__ssvfiscanf_r+0x7a6>
   1f08a:	f04f 0900 	mov.w	r9, #0
   1f08e:	2c00      	cmp	r4, #0
   1f090:	f43f aea9 	beq.w	1ede6 <__ssvfiscanf_r+0x426>
   1f094:	2500      	movs	r5, #0
   1f096:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1f09a:	f000 faed 	bl	1f678 <__locale_mb_cur_max>
   1f09e:	4285      	cmp	r5, r0
   1f0a0:	f43f adde 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f0a4:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1f0a8:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f0ac:	f8cb 2000 	str.w	r2, [fp]
   1f0b0:	3b01      	subs	r3, #1
   1f0b2:	9a08      	ldr	r2, [sp, #32]
   1f0b4:	9200      	str	r2, [sp, #0]
   1f0b6:	1c6e      	adds	r6, r5, #1
   1f0b8:	f8cb 3004 	str.w	r3, [fp, #4]
   1f0bc:	f808 0005 	strb.w	r0, [r8, r5]
   1f0c0:	4633      	mov	r3, r6
   1f0c2:	4642      	mov	r2, r8
   1f0c4:	4649      	mov	r1, r9
   1f0c6:	4638      	mov	r0, r7
   1f0c8:	f000 faf6 	bl	1f6b8 <_mbrtowc_r>
   1f0cc:	1c43      	adds	r3, r0, #1
   1f0ce:	f43f adc7 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f0d2:	2800      	cmp	r0, #0
   1f0d4:	d15d      	bne.n	1f192 <__ssvfiscanf_r+0x7d2>
   1f0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f0d8:	2b00      	cmp	r3, #0
   1f0da:	d15e      	bne.n	1f19a <__ssvfiscanf_r+0x7da>
   1f0dc:	f8c9 3000 	str.w	r3, [r9]
   1f0e0:	44b2      	add	sl, r6
   1f0e2:	3c01      	subs	r4, #1
   1f0e4:	f109 0904 	add.w	r9, r9, #4
   1f0e8:	2500      	movs	r5, #0
   1f0ea:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f0ee:	2b00      	cmp	r3, #0
   1f0f0:	dd2d      	ble.n	1f14e <__ssvfiscanf_r+0x78e>
   1f0f2:	2c00      	cmp	r4, #0
   1f0f4:	d1d1      	bne.n	1f09a <__ssvfiscanf_r+0x6da>
   1f0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f0f8:	2b00      	cmp	r3, #0
   1f0fa:	f43f ae71 	beq.w	1ede0 <__ssvfiscanf_r+0x420>
   1f0fe:	e672      	b.n	1ede6 <__ssvfiscanf_r+0x426>
   1f100:	4622      	mov	r2, r4
   1f102:	4631      	mov	r1, r6
   1f104:	f888 4000 	strb.w	r4, [r8]
   1f108:	9b04      	ldr	r3, [sp, #16]
   1f10a:	9c07      	ldr	r4, [sp, #28]
   1f10c:	4638      	mov	r0, r7
   1f10e:	47a0      	blx	r4
   1f110:	06a9      	lsls	r1, r5, #26
   1f112:	d438      	bmi.n	1f186 <__ssvfiscanf_r+0x7c6>
   1f114:	076a      	lsls	r2, r5, #29
   1f116:	f100 80be 	bmi.w	1f296 <__ssvfiscanf_r+0x8d6>
   1f11a:	f015 0201 	ands.w	r2, r5, #1
   1f11e:	d132      	bne.n	1f186 <__ssvfiscanf_r+0x7c6>
   1f120:	07ab      	lsls	r3, r5, #30
   1f122:	d530      	bpl.n	1f186 <__ssvfiscanf_r+0x7c6>
   1f124:	9b07      	ldr	r3, [sp, #28]
   1f126:	4619      	mov	r1, r3
   1f128:	4b3d      	ldr	r3, [pc, #244]	; (1f220 <__ssvfiscanf_r+0x860>)
   1f12a:	4299      	cmp	r1, r3
   1f12c:	4638      	mov	r0, r7
   1f12e:	9b04      	ldr	r3, [sp, #16]
   1f130:	4631      	mov	r1, r6
   1f132:	f000 8105 	beq.w	1f340 <__ssvfiscanf_r+0x980>
   1f136:	f000 febb 	bl	1feb0 <_strtoll_r>
   1f13a:	9a06      	ldr	r2, [sp, #24]
   1f13c:	6813      	ldr	r3, [r2, #0]
   1f13e:	e9c3 0100 	strd	r0, r1, [r3]
   1f142:	3204      	adds	r2, #4
   1f144:	9206      	str	r2, [sp, #24]
   1f146:	9b05      	ldr	r3, [sp, #20]
   1f148:	3301      	adds	r3, #1
   1f14a:	9305      	str	r3, [sp, #20]
   1f14c:	e6f3      	b.n	1ef36 <__ssvfiscanf_r+0x576>
   1f14e:	4659      	mov	r1, fp
   1f150:	4638      	mov	r0, r7
   1f152:	f7ff fbd7 	bl	1e904 <__ssrefill_r>
   1f156:	2800      	cmp	r0, #0
   1f158:	d0cb      	beq.n	1f0f2 <__ssvfiscanf_r+0x732>
   1f15a:	2d00      	cmp	r5, #0
   1f15c:	d0cb      	beq.n	1f0f6 <__ssvfiscanf_r+0x736>
   1f15e:	e57f      	b.n	1ec60 <__ssvfiscanf_r+0x2a0>
   1f160:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
   1f164:	e6c7      	b.n	1eef6 <__ssvfiscanf_r+0x536>
   1f166:	9a06      	ldr	r2, [sp, #24]
   1f168:	4613      	mov	r3, r2
   1f16a:	3304      	adds	r3, #4
   1f16c:	f8d2 9000 	ldr.w	r9, [r2]
   1f170:	9306      	str	r3, [sp, #24]
   1f172:	2c00      	cmp	r4, #0
   1f174:	d18e      	bne.n	1f094 <__ssvfiscanf_r+0x6d4>
   1f176:	e633      	b.n	1ede0 <__ssvfiscanf_r+0x420>
   1f178:	9a06      	ldr	r2, [sp, #24]
   1f17a:	4613      	mov	r3, r2
   1f17c:	3304      	adds	r3, #4
   1f17e:	f8d2 9000 	ldr.w	r9, [r2]
   1f182:	9306      	str	r3, [sp, #24]
   1f184:	e619      	b.n	1edba <__ssvfiscanf_r+0x3fa>
   1f186:	9a06      	ldr	r2, [sp, #24]
   1f188:	6813      	ldr	r3, [r2, #0]
   1f18a:	3204      	adds	r2, #4
   1f18c:	9206      	str	r2, [sp, #24]
   1f18e:	6018      	str	r0, [r3, #0]
   1f190:	e7d9      	b.n	1f146 <__ssvfiscanf_r+0x786>
   1f192:	3002      	adds	r0, #2
   1f194:	d105      	bne.n	1f1a2 <__ssvfiscanf_r+0x7e2>
   1f196:	4635      	mov	r5, r6
   1f198:	e7a7      	b.n	1f0ea <__ssvfiscanf_r+0x72a>
   1f19a:	44b2      	add	sl, r6
   1f19c:	3c01      	subs	r4, #1
   1f19e:	4605      	mov	r5, r0
   1f1a0:	e7a3      	b.n	1f0ea <__ssvfiscanf_r+0x72a>
   1f1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f1a4:	44b2      	add	sl, r6
   1f1a6:	3c01      	subs	r4, #1
   1f1a8:	2b00      	cmp	r3, #0
   1f1aa:	d09b      	beq.n	1f0e4 <__ssvfiscanf_r+0x724>
   1f1ac:	2500      	movs	r5, #0
   1f1ae:	e79c      	b.n	1f0ea <__ssvfiscanf_r+0x72a>
   1f1b0:	2d00      	cmp	r5, #0
   1f1b2:	f47f ad36 	bne.w	1ec22 <__ssvfiscanf_r+0x262>
   1f1b6:	e553      	b.n	1ec60 <__ssvfiscanf_r+0x2a0>
   1f1b8:	9a06      	ldr	r2, [sp, #24]
   1f1ba:	6816      	ldr	r6, [r2, #0]
   1f1bc:	f102 0804 	add.w	r8, r2, #4
   1f1c0:	4635      	mov	r5, r6
   1f1c2:	f000 fa6b 	bl	1f69c <__locale_ctype_ptr>
   1f1c6:	f8db 2000 	ldr.w	r2, [fp]
   1f1ca:	7813      	ldrb	r3, [r2, #0]
   1f1cc:	4418      	add	r0, r3
   1f1ce:	1c51      	adds	r1, r2, #1
   1f1d0:	7843      	ldrb	r3, [r0, #1]
   1f1d2:	0718      	lsls	r0, r3, #28
   1f1d4:	d415      	bmi.n	1f202 <__ssvfiscanf_r+0x842>
   1f1d6:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f1da:	f8cb 1000 	str.w	r1, [fp]
   1f1de:	3b01      	subs	r3, #1
   1f1e0:	f8cb 3004 	str.w	r3, [fp, #4]
   1f1e4:	7813      	ldrb	r3, [r2, #0]
   1f1e6:	f805 3b01 	strb.w	r3, [r5], #1
   1f1ea:	3c01      	subs	r4, #1
   1f1ec:	d009      	beq.n	1f202 <__ssvfiscanf_r+0x842>
   1f1ee:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f1f2:	2b00      	cmp	r3, #0
   1f1f4:	dce5      	bgt.n	1f1c2 <__ssvfiscanf_r+0x802>
   1f1f6:	4659      	mov	r1, fp
   1f1f8:	4638      	mov	r0, r7
   1f1fa:	f7ff fb83 	bl	1e904 <__ssrefill_r>
   1f1fe:	2800      	cmp	r0, #0
   1f200:	d0df      	beq.n	1f1c2 <__ssvfiscanf_r+0x802>
   1f202:	1bae      	subs	r6, r5, r6
   1f204:	9a05      	ldr	r2, [sp, #20]
   1f206:	f8cd 8018 	str.w	r8, [sp, #24]
   1f20a:	44b2      	add	sl, r6
   1f20c:	9e03      	ldr	r6, [sp, #12]
   1f20e:	2300      	movs	r3, #0
   1f210:	3201      	adds	r2, #1
   1f212:	9205      	str	r2, [sp, #20]
   1f214:	702b      	strb	r3, [r5, #0]
   1f216:	4634      	mov	r4, r6
   1f218:	e418      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1f21a:	bf00      	nop
   1f21c:	0002257c 	.word	0x0002257c
   1f220:	0001dce5 	.word	0x0001dce5
   1f224:	9d06      	ldr	r5, [sp, #24]
   1f226:	4623      	mov	r3, r4
   1f228:	6829      	ldr	r1, [r5, #0]
   1f22a:	f8cd b000 	str.w	fp, [sp]
   1f22e:	2201      	movs	r2, #1
   1f230:	4638      	mov	r0, r7
   1f232:	f7ff fb85 	bl	1e940 <_sfread_r>
   1f236:	1d2e      	adds	r6, r5, #4
   1f238:	2800      	cmp	r0, #0
   1f23a:	f43f ad11 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f23e:	9b05      	ldr	r3, [sp, #20]
   1f240:	9606      	str	r6, [sp, #24]
   1f242:	9e03      	ldr	r6, [sp, #12]
   1f244:	3301      	adds	r3, #1
   1f246:	4482      	add	sl, r0
   1f248:	9305      	str	r3, [sp, #20]
   1f24a:	4634      	mov	r4, r6
   1f24c:	f7ff bbfe 	b.w	1ea4c <__ssvfiscanf_r+0x8c>
   1f250:	f818 1c01 	ldrb.w	r1, [r8, #-1]
   1f254:	465a      	mov	r2, fp
   1f256:	4638      	mov	r0, r7
   1f258:	f7ff fb14 	bl	1e884 <_sungetc_r>
   1f25c:	f108 38ff 	add.w	r8, r8, #4294967295
   1f260:	e662      	b.n	1ef28 <__ssvfiscanf_r+0x568>
   1f262:	4659      	mov	r1, fp
   1f264:	4638      	mov	r0, r7
   1f266:	f7ff fb4d 	bl	1e904 <__ssrefill_r>
   1f26a:	2800      	cmp	r0, #0
   1f26c:	f43f ac84 	beq.w	1eb78 <__ssvfiscanf_r+0x1b8>
   1f270:	e4f6      	b.n	1ec60 <__ssvfiscanf_r+0x2a0>
   1f272:	f896 8002 	ldrb.w	r8, [r6, #2]
   1f276:	f045 0502 	orr.w	r5, r5, #2
   1f27a:	3602      	adds	r6, #2
   1f27c:	f7ff bbf6 	b.w	1ea6c <__ssvfiscanf_r+0xac>
   1f280:	9a06      	ldr	r2, [sp, #24]
   1f282:	9e03      	ldr	r6, [sp, #12]
   1f284:	6813      	ldr	r3, [r2, #0]
   1f286:	f8c3 a000 	str.w	sl, [r3]
   1f28a:	4613      	mov	r3, r2
   1f28c:	3304      	adds	r3, #4
   1f28e:	9306      	str	r3, [sp, #24]
   1f290:	4634      	mov	r4, r6
   1f292:	f7ff bbdb 	b.w	1ea4c <__ssvfiscanf_r+0x8c>
   1f296:	9a06      	ldr	r2, [sp, #24]
   1f298:	6813      	ldr	r3, [r2, #0]
   1f29a:	3204      	adds	r2, #4
   1f29c:	9206      	str	r2, [sp, #24]
   1f29e:	8018      	strh	r0, [r3, #0]
   1f2a0:	e751      	b.n	1f146 <__ssvfiscanf_r+0x786>
   1f2a2:	9a06      	ldr	r2, [sp, #24]
   1f2a4:	9e03      	ldr	r6, [sp, #12]
   1f2a6:	6813      	ldr	r3, [r2, #0]
   1f2a8:	f8a3 a000 	strh.w	sl, [r3]
   1f2ac:	4613      	mov	r3, r2
   1f2ae:	3304      	adds	r3, #4
   1f2b0:	9306      	str	r3, [sp, #24]
   1f2b2:	4634      	mov	r4, r6
   1f2b4:	f7ff bbca 	b.w	1ea4c <__ssvfiscanf_r+0x8c>
   1f2b8:	f000 f9de 	bl	1f678 <__locale_mb_cur_max>
   1f2bc:	4286      	cmp	r6, r0
   1f2be:	f43f accf 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f2c2:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1f2c6:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f2ca:	f8cb 2000 	str.w	r2, [fp]
   1f2ce:	3b01      	subs	r3, #1
   1f2d0:	9a08      	ldr	r2, [sp, #32]
   1f2d2:	9200      	str	r2, [sp, #0]
   1f2d4:	1c75      	adds	r5, r6, #1
   1f2d6:	f8cb 3004 	str.w	r3, [fp, #4]
   1f2da:	4649      	mov	r1, r9
   1f2dc:	f808 0006 	strb.w	r0, [r8, r6]
   1f2e0:	462b      	mov	r3, r5
   1f2e2:	4642      	mov	r2, r8
   1f2e4:	4638      	mov	r0, r7
   1f2e6:	f000 f9e7 	bl	1f6b8 <_mbrtowc_r>
   1f2ea:	1c41      	adds	r1, r0, #1
   1f2ec:	f43f acb8 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f2f0:	b198      	cbz	r0, 1f31a <__ssvfiscanf_r+0x95a>
   1f2f2:	3002      	adds	r0, #2
   1f2f4:	bf08      	it	eq
   1f2f6:	462e      	moveq	r6, r5
   1f2f8:	d12e      	bne.n	1f358 <__ssvfiscanf_r+0x998>
   1f2fa:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f2fe:	2b00      	cmp	r3, #0
   1f300:	f73f ad5e 	bgt.w	1edc0 <__ssvfiscanf_r+0x400>
   1f304:	4659      	mov	r1, fp
   1f306:	4638      	mov	r0, r7
   1f308:	f7ff fafc 	bl	1e904 <__ssrefill_r>
   1f30c:	2800      	cmp	r0, #0
   1f30e:	f43f ad57 	beq.w	1edc0 <__ssvfiscanf_r+0x400>
   1f312:	2e00      	cmp	r6, #0
   1f314:	f47f aca4 	bne.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f318:	e55e      	b.n	1edd8 <__ssvfiscanf_r+0x418>
   1f31a:	f8c9 0000 	str.w	r0, [r9]
   1f31e:	f000 f99d 	bl	1f65c <iswspace>
   1f322:	4606      	mov	r6, r0
   1f324:	b178      	cbz	r0, 1f346 <__ssvfiscanf_r+0x986>
   1f326:	2d00      	cmp	r5, #0
   1f328:	f43f ad56 	beq.w	1edd8 <__ssvfiscanf_r+0x418>
   1f32c:	4445      	add	r5, r8
   1f32e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1f332:	465a      	mov	r2, fp
   1f334:	4638      	mov	r0, r7
   1f336:	f7ff faa5 	bl	1e884 <_sungetc_r>
   1f33a:	4545      	cmp	r5, r8
   1f33c:	d1f7      	bne.n	1f32e <__ssvfiscanf_r+0x96e>
   1f33e:	e54b      	b.n	1edd8 <__ssvfiscanf_r+0x418>
   1f340:	f000 fea6 	bl	20090 <_strtoull_r>
   1f344:	e6f9      	b.n	1f13a <__ssvfiscanf_r+0x77a>
   1f346:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f348:	44aa      	add	sl, r5
   1f34a:	3c01      	subs	r4, #1
   1f34c:	2b00      	cmp	r3, #0
   1f34e:	d1d4      	bne.n	1f2fa <__ssvfiscanf_r+0x93a>
   1f350:	f109 0904 	add.w	r9, r9, #4
   1f354:	461e      	mov	r6, r3
   1f356:	e7d0      	b.n	1f2fa <__ssvfiscanf_r+0x93a>
   1f358:	f8d9 0000 	ldr.w	r0, [r9]
   1f35c:	e7df      	b.n	1f31e <__ssvfiscanf_r+0x95e>
   1f35e:	bf00      	nop

0001f360 <__submore>:
   1f360:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1f364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f368:	460c      	mov	r4, r1
   1f36a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1f36c:	4299      	cmp	r1, r3
   1f36e:	d014      	beq.n	1f39a <__submore+0x3a>
   1f370:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1f372:	0077      	lsls	r7, r6, #1
   1f374:	463a      	mov	r2, r7
   1f376:	f000 fa47 	bl	1f808 <_realloc_r>
   1f37a:	4605      	mov	r5, r0
   1f37c:	b340      	cbz	r0, 1f3d0 <__submore+0x70>
   1f37e:	eb00 0806 	add.w	r8, r0, r6
   1f382:	4632      	mov	r2, r6
   1f384:	4640      	mov	r0, r8
   1f386:	4629      	mov	r1, r5
   1f388:	f7fd f88c 	bl	1c4a4 <memcpy>
   1f38c:	f8c4 8000 	str.w	r8, [r4]
   1f390:	6325      	str	r5, [r4, #48]	; 0x30
   1f392:	6367      	str	r7, [r4, #52]	; 0x34
   1f394:	2000      	movs	r0, #0
   1f396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f39a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1f39e:	f7fd fe5d 	bl	1d05c <_malloc_r>
   1f3a2:	b1a8      	cbz	r0, 1f3d0 <__submore+0x70>
   1f3a4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f3a8:	6320      	str	r0, [r4, #48]	; 0x30
   1f3aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f3ae:	6362      	str	r2, [r4, #52]	; 0x34
   1f3b0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1f3b4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1f3b8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1f3bc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1f3c0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   1f3c4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   1f3c8:	6020      	str	r0, [r4, #0]
   1f3ca:	2000      	movs	r0, #0
   1f3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f3d0:	f04f 30ff 	mov.w	r0, #4294967295
   1f3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f3d8 <__env_lock>:
   1f3d8:	4801      	ldr	r0, [pc, #4]	; (1f3e0 <__env_lock+0x8>)
   1f3da:	f7fd be39 	b.w	1d050 <__retarget_lock_acquire_recursive>
   1f3de:	bf00      	nop
   1f3e0:	2000a9c0 	.word	0x2000a9c0

0001f3e4 <__env_unlock>:
   1f3e4:	4801      	ldr	r0, [pc, #4]	; (1f3ec <__env_unlock+0x8>)
   1f3e6:	f7fd be37 	b.w	1d058 <__retarget_lock_release_recursive>
   1f3ea:	bf00      	nop
   1f3ec:	2000a9c0 	.word	0x2000a9c0

0001f3f0 <_malloc_trim_r>:
   1f3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3f2:	4f24      	ldr	r7, [pc, #144]	; (1f484 <_malloc_trim_r+0x94>)
   1f3f4:	460c      	mov	r4, r1
   1f3f6:	4606      	mov	r6, r0
   1f3f8:	f7fe f932 	bl	1d660 <__malloc_lock>
   1f3fc:	68bb      	ldr	r3, [r7, #8]
   1f3fe:	685d      	ldr	r5, [r3, #4]
   1f400:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1f404:	310f      	adds	r1, #15
   1f406:	f025 0503 	bic.w	r5, r5, #3
   1f40a:	4429      	add	r1, r5
   1f40c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1f410:	f021 010f 	bic.w	r1, r1, #15
   1f414:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   1f418:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1f41c:	db07      	blt.n	1f42e <_malloc_trim_r+0x3e>
   1f41e:	2100      	movs	r1, #0
   1f420:	4630      	mov	r0, r6
   1f422:	f7fe f929 	bl	1d678 <_sbrk_r>
   1f426:	68bb      	ldr	r3, [r7, #8]
   1f428:	442b      	add	r3, r5
   1f42a:	4298      	cmp	r0, r3
   1f42c:	d004      	beq.n	1f438 <_malloc_trim_r+0x48>
   1f42e:	4630      	mov	r0, r6
   1f430:	f7fe f91c 	bl	1d66c <__malloc_unlock>
   1f434:	2000      	movs	r0, #0
   1f436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f438:	4261      	negs	r1, r4
   1f43a:	4630      	mov	r0, r6
   1f43c:	f7fe f91c 	bl	1d678 <_sbrk_r>
   1f440:	3001      	adds	r0, #1
   1f442:	d00d      	beq.n	1f460 <_malloc_trim_r+0x70>
   1f444:	4b10      	ldr	r3, [pc, #64]	; (1f488 <_malloc_trim_r+0x98>)
   1f446:	68ba      	ldr	r2, [r7, #8]
   1f448:	6819      	ldr	r1, [r3, #0]
   1f44a:	1b2d      	subs	r5, r5, r4
   1f44c:	f045 0501 	orr.w	r5, r5, #1
   1f450:	4630      	mov	r0, r6
   1f452:	1b09      	subs	r1, r1, r4
   1f454:	6055      	str	r5, [r2, #4]
   1f456:	6019      	str	r1, [r3, #0]
   1f458:	f7fe f908 	bl	1d66c <__malloc_unlock>
   1f45c:	2001      	movs	r0, #1
   1f45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f460:	2100      	movs	r1, #0
   1f462:	4630      	mov	r0, r6
   1f464:	f7fe f908 	bl	1d678 <_sbrk_r>
   1f468:	68ba      	ldr	r2, [r7, #8]
   1f46a:	1a83      	subs	r3, r0, r2
   1f46c:	2b0f      	cmp	r3, #15
   1f46e:	ddde      	ble.n	1f42e <_malloc_trim_r+0x3e>
   1f470:	4c06      	ldr	r4, [pc, #24]	; (1f48c <_malloc_trim_r+0x9c>)
   1f472:	4905      	ldr	r1, [pc, #20]	; (1f488 <_malloc_trim_r+0x98>)
   1f474:	6824      	ldr	r4, [r4, #0]
   1f476:	f043 0301 	orr.w	r3, r3, #1
   1f47a:	1b00      	subs	r0, r0, r4
   1f47c:	6053      	str	r3, [r2, #4]
   1f47e:	6008      	str	r0, [r1, #0]
   1f480:	e7d5      	b.n	1f42e <_malloc_trim_r+0x3e>
   1f482:	bf00      	nop
   1f484:	200006c4 	.word	0x200006c4
   1f488:	2000a6d4 	.word	0x2000a6d4
   1f48c:	20000acc 	.word	0x20000acc

0001f490 <_free_r>:
   1f490:	2900      	cmp	r1, #0
   1f492:	d044      	beq.n	1f51e <_free_r+0x8e>
   1f494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f498:	460d      	mov	r5, r1
   1f49a:	4680      	mov	r8, r0
   1f49c:	f7fe f8e0 	bl	1d660 <__malloc_lock>
   1f4a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   1f4a4:	4969      	ldr	r1, [pc, #420]	; (1f64c <_free_r+0x1bc>)
   1f4a6:	f027 0301 	bic.w	r3, r7, #1
   1f4aa:	f1a5 0408 	sub.w	r4, r5, #8
   1f4ae:	18e2      	adds	r2, r4, r3
   1f4b0:	688e      	ldr	r6, [r1, #8]
   1f4b2:	6850      	ldr	r0, [r2, #4]
   1f4b4:	42b2      	cmp	r2, r6
   1f4b6:	f020 0003 	bic.w	r0, r0, #3
   1f4ba:	d05e      	beq.n	1f57a <_free_r+0xea>
   1f4bc:	07fe      	lsls	r6, r7, #31
   1f4be:	6050      	str	r0, [r2, #4]
   1f4c0:	d40b      	bmi.n	1f4da <_free_r+0x4a>
   1f4c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
   1f4c6:	1be4      	subs	r4, r4, r7
   1f4c8:	f101 0e08 	add.w	lr, r1, #8
   1f4cc:	68a5      	ldr	r5, [r4, #8]
   1f4ce:	4575      	cmp	r5, lr
   1f4d0:	443b      	add	r3, r7
   1f4d2:	d06d      	beq.n	1f5b0 <_free_r+0x120>
   1f4d4:	68e7      	ldr	r7, [r4, #12]
   1f4d6:	60ef      	str	r7, [r5, #12]
   1f4d8:	60bd      	str	r5, [r7, #8]
   1f4da:	1815      	adds	r5, r2, r0
   1f4dc:	686d      	ldr	r5, [r5, #4]
   1f4de:	07ed      	lsls	r5, r5, #31
   1f4e0:	d53e      	bpl.n	1f560 <_free_r+0xd0>
   1f4e2:	f043 0201 	orr.w	r2, r3, #1
   1f4e6:	6062      	str	r2, [r4, #4]
   1f4e8:	50e3      	str	r3, [r4, r3]
   1f4ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1f4ee:	d217      	bcs.n	1f520 <_free_r+0x90>
   1f4f0:	08db      	lsrs	r3, r3, #3
   1f4f2:	1c58      	adds	r0, r3, #1
   1f4f4:	109a      	asrs	r2, r3, #2
   1f4f6:	684d      	ldr	r5, [r1, #4]
   1f4f8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   1f4fc:	60a7      	str	r7, [r4, #8]
   1f4fe:	2301      	movs	r3, #1
   1f500:	4093      	lsls	r3, r2
   1f502:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   1f506:	432b      	orrs	r3, r5
   1f508:	3a08      	subs	r2, #8
   1f50a:	60e2      	str	r2, [r4, #12]
   1f50c:	604b      	str	r3, [r1, #4]
   1f50e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   1f512:	60fc      	str	r4, [r7, #12]
   1f514:	4640      	mov	r0, r8
   1f516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f51a:	f7fe b8a7 	b.w	1d66c <__malloc_unlock>
   1f51e:	4770      	bx	lr
   1f520:	0a5a      	lsrs	r2, r3, #9
   1f522:	2a04      	cmp	r2, #4
   1f524:	d852      	bhi.n	1f5cc <_free_r+0x13c>
   1f526:	099a      	lsrs	r2, r3, #6
   1f528:	f102 0739 	add.w	r7, r2, #57	; 0x39
   1f52c:	00ff      	lsls	r7, r7, #3
   1f52e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   1f532:	19c8      	adds	r0, r1, r7
   1f534:	59ca      	ldr	r2, [r1, r7]
   1f536:	3808      	subs	r0, #8
   1f538:	4290      	cmp	r0, r2
   1f53a:	d04f      	beq.n	1f5dc <_free_r+0x14c>
   1f53c:	6851      	ldr	r1, [r2, #4]
   1f53e:	f021 0103 	bic.w	r1, r1, #3
   1f542:	428b      	cmp	r3, r1
   1f544:	d232      	bcs.n	1f5ac <_free_r+0x11c>
   1f546:	6892      	ldr	r2, [r2, #8]
   1f548:	4290      	cmp	r0, r2
   1f54a:	d1f7      	bne.n	1f53c <_free_r+0xac>
   1f54c:	68c3      	ldr	r3, [r0, #12]
   1f54e:	60a0      	str	r0, [r4, #8]
   1f550:	60e3      	str	r3, [r4, #12]
   1f552:	609c      	str	r4, [r3, #8]
   1f554:	60c4      	str	r4, [r0, #12]
   1f556:	4640      	mov	r0, r8
   1f558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f55c:	f7fe b886 	b.w	1d66c <__malloc_unlock>
   1f560:	6895      	ldr	r5, [r2, #8]
   1f562:	4f3b      	ldr	r7, [pc, #236]	; (1f650 <_free_r+0x1c0>)
   1f564:	42bd      	cmp	r5, r7
   1f566:	4403      	add	r3, r0
   1f568:	d040      	beq.n	1f5ec <_free_r+0x15c>
   1f56a:	68d0      	ldr	r0, [r2, #12]
   1f56c:	60e8      	str	r0, [r5, #12]
   1f56e:	f043 0201 	orr.w	r2, r3, #1
   1f572:	6085      	str	r5, [r0, #8]
   1f574:	6062      	str	r2, [r4, #4]
   1f576:	50e3      	str	r3, [r4, r3]
   1f578:	e7b7      	b.n	1f4ea <_free_r+0x5a>
   1f57a:	07ff      	lsls	r7, r7, #31
   1f57c:	4403      	add	r3, r0
   1f57e:	d407      	bmi.n	1f590 <_free_r+0x100>
   1f580:	f855 2c08 	ldr.w	r2, [r5, #-8]
   1f584:	1aa4      	subs	r4, r4, r2
   1f586:	4413      	add	r3, r2
   1f588:	68a0      	ldr	r0, [r4, #8]
   1f58a:	68e2      	ldr	r2, [r4, #12]
   1f58c:	60c2      	str	r2, [r0, #12]
   1f58e:	6090      	str	r0, [r2, #8]
   1f590:	4a30      	ldr	r2, [pc, #192]	; (1f654 <_free_r+0x1c4>)
   1f592:	6812      	ldr	r2, [r2, #0]
   1f594:	f043 0001 	orr.w	r0, r3, #1
   1f598:	4293      	cmp	r3, r2
   1f59a:	6060      	str	r0, [r4, #4]
   1f59c:	608c      	str	r4, [r1, #8]
   1f59e:	d3b9      	bcc.n	1f514 <_free_r+0x84>
   1f5a0:	4b2d      	ldr	r3, [pc, #180]	; (1f658 <_free_r+0x1c8>)
   1f5a2:	4640      	mov	r0, r8
   1f5a4:	6819      	ldr	r1, [r3, #0]
   1f5a6:	f7ff ff23 	bl	1f3f0 <_malloc_trim_r>
   1f5aa:	e7b3      	b.n	1f514 <_free_r+0x84>
   1f5ac:	4610      	mov	r0, r2
   1f5ae:	e7cd      	b.n	1f54c <_free_r+0xbc>
   1f5b0:	1811      	adds	r1, r2, r0
   1f5b2:	6849      	ldr	r1, [r1, #4]
   1f5b4:	07c9      	lsls	r1, r1, #31
   1f5b6:	d444      	bmi.n	1f642 <_free_r+0x1b2>
   1f5b8:	6891      	ldr	r1, [r2, #8]
   1f5ba:	68d2      	ldr	r2, [r2, #12]
   1f5bc:	60ca      	str	r2, [r1, #12]
   1f5be:	4403      	add	r3, r0
   1f5c0:	f043 0001 	orr.w	r0, r3, #1
   1f5c4:	6091      	str	r1, [r2, #8]
   1f5c6:	6060      	str	r0, [r4, #4]
   1f5c8:	50e3      	str	r3, [r4, r3]
   1f5ca:	e7a3      	b.n	1f514 <_free_r+0x84>
   1f5cc:	2a14      	cmp	r2, #20
   1f5ce:	d816      	bhi.n	1f5fe <_free_r+0x16e>
   1f5d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   1f5d4:	00ff      	lsls	r7, r7, #3
   1f5d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   1f5da:	e7aa      	b.n	1f532 <_free_r+0xa2>
   1f5dc:	10aa      	asrs	r2, r5, #2
   1f5de:	2301      	movs	r3, #1
   1f5e0:	684d      	ldr	r5, [r1, #4]
   1f5e2:	4093      	lsls	r3, r2
   1f5e4:	432b      	orrs	r3, r5
   1f5e6:	604b      	str	r3, [r1, #4]
   1f5e8:	4603      	mov	r3, r0
   1f5ea:	e7b0      	b.n	1f54e <_free_r+0xbe>
   1f5ec:	f043 0201 	orr.w	r2, r3, #1
   1f5f0:	614c      	str	r4, [r1, #20]
   1f5f2:	610c      	str	r4, [r1, #16]
   1f5f4:	60e5      	str	r5, [r4, #12]
   1f5f6:	60a5      	str	r5, [r4, #8]
   1f5f8:	6062      	str	r2, [r4, #4]
   1f5fa:	50e3      	str	r3, [r4, r3]
   1f5fc:	e78a      	b.n	1f514 <_free_r+0x84>
   1f5fe:	2a54      	cmp	r2, #84	; 0x54
   1f600:	d806      	bhi.n	1f610 <_free_r+0x180>
   1f602:	0b1a      	lsrs	r2, r3, #12
   1f604:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   1f608:	00ff      	lsls	r7, r7, #3
   1f60a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   1f60e:	e790      	b.n	1f532 <_free_r+0xa2>
   1f610:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1f614:	d806      	bhi.n	1f624 <_free_r+0x194>
   1f616:	0bda      	lsrs	r2, r3, #15
   1f618:	f102 0778 	add.w	r7, r2, #120	; 0x78
   1f61c:	00ff      	lsls	r7, r7, #3
   1f61e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   1f622:	e786      	b.n	1f532 <_free_r+0xa2>
   1f624:	f240 5054 	movw	r0, #1364	; 0x554
   1f628:	4282      	cmp	r2, r0
   1f62a:	d806      	bhi.n	1f63a <_free_r+0x1aa>
   1f62c:	0c9a      	lsrs	r2, r3, #18
   1f62e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   1f632:	00ff      	lsls	r7, r7, #3
   1f634:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   1f638:	e77b      	b.n	1f532 <_free_r+0xa2>
   1f63a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   1f63e:	257e      	movs	r5, #126	; 0x7e
   1f640:	e777      	b.n	1f532 <_free_r+0xa2>
   1f642:	f043 0101 	orr.w	r1, r3, #1
   1f646:	6061      	str	r1, [r4, #4]
   1f648:	6013      	str	r3, [r2, #0]
   1f64a:	e763      	b.n	1f514 <_free_r+0x84>
   1f64c:	200006c4 	.word	0x200006c4
   1f650:	200006cc 	.word	0x200006cc
   1f654:	20000ad0 	.word	0x20000ad0
   1f658:	2000a704 	.word	0x2000a704

0001f65c <iswspace>:
   1f65c:	28ff      	cmp	r0, #255	; 0xff
   1f65e:	d901      	bls.n	1f664 <iswspace+0x8>
   1f660:	2000      	movs	r0, #0
   1f662:	4770      	bx	lr
   1f664:	b510      	push	{r4, lr}
   1f666:	4604      	mov	r4, r0
   1f668:	f000 f818 	bl	1f69c <__locale_ctype_ptr>
   1f66c:	4420      	add	r0, r4
   1f66e:	7840      	ldrb	r0, [r0, #1]
   1f670:	f000 0008 	and.w	r0, r0, #8
   1f674:	bd10      	pop	{r4, pc}
   1f676:	bf00      	nop

0001f678 <__locale_mb_cur_max>:
   1f678:	4b04      	ldr	r3, [pc, #16]	; (1f68c <__locale_mb_cur_max+0x14>)
   1f67a:	4a05      	ldr	r2, [pc, #20]	; (1f690 <__locale_mb_cur_max+0x18>)
   1f67c:	681b      	ldr	r3, [r3, #0]
   1f67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f680:	2b00      	cmp	r3, #0
   1f682:	bf08      	it	eq
   1f684:	4613      	moveq	r3, r2
   1f686:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1f68a:	4770      	bx	lr
   1f68c:	20000248 	.word	0x20000248
   1f690:	20000ad8 	.word	0x20000ad8

0001f694 <__locale_ctype_ptr_l>:
   1f694:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1f698:	4770      	bx	lr
   1f69a:	bf00      	nop

0001f69c <__locale_ctype_ptr>:
   1f69c:	4b04      	ldr	r3, [pc, #16]	; (1f6b0 <__locale_ctype_ptr+0x14>)
   1f69e:	4a05      	ldr	r2, [pc, #20]	; (1f6b4 <__locale_ctype_ptr+0x18>)
   1f6a0:	681b      	ldr	r3, [r3, #0]
   1f6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f6a4:	2b00      	cmp	r3, #0
   1f6a6:	bf08      	it	eq
   1f6a8:	4613      	moveq	r3, r2
   1f6aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1f6ae:	4770      	bx	lr
   1f6b0:	20000248 	.word	0x20000248
   1f6b4:	20000ad8 	.word	0x20000ad8

0001f6b8 <_mbrtowc_r>:
   1f6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f6ba:	b083      	sub	sp, #12
   1f6bc:	4607      	mov	r7, r0
   1f6be:	9d08      	ldr	r5, [sp, #32]
   1f6c0:	b192      	cbz	r2, 1f6e8 <_mbrtowc_r+0x30>
   1f6c2:	4c11      	ldr	r4, [pc, #68]	; (1f708 <_mbrtowc_r+0x50>)
   1f6c4:	4e11      	ldr	r6, [pc, #68]	; (1f70c <_mbrtowc_r+0x54>)
   1f6c6:	6824      	ldr	r4, [r4, #0]
   1f6c8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1f6ca:	9500      	str	r5, [sp, #0]
   1f6cc:	2c00      	cmp	r4, #0
   1f6ce:	bf08      	it	eq
   1f6d0:	4634      	moveq	r4, r6
   1f6d2:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   1f6d6:	47a0      	blx	r4
   1f6d8:	1c43      	adds	r3, r0, #1
   1f6da:	d103      	bne.n	1f6e4 <_mbrtowc_r+0x2c>
   1f6dc:	2200      	movs	r2, #0
   1f6de:	238a      	movs	r3, #138	; 0x8a
   1f6e0:	602a      	str	r2, [r5, #0]
   1f6e2:	603b      	str	r3, [r7, #0]
   1f6e4:	b003      	add	sp, #12
   1f6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f6e8:	4b07      	ldr	r3, [pc, #28]	; (1f708 <_mbrtowc_r+0x50>)
   1f6ea:	4908      	ldr	r1, [pc, #32]	; (1f70c <_mbrtowc_r+0x54>)
   1f6ec:	681b      	ldr	r3, [r3, #0]
   1f6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f6f0:	9500      	str	r5, [sp, #0]
   1f6f2:	2b00      	cmp	r3, #0
   1f6f4:	bf08      	it	eq
   1f6f6:	460b      	moveq	r3, r1
   1f6f8:	4614      	mov	r4, r2
   1f6fa:	4621      	mov	r1, r4
   1f6fc:	4a04      	ldr	r2, [pc, #16]	; (1f710 <_mbrtowc_r+0x58>)
   1f6fe:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   1f702:	2301      	movs	r3, #1
   1f704:	47a0      	blx	r4
   1f706:	e7e7      	b.n	1f6d8 <_mbrtowc_r+0x20>
   1f708:	20000248 	.word	0x20000248
   1f70c:	20000ad8 	.word	0x20000ad8
   1f710:	0002253c 	.word	0x0002253c

0001f714 <__ascii_mbtowc>:
   1f714:	b082      	sub	sp, #8
   1f716:	b149      	cbz	r1, 1f72c <__ascii_mbtowc+0x18>
   1f718:	b15a      	cbz	r2, 1f732 <__ascii_mbtowc+0x1e>
   1f71a:	b16b      	cbz	r3, 1f738 <__ascii_mbtowc+0x24>
   1f71c:	7813      	ldrb	r3, [r2, #0]
   1f71e:	600b      	str	r3, [r1, #0]
   1f720:	7812      	ldrb	r2, [r2, #0]
   1f722:	1c10      	adds	r0, r2, #0
   1f724:	bf18      	it	ne
   1f726:	2001      	movne	r0, #1
   1f728:	b002      	add	sp, #8
   1f72a:	4770      	bx	lr
   1f72c:	a901      	add	r1, sp, #4
   1f72e:	2a00      	cmp	r2, #0
   1f730:	d1f3      	bne.n	1f71a <__ascii_mbtowc+0x6>
   1f732:	4610      	mov	r0, r2
   1f734:	b002      	add	sp, #8
   1f736:	4770      	bx	lr
   1f738:	f06f 0001 	mvn.w	r0, #1
   1f73c:	e7f4      	b.n	1f728 <__ascii_mbtowc+0x14>
   1f73e:	bf00      	nop

0001f740 <memmove>:
   1f740:	4288      	cmp	r0, r1
   1f742:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f744:	d90d      	bls.n	1f762 <memmove+0x22>
   1f746:	188b      	adds	r3, r1, r2
   1f748:	4298      	cmp	r0, r3
   1f74a:	d20a      	bcs.n	1f762 <memmove+0x22>
   1f74c:	1884      	adds	r4, r0, r2
   1f74e:	2a00      	cmp	r2, #0
   1f750:	d051      	beq.n	1f7f6 <memmove+0xb6>
   1f752:	4622      	mov	r2, r4
   1f754:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1f758:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1f75c:	4299      	cmp	r1, r3
   1f75e:	d1f9      	bne.n	1f754 <memmove+0x14>
   1f760:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f762:	2a0f      	cmp	r2, #15
   1f764:	d948      	bls.n	1f7f8 <memmove+0xb8>
   1f766:	ea41 0300 	orr.w	r3, r1, r0
   1f76a:	079b      	lsls	r3, r3, #30
   1f76c:	d146      	bne.n	1f7fc <memmove+0xbc>
   1f76e:	f100 0410 	add.w	r4, r0, #16
   1f772:	f101 0310 	add.w	r3, r1, #16
   1f776:	4615      	mov	r5, r2
   1f778:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1f77c:	f844 6c10 	str.w	r6, [r4, #-16]
   1f780:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1f784:	f844 6c0c 	str.w	r6, [r4, #-12]
   1f788:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1f78c:	f844 6c08 	str.w	r6, [r4, #-8]
   1f790:	3d10      	subs	r5, #16
   1f792:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1f796:	f844 6c04 	str.w	r6, [r4, #-4]
   1f79a:	2d0f      	cmp	r5, #15
   1f79c:	f103 0310 	add.w	r3, r3, #16
   1f7a0:	f104 0410 	add.w	r4, r4, #16
   1f7a4:	d8e8      	bhi.n	1f778 <memmove+0x38>
   1f7a6:	f1a2 0310 	sub.w	r3, r2, #16
   1f7aa:	f023 030f 	bic.w	r3, r3, #15
   1f7ae:	f002 0e0f 	and.w	lr, r2, #15
   1f7b2:	3310      	adds	r3, #16
   1f7b4:	f1be 0f03 	cmp.w	lr, #3
   1f7b8:	4419      	add	r1, r3
   1f7ba:	4403      	add	r3, r0
   1f7bc:	d921      	bls.n	1f802 <memmove+0xc2>
   1f7be:	1f1e      	subs	r6, r3, #4
   1f7c0:	460d      	mov	r5, r1
   1f7c2:	4674      	mov	r4, lr
   1f7c4:	3c04      	subs	r4, #4
   1f7c6:	f855 7b04 	ldr.w	r7, [r5], #4
   1f7ca:	f846 7f04 	str.w	r7, [r6, #4]!
   1f7ce:	2c03      	cmp	r4, #3
   1f7d0:	d8f8      	bhi.n	1f7c4 <memmove+0x84>
   1f7d2:	f1ae 0404 	sub.w	r4, lr, #4
   1f7d6:	f024 0403 	bic.w	r4, r4, #3
   1f7da:	3404      	adds	r4, #4
   1f7dc:	4421      	add	r1, r4
   1f7de:	4423      	add	r3, r4
   1f7e0:	f002 0203 	and.w	r2, r2, #3
   1f7e4:	b162      	cbz	r2, 1f800 <memmove+0xc0>
   1f7e6:	3b01      	subs	r3, #1
   1f7e8:	440a      	add	r2, r1
   1f7ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   1f7f2:	428a      	cmp	r2, r1
   1f7f4:	d1f9      	bne.n	1f7ea <memmove+0xaa>
   1f7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f7f8:	4603      	mov	r3, r0
   1f7fa:	e7f3      	b.n	1f7e4 <memmove+0xa4>
   1f7fc:	4603      	mov	r3, r0
   1f7fe:	e7f2      	b.n	1f7e6 <memmove+0xa6>
   1f800:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f802:	4672      	mov	r2, lr
   1f804:	e7ee      	b.n	1f7e4 <memmove+0xa4>
   1f806:	bf00      	nop

0001f808 <_realloc_r>:
   1f808:	2900      	cmp	r1, #0
   1f80a:	f000 8095 	beq.w	1f938 <_realloc_r+0x130>
   1f80e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f812:	460d      	mov	r5, r1
   1f814:	4616      	mov	r6, r2
   1f816:	b083      	sub	sp, #12
   1f818:	4680      	mov	r8, r0
   1f81a:	f106 070b 	add.w	r7, r6, #11
   1f81e:	f7fd ff1f 	bl	1d660 <__malloc_lock>
   1f822:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1f826:	2f16      	cmp	r7, #22
   1f828:	f02e 0403 	bic.w	r4, lr, #3
   1f82c:	f1a5 0908 	sub.w	r9, r5, #8
   1f830:	d83c      	bhi.n	1f8ac <_realloc_r+0xa4>
   1f832:	2210      	movs	r2, #16
   1f834:	4617      	mov	r7, r2
   1f836:	42be      	cmp	r6, r7
   1f838:	d83d      	bhi.n	1f8b6 <_realloc_r+0xae>
   1f83a:	4294      	cmp	r4, r2
   1f83c:	da43      	bge.n	1f8c6 <_realloc_r+0xbe>
   1f83e:	4bc4      	ldr	r3, [pc, #784]	; (1fb50 <_realloc_r+0x348>)
   1f840:	6899      	ldr	r1, [r3, #8]
   1f842:	eb09 0004 	add.w	r0, r9, r4
   1f846:	4288      	cmp	r0, r1
   1f848:	f000 80b4 	beq.w	1f9b4 <_realloc_r+0x1ac>
   1f84c:	6843      	ldr	r3, [r0, #4]
   1f84e:	f023 0101 	bic.w	r1, r3, #1
   1f852:	4401      	add	r1, r0
   1f854:	6849      	ldr	r1, [r1, #4]
   1f856:	07c9      	lsls	r1, r1, #31
   1f858:	d54c      	bpl.n	1f8f4 <_realloc_r+0xec>
   1f85a:	f01e 0f01 	tst.w	lr, #1
   1f85e:	f000 809b 	beq.w	1f998 <_realloc_r+0x190>
   1f862:	4631      	mov	r1, r6
   1f864:	4640      	mov	r0, r8
   1f866:	f7fd fbf9 	bl	1d05c <_malloc_r>
   1f86a:	4606      	mov	r6, r0
   1f86c:	2800      	cmp	r0, #0
   1f86e:	d03a      	beq.n	1f8e6 <_realloc_r+0xde>
   1f870:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1f874:	f023 0301 	bic.w	r3, r3, #1
   1f878:	444b      	add	r3, r9
   1f87a:	f1a0 0208 	sub.w	r2, r0, #8
   1f87e:	429a      	cmp	r2, r3
   1f880:	f000 8121 	beq.w	1fac6 <_realloc_r+0x2be>
   1f884:	1f22      	subs	r2, r4, #4
   1f886:	2a24      	cmp	r2, #36	; 0x24
   1f888:	f200 8107 	bhi.w	1fa9a <_realloc_r+0x292>
   1f88c:	2a13      	cmp	r2, #19
   1f88e:	f200 80db 	bhi.w	1fa48 <_realloc_r+0x240>
   1f892:	4603      	mov	r3, r0
   1f894:	462a      	mov	r2, r5
   1f896:	6811      	ldr	r1, [r2, #0]
   1f898:	6019      	str	r1, [r3, #0]
   1f89a:	6851      	ldr	r1, [r2, #4]
   1f89c:	6059      	str	r1, [r3, #4]
   1f89e:	6892      	ldr	r2, [r2, #8]
   1f8a0:	609a      	str	r2, [r3, #8]
   1f8a2:	4629      	mov	r1, r5
   1f8a4:	4640      	mov	r0, r8
   1f8a6:	f7ff fdf3 	bl	1f490 <_free_r>
   1f8aa:	e01c      	b.n	1f8e6 <_realloc_r+0xde>
   1f8ac:	f027 0707 	bic.w	r7, r7, #7
   1f8b0:	2f00      	cmp	r7, #0
   1f8b2:	463a      	mov	r2, r7
   1f8b4:	dabf      	bge.n	1f836 <_realloc_r+0x2e>
   1f8b6:	2600      	movs	r6, #0
   1f8b8:	230c      	movs	r3, #12
   1f8ba:	4630      	mov	r0, r6
   1f8bc:	f8c8 3000 	str.w	r3, [r8]
   1f8c0:	b003      	add	sp, #12
   1f8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8c6:	462e      	mov	r6, r5
   1f8c8:	1be3      	subs	r3, r4, r7
   1f8ca:	2b0f      	cmp	r3, #15
   1f8cc:	d81e      	bhi.n	1f90c <_realloc_r+0x104>
   1f8ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f8d2:	f003 0301 	and.w	r3, r3, #1
   1f8d6:	4323      	orrs	r3, r4
   1f8d8:	444c      	add	r4, r9
   1f8da:	f8c9 3004 	str.w	r3, [r9, #4]
   1f8de:	6863      	ldr	r3, [r4, #4]
   1f8e0:	f043 0301 	orr.w	r3, r3, #1
   1f8e4:	6063      	str	r3, [r4, #4]
   1f8e6:	4640      	mov	r0, r8
   1f8e8:	f7fd fec0 	bl	1d66c <__malloc_unlock>
   1f8ec:	4630      	mov	r0, r6
   1f8ee:	b003      	add	sp, #12
   1f8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8f4:	f023 0303 	bic.w	r3, r3, #3
   1f8f8:	18e1      	adds	r1, r4, r3
   1f8fa:	4291      	cmp	r1, r2
   1f8fc:	db1f      	blt.n	1f93e <_realloc_r+0x136>
   1f8fe:	68c3      	ldr	r3, [r0, #12]
   1f900:	6882      	ldr	r2, [r0, #8]
   1f902:	462e      	mov	r6, r5
   1f904:	60d3      	str	r3, [r2, #12]
   1f906:	460c      	mov	r4, r1
   1f908:	609a      	str	r2, [r3, #8]
   1f90a:	e7dd      	b.n	1f8c8 <_realloc_r+0xc0>
   1f90c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1f910:	eb09 0107 	add.w	r1, r9, r7
   1f914:	f002 0201 	and.w	r2, r2, #1
   1f918:	444c      	add	r4, r9
   1f91a:	f043 0301 	orr.w	r3, r3, #1
   1f91e:	4317      	orrs	r7, r2
   1f920:	f8c9 7004 	str.w	r7, [r9, #4]
   1f924:	604b      	str	r3, [r1, #4]
   1f926:	6863      	ldr	r3, [r4, #4]
   1f928:	f043 0301 	orr.w	r3, r3, #1
   1f92c:	3108      	adds	r1, #8
   1f92e:	6063      	str	r3, [r4, #4]
   1f930:	4640      	mov	r0, r8
   1f932:	f7ff fdad 	bl	1f490 <_free_r>
   1f936:	e7d6      	b.n	1f8e6 <_realloc_r+0xde>
   1f938:	4611      	mov	r1, r2
   1f93a:	f7fd bb8f 	b.w	1d05c <_malloc_r>
   1f93e:	f01e 0f01 	tst.w	lr, #1
   1f942:	d18e      	bne.n	1f862 <_realloc_r+0x5a>
   1f944:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1f948:	eba9 0a01 	sub.w	sl, r9, r1
   1f94c:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f950:	f021 0103 	bic.w	r1, r1, #3
   1f954:	440b      	add	r3, r1
   1f956:	4423      	add	r3, r4
   1f958:	4293      	cmp	r3, r2
   1f95a:	db25      	blt.n	1f9a8 <_realloc_r+0x1a0>
   1f95c:	68c2      	ldr	r2, [r0, #12]
   1f95e:	6881      	ldr	r1, [r0, #8]
   1f960:	4656      	mov	r6, sl
   1f962:	60ca      	str	r2, [r1, #12]
   1f964:	6091      	str	r1, [r2, #8]
   1f966:	f8da 100c 	ldr.w	r1, [sl, #12]
   1f96a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1f96e:	1f22      	subs	r2, r4, #4
   1f970:	2a24      	cmp	r2, #36	; 0x24
   1f972:	60c1      	str	r1, [r0, #12]
   1f974:	6088      	str	r0, [r1, #8]
   1f976:	f200 8094 	bhi.w	1faa2 <_realloc_r+0x29a>
   1f97a:	2a13      	cmp	r2, #19
   1f97c:	d96f      	bls.n	1fa5e <_realloc_r+0x256>
   1f97e:	6829      	ldr	r1, [r5, #0]
   1f980:	f8ca 1008 	str.w	r1, [sl, #8]
   1f984:	6869      	ldr	r1, [r5, #4]
   1f986:	f8ca 100c 	str.w	r1, [sl, #12]
   1f98a:	2a1b      	cmp	r2, #27
   1f98c:	f200 80a2 	bhi.w	1fad4 <_realloc_r+0x2cc>
   1f990:	3508      	adds	r5, #8
   1f992:	f10a 0210 	add.w	r2, sl, #16
   1f996:	e063      	b.n	1fa60 <_realloc_r+0x258>
   1f998:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1f99c:	eba9 0a03 	sub.w	sl, r9, r3
   1f9a0:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f9a4:	f021 0103 	bic.w	r1, r1, #3
   1f9a8:	1863      	adds	r3, r4, r1
   1f9aa:	4293      	cmp	r3, r2
   1f9ac:	f6ff af59 	blt.w	1f862 <_realloc_r+0x5a>
   1f9b0:	4656      	mov	r6, sl
   1f9b2:	e7d8      	b.n	1f966 <_realloc_r+0x15e>
   1f9b4:	6841      	ldr	r1, [r0, #4]
   1f9b6:	f021 0b03 	bic.w	fp, r1, #3
   1f9ba:	44a3      	add	fp, r4
   1f9bc:	f107 0010 	add.w	r0, r7, #16
   1f9c0:	4583      	cmp	fp, r0
   1f9c2:	da56      	bge.n	1fa72 <_realloc_r+0x26a>
   1f9c4:	f01e 0f01 	tst.w	lr, #1
   1f9c8:	f47f af4b 	bne.w	1f862 <_realloc_r+0x5a>
   1f9cc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1f9d0:	eba9 0a01 	sub.w	sl, r9, r1
   1f9d4:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f9d8:	f021 0103 	bic.w	r1, r1, #3
   1f9dc:	448b      	add	fp, r1
   1f9de:	4558      	cmp	r0, fp
   1f9e0:	dce2      	bgt.n	1f9a8 <_realloc_r+0x1a0>
   1f9e2:	4656      	mov	r6, sl
   1f9e4:	f8da 100c 	ldr.w	r1, [sl, #12]
   1f9e8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1f9ec:	1f22      	subs	r2, r4, #4
   1f9ee:	2a24      	cmp	r2, #36	; 0x24
   1f9f0:	60c1      	str	r1, [r0, #12]
   1f9f2:	6088      	str	r0, [r1, #8]
   1f9f4:	f200 808f 	bhi.w	1fb16 <_realloc_r+0x30e>
   1f9f8:	2a13      	cmp	r2, #19
   1f9fa:	f240 808a 	bls.w	1fb12 <_realloc_r+0x30a>
   1f9fe:	6829      	ldr	r1, [r5, #0]
   1fa00:	f8ca 1008 	str.w	r1, [sl, #8]
   1fa04:	6869      	ldr	r1, [r5, #4]
   1fa06:	f8ca 100c 	str.w	r1, [sl, #12]
   1fa0a:	2a1b      	cmp	r2, #27
   1fa0c:	f200 808a 	bhi.w	1fb24 <_realloc_r+0x31c>
   1fa10:	3508      	adds	r5, #8
   1fa12:	f10a 0210 	add.w	r2, sl, #16
   1fa16:	6829      	ldr	r1, [r5, #0]
   1fa18:	6011      	str	r1, [r2, #0]
   1fa1a:	6869      	ldr	r1, [r5, #4]
   1fa1c:	6051      	str	r1, [r2, #4]
   1fa1e:	68a9      	ldr	r1, [r5, #8]
   1fa20:	6091      	str	r1, [r2, #8]
   1fa22:	eb0a 0107 	add.w	r1, sl, r7
   1fa26:	ebab 0207 	sub.w	r2, fp, r7
   1fa2a:	f042 0201 	orr.w	r2, r2, #1
   1fa2e:	6099      	str	r1, [r3, #8]
   1fa30:	604a      	str	r2, [r1, #4]
   1fa32:	f8da 3004 	ldr.w	r3, [sl, #4]
   1fa36:	f003 0301 	and.w	r3, r3, #1
   1fa3a:	431f      	orrs	r7, r3
   1fa3c:	4640      	mov	r0, r8
   1fa3e:	f8ca 7004 	str.w	r7, [sl, #4]
   1fa42:	f7fd fe13 	bl	1d66c <__malloc_unlock>
   1fa46:	e751      	b.n	1f8ec <_realloc_r+0xe4>
   1fa48:	682b      	ldr	r3, [r5, #0]
   1fa4a:	6003      	str	r3, [r0, #0]
   1fa4c:	686b      	ldr	r3, [r5, #4]
   1fa4e:	6043      	str	r3, [r0, #4]
   1fa50:	2a1b      	cmp	r2, #27
   1fa52:	d82d      	bhi.n	1fab0 <_realloc_r+0x2a8>
   1fa54:	f100 0308 	add.w	r3, r0, #8
   1fa58:	f105 0208 	add.w	r2, r5, #8
   1fa5c:	e71b      	b.n	1f896 <_realloc_r+0x8e>
   1fa5e:	4632      	mov	r2, r6
   1fa60:	6829      	ldr	r1, [r5, #0]
   1fa62:	6011      	str	r1, [r2, #0]
   1fa64:	6869      	ldr	r1, [r5, #4]
   1fa66:	6051      	str	r1, [r2, #4]
   1fa68:	68a9      	ldr	r1, [r5, #8]
   1fa6a:	6091      	str	r1, [r2, #8]
   1fa6c:	461c      	mov	r4, r3
   1fa6e:	46d1      	mov	r9, sl
   1fa70:	e72a      	b.n	1f8c8 <_realloc_r+0xc0>
   1fa72:	eb09 0107 	add.w	r1, r9, r7
   1fa76:	ebab 0b07 	sub.w	fp, fp, r7
   1fa7a:	f04b 0201 	orr.w	r2, fp, #1
   1fa7e:	6099      	str	r1, [r3, #8]
   1fa80:	604a      	str	r2, [r1, #4]
   1fa82:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1fa86:	f003 0301 	and.w	r3, r3, #1
   1fa8a:	431f      	orrs	r7, r3
   1fa8c:	4640      	mov	r0, r8
   1fa8e:	f845 7c04 	str.w	r7, [r5, #-4]
   1fa92:	f7fd fdeb 	bl	1d66c <__malloc_unlock>
   1fa96:	462e      	mov	r6, r5
   1fa98:	e728      	b.n	1f8ec <_realloc_r+0xe4>
   1fa9a:	4629      	mov	r1, r5
   1fa9c:	f7ff fe50 	bl	1f740 <memmove>
   1faa0:	e6ff      	b.n	1f8a2 <_realloc_r+0x9a>
   1faa2:	4629      	mov	r1, r5
   1faa4:	4630      	mov	r0, r6
   1faa6:	461c      	mov	r4, r3
   1faa8:	46d1      	mov	r9, sl
   1faaa:	f7ff fe49 	bl	1f740 <memmove>
   1faae:	e70b      	b.n	1f8c8 <_realloc_r+0xc0>
   1fab0:	68ab      	ldr	r3, [r5, #8]
   1fab2:	6083      	str	r3, [r0, #8]
   1fab4:	68eb      	ldr	r3, [r5, #12]
   1fab6:	60c3      	str	r3, [r0, #12]
   1fab8:	2a24      	cmp	r2, #36	; 0x24
   1faba:	d017      	beq.n	1faec <_realloc_r+0x2e4>
   1fabc:	f100 0310 	add.w	r3, r0, #16
   1fac0:	f105 0210 	add.w	r2, r5, #16
   1fac4:	e6e7      	b.n	1f896 <_realloc_r+0x8e>
   1fac6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1faca:	f023 0303 	bic.w	r3, r3, #3
   1face:	441c      	add	r4, r3
   1fad0:	462e      	mov	r6, r5
   1fad2:	e6f9      	b.n	1f8c8 <_realloc_r+0xc0>
   1fad4:	68a9      	ldr	r1, [r5, #8]
   1fad6:	f8ca 1010 	str.w	r1, [sl, #16]
   1fada:	68e9      	ldr	r1, [r5, #12]
   1fadc:	f8ca 1014 	str.w	r1, [sl, #20]
   1fae0:	2a24      	cmp	r2, #36	; 0x24
   1fae2:	d00c      	beq.n	1fafe <_realloc_r+0x2f6>
   1fae4:	3510      	adds	r5, #16
   1fae6:	f10a 0218 	add.w	r2, sl, #24
   1faea:	e7b9      	b.n	1fa60 <_realloc_r+0x258>
   1faec:	692b      	ldr	r3, [r5, #16]
   1faee:	6103      	str	r3, [r0, #16]
   1faf0:	696b      	ldr	r3, [r5, #20]
   1faf2:	6143      	str	r3, [r0, #20]
   1faf4:	f105 0218 	add.w	r2, r5, #24
   1faf8:	f100 0318 	add.w	r3, r0, #24
   1fafc:	e6cb      	b.n	1f896 <_realloc_r+0x8e>
   1fafe:	692a      	ldr	r2, [r5, #16]
   1fb00:	f8ca 2018 	str.w	r2, [sl, #24]
   1fb04:	696a      	ldr	r2, [r5, #20]
   1fb06:	f8ca 201c 	str.w	r2, [sl, #28]
   1fb0a:	3518      	adds	r5, #24
   1fb0c:	f10a 0220 	add.w	r2, sl, #32
   1fb10:	e7a6      	b.n	1fa60 <_realloc_r+0x258>
   1fb12:	4632      	mov	r2, r6
   1fb14:	e77f      	b.n	1fa16 <_realloc_r+0x20e>
   1fb16:	4629      	mov	r1, r5
   1fb18:	4630      	mov	r0, r6
   1fb1a:	9301      	str	r3, [sp, #4]
   1fb1c:	f7ff fe10 	bl	1f740 <memmove>
   1fb20:	9b01      	ldr	r3, [sp, #4]
   1fb22:	e77e      	b.n	1fa22 <_realloc_r+0x21a>
   1fb24:	68a9      	ldr	r1, [r5, #8]
   1fb26:	f8ca 1010 	str.w	r1, [sl, #16]
   1fb2a:	68e9      	ldr	r1, [r5, #12]
   1fb2c:	f8ca 1014 	str.w	r1, [sl, #20]
   1fb30:	2a24      	cmp	r2, #36	; 0x24
   1fb32:	d003      	beq.n	1fb3c <_realloc_r+0x334>
   1fb34:	3510      	adds	r5, #16
   1fb36:	f10a 0218 	add.w	r2, sl, #24
   1fb3a:	e76c      	b.n	1fa16 <_realloc_r+0x20e>
   1fb3c:	692a      	ldr	r2, [r5, #16]
   1fb3e:	f8ca 2018 	str.w	r2, [sl, #24]
   1fb42:	696a      	ldr	r2, [r5, #20]
   1fb44:	f8ca 201c 	str.w	r2, [sl, #28]
   1fb48:	3518      	adds	r5, #24
   1fb4a:	f10a 0220 	add.w	r2, sl, #32
   1fb4e:	e762      	b.n	1fa16 <_realloc_r+0x20e>
   1fb50:	200006c4 	.word	0x200006c4

0001fb54 <__sccl>:
   1fb54:	b470      	push	{r4, r5, r6}
   1fb56:	780c      	ldrb	r4, [r1, #0]
   1fb58:	2c5e      	cmp	r4, #94	; 0x5e
   1fb5a:	d02f      	beq.n	1fbbc <__sccl+0x68>
   1fb5c:	2200      	movs	r2, #0
   1fb5e:	1c4d      	adds	r5, r1, #1
   1fb60:	4616      	mov	r6, r2
   1fb62:	1e43      	subs	r3, r0, #1
   1fb64:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   1fb68:	f803 2f01 	strb.w	r2, [r3, #1]!
   1fb6c:	428b      	cmp	r3, r1
   1fb6e:	d1fb      	bne.n	1fb68 <__sccl+0x14>
   1fb70:	b174      	cbz	r4, 1fb90 <__sccl+0x3c>
   1fb72:	f086 0201 	eor.w	r2, r6, #1
   1fb76:	5502      	strb	r2, [r0, r4]
   1fb78:	1c6e      	adds	r6, r5, #1
   1fb7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1fb7e:	2b2d      	cmp	r3, #45	; 0x2d
   1fb80:	4631      	mov	r1, r6
   1fb82:	d00d      	beq.n	1fba0 <__sccl+0x4c>
   1fb84:	2b5d      	cmp	r3, #93	; 0x5d
   1fb86:	d004      	beq.n	1fb92 <__sccl+0x3e>
   1fb88:	b133      	cbz	r3, 1fb98 <__sccl+0x44>
   1fb8a:	461c      	mov	r4, r3
   1fb8c:	4635      	mov	r5, r6
   1fb8e:	e7f2      	b.n	1fb76 <__sccl+0x22>
   1fb90:	1e69      	subs	r1, r5, #1
   1fb92:	4608      	mov	r0, r1
   1fb94:	bc70      	pop	{r4, r5, r6}
   1fb96:	4770      	bx	lr
   1fb98:	4629      	mov	r1, r5
   1fb9a:	4608      	mov	r0, r1
   1fb9c:	bc70      	pop	{r4, r5, r6}
   1fb9e:	4770      	bx	lr
   1fba0:	7869      	ldrb	r1, [r5, #1]
   1fba2:	295d      	cmp	r1, #93	; 0x5d
   1fba4:	d0f1      	beq.n	1fb8a <__sccl+0x36>
   1fba6:	428c      	cmp	r4, r1
   1fba8:	dcef      	bgt.n	1fb8a <__sccl+0x36>
   1fbaa:	3502      	adds	r5, #2
   1fbac:	1903      	adds	r3, r0, r4
   1fbae:	3401      	adds	r4, #1
   1fbb0:	42a1      	cmp	r1, r4
   1fbb2:	f803 2f01 	strb.w	r2, [r3, #1]!
   1fbb6:	dcfa      	bgt.n	1fbae <__sccl+0x5a>
   1fbb8:	3602      	adds	r6, #2
   1fbba:	e7de      	b.n	1fb7a <__sccl+0x26>
   1fbbc:	2201      	movs	r2, #1
   1fbbe:	784c      	ldrb	r4, [r1, #1]
   1fbc0:	4616      	mov	r6, r2
   1fbc2:	1c8d      	adds	r5, r1, #2
   1fbc4:	e7cd      	b.n	1fb62 <__sccl+0xe>
   1fbc6:	bf00      	nop

0001fbc8 <_strtol_l.isra.0>:
   1fbc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbcc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1fbd0:	460f      	mov	r7, r1
   1fbd2:	4680      	mov	r8, r0
   1fbd4:	4616      	mov	r6, r2
   1fbd6:	461d      	mov	r5, r3
   1fbd8:	468a      	mov	sl, r1
   1fbda:	e000      	b.n	1fbde <_strtol_l.isra.0+0x16>
   1fbdc:	46a2      	mov	sl, r4
   1fbde:	4654      	mov	r4, sl
   1fbe0:	4648      	mov	r0, r9
   1fbe2:	f814 bb01 	ldrb.w	fp, [r4], #1
   1fbe6:	f7ff fd55 	bl	1f694 <__locale_ctype_ptr_l>
   1fbea:	4458      	add	r0, fp
   1fbec:	7842      	ldrb	r2, [r0, #1]
   1fbee:	f012 0208 	ands.w	r2, r2, #8
   1fbf2:	d1f3      	bne.n	1fbdc <_strtol_l.isra.0+0x14>
   1fbf4:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1fbf8:	d04f      	beq.n	1fc9a <_strtol_l.isra.0+0xd2>
   1fbfa:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   1fbfe:	bf04      	itt	eq
   1fc00:	f894 b000 	ldrbeq.w	fp, [r4]
   1fc04:	f10a 0402 	addeq.w	r4, sl, #2
   1fc08:	b11d      	cbz	r5, 1fc12 <_strtol_l.isra.0+0x4a>
   1fc0a:	2d10      	cmp	r5, #16
   1fc0c:	d056      	beq.n	1fcbc <_strtol_l.isra.0+0xf4>
   1fc0e:	46ac      	mov	ip, r5
   1fc10:	e004      	b.n	1fc1c <_strtol_l.isra.0+0x54>
   1fc12:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1fc16:	d060      	beq.n	1fcda <_strtol_l.isra.0+0x112>
   1fc18:	250a      	movs	r5, #10
   1fc1a:	46ac      	mov	ip, r5
   1fc1c:	2a00      	cmp	r2, #0
   1fc1e:	bf0c      	ite	eq
   1fc20:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   1fc24:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   1fc28:	2100      	movs	r1, #0
   1fc2a:	fbb9 fefc 	udiv	lr, r9, ip
   1fc2e:	4608      	mov	r0, r1
   1fc30:	fb0c 9a1e 	mls	sl, ip, lr, r9
   1fc34:	e005      	b.n	1fc42 <_strtol_l.isra.0+0x7a>
   1fc36:	d029      	beq.n	1fc8c <_strtol_l.isra.0+0xc4>
   1fc38:	fb0c 3000 	mla	r0, ip, r0, r3
   1fc3c:	2101      	movs	r1, #1
   1fc3e:	f814 bb01 	ldrb.w	fp, [r4], #1
   1fc42:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   1fc46:	2b09      	cmp	r3, #9
   1fc48:	d905      	bls.n	1fc56 <_strtol_l.isra.0+0x8e>
   1fc4a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   1fc4e:	2b19      	cmp	r3, #25
   1fc50:	d80b      	bhi.n	1fc6a <_strtol_l.isra.0+0xa2>
   1fc52:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   1fc56:	429d      	cmp	r5, r3
   1fc58:	dd0f      	ble.n	1fc7a <_strtol_l.isra.0+0xb2>
   1fc5a:	f1b1 3fff 	cmp.w	r1, #4294967295
   1fc5e:	d0ee      	beq.n	1fc3e <_strtol_l.isra.0+0x76>
   1fc60:	4586      	cmp	lr, r0
   1fc62:	d2e8      	bcs.n	1fc36 <_strtol_l.isra.0+0x6e>
   1fc64:	f04f 31ff 	mov.w	r1, #4294967295
   1fc68:	e7e9      	b.n	1fc3e <_strtol_l.isra.0+0x76>
   1fc6a:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   1fc6e:	2b19      	cmp	r3, #25
   1fc70:	d803      	bhi.n	1fc7a <_strtol_l.isra.0+0xb2>
   1fc72:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   1fc76:	429d      	cmp	r5, r3
   1fc78:	dcef      	bgt.n	1fc5a <_strtol_l.isra.0+0x92>
   1fc7a:	1c4b      	adds	r3, r1, #1
   1fc7c:	d013      	beq.n	1fca6 <_strtol_l.isra.0+0xde>
   1fc7e:	b102      	cbz	r2, 1fc82 <_strtol_l.isra.0+0xba>
   1fc80:	4240      	negs	r0, r0
   1fc82:	b146      	cbz	r6, 1fc96 <_strtol_l.isra.0+0xce>
   1fc84:	b9c1      	cbnz	r1, 1fcb8 <_strtol_l.isra.0+0xf0>
   1fc86:	6037      	str	r7, [r6, #0]
   1fc88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc8c:	459a      	cmp	sl, r3
   1fc8e:	dad3      	bge.n	1fc38 <_strtol_l.isra.0+0x70>
   1fc90:	f04f 31ff 	mov.w	r1, #4294967295
   1fc94:	e7d3      	b.n	1fc3e <_strtol_l.isra.0+0x76>
   1fc96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc9a:	f894 b000 	ldrb.w	fp, [r4]
   1fc9e:	2201      	movs	r2, #1
   1fca0:	f10a 0402 	add.w	r4, sl, #2
   1fca4:	e7b0      	b.n	1fc08 <_strtol_l.isra.0+0x40>
   1fca6:	2322      	movs	r3, #34	; 0x22
   1fca8:	f8c8 3000 	str.w	r3, [r8]
   1fcac:	b1ee      	cbz	r6, 1fcea <_strtol_l.isra.0+0x122>
   1fcae:	1e67      	subs	r7, r4, #1
   1fcb0:	4648      	mov	r0, r9
   1fcb2:	6037      	str	r7, [r6, #0]
   1fcb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcb8:	4681      	mov	r9, r0
   1fcba:	e7f8      	b.n	1fcae <_strtol_l.isra.0+0xe6>
   1fcbc:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1fcc0:	d1a5      	bne.n	1fc0e <_strtol_l.isra.0+0x46>
   1fcc2:	7823      	ldrb	r3, [r4, #0]
   1fcc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1fcc8:	2b58      	cmp	r3, #88	; 0x58
   1fcca:	d1a0      	bne.n	1fc0e <_strtol_l.isra.0+0x46>
   1fccc:	f04f 0c10 	mov.w	ip, #16
   1fcd0:	f894 b001 	ldrb.w	fp, [r4, #1]
   1fcd4:	4665      	mov	r5, ip
   1fcd6:	3402      	adds	r4, #2
   1fcd8:	e7a0      	b.n	1fc1c <_strtol_l.isra.0+0x54>
   1fcda:	7823      	ldrb	r3, [r4, #0]
   1fcdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1fce0:	2b58      	cmp	r3, #88	; 0x58
   1fce2:	d0f3      	beq.n	1fccc <_strtol_l.isra.0+0x104>
   1fce4:	2508      	movs	r5, #8
   1fce6:	46ac      	mov	ip, r5
   1fce8:	e798      	b.n	1fc1c <_strtol_l.isra.0+0x54>
   1fcea:	4648      	mov	r0, r9
   1fcec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001fcf0 <_strtol_r>:
   1fcf0:	b530      	push	{r4, r5, lr}
   1fcf2:	4c06      	ldr	r4, [pc, #24]	; (1fd0c <_strtol_r+0x1c>)
   1fcf4:	4d06      	ldr	r5, [pc, #24]	; (1fd10 <_strtol_r+0x20>)
   1fcf6:	6824      	ldr	r4, [r4, #0]
   1fcf8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1fcfa:	b083      	sub	sp, #12
   1fcfc:	2c00      	cmp	r4, #0
   1fcfe:	bf08      	it	eq
   1fd00:	462c      	moveq	r4, r5
   1fd02:	9400      	str	r4, [sp, #0]
   1fd04:	f7ff ff60 	bl	1fbc8 <_strtol_l.isra.0>
   1fd08:	b003      	add	sp, #12
   1fd0a:	bd30      	pop	{r4, r5, pc}
   1fd0c:	20000248 	.word	0x20000248
   1fd10:	20000ad8 	.word	0x20000ad8

0001fd14 <_strtoll_l.isra.0>:
   1fd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd18:	b085      	sub	sp, #20
   1fd1a:	461e      	mov	r6, r3
   1fd1c:	9102      	str	r1, [sp, #8]
   1fd1e:	9003      	str	r0, [sp, #12]
   1fd20:	9200      	str	r2, [sp, #0]
   1fd22:	4688      	mov	r8, r1
   1fd24:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1fd26:	e000      	b.n	1fd2a <_strtoll_l.isra.0+0x16>
   1fd28:	46a8      	mov	r8, r5
   1fd2a:	4645      	mov	r5, r8
   1fd2c:	4638      	mov	r0, r7
   1fd2e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1fd32:	f7ff fcaf 	bl	1f694 <__locale_ctype_ptr_l>
   1fd36:	4420      	add	r0, r4
   1fd38:	7843      	ldrb	r3, [r0, #1]
   1fd3a:	f013 0308 	ands.w	r3, r3, #8
   1fd3e:	d1f3      	bne.n	1fd28 <_strtoll_l.isra.0+0x14>
   1fd40:	2c2d      	cmp	r4, #45	; 0x2d
   1fd42:	f000 8081 	beq.w	1fe48 <_strtoll_l.isra.0+0x134>
   1fd46:	2c2b      	cmp	r4, #43	; 0x2b
   1fd48:	bf03      	ittte	eq
   1fd4a:	782c      	ldrbeq	r4, [r5, #0]
   1fd4c:	9301      	streq	r3, [sp, #4]
   1fd4e:	f108 0502 	addeq.w	r5, r8, #2
   1fd52:	9301      	strne	r3, [sp, #4]
   1fd54:	b166      	cbz	r6, 1fd70 <_strtoll_l.isra.0+0x5c>
   1fd56:	2e10      	cmp	r6, #16
   1fd58:	f000 8088 	beq.w	1fe6c <_strtoll_l.isra.0+0x158>
   1fd5c:	9b01      	ldr	r3, [sp, #4]
   1fd5e:	46b0      	mov	r8, r6
   1fd60:	ea4f 79e6 	mov.w	r9, r6, asr #31
   1fd64:	b97b      	cbnz	r3, 1fd86 <_strtoll_l.isra.0+0x72>
   1fd66:	f04f 3aff 	mov.w	sl, #4294967295
   1fd6a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   1fd6e:	e00e      	b.n	1fd8e <_strtoll_l.isra.0+0x7a>
   1fd70:	2c30      	cmp	r4, #48	; 0x30
   1fd72:	f000 808a 	beq.w	1fe8a <_strtoll_l.isra.0+0x176>
   1fd76:	f04f 080a 	mov.w	r8, #10
   1fd7a:	f04f 0900 	mov.w	r9, #0
   1fd7e:	260a      	movs	r6, #10
   1fd80:	9b01      	ldr	r3, [sp, #4]
   1fd82:	2b00      	cmp	r3, #0
   1fd84:	d0ef      	beq.n	1fd66 <_strtoll_l.isra.0+0x52>
   1fd86:	f04f 0a00 	mov.w	sl, #0
   1fd8a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
   1fd8e:	4642      	mov	r2, r8
   1fd90:	464b      	mov	r3, r9
   1fd92:	4650      	mov	r0, sl
   1fd94:	4639      	mov	r1, r7
   1fd96:	f7fc f889 	bl	1beac <__aeabi_uldivmod>
   1fd9a:	464b      	mov	r3, r9
   1fd9c:	4693      	mov	fp, r2
   1fd9e:	4650      	mov	r0, sl
   1fda0:	4642      	mov	r2, r8
   1fda2:	4639      	mov	r1, r7
   1fda4:	f7fc f882 	bl	1beac <__aeabi_uldivmod>
   1fda8:	f04f 0e00 	mov.w	lr, #0
   1fdac:	2200      	movs	r2, #0
   1fdae:	2300      	movs	r3, #0
   1fdb0:	e00f      	b.n	1fdd2 <_strtoll_l.isra.0+0xbe>
   1fdb2:	d044      	beq.n	1fe3e <_strtoll_l.isra.0+0x12a>
   1fdb4:	fb02 f409 	mul.w	r4, r2, r9
   1fdb8:	fb08 4403 	mla	r4, r8, r3, r4
   1fdbc:	fba2 2308 	umull	r2, r3, r2, r8
   1fdc0:	4423      	add	r3, r4
   1fdc2:	eb12 020c 	adds.w	r2, r2, ip
   1fdc6:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
   1fdca:	f04f 0e01 	mov.w	lr, #1
   1fdce:	f815 4b01 	ldrb.w	r4, [r5], #1
   1fdd2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   1fdd6:	f1bc 0f09 	cmp.w	ip, #9
   1fdda:	d906      	bls.n	1fdea <_strtoll_l.isra.0+0xd6>
   1fddc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   1fde0:	f1bc 0f19 	cmp.w	ip, #25
   1fde4:	d80d      	bhi.n	1fe02 <_strtoll_l.isra.0+0xee>
   1fde6:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
   1fdea:	4566      	cmp	r6, ip
   1fdec:	dd12      	ble.n	1fe14 <_strtoll_l.isra.0+0x100>
   1fdee:	f1be 3fff 	cmp.w	lr, #4294967295
   1fdf2:	d0ec      	beq.n	1fdce <_strtoll_l.isra.0+0xba>
   1fdf4:	4299      	cmp	r1, r3
   1fdf6:	bf08      	it	eq
   1fdf8:	4290      	cmpeq	r0, r2
   1fdfa:	d2da      	bcs.n	1fdb2 <_strtoll_l.isra.0+0x9e>
   1fdfc:	f04f 3eff 	mov.w	lr, #4294967295
   1fe00:	e7e5      	b.n	1fdce <_strtoll_l.isra.0+0xba>
   1fe02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1fe06:	f1bc 0f19 	cmp.w	ip, #25
   1fe0a:	d803      	bhi.n	1fe14 <_strtoll_l.isra.0+0x100>
   1fe0c:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
   1fe10:	4566      	cmp	r6, ip
   1fe12:	dcec      	bgt.n	1fdee <_strtoll_l.isra.0+0xda>
   1fe14:	f1be 3fff 	cmp.w	lr, #4294967295
   1fe18:	d01c      	beq.n	1fe54 <_strtoll_l.isra.0+0x140>
   1fe1a:	9901      	ldr	r1, [sp, #4]
   1fe1c:	b111      	cbz	r1, 1fe24 <_strtoll_l.isra.0+0x110>
   1fe1e:	4252      	negs	r2, r2
   1fe20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1fe24:	9900      	ldr	r1, [sp, #0]
   1fe26:	b129      	cbz	r1, 1fe34 <_strtoll_l.isra.0+0x120>
   1fe28:	f1be 0f00 	cmp.w	lr, #0
   1fe2c:	d11b      	bne.n	1fe66 <_strtoll_l.isra.0+0x152>
   1fe2e:	9d02      	ldr	r5, [sp, #8]
   1fe30:	9900      	ldr	r1, [sp, #0]
   1fe32:	600d      	str	r5, [r1, #0]
   1fe34:	4610      	mov	r0, r2
   1fe36:	4619      	mov	r1, r3
   1fe38:	b005      	add	sp, #20
   1fe3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe3e:	45e3      	cmp	fp, ip
   1fe40:	dab8      	bge.n	1fdb4 <_strtoll_l.isra.0+0xa0>
   1fe42:	f04f 3eff 	mov.w	lr, #4294967295
   1fe46:	e7c2      	b.n	1fdce <_strtoll_l.isra.0+0xba>
   1fe48:	2301      	movs	r3, #1
   1fe4a:	782c      	ldrb	r4, [r5, #0]
   1fe4c:	9301      	str	r3, [sp, #4]
   1fe4e:	f108 0502 	add.w	r5, r8, #2
   1fe52:	e77f      	b.n	1fd54 <_strtoll_l.isra.0+0x40>
   1fe54:	9a03      	ldr	r2, [sp, #12]
   1fe56:	2322      	movs	r3, #34	; 0x22
   1fe58:	6013      	str	r3, [r2, #0]
   1fe5a:	9b00      	ldr	r3, [sp, #0]
   1fe5c:	b32b      	cbz	r3, 1feaa <_strtoll_l.isra.0+0x196>
   1fe5e:	4652      	mov	r2, sl
   1fe60:	463b      	mov	r3, r7
   1fe62:	3d01      	subs	r5, #1
   1fe64:	e7e4      	b.n	1fe30 <_strtoll_l.isra.0+0x11c>
   1fe66:	4692      	mov	sl, r2
   1fe68:	461f      	mov	r7, r3
   1fe6a:	e7f8      	b.n	1fe5e <_strtoll_l.isra.0+0x14a>
   1fe6c:	2c30      	cmp	r4, #48	; 0x30
   1fe6e:	d117      	bne.n	1fea0 <_strtoll_l.isra.0+0x18c>
   1fe70:	782b      	ldrb	r3, [r5, #0]
   1fe72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1fe76:	2b58      	cmp	r3, #88	; 0x58
   1fe78:	d112      	bne.n	1fea0 <_strtoll_l.isra.0+0x18c>
   1fe7a:	786c      	ldrb	r4, [r5, #1]
   1fe7c:	f04f 0810 	mov.w	r8, #16
   1fe80:	f04f 0900 	mov.w	r9, #0
   1fe84:	3502      	adds	r5, #2
   1fe86:	2610      	movs	r6, #16
   1fe88:	e77a      	b.n	1fd80 <_strtoll_l.isra.0+0x6c>
   1fe8a:	782b      	ldrb	r3, [r5, #0]
   1fe8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1fe90:	2b58      	cmp	r3, #88	; 0x58
   1fe92:	d0f2      	beq.n	1fe7a <_strtoll_l.isra.0+0x166>
   1fe94:	f04f 0808 	mov.w	r8, #8
   1fe98:	f04f 0900 	mov.w	r9, #0
   1fe9c:	2608      	movs	r6, #8
   1fe9e:	e76f      	b.n	1fd80 <_strtoll_l.isra.0+0x6c>
   1fea0:	f04f 0810 	mov.w	r8, #16
   1fea4:	f04f 0900 	mov.w	r9, #0
   1fea8:	e76a      	b.n	1fd80 <_strtoll_l.isra.0+0x6c>
   1feaa:	4652      	mov	r2, sl
   1feac:	463b      	mov	r3, r7
   1feae:	e7c1      	b.n	1fe34 <_strtoll_l.isra.0+0x120>

0001feb0 <_strtoll_r>:
   1feb0:	b530      	push	{r4, r5, lr}
   1feb2:	4c06      	ldr	r4, [pc, #24]	; (1fecc <_strtoll_r+0x1c>)
   1feb4:	4d06      	ldr	r5, [pc, #24]	; (1fed0 <_strtoll_r+0x20>)
   1feb6:	6824      	ldr	r4, [r4, #0]
   1feb8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1feba:	b083      	sub	sp, #12
   1febc:	2c00      	cmp	r4, #0
   1febe:	bf08      	it	eq
   1fec0:	462c      	moveq	r4, r5
   1fec2:	9400      	str	r4, [sp, #0]
   1fec4:	f7ff ff26 	bl	1fd14 <_strtoll_l.isra.0>
   1fec8:	b003      	add	sp, #12
   1feca:	bd30      	pop	{r4, r5, pc}
   1fecc:	20000248 	.word	0x20000248
   1fed0:	20000ad8 	.word	0x20000ad8

0001fed4 <_strtoull_l.isra.0>:
   1fed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fed8:	b085      	sub	sp, #20
   1feda:	4693      	mov	fp, r2
   1fedc:	9102      	str	r1, [sp, #8]
   1fede:	9003      	str	r0, [sp, #12]
   1fee0:	469a      	mov	sl, r3
   1fee2:	460f      	mov	r7, r1
   1fee4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1fee6:	e000      	b.n	1feea <_strtoull_l.isra.0+0x16>
   1fee8:	462f      	mov	r7, r5
   1feea:	463d      	mov	r5, r7
   1feec:	4630      	mov	r0, r6
   1feee:	f815 4b01 	ldrb.w	r4, [r5], #1
   1fef2:	f7ff fbcf 	bl	1f694 <__locale_ctype_ptr_l>
   1fef6:	4420      	add	r0, r4
   1fef8:	7843      	ldrb	r3, [r0, #1]
   1fefa:	f013 0308 	ands.w	r3, r3, #8
   1fefe:	d1f3      	bne.n	1fee8 <_strtoull_l.isra.0+0x14>
   1ff00:	2c2d      	cmp	r4, #45	; 0x2d
   1ff02:	f000 8089 	beq.w	20018 <_strtoull_l.isra.0+0x144>
   1ff06:	2c2b      	cmp	r4, #43	; 0x2b
   1ff08:	bf03      	ittte	eq
   1ff0a:	782c      	ldrbeq	r4, [r5, #0]
   1ff0c:	9301      	streq	r3, [sp, #4]
   1ff0e:	1cbd      	addeq	r5, r7, #2
   1ff10:	9301      	strne	r3, [sp, #4]
   1ff12:	f1ba 0f00 	cmp.w	sl, #0
   1ff16:	d019      	beq.n	1ff4c <_strtoull_l.isra.0+0x78>
   1ff18:	f1ba 0f10 	cmp.w	sl, #16
   1ff1c:	f000 8081 	beq.w	20022 <_strtoull_l.isra.0+0x14e>
   1ff20:	46d0      	mov	r8, sl
   1ff22:	ea4f 79ea 	mov.w	r9, sl, asr #31
   1ff26:	4642      	mov	r2, r8
   1ff28:	464b      	mov	r3, r9
   1ff2a:	f04f 30ff 	mov.w	r0, #4294967295
   1ff2e:	f04f 31ff 	mov.w	r1, #4294967295
   1ff32:	f7fb ffbb 	bl	1beac <__aeabi_uldivmod>
   1ff36:	4642      	mov	r2, r8
   1ff38:	4606      	mov	r6, r0
   1ff3a:	460f      	mov	r7, r1
   1ff3c:	464b      	mov	r3, r9
   1ff3e:	f04f 30ff 	mov.w	r0, #4294967295
   1ff42:	f04f 31ff 	mov.w	r1, #4294967295
   1ff46:	f7fb ffb1 	bl	1beac <__aeabi_uldivmod>
   1ff4a:	e00b      	b.n	1ff64 <_strtoull_l.isra.0+0x90>
   1ff4c:	2c30      	cmp	r4, #48	; 0x30
   1ff4e:	d07d      	beq.n	2004c <_strtoull_l.isra.0+0x178>
   1ff50:	4f4e      	ldr	r7, [pc, #312]	; (2008c <_strtoull_l.isra.0+0x1b8>)
   1ff52:	2205      	movs	r2, #5
   1ff54:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   1ff58:	f04f 080a 	mov.w	r8, #10
   1ff5c:	f04f 0900 	mov.w	r9, #0
   1ff60:	f04f 0a0a 	mov.w	sl, #10
   1ff64:	f04f 0e00 	mov.w	lr, #0
   1ff68:	2000      	movs	r0, #0
   1ff6a:	2100      	movs	r1, #0
   1ff6c:	e011      	b.n	1ff92 <_strtoull_l.isra.0+0xbe>
   1ff6e:	42b9      	cmp	r1, r7
   1ff70:	bf08      	it	eq
   1ff72:	42b0      	cmpeq	r0, r6
   1ff74:	d03f      	beq.n	1fff6 <_strtoull_l.isra.0+0x122>
   1ff76:	fb00 f409 	mul.w	r4, r0, r9
   1ff7a:	fb08 4401 	mla	r4, r8, r1, r4
   1ff7e:	fba0 0108 	umull	r0, r1, r0, r8
   1ff82:	4421      	add	r1, r4
   1ff84:	18c0      	adds	r0, r0, r3
   1ff86:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1ff8a:	f04f 0e01 	mov.w	lr, #1
   1ff8e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ff92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1ff96:	2b09      	cmp	r3, #9
   1ff98:	d905      	bls.n	1ffa6 <_strtoull_l.isra.0+0xd2>
   1ff9a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   1ff9e:	2b19      	cmp	r3, #25
   1ffa0:	d80d      	bhi.n	1ffbe <_strtoull_l.isra.0+0xea>
   1ffa2:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1ffa6:	459a      	cmp	sl, r3
   1ffa8:	dd11      	ble.n	1ffce <_strtoull_l.isra.0+0xfa>
   1ffaa:	f1be 0f00 	cmp.w	lr, #0
   1ffae:	db03      	blt.n	1ffb8 <_strtoull_l.isra.0+0xe4>
   1ffb0:	428f      	cmp	r7, r1
   1ffb2:	bf08      	it	eq
   1ffb4:	4286      	cmpeq	r6, r0
   1ffb6:	d2da      	bcs.n	1ff6e <_strtoull_l.isra.0+0x9a>
   1ffb8:	f04f 3eff 	mov.w	lr, #4294967295
   1ffbc:	e7e7      	b.n	1ff8e <_strtoull_l.isra.0+0xba>
   1ffbe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1ffc2:	2b19      	cmp	r3, #25
   1ffc4:	d803      	bhi.n	1ffce <_strtoull_l.isra.0+0xfa>
   1ffc6:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   1ffca:	459a      	cmp	sl, r3
   1ffcc:	dced      	bgt.n	1ffaa <_strtoull_l.isra.0+0xd6>
   1ffce:	f1be 0f00 	cmp.w	lr, #0
   1ffd2:	db15      	blt.n	20000 <_strtoull_l.isra.0+0x12c>
   1ffd4:	9b01      	ldr	r3, [sp, #4]
   1ffd6:	b113      	cbz	r3, 1ffde <_strtoull_l.isra.0+0x10a>
   1ffd8:	4240      	negs	r0, r0
   1ffda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ffde:	f1bb 0f00 	cmp.w	fp, #0
   1ffe2:	d005      	beq.n	1fff0 <_strtoull_l.isra.0+0x11c>
   1ffe4:	f1be 0f00 	cmp.w	lr, #0
   1ffe8:	d114      	bne.n	20014 <_strtoull_l.isra.0+0x140>
   1ffea:	9d02      	ldr	r5, [sp, #8]
   1ffec:	f8cb 5000 	str.w	r5, [fp]
   1fff0:	b005      	add	sp, #20
   1fff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fff6:	4293      	cmp	r3, r2
   1fff8:	ddbd      	ble.n	1ff76 <_strtoull_l.isra.0+0xa2>
   1fffa:	f04f 3eff 	mov.w	lr, #4294967295
   1fffe:	e7c6      	b.n	1ff8e <_strtoull_l.isra.0+0xba>
   20000:	9a03      	ldr	r2, [sp, #12]
   20002:	2322      	movs	r3, #34	; 0x22
   20004:	6013      	str	r3, [r2, #0]
   20006:	f04f 30ff 	mov.w	r0, #4294967295
   2000a:	f04f 31ff 	mov.w	r1, #4294967295
   2000e:	f1bb 0f00 	cmp.w	fp, #0
   20012:	d0ed      	beq.n	1fff0 <_strtoull_l.isra.0+0x11c>
   20014:	3d01      	subs	r5, #1
   20016:	e7e9      	b.n	1ffec <_strtoull_l.isra.0+0x118>
   20018:	2301      	movs	r3, #1
   2001a:	782c      	ldrb	r4, [r5, #0]
   2001c:	9301      	str	r3, [sp, #4]
   2001e:	1cbd      	adds	r5, r7, #2
   20020:	e777      	b.n	1ff12 <_strtoull_l.isra.0+0x3e>
   20022:	2c30      	cmp	r4, #48	; 0x30
   20024:	d123      	bne.n	2006e <_strtoull_l.isra.0+0x19a>
   20026:	782b      	ldrb	r3, [r5, #0]
   20028:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2002c:	2b58      	cmp	r3, #88	; 0x58
   2002e:	d128      	bne.n	20082 <_strtoull_l.isra.0+0x1ae>
   20030:	786c      	ldrb	r4, [r5, #1]
   20032:	220f      	movs	r2, #15
   20034:	3502      	adds	r5, #2
   20036:	f04f 36ff 	mov.w	r6, #4294967295
   2003a:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   2003e:	f04f 0810 	mov.w	r8, #16
   20042:	f04f 0900 	mov.w	r9, #0
   20046:	f04f 0a10 	mov.w	sl, #16
   2004a:	e78b      	b.n	1ff64 <_strtoull_l.isra.0+0x90>
   2004c:	782b      	ldrb	r3, [r5, #0]
   2004e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20052:	2b58      	cmp	r3, #88	; 0x58
   20054:	d0ec      	beq.n	20030 <_strtoull_l.isra.0+0x15c>
   20056:	2207      	movs	r2, #7
   20058:	f04f 36ff 	mov.w	r6, #4294967295
   2005c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   20060:	f04f 0808 	mov.w	r8, #8
   20064:	f04f 0900 	mov.w	r9, #0
   20068:	f04f 0a08 	mov.w	sl, #8
   2006c:	e77a      	b.n	1ff64 <_strtoull_l.isra.0+0x90>
   2006e:	220f      	movs	r2, #15
   20070:	f04f 36ff 	mov.w	r6, #4294967295
   20074:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   20078:	f04f 0810 	mov.w	r8, #16
   2007c:	f04f 0900 	mov.w	r9, #0
   20080:	e770      	b.n	1ff64 <_strtoull_l.isra.0+0x90>
   20082:	f04f 0810 	mov.w	r8, #16
   20086:	f04f 0900 	mov.w	r9, #0
   2008a:	e74c      	b.n	1ff26 <_strtoull_l.isra.0+0x52>
   2008c:	19999999 	.word	0x19999999

00020090 <_strtoull_r>:
   20090:	b530      	push	{r4, r5, lr}
   20092:	4c06      	ldr	r4, [pc, #24]	; (200ac <_strtoull_r+0x1c>)
   20094:	4d06      	ldr	r5, [pc, #24]	; (200b0 <_strtoull_r+0x20>)
   20096:	6824      	ldr	r4, [r4, #0]
   20098:	6b64      	ldr	r4, [r4, #52]	; 0x34
   2009a:	b083      	sub	sp, #12
   2009c:	2c00      	cmp	r4, #0
   2009e:	bf08      	it	eq
   200a0:	462c      	moveq	r4, r5
   200a2:	9400      	str	r4, [sp, #0]
   200a4:	f7ff ff16 	bl	1fed4 <_strtoull_l.isra.0>
   200a8:	b003      	add	sp, #12
   200aa:	bd30      	pop	{r4, r5, pc}
   200ac:	20000248 	.word	0x20000248
   200b0:	20000ad8 	.word	0x20000ad8

000200b4 <__ascii_wctomb>:
   200b4:	b121      	cbz	r1, 200c0 <__ascii_wctomb+0xc>
   200b6:	2aff      	cmp	r2, #255	; 0xff
   200b8:	d804      	bhi.n	200c4 <__ascii_wctomb+0x10>
   200ba:	700a      	strb	r2, [r1, #0]
   200bc:	2001      	movs	r0, #1
   200be:	4770      	bx	lr
   200c0:	4608      	mov	r0, r1
   200c2:	4770      	bx	lr
   200c4:	238a      	movs	r3, #138	; 0x8a
   200c6:	6003      	str	r3, [r0, #0]
   200c8:	f04f 30ff 	mov.w	r0, #4294967295
   200cc:	4770      	bx	lr
   200ce:	bf00      	nop
   200d0:	2e2f2e2e 	.word	0x2e2f2e2e
   200d4:	2e2e2f2e 	.word	0x2e2e2f2e
   200d8:	554c412f 	.word	0x554c412f
   200dc:	6972445f 	.word	0x6972445f
   200e0:	2f726576 	.word	0x2f726576
   200e4:	5f554c41 	.word	0x5f554c41
   200e8:	76697244 	.word	0x76697244
   200ec:	682f7265 	.word	0x682f7265
   200f0:	692f6c61 	.word	0x692f6c61
   200f4:	756c636e 	.word	0x756c636e
   200f8:	682f6564 	.word	0x682f6564
   200fc:	775f6c61 	.word	0x775f6c61
   20100:	682e7464 	.word	0x682e7464
   20104:	00000000 	.word	0x00000000
   20108:	656c6553 	.word	0x656c6553
   2010c:	64657463 	.word	0x64657463
   20110:	6e696c20 	.word	0x6e696c20
   20114:	00003a65 	.word	0x00003a65
   20118:	00000a0d 	.word	0x00000a0d
   2011c:	2a2a2a2a 	.word	0x2a2a2a2a
   20120:	66694c20 	.word	0x66694c20
   20124:	75502065 	.word	0x75502065
   20128:	2065736c 	.word	0x2065736c
   2012c:	69746341 	.word	0x69746341
   20130:	65746176 	.word	0x65746176
   20134:	2a2a2a64 	.word	0x2a2a2a64
   20138:	0000002a 	.word	0x0000002a

0002013c <_ZTV10AMMC_Class>:
   2013c:	000002d8 000002c8 00000000 00000000     ................
   2014c:	00000e15 00000eb5 00013935 00000000     ........59......
   2015c:	00000000 fffffd38 00000000 000130e9     ....8........0..
   2016c:	00012fb9 fffffd28 fffffd28 fffffff0     ./..(...(.......
   2017c:	fffffd28 00000000 00000e89 00000ee1     (...............
   2018c:	0001399d                                .9..

00020190 <_ZTT10AMMC_Class>:
   20190:	0002014c 000201cc 00020220 00020238     L....... ...8...
   201a0:	00020254 000201e8 00020204 00020168     T...........h...
   201b0:	00020184 0002026c 00020288              ....l.......

000201bc <_ZTC10AMMC_Class0_15ARINC_Interface>:
   201bc:	000002d8 000002c8 00000000 00000000     ................
	...
   201d4:	00013935 00000000 00000000 fffffd38     59..........8...
   201e4:	00000000 000130e9 00012fb9 fffffd28     .....0.../..(...
   201f4:	fffffd28 fffffff0 fffffd28 00000000     (.......(.......
	...
   2020c:	0001399d                                .9..

00020210 <_ZTC10AMMC_Class0_18ARINC_Buffer_Class>:
   20210:	000002d8 000002c8 00000000 00000000     ................
	...
   20230:	fffffd38 00000000 000130e9 00012fb9     8........0.../..
   20240:	00000000 fffffd28 fffffff0 fffffd28     ....(.......(...
	...
   2025c:	0001487f                                .H..

00020260 <_ZTC10AMMC_Class728_14Protocol_Class>:
   20260:	fffffff0 00000000 00000000 00000000     ................
   20270:	00000000 0001487f 00000000 00000000     .....H..........
   20280:	00000010 00000000 000130e9 00012fb9     .........0.../..

00020290 <factoryDefaultsConfiguration>:
   20290:	000000ac 00000004 0000070c 00000000     ................
   202a0:	00000000 00000001 000003e8 000003e8     ................
   202b0:	000003e8 00000000 00000000 00000000     ................
   202c0:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
   202d0:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
   202e0:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
   202f0:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
   20300:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
   20310:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
   20320:	41200000 41200000 00000014 00000078     .. A.. A....x...
   20330:	be23d70a 41d00000 00000078              ..#....Ax...

0002033c <factoryDefaultsCycles>:
   2033c:	000001c0 00000005 0000000c 00000024     ............$...
   2034c:	756e614d 00006c61 00000000 00000000     Manual..........
   2035c:	00000000 00000001 00000258 0000000f     ........X.......
   2036c:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
   20384:	00000001 00000258 0000001e 0000012c     ....X.......,...
   20394:	2030332b 73636573 00000000 00000000     +30 secs........
   203a4:	00000000 00000001 000000f0 0000001e     ................
   203b4:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
   203dc:	73657250 32207465 00000000 00000000     Preset 2........
	...
   20400:	73657250 33207465 00000000 00000000     Preset 3........
	...
   20424:	73657250 34207465 00000000 00000000     Preset 4........
	...
   20448:	73657250 35207465 00000000 00000000     Preset 5........
	...
   2046c:	73657250 36207465 00000000 00000000     Preset 6........
	...
   20490:	73657250 37207465 00000000 00000000     Preset 7........
	...
   204b4:	73657250 38207465 00000000 00000000     Preset 8........
	...
   204d8:	73657250 39207465 00000000 00000000     Preset 9........
	...
   204fc:	65736552 00000074 74696e49 696c6169     Reset...Initiali
   2050c:	0000657a 75736552 0000656d 6e617453     ze..Resume..Stan
   2051c:	4f796264 00004646 70657250 53657261     dbyOFF..PrepareS
   2052c:	646e6174 4e4f7962 00000000 6e617453     tandbyON....Stan
   2053c:	4f796264 0000004e 6e617453 52796264     dbyON...StandbyR
   2054c:	79646165 00000000 616c6544 00646579     eady....Delayed.
   2055c:	65746e49 70757272 00646574 00004e4f     Interrupted.ON..
   2056c:	706f7453 50646570 65636f72 00007373     StoppedProcess..
   2057c:	61656c43 0070756e 696e6946 64656873     Cleanup.Finished
   2058c:	00000000 7065654b 00746f48 666c6553     ....KeepHot.Self
   2059c:	746f7250 00746365 6f727245 00000072     Protect.Error...
   205ac:	6e69614d 616e6574 0065636e 55494d48     Maintenance.HMIU
   205bc:	74616470 00000065 6d726946 65726177     pdate...Firmware
   205cc:	61647055 00006574 72727543 20746e65     Update..Current 
   205dc:	74617453 00000065 6c637943 75442065     State...Cycle Du
   205ec:	69746172 00006e6f 616d6552 6e696e69     ration..Remainin
   205fc:	69542067 0000656d 67726154 50207465     g Time..Target P
   2060c:	7265776f 00000000 00776f4e 6967614d     ower....Now.Magi
   2061c:	00000063                                c...

00020620 <defaultHVACState>:
   20620:	61626364 00000000 00000000 00000000     dcba............
	...
   20688:	00203a20 00007830 00000a0d               : .0x......

00020694 <_ZTV17ConfigState_Class>:
	...
   2069c:	0001487f                                .H..

000206a0 <_ZTV14DateTime_Class>:
	...
   206a8:	00017341 00017431 6e69614d 616e6574     As..1t..Maintena
   206b8:	2065636e 6c6f6f54 636f4c20 0064656b     nce Tool Locked.
   206c8:	00000a0d 6f6d6552 6f206574 61726570     ....Remote opera
   206d8:	6e6f6974 73694420 656c6261 00000064     tion Disabled...
   206e8:	49505351 6f725020 6d617267 61745320     QSPI Program Sta
   206f8:	64657472 00000d0a 73616c46 61642068     rted....Flash da
   20708:	76206174 66697265 74616369 206e6f69     ta verification 
   20718:	6c696166 0a2e6465 0000000d 74696220     failed...... bit
   20728:	00003a20 00000a0d 74697257 202d2065      :......Write - 
   20738:	64616552 20736920 63637573 66737365     Read is successf
   20748:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
   20758:	6d656d20 2079726f 00000000 202a2a2a      memory ....*** 
   20768:	72617453 20705574 6f676c41 68746972     StartUp Algorith
   20778:	206e656d 74736554 2a2a2a20 00000000     men Test ***....
   20788:	202a2a2a 65746144 0020203a 2074634f     *** Date:  .Oct 
   20798:	32203232 00303230 6d695420 00203a65     22 2020. Time: .
   207a8:	313a3431 33353a38 00000000 202a2a2a     14:18:53....*** 
   207b8:	20554c41 74696e69 65746169 2a2a2064     ALU initiated **
   207c8:	0000002a 69746341 6c206576 3a656e69     *...Active line:
   207d8:	00000020 73616c46 654d2068 79726f6d      ...Flash Memory
   207e8:	6c655320 73655466 41502074 44455353      SelfTest PASSED
   207f8:	00000000 00000a0d 73616c46 654d2068     ........Flash Me
   20808:	79726f6d 6c655320 73655466 41462074     mory SelfTest FA
   20818:	44454c49 00000000 52504545 4d204d4f     ILED....EEPROM M
   20828:	726f6d65 65532079 6554666c 50207473     emory SelfTest P
   20838:	45535341 00000044 52504545 4d204d4f     ASSED...EEPROM M
   20848:	726f6d65 65532079 6554666c 46207473     emory SelfTest F
   20858:	454c4941 00000044 20726941 646e6f43     AILED...Air Cond
   20868:	6f697469 676e696e 73795320 206d6574     itioning System 
   20878:	7265704f 6e697461 00000067 00000a0d     Operating.......
   20888:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   20898:	73795320 206d6574 72617453 00646574      System Started.
   208a8:	646e6168 4147656c 76454e49 20746e65     handleGAINEvent 
   208b8:	65636572 64657669 7773203a 68637469     received: switch
   208c8:	20676e69 6d6f7266 00000020 206f7420     ing from ... to 
   208d8:	00000000 646e6168 7453656c 49657461     ....handleStateI
   208e8:	6974696e 7a696c61 66203a65 7367616c     nitialize: flags
   208f8:	203d3d20 00007830 646e6168 7453656c      == 0x..handleSt
   20908:	49657461 6974696e 7a696c61 00000065     ateInitialize...
   20918:	646e6168 7453656c 53657461 646e6174     handleStateStand
   20928:	464f7962 00000046 20726941 646e6f43     byOFF...Air Cond
   20938:	6f697469 676e696e 73795320 206d6574     itioning System 
   20948:	706f7453 00646570                       Stopped.

00020950 <_ZTV12States_Class>:
   20950:	000004b8 00000218 00000000 00000000     ................
   20960:	0000429d fffffde8 fffffde8 00000000     .B..............
   20970:	000042c9 fffffd60 fffffb48 00000000     .B..`...H.......

00020980 <_ZTT12States_Class>:
   20980:	00020960 00020970 00020980 000209a0     `...p...........
   20990:	000209ac                                ....

00020994 <_ZTC12States_Class1208_19HVAC_Commando_Class>:
   20994:	fffffd60 00000000 00000000 00000000     `...............
   209a4:	000002a0 00000000 0001487f 2e2f2e2e     .........H..../.
   209b4:	7361542f 6e61486b 72656c64 616c435f     /TaskHandler_Cla
   209c4:	632e7373 00007070 682f2e2e 702f6c70     ss.cpp..../hpl/p
   209d4:	2f74726f 5f6c7068 6f697067 7361625f     ort/hpl_gpio_bas
   209e4:	00682e65 682f2e2e 692f6c61 756c636e     e.h.../hal/inclu
   209f4:	682f6564 775f6c61 682e7464 00000000     de/hal_wdt.h....
   20a04:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   20a14:	6e656c61 2e726164 00000063 682f2e2e     alendar.c...../h
   20a24:	732f6c61 682f6372 635f6c61 615f6e61     al/src/hal_can_a
   20a34:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
   20a44:	682f6372 635f6c61 735f6372 2e636e79     rc/hal_crc_sync.
   20a54:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
   20a64:	695f6c61 6d5f6332 7973615f 632e636e     al_i2c_m_async.c
   20a74:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   20a84:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
   20a94:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
   20aa4:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
   20ab4:	682f6372 715f6c61 5f697073 636e7973     rc/hal_qspi_sync
   20ac4:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   20ad4:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
   20ae4:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
   20af4:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
   20b04:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   20b14:	2e747369 00000063                       ist.c...

00020b1c <_map>:
   20b1c:	00000000 00000040 00000004 00000004     ....@...........
   20b2c:	00000005 00000005 00000006 00000056     ............V...
   20b3c:	00000007 00000057 00000008 00000028     ....W.......(...
   20b4c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   20b5c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00020b6c <user_mux_confs>:
   20b6c:	00020100 00000000 00000000 00000000     ................
	...

00020bb0 <channel_confs>:
   20bb0:	0660065f 00000000 00000000 00000000     _.`.............
	...

00020bf0 <interrupt_cfg>:
	...
   20c70:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   20c80:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   20c90:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   20ca0:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   20cb0:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   20cc0:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   20cd0:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   20ce0:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   20cf0:	43000c00                                ...C

00020cf4 <sercomspi_regs>:
   20cf4:	0020008c 00020000 00000000 01ff0063     .. .........c...
   20d04:	20000c01 02000000 00000000 ff000100     ... ............
   20d14:	000c0401 00000030 00000002 00ef0000     ....0...........
   20d24:	000601ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   20d34:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   20d44:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   20d54:	43001400 43001800                       ...C...C

00020d5c <_usb_ep_cfgs>:
   20d5c:	200088e8 00000000 00000040 20008928     ... ....@...(.. 
   20d6c:	20008968 00400040 200089a8 200089e8     h.. @.@.... ... 
   20d7c:	00400040 20008a28 20008a68 00400040     @.@.(.. h.. @.@.
   20d8c:	20008aa8 20008ae8 00400040 00000804     ... ... @.@.....
   20d9c:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   20dac:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   20dbc:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   20dcc:	7361625f 00682e65                       _base.h.

00020dd4 <n25q256a_interface>:
   20dd4:	000110c5 00011169 00011279 00011431     ....i...y...1...
   20de4:	000114c1 752f2e2e 642f6273 63697665     ....../usb/devic
   20df4:	73752f65 2e636462 00000063              e/usbdc.c...

00020e00 <_ZTV17ARINC_Conversions>:
	...
   20e08:	000130e9 00012fb9                       .0.../..

00020e10 <_ZL5Mesg1>:
   20e10:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

00020e20 <_ZL5Mesg2>:
   20e20:	61746144 0000203a                       Data: ..

00020e28 <_ZL10HexToAscii>:
   20e28:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00020e38 <_ZL11HistoryMesg>:
   20e38:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
   20e48:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   20e58:	206f7420 74696e49 7a696c69 000d0a65      to Initilize...
   20e68:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
   20e78:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
   20e88:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
   20e98:	67617373 2d2d2165 00002d2d 61727420     ssage!----.. tra
   20ea8:	696d736e 6e697474 2e2e2e67 00000000     nsmitting.......
   20eb8:	61725420 696d736e 64657474 00000021      Transmitted!...
   20ec8:	0000003e 72540d0a 6d736e61 26207469     >.....Transmit &
   20ed8:	63655220 65766965 74695720 614c2068      Receive With La
   20ee8:	736c6562 646f4d20 000d0a65 45530d0a     bels Mode.....SE
   20ef8:	542d464c 2c545345 746e4920 616e7265     LF-TEST, Interna
   20f08:	6944206c 61746967 6f4c206c 622d706f     l Digital Loop-b
   20f18:	2c6b6361 206f4e20 61746164 20736920     ack, No data is 
   20f28:	6e617274 74696d73 20646574 65747865     transmitted exte
   20f38:	6c616e72 0d0a796c 00000000 6f200d0a     rnally........ o
   20f48:	6154206e 20656c62 6562616c 6120736c     n Table labels a
   20f58:	45206572 6c62616e 00006465 500a0d0a     re Enabled.....P
   20f68:	73736572 2d575320 6f742031 61747320     ress SW-1 to sta
   20f78:	69207472 6974696e 796c6c61 000a0d0a     rt initially....
   20f88:	202d2d2d 74747542 43206e6f 616d6d6f     --- Button Comma
   20f98:	2073646e 0a2d2d2d 0000000d 70532020     nds ---.....  Sp
   20fa8:	20656361 20726142 44206f74 6c707369     ace Bar to Displ
   20fb8:	53207961 75746174 6e612073 6f432064     ay Status and Co
   20fc8:	6f72746e 6552206c 74736967 0a737265     ntrol Registers.
   20fd8:	0000000d 20702020 50206f74 65737561     ....  p to Pause
   20fe8:	00000d0a 206d2020 44206f74 6c707369     ....  m to Displ
   20ff8:	4c207961 6c656261 6d654d20 0079726f     ay Label Memory.
   21008:	003e0d0a 72540d0a 6d736e61 69747469     ..>...Transmitti
   21018:	0d0a676e 0000003e 49480d0a 3935332d     ng..>.....HI-359
   21028:	74532033 73757461 6f43202c 6f72746e     3 Status, Contro
   21038:	6552206c 74736967 0d737265 0000000a     l Registers.....
   21048:	20090d0a 2a2a2a20 50202a2a 73736572     ...  ***** Press
   21058:	70732020 62656361 74207261 6f63206f       spacebar to co
   21068:	6e69746e 2a206575 2a2a2a2a 0000002a     ntinue ******...
   21078:	540d0a0a 736e6172 2074696d 73756150     ...Transmit Paus
   21088:	0d0a6465 00000000 72500d0a 20737365     ed........Press 
   21098:	44454c4f 5455425f 2d4e4f54 6f742032     OLED_BUTTON-2 to
   210a8:	61727420 696d736e 6e6f2074 72662065      transmit one fr
   210b8:	20656d61 20646e61 73756170 000d0a65     ame and pause...
   210c8:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   210d8:	2d4e4f54 6f742033 73655220 0a656d75     TON-3 to Resume.
   210e8:	0000000d 72540d0a 6d736e61 65747469     ......Transmitte
   210f8:	65522072 656d7573 2e2e2e64 00000d0a     r Resumed.......
   21108:	65520d0a 76696563 31207265 62614c20     ..Receiver 1 Lab
   21118:	0a736c65 0000000d 65520d0a 76696563     els.......Receiv
   21128:	32207265 62614c20 0a736c65 0000000d     er 2 Labels.....
   21138:	72540d0a 6d736e61 26207469 63655220     ..Transmit & Rec
   21148:	65766965 68634520 6f4d206f 0d0a6564     eive Echo Mode..
   21158:	00000000 6c530d0a 5320776f 64656570     ......Slow Speed
   21168:	00000000 61460d0a 53207473 64656570     ......Fast Speed
   21178:	00000000 72540d0a 6d736e61 65747469     ......Transmitte
   21188:	61502072 79746972 616e4520 64656c62     r Parity Enabled
   21198:	00000000 49480d0a 3935332d 61662033     ......HI-3593 fa
   211a8:	64656c69 206f7420 74696e69 7a696c69     iled to initiliz
   211b8:	000d0a65 61540d0a 20656c62 6562616c     e.....Table labe
   211c8:	6120736c 45206572 6c62616e 00006465     ls are Enabled..
   211d8:	2d0a0d0a 43202d2d 6f736e6f 4320656c     ...--- Console C
   211e8:	616d6d6f 2073646e 706c6548 2d2d2d20     ommands Help ---
   211f8:	00000000 20502020 6150203d 79746972     ....  P = Parity
   21208:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   21218:	20542020 4654203d 2050494c 676f5420       T = TFLIP  Tog
   21228:	20656c67 6f2f6e6f 00006666 20522020     gle on/off..  R 
   21238:	4652203d 2050494c 676f5420 20656c67     = RFLIP  Toggle 
   21248:	6f2f6e6f 00006666 20532020 4453203d     on/off..  S = SD
   21258:	202c4e4f 2c394453 31445320 6f542030     ON, SD9, SD10 To
   21268:	656c6767 2f6e6f20 0066666f 20482020     ggle on/off.  H 
   21278:	6854203d 48207369 20706c65 65676150     = This Help Page
   21288:	00000000 70532020 20656361 20726142     ....  Space Bar 
   21298:	6944203d 616c7073 74532079 73757461     = Display Status
   212a8:	646e6120 6e6f4320 6c6f7274 67657220      and Control reg
   212b8:	00000073 20492020 6e49203d 6d657263     s...  I = Increm
   212c8:	20746e65 7373654d 20656761 20646e61     ent Message and 
   212d8:	6e617254 74696d73 7845202e 726f6c70     Transmit. Explor
   212e8:	4d207265 2065646f 4f202d20 21594c4e     er Mode  - ONLY!
   212f8:	00000000 204d2020 6e45203d 20726574     ....  M = Enter 
   21308:	74737543 4d206d6f 61737365 202e6567     Custom Message. 
   21318:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   21328:	4c4e4f20 00002159 4e452020 3d524554      ONLY!..  ENTER=
   21338:	61725420 696d736e 656e2074 6d207478      Transmit next m
   21348:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   21358:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   21368:	00207830 30307826 00002030 50205854     0x .&x000 ..TX P
   21378:	74697261 52412079 5f434e49 0d0a4e4f     arity ARINC_ON..
   21388:	0000003e 50205854 74697261 52412079     >...TX Parity AR
   21398:	5f434e49 0a46464f 00003e0d 494c4654     INC_OFF..>..TFLI
   213a8:	65532050 3e0d0a74 00000000 494c4654     P Set..>....TFLI
   213b8:	6c432050 65726165 3e0d0a64 00000000     P Cleared..>....
   213c8:	2d434552 46522031 2050494c 0a746553     REC-1 RFLIP Set.
   213d8:	00003e0d 2d434552 46522031 2050494c     .>..REC-1 RFLIP 
   213e8:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   213f8:	46522032 2050494c 0a746553 00003e0d     2 RFLIP Set..>..
   21408:	2d434552 46522032 2050494c 61656c43     REC-2 RFLIP Clea
   21418:	0a646572 00003e0d 2d434552 44532031     red..>..REC-1 SD
   21428:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   21438:	0a746553 00003e0d 2d434552 44532031     Set..>..REC-1 SD
   21448:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   21458:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   21468:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
   21478:	20303144 0a746553 00003e0d 2d434552     D10 Set..>..REC-
   21488:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
   21498:	20303144 61656c43 0a646572 00003e0d     D10 Cleared..>..
   214a8:	500a0d0a 73736572 61705320 42206563     ...Press Space B
   214b8:	6f207261 57532072 7420342d 6572206f     ar or SW-4 to re
   214c8:	656d7573 00000000 6562614c 2020736c     sume....Labels  
   214d8:	202d2030 203a3336 00000020 00000020     0 - 63:  ... ...
   214e8:	614c0d0a 736c6562 34362020 3732312d     ..Labels  64-127
   214f8:	0020203a 614c0d0a 736c6562 38323120     :  ...Labels 128
   21508:	3139312d 0020203a 614c0d0a 736c6562     -191:  ...Labels
   21518:	32393120 3535322d 0020203a 614c0d0a      192-255:  ...La
   21528:	736c6562 20302020 3336202d 0020203a     bels  0 - 63:  .
   21538:	543e0d0a 20202058 74614420 00003a61     ..>TX    Data:..
   21548:	6562614c 00003a6c 2d636552 61442031     Label:..Rec-1 Da
   21558:	003a6174 2d314c50 61442031 003a6174     ta:.PL1-1 Data:.
   21568:	6374614d 00003a68 2d314c50 61442032     Match:..PL1-2 Da
   21578:	003a6174 2d314c50 61442033 003a6174     ta:.PL1-3 Data:.
   21588:	2d636552 61442032 003a6174 2d324c50     Rec-2 Data:.PL2-
   21598:	61442031 003a6174 2d324c50 61442032     1 Data:.PL2-2 Da
   215a8:	003a6174 2d324c50 61442033 003a6174     ta:.PL2-3 Data:.
   215b8:	00000d0a 78450d0a 726f6c70 4d207265     ......Explorer M
   215c8:	0a65646f 0000000d 6c200d0a 6c656261     ode....... label
   215d8:	61542073 20656c62 45207369 6c62616e     s Table is Enabl
   215e8:	00006465 2d0a0d0a 42202d2d 6f747475     ed.....--- Butto
   215f8:	6f43206e 6e616d6d 2d207364 00002d2d     n Commands ---..
   21608:	20200d0a 63617073 72616265 206f7420     ..  spacebar to 
   21618:	70736944 2079616c 74617453 61207375     Display Status a
   21628:	4320646e 72746e6f 52206c6f 73696765     nd Control Regis
   21638:	73726574 00000000 20200d0a 44454c4f     ters......  OLED
   21648:	5455422d 324e4f54 61727420 696d736e     -BUTTON2 transmi
   21658:	6e6f2074 656d2065 67617373 72662065     t one message fr
   21668:	74206d6f 736e6172 2074696d 66667562     om transmit buff
   21678:	00007265 20200d0a 6f74204c 69725020     er....  L to Pri
   21688:	4c20746e 6c656261 6d654d20 0a79726f     nt Label Memory.
   21698:	0000000d 72500d0a 20737365 45544e45     ......Press ENTE
   216a8:	6f742052 61725420 696d736e 726f2074     R to Transmit or
   216b8:	65737520 65687420 294d2820 6d6f6320      use the (M) com
   216c8:	646e616d 206f7420 65746e65 20612072     mand to enter a 
   216d8:	74737563 6d206d6f 61737365 00006567     custom message..
   216e8:	73657250 57532073 726f2034 61707320     Press SW4 or spa
   216f8:	61626563 6f742072 6e6f6320 756e6974     cebar to continu
   21708:	00000065 73657250 70732073 62656361     e...Press spaceb
   21718:	74207261 6f63206f 6e69746e 00006575     ar to continue..
   21728:	433e0d0a 616d6d6f 4d20646e 00000000     ..>Command M....
   21738:	6e450d0a 20726574 79622033 20736574     ..Enter 3 bytes 
   21748:	414c202b 204c4542 54206f74 736e6172     + LABEL to Trans
   21758:	2074696d 6c6c6f66 6465776f 20796220     mit followed by 
   21768:	45544e45 000d0a52 6f540d0a 61725420     ENTER.....To Tra
   21778:	696d736e 65202c74 7265746e 62203320     nsmit, enter 3 b
   21788:	73657479 6c6f6620 65776f6c 79622064     ytes followed by
   21798:	4c206120 6c656261 74796220 6f662065      a Label byte fo
   217a8:	776f6c6c 62206465 4e452079 0a524554     llowed by ENTER.
   217b8:	0000000d 6d726f46 203a7461 73746942     ....Format: Bits
   217c8:	322d3233 42202c35 32737469 37312d34     32-25, Bits24-17
   217d8:	6942202c 36317374 202c392d 4542414c     , Bits16-9, LABE
   217e8:	3a0d0a4c 00000000 6d617845 3a656c70     L..:....Example:
   217f8:	20313020 34203332 37362035 544e4520      01 23 45 67 ENT
   21808:	0d0a5245 0000003a 65725020 52207373     ER..:... Press R
   21818:	52555445 0000004e 61725420 696d736e     ETURN... Transmi
   21828:	676e6974 002e2e2e 61725420 696d736e     ting.... Transmi
   21838:	21646574 00000000 6d6d6f43 20646e61     ted!....Command 
   21848:	49203a49 6572636e 746e656d 74616420     I: Increment dat
   21858:	3e0d0a61 00000000                       a..>....

00021860 <_ZTV15ARINC_Interface>:
   21860:	000002d4 000002c4 00000000 00000000     ................
   21870:	00013555 00013605 00013935 00000000     U5...6..59......
   21880:	00000000 fffffd3c 00000000 000130e9     ....<........0..
   21890:	00012fb9 fffffd2c fffffd2c fffffff0     ./..,...,.......
   218a0:	fffffd2c 00000000 000135d9 00013631     ,........5..16..
   218b0:	0001399d                                .9..

000218b4 <_ZTT15ARINC_Interface>:
   218b4:	00021870 000218e4 000218fc 00021918     p...............
   218c4:	0002188c 000218a8 00021930 0002194c     ........0...L...

000218d4 <_ZTC15ARINC_Interface0_18ARINC_Buffer_Class>:
   218d4:	000002d4 000002c4 00000000 00000000     ................
	...
   218f4:	fffffd3c 00000000 000130e9 00012fb9     <........0.../..
   21904:	00000000 fffffd2c fffffff0 fffffd2c     ....,.......,...
	...
   21920:	0001487f                                .H..

00021924 <_ZTC15ARINC_Interface724_14Protocol_Class>:
   21924:	fffffff0 00000000 00000000 00000000     ................
   21934:	00000000 0001487f 00000000 00000000     .....H..........
   21944:	00000010 00000000 000130e9 00012fb9     .........0.../..

00021954 <_ZL12LabelArray_1>:
   21954:	c1215d1d 9616efdd 3f5f9f0d bd00ffdf     .]!......._?....
	...
   21974:	636e7546 6e6f6974 65786520 65747563     Function execute
   21984:	75732064 73656363 6c756673 0000796c     d successfully..
   21994:	63656843 6f79206b 77207275 6e697269     Check your wirin
   219a4:	46202e67 6873616c 69686320 73692070     g. Flash chip is
   219b4:	6e6f6e20 7365722d 736e6f70 2e657669      non-responsive.
   219c4:	00000000 6e6f632a 75727473 726f7463     ....*constructor
   219d4:	5f666f5f 696f6863 2e2a6563 69676562     _of_choice*.begi
   219e4:	2029286e 20736177 20746f6e 6c6c6163     n() was not call
   219f4:	69206465 6f76206e 73206469 70757465     ed in void setup
   21a04:	00002928 62616e55 7420656c 6469206f     ()..Unable to id
   21a14:	69746e65 63207966 2e706968 65724120     entify chip. Are
   21a24:	756f7920 72757320 68742065 63207369      you sure this c
   21a34:	20706968 73207369 6f707075 64657472     hip is supported
   21a44:	0000003f 62616e55 7420656c 6469206f     ?...Unable to id
   21a54:	69746e65 63207966 63617061 2e797469     entify capacity.
   21a64:	20734920 73696874 69686320 666f2070      Is this chip of
   21a74:	69636966 796c6c61 70757320 74726f70     ficially support
   21a84:	203f6465 6e206649 202c746f 61656c70     ed? If not, plea
   21a94:	64206573 6e696665 20612065 50414360     se define a `CAP
   21aa4:	54494341 63206059 74736e6f 20746e61     ACITY` constant 
   21ab4:	20646e61 6c636e69 20656475 69207469     and include it i
   21ac4:	6c66206e 2e687361 69676562 4143286e     n flash.begin(CA
   21ad4:	49434150 2e295954 00000000 70696843     PACITY).....Chip
   21ae4:	20736920 79737562 0000002e 656b614d      is busy....Make
   21af4:	72757320 6c612065 6970206c 6820736e      sure all pins h
   21b04:	20657661 6e656562 6e6f6320 7463656e     ave been connect
   21b14:	70206465 65706f72 00796c72 65676150     ed properly.Page
   21b24:	65766f20 6f6c6672 61682077 65622073      overflow has be
   21b34:	64206e65 62617369 2064656c 20646e61     en disabled and 
   21b44:	20656874 72646461 20737365 6c6c6163     the address call
   21b54:	65206465 65656378 74207364 6d206568     ed exceeds the m
   21b64:	726f6d65 00000079 62616e55 7420656c     emory...Unable t
   21b74:	6e45206f 656c6261 69725720 676e6974     o Enable Writing
   21b84:	206f7420 70696863 0000002e 61656c50      to chip....Plea
   21b94:	6d206573 20656b61 65727573 65687420     se make sure the
   21ba4:	4c4f4820 20262044 54495257 4f525045      HOLD & WRITEPRO
   21bb4:	54434554 6e697020 72612073 75702065     TECT pins are pu
   21bc4:	64656c6c 20707520 56206f74 00004343     lled up to VCC..
   21bd4:	73696854 63657320 20726f74 65726c61     This sector alre
   21be4:	20796461 746e6f63 736e6961 74616420     ady contains dat
   21bf4:	00002e61 61656c50 6d206573 20656b61     a...Please make 
   21c04:	65727573 65687420 63657320 73726f74     sure the sectors
   21c14:	69656220 7720676e 74746972 74206e65      being written t
   21c24:	7261206f 72652065 64657361 0000002e     o are erased....
   21c34:	20756f59 20657261 6e6e7572 20676e69     You are running 
   21c44:	20776f6c 53206e6f 2e4d4152 656c5020     low on SRAM. Ple
   21c54:	20657361 6974706f 6573696d 756f7920     ase optimise you
   21c64:	72702072 6172676f 6f66206d 65622072     r program for be
   21c74:	72657474 4d415220 61737520 00006567     tter RAM usage..
   21c84:	73696854 6e756620 6f697463 7369206e     This function is
   21c94:	746f6e20 70757320 74726f70 62206465      not supported b
   21ca4:	68742079 6c662065 20687361 6f6d656d     y the flash memo
   21cb4:	68207972 77647261 2e657261 00000000     ry hardware.....
   21cc4:	62616e55 7420656c 7573206f 6e657073     Unable to suspen
   21cd4:	65722f64 656d7573 65706f20 69746172     d/resume operati
   21ce4:	002e6e6f 74697257 75462065 6974636e     on..Write Functi
   21cf4:	68206e6f 66207361 656c6961 72652064     on has failed er
   21d04:	63726f72 6b636568 0000002e 62616e55     rorcheck....Unab
   21d14:	7420656c 6e65206f 656c6261 622d3420     le to enable 4-b
   21d24:	20657479 72646461 69737365 002e676e     yte addressing..
   21d34:	62616e55 7420656c 6964206f 6c626173     Unable to disabl
   21d44:	2d342065 65747962 64646120 73736572     e 4-byte address
   21d54:	2e676e69 00000000 20656854 70696863     ing.....The chip
   21d64:	20736920 72727563 6c746e65 6f702079      is currently po
   21d74:	65726577 6f642064 002e6e77 20656854     wered down..The 
   21d84:	73616c46 68632068 64207069 2073656f     Flash chip does 
   21d94:	20746f6e 70707573 2074726f 50444653     not support SFDP
   21da4:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
   21db4:	45206461 65736172 72615020 74656d61     ad Erase Paramet
   21dc4:	20737265 6d6f7266 69686320 52202e70     ers from chip. R
   21dd4:	72657665 676e6974 206f7420 7262696c     everting to libr
   21de4:	20797261 61666564 73746c75 0000002e     ary defaults....
   21df4:	62616e55 7420656c 6572206f 65206461     Unable to read e
   21e04:	65736172 6d697420 66207365 206d6f72     rase times from 
   21e14:	73616c66 656d2068 79726f6d 6552202e     flash memory. Re
   21e24:	74726576 20676e69 6c206f74 61726269     verting to libra
   21e34:	64207972 75616665 2e73746c 00000000     ry defaults.....
   21e44:	62616e55 7420656c 6572206f 70206461     Unable to read p
   21e54:	72676f72 74206d61 73656d69 6f726620     rogram times fro
   21e64:	6c66206d 20687361 6f6d656d 202e7972     m flash memory. 
   21e74:	65766552 6e697472 6f742067 62696c20     Reverting to lib
   21e84:	79726172 66656420 746c7561 00002e73     rary defaults...
   21e94:	43206f4e 20706968 656c6553 70207463     No Chip Select p
   21ea4:	64206e69 6e696665 69206465 6874206e     in defined in th
   21eb4:	75632065 6d6f7473 49505320 72724120     e custom SPI Arr
   21ec4:	002e7961 6e6b6e55 206e776f 6f727265     ay..Unknown erro
   21ed4:	00000072 6f727245 6f632072 203a6564     r...Error code: 
   21ee4:	00007830 00000030 74206649 20736968     0x..0...If this 
   21ef4:	73656f64 746f6e20 6c656820 65722070     does not help re
   21f04:	766c6f73 6c632f65 66697261 68742079     solve/clarify th
   21f14:	69207369 65757373 0000202c 61656c70     is issue, ..plea
   21f24:	72206573 65736961 206e6120 75737369     se raise an issu
   21f34:	74612065 74746820 2f2f3a70 2e777777     e at http://www.
   21f44:	2d327368 69676e65 7265656e 2e676e69     hs2-engineering.
   21f54:	692f6564 7865646e 7068702e 6e6f632f     de/index.php/con
   21f64:	74636174 6d74682e 6977206c 74206874     tact.html with t
   21f74:	64206568 69617465 6f20736c 68772066     he details of wh
   21f84:	79207461 2072756f 65726577 696f6420     at your were doi
   21f94:	7720676e 206e6568 73696874 72726520     ng when this err
   21fa4:	6f20726f 72756363 00646572              or occurred.

00021fb0 <maxEventCount>:
   21fb0:	00800008                                         ..

00021fb2 <sizeOfEventQueue>:
   21fb2:	ffff0080                                         ..

00021fb4 <forever>:
   21fb4:	7fffffff 2e2f2e2e 2e2e2f2e 554c412f     ....../../../ALU
   21fc4:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   21fd4:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   21fe4:	6f697067 7361625f 00682e65              gpio_base.h.

00021ff0 <defaultParameters>:
   21ff0:	00000040                                @...

00021ff4 <defaultPreferences>:
   21ff4:	000000fa 00000032                       ....2...

00021ffc <_ZTV14Calendar_Class>:
	...
   22004:	00017341 00017431                       As..1t..

0002200c <_ZTV17DateTimeLog_Class>:
	...
   22014:	0001487f 0001487f                       .H...H..

0002201c <_ZTV9CDC_Class>:
	...
   22024:	000181c5 000182a5 00017e19 0001818d     .........~......
   22034:	0001833d 00018151 00018035 00018085     =...Q...5.......
   22044:	000181ad 0001820d                       ........

0002204c <_ZTV6Stream>:
	...
   22054:	0001487f 0001840d 00017e19 00017e2d     .H.......~..-~..
   22064:	0001487f 0001487f 0001487f 2e257830     .H...H...H..0x%.
   22074:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   22084:	0066766f                                ovf.

00022088 <_ZTV5Print>:
	...
   22090:	0001487f 0001840d 00017e19 00017e2d     .H.......~..-~..
   220a0:	492f2e2e 492f4332 4f5f4332 63656a62     ../I2C/I2C_Objec
   220b0:	73694c74 70632e74 00000070 2a2a2a0a     tList.cpp....***
   220c0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   220d0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   220e0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   220f0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0a2a2a2a     ***************.
   22100:	0000000d 43544c20 33383932 6d654420     .... LTC2983 Dem
   22110:	74736e6f 69746172 50206e6f 72676f72     onstration Progr
   22120:	20206d61 20202020 20202020 20202020     am              
   22130:	20202020 20202020 00000d0a 20202020             ....    
   22140:	20202020 20202020 20202020 20202020                     
   22150:	20202020 20202020 20202020 20202020                     
   22160:	20202020 20202020 20202020 20202020                     
   22170:	20202020 20202020 20202020 00000d0a                 ....
   22180:	69685420 72702073 6172676f 6564206d      This program de
   22190:	736e6f6d 74617274 68207365 7420776f     monstrates how t
   221a0:	6572206f 74206461 6d206568 69746c75     o read the multi
   221b0:	6e65732d 20726f73 20202020 20202020     -sensor         
   221c0:	00000d0a 6d657420 61726570 65727574     .... temperature
   221d0:	61656d20 65727573 746e656d 73797320      measurement sys
   221e0:	2e6d6574 20202020 20202020 20202020     tem.            
   221f0:	20202020 20202020 20202020 20202020                     
   22200:	20202020 00000d0a 74655320 65687420         .... Set the
   22210:	75616220 61722064 74206574 3131206f      baud rate to 11
   22220:	30303235 646e6120 6c657320 20746365     5200 and select 
   22230:	20656874 6c77656e 20656e69 6d726574     the newline term
   22240:	74616e69 202e726f 00000d0a 2a2a2a2a     inator. ....****
   22250:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   22260:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   22270:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   22280:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0d0a2a2a     **************..
   22290:	00000000 6168430a 6c656e6e 6e6f4320     .....Channel Con
   222a0:	20676966 00000000 69676572 72657473     fig ....register
   222b0:	6c617620 203a6575 00000000 6168430a      value: .....Cha
   222c0:	6c656e6e 00000020 65542020 7265706d     nnel ...  Temper
   222d0:	72757461 203d2065 00000000 69442020     ature = ....  Di
   222e0:	74636572 43444120 61657220 676e6964     rect ADC reading
   222f0:	206e6920 203d2056 00000000 6f562020      in V = ....  Vo
   22300:	6761746c 726f2065 73657220 61747369     ltage or resista
   22310:	2065636e 0000203d 41462020 20544c55     nce = ..  FAULT 
   22320:	41544144 00203d20 202d2020 534e4553     DATA = .  - SENS
   22330:	4820524f 20445241 554c4146 00004552     OR HARD FALURE..
   22340:	202d2020 5f434441 44524148 4941465f       - ADC_HARD_FAI
   22350:	4552554c 00000000 202d2020 485f4a43     LURE....  - CJ_H
   22360:	5f445241 4c494146 00455255 202d2020     ARD_FAILURE.  - 
   22370:	535f4a43 5f54464f 4c494146 00455255     CJ_SOFT_FAILURE.
   22380:	202d2020 534e4553 415f524f 45564f42       - SENSOR_ABOVE
   22390:	00000000 202d2020 534e4553 425f524f     ....  - SENSOR_B
   223a0:	574f4c45 00000000 202d2020 5f434441     ELOW....  - ADC_
   223b0:	474e4152 52455f45 00524f52 41564e49     RANGE_ERROR.INVA
   223c0:	2044494c 44414552 20474e49 21212121     LID READING !!!!
   223d0:	00002121 464e4f43 52554749 4f495441     !!..CONFIGURATIO
   223e0:	5245204e 20524f52 21212121 00002121     N ERROR !!!!!!..
   223f0:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   22400:	00632e6f 00776f70                       o.c.pow.

00022408 <TWO52>:
   22408:	00000000 43300000 00000000 c3300000     ......0C......0.

00022418 <_global_impure_ptr>:
   22418:	20000250                                P.. 

0002241c <__month_lengths>:
   2241c:	0000001f 0000001c 0000001f 0000001e     ................
   2242c:	0000001f 0000001e 0000001f 0000001f     ................
   2243c:	0000001e 0000001f 0000001e 0000001f     ................
   2244c:	0000001f 0000001d 0000001f 0000001e     ................
   2245c:	0000001f 0000001e 0000001f 0000001f     ................
   2246c:	0000001e 0000001f 0000001e 0000001f     ................
   2247c:	00005a54 00544d47 5b303125 392d305e     TZ..GMT.%10[^0-9
   2248c:	5d2d2b2c 00006e25 25756825 68253a6e     ,+-]%n..%hu%n:%h
   2249c:	3a6e2575 25756825 0000006e 7568254d     u%n:%hu%n...M%hu
   224ac:	252e6e25 6e257568 7568252e 00006e25     %n.%hu%n.%hu%n..
   224bc:	7568252f 253a6e25 6e257568 7568253a     /%hu%n:%hu%n:%hu
   224cc:	00006e25 73332e25 332e2520 64332573     %n..%.3s %.3s%3d
   224dc:	322e2520 2e253a64 253a6432 2064322e      %.2d:%.2d:%.2d 
   224ec:	000a6425                                %d..

000224f0 <day_name.4727>:
   224f0:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   22500:	61536972 00000074                       riSat...

00022508 <mon_name.4728>:
   22508:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   22518:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   22528:	63654476 33323130 37363534 42413938     vDec0123456789AB
   22538:	46454443 00000000 33323130 37363534     CDEF....01234567
   22548:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   22558:	0000296c                                l)..

0002255c <blanks.7203>:
   2255c:	20202020 20202020 20202020 20202020                     

0002256c <zeroes.7204>:
   2256c:	30303030 30303030 30303030 30303030     0000000000000000

0002257c <basefix.6796>:
   2257c:	0001000a 00030002 00050004 00070006     ................
   2258c:	00090008 000b000a 000d000c 000f000e     ................
   2259c:	00000010 00000043 49534f50 00000058     ....C...POSIX...
   225ac:	0000002e                                ....

000225b0 <_ctype_>:
   225b0:	20202000 20202020 28282020 20282828     .         ((((( 
   225c0:	20202020 20202020 20202020 20202020                     
   225d0:	10108820 10101010 10101010 10101010      ...............
   225e0:	04040410 04040404 10040404 10101010     ................
   225f0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   22600:	01010101 01010101 01010101 10101010     ................
   22610:	42421010 42424242 02020202 02020202     ..BBBBBB........
   22620:	02020202 02020202 02020202 10101010     ................
   22630:	00000020 00000000 00000000 00000000      ...............
	...

000226b4 <_init>:
   226b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   226b6:	bf00      	nop
   226b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   226ba:	bc08      	pop	{r3}
   226bc:	469e      	mov	lr, r3
   226be:	4770      	bx	lr

000226c0 <__init_array_start>:
   226c0:	0001cd35 	.word	0x0001cd35

000226c4 <__frame_dummy_init_array_entry>:
   226c4:	00000289 00000d59 00000fa1 00001045     ....Y.......E...
   226d4:	00001771 000019bd 00002229 000024e5     q.......)"...$..
   226e4:	00002915 00002e11 0000464d 00013e15     .)......MF...>..
   226f4:	00014b5d 00015089 00015755 00015b75     ]K...P..UW..u[..
   22704:	00015fdd 00016661 00016f31 0001767d     ._..af..1o..}v..
   22714:	00017de1 000183bd 00018c81 00019b35     .}..........5...
   22724:	00019c75                                u...

00022728 <_fini>:
   22728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2272a:	bf00      	nop
   2272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2272e:	bc08      	pop	{r3}
   22730:	469e      	mov	lr, r3
   22732:	4770      	bx	lr

00022734 <__fini_array_start>:
   22734:	00000265 	.word	0x00000265
