
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000211e0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000211e0  000211e0  000311e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000bb4  20000000  000211e8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00040bb4  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00040bb4  2**0
                  CONTENTS
  5 .bss          00009860  20000bb8  00021da0  00040bb4  2**3
                  ALLOC
  6 .stack        00010000  2000a418  0002b600  00040bb4  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00040bb4  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00040be2  2**0
                  CONTENTS, READONLY
  9 .debug_info   000f3a59  00000000  00000000  00040c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000130a8  00000000  00000000  00134694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00028b62  00000000  00000000  0014773c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004948  00000000  00000000  0017029e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000043d8  00000000  00000000  00174be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00065936  00000000  00000000  00178fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00067535  00000000  00000000  001de8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014cd7a  00000000  00000000  00245e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00014420  00000000  00000000  00392ba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 a4 01 20 6d 14 00 00 f1 14 00 00 f1 14 00 00     ... m...........
      10:	f1 14 00 00 f1 14 00 00 f1 14 00 00 00 00 00 00     ................
	...
      2c:	f1 14 00 00 f1 14 00 00 00 00 00 00 f1 14 00 00     ................
      3c:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
      4c:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
      5c:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
      6c:	f1 a8 00 00 c5 92 00 00 f1 14 00 00 f1 14 00 00     ................
      7c:	f1 14 00 00 d5 92 00 00 e5 92 00 00 f5 92 00 00     ................
      8c:	05 93 00 00 15 93 00 00 25 93 00 00 f1 14 00 00     ........%.......
      9c:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
      ac:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
      bc:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
      cc:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
      dc:	f1 14 00 00 f1 14 00 00 f1 14 00 00 00 00 00 00     ................
	...
      f4:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     104:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     114:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     124:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     134:	f1 14 00 00 31 c1 00 00 4d c1 00 00 69 c1 00 00     ....1...M...i...
     144:	85 c1 00 00 a1 c1 00 00 bd c1 00 00 d9 c1 00 00     ................
     154:	f5 c1 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     164:	f1 14 00 00 11 c2 00 00 2d c2 00 00 49 c2 00 00     ........-...I...
     174:	65 c2 00 00 f1 14 00 00 d9 84 00 00 6d fd 00 00     e...........m...
     184:	7d fd 00 00 8d fd 00 00 9d fd 00 00 f1 14 00 00     }...............
     194:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     1a4:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     1b4:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     1c4:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     1d4:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     1e4:	f1 14 00 00 f1 14 00 00 39 d4 00 00 55 d4 00 00     ........9...U...
     1f4:	71 d4 00 00 8d d4 00 00 a9 d4 00 00 c5 d4 00 00     q...............
     204:	e1 d4 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     214:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     224:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     234:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     244:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
     254:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000bb8 	.word	0x20000bb8
     280:	00000000 	.word	0x00000000
     284:	000211e8 	.word	0x000211e8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000211e8 	.word	0x000211e8
     2c4:	20000bbc 	.word	0x20000bbc
     2c8:	000211e8 	.word	0x000211e8
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	6039      	str	r1, [r7, #0]
	{
	data = v;
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	683a      	ldr	r2, [r7, #0]
     2de:	601a      	str	r2, [r3, #0]
	}
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	4618      	mov	r0, r3
     2e4:	370c      	adds	r7, #12
     2e6:	46bd      	mov	sp, r7
     2e8:	bc80      	pop	{r7}
     2ea:	4770      	bx	lr

000002ec <_ZN5eventC1Ev>:
	private:
		
		
	};

inline event::event()
     2ec:	b580      	push	{r7, lr}
     2ee:	b082      	sub	sp, #8
     2f0:	af00      	add	r7, sp, #0
     2f2:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     2fa:	801a      	strh	r2, [r3, #0]
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
     302:	805a      	strh	r2, [r3, #2]
     304:	687b      	ldr	r3, [r7, #4]
     306:	2200      	movs	r2, #0
     308:	605a      	str	r2, [r3, #4]
     30a:	687b      	ldr	r3, [r7, #4]
     30c:	3308      	adds	r3, #8
     30e:	2100      	movs	r1, #0
     310:	4618      	mov	r0, r3
     312:	4b05      	ldr	r3, [pc, #20]	; (328 <_ZN5eventC1Ev+0x3c>)
     314:	4798      	blx	r3
     316:	687b      	ldr	r3, [r7, #4]
     318:	2200      	movs	r2, #0
     31a:	60da      	str	r2, [r3, #12]
	{
		
	}
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	4618      	mov	r0, r3
     320:	3708      	adds	r7, #8
     322:	46bd      	mov	sp, r7
     324:	bd80      	pop	{r7, pc}
     326:	bf00      	nop
     328:	000002d1 	.word	0x000002d1

0000032c <_ZL11ARINCTimeUpPK10timer_task>:
ALU_Class	*ptrALUClass;

//static TaskHandler_Class*	taskList(NULL);

static void CheckPeriodicTask(void);
static void ARINCTimeUp(const struct timer_task *const timer_task){
     32c:	b480      	push	{r7}
     32e:	b083      	sub	sp, #12
     330:	af00      	add	r7, sp, #0
     332:	6078      	str	r0, [r7, #4]
	ptrALUClass->arincTXTimeUP=true;
     334:	4b04      	ldr	r3, [pc, #16]	; (348 <_ZL11ARINCTimeUpPK10timer_task+0x1c>)
     336:	681b      	ldr	r3, [r3, #0]
     338:	2201      	movs	r2, #1
     33a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
     33e:	bf00      	nop
     340:	370c      	adds	r7, #12
     342:	46bd      	mov	sp, r7
     344:	bc80      	pop	{r7}
     346:	4770      	bx	lr
     348:	20000bd4 	.word	0x20000bd4

0000034c <_ZN9ALU_ClassC1Ev>:


// default constructor
ALU_Class::ALU_Class()
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
     354:	687b      	ldr	r3, [r7, #4]
     356:	4618      	mov	r0, r3
     358:	4b04      	ldr	r3, [pc, #16]	; (36c <_ZN9ALU_ClassC1Ev+0x20>)
     35a:	4798      	blx	r3
{
	
	//taskList=(list_descriptor*)taskStorage;
	ptrALUClass=this;
     35c:	4a04      	ldr	r2, [pc, #16]	; (370 <_ZN9ALU_ClassC1Ev+0x24>)
     35e:	687b      	ldr	r3, [r7, #4]
     360:	6013      	str	r3, [r2, #0]
} //ALU_Class
     362:	687b      	ldr	r3, [r7, #4]
     364:	4618      	mov	r0, r3
     366:	3708      	adds	r7, #8
     368:	46bd      	mov	sp, r7
     36a:	bd80      	pop	{r7, pc}
     36c:	00003fd5 	.word	0x00003fd5
     370:	20000bd4 	.word	0x20000bd4

00000374 <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     374:	b580      	push	{r7, lr}
     376:	b082      	sub	sp, #8
     378:	af00      	add	r7, sp, #0
     37a:	6078      	str	r0, [r7, #4]
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	4618      	mov	r0, r3
     380:	4b03      	ldr	r3, [pc, #12]	; (390 <_ZN9ALU_ClassD1Ev+0x1c>)
     382:	4798      	blx	r3
{
} //~ALU_Class
     384:	687b      	ldr	r3, [r7, #4]
     386:	4618      	mov	r0, r3
     388:	3708      	adds	r7, #8
     38a:	46bd      	mov	sp, r7
     38c:	bd80      	pop	{r7, pc}
     38e:	bf00      	nop
     390:	00003ff5 	.word	0x00003ff5

00000394 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     394:	b580      	push	{r7, lr}
     396:	b08a      	sub	sp, #40	; 0x28
     398:	af00      	add	r7, sp, #0
     39a:	6078      	str	r0, [r7, #4]
	uint32_t	s;
	event	e;
     39c:	f107 030c 	add.w	r3, r7, #12
     3a0:	4618      	mov	r0, r3
     3a2:	4b37      	ldr	r3, [pc, #220]	; (480 <_ZN9ALU_Class4InitEv+0xec>)
     3a4:	4798      	blx	r3
	ptrPbit=&pBit;
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	4a36      	ldr	r2, [pc, #216]	; (484 <_ZN9ALU_Class4InitEv+0xf0>)
     3aa:	621a      	str	r2, [r3, #32]
	StartLivePulse();
     3ac:	6878      	ldr	r0, [r7, #4]
     3ae:	4b36      	ldr	r3, [pc, #216]	; (488 <_ZN9ALU_Class4InitEv+0xf4>)
     3b0:	4798      	blx	r3
	if (hvac.Init())
     3b2:	4836      	ldr	r0, [pc, #216]	; (48c <_ZN9ALU_Class4InitEv+0xf8>)
     3b4:	4b36      	ldr	r3, [pc, #216]	; (490 <_ZN9ALU_Class4InitEv+0xfc>)
     3b6:	4798      	blx	r3
     3b8:	4603      	mov	r3, r0
     3ba:	2b00      	cmp	r3, #0
     3bc:	d05a      	beq.n	474 <_ZN9ALU_Class4InitEv+0xe0>
	{
		cBit.isOK=true;
     3be:	4b35      	ldr	r3, [pc, #212]	; (494 <_ZN9ALU_Class4InitEv+0x100>)
     3c0:	2201      	movs	r2, #1
     3c2:	701a      	strb	r2, [r3, #0]
		hvac.SetCRCConfigData();
     3c4:	4831      	ldr	r0, [pc, #196]	; (48c <_ZN9ALU_Class4InitEv+0xf8>)
     3c6:	4b34      	ldr	r3, [pc, #208]	; (498 <_ZN9ALU_Class4InitEv+0x104>)
     3c8:	4798      	blx	r3
		SetInitialConfiguration(configuration);
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	332c      	adds	r3, #44	; 0x2c
     3ce:	4619      	mov	r1, r3
     3d0:	6878      	ldr	r0, [r7, #4]
     3d2:	4b32      	ldr	r3, [pc, #200]	; (49c <_ZN9ALU_Class4InitEv+0x108>)
     3d4:	4798      	blx	r3
		memory.WriteDefaultState();
     3d6:	4832      	ldr	r0, [pc, #200]	; (4a0 <_ZN9ALU_Class4InitEv+0x10c>)
     3d8:	4b32      	ldr	r3, [pc, #200]	; (4a4 <_ZN9ALU_Class4InitEv+0x110>)
     3da:	4798      	blx	r3
		hvac.SetInitialState();
     3dc:	482b      	ldr	r0, [pc, #172]	; (48c <_ZN9ALU_Class4InitEv+0xf8>)
     3de:	4b32      	ldr	r3, [pc, #200]	; (4a8 <_ZN9ALU_Class4InitEv+0x114>)
     3e0:	4798      	blx	r3
		uhr.Init();
     3e2:	4832      	ldr	r0, [pc, #200]	; (4ac <_ZN9ALU_Class4InitEv+0x118>)
     3e4:	4b32      	ldr	r3, [pc, #200]	; (4b0 <_ZN9ALU_Class4InitEv+0x11c>)
     3e6:	4798      	blx	r3
		hvac.saveCurrentState();
     3e8:	4828      	ldr	r0, [pc, #160]	; (48c <_ZN9ALU_Class4InitEv+0xf8>)
     3ea:	4b32      	ldr	r3, [pc, #200]	; (4b4 <_ZN9ALU_Class4InitEv+0x120>)
     3ec:	4798      	blx	r3
		listener.Init();
     3ee:	4832      	ldr	r0, [pc, #200]	; (4b8 <_ZN9ALU_Class4InitEv+0x124>)
     3f0:	4b32      	ldr	r3, [pc, #200]	; (4bc <_ZN9ALU_Class4InitEv+0x128>)
     3f2:	4798      	blx	r3
		
		if (!(interfaces.Init()))
     3f4:	4832      	ldr	r0, [pc, #200]	; (4c0 <_ZN9ALU_Class4InitEv+0x12c>)
     3f6:	4b33      	ldr	r3, [pc, #204]	; (4c4 <_ZN9ALU_Class4InitEv+0x130>)
     3f8:	4798      	blx	r3
     3fa:	4603      	mov	r3, r0
     3fc:	f083 0301 	eor.w	r3, r3, #1
     400:	b2db      	uxtb	r3, r3
     402:	2b00      	cmp	r3, #0
     404:	d00e      	beq.n	424 <_ZN9ALU_Class4InitEv+0x90>
		{
			NotifyError(kARINCINnterfaceError,s);
     406:	f107 031c 	add.w	r3, r7, #28
     40a:	6a79      	ldr	r1, [r7, #36]	; 0x24
     40c:	4618      	mov	r0, r3
     40e:	4b2e      	ldr	r3, [pc, #184]	; (4c8 <_ZN9ALU_Class4InitEv+0x134>)
     410:	4798      	blx	r3
     412:	f107 031c 	add.w	r3, r7, #28
     416:	461a      	mov	r2, r3
     418:	2100      	movs	r1, #0
     41a:	6878      	ldr	r0, [r7, #4]
     41c:	4b2b      	ldr	r3, [pc, #172]	; (4cc <_ZN9ALU_Class4InitEv+0x138>)
     41e:	4798      	blx	r3
			return s;
     420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     422:	e028      	b.n	476 <_ZN9ALU_Class4InitEv+0xe2>
		}
		else
		{
			arincTimer.Start_periodic_task(FUNC_PTR(ARINCTimeUp),50);
     424:	2232      	movs	r2, #50	; 0x32
     426:	492a      	ldr	r1, [pc, #168]	; (4d0 <_ZN9ALU_Class4InitEv+0x13c>)
     428:	482a      	ldr	r0, [pc, #168]	; (4d4 <_ZN9ALU_Class4InitEv+0x140>)
     42a:	4b2b      	ldr	r3, [pc, #172]	; (4d8 <_ZN9ALU_Class4InitEv+0x144>)
     42c:	4798      	blx	r3
			
			s=pBit.CheckCurrentStatus(status);
     42e:	687b      	ldr	r3, [r7, #4]
     430:	f503 73a2 	add.w	r3, r3, #324	; 0x144
     434:	4619      	mov	r1, r3
     436:	4813      	ldr	r0, [pc, #76]	; (484 <_ZN9ALU_Class4InitEv+0xf0>)
     438:	4b28      	ldr	r3, [pc, #160]	; (4dc <_ZN9ALU_Class4InitEv+0x148>)
     43a:	4798      	blx	r3
     43c:	6278      	str	r0, [r7, #36]	; 0x24
			if (s>0)
     43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     440:	2b00      	cmp	r3, #0
     442:	d00e      	beq.n	462 <_ZN9ALU_Class4InitEv+0xce>
			{
				NotifyError(kpBITError,s);
     444:	f107 0320 	add.w	r3, r7, #32
     448:	6a79      	ldr	r1, [r7, #36]	; 0x24
     44a:	4618      	mov	r0, r3
     44c:	4b1e      	ldr	r3, [pc, #120]	; (4c8 <_ZN9ALU_Class4InitEv+0x134>)
     44e:	4798      	blx	r3
     450:	f107 0320 	add.w	r3, r7, #32
     454:	461a      	mov	r2, r3
     456:	2101      	movs	r1, #1
     458:	6878      	ldr	r0, [r7, #4]
     45a:	4b1c      	ldr	r3, [pc, #112]	; (4cc <_ZN9ALU_Class4InitEv+0x138>)
     45c:	4798      	blx	r3
				return s;
     45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     460:	e009      	b.n	476 <_ZN9ALU_Class4InitEv+0xe2>
			}
			else
			{
				InitTaskArray();
     462:	687b      	ldr	r3, [r7, #4]
     464:	4618      	mov	r0, r3
     466:	4b1e      	ldr	r3, [pc, #120]	; (4e0 <_ZN9ALU_Class4InitEv+0x14c>)
     468:	4798      	blx	r3
				PrepareNewEvent(kALUEventSimpleStart);
     46a:	2200      	movs	r2, #0
     46c:	2104      	movs	r1, #4
     46e:	6878      	ldr	r0, [r7, #4]
     470:	4b1c      	ldr	r3, [pc, #112]	; (4e4 <_ZN9ALU_Class4InitEv+0x150>)
     472:	4798      	blx	r3
	//while(1);

	

	  
	return s;
     474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     476:	4618      	mov	r0, r3
     478:	3728      	adds	r7, #40	; 0x28
     47a:	46bd      	mov	sp, r7
     47c:	bd80      	pop	{r7, pc}
     47e:	bf00      	nop
     480:	000002ed 	.word	0x000002ed
     484:	20008034 	.word	0x20008034
     488:	000006dd 	.word	0x000006dd
     48c:	2000804c 	.word	0x2000804c
     490:	00003021 	.word	0x00003021
     494:	200013a8 	.word	0x200013a8
     498:	00003dd9 	.word	0x00003dd9
     49c:	00000729 	.word	0x00000729
     4a0:	20001c80 	.word	0x20001c80
     4a4:	00002b05 	.word	0x00002b05
     4a8:	00000ef1 	.word	0x00000ef1
     4ac:	200013b8 	.word	0x200013b8
     4b0:	000013c5 	.word	0x000013c5
     4b4:	00003c81 	.word	0x00003c81
     4b8:	20009788 	.word	0x20009788
     4bc:	00013fb5 	.word	0x00013fb5
     4c0:	2000156c 	.word	0x2000156c
     4c4:	00001dd5 	.word	0x00001dd5
     4c8:	000002d1 	.word	0x000002d1
     4cc:	00000881 	.word	0x00000881
     4d0:	0000032d 	.word	0x0000032d
     4d4:	20009e64 	.word	0x20009e64
     4d8:	00016a35 	.word	0x00016a35
     4dc:	00002cd5 	.word	0x00002cd5
     4e0:	00004009 	.word	0x00004009
     4e4:	000008e9 	.word	0x000008e9

000004e8 <_ZN9ALU_Class13RunControllerEv>:

uint32_t	ALU_Class::RunController(void){
     4e8:	b590      	push	{r4, r7, lr}
     4ea:	b089      	sub	sp, #36	; 0x24
     4ec:	af02      	add	r7, sp, #8
     4ee:	6078      	str	r0, [r7, #4]
	event e;
     4f0:	f107 0308 	add.w	r3, r7, #8
     4f4:	4618      	mov	r0, r3
     4f6:	4b23      	ldr	r3, [pc, #140]	; (584 <_ZN9ALU_Class13RunControllerEv+0x9c>)
     4f8:	4798      	blx	r3
	
	
	   while (pBit)
     4fa:	4823      	ldr	r0, [pc, #140]	; (588 <_ZN9ALU_Class13RunControllerEv+0xa0>)
     4fc:	4b23      	ldr	r3, [pc, #140]	; (58c <_ZN9ALU_Class13RunControllerEv+0xa4>)
     4fe:	4798      	blx	r3
     500:	4603      	mov	r3, r0
     502:	2b00      	cmp	r3, #0
     504:	d039      	beq.n	57a <_ZN9ALU_Class13RunControllerEv+0x92>
	   {
		   listener.eventHandler=&ALU_Class::CheckPeriodicTask;
     506:	4b22      	ldr	r3, [pc, #136]	; (590 <_ZN9ALU_Class13RunControllerEv+0xa8>)
     508:	4a22      	ldr	r2, [pc, #136]	; (594 <_ZN9ALU_Class13RunControllerEv+0xac>)
     50a:	615a      	str	r2, [r3, #20]
		   while (!arincTXTimeUP)
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
     512:	b2db      	uxtb	r3, r3
     514:	f083 0301 	eor.w	r3, r3, #1
     518:	b2db      	uxtb	r3, r3
     51a:	2b00      	cmp	r3, #0
     51c:	d022      	beq.n	564 <_ZN9ALU_Class13RunControllerEv+0x7c>
		   	{
				   if (listener.WaitForEvent(e, kALUEventClass, kALUControllerEvent,1))
     51e:	f107 0108 	add.w	r1, r7, #8
     522:	2301      	movs	r3, #1
     524:	9300      	str	r3, [sp, #0]
     526:	2302      	movs	r3, #2
     528:	f44f 6280 	mov.w	r2, #1024	; 0x400
     52c:	4818      	ldr	r0, [pc, #96]	; (590 <_ZN9ALU_Class13RunControllerEv+0xa8>)
     52e:	4c1a      	ldr	r4, [pc, #104]	; (598 <_ZN9ALU_Class13RunControllerEv+0xb0>)
     530:	47a0      	blx	r4
     532:	4603      	mov	r3, r0
     534:	2b00      	cmp	r3, #0
     536:	d006      	beq.n	546 <_ZN9ALU_Class13RunControllerEv+0x5e>
				   {
					   HandleControllerEvent(e);
     538:	f107 0308 	add.w	r3, r7, #8
     53c:	4619      	mov	r1, r3
     53e:	6878      	ldr	r0, [r7, #4]
     540:	4b16      	ldr	r3, [pc, #88]	; (59c <_ZN9ALU_Class13RunControllerEv+0xb4>)
     542:	4798      	blx	r3
     544:	e7e2      	b.n	50c <_ZN9ALU_Class13RunControllerEv+0x24>
					   
				   }else if (listener.WaitForEvent(e, kHVACEventClass, kHVACEventDoPendingTasks,1))
     546:	f107 0108 	add.w	r1, r7, #8
     54a:	2301      	movs	r3, #1
     54c:	9300      	str	r3, [sp, #0]
     54e:	2303      	movs	r3, #3
     550:	f44f 7200 	mov.w	r2, #512	; 0x200
     554:	480e      	ldr	r0, [pc, #56]	; (590 <_ZN9ALU_Class13RunControllerEv+0xa8>)
     556:	4c10      	ldr	r4, [pc, #64]	; (598 <_ZN9ALU_Class13RunControllerEv+0xb0>)
     558:	47a0      	blx	r4
     55a:	4603      	mov	r3, r0
     55c:	2b00      	cmp	r3, #0
     55e:	d100      	bne.n	562 <_ZN9ALU_Class13RunControllerEv+0x7a>
		   while (!arincTXTimeUP)
     560:	e7d4      	b.n	50c <_ZN9ALU_Class13RunControllerEv+0x24>
				   {
					break;
     562:	bf00      	nop
				   }
			 }
			arinc.TrasmitSingleLabel();
     564:	480e      	ldr	r0, [pc, #56]	; (5a0 <_ZN9ALU_Class13RunControllerEv+0xb8>)
     566:	4b0f      	ldr	r3, [pc, #60]	; (5a4 <_ZN9ALU_Class13RunControllerEv+0xbc>)
     568:	4798      	blx	r3
			ExecutePendingTask();
     56a:	6878      	ldr	r0, [r7, #4]
     56c:	4b0e      	ldr	r3, [pc, #56]	; (5a8 <_ZN9ALU_Class13RunControllerEv+0xc0>)
     56e:	4798      	blx	r3
			arincTXTimeUP=false;
     570:	687b      	ldr	r3, [r7, #4]
     572:	2200      	movs	r2, #0
     574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	   while (pBit)
     578:	e7bf      	b.n	4fa <_ZN9ALU_Class13RunControllerEv+0x12>
// 			
// 		}
// 		interfaces.CheckCommunication();
// 	}
	
}
     57a:	bf00      	nop
     57c:	4618      	mov	r0, r3
     57e:	371c      	adds	r7, #28
     580:	46bd      	mov	sp, r7
     582:	bd90      	pop	{r4, r7, pc}
     584:	000002ed 	.word	0x000002ed
     588:	20008034 	.word	0x20008034
     58c:	00002cbd 	.word	0x00002cbd
     590:	20009788 	.word	0x20009788
     594:	00000a85 	.word	0x00000a85
     598:	000140a5 	.word	0x000140a5
     59c:	000005ad 	.word	0x000005ad
     5a0:	20008c20 	.word	0x20008c20
     5a4:	00012fa1 	.word	0x00012fa1
     5a8:	00000935 	.word	0x00000935

000005ac <_ZN9ALU_Class21HandleControllerEventER5event>:



void ALU_Class::HandleControllerEvent(event& e)
{
     5ac:	b580      	push	{r7, lr}
     5ae:	b086      	sub	sp, #24
     5b0:	af00      	add	r7, sp, #0
     5b2:	6078      	str	r0, [r7, #4]
     5b4:	6039      	str	r1, [r7, #0]

	alu.callingTask = alu.currentTask;
     5b6:	4b27      	ldr	r3, [pc, #156]	; (654 <_ZN9ALU_Class21HandleControllerEventER5event+0xa8>)
     5b8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
     5bc:	4a25      	ldr	r2, [pc, #148]	; (654 <_ZN9ALU_Class21HandleControllerEventER5event+0xa8>)
     5be:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
	alu.currentTask = e.data.wordData[0];
     5c2:	683b      	ldr	r3, [r7, #0]
     5c4:	891b      	ldrh	r3, [r3, #8]
     5c6:	461a      	mov	r2, r3
     5c8:	4b22      	ldr	r3, [pc, #136]	; (654 <_ZN9ALU_Class21HandleControllerEventER5event+0xa8>)
     5ca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	alu.taskEntryTime= hvacTimer.Get_ticks();
     5ce:	4822      	ldr	r0, [pc, #136]	; (658 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     5d0:	4b22      	ldr	r3, [pc, #136]	; (65c <_ZN9ALU_Class21HandleControllerEventER5event+0xb0>)
     5d2:	4798      	blx	r3
     5d4:	4602      	mov	r2, r0
     5d6:	4b1f      	ldr	r3, [pc, #124]	; (654 <_ZN9ALU_Class21HandleControllerEventER5event+0xa8>)
     5d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160




	switch (alu.currentTask)
     5dc:	4b1d      	ldr	r3, [pc, #116]	; (654 <_ZN9ALU_Class21HandleControllerEventER5event+0xa8>)
     5de:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
     5e2:	3b02      	subs	r3, #2
     5e4:	2b05      	cmp	r3, #5
     5e6:	d82c      	bhi.n	642 <_ZN9ALU_Class21HandleControllerEventER5event+0x96>
     5e8:	a201      	add	r2, pc, #4	; (adr r2, 5f0 <_ZN9ALU_Class21HandleControllerEventER5event+0x44>)
     5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     5ee:	bf00      	nop
     5f0:	00000627 	.word	0x00000627
     5f4:	00000643 	.word	0x00000643
     5f8:	00000609 	.word	0x00000609
     5fc:	00000635 	.word	0x00000635
     600:	0000061d 	.word	0x0000061d
     604:	00000613 	.word	0x00000613
	{
		case kALUEventSimpleStart:
			hvac.Start(1);
     608:	2101      	movs	r1, #1
     60a:	4815      	ldr	r0, [pc, #84]	; (660 <_ZN9ALU_Class21HandleControllerEventER5event+0xb4>)
     60c:	4b15      	ldr	r3, [pc, #84]	; (664 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     60e:	4798      	blx	r3
		break;
     610:	e01c      	b.n	64c <_ZN9ALU_Class21HandleControllerEventER5event+0xa0>

		case kALUEventSimpleResume:
			hvac.ControllerResume(1);
     612:	2101      	movs	r1, #1
     614:	4812      	ldr	r0, [pc, #72]	; (660 <_ZN9ALU_Class21HandleControllerEventER5event+0xb4>)
     616:	4b14      	ldr	r3, [pc, #80]	; (668 <_ZN9ALU_Class21HandleControllerEventER5event+0xbc>)
     618:	4798      	blx	r3
		break;
     61a:	e017      	b.n	64c <_ZN9ALU_Class21HandleControllerEventER5event+0xa0>

		case kALUEventSimpleStop:
			hvac.Stop(0);
     61c:	2100      	movs	r1, #0
     61e:	4810      	ldr	r0, [pc, #64]	; (660 <_ZN9ALU_Class21HandleControllerEventER5event+0xb4>)
     620:	4b12      	ldr	r3, [pc, #72]	; (66c <_ZN9ALU_Class21HandleControllerEventER5event+0xc0>)
     622:	4798      	blx	r3
		break;
     624:	e012      	b.n	64c <_ZN9ALU_Class21HandleControllerEventER5event+0xa0>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     626:	f107 0308 	add.w	r3, r7, #8
     62a:	4911      	ldr	r1, [pc, #68]	; (670 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     62c:	4618      	mov	r0, r3
     62e:	4b11      	ldr	r3, [pc, #68]	; (674 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     630:	4798      	blx	r3
		break;
     632:	e00b      	b.n	64c <_ZN9ALU_Class21HandleControllerEventER5event+0xa0>
		case kALUEventCheckPheripherals:
			interfaces.CheckCommunication();
     634:	f107 0310 	add.w	r3, r7, #16
     638:	490d      	ldr	r1, [pc, #52]	; (670 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     63a:	4618      	mov	r0, r3
     63c:	4b0d      	ldr	r3, [pc, #52]	; (674 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     63e:	4798      	blx	r3
		break;
     640:	e004      	b.n	64c <_ZN9ALU_Class21HandleControllerEventER5event+0xa0>

		default:
			hvac.Stop(0);
     642:	2100      	movs	r1, #0
     644:	4806      	ldr	r0, [pc, #24]	; (660 <_ZN9ALU_Class21HandleControllerEventER5event+0xb4>)
     646:	4b09      	ldr	r3, [pc, #36]	; (66c <_ZN9ALU_Class21HandleControllerEventER5event+0xc0>)
     648:	4798      	blx	r3
		break;
     64a:	bf00      	nop
	}
}
     64c:	bf00      	nop
     64e:	3718      	adds	r7, #24
     650:	46bd      	mov	sp, r7
     652:	bd80      	pop	{r7, pc}
     654:	20000bd8 	.word	0x20000bd8
     658:	20009e24 	.word	0x20009e24
     65c:	00016ae9 	.word	0x00016ae9
     660:	2000804c 	.word	0x2000804c
     664:	00003209 	.word	0x00003209
     668:	0000309d 	.word	0x0000309d
     66c:	00003d11 	.word	0x00003d11
     670:	2000156c 	.word	0x2000156c
     674:	00001e65 	.word	0x00001e65

00000678 <_ZN9ALU_Class15GetSelectedAMMCEv>:

uint8_t	ALU_Class::GetSelectedAMMC(void){
     678:	b580      	push	{r7, lr}
     67a:	b082      	sub	sp, #8
     67c:	af00      	add	r7, sp, #0
     67e:	6078      	str	r0, [r7, #4]
	activeLine=arinc.GetActiveLine();
     680:	4811      	ldr	r0, [pc, #68]	; (6c8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x50>)
     682:	4b12      	ldr	r3, [pc, #72]	; (6cc <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>)
     684:	4798      	blx	r3
     686:	4603      	mov	r3, r0
     688:	461a      	mov	r2, r3
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
		switch (activeLine)
     690:	687b      	ldr	r3, [r7, #4]
     692:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
     696:	2b01      	cmp	r3, #1
     698:	d002      	beq.n	6a0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x28>
     69a:	2b02      	cmp	r3, #2
     69c:	d004      	beq.n	6a8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>
     69e:	e007      	b.n	6b0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>
		{
			case 1:
			ammc=&ammc1;
     6a0:	4b0b      	ldr	r3, [pc, #44]	; (6d0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     6a2:	4a0c      	ldr	r2, [pc, #48]	; (6d4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     6a4:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     6a6:	e007      	b.n	6b8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			
			case 2:
			ammc=&ammc2;
     6a8:	4b09      	ldr	r3, [pc, #36]	; (6d0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     6aa:	4a0b      	ldr	r2, [pc, #44]	; (6d8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x60>)
     6ac:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     6ae:	e003      	b.n	6b8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			default:
			ammc=&ammc1;
     6b0:	4b07      	ldr	r3, [pc, #28]	; (6d0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     6b2:	4a08      	ldr	r2, [pc, #32]	; (6d4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     6b4:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     6b6:	bf00      	nop
		}
	return activeLine;	
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
}
     6be:	4618      	mov	r0, r3
     6c0:	3708      	adds	r7, #8
     6c2:	46bd      	mov	sp, r7
     6c4:	bd80      	pop	{r7, pc}
     6c6:	bf00      	nop
     6c8:	20008f34 	.word	0x20008f34
     6cc:	00013ac7 	.word	0x00013ac7
     6d0:	200013a4 	.word	0x200013a4
     6d4:	20000d4c 	.word	0x20000d4c
     6d8:	20001078 	.word	0x20001078

000006dc <_ZN9ALU_Class14StartLivePulseEv>:
	
}
int32_t	ALU_Class::FeedWatchDog(void){
	return wdt_feed(&WATCHDOG);
}
uint8_t	ALU_Class::StartLivePulse(void){
     6dc:	b580      	push	{r7, lr}
     6de:	b084      	sub	sp, #16
     6e0:	af00      	add	r7, sp, #0
     6e2:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     6e4:	4909      	ldr	r1, [pc, #36]	; (70c <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     6e6:	480a      	ldr	r0, [pc, #40]	; (710 <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     6e8:	4b0a      	ldr	r3, [pc, #40]	; (714 <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     6ea:	4798      	blx	r3
     6ec:	4603      	mov	r3, r0
     6ee:	490a      	ldr	r1, [pc, #40]	; (718 <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     6f0:	4618      	mov	r0, r3
     6f2:	4b0a      	ldr	r3, [pc, #40]	; (71c <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     6f4:	4798      	blx	r3
	//pwm_set_parameters(&LIVE_PULSE, 1000000, 500);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     6f6:	480a      	ldr	r0, [pc, #40]	; (720 <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     6f8:	4b0a      	ldr	r3, [pc, #40]	; (724 <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     6fa:	4798      	blx	r3
     6fc:	4603      	mov	r3, r0
     6fe:	60fb      	str	r3, [r7, #12]
	return p;
     700:	68fb      	ldr	r3, [r7, #12]
     702:	b2db      	uxtb	r3, r3
}
     704:	4618      	mov	r0, r3
     706:	3710      	adds	r7, #16
     708:	46bd      	mov	sp, r7
     70a:	bd80      	pop	{r7, pc}
     70c:	0001ebdc 	.word	0x0001ebdc
     710:	20009e88 	.word	0x20009e88
     714:	00000aed 	.word	0x00000aed
     718:	0001ebd8 	.word	0x0001ebd8
     71c:	00000acd 	.word	0x00000acd
     720:	2000a1fc 	.word	0x2000a1fc
     724:	000066d5 	.word	0x000066d5

00000728 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.Get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     728:	b580      	push	{r7, lr}
     72a:	b088      	sub	sp, #32
     72c:	af00      	add	r7, sp, #0
     72e:	6078      	str	r0, [r7, #4]
     730:	6039      	str	r1, [r7, #0]
	uint32_t	w,crc,refCRC,e;
	w=0;
     732:	2300      	movs	r3, #0
     734:	61bb      	str	r3, [r7, #24]
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     736:	6839      	ldr	r1, [r7, #0]
     738:	483d      	ldr	r0, [pc, #244]	; (830 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     73a:	4b3e      	ldr	r3, [pc, #248]	; (834 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     73c:	4798      	blx	r3
     73e:	61f8      	str	r0, [r7, #28]
	if (memory.IsConfigurationDataUpdated())
     740:	483d      	ldr	r0, [pc, #244]	; (838 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     742:	4b3e      	ldr	r3, [pc, #248]	; (83c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x114>)
     744:	4798      	blx	r3
     746:	4603      	mov	r3, r0
     748:	2b00      	cmp	r3, #0
     74a:	d007      	beq.n	75c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x34>
	{
		r=memory.ReadUpdatedConfigurationData(configuration);
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	332c      	adds	r3, #44	; 0x2c
     750:	4619      	mov	r1, r3
     752:	4837      	ldr	r0, [pc, #220]	; (830 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     754:	4b3a      	ldr	r3, [pc, #232]	; (840 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x118>)
     756:	4798      	blx	r3
     758:	61f8      	str	r0, [r7, #28]
     75a:	e05e      	b.n	81a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     75c:	22ac      	movs	r2, #172	; 0xac
     75e:	6839      	ldr	r1, [r7, #0]
     760:	4835      	ldr	r0, [pc, #212]	; (838 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     762:	4b38      	ldr	r3, [pc, #224]	; (844 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     764:	4798      	blx	r3
     766:	6178      	str	r0, [r7, #20]
		refCRC=memory.ReadCRCConfigurationData();
     768:	4831      	ldr	r0, [pc, #196]	; (830 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     76a:	4b37      	ldr	r3, [pc, #220]	; (848 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x120>)
     76c:	4798      	blx	r3
     76e:	6138      	str	r0, [r7, #16]
		if (crc==refCRC)
     770:	697a      	ldr	r2, [r7, #20]
     772:	693b      	ldr	r3, [r7, #16]
     774:	429a      	cmp	r2, r3
     776:	d108      	bne.n	78a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x62>
		{
			configuration=cd;
     778:	687b      	ldr	r3, [r7, #4]
     77a:	683a      	ldr	r2, [r7, #0]
     77c:	332c      	adds	r3, #44	; 0x2c
     77e:	4611      	mov	r1, r2
     780:	22ac      	movs	r2, #172	; 0xac
     782:	4618      	mov	r0, r3
     784:	4b31      	ldr	r3, [pc, #196]	; (84c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     786:	4798      	blx	r3
     788:	e047      	b.n	81a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     78a:	687b      	ldr	r3, [r7, #4]
     78c:	332c      	adds	r3, #44	; 0x2c
     78e:	4619      	mov	r1, r3
     790:	4827      	ldr	r0, [pc, #156]	; (830 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     792:	4b2f      	ldr	r3, [pc, #188]	; (850 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x128>)
     794:	4798      	blx	r3
     796:	61f8      	str	r0, [r7, #28]
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     798:	687b      	ldr	r3, [r7, #4]
     79a:	332c      	adds	r3, #44	; 0x2c
     79c:	22ac      	movs	r2, #172	; 0xac
     79e:	4619      	mov	r1, r3
     7a0:	4825      	ldr	r0, [pc, #148]	; (838 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     7a2:	4b28      	ldr	r3, [pc, #160]	; (844 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     7a4:	4798      	blx	r3
     7a6:	6178      	str	r0, [r7, #20]
			if (crc==hvac.CRC32)
     7a8:	4b2a      	ldr	r3, [pc, #168]	; (854 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     7aa:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
     7ae:	697b      	ldr	r3, [r7, #20]
     7b0:	429a      	cmp	r2, r3
     7b2:	d105      	bne.n	7c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x98>
			{
				w=memory.WriteCRCConfigurationData(crc);
     7b4:	6979      	ldr	r1, [r7, #20]
     7b6:	481e      	ldr	r0, [pc, #120]	; (830 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     7b8:	4b27      	ldr	r3, [pc, #156]	; (858 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     7ba:	4798      	blx	r3
     7bc:	61b8      	str	r0, [r7, #24]
     7be:	e02c      	b.n	81a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     7c0:	687b      	ldr	r3, [r7, #4]
     7c2:	4a26      	ldr	r2, [pc, #152]	; (85c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x134>)
     7c4:	332c      	adds	r3, #44	; 0x2c
     7c6:	4611      	mov	r1, r2
     7c8:	22ac      	movs	r2, #172	; 0xac
     7ca:	4618      	mov	r0, r3
     7cc:	4b1f      	ldr	r3, [pc, #124]	; (84c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     7ce:	4798      	blx	r3
				e=qspiFlash.Erase((uint32_t)&flashMap->configurationSector);
     7d0:	4b23      	ldr	r3, [pc, #140]	; (860 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     7d2:	681b      	ldr	r3, [r3, #0]
     7d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     7d8:	4619      	mov	r1, r3
     7da:	4822      	ldr	r0, [pc, #136]	; (864 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     7dc:	4b22      	ldr	r3, [pc, #136]	; (868 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     7de:	4798      	blx	r3
     7e0:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultConfiguration();
     7e2:	4813      	ldr	r0, [pc, #76]	; (830 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     7e4:	4b21      	ldr	r3, [pc, #132]	; (86c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x144>)
     7e6:	4798      	blx	r3
     7e8:	61b8      	str	r0, [r7, #24]
				
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     7ea:	4b1a      	ldr	r3, [pc, #104]	; (854 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     7ec:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
     7f0:	4619      	mov	r1, r3
     7f2:	480f      	ldr	r0, [pc, #60]	; (830 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     7f4:	4b18      	ldr	r3, [pc, #96]	; (858 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     7f6:	4798      	blx	r3
     7f8:	61b8      	str	r0, [r7, #24]
				
				e=qspiFlash.Erase((uint32_t)&flashMap->parametersSector);
     7fa:	4b19      	ldr	r3, [pc, #100]	; (860 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     7fc:	681b      	ldr	r3, [r3, #0]
     7fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     802:	4619      	mov	r1, r3
     804:	4817      	ldr	r0, [pc, #92]	; (864 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     806:	4b18      	ldr	r3, [pc, #96]	; (868 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     808:	4798      	blx	r3
     80a:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultParameters();
     80c:	4808      	ldr	r0, [pc, #32]	; (830 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     80e:	4b18      	ldr	r3, [pc, #96]	; (870 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x148>)
     810:	4798      	blx	r3
     812:	61b8      	str	r0, [r7, #24]
				memory.WriteFastDefaultParameters();
     814:	4817      	ldr	r0, [pc, #92]	; (874 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x14c>)
     816:	4b18      	ldr	r3, [pc, #96]	; (878 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x150>)
     818:	4798      	blx	r3
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     81a:	687b      	ldr	r3, [r7, #4]
     81c:	332c      	adds	r3, #44	; 0x2c
     81e:	4619      	mov	r1, r3
     820:	480c      	ldr	r0, [pc, #48]	; (854 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     822:	4b16      	ldr	r3, [pc, #88]	; (87c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x154>)
     824:	4798      	blx	r3
	return r;
     826:	69fb      	ldr	r3, [r7, #28]
};
     828:	4618      	mov	r0, r3
     82a:	3720      	adds	r7, #32
     82c:	46bd      	mov	sp, r7
     82e:	bd80      	pop	{r7, pc}
     830:	20001c80 	.word	0x20001c80
     834:	000028f9 	.word	0x000028f9
     838:	20001ae4 	.word	0x20001ae4
     83c:	00002dfd 	.word	0x00002dfd
     840:	0000292d 	.word	0x0000292d
     844:	00001239 	.word	0x00001239
     848:	00002999 	.word	0x00002999
     84c:	0001af55 	.word	0x0001af55
     850:	000028c5 	.word	0x000028c5
     854:	2000804c 	.word	0x2000804c
     858:	00002b89 	.word	0x00002b89
     85c:	0001ed50 	.word	0x0001ed50
     860:	20008030 	.word	0x20008030
     864:	200099dc 	.word	0x200099dc
     868:	00015b01 	.word	0x00015b01
     86c:	00002a71 	.word	0x00002a71
     870:	00002ac5 	.word	0x00002ac5
     874:	20001c70 	.word	0x20001c70
     878:	000016c1 	.word	0x000016c1
     87c:	00003d89 	.word	0x00003d89

00000880 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData>:

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
     880:	b580      	push	{r7, lr}
     882:	b084      	sub	sp, #16
     884:	af00      	add	r7, sp, #0
     886:	60f8      	str	r0, [r7, #12]
     888:	460b      	mov	r3, r1
     88a:	607a      	str	r2, [r7, #4]
     88c:	72fb      	strb	r3, [r7, #11]
	listener.SendErrorSelf(uint16_t(ifl),data);
     88e:	7afb      	ldrb	r3, [r7, #11]
     890:	b29b      	uxth	r3, r3
     892:	687a      	ldr	r2, [r7, #4]
     894:	4619      	mov	r1, r3
     896:	4803      	ldr	r0, [pc, #12]	; (8a4 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x24>)
     898:	4b03      	ldr	r3, [pc, #12]	; (8a8 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x28>)
     89a:	4798      	blx	r3
}
     89c:	bf00      	nop
     89e:	3710      	adds	r7, #16
     8a0:	46bd      	mov	sp, r7
     8a2:	bd80      	pop	{r7, pc}
     8a4:	20009788 	.word	0x20009788
     8a8:	00014289 	.word	0x00014289

000008ac <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm>:
{
	listener.SendErrorSelf(uint16_t(fl),data);
}

void ALU_Class::PrepareNewTask(ALUTaskEnum newTask, uint32_t data)
{
     8ac:	b580      	push	{r7, lr}
     8ae:	b084      	sub	sp, #16
     8b0:	af00      	add	r7, sp, #0
     8b2:	60f8      	str	r0, [r7, #12]
     8b4:	460b      	mov	r3, r1
     8b6:	607a      	str	r2, [r7, #4]
     8b8:	72fb      	strb	r3, [r7, #11]
	
	task.id=newTask;
     8ba:	68fb      	ldr	r3, [r7, #12]
     8bc:	7afa      	ldrb	r2, [r7, #11]
     8be:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
	task.prio=(uint8_t)newTask;
     8c2:	68fb      	ldr	r3, [r7, #12]
     8c4:	7afa      	ldrb	r2, [r7, #11]
     8c6:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
	AddTask(task);
     8ca:	68fa      	ldr	r2, [r7, #12]
     8cc:	68fb      	ldr	r3, [r7, #12]
     8ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
     8d2:	4619      	mov	r1, r3
     8d4:	4610      	mov	r0, r2
     8d6:	4b03      	ldr	r3, [pc, #12]	; (8e4 <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm+0x38>)
     8d8:	4798      	blx	r3

}
     8da:	bf00      	nop
     8dc:	3710      	adds	r7, #16
     8de:	46bd      	mov	sp, r7
     8e0:	bd80      	pop	{r7, pc}
     8e2:	bf00      	nop
     8e4:	000040b1 	.word	0x000040b1

000008e8 <_ZN9ALU_Class15PrepareNewEventEtt>:

void ALU_Class::PrepareNewEvent( uint16 newState, uint16 data)
{
     8e8:	b580      	push	{r7, lr}
     8ea:	b086      	sub	sp, #24
     8ec:	af00      	add	r7, sp, #0
     8ee:	6078      	str	r0, [r7, #4]
     8f0:	460b      	mov	r3, r1
     8f2:	807b      	strh	r3, [r7, #2]
     8f4:	4613      	mov	r3, r2
     8f6:	803b      	strh	r3, [r7, #0]
	event	e;
     8f8:	f107 0308 	add.w	r3, r7, #8
     8fc:	4618      	mov	r0, r3
     8fe:	4b0a      	ldr	r3, [pc, #40]	; (928 <_ZN9ALU_Class15PrepareNewEventEtt+0x40>)
     900:	4798      	blx	r3
	e.eventClass =(EventClass)kALUEventClass;
     902:	f44f 6380 	mov.w	r3, #1024	; 0x400
     906:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kALUControllerEvent;
     908:	2302      	movs	r3, #2
     90a:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
     90c:	887b      	ldrh	r3, [r7, #2]
     90e:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
     910:	883b      	ldrh	r3, [r7, #0]
     912:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
     914:	f107 0308 	add.w	r3, r7, #8
     918:	4619      	mov	r1, r3
     91a:	4804      	ldr	r0, [pc, #16]	; (92c <_ZN9ALU_Class15PrepareNewEventEtt+0x44>)
     91c:	4b04      	ldr	r3, [pc, #16]	; (930 <_ZN9ALU_Class15PrepareNewEventEtt+0x48>)
     91e:	4798      	blx	r3

}
     920:	bf00      	nop
     922:	3718      	adds	r7, #24
     924:	46bd      	mov	sp, r7
     926:	bd80      	pop	{r7, pc}
     928:	000002ed 	.word	0x000002ed
     92c:	20009788 	.word	0x20009788
     930:	000141e9 	.word	0x000141e9

00000934 <_ZN9ALU_Class18ExecutePendingTaskEv>:

bool	ALU_Class::ExecutePendingTask(void){
     934:	b580      	push	{r7, lr}
     936:	b088      	sub	sp, #32
     938:	af00      	add	r7, sp, #0
     93a:	60f8      	str	r0, [r7, #12]
	allTasksDone=false;
     93c:	68fb      	ldr	r3, [r7, #12]
     93e:	2200      	movs	r2, #0
     940:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	list_element *it;
	ControllerTask tk;
	uint8_t		highPrio=kALUNumberTasks;
     944:	2309      	movs	r3, #9
     946:	77fb      	strb	r3, [r7, #31]
	while (tasks->head){
     948:	68fb      	ldr	r3, [r7, #12]
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	681b      	ldr	r3, [r3, #0]
     94e:	2b00      	cmp	r3, #0
     950:	d01a      	beq.n	988 <_ZN9ALU_Class18ExecutePendingTaskEv+0x54>
		tk=GetHighPrioTask();
     952:	68fa      	ldr	r2, [r7, #12]
     954:	463b      	mov	r3, r7
     956:	4611      	mov	r1, r2
     958:	4618      	mov	r0, r3
     95a:	4b16      	ldr	r3, [pc, #88]	; (9b4 <_ZN9ALU_Class18ExecutePendingTaskEv+0x80>)
     95c:	4798      	blx	r3
     95e:	f107 0314 	add.w	r3, r7, #20
     962:	463a      	mov	r2, r7
     964:	e892 0003 	ldmia.w	r2, {r0, r1}
     968:	e883 0003 	stmia.w	r3, {r0, r1}
		HandleTasks(tk);
     96c:	f107 0314 	add.w	r3, r7, #20
     970:	4619      	mov	r1, r3
     972:	68f8      	ldr	r0, [r7, #12]
     974:	4b10      	ldr	r3, [pc, #64]	; (9b8 <_ZN9ALU_Class18ExecutePendingTaskEv+0x84>)
     976:	4798      	blx	r3
		RemoveTask(tk);
     978:	68fb      	ldr	r3, [r7, #12]
     97a:	f107 0214 	add.w	r2, r7, #20
     97e:	4611      	mov	r1, r2
     980:	4618      	mov	r0, r3
     982:	4b0e      	ldr	r3, [pc, #56]	; (9bc <_ZN9ALU_Class18ExecutePendingTaskEv+0x88>)
     984:	4798      	blx	r3
	while (tasks->head){
     986:	e7df      	b.n	948 <_ZN9ALU_Class18ExecutePendingTaskEv+0x14>
	
	}
	allTasksDone=~((bool)tasks->head);
     988:	68fb      	ldr	r3, [r7, #12]
     98a:	2201      	movs	r2, #1
     98c:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	if (allTasksDone)
     990:	68fb      	ldr	r3, [r7, #12]
     992:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
     996:	2b00      	cmp	r3, #0
     998:	d004      	beq.n	9a4 <_ZN9ALU_Class18ExecutePendingTaskEv+0x70>
	{
		PrepareNewEvent(kALUEventSimpleResume);
     99a:	2200      	movs	r2, #0
     99c:	2107      	movs	r1, #7
     99e:	68f8      	ldr	r0, [r7, #12]
     9a0:	4b07      	ldr	r3, [pc, #28]	; (9c0 <_ZN9ALU_Class18ExecutePendingTaskEv+0x8c>)
     9a2:	4798      	blx	r3
	}
	return allTasksDone; 
     9a4:	68fb      	ldr	r3, [r7, #12]
     9a6:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
}
     9aa:	4618      	mov	r0, r3
     9ac:	3720      	adds	r7, #32
     9ae:	46bd      	mov	sp, r7
     9b0:	bd80      	pop	{r7, pc}
     9b2:	bf00      	nop
     9b4:	00004235 	.word	0x00004235
     9b8:	000009c5 	.word	0x000009c5
     9bc:	000041a1 	.word	0x000041a1
     9c0:	000008e9 	.word	0x000008e9

000009c4 <_ZN9ALU_Class11HandleTasksER14ControllerTask>:
void ALU_Class::HandleTasks(ControllerTask& ct)
{
     9c4:	b580      	push	{r7, lr}
     9c6:	b084      	sub	sp, #16
     9c8:	af00      	add	r7, sp, #0
     9ca:	6078      	str	r0, [r7, #4]
     9cc:	6039      	str	r1, [r7, #0]

	taskEntryTime= hvacTimer.Get_ticks();
     9ce:	4822      	ldr	r0, [pc, #136]	; (a58 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x94>)
     9d0:	4b22      	ldr	r3, [pc, #136]	; (a5c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x98>)
     9d2:	4798      	blx	r3
     9d4:	4602      	mov	r2, r0
     9d6:	687b      	ldr	r3, [r7, #4]
     9d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	switch (ct.id)
     9dc:	683b      	ldr	r3, [r7, #0]
     9de:	791b      	ldrb	r3, [r3, #4]
     9e0:	3b02      	subs	r3, #2
     9e2:	2b06      	cmp	r3, #6
     9e4:	d82f      	bhi.n	a46 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x82>
     9e6:	a201      	add	r2, pc, #4	; (adr r2, 9ec <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x28>)
     9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     9ec:	00000a27 	.word	0x00000a27
     9f0:	00000a35 	.word	0x00000a35
     9f4:	00000a09 	.word	0x00000a09
     9f8:	00000a47 	.word	0x00000a47
     9fc:	00000a1d 	.word	0x00000a1d
     a00:	00000a13 	.word	0x00000a13
     a04:	00000a3f 	.word	0x00000a3f
	{
		case kALUEventSimpleStart:
		hvac.Start(0);
     a08:	2100      	movs	r1, #0
     a0a:	4815      	ldr	r0, [pc, #84]	; (a60 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9c>)
     a0c:	4b15      	ldr	r3, [pc, #84]	; (a64 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa0>)
     a0e:	4798      	blx	r3
		break;
     a10:	e01e      	b.n	a50 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x8c>

		case kALUSimpleResume:
		hvac.ControllerResume(0);
     a12:	2100      	movs	r1, #0
     a14:	4812      	ldr	r0, [pc, #72]	; (a60 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9c>)
     a16:	4b14      	ldr	r3, [pc, #80]	; (a68 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa4>)
     a18:	4798      	blx	r3
		break;
     a1a:	e019      	b.n	a50 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x8c>

		case kALUSimpleStop:
		hvac.Stop(0);
     a1c:	2100      	movs	r1, #0
     a1e:	4810      	ldr	r0, [pc, #64]	; (a60 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9c>)
     a20:	4b12      	ldr	r3, [pc, #72]	; (a6c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa8>)
     a22:	4798      	blx	r3
		break;
     a24:	e014      	b.n	a50 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x8c>
		case kALUTaskCheckCommunication:
		interfaces.CheckCommunication();
     a26:	f107 0308 	add.w	r3, r7, #8
     a2a:	4911      	ldr	r1, [pc, #68]	; (a70 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     a2c:	4618      	mov	r0, r3
     a2e:	4b11      	ldr	r3, [pc, #68]	; (a74 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     a30:	4798      	blx	r3
		break;
     a32:	e00d      	b.n	a50 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x8c>
		case kALUTaskReadARINCR1:
			arinc.ReadRXBuffer(1);
     a34:	2101      	movs	r1, #1
     a36:	4810      	ldr	r0, [pc, #64]	; (a78 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb4>)
     a38:	4b10      	ldr	r3, [pc, #64]	; (a7c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     a3a:	4798      	blx	r3
			
		break;
     a3c:	e008      	b.n	a50 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x8c>
		case kALUTaskUpdateTemperatures:
			arinc.SaveTemperature();
     a3e:	480e      	ldr	r0, [pc, #56]	; (a78 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb4>)
     a40:	4b0f      	ldr	r3, [pc, #60]	; (a80 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xbc>)
     a42:	4798      	blx	r3
		
		break;
     a44:	e004      	b.n	a50 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x8c>

		default:
		hvac.Stop(0);
     a46:	2100      	movs	r1, #0
     a48:	4805      	ldr	r0, [pc, #20]	; (a60 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9c>)
     a4a:	4b08      	ldr	r3, [pc, #32]	; (a6c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa8>)
     a4c:	4798      	blx	r3
		break;
     a4e:	bf00      	nop
	}
}
     a50:	bf00      	nop
     a52:	3710      	adds	r7, #16
     a54:	46bd      	mov	sp, r7
     a56:	bd80      	pop	{r7, pc}
     a58:	20009e24 	.word	0x20009e24
     a5c:	00016ae9 	.word	0x00016ae9
     a60:	2000804c 	.word	0x2000804c
     a64:	00003209 	.word	0x00003209
     a68:	0000309d 	.word	0x0000309d
     a6c:	00003d11 	.word	0x00003d11
     a70:	2000156c 	.word	0x2000156c
     a74:	00001e65 	.word	0x00001e65
     a78:	20008c20 	.word	0x20008c20
     a7c:	00012e05 	.word	0x00012e05
     a80:	000123d1 	.word	0x000123d1

00000a84 <_ZN9ALU_Class17CheckPeriodicTaskEv>:

void ALU_Class::CheckPeriodicTask(void){
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
	interfaces.CheckCommunication();
     a8a:	463b      	mov	r3, r7
     a8c:	4903      	ldr	r1, [pc, #12]	; (a9c <_ZN9ALU_Class17CheckPeriodicTaskEv+0x18>)
     a8e:	4618      	mov	r0, r3
     a90:	4b03      	ldr	r3, [pc, #12]	; (aa0 <_ZN9ALU_Class17CheckPeriodicTaskEv+0x1c>)
     a92:	4798      	blx	r3
}
     a94:	bf00      	nop
     a96:	3708      	adds	r7, #8
     a98:	46bd      	mov	sp, r7
     a9a:	bd80      	pop	{r7, pc}
     a9c:	2000156c 	.word	0x2000156c
     aa0:	00001e65 	.word	0x00001e65

00000aa4 <_ZlsIhER5PrintS1_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     aa4:	b580      	push	{r7, lr}
     aa6:	b082      	sub	sp, #8
     aa8:	af00      	add	r7, sp, #0
     aaa:	6078      	str	r0, [r7, #4]
     aac:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     aae:	683b      	ldr	r3, [r7, #0]
     ab0:	781b      	ldrb	r3, [r3, #0]
     ab2:	220a      	movs	r2, #10
     ab4:	4619      	mov	r1, r3
     ab6:	6878      	ldr	r0, [r7, #4]
     ab8:	4b03      	ldr	r3, [pc, #12]	; (ac8 <_ZlsIhER5PrintS1_RKT_+0x24>)
     aba:	4798      	blx	r3
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	4618      	mov	r0, r3
     ac0:	3708      	adds	r7, #8
     ac2:	46bd      	mov	sp, r7
     ac4:	bd80      	pop	{r7, pc}
     ac6:	bf00      	nop
     ac8:	0001734d 	.word	0x0001734d

00000acc <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     acc:	b580      	push	{r7, lr}
     ace:	b082      	sub	sp, #8
     ad0:	af00      	add	r7, sp, #0
     ad2:	6078      	str	r0, [r7, #4]
     ad4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     ad6:	6839      	ldr	r1, [r7, #0]
     ad8:	6878      	ldr	r0, [r7, #4]
     ada:	4b03      	ldr	r3, [pc, #12]	; (ae8 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     adc:	4798      	blx	r3
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	4618      	mov	r0, r3
     ae2:	3708      	adds	r7, #8
     ae4:	46bd      	mov	sp, r7
     ae6:	bd80      	pop	{r7, pc}
     ae8:	00017309 	.word	0x00017309

00000aec <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     aec:	b580      	push	{r7, lr}
     aee:	b082      	sub	sp, #8
     af0:	af00      	add	r7, sp, #0
     af2:	6078      	str	r0, [r7, #4]
     af4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     af6:	6839      	ldr	r1, [r7, #0]
     af8:	6878      	ldr	r0, [r7, #4]
     afa:	4b03      	ldr	r3, [pc, #12]	; (b08 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     afc:	4798      	blx	r3
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	4618      	mov	r0, r3
     b02:	3708      	adds	r7, #8
     b04:	46bd      	mov	sp, r7
     b06:	bd80      	pop	{r7, pc}
     b08:	00017309 	.word	0x00017309

00000b0c <_Z41__static_initialization_and_destruction_0ii>:




     b0c:	b580      	push	{r7, lr}
     b0e:	b082      	sub	sp, #8
     b10:	af00      	add	r7, sp, #0
     b12:	6078      	str	r0, [r7, #4]
     b14:	6039      	str	r1, [r7, #0]
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	2b01      	cmp	r3, #1
     b1a:	d10c      	bne.n	b36 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     b1c:	683b      	ldr	r3, [r7, #0]
     b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     b22:	4293      	cmp	r3, r2
     b24:	d107      	bne.n	b36 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     b26:	4806      	ldr	r0, [pc, #24]	; (b40 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     b28:	4b06      	ldr	r3, [pc, #24]	; (b44 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     b2a:	4798      	blx	r3
     b2c:	4a06      	ldr	r2, [pc, #24]	; (b48 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     b2e:	4907      	ldr	r1, [pc, #28]	; (b4c <_Z41__static_initialization_and_destruction_0ii+0x40>)
     b30:	4803      	ldr	r0, [pc, #12]	; (b40 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     b32:	4b07      	ldr	r3, [pc, #28]	; (b50 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     b34:	4798      	blx	r3
     b36:	bf00      	nop
     b38:	3708      	adds	r7, #8
     b3a:	46bd      	mov	sp, r7
     b3c:	bd80      	pop	{r7, pc}
     b3e:	bf00      	nop
     b40:	20000bd8 	.word	0x20000bd8
     b44:	0000034d 	.word	0x0000034d
     b48:	20000000 	.word	0x20000000
     b4c:	00000375 	.word	0x00000375
     b50:	000187f1 	.word	0x000187f1

00000b54 <_GLOBAL__sub_I_ptrALUClass>:
     b54:	b580      	push	{r7, lr}
     b56:	af00      	add	r7, sp, #0
     b58:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b5c:	2001      	movs	r0, #1
     b5e:	4b01      	ldr	r3, [pc, #4]	; (b64 <_GLOBAL__sub_I_ptrALUClass+0x10>)
     b60:	4798      	blx	r3
     b62:	bd80      	pop	{r7, pc}
     b64:	00000b0d 	.word	0x00000b0d

00000b68 <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: private virtual ARINC_Conversions
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
     b70:	6039      	str	r1, [r7, #0]
     b72:	683b      	ldr	r3, [r7, #0]
     b74:	681a      	ldr	r2, [r3, #0]
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	601a      	str	r2, [r3, #0]
     b7a:	687b      	ldr	r3, [r7, #4]
     b7c:	681b      	ldr	r3, [r3, #0]
     b7e:	3b0c      	subs	r3, #12
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	461a      	mov	r2, r3
     b84:	687b      	ldr	r3, [r7, #4]
     b86:	4413      	add	r3, r2
     b88:	683a      	ldr	r2, [r7, #0]
     b8a:	6852      	ldr	r2, [r2, #4]
     b8c:	601a      	str	r2, [r3, #0]
     b8e:	687b      	ldr	r3, [r7, #4]
     b90:	4618      	mov	r0, r3
     b92:	370c      	adds	r7, #12
     b94:	46bd      	mov	sp, r7
     b96:	bc80      	pop	{r7}
     b98:	4770      	bx	lr
	...

00000b9c <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     b9c:	b580      	push	{r7, lr}
     b9e:	b082      	sub	sp, #8
     ba0:	af00      	add	r7, sp, #0
     ba2:	6078      	str	r0, [r7, #4]
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	f503 7342 	add.w	r3, r3, #776	; 0x308
     baa:	4618      	mov	r0, r3
     bac:	4b10      	ldr	r3, [pc, #64]	; (bf0 <_ZN10AMMC_ClassC1Ev+0x54>)
     bae:	4798      	blx	r3
     bb0:	687b      	ldr	r3, [r7, #4]
     bb2:	f503 7346 	add.w	r3, r3, #792	; 0x318
     bb6:	4a0f      	ldr	r2, [pc, #60]	; (bf4 <_ZN10AMMC_ClassC1Ev+0x58>)
     bb8:	4611      	mov	r1, r2
     bba:	4618      	mov	r0, r3
     bbc:	4b0e      	ldr	r3, [pc, #56]	; (bf8 <_ZN10AMMC_ClassC1Ev+0x5c>)
     bbe:	4798      	blx	r3
     bc0:	687b      	ldr	r3, [r7, #4]
     bc2:	4a0e      	ldr	r2, [pc, #56]	; (bfc <_ZN10AMMC_ClassC1Ev+0x60>)
     bc4:	4611      	mov	r1, r2
     bc6:	4618      	mov	r0, r3
     bc8:	4b0d      	ldr	r3, [pc, #52]	; (c00 <_ZN10AMMC_ClassC1Ev+0x64>)
     bca:	4798      	blx	r3
     bcc:	4a0d      	ldr	r2, [pc, #52]	; (c04 <_ZN10AMMC_ClassC1Ev+0x68>)
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	601a      	str	r2, [r3, #0]
     bd2:	687b      	ldr	r3, [r7, #4]
     bd4:	f503 7342 	add.w	r3, r3, #776	; 0x308
     bd8:	4a0b      	ldr	r2, [pc, #44]	; (c08 <_ZN10AMMC_ClassC1Ev+0x6c>)
     bda:	601a      	str	r2, [r3, #0]
     bdc:	687b      	ldr	r3, [r7, #4]
     bde:	f503 7346 	add.w	r3, r3, #792	; 0x318
     be2:	4a0a      	ldr	r2, [pc, #40]	; (c0c <_ZN10AMMC_ClassC1Ev+0x70>)
     be4:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	4618      	mov	r0, r3
     bea:	3708      	adds	r7, #8
     bec:	46bd      	mov	sp, r7
     bee:	bd80      	pop	{r7, pc}
     bf0:	000124f5 	.word	0x000124f5
     bf4:	0001ec74 	.word	0x0001ec74
     bf8:	00000b69 	.word	0x00000b69
     bfc:	0001ec54 	.word	0x0001ec54
     c00:	00012a21 	.word	0x00012a21
     c04:	0001ec0c 	.word	0x0001ec0c
     c08:	0001ec28 	.word	0x0001ec28
     c0c:	0001ec44 	.word	0x0001ec44

00000c10 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     c10:	b580      	push	{r7, lr}
     c12:	b082      	sub	sp, #8
     c14:	af00      	add	r7, sp, #0
     c16:	6078      	str	r0, [r7, #4]
     c18:	4a12      	ldr	r2, [pc, #72]	; (c64 <_ZN10AMMC_ClassD1Ev+0x54>)
     c1a:	687b      	ldr	r3, [r7, #4]
     c1c:	601a      	str	r2, [r3, #0]
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	f503 7342 	add.w	r3, r3, #776	; 0x308
     c24:	4a10      	ldr	r2, [pc, #64]	; (c68 <_ZN10AMMC_ClassD1Ev+0x58>)
     c26:	601a      	str	r2, [r3, #0]
     c28:	687b      	ldr	r3, [r7, #4]
     c2a:	f503 7346 	add.w	r3, r3, #792	; 0x318
     c2e:	4a0f      	ldr	r2, [pc, #60]	; (c6c <_ZN10AMMC_ClassD1Ev+0x5c>)
     c30:	601a      	str	r2, [r3, #0]
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	4a0e      	ldr	r2, [pc, #56]	; (c70 <_ZN10AMMC_ClassD1Ev+0x60>)
     c36:	4611      	mov	r1, r2
     c38:	4618      	mov	r0, r3
     c3a:	4b0e      	ldr	r3, [pc, #56]	; (c74 <_ZN10AMMC_ClassD1Ev+0x64>)
     c3c:	4798      	blx	r3
     c3e:	687b      	ldr	r3, [r7, #4]
     c40:	f503 7346 	add.w	r3, r3, #792	; 0x318
     c44:	4a0c      	ldr	r2, [pc, #48]	; (c78 <_ZN10AMMC_ClassD1Ev+0x68>)
     c46:	4611      	mov	r1, r2
     c48:	4618      	mov	r0, r3
     c4a:	4b0c      	ldr	r3, [pc, #48]	; (c7c <_ZN10AMMC_ClassD1Ev+0x6c>)
     c4c:	4798      	blx	r3
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	f503 7342 	add.w	r3, r3, #776	; 0x308
     c54:	4618      	mov	r0, r3
     c56:	4b0a      	ldr	r3, [pc, #40]	; (c80 <_ZN10AMMC_ClassD1Ev+0x70>)
     c58:	4798      	blx	r3
{
} //~AMMC_Class
     c5a:	687b      	ldr	r3, [r7, #4]
     c5c:	4618      	mov	r0, r3
     c5e:	3708      	adds	r7, #8
     c60:	46bd      	mov	sp, r7
     c62:	bd80      	pop	{r7, pc}
     c64:	0001ec0c 	.word	0x0001ec0c
     c68:	0001ec28 	.word	0x0001ec28
     c6c:	0001ec44 	.word	0x0001ec44
     c70:	0001ec54 	.word	0x0001ec54
     c74:	00012b21 	.word	0x00012b21
     c78:	0001ec74 	.word	0x0001ec74
     c7c:	00013a95 	.word	0x00013a95
     c80:	00012515 	.word	0x00012515

00000c84 <_ZTv0_n16_N10AMMC_ClassD1Ev>:
     c84:	b580      	push	{r7, lr}
     c86:	b082      	sub	sp, #8
     c88:	af00      	add	r7, sp, #0
     c8a:	6078      	str	r0, [r7, #4]
     c8c:	687b      	ldr	r3, [r7, #4]
     c8e:	681b      	ldr	r3, [r3, #0]
     c90:	3b10      	subs	r3, #16
     c92:	681b      	ldr	r3, [r3, #0]
     c94:	461a      	mov	r2, r3
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	4413      	add	r3, r2
     c9a:	4618      	mov	r0, r3
     c9c:	4b03      	ldr	r3, [pc, #12]	; (cac <_ZTv0_n16_N10AMMC_ClassD1Ev+0x28>)
     c9e:	4798      	blx	r3
     ca0:	4603      	mov	r3, r0
     ca2:	4618      	mov	r0, r3
     ca4:	3708      	adds	r7, #8
     ca6:	46bd      	mov	sp, r7
     ca8:	bd80      	pop	{r7, pc}
     caa:	bf00      	nop
     cac:	00000c11 	.word	0x00000c11

00000cb0 <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     cb0:	b580      	push	{r7, lr}
     cb2:	b082      	sub	sp, #8
     cb4:	af00      	add	r7, sp, #0
     cb6:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     cb8:	6878      	ldr	r0, [r7, #4]
     cba:	4b06      	ldr	r3, [pc, #24]	; (cd4 <_ZN10AMMC_ClassD0Ev+0x24>)
     cbc:	4798      	blx	r3
     cbe:	f44f 714b 	mov.w	r1, #812	; 0x32c
     cc2:	6878      	ldr	r0, [r7, #4]
     cc4:	4b04      	ldr	r3, [pc, #16]	; (cd8 <_ZN10AMMC_ClassD0Ev+0x28>)
     cc6:	4798      	blx	r3
     cc8:	687b      	ldr	r3, [r7, #4]
     cca:	4618      	mov	r0, r3
     ccc:	3708      	adds	r7, #8
     cce:	46bd      	mov	sp, r7
     cd0:	bd80      	pop	{r7, pc}
     cd2:	bf00      	nop
     cd4:	00000c11 	.word	0x00000c11
     cd8:	000187fd 	.word	0x000187fd

00000cdc <_ZTv0_n16_N10AMMC_ClassD0Ev>:
     cdc:	b580      	push	{r7, lr}
     cde:	b082      	sub	sp, #8
     ce0:	af00      	add	r7, sp, #0
     ce2:	6078      	str	r0, [r7, #4]
     ce4:	687b      	ldr	r3, [r7, #4]
     ce6:	681b      	ldr	r3, [r3, #0]
     ce8:	3b10      	subs	r3, #16
     cea:	681b      	ldr	r3, [r3, #0]
     cec:	461a      	mov	r2, r3
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	4413      	add	r3, r2
     cf2:	4618      	mov	r0, r3
     cf4:	4b03      	ldr	r3, [pc, #12]	; (d04 <_ZTv0_n16_N10AMMC_ClassD0Ev+0x28>)
     cf6:	4798      	blx	r3
     cf8:	4603      	mov	r3, r0
     cfa:	4618      	mov	r0, r3
     cfc:	3708      	adds	r7, #8
     cfe:	46bd      	mov	sp, r7
     d00:	bd80      	pop	{r7, pc}
     d02:	bf00      	nop
     d04:	00000cb1 	.word	0x00000cb1

00000d08 <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     d08:	b580      	push	{r7, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	af00      	add	r7, sp, #0
     d0e:	6078      	str	r0, [r7, #4]
     d10:	6039      	str	r1, [r7, #0]
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	2b01      	cmp	r3, #1
     d16:	d114      	bne.n	d42 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     d18:	683b      	ldr	r3, [r7, #0]
     d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     d1e:	4293      	cmp	r3, r2
     d20:	d10f      	bne.n	d42 <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     d22:	480a      	ldr	r0, [pc, #40]	; (d4c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     d24:	4b0a      	ldr	r3, [pc, #40]	; (d50 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     d26:	4798      	blx	r3
     d28:	4a0a      	ldr	r2, [pc, #40]	; (d54 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     d2a:	490b      	ldr	r1, [pc, #44]	; (d58 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     d2c:	4807      	ldr	r0, [pc, #28]	; (d4c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     d2e:	4b0b      	ldr	r3, [pc, #44]	; (d5c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     d30:	4798      	blx	r3
AMMC_Class	ammc2;
     d32:	480b      	ldr	r0, [pc, #44]	; (d60 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     d34:	4b06      	ldr	r3, [pc, #24]	; (d50 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     d36:	4798      	blx	r3
     d38:	4a06      	ldr	r2, [pc, #24]	; (d54 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     d3a:	4907      	ldr	r1, [pc, #28]	; (d58 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     d3c:	4808      	ldr	r0, [pc, #32]	; (d60 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     d3e:	4b07      	ldr	r3, [pc, #28]	; (d5c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     d40:	4798      	blx	r3
     d42:	bf00      	nop
     d44:	3708      	adds	r7, #8
     d46:	46bd      	mov	sp, r7
     d48:	bd80      	pop	{r7, pc}
     d4a:	bf00      	nop
     d4c:	20000d4c 	.word	0x20000d4c
     d50:	00000b9d 	.word	0x00000b9d
     d54:	20000000 	.word	0x20000000
     d58:	00000c11 	.word	0x00000c11
     d5c:	000187f1 	.word	0x000187f1
     d60:	20001078 	.word	0x20001078

00000d64 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     d64:	b580      	push	{r7, lr}
     d66:	af00      	add	r7, sp, #0
     d68:	f64f 71ff 	movw	r1, #65535	; 0xffff
     d6c:	2001      	movs	r0, #1
     d6e:	4b01      	ldr	r3, [pc, #4]	; (d74 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     d70:	4798      	blx	r3
     d72:	bd80      	pop	{r7, pc}
     d74:	00000d09 	.word	0x00000d09

00000d78 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     d78:	b480      	push	{r7}
     d7a:	b083      	sub	sp, #12
     d7c:	af00      	add	r7, sp, #0
     d7e:	6078      	str	r0, [r7, #4]
{
	isOK=true;
     d80:	687b      	ldr	r3, [r7, #4]
     d82:	2201      	movs	r2, #1
     d84:	701a      	strb	r2, [r3, #0]
} //CBIT_Class
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	4618      	mov	r0, r3
     d8a:	370c      	adds	r7, #12
     d8c:	46bd      	mov	sp, r7
     d8e:	bc80      	pop	{r7}
     d90:	4770      	bx	lr

00000d92 <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     d92:	b480      	push	{r7}
     d94:	b083      	sub	sp, #12
     d96:	af00      	add	r7, sp, #0
     d98:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     d9a:	687b      	ldr	r3, [r7, #4]
     d9c:	4618      	mov	r0, r3
     d9e:	370c      	adds	r7, #12
     da0:	46bd      	mov	sp, r7
     da2:	bc80      	pop	{r7}
     da4:	4770      	bx	lr

00000da6 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     da6:	b480      	push	{r7}
     da8:	b083      	sub	sp, #12
     daa:	af00      	add	r7, sp, #0
     dac:	6078      	str	r0, [r7, #4]
	return	isOK;
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	781b      	ldrb	r3, [r3, #0]
     db2:	b2db      	uxtb	r3, r3
}
     db4:	4618      	mov	r0, r3
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	bc80      	pop	{r7}
     dbc:	4770      	bx	lr
	...

00000dc0 <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}

     dc0:	b580      	push	{r7, lr}
     dc2:	b082      	sub	sp, #8
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	6039      	str	r1, [r7, #0]
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	2b01      	cmp	r3, #1
     dce:	d10c      	bne.n	dea <_Z41__static_initialization_and_destruction_0ii+0x2a>
     dd0:	683b      	ldr	r3, [r7, #0]
     dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     dd6:	4293      	cmp	r3, r2
     dd8:	d107      	bne.n	dea <_Z41__static_initialization_and_destruction_0ii+0x2a>
     dda:	4806      	ldr	r0, [pc, #24]	; (df4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     ddc:	4b06      	ldr	r3, [pc, #24]	; (df8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     dde:	4798      	blx	r3
     de0:	4a06      	ldr	r2, [pc, #24]	; (dfc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     de2:	4907      	ldr	r1, [pc, #28]	; (e00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     de4:	4803      	ldr	r0, [pc, #12]	; (df4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     de6:	4b07      	ldr	r3, [pc, #28]	; (e04 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     de8:	4798      	blx	r3
     dea:	bf00      	nop
     dec:	3708      	adds	r7, #8
     dee:	46bd      	mov	sp, r7
     df0:	bd80      	pop	{r7, pc}
     df2:	bf00      	nop
     df4:	200013a8 	.word	0x200013a8
     df8:	00000d79 	.word	0x00000d79
     dfc:	20000000 	.word	0x20000000
     e00:	00000d93 	.word	0x00000d93
     e04:	000187f1 	.word	0x000187f1

00000e08 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
     e08:	b580      	push	{r7, lr}
     e0a:	af00      	add	r7, sp, #0
     e0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     e10:	2001      	movs	r0, #1
     e12:	4b01      	ldr	r3, [pc, #4]	; (e18 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
     e14:	4798      	blx	r3
     e16:	bd80      	pop	{r7, pc}
     e18:	00000dc1 	.word	0x00000dc1

00000e1c <_ZN17ConfigState_ClassC1Ev>:

} ;


// default constructor
ConfigState_Class::ConfigState_Class()
     e1c:	b480      	push	{r7}
     e1e:	b083      	sub	sp, #12
     e20:	af00      	add	r7, sp, #0
     e22:	6078      	str	r0, [r7, #4]
     e24:	4a12      	ldr	r2, [pc, #72]	; (e70 <_ZN17ConfigState_ClassC1Ev+0x54>)
     e26:	687b      	ldr	r3, [r7, #4]
     e28:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kHVACStateReset;
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	2201      	movs	r2, #1
     e2e:	62da      	str	r2, [r3, #44]	; 0x2c
	defaultState.callingState = kHVACStateReset;
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	2201      	movs	r2, #1
     e34:	631a      	str	r2, [r3, #48]	; 0x30
	defaultState.internalCateringState = 0;
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	2200      	movs	r2, #0
     e3a:	635a      	str	r2, [r3, #52]	; 0x34
	//defaultState.targetUDC = 0.0;
	defaultState.cycleDuration = 0;
     e3c:	687b      	ldr	r3, [r7, #4]
     e3e:	2200      	movs	r2, #0
     e40:	649a      	str	r2, [r3, #72]	; 0x48
	defaultState.inStateTime = 0;
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	2200      	movs	r2, #0
     e46:	641a      	str	r2, [r3, #64]	; 0x40
	defaultState.remainingTime = 0;
     e48:	687b      	ldr	r3, [r7, #4]
     e4a:	2200      	movs	r2, #0
     e4c:	64da      	str	r2, [r3, #76]	; 0x4c
	defaultState.waitingExceededTime = 0;
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	2200      	movs	r2, #0
     e52:	655a      	str	r2, [r3, #84]	; 0x54
	defaultState.fansOnAfterCateringCycleTime = forever;
     e54:	4b07      	ldr	r3, [pc, #28]	; (e74 <_ZN17ConfigState_ClassC1Ev+0x58>)
     e56:	681a      	ldr	r2, [r3, #0]
     e58:	687b      	ldr	r3, [r7, #4]
     e5a:	659a      	str	r2, [r3, #88]	; 0x58
	defaultState.magic=0xCAFEBABE;
     e5c:	687b      	ldr	r3, [r7, #4]
     e5e:	4a06      	ldr	r2, [pc, #24]	; (e78 <_ZN17ConfigState_ClassC1Ev+0x5c>)
     e60:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
     e62:	687b      	ldr	r3, [r7, #4]
     e64:	4618      	mov	r0, r3
     e66:	370c      	adds	r7, #12
     e68:	46bd      	mov	sp, r7
     e6a:	bc80      	pop	{r7}
     e6c:	4770      	bx	lr
     e6e:	bf00      	nop
     e70:	0001f160 	.word	0x0001f160
     e74:	00020a60 	.word	0x00020a60
     e78:	cafebabe 	.word	0xcafebabe

00000e7c <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
     e7c:	b480      	push	{r7}
     e7e:	b083      	sub	sp, #12
     e80:	af00      	add	r7, sp, #0
     e82:	6078      	str	r0, [r7, #4]
     e84:	4a04      	ldr	r2, [pc, #16]	; (e98 <_ZN17ConfigState_ClassD1Ev+0x1c>)
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
     e8a:	687b      	ldr	r3, [r7, #4]
     e8c:	4618      	mov	r0, r3
     e8e:	370c      	adds	r7, #12
     e90:	46bd      	mov	sp, r7
     e92:	bc80      	pop	{r7}
     e94:	4770      	bx	lr
     e96:	bf00      	nop
     e98:	0001f160 	.word	0x0001f160

00000e9c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
     e9c:	b580      	push	{r7, lr}
     e9e:	b084      	sub	sp, #16
     ea0:	af00      	add	r7, sp, #0
     ea2:	60f8      	str	r0, [r7, #12]
     ea4:	60b9      	str	r1, [r7, #8]
     ea6:	4611      	mov	r1, r2
     ea8:	461a      	mov	r2, r3
     eaa:	460b      	mov	r3, r1
     eac:	71fb      	strb	r3, [r7, #7]
     eae:	4613      	mov	r3, r2
     eb0:	71bb      	strb	r3, [r7, #6]
	
	if (config)
     eb2:	79fb      	ldrb	r3, [r7, #7]
     eb4:	2b00      	cmp	r3, #0
     eb6:	d00f      	beq.n	ed8 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x3c>
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
     eb8:	68fb      	ldr	r3, [r7, #12]
     eba:	3370      	adds	r3, #112	; 0x70
     ebc:	22ac      	movs	r2, #172	; 0xac
     ebe:	4908      	ldr	r1, [pc, #32]	; (ee0 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x44>)
     ec0:	4618      	mov	r0, r3
     ec2:	4b08      	ldr	r3, [pc, #32]	; (ee4 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x48>)
     ec4:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
     ec6:	68fb      	ldr	r3, [r7, #12]
     ec8:	68ba      	ldr	r2, [r7, #8]
     eca:	67da      	str	r2, [r3, #124]	; 0x7c
		memory.writeConfigurationDataArea(configuration);
     ecc:	68fb      	ldr	r3, [r7, #12]
     ece:	3370      	adds	r3, #112	; 0x70
     ed0:	4619      	mov	r1, r3
     ed2:	4805      	ldr	r0, [pc, #20]	; (ee8 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4c>)
     ed4:	4b05      	ldr	r3, [pc, #20]	; (eec <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x50>)
     ed6:	4798      	blx	r3
	}
	
	
}
     ed8:	bf00      	nop
     eda:	3710      	adds	r7, #16
     edc:	46bd      	mov	sp, r7
     ede:	bd80      	pop	{r7, pc}
     ee0:	0001ed50 	.word	0x0001ed50
     ee4:	0001af55 	.word	0x0001af55
     ee8:	20001ae4 	.word	0x20001ae4
     eec:	00002db9 	.word	0x00002db9

00000ef0 <_ZN17ConfigState_Class15SetInitialStateEv>:


uint32_t ConfigState_Class::SetInitialState(){
     ef0:	b580      	push	{r7, lr}
     ef2:	b084      	sub	sp, #16
     ef4:	af00      	add	r7, sp, #0
     ef6:	6078      	str	r0, [r7, #4]
		uint32_t	r;
		r=memory.ReadApplicationState(lastState);
     ef8:	687b      	ldr	r3, [r7, #4]
     efa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
     efe:	4619      	mov	r1, r3
     f00:	4823      	ldr	r0, [pc, #140]	; (f90 <_ZN17ConfigState_Class15SetInitialStateEv+0xa0>)
     f02:	4b24      	ldr	r3, [pc, #144]	; (f94 <_ZN17ConfigState_Class15SetInitialStateEv+0xa4>)
     f04:	4798      	blx	r3
     f06:	60f8      	str	r0, [r7, #12]
		if (memory.IsStateDataValid(lastState))
     f08:	687b      	ldr	r3, [r7, #4]
     f0a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
     f0e:	4619      	mov	r1, r3
     f10:	4821      	ldr	r0, [pc, #132]	; (f98 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
     f12:	4b22      	ldr	r3, [pc, #136]	; (f9c <_ZN17ConfigState_Class15SetInitialStateEv+0xac>)
     f14:	4798      	blx	r3
     f16:	4603      	mov	r3, r0
     f18:	2b00      	cmp	r3, #0
     f1a:	d007      	beq.n	f2c <_ZN17ConfigState_Class15SetInitialStateEv+0x3c>
		{
				hvac.SetCurrentState(lastState);
     f1c:	687b      	ldr	r3, [r7, #4]
     f1e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
     f22:	4619      	mov	r1, r3
     f24:	481e      	ldr	r0, [pc, #120]	; (fa0 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     f26:	4b1f      	ldr	r3, [pc, #124]	; (fa4 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
     f28:	4798      	blx	r3
     f2a:	e02b      	b.n	f84 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
		} 
		else
		{	
			r=memory.ReadFastApplicationState(lastState);
     f2c:	687b      	ldr	r3, [r7, #4]
     f2e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
     f32:	4619      	mov	r1, r3
     f34:	481c      	ldr	r0, [pc, #112]	; (fa8 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
     f36:	4b1d      	ldr	r3, [pc, #116]	; (fac <_ZN17ConfigState_Class15SetInitialStateEv+0xbc>)
     f38:	4798      	blx	r3
     f3a:	60f8      	str	r0, [r7, #12]
			if (memory.IsFastStateDataValid(lastState))
     f3c:	687b      	ldr	r3, [r7, #4]
     f3e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
     f42:	4619      	mov	r1, r3
     f44:	4814      	ldr	r0, [pc, #80]	; (f98 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
     f46:	4b1a      	ldr	r3, [pc, #104]	; (fb0 <_ZN17ConfigState_Class15SetInitialStateEv+0xc0>)
     f48:	4798      	blx	r3
     f4a:	4603      	mov	r3, r0
     f4c:	2b00      	cmp	r3, #0
     f4e:	d00e      	beq.n	f6e <_ZN17ConfigState_Class15SetInitialStateEv+0x7e>
			{
				hvac.SetCurrentState(lastState);
     f50:	687b      	ldr	r3, [r7, #4]
     f52:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
     f56:	4619      	mov	r1, r3
     f58:	4811      	ldr	r0, [pc, #68]	; (fa0 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     f5a:	4b12      	ldr	r3, [pc, #72]	; (fa4 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
     f5c:	4798      	blx	r3
				memory.SaveApplicationState(lastState);
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
     f64:	4619      	mov	r1, r3
     f66:	4813      	ldr	r0, [pc, #76]	; (fb4 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
     f68:	4b13      	ldr	r3, [pc, #76]	; (fb8 <_ZN17ConfigState_Class15SetInitialStateEv+0xc8>)
     f6a:	4798      	blx	r3
     f6c:	e00a      	b.n	f84 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
			} 
			else
			{
				hvac.SetDefaultState();
     f6e:	480c      	ldr	r0, [pc, #48]	; (fa0 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
     f70:	4b12      	ldr	r3, [pc, #72]	; (fbc <_ZN17ConfigState_Class15SetInitialStateEv+0xcc>)
     f72:	4798      	blx	r3
				memory.WriteValidApplicationState(hvac.defaultState);
     f74:	4912      	ldr	r1, [pc, #72]	; (fc0 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
     f76:	480f      	ldr	r0, [pc, #60]	; (fb4 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
     f78:	4b12      	ldr	r3, [pc, #72]	; (fc4 <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
     f7a:	4798      	blx	r3
				memory.WriteFastCurrentState(hvac.defaultState);
     f7c:	4910      	ldr	r1, [pc, #64]	; (fc0 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
     f7e:	480a      	ldr	r0, [pc, #40]	; (fa8 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
     f80:	4b11      	ldr	r3, [pc, #68]	; (fc8 <_ZN17ConfigState_Class15SetInitialStateEv+0xd8>)
     f82:	4798      	blx	r3
			}
					
		
		}

		return r;
     f84:	68fb      	ldr	r3, [r7, #12]
	};
     f86:	4618      	mov	r0, r3
     f88:	3710      	adds	r7, #16
     f8a:	46bd      	mov	sp, r7
     f8c:	bd80      	pop	{r7, pc}
     f8e:	bf00      	nop
     f90:	20001c80 	.word	0x20001c80
     f94:	00002c01 	.word	0x00002c01
     f98:	20001ae4 	.word	0x20001ae4
     f9c:	00002e79 	.word	0x00002e79
     fa0:	2000804c 	.word	0x2000804c
     fa4:	00003db1 	.word	0x00003db1
     fa8:	20001c70 	.word	0x20001c70
     fac:	00001561 	.word	0x00001561
     fb0:	00002ebd 	.word	0x00002ebd
     fb4:	200015f8 	.word	0x200015f8
     fb8:	0000279d 	.word	0x0000279d
     fbc:	00001125 	.word	0x00001125
     fc0:	20008050 	.word	0x20008050
     fc4:	000026b1 	.word	0x000026b1
     fc8:	000015e9 	.word	0x000015e9

00000fcc <_ZN17ConfigState_Class10PrintStateEv>:
		st=is;
	}
	s=uint32_t(st.rawStatus);
	return	s;
}
void	ConfigState_Class::PrintState(void){
     fcc:	b580      	push	{r7, lr}
     fce:	b0a4      	sub	sp, #144	; 0x90
     fd0:	af00      	add	r7, sp, #0
     fd2:	6078      	str	r0, [r7, #4]
	HVACState	hs;
	bool	done=false;
     fd4:	2300      	movs	r3, #0
     fd6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	hvac.GetCurrentState(hs);
     fda:	f107 0310 	add.w	r3, r7, #16
     fde:	4619      	mov	r1, r3
     fe0:	4842      	ldr	r0, [pc, #264]	; (10ec <_ZN17ConfigState_Class10PrintStateEv+0x120>)
     fe2:	4b43      	ldr	r3, [pc, #268]	; (10f0 <_ZN17ConfigState_Class10PrintStateEv+0x124>)
     fe4:	4798      	blx	r3
	uint32_t	nowTime=(uint32_t)hs.now;
     fe6:	697b      	ldr	r3, [r7, #20]
     fe8:	60fb      	str	r3, [r7, #12]
	char *act=ctime((time_t *)&nowTime);
     fea:	f107 030c 	add.w	r3, r7, #12
     fee:	4618      	mov	r0, r3
     ff0:	4b40      	ldr	r3, [pc, #256]	; (10f4 <_ZN17ConfigState_Class10PrintStateEv+0x128>)
     ff2:	4798      	blx	r3
     ff4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	k=sizeof(printableNamesHVACState)/(sizeof(char*));
     ff8:	687b      	ldr	r3, [r7, #4]
     ffa:	2206      	movs	r2, #6
     ffc:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
	for (i = 0; i < k; i++)
    1000:	687b      	ldr	r3, [r7, #4]
    1002:	2200      	movs	r2, #0
    1004:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    1008:	687b      	ldr	r3, [r7, #4]
    100a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
    100e:	461a      	mov	r2, r3
    1010:	687b      	ldr	r3, [r7, #4]
    1012:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
    1016:	429a      	cmp	r2, r3
    1018:	da63      	bge.n	10e2 <_ZN17ConfigState_Class10PrintStateEv+0x116>
	{
	
		usb<<printableNamesHVACState[i]<<" : ";
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
    1020:	009b      	lsls	r3, r3, #2
    1022:	4a35      	ldr	r2, [pc, #212]	; (10f8 <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    1024:	4413      	add	r3, r2
    1026:	4619      	mov	r1, r3
    1028:	4834      	ldr	r0, [pc, #208]	; (10fc <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    102a:	4b35      	ldr	r3, [pc, #212]	; (1100 <_ZN17ConfigState_Class10PrintStateEv+0x134>)
    102c:	4798      	blx	r3
    102e:	4603      	mov	r3, r0
    1030:	4934      	ldr	r1, [pc, #208]	; (1104 <_ZN17ConfigState_Class10PrintStateEv+0x138>)
    1032:	4618      	mov	r0, r3
    1034:	4b34      	ldr	r3, [pc, #208]	; (1108 <_ZN17ConfigState_Class10PrintStateEv+0x13c>)
    1036:	4798      	blx	r3
	
		switch (i)
    1038:	687b      	ldr	r3, [r7, #4]
    103a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
    103e:	2b05      	cmp	r3, #5
    1040:	d83c      	bhi.n	10bc <_ZN17ConfigState_Class10PrintStateEv+0xf0>
    1042:	a201      	add	r2, pc, #4	; (adr r2, 1048 <_ZN17ConfigState_Class10PrintStateEv+0x7c>)
    1044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1048:	00001061 	.word	0x00001061
    104c:	00001073 	.word	0x00001073
    1050:	00001087 	.word	0x00001087
    1054:	000010c7 	.word	0x000010c7
    1058:	0000109b 	.word	0x0000109b
    105c:	000010a7 	.word	0x000010a7
		{
			case 0:
				usb<<(uint32_t)hs.currentState;
    1060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1062:	67fb      	str	r3, [r7, #124]	; 0x7c
    1064:	f107 037c 	add.w	r3, r7, #124	; 0x7c
    1068:	4619      	mov	r1, r3
    106a:	4824      	ldr	r0, [pc, #144]	; (10fc <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    106c:	4b27      	ldr	r3, [pc, #156]	; (110c <_ZN17ConfigState_Class10PrintStateEv+0x140>)
    106e:	4798      	blx	r3
			/* Your code here */
			break;
    1070:	e02a      	b.n	10c8 <_ZN17ConfigState_Class10PrintStateEv+0xfc>
			case 1:
				usb<<(uint32_t)hs.cycleDuration;
    1072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1074:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    1078:	f107 0380 	add.w	r3, r7, #128	; 0x80
    107c:	4619      	mov	r1, r3
    107e:	481f      	ldr	r0, [pc, #124]	; (10fc <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    1080:	4b22      	ldr	r3, [pc, #136]	; (110c <_ZN17ConfigState_Class10PrintStateEv+0x140>)
    1082:	4798      	blx	r3
			/* Your code here */
			break;
    1084:	e020      	b.n	10c8 <_ZN17ConfigState_Class10PrintStateEv+0xfc>
			case 2:
				usb<<(uint32_t)hs.remainingTime;
    1086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    108c:	f107 0384 	add.w	r3, r7, #132	; 0x84
    1090:	4619      	mov	r1, r3
    1092:	481a      	ldr	r0, [pc, #104]	; (10fc <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    1094:	4b1d      	ldr	r3, [pc, #116]	; (110c <_ZN17ConfigState_Class10PrintStateEv+0x140>)
    1096:	4798      	blx	r3
			/* Your code here */
			break;
    1098:	e016      	b.n	10c8 <_ZN17ConfigState_Class10PrintStateEv+0xfc>
				//usb<<(uint32_t)hs.targetPower;
			/* Your code here */
			break;
			case 4:
				
				usb.print(act);
    109a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
    109e:	4817      	ldr	r0, [pc, #92]	; (10fc <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    10a0:	4b1b      	ldr	r3, [pc, #108]	; (1110 <_ZN17ConfigState_Class10PrintStateEv+0x144>)
    10a2:	4798      	blx	r3
			/* Your code here */
			break;
    10a4:	e010      	b.n	10c8 <_ZN17ConfigState_Class10PrintStateEv+0xfc>
			case 5:
				usb<<"0x";
    10a6:	491b      	ldr	r1, [pc, #108]	; (1114 <_ZN17ConfigState_Class10PrintStateEv+0x148>)
    10a8:	4814      	ldr	r0, [pc, #80]	; (10fc <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    10aa:	4b1b      	ldr	r3, [pc, #108]	; (1118 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
    10ac:	4798      	blx	r3
				usb.print(hs.magic,HEX);
    10ae:	693b      	ldr	r3, [r7, #16]
    10b0:	2210      	movs	r2, #16
    10b2:	4619      	mov	r1, r3
    10b4:	4811      	ldr	r0, [pc, #68]	; (10fc <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    10b6:	4b19      	ldr	r3, [pc, #100]	; (111c <_ZN17ConfigState_Class10PrintStateEv+0x150>)
    10b8:	4798      	blx	r3
			
				/* Your code here */
			break;
    10ba:	e005      	b.n	10c8 <_ZN17ConfigState_Class10PrintStateEv+0xfc>
			default:
				i=sizeof(printableNamesHVACState);
    10bc:	687b      	ldr	r3, [r7, #4]
    10be:	2218      	movs	r2, #24
    10c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
				
			/* Your code here */
			break;
    10c4:	e000      	b.n	10c8 <_ZN17ConfigState_Class10PrintStateEv+0xfc>
			break;
    10c6:	bf00      	nop
		}
		usb<<NEWLINE;
    10c8:	4915      	ldr	r1, [pc, #84]	; (1120 <_ZN17ConfigState_Class10PrintStateEv+0x154>)
    10ca:	480c      	ldr	r0, [pc, #48]	; (10fc <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    10cc:	4b12      	ldr	r3, [pc, #72]	; (1118 <_ZN17ConfigState_Class10PrintStateEv+0x14c>)
    10ce:	4798      	blx	r3
	for (i = 0; i < k; i++)
    10d0:	687b      	ldr	r3, [r7, #4]
    10d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
    10d6:	3301      	adds	r3, #1
    10d8:	b2da      	uxtb	r2, r3
    10da:	687b      	ldr	r3, [r7, #4]
    10dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    10e0:	e792      	b.n	1008 <_ZN17ConfigState_Class10PrintStateEv+0x3c>
			
	}
	
}
    10e2:	bf00      	nop
    10e4:	3790      	adds	r7, #144	; 0x90
    10e6:	46bd      	mov	sp, r7
    10e8:	bd80      	pop	{r7, pc}
    10ea:	bf00      	nop
    10ec:	2000804c 	.word	0x2000804c
    10f0:	00003d61 	.word	0x00003d61
    10f4:	0001ac6d 	.word	0x0001ac6d
    10f8:	20000050 	.word	0x20000050
    10fc:	20009e88 	.word	0x20009e88
    1100:	00001149 	.word	0x00001149
    1104:	0001f14c 	.word	0x0001f14c
    1108:	0000116d 	.word	0x0000116d
    110c:	0000118d 	.word	0x0000118d
    1110:	00017309 	.word	0x00017309
    1114:	0001f150 	.word	0x0001f150
    1118:	00000acd 	.word	0x00000acd
    111c:	00017375 	.word	0x00017375
    1120:	0001f154 	.word	0x0001f154

00001124 <_ZN17ConfigState_Class15SetDefaultStateEv>:
void	ConfigState_Class::SetDefaultState(void){
    1124:	b580      	push	{r7, lr}
    1126:	b082      	sub	sp, #8
    1128:	af00      	add	r7, sp, #0
    112a:	6078      	str	r0, [r7, #4]
	hvac.SetCurrentState(defaultState);
    112c:	687b      	ldr	r3, [r7, #4]
    112e:	3304      	adds	r3, #4
    1130:	4619      	mov	r1, r3
    1132:	4803      	ldr	r0, [pc, #12]	; (1140 <_ZN17ConfigState_Class15SetDefaultStateEv+0x1c>)
    1134:	4b03      	ldr	r3, [pc, #12]	; (1144 <_ZN17ConfigState_Class15SetDefaultStateEv+0x20>)
    1136:	4798      	blx	r3

}
    1138:	bf00      	nop
    113a:	3708      	adds	r7, #8
    113c:	46bd      	mov	sp, r7
    113e:	bd80      	pop	{r7, pc}
    1140:	2000804c 	.word	0x2000804c
    1144:	00003db1 	.word	0x00003db1

00001148 <_ZlsIPKcER5PrintS3_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1148:	b580      	push	{r7, lr}
    114a:	b082      	sub	sp, #8
    114c:	af00      	add	r7, sp, #0
    114e:	6078      	str	r0, [r7, #4]
    1150:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1152:	683b      	ldr	r3, [r7, #0]
    1154:	681b      	ldr	r3, [r3, #0]
    1156:	4619      	mov	r1, r3
    1158:	6878      	ldr	r0, [r7, #4]
    115a:	4b03      	ldr	r3, [pc, #12]	; (1168 <_ZlsIPKcER5PrintS3_RKT_+0x20>)
    115c:	4798      	blx	r3
    115e:	687b      	ldr	r3, [r7, #4]
    1160:	4618      	mov	r0, r3
    1162:	3708      	adds	r7, #8
    1164:	46bd      	mov	sp, r7
    1166:	bd80      	pop	{r7, pc}
    1168:	00017309 	.word	0x00017309

0000116c <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    116c:	b580      	push	{r7, lr}
    116e:	b082      	sub	sp, #8
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
    1174:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1176:	6839      	ldr	r1, [r7, #0]
    1178:	6878      	ldr	r0, [r7, #4]
    117a:	4b03      	ldr	r3, [pc, #12]	; (1188 <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
    117c:	4798      	blx	r3
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	4618      	mov	r0, r3
    1182:	3708      	adds	r7, #8
    1184:	46bd      	mov	sp, r7
    1186:	bd80      	pop	{r7, pc}
    1188:	00017309 	.word	0x00017309

0000118c <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    118c:	b580      	push	{r7, lr}
    118e:	b082      	sub	sp, #8
    1190:	af00      	add	r7, sp, #0
    1192:	6078      	str	r0, [r7, #4]
    1194:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1196:	683b      	ldr	r3, [r7, #0]
    1198:	681b      	ldr	r3, [r3, #0]
    119a:	220a      	movs	r2, #10
    119c:	4619      	mov	r1, r3
    119e:	6878      	ldr	r0, [r7, #4]
    11a0:	4b03      	ldr	r3, [pc, #12]	; (11b0 <_ZlsImER5PrintS1_RKT_+0x24>)
    11a2:	4798      	blx	r3
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	4618      	mov	r0, r3
    11a8:	3708      	adds	r7, #8
    11aa:	46bd      	mov	sp, r7
    11ac:	bd80      	pop	{r7, pc}
    11ae:	bf00      	nop
    11b0:	00017375 	.word	0x00017375

000011b4 <_ZN11CRC32_ClassC1Ev>:

#include "CRC32_Class.h"
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
    11b4:	b480      	push	{r7}
    11b6:	b083      	sub	sp, #12
    11b8:	af00      	add	r7, sp, #0
    11ba:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
    11bc:	687b      	ldr	r3, [r7, #4]
    11be:	4618      	mov	r0, r3
    11c0:	370c      	adds	r7, #12
    11c2:	46bd      	mov	sp, r7
    11c4:	bc80      	pop	{r7}
    11c6:	4770      	bx	lr

000011c8 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
    11c8:	b480      	push	{r7}
    11ca:	b083      	sub	sp, #12
    11cc:	af00      	add	r7, sp, #0
    11ce:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
    11d0:	687b      	ldr	r3, [r7, #4]
    11d2:	4618      	mov	r0, r3
    11d4:	370c      	adds	r7, #12
    11d6:	46bd      	mov	sp, r7
    11d8:	bc80      	pop	{r7}
    11da:	4770      	bx	lr

000011dc <_ZN11CRC32_Class4InitEm>:

uint32_t	CRC32_Class::Init(uint32_t refCRC/* =0xFFFFFFFF */){
    11dc:	b580      	push	{r7, lr}
    11de:	b082      	sub	sp, #8
    11e0:	af00      	add	r7, sp, #0
    11e2:	6078      	str	r0, [r7, #4]
    11e4:	6039      	str	r1, [r7, #0]
	crc_sync_enable(&CRC_CALC);
    11e6:	4806      	ldr	r0, [pc, #24]	; (1200 <_ZN11CRC32_Class4InitEm+0x24>)
    11e8:	4b06      	ldr	r3, [pc, #24]	; (1204 <_ZN11CRC32_Class4InitEm+0x28>)
    11ea:	4798      	blx	r3
	refCRC32=refCRC;
    11ec:	687b      	ldr	r3, [r7, #4]
    11ee:	683a      	ldr	r2, [r7, #0]
    11f0:	601a      	str	r2, [r3, #0]
	return	refCRC32;
    11f2:	687b      	ldr	r3, [r7, #4]
    11f4:	681b      	ldr	r3, [r3, #0]
}
    11f6:	4618      	mov	r0, r3
    11f8:	3708      	adds	r7, #8
    11fa:	46bd      	mov	sp, r7
    11fc:	bd80      	pop	{r7, pc}
    11fe:	bf00      	nop
    1200:	2000a358 	.word	0x2000a358
    1204:	00005f51 	.word	0x00005f51

00001208 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    1208:	b590      	push	{r4, r7, lr}
    120a:	b083      	sub	sp, #12
    120c:	af00      	add	r7, sp, #0
    120e:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
    1210:	4b07      	ldr	r3, [pc, #28]	; (1230 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
    1212:	6878      	ldr	r0, [r7, #4]
    1214:	4798      	blx	r3
    1216:	4603      	mov	r3, r0
    1218:	460c      	mov	r4, r1
    121a:	4618      	mov	r0, r3
    121c:	4621      	mov	r1, r4
    121e:	4b05      	ldr	r3, [pc, #20]	; (1234 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x2c>)
    1220:	4798      	blx	r3
    1222:	4603      	mov	r3, r0
    1224:	460c      	mov	r4, r1
    1226:	4618      	mov	r0, r3
    1228:	4621      	mov	r1, r4
    122a:	370c      	adds	r7, #12
    122c:	46bd      	mov	sp, r7
    122e:	bd90      	pop	{r4, r7, pc}
    1230:	00019ce9 	.word	0x00019ce9
    1234:	00018801 	.word	0x00018801

00001238 <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
    1238:	b590      	push	{r4, r7, lr}
    123a:	b087      	sub	sp, #28
    123c:	af00      	add	r7, sp, #0
    123e:	60f8      	str	r0, [r7, #12]
    1240:	60b9      	str	r1, [r7, #8]
    1242:	607a      	str	r2, [r7, #4]
	uint32_t	lenght32=(uint32_t)floor(len/4);
    1244:	687b      	ldr	r3, [r7, #4]
    1246:	089b      	lsrs	r3, r3, #2
    1248:	4618      	mov	r0, r3
    124a:	4b0f      	ldr	r3, [pc, #60]	; (1288 <_ZN11CRC32_Class12CalculateCRCEPmm+0x50>)
    124c:	4798      	blx	r3
    124e:	460a      	mov	r2, r1
    1250:	4601      	mov	r1, r0
    1252:	4b0e      	ldr	r3, [pc, #56]	; (128c <_ZN11CRC32_Class12CalculateCRCEPmm+0x54>)
    1254:	4608      	mov	r0, r1
    1256:	4611      	mov	r1, r2
    1258:	4798      	blx	r3
    125a:	4603      	mov	r3, r0
    125c:	617b      	str	r3, [r7, #20]
	uint32_t crc=Init();
    125e:	f04f 31ff 	mov.w	r1, #4294967295
    1262:	68f8      	ldr	r0, [r7, #12]
    1264:	4b0a      	ldr	r3, [pc, #40]	; (1290 <_ZN11CRC32_Class12CalculateCRCEPmm+0x58>)
    1266:	4798      	blx	r3
    1268:	4603      	mov	r3, r0
    126a:	613b      	str	r3, [r7, #16]
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
    126c:	f107 0310 	add.w	r3, r7, #16
    1270:	697a      	ldr	r2, [r7, #20]
    1272:	68b9      	ldr	r1, [r7, #8]
    1274:	4807      	ldr	r0, [pc, #28]	; (1294 <_ZN11CRC32_Class12CalculateCRCEPmm+0x5c>)
    1276:	4c08      	ldr	r4, [pc, #32]	; (1298 <_ZN11CRC32_Class12CalculateCRCEPmm+0x60>)
    1278:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
    127a:	693b      	ldr	r3, [r7, #16]
    127c:	43db      	mvns	r3, r3
    127e:	4618      	mov	r0, r3
    1280:	371c      	adds	r7, #28
    1282:	46bd      	mov	sp, r7
    1284:	bd90      	pop	{r4, r7, pc}
    1286:	bf00      	nop
    1288:	00001209 	.word	0x00001209
    128c:	0001a335 	.word	0x0001a335
    1290:	000011dd 	.word	0x000011dd
    1294:	2000a358 	.word	0x2000a358
    1298:	00005f8d 	.word	0x00005f8d

0000129c <_ZN15DataLoger_ClassC1Ev>:
#include "ConfigurationData.h"
#include "FlashHandler_Class.h"
#include "N25Q256_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
    129c:	b580      	push	{r7, lr}
    129e:	b082      	sub	sp, #8
    12a0:	af00      	add	r7, sp, #0
    12a2:	6078      	str	r0, [r7, #4]
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	4618      	mov	r0, r3
    12a8:	4b06      	ldr	r3, [pc, #24]	; (12c4 <_ZN15DataLoger_ClassC1Ev+0x28>)
    12aa:	4798      	blx	r3
    12ac:	687b      	ldr	r3, [r7, #4]
    12ae:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
    12b2:	4618      	mov	r0, r3
    12b4:	4b04      	ldr	r3, [pc, #16]	; (12c8 <_ZN15DataLoger_ClassC1Ev+0x2c>)
    12b6:	4798      	blx	r3
{
} //DataLoger_Class
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	4618      	mov	r0, r3
    12bc:	3708      	adds	r7, #8
    12be:	46bd      	mov	sp, r7
    12c0:	bd80      	pop	{r7, pc}
    12c2:	bf00      	nop
    12c4:	00015a45 	.word	0x00015a45
    12c8:	00001301 	.word	0x00001301

000012cc <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
    12cc:	b580      	push	{r7, lr}
    12ce:	b082      	sub	sp, #8
    12d0:	af00      	add	r7, sp, #0
    12d2:	6078      	str	r0, [r7, #4]
    12d4:	687b      	ldr	r3, [r7, #4]
    12d6:	4618      	mov	r0, r3
    12d8:	4b03      	ldr	r3, [pc, #12]	; (12e8 <_ZN15DataLoger_ClassD1Ev+0x1c>)
    12da:	4798      	blx	r3
{
} //~DataLoger_Class
    12dc:	687b      	ldr	r3, [r7, #4]
    12de:	4618      	mov	r0, r3
    12e0:	3708      	adds	r7, #8
    12e2:	46bd      	mov	sp, r7
    12e4:	bd80      	pop	{r7, pc}
    12e6:	bf00      	nop
    12e8:	00015a81 	.word	0x00015a81

000012ec <_ZN15DataLoger_Class13LogResetEventEv>:
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)PTR_CONFIG_DATA(cd),add,sizeof(dataOnMemory));
	
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
    12ec:	b480      	push	{r7}
    12ee:	b083      	sub	sp, #12
    12f0:	af00      	add	r7, sp, #0
    12f2:	6078      	str	r0, [r7, #4]
	return 0;
    12f4:	2300      	movs	r3, #0
    12f6:	4618      	mov	r0, r3
    12f8:	370c      	adds	r7, #12
    12fa:	46bd      	mov	sp, r7
    12fc:	bc80      	pop	{r7}
    12fe:	4770      	bx	lr

00001300 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
    1300:	b580      	push	{r7, lr}
    1302:	b082      	sub	sp, #8
    1304:	af00      	add	r7, sp, #0
    1306:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	f44f 7200 	mov.w	r2, #512	; 0x200
    130e:	2100      	movs	r1, #0
    1310:	4618      	mov	r0, r3
    1312:	4b05      	ldr	r3, [pc, #20]	; (1328 <_ZN11RingBufferNILi512EEC1Ev+0x28>)
    1314:	4798      	blx	r3
    clear();
    1316:	6878      	ldr	r0, [r7, #4]
    1318:	4b04      	ldr	r3, [pc, #16]	; (132c <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
    131a:	4798      	blx	r3
}
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	4618      	mov	r0, r3
    1320:	3708      	adds	r7, #8
    1322:	46bd      	mov	sp, r7
    1324:	bd80      	pop	{r7, pc}
    1326:	bf00      	nop
    1328:	0001b089 	.word	0x0001b089
    132c:	00001331 	.word	0x00001331

00001330 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
    1330:	b480      	push	{r7}
    1332:	b083      	sub	sp, #12
    1334:	af00      	add	r7, sp, #0
    1336:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	2200      	movs	r2, #0
    133c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
    1340:	687b      	ldr	r3, [r7, #4]
    1342:	2200      	movs	r2, #0
    1344:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
    1348:	bf00      	nop
    134a:	370c      	adds	r7, #12
    134c:	46bd      	mov	sp, r7
    134e:	bc80      	pop	{r7}
    1350:	4770      	bx	lr
	...

00001354 <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
    1354:	b580      	push	{r7, lr}
    1356:	b082      	sub	sp, #8
    1358:	af00      	add	r7, sp, #0
    135a:	6078      	str	r0, [r7, #4]
    135c:	687b      	ldr	r3, [r7, #4]
    135e:	33a8      	adds	r3, #168	; 0xa8
    1360:	4618      	mov	r0, r3
    1362:	4b07      	ldr	r3, [pc, #28]	; (1380 <_ZN14DateTime_ClassC1Ev+0x2c>)
    1364:	4798      	blx	r3
    1366:	687b      	ldr	r3, [r7, #4]
    1368:	4618      	mov	r0, r3
    136a:	4b06      	ldr	r3, [pc, #24]	; (1384 <_ZN14DateTime_ClassC1Ev+0x30>)
    136c:	4798      	blx	r3
    136e:	4a06      	ldr	r2, [pc, #24]	; (1388 <_ZN14DateTime_ClassC1Ev+0x34>)
    1370:	687b      	ldr	r3, [r7, #4]
    1372:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
    1374:	687b      	ldr	r3, [r7, #4]
    1376:	4618      	mov	r0, r3
    1378:	3708      	adds	r7, #8
    137a:	46bd      	mov	sp, r7
    137c:	bd80      	pop	{r7, pc}
    137e:	bf00      	nop
    1380:	000014f7 	.word	0x000014f7
    1384:	00015e55 	.word	0x00015e55
    1388:	0001f16c 	.word	0x0001f16c

0000138c <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
    138c:	b580      	push	{r7, lr}
    138e:	b082      	sub	sp, #8
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
    1394:	4a08      	ldr	r2, [pc, #32]	; (13b8 <_ZN14DateTime_ClassD1Ev+0x2c>)
    1396:	687b      	ldr	r3, [r7, #4]
    1398:	601a      	str	r2, [r3, #0]
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	4618      	mov	r0, r3
    139e:	4b07      	ldr	r3, [pc, #28]	; (13bc <_ZN14DateTime_ClassD1Ev+0x30>)
    13a0:	4798      	blx	r3
    13a2:	687b      	ldr	r3, [r7, #4]
    13a4:	33a8      	adds	r3, #168	; 0xa8
    13a6:	4618      	mov	r0, r3
    13a8:	4b05      	ldr	r3, [pc, #20]	; (13c0 <_ZN14DateTime_ClassD1Ev+0x34>)
    13aa:	4798      	blx	r3
{
} //~DateTime_Class
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	4618      	mov	r0, r3
    13b0:	3708      	adds	r7, #8
    13b2:	46bd      	mov	sp, r7
    13b4:	bd80      	pop	{r7, pc}
    13b6:	bf00      	nop
    13b8:	0001f16c 	.word	0x0001f16c
    13bc:	00015ec5 	.word	0x00015ec5
    13c0:	0000150b 	.word	0x0000150b

000013c4 <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
    13c4:	b580      	push	{r7, lr}
    13c6:	b084      	sub	sp, #16
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&eepromMap->stack;
    13cc:	4b0b      	ldr	r3, [pc, #44]	; (13fc <_ZN14DateTime_Class4InitEv+0x38>)
    13ce:	681b      	ldr	r3, [r3, #0]
    13d0:	3374      	adds	r3, #116	; 0x74
    13d2:	60fb      	str	r3, [r7, #12]
	calendar.SetCalendarStackAddress(add);
    13d4:	68f9      	ldr	r1, [r7, #12]
    13d6:	480a      	ldr	r0, [pc, #40]	; (1400 <_ZN14DateTime_Class4InitEv+0x3c>)
    13d8:	4b0a      	ldr	r3, [pc, #40]	; (1404 <_ZN14DateTime_Class4InitEv+0x40>)
    13da:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[0];
    13dc:	4b07      	ldr	r3, [pc, #28]	; (13fc <_ZN14DateTime_Class4InitEv+0x38>)
    13de:	681b      	ldr	r3, [r3, #0]
    13e0:	3378      	adds	r3, #120	; 0x78
    13e2:	60bb      	str	r3, [r7, #8]
	calendar.SetCalendarAddress(addTimeLogs);
    13e4:	68b9      	ldr	r1, [r7, #8]
    13e6:	4806      	ldr	r0, [pc, #24]	; (1400 <_ZN14DateTime_Class4InitEv+0x3c>)
    13e8:	4b07      	ldr	r3, [pc, #28]	; (1408 <_ZN14DateTime_Class4InitEv+0x44>)
    13ea:	4798      	blx	r3
	calendar.Init();
    13ec:	4804      	ldr	r0, [pc, #16]	; (1400 <_ZN14DateTime_Class4InitEv+0x3c>)
    13ee:	4b07      	ldr	r3, [pc, #28]	; (140c <_ZN14DateTime_Class4InitEv+0x48>)
    13f0:	4798      	blx	r3
	
}
    13f2:	bf00      	nop
    13f4:	3710      	adds	r7, #16
    13f6:	46bd      	mov	sp, r7
    13f8:	bd80      	pop	{r7, pc}
    13fa:	bf00      	nop
    13fc:	20001470 	.word	0x20001470
    1400:	20009c18 	.word	0x20009c18
    1404:	000167c5 	.word	0x000167c5
    1408:	000167e5 	.word	0x000167e5
    140c:	00015eed 	.word	0x00015eed

00001410 <_Z41__static_initialization_and_destruction_0ii>:

    1410:	b580      	push	{r7, lr}
    1412:	b082      	sub	sp, #8
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	6039      	str	r1, [r7, #0]
    141a:	687b      	ldr	r3, [r7, #4]
    141c:	2b01      	cmp	r3, #1
    141e:	d10c      	bne.n	143a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1420:	683b      	ldr	r3, [r7, #0]
    1422:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1426:	4293      	cmp	r3, r2
    1428:	d107      	bne.n	143a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    142a:	4806      	ldr	r0, [pc, #24]	; (1444 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    142c:	4b06      	ldr	r3, [pc, #24]	; (1448 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    142e:	4798      	blx	r3
    1430:	4a06      	ldr	r2, [pc, #24]	; (144c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1432:	4907      	ldr	r1, [pc, #28]	; (1450 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1434:	4803      	ldr	r0, [pc, #12]	; (1444 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1436:	4b07      	ldr	r3, [pc, #28]	; (1454 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1438:	4798      	blx	r3
    143a:	bf00      	nop
    143c:	3708      	adds	r7, #8
    143e:	46bd      	mov	sp, r7
    1440:	bd80      	pop	{r7, pc}
    1442:	bf00      	nop
    1444:	200013b8 	.word	0x200013b8
    1448:	00001355 	.word	0x00001355
    144c:	20000000 	.word	0x20000000
    1450:	0000138d 	.word	0x0000138d
    1454:	000187f1 	.word	0x000187f1

00001458 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
    1458:	b580      	push	{r7, lr}
    145a:	af00      	add	r7, sp, #0
    145c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1460:	2001      	movs	r0, #1
    1462:	4b01      	ldr	r3, [pc, #4]	; (1468 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
    1464:	4798      	blx	r3
    1466:	bd80      	pop	{r7, pc}
    1468:	00001411 	.word	0x00001411

0000146c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    146c:	b580      	push	{r7, lr}
    146e:	b082      	sub	sp, #8
    1470:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1472:	4b16      	ldr	r3, [pc, #88]	; (14cc <Reset_Handler+0x60>)
    1474:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1476:	4b16      	ldr	r3, [pc, #88]	; (14d0 <Reset_Handler+0x64>)
    1478:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    147a:	687a      	ldr	r2, [r7, #4]
    147c:	683b      	ldr	r3, [r7, #0]
    147e:	429a      	cmp	r2, r3
    1480:	d00c      	beq.n	149c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1482:	e007      	b.n	1494 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1484:	683b      	ldr	r3, [r7, #0]
    1486:	1d1a      	adds	r2, r3, #4
    1488:	603a      	str	r2, [r7, #0]
    148a:	687a      	ldr	r2, [r7, #4]
    148c:	1d11      	adds	r1, r2, #4
    148e:	6079      	str	r1, [r7, #4]
    1490:	6812      	ldr	r2, [r2, #0]
    1492:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1494:	683b      	ldr	r3, [r7, #0]
    1496:	4a0f      	ldr	r2, [pc, #60]	; (14d4 <Reset_Handler+0x68>)
    1498:	4293      	cmp	r3, r2
    149a:	d3f3      	bcc.n	1484 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    149c:	4b0e      	ldr	r3, [pc, #56]	; (14d8 <Reset_Handler+0x6c>)
    149e:	603b      	str	r3, [r7, #0]
    14a0:	e004      	b.n	14ac <Reset_Handler+0x40>
                *pDest++ = 0;
    14a2:	683b      	ldr	r3, [r7, #0]
    14a4:	1d1a      	adds	r2, r3, #4
    14a6:	603a      	str	r2, [r7, #0]
    14a8:	2200      	movs	r2, #0
    14aa:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    14ac:	683b      	ldr	r3, [r7, #0]
    14ae:	4a0b      	ldr	r2, [pc, #44]	; (14dc <Reset_Handler+0x70>)
    14b0:	4293      	cmp	r3, r2
    14b2:	d3f6      	bcc.n	14a2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    14b4:	4b0a      	ldr	r3, [pc, #40]	; (14e0 <Reset_Handler+0x74>)
    14b6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    14b8:	4a0a      	ldr	r2, [pc, #40]	; (14e4 <Reset_Handler+0x78>)
    14ba:	687b      	ldr	r3, [r7, #4]
    14bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    14c0:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    14c2:	4b09      	ldr	r3, [pc, #36]	; (14e8 <Reset_Handler+0x7c>)
    14c4:	4798      	blx	r3

        /* Branch to main function */
        main();
    14c6:	4b09      	ldr	r3, [pc, #36]	; (14ec <Reset_Handler+0x80>)
    14c8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    14ca:	e7fe      	b.n	14ca <Reset_Handler+0x5e>
    14cc:	000211e8 	.word	0x000211e8
    14d0:	20000000 	.word	0x20000000
    14d4:	20000bb4 	.word	0x20000bb4
    14d8:	20000bb8 	.word	0x20000bb8
    14dc:	2000a418 	.word	0x2000a418
    14e0:	00000000 	.word	0x00000000
    14e4:	e000ed00 	.word	0xe000ed00
    14e8:	0001acbd 	.word	0x0001acbd
    14ec:	00002239 	.word	0x00002239

000014f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    14f0:	b480      	push	{r7}
    14f2:	af00      	add	r7, sp, #0
        while (1) {
    14f4:	e7fe      	b.n	14f4 <Dummy_Handler+0x4>

000014f6 <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
    14f6:	b480      	push	{r7}
    14f8:	b083      	sub	sp, #12
    14fa:	af00      	add	r7, sp, #0
    14fc:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
    14fe:	687b      	ldr	r3, [r7, #4]
    1500:	4618      	mov	r0, r3
    1502:	370c      	adds	r7, #12
    1504:	46bd      	mov	sp, r7
    1506:	bc80      	pop	{r7}
    1508:	4770      	bx	lr

0000150a <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
    150a:	b480      	push	{r7}
    150c:	b083      	sub	sp, #12
    150e:	af00      	add	r7, sp, #0
    1510:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
    1512:	687b      	ldr	r3, [r7, #4]
    1514:	4618      	mov	r0, r3
    1516:	370c      	adds	r7, #12
    1518:	46bd      	mov	sp, r7
    151a:	bc80      	pop	{r7}
    151c:	4770      	bx	lr
	...

00001520 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv>:


uint32_t	FastStorage_Class::ReadFastCRCApplicationState(void){
    1520:	b590      	push	{r4, r7, lr}
    1522:	b087      	sub	sp, #28
    1524:	af00      	add	r7, sp, #0
    1526:	6078      	str	r0, [r7, #4]
	uint32_t	crc,add32;
	add32=(uint32_t)&eepromMap->crcAppState;
    1528:	4b0a      	ldr	r3, [pc, #40]	; (1554 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x34>)
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	3304      	adds	r3, #4
    152e:	617b      	str	r3, [r7, #20]
	eepromAddress=(uint16_t)(0xffff&add32);
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	b29a      	uxth	r2, r3
    1534:	687b      	ldr	r3, [r7, #4]
    1536:	819a      	strh	r2, [r3, #12]
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(&crc),eepromAddress,sizeof(uint32_t));
    1538:	687b      	ldr	r3, [r7, #4]
    153a:	899a      	ldrh	r2, [r3, #12]
    153c:	f107 010c 	add.w	r1, r7, #12
    1540:	2304      	movs	r3, #4
    1542:	4805      	ldr	r0, [pc, #20]	; (1558 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x38>)
    1544:	4c05      	ldr	r4, [pc, #20]	; (155c <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x3c>)
    1546:	47a0      	blx	r4
    1548:	6138      	str	r0, [r7, #16]
	return	crc;
    154a:	68fb      	ldr	r3, [r7, #12]
}
    154c:	4618      	mov	r0, r3
    154e:	371c      	adds	r7, #28
    1550:	46bd      	mov	sp, r7
    1552:	bd90      	pop	{r4, r7, pc}
    1554:	20001470 	.word	0x20001470
    1558:	2000995c 	.word	0x2000995c
    155c:	00015345 	.word	0x00015345

00001560 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState>:
uint32_t	FastStorage_Class::ReadFastApplicationState(HVACState& hs){
    1560:	b590      	push	{r4, r7, lr}
    1562:	b085      	sub	sp, #20
    1564:	af00      	add	r7, sp, #0
    1566:	6078      	str	r0, [r7, #4]
    1568:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->appState;
    156a:	4b0c      	ldr	r3, [pc, #48]	; (159c <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x3c>)
    156c:	681b      	ldr	r3, [r3, #0]
    156e:	3308      	adds	r3, #8
    1570:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    1572:	68fb      	ldr	r3, [r7, #12]
    1574:	b29a      	uxth	r2, r3
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	819a      	strh	r2, [r3, #12]
	handlerAppState=PTR_HVAC_STATE(&hs);
    157a:	683a      	ldr	r2, [r7, #0]
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	601a      	str	r2, [r3, #0]
	r=eeprom.ReadAddress((uint8_t*)handlerAppState,eepromAddress,sizeof(HVACState));
    1580:	687b      	ldr	r3, [r7, #4]
    1582:	6819      	ldr	r1, [r3, #0]
    1584:	687b      	ldr	r3, [r7, #4]
    1586:	899a      	ldrh	r2, [r3, #12]
    1588:	236c      	movs	r3, #108	; 0x6c
    158a:	4805      	ldr	r0, [pc, #20]	; (15a0 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x40>)
    158c:	4c05      	ldr	r4, [pc, #20]	; (15a4 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x44>)
    158e:	47a0      	blx	r4
    1590:	60b8      	str	r0, [r7, #8]
	return	r;
    1592:	68bb      	ldr	r3, [r7, #8]
}
    1594:	4618      	mov	r0, r3
    1596:	3714      	adds	r7, #20
    1598:	46bd      	mov	sp, r7
    159a:	bd90      	pop	{r4, r7, pc}
    159c:	20001470 	.word	0x20001470
    15a0:	2000995c 	.word	0x2000995c
    15a4:	00015345 	.word	0x00015345

000015a8 <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters>:
uint32_t	FastStorage_Class::ReadFastParameters(UserParameters& up){
    15a8:	b590      	push	{r4, r7, lr}
    15aa:	b085      	sub	sp, #20
    15ac:	af00      	add	r7, sp, #0
    15ae:	6078      	str	r0, [r7, #4]
    15b0:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->parameters;
    15b2:	4b0a      	ldr	r3, [pc, #40]	; (15dc <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters+0x34>)
    15b4:	681b      	ldr	r3, [r3, #0]
    15b6:	3301      	adds	r3, #1
    15b8:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    15ba:	68fb      	ldr	r3, [r7, #12]
    15bc:	b29a      	uxth	r2, r3
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	819a      	strh	r2, [r3, #12]
	r=eeprom.ReadAddress((uint8_t*)&up,eepromAddress,sizeof(UserParameters));
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	899a      	ldrh	r2, [r3, #12]
    15c6:	2301      	movs	r3, #1
    15c8:	6839      	ldr	r1, [r7, #0]
    15ca:	4805      	ldr	r0, [pc, #20]	; (15e0 <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters+0x38>)
    15cc:	4c05      	ldr	r4, [pc, #20]	; (15e4 <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters+0x3c>)
    15ce:	47a0      	blx	r4
    15d0:	60b8      	str	r0, [r7, #8]
	return	r;
    15d2:	68bb      	ldr	r3, [r7, #8]
}
    15d4:	4618      	mov	r0, r3
    15d6:	3714      	adds	r7, #20
    15d8:	46bd      	mov	sp, r7
    15da:	bd90      	pop	{r4, r7, pc}
    15dc:	20001470 	.word	0x20001470
    15e0:	2000995c 	.word	0x2000995c
    15e4:	00015345 	.word	0x00015345

000015e8 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState>:
	eepromAddress=(uint16_t)(0xffff&add32);
	handlerCalendar=(PTR_DATE_TIME)(&cdt);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(handlerCalendar),(uint8_t)eepromAddress,sizeof(calendar_date_time)*AT24MAC_BUFFER_SIZE);
	return	r;
}
uint32_t	FastStorage_Class::WriteFastCurrentState(HVACState& hs){
    15e8:	b580      	push	{r7, lr}
    15ea:	b084      	sub	sp, #16
    15ec:	af00      	add	r7, sp, #0
    15ee:	6078      	str	r0, [r7, #4]
    15f0:	6039      	str	r1, [r7, #0]
	uint32_t	add32=(uint32_t)&eepromMap->appState;
    15f2:	4b12      	ldr	r3, [pc, #72]	; (163c <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x54>)
    15f4:	681b      	ldr	r3, [r3, #0]
    15f6:	3308      	adds	r3, #8
    15f8:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    15fa:	68fb      	ldr	r3, [r7, #12]
    15fc:	b29a      	uxth	r2, r3
    15fe:	687b      	ldr	r3, [r7, #4]
    1600:	819a      	strh	r2, [r3, #12]
	uint32_t	w=WriteFastAppState(hs,eepromAddress);
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	899b      	ldrh	r3, [r3, #12]
    1606:	461a      	mov	r2, r3
    1608:	6839      	ldr	r1, [r7, #0]
    160a:	6878      	ldr	r0, [r7, #4]
    160c:	4b0c      	ldr	r3, [pc, #48]	; (1640 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x58>)
    160e:	4798      	blx	r3
    1610:	60b8      	str	r0, [r7, #8]
	crc32=		memory.CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    1612:	226c      	movs	r2, #108	; 0x6c
    1614:	6839      	ldr	r1, [r7, #0]
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x5c>)
    1618:	4b0b      	ldr	r3, [pc, #44]	; (1648 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x60>)
    161a:	4798      	blx	r3
    161c:	4602      	mov	r2, r0
    161e:	687b      	ldr	r3, [r7, #4]
    1620:	609a      	str	r2, [r3, #8]
	w=WriteFastCRCAppState(crc32);
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	689b      	ldr	r3, [r3, #8]
    1626:	4619      	mov	r1, r3
    1628:	6878      	ldr	r0, [r7, #4]
    162a:	4b08      	ldr	r3, [pc, #32]	; (164c <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x64>)
    162c:	4798      	blx	r3
    162e:	60b8      	str	r0, [r7, #8]
	return	w;
    1630:	68bb      	ldr	r3, [r7, #8]
}
    1632:	4618      	mov	r0, r3
    1634:	3710      	adds	r7, #16
    1636:	46bd      	mov	sp, r7
    1638:	bd80      	pop	{r7, pc}
    163a:	bf00      	nop
    163c:	20001470 	.word	0x20001470
    1640:	00001651 	.word	0x00001651
    1644:	20001ae4 	.word	0x20001ae4
    1648:	00001239 	.word	0x00001239
    164c:	00001689 	.word	0x00001689

00001650 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem>:
uint32_t	FastStorage_Class::WriteFastAppState(HVACState& hs,uint32_t add){
    1650:	b590      	push	{r4, r7, lr}
    1652:	b087      	sub	sp, #28
    1654:	af00      	add	r7, sp, #0
    1656:	60f8      	str	r0, [r7, #12]
    1658:	60b9      	str	r1, [r7, #8]
    165a:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    165c:	68ba      	ldr	r2, [r7, #8]
    165e:	68fb      	ldr	r3, [r7, #12]
    1660:	601a      	str	r2, [r3, #0]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)handlerAppState,(uint16_t)add,sizeof(HVACState));
    1662:	68fb      	ldr	r3, [r7, #12]
    1664:	6819      	ldr	r1, [r3, #0]
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	b29a      	uxth	r2, r3
    166a:	236c      	movs	r3, #108	; 0x6c
    166c:	4804      	ldr	r0, [pc, #16]	; (1680 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x30>)
    166e:	4c05      	ldr	r4, [pc, #20]	; (1684 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x34>)
    1670:	47a0      	blx	r4
    1672:	6178      	str	r0, [r7, #20]
	return	w;
    1674:	697b      	ldr	r3, [r7, #20]
}
    1676:	4618      	mov	r0, r3
    1678:	371c      	adds	r7, #28
    167a:	46bd      	mov	sp, r7
    167c:	bd90      	pop	{r4, r7, pc}
    167e:	bf00      	nop
    1680:	2000995c 	.word	0x2000995c
    1684:	00015241 	.word	0x00015241

00001688 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm>:
uint32_t	FastStorage_Class::WriteFastCRCAppState(uint32_t crc){
    1688:	b590      	push	{r4, r7, lr}
    168a:	b085      	sub	sp, #20
    168c:	af00      	add	r7, sp, #0
    168e:	6078      	str	r0, [r7, #4]
    1690:	6039      	str	r1, [r7, #0]
	uint16_t	add=(uint32_t)&eepromMap->crcAppState;
    1692:	4b08      	ldr	r3, [pc, #32]	; (16b4 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x2c>)
    1694:	681b      	ldr	r3, [r3, #0]
    1696:	3304      	adds	r3, #4
    1698:	81fb      	strh	r3, [r7, #14]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&crc),(uint16_t)add,sizeof(uint32_t));
    169a:	89fa      	ldrh	r2, [r7, #14]
    169c:	4639      	mov	r1, r7
    169e:	2304      	movs	r3, #4
    16a0:	4805      	ldr	r0, [pc, #20]	; (16b8 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x30>)
    16a2:	4c06      	ldr	r4, [pc, #24]	; (16bc <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x34>)
    16a4:	47a0      	blx	r4
    16a6:	60b8      	str	r0, [r7, #8]
	return	w;
    16a8:	68bb      	ldr	r3, [r7, #8]
}
    16aa:	4618      	mov	r0, r3
    16ac:	3714      	adds	r7, #20
    16ae:	46bd      	mov	sp, r7
    16b0:	bd90      	pop	{r4, r7, pc}
    16b2:	bf00      	nop
    16b4:	20001470 	.word	0x20001470
    16b8:	2000995c 	.word	0x2000995c
    16bc:	00015241 	.word	0x00015241

000016c0 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv>:
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
	uint8_t		add8=(uint8_t)(0xff&&add32);
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
	return	w;
}
uint32_t	FastStorage_Class::WriteFastDefaultParameters(void){
    16c0:	b590      	push	{r4, r7, lr}
    16c2:	b087      	sub	sp, #28
    16c4:	af00      	add	r7, sp, #0
    16c6:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    16c8:	4b0d      	ldr	r3, [pc, #52]	; (1700 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x40>)
    16ca:	781b      	ldrb	r3, [r3, #0]
    16cc:	723b      	strb	r3, [r7, #8]
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
    16ce:	4b0d      	ldr	r3, [pc, #52]	; (1704 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x44>)
    16d0:	681b      	ldr	r3, [r3, #0]
    16d2:	3301      	adds	r3, #1
    16d4:	617b      	str	r3, [r7, #20]
	uint8_t		add8=(uint8_t)(0xff&&add32);
    16d6:	697b      	ldr	r3, [r7, #20]
    16d8:	2b00      	cmp	r3, #0
    16da:	bf14      	ite	ne
    16dc:	2301      	movne	r3, #1
    16de:	2300      	moveq	r3, #0
    16e0:	b2db      	uxtb	r3, r3
    16e2:	74fb      	strb	r3, [r7, #19]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
    16e4:	7cfa      	ldrb	r2, [r7, #19]
    16e6:	f107 0108 	add.w	r1, r7, #8
    16ea:	2301      	movs	r3, #1
    16ec:	4806      	ldr	r0, [pc, #24]	; (1708 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x48>)
    16ee:	4c07      	ldr	r4, [pc, #28]	; (170c <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x4c>)
    16f0:	47a0      	blx	r4
    16f2:	60f8      	str	r0, [r7, #12]
	return	w;
    16f4:	68fb      	ldr	r3, [r7, #12]
    16f6:	4618      	mov	r0, r3
    16f8:	371c      	adds	r7, #28
    16fa:	46bd      	mov	sp, r7
    16fc:	bd90      	pop	{r4, r7, pc}
    16fe:	bf00      	nop
    1700:	00020ab8 	.word	0x00020ab8
    1704:	20001470 	.word	0x20001470
    1708:	2000995c 	.word	0x2000995c
    170c:	000151ad 	.word	0x000151ad

00001710 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
    1710:	b480      	push	{r7}
    1712:	b083      	sub	sp, #12
    1714:	af00      	add	r7, sp, #0
    1716:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
    1718:	687b      	ldr	r3, [r7, #4]
    171a:	4618      	mov	r0, r3
    171c:	370c      	adds	r7, #12
    171e:	46bd      	mov	sp, r7
    1720:	bc80      	pop	{r7}
    1722:	4770      	bx	lr

00001724 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
    1724:	b480      	push	{r7}
    1726:	b083      	sub	sp, #12
    1728:	af00      	add	r7, sp, #0
    172a:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
    172c:	687b      	ldr	r3, [r7, #4]
    172e:	4618      	mov	r0, r3
    1730:	370c      	adds	r7, #12
    1732:	46bd      	mov	sp, r7
    1734:	bc80      	pop	{r7}
    1736:	4770      	bx	lr

00001738 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
    1738:	b480      	push	{r7}
    173a:	b083      	sub	sp, #12
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	460b      	mov	r3, r1
    1742:	70fb      	strb	r3, [r7, #3]
	for (i = 0; i < 2; i++)
    1744:	687b      	ldr	r3, [r7, #4]
    1746:	2200      	movs	r2, #0
    1748:	741a      	strb	r2, [r3, #16]
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	7c1b      	ldrb	r3, [r3, #16]
    174e:	2b01      	cmp	r3, #1
    1750:	dc1e      	bgt.n	1790 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x58>
	{
		controlStatus.cabin[i]._switch=(v&&(0x80>>i))>0;
    1752:	687b      	ldr	r3, [r7, #4]
    1754:	7c1b      	ldrb	r3, [r3, #16]
    1756:	4619      	mov	r1, r3
    1758:	78fb      	ldrb	r3, [r7, #3]
    175a:	2b00      	cmp	r3, #0
    175c:	d008      	beq.n	1770 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x38>
    175e:	687b      	ldr	r3, [r7, #4]
    1760:	7c1b      	ldrb	r3, [r3, #16]
    1762:	461a      	mov	r2, r3
    1764:	2380      	movs	r3, #128	; 0x80
    1766:	4113      	asrs	r3, r2
    1768:	2b00      	cmp	r3, #0
    176a:	d001      	beq.n	1770 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x38>
    176c:	2301      	movs	r3, #1
    176e:	e000      	b.n	1772 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3a>
    1770:	2300      	movs	r3, #0
    1772:	2b00      	cmp	r3, #0
    1774:	bfcc      	ite	gt
    1776:	2301      	movgt	r3, #1
    1778:	2300      	movle	r3, #0
    177a:	b2da      	uxtb	r2, r3
    177c:	687b      	ldr	r3, [r7, #4]
    177e:	440b      	add	r3, r1
    1780:	74da      	strb	r2, [r3, #19]
	for (i = 0; i < 2; i++)
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	7c1b      	ldrb	r3, [r3, #16]
    1786:	3301      	adds	r3, #1
    1788:	b2da      	uxtb	r2, r3
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	741a      	strb	r2, [r3, #16]
    178e:	e7dc      	b.n	174a <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x12>
	}
}
    1790:	bf00      	nop
    1792:	370c      	adds	r7, #12
    1794:	46bd      	mov	sp, r7
    1796:	bc80      	pop	{r7}
    1798:	4770      	bx	lr

0000179a <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
    179a:	b480      	push	{r7}
    179c:	b083      	sub	sp, #12
    179e:	af00      	add	r7, sp, #0
    17a0:	6078      	str	r0, [r7, #4]
    17a2:	460b      	mov	r3, r1
    17a4:	70fb      	strb	r3, [r7, #3]
	for (i = 0; i < 3; i++)
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	2200      	movs	r2, #0
    17aa:	741a      	strb	r2, [r3, #16]
    17ac:	687b      	ldr	r3, [r7, #4]
    17ae:	7c1b      	ldrb	r3, [r3, #16]
    17b0:	2b02      	cmp	r3, #2
    17b2:	dc1e      	bgt.n	17f2 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x58>
	{
		controlStatus.limit[i]._switch=(v&&(0x20>>i))>0;
    17b4:	687b      	ldr	r3, [r7, #4]
    17b6:	7c1b      	ldrb	r3, [r3, #16]
    17b8:	4619      	mov	r1, r3
    17ba:	78fb      	ldrb	r3, [r7, #3]
    17bc:	2b00      	cmp	r3, #0
    17be:	d008      	beq.n	17d2 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x38>
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	7c1b      	ldrb	r3, [r3, #16]
    17c4:	461a      	mov	r2, r3
    17c6:	2320      	movs	r3, #32
    17c8:	4113      	asrs	r3, r2
    17ca:	2b00      	cmp	r3, #0
    17cc:	d001      	beq.n	17d2 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x38>
    17ce:	2301      	movs	r3, #1
    17d0:	e000      	b.n	17d4 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x3a>
    17d2:	2300      	movs	r3, #0
    17d4:	2b00      	cmp	r3, #0
    17d6:	bfcc      	ite	gt
    17d8:	2301      	movgt	r3, #1
    17da:	2300      	movle	r3, #0
    17dc:	b2da      	uxtb	r2, r3
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	440b      	add	r3, r1
    17e2:	755a      	strb	r2, [r3, #21]
	for (i = 0; i < 3; i++)
    17e4:	687b      	ldr	r3, [r7, #4]
    17e6:	7c1b      	ldrb	r3, [r3, #16]
    17e8:	3301      	adds	r3, #1
    17ea:	b2da      	uxtb	r2, r3
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	741a      	strb	r2, [r3, #16]
    17f0:	e7dc      	b.n	17ac <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x12>
	}
}
    17f2:	bf00      	nop
    17f4:	370c      	adds	r7, #12
    17f6:	46bd      	mov	sp, r7
    17f8:	bc80      	pop	{r7}
    17fa:	4770      	bx	lr

000017fc <_ZN22FlapperValveDataStruct17FillControlStatusEh>:
ControlStatus FlapperValveDataStruct::FillControlStatus(uint8_t v){
    17fc:	b580      	push	{r7, lr}
    17fe:	b084      	sub	sp, #16
    1800:	af00      	add	r7, sp, #0
    1802:	60f8      	str	r0, [r7, #12]
    1804:	60b9      	str	r1, [r7, #8]
    1806:	4613      	mov	r3, r2
    1808:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
    180a:	79fb      	ldrb	r3, [r7, #7]
    180c:	4619      	mov	r1, r3
    180e:	68b8      	ldr	r0, [r7, #8]
    1810:	4b0c      	ldr	r3, [pc, #48]	; (1844 <_ZN22FlapperValveDataStruct17FillControlStatusEh+0x48>)
    1812:	4798      	blx	r3
	FillLimitSwitch(v);
    1814:	79fb      	ldrb	r3, [r7, #7]
    1816:	4619      	mov	r1, r3
    1818:	68b8      	ldr	r0, [r7, #8]
    181a:	4b0b      	ldr	r3, [pc, #44]	; (1848 <_ZN22FlapperValveDataStruct17FillControlStatusEh+0x4c>)
    181c:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=(v&&(0x01)>0);
    181e:	79fb      	ldrb	r3, [r7, #7]
    1820:	2b00      	cmp	r3, #0
    1822:	bf14      	ite	ne
    1824:	2301      	movne	r3, #1
    1826:	2300      	moveq	r3, #0
    1828:	b2da      	uxtb	r2, r3
    182a:	68bb      	ldr	r3, [r7, #8]
    182c:	761a      	strb	r2, [r3, #24]
	return controlStatus;
    182e:	68fa      	ldr	r2, [r7, #12]
    1830:	68bb      	ldr	r3, [r7, #8]
    1832:	3313      	adds	r3, #19
    1834:	6819      	ldr	r1, [r3, #0]
    1836:	6011      	str	r1, [r2, #0]
    1838:	889b      	ldrh	r3, [r3, #4]
    183a:	8093      	strh	r3, [r2, #4]
}
    183c:	68f8      	ldr	r0, [r7, #12]
    183e:	3710      	adds	r7, #16
    1840:	46bd      	mov	sp, r7
    1842:	bd80      	pop	{r7, pc}
    1844:	00001739 	.word	0x00001739
    1848:	0000179b 	.word	0x0000179b

0000184c <_ZN22FlapperValveDataStruct16FillStatusInputsEh>:

StatusInputs FlapperValveDataStruct::FillStatusInputs(uint8_t v){
    184c:	b480      	push	{r7}
    184e:	b085      	sub	sp, #20
    1850:	af00      	add	r7, sp, #0
    1852:	60f8      	str	r0, [r7, #12]
    1854:	60b9      	str	r1, [r7, #8]
    1856:	4613      	mov	r3, r2
    1858:	71fb      	strb	r3, [r7, #7]
	statusInputs.iAlcFvStandAloneOut=(v&&(0x80)>0);
    185a:	79fb      	ldrb	r3, [r7, #7]
    185c:	2b00      	cmp	r3, #0
    185e:	bf14      	ite	ne
    1860:	2301      	movne	r3, #1
    1862:	2300      	moveq	r3, #0
    1864:	b2da      	uxtb	r2, r3
    1866:	68bb      	ldr	r3, [r7, #8]
    1868:	765a      	strb	r2, [r3, #25]
	statusInputs.niAlcFvClearMoveFault=(v&&(0x40)>0);
    186a:	79fb      	ldrb	r3, [r7, #7]
    186c:	2b00      	cmp	r3, #0
    186e:	bf14      	ite	ne
    1870:	2301      	movne	r3, #1
    1872:	2300      	moveq	r3, #0
    1874:	b2da      	uxtb	r2, r3
    1876:	68bb      	ldr	r3, [r7, #8]
    1878:	769a      	strb	r2, [r3, #26]
	statusInputs.iFvMotorPhaset=(v&&(0x20)>0);
    187a:	79fb      	ldrb	r3, [r7, #7]
    187c:	2b00      	cmp	r3, #0
    187e:	bf14      	ite	ne
    1880:	2301      	movne	r3, #1
    1882:	2300      	moveq	r3, #0
    1884:	b2da      	uxtb	r2, r3
    1886:	68bb      	ldr	r3, [r7, #8]
    1888:	771a      	strb	r2, [r3, #28]
	statusInputs.iAlcFvMoveTimer=(v&&(0x10)>0);
    188a:	79fb      	ldrb	r3, [r7, #7]
    188c:	2b00      	cmp	r3, #0
    188e:	bf14      	ite	ne
    1890:	2301      	movne	r3, #1
    1892:	2300      	moveq	r3, #0
    1894:	b2da      	uxtb	r2, r3
    1896:	68bb      	ldr	r3, [r7, #8]
    1898:	76da      	strb	r2, [r3, #27]
	statusInputs.iAlcFvPositionChanged=(v&&(0x08)>0);
    189a:	79fb      	ldrb	r3, [r7, #7]
    189c:	2b00      	cmp	r3, #0
    189e:	bf14      	ite	ne
    18a0:	2301      	movne	r3, #1
    18a2:	2300      	moveq	r3, #0
    18a4:	b2da      	uxtb	r2, r3
    18a6:	68bb      	ldr	r3, [r7, #8]
    18a8:	775a      	strb	r2, [r3, #29]
	statusInputs.iAlcFvInvalidPosition=(v&&(0x04)>0);
    18aa:	79fb      	ldrb	r3, [r7, #7]
    18ac:	2b00      	cmp	r3, #0
    18ae:	bf14      	ite	ne
    18b0:	2301      	movne	r3, #1
    18b2:	2300      	moveq	r3, #0
    18b4:	b2da      	uxtb	r2, r3
    18b6:	68bb      	ldr	r3, [r7, #8]
    18b8:	779a      	strb	r2, [r3, #30]
	statusInputs.iAlcFvFailsToMove=(v&&(0x2)>0);
    18ba:	79fb      	ldrb	r3, [r7, #7]
    18bc:	2b00      	cmp	r3, #0
    18be:	bf14      	ite	ne
    18c0:	2301      	movne	r3, #1
    18c2:	2300      	moveq	r3, #0
    18c4:	b2da      	uxtb	r2, r3
    18c6:	68bb      	ldr	r3, [r7, #8]
    18c8:	77da      	strb	r2, [r3, #31]
	statusInputs.niAlcFvMotorEnable=(v&&(0x1)>0);
    18ca:	79fb      	ldrb	r3, [r7, #7]
    18cc:	2b00      	cmp	r3, #0
    18ce:	bf14      	ite	ne
    18d0:	2301      	movne	r3, #1
    18d2:	2300      	moveq	r3, #0
    18d4:	b2da      	uxtb	r2, r3
    18d6:	68bb      	ldr	r3, [r7, #8]
    18d8:	f883 2020 	strb.w	r2, [r3, #32]
	return statusInputs;
    18dc:	68fa      	ldr	r2, [r7, #12]
    18de:	68bb      	ldr	r3, [r7, #8]
    18e0:	3319      	adds	r3, #25
    18e2:	6819      	ldr	r1, [r3, #0]
    18e4:	685b      	ldr	r3, [r3, #4]
    18e6:	6011      	str	r1, [r2, #0]
    18e8:	6053      	str	r3, [r2, #4]
    18ea:	68f8      	ldr	r0, [r7, #12]
    18ec:	3714      	adds	r7, #20
    18ee:	46bd      	mov	sp, r7
    18f0:	bc80      	pop	{r7}
    18f2:	4770      	bx	lr

000018f4 <_ZL16Fv1StatusChangedv>:
#include "I2C_Asyn_Class.h"
#include "MemoryManagment_Class.h"
FlapperValve_Class	*ptrFlapperValveClass;
I2C_Asyn_Class		i2cFVs(&I2C_EXPANDER);

static void	Fv1StatusChanged(void){
    18f4:	b480      	push	{r7}
    18f6:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv1StatusChanged=true;
    18f8:	4b04      	ldr	r3, [pc, #16]	; (190c <_ZL16Fv1StatusChangedv+0x18>)
    18fa:	681b      	ldr	r3, [r3, #0]
    18fc:	2201      	movs	r2, #1
    18fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

}
    1902:	bf00      	nop
    1904:	46bd      	mov	sp, r7
    1906:	bc80      	pop	{r7}
    1908:	4770      	bx	lr
    190a:	bf00      	nop
    190c:	20001474 	.word	0x20001474

00001910 <_ZL16Fv2StatusChangedv>:
static void	Fv2StatusChanged(void){
    1910:	b480      	push	{r7}
    1912:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv2StatusChanged=true;
    1914:	4b04      	ldr	r3, [pc, #16]	; (1928 <_ZL16Fv2StatusChangedv+0x18>)
    1916:	681b      	ldr	r3, [r3, #0]
    1918:	2201      	movs	r2, #1
    191a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

}
    191e:	bf00      	nop
    1920:	46bd      	mov	sp, r7
    1922:	bc80      	pop	{r7}
    1924:	4770      	bx	lr
    1926:	bf00      	nop
    1928:	20001474 	.word	0x20001474

0000192c <_ZL20I2CFlapperValvesInitv>:

static bool	I2CFlapperValvesInit(void){
    192c:	b580      	push	{r7, lr}
    192e:	b082      	sub	sp, #8
    1930:	af00      	add	r7, sp, #0
	 bool ok= i2cFVs.Init();
    1932:	4805      	ldr	r0, [pc, #20]	; (1948 <_ZL20I2CFlapperValvesInitv+0x1c>)
    1934:	4b05      	ldr	r3, [pc, #20]	; (194c <_ZL20I2CFlapperValvesInitv+0x20>)
    1936:	4798      	blx	r3
    1938:	4603      	mov	r3, r0
    193a:	71fb      	strb	r3, [r7, #7]
	 //ptrFlapperValveClass->isOK=ok;
}
    193c:	bf00      	nop
    193e:	4618      	mov	r0, r3
    1940:	3708      	adds	r7, #8
    1942:	46bd      	mov	sp, r7
    1944:	bd80      	pop	{r7, pc}
    1946:	bf00      	nop
    1948:	20001478 	.word	0x20001478
    194c:	00014501 	.word	0x00014501

00001950 <_ZN18FlapperValve_ClassC1Eh>:

FlapperValve_Class::FlapperValve_Class(uint8_t id)
    1950:	b5b0      	push	{r4, r5, r7, lr}
    1952:	b082      	sub	sp, #8
    1954:	af00      	add	r7, sp, #0
    1956:	6078      	str	r0, [r7, #4]
    1958:	460b      	mov	r3, r1
    195a:	70fb      	strb	r3, [r7, #3]
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	4618      	mov	r0, r3
    1960:	4b10      	ldr	r3, [pc, #64]	; (19a4 <_ZN18FlapperValve_ClassC1Eh+0x54>)
    1962:	4798      	blx	r3
    1964:	687b      	ldr	r3, [r7, #4]
    1966:	3340      	adds	r3, #64	; 0x40
    1968:	2403      	movs	r4, #3
    196a:	461d      	mov	r5, r3
    196c:	2c00      	cmp	r4, #0
    196e:	db05      	blt.n	197c <_ZN18FlapperValve_ClassC1Eh+0x2c>
    1970:	4628      	mov	r0, r5
    1972:	4b0d      	ldr	r3, [pc, #52]	; (19a8 <_ZN18FlapperValve_ClassC1Eh+0x58>)
    1974:	4798      	blx	r3
    1976:	3518      	adds	r5, #24
    1978:	3c01      	subs	r4, #1
    197a:	e7f7      	b.n	196c <_ZN18FlapperValve_ClassC1Eh+0x1c>
{	
	valveID=id;
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	78fa      	ldrb	r2, [r7, #3]
    1980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i2cDescr=&I2C_EXPANDER;
    1984:	687b      	ldr	r3, [r7, #4]
    1986:	4a09      	ldr	r2, [pc, #36]	; (19ac <_ZN18FlapperValve_ClassC1Eh+0x5c>)
    1988:	639a      	str	r2, [r3, #56]	; 0x38
	ptrFlapperValveClass=this;
    198a:	4a09      	ldr	r2, [pc, #36]	; (19b0 <_ZN18FlapperValve_ClassC1Eh+0x60>)
    198c:	687b      	ldr	r3, [r7, #4]
    198e:	6013      	str	r3, [r2, #0]
	isOK=false;
    1990:	687b      	ldr	r3, [r7, #4]
    1992:	2200      	movs	r2, #0
    1994:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
} //FlapperValve_Class
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	4618      	mov	r0, r3
    199c:	3708      	adds	r7, #8
    199e:	46bd      	mov	sp, r7
    19a0:	bdb0      	pop	{r4, r5, r7, pc}
    19a2:	bf00      	nop
    19a4:	00001711 	.word	0x00001711
    19a8:	00014831 	.word	0x00014831
    19ac:	2000a278 	.word	0x2000a278
    19b0:	20001474 	.word	0x20001474

000019b4 <_ZN18FlapperValve_ClassD1Ev>:
	i2cDescr=&I2C_EXPANDER;
	ptrFlapperValveClass=this;
} //FlapperValve_Class

// default destructor
FlapperValve_Class::~FlapperValve_Class()
    19b4:	b590      	push	{r4, r7, lr}
    19b6:	b083      	sub	sp, #12
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	3340      	adds	r3, #64	; 0x40
    19c0:	2b00      	cmp	r3, #0
    19c2:	d00c      	beq.n	19de <_ZN18FlapperValve_ClassD1Ev+0x2a>
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	3340      	adds	r3, #64	; 0x40
    19c8:	f103 0460 	add.w	r4, r3, #96	; 0x60
    19cc:	687b      	ldr	r3, [r7, #4]
    19ce:	3340      	adds	r3, #64	; 0x40
    19d0:	42a3      	cmp	r3, r4
    19d2:	d004      	beq.n	19de <_ZN18FlapperValve_ClassD1Ev+0x2a>
    19d4:	3c18      	subs	r4, #24
    19d6:	4620      	mov	r0, r4
    19d8:	4b05      	ldr	r3, [pc, #20]	; (19f0 <_ZN18FlapperValve_ClassD1Ev+0x3c>)
    19da:	4798      	blx	r3
    19dc:	e7f6      	b.n	19cc <_ZN18FlapperValve_ClassD1Ev+0x18>
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	4618      	mov	r0, r3
    19e2:	4b04      	ldr	r3, [pc, #16]	; (19f4 <_ZN18FlapperValve_ClassD1Ev+0x40>)
    19e4:	4798      	blx	r3
{
} //~FlapperValve_Class
    19e6:	687b      	ldr	r3, [r7, #4]
    19e8:	4618      	mov	r0, r3
    19ea:	370c      	adds	r7, #12
    19ec:	46bd      	mov	sp, r7
    19ee:	bd90      	pop	{r4, r7, pc}
    19f0:	00014845 	.word	0x00014845
    19f4:	00001725 	.word	0x00001725

000019f8 <_ZN18FlapperValve_Class4InitEv>:


bool	FlapperValve_Class::Init(void){
    19f8:	b580      	push	{r7, lr}
    19fa:	b082      	sub	sp, #8
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
		if (i2cFVs.initiated==false)
    1a00:	4b1e      	ldr	r3, [pc, #120]	; (1a7c <_ZN18FlapperValve_Class4InitEv+0x84>)
    1a02:	7d9b      	ldrb	r3, [r3, #22]
    1a04:	f083 0301 	eor.w	r3, r3, #1
    1a08:	b2db      	uxtb	r3, r3
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d006      	beq.n	1a1c <_ZN18FlapperValve_Class4InitEv+0x24>
		{
				isOK=I2CFlapperValvesInit();
    1a0e:	4b1c      	ldr	r3, [pc, #112]	; (1a80 <_ZN18FlapperValve_Class4InitEv+0x88>)
    1a10:	4798      	blx	r3
    1a12:	4603      	mov	r3, r0
    1a14:	461a      	mov	r2, r3
    1a16:	687b      	ldr	r3, [r7, #4]
    1a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}
	
		if (i2cFVs.isOK)
    1a1c:	4b17      	ldr	r3, [pc, #92]	; (1a7c <_ZN18FlapperValve_Class4InitEv+0x84>)
    1a1e:	7e1b      	ldrb	r3, [r3, #24]
    1a20:	b2db      	uxtb	r3, r3
    1a22:	2b00      	cmp	r3, #0
    1a24:	d021      	beq.n	1a6a <_ZN18FlapperValve_Class4InitEv+0x72>
		{
			if (valveID==1)
    1a26:	687b      	ldr	r3, [r7, #4]
    1a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    1a2c:	2b01      	cmp	r3, #1
    1a2e:	d104      	bne.n	1a3a <_ZN18FlapperValve_Class4InitEv+0x42>
			{
				ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
    1a30:	4914      	ldr	r1, [pc, #80]	; (1a84 <_ZN18FlapperValve_Class4InitEv+0x8c>)
    1a32:	2004      	movs	r0, #4
    1a34:	4b14      	ldr	r3, [pc, #80]	; (1a88 <_ZN18FlapperValve_Class4InitEv+0x90>)
    1a36:	4798      	blx	r3
    1a38:	e008      	b.n	1a4c <_ZN18FlapperValve_Class4InitEv+0x54>
			} 
			else if  (valveID==2)
    1a3a:	687b      	ldr	r3, [r7, #4]
    1a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    1a40:	2b02      	cmp	r3, #2
    1a42:	d103      	bne.n	1a4c <_ZN18FlapperValve_Class4InitEv+0x54>
			{
				ext_irq_register(PIN_PA05,FUNC_PTR(Fv2StatusChanged));	
    1a44:	4911      	ldr	r1, [pc, #68]	; (1a8c <_ZN18FlapperValve_Class4InitEv+0x94>)
    1a46:	2005      	movs	r0, #5
    1a48:	4b0f      	ldr	r3, [pc, #60]	; (1a88 <_ZN18FlapperValve_Class4InitEv+0x90>)
    1a4a:	4798      	blx	r3
			}
			InitExpanderArray(valveID);
    1a4c:	687b      	ldr	r3, [r7, #4]
    1a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    1a52:	4619      	mov	r1, r3
    1a54:	6878      	ldr	r0, [r7, #4]
    1a56:	4b0e      	ldr	r3, [pc, #56]	; (1a90 <_ZN18FlapperValve_Class4InitEv+0x98>)
    1a58:	4798      	blx	r3
			isOK=Selftest();
    1a5a:	6878      	ldr	r0, [r7, #4]
    1a5c:	4b0d      	ldr	r3, [pc, #52]	; (1a94 <_ZN18FlapperValve_Class4InitEv+0x9c>)
    1a5e:	4798      	blx	r3
    1a60:	4603      	mov	r3, r0
    1a62:	461a      	mov	r2, r3
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		} 
		else
		{
		}
		return isOK;
    1a6a:	687b      	ldr	r3, [r7, #4]
    1a6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    1a70:	b2db      	uxtb	r3, r3
}
    1a72:	4618      	mov	r0, r3
    1a74:	3708      	adds	r7, #8
    1a76:	46bd      	mov	sp, r7
    1a78:	bd80      	pop	{r7, pc}
    1a7a:	bf00      	nop
    1a7c:	20001478 	.word	0x20001478
    1a80:	0000192d 	.word	0x0000192d
    1a84:	000018f5 	.word	0x000018f5
    1a88:	000060b5 	.word	0x000060b5
    1a8c:	00001911 	.word	0x00001911
    1a90:	00001a99 	.word	0x00001a99
    1a94:	00001cc9 	.word	0x00001cc9

00001a98 <_ZN18FlapperValve_Class17InitExpanderArrayEh>:
uint8_t FlapperValve_Class::InitExpanderArray(uint8_t fvID){
    1a98:	b580      	push	{r7, lr}
    1a9a:	b082      	sub	sp, #8
    1a9c:	af00      	add	r7, sp, #0
    1a9e:	6078      	str	r0, [r7, #4]
    1aa0:	460b      	mov	r3, r1
    1aa2:	70fb      	strb	r3, [r7, #3]
	
	for (i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	2200      	movs	r2, #0
    1aa8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    1aac:	687b      	ldr	r3, [r7, #4]
    1aae:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
    1ab2:	2b03      	cmp	r3, #3
    1ab4:	dc27      	bgt.n	1b06 <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x6e>
	{
		currentExpander=&(expanders[i]);
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
    1abc:	461a      	mov	r2, r3
    1abe:	4613      	mov	r3, r2
    1ac0:	005b      	lsls	r3, r3, #1
    1ac2:	4413      	add	r3, r2
    1ac4:	00db      	lsls	r3, r3, #3
    1ac6:	3340      	adds	r3, #64	; 0x40
    1ac8:	687a      	ldr	r2, [r7, #4]
    1aca:	441a      	add	r2, r3
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		currentExpander->Init(i+(fvID-1)*FLAPPER_VALVE_EXPANDERS,&i2cFVs);
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
    1ade:	78fb      	ldrb	r3, [r7, #3]
    1ae0:	3b01      	subs	r3, #1
    1ae2:	b2db      	uxtb	r3, r3
    1ae4:	009b      	lsls	r3, r3, #2
    1ae6:	b2db      	uxtb	r3, r3
    1ae8:	4413      	add	r3, r2
    1aea:	b2db      	uxtb	r3, r3
    1aec:	4a08      	ldr	r2, [pc, #32]	; (1b10 <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x78>)
    1aee:	4619      	mov	r1, r3
    1af0:	4b08      	ldr	r3, [pc, #32]	; (1b14 <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x7c>)
    1af2:	4798      	blx	r3
	for (i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
    1afa:	3301      	adds	r3, #1
    1afc:	b2da      	uxtb	r2, r3
    1afe:	687b      	ldr	r3, [r7, #4]
    1b00:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    1b04:	e7d2      	b.n	1aac <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x14>
	}
}
    1b06:	bf00      	nop
    1b08:	4618      	mov	r0, r3
    1b0a:	3708      	adds	r7, #8
    1b0c:	46bd      	mov	sp, r7
    1b0e:	bd80      	pop	{r7, pc}
    1b10:	20001478 	.word	0x20001478
    1b14:	00014859 	.word	0x00014859

00001b18 <_ZN18FlapperValve_Class17ReadControlStatusEv>:

ControlStatus FlapperValve_Class::ReadControlStatus(void){
    1b18:	b590      	push	{r4, r7, lr}
    1b1a:	b085      	sub	sp, #20
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	60f8      	str	r0, [r7, #12]
    1b20:	60b9      	str	r1, [r7, #8]
	value=expanders[0].ReadGPIORegister();
    1b22:	68bb      	ldr	r3, [r7, #8]
    1b24:	3340      	adds	r3, #64	; 0x40
    1b26:	4618      	mov	r0, r3
    1b28:	4b10      	ldr	r3, [pc, #64]	; (1b6c <_ZN18FlapperValve_Class17ReadControlStatusEv+0x54>)
    1b2a:	4798      	blx	r3
    1b2c:	4603      	mov	r3, r0
    1b2e:	461a      	mov	r2, r3
    1b30:	68bb      	ldr	r3, [r7, #8]
    1b32:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	controlStatus=FillControlStatus(value);
    1b36:	68b9      	ldr	r1, [r7, #8]
    1b38:	68bb      	ldr	r3, [r7, #8]
    1b3a:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
    1b3e:	68bc      	ldr	r4, [r7, #8]
    1b40:	463b      	mov	r3, r7
    1b42:	4618      	mov	r0, r3
    1b44:	4b0a      	ldr	r3, [pc, #40]	; (1b70 <_ZN18FlapperValve_Class17ReadControlStatusEv+0x58>)
    1b46:	4798      	blx	r3
    1b48:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
    1b4c:	463a      	mov	r2, r7
    1b4e:	6810      	ldr	r0, [r2, #0]
    1b50:	6018      	str	r0, [r3, #0]
    1b52:	8892      	ldrh	r2, [r2, #4]
    1b54:	809a      	strh	r2, [r3, #4]
	return controlStatus;
    1b56:	68fa      	ldr	r2, [r7, #12]
    1b58:	68bb      	ldr	r3, [r7, #8]
    1b5a:	33a4      	adds	r3, #164	; 0xa4
    1b5c:	6818      	ldr	r0, [r3, #0]
    1b5e:	6010      	str	r0, [r2, #0]
    1b60:	889b      	ldrh	r3, [r3, #4]
    1b62:	8093      	strh	r3, [r2, #4]
}
    1b64:	68f8      	ldr	r0, [r7, #12]
    1b66:	3714      	adds	r7, #20
    1b68:	46bd      	mov	sp, r7
    1b6a:	bd90      	pop	{r4, r7, pc}
    1b6c:	000148f5 	.word	0x000148f5
    1b70:	000017fd 	.word	0x000017fd

00001b74 <_ZN18FlapperValve_Class16ReadStatusInputsEv>:
StatusInputs FlapperValve_Class::ReadStatusInputs(void){
    1b74:	b590      	push	{r4, r7, lr}
    1b76:	b085      	sub	sp, #20
    1b78:	af00      	add	r7, sp, #0
    1b7a:	60f8      	str	r0, [r7, #12]
    1b7c:	60b9      	str	r1, [r7, #8]
	value=expanders[1].ReadGPIORegister();
    1b7e:	68bb      	ldr	r3, [r7, #8]
    1b80:	3358      	adds	r3, #88	; 0x58
    1b82:	4618      	mov	r0, r3
    1b84:	4b10      	ldr	r3, [pc, #64]	; (1bc8 <_ZN18FlapperValve_Class16ReadStatusInputsEv+0x54>)
    1b86:	4798      	blx	r3
    1b88:	4603      	mov	r3, r0
    1b8a:	461a      	mov	r2, r3
    1b8c:	68bb      	ldr	r3, [r7, #8]
    1b8e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	statusInputs=FillStatusInputs(value);
    1b92:	68b9      	ldr	r1, [r7, #8]
    1b94:	68bb      	ldr	r3, [r7, #8]
    1b96:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
    1b9a:	68bc      	ldr	r4, [r7, #8]
    1b9c:	463b      	mov	r3, r7
    1b9e:	4618      	mov	r0, r3
    1ba0:	4b0a      	ldr	r3, [pc, #40]	; (1bcc <_ZN18FlapperValve_Class16ReadStatusInputsEv+0x58>)
    1ba2:	4798      	blx	r3
    1ba4:	f104 03aa 	add.w	r3, r4, #170	; 0xaa
    1ba8:	463a      	mov	r2, r7
    1baa:	6811      	ldr	r1, [r2, #0]
    1bac:	6852      	ldr	r2, [r2, #4]
    1bae:	6019      	str	r1, [r3, #0]
    1bb0:	605a      	str	r2, [r3, #4]
	return statusInputs;
    1bb2:	68fa      	ldr	r2, [r7, #12]
    1bb4:	68bb      	ldr	r3, [r7, #8]
    1bb6:	33aa      	adds	r3, #170	; 0xaa
    1bb8:	6819      	ldr	r1, [r3, #0]
    1bba:	685b      	ldr	r3, [r3, #4]
    1bbc:	6011      	str	r1, [r2, #0]
    1bbe:	6053      	str	r3, [r2, #4]
}
    1bc0:	68f8      	ldr	r0, [r7, #12]
    1bc2:	3714      	adds	r7, #20
    1bc4:	46bd      	mov	sp, r7
    1bc6:	bd90      	pop	{r4, r7, pc}
    1bc8:	000148f5 	.word	0x000148f5
    1bcc:	0000184d 	.word	0x0000184d

00001bd0 <_ZN18FlapperValve_Class13WriteSetpointEh>:
uint8_t FlapperValve_Class::WriteSetpoint(uint8_t sp){
    1bd0:	b580      	push	{r7, lr}
    1bd2:	b082      	sub	sp, #8
    1bd4:	af00      	add	r7, sp, #0
    1bd6:	6078      	str	r0, [r7, #4]
    1bd8:	460b      	mov	r3, r1
    1bda:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2].WriteGPIORegister(sp);
    1bdc:	687b      	ldr	r3, [r7, #4]
    1bde:	3370      	adds	r3, #112	; 0x70
    1be0:	78fa      	ldrb	r2, [r7, #3]
    1be2:	4611      	mov	r1, r2
    1be4:	4618      	mov	r0, r3
    1be6:	4b07      	ldr	r3, [pc, #28]	; (1c04 <_ZN18FlapperValve_Class13WriteSetpointEh+0x34>)
    1be8:	4798      	blx	r3
    1bea:	4603      	mov	r3, r0
    1bec:	461a      	mov	r2, r3
    1bee:	687b      	ldr	r3, [r7, #4]
    1bf0:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	return setpointPosition;
    1bf4:	687b      	ldr	r3, [r7, #4]
    1bf6:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
}
    1bfa:	4618      	mov	r0, r3
    1bfc:	3708      	adds	r7, #8
    1bfe:	46bd      	mov	sp, r7
    1c00:	bd80      	pop	{r7, pc}
    1c02:	bf00      	nop
    1c04:	0001495d 	.word	0x0001495d

00001c08 <_ZN18FlapperValve_Class12ReadSetpointEv>:
uint8_t FlapperValve_Class::ReadSetpoint(){
    1c08:	b580      	push	{r7, lr}
    1c0a:	b082      	sub	sp, #8
    1c0c:	af00      	add	r7, sp, #0
    1c0e:	6078      	str	r0, [r7, #4]
	setpointPosition= expanders[2].ReadGPIORegister();
    1c10:	687b      	ldr	r3, [r7, #4]
    1c12:	3370      	adds	r3, #112	; 0x70
    1c14:	4618      	mov	r0, r3
    1c16:	4b07      	ldr	r3, [pc, #28]	; (1c34 <_ZN18FlapperValve_Class12ReadSetpointEv+0x2c>)
    1c18:	4798      	blx	r3
    1c1a:	4603      	mov	r3, r0
    1c1c:	461a      	mov	r2, r3
    1c1e:	687b      	ldr	r3, [r7, #4]
    1c20:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	return setpointPosition;
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
}
    1c2a:	4618      	mov	r0, r3
    1c2c:	3708      	adds	r7, #8
    1c2e:	46bd      	mov	sp, r7
    1c30:	bd80      	pop	{r7, pc}
    1c32:	bf00      	nop
    1c34:	000148f5 	.word	0x000148f5

00001c38 <_ZN18FlapperValve_Class18ReadActualPositionEv>:
uint8_t FlapperValve_Class::ReadActualPosition(void){
    1c38:	b580      	push	{r7, lr}
    1c3a:	b082      	sub	sp, #8
    1c3c:	af00      	add	r7, sp, #0
    1c3e:	6078      	str	r0, [r7, #4]
	actualPosition= expanders[3].ReadGPIORegister();
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	3388      	adds	r3, #136	; 0x88
    1c44:	4618      	mov	r0, r3
    1c46:	4b07      	ldr	r3, [pc, #28]	; (1c64 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x2c>)
    1c48:	4798      	blx	r3
    1c4a:	4603      	mov	r3, r0
    1c4c:	461a      	mov	r2, r3
    1c4e:	687b      	ldr	r3, [r7, #4]
    1c50:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	return actualPosition;
    1c54:	687b      	ldr	r3, [r7, #4]
    1c56:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
}
    1c5a:	4618      	mov	r0, r3
    1c5c:	3708      	adds	r7, #8
    1c5e:	46bd      	mov	sp, r7
    1c60:	bd80      	pop	{r7, pc}
    1c62:	bf00      	nop
    1c64:	000148f5 	.word	0x000148f5

00001c68 <_ZN18FlapperValve_Class22UpdateFlapperValveDataEv>:
void FlapperValve_Class::UpdateFlapperValveData(){
    1c68:	b590      	push	{r4, r7, lr}
    1c6a:	b085      	sub	sp, #20
    1c6c:	af00      	add	r7, sp, #0
    1c6e:	60f8      	str	r0, [r7, #12]
	fvData.controlStatus=ReadControlStatus();
    1c70:	68fc      	ldr	r4, [r7, #12]
    1c72:	463b      	mov	r3, r7
    1c74:	68f9      	ldr	r1, [r7, #12]
    1c76:	4618      	mov	r0, r3
    1c78:	4b10      	ldr	r3, [pc, #64]	; (1cbc <_ZN18FlapperValve_Class22UpdateFlapperValveDataEv+0x54>)
    1c7a:	4798      	blx	r3
    1c7c:	f104 0328 	add.w	r3, r4, #40	; 0x28
    1c80:	463a      	mov	r2, r7
    1c82:	6810      	ldr	r0, [r2, #0]
    1c84:	6018      	str	r0, [r3, #0]
    1c86:	8892      	ldrh	r2, [r2, #4]
    1c88:	809a      	strh	r2, [r3, #4]
	fvData.statusInputs=ReadStatusInputs();
    1c8a:	68fc      	ldr	r4, [r7, #12]
    1c8c:	463b      	mov	r3, r7
    1c8e:	68f9      	ldr	r1, [r7, #12]
    1c90:	4618      	mov	r0, r3
    1c92:	4b0b      	ldr	r3, [pc, #44]	; (1cc0 <_ZN18FlapperValve_Class22UpdateFlapperValveDataEv+0x58>)
    1c94:	4798      	blx	r3
    1c96:	f104 032e 	add.w	r3, r4, #46	; 0x2e
    1c9a:	463a      	mov	r2, r7
    1c9c:	6811      	ldr	r1, [r2, #0]
    1c9e:	6852      	ldr	r2, [r2, #4]
    1ca0:	6019      	str	r1, [r3, #0]
    1ca2:	605a      	str	r2, [r3, #4]
	fvData.actualPosition=ReadActualPosition();
    1ca4:	68f8      	ldr	r0, [r7, #12]
    1ca6:	4b07      	ldr	r3, [pc, #28]	; (1cc4 <_ZN18FlapperValve_Class22UpdateFlapperValveDataEv+0x5c>)
    1ca8:	4798      	blx	r3
    1caa:	4603      	mov	r3, r0
    1cac:	461a      	mov	r2, r3
    1cae:	68fb      	ldr	r3, [r7, #12]
    1cb0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
    1cb4:	bf00      	nop
    1cb6:	3714      	adds	r7, #20
    1cb8:	46bd      	mov	sp, r7
    1cba:	bd90      	pop	{r4, r7, pc}
    1cbc:	00001b19 	.word	0x00001b19
    1cc0:	00001b75 	.word	0x00001b75
    1cc4:	00001c39 	.word	0x00001c39

00001cc8 <_ZN18FlapperValve_Class8SelftestEv>:
bool FlapperValve_Class::Selftest(void){
    1cc8:	b580      	push	{r7, lr}
    1cca:	b084      	sub	sp, #16
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
	UserParameters up;
	memory.ReadFastParameters(up);
    1cd0:	f107 030c 	add.w	r3, r7, #12
    1cd4:	4619      	mov	r1, r3
    1cd6:	4810      	ldr	r0, [pc, #64]	; (1d18 <_ZN18FlapperValve_Class8SelftestEv+0x50>)
    1cd8:	4b10      	ldr	r3, [pc, #64]	; (1d1c <_ZN18FlapperValve_Class8SelftestEv+0x54>)
    1cda:	4798      	blx	r3
	WriteSetpoint(up.flapperValveOffset);
    1cdc:	7b3b      	ldrb	r3, [r7, #12]
    1cde:	4619      	mov	r1, r3
    1ce0:	6878      	ldr	r0, [r7, #4]
    1ce2:	4b0f      	ldr	r3, [pc, #60]	; (1d20 <_ZN18FlapperValve_Class8SelftestEv+0x58>)
    1ce4:	4798      	blx	r3
	UpdateFlapperValveData();
    1ce6:	6878      	ldr	r0, [r7, #4]
    1ce8:	4b0e      	ldr	r3, [pc, #56]	; (1d24 <_ZN18FlapperValve_Class8SelftestEv+0x5c>)
    1cea:	4798      	blx	r3
	isOK=ReadSetpoint()==up.flapperValveOffset;
    1cec:	6878      	ldr	r0, [r7, #4]
    1cee:	4b0e      	ldr	r3, [pc, #56]	; (1d28 <_ZN18FlapperValve_Class8SelftestEv+0x60>)
    1cf0:	4798      	blx	r3
    1cf2:	4603      	mov	r3, r0
    1cf4:	461a      	mov	r2, r3
    1cf6:	7b3b      	ldrb	r3, [r7, #12]
    1cf8:	429a      	cmp	r2, r3
    1cfa:	bf0c      	ite	eq
    1cfc:	2301      	moveq	r3, #1
    1cfe:	2300      	movne	r3, #0
    1d00:	b2da      	uxtb	r2, r3
    1d02:	687b      	ldr	r3, [r7, #4]
    1d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return isOK;
    1d08:	687b      	ldr	r3, [r7, #4]
    1d0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    1d0e:	b2db      	uxtb	r3, r3
}
    1d10:	4618      	mov	r0, r3
    1d12:	3710      	adds	r7, #16
    1d14:	46bd      	mov	sp, r7
    1d16:	bd80      	pop	{r7, pc}
    1d18:	20001c70 	.word	0x20001c70
    1d1c:	000015a9 	.word	0x000015a9
    1d20:	00001bd1 	.word	0x00001bd1
    1d24:	00001c69 	.word	0x00001c69
    1d28:	00001c09 	.word	0x00001c09

00001d2c <_Z41__static_initialization_and_destruction_0ii>:

FlapperValve_Class::operator bool(){
	return	isOK;
}
    1d2c:	b580      	push	{r7, lr}
    1d2e:	b082      	sub	sp, #8
    1d30:	af00      	add	r7, sp, #0
    1d32:	6078      	str	r0, [r7, #4]
    1d34:	6039      	str	r1, [r7, #0]
    1d36:	687b      	ldr	r3, [r7, #4]
    1d38:	2b01      	cmp	r3, #1
    1d3a:	d116      	bne.n	1d6a <_Z41__static_initialization_and_destruction_0ii+0x3e>
    1d3c:	683b      	ldr	r3, [r7, #0]
    1d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1d42:	4293      	cmp	r3, r2
    1d44:	d111      	bne.n	1d6a <_Z41__static_initialization_and_destruction_0ii+0x3e>
I2C_Asyn_Class		i2cFVs(&I2C_EXPANDER);
    1d46:	490b      	ldr	r1, [pc, #44]	; (1d74 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1d48:	480b      	ldr	r0, [pc, #44]	; (1d78 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    1d4a:	4b0c      	ldr	r3, [pc, #48]	; (1d7c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    1d4c:	4798      	blx	r3
    1d4e:	4a0c      	ldr	r2, [pc, #48]	; (1d80 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1d50:	490c      	ldr	r1, [pc, #48]	; (1d84 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    1d52:	4809      	ldr	r0, [pc, #36]	; (1d78 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    1d54:	4b0c      	ldr	r3, [pc, #48]	; (1d88 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1d56:	4798      	blx	r3
    1d58:	2101      	movs	r1, #1
    1d5a:	480c      	ldr	r0, [pc, #48]	; (1d8c <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1d5c:	4b0c      	ldr	r3, [pc, #48]	; (1d90 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1d5e:	4798      	blx	r3
    1d60:	4a07      	ldr	r2, [pc, #28]	; (1d80 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1d62:	490c      	ldr	r1, [pc, #48]	; (1d94 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1d64:	4809      	ldr	r0, [pc, #36]	; (1d8c <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1d66:	4b08      	ldr	r3, [pc, #32]	; (1d88 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1d68:	4798      	blx	r3
    1d6a:	bf00      	nop
    1d6c:	3708      	adds	r7, #8
    1d6e:	46bd      	mov	sp, r7
    1d70:	bd80      	pop	{r7, pc}
    1d72:	bf00      	nop
    1d74:	2000a278 	.word	0x2000a278
    1d78:	20001478 	.word	0x20001478
    1d7c:	00014471 	.word	0x00014471
    1d80:	20000000 	.word	0x20000000
    1d84:	000144b5 	.word	0x000144b5
    1d88:	000187f1 	.word	0x000187f1
    1d8c:	200014b4 	.word	0x200014b4
    1d90:	00001951 	.word	0x00001951
    1d94:	000019b5 	.word	0x000019b5

00001d98 <_GLOBAL__sub_I_ptrFlapperValveClass>:
    1d98:	b580      	push	{r7, lr}
    1d9a:	af00      	add	r7, sp, #0
    1d9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1da0:	2001      	movs	r0, #1
    1da2:	4b01      	ldr	r3, [pc, #4]	; (1da8 <_GLOBAL__sub_I_ptrFlapperValveClass+0x10>)
    1da4:	4798      	blx	r3
    1da6:	bd80      	pop	{r7, pc}
    1da8:	00001d2d 	.word	0x00001d2d

00001dac <_ZN16Interfaces_ClassC1Ev>:
#include "ALU_Class.h"
#include "Error_Labelling_Class.h"
#include "Maintenance_Tool.h"

// default constructor
Interfaces_Class::Interfaces_Class()
    1dac:	b480      	push	{r7}
    1dae:	b083      	sub	sp, #12
    1db0:	af00      	add	r7, sp, #0
    1db2:	6078      	str	r0, [r7, #4]
{
	
} //Interfaces_Class
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	4618      	mov	r0, r3
    1db8:	370c      	adds	r7, #12
    1dba:	46bd      	mov	sp, r7
    1dbc:	bc80      	pop	{r7}
    1dbe:	4770      	bx	lr

00001dc0 <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    1dc0:	b480      	push	{r7}
    1dc2:	b083      	sub	sp, #12
    1dc4:	af00      	add	r7, sp, #0
    1dc6:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	4618      	mov	r0, r3
    1dcc:	370c      	adds	r7, #12
    1dce:	46bd      	mov	sp, r7
    1dd0:	bc80      	pop	{r7}
    1dd2:	4770      	bx	lr

00001dd4 <_ZN16Interfaces_Class4InitEv>:

bool	Interfaces_Class::Init(){
    1dd4:	b580      	push	{r7, lr}
    1dd6:	b084      	sub	sp, #16
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
	size=sizeof(CommunicationRequest);
    1ddc:	687b      	ldr	r3, [r7, #4]
    1dde:	2205      	movs	r2, #5
    1de0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	result=arinc.Init();
    1de4:	4817      	ldr	r0, [pc, #92]	; (1e44 <_ZN16Interfaces_Class4InitEv+0x70>)
    1de6:	4b18      	ldr	r3, [pc, #96]	; (1e48 <_ZN16Interfaces_Class4InitEv+0x74>)
    1de8:	4798      	blx	r3
    1dea:	4603      	mov	r3, r0
    1dec:	461a      	mov	r2, r3
    1dee:	687b      	ldr	r3, [r7, #4]
    1df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (result==0x01)
    1df4:	687b      	ldr	r3, [r7, #4]
    1df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1dfa:	2b01      	cmp	r3, #1
    1dfc:	d106      	bne.n	1e0c <_ZN16Interfaces_Class4InitEv+0x38>
	{
		arinc.TrasmitSingleLabel();
    1dfe:	4811      	ldr	r0, [pc, #68]	; (1e44 <_ZN16Interfaces_Class4InitEv+0x70>)
    1e00:	4b12      	ldr	r3, [pc, #72]	; (1e4c <_ZN16Interfaces_Class4InitEv+0x78>)
    1e02:	4798      	blx	r3
		if (maintenance.IsAppConnected())
    1e04:	4812      	ldr	r0, [pc, #72]	; (1e50 <_ZN16Interfaces_Class4InitEv+0x7c>)
    1e06:	4b13      	ldr	r3, [pc, #76]	; (1e54 <_ZN16Interfaces_Class4InitEv+0x80>)
    1e08:	4798      	blx	r3
    1e0a:	e00f      	b.n	1e2c <_ZN16Interfaces_Class4InitEv+0x58>
		{
		}
	} 
	else
	{
		alu.NotifyError(kARINCINnterfaceError,result);
    1e0c:	687b      	ldr	r3, [r7, #4]
    1e0e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    1e12:	f107 030c 	add.w	r3, r7, #12
    1e16:	4611      	mov	r1, r2
    1e18:	4618      	mov	r0, r3
    1e1a:	4b0f      	ldr	r3, [pc, #60]	; (1e58 <_ZN16Interfaces_Class4InitEv+0x84>)
    1e1c:	4798      	blx	r3
    1e1e:	f107 030c 	add.w	r3, r7, #12
    1e22:	461a      	mov	r2, r3
    1e24:	2100      	movs	r1, #0
    1e26:	480d      	ldr	r0, [pc, #52]	; (1e5c <_ZN16Interfaces_Class4InitEv+0x88>)
    1e28:	4b0d      	ldr	r3, [pc, #52]	; (1e60 <_ZN16Interfaces_Class4InitEv+0x8c>)
    1e2a:	4798      	blx	r3
	}
	return result;
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1e32:	2b00      	cmp	r3, #0
    1e34:	bf14      	ite	ne
    1e36:	2301      	movne	r3, #1
    1e38:	2300      	moveq	r3, #0
    1e3a:	b2db      	uxtb	r3, r3
}
    1e3c:	4618      	mov	r0, r3
    1e3e:	3710      	adds	r7, #16
    1e40:	46bd      	mov	sp, r7
    1e42:	bd80      	pop	{r7, pc}
    1e44:	20008c20 	.word	0x20008c20
    1e48:	00012c91 	.word	0x00012c91
    1e4c:	00012fa1 	.word	0x00012fa1
    1e50:	20009fb0 	.word	0x20009fb0
    1e54:	0001869d 	.word	0x0001869d
    1e58:	000002d1 	.word	0x000002d1
    1e5c:	20000bd8 	.word	0x20000bd8
    1e60:	00000881 	.word	0x00000881

00001e64 <_ZN16Interfaces_Class18CheckCommunicationEv>:

CommunicationRequest Interfaces_Class::CheckCommunication(void)
{
    1e64:	b580      	push	{r7, lr}
    1e66:	b086      	sub	sp, #24
    1e68:	af00      	add	r7, sp, #0
    1e6a:	6078      	str	r0, [r7, #4]
    1e6c:	6039      	str	r1, [r7, #0]
	event e;
    1e6e:	f107 0308 	add.w	r3, r7, #8
    1e72:	4618      	mov	r0, r3
    1e74:	4b09      	ldr	r3, [pc, #36]	; (1e9c <_ZN16Interfaces_Class18CheckCommunicationEv+0x38>)
    1e76:	4798      	blx	r3
	CommunicationRequest	r;
	CheckInternalCommunication();
    1e78:	6838      	ldr	r0, [r7, #0]
    1e7a:	4b09      	ldr	r3, [pc, #36]	; (1ea0 <_ZN16Interfaces_Class18CheckCommunicationEv+0x3c>)
    1e7c:	4798      	blx	r3
	CheckExternalCommunication();
    1e7e:	6838      	ldr	r0, [r7, #0]
    1e80:	4b08      	ldr	r3, [pc, #32]	; (1ea4 <_ZN16Interfaces_Class18CheckCommunicationEv+0x40>)
    1e82:	4798      	blx	r3
	r=request;
    1e84:	687a      	ldr	r2, [r7, #4]
    1e86:	683b      	ldr	r3, [r7, #0]
    1e88:	3384      	adds	r3, #132	; 0x84
    1e8a:	6818      	ldr	r0, [r3, #0]
    1e8c:	6010      	str	r0, [r2, #0]
    1e8e:	791b      	ldrb	r3, [r3, #4]
    1e90:	7113      	strb	r3, [r2, #4]
	
	return	r;
    1e92:	bf00      	nop
}
    1e94:	6878      	ldr	r0, [r7, #4]
    1e96:	3718      	adds	r7, #24
    1e98:	46bd      	mov	sp, r7
    1e9a:	bd80      	pop	{r7, pc}
    1e9c:	000002ed 	.word	0x000002ed
    1ea0:	00001f89 	.word	0x00001f89
    1ea4:	00001fc9 	.word	0x00001fc9

00001ea8 <_ZN16Interfaces_Class22IsCommunicationRequestEv>:

bool	Interfaces_Class::IsCommunicationRequest(void){
    1ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1eac:	b088      	sub	sp, #32
    1eae:	af00      	add	r7, sp, #0
    1eb0:	60f8      	str	r0, [r7, #12]
	memcpy(arr,(void*)&request,size);
	for (i = 0; i < size; i++)
	{
		result|=arr[i];
	}
	return	result>0;
    1eb2:	4668      	mov	r0, sp
    1eb4:	4680      	mov	r8, r0
	uint8_t arr[size];
    1eb6:	68f8      	ldr	r0, [r7, #12]
    1eb8:	f890 0089 	ldrb.w	r0, [r0, #137]	; 0x89
    1ebc:	3801      	subs	r0, #1
    1ebe:	61b8      	str	r0, [r7, #24]
    1ec0:	4605      	mov	r5, r0
    1ec2:	3501      	adds	r5, #1
    1ec4:	f04f 0600 	mov.w	r6, #0
    1ec8:	00f2      	lsls	r2, r6, #3
    1eca:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
    1ece:	00e9      	lsls	r1, r5, #3
    1ed0:	4602      	mov	r2, r0
    1ed2:	3201      	adds	r2, #1
    1ed4:	4611      	mov	r1, r2
    1ed6:	f04f 0200 	mov.w	r2, #0
    1eda:	00d4      	lsls	r4, r2, #3
    1edc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
    1ee0:	00cb      	lsls	r3, r1, #3
    1ee2:	4603      	mov	r3, r0
    1ee4:	3301      	adds	r3, #1
    1ee6:	3307      	adds	r3, #7
    1ee8:	08db      	lsrs	r3, r3, #3
    1eea:	00db      	lsls	r3, r3, #3
    1eec:	ebad 0d03 	sub.w	sp, sp, r3
    1ef0:	466b      	mov	r3, sp
    1ef2:	3300      	adds	r3, #0
    1ef4:	617b      	str	r3, [r7, #20]
	request=CheckCommunication();
    1ef6:	68fc      	ldr	r4, [r7, #12]
    1ef8:	463b      	mov	r3, r7
    1efa:	68f9      	ldr	r1, [r7, #12]
    1efc:	4618      	mov	r0, r3
    1efe:	4b20      	ldr	r3, [pc, #128]	; (1f80 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0xd8>)
    1f00:	4798      	blx	r3
    1f02:	f104 0384 	add.w	r3, r4, #132	; 0x84
    1f06:	463a      	mov	r2, r7
    1f08:	6810      	ldr	r0, [r2, #0]
    1f0a:	6018      	str	r0, [r3, #0]
    1f0c:	7912      	ldrb	r2, [r2, #4]
    1f0e:	711a      	strb	r2, [r3, #4]
	uint8_t result=0;
    1f10:	2300      	movs	r3, #0
    1f12:	77fb      	strb	r3, [r7, #31]
	memcpy(arr,(void*)&request,size);
    1f14:	6978      	ldr	r0, [r7, #20]
    1f16:	68fb      	ldr	r3, [r7, #12]
    1f18:	f103 0184 	add.w	r1, r3, #132	; 0x84
    1f1c:	68fb      	ldr	r3, [r7, #12]
    1f1e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
    1f22:	461a      	mov	r2, r3
    1f24:	4b17      	ldr	r3, [pc, #92]	; (1f84 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0xdc>)
    1f26:	4798      	blx	r3
	for (i = 0; i < size; i++)
    1f28:	68fb      	ldr	r3, [r7, #12]
    1f2a:	2200      	movs	r2, #0
    1f2c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    1f30:	68fb      	ldr	r3, [r7, #12]
    1f32:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
    1f36:	461a      	mov	r2, r3
    1f38:	68fb      	ldr	r3, [r7, #12]
    1f3a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
    1f3e:	429a      	cmp	r2, r3
    1f40:	da11      	bge.n	1f66 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0xbe>
		result|=arr[i];
    1f42:	68fb      	ldr	r3, [r7, #12]
    1f44:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
    1f48:	461a      	mov	r2, r3
    1f4a:	697b      	ldr	r3, [r7, #20]
    1f4c:	5c9a      	ldrb	r2, [r3, r2]
    1f4e:	7ffb      	ldrb	r3, [r7, #31]
    1f50:	4313      	orrs	r3, r2
    1f52:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i < size; i++)
    1f54:	68fb      	ldr	r3, [r7, #12]
    1f56:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
    1f5a:	3301      	adds	r3, #1
    1f5c:	b2da      	uxtb	r2, r3
    1f5e:	68fb      	ldr	r3, [r7, #12]
    1f60:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    1f64:	e7e4      	b.n	1f30 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x88>
	return	result>0;
    1f66:	7ffb      	ldrb	r3, [r7, #31]
    1f68:	2b00      	cmp	r3, #0
    1f6a:	bfcc      	ite	gt
    1f6c:	2301      	movgt	r3, #1
    1f6e:	2300      	movle	r3, #0
    1f70:	b2db      	uxtb	r3, r3
    1f72:	46c5      	mov	sp, r8
}
    1f74:	4618      	mov	r0, r3
    1f76:	3720      	adds	r7, #32
    1f78:	46bd      	mov	sp, r7
    1f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f7e:	bf00      	nop
    1f80:	00001e65 	.word	0x00001e65
    1f84:	0001af55 	.word	0x0001af55

00001f88 <_ZN16Interfaces_Class26CheckInternalCommunicationEv>:

uint32_t Interfaces_Class::CheckInternalCommunication(void)
{
    1f88:	b580      	push	{r7, lr}
    1f8a:	b084      	sub	sp, #16
    1f8c:	af00      	add	r7, sp, #0
    1f8e:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1f90:	2300      	movs	r3, #0
    1f92:	60fb      	str	r3, [r7, #12]
	request.internRequest.I2CExpanderGotMessage=CheckI2CExpander(1);
    1f94:	2101      	movs	r1, #1
    1f96:	6878      	ldr	r0, [r7, #4]
    1f98:	4b09      	ldr	r3, [pc, #36]	; (1fc0 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1f9a:	4798      	blx	r3
    1f9c:	4603      	mov	r3, r0
    1f9e:	461a      	mov	r2, r3
    1fa0:	687b      	ldr	r3, [r7, #4]
    1fa2:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	request.internRequest.LTC2983GotMessage=CheckTemperatures();
    1fa6:	6878      	ldr	r0, [r7, #4]
    1fa8:	4b06      	ldr	r3, [pc, #24]	; (1fc4 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x3c>)
    1faa:	4798      	blx	r3
    1fac:	4603      	mov	r3, r0
    1fae:	461a      	mov	r2, r3
    1fb0:	687b      	ldr	r3, [r7, #4]
    1fb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	return	0;
    1fb6:	2300      	movs	r3, #0
}
    1fb8:	4618      	mov	r0, r3
    1fba:	3710      	adds	r7, #16
    1fbc:	46bd      	mov	sp, r7
    1fbe:	bd80      	pop	{r7, pc}
    1fc0:	00002031 	.word	0x00002031
    1fc4:	000020ed 	.word	0x000020ed

00001fc8 <_ZN16Interfaces_Class26CheckExternalCommunicationEv>:
uint32_t Interfaces_Class::CheckExternalCommunication(void)
{
    1fc8:	b580      	push	{r7, lr}
    1fca:	b084      	sub	sp, #16
    1fcc:	af00      	add	r7, sp, #0
    1fce:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1fd0:	2300      	movs	r3, #0
    1fd2:	60fb      	str	r3, [r7, #12]

	request.externRequest.arinc1GotMessage=arinc.newMessageR1;
    1fd4:	4b12      	ldr	r3, [pc, #72]	; (2020 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x58>)
    1fd6:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
    1fda:	b2da      	uxtb	r2, r3
    1fdc:	687b      	ldr	r3, [r7, #4]
    1fde:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	if (arinc.newMessageR1)
    1fe2:	4b0f      	ldr	r3, [pc, #60]	; (2020 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x58>)
    1fe4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
    1fe8:	b2db      	uxtb	r3, r3
    1fea:	2b00      	cmp	r3, #0
    1fec:	d004      	beq.n	1ff8 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x30>
	{
		alu.PrepareNewTask(kALUTaskReadARINCR1);
    1fee:	2200      	movs	r2, #0
    1ff0:	2103      	movs	r1, #3
    1ff2:	480c      	ldr	r0, [pc, #48]	; (2024 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x5c>)
    1ff4:	4b0c      	ldr	r3, [pc, #48]	; (2028 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
    1ff6:	4798      	blx	r3
	}
	request.externRequest.arinc1GotMessage=arinc.newMessageR2;
    1ff8:	4b09      	ldr	r3, [pc, #36]	; (2020 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x58>)
    1ffa:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
    1ffe:	b2da      	uxtb	r2, r3
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	request.externRequest.USBGotMessage=CheckUSBInterface();
    2006:	6878      	ldr	r0, [r7, #4]
    2008:	4b08      	ldr	r3, [pc, #32]	; (202c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    200a:	4798      	blx	r3
    200c:	4603      	mov	r3, r0
    200e:	461a      	mov	r2, r3
    2010:	687b      	ldr	r3, [r7, #4]
    2012:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	return	0;
    2016:	2300      	movs	r3, #0
}
    2018:	4618      	mov	r0, r3
    201a:	3710      	adds	r7, #16
    201c:	46bd      	mov	sp, r7
    201e:	bd80      	pop	{r7, pc}
    2020:	20008c20 	.word	0x20008c20
    2024:	20000bd8 	.word	0x20000bd8
    2028:	000008ad 	.word	0x000008ad
    202c:	00002069 	.word	0x00002069

00002030 <_ZN16Interfaces_Class16CheckI2CExpanderEh>:
bool	Interfaces_Class::CheckI2CExpander(uint8_t add){
    2030:	b580      	push	{r7, lr}
    2032:	b082      	sub	sp, #8
    2034:	af00      	add	r7, sp, #0
    2036:	6078      	str	r0, [r7, #4]
    2038:	460b      	mov	r3, r1
    203a:	70fb      	strb	r3, [r7, #3]
		if (mcp.hasChanged)
    203c:	4b08      	ldr	r3, [pc, #32]	; (2060 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    203e:	785b      	ldrb	r3, [r3, #1]
    2040:	b2db      	uxtb	r3, r3
    2042:	2b00      	cmp	r3, #0
    2044:	d005      	beq.n	2052 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x22>
		{
			mcp.SavePorts();
    2046:	4806      	ldr	r0, [pc, #24]	; (2060 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    2048:	4b06      	ldr	r3, [pc, #24]	; (2064 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x34>)
    204a:	4798      	blx	r3
			mcp.hasChanged=false;
    204c:	4b04      	ldr	r3, [pc, #16]	; (2060 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    204e:	2200      	movs	r2, #0
    2050:	705a      	strb	r2, [r3, #1]
		}
		return	mcp.hasChanged;
    2052:	4b03      	ldr	r3, [pc, #12]	; (2060 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    2054:	785b      	ldrb	r3, [r3, #1]
    2056:	b2db      	uxtb	r3, r3
}
    2058:	4618      	mov	r0, r3
    205a:	3708      	adds	r7, #8
    205c:	46bd      	mov	sp, r7
    205e:	bd80      	pop	{r7, pc}
    2060:	200097cc 	.word	0x200097cc
    2064:	00014ae1 	.word	0x00014ae1

00002068 <_ZN16Interfaces_Class17CheckUSBInterfaceEv>:
bool	Interfaces_Class::CheckUSBInterface(void){
    2068:	b580      	push	{r7, lr}
    206a:	b082      	sub	sp, #8
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
		if (usb.connected)
    2070:	4b13      	ldr	r3, [pc, #76]	; (20c0 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    2072:	7c1b      	ldrb	r3, [r3, #16]
    2074:	b2db      	uxtb	r3, r3
    2076:	2b00      	cmp	r3, #0
    2078:	d01b      	beq.n	20b2 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x4a>
		{
			if (maintenance.IsAppConnected())
    207a:	4812      	ldr	r0, [pc, #72]	; (20c4 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x5c>)
    207c:	4b12      	ldr	r3, [pc, #72]	; (20c8 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x60>)
    207e:	4798      	blx	r3
    2080:	4603      	mov	r3, r0
    2082:	2b00      	cmp	r3, #0
    2084:	d009      	beq.n	209a <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x32>
			{
				usb<<"Maintenance Tool Locked"<<NEWLINE;
    2086:	4911      	ldr	r1, [pc, #68]	; (20cc <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x64>)
    2088:	480d      	ldr	r0, [pc, #52]	; (20c0 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    208a:	4b11      	ldr	r3, [pc, #68]	; (20d0 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x68>)
    208c:	4798      	blx	r3
    208e:	4603      	mov	r3, r0
    2090:	4910      	ldr	r1, [pc, #64]	; (20d4 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    2092:	4618      	mov	r0, r3
    2094:	4b10      	ldr	r3, [pc, #64]	; (20d8 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    2096:	4798      	blx	r3
    2098:	e008      	b.n	20ac <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x44>
			} 
			else
			{
				usb<<"Remote operation Disabled"<<NEWLINE;
    209a:	4910      	ldr	r1, [pc, #64]	; (20dc <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x74>)
    209c:	4808      	ldr	r0, [pc, #32]	; (20c0 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    209e:	4b10      	ldr	r3, [pc, #64]	; (20e0 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x78>)
    20a0:	4798      	blx	r3
    20a2:	4603      	mov	r3, r0
    20a4:	490b      	ldr	r1, [pc, #44]	; (20d4 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    20a6:	4618      	mov	r0, r3
    20a8:	4b0b      	ldr	r3, [pc, #44]	; (20d8 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    20aa:	4798      	blx	r3
			}
			hvac.PrintState();
    20ac:	480d      	ldr	r0, [pc, #52]	; (20e4 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x7c>)
    20ae:	4b0e      	ldr	r3, [pc, #56]	; (20e8 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x80>)
    20b0:	4798      	blx	r3
		}else{
						
		}
		return	usb.connected;
    20b2:	4b03      	ldr	r3, [pc, #12]	; (20c0 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    20b4:	7c1b      	ldrb	r3, [r3, #16]
    20b6:	b2db      	uxtb	r3, r3
}
    20b8:	4618      	mov	r0, r3
    20ba:	3708      	adds	r7, #8
    20bc:	46bd      	mov	sp, r7
    20be:	bd80      	pop	{r7, pc}
    20c0:	20009e88 	.word	0x20009e88
    20c4:	20009fb0 	.word	0x20009fb0
    20c8:	0001869d 	.word	0x0001869d
    20cc:	0001f174 	.word	0x0001f174
    20d0:	0000219d 	.word	0x0000219d
    20d4:	0001f18c 	.word	0x0001f18c
    20d8:	00000acd 	.word	0x00000acd
    20dc:	0001f190 	.word	0x0001f190
    20e0:	000021bd 	.word	0x000021bd
    20e4:	2000804c 	.word	0x2000804c
    20e8:	00000fcd 	.word	0x00000fcd

000020ec <_ZN16Interfaces_Class17CheckTemperaturesEv>:

bool	Interfaces_Class::CheckTemperatures(void){
    20ec:	b580      	push	{r7, lr}
    20ee:	b084      	sub	sp, #16
    20f0:	af00      	add	r7, sp, #0
    20f2:	6078      	str	r0, [r7, #4]
	bool result(false);
    20f4:	2300      	movs	r3, #0
    20f6:	73fb      	strb	r3, [r7, #15]
	if (temperatures.IsConversionFinished())
    20f8:	480c      	ldr	r0, [pc, #48]	; (212c <_ZN16Interfaces_Class17CheckTemperaturesEv+0x40>)
    20fa:	4b0d      	ldr	r3, [pc, #52]	; (2130 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x44>)
    20fc:	4798      	blx	r3
    20fe:	4603      	mov	r3, r0
    2100:	2b00      	cmp	r3, #0
    2102:	d00e      	beq.n	2122 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x36>
	{
		
	
		if (temperatures.faultData==VALID_TEMPERATURE)
    2104:	4b09      	ldr	r3, [pc, #36]	; (212c <_ZN16Interfaces_Class17CheckTemperaturesEv+0x40>)
    2106:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    210a:	2b01      	cmp	r3, #1
    210c:	d106      	bne.n	211c <_ZN16Interfaces_Class17CheckTemperaturesEv+0x30>
		{
				alu.PrepareNewTask(kALUTaskUpdateTemperatures);
    210e:	2200      	movs	r2, #0
    2110:	2108      	movs	r1, #8
    2112:	4808      	ldr	r0, [pc, #32]	; (2134 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x48>)
    2114:	4b08      	ldr	r3, [pc, #32]	; (2138 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x4c>)
    2116:	4798      	blx	r3
				result=true;
    2118:	2301      	movs	r3, #1
    211a:	73fb      	strb	r3, [r7, #15]
		}
			temperatures.StartOneConversion();
    211c:	4803      	ldr	r0, [pc, #12]	; (212c <_ZN16Interfaces_Class17CheckTemperaturesEv+0x40>)
    211e:	4b07      	ldr	r3, [pc, #28]	; (213c <_ZN16Interfaces_Class17CheckTemperaturesEv+0x50>)
    2120:	4798      	blx	r3
	
	} 
	else
	{
	}
	return	result;
    2122:	7bfb      	ldrb	r3, [r7, #15]
}
    2124:	4618      	mov	r0, r3
    2126:	3710      	adds	r7, #16
    2128:	46bd      	mov	sp, r7
    212a:	bd80      	pop	{r7, pc}
    212c:	20009820 	.word	0x20009820
    2130:	00014e19 	.word	0x00014e19
    2134:	20000bd8 	.word	0x20000bd8
    2138:	000008ad 	.word	0x000008ad
    213c:	00014dcd 	.word	0x00014dcd

00002140 <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:
	{
		
	}
	return	arinc.newMessageR1||arinc.newMessageR2;
}
uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
    2140:	b490      	push	{r4, r7}
    2142:	b084      	sub	sp, #16
    2144:	af00      	add	r7, sp, #0
    2146:	6078      	str	r0, [r7, #4]
    2148:	6039      	str	r1, [r7, #0]
	s=status;
    214a:	683a      	ldr	r2, [r7, #0]
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	4614      	mov	r4, r2
    2150:	336c      	adds	r3, #108	; 0x6c
    2152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
    2158:	683b      	ldr	r3, [r7, #0]
    215a:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    215c:	2300      	movs	r3, #0
    215e:	60bb      	str	r3, [r7, #8]
    2160:	68bb      	ldr	r3, [r7, #8]
    2162:	2b08      	cmp	r3, #8
    2164:	d812      	bhi.n	218c <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x4c>
	{
		s.rawStatus+=(*p)&(0x01<<i);
    2166:	683b      	ldr	r3, [r7, #0]
    2168:	68da      	ldr	r2, [r3, #12]
    216a:	68fb      	ldr	r3, [r7, #12]
    216c:	681b      	ldr	r3, [r3, #0]
    216e:	2001      	movs	r0, #1
    2170:	68b9      	ldr	r1, [r7, #8]
    2172:	fa00 f101 	lsl.w	r1, r0, r1
    2176:	400b      	ands	r3, r1
    2178:	441a      	add	r2, r3
    217a:	683b      	ldr	r3, [r7, #0]
    217c:	60da      	str	r2, [r3, #12]
		p++;
    217e:	68fb      	ldr	r3, [r7, #12]
    2180:	3304      	adds	r3, #4
    2182:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    2184:	68bb      	ldr	r3, [r7, #8]
    2186:	3301      	adds	r3, #1
    2188:	60bb      	str	r3, [r7, #8]
    218a:	e7e9      	b.n	2160 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x20>
	}
	return	status.rawStatus;
    218c:	687b      	ldr	r3, [r7, #4]
    218e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
    2190:	4618      	mov	r0, r3
    2192:	3710      	adds	r7, #16
    2194:	46bd      	mov	sp, r7
    2196:	bc90      	pop	{r4, r7}
    2198:	4770      	bx	lr
	...

0000219c <_ZlsIA24_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    219c:	b580      	push	{r7, lr}
    219e:	b082      	sub	sp, #8
    21a0:	af00      	add	r7, sp, #0
    21a2:	6078      	str	r0, [r7, #4]
    21a4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    21a6:	6839      	ldr	r1, [r7, #0]
    21a8:	6878      	ldr	r0, [r7, #4]
    21aa:	4b03      	ldr	r3, [pc, #12]	; (21b8 <_ZlsIA24_cER5PrintS2_RKT_+0x1c>)
    21ac:	4798      	blx	r3
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	4618      	mov	r0, r3
    21b2:	3708      	adds	r7, #8
    21b4:	46bd      	mov	sp, r7
    21b6:	bd80      	pop	{r7, pc}
    21b8:	00017309 	.word	0x00017309

000021bc <_ZlsIA26_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    21bc:	b580      	push	{r7, lr}
    21be:	b082      	sub	sp, #8
    21c0:	af00      	add	r7, sp, #0
    21c2:	6078      	str	r0, [r7, #4]
    21c4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    21c6:	6839      	ldr	r1, [r7, #0]
    21c8:	6878      	ldr	r0, [r7, #4]
    21ca:	4b03      	ldr	r3, [pc, #12]	; (21d8 <_ZlsIA26_cER5PrintS2_RKT_+0x1c>)
    21cc:	4798      	blx	r3
    21ce:	687b      	ldr	r3, [r7, #4]
    21d0:	4618      	mov	r0, r3
    21d2:	3708      	adds	r7, #8
    21d4:	46bd      	mov	sp, r7
    21d6:	bd80      	pop	{r7, pc}
    21d8:	00017309 	.word	0x00017309

000021dc <_Z41__static_initialization_and_destruction_0ii>:

    21dc:	b580      	push	{r7, lr}
    21de:	b082      	sub	sp, #8
    21e0:	af00      	add	r7, sp, #0
    21e2:	6078      	str	r0, [r7, #4]
    21e4:	6039      	str	r1, [r7, #0]
    21e6:	687b      	ldr	r3, [r7, #4]
    21e8:	2b01      	cmp	r3, #1
    21ea:	d10c      	bne.n	2206 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    21ec:	683b      	ldr	r3, [r7, #0]
    21ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
    21f2:	4293      	cmp	r3, r2
    21f4:	d107      	bne.n	2206 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    21f6:	4806      	ldr	r0, [pc, #24]	; (2210 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    21f8:	4b06      	ldr	r3, [pc, #24]	; (2214 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    21fa:	4798      	blx	r3
    21fc:	4a06      	ldr	r2, [pc, #24]	; (2218 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    21fe:	4907      	ldr	r1, [pc, #28]	; (221c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2200:	4803      	ldr	r0, [pc, #12]	; (2210 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2202:	4b07      	ldr	r3, [pc, #28]	; (2220 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2204:	4798      	blx	r3
    2206:	bf00      	nop
    2208:	3708      	adds	r7, #8
    220a:	46bd      	mov	sp, r7
    220c:	bd80      	pop	{r7, pc}
    220e:	bf00      	nop
    2210:	2000156c 	.word	0x2000156c
    2214:	00001dad 	.word	0x00001dad
    2218:	20000000 	.word	0x20000000
    221c:	00001dc1 	.word	0x00001dc1
    2220:	000187f1 	.word	0x000187f1

00002224 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    2224:	b580      	push	{r7, lr}
    2226:	af00      	add	r7, sp, #0
    2228:	f64f 71ff 	movw	r1, #65535	; 0xffff
    222c:	2001      	movs	r0, #1
    222e:	4b01      	ldr	r3, [pc, #4]	; (2234 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    2230:	4798      	blx	r3
    2232:	bd80      	pop	{r7, pc}
    2234:	000021dd 	.word	0x000021dd

00002238 <main>:
		
	}
}

int main(void)
{
    2238:	b580      	push	{r7, lr}
    223a:	b082      	sub	sp, #8
    223c:	af00      	add	r7, sp, #0
	atmel_start_init();
    223e:	4b40      	ldr	r3, [pc, #256]	; (2340 <main+0x108>)
    2240:	4798      	blx	r3
//  	uint32_t p=pwm_enable(&LIVE_PULSE);
//  	while (1);

	usb.Init();
    2242:	4840      	ldr	r0, [pc, #256]	; (2344 <main+0x10c>)
    2244:	4b40      	ldr	r3, [pc, #256]	; (2348 <main+0x110>)
    2246:	4798      	blx	r3
	delay_ms(100);
    2248:	2064      	movs	r0, #100	; 0x64
    224a:	4b40      	ldr	r3, [pc, #256]	; (234c <main+0x114>)
    224c:	4798      	blx	r3
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    224e:	4940      	ldr	r1, [pc, #256]	; (2350 <main+0x118>)
    2250:	483c      	ldr	r0, [pc, #240]	; (2344 <main+0x10c>)
    2252:	4b40      	ldr	r3, [pc, #256]	; (2354 <main+0x11c>)
    2254:	4798      	blx	r3
    2256:	4603      	mov	r3, r0
    2258:	493d      	ldr	r1, [pc, #244]	; (2350 <main+0x118>)
    225a:	4618      	mov	r0, r3
    225c:	4b3d      	ldr	r3, [pc, #244]	; (2354 <main+0x11c>)
    225e:	4798      	blx	r3
    2260:	4603      	mov	r3, r0
    2262:	493d      	ldr	r1, [pc, #244]	; (2358 <main+0x120>)
    2264:	4618      	mov	r0, r3
    2266:	4b3d      	ldr	r3, [pc, #244]	; (235c <main+0x124>)
    2268:	4798      	blx	r3
    226a:	4603      	mov	r3, r0
    226c:	4938      	ldr	r1, [pc, #224]	; (2350 <main+0x118>)
    226e:	4618      	mov	r0, r3
    2270:	4b38      	ldr	r3, [pc, #224]	; (2354 <main+0x11c>)
    2272:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    2274:	493a      	ldr	r1, [pc, #232]	; (2360 <main+0x128>)
    2276:	4833      	ldr	r0, [pc, #204]	; (2344 <main+0x10c>)
    2278:	4b3a      	ldr	r3, [pc, #232]	; (2364 <main+0x12c>)
    227a:	4798      	blx	r3
    227c:	4603      	mov	r3, r0
    227e:	493a      	ldr	r1, [pc, #232]	; (2368 <main+0x130>)
    2280:	4618      	mov	r0, r3
    2282:	4b38      	ldr	r3, [pc, #224]	; (2364 <main+0x12c>)
    2284:	4798      	blx	r3
    2286:	4603      	mov	r3, r0
    2288:	4938      	ldr	r1, [pc, #224]	; (236c <main+0x134>)
    228a:	4618      	mov	r0, r3
    228c:	4b38      	ldr	r3, [pc, #224]	; (2370 <main+0x138>)
    228e:	4798      	blx	r3
    2290:	4603      	mov	r3, r0
    2292:	4938      	ldr	r1, [pc, #224]	; (2374 <main+0x13c>)
    2294:	4618      	mov	r0, r3
    2296:	4b38      	ldr	r3, [pc, #224]	; (2378 <main+0x140>)
    2298:	4798      	blx	r3
    229a:	4603      	mov	r3, r0
    229c:	492c      	ldr	r1, [pc, #176]	; (2350 <main+0x118>)
    229e:	4618      	mov	r0, r3
    22a0:	4b2c      	ldr	r3, [pc, #176]	; (2354 <main+0x11c>)
    22a2:	4798      	blx	r3
    22a4:	4603      	mov	r3, r0
    22a6:	492a      	ldr	r1, [pc, #168]	; (2350 <main+0x118>)
    22a8:	4618      	mov	r0, r3
    22aa:	4b2a      	ldr	r3, [pc, #168]	; (2354 <main+0x11c>)
    22ac:	4798      	blx	r3
	//QSPIDriverTest();
	memory.Init();
    22ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    22b2:	4832      	ldr	r0, [pc, #200]	; (237c <main+0x144>)
    22b4:	4b32      	ldr	r3, [pc, #200]	; (2380 <main+0x148>)
    22b6:	4798      	blx	r3
	alu.Init();
    22b8:	4832      	ldr	r0, [pc, #200]	; (2384 <main+0x14c>)
    22ba:	4b33      	ldr	r3, [pc, #204]	; (2388 <main+0x150>)
    22bc:	4798      	blx	r3
	alu.RunController();
    22be:	4831      	ldr	r0, [pc, #196]	; (2384 <main+0x14c>)
    22c0:	4b32      	ldr	r3, [pc, #200]	; (238c <main+0x154>)
    22c2:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    22c4:	4932      	ldr	r1, [pc, #200]	; (2390 <main+0x158>)
    22c6:	481f      	ldr	r0, [pc, #124]	; (2344 <main+0x10c>)
    22c8:	4b32      	ldr	r3, [pc, #200]	; (2394 <main+0x15c>)
    22ca:	4798      	blx	r3
    22cc:	4603      	mov	r3, r0
    22ce:	4920      	ldr	r1, [pc, #128]	; (2350 <main+0x118>)
    22d0:	4618      	mov	r0, r3
    22d2:	4b20      	ldr	r3, [pc, #128]	; (2354 <main+0x11c>)
    22d4:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    22d6:	482b      	ldr	r0, [pc, #172]	; (2384 <main+0x14c>)
    22d8:	4b2f      	ldr	r3, [pc, #188]	; (2398 <main+0x160>)
    22da:	4798      	blx	r3
    22dc:	4603      	mov	r3, r0
    22de:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    22e0:	492e      	ldr	r1, [pc, #184]	; (239c <main+0x164>)
    22e2:	4818      	ldr	r0, [pc, #96]	; (2344 <main+0x10c>)
    22e4:	4b2e      	ldr	r3, [pc, #184]	; (23a0 <main+0x168>)
    22e6:	4798      	blx	r3
    22e8:	4602      	mov	r2, r0
    22ea:	1dfb      	adds	r3, r7, #7
    22ec:	4619      	mov	r1, r3
    22ee:	4610      	mov	r0, r2
    22f0:	4b2c      	ldr	r3, [pc, #176]	; (23a4 <main+0x16c>)
    22f2:	4798      	blx	r3
    22f4:	4603      	mov	r3, r0
    22f6:	4916      	ldr	r1, [pc, #88]	; (2350 <main+0x118>)
    22f8:	4618      	mov	r0, r3
    22fa:	4b16      	ldr	r3, [pc, #88]	; (2354 <main+0x11c>)
    22fc:	4798      	blx	r3
	if (!pBit)
    22fe:	482a      	ldr	r0, [pc, #168]	; (23a8 <main+0x170>)
    2300:	4b2a      	ldr	r3, [pc, #168]	; (23ac <main+0x174>)
    2302:	4798      	blx	r3
    2304:	4603      	mov	r3, r0
    2306:	f083 0301 	eor.w	r3, r3, #1
    230a:	b2db      	uxtb	r3, r3
    230c:	2b00      	cmp	r3, #0
    230e:	d004      	beq.n	231a <main+0xe2>
	{
		hvac.Stop(0);
    2310:	2100      	movs	r1, #0
    2312:	4827      	ldr	r0, [pc, #156]	; (23b0 <main+0x178>)
    2314:	4b27      	ldr	r3, [pc, #156]	; (23b4 <main+0x17c>)
    2316:	4798      	blx	r3
    2318:	e003      	b.n	2322 <main+0xea>
	} 
	else
	{
		hvac.Start(0);
    231a:	2100      	movs	r1, #0
    231c:	4824      	ldr	r0, [pc, #144]	; (23b0 <main+0x178>)
    231e:	4b26      	ldr	r3, [pc, #152]	; (23b8 <main+0x180>)
    2320:	4798      	blx	r3
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
    2322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2326:	4b09      	ldr	r3, [pc, #36]	; (234c <main+0x114>)
    2328:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    232a:	490b      	ldr	r1, [pc, #44]	; (2358 <main+0x120>)
    232c:	4805      	ldr	r0, [pc, #20]	; (2344 <main+0x10c>)
    232e:	4b0b      	ldr	r3, [pc, #44]	; (235c <main+0x124>)
    2330:	4798      	blx	r3
    2332:	4603      	mov	r3, r0
    2334:	4906      	ldr	r1, [pc, #24]	; (2350 <main+0x118>)
    2336:	4618      	mov	r0, r3
    2338:	4b06      	ldr	r3, [pc, #24]	; (2354 <main+0x11c>)
    233a:	4798      	blx	r3
		delay_ms(1000);
    233c:	e7f1      	b.n	2322 <main+0xea>
    233e:	bf00      	nop
    2340:	0000435d 	.word	0x0000435d
    2344:	20009e88 	.word	0x20009e88
    2348:	00016e99 	.word	0x00016e99
    234c:	00006021 	.word	0x00006021
    2350:	0001f1f0 	.word	0x0001f1f0
    2354:	00000acd 	.word	0x00000acd
    2358:	0001f228 	.word	0x0001f228
    235c:	000023bd 	.word	0x000023bd
    2360:	0001f24c 	.word	0x0001f24c
    2364:	000023dd 	.word	0x000023dd
    2368:	0001f258 	.word	0x0001f258
    236c:	0001f264 	.word	0x0001f264
    2370:	000023fd 	.word	0x000023fd
    2374:	0001f26c 	.word	0x0001f26c
    2378:	0000241d 	.word	0x0000241d
    237c:	200015f8 	.word	0x200015f8
    2380:	0000256d 	.word	0x0000256d
    2384:	20000bd8 	.word	0x20000bd8
    2388:	00000395 	.word	0x00000395
    238c:	000004e9 	.word	0x000004e9
    2390:	0001f278 	.word	0x0001f278
    2394:	0000243d 	.word	0x0000243d
    2398:	00000679 	.word	0x00000679
    239c:	0001f290 	.word	0x0001f290
    23a0:	0000245d 	.word	0x0000245d
    23a4:	00000aa5 	.word	0x00000aa5
    23a8:	20008034 	.word	0x20008034
    23ac:	00002cbd 	.word	0x00002cbd
    23b0:	2000804c 	.word	0x2000804c
    23b4:	00003d11 	.word	0x00003d11
    23b8:	00003209 	.word	0x00003209

000023bc <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    23bc:	b580      	push	{r7, lr}
    23be:	b082      	sub	sp, #8
    23c0:	af00      	add	r7, sp, #0
    23c2:	6078      	str	r0, [r7, #4]
    23c4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    23c6:	6839      	ldr	r1, [r7, #0]
    23c8:	6878      	ldr	r0, [r7, #4]
    23ca:	4b03      	ldr	r3, [pc, #12]	; (23d8 <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    23cc:	4798      	blx	r3
    23ce:	687b      	ldr	r3, [r7, #4]
    23d0:	4618      	mov	r0, r3
    23d2:	3708      	adds	r7, #8
    23d4:	46bd      	mov	sp, r7
    23d6:	bd80      	pop	{r7, pc}
    23d8:	00017309 	.word	0x00017309

000023dc <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    23dc:	b580      	push	{r7, lr}
    23de:	b082      	sub	sp, #8
    23e0:	af00      	add	r7, sp, #0
    23e2:	6078      	str	r0, [r7, #4]
    23e4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    23e6:	6839      	ldr	r1, [r7, #0]
    23e8:	6878      	ldr	r0, [r7, #4]
    23ea:	4b03      	ldr	r3, [pc, #12]	; (23f8 <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    23ec:	4798      	blx	r3
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	4618      	mov	r0, r3
    23f2:	3708      	adds	r7, #8
    23f4:	46bd      	mov	sp, r7
    23f6:	bd80      	pop	{r7, pc}
    23f8:	00017309 	.word	0x00017309

000023fc <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    23fc:	b580      	push	{r7, lr}
    23fe:	b082      	sub	sp, #8
    2400:	af00      	add	r7, sp, #0
    2402:	6078      	str	r0, [r7, #4]
    2404:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2406:	6839      	ldr	r1, [r7, #0]
    2408:	6878      	ldr	r0, [r7, #4]
    240a:	4b03      	ldr	r3, [pc, #12]	; (2418 <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    240c:	4798      	blx	r3
    240e:	687b      	ldr	r3, [r7, #4]
    2410:	4618      	mov	r0, r3
    2412:	3708      	adds	r7, #8
    2414:	46bd      	mov	sp, r7
    2416:	bd80      	pop	{r7, pc}
    2418:	00017309 	.word	0x00017309

0000241c <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    241c:	b580      	push	{r7, lr}
    241e:	b082      	sub	sp, #8
    2420:	af00      	add	r7, sp, #0
    2422:	6078      	str	r0, [r7, #4]
    2424:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2426:	6839      	ldr	r1, [r7, #0]
    2428:	6878      	ldr	r0, [r7, #4]
    242a:	4b03      	ldr	r3, [pc, #12]	; (2438 <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    242c:	4798      	blx	r3
    242e:	687b      	ldr	r3, [r7, #4]
    2430:	4618      	mov	r0, r3
    2432:	3708      	adds	r7, #8
    2434:	46bd      	mov	sp, r7
    2436:	bd80      	pop	{r7, pc}
    2438:	00017309 	.word	0x00017309

0000243c <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    243c:	b580      	push	{r7, lr}
    243e:	b082      	sub	sp, #8
    2440:	af00      	add	r7, sp, #0
    2442:	6078      	str	r0, [r7, #4]
    2444:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2446:	6839      	ldr	r1, [r7, #0]
    2448:	6878      	ldr	r0, [r7, #4]
    244a:	4b03      	ldr	r3, [pc, #12]	; (2458 <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    244c:	4798      	blx	r3
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	4618      	mov	r0, r3
    2452:	3708      	adds	r7, #8
    2454:	46bd      	mov	sp, r7
    2456:	bd80      	pop	{r7, pc}
    2458:	00017309 	.word	0x00017309

0000245c <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    245c:	b580      	push	{r7, lr}
    245e:	b082      	sub	sp, #8
    2460:	af00      	add	r7, sp, #0
    2462:	6078      	str	r0, [r7, #4]
    2464:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2466:	6839      	ldr	r1, [r7, #0]
    2468:	6878      	ldr	r0, [r7, #4]
    246a:	4b03      	ldr	r3, [pc, #12]	; (2478 <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    246c:	4798      	blx	r3
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	4618      	mov	r0, r3
    2472:	3708      	adds	r7, #8
    2474:	46bd      	mov	sp, r7
    2476:	bd80      	pop	{r7, pc}
    2478:	00017309 	.word	0x00017309

0000247c <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
    247c:	b580      	push	{r7, lr}
    247e:	b082      	sub	sp, #8
    2480:	af00      	add	r7, sp, #0
    2482:	6078      	str	r0, [r7, #4]
    2484:	687b      	ldr	r3, [r7, #4]
    2486:	4618      	mov	r0, r3
    2488:	4b03      	ldr	r3, [pc, #12]	; (2498 <_ZN19PersistenceServicesD1Ev+0x1c>)
    248a:	4798      	blx	r3
    248c:	687b      	ldr	r3, [r7, #4]
    248e:	4618      	mov	r0, r3
    2490:	3708      	adds	r7, #8
    2492:	46bd      	mov	sp, r7
    2494:	bd80      	pop	{r7, pc}
    2496:	bf00      	nop
    2498:	000011c9 	.word	0x000011c9

0000249c <_ZN21MemoryManagment_ClassC1Ev>:
#include "MemoryManagment_Class.h"
#include "AT24MAC_Class.h"
#include "CDC_Class.h"

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
    249c:	b580      	push	{r7, lr}
    249e:	b082      	sub	sp, #8
    24a0:	af00      	add	r7, sp, #0
    24a2:	6078      	str	r0, [r7, #4]
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	4618      	mov	r0, r3
    24a8:	4b17      	ldr	r3, [pc, #92]	; (2508 <_ZN21MemoryManagment_ClassC1Ev+0x6c>)
    24aa:	4798      	blx	r3
    24ac:	687b      	ldr	r3, [r7, #4]
    24ae:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    24b2:	4618      	mov	r0, r3
    24b4:	4b15      	ldr	r3, [pc, #84]	; (250c <_ZN21MemoryManagment_ClassC1Ev+0x70>)
    24b6:	4798      	blx	r3
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
    24be:	4618      	mov	r0, r3
    24c0:	4b13      	ldr	r3, [pc, #76]	; (2510 <_ZN21MemoryManagment_ClassC1Ev+0x74>)
    24c2:	4798      	blx	r3
    24c4:	687b      	ldr	r3, [r7, #4]
    24c6:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
    24ca:	4618      	mov	r0, r3
    24cc:	4b11      	ldr	r3, [pc, #68]	; (2514 <_ZN21MemoryManagment_ClassC1Ev+0x78>)
    24ce:	4798      	blx	r3
    24d0:	687b      	ldr	r3, [r7, #4]
    24d2:	f203 7344 	addw	r3, r3, #1860	; 0x744
    24d6:	4618      	mov	r0, r3
    24d8:	4b0f      	ldr	r3, [pc, #60]	; (2518 <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
    24da:	4798      	blx	r3
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	2200      	movs	r2, #0
    24e0:	f8c3 2978 	str.w	r2, [r3, #2424]	; 0x978
{
	_currentAddress=0;
    24e4:	687b      	ldr	r3, [r7, #4]
    24e6:	2200      	movs	r2, #0
    24e8:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
	head=512;
    24ec:	687b      	ldr	r3, [r7, #4]
    24ee:	f44f 7200 	mov.w	r2, #512	; 0x200
    24f2:	f8c3 297c 	str.w	r2, [r3, #2428]	; 0x97c
	tail=0;
    24f6:	687b      	ldr	r3, [r7, #4]
    24f8:	2200      	movs	r2, #0
    24fa:	f8c3 2980 	str.w	r2, [r3, #2432]	; 0x980

	
} //MemoryManagment_Class
    24fe:	687b      	ldr	r3, [r7, #4]
    2500:	4618      	mov	r0, r3
    2502:	3708      	adds	r7, #8
    2504:	46bd      	mov	sp, r7
    2506:	bd80      	pop	{r7, pc}
    2508:	0000129d 	.word	0x0000129d
    250c:	00002d91 	.word	0x00002d91
    2510:	000014f7 	.word	0x000014f7
    2514:	0000289d 	.word	0x0000289d
    2518:	00001301 	.word	0x00001301

0000251c <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
    251c:	b580      	push	{r7, lr}
    251e:	b082      	sub	sp, #8
    2520:	af00      	add	r7, sp, #0
    2522:	6078      	str	r0, [r7, #4]
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
    252a:	4618      	mov	r0, r3
    252c:	4b0b      	ldr	r3, [pc, #44]	; (255c <_ZN21MemoryManagment_ClassD1Ev+0x40>)
    252e:	4798      	blx	r3
    2530:	687b      	ldr	r3, [r7, #4]
    2532:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
    2536:	4618      	mov	r0, r3
    2538:	4b09      	ldr	r3, [pc, #36]	; (2560 <_ZN21MemoryManagment_ClassD1Ev+0x44>)
    253a:	4798      	blx	r3
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    2542:	4618      	mov	r0, r3
    2544:	4b07      	ldr	r3, [pc, #28]	; (2564 <_ZN21MemoryManagment_ClassD1Ev+0x48>)
    2546:	4798      	blx	r3
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	4618      	mov	r0, r3
    254c:	4b06      	ldr	r3, [pc, #24]	; (2568 <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
    254e:	4798      	blx	r3
{
} //~MemoryManagment_Class
    2550:	687b      	ldr	r3, [r7, #4]
    2552:	4618      	mov	r0, r3
    2554:	3708      	adds	r7, #8
    2556:	46bd      	mov	sp, r7
    2558:	bd80      	pop	{r7, pc}
    255a:	bf00      	nop
    255c:	000028b1 	.word	0x000028b1
    2560:	0000150b 	.word	0x0000150b
    2564:	0000247d 	.word	0x0000247d
    2568:	000012cd 	.word	0x000012cd

0000256c <_ZN21MemoryManagment_Class4InitEm>:

bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
    256c:	b580      	push	{r7, lr}
    256e:	b082      	sub	sp, #8
    2570:	af00      	add	r7, sp, #0
    2572:	6078      	str	r0, [r7, #4]
    2574:	6039      	str	r1, [r7, #0]
		if (qspiFlash.Init())
    2576:	481d      	ldr	r0, [pc, #116]	; (25ec <_ZN21MemoryManagment_Class4InitEm+0x80>)
    2578:	4b1d      	ldr	r3, [pc, #116]	; (25f0 <_ZN21MemoryManagment_Class4InitEm+0x84>)
    257a:	4798      	blx	r3
    257c:	4603      	mov	r3, r0
    257e:	2b00      	cmp	r3, #0
    2580:	d009      	beq.n	2596 <_ZN21MemoryManagment_Class4InitEm+0x2a>
		{
			usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
    2582:	491c      	ldr	r1, [pc, #112]	; (25f4 <_ZN21MemoryManagment_Class4InitEm+0x88>)
    2584:	481c      	ldr	r0, [pc, #112]	; (25f8 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2586:	4b1d      	ldr	r3, [pc, #116]	; (25fc <_ZN21MemoryManagment_Class4InitEm+0x90>)
    2588:	4798      	blx	r3
    258a:	4603      	mov	r3, r0
    258c:	491c      	ldr	r1, [pc, #112]	; (2600 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    258e:	4618      	mov	r0, r3
    2590:	4b1c      	ldr	r3, [pc, #112]	; (2604 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2592:	4798      	blx	r3
    2594:	e008      	b.n	25a8 <_ZN21MemoryManagment_Class4InitEm+0x3c>
		} 
		else
		{
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
    2596:	491c      	ldr	r1, [pc, #112]	; (2608 <_ZN21MemoryManagment_Class4InitEm+0x9c>)
    2598:	4817      	ldr	r0, [pc, #92]	; (25f8 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    259a:	4b18      	ldr	r3, [pc, #96]	; (25fc <_ZN21MemoryManagment_Class4InitEm+0x90>)
    259c:	4798      	blx	r3
    259e:	4603      	mov	r3, r0
    25a0:	4917      	ldr	r1, [pc, #92]	; (2600 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    25a2:	4618      	mov	r0, r3
    25a4:	4b17      	ldr	r3, [pc, #92]	; (2604 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    25a6:	4798      	blx	r3
		}
		if (eeprom.Init())
    25a8:	4818      	ldr	r0, [pc, #96]	; (260c <_ZN21MemoryManagment_Class4InitEm+0xa0>)
    25aa:	4b19      	ldr	r3, [pc, #100]	; (2610 <_ZN21MemoryManagment_Class4InitEm+0xa4>)
    25ac:	4798      	blx	r3
    25ae:	4603      	mov	r3, r0
    25b0:	2b00      	cmp	r3, #0
    25b2:	d009      	beq.n	25c8 <_ZN21MemoryManagment_Class4InitEm+0x5c>
		{
			usb<<"EEPROM Memory SelfTest PASSED"<<NEWLINE;
    25b4:	4917      	ldr	r1, [pc, #92]	; (2614 <_ZN21MemoryManagment_Class4InitEm+0xa8>)
    25b6:	4810      	ldr	r0, [pc, #64]	; (25f8 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    25b8:	4b17      	ldr	r3, [pc, #92]	; (2618 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    25ba:	4798      	blx	r3
    25bc:	4603      	mov	r3, r0
    25be:	4910      	ldr	r1, [pc, #64]	; (2600 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    25c0:	4618      	mov	r0, r3
    25c2:	4b10      	ldr	r3, [pc, #64]	; (2604 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    25c4:	4798      	blx	r3
    25c6:	e008      	b.n	25da <_ZN21MemoryManagment_Class4InitEm+0x6e>
		
		} 
		else
		{
			usb<<"EEPROM Memory SelfTest FAILED"<<NEWLINE;
    25c8:	4914      	ldr	r1, [pc, #80]	; (261c <_ZN21MemoryManagment_Class4InitEm+0xb0>)
    25ca:	480b      	ldr	r0, [pc, #44]	; (25f8 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    25cc:	4b12      	ldr	r3, [pc, #72]	; (2618 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    25ce:	4798      	blx	r3
    25d0:	4603      	mov	r3, r0
    25d2:	490b      	ldr	r1, [pc, #44]	; (2600 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    25d4:	4618      	mov	r0, r3
    25d6:	4b0b      	ldr	r3, [pc, #44]	; (2604 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    25d8:	4798      	blx	r3
		}
		
		SetChipID(flashChipSize);
    25da:	6839      	ldr	r1, [r7, #0]
    25dc:	6878      	ldr	r0, [r7, #4]
    25de:	4b10      	ldr	r3, [pc, #64]	; (2620 <_ZN21MemoryManagment_Class4InitEm+0xb4>)
    25e0:	4798      	blx	r3
}
    25e2:	bf00      	nop
    25e4:	4618      	mov	r0, r3
    25e6:	3708      	adds	r7, #8
    25e8:	46bd      	mov	sp, r7
    25ea:	bd80      	pop	{r7, pc}
    25ec:	200099dc 	.word	0x200099dc
    25f0:	00015a95 	.word	0x00015a95
    25f4:	0001f2a0 	.word	0x0001f2a0
    25f8:	20009e88 	.word	0x20009e88
    25fc:	00002821 	.word	0x00002821
    2600:	0001f2c0 	.word	0x0001f2c0
    2604:	00000acd 	.word	0x00000acd
    2608:	0001f2c4 	.word	0x0001f2c4
    260c:	2000995c 	.word	0x2000995c
    2610:	000150e1 	.word	0x000150e1
    2614:	0001f2e4 	.word	0x0001f2e4
    2618:	00000aed 	.word	0x00000aed
    261c:	0001f304 	.word	0x0001f304
    2620:	00002651 	.word	0x00002651

00002624 <_ZN21MemoryManagment_Class13_troubleshootEhb>:
 uint8_t	MemoryManagment_Class::GetErrorCode(){
	 
	 // PLease don forget to do the real impelementation
	 return	0;
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
    2624:	b580      	push	{r7, lr}
    2626:	b082      	sub	sp, #8
    2628:	af00      	add	r7, sp, #0
    262a:	6078      	str	r0, [r7, #4]
    262c:	460b      	mov	r3, r1
    262e:	70fb      	strb	r3, [r7, #3]
    2630:	4613      	mov	r3, r2
    2632:	70bb      	strb	r3, [r7, #2]
	  diagnostics.troubleshoot(_code, printoverride);
    2634:	78ba      	ldrb	r2, [r7, #2]
    2636:	78fb      	ldrb	r3, [r7, #3]
    2638:	4619      	mov	r1, r3
    263a:	4803      	ldr	r0, [pc, #12]	; (2648 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x24>)
    263c:	4b03      	ldr	r3, [pc, #12]	; (264c <_ZN21MemoryManagment_Class13_troubleshootEhb+0x28>)
    263e:	4798      	blx	r3
  }
    2640:	bf00      	nop
    2642:	3708      	adds	r7, #8
    2644:	46bd      	mov	sp, r7
    2646:	bd80      	pop	{r7, pc}
    2648:	20008f70 	.word	0x20008f70
    264c:	00013c81 	.word	0x00013c81

00002650 <_ZN21MemoryManagment_Class9SetChipIDEm>:

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
    2650:	b580      	push	{r7, lr}
    2652:	b082      	sub	sp, #8
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]
    2658:	6039      	str	r1, [r7, #0]
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
    265a:	687b      	ldr	r3, [r7, #4]
    265c:	4618      	mov	r0, r3
    265e:	4b12      	ldr	r3, [pc, #72]	; (26a8 <_ZN21MemoryManagment_Class9SetChipIDEm+0x58>)
    2660:	4798      	blx	r3
    2662:	4602      	mov	r2, r0
    2664:	687b      	ldr	r3, [r7, #4]
    2666:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970


	 if (!logArea.capacity) {
    266a:	687b      	ldr	r3, [r7, #4]
    266c:	f8d3 3970 	ldr.w	r3, [r3, #2416]	; 0x970
    2670:	2b00      	cmp	r3, #0
    2672:	d113      	bne.n	269c <_ZN21MemoryManagment_Class9SetChipIDEm+0x4c>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
    2674:	683b      	ldr	r3, [r7, #0]
    2676:	2b00      	cmp	r3, #0
    2678:	d009      	beq.n	268e <_ZN21MemoryManagment_Class9SetChipIDEm+0x3e>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	683a      	ldr	r2, [r7, #0]
    267e:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
			 logArea.supported = false;
    2682:	687b      	ldr	r3, [r7, #4]
    2684:	2200      	movs	r2, #0
    2686:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
			 return true;
    268a:	2301      	movs	r3, #1
    268c:	e007      	b.n	269e <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
    268e:	2200      	movs	r2, #0
    2690:	2103      	movs	r1, #3
    2692:	6878      	ldr	r0, [r7, #4]
    2694:	4b05      	ldr	r3, [pc, #20]	; (26ac <_ZN21MemoryManagment_Class9SetChipIDEm+0x5c>)
    2696:	4798      	blx	r3
			 return false;
    2698:	2300      	movs	r3, #0
    269a:	e000      	b.n	269e <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

	 }
	 return true;
    269c:	2301      	movs	r3, #1
 }
    269e:	4618      	mov	r0, r3
    26a0:	3708      	adds	r7, #8
    26a2:	46bd      	mov	sp, r7
    26a4:	bd80      	pop	{r7, pc}
    26a6:	bf00      	nop
    26a8:	00015c15 	.word	0x00015c15
    26ac:	00002625 	.word	0x00002625

000026b0 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState>:
	handlerAppState=PTR_HVAC_STATE(&as);
	uint32_t	add=(uint32_t )(&flashMap->hvacStateSector.hvacDefaultState);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
	return	r;
}
 uint32_t	MemoryManagment_Class::WriteValidApplicationState(HVACState& hs ){
    26b0:	b580      	push	{r7, lr}
    26b2:	b084      	sub	sp, #16
    26b4:	af00      	add	r7, sp, #0
    26b6:	6078      	str	r0, [r7, #4]
    26b8:	6039      	str	r1, [r7, #0]
	uint32_t w=  WriteCurrentState(hs);
    26ba:	687b      	ldr	r3, [r7, #4]
    26bc:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
    26c0:	6839      	ldr	r1, [r7, #0]
    26c2:	4618      	mov	r0, r3
    26c4:	4b11      	ldr	r3, [pc, #68]	; (270c <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x5c>)
    26c6:	4798      	blx	r3
    26c8:	60f8      	str	r0, [r7, #12]
	crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    26d0:	226c      	movs	r2, #108	; 0x6c
    26d2:	6839      	ldr	r1, [r7, #0]
    26d4:	4618      	mov	r0, r3
    26d6:	4b0e      	ldr	r3, [pc, #56]	; (2710 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x60>)
    26d8:	4798      	blx	r3
    26da:	4602      	mov	r2, r0
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    26e2:	3334      	adds	r3, #52	; 0x34
    26e4:	601a      	str	r2, [r3, #0]
	w=WriteCRCAppState(crc32);
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	f503 62d1 	add.w	r2, r3, #1672	; 0x688
    26ec:	687b      	ldr	r3, [r7, #4]
    26ee:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    26f2:	3334      	adds	r3, #52	; 0x34
    26f4:	681b      	ldr	r3, [r3, #0]
    26f6:	4619      	mov	r1, r3
    26f8:	4610      	mov	r0, r2
    26fa:	4b06      	ldr	r3, [pc, #24]	; (2714 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x64>)
    26fc:	4798      	blx	r3
    26fe:	60f8      	str	r0, [r7, #12]
	return	w;
    2700:	68fb      	ldr	r3, [r7, #12]
 }
    2702:	4618      	mov	r0, r3
    2704:	3710      	adds	r7, #16
    2706:	46bd      	mov	sp, r7
    2708:	bd80      	pop	{r7, pc}
    270a:	bf00      	nop
    270c:	00002b55 	.word	0x00002b55
    2710:	00001239 	.word	0x00001239
    2714:	00002bc5 	.word	0x00002bc5

00002718 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState>:
 uint32_t	MemoryManagment_Class::WriteValidConfigurationData(ConfigurationData& cd){
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
 };
 uint32_t	MemoryManagment_Class::SaveCurrentState(HVACState& hs){
    2718:	b590      	push	{r4, r7, lr}
    271a:	b087      	sub	sp, #28
    271c:	af00      	add	r7, sp, #0
    271e:	6078      	str	r0, [r7, #4]
    2720:	6039      	str	r1, [r7, #0]
	 uint32_t	add=(uint32_t)&flashMap->hvacStateSector;
    2722:	4b18      	ldr	r3, [pc, #96]	; (2784 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x6c>)
    2724:	681b      	ldr	r3, [r3, #0]
    2726:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    272a:	332c      	adds	r3, #44	; 0x2c
    272c:	617b      	str	r3, [r7, #20]
	 HVACStateSector	*hss=(HVACStateSector*)&flashBuffer[0];
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2734:	3338      	adds	r3, #56	; 0x38
    2736:	613b      	str	r3, [r7, #16]
	 uint32_t r=qspiFlash.ReadAddress((uint8_t*)hss,add,QSPI_ERBLK);
    2738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    273c:	697a      	ldr	r2, [r7, #20]
    273e:	6939      	ldr	r1, [r7, #16]
    2740:	4811      	ldr	r0, [pc, #68]	; (2788 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    2742:	4c12      	ldr	r4, [pc, #72]	; (278c <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x74>)
    2744:	47a0      	blx	r4
    2746:	60f8      	str	r0, [r7, #12]
	 if (r==0)
    2748:	68fb      	ldr	r3, [r7, #12]
    274a:	2b00      	cmp	r3, #0
    274c:	d114      	bne.n	2778 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x60>
	 {
		 memcpy((void*)&(hss->hvacState),(void*)&hs,sizeof(HVACState));
    274e:	693b      	ldr	r3, [r7, #16]
    2750:	3374      	adds	r3, #116	; 0x74
    2752:	226c      	movs	r2, #108	; 0x6c
    2754:	6839      	ldr	r1, [r7, #0]
    2756:	4618      	mov	r0, r3
    2758:	4b0d      	ldr	r3, [pc, #52]	; (2790 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x78>)
    275a:	4798      	blx	r3
		 qspiFlash.Erase(add);
    275c:	6979      	ldr	r1, [r7, #20]
    275e:	480a      	ldr	r0, [pc, #40]	; (2788 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    2760:	4b0c      	ldr	r3, [pc, #48]	; (2794 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x7c>)
    2762:	4798      	blx	r3
		 uint32_t w=qspiFlash.WriteAddress((uint8_t*)hss,add,QSPI_ERBLK);
    2764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2768:	697a      	ldr	r2, [r7, #20]
    276a:	6939      	ldr	r1, [r7, #16]
    276c:	4806      	ldr	r0, [pc, #24]	; (2788 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    276e:	4c0a      	ldr	r4, [pc, #40]	; (2798 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x80>)
    2770:	47a0      	blx	r4
    2772:	60b8      	str	r0, [r7, #8]
		  return	w;
    2774:	68bb      	ldr	r3, [r7, #8]
    2776:	e000      	b.n	277a <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x62>
	 }

	 return	r;
    2778:	68fb      	ldr	r3, [r7, #12]
 }
    277a:	4618      	mov	r0, r3
    277c:	371c      	adds	r7, #28
    277e:	46bd      	mov	sp, r7
    2780:	bd90      	pop	{r4, r7, pc}
    2782:	bf00      	nop
    2784:	20008030 	.word	0x20008030
    2788:	200099dc 	.word	0x200099dc
    278c:	00015b65 	.word	0x00015b65
    2790:	0001af55 	.word	0x0001af55
    2794:	00015b01 	.word	0x00015b01
    2798:	00015b31 	.word	0x00015b31

0000279c <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryManagment_Class::SaveApplicationState(HVACState& hs ){
    279c:	b580      	push	{r7, lr}
    279e:	b084      	sub	sp, #16
    27a0:	af00      	add	r7, sp, #0
    27a2:	6078      	str	r0, [r7, #4]
    27a4:	6039      	str	r1, [r7, #0]
	  uint32_t w=  SaveCurrentState(hs);
    27a6:	6839      	ldr	r1, [r7, #0]
    27a8:	6878      	ldr	r0, [r7, #4]
    27aa:	4b10      	ldr	r3, [pc, #64]	; (27ec <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x50>)
    27ac:	4798      	blx	r3
    27ae:	60f8      	str	r0, [r7, #12]
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    27b0:	687b      	ldr	r3, [r7, #4]
    27b2:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    27b6:	226c      	movs	r2, #108	; 0x6c
    27b8:	6839      	ldr	r1, [r7, #0]
    27ba:	4618      	mov	r0, r3
    27bc:	4b0c      	ldr	r3, [pc, #48]	; (27f0 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x54>)
    27be:	4798      	blx	r3
    27c0:	4602      	mov	r2, r0
    27c2:	687b      	ldr	r3, [r7, #4]
    27c4:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    27c8:	3334      	adds	r3, #52	; 0x34
    27ca:	601a      	str	r2, [r3, #0]
	  w=SaveCRCAppState(crc32);
    27cc:	687b      	ldr	r3, [r7, #4]
    27ce:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    27d2:	3334      	adds	r3, #52	; 0x34
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	4619      	mov	r1, r3
    27d8:	6878      	ldr	r0, [r7, #4]
    27da:	4b06      	ldr	r3, [pc, #24]	; (27f4 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x58>)
    27dc:	4798      	blx	r3
    27de:	60f8      	str	r0, [r7, #12]
	  return	w;
    27e0:	68fb      	ldr	r3, [r7, #12]
  }
    27e2:	4618      	mov	r0, r3
    27e4:	3710      	adds	r7, #16
    27e6:	46bd      	mov	sp, r7
    27e8:	bd80      	pop	{r7, pc}
    27ea:	bf00      	nop
    27ec:	00002719 	.word	0x00002719
    27f0:	00001239 	.word	0x00001239
    27f4:	000027f9 	.word	0x000027f9

000027f8 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm>:
uint32_t	MemoryManagment_Class::SaveCRCAppState(uint32_t crc){
    27f8:	b580      	push	{r7, lr}
    27fa:	b082      	sub	sp, #8
    27fc:	af00      	add	r7, sp, #0
    27fe:	6078      	str	r0, [r7, #4]
    2800:	6039      	str	r1, [r7, #0]
// 	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
// 	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
    2802:	687b      	ldr	r3, [r7, #4]
    2804:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
    2808:	6839      	ldr	r1, [r7, #0]
    280a:	4618      	mov	r0, r3
    280c:	4b03      	ldr	r3, [pc, #12]	; (281c <_ZN21MemoryManagment_Class15SaveCRCAppStateEm+0x24>)
    280e:	4798      	blx	r3
    2810:	4603      	mov	r3, r0
}
    2812:	4618      	mov	r0, r3
    2814:	3708      	adds	r7, #8
    2816:	46bd      	mov	sp, r7
    2818:	bd80      	pop	{r7, pc}
    281a:	bf00      	nop
    281c:	00002bc5 	.word	0x00002bc5

00002820 <_ZlsIA29_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2820:	b580      	push	{r7, lr}
    2822:	b082      	sub	sp, #8
    2824:	af00      	add	r7, sp, #0
    2826:	6078      	str	r0, [r7, #4]
    2828:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    282a:	6839      	ldr	r1, [r7, #0]
    282c:	6878      	ldr	r0, [r7, #4]
    282e:	4b03      	ldr	r3, [pc, #12]	; (283c <_ZlsIA29_cER5PrintS2_RKT_+0x1c>)
    2830:	4798      	blx	r3
    2832:	687b      	ldr	r3, [r7, #4]
    2834:	4618      	mov	r0, r3
    2836:	3708      	adds	r7, #8
    2838:	46bd      	mov	sp, r7
    283a:	bd80      	pop	{r7, pc}
    283c:	00017309 	.word	0x00017309

00002840 <_Z41__static_initialization_and_destruction_0ii>:
 
    2840:	b580      	push	{r7, lr}
    2842:	b082      	sub	sp, #8
    2844:	af00      	add	r7, sp, #0
    2846:	6078      	str	r0, [r7, #4]
    2848:	6039      	str	r1, [r7, #0]
    284a:	687b      	ldr	r3, [r7, #4]
    284c:	2b01      	cmp	r3, #1
    284e:	d10c      	bne.n	286a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2850:	683b      	ldr	r3, [r7, #0]
    2852:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2856:	4293      	cmp	r3, r2
    2858:	d107      	bne.n	286a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    285a:	4806      	ldr	r0, [pc, #24]	; (2874 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    285c:	4b06      	ldr	r3, [pc, #24]	; (2878 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    285e:	4798      	blx	r3
    2860:	4a06      	ldr	r2, [pc, #24]	; (287c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2862:	4907      	ldr	r1, [pc, #28]	; (2880 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2864:	4803      	ldr	r0, [pc, #12]	; (2874 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2866:	4b07      	ldr	r3, [pc, #28]	; (2884 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2868:	4798      	blx	r3
    286a:	bf00      	nop
    286c:	3708      	adds	r7, #8
    286e:	46bd      	mov	sp, r7
    2870:	bd80      	pop	{r7, pc}
    2872:	bf00      	nop
    2874:	200015f8 	.word	0x200015f8
    2878:	0000249d 	.word	0x0000249d
    287c:	20000000 	.word	0x20000000
    2880:	0000251d 	.word	0x0000251d
    2884:	000187f1 	.word	0x000187f1

00002888 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
    2888:	b580      	push	{r7, lr}
    288a:	af00      	add	r7, sp, #0
    288c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2890:	2001      	movs	r0, #1
    2892:	4b01      	ldr	r3, [pc, #4]	; (2898 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
    2894:	4798      	blx	r3
    2896:	bd80      	pop	{r7, pc}
    2898:	00002841 	.word	0x00002841

0000289c <_ZN18FlashHandler_ClassC1Ev>:


MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
    289c:	b480      	push	{r7}
    289e:	b083      	sub	sp, #12
    28a0:	af00      	add	r7, sp, #0
    28a2:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
    28a4:	687b      	ldr	r3, [r7, #4]
    28a6:	4618      	mov	r0, r3
    28a8:	370c      	adds	r7, #12
    28aa:	46bd      	mov	sp, r7
    28ac:	bc80      	pop	{r7}
    28ae:	4770      	bx	lr

000028b0 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
    28b0:	b480      	push	{r7}
    28b2:	b083      	sub	sp, #12
    28b4:	af00      	add	r7, sp, #0
    28b6:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
    28b8:	687b      	ldr	r3, [r7, #4]
    28ba:	4618      	mov	r0, r3
    28bc:	370c      	adds	r7, #12
    28be:	46bd      	mov	sp, r7
    28c0:	bc80      	pop	{r7}
    28c2:	4770      	bx	lr

000028c4 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData>:

uint32_t	FlashHandler_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
    28c4:	b580      	push	{r7, lr}
    28c6:	b084      	sub	sp, #16
    28c8:	af00      	add	r7, sp, #0
    28ca:	6078      	str	r0, [r7, #4]
    28cc:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    28ce:	4b08      	ldr	r3, [pc, #32]	; (28f0 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x2c>)
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    28d6:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    28d8:	68fa      	ldr	r2, [r7, #12]
    28da:	6839      	ldr	r1, [r7, #0]
    28dc:	6878      	ldr	r0, [r7, #4]
    28de:	4b05      	ldr	r3, [pc, #20]	; (28f4 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x30>)
    28e0:	4798      	blx	r3
    28e2:	60b8      	str	r0, [r7, #8]
	return	r;
    28e4:	68bb      	ldr	r3, [r7, #8]
}
    28e6:	4618      	mov	r0, r3
    28e8:	3710      	adds	r7, #16
    28ea:	46bd      	mov	sp, r7
    28ec:	bd80      	pop	{r7, pc}
    28ee:	bf00      	nop
    28f0:	20008030 	.word	0x20008030
    28f4:	00002961 	.word	0x00002961

000028f8 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadDefaultParameters(UserParameters& up){
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
	uint32_t	r=ReadParameters(up,add);
	return	r;
}
uint32_t	FlashHandler_Class::ReadLastConfigurationData(ConfigurationData& cd){
    28f8:	b580      	push	{r7, lr}
    28fa:	b084      	sub	sp, #16
    28fc:	af00      	add	r7, sp, #0
    28fe:	6078      	str	r0, [r7, #4]
    2900:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
    2902:	4b08      	ldr	r3, [pc, #32]	; (2924 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x2c>)
    2904:	681b      	ldr	r3, [r3, #0]
    2906:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
    290a:	332c      	adds	r3, #44	; 0x2c
    290c:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    290e:	68fa      	ldr	r2, [r7, #12]
    2910:	6839      	ldr	r1, [r7, #0]
    2912:	6878      	ldr	r0, [r7, #4]
    2914:	4b04      	ldr	r3, [pc, #16]	; (2928 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x30>)
    2916:	4798      	blx	r3
    2918:	60b8      	str	r0, [r7, #8]
	return	r;
    291a:	68bb      	ldr	r3, [r7, #8]
}
    291c:	4618      	mov	r0, r3
    291e:	3710      	adds	r7, #16
    2920:	46bd      	mov	sp, r7
    2922:	bd80      	pop	{r7, pc}
    2924:	20008030 	.word	0x20008030
    2928:	00002961 	.word	0x00002961

0000292c <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
    292c:	b580      	push	{r7, lr}
    292e:	b084      	sub	sp, #16
    2930:	af00      	add	r7, sp, #0
    2932:	6078      	str	r0, [r7, #4]
    2934:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.updatedConfiguration;
    2936:	4b08      	ldr	r3, [pc, #32]	; (2958 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x2c>)
    2938:	681b      	ldr	r3, [r3, #0]
    293a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
    293e:	3304      	adds	r3, #4
    2940:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    2942:	68fa      	ldr	r2, [r7, #12]
    2944:	6839      	ldr	r1, [r7, #0]
    2946:	6878      	ldr	r0, [r7, #4]
    2948:	4b04      	ldr	r3, [pc, #16]	; (295c <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x30>)
    294a:	4798      	blx	r3
    294c:	60b8      	str	r0, [r7, #8]
	return	r;
    294e:	68bb      	ldr	r3, [r7, #8]
}
    2950:	4618      	mov	r0, r3
    2952:	3710      	adds	r7, #16
    2954:	46bd      	mov	sp, r7
    2956:	bd80      	pop	{r7, pc}
    2958:	20008030 	.word	0x20008030
    295c:	00002961 	.word	0x00002961

00002960 <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam>:

uint32_t	FlashHandler_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
    2960:	b590      	push	{r4, r7, lr}
    2962:	b087      	sub	sp, #28
    2964:	af00      	add	r7, sp, #0
    2966:	60f8      	str	r0, [r7, #12]
    2968:	60b9      	str	r1, [r7, #8]
    296a:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    296c:	68ba      	ldr	r2, [r7, #8]
    296e:	68fb      	ldr	r3, [r7, #12]
    2970:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    2974:	68fb      	ldr	r3, [r7, #12]
    2976:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    297a:	23ac      	movs	r3, #172	; 0xac
    297c:	687a      	ldr	r2, [r7, #4]
    297e:	4804      	ldr	r0, [pc, #16]	; (2990 <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x30>)
    2980:	4c04      	ldr	r4, [pc, #16]	; (2994 <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x34>)
    2982:	47a0      	blx	r4
    2984:	6178      	str	r0, [r7, #20]
	return	r;
    2986:	697b      	ldr	r3, [r7, #20]
}
    2988:	4618      	mov	r0, r3
    298a:	371c      	adds	r7, #28
    298c:	46bd      	mov	sp, r7
    298e:	bd90      	pop	{r4, r7, pc}
    2990:	200099dc 	.word	0x200099dc
    2994:	00015b65 	.word	0x00015b65

00002998 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
	return	r;
}
uint32_t	FlashHandler_Class::ReadCRCConfigurationData(void){
    2998:	b590      	push	{r4, r7, lr}
    299a:	b087      	sub	sp, #28
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    29a0:	4b09      	ldr	r3, [pc, #36]	; (29c8 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x30>)
    29a2:	681b      	ldr	r3, [r3, #0]
    29a4:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    29a8:	3330      	adds	r3, #48	; 0x30
    29aa:	617b      	str	r3, [r7, #20]
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    29ac:	f107 010c 	add.w	r1, r7, #12
    29b0:	2304      	movs	r3, #4
    29b2:	697a      	ldr	r2, [r7, #20]
    29b4:	4805      	ldr	r0, [pc, #20]	; (29cc <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x34>)
    29b6:	4c06      	ldr	r4, [pc, #24]	; (29d0 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x38>)
    29b8:	47a0      	blx	r4
    29ba:	6138      	str	r0, [r7, #16]
	return	crc;
    29bc:	68fb      	ldr	r3, [r7, #12]
}
    29be:	4618      	mov	r0, r3
    29c0:	371c      	adds	r7, #28
    29c2:	46bd      	mov	sp, r7
    29c4:	bd90      	pop	{r4, r7, pc}
    29c6:	bf00      	nop
    29c8:	20008030 	.word	0x20008030
    29cc:	200099dc 	.word	0x200099dc
    29d0:	00015b65 	.word	0x00015b65

000029d4 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
    29d4:	b590      	push	{r4, r7, lr}
    29d6:	b087      	sub	sp, #28
    29d8:	af00      	add	r7, sp, #0
    29da:	60f8      	str	r0, [r7, #12]
    29dc:	60b9      	str	r1, [r7, #8]
    29de:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    29e0:	68ba      	ldr	r2, [r7, #8]
    29e2:	68fb      	ldr	r3, [r7, #12]
    29e4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    29e8:	68fb      	ldr	r3, [r7, #12]
    29ea:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    29ee:	23ac      	movs	r3, #172	; 0xac
    29f0:	687a      	ldr	r2, [r7, #4]
    29f2:	4804      	ldr	r0, [pc, #16]	; (2a04 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x30>)
    29f4:	4c04      	ldr	r4, [pc, #16]	; (2a08 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x34>)
    29f6:	47a0      	blx	r4
    29f8:	6178      	str	r0, [r7, #20]
	return	w;
    29fa:	697b      	ldr	r3, [r7, #20]
}
    29fc:	4618      	mov	r0, r3
    29fe:	371c      	adds	r7, #28
    2a00:	46bd      	mov	sp, r7
    2a02:	bd90      	pop	{r4, r7, pc}
    2a04:	200099dc 	.word	0x200099dc
    2a08:	00015b31 	.word	0x00015b31

00002a0c <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    2a0c:	b590      	push	{r4, r7, lr}
    2a0e:	b087      	sub	sp, #28
    2a10:	af00      	add	r7, sp, #0
    2a12:	60f8      	str	r0, [r7, #12]
    2a14:	60b9      	str	r1, [r7, #8]
    2a16:	607a      	str	r2, [r7, #4]

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    2a18:	2301      	movs	r3, #1
    2a1a:	687a      	ldr	r2, [r7, #4]
    2a1c:	68b9      	ldr	r1, [r7, #8]
    2a1e:	4804      	ldr	r0, [pc, #16]	; (2a30 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x24>)
    2a20:	4c04      	ldr	r4, [pc, #16]	; (2a34 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x28>)
    2a22:	47a0      	blx	r4
    2a24:	6178      	str	r0, [r7, #20]
	return	w;
    2a26:	697b      	ldr	r3, [r7, #20]
}
    2a28:	4618      	mov	r0, r3
    2a2a:	371c      	adds	r7, #28
    2a2c:	46bd      	mov	sp, r7
    2a2e:	bd90      	pop	{r4, r7, pc}
    2a30:	200099dc 	.word	0x200099dc
    2a34:	00015b31 	.word	0x00015b31

00002a38 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem>:
uint32_t	FlashHandler_Class::WriteApplicationState(HVACState& hs,uint32_t add){
    2a38:	b590      	push	{r4, r7, lr}
    2a3a:	b087      	sub	sp, #28
    2a3c:	af00      	add	r7, sp, #0
    2a3e:	60f8      	str	r0, [r7, #12]
    2a40:	60b9      	str	r1, [r7, #8]
    2a42:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    2a44:	68ba      	ldr	r2, [r7, #8]
    2a46:	68fb      	ldr	r3, [r7, #12]
    2a48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
    2a4c:	68fb      	ldr	r3, [r7, #12]
    2a4e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    2a52:	236c      	movs	r3, #108	; 0x6c
    2a54:	687a      	ldr	r2, [r7, #4]
    2a56:	4804      	ldr	r0, [pc, #16]	; (2a68 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x30>)
    2a58:	4c04      	ldr	r4, [pc, #16]	; (2a6c <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x34>)
    2a5a:	47a0      	blx	r4
    2a5c:	6178      	str	r0, [r7, #20]
	return	w;
    2a5e:	697b      	ldr	r3, [r7, #20]
}
    2a60:	4618      	mov	r0, r3
    2a62:	371c      	adds	r7, #28
    2a64:	46bd      	mov	sp, r7
    2a66:	bd90      	pop	{r4, r7, pc}
    2a68:	200099dc 	.word	0x200099dc
    2a6c:	00015b31 	.word	0x00015b31

00002a70 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv>:
uint32_t	FlashHandler_Class::WriteDefaultConfiguration(void){
    2a70:	b580      	push	{r7, lr}
    2a72:	b0b0      	sub	sp, #192	; 0xc0
    2a74:	af00      	add	r7, sp, #0
    2a76:	6078      	str	r0, [r7, #4]
	ConfigurationData cd=factoryDefaultsConfiguration;
    2a78:	4a0e      	ldr	r2, [pc, #56]	; (2ab4 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x44>)
    2a7a:	f107 030c 	add.w	r3, r7, #12
    2a7e:	4611      	mov	r1, r2
    2a80:	22ac      	movs	r2, #172	; 0xac
    2a82:	4618      	mov	r0, r3
    2a84:	4b0c      	ldr	r3, [pc, #48]	; (2ab8 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x48>)
    2a86:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    2a88:	4b0c      	ldr	r3, [pc, #48]	; (2abc <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x4c>)
    2a8a:	681b      	ldr	r3, [r3, #0]
    2a8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    2a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t	w=WriteConfigurationData(cd,add);
    2a94:	f107 030c 	add.w	r3, r7, #12
    2a98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    2a9c:	4619      	mov	r1, r3
    2a9e:	6878      	ldr	r0, [r7, #4]
    2aa0:	4b07      	ldr	r3, [pc, #28]	; (2ac0 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x50>)
    2aa2:	4798      	blx	r3
    2aa4:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	return	w;
    2aa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
}
    2aac:	4618      	mov	r0, r3
    2aae:	37c0      	adds	r7, #192	; 0xc0
    2ab0:	46bd      	mov	sp, r7
    2ab2:	bd80      	pop	{r7, pc}
    2ab4:	0001ed50 	.word	0x0001ed50
    2ab8:	0001af55 	.word	0x0001af55
    2abc:	20008030 	.word	0x20008030
    2ac0:	000029d5 	.word	0x000029d5

00002ac4 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    2ac4:	b580      	push	{r7, lr}
    2ac6:	b086      	sub	sp, #24
    2ac8:	af00      	add	r7, sp, #0
    2aca:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    2acc:	4b0a      	ldr	r3, [pc, #40]	; (2af8 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x34>)
    2ace:	781b      	ldrb	r3, [r3, #0]
    2ad0:	733b      	strb	r3, [r7, #12]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    2ad2:	4b0a      	ldr	r3, [pc, #40]	; (2afc <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x38>)
    2ad4:	681b      	ldr	r3, [r3, #0]
    2ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2ada:	3301      	adds	r3, #1
    2adc:	617b      	str	r3, [r7, #20]
	uint32_t	w=WriteParameters(up,add);
    2ade:	f107 030c 	add.w	r3, r7, #12
    2ae2:	697a      	ldr	r2, [r7, #20]
    2ae4:	4619      	mov	r1, r3
    2ae6:	6878      	ldr	r0, [r7, #4]
    2ae8:	4b05      	ldr	r3, [pc, #20]	; (2b00 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x3c>)
    2aea:	4798      	blx	r3
    2aec:	6138      	str	r0, [r7, #16]
	return	w;
    2aee:	693b      	ldr	r3, [r7, #16]
}
    2af0:	4618      	mov	r0, r3
    2af2:	3718      	adds	r7, #24
    2af4:	46bd      	mov	sp, r7
    2af6:	bd80      	pop	{r7, pc}
    2af8:	00020ab8 	.word	0x00020ab8
    2afc:	20008030 	.word	0x20008030
    2b00:	00002a0d 	.word	0x00002a0d

00002b04 <_ZN18FlashHandler_Class17WriteDefaultStateEv>:
uint32_t	FlashHandler_Class::WriteDefaultState(void){
    2b04:	b580      	push	{r7, lr}
    2b06:	b0a0      	sub	sp, #128	; 0x80
    2b08:	af00      	add	r7, sp, #0
    2b0a:	6078      	str	r0, [r7, #4]
	HVACState hs=defaultHVACState;
    2b0c:	4a0d      	ldr	r2, [pc, #52]	; (2b44 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x40>)
    2b0e:	f107 030c 	add.w	r3, r7, #12
    2b12:	4611      	mov	r1, r2
    2b14:	226c      	movs	r2, #108	; 0x6c
    2b16:	4618      	mov	r0, r3
    2b18:	4b0b      	ldr	r3, [pc, #44]	; (2b48 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x44>)
    2b1a:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacDefaultState;
    2b1c:	4b0b      	ldr	r3, [pc, #44]	; (2b4c <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x48>)
    2b1e:	681b      	ldr	r3, [r3, #0]
    2b20:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    2b24:	3334      	adds	r3, #52	; 0x34
    2b26:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t	w=WriteApplicationState(hs,add);
    2b28:	f107 030c 	add.w	r3, r7, #12
    2b2c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    2b2e:	4619      	mov	r1, r3
    2b30:	6878      	ldr	r0, [r7, #4]
    2b32:	4b07      	ldr	r3, [pc, #28]	; (2b50 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x4c>)
    2b34:	4798      	blx	r3
    2b36:	67b8      	str	r0, [r7, #120]	; 0x78
	return	w;
    2b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
    2b3a:	4618      	mov	r0, r3
    2b3c:	3780      	adds	r7, #128	; 0x80
    2b3e:	46bd      	mov	sp, r7
    2b40:	bd80      	pop	{r7, pc}
    2b42:	bf00      	nop
    2b44:	0001f0e0 	.word	0x0001f0e0
    2b48:	0001af55 	.word	0x0001af55
    2b4c:	20008030 	.word	0x20008030
    2b50:	00002a39 	.word	0x00002a39

00002b54 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState>:

uint32_t	FlashHandler_Class::WriteCurrentState(HVACState& hs){
    2b54:	b580      	push	{r7, lr}
    2b56:	b084      	sub	sp, #16
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
    2b5c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacState;
    2b5e:	4b08      	ldr	r3, [pc, #32]	; (2b80 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x2c>)
    2b60:	681b      	ldr	r3, [r3, #0]
    2b62:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    2b66:	3320      	adds	r3, #32
    2b68:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hs,add);
    2b6a:	68fa      	ldr	r2, [r7, #12]
    2b6c:	6839      	ldr	r1, [r7, #0]
    2b6e:	6878      	ldr	r0, [r7, #4]
    2b70:	4b04      	ldr	r3, [pc, #16]	; (2b84 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x30>)
    2b72:	4798      	blx	r3
    2b74:	60b8      	str	r0, [r7, #8]
	return	w;
    2b76:	68bb      	ldr	r3, [r7, #8]
}
    2b78:	4618      	mov	r0, r3
    2b7a:	3710      	adds	r7, #16
    2b7c:	46bd      	mov	sp, r7
    2b7e:	bd80      	pop	{r7, pc}
    2b80:	20008030 	.word	0x20008030
    2b84:	00002a39 	.word	0x00002a39

00002b88 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm>:

uint32_t	FlashHandler_Class::WriteCRCConfigurationData(uint32_t crc){
    2b88:	b590      	push	{r4, r7, lr}
    2b8a:	b085      	sub	sp, #20
    2b8c:	af00      	add	r7, sp, #0
    2b8e:	6078      	str	r0, [r7, #4]
    2b90:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    2b92:	4b09      	ldr	r3, [pc, #36]	; (2bb8 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x30>)
    2b94:	681b      	ldr	r3, [r3, #0]
    2b96:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    2b9a:	3330      	adds	r3, #48	; 0x30
    2b9c:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2b9e:	4639      	mov	r1, r7
    2ba0:	2304      	movs	r3, #4
    2ba2:	68fa      	ldr	r2, [r7, #12]
    2ba4:	4805      	ldr	r0, [pc, #20]	; (2bbc <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x34>)
    2ba6:	4c06      	ldr	r4, [pc, #24]	; (2bc0 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x38>)
    2ba8:	47a0      	blx	r4
    2baa:	60b8      	str	r0, [r7, #8]
	return	w;
    2bac:	68bb      	ldr	r3, [r7, #8]
}
    2bae:	4618      	mov	r0, r3
    2bb0:	3714      	adds	r7, #20
    2bb2:	46bd      	mov	sp, r7
    2bb4:	bd90      	pop	{r4, r7, pc}
    2bb6:	bf00      	nop
    2bb8:	20008030 	.word	0x20008030
    2bbc:	200099dc 	.word	0x200099dc
    2bc0:	00015b31 	.word	0x00015b31

00002bc4 <_ZN18FlashHandler_Class16WriteCRCAppStateEm>:
uint32_t	FlashHandler_Class::WriteCRCAppState(uint32_t crc){
    2bc4:	b590      	push	{r4, r7, lr}
    2bc6:	b085      	sub	sp, #20
    2bc8:	af00      	add	r7, sp, #0
    2bca:	6078      	str	r0, [r7, #4]
    2bcc:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    2bce:	4b09      	ldr	r3, [pc, #36]	; (2bf4 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x30>)
    2bd0:	681b      	ldr	r3, [r3, #0]
    2bd2:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    2bd6:	330c      	adds	r3, #12
    2bd8:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2bda:	4639      	mov	r1, r7
    2bdc:	2304      	movs	r3, #4
    2bde:	68fa      	ldr	r2, [r7, #12]
    2be0:	4805      	ldr	r0, [pc, #20]	; (2bf8 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x34>)
    2be2:	4c06      	ldr	r4, [pc, #24]	; (2bfc <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x38>)
    2be4:	47a0      	blx	r4
    2be6:	60b8      	str	r0, [r7, #8]
	return	w;
    2be8:	68bb      	ldr	r3, [r7, #8]
}
    2bea:	4618      	mov	r0, r3
    2bec:	3714      	adds	r7, #20
    2bee:	46bd      	mov	sp, r7
    2bf0:	bd90      	pop	{r4, r7, pc}
    2bf2:	bf00      	nop
    2bf4:	20008030 	.word	0x20008030
    2bf8:	200099dc 	.word	0x200099dc
    2bfc:	00015b31 	.word	0x00015b31

00002c00 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState>:
uint32_t	FlashHandler_Class::WriteLastConfigurationData(ConfigurationData& cd){
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::ReadApplicationState(HVACState& as){
    2c00:	b590      	push	{r4, r7, lr}
    2c02:	b085      	sub	sp, #20
    2c04:	af00      	add	r7, sp, #0
    2c06:	6078      	str	r0, [r7, #4]
    2c08:	6039      	str	r1, [r7, #0]
	flashAddress=(uint32_t)&flashMap->hvacStateSector.hvacState;
    2c0a:	4b0e      	ldr	r3, [pc, #56]	; (2c44 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x44>)
    2c0c:	681b      	ldr	r3, [r3, #0]
    2c0e:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    2c12:	3320      	adds	r3, #32
    2c14:	461a      	mov	r2, r3
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	handlerAppState=PTR_HVAC_STATE(&as);
    2c1c:	683a      	ldr	r2, [r7, #0]
    2c1e:	687b      	ldr	r3, [r7, #4]
    2c20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,flashAddress,sizeof(HVACState));
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2c30:	236c      	movs	r3, #108	; 0x6c
    2c32:	4805      	ldr	r0, [pc, #20]	; (2c48 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x48>)
    2c34:	4c05      	ldr	r4, [pc, #20]	; (2c4c <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x4c>)
    2c36:	47a0      	blx	r4
    2c38:	60f8      	str	r0, [r7, #12]
	return	r;
    2c3a:	68fb      	ldr	r3, [r7, #12]
}
    2c3c:	4618      	mov	r0, r3
    2c3e:	3714      	adds	r7, #20
    2c40:	46bd      	mov	sp, r7
    2c42:	bd90      	pop	{r4, r7, pc}
    2c44:	20008030 	.word	0x20008030
    2c48:	200099dc 	.word	0x200099dc
    2c4c:	00015b65 	.word	0x00015b65

00002c50 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv>:
uint32_t	FlashHandler_Class::ReadCRCApplicationState(void){
    2c50:	b590      	push	{r4, r7, lr}
    2c52:	b085      	sub	sp, #20
    2c54:	af00      	add	r7, sp, #0
    2c56:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	flashAddress=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    2c58:	4b0b      	ldr	r3, [pc, #44]	; (2c88 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x38>)
    2c5a:	681b      	ldr	r3, [r3, #0]
    2c5c:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    2c60:	330c      	adds	r3, #12
    2c62:	461a      	mov	r2, r3
    2c64:	687b      	ldr	r3, [r7, #4]
    2c66:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),flashAddress,sizeof(uint32_t));
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2c70:	f107 0108 	add.w	r1, r7, #8
    2c74:	2304      	movs	r3, #4
    2c76:	4805      	ldr	r0, [pc, #20]	; (2c8c <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x3c>)
    2c78:	4c05      	ldr	r4, [pc, #20]	; (2c90 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x40>)
    2c7a:	47a0      	blx	r4
    2c7c:	60f8      	str	r0, [r7, #12]
	return	crc;
    2c7e:	68bb      	ldr	r3, [r7, #8]
    2c80:	4618      	mov	r0, r3
    2c82:	3714      	adds	r7, #20
    2c84:	46bd      	mov	sp, r7
    2c86:	bd90      	pop	{r4, r7, pc}
    2c88:	20008030 	.word	0x20008030
    2c8c:	200099dc 	.word	0x200099dc
    2c90:	00015b65 	.word	0x00015b65

00002c94 <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    2c94:	b480      	push	{r7}
    2c96:	b083      	sub	sp, #12
    2c98:	af00      	add	r7, sp, #0
    2c9a:	6078      	str	r0, [r7, #4]
{
} //PBIT_Class
    2c9c:	687b      	ldr	r3, [r7, #4]
    2c9e:	4618      	mov	r0, r3
    2ca0:	370c      	adds	r7, #12
    2ca2:	46bd      	mov	sp, r7
    2ca4:	bc80      	pop	{r7}
    2ca6:	4770      	bx	lr

00002ca8 <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    2ca8:	b480      	push	{r7}
    2caa:	b083      	sub	sp, #12
    2cac:	af00      	add	r7, sp, #0
    2cae:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    2cb0:	687b      	ldr	r3, [r7, #4]
    2cb2:	4618      	mov	r0, r3
    2cb4:	370c      	adds	r7, #12
    2cb6:	46bd      	mov	sp, r7
    2cb8:	bc80      	pop	{r7}
    2cba:	4770      	bx	lr

00002cbc <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    2cbc:	b480      	push	{r7}
    2cbe:	b083      	sub	sp, #12
    2cc0:	af00      	add	r7, sp, #0
    2cc2:	6078      	str	r0, [r7, #4]
	return	isOK;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	781b      	ldrb	r3, [r3, #0]
    2cc8:	b2db      	uxtb	r3, r3
}
    2cca:	4618      	mov	r0, r3
    2ccc:	370c      	adds	r7, #12
    2cce:	46bd      	mov	sp, r7
    2cd0:	bc80      	pop	{r7}
    2cd2:	4770      	bx	lr

00002cd4 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
    2cd4:	b580      	push	{r7, lr}
    2cd6:	b086      	sub	sp, #24
    2cd8:	af00      	add	r7, sp, #0
    2cda:	6078      	str	r0, [r7, #4]
    2cdc:	6039      	str	r1, [r7, #0]
	interfaces.GetStatus(cs);
    2cde:	6839      	ldr	r1, [r7, #0]
    2ce0:	4812      	ldr	r0, [pc, #72]	; (2d2c <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x58>)
    2ce2:	4b13      	ldr	r3, [pc, #76]	; (2d30 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x5c>)
    2ce4:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
    2ce6:	683b      	ldr	r3, [r7, #0]
    2ce8:	613b      	str	r3, [r7, #16]
	uint32_t	v=*s;
    2cea:	693b      	ldr	r3, [r7, #16]
    2cec:	681b      	ldr	r3, [r3, #0]
    2cee:	60fb      	str	r3, [r7, #12]

	for (int i=0;i<32;i++)
    2cf0:	2300      	movs	r3, #0
    2cf2:	617b      	str	r3, [r7, #20]
    2cf4:	697b      	ldr	r3, [r7, #20]
    2cf6:	2b1f      	cmp	r3, #31
    2cf8:	dc0d      	bgt.n	2d16 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x42>
	{
		v+=(0x01<<i)&(v);
    2cfa:	2201      	movs	r2, #1
    2cfc:	697b      	ldr	r3, [r7, #20]
    2cfe:	fa02 f303 	lsl.w	r3, r2, r3
    2d02:	461a      	mov	r2, r3
    2d04:	68fb      	ldr	r3, [r7, #12]
    2d06:	401a      	ands	r2, r3
    2d08:	68fb      	ldr	r3, [r7, #12]
    2d0a:	4413      	add	r3, r2
    2d0c:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<32;i++)
    2d0e:	697b      	ldr	r3, [r7, #20]
    2d10:	3301      	adds	r3, #1
    2d12:	617b      	str	r3, [r7, #20]
    2d14:	e7ee      	b.n	2cf4 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x20>
		
	}
	if (v==0)
    2d16:	68fb      	ldr	r3, [r7, #12]
    2d18:	2b00      	cmp	r3, #0
    2d1a:	d102      	bne.n	2d22 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x4e>
	{
		isOK=true;
    2d1c:	687b      	ldr	r3, [r7, #4]
    2d1e:	2201      	movs	r2, #1
    2d20:	701a      	strb	r2, [r3, #0]
	}
	return	v;
    2d22:	68fb      	ldr	r3, [r7, #12]
}
    2d24:	4618      	mov	r0, r3
    2d26:	3718      	adds	r7, #24
    2d28:	46bd      	mov	sp, r7
    2d2a:	bd80      	pop	{r7, pc}
    2d2c:	2000156c 	.word	0x2000156c
    2d30:	00002141 	.word	0x00002141

00002d34 <_Z41__static_initialization_and_destruction_0ii>:

    2d34:	b580      	push	{r7, lr}
    2d36:	b082      	sub	sp, #8
    2d38:	af00      	add	r7, sp, #0
    2d3a:	6078      	str	r0, [r7, #4]
    2d3c:	6039      	str	r1, [r7, #0]
    2d3e:	687b      	ldr	r3, [r7, #4]
    2d40:	2b01      	cmp	r3, #1
    2d42:	d10c      	bne.n	2d5e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2d44:	683b      	ldr	r3, [r7, #0]
    2d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2d4a:	4293      	cmp	r3, r2
    2d4c:	d107      	bne.n	2d5e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2d4e:	4806      	ldr	r0, [pc, #24]	; (2d68 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2d50:	4b06      	ldr	r3, [pc, #24]	; (2d6c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2d52:	4798      	blx	r3
    2d54:	4a06      	ldr	r2, [pc, #24]	; (2d70 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2d56:	4907      	ldr	r1, [pc, #28]	; (2d74 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2d58:	4803      	ldr	r0, [pc, #12]	; (2d68 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2d5a:	4b07      	ldr	r3, [pc, #28]	; (2d78 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2d5c:	4798      	blx	r3
    2d5e:	bf00      	nop
    2d60:	3708      	adds	r7, #8
    2d62:	46bd      	mov	sp, r7
    2d64:	bd80      	pop	{r7, pc}
    2d66:	bf00      	nop
    2d68:	20008034 	.word	0x20008034
    2d6c:	00002c95 	.word	0x00002c95
    2d70:	20000000 	.word	0x20000000
    2d74:	00002ca9 	.word	0x00002ca9
    2d78:	000187f1 	.word	0x000187f1

00002d7c <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    2d7c:	b580      	push	{r7, lr}
    2d7e:	af00      	add	r7, sp, #0
    2d80:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2d84:	2001      	movs	r0, #1
    2d86:	4b01      	ldr	r3, [pc, #4]	; (2d8c <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    2d88:	4798      	blx	r3
    2d8a:	bd80      	pop	{r7, pc}
    2d8c:	00002d35 	.word	0x00002d35

00002d90 <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
    2d90:	b580      	push	{r7, lr}
    2d92:	b082      	sub	sp, #8
    2d94:	af00      	add	r7, sp, #0
    2d96:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
    2d98:	687b      	ldr	r3, [r7, #4]
    2d9a:	4618      	mov	r0, r3
    2d9c:	4b05      	ldr	r3, [pc, #20]	; (2db4 <_ZN19PersistenceServicesC1Ev+0x24>)
    2d9e:	4798      	blx	r3
    2da0:	687b      	ldr	r3, [r7, #4]
    2da2:	2200      	movs	r2, #0
    2da4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	{
	}
    2da8:	687b      	ldr	r3, [r7, #4]
    2daa:	4618      	mov	r0, r3
    2dac:	3708      	adds	r7, #8
    2dae:	46bd      	mov	sp, r7
    2db0:	bd80      	pop	{r7, pc}
    2db2:	bf00      	nop
    2db4:	000011b5 	.word	0x000011b5

00002db8 <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:
	
	return result;
	}

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
    2db8:	b480      	push	{r7}
    2dba:	b085      	sub	sp, #20
    2dbc:	af00      	add	r7, sp, #0
    2dbe:	6078      	str	r0, [r7, #4]
    2dc0:	6039      	str	r1, [r7, #0]
	bool	result(true);
    2dc2:	2301      	movs	r3, #1
    2dc4:	73fb      	strb	r3, [r7, #15]

	data.commons.version = kConfigurationDataVersion;
    2dc6:	683b      	ldr	r3, [r7, #0]
    2dc8:	2204      	movs	r2, #4
    2dca:	605a      	str	r2, [r3, #4]
	data.commons.size = kConfigurationDataSize;
    2dcc:	683b      	ldr	r3, [r7, #0]
    2dce:	22ac      	movs	r2, #172	; 0xac
    2dd0:	601a      	str	r2, [r3, #0]
	data.commons.partNumber = PARTNUMBER;
    2dd2:	683b      	ldr	r3, [r7, #0]
    2dd4:	f240 720c 	movw	r2, #1804	; 0x70c
    2dd8:	609a      	str	r2, [r3, #8]



	

	return result;
    2dda:	7bfb      	ldrb	r3, [r7, #15]
	}
    2ddc:	4618      	mov	r0, r3
    2dde:	3714      	adds	r7, #20
    2de0:	46bd      	mov	sp, r7
    2de2:	bc80      	pop	{r7}
    2de4:	4770      	bx	lr

00002de6 <_ZN19PersistenceServices26restoreWorkingStateForGAINER9HVACState>:


	}

void PersistenceServices::restoreWorkingStateForGAIN(HVACState& v)
	{
    2de6:	b480      	push	{r7}
    2de8:	b083      	sub	sp, #12
    2dea:	af00      	add	r7, sp, #0
    2dec:	6078      	str	r0, [r7, #4]
    2dee:	6039      	str	r1, [r7, #0]
	int32	address;
	


	}
    2df0:	bf00      	nop
    2df2:	370c      	adds	r7, #12
    2df4:	46bd      	mov	sp, r7
    2df6:	bc80      	pop	{r7}
    2df8:	4770      	bx	lr
	...

00002dfc <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
	value += increment;

	}
	
bool PersistenceServices::IsConfigurationDataUpdated()
{
    2dfc:	b580      	push	{r7, lr}
    2dfe:	b086      	sub	sp, #24
    2e00:	af00      	add	r7, sp, #0
    2e02:	6078      	str	r0, [r7, #4]
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
    2e04:	4b17      	ldr	r3, [pc, #92]	; (2e64 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x68>)
    2e06:	685b      	ldr	r3, [r3, #4]
    2e08:	617b      	str	r3, [r7, #20]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	33dc      	adds	r3, #220	; 0xdc
    2e0e:	4619      	mov	r1, r3
    2e10:	4815      	ldr	r0, [pc, #84]	; (2e68 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2e12:	4b16      	ldr	r3, [pc, #88]	; (2e6c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x70>)
    2e14:	4798      	blx	r3
    2e16:	6138      	str	r0, [r7, #16]

	if ((verUp>0))
    2e18:	693b      	ldr	r3, [r7, #16]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d001      	beq.n	2e22 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x26>
	{
		return false;
    2e1e:	2300      	movs	r3, #0
    2e20:	e01c      	b.n	2e5c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
	} 
	else
	{
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
    2e22:	4811      	ldr	r0, [pc, #68]	; (2e68 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2e24:	4b12      	ldr	r3, [pc, #72]	; (2e70 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x74>)
    2e26:	4798      	blx	r3
    2e28:	60f8      	str	r0, [r7, #12]
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
    2e2a:	6878      	ldr	r0, [r7, #4]
    2e2c:	687b      	ldr	r3, [r7, #4]
    2e2e:	33dc      	adds	r3, #220	; 0xdc
    2e30:	22ac      	movs	r2, #172	; 0xac
    2e32:	4619      	mov	r1, r3
    2e34:	4b0f      	ldr	r3, [pc, #60]	; (2e74 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x78>)
    2e36:	4798      	blx	r3
    2e38:	60b8      	str	r0, [r7, #8]
		if (refCRC==crc)
    2e3a:	68fa      	ldr	r2, [r7, #12]
    2e3c:	68bb      	ldr	r3, [r7, #8]
    2e3e:	429a      	cmp	r2, r3
    2e40:	d10b      	bne.n	2e5a <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x5e>
		{
			verUp=configuration.commons.version;
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    2e48:	613b      	str	r3, [r7, #16]
			return (verUp>ver);
    2e4a:	693a      	ldr	r2, [r7, #16]
    2e4c:	697b      	ldr	r3, [r7, #20]
    2e4e:	429a      	cmp	r2, r3
    2e50:	bf8c      	ite	hi
    2e52:	2301      	movhi	r3, #1
    2e54:	2300      	movls	r3, #0
    2e56:	b2db      	uxtb	r3, r3
    2e58:	e000      	b.n	2e5c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
		} 
		else
		{
			return	false;
    2e5a:	2300      	movs	r3, #0
		}
		
	}
	return	false;

}
    2e5c:	4618      	mov	r0, r3
    2e5e:	3718      	adds	r7, #24
    2e60:	46bd      	mov	sp, r7
    2e62:	bd80      	pop	{r7, pc}
    2e64:	0001ed50 	.word	0x0001ed50
    2e68:	20001c80 	.word	0x20001c80
    2e6c:	0000292d 	.word	0x0000292d
    2e70:	00002999 	.word	0x00002999
    2e74:	00001239 	.word	0x00001239

00002e78 <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
	

	return result;
	}
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
    2e78:	b580      	push	{r7, lr}
    2e7a:	b084      	sub	sp, #16
    2e7c:	af00      	add	r7, sp, #0
    2e7e:	6078      	str	r0, [r7, #4]
    2e80:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadCRCApplicationState();
    2e82:	480b      	ldr	r0, [pc, #44]	; (2eb0 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x38>)
    2e84:	4b0b      	ldr	r3, [pc, #44]	; (2eb4 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x3c>)
    2e86:	4798      	blx	r3
    2e88:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
    2e8a:	687b      	ldr	r3, [r7, #4]
    2e8c:	226c      	movs	r2, #108	; 0x6c
    2e8e:	6839      	ldr	r1, [r7, #0]
    2e90:	4618      	mov	r0, r3
    2e92:	4b09      	ldr	r3, [pc, #36]	; (2eb8 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x40>)
    2e94:	4798      	blx	r3
    2e96:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    2e98:	68fa      	ldr	r2, [r7, #12]
    2e9a:	68bb      	ldr	r3, [r7, #8]
    2e9c:	429a      	cmp	r2, r3
    2e9e:	bf0c      	ite	eq
    2ea0:	2301      	moveq	r3, #1
    2ea2:	2300      	movne	r3, #0
    2ea4:	b2db      	uxtb	r3, r3
}
    2ea6:	4618      	mov	r0, r3
    2ea8:	3710      	adds	r7, #16
    2eaa:	46bd      	mov	sp, r7
    2eac:	bd80      	pop	{r7, pc}
    2eae:	bf00      	nop
    2eb0:	20001c80 	.word	0x20001c80
    2eb4:	00002c51 	.word	0x00002c51
    2eb8:	00001239 	.word	0x00001239

00002ebc <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState>:
bool PersistenceServices::IsFastStateDataValid(HVACState& as)
{
    2ebc:	b580      	push	{r7, lr}
    2ebe:	b084      	sub	sp, #16
    2ec0:	af00      	add	r7, sp, #0
    2ec2:	6078      	str	r0, [r7, #4]
    2ec4:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadFastCRCApplicationState();
    2ec6:	480b      	ldr	r0, [pc, #44]	; (2ef4 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x38>)
    2ec8:	4b0b      	ldr	r3, [pc, #44]	; (2ef8 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x3c>)
    2eca:	4798      	blx	r3
    2ecc:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(HVACState));
    2ece:	687b      	ldr	r3, [r7, #4]
    2ed0:	226c      	movs	r2, #108	; 0x6c
    2ed2:	6839      	ldr	r1, [r7, #0]
    2ed4:	4618      	mov	r0, r3
    2ed6:	4b09      	ldr	r3, [pc, #36]	; (2efc <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x40>)
    2ed8:	4798      	blx	r3
    2eda:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    2edc:	68fa      	ldr	r2, [r7, #12]
    2ede:	68bb      	ldr	r3, [r7, #8]
    2ee0:	429a      	cmp	r2, r3
    2ee2:	bf0c      	ite	eq
    2ee4:	2301      	moveq	r3, #1
    2ee6:	2300      	movne	r3, #0
    2ee8:	b2db      	uxtb	r3, r3
}
    2eea:	4618      	mov	r0, r3
    2eec:	3710      	adds	r7, #16
    2eee:	46bd      	mov	sp, r7
    2ef0:	bd80      	pop	{r7, pc}
    2ef2:	bf00      	nop
    2ef4:	20001c70 	.word	0x20001c70
    2ef8:	00001521 	.word	0x00001521
    2efc:	00001239 	.word	0x00001239

00002f00 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    2f00:	b590      	push	{r4, r7, lr}
    2f02:	b083      	sub	sp, #12
    2f04:	af00      	add	r7, sp, #0
    2f06:	6078      	str	r0, [r7, #4]
    2f08:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    2f0a:	683b      	ldr	r3, [r7, #0]
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d101      	bne.n	2f14 <_ZN5Print5writeEPKc+0x14>
    2f10:	2300      	movs	r3, #0
    2f12:	e00c      	b.n	2f2e <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    2f14:	687b      	ldr	r3, [r7, #4]
    2f16:	681b      	ldr	r3, [r3, #0]
    2f18:	3304      	adds	r3, #4
    2f1a:	681c      	ldr	r4, [r3, #0]
    2f1c:	6838      	ldr	r0, [r7, #0]
    2f1e:	4b06      	ldr	r3, [pc, #24]	; (2f38 <_ZN5Print5writeEPKc+0x38>)
    2f20:	4798      	blx	r3
    2f22:	4603      	mov	r3, r0
    2f24:	461a      	mov	r2, r3
    2f26:	6839      	ldr	r1, [r7, #0]
    2f28:	6878      	ldr	r0, [r7, #4]
    2f2a:	47a0      	blx	r4
    2f2c:	4603      	mov	r3, r0
    }
    2f2e:	4618      	mov	r0, r3
    2f30:	370c      	adds	r7, #12
    2f32:	46bd      	mov	sp, r7
    2f34:	bd90      	pop	{r4, r7, pc}
    2f36:	bf00      	nop
    2f38:	0001b181 	.word	0x0001b181

00002f3c <_ZL24HVACOperationTimeElapsedPK10timer_task>:
#include "CBIT_Class.h"
#include "FlapperValve_Class.h"
#include "TemperatureSensors_Class.h"

States_Class*	ptrStatesClass;
static void  HVACOperationTimeElapsed(const struct timer_task *const timer_task){
    2f3c:	b480      	push	{r7}
    2f3e:	b083      	sub	sp, #12
    2f40:	af00      	add	r7, sp, #0
    2f42:	6078      	str	r0, [r7, #4]
	ptrStatesClass->timeElapsed=true;
    2f44:	4b04      	ldr	r3, [pc, #16]	; (2f58 <_ZL24HVACOperationTimeElapsedPK10timer_task+0x1c>)
    2f46:	681b      	ldr	r3, [r3, #0]
    2f48:	2201      	movs	r2, #1
    2f4a:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
}
    2f4e:	bf00      	nop
    2f50:	370c      	adds	r7, #12
    2f52:	46bd      	mov	sp, r7
    2f54:	bc80      	pop	{r7}
    2f56:	4770      	bx	lr
    2f58:	20008048 	.word	0x20008048

00002f5c <_ZL14HVACTimerTicksPK10timer_task>:
static void HVACTimerTicks(const struct timer_task *const timer_task)
{
    2f5c:	b480      	push	{r7}
    2f5e:	b083      	sub	sp, #12
    2f60:	af00      	add	r7, sp, #0
    2f62:	6078      	str	r0, [r7, #4]
	hvacTimer.ticks++;
    2f64:	4b04      	ldr	r3, [pc, #16]	; (2f78 <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2f66:	689b      	ldr	r3, [r3, #8]
    2f68:	3301      	adds	r3, #1
    2f6a:	4a03      	ldr	r2, [pc, #12]	; (2f78 <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2f6c:	6093      	str	r3, [r2, #8]
}
    2f6e:	bf00      	nop
    2f70:	370c      	adds	r7, #12
    2f72:	46bd      	mov	sp, r7
    2f74:	bc80      	pop	{r7}
    2f76:	4770      	bx	lr
    2f78:	20009e24 	.word	0x20009e24

00002f7c <_ZN12States_ClassC1Ev>:

	// default constructor
States_Class::States_Class(void)
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b082      	sub	sp, #8
    2f80:	af00      	add	r7, sp, #0
    2f82:	6078      	str	r0, [r7, #4]
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	4618      	mov	r0, r3
    2f88:	4b11      	ldr	r3, [pc, #68]	; (2fd0 <_ZN12States_ClassC1Ev+0x54>)
    2f8a:	4798      	blx	r3
    2f8c:	687b      	ldr	r3, [r7, #4]
    2f8e:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
    2f92:	4618      	mov	r0, r3
    2f94:	4b0f      	ldr	r3, [pc, #60]	; (2fd4 <_ZN12States_ClassC1Ev+0x58>)
    2f96:	4798      	blx	r3
    2f98:	4a0f      	ldr	r2, [pc, #60]	; (2fd8 <_ZN12States_ClassC1Ev+0x5c>)
    2f9a:	687b      	ldr	r3, [r7, #4]
    2f9c:	601a      	str	r2, [r3, #0]
{
	ptrStatesClass=this;
    2f9e:	4a0f      	ldr	r2, [pc, #60]	; (2fdc <_ZN12States_ClassC1Ev+0x60>)
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	6013      	str	r3, [r2, #0]
	listener.eventHandler = NULL;
    2fa4:	4b0e      	ldr	r3, [pc, #56]	; (2fe0 <_ZN12States_ClassC1Ev+0x64>)
    2fa6:	2200      	movs	r2, #0
    2fa8:	615a      	str	r2, [r3, #20]
	hvacState=defaultState;
    2faa:	687a      	ldr	r2, [r7, #4]
    2fac:	687b      	ldr	r3, [r7, #4]
    2fae:	f502 7064 	add.w	r0, r2, #912	; 0x390
    2fb2:	3304      	adds	r3, #4
    2fb4:	226c      	movs	r2, #108	; 0x6c
    2fb6:	4619      	mov	r1, r3
    2fb8:	4b0a      	ldr	r3, [pc, #40]	; (2fe4 <_ZN12States_ClassC1Ev+0x68>)
    2fba:	4798      	blx	r3
	isOK=false;
    2fbc:	687b      	ldr	r3, [r7, #4]
    2fbe:	2200      	movs	r2, #0
    2fc0:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
}
    2fc4:	687b      	ldr	r3, [r7, #4]
    2fc6:	4618      	mov	r0, r3
    2fc8:	3708      	adds	r7, #8
    2fca:	46bd      	mov	sp, r7
    2fcc:	bd80      	pop	{r7, pc}
    2fce:	bf00      	nop
    2fd0:	00000e1d 	.word	0x00000e1d
    2fd4:	00001dad 	.word	0x00001dad
    2fd8:	0001f444 	.word	0x0001f444
    2fdc:	20008048 	.word	0x20008048
    2fe0:	20009788 	.word	0x20009788
    2fe4:	0001af55 	.word	0x0001af55

00002fe8 <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    2fe8:	b580      	push	{r7, lr}
    2fea:	b082      	sub	sp, #8
    2fec:	af00      	add	r7, sp, #0
    2fee:	6078      	str	r0, [r7, #4]
    2ff0:	4a08      	ldr	r2, [pc, #32]	; (3014 <_ZN12States_ClassD1Ev+0x2c>)
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	601a      	str	r2, [r3, #0]
    2ff6:	687b      	ldr	r3, [r7, #4]
    2ff8:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
    2ffc:	4618      	mov	r0, r3
    2ffe:	4b06      	ldr	r3, [pc, #24]	; (3018 <_ZN12States_ClassD1Ev+0x30>)
    3000:	4798      	blx	r3
    3002:	687b      	ldr	r3, [r7, #4]
    3004:	4618      	mov	r0, r3
    3006:	4b05      	ldr	r3, [pc, #20]	; (301c <_ZN12States_ClassD1Ev+0x34>)
    3008:	4798      	blx	r3
{
} //~States_Class
    300a:	687b      	ldr	r3, [r7, #4]
    300c:	4618      	mov	r0, r3
    300e:	3708      	adds	r7, #8
    3010:	46bd      	mov	sp, r7
    3012:	bd80      	pop	{r7, pc}
    3014:	0001f444 	.word	0x0001f444
    3018:	00001dc1 	.word	0x00001dc1
    301c:	00000e7d 	.word	0x00000e7d

00003020 <_ZN12States_Class4InitEv>:

bool States_Class::Init(void){
    3020:	b580      	push	{r7, lr}
    3022:	b082      	sub	sp, #8
    3024:	af00      	add	r7, sp, #0
    3026:	6078      	str	r0, [r7, #4]
	if (hvacTimer.Init())
    3028:	4814      	ldr	r0, [pc, #80]	; (307c <_ZN12States_Class4InitEv+0x5c>)
    302a:	4b15      	ldr	r3, [pc, #84]	; (3080 <_ZN12States_Class4InitEv+0x60>)
    302c:	4798      	blx	r3
    302e:	4603      	mov	r3, r0
    3030:	2b00      	cmp	r3, #0
    3032:	d004      	beq.n	303e <_ZN12States_Class4InitEv+0x1e>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACTimerTicks),1);
    3034:	2201      	movs	r2, #1
    3036:	4913      	ldr	r1, [pc, #76]	; (3084 <_ZN12States_Class4InitEv+0x64>)
    3038:	4810      	ldr	r0, [pc, #64]	; (307c <_ZN12States_Class4InitEv+0x5c>)
    303a:	4b13      	ldr	r3, [pc, #76]	; (3088 <_ZN12States_Class4InitEv+0x68>)
    303c:	4798      	blx	r3
	}
	isOK=temperatures.Init();
    303e:	4813      	ldr	r0, [pc, #76]	; (308c <_ZN12States_Class4InitEv+0x6c>)
    3040:	4b13      	ldr	r3, [pc, #76]	; (3090 <_ZN12States_Class4InitEv+0x70>)
    3042:	4798      	blx	r3
    3044:	4603      	mov	r3, r0
    3046:	461a      	mov	r2, r3
    3048:	687b      	ldr	r3, [r7, #4]
    304a:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
	hvacState.hvacStatus.statusBits.flapValve1=fv1.Init();
    304e:	4811      	ldr	r0, [pc, #68]	; (3094 <_ZN12States_Class4InitEv+0x74>)
    3050:	4b11      	ldr	r3, [pc, #68]	; (3098 <_ZN12States_Class4InitEv+0x78>)
    3052:	4798      	blx	r3
    3054:	4603      	mov	r3, r0
    3056:	461a      	mov	r2, r3
    3058:	687b      	ldr	r3, [r7, #4]
    305a:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
	isOK=hvacState.hvacStatus.statusBits.flapValve1;
    305e:	687b      	ldr	r3, [r7, #4]
    3060:	f893 23a7 	ldrb.w	r2, [r3, #935]	; 0x3a7
    3064:	687b      	ldr	r3, [r7, #4]
    3066:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
	return isOK;
    306a:	687b      	ldr	r3, [r7, #4]
    306c:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
    3070:	b2db      	uxtb	r3, r3
	
}
    3072:	4618      	mov	r0, r3
    3074:	3708      	adds	r7, #8
    3076:	46bd      	mov	sp, r7
    3078:	bd80      	pop	{r7, pc}
    307a:	bf00      	nop
    307c:	20009e24 	.word	0x20009e24
    3080:	00016915 	.word	0x00016915
    3084:	00002f5d 	.word	0x00002f5d
    3088:	00016a35 	.word	0x00016a35
    308c:	20009820 	.word	0x20009820
    3090:	00014cbd 	.word	0x00014cbd
    3094:	200014b4 	.word	0x200014b4
    3098:	000019f9 	.word	0x000019f9

0000309c <_ZN12States_Class16ControllerResumeEh>:
void States_Class::ControllerResume(uint8_t	operationMode){
    309c:	b590      	push	{r4, r7, lr}
    309e:	b08f      	sub	sp, #60	; 0x3c
    30a0:	af02      	add	r7, sp, #8
    30a2:	6078      	str	r0, [r7, #4]
    30a4:	460b      	mov	r3, r1
    30a6:	70fb      	strb	r3, [r7, #3]
	event e;
    30a8:	f107 031c 	add.w	r3, r7, #28
    30ac:	4618      	mov	r0, r3
    30ae:	4b45      	ldr	r3, [pc, #276]	; (31c4 <_ZN12States_Class16ControllerResumeEh+0x128>)
    30b0:	4798      	blx	r3
	bool done(false);
    30b2:	2300      	movs	r3, #0
    30b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	
	
		if (operationMode==0)
    30b8:	78fb      	ldrb	r3, [r7, #3]
    30ba:	2b00      	cmp	r3, #0
    30bc:	d115      	bne.n	30ea <_ZN12States_Class16ControllerResumeEh+0x4e>
		{
			if (timeElapsed)
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	f893 338d 	ldrb.w	r3, [r3, #909]	; 0x38d
    30c4:	b2db      	uxtb	r3, r3
    30c6:	2b00      	cmp	r3, #0
    30c8:	d00f      	beq.n	30ea <_ZN12States_Class16ControllerResumeEh+0x4e>
			{
				usb<<"Air Conditioning System Operating"<<NEWLINE;
    30ca:	493f      	ldr	r1, [pc, #252]	; (31c8 <_ZN12States_Class16ControllerResumeEh+0x12c>)
    30cc:	483f      	ldr	r0, [pc, #252]	; (31cc <_ZN12States_Class16ControllerResumeEh+0x130>)
    30ce:	4b40      	ldr	r3, [pc, #256]	; (31d0 <_ZN12States_Class16ControllerResumeEh+0x134>)
    30d0:	4798      	blx	r3
    30d2:	4603      	mov	r3, r0
    30d4:	493f      	ldr	r1, [pc, #252]	; (31d4 <_ZN12States_Class16ControllerResumeEh+0x138>)
    30d6:	4618      	mov	r0, r3
    30d8:	4b3f      	ldr	r3, [pc, #252]	; (31d8 <_ZN12States_Class16ControllerResumeEh+0x13c>)
    30da:	4798      	blx	r3
				timeElapsed=false;
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	2200      	movs	r2, #0
    30e0:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
				delay_ms(10);
    30e4:	200a      	movs	r0, #10
    30e6:	4b3d      	ldr	r3, [pc, #244]	; (31dc <_ZN12States_Class16ControllerResumeEh+0x140>)
    30e8:	4798      	blx	r3
				//alu.PrepareNewTask(kALUCheckCommunication);
				
			}
		}
		if (hvacState.currentState==kHVACStateLeaving)
    30ea:	687b      	ldr	r3, [r7, #4]
    30ec:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
    30f0:	2b14      	cmp	r3, #20
    30f2:	d109      	bne.n	3108 <_ZN12States_Class16ControllerResumeEh+0x6c>
		{
			prepareStateChangeEvent(hvacState.lastState);
    30f4:	687b      	ldr	r3, [r7, #4]
    30f6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
    30fa:	b29b      	uxth	r3, r3
    30fc:	2200      	movs	r2, #0
    30fe:	4619      	mov	r1, r3
    3100:	6878      	ldr	r0, [r7, #4]
    3102:	4b37      	ldr	r3, [pc, #220]	; (31e0 <_ZN12States_Class16ControllerResumeEh+0x144>)
    3104:	4798      	blx	r3
    3106:	e004      	b.n	3112 <_ZN12States_Class16ControllerResumeEh+0x76>
			
		} 
		else
		{
			prepareStateChangeEvent(kHVACStateInitialize);
    3108:	2200      	movs	r2, #0
    310a:	2102      	movs	r1, #2
    310c:	6878      	ldr	r0, [r7, #4]
    310e:	4b34      	ldr	r3, [pc, #208]	; (31e0 <_ZN12States_Class16ControllerResumeEh+0x144>)
    3110:	4798      	blx	r3
		}
		
		if (operationMode>0)
    3112:	78fb      	ldrb	r3, [r7, #3]
    3114:	2b00      	cmp	r3, #0
    3116:	dd4c      	ble.n	31b2 <_ZN12States_Class16ControllerResumeEh+0x116>
		{
			
			event	e;
    3118:	f107 030c 	add.w	r3, r7, #12
    311c:	4618      	mov	r0, r3
    311e:	4b29      	ldr	r3, [pc, #164]	; (31c4 <_ZN12States_Class16ControllerResumeEh+0x128>)
    3120:	4798      	blx	r3
			listener.eventHandler=&States_Class::CheckEvents;
    3122:	4b30      	ldr	r3, [pc, #192]	; (31e4 <_ZN12States_Class16ControllerResumeEh+0x148>)
    3124:	4a30      	ldr	r2, [pc, #192]	; (31e8 <_ZN12States_Class16ControllerResumeEh+0x14c>)
    3126:	615a      	str	r2, [r3, #20]
			while ((cBit.IsOK())&&(!done))
    3128:	4830      	ldr	r0, [pc, #192]	; (31ec <_ZN12States_Class16ControllerResumeEh+0x150>)
    312a:	4b31      	ldr	r3, [pc, #196]	; (31f0 <_ZN12States_Class16ControllerResumeEh+0x154>)
    312c:	4798      	blx	r3
    312e:	4603      	mov	r3, r0
    3130:	2b00      	cmp	r3, #0
    3132:	d008      	beq.n	3146 <_ZN12States_Class16ControllerResumeEh+0xaa>
    3134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3138:	f083 0301 	eor.w	r3, r3, #1
    313c:	b2db      	uxtb	r3, r3
    313e:	2b00      	cmp	r3, #0
    3140:	d001      	beq.n	3146 <_ZN12States_Class16ControllerResumeEh+0xaa>
    3142:	2301      	movs	r3, #1
    3144:	e000      	b.n	3148 <_ZN12States_Class16ControllerResumeEh+0xac>
    3146:	2300      	movs	r3, #0
    3148:	2b00      	cmp	r3, #0
    314a:	d038      	beq.n	31be <_ZN12States_Class16ControllerResumeEh+0x122>
			{
				if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent,2))
    314c:	f107 010c 	add.w	r1, r7, #12
    3150:	2302      	movs	r3, #2
    3152:	9300      	str	r3, [sp, #0]
    3154:	f44f 7300 	mov.w	r3, #512	; 0x200
    3158:	f44f 7200 	mov.w	r2, #512	; 0x200
    315c:	4821      	ldr	r0, [pc, #132]	; (31e4 <_ZN12States_Class16ControllerResumeEh+0x148>)
    315e:	4c25      	ldr	r4, [pc, #148]	; (31f4 <_ZN12States_Class16ControllerResumeEh+0x158>)
    3160:	47a0      	blx	r4
    3162:	4603      	mov	r3, r0
    3164:	2b00      	cmp	r3, #0
    3166:	d00d      	beq.n	3184 <_ZN12States_Class16ControllerResumeEh+0xe8>
				{
					if (e.data.wordData[0]!=kHVACStateLeaving)
    3168:	8abb      	ldrh	r3, [r7, #20]
    316a:	2b14      	cmp	r3, #20
    316c:	d006      	beq.n	317c <_ZN12States_Class16ControllerResumeEh+0xe0>
					{
						handleHVACEvent(e);
    316e:	f107 030c 	add.w	r3, r7, #12
    3172:	4619      	mov	r1, r3
    3174:	6878      	ldr	r0, [r7, #4]
    3176:	4b20      	ldr	r3, [pc, #128]	; (31f8 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    3178:	4798      	blx	r3
    317a:	e7d5      	b.n	3128 <_ZN12States_Class16ControllerResumeEh+0x8c>
					}
					else 
					{
						done=true;
    317c:	2301      	movs	r3, #1
    317e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    3182:	e7d1      	b.n	3128 <_ZN12States_Class16ControllerResumeEh+0x8c>
					}
					
				}
				else if (listener.WaitForEvent(e, kALUEventClass, kAnyEventType,1)){
    3184:	f107 010c 	add.w	r1, r7, #12
    3188:	2301      	movs	r3, #1
    318a:	9300      	str	r3, [sp, #0]
    318c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3190:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3194:	4813      	ldr	r0, [pc, #76]	; (31e4 <_ZN12States_Class16ControllerResumeEh+0x148>)
    3196:	4c19      	ldr	r4, [pc, #100]	; (31fc <_ZN12States_Class16ControllerResumeEh+0x160>)
    3198:	47a0      	blx	r4
    319a:	4603      	mov	r3, r0
    319c:	2b00      	cmp	r3, #0
    319e:	d0c3      	beq.n	3128 <_ZN12States_Class16ControllerResumeEh+0x8c>
					alu.PrepareNewEvent(kALUEventCheckPheripherals);
    31a0:	2200      	movs	r2, #0
    31a2:	2105      	movs	r1, #5
    31a4:	4816      	ldr	r0, [pc, #88]	; (3200 <_ZN12States_Class16ControllerResumeEh+0x164>)
    31a6:	4b17      	ldr	r3, [pc, #92]	; (3204 <_ZN12States_Class16ControllerResumeEh+0x168>)
    31a8:	4798      	blx	r3
					done=true;
    31aa:	2301      	movs	r3, #1
    31ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while ((cBit.IsOK())&&(!done))
    31b0:	e7ba      	b.n	3128 <_ZN12States_Class16ControllerResumeEh+0x8c>
				}
			}
			
		}else{
			alu.PrepareNewEvent(kALUEventSimpleStart);
    31b2:	2200      	movs	r2, #0
    31b4:	2104      	movs	r1, #4
    31b6:	4812      	ldr	r0, [pc, #72]	; (3200 <_ZN12States_Class16ControllerResumeEh+0x164>)
    31b8:	4b12      	ldr	r3, [pc, #72]	; (3204 <_ZN12States_Class16ControllerResumeEh+0x168>)
    31ba:	4798      	blx	r3
			return;
    31bc:	bf00      	nop
		}
		
}
    31be:	3734      	adds	r7, #52	; 0x34
    31c0:	46bd      	mov	sp, r7
    31c2:	bd90      	pop	{r4, r7, pc}
    31c4:	000002ed 	.word	0x000002ed
    31c8:	0001f324 	.word	0x0001f324
    31cc:	20009e88 	.word	0x20009e88
    31d0:	00003e7d 	.word	0x00003e7d
    31d4:	0001f348 	.word	0x0001f348
    31d8:	00000acd 	.word	0x00000acd
    31dc:	00006021 	.word	0x00006021
    31e0:	00003c0d 	.word	0x00003c0d
    31e4:	20009788 	.word	0x20009788
    31e8:	00003e09 	.word	0x00003e09
    31ec:	200013a8 	.word	0x200013a8
    31f0:	00000da7 	.word	0x00000da7
    31f4:	0001406d 	.word	0x0001406d
    31f8:	00003405 	.word	0x00003405
    31fc:	000140a5 	.word	0x000140a5
    3200:	20000bd8 	.word	0x20000bd8
    3204:	000008e9 	.word	0x000008e9

00003208 <_ZN12States_Class5StartEh>:

void States_Class::Start(uint8_t	operationMode)
	{
    3208:	b590      	push	{r4, r7, lr}
    320a:	b08d      	sub	sp, #52	; 0x34
    320c:	af02      	add	r7, sp, #8
    320e:	6078      	str	r0, [r7, #4]
    3210:	460b      	mov	r3, r1
    3212:	70fb      	strb	r3, [r7, #3]
	hvacState.currentState = kHVACStateStart;
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	2200      	movs	r2, #0
    3218:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	bool done(false);
    321c:	2300      	movs	r3, #0
    321e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (operationMode==0)
    3222:	78fb      	ldrb	r3, [r7, #3]
    3224:	2b00      	cmp	r3, #0
    3226:	d113      	bne.n	3250 <_ZN12States_Class5StartEh+0x48>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACOperationTimeElapsed),100);
    3228:	2264      	movs	r2, #100	; 0x64
    322a:	4956      	ldr	r1, [pc, #344]	; (3384 <_ZN12States_Class5StartEh+0x17c>)
    322c:	4856      	ldr	r0, [pc, #344]	; (3388 <_ZN12States_Class5StartEh+0x180>)
    322e:	4b57      	ldr	r3, [pc, #348]	; (338c <_ZN12States_Class5StartEh+0x184>)
    3230:	4798      	blx	r3
		usb<<"Air Conditioning System Started"<<NEWLINE;
    3232:	4957      	ldr	r1, [pc, #348]	; (3390 <_ZN12States_Class5StartEh+0x188>)
    3234:	4857      	ldr	r0, [pc, #348]	; (3394 <_ZN12States_Class5StartEh+0x18c>)
    3236:	4b58      	ldr	r3, [pc, #352]	; (3398 <_ZN12States_Class5StartEh+0x190>)
    3238:	4798      	blx	r3
    323a:	4603      	mov	r3, r0
    323c:	4957      	ldr	r1, [pc, #348]	; (339c <_ZN12States_Class5StartEh+0x194>)
    323e:	4618      	mov	r0, r3
    3240:	4b57      	ldr	r3, [pc, #348]	; (33a0 <_ZN12States_Class5StartEh+0x198>)
    3242:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskCheckCommunication);
    3244:	2200      	movs	r2, #0
    3246:	2102      	movs	r1, #2
    3248:	4856      	ldr	r0, [pc, #344]	; (33a4 <_ZN12States_Class5StartEh+0x19c>)
    324a:	4b57      	ldr	r3, [pc, #348]	; (33a8 <_ZN12States_Class5StartEh+0x1a0>)
    324c:	4798      	blx	r3
	
		return;
    324e:	e095      	b.n	337c <_ZN12States_Class5StartEh+0x174>
	}
		
		

    tick_t	timerValue = 0L;
    3250:	2300      	movs	r3, #0
    3252:	623b      	str	r3, [r7, #32]
    bool	isCurrentStateValid = false;
    3254:	2300      	movs	r3, #0
    3256:	77fb      	strb	r3, [r7, #31]
	memory.ReadFastApplicationState(lastState);
    3258:	687b      	ldr	r3, [r7, #4]
    325a:	f203 4304 	addw	r3, r3, #1028	; 0x404
    325e:	4619      	mov	r1, r3
    3260:	4852      	ldr	r0, [pc, #328]	; (33ac <_ZN12States_Class5StartEh+0x1a4>)
    3262:	4b53      	ldr	r3, [pc, #332]	; (33b0 <_ZN12States_Class5StartEh+0x1a8>)
    3264:	4798      	blx	r3
	
	if (calendar.WasInterrupted())
    3266:	4853      	ldr	r0, [pc, #332]	; (33b4 <_ZN12States_Class5StartEh+0x1ac>)
    3268:	4b53      	ldr	r3, [pc, #332]	; (33b8 <_ZN12States_Class5StartEh+0x1b0>)
    326a:	4798      	blx	r3
    326c:	4603      	mov	r3, r0
    326e:	2b00      	cmp	r3, #0
    3270:	d019      	beq.n	32a6 <_ZN12States_Class5StartEh+0x9e>
	{
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    3272:	4850      	ldr	r0, [pc, #320]	; (33b4 <_ZN12States_Class5StartEh+0x1ac>)
    3274:	4b51      	ldr	r3, [pc, #324]	; (33bc <_ZN12States_Class5StartEh+0x1b4>)
    3276:	4798      	blx	r3
    3278:	4602      	mov	r2, r0
    327a:	687b      	ldr	r3, [r7, #4]
    327c:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
		#ifdef OFFLINE
		resumeLastStateValid = ((powerInterruptDuration > 0) && (powerInterruptDuration < 5000L));
		#else
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    3280:	687b      	ldr	r3, [r7, #4]
    3282:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
    3286:	2b00      	cmp	r3, #0
    3288:	db08      	blt.n	329c <_ZN12States_Class5StartEh+0x94>
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
    3290:	f241 3287 	movw	r2, #4999	; 0x1387
    3294:	4293      	cmp	r3, r2
    3296:	dc01      	bgt.n	329c <_ZN12States_Class5StartEh+0x94>
    3298:	2201      	movs	r2, #1
    329a:	e000      	b.n	329e <_ZN12States_Class5StartEh+0x96>
    329c:	2200      	movs	r2, #0
    329e:	687b      	ldr	r3, [r7, #4]
    32a0:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
    32a4:	e002      	b.n	32ac <_ZN12States_Class5StartEh+0xa4>

		usb << "powerInterruptDuration was " << powerInterruptDuration << (resumeLastStateValid?" 200msec":" power resume") << newline;
		
		#endif
	}else{
		memory.LogResetEvent();
    32a6:	4846      	ldr	r0, [pc, #280]	; (33c0 <_ZN12States_Class5StartEh+0x1b8>)
    32a8:	4b46      	ldr	r3, [pc, #280]	; (33c4 <_ZN12States_Class5StartEh+0x1bc>)
    32aa:	4798      	blx	r3
	}

	

	//	Check persistent memory
	if (SetInitialState()<0){
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	4618      	mov	r0, r3
    32b0:	4b45      	ldr	r3, [pc, #276]	; (33c8 <_ZN12States_Class5StartEh+0x1c0>)
    32b2:	4798      	blx	r3
    32b4:	2300      	movs	r3, #0
    32b6:	2b00      	cmp	r3, #0
    32b8:	d003      	beq.n	32c2 <_ZN12States_Class5StartEh+0xba>
		SetDefaultState();
    32ba:	687b      	ldr	r3, [r7, #4]
    32bc:	4618      	mov	r0, r3
    32be:	4b43      	ldr	r3, [pc, #268]	; (33cc <_ZN12States_Class5StartEh+0x1c4>)
    32c0:	4798      	blx	r3
	}



	readResult=memory.ReadLastConfigurationData(configuration);
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	f503 638f 	add.w	r3, r3, #1144	; 0x478
    32c8:	4619      	mov	r1, r3
    32ca:	4841      	ldr	r0, [pc, #260]	; (33d0 <_ZN12States_Class5StartEh+0x1c8>)
    32cc:	4b41      	ldr	r3, [pc, #260]	; (33d4 <_ZN12States_Class5StartEh+0x1cc>)
    32ce:	4798      	blx	r3
    32d0:	4602      	mov	r2, r0
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	if (readResult>0)
    32d8:	687b      	ldr	r3, [r7, #4]
    32da:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
    32de:	2b00      	cmp	r3, #0
    32e0:	d005      	beq.n	32ee <_ZN12States_Class5StartEh+0xe6>
		{
		#if __DEBUG__ > 3
			usb << "readConfigurationDataArea failed!" << newline;
		#endif
		SetFactoryDefaults(0, true, false);
    32e2:	6878      	ldr	r0, [r7, #4]
    32e4:	2300      	movs	r3, #0
    32e6:	2201      	movs	r2, #1
    32e8:	2100      	movs	r1, #0
    32ea:	4c3b      	ldr	r4, [pc, #236]	; (33d8 <_ZN12States_Class5StartEh+0x1d0>)
    32ec:	47a0      	blx	r4
// #endif
	

	//interfaces.CheckInternalCommunication();

	if (readResult==0)
    32ee:	687b      	ldr	r3, [r7, #4]
    32f0:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
    32f4:	2b00      	cmp	r3, #0
    32f6:	d13b      	bne.n	3370 <_ZN12States_Class5StartEh+0x168>
    {
		prepareStateChangeEvent(kHVACStateInitialize);
    32f8:	2200      	movs	r2, #0
    32fa:	2102      	movs	r1, #2
    32fc:	6878      	ldr	r0, [r7, #4]
    32fe:	4b37      	ldr	r3, [pc, #220]	; (33dc <_ZN12States_Class5StartEh+0x1d4>)
    3300:	4798      	blx	r3
		event	e;
    3302:	f107 030c 	add.w	r3, r7, #12
    3306:	4618      	mov	r0, r3
    3308:	4b35      	ldr	r3, [pc, #212]	; (33e0 <_ZN12States_Class5StartEh+0x1d8>)
    330a:	4798      	blx	r3
		listener.eventHandler=&States_Class::CheckEvents;
    330c:	4b35      	ldr	r3, [pc, #212]	; (33e4 <_ZN12States_Class5StartEh+0x1dc>)
    330e:	4a36      	ldr	r2, [pc, #216]	; (33e8 <_ZN12States_Class5StartEh+0x1e0>)
    3310:	615a      	str	r2, [r3, #20]
		while ((cBit.IsOK())&&(!done))
    3312:	4836      	ldr	r0, [pc, #216]	; (33ec <_ZN12States_Class5StartEh+0x1e4>)
    3314:	4b36      	ldr	r3, [pc, #216]	; (33f0 <_ZN12States_Class5StartEh+0x1e8>)
    3316:	4798      	blx	r3
    3318:	4603      	mov	r3, r0
    331a:	2b00      	cmp	r3, #0
    331c:	d008      	beq.n	3330 <_ZN12States_Class5StartEh+0x128>
    331e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3322:	f083 0301 	eor.w	r3, r3, #1
    3326:	b2db      	uxtb	r3, r3
    3328:	2b00      	cmp	r3, #0
    332a:	d001      	beq.n	3330 <_ZN12States_Class5StartEh+0x128>
    332c:	2301      	movs	r3, #1
    332e:	e000      	b.n	3332 <_ZN12States_Class5StartEh+0x12a>
    3330:	2300      	movs	r3, #0
    3332:	2b00      	cmp	r3, #0
    3334:	d022      	beq.n	337c <_ZN12States_Class5StartEh+0x174>
		{
			if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent))
    3336:	4b2f      	ldr	r3, [pc, #188]	; (33f4 <_ZN12States_Class5StartEh+0x1ec>)
    3338:	681b      	ldr	r3, [r3, #0]
    333a:	f107 010c 	add.w	r1, r7, #12
    333e:	9300      	str	r3, [sp, #0]
    3340:	f44f 7300 	mov.w	r3, #512	; 0x200
    3344:	f44f 7200 	mov.w	r2, #512	; 0x200
    3348:	4826      	ldr	r0, [pc, #152]	; (33e4 <_ZN12States_Class5StartEh+0x1dc>)
    334a:	4c2b      	ldr	r4, [pc, #172]	; (33f8 <_ZN12States_Class5StartEh+0x1f0>)
    334c:	47a0      	blx	r4
    334e:	4603      	mov	r3, r0
    3350:	2b00      	cmp	r3, #0
    3352:	d0de      	beq.n	3312 <_ZN12States_Class5StartEh+0x10a>
			{
				if (e.data.wordData[0]!=kHVACStateLeaving)
    3354:	8abb      	ldrh	r3, [r7, #20]
    3356:	2b14      	cmp	r3, #20
    3358:	d006      	beq.n	3368 <_ZN12States_Class5StartEh+0x160>
				{
						handleHVACEvent(e);
    335a:	f107 030c 	add.w	r3, r7, #12
    335e:	4619      	mov	r1, r3
    3360:	6878      	ldr	r0, [r7, #4]
    3362:	4b26      	ldr	r3, [pc, #152]	; (33fc <_ZN12States_Class5StartEh+0x1f4>)
    3364:	4798      	blx	r3
    3366:	e7d4      	b.n	3312 <_ZN12States_Class5StartEh+0x10a>
				} 
				else
				{
					done=true;
    3368:	2301      	movs	r3, #1
    336a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while ((cBit.IsOK())&&(!done))
    336e:	e7d0      	b.n	3312 <_ZN12States_Class5StartEh+0x10a>

			}
		}
			
    }else{
		alu.PrepareNewEvent(kALUEventSimpleStart);
    3370:	2200      	movs	r2, #0
    3372:	2104      	movs	r1, #4
    3374:	480b      	ldr	r0, [pc, #44]	; (33a4 <_ZN12States_Class5StartEh+0x19c>)
    3376:	4b22      	ldr	r3, [pc, #136]	; (3400 <_ZN12States_Class5StartEh+0x1f8>)
    3378:	4798      	blx	r3
		return;
    337a:	bf00      	nop
    }



}
    337c:	372c      	adds	r7, #44	; 0x2c
    337e:	46bd      	mov	sp, r7
    3380:	bd90      	pop	{r4, r7, pc}
    3382:	bf00      	nop
    3384:	00002f3d 	.word	0x00002f3d
    3388:	20009e24 	.word	0x20009e24
    338c:	00016a35 	.word	0x00016a35
    3390:	0001f34c 	.word	0x0001f34c
    3394:	20009e88 	.word	0x20009e88
    3398:	00003e9d 	.word	0x00003e9d
    339c:	0001f348 	.word	0x0001f348
    33a0:	00000acd 	.word	0x00000acd
    33a4:	20000bd8 	.word	0x20000bd8
    33a8:	000008ad 	.word	0x000008ad
    33ac:	20001c70 	.word	0x20001c70
    33b0:	00001561 	.word	0x00001561
    33b4:	20009c18 	.word	0x20009c18
    33b8:	000166b9 	.word	0x000166b9
    33bc:	000165e1 	.word	0x000165e1
    33c0:	200015f8 	.word	0x200015f8
    33c4:	000012ed 	.word	0x000012ed
    33c8:	00000ef1 	.word	0x00000ef1
    33cc:	00001125 	.word	0x00001125
    33d0:	20001c80 	.word	0x20001c80
    33d4:	000028f9 	.word	0x000028f9
    33d8:	00000e9d 	.word	0x00000e9d
    33dc:	00003c0d 	.word	0x00003c0d
    33e0:	000002ed 	.word	0x000002ed
    33e4:	20009788 	.word	0x20009788
    33e8:	00003e09 	.word	0x00003e09
    33ec:	200013a8 	.word	0x200013a8
    33f0:	00000da7 	.word	0x00000da7
    33f4:	00020a60 	.word	0x00020a60
    33f8:	0001406d 	.word	0x0001406d
    33fc:	00003405 	.word	0x00003405
    3400:	000008e9 	.word	0x000008e9

00003404 <_ZN12States_Class15handleHVACEventER5event>:
	return result;
	}


void States_Class::handleHVACEvent(event& e)
	{
    3404:	b580      	push	{r7, lr}
    3406:	b084      	sub	sp, #16
    3408:	af00      	add	r7, sp, #0
    340a:	6078      	str	r0, [r7, #4]
    340c:	6039      	str	r1, [r7, #0]
	if (hvacState.currentState != kHVACStateResume){
    340e:	687b      	ldr	r3, [r7, #4]
    3410:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
    3414:	2b03      	cmp	r3, #3
    3416:	d006      	beq.n	3426 <_ZN12States_Class15handleHVACEventER5event+0x22>
		hvacState.callingState = hvacState.currentState;
    3418:	687b      	ldr	r3, [r7, #4]
    341a:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
    341e:	687b      	ldr	r3, [r7, #4]
    3420:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    3424:	e013      	b.n	344e <_ZN12States_Class15handleHVACEventER5event+0x4a>
	}else{
		hvacState.currentState = e.data.wordData[0];
    3426:	683b      	ldr	r3, [r7, #0]
    3428:	891b      	ldrh	r3, [r3, #8]
    342a:	461a      	mov	r2, r3
    342c:	687b      	ldr	r3, [r7, #4]
    342e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
		hvacState.stateFlags = e.data.wordData[1];
    3432:	683b      	ldr	r3, [r7, #0]
    3434:	895b      	ldrh	r3, [r3, #10]
    3436:	461a      	mov	r2, r3
    3438:	687b      	ldr	r3, [r7, #4]
    343a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
		hvacState.stateEntryTime = hvacTimer.Get_ticks();
    343e:	4871      	ldr	r0, [pc, #452]	; (3604 <_ZN12States_Class15handleHVACEventER5event+0x200>)
    3440:	4b71      	ldr	r3, [pc, #452]	; (3608 <_ZN12States_Class15handleHVACEventER5event+0x204>)
    3442:	4798      	blx	r3
    3444:	4603      	mov	r3, r0
    3446:	461a      	mov	r2, r3
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
	}


#if __DEBUG__ > 0
	
	usb << "handleGAINEvent received: switching from ";
    344e:	496f      	ldr	r1, [pc, #444]	; (360c <_ZN12States_Class15handleHVACEventER5event+0x208>)
    3450:	486f      	ldr	r0, [pc, #444]	; (3610 <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    3452:	4b70      	ldr	r3, [pc, #448]	; (3614 <_ZN12States_Class15handleHVACEventER5event+0x210>)
    3454:	4798      	blx	r3
	usb.write(gainStateDescription[hvacState.callingState]);
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
    345c:	4a6e      	ldr	r2, [pc, #440]	; (3618 <_ZN12States_Class15handleHVACEventER5event+0x214>)
    345e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3462:	4619      	mov	r1, r3
    3464:	486a      	ldr	r0, [pc, #424]	; (3610 <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    3466:	4b6d      	ldr	r3, [pc, #436]	; (361c <_ZN12States_Class15handleHVACEventER5event+0x218>)
    3468:	4798      	blx	r3
	usb << " to ";
    346a:	496d      	ldr	r1, [pc, #436]	; (3620 <_ZN12States_Class15handleHVACEventER5event+0x21c>)
    346c:	4868      	ldr	r0, [pc, #416]	; (3610 <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    346e:	4b6d      	ldr	r3, [pc, #436]	; (3624 <_ZN12States_Class15handleHVACEventER5event+0x220>)
    3470:	4798      	blx	r3
	usb.write(gainStateDescription[hvacState.currentState]);
    3472:	687b      	ldr	r3, [r7, #4]
    3474:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
    3478:	4a67      	ldr	r2, [pc, #412]	; (3618 <_ZN12States_Class15handleHVACEventER5event+0x214>)
    347a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    347e:	4619      	mov	r1, r3
    3480:	4863      	ldr	r0, [pc, #396]	; (3610 <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    3482:	4b66      	ldr	r3, [pc, #408]	; (361c <_ZN12States_Class15handleHVACEventER5event+0x218>)
    3484:	4798      	blx	r3
	usb << " (flags == " << hvacState.stateFlags << ')' << NEWLINE;
    3486:	4968      	ldr	r1, [pc, #416]	; (3628 <_ZN12States_Class15handleHVACEventER5event+0x224>)
    3488:	4861      	ldr	r0, [pc, #388]	; (3610 <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    348a:	4b68      	ldr	r3, [pc, #416]	; (362c <_ZN12States_Class15handleHVACEventER5event+0x228>)
    348c:	4798      	blx	r3
    348e:	4602      	mov	r2, r0
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
    3496:	4619      	mov	r1, r3
    3498:	4610      	mov	r0, r2
    349a:	4b65      	ldr	r3, [pc, #404]	; (3630 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    349c:	4798      	blx	r3
    349e:	4602      	mov	r2, r0
    34a0:	2329      	movs	r3, #41	; 0x29
    34a2:	73fb      	strb	r3, [r7, #15]
    34a4:	f107 030f 	add.w	r3, r7, #15
    34a8:	4619      	mov	r1, r3
    34aa:	4610      	mov	r0, r2
    34ac:	4b61      	ldr	r3, [pc, #388]	; (3634 <_ZN12States_Class15handleHVACEventER5event+0x230>)
    34ae:	4798      	blx	r3
    34b0:	4603      	mov	r3, r0
    34b2:	4961      	ldr	r1, [pc, #388]	; (3638 <_ZN12States_Class15handleHVACEventER5event+0x234>)
    34b4:	4618      	mov	r0, r3
    34b6:	4b61      	ldr	r3, [pc, #388]	; (363c <_ZN12States_Class15handleHVACEventER5event+0x238>)
    34b8:	4798      	blx	r3
	
#endif

	saveCurrentState();
    34ba:	6878      	ldr	r0, [r7, #4]
    34bc:	4b60      	ldr	r3, [pc, #384]	; (3640 <_ZN12States_Class15handleHVACEventER5event+0x23c>)
    34be:	4798      	blx	r3

	switch (hvacState.currentState)
    34c0:	687b      	ldr	r3, [r7, #4]
    34c2:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
    34c6:	3b02      	subs	r3, #2
    34c8:	2b12      	cmp	r3, #18
    34ca:	f200 8091 	bhi.w	35f0 <_ZN12States_Class15handleHVACEventER5event+0x1ec>
    34ce:	a201      	add	r2, pc, #4	; (adr r2, 34d4 <_ZN12States_Class15handleHVACEventER5event+0xd0>)
    34d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    34d4:	00003521 	.word	0x00003521
    34d8:	00003531 	.word	0x00003531
    34dc:	00003541 	.word	0x00003541
    34e0:	00003551 	.word	0x00003551
    34e4:	00003561 	.word	0x00003561
    34e8:	00003571 	.word	0x00003571
    34ec:	000035f1 	.word	0x000035f1
    34f0:	000035f1 	.word	0x000035f1
    34f4:	00003581 	.word	0x00003581
    34f8:	000035a1 	.word	0x000035a1
    34fc:	000035f1 	.word	0x000035f1
    3500:	00003591 	.word	0x00003591
    3504:	000035f1 	.word	0x000035f1
    3508:	000035b1 	.word	0x000035b1
    350c:	000035c1 	.word	0x000035c1
    3510:	000035d1 	.word	0x000035d1
    3514:	000035f1 	.word	0x000035f1
    3518:	000035f1 	.word	0x000035f1
    351c:	000035e1 	.word	0x000035e1
		{
		case kHVACStateInitialize:
			handleStateInitialize(hvacState.stateFlags);
    3520:	687b      	ldr	r3, [r7, #4]
    3522:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    3526:	4619      	mov	r1, r3
    3528:	6878      	ldr	r0, [r7, #4]
    352a:	4b46      	ldr	r3, [pc, #280]	; (3644 <_ZN12States_Class15handleHVACEventER5event+0x240>)
    352c:	4798      	blx	r3
			break;
    352e:	e064      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		case kHVACStateResume:
			handleStateResume(hvacState.stateFlags);
    3530:	687b      	ldr	r3, [r7, #4]
    3532:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    3536:	4619      	mov	r1, r3
    3538:	6878      	ldr	r0, [r7, #4]
    353a:	4b43      	ldr	r3, [pc, #268]	; (3648 <_ZN12States_Class15handleHVACEventER5event+0x244>)
    353c:	4798      	blx	r3
			break;
    353e:	e05c      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		case kHVACStateStandbyOFF:
			handleStateStandbyOFF(hvacState.stateFlags);
    3540:	687b      	ldr	r3, [r7, #4]
    3542:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    3546:	4619      	mov	r1, r3
    3548:	6878      	ldr	r0, [r7, #4]
    354a:	4b40      	ldr	r3, [pc, #256]	; (364c <_ZN12States_Class15handleHVACEventER5event+0x248>)
    354c:	4798      	blx	r3
			break;
    354e:	e054      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		case kHVACStatePrepareStandbyON:
			handleStatePrepareStandbyON(hvacState.stateFlags);
    3550:	687b      	ldr	r3, [r7, #4]
    3552:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    3556:	4619      	mov	r1, r3
    3558:	6878      	ldr	r0, [r7, #4]
    355a:	4b3d      	ldr	r3, [pc, #244]	; (3650 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    355c:	4798      	blx	r3
			break;
    355e:	e04c      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		case kHVACStateStandbyON:
			handleStateStandbyON(hvacState.stateFlags);
    3560:	687b      	ldr	r3, [r7, #4]
    3562:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    3566:	4619      	mov	r1, r3
    3568:	6878      	ldr	r0, [r7, #4]
    356a:	4b3a      	ldr	r3, [pc, #232]	; (3654 <_ZN12States_Class15handleHVACEventER5event+0x250>)
    356c:	4798      	blx	r3
			break;
    356e:	e044      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		case kHVACStateStandbyReady:
			handleStateStandbyReady(hvacState.stateFlags);
    3570:	687b      	ldr	r3, [r7, #4]
    3572:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    3576:	4619      	mov	r1, r3
    3578:	6878      	ldr	r0, [r7, #4]
    357a:	4b37      	ldr	r3, [pc, #220]	; (3658 <_ZN12States_Class15handleHVACEventER5event+0x254>)
    357c:	4798      	blx	r3
			break;
    357e:	e03c      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		case kHVACStateON:
			handleStateON(hvacState.stateFlags);
    3580:	687b      	ldr	r3, [r7, #4]
    3582:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    3586:	4619      	mov	r1, r3
    3588:	6878      	ldr	r0, [r7, #4]
    358a:	4b34      	ldr	r3, [pc, #208]	; (365c <_ZN12States_Class15handleHVACEventER5event+0x258>)
    358c:	4798      	blx	r3
			break;
    358e:	e034      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		case kHVACStateFinished:
			handleStateFinished(hvacState.stateFlags);
    3590:	687b      	ldr	r3, [r7, #4]
    3592:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    3596:	4619      	mov	r1, r3
    3598:	6878      	ldr	r0, [r7, #4]
    359a:	4b31      	ldr	r3, [pc, #196]	; (3660 <_ZN12States_Class15handleHVACEventER5event+0x25c>)
    359c:	4798      	blx	r3
			break;
    359e:	e02c      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		case kHVACStateStoppedProcess:
			StateStoppedProcess(hvacState.stateFlags);
    35a0:	687b      	ldr	r3, [r7, #4]
    35a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    35a6:	4619      	mov	r1, r3
    35a8:	6878      	ldr	r0, [r7, #4]
    35aa:	4b2e      	ldr	r3, [pc, #184]	; (3664 <_ZN12States_Class15handleHVACEventER5event+0x260>)
    35ac:	4798      	blx	r3
			break;
    35ae:	e024      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		case kHVACStateSelfProtect:
			handleStateSelfProtect(hvacState.stateFlags);
    35b0:	687b      	ldr	r3, [r7, #4]
    35b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    35b6:	4619      	mov	r1, r3
    35b8:	6878      	ldr	r0, [r7, #4]
    35ba:	4b2b      	ldr	r3, [pc, #172]	; (3668 <_ZN12States_Class15handleHVACEventER5event+0x264>)
    35bc:	4798      	blx	r3
			break;
    35be:	e01c      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		case kHVACStateError:
			handleStateError(hvacState.stateFlags);
    35c0:	687b      	ldr	r3, [r7, #4]
    35c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    35c6:	4619      	mov	r1, r3
    35c8:	6878      	ldr	r0, [r7, #4]
    35ca:	4b28      	ldr	r3, [pc, #160]	; (366c <_ZN12States_Class15handleHVACEventER5event+0x268>)
    35cc:	4798      	blx	r3
			break;
    35ce:	e014      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		case kHVACStateMaintenance:
			handleStateMaintenance(hvacState.stateFlags);
    35d0:	687b      	ldr	r3, [r7, #4]
    35d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    35d6:	4619      	mov	r1, r3
    35d8:	6878      	ldr	r0, [r7, #4]
    35da:	4b25      	ldr	r3, [pc, #148]	; (3670 <_ZN12States_Class15handleHVACEventER5event+0x26c>)
    35dc:	4798      	blx	r3
			break;
    35de:	e00c      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>
		case kHVACStateLeaving:
			StateLeaving(hvacState.stateFlags);
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
    35e6:	4619      	mov	r1, r3
    35e8:	6878      	ldr	r0, [r7, #4]
    35ea:	4b22      	ldr	r3, [pc, #136]	; (3674 <_ZN12States_Class15handleHVACEventER5event+0x270>)
    35ec:	4798      	blx	r3
		break;
    35ee:	e004      	b.n	35fa <_ZN12States_Class15handleHVACEventER5event+0x1f6>

		default:
			handleStateError(kHVACErrorIllegalStateTransition);
    35f0:	2102      	movs	r1, #2
    35f2:	6878      	ldr	r0, [r7, #4]
    35f4:	4b1d      	ldr	r3, [pc, #116]	; (366c <_ZN12States_Class15handleHVACEventER5event+0x268>)
    35f6:	4798      	blx	r3
			break;
    35f8:	bf00      	nop
		}
	}
    35fa:	bf00      	nop
    35fc:	3710      	adds	r7, #16
    35fe:	46bd      	mov	sp, r7
    3600:	bd80      	pop	{r7, pc}
    3602:	bf00      	nop
    3604:	20009e24 	.word	0x20009e24
    3608:	00016ae9 	.word	0x00016ae9
    360c:	0001f36c 	.word	0x0001f36c
    3610:	20009e88 	.word	0x20009e88
    3614:	00003ebd 	.word	0x00003ebd
    3618:	20000004 	.word	0x20000004
    361c:	00002f01 	.word	0x00002f01
    3620:	0001f398 	.word	0x0001f398
    3624:	00003edd 	.word	0x00003edd
    3628:	0001f3a0 	.word	0x0001f3a0
    362c:	000023dd 	.word	0x000023dd
    3630:	0000118d 	.word	0x0000118d
    3634:	00003efd 	.word	0x00003efd
    3638:	0001f348 	.word	0x0001f348
    363c:	00000acd 	.word	0x00000acd
    3640:	00003c81 	.word	0x00003c81
    3644:	00003679 	.word	0x00003679
    3648:	00003749 	.word	0x00003749
    364c:	00003801 	.word	0x00003801
    3650:	0000391d 	.word	0x0000391d
    3654:	000039ad 	.word	0x000039ad
    3658:	00003a15 	.word	0x00003a15
    365c:	00003a4d 	.word	0x00003a4d
    3660:	00003a99 	.word	0x00003a99
    3664:	00003b25 	.word	0x00003b25
    3668:	00003b65 	.word	0x00003b65
    366c:	00003b9d 	.word	0x00003b9d
    3670:	00003bd5 	.word	0x00003bd5
    3674:	00003ad1 	.word	0x00003ad1

00003678 <_ZN12States_Class21handleStateInitializeEm>:


void States_Class::handleStateInitialize(uint32 flags)
	{
    3678:	b580      	push	{r7, lr}
    367a:	b088      	sub	sp, #32
    367c:	af00      	add	r7, sp, #0
    367e:	6078      	str	r0, [r7, #4]
    3680:	6039      	str	r1, [r7, #0]
	event	e;
    3682:	f107 030c 	add.w	r3, r7, #12
    3686:	4618      	mov	r0, r3
    3688:	4b20      	ldr	r3, [pc, #128]	; (370c <_ZN12States_Class21handleStateInitializeEm+0x94>)
    368a:	4798      	blx	r3
	hvacState.currentState=kHVACStateInitialize;
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	2202      	movs	r2, #2
    3690:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
   	uint16	selfTestResult(kHVACNoError);
    3694:	2300      	movs	r3, #0
    3696:	83fb      	strh	r3, [r7, #30]
	
#if __DEBUG__ > 0
	
	usb << "handleStateInitialize: flags == 0x" << flags << NEWLINE;
    3698:	491d      	ldr	r1, [pc, #116]	; (3710 <_ZN12States_Class21handleStateInitializeEm+0x98>)
    369a:	481e      	ldr	r0, [pc, #120]	; (3714 <_ZN12States_Class21handleStateInitializeEm+0x9c>)
    369c:	4b1e      	ldr	r3, [pc, #120]	; (3718 <_ZN12States_Class21handleStateInitializeEm+0xa0>)
    369e:	4798      	blx	r3
    36a0:	4602      	mov	r2, r0
    36a2:	463b      	mov	r3, r7
    36a4:	4619      	mov	r1, r3
    36a6:	4610      	mov	r0, r2
    36a8:	4b1c      	ldr	r3, [pc, #112]	; (371c <_ZN12States_Class21handleStateInitializeEm+0xa4>)
    36aa:	4798      	blx	r3
    36ac:	4603      	mov	r3, r0
    36ae:	491c      	ldr	r1, [pc, #112]	; (3720 <_ZN12States_Class21handleStateInitializeEm+0xa8>)
    36b0:	4618      	mov	r0, r3
    36b2:	4b1c      	ldr	r3, [pc, #112]	; (3724 <_ZN12States_Class21handleStateInitializeEm+0xac>)
    36b4:	4798      	blx	r3
		
#endif
	
	
	//listener.CheckEvent();
	if (pBit.isOK)
    36b6:	4b1c      	ldr	r3, [pc, #112]	; (3728 <_ZN12States_Class21handleStateInitializeEm+0xb0>)
    36b8:	781b      	ldrb	r3, [r3, #0]
    36ba:	b2db      	uxtb	r3, r3
    36bc:	2b00      	cmp	r3, #0
    36be:	d01c      	beq.n	36fa <_ZN12States_Class21handleStateInitializeEm+0x82>
	{
		#if __DEBUG__ > 0
		
		usb << "handleStateInitialize" << NEWLINE;
    36c0:	491a      	ldr	r1, [pc, #104]	; (372c <_ZN12States_Class21handleStateInitializeEm+0xb4>)
    36c2:	4814      	ldr	r0, [pc, #80]	; (3714 <_ZN12States_Class21handleStateInitializeEm+0x9c>)
    36c4:	4b1a      	ldr	r3, [pc, #104]	; (3730 <_ZN12States_Class21handleStateInitializeEm+0xb8>)
    36c6:	4798      	blx	r3
    36c8:	4603      	mov	r3, r0
    36ca:	4915      	ldr	r1, [pc, #84]	; (3720 <_ZN12States_Class21handleStateInitializeEm+0xa8>)
    36cc:	4618      	mov	r0, r3
    36ce:	4b15      	ldr	r3, [pc, #84]	; (3724 <_ZN12States_Class21handleStateInitializeEm+0xac>)
    36d0:	4798      	blx	r3

		#ifdef _OFFLINE
			prepareStateChangeEvent( kHVACStateInterrupted);
			listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    36d2:	6878      	ldr	r0, [r7, #4]
    36d4:	4b17      	ldr	r3, [pc, #92]	; (3734 <_ZN12States_Class21handleStateInitializeEm+0xbc>)
    36d6:	4798      	blx	r3
    36d8:	4603      	mov	r3, r0
    36da:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kHVACNoError)
    36dc:	8bfb      	ldrh	r3, [r7, #30]
    36de:	2b00      	cmp	r3, #0
    36e0:	d10f      	bne.n	3702 <_ZN12States_Class21handleStateInitializeEm+0x8a>
		{
			prepareStateChangeEvent( kHVACStateStandbyOFF);
    36e2:	2200      	movs	r2, #0
    36e4:	2104      	movs	r1, #4
    36e6:	6878      	ldr	r0, [r7, #4]
    36e8:	4b13      	ldr	r3, [pc, #76]	; (3738 <_ZN12States_Class21handleStateInitializeEm+0xc0>)
    36ea:	4798      	blx	r3
			listener.SendEventSelf(e);
    36ec:	f107 030c 	add.w	r3, r7, #12
    36f0:	4619      	mov	r1, r3
    36f2:	4812      	ldr	r0, [pc, #72]	; (373c <_ZN12States_Class21handleStateInitializeEm+0xc4>)
    36f4:	4b12      	ldr	r3, [pc, #72]	; (3740 <_ZN12States_Class21handleStateInitializeEm+0xc8>)
    36f6:	4798      	blx	r3
	}



	
	}
    36f8:	e003      	b.n	3702 <_ZN12States_Class21handleStateInitializeEm+0x8a>
		Stop(0);
    36fa:	2100      	movs	r1, #0
    36fc:	6878      	ldr	r0, [r7, #4]
    36fe:	4b11      	ldr	r3, [pc, #68]	; (3744 <_ZN12States_Class21handleStateInitializeEm+0xcc>)
    3700:	4798      	blx	r3
	}
    3702:	bf00      	nop
    3704:	3720      	adds	r7, #32
    3706:	46bd      	mov	sp, r7
    3708:	bd80      	pop	{r7, pc}
    370a:	bf00      	nop
    370c:	000002ed 	.word	0x000002ed
    3710:	0001f3ac 	.word	0x0001f3ac
    3714:	20009e88 	.word	0x20009e88
    3718:	00003f21 	.word	0x00003f21
    371c:	0000118d 	.word	0x0000118d
    3720:	0001f348 	.word	0x0001f348
    3724:	00000acd 	.word	0x00000acd
    3728:	20008034 	.word	0x20008034
    372c:	0001f3d0 	.word	0x0001f3d0
    3730:	0000243d 	.word	0x0000243d
    3734:	00003c5d 	.word	0x00003c5d
    3738:	00003c0d 	.word	0x00003c0d
    373c:	20009788 	.word	0x20009788
    3740:	000141e9 	.word	0x000141e9
    3744:	00003d11 	.word	0x00003d11

00003748 <_ZN12States_Class17handleStateResumeEm>:


void States_Class::handleStateResume(uint32 flags)
	{
    3748:	b580      	push	{r7, lr}
    374a:	b088      	sub	sp, #32
    374c:	af00      	add	r7, sp, #0
    374e:	6078      	str	r0, [r7, #4]
    3750:	6039      	str	r1, [r7, #0]
	event	e;
    3752:	f107 030c 	add.w	r3, r7, #12
    3756:	4618      	mov	r0, r3
    3758:	4b22      	ldr	r3, [pc, #136]	; (37e4 <_ZN12States_Class17handleStateResumeEm+0x9c>)
    375a:	4798      	blx	r3
	uint8	currentState(hvacState.currentState);
    375c:	687b      	ldr	r3, [r7, #4]
    375e:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
    3762:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kHVACNoError);
    3764:	2300      	movs	r3, #0
    3766:	83bb      	strh	r3, [r7, #28]
#endif

#if __DEBUG__ > 3
	usb << "state.currentState (before) " << hvacState.currentState << newline;
#endif
	memory.restoreWorkingStateForGAIN(hvacState);
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	f503 7364 	add.w	r3, r3, #912	; 0x390
    376e:	4619      	mov	r1, r3
    3770:	481d      	ldr	r0, [pc, #116]	; (37e8 <_ZN12States_Class17handleStateResumeEm+0xa0>)
    3772:	4b1e      	ldr	r3, [pc, #120]	; (37ec <_ZN12States_Class17handleStateResumeEm+0xa4>)
    3774:	4798      	blx	r3
	usb << "state.currentState (after) " << hvacState.currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kHVACNoError)
    3776:	8bbb      	ldrh	r3, [r7, #28]
    3778:	2b00      	cmp	r3, #0
    377a:	d121      	bne.n	37c0 <_ZN12States_Class17handleStateResumeEm+0x78>
    {
        switch (hvacState.currentState)
    377c:	687b      	ldr	r3, [r7, #4]
    377e:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
    3782:	2b0a      	cmp	r3, #10
    3784:	d002      	beq.n	378c <_ZN12States_Class17handleStateResumeEm+0x44>
    3786:	2b0b      	cmp	r3, #11
    3788:	d00a      	beq.n	37a0 <_ZN12States_Class17handleStateResumeEm+0x58>
    378a:	e00f      	b.n	37ac <_ZN12States_Class17handleStateResumeEm+0x64>
        {
        case kHVACStateON:
            prepareStateChangeEvent( hvacState.currentState, true);
    378c:	687b      	ldr	r3, [r7, #4]
    378e:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
    3792:	b29b      	uxth	r3, r3
    3794:	2201      	movs	r2, #1
    3796:	4619      	mov	r1, r3
    3798:	6878      	ldr	r0, [r7, #4]
    379a:	4b15      	ldr	r3, [pc, #84]	; (37f0 <_ZN12States_Class17handleStateResumeEm+0xa8>)
    379c:	4798      	blx	r3
            break;
    379e:	e00f      	b.n	37c0 <_ZN12States_Class17handleStateResumeEm+0x78>

        case kHVACStateStoppedProcess:
            prepareStateChangeEvent( kHVACStateStoppedProcess);
    37a0:	2200      	movs	r2, #0
    37a2:	210b      	movs	r1, #11
    37a4:	6878      	ldr	r0, [r7, #4]
    37a6:	4b12      	ldr	r3, [pc, #72]	; (37f0 <_ZN12States_Class17handleStateResumeEm+0xa8>)
    37a8:	4798      	blx	r3
            break;
    37aa:	e009      	b.n	37c0 <_ZN12States_Class17handleStateResumeEm+0x78>

        default:
            prepareStateChangeEvent( hvacState.currentState);
    37ac:	687b      	ldr	r3, [r7, #4]
    37ae:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
    37b2:	b29b      	uxth	r3, r3
    37b4:	2200      	movs	r2, #0
    37b6:	4619      	mov	r1, r3
    37b8:	6878      	ldr	r0, [r7, #4]
    37ba:	4b0d      	ldr	r3, [pc, #52]	; (37f0 <_ZN12States_Class17handleStateResumeEm+0xa8>)
    37bc:	4798      	blx	r3
            break;
    37be:	bf00      	nop
        }
    }

	hvacState.currentState = currentState;
    37c0:	7ffa      	ldrb	r2, [r7, #31]
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8

	listener.CheckEvent();
    37c8:	480a      	ldr	r0, [pc, #40]	; (37f4 <_ZN12States_Class17handleStateResumeEm+0xac>)
    37ca:	4b0b      	ldr	r3, [pc, #44]	; (37f8 <_ZN12States_Class17handleStateResumeEm+0xb0>)
    37cc:	4798      	blx	r3
	listener.SendEventSelf(e);
    37ce:	f107 030c 	add.w	r3, r7, #12
    37d2:	4619      	mov	r1, r3
    37d4:	4807      	ldr	r0, [pc, #28]	; (37f4 <_ZN12States_Class17handleStateResumeEm+0xac>)
    37d6:	4b09      	ldr	r3, [pc, #36]	; (37fc <_ZN12States_Class17handleStateResumeEm+0xb4>)
    37d8:	4798      	blx	r3
	}
    37da:	bf00      	nop
    37dc:	3720      	adds	r7, #32
    37de:	46bd      	mov	sp, r7
    37e0:	bd80      	pop	{r7, pc}
    37e2:	bf00      	nop
    37e4:	000002ed 	.word	0x000002ed
    37e8:	20001ae4 	.word	0x20001ae4
    37ec:	00002de7 	.word	0x00002de7
    37f0:	00003c0d 	.word	0x00003c0d
    37f4:	20009788 	.word	0x20009788
    37f8:	000142cd 	.word	0x000142cd
    37fc:	000141e9 	.word	0x000141e9

00003800 <_ZN12States_Class21handleStateStandbyOFFEm>:
				
void States_Class::handleStateStandbyOFF(uint32 flags)
	{
    3800:	b590      	push	{r4, r7, lr}
    3802:	b08b      	sub	sp, #44	; 0x2c
    3804:	af02      	add	r7, sp, #8
    3806:	6078      	str	r0, [r7, #4]
    3808:	6039      	str	r1, [r7, #0]
	event	e;
    380a:	f107 030c 	add.w	r3, r7, #12
    380e:	4618      	mov	r0, r3
    3810:	4b38      	ldr	r3, [pc, #224]	; (38f4 <_ZN12States_Class21handleStateStandbyOFFEm+0xf4>)
    3812:	4798      	blx	r3
	hvacState.currentState=kHVACStateStandbyOFF;
    3814:	687b      	ldr	r3, [r7, #4]
    3816:	2204      	movs	r2, #4
    3818:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	bool	done(false);
    381c:	2300      	movs	r3, #0
    381e:	77fb      	strb	r3, [r7, #31]
	gotAluEvent=false;
    3820:	687b      	ldr	r3, [r7, #4]
    3822:	2200      	movs	r2, #0
    3824:	f883 2475 	strb.w	r2, [r3, #1141]	; 0x475
	gotHVACEvent=false;
    3828:	687b      	ldr	r3, [r7, #4]
    382a:	2200      	movs	r2, #0
    382c:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
   	
#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    3830:	4931      	ldr	r1, [pc, #196]	; (38f8 <_ZN12States_Class21handleStateStandbyOFFEm+0xf8>)
    3832:	4832      	ldr	r0, [pc, #200]	; (38fc <_ZN12States_Class21handleStateStandbyOFFEm+0xfc>)
    3834:	4b32      	ldr	r3, [pc, #200]	; (3900 <_ZN12States_Class21handleStateStandbyOFFEm+0x100>)
    3836:	4798      	blx	r3
    3838:	4603      	mov	r3, r0
    383a:	4932      	ldr	r1, [pc, #200]	; (3904 <_ZN12States_Class21handleStateStandbyOFFEm+0x104>)
    383c:	4618      	mov	r0, r3
    383e:	4b32      	ldr	r3, [pc, #200]	; (3908 <_ZN12States_Class21handleStateStandbyOFFEm+0x108>)
    3840:	4798      	blx	r3
		
#endif

	hvacState.smpsTemperatureOutOfRangeEventSent = false;
    3842:	687a      	ldr	r2, [r7, #4]
    3844:	f892 33f8 	ldrb.w	r3, [r2, #1016]	; 0x3f8
    3848:	f36f 0341 	bfc	r3, #1, #1
    384c:	f882 33f8 	strb.w	r3, [r2, #1016]	; 0x3f8
	hvacState.magnetronTemperatureOutOfRangeEventSent = false;
    3850:	687a      	ldr	r2, [r7, #4]
    3852:	f892 33f8 	ldrb.w	r3, [r2, #1016]	; 0x3f8
    3856:	f36f 03c3 	bfc	r3, #3, #1
    385a:	f882 33f8 	strb.w	r3, [r2, #1016]	; 0x3f8
	hvacState.exhaustTemperatureOutOfRangeEventSent = false;
    385e:	687a      	ldr	r2, [r7, #4]
    3860:	f892 33f8 	ldrb.w	r3, [r2, #1016]	; 0x3f8
    3864:	f36f 0382 	bfc	r3, #2, #1
    3868:	f882 33f8 	strb.w	r3, [r2, #1016]	; 0x3f8

	hvacState.magnetronFanFailureDetectionTime = forever;
    386c:	4b27      	ldr	r3, [pc, #156]	; (390c <_ZN12States_Class21handleStateStandbyOFFEm+0x10c>)
    386e:	681a      	ldr	r2, [r3, #0]
    3870:	687b      	ldr	r3, [r7, #4]
    3872:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
	
	while(!done){
    3876:	7ffb      	ldrb	r3, [r7, #31]
    3878:	2b00      	cmp	r3, #0
    387a:	d136      	bne.n	38ea <_ZN12States_Class21handleStateStandbyOFFEm+0xea>
		gotAluEvent=listener.WaitForEvent(e, kALUEventClass, kAnyEventType,1);
    387c:	f107 010c 	add.w	r1, r7, #12
    3880:	2301      	movs	r3, #1
    3882:	9300      	str	r3, [sp, #0]
    3884:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3888:	f44f 6280 	mov.w	r2, #1024	; 0x400
    388c:	4820      	ldr	r0, [pc, #128]	; (3910 <_ZN12States_Class21handleStateStandbyOFFEm+0x110>)
    388e:	4c21      	ldr	r4, [pc, #132]	; (3914 <_ZN12States_Class21handleStateStandbyOFFEm+0x114>)
    3890:	47a0      	blx	r4
    3892:	4603      	mov	r3, r0
    3894:	461a      	mov	r2, r3
    3896:	687b      	ldr	r3, [r7, #4]
    3898:	f883 2475 	strb.w	r2, [r3, #1141]	; 0x475
		if (!gotAluEvent)
    389c:	687b      	ldr	r3, [r7, #4]
    389e:	f893 3475 	ldrb.w	r3, [r3, #1141]	; 0x475
    38a2:	f083 0301 	eor.w	r3, r3, #1
    38a6:	b2db      	uxtb	r3, r3
    38a8:	2b00      	cmp	r3, #0
    38aa:	d014      	beq.n	38d6 <_ZN12States_Class21handleStateStandbyOFFEm+0xd6>
		{
			gotHVACEvent=listener.WaitForEvent(e, kHVACEventClass, kAnyEventType,1);
    38ac:	f107 010c 	add.w	r1, r7, #12
    38b0:	2301      	movs	r3, #1
    38b2:	9300      	str	r3, [sp, #0]
    38b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    38b8:	f44f 7200 	mov.w	r2, #512	; 0x200
    38bc:	4814      	ldr	r0, [pc, #80]	; (3910 <_ZN12States_Class21handleStateStandbyOFFEm+0x110>)
    38be:	4c15      	ldr	r4, [pc, #84]	; (3914 <_ZN12States_Class21handleStateStandbyOFFEm+0x114>)
    38c0:	47a0      	blx	r4
    38c2:	4603      	mov	r3, r0
    38c4:	461a      	mov	r2, r3
    38c6:	687b      	ldr	r3, [r7, #4]
    38c8:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
			done=gotHVACEvent;
    38cc:	687b      	ldr	r3, [r7, #4]
    38ce:	f893 3476 	ldrb.w	r3, [r3, #1142]	; 0x476
    38d2:	77fb      	strb	r3, [r7, #31]
    38d4:	e7cf      	b.n	3876 <_ZN12States_Class21handleStateStandbyOFFEm+0x76>
		} 
		else
		{
			prepareStateChangeEvent(kHVACStateLeaving);
    38d6:	2200      	movs	r2, #0
    38d8:	2114      	movs	r1, #20
    38da:	6878      	ldr	r0, [r7, #4]
    38dc:	4b0e      	ldr	r3, [pc, #56]	; (3918 <_ZN12States_Class21handleStateStandbyOFFEm+0x118>)
    38de:	4798      	blx	r3
			done=gotAluEvent;
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	f893 3475 	ldrb.w	r3, [r3, #1141]	; 0x475
    38e6:	77fb      	strb	r3, [r7, #31]
	while(!done){
    38e8:	e7c5      	b.n	3876 <_ZN12States_Class21handleStateStandbyOFFEm+0x76>
		}
	}



	}
    38ea:	bf00      	nop
    38ec:	3724      	adds	r7, #36	; 0x24
    38ee:	46bd      	mov	sp, r7
    38f0:	bd90      	pop	{r4, r7, pc}
    38f2:	bf00      	nop
    38f4:	000002ed 	.word	0x000002ed
    38f8:	0001f3e8 	.word	0x0001f3e8
    38fc:	20009e88 	.word	0x20009e88
    3900:	0000243d 	.word	0x0000243d
    3904:	0001f348 	.word	0x0001f348
    3908:	00000acd 	.word	0x00000acd
    390c:	00020a60 	.word	0x00020a60
    3910:	20009788 	.word	0x20009788
    3914:	000140a5 	.word	0x000140a5
    3918:	00003c0d 	.word	0x00003c0d

0000391c <_ZN12States_Class27handleStatePrepareStandbyONEm>:

void States_Class::handleStatePrepareStandbyON(uint32 flags)
	{
    391c:	b580      	push	{r7, lr}
    391e:	b08a      	sub	sp, #40	; 0x28
    3920:	af00      	add	r7, sp, #0
    3922:	6078      	str	r0, [r7, #4]
    3924:	6039      	str	r1, [r7, #0]
	event	e;
    3926:	f107 030c 	add.w	r3, r7, #12
    392a:	4618      	mov	r0, r3
    392c:	4b15      	ldr	r3, [pc, #84]	; (3984 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x68>)
    392e:	4798      	blx	r3
	bool	done(false);
    3930:	2300      	movs	r3, #0
    3932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32	connectFlags(hvacState.alarmState?kConnectFlagsAlarmOn:0);
    3936:	687b      	ldr	r3, [r7, #4]
    3938:	f893 33f8 	ldrb.w	r3, [r3, #1016]	; 0x3f8
    393c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3940:	b2db      	uxtb	r3, r3
    3942:	2b00      	cmp	r3, #0
    3944:	d001      	beq.n	394a <_ZN12States_Class27handleStatePrepareStandbyONEm+0x2e>
    3946:	2301      	movs	r3, #1
    3948:	e000      	b.n	394c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x30>
    394a:	2300      	movs	r3, #0
    394c:	623b      	str	r3, [r7, #32]
	   	
#ifdef __DEBUG__
	
	usb << "handleStatePrepareStandbyON" << NEWLINE;
    394e:	490e      	ldr	r1, [pc, #56]	; (3988 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x6c>)
    3950:	480e      	ldr	r0, [pc, #56]	; (398c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x70>)
    3952:	4b0f      	ldr	r3, [pc, #60]	; (3990 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x74>)
    3954:	4798      	blx	r3
    3956:	4603      	mov	r3, r0
    3958:	490e      	ldr	r1, [pc, #56]	; (3994 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x78>)
    395a:	4618      	mov	r0, r3
    395c:	4b0e      	ldr	r3, [pc, #56]	; (3998 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x7c>)
    395e:	4798      	blx	r3
		
#endif

	
	tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
    3960:	480e      	ldr	r0, [pc, #56]	; (399c <_ZN12States_Class27handleStatePrepareStandbyONEm+0x80>)
    3962:	4b0f      	ldr	r3, [pc, #60]	; (39a0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x84>)
    3964:	4798      	blx	r3
    3966:	4603      	mov	r3, r0
    3968:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
    396c:	61fb      	str	r3, [r7, #28]

	

	listener.SendEventSelf(e);
    396e:	f107 030c 	add.w	r3, r7, #12
    3972:	4619      	mov	r1, r3
    3974:	480b      	ldr	r0, [pc, #44]	; (39a4 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x88>)
    3976:	4b0c      	ldr	r3, [pc, #48]	; (39a8 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x8c>)
    3978:	4798      	blx	r3
	}
    397a:	bf00      	nop
    397c:	3728      	adds	r7, #40	; 0x28
    397e:	46bd      	mov	sp, r7
    3980:	bd80      	pop	{r7, pc}
    3982:	bf00      	nop
    3984:	000002ed 	.word	0x000002ed
    3988:	0001f400 	.word	0x0001f400
    398c:	20009e88 	.word	0x20009e88
    3990:	00003f41 	.word	0x00003f41
    3994:	0001f348 	.word	0x0001f348
    3998:	00000acd 	.word	0x00000acd
    399c:	20009e24 	.word	0x20009e24
    39a0:	00016ae9 	.word	0x00016ae9
    39a4:	20009788 	.word	0x20009788
    39a8:	000141e9 	.word	0x000141e9

000039ac <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    39ac:	b580      	push	{r7, lr}
    39ae:	b088      	sub	sp, #32
    39b0:	af00      	add	r7, sp, #0
    39b2:	6078      	str	r0, [r7, #4]
    39b4:	6039      	str	r1, [r7, #0]
	event	e;
    39b6:	f107 030c 	add.w	r3, r7, #12
    39ba:	4618      	mov	r0, r3
    39bc:	4b12      	ldr	r3, [pc, #72]	; (3a08 <_ZN12States_Class20handleStateStandbyONEm+0x5c>)
    39be:	4798      	blx	r3
	bool	done(false);
    39c0:	2300      	movs	r3, #0
    39c2:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	hvacState.latchClosedConfirmPending = false;
    39c4:	687a      	ldr	r2, [r7, #4]
    39c6:	f892 33f8 	ldrb.w	r3, [r2, #1016]	; 0x3f8
    39ca:	f36f 1345 	bfc	r3, #5, #1
    39ce:	f882 33f8 	strb.w	r3, [r2, #1016]	; 0x3f8
    hvacState.remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
    39d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    39dc:	fb02 f203 	mul.w	r2, r2, r3
    39e0:	687b      	ldr	r3, [r7, #4]
    39e2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

	
	hvacState.reedRelayOpen = false;
    39e6:	687a      	ldr	r2, [r7, #4]
    39e8:	f892 33f8 	ldrb.w	r3, [r2, #1016]	; 0x3f8
    39ec:	f36f 1304 	bfc	r3, #4, #1
    39f0:	f882 33f8 	strb.w	r3, [r2, #1016]	; 0x3f8
	
	listener.SendEventSelf(e);
    39f4:	f107 030c 	add.w	r3, r7, #12
    39f8:	4619      	mov	r1, r3
    39fa:	4804      	ldr	r0, [pc, #16]	; (3a0c <_ZN12States_Class20handleStateStandbyONEm+0x60>)
    39fc:	4b04      	ldr	r3, [pc, #16]	; (3a10 <_ZN12States_Class20handleStateStandbyONEm+0x64>)
    39fe:	4798      	blx	r3
	}
    3a00:	bf00      	nop
    3a02:	3720      	adds	r7, #32
    3a04:	46bd      	mov	sp, r7
    3a06:	bd80      	pop	{r7, pc}
    3a08:	000002ed 	.word	0x000002ed
    3a0c:	20009788 	.word	0x20009788
    3a10:	000141e9 	.word	0x000141e9

00003a14 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    3a14:	b580      	push	{r7, lr}
    3a16:	b088      	sub	sp, #32
    3a18:	af00      	add	r7, sp, #0
    3a1a:	6078      	str	r0, [r7, #4]
    3a1c:	6039      	str	r1, [r7, #0]
	event	e;
    3a1e:	f107 030c 	add.w	r3, r7, #12
    3a22:	4618      	mov	r0, r3
    3a24:	4b06      	ldr	r3, [pc, #24]	; (3a40 <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    3a26:	4798      	blx	r3
	bool	done(false);
    3a28:	2300      	movs	r3, #0
    3a2a:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    3a2c:	f107 030c 	add.w	r3, r7, #12
    3a30:	4619      	mov	r1, r3
    3a32:	4804      	ldr	r0, [pc, #16]	; (3a44 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    3a34:	4b04      	ldr	r3, [pc, #16]	; (3a48 <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    3a36:	4798      	blx	r3
	}
    3a38:	bf00      	nop
    3a3a:	3720      	adds	r7, #32
    3a3c:	46bd      	mov	sp, r7
    3a3e:	bd80      	pop	{r7, pc}
    3a40:	000002ed 	.word	0x000002ed
    3a44:	20009788 	.word	0x20009788
    3a48:	000141e9 	.word	0x000141e9

00003a4c <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    3a4c:	b580      	push	{r7, lr}
    3a4e:	b088      	sub	sp, #32
    3a50:	af00      	add	r7, sp, #0
    3a52:	6078      	str	r0, [r7, #4]
    3a54:	6039      	str	r1, [r7, #0]
	event	e;
    3a56:	f107 030c 	add.w	r3, r7, #12
    3a5a:	4618      	mov	r0, r3
    3a5c:	4b0b      	ldr	r3, [pc, #44]	; (3a8c <_ZN12States_Class13handleStateONEm+0x40>)
    3a5e:	4798      	blx	r3
	bool	done(false);
    3a60:	2300      	movs	r3, #0
    3a62:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    3a64:	2301      	movs	r3, #1
    3a66:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    3a68:	2301      	movs	r3, #1
    3a6a:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    3a6c:	683b      	ldr	r3, [r7, #0]
    3a6e:	2b00      	cmp	r3, #0
    3a70:	bf14      	ite	ne
    3a72:	2301      	movne	r3, #1
    3a74:	2300      	moveq	r3, #0
    3a76:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    3a78:	f107 030c 	add.w	r3, r7, #12
    3a7c:	4619      	mov	r1, r3
    3a7e:	4804      	ldr	r0, [pc, #16]	; (3a90 <_ZN12States_Class13handleStateONEm+0x44>)
    3a80:	4b04      	ldr	r3, [pc, #16]	; (3a94 <_ZN12States_Class13handleStateONEm+0x48>)
    3a82:	4798      	blx	r3
	}
    3a84:	bf00      	nop
    3a86:	3720      	adds	r7, #32
    3a88:	46bd      	mov	sp, r7
    3a8a:	bd80      	pop	{r7, pc}
    3a8c:	000002ed 	.word	0x000002ed
    3a90:	20009788 	.word	0x20009788
    3a94:	000141e9 	.word	0x000141e9

00003a98 <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    3a98:	b580      	push	{r7, lr}
    3a9a:	b088      	sub	sp, #32
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	6078      	str	r0, [r7, #4]
    3aa0:	6039      	str	r1, [r7, #0]
	event	e;
    3aa2:	f107 030c 	add.w	r3, r7, #12
    3aa6:	4618      	mov	r0, r3
    3aa8:	4b06      	ldr	r3, [pc, #24]	; (3ac4 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    3aaa:	4798      	blx	r3
	bool	done(false);
    3aac:	2300      	movs	r3, #0
    3aae:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3ab0:	f107 030c 	add.w	r3, r7, #12
    3ab4:	4619      	mov	r1, r3
    3ab6:	4804      	ldr	r0, [pc, #16]	; (3ac8 <_ZN12States_Class19handleStateFinishedEm+0x30>)
    3ab8:	4b04      	ldr	r3, [pc, #16]	; (3acc <_ZN12States_Class19handleStateFinishedEm+0x34>)
    3aba:	4798      	blx	r3
	}
    3abc:	bf00      	nop
    3abe:	3720      	adds	r7, #32
    3ac0:	46bd      	mov	sp, r7
    3ac2:	bd80      	pop	{r7, pc}
    3ac4:	000002ed 	.word	0x000002ed
    3ac8:	20009788 	.word	0x20009788
    3acc:	000141e9 	.word	0x000141e9

00003ad0 <_ZN12States_Class12StateLeavingEm>:
void States_Class::StateLeaving(uint32 flags)
{
    3ad0:	b580      	push	{r7, lr}
    3ad2:	b086      	sub	sp, #24
    3ad4:	af00      	add	r7, sp, #0
    3ad6:	6078      	str	r0, [r7, #4]
    3ad8:	6039      	str	r1, [r7, #0]
	event	e;
    3ada:	f107 0308 	add.w	r3, r7, #8
    3ade:	4618      	mov	r0, r3
    3ae0:	4b0d      	ldr	r3, [pc, #52]	; (3b18 <_ZN12States_Class12StateLeavingEm+0x48>)
    3ae2:	4798      	blx	r3
	hvacState.lastState=hvacState.currentState;
    3ae4:	687b      	ldr	r3, [r7, #4]
    3ae6:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
    3aea:	687b      	ldr	r3, [r7, #4]
    3aec:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
	hvacState.currentState=kHVACStateLeaving;
    3af0:	687b      	ldr	r3, [r7, #4]
    3af2:	2214      	movs	r2, #20
    3af4:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	
	saveCurrentState();
    3af8:	6878      	ldr	r0, [r7, #4]
    3afa:	4b08      	ldr	r3, [pc, #32]	; (3b1c <_ZN12States_Class12StateLeavingEm+0x4c>)
    3afc:	4798      	blx	r3
	prepareStateChangeEvent(kHVACStateLeaving,(uint16)hvacState.lastState);
    3afe:	687b      	ldr	r3, [r7, #4]
    3b00:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
    3b04:	b29b      	uxth	r3, r3
    3b06:	461a      	mov	r2, r3
    3b08:	2114      	movs	r1, #20
    3b0a:	6878      	ldr	r0, [r7, #4]
    3b0c:	4b04      	ldr	r3, [pc, #16]	; (3b20 <_ZN12States_Class12StateLeavingEm+0x50>)
    3b0e:	4798      	blx	r3
	//bool	done(false);
	//listener.SendEventSelf(e);
}
    3b10:	bf00      	nop
    3b12:	3718      	adds	r7, #24
    3b14:	46bd      	mov	sp, r7
    3b16:	bd80      	pop	{r7, pc}
    3b18:	000002ed 	.word	0x000002ed
    3b1c:	00003c81 	.word	0x00003c81
    3b20:	00003c0d 	.word	0x00003c0d

00003b24 <_ZN12States_Class19StateStoppedProcessEm>:

void States_Class::StateStoppedProcess(uint32 flags)
	{
    3b24:	b580      	push	{r7, lr}
    3b26:	b088      	sub	sp, #32
    3b28:	af00      	add	r7, sp, #0
    3b2a:	6078      	str	r0, [r7, #4]
    3b2c:	6039      	str	r1, [r7, #0]
	event	e;
    3b2e:	f107 030c 	add.w	r3, r7, #12
    3b32:	4618      	mov	r0, r3
    3b34:	4b08      	ldr	r3, [pc, #32]	; (3b58 <_ZN12States_Class19StateStoppedProcessEm+0x34>)
    3b36:	4798      	blx	r3
 	bool	done(false);
    3b38:	2300      	movs	r3, #0
    3b3a:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    3b3c:	2301      	movs	r3, #1
    3b3e:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    3b40:	683b      	ldr	r3, [r7, #0]
    3b42:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    3b44:	f107 030c 	add.w	r3, r7, #12
    3b48:	4619      	mov	r1, r3
    3b4a:	4804      	ldr	r0, [pc, #16]	; (3b5c <_ZN12States_Class19StateStoppedProcessEm+0x38>)
    3b4c:	4b04      	ldr	r3, [pc, #16]	; (3b60 <_ZN12States_Class19StateStoppedProcessEm+0x3c>)
    3b4e:	4798      	blx	r3
	}
    3b50:	bf00      	nop
    3b52:	3720      	adds	r7, #32
    3b54:	46bd      	mov	sp, r7
    3b56:	bd80      	pop	{r7, pc}
    3b58:	000002ed 	.word	0x000002ed
    3b5c:	20009788 	.word	0x20009788
    3b60:	000141e9 	.word	0x000141e9

00003b64 <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    3b64:	b580      	push	{r7, lr}
    3b66:	b088      	sub	sp, #32
    3b68:	af00      	add	r7, sp, #0
    3b6a:	6078      	str	r0, [r7, #4]
    3b6c:	6039      	str	r1, [r7, #0]
	event	e;
    3b6e:	f107 030c 	add.w	r3, r7, #12
    3b72:	4618      	mov	r0, r3
    3b74:	4b06      	ldr	r3, [pc, #24]	; (3b90 <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    3b76:	4798      	blx	r3
	bool	done(false);
    3b78:	2300      	movs	r3, #0
    3b7a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3b7c:	f107 030c 	add.w	r3, r7, #12
    3b80:	4619      	mov	r1, r3
    3b82:	4804      	ldr	r0, [pc, #16]	; (3b94 <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    3b84:	4b04      	ldr	r3, [pc, #16]	; (3b98 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    3b86:	4798      	blx	r3
	}
    3b88:	bf00      	nop
    3b8a:	3720      	adds	r7, #32
    3b8c:	46bd      	mov	sp, r7
    3b8e:	bd80      	pop	{r7, pc}
    3b90:	000002ed 	.word	0x000002ed
    3b94:	20009788 	.word	0x20009788
    3b98:	000141e9 	.word	0x000141e9

00003b9c <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    3b9c:	b580      	push	{r7, lr}
    3b9e:	b088      	sub	sp, #32
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	6078      	str	r0, [r7, #4]
    3ba4:	6039      	str	r1, [r7, #0]
	event	e;
    3ba6:	f107 030c 	add.w	r3, r7, #12
    3baa:	4618      	mov	r0, r3
    3bac:	4b06      	ldr	r3, [pc, #24]	; (3bc8 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    3bae:	4798      	blx	r3
	bool	done(false);
    3bb0:	2300      	movs	r3, #0
    3bb2:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3bb4:	f107 030c 	add.w	r3, r7, #12
    3bb8:	4619      	mov	r1, r3
    3bba:	4804      	ldr	r0, [pc, #16]	; (3bcc <_ZN12States_Class16handleStateErrorEm+0x30>)
    3bbc:	4b04      	ldr	r3, [pc, #16]	; (3bd0 <_ZN12States_Class16handleStateErrorEm+0x34>)
    3bbe:	4798      	blx	r3
	}
    3bc0:	bf00      	nop
    3bc2:	3720      	adds	r7, #32
    3bc4:	46bd      	mov	sp, r7
    3bc6:	bd80      	pop	{r7, pc}
    3bc8:	000002ed 	.word	0x000002ed
    3bcc:	20009788 	.word	0x20009788
    3bd0:	000141e9 	.word	0x000141e9

00003bd4 <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    3bd4:	b580      	push	{r7, lr}
    3bd6:	b088      	sub	sp, #32
    3bd8:	af00      	add	r7, sp, #0
    3bda:	6078      	str	r0, [r7, #4]
    3bdc:	6039      	str	r1, [r7, #0]
	event	e;
    3bde:	f107 030c 	add.w	r3, r7, #12
    3be2:	4618      	mov	r0, r3
    3be4:	4b06      	ldr	r3, [pc, #24]	; (3c00 <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    3be6:	4798      	blx	r3
	bool	done(false);
    3be8:	2300      	movs	r3, #0
    3bea:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3bec:	f107 030c 	add.w	r3, r7, #12
    3bf0:	4619      	mov	r1, r3
    3bf2:	4804      	ldr	r0, [pc, #16]	; (3c04 <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    3bf4:	4b04      	ldr	r3, [pc, #16]	; (3c08 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    3bf6:	4798      	blx	r3
	}
    3bf8:	bf00      	nop
    3bfa:	3720      	adds	r7, #32
    3bfc:	46bd      	mov	sp, r7
    3bfe:	bd80      	pop	{r7, pc}
    3c00:	000002ed 	.word	0x000002ed
    3c04:	20009788 	.word	0x20009788
    3c08:	000141e9 	.word	0x000141e9

00003c0c <_ZN12States_Class23prepareStateChangeEventEtt>:
	done = false;
	return result;
	}

void States_Class::prepareStateChangeEvent(uint16 newState, uint16 data)
	{
    3c0c:	b580      	push	{r7, lr}
    3c0e:	b086      	sub	sp, #24
    3c10:	af00      	add	r7, sp, #0
    3c12:	6078      	str	r0, [r7, #4]
    3c14:	460b      	mov	r3, r1
    3c16:	807b      	strh	r3, [r7, #2]
    3c18:	4613      	mov	r3, r2
    3c1a:	803b      	strh	r3, [r7, #0]
	event e;
    3c1c:	f107 0308 	add.w	r3, r7, #8
    3c20:	4618      	mov	r0, r3
    3c22:	4b0b      	ldr	r3, [pc, #44]	; (3c50 <_ZN12States_Class23prepareStateChangeEventEtt+0x44>)
    3c24:	4798      	blx	r3
	e.eventClass =(EventClass)kHVACEventClass;
    3c26:	f44f 7300 	mov.w	r3, #512	; 0x200
    3c2a:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kHVACSwitchStateEvent;
    3c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
    3c30:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
    3c32:	887b      	ldrh	r3, [r7, #2]
    3c34:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
    3c36:	883b      	ldrh	r3, [r7, #0]
    3c38:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
    3c3a:	f107 0308 	add.w	r3, r7, #8
    3c3e:	4619      	mov	r1, r3
    3c40:	4804      	ldr	r0, [pc, #16]	; (3c54 <_ZN12States_Class23prepareStateChangeEventEtt+0x48>)
    3c42:	4b05      	ldr	r3, [pc, #20]	; (3c58 <_ZN12States_Class23prepareStateChangeEventEtt+0x4c>)
    3c44:	4798      	blx	r3
	}
    3c46:	bf00      	nop
    3c48:	3718      	adds	r7, #24
    3c4a:	46bd      	mov	sp, r7
    3c4c:	bd80      	pop	{r7, pc}
    3c4e:	bf00      	nop
    3c50:	000002ed 	.word	0x000002ed
    3c54:	20009788 	.word	0x20009788
    3c58:	000141e9 	.word	0x000141e9

00003c5c <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	b088      	sub	sp, #32
    3c60:	af00      	add	r7, sp, #0
    3c62:	6078      	str	r0, [r7, #4]
	event	e;
    3c64:	f107 030c 	add.w	r3, r7, #12
    3c68:	4618      	mov	r0, r3
    3c6a:	4b04      	ldr	r3, [pc, #16]	; (3c7c <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    3c6c:	4798      	blx	r3
	uint16	selfTestResult(kHVACNoError);
    3c6e:	2300      	movs	r3, #0
    3c70:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    3c72:	8bfb      	ldrh	r3, [r7, #30]
	}
    3c74:	4618      	mov	r0, r3
    3c76:	3720      	adds	r7, #32
    3c78:	46bd      	mov	sp, r7
    3c7a:	bd80      	pop	{r7, pc}
    3c7c:	000002ed 	.word	0x000002ed

00003c80 <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    3c80:	b580      	push	{r7, lr}
    3c82:	b084      	sub	sp, #16
    3c84:	af00      	add	r7, sp, #0
    3c86:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    3c88:	f107 0308 	add.w	r3, r7, #8
    3c8c:	4619      	mov	r1, r3
    3c8e:	4819      	ldr	r0, [pc, #100]	; (3cf4 <_ZN12States_Class16saveCurrentStateEv+0x74>)
    3c90:	4b19      	ldr	r3, [pc, #100]	; (3cf8 <_ZN12States_Class16saveCurrentStateEv+0x78>)
    3c92:	4798      	blx	r3
		hvacState.dateTime=cdt;
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	f503 7366 	add.w	r3, r3, #920	; 0x398
    3c9a:	f107 0208 	add.w	r2, r7, #8
    3c9e:	e892 0003 	ldmia.w	r2, {r0, r1}
    3ca2:	e883 0003 	stmia.w	r3, {r0, r1}
		hvacState.now = calendar.convert_datetime_to_timestamp(&cdt);
    3ca6:	f107 0308 	add.w	r3, r7, #8
    3caa:	4619      	mov	r1, r3
    3cac:	4811      	ldr	r0, [pc, #68]	; (3cf4 <_ZN12States_Class16saveCurrentStateEv+0x74>)
    3cae:	4b13      	ldr	r3, [pc, #76]	; (3cfc <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    3cb0:	4798      	blx	r3
    3cb2:	4603      	mov	r3, r0
    3cb4:	461a      	mov	r2, r3
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
	if (hvacState.currentState!=kHVACStateMaintenance){
    3cbc:	687b      	ldr	r3, [r7, #4]
    3cbe:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
    3cc2:	2b11      	cmp	r3, #17
    3cc4:	d012      	beq.n	3cec <_ZN12States_Class16saveCurrentStateEv+0x6c>
		memory.WriteFastCurrentState(hvacState);
    3cc6:	687b      	ldr	r3, [r7, #4]
    3cc8:	f503 7364 	add.w	r3, r3, #912	; 0x390
    3ccc:	4619      	mov	r1, r3
    3cce:	480c      	ldr	r0, [pc, #48]	; (3d00 <_ZN12States_Class16saveCurrentStateEv+0x80>)
    3cd0:	4b0c      	ldr	r3, [pc, #48]	; (3d04 <_ZN12States_Class16saveCurrentStateEv+0x84>)
    3cd2:	4798      	blx	r3
		//memory.ReadFastApplicationState(lastState);
		if (hvacState.currentState==0)
    3cd4:	687b      	ldr	r3, [r7, #4]
    3cd6:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
    3cda:	2b00      	cmp	r3, #0
    3cdc:	d106      	bne.n	3cec <_ZN12States_Class16saveCurrentStateEv+0x6c>
		{
			memory.SaveApplicationState(hvacState);
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	f503 7364 	add.w	r3, r3, #912	; 0x390
    3ce4:	4619      	mov	r1, r3
    3ce6:	4808      	ldr	r0, [pc, #32]	; (3d08 <_ZN12States_Class16saveCurrentStateEv+0x88>)
    3ce8:	4b08      	ldr	r3, [pc, #32]	; (3d0c <_ZN12States_Class16saveCurrentStateEv+0x8c>)
    3cea:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    3cec:	bf00      	nop
    3cee:	3710      	adds	r7, #16
    3cf0:	46bd      	mov	sp, r7
    3cf2:	bd80      	pop	{r7, pc}
    3cf4:	20009c18 	.word	0x20009c18
    3cf8:	00016251 	.word	0x00016251
    3cfc:	00016341 	.word	0x00016341
    3d00:	20001c70 	.word	0x20001c70
    3d04:	000015e9 	.word	0x000015e9
    3d08:	200015f8 	.word	0x200015f8
    3d0c:	0000279d 	.word	0x0000279d

00003d10 <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    3d10:	b580      	push	{r7, lr}
    3d12:	b082      	sub	sp, #8
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
    3d18:	460b      	mov	r3, r1
    3d1a:	70fb      	strb	r3, [r7, #3]
		if (layer==0)
    3d1c:	78fb      	ldrb	r3, [r7, #3]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d10d      	bne.n	3d3e <_ZN12States_Class4StopEh+0x2e>
		{
			usb<<"Air Conditioning System Stopped"<<NEWLINE;
    3d22:	4909      	ldr	r1, [pc, #36]	; (3d48 <_ZN12States_Class4StopEh+0x38>)
    3d24:	4809      	ldr	r0, [pc, #36]	; (3d4c <_ZN12States_Class4StopEh+0x3c>)
    3d26:	4b0a      	ldr	r3, [pc, #40]	; (3d50 <_ZN12States_Class4StopEh+0x40>)
    3d28:	4798      	blx	r3
    3d2a:	4603      	mov	r3, r0
    3d2c:	4909      	ldr	r1, [pc, #36]	; (3d54 <_ZN12States_Class4StopEh+0x44>)
    3d2e:	4618      	mov	r0, r3
    3d30:	4b09      	ldr	r3, [pc, #36]	; (3d58 <_ZN12States_Class4StopEh+0x48>)
    3d32:	4798      	blx	r3
			delay_ms(100);
    3d34:	2064      	movs	r0, #100	; 0x64
    3d36:	4b09      	ldr	r3, [pc, #36]	; (3d5c <_ZN12States_Class4StopEh+0x4c>)
    3d38:	4798      	blx	r3
			return layer;
    3d3a:	78fb      	ldrb	r3, [r7, #3]
    3d3c:	e000      	b.n	3d40 <_ZN12States_Class4StopEh+0x30>
		}
	return	layer;
    3d3e:	78fb      	ldrb	r3, [r7, #3]
}
    3d40:	4618      	mov	r0, r3
    3d42:	3708      	adds	r7, #8
    3d44:	46bd      	mov	sp, r7
    3d46:	bd80      	pop	{r7, pc}
    3d48:	0001f41c 	.word	0x0001f41c
    3d4c:	20009e88 	.word	0x20009e88
    3d50:	00003e9d 	.word	0x00003e9d
    3d54:	0001f348 	.word	0x0001f348
    3d58:	00000acd 	.word	0x00000acd
    3d5c:	00006021 	.word	0x00006021

00003d60 <_ZN12States_Class15GetCurrentStateER9HVACState>:

void	States_Class::GetCurrentConfiguration(ConfigurationData *cd){
	cd=&configuration;
}
void	States_Class::GetCurrentState(HVACState& hs){
    3d60:	b580      	push	{r7, lr}
    3d62:	b082      	sub	sp, #8
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    3d68:	6039      	str	r1, [r7, #0]
	hs=hvacState;
    3d6a:	683a      	ldr	r2, [r7, #0]
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	4610      	mov	r0, r2
    3d70:	f503 7364 	add.w	r3, r3, #912	; 0x390
    3d74:	226c      	movs	r2, #108	; 0x6c
    3d76:	4619      	mov	r1, r3
    3d78:	4b02      	ldr	r3, [pc, #8]	; (3d84 <_ZN12States_Class15GetCurrentStateER9HVACState+0x24>)
    3d7a:	4798      	blx	r3
}
    3d7c:	bf00      	nop
    3d7e:	3708      	adds	r7, #8
    3d80:	46bd      	mov	sp, r7
    3d82:	bd80      	pop	{r7, pc}
    3d84:	0001af55 	.word	0x0001af55

00003d88 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    3d88:	b580      	push	{r7, lr}
    3d8a:	b082      	sub	sp, #8
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
    3d90:	6039      	str	r1, [r7, #0]
	configuration=cd;
    3d92:	687b      	ldr	r3, [r7, #4]
    3d94:	683a      	ldr	r2, [r7, #0]
    3d96:	f503 638f 	add.w	r3, r3, #1144	; 0x478
    3d9a:	4611      	mov	r1, r2
    3d9c:	22ac      	movs	r2, #172	; 0xac
    3d9e:	4618      	mov	r0, r3
    3da0:	4b02      	ldr	r3, [pc, #8]	; (3dac <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x24>)
    3da2:	4798      	blx	r3
}
    3da4:	bf00      	nop
    3da6:	3708      	adds	r7, #8
    3da8:	46bd      	mov	sp, r7
    3daa:	bd80      	pop	{r7, pc}
    3dac:	0001af55 	.word	0x0001af55

00003db0 <_ZN12States_Class15SetCurrentStateER9HVACState>:
void	States_Class::SetCurrentState(HVACState& hs){
    3db0:	b580      	push	{r7, lr}
    3db2:	b082      	sub	sp, #8
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
    3db8:	6039      	str	r1, [r7, #0]
	hvacState=hs;
    3dba:	687b      	ldr	r3, [r7, #4]
    3dbc:	683a      	ldr	r2, [r7, #0]
    3dbe:	f503 7364 	add.w	r3, r3, #912	; 0x390
    3dc2:	4611      	mov	r1, r2
    3dc4:	226c      	movs	r2, #108	; 0x6c
    3dc6:	4618      	mov	r0, r3
    3dc8:	4b02      	ldr	r3, [pc, #8]	; (3dd4 <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    3dca:	4798      	blx	r3
}
    3dcc:	bf00      	nop
    3dce:	3708      	adds	r7, #8
    3dd0:	46bd      	mov	sp, r7
    3dd2:	bd80      	pop	{r7, pc}
    3dd4:	0001af55 	.word	0x0001af55

00003dd8 <_ZN12States_Class16SetCRCConfigDataEv>:
void	States_Class::SetCRCConfigData(void){
    3dd8:	b580      	push	{r7, lr}
    3dda:	b082      	sub	sp, #8
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    3de0:	22ac      	movs	r2, #172	; 0xac
    3de2:	4906      	ldr	r1, [pc, #24]	; (3dfc <_ZN12States_Class16SetCRCConfigDataEv+0x24>)
    3de4:	4806      	ldr	r0, [pc, #24]	; (3e00 <_ZN12States_Class16SetCRCConfigDataEv+0x28>)
    3de6:	4b07      	ldr	r3, [pc, #28]	; (3e04 <_ZN12States_Class16SetCRCConfigDataEv+0x2c>)
    3de8:	4798      	blx	r3
    3dea:	4602      	mov	r2, r0
    3dec:	687b      	ldr	r3, [r7, #4]
    3dee:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
    3df2:	bf00      	nop
    3df4:	3708      	adds	r7, #8
    3df6:	46bd      	mov	sp, r7
    3df8:	bd80      	pop	{r7, pc}
    3dfa:	bf00      	nop
    3dfc:	0001ed50 	.word	0x0001ed50
    3e00:	20001ae4 	.word	0x20001ae4
    3e04:	00001239 	.word	0x00001239

00003e08 <_ZN12States_Class11CheckEventsEv>:
uint32_t	States_Class::GetStatus(HVACStatus& s){
	s=hvacState.hvacStatus;
	return	hvacState.hvacStatus.rawStatus;
}
void States_Class::CheckEvents(void){
    3e08:	b580      	push	{r7, lr}
    3e0a:	b084      	sub	sp, #16
    3e0c:	af00      	add	r7, sp, #0
	event e;
    3e0e:	463b      	mov	r3, r7
    3e10:	4618      	mov	r0, r3
    3e12:	4b13      	ldr	r3, [pc, #76]	; (3e60 <_ZN12States_Class11CheckEventsEv+0x58>)
    3e14:	4798      	blx	r3
	if (interfaces.IsCommunicationRequest())
    3e16:	4813      	ldr	r0, [pc, #76]	; (3e64 <_ZN12States_Class11CheckEventsEv+0x5c>)
    3e18:	4b13      	ldr	r3, [pc, #76]	; (3e68 <_ZN12States_Class11CheckEventsEv+0x60>)
    3e1a:	4798      	blx	r3
    3e1c:	4603      	mov	r3, r0
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d005      	beq.n	3e2e <_ZN12States_Class11CheckEventsEv+0x26>
	{
		e.eventClass=kALUEventClass;
    3e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3e26:	803b      	strh	r3, [r7, #0]
		e.eventType=(EventType)kALUEventCheckCommunication;
    3e28:	2302      	movs	r3, #2
    3e2a:	807b      	strh	r3, [r7, #2]
    3e2c:	e00f      	b.n	3e4e <_ZN12States_Class11CheckEventsEv+0x46>
		
	}else if ((hvac.hvacState.currentState==kHVACStateStandbyOFF)&&(alu.tasks->head)){
    3e2e:	4b0f      	ldr	r3, [pc, #60]	; (3e6c <_ZN12States_Class11CheckEventsEv+0x64>)
    3e30:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
    3e34:	2b04      	cmp	r3, #4
    3e36:	d107      	bne.n	3e48 <_ZN12States_Class11CheckEventsEv+0x40>
    3e38:	4b0d      	ldr	r3, [pc, #52]	; (3e70 <_ZN12States_Class11CheckEventsEv+0x68>)
    3e3a:	681b      	ldr	r3, [r3, #0]
    3e3c:	681b      	ldr	r3, [r3, #0]
    3e3e:	2b00      	cmp	r3, #0
    3e40:	d002      	beq.n	3e48 <_ZN12States_Class11CheckEventsEv+0x40>
	
		e.eventType=kHVACEventDoPendingTasks;
    3e42:	2303      	movs	r3, #3
    3e44:	807b      	strh	r3, [r7, #2]
    3e46:	e002      	b.n	3e4e <_ZN12States_Class11CheckEventsEv+0x46>


	}else if (alu.arincTXTimeUP){
    3e48:	4b09      	ldr	r3, [pc, #36]	; (3e70 <_ZN12States_Class11CheckEventsEv+0x68>)
    3e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
			
	}
		
	listener.SendEventSelf(e);
    3e4e:	463b      	mov	r3, r7
    3e50:	4619      	mov	r1, r3
    3e52:	4808      	ldr	r0, [pc, #32]	; (3e74 <_ZN12States_Class11CheckEventsEv+0x6c>)
    3e54:	4b08      	ldr	r3, [pc, #32]	; (3e78 <_ZN12States_Class11CheckEventsEv+0x70>)
    3e56:	4798      	blx	r3
}
    3e58:	bf00      	nop
    3e5a:	3710      	adds	r7, #16
    3e5c:	46bd      	mov	sp, r7
    3e5e:	bd80      	pop	{r7, pc}
    3e60:	000002ed 	.word	0x000002ed
    3e64:	2000156c 	.word	0x2000156c
    3e68:	00001ea9 	.word	0x00001ea9
    3e6c:	2000804c 	.word	0x2000804c
    3e70:	20000bd8 	.word	0x20000bd8
    3e74:	20009788 	.word	0x20009788
    3e78:	000141e9 	.word	0x000141e9

00003e7c <_ZlsIA34_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3e7c:	b580      	push	{r7, lr}
    3e7e:	b082      	sub	sp, #8
    3e80:	af00      	add	r7, sp, #0
    3e82:	6078      	str	r0, [r7, #4]
    3e84:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3e86:	6839      	ldr	r1, [r7, #0]
    3e88:	6878      	ldr	r0, [r7, #4]
    3e8a:	4b03      	ldr	r3, [pc, #12]	; (3e98 <_ZlsIA34_cER5PrintS2_RKT_+0x1c>)
    3e8c:	4798      	blx	r3
    3e8e:	687b      	ldr	r3, [r7, #4]
    3e90:	4618      	mov	r0, r3
    3e92:	3708      	adds	r7, #8
    3e94:	46bd      	mov	sp, r7
    3e96:	bd80      	pop	{r7, pc}
    3e98:	00017309 	.word	0x00017309

00003e9c <_ZlsIA32_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3e9c:	b580      	push	{r7, lr}
    3e9e:	b082      	sub	sp, #8
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	6078      	str	r0, [r7, #4]
    3ea4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3ea6:	6839      	ldr	r1, [r7, #0]
    3ea8:	6878      	ldr	r0, [r7, #4]
    3eaa:	4b03      	ldr	r3, [pc, #12]	; (3eb8 <_ZlsIA32_cER5PrintS2_RKT_+0x1c>)
    3eac:	4798      	blx	r3
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	4618      	mov	r0, r3
    3eb2:	3708      	adds	r7, #8
    3eb4:	46bd      	mov	sp, r7
    3eb6:	bd80      	pop	{r7, pc}
    3eb8:	00017309 	.word	0x00017309

00003ebc <_ZlsIA42_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3ebc:	b580      	push	{r7, lr}
    3ebe:	b082      	sub	sp, #8
    3ec0:	af00      	add	r7, sp, #0
    3ec2:	6078      	str	r0, [r7, #4]
    3ec4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3ec6:	6839      	ldr	r1, [r7, #0]
    3ec8:	6878      	ldr	r0, [r7, #4]
    3eca:	4b03      	ldr	r3, [pc, #12]	; (3ed8 <_ZlsIA42_cER5PrintS2_RKT_+0x1c>)
    3ecc:	4798      	blx	r3
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	4618      	mov	r0, r3
    3ed2:	3708      	adds	r7, #8
    3ed4:	46bd      	mov	sp, r7
    3ed6:	bd80      	pop	{r7, pc}
    3ed8:	00017309 	.word	0x00017309

00003edc <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	6078      	str	r0, [r7, #4]
    3ee4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3ee6:	6839      	ldr	r1, [r7, #0]
    3ee8:	6878      	ldr	r0, [r7, #4]
    3eea:	4b03      	ldr	r3, [pc, #12]	; (3ef8 <_ZlsIA5_cER5PrintS2_RKT_+0x1c>)
    3eec:	4798      	blx	r3
    3eee:	687b      	ldr	r3, [r7, #4]
    3ef0:	4618      	mov	r0, r3
    3ef2:	3708      	adds	r7, #8
    3ef4:	46bd      	mov	sp, r7
    3ef6:	bd80      	pop	{r7, pc}
    3ef8:	00017309 	.word	0x00017309

00003efc <_ZlsIcER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3efc:	b580      	push	{r7, lr}
    3efe:	b082      	sub	sp, #8
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
    3f04:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3f06:	683b      	ldr	r3, [r7, #0]
    3f08:	781b      	ldrb	r3, [r3, #0]
    3f0a:	4619      	mov	r1, r3
    3f0c:	6878      	ldr	r0, [r7, #4]
    3f0e:	4b03      	ldr	r3, [pc, #12]	; (3f1c <_ZlsIcER5PrintS1_RKT_+0x20>)
    3f10:	4798      	blx	r3
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	4618      	mov	r0, r3
    3f16:	3708      	adds	r7, #8
    3f18:	46bd      	mov	sp, r7
    3f1a:	bd80      	pop	{r7, pc}
    3f1c:	00017329 	.word	0x00017329

00003f20 <_ZlsIA35_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3f20:	b580      	push	{r7, lr}
    3f22:	b082      	sub	sp, #8
    3f24:	af00      	add	r7, sp, #0
    3f26:	6078      	str	r0, [r7, #4]
    3f28:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3f2a:	6839      	ldr	r1, [r7, #0]
    3f2c:	6878      	ldr	r0, [r7, #4]
    3f2e:	4b03      	ldr	r3, [pc, #12]	; (3f3c <_ZlsIA35_cER5PrintS2_RKT_+0x1c>)
    3f30:	4798      	blx	r3
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	4618      	mov	r0, r3
    3f36:	3708      	adds	r7, #8
    3f38:	46bd      	mov	sp, r7
    3f3a:	bd80      	pop	{r7, pc}
    3f3c:	00017309 	.word	0x00017309

00003f40 <_ZlsIA28_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3f40:	b580      	push	{r7, lr}
    3f42:	b082      	sub	sp, #8
    3f44:	af00      	add	r7, sp, #0
    3f46:	6078      	str	r0, [r7, #4]
    3f48:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3f4a:	6839      	ldr	r1, [r7, #0]
    3f4c:	6878      	ldr	r0, [r7, #4]
    3f4e:	4b03      	ldr	r3, [pc, #12]	; (3f5c <_ZlsIA28_cER5PrintS2_RKT_+0x1c>)
    3f50:	4798      	blx	r3
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	4618      	mov	r0, r3
    3f56:	3708      	adds	r7, #8
    3f58:	46bd      	mov	sp, r7
    3f5a:	bd80      	pop	{r7, pc}
    3f5c:	00017309 	.word	0x00017309

00003f60 <_Z41__static_initialization_and_destruction_0ii>:


    3f60:	b580      	push	{r7, lr}
    3f62:	b082      	sub	sp, #8
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
    3f68:	6039      	str	r1, [r7, #0]
    3f6a:	687b      	ldr	r3, [r7, #4]
    3f6c:	2b01      	cmp	r3, #1
    3f6e:	d10c      	bne.n	3f8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    3f70:	683b      	ldr	r3, [r7, #0]
    3f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3f76:	4293      	cmp	r3, r2
    3f78:	d107      	bne.n	3f8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    3f7a:	4806      	ldr	r0, [pc, #24]	; (3f94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    3f7c:	4b06      	ldr	r3, [pc, #24]	; (3f98 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    3f7e:	4798      	blx	r3
    3f80:	4a06      	ldr	r2, [pc, #24]	; (3f9c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    3f82:	4907      	ldr	r1, [pc, #28]	; (3fa0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    3f84:	4803      	ldr	r0, [pc, #12]	; (3f94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    3f86:	4b07      	ldr	r3, [pc, #28]	; (3fa4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    3f88:	4798      	blx	r3
    3f8a:	bf00      	nop
    3f8c:	3708      	adds	r7, #8
    3f8e:	46bd      	mov	sp, r7
    3f90:	bd80      	pop	{r7, pc}
    3f92:	bf00      	nop
    3f94:	2000804c 	.word	0x2000804c
    3f98:	00002f7d 	.word	0x00002f7d
    3f9c:	20000000 	.word	0x20000000
    3fa0:	00002fe9 	.word	0x00002fe9
    3fa4:	000187f1 	.word	0x000187f1

00003fa8 <_GLOBAL__sub_I_ptrStatesClass>:
    3fa8:	b580      	push	{r7, lr}
    3faa:	af00      	add	r7, sp, #0
    3fac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3fb0:	2001      	movs	r0, #1
    3fb2:	4b01      	ldr	r3, [pc, #4]	; (3fb8 <_GLOBAL__sub_I_ptrStatesClass+0x10>)
    3fb4:	4798      	blx	r3
    3fb6:	bd80      	pop	{r7, pc}
    3fb8:	00003f61 	.word	0x00003f61

00003fbc <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3fbc:	b480      	push	{r7}
    3fbe:	b083      	sub	sp, #12
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3fc4:	687b      	ldr	r3, [r7, #4]
    3fc6:	681b      	ldr	r3, [r3, #0]
}
    3fc8:	4618      	mov	r0, r3
    3fca:	370c      	adds	r7, #12
    3fcc:	46bd      	mov	sp, r7
    3fce:	bc80      	pop	{r7}
    3fd0:	4770      	bx	lr
	...

00003fd4 <_ZN17TaskHandler_ClassC1Ev>:
//static TaskHandler_Class	taskStorage[MAXIMUM_TASKS];
//list_descriptor		taskStorage;
static	ControllerTask	taskStorage[MAXIMUM_TASKS];
static	list_element	listElements[MAXIMUM_TASKS];
// default constructor
TaskHandler_Class::TaskHandler_Class()
    3fd4:	b480      	push	{r7}
    3fd6:	b083      	sub	sp, #12
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
{
	taskList=(list_descriptor*)listElements;
    3fdc:	687b      	ldr	r3, [r7, #4]
    3fde:	4a04      	ldr	r2, [pc, #16]	; (3ff0 <_ZN17TaskHandler_ClassC1Ev+0x1c>)
    3fe0:	60da      	str	r2, [r3, #12]
	//taskList->head->next=NULL;
	
	//task->id=(ALUTaskEnum)0;


} //TaskHandler_Class
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	4618      	mov	r0, r3
    3fe6:	370c      	adds	r7, #12
    3fe8:	46bd      	mov	sp, r7
    3fea:	bc80      	pop	{r7}
    3fec:	4770      	bx	lr
    3fee:	bf00      	nop
    3ff0:	200085c4 	.word	0x200085c4

00003ff4 <_ZN17TaskHandler_ClassD1Ev>:

// default destructor
TaskHandler_Class::~TaskHandler_Class()
    3ff4:	b480      	push	{r7}
    3ff6:	b083      	sub	sp, #12
    3ff8:	af00      	add	r7, sp, #0
    3ffa:	6078      	str	r0, [r7, #4]
{
} //~TaskHandler_Class
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	4618      	mov	r0, r3
    4000:	370c      	adds	r7, #12
    4002:	46bd      	mov	sp, r7
    4004:	bc80      	pop	{r7}
    4006:	4770      	bx	lr

00004008 <_ZN17TaskHandler_Class13InitTaskArrayEv>:

void TaskHandler_Class::InitTaskArray(void){
    4008:	b480      	push	{r7}
    400a:	b083      	sub	sp, #12
    400c:	af00      	add	r7, sp, #0
    400e:	6078      	str	r0, [r7, #4]
	for (i=1; i<MAXIMUM_TASKS; i++)
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	2201      	movs	r2, #1
    4014:	721a      	strb	r2, [r3, #8]
    4016:	687b      	ldr	r3, [r7, #4]
    4018:	7a1b      	ldrb	r3, [r3, #8]
    401a:	2b08      	cmp	r3, #8
    401c:	dc31      	bgt.n	4082 <_ZN17TaskHandler_Class13InitTaskArrayEv+0x7a>
	{
		taskStorage[i].elem.next = (list_element*)NULL;
    401e:	687b      	ldr	r3, [r7, #4]
    4020:	7a1b      	ldrb	r3, [r3, #8]
    4022:	4619      	mov	r1, r3
    4024:	4b20      	ldr	r3, [pc, #128]	; (40a8 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    4026:	2200      	movs	r2, #0
    4028:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
		taskStorage[i].id=kALUNotTaskEvent;
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	7a1b      	ldrb	r3, [r3, #8]
    4030:	4a1d      	ldr	r2, [pc, #116]	; (40a8 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    4032:	00db      	lsls	r3, r3, #3
    4034:	4413      	add	r3, r2
    4036:	2200      	movs	r2, #0
    4038:	711a      	strb	r2, [r3, #4]
		taskStorage[i-1].elem.next = &taskStorage[i].elem;
    403a:	687b      	ldr	r3, [r7, #4]
    403c:	7a1b      	ldrb	r3, [r3, #8]
    403e:	3b01      	subs	r3, #1
    4040:	687a      	ldr	r2, [r7, #4]
    4042:	7a12      	ldrb	r2, [r2, #8]
    4044:	00d2      	lsls	r2, r2, #3
    4046:	4918      	ldr	r1, [pc, #96]	; (40a8 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    4048:	440a      	add	r2, r1
    404a:	4917      	ldr	r1, [pc, #92]	; (40a8 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    404c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		listElements[i].next = (list_element*)NULL;
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	7a1b      	ldrb	r3, [r3, #8]
    4054:	4619      	mov	r1, r3
    4056:	4b15      	ldr	r3, [pc, #84]	; (40ac <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    4058:	2200      	movs	r2, #0
    405a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		listElements[i-1].next = &listElements[i];
    405e:	687b      	ldr	r3, [r7, #4]
    4060:	7a1b      	ldrb	r3, [r3, #8]
    4062:	3b01      	subs	r3, #1
    4064:	687a      	ldr	r2, [r7, #4]
    4066:	7a12      	ldrb	r2, [r2, #8]
    4068:	0092      	lsls	r2, r2, #2
    406a:	4910      	ldr	r1, [pc, #64]	; (40ac <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    406c:	440a      	add	r2, r1
    406e:	490f      	ldr	r1, [pc, #60]	; (40ac <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    4070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=1; i<MAXIMUM_TASKS; i++)
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	7a1b      	ldrb	r3, [r3, #8]
    4078:	3301      	adds	r3, #1
    407a:	b2da      	uxtb	r2, r3
    407c:	687b      	ldr	r3, [r7, #4]
    407e:	721a      	strb	r2, [r3, #8]
    4080:	e7c9      	b.n	4016 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xe>
	}
	taskList->head->next=NULL;
    4082:	687b      	ldr	r3, [r7, #4]
    4084:	68db      	ldr	r3, [r3, #12]
    4086:	681b      	ldr	r3, [r3, #0]
    4088:	2200      	movs	r2, #0
    408a:	601a      	str	r2, [r3, #0]
	taskList->head=NULL;
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	68db      	ldr	r3, [r3, #12]
    4090:	2200      	movs	r2, #0
    4092:	601a      	str	r2, [r3, #0]

		//taskList->head->next=NULL;
		tasks=taskList;
    4094:	687b      	ldr	r3, [r7, #4]
    4096:	68da      	ldr	r2, [r3, #12]
    4098:	687b      	ldr	r3, [r7, #4]
    409a:	601a      	str	r2, [r3, #0]
}
    409c:	bf00      	nop
    409e:	370c      	adds	r7, #12
    40a0:	46bd      	mov	sp, r7
    40a2:	bc80      	pop	{r7}
    40a4:	4770      	bx	lr
    40a6:	bf00      	nop
    40a8:	2000857c 	.word	0x2000857c
    40ac:	200085c4 	.word	0x200085c4

000040b0 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask>:
		return ERR_ALREADY_INITIALIZED;
	}
	AddALUTask(taskList,task);
	return ERR_NONE;
}
int TaskHandler_Class::AddTask(ControllerTask& tk ){
    40b0:	b580      	push	{r7, lr}
    40b2:	b082      	sub	sp, #8
    40b4:	af00      	add	r7, sp, #0
    40b6:	6078      	str	r0, [r7, #4]
    40b8:	6039      	str	r1, [r7, #0]
	if (IsNotDeclaredTask(tk))
    40ba:	6839      	ldr	r1, [r7, #0]
    40bc:	6878      	ldr	r0, [r7, #4]
    40be:	4b22      	ldr	r3, [pc, #136]	; (4148 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x98>)
    40c0:	4798      	blx	r3
    40c2:	4603      	mov	r3, r0
    40c4:	2b00      	cmp	r3, #0
    40c6:	d039      	beq.n	413c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x8c>
	{
		ChooseAvailableTask();
    40c8:	6878      	ldr	r0, [r7, #4]
    40ca:	4b20      	ldr	r3, [pc, #128]	; (414c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x9c>)
    40cc:	4798      	blx	r3
		task->elem=tk.elem;
    40ce:	687b      	ldr	r3, [r7, #4]
    40d0:	685b      	ldr	r3, [r3, #4]
    40d2:	683a      	ldr	r2, [r7, #0]
    40d4:	6812      	ldr	r2, [r2, #0]
    40d6:	601a      	str	r2, [r3, #0]
		task->id=tk.id;
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	685b      	ldr	r3, [r3, #4]
    40dc:	683a      	ldr	r2, [r7, #0]
    40de:	7912      	ldrb	r2, [r2, #4]
    40e0:	711a      	strb	r2, [r3, #4]
		task->prio=tk.prio;
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	685b      	ldr	r3, [r3, #4]
    40e6:	683a      	ldr	r2, [r7, #0]
    40e8:	7952      	ldrb	r2, [r2, #5]
    40ea:	715a      	strb	r2, [r3, #5]
		ASSERT((taskList)&&(task));
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	68db      	ldr	r3, [r3, #12]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d005      	beq.n	4100 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	685b      	ldr	r3, [r3, #4]
    40f8:	2b00      	cmp	r3, #0
    40fa:	d001      	beq.n	4100 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    40fc:	2301      	movs	r3, #1
    40fe:	e000      	b.n	4102 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x52>
    4100:	2300      	movs	r3, #0
    4102:	2242      	movs	r2, #66	; 0x42
    4104:	4912      	ldr	r1, [pc, #72]	; (4150 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa0>)
    4106:	4618      	mov	r0, r3
    4108:	4b12      	ldr	r3, [pc, #72]	; (4154 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa4>)
    410a:	4798      	blx	r3
		if (is_list_element(taskList,task)) {
    410c:	687b      	ldr	r3, [r7, #4]
    410e:	68da      	ldr	r2, [r3, #12]
    4110:	687b      	ldr	r3, [r7, #4]
    4112:	685b      	ldr	r3, [r3, #4]
    4114:	4619      	mov	r1, r3
    4116:	4610      	mov	r0, r2
    4118:	4b0f      	ldr	r3, [pc, #60]	; (4158 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa8>)
    411a:	4798      	blx	r3
    411c:	4603      	mov	r3, r0
    411e:	2b00      	cmp	r3, #0
    4120:	d002      	beq.n	4128 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x78>

			//ASSERT(false);
			return ERR_ALREADY_INITIALIZED;
    4122:	f06f 0311 	mvn.w	r3, #17
    4126:	e00b      	b.n	4140 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
		}
		AddALUTask(taskList,task);
    4128:	687b      	ldr	r3, [r7, #4]
    412a:	68d9      	ldr	r1, [r3, #12]
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	685b      	ldr	r3, [r3, #4]
    4130:	461a      	mov	r2, r3
    4132:	6878      	ldr	r0, [r7, #4]
    4134:	4b09      	ldr	r3, [pc, #36]	; (415c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xac>)
    4136:	4798      	blx	r3
		return ERR_NONE;
    4138:	2300      	movs	r3, #0
    413a:	e001      	b.n	4140 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
	}else{
		return ERR_ALREADY_INITIALIZED;
    413c:	f06f 0311 	mvn.w	r3, #17
	}
	
}
    4140:	4618      	mov	r0, r3
    4142:	3708      	adds	r7, #8
    4144:	46bd      	mov	sp, r7
    4146:	bd80      	pop	{r7, pc}
    4148:	00004301 	.word	0x00004301
    414c:	0000428d 	.word	0x0000428d
    4150:	0001f448 	.word	0x0001f448
    4154:	00007d91 	.word	0x00007d91
    4158:	00007db9 	.word	0x00007db9
    415c:	00004161 	.word	0x00004161

00004160 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask>:

void TaskHandler_Class::AddALUTask(list_descriptor *list,ControllerTask* pct){
    4160:	b580      	push	{r7, lr}
    4162:	b086      	sub	sp, #24
    4164:	af00      	add	r7, sp, #0
    4166:	60f8      	str	r0, [r7, #12]
    4168:	60b9      	str	r1, [r7, #8]
    416a:	607a      	str	r2, [r7, #4]
	ControllerTask *it, *head = (ControllerTask *)list_get_head(list);
    416c:	68b8      	ldr	r0, [r7, #8]
    416e:	4b09      	ldr	r3, [pc, #36]	; (4194 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x34>)
    4170:	4798      	blx	r3
    4172:	6178      	str	r0, [r7, #20]

	if (!head) {
    4174:	697b      	ldr	r3, [r7, #20]
    4176:	2b00      	cmp	r3, #0
    4178:	d104      	bne.n	4184 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x24>
		list_insert_as_head(list, pct);
    417a:	6879      	ldr	r1, [r7, #4]
    417c:	68b8      	ldr	r0, [r7, #8]
    417e:	4b06      	ldr	r3, [pc, #24]	; (4198 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x38>)
    4180:	4798      	blx	r3
		return;
    4182:	e003      	b.n	418c <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x2c>
		}else{
		list_insert_at_end(list,pct);
    4184:	6879      	ldr	r1, [r7, #4]
    4186:	68b8      	ldr	r0, [r7, #8]
    4188:	4b04      	ldr	r3, [pc, #16]	; (419c <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x3c>)
    418a:	4798      	blx	r3
	}

		

}
    418c:	3718      	adds	r7, #24
    418e:	46bd      	mov	sp, r7
    4190:	bd80      	pop	{r7, pc}
    4192:	bf00      	nop
    4194:	00003fbd 	.word	0x00003fbd
    4198:	00007df1 	.word	0x00007df1
    419c:	00007e6d 	.word	0x00007e6d

000041a0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask>:
		}
		list_delete_element(taskList, task);

		return ERR_NONE;
}
int32_t TaskHandler_Class::RemoveTask(ControllerTask& tk){
    41a0:	b580      	push	{r7, lr}
    41a2:	b082      	sub	sp, #8
    41a4:	af00      	add	r7, sp, #0
    41a6:	6078      	str	r0, [r7, #4]
    41a8:	6039      	str	r1, [r7, #0]


	ASSERT(taskList && (&tk));
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	68db      	ldr	r3, [r3, #12]
    41ae:	2b00      	cmp	r3, #0
    41b0:	d004      	beq.n	41bc <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    41b2:	683b      	ldr	r3, [r7, #0]
    41b4:	2b00      	cmp	r3, #0
    41b6:	d001      	beq.n	41bc <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    41b8:	2301      	movs	r3, #1
    41ba:	e000      	b.n	41be <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1e>
    41bc:	2300      	movs	r3, #0
    41be:	226f      	movs	r2, #111	; 0x6f
    41c0:	4917      	ldr	r1, [pc, #92]	; (4220 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x80>)
    41c2:	4618      	mov	r0, r3
    41c4:	4b17      	ldr	r3, [pc, #92]	; (4224 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x84>)
    41c6:	4798      	blx	r3
	if (IsNotDeclaredTask(tk))
    41c8:	6839      	ldr	r1, [r7, #0]
    41ca:	6878      	ldr	r0, [r7, #4]
    41cc:	4b16      	ldr	r3, [pc, #88]	; (4228 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x88>)
    41ce:	4798      	blx	r3
    41d0:	4603      	mov	r3, r0
    41d2:	2b00      	cmp	r3, #0
    41d4:	d002      	beq.n	41dc <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x3c>
	{
			return ERR_NOT_FOUND;
    41d6:	f06f 0309 	mvn.w	r3, #9
    41da:	e01d      	b.n	4218 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
	} 
	else
	{
		
		if (!is_list_element(taskList, task)) {
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	68da      	ldr	r2, [r3, #12]
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	685b      	ldr	r3, [r3, #4]
    41e4:	4619      	mov	r1, r3
    41e6:	4610      	mov	r0, r2
    41e8:	4b10      	ldr	r3, [pc, #64]	; (422c <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x8c>)
    41ea:	4798      	blx	r3
    41ec:	4603      	mov	r3, r0
    41ee:	f083 0301 	eor.w	r3, r3, #1
    41f2:	b2db      	uxtb	r3, r3
    41f4:	2b00      	cmp	r3, #0
    41f6:	d002      	beq.n	41fe <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x5e>
			//ASSERT(false);
			return ERR_NOT_FOUND;
    41f8:	f06f 0309 	mvn.w	r3, #9
    41fc:	e00c      	b.n	4218 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
		}
			
		list_delete_element(taskList, task);
    41fe:	687b      	ldr	r3, [r7, #4]
    4200:	68da      	ldr	r2, [r3, #12]
    4202:	687b      	ldr	r3, [r7, #4]
    4204:	685b      	ldr	r3, [r3, #4]
    4206:	4619      	mov	r1, r3
    4208:	4610      	mov	r0, r2
    420a:	4b09      	ldr	r3, [pc, #36]	; (4230 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x90>)
    420c:	4798      	blx	r3
		task->id=kALUNotTaskEvent;
    420e:	687b      	ldr	r3, [r7, #4]
    4210:	685b      	ldr	r3, [r3, #4]
    4212:	2200      	movs	r2, #0
    4214:	711a      	strb	r2, [r3, #4]
		return ERR_NONE;
    4216:	2300      	movs	r3, #0
	}

	return ERR_NOT_FOUND;
}
    4218:	4618      	mov	r0, r3
    421a:	3708      	adds	r7, #8
    421c:	46bd      	mov	sp, r7
    421e:	bd80      	pop	{r7, pc}
    4220:	0001f448 	.word	0x0001f448
    4224:	00007d91 	.word	0x00007d91
    4228:	00004301 	.word	0x00004301
    422c:	00007db9 	.word	0x00007db9
    4230:	00007f1b 	.word	0x00007f1b

00004234 <_ZN17TaskHandler_Class15GetHighPrioTaskEv>:

ControllerTask	TaskHandler_Class::GetHighPrioTask(void){
    4234:	b480      	push	{r7}
    4236:	b087      	sub	sp, #28
    4238:	af00      	add	r7, sp, #0
    423a:	6078      	str	r0, [r7, #4]
    423c:	6039      	str	r1, [r7, #0]
	list_element *it;
	ControllerTask* ct;
	uint8_t		highPrio=kALUNumberTasks;
    423e:	2309      	movs	r3, #9
    4240:	73fb      	strb	r3, [r7, #15]
		
	for (it = taskList->head; it; it = it->next) {
    4242:	683b      	ldr	r3, [r7, #0]
    4244:	68db      	ldr	r3, [r3, #12]
    4246:	681b      	ldr	r3, [r3, #0]
    4248:	617b      	str	r3, [r7, #20]
    424a:	697b      	ldr	r3, [r7, #20]
    424c:	2b00      	cmp	r3, #0
    424e:	d011      	beq.n	4274 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x40>
		ct=(ControllerTask*)it;
    4250:	697b      	ldr	r3, [r7, #20]
    4252:	613b      	str	r3, [r7, #16]
		if ((ct->prio)<(highPrio)) {
    4254:	693b      	ldr	r3, [r7, #16]
    4256:	795b      	ldrb	r3, [r3, #5]
    4258:	461a      	mov	r2, r3
    425a:	7bfb      	ldrb	r3, [r7, #15]
    425c:	429a      	cmp	r2, r3
    425e:	da05      	bge.n	426c <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x38>
			highPrio=ct->prio;
    4260:	693b      	ldr	r3, [r7, #16]
    4262:	795b      	ldrb	r3, [r3, #5]
    4264:	73fb      	strb	r3, [r7, #15]
			task=ct;
    4266:	683b      	ldr	r3, [r7, #0]
    4268:	693a      	ldr	r2, [r7, #16]
    426a:	605a      	str	r2, [r3, #4]
	for (it = taskList->head; it; it = it->next) {
    426c:	697b      	ldr	r3, [r7, #20]
    426e:	681b      	ldr	r3, [r3, #0]
    4270:	617b      	str	r3, [r7, #20]
    4272:	e7ea      	b.n	424a <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x16>
			
		}
	}
	return (ControllerTask)(*task);
    4274:	683b      	ldr	r3, [r7, #0]
    4276:	685a      	ldr	r2, [r3, #4]
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	e892 0003 	ldmia.w	r2, {r0, r1}
    427e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4282:	6878      	ldr	r0, [r7, #4]
    4284:	371c      	adds	r7, #28
    4286:	46bd      	mov	sp, r7
    4288:	bc80      	pop	{r7}
    428a:	4770      	bx	lr

0000428c <_ZN17TaskHandler_Class19ChooseAvailableTaskEv>:

void	TaskHandler_Class::ChooseAvailableTask(void){
    428c:	b480      	push	{r7}
    428e:	b083      	sub	sp, #12
    4290:	af00      	add	r7, sp, #0
    4292:	6078      	str	r0, [r7, #4]
	for (i = 0; i < MAXIMUM_TASKS; i++)
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	2200      	movs	r2, #0
    4298:	721a      	strb	r2, [r3, #8]
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	7a1b      	ldrb	r3, [r3, #8]
    429e:	2b08      	cmp	r3, #8
    42a0:	dc23      	bgt.n	42ea <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x5e>
	{
		j=i%MAXIMUM_TASKS;
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	7a1a      	ldrb	r2, [r3, #8]
    42a6:	4b14      	ldr	r3, [pc, #80]	; (42f8 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x6c>)
    42a8:	fba3 1302 	umull	r1, r3, r3, r2
    42ac:	0859      	lsrs	r1, r3, #1
    42ae:	460b      	mov	r3, r1
    42b0:	00db      	lsls	r3, r3, #3
    42b2:	440b      	add	r3, r1
    42b4:	1ad3      	subs	r3, r2, r3
    42b6:	b2da      	uxtb	r2, r3
    42b8:	687b      	ldr	r3, [r7, #4]
    42ba:	725a      	strb	r2, [r3, #9]
		if (taskStorage[j].id==kALUNotTaskEvent)
    42bc:	687b      	ldr	r3, [r7, #4]
    42be:	7a5b      	ldrb	r3, [r3, #9]
    42c0:	4a0e      	ldr	r2, [pc, #56]	; (42fc <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x70>)
    42c2:	00db      	lsls	r3, r3, #3
    42c4:	4413      	add	r3, r2
    42c6:	791b      	ldrb	r3, [r3, #4]
    42c8:	2b00      	cmp	r3, #0
    42ca:	d107      	bne.n	42dc <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x50>
		{			
			task=&taskStorage[j];
    42cc:	687b      	ldr	r3, [r7, #4]
    42ce:	7a5b      	ldrb	r3, [r3, #9]
    42d0:	00db      	lsls	r3, r3, #3
    42d2:	4a0a      	ldr	r2, [pc, #40]	; (42fc <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x70>)
    42d4:	441a      	add	r2, r3
    42d6:	687b      	ldr	r3, [r7, #4]
    42d8:	605a      	str	r2, [r3, #4]
			return;
    42da:	e009      	b.n	42f0 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x64>
	for (i = 0; i < MAXIMUM_TASKS; i++)
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	7a1b      	ldrb	r3, [r3, #8]
    42e0:	3301      	adds	r3, #1
    42e2:	b2da      	uxtb	r2, r3
    42e4:	687b      	ldr	r3, [r7, #4]
    42e6:	721a      	strb	r2, [r3, #8]
    42e8:	e7d7      	b.n	429a <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0xe>
			
		}
	}
	task=&taskStorage[0];
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	4a03      	ldr	r2, [pc, #12]	; (42fc <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x70>)
    42ee:	605a      	str	r2, [r3, #4]

}
    42f0:	370c      	adds	r7, #12
    42f2:	46bd      	mov	sp, r7
    42f4:	bc80      	pop	{r7}
    42f6:	4770      	bx	lr
    42f8:	38e38e39 	.word	0x38e38e39
    42fc:	2000857c 	.word	0x2000857c

00004300 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask>:

bool	TaskHandler_Class::IsNotDeclaredTask(ControllerTask& tk){
    4300:	b480      	push	{r7}
    4302:	b083      	sub	sp, #12
    4304:	af00      	add	r7, sp, #0
    4306:	6078      	str	r0, [r7, #4]
    4308:	6039      	str	r1, [r7, #0]
	for (i = 0; i < MAXIMUM_TASKS; i++)
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	2200      	movs	r2, #0
    430e:	721a      	strb	r2, [r3, #8]
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	7a1b      	ldrb	r3, [r3, #8]
    4314:	2b08      	cmp	r3, #8
    4316:	dc19      	bgt.n	434c <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>
	{
		if (taskStorage[i].id==tk.id)
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	7a1b      	ldrb	r3, [r3, #8]
    431c:	4a0e      	ldr	r2, [pc, #56]	; (4358 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x58>)
    431e:	00db      	lsls	r3, r3, #3
    4320:	4413      	add	r3, r2
    4322:	791a      	ldrb	r2, [r3, #4]
    4324:	683b      	ldr	r3, [r7, #0]
    4326:	791b      	ldrb	r3, [r3, #4]
    4328:	429a      	cmp	r2, r3
    432a:	d108      	bne.n	433e <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x3e>
		{
			task=&taskStorage[i];
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	7a1b      	ldrb	r3, [r3, #8]
    4330:	00db      	lsls	r3, r3, #3
    4332:	4a09      	ldr	r2, [pc, #36]	; (4358 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x58>)
    4334:	441a      	add	r2, r3
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	605a      	str	r2, [r3, #4]
			return false;
    433a:	2300      	movs	r3, #0
    433c:	e007      	b.n	434e <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4e>
	for (i = 0; i < MAXIMUM_TASKS; i++)
    433e:	687b      	ldr	r3, [r7, #4]
    4340:	7a1b      	ldrb	r3, [r3, #8]
    4342:	3301      	adds	r3, #1
    4344:	b2da      	uxtb	r2, r3
    4346:	687b      	ldr	r3, [r7, #4]
    4348:	721a      	strb	r2, [r3, #8]
    434a:	e7e1      	b.n	4310 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x10>
			
		}
	}
	return true;
    434c:	2301      	movs	r3, #1


    434e:	4618      	mov	r0, r3
    4350:	370c      	adds	r7, #12
    4352:	46bd      	mov	sp, r7
    4354:	bc80      	pop	{r7}
    4356:	4770      	bx	lr
    4358:	2000857c 	.word	0x2000857c

0000435c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    435c:	b580      	push	{r7, lr}
    435e:	af00      	add	r7, sp, #0
	system_init();
    4360:	4b03      	ldr	r3, [pc, #12]	; (4370 <atmel_start_init+0x14>)
    4362:	4798      	blx	r3
	usb_init();
    4364:	4b03      	ldr	r3, [pc, #12]	; (4374 <atmel_start_init+0x18>)
    4366:	4798      	blx	r3
	spi_nor_flash_init();
    4368:	4b03      	ldr	r3, [pc, #12]	; (4378 <atmel_start_init+0x1c>)
    436a:	4798      	blx	r3
}
    436c:	bf00      	nop
    436e:	bd80      	pop	{r7, pc}
    4370:	00005715 	.word	0x00005715
    4374:	00010471 	.word	0x00010471
    4378:	00010405 	.word	0x00010405

0000437c <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    437c:	b480      	push	{r7}
    437e:	b085      	sub	sp, #20
    4380:	af00      	add	r7, sp, #0
    4382:	60f8      	str	r0, [r7, #12]
    4384:	460b      	mov	r3, r1
    4386:	607a      	str	r2, [r7, #4]
    4388:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    438a:	7afa      	ldrb	r2, [r7, #11]
    438c:	68fb      	ldr	r3, [r7, #12]
    438e:	3220      	adds	r2, #32
    4390:	6879      	ldr	r1, [r7, #4]
    4392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    4396:	bf00      	nop
    4398:	3714      	adds	r7, #20
    439a:	46bd      	mov	sp, r7
    439c:	f85d 7b04 	ldr.w	r7, [sp], #4
    43a0:	4770      	bx	lr

000043a2 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    43a2:	b480      	push	{r7}
    43a4:	b083      	sub	sp, #12
    43a6:	af00      	add	r7, sp, #0
    43a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    43aa:	687b      	ldr	r3, [r7, #4]
    43ac:	691b      	ldr	r3, [r3, #16]
    43ae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    43b2:	687b      	ldr	r3, [r7, #4]
    43b4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    43b6:	bf00      	nop
    43b8:	370c      	adds	r7, #12
    43ba:	46bd      	mov	sp, r7
    43bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c0:	4770      	bx	lr

000043c2 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    43c2:	b480      	push	{r7}
    43c4:	b083      	sub	sp, #12
    43c6:	af00      	add	r7, sp, #0
    43c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    43ca:	687b      	ldr	r3, [r7, #4]
    43cc:	691b      	ldr	r3, [r3, #16]
    43ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    43d2:	687b      	ldr	r3, [r7, #4]
    43d4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    43d6:	bf00      	nop
    43d8:	370c      	adds	r7, #12
    43da:	46bd      	mov	sp, r7
    43dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43e0:	4770      	bx	lr

000043e2 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    43e2:	b480      	push	{r7}
    43e4:	b083      	sub	sp, #12
    43e6:	af00      	add	r7, sp, #0
    43e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    43ea:	687b      	ldr	r3, [r7, #4]
    43ec:	691b      	ldr	r3, [r3, #16]
    43ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    43f6:	bf00      	nop
    43f8:	370c      	adds	r7, #12
    43fa:	46bd      	mov	sp, r7
    43fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4400:	4770      	bx	lr

00004402 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    4402:	b480      	push	{r7}
    4404:	b083      	sub	sp, #12
    4406:	af00      	add	r7, sp, #0
    4408:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	691b      	ldr	r3, [r3, #16]
    440e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    4412:	687b      	ldr	r3, [r7, #4]
    4414:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4416:	bf00      	nop
    4418:	370c      	adds	r7, #12
    441a:	46bd      	mov	sp, r7
    441c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4420:	4770      	bx	lr

00004422 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    4422:	b480      	push	{r7}
    4424:	b083      	sub	sp, #12
    4426:	af00      	add	r7, sp, #0
    4428:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	695b      	ldr	r3, [r3, #20]
    442e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    4432:	687b      	ldr	r3, [r7, #4]
    4434:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4436:	bf00      	nop
    4438:	370c      	adds	r7, #12
    443a:	46bd      	mov	sp, r7
    443c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4440:	4770      	bx	lr

00004442 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    4442:	b480      	push	{r7}
    4444:	b083      	sub	sp, #12
    4446:	af00      	add	r7, sp, #0
    4448:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    444a:	687b      	ldr	r3, [r7, #4]
    444c:	695b      	ldr	r3, [r3, #20]
    444e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4456:	bf00      	nop
    4458:	370c      	adds	r7, #12
    445a:	46bd      	mov	sp, r7
    445c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4460:	4770      	bx	lr

00004462 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    4462:	b480      	push	{r7}
    4464:	b083      	sub	sp, #12
    4466:	af00      	add	r7, sp, #0
    4468:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    446a:	687b      	ldr	r3, [r7, #4]
    446c:	695b      	ldr	r3, [r3, #20]
    446e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4472:	687b      	ldr	r3, [r7, #4]
    4474:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4476:	bf00      	nop
    4478:	370c      	adds	r7, #12
    447a:	46bd      	mov	sp, r7
    447c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4480:	4770      	bx	lr

00004482 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    4482:	b480      	push	{r7}
    4484:	b083      	sub	sp, #12
    4486:	af00      	add	r7, sp, #0
    4488:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	695b      	ldr	r3, [r3, #20]
    448e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4492:	687b      	ldr	r3, [r7, #4]
    4494:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4496:	bf00      	nop
    4498:	370c      	adds	r7, #12
    449a:	46bd      	mov	sp, r7
    449c:	f85d 7b04 	ldr.w	r7, [sp], #4
    44a0:	4770      	bx	lr

000044a2 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    44a2:	b480      	push	{r7}
    44a4:	b083      	sub	sp, #12
    44a6:	af00      	add	r7, sp, #0
    44a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    44aa:	687b      	ldr	r3, [r7, #4]
    44ac:	695b      	ldr	r3, [r3, #20]
    44ae:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    44b2:	687b      	ldr	r3, [r7, #4]
    44b4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    44b6:	bf00      	nop
    44b8:	370c      	adds	r7, #12
    44ba:	46bd      	mov	sp, r7
    44bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    44c0:	4770      	bx	lr

000044c2 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    44c2:	b480      	push	{r7}
    44c4:	b083      	sub	sp, #12
    44c6:	af00      	add	r7, sp, #0
    44c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    44ca:	687b      	ldr	r3, [r7, #4]
    44cc:	695b      	ldr	r3, [r3, #20]
    44ce:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    44d2:	687b      	ldr	r3, [r7, #4]
    44d4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    44d6:	bf00      	nop
    44d8:	370c      	adds	r7, #12
    44da:	46bd      	mov	sp, r7
    44dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    44e0:	4770      	bx	lr

000044e2 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    44e2:	b480      	push	{r7}
    44e4:	b083      	sub	sp, #12
    44e6:	af00      	add	r7, sp, #0
    44e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    44ea:	687b      	ldr	r3, [r7, #4]
    44ec:	699b      	ldr	r3, [r3, #24]
    44ee:	f043 0201 	orr.w	r2, r3, #1
    44f2:	687b      	ldr	r3, [r7, #4]
    44f4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    44f6:	bf00      	nop
    44f8:	370c      	adds	r7, #12
    44fa:	46bd      	mov	sp, r7
    44fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4500:	4770      	bx	lr

00004502 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    4502:	b480      	push	{r7}
    4504:	b083      	sub	sp, #12
    4506:	af00      	add	r7, sp, #0
    4508:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    450a:	687b      	ldr	r3, [r7, #4]
    450c:	699b      	ldr	r3, [r3, #24]
    450e:	f043 0202 	orr.w	r2, r3, #2
    4512:	687b      	ldr	r3, [r7, #4]
    4514:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4516:	bf00      	nop
    4518:	370c      	adds	r7, #12
    451a:	46bd      	mov	sp, r7
    451c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4520:	4770      	bx	lr

00004522 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    4522:	b480      	push	{r7}
    4524:	b083      	sub	sp, #12
    4526:	af00      	add	r7, sp, #0
    4528:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    452a:	687b      	ldr	r3, [r7, #4]
    452c:	699b      	ldr	r3, [r3, #24]
    452e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    4532:	687b      	ldr	r3, [r7, #4]
    4534:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4536:	bf00      	nop
    4538:	370c      	adds	r7, #12
    453a:	46bd      	mov	sp, r7
    453c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4540:	4770      	bx	lr

00004542 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
    4542:	b480      	push	{r7}
    4544:	b083      	sub	sp, #12
    4546:	af00      	add	r7, sp, #0
    4548:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    454a:	687b      	ldr	r3, [r7, #4]
    454c:	699b      	ldr	r3, [r3, #24]
    454e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4552:	687b      	ldr	r3, [r7, #4]
    4554:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4556:	bf00      	nop
    4558:	370c      	adds	r7, #12
    455a:	46bd      	mov	sp, r7
    455c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4560:	4770      	bx	lr

00004562 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    4562:	b480      	push	{r7}
    4564:	b083      	sub	sp, #12
    4566:	af00      	add	r7, sp, #0
    4568:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    456a:	687b      	ldr	r3, [r7, #4]
    456c:	699b      	ldr	r3, [r3, #24]
    456e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4572:	687b      	ldr	r3, [r7, #4]
    4574:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4576:	bf00      	nop
    4578:	370c      	adds	r7, #12
    457a:	46bd      	mov	sp, r7
    457c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4580:	4770      	bx	lr

00004582 <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    4582:	b480      	push	{r7}
    4584:	b083      	sub	sp, #12
    4586:	af00      	add	r7, sp, #0
    4588:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    458a:	687b      	ldr	r3, [r7, #4]
    458c:	699b      	ldr	r3, [r3, #24]
    458e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4596:	bf00      	nop
    4598:	370c      	adds	r7, #12
    459a:	46bd      	mov	sp, r7
    459c:	f85d 7b04 	ldr.w	r7, [sp], #4
    45a0:	4770      	bx	lr

000045a2 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    45a2:	b480      	push	{r7}
    45a4:	b083      	sub	sp, #12
    45a6:	af00      	add	r7, sp, #0
    45a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	69db      	ldr	r3, [r3, #28]
    45ae:	f043 0220 	orr.w	r2, r3, #32
    45b2:	687b      	ldr	r3, [r7, #4]
    45b4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    45b6:	bf00      	nop
    45b8:	370c      	adds	r7, #12
    45ba:	46bd      	mov	sp, r7
    45bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    45c0:	4770      	bx	lr

000045c2 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    45c2:	b480      	push	{r7}
    45c4:	b083      	sub	sp, #12
    45c6:	af00      	add	r7, sp, #0
    45c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	69db      	ldr	r3, [r3, #28]
    45ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    45d2:	687b      	ldr	r3, [r7, #4]
    45d4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    45d6:	bf00      	nop
    45d8:	370c      	adds	r7, #12
    45da:	46bd      	mov	sp, r7
    45dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    45e0:	4770      	bx	lr

000045e2 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    45e2:	b480      	push	{r7}
    45e4:	b083      	sub	sp, #12
    45e6:	af00      	add	r7, sp, #0
    45e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    45ea:	687b      	ldr	r3, [r7, #4]
    45ec:	69db      	ldr	r3, [r3, #28]
    45ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    45f2:	687b      	ldr	r3, [r7, #4]
    45f4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    45f6:	bf00      	nop
    45f8:	370c      	adds	r7, #12
    45fa:	46bd      	mov	sp, r7
    45fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4600:	4770      	bx	lr

00004602 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    4602:	b480      	push	{r7}
    4604:	b083      	sub	sp, #12
    4606:	af00      	add	r7, sp, #0
    4608:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	6a1b      	ldr	r3, [r3, #32]
    460e:	f043 0201 	orr.w	r2, r3, #1
    4612:	687b      	ldr	r3, [r7, #4]
    4614:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4616:	bf00      	nop
    4618:	370c      	adds	r7, #12
    461a:	46bd      	mov	sp, r7
    461c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4620:	4770      	bx	lr

00004622 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    4622:	b480      	push	{r7}
    4624:	b083      	sub	sp, #12
    4626:	af00      	add	r7, sp, #0
    4628:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	6a1b      	ldr	r3, [r3, #32]
    462e:	f043 0202 	orr.w	r2, r3, #2
    4632:	687b      	ldr	r3, [r7, #4]
    4634:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4636:	bf00      	nop
    4638:	370c      	adds	r7, #12
    463a:	46bd      	mov	sp, r7
    463c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4640:	4770      	bx	lr

00004642 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    4642:	b480      	push	{r7}
    4644:	b083      	sub	sp, #12
    4646:	af00      	add	r7, sp, #0
    4648:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	6a1b      	ldr	r3, [r3, #32]
    464e:	f043 0204 	orr.w	r2, r3, #4
    4652:	687b      	ldr	r3, [r7, #4]
    4654:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4656:	bf00      	nop
    4658:	370c      	adds	r7, #12
    465a:	46bd      	mov	sp, r7
    465c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4660:	4770      	bx	lr

00004662 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    4662:	b480      	push	{r7}
    4664:	b083      	sub	sp, #12
    4666:	af00      	add	r7, sp, #0
    4668:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    466a:	687b      	ldr	r3, [r7, #4]
    466c:	6a1b      	ldr	r3, [r3, #32]
    466e:	f043 0208 	orr.w	r2, r3, #8
    4672:	687b      	ldr	r3, [r7, #4]
    4674:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4676:	bf00      	nop
    4678:	370c      	adds	r7, #12
    467a:	46bd      	mov	sp, r7
    467c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4680:	4770      	bx	lr

00004682 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    4682:	b480      	push	{r7}
    4684:	b083      	sub	sp, #12
    4686:	af00      	add	r7, sp, #0
    4688:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	6a1b      	ldr	r3, [r3, #32]
    468e:	f043 0220 	orr.w	r2, r3, #32
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4696:	bf00      	nop
    4698:	370c      	adds	r7, #12
    469a:	46bd      	mov	sp, r7
    469c:	f85d 7b04 	ldr.w	r7, [sp], #4
    46a0:	4770      	bx	lr

000046a2 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    46a2:	b480      	push	{r7}
    46a4:	b085      	sub	sp, #20
    46a6:	af00      	add	r7, sp, #0
    46a8:	60f8      	str	r0, [r7, #12]
    46aa:	460b      	mov	r3, r1
    46ac:	607a      	str	r2, [r7, #4]
    46ae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    46b0:	7afb      	ldrb	r3, [r7, #11]
    46b2:	68fa      	ldr	r2, [r7, #12]
    46b4:	01db      	lsls	r3, r3, #7
    46b6:	4413      	add	r3, r2
    46b8:	3308      	adds	r3, #8
    46ba:	687a      	ldr	r2, [r7, #4]
    46bc:	601a      	str	r2, [r3, #0]
}
    46be:	bf00      	nop
    46c0:	3714      	adds	r7, #20
    46c2:	46bd      	mov	sp, r7
    46c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46c8:	4770      	bx	lr

000046ca <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    46ca:	b480      	push	{r7}
    46cc:	b085      	sub	sp, #20
    46ce:	af00      	add	r7, sp, #0
    46d0:	60f8      	str	r0, [r7, #12]
    46d2:	460b      	mov	r3, r1
    46d4:	607a      	str	r2, [r7, #4]
    46d6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    46d8:	7afb      	ldrb	r3, [r7, #11]
    46da:	68fa      	ldr	r2, [r7, #12]
    46dc:	01db      	lsls	r3, r3, #7
    46de:	4413      	add	r3, r2
    46e0:	3304      	adds	r3, #4
    46e2:	687a      	ldr	r2, [r7, #4]
    46e4:	601a      	str	r2, [r3, #0]
}
    46e6:	bf00      	nop
    46e8:	3714      	adds	r7, #20
    46ea:	46bd      	mov	sp, r7
    46ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    46f0:	4770      	bx	lr

000046f2 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    46f2:	b480      	push	{r7}
    46f4:	b085      	sub	sp, #20
    46f6:	af00      	add	r7, sp, #0
    46f8:	60f8      	str	r0, [r7, #12]
    46fa:	460b      	mov	r3, r1
    46fc:	607a      	str	r2, [r7, #4]
    46fe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4700:	7afb      	ldrb	r3, [r7, #11]
    4702:	68fa      	ldr	r2, [r7, #12]
    4704:	01db      	lsls	r3, r3, #7
    4706:	4413      	add	r3, r2
    4708:	3318      	adds	r3, #24
    470a:	687a      	ldr	r2, [r7, #4]
    470c:	601a      	str	r2, [r3, #0]
}
    470e:	bf00      	nop
    4710:	3714      	adds	r7, #20
    4712:	46bd      	mov	sp, r7
    4714:	f85d 7b04 	ldr.w	r7, [sp], #4
    4718:	4770      	bx	lr

0000471a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    471a:	b480      	push	{r7}
    471c:	b085      	sub	sp, #20
    471e:	af00      	add	r7, sp, #0
    4720:	60f8      	str	r0, [r7, #12]
    4722:	460b      	mov	r3, r1
    4724:	607a      	str	r2, [r7, #4]
    4726:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4728:	7afb      	ldrb	r3, [r7, #11]
    472a:	68fa      	ldr	r2, [r7, #12]
    472c:	01db      	lsls	r3, r3, #7
    472e:	4413      	add	r3, r2
    4730:	3314      	adds	r3, #20
    4732:	687a      	ldr	r2, [r7, #4]
    4734:	601a      	str	r2, [r3, #0]
}
    4736:	bf00      	nop
    4738:	3714      	adds	r7, #20
    473a:	46bd      	mov	sp, r7
    473c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4740:	4770      	bx	lr

00004742 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4742:	b480      	push	{r7}
    4744:	b085      	sub	sp, #20
    4746:	af00      	add	r7, sp, #0
    4748:	6078      	str	r0, [r7, #4]
    474a:	4608      	mov	r0, r1
    474c:	4611      	mov	r1, r2
    474e:	461a      	mov	r2, r3
    4750:	4603      	mov	r3, r0
    4752:	70fb      	strb	r3, [r7, #3]
    4754:	460b      	mov	r3, r1
    4756:	70bb      	strb	r3, [r7, #2]
    4758:	4613      	mov	r3, r2
    475a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    475c:	78fa      	ldrb	r2, [r7, #3]
    475e:	78bb      	ldrb	r3, [r7, #2]
    4760:	6879      	ldr	r1, [r7, #4]
    4762:	01d2      	lsls	r2, r2, #7
    4764:	440a      	add	r2, r1
    4766:	4413      	add	r3, r2
    4768:	3330      	adds	r3, #48	; 0x30
    476a:	781b      	ldrb	r3, [r3, #0]
    476c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    476e:	7bfb      	ldrb	r3, [r7, #15]
    4770:	f023 030f 	bic.w	r3, r3, #15
    4774:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    4776:	787b      	ldrb	r3, [r7, #1]
    4778:	f003 030f 	and.w	r3, r3, #15
    477c:	b2da      	uxtb	r2, r3
    477e:	7bfb      	ldrb	r3, [r7, #15]
    4780:	4313      	orrs	r3, r2
    4782:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4784:	78fa      	ldrb	r2, [r7, #3]
    4786:	78bb      	ldrb	r3, [r7, #2]
    4788:	6879      	ldr	r1, [r7, #4]
    478a:	01d2      	lsls	r2, r2, #7
    478c:	440a      	add	r2, r1
    478e:	4413      	add	r3, r2
    4790:	3330      	adds	r3, #48	; 0x30
    4792:	7bfa      	ldrb	r2, [r7, #15]
    4794:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4796:	bf00      	nop
    4798:	3714      	adds	r7, #20
    479a:	46bd      	mov	sp, r7
    479c:	f85d 7b04 	ldr.w	r7, [sp], #4
    47a0:	4770      	bx	lr

000047a2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    47a2:	b480      	push	{r7}
    47a4:	b085      	sub	sp, #20
    47a6:	af00      	add	r7, sp, #0
    47a8:	6078      	str	r0, [r7, #4]
    47aa:	4608      	mov	r0, r1
    47ac:	4611      	mov	r1, r2
    47ae:	461a      	mov	r2, r3
    47b0:	4603      	mov	r3, r0
    47b2:	70fb      	strb	r3, [r7, #3]
    47b4:	460b      	mov	r3, r1
    47b6:	70bb      	strb	r3, [r7, #2]
    47b8:	4613      	mov	r3, r2
    47ba:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    47bc:	78fa      	ldrb	r2, [r7, #3]
    47be:	78bb      	ldrb	r3, [r7, #2]
    47c0:	6879      	ldr	r1, [r7, #4]
    47c2:	01d2      	lsls	r2, r2, #7
    47c4:	440a      	add	r2, r1
    47c6:	4413      	add	r3, r2
    47c8:	3330      	adds	r3, #48	; 0x30
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    47ce:	7bfb      	ldrb	r3, [r7, #15]
    47d0:	f003 030f 	and.w	r3, r3, #15
    47d4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    47d6:	787b      	ldrb	r3, [r7, #1]
    47d8:	011b      	lsls	r3, r3, #4
    47da:	b2da      	uxtb	r2, r3
    47dc:	7bfb      	ldrb	r3, [r7, #15]
    47de:	4313      	orrs	r3, r2
    47e0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    47e2:	78fa      	ldrb	r2, [r7, #3]
    47e4:	78bb      	ldrb	r3, [r7, #2]
    47e6:	6879      	ldr	r1, [r7, #4]
    47e8:	01d2      	lsls	r2, r2, #7
    47ea:	440a      	add	r2, r1
    47ec:	4413      	add	r3, r2
    47ee:	3330      	adds	r3, #48	; 0x30
    47f0:	7bfa      	ldrb	r2, [r7, #15]
    47f2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    47f4:	bf00      	nop
    47f6:	3714      	adds	r7, #20
    47f8:	46bd      	mov	sp, r7
    47fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    47fe:	4770      	bx	lr

00004800 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    4800:	b480      	push	{r7}
    4802:	b085      	sub	sp, #20
    4804:	af00      	add	r7, sp, #0
    4806:	6078      	str	r0, [r7, #4]
    4808:	4608      	mov	r0, r1
    480a:	4611      	mov	r1, r2
    480c:	461a      	mov	r2, r3
    480e:	4603      	mov	r3, r0
    4810:	70fb      	strb	r3, [r7, #3]
    4812:	460b      	mov	r3, r1
    4814:	70bb      	strb	r3, [r7, #2]
    4816:	4613      	mov	r3, r2
    4818:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    481a:	78fa      	ldrb	r2, [r7, #3]
    481c:	78bb      	ldrb	r3, [r7, #2]
    481e:	6879      	ldr	r1, [r7, #4]
    4820:	01d2      	lsls	r2, r2, #7
    4822:	440a      	add	r2, r1
    4824:	4413      	add	r3, r2
    4826:	3340      	adds	r3, #64	; 0x40
    4828:	781b      	ldrb	r3, [r3, #0]
    482a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    482c:	7bfb      	ldrb	r3, [r7, #15]
    482e:	f023 0301 	bic.w	r3, r3, #1
    4832:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4834:	787a      	ldrb	r2, [r7, #1]
    4836:	7bfb      	ldrb	r3, [r7, #15]
    4838:	4313      	orrs	r3, r2
    483a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    483c:	78fa      	ldrb	r2, [r7, #3]
    483e:	78bb      	ldrb	r3, [r7, #2]
    4840:	6879      	ldr	r1, [r7, #4]
    4842:	01d2      	lsls	r2, r2, #7
    4844:	440a      	add	r2, r1
    4846:	4413      	add	r3, r2
    4848:	3340      	adds	r3, #64	; 0x40
    484a:	7bfa      	ldrb	r2, [r7, #15]
    484c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    484e:	bf00      	nop
    4850:	3714      	adds	r7, #20
    4852:	46bd      	mov	sp, r7
    4854:	f85d 7b04 	ldr.w	r7, [sp], #4
    4858:	4770      	bx	lr

0000485a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    485a:	b490      	push	{r4, r7}
    485c:	b082      	sub	sp, #8
    485e:	af00      	add	r7, sp, #0
    4860:	6078      	str	r0, [r7, #4]
    4862:	460b      	mov	r3, r1
    4864:	70fb      	strb	r3, [r7, #3]
    4866:	4613      	mov	r3, r2
    4868:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    486a:	78fa      	ldrb	r2, [r7, #3]
    486c:	78bb      	ldrb	r3, [r7, #2]
    486e:	78f8      	ldrb	r0, [r7, #3]
    4870:	78b9      	ldrb	r1, [r7, #2]
    4872:	687c      	ldr	r4, [r7, #4]
    4874:	01c0      	lsls	r0, r0, #7
    4876:	4420      	add	r0, r4
    4878:	4401      	add	r1, r0
    487a:	3140      	adds	r1, #64	; 0x40
    487c:	7809      	ldrb	r1, [r1, #0]
    487e:	b2c9      	uxtb	r1, r1
    4880:	f041 0104 	orr.w	r1, r1, #4
    4884:	b2c8      	uxtb	r0, r1
    4886:	6879      	ldr	r1, [r7, #4]
    4888:	01d2      	lsls	r2, r2, #7
    488a:	440a      	add	r2, r1
    488c:	4413      	add	r3, r2
    488e:	3340      	adds	r3, #64	; 0x40
    4890:	4602      	mov	r2, r0
    4892:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4894:	bf00      	nop
    4896:	3708      	adds	r7, #8
    4898:	46bd      	mov	sp, r7
    489a:	bc90      	pop	{r4, r7}
    489c:	4770      	bx	lr

0000489e <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    489e:	b490      	push	{r4, r7}
    48a0:	b082      	sub	sp, #8
    48a2:	af00      	add	r7, sp, #0
    48a4:	6078      	str	r0, [r7, #4]
    48a6:	460b      	mov	r3, r1
    48a8:	70fb      	strb	r3, [r7, #3]
    48aa:	4613      	mov	r3, r2
    48ac:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    48ae:	78fa      	ldrb	r2, [r7, #3]
    48b0:	78bb      	ldrb	r3, [r7, #2]
    48b2:	78f8      	ldrb	r0, [r7, #3]
    48b4:	78b9      	ldrb	r1, [r7, #2]
    48b6:	687c      	ldr	r4, [r7, #4]
    48b8:	01c0      	lsls	r0, r0, #7
    48ba:	4420      	add	r0, r4
    48bc:	4401      	add	r1, r0
    48be:	3140      	adds	r1, #64	; 0x40
    48c0:	7809      	ldrb	r1, [r1, #0]
    48c2:	b2c9      	uxtb	r1, r1
    48c4:	f021 0104 	bic.w	r1, r1, #4
    48c8:	b2c8      	uxtb	r0, r1
    48ca:	6879      	ldr	r1, [r7, #4]
    48cc:	01d2      	lsls	r2, r2, #7
    48ce:	440a      	add	r2, r1
    48d0:	4413      	add	r3, r2
    48d2:	3340      	adds	r3, #64	; 0x40
    48d4:	4602      	mov	r2, r0
    48d6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    48d8:	bf00      	nop
    48da:	3708      	adds	r7, #8
    48dc:	46bd      	mov	sp, r7
    48de:	bc90      	pop	{r4, r7}
    48e0:	4770      	bx	lr

000048e2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    48e2:	b480      	push	{r7}
    48e4:	b085      	sub	sp, #20
    48e6:	af00      	add	r7, sp, #0
    48e8:	60f8      	str	r0, [r7, #12]
    48ea:	460b      	mov	r3, r1
    48ec:	607a      	str	r2, [r7, #4]
    48ee:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    48f0:	7afb      	ldrb	r3, [r7, #11]
    48f2:	68fa      	ldr	r2, [r7, #12]
    48f4:	01db      	lsls	r3, r3, #7
    48f6:	4413      	add	r3, r2
    48f8:	3328      	adds	r3, #40	; 0x28
    48fa:	687a      	ldr	r2, [r7, #4]
    48fc:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    48fe:	bf00      	nop
    4900:	3714      	adds	r7, #20
    4902:	46bd      	mov	sp, r7
    4904:	f85d 7b04 	ldr.w	r7, [sp], #4
    4908:	4770      	bx	lr
	...

0000490c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    490c:	b580      	push	{r7, lr}
    490e:	b082      	sub	sp, #8
    4910:	af00      	add	r7, sp, #0
    4912:	4603      	mov	r3, r0
    4914:	6039      	str	r1, [r7, #0]
    4916:	71fb      	strb	r3, [r7, #7]
    4918:	4613      	mov	r3, r2
    491a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    491c:	79bb      	ldrb	r3, [r7, #6]
    491e:	2b01      	cmp	r3, #1
    4920:	d01c      	beq.n	495c <_gpio_set_direction+0x50>
    4922:	2b02      	cmp	r3, #2
    4924:	d037      	beq.n	4996 <_gpio_set_direction+0x8a>
    4926:	2b00      	cmp	r3, #0
    4928:	d14e      	bne.n	49c8 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    492a:	79fb      	ldrb	r3, [r7, #7]
    492c:	683a      	ldr	r2, [r7, #0]
    492e:	4619      	mov	r1, r3
    4930:	482a      	ldr	r0, [pc, #168]	; (49dc <_gpio_set_direction+0xd0>)
    4932:	4b2b      	ldr	r3, [pc, #172]	; (49e0 <_gpio_set_direction+0xd4>)
    4934:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4936:	683b      	ldr	r3, [r7, #0]
    4938:	b29b      	uxth	r3, r3
    493a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    493e:	79fb      	ldrb	r3, [r7, #7]
    4940:	4619      	mov	r1, r3
    4942:	4826      	ldr	r0, [pc, #152]	; (49dc <_gpio_set_direction+0xd0>)
    4944:	4b27      	ldr	r3, [pc, #156]	; (49e4 <_gpio_set_direction+0xd8>)
    4946:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4948:	683b      	ldr	r3, [r7, #0]
    494a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    494c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    4950:	79fb      	ldrb	r3, [r7, #7]
    4952:	4619      	mov	r1, r3
    4954:	4821      	ldr	r0, [pc, #132]	; (49dc <_gpio_set_direction+0xd0>)
    4956:	4b23      	ldr	r3, [pc, #140]	; (49e4 <_gpio_set_direction+0xd8>)
    4958:	4798      	blx	r3
		break;
    495a:	e03a      	b.n	49d2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    495c:	79fb      	ldrb	r3, [r7, #7]
    495e:	683a      	ldr	r2, [r7, #0]
    4960:	4619      	mov	r1, r3
    4962:	481e      	ldr	r0, [pc, #120]	; (49dc <_gpio_set_direction+0xd0>)
    4964:	4b1e      	ldr	r3, [pc, #120]	; (49e0 <_gpio_set_direction+0xd4>)
    4966:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    4968:	683b      	ldr	r3, [r7, #0]
    496a:	b29b      	uxth	r3, r3
    496c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    4970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4974:	79f9      	ldrb	r1, [r7, #7]
    4976:	461a      	mov	r2, r3
    4978:	4818      	ldr	r0, [pc, #96]	; (49dc <_gpio_set_direction+0xd0>)
    497a:	4b1a      	ldr	r3, [pc, #104]	; (49e4 <_gpio_set_direction+0xd8>)
    497c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    497e:	683b      	ldr	r3, [r7, #0]
    4980:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    4982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    498a:	79f9      	ldrb	r1, [r7, #7]
    498c:	461a      	mov	r2, r3
    498e:	4813      	ldr	r0, [pc, #76]	; (49dc <_gpio_set_direction+0xd0>)
    4990:	4b14      	ldr	r3, [pc, #80]	; (49e4 <_gpio_set_direction+0xd8>)
    4992:	4798      	blx	r3
		break;
    4994:	e01d      	b.n	49d2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    4996:	79fb      	ldrb	r3, [r7, #7]
    4998:	683a      	ldr	r2, [r7, #0]
    499a:	4619      	mov	r1, r3
    499c:	480f      	ldr	r0, [pc, #60]	; (49dc <_gpio_set_direction+0xd0>)
    499e:	4b12      	ldr	r3, [pc, #72]	; (49e8 <_gpio_set_direction+0xdc>)
    49a0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    49a2:	683b      	ldr	r3, [r7, #0]
    49a4:	b29b      	uxth	r3, r3
    49a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    49aa:	79fb      	ldrb	r3, [r7, #7]
    49ac:	4619      	mov	r1, r3
    49ae:	480b      	ldr	r0, [pc, #44]	; (49dc <_gpio_set_direction+0xd0>)
    49b0:	4b0c      	ldr	r3, [pc, #48]	; (49e4 <_gpio_set_direction+0xd8>)
    49b2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    49b4:	683b      	ldr	r3, [r7, #0]
    49b6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    49b8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    49bc:	79fb      	ldrb	r3, [r7, #7]
    49be:	4619      	mov	r1, r3
    49c0:	4806      	ldr	r0, [pc, #24]	; (49dc <_gpio_set_direction+0xd0>)
    49c2:	4b08      	ldr	r3, [pc, #32]	; (49e4 <_gpio_set_direction+0xd8>)
    49c4:	4798      	blx	r3
		break;
    49c6:	e004      	b.n	49d2 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    49c8:	2246      	movs	r2, #70	; 0x46
    49ca:	4908      	ldr	r1, [pc, #32]	; (49ec <_gpio_set_direction+0xe0>)
    49cc:	2000      	movs	r0, #0
    49ce:	4b08      	ldr	r3, [pc, #32]	; (49f0 <_gpio_set_direction+0xe4>)
    49d0:	4798      	blx	r3
	}
}
    49d2:	bf00      	nop
    49d4:	3708      	adds	r7, #8
    49d6:	46bd      	mov	sp, r7
    49d8:	bd80      	pop	{r7, pc}
    49da:	bf00      	nop
    49dc:	41008000 	.word	0x41008000
    49e0:	000046cb 	.word	0x000046cb
    49e4:	000048e3 	.word	0x000048e3
    49e8:	000046a3 	.word	0x000046a3
    49ec:	0001f464 	.word	0x0001f464
    49f0:	00007d91 	.word	0x00007d91

000049f4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    49f4:	b580      	push	{r7, lr}
    49f6:	b082      	sub	sp, #8
    49f8:	af00      	add	r7, sp, #0
    49fa:	4603      	mov	r3, r0
    49fc:	6039      	str	r1, [r7, #0]
    49fe:	71fb      	strb	r3, [r7, #7]
    4a00:	4613      	mov	r3, r2
    4a02:	71bb      	strb	r3, [r7, #6]
	if (level) {
    4a04:	79bb      	ldrb	r3, [r7, #6]
    4a06:	2b00      	cmp	r3, #0
    4a08:	d006      	beq.n	4a18 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    4a0a:	79fb      	ldrb	r3, [r7, #7]
    4a0c:	683a      	ldr	r2, [r7, #0]
    4a0e:	4619      	mov	r1, r3
    4a10:	4806      	ldr	r0, [pc, #24]	; (4a2c <_gpio_set_level+0x38>)
    4a12:	4b07      	ldr	r3, [pc, #28]	; (4a30 <_gpio_set_level+0x3c>)
    4a14:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    4a16:	e005      	b.n	4a24 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    4a18:	79fb      	ldrb	r3, [r7, #7]
    4a1a:	683a      	ldr	r2, [r7, #0]
    4a1c:	4619      	mov	r1, r3
    4a1e:	4803      	ldr	r0, [pc, #12]	; (4a2c <_gpio_set_level+0x38>)
    4a20:	4b04      	ldr	r3, [pc, #16]	; (4a34 <_gpio_set_level+0x40>)
    4a22:	4798      	blx	r3
}
    4a24:	bf00      	nop
    4a26:	3708      	adds	r7, #8
    4a28:	46bd      	mov	sp, r7
    4a2a:	bd80      	pop	{r7, pc}
    4a2c:	41008000 	.word	0x41008000
    4a30:	000046f3 	.word	0x000046f3
    4a34:	0000471b 	.word	0x0000471b

00004a38 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    4a38:	b580      	push	{r7, lr}
    4a3a:	b082      	sub	sp, #8
    4a3c:	af00      	add	r7, sp, #0
    4a3e:	4603      	mov	r3, r0
    4a40:	71fb      	strb	r3, [r7, #7]
    4a42:	460b      	mov	r3, r1
    4a44:	71bb      	strb	r3, [r7, #6]
    4a46:	4613      	mov	r3, r2
    4a48:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    4a4a:	797b      	ldrb	r3, [r7, #5]
    4a4c:	2b01      	cmp	r3, #1
    4a4e:	d00a      	beq.n	4a66 <_gpio_set_pin_pull_mode+0x2e>
    4a50:	2b02      	cmp	r3, #2
    4a52:	d01f      	beq.n	4a94 <_gpio_set_pin_pull_mode+0x5c>
    4a54:	2b00      	cmp	r3, #0
    4a56:	d134      	bne.n	4ac2 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    4a58:	79ba      	ldrb	r2, [r7, #6]
    4a5a:	79fb      	ldrb	r3, [r7, #7]
    4a5c:	4619      	mov	r1, r3
    4a5e:	481e      	ldr	r0, [pc, #120]	; (4ad8 <_gpio_set_pin_pull_mode+0xa0>)
    4a60:	4b1e      	ldr	r3, [pc, #120]	; (4adc <_gpio_set_pin_pull_mode+0xa4>)
    4a62:	4798      	blx	r3
		break;
    4a64:	e033      	b.n	4ace <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    4a66:	79bb      	ldrb	r3, [r7, #6]
    4a68:	2201      	movs	r2, #1
    4a6a:	409a      	lsls	r2, r3
    4a6c:	79fb      	ldrb	r3, [r7, #7]
    4a6e:	4619      	mov	r1, r3
    4a70:	4819      	ldr	r0, [pc, #100]	; (4ad8 <_gpio_set_pin_pull_mode+0xa0>)
    4a72:	4b1b      	ldr	r3, [pc, #108]	; (4ae0 <_gpio_set_pin_pull_mode+0xa8>)
    4a74:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4a76:	79ba      	ldrb	r2, [r7, #6]
    4a78:	79fb      	ldrb	r3, [r7, #7]
    4a7a:	4619      	mov	r1, r3
    4a7c:	4816      	ldr	r0, [pc, #88]	; (4ad8 <_gpio_set_pin_pull_mode+0xa0>)
    4a7e:	4b19      	ldr	r3, [pc, #100]	; (4ae4 <_gpio_set_pin_pull_mode+0xac>)
    4a80:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    4a82:	79bb      	ldrb	r3, [r7, #6]
    4a84:	2201      	movs	r2, #1
    4a86:	409a      	lsls	r2, r3
    4a88:	79fb      	ldrb	r3, [r7, #7]
    4a8a:	4619      	mov	r1, r3
    4a8c:	4812      	ldr	r0, [pc, #72]	; (4ad8 <_gpio_set_pin_pull_mode+0xa0>)
    4a8e:	4b16      	ldr	r3, [pc, #88]	; (4ae8 <_gpio_set_pin_pull_mode+0xb0>)
    4a90:	4798      	blx	r3
		break;
    4a92:	e01c      	b.n	4ace <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    4a94:	79bb      	ldrb	r3, [r7, #6]
    4a96:	2201      	movs	r2, #1
    4a98:	409a      	lsls	r2, r3
    4a9a:	79fb      	ldrb	r3, [r7, #7]
    4a9c:	4619      	mov	r1, r3
    4a9e:	480e      	ldr	r0, [pc, #56]	; (4ad8 <_gpio_set_pin_pull_mode+0xa0>)
    4aa0:	4b0f      	ldr	r3, [pc, #60]	; (4ae0 <_gpio_set_pin_pull_mode+0xa8>)
    4aa2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4aa4:	79ba      	ldrb	r2, [r7, #6]
    4aa6:	79fb      	ldrb	r3, [r7, #7]
    4aa8:	4619      	mov	r1, r3
    4aaa:	480b      	ldr	r0, [pc, #44]	; (4ad8 <_gpio_set_pin_pull_mode+0xa0>)
    4aac:	4b0d      	ldr	r3, [pc, #52]	; (4ae4 <_gpio_set_pin_pull_mode+0xac>)
    4aae:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    4ab0:	79bb      	ldrb	r3, [r7, #6]
    4ab2:	2201      	movs	r2, #1
    4ab4:	409a      	lsls	r2, r3
    4ab6:	79fb      	ldrb	r3, [r7, #7]
    4ab8:	4619      	mov	r1, r3
    4aba:	4807      	ldr	r0, [pc, #28]	; (4ad8 <_gpio_set_pin_pull_mode+0xa0>)
    4abc:	4b0b      	ldr	r3, [pc, #44]	; (4aec <_gpio_set_pin_pull_mode+0xb4>)
    4abe:	4798      	blx	r3
		break;
    4ac0:	e005      	b.n	4ace <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    4ac2:	2289      	movs	r2, #137	; 0x89
    4ac4:	490a      	ldr	r1, [pc, #40]	; (4af0 <_gpio_set_pin_pull_mode+0xb8>)
    4ac6:	2000      	movs	r0, #0
    4ac8:	4b0a      	ldr	r3, [pc, #40]	; (4af4 <_gpio_set_pin_pull_mode+0xbc>)
    4aca:	4798      	blx	r3
		break;
    4acc:	bf00      	nop
	}
}
    4ace:	bf00      	nop
    4ad0:	3708      	adds	r7, #8
    4ad2:	46bd      	mov	sp, r7
    4ad4:	bd80      	pop	{r7, pc}
    4ad6:	bf00      	nop
    4ad8:	41008000 	.word	0x41008000
    4adc:	0000489f 	.word	0x0000489f
    4ae0:	000046cb 	.word	0x000046cb
    4ae4:	0000485b 	.word	0x0000485b
    4ae8:	000046f3 	.word	0x000046f3
    4aec:	0000471b 	.word	0x0000471b
    4af0:	0001f464 	.word	0x0001f464
    4af4:	00007d91 	.word	0x00007d91

00004af8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    4af8:	b590      	push	{r4, r7, lr}
    4afa:	b085      	sub	sp, #20
    4afc:	af00      	add	r7, sp, #0
    4afe:	6078      	str	r0, [r7, #4]
    4b00:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	095b      	lsrs	r3, r3, #5
    4b06:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	b2db      	uxtb	r3, r3
    4b0c:	f003 031f 	and.w	r3, r3, #31
    4b10:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    4b12:	683b      	ldr	r3, [r7, #0]
    4b14:	f1b3 3fff 	cmp.w	r3, #4294967295
    4b18:	d106      	bne.n	4b28 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    4b1a:	7bba      	ldrb	r2, [r7, #14]
    4b1c:	7bf9      	ldrb	r1, [r7, #15]
    4b1e:	2300      	movs	r3, #0
    4b20:	4812      	ldr	r0, [pc, #72]	; (4b6c <_gpio_set_pin_function+0x74>)
    4b22:	4c13      	ldr	r4, [pc, #76]	; (4b70 <_gpio_set_pin_function+0x78>)
    4b24:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    4b26:	e01d      	b.n	4b64 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    4b28:	7bba      	ldrb	r2, [r7, #14]
    4b2a:	7bf9      	ldrb	r1, [r7, #15]
    4b2c:	2301      	movs	r3, #1
    4b2e:	480f      	ldr	r0, [pc, #60]	; (4b6c <_gpio_set_pin_function+0x74>)
    4b30:	4c0f      	ldr	r4, [pc, #60]	; (4b70 <_gpio_set_pin_function+0x78>)
    4b32:	47a0      	blx	r4
		if (pin & 1) {
    4b34:	7bbb      	ldrb	r3, [r7, #14]
    4b36:	f003 0301 	and.w	r3, r3, #1
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	d009      	beq.n	4b52 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    4b3e:	7bbb      	ldrb	r3, [r7, #14]
    4b40:	085b      	lsrs	r3, r3, #1
    4b42:	b2da      	uxtb	r2, r3
    4b44:	683b      	ldr	r3, [r7, #0]
    4b46:	b2db      	uxtb	r3, r3
    4b48:	7bf9      	ldrb	r1, [r7, #15]
    4b4a:	4808      	ldr	r0, [pc, #32]	; (4b6c <_gpio_set_pin_function+0x74>)
    4b4c:	4c09      	ldr	r4, [pc, #36]	; (4b74 <_gpio_set_pin_function+0x7c>)
    4b4e:	47a0      	blx	r4
}
    4b50:	e008      	b.n	4b64 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    4b52:	7bbb      	ldrb	r3, [r7, #14]
    4b54:	085b      	lsrs	r3, r3, #1
    4b56:	b2da      	uxtb	r2, r3
    4b58:	683b      	ldr	r3, [r7, #0]
    4b5a:	b2db      	uxtb	r3, r3
    4b5c:	7bf9      	ldrb	r1, [r7, #15]
    4b5e:	4803      	ldr	r0, [pc, #12]	; (4b6c <_gpio_set_pin_function+0x74>)
    4b60:	4c05      	ldr	r4, [pc, #20]	; (4b78 <_gpio_set_pin_function+0x80>)
    4b62:	47a0      	blx	r4
}
    4b64:	bf00      	nop
    4b66:	3714      	adds	r7, #20
    4b68:	46bd      	mov	sp, r7
    4b6a:	bd90      	pop	{r4, r7, pc}
    4b6c:	41008000 	.word	0x41008000
    4b70:	00004801 	.word	0x00004801
    4b74:	000047a3 	.word	0x000047a3
    4b78:	00004743 	.word	0x00004743

00004b7c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    4b7c:	b580      	push	{r7, lr}
    4b7e:	b082      	sub	sp, #8
    4b80:	af00      	add	r7, sp, #0
    4b82:	4603      	mov	r3, r0
    4b84:	460a      	mov	r2, r1
    4b86:	71fb      	strb	r3, [r7, #7]
    4b88:	4613      	mov	r3, r2
    4b8a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    4b8c:	79fb      	ldrb	r3, [r7, #7]
    4b8e:	095b      	lsrs	r3, r3, #5
    4b90:	b2d8      	uxtb	r0, r3
    4b92:	79fb      	ldrb	r3, [r7, #7]
    4b94:	f003 031f 	and.w	r3, r3, #31
    4b98:	b2db      	uxtb	r3, r3
    4b9a:	79ba      	ldrb	r2, [r7, #6]
    4b9c:	4619      	mov	r1, r3
    4b9e:	4b03      	ldr	r3, [pc, #12]	; (4bac <gpio_set_pin_pull_mode+0x30>)
    4ba0:	4798      	blx	r3
}
    4ba2:	bf00      	nop
    4ba4:	3708      	adds	r7, #8
    4ba6:	46bd      	mov	sp, r7
    4ba8:	bd80      	pop	{r7, pc}
    4baa:	bf00      	nop
    4bac:	00004a39 	.word	0x00004a39

00004bb0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	b082      	sub	sp, #8
    4bb4:	af00      	add	r7, sp, #0
    4bb6:	6078      	str	r0, [r7, #4]
    4bb8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    4bba:	6839      	ldr	r1, [r7, #0]
    4bbc:	6878      	ldr	r0, [r7, #4]
    4bbe:	4b03      	ldr	r3, [pc, #12]	; (4bcc <gpio_set_pin_function+0x1c>)
    4bc0:	4798      	blx	r3
}
    4bc2:	bf00      	nop
    4bc4:	3708      	adds	r7, #8
    4bc6:	46bd      	mov	sp, r7
    4bc8:	bd80      	pop	{r7, pc}
    4bca:	bf00      	nop
    4bcc:	00004af9 	.word	0x00004af9

00004bd0 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    4bd0:	b580      	push	{r7, lr}
    4bd2:	b082      	sub	sp, #8
    4bd4:	af00      	add	r7, sp, #0
    4bd6:	4603      	mov	r3, r0
    4bd8:	460a      	mov	r2, r1
    4bda:	71fb      	strb	r3, [r7, #7]
    4bdc:	4613      	mov	r3, r2
    4bde:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    4be0:	79fb      	ldrb	r3, [r7, #7]
    4be2:	095b      	lsrs	r3, r3, #5
    4be4:	b2d8      	uxtb	r0, r3
    4be6:	79fb      	ldrb	r3, [r7, #7]
    4be8:	f003 031f 	and.w	r3, r3, #31
    4bec:	2201      	movs	r2, #1
    4bee:	fa02 f303 	lsl.w	r3, r2, r3
    4bf2:	79ba      	ldrb	r2, [r7, #6]
    4bf4:	4619      	mov	r1, r3
    4bf6:	4b03      	ldr	r3, [pc, #12]	; (4c04 <gpio_set_pin_direction+0x34>)
    4bf8:	4798      	blx	r3
}
    4bfa:	bf00      	nop
    4bfc:	3708      	adds	r7, #8
    4bfe:	46bd      	mov	sp, r7
    4c00:	bd80      	pop	{r7, pc}
    4c02:	bf00      	nop
    4c04:	0000490d 	.word	0x0000490d

00004c08 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    4c08:	b580      	push	{r7, lr}
    4c0a:	b082      	sub	sp, #8
    4c0c:	af00      	add	r7, sp, #0
    4c0e:	4603      	mov	r3, r0
    4c10:	460a      	mov	r2, r1
    4c12:	71fb      	strb	r3, [r7, #7]
    4c14:	4613      	mov	r3, r2
    4c16:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    4c18:	79fb      	ldrb	r3, [r7, #7]
    4c1a:	095b      	lsrs	r3, r3, #5
    4c1c:	b2d8      	uxtb	r0, r3
    4c1e:	79fb      	ldrb	r3, [r7, #7]
    4c20:	f003 031f 	and.w	r3, r3, #31
    4c24:	2201      	movs	r2, #1
    4c26:	fa02 f303 	lsl.w	r3, r2, r3
    4c2a:	79ba      	ldrb	r2, [r7, #6]
    4c2c:	4619      	mov	r1, r3
    4c2e:	4b03      	ldr	r3, [pc, #12]	; (4c3c <gpio_set_pin_level+0x34>)
    4c30:	4798      	blx	r3
}
    4c32:	bf00      	nop
    4c34:	3708      	adds	r7, #8
    4c36:	46bd      	mov	sp, r7
    4c38:	bd80      	pop	{r7, pc}
    4c3a:	bf00      	nop
    4c3c:	000049f5 	.word	0x000049f5

00004c40 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    4c40:	b580      	push	{r7, lr}
    4c42:	af00      	add	r7, sp, #0
	_init_chip();
    4c44:	4b01      	ldr	r3, [pc, #4]	; (4c4c <init_mcu+0xc>)
    4c46:	4798      	blx	r3
}
    4c48:	bf00      	nop
    4c4a:	bd80      	pop	{r7, pc}
    4c4c:	0000899d 	.word	0x0000899d

00004c50 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    4c50:	b580      	push	{r7, lr}
    4c52:	b082      	sub	sp, #8
    4c54:	af00      	add	r7, sp, #0
    4c56:	6078      	str	r0, [r7, #4]
    4c58:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    4c5a:	687b      	ldr	r3, [r7, #4]
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	d004      	beq.n	4c6a <wdt_init+0x1a>
    4c60:	683b      	ldr	r3, [r7, #0]
    4c62:	2b00      	cmp	r3, #0
    4c64:	d001      	beq.n	4c6a <wdt_init+0x1a>
    4c66:	2301      	movs	r3, #1
    4c68:	e000      	b.n	4c6c <wdt_init+0x1c>
    4c6a:	2300      	movs	r3, #0
    4c6c:	f003 0301 	and.w	r3, r3, #1
    4c70:	b2db      	uxtb	r3, r3
    4c72:	2248      	movs	r2, #72	; 0x48
    4c74:	4907      	ldr	r1, [pc, #28]	; (4c94 <wdt_init+0x44>)
    4c76:	4618      	mov	r0, r3
    4c78:	4b07      	ldr	r3, [pc, #28]	; (4c98 <wdt_init+0x48>)
    4c7a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	683a      	ldr	r2, [r7, #0]
    4c80:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    4c82:	687b      	ldr	r3, [r7, #4]
    4c84:	4618      	mov	r0, r3
    4c86:	4b05      	ldr	r3, [pc, #20]	; (4c9c <wdt_init+0x4c>)
    4c88:	4798      	blx	r3
    4c8a:	4603      	mov	r3, r0
}
    4c8c:	4618      	mov	r0, r3
    4c8e:	3708      	adds	r7, #8
    4c90:	46bd      	mov	sp, r7
    4c92:	bd80      	pop	{r7, pc}
    4c94:	0001f480 	.word	0x0001f480
    4c98:	00007d91 	.word	0x00007d91
    4c9c:	0000fea9 	.word	0x0000fea9

00004ca0 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    4ca4:	4804      	ldr	r0, [pc, #16]	; (4cb8 <CRC_CALC_init+0x18>)
    4ca6:	4b05      	ldr	r3, [pc, #20]	; (4cbc <CRC_CALC_init+0x1c>)
    4ca8:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    4caa:	4905      	ldr	r1, [pc, #20]	; (4cc0 <CRC_CALC_init+0x20>)
    4cac:	4805      	ldr	r0, [pc, #20]	; (4cc4 <CRC_CALC_init+0x24>)
    4cae:	4b06      	ldr	r3, [pc, #24]	; (4cc8 <CRC_CALC_init+0x28>)
    4cb0:	4798      	blx	r3
}
    4cb2:	bf00      	nop
    4cb4:	bd80      	pop	{r7, pc}
    4cb6:	bf00      	nop
    4cb8:	40000800 	.word	0x40000800
    4cbc:	00004503 	.word	0x00004503
    4cc0:	41002000 	.word	0x41002000
    4cc4:	2000a358 	.word	0x2000a358
    4cc8:	00005f05 	.word	0x00005f05

00004ccc <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    4ccc:	b580      	push	{r7, lr}
    4cce:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4cd0:	2244      	movs	r2, #68	; 0x44
    4cd2:	2104      	movs	r1, #4
    4cd4:	4832      	ldr	r0, [pc, #200]	; (4da0 <EXTERNAL_IRQ_0_init+0xd4>)
    4cd6:	4b33      	ldr	r3, [pc, #204]	; (4da4 <EXTERNAL_IRQ_0_init+0xd8>)
    4cd8:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    4cda:	4833      	ldr	r0, [pc, #204]	; (4da8 <EXTERNAL_IRQ_0_init+0xdc>)
    4cdc:	4b33      	ldr	r3, [pc, #204]	; (4dac <EXTERNAL_IRQ_0_init+0xe0>)
    4cde:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    4ce0:	2101      	movs	r1, #1
    4ce2:	2040      	movs	r0, #64	; 0x40
    4ce4:	4b32      	ldr	r3, [pc, #200]	; (4db0 <EXTERNAL_IRQ_0_init+0xe4>)
    4ce6:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    4ce8:	2100      	movs	r1, #0
    4cea:	2040      	movs	r0, #64	; 0x40
    4cec:	4b31      	ldr	r3, [pc, #196]	; (4db4 <EXTERNAL_IRQ_0_init+0xe8>)
    4cee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    4cf0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4cf4:	2040      	movs	r0, #64	; 0x40
    4cf6:	4b30      	ldr	r3, [pc, #192]	; (4db8 <EXTERNAL_IRQ_0_init+0xec>)
    4cf8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    4cfa:	2101      	movs	r1, #1
    4cfc:	2004      	movs	r0, #4
    4cfe:	4b2c      	ldr	r3, [pc, #176]	; (4db0 <EXTERNAL_IRQ_0_init+0xe4>)
    4d00:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    4d02:	2102      	movs	r1, #2
    4d04:	2004      	movs	r0, #4
    4d06:	4b2b      	ldr	r3, [pc, #172]	; (4db4 <EXTERNAL_IRQ_0_init+0xe8>)
    4d08:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    4d0a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    4d0e:	2004      	movs	r0, #4
    4d10:	4b29      	ldr	r3, [pc, #164]	; (4db8 <EXTERNAL_IRQ_0_init+0xec>)
    4d12:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    4d14:	2101      	movs	r1, #1
    4d16:	2005      	movs	r0, #5
    4d18:	4b25      	ldr	r3, [pc, #148]	; (4db0 <EXTERNAL_IRQ_0_init+0xe4>)
    4d1a:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    4d1c:	2102      	movs	r1, #2
    4d1e:	2005      	movs	r0, #5
    4d20:	4b24      	ldr	r3, [pc, #144]	; (4db4 <EXTERNAL_IRQ_0_init+0xe8>)
    4d22:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    4d24:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    4d28:	2005      	movs	r0, #5
    4d2a:	4b23      	ldr	r3, [pc, #140]	; (4db8 <EXTERNAL_IRQ_0_init+0xec>)
    4d2c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    4d2e:	2101      	movs	r1, #1
    4d30:	2056      	movs	r0, #86	; 0x56
    4d32:	4b1f      	ldr	r3, [pc, #124]	; (4db0 <EXTERNAL_IRQ_0_init+0xe4>)
    4d34:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    4d36:	2102      	movs	r1, #2
    4d38:	2056      	movs	r0, #86	; 0x56
    4d3a:	4b1e      	ldr	r3, [pc, #120]	; (4db4 <EXTERNAL_IRQ_0_init+0xe8>)
    4d3c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    4d3e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    4d42:	2056      	movs	r0, #86	; 0x56
    4d44:	4b1c      	ldr	r3, [pc, #112]	; (4db8 <EXTERNAL_IRQ_0_init+0xec>)
    4d46:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    4d48:	2101      	movs	r1, #1
    4d4a:	2057      	movs	r0, #87	; 0x57
    4d4c:	4b18      	ldr	r3, [pc, #96]	; (4db0 <EXTERNAL_IRQ_0_init+0xe4>)
    4d4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    4d50:	2102      	movs	r1, #2
    4d52:	2057      	movs	r0, #87	; 0x57
    4d54:	4b17      	ldr	r3, [pc, #92]	; (4db4 <EXTERNAL_IRQ_0_init+0xe8>)
    4d56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    4d58:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    4d5c:	2057      	movs	r0, #87	; 0x57
    4d5e:	4b16      	ldr	r3, [pc, #88]	; (4db8 <EXTERNAL_IRQ_0_init+0xec>)
    4d60:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    4d62:	2101      	movs	r1, #1
    4d64:	2028      	movs	r0, #40	; 0x28
    4d66:	4b12      	ldr	r3, [pc, #72]	; (4db0 <EXTERNAL_IRQ_0_init+0xe4>)
    4d68:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    4d6a:	2100      	movs	r1, #0
    4d6c:	2028      	movs	r0, #40	; 0x28
    4d6e:	4b11      	ldr	r3, [pc, #68]	; (4db4 <EXTERNAL_IRQ_0_init+0xe8>)
    4d70:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    4d72:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    4d76:	2028      	movs	r0, #40	; 0x28
    4d78:	4b0f      	ldr	r3, [pc, #60]	; (4db8 <EXTERNAL_IRQ_0_init+0xec>)
    4d7a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    4d7c:	2101      	movs	r1, #1
    4d7e:	2029      	movs	r0, #41	; 0x29
    4d80:	4b0b      	ldr	r3, [pc, #44]	; (4db0 <EXTERNAL_IRQ_0_init+0xe4>)
    4d82:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    4d84:	2100      	movs	r1, #0
    4d86:	2029      	movs	r0, #41	; 0x29
    4d88:	4b0a      	ldr	r3, [pc, #40]	; (4db4 <EXTERNAL_IRQ_0_init+0xe8>)
    4d8a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    4d8c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    4d90:	2029      	movs	r0, #41	; 0x29
    4d92:	4b09      	ldr	r3, [pc, #36]	; (4db8 <EXTERNAL_IRQ_0_init+0xec>)
    4d94:	4798      	blx	r3

	ext_irq_init();
    4d96:	4b09      	ldr	r3, [pc, #36]	; (4dbc <EXTERNAL_IRQ_0_init+0xf0>)
    4d98:	4798      	blx	r3
}
    4d9a:	bf00      	nop
    4d9c:	bd80      	pop	{r7, pc}
    4d9e:	bf00      	nop
    4da0:	40001c00 	.word	0x40001c00
    4da4:	0000437d 	.word	0x0000437d
    4da8:	40000800 	.word	0x40000800
    4dac:	00004463 	.word	0x00004463
    4db0:	00004bd1 	.word	0x00004bd1
    4db4:	00004b7d 	.word	0x00004b7d
    4db8:	00004bb1 	.word	0x00004bb1
    4dbc:	00006069 	.word	0x00006069

00004dc0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    4dc0:	b580      	push	{r7, lr}
    4dc2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4dc4:	2244      	movs	r2, #68	; 0x44
    4dc6:	210b      	movs	r1, #11
    4dc8:	4807      	ldr	r0, [pc, #28]	; (4de8 <EVENT_SYSTEM_0_init+0x28>)
    4dca:	4b08      	ldr	r3, [pc, #32]	; (4dec <EVENT_SYSTEM_0_init+0x2c>)
    4dcc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4dce:	2244      	movs	r2, #68	; 0x44
    4dd0:	210c      	movs	r1, #12
    4dd2:	4805      	ldr	r0, [pc, #20]	; (4de8 <EVENT_SYSTEM_0_init+0x28>)
    4dd4:	4b05      	ldr	r3, [pc, #20]	; (4dec <EVENT_SYSTEM_0_init+0x2c>)
    4dd6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    4dd8:	4805      	ldr	r0, [pc, #20]	; (4df0 <EVENT_SYSTEM_0_init+0x30>)
    4dda:	4b06      	ldr	r3, [pc, #24]	; (4df4 <EVENT_SYSTEM_0_init+0x34>)
    4ddc:	4798      	blx	r3

	event_system_init();
    4dde:	4b06      	ldr	r3, [pc, #24]	; (4df8 <EVENT_SYSTEM_0_init+0x38>)
    4de0:	4798      	blx	r3
}
    4de2:	bf00      	nop
    4de4:	bd80      	pop	{r7, pc}
    4de6:	bf00      	nop
    4de8:	40001c00 	.word	0x40001c00
    4dec:	0000437d 	.word	0x0000437d
    4df0:	40000800 	.word	0x40000800
    4df4:	00004523 	.word	0x00004523
    4df8:	00006055 	.word	0x00006055

00004dfc <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    4dfc:	b580      	push	{r7, lr}
    4dfe:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    4e00:	2101      	movs	r1, #1
    4e02:	202b      	movs	r0, #43	; 0x2b
    4e04:	4b2b      	ldr	r3, [pc, #172]	; (4eb4 <QSPI_N25Q256_PORT_init+0xb8>)
    4e06:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    4e08:	2100      	movs	r1, #0
    4e0a:	202b      	movs	r0, #43	; 0x2b
    4e0c:	4b2a      	ldr	r3, [pc, #168]	; (4eb8 <QSPI_N25Q256_PORT_init+0xbc>)
    4e0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    4e10:	492a      	ldr	r1, [pc, #168]	; (4ebc <QSPI_N25Q256_PORT_init+0xc0>)
    4e12:	202b      	movs	r0, #43	; 0x2b
    4e14:	4b2a      	ldr	r3, [pc, #168]	; (4ec0 <QSPI_N25Q256_PORT_init+0xc4>)
    4e16:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    4e18:	2102      	movs	r1, #2
    4e1a:	2008      	movs	r0, #8
    4e1c:	4b25      	ldr	r3, [pc, #148]	; (4eb4 <QSPI_N25Q256_PORT_init+0xb8>)
    4e1e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    4e20:	2100      	movs	r1, #0
    4e22:	2008      	movs	r0, #8
    4e24:	4b27      	ldr	r3, [pc, #156]	; (4ec4 <QSPI_N25Q256_PORT_init+0xc8>)
    4e26:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    4e28:	2100      	movs	r1, #0
    4e2a:	2008      	movs	r0, #8
    4e2c:	4b22      	ldr	r3, [pc, #136]	; (4eb8 <QSPI_N25Q256_PORT_init+0xbc>)
    4e2e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    4e30:	4925      	ldr	r1, [pc, #148]	; (4ec8 <QSPI_N25Q256_PORT_init+0xcc>)
    4e32:	2008      	movs	r0, #8
    4e34:	4b22      	ldr	r3, [pc, #136]	; (4ec0 <QSPI_N25Q256_PORT_init+0xc4>)
    4e36:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    4e38:	2102      	movs	r1, #2
    4e3a:	2009      	movs	r0, #9
    4e3c:	4b1d      	ldr	r3, [pc, #116]	; (4eb4 <QSPI_N25Q256_PORT_init+0xb8>)
    4e3e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    4e40:	2100      	movs	r1, #0
    4e42:	2009      	movs	r0, #9
    4e44:	4b1f      	ldr	r3, [pc, #124]	; (4ec4 <QSPI_N25Q256_PORT_init+0xc8>)
    4e46:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    4e48:	2100      	movs	r1, #0
    4e4a:	2009      	movs	r0, #9
    4e4c:	4b1a      	ldr	r3, [pc, #104]	; (4eb8 <QSPI_N25Q256_PORT_init+0xbc>)
    4e4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    4e50:	491e      	ldr	r1, [pc, #120]	; (4ecc <QSPI_N25Q256_PORT_init+0xd0>)
    4e52:	2009      	movs	r0, #9
    4e54:	4b1a      	ldr	r3, [pc, #104]	; (4ec0 <QSPI_N25Q256_PORT_init+0xc4>)
    4e56:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    4e58:	2102      	movs	r1, #2
    4e5a:	200a      	movs	r0, #10
    4e5c:	4b15      	ldr	r3, [pc, #84]	; (4eb4 <QSPI_N25Q256_PORT_init+0xb8>)
    4e5e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    4e60:	2100      	movs	r1, #0
    4e62:	200a      	movs	r0, #10
    4e64:	4b17      	ldr	r3, [pc, #92]	; (4ec4 <QSPI_N25Q256_PORT_init+0xc8>)
    4e66:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    4e68:	2100      	movs	r1, #0
    4e6a:	200a      	movs	r0, #10
    4e6c:	4b12      	ldr	r3, [pc, #72]	; (4eb8 <QSPI_N25Q256_PORT_init+0xbc>)
    4e6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    4e70:	4917      	ldr	r1, [pc, #92]	; (4ed0 <QSPI_N25Q256_PORT_init+0xd4>)
    4e72:	200a      	movs	r0, #10
    4e74:	4b12      	ldr	r3, [pc, #72]	; (4ec0 <QSPI_N25Q256_PORT_init+0xc4>)
    4e76:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    4e78:	2102      	movs	r1, #2
    4e7a:	200b      	movs	r0, #11
    4e7c:	4b0d      	ldr	r3, [pc, #52]	; (4eb4 <QSPI_N25Q256_PORT_init+0xb8>)
    4e7e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    4e80:	2100      	movs	r1, #0
    4e82:	200b      	movs	r0, #11
    4e84:	4b0f      	ldr	r3, [pc, #60]	; (4ec4 <QSPI_N25Q256_PORT_init+0xc8>)
    4e86:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    4e88:	2100      	movs	r1, #0
    4e8a:	200b      	movs	r0, #11
    4e8c:	4b0a      	ldr	r3, [pc, #40]	; (4eb8 <QSPI_N25Q256_PORT_init+0xbc>)
    4e8e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    4e90:	4910      	ldr	r1, [pc, #64]	; (4ed4 <QSPI_N25Q256_PORT_init+0xd8>)
    4e92:	200b      	movs	r0, #11
    4e94:	4b0a      	ldr	r3, [pc, #40]	; (4ec0 <QSPI_N25Q256_PORT_init+0xc4>)
    4e96:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    4e98:	2101      	movs	r1, #1
    4e9a:	202a      	movs	r0, #42	; 0x2a
    4e9c:	4b05      	ldr	r3, [pc, #20]	; (4eb4 <QSPI_N25Q256_PORT_init+0xb8>)
    4e9e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    4ea0:	2100      	movs	r1, #0
    4ea2:	202a      	movs	r0, #42	; 0x2a
    4ea4:	4b04      	ldr	r3, [pc, #16]	; (4eb8 <QSPI_N25Q256_PORT_init+0xbc>)
    4ea6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    4ea8:	490b      	ldr	r1, [pc, #44]	; (4ed8 <QSPI_N25Q256_PORT_init+0xdc>)
    4eaa:	202a      	movs	r0, #42	; 0x2a
    4eac:	4b04      	ldr	r3, [pc, #16]	; (4ec0 <QSPI_N25Q256_PORT_init+0xc4>)
    4eae:	4798      	blx	r3
}
    4eb0:	bf00      	nop
    4eb2:	bd80      	pop	{r7, pc}
    4eb4:	00004bd1 	.word	0x00004bd1
    4eb8:	00004b7d 	.word	0x00004b7d
    4ebc:	002b0007 	.word	0x002b0007
    4ec0:	00004bb1 	.word	0x00004bb1
    4ec4:	00004c09 	.word	0x00004c09
    4ec8:	00080007 	.word	0x00080007
    4ecc:	00090007 	.word	0x00090007
    4ed0:	000a0007 	.word	0x000a0007
    4ed4:	000b0007 	.word	0x000b0007
    4ed8:	002a0007 	.word	0x002a0007

00004edc <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    4edc:	b580      	push	{r7, lr}
    4ede:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    4ee0:	4805      	ldr	r0, [pc, #20]	; (4ef8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    4ee2:	4b06      	ldr	r3, [pc, #24]	; (4efc <QSPI_N25Q256_CLOCK_init+0x20>)
    4ee4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    4ee6:	4804      	ldr	r0, [pc, #16]	; (4ef8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    4ee8:	4b05      	ldr	r3, [pc, #20]	; (4f00 <QSPI_N25Q256_CLOCK_init+0x24>)
    4eea:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    4eec:	4802      	ldr	r0, [pc, #8]	; (4ef8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    4eee:	4b05      	ldr	r3, [pc, #20]	; (4f04 <QSPI_N25Q256_CLOCK_init+0x28>)
    4ef0:	4798      	blx	r3
}
    4ef2:	bf00      	nop
    4ef4:	bd80      	pop	{r7, pc}
    4ef6:	bf00      	nop
    4ef8:	40000800 	.word	0x40000800
    4efc:	000043c3 	.word	0x000043c3
    4f00:	00004403 	.word	0x00004403
    4f04:	000045e3 	.word	0x000045e3

00004f08 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    4f08:	b580      	push	{r7, lr}
    4f0a:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    4f0c:	4b04      	ldr	r3, [pc, #16]	; (4f20 <QSPI_N25Q256_init+0x18>)
    4f0e:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    4f10:	4904      	ldr	r1, [pc, #16]	; (4f24 <QSPI_N25Q256_init+0x1c>)
    4f12:	4805      	ldr	r0, [pc, #20]	; (4f28 <QSPI_N25Q256_init+0x20>)
    4f14:	4b05      	ldr	r3, [pc, #20]	; (4f2c <QSPI_N25Q256_init+0x24>)
    4f16:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    4f18:	4b05      	ldr	r3, [pc, #20]	; (4f30 <QSPI_N25Q256_init+0x28>)
    4f1a:	4798      	blx	r3
}
    4f1c:	bf00      	nop
    4f1e:	bd80      	pop	{r7, pc}
    4f20:	00004edd 	.word	0x00004edd
    4f24:	42003400 	.word	0x42003400
    4f28:	2000a1c0 	.word	0x2000a1c0
    4f2c:	00006771 	.word	0x00006771
    4f30:	00004dfd 	.word	0x00004dfd

00004f34 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    4f34:	b580      	push	{r7, lr}
    4f36:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    4f38:	4802      	ldr	r0, [pc, #8]	; (4f44 <DATETIME_CLOCK_CLOCK_init+0x10>)
    4f3a:	4b03      	ldr	r3, [pc, #12]	; (4f48 <DATETIME_CLOCK_CLOCK_init+0x14>)
    4f3c:	4798      	blx	r3
}
    4f3e:	bf00      	nop
    4f40:	bd80      	pop	{r7, pc}
    4f42:	bf00      	nop
    4f44:	40000800 	.word	0x40000800
    4f48:	00004443 	.word	0x00004443

00004f4c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    4f4c:	b580      	push	{r7, lr}
    4f4e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    4f50:	4b03      	ldr	r3, [pc, #12]	; (4f60 <DATETIME_CLOCK_init+0x14>)
    4f52:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    4f54:	4903      	ldr	r1, [pc, #12]	; (4f64 <DATETIME_CLOCK_init+0x18>)
    4f56:	4804      	ldr	r0, [pc, #16]	; (4f68 <DATETIME_CLOCK_init+0x1c>)
    4f58:	4b04      	ldr	r3, [pc, #16]	; (4f6c <DATETIME_CLOCK_init+0x20>)
    4f5a:	4798      	blx	r3
}
    4f5c:	bf00      	nop
    4f5e:	bd80      	pop	{r7, pc}
    4f60:	00004f35 	.word	0x00004f35
    4f64:	40002400 	.word	0x40002400
    4f68:	2000a334 	.word	0x2000a334
    4f6c:	00005c09 	.word	0x00005c09

00004f70 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    4f70:	b580      	push	{r7, lr}
    4f72:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    4f74:	2100      	movs	r1, #0
    4f76:	2010      	movs	r0, #16
    4f78:	4b11      	ldr	r3, [pc, #68]	; (4fc0 <SPI_MEMORIES_PORT_init+0x50>)
    4f7a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    4f7c:	2102      	movs	r1, #2
    4f7e:	2010      	movs	r0, #16
    4f80:	4b10      	ldr	r3, [pc, #64]	; (4fc4 <SPI_MEMORIES_PORT_init+0x54>)
    4f82:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    4f84:	4910      	ldr	r1, [pc, #64]	; (4fc8 <SPI_MEMORIES_PORT_init+0x58>)
    4f86:	2010      	movs	r0, #16
    4f88:	4b10      	ldr	r3, [pc, #64]	; (4fcc <SPI_MEMORIES_PORT_init+0x5c>)
    4f8a:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    4f8c:	2100      	movs	r1, #0
    4f8e:	2011      	movs	r0, #17
    4f90:	4b0b      	ldr	r3, [pc, #44]	; (4fc0 <SPI_MEMORIES_PORT_init+0x50>)
    4f92:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    4f94:	2102      	movs	r1, #2
    4f96:	2011      	movs	r0, #17
    4f98:	4b0a      	ldr	r3, [pc, #40]	; (4fc4 <SPI_MEMORIES_PORT_init+0x54>)
    4f9a:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    4f9c:	490c      	ldr	r1, [pc, #48]	; (4fd0 <SPI_MEMORIES_PORT_init+0x60>)
    4f9e:	2011      	movs	r0, #17
    4fa0:	4b0a      	ldr	r3, [pc, #40]	; (4fcc <SPI_MEMORIES_PORT_init+0x5c>)
    4fa2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    4fa4:	2101      	movs	r1, #1
    4fa6:	2012      	movs	r0, #18
    4fa8:	4b06      	ldr	r3, [pc, #24]	; (4fc4 <SPI_MEMORIES_PORT_init+0x54>)
    4faa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    4fac:	2100      	movs	r1, #0
    4fae:	2012      	movs	r0, #18
    4fb0:	4b08      	ldr	r3, [pc, #32]	; (4fd4 <SPI_MEMORIES_PORT_init+0x64>)
    4fb2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    4fb4:	4908      	ldr	r1, [pc, #32]	; (4fd8 <SPI_MEMORIES_PORT_init+0x68>)
    4fb6:	2012      	movs	r0, #18
    4fb8:	4b04      	ldr	r3, [pc, #16]	; (4fcc <SPI_MEMORIES_PORT_init+0x5c>)
    4fba:	4798      	blx	r3
}
    4fbc:	bf00      	nop
    4fbe:	bd80      	pop	{r7, pc}
    4fc0:	00004c09 	.word	0x00004c09
    4fc4:	00004bd1 	.word	0x00004bd1
    4fc8:	00100002 	.word	0x00100002
    4fcc:	00004bb1 	.word	0x00004bb1
    4fd0:	00110002 	.word	0x00110002
    4fd4:	00004b7d 	.word	0x00004b7d
    4fd8:	00120002 	.word	0x00120002

00004fdc <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    4fdc:	b580      	push	{r7, lr}
    4fde:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4fe0:	2245      	movs	r2, #69	; 0x45
    4fe2:	2108      	movs	r1, #8
    4fe4:	4806      	ldr	r0, [pc, #24]	; (5000 <SPI_MEMORIES_CLOCK_init+0x24>)
    4fe6:	4b07      	ldr	r3, [pc, #28]	; (5004 <SPI_MEMORIES_CLOCK_init+0x28>)
    4fe8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4fea:	224a      	movs	r2, #74	; 0x4a
    4fec:	2103      	movs	r1, #3
    4fee:	4804      	ldr	r0, [pc, #16]	; (5000 <SPI_MEMORIES_CLOCK_init+0x24>)
    4ff0:	4b04      	ldr	r3, [pc, #16]	; (5004 <SPI_MEMORIES_CLOCK_init+0x28>)
    4ff2:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    4ff4:	4804      	ldr	r0, [pc, #16]	; (5008 <SPI_MEMORIES_CLOCK_init+0x2c>)
    4ff6:	4b05      	ldr	r3, [pc, #20]	; (500c <SPI_MEMORIES_CLOCK_init+0x30>)
    4ff8:	4798      	blx	r3
}
    4ffa:	bf00      	nop
    4ffc:	bd80      	pop	{r7, pc}
    4ffe:	bf00      	nop
    5000:	40001c00 	.word	0x40001c00
    5004:	0000437d 	.word	0x0000437d
    5008:	40000800 	.word	0x40000800
    500c:	00004483 	.word	0x00004483

00005010 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    5010:	b580      	push	{r7, lr}
    5012:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    5014:	4b04      	ldr	r3, [pc, #16]	; (5028 <SPI_MEMORIES_init+0x18>)
    5016:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    5018:	4904      	ldr	r1, [pc, #16]	; (502c <SPI_MEMORIES_init+0x1c>)
    501a:	4805      	ldr	r0, [pc, #20]	; (5030 <SPI_MEMORIES_init+0x20>)
    501c:	4b05      	ldr	r3, [pc, #20]	; (5034 <SPI_MEMORIES_init+0x24>)
    501e:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    5020:	4b05      	ldr	r3, [pc, #20]	; (5038 <SPI_MEMORIES_init+0x28>)
    5022:	4798      	blx	r3
}
    5024:	bf00      	nop
    5026:	bd80      	pop	{r7, pc}
    5028:	00004fdd 	.word	0x00004fdd
    502c:	40003400 	.word	0x40003400
    5030:	2000a12c 	.word	0x2000a12c
    5034:	00006d49 	.word	0x00006d49
    5038:	00004f71 	.word	0x00004f71

0000503c <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    503c:	b580      	push	{r7, lr}
    503e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA12,
    5040:	2100      	movs	r1, #0
    5042:	200c      	movs	r0, #12
    5044:	4b07      	ldr	r3, [pc, #28]	; (5064 <I2C_SHARED_PORT_init+0x28>)
    5046:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
    5048:	4907      	ldr	r1, [pc, #28]	; (5068 <I2C_SHARED_PORT_init+0x2c>)
    504a:	200c      	movs	r0, #12
    504c:	4b07      	ldr	r3, [pc, #28]	; (506c <I2C_SHARED_PORT_init+0x30>)
    504e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA13,
    5050:	2100      	movs	r1, #0
    5052:	200d      	movs	r0, #13
    5054:	4b03      	ldr	r3, [pc, #12]	; (5064 <I2C_SHARED_PORT_init+0x28>)
    5056:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
    5058:	4905      	ldr	r1, [pc, #20]	; (5070 <I2C_SHARED_PORT_init+0x34>)
    505a:	200d      	movs	r0, #13
    505c:	4b03      	ldr	r3, [pc, #12]	; (506c <I2C_SHARED_PORT_init+0x30>)
    505e:	4798      	blx	r3
}
    5060:	bf00      	nop
    5062:	bd80      	pop	{r7, pc}
    5064:	00004b7d 	.word	0x00004b7d
    5068:	000c0002 	.word	0x000c0002
    506c:	00004bb1 	.word	0x00004bb1
    5070:	000d0002 	.word	0x000d0002

00005074 <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    5074:	b580      	push	{r7, lr}
    5076:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5078:	2242      	movs	r2, #66	; 0x42
    507a:	2117      	movs	r1, #23
    507c:	4806      	ldr	r0, [pc, #24]	; (5098 <I2C_SHARED_CLOCK_init+0x24>)
    507e:	4b07      	ldr	r3, [pc, #28]	; (509c <I2C_SHARED_CLOCK_init+0x28>)
    5080:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5082:	224a      	movs	r2, #74	; 0x4a
    5084:	2103      	movs	r1, #3
    5086:	4804      	ldr	r0, [pc, #16]	; (5098 <I2C_SHARED_CLOCK_init+0x24>)
    5088:	4b04      	ldr	r3, [pc, #16]	; (509c <I2C_SHARED_CLOCK_init+0x28>)
    508a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
    508c:	4804      	ldr	r0, [pc, #16]	; (50a0 <I2C_SHARED_CLOCK_init+0x2c>)
    508e:	4b05      	ldr	r3, [pc, #20]	; (50a4 <I2C_SHARED_CLOCK_init+0x30>)
    5090:	4798      	blx	r3
}
    5092:	bf00      	nop
    5094:	bd80      	pop	{r7, pc}
    5096:	bf00      	nop
    5098:	40001c00 	.word	0x40001c00
    509c:	0000437d 	.word	0x0000437d
    50a0:	40000800 	.word	0x40000800
    50a4:	00004543 	.word	0x00004543

000050a8 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    50a8:	b580      	push	{r7, lr}
    50aa:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    50ac:	4b04      	ldr	r3, [pc, #16]	; (50c0 <I2C_SHARED_init+0x18>)
    50ae:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM2);
    50b0:	4904      	ldr	r1, [pc, #16]	; (50c4 <I2C_SHARED_init+0x1c>)
    50b2:	4805      	ldr	r0, [pc, #20]	; (50c8 <I2C_SHARED_init+0x20>)
    50b4:	4b05      	ldr	r3, [pc, #20]	; (50cc <I2C_SHARED_init+0x24>)
    50b6:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    50b8:	4b05      	ldr	r3, [pc, #20]	; (50d0 <I2C_SHARED_init+0x28>)
    50ba:	4798      	blx	r3
}
    50bc:	bf00      	nop
    50be:	bd80      	pop	{r7, pc}
    50c0:	00005075 	.word	0x00005075
    50c4:	41012000 	.word	0x41012000
    50c8:	2000a2b8 	.word	0x2000a2b8
    50cc:	00006611 	.word	0x00006611
    50d0:	0000503d 	.word	0x0000503d

000050d4 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    50d4:	b580      	push	{r7, lr}
    50d6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    50d8:	2100      	movs	r1, #0
    50da:	203b      	movs	r0, #59	; 0x3b
    50dc:	4b11      	ldr	r3, [pc, #68]	; (5124 <SPI_TEMP_PORT_init+0x50>)
    50de:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    50e0:	2102      	movs	r1, #2
    50e2:	203b      	movs	r0, #59	; 0x3b
    50e4:	4b10      	ldr	r3, [pc, #64]	; (5128 <SPI_TEMP_PORT_init+0x54>)
    50e6:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    50e8:	4910      	ldr	r1, [pc, #64]	; (512c <SPI_TEMP_PORT_init+0x58>)
    50ea:	203b      	movs	r0, #59	; 0x3b
    50ec:	4b10      	ldr	r3, [pc, #64]	; (5130 <SPI_TEMP_PORT_init+0x5c>)
    50ee:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    50f0:	2100      	movs	r1, #0
    50f2:	203a      	movs	r0, #58	; 0x3a
    50f4:	4b0b      	ldr	r3, [pc, #44]	; (5124 <SPI_TEMP_PORT_init+0x50>)
    50f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    50f8:	2102      	movs	r1, #2
    50fa:	203a      	movs	r0, #58	; 0x3a
    50fc:	4b0a      	ldr	r3, [pc, #40]	; (5128 <SPI_TEMP_PORT_init+0x54>)
    50fe:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    5100:	490c      	ldr	r1, [pc, #48]	; (5134 <SPI_TEMP_PORT_init+0x60>)
    5102:	203a      	movs	r0, #58	; 0x3a
    5104:	4b0a      	ldr	r3, [pc, #40]	; (5130 <SPI_TEMP_PORT_init+0x5c>)
    5106:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    5108:	2101      	movs	r1, #1
    510a:	203c      	movs	r0, #60	; 0x3c
    510c:	4b06      	ldr	r3, [pc, #24]	; (5128 <SPI_TEMP_PORT_init+0x54>)
    510e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    5110:	2100      	movs	r1, #0
    5112:	203c      	movs	r0, #60	; 0x3c
    5114:	4b08      	ldr	r3, [pc, #32]	; (5138 <SPI_TEMP_PORT_init+0x64>)
    5116:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    5118:	4908      	ldr	r1, [pc, #32]	; (513c <SPI_TEMP_PORT_init+0x68>)
    511a:	203c      	movs	r0, #60	; 0x3c
    511c:	4b04      	ldr	r3, [pc, #16]	; (5130 <SPI_TEMP_PORT_init+0x5c>)
    511e:	4798      	blx	r3
}
    5120:	bf00      	nop
    5122:	bd80      	pop	{r7, pc}
    5124:	00004c09 	.word	0x00004c09
    5128:	00004bd1 	.word	0x00004bd1
    512c:	003b0003 	.word	0x003b0003
    5130:	00004bb1 	.word	0x00004bb1
    5134:	003a0003 	.word	0x003a0003
    5138:	00004b7d 	.word	0x00004b7d
    513c:	003c0003 	.word	0x003c0003

00005140 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    5140:	b580      	push	{r7, lr}
    5142:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5144:	2242      	movs	r2, #66	; 0x42
    5146:	2122      	movs	r1, #34	; 0x22
    5148:	4806      	ldr	r0, [pc, #24]	; (5164 <SPI_TEMP_CLOCK_init+0x24>)
    514a:	4b07      	ldr	r3, [pc, #28]	; (5168 <SPI_TEMP_CLOCK_init+0x28>)
    514c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    514e:	224a      	movs	r2, #74	; 0x4a
    5150:	2103      	movs	r1, #3
    5152:	4804      	ldr	r0, [pc, #16]	; (5164 <SPI_TEMP_CLOCK_init+0x24>)
    5154:	4b04      	ldr	r3, [pc, #16]	; (5168 <SPI_TEMP_CLOCK_init+0x28>)
    5156:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    5158:	4804      	ldr	r0, [pc, #16]	; (516c <SPI_TEMP_CLOCK_init+0x2c>)
    515a:	4b05      	ldr	r3, [pc, #20]	; (5170 <SPI_TEMP_CLOCK_init+0x30>)
    515c:	4798      	blx	r3
}
    515e:	bf00      	nop
    5160:	bd80      	pop	{r7, pc}
    5162:	bf00      	nop
    5164:	40001c00 	.word	0x40001c00
    5168:	0000437d 	.word	0x0000437d
    516c:	40000800 	.word	0x40000800
    5170:	00004603 	.word	0x00004603

00005174 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    5174:	b580      	push	{r7, lr}
    5176:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    5178:	4b05      	ldr	r3, [pc, #20]	; (5190 <SPI_TEMP_init+0x1c>)
    517a:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    517c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    5180:	4804      	ldr	r0, [pc, #16]	; (5194 <SPI_TEMP_init+0x20>)
    5182:	4b05      	ldr	r3, [pc, #20]	; (5198 <SPI_TEMP_init+0x24>)
    5184:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    5186:	4b05      	ldr	r3, [pc, #20]	; (519c <SPI_TEMP_init+0x28>)
    5188:	4798      	blx	r3
}
    518a:	bf00      	nop
    518c:	bd80      	pop	{r7, pc}
    518e:	bf00      	nop
    5190:	00005141 	.word	0x00005141
    5194:	2000a15c 	.word	0x2000a15c
    5198:	00006a99 	.word	0x00006a99
    519c:	000050d5 	.word	0x000050d5

000051a0 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    51a0:	b580      	push	{r7, lr}
    51a2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    51a4:	2100      	movs	r1, #0
    51a6:	2017      	movs	r0, #23
    51a8:	4b07      	ldr	r3, [pc, #28]	; (51c8 <I2C_EXPANDER_PORT_init+0x28>)
    51aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    51ac:	4907      	ldr	r1, [pc, #28]	; (51cc <I2C_EXPANDER_PORT_init+0x2c>)
    51ae:	2017      	movs	r0, #23
    51b0:	4b07      	ldr	r3, [pc, #28]	; (51d0 <I2C_EXPANDER_PORT_init+0x30>)
    51b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    51b4:	2100      	movs	r1, #0
    51b6:	2016      	movs	r0, #22
    51b8:	4b03      	ldr	r3, [pc, #12]	; (51c8 <I2C_EXPANDER_PORT_init+0x28>)
    51ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    51bc:	4905      	ldr	r1, [pc, #20]	; (51d4 <I2C_EXPANDER_PORT_init+0x34>)
    51be:	2016      	movs	r0, #22
    51c0:	4b03      	ldr	r3, [pc, #12]	; (51d0 <I2C_EXPANDER_PORT_init+0x30>)
    51c2:	4798      	blx	r3
}
    51c4:	bf00      	nop
    51c6:	bd80      	pop	{r7, pc}
    51c8:	00004b7d 	.word	0x00004b7d
    51cc:	00170003 	.word	0x00170003
    51d0:	00004bb1 	.word	0x00004bb1
    51d4:	00160003 	.word	0x00160003

000051d8 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    51d8:	b580      	push	{r7, lr}
    51da:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    51dc:	2242      	movs	r2, #66	; 0x42
    51de:	2123      	movs	r1, #35	; 0x23
    51e0:	4806      	ldr	r0, [pc, #24]	; (51fc <I2C_EXPANDER_CLOCK_init+0x24>)
    51e2:	4b07      	ldr	r3, [pc, #28]	; (5200 <I2C_EXPANDER_CLOCK_init+0x28>)
    51e4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    51e6:	2246      	movs	r2, #70	; 0x46
    51e8:	2103      	movs	r1, #3
    51ea:	4804      	ldr	r0, [pc, #16]	; (51fc <I2C_EXPANDER_CLOCK_init+0x24>)
    51ec:	4b04      	ldr	r3, [pc, #16]	; (5200 <I2C_EXPANDER_CLOCK_init+0x28>)
    51ee:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    51f0:	4804      	ldr	r0, [pc, #16]	; (5204 <I2C_EXPANDER_CLOCK_init+0x2c>)
    51f2:	4b05      	ldr	r3, [pc, #20]	; (5208 <I2C_EXPANDER_CLOCK_init+0x30>)
    51f4:	4798      	blx	r3
}
    51f6:	bf00      	nop
    51f8:	bd80      	pop	{r7, pc}
    51fa:	bf00      	nop
    51fc:	40001c00 	.word	0x40001c00
    5200:	0000437d 	.word	0x0000437d
    5204:	40000800 	.word	0x40000800
    5208:	00004623 	.word	0x00004623

0000520c <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    520c:	b580      	push	{r7, lr}
    520e:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    5210:	4b04      	ldr	r3, [pc, #16]	; (5224 <I2C_EXPANDER_init+0x18>)
    5212:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    5214:	4904      	ldr	r1, [pc, #16]	; (5228 <I2C_EXPANDER_init+0x1c>)
    5216:	4805      	ldr	r0, [pc, #20]	; (522c <I2C_EXPANDER_init+0x20>)
    5218:	4b05      	ldr	r3, [pc, #20]	; (5230 <I2C_EXPANDER_init+0x24>)
    521a:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    521c:	4b05      	ldr	r3, [pc, #20]	; (5234 <I2C_EXPANDER_init+0x28>)
    521e:	4798      	blx	r3
}
    5220:	bf00      	nop
    5222:	bd80      	pop	{r7, pc}
    5224:	000051d9 	.word	0x000051d9
    5228:	43000400 	.word	0x43000400
    522c:	2000a278 	.word	0x2000a278
    5230:	000063cd 	.word	0x000063cd
    5234:	000051a1 	.word	0x000051a1

00005238 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    5238:	b580      	push	{r7, lr}
    523a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    523c:	2100      	movs	r1, #0
    523e:	2044      	movs	r0, #68	; 0x44
    5240:	4b11      	ldr	r3, [pc, #68]	; (5288 <SPI_HI3593_PORT_init+0x50>)
    5242:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    5244:	2102      	movs	r1, #2
    5246:	2044      	movs	r0, #68	; 0x44
    5248:	4b10      	ldr	r3, [pc, #64]	; (528c <SPI_HI3593_PORT_init+0x54>)
    524a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    524c:	4910      	ldr	r1, [pc, #64]	; (5290 <SPI_HI3593_PORT_init+0x58>)
    524e:	2044      	movs	r0, #68	; 0x44
    5250:	4b10      	ldr	r3, [pc, #64]	; (5294 <SPI_HI3593_PORT_init+0x5c>)
    5252:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    5254:	2100      	movs	r1, #0
    5256:	2045      	movs	r0, #69	; 0x45
    5258:	4b0b      	ldr	r3, [pc, #44]	; (5288 <SPI_HI3593_PORT_init+0x50>)
    525a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    525c:	2102      	movs	r1, #2
    525e:	2045      	movs	r0, #69	; 0x45
    5260:	4b0a      	ldr	r3, [pc, #40]	; (528c <SPI_HI3593_PORT_init+0x54>)
    5262:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    5264:	490c      	ldr	r1, [pc, #48]	; (5298 <SPI_HI3593_PORT_init+0x60>)
    5266:	2045      	movs	r0, #69	; 0x45
    5268:	4b0a      	ldr	r3, [pc, #40]	; (5294 <SPI_HI3593_PORT_init+0x5c>)
    526a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    526c:	2101      	movs	r1, #1
    526e:	2047      	movs	r0, #71	; 0x47
    5270:	4b06      	ldr	r3, [pc, #24]	; (528c <SPI_HI3593_PORT_init+0x54>)
    5272:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    5274:	2100      	movs	r1, #0
    5276:	2047      	movs	r0, #71	; 0x47
    5278:	4b08      	ldr	r3, [pc, #32]	; (529c <SPI_HI3593_PORT_init+0x64>)
    527a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    527c:	4908      	ldr	r1, [pc, #32]	; (52a0 <SPI_HI3593_PORT_init+0x68>)
    527e:	2047      	movs	r0, #71	; 0x47
    5280:	4b04      	ldr	r3, [pc, #16]	; (5294 <SPI_HI3593_PORT_init+0x5c>)
    5282:	4798      	blx	r3
}
    5284:	bf00      	nop
    5286:	bd80      	pop	{r7, pc}
    5288:	00004c09 	.word	0x00004c09
    528c:	00004bd1 	.word	0x00004bd1
    5290:	00440002 	.word	0x00440002
    5294:	00004bb1 	.word	0x00004bb1
    5298:	00450002 	.word	0x00450002
    529c:	00004b7d 	.word	0x00004b7d
    52a0:	00470002 	.word	0x00470002

000052a4 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    52a4:	b580      	push	{r7, lr}
    52a6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    52a8:	2242      	movs	r2, #66	; 0x42
    52aa:	2124      	movs	r1, #36	; 0x24
    52ac:	4806      	ldr	r0, [pc, #24]	; (52c8 <SPI_HI3593_CLOCK_init+0x24>)
    52ae:	4b07      	ldr	r3, [pc, #28]	; (52cc <SPI_HI3593_CLOCK_init+0x28>)
    52b0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    52b2:	224a      	movs	r2, #74	; 0x4a
    52b4:	2103      	movs	r1, #3
    52b6:	4804      	ldr	r0, [pc, #16]	; (52c8 <SPI_HI3593_CLOCK_init+0x24>)
    52b8:	4b04      	ldr	r3, [pc, #16]	; (52cc <SPI_HI3593_CLOCK_init+0x28>)
    52ba:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    52bc:	4804      	ldr	r0, [pc, #16]	; (52d0 <SPI_HI3593_CLOCK_init+0x2c>)
    52be:	4b05      	ldr	r3, [pc, #20]	; (52d4 <SPI_HI3593_CLOCK_init+0x30>)
    52c0:	4798      	blx	r3
}
    52c2:	bf00      	nop
    52c4:	bd80      	pop	{r7, pc}
    52c6:	bf00      	nop
    52c8:	40001c00 	.word	0x40001c00
    52cc:	0000437d 	.word	0x0000437d
    52d0:	40000800 	.word	0x40000800
    52d4:	00004643 	.word	0x00004643

000052d8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    52d8:	b580      	push	{r7, lr}
    52da:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    52dc:	4b04      	ldr	r3, [pc, #16]	; (52f0 <SPI_HI3593_init+0x18>)
    52de:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    52e0:	4904      	ldr	r1, [pc, #16]	; (52f4 <SPI_HI3593_init+0x1c>)
    52e2:	4805      	ldr	r0, [pc, #20]	; (52f8 <SPI_HI3593_init+0x20>)
    52e4:	4b05      	ldr	r3, [pc, #20]	; (52fc <SPI_HI3593_init+0x24>)
    52e6:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    52e8:	4b05      	ldr	r3, [pc, #20]	; (5300 <SPI_HI3593_init+0x28>)
    52ea:	4798      	blx	r3
}
    52ec:	bf00      	nop
    52ee:	bd80      	pop	{r7, pc}
    52f0:	000052a5 	.word	0x000052a5
    52f4:	43000800 	.word	0x43000800
    52f8:	2000a144 	.word	0x2000a144
    52fc:	00006d49 	.word	0x00006d49
    5300:	00005239 	.word	0x00005239

00005304 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    5304:	b580      	push	{r7, lr}
    5306:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    5308:	2100      	movs	r1, #0
    530a:	2068      	movs	r0, #104	; 0x68
    530c:	4b07      	ldr	r3, [pc, #28]	; (532c <I2C_EEPROM_PORT_init+0x28>)
    530e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    5310:	4907      	ldr	r1, [pc, #28]	; (5330 <I2C_EEPROM_PORT_init+0x2c>)
    5312:	2068      	movs	r0, #104	; 0x68
    5314:	4b07      	ldr	r3, [pc, #28]	; (5334 <I2C_EEPROM_PORT_init+0x30>)
    5316:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    5318:	2100      	movs	r1, #0
    531a:	2069      	movs	r0, #105	; 0x69
    531c:	4b03      	ldr	r3, [pc, #12]	; (532c <I2C_EEPROM_PORT_init+0x28>)
    531e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    5320:	4905      	ldr	r1, [pc, #20]	; (5338 <I2C_EEPROM_PORT_init+0x34>)
    5322:	2069      	movs	r0, #105	; 0x69
    5324:	4b03      	ldr	r3, [pc, #12]	; (5334 <I2C_EEPROM_PORT_init+0x30>)
    5326:	4798      	blx	r3
}
    5328:	bf00      	nop
    532a:	bd80      	pop	{r7, pc}
    532c:	00004b7d 	.word	0x00004b7d
    5330:	00680002 	.word	0x00680002
    5334:	00004bb1 	.word	0x00004bb1
    5338:	00690002 	.word	0x00690002

0000533c <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    533c:	b580      	push	{r7, lr}
    533e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5340:	2242      	movs	r2, #66	; 0x42
    5342:	2125      	movs	r1, #37	; 0x25
    5344:	4806      	ldr	r0, [pc, #24]	; (5360 <I2C_EEPROM_CLOCK_init+0x24>)
    5346:	4b07      	ldr	r3, [pc, #28]	; (5364 <I2C_EEPROM_CLOCK_init+0x28>)
    5348:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    534a:	224a      	movs	r2, #74	; 0x4a
    534c:	2103      	movs	r1, #3
    534e:	4804      	ldr	r0, [pc, #16]	; (5360 <I2C_EEPROM_CLOCK_init+0x24>)
    5350:	4b04      	ldr	r3, [pc, #16]	; (5364 <I2C_EEPROM_CLOCK_init+0x28>)
    5352:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    5354:	4804      	ldr	r0, [pc, #16]	; (5368 <I2C_EEPROM_CLOCK_init+0x2c>)
    5356:	4b05      	ldr	r3, [pc, #20]	; (536c <I2C_EEPROM_CLOCK_init+0x30>)
    5358:	4798      	blx	r3
}
    535a:	bf00      	nop
    535c:	bd80      	pop	{r7, pc}
    535e:	bf00      	nop
    5360:	40001c00 	.word	0x40001c00
    5364:	0000437d 	.word	0x0000437d
    5368:	40000800 	.word	0x40000800
    536c:	00004663 	.word	0x00004663

00005370 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    5370:	b580      	push	{r7, lr}
    5372:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    5374:	4b04      	ldr	r3, [pc, #16]	; (5388 <I2C_EEPROM_init+0x18>)
    5376:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    5378:	4904      	ldr	r1, [pc, #16]	; (538c <I2C_EEPROM_init+0x1c>)
    537a:	4805      	ldr	r0, [pc, #20]	; (5390 <I2C_EEPROM_init+0x20>)
    537c:	4b05      	ldr	r3, [pc, #20]	; (5394 <I2C_EEPROM_init+0x24>)
    537e:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    5380:	4b05      	ldr	r3, [pc, #20]	; (5398 <I2C_EEPROM_init+0x28>)
    5382:	4798      	blx	r3
}
    5384:	bf00      	nop
    5386:	bd80      	pop	{r7, pc}
    5388:	0000533d 	.word	0x0000533d
    538c:	43000c00 	.word	0x43000c00
    5390:	2000a2f4 	.word	0x2000a2f4
    5394:	000063cd 	.word	0x000063cd
    5398:	00005305 	.word	0x00005305

0000539c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    539c:	b580      	push	{r7, lr}
    539e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    53a0:	4808      	ldr	r0, [pc, #32]	; (53c4 <TIMER_USB_init+0x28>)
    53a2:	4b09      	ldr	r3, [pc, #36]	; (53c8 <TIMER_USB_init+0x2c>)
    53a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    53a6:	2243      	movs	r2, #67	; 0x43
    53a8:	2109      	movs	r1, #9
    53aa:	4808      	ldr	r0, [pc, #32]	; (53cc <TIMER_USB_init+0x30>)
    53ac:	4b08      	ldr	r3, [pc, #32]	; (53d0 <TIMER_USB_init+0x34>)
    53ae:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    53b0:	4b08      	ldr	r3, [pc, #32]	; (53d4 <TIMER_USB_init+0x38>)
    53b2:	4798      	blx	r3
    53b4:	4603      	mov	r3, r0
    53b6:	461a      	mov	r2, r3
    53b8:	4907      	ldr	r1, [pc, #28]	; (53d8 <TIMER_USB_init+0x3c>)
    53ba:	4808      	ldr	r0, [pc, #32]	; (53dc <TIMER_USB_init+0x40>)
    53bc:	4b08      	ldr	r3, [pc, #32]	; (53e0 <TIMER_USB_init+0x44>)
    53be:	4798      	blx	r3
}
    53c0:	bf00      	nop
    53c2:	bd80      	pop	{r7, pc}
    53c4:	40000800 	.word	0x40000800
    53c8:	000044a3 	.word	0x000044a3
    53cc:	40001c00 	.word	0x40001c00
    53d0:	0000437d 	.word	0x0000437d
    53d4:	0000d315 	.word	0x0000d315
    53d8:	40003800 	.word	0x40003800
    53dc:	2000a25c 	.word	0x2000a25c
    53e0:	00006fd9 	.word	0x00006fd9

000053e4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    53e4:	b480      	push	{r7}
    53e6:	af00      	add	r7, sp, #0
}
    53e8:	bf00      	nop
    53ea:	46bd      	mov	sp, r7
    53ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    53f0:	4770      	bx	lr
	...

000053f4 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    53f4:	b580      	push	{r7, lr}
    53f6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    53f8:	4804      	ldr	r0, [pc, #16]	; (540c <LIVE_PULSE_CLOCK_init+0x18>)
    53fa:	4b05      	ldr	r3, [pc, #20]	; (5410 <LIVE_PULSE_CLOCK_init+0x1c>)
    53fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    53fe:	2244      	movs	r2, #68	; 0x44
    5400:	2109      	movs	r1, #9
    5402:	4804      	ldr	r0, [pc, #16]	; (5414 <LIVE_PULSE_CLOCK_init+0x20>)
    5404:	4b04      	ldr	r3, [pc, #16]	; (5418 <LIVE_PULSE_CLOCK_init+0x24>)
    5406:	4798      	blx	r3
}
    5408:	bf00      	nop
    540a:	bd80      	pop	{r7, pc}
    540c:	40000800 	.word	0x40000800
    5410:	000044c3 	.word	0x000044c3
    5414:	40001c00 	.word	0x40001c00
    5418:	0000437d 	.word	0x0000437d

0000541c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    541c:	b580      	push	{r7, lr}
    541e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    5420:	4b06      	ldr	r3, [pc, #24]	; (543c <LIVE_PULSE_init+0x20>)
    5422:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    5424:	4b06      	ldr	r3, [pc, #24]	; (5440 <LIVE_PULSE_init+0x24>)
    5426:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC1, _tc_get_pwm());
    5428:	4b06      	ldr	r3, [pc, #24]	; (5444 <LIVE_PULSE_init+0x28>)
    542a:	4798      	blx	r3
    542c:	4603      	mov	r3, r0
    542e:	461a      	mov	r2, r3
    5430:	4905      	ldr	r1, [pc, #20]	; (5448 <LIVE_PULSE_init+0x2c>)
    5432:	4806      	ldr	r0, [pc, #24]	; (544c <LIVE_PULSE_init+0x30>)
    5434:	4b06      	ldr	r3, [pc, #24]	; (5450 <LIVE_PULSE_init+0x34>)
    5436:	4798      	blx	r3
}
    5438:	bf00      	nop
    543a:	bd80      	pop	{r7, pc}
    543c:	000053f5 	.word	0x000053f5
    5440:	000053e5 	.word	0x000053e5
    5444:	0000d325 	.word	0x0000d325
    5448:	40003c00 	.word	0x40003c00
    544c:	2000a1fc 	.word	0x2000a1fc
    5450:	00006671 	.word	0x00006671

00005454 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    5454:	b580      	push	{r7, lr}
    5456:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    5458:	4808      	ldr	r0, [pc, #32]	; (547c <TIMER_ARINC_init+0x28>)
    545a:	4b09      	ldr	r3, [pc, #36]	; (5480 <TIMER_ARINC_init+0x2c>)
    545c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    545e:	2244      	movs	r2, #68	; 0x44
    5460:	211a      	movs	r1, #26
    5462:	4808      	ldr	r0, [pc, #32]	; (5484 <TIMER_ARINC_init+0x30>)
    5464:	4b08      	ldr	r3, [pc, #32]	; (5488 <TIMER_ARINC_init+0x34>)
    5466:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    5468:	4b08      	ldr	r3, [pc, #32]	; (548c <TIMER_ARINC_init+0x38>)
    546a:	4798      	blx	r3
    546c:	4603      	mov	r3, r0
    546e:	461a      	mov	r2, r3
    5470:	4907      	ldr	r1, [pc, #28]	; (5490 <TIMER_ARINC_init+0x3c>)
    5472:	4808      	ldr	r0, [pc, #32]	; (5494 <TIMER_ARINC_init+0x40>)
    5474:	4b08      	ldr	r3, [pc, #32]	; (5498 <TIMER_ARINC_init+0x44>)
    5476:	4798      	blx	r3
}
    5478:	bf00      	nop
    547a:	bd80      	pop	{r7, pc}
    547c:	40000800 	.word	0x40000800
    5480:	00004563 	.word	0x00004563
    5484:	40001c00 	.word	0x40001c00
    5488:	0000437d 	.word	0x0000437d
    548c:	0000d315 	.word	0x0000d315
    5490:	4101a000 	.word	0x4101a000
    5494:	2000a240 	.word	0x2000a240
    5498:	00006fd9 	.word	0x00006fd9

0000549c <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    549c:	b580      	push	{r7, lr}
    549e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    54a0:	4808      	ldr	r0, [pc, #32]	; (54c4 <TIMER_HVAC_init+0x28>)
    54a2:	4b09      	ldr	r3, [pc, #36]	; (54c8 <TIMER_HVAC_init+0x2c>)
    54a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    54a6:	2246      	movs	r2, #70	; 0x46
    54a8:	211a      	movs	r1, #26
    54aa:	4808      	ldr	r0, [pc, #32]	; (54cc <TIMER_HVAC_init+0x30>)
    54ac:	4b08      	ldr	r3, [pc, #32]	; (54d0 <TIMER_HVAC_init+0x34>)
    54ae:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    54b0:	4b08      	ldr	r3, [pc, #32]	; (54d4 <TIMER_HVAC_init+0x38>)
    54b2:	4798      	blx	r3
    54b4:	4603      	mov	r3, r0
    54b6:	461a      	mov	r2, r3
    54b8:	4907      	ldr	r1, [pc, #28]	; (54d8 <TIMER_HVAC_init+0x3c>)
    54ba:	4808      	ldr	r0, [pc, #32]	; (54dc <TIMER_HVAC_init+0x40>)
    54bc:	4b08      	ldr	r3, [pc, #32]	; (54e0 <TIMER_HVAC_init+0x44>)
    54be:	4798      	blx	r3
}
    54c0:	bf00      	nop
    54c2:	bd80      	pop	{r7, pc}
    54c4:	40000800 	.word	0x40000800
    54c8:	00004583 	.word	0x00004583
    54cc:	40001c00 	.word	0x40001c00
    54d0:	0000437d 	.word	0x0000437d
    54d4:	0000d315 	.word	0x0000d315
    54d8:	4101c000 	.word	0x4101c000
    54dc:	2000a2d8 	.word	0x2000a2d8
    54e0:	00006fd9 	.word	0x00006fd9

000054e4 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    54e4:	b580      	push	{r7, lr}
    54e6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    54e8:	4808      	ldr	r0, [pc, #32]	; (550c <TIMER_MAINTENANCE_init+0x28>)
    54ea:	4b09      	ldr	r3, [pc, #36]	; (5510 <TIMER_MAINTENANCE_init+0x2c>)
    54ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    54ee:	2246      	movs	r2, #70	; 0x46
    54f0:	211e      	movs	r1, #30
    54f2:	4808      	ldr	r0, [pc, #32]	; (5514 <TIMER_MAINTENANCE_init+0x30>)
    54f4:	4b08      	ldr	r3, [pc, #32]	; (5518 <TIMER_MAINTENANCE_init+0x34>)
    54f6:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    54f8:	4b08      	ldr	r3, [pc, #32]	; (551c <TIMER_MAINTENANCE_init+0x38>)
    54fa:	4798      	blx	r3
    54fc:	4603      	mov	r3, r0
    54fe:	461a      	mov	r2, r3
    5500:	4907      	ldr	r1, [pc, #28]	; (5520 <TIMER_MAINTENANCE_init+0x3c>)
    5502:	4808      	ldr	r0, [pc, #32]	; (5524 <TIMER_MAINTENANCE_init+0x40>)
    5504:	4b08      	ldr	r3, [pc, #32]	; (5528 <TIMER_MAINTENANCE_init+0x44>)
    5506:	4798      	blx	r3
}
    5508:	bf00      	nop
    550a:	bd80      	pop	{r7, pc}
    550c:	40000800 	.word	0x40000800
    5510:	000045a3 	.word	0x000045a3
    5514:	40001c00 	.word	0x40001c00
    5518:	0000437d 	.word	0x0000437d
    551c:	0000d315 	.word	0x0000d315
    5520:	42001400 	.word	0x42001400
    5524:	2000a1a4 	.word	0x2000a1a4
    5528:	00006fd9 	.word	0x00006fd9

0000552c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    552c:	b580      	push	{r7, lr}
    552e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    5530:	4808      	ldr	r0, [pc, #32]	; (5554 <TIMER_INTERFACE_init+0x28>)
    5532:	4b09      	ldr	r3, [pc, #36]	; (5558 <TIMER_INTERFACE_init+0x2c>)
    5534:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5536:	2246      	movs	r2, #70	; 0x46
    5538:	211e      	movs	r1, #30
    553a:	4808      	ldr	r0, [pc, #32]	; (555c <TIMER_INTERFACE_init+0x30>)
    553c:	4b08      	ldr	r3, [pc, #32]	; (5560 <TIMER_INTERFACE_init+0x34>)
    553e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    5540:	4b08      	ldr	r3, [pc, #32]	; (5564 <TIMER_INTERFACE_init+0x38>)
    5542:	4798      	blx	r3
    5544:	4603      	mov	r3, r0
    5546:	461a      	mov	r2, r3
    5548:	4907      	ldr	r1, [pc, #28]	; (5568 <TIMER_INTERFACE_init+0x3c>)
    554a:	4808      	ldr	r0, [pc, #32]	; (556c <TIMER_INTERFACE_init+0x40>)
    554c:	4b08      	ldr	r3, [pc, #32]	; (5570 <TIMER_INTERFACE_init+0x44>)
    554e:	4798      	blx	r3
}
    5550:	bf00      	nop
    5552:	bd80      	pop	{r7, pc}
    5554:	40000800 	.word	0x40000800
    5558:	000045c3 	.word	0x000045c3
    555c:	40001c00 	.word	0x40001c00
    5560:	0000437d 	.word	0x0000437d
    5564:	0000d315 	.word	0x0000d315
    5568:	42001800 	.word	0x42001800
    556c:	2000a1e0 	.word	0x2000a1e0
    5570:	00006fd9 	.word	0x00006fd9

00005574 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    5574:	b580      	push	{r7, lr}
    5576:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    5578:	4808      	ldr	r0, [pc, #32]	; (559c <TIMER_EVENT_init+0x28>)
    557a:	4b09      	ldr	r3, [pc, #36]	; (55a0 <TIMER_EVENT_init+0x2c>)
    557c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    557e:	2246      	movs	r2, #70	; 0x46
    5580:	2127      	movs	r1, #39	; 0x27
    5582:	4808      	ldr	r0, [pc, #32]	; (55a4 <TIMER_EVENT_init+0x30>)
    5584:	4b08      	ldr	r3, [pc, #32]	; (55a8 <TIMER_EVENT_init+0x34>)
    5586:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    5588:	4b08      	ldr	r3, [pc, #32]	; (55ac <TIMER_EVENT_init+0x38>)
    558a:	4798      	blx	r3
    558c:	4603      	mov	r3, r0
    558e:	461a      	mov	r2, r3
    5590:	4907      	ldr	r1, [pc, #28]	; (55b0 <TIMER_EVENT_init+0x3c>)
    5592:	4808      	ldr	r0, [pc, #32]	; (55b4 <TIMER_EVENT_init+0x40>)
    5594:	4b08      	ldr	r3, [pc, #32]	; (55b8 <TIMER_EVENT_init+0x44>)
    5596:	4798      	blx	r3
}
    5598:	bf00      	nop
    559a:	bd80      	pop	{r7, pc}
    559c:	40000800 	.word	0x40000800
    55a0:	00004683 	.word	0x00004683
    55a4:	40001c00 	.word	0x40001c00
    55a8:	0000437d 	.word	0x0000437d
    55ac:	0000d315 	.word	0x0000d315
    55b0:	43001400 	.word	0x43001400
    55b4:	2000a1c4 	.word	0x2000a1c4
    55b8:	00006fd9 	.word	0x00006fd9

000055bc <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    55bc:	b580      	push	{r7, lr}
    55be:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    55c0:	2102      	movs	r1, #2
    55c2:	2018      	movs	r0, #24
    55c4:	4b0f      	ldr	r3, [pc, #60]	; (5604 <CDCUSB_PORT_init+0x48>)
    55c6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    55c8:	2100      	movs	r1, #0
    55ca:	2018      	movs	r0, #24
    55cc:	4b0e      	ldr	r3, [pc, #56]	; (5608 <CDCUSB_PORT_init+0x4c>)
    55ce:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    55d0:	2100      	movs	r1, #0
    55d2:	2018      	movs	r0, #24
    55d4:	4b0d      	ldr	r3, [pc, #52]	; (560c <CDCUSB_PORT_init+0x50>)
    55d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    55d8:	490d      	ldr	r1, [pc, #52]	; (5610 <CDCUSB_PORT_init+0x54>)
    55da:	2018      	movs	r0, #24
    55dc:	4b0d      	ldr	r3, [pc, #52]	; (5614 <CDCUSB_PORT_init+0x58>)
    55de:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    55e0:	2102      	movs	r1, #2
    55e2:	2019      	movs	r0, #25
    55e4:	4b07      	ldr	r3, [pc, #28]	; (5604 <CDCUSB_PORT_init+0x48>)
    55e6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    55e8:	2100      	movs	r1, #0
    55ea:	2019      	movs	r0, #25
    55ec:	4b06      	ldr	r3, [pc, #24]	; (5608 <CDCUSB_PORT_init+0x4c>)
    55ee:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    55f0:	2100      	movs	r1, #0
    55f2:	2019      	movs	r0, #25
    55f4:	4b05      	ldr	r3, [pc, #20]	; (560c <CDCUSB_PORT_init+0x50>)
    55f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    55f8:	4907      	ldr	r1, [pc, #28]	; (5618 <CDCUSB_PORT_init+0x5c>)
    55fa:	2019      	movs	r0, #25
    55fc:	4b05      	ldr	r3, [pc, #20]	; (5614 <CDCUSB_PORT_init+0x58>)
    55fe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    5600:	bf00      	nop
    5602:	bd80      	pop	{r7, pc}
    5604:	00004bd1 	.word	0x00004bd1
    5608:	00004c09 	.word	0x00004c09
    560c:	00004b7d 	.word	0x00004b7d
    5610:	00180007 	.word	0x00180007
    5614:	00004bb1 	.word	0x00004bb1
    5618:	00190007 	.word	0x00190007

0000561c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    561c:	b580      	push	{r7, lr}
    561e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    5620:	2242      	movs	r2, #66	; 0x42
    5622:	210a      	movs	r1, #10
    5624:	4805      	ldr	r0, [pc, #20]	; (563c <CDCUSB_CLOCK_init+0x20>)
    5626:	4b06      	ldr	r3, [pc, #24]	; (5640 <CDCUSB_CLOCK_init+0x24>)
    5628:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    562a:	4806      	ldr	r0, [pc, #24]	; (5644 <CDCUSB_CLOCK_init+0x28>)
    562c:	4b06      	ldr	r3, [pc, #24]	; (5648 <CDCUSB_CLOCK_init+0x2c>)
    562e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    5630:	4804      	ldr	r0, [pc, #16]	; (5644 <CDCUSB_CLOCK_init+0x28>)
    5632:	4b06      	ldr	r3, [pc, #24]	; (564c <CDCUSB_CLOCK_init+0x30>)
    5634:	4798      	blx	r3
}
    5636:	bf00      	nop
    5638:	bd80      	pop	{r7, pc}
    563a:	bf00      	nop
    563c:	40001c00 	.word	0x40001c00
    5640:	0000437d 	.word	0x0000437d
    5644:	40000800 	.word	0x40000800
    5648:	000043a3 	.word	0x000043a3
    564c:	000044e3 	.word	0x000044e3

00005650 <CDCUSB_init>:

void CDCUSB_init(void)
{
    5650:	b580      	push	{r7, lr}
    5652:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    5654:	4b03      	ldr	r3, [pc, #12]	; (5664 <CDCUSB_init+0x14>)
    5656:	4798      	blx	r3
	usb_d_init();
    5658:	4b03      	ldr	r3, [pc, #12]	; (5668 <CDCUSB_init+0x18>)
    565a:	4798      	blx	r3
	CDCUSB_PORT_init();
    565c:	4b03      	ldr	r3, [pc, #12]	; (566c <CDCUSB_init+0x1c>)
    565e:	4798      	blx	r3
}
    5660:	bf00      	nop
    5662:	bd80      	pop	{r7, pc}
    5664:	0000561d 	.word	0x0000561d
    5668:	000077e9 	.word	0x000077e9
    566c:	000055bd 	.word	0x000055bd

00005670 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    5670:	b580      	push	{r7, lr}
    5672:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    5674:	4802      	ldr	r0, [pc, #8]	; (5680 <WATCHDOG_CLOCK_init+0x10>)
    5676:	4b03      	ldr	r3, [pc, #12]	; (5684 <WATCHDOG_CLOCK_init+0x14>)
    5678:	4798      	blx	r3
}
    567a:	bf00      	nop
    567c:	bd80      	pop	{r7, pc}
    567e:	bf00      	nop
    5680:	40000800 	.word	0x40000800
    5684:	00004423 	.word	0x00004423

00005688 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    5688:	b580      	push	{r7, lr}
    568a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    568c:	4b03      	ldr	r3, [pc, #12]	; (569c <WATCHDOG_init+0x14>)
    568e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    5690:	4903      	ldr	r1, [pc, #12]	; (56a0 <WATCHDOG_init+0x18>)
    5692:	4804      	ldr	r0, [pc, #16]	; (56a4 <WATCHDOG_init+0x1c>)
    5694:	4b04      	ldr	r3, [pc, #16]	; (56a8 <WATCHDOG_init+0x20>)
    5696:	4798      	blx	r3
}
    5698:	bf00      	nop
    569a:	bd80      	pop	{r7, pc}
    569c:	00005671 	.word	0x00005671
    56a0:	40002000 	.word	0x40002000
    56a4:	2000a354 	.word	0x2000a354
    56a8:	00004c51 	.word	0x00004c51

000056ac <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    56ac:	b580      	push	{r7, lr}
    56ae:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    56b0:	4904      	ldr	r1, [pc, #16]	; (56c4 <CAN_CCU_PORT_init+0x18>)
    56b2:	202d      	movs	r0, #45	; 0x2d
    56b4:	4b04      	ldr	r3, [pc, #16]	; (56c8 <CAN_CCU_PORT_init+0x1c>)
    56b6:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    56b8:	4904      	ldr	r1, [pc, #16]	; (56cc <CAN_CCU_PORT_init+0x20>)
    56ba:	202c      	movs	r0, #44	; 0x2c
    56bc:	4b02      	ldr	r3, [pc, #8]	; (56c8 <CAN_CCU_PORT_init+0x1c>)
    56be:	4798      	blx	r3
}
    56c0:	bf00      	nop
    56c2:	bd80      	pop	{r7, pc}
    56c4:	002d0007 	.word	0x002d0007
    56c8:	00004bb1 	.word	0x00004bb1
    56cc:	002c0007 	.word	0x002c0007

000056d0 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    56d0:	b580      	push	{r7, lr}
    56d2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    56d4:	4807      	ldr	r0, [pc, #28]	; (56f4 <CAN_CCU_init+0x24>)
    56d6:	4b08      	ldr	r3, [pc, #32]	; (56f8 <CAN_CCU_init+0x28>)
    56d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    56da:	2243      	movs	r2, #67	; 0x43
    56dc:	211c      	movs	r1, #28
    56de:	4807      	ldr	r0, [pc, #28]	; (56fc <CAN_CCU_init+0x2c>)
    56e0:	4b07      	ldr	r3, [pc, #28]	; (5700 <CAN_CCU_init+0x30>)
    56e2:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    56e4:	4907      	ldr	r1, [pc, #28]	; (5704 <CAN_CCU_init+0x34>)
    56e6:	4808      	ldr	r0, [pc, #32]	; (5708 <CAN_CCU_init+0x38>)
    56e8:	4b08      	ldr	r3, [pc, #32]	; (570c <CAN_CCU_init+0x3c>)
    56ea:	4798      	blx	r3
	CAN_CCU_PORT_init();
    56ec:	4b08      	ldr	r3, [pc, #32]	; (5710 <CAN_CCU_init+0x40>)
    56ee:	4798      	blx	r3
}
    56f0:	bf00      	nop
    56f2:	bd80      	pop	{r7, pc}
    56f4:	40000800 	.word	0x40000800
    56f8:	000043e3 	.word	0x000043e3
    56fc:	40001c00 	.word	0x40001c00
    5700:	0000437d 	.word	0x0000437d
    5704:	42000400 	.word	0x42000400
    5708:	2000a218 	.word	0x2000a218
    570c:	00005e19 	.word	0x00005e19
    5710:	000056ad 	.word	0x000056ad

00005714 <system_init>:

void system_init(void)
{
    5714:	b580      	push	{r7, lr}
    5716:	af00      	add	r7, sp, #0
	init_mcu();
    5718:	4b57      	ldr	r3, [pc, #348]	; (5878 <system_init+0x164>)
    571a:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    571c:	2101      	movs	r1, #1
    571e:	200f      	movs	r0, #15
    5720:	4b56      	ldr	r3, [pc, #344]	; (587c <system_init+0x168>)
    5722:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    5724:	2102      	movs	r1, #2
    5726:	200f      	movs	r0, #15
    5728:	4b55      	ldr	r3, [pc, #340]	; (5880 <system_init+0x16c>)
    572a:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    572c:	f04f 31ff 	mov.w	r1, #4294967295
    5730:	200f      	movs	r0, #15
    5732:	4b54      	ldr	r3, [pc, #336]	; (5884 <system_init+0x170>)
    5734:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    5736:	2101      	movs	r1, #1
    5738:	2013      	movs	r0, #19
    573a:	4b50      	ldr	r3, [pc, #320]	; (587c <system_init+0x168>)
    573c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    573e:	2102      	movs	r1, #2
    5740:	2013      	movs	r0, #19
    5742:	4b4f      	ldr	r3, [pc, #316]	; (5880 <system_init+0x16c>)
    5744:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    5746:	f04f 31ff 	mov.w	r1, #4294967295
    574a:	2013      	movs	r0, #19
    574c:	4b4d      	ldr	r3, [pc, #308]	; (5884 <system_init+0x170>)
    574e:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    5750:	2101      	movs	r1, #1
    5752:	201b      	movs	r0, #27
    5754:	4b49      	ldr	r3, [pc, #292]	; (587c <system_init+0x168>)
    5756:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    5758:	2102      	movs	r1, #2
    575a:	201b      	movs	r0, #27
    575c:	4b48      	ldr	r3, [pc, #288]	; (5880 <system_init+0x16c>)
    575e:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    5760:	f04f 31ff 	mov.w	r1, #4294967295
    5764:	201b      	movs	r0, #27
    5766:	4b47      	ldr	r3, [pc, #284]	; (5884 <system_init+0x170>)
    5768:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    576a:	2101      	movs	r1, #1
    576c:	2027      	movs	r0, #39	; 0x27
    576e:	4b44      	ldr	r3, [pc, #272]	; (5880 <system_init+0x16c>)
    5770:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    5772:	2102      	movs	r1, #2
    5774:	2027      	movs	r0, #39	; 0x27
    5776:	4b44      	ldr	r3, [pc, #272]	; (5888 <system_init+0x174>)
    5778:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    577a:	f04f 31ff 	mov.w	r1, #4294967295
    577e:	2027      	movs	r0, #39	; 0x27
    5780:	4b40      	ldr	r3, [pc, #256]	; (5884 <system_init+0x170>)
    5782:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    5784:	2101      	movs	r1, #1
    5786:	203d      	movs	r0, #61	; 0x3d
    5788:	4b3c      	ldr	r3, [pc, #240]	; (587c <system_init+0x168>)
    578a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    578c:	2102      	movs	r1, #2
    578e:	203d      	movs	r0, #61	; 0x3d
    5790:	4b3b      	ldr	r3, [pc, #236]	; (5880 <system_init+0x16c>)
    5792:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    5794:	f04f 31ff 	mov.w	r1, #4294967295
    5798:	203d      	movs	r0, #61	; 0x3d
    579a:	4b3a      	ldr	r3, [pc, #232]	; (5884 <system_init+0x170>)
    579c:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    579e:	2101      	movs	r1, #1
    57a0:	203f      	movs	r0, #63	; 0x3f
    57a2:	4b37      	ldr	r3, [pc, #220]	; (5880 <system_init+0x16c>)
    57a4:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    57a6:	2101      	movs	r1, #1
    57a8:	203f      	movs	r0, #63	; 0x3f
    57aa:	4b37      	ldr	r3, [pc, #220]	; (5888 <system_init+0x174>)
    57ac:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    57ae:	f04f 31ff 	mov.w	r1, #4294967295
    57b2:	203f      	movs	r0, #63	; 0x3f
    57b4:	4b33      	ldr	r3, [pc, #204]	; (5884 <system_init+0x170>)
    57b6:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    57b8:	2100      	movs	r1, #0
    57ba:	204d      	movs	r0, #77	; 0x4d
    57bc:	4b2f      	ldr	r3, [pc, #188]	; (587c <system_init+0x168>)
    57be:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    57c0:	2102      	movs	r1, #2
    57c2:	204d      	movs	r0, #77	; 0x4d
    57c4:	4b2e      	ldr	r3, [pc, #184]	; (5880 <system_init+0x16c>)
    57c6:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    57c8:	f04f 31ff 	mov.w	r1, #4294967295
    57cc:	204d      	movs	r0, #77	; 0x4d
    57ce:	4b2d      	ldr	r3, [pc, #180]	; (5884 <system_init+0x170>)
    57d0:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    57d2:	2101      	movs	r1, #1
    57d4:	204e      	movs	r0, #78	; 0x4e
    57d6:	4b29      	ldr	r3, [pc, #164]	; (587c <system_init+0x168>)
    57d8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    57da:	2102      	movs	r1, #2
    57dc:	204e      	movs	r0, #78	; 0x4e
    57de:	4b28      	ldr	r3, [pc, #160]	; (5880 <system_init+0x16c>)
    57e0:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    57e2:	f04f 31ff 	mov.w	r1, #4294967295
    57e6:	204e      	movs	r0, #78	; 0x4e
    57e8:	4b26      	ldr	r3, [pc, #152]	; (5884 <system_init+0x170>)
    57ea:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    57ec:	2100      	movs	r1, #0
    57ee:	204f      	movs	r0, #79	; 0x4f
    57f0:	4b22      	ldr	r3, [pc, #136]	; (587c <system_init+0x168>)
    57f2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    57f4:	2102      	movs	r1, #2
    57f6:	204f      	movs	r0, #79	; 0x4f
    57f8:	4b21      	ldr	r3, [pc, #132]	; (5880 <system_init+0x16c>)
    57fa:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    57fc:	f04f 31ff 	mov.w	r1, #4294967295
    5800:	204f      	movs	r0, #79	; 0x4f
    5802:	4b20      	ldr	r3, [pc, #128]	; (5884 <system_init+0x170>)
    5804:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    5806:	2100      	movs	r1, #0
    5808:	2052      	movs	r0, #82	; 0x52
    580a:	4b1c      	ldr	r3, [pc, #112]	; (587c <system_init+0x168>)
    580c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    580e:	2102      	movs	r1, #2
    5810:	2052      	movs	r0, #82	; 0x52
    5812:	4b1b      	ldr	r3, [pc, #108]	; (5880 <system_init+0x16c>)
    5814:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    5816:	f04f 31ff 	mov.w	r1, #4294967295
    581a:	2052      	movs	r0, #82	; 0x52
    581c:	4b19      	ldr	r3, [pc, #100]	; (5884 <system_init+0x170>)
    581e:	4798      	blx	r3

	CRC_CALC_init();
    5820:	4b1a      	ldr	r3, [pc, #104]	; (588c <system_init+0x178>)
    5822:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    5824:	4b1a      	ldr	r3, [pc, #104]	; (5890 <system_init+0x17c>)
    5826:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    5828:	4b1a      	ldr	r3, [pc, #104]	; (5894 <system_init+0x180>)
    582a:	4798      	blx	r3

	QSPI_N25Q256_init();
    582c:	4b1a      	ldr	r3, [pc, #104]	; (5898 <system_init+0x184>)
    582e:	4798      	blx	r3

	DATETIME_CLOCK_init();
    5830:	4b1a      	ldr	r3, [pc, #104]	; (589c <system_init+0x188>)
    5832:	4798      	blx	r3

	SPI_MEMORIES_init();
    5834:	4b1a      	ldr	r3, [pc, #104]	; (58a0 <system_init+0x18c>)
    5836:	4798      	blx	r3

	I2C_SHARED_init();
    5838:	4b1a      	ldr	r3, [pc, #104]	; (58a4 <system_init+0x190>)
    583a:	4798      	blx	r3

	SPI_TEMP_init();
    583c:	4b1a      	ldr	r3, [pc, #104]	; (58a8 <system_init+0x194>)
    583e:	4798      	blx	r3

	I2C_EXPANDER_init();
    5840:	4b1a      	ldr	r3, [pc, #104]	; (58ac <system_init+0x198>)
    5842:	4798      	blx	r3

	SPI_HI3593_init();
    5844:	4b1a      	ldr	r3, [pc, #104]	; (58b0 <system_init+0x19c>)
    5846:	4798      	blx	r3

	I2C_EEPROM_init();
    5848:	4b1a      	ldr	r3, [pc, #104]	; (58b4 <system_init+0x1a0>)
    584a:	4798      	blx	r3

	TIMER_USB_init();
    584c:	4b1a      	ldr	r3, [pc, #104]	; (58b8 <system_init+0x1a4>)
    584e:	4798      	blx	r3
	LIVE_PULSE_init();
    5850:	4b1a      	ldr	r3, [pc, #104]	; (58bc <system_init+0x1a8>)
    5852:	4798      	blx	r3

	TIMER_ARINC_init();
    5854:	4b1a      	ldr	r3, [pc, #104]	; (58c0 <system_init+0x1ac>)
    5856:	4798      	blx	r3
	TIMER_HVAC_init();
    5858:	4b1a      	ldr	r3, [pc, #104]	; (58c4 <system_init+0x1b0>)
    585a:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    585c:	4b1a      	ldr	r3, [pc, #104]	; (58c8 <system_init+0x1b4>)
    585e:	4798      	blx	r3
	TIMER_INTERFACE_init();
    5860:	4b1a      	ldr	r3, [pc, #104]	; (58cc <system_init+0x1b8>)
    5862:	4798      	blx	r3
	TIMER_EVENT_init();
    5864:	4b1a      	ldr	r3, [pc, #104]	; (58d0 <system_init+0x1bc>)
    5866:	4798      	blx	r3
	CDCUSB_init();
    5868:	4b1a      	ldr	r3, [pc, #104]	; (58d4 <system_init+0x1c0>)
    586a:	4798      	blx	r3

	WATCHDOG_init();
    586c:	4b1a      	ldr	r3, [pc, #104]	; (58d8 <system_init+0x1c4>)
    586e:	4798      	blx	r3
	CAN_CCU_init();
    5870:	4b1a      	ldr	r3, [pc, #104]	; (58dc <system_init+0x1c8>)
    5872:	4798      	blx	r3
}
    5874:	bf00      	nop
    5876:	bd80      	pop	{r7, pc}
    5878:	00004c41 	.word	0x00004c41
    587c:	00004c09 	.word	0x00004c09
    5880:	00004bd1 	.word	0x00004bd1
    5884:	00004bb1 	.word	0x00004bb1
    5888:	00004b7d 	.word	0x00004b7d
    588c:	00004ca1 	.word	0x00004ca1
    5890:	00004ccd 	.word	0x00004ccd
    5894:	00004dc1 	.word	0x00004dc1
    5898:	00004f09 	.word	0x00004f09
    589c:	00004f4d 	.word	0x00004f4d
    58a0:	00005011 	.word	0x00005011
    58a4:	000050a9 	.word	0x000050a9
    58a8:	00005175 	.word	0x00005175
    58ac:	0000520d 	.word	0x0000520d
    58b0:	000052d9 	.word	0x000052d9
    58b4:	00005371 	.word	0x00005371
    58b8:	0000539d 	.word	0x0000539d
    58bc:	0000541d 	.word	0x0000541d
    58c0:	00005455 	.word	0x00005455
    58c4:	0000549d 	.word	0x0000549d
    58c8:	000054e5 	.word	0x000054e5
    58cc:	0000552d 	.word	0x0000552d
    58d0:	00005575 	.word	0x00005575
    58d4:	00005651 	.word	0x00005651
    58d8:	00005689 	.word	0x00005689
    58dc:	000056d1 	.word	0x000056d1

000058e0 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    58e0:	b480      	push	{r7}
    58e2:	b083      	sub	sp, #12
    58e4:	af00      	add	r7, sp, #0
    58e6:	4603      	mov	r3, r0
    58e8:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    58ea:	88fb      	ldrh	r3, [r7, #6]
    58ec:	f003 0303 	and.w	r3, r3, #3
    58f0:	2b00      	cmp	r3, #0
    58f2:	d001      	beq.n	58f8 <leap_year+0x18>
		return false;
    58f4:	2300      	movs	r3, #0
    58f6:	e000      	b.n	58fa <leap_year+0x1a>
	} else {
		return true;
    58f8:	2301      	movs	r3, #1
	}
}
    58fa:	4618      	mov	r0, r3
    58fc:	370c      	adds	r7, #12
    58fe:	46bd      	mov	sp, r7
    5900:	f85d 7b04 	ldr.w	r7, [sp], #4
    5904:	4770      	bx	lr
	...

00005908 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    5908:	b580      	push	{r7, lr}
    590a:	b084      	sub	sp, #16
    590c:	af00      	add	r7, sp, #0
    590e:	6078      	str	r0, [r7, #4]
    5910:	460b      	mov	r3, r1
    5912:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    5914:	2300      	movs	r3, #0
    5916:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    5918:	687b      	ldr	r3, [r7, #4]
    591a:	b29b      	uxth	r3, r3
    591c:	4618      	mov	r0, r3
    591e:	4b2f      	ldr	r3, [pc, #188]	; (59dc <get_secs_in_month+0xd4>)
    5920:	4798      	blx	r3
    5922:	4603      	mov	r3, r0
    5924:	2b00      	cmp	r3, #0
    5926:	d028      	beq.n	597a <get_secs_in_month+0x72>
		switch (month) {
    5928:	78fb      	ldrb	r3, [r7, #3]
    592a:	3b01      	subs	r3, #1
    592c:	2b0b      	cmp	r3, #11
    592e:	d84c      	bhi.n	59ca <get_secs_in_month+0xc2>
    5930:	a201      	add	r2, pc, #4	; (adr r2, 5938 <get_secs_in_month+0x30>)
    5932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5936:	bf00      	nop
    5938:	00005969 	.word	0x00005969
    593c:	0000596f 	.word	0x0000596f
    5940:	00005969 	.word	0x00005969
    5944:	00005975 	.word	0x00005975
    5948:	00005969 	.word	0x00005969
    594c:	00005975 	.word	0x00005975
    5950:	00005969 	.word	0x00005969
    5954:	00005969 	.word	0x00005969
    5958:	00005975 	.word	0x00005975
    595c:	00005969 	.word	0x00005969
    5960:	00005975 	.word	0x00005975
    5964:	00005969 	.word	0x00005969
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    5968:	4b1d      	ldr	r3, [pc, #116]	; (59e0 <get_secs_in_month+0xd8>)
    596a:	60fb      	str	r3, [r7, #12]
			break;
    596c:	e030      	b.n	59d0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    596e:	4b1d      	ldr	r3, [pc, #116]	; (59e4 <get_secs_in_month+0xdc>)
    5970:	60fb      	str	r3, [r7, #12]
			break;
    5972:	e02d      	b.n	59d0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    5974:	4b1c      	ldr	r3, [pc, #112]	; (59e8 <get_secs_in_month+0xe0>)
    5976:	60fb      	str	r3, [r7, #12]
			break;
    5978:	e02a      	b.n	59d0 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    597a:	78fb      	ldrb	r3, [r7, #3]
    597c:	3b01      	subs	r3, #1
    597e:	2b0b      	cmp	r3, #11
    5980:	d825      	bhi.n	59ce <get_secs_in_month+0xc6>
    5982:	a201      	add	r2, pc, #4	; (adr r2, 5988 <get_secs_in_month+0x80>)
    5984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5988:	000059b9 	.word	0x000059b9
    598c:	000059bf 	.word	0x000059bf
    5990:	000059b9 	.word	0x000059b9
    5994:	000059c5 	.word	0x000059c5
    5998:	000059b9 	.word	0x000059b9
    599c:	000059c5 	.word	0x000059c5
    59a0:	000059b9 	.word	0x000059b9
    59a4:	000059b9 	.word	0x000059b9
    59a8:	000059c5 	.word	0x000059c5
    59ac:	000059b9 	.word	0x000059b9
    59b0:	000059c5 	.word	0x000059c5
    59b4:	000059b9 	.word	0x000059b9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    59b8:	4b09      	ldr	r3, [pc, #36]	; (59e0 <get_secs_in_month+0xd8>)
    59ba:	60fb      	str	r3, [r7, #12]
			break;
    59bc:	e008      	b.n	59d0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    59be:	4b0b      	ldr	r3, [pc, #44]	; (59ec <get_secs_in_month+0xe4>)
    59c0:	60fb      	str	r3, [r7, #12]
			break;
    59c2:	e005      	b.n	59d0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    59c4:	4b08      	ldr	r3, [pc, #32]	; (59e8 <get_secs_in_month+0xe0>)
    59c6:	60fb      	str	r3, [r7, #12]
			break;
    59c8:	e002      	b.n	59d0 <get_secs_in_month+0xc8>
			break;
    59ca:	bf00      	nop
    59cc:	e000      	b.n	59d0 <get_secs_in_month+0xc8>
		default:
			break;
    59ce:	bf00      	nop
		}
	}

	return sec_in_month;
    59d0:	68fb      	ldr	r3, [r7, #12]
}
    59d2:	4618      	mov	r0, r3
    59d4:	3710      	adds	r7, #16
    59d6:	46bd      	mov	sp, r7
    59d8:	bd80      	pop	{r7, pc}
    59da:	bf00      	nop
    59dc:	000058e1 	.word	0x000058e1
    59e0:	0028de80 	.word	0x0028de80
    59e4:	00263b80 	.word	0x00263b80
    59e8:	00278d00 	.word	0x00278d00
    59ec:	0024ea00 	.word	0x0024ea00

000059f0 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    59f0:	b580      	push	{r7, lr}
    59f2:	b08a      	sub	sp, #40	; 0x28
    59f4:	af00      	add	r7, sp, #0
    59f6:	60f8      	str	r0, [r7, #12]
    59f8:	60b9      	str	r1, [r7, #8]
    59fa:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    59fc:	68fb      	ldr	r3, [r7, #12]
    59fe:	699b      	ldr	r3, [r3, #24]
    5a00:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    5a02:	2301      	movs	r3, #1
    5a04:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    5a06:	2301      	movs	r3, #1
    5a08:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    5a0a:	2300      	movs	r3, #0
    5a0c:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    5a0e:	2300      	movs	r3, #0
    5a10:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    5a12:	68bb      	ldr	r3, [r7, #8]
    5a14:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    5a16:	6a3b      	ldr	r3, [r7, #32]
    5a18:	b29b      	uxth	r3, r3
    5a1a:	4618      	mov	r0, r3
    5a1c:	4b32      	ldr	r3, [pc, #200]	; (5ae8 <convert_timestamp_to_datetime+0xf8>)
    5a1e:	4798      	blx	r3
    5a20:	4603      	mov	r3, r0
    5a22:	2b00      	cmp	r3, #0
    5a24:	d001      	beq.n	5a2a <convert_timestamp_to_datetime+0x3a>
    5a26:	4b31      	ldr	r3, [pc, #196]	; (5aec <convert_timestamp_to_datetime+0xfc>)
    5a28:	e000      	b.n	5a2c <convert_timestamp_to_datetime+0x3c>
    5a2a:	4b31      	ldr	r3, [pc, #196]	; (5af0 <convert_timestamp_to_datetime+0x100>)
    5a2c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    5a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5a30:	69bb      	ldr	r3, [r7, #24]
    5a32:	429a      	cmp	r2, r3
    5a34:	d307      	bcc.n	5a46 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    5a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5a38:	69bb      	ldr	r3, [r7, #24]
    5a3a:	1ad3      	subs	r3, r2, r3
    5a3c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    5a3e:	6a3b      	ldr	r3, [r7, #32]
    5a40:	3301      	adds	r3, #1
    5a42:	623b      	str	r3, [r7, #32]
    5a44:	e7e7      	b.n	5a16 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    5a46:	7ffb      	ldrb	r3, [r7, #31]
    5a48:	4619      	mov	r1, r3
    5a4a:	6a38      	ldr	r0, [r7, #32]
    5a4c:	4b29      	ldr	r3, [pc, #164]	; (5af4 <convert_timestamp_to_datetime+0x104>)
    5a4e:	4798      	blx	r3
    5a50:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    5a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5a54:	697b      	ldr	r3, [r7, #20]
    5a56:	429a      	cmp	r2, r3
    5a58:	d307      	bcc.n	5a6a <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    5a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5a5c:	697b      	ldr	r3, [r7, #20]
    5a5e:	1ad3      	subs	r3, r2, r3
    5a60:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    5a62:	7ffb      	ldrb	r3, [r7, #31]
    5a64:	3301      	adds	r3, #1
    5a66:	77fb      	strb	r3, [r7, #31]
    5a68:	e7ed      	b.n	5a46 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    5a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a6c:	4a22      	ldr	r2, [pc, #136]	; (5af8 <convert_timestamp_to_datetime+0x108>)
    5a6e:	4293      	cmp	r3, r2
    5a70:	d909      	bls.n	5a86 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    5a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a74:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    5a78:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    5a7c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    5a7e:	7fbb      	ldrb	r3, [r7, #30]
    5a80:	3301      	adds	r3, #1
    5a82:	77bb      	strb	r3, [r7, #30]
    5a84:	e7f1      	b.n	5a6a <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    5a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a88:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    5a8c:	d307      	bcc.n	5a9e <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    5a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a90:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    5a94:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    5a96:	7f7b      	ldrb	r3, [r7, #29]
    5a98:	3301      	adds	r3, #1
    5a9a:	777b      	strb	r3, [r7, #29]
    5a9c:	e7f3      	b.n	5a86 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    5a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5aa0:	2b3b      	cmp	r3, #59	; 0x3b
    5aa2:	d906      	bls.n	5ab2 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    5aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5aa6:	3b3c      	subs	r3, #60	; 0x3c
    5aa8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    5aaa:	7f3b      	ldrb	r3, [r7, #28]
    5aac:	3301      	adds	r3, #1
    5aae:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    5ab0:	e7f5      	b.n	5a9e <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    5ab2:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    5ab4:	6a3b      	ldr	r3, [r7, #32]
    5ab6:	b29a      	uxth	r2, r3
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	7ffa      	ldrb	r2, [r7, #31]
    5ac0:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    5ac2:	687b      	ldr	r3, [r7, #4]
    5ac4:	7fba      	ldrb	r2, [r7, #30]
    5ac6:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	7f7a      	ldrb	r2, [r7, #29]
    5acc:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    5ace:	687b      	ldr	r3, [r7, #4]
    5ad0:	7f3a      	ldrb	r2, [r7, #28]
    5ad2:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    5ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ad6:	b2da      	uxtb	r2, r3
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    5adc:	2300      	movs	r3, #0
}
    5ade:	4618      	mov	r0, r3
    5ae0:	3728      	adds	r7, #40	; 0x28
    5ae2:	46bd      	mov	sp, r7
    5ae4:	bd80      	pop	{r7, pc}
    5ae6:	bf00      	nop
    5ae8:	000058e1 	.word	0x000058e1
    5aec:	01e28500 	.word	0x01e28500
    5af0:	01e13380 	.word	0x01e13380
    5af4:	00005909 	.word	0x00005909
    5af8:	0001517f 	.word	0x0001517f

00005afc <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    5afc:	b580      	push	{r7, lr}
    5afe:	b086      	sub	sp, #24
    5b00:	af00      	add	r7, sp, #0
    5b02:	6078      	str	r0, [r7, #4]
    5b04:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    5b06:	2300      	movs	r3, #0
    5b08:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    5b0a:	2300      	movs	r3, #0
    5b0c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    5b0e:	683b      	ldr	r3, [r7, #0]
    5b10:	88db      	ldrh	r3, [r3, #6]
    5b12:	b2da      	uxtb	r2, r3
    5b14:	687b      	ldr	r3, [r7, #4]
    5b16:	699b      	ldr	r3, [r3, #24]
    5b18:	b2db      	uxtb	r3, r3
    5b1a:	1ad3      	subs	r3, r2, r3
    5b1c:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    5b1e:	683b      	ldr	r3, [r7, #0]
    5b20:	795b      	ldrb	r3, [r3, #5]
    5b22:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    5b24:	683b      	ldr	r3, [r7, #0]
    5b26:	791b      	ldrb	r3, [r3, #4]
    5b28:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    5b2a:	683b      	ldr	r3, [r7, #0]
    5b2c:	789b      	ldrb	r3, [r3, #2]
    5b2e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    5b30:	683b      	ldr	r3, [r7, #0]
    5b32:	785b      	ldrb	r3, [r3, #1]
    5b34:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    5b36:	683b      	ldr	r3, [r7, #0]
    5b38:	781b      	ldrb	r3, [r3, #0]
    5b3a:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    5b3c:	2300      	movs	r3, #0
    5b3e:	613b      	str	r3, [r7, #16]
    5b40:	e01a      	b.n	5b78 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	699b      	ldr	r3, [r3, #24]
    5b46:	b29a      	uxth	r2, r3
    5b48:	693b      	ldr	r3, [r7, #16]
    5b4a:	b29b      	uxth	r3, r3
    5b4c:	4413      	add	r3, r2
    5b4e:	b29b      	uxth	r3, r3
    5b50:	4618      	mov	r0, r3
    5b52:	4b29      	ldr	r3, [pc, #164]	; (5bf8 <convert_datetime_to_timestamp+0xfc>)
    5b54:	4798      	blx	r3
    5b56:	4603      	mov	r3, r0
    5b58:	2b00      	cmp	r3, #0
    5b5a:	d006      	beq.n	5b6a <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    5b5c:	697b      	ldr	r3, [r7, #20]
    5b5e:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    5b62:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    5b66:	617b      	str	r3, [r7, #20]
    5b68:	e003      	b.n	5b72 <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    5b6a:	697a      	ldr	r2, [r7, #20]
    5b6c:	4b23      	ldr	r3, [pc, #140]	; (5bfc <convert_datetime_to_timestamp+0x100>)
    5b6e:	4413      	add	r3, r2
    5b70:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    5b72:	693b      	ldr	r3, [r7, #16]
    5b74:	3301      	adds	r3, #1
    5b76:	613b      	str	r3, [r7, #16]
    5b78:	7bfa      	ldrb	r2, [r7, #15]
    5b7a:	693b      	ldr	r3, [r7, #16]
    5b7c:	429a      	cmp	r2, r3
    5b7e:	d8e0      	bhi.n	5b42 <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    5b80:	2301      	movs	r3, #1
    5b82:	613b      	str	r3, [r7, #16]
    5b84:	e00f      	b.n	5ba6 <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    5b86:	683b      	ldr	r3, [r7, #0]
    5b88:	88db      	ldrh	r3, [r3, #6]
    5b8a:	461a      	mov	r2, r3
    5b8c:	693b      	ldr	r3, [r7, #16]
    5b8e:	b2db      	uxtb	r3, r3
    5b90:	4619      	mov	r1, r3
    5b92:	4610      	mov	r0, r2
    5b94:	4b1a      	ldr	r3, [pc, #104]	; (5c00 <convert_datetime_to_timestamp+0x104>)
    5b96:	4798      	blx	r3
    5b98:	4602      	mov	r2, r0
    5b9a:	697b      	ldr	r3, [r7, #20]
    5b9c:	4413      	add	r3, r2
    5b9e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    5ba0:	693b      	ldr	r3, [r7, #16]
    5ba2:	3301      	adds	r3, #1
    5ba4:	613b      	str	r3, [r7, #16]
    5ba6:	7bba      	ldrb	r2, [r7, #14]
    5ba8:	693b      	ldr	r3, [r7, #16]
    5baa:	429a      	cmp	r2, r3
    5bac:	d8eb      	bhi.n	5b86 <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    5bae:	7b7b      	ldrb	r3, [r7, #13]
    5bb0:	3b01      	subs	r3, #1
    5bb2:	4a14      	ldr	r2, [pc, #80]	; (5c04 <convert_datetime_to_timestamp+0x108>)
    5bb4:	fb02 f303 	mul.w	r3, r2, r3
    5bb8:	461a      	mov	r2, r3
    5bba:	697b      	ldr	r3, [r7, #20]
    5bbc:	4413      	add	r3, r2
    5bbe:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    5bc0:	7b3b      	ldrb	r3, [r7, #12]
    5bc2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    5bc6:	fb02 f303 	mul.w	r3, r2, r3
    5bca:	461a      	mov	r2, r3
    5bcc:	697b      	ldr	r3, [r7, #20]
    5bce:	4413      	add	r3, r2
    5bd0:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    5bd2:	7afa      	ldrb	r2, [r7, #11]
    5bd4:	4613      	mov	r3, r2
    5bd6:	011b      	lsls	r3, r3, #4
    5bd8:	1a9b      	subs	r3, r3, r2
    5bda:	009b      	lsls	r3, r3, #2
    5bdc:	461a      	mov	r2, r3
    5bde:	697b      	ldr	r3, [r7, #20]
    5be0:	4413      	add	r3, r2
    5be2:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    5be4:	7abb      	ldrb	r3, [r7, #10]
    5be6:	697a      	ldr	r2, [r7, #20]
    5be8:	4413      	add	r3, r2
    5bea:	617b      	str	r3, [r7, #20]

	return tmp;
    5bec:	697b      	ldr	r3, [r7, #20]
}
    5bee:	4618      	mov	r0, r3
    5bf0:	3718      	adds	r7, #24
    5bf2:	46bd      	mov	sp, r7
    5bf4:	bd80      	pop	{r7, pc}
    5bf6:	bf00      	nop
    5bf8:	000058e1 	.word	0x000058e1
    5bfc:	01e13380 	.word	0x01e13380
    5c00:	00005909 	.word	0x00005909
    5c04:	00015180 	.word	0x00015180

00005c08 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    5c08:	b580      	push	{r7, lr}
    5c0a:	b084      	sub	sp, #16
    5c0c:	af00      	add	r7, sp, #0
    5c0e:	6078      	str	r0, [r7, #4]
    5c10:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    5c12:	2300      	movs	r3, #0
    5c14:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	2b00      	cmp	r3, #0
    5c1a:	bf14      	ite	ne
    5c1c:	2301      	movne	r3, #1
    5c1e:	2300      	moveq	r3, #0
    5c20:	b2db      	uxtb	r3, r3
    5c22:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    5c26:	4911      	ldr	r1, [pc, #68]	; (5c6c <calendar_init+0x64>)
    5c28:	4618      	mov	r0, r3
    5c2a:	4b11      	ldr	r3, [pc, #68]	; (5c70 <calendar_init+0x68>)
    5c2c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    5c2e:	687b      	ldr	r3, [r7, #4]
    5c30:	681a      	ldr	r2, [r3, #0]
    5c32:	683b      	ldr	r3, [r7, #0]
    5c34:	429a      	cmp	r2, r3
    5c36:	d101      	bne.n	5c3c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    5c38:	2300      	movs	r3, #0
    5c3a:	e013      	b.n	5c64 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    5c3c:	687b      	ldr	r3, [r7, #4]
    5c3e:	681b      	ldr	r3, [r3, #0]
    5c40:	2b00      	cmp	r3, #0
    5c42:	d002      	beq.n	5c4a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    5c44:	f06f 0311 	mvn.w	r3, #17
    5c48:	e00c      	b.n	5c64 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    5c4a:	687b      	ldr	r3, [r7, #4]
    5c4c:	683a      	ldr	r2, [r7, #0]
    5c4e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    5c50:	687b      	ldr	r3, [r7, #4]
    5c52:	4618      	mov	r0, r3
    5c54:	4b07      	ldr	r3, [pc, #28]	; (5c74 <calendar_init+0x6c>)
    5c56:	4798      	blx	r3
    5c58:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    5c5a:	687b      	ldr	r3, [r7, #4]
    5c5c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    5c60:	619a      	str	r2, [r3, #24]

	return ret;
    5c62:	68fb      	ldr	r3, [r7, #12]
}
    5c64:	4618      	mov	r0, r3
    5c66:	3710      	adds	r7, #16
    5c68:	46bd      	mov	sp, r7
    5c6a:	bd80      	pop	{r7, pc}
    5c6c:	0001f49c 	.word	0x0001f49c
    5c70:	00007d91 	.word	0x00007d91
    5c74:	0000a6cd 	.word	0x0000a6cd

00005c78 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    5c78:	b580      	push	{r7, lr}
    5c7a:	b082      	sub	sp, #8
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	2b00      	cmp	r3, #0
    5c84:	bf14      	ite	ne
    5c86:	2301      	movne	r3, #1
    5c88:	2300      	moveq	r3, #0
    5c8a:	b2db      	uxtb	r3, r3
    5c8c:	f240 12e5 	movw	r2, #485	; 0x1e5
    5c90:	4906      	ldr	r1, [pc, #24]	; (5cac <calendar_enable+0x34>)
    5c92:	4618      	mov	r0, r3
    5c94:	4b06      	ldr	r3, [pc, #24]	; (5cb0 <calendar_enable+0x38>)
    5c96:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    5c98:	687b      	ldr	r3, [r7, #4]
    5c9a:	4618      	mov	r0, r3
    5c9c:	4b05      	ldr	r3, [pc, #20]	; (5cb4 <calendar_enable+0x3c>)
    5c9e:	4798      	blx	r3

	return ERR_NONE;
    5ca0:	2300      	movs	r3, #0
}
    5ca2:	4618      	mov	r0, r3
    5ca4:	3708      	adds	r7, #8
    5ca6:	46bd      	mov	sp, r7
    5ca8:	bd80      	pop	{r7, pc}
    5caa:	bf00      	nop
    5cac:	0001f49c 	.word	0x0001f49c
    5cb0:	00007d91 	.word	0x00007d91
    5cb4:	0000a785 	.word	0x0000a785

00005cb8 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    5cb8:	b580      	push	{r7, lr}
    5cba:	b086      	sub	sp, #24
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	6078      	str	r0, [r7, #4]
    5cc0:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    5cc2:	687b      	ldr	r3, [r7, #4]
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	bf14      	ite	ne
    5cc8:	2301      	movne	r3, #1
    5cca:	2300      	moveq	r3, #0
    5ccc:	b2db      	uxtb	r3, r3
    5cce:	f44f 7203 	mov.w	r2, #524	; 0x20c
    5cd2:	4915      	ldr	r1, [pc, #84]	; (5d28 <calendar_set_time+0x70>)
    5cd4:	4618      	mov	r0, r3
    5cd6:	4b15      	ldr	r3, [pc, #84]	; (5d2c <calendar_set_time+0x74>)
    5cd8:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    5cda:	687b      	ldr	r3, [r7, #4]
    5cdc:	4618      	mov	r0, r3
    5cde:	4b14      	ldr	r3, [pc, #80]	; (5d30 <calendar_set_time+0x78>)
    5ce0:	4798      	blx	r3
    5ce2:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    5ce4:	f107 0308 	add.w	r3, r7, #8
    5ce8:	461a      	mov	r2, r3
    5cea:	6979      	ldr	r1, [r7, #20]
    5cec:	6878      	ldr	r0, [r7, #4]
    5cee:	4b11      	ldr	r3, [pc, #68]	; (5d34 <calendar_set_time+0x7c>)
    5cf0:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    5cf2:	683b      	ldr	r3, [r7, #0]
    5cf4:	781b      	ldrb	r3, [r3, #0]
    5cf6:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    5cf8:	683b      	ldr	r3, [r7, #0]
    5cfa:	785b      	ldrb	r3, [r3, #1]
    5cfc:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    5cfe:	683b      	ldr	r3, [r7, #0]
    5d00:	789b      	ldrb	r3, [r3, #2]
    5d02:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    5d04:	f107 0308 	add.w	r3, r7, #8
    5d08:	4619      	mov	r1, r3
    5d0a:	6878      	ldr	r0, [r7, #4]
    5d0c:	4b0a      	ldr	r3, [pc, #40]	; (5d38 <calendar_set_time+0x80>)
    5d0e:	4798      	blx	r3
    5d10:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    5d12:	687b      	ldr	r3, [r7, #4]
    5d14:	6939      	ldr	r1, [r7, #16]
    5d16:	4618      	mov	r0, r3
    5d18:	4b08      	ldr	r3, [pc, #32]	; (5d3c <calendar_set_time+0x84>)
    5d1a:	4798      	blx	r3

	return ERR_NONE;
    5d1c:	2300      	movs	r3, #0
}
    5d1e:	4618      	mov	r0, r3
    5d20:	3718      	adds	r7, #24
    5d22:	46bd      	mov	sp, r7
    5d24:	bd80      	pop	{r7, pc}
    5d26:	bf00      	nop
    5d28:	0001f49c 	.word	0x0001f49c
    5d2c:	00007d91 	.word	0x00007d91
    5d30:	0000a821 	.word	0x0000a821
    5d34:	000059f1 	.word	0x000059f1
    5d38:	00005afd 	.word	0x00005afd
    5d3c:	0000a7d1 	.word	0x0000a7d1

00005d40 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    5d40:	b580      	push	{r7, lr}
    5d42:	b086      	sub	sp, #24
    5d44:	af00      	add	r7, sp, #0
    5d46:	6078      	str	r0, [r7, #4]
    5d48:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    5d4a:	687b      	ldr	r3, [r7, #4]
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	bf14      	ite	ne
    5d50:	2301      	movne	r3, #1
    5d52:	2300      	moveq	r3, #0
    5d54:	b2db      	uxtb	r3, r3
    5d56:	f44f 7209 	mov.w	r2, #548	; 0x224
    5d5a:	4915      	ldr	r1, [pc, #84]	; (5db0 <calendar_set_date+0x70>)
    5d5c:	4618      	mov	r0, r3
    5d5e:	4b15      	ldr	r3, [pc, #84]	; (5db4 <calendar_set_date+0x74>)
    5d60:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    5d62:	687b      	ldr	r3, [r7, #4]
    5d64:	4618      	mov	r0, r3
    5d66:	4b14      	ldr	r3, [pc, #80]	; (5db8 <calendar_set_date+0x78>)
    5d68:	4798      	blx	r3
    5d6a:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    5d6c:	f107 0308 	add.w	r3, r7, #8
    5d70:	461a      	mov	r2, r3
    5d72:	6979      	ldr	r1, [r7, #20]
    5d74:	6878      	ldr	r0, [r7, #4]
    5d76:	4b11      	ldr	r3, [pc, #68]	; (5dbc <calendar_set_date+0x7c>)
    5d78:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    5d7a:	683b      	ldr	r3, [r7, #0]
    5d7c:	781b      	ldrb	r3, [r3, #0]
    5d7e:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    5d80:	683b      	ldr	r3, [r7, #0]
    5d82:	785b      	ldrb	r3, [r3, #1]
    5d84:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    5d86:	683b      	ldr	r3, [r7, #0]
    5d88:	885b      	ldrh	r3, [r3, #2]
    5d8a:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    5d8c:	f107 0308 	add.w	r3, r7, #8
    5d90:	4619      	mov	r1, r3
    5d92:	6878      	ldr	r0, [r7, #4]
    5d94:	4b0a      	ldr	r3, [pc, #40]	; (5dc0 <calendar_set_date+0x80>)
    5d96:	4798      	blx	r3
    5d98:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	6939      	ldr	r1, [r7, #16]
    5d9e:	4618      	mov	r0, r3
    5da0:	4b08      	ldr	r3, [pc, #32]	; (5dc4 <calendar_set_date+0x84>)
    5da2:	4798      	blx	r3

	return ERR_NONE;
    5da4:	2300      	movs	r3, #0
}
    5da6:	4618      	mov	r0, r3
    5da8:	3718      	adds	r7, #24
    5daa:	46bd      	mov	sp, r7
    5dac:	bd80      	pop	{r7, pc}
    5dae:	bf00      	nop
    5db0:	0001f49c 	.word	0x0001f49c
    5db4:	00007d91 	.word	0x00007d91
    5db8:	0000a821 	.word	0x0000a821
    5dbc:	000059f1 	.word	0x000059f1
    5dc0:	00005afd 	.word	0x00005afd
    5dc4:	0000a7d1 	.word	0x0000a7d1

00005dc8 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    5dc8:	b580      	push	{r7, lr}
    5dca:	b084      	sub	sp, #16
    5dcc:	af00      	add	r7, sp, #0
    5dce:	6078      	str	r0, [r7, #4]
    5dd0:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    5dd2:	687b      	ldr	r3, [r7, #4]
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	bf14      	ite	ne
    5dd8:	2301      	movne	r3, #1
    5dda:	2300      	moveq	r3, #0
    5ddc:	b2db      	uxtb	r3, r3
    5dde:	f240 223b 	movw	r2, #571	; 0x23b
    5de2:	4909      	ldr	r1, [pc, #36]	; (5e08 <calendar_get_date_time+0x40>)
    5de4:	4618      	mov	r0, r3
    5de6:	4b09      	ldr	r3, [pc, #36]	; (5e0c <calendar_get_date_time+0x44>)
    5de8:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    5dea:	687b      	ldr	r3, [r7, #4]
    5dec:	4618      	mov	r0, r3
    5dee:	4b08      	ldr	r3, [pc, #32]	; (5e10 <calendar_get_date_time+0x48>)
    5df0:	4798      	blx	r3
    5df2:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    5df4:	683a      	ldr	r2, [r7, #0]
    5df6:	68f9      	ldr	r1, [r7, #12]
    5df8:	6878      	ldr	r0, [r7, #4]
    5dfa:	4b06      	ldr	r3, [pc, #24]	; (5e14 <calendar_get_date_time+0x4c>)
    5dfc:	4798      	blx	r3

	return ERR_NONE;
    5dfe:	2300      	movs	r3, #0
}
    5e00:	4618      	mov	r0, r3
    5e02:	3710      	adds	r7, #16
    5e04:	46bd      	mov	sp, r7
    5e06:	bd80      	pop	{r7, pc}
    5e08:	0001f49c 	.word	0x0001f49c
    5e0c:	00007d91 	.word	0x00007d91
    5e10:	0000a821 	.word	0x0000a821
    5e14:	000059f1 	.word	0x000059f1

00005e18 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    5e18:	b580      	push	{r7, lr}
    5e1a:	b084      	sub	sp, #16
    5e1c:	af00      	add	r7, sp, #0
    5e1e:	6078      	str	r0, [r7, #4]
    5e20:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    5e22:	687b      	ldr	r3, [r7, #4]
    5e24:	2b00      	cmp	r3, #0
    5e26:	d004      	beq.n	5e32 <can_async_init+0x1a>
    5e28:	683b      	ldr	r3, [r7, #0]
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	d001      	beq.n	5e32 <can_async_init+0x1a>
    5e2e:	2301      	movs	r3, #1
    5e30:	e000      	b.n	5e34 <can_async_init+0x1c>
    5e32:	2300      	movs	r3, #0
    5e34:	f003 0301 	and.w	r3, r3, #1
    5e38:	b2db      	uxtb	r3, r3
    5e3a:	2241      	movs	r2, #65	; 0x41
    5e3c:	490e      	ldr	r1, [pc, #56]	; (5e78 <can_async_init+0x60>)
    5e3e:	4618      	mov	r0, r3
    5e40:	4b0e      	ldr	r3, [pc, #56]	; (5e7c <can_async_init+0x64>)
    5e42:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    5e44:	687b      	ldr	r3, [r7, #4]
    5e46:	6839      	ldr	r1, [r7, #0]
    5e48:	4618      	mov	r0, r3
    5e4a:	4b0d      	ldr	r3, [pc, #52]	; (5e80 <can_async_init+0x68>)
    5e4c:	4798      	blx	r3
    5e4e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    5e50:	68fb      	ldr	r3, [r7, #12]
    5e52:	2b00      	cmp	r3, #0
    5e54:	d001      	beq.n	5e5a <can_async_init+0x42>
		return rc;
    5e56:	68fb      	ldr	r3, [r7, #12]
    5e58:	e009      	b.n	5e6e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    5e5a:	687b      	ldr	r3, [r7, #4]
    5e5c:	4a09      	ldr	r2, [pc, #36]	; (5e84 <can_async_init+0x6c>)
    5e5e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    5e60:	687b      	ldr	r3, [r7, #4]
    5e62:	4a09      	ldr	r2, [pc, #36]	; (5e88 <can_async_init+0x70>)
    5e64:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    5e66:	687b      	ldr	r3, [r7, #4]
    5e68:	4a08      	ldr	r2, [pc, #32]	; (5e8c <can_async_init+0x74>)
    5e6a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    5e6c:	2300      	movs	r3, #0
}
    5e6e:	4618      	mov	r0, r3
    5e70:	3710      	adds	r7, #16
    5e72:	46bd      	mov	sp, r7
    5e74:	bd80      	pop	{r7, pc}
    5e76:	bf00      	nop
    5e78:	0001f4b8 	.word	0x0001f4b8
    5e7c:	00007d91 	.word	0x00007d91
    5e80:	000082ed 	.word	0x000082ed
    5e84:	00005e91 	.word	0x00005e91
    5e88:	00005eb5 	.word	0x00005eb5
    5e8c:	00005ed9 	.word	0x00005ed9

00005e90 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    5e90:	b580      	push	{r7, lr}
    5e92:	b084      	sub	sp, #16
    5e94:	af00      	add	r7, sp, #0
    5e96:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5e98:	687b      	ldr	r3, [r7, #4]
    5e9a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    5e9c:	68fb      	ldr	r3, [r7, #12]
    5e9e:	69db      	ldr	r3, [r3, #28]
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	d003      	beq.n	5eac <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    5ea4:	68fb      	ldr	r3, [r7, #12]
    5ea6:	69db      	ldr	r3, [r3, #28]
    5ea8:	68f8      	ldr	r0, [r7, #12]
    5eaa:	4798      	blx	r3
	}
}
    5eac:	bf00      	nop
    5eae:	3710      	adds	r7, #16
    5eb0:	46bd      	mov	sp, r7
    5eb2:	bd80      	pop	{r7, pc}

00005eb4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    5eb4:	b580      	push	{r7, lr}
    5eb6:	b084      	sub	sp, #16
    5eb8:	af00      	add	r7, sp, #0
    5eba:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5ebc:	687b      	ldr	r3, [r7, #4]
    5ebe:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    5ec0:	68fb      	ldr	r3, [r7, #12]
    5ec2:	6a1b      	ldr	r3, [r3, #32]
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	d003      	beq.n	5ed0 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    5ec8:	68fb      	ldr	r3, [r7, #12]
    5eca:	6a1b      	ldr	r3, [r3, #32]
    5ecc:	68f8      	ldr	r0, [r7, #12]
    5ece:	4798      	blx	r3
	}
}
    5ed0:	bf00      	nop
    5ed2:	3710      	adds	r7, #16
    5ed4:	46bd      	mov	sp, r7
    5ed6:	bd80      	pop	{r7, pc}

00005ed8 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    5ed8:	b580      	push	{r7, lr}
    5eda:	b084      	sub	sp, #16
    5edc:	af00      	add	r7, sp, #0
    5ede:	6078      	str	r0, [r7, #4]
    5ee0:	460b      	mov	r3, r1
    5ee2:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    5ee8:	68fb      	ldr	r3, [r7, #12]
    5eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5eec:	2b00      	cmp	r3, #0
    5eee:	d005      	beq.n	5efc <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    5ef0:	68fb      	ldr	r3, [r7, #12]
    5ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5ef4:	78fa      	ldrb	r2, [r7, #3]
    5ef6:	4611      	mov	r1, r2
    5ef8:	68f8      	ldr	r0, [r7, #12]
    5efa:	4798      	blx	r3
	}
}
    5efc:	bf00      	nop
    5efe:	3710      	adds	r7, #16
    5f00:	46bd      	mov	sp, r7
    5f02:	bd80      	pop	{r7, pc}

00005f04 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    5f04:	b580      	push	{r7, lr}
    5f06:	b082      	sub	sp, #8
    5f08:	af00      	add	r7, sp, #0
    5f0a:	6078      	str	r0, [r7, #4]
    5f0c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    5f0e:	687b      	ldr	r3, [r7, #4]
    5f10:	2b00      	cmp	r3, #0
    5f12:	d004      	beq.n	5f1e <crc_sync_init+0x1a>
    5f14:	683b      	ldr	r3, [r7, #0]
    5f16:	2b00      	cmp	r3, #0
    5f18:	d001      	beq.n	5f1e <crc_sync_init+0x1a>
    5f1a:	2301      	movs	r3, #1
    5f1c:	e000      	b.n	5f20 <crc_sync_init+0x1c>
    5f1e:	2300      	movs	r3, #0
    5f20:	f003 0301 	and.w	r3, r3, #1
    5f24:	b2db      	uxtb	r3, r3
    5f26:	222b      	movs	r2, #43	; 0x2b
    5f28:	4906      	ldr	r1, [pc, #24]	; (5f44 <crc_sync_init+0x40>)
    5f2a:	4618      	mov	r0, r3
    5f2c:	4b06      	ldr	r3, [pc, #24]	; (5f48 <crc_sync_init+0x44>)
    5f2e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	6839      	ldr	r1, [r7, #0]
    5f34:	4618      	mov	r0, r3
    5f36:	4b05      	ldr	r3, [pc, #20]	; (5f4c <crc_sync_init+0x48>)
    5f38:	4798      	blx	r3
    5f3a:	4603      	mov	r3, r0
}
    5f3c:	4618      	mov	r0, r3
    5f3e:	3708      	adds	r7, #8
    5f40:	46bd      	mov	sp, r7
    5f42:	bd80      	pop	{r7, pc}
    5f44:	0001f4d4 	.word	0x0001f4d4
    5f48:	00007d91 	.word	0x00007d91
    5f4c:	00008b19 	.word	0x00008b19

00005f50 <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    5f50:	b580      	push	{r7, lr}
    5f52:	b082      	sub	sp, #8
    5f54:	af00      	add	r7, sp, #0
    5f56:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5f58:	687b      	ldr	r3, [r7, #4]
    5f5a:	2b00      	cmp	r3, #0
    5f5c:	bf14      	ite	ne
    5f5e:	2301      	movne	r3, #1
    5f60:	2300      	moveq	r3, #0
    5f62:	b2db      	uxtb	r3, r3
    5f64:	223f      	movs	r2, #63	; 0x3f
    5f66:	4906      	ldr	r1, [pc, #24]	; (5f80 <crc_sync_enable+0x30>)
    5f68:	4618      	mov	r0, r3
    5f6a:	4b06      	ldr	r3, [pc, #24]	; (5f84 <crc_sync_enable+0x34>)
    5f6c:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    5f6e:	687b      	ldr	r3, [r7, #4]
    5f70:	4618      	mov	r0, r3
    5f72:	4b05      	ldr	r3, [pc, #20]	; (5f88 <crc_sync_enable+0x38>)
    5f74:	4798      	blx	r3
    5f76:	4603      	mov	r3, r0
}
    5f78:	4618      	mov	r0, r3
    5f7a:	3708      	adds	r7, #8
    5f7c:	46bd      	mov	sp, r7
    5f7e:	bd80      	pop	{r7, pc}
    5f80:	0001f4d4 	.word	0x0001f4d4
    5f84:	00007d91 	.word	0x00007d91
    5f88:	00008b37 	.word	0x00008b37

00005f8c <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    5f8c:	b590      	push	{r4, r7, lr}
    5f8e:	b085      	sub	sp, #20
    5f90:	af00      	add	r7, sp, #0
    5f92:	60f8      	str	r0, [r7, #12]
    5f94:	60b9      	str	r1, [r7, #8]
    5f96:	607a      	str	r2, [r7, #4]
    5f98:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    5f9a:	68fb      	ldr	r3, [r7, #12]
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d00a      	beq.n	5fb6 <crc_sync_crc32+0x2a>
    5fa0:	68bb      	ldr	r3, [r7, #8]
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d007      	beq.n	5fb6 <crc_sync_crc32+0x2a>
    5fa6:	687b      	ldr	r3, [r7, #4]
    5fa8:	2b00      	cmp	r3, #0
    5faa:	d004      	beq.n	5fb6 <crc_sync_crc32+0x2a>
    5fac:	683b      	ldr	r3, [r7, #0]
    5fae:	2b00      	cmp	r3, #0
    5fb0:	d001      	beq.n	5fb6 <crc_sync_crc32+0x2a>
    5fb2:	2301      	movs	r3, #1
    5fb4:	e000      	b.n	5fb8 <crc_sync_crc32+0x2c>
    5fb6:	2300      	movs	r3, #0
    5fb8:	f003 0301 	and.w	r3, r3, #1
    5fbc:	b2db      	uxtb	r3, r3
    5fbe:	2253      	movs	r2, #83	; 0x53
    5fc0:	4907      	ldr	r1, [pc, #28]	; (5fe0 <crc_sync_crc32+0x54>)
    5fc2:	4618      	mov	r0, r3
    5fc4:	4b07      	ldr	r3, [pc, #28]	; (5fe4 <crc_sync_crc32+0x58>)
    5fc6:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    5fc8:	68f8      	ldr	r0, [r7, #12]
    5fca:	683b      	ldr	r3, [r7, #0]
    5fcc:	687a      	ldr	r2, [r7, #4]
    5fce:	68b9      	ldr	r1, [r7, #8]
    5fd0:	4c05      	ldr	r4, [pc, #20]	; (5fe8 <crc_sync_crc32+0x5c>)
    5fd2:	47a0      	blx	r4
    5fd4:	4603      	mov	r3, r0
}
    5fd6:	4618      	mov	r0, r3
    5fd8:	3714      	adds	r7, #20
    5fda:	46bd      	mov	sp, r7
    5fdc:	bd90      	pop	{r4, r7, pc}
    5fde:	bf00      	nop
    5fe0:	0001f4d4 	.word	0x0001f4d4
    5fe4:	00007d91 	.word	0x00007d91
    5fe8:	00008b4d 	.word	0x00008b4d

00005fec <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    5fec:	b590      	push	{r4, r7, lr}
    5fee:	b083      	sub	sp, #12
    5ff0:	af00      	add	r7, sp, #0
    5ff2:	4603      	mov	r3, r0
    5ff4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    5ff6:	4b07      	ldr	r3, [pc, #28]	; (6014 <delay_us+0x28>)
    5ff8:	681c      	ldr	r4, [r3, #0]
    5ffa:	88fb      	ldrh	r3, [r7, #6]
    5ffc:	4618      	mov	r0, r3
    5ffe:	4b06      	ldr	r3, [pc, #24]	; (6018 <delay_us+0x2c>)
    6000:	4798      	blx	r3
    6002:	4603      	mov	r3, r0
    6004:	4619      	mov	r1, r3
    6006:	4620      	mov	r0, r4
    6008:	4b04      	ldr	r3, [pc, #16]	; (601c <delay_us+0x30>)
    600a:	4798      	blx	r3
}
    600c:	bf00      	nop
    600e:	370c      	adds	r7, #12
    6010:	46bd      	mov	sp, r7
    6012:	bd90      	pop	{r4, r7, pc}
    6014:	200085e8 	.word	0x200085e8
    6018:	00008745 	.word	0x00008745
    601c:	000088d9 	.word	0x000088d9

00006020 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    6020:	b590      	push	{r4, r7, lr}
    6022:	b083      	sub	sp, #12
    6024:	af00      	add	r7, sp, #0
    6026:	4603      	mov	r3, r0
    6028:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    602a:	4b07      	ldr	r3, [pc, #28]	; (6048 <delay_ms+0x28>)
    602c:	681c      	ldr	r4, [r3, #0]
    602e:	88fb      	ldrh	r3, [r7, #6]
    6030:	4618      	mov	r0, r3
    6032:	4b06      	ldr	r3, [pc, #24]	; (604c <delay_ms+0x2c>)
    6034:	4798      	blx	r3
    6036:	4603      	mov	r3, r0
    6038:	4619      	mov	r1, r3
    603a:	4620      	mov	r0, r4
    603c:	4b04      	ldr	r3, [pc, #16]	; (6050 <delay_ms+0x30>)
    603e:	4798      	blx	r3
}
    6040:	bf00      	nop
    6042:	370c      	adds	r7, #12
    6044:	46bd      	mov	sp, r7
    6046:	bd90      	pop	{r4, r7, pc}
    6048:	200085e8 	.word	0x200085e8
    604c:	000088b1 	.word	0x000088b1
    6050:	000088d9 	.word	0x000088d9

00006054 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    6054:	b580      	push	{r7, lr}
    6056:	af00      	add	r7, sp, #0
	return _event_system_init();
    6058:	4b02      	ldr	r3, [pc, #8]	; (6064 <event_system_init+0x10>)
    605a:	4798      	blx	r3
    605c:	4603      	mov	r3, r0
}
    605e:	4618      	mov	r0, r3
    6060:	bd80      	pop	{r7, pc}
    6062:	bf00      	nop
    6064:	000093c1 	.word	0x000093c1

00006068 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    6068:	b580      	push	{r7, lr}
    606a:	b082      	sub	sp, #8
    606c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    606e:	2300      	movs	r3, #0
    6070:	80fb      	strh	r3, [r7, #6]
    6072:	e00e      	b.n	6092 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    6074:	88fb      	ldrh	r3, [r7, #6]
    6076:	4a0c      	ldr	r2, [pc, #48]	; (60a8 <ext_irq_init+0x40>)
    6078:	00db      	lsls	r3, r3, #3
    607a:	4413      	add	r3, r2
    607c:	f04f 32ff 	mov.w	r2, #4294967295
    6080:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    6082:	88fb      	ldrh	r3, [r7, #6]
    6084:	4a08      	ldr	r2, [pc, #32]	; (60a8 <ext_irq_init+0x40>)
    6086:	2100      	movs	r1, #0
    6088:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    608c:	88fb      	ldrh	r3, [r7, #6]
    608e:	3301      	adds	r3, #1
    6090:	80fb      	strh	r3, [r7, #6]
    6092:	88fb      	ldrh	r3, [r7, #6]
    6094:	2b06      	cmp	r3, #6
    6096:	d9ed      	bls.n	6074 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    6098:	4804      	ldr	r0, [pc, #16]	; (60ac <ext_irq_init+0x44>)
    609a:	4b05      	ldr	r3, [pc, #20]	; (60b0 <ext_irq_init+0x48>)
    609c:	4798      	blx	r3
    609e:	4603      	mov	r3, r0
}
    60a0:	4618      	mov	r0, r3
    60a2:	3708      	adds	r7, #8
    60a4:	46bd      	mov	sp, r7
    60a6:	bd80      	pop	{r7, pc}
    60a8:	200085ec 	.word	0x200085ec
    60ac:	0000620d 	.word	0x0000620d
    60b0:	00008f89 	.word	0x00008f89

000060b4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    60b4:	b580      	push	{r7, lr}
    60b6:	b086      	sub	sp, #24
    60b8:	af00      	add	r7, sp, #0
    60ba:	6078      	str	r0, [r7, #4]
    60bc:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    60be:	2300      	movs	r3, #0
    60c0:	75fb      	strb	r3, [r7, #23]
    60c2:	2300      	movs	r3, #0
    60c4:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    60c6:	2300      	movs	r3, #0
    60c8:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    60ca:	e012      	b.n	60f2 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    60cc:	7dfb      	ldrb	r3, [r7, #23]
    60ce:	4a4d      	ldr	r2, [pc, #308]	; (6204 <ext_irq_register+0x150>)
    60d0:	00db      	lsls	r3, r3, #3
    60d2:	4413      	add	r3, r2
    60d4:	685a      	ldr	r2, [r3, #4]
    60d6:	687b      	ldr	r3, [r7, #4]
    60d8:	429a      	cmp	r2, r3
    60da:	d107      	bne.n	60ec <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    60dc:	7dfb      	ldrb	r3, [r7, #23]
    60de:	4949      	ldr	r1, [pc, #292]	; (6204 <ext_irq_register+0x150>)
    60e0:	683a      	ldr	r2, [r7, #0]
    60e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    60e6:	2301      	movs	r3, #1
    60e8:	757b      	strb	r3, [r7, #21]
			break;
    60ea:	e005      	b.n	60f8 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    60ec:	7dfb      	ldrb	r3, [r7, #23]
    60ee:	3301      	adds	r3, #1
    60f0:	75fb      	strb	r3, [r7, #23]
    60f2:	7dfb      	ldrb	r3, [r7, #23]
    60f4:	2b06      	cmp	r3, #6
    60f6:	d9e9      	bls.n	60cc <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    60f8:	683b      	ldr	r3, [r7, #0]
    60fa:	2b00      	cmp	r3, #0
    60fc:	d10e      	bne.n	611c <ext_irq_register+0x68>
		if (!found) {
    60fe:	7d7b      	ldrb	r3, [r7, #21]
    6100:	f083 0301 	eor.w	r3, r3, #1
    6104:	b2db      	uxtb	r3, r3
    6106:	2b00      	cmp	r3, #0
    6108:	d002      	beq.n	6110 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    610a:	f06f 030c 	mvn.w	r3, #12
    610e:	e074      	b.n	61fa <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    6110:	2100      	movs	r1, #0
    6112:	6878      	ldr	r0, [r7, #4]
    6114:	4b3c      	ldr	r3, [pc, #240]	; (6208 <ext_irq_register+0x154>)
    6116:	4798      	blx	r3
    6118:	4603      	mov	r3, r0
    611a:	e06e      	b.n	61fa <ext_irq_register+0x146>
	}

	if (!found) {
    611c:	7d7b      	ldrb	r3, [r7, #21]
    611e:	f083 0301 	eor.w	r3, r3, #1
    6122:	b2db      	uxtb	r3, r3
    6124:	2b00      	cmp	r3, #0
    6126:	d05a      	beq.n	61de <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    6128:	2300      	movs	r3, #0
    612a:	75fb      	strb	r3, [r7, #23]
    612c:	e016      	b.n	615c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    612e:	7dfb      	ldrb	r3, [r7, #23]
    6130:	4a34      	ldr	r2, [pc, #208]	; (6204 <ext_irq_register+0x150>)
    6132:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    6136:	2b00      	cmp	r3, #0
    6138:	d10d      	bne.n	6156 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    613a:	7dfb      	ldrb	r3, [r7, #23]
    613c:	4931      	ldr	r1, [pc, #196]	; (6204 <ext_irq_register+0x150>)
    613e:	683a      	ldr	r2, [r7, #0]
    6140:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    6144:	7dfb      	ldrb	r3, [r7, #23]
    6146:	4a2f      	ldr	r2, [pc, #188]	; (6204 <ext_irq_register+0x150>)
    6148:	00db      	lsls	r3, r3, #3
    614a:	4413      	add	r3, r2
    614c:	687a      	ldr	r2, [r7, #4]
    614e:	605a      	str	r2, [r3, #4]
				found           = true;
    6150:	2301      	movs	r3, #1
    6152:	757b      	strb	r3, [r7, #21]
				break;
    6154:	e005      	b.n	6162 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    6156:	7dfb      	ldrb	r3, [r7, #23]
    6158:	3301      	adds	r3, #1
    615a:	75fb      	strb	r3, [r7, #23]
    615c:	7dfb      	ldrb	r3, [r7, #23]
    615e:	2b06      	cmp	r3, #6
    6160:	d9e5      	bls.n	612e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    6162:	e036      	b.n	61d2 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    6164:	7dfb      	ldrb	r3, [r7, #23]
    6166:	4a27      	ldr	r2, [pc, #156]	; (6204 <ext_irq_register+0x150>)
    6168:	00db      	lsls	r3, r3, #3
    616a:	4413      	add	r3, r2
    616c:	685a      	ldr	r2, [r3, #4]
    616e:	7dbb      	ldrb	r3, [r7, #22]
    6170:	4924      	ldr	r1, [pc, #144]	; (6204 <ext_irq_register+0x150>)
    6172:	00db      	lsls	r3, r3, #3
    6174:	440b      	add	r3, r1
    6176:	685b      	ldr	r3, [r3, #4]
    6178:	429a      	cmp	r2, r3
    617a:	d227      	bcs.n	61cc <ext_irq_register+0x118>
    617c:	7dbb      	ldrb	r3, [r7, #22]
    617e:	4a21      	ldr	r2, [pc, #132]	; (6204 <ext_irq_register+0x150>)
    6180:	00db      	lsls	r3, r3, #3
    6182:	4413      	add	r3, r2
    6184:	685b      	ldr	r3, [r3, #4]
    6186:	f1b3 3fff 	cmp.w	r3, #4294967295
    618a:	d01f      	beq.n	61cc <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    618c:	7dbb      	ldrb	r3, [r7, #22]
    618e:	491d      	ldr	r1, [pc, #116]	; (6204 <ext_irq_register+0x150>)
    6190:	f107 020c 	add.w	r2, r7, #12
    6194:	00db      	lsls	r3, r3, #3
    6196:	440b      	add	r3, r1
    6198:	e893 0003 	ldmia.w	r3, {r0, r1}
    619c:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    61a0:	7dbb      	ldrb	r3, [r7, #22]
    61a2:	7dfa      	ldrb	r2, [r7, #23]
    61a4:	4817      	ldr	r0, [pc, #92]	; (6204 <ext_irq_register+0x150>)
    61a6:	4917      	ldr	r1, [pc, #92]	; (6204 <ext_irq_register+0x150>)
    61a8:	00db      	lsls	r3, r3, #3
    61aa:	4403      	add	r3, r0
    61ac:	00d2      	lsls	r2, r2, #3
    61ae:	440a      	add	r2, r1
    61b0:	e892 0003 	ldmia.w	r2, {r0, r1}
    61b4:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    61b8:	7dfb      	ldrb	r3, [r7, #23]
    61ba:	4a12      	ldr	r2, [pc, #72]	; (6204 <ext_irq_register+0x150>)
    61bc:	00db      	lsls	r3, r3, #3
    61be:	4413      	add	r3, r2
    61c0:	f107 020c 	add.w	r2, r7, #12
    61c4:	e892 0003 	ldmia.w	r2, {r0, r1}
    61c8:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    61cc:	7dbb      	ldrb	r3, [r7, #22]
    61ce:	3301      	adds	r3, #1
    61d0:	75bb      	strb	r3, [r7, #22]
    61d2:	7dbb      	ldrb	r3, [r7, #22]
    61d4:	2b06      	cmp	r3, #6
    61d6:	d802      	bhi.n	61de <ext_irq_register+0x12a>
    61d8:	7dfb      	ldrb	r3, [r7, #23]
    61da:	2b06      	cmp	r3, #6
    61dc:	d9c2      	bls.n	6164 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    61de:	7d7b      	ldrb	r3, [r7, #21]
    61e0:	f083 0301 	eor.w	r3, r3, #1
    61e4:	b2db      	uxtb	r3, r3
    61e6:	2b00      	cmp	r3, #0
    61e8:	d002      	beq.n	61f0 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    61ea:	f06f 030c 	mvn.w	r3, #12
    61ee:	e004      	b.n	61fa <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    61f0:	2101      	movs	r1, #1
    61f2:	6878      	ldr	r0, [r7, #4]
    61f4:	4b04      	ldr	r3, [pc, #16]	; (6208 <ext_irq_register+0x154>)
    61f6:	4798      	blx	r3
    61f8:	4603      	mov	r3, r0
}
    61fa:	4618      	mov	r0, r3
    61fc:	3718      	adds	r7, #24
    61fe:	46bd      	mov	sp, r7
    6200:	bd80      	pop	{r7, pc}
    6202:	bf00      	nop
    6204:	200085ec 	.word	0x200085ec
    6208:	000090f9 	.word	0x000090f9

0000620c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    620c:	b580      	push	{r7, lr}
    620e:	b084      	sub	sp, #16
    6210:	af00      	add	r7, sp, #0
    6212:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    6214:	2300      	movs	r3, #0
    6216:	73fb      	strb	r3, [r7, #15]
    6218:	2307      	movs	r3, #7
    621a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    621c:	e02a      	b.n	6274 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    621e:	7bba      	ldrb	r2, [r7, #14]
    6220:	7bfb      	ldrb	r3, [r7, #15]
    6222:	4413      	add	r3, r2
    6224:	105b      	asrs	r3, r3, #1
    6226:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    6228:	7b7b      	ldrb	r3, [r7, #13]
    622a:	2b06      	cmp	r3, #6
    622c:	d827      	bhi.n	627e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    622e:	7b7b      	ldrb	r3, [r7, #13]
    6230:	4a16      	ldr	r2, [pc, #88]	; (628c <process_ext_irq+0x80>)
    6232:	00db      	lsls	r3, r3, #3
    6234:	4413      	add	r3, r2
    6236:	685a      	ldr	r2, [r3, #4]
    6238:	687b      	ldr	r3, [r7, #4]
    623a:	429a      	cmp	r2, r3
    623c:	d10b      	bne.n	6256 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    623e:	7b7b      	ldrb	r3, [r7, #13]
    6240:	4a12      	ldr	r2, [pc, #72]	; (628c <process_ext_irq+0x80>)
    6242:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    6246:	2b00      	cmp	r3, #0
    6248:	d01b      	beq.n	6282 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    624a:	7b7b      	ldrb	r3, [r7, #13]
    624c:	4a0f      	ldr	r2, [pc, #60]	; (628c <process_ext_irq+0x80>)
    624e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    6252:	4798      	blx	r3
			}
			return;
    6254:	e015      	b.n	6282 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    6256:	7b7b      	ldrb	r3, [r7, #13]
    6258:	4a0c      	ldr	r2, [pc, #48]	; (628c <process_ext_irq+0x80>)
    625a:	00db      	lsls	r3, r3, #3
    625c:	4413      	add	r3, r2
    625e:	685a      	ldr	r2, [r3, #4]
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	429a      	cmp	r2, r3
    6264:	d203      	bcs.n	626e <process_ext_irq+0x62>
			lower = middle + 1;
    6266:	7b7b      	ldrb	r3, [r7, #13]
    6268:	3301      	adds	r3, #1
    626a:	73fb      	strb	r3, [r7, #15]
    626c:	e002      	b.n	6274 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    626e:	7b7b      	ldrb	r3, [r7, #13]
    6270:	3b01      	subs	r3, #1
    6272:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    6274:	7bba      	ldrb	r2, [r7, #14]
    6276:	7bfb      	ldrb	r3, [r7, #15]
    6278:	429a      	cmp	r2, r3
    627a:	d2d0      	bcs.n	621e <process_ext_irq+0x12>
    627c:	e002      	b.n	6284 <process_ext_irq+0x78>
			return;
    627e:	bf00      	nop
    6280:	e000      	b.n	6284 <process_ext_irq+0x78>
			return;
    6282:	bf00      	nop
		}
	}
}
    6284:	3710      	adds	r7, #16
    6286:	46bd      	mov	sp, r7
    6288:	bd80      	pop	{r7, pc}
    628a:	bf00      	nop
    628c:	200085ec 	.word	0x200085ec

00006290 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    6290:	b580      	push	{r7, lr}
    6292:	b084      	sub	sp, #16
    6294:	af00      	add	r7, sp, #0
    6296:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    6298:	687b      	ldr	r3, [r7, #4]
    629a:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    629c:	687b      	ldr	r3, [r7, #4]
    629e:	885b      	ldrh	r3, [r3, #2]
    62a0:	b29b      	uxth	r3, r3
    62a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    62a6:	2b00      	cmp	r3, #0
    62a8:	d107      	bne.n	62ba <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    62aa:	68fb      	ldr	r3, [r7, #12]
    62ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    62ae:	2b00      	cmp	r3, #0
    62b0:	d003      	beq.n	62ba <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    62b2:	68fb      	ldr	r3, [r7, #12]
    62b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    62b6:	68f8      	ldr	r0, [r7, #12]
    62b8:	4798      	blx	r3
		}
	}
}
    62ba:	bf00      	nop
    62bc:	3710      	adds	r7, #16
    62be:	46bd      	mov	sp, r7
    62c0:	bd80      	pop	{r7, pc}

000062c2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    62c2:	b580      	push	{r7, lr}
    62c4:	b084      	sub	sp, #16
    62c6:	af00      	add	r7, sp, #0
    62c8:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    62ca:	687b      	ldr	r3, [r7, #4]
    62cc:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    62ce:	687b      	ldr	r3, [r7, #4]
    62d0:	885b      	ldrh	r3, [r3, #2]
    62d2:	b29b      	uxth	r3, r3
    62d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    62d8:	2b00      	cmp	r3, #0
    62da:	d107      	bne.n	62ec <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    62dc:	68fb      	ldr	r3, [r7, #12]
    62de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    62e0:	2b00      	cmp	r3, #0
    62e2:	d003      	beq.n	62ec <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    62e4:	68fb      	ldr	r3, [r7, #12]
    62e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    62e8:	68f8      	ldr	r0, [r7, #12]
    62ea:	4798      	blx	r3
		}
	}
}
    62ec:	bf00      	nop
    62ee:	3710      	adds	r7, #16
    62f0:	46bd      	mov	sp, r7
    62f2:	bd80      	pop	{r7, pc}

000062f4 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    62f4:	b580      	push	{r7, lr}
    62f6:	b084      	sub	sp, #16
    62f8:	af00      	add	r7, sp, #0
    62fa:	6078      	str	r0, [r7, #4]
    62fc:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    62fe:	687b      	ldr	r3, [r7, #4]
    6300:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    6302:	687b      	ldr	r3, [r7, #4]
    6304:	885b      	ldrh	r3, [r3, #2]
    6306:	b29b      	uxth	r3, r3
    6308:	f403 7380 	and.w	r3, r3, #256	; 0x100
    630c:	2b00      	cmp	r3, #0
    630e:	d108      	bne.n	6322 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    6310:	68fb      	ldr	r3, [r7, #12]
    6312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6314:	2b00      	cmp	r3, #0
    6316:	d004      	beq.n	6322 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    6318:	68fb      	ldr	r3, [r7, #12]
    631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    631c:	6839      	ldr	r1, [r7, #0]
    631e:	68f8      	ldr	r0, [r7, #12]
    6320:	4798      	blx	r3
		}
	}
}
    6322:	bf00      	nop
    6324:	3710      	adds	r7, #16
    6326:	46bd      	mov	sp, r7
    6328:	bd80      	pop	{r7, pc}
	...

0000632c <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    632c:	b580      	push	{r7, lr}
    632e:	b08a      	sub	sp, #40	; 0x28
    6330:	af00      	add	r7, sp, #0
    6332:	60f8      	str	r0, [r7, #12]
    6334:	60b9      	str	r1, [r7, #8]
    6336:	4613      	mov	r3, r2
    6338:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    633a:	68fb      	ldr	r3, [r7, #12]
    633c:	3b28      	subs	r3, #40	; 0x28
    633e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    6340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6342:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    6344:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6346:	88fb      	ldrh	r3, [r7, #6]
    6348:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    634a:	f248 0301 	movw	r3, #32769	; 0x8001
    634e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    6350:	68bb      	ldr	r3, [r7, #8]
    6352:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    6354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6356:	f107 0214 	add.w	r2, r7, #20
    635a:	4611      	mov	r1, r2
    635c:	4618      	mov	r0, r3
    635e:	4b06      	ldr	r3, [pc, #24]	; (6378 <i2c_m_async_read+0x4c>)
    6360:	4798      	blx	r3
    6362:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    6364:	6a3b      	ldr	r3, [r7, #32]
    6366:	2b00      	cmp	r3, #0
    6368:	d001      	beq.n	636e <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    636a:	6a3b      	ldr	r3, [r7, #32]
    636c:	e000      	b.n	6370 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    636e:	88fb      	ldrh	r3, [r7, #6]
}
    6370:	4618      	mov	r0, r3
    6372:	3728      	adds	r7, #40	; 0x28
    6374:	46bd      	mov	sp, r7
    6376:	bd80      	pop	{r7, pc}
    6378:	0000b7fd 	.word	0x0000b7fd

0000637c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    637c:	b580      	push	{r7, lr}
    637e:	b08a      	sub	sp, #40	; 0x28
    6380:	af00      	add	r7, sp, #0
    6382:	60f8      	str	r0, [r7, #12]
    6384:	60b9      	str	r1, [r7, #8]
    6386:	4613      	mov	r3, r2
    6388:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    638a:	68fb      	ldr	r3, [r7, #12]
    638c:	3b28      	subs	r3, #40	; 0x28
    638e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    6390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6392:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    6394:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6396:	88fb      	ldrh	r3, [r7, #6]
    6398:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    639a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    639e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    63a0:	68bb      	ldr	r3, [r7, #8]
    63a2:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    63a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63a6:	f107 0214 	add.w	r2, r7, #20
    63aa:	4611      	mov	r1, r2
    63ac:	4618      	mov	r0, r3
    63ae:	4b06      	ldr	r3, [pc, #24]	; (63c8 <i2c_m_async_write+0x4c>)
    63b0:	4798      	blx	r3
    63b2:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    63b4:	6a3b      	ldr	r3, [r7, #32]
    63b6:	2b00      	cmp	r3, #0
    63b8:	d001      	beq.n	63be <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    63ba:	6a3b      	ldr	r3, [r7, #32]
    63bc:	e000      	b.n	63c0 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    63be:	88fb      	ldrh	r3, [r7, #6]
}
    63c0:	4618      	mov	r0, r3
    63c2:	3728      	adds	r7, #40	; 0x28
    63c4:	46bd      	mov	sp, r7
    63c6:	bd80      	pop	{r7, pc}
    63c8:	0000b7fd 	.word	0x0000b7fd

000063cc <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    63cc:	b580      	push	{r7, lr}
    63ce:	b084      	sub	sp, #16
    63d0:	af00      	add	r7, sp, #0
    63d2:	6078      	str	r0, [r7, #4]
    63d4:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    63d6:	687b      	ldr	r3, [r7, #4]
    63d8:	2b00      	cmp	r3, #0
    63da:	bf14      	ite	ne
    63dc:	2301      	movne	r3, #1
    63de:	2300      	moveq	r3, #0
    63e0:	b2db      	uxtb	r3, r3
    63e2:	2289      	movs	r2, #137	; 0x89
    63e4:	4915      	ldr	r1, [pc, #84]	; (643c <i2c_m_async_init+0x70>)
    63e6:	4618      	mov	r0, r3
    63e8:	4b15      	ldr	r3, [pc, #84]	; (6440 <i2c_m_async_init+0x74>)
    63ea:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    63ec:	687b      	ldr	r3, [r7, #4]
    63ee:	6839      	ldr	r1, [r7, #0]
    63f0:	4618      	mov	r0, r3
    63f2:	4b14      	ldr	r3, [pc, #80]	; (6444 <i2c_m_async_init+0x78>)
    63f4:	4798      	blx	r3
    63f6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    63f8:	68fb      	ldr	r3, [r7, #12]
    63fa:	2b00      	cmp	r3, #0
    63fc:	d001      	beq.n	6402 <i2c_m_async_init+0x36>
		return init_status;
    63fe:	68fb      	ldr	r3, [r7, #12]
    6400:	e018      	b.n	6434 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    6402:	687b      	ldr	r3, [r7, #4]
    6404:	4a10      	ldr	r2, [pc, #64]	; (6448 <i2c_m_async_init+0x7c>)
    6406:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    6408:	687b      	ldr	r3, [r7, #4]
    640a:	4a10      	ldr	r2, [pc, #64]	; (644c <i2c_m_async_init+0x80>)
    640c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	4a0f      	ldr	r2, [pc, #60]	; (6450 <i2c_m_async_init+0x84>)
    6412:	2101      	movs	r1, #1
    6414:	4618      	mov	r0, r3
    6416:	4b0f      	ldr	r3, [pc, #60]	; (6454 <i2c_m_async_init+0x88>)
    6418:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	4a0e      	ldr	r2, [pc, #56]	; (6458 <i2c_m_async_init+0x8c>)
    641e:	2102      	movs	r1, #2
    6420:	4618      	mov	r0, r3
    6422:	4b0c      	ldr	r3, [pc, #48]	; (6454 <i2c_m_async_init+0x88>)
    6424:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    6426:	687b      	ldr	r3, [r7, #4]
    6428:	4a0c      	ldr	r2, [pc, #48]	; (645c <i2c_m_async_init+0x90>)
    642a:	2100      	movs	r1, #0
    642c:	4618      	mov	r0, r3
    642e:	4b09      	ldr	r3, [pc, #36]	; (6454 <i2c_m_async_init+0x88>)
    6430:	4798      	blx	r3

	return ERR_NONE;
    6432:	2300      	movs	r3, #0
}
    6434:	4618      	mov	r0, r3
    6436:	3710      	adds	r7, #16
    6438:	46bd      	mov	sp, r7
    643a:	bd80      	pop	{r7, pc}
    643c:	0001f4f0 	.word	0x0001f4f0
    6440:	00007d91 	.word	0x00007d91
    6444:	0000b64d 	.word	0x0000b64d
    6448:	0000632d 	.word	0x0000632d
    644c:	0000637d 	.word	0x0000637d
    6450:	00006291 	.word	0x00006291
    6454:	0000b8d1 	.word	0x0000b8d1
    6458:	000062c3 	.word	0x000062c3
    645c:	000062f5 	.word	0x000062f5

00006460 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    6460:	b580      	push	{r7, lr}
    6462:	b084      	sub	sp, #16
    6464:	af00      	add	r7, sp, #0
    6466:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    6468:	687b      	ldr	r3, [r7, #4]
    646a:	2b00      	cmp	r3, #0
    646c:	bf14      	ite	ne
    646e:	2301      	movne	r3, #1
    6470:	2300      	moveq	r3, #0
    6472:	b2db      	uxtb	r3, r3
    6474:	22b9      	movs	r2, #185	; 0xb9
    6476:	4911      	ldr	r1, [pc, #68]	; (64bc <i2c_m_async_enable+0x5c>)
    6478:	4618      	mov	r0, r3
    647a:	4b11      	ldr	r3, [pc, #68]	; (64c0 <i2c_m_async_enable+0x60>)
    647c:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    647e:	687b      	ldr	r3, [r7, #4]
    6480:	4618      	mov	r0, r3
    6482:	4b10      	ldr	r3, [pc, #64]	; (64c4 <i2c_m_async_enable+0x64>)
    6484:	4798      	blx	r3
    6486:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    6488:	68fb      	ldr	r3, [r7, #12]
    648a:	2b00      	cmp	r3, #0
    648c:	d111      	bne.n	64b2 <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    648e:	687b      	ldr	r3, [r7, #4]
    6490:	2201      	movs	r2, #1
    6492:	2101      	movs	r1, #1
    6494:	4618      	mov	r0, r3
    6496:	4b0c      	ldr	r3, [pc, #48]	; (64c8 <i2c_m_async_enable+0x68>)
    6498:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    649a:	687b      	ldr	r3, [r7, #4]
    649c:	2201      	movs	r2, #1
    649e:	2102      	movs	r1, #2
    64a0:	4618      	mov	r0, r3
    64a2:	4b09      	ldr	r3, [pc, #36]	; (64c8 <i2c_m_async_enable+0x68>)
    64a4:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    64a6:	687b      	ldr	r3, [r7, #4]
    64a8:	2201      	movs	r2, #1
    64aa:	2100      	movs	r1, #0
    64ac:	4618      	mov	r0, r3
    64ae:	4b06      	ldr	r3, [pc, #24]	; (64c8 <i2c_m_async_enable+0x68>)
    64b0:	4798      	blx	r3
	}
	return rc;
    64b2:	68fb      	ldr	r3, [r7, #12]
}
    64b4:	4618      	mov	r0, r3
    64b6:	3710      	adds	r7, #16
    64b8:	46bd      	mov	sp, r7
    64ba:	bd80      	pop	{r7, pc}
    64bc:	0001f4f0 	.word	0x0001f4f0
    64c0:	00007d91 	.word	0x00007d91
    64c4:	0000b5e9 	.word	0x0000b5e9
    64c8:	0000b95d 	.word	0x0000b95d

000064cc <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    64cc:	b480      	push	{r7}
    64ce:	b085      	sub	sp, #20
    64d0:	af00      	add	r7, sp, #0
    64d2:	60f8      	str	r0, [r7, #12]
    64d4:	460b      	mov	r3, r1
    64d6:	607a      	str	r2, [r7, #4]
    64d8:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    64da:	897b      	ldrh	r3, [r7, #10]
    64dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    64e0:	b21a      	sxth	r2, r3
    64e2:	687b      	ldr	r3, [r7, #4]
    64e4:	b21b      	sxth	r3, r3
    64e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    64ea:	b21b      	sxth	r3, r3
    64ec:	4313      	orrs	r3, r2
    64ee:	b21b      	sxth	r3, r3
    64f0:	b29a      	uxth	r2, r3
    64f2:	68fb      	ldr	r3, [r7, #12]
    64f4:	879a      	strh	r2, [r3, #60]	; 0x3c
    64f6:	68fb      	ldr	r3, [r7, #12]
    64f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    64fa:	4618      	mov	r0, r3
    64fc:	3714      	adds	r7, #20
    64fe:	46bd      	mov	sp, r7
    6500:	f85d 7b04 	ldr.w	r7, [sp], #4
    6504:	4770      	bx	lr

00006506 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    6506:	b480      	push	{r7}
    6508:	b085      	sub	sp, #20
    650a:	af00      	add	r7, sp, #0
    650c:	60f8      	str	r0, [r7, #12]
    650e:	460b      	mov	r3, r1
    6510:	607a      	str	r2, [r7, #4]
    6512:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6514:	7afb      	ldrb	r3, [r7, #11]
    6516:	2b01      	cmp	r3, #1
    6518:	d007      	beq.n	652a <i2c_m_async_register_callback+0x24>
    651a:	2b02      	cmp	r3, #2
    651c:	d009      	beq.n	6532 <i2c_m_async_register_callback+0x2c>
    651e:	2b00      	cmp	r3, #0
    6520:	d10b      	bne.n	653a <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    6522:	68fb      	ldr	r3, [r7, #12]
    6524:	687a      	ldr	r2, [r7, #4]
    6526:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    6528:	e00a      	b.n	6540 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    652a:	68fb      	ldr	r3, [r7, #12]
    652c:	687a      	ldr	r2, [r7, #4]
    652e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    6530:	e006      	b.n	6540 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    6532:	68fb      	ldr	r3, [r7, #12]
    6534:	687a      	ldr	r2, [r7, #4]
    6536:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    6538:	e002      	b.n	6540 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    653a:	f06f 030c 	mvn.w	r3, #12
    653e:	e000      	b.n	6542 <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    6540:	2300      	movs	r3, #0
}
    6542:	4618      	mov	r0, r3
    6544:	3714      	adds	r7, #20
    6546:	46bd      	mov	sp, r7
    6548:	f85d 7b04 	ldr.w	r7, [sp], #4
    654c:	4770      	bx	lr

0000654e <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    654e:	b480      	push	{r7}
    6550:	b083      	sub	sp, #12
    6552:	af00      	add	r7, sp, #0
    6554:	6078      	str	r0, [r7, #4]
    6556:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    6558:	687b      	ldr	r3, [r7, #4]
    655a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    655e:	683b      	ldr	r3, [r7, #0]
    6560:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    6562:	2300      	movs	r3, #0
}
    6564:	4618      	mov	r0, r3
    6566:	370c      	adds	r7, #12
    6568:	46bd      	mov	sp, r7
    656a:	f85d 7b04 	ldr.w	r7, [sp], #4
    656e:	4770      	bx	lr

00006570 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    6570:	b580      	push	{r7, lr}
    6572:	b08a      	sub	sp, #40	; 0x28
    6574:	af00      	add	r7, sp, #0
    6576:	60f8      	str	r0, [r7, #12]
    6578:	60b9      	str	r1, [r7, #8]
    657a:	4613      	mov	r3, r2
    657c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	3b14      	subs	r3, #20
    6582:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6586:	8b9b      	ldrh	r3, [r3, #28]
    6588:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    658a:	88fb      	ldrh	r3, [r7, #6]
    658c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    658e:	f248 0301 	movw	r3, #32769	; 0x8001
    6592:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    6594:	68bb      	ldr	r3, [r7, #8]
    6596:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    659a:	f107 0214 	add.w	r2, r7, #20
    659e:	4611      	mov	r1, r2
    65a0:	4618      	mov	r0, r3
    65a2:	4b06      	ldr	r3, [pc, #24]	; (65bc <i2c_m_sync_read+0x4c>)
    65a4:	4798      	blx	r3
    65a6:	6238      	str	r0, [r7, #32]

	if (ret) {
    65a8:	6a3b      	ldr	r3, [r7, #32]
    65aa:	2b00      	cmp	r3, #0
    65ac:	d001      	beq.n	65b2 <i2c_m_sync_read+0x42>
		return ret;
    65ae:	6a3b      	ldr	r3, [r7, #32]
    65b0:	e000      	b.n	65b4 <i2c_m_sync_read+0x44>
	}

	return n;
    65b2:	88fb      	ldrh	r3, [r7, #6]
}
    65b4:	4618      	mov	r0, r3
    65b6:	3728      	adds	r7, #40	; 0x28
    65b8:	46bd      	mov	sp, r7
    65ba:	bd80      	pop	{r7, pc}
    65bc:	0000bb3d 	.word	0x0000bb3d

000065c0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    65c0:	b580      	push	{r7, lr}
    65c2:	b08a      	sub	sp, #40	; 0x28
    65c4:	af00      	add	r7, sp, #0
    65c6:	60f8      	str	r0, [r7, #12]
    65c8:	60b9      	str	r1, [r7, #8]
    65ca:	4613      	mov	r3, r2
    65cc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    65ce:	68fb      	ldr	r3, [r7, #12]
    65d0:	3b14      	subs	r3, #20
    65d2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    65d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    65d6:	8b9b      	ldrh	r3, [r3, #28]
    65d8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    65da:	88fb      	ldrh	r3, [r7, #6]
    65dc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    65de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    65e2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    65e4:	68bb      	ldr	r3, [r7, #8]
    65e6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    65e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    65ea:	f107 0214 	add.w	r2, r7, #20
    65ee:	4611      	mov	r1, r2
    65f0:	4618      	mov	r0, r3
    65f2:	4b06      	ldr	r3, [pc, #24]	; (660c <i2c_m_sync_write+0x4c>)
    65f4:	4798      	blx	r3
    65f6:	6238      	str	r0, [r7, #32]

	if (ret) {
    65f8:	6a3b      	ldr	r3, [r7, #32]
    65fa:	2b00      	cmp	r3, #0
    65fc:	d001      	beq.n	6602 <i2c_m_sync_write+0x42>
		return ret;
    65fe:	6a3b      	ldr	r3, [r7, #32]
    6600:	e000      	b.n	6604 <i2c_m_sync_write+0x44>
	}

	return n;
    6602:	88fb      	ldrh	r3, [r7, #6]
}
    6604:	4618      	mov	r0, r3
    6606:	3728      	adds	r7, #40	; 0x28
    6608:	46bd      	mov	sp, r7
    660a:	bd80      	pop	{r7, pc}
    660c:	0000bb3d 	.word	0x0000bb3d

00006610 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    6610:	b580      	push	{r7, lr}
    6612:	b084      	sub	sp, #16
    6614:	af00      	add	r7, sp, #0
    6616:	6078      	str	r0, [r7, #4]
    6618:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    661a:	687b      	ldr	r3, [r7, #4]
    661c:	2b00      	cmp	r3, #0
    661e:	bf14      	ite	ne
    6620:	2301      	movne	r3, #1
    6622:	2300      	moveq	r3, #0
    6624:	b2db      	uxtb	r3, r3
    6626:	225e      	movs	r2, #94	; 0x5e
    6628:	490c      	ldr	r1, [pc, #48]	; (665c <i2c_m_sync_init+0x4c>)
    662a:	4618      	mov	r0, r3
    662c:	4b0c      	ldr	r3, [pc, #48]	; (6660 <i2c_m_sync_init+0x50>)
    662e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    6630:	687b      	ldr	r3, [r7, #4]
    6632:	6839      	ldr	r1, [r7, #0]
    6634:	4618      	mov	r0, r3
    6636:	4b0b      	ldr	r3, [pc, #44]	; (6664 <i2c_m_sync_init+0x54>)
    6638:	4798      	blx	r3
    663a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    663c:	68fb      	ldr	r3, [r7, #12]
    663e:	2b00      	cmp	r3, #0
    6640:	d001      	beq.n	6646 <i2c_m_sync_init+0x36>
		return init_status;
    6642:	68fb      	ldr	r3, [r7, #12]
    6644:	e006      	b.n	6654 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    6646:	687b      	ldr	r3, [r7, #4]
    6648:	4a07      	ldr	r2, [pc, #28]	; (6668 <i2c_m_sync_init+0x58>)
    664a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    664c:	687b      	ldr	r3, [r7, #4]
    664e:	4a07      	ldr	r2, [pc, #28]	; (666c <i2c_m_sync_init+0x5c>)
    6650:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    6652:	2300      	movs	r3, #0
}
    6654:	4618      	mov	r0, r3
    6656:	3710      	adds	r7, #16
    6658:	46bd      	mov	sp, r7
    665a:	bd80      	pop	{r7, pc}
    665c:	0001f510 	.word	0x0001f510
    6660:	00007d91 	.word	0x00007d91
    6664:	0000b915 	.word	0x0000b915
    6668:	00006571 	.word	0x00006571
    666c:	000065c1 	.word	0x000065c1

00006670 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    6670:	b580      	push	{r7, lr}
    6672:	b084      	sub	sp, #16
    6674:	af00      	add	r7, sp, #0
    6676:	60f8      	str	r0, [r7, #12]
    6678:	60b9      	str	r1, [r7, #8]
    667a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    667c:	68fb      	ldr	r3, [r7, #12]
    667e:	2b00      	cmp	r3, #0
    6680:	d004      	beq.n	668c <pwm_init+0x1c>
    6682:	68bb      	ldr	r3, [r7, #8]
    6684:	2b00      	cmp	r3, #0
    6686:	d001      	beq.n	668c <pwm_init+0x1c>
    6688:	2301      	movs	r3, #1
    668a:	e000      	b.n	668e <pwm_init+0x1e>
    668c:	2300      	movs	r3, #0
    668e:	f003 0301 	and.w	r3, r3, #1
    6692:	b2db      	uxtb	r3, r3
    6694:	2233      	movs	r2, #51	; 0x33
    6696:	490a      	ldr	r1, [pc, #40]	; (66c0 <pwm_init+0x50>)
    6698:	4618      	mov	r0, r3
    669a:	4b0a      	ldr	r3, [pc, #40]	; (66c4 <pwm_init+0x54>)
    669c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    669e:	68fb      	ldr	r3, [r7, #12]
    66a0:	68b9      	ldr	r1, [r7, #8]
    66a2:	4618      	mov	r0, r3
    66a4:	4b08      	ldr	r3, [pc, #32]	; (66c8 <pwm_init+0x58>)
    66a6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    66a8:	68fb      	ldr	r3, [r7, #12]
    66aa:	4a08      	ldr	r2, [pc, #32]	; (66cc <pwm_init+0x5c>)
    66ac:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    66ae:	68fb      	ldr	r3, [r7, #12]
    66b0:	4a07      	ldr	r2, [pc, #28]	; (66d0 <pwm_init+0x60>)
    66b2:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    66b4:	2300      	movs	r3, #0
}
    66b6:	4618      	mov	r0, r3
    66b8:	3710      	adds	r7, #16
    66ba:	46bd      	mov	sp, r7
    66bc:	bd80      	pop	{r7, pc}
    66be:	bf00      	nop
    66c0:	0001f52c 	.word	0x0001f52c
    66c4:	00007d91 	.word	0x00007d91
    66c8:	0000d059 	.word	0x0000d059
    66cc:	00006729 	.word	0x00006729
    66d0:	0000674d 	.word	0x0000674d

000066d4 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    66d4:	b580      	push	{r7, lr}
    66d6:	b082      	sub	sp, #8
    66d8:	af00      	add	r7, sp, #0
    66da:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    66dc:	687b      	ldr	r3, [r7, #4]
    66de:	2b00      	cmp	r3, #0
    66e0:	bf14      	ite	ne
    66e2:	2301      	movne	r3, #1
    66e4:	2300      	moveq	r3, #0
    66e6:	b2db      	uxtb	r3, r3
    66e8:	224a      	movs	r2, #74	; 0x4a
    66ea:	490b      	ldr	r1, [pc, #44]	; (6718 <pwm_enable+0x44>)
    66ec:	4618      	mov	r0, r3
    66ee:	4b0b      	ldr	r3, [pc, #44]	; (671c <pwm_enable+0x48>)
    66f0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    66f2:	687b      	ldr	r3, [r7, #4]
    66f4:	4618      	mov	r0, r3
    66f6:	4b0a      	ldr	r3, [pc, #40]	; (6720 <pwm_enable+0x4c>)
    66f8:	4798      	blx	r3
    66fa:	4603      	mov	r3, r0
    66fc:	2b00      	cmp	r3, #0
    66fe:	d002      	beq.n	6706 <pwm_enable+0x32>
		return ERR_DENIED;
    6700:	f06f 0310 	mvn.w	r3, #16
    6704:	e004      	b.n	6710 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    6706:	687b      	ldr	r3, [r7, #4]
    6708:	4618      	mov	r0, r3
    670a:	4b06      	ldr	r3, [pc, #24]	; (6724 <pwm_enable+0x50>)
    670c:	4798      	blx	r3

	return ERR_NONE;
    670e:	2300      	movs	r3, #0
}
    6710:	4618      	mov	r0, r3
    6712:	3708      	adds	r7, #8
    6714:	46bd      	mov	sp, r7
    6716:	bd80      	pop	{r7, pc}
    6718:	0001f52c 	.word	0x0001f52c
    671c:	00007d91 	.word	0x00007d91
    6720:	0000d2f5 	.word	0x0000d2f5
    6724:	0000d295 	.word	0x0000d295

00006728 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    6728:	b580      	push	{r7, lr}
    672a:	b084      	sub	sp, #16
    672c:	af00      	add	r7, sp, #0
    672e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    6730:	687b      	ldr	r3, [r7, #4]
    6732:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    6734:	68fb      	ldr	r3, [r7, #12]
    6736:	695b      	ldr	r3, [r3, #20]
    6738:	2b00      	cmp	r3, #0
    673a:	d003      	beq.n	6744 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    673c:	68fb      	ldr	r3, [r7, #12]
    673e:	695b      	ldr	r3, [r3, #20]
    6740:	68f8      	ldr	r0, [r7, #12]
    6742:	4798      	blx	r3
	}
}
    6744:	bf00      	nop
    6746:	3710      	adds	r7, #16
    6748:	46bd      	mov	sp, r7
    674a:	bd80      	pop	{r7, pc}

0000674c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    674c:	b580      	push	{r7, lr}
    674e:	b084      	sub	sp, #16
    6750:	af00      	add	r7, sp, #0
    6752:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    6754:	687b      	ldr	r3, [r7, #4]
    6756:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    6758:	68fb      	ldr	r3, [r7, #12]
    675a:	699b      	ldr	r3, [r3, #24]
    675c:	2b00      	cmp	r3, #0
    675e:	d003      	beq.n	6768 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    6760:	68fb      	ldr	r3, [r7, #12]
    6762:	699b      	ldr	r3, [r3, #24]
    6764:	68f8      	ldr	r0, [r7, #12]
    6766:	4798      	blx	r3
	}
}
    6768:	bf00      	nop
    676a:	3710      	adds	r7, #16
    676c:	46bd      	mov	sp, r7
    676e:	bd80      	pop	{r7, pc}

00006770 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    6770:	b580      	push	{r7, lr}
    6772:	b082      	sub	sp, #8
    6774:	af00      	add	r7, sp, #0
    6776:	6078      	str	r0, [r7, #4]
    6778:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    677a:	687b      	ldr	r3, [r7, #4]
    677c:	2b00      	cmp	r3, #0
    677e:	d004      	beq.n	678a <qspi_sync_init+0x1a>
    6780:	683b      	ldr	r3, [r7, #0]
    6782:	2b00      	cmp	r3, #0
    6784:	d001      	beq.n	678a <qspi_sync_init+0x1a>
    6786:	2301      	movs	r3, #1
    6788:	e000      	b.n	678c <qspi_sync_init+0x1c>
    678a:	2300      	movs	r3, #0
    678c:	f003 0301 	and.w	r3, r3, #1
    6790:	b2db      	uxtb	r3, r3
    6792:	2231      	movs	r2, #49	; 0x31
    6794:	4906      	ldr	r1, [pc, #24]	; (67b0 <qspi_sync_init+0x40>)
    6796:	4618      	mov	r0, r3
    6798:	4b06      	ldr	r3, [pc, #24]	; (67b4 <qspi_sync_init+0x44>)
    679a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    679c:	687b      	ldr	r3, [r7, #4]
    679e:	6839      	ldr	r1, [r7, #0]
    67a0:	4618      	mov	r0, r3
    67a2:	4b05      	ldr	r3, [pc, #20]	; (67b8 <qspi_sync_init+0x48>)
    67a4:	4798      	blx	r3
    67a6:	4603      	mov	r3, r0
}
    67a8:	4618      	mov	r0, r3
    67aa:	3708      	adds	r7, #8
    67ac:	46bd      	mov	sp, r7
    67ae:	bd80      	pop	{r7, pc}
    67b0:	0001f544 	.word	0x0001f544
    67b4:	00007d91 	.word	0x00007d91
    67b8:	0000a295 	.word	0x0000a295

000067bc <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    67bc:	b580      	push	{r7, lr}
    67be:	b082      	sub	sp, #8
    67c0:	af00      	add	r7, sp, #0
    67c2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    67c4:	687b      	ldr	r3, [r7, #4]
    67c6:	2b00      	cmp	r3, #0
    67c8:	bf14      	ite	ne
    67ca:	2301      	movne	r3, #1
    67cc:	2300      	moveq	r3, #0
    67ce:	b2db      	uxtb	r3, r3
    67d0:	223f      	movs	r2, #63	; 0x3f
    67d2:	4906      	ldr	r1, [pc, #24]	; (67ec <qspi_sync_enable+0x30>)
    67d4:	4618      	mov	r0, r3
    67d6:	4b06      	ldr	r3, [pc, #24]	; (67f0 <qspi_sync_enable+0x34>)
    67d8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    67da:	687b      	ldr	r3, [r7, #4]
    67dc:	4618      	mov	r0, r3
    67de:	4b05      	ldr	r3, [pc, #20]	; (67f4 <qspi_sync_enable+0x38>)
    67e0:	4798      	blx	r3
    67e2:	4603      	mov	r3, r0
}
    67e4:	4618      	mov	r0, r3
    67e6:	3708      	adds	r7, #8
    67e8:	46bd      	mov	sp, r7
    67ea:	bd80      	pop	{r7, pc}
    67ec:	0001f544 	.word	0x0001f544
    67f0:	00007d91 	.word	0x00007d91
    67f4:	0000a309 	.word	0x0000a309

000067f8 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    67f8:	b580      	push	{r7, lr}
    67fa:	b082      	sub	sp, #8
    67fc:	af00      	add	r7, sp, #0
    67fe:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    6800:	687b      	ldr	r3, [r7, #4]
    6802:	2b00      	cmp	r3, #0
    6804:	bf14      	ite	ne
    6806:	2301      	movne	r3, #1
    6808:	2300      	moveq	r3, #0
    680a:	b2db      	uxtb	r3, r3
    680c:	2246      	movs	r2, #70	; 0x46
    680e:	4906      	ldr	r1, [pc, #24]	; (6828 <qspi_sync_disable+0x30>)
    6810:	4618      	mov	r0, r3
    6812:	4b06      	ldr	r3, [pc, #24]	; (682c <qspi_sync_disable+0x34>)
    6814:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    6816:	687b      	ldr	r3, [r7, #4]
    6818:	4618      	mov	r0, r3
    681a:	4b05      	ldr	r3, [pc, #20]	; (6830 <qspi_sync_disable+0x38>)
    681c:	4798      	blx	r3
    681e:	4603      	mov	r3, r0
}
    6820:	4618      	mov	r0, r3
    6822:	3708      	adds	r7, #8
    6824:	46bd      	mov	sp, r7
    6826:	bd80      	pop	{r7, pc}
    6828:	0001f544 	.word	0x0001f544
    682c:	00007d91 	.word	0x00007d91
    6830:	0000a32d 	.word	0x0000a32d

00006834 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    6834:	b580      	push	{r7, lr}
    6836:	b082      	sub	sp, #8
    6838:	af00      	add	r7, sp, #0
    683a:	6078      	str	r0, [r7, #4]
    683c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    683e:	687b      	ldr	r3, [r7, #4]
    6840:	2b00      	cmp	r3, #0
    6842:	d004      	beq.n	684e <qspi_sync_serial_run_command+0x1a>
    6844:	683b      	ldr	r3, [r7, #0]
    6846:	2b00      	cmp	r3, #0
    6848:	d001      	beq.n	684e <qspi_sync_serial_run_command+0x1a>
    684a:	2301      	movs	r3, #1
    684c:	e000      	b.n	6850 <qspi_sync_serial_run_command+0x1c>
    684e:	2300      	movs	r3, #0
    6850:	f003 0301 	and.w	r3, r3, #1
    6854:	b2db      	uxtb	r3, r3
    6856:	224d      	movs	r2, #77	; 0x4d
    6858:	4906      	ldr	r1, [pc, #24]	; (6874 <qspi_sync_serial_run_command+0x40>)
    685a:	4618      	mov	r0, r3
    685c:	4b06      	ldr	r3, [pc, #24]	; (6878 <qspi_sync_serial_run_command+0x44>)
    685e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    6860:	687b      	ldr	r3, [r7, #4]
    6862:	6839      	ldr	r1, [r7, #0]
    6864:	4618      	mov	r0, r3
    6866:	4b05      	ldr	r3, [pc, #20]	; (687c <qspi_sync_serial_run_command+0x48>)
    6868:	4798      	blx	r3
    686a:	4603      	mov	r3, r0
}
    686c:	4618      	mov	r0, r3
    686e:	3708      	adds	r7, #8
    6870:	46bd      	mov	sp, r7
    6872:	bd80      	pop	{r7, pc}
    6874:	0001f544 	.word	0x0001f544
    6878:	00007d91 	.word	0x00007d91
    687c:	0000a479 	.word	0x0000a479

00006880 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    6880:	b580      	push	{r7, lr}
    6882:	b084      	sub	sp, #16
    6884:	af00      	add	r7, sp, #0
    6886:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	3b04      	subs	r3, #4
    688c:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    688e:	687b      	ldr	r3, [r7, #4]
    6890:	791b      	ldrb	r3, [r3, #4]
    6892:	2b01      	cmp	r3, #1
    6894:	d80e      	bhi.n	68b4 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    6896:	68fb      	ldr	r3, [r7, #12]
    6898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    689a:	68fb      	ldr	r3, [r7, #12]
    689c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    689e:	1c58      	adds	r0, r3, #1
    68a0:	68f9      	ldr	r1, [r7, #12]
    68a2:	6448      	str	r0, [r1, #68]	; 0x44
    68a4:	4413      	add	r3, r2
    68a6:	781b      	ldrb	r3, [r3, #0]
    68a8:	b29b      	uxth	r3, r3
    68aa:	4619      	mov	r1, r3
    68ac:	6878      	ldr	r0, [r7, #4]
    68ae:	4b11      	ldr	r3, [pc, #68]	; (68f4 <_spi_dev_tx+0x74>)
    68b0:	4798      	blx	r3
    68b2:	e00d      	b.n	68d0 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    68b4:	68fb      	ldr	r3, [r7, #12]
    68b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    68b8:	68fb      	ldr	r3, [r7, #12]
    68ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    68bc:	1c58      	adds	r0, r3, #1
    68be:	68f9      	ldr	r1, [r7, #12]
    68c0:	6448      	str	r0, [r1, #68]	; 0x44
    68c2:	005b      	lsls	r3, r3, #1
    68c4:	4413      	add	r3, r2
    68c6:	881b      	ldrh	r3, [r3, #0]
    68c8:	4619      	mov	r1, r3
    68ca:	6878      	ldr	r0, [r7, #4]
    68cc:	4b09      	ldr	r3, [pc, #36]	; (68f4 <_spi_dev_tx+0x74>)
    68ce:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    68d0:	68fb      	ldr	r3, [r7, #12]
    68d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    68d4:	68fb      	ldr	r3, [r7, #12]
    68d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    68d8:	429a      	cmp	r2, r3
    68da:	d107      	bne.n	68ec <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    68dc:	2100      	movs	r1, #0
    68de:	6878      	ldr	r0, [r7, #4]
    68e0:	4b05      	ldr	r3, [pc, #20]	; (68f8 <_spi_dev_tx+0x78>)
    68e2:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    68e4:	2101      	movs	r1, #1
    68e6:	6878      	ldr	r0, [r7, #4]
    68e8:	4b04      	ldr	r3, [pc, #16]	; (68fc <_spi_dev_tx+0x7c>)
    68ea:	4798      	blx	r3
	}
}
    68ec:	bf00      	nop
    68ee:	3710      	adds	r7, #16
    68f0:	46bd      	mov	sp, r7
    68f2:	bd80      	pop	{r7, pc}
    68f4:	0000c8b9 	.word	0x0000c8b9
    68f8:	0000c77d 	.word	0x0000c77d
    68fc:	0000c851 	.word	0x0000c851

00006900 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    6900:	b590      	push	{r4, r7, lr}
    6902:	b085      	sub	sp, #20
    6904:	af00      	add	r7, sp, #0
    6906:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    6908:	687b      	ldr	r3, [r7, #4]
    690a:	3b04      	subs	r3, #4
    690c:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    690e:	68fb      	ldr	r3, [r7, #12]
    6910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6912:	2b00      	cmp	r3, #0
    6914:	d021      	beq.n	695a <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    6916:	687b      	ldr	r3, [r7, #4]
    6918:	791b      	ldrb	r3, [r3, #4]
    691a:	2b01      	cmp	r3, #1
    691c:	d80e      	bhi.n	693c <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    691e:	68fb      	ldr	r3, [r7, #12]
    6920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    6922:	68fb      	ldr	r3, [r7, #12]
    6924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6926:	1c58      	adds	r0, r3, #1
    6928:	68f9      	ldr	r1, [r7, #12]
    692a:	6448      	str	r0, [r1, #68]	; 0x44
    692c:	18d4      	adds	r4, r2, r3
    692e:	6878      	ldr	r0, [r7, #4]
    6930:	4b2e      	ldr	r3, [pc, #184]	; (69ec <_spi_dev_rx+0xec>)
    6932:	4798      	blx	r3
    6934:	4603      	mov	r3, r0
    6936:	b2db      	uxtb	r3, r3
    6938:	7023      	strb	r3, [r4, #0]
    693a:	e016      	b.n	696a <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    693c:	68fb      	ldr	r3, [r7, #12]
    693e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    6940:	68fb      	ldr	r3, [r7, #12]
    6942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6944:	1c58      	adds	r0, r3, #1
    6946:	68f9      	ldr	r1, [r7, #12]
    6948:	6448      	str	r0, [r1, #68]	; 0x44
    694a:	005b      	lsls	r3, r3, #1
    694c:	18d4      	adds	r4, r2, r3
    694e:	6878      	ldr	r0, [r7, #4]
    6950:	4b26      	ldr	r3, [pc, #152]	; (69ec <_spi_dev_rx+0xec>)
    6952:	4798      	blx	r3
    6954:	4603      	mov	r3, r0
    6956:	8023      	strh	r3, [r4, #0]
    6958:	e007      	b.n	696a <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    695a:	6878      	ldr	r0, [r7, #4]
    695c:	4b23      	ldr	r3, [pc, #140]	; (69ec <_spi_dev_rx+0xec>)
    695e:	4798      	blx	r3
		spi->xfercnt++;
    6960:	68fb      	ldr	r3, [r7, #12]
    6962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6964:	1c5a      	adds	r2, r3, #1
    6966:	68fb      	ldr	r3, [r7, #12]
    6968:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    696a:	68fb      	ldr	r3, [r7, #12]
    696c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    696e:	68fb      	ldr	r3, [r7, #12]
    6970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6972:	429a      	cmp	r2, r3
    6974:	d226      	bcs.n	69c4 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    6976:	68fb      	ldr	r3, [r7, #12]
    6978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    697a:	2b00      	cmp	r3, #0
    697c:	d01b      	beq.n	69b6 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    697e:	687b      	ldr	r3, [r7, #4]
    6980:	791b      	ldrb	r3, [r3, #4]
    6982:	2b01      	cmp	r3, #1
    6984:	d80b      	bhi.n	699e <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    6986:	68fb      	ldr	r3, [r7, #12]
    6988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    698a:	68fb      	ldr	r3, [r7, #12]
    698c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    698e:	4413      	add	r3, r2
    6990:	781b      	ldrb	r3, [r3, #0]
    6992:	b29b      	uxth	r3, r3
    6994:	4619      	mov	r1, r3
    6996:	6878      	ldr	r0, [r7, #4]
    6998:	4b15      	ldr	r3, [pc, #84]	; (69f0 <_spi_dev_rx+0xf0>)
    699a:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    699c:	e022      	b.n	69e4 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    699e:	68fb      	ldr	r3, [r7, #12]
    69a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    69a2:	68fb      	ldr	r3, [r7, #12]
    69a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    69a6:	005b      	lsls	r3, r3, #1
    69a8:	4413      	add	r3, r2
    69aa:	881b      	ldrh	r3, [r3, #0]
    69ac:	4619      	mov	r1, r3
    69ae:	6878      	ldr	r0, [r7, #4]
    69b0:	4b0f      	ldr	r3, [pc, #60]	; (69f0 <_spi_dev_rx+0xf0>)
    69b2:	4798      	blx	r3
}
    69b4:	e016      	b.n	69e4 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    69b6:	687b      	ldr	r3, [r7, #4]
    69b8:	88db      	ldrh	r3, [r3, #6]
    69ba:	4619      	mov	r1, r3
    69bc:	6878      	ldr	r0, [r7, #4]
    69be:	4b0c      	ldr	r3, [pc, #48]	; (69f0 <_spi_dev_rx+0xf0>)
    69c0:	4798      	blx	r3
}
    69c2:	e00f      	b.n	69e4 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    69c4:	2100      	movs	r1, #0
    69c6:	6878      	ldr	r0, [r7, #4]
    69c8:	4b0a      	ldr	r3, [pc, #40]	; (69f4 <_spi_dev_rx+0xf4>)
    69ca:	4798      	blx	r3
		spi->stat = 0;
    69cc:	68fb      	ldr	r3, [r7, #12]
    69ce:	2200      	movs	r2, #0
    69d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    69d4:	68fb      	ldr	r3, [r7, #12]
    69d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    69d8:	2b00      	cmp	r3, #0
    69da:	d003      	beq.n	69e4 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    69dc:	68fb      	ldr	r3, [r7, #12]
    69de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    69e0:	68f8      	ldr	r0, [r7, #12]
    69e2:	4798      	blx	r3
}
    69e4:	bf00      	nop
    69e6:	3714      	adds	r7, #20
    69e8:	46bd      	mov	sp, r7
    69ea:	bd90      	pop	{r4, r7, pc}
    69ec:	0000c911 	.word	0x0000c911
    69f0:	0000c8b9 	.word	0x0000c8b9
    69f4:	0000c7e1 	.word	0x0000c7e1

000069f8 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    69f8:	b580      	push	{r7, lr}
    69fa:	b084      	sub	sp, #16
    69fc:	af00      	add	r7, sp, #0
    69fe:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    6a00:	687b      	ldr	r3, [r7, #4]
    6a02:	3b04      	subs	r3, #4
    6a04:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    6a06:	68fb      	ldr	r3, [r7, #12]
    6a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    6a0a:	68fb      	ldr	r3, [r7, #12]
    6a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6a0e:	429a      	cmp	r2, r3
    6a10:	d30f      	bcc.n	6a32 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    6a12:	2100      	movs	r1, #0
    6a14:	6878      	ldr	r0, [r7, #4]
    6a16:	4b09      	ldr	r3, [pc, #36]	; (6a3c <_spi_dev_complete+0x44>)
    6a18:	4798      	blx	r3
		spi->stat = 0;
    6a1a:	68fb      	ldr	r3, [r7, #12]
    6a1c:	2200      	movs	r2, #0
    6a1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    6a22:	68fb      	ldr	r3, [r7, #12]
    6a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6a26:	2b00      	cmp	r3, #0
    6a28:	d003      	beq.n	6a32 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    6a2a:	68fb      	ldr	r3, [r7, #12]
    6a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6a2e:	68f8      	ldr	r0, [r7, #12]
    6a30:	4798      	blx	r3
		}
	}
}
    6a32:	bf00      	nop
    6a34:	3710      	adds	r7, #16
    6a36:	46bd      	mov	sp, r7
    6a38:	bd80      	pop	{r7, pc}
    6a3a:	bf00      	nop
    6a3c:	0000c851 	.word	0x0000c851

00006a40 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    6a40:	b580      	push	{r7, lr}
    6a42:	b084      	sub	sp, #16
    6a44:	af00      	add	r7, sp, #0
    6a46:	6078      	str	r0, [r7, #4]
    6a48:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    6a4a:	687b      	ldr	r3, [r7, #4]
    6a4c:	3b04      	subs	r3, #4
    6a4e:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    6a50:	2100      	movs	r1, #0
    6a52:	6878      	ldr	r0, [r7, #4]
    6a54:	4b0d      	ldr	r3, [pc, #52]	; (6a8c <_spi_dev_error+0x4c>)
    6a56:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    6a58:	2100      	movs	r1, #0
    6a5a:	6878      	ldr	r0, [r7, #4]
    6a5c:	4b0c      	ldr	r3, [pc, #48]	; (6a90 <_spi_dev_error+0x50>)
    6a5e:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    6a60:	2100      	movs	r1, #0
    6a62:	6878      	ldr	r0, [r7, #4]
    6a64:	4b0b      	ldr	r3, [pc, #44]	; (6a94 <_spi_dev_error+0x54>)
    6a66:	4798      	blx	r3
	spi->stat = 0;
    6a68:	68fb      	ldr	r3, [r7, #12]
    6a6a:	2200      	movs	r2, #0
    6a6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    6a70:	68fb      	ldr	r3, [r7, #12]
    6a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6a74:	2b00      	cmp	r3, #0
    6a76:	d004      	beq.n	6a82 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    6a78:	68fb      	ldr	r3, [r7, #12]
    6a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6a7c:	6839      	ldr	r1, [r7, #0]
    6a7e:	68f8      	ldr	r0, [r7, #12]
    6a80:	4798      	blx	r3
	}
}
    6a82:	bf00      	nop
    6a84:	3710      	adds	r7, #16
    6a86:	46bd      	mov	sp, r7
    6a88:	bd80      	pop	{r7, pc}
    6a8a:	bf00      	nop
    6a8c:	0000c77d 	.word	0x0000c77d
    6a90:	0000c7e1 	.word	0x0000c7e1
    6a94:	0000c851 	.word	0x0000c851

00006a98 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    6a98:	b580      	push	{r7, lr}
    6a9a:	b084      	sub	sp, #16
    6a9c:	af00      	add	r7, sp, #0
    6a9e:	6078      	str	r0, [r7, #4]
    6aa0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    6aa2:	2300      	movs	r3, #0
    6aa4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	2b00      	cmp	r3, #0
    6aaa:	d004      	beq.n	6ab6 <spi_m_async_init+0x1e>
    6aac:	683b      	ldr	r3, [r7, #0]
    6aae:	2b00      	cmp	r3, #0
    6ab0:	d001      	beq.n	6ab6 <spi_m_async_init+0x1e>
    6ab2:	2301      	movs	r3, #1
    6ab4:	e000      	b.n	6ab8 <spi_m_async_init+0x20>
    6ab6:	2300      	movs	r3, #0
    6ab8:	f003 0301 	and.w	r3, r3, #1
    6abc:	b2db      	uxtb	r3, r3
    6abe:	22a5      	movs	r2, #165	; 0xa5
    6ac0:	491c      	ldr	r1, [pc, #112]	; (6b34 <spi_m_async_init+0x9c>)
    6ac2:	4618      	mov	r0, r3
    6ac4:	4b1c      	ldr	r3, [pc, #112]	; (6b38 <spi_m_async_init+0xa0>)
    6ac6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    6ac8:	687b      	ldr	r3, [r7, #4]
    6aca:	683a      	ldr	r2, [r7, #0]
    6acc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	3304      	adds	r3, #4
    6ad2:	6839      	ldr	r1, [r7, #0]
    6ad4:	4618      	mov	r0, r3
    6ad6:	4b19      	ldr	r3, [pc, #100]	; (6b3c <spi_m_async_init+0xa4>)
    6ad8:	4798      	blx	r3
    6ada:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    6adc:	68fb      	ldr	r3, [r7, #12]
    6ade:	2b00      	cmp	r3, #0
    6ae0:	db23      	blt.n	6b2a <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    6ae2:	687b      	ldr	r3, [r7, #4]
    6ae4:	3304      	adds	r3, #4
    6ae6:	4a16      	ldr	r2, [pc, #88]	; (6b40 <spi_m_async_init+0xa8>)
    6ae8:	2100      	movs	r1, #0
    6aea:	4618      	mov	r0, r3
    6aec:	4b15      	ldr	r3, [pc, #84]	; (6b44 <spi_m_async_init+0xac>)
    6aee:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    6af0:	687b      	ldr	r3, [r7, #4]
    6af2:	3304      	adds	r3, #4
    6af4:	4a14      	ldr	r2, [pc, #80]	; (6b48 <spi_m_async_init+0xb0>)
    6af6:	2101      	movs	r1, #1
    6af8:	4618      	mov	r0, r3
    6afa:	4b12      	ldr	r3, [pc, #72]	; (6b44 <spi_m_async_init+0xac>)
    6afc:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    6afe:	687b      	ldr	r3, [r7, #4]
    6b00:	3304      	adds	r3, #4
    6b02:	4a12      	ldr	r2, [pc, #72]	; (6b4c <spi_m_async_init+0xb4>)
    6b04:	2102      	movs	r1, #2
    6b06:	4618      	mov	r0, r3
    6b08:	4b0e      	ldr	r3, [pc, #56]	; (6b44 <spi_m_async_init+0xac>)
    6b0a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    6b0c:	687b      	ldr	r3, [r7, #4]
    6b0e:	3304      	adds	r3, #4
    6b10:	4a0f      	ldr	r2, [pc, #60]	; (6b50 <spi_m_async_init+0xb8>)
    6b12:	2103      	movs	r1, #3
    6b14:	4618      	mov	r0, r3
    6b16:	4b0b      	ldr	r3, [pc, #44]	; (6b44 <spi_m_async_init+0xac>)
    6b18:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    6b1a:	687b      	ldr	r3, [r7, #4]
    6b1c:	4a0d      	ldr	r2, [pc, #52]	; (6b54 <spi_m_async_init+0xbc>)
    6b1e:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    6b20:	687b      	ldr	r3, [r7, #4]
    6b22:	4a0d      	ldr	r2, [pc, #52]	; (6b58 <spi_m_async_init+0xc0>)
    6b24:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    6b26:	2300      	movs	r3, #0
    6b28:	e000      	b.n	6b2c <spi_m_async_init+0x94>
		return rc;
    6b2a:	68fb      	ldr	r3, [r7, #12]
}
    6b2c:	4618      	mov	r0, r3
    6b2e:	3710      	adds	r7, #16
    6b30:	46bd      	mov	sp, r7
    6b32:	bd80      	pop	{r7, pc}
    6b34:	0001f560 	.word	0x0001f560
    6b38:	00007d91 	.word	0x00007d91
    6b3c:	0000c38d 	.word	0x0000c38d
    6b40:	00006881 	.word	0x00006881
    6b44:	0000c961 	.word	0x0000c961
    6b48:	00006901 	.word	0x00006901
    6b4c:	000069f9 	.word	0x000069f9
    6b50:	00006a41 	.word	0x00006a41
    6b54:	00006b99 	.word	0x00006b99
    6b58:	00006c19 	.word	0x00006c19

00006b5c <spi_m_async_enable>:
	spi->callbacks.cb_error = NULL;
	spi->callbacks.cb_xfer  = NULL;
}

void spi_m_async_enable(struct spi_m_async_descriptor *spi)
{
    6b5c:	b580      	push	{r7, lr}
    6b5e:	b082      	sub	sp, #8
    6b60:	af00      	add	r7, sp, #0
    6b62:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    6b64:	687b      	ldr	r3, [r7, #4]
    6b66:	2b00      	cmp	r3, #0
    6b68:	bf14      	ite	ne
    6b6a:	2301      	movne	r3, #1
    6b6c:	2300      	moveq	r3, #0
    6b6e:	b2db      	uxtb	r3, r3
    6b70:	22c1      	movs	r2, #193	; 0xc1
    6b72:	4906      	ldr	r1, [pc, #24]	; (6b8c <spi_m_async_enable+0x30>)
    6b74:	4618      	mov	r0, r3
    6b76:	4b06      	ldr	r3, [pc, #24]	; (6b90 <spi_m_async_enable+0x34>)
    6b78:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    6b7a:	687b      	ldr	r3, [r7, #4]
    6b7c:	3304      	adds	r3, #4
    6b7e:	4618      	mov	r0, r3
    6b80:	4b04      	ldr	r3, [pc, #16]	; (6b94 <spi_m_async_enable+0x38>)
    6b82:	4798      	blx	r3
}
    6b84:	bf00      	nop
    6b86:	3708      	adds	r7, #8
    6b88:	46bd      	mov	sp, r7
    6b8a:	bd80      	pop	{r7, pc}
    6b8c:	0001f560 	.word	0x0001f560
    6b90:	00007d91 	.word	0x00007d91
    6b94:	0000c46d 	.word	0x0000c46d

00006b98 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    6b98:	b580      	push	{r7, lr}
    6b9a:	b086      	sub	sp, #24
    6b9c:	af00      	add	r7, sp, #0
    6b9e:	60f8      	str	r0, [r7, #12]
    6ba0:	60b9      	str	r1, [r7, #8]
    6ba2:	4613      	mov	r3, r2
    6ba4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6ba6:	68fb      	ldr	r3, [r7, #12]
    6ba8:	2b00      	cmp	r3, #0
    6baa:	bf14      	ite	ne
    6bac:	2301      	movne	r3, #1
    6bae:	2300      	moveq	r3, #0
    6bb0:	b2db      	uxtb	r3, r3
    6bb2:	f240 1205 	movw	r2, #261	; 0x105
    6bb6:	4914      	ldr	r1, [pc, #80]	; (6c08 <_spi_m_async_io_read+0x70>)
    6bb8:	4618      	mov	r0, r3
    6bba:	4b14      	ldr	r3, [pc, #80]	; (6c0c <_spi_m_async_io_read+0x74>)
    6bbc:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    6bbe:	68fb      	ldr	r3, [r7, #12]
    6bc0:	3b24      	subs	r3, #36	; 0x24
    6bc2:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    6bc4:	697b      	ldr	r3, [r7, #20]
    6bc6:	68ba      	ldr	r2, [r7, #8]
    6bc8:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    6bca:	697b      	ldr	r3, [r7, #20]
    6bcc:	2200      	movs	r2, #0
    6bce:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    6bd0:	88fa      	ldrh	r2, [r7, #6]
    6bd2:	697b      	ldr	r3, [r7, #20]
    6bd4:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    6bd6:	697b      	ldr	r3, [r7, #20]
    6bd8:	2200      	movs	r2, #0
    6bda:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    6bdc:	697b      	ldr	r3, [r7, #20]
    6bde:	2210      	movs	r2, #16
    6be0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    6be4:	697b      	ldr	r3, [r7, #20]
    6be6:	3304      	adds	r3, #4
    6be8:	2101      	movs	r1, #1
    6bea:	4618      	mov	r0, r3
    6bec:	4b08      	ldr	r3, [pc, #32]	; (6c10 <_spi_m_async_io_read+0x78>)
    6bee:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    6bf0:	697b      	ldr	r3, [r7, #20]
    6bf2:	3304      	adds	r3, #4
    6bf4:	f240 11ff 	movw	r1, #511	; 0x1ff
    6bf8:	4618      	mov	r0, r3
    6bfa:	4b06      	ldr	r3, [pc, #24]	; (6c14 <_spi_m_async_io_read+0x7c>)
    6bfc:	4798      	blx	r3

	return ERR_NONE;
    6bfe:	2300      	movs	r3, #0
}
    6c00:	4618      	mov	r0, r3
    6c02:	3718      	adds	r7, #24
    6c04:	46bd      	mov	sp, r7
    6c06:	bd80      	pop	{r7, pc}
    6c08:	0001f560 	.word	0x0001f560
    6c0c:	00007d91 	.word	0x00007d91
    6c10:	0000c7e1 	.word	0x0000c7e1
    6c14:	0000c8b9 	.word	0x0000c8b9

00006c18 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    6c18:	b580      	push	{r7, lr}
    6c1a:	b086      	sub	sp, #24
    6c1c:	af00      	add	r7, sp, #0
    6c1e:	60f8      	str	r0, [r7, #12]
    6c20:	60b9      	str	r1, [r7, #8]
    6c22:	4613      	mov	r3, r2
    6c24:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6c26:	68fb      	ldr	r3, [r7, #12]
    6c28:	2b00      	cmp	r3, #0
    6c2a:	bf14      	ite	ne
    6c2c:	2301      	movne	r3, #1
    6c2e:	2300      	moveq	r3, #0
    6c30:	b2db      	uxtb	r3, r3
    6c32:	f240 1227 	movw	r2, #295	; 0x127
    6c36:	4911      	ldr	r1, [pc, #68]	; (6c7c <_spi_m_async_io_write+0x64>)
    6c38:	4618      	mov	r0, r3
    6c3a:	4b11      	ldr	r3, [pc, #68]	; (6c80 <_spi_m_async_io_write+0x68>)
    6c3c:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    6c3e:	68fb      	ldr	r3, [r7, #12]
    6c40:	3b24      	subs	r3, #36	; 0x24
    6c42:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    6c44:	697b      	ldr	r3, [r7, #20]
    6c46:	2200      	movs	r2, #0
    6c48:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    6c4a:	697b      	ldr	r3, [r7, #20]
    6c4c:	68ba      	ldr	r2, [r7, #8]
    6c4e:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    6c50:	88fa      	ldrh	r2, [r7, #6]
    6c52:	697b      	ldr	r3, [r7, #20]
    6c54:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    6c56:	697b      	ldr	r3, [r7, #20]
    6c58:	2200      	movs	r2, #0
    6c5a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    6c5c:	697b      	ldr	r3, [r7, #20]
    6c5e:	2210      	movs	r2, #16
    6c60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    6c64:	697b      	ldr	r3, [r7, #20]
    6c66:	3304      	adds	r3, #4
    6c68:	2101      	movs	r1, #1
    6c6a:	4618      	mov	r0, r3
    6c6c:	4b05      	ldr	r3, [pc, #20]	; (6c84 <_spi_m_async_io_write+0x6c>)
    6c6e:	4798      	blx	r3

	return ERR_NONE;
    6c70:	2300      	movs	r3, #0
}
    6c72:	4618      	mov	r0, r3
    6c74:	3718      	adds	r7, #24
    6c76:	46bd      	mov	sp, r7
    6c78:	bd80      	pop	{r7, pc}
    6c7a:	bf00      	nop
    6c7c:	0001f560 	.word	0x0001f560
    6c80:	00007d91 	.word	0x00007d91
    6c84:	0000c77d 	.word	0x0000c77d

00006c88 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    6c88:	b580      	push	{r7, lr}
    6c8a:	b084      	sub	sp, #16
    6c8c:	af00      	add	r7, sp, #0
    6c8e:	60f8      	str	r0, [r7, #12]
    6c90:	460b      	mov	r3, r1
    6c92:	607a      	str	r2, [r7, #4]
    6c94:	72fb      	strb	r3, [r7, #11]
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    6c96:	68fb      	ldr	r3, [r7, #12]
    6c98:	2b00      	cmp	r3, #0
    6c9a:	d004      	beq.n	6ca6 <spi_m_async_register_callback+0x1e>
    6c9c:	7afb      	ldrb	r3, [r7, #11]
    6c9e:	2b01      	cmp	r3, #1
    6ca0:	d801      	bhi.n	6ca6 <spi_m_async_register_callback+0x1e>
    6ca2:	2301      	movs	r3, #1
    6ca4:	e000      	b.n	6ca8 <spi_m_async_register_callback+0x20>
    6ca6:	2300      	movs	r3, #0
    6ca8:	f003 0301 	and.w	r3, r3, #1
    6cac:	b2db      	uxtb	r3, r3
    6cae:	f240 1263 	movw	r2, #355	; 0x163
    6cb2:	490f      	ldr	r1, [pc, #60]	; (6cf0 <spi_m_async_register_callback+0x68>)
    6cb4:	4618      	mov	r0, r3
    6cb6:	4b0f      	ldr	r3, [pc, #60]	; (6cf4 <spi_m_async_register_callback+0x6c>)
    6cb8:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    6cba:	7afb      	ldrb	r3, [r7, #11]
    6cbc:	2b00      	cmp	r3, #0
    6cbe:	d103      	bne.n	6cc8 <spi_m_async_register_callback+0x40>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    6cc0:	68fb      	ldr	r3, [r7, #12]
    6cc2:	687a      	ldr	r2, [r7, #4]
    6cc4:	631a      	str	r2, [r3, #48]	; 0x30
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
	}
}
    6cc6:	e00e      	b.n	6ce6 <spi_m_async_register_callback+0x5e>
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    6cc8:	68fb      	ldr	r3, [r7, #12]
    6cca:	687a      	ldr	r2, [r7, #4]
    6ccc:	635a      	str	r2, [r3, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    6cce:	68fb      	ldr	r3, [r7, #12]
    6cd0:	1d18      	adds	r0, r3, #4
    6cd2:	687b      	ldr	r3, [r7, #4]
    6cd4:	2b00      	cmp	r3, #0
    6cd6:	bf14      	ite	ne
    6cd8:	2301      	movne	r3, #1
    6cda:	2300      	moveq	r3, #0
    6cdc:	b2db      	uxtb	r3, r3
    6cde:	461a      	mov	r2, r3
    6ce0:	2103      	movs	r1, #3
    6ce2:	4b05      	ldr	r3, [pc, #20]	; (6cf8 <spi_m_async_register_callback+0x70>)
    6ce4:	4798      	blx	r3
}
    6ce6:	bf00      	nop
    6ce8:	3710      	adds	r7, #16
    6cea:	46bd      	mov	sp, r7
    6cec:	bd80      	pop	{r7, pc}
    6cee:	bf00      	nop
    6cf0:	0001f560 	.word	0x0001f560
    6cf4:	00007d91 	.word	0x00007d91
    6cf8:	0000c9bd 	.word	0x0000c9bd

00006cfc <spi_m_async_get_io_descriptor>:

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    6cfc:	b580      	push	{r7, lr}
    6cfe:	b082      	sub	sp, #8
    6d00:	af00      	add	r7, sp, #0
    6d02:	6078      	str	r0, [r7, #4]
    6d04:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    6d06:	687b      	ldr	r3, [r7, #4]
    6d08:	2b00      	cmp	r3, #0
    6d0a:	d004      	beq.n	6d16 <spi_m_async_get_io_descriptor+0x1a>
    6d0c:	683b      	ldr	r3, [r7, #0]
    6d0e:	2b00      	cmp	r3, #0
    6d10:	d001      	beq.n	6d16 <spi_m_async_get_io_descriptor+0x1a>
    6d12:	2301      	movs	r3, #1
    6d14:	e000      	b.n	6d18 <spi_m_async_get_io_descriptor+0x1c>
    6d16:	2300      	movs	r3, #0
    6d18:	f003 0301 	and.w	r3, r3, #1
    6d1c:	b2db      	uxtb	r3, r3
    6d1e:	f240 126f 	movw	r2, #367	; 0x16f
    6d22:	4907      	ldr	r1, [pc, #28]	; (6d40 <spi_m_async_get_io_descriptor+0x44>)
    6d24:	4618      	mov	r0, r3
    6d26:	4b07      	ldr	r3, [pc, #28]	; (6d44 <spi_m_async_get_io_descriptor+0x48>)
    6d28:	4798      	blx	r3
	*io = &spi->io;
    6d2a:	687b      	ldr	r3, [r7, #4]
    6d2c:	f103 0224 	add.w	r2, r3, #36	; 0x24
    6d30:	683b      	ldr	r3, [r7, #0]
    6d32:	601a      	str	r2, [r3, #0]
	return 0;
    6d34:	2300      	movs	r3, #0
}
    6d36:	4618      	mov	r0, r3
    6d38:	3708      	adds	r7, #8
    6d3a:	46bd      	mov	sp, r7
    6d3c:	bd80      	pop	{r7, pc}
    6d3e:	bf00      	nop
    6d40:	0001f560 	.word	0x0001f560
    6d44:	00007d91 	.word	0x00007d91

00006d48 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    6d48:	b580      	push	{r7, lr}
    6d4a:	b084      	sub	sp, #16
    6d4c:	af00      	add	r7, sp, #0
    6d4e:	6078      	str	r0, [r7, #4]
    6d50:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    6d52:	2300      	movs	r3, #0
    6d54:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    6d56:	687b      	ldr	r3, [r7, #4]
    6d58:	2b00      	cmp	r3, #0
    6d5a:	d004      	beq.n	6d66 <spi_m_sync_init+0x1e>
    6d5c:	683b      	ldr	r3, [r7, #0]
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d001      	beq.n	6d66 <spi_m_sync_init+0x1e>
    6d62:	2301      	movs	r3, #1
    6d64:	e000      	b.n	6d68 <spi_m_sync_init+0x20>
    6d66:	2300      	movs	r3, #0
    6d68:	f003 0301 	and.w	r3, r3, #1
    6d6c:	b2db      	uxtb	r3, r3
    6d6e:	2240      	movs	r2, #64	; 0x40
    6d70:	4910      	ldr	r1, [pc, #64]	; (6db4 <spi_m_sync_init+0x6c>)
    6d72:	4618      	mov	r0, r3
    6d74:	4b10      	ldr	r3, [pc, #64]	; (6db8 <spi_m_sync_init+0x70>)
    6d76:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	683a      	ldr	r2, [r7, #0]
    6d7c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    6d7e:	687b      	ldr	r3, [r7, #4]
    6d80:	3304      	adds	r3, #4
    6d82:	6839      	ldr	r1, [r7, #0]
    6d84:	4618      	mov	r0, r3
    6d86:	4b0d      	ldr	r3, [pc, #52]	; (6dbc <spi_m_sync_init+0x74>)
    6d88:	4798      	blx	r3
    6d8a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    6d8c:	68fb      	ldr	r3, [r7, #12]
    6d8e:	2b00      	cmp	r3, #0
    6d90:	da01      	bge.n	6d96 <spi_m_sync_init+0x4e>
		return rc;
    6d92:	68fb      	ldr	r3, [r7, #12]
    6d94:	e00a      	b.n	6dac <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    6d96:	687b      	ldr	r3, [r7, #4]
    6d98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6d9c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    6d9e:	687b      	ldr	r3, [r7, #4]
    6da0:	4a07      	ldr	r2, [pc, #28]	; (6dc0 <spi_m_sync_init+0x78>)
    6da2:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    6da4:	687b      	ldr	r3, [r7, #4]
    6da6:	4a07      	ldr	r2, [pc, #28]	; (6dc4 <spi_m_sync_init+0x7c>)
    6da8:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    6daa:	2300      	movs	r3, #0
}
    6dac:	4618      	mov	r0, r3
    6dae:	3710      	adds	r7, #16
    6db0:	46bd      	mov	sp, r7
    6db2:	bd80      	pop	{r7, pc}
    6db4:	0001f580 	.word	0x0001f580
    6db8:	00007d91 	.word	0x00007d91
    6dbc:	0000c281 	.word	0x0000c281
    6dc0:	00006e41 	.word	0x00006e41
    6dc4:	00006e99 	.word	0x00006e99

00006dc8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    6dc8:	b580      	push	{r7, lr}
    6dca:	b082      	sub	sp, #8
    6dcc:	af00      	add	r7, sp, #0
    6dce:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    6dd0:	687b      	ldr	r3, [r7, #4]
    6dd2:	2b00      	cmp	r3, #0
    6dd4:	bf14      	ite	ne
    6dd6:	2301      	movne	r3, #1
    6dd8:	2300      	moveq	r3, #0
    6dda:	b2db      	uxtb	r3, r3
    6ddc:	2257      	movs	r2, #87	; 0x57
    6dde:	4906      	ldr	r1, [pc, #24]	; (6df8 <spi_m_sync_enable+0x30>)
    6de0:	4618      	mov	r0, r3
    6de2:	4b06      	ldr	r3, [pc, #24]	; (6dfc <spi_m_sync_enable+0x34>)
    6de4:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    6de6:	687b      	ldr	r3, [r7, #4]
    6de8:	3304      	adds	r3, #4
    6dea:	4618      	mov	r0, r3
    6dec:	4b04      	ldr	r3, [pc, #16]	; (6e00 <spi_m_sync_enable+0x38>)
    6dee:	4798      	blx	r3
}
    6df0:	bf00      	nop
    6df2:	3708      	adds	r7, #8
    6df4:	46bd      	mov	sp, r7
    6df6:	bd80      	pop	{r7, pc}
    6df8:	0001f580 	.word	0x0001f580
    6dfc:	00007d91 	.word	0x00007d91
    6e00:	0000c41d 	.word	0x0000c41d

00006e04 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    6e04:	b580      	push	{r7, lr}
    6e06:	b082      	sub	sp, #8
    6e08:	af00      	add	r7, sp, #0
    6e0a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    6e0c:	687b      	ldr	r3, [r7, #4]
    6e0e:	2b00      	cmp	r3, #0
    6e10:	bf14      	ite	ne
    6e12:	2301      	movne	r3, #1
    6e14:	2300      	moveq	r3, #0
    6e16:	b2db      	uxtb	r3, r3
    6e18:	225d      	movs	r2, #93	; 0x5d
    6e1a:	4906      	ldr	r1, [pc, #24]	; (6e34 <spi_m_sync_disable+0x30>)
    6e1c:	4618      	mov	r0, r3
    6e1e:	4b06      	ldr	r3, [pc, #24]	; (6e38 <spi_m_sync_disable+0x34>)
    6e20:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    6e22:	687b      	ldr	r3, [r7, #4]
    6e24:	3304      	adds	r3, #4
    6e26:	4618      	mov	r0, r3
    6e28:	4b04      	ldr	r3, [pc, #16]	; (6e3c <spi_m_sync_disable+0x38>)
    6e2a:	4798      	blx	r3
}
    6e2c:	bf00      	nop
    6e2e:	3708      	adds	r7, #8
    6e30:	46bd      	mov	sp, r7
    6e32:	bd80      	pop	{r7, pc}
    6e34:	0001f580 	.word	0x0001f580
    6e38:	00007d91 	.word	0x00007d91
    6e3c:	0000c4bd 	.word	0x0000c4bd

00006e40 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    6e40:	b580      	push	{r7, lr}
    6e42:	b088      	sub	sp, #32
    6e44:	af00      	add	r7, sp, #0
    6e46:	60f8      	str	r0, [r7, #12]
    6e48:	60b9      	str	r1, [r7, #8]
    6e4a:	4613      	mov	r3, r2
    6e4c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6e4e:	68fb      	ldr	r3, [r7, #12]
    6e50:	2b00      	cmp	r3, #0
    6e52:	bf14      	ite	ne
    6e54:	2301      	movne	r3, #1
    6e56:	2300      	moveq	r3, #0
    6e58:	b2db      	uxtb	r3, r3
    6e5a:	2287      	movs	r2, #135	; 0x87
    6e5c:	490b      	ldr	r1, [pc, #44]	; (6e8c <_spi_m_sync_io_read+0x4c>)
    6e5e:	4618      	mov	r0, r3
    6e60:	4b0b      	ldr	r3, [pc, #44]	; (6e90 <_spi_m_sync_io_read+0x50>)
    6e62:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6e64:	68fb      	ldr	r3, [r7, #12]
    6e66:	3b0c      	subs	r3, #12
    6e68:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    6e6a:	68bb      	ldr	r3, [r7, #8]
    6e6c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    6e6e:	2300      	movs	r3, #0
    6e70:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6e72:	88fb      	ldrh	r3, [r7, #6]
    6e74:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6e76:	f107 0310 	add.w	r3, r7, #16
    6e7a:	4619      	mov	r1, r3
    6e7c:	69f8      	ldr	r0, [r7, #28]
    6e7e:	4b05      	ldr	r3, [pc, #20]	; (6e94 <_spi_m_sync_io_read+0x54>)
    6e80:	4798      	blx	r3
    6e82:	4603      	mov	r3, r0
}
    6e84:	4618      	mov	r0, r3
    6e86:	3720      	adds	r7, #32
    6e88:	46bd      	mov	sp, r7
    6e8a:	bd80      	pop	{r7, pc}
    6e8c:	0001f580 	.word	0x0001f580
    6e90:	00007d91 	.word	0x00007d91
    6e94:	00006ef1 	.word	0x00006ef1

00006e98 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    6e98:	b580      	push	{r7, lr}
    6e9a:	b088      	sub	sp, #32
    6e9c:	af00      	add	r7, sp, #0
    6e9e:	60f8      	str	r0, [r7, #12]
    6ea0:	60b9      	str	r1, [r7, #8]
    6ea2:	4613      	mov	r3, r2
    6ea4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6ea6:	68fb      	ldr	r3, [r7, #12]
    6ea8:	2b00      	cmp	r3, #0
    6eaa:	bf14      	ite	ne
    6eac:	2301      	movne	r3, #1
    6eae:	2300      	moveq	r3, #0
    6eb0:	b2db      	uxtb	r3, r3
    6eb2:	22a3      	movs	r2, #163	; 0xa3
    6eb4:	490b      	ldr	r1, [pc, #44]	; (6ee4 <_spi_m_sync_io_write+0x4c>)
    6eb6:	4618      	mov	r0, r3
    6eb8:	4b0b      	ldr	r3, [pc, #44]	; (6ee8 <_spi_m_sync_io_write+0x50>)
    6eba:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6ebc:	68fb      	ldr	r3, [r7, #12]
    6ebe:	3b0c      	subs	r3, #12
    6ec0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    6ec2:	2300      	movs	r3, #0
    6ec4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    6ec6:	68bb      	ldr	r3, [r7, #8]
    6ec8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6eca:	88fb      	ldrh	r3, [r7, #6]
    6ecc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6ece:	f107 0310 	add.w	r3, r7, #16
    6ed2:	4619      	mov	r1, r3
    6ed4:	69f8      	ldr	r0, [r7, #28]
    6ed6:	4b05      	ldr	r3, [pc, #20]	; (6eec <_spi_m_sync_io_write+0x54>)
    6ed8:	4798      	blx	r3
    6eda:	4603      	mov	r3, r0
}
    6edc:	4618      	mov	r0, r3
    6ede:	3720      	adds	r7, #32
    6ee0:	46bd      	mov	sp, r7
    6ee2:	bd80      	pop	{r7, pc}
    6ee4:	0001f580 	.word	0x0001f580
    6ee8:	00007d91 	.word	0x00007d91
    6eec:	00006ef1 	.word	0x00006ef1

00006ef0 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    6ef0:	b580      	push	{r7, lr}
    6ef2:	b086      	sub	sp, #24
    6ef4:	af00      	add	r7, sp, #0
    6ef6:	6078      	str	r0, [r7, #4]
    6ef8:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    6efa:	687b      	ldr	r3, [r7, #4]
    6efc:	2b00      	cmp	r3, #0
    6efe:	d004      	beq.n	6f0a <spi_m_sync_transfer+0x1a>
    6f00:	683b      	ldr	r3, [r7, #0]
    6f02:	2b00      	cmp	r3, #0
    6f04:	d001      	beq.n	6f0a <spi_m_sync_transfer+0x1a>
    6f06:	2301      	movs	r3, #1
    6f08:	e000      	b.n	6f0c <spi_m_sync_transfer+0x1c>
    6f0a:	2300      	movs	r3, #0
    6f0c:	f003 0301 	and.w	r3, r3, #1
    6f10:	b2db      	uxtb	r3, r3
    6f12:	22b3      	movs	r2, #179	; 0xb3
    6f14:	490c      	ldr	r1, [pc, #48]	; (6f48 <spi_m_sync_transfer+0x58>)
    6f16:	4618      	mov	r0, r3
    6f18:	4b0c      	ldr	r3, [pc, #48]	; (6f4c <spi_m_sync_transfer+0x5c>)
    6f1a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    6f1c:	683b      	ldr	r3, [r7, #0]
    6f1e:	681b      	ldr	r3, [r3, #0]
    6f20:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    6f22:	683b      	ldr	r3, [r7, #0]
    6f24:	685b      	ldr	r3, [r3, #4]
    6f26:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    6f28:	683b      	ldr	r3, [r7, #0]
    6f2a:	689b      	ldr	r3, [r3, #8]
    6f2c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    6f2e:	687b      	ldr	r3, [r7, #4]
    6f30:	3304      	adds	r3, #4
    6f32:	f107 020c 	add.w	r2, r7, #12
    6f36:	4611      	mov	r1, r2
    6f38:	4618      	mov	r0, r3
    6f3a:	4b05      	ldr	r3, [pc, #20]	; (6f50 <spi_m_sync_transfer+0x60>)
    6f3c:	4798      	blx	r3
    6f3e:	4603      	mov	r3, r0
}
    6f40:	4618      	mov	r0, r3
    6f42:	3718      	adds	r7, #24
    6f44:	46bd      	mov	sp, r7
    6f46:	bd80      	pop	{r7, pc}
    6f48:	0001f580 	.word	0x0001f580
    6f4c:	00007d91 	.word	0x00007d91
    6f50:	0000c661 	.word	0x0000c661

00006f54 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    6f54:	b580      	push	{r7, lr}
    6f56:	b082      	sub	sp, #8
    6f58:	af00      	add	r7, sp, #0
    6f5a:	6078      	str	r0, [r7, #4]
    6f5c:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    6f5e:	687b      	ldr	r3, [r7, #4]
    6f60:	2b00      	cmp	r3, #0
    6f62:	d004      	beq.n	6f6e <spi_m_sync_get_io_descriptor+0x1a>
    6f64:	683b      	ldr	r3, [r7, #0]
    6f66:	2b00      	cmp	r3, #0
    6f68:	d001      	beq.n	6f6e <spi_m_sync_get_io_descriptor+0x1a>
    6f6a:	2301      	movs	r3, #1
    6f6c:	e000      	b.n	6f70 <spi_m_sync_get_io_descriptor+0x1c>
    6f6e:	2300      	movs	r3, #0
    6f70:	f003 0301 	and.w	r3, r3, #1
    6f74:	b2db      	uxtb	r3, r3
    6f76:	22bd      	movs	r2, #189	; 0xbd
    6f78:	4906      	ldr	r1, [pc, #24]	; (6f94 <spi_m_sync_get_io_descriptor+0x40>)
    6f7a:	4618      	mov	r0, r3
    6f7c:	4b06      	ldr	r3, [pc, #24]	; (6f98 <spi_m_sync_get_io_descriptor+0x44>)
    6f7e:	4798      	blx	r3
	*io = &spi->io;
    6f80:	687b      	ldr	r3, [r7, #4]
    6f82:	f103 020c 	add.w	r2, r3, #12
    6f86:	683b      	ldr	r3, [r7, #0]
    6f88:	601a      	str	r2, [r3, #0]
	return 0;
    6f8a:	2300      	movs	r3, #0
}
    6f8c:	4618      	mov	r0, r3
    6f8e:	3708      	adds	r7, #8
    6f90:	46bd      	mov	sp, r7
    6f92:	bd80      	pop	{r7, pc}
    6f94:	0001f580 	.word	0x0001f580
    6f98:	00007d91 	.word	0x00007d91

00006f9c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    6f9c:	b480      	push	{r7}
    6f9e:	b083      	sub	sp, #12
    6fa0:	af00      	add	r7, sp, #0
    6fa2:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    6fa4:	687b      	ldr	r3, [r7, #4]
    6fa6:	681b      	ldr	r3, [r3, #0]
}
    6fa8:	4618      	mov	r0, r3
    6faa:	370c      	adds	r7, #12
    6fac:	46bd      	mov	sp, r7
    6fae:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fb2:	4770      	bx	lr

00006fb4 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    6fb4:	b480      	push	{r7}
    6fb6:	b083      	sub	sp, #12
    6fb8:	af00      	add	r7, sp, #0
    6fba:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    6fbc:	687b      	ldr	r3, [r7, #4]
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d002      	beq.n	6fc8 <list_get_next_element+0x14>
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	681b      	ldr	r3, [r3, #0]
    6fc6:	e000      	b.n	6fca <list_get_next_element+0x16>
    6fc8:	2300      	movs	r3, #0
}
    6fca:	4618      	mov	r0, r3
    6fcc:	370c      	adds	r7, #12
    6fce:	46bd      	mov	sp, r7
    6fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fd4:	4770      	bx	lr
	...

00006fd8 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    6fd8:	b580      	push	{r7, lr}
    6fda:	b084      	sub	sp, #16
    6fdc:	af00      	add	r7, sp, #0
    6fde:	60f8      	str	r0, [r7, #12]
    6fe0:	60b9      	str	r1, [r7, #8]
    6fe2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    6fe4:	68fb      	ldr	r3, [r7, #12]
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d004      	beq.n	6ff4 <timer_init+0x1c>
    6fea:	68bb      	ldr	r3, [r7, #8]
    6fec:	2b00      	cmp	r3, #0
    6fee:	d001      	beq.n	6ff4 <timer_init+0x1c>
    6ff0:	2301      	movs	r3, #1
    6ff2:	e000      	b.n	6ff6 <timer_init+0x1e>
    6ff4:	2300      	movs	r3, #0
    6ff6:	f003 0301 	and.w	r3, r3, #1
    6ffa:	b2db      	uxtb	r3, r3
    6ffc:	223b      	movs	r2, #59	; 0x3b
    6ffe:	490a      	ldr	r1, [pc, #40]	; (7028 <timer_init+0x50>)
    7000:	4618      	mov	r0, r3
    7002:	4b0a      	ldr	r3, [pc, #40]	; (702c <timer_init+0x54>)
    7004:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    7006:	68fb      	ldr	r3, [r7, #12]
    7008:	68b9      	ldr	r1, [r7, #8]
    700a:	4618      	mov	r0, r3
    700c:	4b08      	ldr	r3, [pc, #32]	; (7030 <timer_init+0x58>)
    700e:	4798      	blx	r3
	descr->time                           = 0;
    7010:	68fb      	ldr	r3, [r7, #12]
    7012:	2200      	movs	r2, #0
    7014:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    7016:	68fb      	ldr	r3, [r7, #12]
    7018:	4a06      	ldr	r2, [pc, #24]	; (7034 <timer_init+0x5c>)
    701a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    701c:	2300      	movs	r3, #0
}
    701e:	4618      	mov	r0, r3
    7020:	3710      	adds	r7, #16
    7022:	46bd      	mov	sp, r7
    7024:	bd80      	pop	{r7, pc}
    7026:	bf00      	nop
    7028:	0001f59c 	.word	0x0001f59c
    702c:	00007d91 	.word	0x00007d91
    7030:	0000cda9 	.word	0x0000cda9
    7034:	00007381 	.word	0x00007381

00007038 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    7038:	b580      	push	{r7, lr}
    703a:	b082      	sub	sp, #8
    703c:	af00      	add	r7, sp, #0
    703e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	2b00      	cmp	r3, #0
    7044:	bf14      	ite	ne
    7046:	2301      	movne	r3, #1
    7048:	2300      	moveq	r3, #0
    704a:	b2db      	uxtb	r3, r3
    704c:	2253      	movs	r2, #83	; 0x53
    704e:	490b      	ldr	r1, [pc, #44]	; (707c <timer_start+0x44>)
    7050:	4618      	mov	r0, r3
    7052:	4b0b      	ldr	r3, [pc, #44]	; (7080 <timer_start+0x48>)
    7054:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    7056:	687b      	ldr	r3, [r7, #4]
    7058:	4618      	mov	r0, r3
    705a:	4b0a      	ldr	r3, [pc, #40]	; (7084 <timer_start+0x4c>)
    705c:	4798      	blx	r3
    705e:	4603      	mov	r3, r0
    7060:	2b00      	cmp	r3, #0
    7062:	d002      	beq.n	706a <timer_start+0x32>
		return ERR_DENIED;
    7064:	f06f 0310 	mvn.w	r3, #16
    7068:	e004      	b.n	7074 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    706a:	687b      	ldr	r3, [r7, #4]
    706c:	4618      	mov	r0, r3
    706e:	4b06      	ldr	r3, [pc, #24]	; (7088 <timer_start+0x50>)
    7070:	4798      	blx	r3

	return ERR_NONE;
    7072:	2300      	movs	r3, #0
}
    7074:	4618      	mov	r0, r3
    7076:	3708      	adds	r7, #8
    7078:	46bd      	mov	sp, r7
    707a:	bd80      	pop	{r7, pc}
    707c:	0001f59c 	.word	0x0001f59c
    7080:	00007d91 	.word	0x00007d91
    7084:	0000d2d5 	.word	0x0000d2d5
    7088:	0000d275 	.word	0x0000d275

0000708c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    708c:	b580      	push	{r7, lr}
    708e:	b082      	sub	sp, #8
    7090:	af00      	add	r7, sp, #0
    7092:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    7094:	687b      	ldr	r3, [r7, #4]
    7096:	2b00      	cmp	r3, #0
    7098:	bf14      	ite	ne
    709a:	2301      	movne	r3, #1
    709c:	2300      	moveq	r3, #0
    709e:	b2db      	uxtb	r3, r3
    70a0:	2261      	movs	r2, #97	; 0x61
    70a2:	490d      	ldr	r1, [pc, #52]	; (70d8 <timer_stop+0x4c>)
    70a4:	4618      	mov	r0, r3
    70a6:	4b0d      	ldr	r3, [pc, #52]	; (70dc <timer_stop+0x50>)
    70a8:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    70aa:	687b      	ldr	r3, [r7, #4]
    70ac:	4618      	mov	r0, r3
    70ae:	4b0c      	ldr	r3, [pc, #48]	; (70e0 <timer_stop+0x54>)
    70b0:	4798      	blx	r3
    70b2:	4603      	mov	r3, r0
    70b4:	f083 0301 	eor.w	r3, r3, #1
    70b8:	b2db      	uxtb	r3, r3
    70ba:	2b00      	cmp	r3, #0
    70bc:	d002      	beq.n	70c4 <timer_stop+0x38>
		return ERR_DENIED;
    70be:	f06f 0310 	mvn.w	r3, #16
    70c2:	e004      	b.n	70ce <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    70c4:	687b      	ldr	r3, [r7, #4]
    70c6:	4618      	mov	r0, r3
    70c8:	4b06      	ldr	r3, [pc, #24]	; (70e4 <timer_stop+0x58>)
    70ca:	4798      	blx	r3

	return ERR_NONE;
    70cc:	2300      	movs	r3, #0
}
    70ce:	4618      	mov	r0, r3
    70d0:	3708      	adds	r7, #8
    70d2:	46bd      	mov	sp, r7
    70d4:	bd80      	pop	{r7, pc}
    70d6:	bf00      	nop
    70d8:	0001f59c 	.word	0x0001f59c
    70dc:	00007d91 	.word	0x00007d91
    70e0:	0000d2d5 	.word	0x0000d2d5
    70e4:	0000d2b5 	.word	0x0000d2b5

000070e8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    70e8:	b580      	push	{r7, lr}
    70ea:	b084      	sub	sp, #16
    70ec:	af00      	add	r7, sp, #0
    70ee:	6078      	str	r0, [r7, #4]
    70f0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    70f2:	687b      	ldr	r3, [r7, #4]
    70f4:	2b00      	cmp	r3, #0
    70f6:	d004      	beq.n	7102 <timer_add_task+0x1a>
    70f8:	683b      	ldr	r3, [r7, #0]
    70fa:	2b00      	cmp	r3, #0
    70fc:	d001      	beq.n	7102 <timer_add_task+0x1a>
    70fe:	2301      	movs	r3, #1
    7100:	e000      	b.n	7104 <timer_add_task+0x1c>
    7102:	2300      	movs	r3, #0
    7104:	f003 0301 	and.w	r3, r3, #1
    7108:	b2db      	uxtb	r3, r3
    710a:	227a      	movs	r2, #122	; 0x7a
    710c:	492d      	ldr	r1, [pc, #180]	; (71c4 <timer_add_task+0xdc>)
    710e:	4618      	mov	r0, r3
    7110:	4b2d      	ldr	r3, [pc, #180]	; (71c8 <timer_add_task+0xe0>)
    7112:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    7114:	687b      	ldr	r3, [r7, #4]
    7116:	7e1b      	ldrb	r3, [r3, #24]
    7118:	b2db      	uxtb	r3, r3
    711a:	f043 0301 	orr.w	r3, r3, #1
    711e:	b2da      	uxtb	r2, r3
    7120:	687b      	ldr	r3, [r7, #4]
    7122:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    7124:	687b      	ldr	r3, [r7, #4]
    7126:	3314      	adds	r3, #20
    7128:	6839      	ldr	r1, [r7, #0]
    712a:	4618      	mov	r0, r3
    712c:	4b27      	ldr	r3, [pc, #156]	; (71cc <timer_add_task+0xe4>)
    712e:	4798      	blx	r3
    7130:	4603      	mov	r3, r0
    7132:	2b00      	cmp	r3, #0
    7134:	d00f      	beq.n	7156 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    7136:	687b      	ldr	r3, [r7, #4]
    7138:	7e1b      	ldrb	r3, [r3, #24]
    713a:	b2db      	uxtb	r3, r3
    713c:	f023 0301 	bic.w	r3, r3, #1
    7140:	b2da      	uxtb	r2, r3
    7142:	687b      	ldr	r3, [r7, #4]
    7144:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    7146:	227f      	movs	r2, #127	; 0x7f
    7148:	491e      	ldr	r1, [pc, #120]	; (71c4 <timer_add_task+0xdc>)
    714a:	2000      	movs	r0, #0
    714c:	4b1e      	ldr	r3, [pc, #120]	; (71c8 <timer_add_task+0xe0>)
    714e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    7150:	f06f 0311 	mvn.w	r3, #17
    7154:	e032      	b.n	71bc <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    7156:	687b      	ldr	r3, [r7, #4]
    7158:	691a      	ldr	r2, [r3, #16]
    715a:	683b      	ldr	r3, [r7, #0]
    715c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    715e:	687b      	ldr	r3, [r7, #4]
    7160:	f103 0014 	add.w	r0, r3, #20
    7164:	687b      	ldr	r3, [r7, #4]
    7166:	691b      	ldr	r3, [r3, #16]
    7168:	461a      	mov	r2, r3
    716a:	6839      	ldr	r1, [r7, #0]
    716c:	4b18      	ldr	r3, [pc, #96]	; (71d0 <timer_add_task+0xe8>)
    716e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    7170:	687b      	ldr	r3, [r7, #4]
    7172:	7e1b      	ldrb	r3, [r3, #24]
    7174:	b2db      	uxtb	r3, r3
    7176:	f023 0301 	bic.w	r3, r3, #1
    717a:	b2da      	uxtb	r2, r3
    717c:	687b      	ldr	r3, [r7, #4]
    717e:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    7180:	687b      	ldr	r3, [r7, #4]
    7182:	7e1b      	ldrb	r3, [r3, #24]
    7184:	b2db      	uxtb	r3, r3
    7186:	f003 0302 	and.w	r3, r3, #2
    718a:	2b00      	cmp	r3, #0
    718c:	d015      	beq.n	71ba <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    718e:	f107 030c 	add.w	r3, r7, #12
    7192:	4618      	mov	r0, r3
    7194:	4b0f      	ldr	r3, [pc, #60]	; (71d4 <timer_add_task+0xec>)
    7196:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    7198:	687b      	ldr	r3, [r7, #4]
    719a:	7e1b      	ldrb	r3, [r3, #24]
    719c:	b2db      	uxtb	r3, r3
    719e:	f023 0302 	bic.w	r3, r3, #2
    71a2:	b2da      	uxtb	r2, r3
    71a4:	687b      	ldr	r3, [r7, #4]
    71a6:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    71a8:	687b      	ldr	r3, [r7, #4]
    71aa:	4618      	mov	r0, r3
    71ac:	4b0a      	ldr	r3, [pc, #40]	; (71d8 <timer_add_task+0xf0>)
    71ae:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    71b0:	f107 030c 	add.w	r3, r7, #12
    71b4:	4618      	mov	r0, r3
    71b6:	4b09      	ldr	r3, [pc, #36]	; (71dc <timer_add_task+0xf4>)
    71b8:	4798      	blx	r3
	}

	return ERR_NONE;
    71ba:	2300      	movs	r3, #0
}
    71bc:	4618      	mov	r0, r3
    71be:	3710      	adds	r7, #16
    71c0:	46bd      	mov	sp, r7
    71c2:	bd80      	pop	{r7, pc}
    71c4:	0001f59c 	.word	0x0001f59c
    71c8:	00007d91 	.word	0x00007d91
    71cc:	00007db9 	.word	0x00007db9
    71d0:	000072d1 	.word	0x000072d1
    71d4:	00010481 	.word	0x00010481
    71d8:	0000d335 	.word	0x0000d335
    71dc:	000104a7 	.word	0x000104a7

000071e0 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    71e0:	b580      	push	{r7, lr}
    71e2:	b084      	sub	sp, #16
    71e4:	af00      	add	r7, sp, #0
    71e6:	6078      	str	r0, [r7, #4]
    71e8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    71ea:	687b      	ldr	r3, [r7, #4]
    71ec:	2b00      	cmp	r3, #0
    71ee:	d004      	beq.n	71fa <timer_remove_task+0x1a>
    71f0:	683b      	ldr	r3, [r7, #0]
    71f2:	2b00      	cmp	r3, #0
    71f4:	d001      	beq.n	71fa <timer_remove_task+0x1a>
    71f6:	2301      	movs	r3, #1
    71f8:	e000      	b.n	71fc <timer_remove_task+0x1c>
    71fa:	2300      	movs	r3, #0
    71fc:	f003 0301 	and.w	r3, r3, #1
    7200:	b2db      	uxtb	r3, r3
    7202:	2295      	movs	r2, #149	; 0x95
    7204:	492b      	ldr	r1, [pc, #172]	; (72b4 <timer_remove_task+0xd4>)
    7206:	4618      	mov	r0, r3
    7208:	4b2b      	ldr	r3, [pc, #172]	; (72b8 <timer_remove_task+0xd8>)
    720a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    720c:	687b      	ldr	r3, [r7, #4]
    720e:	7e1b      	ldrb	r3, [r3, #24]
    7210:	b2db      	uxtb	r3, r3
    7212:	f043 0301 	orr.w	r3, r3, #1
    7216:	b2da      	uxtb	r2, r3
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    721c:	687b      	ldr	r3, [r7, #4]
    721e:	3314      	adds	r3, #20
    7220:	6839      	ldr	r1, [r7, #0]
    7222:	4618      	mov	r0, r3
    7224:	4b25      	ldr	r3, [pc, #148]	; (72bc <timer_remove_task+0xdc>)
    7226:	4798      	blx	r3
    7228:	4603      	mov	r3, r0
    722a:	f083 0301 	eor.w	r3, r3, #1
    722e:	b2db      	uxtb	r3, r3
    7230:	2b00      	cmp	r3, #0
    7232:	d00f      	beq.n	7254 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	7e1b      	ldrb	r3, [r3, #24]
    7238:	b2db      	uxtb	r3, r3
    723a:	f023 0301 	bic.w	r3, r3, #1
    723e:	b2da      	uxtb	r2, r3
    7240:	687b      	ldr	r3, [r7, #4]
    7242:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    7244:	229a      	movs	r2, #154	; 0x9a
    7246:	491b      	ldr	r1, [pc, #108]	; (72b4 <timer_remove_task+0xd4>)
    7248:	2000      	movs	r0, #0
    724a:	4b1b      	ldr	r3, [pc, #108]	; (72b8 <timer_remove_task+0xd8>)
    724c:	4798      	blx	r3
		return ERR_NOT_FOUND;
    724e:	f06f 0309 	mvn.w	r3, #9
    7252:	e02b      	b.n	72ac <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	3314      	adds	r3, #20
    7258:	6839      	ldr	r1, [r7, #0]
    725a:	4618      	mov	r0, r3
    725c:	4b18      	ldr	r3, [pc, #96]	; (72c0 <timer_remove_task+0xe0>)
    725e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    7260:	687b      	ldr	r3, [r7, #4]
    7262:	7e1b      	ldrb	r3, [r3, #24]
    7264:	b2db      	uxtb	r3, r3
    7266:	f023 0301 	bic.w	r3, r3, #1
    726a:	b2da      	uxtb	r2, r3
    726c:	687b      	ldr	r3, [r7, #4]
    726e:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    7270:	687b      	ldr	r3, [r7, #4]
    7272:	7e1b      	ldrb	r3, [r3, #24]
    7274:	b2db      	uxtb	r3, r3
    7276:	f003 0302 	and.w	r3, r3, #2
    727a:	2b00      	cmp	r3, #0
    727c:	d015      	beq.n	72aa <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    727e:	f107 030c 	add.w	r3, r7, #12
    7282:	4618      	mov	r0, r3
    7284:	4b0f      	ldr	r3, [pc, #60]	; (72c4 <timer_remove_task+0xe4>)
    7286:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    7288:	687b      	ldr	r3, [r7, #4]
    728a:	7e1b      	ldrb	r3, [r3, #24]
    728c:	b2db      	uxtb	r3, r3
    728e:	f023 0302 	bic.w	r3, r3, #2
    7292:	b2da      	uxtb	r2, r3
    7294:	687b      	ldr	r3, [r7, #4]
    7296:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    7298:	687b      	ldr	r3, [r7, #4]
    729a:	4618      	mov	r0, r3
    729c:	4b0a      	ldr	r3, [pc, #40]	; (72c8 <timer_remove_task+0xe8>)
    729e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    72a0:	f107 030c 	add.w	r3, r7, #12
    72a4:	4618      	mov	r0, r3
    72a6:	4b09      	ldr	r3, [pc, #36]	; (72cc <timer_remove_task+0xec>)
    72a8:	4798      	blx	r3
	}

	return ERR_NONE;
    72aa:	2300      	movs	r3, #0
}
    72ac:	4618      	mov	r0, r3
    72ae:	3710      	adds	r7, #16
    72b0:	46bd      	mov	sp, r7
    72b2:	bd80      	pop	{r7, pc}
    72b4:	0001f59c 	.word	0x0001f59c
    72b8:	00007d91 	.word	0x00007d91
    72bc:	00007db9 	.word	0x00007db9
    72c0:	00007f1b 	.word	0x00007f1b
    72c4:	00010481 	.word	0x00010481
    72c8:	0000d335 	.word	0x0000d335
    72cc:	000104a7 	.word	0x000104a7

000072d0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    72d0:	b580      	push	{r7, lr}
    72d2:	b088      	sub	sp, #32
    72d4:	af00      	add	r7, sp, #0
    72d6:	60f8      	str	r0, [r7, #12]
    72d8:	60b9      	str	r1, [r7, #8]
    72da:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    72dc:	2300      	movs	r3, #0
    72de:	61bb      	str	r3, [r7, #24]
    72e0:	68f8      	ldr	r0, [r7, #12]
    72e2:	4b23      	ldr	r3, [pc, #140]	; (7370 <timer_add_timer_task+0xa0>)
    72e4:	4798      	blx	r3
    72e6:	6138      	str	r0, [r7, #16]

	if (!head) {
    72e8:	693b      	ldr	r3, [r7, #16]
    72ea:	2b00      	cmp	r3, #0
    72ec:	d104      	bne.n	72f8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    72ee:	68b9      	ldr	r1, [r7, #8]
    72f0:	68f8      	ldr	r0, [r7, #12]
    72f2:	4b20      	ldr	r3, [pc, #128]	; (7374 <timer_add_timer_task+0xa4>)
    72f4:	4798      	blx	r3
		return;
    72f6:	e037      	b.n	7368 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    72f8:	693b      	ldr	r3, [r7, #16]
    72fa:	61fb      	str	r3, [r7, #28]
    72fc:	e022      	b.n	7344 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    72fe:	69fb      	ldr	r3, [r7, #28]
    7300:	685a      	ldr	r2, [r3, #4]
    7302:	687b      	ldr	r3, [r7, #4]
    7304:	429a      	cmp	r2, r3
    7306:	d808      	bhi.n	731a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    7308:	69fb      	ldr	r3, [r7, #28]
    730a:	689a      	ldr	r2, [r3, #8]
    730c:	69fb      	ldr	r3, [r7, #28]
    730e:	6859      	ldr	r1, [r3, #4]
    7310:	687b      	ldr	r3, [r7, #4]
    7312:	1acb      	subs	r3, r1, r3
    7314:	4413      	add	r3, r2
    7316:	617b      	str	r3, [r7, #20]
    7318:	e009      	b.n	732e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    731a:	69fb      	ldr	r3, [r7, #28]
    731c:	689a      	ldr	r2, [r3, #8]
    731e:	69fb      	ldr	r3, [r7, #28]
    7320:	685b      	ldr	r3, [r3, #4]
    7322:	441a      	add	r2, r3
    7324:	687b      	ldr	r3, [r7, #4]
    7326:	425b      	negs	r3, r3
    7328:	4413      	add	r3, r2
    732a:	3301      	adds	r3, #1
    732c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    732e:	68bb      	ldr	r3, [r7, #8]
    7330:	689a      	ldr	r2, [r3, #8]
    7332:	697b      	ldr	r3, [r7, #20]
    7334:	429a      	cmp	r2, r3
    7336:	d909      	bls.n	734c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    7338:	69fb      	ldr	r3, [r7, #28]
    733a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    733c:	69f8      	ldr	r0, [r7, #28]
    733e:	4b0e      	ldr	r3, [pc, #56]	; (7378 <timer_add_timer_task+0xa8>)
    7340:	4798      	blx	r3
    7342:	61f8      	str	r0, [r7, #28]
    7344:	69fb      	ldr	r3, [r7, #28]
    7346:	2b00      	cmp	r3, #0
    7348:	d1d9      	bne.n	72fe <timer_add_timer_task+0x2e>
    734a:	e000      	b.n	734e <timer_add_timer_task+0x7e>
			break;
    734c:	bf00      	nop
	}

	if (it == head) {
    734e:	69fa      	ldr	r2, [r7, #28]
    7350:	693b      	ldr	r3, [r7, #16]
    7352:	429a      	cmp	r2, r3
    7354:	d104      	bne.n	7360 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    7356:	68b9      	ldr	r1, [r7, #8]
    7358:	68f8      	ldr	r0, [r7, #12]
    735a:	4b06      	ldr	r3, [pc, #24]	; (7374 <timer_add_timer_task+0xa4>)
    735c:	4798      	blx	r3
    735e:	e003      	b.n	7368 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    7360:	68b9      	ldr	r1, [r7, #8]
    7362:	69b8      	ldr	r0, [r7, #24]
    7364:	4b05      	ldr	r3, [pc, #20]	; (737c <timer_add_timer_task+0xac>)
    7366:	4798      	blx	r3
	}
}
    7368:	3720      	adds	r7, #32
    736a:	46bd      	mov	sp, r7
    736c:	bd80      	pop	{r7, pc}
    736e:	bf00      	nop
    7370:	00006f9d 	.word	0x00006f9d
    7374:	00007df1 	.word	0x00007df1
    7378:	00006fb5 	.word	0x00006fb5
    737c:	00007e49 	.word	0x00007e49

00007380 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    7380:	b580      	push	{r7, lr}
    7382:	b086      	sub	sp, #24
    7384:	af00      	add	r7, sp, #0
    7386:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    7388:	687b      	ldr	r3, [r7, #4]
    738a:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    738c:	693b      	ldr	r3, [r7, #16]
    738e:	3314      	adds	r3, #20
    7390:	4618      	mov	r0, r3
    7392:	4b27      	ldr	r3, [pc, #156]	; (7430 <timer_process_counted+0xb0>)
    7394:	4798      	blx	r3
    7396:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    7398:	693b      	ldr	r3, [r7, #16]
    739a:	691b      	ldr	r3, [r3, #16]
    739c:	1c5a      	adds	r2, r3, #1
    739e:	693b      	ldr	r3, [r7, #16]
    73a0:	611a      	str	r2, [r3, #16]
    73a2:	693b      	ldr	r3, [r7, #16]
    73a4:	691b      	ldr	r3, [r3, #16]
    73a6:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    73a8:	693b      	ldr	r3, [r7, #16]
    73aa:	7e1b      	ldrb	r3, [r3, #24]
    73ac:	b2db      	uxtb	r3, r3
    73ae:	f003 0301 	and.w	r3, r3, #1
    73b2:	2b00      	cmp	r3, #0
    73b4:	d106      	bne.n	73c4 <timer_process_counted+0x44>
    73b6:	693b      	ldr	r3, [r7, #16]
    73b8:	7e1b      	ldrb	r3, [r3, #24]
    73ba:	b2db      	uxtb	r3, r3
    73bc:	f003 0302 	and.w	r3, r3, #2
    73c0:	2b00      	cmp	r3, #0
    73c2:	d027      	beq.n	7414 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    73c4:	693b      	ldr	r3, [r7, #16]
    73c6:	7e1b      	ldrb	r3, [r3, #24]
    73c8:	b2db      	uxtb	r3, r3
    73ca:	f043 0302 	orr.w	r3, r3, #2
    73ce:	b2da      	uxtb	r2, r3
    73d0:	693b      	ldr	r3, [r7, #16]
    73d2:	761a      	strb	r2, [r3, #24]
		return;
    73d4:	e029      	b.n	742a <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    73d6:	697b      	ldr	r3, [r7, #20]
    73d8:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    73da:	693b      	ldr	r3, [r7, #16]
    73dc:	3314      	adds	r3, #20
    73de:	4618      	mov	r0, r3
    73e0:	4b14      	ldr	r3, [pc, #80]	; (7434 <timer_process_counted+0xb4>)
    73e2:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    73e4:	68bb      	ldr	r3, [r7, #8]
    73e6:	7c1b      	ldrb	r3, [r3, #16]
    73e8:	2b01      	cmp	r3, #1
    73ea:	d109      	bne.n	7400 <timer_process_counted+0x80>
			tmp->time_label = time;
    73ec:	68bb      	ldr	r3, [r7, #8]
    73ee:	68fa      	ldr	r2, [r7, #12]
    73f0:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    73f2:	693b      	ldr	r3, [r7, #16]
    73f4:	3314      	adds	r3, #20
    73f6:	68fa      	ldr	r2, [r7, #12]
    73f8:	68b9      	ldr	r1, [r7, #8]
    73fa:	4618      	mov	r0, r3
    73fc:	4b0e      	ldr	r3, [pc, #56]	; (7438 <timer_process_counted+0xb8>)
    73fe:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    7400:	693b      	ldr	r3, [r7, #16]
    7402:	3314      	adds	r3, #20
    7404:	4618      	mov	r0, r3
    7406:	4b0a      	ldr	r3, [pc, #40]	; (7430 <timer_process_counted+0xb0>)
    7408:	4798      	blx	r3
    740a:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    740c:	68bb      	ldr	r3, [r7, #8]
    740e:	68db      	ldr	r3, [r3, #12]
    7410:	68b8      	ldr	r0, [r7, #8]
    7412:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    7414:	697b      	ldr	r3, [r7, #20]
    7416:	2b00      	cmp	r3, #0
    7418:	d007      	beq.n	742a <timer_process_counted+0xaa>
    741a:	697b      	ldr	r3, [r7, #20]
    741c:	685b      	ldr	r3, [r3, #4]
    741e:	68fa      	ldr	r2, [r7, #12]
    7420:	1ad2      	subs	r2, r2, r3
    7422:	697b      	ldr	r3, [r7, #20]
    7424:	689b      	ldr	r3, [r3, #8]
    7426:	429a      	cmp	r2, r3
    7428:	d2d5      	bcs.n	73d6 <timer_process_counted+0x56>
	}
}
    742a:	3718      	adds	r7, #24
    742c:	46bd      	mov	sp, r7
    742e:	bd80      	pop	{r7, pc}
    7430:	00006f9d 	.word	0x00006f9d
    7434:	00007ee9 	.word	0x00007ee9
    7438:	000072d1 	.word	0x000072d1

0000743c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    743c:	b480      	push	{r7}
    743e:	b085      	sub	sp, #20
    7440:	af00      	add	r7, sp, #0
    7442:	4603      	mov	r3, r0
    7444:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7446:	2300      	movs	r3, #0
    7448:	73fb      	strb	r3, [r7, #15]
    744a:	e029      	b.n	74a0 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    744c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7450:	4a19      	ldr	r2, [pc, #100]	; (74b8 <_usb_d_find_ep+0x7c>)
    7452:	015b      	lsls	r3, r3, #5
    7454:	4413      	add	r3, r2
    7456:	3301      	adds	r3, #1
    7458:	781b      	ldrb	r3, [r3, #0]
    745a:	79fa      	ldrb	r2, [r7, #7]
    745c:	429a      	cmp	r2, r3
    745e:	d102      	bne.n	7466 <_usb_d_find_ep+0x2a>
			return i;
    7460:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7464:	e022      	b.n	74ac <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    7466:	f997 300f 	ldrsb.w	r3, [r7, #15]
    746a:	4a13      	ldr	r2, [pc, #76]	; (74b8 <_usb_d_find_ep+0x7c>)
    746c:	015b      	lsls	r3, r3, #5
    746e:	4413      	add	r3, r2
    7470:	781b      	ldrb	r3, [r3, #0]
    7472:	2b00      	cmp	r3, #0
    7474:	d10e      	bne.n	7494 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    7476:	79fb      	ldrb	r3, [r7, #7]
    7478:	f003 030f 	and.w	r3, r3, #15
    747c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7480:	490d      	ldr	r1, [pc, #52]	; (74b8 <_usb_d_find_ep+0x7c>)
    7482:	0152      	lsls	r2, r2, #5
    7484:	440a      	add	r2, r1
    7486:	3201      	adds	r2, #1
    7488:	7812      	ldrb	r2, [r2, #0]
    748a:	4293      	cmp	r3, r2
    748c:	d102      	bne.n	7494 <_usb_d_find_ep+0x58>
			return i;
    748e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7492:	e00b      	b.n	74ac <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7494:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7498:	b2db      	uxtb	r3, r3
    749a:	3301      	adds	r3, #1
    749c:	b2db      	uxtb	r3, r3
    749e:	73fb      	strb	r3, [r7, #15]
    74a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    74a4:	2b03      	cmp	r3, #3
    74a6:	ddd1      	ble.n	744c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    74a8:	f04f 33ff 	mov.w	r3, #4294967295
}
    74ac:	4618      	mov	r0, r3
    74ae:	3714      	adds	r7, #20
    74b0:	46bd      	mov	sp, r7
    74b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    74b6:	4770      	bx	lr
    74b8:	20008624 	.word	0x20008624

000074bc <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    74bc:	b580      	push	{r7, lr}
    74be:	b088      	sub	sp, #32
    74c0:	af00      	add	r7, sp, #0
    74c2:	60ba      	str	r2, [r7, #8]
    74c4:	607b      	str	r3, [r7, #4]
    74c6:	4603      	mov	r3, r0
    74c8:	73fb      	strb	r3, [r7, #15]
    74ca:	460b      	mov	r3, r1
    74cc:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    74ce:	68bb      	ldr	r3, [r7, #8]
    74d0:	617b      	str	r3, [r7, #20]
    74d2:	687b      	ldr	r3, [r7, #4]
    74d4:	61bb      	str	r3, [r7, #24]
    74d6:	7bbb      	ldrb	r3, [r7, #14]
    74d8:	2b00      	cmp	r3, #0
    74da:	d004      	beq.n	74e6 <_usb_d_trans+0x2a>
    74dc:	7bfb      	ldrb	r3, [r7, #15]
    74de:	f063 037f 	orn	r3, r3, #127	; 0x7f
    74e2:	b2db      	uxtb	r3, r3
    74e4:	e003      	b.n	74ee <_usb_d_trans+0x32>
    74e6:	7bfb      	ldrb	r3, [r7, #15]
    74e8:	f003 030f 	and.w	r3, r3, #15
    74ec:	b2db      	uxtb	r3, r3
    74ee:	773b      	strb	r3, [r7, #28]
    74f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    74f4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    74f6:	f107 0314 	add.w	r3, r7, #20
    74fa:	4618      	mov	r0, r3
    74fc:	4b03      	ldr	r3, [pc, #12]	; (750c <_usb_d_trans+0x50>)
    74fe:	4798      	blx	r3
    7500:	4603      	mov	r3, r0
}
    7502:	4618      	mov	r0, r3
    7504:	3720      	adds	r7, #32
    7506:	46bd      	mov	sp, r7
    7508:	bd80      	pop	{r7, pc}
    750a:	bf00      	nop
    750c:	0000fab5 	.word	0x0000fab5

00007510 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    7510:	b480      	push	{r7}
    7512:	b085      	sub	sp, #20
    7514:	af00      	add	r7, sp, #0
    7516:	60f8      	str	r0, [r7, #12]
    7518:	60b9      	str	r1, [r7, #8]
    751a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    751c:	2300      	movs	r3, #0
}
    751e:	4618      	mov	r0, r3
    7520:	3714      	adds	r7, #20
    7522:	46bd      	mov	sp, r7
    7524:	f85d 7b04 	ldr.w	r7, [sp], #4
    7528:	4770      	bx	lr
	...

0000752c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    752c:	b580      	push	{r7, lr}
    752e:	b086      	sub	sp, #24
    7530:	af00      	add	r7, sp, #0
    7532:	4603      	mov	r3, r0
    7534:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7536:	79fb      	ldrb	r3, [r7, #7]
    7538:	4618      	mov	r0, r3
    753a:	4b2a      	ldr	r3, [pc, #168]	; (75e4 <usb_d_cb_trans_setup+0xb8>)
    753c:	4798      	blx	r3
    753e:	4603      	mov	r3, r0
    7540:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7542:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7546:	015b      	lsls	r3, r3, #5
    7548:	4a27      	ldr	r2, [pc, #156]	; (75e8 <usb_d_cb_trans_setup+0xbc>)
    754a:	4413      	add	r3, r2
    754c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    754e:	693b      	ldr	r3, [r7, #16]
    7550:	330c      	adds	r3, #12
    7552:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    7554:	79fb      	ldrb	r3, [r7, #7]
    7556:	68f9      	ldr	r1, [r7, #12]
    7558:	4618      	mov	r0, r3
    755a:	4b24      	ldr	r3, [pc, #144]	; (75ec <usb_d_cb_trans_setup+0xc0>)
    755c:	4798      	blx	r3
    755e:	4603      	mov	r3, r0
    7560:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    7562:	7afb      	ldrb	r3, [r7, #11]
    7564:	2b08      	cmp	r3, #8
    7566:	d00d      	beq.n	7584 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7568:	79fb      	ldrb	r3, [r7, #7]
    756a:	2101      	movs	r1, #1
    756c:	4618      	mov	r0, r3
    756e:	4b20      	ldr	r3, [pc, #128]	; (75f0 <usb_d_cb_trans_setup+0xc4>)
    7570:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    7572:	79fb      	ldrb	r3, [r7, #7]
    7574:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7578:	b2db      	uxtb	r3, r3
    757a:	2101      	movs	r1, #1
    757c:	4618      	mov	r0, r3
    757e:	4b1c      	ldr	r3, [pc, #112]	; (75f0 <usb_d_cb_trans_setup+0xc4>)
    7580:	4798      	blx	r3
		return;
    7582:	e02b      	b.n	75dc <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7584:	79fb      	ldrb	r3, [r7, #7]
    7586:	2100      	movs	r1, #0
    7588:	4618      	mov	r0, r3
    758a:	4b19      	ldr	r3, [pc, #100]	; (75f0 <usb_d_cb_trans_setup+0xc4>)
    758c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    758e:	79fb      	ldrb	r3, [r7, #7]
    7590:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7594:	b2db      	uxtb	r3, r3
    7596:	2100      	movs	r1, #0
    7598:	4618      	mov	r0, r3
    759a:	4b15      	ldr	r3, [pc, #84]	; (75f0 <usb_d_cb_trans_setup+0xc4>)
    759c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    759e:	693b      	ldr	r3, [r7, #16]
    75a0:	2201      	movs	r2, #1
    75a2:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    75a4:	693b      	ldr	r3, [r7, #16]
    75a6:	695b      	ldr	r3, [r3, #20]
    75a8:	79fa      	ldrb	r2, [r7, #7]
    75aa:	68f9      	ldr	r1, [r7, #12]
    75ac:	4610      	mov	r0, r2
    75ae:	4798      	blx	r3
    75b0:	4603      	mov	r3, r0
    75b2:	f083 0301 	eor.w	r3, r3, #1
    75b6:	b2db      	uxtb	r3, r3
    75b8:	2b00      	cmp	r3, #0
    75ba:	d00f      	beq.n	75dc <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    75bc:	693b      	ldr	r3, [r7, #16]
    75be:	2205      	movs	r2, #5
    75c0:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    75c2:	79fb      	ldrb	r3, [r7, #7]
    75c4:	2101      	movs	r1, #1
    75c6:	4618      	mov	r0, r3
    75c8:	4b09      	ldr	r3, [pc, #36]	; (75f0 <usb_d_cb_trans_setup+0xc4>)
    75ca:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    75cc:	79fb      	ldrb	r3, [r7, #7]
    75ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
    75d2:	b2db      	uxtb	r3, r3
    75d4:	2101      	movs	r1, #1
    75d6:	4618      	mov	r0, r3
    75d8:	4b05      	ldr	r3, [pc, #20]	; (75f0 <usb_d_cb_trans_setup+0xc4>)
    75da:	4798      	blx	r3
	}
}
    75dc:	3718      	adds	r7, #24
    75de:	46bd      	mov	sp, r7
    75e0:	bd80      	pop	{r7, pc}
    75e2:	bf00      	nop
    75e4:	0000743d 	.word	0x0000743d
    75e8:	20008624 	.word	0x20008624
    75ec:	0000fa0d 	.word	0x0000fa0d
    75f0:	0000f885 	.word	0x0000f885

000075f4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    75f4:	b580      	push	{r7, lr}
    75f6:	b084      	sub	sp, #16
    75f8:	af00      	add	r7, sp, #0
    75fa:	4603      	mov	r3, r0
    75fc:	6039      	str	r1, [r7, #0]
    75fe:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7600:	79fb      	ldrb	r3, [r7, #7]
    7602:	4618      	mov	r0, r3
    7604:	4b0d      	ldr	r3, [pc, #52]	; (763c <usb_d_cb_trans_more+0x48>)
    7606:	4798      	blx	r3
    7608:	4603      	mov	r3, r0
    760a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    760c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7610:	015b      	lsls	r3, r3, #5
    7612:	4a0b      	ldr	r2, [pc, #44]	; (7640 <usb_d_cb_trans_more+0x4c>)
    7614:	4413      	add	r3, r2
    7616:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    7618:	68bb      	ldr	r3, [r7, #8]
    761a:	789b      	ldrb	r3, [r3, #2]
    761c:	2b03      	cmp	r3, #3
    761e:	d107      	bne.n	7630 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    7620:	68bb      	ldr	r3, [r7, #8]
    7622:	699b      	ldr	r3, [r3, #24]
    7624:	79fa      	ldrb	r2, [r7, #7]
    7626:	6839      	ldr	r1, [r7, #0]
    7628:	4610      	mov	r0, r2
    762a:	4798      	blx	r3
    762c:	4603      	mov	r3, r0
    762e:	e000      	b.n	7632 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    7630:	2300      	movs	r3, #0
}
    7632:	4618      	mov	r0, r3
    7634:	3710      	adds	r7, #16
    7636:	46bd      	mov	sp, r7
    7638:	bd80      	pop	{r7, pc}
    763a:	bf00      	nop
    763c:	0000743d 	.word	0x0000743d
    7640:	20008624 	.word	0x20008624

00007644 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    7644:	b590      	push	{r4, r7, lr}
    7646:	b087      	sub	sp, #28
    7648:	af02      	add	r7, sp, #8
    764a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    764c:	687b      	ldr	r3, [r7, #4]
    764e:	789b      	ldrb	r3, [r3, #2]
    7650:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    7652:	687b      	ldr	r3, [r7, #4]
    7654:	7b1b      	ldrb	r3, [r3, #12]
    7656:	f003 0380 	and.w	r3, r3, #128	; 0x80
    765a:	2b00      	cmp	r3, #0
    765c:	bf14      	ite	ne
    765e:	2301      	movne	r3, #1
    7660:	2300      	moveq	r3, #0
    7662:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    7664:	7bfb      	ldrb	r3, [r7, #15]
    7666:	2b03      	cmp	r3, #3
    7668:	d13a      	bne.n	76e0 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    766a:	687b      	ldr	r3, [r7, #4]
    766c:	69db      	ldr	r3, [r3, #28]
    766e:	687a      	ldr	r2, [r7, #4]
    7670:	7850      	ldrb	r0, [r2, #1]
    7672:	687a      	ldr	r2, [r7, #4]
    7674:	320c      	adds	r2, #12
    7676:	2101      	movs	r1, #1
    7678:	4798      	blx	r3
    767a:	4603      	mov	r3, r0
    767c:	737b      	strb	r3, [r7, #13]
		if (err) {
    767e:	7b7b      	ldrb	r3, [r7, #13]
    7680:	2b00      	cmp	r3, #0
    7682:	d015      	beq.n	76b0 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	2205      	movs	r2, #5
    7688:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    768a:	687b      	ldr	r3, [r7, #4]
    768c:	2202      	movs	r2, #2
    768e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    7690:	7bbb      	ldrb	r3, [r7, #14]
    7692:	2b00      	cmp	r3, #0
    7694:	d002      	beq.n	769c <usb_d_ctrl_trans_done+0x58>
    7696:	687b      	ldr	r3, [r7, #4]
    7698:	785b      	ldrb	r3, [r3, #1]
    769a:	e004      	b.n	76a6 <usb_d_ctrl_trans_done+0x62>
    769c:	687b      	ldr	r3, [r7, #4]
    769e:	785b      	ldrb	r3, [r3, #1]
    76a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    76a4:	b2db      	uxtb	r3, r3
    76a6:	2101      	movs	r1, #1
    76a8:	4618      	mov	r0, r3
    76aa:	4b15      	ldr	r3, [pc, #84]	; (7700 <usb_d_ctrl_trans_done+0xbc>)
    76ac:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    76ae:	e022      	b.n	76f6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    76b0:	687b      	ldr	r3, [r7, #4]
    76b2:	2204      	movs	r2, #4
    76b4:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    76b6:	687b      	ldr	r3, [r7, #4]
    76b8:	7858      	ldrb	r0, [r3, #1]
    76ba:	7bbb      	ldrb	r3, [r7, #14]
    76bc:	2b00      	cmp	r3, #0
    76be:	bf14      	ite	ne
    76c0:	2301      	movne	r3, #1
    76c2:	2300      	moveq	r3, #0
    76c4:	b2db      	uxtb	r3, r3
    76c6:	f083 0301 	eor.w	r3, r3, #1
    76ca:	b2db      	uxtb	r3, r3
    76cc:	f003 0301 	and.w	r3, r3, #1
    76d0:	b2d9      	uxtb	r1, r3
    76d2:	2301      	movs	r3, #1
    76d4:	9300      	str	r3, [sp, #0]
    76d6:	2300      	movs	r3, #0
    76d8:	2200      	movs	r2, #0
    76da:	4c0a      	ldr	r4, [pc, #40]	; (7704 <usb_d_ctrl_trans_done+0xc0>)
    76dc:	47a0      	blx	r4
}
    76de:	e00a      	b.n	76f6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    76e0:	687b      	ldr	r3, [r7, #4]
    76e2:	69db      	ldr	r3, [r3, #28]
    76e4:	687a      	ldr	r2, [r7, #4]
    76e6:	7850      	ldrb	r0, [r2, #1]
    76e8:	687a      	ldr	r2, [r7, #4]
    76ea:	320c      	adds	r2, #12
    76ec:	2100      	movs	r1, #0
    76ee:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    76f0:	687b      	ldr	r3, [r7, #4]
    76f2:	2202      	movs	r2, #2
    76f4:	709a      	strb	r2, [r3, #2]
}
    76f6:	bf00      	nop
    76f8:	3714      	adds	r7, #20
    76fa:	46bd      	mov	sp, r7
    76fc:	bd90      	pop	{r4, r7, pc}
    76fe:	bf00      	nop
    7700:	0000f885 	.word	0x0000f885
    7704:	000074bd 	.word	0x000074bd

00007708 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    7708:	b580      	push	{r7, lr}
    770a:	b086      	sub	sp, #24
    770c:	af00      	add	r7, sp, #0
    770e:	4603      	mov	r3, r0
    7710:	60b9      	str	r1, [r7, #8]
    7712:	607a      	str	r2, [r7, #4]
    7714:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7716:	7bfb      	ldrb	r3, [r7, #15]
    7718:	4618      	mov	r0, r3
    771a:	4b2f      	ldr	r3, [pc, #188]	; (77d8 <_usb_d_cb_trans_done+0xd0>)
    771c:	4798      	blx	r3
    771e:	4603      	mov	r3, r0
    7720:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7722:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7726:	015b      	lsls	r3, r3, #5
    7728:	4a2c      	ldr	r2, [pc, #176]	; (77dc <_usb_d_cb_trans_done+0xd4>)
    772a:	4413      	add	r3, r2
    772c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    772e:	68bb      	ldr	r3, [r7, #8]
    7730:	2b00      	cmp	r3, #0
    7732:	d10e      	bne.n	7752 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    7734:	693b      	ldr	r3, [r7, #16]
    7736:	2200      	movs	r2, #0
    7738:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    773a:	693b      	ldr	r3, [r7, #16]
    773c:	781b      	ldrb	r3, [r3, #0]
    773e:	2b00      	cmp	r3, #0
    7740:	d103      	bne.n	774a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    7742:	6938      	ldr	r0, [r7, #16]
    7744:	4b26      	ldr	r3, [pc, #152]	; (77e0 <_usb_d_cb_trans_done+0xd8>)
    7746:	4798      	blx	r3
			return;
    7748:	e043      	b.n	77d2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    774a:	693b      	ldr	r3, [r7, #16]
    774c:	2201      	movs	r2, #1
    774e:	709a      	strb	r2, [r3, #2]
    7750:	e038      	b.n	77c4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    7752:	68bb      	ldr	r3, [r7, #8]
    7754:	2b01      	cmp	r3, #1
    7756:	d113      	bne.n	7780 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    7758:	693b      	ldr	r3, [r7, #16]
    775a:	2202      	movs	r2, #2
    775c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    775e:	693b      	ldr	r3, [r7, #16]
    7760:	781b      	ldrb	r3, [r3, #0]
    7762:	2b00      	cmp	r3, #0
    7764:	d108      	bne.n	7778 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7766:	693b      	ldr	r3, [r7, #16]
    7768:	2202      	movs	r2, #2
    776a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    776c:	7bfb      	ldrb	r3, [r7, #15]
    776e:	2100      	movs	r1, #0
    7770:	4618      	mov	r0, r3
    7772:	4b1c      	ldr	r3, [pc, #112]	; (77e4 <_usb_d_cb_trans_done+0xdc>)
    7774:	4798      	blx	r3
    7776:	e025      	b.n	77c4 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    7778:	693b      	ldr	r3, [r7, #16]
    777a:	2205      	movs	r2, #5
    777c:	709a      	strb	r2, [r3, #2]
    777e:	e021      	b.n	77c4 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    7780:	68bb      	ldr	r3, [r7, #8]
    7782:	2b02      	cmp	r3, #2
    7784:	d10e      	bne.n	77a4 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    7786:	693b      	ldr	r3, [r7, #16]
    7788:	2204      	movs	r2, #4
    778a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    778c:	693b      	ldr	r3, [r7, #16]
    778e:	781b      	ldrb	r3, [r3, #0]
    7790:	2b00      	cmp	r3, #0
    7792:	d103      	bne.n	779c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7794:	693b      	ldr	r3, [r7, #16]
    7796:	2202      	movs	r2, #2
    7798:	709a      	strb	r2, [r3, #2]
			return;
    779a:	e01a      	b.n	77d2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    779c:	693b      	ldr	r3, [r7, #16]
    779e:	2201      	movs	r2, #1
    77a0:	709a      	strb	r2, [r3, #2]
    77a2:	e00f      	b.n	77c4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    77a4:	68bb      	ldr	r3, [r7, #8]
    77a6:	2b03      	cmp	r3, #3
    77a8:	d106      	bne.n	77b8 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    77aa:	693b      	ldr	r3, [r7, #16]
    77ac:	2200      	movs	r2, #0
    77ae:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    77b0:	693b      	ldr	r3, [r7, #16]
    77b2:	2205      	movs	r2, #5
    77b4:	70da      	strb	r2, [r3, #3]
    77b6:	e005      	b.n	77c4 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    77b8:	693b      	ldr	r3, [r7, #16]
    77ba:	2206      	movs	r2, #6
    77bc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    77be:	693b      	ldr	r3, [r7, #16]
    77c0:	2206      	movs	r2, #6
    77c2:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    77c4:	693b      	ldr	r3, [r7, #16]
    77c6:	69db      	ldr	r3, [r3, #28]
    77c8:	693a      	ldr	r2, [r7, #16]
    77ca:	78d1      	ldrb	r1, [r2, #3]
    77cc:	687a      	ldr	r2, [r7, #4]
    77ce:	7bf8      	ldrb	r0, [r7, #15]
    77d0:	4798      	blx	r3
}
    77d2:	3718      	adds	r7, #24
    77d4:	46bd      	mov	sp, r7
    77d6:	bd80      	pop	{r7, pc}
    77d8:	0000743d 	.word	0x0000743d
    77dc:	20008624 	.word	0x20008624
    77e0:	00007645 	.word	0x00007645
    77e4:	0000f885 	.word	0x0000f885

000077e8 <usb_d_init>:

int32_t usb_d_init(void)
{
    77e8:	b580      	push	{r7, lr}
    77ea:	b082      	sub	sp, #8
    77ec:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    77ee:	4b21      	ldr	r3, [pc, #132]	; (7874 <usb_d_init+0x8c>)
    77f0:	4798      	blx	r3
    77f2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    77f4:	683b      	ldr	r3, [r7, #0]
    77f6:	2b00      	cmp	r3, #0
    77f8:	da01      	bge.n	77fe <usb_d_init+0x16>
		return rc;
    77fa:	683b      	ldr	r3, [r7, #0]
    77fc:	e036      	b.n	786c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    77fe:	2280      	movs	r2, #128	; 0x80
    7800:	2100      	movs	r1, #0
    7802:	481d      	ldr	r0, [pc, #116]	; (7878 <usb_d_init+0x90>)
    7804:	4b1d      	ldr	r3, [pc, #116]	; (787c <usb_d_init+0x94>)
    7806:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7808:	2300      	movs	r3, #0
    780a:	71fb      	strb	r3, [r7, #7]
    780c:	e01e      	b.n	784c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    780e:	79fb      	ldrb	r3, [r7, #7]
    7810:	4a19      	ldr	r2, [pc, #100]	; (7878 <usb_d_init+0x90>)
    7812:	015b      	lsls	r3, r3, #5
    7814:	4413      	add	r3, r2
    7816:	3301      	adds	r3, #1
    7818:	22ff      	movs	r2, #255	; 0xff
    781a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    781c:	79fb      	ldrb	r3, [r7, #7]
    781e:	4a16      	ldr	r2, [pc, #88]	; (7878 <usb_d_init+0x90>)
    7820:	015b      	lsls	r3, r3, #5
    7822:	4413      	add	r3, r2
    7824:	3314      	adds	r3, #20
    7826:	4a16      	ldr	r2, [pc, #88]	; (7880 <usb_d_init+0x98>)
    7828:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    782a:	79fb      	ldrb	r3, [r7, #7]
    782c:	4a12      	ldr	r2, [pc, #72]	; (7878 <usb_d_init+0x90>)
    782e:	015b      	lsls	r3, r3, #5
    7830:	4413      	add	r3, r2
    7832:	3318      	adds	r3, #24
    7834:	4a12      	ldr	r2, [pc, #72]	; (7880 <usb_d_init+0x98>)
    7836:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    7838:	79fb      	ldrb	r3, [r7, #7]
    783a:	4a0f      	ldr	r2, [pc, #60]	; (7878 <usb_d_init+0x90>)
    783c:	015b      	lsls	r3, r3, #5
    783e:	4413      	add	r3, r2
    7840:	331c      	adds	r3, #28
    7842:	4a0f      	ldr	r2, [pc, #60]	; (7880 <usb_d_init+0x98>)
    7844:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7846:	79fb      	ldrb	r3, [r7, #7]
    7848:	3301      	adds	r3, #1
    784a:	71fb      	strb	r3, [r7, #7]
    784c:	79fb      	ldrb	r3, [r7, #7]
    784e:	2b03      	cmp	r3, #3
    7850:	d9dd      	bls.n	780e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    7852:	490c      	ldr	r1, [pc, #48]	; (7884 <usb_d_init+0x9c>)
    7854:	2000      	movs	r0, #0
    7856:	4b0c      	ldr	r3, [pc, #48]	; (7888 <usb_d_init+0xa0>)
    7858:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    785a:	490c      	ldr	r1, [pc, #48]	; (788c <usb_d_init+0xa4>)
    785c:	2001      	movs	r0, #1
    785e:	4b0a      	ldr	r3, [pc, #40]	; (7888 <usb_d_init+0xa0>)
    7860:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    7862:	490b      	ldr	r1, [pc, #44]	; (7890 <usb_d_init+0xa8>)
    7864:	2002      	movs	r0, #2
    7866:	4b08      	ldr	r3, [pc, #32]	; (7888 <usb_d_init+0xa0>)
    7868:	4798      	blx	r3
	return ERR_NONE;
    786a:	2300      	movs	r3, #0
}
    786c:	4618      	mov	r0, r3
    786e:	3708      	adds	r7, #8
    7870:	46bd      	mov	sp, r7
    7872:	bd80      	pop	{r7, pc}
    7874:	0000f0cd 	.word	0x0000f0cd
    7878:	20008624 	.word	0x20008624
    787c:	0001b089 	.word	0x0001b089
    7880:	00007511 	.word	0x00007511
    7884:	0000752d 	.word	0x0000752d
    7888:	0000fd15 	.word	0x0000fd15
    788c:	000075f5 	.word	0x000075f5
    7890:	00007709 	.word	0x00007709

00007894 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    7894:	b580      	push	{r7, lr}
    7896:	b082      	sub	sp, #8
    7898:	af00      	add	r7, sp, #0
    789a:	4603      	mov	r3, r0
    789c:	6039      	str	r1, [r7, #0]
    789e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    78a0:	79fb      	ldrb	r3, [r7, #7]
    78a2:	6839      	ldr	r1, [r7, #0]
    78a4:	4618      	mov	r0, r3
    78a6:	4b03      	ldr	r3, [pc, #12]	; (78b4 <usb_d_register_callback+0x20>)
    78a8:	4798      	blx	r3
}
    78aa:	bf00      	nop
    78ac:	3708      	adds	r7, #8
    78ae:	46bd      	mov	sp, r7
    78b0:	bd80      	pop	{r7, pc}
    78b2:	bf00      	nop
    78b4:	0000fccd 	.word	0x0000fccd

000078b8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    78b8:	b580      	push	{r7, lr}
    78ba:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    78bc:	4b02      	ldr	r3, [pc, #8]	; (78c8 <usb_d_enable+0x10>)
    78be:	4798      	blx	r3
    78c0:	4603      	mov	r3, r0
}
    78c2:	4618      	mov	r0, r3
    78c4:	bd80      	pop	{r7, pc}
    78c6:	bf00      	nop
    78c8:	0000f1bd 	.word	0x0000f1bd

000078cc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    78cc:	b580      	push	{r7, lr}
    78ce:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    78d0:	4b01      	ldr	r3, [pc, #4]	; (78d8 <usb_d_attach+0xc>)
    78d2:	4798      	blx	r3
}
    78d4:	bf00      	nop
    78d6:	bd80      	pop	{r7, pc}
    78d8:	0000f241 	.word	0x0000f241

000078dc <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    78dc:	b580      	push	{r7, lr}
    78de:	b082      	sub	sp, #8
    78e0:	af00      	add	r7, sp, #0
    78e2:	4603      	mov	r3, r0
    78e4:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    78e6:	79fb      	ldrb	r3, [r7, #7]
    78e8:	4618      	mov	r0, r3
    78ea:	4b03      	ldr	r3, [pc, #12]	; (78f8 <usb_d_set_address+0x1c>)
    78ec:	4798      	blx	r3
}
    78ee:	bf00      	nop
    78f0:	3708      	adds	r7, #8
    78f2:	46bd      	mov	sp, r7
    78f4:	bd80      	pop	{r7, pc}
    78f6:	bf00      	nop
    78f8:	0000f255 	.word	0x0000f255

000078fc <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    78fc:	b580      	push	{r7, lr}
    78fe:	b082      	sub	sp, #8
    7900:	af00      	add	r7, sp, #0
    7902:	4603      	mov	r3, r0
    7904:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    7906:	79fb      	ldrb	r3, [r7, #7]
    7908:	b29b      	uxth	r3, r3
    790a:	461a      	mov	r2, r3
    790c:	2100      	movs	r1, #0
    790e:	2000      	movs	r0, #0
    7910:	4b03      	ldr	r3, [pc, #12]	; (7920 <usb_d_ep0_init+0x24>)
    7912:	4798      	blx	r3
    7914:	4603      	mov	r3, r0
}
    7916:	4618      	mov	r0, r3
    7918:	3708      	adds	r7, #8
    791a:	46bd      	mov	sp, r7
    791c:	bd80      	pop	{r7, pc}
    791e:	bf00      	nop
    7920:	00007925 	.word	0x00007925

00007924 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    7924:	b580      	push	{r7, lr}
    7926:	b086      	sub	sp, #24
    7928:	af00      	add	r7, sp, #0
    792a:	4603      	mov	r3, r0
    792c:	71fb      	strb	r3, [r7, #7]
    792e:	460b      	mov	r3, r1
    7930:	71bb      	strb	r3, [r7, #6]
    7932:	4613      	mov	r3, r2
    7934:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    7936:	79fb      	ldrb	r3, [r7, #7]
    7938:	4618      	mov	r0, r3
    793a:	4b1e      	ldr	r3, [pc, #120]	; (79b4 <usb_d_ep_init+0x90>)
    793c:	4798      	blx	r3
    793e:	4603      	mov	r3, r0
    7940:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7942:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7946:	015b      	lsls	r3, r3, #5
    7948:	4a1b      	ldr	r2, [pc, #108]	; (79b8 <usb_d_ep_init+0x94>)
    794a:	4413      	add	r3, r2
    794c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    794e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7952:	2b00      	cmp	r3, #0
    7954:	db02      	blt.n	795c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    7956:	f06f 0313 	mvn.w	r3, #19
    795a:	e027      	b.n	79ac <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    795c:	20ff      	movs	r0, #255	; 0xff
    795e:	4b15      	ldr	r3, [pc, #84]	; (79b4 <usb_d_ep_init+0x90>)
    7960:	4798      	blx	r3
    7962:	4603      	mov	r3, r0
    7964:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    7966:	f997 3017 	ldrsb.w	r3, [r7, #23]
    796a:	2b00      	cmp	r3, #0
    796c:	da02      	bge.n	7974 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    796e:	f06f 0314 	mvn.w	r3, #20
    7972:	e01b      	b.n	79ac <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    7974:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7978:	015b      	lsls	r3, r3, #5
    797a:	4a0f      	ldr	r2, [pc, #60]	; (79b8 <usb_d_ep_init+0x94>)
    797c:	4413      	add	r3, r2
    797e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    7980:	88ba      	ldrh	r2, [r7, #4]
    7982:	79b9      	ldrb	r1, [r7, #6]
    7984:	79fb      	ldrb	r3, [r7, #7]
    7986:	4618      	mov	r0, r3
    7988:	4b0c      	ldr	r3, [pc, #48]	; (79bc <usb_d_ep_init+0x98>)
    798a:	4798      	blx	r3
    798c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    798e:	68fb      	ldr	r3, [r7, #12]
    7990:	2b00      	cmp	r3, #0
    7992:	da01      	bge.n	7998 <usb_d_ep_init+0x74>
		return rc;
    7994:	68fb      	ldr	r3, [r7, #12]
    7996:	e009      	b.n	79ac <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    7998:	693b      	ldr	r3, [r7, #16]
    799a:	79fa      	ldrb	r2, [r7, #7]
    799c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    799e:	79bb      	ldrb	r3, [r7, #6]
    79a0:	f003 0303 	and.w	r3, r3, #3
    79a4:	b2da      	uxtb	r2, r3
    79a6:	693b      	ldr	r3, [r7, #16]
    79a8:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    79aa:	2300      	movs	r3, #0
}
    79ac:	4618      	mov	r0, r3
    79ae:	3718      	adds	r7, #24
    79b0:	46bd      	mov	sp, r7
    79b2:	bd80      	pop	{r7, pc}
    79b4:	0000743d 	.word	0x0000743d
    79b8:	20008624 	.word	0x20008624
    79bc:	0000f2f5 	.word	0x0000f2f5

000079c0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    79c0:	b580      	push	{r7, lr}
    79c2:	b084      	sub	sp, #16
    79c4:	af00      	add	r7, sp, #0
    79c6:	4603      	mov	r3, r0
    79c8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    79ca:	79fb      	ldrb	r3, [r7, #7]
    79cc:	4618      	mov	r0, r3
    79ce:	4b0d      	ldr	r3, [pc, #52]	; (7a04 <usb_d_ep_deinit+0x44>)
    79d0:	4798      	blx	r3
    79d2:	4603      	mov	r3, r0
    79d4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    79d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    79da:	015b      	lsls	r3, r3, #5
    79dc:	4a0a      	ldr	r2, [pc, #40]	; (7a08 <usb_d_ep_deinit+0x48>)
    79de:	4413      	add	r3, r2
    79e0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    79e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    79e6:	2b00      	cmp	r3, #0
    79e8:	db07      	blt.n	79fa <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    79ea:	79fb      	ldrb	r3, [r7, #7]
    79ec:	4618      	mov	r0, r3
    79ee:	4b07      	ldr	r3, [pc, #28]	; (7a0c <usb_d_ep_deinit+0x4c>)
    79f0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    79f2:	68bb      	ldr	r3, [r7, #8]
    79f4:	22ff      	movs	r2, #255	; 0xff
    79f6:	705a      	strb	r2, [r3, #1]
    79f8:	e000      	b.n	79fc <usb_d_ep_deinit+0x3c>
		return;
    79fa:	bf00      	nop
}
    79fc:	3710      	adds	r7, #16
    79fe:	46bd      	mov	sp, r7
    7a00:	bd80      	pop	{r7, pc}
    7a02:	bf00      	nop
    7a04:	0000743d 	.word	0x0000743d
    7a08:	20008624 	.word	0x20008624
    7a0c:	0000f429 	.word	0x0000f429

00007a10 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    7a10:	b580      	push	{r7, lr}
    7a12:	b086      	sub	sp, #24
    7a14:	af00      	add	r7, sp, #0
    7a16:	4603      	mov	r3, r0
    7a18:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7a1a:	79fb      	ldrb	r3, [r7, #7]
    7a1c:	4618      	mov	r0, r3
    7a1e:	4b15      	ldr	r3, [pc, #84]	; (7a74 <usb_d_ep_enable+0x64>)
    7a20:	4798      	blx	r3
    7a22:	4603      	mov	r3, r0
    7a24:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7a2a:	015b      	lsls	r3, r3, #5
    7a2c:	4a12      	ldr	r2, [pc, #72]	; (7a78 <usb_d_ep_enable+0x68>)
    7a2e:	4413      	add	r3, r2
    7a30:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    7a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7a36:	2b00      	cmp	r3, #0
    7a38:	da02      	bge.n	7a40 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    7a3a:	f06f 0311 	mvn.w	r3, #17
    7a3e:	e014      	b.n	7a6a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    7a40:	693b      	ldr	r3, [r7, #16]
    7a42:	781b      	ldrb	r3, [r3, #0]
    7a44:	2b00      	cmp	r3, #0
    7a46:	d101      	bne.n	7a4c <usb_d_ep_enable+0x3c>
    7a48:	2202      	movs	r2, #2
    7a4a:	e000      	b.n	7a4e <usb_d_ep_enable+0x3e>
    7a4c:	2201      	movs	r2, #1
    7a4e:	693b      	ldr	r3, [r7, #16]
    7a50:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    7a52:	79fb      	ldrb	r3, [r7, #7]
    7a54:	4618      	mov	r0, r3
    7a56:	4b09      	ldr	r3, [pc, #36]	; (7a7c <usb_d_ep_enable+0x6c>)
    7a58:	4798      	blx	r3
    7a5a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    7a5c:	68fb      	ldr	r3, [r7, #12]
    7a5e:	2b00      	cmp	r3, #0
    7a60:	da02      	bge.n	7a68 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    7a62:	693b      	ldr	r3, [r7, #16]
    7a64:	2200      	movs	r2, #0
    7a66:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    7a68:	68fb      	ldr	r3, [r7, #12]
}
    7a6a:	4618      	mov	r0, r3
    7a6c:	3718      	adds	r7, #24
    7a6e:	46bd      	mov	sp, r7
    7a70:	bd80      	pop	{r7, pc}
    7a72:	bf00      	nop
    7a74:	0000743d 	.word	0x0000743d
    7a78:	20008624 	.word	0x20008624
    7a7c:	0000f50d 	.word	0x0000f50d

00007a80 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    7a80:	b590      	push	{r4, r7, lr}
    7a82:	b08d      	sub	sp, #52	; 0x34
    7a84:	af02      	add	r7, sp, #8
    7a86:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    7a88:	687b      	ldr	r3, [r7, #4]
    7a8a:	7a1b      	ldrb	r3, [r3, #8]
    7a8c:	4618      	mov	r0, r3
    7a8e:	4b51      	ldr	r3, [pc, #324]	; (7bd4 <usb_d_ep_transfer+0x154>)
    7a90:	4798      	blx	r3
    7a92:	4603      	mov	r3, r0
    7a94:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    7a96:	f997 301f 	ldrsb.w	r3, [r7, #31]
    7a9a:	015b      	lsls	r3, r3, #5
    7a9c:	4a4e      	ldr	r2, [pc, #312]	; (7bd8 <usb_d_ep_transfer+0x158>)
    7a9e:	4413      	add	r3, r2
    7aa0:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    7aa2:	687b      	ldr	r3, [r7, #4]
    7aa4:	7a1b      	ldrb	r3, [r3, #8]
    7aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7aaa:	2b00      	cmp	r3, #0
    7aac:	bf14      	ite	ne
    7aae:	2301      	movne	r3, #1
    7ab0:	2300      	moveq	r3, #0
    7ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    7ab6:	687b      	ldr	r3, [r7, #4]
    7ab8:	7a5b      	ldrb	r3, [r3, #9]
    7aba:	2b00      	cmp	r3, #0
    7abc:	bf14      	ite	ne
    7abe:	2301      	movne	r3, #1
    7ac0:	2300      	moveq	r3, #0
    7ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    7ac6:	687b      	ldr	r3, [r7, #4]
    7ac8:	685b      	ldr	r3, [r3, #4]
    7aca:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    7acc:	f997 301f 	ldrsb.w	r3, [r7, #31]
    7ad0:	2b00      	cmp	r3, #0
    7ad2:	da02      	bge.n	7ada <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    7ad4:	f06f 0311 	mvn.w	r3, #17
    7ad8:	e077      	b.n	7bca <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    7ada:	f107 0308 	add.w	r3, r7, #8
    7ade:	4618      	mov	r0, r3
    7ae0:	4b3e      	ldr	r3, [pc, #248]	; (7bdc <usb_d_ep_transfer+0x15c>)
    7ae2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    7ae4:	69bb      	ldr	r3, [r7, #24]
    7ae6:	789b      	ldrb	r3, [r3, #2]
    7ae8:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    7aea:	7bfb      	ldrb	r3, [r7, #15]
    7aec:	b2db      	uxtb	r3, r3
    7aee:	2b01      	cmp	r3, #1
    7af0:	d10c      	bne.n	7b0c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    7af2:	69bb      	ldr	r3, [r7, #24]
    7af4:	2203      	movs	r2, #3
    7af6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    7af8:	f107 0308 	add.w	r3, r7, #8
    7afc:	4618      	mov	r0, r3
    7afe:	4b38      	ldr	r3, [pc, #224]	; (7be0 <usb_d_ep_transfer+0x160>)
    7b00:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7b02:	69bb      	ldr	r3, [r7, #24]
    7b04:	781b      	ldrb	r3, [r3, #0]
    7b06:	2b00      	cmp	r3, #0
    7b08:	d151      	bne.n	7bae <usb_d_ep_transfer+0x12e>
    7b0a:	e017      	b.n	7b3c <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    7b0c:	f107 0308 	add.w	r3, r7, #8
    7b10:	4618      	mov	r0, r3
    7b12:	4b33      	ldr	r3, [pc, #204]	; (7be0 <usb_d_ep_transfer+0x160>)
    7b14:	4798      	blx	r3
		switch (state) {
    7b16:	7bfb      	ldrb	r3, [r7, #15]
    7b18:	b2db      	uxtb	r3, r3
    7b1a:	2b05      	cmp	r3, #5
    7b1c:	d004      	beq.n	7b28 <usb_d_ep_transfer+0xa8>
    7b1e:	2b06      	cmp	r3, #6
    7b20:	d004      	beq.n	7b2c <usb_d_ep_transfer+0xac>
    7b22:	2b00      	cmp	r3, #0
    7b24:	d005      	beq.n	7b32 <usb_d_ep_transfer+0xb2>
    7b26:	e007      	b.n	7b38 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    7b28:	2302      	movs	r3, #2
    7b2a:	e04e      	b.n	7bca <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    7b2c:	f06f 030f 	mvn.w	r3, #15
    7b30:	e04b      	b.n	7bca <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    7b32:	f06f 0312 	mvn.w	r3, #18
    7b36:	e048      	b.n	7bca <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    7b38:	2301      	movs	r3, #1
    7b3a:	e046      	b.n	7bca <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    7b3c:	69bb      	ldr	r3, [r7, #24]
    7b3e:	7c9b      	ldrb	r3, [r3, #18]
    7b40:	b29a      	uxth	r2, r3
    7b42:	69bb      	ldr	r3, [r7, #24]
    7b44:	7cdb      	ldrb	r3, [r3, #19]
    7b46:	b29b      	uxth	r3, r3
    7b48:	021b      	lsls	r3, r3, #8
    7b4a:	b29b      	uxth	r3, r3
    7b4c:	4413      	add	r3, r2
    7b4e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    7b50:	8afb      	ldrh	r3, [r7, #22]
    7b52:	2b00      	cmp	r3, #0
    7b54:	d10b      	bne.n	7b6e <usb_d_ep_transfer+0xee>
			dir                 = true;
    7b56:	2301      	movs	r3, #1
    7b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    7b5c:	2300      	movs	r3, #0
    7b5e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    7b60:	2301      	movs	r3, #1
    7b62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    7b66:	69bb      	ldr	r3, [r7, #24]
    7b68:	2204      	movs	r2, #4
    7b6a:	709a      	strb	r2, [r3, #2]
    7b6c:	e01f      	b.n	7bae <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    7b6e:	69bb      	ldr	r3, [r7, #24]
    7b70:	7b1b      	ldrb	r3, [r3, #12]
    7b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7b76:	2b00      	cmp	r3, #0
    7b78:	bf14      	ite	ne
    7b7a:	2301      	movne	r3, #1
    7b7c:	2300      	moveq	r3, #0
    7b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    7b82:	8afa      	ldrh	r2, [r7, #22]
    7b84:	6a3b      	ldr	r3, [r7, #32]
    7b86:	429a      	cmp	r2, r3
    7b88:	d201      	bcs.n	7b8e <usb_d_ep_transfer+0x10e>
				len = req_len;
    7b8a:	8afb      	ldrh	r3, [r7, #22]
    7b8c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    7b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7b92:	2b00      	cmp	r3, #0
    7b94:	d008      	beq.n	7ba8 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    7b96:	8afa      	ldrh	r2, [r7, #22]
    7b98:	6a3b      	ldr	r3, [r7, #32]
    7b9a:	429a      	cmp	r2, r3
    7b9c:	bf8c      	ite	hi
    7b9e:	2301      	movhi	r3, #1
    7ba0:	2300      	movls	r3, #0
    7ba2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    7ba6:	e002      	b.n	7bae <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    7ba8:	2300      	movs	r3, #0
    7baa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    7bae:	687b      	ldr	r3, [r7, #4]
    7bb0:	7a18      	ldrb	r0, [r3, #8]
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	681a      	ldr	r2, [r3, #0]
    7bb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    7bba:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    7bbe:	9300      	str	r3, [sp, #0]
    7bc0:	6a3b      	ldr	r3, [r7, #32]
    7bc2:	4c08      	ldr	r4, [pc, #32]	; (7be4 <usb_d_ep_transfer+0x164>)
    7bc4:	47a0      	blx	r4
    7bc6:	6138      	str	r0, [r7, #16]
	return rc;
    7bc8:	693b      	ldr	r3, [r7, #16]
}
    7bca:	4618      	mov	r0, r3
    7bcc:	372c      	adds	r7, #44	; 0x2c
    7bce:	46bd      	mov	sp, r7
    7bd0:	bd90      	pop	{r4, r7, pc}
    7bd2:	bf00      	nop
    7bd4:	0000743d 	.word	0x0000743d
    7bd8:	20008624 	.word	0x20008624
    7bdc:	00010481 	.word	0x00010481
    7be0:	000104a7 	.word	0x000104a7
    7be4:	000074bd 	.word	0x000074bd

00007be8 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    7be8:	b580      	push	{r7, lr}
    7bea:	b084      	sub	sp, #16
    7bec:	af00      	add	r7, sp, #0
    7bee:	4603      	mov	r3, r0
    7bf0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7bf2:	79fb      	ldrb	r3, [r7, #7]
    7bf4:	4618      	mov	r0, r3
    7bf6:	4b0e      	ldr	r3, [pc, #56]	; (7c30 <usb_d_ep_abort+0x48>)
    7bf8:	4798      	blx	r3
    7bfa:	4603      	mov	r3, r0
    7bfc:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7c02:	015b      	lsls	r3, r3, #5
    7c04:	4a0b      	ldr	r2, [pc, #44]	; (7c34 <usb_d_ep_abort+0x4c>)
    7c06:	4413      	add	r3, r2
    7c08:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    7c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7c0e:	2b00      	cmp	r3, #0
    7c10:	db0a      	blt.n	7c28 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    7c12:	79fb      	ldrb	r3, [r7, #7]
    7c14:	4618      	mov	r0, r3
    7c16:	4b08      	ldr	r3, [pc, #32]	; (7c38 <usb_d_ep_abort+0x50>)
    7c18:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7c1a:	68bb      	ldr	r3, [r7, #8]
    7c1c:	2201      	movs	r2, #1
    7c1e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    7c20:	68bb      	ldr	r3, [r7, #8]
    7c22:	2204      	movs	r2, #4
    7c24:	70da      	strb	r2, [r3, #3]
    7c26:	e000      	b.n	7c2a <usb_d_ep_abort+0x42>
		return;
    7c28:	bf00      	nop
}
    7c2a:	3710      	adds	r7, #16
    7c2c:	46bd      	mov	sp, r7
    7c2e:	bd80      	pop	{r7, pc}
    7c30:	0000743d 	.word	0x0000743d
    7c34:	20008624 	.word	0x20008624
    7c38:	0000fc79 	.word	0x0000fc79

00007c3c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    7c3c:	b580      	push	{r7, lr}
    7c3e:	b086      	sub	sp, #24
    7c40:	af00      	add	r7, sp, #0
    7c42:	4603      	mov	r3, r0
    7c44:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7c46:	79fb      	ldrb	r3, [r7, #7]
    7c48:	4618      	mov	r0, r3
    7c4a:	4b1a      	ldr	r3, [pc, #104]	; (7cb4 <_usb_d_ep_halt_clr+0x78>)
    7c4c:	4798      	blx	r3
    7c4e:	4603      	mov	r3, r0
    7c50:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7c56:	015b      	lsls	r3, r3, #5
    7c58:	4a17      	ldr	r2, [pc, #92]	; (7cb8 <_usb_d_ep_halt_clr+0x7c>)
    7c5a:	4413      	add	r3, r2
    7c5c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    7c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7c62:	2b00      	cmp	r3, #0
    7c64:	da02      	bge.n	7c6c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    7c66:	f06f 0311 	mvn.w	r3, #17
    7c6a:	e01f      	b.n	7cac <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    7c6c:	79fb      	ldrb	r3, [r7, #7]
    7c6e:	2102      	movs	r1, #2
    7c70:	4618      	mov	r0, r3
    7c72:	4b12      	ldr	r3, [pc, #72]	; (7cbc <_usb_d_ep_halt_clr+0x80>)
    7c74:	4798      	blx	r3
    7c76:	4603      	mov	r3, r0
    7c78:	2b00      	cmp	r3, #0
    7c7a:	d016      	beq.n	7caa <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7c7c:	79fb      	ldrb	r3, [r7, #7]
    7c7e:	2100      	movs	r1, #0
    7c80:	4618      	mov	r0, r3
    7c82:	4b0e      	ldr	r3, [pc, #56]	; (7cbc <_usb_d_ep_halt_clr+0x80>)
    7c84:	4798      	blx	r3
    7c86:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    7c88:	68fb      	ldr	r3, [r7, #12]
    7c8a:	2b00      	cmp	r3, #0
    7c8c:	da01      	bge.n	7c92 <_usb_d_ep_halt_clr+0x56>
			return rc;
    7c8e:	68fb      	ldr	r3, [r7, #12]
    7c90:	e00c      	b.n	7cac <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7c92:	693b      	ldr	r3, [r7, #16]
    7c94:	2201      	movs	r2, #1
    7c96:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    7c98:	693b      	ldr	r3, [r7, #16]
    7c9a:	2203      	movs	r2, #3
    7c9c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    7c9e:	693b      	ldr	r3, [r7, #16]
    7ca0:	69db      	ldr	r3, [r3, #28]
    7ca2:	79f8      	ldrb	r0, [r7, #7]
    7ca4:	2200      	movs	r2, #0
    7ca6:	2103      	movs	r1, #3
    7ca8:	4798      	blx	r3
	}
	return ERR_NONE;
    7caa:	2300      	movs	r3, #0
}
    7cac:	4618      	mov	r0, r3
    7cae:	3718      	adds	r7, #24
    7cb0:	46bd      	mov	sp, r7
    7cb2:	bd80      	pop	{r7, pc}
    7cb4:	0000743d 	.word	0x0000743d
    7cb8:	20008624 	.word	0x20008624
    7cbc:	0000f885 	.word	0x0000f885

00007cc0 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    7cc0:	b580      	push	{r7, lr}
    7cc2:	b082      	sub	sp, #8
    7cc4:	af00      	add	r7, sp, #0
    7cc6:	4603      	mov	r3, r0
    7cc8:	460a      	mov	r2, r1
    7cca:	71fb      	strb	r3, [r7, #7]
    7ccc:	4613      	mov	r3, r2
    7cce:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    7cd0:	79bb      	ldrb	r3, [r7, #6]
    7cd2:	2b00      	cmp	r3, #0
    7cd4:	d105      	bne.n	7ce2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    7cd6:	79fb      	ldrb	r3, [r7, #7]
    7cd8:	4618      	mov	r0, r3
    7cda:	4b0c      	ldr	r3, [pc, #48]	; (7d0c <usb_d_ep_halt+0x4c>)
    7cdc:	4798      	blx	r3
    7cde:	4603      	mov	r3, r0
    7ce0:	e00f      	b.n	7d02 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    7ce2:	79bb      	ldrb	r3, [r7, #6]
    7ce4:	2b01      	cmp	r3, #1
    7ce6:	d106      	bne.n	7cf6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7ce8:	79fb      	ldrb	r3, [r7, #7]
    7cea:	2101      	movs	r1, #1
    7cec:	4618      	mov	r0, r3
    7cee:	4b08      	ldr	r3, [pc, #32]	; (7d10 <usb_d_ep_halt+0x50>)
    7cf0:	4798      	blx	r3
    7cf2:	4603      	mov	r3, r0
    7cf4:	e005      	b.n	7d02 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    7cf6:	79fb      	ldrb	r3, [r7, #7]
    7cf8:	2102      	movs	r1, #2
    7cfa:	4618      	mov	r0, r3
    7cfc:	4b04      	ldr	r3, [pc, #16]	; (7d10 <usb_d_ep_halt+0x50>)
    7cfe:	4798      	blx	r3
    7d00:	4603      	mov	r3, r0
	}
}
    7d02:	4618      	mov	r0, r3
    7d04:	3708      	adds	r7, #8
    7d06:	46bd      	mov	sp, r7
    7d08:	bd80      	pop	{r7, pc}
    7d0a:	bf00      	nop
    7d0c:	00007c3d 	.word	0x00007c3d
    7d10:	0000f885 	.word	0x0000f885

00007d14 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    7d14:	b580      	push	{r7, lr}
    7d16:	b086      	sub	sp, #24
    7d18:	af00      	add	r7, sp, #0
    7d1a:	4603      	mov	r3, r0
    7d1c:	603a      	str	r2, [r7, #0]
    7d1e:	71fb      	strb	r3, [r7, #7]
    7d20:	460b      	mov	r3, r1
    7d22:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7d24:	79fb      	ldrb	r3, [r7, #7]
    7d26:	4618      	mov	r0, r3
    7d28:	4b16      	ldr	r3, [pc, #88]	; (7d84 <usb_d_ep_register_callback+0x70>)
    7d2a:	4798      	blx	r3
    7d2c:	4603      	mov	r3, r0
    7d2e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7d30:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7d34:	015b      	lsls	r3, r3, #5
    7d36:	4a14      	ldr	r2, [pc, #80]	; (7d88 <usb_d_ep_register_callback+0x74>)
    7d38:	4413      	add	r3, r2
    7d3a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    7d3c:	683b      	ldr	r3, [r7, #0]
    7d3e:	2b00      	cmp	r3, #0
    7d40:	d001      	beq.n	7d46 <usb_d_ep_register_callback+0x32>
    7d42:	683b      	ldr	r3, [r7, #0]
    7d44:	e000      	b.n	7d48 <usb_d_ep_register_callback+0x34>
    7d46:	4b11      	ldr	r3, [pc, #68]	; (7d8c <usb_d_ep_register_callback+0x78>)
    7d48:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    7d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7d4e:	2b00      	cmp	r3, #0
    7d50:	db13      	blt.n	7d7a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    7d52:	79bb      	ldrb	r3, [r7, #6]
    7d54:	2b01      	cmp	r3, #1
    7d56:	d008      	beq.n	7d6a <usb_d_ep_register_callback+0x56>
    7d58:	2b02      	cmp	r3, #2
    7d5a:	d00a      	beq.n	7d72 <usb_d_ep_register_callback+0x5e>
    7d5c:	2b00      	cmp	r3, #0
    7d5e:	d000      	beq.n	7d62 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    7d60:	e00c      	b.n	7d7c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    7d62:	693b      	ldr	r3, [r7, #16]
    7d64:	68fa      	ldr	r2, [r7, #12]
    7d66:	615a      	str	r2, [r3, #20]
		break;
    7d68:	e008      	b.n	7d7c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    7d6a:	693b      	ldr	r3, [r7, #16]
    7d6c:	68fa      	ldr	r2, [r7, #12]
    7d6e:	619a      	str	r2, [r3, #24]
		break;
    7d70:	e004      	b.n	7d7c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    7d72:	693b      	ldr	r3, [r7, #16]
    7d74:	68fa      	ldr	r2, [r7, #12]
    7d76:	61da      	str	r2, [r3, #28]
		break;
    7d78:	e000      	b.n	7d7c <usb_d_ep_register_callback+0x68>
		return;
    7d7a:	bf00      	nop
	}
}
    7d7c:	3718      	adds	r7, #24
    7d7e:	46bd      	mov	sp, r7
    7d80:	bd80      	pop	{r7, pc}
    7d82:	bf00      	nop
    7d84:	0000743d 	.word	0x0000743d
    7d88:	20008624 	.word	0x20008624
    7d8c:	00007511 	.word	0x00007511

00007d90 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    7d90:	b480      	push	{r7}
    7d92:	b085      	sub	sp, #20
    7d94:	af00      	add	r7, sp, #0
    7d96:	4603      	mov	r3, r0
    7d98:	60b9      	str	r1, [r7, #8]
    7d9a:	607a      	str	r2, [r7, #4]
    7d9c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    7d9e:	7bfb      	ldrb	r3, [r7, #15]
    7da0:	f083 0301 	eor.w	r3, r3, #1
    7da4:	b2db      	uxtb	r3, r3
    7da6:	2b00      	cmp	r3, #0
    7da8:	d000      	beq.n	7dac <assert+0x1c>
		__asm("BKPT #0");
    7daa:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    7dac:	bf00      	nop
    7dae:	3714      	adds	r7, #20
    7db0:	46bd      	mov	sp, r7
    7db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7db6:	4770      	bx	lr

00007db8 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    7db8:	b480      	push	{r7}
    7dba:	b085      	sub	sp, #20
    7dbc:	af00      	add	r7, sp, #0
    7dbe:	6078      	str	r0, [r7, #4]
    7dc0:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    7dc2:	687b      	ldr	r3, [r7, #4]
    7dc4:	681b      	ldr	r3, [r3, #0]
    7dc6:	60fb      	str	r3, [r7, #12]
    7dc8:	e008      	b.n	7ddc <is_list_element+0x24>
		if (it == element) {
    7dca:	68fa      	ldr	r2, [r7, #12]
    7dcc:	683b      	ldr	r3, [r7, #0]
    7dce:	429a      	cmp	r2, r3
    7dd0:	d101      	bne.n	7dd6 <is_list_element+0x1e>
			return true;
    7dd2:	2301      	movs	r3, #1
    7dd4:	e006      	b.n	7de4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    7dd6:	68fb      	ldr	r3, [r7, #12]
    7dd8:	681b      	ldr	r3, [r3, #0]
    7dda:	60fb      	str	r3, [r7, #12]
    7ddc:	68fb      	ldr	r3, [r7, #12]
    7dde:	2b00      	cmp	r3, #0
    7de0:	d1f3      	bne.n	7dca <is_list_element+0x12>
		}
	}

	return false;
    7de2:	2300      	movs	r3, #0
}
    7de4:	4618      	mov	r0, r3
    7de6:	3714      	adds	r7, #20
    7de8:	46bd      	mov	sp, r7
    7dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dee:	4770      	bx	lr

00007df0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    7df0:	b580      	push	{r7, lr}
    7df2:	b082      	sub	sp, #8
    7df4:	af00      	add	r7, sp, #0
    7df6:	6078      	str	r0, [r7, #4]
    7df8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    7dfa:	6839      	ldr	r1, [r7, #0]
    7dfc:	6878      	ldr	r0, [r7, #4]
    7dfe:	4b0f      	ldr	r3, [pc, #60]	; (7e3c <list_insert_as_head+0x4c>)
    7e00:	4798      	blx	r3
    7e02:	4603      	mov	r3, r0
    7e04:	2b00      	cmp	r3, #0
    7e06:	bf14      	ite	ne
    7e08:	2301      	movne	r3, #1
    7e0a:	2300      	moveq	r3, #0
    7e0c:	b2db      	uxtb	r3, r3
    7e0e:	f083 0301 	eor.w	r3, r3, #1
    7e12:	b2db      	uxtb	r3, r3
    7e14:	f003 0301 	and.w	r3, r3, #1
    7e18:	b2db      	uxtb	r3, r3
    7e1a:	2239      	movs	r2, #57	; 0x39
    7e1c:	4908      	ldr	r1, [pc, #32]	; (7e40 <list_insert_as_head+0x50>)
    7e1e:	4618      	mov	r0, r3
    7e20:	4b08      	ldr	r3, [pc, #32]	; (7e44 <list_insert_as_head+0x54>)
    7e22:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    7e24:	687b      	ldr	r3, [r7, #4]
    7e26:	681a      	ldr	r2, [r3, #0]
    7e28:	683b      	ldr	r3, [r7, #0]
    7e2a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    7e2c:	687b      	ldr	r3, [r7, #4]
    7e2e:	683a      	ldr	r2, [r7, #0]
    7e30:	601a      	str	r2, [r3, #0]
}
    7e32:	bf00      	nop
    7e34:	3708      	adds	r7, #8
    7e36:	46bd      	mov	sp, r7
    7e38:	bd80      	pop	{r7, pc}
    7e3a:	bf00      	nop
    7e3c:	00007db9 	.word	0x00007db9
    7e40:	0001f5b4 	.word	0x0001f5b4
    7e44:	00007d91 	.word	0x00007d91

00007e48 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    7e48:	b480      	push	{r7}
    7e4a:	b083      	sub	sp, #12
    7e4c:	af00      	add	r7, sp, #0
    7e4e:	6078      	str	r0, [r7, #4]
    7e50:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    7e52:	687b      	ldr	r3, [r7, #4]
    7e54:	681a      	ldr	r2, [r3, #0]
    7e56:	683b      	ldr	r3, [r7, #0]
    7e58:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    7e5a:	687b      	ldr	r3, [r7, #4]
    7e5c:	683a      	ldr	r2, [r7, #0]
    7e5e:	601a      	str	r2, [r3, #0]
}
    7e60:	bf00      	nop
    7e62:	370c      	adds	r7, #12
    7e64:	46bd      	mov	sp, r7
    7e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e6a:	4770      	bx	lr

00007e6c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    7e6c:	b580      	push	{r7, lr}
    7e6e:	b084      	sub	sp, #16
    7e70:	af00      	add	r7, sp, #0
    7e72:	6078      	str	r0, [r7, #4]
    7e74:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    7e76:	687b      	ldr	r3, [r7, #4]
    7e78:	681b      	ldr	r3, [r3, #0]
    7e7a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    7e7c:	6839      	ldr	r1, [r7, #0]
    7e7e:	6878      	ldr	r0, [r7, #4]
    7e80:	4b16      	ldr	r3, [pc, #88]	; (7edc <list_insert_at_end+0x70>)
    7e82:	4798      	blx	r3
    7e84:	4603      	mov	r3, r0
    7e86:	2b00      	cmp	r3, #0
    7e88:	bf14      	ite	ne
    7e8a:	2301      	movne	r3, #1
    7e8c:	2300      	moveq	r3, #0
    7e8e:	b2db      	uxtb	r3, r3
    7e90:	f083 0301 	eor.w	r3, r3, #1
    7e94:	b2db      	uxtb	r3, r3
    7e96:	f003 0301 	and.w	r3, r3, #1
    7e9a:	b2db      	uxtb	r3, r3
    7e9c:	224f      	movs	r2, #79	; 0x4f
    7e9e:	4910      	ldr	r1, [pc, #64]	; (7ee0 <list_insert_at_end+0x74>)
    7ea0:	4618      	mov	r0, r3
    7ea2:	4b10      	ldr	r3, [pc, #64]	; (7ee4 <list_insert_at_end+0x78>)
    7ea4:	4798      	blx	r3

	if (!list->head) {
    7ea6:	687b      	ldr	r3, [r7, #4]
    7ea8:	681b      	ldr	r3, [r3, #0]
    7eaa:	2b00      	cmp	r3, #0
    7eac:	d109      	bne.n	7ec2 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    7eae:	687b      	ldr	r3, [r7, #4]
    7eb0:	683a      	ldr	r2, [r7, #0]
    7eb2:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    7eb4:	683b      	ldr	r3, [r7, #0]
    7eb6:	2200      	movs	r2, #0
    7eb8:	601a      	str	r2, [r3, #0]
		return;
    7eba:	e00c      	b.n	7ed6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    7ebc:	68fb      	ldr	r3, [r7, #12]
    7ebe:	681b      	ldr	r3, [r3, #0]
    7ec0:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    7ec2:	68fb      	ldr	r3, [r7, #12]
    7ec4:	681b      	ldr	r3, [r3, #0]
    7ec6:	2b00      	cmp	r3, #0
    7ec8:	d1f8      	bne.n	7ebc <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    7eca:	68fb      	ldr	r3, [r7, #12]
    7ecc:	683a      	ldr	r2, [r7, #0]
    7ece:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    7ed0:	683b      	ldr	r3, [r7, #0]
    7ed2:	2200      	movs	r2, #0
    7ed4:	601a      	str	r2, [r3, #0]
}
    7ed6:	3710      	adds	r7, #16
    7ed8:	46bd      	mov	sp, r7
    7eda:	bd80      	pop	{r7, pc}
    7edc:	00007db9 	.word	0x00007db9
    7ee0:	0001f5b4 	.word	0x0001f5b4
    7ee4:	00007d91 	.word	0x00007d91

00007ee8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    7ee8:	b480      	push	{r7}
    7eea:	b085      	sub	sp, #20
    7eec:	af00      	add	r7, sp, #0
    7eee:	6078      	str	r0, [r7, #4]
	if (list->head) {
    7ef0:	687b      	ldr	r3, [r7, #4]
    7ef2:	681b      	ldr	r3, [r3, #0]
    7ef4:	2b00      	cmp	r3, #0
    7ef6:	d009      	beq.n	7f0c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    7ef8:	687b      	ldr	r3, [r7, #4]
    7efa:	681b      	ldr	r3, [r3, #0]
    7efc:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    7efe:	687b      	ldr	r3, [r7, #4]
    7f00:	681b      	ldr	r3, [r3, #0]
    7f02:	681a      	ldr	r2, [r3, #0]
    7f04:	687b      	ldr	r3, [r7, #4]
    7f06:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    7f08:	68fb      	ldr	r3, [r7, #12]
    7f0a:	e000      	b.n	7f0e <list_remove_head+0x26>
	}

	return NULL;
    7f0c:	2300      	movs	r3, #0
}
    7f0e:	4618      	mov	r0, r3
    7f10:	3714      	adds	r7, #20
    7f12:	46bd      	mov	sp, r7
    7f14:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f18:	4770      	bx	lr

00007f1a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    7f1a:	b480      	push	{r7}
    7f1c:	b085      	sub	sp, #20
    7f1e:	af00      	add	r7, sp, #0
    7f20:	6078      	str	r0, [r7, #4]
    7f22:	6039      	str	r1, [r7, #0]
	if (!element) {
    7f24:	683b      	ldr	r3, [r7, #0]
    7f26:	2b00      	cmp	r3, #0
    7f28:	d101      	bne.n	7f2e <list_delete_element+0x14>
		return false;
    7f2a:	2300      	movs	r3, #0
    7f2c:	e024      	b.n	7f78 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    7f2e:	687b      	ldr	r3, [r7, #4]
    7f30:	681a      	ldr	r2, [r3, #0]
    7f32:	683b      	ldr	r3, [r7, #0]
    7f34:	429a      	cmp	r2, r3
    7f36:	d106      	bne.n	7f46 <list_delete_element+0x2c>
		list->head = list->head->next;
    7f38:	687b      	ldr	r3, [r7, #4]
    7f3a:	681b      	ldr	r3, [r3, #0]
    7f3c:	681a      	ldr	r2, [r3, #0]
    7f3e:	687b      	ldr	r3, [r7, #4]
    7f40:	601a      	str	r2, [r3, #0]
		return true;
    7f42:	2301      	movs	r3, #1
    7f44:	e018      	b.n	7f78 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    7f46:	687b      	ldr	r3, [r7, #4]
    7f48:	681b      	ldr	r3, [r3, #0]
    7f4a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    7f4c:	e002      	b.n	7f54 <list_delete_element+0x3a>
			it = it->next;
    7f4e:	68fb      	ldr	r3, [r7, #12]
    7f50:	681b      	ldr	r3, [r3, #0]
    7f52:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    7f54:	68fb      	ldr	r3, [r7, #12]
    7f56:	2b00      	cmp	r3, #0
    7f58:	d004      	beq.n	7f64 <list_delete_element+0x4a>
    7f5a:	68fb      	ldr	r3, [r7, #12]
    7f5c:	681a      	ldr	r2, [r3, #0]
    7f5e:	683b      	ldr	r3, [r7, #0]
    7f60:	429a      	cmp	r2, r3
    7f62:	d1f4      	bne.n	7f4e <list_delete_element+0x34>
		}
		if (it) {
    7f64:	68fb      	ldr	r3, [r7, #12]
    7f66:	2b00      	cmp	r3, #0
    7f68:	d005      	beq.n	7f76 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    7f6a:	683b      	ldr	r3, [r7, #0]
    7f6c:	681a      	ldr	r2, [r3, #0]
    7f6e:	68fb      	ldr	r3, [r7, #12]
    7f70:	601a      	str	r2, [r3, #0]
			return true;
    7f72:	2301      	movs	r3, #1
    7f74:	e000      	b.n	7f78 <list_delete_element+0x5e>
		}
	}

	return false;
    7f76:	2300      	movs	r3, #0
}
    7f78:	4618      	mov	r0, r3
    7f7a:	3714      	adds	r7, #20
    7f7c:	46bd      	mov	sp, r7
    7f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f82:	4770      	bx	lr

00007f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    7f84:	b480      	push	{r7}
    7f86:	b083      	sub	sp, #12
    7f88:	af00      	add	r7, sp, #0
    7f8a:	4603      	mov	r3, r0
    7f8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7f92:	2b00      	cmp	r3, #0
    7f94:	db0b      	blt.n	7fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f96:	4909      	ldr	r1, [pc, #36]	; (7fbc <__NVIC_EnableIRQ+0x38>)
    7f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7f9c:	095b      	lsrs	r3, r3, #5
    7f9e:	88fa      	ldrh	r2, [r7, #6]
    7fa0:	f002 021f 	and.w	r2, r2, #31
    7fa4:	2001      	movs	r0, #1
    7fa6:	fa00 f202 	lsl.w	r2, r0, r2
    7faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    7fae:	bf00      	nop
    7fb0:	370c      	adds	r7, #12
    7fb2:	46bd      	mov	sp, r7
    7fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fb8:	4770      	bx	lr
    7fba:	bf00      	nop
    7fbc:	e000e100 	.word	0xe000e100

00007fc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    7fc0:	b480      	push	{r7}
    7fc2:	b083      	sub	sp, #12
    7fc4:	af00      	add	r7, sp, #0
    7fc6:	4603      	mov	r3, r0
    7fc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7fce:	2b00      	cmp	r3, #0
    7fd0:	db10      	blt.n	7ff4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7fd2:	490b      	ldr	r1, [pc, #44]	; (8000 <__NVIC_DisableIRQ+0x40>)
    7fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7fd8:	095b      	lsrs	r3, r3, #5
    7fda:	88fa      	ldrh	r2, [r7, #6]
    7fdc:	f002 021f 	and.w	r2, r2, #31
    7fe0:	2001      	movs	r0, #1
    7fe2:	fa00 f202 	lsl.w	r2, r0, r2
    7fe6:	3320      	adds	r3, #32
    7fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7fec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ff0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    7ff4:	bf00      	nop
    7ff6:	370c      	adds	r7, #12
    7ff8:	46bd      	mov	sp, r7
    7ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ffe:	4770      	bx	lr
    8000:	e000e100 	.word	0xe000e100

00008004 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    8004:	b480      	push	{r7}
    8006:	b083      	sub	sp, #12
    8008:	af00      	add	r7, sp, #0
    800a:	4603      	mov	r3, r0
    800c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    800e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8012:	2b00      	cmp	r3, #0
    8014:	db0c      	blt.n	8030 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8016:	4909      	ldr	r1, [pc, #36]	; (803c <__NVIC_ClearPendingIRQ+0x38>)
    8018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    801c:	095b      	lsrs	r3, r3, #5
    801e:	88fa      	ldrh	r2, [r7, #6]
    8020:	f002 021f 	and.w	r2, r2, #31
    8024:	2001      	movs	r0, #1
    8026:	fa00 f202 	lsl.w	r2, r0, r2
    802a:	3360      	adds	r3, #96	; 0x60
    802c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    8030:	bf00      	nop
    8032:	370c      	adds	r7, #12
    8034:	46bd      	mov	sp, r7
    8036:	f85d 7b04 	ldr.w	r7, [sp], #4
    803a:	4770      	bx	lr
    803c:	e000e100 	.word	0xe000e100

00008040 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    8040:	b480      	push	{r7}
    8042:	b083      	sub	sp, #12
    8044:	af00      	add	r7, sp, #0
    8046:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    8048:	687b      	ldr	r3, [r7, #4]
    804a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    804c:	095b      	lsrs	r3, r3, #5
    804e:	f003 0301 	and.w	r3, r3, #1
    8052:	2b00      	cmp	r3, #0
    8054:	bf14      	ite	ne
    8056:	2301      	movne	r3, #1
    8058:	2300      	moveq	r3, #0
    805a:	b2db      	uxtb	r3, r3
}
    805c:	4618      	mov	r0, r3
    805e:	370c      	adds	r7, #12
    8060:	46bd      	mov	sp, r7
    8062:	f85d 7b04 	ldr.w	r7, [sp], #4
    8066:	4770      	bx	lr

00008068 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    8068:	b480      	push	{r7}
    806a:	b083      	sub	sp, #12
    806c:	af00      	add	r7, sp, #0
    806e:	6078      	str	r0, [r7, #4]
    8070:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    8072:	687b      	ldr	r3, [r7, #4]
    8074:	683a      	ldr	r2, [r7, #0]
    8076:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8078:	bf00      	nop
    807a:	370c      	adds	r7, #12
    807c:	46bd      	mov	sp, r7
    807e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8082:	4770      	bx	lr

00008084 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    8084:	b480      	push	{r7}
    8086:	b083      	sub	sp, #12
    8088:	af00      	add	r7, sp, #0
    808a:	6078      	str	r0, [r7, #4]
    808c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    808e:	687b      	ldr	r3, [r7, #4]
    8090:	683a      	ldr	r2, [r7, #0]
    8092:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8094:	bf00      	nop
    8096:	370c      	adds	r7, #12
    8098:	46bd      	mov	sp, r7
    809a:	f85d 7b04 	ldr.w	r7, [sp], #4
    809e:	4770      	bx	lr

000080a0 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    80a0:	b480      	push	{r7}
    80a2:	b083      	sub	sp, #12
    80a4:	af00      	add	r7, sp, #0
    80a6:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    80a8:	687b      	ldr	r3, [r7, #4]
    80aa:	699b      	ldr	r3, [r3, #24]
    80ac:	f043 0201 	orr.w	r2, r3, #1
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    80b4:	bf00      	nop
    80b6:	370c      	adds	r7, #12
    80b8:	46bd      	mov	sp, r7
    80ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    80be:	4770      	bx	lr

000080c0 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    80c0:	b480      	push	{r7}
    80c2:	b085      	sub	sp, #20
    80c4:	af00      	add	r7, sp, #0
    80c6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    80c8:	687b      	ldr	r3, [r7, #4]
    80ca:	699b      	ldr	r3, [r3, #24]
    80cc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    80ce:	68fb      	ldr	r3, [r7, #12]
    80d0:	f003 0301 	and.w	r3, r3, #1
    80d4:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    80d6:	68fb      	ldr	r3, [r7, #12]
    80d8:	2b00      	cmp	r3, #0
    80da:	bf14      	ite	ne
    80dc:	2301      	movne	r3, #1
    80de:	2300      	moveq	r3, #0
    80e0:	b2db      	uxtb	r3, r3
}
    80e2:	4618      	mov	r0, r3
    80e4:	3714      	adds	r7, #20
    80e6:	46bd      	mov	sp, r7
    80e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    80ec:	4770      	bx	lr

000080ee <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    80ee:	b480      	push	{r7}
    80f0:	b083      	sub	sp, #12
    80f2:	af00      	add	r7, sp, #0
    80f4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    80f6:	687b      	ldr	r3, [r7, #4]
    80f8:	699b      	ldr	r3, [r3, #24]
    80fa:	f023 0201 	bic.w	r2, r3, #1
    80fe:	687b      	ldr	r3, [r7, #4]
    8100:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8102:	bf00      	nop
    8104:	370c      	adds	r7, #12
    8106:	46bd      	mov	sp, r7
    8108:	f85d 7b04 	ldr.w	r7, [sp], #4
    810c:	4770      	bx	lr

0000810e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    810e:	b480      	push	{r7}
    8110:	b083      	sub	sp, #12
    8112:	af00      	add	r7, sp, #0
    8114:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    8116:	687b      	ldr	r3, [r7, #4]
    8118:	699b      	ldr	r3, [r3, #24]
    811a:	f043 0202 	orr.w	r2, r3, #2
    811e:	687b      	ldr	r3, [r7, #4]
    8120:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8122:	bf00      	nop
    8124:	370c      	adds	r7, #12
    8126:	46bd      	mov	sp, r7
    8128:	f85d 7b04 	ldr.w	r7, [sp], #4
    812c:	4770      	bx	lr

0000812e <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    812e:	b480      	push	{r7}
    8130:	b083      	sub	sp, #12
    8132:	af00      	add	r7, sp, #0
    8134:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    8136:	687b      	ldr	r3, [r7, #4]
    8138:	699b      	ldr	r3, [r3, #24]
    813a:	f023 0202 	bic.w	r2, r3, #2
    813e:	687b      	ldr	r3, [r7, #4]
    8140:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8142:	bf00      	nop
    8144:	370c      	adds	r7, #12
    8146:	46bd      	mov	sp, r7
    8148:	f85d 7b04 	ldr.w	r7, [sp], #4
    814c:	4770      	bx	lr

0000814e <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    814e:	b480      	push	{r7}
    8150:	b083      	sub	sp, #12
    8152:	af00      	add	r7, sp, #0
    8154:	6078      	str	r0, [r7, #4]
    8156:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	699a      	ldr	r2, [r3, #24]
    815c:	683b      	ldr	r3, [r7, #0]
    815e:	431a      	orrs	r2, r3
    8160:	687b      	ldr	r3, [r7, #4]
    8162:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8164:	bf00      	nop
    8166:	370c      	adds	r7, #12
    8168:	46bd      	mov	sp, r7
    816a:	f85d 7b04 	ldr.w	r7, [sp], #4
    816e:	4770      	bx	lr

00008170 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    8170:	b480      	push	{r7}
    8172:	b083      	sub	sp, #12
    8174:	af00      	add	r7, sp, #0
    8176:	6078      	str	r0, [r7, #4]
    8178:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    817a:	687b      	ldr	r3, [r7, #4]
    817c:	683a      	ldr	r2, [r7, #0]
    817e:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8180:	bf00      	nop
    8182:	370c      	adds	r7, #12
    8184:	46bd      	mov	sp, r7
    8186:	f85d 7b04 	ldr.w	r7, [sp], #4
    818a:	4770      	bx	lr

0000818c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    818c:	b480      	push	{r7}
    818e:	b083      	sub	sp, #12
    8190:	af00      	add	r7, sp, #0
    8192:	6078      	str	r0, [r7, #4]
    8194:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    8196:	687b      	ldr	r3, [r7, #4]
    8198:	683a      	ldr	r2, [r7, #0]
    819a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    819c:	bf00      	nop
    819e:	370c      	adds	r7, #12
    81a0:	46bd      	mov	sp, r7
    81a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81a6:	4770      	bx	lr

000081a8 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    81a8:	b480      	push	{r7}
    81aa:	b083      	sub	sp, #12
    81ac:	af00      	add	r7, sp, #0
    81ae:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    81b0:	687b      	ldr	r3, [r7, #4]
    81b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    81b4:	4618      	mov	r0, r3
    81b6:	370c      	adds	r7, #12
    81b8:	46bd      	mov	sp, r7
    81ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    81be:	4770      	bx	lr

000081c0 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    81c0:	b480      	push	{r7}
    81c2:	b083      	sub	sp, #12
    81c4:	af00      	add	r7, sp, #0
    81c6:	6078      	str	r0, [r7, #4]
    81c8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    81ca:	687b      	ldr	r3, [r7, #4]
    81cc:	683a      	ldr	r2, [r7, #0]
    81ce:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    81d0:	bf00      	nop
    81d2:	370c      	adds	r7, #12
    81d4:	46bd      	mov	sp, r7
    81d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    81da:	4770      	bx	lr

000081dc <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    81dc:	b480      	push	{r7}
    81de:	b083      	sub	sp, #12
    81e0:	af00      	add	r7, sp, #0
    81e2:	6078      	str	r0, [r7, #4]
    81e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    81e6:	687b      	ldr	r3, [r7, #4]
    81e8:	683a      	ldr	r2, [r7, #0]
    81ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    81ee:	bf00      	nop
    81f0:	370c      	adds	r7, #12
    81f2:	46bd      	mov	sp, r7
    81f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81f8:	4770      	bx	lr

000081fa <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    81fa:	b480      	push	{r7}
    81fc:	b083      	sub	sp, #12
    81fe:	af00      	add	r7, sp, #0
    8200:	6078      	str	r0, [r7, #4]
    8202:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    8204:	687b      	ldr	r3, [r7, #4]
    8206:	683a      	ldr	r2, [r7, #0]
    8208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    820c:	bf00      	nop
    820e:	370c      	adds	r7, #12
    8210:	46bd      	mov	sp, r7
    8212:	f85d 7b04 	ldr.w	r7, [sp], #4
    8216:	4770      	bx	lr

00008218 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    8218:	b480      	push	{r7}
    821a:	b083      	sub	sp, #12
    821c:	af00      	add	r7, sp, #0
    821e:	6078      	str	r0, [r7, #4]
    8220:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    8222:	687b      	ldr	r3, [r7, #4]
    8224:	683a      	ldr	r2, [r7, #0]
    8226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    822a:	bf00      	nop
    822c:	370c      	adds	r7, #12
    822e:	46bd      	mov	sp, r7
    8230:	f85d 7b04 	ldr.w	r7, [sp], #4
    8234:	4770      	bx	lr

00008236 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    8236:	b480      	push	{r7}
    8238:	b083      	sub	sp, #12
    823a:	af00      	add	r7, sp, #0
    823c:	6078      	str	r0, [r7, #4]
    823e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    8240:	687b      	ldr	r3, [r7, #4]
    8242:	683a      	ldr	r2, [r7, #0]
    8244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    8248:	bf00      	nop
    824a:	370c      	adds	r7, #12
    824c:	46bd      	mov	sp, r7
    824e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8252:	4770      	bx	lr

00008254 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    8254:	b480      	push	{r7}
    8256:	b083      	sub	sp, #12
    8258:	af00      	add	r7, sp, #0
    825a:	6078      	str	r0, [r7, #4]
    825c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    825e:	687b      	ldr	r3, [r7, #4]
    8260:	683a      	ldr	r2, [r7, #0]
    8262:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    8266:	bf00      	nop
    8268:	370c      	adds	r7, #12
    826a:	46bd      	mov	sp, r7
    826c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8270:	4770      	bx	lr

00008272 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    8272:	b480      	push	{r7}
    8274:	b083      	sub	sp, #12
    8276:	af00      	add	r7, sp, #0
    8278:	6078      	str	r0, [r7, #4]
    827a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    827c:	687b      	ldr	r3, [r7, #4]
    827e:	683a      	ldr	r2, [r7, #0]
    8280:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    8284:	bf00      	nop
    8286:	370c      	adds	r7, #12
    8288:	46bd      	mov	sp, r7
    828a:	f85d 7b04 	ldr.w	r7, [sp], #4
    828e:	4770      	bx	lr

00008290 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    8290:	b480      	push	{r7}
    8292:	b083      	sub	sp, #12
    8294:	af00      	add	r7, sp, #0
    8296:	6078      	str	r0, [r7, #4]
    8298:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    829a:	687b      	ldr	r3, [r7, #4]
    829c:	683a      	ldr	r2, [r7, #0]
    829e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    82a2:	bf00      	nop
    82a4:	370c      	adds	r7, #12
    82a6:	46bd      	mov	sp, r7
    82a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    82ac:	4770      	bx	lr

000082ae <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    82ae:	b480      	push	{r7}
    82b0:	b083      	sub	sp, #12
    82b2:	af00      	add	r7, sp, #0
    82b4:	6078      	str	r0, [r7, #4]
    82b6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    82b8:	687b      	ldr	r3, [r7, #4]
    82ba:	683a      	ldr	r2, [r7, #0]
    82bc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    82c0:	bf00      	nop
    82c2:	370c      	adds	r7, #12
    82c4:	46bd      	mov	sp, r7
    82c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    82ca:	4770      	bx	lr

000082cc <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    82cc:	b480      	push	{r7}
    82ce:	b083      	sub	sp, #12
    82d0:	af00      	add	r7, sp, #0
    82d2:	6078      	str	r0, [r7, #4]
    82d4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    82d6:	687b      	ldr	r3, [r7, #4]
    82d8:	683a      	ldr	r2, [r7, #0]
    82da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    82de:	bf00      	nop
    82e0:	370c      	adds	r7, #12
    82e2:	46bd      	mov	sp, r7
    82e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    82e8:	4770      	bx	lr
	...

000082ec <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    82ec:	b580      	push	{r7, lr}
    82ee:	b082      	sub	sp, #8
    82f0:	af00      	add	r7, sp, #0
    82f2:	6078      	str	r0, [r7, #4]
    82f4:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    82f6:	687b      	ldr	r3, [r7, #4]
    82f8:	683a      	ldr	r2, [r7, #0]
    82fa:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    82fc:	687b      	ldr	r3, [r7, #4]
    82fe:	681b      	ldr	r3, [r3, #0]
    8300:	4618      	mov	r0, r3
    8302:	4b55      	ldr	r3, [pc, #340]	; (8458 <_can_async_init+0x16c>)
    8304:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    8306:	bf00      	nop
    8308:	687b      	ldr	r3, [r7, #4]
    830a:	681b      	ldr	r3, [r3, #0]
    830c:	4618      	mov	r0, r3
    830e:	4b53      	ldr	r3, [pc, #332]	; (845c <_can_async_init+0x170>)
    8310:	4798      	blx	r3
    8312:	4603      	mov	r3, r0
    8314:	f083 0301 	eor.w	r3, r3, #1
    8318:	b2db      	uxtb	r3, r3
    831a:	2b00      	cmp	r3, #0
    831c:	d1f4      	bne.n	8308 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    831e:	687b      	ldr	r3, [r7, #4]
    8320:	681b      	ldr	r3, [r3, #0]
    8322:	4618      	mov	r0, r3
    8324:	4b4e      	ldr	r3, [pc, #312]	; (8460 <_can_async_init+0x174>)
    8326:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    8328:	683b      	ldr	r3, [r7, #0]
    832a:	4a4e      	ldr	r2, [pc, #312]	; (8464 <_can_async_init+0x178>)
    832c:	4293      	cmp	r3, r2
    832e:	d17a      	bne.n	8426 <_can_async_init+0x13a>
		_can1_dev    = dev;
    8330:	4a4d      	ldr	r2, [pc, #308]	; (8468 <_can_async_init+0x17c>)
    8332:	687b      	ldr	r3, [r7, #4]
    8334:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    8336:	687b      	ldr	r3, [r7, #4]
    8338:	4a4c      	ldr	r2, [pc, #304]	; (846c <_can_async_init+0x180>)
    833a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    833c:	687b      	ldr	r3, [r7, #4]
    833e:	681b      	ldr	r3, [r3, #0]
    8340:	f44f 7140 	mov.w	r1, #768	; 0x300
    8344:	4618      	mov	r0, r3
    8346:	4b4a      	ldr	r3, [pc, #296]	; (8470 <_can_async_init+0x184>)
    8348:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    834a:	687b      	ldr	r3, [r7, #4]
    834c:	681b      	ldr	r3, [r3, #0]
    834e:	2102      	movs	r1, #2
    8350:	4618      	mov	r0, r3
    8352:	4b48      	ldr	r3, [pc, #288]	; (8474 <_can_async_init+0x188>)
    8354:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    8356:	687b      	ldr	r3, [r7, #4]
    8358:	681b      	ldr	r3, [r3, #0]
    835a:	4947      	ldr	r1, [pc, #284]	; (8478 <_can_async_init+0x18c>)
    835c:	4618      	mov	r0, r3
    835e:	4b47      	ldr	r3, [pc, #284]	; (847c <_can_async_init+0x190>)
    8360:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    8362:	687b      	ldr	r3, [r7, #4]
    8364:	681b      	ldr	r3, [r3, #0]
    8366:	4946      	ldr	r1, [pc, #280]	; (8480 <_can_async_init+0x194>)
    8368:	4618      	mov	r0, r3
    836a:	4b46      	ldr	r3, [pc, #280]	; (8484 <_can_async_init+0x198>)
    836c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    836e:	687b      	ldr	r3, [r7, #4]
    8370:	681a      	ldr	r2, [r3, #0]
    8372:	4b45      	ldr	r3, [pc, #276]	; (8488 <_can_async_init+0x19c>)
    8374:	b29b      	uxth	r3, r3
    8376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    837a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    837e:	4619      	mov	r1, r3
    8380:	4610      	mov	r0, r2
    8382:	4b42      	ldr	r3, [pc, #264]	; (848c <_can_async_init+0x1a0>)
    8384:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    8386:	687b      	ldr	r3, [r7, #4]
    8388:	681b      	ldr	r3, [r3, #0]
    838a:	2107      	movs	r1, #7
    838c:	4618      	mov	r0, r3
    838e:	4b40      	ldr	r3, [pc, #256]	; (8490 <_can_async_init+0x1a4>)
    8390:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    8392:	687b      	ldr	r3, [r7, #4]
    8394:	681b      	ldr	r3, [r3, #0]
    8396:	2107      	movs	r1, #7
    8398:	4618      	mov	r0, r3
    839a:	4b3e      	ldr	r3, [pc, #248]	; (8494 <_can_async_init+0x1a8>)
    839c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    839e:	687b      	ldr	r3, [r7, #4]
    83a0:	681a      	ldr	r2, [r3, #0]
    83a2:	4b3d      	ldr	r3, [pc, #244]	; (8498 <_can_async_init+0x1ac>)
    83a4:	b29b      	uxth	r3, r3
    83a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    83aa:	4619      	mov	r1, r3
    83ac:	4610      	mov	r0, r2
    83ae:	4b3b      	ldr	r3, [pc, #236]	; (849c <_can_async_init+0x1b0>)
    83b0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    83b2:	687b      	ldr	r3, [r7, #4]
    83b4:	681a      	ldr	r2, [r3, #0]
    83b6:	4b3a      	ldr	r3, [pc, #232]	; (84a0 <_can_async_init+0x1b4>)
    83b8:	b29b      	uxth	r3, r3
    83ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    83be:	4619      	mov	r1, r3
    83c0:	4610      	mov	r0, r2
    83c2:	4b38      	ldr	r3, [pc, #224]	; (84a4 <_can_async_init+0x1b8>)
    83c4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	681b      	ldr	r3, [r3, #0]
    83ca:	2108      	movs	r1, #8
    83cc:	4618      	mov	r0, r3
    83ce:	4b36      	ldr	r3, [pc, #216]	; (84a8 <_can_async_init+0x1bc>)
    83d0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    83d2:	687b      	ldr	r3, [r7, #4]
    83d4:	681a      	ldr	r2, [r3, #0]
    83d6:	4b35      	ldr	r3, [pc, #212]	; (84ac <_can_async_init+0x1c0>)
    83d8:	b29b      	uxth	r3, r3
    83da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    83de:	4619      	mov	r1, r3
    83e0:	4610      	mov	r0, r2
    83e2:	4b33      	ldr	r3, [pc, #204]	; (84b0 <_can_async_init+0x1c4>)
    83e4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    83e6:	687b      	ldr	r3, [r7, #4]
    83e8:	681a      	ldr	r2, [r3, #0]
    83ea:	4b32      	ldr	r3, [pc, #200]	; (84b4 <_can_async_init+0x1c8>)
    83ec:	b29b      	uxth	r3, r3
    83ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    83f2:	4619      	mov	r1, r3
    83f4:	4610      	mov	r0, r2
    83f6:	4b30      	ldr	r3, [pc, #192]	; (84b8 <_can_async_init+0x1cc>)
    83f8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    83fa:	687b      	ldr	r3, [r7, #4]
    83fc:	681b      	ldr	r3, [r3, #0]
    83fe:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    8402:	4618      	mov	r0, r3
    8404:	4b2d      	ldr	r3, [pc, #180]	; (84bc <_can_async_init+0x1d0>)
    8406:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    8408:	204f      	movs	r0, #79	; 0x4f
    840a:	4b2d      	ldr	r3, [pc, #180]	; (84c0 <_can_async_init+0x1d4>)
    840c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    840e:	204f      	movs	r0, #79	; 0x4f
    8410:	4b2c      	ldr	r3, [pc, #176]	; (84c4 <_can_async_init+0x1d8>)
    8412:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    8414:	204f      	movs	r0, #79	; 0x4f
    8416:	4b2c      	ldr	r3, [pc, #176]	; (84c8 <_can_async_init+0x1dc>)
    8418:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    841a:	687b      	ldr	r3, [r7, #4]
    841c:	681b      	ldr	r3, [r3, #0]
    841e:	2101      	movs	r1, #1
    8420:	4618      	mov	r0, r3
    8422:	4b2a      	ldr	r3, [pc, #168]	; (84cc <_can_async_init+0x1e0>)
    8424:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    8426:	687b      	ldr	r3, [r7, #4]
    8428:	681b      	ldr	r3, [r3, #0]
    842a:	4618      	mov	r0, r3
    842c:	4b28      	ldr	r3, [pc, #160]	; (84d0 <_can_async_init+0x1e4>)
    842e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    8430:	687b      	ldr	r3, [r7, #4]
    8432:	681b      	ldr	r3, [r3, #0]
    8434:	4618      	mov	r0, r3
    8436:	4b27      	ldr	r3, [pc, #156]	; (84d4 <_can_async_init+0x1e8>)
    8438:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    843a:	bf00      	nop
    843c:	687b      	ldr	r3, [r7, #4]
    843e:	681b      	ldr	r3, [r3, #0]
    8440:	4618      	mov	r0, r3
    8442:	4b06      	ldr	r3, [pc, #24]	; (845c <_can_async_init+0x170>)
    8444:	4798      	blx	r3
    8446:	4603      	mov	r3, r0
    8448:	2b00      	cmp	r3, #0
    844a:	d1f7      	bne.n	843c <_can_async_init+0x150>
	};

	return ERR_NONE;
    844c:	2300      	movs	r3, #0
}
    844e:	4618      	mov	r0, r3
    8450:	3708      	adds	r7, #8
    8452:	46bd      	mov	sp, r7
    8454:	bd80      	pop	{r7, pc}
    8456:	bf00      	nop
    8458:	000080a1 	.word	0x000080a1
    845c:	000080c1 	.word	0x000080c1
    8460:	0000810f 	.word	0x0000810f
    8464:	42000400 	.word	0x42000400
    8468:	20008744 	.word	0x20008744
    846c:	20000068 	.word	0x20000068
    8470:	0000814f 	.word	0x0000814f
    8474:	00008069 	.word	0x00008069
    8478:	00010c01 	.word	0x00010c01
    847c:	00008171 	.word	0x00008171
    8480:	00010c10 	.word	0x00010c10
    8484:	00008085 	.word	0x00008085
    8488:	2000a3a4 	.word	0x2000a3a4
    848c:	00008255 	.word	0x00008255
    8490:	00008273 	.word	0x00008273
    8494:	000082af 	.word	0x000082af
    8498:	2000a35c 	.word	0x2000a35c
    849c:	00008291 	.word	0x00008291
    84a0:	200086a4 	.word	0x200086a4
    84a4:	000082cd 	.word	0x000082cd
    84a8:	000081dd 	.word	0x000081dd
    84ac:	200086b4 	.word	0x200086b4
    84b0:	000081fb 	.word	0x000081fb
    84b4:	20008734 	.word	0x20008734
    84b8:	00008219 	.word	0x00008219
    84bc:	00008237 	.word	0x00008237
    84c0:	00007fc1 	.word	0x00007fc1
    84c4:	00008005 	.word	0x00008005
    84c8:	00007f85 	.word	0x00007f85
    84cc:	000081c1 	.word	0x000081c1
    84d0:	0000812f 	.word	0x0000812f
    84d4:	000080ef 	.word	0x000080ef

000084d8 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    84d8:	b590      	push	{r4, r7, lr}
    84da:	b083      	sub	sp, #12
    84dc:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    84de:	4b2c      	ldr	r3, [pc, #176]	; (8590 <CAN1_Handler+0xb8>)
    84e0:	681b      	ldr	r3, [r3, #0]
    84e2:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    84e4:	687b      	ldr	r3, [r7, #4]
    84e6:	681b      	ldr	r3, [r3, #0]
    84e8:	4618      	mov	r0, r3
    84ea:	4b2a      	ldr	r3, [pc, #168]	; (8594 <CAN1_Handler+0xbc>)
    84ec:	4798      	blx	r3
    84ee:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    84f0:	683b      	ldr	r3, [r7, #0]
    84f2:	f003 0301 	and.w	r3, r3, #1
    84f6:	2b00      	cmp	r3, #0
    84f8:	d003      	beq.n	8502 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    84fa:	687b      	ldr	r3, [r7, #4]
    84fc:	689b      	ldr	r3, [r3, #8]
    84fe:	6878      	ldr	r0, [r7, #4]
    8500:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    8502:	683b      	ldr	r3, [r7, #0]
    8504:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8508:	2b00      	cmp	r3, #0
    850a:	d003      	beq.n	8514 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    850c:	687b      	ldr	r3, [r7, #4]
    850e:	685b      	ldr	r3, [r3, #4]
    8510:	6878      	ldr	r0, [r7, #4]
    8512:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    8514:	683b      	ldr	r3, [r7, #0]
    8516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    851a:	2b00      	cmp	r3, #0
    851c:	d004      	beq.n	8528 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    851e:	687b      	ldr	r3, [r7, #4]
    8520:	68db      	ldr	r3, [r3, #12]
    8522:	2103      	movs	r1, #3
    8524:	6878      	ldr	r0, [r7, #4]
    8526:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    8528:	683b      	ldr	r3, [r7, #0]
    852a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    852e:	2b00      	cmp	r3, #0
    8530:	d004      	beq.n	853c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    8532:	687b      	ldr	r3, [r7, #4]
    8534:	68db      	ldr	r3, [r3, #12]
    8536:	2100      	movs	r1, #0
    8538:	6878      	ldr	r0, [r7, #4]
    853a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    853c:	683b      	ldr	r3, [r7, #0]
    853e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    8542:	2b00      	cmp	r3, #0
    8544:	d00f      	beq.n	8566 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    8546:	687b      	ldr	r3, [r7, #4]
    8548:	68dc      	ldr	r4, [r3, #12]
    854a:	687b      	ldr	r3, [r7, #4]
    854c:	681b      	ldr	r3, [r3, #0]
    854e:	4618      	mov	r0, r3
    8550:	4b11      	ldr	r3, [pc, #68]	; (8598 <CAN1_Handler+0xc0>)
    8552:	4798      	blx	r3
    8554:	4603      	mov	r3, r0
    8556:	2b00      	cmp	r3, #0
    8558:	d001      	beq.n	855e <CAN1_Handler+0x86>
    855a:	2302      	movs	r3, #2
    855c:	e000      	b.n	8560 <CAN1_Handler+0x88>
    855e:	2301      	movs	r3, #1
    8560:	4619      	mov	r1, r3
    8562:	6878      	ldr	r0, [r7, #4]
    8564:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    8566:	683b      	ldr	r3, [r7, #0]
    8568:	f003 0308 	and.w	r3, r3, #8
    856c:	2b00      	cmp	r3, #0
    856e:	d004      	beq.n	857a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    8570:	687b      	ldr	r3, [r7, #4]
    8572:	68db      	ldr	r3, [r3, #12]
    8574:	2104      	movs	r1, #4
    8576:	6878      	ldr	r0, [r7, #4]
    8578:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    857a:	687b      	ldr	r3, [r7, #4]
    857c:	681b      	ldr	r3, [r3, #0]
    857e:	6839      	ldr	r1, [r7, #0]
    8580:	4618      	mov	r0, r3
    8582:	4b06      	ldr	r3, [pc, #24]	; (859c <CAN1_Handler+0xc4>)
    8584:	4798      	blx	r3
}
    8586:	bf00      	nop
    8588:	370c      	adds	r7, #12
    858a:	46bd      	mov	sp, r7
    858c:	bd90      	pop	{r4, r7, pc}
    858e:	bf00      	nop
    8590:	20008744 	.word	0x20008744
    8594:	000081a9 	.word	0x000081a9
    8598:	00008041 	.word	0x00008041
    859c:	0000818d 	.word	0x0000818d

000085a0 <__NVIC_SetPendingIRQ>:
{
    85a0:	b480      	push	{r7}
    85a2:	b083      	sub	sp, #12
    85a4:	af00      	add	r7, sp, #0
    85a6:	4603      	mov	r3, r0
    85a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    85aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    85ae:	2b00      	cmp	r3, #0
    85b0:	db0c      	blt.n	85cc <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    85b2:	4909      	ldr	r1, [pc, #36]	; (85d8 <__NVIC_SetPendingIRQ+0x38>)
    85b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    85b8:	095b      	lsrs	r3, r3, #5
    85ba:	88fa      	ldrh	r2, [r7, #6]
    85bc:	f002 021f 	and.w	r2, r2, #31
    85c0:	2001      	movs	r0, #1
    85c2:	fa00 f202 	lsl.w	r2, r0, r2
    85c6:	3340      	adds	r3, #64	; 0x40
    85c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    85cc:	bf00      	nop
    85ce:	370c      	adds	r7, #12
    85d0:	46bd      	mov	sp, r7
    85d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d6:	4770      	bx	lr
    85d8:	e000e100 	.word	0xe000e100

000085dc <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    85dc:	b580      	push	{r7, lr}
    85de:	b082      	sub	sp, #8
    85e0:	af00      	add	r7, sp, #0
    85e2:	4603      	mov	r3, r0
    85e4:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    85e6:	79fb      	ldrb	r3, [r7, #7]
    85e8:	b21b      	sxth	r3, r3
    85ea:	4618      	mov	r0, r3
    85ec:	4b02      	ldr	r3, [pc, #8]	; (85f8 <_irq_set+0x1c>)
    85ee:	4798      	blx	r3
}
    85f0:	bf00      	nop
    85f2:	3708      	adds	r7, #8
    85f4:	46bd      	mov	sp, r7
    85f6:	bd80      	pop	{r7, pc}
    85f8:	000085a1 	.word	0x000085a1

000085fc <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    85fc:	b480      	push	{r7}
    85fe:	b083      	sub	sp, #12
    8600:	af00      	add	r7, sp, #0
    8602:	4603      	mov	r3, r0
    8604:	6039      	str	r1, [r7, #0]
    8606:	80fb      	strh	r3, [r7, #6]
    8608:	4613      	mov	r3, r2
    860a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    860c:	797b      	ldrb	r3, [r7, #5]
    860e:	3b04      	subs	r3, #4
    8610:	2b05      	cmp	r3, #5
    8612:	d86b      	bhi.n	86ec <_get_cycles_for_us_internal+0xf0>
    8614:	a201      	add	r2, pc, #4	; (adr r2, 861c <_get_cycles_for_us_internal+0x20>)
    8616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    861a:	bf00      	nop
    861c:	000086cb 	.word	0x000086cb
    8620:	000086ab 	.word	0x000086ab
    8624:	0000868d 	.word	0x0000868d
    8628:	0000866f 	.word	0x0000866f
    862c:	00008651 	.word	0x00008651
    8630:	00008635 	.word	0x00008635
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    8634:	88fb      	ldrh	r3, [r7, #6]
    8636:	683a      	ldr	r2, [r7, #0]
    8638:	4935      	ldr	r1, [pc, #212]	; (8710 <_get_cycles_for_us_internal+0x114>)
    863a:	fba1 1202 	umull	r1, r2, r1, r2
    863e:	0c92      	lsrs	r2, r2, #18
    8640:	fb02 f303 	mul.w	r3, r2, r3
    8644:	3302      	adds	r3, #2
    8646:	4a33      	ldr	r2, [pc, #204]	; (8714 <_get_cycles_for_us_internal+0x118>)
    8648:	fba2 2303 	umull	r2, r3, r2, r3
    864c:	085b      	lsrs	r3, r3, #1
    864e:	e059      	b.n	8704 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    8650:	88fb      	ldrh	r3, [r7, #6]
    8652:	683a      	ldr	r2, [r7, #0]
    8654:	0952      	lsrs	r2, r2, #5
    8656:	4930      	ldr	r1, [pc, #192]	; (8718 <_get_cycles_for_us_internal+0x11c>)
    8658:	fba1 1202 	umull	r1, r2, r1, r2
    865c:	09d2      	lsrs	r2, r2, #7
    865e:	fb02 f303 	mul.w	r3, r2, r3
    8662:	331d      	adds	r3, #29
    8664:	4a2d      	ldr	r2, [pc, #180]	; (871c <_get_cycles_for_us_internal+0x120>)
    8666:	fba2 2303 	umull	r2, r3, r2, r3
    866a:	091b      	lsrs	r3, r3, #4
    866c:	e04a      	b.n	8704 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    866e:	88fb      	ldrh	r3, [r7, #6]
    8670:	683a      	ldr	r2, [r7, #0]
    8672:	492b      	ldr	r1, [pc, #172]	; (8720 <_get_cycles_for_us_internal+0x124>)
    8674:	fba1 1202 	umull	r1, r2, r1, r2
    8678:	0b52      	lsrs	r2, r2, #13
    867a:	fb02 f303 	mul.w	r3, r2, r3
    867e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    8682:	4a28      	ldr	r2, [pc, #160]	; (8724 <_get_cycles_for_us_internal+0x128>)
    8684:	fba2 2303 	umull	r2, r3, r2, r3
    8688:	095b      	lsrs	r3, r3, #5
    868a:	e03b      	b.n	8704 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    868c:	88fb      	ldrh	r3, [r7, #6]
    868e:	683a      	ldr	r2, [r7, #0]
    8690:	4925      	ldr	r1, [pc, #148]	; (8728 <_get_cycles_for_us_internal+0x12c>)
    8692:	fba1 1202 	umull	r1, r2, r1, r2
    8696:	0992      	lsrs	r2, r2, #6
    8698:	fb02 f303 	mul.w	r3, r2, r3
    869c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    86a0:	4a22      	ldr	r2, [pc, #136]	; (872c <_get_cycles_for_us_internal+0x130>)
    86a2:	fba2 2303 	umull	r2, r3, r2, r3
    86a6:	099b      	lsrs	r3, r3, #6
    86a8:	e02c      	b.n	8704 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    86aa:	88fb      	ldrh	r3, [r7, #6]
    86ac:	683a      	ldr	r2, [r7, #0]
    86ae:	4920      	ldr	r1, [pc, #128]	; (8730 <_get_cycles_for_us_internal+0x134>)
    86b0:	fba1 1202 	umull	r1, r2, r1, r2
    86b4:	0952      	lsrs	r2, r2, #5
    86b6:	fb02 f303 	mul.w	r3, r2, r3
    86ba:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    86be:	332f      	adds	r3, #47	; 0x2f
    86c0:	4a1c      	ldr	r2, [pc, #112]	; (8734 <_get_cycles_for_us_internal+0x138>)
    86c2:	fba2 2303 	umull	r2, r3, r2, r3
    86c6:	0b5b      	lsrs	r3, r3, #13
    86c8:	e01c      	b.n	8704 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    86ca:	88fb      	ldrh	r3, [r7, #6]
    86cc:	683a      	ldr	r2, [r7, #0]
    86ce:	491a      	ldr	r1, [pc, #104]	; (8738 <_get_cycles_for_us_internal+0x13c>)
    86d0:	fba1 1202 	umull	r1, r2, r1, r2
    86d4:	08d2      	lsrs	r2, r2, #3
    86d6:	fb02 f303 	mul.w	r3, r2, r3
    86da:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    86de:	f203 33df 	addw	r3, r3, #991	; 0x3df
    86e2:	4a16      	ldr	r2, [pc, #88]	; (873c <_get_cycles_for_us_internal+0x140>)
    86e4:	fba2 2303 	umull	r2, r3, r2, r3
    86e8:	0c5b      	lsrs	r3, r3, #17
    86ea:	e00b      	b.n	8704 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    86ec:	88fb      	ldrh	r3, [r7, #6]
    86ee:	683a      	ldr	r2, [r7, #0]
    86f0:	fb02 f303 	mul.w	r3, r2, r3
    86f4:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    86f8:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    86fc:	4a10      	ldr	r2, [pc, #64]	; (8740 <_get_cycles_for_us_internal+0x144>)
    86fe:	fba2 2303 	umull	r2, r3, r2, r3
    8702:	0c9b      	lsrs	r3, r3, #18
	}
}
    8704:	4618      	mov	r0, r3
    8706:	370c      	adds	r7, #12
    8708:	46bd      	mov	sp, r7
    870a:	f85d 7b04 	ldr.w	r7, [sp], #4
    870e:	4770      	bx	lr
    8710:	431bde83 	.word	0x431bde83
    8714:	aaaaaaab 	.word	0xaaaaaaab
    8718:	0a7c5ac5 	.word	0x0a7c5ac5
    871c:	88888889 	.word	0x88888889
    8720:	d1b71759 	.word	0xd1b71759
    8724:	1b4e81b5 	.word	0x1b4e81b5
    8728:	10624dd3 	.word	0x10624dd3
    872c:	057619f1 	.word	0x057619f1
    8730:	51eb851f 	.word	0x51eb851f
    8734:	45e7b273 	.word	0x45e7b273
    8738:	cccccccd 	.word	0xcccccccd
    873c:	6fd91d85 	.word	0x6fd91d85
    8740:	165e9f81 	.word	0x165e9f81

00008744 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    8744:	b580      	push	{r7, lr}
    8746:	b082      	sub	sp, #8
    8748:	af00      	add	r7, sp, #0
    874a:	4603      	mov	r3, r0
    874c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    874e:	88fb      	ldrh	r3, [r7, #6]
    8750:	2209      	movs	r2, #9
    8752:	4904      	ldr	r1, [pc, #16]	; (8764 <_get_cycles_for_us+0x20>)
    8754:	4618      	mov	r0, r3
    8756:	4b04      	ldr	r3, [pc, #16]	; (8768 <_get_cycles_for_us+0x24>)
    8758:	4798      	blx	r3
    875a:	4603      	mov	r3, r0
}
    875c:	4618      	mov	r0, r3
    875e:	3708      	adds	r7, #8
    8760:	46bd      	mov	sp, r7
    8762:	bd80      	pop	{r7, pc}
    8764:	07270e00 	.word	0x07270e00
    8768:	000085fd 	.word	0x000085fd

0000876c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    876c:	b480      	push	{r7}
    876e:	b083      	sub	sp, #12
    8770:	af00      	add	r7, sp, #0
    8772:	4603      	mov	r3, r0
    8774:	6039      	str	r1, [r7, #0]
    8776:	80fb      	strh	r3, [r7, #6]
    8778:	4613      	mov	r3, r2
    877a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    877c:	797b      	ldrb	r3, [r7, #5]
    877e:	3b04      	subs	r3, #4
    8780:	2b05      	cmp	r3, #5
    8782:	d870      	bhi.n	8866 <_get_cycles_for_ms_internal+0xfa>
    8784:	a201      	add	r2, pc, #4	; (adr r2, 878c <_get_cycles_for_ms_internal+0x20>)
    8786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    878a:	bf00      	nop
    878c:	00008849 	.word	0x00008849
    8790:	0000882d 	.word	0x0000882d
    8794:	00008811 	.word	0x00008811
    8798:	000087ed 	.word	0x000087ed
    879c:	000087c9 	.word	0x000087c9
    87a0:	000087a5 	.word	0x000087a5
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    87a4:	88fb      	ldrh	r3, [r7, #6]
    87a6:	683a      	ldr	r2, [r7, #0]
    87a8:	4937      	ldr	r1, [pc, #220]	; (8888 <_get_cycles_for_ms_internal+0x11c>)
    87aa:	fba1 1202 	umull	r1, r2, r1, r2
    87ae:	0c92      	lsrs	r2, r2, #18
    87b0:	fb02 f303 	mul.w	r3, r2, r3
    87b4:	3302      	adds	r3, #2
    87b6:	4a35      	ldr	r2, [pc, #212]	; (888c <_get_cycles_for_ms_internal+0x120>)
    87b8:	fba2 2303 	umull	r2, r3, r2, r3
    87bc:	085b      	lsrs	r3, r3, #1
    87be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    87c2:	fb02 f303 	mul.w	r3, r2, r3
    87c6:	e058      	b.n	887a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    87c8:	88fb      	ldrh	r3, [r7, #6]
    87ca:	683a      	ldr	r2, [r7, #0]
    87cc:	0952      	lsrs	r2, r2, #5
    87ce:	4930      	ldr	r1, [pc, #192]	; (8890 <_get_cycles_for_ms_internal+0x124>)
    87d0:	fba1 1202 	umull	r1, r2, r1, r2
    87d4:	09d2      	lsrs	r2, r2, #7
    87d6:	fb02 f303 	mul.w	r3, r2, r3
    87da:	3302      	adds	r3, #2
    87dc:	4a2b      	ldr	r2, [pc, #172]	; (888c <_get_cycles_for_ms_internal+0x120>)
    87de:	fba2 2303 	umull	r2, r3, r2, r3
    87e2:	085b      	lsrs	r3, r3, #1
    87e4:	2264      	movs	r2, #100	; 0x64
    87e6:	fb02 f303 	mul.w	r3, r2, r3
    87ea:	e046      	b.n	887a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    87ec:	88fb      	ldrh	r3, [r7, #6]
    87ee:	683a      	ldr	r2, [r7, #0]
    87f0:	4928      	ldr	r1, [pc, #160]	; (8894 <_get_cycles_for_ms_internal+0x128>)
    87f2:	fba1 1202 	umull	r1, r2, r1, r2
    87f6:	0b52      	lsrs	r2, r2, #13
    87f8:	fb02 f303 	mul.w	r3, r2, r3
    87fc:	3302      	adds	r3, #2
    87fe:	4a23      	ldr	r2, [pc, #140]	; (888c <_get_cycles_for_ms_internal+0x120>)
    8800:	fba2 2303 	umull	r2, r3, r2, r3
    8804:	085a      	lsrs	r2, r3, #1
    8806:	4613      	mov	r3, r2
    8808:	009b      	lsls	r3, r3, #2
    880a:	4413      	add	r3, r2
    880c:	005b      	lsls	r3, r3, #1
    880e:	e034      	b.n	887a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    8810:	88fb      	ldrh	r3, [r7, #6]
    8812:	683a      	ldr	r2, [r7, #0]
    8814:	4920      	ldr	r1, [pc, #128]	; (8898 <_get_cycles_for_ms_internal+0x12c>)
    8816:	fba1 1202 	umull	r1, r2, r1, r2
    881a:	0992      	lsrs	r2, r2, #6
    881c:	fb02 f303 	mul.w	r3, r2, r3
    8820:	3302      	adds	r3, #2
    8822:	4a1a      	ldr	r2, [pc, #104]	; (888c <_get_cycles_for_ms_internal+0x120>)
    8824:	fba2 2303 	umull	r2, r3, r2, r3
    8828:	085b      	lsrs	r3, r3, #1
    882a:	e026      	b.n	887a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    882c:	88fb      	ldrh	r3, [r7, #6]
    882e:	683a      	ldr	r2, [r7, #0]
    8830:	491a      	ldr	r1, [pc, #104]	; (889c <_get_cycles_for_ms_internal+0x130>)
    8832:	fba1 1202 	umull	r1, r2, r1, r2
    8836:	0952      	lsrs	r2, r2, #5
    8838:	fb02 f303 	mul.w	r3, r2, r3
    883c:	331d      	adds	r3, #29
    883e:	4a18      	ldr	r2, [pc, #96]	; (88a0 <_get_cycles_for_ms_internal+0x134>)
    8840:	fba2 2303 	umull	r2, r3, r2, r3
    8844:	091b      	lsrs	r3, r3, #4
    8846:	e018      	b.n	887a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    8848:	88fb      	ldrh	r3, [r7, #6]
    884a:	683a      	ldr	r2, [r7, #0]
    884c:	4915      	ldr	r1, [pc, #84]	; (88a4 <_get_cycles_for_ms_internal+0x138>)
    884e:	fba1 1202 	umull	r1, r2, r1, r2
    8852:	08d2      	lsrs	r2, r2, #3
    8854:	fb02 f303 	mul.w	r3, r2, r3
    8858:	f203 132b 	addw	r3, r3, #299	; 0x12b
    885c:	4a12      	ldr	r2, [pc, #72]	; (88a8 <_get_cycles_for_ms_internal+0x13c>)
    885e:	fba2 2303 	umull	r2, r3, r2, r3
    8862:	095b      	lsrs	r3, r3, #5
    8864:	e009      	b.n	887a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    8866:	88fb      	ldrh	r3, [r7, #6]
    8868:	683a      	ldr	r2, [r7, #0]
    886a:	fb02 f303 	mul.w	r3, r2, r3
    886e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8872:	4a0e      	ldr	r2, [pc, #56]	; (88ac <_get_cycles_for_ms_internal+0x140>)
    8874:	fba2 2303 	umull	r2, r3, r2, r3
    8878:	099b      	lsrs	r3, r3, #6
	}
}
    887a:	4618      	mov	r0, r3
    887c:	370c      	adds	r7, #12
    887e:	46bd      	mov	sp, r7
    8880:	f85d 7b04 	ldr.w	r7, [sp], #4
    8884:	4770      	bx	lr
    8886:	bf00      	nop
    8888:	431bde83 	.word	0x431bde83
    888c:	aaaaaaab 	.word	0xaaaaaaab
    8890:	0a7c5ac5 	.word	0x0a7c5ac5
    8894:	d1b71759 	.word	0xd1b71759
    8898:	10624dd3 	.word	0x10624dd3
    889c:	51eb851f 	.word	0x51eb851f
    88a0:	88888889 	.word	0x88888889
    88a4:	cccccccd 	.word	0xcccccccd
    88a8:	1b4e81b5 	.word	0x1b4e81b5
    88ac:	057619f1 	.word	0x057619f1

000088b0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    88b0:	b580      	push	{r7, lr}
    88b2:	b082      	sub	sp, #8
    88b4:	af00      	add	r7, sp, #0
    88b6:	4603      	mov	r3, r0
    88b8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    88ba:	88fb      	ldrh	r3, [r7, #6]
    88bc:	2209      	movs	r2, #9
    88be:	4904      	ldr	r1, [pc, #16]	; (88d0 <_get_cycles_for_ms+0x20>)
    88c0:	4618      	mov	r0, r3
    88c2:	4b04      	ldr	r3, [pc, #16]	; (88d4 <_get_cycles_for_ms+0x24>)
    88c4:	4798      	blx	r3
    88c6:	4603      	mov	r3, r0
}
    88c8:	4618      	mov	r0, r3
    88ca:	3708      	adds	r7, #8
    88cc:	46bd      	mov	sp, r7
    88ce:	bd80      	pop	{r7, pc}
    88d0:	07270e00 	.word	0x07270e00
    88d4:	0000876d 	.word	0x0000876d

000088d8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    88d8:	b480      	push	{r7}
    88da:	b083      	sub	sp, #12
    88dc:	af00      	add	r7, sp, #0
    88de:	6078      	str	r0, [r7, #4]
    88e0:	6039      	str	r1, [r7, #0]
    88e2:	bf00      	nop
    88e4:	f3af 8000 	nop.w

000088e8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    88e8:	3901      	subs	r1, #1
    88ea:	d8fd      	bhi.n	88e8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    88ec:	bf00      	nop
    88ee:	370c      	adds	r7, #12
    88f0:	46bd      	mov	sp, r7
    88f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88f6:	4770      	bx	lr

000088f8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    88f8:	b480      	push	{r7}
    88fa:	b083      	sub	sp, #12
    88fc:	af00      	add	r7, sp, #0
    88fe:	6078      	str	r0, [r7, #4]
    8900:	460b      	mov	r3, r1
    8902:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    8904:	687b      	ldr	r3, [r7, #4]
    8906:	881b      	ldrh	r3, [r3, #0]
    8908:	b29a      	uxth	r2, r3
    890a:	887b      	ldrh	r3, [r7, #2]
    890c:	021b      	lsls	r3, r3, #8
    890e:	b29b      	uxth	r3, r3
    8910:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    8914:	b29b      	uxth	r3, r3
    8916:	4313      	orrs	r3, r2
    8918:	b29a      	uxth	r2, r3
    891a:	687b      	ldr	r3, [r7, #4]
    891c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    891e:	bf00      	nop
    8920:	370c      	adds	r7, #12
    8922:	46bd      	mov	sp, r7
    8924:	f85d 7b04 	ldr.w	r7, [sp], #4
    8928:	4770      	bx	lr

0000892a <hri_port_set_EVCTRL_reg>:
{
    892a:	b480      	push	{r7}
    892c:	b085      	sub	sp, #20
    892e:	af00      	add	r7, sp, #0
    8930:	60f8      	str	r0, [r7, #12]
    8932:	460b      	mov	r3, r1
    8934:	607a      	str	r2, [r7, #4]
    8936:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    8938:	7afb      	ldrb	r3, [r7, #11]
    893a:	7afa      	ldrb	r2, [r7, #11]
    893c:	68f9      	ldr	r1, [r7, #12]
    893e:	01d2      	lsls	r2, r2, #7
    8940:	440a      	add	r2, r1
    8942:	322c      	adds	r2, #44	; 0x2c
    8944:	6811      	ldr	r1, [r2, #0]
    8946:	687a      	ldr	r2, [r7, #4]
    8948:	430a      	orrs	r2, r1
    894a:	68f9      	ldr	r1, [r7, #12]
    894c:	01db      	lsls	r3, r3, #7
    894e:	440b      	add	r3, r1
    8950:	332c      	adds	r3, #44	; 0x2c
    8952:	601a      	str	r2, [r3, #0]
}
    8954:	bf00      	nop
    8956:	3714      	adds	r7, #20
    8958:	46bd      	mov	sp, r7
    895a:	f85d 7b04 	ldr.w	r7, [sp], #4
    895e:	4770      	bx	lr

00008960 <_port_event_init>:

static inline void _port_event_init()
{
    8960:	b580      	push	{r7, lr}
    8962:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    8964:	2200      	movs	r2, #0
    8966:	2100      	movs	r1, #0
    8968:	480a      	ldr	r0, [pc, #40]	; (8994 <_port_event_init+0x34>)
    896a:	4b0b      	ldr	r3, [pc, #44]	; (8998 <_port_event_init+0x38>)
    896c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    896e:	2200      	movs	r2, #0
    8970:	2101      	movs	r1, #1
    8972:	4808      	ldr	r0, [pc, #32]	; (8994 <_port_event_init+0x34>)
    8974:	4b08      	ldr	r3, [pc, #32]	; (8998 <_port_event_init+0x38>)
    8976:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    8978:	f64e 72ef 	movw	r2, #61423	; 0xefef
    897c:	2102      	movs	r1, #2
    897e:	4805      	ldr	r0, [pc, #20]	; (8994 <_port_event_init+0x34>)
    8980:	4b05      	ldr	r3, [pc, #20]	; (8998 <_port_event_init+0x38>)
    8982:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    8984:	2200      	movs	r2, #0
    8986:	2103      	movs	r1, #3
    8988:	4802      	ldr	r0, [pc, #8]	; (8994 <_port_event_init+0x34>)
    898a:	4b03      	ldr	r3, [pc, #12]	; (8998 <_port_event_init+0x38>)
    898c:	4798      	blx	r3
}
    898e:	bf00      	nop
    8990:	bd80      	pop	{r7, pc}
    8992:	bf00      	nop
    8994:	41008000 	.word	0x41008000
    8998:	0000892b 	.word	0x0000892b

0000899c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    899c:	b580      	push	{r7, lr}
    899e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    89a0:	2104      	movs	r1, #4
    89a2:	480b      	ldr	r0, [pc, #44]	; (89d0 <_init_chip+0x34>)
    89a4:	4b0b      	ldr	r3, [pc, #44]	; (89d4 <_init_chip+0x38>)
    89a6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    89a8:	4b0b      	ldr	r3, [pc, #44]	; (89d8 <_init_chip+0x3c>)
    89aa:	4798      	blx	r3
	_oscctrl_init_sources();
    89ac:	4b0b      	ldr	r3, [pc, #44]	; (89dc <_init_chip+0x40>)
    89ae:	4798      	blx	r3
	_mclk_init();
    89b0:	4b0b      	ldr	r3, [pc, #44]	; (89e0 <_init_chip+0x44>)
    89b2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    89b4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    89b8:	4b0a      	ldr	r3, [pc, #40]	; (89e4 <_init_chip+0x48>)
    89ba:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    89bc:	4b0a      	ldr	r3, [pc, #40]	; (89e8 <_init_chip+0x4c>)
    89be:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    89c0:	f640 30df 	movw	r0, #3039	; 0xbdf
    89c4:	4b07      	ldr	r3, [pc, #28]	; (89e4 <_init_chip+0x48>)
    89c6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    89c8:	4b08      	ldr	r3, [pc, #32]	; (89ec <_init_chip+0x50>)
    89ca:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    89cc:	bf00      	nop
    89ce:	bd80      	pop	{r7, pc}
    89d0:	41004000 	.word	0x41004000
    89d4:	000088f9 	.word	0x000088f9
    89d8:	000096c1 	.word	0x000096c1
    89dc:	00009b89 	.word	0x00009b89
    89e0:	000095e1 	.word	0x000095e1
    89e4:	000094a1 	.word	0x000094a1
    89e8:	00009bc9 	.word	0x00009bc9
    89ec:	00008961 	.word	0x00008961

000089f0 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    89f0:	b480      	push	{r7}
    89f2:	b083      	sub	sp, #12
    89f4:	af00      	add	r7, sp, #0
    89f6:	6078      	str	r0, [r7, #4]
    89f8:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    89fa:	687b      	ldr	r3, [r7, #4]
    89fc:	683a      	ldr	r2, [r7, #0]
    89fe:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8a00:	bf00      	nop
    8a02:	370c      	adds	r7, #12
    8a04:	46bd      	mov	sp, r7
    8a06:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a0a:	4770      	bx	lr

00008a0c <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    8a0c:	b480      	push	{r7}
    8a0e:	b085      	sub	sp, #20
    8a10:	af00      	add	r7, sp, #0
    8a12:	6078      	str	r0, [r7, #4]
    8a14:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    8a16:	687b      	ldr	r3, [r7, #4]
    8a18:	689b      	ldr	r3, [r3, #8]
    8a1a:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    8a1c:	68fb      	ldr	r3, [r7, #12]
    8a1e:	f003 0303 	and.w	r3, r3, #3
    8a22:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    8a24:	683b      	ldr	r3, [r7, #0]
    8a26:	009b      	lsls	r3, r3, #2
    8a28:	68fa      	ldr	r2, [r7, #12]
    8a2a:	4313      	orrs	r3, r2
    8a2c:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    8a2e:	687b      	ldr	r3, [r7, #4]
    8a30:	68fa      	ldr	r2, [r7, #12]
    8a32:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8a34:	bf00      	nop
    8a36:	3714      	adds	r7, #20
    8a38:	46bd      	mov	sp, r7
    8a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a3e:	4770      	bx	lr

00008a40 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    8a40:	b480      	push	{r7}
    8a42:	b083      	sub	sp, #12
    8a44:	af00      	add	r7, sp, #0
    8a46:	6078      	str	r0, [r7, #4]
    8a48:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    8a4a:	687b      	ldr	r3, [r7, #4]
    8a4c:	683a      	ldr	r2, [r7, #0]
    8a4e:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8a50:	bf00      	nop
    8a52:	370c      	adds	r7, #12
    8a54:	46bd      	mov	sp, r7
    8a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a5a:	4770      	bx	lr

00008a5c <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    8a5c:	b480      	push	{r7}
    8a5e:	b083      	sub	sp, #12
    8a60:	af00      	add	r7, sp, #0
    8a62:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    8a64:	687b      	ldr	r3, [r7, #4]
    8a66:	68db      	ldr	r3, [r3, #12]
}
    8a68:	4618      	mov	r0, r3
    8a6a:	370c      	adds	r7, #12
    8a6c:	46bd      	mov	sp, r7
    8a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a72:	4770      	bx	lr

00008a74 <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    8a74:	b480      	push	{r7}
    8a76:	b083      	sub	sp, #12
    8a78:	af00      	add	r7, sp, #0
    8a7a:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    8a7c:	687b      	ldr	r3, [r7, #4]
    8a7e:	785b      	ldrb	r3, [r3, #1]
    8a80:	b2db      	uxtb	r3, r3
    8a82:	f003 0301 	and.w	r3, r3, #1
    8a86:	2b00      	cmp	r3, #0
    8a88:	bf14      	ite	ne
    8a8a:	2301      	movne	r3, #1
    8a8c:	2300      	moveq	r3, #0
    8a8e:	b2db      	uxtb	r3, r3
}
    8a90:	4618      	mov	r0, r3
    8a92:	370c      	adds	r7, #12
    8a94:	46bd      	mov	sp, r7
    8a96:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a9a:	4770      	bx	lr

00008a9c <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    8a9c:	b480      	push	{r7}
    8a9e:	b083      	sub	sp, #12
    8aa0:	af00      	add	r7, sp, #0
    8aa2:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    8aa4:	687b      	ldr	r3, [r7, #4]
    8aa6:	2201      	movs	r2, #1
    8aa8:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8aaa:	bf00      	nop
    8aac:	370c      	adds	r7, #12
    8aae:	46bd      	mov	sp, r7
    8ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ab4:	4770      	bx	lr

00008ab6 <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    8ab6:	b480      	push	{r7}
    8ab8:	b083      	sub	sp, #12
    8aba:	af00      	add	r7, sp, #0
    8abc:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    8abe:	687b      	ldr	r3, [r7, #4]
    8ac0:	785b      	ldrb	r3, [r3, #1]
    8ac2:	b2db      	uxtb	r3, r3
    8ac4:	089b      	lsrs	r3, r3, #2
    8ac6:	f003 0301 	and.w	r3, r3, #1
    8aca:	2b00      	cmp	r3, #0
    8acc:	bf14      	ite	ne
    8ace:	2301      	movne	r3, #1
    8ad0:	2300      	moveq	r3, #0
    8ad2:	b2db      	uxtb	r3, r3
}
    8ad4:	4618      	mov	r0, r3
    8ad6:	370c      	adds	r7, #12
    8ad8:	46bd      	mov	sp, r7
    8ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ade:	4770      	bx	lr

00008ae0 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    8ae0:	b480      	push	{r7}
    8ae2:	b083      	sub	sp, #12
    8ae4:	af00      	add	r7, sp, #0
    8ae6:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    8ae8:	687b      	ldr	r3, [r7, #4]
    8aea:	2204      	movs	r2, #4
    8aec:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8aee:	bf00      	nop
    8af0:	370c      	adds	r7, #12
    8af2:	46bd      	mov	sp, r7
    8af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8af8:	4770      	bx	lr

00008afa <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    8afa:	b480      	push	{r7}
    8afc:	b083      	sub	sp, #12
    8afe:	af00      	add	r7, sp, #0
    8b00:	6078      	str	r0, [r7, #4]
    8b02:	460b      	mov	r3, r1
    8b04:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    8b06:	687b      	ldr	r3, [r7, #4]
    8b08:	78fa      	ldrb	r2, [r7, #3]
    8b0a:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8b0c:	bf00      	nop
    8b0e:	370c      	adds	r7, #12
    8b10:	46bd      	mov	sp, r7
    8b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b16:	4770      	bx	lr

00008b18 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    8b18:	b480      	push	{r7}
    8b1a:	b083      	sub	sp, #12
    8b1c:	af00      	add	r7, sp, #0
    8b1e:	6078      	str	r0, [r7, #4]
    8b20:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    8b22:	687b      	ldr	r3, [r7, #4]
    8b24:	683a      	ldr	r2, [r7, #0]
    8b26:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    8b28:	2300      	movs	r3, #0
}
    8b2a:	4618      	mov	r0, r3
    8b2c:	370c      	adds	r7, #12
    8b2e:	46bd      	mov	sp, r7
    8b30:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b34:	4770      	bx	lr

00008b36 <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    8b36:	b480      	push	{r7}
    8b38:	b083      	sub	sp, #12
    8b3a:	af00      	add	r7, sp, #0
    8b3c:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    8b3e:	2300      	movs	r3, #0
}
    8b40:	4618      	mov	r0, r3
    8b42:	370c      	adds	r7, #12
    8b44:	46bd      	mov	sp, r7
    8b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b4a:	4770      	bx	lr

00008b4c <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    8b4c:	b580      	push	{r7, lr}
    8b4e:	b086      	sub	sp, #24
    8b50:	af00      	add	r7, sp, #0
    8b52:	60f8      	str	r0, [r7, #12]
    8b54:	60b9      	str	r1, [r7, #8]
    8b56:	607a      	str	r2, [r7, #4]
    8b58:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    8b5a:	2300      	movs	r3, #0
    8b5c:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    8b5e:	68bb      	ldr	r3, [r7, #8]
    8b60:	f003 0303 	and.w	r3, r3, #3
    8b64:	2b00      	cmp	r3, #0
    8b66:	d002      	beq.n	8b6e <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    8b68:	f06f 030c 	mvn.w	r3, #12
    8b6c:	e05e      	b.n	8c2c <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    8b6e:	f107 0310 	add.w	r3, r7, #16
    8b72:	4618      	mov	r0, r3
    8b74:	4b2f      	ldr	r3, [pc, #188]	; (8c34 <_crc_sync_crc32+0xe8>)
    8b76:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    8b78:	68fb      	ldr	r3, [r7, #12]
    8b7a:	681b      	ldr	r3, [r3, #0]
    8b7c:	4618      	mov	r0, r3
    8b7e:	4b2e      	ldr	r3, [pc, #184]	; (8c38 <_crc_sync_crc32+0xec>)
    8b80:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    8b82:	68fb      	ldr	r3, [r7, #12]
    8b84:	681b      	ldr	r3, [r3, #0]
    8b86:	68ba      	ldr	r2, [r7, #8]
    8b88:	4611      	mov	r1, r2
    8b8a:	4618      	mov	r0, r3
    8b8c:	4b2b      	ldr	r3, [pc, #172]	; (8c3c <_crc_sync_crc32+0xf0>)
    8b8e:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    8b90:	68fb      	ldr	r3, [r7, #12]
    8b92:	681b      	ldr	r3, [r3, #0]
    8b94:	6879      	ldr	r1, [r7, #4]
    8b96:	4618      	mov	r0, r3
    8b98:	4b29      	ldr	r3, [pc, #164]	; (8c40 <_crc_sync_crc32+0xf4>)
    8b9a:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    8b9c:	68fb      	ldr	r3, [r7, #12]
    8b9e:	681a      	ldr	r2, [r3, #0]
    8ba0:	683b      	ldr	r3, [r7, #0]
    8ba2:	681b      	ldr	r3, [r3, #0]
    8ba4:	4619      	mov	r1, r3
    8ba6:	4610      	mov	r0, r2
    8ba8:	4b26      	ldr	r3, [pc, #152]	; (8c44 <_crc_sync_crc32+0xf8>)
    8baa:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    8bac:	68fb      	ldr	r3, [r7, #12]
    8bae:	681b      	ldr	r3, [r3, #0]
    8bb0:	2104      	movs	r1, #4
    8bb2:	4618      	mov	r0, r3
    8bb4:	4b24      	ldr	r3, [pc, #144]	; (8c48 <_crc_sync_crc32+0xfc>)
    8bb6:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    8bb8:	bf00      	nop
    8bba:	68fb      	ldr	r3, [r7, #12]
    8bbc:	681b      	ldr	r3, [r3, #0]
    8bbe:	4618      	mov	r0, r3
    8bc0:	4b22      	ldr	r3, [pc, #136]	; (8c4c <_crc_sync_crc32+0x100>)
    8bc2:	4798      	blx	r3
    8bc4:	4603      	mov	r3, r0
    8bc6:	f083 0301 	eor.w	r3, r3, #1
    8bca:	b2db      	uxtb	r3, r3
    8bcc:	2b00      	cmp	r3, #0
    8bce:	d1f4      	bne.n	8bba <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    8bd0:	68fb      	ldr	r3, [r7, #12]
    8bd2:	681b      	ldr	r3, [r3, #0]
    8bd4:	4618      	mov	r0, r3
    8bd6:	4b1e      	ldr	r3, [pc, #120]	; (8c50 <_crc_sync_crc32+0x104>)
    8bd8:	4798      	blx	r3
    8bda:	4603      	mov	r3, r0
    8bdc:	2b00      	cmp	r3, #0
    8bde:	d00d      	beq.n	8bfc <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    8be0:	68fb      	ldr	r3, [r7, #12]
    8be2:	681b      	ldr	r3, [r3, #0]
    8be4:	4618      	mov	r0, r3
    8be6:	4b1b      	ldr	r3, [pc, #108]	; (8c54 <_crc_sync_crc32+0x108>)
    8be8:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    8bea:	68fb      	ldr	r3, [r7, #12]
    8bec:	681b      	ldr	r3, [r3, #0]
    8bee:	4618      	mov	r0, r3
    8bf0:	4b19      	ldr	r3, [pc, #100]	; (8c58 <_crc_sync_crc32+0x10c>)
    8bf2:	4798      	blx	r3
		rc = ERR_IO;
    8bf4:	f06f 0305 	mvn.w	r3, #5
    8bf8:	617b      	str	r3, [r7, #20]
    8bfa:	e007      	b.n	8c0c <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    8bfc:	68fb      	ldr	r3, [r7, #12]
    8bfe:	681b      	ldr	r3, [r3, #0]
    8c00:	4618      	mov	r0, r3
    8c02:	4b16      	ldr	r3, [pc, #88]	; (8c5c <_crc_sync_crc32+0x110>)
    8c04:	4798      	blx	r3
    8c06:	4602      	mov	r2, r0
    8c08:	683b      	ldr	r3, [r7, #0]
    8c0a:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    8c0c:	68fb      	ldr	r3, [r7, #12]
    8c0e:	681b      	ldr	r3, [r3, #0]
    8c10:	4618      	mov	r0, r3
    8c12:	4b11      	ldr	r3, [pc, #68]	; (8c58 <_crc_sync_crc32+0x10c>)
    8c14:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    8c16:	68fb      	ldr	r3, [r7, #12]
    8c18:	681b      	ldr	r3, [r3, #0]
    8c1a:	4618      	mov	r0, r3
    8c1c:	4b10      	ldr	r3, [pc, #64]	; (8c60 <_crc_sync_crc32+0x114>)
    8c1e:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    8c20:	f107 0310 	add.w	r3, r7, #16
    8c24:	4618      	mov	r0, r3
    8c26:	4b0f      	ldr	r3, [pc, #60]	; (8c64 <_crc_sync_crc32+0x118>)
    8c28:	4798      	blx	r3

	return rc;
    8c2a:	697b      	ldr	r3, [r7, #20]
}
    8c2c:	4618      	mov	r0, r3
    8c2e:	3718      	adds	r7, #24
    8c30:	46bd      	mov	sp, r7
    8c32:	bd80      	pop	{r7, pc}
    8c34:	00010481 	.word	0x00010481
    8c38:	00009f69 	.word	0x00009f69
    8c3c:	000089f1 	.word	0x000089f1
    8c40:	00008a0d 	.word	0x00008a0d
    8c44:	00008a41 	.word	0x00008a41
    8c48:	00008afb 	.word	0x00008afb
    8c4c:	00008a75 	.word	0x00008a75
    8c50:	00008ab7 	.word	0x00008ab7
    8c54:	00008ae1 	.word	0x00008ae1
    8c58:	00008a9d 	.word	0x00008a9d
    8c5c:	00008a5d 	.word	0x00008a5d
    8c60:	00009edd 	.word	0x00009edd
    8c64:	000104a7 	.word	0x000104a7

00008c68 <__NVIC_EnableIRQ>:
{
    8c68:	b480      	push	{r7}
    8c6a:	b083      	sub	sp, #12
    8c6c:	af00      	add	r7, sp, #0
    8c6e:	4603      	mov	r3, r0
    8c70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8c76:	2b00      	cmp	r3, #0
    8c78:	db0b      	blt.n	8c92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8c7a:	4909      	ldr	r1, [pc, #36]	; (8ca0 <__NVIC_EnableIRQ+0x38>)
    8c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8c80:	095b      	lsrs	r3, r3, #5
    8c82:	88fa      	ldrh	r2, [r7, #6]
    8c84:	f002 021f 	and.w	r2, r2, #31
    8c88:	2001      	movs	r0, #1
    8c8a:	fa00 f202 	lsl.w	r2, r0, r2
    8c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c92:	bf00      	nop
    8c94:	370c      	adds	r7, #12
    8c96:	46bd      	mov	sp, r7
    8c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c9c:	4770      	bx	lr
    8c9e:	bf00      	nop
    8ca0:	e000e100 	.word	0xe000e100

00008ca4 <__NVIC_DisableIRQ>:
{
    8ca4:	b480      	push	{r7}
    8ca6:	b083      	sub	sp, #12
    8ca8:	af00      	add	r7, sp, #0
    8caa:	4603      	mov	r3, r0
    8cac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8cb2:	2b00      	cmp	r3, #0
    8cb4:	db10      	blt.n	8cd8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8cb6:	490b      	ldr	r1, [pc, #44]	; (8ce4 <__NVIC_DisableIRQ+0x40>)
    8cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8cbc:	095b      	lsrs	r3, r3, #5
    8cbe:	88fa      	ldrh	r2, [r7, #6]
    8cc0:	f002 021f 	and.w	r2, r2, #31
    8cc4:	2001      	movs	r0, #1
    8cc6:	fa00 f202 	lsl.w	r2, r0, r2
    8cca:	3320      	adds	r3, #32
    8ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8cd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8cd4:	f3bf 8f6f 	isb	sy
}
    8cd8:	bf00      	nop
    8cda:	370c      	adds	r7, #12
    8cdc:	46bd      	mov	sp, r7
    8cde:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ce2:	4770      	bx	lr
    8ce4:	e000e100 	.word	0xe000e100

00008ce8 <__NVIC_ClearPendingIRQ>:
{
    8ce8:	b480      	push	{r7}
    8cea:	b083      	sub	sp, #12
    8cec:	af00      	add	r7, sp, #0
    8cee:	4603      	mov	r3, r0
    8cf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8cf6:	2b00      	cmp	r3, #0
    8cf8:	db0c      	blt.n	8d14 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8cfa:	4909      	ldr	r1, [pc, #36]	; (8d20 <__NVIC_ClearPendingIRQ+0x38>)
    8cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d00:	095b      	lsrs	r3, r3, #5
    8d02:	88fa      	ldrh	r2, [r7, #6]
    8d04:	f002 021f 	and.w	r2, r2, #31
    8d08:	2001      	movs	r0, #1
    8d0a:	fa00 f202 	lsl.w	r2, r0, r2
    8d0e:	3360      	adds	r3, #96	; 0x60
    8d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d14:	bf00      	nop
    8d16:	370c      	adds	r7, #12
    8d18:	46bd      	mov	sp, r7
    8d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d1e:	4770      	bx	lr
    8d20:	e000e100 	.word	0xe000e100

00008d24 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8d24:	b480      	push	{r7}
    8d26:	b083      	sub	sp, #12
    8d28:	af00      	add	r7, sp, #0
    8d2a:	6078      	str	r0, [r7, #4]
    8d2c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    8d2e:	bf00      	nop
    8d30:	687b      	ldr	r3, [r7, #4]
    8d32:	685a      	ldr	r2, [r3, #4]
    8d34:	683b      	ldr	r3, [r7, #0]
    8d36:	4013      	ands	r3, r2
    8d38:	2b00      	cmp	r3, #0
    8d3a:	d1f9      	bne.n	8d30 <hri_eic_wait_for_sync+0xc>
	};
}
    8d3c:	bf00      	nop
    8d3e:	370c      	adds	r7, #12
    8d40:	46bd      	mov	sp, r7
    8d42:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d46:	4770      	bx	lr

00008d48 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8d48:	b480      	push	{r7}
    8d4a:	b083      	sub	sp, #12
    8d4c:	af00      	add	r7, sp, #0
    8d4e:	6078      	str	r0, [r7, #4]
    8d50:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    8d52:	687b      	ldr	r3, [r7, #4]
    8d54:	685a      	ldr	r2, [r3, #4]
    8d56:	683b      	ldr	r3, [r7, #0]
    8d58:	4013      	ands	r3, r2
    8d5a:	2b00      	cmp	r3, #0
    8d5c:	bf14      	ite	ne
    8d5e:	2301      	movne	r3, #1
    8d60:	2300      	moveq	r3, #0
    8d62:	b2db      	uxtb	r3, r3
}
    8d64:	4618      	mov	r0, r3
    8d66:	370c      	adds	r7, #12
    8d68:	46bd      	mov	sp, r7
    8d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d6e:	4770      	bx	lr

00008d70 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    8d70:	b480      	push	{r7}
    8d72:	b083      	sub	sp, #12
    8d74:	af00      	add	r7, sp, #0
    8d76:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    8d78:	687b      	ldr	r3, [r7, #4]
    8d7a:	695b      	ldr	r3, [r3, #20]
}
    8d7c:	4618      	mov	r0, r3
    8d7e:	370c      	adds	r7, #12
    8d80:	46bd      	mov	sp, r7
    8d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d86:	4770      	bx	lr

00008d88 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    8d88:	b480      	push	{r7}
    8d8a:	b083      	sub	sp, #12
    8d8c:	af00      	add	r7, sp, #0
    8d8e:	6078      	str	r0, [r7, #4]
    8d90:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    8d92:	687b      	ldr	r3, [r7, #4]
    8d94:	683a      	ldr	r2, [r7, #0]
    8d96:	615a      	str	r2, [r3, #20]
}
    8d98:	bf00      	nop
    8d9a:	370c      	adds	r7, #12
    8d9c:	46bd      	mov	sp, r7
    8d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8da2:	4770      	bx	lr

00008da4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    8da4:	b480      	push	{r7}
    8da6:	b083      	sub	sp, #12
    8da8:	af00      	add	r7, sp, #0
    8daa:	6078      	str	r0, [r7, #4]
    8dac:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    8dae:	687b      	ldr	r3, [r7, #4]
    8db0:	683a      	ldr	r2, [r7, #0]
    8db2:	611a      	str	r2, [r3, #16]
}
    8db4:	bf00      	nop
    8db6:	370c      	adds	r7, #12
    8db8:	46bd      	mov	sp, r7
    8dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dbe:	4770      	bx	lr

00008dc0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    8dc0:	b480      	push	{r7}
    8dc2:	b083      	sub	sp, #12
    8dc4:	af00      	add	r7, sp, #0
    8dc6:	6078      	str	r0, [r7, #4]
    8dc8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    8dca:	687b      	ldr	r3, [r7, #4]
    8dcc:	683a      	ldr	r2, [r7, #0]
    8dce:	60da      	str	r2, [r3, #12]
}
    8dd0:	bf00      	nop
    8dd2:	370c      	adds	r7, #12
    8dd4:	46bd      	mov	sp, r7
    8dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dda:	4770      	bx	lr

00008ddc <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8ddc:	b580      	push	{r7, lr}
    8dde:	b082      	sub	sp, #8
    8de0:	af00      	add	r7, sp, #0
    8de2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    8de4:	687b      	ldr	r3, [r7, #4]
    8de6:	781b      	ldrb	r3, [r3, #0]
    8de8:	b2db      	uxtb	r3, r3
    8dea:	f043 0302 	orr.w	r3, r3, #2
    8dee:	b2da      	uxtb	r2, r3
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8df4:	2103      	movs	r1, #3
    8df6:	6878      	ldr	r0, [r7, #4]
    8df8:	4b02      	ldr	r3, [pc, #8]	; (8e04 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    8dfa:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8dfc:	bf00      	nop
    8dfe:	3708      	adds	r7, #8
    8e00:	46bd      	mov	sp, r7
    8e02:	bd80      	pop	{r7, pc}
    8e04:	00008d25 	.word	0x00008d25

00008e08 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8e08:	b580      	push	{r7, lr}
    8e0a:	b082      	sub	sp, #8
    8e0c:	af00      	add	r7, sp, #0
    8e0e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    8e10:	687b      	ldr	r3, [r7, #4]
    8e12:	781b      	ldrb	r3, [r3, #0]
    8e14:	b2db      	uxtb	r3, r3
    8e16:	f023 0302 	bic.w	r3, r3, #2
    8e1a:	b2da      	uxtb	r2, r3
    8e1c:	687b      	ldr	r3, [r7, #4]
    8e1e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8e20:	2103      	movs	r1, #3
    8e22:	6878      	ldr	r0, [r7, #4]
    8e24:	4b02      	ldr	r3, [pc, #8]	; (8e30 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    8e26:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8e28:	bf00      	nop
    8e2a:	3708      	adds	r7, #8
    8e2c:	46bd      	mov	sp, r7
    8e2e:	bd80      	pop	{r7, pc}
    8e30:	00008d25 	.word	0x00008d25

00008e34 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    8e34:	b580      	push	{r7, lr}
    8e36:	b084      	sub	sp, #16
    8e38:	af00      	add	r7, sp, #0
    8e3a:	6078      	str	r0, [r7, #4]
    8e3c:	460b      	mov	r3, r1
    8e3e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    8e40:	687b      	ldr	r3, [r7, #4]
    8e42:	781b      	ldrb	r3, [r3, #0]
    8e44:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    8e46:	7bfb      	ldrb	r3, [r7, #15]
    8e48:	f023 0310 	bic.w	r3, r3, #16
    8e4c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    8e4e:	78fb      	ldrb	r3, [r7, #3]
    8e50:	011b      	lsls	r3, r3, #4
    8e52:	b25a      	sxtb	r2, r3
    8e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8e58:	4313      	orrs	r3, r2
    8e5a:	b25b      	sxtb	r3, r3
    8e5c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    8e5e:	687b      	ldr	r3, [r7, #4]
    8e60:	7bfa      	ldrb	r2, [r7, #15]
    8e62:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8e64:	2103      	movs	r1, #3
    8e66:	6878      	ldr	r0, [r7, #4]
    8e68:	4b02      	ldr	r3, [pc, #8]	; (8e74 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    8e6a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8e6c:	bf00      	nop
    8e6e:	3710      	adds	r7, #16
    8e70:	46bd      	mov	sp, r7
    8e72:	bd80      	pop	{r7, pc}
    8e74:	00008d25 	.word	0x00008d25

00008e78 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    8e78:	b580      	push	{r7, lr}
    8e7a:	b084      	sub	sp, #16
    8e7c:	af00      	add	r7, sp, #0
    8e7e:	6078      	str	r0, [r7, #4]
    8e80:	460b      	mov	r3, r1
    8e82:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8e84:	2103      	movs	r1, #3
    8e86:	6878      	ldr	r0, [r7, #4]
    8e88:	4b06      	ldr	r3, [pc, #24]	; (8ea4 <hri_eic_get_CTRLA_reg+0x2c>)
    8e8a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    8e8c:	687b      	ldr	r3, [r7, #4]
    8e8e:	781b      	ldrb	r3, [r3, #0]
    8e90:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8e92:	7bfa      	ldrb	r2, [r7, #15]
    8e94:	78fb      	ldrb	r3, [r7, #3]
    8e96:	4013      	ands	r3, r2
    8e98:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8e9a:	7bfb      	ldrb	r3, [r7, #15]
}
    8e9c:	4618      	mov	r0, r3
    8e9e:	3710      	adds	r7, #16
    8ea0:	46bd      	mov	sp, r7
    8ea2:	bd80      	pop	{r7, pc}
    8ea4:	00008d25 	.word	0x00008d25

00008ea8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    8ea8:	b580      	push	{r7, lr}
    8eaa:	b082      	sub	sp, #8
    8eac:	af00      	add	r7, sp, #0
    8eae:	6078      	str	r0, [r7, #4]
    8eb0:	460b      	mov	r3, r1
    8eb2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    8eb4:	687b      	ldr	r3, [r7, #4]
    8eb6:	78fa      	ldrb	r2, [r7, #3]
    8eb8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8eba:	2103      	movs	r1, #3
    8ebc:	6878      	ldr	r0, [r7, #4]
    8ebe:	4b03      	ldr	r3, [pc, #12]	; (8ecc <hri_eic_write_CTRLA_reg+0x24>)
    8ec0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8ec2:	bf00      	nop
    8ec4:	3708      	adds	r7, #8
    8ec6:	46bd      	mov	sp, r7
    8ec8:	bd80      	pop	{r7, pc}
    8eca:	bf00      	nop
    8ecc:	00008d25 	.word	0x00008d25

00008ed0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    8ed0:	b480      	push	{r7}
    8ed2:	b083      	sub	sp, #12
    8ed4:	af00      	add	r7, sp, #0
    8ed6:	6078      	str	r0, [r7, #4]
    8ed8:	460b      	mov	r3, r1
    8eda:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    8edc:	687b      	ldr	r3, [r7, #4]
    8ede:	78fa      	ldrb	r2, [r7, #3]
    8ee0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8ee2:	bf00      	nop
    8ee4:	370c      	adds	r7, #12
    8ee6:	46bd      	mov	sp, r7
    8ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eec:	4770      	bx	lr

00008eee <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    8eee:	b480      	push	{r7}
    8ef0:	b083      	sub	sp, #12
    8ef2:	af00      	add	r7, sp, #0
    8ef4:	6078      	str	r0, [r7, #4]
    8ef6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    8ef8:	687b      	ldr	r3, [r7, #4]
    8efa:	683a      	ldr	r2, [r7, #0]
    8efc:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8efe:	bf00      	nop
    8f00:	370c      	adds	r7, #12
    8f02:	46bd      	mov	sp, r7
    8f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f08:	4770      	bx	lr

00008f0a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    8f0a:	b480      	push	{r7}
    8f0c:	b083      	sub	sp, #12
    8f0e:	af00      	add	r7, sp, #0
    8f10:	6078      	str	r0, [r7, #4]
    8f12:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    8f14:	687b      	ldr	r3, [r7, #4]
    8f16:	683a      	ldr	r2, [r7, #0]
    8f18:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8f1a:	bf00      	nop
    8f1c:	370c      	adds	r7, #12
    8f1e:	46bd      	mov	sp, r7
    8f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f24:	4770      	bx	lr

00008f26 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    8f26:	b480      	push	{r7}
    8f28:	b085      	sub	sp, #20
    8f2a:	af00      	add	r7, sp, #0
    8f2c:	60f8      	str	r0, [r7, #12]
    8f2e:	460b      	mov	r3, r1
    8f30:	607a      	str	r2, [r7, #4]
    8f32:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    8f34:	7afb      	ldrb	r3, [r7, #11]
    8f36:	68fa      	ldr	r2, [r7, #12]
    8f38:	3306      	adds	r3, #6
    8f3a:	009b      	lsls	r3, r3, #2
    8f3c:	4413      	add	r3, r2
    8f3e:	687a      	ldr	r2, [r7, #4]
    8f40:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8f42:	bf00      	nop
    8f44:	3714      	adds	r7, #20
    8f46:	46bd      	mov	sp, r7
    8f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f4c:	4770      	bx	lr

00008f4e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    8f4e:	b480      	push	{r7}
    8f50:	b083      	sub	sp, #12
    8f52:	af00      	add	r7, sp, #0
    8f54:	6078      	str	r0, [r7, #4]
    8f56:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    8f58:	687b      	ldr	r3, [r7, #4]
    8f5a:	683a      	ldr	r2, [r7, #0]
    8f5c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    8f5e:	bf00      	nop
    8f60:	370c      	adds	r7, #12
    8f62:	46bd      	mov	sp, r7
    8f64:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f68:	4770      	bx	lr

00008f6a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    8f6a:	b480      	push	{r7}
    8f6c:	b083      	sub	sp, #12
    8f6e:	af00      	add	r7, sp, #0
    8f70:	6078      	str	r0, [r7, #4]
    8f72:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    8f74:	687b      	ldr	r3, [r7, #4]
    8f76:	683a      	ldr	r2, [r7, #0]
    8f78:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    8f7a:	bf00      	nop
    8f7c:	370c      	adds	r7, #12
    8f7e:	46bd      	mov	sp, r7
    8f80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f84:	4770      	bx	lr
	...

00008f88 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    8f88:	b580      	push	{r7, lr}
    8f8a:	b082      	sub	sp, #8
    8f8c:	af00      	add	r7, sp, #0
    8f8e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    8f90:	2101      	movs	r1, #1
    8f92:	4846      	ldr	r0, [pc, #280]	; (90ac <_ext_irq_init+0x124>)
    8f94:	4b46      	ldr	r3, [pc, #280]	; (90b0 <_ext_irq_init+0x128>)
    8f96:	4798      	blx	r3
    8f98:	4603      	mov	r3, r0
    8f9a:	f083 0301 	eor.w	r3, r3, #1
    8f9e:	b2db      	uxtb	r3, r3
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d011      	beq.n	8fc8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    8fa4:	2102      	movs	r1, #2
    8fa6:	4841      	ldr	r0, [pc, #260]	; (90ac <_ext_irq_init+0x124>)
    8fa8:	4b42      	ldr	r3, [pc, #264]	; (90b4 <_ext_irq_init+0x12c>)
    8faa:	4798      	blx	r3
    8fac:	4603      	mov	r3, r0
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d006      	beq.n	8fc0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    8fb2:	483e      	ldr	r0, [pc, #248]	; (90ac <_ext_irq_init+0x124>)
    8fb4:	4b40      	ldr	r3, [pc, #256]	; (90b8 <_ext_irq_init+0x130>)
    8fb6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    8fb8:	2102      	movs	r1, #2
    8fba:	483c      	ldr	r0, [pc, #240]	; (90ac <_ext_irq_init+0x124>)
    8fbc:	4b3f      	ldr	r3, [pc, #252]	; (90bc <_ext_irq_init+0x134>)
    8fbe:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    8fc0:	2101      	movs	r1, #1
    8fc2:	483a      	ldr	r0, [pc, #232]	; (90ac <_ext_irq_init+0x124>)
    8fc4:	4b3e      	ldr	r3, [pc, #248]	; (90c0 <_ext_irq_init+0x138>)
    8fc6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    8fc8:	2101      	movs	r1, #1
    8fca:	4838      	ldr	r0, [pc, #224]	; (90ac <_ext_irq_init+0x124>)
    8fcc:	4b3b      	ldr	r3, [pc, #236]	; (90bc <_ext_irq_init+0x134>)
    8fce:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    8fd0:	2100      	movs	r1, #0
    8fd2:	4836      	ldr	r0, [pc, #216]	; (90ac <_ext_irq_init+0x124>)
    8fd4:	4b3b      	ldr	r3, [pc, #236]	; (90c4 <_ext_irq_init+0x13c>)
    8fd6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    8fd8:	2100      	movs	r1, #0
    8fda:	4834      	ldr	r0, [pc, #208]	; (90ac <_ext_irq_init+0x124>)
    8fdc:	4b3a      	ldr	r3, [pc, #232]	; (90c8 <_ext_irq_init+0x140>)
    8fde:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    8fe0:	2100      	movs	r1, #0
    8fe2:	4832      	ldr	r0, [pc, #200]	; (90ac <_ext_irq_init+0x124>)
    8fe4:	4b39      	ldr	r3, [pc, #228]	; (90cc <_ext_irq_init+0x144>)
    8fe6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    8fe8:	f240 31b1 	movw	r1, #945	; 0x3b1
    8fec:	482f      	ldr	r0, [pc, #188]	; (90ac <_ext_irq_init+0x124>)
    8fee:	4b38      	ldr	r3, [pc, #224]	; (90d0 <_ext_irq_init+0x148>)
    8ff0:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    8ff2:	f240 3131 	movw	r1, #817	; 0x331
    8ff6:	482d      	ldr	r0, [pc, #180]	; (90ac <_ext_irq_init+0x124>)
    8ff8:	4b36      	ldr	r3, [pc, #216]	; (90d4 <_ext_irq_init+0x14c>)
    8ffa:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    8ffc:	2100      	movs	r1, #0
    8ffe:	482b      	ldr	r0, [pc, #172]	; (90ac <_ext_irq_init+0x124>)
    9000:	4b35      	ldr	r3, [pc, #212]	; (90d8 <_ext_irq_init+0x150>)
    9002:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    9004:	4a35      	ldr	r2, [pc, #212]	; (90dc <_ext_irq_init+0x154>)
    9006:	2100      	movs	r1, #0
    9008:	4828      	ldr	r0, [pc, #160]	; (90ac <_ext_irq_init+0x124>)
    900a:	4b35      	ldr	r3, [pc, #212]	; (90e0 <_ext_irq_init+0x158>)
    900c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    900e:	2219      	movs	r2, #25
    9010:	2101      	movs	r1, #1
    9012:	4826      	ldr	r0, [pc, #152]	; (90ac <_ext_irq_init+0x124>)
    9014:	4b32      	ldr	r3, [pc, #200]	; (90e0 <_ext_irq_init+0x158>)
    9016:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    9018:	4824      	ldr	r0, [pc, #144]	; (90ac <_ext_irq_init+0x124>)
    901a:	4b32      	ldr	r3, [pc, #200]	; (90e4 <_ext_irq_init+0x15c>)
    901c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    901e:	200c      	movs	r0, #12
    9020:	4b31      	ldr	r3, [pc, #196]	; (90e8 <_ext_irq_init+0x160>)
    9022:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    9024:	200c      	movs	r0, #12
    9026:	4b31      	ldr	r3, [pc, #196]	; (90ec <_ext_irq_init+0x164>)
    9028:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    902a:	200c      	movs	r0, #12
    902c:	4b30      	ldr	r3, [pc, #192]	; (90f0 <_ext_irq_init+0x168>)
    902e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    9030:	2010      	movs	r0, #16
    9032:	4b2d      	ldr	r3, [pc, #180]	; (90e8 <_ext_irq_init+0x160>)
    9034:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    9036:	2010      	movs	r0, #16
    9038:	4b2c      	ldr	r3, [pc, #176]	; (90ec <_ext_irq_init+0x164>)
    903a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    903c:	2010      	movs	r0, #16
    903e:	4b2c      	ldr	r3, [pc, #176]	; (90f0 <_ext_irq_init+0x168>)
    9040:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    9042:	2011      	movs	r0, #17
    9044:	4b28      	ldr	r3, [pc, #160]	; (90e8 <_ext_irq_init+0x160>)
    9046:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    9048:	2011      	movs	r0, #17
    904a:	4b28      	ldr	r3, [pc, #160]	; (90ec <_ext_irq_init+0x164>)
    904c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    904e:	2011      	movs	r0, #17
    9050:	4b27      	ldr	r3, [pc, #156]	; (90f0 <_ext_irq_init+0x168>)
    9052:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    9054:	2012      	movs	r0, #18
    9056:	4b24      	ldr	r3, [pc, #144]	; (90e8 <_ext_irq_init+0x160>)
    9058:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    905a:	2012      	movs	r0, #18
    905c:	4b23      	ldr	r3, [pc, #140]	; (90ec <_ext_irq_init+0x164>)
    905e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    9060:	2012      	movs	r0, #18
    9062:	4b23      	ldr	r3, [pc, #140]	; (90f0 <_ext_irq_init+0x168>)
    9064:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    9066:	2013      	movs	r0, #19
    9068:	4b1f      	ldr	r3, [pc, #124]	; (90e8 <_ext_irq_init+0x160>)
    906a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    906c:	2013      	movs	r0, #19
    906e:	4b1f      	ldr	r3, [pc, #124]	; (90ec <_ext_irq_init+0x164>)
    9070:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    9072:	2013      	movs	r0, #19
    9074:	4b1e      	ldr	r3, [pc, #120]	; (90f0 <_ext_irq_init+0x168>)
    9076:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    9078:	2014      	movs	r0, #20
    907a:	4b1b      	ldr	r3, [pc, #108]	; (90e8 <_ext_irq_init+0x160>)
    907c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    907e:	2014      	movs	r0, #20
    9080:	4b1a      	ldr	r3, [pc, #104]	; (90ec <_ext_irq_init+0x164>)
    9082:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    9084:	2014      	movs	r0, #20
    9086:	4b1a      	ldr	r3, [pc, #104]	; (90f0 <_ext_irq_init+0x168>)
    9088:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    908a:	2015      	movs	r0, #21
    908c:	4b16      	ldr	r3, [pc, #88]	; (90e8 <_ext_irq_init+0x160>)
    908e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    9090:	2015      	movs	r0, #21
    9092:	4b16      	ldr	r3, [pc, #88]	; (90ec <_ext_irq_init+0x164>)
    9094:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    9096:	2015      	movs	r0, #21
    9098:	4b15      	ldr	r3, [pc, #84]	; (90f0 <_ext_irq_init+0x168>)
    909a:	4798      	blx	r3

	callback = cb;
    909c:	4a15      	ldr	r2, [pc, #84]	; (90f4 <_ext_irq_init+0x16c>)
    909e:	687b      	ldr	r3, [r7, #4]
    90a0:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    90a2:	2300      	movs	r3, #0
}
    90a4:	4618      	mov	r0, r3
    90a6:	3708      	adds	r7, #8
    90a8:	46bd      	mov	sp, r7
    90aa:	bd80      	pop	{r7, pc}
    90ac:	40002800 	.word	0x40002800
    90b0:	00008d49 	.word	0x00008d49
    90b4:	00008e79 	.word	0x00008e79
    90b8:	00008e09 	.word	0x00008e09
    90bc:	00008d25 	.word	0x00008d25
    90c0:	00008ea9 	.word	0x00008ea9
    90c4:	00008e35 	.word	0x00008e35
    90c8:	00008ed1 	.word	0x00008ed1
    90cc:	00008eef 	.word	0x00008eef
    90d0:	00008f0b 	.word	0x00008f0b
    90d4:	00008f4f 	.word	0x00008f4f
    90d8:	00008f6b 	.word	0x00008f6b
    90dc:	90990003 	.word	0x90990003
    90e0:	00008f27 	.word	0x00008f27
    90e4:	00008ddd 	.word	0x00008ddd
    90e8:	00008ca5 	.word	0x00008ca5
    90ec:	00008ce9 	.word	0x00008ce9
    90f0:	00008c69 	.word	0x00008c69
    90f4:	20008748 	.word	0x20008748

000090f8 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    90f8:	b580      	push	{r7, lr}
    90fa:	b084      	sub	sp, #16
    90fc:	af00      	add	r7, sp, #0
    90fe:	6078      	str	r0, [r7, #4]
    9100:	460b      	mov	r3, r1
    9102:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    9104:	23ff      	movs	r3, #255	; 0xff
    9106:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    9108:	2300      	movs	r3, #0
    910a:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    910c:	e010      	b.n	9130 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    910e:	7bbb      	ldrb	r3, [r7, #14]
    9110:	4a1c      	ldr	r2, [pc, #112]	; (9184 <_ext_irq_enable+0x8c>)
    9112:	00db      	lsls	r3, r3, #3
    9114:	4413      	add	r3, r2
    9116:	685a      	ldr	r2, [r3, #4]
    9118:	687b      	ldr	r3, [r7, #4]
    911a:	429a      	cmp	r2, r3
    911c:	d105      	bne.n	912a <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    911e:	7bbb      	ldrb	r3, [r7, #14]
    9120:	4a18      	ldr	r2, [pc, #96]	; (9184 <_ext_irq_enable+0x8c>)
    9122:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    9126:	73fb      	strb	r3, [r7, #15]
			break;
    9128:	e005      	b.n	9136 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    912a:	7bbb      	ldrb	r3, [r7, #14]
    912c:	3301      	adds	r3, #1
    912e:	73bb      	strb	r3, [r7, #14]
    9130:	7bbb      	ldrb	r3, [r7, #14]
    9132:	2b06      	cmp	r3, #6
    9134:	d9eb      	bls.n	910e <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    9136:	7bfb      	ldrb	r3, [r7, #15]
    9138:	2bff      	cmp	r3, #255	; 0xff
    913a:	d102      	bne.n	9142 <_ext_irq_enable+0x4a>
		return -1;
    913c:	f04f 33ff 	mov.w	r3, #4294967295
    9140:	e01c      	b.n	917c <_ext_irq_enable+0x84>
	}

	if (enable) {
    9142:	78fb      	ldrb	r3, [r7, #3]
    9144:	2b00      	cmp	r3, #0
    9146:	d008      	beq.n	915a <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    9148:	7bfb      	ldrb	r3, [r7, #15]
    914a:	2201      	movs	r2, #1
    914c:	fa02 f303 	lsl.w	r3, r2, r3
    9150:	4619      	mov	r1, r3
    9152:	480d      	ldr	r0, [pc, #52]	; (9188 <_ext_irq_enable+0x90>)
    9154:	4b0d      	ldr	r3, [pc, #52]	; (918c <_ext_irq_enable+0x94>)
    9156:	4798      	blx	r3
    9158:	e00f      	b.n	917a <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    915a:	7bfb      	ldrb	r3, [r7, #15]
    915c:	2201      	movs	r2, #1
    915e:	fa02 f303 	lsl.w	r3, r2, r3
    9162:	4619      	mov	r1, r3
    9164:	4808      	ldr	r0, [pc, #32]	; (9188 <_ext_irq_enable+0x90>)
    9166:	4b0a      	ldr	r3, [pc, #40]	; (9190 <_ext_irq_enable+0x98>)
    9168:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    916a:	7bfb      	ldrb	r3, [r7, #15]
    916c:	2201      	movs	r2, #1
    916e:	fa02 f303 	lsl.w	r3, r2, r3
    9172:	4619      	mov	r1, r3
    9174:	4804      	ldr	r0, [pc, #16]	; (9188 <_ext_irq_enable+0x90>)
    9176:	4b07      	ldr	r3, [pc, #28]	; (9194 <_ext_irq_enable+0x9c>)
    9178:	4798      	blx	r3
	}

	return ERR_NONE;
    917a:	2300      	movs	r3, #0
}
    917c:	4618      	mov	r0, r3
    917e:	3710      	adds	r7, #16
    9180:	46bd      	mov	sp, r7
    9182:	bd80      	pop	{r7, pc}
    9184:	0001f5d4 	.word	0x0001f5d4
    9188:	40002800 	.word	0x40002800
    918c:	00008da5 	.word	0x00008da5
    9190:	00008dc1 	.word	0x00008dc1
    9194:	00008d89 	.word	0x00008d89

00009198 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    9198:	b580      	push	{r7, lr}
    919a:	b084      	sub	sp, #16
    919c:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    919e:	4841      	ldr	r0, [pc, #260]	; (92a4 <_ext_irq_handler+0x10c>)
    91a0:	4b41      	ldr	r3, [pc, #260]	; (92a8 <_ext_irq_handler+0x110>)
    91a2:	4798      	blx	r3
    91a4:	4603      	mov	r3, r0
    91a6:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    91a8:	f04f 33ff 	mov.w	r3, #4294967295
    91ac:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    91ae:	683b      	ldr	r3, [r7, #0]
    91b0:	4619      	mov	r1, r3
    91b2:	483c      	ldr	r0, [pc, #240]	; (92a4 <_ext_irq_handler+0x10c>)
    91b4:	4b3d      	ldr	r3, [pc, #244]	; (92ac <_ext_irq_handler+0x114>)
    91b6:	4798      	blx	r3

	ASSERT(callback);
    91b8:	4b3d      	ldr	r3, [pc, #244]	; (92b0 <_ext_irq_handler+0x118>)
    91ba:	681b      	ldr	r3, [r3, #0]
    91bc:	2b00      	cmp	r3, #0
    91be:	bf14      	ite	ne
    91c0:	2301      	movne	r3, #1
    91c2:	2300      	moveq	r3, #0
    91c4:	b2db      	uxtb	r3, r3
    91c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    91ca:	493a      	ldr	r1, [pc, #232]	; (92b4 <_ext_irq_handler+0x11c>)
    91cc:	4618      	mov	r0, r3
    91ce:	4b3a      	ldr	r3, [pc, #232]	; (92b8 <_ext_irq_handler+0x120>)
    91d0:	4798      	blx	r3

	while (flags) {
    91d2:	e060      	b.n	9296 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    91d4:	683b      	ldr	r3, [r7, #0]
    91d6:	4618      	mov	r0, r3
    91d8:	4b38      	ldr	r3, [pc, #224]	; (92bc <_ext_irq_handler+0x124>)
    91da:	4798      	blx	r3
    91dc:	4603      	mov	r3, r0
    91de:	b2db      	uxtb	r3, r3
    91e0:	3b01      	subs	r3, #1
    91e2:	b2db      	uxtb	r3, r3
    91e4:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    91e6:	e047      	b.n	9278 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    91e8:	2300      	movs	r3, #0
    91ea:	71fb      	strb	r3, [r7, #7]
    91ec:	2307      	movs	r3, #7
    91ee:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    91f0:	e024      	b.n	923c <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    91f2:	79ba      	ldrb	r2, [r7, #6]
    91f4:	79fb      	ldrb	r3, [r7, #7]
    91f6:	4413      	add	r3, r2
    91f8:	105b      	asrs	r3, r3, #1
    91fa:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    91fc:	797b      	ldrb	r3, [r7, #5]
    91fe:	4a30      	ldr	r2, [pc, #192]	; (92c0 <_ext_irq_handler+0x128>)
    9200:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    9204:	461a      	mov	r2, r3
    9206:	f997 300f 	ldrsb.w	r3, [r7, #15]
    920a:	429a      	cmp	r2, r3
    920c:	d106      	bne.n	921c <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    920e:	797b      	ldrb	r3, [r7, #5]
    9210:	4a2b      	ldr	r2, [pc, #172]	; (92c0 <_ext_irq_handler+0x128>)
    9212:	00db      	lsls	r3, r3, #3
    9214:	4413      	add	r3, r2
    9216:	685b      	ldr	r3, [r3, #4]
    9218:	60bb      	str	r3, [r7, #8]
					break;
    921a:	e013      	b.n	9244 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    921c:	797b      	ldrb	r3, [r7, #5]
    921e:	4a28      	ldr	r2, [pc, #160]	; (92c0 <_ext_irq_handler+0x128>)
    9220:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    9224:	461a      	mov	r2, r3
    9226:	f997 300f 	ldrsb.w	r3, [r7, #15]
    922a:	429a      	cmp	r2, r3
    922c:	da03      	bge.n	9236 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    922e:	797b      	ldrb	r3, [r7, #5]
    9230:	3301      	adds	r3, #1
    9232:	71fb      	strb	r3, [r7, #7]
    9234:	e002      	b.n	923c <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    9236:	797b      	ldrb	r3, [r7, #5]
    9238:	3b01      	subs	r3, #1
    923a:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    923c:	79ba      	ldrb	r2, [r7, #6]
    923e:	79fb      	ldrb	r3, [r7, #7]
    9240:	429a      	cmp	r2, r3
    9242:	d2d6      	bcs.n	91f2 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    9244:	68bb      	ldr	r3, [r7, #8]
    9246:	f1b3 3fff 	cmp.w	r3, #4294967295
    924a:	d003      	beq.n	9254 <_ext_irq_handler+0xbc>
				callback(pin);
    924c:	4b18      	ldr	r3, [pc, #96]	; (92b0 <_ext_irq_handler+0x118>)
    924e:	681b      	ldr	r3, [r3, #0]
    9250:	68b8      	ldr	r0, [r7, #8]
    9252:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    9254:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9258:	2201      	movs	r2, #1
    925a:	fa02 f303 	lsl.w	r3, r2, r3
    925e:	43da      	mvns	r2, r3
    9260:	683b      	ldr	r3, [r7, #0]
    9262:	4013      	ands	r3, r2
    9264:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    9266:	683b      	ldr	r3, [r7, #0]
    9268:	4618      	mov	r0, r3
    926a:	4b14      	ldr	r3, [pc, #80]	; (92bc <_ext_irq_handler+0x124>)
    926c:	4798      	blx	r3
    926e:	4603      	mov	r3, r0
    9270:	b2db      	uxtb	r3, r3
    9272:	3b01      	subs	r3, #1
    9274:	b2db      	uxtb	r3, r3
    9276:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    9278:	f997 300f 	ldrsb.w	r3, [r7, #15]
    927c:	f1b3 3fff 	cmp.w	r3, #4294967295
    9280:	d1b2      	bne.n	91e8 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    9282:	4808      	ldr	r0, [pc, #32]	; (92a4 <_ext_irq_handler+0x10c>)
    9284:	4b08      	ldr	r3, [pc, #32]	; (92a8 <_ext_irq_handler+0x110>)
    9286:	4798      	blx	r3
    9288:	4603      	mov	r3, r0
    928a:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    928c:	683b      	ldr	r3, [r7, #0]
    928e:	4619      	mov	r1, r3
    9290:	4804      	ldr	r0, [pc, #16]	; (92a4 <_ext_irq_handler+0x10c>)
    9292:	4b06      	ldr	r3, [pc, #24]	; (92ac <_ext_irq_handler+0x114>)
    9294:	4798      	blx	r3
	while (flags) {
    9296:	683b      	ldr	r3, [r7, #0]
    9298:	2b00      	cmp	r3, #0
    929a:	d19b      	bne.n	91d4 <_ext_irq_handler+0x3c>
	}
}
    929c:	bf00      	nop
    929e:	3710      	adds	r7, #16
    92a0:	46bd      	mov	sp, r7
    92a2:	bd80      	pop	{r7, pc}
    92a4:	40002800 	.word	0x40002800
    92a8:	00008d71 	.word	0x00008d71
    92ac:	00008d89 	.word	0x00008d89
    92b0:	20008748 	.word	0x20008748
    92b4:	0001f60c 	.word	0x0001f60c
    92b8:	00007d91 	.word	0x00007d91
    92bc:	0001aca1 	.word	0x0001aca1
    92c0:	0001f5d4 	.word	0x0001f5d4

000092c4 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    92c4:	b580      	push	{r7, lr}
    92c6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    92c8:	4b01      	ldr	r3, [pc, #4]	; (92d0 <EIC_0_Handler+0xc>)
    92ca:	4798      	blx	r3
} /**
    92cc:	bf00      	nop
    92ce:	bd80      	pop	{r7, pc}
    92d0:	00009199 	.word	0x00009199

000092d4 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    92d4:	b580      	push	{r7, lr}
    92d6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    92d8:	4b01      	ldr	r3, [pc, #4]	; (92e0 <EIC_4_Handler+0xc>)
    92da:	4798      	blx	r3
} /**
    92dc:	bf00      	nop
    92de:	bd80      	pop	{r7, pc}
    92e0:	00009199 	.word	0x00009199

000092e4 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    92e4:	b580      	push	{r7, lr}
    92e6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    92e8:	4b01      	ldr	r3, [pc, #4]	; (92f0 <EIC_5_Handler+0xc>)
    92ea:	4798      	blx	r3
} /**
    92ec:	bf00      	nop
    92ee:	bd80      	pop	{r7, pc}
    92f0:	00009199 	.word	0x00009199

000092f4 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    92f4:	b580      	push	{r7, lr}
    92f6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    92f8:	4b01      	ldr	r3, [pc, #4]	; (9300 <EIC_6_Handler+0xc>)
    92fa:	4798      	blx	r3
} /**
    92fc:	bf00      	nop
    92fe:	bd80      	pop	{r7, pc}
    9300:	00009199 	.word	0x00009199

00009304 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    9304:	b580      	push	{r7, lr}
    9306:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9308:	4b01      	ldr	r3, [pc, #4]	; (9310 <EIC_7_Handler+0xc>)
    930a:	4798      	blx	r3
} /**
    930c:	bf00      	nop
    930e:	bd80      	pop	{r7, pc}
    9310:	00009199 	.word	0x00009199

00009314 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    9314:	b580      	push	{r7, lr}
    9316:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9318:	4b01      	ldr	r3, [pc, #4]	; (9320 <EIC_8_Handler+0xc>)
    931a:	4798      	blx	r3
} /**
    931c:	bf00      	nop
    931e:	bd80      	pop	{r7, pc}
    9320:	00009199 	.word	0x00009199

00009324 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    9324:	b580      	push	{r7, lr}
    9326:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9328:	4b01      	ldr	r3, [pc, #4]	; (9330 <EIC_9_Handler+0xc>)
    932a:	4798      	blx	r3
}
    932c:	bf00      	nop
    932e:	bd80      	pop	{r7, pc}
    9330:	00009199 	.word	0x00009199

00009334 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    9334:	b480      	push	{r7}
    9336:	b085      	sub	sp, #20
    9338:	af00      	add	r7, sp, #0
    933a:	60f8      	str	r0, [r7, #12]
    933c:	460b      	mov	r3, r1
    933e:	607a      	str	r2, [r7, #4]
    9340:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    9342:	7afa      	ldrb	r2, [r7, #11]
    9344:	68fb      	ldr	r3, [r7, #12]
    9346:	3248      	adds	r2, #72	; 0x48
    9348:	6879      	ldr	r1, [r7, #4]
    934a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    934e:	bf00      	nop
    9350:	3714      	adds	r7, #20
    9352:	46bd      	mov	sp, r7
    9354:	f85d 7b04 	ldr.w	r7, [sp], #4
    9358:	4770      	bx	lr

0000935a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    935a:	b480      	push	{r7}
    935c:	b083      	sub	sp, #12
    935e:	af00      	add	r7, sp, #0
    9360:	6078      	str	r0, [r7, #4]
    9362:	460b      	mov	r3, r1
    9364:	70fb      	strb	r3, [r7, #3]
    9366:	4613      	mov	r3, r2
    9368:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    936a:	78fb      	ldrb	r3, [r7, #3]
    936c:	687a      	ldr	r2, [r7, #4]
    936e:	3304      	adds	r3, #4
    9370:	00db      	lsls	r3, r3, #3
    9372:	4413      	add	r3, r2
    9374:	78ba      	ldrb	r2, [r7, #2]
    9376:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    9378:	78fb      	ldrb	r3, [r7, #3]
    937a:	78ba      	ldrb	r2, [r7, #2]
    937c:	43d2      	mvns	r2, r2
    937e:	b2d1      	uxtb	r1, r2
    9380:	687a      	ldr	r2, [r7, #4]
    9382:	3304      	adds	r3, #4
    9384:	00db      	lsls	r3, r3, #3
    9386:	4413      	add	r3, r2
    9388:	460a      	mov	r2, r1
    938a:	711a      	strb	r2, [r3, #4]
}
    938c:	bf00      	nop
    938e:	370c      	adds	r7, #12
    9390:	46bd      	mov	sp, r7
    9392:	f85d 7b04 	ldr.w	r7, [sp], #4
    9396:	4770      	bx	lr

00009398 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    9398:	b480      	push	{r7}
    939a:	b085      	sub	sp, #20
    939c:	af00      	add	r7, sp, #0
    939e:	60f8      	str	r0, [r7, #12]
    93a0:	460b      	mov	r3, r1
    93a2:	607a      	str	r2, [r7, #4]
    93a4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    93a6:	7afa      	ldrb	r2, [r7, #11]
    93a8:	68fb      	ldr	r3, [r7, #12]
    93aa:	3204      	adds	r2, #4
    93ac:	6879      	ldr	r1, [r7, #4]
    93ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    93b2:	bf00      	nop
    93b4:	3714      	adds	r7, #20
    93b6:	46bd      	mov	sp, r7
    93b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93bc:	4770      	bx	lr
	...

000093c0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    93c0:	b580      	push	{r7, lr}
    93c2:	b082      	sub	sp, #8
    93c4:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    93c6:	2300      	movs	r3, #0
    93c8:	71fb      	strb	r3, [r7, #7]
    93ca:	e00b      	b.n	93e4 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    93cc:	79fb      	ldrb	r3, [r7, #7]
    93ce:	4a18      	ldr	r2, [pc, #96]	; (9430 <_event_system_init+0x70>)
    93d0:	5cd3      	ldrb	r3, [r2, r3]
    93d2:	461a      	mov	r2, r3
    93d4:	79fb      	ldrb	r3, [r7, #7]
    93d6:	4619      	mov	r1, r3
    93d8:	4816      	ldr	r0, [pc, #88]	; (9434 <_event_system_init+0x74>)
    93da:	4b17      	ldr	r3, [pc, #92]	; (9438 <_event_system_init+0x78>)
    93dc:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    93de:	79fb      	ldrb	r3, [r7, #7]
    93e0:	3301      	adds	r3, #1
    93e2:	71fb      	strb	r3, [r7, #7]
    93e4:	79fb      	ldrb	r3, [r7, #7]
    93e6:	2b42      	cmp	r3, #66	; 0x42
    93e8:	d9f0      	bls.n	93cc <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    93ea:	2300      	movs	r3, #0
    93ec:	71fb      	strb	r3, [r7, #7]
    93ee:	e016      	b.n	941e <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    93f0:	79fb      	ldrb	r3, [r7, #7]
    93f2:	4a12      	ldr	r2, [pc, #72]	; (943c <_event_system_init+0x7c>)
    93f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    93f8:	461a      	mov	r2, r3
    93fa:	79fb      	ldrb	r3, [r7, #7]
    93fc:	4619      	mov	r1, r3
    93fe:	480d      	ldr	r0, [pc, #52]	; (9434 <_event_system_init+0x74>)
    9400:	4b0f      	ldr	r3, [pc, #60]	; (9440 <_event_system_init+0x80>)
    9402:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    9404:	79fb      	ldrb	r3, [r7, #7]
    9406:	4a0f      	ldr	r2, [pc, #60]	; (9444 <_event_system_init+0x84>)
    9408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    940c:	b2da      	uxtb	r2, r3
    940e:	79fb      	ldrb	r3, [r7, #7]
    9410:	4619      	mov	r1, r3
    9412:	4808      	ldr	r0, [pc, #32]	; (9434 <_event_system_init+0x74>)
    9414:	4b0c      	ldr	r3, [pc, #48]	; (9448 <_event_system_init+0x88>)
    9416:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    9418:	79fb      	ldrb	r3, [r7, #7]
    941a:	3301      	adds	r3, #1
    941c:	71fb      	strb	r3, [r7, #7]
    941e:	79fb      	ldrb	r3, [r7, #7]
    9420:	2b1f      	cmp	r3, #31
    9422:	d9e5      	bls.n	93f0 <_event_system_init+0x30>
	}

	return ERR_NONE;
    9424:	2300      	movs	r3, #0
}
    9426:	4618      	mov	r0, r3
    9428:	3708      	adds	r7, #8
    942a:	46bd      	mov	sp, r7
    942c:	bd80      	pop	{r7, pc}
    942e:	bf00      	nop
    9430:	0001f624 	.word	0x0001f624
    9434:	4100e000 	.word	0x4100e000
    9438:	00009335 	.word	0x00009335
    943c:	0001f668 	.word	0x0001f668
    9440:	00009399 	.word	0x00009399
    9444:	0001f6a8 	.word	0x0001f6a8
    9448:	0000935b 	.word	0x0000935b

0000944c <hri_gclk_wait_for_sync>:
{
    944c:	b480      	push	{r7}
    944e:	b083      	sub	sp, #12
    9450:	af00      	add	r7, sp, #0
    9452:	6078      	str	r0, [r7, #4]
    9454:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9456:	bf00      	nop
    9458:	687b      	ldr	r3, [r7, #4]
    945a:	685a      	ldr	r2, [r3, #4]
    945c:	683b      	ldr	r3, [r7, #0]
    945e:	4013      	ands	r3, r2
    9460:	2b00      	cmp	r3, #0
    9462:	d1f9      	bne.n	9458 <hri_gclk_wait_for_sync+0xc>
}
    9464:	bf00      	nop
    9466:	370c      	adds	r7, #12
    9468:	46bd      	mov	sp, r7
    946a:	f85d 7b04 	ldr.w	r7, [sp], #4
    946e:	4770      	bx	lr

00009470 <hri_gclk_write_GENCTRL_reg>:
{
    9470:	b580      	push	{r7, lr}
    9472:	b084      	sub	sp, #16
    9474:	af00      	add	r7, sp, #0
    9476:	60f8      	str	r0, [r7, #12]
    9478:	460b      	mov	r3, r1
    947a:	607a      	str	r2, [r7, #4]
    947c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    947e:	7afa      	ldrb	r2, [r7, #11]
    9480:	68fb      	ldr	r3, [r7, #12]
    9482:	3208      	adds	r2, #8
    9484:	6879      	ldr	r1, [r7, #4]
    9486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    948a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    948e:	68f8      	ldr	r0, [r7, #12]
    9490:	4b02      	ldr	r3, [pc, #8]	; (949c <hri_gclk_write_GENCTRL_reg+0x2c>)
    9492:	4798      	blx	r3
}
    9494:	bf00      	nop
    9496:	3710      	adds	r7, #16
    9498:	46bd      	mov	sp, r7
    949a:	bd80      	pop	{r7, pc}
    949c:	0000944d 	.word	0x0000944d

000094a0 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    94a0:	b580      	push	{r7, lr}
    94a2:	b082      	sub	sp, #8
    94a4:	af00      	add	r7, sp, #0
    94a6:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    94a8:	687b      	ldr	r3, [r7, #4]
    94aa:	f003 0301 	and.w	r3, r3, #1
    94ae:	2b00      	cmp	r3, #0
    94b0:	d004      	beq.n	94bc <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    94b2:	4a36      	ldr	r2, [pc, #216]	; (958c <_gclk_init_generators_by_fref+0xec>)
    94b4:	2100      	movs	r1, #0
    94b6:	4836      	ldr	r0, [pc, #216]	; (9590 <_gclk_init_generators_by_fref+0xf0>)
    94b8:	4b36      	ldr	r3, [pc, #216]	; (9594 <_gclk_init_generators_by_fref+0xf4>)
    94ba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    94bc:	687b      	ldr	r3, [r7, #4]
    94be:	f003 0302 	and.w	r3, r3, #2
    94c2:	2b00      	cmp	r3, #0
    94c4:	d004      	beq.n	94d0 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    94c6:	4a34      	ldr	r2, [pc, #208]	; (9598 <_gclk_init_generators_by_fref+0xf8>)
    94c8:	2101      	movs	r1, #1
    94ca:	4831      	ldr	r0, [pc, #196]	; (9590 <_gclk_init_generators_by_fref+0xf0>)
    94cc:	4b31      	ldr	r3, [pc, #196]	; (9594 <_gclk_init_generators_by_fref+0xf4>)
    94ce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    94d0:	687b      	ldr	r3, [r7, #4]
    94d2:	f003 0304 	and.w	r3, r3, #4
    94d6:	2b00      	cmp	r3, #0
    94d8:	d004      	beq.n	94e4 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    94da:	4a30      	ldr	r2, [pc, #192]	; (959c <_gclk_init_generators_by_fref+0xfc>)
    94dc:	2102      	movs	r1, #2
    94de:	482c      	ldr	r0, [pc, #176]	; (9590 <_gclk_init_generators_by_fref+0xf0>)
    94e0:	4b2c      	ldr	r3, [pc, #176]	; (9594 <_gclk_init_generators_by_fref+0xf4>)
    94e2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    94e4:	687b      	ldr	r3, [r7, #4]
    94e6:	f003 0308 	and.w	r3, r3, #8
    94ea:	2b00      	cmp	r3, #0
    94ec:	d004      	beq.n	94f8 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    94ee:	4a2c      	ldr	r2, [pc, #176]	; (95a0 <_gclk_init_generators_by_fref+0x100>)
    94f0:	2103      	movs	r1, #3
    94f2:	4827      	ldr	r0, [pc, #156]	; (9590 <_gclk_init_generators_by_fref+0xf0>)
    94f4:	4b27      	ldr	r3, [pc, #156]	; (9594 <_gclk_init_generators_by_fref+0xf4>)
    94f6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    94f8:	687b      	ldr	r3, [r7, #4]
    94fa:	f003 0310 	and.w	r3, r3, #16
    94fe:	2b00      	cmp	r3, #0
    9500:	d004      	beq.n	950c <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    9502:	4a28      	ldr	r2, [pc, #160]	; (95a4 <_gclk_init_generators_by_fref+0x104>)
    9504:	2104      	movs	r1, #4
    9506:	4822      	ldr	r0, [pc, #136]	; (9590 <_gclk_init_generators_by_fref+0xf0>)
    9508:	4b22      	ldr	r3, [pc, #136]	; (9594 <_gclk_init_generators_by_fref+0xf4>)
    950a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    950c:	687b      	ldr	r3, [r7, #4]
    950e:	f003 0320 	and.w	r3, r3, #32
    9512:	2b00      	cmp	r3, #0
    9514:	d004      	beq.n	9520 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    9516:	4a24      	ldr	r2, [pc, #144]	; (95a8 <_gclk_init_generators_by_fref+0x108>)
    9518:	2105      	movs	r1, #5
    951a:	481d      	ldr	r0, [pc, #116]	; (9590 <_gclk_init_generators_by_fref+0xf0>)
    951c:	4b1d      	ldr	r3, [pc, #116]	; (9594 <_gclk_init_generators_by_fref+0xf4>)
    951e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    9520:	687b      	ldr	r3, [r7, #4]
    9522:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9526:	2b00      	cmp	r3, #0
    9528:	d004      	beq.n	9534 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    952a:	4a20      	ldr	r2, [pc, #128]	; (95ac <_gclk_init_generators_by_fref+0x10c>)
    952c:	2106      	movs	r1, #6
    952e:	4818      	ldr	r0, [pc, #96]	; (9590 <_gclk_init_generators_by_fref+0xf0>)
    9530:	4b18      	ldr	r3, [pc, #96]	; (9594 <_gclk_init_generators_by_fref+0xf4>)
    9532:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    9534:	687b      	ldr	r3, [r7, #4]
    9536:	f003 0380 	and.w	r3, r3, #128	; 0x80
    953a:	2b00      	cmp	r3, #0
    953c:	d004      	beq.n	9548 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    953e:	4a1c      	ldr	r2, [pc, #112]	; (95b0 <_gclk_init_generators_by_fref+0x110>)
    9540:	2107      	movs	r1, #7
    9542:	4813      	ldr	r0, [pc, #76]	; (9590 <_gclk_init_generators_by_fref+0xf0>)
    9544:	4b13      	ldr	r3, [pc, #76]	; (9594 <_gclk_init_generators_by_fref+0xf4>)
    9546:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    9548:	687b      	ldr	r3, [r7, #4]
    954a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    954e:	2b00      	cmp	r3, #0
    9550:	d004      	beq.n	955c <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    9552:	4a18      	ldr	r2, [pc, #96]	; (95b4 <_gclk_init_generators_by_fref+0x114>)
    9554:	2108      	movs	r1, #8
    9556:	480e      	ldr	r0, [pc, #56]	; (9590 <_gclk_init_generators_by_fref+0xf0>)
    9558:	4b0e      	ldr	r3, [pc, #56]	; (9594 <_gclk_init_generators_by_fref+0xf4>)
    955a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    955c:	687b      	ldr	r3, [r7, #4]
    955e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9562:	2b00      	cmp	r3, #0
    9564:	d004      	beq.n	9570 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    9566:	4a14      	ldr	r2, [pc, #80]	; (95b8 <_gclk_init_generators_by_fref+0x118>)
    9568:	210a      	movs	r1, #10
    956a:	4809      	ldr	r0, [pc, #36]	; (9590 <_gclk_init_generators_by_fref+0xf0>)
    956c:	4b09      	ldr	r3, [pc, #36]	; (9594 <_gclk_init_generators_by_fref+0xf4>)
    956e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    9570:	687b      	ldr	r3, [r7, #4]
    9572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    9576:	2b00      	cmp	r3, #0
    9578:	d004      	beq.n	9584 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    957a:	4a10      	ldr	r2, [pc, #64]	; (95bc <_gclk_init_generators_by_fref+0x11c>)
    957c:	210b      	movs	r1, #11
    957e:	4804      	ldr	r0, [pc, #16]	; (9590 <_gclk_init_generators_by_fref+0xf0>)
    9580:	4b04      	ldr	r3, [pc, #16]	; (9594 <_gclk_init_generators_by_fref+0xf4>)
    9582:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    9584:	bf00      	nop
    9586:	3708      	adds	r7, #8
    9588:	46bd      	mov	sp, r7
    958a:	bd80      	pop	{r7, pc}
    958c:	00010107 	.word	0x00010107
    9590:	40001c00 	.word	0x40001c00
    9594:	00009471 	.word	0x00009471
    9598:	00010907 	.word	0x00010907
    959c:	00010906 	.word	0x00010906
    95a0:	00020908 	.word	0x00020908
    95a4:	00010901 	.word	0x00010901
    95a8:	00062901 	.word	0x00062901
    95ac:	000c2901 	.word	0x000c2901
    95b0:	00082908 	.word	0x00082908
    95b4:	00032901 	.word	0x00032901
    95b8:	00010905 	.word	0x00010905
    95bc:	00041905 	.word	0x00041905

000095c0 <hri_mclk_write_CPUDIV_reg>:
{
    95c0:	b480      	push	{r7}
    95c2:	b083      	sub	sp, #12
    95c4:	af00      	add	r7, sp, #0
    95c6:	6078      	str	r0, [r7, #4]
    95c8:	460b      	mov	r3, r1
    95ca:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    95cc:	687b      	ldr	r3, [r7, #4]
    95ce:	78fa      	ldrb	r2, [r7, #3]
    95d0:	715a      	strb	r2, [r3, #5]
}
    95d2:	bf00      	nop
    95d4:	370c      	adds	r7, #12
    95d6:	46bd      	mov	sp, r7
    95d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    95dc:	4770      	bx	lr
	...

000095e0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    95e0:	b580      	push	{r7, lr}
    95e2:	b082      	sub	sp, #8
    95e4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    95e6:	4b05      	ldr	r3, [pc, #20]	; (95fc <_mclk_init+0x1c>)
    95e8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    95ea:	2101      	movs	r1, #1
    95ec:	6878      	ldr	r0, [r7, #4]
    95ee:	4b04      	ldr	r3, [pc, #16]	; (9600 <_mclk_init+0x20>)
    95f0:	4798      	blx	r3
}
    95f2:	bf00      	nop
    95f4:	3708      	adds	r7, #8
    95f6:	46bd      	mov	sp, r7
    95f8:	bd80      	pop	{r7, pc}
    95fa:	bf00      	nop
    95fc:	40000800 	.word	0x40000800
    9600:	000095c1 	.word	0x000095c1

00009604 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    9604:	b480      	push	{r7}
    9606:	b083      	sub	sp, #12
    9608:	af00      	add	r7, sp, #0
    960a:	6078      	str	r0, [r7, #4]
    960c:	460b      	mov	r3, r1
    960e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    9610:	687b      	ldr	r3, [r7, #4]
    9612:	78fa      	ldrb	r2, [r7, #3]
    9614:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9616:	bf00      	nop
    9618:	370c      	adds	r7, #12
    961a:	46bd      	mov	sp, r7
    961c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9620:	4770      	bx	lr

00009622 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    9622:	b480      	push	{r7}
    9624:	b083      	sub	sp, #12
    9626:	af00      	add	r7, sp, #0
    9628:	6078      	str	r0, [r7, #4]
    962a:	460b      	mov	r3, r1
    962c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    962e:	687b      	ldr	r3, [r7, #4]
    9630:	887a      	ldrh	r2, [r7, #2]
    9632:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9634:	bf00      	nop
    9636:	370c      	adds	r7, #12
    9638:	46bd      	mov	sp, r7
    963a:	f85d 7b04 	ldr.w	r7, [sp], #4
    963e:	4770      	bx	lr

00009640 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    9640:	b480      	push	{r7}
    9642:	b083      	sub	sp, #12
    9644:	af00      	add	r7, sp, #0
    9646:	6078      	str	r0, [r7, #4]
    9648:	460b      	mov	r3, r1
    964a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    964c:	687b      	ldr	r3, [r7, #4]
    964e:	78fa      	ldrb	r2, [r7, #3]
    9650:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9652:	bf00      	nop
    9654:	370c      	adds	r7, #12
    9656:	46bd      	mov	sp, r7
    9658:	f85d 7b04 	ldr.w	r7, [sp], #4
    965c:	4770      	bx	lr

0000965e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    965e:	b480      	push	{r7}
    9660:	b083      	sub	sp, #12
    9662:	af00      	add	r7, sp, #0
    9664:	6078      	str	r0, [r7, #4]
    9666:	460b      	mov	r3, r1
    9668:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    966a:	687b      	ldr	r3, [r7, #4]
    966c:	78fa      	ldrb	r2, [r7, #3]
    966e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9670:	bf00      	nop
    9672:	370c      	adds	r7, #12
    9674:	46bd      	mov	sp, r7
    9676:	f85d 7b04 	ldr.w	r7, [sp], #4
    967a:	4770      	bx	lr

0000967c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    967c:	b480      	push	{r7}
    967e:	b085      	sub	sp, #20
    9680:	af00      	add	r7, sp, #0
    9682:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	69db      	ldr	r3, [r3, #28]
    9688:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    968a:	68fb      	ldr	r3, [r7, #12]
    968c:	0a1b      	lsrs	r3, r3, #8
    968e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9692:	60fb      	str	r3, [r7, #12]
	return tmp;
    9694:	68fb      	ldr	r3, [r7, #12]
}
    9696:	4618      	mov	r0, r3
    9698:	3714      	adds	r7, #20
    969a:	46bd      	mov	sp, r7
    969c:	f85d 7b04 	ldr.w	r7, [sp], #4
    96a0:	4770      	bx	lr

000096a2 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    96a2:	b480      	push	{r7}
    96a4:	b083      	sub	sp, #12
    96a6:	af00      	add	r7, sp, #0
    96a8:	6078      	str	r0, [r7, #4]
    96aa:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    96ac:	687b      	ldr	r3, [r7, #4]
    96ae:	683a      	ldr	r2, [r7, #0]
    96b0:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    96b2:	bf00      	nop
    96b4:	370c      	adds	r7, #12
    96b6:	46bd      	mov	sp, r7
    96b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    96bc:	4770      	bx	lr
	...

000096c0 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    96c0:	b580      	push	{r7, lr}
    96c2:	b082      	sub	sp, #8
    96c4:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    96c6:	4b13      	ldr	r3, [pc, #76]	; (9714 <_osc32kctrl_init_sources+0x54>)
    96c8:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    96ca:	2300      	movs	r3, #0
    96cc:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    96ce:	f242 018e 	movw	r1, #8334	; 0x208e
    96d2:	6878      	ldr	r0, [r7, #4]
    96d4:	4b10      	ldr	r3, [pc, #64]	; (9718 <_osc32kctrl_init_sources+0x58>)
    96d6:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    96d8:	2100      	movs	r1, #0
    96da:	6878      	ldr	r0, [r7, #4]
    96dc:	4b0f      	ldr	r3, [pc, #60]	; (971c <_osc32kctrl_init_sources+0x5c>)
    96de:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    96e0:	2100      	movs	r1, #0
    96e2:	6878      	ldr	r0, [r7, #4]
    96e4:	4b0e      	ldr	r3, [pc, #56]	; (9720 <_osc32kctrl_init_sources+0x60>)
    96e6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    96e8:	6878      	ldr	r0, [r7, #4]
    96ea:	4b0e      	ldr	r3, [pc, #56]	; (9724 <_osc32kctrl_init_sources+0x64>)
    96ec:	4798      	blx	r3
    96ee:	4603      	mov	r3, r0
    96f0:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    96f2:	887b      	ldrh	r3, [r7, #2]
    96f4:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    96f6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    96fa:	4619      	mov	r1, r3
    96fc:	6878      	ldr	r0, [r7, #4]
    96fe:	4b0a      	ldr	r3, [pc, #40]	; (9728 <_osc32kctrl_init_sources+0x68>)
    9700:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    9702:	2100      	movs	r1, #0
    9704:	6878      	ldr	r0, [r7, #4]
    9706:	4b09      	ldr	r3, [pc, #36]	; (972c <_osc32kctrl_init_sources+0x6c>)
    9708:	4798      	blx	r3
	(void)calib;
}
    970a:	bf00      	nop
    970c:	3708      	adds	r7, #8
    970e:	46bd      	mov	sp, r7
    9710:	bd80      	pop	{r7, pc}
    9712:	bf00      	nop
    9714:	40001400 	.word	0x40001400
    9718:	00009623 	.word	0x00009623
    971c:	00009641 	.word	0x00009641
    9720:	0000965f 	.word	0x0000965f
    9724:	0000967d 	.word	0x0000967d
    9728:	000096a3 	.word	0x000096a3
    972c:	00009605 	.word	0x00009605

00009730 <hri_gclk_wait_for_sync>:
{
    9730:	b480      	push	{r7}
    9732:	b083      	sub	sp, #12
    9734:	af00      	add	r7, sp, #0
    9736:	6078      	str	r0, [r7, #4]
    9738:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    973a:	bf00      	nop
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	685a      	ldr	r2, [r3, #4]
    9740:	683b      	ldr	r3, [r7, #0]
    9742:	4013      	ands	r3, r2
    9744:	2b00      	cmp	r3, #0
    9746:	d1f9      	bne.n	973c <hri_gclk_wait_for_sync+0xc>
}
    9748:	bf00      	nop
    974a:	370c      	adds	r7, #12
    974c:	46bd      	mov	sp, r7
    974e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9752:	4770      	bx	lr

00009754 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    9754:	b480      	push	{r7}
    9756:	b083      	sub	sp, #12
    9758:	af00      	add	r7, sp, #0
    975a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    975c:	687b      	ldr	r3, [r7, #4]
    975e:	685b      	ldr	r3, [r3, #4]
    9760:	089b      	lsrs	r3, r3, #2
    9762:	f003 0301 	and.w	r3, r3, #1
    9766:	2b00      	cmp	r3, #0
    9768:	bf14      	ite	ne
    976a:	2301      	movne	r3, #1
    976c:	2300      	moveq	r3, #0
    976e:	b2db      	uxtb	r3, r3
}
    9770:	4618      	mov	r0, r3
    9772:	370c      	adds	r7, #12
    9774:	46bd      	mov	sp, r7
    9776:	f85d 7b04 	ldr.w	r7, [sp], #4
    977a:	4770      	bx	lr

0000977c <hri_gclk_read_SYNCBUSY_reg>:
{
    977c:	b480      	push	{r7}
    977e:	b083      	sub	sp, #12
    9780:	af00      	add	r7, sp, #0
    9782:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    9784:	687b      	ldr	r3, [r7, #4]
    9786:	685b      	ldr	r3, [r3, #4]
}
    9788:	4618      	mov	r0, r3
    978a:	370c      	adds	r7, #12
    978c:	46bd      	mov	sp, r7
    978e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9792:	4770      	bx	lr

00009794 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    9794:	b580      	push	{r7, lr}
    9796:	b086      	sub	sp, #24
    9798:	af00      	add	r7, sp, #0
    979a:	60f8      	str	r0, [r7, #12]
    979c:	460b      	mov	r3, r1
    979e:	607a      	str	r2, [r7, #4]
    97a0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    97a2:	7afa      	ldrb	r2, [r7, #11]
    97a4:	68fb      	ldr	r3, [r7, #12]
    97a6:	3208      	adds	r2, #8
    97a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    97ac:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    97ae:	697b      	ldr	r3, [r7, #20]
    97b0:	f023 030f 	bic.w	r3, r3, #15
    97b4:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    97b6:	687b      	ldr	r3, [r7, #4]
    97b8:	f003 030f 	and.w	r3, r3, #15
    97bc:	697a      	ldr	r2, [r7, #20]
    97be:	4313      	orrs	r3, r2
    97c0:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    97c2:	7afa      	ldrb	r2, [r7, #11]
    97c4:	68fb      	ldr	r3, [r7, #12]
    97c6:	3208      	adds	r2, #8
    97c8:	6979      	ldr	r1, [r7, #20]
    97ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    97ce:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    97d2:	68f8      	ldr	r0, [r7, #12]
    97d4:	4b02      	ldr	r3, [pc, #8]	; (97e0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    97d6:	4798      	blx	r3
}
    97d8:	bf00      	nop
    97da:	3718      	adds	r7, #24
    97dc:	46bd      	mov	sp, r7
    97de:	bd80      	pop	{r7, pc}
    97e0:	00009731 	.word	0x00009731

000097e4 <hri_gclk_write_PCHCTRL_reg>:
{
    97e4:	b480      	push	{r7}
    97e6:	b085      	sub	sp, #20
    97e8:	af00      	add	r7, sp, #0
    97ea:	60f8      	str	r0, [r7, #12]
    97ec:	460b      	mov	r3, r1
    97ee:	607a      	str	r2, [r7, #4]
    97f0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    97f2:	7afa      	ldrb	r2, [r7, #11]
    97f4:	68fb      	ldr	r3, [r7, #12]
    97f6:	3220      	adds	r2, #32
    97f8:	6879      	ldr	r1, [r7, #4]
    97fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    97fe:	bf00      	nop
    9800:	3714      	adds	r7, #20
    9802:	46bd      	mov	sp, r7
    9804:	f85d 7b04 	ldr.w	r7, [sp], #4
    9808:	4770      	bx	lr

0000980a <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    980a:	b480      	push	{r7}
    980c:	b085      	sub	sp, #20
    980e:	af00      	add	r7, sp, #0
    9810:	60f8      	str	r0, [r7, #12]
    9812:	460b      	mov	r3, r1
    9814:	607a      	str	r2, [r7, #4]
    9816:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    9818:	bf00      	nop
    981a:	7afa      	ldrb	r2, [r7, #11]
    981c:	68f9      	ldr	r1, [r7, #12]
    981e:	4613      	mov	r3, r2
    9820:	009b      	lsls	r3, r3, #2
    9822:	4413      	add	r3, r2
    9824:	009b      	lsls	r3, r3, #2
    9826:	440b      	add	r3, r1
    9828:	333c      	adds	r3, #60	; 0x3c
    982a:	681a      	ldr	r2, [r3, #0]
    982c:	687b      	ldr	r3, [r7, #4]
    982e:	4013      	ands	r3, r2
    9830:	2b00      	cmp	r3, #0
    9832:	d1f2      	bne.n	981a <hri_oscctrl_wait_for_sync+0x10>
	};
}
    9834:	bf00      	nop
    9836:	3714      	adds	r7, #20
    9838:	46bd      	mov	sp, r7
    983a:	f85d 7b04 	ldr.w	r7, [sp], #4
    983e:	4770      	bx	lr

00009840 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    9840:	b480      	push	{r7}
    9842:	b083      	sub	sp, #12
    9844:	af00      	add	r7, sp, #0
    9846:	6078      	str	r0, [r7, #4]
    9848:	460b      	mov	r3, r1
    984a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    984c:	78fa      	ldrb	r2, [r7, #3]
    984e:	6879      	ldr	r1, [r7, #4]
    9850:	4613      	mov	r3, r2
    9852:	009b      	lsls	r3, r3, #2
    9854:	4413      	add	r3, r2
    9856:	009b      	lsls	r3, r3, #2
    9858:	440b      	add	r3, r1
    985a:	3340      	adds	r3, #64	; 0x40
    985c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    985e:	f003 0301 	and.w	r3, r3, #1
    9862:	2b00      	cmp	r3, #0
    9864:	bf14      	ite	ne
    9866:	2301      	movne	r3, #1
    9868:	2300      	moveq	r3, #0
    986a:	b2db      	uxtb	r3, r3
}
    986c:	4618      	mov	r0, r3
    986e:	370c      	adds	r7, #12
    9870:	46bd      	mov	sp, r7
    9872:	f85d 7b04 	ldr.w	r7, [sp], #4
    9876:	4770      	bx	lr

00009878 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    9878:	b480      	push	{r7}
    987a:	b083      	sub	sp, #12
    987c:	af00      	add	r7, sp, #0
    987e:	6078      	str	r0, [r7, #4]
    9880:	460b      	mov	r3, r1
    9882:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    9884:	78fa      	ldrb	r2, [r7, #3]
    9886:	6879      	ldr	r1, [r7, #4]
    9888:	4613      	mov	r3, r2
    988a:	009b      	lsls	r3, r3, #2
    988c:	4413      	add	r3, r2
    988e:	009b      	lsls	r3, r3, #2
    9890:	440b      	add	r3, r1
    9892:	3340      	adds	r3, #64	; 0x40
    9894:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    9896:	085b      	lsrs	r3, r3, #1
    9898:	f003 0301 	and.w	r3, r3, #1
    989c:	2b00      	cmp	r3, #0
    989e:	bf14      	ite	ne
    98a0:	2301      	movne	r3, #1
    98a2:	2300      	moveq	r3, #0
    98a4:	b2db      	uxtb	r3, r3
}
    98a6:	4618      	mov	r0, r3
    98a8:	370c      	adds	r7, #12
    98aa:	46bd      	mov	sp, r7
    98ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    98b0:	4770      	bx	lr
	...

000098b4 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    98b4:	b580      	push	{r7, lr}
    98b6:	b082      	sub	sp, #8
    98b8:	af00      	add	r7, sp, #0
    98ba:	6078      	str	r0, [r7, #4]
    98bc:	460b      	mov	r3, r1
    98be:	70fb      	strb	r3, [r7, #3]
    98c0:	4613      	mov	r3, r2
    98c2:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    98c4:	78fa      	ldrb	r2, [r7, #3]
    98c6:	6879      	ldr	r1, [r7, #4]
    98c8:	4613      	mov	r3, r2
    98ca:	009b      	lsls	r3, r3, #2
    98cc:	4413      	add	r3, r2
    98ce:	009b      	lsls	r3, r3, #2
    98d0:	440b      	add	r3, r1
    98d2:	3330      	adds	r3, #48	; 0x30
    98d4:	78ba      	ldrb	r2, [r7, #2]
    98d6:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    98d8:	78fb      	ldrb	r3, [r7, #3]
    98da:	2202      	movs	r2, #2
    98dc:	4619      	mov	r1, r3
    98de:	6878      	ldr	r0, [r7, #4]
    98e0:	4b02      	ldr	r3, [pc, #8]	; (98ec <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    98e2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    98e4:	bf00      	nop
    98e6:	3708      	adds	r7, #8
    98e8:	46bd      	mov	sp, r7
    98ea:	bd80      	pop	{r7, pc}
    98ec:	0000980b 	.word	0x0000980b

000098f0 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    98f0:	b580      	push	{r7, lr}
    98f2:	b084      	sub	sp, #16
    98f4:	af00      	add	r7, sp, #0
    98f6:	60f8      	str	r0, [r7, #12]
    98f8:	460b      	mov	r3, r1
    98fa:	607a      	str	r2, [r7, #4]
    98fc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    98fe:	7afa      	ldrb	r2, [r7, #11]
    9900:	68f9      	ldr	r1, [r7, #12]
    9902:	4613      	mov	r3, r2
    9904:	009b      	lsls	r3, r3, #2
    9906:	4413      	add	r3, r2
    9908:	009b      	lsls	r3, r3, #2
    990a:	440b      	add	r3, r1
    990c:	3334      	adds	r3, #52	; 0x34
    990e:	687a      	ldr	r2, [r7, #4]
    9910:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    9912:	7afb      	ldrb	r3, [r7, #11]
    9914:	2206      	movs	r2, #6
    9916:	4619      	mov	r1, r3
    9918:	68f8      	ldr	r0, [r7, #12]
    991a:	4b03      	ldr	r3, [pc, #12]	; (9928 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    991c:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    991e:	bf00      	nop
    9920:	3710      	adds	r7, #16
    9922:	46bd      	mov	sp, r7
    9924:	bd80      	pop	{r7, pc}
    9926:	bf00      	nop
    9928:	0000980b 	.word	0x0000980b

0000992c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    992c:	b480      	push	{r7}
    992e:	b085      	sub	sp, #20
    9930:	af00      	add	r7, sp, #0
    9932:	60f8      	str	r0, [r7, #12]
    9934:	460b      	mov	r3, r1
    9936:	607a      	str	r2, [r7, #4]
    9938:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    993a:	7afa      	ldrb	r2, [r7, #11]
    993c:	68f9      	ldr	r1, [r7, #12]
    993e:	4613      	mov	r3, r2
    9940:	009b      	lsls	r3, r3, #2
    9942:	4413      	add	r3, r2
    9944:	009b      	lsls	r3, r3, #2
    9946:	440b      	add	r3, r1
    9948:	3338      	adds	r3, #56	; 0x38
    994a:	687a      	ldr	r2, [r7, #4]
    994c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    994e:	bf00      	nop
    9950:	3714      	adds	r7, #20
    9952:	46bd      	mov	sp, r7
    9954:	f85d 7b04 	ldr.w	r7, [sp], #4
    9958:	4770      	bx	lr

0000995a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    995a:	b480      	push	{r7}
    995c:	b083      	sub	sp, #12
    995e:	af00      	add	r7, sp, #0
    9960:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    9962:	687b      	ldr	r3, [r7, #4]
    9964:	691b      	ldr	r3, [r3, #16]
    9966:	085b      	lsrs	r3, r3, #1
    9968:	f003 0301 	and.w	r3, r3, #1
    996c:	2b00      	cmp	r3, #0
    996e:	bf14      	ite	ne
    9970:	2301      	movne	r3, #1
    9972:	2300      	moveq	r3, #0
    9974:	b2db      	uxtb	r3, r3
}
    9976:	4618      	mov	r0, r3
    9978:	370c      	adds	r7, #12
    997a:	46bd      	mov	sp, r7
    997c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9980:	4770      	bx	lr

00009982 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    9982:	b480      	push	{r7}
    9984:	b083      	sub	sp, #12
    9986:	af00      	add	r7, sp, #0
    9988:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    998a:	687b      	ldr	r3, [r7, #4]
    998c:	691b      	ldr	r3, [r3, #16]
    998e:	0a1b      	lsrs	r3, r3, #8
    9990:	f003 0301 	and.w	r3, r3, #1
    9994:	2b00      	cmp	r3, #0
    9996:	bf14      	ite	ne
    9998:	2301      	movne	r3, #1
    999a:	2300      	moveq	r3, #0
    999c:	b2db      	uxtb	r3, r3
}
    999e:	4618      	mov	r0, r3
    99a0:	370c      	adds	r7, #12
    99a2:	46bd      	mov	sp, r7
    99a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    99a8:	4770      	bx	lr

000099aa <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    99aa:	b480      	push	{r7}
    99ac:	b085      	sub	sp, #20
    99ae:	af00      	add	r7, sp, #0
    99b0:	6078      	str	r0, [r7, #4]
    99b2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    99b4:	687b      	ldr	r3, [r7, #4]
    99b6:	691b      	ldr	r3, [r3, #16]
    99b8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    99ba:	68fa      	ldr	r2, [r7, #12]
    99bc:	683b      	ldr	r3, [r7, #0]
    99be:	4013      	ands	r3, r2
    99c0:	60fb      	str	r3, [r7, #12]
	return tmp;
    99c2:	68fb      	ldr	r3, [r7, #12]
}
    99c4:	4618      	mov	r0, r3
    99c6:	3714      	adds	r7, #20
    99c8:	46bd      	mov	sp, r7
    99ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    99ce:	4770      	bx	lr

000099d0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    99d0:	b480      	push	{r7}
    99d2:	b085      	sub	sp, #20
    99d4:	af00      	add	r7, sp, #0
    99d6:	60f8      	str	r0, [r7, #12]
    99d8:	460b      	mov	r3, r1
    99da:	607a      	str	r2, [r7, #4]
    99dc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    99de:	7afb      	ldrb	r3, [r7, #11]
    99e0:	68fa      	ldr	r2, [r7, #12]
    99e2:	3304      	adds	r3, #4
    99e4:	009b      	lsls	r3, r3, #2
    99e6:	4413      	add	r3, r2
    99e8:	687a      	ldr	r2, [r7, #4]
    99ea:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    99ec:	bf00      	nop
    99ee:	3714      	adds	r7, #20
    99f0:	46bd      	mov	sp, r7
    99f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    99f6:	4770      	bx	lr

000099f8 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    99f8:	b480      	push	{r7}
    99fa:	b083      	sub	sp, #12
    99fc:	af00      	add	r7, sp, #0
    99fe:	6078      	str	r0, [r7, #4]
    9a00:	460b      	mov	r3, r1
    9a02:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    9a04:	687b      	ldr	r3, [r7, #4]
    9a06:	78fa      	ldrb	r2, [r7, #3]
    9a08:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9a0a:	bf00      	nop
    9a0c:	370c      	adds	r7, #12
    9a0e:	46bd      	mov	sp, r7
    9a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a14:	4770      	bx	lr

00009a16 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    9a16:	b480      	push	{r7}
    9a18:	b085      	sub	sp, #20
    9a1a:	af00      	add	r7, sp, #0
    9a1c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    9a1e:	687b      	ldr	r3, [r7, #4]
    9a20:	f893 3020 	ldrb.w	r3, [r3, #32]
    9a24:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9a26:	7bfb      	ldrb	r3, [r7, #15]
    9a28:	f003 0301 	and.w	r3, r3, #1
    9a2c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9a2e:	7bfb      	ldrb	r3, [r7, #15]
    9a30:	2b00      	cmp	r3, #0
    9a32:	bf14      	ite	ne
    9a34:	2301      	movne	r3, #1
    9a36:	2300      	moveq	r3, #0
    9a38:	b2db      	uxtb	r3, r3
}
    9a3a:	4618      	mov	r0, r3
    9a3c:	3714      	adds	r7, #20
    9a3e:	46bd      	mov	sp, r7
    9a40:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a44:	4770      	bx	lr

00009a46 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    9a46:	b480      	push	{r7}
    9a48:	b083      	sub	sp, #12
    9a4a:	af00      	add	r7, sp, #0
    9a4c:	6078      	str	r0, [r7, #4]
    9a4e:	460b      	mov	r3, r1
    9a50:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    9a52:	687b      	ldr	r3, [r7, #4]
    9a54:	78fa      	ldrb	r2, [r7, #3]
    9a56:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9a5a:	bf00      	nop
    9a5c:	370c      	adds	r7, #12
    9a5e:	46bd      	mov	sp, r7
    9a60:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a64:	4770      	bx	lr

00009a66 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    9a66:	b480      	push	{r7}
    9a68:	b083      	sub	sp, #12
    9a6a:	af00      	add	r7, sp, #0
    9a6c:	6078      	str	r0, [r7, #4]
    9a6e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    9a70:	687b      	ldr	r3, [r7, #4]
    9a72:	683a      	ldr	r2, [r7, #0]
    9a74:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9a76:	bf00      	nop
    9a78:	370c      	adds	r7, #12
    9a7a:	46bd      	mov	sp, r7
    9a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a80:	4770      	bx	lr

00009a82 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    9a82:	b480      	push	{r7}
    9a84:	b083      	sub	sp, #12
    9a86:	af00      	add	r7, sp, #0
    9a88:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    9a8a:	687b      	ldr	r3, [r7, #4]
    9a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    9a8e:	4618      	mov	r0, r3
    9a90:	370c      	adds	r7, #12
    9a92:	46bd      	mov	sp, r7
    9a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a98:	4770      	bx	lr

00009a9a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    9a9a:	b480      	push	{r7}
    9a9c:	b083      	sub	sp, #12
    9a9e:	af00      	add	r7, sp, #0
    9aa0:	6078      	str	r0, [r7, #4]
    9aa2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    9aa4:	687b      	ldr	r3, [r7, #4]
    9aa6:	683a      	ldr	r2, [r7, #0]
    9aa8:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9aaa:	bf00      	nop
    9aac:	370c      	adds	r7, #12
    9aae:	46bd      	mov	sp, r7
    9ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ab4:	4770      	bx	lr

00009ab6 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    9ab6:	b480      	push	{r7}
    9ab8:	b085      	sub	sp, #20
    9aba:	af00      	add	r7, sp, #0
    9abc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9abe:	687b      	ldr	r3, [r7, #4]
    9ac0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9ac4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    9ac6:	7bfb      	ldrb	r3, [r7, #15]
    9ac8:	085b      	lsrs	r3, r3, #1
    9aca:	b2db      	uxtb	r3, r3
    9acc:	f003 0301 	and.w	r3, r3, #1
    9ad0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9ad2:	7bfb      	ldrb	r3, [r7, #15]
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	bf14      	ite	ne
    9ad8:	2301      	movne	r3, #1
    9ada:	2300      	moveq	r3, #0
    9adc:	b2db      	uxtb	r3, r3
}
    9ade:	4618      	mov	r0, r3
    9ae0:	3714      	adds	r7, #20
    9ae2:	46bd      	mov	sp, r7
    9ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ae8:	4770      	bx	lr

00009aea <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    9aea:	b480      	push	{r7}
    9aec:	b085      	sub	sp, #20
    9aee:	af00      	add	r7, sp, #0
    9af0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9af2:	687b      	ldr	r3, [r7, #4]
    9af4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9af8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    9afa:	7bfb      	ldrb	r3, [r7, #15]
    9afc:	089b      	lsrs	r3, r3, #2
    9afe:	b2db      	uxtb	r3, r3
    9b00:	f003 0301 	and.w	r3, r3, #1
    9b04:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9b06:	7bfb      	ldrb	r3, [r7, #15]
    9b08:	2b00      	cmp	r3, #0
    9b0a:	bf14      	ite	ne
    9b0c:	2301      	movne	r3, #1
    9b0e:	2300      	moveq	r3, #0
    9b10:	b2db      	uxtb	r3, r3
}
    9b12:	4618      	mov	r0, r3
    9b14:	3714      	adds	r7, #20
    9b16:	46bd      	mov	sp, r7
    9b18:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b1c:	4770      	bx	lr

00009b1e <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    9b1e:	b480      	push	{r7}
    9b20:	b085      	sub	sp, #20
    9b22:	af00      	add	r7, sp, #0
    9b24:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9b26:	687b      	ldr	r3, [r7, #4]
    9b28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9b2c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    9b2e:	7bfb      	ldrb	r3, [r7, #15]
    9b30:	08db      	lsrs	r3, r3, #3
    9b32:	b2db      	uxtb	r3, r3
    9b34:	f003 0301 	and.w	r3, r3, #1
    9b38:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9b3a:	7bfb      	ldrb	r3, [r7, #15]
    9b3c:	2b00      	cmp	r3, #0
    9b3e:	bf14      	ite	ne
    9b40:	2301      	movne	r3, #1
    9b42:	2300      	moveq	r3, #0
    9b44:	b2db      	uxtb	r3, r3
}
    9b46:	4618      	mov	r0, r3
    9b48:	3714      	adds	r7, #20
    9b4a:	46bd      	mov	sp, r7
    9b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b50:	4770      	bx	lr

00009b52 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    9b52:	b480      	push	{r7}
    9b54:	b085      	sub	sp, #20
    9b56:	af00      	add	r7, sp, #0
    9b58:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9b5a:	687b      	ldr	r3, [r7, #4]
    9b5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9b60:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    9b62:	7bfb      	ldrb	r3, [r7, #15]
    9b64:	091b      	lsrs	r3, r3, #4
    9b66:	b2db      	uxtb	r3, r3
    9b68:	f003 0301 	and.w	r3, r3, #1
    9b6c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9b6e:	7bfb      	ldrb	r3, [r7, #15]
    9b70:	2b00      	cmp	r3, #0
    9b72:	bf14      	ite	ne
    9b74:	2301      	movne	r3, #1
    9b76:	2300      	moveq	r3, #0
    9b78:	b2db      	uxtb	r3, r3
}
    9b7a:	4618      	mov	r0, r3
    9b7c:	3714      	adds	r7, #20
    9b7e:	46bd      	mov	sp, r7
    9b80:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b84:	4770      	bx	lr
	...

00009b88 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    9b88:	b580      	push	{r7, lr}
    9b8a:	b082      	sub	sp, #8
    9b8c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9b8e:	4b0a      	ldr	r3, [pc, #40]	; (9bb8 <_oscctrl_init_sources+0x30>)
    9b90:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    9b92:	4a0a      	ldr	r2, [pc, #40]	; (9bbc <_oscctrl_init_sources+0x34>)
    9b94:	2101      	movs	r1, #1
    9b96:	6878      	ldr	r0, [r7, #4]
    9b98:	4b09      	ldr	r3, [pc, #36]	; (9bc0 <_oscctrl_init_sources+0x38>)
    9b9a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    9b9c:	bf00      	nop
    9b9e:	6878      	ldr	r0, [r7, #4]
    9ba0:	4b08      	ldr	r3, [pc, #32]	; (9bc4 <_oscctrl_init_sources+0x3c>)
    9ba2:	4798      	blx	r3
    9ba4:	4603      	mov	r3, r0
    9ba6:	f083 0301 	eor.w	r3, r3, #1
    9baa:	b2db      	uxtb	r3, r3
    9bac:	2b00      	cmp	r3, #0
    9bae:	d1f6      	bne.n	9b9e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    9bb0:	bf00      	nop
    9bb2:	3708      	adds	r7, #8
    9bb4:	46bd      	mov	sp, r7
    9bb6:	bd80      	pop	{r7, pc}
    9bb8:	40001000 	.word	0x40001000
    9bbc:	03002646 	.word	0x03002646
    9bc0:	000099d1 	.word	0x000099d1
    9bc4:	0000995b 	.word	0x0000995b

00009bc8 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    9bc8:	b580      	push	{r7, lr}
    9bca:	b084      	sub	sp, #16
    9bcc:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9bce:	4b6b      	ldr	r3, [pc, #428]	; (9d7c <_oscctrl_init_referenced_generators+0x1b4>)
    9bd0:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    9bd2:	2204      	movs	r2, #4
    9bd4:	2100      	movs	r1, #0
    9bd6:	486a      	ldr	r0, [pc, #424]	; (9d80 <_oscctrl_init_referenced_generators+0x1b8>)
    9bd8:	4b6a      	ldr	r3, [pc, #424]	; (9d84 <_oscctrl_init_referenced_generators+0x1bc>)
    9bda:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9bdc:	bf00      	nop
    9bde:	4868      	ldr	r0, [pc, #416]	; (9d80 <_oscctrl_init_referenced_generators+0x1b8>)
    9be0:	4b69      	ldr	r3, [pc, #420]	; (9d88 <_oscctrl_init_referenced_generators+0x1c0>)
    9be2:	4798      	blx	r3
    9be4:	4603      	mov	r3, r0
    9be6:	2b00      	cmp	r3, #0
    9be8:	d1f9      	bne.n	9bde <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    9bea:	2100      	movs	r1, #0
    9bec:	68f8      	ldr	r0, [r7, #12]
    9bee:	4b67      	ldr	r3, [pc, #412]	; (9d8c <_oscctrl_init_referenced_generators+0x1c4>)
    9bf0:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    9bf2:	4967      	ldr	r1, [pc, #412]	; (9d90 <_oscctrl_init_referenced_generators+0x1c8>)
    9bf4:	68f8      	ldr	r0, [r7, #12]
    9bf6:	4b67      	ldr	r3, [pc, #412]	; (9d94 <_oscctrl_init_referenced_generators+0x1cc>)
    9bf8:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    9bfa:	bf00      	nop
    9bfc:	68f8      	ldr	r0, [r7, #12]
    9bfe:	4b66      	ldr	r3, [pc, #408]	; (9d98 <_oscctrl_init_referenced_generators+0x1d0>)
    9c00:	4798      	blx	r3
    9c02:	4603      	mov	r3, r0
    9c04:	2b00      	cmp	r3, #0
    9c06:	d1f9      	bne.n	9bfc <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    9c08:	2100      	movs	r1, #0
    9c0a:	68f8      	ldr	r0, [r7, #12]
    9c0c:	4b63      	ldr	r3, [pc, #396]	; (9d9c <_oscctrl_init_referenced_generators+0x1d4>)
    9c0e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9c10:	bf00      	nop
    9c12:	68f8      	ldr	r0, [r7, #12]
    9c14:	4b62      	ldr	r3, [pc, #392]	; (9da0 <_oscctrl_init_referenced_generators+0x1d8>)
    9c16:	4798      	blx	r3
    9c18:	4603      	mov	r3, r0
    9c1a:	2b00      	cmp	r3, #0
    9c1c:	d1f9      	bne.n	9c12 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    9c1e:	2302      	movs	r3, #2
    9c20:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    9c22:	7afb      	ldrb	r3, [r7, #11]
    9c24:	4619      	mov	r1, r3
    9c26:	68f8      	ldr	r0, [r7, #12]
    9c28:	4b58      	ldr	r3, [pc, #352]	; (9d8c <_oscctrl_init_referenced_generators+0x1c4>)
    9c2a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    9c2c:	bf00      	nop
    9c2e:	68f8      	ldr	r0, [r7, #12]
    9c30:	4b5c      	ldr	r3, [pc, #368]	; (9da4 <_oscctrl_init_referenced_generators+0x1dc>)
    9c32:	4798      	blx	r3
    9c34:	4603      	mov	r3, r0
    9c36:	2b00      	cmp	r3, #0
    9c38:	d1f9      	bne.n	9c2e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    9c3a:	68f8      	ldr	r0, [r7, #12]
    9c3c:	4b5a      	ldr	r3, [pc, #360]	; (9da8 <_oscctrl_init_referenced_generators+0x1e0>)
    9c3e:	4798      	blx	r3
    9c40:	4603      	mov	r3, r0
    9c42:	4619      	mov	r1, r3
    9c44:	68f8      	ldr	r0, [r7, #12]
    9c46:	4b59      	ldr	r3, [pc, #356]	; (9dac <_oscctrl_init_referenced_generators+0x1e4>)
    9c48:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    9c4a:	bf00      	nop
    9c4c:	68f8      	ldr	r0, [r7, #12]
    9c4e:	4b58      	ldr	r3, [pc, #352]	; (9db0 <_oscctrl_init_referenced_generators+0x1e8>)
    9c50:	4798      	blx	r3
    9c52:	4603      	mov	r3, r0
    9c54:	2b00      	cmp	r3, #0
    9c56:	d1f9      	bne.n	9c4c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    9c58:	2319      	movs	r3, #25
    9c5a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    9c5c:	7afb      	ldrb	r3, [r7, #11]
    9c5e:	4619      	mov	r1, r3
    9c60:	68f8      	ldr	r0, [r7, #12]
    9c62:	4b4e      	ldr	r3, [pc, #312]	; (9d9c <_oscctrl_init_referenced_generators+0x1d4>)
    9c64:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9c66:	bf00      	nop
    9c68:	68f8      	ldr	r0, [r7, #12]
    9c6a:	4b4d      	ldr	r3, [pc, #308]	; (9da0 <_oscctrl_init_referenced_generators+0x1d8>)
    9c6c:	4798      	blx	r3
    9c6e:	4603      	mov	r3, r0
    9c70:	2b00      	cmp	r3, #0
    9c72:	d1f9      	bne.n	9c68 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    9c74:	2245      	movs	r2, #69	; 0x45
    9c76:	2101      	movs	r1, #1
    9c78:	4841      	ldr	r0, [pc, #260]	; (9d80 <_oscctrl_init_referenced_generators+0x1b8>)
    9c7a:	4b4e      	ldr	r3, [pc, #312]	; (9db4 <_oscctrl_init_referenced_generators+0x1ec>)
    9c7c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    9c7e:	223b      	movs	r2, #59	; 0x3b
    9c80:	2100      	movs	r1, #0
    9c82:	68f8      	ldr	r0, [r7, #12]
    9c84:	4b4c      	ldr	r3, [pc, #304]	; (9db8 <_oscctrl_init_referenced_generators+0x1f0>)
    9c86:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    9c88:	f44f 6201 	mov.w	r2, #2064	; 0x810
    9c8c:	2100      	movs	r1, #0
    9c8e:	68f8      	ldr	r0, [r7, #12]
    9c90:	4b4a      	ldr	r3, [pc, #296]	; (9dbc <_oscctrl_init_referenced_generators+0x1f4>)
    9c92:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9c94:	2242      	movs	r2, #66	; 0x42
    9c96:	2100      	movs	r1, #0
    9c98:	68f8      	ldr	r0, [r7, #12]
    9c9a:	4b49      	ldr	r3, [pc, #292]	; (9dc0 <_oscctrl_init_referenced_generators+0x1f8>)
    9c9c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    9c9e:	4a49      	ldr	r2, [pc, #292]	; (9dc4 <_oscctrl_init_referenced_generators+0x1fc>)
    9ca0:	2101      	movs	r1, #1
    9ca2:	68f8      	ldr	r0, [r7, #12]
    9ca4:	4b44      	ldr	r3, [pc, #272]	; (9db8 <_oscctrl_init_referenced_generators+0x1f0>)
    9ca6:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    9ca8:	f44f 6203 	mov.w	r2, #2096	; 0x830
    9cac:	2101      	movs	r1, #1
    9cae:	68f8      	ldr	r0, [r7, #12]
    9cb0:	4b42      	ldr	r3, [pc, #264]	; (9dbc <_oscctrl_init_referenced_generators+0x1f4>)
    9cb2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9cb4:	2202      	movs	r2, #2
    9cb6:	2101      	movs	r1, #1
    9cb8:	68f8      	ldr	r0, [r7, #12]
    9cba:	4b41      	ldr	r3, [pc, #260]	; (9dc0 <_oscctrl_init_referenced_generators+0x1f8>)
    9cbc:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    9cbe:	68f8      	ldr	r0, [r7, #12]
    9cc0:	4b41      	ldr	r3, [pc, #260]	; (9dc8 <_oscctrl_init_referenced_generators+0x200>)
    9cc2:	4798      	blx	r3
    9cc4:	4603      	mov	r3, r0
    9cc6:	2b00      	cmp	r3, #0
    9cc8:	d00c      	beq.n	9ce4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    9cca:	f44f 6310 	mov.w	r3, #2304	; 0x900
    9cce:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    9cd0:	bf00      	nop
    9cd2:	6879      	ldr	r1, [r7, #4]
    9cd4:	68f8      	ldr	r0, [r7, #12]
    9cd6:	4b3d      	ldr	r3, [pc, #244]	; (9dcc <_oscctrl_init_referenced_generators+0x204>)
    9cd8:	4798      	blx	r3
    9cda:	4602      	mov	r2, r0
    9cdc:	687b      	ldr	r3, [r7, #4]
    9cde:	429a      	cmp	r2, r3
    9ce0:	d1f7      	bne.n	9cd2 <_oscctrl_init_referenced_generators+0x10a>
    9ce2:	e009      	b.n	9cf8 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    9ce4:	bf00      	nop
    9ce6:	68f8      	ldr	r0, [r7, #12]
    9ce8:	4b39      	ldr	r3, [pc, #228]	; (9dd0 <_oscctrl_init_referenced_generators+0x208>)
    9cea:	4798      	blx	r3
    9cec:	4603      	mov	r3, r0
    9cee:	f083 0301 	eor.w	r3, r3, #1
    9cf2:	b2db      	uxtb	r3, r3
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d1f6      	bne.n	9ce6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    9cf8:	bf00      	nop
    9cfa:	2100      	movs	r1, #0
    9cfc:	68f8      	ldr	r0, [r7, #12]
    9cfe:	4b35      	ldr	r3, [pc, #212]	; (9dd4 <_oscctrl_init_referenced_generators+0x20c>)
    9d00:	4798      	blx	r3
    9d02:	4603      	mov	r3, r0
    9d04:	f083 0301 	eor.w	r3, r3, #1
    9d08:	b2db      	uxtb	r3, r3
    9d0a:	2b00      	cmp	r3, #0
    9d0c:	d009      	beq.n	9d22 <_oscctrl_init_referenced_generators+0x15a>
    9d0e:	2100      	movs	r1, #0
    9d10:	68f8      	ldr	r0, [r7, #12]
    9d12:	4b31      	ldr	r3, [pc, #196]	; (9dd8 <_oscctrl_init_referenced_generators+0x210>)
    9d14:	4798      	blx	r3
    9d16:	4603      	mov	r3, r0
    9d18:	f083 0301 	eor.w	r3, r3, #1
    9d1c:	b2db      	uxtb	r3, r3
    9d1e:	2b00      	cmp	r3, #0
    9d20:	d1eb      	bne.n	9cfa <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    9d22:	bf00      	nop
    9d24:	2101      	movs	r1, #1
    9d26:	68f8      	ldr	r0, [r7, #12]
    9d28:	4b2a      	ldr	r3, [pc, #168]	; (9dd4 <_oscctrl_init_referenced_generators+0x20c>)
    9d2a:	4798      	blx	r3
    9d2c:	4603      	mov	r3, r0
    9d2e:	f083 0301 	eor.w	r3, r3, #1
    9d32:	b2db      	uxtb	r3, r3
    9d34:	2b00      	cmp	r3, #0
    9d36:	d009      	beq.n	9d4c <_oscctrl_init_referenced_generators+0x184>
    9d38:	2101      	movs	r1, #1
    9d3a:	68f8      	ldr	r0, [r7, #12]
    9d3c:	4b26      	ldr	r3, [pc, #152]	; (9dd8 <_oscctrl_init_referenced_generators+0x210>)
    9d3e:	4798      	blx	r3
    9d40:	4603      	mov	r3, r0
    9d42:	f083 0301 	eor.w	r3, r3, #1
    9d46:	b2db      	uxtb	r3, r3
    9d48:	2b00      	cmp	r3, #0
    9d4a:	d1eb      	bne.n	9d24 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    9d4c:	bf00      	nop
    9d4e:	480c      	ldr	r0, [pc, #48]	; (9d80 <_oscctrl_init_referenced_generators+0x1b8>)
    9d50:	4b22      	ldr	r3, [pc, #136]	; (9ddc <_oscctrl_init_referenced_generators+0x214>)
    9d52:	4798      	blx	r3
    9d54:	4603      	mov	r3, r0
    9d56:	2b00      	cmp	r3, #0
    9d58:	d1f9      	bne.n	9d4e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    9d5a:	2207      	movs	r2, #7
    9d5c:	2100      	movs	r1, #0
    9d5e:	4808      	ldr	r0, [pc, #32]	; (9d80 <_oscctrl_init_referenced_generators+0x1b8>)
    9d60:	4b08      	ldr	r3, [pc, #32]	; (9d84 <_oscctrl_init_referenced_generators+0x1bc>)
    9d62:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9d64:	bf00      	nop
    9d66:	4806      	ldr	r0, [pc, #24]	; (9d80 <_oscctrl_init_referenced_generators+0x1b8>)
    9d68:	4b07      	ldr	r3, [pc, #28]	; (9d88 <_oscctrl_init_referenced_generators+0x1c0>)
    9d6a:	4798      	blx	r3
    9d6c:	4603      	mov	r3, r0
    9d6e:	2b00      	cmp	r3, #0
    9d70:	d1f9      	bne.n	9d66 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    9d72:	bf00      	nop
    9d74:	3710      	adds	r7, #16
    9d76:	46bd      	mov	sp, r7
    9d78:	bd80      	pop	{r7, pc}
    9d7a:	bf00      	nop
    9d7c:	40001000 	.word	0x40001000
    9d80:	40001c00 	.word	0x40001c00
    9d84:	00009795 	.word	0x00009795
    9d88:	00009755 	.word	0x00009755
    9d8c:	000099f9 	.word	0x000099f9
    9d90:	0401bb80 	.word	0x0401bb80
    9d94:	00009a9b 	.word	0x00009a9b
    9d98:	00009b53 	.word	0x00009b53
    9d9c:	00009a47 	.word	0x00009a47
    9da0:	00009aeb 	.word	0x00009aeb
    9da4:	00009ab7 	.word	0x00009ab7
    9da8:	00009a83 	.word	0x00009a83
    9dac:	00009a67 	.word	0x00009a67
    9db0:	00009b1f 	.word	0x00009b1f
    9db4:	000097e5 	.word	0x000097e5
    9db8:	000098f1 	.word	0x000098f1
    9dbc:	0000992d 	.word	0x0000992d
    9dc0:	000098b5 	.word	0x000098b5
    9dc4:	000407a0 	.word	0x000407a0
    9dc8:	00009a17 	.word	0x00009a17
    9dcc:	000099ab 	.word	0x000099ab
    9dd0:	00009983 	.word	0x00009983
    9dd4:	00009841 	.word	0x00009841
    9dd8:	00009879 	.word	0x00009879
    9ddc:	0000977d 	.word	0x0000977d

00009de0 <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    9de0:	b480      	push	{r7}
    9de2:	b085      	sub	sp, #20
    9de4:	af00      	add	r7, sp, #0
    9de6:	6078      	str	r0, [r7, #4]
    9de8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    9dea:	687b      	ldr	r3, [r7, #4]
    9dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9dee:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9df0:	68fa      	ldr	r2, [r7, #12]
    9df2:	683b      	ldr	r3, [r7, #0]
    9df4:	4013      	ands	r3, r2
    9df6:	60fb      	str	r3, [r7, #12]
	return tmp;
    9df8:	68fb      	ldr	r3, [r7, #12]
}
    9dfa:	4618      	mov	r0, r3
    9dfc:	3714      	adds	r7, #20
    9dfe:	46bd      	mov	sp, r7
    9e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e04:	4770      	bx	lr

00009e06 <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    9e06:	b480      	push	{r7}
    9e08:	b085      	sub	sp, #20
    9e0a:	af00      	add	r7, sp, #0
    9e0c:	6078      	str	r0, [r7, #4]
    9e0e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    9e10:	687b      	ldr	r3, [r7, #4]
    9e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9e14:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9e16:	68fa      	ldr	r2, [r7, #12]
    9e18:	683b      	ldr	r3, [r7, #0]
    9e1a:	4013      	ands	r3, r2
    9e1c:	60fb      	str	r3, [r7, #12]
	return tmp;
    9e1e:	68fb      	ldr	r3, [r7, #12]
}
    9e20:	4618      	mov	r0, r3
    9e22:	3714      	adds	r7, #20
    9e24:	46bd      	mov	sp, r7
    9e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e2a:	4770      	bx	lr

00009e2c <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    9e2c:	b480      	push	{r7}
    9e2e:	b085      	sub	sp, #20
    9e30:	af00      	add	r7, sp, #0
    9e32:	6078      	str	r0, [r7, #4]
    9e34:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    9e36:	687b      	ldr	r3, [r7, #4]
    9e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9e3a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9e3c:	68fa      	ldr	r2, [r7, #12]
    9e3e:	683b      	ldr	r3, [r7, #0]
    9e40:	4013      	ands	r3, r2
    9e42:	60fb      	str	r3, [r7, #12]
	return tmp;
    9e44:	68fb      	ldr	r3, [r7, #12]
}
    9e46:	4618      	mov	r0, r3
    9e48:	3714      	adds	r7, #20
    9e4a:	46bd      	mov	sp, r7
    9e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e50:	4770      	bx	lr

00009e52 <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    9e52:	b480      	push	{r7}
    9e54:	b085      	sub	sp, #20
    9e56:	af00      	add	r7, sp, #0
    9e58:	6078      	str	r0, [r7, #4]
    9e5a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    9e5c:	687b      	ldr	r3, [r7, #4]
    9e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9e60:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9e62:	68fa      	ldr	r2, [r7, #12]
    9e64:	683b      	ldr	r3, [r7, #0]
    9e66:	4013      	ands	r3, r2
    9e68:	60fb      	str	r3, [r7, #12]
	return tmp;
    9e6a:	68fb      	ldr	r3, [r7, #12]
}
    9e6c:	4618      	mov	r0, r3
    9e6e:	3714      	adds	r7, #20
    9e70:	46bd      	mov	sp, r7
    9e72:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e76:	4770      	bx	lr

00009e78 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    9e78:	b480      	push	{r7}
    9e7a:	b083      	sub	sp, #12
    9e7c:	af00      	add	r7, sp, #0
    9e7e:	6078      	str	r0, [r7, #4]
    9e80:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    9e82:	687b      	ldr	r3, [r7, #4]
    9e84:	683a      	ldr	r2, [r7, #0]
    9e86:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    9e88:	bf00      	nop
    9e8a:	370c      	adds	r7, #12
    9e8c:	46bd      	mov	sp, r7
    9e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e92:	4770      	bx	lr

00009e94 <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    9e94:	b480      	push	{r7}
    9e96:	b085      	sub	sp, #20
    9e98:	af00      	add	r7, sp, #0
    9e9a:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    9e9c:	230a      	movs	r3, #10
    9e9e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    9ea0:	687b      	ldr	r3, [r7, #4]
    9ea2:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    9ea6:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    9eaa:	d101      	bne.n	9eb0 <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    9eac:	230d      	movs	r3, #13
    9eae:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    9eb0:	687b      	ldr	r3, [r7, #4]
    9eb2:	0e1b      	lsrs	r3, r3, #24
    9eb4:	f003 030f 	and.w	r3, r3, #15
    9eb8:	015a      	lsls	r2, r3, #5
    9eba:	6879      	ldr	r1, [r7, #4]
    9ebc:	4b06      	ldr	r3, [pc, #24]	; (9ed8 <_pac_get_peripheral_id+0x44>)
    9ebe:	400b      	ands	r3, r1
    9ec0:	68f9      	ldr	r1, [r7, #12]
    9ec2:	40cb      	lsrs	r3, r1
    9ec4:	4413      	add	r3, r2
    9ec6:	60fb      	str	r3, [r7, #12]

	return peripheral;
    9ec8:	68fb      	ldr	r3, [r7, #12]
}
    9eca:	4618      	mov	r0, r3
    9ecc:	3714      	adds	r7, #20
    9ece:	46bd      	mov	sp, r7
    9ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ed4:	4770      	bx	lr
    9ed6:	bf00      	nop
    9ed8:	000fff00 	.word	0x000fff00

00009edc <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    9edc:	b580      	push	{r7, lr}
    9ede:	b086      	sub	sp, #24
    9ee0:	af00      	add	r7, sp, #0
    9ee2:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9ee4:	687b      	ldr	r3, [r7, #4]
    9ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9eea:	bf8c      	ite	hi
    9eec:	2301      	movhi	r3, #1
    9eee:	2300      	movls	r3, #0
    9ef0:	b2db      	uxtb	r3, r3
    9ef2:	2239      	movs	r2, #57	; 0x39
    9ef4:	4917      	ldr	r1, [pc, #92]	; (9f54 <_periph_lock+0x78>)
    9ef6:	4618      	mov	r0, r3
    9ef8:	4b17      	ldr	r3, [pc, #92]	; (9f58 <_periph_lock+0x7c>)
    9efa:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    9efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9f00:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    9f02:	6878      	ldr	r0, [r7, #4]
    9f04:	4b15      	ldr	r3, [pc, #84]	; (9f5c <_periph_lock+0x80>)
    9f06:	4798      	blx	r3
    9f08:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    9f0a:	693b      	ldr	r3, [r7, #16]
    9f0c:	b29b      	uxth	r3, r3
    9f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9f12:	4619      	mov	r1, r3
    9f14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9f18:	4b11      	ldr	r3, [pc, #68]	; (9f60 <_periph_lock+0x84>)
    9f1a:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    9f1c:	f107 030f 	add.w	r3, r7, #15
    9f20:	4619      	mov	r1, r3
    9f22:	6878      	ldr	r0, [r7, #4]
    9f24:	4b0f      	ldr	r3, [pc, #60]	; (9f64 <_periph_lock+0x88>)
    9f26:	4798      	blx	r3
	} while (!stat && timeout--);
    9f28:	7bfb      	ldrb	r3, [r7, #15]
    9f2a:	f083 0301 	eor.w	r3, r3, #1
    9f2e:	b2db      	uxtb	r3, r3
    9f30:	2b00      	cmp	r3, #0
    9f32:	d004      	beq.n	9f3e <_periph_lock+0x62>
    9f34:	697b      	ldr	r3, [r7, #20]
    9f36:	1e5a      	subs	r2, r3, #1
    9f38:	617a      	str	r2, [r7, #20]
    9f3a:	2b00      	cmp	r3, #0
    9f3c:	d1ee      	bne.n	9f1c <_periph_lock+0x40>

	if (timeout < 0) {
    9f3e:	697b      	ldr	r3, [r7, #20]
    9f40:	2b00      	cmp	r3, #0
    9f42:	da02      	bge.n	9f4a <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    9f44:	f06f 0307 	mvn.w	r3, #7
    9f48:	e000      	b.n	9f4c <_periph_lock+0x70>
	}

	return ERR_NONE;
    9f4a:	2300      	movs	r3, #0
}
    9f4c:	4618      	mov	r0, r3
    9f4e:	3718      	adds	r7, #24
    9f50:	46bd      	mov	sp, r7
    9f52:	bd80      	pop	{r7, pc}
    9f54:	0001f728 	.word	0x0001f728
    9f58:	00007d91 	.word	0x00007d91
    9f5c:	00009e95 	.word	0x00009e95
    9f60:	00009e79 	.word	0x00009e79
    9f64:	00009ff1 	.word	0x00009ff1

00009f68 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    9f68:	b580      	push	{r7, lr}
    9f6a:	b086      	sub	sp, #24
    9f6c:	af00      	add	r7, sp, #0
    9f6e:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9f70:	687b      	ldr	r3, [r7, #4]
    9f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9f76:	bf8c      	ite	hi
    9f78:	2301      	movhi	r3, #1
    9f7a:	2300      	movls	r3, #0
    9f7c:	b2db      	uxtb	r3, r3
    9f7e:	2253      	movs	r2, #83	; 0x53
    9f80:	4916      	ldr	r1, [pc, #88]	; (9fdc <_periph_unlock+0x74>)
    9f82:	4618      	mov	r0, r3
    9f84:	4b16      	ldr	r3, [pc, #88]	; (9fe0 <_periph_unlock+0x78>)
    9f86:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    9f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9f8c:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    9f8e:	6878      	ldr	r0, [r7, #4]
    9f90:	4b14      	ldr	r3, [pc, #80]	; (9fe4 <_periph_unlock+0x7c>)
    9f92:	4798      	blx	r3
    9f94:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    9f96:	693b      	ldr	r3, [r7, #16]
    9f98:	b29b      	uxth	r3, r3
    9f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9f9e:	4619      	mov	r1, r3
    9fa0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9fa4:	4b10      	ldr	r3, [pc, #64]	; (9fe8 <_periph_unlock+0x80>)
    9fa6:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    9fa8:	f107 030f 	add.w	r3, r7, #15
    9fac:	4619      	mov	r1, r3
    9fae:	6878      	ldr	r0, [r7, #4]
    9fb0:	4b0e      	ldr	r3, [pc, #56]	; (9fec <_periph_unlock+0x84>)
    9fb2:	4798      	blx	r3
	} while (stat && timeout--);
    9fb4:	7bfb      	ldrb	r3, [r7, #15]
    9fb6:	2b00      	cmp	r3, #0
    9fb8:	d004      	beq.n	9fc4 <_periph_unlock+0x5c>
    9fba:	697b      	ldr	r3, [r7, #20]
    9fbc:	1e5a      	subs	r2, r3, #1
    9fbe:	617a      	str	r2, [r7, #20]
    9fc0:	2b00      	cmp	r3, #0
    9fc2:	d1f1      	bne.n	9fa8 <_periph_unlock+0x40>

	if (timeout < 0) {
    9fc4:	697b      	ldr	r3, [r7, #20]
    9fc6:	2b00      	cmp	r3, #0
    9fc8:	da02      	bge.n	9fd0 <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    9fca:	f06f 0307 	mvn.w	r3, #7
    9fce:	e000      	b.n	9fd2 <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    9fd0:	2300      	movs	r3, #0
}
    9fd2:	4618      	mov	r0, r3
    9fd4:	3718      	adds	r7, #24
    9fd6:	46bd      	mov	sp, r7
    9fd8:	bd80      	pop	{r7, pc}
    9fda:	bf00      	nop
    9fdc:	0001f728 	.word	0x0001f728
    9fe0:	00007d91 	.word	0x00007d91
    9fe4:	00009e95 	.word	0x00009e95
    9fe8:	00009e79 	.word	0x00009e79
    9fec:	00009ff1 	.word	0x00009ff1

00009ff0 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    9ff0:	b580      	push	{r7, lr}
    9ff2:	b084      	sub	sp, #16
    9ff4:	af00      	add	r7, sp, #0
    9ff6:	6078      	str	r0, [r7, #4]
    9ff8:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9ffa:	687b      	ldr	r3, [r7, #4]
    9ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a000:	bf8c      	ite	hi
    a002:	2301      	movhi	r3, #1
    a004:	2300      	movls	r3, #0
    a006:	b2db      	uxtb	r3, r3
    a008:	226d      	movs	r2, #109	; 0x6d
    a00a:	4931      	ldr	r1, [pc, #196]	; (a0d0 <_periph_get_lock_state+0xe0>)
    a00c:	4618      	mov	r0, r3
    a00e:	4b31      	ldr	r3, [pc, #196]	; (a0d4 <_periph_get_lock_state+0xe4>)
    a010:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    a012:	6878      	ldr	r0, [r7, #4]
    a014:	4b30      	ldr	r3, [pc, #192]	; (a0d8 <_periph_get_lock_state+0xe8>)
    a016:	4798      	blx	r3
    a018:	4603      	mov	r3, r0
    a01a:	f003 031f 	and.w	r3, r3, #31
    a01e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    a020:	687b      	ldr	r3, [r7, #4]
    a022:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    a026:	d211      	bcs.n	a04c <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    a028:	2201      	movs	r2, #1
    a02a:	68fb      	ldr	r3, [r7, #12]
    a02c:	fa02 f303 	lsl.w	r3, r2, r3
    a030:	4619      	mov	r1, r3
    a032:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a036:	4b29      	ldr	r3, [pc, #164]	; (a0dc <_periph_get_lock_state+0xec>)
    a038:	4798      	blx	r3
    a03a:	4603      	mov	r3, r0
    a03c:	2b00      	cmp	r3, #0
    a03e:	bf14      	ite	ne
    a040:	2301      	movne	r3, #1
    a042:	2300      	moveq	r3, #0
    a044:	b2da      	uxtb	r2, r3
    a046:	683b      	ldr	r3, [r7, #0]
    a048:	701a      	strb	r2, [r3, #0]
    a04a:	e03c      	b.n	a0c6 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    a04c:	687b      	ldr	r3, [r7, #4]
    a04e:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    a052:	d211      	bcs.n	a078 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    a054:	2201      	movs	r2, #1
    a056:	68fb      	ldr	r3, [r7, #12]
    a058:	fa02 f303 	lsl.w	r3, r2, r3
    a05c:	4619      	mov	r1, r3
    a05e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a062:	4b1f      	ldr	r3, [pc, #124]	; (a0e0 <_periph_get_lock_state+0xf0>)
    a064:	4798      	blx	r3
    a066:	4603      	mov	r3, r0
    a068:	2b00      	cmp	r3, #0
    a06a:	bf14      	ite	ne
    a06c:	2301      	movne	r3, #1
    a06e:	2300      	moveq	r3, #0
    a070:	b2da      	uxtb	r2, r3
    a072:	683b      	ldr	r3, [r7, #0]
    a074:	701a      	strb	r2, [r3, #0]
    a076:	e026      	b.n	a0c6 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    a078:	687b      	ldr	r3, [r7, #4]
    a07a:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    a07e:	d211      	bcs.n	a0a4 <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    a080:	2201      	movs	r2, #1
    a082:	68fb      	ldr	r3, [r7, #12]
    a084:	fa02 f303 	lsl.w	r3, r2, r3
    a088:	4619      	mov	r1, r3
    a08a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a08e:	4b15      	ldr	r3, [pc, #84]	; (a0e4 <_periph_get_lock_state+0xf4>)
    a090:	4798      	blx	r3
    a092:	4603      	mov	r3, r0
    a094:	2b00      	cmp	r3, #0
    a096:	bf14      	ite	ne
    a098:	2301      	movne	r3, #1
    a09a:	2300      	moveq	r3, #0
    a09c:	b2da      	uxtb	r2, r3
    a09e:	683b      	ldr	r3, [r7, #0]
    a0a0:	701a      	strb	r2, [r3, #0]
    a0a2:	e010      	b.n	a0c6 <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    a0a4:	2201      	movs	r2, #1
    a0a6:	68fb      	ldr	r3, [r7, #12]
    a0a8:	fa02 f303 	lsl.w	r3, r2, r3
    a0ac:	4619      	mov	r1, r3
    a0ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a0b2:	4b0d      	ldr	r3, [pc, #52]	; (a0e8 <_periph_get_lock_state+0xf8>)
    a0b4:	4798      	blx	r3
    a0b6:	4603      	mov	r3, r0
    a0b8:	2b00      	cmp	r3, #0
    a0ba:	bf14      	ite	ne
    a0bc:	2301      	movne	r3, #1
    a0be:	2300      	moveq	r3, #0
    a0c0:	b2da      	uxtb	r2, r3
    a0c2:	683b      	ldr	r3, [r7, #0]
    a0c4:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    a0c6:	2300      	movs	r3, #0
}
    a0c8:	4618      	mov	r0, r3
    a0ca:	3710      	adds	r7, #16
    a0cc:	46bd      	mov	sp, r7
    a0ce:	bd80      	pop	{r7, pc}
    a0d0:	0001f728 	.word	0x0001f728
    a0d4:	00007d91 	.word	0x00007d91
    a0d8:	00009e95 	.word	0x00009e95
    a0dc:	00009de1 	.word	0x00009de1
    a0e0:	00009e07 	.word	0x00009e07
    a0e4:	00009e2d 	.word	0x00009e2d
    a0e8:	00009e53 	.word	0x00009e53

0000a0ec <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    a0ec:	b480      	push	{r7}
    a0ee:	b083      	sub	sp, #12
    a0f0:	af00      	add	r7, sp, #0
    a0f2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    a0f4:	687b      	ldr	r3, [r7, #4]
    a0f6:	69db      	ldr	r3, [r3, #28]
    a0f8:	0a9b      	lsrs	r3, r3, #10
    a0fa:	f003 0301 	and.w	r3, r3, #1
    a0fe:	2b00      	cmp	r3, #0
    a100:	bf14      	ite	ne
    a102:	2301      	movne	r3, #1
    a104:	2300      	moveq	r3, #0
    a106:	b2db      	uxtb	r3, r3
}
    a108:	4618      	mov	r0, r3
    a10a:	370c      	adds	r7, #12
    a10c:	46bd      	mov	sp, r7
    a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a112:	4770      	bx	lr

0000a114 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    a114:	b480      	push	{r7}
    a116:	b083      	sub	sp, #12
    a118:	af00      	add	r7, sp, #0
    a11a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    a11c:	687b      	ldr	r3, [r7, #4]
    a11e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a122:	61da      	str	r2, [r3, #28]
}
    a124:	bf00      	nop
    a126:	370c      	adds	r7, #12
    a128:	46bd      	mov	sp, r7
    a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a12e:	4770      	bx	lr

0000a130 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    a130:	b480      	push	{r7}
    a132:	b083      	sub	sp, #12
    a134:	af00      	add	r7, sp, #0
    a136:	6078      	str	r0, [r7, #4]
    a138:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    a13a:	687b      	ldr	r3, [r7, #4]
    a13c:	683a      	ldr	r2, [r7, #0]
    a13e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a140:	bf00      	nop
    a142:	370c      	adds	r7, #12
    a144:	46bd      	mov	sp, r7
    a146:	f85d 7b04 	ldr.w	r7, [sp], #4
    a14a:	4770      	bx	lr

0000a14c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    a14c:	b480      	push	{r7}
    a14e:	b083      	sub	sp, #12
    a150:	af00      	add	r7, sp, #0
    a152:	6078      	str	r0, [r7, #4]
    a154:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	683a      	ldr	r2, [r7, #0]
    a15a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a15c:	bf00      	nop
    a15e:	370c      	adds	r7, #12
    a160:	46bd      	mov	sp, r7
    a162:	f85d 7b04 	ldr.w	r7, [sp], #4
    a166:	4770      	bx	lr

0000a168 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    a168:	b480      	push	{r7}
    a16a:	b083      	sub	sp, #12
    a16c:	af00      	add	r7, sp, #0
    a16e:	6078      	str	r0, [r7, #4]
    a170:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    a172:	687b      	ldr	r3, [r7, #4]
    a174:	683a      	ldr	r2, [r7, #0]
    a176:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a178:	bf00      	nop
    a17a:	370c      	adds	r7, #12
    a17c:	46bd      	mov	sp, r7
    a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a182:	4770      	bx	lr

0000a184 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    a184:	b480      	push	{r7}
    a186:	b083      	sub	sp, #12
    a188:	af00      	add	r7, sp, #0
    a18a:	6078      	str	r0, [r7, #4]
    a18c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    a18e:	687b      	ldr	r3, [r7, #4]
    a190:	683a      	ldr	r2, [r7, #0]
    a192:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a194:	bf00      	nop
    a196:	370c      	adds	r7, #12
    a198:	46bd      	mov	sp, r7
    a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a19e:	4770      	bx	lr

0000a1a0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    a1a0:	b480      	push	{r7}
    a1a2:	b085      	sub	sp, #20
    a1a4:	af00      	add	r7, sp, #0
    a1a6:	6078      	str	r0, [r7, #4]
    a1a8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    a1aa:	687b      	ldr	r3, [r7, #4]
    a1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a1ae:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    a1b0:	68fb      	ldr	r3, [r7, #12]
    a1b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a1b6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    a1b8:	683b      	ldr	r3, [r7, #0]
    a1ba:	b2db      	uxtb	r3, r3
    a1bc:	68fa      	ldr	r2, [r7, #12]
    a1be:	4313      	orrs	r3, r2
    a1c0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    a1c2:	687b      	ldr	r3, [r7, #4]
    a1c4:	68fa      	ldr	r2, [r7, #12]
    a1c6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a1c8:	bf00      	nop
    a1ca:	3714      	adds	r7, #20
    a1cc:	46bd      	mov	sp, r7
    a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1d2:	4770      	bx	lr

0000a1d4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    a1d4:	b480      	push	{r7}
    a1d6:	b085      	sub	sp, #20
    a1d8:	af00      	add	r7, sp, #0
    a1da:	6078      	str	r0, [r7, #4]
    a1dc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    a1de:	687b      	ldr	r3, [r7, #4]
    a1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a1e2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    a1e4:	68fb      	ldr	r3, [r7, #12]
    a1e6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    a1ea:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    a1ec:	683b      	ldr	r3, [r7, #0]
    a1ee:	041b      	lsls	r3, r3, #16
    a1f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a1f4:	68fa      	ldr	r2, [r7, #12]
    a1f6:	4313      	orrs	r3, r2
    a1f8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    a1fa:	687b      	ldr	r3, [r7, #4]
    a1fc:	68fa      	ldr	r2, [r7, #12]
    a1fe:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a200:	bf00      	nop
    a202:	3714      	adds	r7, #20
    a204:	46bd      	mov	sp, r7
    a206:	f85d 7b04 	ldr.w	r7, [sp], #4
    a20a:	4770      	bx	lr

0000a20c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    a20c:	b480      	push	{r7}
    a20e:	b083      	sub	sp, #12
    a210:	af00      	add	r7, sp, #0
    a212:	6078      	str	r0, [r7, #4]
    a214:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    a216:	687b      	ldr	r3, [r7, #4]
    a218:	683a      	ldr	r2, [r7, #0]
    a21a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a21c:	bf00      	nop
    a21e:	370c      	adds	r7, #12
    a220:	46bd      	mov	sp, r7
    a222:	f85d 7b04 	ldr.w	r7, [sp], #4
    a226:	4770      	bx	lr

0000a228 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    a228:	b480      	push	{r7}
    a22a:	b083      	sub	sp, #12
    a22c:	af00      	add	r7, sp, #0
    a22e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    a230:	687b      	ldr	r3, [r7, #4]
    a232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    a234:	4618      	mov	r0, r3
    a236:	370c      	adds	r7, #12
    a238:	46bd      	mov	sp, r7
    a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a23e:	4770      	bx	lr

0000a240 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    a240:	b480      	push	{r7}
    a242:	b085      	sub	sp, #20
    a244:	af00      	add	r7, sp, #0
    a246:	60f8      	str	r0, [r7, #12]
    a248:	60b9      	str	r1, [r7, #8]
    a24a:	607a      	str	r2, [r7, #4]
	while (count--) {
    a24c:	e007      	b.n	a25e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    a24e:	68fb      	ldr	r3, [r7, #12]
    a250:	1c5a      	adds	r2, r3, #1
    a252:	60fa      	str	r2, [r7, #12]
    a254:	68ba      	ldr	r2, [r7, #8]
    a256:	1c51      	adds	r1, r2, #1
    a258:	60b9      	str	r1, [r7, #8]
    a25a:	7812      	ldrb	r2, [r2, #0]
    a25c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    a25e:	687b      	ldr	r3, [r7, #4]
    a260:	1e5a      	subs	r2, r3, #1
    a262:	607a      	str	r2, [r7, #4]
    a264:	2b00      	cmp	r3, #0
    a266:	d1f2      	bne.n	a24e <_qspi_memcpy+0xe>
	}
}
    a268:	bf00      	nop
    a26a:	3714      	adds	r7, #20
    a26c:	46bd      	mov	sp, r7
    a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a272:	4770      	bx	lr

0000a274 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    a274:	b580      	push	{r7, lr}
    a276:	b082      	sub	sp, #8
    a278:	af00      	add	r7, sp, #0
    a27a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    a27c:	4903      	ldr	r1, [pc, #12]	; (a28c <_qspi_end_transfer+0x18>)
    a27e:	6878      	ldr	r0, [r7, #4]
    a280:	4b03      	ldr	r3, [pc, #12]	; (a290 <_qspi_end_transfer+0x1c>)
    a282:	4798      	blx	r3
}
    a284:	bf00      	nop
    a286:	3708      	adds	r7, #8
    a288:	46bd      	mov	sp, r7
    a28a:	bd80      	pop	{r7, pc}
    a28c:	01000002 	.word	0x01000002
    a290:	0000a131 	.word	0x0000a131

0000a294 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    a294:	b580      	push	{r7, lr}
    a296:	b082      	sub	sp, #8
    a298:	af00      	add	r7, sp, #0
    a29a:	6078      	str	r0, [r7, #4]
    a29c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    a29e:	687b      	ldr	r3, [r7, #4]
    a2a0:	2b00      	cmp	r3, #0
    a2a2:	d004      	beq.n	a2ae <_qspi_sync_init+0x1a>
    a2a4:	683b      	ldr	r3, [r7, #0]
    a2a6:	2b00      	cmp	r3, #0
    a2a8:	d001      	beq.n	a2ae <_qspi_sync_init+0x1a>
    a2aa:	2301      	movs	r3, #1
    a2ac:	e000      	b.n	a2b0 <_qspi_sync_init+0x1c>
    a2ae:	2300      	movs	r3, #0
    a2b0:	f003 0301 	and.w	r3, r3, #1
    a2b4:	b2db      	uxtb	r3, r3
    a2b6:	2240      	movs	r2, #64	; 0x40
    a2b8:	490c      	ldr	r1, [pc, #48]	; (a2ec <_qspi_sync_init+0x58>)
    a2ba:	4618      	mov	r0, r3
    a2bc:	4b0c      	ldr	r3, [pc, #48]	; (a2f0 <_qspi_sync_init+0x5c>)
    a2be:	4798      	blx	r3
	dev->prvt = hw;
    a2c0:	687b      	ldr	r3, [r7, #4]
    a2c2:	683a      	ldr	r2, [r7, #0]
    a2c4:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    a2c6:	687b      	ldr	r3, [r7, #4]
    a2c8:	681b      	ldr	r3, [r3, #0]
    a2ca:	2101      	movs	r1, #1
    a2cc:	4618      	mov	r0, r3
    a2ce:	4b09      	ldr	r3, [pc, #36]	; (a2f4 <_qspi_sync_init+0x60>)
    a2d0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    a2d2:	4909      	ldr	r1, [pc, #36]	; (a2f8 <_qspi_sync_init+0x64>)
    a2d4:	6838      	ldr	r0, [r7, #0]
    a2d6:	4b09      	ldr	r3, [pc, #36]	; (a2fc <_qspi_sync_init+0x68>)
    a2d8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    a2da:	4909      	ldr	r1, [pc, #36]	; (a300 <_qspi_sync_init+0x6c>)
    a2dc:	6838      	ldr	r0, [r7, #0]
    a2de:	4b09      	ldr	r3, [pc, #36]	; (a304 <_qspi_sync_init+0x70>)
    a2e0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    a2e2:	2300      	movs	r3, #0
}
    a2e4:	4618      	mov	r0, r3
    a2e6:	3708      	adds	r7, #8
    a2e8:	46bd      	mov	sp, r7
    a2ea:	bd80      	pop	{r7, pc}
    a2ec:	0001f740 	.word	0x0001f740
    a2f0:	00007d91 	.word	0x00007d91
    a2f4:	0000a131 	.word	0x0000a131
    a2f8:	06000011 	.word	0x06000011
    a2fc:	0000a14d 	.word	0x0000a14d
    a300:	00241300 	.word	0x00241300
    a304:	0000a169 	.word	0x0000a169

0000a308 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    a308:	b580      	push	{r7, lr}
    a30a:	b082      	sub	sp, #8
    a30c:	af00      	add	r7, sp, #0
    a30e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    a310:	687b      	ldr	r3, [r7, #4]
    a312:	681b      	ldr	r3, [r3, #0]
    a314:	2102      	movs	r1, #2
    a316:	4618      	mov	r0, r3
    a318:	4b03      	ldr	r3, [pc, #12]	; (a328 <_qspi_sync_enable+0x20>)
    a31a:	4798      	blx	r3
	return ERR_NONE;
    a31c:	2300      	movs	r3, #0
}
    a31e:	4618      	mov	r0, r3
    a320:	3708      	adds	r7, #8
    a322:	46bd      	mov	sp, r7
    a324:	bd80      	pop	{r7, pc}
    a326:	bf00      	nop
    a328:	0000a131 	.word	0x0000a131

0000a32c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    a32c:	b580      	push	{r7, lr}
    a32e:	b082      	sub	sp, #8
    a330:	af00      	add	r7, sp, #0
    a332:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    a334:	687b      	ldr	r3, [r7, #4]
    a336:	681b      	ldr	r3, [r3, #0]
    a338:	2100      	movs	r1, #0
    a33a:	4618      	mov	r0, r3
    a33c:	4b03      	ldr	r3, [pc, #12]	; (a34c <_qspi_sync_disable+0x20>)
    a33e:	4798      	blx	r3
	return ERR_NONE;
    a340:	2300      	movs	r3, #0
}
    a342:	4618      	mov	r0, r3
    a344:	3708      	adds	r7, #8
    a346:	46bd      	mov	sp, r7
    a348:	bd80      	pop	{r7, pc}
    a34a:	bf00      	nop
    a34c:	0000a131 	.word	0x0000a131

0000a350 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a350:	b580      	push	{r7, lr}
    a352:	b084      	sub	sp, #16
    a354:	af00      	add	r7, sp, #0
    a356:	6078      	str	r0, [r7, #4]
    a358:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    a35a:	687b      	ldr	r3, [r7, #4]
    a35c:	681b      	ldr	r3, [r3, #0]
    a35e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    a360:	683b      	ldr	r3, [r7, #0]
    a362:	781b      	ldrb	r3, [r3, #0]
    a364:	f003 0320 	and.w	r3, r3, #32
    a368:	b2db      	uxtb	r3, r3
    a36a:	2b00      	cmp	r3, #0
    a36c:	d005      	beq.n	a37a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    a36e:	683b      	ldr	r3, [r7, #0]
    a370:	689b      	ldr	r3, [r3, #8]
    a372:	4619      	mov	r1, r3
    a374:	68f8      	ldr	r0, [r7, #12]
    a376:	4b13      	ldr	r3, [pc, #76]	; (a3c4 <_qspi_sync_command_set_ifr+0x74>)
    a378:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    a37a:	683b      	ldr	r3, [r7, #0]
    a37c:	781b      	ldrb	r3, [r3, #0]
    a37e:	f003 0310 	and.w	r3, r3, #16
    a382:	b2db      	uxtb	r3, r3
    a384:	2b00      	cmp	r3, #0
    a386:	d005      	beq.n	a394 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    a388:	683b      	ldr	r3, [r7, #0]
    a38a:	791b      	ldrb	r3, [r3, #4]
    a38c:	4619      	mov	r1, r3
    a38e:	68f8      	ldr	r0, [r7, #12]
    a390:	4b0d      	ldr	r3, [pc, #52]	; (a3c8 <_qspi_sync_command_set_ifr+0x78>)
    a392:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    a394:	683b      	ldr	r3, [r7, #0]
    a396:	781b      	ldrb	r3, [r3, #0]
    a398:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a39c:	b2db      	uxtb	r3, r3
    a39e:	2b00      	cmp	r3, #0
    a3a0:	d005      	beq.n	a3ae <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    a3a2:	683b      	ldr	r3, [r7, #0]
    a3a4:	795b      	ldrb	r3, [r3, #5]
    a3a6:	4619      	mov	r1, r3
    a3a8:	68f8      	ldr	r0, [r7, #12]
    a3aa:	4b08      	ldr	r3, [pc, #32]	; (a3cc <_qspi_sync_command_set_ifr+0x7c>)
    a3ac:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    a3ae:	683b      	ldr	r3, [r7, #0]
    a3b0:	681b      	ldr	r3, [r3, #0]
    a3b2:	4619      	mov	r1, r3
    a3b4:	68f8      	ldr	r0, [r7, #12]
    a3b6:	4b06      	ldr	r3, [pc, #24]	; (a3d0 <_qspi_sync_command_set_ifr+0x80>)
    a3b8:	4798      	blx	r3
}
    a3ba:	bf00      	nop
    a3bc:	3710      	adds	r7, #16
    a3be:	46bd      	mov	sp, r7
    a3c0:	bd80      	pop	{r7, pc}
    a3c2:	bf00      	nop
    a3c4:	0000a185 	.word	0x0000a185
    a3c8:	0000a1a1 	.word	0x0000a1a1
    a3cc:	0000a1d5 	.word	0x0000a1d5
    a3d0:	0000a20d 	.word	0x0000a20d

0000a3d4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a3d4:	b580      	push	{r7, lr}
    a3d6:	b084      	sub	sp, #16
    a3d8:	af00      	add	r7, sp, #0
    a3da:	6078      	str	r0, [r7, #4]
    a3dc:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    a3de:	687b      	ldr	r3, [r7, #4]
    a3e0:	681b      	ldr	r3, [r3, #0]
    a3e2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    a3e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a3e8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    a3ea:	683b      	ldr	r3, [r7, #0]
    a3ec:	781b      	ldrb	r3, [r3, #0]
    a3ee:	f003 0320 	and.w	r3, r3, #32
    a3f2:	b2db      	uxtb	r3, r3
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d004      	beq.n	a402 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    a3f8:	683b      	ldr	r3, [r7, #0]
    a3fa:	689b      	ldr	r3, [r3, #8]
    a3fc:	68fa      	ldr	r2, [r7, #12]
    a3fe:	4413      	add	r3, r2
    a400:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    a402:	68b8      	ldr	r0, [r7, #8]
    a404:	4b18      	ldr	r3, [pc, #96]	; (a468 <_qspi_sync_run_transfer+0x94>)
    a406:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    a408:	683b      	ldr	r3, [r7, #0]
    a40a:	691b      	ldr	r3, [r3, #16]
    a40c:	2b00      	cmp	r3, #0
    a40e:	d103      	bne.n	a418 <_qspi_sync_run_transfer+0x44>
    a410:	683b      	ldr	r3, [r7, #0]
    a412:	695b      	ldr	r3, [r3, #20]
    a414:	2b00      	cmp	r3, #0
    a416:	d001      	beq.n	a41c <_qspi_sync_run_transfer+0x48>
    a418:	2301      	movs	r3, #1
    a41a:	e000      	b.n	a41e <_qspi_sync_run_transfer+0x4a>
    a41c:	2300      	movs	r3, #0
    a41e:	f003 0301 	and.w	r3, r3, #1
    a422:	b2db      	uxtb	r3, r3
    a424:	2282      	movs	r2, #130	; 0x82
    a426:	4911      	ldr	r1, [pc, #68]	; (a46c <_qspi_sync_run_transfer+0x98>)
    a428:	4618      	mov	r0, r3
    a42a:	4b11      	ldr	r3, [pc, #68]	; (a470 <_qspi_sync_run_transfer+0x9c>)
    a42c:	4798      	blx	r3

	if (cmd->tx_buf) {
    a42e:	683b      	ldr	r3, [r7, #0]
    a430:	691b      	ldr	r3, [r3, #16]
    a432:	2b00      	cmp	r3, #0
    a434:	d008      	beq.n	a448 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    a436:	683b      	ldr	r3, [r7, #0]
    a438:	6919      	ldr	r1, [r3, #16]
    a43a:	683b      	ldr	r3, [r7, #0]
    a43c:	68db      	ldr	r3, [r3, #12]
    a43e:	461a      	mov	r2, r3
    a440:	68f8      	ldr	r0, [r7, #12]
    a442:	4b0c      	ldr	r3, [pc, #48]	; (a474 <_qspi_sync_run_transfer+0xa0>)
    a444:	4798      	blx	r3
    a446:	e007      	b.n	a458 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    a448:	683b      	ldr	r3, [r7, #0]
    a44a:	6958      	ldr	r0, [r3, #20]
    a44c:	683b      	ldr	r3, [r7, #0]
    a44e:	68db      	ldr	r3, [r3, #12]
    a450:	461a      	mov	r2, r3
    a452:	68f9      	ldr	r1, [r7, #12]
    a454:	4b07      	ldr	r3, [pc, #28]	; (a474 <_qspi_sync_run_transfer+0xa0>)
    a456:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    a458:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a45c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    a460:	bf00      	nop
    a462:	3710      	adds	r7, #16
    a464:	46bd      	mov	sp, r7
    a466:	bd80      	pop	{r7, pc}
    a468:	0000a229 	.word	0x0000a229
    a46c:	0001f740 	.word	0x0001f740
    a470:	00007d91 	.word	0x00007d91
    a474:	0000a241 	.word	0x0000a241

0000a478 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a478:	b580      	push	{r7, lr}
    a47a:	b082      	sub	sp, #8
    a47c:	af00      	add	r7, sp, #0
    a47e:	6078      	str	r0, [r7, #4]
    a480:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    a482:	6839      	ldr	r1, [r7, #0]
    a484:	6878      	ldr	r0, [r7, #4]
    a486:	4b14      	ldr	r3, [pc, #80]	; (a4d8 <_qspi_sync_serial_run_command+0x60>)
    a488:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    a48a:	683b      	ldr	r3, [r7, #0]
    a48c:	781b      	ldrb	r3, [r3, #0]
    a48e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a492:	b2db      	uxtb	r3, r3
    a494:	2b00      	cmp	r3, #0
    a496:	d003      	beq.n	a4a0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    a498:	6839      	ldr	r1, [r7, #0]
    a49a:	6878      	ldr	r0, [r7, #4]
    a49c:	4b0f      	ldr	r3, [pc, #60]	; (a4dc <_qspi_sync_serial_run_command+0x64>)
    a49e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    a4a0:	687b      	ldr	r3, [r7, #4]
    a4a2:	681b      	ldr	r3, [r3, #0]
    a4a4:	4618      	mov	r0, r3
    a4a6:	4b0e      	ldr	r3, [pc, #56]	; (a4e0 <_qspi_sync_serial_run_command+0x68>)
    a4a8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    a4aa:	bf00      	nop
    a4ac:	687b      	ldr	r3, [r7, #4]
    a4ae:	681b      	ldr	r3, [r3, #0]
    a4b0:	4618      	mov	r0, r3
    a4b2:	4b0c      	ldr	r3, [pc, #48]	; (a4e4 <_qspi_sync_serial_run_command+0x6c>)
    a4b4:	4798      	blx	r3
    a4b6:	4603      	mov	r3, r0
    a4b8:	f083 0301 	eor.w	r3, r3, #1
    a4bc:	b2db      	uxtb	r3, r3
    a4be:	2b00      	cmp	r3, #0
    a4c0:	d1f4      	bne.n	a4ac <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    a4c2:	687b      	ldr	r3, [r7, #4]
    a4c4:	681b      	ldr	r3, [r3, #0]
    a4c6:	4618      	mov	r0, r3
    a4c8:	4b07      	ldr	r3, [pc, #28]	; (a4e8 <_qspi_sync_serial_run_command+0x70>)
    a4ca:	4798      	blx	r3
	return ERR_NONE;
    a4cc:	2300      	movs	r3, #0
}
    a4ce:	4618      	mov	r0, r3
    a4d0:	3708      	adds	r7, #8
    a4d2:	46bd      	mov	sp, r7
    a4d4:	bd80      	pop	{r7, pc}
    a4d6:	bf00      	nop
    a4d8:	0000a351 	.word	0x0000a351
    a4dc:	0000a3d5 	.word	0x0000a3d5
    a4e0:	0000a275 	.word	0x0000a275
    a4e4:	0000a0ed 	.word	0x0000a0ed
    a4e8:	0000a115 	.word	0x0000a115

0000a4ec <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    a4ec:	b480      	push	{r7}
    a4ee:	b083      	sub	sp, #12
    a4f0:	af00      	add	r7, sp, #0
    a4f2:	6078      	str	r0, [r7, #4]
    a4f4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    a4f6:	bf00      	nop
    a4f8:	687b      	ldr	r3, [r7, #4]
    a4fa:	691a      	ldr	r2, [r3, #16]
    a4fc:	683b      	ldr	r3, [r7, #0]
    a4fe:	4013      	ands	r3, r2
    a500:	2b00      	cmp	r3, #0
    a502:	d1f9      	bne.n	a4f8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    a504:	bf00      	nop
    a506:	370c      	adds	r7, #12
    a508:	46bd      	mov	sp, r7
    a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a50e:	4770      	bx	lr

0000a510 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    a510:	b480      	push	{r7}
    a512:	b083      	sub	sp, #12
    a514:	af00      	add	r7, sp, #0
    a516:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    a518:	687b      	ldr	r3, [r7, #4]
    a51a:	f44f 7280 	mov.w	r2, #256	; 0x100
    a51e:	819a      	strh	r2, [r3, #12]
}
    a520:	bf00      	nop
    a522:	370c      	adds	r7, #12
    a524:	46bd      	mov	sp, r7
    a526:	f85d 7b04 	ldr.w	r7, [sp], #4
    a52a:	4770      	bx	lr

0000a52c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    a52c:	b480      	push	{r7}
    a52e:	b083      	sub	sp, #12
    a530:	af00      	add	r7, sp, #0
    a532:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    a534:	687b      	ldr	r3, [r7, #4]
    a536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a53a:	819a      	strh	r2, [r3, #12]
}
    a53c:	bf00      	nop
    a53e:	370c      	adds	r7, #12
    a540:	46bd      	mov	sp, r7
    a542:	f85d 7b04 	ldr.w	r7, [sp], #4
    a546:	4770      	bx	lr

0000a548 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    a548:	b480      	push	{r7}
    a54a:	b083      	sub	sp, #12
    a54c:	af00      	add	r7, sp, #0
    a54e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    a550:	687b      	ldr	r3, [r7, #4]
    a552:	899b      	ldrh	r3, [r3, #12]
    a554:	b29b      	uxth	r3, r3
}
    a556:	4618      	mov	r0, r3
    a558:	370c      	adds	r7, #12
    a55a:	46bd      	mov	sp, r7
    a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a560:	4770      	bx	lr

0000a562 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    a562:	b480      	push	{r7}
    a564:	b083      	sub	sp, #12
    a566:	af00      	add	r7, sp, #0
    a568:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    a56a:	687b      	ldr	r3, [r7, #4]
    a56c:	895b      	ldrh	r3, [r3, #10]
    a56e:	b29b      	uxth	r3, r3
}
    a570:	4618      	mov	r0, r3
    a572:	370c      	adds	r7, #12
    a574:	46bd      	mov	sp, r7
    a576:	f85d 7b04 	ldr.w	r7, [sp], #4
    a57a:	4770      	bx	lr

0000a57c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    a57c:	b580      	push	{r7, lr}
    a57e:	b082      	sub	sp, #8
    a580:	af00      	add	r7, sp, #0
    a582:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    a584:	687b      	ldr	r3, [r7, #4]
    a586:	881b      	ldrh	r3, [r3, #0]
    a588:	b29b      	uxth	r3, r3
    a58a:	f043 0301 	orr.w	r3, r3, #1
    a58e:	b29a      	uxth	r2, r3
    a590:	687b      	ldr	r3, [r7, #4]
    a592:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    a594:	2101      	movs	r1, #1
    a596:	6878      	ldr	r0, [r7, #4]
    a598:	4b02      	ldr	r3, [pc, #8]	; (a5a4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    a59a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a59c:	bf00      	nop
    a59e:	3708      	adds	r7, #8
    a5a0:	46bd      	mov	sp, r7
    a5a2:	bd80      	pop	{r7, pc}
    a5a4:	0000a4ed 	.word	0x0000a4ed

0000a5a8 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a5a8:	b580      	push	{r7, lr}
    a5aa:	b082      	sub	sp, #8
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    a5b0:	687b      	ldr	r3, [r7, #4]
    a5b2:	881b      	ldrh	r3, [r3, #0]
    a5b4:	b29b      	uxth	r3, r3
    a5b6:	f043 0302 	orr.w	r3, r3, #2
    a5ba:	b29a      	uxth	r2, r3
    a5bc:	687b      	ldr	r3, [r7, #4]
    a5be:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a5c0:	f248 0103 	movw	r1, #32771	; 0x8003
    a5c4:	6878      	ldr	r0, [r7, #4]
    a5c6:	4b03      	ldr	r3, [pc, #12]	; (a5d4 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    a5c8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a5ca:	bf00      	nop
    a5cc:	3708      	adds	r7, #8
    a5ce:	46bd      	mov	sp, r7
    a5d0:	bd80      	pop	{r7, pc}
    a5d2:	bf00      	nop
    a5d4:	0000a4ed 	.word	0x0000a4ed

0000a5d8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a5d8:	b580      	push	{r7, lr}
    a5da:	b084      	sub	sp, #16
    a5dc:	af00      	add	r7, sp, #0
    a5de:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a5e0:	f248 0103 	movw	r1, #32771	; 0x8003
    a5e4:	6878      	ldr	r0, [r7, #4]
    a5e6:	4b0a      	ldr	r3, [pc, #40]	; (a610 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    a5e8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    a5ea:	687b      	ldr	r3, [r7, #4]
    a5ec:	881b      	ldrh	r3, [r3, #0]
    a5ee:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    a5f0:	89fb      	ldrh	r3, [r7, #14]
    a5f2:	085b      	lsrs	r3, r3, #1
    a5f4:	b29b      	uxth	r3, r3
    a5f6:	f003 0301 	and.w	r3, r3, #1
    a5fa:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    a5fc:	89fb      	ldrh	r3, [r7, #14]
    a5fe:	2b00      	cmp	r3, #0
    a600:	bf14      	ite	ne
    a602:	2301      	movne	r3, #1
    a604:	2300      	moveq	r3, #0
    a606:	b2db      	uxtb	r3, r3
}
    a608:	4618      	mov	r0, r3
    a60a:	3710      	adds	r7, #16
    a60c:	46bd      	mov	sp, r7
    a60e:	bd80      	pop	{r7, pc}
    a610:	0000a4ed 	.word	0x0000a4ed

0000a614 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a614:	b580      	push	{r7, lr}
    a616:	b082      	sub	sp, #8
    a618:	af00      	add	r7, sp, #0
    a61a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    a61c:	687b      	ldr	r3, [r7, #4]
    a61e:	881b      	ldrh	r3, [r3, #0]
    a620:	b29b      	uxth	r3, r3
    a622:	f023 0302 	bic.w	r3, r3, #2
    a626:	b29a      	uxth	r2, r3
    a628:	687b      	ldr	r3, [r7, #4]
    a62a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a62c:	f248 0103 	movw	r1, #32771	; 0x8003
    a630:	6878      	ldr	r0, [r7, #4]
    a632:	4b03      	ldr	r3, [pc, #12]	; (a640 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    a634:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a636:	bf00      	nop
    a638:	3708      	adds	r7, #8
    a63a:	46bd      	mov	sp, r7
    a63c:	bd80      	pop	{r7, pc}
    a63e:	bf00      	nop
    a640:	0000a4ed 	.word	0x0000a4ed

0000a644 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    a644:	b580      	push	{r7, lr}
    a646:	b082      	sub	sp, #8
    a648:	af00      	add	r7, sp, #0
    a64a:	6078      	str	r0, [r7, #4]
    a64c:	460b      	mov	r3, r1
    a64e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    a650:	687b      	ldr	r3, [r7, #4]
    a652:	887a      	ldrh	r2, [r7, #2]
    a654:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a656:	f248 0103 	movw	r1, #32771	; 0x8003
    a65a:	6878      	ldr	r0, [r7, #4]
    a65c:	4b02      	ldr	r3, [pc, #8]	; (a668 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    a65e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a660:	bf00      	nop
    a662:	3708      	adds	r7, #8
    a664:	46bd      	mov	sp, r7
    a666:	bd80      	pop	{r7, pc}
    a668:	0000a4ed 	.word	0x0000a4ed

0000a66c <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    a66c:	b580      	push	{r7, lr}
    a66e:	b082      	sub	sp, #8
    a670:	af00      	add	r7, sp, #0
    a672:	6078      	str	r0, [r7, #4]
    a674:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    a676:	687b      	ldr	r3, [r7, #4]
    a678:	683a      	ldr	r2, [r7, #0]
    a67a:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    a67c:	2108      	movs	r1, #8
    a67e:	6878      	ldr	r0, [r7, #4]
    a680:	4b02      	ldr	r3, [pc, #8]	; (a68c <hri_rtcmode0_write_COUNT_reg+0x20>)
    a682:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a684:	bf00      	nop
    a686:	3708      	adds	r7, #8
    a688:	46bd      	mov	sp, r7
    a68a:	bd80      	pop	{r7, pc}
    a68c:	0000a4ed 	.word	0x0000a4ed

0000a690 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    a690:	b580      	push	{r7, lr}
    a692:	b082      	sub	sp, #8
    a694:	af00      	add	r7, sp, #0
    a696:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    a698:	2108      	movs	r1, #8
    a69a:	6878      	ldr	r0, [r7, #4]
    a69c:	4b03      	ldr	r3, [pc, #12]	; (a6ac <hri_rtcmode0_read_COUNT_reg+0x1c>)
    a69e:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    a6a0:	687b      	ldr	r3, [r7, #4]
    a6a2:	699b      	ldr	r3, [r3, #24]
}
    a6a4:	4618      	mov	r0, r3
    a6a6:	3708      	adds	r7, #8
    a6a8:	46bd      	mov	sp, r7
    a6aa:	bd80      	pop	{r7, pc}
    a6ac:	0000a4ed 	.word	0x0000a4ed

0000a6b0 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    a6b0:	b480      	push	{r7}
    a6b2:	b083      	sub	sp, #12
    a6b4:	af00      	add	r7, sp, #0
    a6b6:	6078      	str	r0, [r7, #4]
    a6b8:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    a6ba:	687b      	ldr	r3, [r7, #4]
    a6bc:	683a      	ldr	r2, [r7, #0]
    a6be:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    a6c0:	bf00      	nop
    a6c2:	370c      	adds	r7, #12
    a6c4:	46bd      	mov	sp, r7
    a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6ca:	4770      	bx	lr

0000a6cc <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    a6cc:	b580      	push	{r7, lr}
    a6ce:	b082      	sub	sp, #8
    a6d0:	af00      	add	r7, sp, #0
    a6d2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a6d4:	687b      	ldr	r3, [r7, #4]
    a6d6:	2b00      	cmp	r3, #0
    a6d8:	d005      	beq.n	a6e6 <_calendar_init+0x1a>
    a6da:	687b      	ldr	r3, [r7, #4]
    a6dc:	681b      	ldr	r3, [r3, #0]
    a6de:	2b00      	cmp	r3, #0
    a6e0:	d001      	beq.n	a6e6 <_calendar_init+0x1a>
    a6e2:	2301      	movs	r3, #1
    a6e4:	e000      	b.n	a6e8 <_calendar_init+0x1c>
    a6e6:	2300      	movs	r3, #0
    a6e8:	f003 0301 	and.w	r3, r3, #1
    a6ec:	b2db      	uxtb	r3, r3
    a6ee:	222f      	movs	r2, #47	; 0x2f
    a6f0:	491b      	ldr	r1, [pc, #108]	; (a760 <_calendar_init+0x94>)
    a6f2:	4618      	mov	r0, r3
    a6f4:	4b1b      	ldr	r3, [pc, #108]	; (a764 <_calendar_init+0x98>)
    a6f6:	4798      	blx	r3

	_rtc_dev = dev;
    a6f8:	4a1b      	ldr	r2, [pc, #108]	; (a768 <_calendar_init+0x9c>)
    a6fa:	687b      	ldr	r3, [r7, #4]
    a6fc:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    a6fe:	687b      	ldr	r3, [r7, #4]
    a700:	681b      	ldr	r3, [r3, #0]
    a702:	4618      	mov	r0, r3
    a704:	4b19      	ldr	r3, [pc, #100]	; (a76c <_calendar_init+0xa0>)
    a706:	4798      	blx	r3
    a708:	4603      	mov	r3, r0
    a70a:	2b00      	cmp	r3, #0
    a70c:	d00a      	beq.n	a724 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    a70e:	687b      	ldr	r3, [r7, #4]
    a710:	681b      	ldr	r3, [r3, #0]
    a712:	4618      	mov	r0, r3
    a714:	4b16      	ldr	r3, [pc, #88]	; (a770 <_calendar_init+0xa4>)
    a716:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    a718:	687b      	ldr	r3, [r7, #4]
    a71a:	681b      	ldr	r3, [r3, #0]
    a71c:	2102      	movs	r1, #2
    a71e:	4618      	mov	r0, r3
    a720:	4b14      	ldr	r3, [pc, #80]	; (a774 <_calendar_init+0xa8>)
    a722:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    a724:	687b      	ldr	r3, [r7, #4]
    a726:	681b      	ldr	r3, [r3, #0]
    a728:	4618      	mov	r0, r3
    a72a:	4b13      	ldr	r3, [pc, #76]	; (a778 <_calendar_init+0xac>)
    a72c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    a72e:	687b      	ldr	r3, [r7, #4]
    a730:	681b      	ldr	r3, [r3, #0]
    a732:	2101      	movs	r1, #1
    a734:	4618      	mov	r0, r3
    a736:	4b0f      	ldr	r3, [pc, #60]	; (a774 <_calendar_init+0xa8>)
    a738:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    a73a:	687b      	ldr	r3, [r7, #4]
    a73c:	681b      	ldr	r3, [r3, #0]
    a73e:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    a742:	4618      	mov	r0, r3
    a744:	4b0d      	ldr	r3, [pc, #52]	; (a77c <_calendar_init+0xb0>)
    a746:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    a748:	687b      	ldr	r3, [r7, #4]
    a74a:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    a74c:	2100      	movs	r1, #0
    a74e:	4618      	mov	r0, r3
    a750:	4b0b      	ldr	r3, [pc, #44]	; (a780 <_calendar_init+0xb4>)
    a752:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    a754:	2300      	movs	r3, #0
}
    a756:	4618      	mov	r0, r3
    a758:	3708      	adds	r7, #8
    a75a:	46bd      	mov	sp, r7
    a75c:	bd80      	pop	{r7, pc}
    a75e:	bf00      	nop
    a760:	0001f758 	.word	0x0001f758
    a764:	00007d91 	.word	0x00007d91
    a768:	2000874c 	.word	0x2000874c
    a76c:	0000a5d9 	.word	0x0000a5d9
    a770:	0000a615 	.word	0x0000a615
    a774:	0000a4ed 	.word	0x0000a4ed
    a778:	0000a57d 	.word	0x0000a57d
    a77c:	0000a645 	.word	0x0000a645
    a780:	0000a6b1 	.word	0x0000a6b1

0000a784 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    a784:	b580      	push	{r7, lr}
    a786:	b082      	sub	sp, #8
    a788:	af00      	add	r7, sp, #0
    a78a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a78c:	687b      	ldr	r3, [r7, #4]
    a78e:	2b00      	cmp	r3, #0
    a790:	d005      	beq.n	a79e <_calendar_enable+0x1a>
    a792:	687b      	ldr	r3, [r7, #4]
    a794:	681b      	ldr	r3, [r3, #0]
    a796:	2b00      	cmp	r3, #0
    a798:	d001      	beq.n	a79e <_calendar_enable+0x1a>
    a79a:	2301      	movs	r3, #1
    a79c:	e000      	b.n	a7a0 <_calendar_enable+0x1c>
    a79e:	2300      	movs	r3, #0
    a7a0:	f003 0301 	and.w	r3, r3, #1
    a7a4:	b2db      	uxtb	r3, r3
    a7a6:	2275      	movs	r2, #117	; 0x75
    a7a8:	4906      	ldr	r1, [pc, #24]	; (a7c4 <_calendar_enable+0x40>)
    a7aa:	4618      	mov	r0, r3
    a7ac:	4b06      	ldr	r3, [pc, #24]	; (a7c8 <_calendar_enable+0x44>)
    a7ae:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    a7b0:	687b      	ldr	r3, [r7, #4]
    a7b2:	681b      	ldr	r3, [r3, #0]
    a7b4:	4618      	mov	r0, r3
    a7b6:	4b05      	ldr	r3, [pc, #20]	; (a7cc <_calendar_enable+0x48>)
    a7b8:	4798      	blx	r3

	return ERR_NONE;
    a7ba:	2300      	movs	r3, #0
}
    a7bc:	4618      	mov	r0, r3
    a7be:	3708      	adds	r7, #8
    a7c0:	46bd      	mov	sp, r7
    a7c2:	bd80      	pop	{r7, pc}
    a7c4:	0001f758 	.word	0x0001f758
    a7c8:	00007d91 	.word	0x00007d91
    a7cc:	0000a5a9 	.word	0x0000a5a9

0000a7d0 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    a7d0:	b580      	push	{r7, lr}
    a7d2:	b082      	sub	sp, #8
    a7d4:	af00      	add	r7, sp, #0
    a7d6:	6078      	str	r0, [r7, #4]
    a7d8:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    a7da:	687b      	ldr	r3, [r7, #4]
    a7dc:	2b00      	cmp	r3, #0
    a7de:	d005      	beq.n	a7ec <_calendar_set_counter+0x1c>
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	681b      	ldr	r3, [r3, #0]
    a7e4:	2b00      	cmp	r3, #0
    a7e6:	d001      	beq.n	a7ec <_calendar_set_counter+0x1c>
    a7e8:	2301      	movs	r3, #1
    a7ea:	e000      	b.n	a7ee <_calendar_set_counter+0x1e>
    a7ec:	2300      	movs	r3, #0
    a7ee:	f003 0301 	and.w	r3, r3, #1
    a7f2:	b2db      	uxtb	r3, r3
    a7f4:	228d      	movs	r2, #141	; 0x8d
    a7f6:	4907      	ldr	r1, [pc, #28]	; (a814 <_calendar_set_counter+0x44>)
    a7f8:	4618      	mov	r0, r3
    a7fa:	4b07      	ldr	r3, [pc, #28]	; (a818 <_calendar_set_counter+0x48>)
    a7fc:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    a7fe:	687b      	ldr	r3, [r7, #4]
    a800:	681b      	ldr	r3, [r3, #0]
    a802:	6839      	ldr	r1, [r7, #0]
    a804:	4618      	mov	r0, r3
    a806:	4b05      	ldr	r3, [pc, #20]	; (a81c <_calendar_set_counter+0x4c>)
    a808:	4798      	blx	r3

	return ERR_NONE;
    a80a:	2300      	movs	r3, #0
}
    a80c:	4618      	mov	r0, r3
    a80e:	3708      	adds	r7, #8
    a810:	46bd      	mov	sp, r7
    a812:	bd80      	pop	{r7, pc}
    a814:	0001f758 	.word	0x0001f758
    a818:	00007d91 	.word	0x00007d91
    a81c:	0000a66d 	.word	0x0000a66d

0000a820 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    a820:	b580      	push	{r7, lr}
    a822:	b082      	sub	sp, #8
    a824:	af00      	add	r7, sp, #0
    a826:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a828:	687b      	ldr	r3, [r7, #4]
    a82a:	2b00      	cmp	r3, #0
    a82c:	d005      	beq.n	a83a <_calendar_get_counter+0x1a>
    a82e:	687b      	ldr	r3, [r7, #4]
    a830:	681b      	ldr	r3, [r3, #0]
    a832:	2b00      	cmp	r3, #0
    a834:	d001      	beq.n	a83a <_calendar_get_counter+0x1a>
    a836:	2301      	movs	r3, #1
    a838:	e000      	b.n	a83c <_calendar_get_counter+0x1c>
    a83a:	2300      	movs	r3, #0
    a83c:	f003 0301 	and.w	r3, r3, #1
    a840:	b2db      	uxtb	r3, r3
    a842:	2299      	movs	r2, #153	; 0x99
    a844:	4906      	ldr	r1, [pc, #24]	; (a860 <_calendar_get_counter+0x40>)
    a846:	4618      	mov	r0, r3
    a848:	4b06      	ldr	r3, [pc, #24]	; (a864 <_calendar_get_counter+0x44>)
    a84a:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    a84c:	687b      	ldr	r3, [r7, #4]
    a84e:	681b      	ldr	r3, [r3, #0]
    a850:	4618      	mov	r0, r3
    a852:	4b05      	ldr	r3, [pc, #20]	; (a868 <_calendar_get_counter+0x48>)
    a854:	4798      	blx	r3
    a856:	4603      	mov	r3, r0
}
    a858:	4618      	mov	r0, r3
    a85a:	3708      	adds	r7, #8
    a85c:	46bd      	mov	sp, r7
    a85e:	bd80      	pop	{r7, pc}
    a860:	0001f758 	.word	0x0001f758
    a864:	00007d91 	.word	0x00007d91
    a868:	0000a691 	.word	0x0000a691

0000a86c <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    a86c:	b580      	push	{r7, lr}
    a86e:	b084      	sub	sp, #16
    a870:	af00      	add	r7, sp, #0
    a872:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    a874:	687b      	ldr	r3, [r7, #4]
    a876:	681b      	ldr	r3, [r3, #0]
    a878:	4618      	mov	r0, r3
    a87a:	4b19      	ldr	r3, [pc, #100]	; (a8e0 <_rtc_interrupt_handler+0x74>)
    a87c:	4798      	blx	r3
    a87e:	4603      	mov	r3, r0
    a880:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    a882:	687b      	ldr	r3, [r7, #4]
    a884:	681b      	ldr	r3, [r3, #0]
    a886:	4618      	mov	r0, r3
    a888:	4b16      	ldr	r3, [pc, #88]	; (a8e4 <_rtc_interrupt_handler+0x78>)
    a88a:	4798      	blx	r3
    a88c:	4603      	mov	r3, r0
    a88e:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    a890:	89fa      	ldrh	r2, [r7, #14]
    a892:	89bb      	ldrh	r3, [r7, #12]
    a894:	4013      	ands	r3, r2
    a896:	b29b      	uxth	r3, r3
    a898:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a89c:	2b00      	cmp	r3, #0
    a89e:	d009      	beq.n	a8b4 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    a8a0:	687b      	ldr	r3, [r7, #4]
    a8a2:	685b      	ldr	r3, [r3, #4]
    a8a4:	6878      	ldr	r0, [r7, #4]
    a8a6:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    a8a8:	687b      	ldr	r3, [r7, #4]
    a8aa:	681b      	ldr	r3, [r3, #0]
    a8ac:	4618      	mov	r0, r3
    a8ae:	4b0e      	ldr	r3, [pc, #56]	; (a8e8 <_rtc_interrupt_handler+0x7c>)
    a8b0:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    a8b2:	e010      	b.n	a8d6 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    a8b4:	89fa      	ldrh	r2, [r7, #14]
    a8b6:	89bb      	ldrh	r3, [r7, #12]
    a8b8:	4013      	ands	r3, r2
    a8ba:	b29b      	uxth	r3, r3
    a8bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	d008      	beq.n	a8d6 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	689b      	ldr	r3, [r3, #8]
    a8c8:	6878      	ldr	r0, [r7, #4]
    a8ca:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    a8cc:	687b      	ldr	r3, [r7, #4]
    a8ce:	681b      	ldr	r3, [r3, #0]
    a8d0:	4618      	mov	r0, r3
    a8d2:	4b06      	ldr	r3, [pc, #24]	; (a8ec <_rtc_interrupt_handler+0x80>)
    a8d4:	4798      	blx	r3
}
    a8d6:	bf00      	nop
    a8d8:	3710      	adds	r7, #16
    a8da:	46bd      	mov	sp, r7
    a8dc:	bd80      	pop	{r7, pc}
    a8de:	bf00      	nop
    a8e0:	0000a549 	.word	0x0000a549
    a8e4:	0000a563 	.word	0x0000a563
    a8e8:	0000a511 	.word	0x0000a511
    a8ec:	0000a52d 	.word	0x0000a52d

0000a8f0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    a8f0:	b580      	push	{r7, lr}
    a8f2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    a8f4:	4b03      	ldr	r3, [pc, #12]	; (a904 <RTC_Handler+0x14>)
    a8f6:	681b      	ldr	r3, [r3, #0]
    a8f8:	4618      	mov	r0, r3
    a8fa:	4b03      	ldr	r3, [pc, #12]	; (a908 <RTC_Handler+0x18>)
    a8fc:	4798      	blx	r3
}
    a8fe:	bf00      	nop
    a900:	bd80      	pop	{r7, pc}
    a902:	bf00      	nop
    a904:	2000874c 	.word	0x2000874c
    a908:	0000a86d 	.word	0x0000a86d

0000a90c <__NVIC_EnableIRQ>:
{
    a90c:	b480      	push	{r7}
    a90e:	b083      	sub	sp, #12
    a910:	af00      	add	r7, sp, #0
    a912:	4603      	mov	r3, r0
    a914:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a91a:	2b00      	cmp	r3, #0
    a91c:	db0b      	blt.n	a936 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a91e:	4909      	ldr	r1, [pc, #36]	; (a944 <__NVIC_EnableIRQ+0x38>)
    a920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a924:	095b      	lsrs	r3, r3, #5
    a926:	88fa      	ldrh	r2, [r7, #6]
    a928:	f002 021f 	and.w	r2, r2, #31
    a92c:	2001      	movs	r0, #1
    a92e:	fa00 f202 	lsl.w	r2, r0, r2
    a932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a936:	bf00      	nop
    a938:	370c      	adds	r7, #12
    a93a:	46bd      	mov	sp, r7
    a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a940:	4770      	bx	lr
    a942:	bf00      	nop
    a944:	e000e100 	.word	0xe000e100

0000a948 <__NVIC_DisableIRQ>:
{
    a948:	b480      	push	{r7}
    a94a:	b083      	sub	sp, #12
    a94c:	af00      	add	r7, sp, #0
    a94e:	4603      	mov	r3, r0
    a950:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a956:	2b00      	cmp	r3, #0
    a958:	db10      	blt.n	a97c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a95a:	490b      	ldr	r1, [pc, #44]	; (a988 <__NVIC_DisableIRQ+0x40>)
    a95c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a960:	095b      	lsrs	r3, r3, #5
    a962:	88fa      	ldrh	r2, [r7, #6]
    a964:	f002 021f 	and.w	r2, r2, #31
    a968:	2001      	movs	r0, #1
    a96a:	fa00 f202 	lsl.w	r2, r0, r2
    a96e:	3320      	adds	r3, #32
    a970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    a974:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a978:	f3bf 8f6f 	isb	sy
}
    a97c:	bf00      	nop
    a97e:	370c      	adds	r7, #12
    a980:	46bd      	mov	sp, r7
    a982:	f85d 7b04 	ldr.w	r7, [sp], #4
    a986:	4770      	bx	lr
    a988:	e000e100 	.word	0xe000e100

0000a98c <__NVIC_ClearPendingIRQ>:
{
    a98c:	b480      	push	{r7}
    a98e:	b083      	sub	sp, #12
    a990:	af00      	add	r7, sp, #0
    a992:	4603      	mov	r3, r0
    a994:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a99a:	2b00      	cmp	r3, #0
    a99c:	db0c      	blt.n	a9b8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a99e:	4909      	ldr	r1, [pc, #36]	; (a9c4 <__NVIC_ClearPendingIRQ+0x38>)
    a9a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a9a4:	095b      	lsrs	r3, r3, #5
    a9a6:	88fa      	ldrh	r2, [r7, #6]
    a9a8:	f002 021f 	and.w	r2, r2, #31
    a9ac:	2001      	movs	r0, #1
    a9ae:	fa00 f202 	lsl.w	r2, r0, r2
    a9b2:	3360      	adds	r3, #96	; 0x60
    a9b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a9b8:	bf00      	nop
    a9ba:	370c      	adds	r7, #12
    a9bc:	46bd      	mov	sp, r7
    a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9c2:	4770      	bx	lr
    a9c4:	e000e100 	.word	0xe000e100

0000a9c8 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    a9c8:	b480      	push	{r7}
    a9ca:	b083      	sub	sp, #12
    a9cc:	af00      	add	r7, sp, #0
    a9ce:	6078      	str	r0, [r7, #4]
    a9d0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a9d2:	bf00      	nop
    a9d4:	687b      	ldr	r3, [r7, #4]
    a9d6:	69da      	ldr	r2, [r3, #28]
    a9d8:	683b      	ldr	r3, [r7, #0]
    a9da:	4013      	ands	r3, r2
    a9dc:	2b00      	cmp	r3, #0
    a9de:	d1f9      	bne.n	a9d4 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    a9e0:	bf00      	nop
    a9e2:	370c      	adds	r7, #12
    a9e4:	46bd      	mov	sp, r7
    a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9ea:	4770      	bx	lr

0000a9ec <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    a9ec:	b480      	push	{r7}
    a9ee:	b083      	sub	sp, #12
    a9f0:	af00      	add	r7, sp, #0
    a9f2:	6078      	str	r0, [r7, #4]
    a9f4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    a9f6:	687b      	ldr	r3, [r7, #4]
    a9f8:	69da      	ldr	r2, [r3, #28]
    a9fa:	683b      	ldr	r3, [r7, #0]
    a9fc:	4013      	ands	r3, r2
    a9fe:	2b00      	cmp	r3, #0
    aa00:	bf14      	ite	ne
    aa02:	2301      	movne	r3, #1
    aa04:	2300      	moveq	r3, #0
    aa06:	b2db      	uxtb	r3, r3
}
    aa08:	4618      	mov	r0, r3
    aa0a:	370c      	adds	r7, #12
    aa0c:	46bd      	mov	sp, r7
    aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa12:	4770      	bx	lr

0000aa14 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    aa14:	b480      	push	{r7}
    aa16:	b083      	sub	sp, #12
    aa18:	af00      	add	r7, sp, #0
    aa1a:	6078      	str	r0, [r7, #4]
    aa1c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    aa1e:	bf00      	nop
    aa20:	687b      	ldr	r3, [r7, #4]
    aa22:	69da      	ldr	r2, [r3, #28]
    aa24:	683b      	ldr	r3, [r7, #0]
    aa26:	4013      	ands	r3, r2
    aa28:	2b00      	cmp	r3, #0
    aa2a:	d1f9      	bne.n	aa20 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    aa2c:	bf00      	nop
    aa2e:	370c      	adds	r7, #12
    aa30:	46bd      	mov	sp, r7
    aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa36:	4770      	bx	lr

0000aa38 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    aa38:	b480      	push	{r7}
    aa3a:	b083      	sub	sp, #12
    aa3c:	af00      	add	r7, sp, #0
    aa3e:	6078      	str	r0, [r7, #4]
    aa40:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    aa42:	687b      	ldr	r3, [r7, #4]
    aa44:	69da      	ldr	r2, [r3, #28]
    aa46:	683b      	ldr	r3, [r7, #0]
    aa48:	4013      	ands	r3, r2
    aa4a:	2b00      	cmp	r3, #0
    aa4c:	bf14      	ite	ne
    aa4e:	2301      	movne	r3, #1
    aa50:	2300      	moveq	r3, #0
    aa52:	b2db      	uxtb	r3, r3
}
    aa54:	4618      	mov	r0, r3
    aa56:	370c      	adds	r7, #12
    aa58:	46bd      	mov	sp, r7
    aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa5e:	4770      	bx	lr

0000aa60 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    aa60:	b480      	push	{r7}
    aa62:	b083      	sub	sp, #12
    aa64:	af00      	add	r7, sp, #0
    aa66:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    aa68:	687b      	ldr	r3, [r7, #4]
    aa6a:	2201      	movs	r2, #1
    aa6c:	761a      	strb	r2, [r3, #24]
}
    aa6e:	bf00      	nop
    aa70:	370c      	adds	r7, #12
    aa72:	46bd      	mov	sp, r7
    aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa78:	4770      	bx	lr

0000aa7a <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    aa7a:	b480      	push	{r7}
    aa7c:	b083      	sub	sp, #12
    aa7e:	af00      	add	r7, sp, #0
    aa80:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    aa82:	687b      	ldr	r3, [r7, #4]
    aa84:	2202      	movs	r2, #2
    aa86:	761a      	strb	r2, [r3, #24]
}
    aa88:	bf00      	nop
    aa8a:	370c      	adds	r7, #12
    aa8c:	46bd      	mov	sp, r7
    aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa92:	4770      	bx	lr

0000aa94 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    aa94:	b480      	push	{r7}
    aa96:	b083      	sub	sp, #12
    aa98:	af00      	add	r7, sp, #0
    aa9a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    aa9c:	687b      	ldr	r3, [r7, #4]
    aa9e:	7e1b      	ldrb	r3, [r3, #24]
    aaa0:	b2db      	uxtb	r3, r3
}
    aaa2:	4618      	mov	r0, r3
    aaa4:	370c      	adds	r7, #12
    aaa6:	46bd      	mov	sp, r7
    aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaac:	4770      	bx	lr

0000aaae <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    aaae:	b480      	push	{r7}
    aab0:	b083      	sub	sp, #12
    aab2:	af00      	add	r7, sp, #0
    aab4:	6078      	str	r0, [r7, #4]
    aab6:	460b      	mov	r3, r1
    aab8:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    aaba:	687b      	ldr	r3, [r7, #4]
    aabc:	78fa      	ldrb	r2, [r7, #3]
    aabe:	761a      	strb	r2, [r3, #24]
}
    aac0:	bf00      	nop
    aac2:	370c      	adds	r7, #12
    aac4:	46bd      	mov	sp, r7
    aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaca:	4770      	bx	lr

0000aacc <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    aacc:	b480      	push	{r7}
    aace:	b085      	sub	sp, #20
    aad0:	af00      	add	r7, sp, #0
    aad2:	6078      	str	r0, [r7, #4]
    aad4:	460b      	mov	r3, r1
    aad6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    aad8:	687b      	ldr	r3, [r7, #4]
    aada:	7e1b      	ldrb	r3, [r3, #24]
    aadc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    aade:	7bfa      	ldrb	r2, [r7, #15]
    aae0:	78fb      	ldrb	r3, [r7, #3]
    aae2:	4013      	ands	r3, r2
    aae4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    aae6:	7bfb      	ldrb	r3, [r7, #15]
}
    aae8:	4618      	mov	r0, r3
    aaea:	3714      	adds	r7, #20
    aaec:	46bd      	mov	sp, r7
    aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaf2:	4770      	bx	lr

0000aaf4 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    aaf4:	b480      	push	{r7}
    aaf6:	b083      	sub	sp, #12
    aaf8:	af00      	add	r7, sp, #0
    aafa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    aafc:	687b      	ldr	r3, [r7, #4]
    aafe:	7e1b      	ldrb	r3, [r3, #24]
    ab00:	b2db      	uxtb	r3, r3
}
    ab02:	4618      	mov	r0, r3
    ab04:	370c      	adds	r7, #12
    ab06:	46bd      	mov	sp, r7
    ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab0c:	4770      	bx	lr

0000ab0e <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    ab0e:	b480      	push	{r7}
    ab10:	b083      	sub	sp, #12
    ab12:	af00      	add	r7, sp, #0
    ab14:	6078      	str	r0, [r7, #4]
    ab16:	460b      	mov	r3, r1
    ab18:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    ab1a:	687b      	ldr	r3, [r7, #4]
    ab1c:	78fa      	ldrb	r2, [r7, #3]
    ab1e:	761a      	strb	r2, [r3, #24]
}
    ab20:	bf00      	nop
    ab22:	370c      	adds	r7, #12
    ab24:	46bd      	mov	sp, r7
    ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab2a:	4770      	bx	lr

0000ab2c <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    ab2c:	b480      	push	{r7}
    ab2e:	b083      	sub	sp, #12
    ab30:	af00      	add	r7, sp, #0
    ab32:	6078      	str	r0, [r7, #4]
    ab34:	460b      	mov	r3, r1
    ab36:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    ab38:	78fb      	ldrb	r3, [r7, #3]
    ab3a:	f083 0301 	eor.w	r3, r3, #1
    ab3e:	b2db      	uxtb	r3, r3
    ab40:	2b00      	cmp	r3, #0
    ab42:	d003      	beq.n	ab4c <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    ab44:	687b      	ldr	r3, [r7, #4]
    ab46:	2201      	movs	r2, #1
    ab48:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    ab4a:	e002      	b.n	ab52 <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    ab4c:	687b      	ldr	r3, [r7, #4]
    ab4e:	2201      	movs	r2, #1
    ab50:	759a      	strb	r2, [r3, #22]
}
    ab52:	bf00      	nop
    ab54:	370c      	adds	r7, #12
    ab56:	46bd      	mov	sp, r7
    ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab5c:	4770      	bx	lr

0000ab5e <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    ab5e:	b480      	push	{r7}
    ab60:	b083      	sub	sp, #12
    ab62:	af00      	add	r7, sp, #0
    ab64:	6078      	str	r0, [r7, #4]
    ab66:	460b      	mov	r3, r1
    ab68:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    ab6a:	78fb      	ldrb	r3, [r7, #3]
    ab6c:	f083 0301 	eor.w	r3, r3, #1
    ab70:	b2db      	uxtb	r3, r3
    ab72:	2b00      	cmp	r3, #0
    ab74:	d003      	beq.n	ab7e <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    ab76:	687b      	ldr	r3, [r7, #4]
    ab78:	2202      	movs	r2, #2
    ab7a:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    ab7c:	e002      	b.n	ab84 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    ab7e:	687b      	ldr	r3, [r7, #4]
    ab80:	2202      	movs	r2, #2
    ab82:	759a      	strb	r2, [r3, #22]
}
    ab84:	bf00      	nop
    ab86:	370c      	adds	r7, #12
    ab88:	46bd      	mov	sp, r7
    ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab8e:	4770      	bx	lr

0000ab90 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    ab90:	b480      	push	{r7}
    ab92:	b083      	sub	sp, #12
    ab94:	af00      	add	r7, sp, #0
    ab96:	6078      	str	r0, [r7, #4]
    ab98:	460b      	mov	r3, r1
    ab9a:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    ab9c:	78fb      	ldrb	r3, [r7, #3]
    ab9e:	f083 0301 	eor.w	r3, r3, #1
    aba2:	b2db      	uxtb	r3, r3
    aba4:	2b00      	cmp	r3, #0
    aba6:	d003      	beq.n	abb0 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    aba8:	687b      	ldr	r3, [r7, #4]
    abaa:	2280      	movs	r2, #128	; 0x80
    abac:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    abae:	e002      	b.n	abb6 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    abb0:	687b      	ldr	r3, [r7, #4]
    abb2:	2280      	movs	r2, #128	; 0x80
    abb4:	759a      	strb	r2, [r3, #22]
}
    abb6:	bf00      	nop
    abb8:	370c      	adds	r7, #12
    abba:	46bd      	mov	sp, r7
    abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    abc0:	4770      	bx	lr

0000abc2 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    abc2:	b480      	push	{r7}
    abc4:	b083      	sub	sp, #12
    abc6:	af00      	add	r7, sp, #0
    abc8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    abca:	687b      	ldr	r3, [r7, #4]
    abcc:	2201      	movs	r2, #1
    abce:	759a      	strb	r2, [r3, #22]
}
    abd0:	bf00      	nop
    abd2:	370c      	adds	r7, #12
    abd4:	46bd      	mov	sp, r7
    abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    abda:	4770      	bx	lr

0000abdc <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    abdc:	b480      	push	{r7}
    abde:	b083      	sub	sp, #12
    abe0:	af00      	add	r7, sp, #0
    abe2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    abe4:	687b      	ldr	r3, [r7, #4]
    abe6:	2201      	movs	r2, #1
    abe8:	751a      	strb	r2, [r3, #20]
}
    abea:	bf00      	nop
    abec:	370c      	adds	r7, #12
    abee:	46bd      	mov	sp, r7
    abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    abf4:	4770      	bx	lr

0000abf6 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    abf6:	b480      	push	{r7}
    abf8:	b083      	sub	sp, #12
    abfa:	af00      	add	r7, sp, #0
    abfc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    abfe:	687b      	ldr	r3, [r7, #4]
    ac00:	2202      	movs	r2, #2
    ac02:	759a      	strb	r2, [r3, #22]
}
    ac04:	bf00      	nop
    ac06:	370c      	adds	r7, #12
    ac08:	46bd      	mov	sp, r7
    ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac0e:	4770      	bx	lr

0000ac10 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    ac10:	b480      	push	{r7}
    ac12:	b083      	sub	sp, #12
    ac14:	af00      	add	r7, sp, #0
    ac16:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    ac18:	687b      	ldr	r3, [r7, #4]
    ac1a:	2202      	movs	r2, #2
    ac1c:	751a      	strb	r2, [r3, #20]
}
    ac1e:	bf00      	nop
    ac20:	370c      	adds	r7, #12
    ac22:	46bd      	mov	sp, r7
    ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac28:	4770      	bx	lr

0000ac2a <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    ac2a:	b480      	push	{r7}
    ac2c:	b083      	sub	sp, #12
    ac2e:	af00      	add	r7, sp, #0
    ac30:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    ac32:	687b      	ldr	r3, [r7, #4]
    ac34:	2204      	movs	r2, #4
    ac36:	759a      	strb	r2, [r3, #22]
}
    ac38:	bf00      	nop
    ac3a:	370c      	adds	r7, #12
    ac3c:	46bd      	mov	sp, r7
    ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac42:	4770      	bx	lr

0000ac44 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    ac44:	b480      	push	{r7}
    ac46:	b083      	sub	sp, #12
    ac48:	af00      	add	r7, sp, #0
    ac4a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    ac4c:	687b      	ldr	r3, [r7, #4]
    ac4e:	2204      	movs	r2, #4
    ac50:	751a      	strb	r2, [r3, #20]
}
    ac52:	bf00      	nop
    ac54:	370c      	adds	r7, #12
    ac56:	46bd      	mov	sp, r7
    ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac5c:	4770      	bx	lr

0000ac5e <hri_sercomspi_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->SPI.INTENSET.reg & SERCOM_SPI_INTENSET_ERROR) >> SERCOM_SPI_INTENSET_ERROR_Pos;
}

static inline void hri_sercomspi_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    ac5e:	b480      	push	{r7}
    ac60:	b083      	sub	sp, #12
    ac62:	af00      	add	r7, sp, #0
    ac64:	6078      	str	r0, [r7, #4]
    ac66:	460b      	mov	r3, r1
    ac68:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    ac6a:	78fb      	ldrb	r3, [r7, #3]
    ac6c:	f083 0301 	eor.w	r3, r3, #1
    ac70:	b2db      	uxtb	r3, r3
    ac72:	2b00      	cmp	r3, #0
    ac74:	d003      	beq.n	ac7e <hri_sercomspi_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    ac76:	687b      	ldr	r3, [r7, #4]
    ac78:	2280      	movs	r2, #128	; 0x80
    ac7a:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
	}
}
    ac7c:	e002      	b.n	ac84 <hri_sercomspi_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    ac7e:	687b      	ldr	r3, [r7, #4]
    ac80:	2280      	movs	r2, #128	; 0x80
    ac82:	759a      	strb	r2, [r3, #22]
}
    ac84:	bf00      	nop
    ac86:	370c      	adds	r7, #12
    ac88:	46bd      	mov	sp, r7
    ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac8e:	4770      	bx	lr

0000ac90 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    ac90:	b480      	push	{r7}
    ac92:	b083      	sub	sp, #12
    ac94:	af00      	add	r7, sp, #0
    ac96:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    ac98:	687b      	ldr	r3, [r7, #4]
    ac9a:	7d9b      	ldrb	r3, [r3, #22]
    ac9c:	b2db      	uxtb	r3, r3
}
    ac9e:	4618      	mov	r0, r3
    aca0:	370c      	adds	r7, #12
    aca2:	46bd      	mov	sp, r7
    aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
    aca8:	4770      	bx	lr
	...

0000acac <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    acac:	b580      	push	{r7, lr}
    acae:	b082      	sub	sp, #8
    acb0:	af00      	add	r7, sp, #0
    acb2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    acb4:	687b      	ldr	r3, [r7, #4]
    acb6:	681b      	ldr	r3, [r3, #0]
    acb8:	f043 0202 	orr.w	r2, r3, #2
    acbc:	687b      	ldr	r3, [r7, #4]
    acbe:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    acc0:	2103      	movs	r1, #3
    acc2:	6878      	ldr	r0, [r7, #4]
    acc4:	4b02      	ldr	r3, [pc, #8]	; (acd0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    acc6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    acc8:	bf00      	nop
    acca:	3708      	adds	r7, #8
    accc:	46bd      	mov	sp, r7
    acce:	bd80      	pop	{r7, pc}
    acd0:	0000a9c9 	.word	0x0000a9c9

0000acd4 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    acd4:	b580      	push	{r7, lr}
    acd6:	b082      	sub	sp, #8
    acd8:	af00      	add	r7, sp, #0
    acda:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    acdc:	687b      	ldr	r3, [r7, #4]
    acde:	681b      	ldr	r3, [r3, #0]
    ace0:	f023 0202 	bic.w	r2, r3, #2
    ace4:	687b      	ldr	r3, [r7, #4]
    ace6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    ace8:	2103      	movs	r1, #3
    acea:	6878      	ldr	r0, [r7, #4]
    acec:	4b02      	ldr	r3, [pc, #8]	; (acf8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    acee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    acf0:	bf00      	nop
    acf2:	3708      	adds	r7, #8
    acf4:	46bd      	mov	sp, r7
    acf6:	bd80      	pop	{r7, pc}
    acf8:	0000a9c9 	.word	0x0000a9c9

0000acfc <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    acfc:	b480      	push	{r7}
    acfe:	b085      	sub	sp, #20
    ad00:	af00      	add	r7, sp, #0
    ad02:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    ad04:	687b      	ldr	r3, [r7, #4]
    ad06:	681b      	ldr	r3, [r3, #0]
    ad08:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    ad0a:	68fb      	ldr	r3, [r7, #12]
    ad0c:	0edb      	lsrs	r3, r3, #27
    ad0e:	f003 0301 	and.w	r3, r3, #1
    ad12:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    ad14:	68fb      	ldr	r3, [r7, #12]
    ad16:	2b00      	cmp	r3, #0
    ad18:	bf14      	ite	ne
    ad1a:	2301      	movne	r3, #1
    ad1c:	2300      	moveq	r3, #0
    ad1e:	b2db      	uxtb	r3, r3
}
    ad20:	4618      	mov	r0, r3
    ad22:	3714      	adds	r7, #20
    ad24:	46bd      	mov	sp, r7
    ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad2a:	4770      	bx	lr

0000ad2c <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    ad2c:	b580      	push	{r7, lr}
    ad2e:	b084      	sub	sp, #16
    ad30:	af00      	add	r7, sp, #0
    ad32:	6078      	str	r0, [r7, #4]
    ad34:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    ad36:	2103      	movs	r1, #3
    ad38:	6878      	ldr	r0, [r7, #4]
    ad3a:	4b07      	ldr	r3, [pc, #28]	; (ad58 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    ad3c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    ad3e:	687b      	ldr	r3, [r7, #4]
    ad40:	681b      	ldr	r3, [r3, #0]
    ad42:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    ad44:	68fa      	ldr	r2, [r7, #12]
    ad46:	683b      	ldr	r3, [r7, #0]
    ad48:	4013      	ands	r3, r2
    ad4a:	60fb      	str	r3, [r7, #12]
	return tmp;
    ad4c:	68fb      	ldr	r3, [r7, #12]
}
    ad4e:	4618      	mov	r0, r3
    ad50:	3710      	adds	r7, #16
    ad52:	46bd      	mov	sp, r7
    ad54:	bd80      	pop	{r7, pc}
    ad56:	bf00      	nop
    ad58:	0000a9c9 	.word	0x0000a9c9

0000ad5c <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    ad5c:	b580      	push	{r7, lr}
    ad5e:	b082      	sub	sp, #8
    ad60:	af00      	add	r7, sp, #0
    ad62:	6078      	str	r0, [r7, #4]
    ad64:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    ad66:	687b      	ldr	r3, [r7, #4]
    ad68:	683a      	ldr	r2, [r7, #0]
    ad6a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    ad6c:	2103      	movs	r1, #3
    ad6e:	6878      	ldr	r0, [r7, #4]
    ad70:	4b02      	ldr	r3, [pc, #8]	; (ad7c <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    ad72:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ad74:	bf00      	nop
    ad76:	3708      	adds	r7, #8
    ad78:	46bd      	mov	sp, r7
    ad7a:	bd80      	pop	{r7, pc}
    ad7c:	0000a9c9 	.word	0x0000a9c9

0000ad80 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    ad80:	b580      	push	{r7, lr}
    ad82:	b082      	sub	sp, #8
    ad84:	af00      	add	r7, sp, #0
    ad86:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    ad88:	687b      	ldr	r3, [r7, #4]
    ad8a:	681b      	ldr	r3, [r3, #0]
    ad8c:	f043 0202 	orr.w	r2, r3, #2
    ad90:	687b      	ldr	r3, [r7, #4]
    ad92:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    ad94:	2103      	movs	r1, #3
    ad96:	6878      	ldr	r0, [r7, #4]
    ad98:	4b02      	ldr	r3, [pc, #8]	; (ada4 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    ad9a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ad9c:	bf00      	nop
    ad9e:	3708      	adds	r7, #8
    ada0:	46bd      	mov	sp, r7
    ada2:	bd80      	pop	{r7, pc}
    ada4:	0000aa15 	.word	0x0000aa15

0000ada8 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ada8:	b580      	push	{r7, lr}
    adaa:	b084      	sub	sp, #16
    adac:	af00      	add	r7, sp, #0
    adae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    adb0:	2103      	movs	r1, #3
    adb2:	6878      	ldr	r0, [r7, #4]
    adb4:	4b09      	ldr	r3, [pc, #36]	; (addc <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    adb6:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    adb8:	687b      	ldr	r3, [r7, #4]
    adba:	681b      	ldr	r3, [r3, #0]
    adbc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    adbe:	68fb      	ldr	r3, [r7, #12]
    adc0:	085b      	lsrs	r3, r3, #1
    adc2:	f003 0301 	and.w	r3, r3, #1
    adc6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    adc8:	68fb      	ldr	r3, [r7, #12]
    adca:	2b00      	cmp	r3, #0
    adcc:	bf14      	ite	ne
    adce:	2301      	movne	r3, #1
    add0:	2300      	moveq	r3, #0
    add2:	b2db      	uxtb	r3, r3
}
    add4:	4618      	mov	r0, r3
    add6:	3710      	adds	r7, #16
    add8:	46bd      	mov	sp, r7
    adda:	bd80      	pop	{r7, pc}
    addc:	0000aa15 	.word	0x0000aa15

0000ade0 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    ade0:	b580      	push	{r7, lr}
    ade2:	b082      	sub	sp, #8
    ade4:	af00      	add	r7, sp, #0
    ade6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    ade8:	687b      	ldr	r3, [r7, #4]
    adea:	681b      	ldr	r3, [r3, #0]
    adec:	f023 0202 	bic.w	r2, r3, #2
    adf0:	687b      	ldr	r3, [r7, #4]
    adf2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    adf4:	2103      	movs	r1, #3
    adf6:	6878      	ldr	r0, [r7, #4]
    adf8:	4b02      	ldr	r3, [pc, #8]	; (ae04 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    adfa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    adfc:	bf00      	nop
    adfe:	3708      	adds	r7, #8
    ae00:	46bd      	mov	sp, r7
    ae02:	bd80      	pop	{r7, pc}
    ae04:	0000aa15 	.word	0x0000aa15

0000ae08 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    ae08:	b580      	push	{r7, lr}
    ae0a:	b084      	sub	sp, #16
    ae0c:	af00      	add	r7, sp, #0
    ae0e:	6078      	str	r0, [r7, #4]
    ae10:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    ae12:	2103      	movs	r1, #3
    ae14:	6878      	ldr	r0, [r7, #4]
    ae16:	4b07      	ldr	r3, [pc, #28]	; (ae34 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    ae18:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    ae1a:	687b      	ldr	r3, [r7, #4]
    ae1c:	681b      	ldr	r3, [r3, #0]
    ae1e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    ae20:	68fa      	ldr	r2, [r7, #12]
    ae22:	683b      	ldr	r3, [r7, #0]
    ae24:	4013      	ands	r3, r2
    ae26:	60fb      	str	r3, [r7, #12]
	return tmp;
    ae28:	68fb      	ldr	r3, [r7, #12]
}
    ae2a:	4618      	mov	r0, r3
    ae2c:	3710      	adds	r7, #16
    ae2e:	46bd      	mov	sp, r7
    ae30:	bd80      	pop	{r7, pc}
    ae32:	bf00      	nop
    ae34:	0000aa15 	.word	0x0000aa15

0000ae38 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    ae38:	b580      	push	{r7, lr}
    ae3a:	b082      	sub	sp, #8
    ae3c:	af00      	add	r7, sp, #0
    ae3e:	6078      	str	r0, [r7, #4]
    ae40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    ae42:	687b      	ldr	r3, [r7, #4]
    ae44:	683a      	ldr	r2, [r7, #0]
    ae46:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    ae48:	2103      	movs	r1, #3
    ae4a:	6878      	ldr	r0, [r7, #4]
    ae4c:	4b02      	ldr	r3, [pc, #8]	; (ae58 <hri_sercomspi_write_CTRLA_reg+0x20>)
    ae4e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ae50:	bf00      	nop
    ae52:	3708      	adds	r7, #8
    ae54:	46bd      	mov	sp, r7
    ae56:	bd80      	pop	{r7, pc}
    ae58:	0000aa15 	.word	0x0000aa15

0000ae5c <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    ae5c:	b580      	push	{r7, lr}
    ae5e:	b082      	sub	sp, #8
    ae60:	af00      	add	r7, sp, #0
    ae62:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    ae64:	687b      	ldr	r3, [r7, #4]
    ae66:	685b      	ldr	r3, [r3, #4]
    ae68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    ae6c:	687b      	ldr	r3, [r7, #4]
    ae6e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ae70:	2104      	movs	r1, #4
    ae72:	6878      	ldr	r0, [r7, #4]
    ae74:	4b02      	ldr	r3, [pc, #8]	; (ae80 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    ae76:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ae78:	bf00      	nop
    ae7a:	3708      	adds	r7, #8
    ae7c:	46bd      	mov	sp, r7
    ae7e:	bd80      	pop	{r7, pc}
    ae80:	0000a9c9 	.word	0x0000a9c9

0000ae84 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    ae84:	b580      	push	{r7, lr}
    ae86:	b082      	sub	sp, #8
    ae88:	af00      	add	r7, sp, #0
    ae8a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    ae8c:	687b      	ldr	r3, [r7, #4]
    ae8e:	685b      	ldr	r3, [r3, #4]
    ae90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    ae94:	687b      	ldr	r3, [r7, #4]
    ae96:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ae98:	2104      	movs	r1, #4
    ae9a:	6878      	ldr	r0, [r7, #4]
    ae9c:	4b02      	ldr	r3, [pc, #8]	; (aea8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    ae9e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aea0:	bf00      	nop
    aea2:	3708      	adds	r7, #8
    aea4:	46bd      	mov	sp, r7
    aea6:	bd80      	pop	{r7, pc}
    aea8:	0000a9c9 	.word	0x0000a9c9

0000aeac <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    aeac:	b580      	push	{r7, lr}
    aeae:	b082      	sub	sp, #8
    aeb0:	af00      	add	r7, sp, #0
    aeb2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    aeb4:	687b      	ldr	r3, [r7, #4]
    aeb6:	685b      	ldr	r3, [r3, #4]
    aeb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    aebc:	687b      	ldr	r3, [r7, #4]
    aebe:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aec0:	2104      	movs	r1, #4
    aec2:	6878      	ldr	r0, [r7, #4]
    aec4:	4b02      	ldr	r3, [pc, #8]	; (aed0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    aec6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aec8:	bf00      	nop
    aeca:	3708      	adds	r7, #8
    aecc:	46bd      	mov	sp, r7
    aece:	bd80      	pop	{r7, pc}
    aed0:	0000a9c9 	.word	0x0000a9c9

0000aed4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    aed4:	b580      	push	{r7, lr}
    aed6:	b082      	sub	sp, #8
    aed8:	af00      	add	r7, sp, #0
    aeda:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    aedc:	687b      	ldr	r3, [r7, #4]
    aede:	685b      	ldr	r3, [r3, #4]
    aee0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    aee4:	687b      	ldr	r3, [r7, #4]
    aee6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aee8:	2104      	movs	r1, #4
    aeea:	6878      	ldr	r0, [r7, #4]
    aeec:	4b02      	ldr	r3, [pc, #8]	; (aef8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    aeee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aef0:	bf00      	nop
    aef2:	3708      	adds	r7, #8
    aef4:	46bd      	mov	sp, r7
    aef6:	bd80      	pop	{r7, pc}
    aef8:	0000a9c9 	.word	0x0000a9c9

0000aefc <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    aefc:	b580      	push	{r7, lr}
    aefe:	b082      	sub	sp, #8
    af00:	af00      	add	r7, sp, #0
    af02:	6078      	str	r0, [r7, #4]
    af04:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    af06:	687b      	ldr	r3, [r7, #4]
    af08:	685a      	ldr	r2, [r3, #4]
    af0a:	683b      	ldr	r3, [r7, #0]
    af0c:	041b      	lsls	r3, r3, #16
    af0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    af12:	431a      	orrs	r2, r3
    af14:	687b      	ldr	r3, [r7, #4]
    af16:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    af18:	2104      	movs	r1, #4
    af1a:	6878      	ldr	r0, [r7, #4]
    af1c:	4b02      	ldr	r3, [pc, #8]	; (af28 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    af1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af20:	bf00      	nop
    af22:	3708      	adds	r7, #8
    af24:	46bd      	mov	sp, r7
    af26:	bd80      	pop	{r7, pc}
    af28:	0000a9c9 	.word	0x0000a9c9

0000af2c <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    af2c:	b580      	push	{r7, lr}
    af2e:	b082      	sub	sp, #8
    af30:	af00      	add	r7, sp, #0
    af32:	6078      	str	r0, [r7, #4]
    af34:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    af36:	687b      	ldr	r3, [r7, #4]
    af38:	683a      	ldr	r2, [r7, #0]
    af3a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    af3c:	2104      	movs	r1, #4
    af3e:	6878      	ldr	r0, [r7, #4]
    af40:	4b02      	ldr	r3, [pc, #8]	; (af4c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    af42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af44:	bf00      	nop
    af46:	3708      	adds	r7, #8
    af48:	46bd      	mov	sp, r7
    af4a:	bd80      	pop	{r7, pc}
    af4c:	0000a9c9 	.word	0x0000a9c9

0000af50 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    af50:	b580      	push	{r7, lr}
    af52:	b082      	sub	sp, #8
    af54:	af00      	add	r7, sp, #0
    af56:	6078      	str	r0, [r7, #4]
    af58:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    af5a:	687b      	ldr	r3, [r7, #4]
    af5c:	683a      	ldr	r2, [r7, #0]
    af5e:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    af60:	2117      	movs	r1, #23
    af62:	6878      	ldr	r0, [r7, #4]
    af64:	4b02      	ldr	r3, [pc, #8]	; (af70 <hri_sercomspi_write_CTRLB_reg+0x20>)
    af66:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af68:	bf00      	nop
    af6a:	3708      	adds	r7, #8
    af6c:	46bd      	mov	sp, r7
    af6e:	bd80      	pop	{r7, pc}
    af70:	0000aa15 	.word	0x0000aa15

0000af74 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    af74:	b480      	push	{r7}
    af76:	b083      	sub	sp, #12
    af78:	af00      	add	r7, sp, #0
    af7a:	6078      	str	r0, [r7, #4]
    af7c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    af7e:	687b      	ldr	r3, [r7, #4]
    af80:	683a      	ldr	r2, [r7, #0]
    af82:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af84:	bf00      	nop
    af86:	370c      	adds	r7, #12
    af88:	46bd      	mov	sp, r7
    af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    af8e:	4770      	bx	lr

0000af90 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    af90:	b480      	push	{r7}
    af92:	b083      	sub	sp, #12
    af94:	af00      	add	r7, sp, #0
    af96:	6078      	str	r0, [r7, #4]
    af98:	460b      	mov	r3, r1
    af9a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    af9c:	687b      	ldr	r3, [r7, #4]
    af9e:	78fa      	ldrb	r2, [r7, #3]
    afa0:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    afa2:	bf00      	nop
    afa4:	370c      	adds	r7, #12
    afa6:	46bd      	mov	sp, r7
    afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    afac:	4770      	bx	lr
	...

0000afb0 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    afb0:	b580      	push	{r7, lr}
    afb2:	b084      	sub	sp, #16
    afb4:	af00      	add	r7, sp, #0
    afb6:	6078      	str	r0, [r7, #4]
    afb8:	460b      	mov	r3, r1
    afba:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    afbc:	687b      	ldr	r3, [r7, #4]
    afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    afc0:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    afc2:	68fb      	ldr	r3, [r7, #12]
    afc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    afc8:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    afca:	78fb      	ldrb	r3, [r7, #3]
    afcc:	039b      	lsls	r3, r3, #14
    afce:	461a      	mov	r2, r3
    afd0:	68fb      	ldr	r3, [r7, #12]
    afd2:	4313      	orrs	r3, r2
    afd4:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    afd6:	687b      	ldr	r3, [r7, #4]
    afd8:	68fa      	ldr	r2, [r7, #12]
    afda:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    afdc:	2104      	movs	r1, #4
    afde:	6878      	ldr	r0, [r7, #4]
    afe0:	4b02      	ldr	r3, [pc, #8]	; (afec <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    afe2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    afe4:	bf00      	nop
    afe6:	3710      	adds	r7, #16
    afe8:	46bd      	mov	sp, r7
    afea:	bd80      	pop	{r7, pc}
    afec:	0000a9c9 	.word	0x0000a9c9

0000aff0 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    aff0:	b580      	push	{r7, lr}
    aff2:	b082      	sub	sp, #8
    aff4:	af00      	add	r7, sp, #0
    aff6:	6078      	str	r0, [r7, #4]
    aff8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    affa:	687b      	ldr	r3, [r7, #4]
    affc:	683a      	ldr	r2, [r7, #0]
    affe:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b000:	2104      	movs	r1, #4
    b002:	6878      	ldr	r0, [r7, #4]
    b004:	4b02      	ldr	r3, [pc, #8]	; (b010 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    b006:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b008:	bf00      	nop
    b00a:	3708      	adds	r7, #8
    b00c:	46bd      	mov	sp, r7
    b00e:	bd80      	pop	{r7, pc}
    b010:	0000a9c9 	.word	0x0000a9c9

0000b014 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    b014:	b580      	push	{r7, lr}
    b016:	b082      	sub	sp, #8
    b018:	af00      	add	r7, sp, #0
    b01a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b01c:	2104      	movs	r1, #4
    b01e:	6878      	ldr	r0, [r7, #4]
    b020:	4b03      	ldr	r3, [pc, #12]	; (b030 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    b022:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    b024:	687b      	ldr	r3, [r7, #4]
    b026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    b028:	4618      	mov	r0, r3
    b02a:	3708      	adds	r7, #8
    b02c:	46bd      	mov	sp, r7
    b02e:	bd80      	pop	{r7, pc}
    b030:	0000a9c9 	.word	0x0000a9c9

0000b034 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    b034:	b480      	push	{r7}
    b036:	b083      	sub	sp, #12
    b038:	af00      	add	r7, sp, #0
    b03a:	6078      	str	r0, [r7, #4]
    b03c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    b03e:	687b      	ldr	r3, [r7, #4]
    b040:	683a      	ldr	r2, [r7, #0]
    b042:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b044:	bf00      	nop
    b046:	370c      	adds	r7, #12
    b048:	46bd      	mov	sp, r7
    b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b04e:	4770      	bx	lr

0000b050 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    b050:	b580      	push	{r7, lr}
    b052:	b082      	sub	sp, #8
    b054:	af00      	add	r7, sp, #0
    b056:	6078      	str	r0, [r7, #4]
    b058:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    b05a:	687b      	ldr	r3, [r7, #4]
    b05c:	683a      	ldr	r2, [r7, #0]
    b05e:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b060:	2104      	movs	r1, #4
    b062:	6878      	ldr	r0, [r7, #4]
    b064:	4b02      	ldr	r3, [pc, #8]	; (b070 <hri_sercomi2cm_write_DATA_reg+0x20>)
    b066:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b068:	bf00      	nop
    b06a:	3708      	adds	r7, #8
    b06c:	46bd      	mov	sp, r7
    b06e:	bd80      	pop	{r7, pc}
    b070:	0000a9c9 	.word	0x0000a9c9

0000b074 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    b074:	b580      	push	{r7, lr}
    b076:	b082      	sub	sp, #8
    b078:	af00      	add	r7, sp, #0
    b07a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b07c:	2104      	movs	r1, #4
    b07e:	6878      	ldr	r0, [r7, #4]
    b080:	4b03      	ldr	r3, [pc, #12]	; (b090 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    b082:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    b084:	687b      	ldr	r3, [r7, #4]
    b086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    b088:	4618      	mov	r0, r3
    b08a:	3708      	adds	r7, #8
    b08c:	46bd      	mov	sp, r7
    b08e:	bd80      	pop	{r7, pc}
    b090:	0000a9c9 	.word	0x0000a9c9

0000b094 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    b094:	b480      	push	{r7}
    b096:	b083      	sub	sp, #12
    b098:	af00      	add	r7, sp, #0
    b09a:	6078      	str	r0, [r7, #4]
    b09c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    b09e:	687b      	ldr	r3, [r7, #4]
    b0a0:	683a      	ldr	r2, [r7, #0]
    b0a2:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b0a4:	bf00      	nop
    b0a6:	370c      	adds	r7, #12
    b0a8:	46bd      	mov	sp, r7
    b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0ae:	4770      	bx	lr

0000b0b0 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    b0b0:	b480      	push	{r7}
    b0b2:	b083      	sub	sp, #12
    b0b4:	af00      	add	r7, sp, #0
    b0b6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    b0b8:	687b      	ldr	r3, [r7, #4]
    b0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    b0bc:	4618      	mov	r0, r3
    b0be:	370c      	adds	r7, #12
    b0c0:	46bd      	mov	sp, r7
    b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0c6:	4770      	bx	lr

0000b0c8 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    b0c8:	b480      	push	{r7}
    b0ca:	b083      	sub	sp, #12
    b0cc:	af00      	add	r7, sp, #0
    b0ce:	6078      	str	r0, [r7, #4]
    b0d0:	460b      	mov	r3, r1
    b0d2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    b0d4:	687b      	ldr	r3, [r7, #4]
    b0d6:	78fa      	ldrb	r2, [r7, #3]
    b0d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b0dc:	bf00      	nop
    b0de:	370c      	adds	r7, #12
    b0e0:	46bd      	mov	sp, r7
    b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0e6:	4770      	bx	lr

0000b0e8 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    b0e8:	b480      	push	{r7}
    b0ea:	b083      	sub	sp, #12
    b0ec:	af00      	add	r7, sp, #0
    b0ee:	6078      	str	r0, [r7, #4]
    b0f0:	460b      	mov	r3, r1
    b0f2:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    b0f4:	687b      	ldr	r3, [r7, #4]
    b0f6:	887a      	ldrh	r2, [r7, #2]
    b0f8:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b0fa:	bf00      	nop
    b0fc:	370c      	adds	r7, #12
    b0fe:	46bd      	mov	sp, r7
    b100:	f85d 7b04 	ldr.w	r7, [sp], #4
    b104:	4770      	bx	lr
	...

0000b108 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    b108:	b580      	push	{r7, lr}
    b10a:	b082      	sub	sp, #8
    b10c:	af00      	add	r7, sp, #0
    b10e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b110:	2104      	movs	r1, #4
    b112:	6878      	ldr	r0, [r7, #4]
    b114:	4b06      	ldr	r3, [pc, #24]	; (b130 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    b116:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    b118:	687b      	ldr	r3, [r7, #4]
    b11a:	8b5b      	ldrh	r3, [r3, #26]
    b11c:	b29b      	uxth	r3, r3
    b11e:	091b      	lsrs	r3, r3, #4
    b120:	b29b      	uxth	r3, r3
    b122:	f003 0303 	and.w	r3, r3, #3
    b126:	b29b      	uxth	r3, r3
}
    b128:	4618      	mov	r0, r3
    b12a:	3708      	adds	r7, #8
    b12c:	46bd      	mov	sp, r7
    b12e:	bd80      	pop	{r7, pc}
    b130:	0000a9c9 	.word	0x0000a9c9

0000b134 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    b134:	b580      	push	{r7, lr}
    b136:	b082      	sub	sp, #8
    b138:	af00      	add	r7, sp, #0
    b13a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b13c:	2104      	movs	r1, #4
    b13e:	6878      	ldr	r0, [r7, #4]
    b140:	4b04      	ldr	r3, [pc, #16]	; (b154 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    b142:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    b144:	687b      	ldr	r3, [r7, #4]
    b146:	8b5b      	ldrh	r3, [r3, #26]
    b148:	b29b      	uxth	r3, r3
}
    b14a:	4618      	mov	r0, r3
    b14c:	3708      	adds	r7, #8
    b14e:	46bd      	mov	sp, r7
    b150:	bd80      	pop	{r7, pc}
    b152:	bf00      	nop
    b154:	0000a9c9 	.word	0x0000a9c9

0000b158 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    b158:	b580      	push	{r7, lr}
    b15a:	b082      	sub	sp, #8
    b15c:	af00      	add	r7, sp, #0
    b15e:	6078      	str	r0, [r7, #4]
    b160:	460b      	mov	r3, r1
    b162:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    b164:	687b      	ldr	r3, [r7, #4]
    b166:	887a      	ldrh	r2, [r7, #2]
    b168:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b16a:	2104      	movs	r1, #4
    b16c:	6878      	ldr	r0, [r7, #4]
    b16e:	4b03      	ldr	r3, [pc, #12]	; (b17c <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    b170:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b172:	bf00      	nop
    b174:	3708      	adds	r7, #8
    b176:	46bd      	mov	sp, r7
    b178:	bd80      	pop	{r7, pc}
    b17a:	bf00      	nop
    b17c:	0000a9c9 	.word	0x0000a9c9

0000b180 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    b180:	b4b0      	push	{r4, r5, r7}
    b182:	b08d      	sub	sp, #52	; 0x34
    b184:	af00      	add	r7, sp, #0
    b186:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    b188:	4b13      	ldr	r3, [pc, #76]	; (b1d8 <_sercom_get_hardware_index+0x58>)
    b18a:	f107 040c 	add.w	r4, r7, #12
    b18e:	461d      	mov	r5, r3
    b190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b194:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b19c:	2300      	movs	r3, #0
    b19e:	62fb      	str	r3, [r7, #44]	; 0x2c
    b1a0:	e010      	b.n	b1c4 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b1a4:	009b      	lsls	r3, r3, #2
    b1a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b1aa:	4413      	add	r3, r2
    b1ac:	f853 3c24 	ldr.w	r3, [r3, #-36]
    b1b0:	461a      	mov	r2, r3
    b1b2:	687b      	ldr	r3, [r7, #4]
    b1b4:	429a      	cmp	r2, r3
    b1b6:	d102      	bne.n	b1be <_sercom_get_hardware_index+0x3e>
			return i;
    b1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b1ba:	b2db      	uxtb	r3, r3
    b1bc:	e006      	b.n	b1cc <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b1c0:	3301      	adds	r3, #1
    b1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    b1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b1c6:	2b07      	cmp	r3, #7
    b1c8:	d9eb      	bls.n	b1a2 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    b1ca:	2300      	movs	r3, #0
}
    b1cc:	4618      	mov	r0, r3
    b1ce:	3734      	adds	r7, #52	; 0x34
    b1d0:	46bd      	mov	sp, r7
    b1d2:	bcb0      	pop	{r4, r5, r7}
    b1d4:	4770      	bx	lr
    b1d6:	bf00      	nop
    b1d8:	0001f78c 	.word	0x0001f78c

0000b1dc <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    b1dc:	b480      	push	{r7}
    b1de:	b083      	sub	sp, #12
    b1e0:	af00      	add	r7, sp, #0
    b1e2:	6078      	str	r0, [r7, #4]
    b1e4:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    b1e6:	687b      	ldr	r3, [r7, #4]
    b1e8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    b1ec:	d102      	bne.n	b1f4 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    b1ee:	4a0b      	ldr	r2, [pc, #44]	; (b21c <_sercom_init_irq_param+0x40>)
    b1f0:	683b      	ldr	r3, [r7, #0]
    b1f2:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    b1f4:	687b      	ldr	r3, [r7, #4]
    b1f6:	4a0a      	ldr	r2, [pc, #40]	; (b220 <_sercom_init_irq_param+0x44>)
    b1f8:	4293      	cmp	r3, r2
    b1fa:	d102      	bne.n	b202 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    b1fc:	4a09      	ldr	r2, [pc, #36]	; (b224 <_sercom_init_irq_param+0x48>)
    b1fe:	683b      	ldr	r3, [r7, #0]
    b200:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    b202:	687b      	ldr	r3, [r7, #4]
    b204:	4a08      	ldr	r2, [pc, #32]	; (b228 <_sercom_init_irq_param+0x4c>)
    b206:	4293      	cmp	r3, r2
    b208:	d102      	bne.n	b210 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    b20a:	4a08      	ldr	r2, [pc, #32]	; (b22c <_sercom_init_irq_param+0x50>)
    b20c:	683b      	ldr	r3, [r7, #0]
    b20e:	6013      	str	r3, [r2, #0]
	}
}
    b210:	bf00      	nop
    b212:	370c      	adds	r7, #12
    b214:	46bd      	mov	sp, r7
    b216:	f85d 7b04 	ldr.w	r7, [sp], #4
    b21a:	4770      	bx	lr
    b21c:	20008768 	.word	0x20008768
    b220:	43000400 	.word	0x43000400
    b224:	2000876c 	.word	0x2000876c
    b228:	43000c00 	.word	0x43000c00
    b22c:	20008770 	.word	0x20008770

0000b230 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    b230:	b580      	push	{r7, lr}
    b232:	b084      	sub	sp, #16
    b234:	af00      	add	r7, sp, #0
    b236:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    b238:	6878      	ldr	r0, [r7, #4]
    b23a:	4b13      	ldr	r3, [pc, #76]	; (b288 <_get_i2cm_index+0x58>)
    b23c:	4798      	blx	r3
    b23e:	4603      	mov	r3, r0
    b240:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    b242:	2300      	movs	r3, #0
    b244:	73fb      	strb	r3, [r7, #15]
    b246:	e010      	b.n	b26a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    b248:	7bfa      	ldrb	r2, [r7, #15]
    b24a:	4910      	ldr	r1, [pc, #64]	; (b28c <_get_i2cm_index+0x5c>)
    b24c:	4613      	mov	r3, r2
    b24e:	005b      	lsls	r3, r3, #1
    b250:	4413      	add	r3, r2
    b252:	00db      	lsls	r3, r3, #3
    b254:	440b      	add	r3, r1
    b256:	781b      	ldrb	r3, [r3, #0]
    b258:	7bba      	ldrb	r2, [r7, #14]
    b25a:	429a      	cmp	r2, r3
    b25c:	d102      	bne.n	b264 <_get_i2cm_index+0x34>
			return i;
    b25e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b262:	e00d      	b.n	b280 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    b264:	7bfb      	ldrb	r3, [r7, #15]
    b266:	3301      	adds	r3, #1
    b268:	73fb      	strb	r3, [r7, #15]
    b26a:	7bfb      	ldrb	r3, [r7, #15]
    b26c:	2b02      	cmp	r3, #2
    b26e:	d9eb      	bls.n	b248 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    b270:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    b274:	4906      	ldr	r1, [pc, #24]	; (b290 <_get_i2cm_index+0x60>)
    b276:	2000      	movs	r0, #0
    b278:	4b06      	ldr	r3, [pc, #24]	; (b294 <_get_i2cm_index+0x64>)
    b27a:	4798      	blx	r3
	return -1;
    b27c:	f04f 33ff 	mov.w	r3, #4294967295
}
    b280:	4618      	mov	r0, r3
    b282:	3710      	adds	r7, #16
    b284:	46bd      	mov	sp, r7
    b286:	bd80      	pop	{r7, pc}
    b288:	0000b181 	.word	0x0000b181
    b28c:	2000007c 	.word	0x2000007c
    b290:	0001f770 	.word	0x0001f770
    b294:	00007d91 	.word	0x00007d91

0000b298 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    b298:	b580      	push	{r7, lr}
    b29a:	b082      	sub	sp, #8
    b29c:	af00      	add	r7, sp, #0
    b29e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    b2a0:	2103      	movs	r1, #3
    b2a2:	6878      	ldr	r0, [r7, #4]
    b2a4:	4b02      	ldr	r3, [pc, #8]	; (b2b0 <_sercom_i2c_send_stop+0x18>)
    b2a6:	4798      	blx	r3
}
    b2a8:	bf00      	nop
    b2aa:	3708      	adds	r7, #8
    b2ac:	46bd      	mov	sp, r7
    b2ae:	bd80      	pop	{r7, pc}
    b2b0:	0000aefd 	.word	0x0000aefd

0000b2b4 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    b2b4:	b590      	push	{r4, r7, lr}
    b2b6:	b087      	sub	sp, #28
    b2b8:	af00      	add	r7, sp, #0
    b2ba:	60f8      	str	r0, [r7, #12]
    b2bc:	60b9      	str	r1, [r7, #8]
    b2be:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b2c0:	68f8      	ldr	r0, [r7, #12]
    b2c2:	4b7d      	ldr	r3, [pc, #500]	; (b4b8 <_sercom_i2c_sync_analyse_flags+0x204>)
    b2c4:	4798      	blx	r3
    b2c6:	4603      	mov	r3, r0
    b2c8:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    b2ca:	68f8      	ldr	r0, [r7, #12]
    b2cc:	4b7b      	ldr	r3, [pc, #492]	; (b4bc <_sercom_i2c_sync_analyse_flags+0x208>)
    b2ce:	4798      	blx	r3
    b2d0:	4603      	mov	r3, r0
    b2d2:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    b2d4:	68bb      	ldr	r3, [r7, #8]
    b2d6:	f003 0301 	and.w	r3, r3, #1
    b2da:	2b00      	cmp	r3, #0
    b2dc:	f000 8095 	beq.w	b40a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    b2e0:	8a7b      	ldrh	r3, [r7, #18]
    b2e2:	f003 0302 	and.w	r3, r3, #2
    b2e6:	2b00      	cmp	r3, #0
    b2e8:	d01d      	beq.n	b326 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    b2ea:	68f8      	ldr	r0, [r7, #12]
    b2ec:	4b74      	ldr	r3, [pc, #464]	; (b4c0 <_sercom_i2c_sync_analyse_flags+0x20c>)
    b2ee:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    b2f0:	687b      	ldr	r3, [r7, #4]
    b2f2:	885b      	ldrh	r3, [r3, #2]
    b2f4:	b29b      	uxth	r3, r3
    b2f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    b2fa:	b29a      	uxth	r2, r3
    b2fc:	687b      	ldr	r3, [r7, #4]
    b2fe:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    b300:	687b      	ldr	r3, [r7, #4]
    b302:	885b      	ldrh	r3, [r3, #2]
    b304:	b29b      	uxth	r3, r3
    b306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b30a:	b29a      	uxth	r2, r3
    b30c:	687b      	ldr	r3, [r7, #4]
    b30e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    b310:	8a7b      	ldrh	r3, [r7, #18]
    b312:	f003 0301 	and.w	r3, r3, #1
    b316:	2b00      	cmp	r3, #0
    b318:	d002      	beq.n	b320 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    b31a:	f06f 0304 	mvn.w	r3, #4
    b31e:	e0c6      	b.n	b4ae <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    b320:	f06f 0303 	mvn.w	r3, #3
    b324:	e0c3      	b.n	b4ae <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    b326:	8a7b      	ldrh	r3, [r7, #18]
    b328:	f003 0304 	and.w	r3, r3, #4
    b32c:	2b00      	cmp	r3, #0
    b32e:	d01f      	beq.n	b370 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    b330:	687b      	ldr	r3, [r7, #4]
    b332:	685b      	ldr	r3, [r3, #4]
    b334:	2b00      	cmp	r3, #0
    b336:	dd07      	ble.n	b348 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    b338:	687b      	ldr	r3, [r7, #4]
    b33a:	885b      	ldrh	r3, [r3, #2]
    b33c:	b29b      	uxth	r3, r3
    b33e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    b342:	b29a      	uxth	r2, r3
    b344:	687b      	ldr	r3, [r7, #4]
    b346:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    b348:	687b      	ldr	r3, [r7, #4]
    b34a:	885b      	ldrh	r3, [r3, #2]
    b34c:	b29b      	uxth	r3, r3
    b34e:	b21b      	sxth	r3, r3
    b350:	2b00      	cmp	r3, #0
    b352:	da02      	bge.n	b35a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    b354:	68f8      	ldr	r0, [r7, #12]
    b356:	4b5b      	ldr	r3, [pc, #364]	; (b4c4 <_sercom_i2c_sync_analyse_flags+0x210>)
    b358:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b35a:	687b      	ldr	r3, [r7, #4]
    b35c:	885b      	ldrh	r3, [r3, #2]
    b35e:	b29b      	uxth	r3, r3
    b360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b364:	b29a      	uxth	r2, r3
    b366:	687b      	ldr	r3, [r7, #4]
    b368:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    b36a:	f06f 0301 	mvn.w	r3, #1
    b36e:	e09e      	b.n	b4ae <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    b370:	687b      	ldr	r3, [r7, #4]
    b372:	885b      	ldrh	r3, [r3, #2]
    b374:	b29b      	uxth	r3, r3
    b376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b37a:	2b00      	cmp	r3, #0
    b37c:	d01c      	beq.n	b3b8 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    b37e:	687b      	ldr	r3, [r7, #4]
    b380:	881b      	ldrh	r3, [r3, #0]
    b382:	121b      	asrs	r3, r3, #8
    b384:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b386:	f003 0406 	and.w	r4, r3, #6
    b38a:	68f8      	ldr	r0, [r7, #12]
    b38c:	4b4e      	ldr	r3, [pc, #312]	; (b4c8 <_sercom_i2c_sync_analyse_flags+0x214>)
    b38e:	4798      	blx	r3
    b390:	4603      	mov	r3, r0
    b392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b396:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    b398:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    b39c:	4619      	mov	r1, r3
    b39e:	68f8      	ldr	r0, [r7, #12]
    b3a0:	4b4a      	ldr	r3, [pc, #296]	; (b4cc <_sercom_i2c_sync_analyse_flags+0x218>)
    b3a2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    b3a4:	687b      	ldr	r3, [r7, #4]
    b3a6:	885b      	ldrh	r3, [r3, #2]
    b3a8:	b29b      	uxth	r3, r3
    b3aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    b3ae:	b29a      	uxth	r2, r3
    b3b0:	687b      	ldr	r3, [r7, #4]
    b3b2:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    b3b4:	2300      	movs	r3, #0
    b3b6:	e07a      	b.n	b4ae <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    b3b8:	687b      	ldr	r3, [r7, #4]
    b3ba:	685b      	ldr	r3, [r3, #4]
    b3bc:	2b00      	cmp	r3, #0
    b3be:	d111      	bne.n	b3e4 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    b3c0:	687b      	ldr	r3, [r7, #4]
    b3c2:	885b      	ldrh	r3, [r3, #2]
    b3c4:	b29b      	uxth	r3, r3
    b3c6:	b21b      	sxth	r3, r3
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	da02      	bge.n	b3d2 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    b3cc:	68f8      	ldr	r0, [r7, #12]
    b3ce:	4b3d      	ldr	r3, [pc, #244]	; (b4c4 <_sercom_i2c_sync_analyse_flags+0x210>)
    b3d0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b3d2:	687b      	ldr	r3, [r7, #4]
    b3d4:	885b      	ldrh	r3, [r3, #2]
    b3d6:	b29b      	uxth	r3, r3
    b3d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b3dc:	b29a      	uxth	r2, r3
    b3de:	687b      	ldr	r3, [r7, #4]
    b3e0:	805a      	strh	r2, [r3, #2]
    b3e2:	e010      	b.n	b406 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    b3e4:	687b      	ldr	r3, [r7, #4]
    b3e6:	689b      	ldr	r3, [r3, #8]
    b3e8:	781b      	ldrb	r3, [r3, #0]
    b3ea:	4619      	mov	r1, r3
    b3ec:	68f8      	ldr	r0, [r7, #12]
    b3ee:	4b38      	ldr	r3, [pc, #224]	; (b4d0 <_sercom_i2c_sync_analyse_flags+0x21c>)
    b3f0:	4798      	blx	r3
				msg->buffer++;
    b3f2:	687b      	ldr	r3, [r7, #4]
    b3f4:	689b      	ldr	r3, [r3, #8]
    b3f6:	1c5a      	adds	r2, r3, #1
    b3f8:	687b      	ldr	r3, [r7, #4]
    b3fa:	609a      	str	r2, [r3, #8]
				msg->len--;
    b3fc:	687b      	ldr	r3, [r7, #4]
    b3fe:	685b      	ldr	r3, [r3, #4]
    b400:	1e5a      	subs	r2, r3, #1
    b402:	687b      	ldr	r3, [r7, #4]
    b404:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    b406:	2300      	movs	r3, #0
    b408:	e051      	b.n	b4ae <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    b40a:	68bb      	ldr	r3, [r7, #8]
    b40c:	f003 0302 	and.w	r3, r3, #2
    b410:	2b00      	cmp	r3, #0
    b412:	d04b      	beq.n	b4ac <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    b414:	687b      	ldr	r3, [r7, #4]
    b416:	685b      	ldr	r3, [r3, #4]
    b418:	2b00      	cmp	r3, #0
    b41a:	d041      	beq.n	b4a0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    b41c:	8a7b      	ldrh	r3, [r7, #18]
    b41e:	f003 0304 	and.w	r3, r3, #4
    b422:	2b00      	cmp	r3, #0
    b424:	d13c      	bne.n	b4a0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    b426:	687b      	ldr	r3, [r7, #4]
    b428:	685b      	ldr	r3, [r3, #4]
    b42a:	1e5a      	subs	r2, r3, #1
    b42c:	687b      	ldr	r3, [r7, #4]
    b42e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    b430:	687b      	ldr	r3, [r7, #4]
    b432:	685b      	ldr	r3, [r3, #4]
    b434:	2b00      	cmp	r3, #0
    b436:	d102      	bne.n	b43e <_sercom_i2c_sync_analyse_flags+0x18a>
    b438:	697b      	ldr	r3, [r7, #20]
    b43a:	2b00      	cmp	r3, #0
    b43c:	d006      	beq.n	b44c <_sercom_i2c_sync_analyse_flags+0x198>
    b43e:	687b      	ldr	r3, [r7, #4]
    b440:	685b      	ldr	r3, [r3, #4]
    b442:	2b01      	cmp	r3, #1
    b444:	d105      	bne.n	b452 <_sercom_i2c_sync_analyse_flags+0x19e>
    b446:	697b      	ldr	r3, [r7, #20]
    b448:	2b00      	cmp	r3, #0
    b44a:	d002      	beq.n	b452 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b44c:	68f8      	ldr	r0, [r7, #12]
    b44e:	4b21      	ldr	r3, [pc, #132]	; (b4d4 <_sercom_i2c_sync_analyse_flags+0x220>)
    b450:	4798      	blx	r3
			}

			if (msg->len == 0) {
    b452:	687b      	ldr	r3, [r7, #4]
    b454:	685b      	ldr	r3, [r3, #4]
    b456:	2b00      	cmp	r3, #0
    b458:	d113      	bne.n	b482 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    b45a:	687b      	ldr	r3, [r7, #4]
    b45c:	885b      	ldrh	r3, [r3, #2]
    b45e:	b29b      	uxth	r3, r3
    b460:	b21b      	sxth	r3, r3
    b462:	2b00      	cmp	r3, #0
    b464:	da05      	bge.n	b472 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    b466:	68f8      	ldr	r0, [r7, #12]
    b468:	4b1b      	ldr	r3, [pc, #108]	; (b4d8 <_sercom_i2c_sync_analyse_flags+0x224>)
    b46a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    b46c:	68f8      	ldr	r0, [r7, #12]
    b46e:	4b15      	ldr	r3, [pc, #84]	; (b4c4 <_sercom_i2c_sync_analyse_flags+0x210>)
    b470:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b472:	687b      	ldr	r3, [r7, #4]
    b474:	885b      	ldrh	r3, [r3, #2]
    b476:	b29b      	uxth	r3, r3
    b478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b47c:	b29a      	uxth	r2, r3
    b47e:	687b      	ldr	r3, [r7, #4]
    b480:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    b482:	687b      	ldr	r3, [r7, #4]
    b484:	689c      	ldr	r4, [r3, #8]
    b486:	1c62      	adds	r2, r4, #1
    b488:	687b      	ldr	r3, [r7, #4]
    b48a:	609a      	str	r2, [r3, #8]
    b48c:	68f8      	ldr	r0, [r7, #12]
    b48e:	4b13      	ldr	r3, [pc, #76]	; (b4dc <_sercom_i2c_sync_analyse_flags+0x228>)
    b490:	4798      	blx	r3
    b492:	4603      	mov	r3, r0
    b494:	b2db      	uxtb	r3, r3
    b496:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    b498:	68f8      	ldr	r0, [r7, #12]
    b49a:	4b11      	ldr	r3, [pc, #68]	; (b4e0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    b49c:	4798      	blx	r3
    b49e:	e005      	b.n	b4ac <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    b4a0:	68f8      	ldr	r0, [r7, #12]
    b4a2:	4b0f      	ldr	r3, [pc, #60]	; (b4e0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    b4a4:	4798      	blx	r3
			return I2C_NACK;
    b4a6:	f06f 0301 	mvn.w	r3, #1
    b4aa:	e000      	b.n	b4ae <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    b4ac:	2300      	movs	r3, #0
}
    b4ae:	4618      	mov	r0, r3
    b4b0:	371c      	adds	r7, #28
    b4b2:	46bd      	mov	sp, r7
    b4b4:	bd90      	pop	{r4, r7, pc}
    b4b6:	bf00      	nop
    b4b8:	0000acfd 	.word	0x0000acfd
    b4bc:	0000b135 	.word	0x0000b135
    b4c0:	0000aa61 	.word	0x0000aa61
    b4c4:	0000b299 	.word	0x0000b299
    b4c8:	0000b015 	.word	0x0000b015
    b4cc:	0000aff1 	.word	0x0000aff1
    b4d0:	0000b051 	.word	0x0000b051
    b4d4:	0000aead 	.word	0x0000aead
    b4d8:	0000ae85 	.word	0x0000ae85
    b4dc:	0000b075 	.word	0x0000b075
    b4e0:	0000aa7b 	.word	0x0000aa7b

0000b4e4 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    b4e4:	b580      	push	{r7, lr}
    b4e6:	b086      	sub	sp, #24
    b4e8:	af00      	add	r7, sp, #0
    b4ea:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    b4ec:	687b      	ldr	r3, [r7, #4]
    b4ee:	691b      	ldr	r3, [r3, #16]
    b4f0:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    b4f2:	6938      	ldr	r0, [r7, #16]
    b4f4:	4b37      	ldr	r3, [pc, #220]	; (b5d4 <_sercom_i2c_m_irq_handler+0xf0>)
    b4f6:	4798      	blx	r3
    b4f8:	4603      	mov	r3, r0
    b4fa:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    b4fc:	2300      	movs	r3, #0
    b4fe:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    b500:	687b      	ldr	r3, [r7, #4]
    b502:	2b00      	cmp	r3, #0
    b504:	bf14      	ite	ne
    b506:	2301      	movne	r3, #1
    b508:	2300      	moveq	r3, #0
    b50a:	b2db      	uxtb	r3, r3
    b50c:	f240 422a 	movw	r2, #1066	; 0x42a
    b510:	4931      	ldr	r1, [pc, #196]	; (b5d8 <_sercom_i2c_m_irq_handler+0xf4>)
    b512:	4618      	mov	r0, r3
    b514:	4b31      	ldr	r3, [pc, #196]	; (b5dc <_sercom_i2c_m_irq_handler+0xf8>)
    b516:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b518:	687b      	ldr	r3, [r7, #4]
    b51a:	691b      	ldr	r3, [r3, #16]
    b51c:	2b00      	cmp	r3, #0
    b51e:	bf14      	ite	ne
    b520:	2301      	movne	r3, #1
    b522:	2300      	moveq	r3, #0
    b524:	b2db      	uxtb	r3, r3
    b526:	f240 422b 	movw	r2, #1067	; 0x42b
    b52a:	492b      	ldr	r1, [pc, #172]	; (b5d8 <_sercom_i2c_m_irq_handler+0xf4>)
    b52c:	4618      	mov	r0, r3
    b52e:	4b2b      	ldr	r3, [pc, #172]	; (b5dc <_sercom_i2c_m_irq_handler+0xf8>)
    b530:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    b532:	bf00      	nop
    b534:	68fb      	ldr	r3, [r7, #12]
    b536:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b53a:	2b00      	cmp	r3, #0
    b53c:	d126      	bne.n	b58c <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    b53e:	687b      	ldr	r3, [r7, #4]
    b540:	461a      	mov	r2, r3
    b542:	68f9      	ldr	r1, [r7, #12]
    b544:	6938      	ldr	r0, [r7, #16]
    b546:	4b26      	ldr	r3, [pc, #152]	; (b5e0 <_sercom_i2c_m_irq_handler+0xfc>)
    b548:	4798      	blx	r3
    b54a:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    b54c:	697b      	ldr	r3, [r7, #20]
    b54e:	2b00      	cmp	r3, #0
    b550:	d11b      	bne.n	b58a <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    b552:	68fb      	ldr	r3, [r7, #12]
    b554:	f003 0301 	and.w	r3, r3, #1
    b558:	2b00      	cmp	r3, #0
    b55a:	d008      	beq.n	b56e <_sercom_i2c_m_irq_handler+0x8a>
    b55c:	687b      	ldr	r3, [r7, #4]
    b55e:	699b      	ldr	r3, [r3, #24]
    b560:	2b00      	cmp	r3, #0
    b562:	d004      	beq.n	b56e <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    b564:	687b      	ldr	r3, [r7, #4]
    b566:	699b      	ldr	r3, [r3, #24]
    b568:	6878      	ldr	r0, [r7, #4]
    b56a:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    b56c:	e02e      	b.n	b5cc <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    b56e:	68fb      	ldr	r3, [r7, #12]
    b570:	f003 0302 	and.w	r3, r3, #2
    b574:	2b00      	cmp	r3, #0
    b576:	d029      	beq.n	b5cc <_sercom_i2c_m_irq_handler+0xe8>
    b578:	687b      	ldr	r3, [r7, #4]
    b57a:	69db      	ldr	r3, [r3, #28]
    b57c:	2b00      	cmp	r3, #0
    b57e:	d025      	beq.n	b5cc <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    b580:	687b      	ldr	r3, [r7, #4]
    b582:	69db      	ldr	r3, [r3, #28]
    b584:	6878      	ldr	r0, [r7, #4]
    b586:	4798      	blx	r3
		return;
    b588:	e020      	b.n	b5cc <_sercom_i2c_m_irq_handler+0xe8>
			break;
    b58a:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b58c:	687b      	ldr	r3, [r7, #4]
    b58e:	885b      	ldrh	r3, [r3, #2]
    b590:	b29b      	uxth	r3, r3
    b592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b596:	b29a      	uxth	r2, r3
    b598:	687b      	ldr	r3, [r7, #4]
    b59a:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    b59c:	687b      	ldr	r3, [r7, #4]
    b59e:	695b      	ldr	r3, [r3, #20]
    b5a0:	2b00      	cmp	r3, #0
    b5a2:	d014      	beq.n	b5ce <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    b5a4:	697b      	ldr	r3, [r7, #20]
    b5a6:	2b00      	cmp	r3, #0
    b5a8:	d005      	beq.n	b5b6 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    b5aa:	687b      	ldr	r3, [r7, #4]
    b5ac:	695b      	ldr	r3, [r3, #20]
    b5ae:	6979      	ldr	r1, [r7, #20]
    b5b0:	6878      	ldr	r0, [r7, #4]
    b5b2:	4798      	blx	r3
    b5b4:	e005      	b.n	b5c2 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    b5b6:	687b      	ldr	r3, [r7, #4]
    b5b8:	695b      	ldr	r3, [r3, #20]
    b5ba:	f06f 0104 	mvn.w	r1, #4
    b5be:	6878      	ldr	r0, [r7, #4]
    b5c0:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    b5c2:	2180      	movs	r1, #128	; 0x80
    b5c4:	6938      	ldr	r0, [r7, #16]
    b5c6:	4b07      	ldr	r3, [pc, #28]	; (b5e4 <_sercom_i2c_m_irq_handler+0x100>)
    b5c8:	4798      	blx	r3
    b5ca:	e000      	b.n	b5ce <_sercom_i2c_m_irq_handler+0xea>
		return;
    b5cc:	bf00      	nop
	}
}
    b5ce:	3718      	adds	r7, #24
    b5d0:	46bd      	mov	sp, r7
    b5d2:	bd80      	pop	{r7, pc}
    b5d4:	0000aa95 	.word	0x0000aa95
    b5d8:	0001f770 	.word	0x0001f770
    b5dc:	00007d91 	.word	0x00007d91
    b5e0:	0000b2b5 	.word	0x0000b2b5
    b5e4:	0000aaaf 	.word	0x0000aaaf

0000b5e8 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    b5e8:	b580      	push	{r7, lr}
    b5ea:	b082      	sub	sp, #8
    b5ec:	af00      	add	r7, sp, #0
    b5ee:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    b5f0:	687b      	ldr	r3, [r7, #4]
    b5f2:	2b00      	cmp	r3, #0
    b5f4:	bf14      	ite	ne
    b5f6:	2301      	movne	r3, #1
    b5f8:	2300      	moveq	r3, #0
    b5fa:	b2db      	uxtb	r3, r3
    b5fc:	f44f 628a 	mov.w	r2, #1104	; 0x450
    b600:	4906      	ldr	r1, [pc, #24]	; (b61c <_i2c_m_async_enable+0x34>)
    b602:	4618      	mov	r0, r3
    b604:	4b06      	ldr	r3, [pc, #24]	; (b620 <_i2c_m_async_enable+0x38>)
    b606:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    b608:	687b      	ldr	r3, [r7, #4]
    b60a:	691b      	ldr	r3, [r3, #16]
    b60c:	4618      	mov	r0, r3
    b60e:	4b05      	ldr	r3, [pc, #20]	; (b624 <_i2c_m_async_enable+0x3c>)
    b610:	4798      	blx	r3
    b612:	4603      	mov	r3, r0
}
    b614:	4618      	mov	r0, r3
    b616:	3708      	adds	r7, #8
    b618:	46bd      	mov	sp, r7
    b61a:	bd80      	pop	{r7, pc}
    b61c:	0001f770 	.word	0x0001f770
    b620:	00007d91 	.word	0x00007d91
    b624:	0000bc69 	.word	0x0000bc69

0000b628 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    b628:	b580      	push	{r7, lr}
    b62a:	b082      	sub	sp, #8
    b62c:	af00      	add	r7, sp, #0
    b62e:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    b630:	6878      	ldr	r0, [r7, #4]
    b632:	4b05      	ldr	r3, [pc, #20]	; (b648 <_sercom_get_irq_num+0x20>)
    b634:	4798      	blx	r3
    b636:	4603      	mov	r3, r0
    b638:	009b      	lsls	r3, r3, #2
    b63a:	b2db      	uxtb	r3, r3
    b63c:	332e      	adds	r3, #46	; 0x2e
    b63e:	b2db      	uxtb	r3, r3
}
    b640:	4618      	mov	r0, r3
    b642:	3708      	adds	r7, #8
    b644:	46bd      	mov	sp, r7
    b646:	bd80      	pop	{r7, pc}
    b648:	0000b181 	.word	0x0000b181

0000b64c <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    b64c:	b580      	push	{r7, lr}
    b64e:	b086      	sub	sp, #24
    b650:	af00      	add	r7, sp, #0
    b652:	6078      	str	r0, [r7, #4]
    b654:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    b656:	687b      	ldr	r3, [r7, #4]
    b658:	2b00      	cmp	r3, #0
    b65a:	bf14      	ite	ne
    b65c:	2301      	movne	r3, #1
    b65e:	2300      	moveq	r3, #0
    b660:	b2db      	uxtb	r3, r3
    b662:	f240 429e 	movw	r2, #1182	; 0x49e
    b666:	491d      	ldr	r1, [pc, #116]	; (b6dc <_i2c_m_async_init+0x90>)
    b668:	4618      	mov	r0, r3
    b66a:	4b1d      	ldr	r3, [pc, #116]	; (b6e0 <_i2c_m_async_init+0x94>)
    b66c:	4798      	blx	r3

	i2c_dev->hw = hw;
    b66e:	687b      	ldr	r3, [r7, #4]
    b670:	683a      	ldr	r2, [r7, #0]
    b672:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    b674:	687b      	ldr	r3, [r7, #4]
    b676:	6839      	ldr	r1, [r7, #0]
    b678:	4618      	mov	r0, r3
    b67a:	4b1a      	ldr	r3, [pc, #104]	; (b6e4 <_i2c_m_async_init+0x98>)
    b67c:	4798      	blx	r3
    b67e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    b680:	68fb      	ldr	r3, [r7, #12]
    b682:	2b00      	cmp	r3, #0
    b684:	d001      	beq.n	b68a <_i2c_m_async_init+0x3e>
		return init_status;
    b686:	68fb      	ldr	r3, [r7, #12]
    b688:	e024      	b.n	b6d4 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    b68a:	6879      	ldr	r1, [r7, #4]
    b68c:	6838      	ldr	r0, [r7, #0]
    b68e:	4b16      	ldr	r3, [pc, #88]	; (b6e8 <_i2c_m_async_init+0x9c>)
    b690:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    b692:	6838      	ldr	r0, [r7, #0]
    b694:	4b15      	ldr	r3, [pc, #84]	; (b6ec <_i2c_m_async_init+0xa0>)
    b696:	4798      	blx	r3
    b698:	4603      	mov	r3, r0
    b69a:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b69c:	2300      	movs	r3, #0
    b69e:	613b      	str	r3, [r7, #16]
    b6a0:	e014      	b.n	b6cc <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    b6a2:	7dfb      	ldrb	r3, [r7, #23]
    b6a4:	b21b      	sxth	r3, r3
    b6a6:	4618      	mov	r0, r3
    b6a8:	4b11      	ldr	r3, [pc, #68]	; (b6f0 <_i2c_m_async_init+0xa4>)
    b6aa:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    b6ac:	7dfb      	ldrb	r3, [r7, #23]
    b6ae:	b21b      	sxth	r3, r3
    b6b0:	4618      	mov	r0, r3
    b6b2:	4b10      	ldr	r3, [pc, #64]	; (b6f4 <_i2c_m_async_init+0xa8>)
    b6b4:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    b6b6:	7dfb      	ldrb	r3, [r7, #23]
    b6b8:	b21b      	sxth	r3, r3
    b6ba:	4618      	mov	r0, r3
    b6bc:	4b0e      	ldr	r3, [pc, #56]	; (b6f8 <_i2c_m_async_init+0xac>)
    b6be:	4798      	blx	r3
		irq++;
    b6c0:	7dfb      	ldrb	r3, [r7, #23]
    b6c2:	3301      	adds	r3, #1
    b6c4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b6c6:	693b      	ldr	r3, [r7, #16]
    b6c8:	3301      	adds	r3, #1
    b6ca:	613b      	str	r3, [r7, #16]
    b6cc:	693b      	ldr	r3, [r7, #16]
    b6ce:	2b03      	cmp	r3, #3
    b6d0:	d9e7      	bls.n	b6a2 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    b6d2:	2300      	movs	r3, #0
}
    b6d4:	4618      	mov	r0, r3
    b6d6:	3718      	adds	r7, #24
    b6d8:	46bd      	mov	sp, r7
    b6da:	bd80      	pop	{r7, pc}
    b6dc:	0001f770 	.word	0x0001f770
    b6e0:	00007d91 	.word	0x00007d91
    b6e4:	0000bcf5 	.word	0x0000bcf5
    b6e8:	0000b1dd 	.word	0x0000b1dd
    b6ec:	0000b629 	.word	0x0000b629
    b6f0:	0000a949 	.word	0x0000a949
    b6f4:	0000a98d 	.word	0x0000a98d
    b6f8:	0000a90d 	.word	0x0000a90d

0000b6fc <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    b6fc:	b590      	push	{r4, r7, lr}
    b6fe:	b087      	sub	sp, #28
    b700:	af00      	add	r7, sp, #0
    b702:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    b704:	687b      	ldr	r3, [r7, #4]
    b706:	691b      	ldr	r3, [r3, #16]
    b708:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    b70a:	687b      	ldr	r3, [r7, #4]
    b70c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b70e:	6978      	ldr	r0, [r7, #20]
    b710:	4b33      	ldr	r3, [pc, #204]	; (b7e0 <_sercom_i2c_send_address+0xe4>)
    b712:	4798      	blx	r3
    b714:	4603      	mov	r3, r0
    b716:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    b718:	687b      	ldr	r3, [r7, #4]
    b71a:	2b00      	cmp	r3, #0
    b71c:	bf14      	ite	ne
    b71e:	2301      	movne	r3, #1
    b720:	2300      	moveq	r3, #0
    b722:	b2db      	uxtb	r3, r3
    b724:	f240 42cc 	movw	r2, #1228	; 0x4cc
    b728:	492e      	ldr	r1, [pc, #184]	; (b7e4 <_sercom_i2c_send_address+0xe8>)
    b72a:	4618      	mov	r0, r3
    b72c:	4b2e      	ldr	r3, [pc, #184]	; (b7e8 <_sercom_i2c_send_address+0xec>)
    b72e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    b730:	693b      	ldr	r3, [r7, #16]
    b732:	685b      	ldr	r3, [r3, #4]
    b734:	2b01      	cmp	r3, #1
    b736:	d106      	bne.n	b746 <_sercom_i2c_send_address+0x4a>
    b738:	68fb      	ldr	r3, [r7, #12]
    b73a:	2b00      	cmp	r3, #0
    b73c:	d003      	beq.n	b746 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b73e:	6978      	ldr	r0, [r7, #20]
    b740:	4b2a      	ldr	r3, [pc, #168]	; (b7ec <_sercom_i2c_send_address+0xf0>)
    b742:	4798      	blx	r3
    b744:	e002      	b.n	b74c <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    b746:	6978      	ldr	r0, [r7, #20]
    b748:	4b29      	ldr	r3, [pc, #164]	; (b7f0 <_sercom_i2c_send_address+0xf4>)
    b74a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    b74c:	693b      	ldr	r3, [r7, #16]
    b74e:	881b      	ldrh	r3, [r3, #0]
    b750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b754:	2b00      	cmp	r3, #0
    b756:	d022      	beq.n	b79e <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    b758:	693b      	ldr	r3, [r7, #16]
    b75a:	885b      	ldrh	r3, [r3, #2]
    b75c:	b29b      	uxth	r3, r3
    b75e:	f003 0301 	and.w	r3, r3, #1
    b762:	2b00      	cmp	r3, #0
    b764:	d007      	beq.n	b776 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    b766:	693b      	ldr	r3, [r7, #16]
    b768:	885b      	ldrh	r3, [r3, #2]
    b76a:	b29b      	uxth	r3, r3
    b76c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    b770:	b29a      	uxth	r2, r3
    b772:	693b      	ldr	r3, [r7, #16]
    b774:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    b776:	693b      	ldr	r3, [r7, #16]
    b778:	881b      	ldrh	r3, [r3, #0]
    b77a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b77c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    b780:	401c      	ands	r4, r3
    b782:	6978      	ldr	r0, [r7, #20]
    b784:	4b1b      	ldr	r3, [pc, #108]	; (b7f4 <_sercom_i2c_send_address+0xf8>)
    b786:	4798      	blx	r3
    b788:	4603      	mov	r3, r0
    b78a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b78e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    b790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b794:	4619      	mov	r1, r3
    b796:	6978      	ldr	r0, [r7, #20]
    b798:	4b17      	ldr	r3, [pc, #92]	; (b7f8 <_sercom_i2c_send_address+0xfc>)
    b79a:	4798      	blx	r3
    b79c:	e01a      	b.n	b7d4 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    b79e:	693b      	ldr	r3, [r7, #16]
    b7a0:	881b      	ldrh	r3, [r3, #0]
    b7a2:	005b      	lsls	r3, r3, #1
    b7a4:	b2db      	uxtb	r3, r3
    b7a6:	693a      	ldr	r2, [r7, #16]
    b7a8:	8852      	ldrh	r2, [r2, #2]
    b7aa:	b292      	uxth	r2, r2
    b7ac:	f002 0201 	and.w	r2, r2, #1
    b7b0:	2a00      	cmp	r2, #0
    b7b2:	bf14      	ite	ne
    b7b4:	2201      	movne	r2, #1
    b7b6:	2200      	moveq	r2, #0
    b7b8:	b2d2      	uxtb	r2, r2
    b7ba:	4313      	orrs	r3, r2
    b7bc:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b7be:	6978      	ldr	r0, [r7, #20]
    b7c0:	4b0c      	ldr	r3, [pc, #48]	; (b7f4 <_sercom_i2c_send_address+0xf8>)
    b7c2:	4798      	blx	r3
    b7c4:	4603      	mov	r3, r0
    b7c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    b7ca:	4323      	orrs	r3, r4
    b7cc:	4619      	mov	r1, r3
    b7ce:	6978      	ldr	r0, [r7, #20]
    b7d0:	4b09      	ldr	r3, [pc, #36]	; (b7f8 <_sercom_i2c_send_address+0xfc>)
    b7d2:	4798      	blx	r3
	}

	return ERR_NONE;
    b7d4:	2300      	movs	r3, #0
}
    b7d6:	4618      	mov	r0, r3
    b7d8:	371c      	adds	r7, #28
    b7da:	46bd      	mov	sp, r7
    b7dc:	bd90      	pop	{r4, r7, pc}
    b7de:	bf00      	nop
    b7e0:	0000acfd 	.word	0x0000acfd
    b7e4:	0001f770 	.word	0x0001f770
    b7e8:	00007d91 	.word	0x00007d91
    b7ec:	0000aead 	.word	0x0000aead
    b7f0:	0000aed5 	.word	0x0000aed5
    b7f4:	0000b015 	.word	0x0000b015
    b7f8:	0000aff1 	.word	0x0000aff1

0000b7fc <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    b7fc:	b580      	push	{r7, lr}
    b7fe:	b084      	sub	sp, #16
    b800:	af00      	add	r7, sp, #0
    b802:	6078      	str	r0, [r7, #4]
    b804:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    b806:	687b      	ldr	r3, [r7, #4]
    b808:	2b00      	cmp	r3, #0
    b80a:	bf14      	ite	ne
    b80c:	2301      	movne	r3, #1
    b80e:	2300      	moveq	r3, #0
    b810:	b2db      	uxtb	r3, r3
    b812:	f240 42f4 	movw	r2, #1268	; 0x4f4
    b816:	492a      	ldr	r1, [pc, #168]	; (b8c0 <_i2c_m_async_transfer+0xc4>)
    b818:	4618      	mov	r0, r3
    b81a:	4b2a      	ldr	r3, [pc, #168]	; (b8c4 <_i2c_m_async_transfer+0xc8>)
    b81c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b81e:	687b      	ldr	r3, [r7, #4]
    b820:	691b      	ldr	r3, [r3, #16]
    b822:	2b00      	cmp	r3, #0
    b824:	bf14      	ite	ne
    b826:	2301      	movne	r3, #1
    b828:	2300      	moveq	r3, #0
    b82a:	b2db      	uxtb	r3, r3
    b82c:	f240 42f5 	movw	r2, #1269	; 0x4f5
    b830:	4923      	ldr	r1, [pc, #140]	; (b8c0 <_i2c_m_async_transfer+0xc4>)
    b832:	4618      	mov	r0, r3
    b834:	4b23      	ldr	r3, [pc, #140]	; (b8c4 <_i2c_m_async_transfer+0xc8>)
    b836:	4798      	blx	r3
	ASSERT(msg);
    b838:	683b      	ldr	r3, [r7, #0]
    b83a:	2b00      	cmp	r3, #0
    b83c:	bf14      	ite	ne
    b83e:	2301      	movne	r3, #1
    b840:	2300      	moveq	r3, #0
    b842:	b2db      	uxtb	r3, r3
    b844:	f240 42f6 	movw	r2, #1270	; 0x4f6
    b848:	491d      	ldr	r1, [pc, #116]	; (b8c0 <_i2c_m_async_transfer+0xc4>)
    b84a:	4618      	mov	r0, r3
    b84c:	4b1d      	ldr	r3, [pc, #116]	; (b8c4 <_i2c_m_async_transfer+0xc8>)
    b84e:	4798      	blx	r3

	if (msg->len == 0) {
    b850:	683b      	ldr	r3, [r7, #0]
    b852:	685b      	ldr	r3, [r3, #4]
    b854:	2b00      	cmp	r3, #0
    b856:	d101      	bne.n	b85c <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    b858:	2300      	movs	r3, #0
    b85a:	e02d      	b.n	b8b8 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    b85c:	687b      	ldr	r3, [r7, #4]
    b85e:	885b      	ldrh	r3, [r3, #2]
    b860:	b29b      	uxth	r3, r3
    b862:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b866:	2b00      	cmp	r3, #0
    b868:	d002      	beq.n	b870 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    b86a:	f06f 0303 	mvn.w	r3, #3
    b86e:	e023      	b.n	b8b8 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    b870:	683b      	ldr	r3, [r7, #0]
    b872:	885b      	ldrh	r3, [r3, #2]
    b874:	b29b      	uxth	r3, r3
    b876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b87a:	b29a      	uxth	r2, r3
    b87c:	683b      	ldr	r3, [r7, #0]
    b87e:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    b880:	687b      	ldr	r3, [r7, #4]
    b882:	683a      	ldr	r2, [r7, #0]
    b884:	ca07      	ldmia	r2, {r0, r1, r2}
    b886:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    b88a:	687b      	ldr	r3, [r7, #4]
    b88c:	691b      	ldr	r3, [r3, #16]
    b88e:	4618      	mov	r0, r3
    b890:	4b0d      	ldr	r3, [pc, #52]	; (b8c8 <_i2c_m_async_transfer+0xcc>)
    b892:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    b894:	6878      	ldr	r0, [r7, #4]
    b896:	4b0d      	ldr	r3, [pc, #52]	; (b8cc <_i2c_m_async_transfer+0xd0>)
    b898:	4798      	blx	r3
    b89a:	60f8      	str	r0, [r7, #12]

	if (ret) {
    b89c:	68fb      	ldr	r3, [r7, #12]
    b89e:	2b00      	cmp	r3, #0
    b8a0:	d009      	beq.n	b8b6 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b8a2:	687b      	ldr	r3, [r7, #4]
    b8a4:	885b      	ldrh	r3, [r3, #2]
    b8a6:	b29b      	uxth	r3, r3
    b8a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b8ac:	b29a      	uxth	r2, r3
    b8ae:	687b      	ldr	r3, [r7, #4]
    b8b0:	805a      	strh	r2, [r3, #2]

		return ret;
    b8b2:	68fb      	ldr	r3, [r7, #12]
    b8b4:	e000      	b.n	b8b8 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    b8b6:	2300      	movs	r3, #0
}
    b8b8:	4618      	mov	r0, r3
    b8ba:	3710      	adds	r7, #16
    b8bc:	46bd      	mov	sp, r7
    b8be:	bd80      	pop	{r7, pc}
    b8c0:	0001f770 	.word	0x0001f770
    b8c4:	00007d91 	.word	0x00007d91
    b8c8:	0000ae5d 	.word	0x0000ae5d
    b8cc:	0000b6fd 	.word	0x0000b6fd

0000b8d0 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    b8d0:	b480      	push	{r7}
    b8d2:	b085      	sub	sp, #20
    b8d4:	af00      	add	r7, sp, #0
    b8d6:	60f8      	str	r0, [r7, #12]
    b8d8:	460b      	mov	r3, r1
    b8da:	607a      	str	r2, [r7, #4]
    b8dc:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    b8de:	7afb      	ldrb	r3, [r7, #11]
    b8e0:	2b01      	cmp	r3, #1
    b8e2:	d008      	beq.n	b8f6 <_i2c_m_async_register_callback+0x26>
    b8e4:	2b02      	cmp	r3, #2
    b8e6:	d00a      	beq.n	b8fe <_i2c_m_async_register_callback+0x2e>
    b8e8:	2b00      	cmp	r3, #0
    b8ea:	d000      	beq.n	b8ee <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    b8ec:	e00b      	b.n	b906 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    b8ee:	68fb      	ldr	r3, [r7, #12]
    b8f0:	687a      	ldr	r2, [r7, #4]
    b8f2:	615a      	str	r2, [r3, #20]
		break;
    b8f4:	e007      	b.n	b906 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    b8f6:	68fb      	ldr	r3, [r7, #12]
    b8f8:	687a      	ldr	r2, [r7, #4]
    b8fa:	619a      	str	r2, [r3, #24]
		break;
    b8fc:	e003      	b.n	b906 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    b8fe:	68fb      	ldr	r3, [r7, #12]
    b900:	687a      	ldr	r2, [r7, #4]
    b902:	61da      	str	r2, [r3, #28]
		break;
    b904:	bf00      	nop
	}

	return ERR_NONE;
    b906:	2300      	movs	r3, #0
}
    b908:	4618      	mov	r0, r3
    b90a:	3714      	adds	r7, #20
    b90c:	46bd      	mov	sp, r7
    b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b912:	4770      	bx	lr

0000b914 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    b914:	b580      	push	{r7, lr}
    b916:	b082      	sub	sp, #8
    b918:	af00      	add	r7, sp, #0
    b91a:	6078      	str	r0, [r7, #4]
    b91c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    b91e:	687b      	ldr	r3, [r7, #4]
    b920:	2b00      	cmp	r3, #0
    b922:	bf14      	ite	ne
    b924:	2301      	movne	r3, #1
    b926:	2300      	moveq	r3, #0
    b928:	b2db      	uxtb	r3, r3
    b92a:	f240 5254 	movw	r2, #1364	; 0x554
    b92e:	4908      	ldr	r1, [pc, #32]	; (b950 <_i2c_m_sync_init+0x3c>)
    b930:	4618      	mov	r0, r3
    b932:	4b08      	ldr	r3, [pc, #32]	; (b954 <_i2c_m_sync_init+0x40>)
    b934:	4798      	blx	r3

	i2c_dev->hw = hw;
    b936:	687b      	ldr	r3, [r7, #4]
    b938:	683a      	ldr	r2, [r7, #0]
    b93a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    b93c:	687b      	ldr	r3, [r7, #4]
    b93e:	6839      	ldr	r1, [r7, #0]
    b940:	4618      	mov	r0, r3
    b942:	4b05      	ldr	r3, [pc, #20]	; (b958 <_i2c_m_sync_init+0x44>)
    b944:	4798      	blx	r3
    b946:	4603      	mov	r3, r0
}
    b948:	4618      	mov	r0, r3
    b94a:	3708      	adds	r7, #8
    b94c:	46bd      	mov	sp, r7
    b94e:	bd80      	pop	{r7, pc}
    b950:	0001f770 	.word	0x0001f770
    b954:	00007d91 	.word	0x00007d91
    b958:	0000bcf5 	.word	0x0000bcf5

0000b95c <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    b95c:	b580      	push	{r7, lr}
    b95e:	b082      	sub	sp, #8
    b960:	af00      	add	r7, sp, #0
    b962:	6078      	str	r0, [r7, #4]
    b964:	460b      	mov	r3, r1
    b966:	70fb      	strb	r3, [r7, #3]
    b968:	4613      	mov	r3, r2
    b96a:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    b96c:	78fb      	ldrb	r3, [r7, #3]
    b96e:	2b01      	cmp	r3, #1
    b970:	d002      	beq.n	b978 <_i2c_m_async_set_irq_state+0x1c>
    b972:	78fb      	ldrb	r3, [r7, #3]
    b974:	2b02      	cmp	r3, #2
    b976:	d10e      	bne.n	b996 <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    b978:	687b      	ldr	r3, [r7, #4]
    b97a:	691b      	ldr	r3, [r3, #16]
    b97c:	78ba      	ldrb	r2, [r7, #2]
    b97e:	4611      	mov	r1, r2
    b980:	4618      	mov	r0, r3
    b982:	4b0c      	ldr	r3, [pc, #48]	; (b9b4 <_i2c_m_async_set_irq_state+0x58>)
    b984:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    b986:	687b      	ldr	r3, [r7, #4]
    b988:	691b      	ldr	r3, [r3, #16]
    b98a:	78ba      	ldrb	r2, [r7, #2]
    b98c:	4611      	mov	r1, r2
    b98e:	4618      	mov	r0, r3
    b990:	4b09      	ldr	r3, [pc, #36]	; (b9b8 <_i2c_m_async_set_irq_state+0x5c>)
    b992:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    b994:	e009      	b.n	b9aa <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    b996:	78fb      	ldrb	r3, [r7, #3]
    b998:	2b00      	cmp	r3, #0
    b99a:	d106      	bne.n	b9aa <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    b99c:	687b      	ldr	r3, [r7, #4]
    b99e:	691b      	ldr	r3, [r3, #16]
    b9a0:	78ba      	ldrb	r2, [r7, #2]
    b9a2:	4611      	mov	r1, r2
    b9a4:	4618      	mov	r0, r3
    b9a6:	4b05      	ldr	r3, [pc, #20]	; (b9bc <_i2c_m_async_set_irq_state+0x60>)
    b9a8:	4798      	blx	r3
}
    b9aa:	bf00      	nop
    b9ac:	3708      	adds	r7, #8
    b9ae:	46bd      	mov	sp, r7
    b9b0:	bd80      	pop	{r7, pc}
    b9b2:	bf00      	nop
    b9b4:	0000ab5f 	.word	0x0000ab5f
    b9b8:	0000ab2d 	.word	0x0000ab2d
    b9bc:	0000ab91 	.word	0x0000ab91

0000b9c0 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    b9c0:	b580      	push	{r7, lr}
    b9c2:	b084      	sub	sp, #16
    b9c4:	af00      	add	r7, sp, #0
    b9c6:	6078      	str	r0, [r7, #4]
    b9c8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    b9ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b9ce:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    b9d0:	687b      	ldr	r3, [r7, #4]
    b9d2:	691b      	ldr	r3, [r3, #16]
    b9d4:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    b9d6:	68b8      	ldr	r0, [r7, #8]
    b9d8:	4b0f      	ldr	r3, [pc, #60]	; (ba18 <_sercom_i2c_sync_wait_bus+0x58>)
    b9da:	4798      	blx	r3
    b9dc:	4603      	mov	r3, r0
    b9de:	461a      	mov	r2, r3
    b9e0:	683b      	ldr	r3, [r7, #0]
    b9e2:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    b9e4:	68fb      	ldr	r3, [r7, #12]
    b9e6:	1e5a      	subs	r2, r3, #1
    b9e8:	60fa      	str	r2, [r7, #12]
    b9ea:	2b00      	cmp	r3, #0
    b9ec:	d102      	bne.n	b9f4 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    b9ee:	f06f 0304 	mvn.w	r3, #4
    b9f2:	e00c      	b.n	ba0e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    b9f4:	683b      	ldr	r3, [r7, #0]
    b9f6:	681b      	ldr	r3, [r3, #0]
    b9f8:	f003 0301 	and.w	r3, r3, #1
    b9fc:	2b00      	cmp	r3, #0
    b9fe:	d105      	bne.n	ba0c <_sercom_i2c_sync_wait_bus+0x4c>
    ba00:	683b      	ldr	r3, [r7, #0]
    ba02:	681b      	ldr	r3, [r3, #0]
    ba04:	f003 0302 	and.w	r3, r3, #2
    ba08:	2b00      	cmp	r3, #0
    ba0a:	d0e4      	beq.n	b9d6 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    ba0c:	2300      	movs	r3, #0
}
    ba0e:	4618      	mov	r0, r3
    ba10:	3710      	adds	r7, #16
    ba12:	46bd      	mov	sp, r7
    ba14:	bd80      	pop	{r7, pc}
    ba16:	bf00      	nop
    ba18:	0000aa95 	.word	0x0000aa95

0000ba1c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    ba1c:	b590      	push	{r4, r7, lr}
    ba1e:	b087      	sub	sp, #28
    ba20:	af00      	add	r7, sp, #0
    ba22:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    ba24:	687b      	ldr	r3, [r7, #4]
    ba26:	691b      	ldr	r3, [r3, #16]
    ba28:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    ba2a:	687b      	ldr	r3, [r7, #4]
    ba2c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    ba2e:	6978      	ldr	r0, [r7, #20]
    ba30:	4b39      	ldr	r3, [pc, #228]	; (bb18 <_sercom_i2c_sync_send_address+0xfc>)
    ba32:	4798      	blx	r3
    ba34:	4603      	mov	r3, r0
    ba36:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    ba38:	687b      	ldr	r3, [r7, #4]
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	bf14      	ite	ne
    ba3e:	2301      	movne	r3, #1
    ba40:	2300      	moveq	r3, #0
    ba42:	b2db      	uxtb	r3, r3
    ba44:	f240 52e1 	movw	r2, #1505	; 0x5e1
    ba48:	4934      	ldr	r1, [pc, #208]	; (bb1c <_sercom_i2c_sync_send_address+0x100>)
    ba4a:	4618      	mov	r0, r3
    ba4c:	4b34      	ldr	r3, [pc, #208]	; (bb20 <_sercom_i2c_sync_send_address+0x104>)
    ba4e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    ba50:	693b      	ldr	r3, [r7, #16]
    ba52:	685b      	ldr	r3, [r3, #4]
    ba54:	2b01      	cmp	r3, #1
    ba56:	d106      	bne.n	ba66 <_sercom_i2c_sync_send_address+0x4a>
    ba58:	68fb      	ldr	r3, [r7, #12]
    ba5a:	2b00      	cmp	r3, #0
    ba5c:	d003      	beq.n	ba66 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    ba5e:	6978      	ldr	r0, [r7, #20]
    ba60:	4b30      	ldr	r3, [pc, #192]	; (bb24 <_sercom_i2c_sync_send_address+0x108>)
    ba62:	4798      	blx	r3
    ba64:	e002      	b.n	ba6c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    ba66:	6978      	ldr	r0, [r7, #20]
    ba68:	4b2f      	ldr	r3, [pc, #188]	; (bb28 <_sercom_i2c_sync_send_address+0x10c>)
    ba6a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    ba6c:	693b      	ldr	r3, [r7, #16]
    ba6e:	881b      	ldrh	r3, [r3, #0]
    ba70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ba74:	2b00      	cmp	r3, #0
    ba76:	d022      	beq.n	babe <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    ba78:	693b      	ldr	r3, [r7, #16]
    ba7a:	885b      	ldrh	r3, [r3, #2]
    ba7c:	b29b      	uxth	r3, r3
    ba7e:	f003 0301 	and.w	r3, r3, #1
    ba82:	2b00      	cmp	r3, #0
    ba84:	d007      	beq.n	ba96 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    ba86:	693b      	ldr	r3, [r7, #16]
    ba88:	885b      	ldrh	r3, [r3, #2]
    ba8a:	b29b      	uxth	r3, r3
    ba8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ba90:	b29a      	uxth	r2, r3
    ba92:	693b      	ldr	r3, [r7, #16]
    ba94:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    ba96:	693b      	ldr	r3, [r7, #16]
    ba98:	881b      	ldrh	r3, [r3, #0]
    ba9a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    ba9c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    baa0:	401c      	ands	r4, r3
    baa2:	6978      	ldr	r0, [r7, #20]
    baa4:	4b21      	ldr	r3, [pc, #132]	; (bb2c <_sercom_i2c_sync_send_address+0x110>)
    baa6:	4798      	blx	r3
    baa8:	4603      	mov	r3, r0
    baaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    baae:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    bab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    bab4:	4619      	mov	r1, r3
    bab6:	6978      	ldr	r0, [r7, #20]
    bab8:	4b1d      	ldr	r3, [pc, #116]	; (bb30 <_sercom_i2c_sync_send_address+0x114>)
    baba:	4798      	blx	r3
    babc:	e01a      	b.n	baf4 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    babe:	693b      	ldr	r3, [r7, #16]
    bac0:	881b      	ldrh	r3, [r3, #0]
    bac2:	005b      	lsls	r3, r3, #1
    bac4:	b2db      	uxtb	r3, r3
    bac6:	693a      	ldr	r2, [r7, #16]
    bac8:	8852      	ldrh	r2, [r2, #2]
    baca:	b292      	uxth	r2, r2
    bacc:	f002 0201 	and.w	r2, r2, #1
    bad0:	2a00      	cmp	r2, #0
    bad2:	bf14      	ite	ne
    bad4:	2201      	movne	r2, #1
    bad6:	2200      	moveq	r2, #0
    bad8:	b2d2      	uxtb	r2, r2
    bada:	4313      	orrs	r3, r2
    badc:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    bade:	6978      	ldr	r0, [r7, #20]
    bae0:	4b12      	ldr	r3, [pc, #72]	; (bb2c <_sercom_i2c_sync_send_address+0x110>)
    bae2:	4798      	blx	r3
    bae4:	4603      	mov	r3, r0
    bae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    baea:	4323      	orrs	r3, r4
    baec:	4619      	mov	r1, r3
    baee:	6978      	ldr	r0, [r7, #20]
    baf0:	4b0f      	ldr	r3, [pc, #60]	; (bb30 <_sercom_i2c_sync_send_address+0x114>)
    baf2:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    baf4:	f107 0308 	add.w	r3, r7, #8
    baf8:	4619      	mov	r1, r3
    bafa:	6878      	ldr	r0, [r7, #4]
    bafc:	4b0d      	ldr	r3, [pc, #52]	; (bb34 <_sercom_i2c_sync_send_address+0x118>)
    bafe:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    bb00:	68bb      	ldr	r3, [r7, #8]
    bb02:	693a      	ldr	r2, [r7, #16]
    bb04:	4619      	mov	r1, r3
    bb06:	6978      	ldr	r0, [r7, #20]
    bb08:	4b0b      	ldr	r3, [pc, #44]	; (bb38 <_sercom_i2c_sync_send_address+0x11c>)
    bb0a:	4798      	blx	r3
    bb0c:	4603      	mov	r3, r0
}
    bb0e:	4618      	mov	r0, r3
    bb10:	371c      	adds	r7, #28
    bb12:	46bd      	mov	sp, r7
    bb14:	bd90      	pop	{r4, r7, pc}
    bb16:	bf00      	nop
    bb18:	0000acfd 	.word	0x0000acfd
    bb1c:	0001f770 	.word	0x0001f770
    bb20:	00007d91 	.word	0x00007d91
    bb24:	0000aead 	.word	0x0000aead
    bb28:	0000aed5 	.word	0x0000aed5
    bb2c:	0000b015 	.word	0x0000b015
    bb30:	0000aff1 	.word	0x0000aff1
    bb34:	0000b9c1 	.word	0x0000b9c1
    bb38:	0000b2b5 	.word	0x0000b2b5

0000bb3c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    bb3c:	b580      	push	{r7, lr}
    bb3e:	b086      	sub	sp, #24
    bb40:	af00      	add	r7, sp, #0
    bb42:	6078      	str	r0, [r7, #4]
    bb44:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    bb46:	687b      	ldr	r3, [r7, #4]
    bb48:	691b      	ldr	r3, [r3, #16]
    bb4a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    bb4c:	687b      	ldr	r3, [r7, #4]
    bb4e:	2b00      	cmp	r3, #0
    bb50:	bf14      	ite	ne
    bb52:	2301      	movne	r3, #1
    bb54:	2300      	moveq	r3, #0
    bb56:	b2db      	uxtb	r3, r3
    bb58:	f240 620c 	movw	r2, #1548	; 0x60c
    bb5c:	493b      	ldr	r1, [pc, #236]	; (bc4c <_i2c_m_sync_transfer+0x110>)
    bb5e:	4618      	mov	r0, r3
    bb60:	4b3b      	ldr	r3, [pc, #236]	; (bc50 <_i2c_m_sync_transfer+0x114>)
    bb62:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    bb64:	687b      	ldr	r3, [r7, #4]
    bb66:	691b      	ldr	r3, [r3, #16]
    bb68:	2b00      	cmp	r3, #0
    bb6a:	bf14      	ite	ne
    bb6c:	2301      	movne	r3, #1
    bb6e:	2300      	moveq	r3, #0
    bb70:	b2db      	uxtb	r3, r3
    bb72:	f240 620d 	movw	r2, #1549	; 0x60d
    bb76:	4935      	ldr	r1, [pc, #212]	; (bc4c <_i2c_m_sync_transfer+0x110>)
    bb78:	4618      	mov	r0, r3
    bb7a:	4b35      	ldr	r3, [pc, #212]	; (bc50 <_i2c_m_sync_transfer+0x114>)
    bb7c:	4798      	blx	r3
	ASSERT(msg);
    bb7e:	683b      	ldr	r3, [r7, #0]
    bb80:	2b00      	cmp	r3, #0
    bb82:	bf14      	ite	ne
    bb84:	2301      	movne	r3, #1
    bb86:	2300      	moveq	r3, #0
    bb88:	b2db      	uxtb	r3, r3
    bb8a:	f240 620e 	movw	r2, #1550	; 0x60e
    bb8e:	492f      	ldr	r1, [pc, #188]	; (bc4c <_i2c_m_sync_transfer+0x110>)
    bb90:	4618      	mov	r0, r3
    bb92:	4b2f      	ldr	r3, [pc, #188]	; (bc50 <_i2c_m_sync_transfer+0x114>)
    bb94:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    bb96:	687b      	ldr	r3, [r7, #4]
    bb98:	885b      	ldrh	r3, [r3, #2]
    bb9a:	b29b      	uxth	r3, r3
    bb9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    bba0:	2b00      	cmp	r3, #0
    bba2:	d002      	beq.n	bbaa <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    bba4:	f06f 0305 	mvn.w	r3, #5
    bba8:	e04c      	b.n	bc44 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    bbaa:	683b      	ldr	r3, [r7, #0]
    bbac:	885b      	ldrh	r3, [r3, #2]
    bbae:	b29b      	uxth	r3, r3
    bbb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bbb4:	b29a      	uxth	r2, r3
    bbb6:	683b      	ldr	r3, [r7, #0]
    bbb8:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    bbba:	687b      	ldr	r3, [r7, #4]
    bbbc:	683a      	ldr	r2, [r7, #0]
    bbbe:	ca07      	ldmia	r2, {r0, r1, r2}
    bbc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    bbc4:	6938      	ldr	r0, [r7, #16]
    bbc6:	4b23      	ldr	r3, [pc, #140]	; (bc54 <_i2c_m_sync_transfer+0x118>)
    bbc8:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    bbca:	6878      	ldr	r0, [r7, #4]
    bbcc:	4b22      	ldr	r3, [pc, #136]	; (bc58 <_i2c_m_sync_transfer+0x11c>)
    bbce:	4798      	blx	r3
    bbd0:	6178      	str	r0, [r7, #20]

	if (ret) {
    bbd2:	697b      	ldr	r3, [r7, #20]
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	d02d      	beq.n	bc34 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    bbd8:	687b      	ldr	r3, [r7, #4]
    bbda:	885b      	ldrh	r3, [r3, #2]
    bbdc:	b29b      	uxth	r3, r3
    bbde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bbe2:	b29a      	uxth	r2, r3
    bbe4:	687b      	ldr	r3, [r7, #4]
    bbe6:	805a      	strh	r2, [r3, #2]

		return ret;
    bbe8:	697b      	ldr	r3, [r7, #20]
    bbea:	e02b      	b.n	bc44 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    bbec:	f107 030c 	add.w	r3, r7, #12
    bbf0:	4619      	mov	r1, r3
    bbf2:	6878      	ldr	r0, [r7, #4]
    bbf4:	4b19      	ldr	r3, [pc, #100]	; (bc5c <_i2c_m_sync_transfer+0x120>)
    bbf6:	4798      	blx	r3
    bbf8:	6178      	str	r0, [r7, #20]

		if (ret) {
    bbfa:	697b      	ldr	r3, [r7, #20]
    bbfc:	2b00      	cmp	r3, #0
    bbfe:	d012      	beq.n	bc26 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    bc00:	683b      	ldr	r3, [r7, #0]
    bc02:	885b      	ldrh	r3, [r3, #2]
    bc04:	b29b      	uxth	r3, r3
    bc06:	b21b      	sxth	r3, r3
    bc08:	2b00      	cmp	r3, #0
    bc0a:	da02      	bge.n	bc12 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    bc0c:	6938      	ldr	r0, [r7, #16]
    bc0e:	4b14      	ldr	r3, [pc, #80]	; (bc60 <_i2c_m_sync_transfer+0x124>)
    bc10:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    bc12:	687b      	ldr	r3, [r7, #4]
    bc14:	885b      	ldrh	r3, [r3, #2]
    bc16:	b29b      	uxth	r3, r3
    bc18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bc1c:	b29a      	uxth	r2, r3
    bc1e:	687b      	ldr	r3, [r7, #4]
    bc20:	805a      	strh	r2, [r3, #2]

			return ret;
    bc22:	697b      	ldr	r3, [r7, #20]
    bc24:	e00e      	b.n	bc44 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    bc26:	68fb      	ldr	r3, [r7, #12]
    bc28:	687a      	ldr	r2, [r7, #4]
    bc2a:	4619      	mov	r1, r3
    bc2c:	6938      	ldr	r0, [r7, #16]
    bc2e:	4b0d      	ldr	r3, [pc, #52]	; (bc64 <_i2c_m_sync_transfer+0x128>)
    bc30:	4798      	blx	r3
    bc32:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    bc34:	687b      	ldr	r3, [r7, #4]
    bc36:	885b      	ldrh	r3, [r3, #2]
    bc38:	b29b      	uxth	r3, r3
    bc3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    bc3e:	2b00      	cmp	r3, #0
    bc40:	d1d4      	bne.n	bbec <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    bc42:	697b      	ldr	r3, [r7, #20]
}
    bc44:	4618      	mov	r0, r3
    bc46:	3718      	adds	r7, #24
    bc48:	46bd      	mov	sp, r7
    bc4a:	bd80      	pop	{r7, pc}
    bc4c:	0001f770 	.word	0x0001f770
    bc50:	00007d91 	.word	0x00007d91
    bc54:	0000ae5d 	.word	0x0000ae5d
    bc58:	0000ba1d 	.word	0x0000ba1d
    bc5c:	0000b9c1 	.word	0x0000b9c1
    bc60:	0000b299 	.word	0x0000b299
    bc64:	0000b2b5 	.word	0x0000b2b5

0000bc68 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    bc68:	b580      	push	{r7, lr}
    bc6a:	b084      	sub	sp, #16
    bc6c:	af00      	add	r7, sp, #0
    bc6e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    bc70:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bc74:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    bc76:	2304      	movs	r3, #4
    bc78:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    bc7a:	687b      	ldr	r3, [r7, #4]
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	bf14      	ite	ne
    bc80:	2301      	movne	r3, #1
    bc82:	2300      	moveq	r3, #0
    bc84:	b2db      	uxtb	r3, r3
    bc86:	f240 6241 	movw	r2, #1601	; 0x641
    bc8a:	4915      	ldr	r1, [pc, #84]	; (bce0 <_i2c_m_enable_implementation+0x78>)
    bc8c:	4618      	mov	r0, r3
    bc8e:	4b15      	ldr	r3, [pc, #84]	; (bce4 <_i2c_m_enable_implementation+0x7c>)
    bc90:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    bc92:	6878      	ldr	r0, [r7, #4]
    bc94:	4b14      	ldr	r3, [pc, #80]	; (bce8 <_i2c_m_enable_implementation+0x80>)
    bc96:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    bc98:	e016      	b.n	bcc8 <_i2c_m_enable_implementation+0x60>
		timeout--;
    bc9a:	68fb      	ldr	r3, [r7, #12]
    bc9c:	3b01      	subs	r3, #1
    bc9e:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    bca0:	68fb      	ldr	r3, [r7, #12]
    bca2:	2b00      	cmp	r3, #0
    bca4:	dc10      	bgt.n	bcc8 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    bca6:	68bb      	ldr	r3, [r7, #8]
    bca8:	3b01      	subs	r3, #1
    bcaa:	60bb      	str	r3, [r7, #8]
    bcac:	68bb      	ldr	r3, [r7, #8]
    bcae:	2b00      	cmp	r3, #0
    bcb0:	d007      	beq.n	bcc2 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    bcb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bcb6:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    bcb8:	2110      	movs	r1, #16
    bcba:	6878      	ldr	r0, [r7, #4]
    bcbc:	4b0b      	ldr	r3, [pc, #44]	; (bcec <_i2c_m_enable_implementation+0x84>)
    bcbe:	4798      	blx	r3
    bcc0:	e002      	b.n	bcc8 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    bcc2:	f06f 0305 	mvn.w	r3, #5
    bcc6:	e006      	b.n	bcd6 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    bcc8:	6878      	ldr	r0, [r7, #4]
    bcca:	4b09      	ldr	r3, [pc, #36]	; (bcf0 <_i2c_m_enable_implementation+0x88>)
    bccc:	4798      	blx	r3
    bcce:	4603      	mov	r3, r0
    bcd0:	2b01      	cmp	r3, #1
    bcd2:	d1e2      	bne.n	bc9a <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    bcd4:	2300      	movs	r3, #0
}
    bcd6:	4618      	mov	r0, r3
    bcd8:	3710      	adds	r7, #16
    bcda:	46bd      	mov	sp, r7
    bcdc:	bd80      	pop	{r7, pc}
    bcde:	bf00      	nop
    bce0:	0001f770 	.word	0x0001f770
    bce4:	00007d91 	.word	0x00007d91
    bce8:	0000acad 	.word	0x0000acad
    bcec:	0000b159 	.word	0x0000b159
    bcf0:	0000b109 	.word	0x0000b109

0000bcf4 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    bcf4:	b580      	push	{r7, lr}
    bcf6:	b084      	sub	sp, #16
    bcf8:	af00      	add	r7, sp, #0
    bcfa:	6078      	str	r0, [r7, #4]
    bcfc:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    bcfe:	6838      	ldr	r0, [r7, #0]
    bd00:	4b42      	ldr	r3, [pc, #264]	; (be0c <_i2c_m_sync_init_impl+0x118>)
    bd02:	4798      	blx	r3
    bd04:	4603      	mov	r3, r0
    bd06:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    bd08:	2101      	movs	r1, #1
    bd0a:	6838      	ldr	r0, [r7, #0]
    bd0c:	4b40      	ldr	r3, [pc, #256]	; (be10 <_i2c_m_sync_init_impl+0x11c>)
    bd0e:	4798      	blx	r3
    bd10:	4603      	mov	r3, r0
    bd12:	f083 0301 	eor.w	r3, r3, #1
    bd16:	b2db      	uxtb	r3, r3
    bd18:	2b00      	cmp	r3, #0
    bd1a:	d020      	beq.n	bd5e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    bd1c:	7bfa      	ldrb	r2, [r7, #15]
    bd1e:	493d      	ldr	r1, [pc, #244]	; (be14 <_i2c_m_sync_init_impl+0x120>)
    bd20:	4613      	mov	r3, r2
    bd22:	005b      	lsls	r3, r3, #1
    bd24:	4413      	add	r3, r2
    bd26:	00db      	lsls	r3, r3, #3
    bd28:	440b      	add	r3, r1
    bd2a:	3304      	adds	r3, #4
    bd2c:	681b      	ldr	r3, [r3, #0]
    bd2e:	f003 031c 	and.w	r3, r3, #28
    bd32:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    bd34:	2102      	movs	r1, #2
    bd36:	6838      	ldr	r0, [r7, #0]
    bd38:	4b37      	ldr	r3, [pc, #220]	; (be18 <_i2c_m_sync_init_impl+0x124>)
    bd3a:	4798      	blx	r3
    bd3c:	4603      	mov	r3, r0
    bd3e:	2b00      	cmp	r3, #0
    bd40:	d006      	beq.n	bd50 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    bd42:	6838      	ldr	r0, [r7, #0]
    bd44:	4b35      	ldr	r3, [pc, #212]	; (be1c <_i2c_m_sync_init_impl+0x128>)
    bd46:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    bd48:	2102      	movs	r1, #2
    bd4a:	6838      	ldr	r0, [r7, #0]
    bd4c:	4b34      	ldr	r3, [pc, #208]	; (be20 <_i2c_m_sync_init_impl+0x12c>)
    bd4e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    bd50:	68bb      	ldr	r3, [r7, #8]
    bd52:	f043 0301 	orr.w	r3, r3, #1
    bd56:	4619      	mov	r1, r3
    bd58:	6838      	ldr	r0, [r7, #0]
    bd5a:	4b32      	ldr	r3, [pc, #200]	; (be24 <_i2c_m_sync_init_impl+0x130>)
    bd5c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    bd5e:	2101      	movs	r1, #1
    bd60:	6838      	ldr	r0, [r7, #0]
    bd62:	4b2f      	ldr	r3, [pc, #188]	; (be20 <_i2c_m_sync_init_impl+0x12c>)
    bd64:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    bd66:	7bfa      	ldrb	r2, [r7, #15]
    bd68:	492a      	ldr	r1, [pc, #168]	; (be14 <_i2c_m_sync_init_impl+0x120>)
    bd6a:	4613      	mov	r3, r2
    bd6c:	005b      	lsls	r3, r3, #1
    bd6e:	4413      	add	r3, r2
    bd70:	00db      	lsls	r3, r3, #3
    bd72:	440b      	add	r3, r1
    bd74:	3304      	adds	r3, #4
    bd76:	681b      	ldr	r3, [r3, #0]
    bd78:	4619      	mov	r1, r3
    bd7a:	6838      	ldr	r0, [r7, #0]
    bd7c:	4b29      	ldr	r3, [pc, #164]	; (be24 <_i2c_m_sync_init_impl+0x130>)
    bd7e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    bd80:	7bfa      	ldrb	r2, [r7, #15]
    bd82:	4924      	ldr	r1, [pc, #144]	; (be14 <_i2c_m_sync_init_impl+0x120>)
    bd84:	4613      	mov	r3, r2
    bd86:	005b      	lsls	r3, r3, #1
    bd88:	4413      	add	r3, r2
    bd8a:	00db      	lsls	r3, r3, #3
    bd8c:	440b      	add	r3, r1
    bd8e:	3308      	adds	r3, #8
    bd90:	681b      	ldr	r3, [r3, #0]
    bd92:	4619      	mov	r1, r3
    bd94:	6838      	ldr	r0, [r7, #0]
    bd96:	4b24      	ldr	r3, [pc, #144]	; (be28 <_i2c_m_sync_init_impl+0x134>)
    bd98:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    bd9a:	7bfa      	ldrb	r2, [r7, #15]
    bd9c:	491d      	ldr	r1, [pc, #116]	; (be14 <_i2c_m_sync_init_impl+0x120>)
    bd9e:	4613      	mov	r3, r2
    bda0:	005b      	lsls	r3, r3, #1
    bda2:	4413      	add	r3, r2
    bda4:	00db      	lsls	r3, r3, #3
    bda6:	440b      	add	r3, r1
    bda8:	330c      	adds	r3, #12
    bdaa:	681b      	ldr	r3, [r3, #0]
    bdac:	4619      	mov	r1, r3
    bdae:	6838      	ldr	r0, [r7, #0]
    bdb0:	4b1e      	ldr	r3, [pc, #120]	; (be2c <_i2c_m_sync_init_impl+0x138>)
    bdb2:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    bdb4:	7bfa      	ldrb	r2, [r7, #15]
    bdb6:	4917      	ldr	r1, [pc, #92]	; (be14 <_i2c_m_sync_init_impl+0x120>)
    bdb8:	4613      	mov	r3, r2
    bdba:	005b      	lsls	r3, r3, #1
    bdbc:	4413      	add	r3, r2
    bdbe:	00db      	lsls	r3, r3, #3
    bdc0:	440b      	add	r3, r1
    bdc2:	3304      	adds	r3, #4
    bdc4:	681b      	ldr	r3, [r3, #0]
    bdc6:	0e1b      	lsrs	r3, r3, #24
    bdc8:	b29b      	uxth	r3, r3
    bdca:	f003 0303 	and.w	r3, r3, #3
    bdce:	b29a      	uxth	r2, r3
    bdd0:	687b      	ldr	r3, [r7, #4]
    bdd2:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    bdd4:	687b      	ldr	r3, [r7, #4]
    bdd6:	899b      	ldrh	r3, [r3, #12]
    bdd8:	2b01      	cmp	r3, #1
    bdda:	bf8c      	ite	hi
    bddc:	2301      	movhi	r3, #1
    bdde:	2300      	movls	r3, #0
    bde0:	b2db      	uxtb	r3, r3
    bde2:	4619      	mov	r1, r3
    bde4:	6838      	ldr	r0, [r7, #0]
    bde6:	4b12      	ldr	r3, [pc, #72]	; (be30 <_i2c_m_sync_init_impl+0x13c>)
    bde8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    bdea:	7bfa      	ldrb	r2, [r7, #15]
    bdec:	4909      	ldr	r1, [pc, #36]	; (be14 <_i2c_m_sync_init_impl+0x120>)
    bdee:	4613      	mov	r3, r2
    bdf0:	005b      	lsls	r3, r3, #1
    bdf2:	4413      	add	r3, r2
    bdf4:	00db      	lsls	r3, r3, #3
    bdf6:	440b      	add	r3, r1
    bdf8:	3312      	adds	r3, #18
    bdfa:	881a      	ldrh	r2, [r3, #0]
    bdfc:	687b      	ldr	r3, [r7, #4]
    bdfe:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    be00:	2300      	movs	r3, #0
}
    be02:	4618      	mov	r0, r3
    be04:	3710      	adds	r7, #16
    be06:	46bd      	mov	sp, r7
    be08:	bd80      	pop	{r7, pc}
    be0a:	bf00      	nop
    be0c:	0000b231 	.word	0x0000b231
    be10:	0000a9ed 	.word	0x0000a9ed
    be14:	2000007c 	.word	0x2000007c
    be18:	0000ad2d 	.word	0x0000ad2d
    be1c:	0000acd5 	.word	0x0000acd5
    be20:	0000a9c9 	.word	0x0000a9c9
    be24:	0000ad5d 	.word	0x0000ad5d
    be28:	0000af2d 	.word	0x0000af2d
    be2c:	0000af75 	.word	0x0000af75
    be30:	0000afb1 	.word	0x0000afb1

0000be34 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    be34:	b580      	push	{r7, lr}
    be36:	b082      	sub	sp, #8
    be38:	af00      	add	r7, sp, #0
    be3a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    be3c:	2101      	movs	r1, #1
    be3e:	6878      	ldr	r0, [r7, #4]
    be40:	4b07      	ldr	r3, [pc, #28]	; (be60 <_spi_sync_enable+0x2c>)
    be42:	4798      	blx	r3
    be44:	4603      	mov	r3, r0
    be46:	2b00      	cmp	r3, #0
    be48:	d002      	beq.n	be50 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    be4a:	f06f 0303 	mvn.w	r3, #3
    be4e:	e003      	b.n	be58 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    be50:	6878      	ldr	r0, [r7, #4]
    be52:	4b04      	ldr	r3, [pc, #16]	; (be64 <_spi_sync_enable+0x30>)
    be54:	4798      	blx	r3

	return ERR_NONE;
    be56:	2300      	movs	r3, #0
}
    be58:	4618      	mov	r0, r3
    be5a:	3708      	adds	r7, #8
    be5c:	46bd      	mov	sp, r7
    be5e:	bd80      	pop	{r7, pc}
    be60:	0000aa39 	.word	0x0000aa39
    be64:	0000ad81 	.word	0x0000ad81

0000be68 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    be68:	b580      	push	{r7, lr}
    be6a:	b084      	sub	sp, #16
    be6c:	af00      	add	r7, sp, #0
    be6e:	6078      	str	r0, [r7, #4]
	_spi_sync_enable(hw);
    be70:	6878      	ldr	r0, [r7, #4]
    be72:	4b0e      	ldr	r3, [pc, #56]	; (beac <_spi_async_enable+0x44>)
    be74:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    be76:	6878      	ldr	r0, [r7, #4]
    be78:	4b0d      	ldr	r3, [pc, #52]	; (beb0 <_spi_async_enable+0x48>)
    be7a:	4798      	blx	r3
    be7c:	4603      	mov	r3, r0
    be7e:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < 4; i++) {
    be80:	2300      	movs	r3, #0
    be82:	60bb      	str	r3, [r7, #8]
    be84:	e009      	b.n	be9a <_spi_async_enable+0x32>
		NVIC_EnableIRQ((IRQn_Type)irq++);
    be86:	7bfb      	ldrb	r3, [r7, #15]
    be88:	1c5a      	adds	r2, r3, #1
    be8a:	73fa      	strb	r2, [r7, #15]
    be8c:	b21b      	sxth	r3, r3
    be8e:	4618      	mov	r0, r3
    be90:	4b08      	ldr	r3, [pc, #32]	; (beb4 <_spi_async_enable+0x4c>)
    be92:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    be94:	68bb      	ldr	r3, [r7, #8]
    be96:	3301      	adds	r3, #1
    be98:	60bb      	str	r3, [r7, #8]
    be9a:	68bb      	ldr	r3, [r7, #8]
    be9c:	2b03      	cmp	r3, #3
    be9e:	d9f2      	bls.n	be86 <_spi_async_enable+0x1e>
	}

	return ERR_NONE;
    bea0:	2300      	movs	r3, #0
}
    bea2:	4618      	mov	r0, r3
    bea4:	3710      	adds	r7, #16
    bea6:	46bd      	mov	sp, r7
    bea8:	bd80      	pop	{r7, pc}
    beaa:	bf00      	nop
    beac:	0000be35 	.word	0x0000be35
    beb0:	0000b629 	.word	0x0000b629
    beb4:	0000a90d 	.word	0x0000a90d

0000beb8 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    beb8:	b580      	push	{r7, lr}
    beba:	b082      	sub	sp, #8
    bebc:	af00      	add	r7, sp, #0
    bebe:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    bec0:	2101      	movs	r1, #1
    bec2:	6878      	ldr	r0, [r7, #4]
    bec4:	4b07      	ldr	r3, [pc, #28]	; (bee4 <_spi_sync_disable+0x2c>)
    bec6:	4798      	blx	r3
    bec8:	4603      	mov	r3, r0
    beca:	2b00      	cmp	r3, #0
    becc:	d002      	beq.n	bed4 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    bece:	f06f 0303 	mvn.w	r3, #3
    bed2:	e003      	b.n	bedc <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    bed4:	6878      	ldr	r0, [r7, #4]
    bed6:	4b04      	ldr	r3, [pc, #16]	; (bee8 <_spi_sync_disable+0x30>)
    bed8:	4798      	blx	r3

	return ERR_NONE;
    beda:	2300      	movs	r3, #0
}
    bedc:	4618      	mov	r0, r3
    bede:	3708      	adds	r7, #8
    bee0:	46bd      	mov	sp, r7
    bee2:	bd80      	pop	{r7, pc}
    bee4:	0000aa39 	.word	0x0000aa39
    bee8:	0000ade1 	.word	0x0000ade1

0000beec <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    beec:	b580      	push	{r7, lr}
    beee:	b082      	sub	sp, #8
    bef0:	af00      	add	r7, sp, #0
    bef2:	6078      	str	r0, [r7, #4]
    bef4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    bef6:	687b      	ldr	r3, [r7, #4]
    bef8:	2b00      	cmp	r3, #0
    befa:	d004      	beq.n	bf06 <_spi_load_regs_master+0x1a>
    befc:	683b      	ldr	r3, [r7, #0]
    befe:	2b00      	cmp	r3, #0
    bf00:	d001      	beq.n	bf06 <_spi_load_regs_master+0x1a>
    bf02:	2301      	movs	r3, #1
    bf04:	e000      	b.n	bf08 <_spi_load_regs_master+0x1c>
    bf06:	2300      	movs	r3, #0
    bf08:	f003 0301 	and.w	r3, r3, #1
    bf0c:	b2db      	uxtb	r3, r3
    bf0e:	f640 1245 	movw	r2, #2373	; 0x945
    bf12:	4915      	ldr	r1, [pc, #84]	; (bf68 <_spi_load_regs_master+0x7c>)
    bf14:	4618      	mov	r0, r3
    bf16:	4b15      	ldr	r3, [pc, #84]	; (bf6c <_spi_load_regs_master+0x80>)
    bf18:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    bf1a:	683b      	ldr	r3, [r7, #0]
    bf1c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    bf1e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    bf22:	f023 0301 	bic.w	r3, r3, #1
    bf26:	4619      	mov	r1, r3
    bf28:	6878      	ldr	r0, [r7, #4]
    bf2a:	4b11      	ldr	r3, [pc, #68]	; (bf70 <_spi_load_regs_master+0x84>)
    bf2c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    bf2e:	683b      	ldr	r3, [r7, #0]
    bf30:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    bf32:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    bf36:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    bf3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bf3e:	4619      	mov	r1, r3
    bf40:	6878      	ldr	r0, [r7, #4]
    bf42:	4b0c      	ldr	r3, [pc, #48]	; (bf74 <_spi_load_regs_master+0x88>)
    bf44:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    bf46:	683b      	ldr	r3, [r7, #0]
    bf48:	7b1b      	ldrb	r3, [r3, #12]
    bf4a:	4619      	mov	r1, r3
    bf4c:	6878      	ldr	r0, [r7, #4]
    bf4e:	4b0a      	ldr	r3, [pc, #40]	; (bf78 <_spi_load_regs_master+0x8c>)
    bf50:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    bf52:	683b      	ldr	r3, [r7, #0]
    bf54:	7b5b      	ldrb	r3, [r3, #13]
    bf56:	4619      	mov	r1, r3
    bf58:	6878      	ldr	r0, [r7, #4]
    bf5a:	4b08      	ldr	r3, [pc, #32]	; (bf7c <_spi_load_regs_master+0x90>)
    bf5c:	4798      	blx	r3
}
    bf5e:	bf00      	nop
    bf60:	3708      	adds	r7, #8
    bf62:	46bd      	mov	sp, r7
    bf64:	bd80      	pop	{r7, pc}
    bf66:	bf00      	nop
    bf68:	0001f770 	.word	0x0001f770
    bf6c:	00007d91 	.word	0x00007d91
    bf70:	0000ae39 	.word	0x0000ae39
    bf74:	0000af51 	.word	0x0000af51
    bf78:	0000af91 	.word	0x0000af91
    bf7c:	0000b0c9 	.word	0x0000b0c9

0000bf80 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    bf80:	b580      	push	{r7, lr}
    bf82:	b082      	sub	sp, #8
    bf84:	af00      	add	r7, sp, #0
    bf86:	6078      	str	r0, [r7, #4]
    bf88:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    bf8a:	687b      	ldr	r3, [r7, #4]
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	d004      	beq.n	bf9a <_spi_load_regs_slave+0x1a>
    bf90:	683b      	ldr	r3, [r7, #0]
    bf92:	2b00      	cmp	r3, #0
    bf94:	d001      	beq.n	bf9a <_spi_load_regs_slave+0x1a>
    bf96:	2301      	movs	r3, #1
    bf98:	e000      	b.n	bf9c <_spi_load_regs_slave+0x1c>
    bf9a:	2300      	movs	r3, #0
    bf9c:	f003 0301 	and.w	r3, r3, #1
    bfa0:	b2db      	uxtb	r3, r3
    bfa2:	f640 1259 	movw	r2, #2393	; 0x959
    bfa6:	491a      	ldr	r1, [pc, #104]	; (c010 <_spi_load_regs_slave+0x90>)
    bfa8:	4618      	mov	r0, r3
    bfaa:	4b1a      	ldr	r3, [pc, #104]	; (c014 <_spi_load_regs_slave+0x94>)
    bfac:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    bfae:	683b      	ldr	r3, [r7, #0]
    bfb0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    bfb2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    bfb6:	f023 0301 	bic.w	r3, r3, #1
    bfba:	4619      	mov	r1, r3
    bfbc:	6878      	ldr	r0, [r7, #4]
    bfbe:	4b16      	ldr	r3, [pc, #88]	; (c018 <_spi_load_regs_slave+0x98>)
    bfc0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    bfc2:	683b      	ldr	r3, [r7, #0]
    bfc4:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    bfc6:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    bfca:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    bfce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bfd2:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    bfd6:	4619      	mov	r1, r3
    bfd8:	6878      	ldr	r0, [r7, #4]
    bfda:	4b10      	ldr	r3, [pc, #64]	; (c01c <_spi_load_regs_slave+0x9c>)
    bfdc:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    bfde:	683b      	ldr	r3, [r7, #0]
    bfe0:	689b      	ldr	r3, [r3, #8]
    bfe2:	4619      	mov	r1, r3
    bfe4:	6878      	ldr	r0, [r7, #4]
    bfe6:	4b0e      	ldr	r3, [pc, #56]	; (c020 <_spi_load_regs_slave+0xa0>)
    bfe8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    bfea:	683b      	ldr	r3, [r7, #0]
    bfec:	7b5b      	ldrb	r3, [r3, #13]
    bfee:	4619      	mov	r1, r3
    bff0:	6878      	ldr	r0, [r7, #4]
    bff2:	4b0c      	ldr	r3, [pc, #48]	; (c024 <_spi_load_regs_slave+0xa4>)
    bff4:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    bff6:	bf00      	nop
    bff8:	f04f 31ff 	mov.w	r1, #4294967295
    bffc:	6878      	ldr	r0, [r7, #4]
    bffe:	4b0a      	ldr	r3, [pc, #40]	; (c028 <_spi_load_regs_slave+0xa8>)
    c000:	4798      	blx	r3
    c002:	4603      	mov	r3, r0
    c004:	2b00      	cmp	r3, #0
    c006:	d1f7      	bne.n	bff8 <_spi_load_regs_slave+0x78>
		;
}
    c008:	bf00      	nop
    c00a:	3708      	adds	r7, #8
    c00c:	46bd      	mov	sp, r7
    c00e:	bd80      	pop	{r7, pc}
    c010:	0001f770 	.word	0x0001f770
    c014:	00007d91 	.word	0x00007d91
    c018:	0000ae39 	.word	0x0000ae39
    c01c:	0000af51 	.word	0x0000af51
    c020:	0000b035 	.word	0x0000b035
    c024:	0000b0c9 	.word	0x0000b0c9
    c028:	0000aa39 	.word	0x0000aa39

0000c02c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    c02c:	b580      	push	{r7, lr}
    c02e:	b084      	sub	sp, #16
    c030:	af00      	add	r7, sp, #0
    c032:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    c034:	687b      	ldr	r3, [r7, #4]
    c036:	4618      	mov	r0, r3
    c038:	4b11      	ldr	r3, [pc, #68]	; (c080 <_spi_get_regs+0x54>)
    c03a:	4798      	blx	r3
    c03c:	4603      	mov	r3, r0
    c03e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    c040:	2300      	movs	r3, #0
    c042:	73fb      	strb	r3, [r7, #15]
    c044:	e014      	b.n	c070 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    c046:	7bfa      	ldrb	r2, [r7, #15]
    c048:	490e      	ldr	r1, [pc, #56]	; (c084 <_spi_get_regs+0x58>)
    c04a:	4613      	mov	r3, r2
    c04c:	011b      	lsls	r3, r3, #4
    c04e:	4413      	add	r3, r2
    c050:	440b      	add	r3, r1
    c052:	3310      	adds	r3, #16
    c054:	781b      	ldrb	r3, [r3, #0]
    c056:	7bba      	ldrb	r2, [r7, #14]
    c058:	429a      	cmp	r2, r3
    c05a:	d106      	bne.n	c06a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    c05c:	7bfa      	ldrb	r2, [r7, #15]
    c05e:	4613      	mov	r3, r2
    c060:	011b      	lsls	r3, r3, #4
    c062:	4413      	add	r3, r2
    c064:	4a07      	ldr	r2, [pc, #28]	; (c084 <_spi_get_regs+0x58>)
    c066:	4413      	add	r3, r2
    c068:	e006      	b.n	c078 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    c06a:	7bfb      	ldrb	r3, [r7, #15]
    c06c:	3301      	adds	r3, #1
    c06e:	73fb      	strb	r3, [r7, #15]
    c070:	7bfb      	ldrb	r3, [r7, #15]
    c072:	2b02      	cmp	r3, #2
    c074:	d9e7      	bls.n	c046 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    c076:	2300      	movs	r3, #0
}
    c078:	4618      	mov	r0, r3
    c07a:	3710      	adds	r7, #16
    c07c:	46bd      	mov	sp, r7
    c07e:	bd80      	pop	{r7, pc}
    c080:	0000b181 	.word	0x0000b181
    c084:	0001f7ac 	.word	0x0001f7ac

0000c088 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    c088:	b580      	push	{r7, lr}
    c08a:	b084      	sub	sp, #16
    c08c:	af00      	add	r7, sp, #0
    c08e:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    c090:	687b      	ldr	r3, [r7, #4]
    c092:	681b      	ldr	r3, [r3, #0]
    c094:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    c096:	68f8      	ldr	r0, [r7, #12]
    c098:	4b21      	ldr	r3, [pc, #132]	; (c120 <_spi_handler+0x98>)
    c09a:	4798      	blx	r3
    c09c:	4603      	mov	r3, r0
    c09e:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    c0a0:	68f8      	ldr	r0, [r7, #12]
    c0a2:	4b20      	ldr	r3, [pc, #128]	; (c124 <_spi_handler+0x9c>)
    c0a4:	4798      	blx	r3
    c0a6:	4603      	mov	r3, r0
    c0a8:	461a      	mov	r2, r3
    c0aa:	7afb      	ldrb	r3, [r7, #11]
    c0ac:	4013      	ands	r3, r2
    c0ae:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    c0b0:	7afb      	ldrb	r3, [r7, #11]
    c0b2:	f003 0301 	and.w	r3, r3, #1
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d004      	beq.n	c0c4 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    c0ba:	687b      	ldr	r3, [r7, #4]
    c0bc:	689b      	ldr	r3, [r3, #8]
    c0be:	6878      	ldr	r0, [r7, #4]
    c0c0:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    c0c2:	e029      	b.n	c118 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    c0c4:	7afb      	ldrb	r3, [r7, #11]
    c0c6:	f003 0304 	and.w	r3, r3, #4
    c0ca:	2b00      	cmp	r3, #0
    c0cc:	d004      	beq.n	c0d8 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    c0ce:	687b      	ldr	r3, [r7, #4]
    c0d0:	68db      	ldr	r3, [r3, #12]
    c0d2:	6878      	ldr	r0, [r7, #4]
    c0d4:	4798      	blx	r3
}
    c0d6:	e01f      	b.n	c118 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    c0d8:	7afb      	ldrb	r3, [r7, #11]
    c0da:	f003 0302 	and.w	r3, r3, #2
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d008      	beq.n	c0f4 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    c0e2:	2102      	movs	r1, #2
    c0e4:	68f8      	ldr	r0, [r7, #12]
    c0e6:	4b10      	ldr	r3, [pc, #64]	; (c128 <_spi_handler+0xa0>)
    c0e8:	4798      	blx	r3
		dev->callbacks.complete(dev);
    c0ea:	687b      	ldr	r3, [r7, #4]
    c0ec:	691b      	ldr	r3, [r3, #16]
    c0ee:	6878      	ldr	r0, [r7, #4]
    c0f0:	4798      	blx	r3
}
    c0f2:	e011      	b.n	c118 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    c0f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
    c0f8:	2b00      	cmp	r3, #0
    c0fa:	da0d      	bge.n	c118 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    c0fc:	2104      	movs	r1, #4
    c0fe:	68f8      	ldr	r0, [r7, #12]
    c100:	4b0a      	ldr	r3, [pc, #40]	; (c12c <_spi_handler+0xa4>)
    c102:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    c104:	2180      	movs	r1, #128	; 0x80
    c106:	68f8      	ldr	r0, [r7, #12]
    c108:	4b07      	ldr	r3, [pc, #28]	; (c128 <_spi_handler+0xa0>)
    c10a:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    c10c:	687b      	ldr	r3, [r7, #4]
    c10e:	695b      	ldr	r3, [r3, #20]
    c110:	f06f 0112 	mvn.w	r1, #18
    c114:	6878      	ldr	r0, [r7, #4]
    c116:	4798      	blx	r3
}
    c118:	bf00      	nop
    c11a:	3710      	adds	r7, #16
    c11c:	46bd      	mov	sp, r7
    c11e:	bd80      	pop	{r7, pc}
    c120:	0000aaf5 	.word	0x0000aaf5
    c124:	0000ac91 	.word	0x0000ac91
    c128:	0000ab0f 	.word	0x0000ab0f
    c12c:	0000b0e9 	.word	0x0000b0e9

0000c130 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    c130:	b580      	push	{r7, lr}
    c132:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    c134:	4b03      	ldr	r3, [pc, #12]	; (c144 <SERCOM4_0_Handler+0x14>)
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	4618      	mov	r0, r3
    c13a:	4b03      	ldr	r3, [pc, #12]	; (c148 <SERCOM4_0_Handler+0x18>)
    c13c:	4798      	blx	r3
}
    c13e:	bf00      	nop
    c140:	bd80      	pop	{r7, pc}
    c142:	bf00      	nop
    c144:	20008768 	.word	0x20008768
    c148:	0000c089 	.word	0x0000c089

0000c14c <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    c14c:	b580      	push	{r7, lr}
    c14e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    c150:	4b03      	ldr	r3, [pc, #12]	; (c160 <SERCOM4_1_Handler+0x14>)
    c152:	681b      	ldr	r3, [r3, #0]
    c154:	4618      	mov	r0, r3
    c156:	4b03      	ldr	r3, [pc, #12]	; (c164 <SERCOM4_1_Handler+0x18>)
    c158:	4798      	blx	r3
}
    c15a:	bf00      	nop
    c15c:	bd80      	pop	{r7, pc}
    c15e:	bf00      	nop
    c160:	20008768 	.word	0x20008768
    c164:	0000c089 	.word	0x0000c089

0000c168 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    c168:	b580      	push	{r7, lr}
    c16a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    c16c:	4b03      	ldr	r3, [pc, #12]	; (c17c <SERCOM4_2_Handler+0x14>)
    c16e:	681b      	ldr	r3, [r3, #0]
    c170:	4618      	mov	r0, r3
    c172:	4b03      	ldr	r3, [pc, #12]	; (c180 <SERCOM4_2_Handler+0x18>)
    c174:	4798      	blx	r3
}
    c176:	bf00      	nop
    c178:	bd80      	pop	{r7, pc}
    c17a:	bf00      	nop
    c17c:	20008768 	.word	0x20008768
    c180:	0000c089 	.word	0x0000c089

0000c184 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    c184:	b580      	push	{r7, lr}
    c186:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    c188:	4b03      	ldr	r3, [pc, #12]	; (c198 <SERCOM4_3_Handler+0x14>)
    c18a:	681b      	ldr	r3, [r3, #0]
    c18c:	4618      	mov	r0, r3
    c18e:	4b03      	ldr	r3, [pc, #12]	; (c19c <SERCOM4_3_Handler+0x18>)
    c190:	4798      	blx	r3
}
    c192:	bf00      	nop
    c194:	bd80      	pop	{r7, pc}
    c196:	bf00      	nop
    c198:	20008768 	.word	0x20008768
    c19c:	0000c089 	.word	0x0000c089

0000c1a0 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    c1a4:	4b03      	ldr	r3, [pc, #12]	; (c1b4 <SERCOM5_0_Handler+0x14>)
    c1a6:	681b      	ldr	r3, [r3, #0]
    c1a8:	4618      	mov	r0, r3
    c1aa:	4b03      	ldr	r3, [pc, #12]	; (c1b8 <SERCOM5_0_Handler+0x18>)
    c1ac:	4798      	blx	r3
}
    c1ae:	bf00      	nop
    c1b0:	bd80      	pop	{r7, pc}
    c1b2:	bf00      	nop
    c1b4:	2000876c 	.word	0x2000876c
    c1b8:	0000b4e5 	.word	0x0000b4e5

0000c1bc <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    c1bc:	b580      	push	{r7, lr}
    c1be:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    c1c0:	4b03      	ldr	r3, [pc, #12]	; (c1d0 <SERCOM5_1_Handler+0x14>)
    c1c2:	681b      	ldr	r3, [r3, #0]
    c1c4:	4618      	mov	r0, r3
    c1c6:	4b03      	ldr	r3, [pc, #12]	; (c1d4 <SERCOM5_1_Handler+0x18>)
    c1c8:	4798      	blx	r3
}
    c1ca:	bf00      	nop
    c1cc:	bd80      	pop	{r7, pc}
    c1ce:	bf00      	nop
    c1d0:	2000876c 	.word	0x2000876c
    c1d4:	0000b4e5 	.word	0x0000b4e5

0000c1d8 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    c1d8:	b580      	push	{r7, lr}
    c1da:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    c1dc:	4b03      	ldr	r3, [pc, #12]	; (c1ec <SERCOM5_2_Handler+0x14>)
    c1de:	681b      	ldr	r3, [r3, #0]
    c1e0:	4618      	mov	r0, r3
    c1e2:	4b03      	ldr	r3, [pc, #12]	; (c1f0 <SERCOM5_2_Handler+0x18>)
    c1e4:	4798      	blx	r3
}
    c1e6:	bf00      	nop
    c1e8:	bd80      	pop	{r7, pc}
    c1ea:	bf00      	nop
    c1ec:	2000876c 	.word	0x2000876c
    c1f0:	0000b4e5 	.word	0x0000b4e5

0000c1f4 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    c1f4:	b580      	push	{r7, lr}
    c1f6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    c1f8:	4b03      	ldr	r3, [pc, #12]	; (c208 <SERCOM5_3_Handler+0x14>)
    c1fa:	681b      	ldr	r3, [r3, #0]
    c1fc:	4618      	mov	r0, r3
    c1fe:	4b03      	ldr	r3, [pc, #12]	; (c20c <SERCOM5_3_Handler+0x18>)
    c200:	4798      	blx	r3
}
    c202:	bf00      	nop
    c204:	bd80      	pop	{r7, pc}
    c206:	bf00      	nop
    c208:	2000876c 	.word	0x2000876c
    c20c:	0000b4e5 	.word	0x0000b4e5

0000c210 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    c210:	b580      	push	{r7, lr}
    c212:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c214:	4b03      	ldr	r3, [pc, #12]	; (c224 <SERCOM7_0_Handler+0x14>)
    c216:	681b      	ldr	r3, [r3, #0]
    c218:	4618      	mov	r0, r3
    c21a:	4b03      	ldr	r3, [pc, #12]	; (c228 <SERCOM7_0_Handler+0x18>)
    c21c:	4798      	blx	r3
}
    c21e:	bf00      	nop
    c220:	bd80      	pop	{r7, pc}
    c222:	bf00      	nop
    c224:	20008770 	.word	0x20008770
    c228:	0000b4e5 	.word	0x0000b4e5

0000c22c <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    c22c:	b580      	push	{r7, lr}
    c22e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c230:	4b03      	ldr	r3, [pc, #12]	; (c240 <SERCOM7_1_Handler+0x14>)
    c232:	681b      	ldr	r3, [r3, #0]
    c234:	4618      	mov	r0, r3
    c236:	4b03      	ldr	r3, [pc, #12]	; (c244 <SERCOM7_1_Handler+0x18>)
    c238:	4798      	blx	r3
}
    c23a:	bf00      	nop
    c23c:	bd80      	pop	{r7, pc}
    c23e:	bf00      	nop
    c240:	20008770 	.word	0x20008770
    c244:	0000b4e5 	.word	0x0000b4e5

0000c248 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    c248:	b580      	push	{r7, lr}
    c24a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c24c:	4b03      	ldr	r3, [pc, #12]	; (c25c <SERCOM7_2_Handler+0x14>)
    c24e:	681b      	ldr	r3, [r3, #0]
    c250:	4618      	mov	r0, r3
    c252:	4b03      	ldr	r3, [pc, #12]	; (c260 <SERCOM7_2_Handler+0x18>)
    c254:	4798      	blx	r3
}
    c256:	bf00      	nop
    c258:	bd80      	pop	{r7, pc}
    c25a:	bf00      	nop
    c25c:	20008770 	.word	0x20008770
    c260:	0000b4e5 	.word	0x0000b4e5

0000c264 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    c264:	b580      	push	{r7, lr}
    c266:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c268:	4b03      	ldr	r3, [pc, #12]	; (c278 <SERCOM7_3_Handler+0x14>)
    c26a:	681b      	ldr	r3, [r3, #0]
    c26c:	4618      	mov	r0, r3
    c26e:	4b03      	ldr	r3, [pc, #12]	; (c27c <SERCOM7_3_Handler+0x18>)
    c270:	4798      	blx	r3
}
    c272:	bf00      	nop
    c274:	bd80      	pop	{r7, pc}
    c276:	bf00      	nop
    c278:	20008770 	.word	0x20008770
    c27c:	0000b4e5 	.word	0x0000b4e5

0000c280 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    c280:	b580      	push	{r7, lr}
    c282:	b084      	sub	sp, #16
    c284:	af00      	add	r7, sp, #0
    c286:	6078      	str	r0, [r7, #4]
    c288:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    c28a:	683b      	ldr	r3, [r7, #0]
    c28c:	4618      	mov	r0, r3
    c28e:	4b35      	ldr	r3, [pc, #212]	; (c364 <_spi_m_sync_init+0xe4>)
    c290:	4798      	blx	r3
    c292:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    c294:	687b      	ldr	r3, [r7, #4]
    c296:	2b00      	cmp	r3, #0
    c298:	d004      	beq.n	c2a4 <_spi_m_sync_init+0x24>
    c29a:	683b      	ldr	r3, [r7, #0]
    c29c:	2b00      	cmp	r3, #0
    c29e:	d001      	beq.n	c2a4 <_spi_m_sync_init+0x24>
    c2a0:	2301      	movs	r3, #1
    c2a2:	e000      	b.n	c2a6 <_spi_m_sync_init+0x26>
    c2a4:	2300      	movs	r3, #0
    c2a6:	f003 0301 	and.w	r3, r3, #1
    c2aa:	b2db      	uxtb	r3, r3
    c2ac:	f640 12ec 	movw	r2, #2540	; 0x9ec
    c2b0:	492d      	ldr	r1, [pc, #180]	; (c368 <_spi_m_sync_init+0xe8>)
    c2b2:	4618      	mov	r0, r3
    c2b4:	4b2d      	ldr	r3, [pc, #180]	; (c36c <_spi_m_sync_init+0xec>)
    c2b6:	4798      	blx	r3

	if (regs == NULL) {
    c2b8:	68fb      	ldr	r3, [r7, #12]
    c2ba:	2b00      	cmp	r3, #0
    c2bc:	d102      	bne.n	c2c4 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    c2be:	f06f 030c 	mvn.w	r3, #12
    c2c2:	e04a      	b.n	c35a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    c2c4:	2101      	movs	r1, #1
    c2c6:	6838      	ldr	r0, [r7, #0]
    c2c8:	4b29      	ldr	r3, [pc, #164]	; (c370 <_spi_m_sync_init+0xf0>)
    c2ca:	4798      	blx	r3
    c2cc:	4603      	mov	r3, r0
    c2ce:	f083 0301 	eor.w	r3, r3, #1
    c2d2:	b2db      	uxtb	r3, r3
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d019      	beq.n	c30c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    c2d8:	68fb      	ldr	r3, [r7, #12]
    c2da:	681b      	ldr	r3, [r3, #0]
    c2dc:	f003 031c 	and.w	r3, r3, #28
    c2e0:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    c2e2:	2102      	movs	r1, #2
    c2e4:	6838      	ldr	r0, [r7, #0]
    c2e6:	4b23      	ldr	r3, [pc, #140]	; (c374 <_spi_m_sync_init+0xf4>)
    c2e8:	4798      	blx	r3
    c2ea:	4603      	mov	r3, r0
    c2ec:	2b00      	cmp	r3, #0
    c2ee:	d006      	beq.n	c2fe <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    c2f0:	6838      	ldr	r0, [r7, #0]
    c2f2:	4b21      	ldr	r3, [pc, #132]	; (c378 <_spi_m_sync_init+0xf8>)
    c2f4:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    c2f6:	2102      	movs	r1, #2
    c2f8:	6838      	ldr	r0, [r7, #0]
    c2fa:	4b20      	ldr	r3, [pc, #128]	; (c37c <_spi_m_sync_init+0xfc>)
    c2fc:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    c2fe:	68bb      	ldr	r3, [r7, #8]
    c300:	f043 0301 	orr.w	r3, r3, #1
    c304:	4619      	mov	r1, r3
    c306:	6838      	ldr	r0, [r7, #0]
    c308:	4b1d      	ldr	r3, [pc, #116]	; (c380 <_spi_m_sync_init+0x100>)
    c30a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    c30c:	2101      	movs	r1, #1
    c30e:	6838      	ldr	r0, [r7, #0]
    c310:	4b1a      	ldr	r3, [pc, #104]	; (c37c <_spi_m_sync_init+0xfc>)
    c312:	4798      	blx	r3

	dev->prvt = hw;
    c314:	687b      	ldr	r3, [r7, #4]
    c316:	683a      	ldr	r2, [r7, #0]
    c318:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    c31a:	68fb      	ldr	r3, [r7, #12]
    c31c:	681b      	ldr	r3, [r3, #0]
    c31e:	f003 031c 	and.w	r3, r3, #28
    c322:	2b08      	cmp	r3, #8
    c324:	d104      	bne.n	c330 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    c326:	68f9      	ldr	r1, [r7, #12]
    c328:	6838      	ldr	r0, [r7, #0]
    c32a:	4b16      	ldr	r3, [pc, #88]	; (c384 <_spi_m_sync_init+0x104>)
    c32c:	4798      	blx	r3
    c32e:	e003      	b.n	c338 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    c330:	68f9      	ldr	r1, [r7, #12]
    c332:	6838      	ldr	r0, [r7, #0]
    c334:	4b14      	ldr	r3, [pc, #80]	; (c388 <_spi_m_sync_init+0x108>)
    c336:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    c338:	68fb      	ldr	r3, [r7, #12]
    c33a:	685b      	ldr	r3, [r3, #4]
    c33c:	f003 0307 	and.w	r3, r3, #7
    c340:	2b00      	cmp	r3, #0
    c342:	d101      	bne.n	c348 <_spi_m_sync_init+0xc8>
    c344:	2201      	movs	r2, #1
    c346:	e000      	b.n	c34a <_spi_m_sync_init+0xca>
    c348:	2202      	movs	r2, #2
    c34a:	687b      	ldr	r3, [r7, #4]
    c34c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    c34e:	68fb      	ldr	r3, [r7, #12]
    c350:	89db      	ldrh	r3, [r3, #14]
    c352:	b29a      	uxth	r2, r3
    c354:	687b      	ldr	r3, [r7, #4]
    c356:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    c358:	2300      	movs	r3, #0
}
    c35a:	4618      	mov	r0, r3
    c35c:	3710      	adds	r7, #16
    c35e:	46bd      	mov	sp, r7
    c360:	bd80      	pop	{r7, pc}
    c362:	bf00      	nop
    c364:	0000c02d 	.word	0x0000c02d
    c368:	0001f770 	.word	0x0001f770
    c36c:	00007d91 	.word	0x00007d91
    c370:	0000aa39 	.word	0x0000aa39
    c374:	0000ae09 	.word	0x0000ae09
    c378:	0000ade1 	.word	0x0000ade1
    c37c:	0000aa15 	.word	0x0000aa15
    c380:	0000ae39 	.word	0x0000ae39
    c384:	0000bf81 	.word	0x0000bf81
    c388:	0000beed 	.word	0x0000beed

0000c38c <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    c38c:	b580      	push	{r7, lr}
    c38e:	b086      	sub	sp, #24
    c390:	af00      	add	r7, sp, #0
    c392:	6078      	str	r0, [r7, #4]
    c394:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    c396:	687b      	ldr	r3, [r7, #4]
    c398:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    c39a:	6839      	ldr	r1, [r7, #0]
    c39c:	6878      	ldr	r0, [r7, #4]
    c39e:	4b1a      	ldr	r3, [pc, #104]	; (c408 <_spi_m_async_init+0x7c>)
    c3a0:	4798      	blx	r3
    c3a2:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    c3a4:	68bb      	ldr	r3, [r7, #8]
    c3a6:	2b00      	cmp	r3, #0
    c3a8:	da01      	bge.n	c3ae <_spi_m_async_init+0x22>
		return rc;
    c3aa:	68bb      	ldr	r3, [r7, #8]
    c3ac:	e028      	b.n	c400 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    c3ae:	6879      	ldr	r1, [r7, #4]
    c3b0:	6838      	ldr	r0, [r7, #0]
    c3b2:	4b16      	ldr	r3, [pc, #88]	; (c40c <_spi_m_async_init+0x80>)
    c3b4:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    c3b6:	68fb      	ldr	r3, [r7, #12]
    c3b8:	2200      	movs	r2, #0
    c3ba:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    c3bc:	68fb      	ldr	r3, [r7, #12]
    c3be:	2200      	movs	r2, #0
    c3c0:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    c3c2:	68fb      	ldr	r3, [r7, #12]
    c3c4:	2200      	movs	r2, #0
    c3c6:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    c3c8:	6838      	ldr	r0, [r7, #0]
    c3ca:	4b11      	ldr	r3, [pc, #68]	; (c410 <_spi_m_async_init+0x84>)
    c3cc:	4798      	blx	r3
    c3ce:	4603      	mov	r3, r0
    c3d0:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    c3d2:	2300      	movs	r3, #0
    c3d4:	613b      	str	r3, [r7, #16]
    c3d6:	e00f      	b.n	c3f8 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    c3d8:	7dfb      	ldrb	r3, [r7, #23]
    c3da:	b21b      	sxth	r3, r3
    c3dc:	4618      	mov	r0, r3
    c3de:	4b0d      	ldr	r3, [pc, #52]	; (c414 <_spi_m_async_init+0x88>)
    c3e0:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    c3e2:	7dfb      	ldrb	r3, [r7, #23]
    c3e4:	b21b      	sxth	r3, r3
    c3e6:	4618      	mov	r0, r3
    c3e8:	4b0b      	ldr	r3, [pc, #44]	; (c418 <_spi_m_async_init+0x8c>)
    c3ea:	4798      	blx	r3
		irq++;
    c3ec:	7dfb      	ldrb	r3, [r7, #23]
    c3ee:	3301      	adds	r3, #1
    c3f0:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    c3f2:	693b      	ldr	r3, [r7, #16]
    c3f4:	3301      	adds	r3, #1
    c3f6:	613b      	str	r3, [r7, #16]
    c3f8:	693b      	ldr	r3, [r7, #16]
    c3fa:	2b03      	cmp	r3, #3
    c3fc:	d9ec      	bls.n	c3d8 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    c3fe:	2300      	movs	r3, #0
}
    c400:	4618      	mov	r0, r3
    c402:	3718      	adds	r7, #24
    c404:	46bd      	mov	sp, r7
    c406:	bd80      	pop	{r7, pc}
    c408:	0000c281 	.word	0x0000c281
    c40c:	0000b1dd 	.word	0x0000b1dd
    c410:	0000b629 	.word	0x0000b629
    c414:	0000a949 	.word	0x0000a949
    c418:	0000a98d 	.word	0x0000a98d

0000c41c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    c41c:	b580      	push	{r7, lr}
    c41e:	b082      	sub	sp, #8
    c420:	af00      	add	r7, sp, #0
    c422:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c424:	687b      	ldr	r3, [r7, #4]
    c426:	2b00      	cmp	r3, #0
    c428:	d005      	beq.n	c436 <_spi_m_sync_enable+0x1a>
    c42a:	687b      	ldr	r3, [r7, #4]
    c42c:	681b      	ldr	r3, [r3, #0]
    c42e:	2b00      	cmp	r3, #0
    c430:	d001      	beq.n	c436 <_spi_m_sync_enable+0x1a>
    c432:	2301      	movs	r3, #1
    c434:	e000      	b.n	c438 <_spi_m_sync_enable+0x1c>
    c436:	2300      	movs	r3, #0
    c438:	f003 0301 	and.w	r3, r3, #1
    c43c:	b2db      	uxtb	r3, r3
    c43e:	f640 224b 	movw	r2, #2635	; 0xa4b
    c442:	4907      	ldr	r1, [pc, #28]	; (c460 <_spi_m_sync_enable+0x44>)
    c444:	4618      	mov	r0, r3
    c446:	4b07      	ldr	r3, [pc, #28]	; (c464 <_spi_m_sync_enable+0x48>)
    c448:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    c44a:	687b      	ldr	r3, [r7, #4]
    c44c:	681b      	ldr	r3, [r3, #0]
    c44e:	4618      	mov	r0, r3
    c450:	4b05      	ldr	r3, [pc, #20]	; (c468 <_spi_m_sync_enable+0x4c>)
    c452:	4798      	blx	r3
    c454:	4603      	mov	r3, r0
}
    c456:	4618      	mov	r0, r3
    c458:	3708      	adds	r7, #8
    c45a:	46bd      	mov	sp, r7
    c45c:	bd80      	pop	{r7, pc}
    c45e:	bf00      	nop
    c460:	0001f770 	.word	0x0001f770
    c464:	00007d91 	.word	0x00007d91
    c468:	0000be35 	.word	0x0000be35

0000c46c <_spi_m_async_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_m_async_enable(struct _spi_async_dev *dev)
{
    c46c:	b580      	push	{r7, lr}
    c46e:	b082      	sub	sp, #8
    c470:	af00      	add	r7, sp, #0
    c472:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c474:	687b      	ldr	r3, [r7, #4]
    c476:	2b00      	cmp	r3, #0
    c478:	d005      	beq.n	c486 <_spi_m_async_enable+0x1a>
    c47a:	687b      	ldr	r3, [r7, #4]
    c47c:	681b      	ldr	r3, [r3, #0]
    c47e:	2b00      	cmp	r3, #0
    c480:	d001      	beq.n	c486 <_spi_m_async_enable+0x1a>
    c482:	2301      	movs	r3, #1
    c484:	e000      	b.n	c488 <_spi_m_async_enable+0x1c>
    c486:	2300      	movs	r3, #0
    c488:	f003 0301 	and.w	r3, r3, #1
    c48c:	b2db      	uxtb	r3, r3
    c48e:	f640 2259 	movw	r2, #2649	; 0xa59
    c492:	4907      	ldr	r1, [pc, #28]	; (c4b0 <_spi_m_async_enable+0x44>)
    c494:	4618      	mov	r0, r3
    c496:	4b07      	ldr	r3, [pc, #28]	; (c4b4 <_spi_m_async_enable+0x48>)
    c498:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
    c49a:	687b      	ldr	r3, [r7, #4]
    c49c:	681b      	ldr	r3, [r3, #0]
    c49e:	4618      	mov	r0, r3
    c4a0:	4b05      	ldr	r3, [pc, #20]	; (c4b8 <_spi_m_async_enable+0x4c>)
    c4a2:	4798      	blx	r3
    c4a4:	4603      	mov	r3, r0
}
    c4a6:	4618      	mov	r0, r3
    c4a8:	3708      	adds	r7, #8
    c4aa:	46bd      	mov	sp, r7
    c4ac:	bd80      	pop	{r7, pc}
    c4ae:	bf00      	nop
    c4b0:	0001f770 	.word	0x0001f770
    c4b4:	00007d91 	.word	0x00007d91
    c4b8:	0000be69 	.word	0x0000be69

0000c4bc <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    c4bc:	b580      	push	{r7, lr}
    c4be:	b082      	sub	sp, #8
    c4c0:	af00      	add	r7, sp, #0
    c4c2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c4c4:	687b      	ldr	r3, [r7, #4]
    c4c6:	2b00      	cmp	r3, #0
    c4c8:	d005      	beq.n	c4d6 <_spi_m_sync_disable+0x1a>
    c4ca:	687b      	ldr	r3, [r7, #4]
    c4cc:	681b      	ldr	r3, [r3, #0]
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	d001      	beq.n	c4d6 <_spi_m_sync_disable+0x1a>
    c4d2:	2301      	movs	r3, #1
    c4d4:	e000      	b.n	c4d8 <_spi_m_sync_disable+0x1c>
    c4d6:	2300      	movs	r3, #0
    c4d8:	f003 0301 	and.w	r3, r3, #1
    c4dc:	b2db      	uxtb	r3, r3
    c4de:	f640 2267 	movw	r2, #2663	; 0xa67
    c4e2:	4907      	ldr	r1, [pc, #28]	; (c500 <_spi_m_sync_disable+0x44>)
    c4e4:	4618      	mov	r0, r3
    c4e6:	4b07      	ldr	r3, [pc, #28]	; (c504 <_spi_m_sync_disable+0x48>)
    c4e8:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    c4ea:	687b      	ldr	r3, [r7, #4]
    c4ec:	681b      	ldr	r3, [r3, #0]
    c4ee:	4618      	mov	r0, r3
    c4f0:	4b05      	ldr	r3, [pc, #20]	; (c508 <_spi_m_sync_disable+0x4c>)
    c4f2:	4798      	blx	r3
    c4f4:	4603      	mov	r3, r0
}
    c4f6:	4618      	mov	r0, r3
    c4f8:	3708      	adds	r7, #8
    c4fa:	46bd      	mov	sp, r7
    c4fc:	bd80      	pop	{r7, pc}
    c4fe:	bf00      	nop
    c500:	0001f770 	.word	0x0001f770
    c504:	00007d91 	.word	0x00007d91
    c508:	0000beb9 	.word	0x0000beb9

0000c50c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    c50c:	b580      	push	{r7, lr}
    c50e:	b082      	sub	sp, #8
    c510:	af00      	add	r7, sp, #0
    c512:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    c514:	bf00      	nop
    c516:	2103      	movs	r1, #3
    c518:	6878      	ldr	r0, [r7, #4]
    c51a:	4b06      	ldr	r3, [pc, #24]	; (c534 <_spi_wait_bus_idle+0x28>)
    c51c:	4798      	blx	r3
    c51e:	4603      	mov	r3, r0
    c520:	2b00      	cmp	r3, #0
    c522:	d0f8      	beq.n	c516 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    c524:	2103      	movs	r1, #3
    c526:	6878      	ldr	r0, [r7, #4]
    c528:	4b03      	ldr	r3, [pc, #12]	; (c538 <_spi_wait_bus_idle+0x2c>)
    c52a:	4798      	blx	r3
}
    c52c:	bf00      	nop
    c52e:	3708      	adds	r7, #8
    c530:	46bd      	mov	sp, r7
    c532:	bd80      	pop	{r7, pc}
    c534:	0000aacd 	.word	0x0000aacd
    c538:	0000ab0f 	.word	0x0000ab0f

0000c53c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    c53c:	b580      	push	{r7, lr}
    c53e:	b086      	sub	sp, #24
    c540:	af00      	add	r7, sp, #0
    c542:	60f8      	str	r0, [r7, #12]
    c544:	60b9      	str	r1, [r7, #8]
    c546:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    c548:	68bb      	ldr	r3, [r7, #8]
    c54a:	f003 0304 	and.w	r3, r3, #4
    c54e:	2b00      	cmp	r3, #0
    c550:	d101      	bne.n	c556 <_spi_rx_check_and_receive+0x1a>
		return false;
    c552:	2300      	movs	r3, #0
    c554:	e022      	b.n	c59c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    c556:	68f8      	ldr	r0, [r7, #12]
    c558:	4b12      	ldr	r3, [pc, #72]	; (c5a4 <_spi_rx_check_and_receive+0x68>)
    c55a:	4798      	blx	r3
    c55c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    c55e:	687b      	ldr	r3, [r7, #4]
    c560:	685b      	ldr	r3, [r3, #4]
    c562:	2b00      	cmp	r3, #0
    c564:	d014      	beq.n	c590 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    c566:	687b      	ldr	r3, [r7, #4]
    c568:	685b      	ldr	r3, [r3, #4]
    c56a:	1c59      	adds	r1, r3, #1
    c56c:	687a      	ldr	r2, [r7, #4]
    c56e:	6051      	str	r1, [r2, #4]
    c570:	697a      	ldr	r2, [r7, #20]
    c572:	b2d2      	uxtb	r2, r2
    c574:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    c576:	687b      	ldr	r3, [r7, #4]
    c578:	7c1b      	ldrb	r3, [r3, #16]
    c57a:	2b01      	cmp	r3, #1
    c57c:	d908      	bls.n	c590 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    c57e:	687b      	ldr	r3, [r7, #4]
    c580:	685b      	ldr	r3, [r3, #4]
    c582:	1c59      	adds	r1, r3, #1
    c584:	687a      	ldr	r2, [r7, #4]
    c586:	6051      	str	r1, [r2, #4]
    c588:	697a      	ldr	r2, [r7, #20]
    c58a:	0a12      	lsrs	r2, r2, #8
    c58c:	b2d2      	uxtb	r2, r2
    c58e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    c590:	687b      	ldr	r3, [r7, #4]
    c592:	68db      	ldr	r3, [r3, #12]
    c594:	1c5a      	adds	r2, r3, #1
    c596:	687b      	ldr	r3, [r7, #4]
    c598:	60da      	str	r2, [r3, #12]

	return true;
    c59a:	2301      	movs	r3, #1
}
    c59c:	4618      	mov	r0, r3
    c59e:	3718      	adds	r7, #24
    c5a0:	46bd      	mov	sp, r7
    c5a2:	bd80      	pop	{r7, pc}
    c5a4:	0000b0b1 	.word	0x0000b0b1

0000c5a8 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    c5a8:	b580      	push	{r7, lr}
    c5aa:	b086      	sub	sp, #24
    c5ac:	af00      	add	r7, sp, #0
    c5ae:	60f8      	str	r0, [r7, #12]
    c5b0:	60b9      	str	r1, [r7, #8]
    c5b2:	607a      	str	r2, [r7, #4]
    c5b4:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    c5b6:	68bb      	ldr	r3, [r7, #8]
    c5b8:	f003 0301 	and.w	r3, r3, #1
    c5bc:	2b00      	cmp	r3, #0
    c5be:	d028      	beq.n	c612 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    c5c0:	687b      	ldr	r3, [r7, #4]
    c5c2:	681b      	ldr	r3, [r3, #0]
    c5c4:	2b00      	cmp	r3, #0
    c5c6:	d018      	beq.n	c5fa <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    c5c8:	687b      	ldr	r3, [r7, #4]
    c5ca:	681b      	ldr	r3, [r3, #0]
    c5cc:	1c59      	adds	r1, r3, #1
    c5ce:	687a      	ldr	r2, [r7, #4]
    c5d0:	6011      	str	r1, [r2, #0]
    c5d2:	781b      	ldrb	r3, [r3, #0]
    c5d4:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    c5d6:	687b      	ldr	r3, [r7, #4]
    c5d8:	7c1b      	ldrb	r3, [r3, #16]
    c5da:	2b01      	cmp	r3, #1
    c5dc:	d90f      	bls.n	c5fe <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    c5de:	687b      	ldr	r3, [r7, #4]
    c5e0:	681b      	ldr	r3, [r3, #0]
    c5e2:	781b      	ldrb	r3, [r3, #0]
    c5e4:	021b      	lsls	r3, r3, #8
    c5e6:	461a      	mov	r2, r3
    c5e8:	697b      	ldr	r3, [r7, #20]
    c5ea:	4313      	orrs	r3, r2
    c5ec:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    c5ee:	687b      	ldr	r3, [r7, #4]
    c5f0:	681b      	ldr	r3, [r3, #0]
    c5f2:	1c5a      	adds	r2, r3, #1
    c5f4:	687b      	ldr	r3, [r7, #4]
    c5f6:	601a      	str	r2, [r3, #0]
    c5f8:	e001      	b.n	c5fe <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    c5fa:	887b      	ldrh	r3, [r7, #2]
    c5fc:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    c5fe:	687b      	ldr	r3, [r7, #4]
    c600:	689b      	ldr	r3, [r3, #8]
    c602:	1c5a      	adds	r2, r3, #1
    c604:	687b      	ldr	r3, [r7, #4]
    c606:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    c608:	6979      	ldr	r1, [r7, #20]
    c60a:	68f8      	ldr	r0, [r7, #12]
    c60c:	4b03      	ldr	r3, [pc, #12]	; (c61c <_spi_tx_check_and_send+0x74>)
    c60e:	4798      	blx	r3
    c610:	e000      	b.n	c614 <_spi_tx_check_and_send+0x6c>
		return;
    c612:	bf00      	nop
}
    c614:	3718      	adds	r7, #24
    c616:	46bd      	mov	sp, r7
    c618:	bd80      	pop	{r7, pc}
    c61a:	bf00      	nop
    c61c:	0000b095 	.word	0x0000b095

0000c620 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    c620:	b580      	push	{r7, lr}
    c622:	b082      	sub	sp, #8
    c624:	af00      	add	r7, sp, #0
    c626:	6078      	str	r0, [r7, #4]
    c628:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    c62a:	687b      	ldr	r3, [r7, #4]
    c62c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c630:	2b00      	cmp	r3, #0
    c632:	d00b      	beq.n	c64c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    c634:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c638:	6838      	ldr	r0, [r7, #0]
    c63a:	4b07      	ldr	r3, [pc, #28]	; (c658 <_spi_err_check+0x38>)
    c63c:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    c63e:	2180      	movs	r1, #128	; 0x80
    c640:	6838      	ldr	r0, [r7, #0]
    c642:	4b06      	ldr	r3, [pc, #24]	; (c65c <_spi_err_check+0x3c>)
    c644:	4798      	blx	r3
		return ERR_OVERFLOW;
    c646:	f06f 0312 	mvn.w	r3, #18
    c64a:	e000      	b.n	c64e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    c64c:	2300      	movs	r3, #0
}
    c64e:	4618      	mov	r0, r3
    c650:	3708      	adds	r7, #8
    c652:	46bd      	mov	sp, r7
    c654:	bd80      	pop	{r7, pc}
    c656:	bf00      	nop
    c658:	0000b0e9 	.word	0x0000b0e9
    c65c:	0000ab0f 	.word	0x0000ab0f

0000c660 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    c660:	b590      	push	{r4, r7, lr}
    c662:	b08b      	sub	sp, #44	; 0x2c
    c664:	af00      	add	r7, sp, #0
    c666:	6078      	str	r0, [r7, #4]
    c668:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    c66a:	687b      	ldr	r3, [r7, #4]
    c66c:	681b      	ldr	r3, [r3, #0]
    c66e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    c670:	2300      	movs	r3, #0
    c672:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    c674:	683b      	ldr	r3, [r7, #0]
    c676:	681b      	ldr	r3, [r3, #0]
    c678:	60bb      	str	r3, [r7, #8]
    c67a:	683b      	ldr	r3, [r7, #0]
    c67c:	685b      	ldr	r3, [r3, #4]
    c67e:	60fb      	str	r3, [r7, #12]
    c680:	2300      	movs	r3, #0
    c682:	613b      	str	r3, [r7, #16]
    c684:	2300      	movs	r3, #0
    c686:	617b      	str	r3, [r7, #20]
    c688:	687b      	ldr	r3, [r7, #4]
    c68a:	791b      	ldrb	r3, [r3, #4]
    c68c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    c68e:	687b      	ldr	r3, [r7, #4]
    c690:	2b00      	cmp	r3, #0
    c692:	d004      	beq.n	c69e <_spi_m_sync_trans+0x3e>
    c694:	6a3b      	ldr	r3, [r7, #32]
    c696:	2b00      	cmp	r3, #0
    c698:	d001      	beq.n	c69e <_spi_m_sync_trans+0x3e>
    c69a:	2301      	movs	r3, #1
    c69c:	e000      	b.n	c6a0 <_spi_m_sync_trans+0x40>
    c69e:	2300      	movs	r3, #0
    c6a0:	f003 0301 	and.w	r3, r3, #1
    c6a4:	b2db      	uxtb	r3, r3
    c6a6:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    c6aa:	492b      	ldr	r1, [pc, #172]	; (c758 <_spi_m_sync_trans+0xf8>)
    c6ac:	4618      	mov	r0, r3
    c6ae:	4b2b      	ldr	r3, [pc, #172]	; (c75c <_spi_m_sync_trans+0xfc>)
    c6b0:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    c6b2:	2107      	movs	r1, #7
    c6b4:	6a38      	ldr	r0, [r7, #32]
    c6b6:	4b2a      	ldr	r3, [pc, #168]	; (c760 <_spi_m_sync_trans+0x100>)
    c6b8:	4798      	blx	r3
    c6ba:	4603      	mov	r3, r0
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d002      	beq.n	c6c6 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    c6c0:	f06f 0303 	mvn.w	r3, #3
    c6c4:	e043      	b.n	c74e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    c6c6:	6a38      	ldr	r0, [r7, #32]
    c6c8:	4b26      	ldr	r3, [pc, #152]	; (c764 <_spi_m_sync_trans+0x104>)
    c6ca:	4798      	blx	r3
    c6cc:	4603      	mov	r3, r0
    c6ce:	f083 0301 	eor.w	r3, r3, #1
    c6d2:	b2db      	uxtb	r3, r3
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	d002      	beq.n	c6de <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    c6d8:	f06f 0313 	mvn.w	r3, #19
    c6dc:	e037      	b.n	c74e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    c6de:	6a38      	ldr	r0, [r7, #32]
    c6e0:	4b21      	ldr	r3, [pc, #132]	; (c768 <_spi_m_sync_trans+0x108>)
    c6e2:	4798      	blx	r3
    c6e4:	4603      	mov	r3, r0
    c6e6:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    c6e8:	f107 0308 	add.w	r3, r7, #8
    c6ec:	461a      	mov	r2, r3
    c6ee:	69f9      	ldr	r1, [r7, #28]
    c6f0:	6a38      	ldr	r0, [r7, #32]
    c6f2:	4b1e      	ldr	r3, [pc, #120]	; (c76c <_spi_m_sync_trans+0x10c>)
    c6f4:	4798      	blx	r3
    c6f6:	4603      	mov	r3, r0
    c6f8:	f083 0301 	eor.w	r3, r3, #1
    c6fc:	b2db      	uxtb	r3, r3
    c6fe:	2b00      	cmp	r3, #0
    c700:	d00b      	beq.n	c71a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    c702:	697a      	ldr	r2, [r7, #20]
    c704:	693b      	ldr	r3, [r7, #16]
    c706:	429a      	cmp	r2, r3
    c708:	d307      	bcc.n	c71a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    c70a:	687b      	ldr	r3, [r7, #4]
    c70c:	88db      	ldrh	r3, [r3, #6]
    c70e:	f107 0208 	add.w	r2, r7, #8
    c712:	69f9      	ldr	r1, [r7, #28]
    c714:	6a38      	ldr	r0, [r7, #32]
    c716:	4c16      	ldr	r4, [pc, #88]	; (c770 <_spi_m_sync_trans+0x110>)
    c718:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    c71a:	6a39      	ldr	r1, [r7, #32]
    c71c:	69f8      	ldr	r0, [r7, #28]
    c71e:	4b15      	ldr	r3, [pc, #84]	; (c774 <_spi_m_sync_trans+0x114>)
    c720:	4798      	blx	r3
    c722:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c726:	2b00      	cmp	r3, #0
    c728:	db0c      	blt.n	c744 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    c72a:	693a      	ldr	r2, [r7, #16]
    c72c:	683b      	ldr	r3, [r7, #0]
    c72e:	689b      	ldr	r3, [r3, #8]
    c730:	429a      	cmp	r2, r3
    c732:	d3d4      	bcc.n	c6de <_spi_m_sync_trans+0x7e>
    c734:	697a      	ldr	r2, [r7, #20]
    c736:	683b      	ldr	r3, [r7, #0]
    c738:	689b      	ldr	r3, [r3, #8]
    c73a:	429a      	cmp	r2, r3
    c73c:	d3cf      	bcc.n	c6de <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    c73e:	693b      	ldr	r3, [r7, #16]
    c740:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    c742:	e000      	b.n	c746 <_spi_m_sync_trans+0xe6>
			break;
    c744:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    c746:	6a38      	ldr	r0, [r7, #32]
    c748:	4b0b      	ldr	r3, [pc, #44]	; (c778 <_spi_m_sync_trans+0x118>)
    c74a:	4798      	blx	r3

	return rc;
    c74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c74e:	4618      	mov	r0, r3
    c750:	372c      	adds	r7, #44	; 0x2c
    c752:	46bd      	mov	sp, r7
    c754:	bd90      	pop	{r4, r7, pc}
    c756:	bf00      	nop
    c758:	0001f770 	.word	0x0001f770
    c75c:	00007d91 	.word	0x00007d91
    c760:	0000aa39 	.word	0x0000aa39
    c764:	0000ada9 	.word	0x0000ada9
    c768:	0000aaf5 	.word	0x0000aaf5
    c76c:	0000c53d 	.word	0x0000c53d
    c770:	0000c5a9 	.word	0x0000c5a9
    c774:	0000c621 	.word	0x0000c621
    c778:	0000c50d 	.word	0x0000c50d

0000c77c <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    c77c:	b580      	push	{r7, lr}
    c77e:	b084      	sub	sp, #16
    c780:	af00      	add	r7, sp, #0
    c782:	6078      	str	r0, [r7, #4]
    c784:	460b      	mov	r3, r1
    c786:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    c788:	687b      	ldr	r3, [r7, #4]
    c78a:	681b      	ldr	r3, [r3, #0]
    c78c:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    c78e:	687b      	ldr	r3, [r7, #4]
    c790:	2b00      	cmp	r3, #0
    c792:	d004      	beq.n	c79e <_spi_m_async_enable_tx+0x22>
    c794:	68fb      	ldr	r3, [r7, #12]
    c796:	2b00      	cmp	r3, #0
    c798:	d001      	beq.n	c79e <_spi_m_async_enable_tx+0x22>
    c79a:	2301      	movs	r3, #1
    c79c:	e000      	b.n	c7a0 <_spi_m_async_enable_tx+0x24>
    c79e:	2300      	movs	r3, #0
    c7a0:	f003 0301 	and.w	r3, r3, #1
    c7a4:	b2db      	uxtb	r3, r3
    c7a6:	f640 327c 	movw	r2, #2940	; 0xb7c
    c7aa:	4909      	ldr	r1, [pc, #36]	; (c7d0 <_spi_m_async_enable_tx+0x54>)
    c7ac:	4618      	mov	r0, r3
    c7ae:	4b09      	ldr	r3, [pc, #36]	; (c7d4 <_spi_m_async_enable_tx+0x58>)
    c7b0:	4798      	blx	r3

	if (state) {
    c7b2:	78fb      	ldrb	r3, [r7, #3]
    c7b4:	2b00      	cmp	r3, #0
    c7b6:	d003      	beq.n	c7c0 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    c7b8:	68f8      	ldr	r0, [r7, #12]
    c7ba:	4b07      	ldr	r3, [pc, #28]	; (c7d8 <_spi_m_async_enable_tx+0x5c>)
    c7bc:	4798      	blx	r3
    c7be:	e002      	b.n	c7c6 <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    c7c0:	68f8      	ldr	r0, [r7, #12]
    c7c2:	4b06      	ldr	r3, [pc, #24]	; (c7dc <_spi_m_async_enable_tx+0x60>)
    c7c4:	4798      	blx	r3
	}

	return ERR_NONE;
    c7c6:	2300      	movs	r3, #0
}
    c7c8:	4618      	mov	r0, r3
    c7ca:	3710      	adds	r7, #16
    c7cc:	46bd      	mov	sp, r7
    c7ce:	bd80      	pop	{r7, pc}
    c7d0:	0001f770 	.word	0x0001f770
    c7d4:	00007d91 	.word	0x00007d91
    c7d8:	0000abc3 	.word	0x0000abc3
    c7dc:	0000abdd 	.word	0x0000abdd

0000c7e0 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    c7e0:	b580      	push	{r7, lr}
    c7e2:	b084      	sub	sp, #16
    c7e4:	af00      	add	r7, sp, #0
    c7e6:	6078      	str	r0, [r7, #4]
    c7e8:	460b      	mov	r3, r1
    c7ea:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    c7ec:	687b      	ldr	r3, [r7, #4]
    c7ee:	681b      	ldr	r3, [r3, #0]
    c7f0:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    c7f2:	687b      	ldr	r3, [r7, #4]
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	bf14      	ite	ne
    c7f8:	2301      	movne	r3, #1
    c7fa:	2300      	moveq	r3, #0
    c7fc:	b2db      	uxtb	r3, r3
    c7fe:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    c802:	490f      	ldr	r1, [pc, #60]	; (c840 <_spi_m_async_enable_rx+0x60>)
    c804:	4618      	mov	r0, r3
    c806:	4b0f      	ldr	r3, [pc, #60]	; (c844 <_spi_m_async_enable_rx+0x64>)
    c808:	4798      	blx	r3
	ASSERT(hw);
    c80a:	68fb      	ldr	r3, [r7, #12]
    c80c:	2b00      	cmp	r3, #0
    c80e:	bf14      	ite	ne
    c810:	2301      	movne	r3, #1
    c812:	2300      	moveq	r3, #0
    c814:	b2db      	uxtb	r3, r3
    c816:	f640 3291 	movw	r2, #2961	; 0xb91
    c81a:	4909      	ldr	r1, [pc, #36]	; (c840 <_spi_m_async_enable_rx+0x60>)
    c81c:	4618      	mov	r0, r3
    c81e:	4b09      	ldr	r3, [pc, #36]	; (c844 <_spi_m_async_enable_rx+0x64>)
    c820:	4798      	blx	r3

	if (state) {
    c822:	78fb      	ldrb	r3, [r7, #3]
    c824:	2b00      	cmp	r3, #0
    c826:	d003      	beq.n	c830 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    c828:	68f8      	ldr	r0, [r7, #12]
    c82a:	4b07      	ldr	r3, [pc, #28]	; (c848 <_spi_m_async_enable_rx+0x68>)
    c82c:	4798      	blx	r3
    c82e:	e002      	b.n	c836 <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    c830:	68f8      	ldr	r0, [r7, #12]
    c832:	4b06      	ldr	r3, [pc, #24]	; (c84c <_spi_m_async_enable_rx+0x6c>)
    c834:	4798      	blx	r3
	}

	return ERR_NONE;
    c836:	2300      	movs	r3, #0
}
    c838:	4618      	mov	r0, r3
    c83a:	3710      	adds	r7, #16
    c83c:	46bd      	mov	sp, r7
    c83e:	bd80      	pop	{r7, pc}
    c840:	0001f770 	.word	0x0001f770
    c844:	00007d91 	.word	0x00007d91
    c848:	0000ac2b 	.word	0x0000ac2b
    c84c:	0000ac45 	.word	0x0000ac45

0000c850 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    c850:	b580      	push	{r7, lr}
    c852:	b082      	sub	sp, #8
    c854:	af00      	add	r7, sp, #0
    c856:	6078      	str	r0, [r7, #4]
    c858:	460b      	mov	r3, r1
    c85a:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    c85c:	687b      	ldr	r3, [r7, #4]
    c85e:	2b00      	cmp	r3, #0
    c860:	d005      	beq.n	c86e <_spi_m_async_enable_tx_complete+0x1e>
    c862:	687b      	ldr	r3, [r7, #4]
    c864:	681b      	ldr	r3, [r3, #0]
    c866:	2b00      	cmp	r3, #0
    c868:	d001      	beq.n	c86e <_spi_m_async_enable_tx_complete+0x1e>
    c86a:	2301      	movs	r3, #1
    c86c:	e000      	b.n	c870 <_spi_m_async_enable_tx_complete+0x20>
    c86e:	2300      	movs	r3, #0
    c870:	f003 0301 	and.w	r3, r3, #1
    c874:	b2db      	uxtb	r3, r3
    c876:	f640 32a3 	movw	r2, #2979	; 0xba3
    c87a:	490b      	ldr	r1, [pc, #44]	; (c8a8 <_spi_m_async_enable_tx_complete+0x58>)
    c87c:	4618      	mov	r0, r3
    c87e:	4b0b      	ldr	r3, [pc, #44]	; (c8ac <_spi_m_async_enable_tx_complete+0x5c>)
    c880:	4798      	blx	r3

	if (state) {
    c882:	78fb      	ldrb	r3, [r7, #3]
    c884:	2b00      	cmp	r3, #0
    c886:	d005      	beq.n	c894 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    c888:	687b      	ldr	r3, [r7, #4]
    c88a:	681b      	ldr	r3, [r3, #0]
    c88c:	4618      	mov	r0, r3
    c88e:	4b08      	ldr	r3, [pc, #32]	; (c8b0 <_spi_m_async_enable_tx_complete+0x60>)
    c890:	4798      	blx	r3
    c892:	e004      	b.n	c89e <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    c894:	687b      	ldr	r3, [r7, #4]
    c896:	681b      	ldr	r3, [r3, #0]
    c898:	4618      	mov	r0, r3
    c89a:	4b06      	ldr	r3, [pc, #24]	; (c8b4 <_spi_m_async_enable_tx_complete+0x64>)
    c89c:	4798      	blx	r3
	}

	return ERR_NONE;
    c89e:	2300      	movs	r3, #0
}
    c8a0:	4618      	mov	r0, r3
    c8a2:	3708      	adds	r7, #8
    c8a4:	46bd      	mov	sp, r7
    c8a6:	bd80      	pop	{r7, pc}
    c8a8:	0001f770 	.word	0x0001f770
    c8ac:	00007d91 	.word	0x00007d91
    c8b0:	0000abf7 	.word	0x0000abf7
    c8b4:	0000ac11 	.word	0x0000ac11

0000c8b8 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    c8b8:	b580      	push	{r7, lr}
    c8ba:	b082      	sub	sp, #8
    c8bc:	af00      	add	r7, sp, #0
    c8be:	6078      	str	r0, [r7, #4]
    c8c0:	460b      	mov	r3, r1
    c8c2:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    c8c4:	687b      	ldr	r3, [r7, #4]
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	d005      	beq.n	c8d6 <_spi_m_async_write_one+0x1e>
    c8ca:	687b      	ldr	r3, [r7, #4]
    c8cc:	681b      	ldr	r3, [r3, #0]
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	d001      	beq.n	c8d6 <_spi_m_async_write_one+0x1e>
    c8d2:	2301      	movs	r3, #1
    c8d4:	e000      	b.n	c8d8 <_spi_m_async_write_one+0x20>
    c8d6:	2300      	movs	r3, #0
    c8d8:	f003 0301 	and.w	r3, r3, #1
    c8dc:	b2db      	uxtb	r3, r3
    c8de:	f640 32b5 	movw	r2, #2997	; 0xbb5
    c8e2:	4908      	ldr	r1, [pc, #32]	; (c904 <_spi_m_async_write_one+0x4c>)
    c8e4:	4618      	mov	r0, r3
    c8e6:	4b08      	ldr	r3, [pc, #32]	; (c908 <_spi_m_async_write_one+0x50>)
    c8e8:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    c8ea:	687b      	ldr	r3, [r7, #4]
    c8ec:	681b      	ldr	r3, [r3, #0]
    c8ee:	887a      	ldrh	r2, [r7, #2]
    c8f0:	4611      	mov	r1, r2
    c8f2:	4618      	mov	r0, r3
    c8f4:	4b05      	ldr	r3, [pc, #20]	; (c90c <_spi_m_async_write_one+0x54>)
    c8f6:	4798      	blx	r3

	return ERR_NONE;
    c8f8:	2300      	movs	r3, #0
}
    c8fa:	4618      	mov	r0, r3
    c8fc:	3708      	adds	r7, #8
    c8fe:	46bd      	mov	sp, r7
    c900:	bd80      	pop	{r7, pc}
    c902:	bf00      	nop
    c904:	0001f770 	.word	0x0001f770
    c908:	00007d91 	.word	0x00007d91
    c90c:	0000b095 	.word	0x0000b095

0000c910 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    c910:	b580      	push	{r7, lr}
    c912:	b082      	sub	sp, #8
    c914:	af00      	add	r7, sp, #0
    c916:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c918:	687b      	ldr	r3, [r7, #4]
    c91a:	2b00      	cmp	r3, #0
    c91c:	d005      	beq.n	c92a <_spi_m_async_read_one+0x1a>
    c91e:	687b      	ldr	r3, [r7, #4]
    c920:	681b      	ldr	r3, [r3, #0]
    c922:	2b00      	cmp	r3, #0
    c924:	d001      	beq.n	c92a <_spi_m_async_read_one+0x1a>
    c926:	2301      	movs	r3, #1
    c928:	e000      	b.n	c92c <_spi_m_async_read_one+0x1c>
    c92a:	2300      	movs	r3, #0
    c92c:	f003 0301 	and.w	r3, r3, #1
    c930:	b2db      	uxtb	r3, r3
    c932:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    c936:	4907      	ldr	r1, [pc, #28]	; (c954 <_spi_m_async_read_one+0x44>)
    c938:	4618      	mov	r0, r3
    c93a:	4b07      	ldr	r3, [pc, #28]	; (c958 <_spi_m_async_read_one+0x48>)
    c93c:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    c93e:	687b      	ldr	r3, [r7, #4]
    c940:	681b      	ldr	r3, [r3, #0]
    c942:	4618      	mov	r0, r3
    c944:	4b05      	ldr	r3, [pc, #20]	; (c95c <_spi_m_async_read_one+0x4c>)
    c946:	4798      	blx	r3
    c948:	4603      	mov	r3, r0
    c94a:	b29b      	uxth	r3, r3
}
    c94c:	4618      	mov	r0, r3
    c94e:	3708      	adds	r7, #8
    c950:	46bd      	mov	sp, r7
    c952:	bd80      	pop	{r7, pc}
    c954:	0001f770 	.word	0x0001f770
    c958:	00007d91 	.word	0x00007d91
    c95c:	0000b0b1 	.word	0x0000b0b1

0000c960 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    c960:	b580      	push	{r7, lr}
    c962:	b086      	sub	sp, #24
    c964:	af00      	add	r7, sp, #0
    c966:	60f8      	str	r0, [r7, #12]
    c968:	460b      	mov	r3, r1
    c96a:	607a      	str	r2, [r7, #4]
    c96c:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    c96e:	68fb      	ldr	r3, [r7, #12]
    c970:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    c972:	68fb      	ldr	r3, [r7, #12]
    c974:	2b00      	cmp	r3, #0
    c976:	d004      	beq.n	c982 <_spi_m_async_register_callback+0x22>
    c978:	7afb      	ldrb	r3, [r7, #11]
    c97a:	2b03      	cmp	r3, #3
    c97c:	d801      	bhi.n	c982 <_spi_m_async_register_callback+0x22>
    c97e:	2301      	movs	r3, #1
    c980:	e000      	b.n	c984 <_spi_m_async_register_callback+0x24>
    c982:	2300      	movs	r3, #0
    c984:	f003 0301 	and.w	r3, r3, #1
    c988:	b2db      	uxtb	r3, r3
    c98a:	f640 32e9 	movw	r2, #3049	; 0xbe9
    c98e:	4909      	ldr	r1, [pc, #36]	; (c9b4 <_spi_m_async_register_callback+0x54>)
    c990:	4618      	mov	r0, r3
    c992:	4b09      	ldr	r3, [pc, #36]	; (c9b8 <_spi_m_async_register_callback+0x58>)
    c994:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    c996:	697b      	ldr	r3, [r7, #20]
    c998:	3308      	adds	r3, #8
    c99a:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    c99c:	7afb      	ldrb	r3, [r7, #11]
    c99e:	009b      	lsls	r3, r3, #2
    c9a0:	693a      	ldr	r2, [r7, #16]
    c9a2:	4413      	add	r3, r2
    c9a4:	687a      	ldr	r2, [r7, #4]
    c9a6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    c9a8:	2300      	movs	r3, #0
}
    c9aa:	4618      	mov	r0, r3
    c9ac:	3718      	adds	r7, #24
    c9ae:	46bd      	mov	sp, r7
    c9b0:	bd80      	pop	{r7, pc}
    c9b2:	bf00      	nop
    c9b4:	0001f770 	.word	0x0001f770
    c9b8:	00007d91 	.word	0x00007d91

0000c9bc <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    c9bc:	b580      	push	{r7, lr}
    c9be:	b082      	sub	sp, #8
    c9c0:	af00      	add	r7, sp, #0
    c9c2:	6078      	str	r0, [r7, #4]
    c9c4:	460b      	mov	r3, r1
    c9c6:	70fb      	strb	r3, [r7, #3]
    c9c8:	4613      	mov	r3, r2
    c9ca:	70bb      	strb	r3, [r7, #2]
	ASSERT(device);
    c9cc:	687b      	ldr	r3, [r7, #4]
    c9ce:	2b00      	cmp	r3, #0
    c9d0:	bf14      	ite	ne
    c9d2:	2301      	movne	r3, #1
    c9d4:	2300      	moveq	r3, #0
    c9d6:	b2db      	uxtb	r3, r3
    c9d8:	f640 422a 	movw	r2, #3114	; 0xc2a
    c9dc:	4908      	ldr	r1, [pc, #32]	; (ca00 <_spi_m_async_set_irq_state+0x44>)
    c9de:	4618      	mov	r0, r3
    c9e0:	4b08      	ldr	r3, [pc, #32]	; (ca04 <_spi_m_async_set_irq_state+0x48>)
    c9e2:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
    c9e4:	78fb      	ldrb	r3, [r7, #3]
    c9e6:	2b03      	cmp	r3, #3
    c9e8:	d106      	bne.n	c9f8 <_spi_m_async_set_irq_state+0x3c>
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    c9ea:	687b      	ldr	r3, [r7, #4]
    c9ec:	681b      	ldr	r3, [r3, #0]
    c9ee:	78ba      	ldrb	r2, [r7, #2]
    c9f0:	4611      	mov	r1, r2
    c9f2:	4618      	mov	r0, r3
    c9f4:	4b04      	ldr	r3, [pc, #16]	; (ca08 <_spi_m_async_set_irq_state+0x4c>)
    c9f6:	4798      	blx	r3
	}
}
    c9f8:	bf00      	nop
    c9fa:	3708      	adds	r7, #8
    c9fc:	46bd      	mov	sp, r7
    c9fe:	bd80      	pop	{r7, pc}
    ca00:	0001f770 	.word	0x0001f770
    ca04:	00007d91 	.word	0x00007d91
    ca08:	0000ac5f 	.word	0x0000ac5f

0000ca0c <__NVIC_EnableIRQ>:
{
    ca0c:	b480      	push	{r7}
    ca0e:	b083      	sub	sp, #12
    ca10:	af00      	add	r7, sp, #0
    ca12:	4603      	mov	r3, r0
    ca14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ca16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	db0b      	blt.n	ca36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ca1e:	4909      	ldr	r1, [pc, #36]	; (ca44 <__NVIC_EnableIRQ+0x38>)
    ca20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ca24:	095b      	lsrs	r3, r3, #5
    ca26:	88fa      	ldrh	r2, [r7, #6]
    ca28:	f002 021f 	and.w	r2, r2, #31
    ca2c:	2001      	movs	r0, #1
    ca2e:	fa00 f202 	lsl.w	r2, r0, r2
    ca32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca36:	bf00      	nop
    ca38:	370c      	adds	r7, #12
    ca3a:	46bd      	mov	sp, r7
    ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca40:	4770      	bx	lr
    ca42:	bf00      	nop
    ca44:	e000e100 	.word	0xe000e100

0000ca48 <__NVIC_DisableIRQ>:
{
    ca48:	b480      	push	{r7}
    ca4a:	b083      	sub	sp, #12
    ca4c:	af00      	add	r7, sp, #0
    ca4e:	4603      	mov	r3, r0
    ca50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ca52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ca56:	2b00      	cmp	r3, #0
    ca58:	db10      	blt.n	ca7c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ca5a:	490b      	ldr	r1, [pc, #44]	; (ca88 <__NVIC_DisableIRQ+0x40>)
    ca5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ca60:	095b      	lsrs	r3, r3, #5
    ca62:	88fa      	ldrh	r2, [r7, #6]
    ca64:	f002 021f 	and.w	r2, r2, #31
    ca68:	2001      	movs	r0, #1
    ca6a:	fa00 f202 	lsl.w	r2, r0, r2
    ca6e:	3320      	adds	r3, #32
    ca70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    ca74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ca78:	f3bf 8f6f 	isb	sy
}
    ca7c:	bf00      	nop
    ca7e:	370c      	adds	r7, #12
    ca80:	46bd      	mov	sp, r7
    ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca86:	4770      	bx	lr
    ca88:	e000e100 	.word	0xe000e100

0000ca8c <__NVIC_ClearPendingIRQ>:
{
    ca8c:	b480      	push	{r7}
    ca8e:	b083      	sub	sp, #12
    ca90:	af00      	add	r7, sp, #0
    ca92:	4603      	mov	r3, r0
    ca94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ca96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ca9a:	2b00      	cmp	r3, #0
    ca9c:	db0c      	blt.n	cab8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ca9e:	4909      	ldr	r1, [pc, #36]	; (cac4 <__NVIC_ClearPendingIRQ+0x38>)
    caa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    caa4:	095b      	lsrs	r3, r3, #5
    caa6:	88fa      	ldrh	r2, [r7, #6]
    caa8:	f002 021f 	and.w	r2, r2, #31
    caac:	2001      	movs	r0, #1
    caae:	fa00 f202 	lsl.w	r2, r0, r2
    cab2:	3360      	adds	r3, #96	; 0x60
    cab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cab8:	bf00      	nop
    caba:	370c      	adds	r7, #12
    cabc:	46bd      	mov	sp, r7
    cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
    cac2:	4770      	bx	lr
    cac4:	e000e100 	.word	0xe000e100

0000cac8 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    cac8:	b480      	push	{r7}
    caca:	b083      	sub	sp, #12
    cacc:	af00      	add	r7, sp, #0
    cace:	6078      	str	r0, [r7, #4]
    cad0:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    cad2:	bf00      	nop
    cad4:	687b      	ldr	r3, [r7, #4]
    cad6:	691a      	ldr	r2, [r3, #16]
    cad8:	683b      	ldr	r3, [r7, #0]
    cada:	4013      	ands	r3, r2
    cadc:	2b00      	cmp	r3, #0
    cade:	d1f9      	bne.n	cad4 <hri_tc_wait_for_sync+0xc>
	};
}
    cae0:	bf00      	nop
    cae2:	370c      	adds	r7, #12
    cae4:	46bd      	mov	sp, r7
    cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    caea:	4770      	bx	lr

0000caec <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    caec:	b480      	push	{r7}
    caee:	b083      	sub	sp, #12
    caf0:	af00      	add	r7, sp, #0
    caf2:	6078      	str	r0, [r7, #4]
    caf4:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    caf6:	687b      	ldr	r3, [r7, #4]
    caf8:	691a      	ldr	r2, [r3, #16]
    cafa:	683b      	ldr	r3, [r7, #0]
    cafc:	4013      	ands	r3, r2
    cafe:	2b00      	cmp	r3, #0
    cb00:	bf14      	ite	ne
    cb02:	2301      	movne	r3, #1
    cb04:	2300      	moveq	r3, #0
    cb06:	b2db      	uxtb	r3, r3
}
    cb08:	4618      	mov	r0, r3
    cb0a:	370c      	adds	r7, #12
    cb0c:	46bd      	mov	sp, r7
    cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb12:	4770      	bx	lr

0000cb14 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    cb14:	b480      	push	{r7}
    cb16:	b083      	sub	sp, #12
    cb18:	af00      	add	r7, sp, #0
    cb1a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    cb1c:	687b      	ldr	r3, [r7, #4]
    cb1e:	7a9b      	ldrb	r3, [r3, #10]
    cb20:	b2db      	uxtb	r3, r3
    cb22:	f003 0301 	and.w	r3, r3, #1
    cb26:	2b00      	cmp	r3, #0
    cb28:	bf14      	ite	ne
    cb2a:	2301      	movne	r3, #1
    cb2c:	2300      	moveq	r3, #0
    cb2e:	b2db      	uxtb	r3, r3
}
    cb30:	4618      	mov	r0, r3
    cb32:	370c      	adds	r7, #12
    cb34:	46bd      	mov	sp, r7
    cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb3a:	4770      	bx	lr

0000cb3c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    cb3c:	b480      	push	{r7}
    cb3e:	b083      	sub	sp, #12
    cb40:	af00      	add	r7, sp, #0
    cb42:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    cb44:	687b      	ldr	r3, [r7, #4]
    cb46:	2201      	movs	r2, #1
    cb48:	729a      	strb	r2, [r3, #10]
}
    cb4a:	bf00      	nop
    cb4c:	370c      	adds	r7, #12
    cb4e:	46bd      	mov	sp, r7
    cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb54:	4770      	bx	lr

0000cb56 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    cb56:	b480      	push	{r7}
    cb58:	b083      	sub	sp, #12
    cb5a:	af00      	add	r7, sp, #0
    cb5c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    cb5e:	687b      	ldr	r3, [r7, #4]
    cb60:	2202      	movs	r2, #2
    cb62:	729a      	strb	r2, [r3, #10]
}
    cb64:	bf00      	nop
    cb66:	370c      	adds	r7, #12
    cb68:	46bd      	mov	sp, r7
    cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb6e:	4770      	bx	lr

0000cb70 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    cb70:	b480      	push	{r7}
    cb72:	b083      	sub	sp, #12
    cb74:	af00      	add	r7, sp, #0
    cb76:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    cb78:	687b      	ldr	r3, [r7, #4]
    cb7a:	2201      	movs	r2, #1
    cb7c:	725a      	strb	r2, [r3, #9]
}
    cb7e:	bf00      	nop
    cb80:	370c      	adds	r7, #12
    cb82:	46bd      	mov	sp, r7
    cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb88:	4770      	bx	lr

0000cb8a <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    cb8a:	b480      	push	{r7}
    cb8c:	b083      	sub	sp, #12
    cb8e:	af00      	add	r7, sp, #0
    cb90:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    cb92:	687b      	ldr	r3, [r7, #4]
    cb94:	7a5b      	ldrb	r3, [r3, #9]
    cb96:	b2db      	uxtb	r3, r3
    cb98:	085b      	lsrs	r3, r3, #1
    cb9a:	f003 0301 	and.w	r3, r3, #1
    cb9e:	2b00      	cmp	r3, #0
    cba0:	bf14      	ite	ne
    cba2:	2301      	movne	r3, #1
    cba4:	2300      	moveq	r3, #0
    cba6:	b2db      	uxtb	r3, r3
}
    cba8:	4618      	mov	r0, r3
    cbaa:	370c      	adds	r7, #12
    cbac:	46bd      	mov	sp, r7
    cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbb2:	4770      	bx	lr

0000cbb4 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    cbb4:	b580      	push	{r7, lr}
    cbb6:	b082      	sub	sp, #8
    cbb8:	af00      	add	r7, sp, #0
    cbba:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    cbbc:	687b      	ldr	r3, [r7, #4]
    cbbe:	681b      	ldr	r3, [r3, #0]
    cbc0:	f043 0202 	orr.w	r2, r3, #2
    cbc4:	687b      	ldr	r3, [r7, #4]
    cbc6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cbc8:	2103      	movs	r1, #3
    cbca:	6878      	ldr	r0, [r7, #4]
    cbcc:	4b02      	ldr	r3, [pc, #8]	; (cbd8 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    cbce:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cbd0:	bf00      	nop
    cbd2:	3708      	adds	r7, #8
    cbd4:	46bd      	mov	sp, r7
    cbd6:	bd80      	pop	{r7, pc}
    cbd8:	0000cac9 	.word	0x0000cac9

0000cbdc <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    cbdc:	b580      	push	{r7, lr}
    cbde:	b084      	sub	sp, #16
    cbe0:	af00      	add	r7, sp, #0
    cbe2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cbe4:	2103      	movs	r1, #3
    cbe6:	6878      	ldr	r0, [r7, #4]
    cbe8:	4b09      	ldr	r3, [pc, #36]	; (cc10 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    cbea:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    cbec:	687b      	ldr	r3, [r7, #4]
    cbee:	681b      	ldr	r3, [r3, #0]
    cbf0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    cbf2:	68fb      	ldr	r3, [r7, #12]
    cbf4:	085b      	lsrs	r3, r3, #1
    cbf6:	f003 0301 	and.w	r3, r3, #1
    cbfa:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    cbfc:	68fb      	ldr	r3, [r7, #12]
    cbfe:	2b00      	cmp	r3, #0
    cc00:	bf14      	ite	ne
    cc02:	2301      	movne	r3, #1
    cc04:	2300      	moveq	r3, #0
    cc06:	b2db      	uxtb	r3, r3
}
    cc08:	4618      	mov	r0, r3
    cc0a:	3710      	adds	r7, #16
    cc0c:	46bd      	mov	sp, r7
    cc0e:	bd80      	pop	{r7, pc}
    cc10:	0000cac9 	.word	0x0000cac9

0000cc14 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    cc14:	b580      	push	{r7, lr}
    cc16:	b082      	sub	sp, #8
    cc18:	af00      	add	r7, sp, #0
    cc1a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    cc1c:	687b      	ldr	r3, [r7, #4]
    cc1e:	681b      	ldr	r3, [r3, #0]
    cc20:	f023 0202 	bic.w	r2, r3, #2
    cc24:	687b      	ldr	r3, [r7, #4]
    cc26:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cc28:	2103      	movs	r1, #3
    cc2a:	6878      	ldr	r0, [r7, #4]
    cc2c:	4b02      	ldr	r3, [pc, #8]	; (cc38 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    cc2e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cc30:	bf00      	nop
    cc32:	3708      	adds	r7, #8
    cc34:	46bd      	mov	sp, r7
    cc36:	bd80      	pop	{r7, pc}
    cc38:	0000cac9 	.word	0x0000cac9

0000cc3c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    cc3c:	b580      	push	{r7, lr}
    cc3e:	b084      	sub	sp, #16
    cc40:	af00      	add	r7, sp, #0
    cc42:	6078      	str	r0, [r7, #4]
    cc44:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cc46:	2103      	movs	r1, #3
    cc48:	6878      	ldr	r0, [r7, #4]
    cc4a:	4b07      	ldr	r3, [pc, #28]	; (cc68 <hri_tc_get_CTRLA_reg+0x2c>)
    cc4c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    cc4e:	687b      	ldr	r3, [r7, #4]
    cc50:	681b      	ldr	r3, [r3, #0]
    cc52:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    cc54:	68fa      	ldr	r2, [r7, #12]
    cc56:	683b      	ldr	r3, [r7, #0]
    cc58:	4013      	ands	r3, r2
    cc5a:	60fb      	str	r3, [r7, #12]
	return tmp;
    cc5c:	68fb      	ldr	r3, [r7, #12]
}
    cc5e:	4618      	mov	r0, r3
    cc60:	3710      	adds	r7, #16
    cc62:	46bd      	mov	sp, r7
    cc64:	bd80      	pop	{r7, pc}
    cc66:	bf00      	nop
    cc68:	0000cac9 	.word	0x0000cac9

0000cc6c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    cc6c:	b580      	push	{r7, lr}
    cc6e:	b082      	sub	sp, #8
    cc70:	af00      	add	r7, sp, #0
    cc72:	6078      	str	r0, [r7, #4]
    cc74:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    cc76:	687b      	ldr	r3, [r7, #4]
    cc78:	683a      	ldr	r2, [r7, #0]
    cc7a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cc7c:	2103      	movs	r1, #3
    cc7e:	6878      	ldr	r0, [r7, #4]
    cc80:	4b02      	ldr	r3, [pc, #8]	; (cc8c <hri_tc_write_CTRLA_reg+0x20>)
    cc82:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cc84:	bf00      	nop
    cc86:	3708      	adds	r7, #8
    cc88:	46bd      	mov	sp, r7
    cc8a:	bd80      	pop	{r7, pc}
    cc8c:	0000cac9 	.word	0x0000cac9

0000cc90 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    cc90:	b480      	push	{r7}
    cc92:	b083      	sub	sp, #12
    cc94:	af00      	add	r7, sp, #0
    cc96:	6078      	str	r0, [r7, #4]
    cc98:	460b      	mov	r3, r1
    cc9a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    cc9c:	687b      	ldr	r3, [r7, #4]
    cc9e:	887a      	ldrh	r2, [r7, #2]
    cca0:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    cca2:	bf00      	nop
    cca4:	370c      	adds	r7, #12
    cca6:	46bd      	mov	sp, r7
    cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
    ccac:	4770      	bx	lr

0000ccae <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    ccae:	b480      	push	{r7}
    ccb0:	b083      	sub	sp, #12
    ccb2:	af00      	add	r7, sp, #0
    ccb4:	6078      	str	r0, [r7, #4]
    ccb6:	460b      	mov	r3, r1
    ccb8:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    ccba:	687b      	ldr	r3, [r7, #4]
    ccbc:	78fa      	ldrb	r2, [r7, #3]
    ccbe:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    ccc0:	bf00      	nop
    ccc2:	370c      	adds	r7, #12
    ccc4:	46bd      	mov	sp, r7
    ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    ccca:	4770      	bx	lr

0000cccc <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    cccc:	b480      	push	{r7}
    ccce:	b083      	sub	sp, #12
    ccd0:	af00      	add	r7, sp, #0
    ccd2:	6078      	str	r0, [r7, #4]
    ccd4:	460b      	mov	r3, r1
    ccd6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    ccd8:	687b      	ldr	r3, [r7, #4]
    ccda:	78fa      	ldrb	r2, [r7, #3]
    ccdc:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    ccde:	bf00      	nop
    cce0:	370c      	adds	r7, #12
    cce2:	46bd      	mov	sp, r7
    cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cce8:	4770      	bx	lr
	...

0000ccec <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    ccec:	b580      	push	{r7, lr}
    ccee:	b082      	sub	sp, #8
    ccf0:	af00      	add	r7, sp, #0
    ccf2:	6078      	str	r0, [r7, #4]
    ccf4:	460b      	mov	r3, r1
    ccf6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    ccf8:	687b      	ldr	r3, [r7, #4]
    ccfa:	78fa      	ldrb	r2, [r7, #3]
    ccfc:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    ccfe:	2120      	movs	r1, #32
    cd00:	6878      	ldr	r0, [r7, #4]
    cd02:	4b03      	ldr	r3, [pc, #12]	; (cd10 <hri_tccount8_write_PER_reg+0x24>)
    cd04:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cd06:	bf00      	nop
    cd08:	3708      	adds	r7, #8
    cd0a:	46bd      	mov	sp, r7
    cd0c:	bd80      	pop	{r7, pc}
    cd0e:	bf00      	nop
    cd10:	0000cac9 	.word	0x0000cac9

0000cd14 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    cd14:	b580      	push	{r7, lr}
    cd16:	b082      	sub	sp, #8
    cd18:	af00      	add	r7, sp, #0
    cd1a:	6078      	str	r0, [r7, #4]
    cd1c:	460b      	mov	r3, r1
    cd1e:	70fb      	strb	r3, [r7, #3]
    cd20:	4613      	mov	r3, r2
    cd22:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    cd24:	78fb      	ldrb	r3, [r7, #3]
    cd26:	687a      	ldr	r2, [r7, #4]
    cd28:	4413      	add	r3, r2
    cd2a:	78ba      	ldrb	r2, [r7, #2]
    cd2c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    cd2e:	21c0      	movs	r1, #192	; 0xc0
    cd30:	6878      	ldr	r0, [r7, #4]
    cd32:	4b03      	ldr	r3, [pc, #12]	; (cd40 <hri_tccount8_write_CC_reg+0x2c>)
    cd34:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cd36:	bf00      	nop
    cd38:	3708      	adds	r7, #8
    cd3a:	46bd      	mov	sp, r7
    cd3c:	bd80      	pop	{r7, pc}
    cd3e:	bf00      	nop
    cd40:	0000cac9 	.word	0x0000cac9

0000cd44 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    cd44:	b580      	push	{r7, lr}
    cd46:	b082      	sub	sp, #8
    cd48:	af00      	add	r7, sp, #0
    cd4a:	6078      	str	r0, [r7, #4]
    cd4c:	460b      	mov	r3, r1
    cd4e:	70fb      	strb	r3, [r7, #3]
    cd50:	4613      	mov	r3, r2
    cd52:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    cd54:	78fb      	ldrb	r3, [r7, #3]
    cd56:	687a      	ldr	r2, [r7, #4]
    cd58:	330c      	adds	r3, #12
    cd5a:	005b      	lsls	r3, r3, #1
    cd5c:	4413      	add	r3, r2
    cd5e:	883a      	ldrh	r2, [r7, #0]
    cd60:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    cd62:	21c0      	movs	r1, #192	; 0xc0
    cd64:	6878      	ldr	r0, [r7, #4]
    cd66:	4b03      	ldr	r3, [pc, #12]	; (cd74 <hri_tccount16_write_CC_reg+0x30>)
    cd68:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cd6a:	bf00      	nop
    cd6c:	3708      	adds	r7, #8
    cd6e:	46bd      	mov	sp, r7
    cd70:	bd80      	pop	{r7, pc}
    cd72:	bf00      	nop
    cd74:	0000cac9 	.word	0x0000cac9

0000cd78 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    cd78:	b580      	push	{r7, lr}
    cd7a:	b084      	sub	sp, #16
    cd7c:	af00      	add	r7, sp, #0
    cd7e:	60f8      	str	r0, [r7, #12]
    cd80:	460b      	mov	r3, r1
    cd82:	607a      	str	r2, [r7, #4]
    cd84:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    cd86:	7afb      	ldrb	r3, [r7, #11]
    cd88:	68fa      	ldr	r2, [r7, #12]
    cd8a:	3306      	adds	r3, #6
    cd8c:	009b      	lsls	r3, r3, #2
    cd8e:	4413      	add	r3, r2
    cd90:	687a      	ldr	r2, [r7, #4]
    cd92:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    cd94:	21c0      	movs	r1, #192	; 0xc0
    cd96:	68f8      	ldr	r0, [r7, #12]
    cd98:	4b02      	ldr	r3, [pc, #8]	; (cda4 <hri_tccount32_write_CC_reg+0x2c>)
    cd9a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cd9c:	bf00      	nop
    cd9e:	3710      	adds	r7, #16
    cda0:	46bd      	mov	sp, r7
    cda2:	bd80      	pop	{r7, pc}
    cda4:	0000cac9 	.word	0x0000cac9

0000cda8 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    cda8:	b580      	push	{r7, lr}
    cdaa:	b084      	sub	sp, #16
    cdac:	af00      	add	r7, sp, #0
    cdae:	6078      	str	r0, [r7, #4]
    cdb0:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    cdb2:	6838      	ldr	r0, [r7, #0]
    cdb4:	4b93      	ldr	r3, [pc, #588]	; (d004 <_timer_init+0x25c>)
    cdb6:	4798      	blx	r3
    cdb8:	4603      	mov	r3, r0
    cdba:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    cdbc:	687b      	ldr	r3, [r7, #4]
    cdbe:	683a      	ldr	r2, [r7, #0]
    cdc0:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    cdc2:	2299      	movs	r2, #153	; 0x99
    cdc4:	4990      	ldr	r1, [pc, #576]	; (d008 <_timer_init+0x260>)
    cdc6:	2001      	movs	r0, #1
    cdc8:	4b90      	ldr	r3, [pc, #576]	; (d00c <_timer_init+0x264>)
    cdca:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    cdcc:	2101      	movs	r1, #1
    cdce:	6838      	ldr	r0, [r7, #0]
    cdd0:	4b8f      	ldr	r3, [pc, #572]	; (d010 <_timer_init+0x268>)
    cdd2:	4798      	blx	r3
    cdd4:	4603      	mov	r3, r0
    cdd6:	f083 0301 	eor.w	r3, r3, #1
    cdda:	b2db      	uxtb	r3, r3
    cddc:	2b00      	cmp	r3, #0
    cdde:	d011      	beq.n	ce04 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    cde0:	2102      	movs	r1, #2
    cde2:	6838      	ldr	r0, [r7, #0]
    cde4:	4b8b      	ldr	r3, [pc, #556]	; (d014 <_timer_init+0x26c>)
    cde6:	4798      	blx	r3
    cde8:	4603      	mov	r3, r0
    cdea:	2b00      	cmp	r3, #0
    cdec:	d006      	beq.n	cdfc <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    cdee:	6838      	ldr	r0, [r7, #0]
    cdf0:	4b89      	ldr	r3, [pc, #548]	; (d018 <_timer_init+0x270>)
    cdf2:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    cdf4:	2102      	movs	r1, #2
    cdf6:	6838      	ldr	r0, [r7, #0]
    cdf8:	4b88      	ldr	r3, [pc, #544]	; (d01c <_timer_init+0x274>)
    cdfa:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    cdfc:	2101      	movs	r1, #1
    cdfe:	6838      	ldr	r0, [r7, #0]
    ce00:	4b87      	ldr	r3, [pc, #540]	; (d020 <_timer_init+0x278>)
    ce02:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    ce04:	2101      	movs	r1, #1
    ce06:	6838      	ldr	r0, [r7, #0]
    ce08:	4b84      	ldr	r3, [pc, #528]	; (d01c <_timer_init+0x274>)
    ce0a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    ce0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ce10:	4984      	ldr	r1, [pc, #528]	; (d024 <_timer_init+0x27c>)
    ce12:	4613      	mov	r3, r2
    ce14:	009b      	lsls	r3, r3, #2
    ce16:	4413      	add	r3, r2
    ce18:	009b      	lsls	r3, r3, #2
    ce1a:	440b      	add	r3, r1
    ce1c:	3304      	adds	r3, #4
    ce1e:	681b      	ldr	r3, [r3, #0]
    ce20:	4619      	mov	r1, r3
    ce22:	6838      	ldr	r0, [r7, #0]
    ce24:	4b7e      	ldr	r3, [pc, #504]	; (d020 <_timer_init+0x278>)
    ce26:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    ce28:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ce2c:	497d      	ldr	r1, [pc, #500]	; (d024 <_timer_init+0x27c>)
    ce2e:	4613      	mov	r3, r2
    ce30:	009b      	lsls	r3, r3, #2
    ce32:	4413      	add	r3, r2
    ce34:	009b      	lsls	r3, r3, #2
    ce36:	440b      	add	r3, r1
    ce38:	330a      	adds	r3, #10
    ce3a:	781b      	ldrb	r3, [r3, #0]
    ce3c:	4619      	mov	r1, r3
    ce3e:	6838      	ldr	r0, [r7, #0]
    ce40:	4b79      	ldr	r3, [pc, #484]	; (d028 <_timer_init+0x280>)
    ce42:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    ce44:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ce48:	4976      	ldr	r1, [pc, #472]	; (d024 <_timer_init+0x27c>)
    ce4a:	4613      	mov	r3, r2
    ce4c:	009b      	lsls	r3, r3, #2
    ce4e:	4413      	add	r3, r2
    ce50:	009b      	lsls	r3, r3, #2
    ce52:	440b      	add	r3, r1
    ce54:	3308      	adds	r3, #8
    ce56:	881b      	ldrh	r3, [r3, #0]
    ce58:	4619      	mov	r1, r3
    ce5a:	6838      	ldr	r0, [r7, #0]
    ce5c:	4b73      	ldr	r3, [pc, #460]	; (d02c <_timer_init+0x284>)
    ce5e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    ce60:	2101      	movs	r1, #1
    ce62:	6838      	ldr	r0, [r7, #0]
    ce64:	4b72      	ldr	r3, [pc, #456]	; (d030 <_timer_init+0x288>)
    ce66:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    ce68:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ce6c:	496d      	ldr	r1, [pc, #436]	; (d024 <_timer_init+0x27c>)
    ce6e:	4613      	mov	r3, r2
    ce70:	009b      	lsls	r3, r3, #2
    ce72:	4413      	add	r3, r2
    ce74:	009b      	lsls	r3, r3, #2
    ce76:	440b      	add	r3, r1
    ce78:	3304      	adds	r3, #4
    ce7a:	681b      	ldr	r3, [r3, #0]
    ce7c:	f003 030c 	and.w	r3, r3, #12
    ce80:	2b08      	cmp	r3, #8
    ce82:	d11e      	bne.n	cec2 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    ce84:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ce88:	4966      	ldr	r1, [pc, #408]	; (d024 <_timer_init+0x27c>)
    ce8a:	4613      	mov	r3, r2
    ce8c:	009b      	lsls	r3, r3, #2
    ce8e:	4413      	add	r3, r2
    ce90:	009b      	lsls	r3, r3, #2
    ce92:	440b      	add	r3, r1
    ce94:	330c      	adds	r3, #12
    ce96:	681b      	ldr	r3, [r3, #0]
    ce98:	461a      	mov	r2, r3
    ce9a:	2100      	movs	r1, #0
    ce9c:	6838      	ldr	r0, [r7, #0]
    ce9e:	4b65      	ldr	r3, [pc, #404]	; (d034 <_timer_init+0x28c>)
    cea0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    cea2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cea6:	495f      	ldr	r1, [pc, #380]	; (d024 <_timer_init+0x27c>)
    cea8:	4613      	mov	r3, r2
    ceaa:	009b      	lsls	r3, r3, #2
    ceac:	4413      	add	r3, r2
    ceae:	009b      	lsls	r3, r3, #2
    ceb0:	440b      	add	r3, r1
    ceb2:	3310      	adds	r3, #16
    ceb4:	681b      	ldr	r3, [r3, #0]
    ceb6:	461a      	mov	r2, r3
    ceb8:	2101      	movs	r1, #1
    ceba:	6838      	ldr	r0, [r7, #0]
    cebc:	4b5d      	ldr	r3, [pc, #372]	; (d034 <_timer_init+0x28c>)
    cebe:	4798      	blx	r3
    cec0:	e06a      	b.n	cf98 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    cec2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cec6:	4957      	ldr	r1, [pc, #348]	; (d024 <_timer_init+0x27c>)
    cec8:	4613      	mov	r3, r2
    ceca:	009b      	lsls	r3, r3, #2
    cecc:	4413      	add	r3, r2
    cece:	009b      	lsls	r3, r3, #2
    ced0:	440b      	add	r3, r1
    ced2:	3304      	adds	r3, #4
    ced4:	681b      	ldr	r3, [r3, #0]
    ced6:	f003 030c 	and.w	r3, r3, #12
    ceda:	2b00      	cmp	r3, #0
    cedc:	d120      	bne.n	cf20 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    cede:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cee2:	4950      	ldr	r1, [pc, #320]	; (d024 <_timer_init+0x27c>)
    cee4:	4613      	mov	r3, r2
    cee6:	009b      	lsls	r3, r3, #2
    cee8:	4413      	add	r3, r2
    ceea:	009b      	lsls	r3, r3, #2
    ceec:	440b      	add	r3, r1
    ceee:	330c      	adds	r3, #12
    cef0:	681b      	ldr	r3, [r3, #0]
    cef2:	b29b      	uxth	r3, r3
    cef4:	461a      	mov	r2, r3
    cef6:	2100      	movs	r1, #0
    cef8:	6838      	ldr	r0, [r7, #0]
    cefa:	4b4f      	ldr	r3, [pc, #316]	; (d038 <_timer_init+0x290>)
    cefc:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    cefe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cf02:	4948      	ldr	r1, [pc, #288]	; (d024 <_timer_init+0x27c>)
    cf04:	4613      	mov	r3, r2
    cf06:	009b      	lsls	r3, r3, #2
    cf08:	4413      	add	r3, r2
    cf0a:	009b      	lsls	r3, r3, #2
    cf0c:	440b      	add	r3, r1
    cf0e:	3310      	adds	r3, #16
    cf10:	681b      	ldr	r3, [r3, #0]
    cf12:	b29b      	uxth	r3, r3
    cf14:	461a      	mov	r2, r3
    cf16:	2101      	movs	r1, #1
    cf18:	6838      	ldr	r0, [r7, #0]
    cf1a:	4b47      	ldr	r3, [pc, #284]	; (d038 <_timer_init+0x290>)
    cf1c:	4798      	blx	r3
    cf1e:	e03b      	b.n	cf98 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    cf20:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cf24:	493f      	ldr	r1, [pc, #252]	; (d024 <_timer_init+0x27c>)
    cf26:	4613      	mov	r3, r2
    cf28:	009b      	lsls	r3, r3, #2
    cf2a:	4413      	add	r3, r2
    cf2c:	009b      	lsls	r3, r3, #2
    cf2e:	440b      	add	r3, r1
    cf30:	3304      	adds	r3, #4
    cf32:	681b      	ldr	r3, [r3, #0]
    cf34:	f003 030c 	and.w	r3, r3, #12
    cf38:	2b04      	cmp	r3, #4
    cf3a:	d12d      	bne.n	cf98 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    cf3c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cf40:	4938      	ldr	r1, [pc, #224]	; (d024 <_timer_init+0x27c>)
    cf42:	4613      	mov	r3, r2
    cf44:	009b      	lsls	r3, r3, #2
    cf46:	4413      	add	r3, r2
    cf48:	009b      	lsls	r3, r3, #2
    cf4a:	440b      	add	r3, r1
    cf4c:	330c      	adds	r3, #12
    cf4e:	681b      	ldr	r3, [r3, #0]
    cf50:	b2db      	uxtb	r3, r3
    cf52:	461a      	mov	r2, r3
    cf54:	2100      	movs	r1, #0
    cf56:	6838      	ldr	r0, [r7, #0]
    cf58:	4b38      	ldr	r3, [pc, #224]	; (d03c <_timer_init+0x294>)
    cf5a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    cf5c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cf60:	4930      	ldr	r1, [pc, #192]	; (d024 <_timer_init+0x27c>)
    cf62:	4613      	mov	r3, r2
    cf64:	009b      	lsls	r3, r3, #2
    cf66:	4413      	add	r3, r2
    cf68:	009b      	lsls	r3, r3, #2
    cf6a:	440b      	add	r3, r1
    cf6c:	3310      	adds	r3, #16
    cf6e:	681b      	ldr	r3, [r3, #0]
    cf70:	b2db      	uxtb	r3, r3
    cf72:	461a      	mov	r2, r3
    cf74:	2101      	movs	r1, #1
    cf76:	6838      	ldr	r0, [r7, #0]
    cf78:	4b30      	ldr	r3, [pc, #192]	; (d03c <_timer_init+0x294>)
    cf7a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    cf7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cf80:	4928      	ldr	r1, [pc, #160]	; (d024 <_timer_init+0x27c>)
    cf82:	4613      	mov	r3, r2
    cf84:	009b      	lsls	r3, r3, #2
    cf86:	4413      	add	r3, r2
    cf88:	009b      	lsls	r3, r3, #2
    cf8a:	440b      	add	r3, r1
    cf8c:	330b      	adds	r3, #11
    cf8e:	781b      	ldrb	r3, [r3, #0]
    cf90:	4619      	mov	r1, r3
    cf92:	6838      	ldr	r0, [r7, #0]
    cf94:	4b2a      	ldr	r3, [pc, #168]	; (d040 <_timer_init+0x298>)
    cf96:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    cf98:	6838      	ldr	r0, [r7, #0]
    cf9a:	4b2a      	ldr	r3, [pc, #168]	; (d044 <_timer_init+0x29c>)
    cf9c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    cf9e:	6879      	ldr	r1, [r7, #4]
    cfa0:	6838      	ldr	r0, [r7, #0]
    cfa2:	4b29      	ldr	r3, [pc, #164]	; (d048 <_timer_init+0x2a0>)
    cfa4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    cfa6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cfaa:	491e      	ldr	r1, [pc, #120]	; (d024 <_timer_init+0x27c>)
    cfac:	4613      	mov	r3, r2
    cfae:	009b      	lsls	r3, r3, #2
    cfb0:	4413      	add	r3, r2
    cfb2:	009b      	lsls	r3, r3, #2
    cfb4:	440b      	add	r3, r1
    cfb6:	3302      	adds	r3, #2
    cfb8:	f9b3 3000 	ldrsh.w	r3, [r3]
    cfbc:	4618      	mov	r0, r3
    cfbe:	4b23      	ldr	r3, [pc, #140]	; (d04c <_timer_init+0x2a4>)
    cfc0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    cfc2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cfc6:	4917      	ldr	r1, [pc, #92]	; (d024 <_timer_init+0x27c>)
    cfc8:	4613      	mov	r3, r2
    cfca:	009b      	lsls	r3, r3, #2
    cfcc:	4413      	add	r3, r2
    cfce:	009b      	lsls	r3, r3, #2
    cfd0:	440b      	add	r3, r1
    cfd2:	3302      	adds	r3, #2
    cfd4:	f9b3 3000 	ldrsh.w	r3, [r3]
    cfd8:	4618      	mov	r0, r3
    cfda:	4b1d      	ldr	r3, [pc, #116]	; (d050 <_timer_init+0x2a8>)
    cfdc:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    cfde:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cfe2:	4910      	ldr	r1, [pc, #64]	; (d024 <_timer_init+0x27c>)
    cfe4:	4613      	mov	r3, r2
    cfe6:	009b      	lsls	r3, r3, #2
    cfe8:	4413      	add	r3, r2
    cfea:	009b      	lsls	r3, r3, #2
    cfec:	440b      	add	r3, r1
    cfee:	3302      	adds	r3, #2
    cff0:	f9b3 3000 	ldrsh.w	r3, [r3]
    cff4:	4618      	mov	r0, r3
    cff6:	4b17      	ldr	r3, [pc, #92]	; (d054 <_timer_init+0x2ac>)
    cff8:	4798      	blx	r3

	return ERR_NONE;
    cffa:	2300      	movs	r3, #0
}
    cffc:	4618      	mov	r0, r3
    cffe:	3710      	adds	r7, #16
    d000:	46bd      	mov	sp, r7
    d002:	bd80      	pop	{r7, pc}
    d004:	0000d4fd 	.word	0x0000d4fd
    d008:	0001f7e0 	.word	0x0001f7e0
    d00c:	00007d91 	.word	0x00007d91
    d010:	0000caed 	.word	0x0000caed
    d014:	0000cc3d 	.word	0x0000cc3d
    d018:	0000cc15 	.word	0x0000cc15
    d01c:	0000cac9 	.word	0x0000cac9
    d020:	0000cc6d 	.word	0x0000cc6d
    d024:	200000c4 	.word	0x200000c4
    d028:	0000cccd 	.word	0x0000cccd
    d02c:	0000cc91 	.word	0x0000cc91
    d030:	0000ccaf 	.word	0x0000ccaf
    d034:	0000cd79 	.word	0x0000cd79
    d038:	0000cd45 	.word	0x0000cd45
    d03c:	0000cd15 	.word	0x0000cd15
    d040:	0000cced 	.word	0x0000cced
    d044:	0000cb71 	.word	0x0000cb71
    d048:	0000d565 	.word	0x0000d565
    d04c:	0000ca49 	.word	0x0000ca49
    d050:	0000ca8d 	.word	0x0000ca8d
    d054:	0000ca0d 	.word	0x0000ca0d

0000d058 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    d058:	b580      	push	{r7, lr}
    d05a:	b084      	sub	sp, #16
    d05c:	af00      	add	r7, sp, #0
    d05e:	6078      	str	r0, [r7, #4]
    d060:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    d062:	6838      	ldr	r0, [r7, #0]
    d064:	4b73      	ldr	r3, [pc, #460]	; (d234 <_pwm_init+0x1dc>)
    d066:	4798      	blx	r3
    d068:	4603      	mov	r3, r0
    d06a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    d06c:	687b      	ldr	r3, [r7, #4]
    d06e:	683a      	ldr	r2, [r7, #0]
    d070:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    d072:	2101      	movs	r1, #1
    d074:	6838      	ldr	r0, [r7, #0]
    d076:	4b70      	ldr	r3, [pc, #448]	; (d238 <_pwm_init+0x1e0>)
    d078:	4798      	blx	r3
    d07a:	4603      	mov	r3, r0
    d07c:	f083 0301 	eor.w	r3, r3, #1
    d080:	b2db      	uxtb	r3, r3
    d082:	2b00      	cmp	r3, #0
    d084:	d011      	beq.n	d0aa <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    d086:	2102      	movs	r1, #2
    d088:	6838      	ldr	r0, [r7, #0]
    d08a:	4b6c      	ldr	r3, [pc, #432]	; (d23c <_pwm_init+0x1e4>)
    d08c:	4798      	blx	r3
    d08e:	4603      	mov	r3, r0
    d090:	2b00      	cmp	r3, #0
    d092:	d006      	beq.n	d0a2 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d094:	6838      	ldr	r0, [r7, #0]
    d096:	4b6a      	ldr	r3, [pc, #424]	; (d240 <_pwm_init+0x1e8>)
    d098:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    d09a:	2102      	movs	r1, #2
    d09c:	6838      	ldr	r0, [r7, #0]
    d09e:	4b69      	ldr	r3, [pc, #420]	; (d244 <_pwm_init+0x1ec>)
    d0a0:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    d0a2:	2101      	movs	r1, #1
    d0a4:	6838      	ldr	r0, [r7, #0]
    d0a6:	4b68      	ldr	r3, [pc, #416]	; (d248 <_pwm_init+0x1f0>)
    d0a8:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    d0aa:	2101      	movs	r1, #1
    d0ac:	6838      	ldr	r0, [r7, #0]
    d0ae:	4b65      	ldr	r3, [pc, #404]	; (d244 <_pwm_init+0x1ec>)
    d0b0:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    d0b2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d0b6:	4965      	ldr	r1, [pc, #404]	; (d24c <_pwm_init+0x1f4>)
    d0b8:	4613      	mov	r3, r2
    d0ba:	009b      	lsls	r3, r3, #2
    d0bc:	4413      	add	r3, r2
    d0be:	009b      	lsls	r3, r3, #2
    d0c0:	440b      	add	r3, r1
    d0c2:	3304      	adds	r3, #4
    d0c4:	681b      	ldr	r3, [r3, #0]
    d0c6:	4619      	mov	r1, r3
    d0c8:	6838      	ldr	r0, [r7, #0]
    d0ca:	4b5f      	ldr	r3, [pc, #380]	; (d248 <_pwm_init+0x1f0>)
    d0cc:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    d0ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d0d2:	495e      	ldr	r1, [pc, #376]	; (d24c <_pwm_init+0x1f4>)
    d0d4:	4613      	mov	r3, r2
    d0d6:	009b      	lsls	r3, r3, #2
    d0d8:	4413      	add	r3, r2
    d0da:	009b      	lsls	r3, r3, #2
    d0dc:	440b      	add	r3, r1
    d0de:	330a      	adds	r3, #10
    d0e0:	781b      	ldrb	r3, [r3, #0]
    d0e2:	4619      	mov	r1, r3
    d0e4:	6838      	ldr	r0, [r7, #0]
    d0e6:	4b5a      	ldr	r3, [pc, #360]	; (d250 <_pwm_init+0x1f8>)
    d0e8:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    d0ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d0ee:	4957      	ldr	r1, [pc, #348]	; (d24c <_pwm_init+0x1f4>)
    d0f0:	4613      	mov	r3, r2
    d0f2:	009b      	lsls	r3, r3, #2
    d0f4:	4413      	add	r3, r2
    d0f6:	009b      	lsls	r3, r3, #2
    d0f8:	440b      	add	r3, r1
    d0fa:	3308      	adds	r3, #8
    d0fc:	881b      	ldrh	r3, [r3, #0]
    d0fe:	4619      	mov	r1, r3
    d100:	6838      	ldr	r0, [r7, #0]
    d102:	4b54      	ldr	r3, [pc, #336]	; (d254 <_pwm_init+0x1fc>)
    d104:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    d106:	2103      	movs	r1, #3
    d108:	6838      	ldr	r0, [r7, #0]
    d10a:	4b53      	ldr	r3, [pc, #332]	; (d258 <_pwm_init+0x200>)
    d10c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    d10e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d112:	494e      	ldr	r1, [pc, #312]	; (d24c <_pwm_init+0x1f4>)
    d114:	4613      	mov	r3, r2
    d116:	009b      	lsls	r3, r3, #2
    d118:	4413      	add	r3, r2
    d11a:	009b      	lsls	r3, r3, #2
    d11c:	440b      	add	r3, r1
    d11e:	3304      	adds	r3, #4
    d120:	681b      	ldr	r3, [r3, #0]
    d122:	f003 030c 	and.w	r3, r3, #12
    d126:	2b08      	cmp	r3, #8
    d128:	d11e      	bne.n	d168 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    d12a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d12e:	4947      	ldr	r1, [pc, #284]	; (d24c <_pwm_init+0x1f4>)
    d130:	4613      	mov	r3, r2
    d132:	009b      	lsls	r3, r3, #2
    d134:	4413      	add	r3, r2
    d136:	009b      	lsls	r3, r3, #2
    d138:	440b      	add	r3, r1
    d13a:	330c      	adds	r3, #12
    d13c:	681b      	ldr	r3, [r3, #0]
    d13e:	461a      	mov	r2, r3
    d140:	2100      	movs	r1, #0
    d142:	6838      	ldr	r0, [r7, #0]
    d144:	4b45      	ldr	r3, [pc, #276]	; (d25c <_pwm_init+0x204>)
    d146:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    d148:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d14c:	493f      	ldr	r1, [pc, #252]	; (d24c <_pwm_init+0x1f4>)
    d14e:	4613      	mov	r3, r2
    d150:	009b      	lsls	r3, r3, #2
    d152:	4413      	add	r3, r2
    d154:	009b      	lsls	r3, r3, #2
    d156:	440b      	add	r3, r1
    d158:	3310      	adds	r3, #16
    d15a:	681b      	ldr	r3, [r3, #0]
    d15c:	461a      	mov	r2, r3
    d15e:	2101      	movs	r1, #1
    d160:	6838      	ldr	r0, [r7, #0]
    d162:	4b3e      	ldr	r3, [pc, #248]	; (d25c <_pwm_init+0x204>)
    d164:	4798      	blx	r3
    d166:	e031      	b.n	d1cc <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    d168:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d16c:	4937      	ldr	r1, [pc, #220]	; (d24c <_pwm_init+0x1f4>)
    d16e:	4613      	mov	r3, r2
    d170:	009b      	lsls	r3, r3, #2
    d172:	4413      	add	r3, r2
    d174:	009b      	lsls	r3, r3, #2
    d176:	440b      	add	r3, r1
    d178:	3304      	adds	r3, #4
    d17a:	681b      	ldr	r3, [r3, #0]
    d17c:	f003 030c 	and.w	r3, r3, #12
    d180:	2b00      	cmp	r3, #0
    d182:	d120      	bne.n	d1c6 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    d184:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d188:	4930      	ldr	r1, [pc, #192]	; (d24c <_pwm_init+0x1f4>)
    d18a:	4613      	mov	r3, r2
    d18c:	009b      	lsls	r3, r3, #2
    d18e:	4413      	add	r3, r2
    d190:	009b      	lsls	r3, r3, #2
    d192:	440b      	add	r3, r1
    d194:	330c      	adds	r3, #12
    d196:	681b      	ldr	r3, [r3, #0]
    d198:	b29b      	uxth	r3, r3
    d19a:	461a      	mov	r2, r3
    d19c:	2100      	movs	r1, #0
    d19e:	6838      	ldr	r0, [r7, #0]
    d1a0:	4b2f      	ldr	r3, [pc, #188]	; (d260 <_pwm_init+0x208>)
    d1a2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    d1a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d1a8:	4928      	ldr	r1, [pc, #160]	; (d24c <_pwm_init+0x1f4>)
    d1aa:	4613      	mov	r3, r2
    d1ac:	009b      	lsls	r3, r3, #2
    d1ae:	4413      	add	r3, r2
    d1b0:	009b      	lsls	r3, r3, #2
    d1b2:	440b      	add	r3, r1
    d1b4:	3310      	adds	r3, #16
    d1b6:	681b      	ldr	r3, [r3, #0]
    d1b8:	b29b      	uxth	r3, r3
    d1ba:	461a      	mov	r2, r3
    d1bc:	2101      	movs	r1, #1
    d1be:	6838      	ldr	r0, [r7, #0]
    d1c0:	4b27      	ldr	r3, [pc, #156]	; (d260 <_pwm_init+0x208>)
    d1c2:	4798      	blx	r3
    d1c4:	e002      	b.n	d1cc <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    d1c6:	f04f 33ff 	mov.w	r3, #4294967295
    d1ca:	e02e      	b.n	d22a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    d1cc:	6879      	ldr	r1, [r7, #4]
    d1ce:	6838      	ldr	r0, [r7, #0]
    d1d0:	4b24      	ldr	r3, [pc, #144]	; (d264 <_pwm_init+0x20c>)
    d1d2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    d1d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d1d8:	491c      	ldr	r1, [pc, #112]	; (d24c <_pwm_init+0x1f4>)
    d1da:	4613      	mov	r3, r2
    d1dc:	009b      	lsls	r3, r3, #2
    d1de:	4413      	add	r3, r2
    d1e0:	009b      	lsls	r3, r3, #2
    d1e2:	440b      	add	r3, r1
    d1e4:	3302      	adds	r3, #2
    d1e6:	f9b3 3000 	ldrsh.w	r3, [r3]
    d1ea:	4618      	mov	r0, r3
    d1ec:	4b1e      	ldr	r3, [pc, #120]	; (d268 <_pwm_init+0x210>)
    d1ee:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    d1f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d1f4:	4915      	ldr	r1, [pc, #84]	; (d24c <_pwm_init+0x1f4>)
    d1f6:	4613      	mov	r3, r2
    d1f8:	009b      	lsls	r3, r3, #2
    d1fa:	4413      	add	r3, r2
    d1fc:	009b      	lsls	r3, r3, #2
    d1fe:	440b      	add	r3, r1
    d200:	3302      	adds	r3, #2
    d202:	f9b3 3000 	ldrsh.w	r3, [r3]
    d206:	4618      	mov	r0, r3
    d208:	4b18      	ldr	r3, [pc, #96]	; (d26c <_pwm_init+0x214>)
    d20a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    d20c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d210:	490e      	ldr	r1, [pc, #56]	; (d24c <_pwm_init+0x1f4>)
    d212:	4613      	mov	r3, r2
    d214:	009b      	lsls	r3, r3, #2
    d216:	4413      	add	r3, r2
    d218:	009b      	lsls	r3, r3, #2
    d21a:	440b      	add	r3, r1
    d21c:	3302      	adds	r3, #2
    d21e:	f9b3 3000 	ldrsh.w	r3, [r3]
    d222:	4618      	mov	r0, r3
    d224:	4b12      	ldr	r3, [pc, #72]	; (d270 <_pwm_init+0x218>)
    d226:	4798      	blx	r3

	return 0;
    d228:	2300      	movs	r3, #0
}
    d22a:	4618      	mov	r0, r3
    d22c:	3710      	adds	r7, #16
    d22e:	46bd      	mov	sp, r7
    d230:	bd80      	pop	{r7, pc}
    d232:	bf00      	nop
    d234:	0000d4fd 	.word	0x0000d4fd
    d238:	0000caed 	.word	0x0000caed
    d23c:	0000cc3d 	.word	0x0000cc3d
    d240:	0000cc15 	.word	0x0000cc15
    d244:	0000cac9 	.word	0x0000cac9
    d248:	0000cc6d 	.word	0x0000cc6d
    d24c:	200000c4 	.word	0x200000c4
    d250:	0000cccd 	.word	0x0000cccd
    d254:	0000cc91 	.word	0x0000cc91
    d258:	0000ccaf 	.word	0x0000ccaf
    d25c:	0000cd79 	.word	0x0000cd79
    d260:	0000cd45 	.word	0x0000cd45
    d264:	0000d565 	.word	0x0000d565
    d268:	0000ca49 	.word	0x0000ca49
    d26c:	0000ca8d 	.word	0x0000ca8d
    d270:	0000ca0d 	.word	0x0000ca0d

0000d274 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    d274:	b580      	push	{r7, lr}
    d276:	b082      	sub	sp, #8
    d278:	af00      	add	r7, sp, #0
    d27a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    d27c:	687b      	ldr	r3, [r7, #4]
    d27e:	68db      	ldr	r3, [r3, #12]
    d280:	4618      	mov	r0, r3
    d282:	4b03      	ldr	r3, [pc, #12]	; (d290 <_timer_start+0x1c>)
    d284:	4798      	blx	r3
}
    d286:	bf00      	nop
    d288:	3708      	adds	r7, #8
    d28a:	46bd      	mov	sp, r7
    d28c:	bd80      	pop	{r7, pc}
    d28e:	bf00      	nop
    d290:	0000cbb5 	.word	0x0000cbb5

0000d294 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    d294:	b580      	push	{r7, lr}
    d296:	b082      	sub	sp, #8
    d298:	af00      	add	r7, sp, #0
    d29a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    d29c:	687b      	ldr	r3, [r7, #4]
    d29e:	691b      	ldr	r3, [r3, #16]
    d2a0:	4618      	mov	r0, r3
    d2a2:	4b03      	ldr	r3, [pc, #12]	; (d2b0 <_pwm_enable+0x1c>)
    d2a4:	4798      	blx	r3
}
    d2a6:	bf00      	nop
    d2a8:	3708      	adds	r7, #8
    d2aa:	46bd      	mov	sp, r7
    d2ac:	bd80      	pop	{r7, pc}
    d2ae:	bf00      	nop
    d2b0:	0000cbb5 	.word	0x0000cbb5

0000d2b4 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    d2b4:	b580      	push	{r7, lr}
    d2b6:	b082      	sub	sp, #8
    d2b8:	af00      	add	r7, sp, #0
    d2ba:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    d2bc:	687b      	ldr	r3, [r7, #4]
    d2be:	68db      	ldr	r3, [r3, #12]
    d2c0:	4618      	mov	r0, r3
    d2c2:	4b03      	ldr	r3, [pc, #12]	; (d2d0 <_timer_stop+0x1c>)
    d2c4:	4798      	blx	r3
}
    d2c6:	bf00      	nop
    d2c8:	3708      	adds	r7, #8
    d2ca:	46bd      	mov	sp, r7
    d2cc:	bd80      	pop	{r7, pc}
    d2ce:	bf00      	nop
    d2d0:	0000cc15 	.word	0x0000cc15

0000d2d4 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    d2d4:	b580      	push	{r7, lr}
    d2d6:	b082      	sub	sp, #8
    d2d8:	af00      	add	r7, sp, #0
    d2da:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    d2dc:	687b      	ldr	r3, [r7, #4]
    d2de:	68db      	ldr	r3, [r3, #12]
    d2e0:	4618      	mov	r0, r3
    d2e2:	4b03      	ldr	r3, [pc, #12]	; (d2f0 <_timer_is_started+0x1c>)
    d2e4:	4798      	blx	r3
    d2e6:	4603      	mov	r3, r0
}
    d2e8:	4618      	mov	r0, r3
    d2ea:	3708      	adds	r7, #8
    d2ec:	46bd      	mov	sp, r7
    d2ee:	bd80      	pop	{r7, pc}
    d2f0:	0000cbdd 	.word	0x0000cbdd

0000d2f4 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    d2f4:	b580      	push	{r7, lr}
    d2f6:	b082      	sub	sp, #8
    d2f8:	af00      	add	r7, sp, #0
    d2fa:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    d2fc:	687b      	ldr	r3, [r7, #4]
    d2fe:	691b      	ldr	r3, [r3, #16]
    d300:	4618      	mov	r0, r3
    d302:	4b03      	ldr	r3, [pc, #12]	; (d310 <_pwm_is_enabled+0x1c>)
    d304:	4798      	blx	r3
    d306:	4603      	mov	r3, r0
}
    d308:	4618      	mov	r0, r3
    d30a:	3708      	adds	r7, #8
    d30c:	46bd      	mov	sp, r7
    d30e:	bd80      	pop	{r7, pc}
    d310:	0000cbdd 	.word	0x0000cbdd

0000d314 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    d314:	b480      	push	{r7}
    d316:	af00      	add	r7, sp, #0
	return NULL;
    d318:	2300      	movs	r3, #0
}
    d31a:	4618      	mov	r0, r3
    d31c:	46bd      	mov	sp, r7
    d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d322:	4770      	bx	lr

0000d324 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    d324:	b480      	push	{r7}
    d326:	af00      	add	r7, sp, #0
	return NULL;
    d328:	2300      	movs	r3, #0
}
    d32a:	4618      	mov	r0, r3
    d32c:	46bd      	mov	sp, r7
    d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d332:	4770      	bx	lr

0000d334 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    d334:	b580      	push	{r7, lr}
    d336:	b084      	sub	sp, #16
    d338:	af00      	add	r7, sp, #0
    d33a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d33c:	687b      	ldr	r3, [r7, #4]
    d33e:	68db      	ldr	r3, [r3, #12]
    d340:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    d342:	68f8      	ldr	r0, [r7, #12]
    d344:	4b0e      	ldr	r3, [pc, #56]	; (d380 <_timer_set_irq+0x4c>)
    d346:	4798      	blx	r3
    d348:	4603      	mov	r3, r0
    d34a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    d34c:	f240 12a7 	movw	r2, #423	; 0x1a7
    d350:	490c      	ldr	r1, [pc, #48]	; (d384 <_timer_set_irq+0x50>)
    d352:	2001      	movs	r0, #1
    d354:	4b0c      	ldr	r3, [pc, #48]	; (d388 <_timer_set_irq+0x54>)
    d356:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    d358:	f997 200b 	ldrsb.w	r2, [r7, #11]
    d35c:	490b      	ldr	r1, [pc, #44]	; (d38c <_timer_set_irq+0x58>)
    d35e:	4613      	mov	r3, r2
    d360:	009b      	lsls	r3, r3, #2
    d362:	4413      	add	r3, r2
    d364:	009b      	lsls	r3, r3, #2
    d366:	440b      	add	r3, r1
    d368:	3302      	adds	r3, #2
    d36a:	f9b3 3000 	ldrsh.w	r3, [r3]
    d36e:	b2db      	uxtb	r3, r3
    d370:	4618      	mov	r0, r3
    d372:	4b07      	ldr	r3, [pc, #28]	; (d390 <_timer_set_irq+0x5c>)
    d374:	4798      	blx	r3
}
    d376:	bf00      	nop
    d378:	3710      	adds	r7, #16
    d37a:	46bd      	mov	sp, r7
    d37c:	bd80      	pop	{r7, pc}
    d37e:	bf00      	nop
    d380:	0000d4fd 	.word	0x0000d4fd
    d384:	0001f7e0 	.word	0x0001f7e0
    d388:	00007d91 	.word	0x00007d91
    d38c:	200000c4 	.word	0x200000c4
    d390:	000085dd 	.word	0x000085dd

0000d394 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    d394:	b580      	push	{r7, lr}
    d396:	b084      	sub	sp, #16
    d398:	af00      	add	r7, sp, #0
    d39a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d39c:	687b      	ldr	r3, [r7, #4]
    d39e:	68db      	ldr	r3, [r3, #12]
    d3a0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    d3a2:	68f8      	ldr	r0, [r7, #12]
    d3a4:	4b07      	ldr	r3, [pc, #28]	; (d3c4 <tc_interrupt_handler+0x30>)
    d3a6:	4798      	blx	r3
    d3a8:	4603      	mov	r3, r0
    d3aa:	2b00      	cmp	r3, #0
    d3ac:	d006      	beq.n	d3bc <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    d3ae:	68f8      	ldr	r0, [r7, #12]
    d3b0:	4b05      	ldr	r3, [pc, #20]	; (d3c8 <tc_interrupt_handler+0x34>)
    d3b2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    d3b4:	687b      	ldr	r3, [r7, #4]
    d3b6:	681b      	ldr	r3, [r3, #0]
    d3b8:	6878      	ldr	r0, [r7, #4]
    d3ba:	4798      	blx	r3
	}
}
    d3bc:	bf00      	nop
    d3be:	3710      	adds	r7, #16
    d3c0:	46bd      	mov	sp, r7
    d3c2:	bd80      	pop	{r7, pc}
    d3c4:	0000cb15 	.word	0x0000cb15
    d3c8:	0000cb3d 	.word	0x0000cb3d

0000d3cc <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    d3cc:	b580      	push	{r7, lr}
    d3ce:	b084      	sub	sp, #16
    d3d0:	af00      	add	r7, sp, #0
    d3d2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d3d4:	687b      	ldr	r3, [r7, #4]
    d3d6:	691b      	ldr	r3, [r3, #16]
    d3d8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    d3da:	68f8      	ldr	r0, [r7, #12]
    d3dc:	4b12      	ldr	r3, [pc, #72]	; (d428 <tc_pwm_interrupt_handler+0x5c>)
    d3de:	4798      	blx	r3
    d3e0:	4603      	mov	r3, r0
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d00a      	beq.n	d3fc <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    d3e6:	68f8      	ldr	r0, [r7, #12]
    d3e8:	4b10      	ldr	r3, [pc, #64]	; (d42c <tc_pwm_interrupt_handler+0x60>)
    d3ea:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    d3ec:	687b      	ldr	r3, [r7, #4]
    d3ee:	681b      	ldr	r3, [r3, #0]
    d3f0:	2b00      	cmp	r3, #0
    d3f2:	d003      	beq.n	d3fc <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    d3f4:	687b      	ldr	r3, [r7, #4]
    d3f6:	681b      	ldr	r3, [r3, #0]
    d3f8:	6878      	ldr	r0, [r7, #4]
    d3fa:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    d3fc:	68f8      	ldr	r0, [r7, #12]
    d3fe:	4b0c      	ldr	r3, [pc, #48]	; (d430 <tc_pwm_interrupt_handler+0x64>)
    d400:	4798      	blx	r3
    d402:	4603      	mov	r3, r0
    d404:	2b00      	cmp	r3, #0
    d406:	d00a      	beq.n	d41e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    d408:	68f8      	ldr	r0, [r7, #12]
    d40a:	4b0a      	ldr	r3, [pc, #40]	; (d434 <tc_pwm_interrupt_handler+0x68>)
    d40c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    d40e:	687b      	ldr	r3, [r7, #4]
    d410:	685b      	ldr	r3, [r3, #4]
    d412:	2b00      	cmp	r3, #0
    d414:	d003      	beq.n	d41e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    d416:	687b      	ldr	r3, [r7, #4]
    d418:	685b      	ldr	r3, [r3, #4]
    d41a:	6878      	ldr	r0, [r7, #4]
    d41c:	4798      	blx	r3
		}
	}
}
    d41e:	bf00      	nop
    d420:	3710      	adds	r7, #16
    d422:	46bd      	mov	sp, r7
    d424:	bd80      	pop	{r7, pc}
    d426:	bf00      	nop
    d428:	0000cb15 	.word	0x0000cb15
    d42c:	0000cb3d 	.word	0x0000cb3d
    d430:	0000cb8b 	.word	0x0000cb8b
    d434:	0000cb57 	.word	0x0000cb57

0000d438 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    d438:	b580      	push	{r7, lr}
    d43a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    d43c:	4b03      	ldr	r3, [pc, #12]	; (d44c <TC0_Handler+0x14>)
    d43e:	681b      	ldr	r3, [r3, #0]
    d440:	4618      	mov	r0, r3
    d442:	4b03      	ldr	r3, [pc, #12]	; (d450 <TC0_Handler+0x18>)
    d444:	4798      	blx	r3
}
    d446:	bf00      	nop
    d448:	bd80      	pop	{r7, pc}
    d44a:	bf00      	nop
    d44c:	20008784 	.word	0x20008784
    d450:	0000d395 	.word	0x0000d395

0000d454 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    d454:	b580      	push	{r7, lr}
    d456:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc1_dev);
    d458:	4b03      	ldr	r3, [pc, #12]	; (d468 <TC1_Handler+0x14>)
    d45a:	681b      	ldr	r3, [r3, #0]
    d45c:	4618      	mov	r0, r3
    d45e:	4b03      	ldr	r3, [pc, #12]	; (d46c <TC1_Handler+0x18>)
    d460:	4798      	blx	r3
}
    d462:	bf00      	nop
    d464:	bd80      	pop	{r7, pc}
    d466:	bf00      	nop
    d468:	20008788 	.word	0x20008788
    d46c:	0000d3cd 	.word	0x0000d3cd

0000d470 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    d470:	b580      	push	{r7, lr}
    d472:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    d474:	4b03      	ldr	r3, [pc, #12]	; (d484 <TC2_Handler+0x14>)
    d476:	681b      	ldr	r3, [r3, #0]
    d478:	4618      	mov	r0, r3
    d47a:	4b03      	ldr	r3, [pc, #12]	; (d488 <TC2_Handler+0x18>)
    d47c:	4798      	blx	r3
}
    d47e:	bf00      	nop
    d480:	bd80      	pop	{r7, pc}
    d482:	bf00      	nop
    d484:	2000878c 	.word	0x2000878c
    d488:	0000d395 	.word	0x0000d395

0000d48c <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    d48c:	b580      	push	{r7, lr}
    d48e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    d490:	4b03      	ldr	r3, [pc, #12]	; (d4a0 <TC3_Handler+0x14>)
    d492:	681b      	ldr	r3, [r3, #0]
    d494:	4618      	mov	r0, r3
    d496:	4b03      	ldr	r3, [pc, #12]	; (d4a4 <TC3_Handler+0x18>)
    d498:	4798      	blx	r3
}
    d49a:	bf00      	nop
    d49c:	bd80      	pop	{r7, pc}
    d49e:	bf00      	nop
    d4a0:	20008790 	.word	0x20008790
    d4a4:	0000d395 	.word	0x0000d395

0000d4a8 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    d4a8:	b580      	push	{r7, lr}
    d4aa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    d4ac:	4b03      	ldr	r3, [pc, #12]	; (d4bc <TC4_Handler+0x14>)
    d4ae:	681b      	ldr	r3, [r3, #0]
    d4b0:	4618      	mov	r0, r3
    d4b2:	4b03      	ldr	r3, [pc, #12]	; (d4c0 <TC4_Handler+0x18>)
    d4b4:	4798      	blx	r3
}
    d4b6:	bf00      	nop
    d4b8:	bd80      	pop	{r7, pc}
    d4ba:	bf00      	nop
    d4bc:	20008794 	.word	0x20008794
    d4c0:	0000d395 	.word	0x0000d395

0000d4c4 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    d4c4:	b580      	push	{r7, lr}
    d4c6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    d4c8:	4b03      	ldr	r3, [pc, #12]	; (d4d8 <TC5_Handler+0x14>)
    d4ca:	681b      	ldr	r3, [r3, #0]
    d4cc:	4618      	mov	r0, r3
    d4ce:	4b03      	ldr	r3, [pc, #12]	; (d4dc <TC5_Handler+0x18>)
    d4d0:	4798      	blx	r3
}
    d4d2:	bf00      	nop
    d4d4:	bd80      	pop	{r7, pc}
    d4d6:	bf00      	nop
    d4d8:	20008798 	.word	0x20008798
    d4dc:	0000d395 	.word	0x0000d395

0000d4e0 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    d4e0:	b580      	push	{r7, lr}
    d4e2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    d4e4:	4b03      	ldr	r3, [pc, #12]	; (d4f4 <TC6_Handler+0x14>)
    d4e6:	681b      	ldr	r3, [r3, #0]
    d4e8:	4618      	mov	r0, r3
    d4ea:	4b03      	ldr	r3, [pc, #12]	; (d4f8 <TC6_Handler+0x18>)
    d4ec:	4798      	blx	r3
}
    d4ee:	bf00      	nop
    d4f0:	bd80      	pop	{r7, pc}
    d4f2:	bf00      	nop
    d4f4:	2000879c 	.word	0x2000879c
    d4f8:	0000d395 	.word	0x0000d395

0000d4fc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    d4fc:	b580      	push	{r7, lr}
    d4fe:	b084      	sub	sp, #16
    d500:	af00      	add	r7, sp, #0
    d502:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    d504:	6878      	ldr	r0, [r7, #4]
    d506:	4b13      	ldr	r3, [pc, #76]	; (d554 <get_tc_index+0x58>)
    d508:	4798      	blx	r3
    d50a:	4603      	mov	r3, r0
    d50c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    d50e:	2300      	movs	r3, #0
    d510:	73fb      	strb	r3, [r7, #15]
    d512:	e010      	b.n	d536 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    d514:	7bfa      	ldrb	r2, [r7, #15]
    d516:	4910      	ldr	r1, [pc, #64]	; (d558 <get_tc_index+0x5c>)
    d518:	4613      	mov	r3, r2
    d51a:	009b      	lsls	r3, r3, #2
    d51c:	4413      	add	r3, r2
    d51e:	009b      	lsls	r3, r3, #2
    d520:	440b      	add	r3, r1
    d522:	781b      	ldrb	r3, [r3, #0]
    d524:	7bba      	ldrb	r2, [r7, #14]
    d526:	429a      	cmp	r2, r3
    d528:	d102      	bne.n	d530 <get_tc_index+0x34>
			return i;
    d52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    d52e:	e00d      	b.n	d54c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    d530:	7bfb      	ldrb	r3, [r7, #15]
    d532:	3301      	adds	r3, #1
    d534:	73fb      	strb	r3, [r7, #15]
    d536:	7bfb      	ldrb	r3, [r7, #15]
    d538:	2b06      	cmp	r3, #6
    d53a:	d9eb      	bls.n	d514 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    d53c:	f240 221a 	movw	r2, #538	; 0x21a
    d540:	4906      	ldr	r1, [pc, #24]	; (d55c <get_tc_index+0x60>)
    d542:	2000      	movs	r0, #0
    d544:	4b06      	ldr	r3, [pc, #24]	; (d560 <get_tc_index+0x64>)
    d546:	4798      	blx	r3
	return -1;
    d548:	f04f 33ff 	mov.w	r3, #4294967295
}
    d54c:	4618      	mov	r0, r3
    d54e:	3710      	adds	r7, #16
    d550:	46bd      	mov	sp, r7
    d552:	bd80      	pop	{r7, pc}
    d554:	0000d615 	.word	0x0000d615
    d558:	200000c4 	.word	0x200000c4
    d55c:	0001f7e0 	.word	0x0001f7e0
    d560:	00007d91 	.word	0x00007d91

0000d564 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    d564:	b480      	push	{r7}
    d566:	b083      	sub	sp, #12
    d568:	af00      	add	r7, sp, #0
    d56a:	6078      	str	r0, [r7, #4]
    d56c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    d56e:	687b      	ldr	r3, [r7, #4]
    d570:	4a1a      	ldr	r2, [pc, #104]	; (d5dc <_tc_init_irq_param+0x78>)
    d572:	4293      	cmp	r3, r2
    d574:	d102      	bne.n	d57c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    d576:	4a1a      	ldr	r2, [pc, #104]	; (d5e0 <_tc_init_irq_param+0x7c>)
    d578:	683b      	ldr	r3, [r7, #0]
    d57a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    d57c:	687b      	ldr	r3, [r7, #4]
    d57e:	4a19      	ldr	r2, [pc, #100]	; (d5e4 <_tc_init_irq_param+0x80>)
    d580:	4293      	cmp	r3, r2
    d582:	d102      	bne.n	d58a <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _pwm_device *)dev;
    d584:	4a18      	ldr	r2, [pc, #96]	; (d5e8 <_tc_init_irq_param+0x84>)
    d586:	683b      	ldr	r3, [r7, #0]
    d588:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    d58a:	687b      	ldr	r3, [r7, #4]
    d58c:	4a17      	ldr	r2, [pc, #92]	; (d5ec <_tc_init_irq_param+0x88>)
    d58e:	4293      	cmp	r3, r2
    d590:	d102      	bne.n	d598 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    d592:	4a17      	ldr	r2, [pc, #92]	; (d5f0 <_tc_init_irq_param+0x8c>)
    d594:	683b      	ldr	r3, [r7, #0]
    d596:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    d598:	687b      	ldr	r3, [r7, #4]
    d59a:	4a16      	ldr	r2, [pc, #88]	; (d5f4 <_tc_init_irq_param+0x90>)
    d59c:	4293      	cmp	r3, r2
    d59e:	d102      	bne.n	d5a6 <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    d5a0:	4a15      	ldr	r2, [pc, #84]	; (d5f8 <_tc_init_irq_param+0x94>)
    d5a2:	683b      	ldr	r3, [r7, #0]
    d5a4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    d5a6:	687b      	ldr	r3, [r7, #4]
    d5a8:	4a14      	ldr	r2, [pc, #80]	; (d5fc <_tc_init_irq_param+0x98>)
    d5aa:	4293      	cmp	r3, r2
    d5ac:	d102      	bne.n	d5b4 <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    d5ae:	4a14      	ldr	r2, [pc, #80]	; (d600 <_tc_init_irq_param+0x9c>)
    d5b0:	683b      	ldr	r3, [r7, #0]
    d5b2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    d5b4:	687b      	ldr	r3, [r7, #4]
    d5b6:	4a13      	ldr	r2, [pc, #76]	; (d604 <_tc_init_irq_param+0xa0>)
    d5b8:	4293      	cmp	r3, r2
    d5ba:	d102      	bne.n	d5c2 <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    d5bc:	4a12      	ldr	r2, [pc, #72]	; (d608 <_tc_init_irq_param+0xa4>)
    d5be:	683b      	ldr	r3, [r7, #0]
    d5c0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    d5c2:	687b      	ldr	r3, [r7, #4]
    d5c4:	4a11      	ldr	r2, [pc, #68]	; (d60c <_tc_init_irq_param+0xa8>)
    d5c6:	4293      	cmp	r3, r2
    d5c8:	d102      	bne.n	d5d0 <_tc_init_irq_param+0x6c>
		_tc6_dev = (struct _timer_device *)dev;
    d5ca:	4a11      	ldr	r2, [pc, #68]	; (d610 <_tc_init_irq_param+0xac>)
    d5cc:	683b      	ldr	r3, [r7, #0]
    d5ce:	6013      	str	r3, [r2, #0]
	}
}
    d5d0:	bf00      	nop
    d5d2:	370c      	adds	r7, #12
    d5d4:	46bd      	mov	sp, r7
    d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d5da:	4770      	bx	lr
    d5dc:	40003800 	.word	0x40003800
    d5e0:	20008784 	.word	0x20008784
    d5e4:	40003c00 	.word	0x40003c00
    d5e8:	20008788 	.word	0x20008788
    d5ec:	4101a000 	.word	0x4101a000
    d5f0:	2000878c 	.word	0x2000878c
    d5f4:	4101c000 	.word	0x4101c000
    d5f8:	20008790 	.word	0x20008790
    d5fc:	42001400 	.word	0x42001400
    d600:	20008794 	.word	0x20008794
    d604:	42001800 	.word	0x42001800
    d608:	20008798 	.word	0x20008798
    d60c:	43001400 	.word	0x43001400
    d610:	2000879c 	.word	0x2000879c

0000d614 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    d614:	b4b0      	push	{r4, r5, r7}
    d616:	b08d      	sub	sp, #52	; 0x34
    d618:	af00      	add	r7, sp, #0
    d61a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    d61c:	4b13      	ldr	r3, [pc, #76]	; (d66c <_get_hardware_offset+0x58>)
    d61e:	f107 040c 	add.w	r4, r7, #12
    d622:	461d      	mov	r5, r3
    d624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d628:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    d62c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    d630:	2300      	movs	r3, #0
    d632:	62fb      	str	r3, [r7, #44]	; 0x2c
    d634:	e010      	b.n	d658 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    d636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d638:	009b      	lsls	r3, r3, #2
    d63a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d63e:	4413      	add	r3, r2
    d640:	f853 3c24 	ldr.w	r3, [r3, #-36]
    d644:	461a      	mov	r2, r3
    d646:	687b      	ldr	r3, [r7, #4]
    d648:	429a      	cmp	r2, r3
    d64a:	d102      	bne.n	d652 <_get_hardware_offset+0x3e>
			return i;
    d64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d64e:	b2db      	uxtb	r3, r3
    d650:	e006      	b.n	d660 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    d652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d654:	3301      	adds	r3, #1
    d656:	62fb      	str	r3, [r7, #44]	; 0x2c
    d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d65a:	2b07      	cmp	r3, #7
    d65c:	d9eb      	bls.n	d636 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    d65e:	2300      	movs	r3, #0
}
    d660:	4618      	mov	r0, r3
    d662:	3734      	adds	r7, #52	; 0x34
    d664:	46bd      	mov	sp, r7
    d666:	bcb0      	pop	{r4, r5, r7}
    d668:	4770      	bx	lr
    d66a:	bf00      	nop
    d66c:	0001f7f4 	.word	0x0001f7f4

0000d670 <__NVIC_EnableIRQ>:
{
    d670:	b480      	push	{r7}
    d672:	b083      	sub	sp, #12
    d674:	af00      	add	r7, sp, #0
    d676:	4603      	mov	r3, r0
    d678:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d67a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d67e:	2b00      	cmp	r3, #0
    d680:	db0b      	blt.n	d69a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d682:	4909      	ldr	r1, [pc, #36]	; (d6a8 <__NVIC_EnableIRQ+0x38>)
    d684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d688:	095b      	lsrs	r3, r3, #5
    d68a:	88fa      	ldrh	r2, [r7, #6]
    d68c:	f002 021f 	and.w	r2, r2, #31
    d690:	2001      	movs	r0, #1
    d692:	fa00 f202 	lsl.w	r2, r0, r2
    d696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d69a:	bf00      	nop
    d69c:	370c      	adds	r7, #12
    d69e:	46bd      	mov	sp, r7
    d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d6a4:	4770      	bx	lr
    d6a6:	bf00      	nop
    d6a8:	e000e100 	.word	0xe000e100

0000d6ac <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    d6ac:	b480      	push	{r7}
    d6ae:	b087      	sub	sp, #28
    d6b0:	af00      	add	r7, sp, #0
    d6b2:	60f8      	str	r0, [r7, #12]
    d6b4:	460b      	mov	r3, r1
    d6b6:	607a      	str	r2, [r7, #4]
    d6b8:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    d6ba:	7afa      	ldrb	r2, [r7, #11]
    d6bc:	68f9      	ldr	r1, [r7, #12]
    d6be:	4613      	mov	r3, r2
    d6c0:	009b      	lsls	r3, r3, #2
    d6c2:	4413      	add	r3, r2
    d6c4:	009b      	lsls	r3, r3, #2
    d6c6:	440b      	add	r3, r1
    d6c8:	3340      	adds	r3, #64	; 0x40
    d6ca:	681b      	ldr	r3, [r3, #0]
    d6cc:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    d6ce:	697a      	ldr	r2, [r7, #20]
    d6d0:	687b      	ldr	r3, [r7, #4]
    d6d2:	4013      	ands	r3, r2
    d6d4:	617b      	str	r3, [r7, #20]
	return tmp;
    d6d6:	697b      	ldr	r3, [r7, #20]
}
    d6d8:	4618      	mov	r0, r3
    d6da:	371c      	adds	r7, #28
    d6dc:	46bd      	mov	sp, r7
    d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
    d6e2:	4770      	bx	lr

0000d6e4 <hri_oscctrl_get_STATUS_reg>:
{
    d6e4:	b480      	push	{r7}
    d6e6:	b085      	sub	sp, #20
    d6e8:	af00      	add	r7, sp, #0
    d6ea:	6078      	str	r0, [r7, #4]
    d6ec:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    d6ee:	687b      	ldr	r3, [r7, #4]
    d6f0:	691b      	ldr	r3, [r3, #16]
    d6f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    d6f4:	68fa      	ldr	r2, [r7, #12]
    d6f6:	683b      	ldr	r3, [r7, #0]
    d6f8:	4013      	ands	r3, r2
    d6fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    d6fc:	68fb      	ldr	r3, [r7, #12]
}
    d6fe:	4618      	mov	r0, r3
    d700:	3714      	adds	r7, #20
    d702:	46bd      	mov	sp, r7
    d704:	f85d 7b04 	ldr.w	r7, [sp], #4
    d708:	4770      	bx	lr

0000d70a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    d70a:	b480      	push	{r7}
    d70c:	b085      	sub	sp, #20
    d70e:	af00      	add	r7, sp, #0
    d710:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    d712:	687b      	ldr	r3, [r7, #4]
    d714:	f893 3020 	ldrb.w	r3, [r3, #32]
    d718:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    d71a:	7bfb      	ldrb	r3, [r7, #15]
    d71c:	f003 0301 	and.w	r3, r3, #1
    d720:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    d722:	7bfb      	ldrb	r3, [r7, #15]
    d724:	2b00      	cmp	r3, #0
    d726:	bf14      	ite	ne
    d728:	2301      	movne	r3, #1
    d72a:	2300      	moveq	r3, #0
    d72c:	b2db      	uxtb	r3, r3
}
    d72e:	4618      	mov	r0, r3
    d730:	3714      	adds	r7, #20
    d732:	46bd      	mov	sp, r7
    d734:	f85d 7b04 	ldr.w	r7, [sp], #4
    d738:	4770      	bx	lr

0000d73a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    d73a:	b480      	push	{r7}
    d73c:	b083      	sub	sp, #12
    d73e:	af00      	add	r7, sp, #0
    d740:	6078      	str	r0, [r7, #4]
    d742:	460b      	mov	r3, r1
    d744:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    d746:	bf00      	nop
    d748:	687b      	ldr	r3, [r7, #4]
    d74a:	789b      	ldrb	r3, [r3, #2]
    d74c:	b2da      	uxtb	r2, r3
    d74e:	78fb      	ldrb	r3, [r7, #3]
    d750:	4013      	ands	r3, r2
    d752:	b2db      	uxtb	r3, r3
    d754:	2b00      	cmp	r3, #0
    d756:	d1f7      	bne.n	d748 <hri_usb_wait_for_sync+0xe>
	};
}
    d758:	bf00      	nop
    d75a:	370c      	adds	r7, #12
    d75c:	46bd      	mov	sp, r7
    d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d762:	4770      	bx	lr

0000d764 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    d764:	b480      	push	{r7}
    d766:	b083      	sub	sp, #12
    d768:	af00      	add	r7, sp, #0
    d76a:	6078      	str	r0, [r7, #4]
    d76c:	460b      	mov	r3, r1
    d76e:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    d770:	687b      	ldr	r3, [r7, #4]
    d772:	789b      	ldrb	r3, [r3, #2]
    d774:	b2da      	uxtb	r2, r3
    d776:	78fb      	ldrb	r3, [r7, #3]
    d778:	4013      	ands	r3, r2
    d77a:	b2db      	uxtb	r3, r3
    d77c:	2b00      	cmp	r3, #0
    d77e:	bf14      	ite	ne
    d780:	2301      	movne	r3, #1
    d782:	2300      	moveq	r3, #0
    d784:	b2db      	uxtb	r3, r3
}
    d786:	4618      	mov	r0, r3
    d788:	370c      	adds	r7, #12
    d78a:	46bd      	mov	sp, r7
    d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d790:	4770      	bx	lr

0000d792 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    d792:	b480      	push	{r7}
    d794:	b085      	sub	sp, #20
    d796:	af00      	add	r7, sp, #0
    d798:	6078      	str	r0, [r7, #4]
    d79a:	460b      	mov	r3, r1
    d79c:	70fb      	strb	r3, [r7, #3]
    d79e:	4613      	mov	r3, r2
    d7a0:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    d7a2:	78fb      	ldrb	r3, [r7, #3]
    d7a4:	687a      	ldr	r2, [r7, #4]
    d7a6:	3308      	adds	r3, #8
    d7a8:	015b      	lsls	r3, r3, #5
    d7aa:	4413      	add	r3, r2
    d7ac:	3307      	adds	r3, #7
    d7ae:	781b      	ldrb	r3, [r3, #0]
    d7b0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    d7b2:	7bfa      	ldrb	r2, [r7, #15]
    d7b4:	78bb      	ldrb	r3, [r7, #2]
    d7b6:	4013      	ands	r3, r2
    d7b8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d7ba:	7bfb      	ldrb	r3, [r7, #15]
}
    d7bc:	4618      	mov	r0, r3
    d7be:	3714      	adds	r7, #20
    d7c0:	46bd      	mov	sp, r7
    d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d7c6:	4770      	bx	lr

0000d7c8 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    d7c8:	b480      	push	{r7}
    d7ca:	b083      	sub	sp, #12
    d7cc:	af00      	add	r7, sp, #0
    d7ce:	6078      	str	r0, [r7, #4]
    d7d0:	460b      	mov	r3, r1
    d7d2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    d7d4:	78fb      	ldrb	r3, [r7, #3]
    d7d6:	687a      	ldr	r2, [r7, #4]
    d7d8:	3308      	adds	r3, #8
    d7da:	015b      	lsls	r3, r3, #5
    d7dc:	4413      	add	r3, r2
    d7de:	3307      	adds	r3, #7
    d7e0:	781b      	ldrb	r3, [r3, #0]
    d7e2:	b2db      	uxtb	r3, r3
}
    d7e4:	4618      	mov	r0, r3
    d7e6:	370c      	adds	r7, #12
    d7e8:	46bd      	mov	sp, r7
    d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    d7ee:	4770      	bx	lr

0000d7f0 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    d7f0:	b480      	push	{r7}
    d7f2:	b083      	sub	sp, #12
    d7f4:	af00      	add	r7, sp, #0
    d7f6:	6078      	str	r0, [r7, #4]
    d7f8:	460b      	mov	r3, r1
    d7fa:	70fb      	strb	r3, [r7, #3]
    d7fc:	4613      	mov	r3, r2
    d7fe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    d800:	78fb      	ldrb	r3, [r7, #3]
    d802:	687a      	ldr	r2, [r7, #4]
    d804:	3308      	adds	r3, #8
    d806:	015b      	lsls	r3, r3, #5
    d808:	4413      	add	r3, r2
    d80a:	3307      	adds	r3, #7
    d80c:	78ba      	ldrb	r2, [r7, #2]
    d80e:	701a      	strb	r2, [r3, #0]
}
    d810:	bf00      	nop
    d812:	370c      	adds	r7, #12
    d814:	46bd      	mov	sp, r7
    d816:	f85d 7b04 	ldr.w	r7, [sp], #4
    d81a:	4770      	bx	lr

0000d81c <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    d81c:	b480      	push	{r7}
    d81e:	b083      	sub	sp, #12
    d820:	af00      	add	r7, sp, #0
    d822:	6078      	str	r0, [r7, #4]
    d824:	460b      	mov	r3, r1
    d826:	70fb      	strb	r3, [r7, #3]
    d828:	4613      	mov	r3, r2
    d82a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    d82c:	78fb      	ldrb	r3, [r7, #3]
    d82e:	687a      	ldr	r2, [r7, #4]
    d830:	3308      	adds	r3, #8
    d832:	015b      	lsls	r3, r3, #5
    d834:	4413      	add	r3, r2
    d836:	3305      	adds	r3, #5
    d838:	78ba      	ldrb	r2, [r7, #2]
    d83a:	701a      	strb	r2, [r3, #0]
}
    d83c:	bf00      	nop
    d83e:	370c      	adds	r7, #12
    d840:	46bd      	mov	sp, r7
    d842:	f85d 7b04 	ldr.w	r7, [sp], #4
    d846:	4770      	bx	lr

0000d848 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    d848:	b480      	push	{r7}
    d84a:	b083      	sub	sp, #12
    d84c:	af00      	add	r7, sp, #0
    d84e:	6078      	str	r0, [r7, #4]
    d850:	460b      	mov	r3, r1
    d852:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    d854:	78fb      	ldrb	r3, [r7, #3]
    d856:	687a      	ldr	r2, [r7, #4]
    d858:	3308      	adds	r3, #8
    d85a:	015b      	lsls	r3, r3, #5
    d85c:	4413      	add	r3, r2
    d85e:	3306      	adds	r3, #6
    d860:	781b      	ldrb	r3, [r3, #0]
    d862:	b2db      	uxtb	r3, r3
}
    d864:	4618      	mov	r0, r3
    d866:	370c      	adds	r7, #12
    d868:	46bd      	mov	sp, r7
    d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d86e:	4770      	bx	lr

0000d870 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    d870:	b480      	push	{r7}
    d872:	b083      	sub	sp, #12
    d874:	af00      	add	r7, sp, #0
    d876:	6078      	str	r0, [r7, #4]
    d878:	460b      	mov	r3, r1
    d87a:	70fb      	strb	r3, [r7, #3]
    d87c:	4613      	mov	r3, r2
    d87e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    d880:	78fb      	ldrb	r3, [r7, #3]
    d882:	687a      	ldr	r2, [r7, #4]
    d884:	3308      	adds	r3, #8
    d886:	015b      	lsls	r3, r3, #5
    d888:	4413      	add	r3, r2
    d88a:	3304      	adds	r3, #4
    d88c:	78ba      	ldrb	r2, [r7, #2]
    d88e:	701a      	strb	r2, [r3, #0]
}
    d890:	bf00      	nop
    d892:	370c      	adds	r7, #12
    d894:	46bd      	mov	sp, r7
    d896:	f85d 7b04 	ldr.w	r7, [sp], #4
    d89a:	4770      	bx	lr

0000d89c <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    d89c:	b480      	push	{r7}
    d89e:	b083      	sub	sp, #12
    d8a0:	af00      	add	r7, sp, #0
    d8a2:	6078      	str	r0, [r7, #4]
    d8a4:	460b      	mov	r3, r1
    d8a6:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    d8a8:	78fb      	ldrb	r3, [r7, #3]
    d8aa:	687a      	ldr	r2, [r7, #4]
    d8ac:	015b      	lsls	r3, r3, #5
    d8ae:	4413      	add	r3, r2
    d8b0:	f503 7384 	add.w	r3, r3, #264	; 0x108
    d8b4:	2210      	movs	r2, #16
    d8b6:	701a      	strb	r2, [r3, #0]
}
    d8b8:	bf00      	nop
    d8ba:	370c      	adds	r7, #12
    d8bc:	46bd      	mov	sp, r7
    d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8c2:	4770      	bx	lr

0000d8c4 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    d8c4:	b480      	push	{r7}
    d8c6:	b083      	sub	sp, #12
    d8c8:	af00      	add	r7, sp, #0
    d8ca:	6078      	str	r0, [r7, #4]
    d8cc:	460b      	mov	r3, r1
    d8ce:	70fb      	strb	r3, [r7, #3]
    d8d0:	4613      	mov	r3, r2
    d8d2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    d8d4:	78fb      	ldrb	r3, [r7, #3]
    d8d6:	687a      	ldr	r2, [r7, #4]
    d8d8:	015b      	lsls	r3, r3, #5
    d8da:	4413      	add	r3, r2
    d8dc:	f203 1309 	addw	r3, r3, #265	; 0x109
    d8e0:	78ba      	ldrb	r2, [r7, #2]
    d8e2:	701a      	strb	r2, [r3, #0]
}
    d8e4:	bf00      	nop
    d8e6:	370c      	adds	r7, #12
    d8e8:	46bd      	mov	sp, r7
    d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8ee:	4770      	bx	lr

0000d8f0 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    d8f0:	b480      	push	{r7}
    d8f2:	b083      	sub	sp, #12
    d8f4:	af00      	add	r7, sp, #0
    d8f6:	6078      	str	r0, [r7, #4]
    d8f8:	460b      	mov	r3, r1
    d8fa:	70fb      	strb	r3, [r7, #3]
    d8fc:	4613      	mov	r3, r2
    d8fe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    d900:	78fb      	ldrb	r3, [r7, #3]
    d902:	687a      	ldr	r2, [r7, #4]
    d904:	015b      	lsls	r3, r3, #5
    d906:	4413      	add	r3, r2
    d908:	f503 7384 	add.w	r3, r3, #264	; 0x108
    d90c:	78ba      	ldrb	r2, [r7, #2]
    d90e:	701a      	strb	r2, [r3, #0]
}
    d910:	bf00      	nop
    d912:	370c      	adds	r7, #12
    d914:	46bd      	mov	sp, r7
    d916:	f85d 7b04 	ldr.w	r7, [sp], #4
    d91a:	4770      	bx	lr

0000d91c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    d91c:	b480      	push	{r7}
    d91e:	b085      	sub	sp, #20
    d920:	af00      	add	r7, sp, #0
    d922:	6078      	str	r0, [r7, #4]
    d924:	460b      	mov	r3, r1
    d926:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    d928:	78fb      	ldrb	r3, [r7, #3]
    d92a:	687a      	ldr	r2, [r7, #4]
    d92c:	3308      	adds	r3, #8
    d92e:	015b      	lsls	r3, r3, #5
    d930:	4413      	add	r3, r2
    d932:	781b      	ldrb	r3, [r3, #0]
    d934:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    d936:	7bfb      	ldrb	r3, [r7, #15]
    d938:	f003 0307 	and.w	r3, r3, #7
    d93c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d93e:	7bfb      	ldrb	r3, [r7, #15]
}
    d940:	4618      	mov	r0, r3
    d942:	3714      	adds	r7, #20
    d944:	46bd      	mov	sp, r7
    d946:	f85d 7b04 	ldr.w	r7, [sp], #4
    d94a:	4770      	bx	lr

0000d94c <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    d94c:	b480      	push	{r7}
    d94e:	b085      	sub	sp, #20
    d950:	af00      	add	r7, sp, #0
    d952:	6078      	str	r0, [r7, #4]
    d954:	460b      	mov	r3, r1
    d956:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    d958:	78fb      	ldrb	r3, [r7, #3]
    d95a:	687a      	ldr	r2, [r7, #4]
    d95c:	3308      	adds	r3, #8
    d95e:	015b      	lsls	r3, r3, #5
    d960:	4413      	add	r3, r2
    d962:	781b      	ldrb	r3, [r3, #0]
    d964:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    d966:	7bfb      	ldrb	r3, [r7, #15]
    d968:	091b      	lsrs	r3, r3, #4
    d96a:	b2db      	uxtb	r3, r3
    d96c:	f003 0307 	and.w	r3, r3, #7
    d970:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d972:	7bfb      	ldrb	r3, [r7, #15]
}
    d974:	4618      	mov	r0, r3
    d976:	3714      	adds	r7, #20
    d978:	46bd      	mov	sp, r7
    d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d97e:	4770      	bx	lr

0000d980 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    d980:	b480      	push	{r7}
    d982:	b083      	sub	sp, #12
    d984:	af00      	add	r7, sp, #0
    d986:	6078      	str	r0, [r7, #4]
    d988:	460b      	mov	r3, r1
    d98a:	70fb      	strb	r3, [r7, #3]
    d98c:	4613      	mov	r3, r2
    d98e:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    d990:	78fb      	ldrb	r3, [r7, #3]
    d992:	687a      	ldr	r2, [r7, #4]
    d994:	3308      	adds	r3, #8
    d996:	015b      	lsls	r3, r3, #5
    d998:	4413      	add	r3, r2
    d99a:	78ba      	ldrb	r2, [r7, #2]
    d99c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    d99e:	bf00      	nop
    d9a0:	370c      	adds	r7, #12
    d9a2:	46bd      	mov	sp, r7
    d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9a8:	4770      	bx	lr

0000d9aa <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    d9aa:	b480      	push	{r7}
    d9ac:	b083      	sub	sp, #12
    d9ae:	af00      	add	r7, sp, #0
    d9b0:	6078      	str	r0, [r7, #4]
    d9b2:	460b      	mov	r3, r1
    d9b4:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    d9b6:	78fb      	ldrb	r3, [r7, #3]
    d9b8:	687a      	ldr	r2, [r7, #4]
    d9ba:	3308      	adds	r3, #8
    d9bc:	015b      	lsls	r3, r3, #5
    d9be:	4413      	add	r3, r2
    d9c0:	781b      	ldrb	r3, [r3, #0]
    d9c2:	b2db      	uxtb	r3, r3
}
    d9c4:	4618      	mov	r0, r3
    d9c6:	370c      	adds	r7, #12
    d9c8:	46bd      	mov	sp, r7
    d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9ce:	4770      	bx	lr

0000d9d0 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    d9d0:	b480      	push	{r7}
    d9d2:	b083      	sub	sp, #12
    d9d4:	af00      	add	r7, sp, #0
    d9d6:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    d9d8:	687b      	ldr	r3, [r7, #4]
    d9da:	8b9b      	ldrh	r3, [r3, #28]
    d9dc:	b29b      	uxth	r3, r3
}
    d9de:	4618      	mov	r0, r3
    d9e0:	370c      	adds	r7, #12
    d9e2:	46bd      	mov	sp, r7
    d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9e8:	4770      	bx	lr

0000d9ea <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    d9ea:	b480      	push	{r7}
    d9ec:	b083      	sub	sp, #12
    d9ee:	af00      	add	r7, sp, #0
    d9f0:	6078      	str	r0, [r7, #4]
    d9f2:	460b      	mov	r3, r1
    d9f4:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    d9f6:	687b      	ldr	r3, [r7, #4]
    d9f8:	887a      	ldrh	r2, [r7, #2]
    d9fa:	839a      	strh	r2, [r3, #28]
}
    d9fc:	bf00      	nop
    d9fe:	370c      	adds	r7, #12
    da00:	46bd      	mov	sp, r7
    da02:	f85d 7b04 	ldr.w	r7, [sp], #4
    da06:	4770      	bx	lr

0000da08 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    da08:	b480      	push	{r7}
    da0a:	b083      	sub	sp, #12
    da0c:	af00      	add	r7, sp, #0
    da0e:	6078      	str	r0, [r7, #4]
    da10:	460b      	mov	r3, r1
    da12:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    da14:	687b      	ldr	r3, [r7, #4]
    da16:	887a      	ldrh	r2, [r7, #2]
    da18:	831a      	strh	r2, [r3, #24]
}
    da1a:	bf00      	nop
    da1c:	370c      	adds	r7, #12
    da1e:	46bd      	mov	sp, r7
    da20:	f85d 7b04 	ldr.w	r7, [sp], #4
    da24:	4770      	bx	lr

0000da26 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    da26:	b480      	push	{r7}
    da28:	b083      	sub	sp, #12
    da2a:	af00      	add	r7, sp, #0
    da2c:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    da2e:	687b      	ldr	r3, [r7, #4]
    da30:	8b1b      	ldrh	r3, [r3, #24]
    da32:	b29b      	uxth	r3, r3
}
    da34:	4618      	mov	r0, r3
    da36:	370c      	adds	r7, #12
    da38:	46bd      	mov	sp, r7
    da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    da3e:	4770      	bx	lr

0000da40 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    da40:	b480      	push	{r7}
    da42:	b083      	sub	sp, #12
    da44:	af00      	add	r7, sp, #0
    da46:	6078      	str	r0, [r7, #4]
    da48:	460b      	mov	r3, r1
    da4a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    da4c:	687b      	ldr	r3, [r7, #4]
    da4e:	887a      	ldrh	r2, [r7, #2]
    da50:	829a      	strh	r2, [r3, #20]
}
    da52:	bf00      	nop
    da54:	370c      	adds	r7, #12
    da56:	46bd      	mov	sp, r7
    da58:	f85d 7b04 	ldr.w	r7, [sp], #4
    da5c:	4770      	bx	lr

0000da5e <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    da5e:	b480      	push	{r7}
    da60:	b085      	sub	sp, #20
    da62:	af00      	add	r7, sp, #0
    da64:	6078      	str	r0, [r7, #4]
    da66:	460b      	mov	r3, r1
    da68:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    da6a:	687b      	ldr	r3, [r7, #4]
    da6c:	789b      	ldrb	r3, [r3, #2]
    da6e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    da70:	7bfa      	ldrb	r2, [r7, #15]
    da72:	78fb      	ldrb	r3, [r7, #3]
    da74:	4013      	ands	r3, r2
    da76:	73fb      	strb	r3, [r7, #15]
	return tmp;
    da78:	7bfb      	ldrb	r3, [r7, #15]
}
    da7a:	4618      	mov	r0, r3
    da7c:	3714      	adds	r7, #20
    da7e:	46bd      	mov	sp, r7
    da80:	f85d 7b04 	ldr.w	r7, [sp], #4
    da84:	4770      	bx	lr
	...

0000da88 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    da88:	b580      	push	{r7, lr}
    da8a:	b082      	sub	sp, #8
    da8c:	af00      	add	r7, sp, #0
    da8e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    da90:	687b      	ldr	r3, [r7, #4]
    da92:	781b      	ldrb	r3, [r3, #0]
    da94:	b2db      	uxtb	r3, r3
    da96:	f023 0302 	bic.w	r3, r3, #2
    da9a:	b2da      	uxtb	r2, r3
    da9c:	687b      	ldr	r3, [r7, #4]
    da9e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    daa0:	2103      	movs	r1, #3
    daa2:	6878      	ldr	r0, [r7, #4]
    daa4:	4b02      	ldr	r3, [pc, #8]	; (dab0 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    daa6:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    daa8:	bf00      	nop
    daaa:	3708      	adds	r7, #8
    daac:	46bd      	mov	sp, r7
    daae:	bd80      	pop	{r7, pc}
    dab0:	0000d73b 	.word	0x0000d73b

0000dab4 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    dab4:	b580      	push	{r7, lr}
    dab6:	b084      	sub	sp, #16
    dab8:	af00      	add	r7, sp, #0
    daba:	6078      	str	r0, [r7, #4]
    dabc:	460b      	mov	r3, r1
    dabe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    dac0:	2103      	movs	r1, #3
    dac2:	6878      	ldr	r0, [r7, #4]
    dac4:	4b06      	ldr	r3, [pc, #24]	; (dae0 <hri_usb_get_CTRLA_reg+0x2c>)
    dac6:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    dac8:	687b      	ldr	r3, [r7, #4]
    daca:	781b      	ldrb	r3, [r3, #0]
    dacc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    dace:	7bfa      	ldrb	r2, [r7, #15]
    dad0:	78fb      	ldrb	r3, [r7, #3]
    dad2:	4013      	ands	r3, r2
    dad4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    dad6:	7bfb      	ldrb	r3, [r7, #15]
}
    dad8:	4618      	mov	r0, r3
    dada:	3710      	adds	r7, #16
    dadc:	46bd      	mov	sp, r7
    dade:	bd80      	pop	{r7, pc}
    dae0:	0000d73b 	.word	0x0000d73b

0000dae4 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    dae4:	b580      	push	{r7, lr}
    dae6:	b082      	sub	sp, #8
    dae8:	af00      	add	r7, sp, #0
    daea:	6078      	str	r0, [r7, #4]
    daec:	460b      	mov	r3, r1
    daee:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    daf0:	687b      	ldr	r3, [r7, #4]
    daf2:	78fa      	ldrb	r2, [r7, #3]
    daf4:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    daf6:	2103      	movs	r1, #3
    daf8:	6878      	ldr	r0, [r7, #4]
    dafa:	4b03      	ldr	r3, [pc, #12]	; (db08 <hri_usb_write_CTRLA_reg+0x24>)
    dafc:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    dafe:	bf00      	nop
    db00:	3708      	adds	r7, #8
    db02:	46bd      	mov	sp, r7
    db04:	bd80      	pop	{r7, pc}
    db06:	bf00      	nop
    db08:	0000d73b 	.word	0x0000d73b

0000db0c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    db0c:	b580      	push	{r7, lr}
    db0e:	b082      	sub	sp, #8
    db10:	af00      	add	r7, sp, #0
    db12:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    db14:	2103      	movs	r1, #3
    db16:	6878      	ldr	r0, [r7, #4]
    db18:	4b04      	ldr	r3, [pc, #16]	; (db2c <hri_usb_read_CTRLA_reg+0x20>)
    db1a:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    db1c:	687b      	ldr	r3, [r7, #4]
    db1e:	781b      	ldrb	r3, [r3, #0]
    db20:	b2db      	uxtb	r3, r3
}
    db22:	4618      	mov	r0, r3
    db24:	3708      	adds	r7, #8
    db26:	46bd      	mov	sp, r7
    db28:	bd80      	pop	{r7, pc}
    db2a:	bf00      	nop
    db2c:	0000d73b 	.word	0x0000d73b

0000db30 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    db30:	b480      	push	{r7}
    db32:	b083      	sub	sp, #12
    db34:	af00      	add	r7, sp, #0
    db36:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    db38:	687b      	ldr	r3, [r7, #4]
    db3a:	891b      	ldrh	r3, [r3, #8]
    db3c:	b29b      	uxth	r3, r3
    db3e:	f023 0301 	bic.w	r3, r3, #1
    db42:	b29a      	uxth	r2, r3
    db44:	687b      	ldr	r3, [r7, #4]
    db46:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    db48:	bf00      	nop
    db4a:	370c      	adds	r7, #12
    db4c:	46bd      	mov	sp, r7
    db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    db52:	4770      	bx	lr

0000db54 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    db54:	b480      	push	{r7}
    db56:	b083      	sub	sp, #12
    db58:	af00      	add	r7, sp, #0
    db5a:	6078      	str	r0, [r7, #4]
    db5c:	460b      	mov	r3, r1
    db5e:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    db60:	687b      	ldr	r3, [r7, #4]
    db62:	887a      	ldrh	r2, [r7, #2]
    db64:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    db66:	bf00      	nop
    db68:	370c      	adds	r7, #12
    db6a:	46bd      	mov	sp, r7
    db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    db70:	4770      	bx	lr

0000db72 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    db72:	b480      	push	{r7}
    db74:	b083      	sub	sp, #12
    db76:	af00      	add	r7, sp, #0
    db78:	6078      	str	r0, [r7, #4]
    db7a:	460b      	mov	r3, r1
    db7c:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    db7e:	687b      	ldr	r3, [r7, #4]
    db80:	78fa      	ldrb	r2, [r7, #3]
    db82:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    db84:	bf00      	nop
    db86:	370c      	adds	r7, #12
    db88:	46bd      	mov	sp, r7
    db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    db8e:	4770      	bx	lr

0000db90 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    db90:	b480      	push	{r7}
    db92:	b083      	sub	sp, #12
    db94:	af00      	add	r7, sp, #0
    db96:	6078      	str	r0, [r7, #4]
    db98:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    db9a:	687b      	ldr	r3, [r7, #4]
    db9c:	683a      	ldr	r2, [r7, #0]
    db9e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    dba0:	bf00      	nop
    dba2:	370c      	adds	r7, #12
    dba4:	46bd      	mov	sp, r7
    dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
    dbaa:	4770      	bx	lr

0000dbac <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    dbac:	b480      	push	{r7}
    dbae:	b083      	sub	sp, #12
    dbb0:	af00      	add	r7, sp, #0
    dbb2:	6078      	str	r0, [r7, #4]
    dbb4:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    dbb6:	2300      	movs	r3, #0
}
    dbb8:	4618      	mov	r0, r3
    dbba:	370c      	adds	r7, #12
    dbbc:	46bd      	mov	sp, r7
    dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    dbc2:	4770      	bx	lr

0000dbc4 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    dbc4:	b480      	push	{r7}
    dbc6:	b085      	sub	sp, #20
    dbc8:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    dbca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    dbce:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    dbd0:	4b28      	ldr	r3, [pc, #160]	; (dc74 <_usb_load_calib+0xb0>)
    dbd2:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    dbd4:	f003 031f 	and.w	r3, r3, #31
    dbd8:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    dbda:	4b26      	ldr	r3, [pc, #152]	; (dc74 <_usb_load_calib+0xb0>)
    dbdc:	681b      	ldr	r3, [r3, #0]
    dbde:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    dbe0:	f003 031f 	and.w	r3, r3, #31
    dbe4:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    dbe6:	4b23      	ldr	r3, [pc, #140]	; (dc74 <_usb_load_calib+0xb0>)
    dbe8:	681b      	ldr	r3, [r3, #0]
    dbea:	0a9b      	lsrs	r3, r3, #10
    dbec:	f003 0307 	and.w	r3, r3, #7
    dbf0:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    dbf2:	68fb      	ldr	r3, [r7, #12]
    dbf4:	2b00      	cmp	r3, #0
    dbf6:	d002      	beq.n	dbfe <_usb_load_calib+0x3a>
    dbf8:	68fb      	ldr	r3, [r7, #12]
    dbfa:	2b1f      	cmp	r3, #31
    dbfc:	d101      	bne.n	dc02 <_usb_load_calib+0x3e>
		pad_transn = 9;
    dbfe:	2309      	movs	r3, #9
    dc00:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    dc02:	68bb      	ldr	r3, [r7, #8]
    dc04:	2b00      	cmp	r3, #0
    dc06:	d002      	beq.n	dc0e <_usb_load_calib+0x4a>
    dc08:	68bb      	ldr	r3, [r7, #8]
    dc0a:	2b1f      	cmp	r3, #31
    dc0c:	d101      	bne.n	dc12 <_usb_load_calib+0x4e>
		pad_transp = 25;
    dc0e:	2319      	movs	r3, #25
    dc10:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    dc12:	687b      	ldr	r3, [r7, #4]
    dc14:	2b00      	cmp	r3, #0
    dc16:	d002      	beq.n	dc1e <_usb_load_calib+0x5a>
    dc18:	687b      	ldr	r3, [r7, #4]
    dc1a:	2b07      	cmp	r3, #7
    dc1c:	d101      	bne.n	dc22 <_usb_load_calib+0x5e>
		pad_trim = 6;
    dc1e:	2306      	movs	r3, #6
    dc20:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    dc22:	68fb      	ldr	r3, [r7, #12]
    dc24:	b29b      	uxth	r3, r3
    dc26:	019b      	lsls	r3, r3, #6
    dc28:	b29b      	uxth	r3, r3
    dc2a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    dc2e:	b29a      	uxth	r2, r3
    dc30:	68bb      	ldr	r3, [r7, #8]
    dc32:	b29b      	uxth	r3, r3
    dc34:	f003 031f 	and.w	r3, r3, #31
    dc38:	b29b      	uxth	r3, r3
    dc3a:	4313      	orrs	r3, r2
    dc3c:	b29a      	uxth	r2, r3
    dc3e:	687b      	ldr	r3, [r7, #4]
    dc40:	b29b      	uxth	r3, r3
    dc42:	031b      	lsls	r3, r3, #12
    dc44:	b29b      	uxth	r3, r3
    dc46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    dc4a:	b29b      	uxth	r3, r3
    dc4c:	4313      	orrs	r3, r2
    dc4e:	b29a      	uxth	r2, r3
    dc50:	683b      	ldr	r3, [r7, #0]
    dc52:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    dc54:	683a      	ldr	r2, [r7, #0]
    dc56:	78d3      	ldrb	r3, [r2, #3]
    dc58:	f043 0303 	orr.w	r3, r3, #3
    dc5c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    dc5e:	683a      	ldr	r2, [r7, #0]
    dc60:	78d3      	ldrb	r3, [r2, #3]
    dc62:	f043 030c 	orr.w	r3, r3, #12
    dc66:	70d3      	strb	r3, [r2, #3]
}
    dc68:	bf00      	nop
    dc6a:	3714      	adds	r7, #20
    dc6c:	46bd      	mov	sp, r7
    dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc72:	4770      	bx	lr
    dc74:	00800084 	.word	0x00800084

0000dc78 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    dc78:	b580      	push	{r7, lr}
    dc7a:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    dc7c:	bf00      	nop
    dc7e:	2203      	movs	r2, #3
    dc80:	2100      	movs	r1, #0
    dc82:	4804      	ldr	r0, [pc, #16]	; (dc94 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    dc84:	4b04      	ldr	r3, [pc, #16]	; (dc98 <_usb_d_dev_wait_dpll_rdy+0x20>)
    dc86:	4798      	blx	r3
    dc88:	4603      	mov	r3, r0
    dc8a:	2b03      	cmp	r3, #3
    dc8c:	d1f7      	bne.n	dc7e <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    dc8e:	bf00      	nop
    dc90:	bd80      	pop	{r7, pc}
    dc92:	bf00      	nop
    dc94:	40001000 	.word	0x40001000
    dc98:	0000d6ad 	.word	0x0000d6ad

0000dc9c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    dc9c:	b580      	push	{r7, lr}
    dc9e:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    dca0:	480e      	ldr	r0, [pc, #56]	; (dcdc <_usb_d_dev_wait_dfll_rdy+0x40>)
    dca2:	4b0f      	ldr	r3, [pc, #60]	; (dce0 <_usb_d_dev_wait_dfll_rdy+0x44>)
    dca4:	4798      	blx	r3
    dca6:	4603      	mov	r3, r0
    dca8:	2b00      	cmp	r3, #0
    dcaa:	d00a      	beq.n	dcc2 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    dcac:	bf00      	nop
    dcae:	f44f 6110 	mov.w	r1, #2304	; 0x900
    dcb2:	480a      	ldr	r0, [pc, #40]	; (dcdc <_usb_d_dev_wait_dfll_rdy+0x40>)
    dcb4:	4b0b      	ldr	r3, [pc, #44]	; (dce4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    dcb6:	4798      	blx	r3
    dcb8:	4603      	mov	r3, r0
    dcba:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    dcbe:	d1f6      	bne.n	dcae <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    dcc0:	e009      	b.n	dcd6 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    dcc2:	bf00      	nop
    dcc4:	f44f 7180 	mov.w	r1, #256	; 0x100
    dcc8:	4804      	ldr	r0, [pc, #16]	; (dcdc <_usb_d_dev_wait_dfll_rdy+0x40>)
    dcca:	4b06      	ldr	r3, [pc, #24]	; (dce4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    dccc:	4798      	blx	r3
    dcce:	4603      	mov	r3, r0
    dcd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    dcd4:	d1f6      	bne.n	dcc4 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    dcd6:	bf00      	nop
    dcd8:	bd80      	pop	{r7, pc}
    dcda:	bf00      	nop
    dcdc:	40001000 	.word	0x40001000
    dce0:	0000d70b 	.word	0x0000d70b
    dce4:	0000d6e5 	.word	0x0000d6e5

0000dce8 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    dce8:	b580      	push	{r7, lr}
    dcea:	b082      	sub	sp, #8
    dcec:	af00      	add	r7, sp, #0
    dcee:	4603      	mov	r3, r0
    dcf0:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    dcf2:	79fb      	ldrb	r3, [r7, #7]
    dcf4:	2b00      	cmp	r3, #0
    dcf6:	d102      	bne.n	dcfe <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    dcf8:	4b05      	ldr	r3, [pc, #20]	; (dd10 <_usb_d_dev_wait_clk_rdy+0x28>)
    dcfa:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    dcfc:	e004      	b.n	dd08 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    dcfe:	79fb      	ldrb	r3, [r7, #7]
    dd00:	2b01      	cmp	r3, #1
    dd02:	d101      	bne.n	dd08 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    dd04:	4b03      	ldr	r3, [pc, #12]	; (dd14 <_usb_d_dev_wait_clk_rdy+0x2c>)
    dd06:	4798      	blx	r3
}
    dd08:	bf00      	nop
    dd0a:	3708      	adds	r7, #8
    dd0c:	46bd      	mov	sp, r7
    dd0e:	bd80      	pop	{r7, pc}
    dd10:	0000dc9d 	.word	0x0000dc9d
    dd14:	0000dc79 	.word	0x0000dc79

0000dd18 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    dd18:	b580      	push	{r7, lr}
    dd1a:	b082      	sub	sp, #8
    dd1c:	af00      	add	r7, sp, #0
    dd1e:	4603      	mov	r3, r0
    dd20:	6039      	str	r1, [r7, #0]
    dd22:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    dd24:	683b      	ldr	r3, [r7, #0]
    dd26:	b2da      	uxtb	r2, r3
    dd28:	79fb      	ldrb	r3, [r7, #7]
    dd2a:	4619      	mov	r1, r3
    dd2c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dd30:	4b02      	ldr	r3, [pc, #8]	; (dd3c <_usbd_ep_int_ack+0x24>)
    dd32:	4798      	blx	r3
}
    dd34:	bf00      	nop
    dd36:	3708      	adds	r7, #8
    dd38:	46bd      	mov	sp, r7
    dd3a:	bd80      	pop	{r7, pc}
    dd3c:	0000d7f1 	.word	0x0000d7f1

0000dd40 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    dd40:	b580      	push	{r7, lr}
    dd42:	b082      	sub	sp, #8
    dd44:	af00      	add	r7, sp, #0
    dd46:	4603      	mov	r3, r0
    dd48:	6039      	str	r1, [r7, #0]
    dd4a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    dd4c:	683b      	ldr	r3, [r7, #0]
    dd4e:	b2da      	uxtb	r2, r3
    dd50:	79fb      	ldrb	r3, [r7, #7]
    dd52:	4619      	mov	r1, r3
    dd54:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dd58:	4b02      	ldr	r3, [pc, #8]	; (dd64 <_usbd_ep_int_en+0x24>)
    dd5a:	4798      	blx	r3
}
    dd5c:	bf00      	nop
    dd5e:	3708      	adds	r7, #8
    dd60:	46bd      	mov	sp, r7
    dd62:	bd80      	pop	{r7, pc}
    dd64:	0000d8c5 	.word	0x0000d8c5

0000dd68 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    dd68:	b580      	push	{r7, lr}
    dd6a:	b082      	sub	sp, #8
    dd6c:	af00      	add	r7, sp, #0
    dd6e:	4603      	mov	r3, r0
    dd70:	6039      	str	r1, [r7, #0]
    dd72:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    dd74:	683b      	ldr	r3, [r7, #0]
    dd76:	b2da      	uxtb	r2, r3
    dd78:	79fb      	ldrb	r3, [r7, #7]
    dd7a:	4619      	mov	r1, r3
    dd7c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dd80:	4b02      	ldr	r3, [pc, #8]	; (dd8c <_usbd_ep_int_dis+0x24>)
    dd82:	4798      	blx	r3
}
    dd84:	bf00      	nop
    dd86:	3708      	adds	r7, #8
    dd88:	46bd      	mov	sp, r7
    dd8a:	bd80      	pop	{r7, pc}
    dd8c:	0000d8f1 	.word	0x0000d8f1

0000dd90 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    dd90:	b580      	push	{r7, lr}
    dd92:	b082      	sub	sp, #8
    dd94:	af00      	add	r7, sp, #0
    dd96:	4603      	mov	r3, r0
    dd98:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    dd9a:	79fb      	ldrb	r3, [r7, #7]
    dd9c:	4619      	mov	r1, r3
    dd9e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dda2:	4b06      	ldr	r3, [pc, #24]	; (ddbc <_usbd_ep_is_ctrl+0x2c>)
    dda4:	4798      	blx	r3
    dda6:	4603      	mov	r3, r0
    dda8:	2b11      	cmp	r3, #17
    ddaa:	bf0c      	ite	eq
    ddac:	2301      	moveq	r3, #1
    ddae:	2300      	movne	r3, #0
    ddb0:	b2db      	uxtb	r3, r3
}
    ddb2:	4618      	mov	r0, r3
    ddb4:	3708      	adds	r7, #8
    ddb6:	46bd      	mov	sp, r7
    ddb8:	bd80      	pop	{r7, pc}
    ddba:	bf00      	nop
    ddbc:	0000d9ab 	.word	0x0000d9ab

0000ddc0 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    ddc0:	b580      	push	{r7, lr}
    ddc2:	b082      	sub	sp, #8
    ddc4:	af00      	add	r7, sp, #0
    ddc6:	4603      	mov	r3, r0
    ddc8:	71fb      	strb	r3, [r7, #7]
    ddca:	460b      	mov	r3, r1
    ddcc:	71bb      	strb	r3, [r7, #6]
    ddce:	4613      	mov	r3, r2
    ddd0:	717b      	strb	r3, [r7, #5]
	if (st) {
    ddd2:	797b      	ldrb	r3, [r7, #5]
    ddd4:	2b00      	cmp	r3, #0
    ddd6:	d00b      	beq.n	ddf0 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    ddd8:	79bb      	ldrb	r3, [r7, #6]
    ddda:	2210      	movs	r2, #16
    dddc:	fa02 f303 	lsl.w	r3, r2, r3
    dde0:	b2da      	uxtb	r2, r3
    dde2:	79fb      	ldrb	r3, [r7, #7]
    dde4:	4619      	mov	r1, r3
    dde6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ddea:	4b09      	ldr	r3, [pc, #36]	; (de10 <_usbd_ep_set_stall+0x50>)
    ddec:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    ddee:	e00a      	b.n	de06 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    ddf0:	79bb      	ldrb	r3, [r7, #6]
    ddf2:	2210      	movs	r2, #16
    ddf4:	fa02 f303 	lsl.w	r3, r2, r3
    ddf8:	b2da      	uxtb	r2, r3
    ddfa:	79fb      	ldrb	r3, [r7, #7]
    ddfc:	4619      	mov	r1, r3
    ddfe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    de02:	4b04      	ldr	r3, [pc, #16]	; (de14 <_usbd_ep_set_stall+0x54>)
    de04:	4798      	blx	r3
}
    de06:	bf00      	nop
    de08:	3708      	adds	r7, #8
    de0a:	46bd      	mov	sp, r7
    de0c:	bd80      	pop	{r7, pc}
    de0e:	bf00      	nop
    de10:	0000d81d 	.word	0x0000d81d
    de14:	0000d871 	.word	0x0000d871

0000de18 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    de18:	b580      	push	{r7, lr}
    de1a:	b084      	sub	sp, #16
    de1c:	af00      	add	r7, sp, #0
    de1e:	4603      	mov	r3, r0
    de20:	460a      	mov	r2, r1
    de22:	71fb      	strb	r3, [r7, #7]
    de24:	4613      	mov	r3, r2
    de26:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    de28:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    de2c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    de2e:	79fb      	ldrb	r3, [r7, #7]
    de30:	4619      	mov	r1, r3
    de32:	68f8      	ldr	r0, [r7, #12]
    de34:	4b08      	ldr	r3, [pc, #32]	; (de58 <_usbd_ep_is_stalled+0x40>)
    de36:	4798      	blx	r3
    de38:	4603      	mov	r3, r0
    de3a:	4619      	mov	r1, r3
    de3c:	79bb      	ldrb	r3, [r7, #6]
    de3e:	2210      	movs	r2, #16
    de40:	fa02 f303 	lsl.w	r3, r2, r3
    de44:	400b      	ands	r3, r1
    de46:	2b00      	cmp	r3, #0
    de48:	bf14      	ite	ne
    de4a:	2301      	movne	r3, #1
    de4c:	2300      	moveq	r3, #0
    de4e:	b2db      	uxtb	r3, r3
}
    de50:	4618      	mov	r0, r3
    de52:	3710      	adds	r7, #16
    de54:	46bd      	mov	sp, r7
    de56:	bd80      	pop	{r7, pc}
    de58:	0000d849 	.word	0x0000d849

0000de5c <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    de5c:	b580      	push	{r7, lr}
    de5e:	b084      	sub	sp, #16
    de60:	af00      	add	r7, sp, #0
    de62:	4603      	mov	r3, r0
    de64:	460a      	mov	r2, r1
    de66:	71fb      	strb	r3, [r7, #7]
    de68:	4613      	mov	r3, r2
    de6a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    de6c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    de70:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    de72:	79fb      	ldrb	r3, [r7, #7]
    de74:	4619      	mov	r1, r3
    de76:	68f8      	ldr	r0, [r7, #12]
    de78:	4b08      	ldr	r3, [pc, #32]	; (de9c <_usbd_ep_is_stall_sent+0x40>)
    de7a:	4798      	blx	r3
    de7c:	4603      	mov	r3, r0
    de7e:	4619      	mov	r1, r3
    de80:	79bb      	ldrb	r3, [r7, #6]
    de82:	2220      	movs	r2, #32
    de84:	fa02 f303 	lsl.w	r3, r2, r3
    de88:	400b      	ands	r3, r1
    de8a:	2b00      	cmp	r3, #0
    de8c:	bf14      	ite	ne
    de8e:	2301      	movne	r3, #1
    de90:	2300      	moveq	r3, #0
    de92:	b2db      	uxtb	r3, r3
}
    de94:	4618      	mov	r0, r3
    de96:	3710      	adds	r7, #16
    de98:	46bd      	mov	sp, r7
    de9a:	bd80      	pop	{r7, pc}
    de9c:	0000d7c9 	.word	0x0000d7c9

0000dea0 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    dea0:	b580      	push	{r7, lr}
    dea2:	b082      	sub	sp, #8
    dea4:	af00      	add	r7, sp, #0
    dea6:	4603      	mov	r3, r0
    dea8:	460a      	mov	r2, r1
    deaa:	71fb      	strb	r3, [r7, #7]
    deac:	4613      	mov	r3, r2
    deae:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    deb0:	79bb      	ldrb	r3, [r7, #6]
    deb2:	2220      	movs	r2, #32
    deb4:	409a      	lsls	r2, r3
    deb6:	79fb      	ldrb	r3, [r7, #7]
    deb8:	4611      	mov	r1, r2
    deba:	4618      	mov	r0, r3
    debc:	4b02      	ldr	r3, [pc, #8]	; (dec8 <_usbd_ep_ack_stall+0x28>)
    debe:	4798      	blx	r3
}
    dec0:	bf00      	nop
    dec2:	3708      	adds	r7, #8
    dec4:	46bd      	mov	sp, r7
    dec6:	bd80      	pop	{r7, pc}
    dec8:	0000dd19 	.word	0x0000dd19

0000decc <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    decc:	b580      	push	{r7, lr}
    dece:	b082      	sub	sp, #8
    ded0:	af00      	add	r7, sp, #0
    ded2:	4603      	mov	r3, r0
    ded4:	71fb      	strb	r3, [r7, #7]
    ded6:	460b      	mov	r3, r1
    ded8:	71bb      	strb	r3, [r7, #6]
    deda:	4613      	mov	r3, r2
    dedc:	717b      	strb	r3, [r7, #5]
	if (en) {
    dede:	797b      	ldrb	r3, [r7, #5]
    dee0:	2b00      	cmp	r3, #0
    dee2:	d008      	beq.n	def6 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    dee4:	79bb      	ldrb	r3, [r7, #6]
    dee6:	2220      	movs	r2, #32
    dee8:	409a      	lsls	r2, r3
    deea:	79fb      	ldrb	r3, [r7, #7]
    deec:	4611      	mov	r1, r2
    deee:	4618      	mov	r0, r3
    def0:	4b07      	ldr	r3, [pc, #28]	; (df10 <_usbd_ep_int_stall_en+0x44>)
    def2:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    def4:	e007      	b.n	df06 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    def6:	79bb      	ldrb	r3, [r7, #6]
    def8:	2220      	movs	r2, #32
    defa:	409a      	lsls	r2, r3
    defc:	79fb      	ldrb	r3, [r7, #7]
    defe:	4611      	mov	r1, r2
    df00:	4618      	mov	r0, r3
    df02:	4b04      	ldr	r3, [pc, #16]	; (df14 <_usbd_ep_int_stall_en+0x48>)
    df04:	4798      	blx	r3
}
    df06:	bf00      	nop
    df08:	3708      	adds	r7, #8
    df0a:	46bd      	mov	sp, r7
    df0c:	bd80      	pop	{r7, pc}
    df0e:	bf00      	nop
    df10:	0000dd41 	.word	0x0000dd41
    df14:	0000dd69 	.word	0x0000dd69

0000df18 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    df18:	b580      	push	{r7, lr}
    df1a:	b082      	sub	sp, #8
    df1c:	af00      	add	r7, sp, #0
    df1e:	4603      	mov	r3, r0
    df20:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    df22:	79fb      	ldrb	r3, [r7, #7]
    df24:	4619      	mov	r1, r3
    df26:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    df2a:	4b03      	ldr	r3, [pc, #12]	; (df38 <_usbd_ep_stop_setup+0x20>)
    df2c:	4798      	blx	r3
}
    df2e:	bf00      	nop
    df30:	3708      	adds	r7, #8
    df32:	46bd      	mov	sp, r7
    df34:	bd80      	pop	{r7, pc}
    df36:	bf00      	nop
    df38:	0000d89d 	.word	0x0000d89d

0000df3c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    df3c:	b580      	push	{r7, lr}
    df3e:	b082      	sub	sp, #8
    df40:	af00      	add	r7, sp, #0
    df42:	4603      	mov	r3, r0
    df44:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    df46:	79fb      	ldrb	r3, [r7, #7]
    df48:	2210      	movs	r2, #16
    df4a:	4619      	mov	r1, r3
    df4c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    df50:	4b05      	ldr	r3, [pc, #20]	; (df68 <_usbd_ep_is_setup+0x2c>)
    df52:	4798      	blx	r3
    df54:	4603      	mov	r3, r0
    df56:	2b00      	cmp	r3, #0
    df58:	bf14      	ite	ne
    df5a:	2301      	movne	r3, #1
    df5c:	2300      	moveq	r3, #0
    df5e:	b2db      	uxtb	r3, r3
}
    df60:	4618      	mov	r0, r3
    df62:	3708      	adds	r7, #8
    df64:	46bd      	mov	sp, r7
    df66:	bd80      	pop	{r7, pc}
    df68:	0000d793 	.word	0x0000d793

0000df6c <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    df6c:	b580      	push	{r7, lr}
    df6e:	b082      	sub	sp, #8
    df70:	af00      	add	r7, sp, #0
    df72:	4603      	mov	r3, r0
    df74:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    df76:	79fb      	ldrb	r3, [r7, #7]
    df78:	2110      	movs	r1, #16
    df7a:	4618      	mov	r0, r3
    df7c:	4b02      	ldr	r3, [pc, #8]	; (df88 <_usbd_ep_ack_setup+0x1c>)
    df7e:	4798      	blx	r3
}
    df80:	bf00      	nop
    df82:	3708      	adds	r7, #8
    df84:	46bd      	mov	sp, r7
    df86:	bd80      	pop	{r7, pc}
    df88:	0000dd19 	.word	0x0000dd19

0000df8c <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    df8c:	b580      	push	{r7, lr}
    df8e:	b082      	sub	sp, #8
    df90:	af00      	add	r7, sp, #0
    df92:	4603      	mov	r3, r0
    df94:	71fb      	strb	r3, [r7, #7]
    df96:	460b      	mov	r3, r1
    df98:	71bb      	strb	r3, [r7, #6]
    df9a:	4613      	mov	r3, r2
    df9c:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    df9e:	797b      	ldrb	r3, [r7, #5]
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d00b      	beq.n	dfbc <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    dfa4:	79bb      	ldrb	r3, [r7, #6]
    dfa6:	2201      	movs	r2, #1
    dfa8:	fa02 f303 	lsl.w	r3, r2, r3
    dfac:	b2da      	uxtb	r2, r3
    dfae:	79fb      	ldrb	r3, [r7, #7]
    dfb0:	4619      	mov	r1, r3
    dfb2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dfb6:	4b09      	ldr	r3, [pc, #36]	; (dfdc <_usbd_ep_set_toggle+0x50>)
    dfb8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    dfba:	e00a      	b.n	dfd2 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    dfbc:	79bb      	ldrb	r3, [r7, #6]
    dfbe:	2201      	movs	r2, #1
    dfc0:	fa02 f303 	lsl.w	r3, r2, r3
    dfc4:	b2da      	uxtb	r2, r3
    dfc6:	79fb      	ldrb	r3, [r7, #7]
    dfc8:	4619      	mov	r1, r3
    dfca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dfce:	4b04      	ldr	r3, [pc, #16]	; (dfe0 <_usbd_ep_set_toggle+0x54>)
    dfd0:	4798      	blx	r3
}
    dfd2:	bf00      	nop
    dfd4:	3708      	adds	r7, #8
    dfd6:	46bd      	mov	sp, r7
    dfd8:	bd80      	pop	{r7, pc}
    dfda:	bf00      	nop
    dfdc:	0000d81d 	.word	0x0000d81d
    dfe0:	0000d871 	.word	0x0000d871

0000dfe4 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    dfe4:	b580      	push	{r7, lr}
    dfe6:	b082      	sub	sp, #8
    dfe8:	af00      	add	r7, sp, #0
    dfea:	4603      	mov	r3, r0
    dfec:	460a      	mov	r2, r1
    dfee:	71fb      	strb	r3, [r7, #7]
    dff0:	4613      	mov	r3, r2
    dff2:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    dff4:	79bb      	ldrb	r3, [r7, #6]
    dff6:	2201      	movs	r2, #1
    dff8:	409a      	lsls	r2, r3
    dffa:	79fb      	ldrb	r3, [r7, #7]
    dffc:	4611      	mov	r1, r2
    dffe:	4618      	mov	r0, r3
    e000:	4b02      	ldr	r3, [pc, #8]	; (e00c <_usbd_ep_ack_io_cpt+0x28>)
    e002:	4798      	blx	r3
}
    e004:	bf00      	nop
    e006:	3708      	adds	r7, #8
    e008:	46bd      	mov	sp, r7
    e00a:	bd80      	pop	{r7, pc}
    e00c:	0000dd19 	.word	0x0000dd19

0000e010 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    e010:	b480      	push	{r7}
    e012:	b085      	sub	sp, #20
    e014:	af00      	add	r7, sp, #0
    e016:	4603      	mov	r3, r0
    e018:	603a      	str	r2, [r7, #0]
    e01a:	71fb      	strb	r3, [r7, #7]
    e01c:	460b      	mov	r3, r1
    e01e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e020:	79fa      	ldrb	r2, [r7, #7]
    e022:	79bb      	ldrb	r3, [r7, #6]
    e024:	0052      	lsls	r2, r2, #1
    e026:	4413      	add	r3, r2
    e028:	011b      	lsls	r3, r3, #4
    e02a:	4a06      	ldr	r2, [pc, #24]	; (e044 <_usbd_ep_set_buf+0x34>)
    e02c:	4413      	add	r3, r2
    e02e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    e030:	68fb      	ldr	r3, [r7, #12]
    e032:	683a      	ldr	r2, [r7, #0]
    e034:	601a      	str	r2, [r3, #0]
}
    e036:	bf00      	nop
    e038:	3714      	adds	r7, #20
    e03a:	46bd      	mov	sp, r7
    e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e040:	4770      	bx	lr
    e042:	bf00      	nop
    e044:	20008aa8 	.word	0x20008aa8

0000e048 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    e048:	b480      	push	{r7}
    e04a:	b085      	sub	sp, #20
    e04c:	af00      	add	r7, sp, #0
    e04e:	4603      	mov	r3, r0
    e050:	71fb      	strb	r3, [r7, #7]
    e052:	460b      	mov	r3, r1
    e054:	71bb      	strb	r3, [r7, #6]
    e056:	4613      	mov	r3, r2
    e058:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e05a:	79fa      	ldrb	r2, [r7, #7]
    e05c:	79bb      	ldrb	r3, [r7, #6]
    e05e:	0052      	lsls	r2, r2, #1
    e060:	4413      	add	r3, r2
    e062:	011b      	lsls	r3, r3, #4
    e064:	4a08      	ldr	r2, [pc, #32]	; (e088 <_usbd_ep_set_in_count+0x40>)
    e066:	4413      	add	r3, r2
    e068:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    e06a:	88bb      	ldrh	r3, [r7, #4]
    e06c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e070:	b299      	uxth	r1, r3
    e072:	68fa      	ldr	r2, [r7, #12]
    e074:	6853      	ldr	r3, [r2, #4]
    e076:	f361 339b 	bfi	r3, r1, #14, #14
    e07a:	6053      	str	r3, [r2, #4]
}
    e07c:	bf00      	nop
    e07e:	3714      	adds	r7, #20
    e080:	46bd      	mov	sp, r7
    e082:	f85d 7b04 	ldr.w	r7, [sp], #4
    e086:	4770      	bx	lr
    e088:	20008aa8 	.word	0x20008aa8

0000e08c <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    e08c:	b480      	push	{r7}
    e08e:	b085      	sub	sp, #20
    e090:	af00      	add	r7, sp, #0
    e092:	4603      	mov	r3, r0
    e094:	71fb      	strb	r3, [r7, #7]
    e096:	460b      	mov	r3, r1
    e098:	71bb      	strb	r3, [r7, #6]
    e09a:	4613      	mov	r3, r2
    e09c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e09e:	79fa      	ldrb	r2, [r7, #7]
    e0a0:	79bb      	ldrb	r3, [r7, #6]
    e0a2:	0052      	lsls	r2, r2, #1
    e0a4:	4413      	add	r3, r2
    e0a6:	011b      	lsls	r3, r3, #4
    e0a8:	4a08      	ldr	r2, [pc, #32]	; (e0cc <_usbd_ep_set_in_size+0x40>)
    e0aa:	4413      	add	r3, r2
    e0ac:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    e0ae:	88bb      	ldrh	r3, [r7, #4]
    e0b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e0b4:	b299      	uxth	r1, r3
    e0b6:	68fa      	ldr	r2, [r7, #12]
    e0b8:	6853      	ldr	r3, [r2, #4]
    e0ba:	f361 030d 	bfi	r3, r1, #0, #14
    e0be:	6053      	str	r3, [r2, #4]
}
    e0c0:	bf00      	nop
    e0c2:	3714      	adds	r7, #20
    e0c4:	46bd      	mov	sp, r7
    e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0ca:	4770      	bx	lr
    e0cc:	20008aa8 	.word	0x20008aa8

0000e0d0 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    e0d0:	b480      	push	{r7}
    e0d2:	b085      	sub	sp, #20
    e0d4:	af00      	add	r7, sp, #0
    e0d6:	4603      	mov	r3, r0
    e0d8:	71fb      	strb	r3, [r7, #7]
    e0da:	460b      	mov	r3, r1
    e0dc:	71bb      	strb	r3, [r7, #6]
    e0de:	4613      	mov	r3, r2
    e0e0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e0e2:	79fa      	ldrb	r2, [r7, #7]
    e0e4:	79bb      	ldrb	r3, [r7, #6]
    e0e6:	0052      	lsls	r2, r2, #1
    e0e8:	4413      	add	r3, r2
    e0ea:	011b      	lsls	r3, r3, #4
    e0ec:	4a08      	ldr	r2, [pc, #32]	; (e110 <_usbd_ep_set_out_count+0x40>)
    e0ee:	4413      	add	r3, r2
    e0f0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    e0f2:	88bb      	ldrh	r3, [r7, #4]
    e0f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e0f8:	b299      	uxth	r1, r3
    e0fa:	68fa      	ldr	r2, [r7, #12]
    e0fc:	6853      	ldr	r3, [r2, #4]
    e0fe:	f361 030d 	bfi	r3, r1, #0, #14
    e102:	6053      	str	r3, [r2, #4]
}
    e104:	bf00      	nop
    e106:	3714      	adds	r7, #20
    e108:	46bd      	mov	sp, r7
    e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e10e:	4770      	bx	lr
    e110:	20008aa8 	.word	0x20008aa8

0000e114 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    e114:	b480      	push	{r7}
    e116:	b085      	sub	sp, #20
    e118:	af00      	add	r7, sp, #0
    e11a:	4603      	mov	r3, r0
    e11c:	71fb      	strb	r3, [r7, #7]
    e11e:	460b      	mov	r3, r1
    e120:	71bb      	strb	r3, [r7, #6]
    e122:	4613      	mov	r3, r2
    e124:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e126:	79fa      	ldrb	r2, [r7, #7]
    e128:	79bb      	ldrb	r3, [r7, #6]
    e12a:	0052      	lsls	r2, r2, #1
    e12c:	4413      	add	r3, r2
    e12e:	011b      	lsls	r3, r3, #4
    e130:	4a08      	ldr	r2, [pc, #32]	; (e154 <_usbd_ep_set_out_size+0x40>)
    e132:	4413      	add	r3, r2
    e134:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    e136:	88bb      	ldrh	r3, [r7, #4]
    e138:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e13c:	b299      	uxth	r1, r3
    e13e:	68fa      	ldr	r2, [r7, #12]
    e140:	6853      	ldr	r3, [r2, #4]
    e142:	f361 339b 	bfi	r3, r1, #14, #14
    e146:	6053      	str	r3, [r2, #4]
}
    e148:	bf00      	nop
    e14a:	3714      	adds	r7, #20
    e14c:	46bd      	mov	sp, r7
    e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e152:	4770      	bx	lr
    e154:	20008aa8 	.word	0x20008aa8

0000e158 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    e158:	b580      	push	{r7, lr}
    e15a:	b084      	sub	sp, #16
    e15c:	af00      	add	r7, sp, #0
    e15e:	60ba      	str	r2, [r7, #8]
    e160:	607b      	str	r3, [r7, #4]
    e162:	4603      	mov	r3, r0
    e164:	73fb      	strb	r3, [r7, #15]
    e166:	460b      	mov	r3, r1
    e168:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    e16a:	68bb      	ldr	r3, [r7, #8]
    e16c:	b29a      	uxth	r2, r3
    e16e:	7bb9      	ldrb	r1, [r7, #14]
    e170:	7bfb      	ldrb	r3, [r7, #15]
    e172:	4618      	mov	r0, r3
    e174:	4b06      	ldr	r3, [pc, #24]	; (e190 <_usbd_ep_set_in_trans+0x38>)
    e176:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    e178:	687b      	ldr	r3, [r7, #4]
    e17a:	b29a      	uxth	r2, r3
    e17c:	7bb9      	ldrb	r1, [r7, #14]
    e17e:	7bfb      	ldrb	r3, [r7, #15]
    e180:	4618      	mov	r0, r3
    e182:	4b04      	ldr	r3, [pc, #16]	; (e194 <_usbd_ep_set_in_trans+0x3c>)
    e184:	4798      	blx	r3
}
    e186:	bf00      	nop
    e188:	3710      	adds	r7, #16
    e18a:	46bd      	mov	sp, r7
    e18c:	bd80      	pop	{r7, pc}
    e18e:	bf00      	nop
    e190:	0000e08d 	.word	0x0000e08d
    e194:	0000e049 	.word	0x0000e049

0000e198 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    e198:	b580      	push	{r7, lr}
    e19a:	b084      	sub	sp, #16
    e19c:	af00      	add	r7, sp, #0
    e19e:	60ba      	str	r2, [r7, #8]
    e1a0:	607b      	str	r3, [r7, #4]
    e1a2:	4603      	mov	r3, r0
    e1a4:	73fb      	strb	r3, [r7, #15]
    e1a6:	460b      	mov	r3, r1
    e1a8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    e1aa:	68bb      	ldr	r3, [r7, #8]
    e1ac:	b29a      	uxth	r2, r3
    e1ae:	7bb9      	ldrb	r1, [r7, #14]
    e1b0:	7bfb      	ldrb	r3, [r7, #15]
    e1b2:	4618      	mov	r0, r3
    e1b4:	4b06      	ldr	r3, [pc, #24]	; (e1d0 <_usbd_ep_set_out_trans+0x38>)
    e1b6:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    e1b8:	687b      	ldr	r3, [r7, #4]
    e1ba:	b29a      	uxth	r2, r3
    e1bc:	7bb9      	ldrb	r1, [r7, #14]
    e1be:	7bfb      	ldrb	r3, [r7, #15]
    e1c0:	4618      	mov	r0, r3
    e1c2:	4b04      	ldr	r3, [pc, #16]	; (e1d4 <_usbd_ep_set_out_trans+0x3c>)
    e1c4:	4798      	blx	r3
}
    e1c6:	bf00      	nop
    e1c8:	3710      	adds	r7, #16
    e1ca:	46bd      	mov	sp, r7
    e1cc:	bd80      	pop	{r7, pc}
    e1ce:	bf00      	nop
    e1d0:	0000e115 	.word	0x0000e115
    e1d4:	0000e0d1 	.word	0x0000e0d1

0000e1d8 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    e1d8:	b480      	push	{r7}
    e1da:	b085      	sub	sp, #20
    e1dc:	af00      	add	r7, sp, #0
    e1de:	4603      	mov	r3, r0
    e1e0:	460a      	mov	r2, r1
    e1e2:	71fb      	strb	r3, [r7, #7]
    e1e4:	4613      	mov	r3, r2
    e1e6:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e1e8:	79fa      	ldrb	r2, [r7, #7]
    e1ea:	79bb      	ldrb	r3, [r7, #6]
    e1ec:	0052      	lsls	r2, r2, #1
    e1ee:	4413      	add	r3, r2
    e1f0:	011b      	lsls	r3, r3, #4
    e1f2:	4a06      	ldr	r2, [pc, #24]	; (e20c <_usbd_ep_clear_bank_status+0x34>)
    e1f4:	4413      	add	r3, r2
    e1f6:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    e1f8:	68fb      	ldr	r3, [r7, #12]
    e1fa:	2200      	movs	r2, #0
    e1fc:	729a      	strb	r2, [r3, #10]
}
    e1fe:	bf00      	nop
    e200:	3714      	adds	r7, #20
    e202:	46bd      	mov	sp, r7
    e204:	f85d 7b04 	ldr.w	r7, [sp], #4
    e208:	4770      	bx	lr
    e20a:	bf00      	nop
    e20c:	20008aa8 	.word	0x20008aa8

0000e210 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    e210:	b580      	push	{r7, lr}
    e212:	b082      	sub	sp, #8
    e214:	af00      	add	r7, sp, #0
    e216:	4603      	mov	r3, r0
    e218:	71fb      	strb	r3, [r7, #7]
    e21a:	460b      	mov	r3, r1
    e21c:	71bb      	strb	r3, [r7, #6]
    e21e:	4613      	mov	r3, r2
    e220:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    e222:	797b      	ldrb	r3, [r7, #5]
    e224:	2b00      	cmp	r3, #0
    e226:	d00b      	beq.n	e240 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e228:	79bb      	ldrb	r3, [r7, #6]
    e22a:	2240      	movs	r2, #64	; 0x40
    e22c:	fa02 f303 	lsl.w	r3, r2, r3
    e230:	b2da      	uxtb	r2, r3
    e232:	79fb      	ldrb	r3, [r7, #7]
    e234:	4619      	mov	r1, r3
    e236:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e23a:	4b09      	ldr	r3, [pc, #36]	; (e260 <_usbd_ep_set_in_rdy+0x50>)
    e23c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    e23e:	e00a      	b.n	e256 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e240:	79bb      	ldrb	r3, [r7, #6]
    e242:	2240      	movs	r2, #64	; 0x40
    e244:	fa02 f303 	lsl.w	r3, r2, r3
    e248:	b2da      	uxtb	r2, r3
    e24a:	79fb      	ldrb	r3, [r7, #7]
    e24c:	4619      	mov	r1, r3
    e24e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e252:	4b04      	ldr	r3, [pc, #16]	; (e264 <_usbd_ep_set_in_rdy+0x54>)
    e254:	4798      	blx	r3
}
    e256:	bf00      	nop
    e258:	3708      	adds	r7, #8
    e25a:	46bd      	mov	sp, r7
    e25c:	bd80      	pop	{r7, pc}
    e25e:	bf00      	nop
    e260:	0000d81d 	.word	0x0000d81d
    e264:	0000d871 	.word	0x0000d871

0000e268 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    e268:	b580      	push	{r7, lr}
    e26a:	b082      	sub	sp, #8
    e26c:	af00      	add	r7, sp, #0
    e26e:	4603      	mov	r3, r0
    e270:	71fb      	strb	r3, [r7, #7]
    e272:	460b      	mov	r3, r1
    e274:	71bb      	strb	r3, [r7, #6]
    e276:	4613      	mov	r3, r2
    e278:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    e27a:	797b      	ldrb	r3, [r7, #5]
    e27c:	2b00      	cmp	r3, #0
    e27e:	d00b      	beq.n	e298 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e280:	79bb      	ldrb	r3, [r7, #6]
    e282:	2240      	movs	r2, #64	; 0x40
    e284:	fa02 f303 	lsl.w	r3, r2, r3
    e288:	b2da      	uxtb	r2, r3
    e28a:	79fb      	ldrb	r3, [r7, #7]
    e28c:	4619      	mov	r1, r3
    e28e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e292:	4b09      	ldr	r3, [pc, #36]	; (e2b8 <_usbd_ep_set_out_rdy+0x50>)
    e294:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    e296:	e00a      	b.n	e2ae <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e298:	79bb      	ldrb	r3, [r7, #6]
    e29a:	2240      	movs	r2, #64	; 0x40
    e29c:	fa02 f303 	lsl.w	r3, r2, r3
    e2a0:	b2da      	uxtb	r2, r3
    e2a2:	79fb      	ldrb	r3, [r7, #7]
    e2a4:	4619      	mov	r1, r3
    e2a6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e2aa:	4b04      	ldr	r3, [pc, #16]	; (e2bc <_usbd_ep_set_out_rdy+0x54>)
    e2ac:	4798      	blx	r3
}
    e2ae:	bf00      	nop
    e2b0:	3708      	adds	r7, #8
    e2b2:	46bd      	mov	sp, r7
    e2b4:	bd80      	pop	{r7, pc}
    e2b6:	bf00      	nop
    e2b8:	0000d871 	.word	0x0000d871
    e2bc:	0000d81d 	.word	0x0000d81d

0000e2c0 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    e2c0:	b480      	push	{r7}
    e2c2:	b083      	sub	sp, #12
    e2c4:	af00      	add	r7, sp, #0
    e2c6:	4603      	mov	r3, r0
    e2c8:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    e2ca:	88fb      	ldrh	r3, [r7, #6]
    e2cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e2d0:	d820      	bhi.n	e314 <_usbd_ep_pcksize_size+0x54>
    e2d2:	88fb      	ldrh	r3, [r7, #6]
    e2d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e2d8:	d81a      	bhi.n	e310 <_usbd_ep_pcksize_size+0x50>
    e2da:	88fb      	ldrh	r3, [r7, #6]
    e2dc:	2b80      	cmp	r3, #128	; 0x80
    e2de:	d815      	bhi.n	e30c <_usbd_ep_pcksize_size+0x4c>
    e2e0:	88fb      	ldrh	r3, [r7, #6]
    e2e2:	2b40      	cmp	r3, #64	; 0x40
    e2e4:	d810      	bhi.n	e308 <_usbd_ep_pcksize_size+0x48>
    e2e6:	88fb      	ldrh	r3, [r7, #6]
    e2e8:	2b20      	cmp	r3, #32
    e2ea:	d80b      	bhi.n	e304 <_usbd_ep_pcksize_size+0x44>
    e2ec:	88fb      	ldrh	r3, [r7, #6]
    e2ee:	2b10      	cmp	r3, #16
    e2f0:	d806      	bhi.n	e300 <_usbd_ep_pcksize_size+0x40>
    e2f2:	88fb      	ldrh	r3, [r7, #6]
    e2f4:	2b08      	cmp	r3, #8
    e2f6:	bf8c      	ite	hi
    e2f8:	2301      	movhi	r3, #1
    e2fa:	2300      	movls	r3, #0
    e2fc:	b2db      	uxtb	r3, r3
    e2fe:	e00a      	b.n	e316 <_usbd_ep_pcksize_size+0x56>
    e300:	2302      	movs	r3, #2
    e302:	e008      	b.n	e316 <_usbd_ep_pcksize_size+0x56>
    e304:	2303      	movs	r3, #3
    e306:	e006      	b.n	e316 <_usbd_ep_pcksize_size+0x56>
    e308:	2304      	movs	r3, #4
    e30a:	e004      	b.n	e316 <_usbd_ep_pcksize_size+0x56>
    e30c:	2305      	movs	r3, #5
    e30e:	e002      	b.n	e316 <_usbd_ep_pcksize_size+0x56>
    e310:	2306      	movs	r3, #6
    e312:	e000      	b.n	e316 <_usbd_ep_pcksize_size+0x56>
    e314:	2307      	movs	r3, #7
}
    e316:	4618      	mov	r0, r3
    e318:	370c      	adds	r7, #12
    e31a:	46bd      	mov	sp, r7
    e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e320:	4770      	bx	lr
	...

0000e324 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    e324:	b480      	push	{r7}
    e326:	b085      	sub	sp, #20
    e328:	af00      	add	r7, sp, #0
    e32a:	4603      	mov	r3, r0
    e32c:	460a      	mov	r2, r1
    e32e:	71fb      	strb	r3, [r7, #7]
    e330:	4613      	mov	r3, r2
    e332:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    e334:	79fb      	ldrb	r3, [r7, #7]
    e336:	2b00      	cmp	r3, #0
    e338:	d008      	beq.n	e34c <_usb_d_dev_ept+0x28>
    e33a:	79bb      	ldrb	r3, [r7, #6]
    e33c:	2b00      	cmp	r3, #0
    e33e:	d003      	beq.n	e348 <_usb_d_dev_ept+0x24>
    e340:	79fb      	ldrb	r3, [r7, #7]
    e342:	3304      	adds	r3, #4
    e344:	b2db      	uxtb	r3, r3
    e346:	e002      	b.n	e34e <_usb_d_dev_ept+0x2a>
    e348:	79fb      	ldrb	r3, [r7, #7]
    e34a:	e000      	b.n	e34e <_usb_d_dev_ept+0x2a>
    e34c:	2300      	movs	r3, #0
    e34e:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    e350:	7bfa      	ldrb	r2, [r7, #15]
    e352:	4613      	mov	r3, r2
    e354:	009b      	lsls	r3, r3, #2
    e356:	4413      	add	r3, r2
    e358:	009b      	lsls	r3, r3, #2
    e35a:	3310      	adds	r3, #16
    e35c:	4a04      	ldr	r2, [pc, #16]	; (e370 <_usb_d_dev_ept+0x4c>)
    e35e:	4413      	add	r3, r2
    e360:	3304      	adds	r3, #4
}
    e362:	4618      	mov	r0, r3
    e364:	3714      	adds	r7, #20
    e366:	46bd      	mov	sp, r7
    e368:	f85d 7b04 	ldr.w	r7, [sp], #4
    e36c:	4770      	bx	lr
    e36e:	bf00      	nop
    e370:	200089e0 	.word	0x200089e0

0000e374 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    e374:	b580      	push	{r7, lr}
    e376:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    e378:	2104      	movs	r1, #4
    e37a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e37e:	4b03      	ldr	r3, [pc, #12]	; (e38c <_usb_d_dev_sof+0x18>)
    e380:	4798      	blx	r3
	dev_inst.callbacks.sof();
    e382:	4b03      	ldr	r3, [pc, #12]	; (e390 <_usb_d_dev_sof+0x1c>)
    e384:	681b      	ldr	r3, [r3, #0]
    e386:	4798      	blx	r3
}
    e388:	bf00      	nop
    e38a:	bd80      	pop	{r7, pc}
    e38c:	0000d9eb 	.word	0x0000d9eb
    e390:	200089e0 	.word	0x200089e0

0000e394 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    e394:	b580      	push	{r7, lr}
    e396:	b084      	sub	sp, #16
    e398:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    e39a:	2300      	movs	r3, #0
    e39c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e39e:	f240 2101 	movw	r1, #513	; 0x201
    e3a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e3a6:	4b1a      	ldr	r3, [pc, #104]	; (e410 <_usb_d_dev_lpmsusp+0x7c>)
    e3a8:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e3aa:	f240 2101 	movw	r1, #513	; 0x201
    e3ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e3b2:	4b18      	ldr	r3, [pc, #96]	; (e414 <_usb_d_dev_lpmsusp+0x80>)
    e3b4:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e3b6:	2170      	movs	r1, #112	; 0x70
    e3b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e3bc:	4b16      	ldr	r3, [pc, #88]	; (e418 <_usb_d_dev_lpmsusp+0x84>)
    e3be:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    e3c0:	2300      	movs	r3, #0
    e3c2:	73fb      	strb	r3, [r7, #15]
    e3c4:	e018      	b.n	e3f8 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    e3c6:	7bfb      	ldrb	r3, [r7, #15]
    e3c8:	015b      	lsls	r3, r3, #5
    e3ca:	4a14      	ldr	r2, [pc, #80]	; (e41c <_usb_d_dev_lpmsusp+0x88>)
    e3cc:	4413      	add	r3, r2
    e3ce:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    e3d0:	687b      	ldr	r3, [r7, #4]
    e3d2:	891b      	ldrh	r3, [r3, #8]
    e3d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    e3d8:	b2db      	uxtb	r3, r3
    e3da:	2b03      	cmp	r3, #3
    e3dc:	d109      	bne.n	e3f2 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    e3de:	687b      	ldr	r3, [r7, #4]
    e3e0:	891b      	ldrh	r3, [r3, #8]
    e3e2:	f3c3 130a 	ubfx	r3, r3, #4, #11
    e3e6:	b29b      	uxth	r3, r3
    e3e8:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    e3ea:	687b      	ldr	r3, [r7, #4]
    e3ec:	2200      	movs	r2, #0
    e3ee:	811a      	strh	r2, [r3, #8]
			break;
    e3f0:	e005      	b.n	e3fe <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    e3f2:	7bfb      	ldrb	r3, [r7, #15]
    e3f4:	3301      	adds	r3, #1
    e3f6:	73fb      	strb	r3, [r7, #15]
    e3f8:	7bfb      	ldrb	r3, [r7, #15]
    e3fa:	2b03      	cmp	r3, #3
    e3fc:	d9e3      	bls.n	e3c6 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    e3fe:	4b08      	ldr	r3, [pc, #32]	; (e420 <_usb_d_dev_lpmsusp+0x8c>)
    e400:	685b      	ldr	r3, [r3, #4]
    e402:	68b9      	ldr	r1, [r7, #8]
    e404:	2003      	movs	r0, #3
    e406:	4798      	blx	r3
}
    e408:	bf00      	nop
    e40a:	3710      	adds	r7, #16
    e40c:	46bd      	mov	sp, r7
    e40e:	bd80      	pop	{r7, pc}
    e410:	0000d9eb 	.word	0x0000d9eb
    e414:	0000da41 	.word	0x0000da41
    e418:	0000da09 	.word	0x0000da09
    e41c:	20008aa8 	.word	0x20008aa8
    e420:	200089e0 	.word	0x200089e0

0000e424 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    e424:	b580      	push	{r7, lr}
    e426:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    e428:	2180      	movs	r1, #128	; 0x80
    e42a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e42e:	4b04      	ldr	r3, [pc, #16]	; (e440 <_usb_d_dev_ramerr+0x1c>)
    e430:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    e432:	4b04      	ldr	r3, [pc, #16]	; (e444 <_usb_d_dev_ramerr+0x20>)
    e434:	685b      	ldr	r3, [r3, #4]
    e436:	2100      	movs	r1, #0
    e438:	2005      	movs	r0, #5
    e43a:	4798      	blx	r3
}
    e43c:	bf00      	nop
    e43e:	bd80      	pop	{r7, pc}
    e440:	0000d9eb 	.word	0x0000d9eb
    e444:	200089e0 	.word	0x200089e0

0000e448 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    e448:	b580      	push	{r7, lr}
    e44a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e44c:	2170      	movs	r1, #112	; 0x70
    e44e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e452:	4b0b      	ldr	r3, [pc, #44]	; (e480 <_usb_d_dev_wakeup+0x38>)
    e454:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e456:	2170      	movs	r1, #112	; 0x70
    e458:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e45c:	4b09      	ldr	r3, [pc, #36]	; (e484 <_usb_d_dev_wakeup+0x3c>)
    e45e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e460:	f240 2101 	movw	r1, #513	; 0x201
    e464:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e468:	4b07      	ldr	r3, [pc, #28]	; (e488 <_usb_d_dev_wakeup+0x40>)
    e46a:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    e46c:	2000      	movs	r0, #0
    e46e:	4b07      	ldr	r3, [pc, #28]	; (e48c <_usb_d_dev_wakeup+0x44>)
    e470:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    e472:	4b07      	ldr	r3, [pc, #28]	; (e490 <_usb_d_dev_wakeup+0x48>)
    e474:	685b      	ldr	r3, [r3, #4]
    e476:	2100      	movs	r1, #0
    e478:	2002      	movs	r0, #2
    e47a:	4798      	blx	r3
}
    e47c:	bf00      	nop
    e47e:	bd80      	pop	{r7, pc}
    e480:	0000d9eb 	.word	0x0000d9eb
    e484:	0000da41 	.word	0x0000da41
    e488:	0000da09 	.word	0x0000da09
    e48c:	0000dce9 	.word	0x0000dce9
    e490:	200089e0 	.word	0x200089e0

0000e494 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    e494:	b580      	push	{r7, lr}
    e496:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    e498:	2200      	movs	r2, #0
    e49a:	2100      	movs	r1, #0
    e49c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e4a0:	4b0d      	ldr	r3, [pc, #52]	; (e4d8 <_usb_d_dev_reset+0x44>)
    e4a2:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    e4a4:	2108      	movs	r1, #8
    e4a6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e4aa:	4b0c      	ldr	r3, [pc, #48]	; (e4dc <_usb_d_dev_reset+0x48>)
    e4ac:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e4ae:	2170      	movs	r1, #112	; 0x70
    e4b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e4b4:	4b0a      	ldr	r3, [pc, #40]	; (e4e0 <_usb_d_dev_reset+0x4c>)
    e4b6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e4b8:	f240 2101 	movw	r1, #513	; 0x201
    e4bc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e4c0:	4b08      	ldr	r3, [pc, #32]	; (e4e4 <_usb_d_dev_reset+0x50>)
    e4c2:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    e4c4:	4b08      	ldr	r3, [pc, #32]	; (e4e8 <_usb_d_dev_reset+0x54>)
    e4c6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    e4c8:	4b08      	ldr	r3, [pc, #32]	; (e4ec <_usb_d_dev_reset+0x58>)
    e4ca:	685b      	ldr	r3, [r3, #4]
    e4cc:	2100      	movs	r1, #0
    e4ce:	2001      	movs	r0, #1
    e4d0:	4798      	blx	r3
}
    e4d2:	bf00      	nop
    e4d4:	bd80      	pop	{r7, pc}
    e4d6:	bf00      	nop
    e4d8:	0000d981 	.word	0x0000d981
    e4dc:	0000d9eb 	.word	0x0000d9eb
    e4e0:	0000da41 	.word	0x0000da41
    e4e4:	0000da09 	.word	0x0000da09
    e4e8:	0000f051 	.word	0x0000f051
    e4ec:	200089e0 	.word	0x200089e0

0000e4f0 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    e4f0:	b580      	push	{r7, lr}
    e4f2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e4f4:	f240 2101 	movw	r1, #513	; 0x201
    e4f8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e4fc:	4b09      	ldr	r3, [pc, #36]	; (e524 <_usb_d_dev_suspend+0x34>)
    e4fe:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e500:	f240 2101 	movw	r1, #513	; 0x201
    e504:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e508:	4b07      	ldr	r3, [pc, #28]	; (e528 <_usb_d_dev_suspend+0x38>)
    e50a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e50c:	2170      	movs	r1, #112	; 0x70
    e50e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e512:	4b06      	ldr	r3, [pc, #24]	; (e52c <_usb_d_dev_suspend+0x3c>)
    e514:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    e516:	4b06      	ldr	r3, [pc, #24]	; (e530 <_usb_d_dev_suspend+0x40>)
    e518:	685b      	ldr	r3, [r3, #4]
    e51a:	2100      	movs	r1, #0
    e51c:	2004      	movs	r0, #4
    e51e:	4798      	blx	r3
}
    e520:	bf00      	nop
    e522:	bd80      	pop	{r7, pc}
    e524:	0000d9eb 	.word	0x0000d9eb
    e528:	0000da41 	.word	0x0000da41
    e52c:	0000da09 	.word	0x0000da09
    e530:	200089e0 	.word	0x200089e0

0000e534 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    e534:	b580      	push	{r7, lr}
    e536:	b082      	sub	sp, #8
    e538:	af00      	add	r7, sp, #0
	bool     rc    = true;
    e53a:	2301      	movs	r3, #1
    e53c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    e53e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e542:	4b22      	ldr	r3, [pc, #136]	; (e5cc <_usb_d_dev_handle_nep+0x98>)
    e544:	4798      	blx	r3
    e546:	4603      	mov	r3, r0
    e548:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    e54a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e54e:	4b20      	ldr	r3, [pc, #128]	; (e5d0 <_usb_d_dev_handle_nep+0x9c>)
    e550:	4798      	blx	r3
    e552:	4603      	mov	r3, r0
    e554:	461a      	mov	r2, r3
    e556:	88bb      	ldrh	r3, [r7, #4]
    e558:	4013      	ands	r3, r2
    e55a:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    e55c:	88bb      	ldrh	r3, [r7, #4]
    e55e:	f003 0304 	and.w	r3, r3, #4
    e562:	2b00      	cmp	r3, #0
    e564:	d003      	beq.n	e56e <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    e566:	4b1b      	ldr	r3, [pc, #108]	; (e5d4 <_usb_d_dev_handle_nep+0xa0>)
    e568:	4798      	blx	r3
		return true;
    e56a:	2301      	movs	r3, #1
    e56c:	e02a      	b.n	e5c4 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    e56e:	88bb      	ldrh	r3, [r7, #4]
    e570:	f403 7300 	and.w	r3, r3, #512	; 0x200
    e574:	2b00      	cmp	r3, #0
    e576:	d002      	beq.n	e57e <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    e578:	4b17      	ldr	r3, [pc, #92]	; (e5d8 <_usb_d_dev_handle_nep+0xa4>)
    e57a:	4798      	blx	r3
    e57c:	e021      	b.n	e5c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    e57e:	88bb      	ldrh	r3, [r7, #4]
    e580:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e584:	2b00      	cmp	r3, #0
    e586:	d002      	beq.n	e58e <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    e588:	4b14      	ldr	r3, [pc, #80]	; (e5dc <_usb_d_dev_handle_nep+0xa8>)
    e58a:	4798      	blx	r3
    e58c:	e019      	b.n	e5c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    e58e:	88bb      	ldrh	r3, [r7, #4]
    e590:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e594:	2b00      	cmp	r3, #0
    e596:	d002      	beq.n	e59e <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    e598:	4b11      	ldr	r3, [pc, #68]	; (e5e0 <_usb_d_dev_handle_nep+0xac>)
    e59a:	4798      	blx	r3
    e59c:	e011      	b.n	e5c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    e59e:	88bb      	ldrh	r3, [r7, #4]
    e5a0:	f003 0308 	and.w	r3, r3, #8
    e5a4:	2b00      	cmp	r3, #0
    e5a6:	d002      	beq.n	e5ae <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    e5a8:	4b0e      	ldr	r3, [pc, #56]	; (e5e4 <_usb_d_dev_handle_nep+0xb0>)
    e5aa:	4798      	blx	r3
    e5ac:	e009      	b.n	e5c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    e5ae:	88bb      	ldrh	r3, [r7, #4]
    e5b0:	f003 0301 	and.w	r3, r3, #1
    e5b4:	2b00      	cmp	r3, #0
    e5b6:	d002      	beq.n	e5be <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    e5b8:	4b0b      	ldr	r3, [pc, #44]	; (e5e8 <_usb_d_dev_handle_nep+0xb4>)
    e5ba:	4798      	blx	r3
    e5bc:	e001      	b.n	e5c2 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    e5be:	2300      	movs	r3, #0
    e5c0:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    e5c2:	79fb      	ldrb	r3, [r7, #7]
}
    e5c4:	4618      	mov	r0, r3
    e5c6:	3708      	adds	r7, #8
    e5c8:	46bd      	mov	sp, r7
    e5ca:	bd80      	pop	{r7, pc}
    e5cc:	0000d9d1 	.word	0x0000d9d1
    e5d0:	0000da27 	.word	0x0000da27
    e5d4:	0000e375 	.word	0x0000e375
    e5d8:	0000e395 	.word	0x0000e395
    e5dc:	0000e425 	.word	0x0000e425
    e5e0:	0000e449 	.word	0x0000e449
    e5e4:	0000e495 	.word	0x0000e495
    e5e8:	0000e4f1 	.word	0x0000e4f1

0000e5ec <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    e5ec:	b590      	push	{r4, r7, lr}
    e5ee:	b089      	sub	sp, #36	; 0x24
    e5f0:	af00      	add	r7, sp, #0
    e5f2:	6078      	str	r0, [r7, #4]
    e5f4:	460b      	mov	r3, r1
    e5f6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    e5f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e5fc:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    e5fe:	687b      	ldr	r3, [r7, #4]
    e600:	7c9b      	ldrb	r3, [r3, #18]
    e602:	f003 030f 	and.w	r3, r3, #15
    e606:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    e608:	7dfb      	ldrb	r3, [r7, #23]
    e60a:	015b      	lsls	r3, r3, #5
    e60c:	4a73      	ldr	r2, [pc, #460]	; (e7dc <_usb_d_dev_in_next+0x1f0>)
    e60e:	4413      	add	r3, r2
    e610:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    e612:	78fb      	ldrb	r3, [r7, #3]
    e614:	2b00      	cmp	r3, #0
    e616:	d006      	beq.n	e626 <_usb_d_dev_in_next+0x3a>
    e618:	693b      	ldr	r3, [r7, #16]
    e61a:	3310      	adds	r3, #16
    e61c:	685b      	ldr	r3, [r3, #4]
    e61e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e622:	b29b      	uxth	r3, r3
    e624:	e000      	b.n	e628 <_usb_d_dev_in_next+0x3c>
    e626:	2300      	movs	r3, #0
    e628:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    e62a:	687b      	ldr	r3, [r7, #4]
    e62c:	8a1b      	ldrh	r3, [r3, #16]
    e62e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e632:	4293      	cmp	r3, r2
    e634:	d103      	bne.n	e63e <_usb_d_dev_in_next+0x52>
    e636:	687b      	ldr	r3, [r7, #4]
    e638:	8a1b      	ldrh	r3, [r3, #16]
    e63a:	b21b      	sxth	r3, r3
    e63c:	e004      	b.n	e648 <_usb_d_dev_in_next+0x5c>
    e63e:	687b      	ldr	r3, [r7, #4]
    e640:	8a1b      	ldrh	r3, [r3, #16]
    e642:	3b01      	subs	r3, #1
    e644:	b29b      	uxth	r3, r3
    e646:	b21b      	sxth	r3, r3
    e648:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    e64c:	4013      	ands	r3, r2
    e64e:	b21b      	sxth	r3, r3
    e650:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    e652:	2300      	movs	r3, #0
    e654:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    e656:	687b      	ldr	r3, [r7, #4]
    e658:	7cdb      	ldrb	r3, [r3, #19]
    e65a:	f003 0307 	and.w	r3, r3, #7
    e65e:	b2db      	uxtb	r3, r3
    e660:	2b01      	cmp	r3, #1
    e662:	bf0c      	ite	eq
    e664:	2301      	moveq	r3, #1
    e666:	2300      	movne	r3, #0
    e668:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    e66a:	78fb      	ldrb	r3, [r7, #3]
    e66c:	2b00      	cmp	r3, #0
    e66e:	d004      	beq.n	e67a <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    e670:	7dfb      	ldrb	r3, [r7, #23]
    e672:	2101      	movs	r1, #1
    e674:	4618      	mov	r0, r3
    e676:	4b5a      	ldr	r3, [pc, #360]	; (e7e0 <_usb_d_dev_in_next+0x1f4>)
    e678:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    e67a:	687b      	ldr	r3, [r7, #4]
    e67c:	689a      	ldr	r2, [r3, #8]
    e67e:	89fb      	ldrh	r3, [r7, #14]
    e680:	441a      	add	r2, r3
    e682:	687b      	ldr	r3, [r7, #4]
    e684:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    e686:	687b      	ldr	r3, [r7, #4]
    e688:	689a      	ldr	r2, [r3, #8]
    e68a:	687b      	ldr	r3, [r7, #4]
    e68c:	685b      	ldr	r3, [r3, #4]
    e68e:	429a      	cmp	r2, r3
    e690:	d243      	bcs.n	e71a <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    e692:	687b      	ldr	r3, [r7, #4]
    e694:	685b      	ldr	r3, [r3, #4]
    e696:	b29a      	uxth	r2, r3
    e698:	687b      	ldr	r3, [r7, #4]
    e69a:	689b      	ldr	r3, [r3, #8]
    e69c:	b29b      	uxth	r3, r3
    e69e:	1ad3      	subs	r3, r2, r3
    e6a0:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    e6a2:	687b      	ldr	r3, [r7, #4]
    e6a4:	7cdb      	ldrb	r3, [r3, #19]
    e6a6:	f003 0320 	and.w	r3, r3, #32
    e6aa:	b2db      	uxtb	r3, r3
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d01b      	beq.n	e6e8 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    e6b0:	687b      	ldr	r3, [r7, #4]
    e6b2:	8a1b      	ldrh	r3, [r3, #16]
    e6b4:	8bfa      	ldrh	r2, [r7, #30]
    e6b6:	429a      	cmp	r2, r3
    e6b8:	d902      	bls.n	e6c0 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    e6ba:	687b      	ldr	r3, [r7, #4]
    e6bc:	8a1b      	ldrh	r3, [r3, #16]
    e6be:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    e6c0:	687b      	ldr	r3, [r7, #4]
    e6c2:	68d8      	ldr	r0, [r3, #12]
    e6c4:	687b      	ldr	r3, [r7, #4]
    e6c6:	681a      	ldr	r2, [r3, #0]
    e6c8:	687b      	ldr	r3, [r7, #4]
    e6ca:	689b      	ldr	r3, [r3, #8]
    e6cc:	4413      	add	r3, r2
    e6ce:	8bfa      	ldrh	r2, [r7, #30]
    e6d0:	4619      	mov	r1, r3
    e6d2:	4b44      	ldr	r3, [pc, #272]	; (e7e4 <_usb_d_dev_in_next+0x1f8>)
    e6d4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    e6d6:	687b      	ldr	r3, [r7, #4]
    e6d8:	68db      	ldr	r3, [r3, #12]
    e6da:	461a      	mov	r2, r3
    e6dc:	7dfb      	ldrb	r3, [r7, #23]
    e6de:	2101      	movs	r1, #1
    e6e0:	4618      	mov	r0, r3
    e6e2:	4b41      	ldr	r3, [pc, #260]	; (e7e8 <_usb_d_dev_in_next+0x1fc>)
    e6e4:	4798      	blx	r3
    e6e6:	e011      	b.n	e70c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    e6e8:	8bfb      	ldrh	r3, [r7, #30]
    e6ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e6ee:	d902      	bls.n	e6f6 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    e6f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e6f4:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    e6f6:	687b      	ldr	r3, [r7, #4]
    e6f8:	681a      	ldr	r2, [r3, #0]
    e6fa:	687b      	ldr	r3, [r7, #4]
    e6fc:	689b      	ldr	r3, [r3, #8]
    e6fe:	4413      	add	r3, r2
    e700:	461a      	mov	r2, r3
    e702:	7dfb      	ldrb	r3, [r7, #23]
    e704:	2101      	movs	r1, #1
    e706:	4618      	mov	r0, r3
    e708:	4b37      	ldr	r3, [pc, #220]	; (e7e8 <_usb_d_dev_in_next+0x1fc>)
    e70a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    e70c:	8bfa      	ldrh	r2, [r7, #30]
    e70e:	7df8      	ldrb	r0, [r7, #23]
    e710:	2300      	movs	r3, #0
    e712:	2101      	movs	r1, #1
    e714:	4c35      	ldr	r4, [pc, #212]	; (e7ec <_usb_d_dev_in_next+0x200>)
    e716:	47a0      	blx	r4
		goto _in_tx_exec;
    e718:	e041      	b.n	e79e <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    e71a:	687b      	ldr	r3, [r7, #4]
    e71c:	7cdb      	ldrb	r3, [r3, #19]
    e71e:	f003 0310 	and.w	r3, r3, #16
    e722:	b2db      	uxtb	r3, r3
    e724:	2b00      	cmp	r3, #0
    e726:	d00b      	beq.n	e740 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    e728:	687a      	ldr	r2, [r7, #4]
    e72a:	7cd3      	ldrb	r3, [r2, #19]
    e72c:	f36f 1304 	bfc	r3, #4, #1
    e730:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    e732:	7df8      	ldrb	r0, [r7, #23]
    e734:	2300      	movs	r3, #0
    e736:	2200      	movs	r2, #0
    e738:	2101      	movs	r1, #1
    e73a:	4c2c      	ldr	r4, [pc, #176]	; (e7ec <_usb_d_dev_in_next+0x200>)
    e73c:	47a0      	blx	r4
		goto _in_tx_exec;
    e73e:	e02e      	b.n	e79e <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    e740:	7afb      	ldrb	r3, [r7, #11]
    e742:	2b00      	cmp	r3, #0
    e744:	d006      	beq.n	e754 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    e746:	7dfb      	ldrb	r3, [r7, #23]
    e748:	224b      	movs	r2, #75	; 0x4b
    e74a:	4619      	mov	r1, r3
    e74c:	69b8      	ldr	r0, [r7, #24]
    e74e:	4b28      	ldr	r3, [pc, #160]	; (e7f0 <_usb_d_dev_in_next+0x204>)
    e750:	4798      	blx	r3
    e752:	e005      	b.n	e760 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    e754:	7dfb      	ldrb	r3, [r7, #23]
    e756:	224a      	movs	r2, #74	; 0x4a
    e758:	4619      	mov	r1, r3
    e75a:	69b8      	ldr	r0, [r7, #24]
    e75c:	4b24      	ldr	r3, [pc, #144]	; (e7f0 <_usb_d_dev_in_next+0x204>)
    e75e:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    e760:	687b      	ldr	r3, [r7, #4]
    e762:	8a1b      	ldrh	r3, [r3, #16]
    e764:	89ba      	ldrh	r2, [r7, #12]
    e766:	429a      	cmp	r2, r3
    e768:	d114      	bne.n	e794 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    e76a:	687a      	ldr	r2, [r7, #4]
    e76c:	7cd3      	ldrb	r3, [r2, #19]
    e76e:	f36f 1386 	bfc	r3, #6, #1
    e772:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    e774:	4b1f      	ldr	r3, [pc, #124]	; (e7f4 <_usb_d_dev_in_next+0x208>)
    e776:	68db      	ldr	r3, [r3, #12]
    e778:	687a      	ldr	r2, [r7, #4]
    e77a:	7c90      	ldrb	r0, [r2, #18]
    e77c:	687a      	ldr	r2, [r7, #4]
    e77e:	6892      	ldr	r2, [r2, #8]
    e780:	4611      	mov	r1, r2
    e782:	4798      	blx	r3
    e784:	4603      	mov	r3, r0
    e786:	2b00      	cmp	r3, #0
    e788:	d124      	bne.n	e7d4 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    e78a:	687a      	ldr	r2, [r7, #4]
    e78c:	7cd3      	ldrb	r3, [r2, #19]
    e78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e792:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    e794:	2100      	movs	r1, #0
    e796:	6878      	ldr	r0, [r7, #4]
    e798:	4b17      	ldr	r3, [pc, #92]	; (e7f8 <_usb_d_dev_in_next+0x20c>)
    e79a:	4798      	blx	r3
	return;
    e79c:	e01b      	b.n	e7d6 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    e79e:	78fb      	ldrb	r3, [r7, #3]
    e7a0:	f083 0301 	eor.w	r3, r3, #1
    e7a4:	b2db      	uxtb	r3, r3
    e7a6:	2b00      	cmp	r3, #0
    e7a8:	d00d      	beq.n	e7c6 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    e7aa:	7afb      	ldrb	r3, [r7, #11]
    e7ac:	2b00      	cmp	r3, #0
    e7ae:	d002      	beq.n	e7b6 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    e7b0:	234e      	movs	r3, #78	; 0x4e
    e7b2:	777b      	strb	r3, [r7, #29]
    e7b4:	e001      	b.n	e7ba <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    e7b6:	234a      	movs	r3, #74	; 0x4a
    e7b8:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    e7ba:	7f7a      	ldrb	r2, [r7, #29]
    e7bc:	7dfb      	ldrb	r3, [r7, #23]
    e7be:	4619      	mov	r1, r3
    e7c0:	69b8      	ldr	r0, [r7, #24]
    e7c2:	4b0e      	ldr	r3, [pc, #56]	; (e7fc <_usb_d_dev_in_next+0x210>)
    e7c4:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    e7c6:	7dfb      	ldrb	r3, [r7, #23]
    e7c8:	2201      	movs	r2, #1
    e7ca:	2101      	movs	r1, #1
    e7cc:	4618      	mov	r0, r3
    e7ce:	4b0c      	ldr	r3, [pc, #48]	; (e800 <_usb_d_dev_in_next+0x214>)
    e7d0:	4798      	blx	r3
    e7d2:	e000      	b.n	e7d6 <_usb_d_dev_in_next+0x1ea>
			return;
    e7d4:	bf00      	nop
}
    e7d6:	3724      	adds	r7, #36	; 0x24
    e7d8:	46bd      	mov	sp, r7
    e7da:	bd90      	pop	{r4, r7, pc}
    e7dc:	20008aa8 	.word	0x20008aa8
    e7e0:	0000dfe5 	.word	0x0000dfe5
    e7e4:	0001af55 	.word	0x0001af55
    e7e8:	0000e011 	.word	0x0000e011
    e7ec:	0000e159 	.word	0x0000e159
    e7f0:	0000d8f1 	.word	0x0000d8f1
    e7f4:	200089e0 	.word	0x200089e0
    e7f8:	0000f915 	.word	0x0000f915
    e7fc:	0000d8c5 	.word	0x0000d8c5
    e800:	0000e211 	.word	0x0000e211

0000e804 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    e804:	b590      	push	{r4, r7, lr}
    e806:	b08b      	sub	sp, #44	; 0x2c
    e808:	af00      	add	r7, sp, #0
    e80a:	6078      	str	r0, [r7, #4]
    e80c:	460b      	mov	r3, r1
    e80e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    e810:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e814:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    e816:	687b      	ldr	r3, [r7, #4]
    e818:	7c9b      	ldrb	r3, [r3, #18]
    e81a:	f003 030f 	and.w	r3, r3, #15
    e81e:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    e820:	7ffb      	ldrb	r3, [r7, #31]
    e822:	015b      	lsls	r3, r3, #5
    e824:	4a94      	ldr	r2, [pc, #592]	; (ea78 <_usb_d_dev_out_next+0x274>)
    e826:	4413      	add	r3, r2
    e828:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    e82a:	78fb      	ldrb	r3, [r7, #3]
    e82c:	2b00      	cmp	r3, #0
    e82e:	d005      	beq.n	e83c <_usb_d_dev_out_next+0x38>
    e830:	69bb      	ldr	r3, [r7, #24]
    e832:	685b      	ldr	r3, [r3, #4]
    e834:	f3c3 338d 	ubfx	r3, r3, #14, #14
    e838:	b29b      	uxth	r3, r3
    e83a:	e000      	b.n	e83e <_usb_d_dev_out_next+0x3a>
    e83c:	2300      	movs	r3, #0
    e83e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    e840:	78fb      	ldrb	r3, [r7, #3]
    e842:	2b00      	cmp	r3, #0
    e844:	d005      	beq.n	e852 <_usb_d_dev_out_next+0x4e>
    e846:	69bb      	ldr	r3, [r7, #24]
    e848:	685b      	ldr	r3, [r3, #4]
    e84a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e84e:	b29b      	uxth	r3, r3
    e850:	e000      	b.n	e854 <_usb_d_dev_out_next+0x50>
    e852:	2300      	movs	r3, #0
    e854:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    e856:	687b      	ldr	r3, [r7, #4]
    e858:	8a1b      	ldrh	r3, [r3, #16]
    e85a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e85e:	4293      	cmp	r3, r2
    e860:	d004      	beq.n	e86c <_usb_d_dev_out_next+0x68>
    e862:	687b      	ldr	r3, [r7, #4]
    e864:	8a1b      	ldrh	r3, [r3, #16]
    e866:	3b01      	subs	r3, #1
    e868:	b29b      	uxth	r3, r3
    e86a:	e001      	b.n	e870 <_usb_d_dev_out_next+0x6c>
    e86c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    e870:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    e872:	8aba      	ldrh	r2, [r7, #20]
    e874:	8a7b      	ldrh	r3, [r7, #18]
    e876:	4013      	ands	r3, r2
    e878:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    e87a:	687b      	ldr	r3, [r7, #4]
    e87c:	7cdb      	ldrb	r3, [r3, #19]
    e87e:	f003 0307 	and.w	r3, r3, #7
    e882:	b2db      	uxtb	r3, r3
    e884:	2b01      	cmp	r3, #1
    e886:	bf0c      	ite	eq
    e888:	2301      	moveq	r3, #1
    e88a:	2300      	movne	r3, #0
    e88c:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    e88e:	78fb      	ldrb	r3, [r7, #3]
    e890:	2b00      	cmp	r3, #0
    e892:	d004      	beq.n	e89e <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    e894:	7ffb      	ldrb	r3, [r7, #31]
    e896:	2100      	movs	r1, #0
    e898:	4618      	mov	r0, r3
    e89a:	4b78      	ldr	r3, [pc, #480]	; (ea7c <_usb_d_dev_out_next+0x278>)
    e89c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    e89e:	687b      	ldr	r3, [r7, #4]
    e8a0:	7cdb      	ldrb	r3, [r3, #19]
    e8a2:	f003 0320 	and.w	r3, r3, #32
    e8a6:	b2db      	uxtb	r3, r3
    e8a8:	2b00      	cmp	r3, #0
    e8aa:	d01c      	beq.n	e8e6 <_usb_d_dev_out_next+0xe2>
    e8ac:	687b      	ldr	r3, [r7, #4]
    e8ae:	685b      	ldr	r3, [r3, #4]
    e8b0:	2b00      	cmp	r3, #0
    e8b2:	d018      	beq.n	e8e6 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    e8b4:	687b      	ldr	r3, [r7, #4]
    e8b6:	685b      	ldr	r3, [r3, #4]
    e8b8:	b29a      	uxth	r2, r3
    e8ba:	687b      	ldr	r3, [r7, #4]
    e8bc:	689b      	ldr	r3, [r3, #8]
    e8be:	b29b      	uxth	r3, r3
    e8c0:	1ad3      	subs	r3, r2, r3
    e8c2:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    e8c4:	687b      	ldr	r3, [r7, #4]
    e8c6:	681a      	ldr	r2, [r3, #0]
    e8c8:	687b      	ldr	r3, [r7, #4]
    e8ca:	689b      	ldr	r3, [r3, #8]
    e8cc:	18d0      	adds	r0, r2, r3
    e8ce:	687b      	ldr	r3, [r7, #4]
    e8d0:	68d9      	ldr	r1, [r3, #12]
    e8d2:	89ba      	ldrh	r2, [r7, #12]
    e8d4:	8a3b      	ldrh	r3, [r7, #16]
    e8d6:	429a      	cmp	r2, r3
    e8d8:	d901      	bls.n	e8de <_usb_d_dev_out_next+0xda>
    e8da:	8a3b      	ldrh	r3, [r7, #16]
    e8dc:	e000      	b.n	e8e0 <_usb_d_dev_out_next+0xdc>
    e8de:	89bb      	ldrh	r3, [r7, #12]
    e8e0:	461a      	mov	r2, r3
    e8e2:	4b67      	ldr	r3, [pc, #412]	; (ea80 <_usb_d_dev_out_next+0x27c>)
    e8e4:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    e8e6:	687b      	ldr	r3, [r7, #4]
    e8e8:	685b      	ldr	r3, [r3, #4]
    e8ea:	2b00      	cmp	r3, #0
    e8ec:	d121      	bne.n	e932 <_usb_d_dev_out_next+0x12e>
    e8ee:	687b      	ldr	r3, [r7, #4]
    e8f0:	7cdb      	ldrb	r3, [r3, #19]
    e8f2:	f003 0310 	and.w	r3, r3, #16
    e8f6:	b2db      	uxtb	r3, r3
    e8f8:	2b00      	cmp	r3, #0
    e8fa:	d01a      	beq.n	e932 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    e8fc:	687a      	ldr	r2, [r7, #4]
    e8fe:	7cd3      	ldrb	r3, [r2, #19]
    e900:	f36f 1304 	bfc	r3, #4, #1
    e904:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    e906:	687a      	ldr	r2, [r7, #4]
    e908:	7cd3      	ldrb	r3, [r2, #19]
    e90a:	f043 0320 	orr.w	r3, r3, #32
    e90e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    e910:	687b      	ldr	r3, [r7, #4]
    e912:	68db      	ldr	r3, [r3, #12]
    e914:	461a      	mov	r2, r3
    e916:	7ffb      	ldrb	r3, [r7, #31]
    e918:	2100      	movs	r1, #0
    e91a:	4618      	mov	r0, r3
    e91c:	4b59      	ldr	r3, [pc, #356]	; (ea84 <_usb_d_dev_out_next+0x280>)
    e91e:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    e920:	687b      	ldr	r3, [r7, #4]
    e922:	8a1b      	ldrh	r3, [r3, #16]
    e924:	461a      	mov	r2, r3
    e926:	7ff8      	ldrb	r0, [r7, #31]
    e928:	2300      	movs	r3, #0
    e92a:	2100      	movs	r1, #0
    e92c:	4c56      	ldr	r4, [pc, #344]	; (ea88 <_usb_d_dev_out_next+0x284>)
    e92e:	47a0      	blx	r4
		goto _out_rx_exec;
    e930:	e090      	b.n	ea54 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    e932:	78fb      	ldrb	r3, [r7, #3]
    e934:	2b00      	cmp	r3, #0
    e936:	d010      	beq.n	e95a <_usb_d_dev_out_next+0x156>
    e938:	687b      	ldr	r3, [r7, #4]
    e93a:	8a1b      	ldrh	r3, [r3, #16]
    e93c:	8a3a      	ldrh	r2, [r7, #16]
    e93e:	429a      	cmp	r2, r3
    e940:	d20b      	bcs.n	e95a <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    e942:	687a      	ldr	r2, [r7, #4]
    e944:	7cd3      	ldrb	r3, [r2, #19]
    e946:	f36f 1304 	bfc	r3, #4, #1
    e94a:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    e94c:	687b      	ldr	r3, [r7, #4]
    e94e:	689a      	ldr	r2, [r3, #8]
    e950:	8abb      	ldrh	r3, [r7, #20]
    e952:	441a      	add	r2, r3
    e954:	687b      	ldr	r3, [r7, #4]
    e956:	609a      	str	r2, [r3, #8]
    e958:	e05c      	b.n	ea14 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    e95a:	687b      	ldr	r3, [r7, #4]
    e95c:	689a      	ldr	r2, [r3, #8]
    e95e:	8afb      	ldrh	r3, [r7, #22]
    e960:	441a      	add	r2, r3
    e962:	687b      	ldr	r3, [r7, #4]
    e964:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    e966:	687b      	ldr	r3, [r7, #4]
    e968:	689a      	ldr	r2, [r3, #8]
    e96a:	687b      	ldr	r3, [r7, #4]
    e96c:	685b      	ldr	r3, [r3, #4]
    e96e:	429a      	cmp	r2, r3
    e970:	d250      	bcs.n	ea14 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    e972:	687b      	ldr	r3, [r7, #4]
    e974:	685b      	ldr	r3, [r3, #4]
    e976:	b29a      	uxth	r2, r3
    e978:	687b      	ldr	r3, [r7, #4]
    e97a:	689b      	ldr	r3, [r3, #8]
    e97c:	b29b      	uxth	r3, r3
    e97e:	1ad3      	subs	r3, r2, r3
    e980:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    e982:	687b      	ldr	r3, [r7, #4]
    e984:	7cdb      	ldrb	r3, [r3, #19]
    e986:	f003 0320 	and.w	r3, r3, #32
    e98a:	b2db      	uxtb	r3, r3
    e98c:	2b00      	cmp	r3, #0
    e98e:	d010      	beq.n	e9b2 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    e990:	687b      	ldr	r3, [r7, #4]
    e992:	8a1b      	ldrh	r3, [r3, #16]
    e994:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e996:	429a      	cmp	r2, r3
    e998:	d902      	bls.n	e9a0 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    e99a:	687b      	ldr	r3, [r7, #4]
    e99c:	8a1b      	ldrh	r3, [r3, #16]
    e99e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    e9a0:	687b      	ldr	r3, [r7, #4]
    e9a2:	68db      	ldr	r3, [r3, #12]
    e9a4:	461a      	mov	r2, r3
    e9a6:	7ffb      	ldrb	r3, [r7, #31]
    e9a8:	2100      	movs	r1, #0
    e9aa:	4618      	mov	r0, r3
    e9ac:	4b35      	ldr	r3, [pc, #212]	; (ea84 <_usb_d_dev_out_next+0x280>)
    e9ae:	4798      	blx	r3
    e9b0:	e029      	b.n	ea06 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    e9b2:	687b      	ldr	r3, [r7, #4]
    e9b4:	8a1b      	ldrh	r3, [r3, #16]
    e9b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e9b8:	429a      	cmp	r2, r3
    e9ba:	d90f      	bls.n	e9dc <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    e9bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    e9be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e9c2:	d903      	bls.n	e9cc <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    e9c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e9c8:	84fb      	strh	r3, [r7, #38]	; 0x26
    e9ca:	e011      	b.n	e9f0 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    e9cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e9ce:	8a7b      	ldrh	r3, [r7, #18]
    e9d0:	4013      	ands	r3, r2
    e9d2:	b29b      	uxth	r3, r3
    e9d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e9d6:	1ad3      	subs	r3, r2, r3
    e9d8:	84fb      	strh	r3, [r7, #38]	; 0x26
    e9da:	e009      	b.n	e9f0 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    e9dc:	687b      	ldr	r3, [r7, #4]
    e9de:	8a1b      	ldrh	r3, [r3, #16]
    e9e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e9e2:	429a      	cmp	r2, r3
    e9e4:	d204      	bcs.n	e9f0 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    e9e6:	687a      	ldr	r2, [r7, #4]
    e9e8:	7cd3      	ldrb	r3, [r2, #19]
    e9ea:	f043 0320 	orr.w	r3, r3, #32
    e9ee:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    e9f0:	687b      	ldr	r3, [r7, #4]
    e9f2:	681a      	ldr	r2, [r3, #0]
    e9f4:	687b      	ldr	r3, [r7, #4]
    e9f6:	689b      	ldr	r3, [r3, #8]
    e9f8:	4413      	add	r3, r2
    e9fa:	461a      	mov	r2, r3
    e9fc:	7ffb      	ldrb	r3, [r7, #31]
    e9fe:	2100      	movs	r1, #0
    ea00:	4618      	mov	r0, r3
    ea02:	4b20      	ldr	r3, [pc, #128]	; (ea84 <_usb_d_dev_out_next+0x280>)
    ea04:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    ea06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ea08:	7ff8      	ldrb	r0, [r7, #31]
    ea0a:	2300      	movs	r3, #0
    ea0c:	2100      	movs	r1, #0
    ea0e:	4c1e      	ldr	r4, [pc, #120]	; (ea88 <_usb_d_dev_out_next+0x284>)
    ea10:	47a0      	blx	r4
			goto _out_rx_exec;
    ea12:	e01f      	b.n	ea54 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    ea14:	7bfb      	ldrb	r3, [r7, #15]
    ea16:	2b00      	cmp	r3, #0
    ea18:	d006      	beq.n	ea28 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    ea1a:	7ffb      	ldrb	r3, [r7, #31]
    ea1c:	222d      	movs	r2, #45	; 0x2d
    ea1e:	4619      	mov	r1, r3
    ea20:	6a38      	ldr	r0, [r7, #32]
    ea22:	4b1a      	ldr	r3, [pc, #104]	; (ea8c <_usb_d_dev_out_next+0x288>)
    ea24:	4798      	blx	r3
    ea26:	e005      	b.n	ea34 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    ea28:	7ffb      	ldrb	r3, [r7, #31]
    ea2a:	2225      	movs	r2, #37	; 0x25
    ea2c:	4619      	mov	r1, r3
    ea2e:	6a38      	ldr	r0, [r7, #32]
    ea30:	4b16      	ldr	r3, [pc, #88]	; (ea8c <_usb_d_dev_out_next+0x288>)
    ea32:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    ea34:	7ffb      	ldrb	r3, [r7, #31]
    ea36:	2b00      	cmp	r3, #0
    ea38:	d107      	bne.n	ea4a <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ea3a:	687b      	ldr	r3, [r7, #4]
    ea3c:	68db      	ldr	r3, [r3, #12]
    ea3e:	461a      	mov	r2, r3
    ea40:	7ffb      	ldrb	r3, [r7, #31]
    ea42:	2100      	movs	r1, #0
    ea44:	4618      	mov	r0, r3
    ea46:	4b0f      	ldr	r3, [pc, #60]	; (ea84 <_usb_d_dev_out_next+0x280>)
    ea48:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    ea4a:	2100      	movs	r1, #0
    ea4c:	6878      	ldr	r0, [r7, #4]
    ea4e:	4b10      	ldr	r3, [pc, #64]	; (ea90 <_usb_d_dev_out_next+0x28c>)
    ea50:	4798      	blx	r3
	return;
    ea52:	e031      	b.n	eab8 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    ea54:	78fb      	ldrb	r3, [r7, #3]
    ea56:	f083 0301 	eor.w	r3, r3, #1
    ea5a:	b2db      	uxtb	r3, r3
    ea5c:	2b00      	cmp	r3, #0
    ea5e:	d025      	beq.n	eaac <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    ea60:	7bfb      	ldrb	r3, [r7, #15]
    ea62:	2b00      	cmp	r3, #0
    ea64:	d018      	beq.n	ea98 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    ea66:	7ffb      	ldrb	r3, [r7, #31]
    ea68:	2101      	movs	r1, #1
    ea6a:	4618      	mov	r0, r3
    ea6c:	4b09      	ldr	r3, [pc, #36]	; (ea94 <_usb_d_dev_out_next+0x290>)
    ea6e:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    ea70:	232d      	movs	r3, #45	; 0x2d
    ea72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ea76:	e012      	b.n	ea9e <_usb_d_dev_out_next+0x29a>
    ea78:	20008aa8 	.word	0x20008aa8
    ea7c:	0000dfe5 	.word	0x0000dfe5
    ea80:	0001af55 	.word	0x0001af55
    ea84:	0000e011 	.word	0x0000e011
    ea88:	0000e199 	.word	0x0000e199
    ea8c:	0000d8f1 	.word	0x0000d8f1
    ea90:	0000f915 	.word	0x0000f915
    ea94:	0000e1d9 	.word	0x0000e1d9
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    ea98:	2325      	movs	r3, #37	; 0x25
    ea9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    ea9e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    eaa2:	7ffb      	ldrb	r3, [r7, #31]
    eaa4:	4619      	mov	r1, r3
    eaa6:	6a38      	ldr	r0, [r7, #32]
    eaa8:	4b05      	ldr	r3, [pc, #20]	; (eac0 <_usb_d_dev_out_next+0x2bc>)
    eaaa:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    eaac:	7ffb      	ldrb	r3, [r7, #31]
    eaae:	2201      	movs	r2, #1
    eab0:	2100      	movs	r1, #0
    eab2:	4618      	mov	r0, r3
    eab4:	4b03      	ldr	r3, [pc, #12]	; (eac4 <_usb_d_dev_out_next+0x2c0>)
    eab6:	4798      	blx	r3
}
    eab8:	372c      	adds	r7, #44	; 0x2c
    eaba:	46bd      	mov	sp, r7
    eabc:	bd90      	pop	{r4, r7, pc}
    eabe:	bf00      	nop
    eac0:	0000d8c5 	.word	0x0000d8c5
    eac4:	0000e269 	.word	0x0000e269

0000eac8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    eac8:	b580      	push	{r7, lr}
    eaca:	b084      	sub	sp, #16
    eacc:	af00      	add	r7, sp, #0
    eace:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    ead0:	687b      	ldr	r3, [r7, #4]
    ead2:	7c9b      	ldrb	r3, [r3, #18]
    ead4:	f003 030f 	and.w	r3, r3, #15
    ead8:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    eada:	687b      	ldr	r3, [r7, #4]
    eadc:	7cdb      	ldrb	r3, [r3, #19]
    eade:	f003 0307 	and.w	r3, r3, #7
    eae2:	b2db      	uxtb	r3, r3
    eae4:	2b01      	cmp	r3, #1
    eae6:	bf0c      	ite	eq
    eae8:	2301      	moveq	r3, #1
    eaea:	2300      	movne	r3, #0
    eaec:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    eaee:	7bbb      	ldrb	r3, [r7, #14]
    eaf0:	f083 0301 	eor.w	r3, r3, #1
    eaf4:	b2db      	uxtb	r3, r3
    eaf6:	2b00      	cmp	r3, #0
    eaf8:	d008      	beq.n	eb0c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    eafa:	7bfb      	ldrb	r3, [r7, #15]
    eafc:	4618      	mov	r0, r3
    eafe:	4b20      	ldr	r3, [pc, #128]	; (eb80 <_usb_d_dev_handle_setup+0xb8>)
    eb00:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    eb02:	7bfb      	ldrb	r3, [r7, #15]
    eb04:	4618      	mov	r0, r3
    eb06:	4b1f      	ldr	r3, [pc, #124]	; (eb84 <_usb_d_dev_handle_setup+0xbc>)
    eb08:	4798      	blx	r3
		return;
    eb0a:	e036      	b.n	eb7a <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    eb0c:	687b      	ldr	r3, [r7, #4]
    eb0e:	7cdb      	ldrb	r3, [r3, #19]
    eb10:	f003 0340 	and.w	r3, r3, #64	; 0x40
    eb14:	b2db      	uxtb	r3, r3
    eb16:	2b00      	cmp	r3, #0
    eb18:	d010      	beq.n	eb3c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    eb1a:	687a      	ldr	r2, [r7, #4]
    eb1c:	7cd3      	ldrb	r3, [r2, #19]
    eb1e:	f36f 1386 	bfc	r3, #6, #1
    eb22:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    eb24:	7bfb      	ldrb	r3, [r7, #15]
    eb26:	2200      	movs	r2, #0
    eb28:	2101      	movs	r1, #1
    eb2a:	4618      	mov	r0, r3
    eb2c:	4b16      	ldr	r3, [pc, #88]	; (eb88 <_usb_d_dev_handle_setup+0xc0>)
    eb2e:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    eb30:	7bfb      	ldrb	r3, [r7, #15]
    eb32:	2200      	movs	r2, #0
    eb34:	2100      	movs	r1, #0
    eb36:	4618      	mov	r0, r3
    eb38:	4b14      	ldr	r3, [pc, #80]	; (eb8c <_usb_d_dev_handle_setup+0xc4>)
    eb3a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    eb3c:	687a      	ldr	r2, [r7, #4]
    eb3e:	7cd3      	ldrb	r3, [r2, #19]
    eb40:	f36f 03c3 	bfc	r3, #3, #1
    eb44:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    eb46:	7bfb      	ldrb	r3, [r7, #15]
    eb48:	2100      	movs	r1, #0
    eb4a:	4618      	mov	r0, r3
    eb4c:	4b10      	ldr	r3, [pc, #64]	; (eb90 <_usb_d_dev_handle_setup+0xc8>)
    eb4e:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    eb50:	7bfb      	ldrb	r3, [r7, #15]
    eb52:	2101      	movs	r1, #1
    eb54:	4618      	mov	r0, r3
    eb56:	4b0e      	ldr	r3, [pc, #56]	; (eb90 <_usb_d_dev_handle_setup+0xc8>)
    eb58:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    eb5a:	7bfb      	ldrb	r3, [r7, #15]
    eb5c:	216f      	movs	r1, #111	; 0x6f
    eb5e:	4618      	mov	r0, r3
    eb60:	4b0c      	ldr	r3, [pc, #48]	; (eb94 <_usb_d_dev_handle_setup+0xcc>)
    eb62:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    eb64:	7bfb      	ldrb	r3, [r7, #15]
    eb66:	216f      	movs	r1, #111	; 0x6f
    eb68:	4618      	mov	r0, r3
    eb6a:	4b0b      	ldr	r3, [pc, #44]	; (eb98 <_usb_d_dev_handle_setup+0xd0>)
    eb6c:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    eb6e:	4b0b      	ldr	r3, [pc, #44]	; (eb9c <_usb_d_dev_handle_setup+0xd4>)
    eb70:	689b      	ldr	r3, [r3, #8]
    eb72:	687a      	ldr	r2, [r7, #4]
    eb74:	7c92      	ldrb	r2, [r2, #18]
    eb76:	4610      	mov	r0, r2
    eb78:	4798      	blx	r3
}
    eb7a:	3710      	adds	r7, #16
    eb7c:	46bd      	mov	sp, r7
    eb7e:	bd80      	pop	{r7, pc}
    eb80:	0000df6d 	.word	0x0000df6d
    eb84:	0000df19 	.word	0x0000df19
    eb88:	0000e211 	.word	0x0000e211
    eb8c:	0000e269 	.word	0x0000e269
    eb90:	0000e1d9 	.word	0x0000e1d9
    eb94:	0000dd19 	.word	0x0000dd19
    eb98:	0000dd69 	.word	0x0000dd69
    eb9c:	200089e0 	.word	0x200089e0

0000eba0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    eba0:	b580      	push	{r7, lr}
    eba2:	b084      	sub	sp, #16
    eba4:	af00      	add	r7, sp, #0
    eba6:	6078      	str	r0, [r7, #4]
    eba8:	460b      	mov	r3, r1
    ebaa:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ebac:	687b      	ldr	r3, [r7, #4]
    ebae:	7c9b      	ldrb	r3, [r3, #18]
    ebb0:	f003 030f 	and.w	r3, r3, #15
    ebb4:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    ebb6:	78f9      	ldrb	r1, [r7, #3]
    ebb8:	7bfb      	ldrb	r3, [r7, #15]
    ebba:	2200      	movs	r2, #0
    ebbc:	4618      	mov	r0, r3
    ebbe:	4b07      	ldr	r3, [pc, #28]	; (ebdc <_usb_d_dev_handle_stall+0x3c>)
    ebc0:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    ebc2:	4b07      	ldr	r3, [pc, #28]	; (ebe0 <_usb_d_dev_handle_stall+0x40>)
    ebc4:	691b      	ldr	r3, [r3, #16]
    ebc6:	687a      	ldr	r2, [r7, #4]
    ebc8:	7c90      	ldrb	r0, [r2, #18]
    ebca:	687a      	ldr	r2, [r7, #4]
    ebcc:	6892      	ldr	r2, [r2, #8]
    ebce:	2101      	movs	r1, #1
    ebd0:	4798      	blx	r3
}
    ebd2:	bf00      	nop
    ebd4:	3710      	adds	r7, #16
    ebd6:	46bd      	mov	sp, r7
    ebd8:	bd80      	pop	{r7, pc}
    ebda:	bf00      	nop
    ebdc:	0000decd 	.word	0x0000decd
    ebe0:	200089e0 	.word	0x200089e0

0000ebe4 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    ebe4:	b580      	push	{r7, lr}
    ebe6:	b088      	sub	sp, #32
    ebe8:	af00      	add	r7, sp, #0
    ebea:	6078      	str	r0, [r7, #4]
    ebec:	460b      	mov	r3, r1
    ebee:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    ebf0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ebf4:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    ebf6:	687b      	ldr	r3, [r7, #4]
    ebf8:	7c9b      	ldrb	r3, [r3, #18]
    ebfa:	f003 030f 	and.w	r3, r3, #15
    ebfe:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    ec00:	4b61      	ldr	r3, [pc, #388]	; (ed88 <_usb_d_dev_handle_trfail+0x1a4>)
    ec02:	881b      	ldrh	r3, [r3, #0]
    ec04:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    ec06:	7efb      	ldrb	r3, [r7, #27]
    ec08:	015b      	lsls	r3, r3, #5
    ec0a:	4a60      	ldr	r2, [pc, #384]	; (ed8c <_usb_d_dev_handle_trfail+0x1a8>)
    ec0c:	4413      	add	r3, r2
    ec0e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    ec10:	78fb      	ldrb	r3, [r7, #3]
    ec12:	2b00      	cmp	r3, #0
    ec14:	d006      	beq.n	ec24 <_usb_d_dev_handle_trfail+0x40>
    ec16:	7efb      	ldrb	r3, [r7, #27]
    ec18:	4619      	mov	r1, r3
    ec1a:	69f8      	ldr	r0, [r7, #28]
    ec1c:	4b5c      	ldr	r3, [pc, #368]	; (ed90 <_usb_d_dev_handle_trfail+0x1ac>)
    ec1e:	4798      	blx	r3
    ec20:	4603      	mov	r3, r0
    ec22:	e005      	b.n	ec30 <_usb_d_dev_handle_trfail+0x4c>
    ec24:	7efb      	ldrb	r3, [r7, #27]
    ec26:	4619      	mov	r1, r3
    ec28:	69f8      	ldr	r0, [r7, #28]
    ec2a:	4b5a      	ldr	r3, [pc, #360]	; (ed94 <_usb_d_dev_handle_trfail+0x1b0>)
    ec2c:	4798      	blx	r3
    ec2e:	4603      	mov	r3, r0
    ec30:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    ec32:	687b      	ldr	r3, [r7, #4]
    ec34:	7cdb      	ldrb	r3, [r3, #19]
    ec36:	f003 0307 	and.w	r3, r3, #7
    ec3a:	b2db      	uxtb	r3, r3
    ec3c:	2b01      	cmp	r3, #1
    ec3e:	bf0c      	ite	eq
    ec40:	2301      	moveq	r3, #1
    ec42:	2300      	movne	r3, #0
    ec44:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    ec46:	78fb      	ldrb	r3, [r7, #3]
    ec48:	011b      	lsls	r3, r3, #4
    ec4a:	697a      	ldr	r2, [r7, #20]
    ec4c:	4413      	add	r3, r2
    ec4e:	7a9b      	ldrb	r3, [r3, #10]
    ec50:	b2db      	uxtb	r3, r3
    ec52:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    ec54:	7cfb      	ldrb	r3, [r7, #19]
    ec56:	2b02      	cmp	r3, #2
    ec58:	d12f      	bne.n	ecba <_usb_d_dev_handle_trfail+0xd6>
    ec5a:	7b3b      	ldrb	r3, [r7, #12]
    ec5c:	f003 0301 	and.w	r3, r3, #1
    ec60:	b2db      	uxtb	r3, r3
    ec62:	2b00      	cmp	r3, #0
    ec64:	d029      	beq.n	ecba <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    ec66:	78fb      	ldrb	r3, [r7, #3]
    ec68:	011b      	lsls	r3, r3, #4
    ec6a:	697a      	ldr	r2, [r7, #20]
    ec6c:	441a      	add	r2, r3
    ec6e:	7a93      	ldrb	r3, [r2, #10]
    ec70:	f36f 0300 	bfc	r3, #0, #1
    ec74:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ec76:	78fb      	ldrb	r3, [r7, #3]
    ec78:	f107 0220 	add.w	r2, r7, #32
    ec7c:	4413      	add	r3, r2
    ec7e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ec82:	7efb      	ldrb	r3, [r7, #27]
    ec84:	4619      	mov	r1, r3
    ec86:	69f8      	ldr	r0, [r7, #28]
    ec88:	4b43      	ldr	r3, [pc, #268]	; (ed98 <_usb_d_dev_handle_trfail+0x1b4>)
    ec8a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ec8c:	78fb      	ldrb	r3, [r7, #3]
    ec8e:	f107 0220 	add.w	r2, r7, #32
    ec92:	4413      	add	r3, r2
    ec94:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ec98:	7efb      	ldrb	r3, [r7, #27]
    ec9a:	4619      	mov	r1, r3
    ec9c:	69f8      	ldr	r0, [r7, #28]
    ec9e:	4b3f      	ldr	r3, [pc, #252]	; (ed9c <_usb_d_dev_handle_trfail+0x1b8>)
    eca0:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    eca2:	78fb      	ldrb	r3, [r7, #3]
    eca4:	2b00      	cmp	r3, #0
    eca6:	bf14      	ite	ne
    eca8:	2301      	movne	r3, #1
    ecaa:	2300      	moveq	r3, #0
    ecac:	b2db      	uxtb	r3, r3
    ecae:	2204      	movs	r2, #4
    ecb0:	4619      	mov	r1, r3
    ecb2:	6878      	ldr	r0, [r7, #4]
    ecb4:	4b3a      	ldr	r3, [pc, #232]	; (eda0 <_usb_d_dev_handle_trfail+0x1bc>)
    ecb6:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    ecb8:	e062      	b.n	ed80 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    ecba:	7b3b      	ldrb	r3, [r7, #12]
    ecbc:	f003 0302 	and.w	r3, r3, #2
    ecc0:	b2db      	uxtb	r3, r3
    ecc2:	2b00      	cmp	r3, #0
    ecc4:	d040      	beq.n	ed48 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    ecc6:	78fb      	ldrb	r3, [r7, #3]
    ecc8:	011b      	lsls	r3, r3, #4
    ecca:	697a      	ldr	r2, [r7, #20]
    eccc:	441a      	add	r2, r3
    ecce:	7a93      	ldrb	r3, [r2, #10]
    ecd0:	f36f 0341 	bfc	r3, #1, #1
    ecd4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ecd6:	78fb      	ldrb	r3, [r7, #3]
    ecd8:	f107 0220 	add.w	r2, r7, #32
    ecdc:	4413      	add	r3, r2
    ecde:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ece2:	7efb      	ldrb	r3, [r7, #27]
    ece4:	4619      	mov	r1, r3
    ece6:	69f8      	ldr	r0, [r7, #28]
    ece8:	4b2b      	ldr	r3, [pc, #172]	; (ed98 <_usb_d_dev_handle_trfail+0x1b4>)
    ecea:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ecec:	78fb      	ldrb	r3, [r7, #3]
    ecee:	f107 0220 	add.w	r2, r7, #32
    ecf2:	4413      	add	r3, r2
    ecf4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ecf8:	7efb      	ldrb	r3, [r7, #27]
    ecfa:	4619      	mov	r1, r3
    ecfc:	69f8      	ldr	r0, [r7, #28]
    ecfe:	4b27      	ldr	r3, [pc, #156]	; (ed9c <_usb_d_dev_handle_trfail+0x1b8>)
    ed00:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    ed02:	7cbb      	ldrb	r3, [r7, #18]
    ed04:	2b00      	cmp	r3, #0
    ed06:	d03b      	beq.n	ed80 <_usb_d_dev_handle_trfail+0x19c>
    ed08:	687b      	ldr	r3, [r7, #4]
    ed0a:	7cdb      	ldrb	r3, [r3, #19]
    ed0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ed10:	b2db      	uxtb	r3, r3
    ed12:	2b00      	cmp	r3, #0
    ed14:	d034      	beq.n	ed80 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    ed16:	687b      	ldr	r3, [r7, #4]
    ed18:	7cdb      	ldrb	r3, [r3, #19]
    ed1a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ed1e:	b2db      	uxtb	r3, r3
    ed20:	461a      	mov	r2, r3
    ed22:	78fb      	ldrb	r3, [r7, #3]
    ed24:	4293      	cmp	r3, r2
    ed26:	d02b      	beq.n	ed80 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    ed28:	687b      	ldr	r3, [r7, #4]
    ed2a:	7cdb      	ldrb	r3, [r3, #19]
    ed2c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ed30:	b2db      	uxtb	r3, r3
    ed32:	2b00      	cmp	r3, #0
    ed34:	bf14      	ite	ne
    ed36:	2301      	movne	r3, #1
    ed38:	2300      	moveq	r3, #0
    ed3a:	b2db      	uxtb	r3, r3
    ed3c:	2200      	movs	r2, #0
    ed3e:	4619      	mov	r1, r3
    ed40:	6878      	ldr	r0, [r7, #4]
    ed42:	4b17      	ldr	r3, [pc, #92]	; (eda0 <_usb_d_dev_handle_trfail+0x1bc>)
    ed44:	4798      	blx	r3
}
    ed46:	e01b      	b.n	ed80 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    ed48:	78fa      	ldrb	r2, [r7, #3]
    ed4a:	7efb      	ldrb	r3, [r7, #27]
    ed4c:	4611      	mov	r1, r2
    ed4e:	4618      	mov	r0, r3
    ed50:	4b14      	ldr	r3, [pc, #80]	; (eda4 <_usb_d_dev_handle_trfail+0x1c0>)
    ed52:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ed54:	78fb      	ldrb	r3, [r7, #3]
    ed56:	f107 0220 	add.w	r2, r7, #32
    ed5a:	4413      	add	r3, r2
    ed5c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ed60:	7efb      	ldrb	r3, [r7, #27]
    ed62:	4619      	mov	r1, r3
    ed64:	69f8      	ldr	r0, [r7, #28]
    ed66:	4b0c      	ldr	r3, [pc, #48]	; (ed98 <_usb_d_dev_handle_trfail+0x1b4>)
    ed68:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ed6a:	78fb      	ldrb	r3, [r7, #3]
    ed6c:	f107 0220 	add.w	r2, r7, #32
    ed70:	4413      	add	r3, r2
    ed72:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ed76:	7efb      	ldrb	r3, [r7, #27]
    ed78:	4619      	mov	r1, r3
    ed7a:	69f8      	ldr	r0, [r7, #28]
    ed7c:	4b07      	ldr	r3, [pc, #28]	; (ed9c <_usb_d_dev_handle_trfail+0x1b8>)
    ed7e:	4798      	blx	r3
}
    ed80:	bf00      	nop
    ed82:	3720      	adds	r7, #32
    ed84:	46bd      	mov	sp, r7
    ed86:	bd80      	pop	{r7, pc}
    ed88:	0001f850 	.word	0x0001f850
    ed8c:	20008aa8 	.word	0x20008aa8
    ed90:	0000d94d 	.word	0x0000d94d
    ed94:	0000d91d 	.word	0x0000d91d
    ed98:	0000d7f1 	.word	0x0000d7f1
    ed9c:	0000d8f1 	.word	0x0000d8f1
    eda0:	0000f95d 	.word	0x0000f95d
    eda4:	0000e1d9 	.word	0x0000e1d9

0000eda8 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    eda8:	b580      	push	{r7, lr}
    edaa:	b082      	sub	sp, #8
    edac:	af00      	add	r7, sp, #0
    edae:	6078      	str	r0, [r7, #4]
    edb0:	460b      	mov	r3, r1
    edb2:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    edb4:	78fb      	ldrb	r3, [r7, #3]
    edb6:	f003 0310 	and.w	r3, r3, #16
    edba:	2b00      	cmp	r3, #0
    edbc:	d003      	beq.n	edc6 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    edbe:	6878      	ldr	r0, [r7, #4]
    edc0:	4b0c      	ldr	r3, [pc, #48]	; (edf4 <_usb_d_dev_trans_setup_isr+0x4c>)
    edc2:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    edc4:	e012      	b.n	edec <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    edc6:	78fb      	ldrb	r3, [r7, #3]
    edc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    edcc:	2b00      	cmp	r3, #0
    edce:	d004      	beq.n	edda <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    edd0:	2101      	movs	r1, #1
    edd2:	6878      	ldr	r0, [r7, #4]
    edd4:	4b08      	ldr	r3, [pc, #32]	; (edf8 <_usb_d_dev_trans_setup_isr+0x50>)
    edd6:	4798      	blx	r3
}
    edd8:	e008      	b.n	edec <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    edda:	78fb      	ldrb	r3, [r7, #3]
    eddc:	f003 0320 	and.w	r3, r3, #32
    ede0:	2b00      	cmp	r3, #0
    ede2:	d003      	beq.n	edec <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    ede4:	2100      	movs	r1, #0
    ede6:	6878      	ldr	r0, [r7, #4]
    ede8:	4b03      	ldr	r3, [pc, #12]	; (edf8 <_usb_d_dev_trans_setup_isr+0x50>)
    edea:	4798      	blx	r3
}
    edec:	bf00      	nop
    edee:	3708      	adds	r7, #8
    edf0:	46bd      	mov	sp, r7
    edf2:	bd80      	pop	{r7, pc}
    edf4:	0000eac9 	.word	0x0000eac9
    edf8:	0000eba1 	.word	0x0000eba1

0000edfc <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    edfc:	b580      	push	{r7, lr}
    edfe:	b082      	sub	sp, #8
    ee00:	af00      	add	r7, sp, #0
    ee02:	6078      	str	r0, [r7, #4]
    ee04:	460b      	mov	r3, r1
    ee06:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    ee08:	78fb      	ldrb	r3, [r7, #3]
    ee0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ee0e:	2b00      	cmp	r3, #0
    ee10:	d004      	beq.n	ee1c <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    ee12:	2101      	movs	r1, #1
    ee14:	6878      	ldr	r0, [r7, #4]
    ee16:	4b1a      	ldr	r3, [pc, #104]	; (ee80 <_usb_d_dev_trans_in_isr+0x84>)
    ee18:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    ee1a:	e02c      	b.n	ee76 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    ee1c:	78fb      	ldrb	r3, [r7, #3]
    ee1e:	f003 0308 	and.w	r3, r3, #8
    ee22:	2b00      	cmp	r3, #0
    ee24:	d004      	beq.n	ee30 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    ee26:	2101      	movs	r1, #1
    ee28:	6878      	ldr	r0, [r7, #4]
    ee2a:	4b16      	ldr	r3, [pc, #88]	; (ee84 <_usb_d_dev_trans_in_isr+0x88>)
    ee2c:	4798      	blx	r3
}
    ee2e:	e022      	b.n	ee76 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    ee30:	78fb      	ldrb	r3, [r7, #3]
    ee32:	f003 0302 	and.w	r3, r3, #2
    ee36:	2b00      	cmp	r3, #0
    ee38:	d004      	beq.n	ee44 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    ee3a:	2101      	movs	r1, #1
    ee3c:	6878      	ldr	r0, [r7, #4]
    ee3e:	4b12      	ldr	r3, [pc, #72]	; (ee88 <_usb_d_dev_trans_in_isr+0x8c>)
    ee40:	4798      	blx	r3
}
    ee42:	e018      	b.n	ee76 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    ee44:	687b      	ldr	r3, [r7, #4]
    ee46:	7cdb      	ldrb	r3, [r3, #19]
    ee48:	f003 0307 	and.w	r3, r3, #7
    ee4c:	b2db      	uxtb	r3, r3
    ee4e:	2b01      	cmp	r3, #1
    ee50:	d111      	bne.n	ee76 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    ee52:	78fb      	ldrb	r3, [r7, #3]
    ee54:	f003 0304 	and.w	r3, r3, #4
    ee58:	2b00      	cmp	r3, #0
    ee5a:	d004      	beq.n	ee66 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    ee5c:	2100      	movs	r1, #0
    ee5e:	6878      	ldr	r0, [r7, #4]
    ee60:	4b08      	ldr	r3, [pc, #32]	; (ee84 <_usb_d_dev_trans_in_isr+0x88>)
    ee62:	4798      	blx	r3
}
    ee64:	e007      	b.n	ee76 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    ee66:	78fb      	ldrb	r3, [r7, #3]
    ee68:	f003 0310 	and.w	r3, r3, #16
    ee6c:	2b00      	cmp	r3, #0
    ee6e:	d002      	beq.n	ee76 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    ee70:	6878      	ldr	r0, [r7, #4]
    ee72:	4b06      	ldr	r3, [pc, #24]	; (ee8c <_usb_d_dev_trans_in_isr+0x90>)
    ee74:	4798      	blx	r3
}
    ee76:	bf00      	nop
    ee78:	3708      	adds	r7, #8
    ee7a:	46bd      	mov	sp, r7
    ee7c:	bd80      	pop	{r7, pc}
    ee7e:	bf00      	nop
    ee80:	0000eba1 	.word	0x0000eba1
    ee84:	0000ebe5 	.word	0x0000ebe5
    ee88:	0000e5ed 	.word	0x0000e5ed
    ee8c:	0000eac9 	.word	0x0000eac9

0000ee90 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ee90:	b580      	push	{r7, lr}
    ee92:	b082      	sub	sp, #8
    ee94:	af00      	add	r7, sp, #0
    ee96:	6078      	str	r0, [r7, #4]
    ee98:	460b      	mov	r3, r1
    ee9a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    ee9c:	78fb      	ldrb	r3, [r7, #3]
    ee9e:	f003 0320 	and.w	r3, r3, #32
    eea2:	2b00      	cmp	r3, #0
    eea4:	d004      	beq.n	eeb0 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    eea6:	2100      	movs	r1, #0
    eea8:	6878      	ldr	r0, [r7, #4]
    eeaa:	4b1a      	ldr	r3, [pc, #104]	; (ef14 <_usb_d_dev_trans_out_isr+0x84>)
    eeac:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    eeae:	e02c      	b.n	ef0a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    eeb0:	78fb      	ldrb	r3, [r7, #3]
    eeb2:	f003 0304 	and.w	r3, r3, #4
    eeb6:	2b00      	cmp	r3, #0
    eeb8:	d004      	beq.n	eec4 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    eeba:	2100      	movs	r1, #0
    eebc:	6878      	ldr	r0, [r7, #4]
    eebe:	4b16      	ldr	r3, [pc, #88]	; (ef18 <_usb_d_dev_trans_out_isr+0x88>)
    eec0:	4798      	blx	r3
}
    eec2:	e022      	b.n	ef0a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    eec4:	78fb      	ldrb	r3, [r7, #3]
    eec6:	f003 0301 	and.w	r3, r3, #1
    eeca:	2b00      	cmp	r3, #0
    eecc:	d004      	beq.n	eed8 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    eece:	2101      	movs	r1, #1
    eed0:	6878      	ldr	r0, [r7, #4]
    eed2:	4b12      	ldr	r3, [pc, #72]	; (ef1c <_usb_d_dev_trans_out_isr+0x8c>)
    eed4:	4798      	blx	r3
}
    eed6:	e018      	b.n	ef0a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    eed8:	687b      	ldr	r3, [r7, #4]
    eeda:	7cdb      	ldrb	r3, [r3, #19]
    eedc:	f003 0307 	and.w	r3, r3, #7
    eee0:	b2db      	uxtb	r3, r3
    eee2:	2b01      	cmp	r3, #1
    eee4:	d111      	bne.n	ef0a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    eee6:	78fb      	ldrb	r3, [r7, #3]
    eee8:	f003 0308 	and.w	r3, r3, #8
    eeec:	2b00      	cmp	r3, #0
    eeee:	d004      	beq.n	eefa <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    eef0:	2101      	movs	r1, #1
    eef2:	6878      	ldr	r0, [r7, #4]
    eef4:	4b08      	ldr	r3, [pc, #32]	; (ef18 <_usb_d_dev_trans_out_isr+0x88>)
    eef6:	4798      	blx	r3
}
    eef8:	e007      	b.n	ef0a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    eefa:	78fb      	ldrb	r3, [r7, #3]
    eefc:	f003 0310 	and.w	r3, r3, #16
    ef00:	2b00      	cmp	r3, #0
    ef02:	d002      	beq.n	ef0a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    ef04:	6878      	ldr	r0, [r7, #4]
    ef06:	4b06      	ldr	r3, [pc, #24]	; (ef20 <_usb_d_dev_trans_out_isr+0x90>)
    ef08:	4798      	blx	r3
}
    ef0a:	bf00      	nop
    ef0c:	3708      	adds	r7, #8
    ef0e:	46bd      	mov	sp, r7
    ef10:	bd80      	pop	{r7, pc}
    ef12:	bf00      	nop
    ef14:	0000eba1 	.word	0x0000eba1
    ef18:	0000ebe5 	.word	0x0000ebe5
    ef1c:	0000e805 	.word	0x0000e805
    ef20:	0000eac9 	.word	0x0000eac9

0000ef24 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    ef24:	b580      	push	{r7, lr}
    ef26:	b084      	sub	sp, #16
    ef28:	af00      	add	r7, sp, #0
    ef2a:	6078      	str	r0, [r7, #4]
    ef2c:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    ef2e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ef32:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ef34:	683b      	ldr	r3, [r7, #0]
    ef36:	7c9b      	ldrb	r3, [r3, #18]
    ef38:	f003 030f 	and.w	r3, r3, #15
    ef3c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    ef3e:	7afb      	ldrb	r3, [r7, #11]
    ef40:	2201      	movs	r2, #1
    ef42:	409a      	lsls	r2, r3
    ef44:	687b      	ldr	r3, [r7, #4]
    ef46:	4013      	ands	r3, r2
    ef48:	2b00      	cmp	r3, #0
    ef4a:	d03d      	beq.n	efc8 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    ef4c:	7afb      	ldrb	r3, [r7, #11]
    ef4e:	68fa      	ldr	r2, [r7, #12]
    ef50:	3308      	adds	r3, #8
    ef52:	015b      	lsls	r3, r3, #5
    ef54:	4413      	add	r3, r2
    ef56:	3307      	adds	r3, #7
    ef58:	781b      	ldrb	r3, [r3, #0]
    ef5a:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    ef5c:	7afb      	ldrb	r3, [r7, #11]
    ef5e:	68fa      	ldr	r2, [r7, #12]
    ef60:	015b      	lsls	r3, r3, #5
    ef62:	4413      	add	r3, r2
    ef64:	f203 1309 	addw	r3, r3, #265	; 0x109
    ef68:	781b      	ldrb	r3, [r3, #0]
    ef6a:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    ef6c:	7aba      	ldrb	r2, [r7, #10]
    ef6e:	7a7b      	ldrb	r3, [r7, #9]
    ef70:	4013      	ands	r3, r2
    ef72:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    ef74:	7abb      	ldrb	r3, [r7, #10]
    ef76:	2b00      	cmp	r3, #0
    ef78:	d027      	beq.n	efca <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    ef7a:	683b      	ldr	r3, [r7, #0]
    ef7c:	7cdb      	ldrb	r3, [r3, #19]
    ef7e:	f003 0307 	and.w	r3, r3, #7
    ef82:	b2db      	uxtb	r3, r3
    ef84:	2b01      	cmp	r3, #1
    ef86:	d10c      	bne.n	efa2 <_usb_d_dev_handle_eps+0x7e>
    ef88:	683b      	ldr	r3, [r7, #0]
    ef8a:	7cdb      	ldrb	r3, [r3, #19]
    ef8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ef90:	b2db      	uxtb	r3, r3
    ef92:	2b00      	cmp	r3, #0
    ef94:	d105      	bne.n	efa2 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    ef96:	7abb      	ldrb	r3, [r7, #10]
    ef98:	4619      	mov	r1, r3
    ef9a:	6838      	ldr	r0, [r7, #0]
    ef9c:	4b0c      	ldr	r3, [pc, #48]	; (efd0 <_usb_d_dev_handle_eps+0xac>)
    ef9e:	4798      	blx	r3
    efa0:	e013      	b.n	efca <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    efa2:	683b      	ldr	r3, [r7, #0]
    efa4:	7cdb      	ldrb	r3, [r3, #19]
    efa6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    efaa:	b2db      	uxtb	r3, r3
    efac:	2b00      	cmp	r3, #0
    efae:	d005      	beq.n	efbc <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    efb0:	7abb      	ldrb	r3, [r7, #10]
    efb2:	4619      	mov	r1, r3
    efb4:	6838      	ldr	r0, [r7, #0]
    efb6:	4b07      	ldr	r3, [pc, #28]	; (efd4 <_usb_d_dev_handle_eps+0xb0>)
    efb8:	4798      	blx	r3
    efba:	e006      	b.n	efca <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    efbc:	7abb      	ldrb	r3, [r7, #10]
    efbe:	4619      	mov	r1, r3
    efc0:	6838      	ldr	r0, [r7, #0]
    efc2:	4b05      	ldr	r3, [pc, #20]	; (efd8 <_usb_d_dev_handle_eps+0xb4>)
    efc4:	4798      	blx	r3
    efc6:	e000      	b.n	efca <_usb_d_dev_handle_eps+0xa6>
		return;
    efc8:	bf00      	nop
		}
	}
}
    efca:	3710      	adds	r7, #16
    efcc:	46bd      	mov	sp, r7
    efce:	bd80      	pop	{r7, pc}
    efd0:	0000eda9 	.word	0x0000eda9
    efd4:	0000edfd 	.word	0x0000edfd
    efd8:	0000ee91 	.word	0x0000ee91

0000efdc <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    efdc:	b580      	push	{r7, lr}
    efde:	b084      	sub	sp, #16
    efe0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    efe2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    efe6:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    efe8:	68bb      	ldr	r3, [r7, #8]
    efea:	8c1b      	ldrh	r3, [r3, #32]
    efec:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    efee:	88fb      	ldrh	r3, [r7, #6]
    eff0:	2b00      	cmp	r3, #0
    eff2:	d104      	bne.n	effe <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    eff4:	4b13      	ldr	r3, [pc, #76]	; (f044 <_usb_d_dev_handler+0x68>)
    eff6:	4798      	blx	r3
    eff8:	4603      	mov	r3, r0
    effa:	2b00      	cmp	r3, #0
    effc:	d11e      	bne.n	f03c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    effe:	2300      	movs	r3, #0
    f000:	73fb      	strb	r3, [r7, #15]
    f002:	e017      	b.n	f034 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    f004:	7bfa      	ldrb	r2, [r7, #15]
    f006:	4613      	mov	r3, r2
    f008:	009b      	lsls	r3, r3, #2
    f00a:	4413      	add	r3, r2
    f00c:	009b      	lsls	r3, r3, #2
    f00e:	3310      	adds	r3, #16
    f010:	4a0d      	ldr	r2, [pc, #52]	; (f048 <_usb_d_dev_handler+0x6c>)
    f012:	4413      	add	r3, r2
    f014:	3304      	adds	r3, #4
    f016:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    f018:	683b      	ldr	r3, [r7, #0]
    f01a:	7c9b      	ldrb	r3, [r3, #18]
    f01c:	2bff      	cmp	r3, #255	; 0xff
    f01e:	d005      	beq.n	f02c <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    f020:	88fb      	ldrh	r3, [r7, #6]
    f022:	6839      	ldr	r1, [r7, #0]
    f024:	4618      	mov	r0, r3
    f026:	4b09      	ldr	r3, [pc, #36]	; (f04c <_usb_d_dev_handler+0x70>)
    f028:	4798      	blx	r3
    f02a:	e000      	b.n	f02e <_usb_d_dev_handler+0x52>
			continue;
    f02c:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    f02e:	7bfb      	ldrb	r3, [r7, #15]
    f030:	3301      	adds	r3, #1
    f032:	73fb      	strb	r3, [r7, #15]
    f034:	7bfb      	ldrb	r3, [r7, #15]
    f036:	2b08      	cmp	r3, #8
    f038:	d9e4      	bls.n	f004 <_usb_d_dev_handler+0x28>
    f03a:	e000      	b.n	f03e <_usb_d_dev_handler+0x62>
			return;
    f03c:	bf00      	nop
	}
}
    f03e:	3710      	adds	r7, #16
    f040:	46bd      	mov	sp, r7
    f042:	bd80      	pop	{r7, pc}
    f044:	0000e535 	.word	0x0000e535
    f048:	200089e0 	.word	0x200089e0
    f04c:	0000ef25 	.word	0x0000ef25

0000f050 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    f050:	b580      	push	{r7, lr}
    f052:	b082      	sub	sp, #8
    f054:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    f056:	2300      	movs	r3, #0
    f058:	71fb      	strb	r3, [r7, #7]
    f05a:	e023      	b.n	f0a4 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    f05c:	79fa      	ldrb	r2, [r7, #7]
    f05e:	4613      	mov	r3, r2
    f060:	009b      	lsls	r3, r3, #2
    f062:	4413      	add	r3, r2
    f064:	009b      	lsls	r3, r3, #2
    f066:	3310      	adds	r3, #16
    f068:	4a14      	ldr	r2, [pc, #80]	; (f0bc <_usb_d_dev_reset_epts+0x6c>)
    f06a:	4413      	add	r3, r2
    f06c:	3304      	adds	r3, #4
    f06e:	2103      	movs	r1, #3
    f070:	4618      	mov	r0, r3
    f072:	4b13      	ldr	r3, [pc, #76]	; (f0c0 <_usb_d_dev_reset_epts+0x70>)
    f074:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    f076:	79fa      	ldrb	r2, [r7, #7]
    f078:	4910      	ldr	r1, [pc, #64]	; (f0bc <_usb_d_dev_reset_epts+0x6c>)
    f07a:	4613      	mov	r3, r2
    f07c:	009b      	lsls	r3, r3, #2
    f07e:	4413      	add	r3, r2
    f080:	009b      	lsls	r3, r3, #2
    f082:	440b      	add	r3, r1
    f084:	3326      	adds	r3, #38	; 0x26
    f086:	22ff      	movs	r2, #255	; 0xff
    f088:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    f08a:	79fa      	ldrb	r2, [r7, #7]
    f08c:	490b      	ldr	r1, [pc, #44]	; (f0bc <_usb_d_dev_reset_epts+0x6c>)
    f08e:	4613      	mov	r3, r2
    f090:	009b      	lsls	r3, r3, #2
    f092:	4413      	add	r3, r2
    f094:	009b      	lsls	r3, r3, #2
    f096:	440b      	add	r3, r1
    f098:	3327      	adds	r3, #39	; 0x27
    f09a:	2200      	movs	r2, #0
    f09c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    f09e:	79fb      	ldrb	r3, [r7, #7]
    f0a0:	3301      	adds	r3, #1
    f0a2:	71fb      	strb	r3, [r7, #7]
    f0a4:	79fb      	ldrb	r3, [r7, #7]
    f0a6:	2b08      	cmp	r3, #8
    f0a8:	d9d8      	bls.n	f05c <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    f0aa:	22a0      	movs	r2, #160	; 0xa0
    f0ac:	2100      	movs	r1, #0
    f0ae:	4805      	ldr	r0, [pc, #20]	; (f0c4 <_usb_d_dev_reset_epts+0x74>)
    f0b0:	4b05      	ldr	r3, [pc, #20]	; (f0c8 <_usb_d_dev_reset_epts+0x78>)
    f0b2:	4798      	blx	r3
}
    f0b4:	bf00      	nop
    f0b6:	3708      	adds	r7, #8
    f0b8:	46bd      	mov	sp, r7
    f0ba:	bd80      	pop	{r7, pc}
    f0bc:	200089e0 	.word	0x200089e0
    f0c0:	0000f915 	.word	0x0000f915
    f0c4:	20008aa8 	.word	0x20008aa8
    f0c8:	0001b089 	.word	0x0001b089

0000f0cc <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    f0cc:	b580      	push	{r7, lr}
    f0ce:	b084      	sub	sp, #16
    f0d0:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    f0d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f0d6:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    f0d8:	2301      	movs	r3, #1
    f0da:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    f0dc:	2304      	movs	r3, #4
    f0de:	713b      	strb	r3, [r7, #4]
    f0e0:	2300      	movs	r3, #0
    f0e2:	717b      	strb	r3, [r7, #5]
    f0e4:	2300      	movs	r3, #0
    f0e6:	71bb      	strb	r3, [r7, #6]
    f0e8:	2300      	movs	r3, #0
    f0ea:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    f0ec:	2101      	movs	r1, #1
    f0ee:	68f8      	ldr	r0, [r7, #12]
    f0f0:	4b26      	ldr	r3, [pc, #152]	; (f18c <_usb_d_dev_init+0xc0>)
    f0f2:	4798      	blx	r3
    f0f4:	4603      	mov	r3, r0
    f0f6:	f083 0301 	eor.w	r3, r3, #1
    f0fa:	b2db      	uxtb	r3, r3
    f0fc:	2b00      	cmp	r3, #0
    f0fe:	d011      	beq.n	f124 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    f100:	2102      	movs	r1, #2
    f102:	68f8      	ldr	r0, [r7, #12]
    f104:	4b22      	ldr	r3, [pc, #136]	; (f190 <_usb_d_dev_init+0xc4>)
    f106:	4798      	blx	r3
    f108:	4603      	mov	r3, r0
    f10a:	2b00      	cmp	r3, #0
    f10c:	d006      	beq.n	f11c <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    f10e:	68f8      	ldr	r0, [r7, #12]
    f110:	4b20      	ldr	r3, [pc, #128]	; (f194 <_usb_d_dev_init+0xc8>)
    f112:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    f114:	2102      	movs	r1, #2
    f116:	68f8      	ldr	r0, [r7, #12]
    f118:	4b1f      	ldr	r3, [pc, #124]	; (f198 <_usb_d_dev_init+0xcc>)
    f11a:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    f11c:	2101      	movs	r1, #1
    f11e:	68f8      	ldr	r0, [r7, #12]
    f120:	4b1e      	ldr	r3, [pc, #120]	; (f19c <_usb_d_dev_init+0xd0>)
    f122:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    f124:	2101      	movs	r1, #1
    f126:	68f8      	ldr	r0, [r7, #12]
    f128:	4b1b      	ldr	r3, [pc, #108]	; (f198 <_usb_d_dev_init+0xcc>)
    f12a:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    f12c:	4b1c      	ldr	r3, [pc, #112]	; (f1a0 <_usb_d_dev_init+0xd4>)
    f12e:	4a1d      	ldr	r2, [pc, #116]	; (f1a4 <_usb_d_dev_init+0xd8>)
    f130:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    f132:	4b1b      	ldr	r3, [pc, #108]	; (f1a0 <_usb_d_dev_init+0xd4>)
    f134:	4a1b      	ldr	r2, [pc, #108]	; (f1a4 <_usb_d_dev_init+0xd8>)
    f136:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    f138:	4b19      	ldr	r3, [pc, #100]	; (f1a0 <_usb_d_dev_init+0xd4>)
    f13a:	4a1a      	ldr	r2, [pc, #104]	; (f1a4 <_usb_d_dev_init+0xd8>)
    f13c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    f13e:	4b18      	ldr	r3, [pc, #96]	; (f1a0 <_usb_d_dev_init+0xd4>)
    f140:	4a18      	ldr	r2, [pc, #96]	; (f1a4 <_usb_d_dev_init+0xd8>)
    f142:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    f144:	4b16      	ldr	r3, [pc, #88]	; (f1a0 <_usb_d_dev_init+0xd4>)
    f146:	4a17      	ldr	r2, [pc, #92]	; (f1a4 <_usb_d_dev_init+0xd8>)
    f148:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    f14a:	4b17      	ldr	r3, [pc, #92]	; (f1a8 <_usb_d_dev_init+0xdc>)
    f14c:	4798      	blx	r3

	_usb_load_calib();
    f14e:	4b17      	ldr	r3, [pc, #92]	; (f1ac <_usb_d_dev_init+0xe0>)
    f150:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    f152:	2104      	movs	r1, #4
    f154:	68f8      	ldr	r0, [r7, #12]
    f156:	4b11      	ldr	r3, [pc, #68]	; (f19c <_usb_d_dev_init+0xd0>)
    f158:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    f15a:	4b15      	ldr	r3, [pc, #84]	; (f1b0 <_usb_d_dev_init+0xe4>)
    f15c:	4619      	mov	r1, r3
    f15e:	68f8      	ldr	r0, [r7, #12]
    f160:	4b14      	ldr	r3, [pc, #80]	; (f1b4 <_usb_d_dev_init+0xe8>)
    f162:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    f164:	7afb      	ldrb	r3, [r7, #11]
    f166:	f107 0210 	add.w	r2, r7, #16
    f16a:	4413      	add	r3, r2
    f16c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    f170:	f043 0301 	orr.w	r3, r3, #1
    f174:	b2db      	uxtb	r3, r3
    f176:	b29b      	uxth	r3, r3
    f178:	4619      	mov	r1, r3
    f17a:	68f8      	ldr	r0, [r7, #12]
    f17c:	4b0e      	ldr	r3, [pc, #56]	; (f1b8 <_usb_d_dev_init+0xec>)
    f17e:	4798      	blx	r3

	return ERR_NONE;
    f180:	2300      	movs	r3, #0
}
    f182:	4618      	mov	r0, r3
    f184:	3710      	adds	r7, #16
    f186:	46bd      	mov	sp, r7
    f188:	bd80      	pop	{r7, pc}
    f18a:	bf00      	nop
    f18c:	0000d765 	.word	0x0000d765
    f190:	0000dab5 	.word	0x0000dab5
    f194:	0000da89 	.word	0x0000da89
    f198:	0000d73b 	.word	0x0000d73b
    f19c:	0000dae5 	.word	0x0000dae5
    f1a0:	200089e0 	.word	0x200089e0
    f1a4:	0000dbad 	.word	0x0000dbad
    f1a8:	0000f051 	.word	0x0000f051
    f1ac:	0000dbc5 	.word	0x0000dbc5
    f1b0:	20008aa8 	.word	0x20008aa8
    f1b4:	0000db91 	.word	0x0000db91
    f1b8:	0000db55 	.word	0x0000db55

0000f1bc <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    f1bc:	b580      	push	{r7, lr}
    f1be:	b082      	sub	sp, #8
    f1c0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    f1c2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f1c6:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    f1c8:	2103      	movs	r1, #3
    f1ca:	6878      	ldr	r0, [r7, #4]
    f1cc:	4b17      	ldr	r3, [pc, #92]	; (f22c <_usb_d_dev_enable+0x70>)
    f1ce:	4798      	blx	r3
    f1d0:	4603      	mov	r3, r0
    f1d2:	2b00      	cmp	r3, #0
    f1d4:	d002      	beq.n	f1dc <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    f1d6:	f06f 0310 	mvn.w	r3, #16
    f1da:	e023      	b.n	f224 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    f1dc:	6878      	ldr	r0, [r7, #4]
    f1de:	4b14      	ldr	r3, [pc, #80]	; (f230 <_usb_d_dev_enable+0x74>)
    f1e0:	4798      	blx	r3
    f1e2:	4603      	mov	r3, r0
    f1e4:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    f1e6:	78fb      	ldrb	r3, [r7, #3]
    f1e8:	f003 0302 	and.w	r3, r3, #2
    f1ec:	2b00      	cmp	r3, #0
    f1ee:	d107      	bne.n	f200 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    f1f0:	78fb      	ldrb	r3, [r7, #3]
    f1f2:	f043 0302 	orr.w	r3, r3, #2
    f1f6:	b2db      	uxtb	r3, r3
    f1f8:	4619      	mov	r1, r3
    f1fa:	6878      	ldr	r0, [r7, #4]
    f1fc:	4b0d      	ldr	r3, [pc, #52]	; (f234 <_usb_d_dev_enable+0x78>)
    f1fe:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    f200:	2050      	movs	r0, #80	; 0x50
    f202:	4b0d      	ldr	r3, [pc, #52]	; (f238 <_usb_d_dev_enable+0x7c>)
    f204:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    f206:	2051      	movs	r0, #81	; 0x51
    f208:	4b0b      	ldr	r3, [pc, #44]	; (f238 <_usb_d_dev_enable+0x7c>)
    f20a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    f20c:	2052      	movs	r0, #82	; 0x52
    f20e:	4b0a      	ldr	r3, [pc, #40]	; (f238 <_usb_d_dev_enable+0x7c>)
    f210:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    f212:	2053      	movs	r0, #83	; 0x53
    f214:	4b08      	ldr	r3, [pc, #32]	; (f238 <_usb_d_dev_enable+0x7c>)
    f216:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    f218:	f240 218d 	movw	r1, #653	; 0x28d
    f21c:	6878      	ldr	r0, [r7, #4]
    f21e:	4b07      	ldr	r3, [pc, #28]	; (f23c <_usb_d_dev_enable+0x80>)
    f220:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    f222:	2300      	movs	r3, #0
}
    f224:	4618      	mov	r0, r3
    f226:	3708      	adds	r7, #8
    f228:	46bd      	mov	sp, r7
    f22a:	bd80      	pop	{r7, pc}
    f22c:	0000da5f 	.word	0x0000da5f
    f230:	0000db0d 	.word	0x0000db0d
    f234:	0000dae5 	.word	0x0000dae5
    f238:	0000d671 	.word	0x0000d671
    f23c:	0000da09 	.word	0x0000da09

0000f240 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    f240:	b580      	push	{r7, lr}
    f242:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    f244:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f248:	4b01      	ldr	r3, [pc, #4]	; (f250 <_usb_d_dev_attach+0x10>)
    f24a:	4798      	blx	r3
}
    f24c:	bf00      	nop
    f24e:	bd80      	pop	{r7, pc}
    f250:	0000db31 	.word	0x0000db31

0000f254 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    f254:	b580      	push	{r7, lr}
    f256:	b082      	sub	sp, #8
    f258:	af00      	add	r7, sp, #0
    f25a:	4603      	mov	r3, r0
    f25c:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    f25e:	79fb      	ldrb	r3, [r7, #7]
    f260:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f264:	b2db      	uxtb	r3, r3
    f266:	4619      	mov	r1, r3
    f268:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f26c:	4b02      	ldr	r3, [pc, #8]	; (f278 <_usb_d_dev_set_address+0x24>)
    f26e:	4798      	blx	r3
}
    f270:	bf00      	nop
    f272:	3708      	adds	r7, #8
    f274:	46bd      	mov	sp, r7
    f276:	bd80      	pop	{r7, pc}
    f278:	0000db73 	.word	0x0000db73

0000f27c <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    f27c:	b590      	push	{r4, r7, lr}
    f27e:	b085      	sub	sp, #20
    f280:	af00      	add	r7, sp, #0
    f282:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    f284:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f288:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f28a:	687b      	ldr	r3, [r7, #4]
    f28c:	7c9b      	ldrb	r3, [r3, #18]
    f28e:	f003 030f 	and.w	r3, r3, #15
    f292:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f294:	687b      	ldr	r3, [r7, #4]
    f296:	68db      	ldr	r3, [r3, #12]
    f298:	461a      	mov	r2, r3
    f29a:	7afb      	ldrb	r3, [r7, #11]
    f29c:	2100      	movs	r1, #0
    f29e:	4618      	mov	r0, r3
    f2a0:	4b0f      	ldr	r3, [pc, #60]	; (f2e0 <_usb_d_dev_trans_setup+0x64>)
    f2a2:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    f2a4:	687b      	ldr	r3, [r7, #4]
    f2a6:	8a1b      	ldrh	r3, [r3, #16]
    f2a8:	461a      	mov	r2, r3
    f2aa:	7af8      	ldrb	r0, [r7, #11]
    f2ac:	2300      	movs	r3, #0
    f2ae:	2100      	movs	r1, #0
    f2b0:	4c0c      	ldr	r4, [pc, #48]	; (f2e4 <_usb_d_dev_trans_setup+0x68>)
    f2b2:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    f2b4:	7afb      	ldrb	r3, [r7, #11]
    f2b6:	22b0      	movs	r2, #176	; 0xb0
    f2b8:	4619      	mov	r1, r3
    f2ba:	68f8      	ldr	r0, [r7, #12]
    f2bc:	4b0a      	ldr	r3, [pc, #40]	; (f2e8 <_usb_d_dev_trans_setup+0x6c>)
    f2be:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    f2c0:	7afb      	ldrb	r3, [r7, #11]
    f2c2:	2200      	movs	r2, #0
    f2c4:	2100      	movs	r1, #0
    f2c6:	4618      	mov	r0, r3
    f2c8:	4b08      	ldr	r3, [pc, #32]	; (f2ec <_usb_d_dev_trans_setup+0x70>)
    f2ca:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    f2cc:	7afb      	ldrb	r3, [r7, #11]
    f2ce:	2210      	movs	r2, #16
    f2d0:	4619      	mov	r1, r3
    f2d2:	68f8      	ldr	r0, [r7, #12]
    f2d4:	4b06      	ldr	r3, [pc, #24]	; (f2f0 <_usb_d_dev_trans_setup+0x74>)
    f2d6:	4798      	blx	r3
}
    f2d8:	bf00      	nop
    f2da:	3714      	adds	r7, #20
    f2dc:	46bd      	mov	sp, r7
    f2de:	bd90      	pop	{r4, r7, pc}
    f2e0:	0000e011 	.word	0x0000e011
    f2e4:	0000e199 	.word	0x0000e199
    f2e8:	0000d871 	.word	0x0000d871
    f2ec:	0000e269 	.word	0x0000e269
    f2f0:	0000d8c5 	.word	0x0000d8c5

0000f2f4 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    f2f4:	b580      	push	{r7, lr}
    f2f6:	b088      	sub	sp, #32
    f2f8:	af00      	add	r7, sp, #0
    f2fa:	4603      	mov	r3, r0
    f2fc:	71fb      	strb	r3, [r7, #7]
    f2fe:	460b      	mov	r3, r1
    f300:	71bb      	strb	r3, [r7, #6]
    f302:	4613      	mov	r3, r2
    f304:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    f306:	79fb      	ldrb	r3, [r7, #7]
    f308:	f003 030f 	and.w	r3, r3, #15
    f30c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    f30e:	79fb      	ldrb	r3, [r7, #7]
    f310:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f314:	2b00      	cmp	r3, #0
    f316:	bf14      	ite	ne
    f318:	2301      	movne	r3, #1
    f31a:	2300      	moveq	r3, #0
    f31c:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f31e:	7fba      	ldrb	r2, [r7, #30]
    f320:	7ffb      	ldrb	r3, [r7, #31]
    f322:	4611      	mov	r1, r2
    f324:	4618      	mov	r0, r3
    f326:	4b3e      	ldr	r3, [pc, #248]	; (f420 <_usb_d_dev_ep_init+0x12c>)
    f328:	4798      	blx	r3
    f32a:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    f32c:	79bb      	ldrb	r3, [r7, #6]
    f32e:	f003 0303 	and.w	r3, r3, #3
    f332:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    f334:	7ffa      	ldrb	r2, [r7, #31]
    f336:	4613      	mov	r3, r2
    f338:	005b      	lsls	r3, r3, #1
    f33a:	4413      	add	r3, r2
    f33c:	009b      	lsls	r3, r3, #2
    f33e:	4a39      	ldr	r2, [pc, #228]	; (f424 <_usb_d_dev_ep_init+0x130>)
    f340:	4413      	add	r3, r2
    f342:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    f344:	7ffb      	ldrb	r3, [r7, #31]
    f346:	2b04      	cmp	r3, #4
    f348:	d902      	bls.n	f350 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    f34a:	f06f 0311 	mvn.w	r3, #17
    f34e:	e063      	b.n	f418 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    f350:	69bb      	ldr	r3, [r7, #24]
    f352:	7c9b      	ldrb	r3, [r3, #18]
    f354:	2bff      	cmp	r3, #255	; 0xff
    f356:	d002      	beq.n	f35e <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    f358:	f06f 0313 	mvn.w	r3, #19
    f35c:	e05c      	b.n	f418 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    f35e:	7dfb      	ldrb	r3, [r7, #23]
    f360:	2b00      	cmp	r3, #0
    f362:	d11f      	bne.n	f3a4 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    f364:	7fbb      	ldrb	r3, [r7, #30]
    f366:	2b00      	cmp	r3, #0
    f368:	bf14      	ite	ne
    f36a:	2301      	movne	r3, #1
    f36c:	2300      	moveq	r3, #0
    f36e:	b2db      	uxtb	r3, r3
    f370:	f083 0301 	eor.w	r3, r3, #1
    f374:	b2db      	uxtb	r3, r3
    f376:	f003 0301 	and.w	r3, r3, #1
    f37a:	b2da      	uxtb	r2, r3
    f37c:	7ffb      	ldrb	r3, [r7, #31]
    f37e:	4611      	mov	r1, r2
    f380:	4618      	mov	r0, r3
    f382:	4b27      	ldr	r3, [pc, #156]	; (f420 <_usb_d_dev_ep_init+0x12c>)
    f384:	4798      	blx	r3
    f386:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    f388:	68fb      	ldr	r3, [r7, #12]
    f38a:	7c9b      	ldrb	r3, [r3, #18]
    f38c:	2bff      	cmp	r3, #255	; 0xff
    f38e:	d002      	beq.n	f396 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    f390:	f06f 0313 	mvn.w	r3, #19
    f394:	e040      	b.n	f418 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    f396:	693b      	ldr	r3, [r7, #16]
    f398:	681b      	ldr	r3, [r3, #0]
    f39a:	2b00      	cmp	r3, #0
    f39c:	d102      	bne.n	f3a4 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    f39e:	f06f 0312 	mvn.w	r3, #18
    f3a2:	e039      	b.n	f418 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    f3a4:	7fbb      	ldrb	r3, [r7, #30]
    f3a6:	2b00      	cmp	r3, #0
    f3a8:	d007      	beq.n	f3ba <_usb_d_dev_ep_init+0xc6>
    f3aa:	693b      	ldr	r3, [r7, #16]
    f3ac:	685b      	ldr	r3, [r3, #4]
    f3ae:	2b00      	cmp	r3, #0
    f3b0:	bf14      	ite	ne
    f3b2:	2301      	movne	r3, #1
    f3b4:	2300      	moveq	r3, #0
    f3b6:	b2db      	uxtb	r3, r3
    f3b8:	e006      	b.n	f3c8 <_usb_d_dev_ep_init+0xd4>
    f3ba:	693b      	ldr	r3, [r7, #16]
    f3bc:	681b      	ldr	r3, [r3, #0]
    f3be:	2b00      	cmp	r3, #0
    f3c0:	bf14      	ite	ne
    f3c2:	2301      	movne	r3, #1
    f3c4:	2300      	moveq	r3, #0
    f3c6:	b2db      	uxtb	r3, r3
    f3c8:	2b00      	cmp	r3, #0
    f3ca:	d00f      	beq.n	f3ec <_usb_d_dev_ep_init+0xf8>
    f3cc:	7fbb      	ldrb	r3, [r7, #30]
    f3ce:	2b00      	cmp	r3, #0
    f3d0:	d003      	beq.n	f3da <_usb_d_dev_ep_init+0xe6>
    f3d2:	693b      	ldr	r3, [r7, #16]
    f3d4:	895b      	ldrh	r3, [r3, #10]
    f3d6:	461a      	mov	r2, r3
    f3d8:	e002      	b.n	f3e0 <_usb_d_dev_ep_init+0xec>
    f3da:	693b      	ldr	r3, [r7, #16]
    f3dc:	891b      	ldrh	r3, [r3, #8]
    f3de:	461a      	mov	r2, r3
    f3e0:	88bb      	ldrh	r3, [r7, #4]
    f3e2:	429a      	cmp	r2, r3
    f3e4:	da02      	bge.n	f3ec <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    f3e6:	f06f 0312 	mvn.w	r3, #18
    f3ea:	e015      	b.n	f418 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    f3ec:	7fbb      	ldrb	r3, [r7, #30]
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	d002      	beq.n	f3f8 <_usb_d_dev_ep_init+0x104>
    f3f2:	693b      	ldr	r3, [r7, #16]
    f3f4:	685b      	ldr	r3, [r3, #4]
    f3f6:	e001      	b.n	f3fc <_usb_d_dev_ep_init+0x108>
    f3f8:	693b      	ldr	r3, [r7, #16]
    f3fa:	681b      	ldr	r3, [r3, #0]
    f3fc:	69ba      	ldr	r2, [r7, #24]
    f3fe:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    f400:	69bb      	ldr	r3, [r7, #24]
    f402:	88ba      	ldrh	r2, [r7, #4]
    f404:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    f406:	7dfb      	ldrb	r3, [r7, #23]
    f408:	3301      	adds	r3, #1
    f40a:	b2da      	uxtb	r2, r3
    f40c:	69bb      	ldr	r3, [r7, #24]
    f40e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    f410:	69bb      	ldr	r3, [r7, #24]
    f412:	79fa      	ldrb	r2, [r7, #7]
    f414:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    f416:	2300      	movs	r3, #0
}
    f418:	4618      	mov	r0, r3
    f41a:	3720      	adds	r7, #32
    f41c:	46bd      	mov	sp, r7
    f41e:	bd80      	pop	{r7, pc}
    f420:	0000e325 	.word	0x0000e325
    f424:	0001f814 	.word	0x0001f814

0000f428 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    f428:	b580      	push	{r7, lr}
    f42a:	b086      	sub	sp, #24
    f42c:	af00      	add	r7, sp, #0
    f42e:	4603      	mov	r3, r0
    f430:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    f432:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f436:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    f438:	79fb      	ldrb	r3, [r7, #7]
    f43a:	f003 030f 	and.w	r3, r3, #15
    f43e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    f440:	79fb      	ldrb	r3, [r7, #7]
    f442:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f446:	2b00      	cmp	r3, #0
    f448:	bf14      	ite	ne
    f44a:	2301      	movne	r3, #1
    f44c:	2300      	moveq	r3, #0
    f44e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f450:	7cba      	ldrb	r2, [r7, #18]
    f452:	7cfb      	ldrb	r3, [r7, #19]
    f454:	4611      	mov	r1, r2
    f456:	4618      	mov	r0, r3
    f458:	4b2a      	ldr	r3, [pc, #168]	; (f504 <_usb_d_dev_ep_deinit+0xdc>)
    f45a:	4798      	blx	r3
    f45c:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    f45e:	7cfb      	ldrb	r3, [r7, #19]
    f460:	2b04      	cmp	r3, #4
    f462:	d84a      	bhi.n	f4fa <_usb_d_dev_ep_deinit+0xd2>
    f464:	68fb      	ldr	r3, [r7, #12]
    f466:	7c9b      	ldrb	r3, [r3, #18]
    f468:	2bff      	cmp	r3, #255	; 0xff
    f46a:	d046      	beq.n	f4fa <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    f46c:	7cbb      	ldrb	r3, [r7, #18]
    f46e:	2203      	movs	r2, #3
    f470:	4619      	mov	r1, r3
    f472:	68f8      	ldr	r0, [r7, #12]
    f474:	4b24      	ldr	r3, [pc, #144]	; (f508 <_usb_d_dev_ep_deinit+0xe0>)
    f476:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    f478:	68fb      	ldr	r3, [r7, #12]
    f47a:	7cdb      	ldrb	r3, [r3, #19]
    f47c:	f003 0307 	and.w	r3, r3, #7
    f480:	b2db      	uxtb	r3, r3
    f482:	2b01      	cmp	r3, #1
    f484:	d107      	bne.n	f496 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    f486:	79fb      	ldrb	r3, [r7, #7]
    f488:	697a      	ldr	r2, [r7, #20]
    f48a:	3308      	adds	r3, #8
    f48c:	015b      	lsls	r3, r3, #5
    f48e:	4413      	add	r3, r2
    f490:	2200      	movs	r2, #0
    f492:	701a      	strb	r2, [r3, #0]
    f494:	e02a      	b.n	f4ec <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    f496:	f997 3007 	ldrsb.w	r3, [r7, #7]
    f49a:	2b00      	cmp	r3, #0
    f49c:	da15      	bge.n	f4ca <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    f49e:	79fb      	ldrb	r3, [r7, #7]
    f4a0:	f003 030f 	and.w	r3, r3, #15
    f4a4:	79fa      	ldrb	r2, [r7, #7]
    f4a6:	f002 020f 	and.w	r2, r2, #15
    f4aa:	6979      	ldr	r1, [r7, #20]
    f4ac:	3208      	adds	r2, #8
    f4ae:	0152      	lsls	r2, r2, #5
    f4b0:	440a      	add	r2, r1
    f4b2:	7812      	ldrb	r2, [r2, #0]
    f4b4:	b2d2      	uxtb	r2, r2
    f4b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    f4ba:	b2d1      	uxtb	r1, r2
    f4bc:	697a      	ldr	r2, [r7, #20]
    f4be:	3308      	adds	r3, #8
    f4c0:	015b      	lsls	r3, r3, #5
    f4c2:	4413      	add	r3, r2
    f4c4:	460a      	mov	r2, r1
    f4c6:	701a      	strb	r2, [r3, #0]
    f4c8:	e010      	b.n	f4ec <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    f4ca:	79fb      	ldrb	r3, [r7, #7]
    f4cc:	79fa      	ldrb	r2, [r7, #7]
    f4ce:	6979      	ldr	r1, [r7, #20]
    f4d0:	3208      	adds	r2, #8
    f4d2:	0152      	lsls	r2, r2, #5
    f4d4:	440a      	add	r2, r1
    f4d6:	7812      	ldrb	r2, [r2, #0]
    f4d8:	b2d2      	uxtb	r2, r2
    f4da:	f022 0207 	bic.w	r2, r2, #7
    f4de:	b2d1      	uxtb	r1, r2
    f4e0:	697a      	ldr	r2, [r7, #20]
    f4e2:	3308      	adds	r3, #8
    f4e4:	015b      	lsls	r3, r3, #5
    f4e6:	4413      	add	r3, r2
    f4e8:	460a      	mov	r2, r1
    f4ea:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    f4ec:	68fb      	ldr	r3, [r7, #12]
    f4ee:	2200      	movs	r2, #0
    f4f0:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    f4f2:	68fb      	ldr	r3, [r7, #12]
    f4f4:	22ff      	movs	r2, #255	; 0xff
    f4f6:	749a      	strb	r2, [r3, #18]
    f4f8:	e000      	b.n	f4fc <_usb_d_dev_ep_deinit+0xd4>
		return;
    f4fa:	bf00      	nop
}
    f4fc:	3718      	adds	r7, #24
    f4fe:	46bd      	mov	sp, r7
    f500:	bd80      	pop	{r7, pc}
    f502:	bf00      	nop
    f504:	0000e325 	.word	0x0000e325
    f508:	0000f95d 	.word	0x0000f95d

0000f50c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    f50c:	b5b0      	push	{r4, r5, r7, lr}
    f50e:	b088      	sub	sp, #32
    f510:	af00      	add	r7, sp, #0
    f512:	4603      	mov	r3, r0
    f514:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    f516:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f51a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    f51c:	79fb      	ldrb	r3, [r7, #7]
    f51e:	f003 030f 	and.w	r3, r3, #15
    f522:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    f524:	79fb      	ldrb	r3, [r7, #7]
    f526:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f52a:	2b00      	cmp	r3, #0
    f52c:	bf14      	ite	ne
    f52e:	2301      	movne	r3, #1
    f530:	2300      	moveq	r3, #0
    f532:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    f534:	7eba      	ldrb	r2, [r7, #26]
    f536:	7efb      	ldrb	r3, [r7, #27]
    f538:	4611      	mov	r1, r2
    f53a:	4618      	mov	r0, r3
    f53c:	4b70      	ldr	r3, [pc, #448]	; (f700 <_usb_d_dev_ep_enable+0x1f4>)
    f53e:	4798      	blx	r3
    f540:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    f542:	7efb      	ldrb	r3, [r7, #27]
    f544:	4619      	mov	r1, r3
    f546:	69f8      	ldr	r0, [r7, #28]
    f548:	4b6e      	ldr	r3, [pc, #440]	; (f704 <_usb_d_dev_ep_enable+0x1f8>)
    f54a:	4798      	blx	r3
    f54c:	4603      	mov	r3, r0
    f54e:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    f550:	7efb      	ldrb	r3, [r7, #27]
    f552:	2b04      	cmp	r3, #4
    f554:	d803      	bhi.n	f55e <_usb_d_dev_ep_enable+0x52>
    f556:	697b      	ldr	r3, [r7, #20]
    f558:	7c9b      	ldrb	r3, [r3, #18]
    f55a:	2bff      	cmp	r3, #255	; 0xff
    f55c:	d102      	bne.n	f564 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    f55e:	f06f 0311 	mvn.w	r3, #17
    f562:	e0c8      	b.n	f6f6 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    f564:	7efb      	ldrb	r3, [r7, #27]
    f566:	015b      	lsls	r3, r3, #5
    f568:	4a67      	ldr	r2, [pc, #412]	; (f708 <_usb_d_dev_ep_enable+0x1fc>)
    f56a:	4413      	add	r3, r2
    f56c:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    f56e:	697b      	ldr	r3, [r7, #20]
    f570:	7cdb      	ldrb	r3, [r3, #19]
    f572:	f003 0307 	and.w	r3, r3, #7
    f576:	b2db      	uxtb	r3, r3
    f578:	2b01      	cmp	r3, #1
    f57a:	d14b      	bne.n	f614 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    f57c:	7cfb      	ldrb	r3, [r7, #19]
    f57e:	f003 0377 	and.w	r3, r3, #119	; 0x77
    f582:	2b00      	cmp	r3, #0
    f584:	d002      	beq.n	f58c <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    f586:	f06f 0313 	mvn.w	r3, #19
    f58a:	e0b4      	b.n	f6f6 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    f58c:	7efb      	ldrb	r3, [r7, #27]
    f58e:	2211      	movs	r2, #17
    f590:	4619      	mov	r1, r3
    f592:	69f8      	ldr	r0, [r7, #28]
    f594:	4b5d      	ldr	r3, [pc, #372]	; (f70c <_usb_d_dev_ep_enable+0x200>)
    f596:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f598:	697b      	ldr	r3, [r7, #20]
    f59a:	8a1b      	ldrh	r3, [r3, #16]
    f59c:	039b      	lsls	r3, r3, #14
    f59e:	4c5c      	ldr	r4, [pc, #368]	; (f710 <_usb_d_dev_ep_enable+0x204>)
    f5a0:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f5a2:	697b      	ldr	r3, [r7, #20]
    f5a4:	8a1b      	ldrh	r3, [r3, #16]
    f5a6:	4618      	mov	r0, r3
    f5a8:	4b5a      	ldr	r3, [pc, #360]	; (f714 <_usb_d_dev_ep_enable+0x208>)
    f5aa:	4798      	blx	r3
    f5ac:	4603      	mov	r3, r0
    f5ae:	071b      	lsls	r3, r3, #28
    f5b0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f5b4:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f5b8:	68fb      	ldr	r3, [r7, #12]
    f5ba:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    f5bc:	68fb      	ldr	r3, [r7, #12]
    f5be:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f5c2:	697b      	ldr	r3, [r7, #20]
    f5c4:	8a1b      	ldrh	r3, [r3, #16]
    f5c6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    f5ca:	697b      	ldr	r3, [r7, #20]
    f5cc:	8a1b      	ldrh	r3, [r3, #16]
    f5ce:	4618      	mov	r0, r3
    f5d0:	4b50      	ldr	r3, [pc, #320]	; (f714 <_usb_d_dev_ep_enable+0x208>)
    f5d2:	4798      	blx	r3
    f5d4:	4603      	mov	r3, r0
    f5d6:	071b      	lsls	r3, r3, #28
    f5d8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f5dc:	432b      	orrs	r3, r5
    f5de:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    f5e0:	7efb      	ldrb	r3, [r7, #27]
    f5e2:	2200      	movs	r2, #0
    f5e4:	2100      	movs	r1, #0
    f5e6:	4618      	mov	r0, r3
    f5e8:	4b4b      	ldr	r3, [pc, #300]	; (f718 <_usb_d_dev_ep_enable+0x20c>)
    f5ea:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    f5ec:	7efb      	ldrb	r3, [r7, #27]
    f5ee:	2200      	movs	r2, #0
    f5f0:	2101      	movs	r1, #1
    f5f2:	4618      	mov	r0, r3
    f5f4:	4b49      	ldr	r3, [pc, #292]	; (f71c <_usb_d_dev_ep_enable+0x210>)
    f5f6:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    f5f8:	7efb      	ldrb	r3, [r7, #27]
    f5fa:	2100      	movs	r1, #0
    f5fc:	4618      	mov	r0, r3
    f5fe:	4b48      	ldr	r3, [pc, #288]	; (f720 <_usb_d_dev_ep_enable+0x214>)
    f600:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    f602:	7efb      	ldrb	r3, [r7, #27]
    f604:	2101      	movs	r1, #1
    f606:	4618      	mov	r0, r3
    f608:	4b45      	ldr	r3, [pc, #276]	; (f720 <_usb_d_dev_ep_enable+0x214>)
    f60a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    f60c:	6978      	ldr	r0, [r7, #20]
    f60e:	4b45      	ldr	r3, [pc, #276]	; (f724 <_usb_d_dev_ep_enable+0x218>)
    f610:	4798      	blx	r3
    f612:	e06f      	b.n	f6f4 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    f614:	7ebb      	ldrb	r3, [r7, #26]
    f616:	2b00      	cmp	r3, #0
    f618:	d038      	beq.n	f68c <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    f61a:	7cfb      	ldrb	r3, [r7, #19]
    f61c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    f620:	2b00      	cmp	r3, #0
    f622:	d002      	beq.n	f62a <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    f624:	f06f 0313 	mvn.w	r3, #19
    f628:	e065      	b.n	f6f6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    f62a:	697b      	ldr	r3, [r7, #20]
    f62c:	7cdb      	ldrb	r3, [r3, #19]
    f62e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f632:	b2db      	uxtb	r3, r3
    f634:	011b      	lsls	r3, r3, #4
    f636:	b2db      	uxtb	r3, r3
    f638:	f003 0370 	and.w	r3, r3, #112	; 0x70
    f63c:	b2da      	uxtb	r2, r3
    f63e:	7cfb      	ldrb	r3, [r7, #19]
    f640:	4313      	orrs	r3, r2
    f642:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    f644:	7cfa      	ldrb	r2, [r7, #19]
    f646:	7efb      	ldrb	r3, [r7, #27]
    f648:	4619      	mov	r1, r3
    f64a:	69f8      	ldr	r0, [r7, #28]
    f64c:	4b2f      	ldr	r3, [pc, #188]	; (f70c <_usb_d_dev_ep_enable+0x200>)
    f64e:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    f650:	68fb      	ldr	r3, [r7, #12]
    f652:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f656:	697b      	ldr	r3, [r7, #20]
    f658:	8a1b      	ldrh	r3, [r3, #16]
    f65a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    f65e:	697b      	ldr	r3, [r7, #20]
    f660:	8a1b      	ldrh	r3, [r3, #16]
    f662:	4618      	mov	r0, r3
    f664:	4b2b      	ldr	r3, [pc, #172]	; (f714 <_usb_d_dev_ep_enable+0x208>)
    f666:	4798      	blx	r3
    f668:	4603      	mov	r3, r0
    f66a:	071b      	lsls	r3, r3, #28
    f66c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f670:	432b      	orrs	r3, r5
    f672:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    f674:	7efb      	ldrb	r3, [r7, #27]
    f676:	2200      	movs	r2, #0
    f678:	2101      	movs	r1, #1
    f67a:	4618      	mov	r0, r3
    f67c:	4b27      	ldr	r3, [pc, #156]	; (f71c <_usb_d_dev_ep_enable+0x210>)
    f67e:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    f680:	7efb      	ldrb	r3, [r7, #27]
    f682:	2101      	movs	r1, #1
    f684:	4618      	mov	r0, r3
    f686:	4b26      	ldr	r3, [pc, #152]	; (f720 <_usb_d_dev_ep_enable+0x214>)
    f688:	4798      	blx	r3
    f68a:	e033      	b.n	f6f4 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    f68c:	7cfb      	ldrb	r3, [r7, #19]
    f68e:	f003 0307 	and.w	r3, r3, #7
    f692:	2b00      	cmp	r3, #0
    f694:	d002      	beq.n	f69c <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    f696:	f06f 0313 	mvn.w	r3, #19
    f69a:	e02c      	b.n	f6f6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    f69c:	697b      	ldr	r3, [r7, #20]
    f69e:	7cdb      	ldrb	r3, [r3, #19]
    f6a0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f6a4:	b2db      	uxtb	r3, r3
    f6a6:	461a      	mov	r2, r3
    f6a8:	7cfb      	ldrb	r3, [r7, #19]
    f6aa:	4313      	orrs	r3, r2
    f6ac:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    f6ae:	7cfa      	ldrb	r2, [r7, #19]
    f6b0:	7efb      	ldrb	r3, [r7, #27]
    f6b2:	4619      	mov	r1, r3
    f6b4:	69f8      	ldr	r0, [r7, #28]
    f6b6:	4b15      	ldr	r3, [pc, #84]	; (f70c <_usb_d_dev_ep_enable+0x200>)
    f6b8:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f6ba:	697b      	ldr	r3, [r7, #20]
    f6bc:	8a1b      	ldrh	r3, [r3, #16]
    f6be:	039b      	lsls	r3, r3, #14
    f6c0:	4c13      	ldr	r4, [pc, #76]	; (f710 <_usb_d_dev_ep_enable+0x204>)
    f6c2:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f6c4:	697b      	ldr	r3, [r7, #20]
    f6c6:	8a1b      	ldrh	r3, [r3, #16]
    f6c8:	4618      	mov	r0, r3
    f6ca:	4b12      	ldr	r3, [pc, #72]	; (f714 <_usb_d_dev_ep_enable+0x208>)
    f6cc:	4798      	blx	r3
    f6ce:	4603      	mov	r3, r0
    f6d0:	071b      	lsls	r3, r3, #28
    f6d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f6d6:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f6da:	68fb      	ldr	r3, [r7, #12]
    f6dc:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    f6de:	7efb      	ldrb	r3, [r7, #27]
    f6e0:	2200      	movs	r2, #0
    f6e2:	2100      	movs	r1, #0
    f6e4:	4618      	mov	r0, r3
    f6e6:	4b0c      	ldr	r3, [pc, #48]	; (f718 <_usb_d_dev_ep_enable+0x20c>)
    f6e8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    f6ea:	7efb      	ldrb	r3, [r7, #27]
    f6ec:	2100      	movs	r1, #0
    f6ee:	4618      	mov	r0, r3
    f6f0:	4b0b      	ldr	r3, [pc, #44]	; (f720 <_usb_d_dev_ep_enable+0x214>)
    f6f2:	4798      	blx	r3
	}

	return USB_OK;
    f6f4:	2300      	movs	r3, #0
}
    f6f6:	4618      	mov	r0, r3
    f6f8:	3720      	adds	r7, #32
    f6fa:	46bd      	mov	sp, r7
    f6fc:	bdb0      	pop	{r4, r5, r7, pc}
    f6fe:	bf00      	nop
    f700:	0000e325 	.word	0x0000e325
    f704:	0000d9ab 	.word	0x0000d9ab
    f708:	20008aa8 	.word	0x20008aa8
    f70c:	0000d981 	.word	0x0000d981
    f710:	0fffc000 	.word	0x0fffc000
    f714:	0000e2c1 	.word	0x0000e2c1
    f718:	0000e269 	.word	0x0000e269
    f71c:	0000e211 	.word	0x0000e211
    f720:	0000e1d9 	.word	0x0000e1d9
    f724:	0000f27d 	.word	0x0000f27d

0000f728 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    f728:	b580      	push	{r7, lr}
    f72a:	b084      	sub	sp, #16
    f72c:	af00      	add	r7, sp, #0
    f72e:	6078      	str	r0, [r7, #4]
    f730:	460b      	mov	r3, r1
    f732:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f734:	687b      	ldr	r3, [r7, #4]
    f736:	7c9b      	ldrb	r3, [r3, #18]
    f738:	f003 030f 	and.w	r3, r3, #15
    f73c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    f73e:	78fa      	ldrb	r2, [r7, #3]
    f740:	7bfb      	ldrb	r3, [r7, #15]
    f742:	4611      	mov	r1, r2
    f744:	4618      	mov	r0, r3
    f746:	4b03      	ldr	r3, [pc, #12]	; (f754 <_usb_d_dev_ep_stall_get+0x2c>)
    f748:	4798      	blx	r3
    f74a:	4603      	mov	r3, r0
}
    f74c:	4618      	mov	r0, r3
    f74e:	3710      	adds	r7, #16
    f750:	46bd      	mov	sp, r7
    f752:	bd80      	pop	{r7, pc}
    f754:	0000de19 	.word	0x0000de19

0000f758 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    f758:	b580      	push	{r7, lr}
    f75a:	b084      	sub	sp, #16
    f75c:	af00      	add	r7, sp, #0
    f75e:	6078      	str	r0, [r7, #4]
    f760:	460b      	mov	r3, r1
    f762:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f764:	687b      	ldr	r3, [r7, #4]
    f766:	7c9b      	ldrb	r3, [r3, #18]
    f768:	f003 030f 	and.w	r3, r3, #15
    f76c:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    f76e:	78f9      	ldrb	r1, [r7, #3]
    f770:	7bfb      	ldrb	r3, [r7, #15]
    f772:	2201      	movs	r2, #1
    f774:	4618      	mov	r0, r3
    f776:	4b0a      	ldr	r3, [pc, #40]	; (f7a0 <_usb_d_dev_ep_stall_set+0x48>)
    f778:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    f77a:	78fb      	ldrb	r3, [r7, #3]
    f77c:	2220      	movs	r2, #32
    f77e:	409a      	lsls	r2, r3
    f780:	7bfb      	ldrb	r3, [r7, #15]
    f782:	4611      	mov	r1, r2
    f784:	4618      	mov	r0, r3
    f786:	4b07      	ldr	r3, [pc, #28]	; (f7a4 <_usb_d_dev_ep_stall_set+0x4c>)
    f788:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    f78a:	687a      	ldr	r2, [r7, #4]
    f78c:	7cd3      	ldrb	r3, [r2, #19]
    f78e:	f043 0308 	orr.w	r3, r3, #8
    f792:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    f794:	2300      	movs	r3, #0
}
    f796:	4618      	mov	r0, r3
    f798:	3710      	adds	r7, #16
    f79a:	46bd      	mov	sp, r7
    f79c:	bd80      	pop	{r7, pc}
    f79e:	bf00      	nop
    f7a0:	0000ddc1 	.word	0x0000ddc1
    f7a4:	0000dd41 	.word	0x0000dd41

0000f7a8 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    f7a8:	b580      	push	{r7, lr}
    f7aa:	b084      	sub	sp, #16
    f7ac:	af00      	add	r7, sp, #0
    f7ae:	6078      	str	r0, [r7, #4]
    f7b0:	460b      	mov	r3, r1
    f7b2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    f7b4:	687b      	ldr	r3, [r7, #4]
    f7b6:	7c9b      	ldrb	r3, [r3, #18]
    f7b8:	f003 030f 	and.w	r3, r3, #15
    f7bc:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    f7be:	78fa      	ldrb	r2, [r7, #3]
    f7c0:	7bfb      	ldrb	r3, [r7, #15]
    f7c2:	4611      	mov	r1, r2
    f7c4:	4618      	mov	r0, r3
    f7c6:	4b28      	ldr	r3, [pc, #160]	; (f868 <_usb_d_dev_ep_stall_clr+0xc0>)
    f7c8:	4798      	blx	r3
    f7ca:	4603      	mov	r3, r0
    f7cc:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    f7ce:	7bbb      	ldrb	r3, [r7, #14]
    f7d0:	f083 0301 	eor.w	r3, r3, #1
    f7d4:	b2db      	uxtb	r3, r3
    f7d6:	2b00      	cmp	r3, #0
    f7d8:	d001      	beq.n	f7de <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    f7da:	2300      	movs	r3, #0
    f7dc:	e040      	b.n	f860 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    f7de:	78f9      	ldrb	r1, [r7, #3]
    f7e0:	7bfb      	ldrb	r3, [r7, #15]
    f7e2:	2200      	movs	r2, #0
    f7e4:	4618      	mov	r0, r3
    f7e6:	4b21      	ldr	r3, [pc, #132]	; (f86c <_usb_d_dev_ep_stall_clr+0xc4>)
    f7e8:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    f7ea:	78fb      	ldrb	r3, [r7, #3]
    f7ec:	2220      	movs	r2, #32
    f7ee:	409a      	lsls	r2, r3
    f7f0:	7bfb      	ldrb	r3, [r7, #15]
    f7f2:	4611      	mov	r1, r2
    f7f4:	4618      	mov	r0, r3
    f7f6:	4b1e      	ldr	r3, [pc, #120]	; (f870 <_usb_d_dev_ep_stall_clr+0xc8>)
    f7f8:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    f7fa:	78fa      	ldrb	r2, [r7, #3]
    f7fc:	7bfb      	ldrb	r3, [r7, #15]
    f7fe:	4611      	mov	r1, r2
    f800:	4618      	mov	r0, r3
    f802:	4b1c      	ldr	r3, [pc, #112]	; (f874 <_usb_d_dev_ep_stall_clr+0xcc>)
    f804:	4798      	blx	r3
    f806:	4603      	mov	r3, r0
    f808:	2b00      	cmp	r3, #0
    f80a:	d00b      	beq.n	f824 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    f80c:	78fa      	ldrb	r2, [r7, #3]
    f80e:	7bfb      	ldrb	r3, [r7, #15]
    f810:	4611      	mov	r1, r2
    f812:	4618      	mov	r0, r3
    f814:	4b18      	ldr	r3, [pc, #96]	; (f878 <_usb_d_dev_ep_stall_clr+0xd0>)
    f816:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    f818:	78f9      	ldrb	r1, [r7, #3]
    f81a:	7bfb      	ldrb	r3, [r7, #15]
    f81c:	2200      	movs	r2, #0
    f81e:	4618      	mov	r0, r3
    f820:	4b16      	ldr	r3, [pc, #88]	; (f87c <_usb_d_dev_ep_stall_clr+0xd4>)
    f822:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    f824:	687b      	ldr	r3, [r7, #4]
    f826:	7cdb      	ldrb	r3, [r3, #19]
    f828:	f003 0307 	and.w	r3, r3, #7
    f82c:	b2db      	uxtb	r3, r3
    f82e:	2b01      	cmp	r3, #1
    f830:	d110      	bne.n	f854 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    f832:	7bfb      	ldrb	r3, [r7, #15]
    f834:	4619      	mov	r1, r3
    f836:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f83a:	4b11      	ldr	r3, [pc, #68]	; (f880 <_usb_d_dev_ep_stall_clr+0xd8>)
    f83c:	4798      	blx	r3
    f83e:	4603      	mov	r3, r0
    f840:	f003 0330 	and.w	r3, r3, #48	; 0x30
    f844:	2b00      	cmp	r3, #0
    f846:	d10a      	bne.n	f85e <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    f848:	687a      	ldr	r2, [r7, #4]
    f84a:	7cd3      	ldrb	r3, [r2, #19]
    f84c:	f36f 03c3 	bfc	r3, #3, #1
    f850:	74d3      	strb	r3, [r2, #19]
    f852:	e004      	b.n	f85e <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    f854:	687a      	ldr	r2, [r7, #4]
    f856:	7cd3      	ldrb	r3, [r2, #19]
    f858:	f36f 03c3 	bfc	r3, #3, #1
    f85c:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    f85e:	2300      	movs	r3, #0
}
    f860:	4618      	mov	r0, r3
    f862:	3710      	adds	r7, #16
    f864:	46bd      	mov	sp, r7
    f866:	bd80      	pop	{r7, pc}
    f868:	0000de19 	.word	0x0000de19
    f86c:	0000ddc1 	.word	0x0000ddc1
    f870:	0000dd69 	.word	0x0000dd69
    f874:	0000de5d 	.word	0x0000de5d
    f878:	0000dea1 	.word	0x0000dea1
    f87c:	0000df8d 	.word	0x0000df8d
    f880:	0000d849 	.word	0x0000d849

0000f884 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    f884:	b580      	push	{r7, lr}
    f886:	b086      	sub	sp, #24
    f888:	af00      	add	r7, sp, #0
    f88a:	4603      	mov	r3, r0
    f88c:	460a      	mov	r2, r1
    f88e:	71fb      	strb	r3, [r7, #7]
    f890:	4613      	mov	r3, r2
    f892:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    f894:	79fb      	ldrb	r3, [r7, #7]
    f896:	f003 030f 	and.w	r3, r3, #15
    f89a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    f89c:	79fb      	ldrb	r3, [r7, #7]
    f89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f8a2:	2b00      	cmp	r3, #0
    f8a4:	bf14      	ite	ne
    f8a6:	2301      	movne	r3, #1
    f8a8:	2300      	moveq	r3, #0
    f8aa:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f8ac:	7cba      	ldrb	r2, [r7, #18]
    f8ae:	7cfb      	ldrb	r3, [r7, #19]
    f8b0:	4611      	mov	r1, r2
    f8b2:	4618      	mov	r0, r3
    f8b4:	4b13      	ldr	r3, [pc, #76]	; (f904 <_usb_d_dev_ep_stall+0x80>)
    f8b6:	4798      	blx	r3
    f8b8:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    f8ba:	7cfb      	ldrb	r3, [r7, #19]
    f8bc:	2b04      	cmp	r3, #4
    f8be:	d902      	bls.n	f8c6 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    f8c0:	f06f 0311 	mvn.w	r3, #17
    f8c4:	e01a      	b.n	f8fc <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    f8c6:	79bb      	ldrb	r3, [r7, #6]
    f8c8:	2b01      	cmp	r3, #1
    f8ca:	d106      	bne.n	f8da <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    f8cc:	7cbb      	ldrb	r3, [r7, #18]
    f8ce:	4619      	mov	r1, r3
    f8d0:	68f8      	ldr	r0, [r7, #12]
    f8d2:	4b0d      	ldr	r3, [pc, #52]	; (f908 <_usb_d_dev_ep_stall+0x84>)
    f8d4:	4798      	blx	r3
    f8d6:	6178      	str	r0, [r7, #20]
    f8d8:	e00f      	b.n	f8fa <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    f8da:	79bb      	ldrb	r3, [r7, #6]
    f8dc:	2b00      	cmp	r3, #0
    f8de:	d106      	bne.n	f8ee <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    f8e0:	7cbb      	ldrb	r3, [r7, #18]
    f8e2:	4619      	mov	r1, r3
    f8e4:	68f8      	ldr	r0, [r7, #12]
    f8e6:	4b09      	ldr	r3, [pc, #36]	; (f90c <_usb_d_dev_ep_stall+0x88>)
    f8e8:	4798      	blx	r3
    f8ea:	6178      	str	r0, [r7, #20]
    f8ec:	e005      	b.n	f8fa <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    f8ee:	7cbb      	ldrb	r3, [r7, #18]
    f8f0:	4619      	mov	r1, r3
    f8f2:	68f8      	ldr	r0, [r7, #12]
    f8f4:	4b06      	ldr	r3, [pc, #24]	; (f910 <_usb_d_dev_ep_stall+0x8c>)
    f8f6:	4798      	blx	r3
    f8f8:	6178      	str	r0, [r7, #20]
	}
	return rc;
    f8fa:	697b      	ldr	r3, [r7, #20]
}
    f8fc:	4618      	mov	r0, r3
    f8fe:	3718      	adds	r7, #24
    f900:	46bd      	mov	sp, r7
    f902:	bd80      	pop	{r7, pc}
    f904:	0000e325 	.word	0x0000e325
    f908:	0000f759 	.word	0x0000f759
    f90c:	0000f7a9 	.word	0x0000f7a9
    f910:	0000f729 	.word	0x0000f729

0000f914 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    f914:	b580      	push	{r7, lr}
    f916:	b082      	sub	sp, #8
    f918:	af00      	add	r7, sp, #0
    f91a:	6078      	str	r0, [r7, #4]
    f91c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    f91e:	687b      	ldr	r3, [r7, #4]
    f920:	7c9b      	ldrb	r3, [r3, #18]
    f922:	2bff      	cmp	r3, #255	; 0xff
    f924:	d014      	beq.n	f950 <_usb_d_dev_trans_done+0x3c>
    f926:	687b      	ldr	r3, [r7, #4]
    f928:	7cdb      	ldrb	r3, [r3, #19]
    f92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f92e:	b2db      	uxtb	r3, r3
    f930:	2b00      	cmp	r3, #0
    f932:	d00d      	beq.n	f950 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    f934:	687a      	ldr	r2, [r7, #4]
    f936:	7cd3      	ldrb	r3, [r2, #19]
    f938:	f36f 1386 	bfc	r3, #6, #1
    f93c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    f93e:	4b06      	ldr	r3, [pc, #24]	; (f958 <_usb_d_dev_trans_done+0x44>)
    f940:	691b      	ldr	r3, [r3, #16]
    f942:	687a      	ldr	r2, [r7, #4]
    f944:	7c90      	ldrb	r0, [r2, #18]
    f946:	687a      	ldr	r2, [r7, #4]
    f948:	6892      	ldr	r2, [r2, #8]
    f94a:	6839      	ldr	r1, [r7, #0]
    f94c:	4798      	blx	r3
    f94e:	e000      	b.n	f952 <_usb_d_dev_trans_done+0x3e>
		return;
    f950:	bf00      	nop
}
    f952:	3708      	adds	r7, #8
    f954:	46bd      	mov	sp, r7
    f956:	bd80      	pop	{r7, pc}
    f958:	200089e0 	.word	0x200089e0

0000f95c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    f95c:	b580      	push	{r7, lr}
    f95e:	b086      	sub	sp, #24
    f960:	af00      	add	r7, sp, #0
    f962:	60f8      	str	r0, [r7, #12]
    f964:	460b      	mov	r3, r1
    f966:	607a      	str	r2, [r7, #4]
    f968:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f96a:	68fb      	ldr	r3, [r7, #12]
    f96c:	7c9b      	ldrb	r3, [r3, #18]
    f96e:	f003 030f 	and.w	r3, r3, #15
    f972:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    f974:	4b1f      	ldr	r3, [pc, #124]	; (f9f4 <_usb_d_dev_trans_stop+0x98>)
    f976:	881b      	ldrh	r3, [r3, #0]
    f978:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    f97a:	68fb      	ldr	r3, [r7, #12]
    f97c:	7c9b      	ldrb	r3, [r3, #18]
    f97e:	2bff      	cmp	r3, #255	; 0xff
    f980:	d033      	beq.n	f9ea <_usb_d_dev_trans_stop+0x8e>
    f982:	68fb      	ldr	r3, [r7, #12]
    f984:	7cdb      	ldrb	r3, [r3, #19]
    f986:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f98a:	b2db      	uxtb	r3, r3
    f98c:	2b00      	cmp	r3, #0
    f98e:	d02c      	beq.n	f9ea <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    f990:	7afb      	ldrb	r3, [r7, #11]
    f992:	2b00      	cmp	r3, #0
    f994:	d006      	beq.n	f9a4 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    f996:	7dfb      	ldrb	r3, [r7, #23]
    f998:	2200      	movs	r2, #0
    f99a:	2101      	movs	r1, #1
    f99c:	4618      	mov	r0, r3
    f99e:	4b16      	ldr	r3, [pc, #88]	; (f9f8 <_usb_d_dev_trans_stop+0x9c>)
    f9a0:	4798      	blx	r3
    f9a2:	e005      	b.n	f9b0 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    f9a4:	7dfb      	ldrb	r3, [r7, #23]
    f9a6:	2200      	movs	r2, #0
    f9a8:	2100      	movs	r1, #0
    f9aa:	4618      	mov	r0, r3
    f9ac:	4b13      	ldr	r3, [pc, #76]	; (f9fc <_usb_d_dev_trans_stop+0xa0>)
    f9ae:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    f9b0:	7afb      	ldrb	r3, [r7, #11]
    f9b2:	f107 0218 	add.w	r2, r7, #24
    f9b6:	4413      	add	r3, r2
    f9b8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    f9bc:	461a      	mov	r2, r3
    f9be:	7dfb      	ldrb	r3, [r7, #23]
    f9c0:	4611      	mov	r1, r2
    f9c2:	4618      	mov	r0, r3
    f9c4:	4b0e      	ldr	r3, [pc, #56]	; (fa00 <_usb_d_dev_trans_stop+0xa4>)
    f9c6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    f9c8:	7afb      	ldrb	r3, [r7, #11]
    f9ca:	f107 0218 	add.w	r2, r7, #24
    f9ce:	4413      	add	r3, r2
    f9d0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    f9d4:	461a      	mov	r2, r3
    f9d6:	7dfb      	ldrb	r3, [r7, #23]
    f9d8:	4611      	mov	r1, r2
    f9da:	4618      	mov	r0, r3
    f9dc:	4b09      	ldr	r3, [pc, #36]	; (fa04 <_usb_d_dev_trans_stop+0xa8>)
    f9de:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    f9e0:	6879      	ldr	r1, [r7, #4]
    f9e2:	68f8      	ldr	r0, [r7, #12]
    f9e4:	4b08      	ldr	r3, [pc, #32]	; (fa08 <_usb_d_dev_trans_stop+0xac>)
    f9e6:	4798      	blx	r3
    f9e8:	e000      	b.n	f9ec <_usb_d_dev_trans_stop+0x90>
		return;
    f9ea:	bf00      	nop
}
    f9ec:	3718      	adds	r7, #24
    f9ee:	46bd      	mov	sp, r7
    f9f0:	bd80      	pop	{r7, pc}
    f9f2:	bf00      	nop
    f9f4:	0001f854 	.word	0x0001f854
    f9f8:	0000e211 	.word	0x0000e211
    f9fc:	0000e269 	.word	0x0000e269
    fa00:	0000dd19 	.word	0x0000dd19
    fa04:	0000dd69 	.word	0x0000dd69
    fa08:	0000f915 	.word	0x0000f915

0000fa0c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    fa0c:	b580      	push	{r7, lr}
    fa0e:	b086      	sub	sp, #24
    fa10:	af00      	add	r7, sp, #0
    fa12:	4603      	mov	r3, r0
    fa14:	6039      	str	r1, [r7, #0]
    fa16:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    fa18:	79fb      	ldrb	r3, [r7, #7]
    fa1a:	f003 030f 	and.w	r3, r3, #15
    fa1e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    fa20:	7dfb      	ldrb	r3, [r7, #23]
    fa22:	015b      	lsls	r3, r3, #5
    fa24:	4a1e      	ldr	r2, [pc, #120]	; (faa0 <_usb_d_dev_ep_read_req+0x94>)
    fa26:	4413      	add	r3, r2
    fa28:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    fa2a:	693b      	ldr	r3, [r7, #16]
    fa2c:	681b      	ldr	r3, [r3, #0]
    fa2e:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    fa30:	693b      	ldr	r3, [r7, #16]
    fa32:	685b      	ldr	r3, [r3, #4]
    fa34:	f3c3 030d 	ubfx	r3, r3, #0, #14
    fa38:	b29b      	uxth	r3, r3
    fa3a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    fa3c:	7dfb      	ldrb	r3, [r7, #23]
    fa3e:	2b04      	cmp	r3, #4
    fa40:	d802      	bhi.n	fa48 <_usb_d_dev_ep_read_req+0x3c>
    fa42:	683b      	ldr	r3, [r7, #0]
    fa44:	2b00      	cmp	r3, #0
    fa46:	d102      	bne.n	fa4e <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    fa48:	f06f 0311 	mvn.w	r3, #17
    fa4c:	e023      	b.n	fa96 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    fa4e:	7dfb      	ldrb	r3, [r7, #23]
    fa50:	4618      	mov	r0, r3
    fa52:	4b14      	ldr	r3, [pc, #80]	; (faa4 <_usb_d_dev_ep_read_req+0x98>)
    fa54:	4798      	blx	r3
    fa56:	4603      	mov	r3, r0
    fa58:	f083 0301 	eor.w	r3, r3, #1
    fa5c:	b2db      	uxtb	r3, r3
    fa5e:	2b00      	cmp	r3, #0
    fa60:	d002      	beq.n	fa68 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    fa62:	f06f 0312 	mvn.w	r3, #18
    fa66:	e016      	b.n	fa96 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    fa68:	7dfb      	ldrb	r3, [r7, #23]
    fa6a:	4618      	mov	r0, r3
    fa6c:	4b0e      	ldr	r3, [pc, #56]	; (faa8 <_usb_d_dev_ep_read_req+0x9c>)
    fa6e:	4798      	blx	r3
    fa70:	4603      	mov	r3, r0
    fa72:	f083 0301 	eor.w	r3, r3, #1
    fa76:	b2db      	uxtb	r3, r3
    fa78:	2b00      	cmp	r3, #0
    fa7a:	d001      	beq.n	fa80 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    fa7c:	2300      	movs	r3, #0
    fa7e:	e00a      	b.n	fa96 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    fa80:	68fb      	ldr	r3, [r7, #12]
    fa82:	2208      	movs	r2, #8
    fa84:	4619      	mov	r1, r3
    fa86:	6838      	ldr	r0, [r7, #0]
    fa88:	4b08      	ldr	r3, [pc, #32]	; (faac <_usb_d_dev_ep_read_req+0xa0>)
    fa8a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    fa8c:	7dfb      	ldrb	r3, [r7, #23]
    fa8e:	4618      	mov	r0, r3
    fa90:	4b07      	ldr	r3, [pc, #28]	; (fab0 <_usb_d_dev_ep_read_req+0xa4>)
    fa92:	4798      	blx	r3

	return bytes;
    fa94:	897b      	ldrh	r3, [r7, #10]
}
    fa96:	4618      	mov	r0, r3
    fa98:	3718      	adds	r7, #24
    fa9a:	46bd      	mov	sp, r7
    fa9c:	bd80      	pop	{r7, pc}
    fa9e:	bf00      	nop
    faa0:	20008aa8 	.word	0x20008aa8
    faa4:	0000dd91 	.word	0x0000dd91
    faa8:	0000df3d 	.word	0x0000df3d
    faac:	0001af55 	.word	0x0001af55
    fab0:	0000df6d 	.word	0x0000df6d

0000fab4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    fab4:	b580      	push	{r7, lr}
    fab6:	b086      	sub	sp, #24
    fab8:	af00      	add	r7, sp, #0
    faba:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    fabc:	687b      	ldr	r3, [r7, #4]
    fabe:	7a1b      	ldrb	r3, [r3, #8]
    fac0:	f003 030f 	and.w	r3, r3, #15
    fac4:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    fac6:	687b      	ldr	r3, [r7, #4]
    fac8:	7a1b      	ldrb	r3, [r3, #8]
    faca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    face:	2b00      	cmp	r3, #0
    fad0:	bf14      	ite	ne
    fad2:	2301      	movne	r3, #1
    fad4:	2300      	moveq	r3, #0
    fad6:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    fad8:	7d7a      	ldrb	r2, [r7, #21]
    fada:	7dbb      	ldrb	r3, [r7, #22]
    fadc:	4611      	mov	r1, r2
    fade:	4618      	mov	r0, r3
    fae0:	4b5f      	ldr	r3, [pc, #380]	; (fc60 <_usb_d_dev_ep_trans+0x1ac>)
    fae2:	4798      	blx	r3
    fae4:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    fae6:	693b      	ldr	r3, [r7, #16]
    fae8:	8a1b      	ldrh	r3, [r3, #16]
    faea:	f240 32ff 	movw	r2, #1023	; 0x3ff
    faee:	4293      	cmp	r3, r2
    faf0:	d004      	beq.n	fafc <_usb_d_dev_ep_trans+0x48>
    faf2:	693b      	ldr	r3, [r7, #16]
    faf4:	8a1b      	ldrh	r3, [r3, #16]
    faf6:	3b01      	subs	r3, #1
    faf8:	b29b      	uxth	r3, r3
    fafa:	e001      	b.n	fb00 <_usb_d_dev_ep_trans+0x4c>
    fafc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    fb00:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    fb02:	687b      	ldr	r3, [r7, #4]
    fb04:	685a      	ldr	r2, [r3, #4]
    fb06:	89fb      	ldrh	r3, [r7, #14]
    fb08:	4013      	ands	r3, r2
    fb0a:	2b00      	cmp	r3, #0
    fb0c:	bf14      	ite	ne
    fb0e:	2301      	movne	r3, #1
    fb10:	2300      	moveq	r3, #0
    fb12:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    fb14:	2300      	movs	r3, #0
    fb16:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    fb18:	7dbb      	ldrb	r3, [r7, #22]
    fb1a:	2b04      	cmp	r3, #4
    fb1c:	d902      	bls.n	fb24 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    fb1e:	f06f 0311 	mvn.w	r3, #17
    fb22:	e098      	b.n	fc56 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    fb24:	687b      	ldr	r3, [r7, #4]
    fb26:	681b      	ldr	r3, [r3, #0]
    fb28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    fb2c:	d31a      	bcc.n	fb64 <_usb_d_dev_ep_trans+0xb0>
    fb2e:	687b      	ldr	r3, [r7, #4]
    fb30:	681b      	ldr	r3, [r3, #0]
    fb32:	461a      	mov	r2, r3
    fb34:	687b      	ldr	r3, [r7, #4]
    fb36:	685b      	ldr	r3, [r3, #4]
    fb38:	4413      	add	r3, r2
    fb3a:	4a4a      	ldr	r2, [pc, #296]	; (fc64 <_usb_d_dev_ep_trans+0x1b0>)
    fb3c:	4293      	cmp	r3, r2
    fb3e:	d811      	bhi.n	fb64 <_usb_d_dev_ep_trans+0xb0>
    fb40:	687b      	ldr	r3, [r7, #4]
    fb42:	681b      	ldr	r3, [r3, #0]
    fb44:	f003 0303 	and.w	r3, r3, #3
    fb48:	2b00      	cmp	r3, #0
    fb4a:	d10b      	bne.n	fb64 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    fb4c:	7d7b      	ldrb	r3, [r7, #21]
    fb4e:	f083 0301 	eor.w	r3, r3, #1
    fb52:	b2db      	uxtb	r3, r3
    fb54:	2b00      	cmp	r3, #0
    fb56:	d00e      	beq.n	fb76 <_usb_d_dev_ep_trans+0xc2>
    fb58:	687b      	ldr	r3, [r7, #4]
    fb5a:	685b      	ldr	r3, [r3, #4]
    fb5c:	693a      	ldr	r2, [r7, #16]
    fb5e:	8a12      	ldrh	r2, [r2, #16]
    fb60:	4293      	cmp	r3, r2
    fb62:	d208      	bcs.n	fb76 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    fb64:	693b      	ldr	r3, [r7, #16]
    fb66:	68db      	ldr	r3, [r3, #12]
    fb68:	2b00      	cmp	r3, #0
    fb6a:	d102      	bne.n	fb72 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    fb6c:	f06f 0312 	mvn.w	r3, #18
    fb70:	e071      	b.n	fc56 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    fb72:	2301      	movs	r3, #1
    fb74:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    fb76:	7d7b      	ldrb	r3, [r7, #21]
    fb78:	f083 0301 	eor.w	r3, r3, #1
    fb7c:	b2db      	uxtb	r3, r3
    fb7e:	2b00      	cmp	r3, #0
    fb80:	d009      	beq.n	fb96 <_usb_d_dev_ep_trans+0xe2>
    fb82:	7b7b      	ldrb	r3, [r7, #13]
    fb84:	2b00      	cmp	r3, #0
    fb86:	d006      	beq.n	fb96 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    fb88:	693b      	ldr	r3, [r7, #16]
    fb8a:	68db      	ldr	r3, [r3, #12]
    fb8c:	2b00      	cmp	r3, #0
    fb8e:	d102      	bne.n	fb96 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    fb90:	f06f 0311 	mvn.w	r3, #17
    fb94:	e05f      	b.n	fc56 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    fb96:	693b      	ldr	r3, [r7, #16]
    fb98:	7cdb      	ldrb	r3, [r3, #19]
    fb9a:	f003 0308 	and.w	r3, r3, #8
    fb9e:	b2db      	uxtb	r3, r3
    fba0:	2b00      	cmp	r3, #0
    fba2:	d001      	beq.n	fba8 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    fba4:	2302      	movs	r3, #2
    fba6:	e056      	b.n	fc56 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    fba8:	f107 0308 	add.w	r3, r7, #8
    fbac:	4618      	mov	r0, r3
    fbae:	4b2e      	ldr	r3, [pc, #184]	; (fc68 <_usb_d_dev_ep_trans+0x1b4>)
    fbb0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    fbb2:	693b      	ldr	r3, [r7, #16]
    fbb4:	7cdb      	ldrb	r3, [r3, #19]
    fbb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fbba:	b2db      	uxtb	r3, r3
    fbbc:	2b00      	cmp	r3, #0
    fbbe:	d006      	beq.n	fbce <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    fbc0:	f107 0308 	add.w	r3, r7, #8
    fbc4:	4618      	mov	r0, r3
    fbc6:	4b29      	ldr	r3, [pc, #164]	; (fc6c <_usb_d_dev_ep_trans+0x1b8>)
    fbc8:	4798      	blx	r3
		return USB_BUSY;
    fbca:	2301      	movs	r3, #1
    fbcc:	e043      	b.n	fc56 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    fbce:	693a      	ldr	r2, [r7, #16]
    fbd0:	7cd3      	ldrb	r3, [r2, #19]
    fbd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fbd6:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    fbd8:	f107 0308 	add.w	r3, r7, #8
    fbdc:	4618      	mov	r0, r3
    fbde:	4b23      	ldr	r3, [pc, #140]	; (fc6c <_usb_d_dev_ep_trans+0x1b8>)
    fbe0:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    fbe2:	687b      	ldr	r3, [r7, #4]
    fbe4:	681a      	ldr	r2, [r3, #0]
    fbe6:	693b      	ldr	r3, [r7, #16]
    fbe8:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    fbea:	687b      	ldr	r3, [r7, #4]
    fbec:	685a      	ldr	r2, [r3, #4]
    fbee:	693b      	ldr	r3, [r7, #16]
    fbf0:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    fbf2:	693b      	ldr	r3, [r7, #16]
    fbf4:	2200      	movs	r2, #0
    fbf6:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    fbf8:	693a      	ldr	r2, [r7, #16]
    fbfa:	7cd3      	ldrb	r3, [r2, #19]
    fbfc:	7d79      	ldrb	r1, [r7, #21]
    fbfe:	f361 13c7 	bfi	r3, r1, #7, #1
    fc02:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    fc04:	693a      	ldr	r2, [r7, #16]
    fc06:	7cd3      	ldrb	r3, [r2, #19]
    fc08:	7df9      	ldrb	r1, [r7, #23]
    fc0a:	f361 1345 	bfi	r3, r1, #5, #1
    fc0e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    fc10:	687b      	ldr	r3, [r7, #4]
    fc12:	7a5b      	ldrb	r3, [r3, #9]
    fc14:	2b00      	cmp	r3, #0
    fc16:	d007      	beq.n	fc28 <_usb_d_dev_ep_trans+0x174>
    fc18:	7b7b      	ldrb	r3, [r7, #13]
    fc1a:	f083 0301 	eor.w	r3, r3, #1
    fc1e:	b2db      	uxtb	r3, r3
    fc20:	2b00      	cmp	r3, #0
    fc22:	d001      	beq.n	fc28 <_usb_d_dev_ep_trans+0x174>
    fc24:	2301      	movs	r3, #1
    fc26:	e000      	b.n	fc2a <_usb_d_dev_ep_trans+0x176>
    fc28:	2300      	movs	r3, #0
    fc2a:	b2db      	uxtb	r3, r3
    fc2c:	f003 0301 	and.w	r3, r3, #1
    fc30:	b2d9      	uxtb	r1, r3
    fc32:	693a      	ldr	r2, [r7, #16]
    fc34:	7cd3      	ldrb	r3, [r2, #19]
    fc36:	f361 1304 	bfi	r3, r1, #4, #1
    fc3a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    fc3c:	7d7b      	ldrb	r3, [r7, #21]
    fc3e:	2b00      	cmp	r3, #0
    fc40:	d004      	beq.n	fc4c <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    fc42:	2100      	movs	r1, #0
    fc44:	6938      	ldr	r0, [r7, #16]
    fc46:	4b0a      	ldr	r3, [pc, #40]	; (fc70 <_usb_d_dev_ep_trans+0x1bc>)
    fc48:	4798      	blx	r3
    fc4a:	e003      	b.n	fc54 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    fc4c:	2100      	movs	r1, #0
    fc4e:	6938      	ldr	r0, [r7, #16]
    fc50:	4b08      	ldr	r3, [pc, #32]	; (fc74 <_usb_d_dev_ep_trans+0x1c0>)
    fc52:	4798      	blx	r3
	}

	return ERR_NONE;
    fc54:	2300      	movs	r3, #0
}
    fc56:	4618      	mov	r0, r3
    fc58:	3718      	adds	r7, #24
    fc5a:	46bd      	mov	sp, r7
    fc5c:	bd80      	pop	{r7, pc}
    fc5e:	bf00      	nop
    fc60:	0000e325 	.word	0x0000e325
    fc64:	20041fff 	.word	0x20041fff
    fc68:	00010481 	.word	0x00010481
    fc6c:	000104a7 	.word	0x000104a7
    fc70:	0000e5ed 	.word	0x0000e5ed
    fc74:	0000e805 	.word	0x0000e805

0000fc78 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    fc78:	b580      	push	{r7, lr}
    fc7a:	b084      	sub	sp, #16
    fc7c:	af00      	add	r7, sp, #0
    fc7e:	4603      	mov	r3, r0
    fc80:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    fc82:	79fb      	ldrb	r3, [r7, #7]
    fc84:	f003 030f 	and.w	r3, r3, #15
    fc88:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    fc8a:	79fb      	ldrb	r3, [r7, #7]
    fc8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fc90:	2b00      	cmp	r3, #0
    fc92:	bf14      	ite	ne
    fc94:	2301      	movne	r3, #1
    fc96:	2300      	moveq	r3, #0
    fc98:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    fc9a:	7bba      	ldrb	r2, [r7, #14]
    fc9c:	7bfb      	ldrb	r3, [r7, #15]
    fc9e:	4611      	mov	r1, r2
    fca0:	4618      	mov	r0, r3
    fca2:	4b08      	ldr	r3, [pc, #32]	; (fcc4 <_usb_d_dev_ep_abort+0x4c>)
    fca4:	4798      	blx	r3
    fca6:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    fca8:	7bfb      	ldrb	r3, [r7, #15]
    fcaa:	2b04      	cmp	r3, #4
    fcac:	d806      	bhi.n	fcbc <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    fcae:	7bbb      	ldrb	r3, [r7, #14]
    fcb0:	2202      	movs	r2, #2
    fcb2:	4619      	mov	r1, r3
    fcb4:	68b8      	ldr	r0, [r7, #8]
    fcb6:	4b04      	ldr	r3, [pc, #16]	; (fcc8 <_usb_d_dev_ep_abort+0x50>)
    fcb8:	4798      	blx	r3
    fcba:	e000      	b.n	fcbe <_usb_d_dev_ep_abort+0x46>
		return;
    fcbc:	bf00      	nop
}
    fcbe:	3710      	adds	r7, #16
    fcc0:	46bd      	mov	sp, r7
    fcc2:	bd80      	pop	{r7, pc}
    fcc4:	0000e325 	.word	0x0000e325
    fcc8:	0000f95d 	.word	0x0000f95d

0000fccc <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    fccc:	b480      	push	{r7}
    fcce:	b085      	sub	sp, #20
    fcd0:	af00      	add	r7, sp, #0
    fcd2:	4603      	mov	r3, r0
    fcd4:	6039      	str	r1, [r7, #0]
    fcd6:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    fcd8:	683b      	ldr	r3, [r7, #0]
    fcda:	2b00      	cmp	r3, #0
    fcdc:	d001      	beq.n	fce2 <_usb_d_dev_register_callback+0x16>
    fcde:	683b      	ldr	r3, [r7, #0]
    fce0:	e000      	b.n	fce4 <_usb_d_dev_register_callback+0x18>
    fce2:	4b0a      	ldr	r3, [pc, #40]	; (fd0c <_usb_d_dev_register_callback+0x40>)
    fce4:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    fce6:	79fb      	ldrb	r3, [r7, #7]
    fce8:	2b01      	cmp	r3, #1
    fcea:	d103      	bne.n	fcf4 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    fcec:	4a08      	ldr	r2, [pc, #32]	; (fd10 <_usb_d_dev_register_callback+0x44>)
    fcee:	68fb      	ldr	r3, [r7, #12]
    fcf0:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    fcf2:	e005      	b.n	fd00 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    fcf4:	79fb      	ldrb	r3, [r7, #7]
    fcf6:	2b00      	cmp	r3, #0
    fcf8:	d102      	bne.n	fd00 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    fcfa:	4a05      	ldr	r2, [pc, #20]	; (fd10 <_usb_d_dev_register_callback+0x44>)
    fcfc:	68fb      	ldr	r3, [r7, #12]
    fcfe:	6013      	str	r3, [r2, #0]
}
    fd00:	bf00      	nop
    fd02:	3714      	adds	r7, #20
    fd04:	46bd      	mov	sp, r7
    fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd0a:	4770      	bx	lr
    fd0c:	0000dbad 	.word	0x0000dbad
    fd10:	200089e0 	.word	0x200089e0

0000fd14 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    fd14:	b480      	push	{r7}
    fd16:	b085      	sub	sp, #20
    fd18:	af00      	add	r7, sp, #0
    fd1a:	4603      	mov	r3, r0
    fd1c:	6039      	str	r1, [r7, #0]
    fd1e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    fd20:	683b      	ldr	r3, [r7, #0]
    fd22:	2b00      	cmp	r3, #0
    fd24:	d001      	beq.n	fd2a <_usb_d_dev_register_ep_callback+0x16>
    fd26:	683b      	ldr	r3, [r7, #0]
    fd28:	e000      	b.n	fd2c <_usb_d_dev_register_ep_callback+0x18>
    fd2a:	4b0e      	ldr	r3, [pc, #56]	; (fd64 <_usb_d_dev_register_ep_callback+0x50>)
    fd2c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    fd2e:	79fb      	ldrb	r3, [r7, #7]
    fd30:	2b00      	cmp	r3, #0
    fd32:	d103      	bne.n	fd3c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    fd34:	4a0c      	ldr	r2, [pc, #48]	; (fd68 <_usb_d_dev_register_ep_callback+0x54>)
    fd36:	68fb      	ldr	r3, [r7, #12]
    fd38:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    fd3a:	e00c      	b.n	fd56 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    fd3c:	79fb      	ldrb	r3, [r7, #7]
    fd3e:	2b01      	cmp	r3, #1
    fd40:	d103      	bne.n	fd4a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    fd42:	4a09      	ldr	r2, [pc, #36]	; (fd68 <_usb_d_dev_register_ep_callback+0x54>)
    fd44:	68fb      	ldr	r3, [r7, #12]
    fd46:	60d3      	str	r3, [r2, #12]
}
    fd48:	e005      	b.n	fd56 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    fd4a:	79fb      	ldrb	r3, [r7, #7]
    fd4c:	2b02      	cmp	r3, #2
    fd4e:	d102      	bne.n	fd56 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    fd50:	4a05      	ldr	r2, [pc, #20]	; (fd68 <_usb_d_dev_register_ep_callback+0x54>)
    fd52:	68fb      	ldr	r3, [r7, #12]
    fd54:	6113      	str	r3, [r2, #16]
}
    fd56:	bf00      	nop
    fd58:	3714      	adds	r7, #20
    fd5a:	46bd      	mov	sp, r7
    fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd60:	4770      	bx	lr
    fd62:	bf00      	nop
    fd64:	0000dbad 	.word	0x0000dbad
    fd68:	200089e0 	.word	0x200089e0

0000fd6c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    fd6c:	b580      	push	{r7, lr}
    fd6e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    fd70:	4b01      	ldr	r3, [pc, #4]	; (fd78 <USB_0_Handler+0xc>)
    fd72:	4798      	blx	r3
}
    fd74:	bf00      	nop
    fd76:	bd80      	pop	{r7, pc}
    fd78:	0000efdd 	.word	0x0000efdd

0000fd7c <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    fd7c:	b580      	push	{r7, lr}
    fd7e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    fd80:	4b01      	ldr	r3, [pc, #4]	; (fd88 <USB_1_Handler+0xc>)
    fd82:	4798      	blx	r3
}
    fd84:	bf00      	nop
    fd86:	bd80      	pop	{r7, pc}
    fd88:	0000efdd 	.word	0x0000efdd

0000fd8c <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    fd8c:	b580      	push	{r7, lr}
    fd8e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    fd90:	4b01      	ldr	r3, [pc, #4]	; (fd98 <USB_2_Handler+0xc>)
    fd92:	4798      	blx	r3
}
    fd94:	bf00      	nop
    fd96:	bd80      	pop	{r7, pc}
    fd98:	0000efdd 	.word	0x0000efdd

0000fd9c <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    fd9c:	b580      	push	{r7, lr}
    fd9e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    fda0:	4b01      	ldr	r3, [pc, #4]	; (fda8 <USB_3_Handler+0xc>)
    fda2:	4798      	blx	r3
}
    fda4:	bf00      	nop
    fda6:	bd80      	pop	{r7, pc}
    fda8:	0000efdd 	.word	0x0000efdd

0000fdac <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    fdac:	b480      	push	{r7}
    fdae:	b083      	sub	sp, #12
    fdb0:	af00      	add	r7, sp, #0
    fdb2:	6078      	str	r0, [r7, #4]
    fdb4:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    fdb6:	bf00      	nop
    fdb8:	687b      	ldr	r3, [r7, #4]
    fdba:	689a      	ldr	r2, [r3, #8]
    fdbc:	683b      	ldr	r3, [r7, #0]
    fdbe:	4013      	ands	r3, r2
    fdc0:	2b00      	cmp	r3, #0
    fdc2:	d1f9      	bne.n	fdb8 <hri_wdt_wait_for_sync+0xc>
	};
}
    fdc4:	bf00      	nop
    fdc6:	370c      	adds	r7, #12
    fdc8:	46bd      	mov	sp, r7
    fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
    fdce:	4770      	bx	lr

0000fdd0 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    fdd0:	b580      	push	{r7, lr}
    fdd2:	b084      	sub	sp, #16
    fdd4:	af00      	add	r7, sp, #0
    fdd6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    fdd8:	210e      	movs	r1, #14
    fdda:	6878      	ldr	r0, [r7, #4]
    fddc:	4b0a      	ldr	r3, [pc, #40]	; (fe08 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    fdde:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    fde0:	687b      	ldr	r3, [r7, #4]
    fde2:	781b      	ldrb	r3, [r3, #0]
    fde4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    fde6:	7bfb      	ldrb	r3, [r7, #15]
    fde8:	085b      	lsrs	r3, r3, #1
    fdea:	b2db      	uxtb	r3, r3
    fdec:	f003 0301 	and.w	r3, r3, #1
    fdf0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    fdf2:	7bfb      	ldrb	r3, [r7, #15]
    fdf4:	2b00      	cmp	r3, #0
    fdf6:	bf14      	ite	ne
    fdf8:	2301      	movne	r3, #1
    fdfa:	2300      	moveq	r3, #0
    fdfc:	b2db      	uxtb	r3, r3
}
    fdfe:	4618      	mov	r0, r3
    fe00:	3710      	adds	r7, #16
    fe02:	46bd      	mov	sp, r7
    fe04:	bd80      	pop	{r7, pc}
    fe06:	bf00      	nop
    fe08:	0000fdad 	.word	0x0000fdad

0000fe0c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    fe0c:	b580      	push	{r7, lr}
    fe0e:	b082      	sub	sp, #8
    fe10:	af00      	add	r7, sp, #0
    fe12:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    fe14:	687b      	ldr	r3, [r7, #4]
    fe16:	781b      	ldrb	r3, [r3, #0]
    fe18:	b2db      	uxtb	r3, r3
    fe1a:	f023 0304 	bic.w	r3, r3, #4
    fe1e:	b2da      	uxtb	r2, r3
    fe20:	687b      	ldr	r3, [r7, #4]
    fe22:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    fe24:	210e      	movs	r1, #14
    fe26:	6878      	ldr	r0, [r7, #4]
    fe28:	4b02      	ldr	r3, [pc, #8]	; (fe34 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    fe2a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    fe2c:	bf00      	nop
    fe2e:	3708      	adds	r7, #8
    fe30:	46bd      	mov	sp, r7
    fe32:	bd80      	pop	{r7, pc}
    fe34:	0000fdad 	.word	0x0000fdad

0000fe38 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    fe38:	b580      	push	{r7, lr}
    fe3a:	b084      	sub	sp, #16
    fe3c:	af00      	add	r7, sp, #0
    fe3e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    fe40:	210e      	movs	r1, #14
    fe42:	6878      	ldr	r0, [r7, #4]
    fe44:	4b08      	ldr	r3, [pc, #32]	; (fe68 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    fe46:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    fe48:	687b      	ldr	r3, [r7, #4]
    fe4a:	781b      	ldrb	r3, [r3, #0]
    fe4c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    fe4e:	7bfb      	ldrb	r3, [r7, #15]
    fe50:	09db      	lsrs	r3, r3, #7
    fe52:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    fe54:	7bfb      	ldrb	r3, [r7, #15]
    fe56:	2b00      	cmp	r3, #0
    fe58:	bf14      	ite	ne
    fe5a:	2301      	movne	r3, #1
    fe5c:	2300      	moveq	r3, #0
    fe5e:	b2db      	uxtb	r3, r3
}
    fe60:	4618      	mov	r0, r3
    fe62:	3710      	adds	r7, #16
    fe64:	46bd      	mov	sp, r7
    fe66:	bd80      	pop	{r7, pc}
    fe68:	0000fdad 	.word	0x0000fdad

0000fe6c <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    fe6c:	b480      	push	{r7}
    fe6e:	b085      	sub	sp, #20
    fe70:	af00      	add	r7, sp, #0
    fe72:	6078      	str	r0, [r7, #4]
    fe74:	460b      	mov	r3, r1
    fe76:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    fe78:	687b      	ldr	r3, [r7, #4]
    fe7a:	785b      	ldrb	r3, [r3, #1]
    fe7c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    fe7e:	7bfb      	ldrb	r3, [r7, #15]
    fe80:	f023 030f 	bic.w	r3, r3, #15
    fe84:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    fe86:	78fb      	ldrb	r3, [r7, #3]
    fe88:	f003 030f 	and.w	r3, r3, #15
    fe8c:	b2da      	uxtb	r2, r3
    fe8e:	7bfb      	ldrb	r3, [r7, #15]
    fe90:	4313      	orrs	r3, r2
    fe92:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    fe94:	687b      	ldr	r3, [r7, #4]
    fe96:	7bfa      	ldrb	r2, [r7, #15]
    fe98:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    fe9a:	bf00      	nop
    fe9c:	3714      	adds	r7, #20
    fe9e:	46bd      	mov	sp, r7
    fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    fea4:	4770      	bx	lr
	...

0000fea8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    fea8:	b580      	push	{r7, lr}
    feaa:	b082      	sub	sp, #8
    feac:	af00      	add	r7, sp, #0
    feae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    feb0:	687b      	ldr	r3, [r7, #4]
    feb2:	2b00      	cmp	r3, #0
    feb4:	d005      	beq.n	fec2 <_wdt_init+0x1a>
    feb6:	687b      	ldr	r3, [r7, #4]
    feb8:	681b      	ldr	r3, [r3, #0]
    feba:	2b00      	cmp	r3, #0
    febc:	d001      	beq.n	fec2 <_wdt_init+0x1a>
    febe:	2301      	movs	r3, #1
    fec0:	e000      	b.n	fec4 <_wdt_init+0x1c>
    fec2:	2300      	movs	r3, #0
    fec4:	f003 0301 	and.w	r3, r3, #1
    fec8:	b2db      	uxtb	r3, r3
    feca:	2250      	movs	r2, #80	; 0x50
    fecc:	4913      	ldr	r1, [pc, #76]	; (ff1c <_wdt_init+0x74>)
    fece:	4618      	mov	r0, r3
    fed0:	4b13      	ldr	r3, [pc, #76]	; (ff20 <_wdt_init+0x78>)
    fed2:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    fed4:	687b      	ldr	r3, [r7, #4]
    fed6:	681b      	ldr	r3, [r3, #0]
    fed8:	4618      	mov	r0, r3
    feda:	4b12      	ldr	r3, [pc, #72]	; (ff24 <_wdt_init+0x7c>)
    fedc:	4798      	blx	r3
    fede:	4603      	mov	r3, r0
    fee0:	2b00      	cmp	r3, #0
    fee2:	d107      	bne.n	fef4 <_wdt_init+0x4c>
    fee4:	687b      	ldr	r3, [r7, #4]
    fee6:	681b      	ldr	r3, [r3, #0]
    fee8:	4618      	mov	r0, r3
    feea:	4b0f      	ldr	r3, [pc, #60]	; (ff28 <_wdt_init+0x80>)
    feec:	4798      	blx	r3
    feee:	4603      	mov	r3, r0
    fef0:	2b00      	cmp	r3, #0
    fef2:	d002      	beq.n	fefa <_wdt_init+0x52>
		return ERR_DENIED;
    fef4:	f06f 0310 	mvn.w	r3, #16
    fef8:	e00b      	b.n	ff12 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    fefa:	687b      	ldr	r3, [r7, #4]
    fefc:	681b      	ldr	r3, [r3, #0]
    fefe:	4618      	mov	r0, r3
    ff00:	4b0a      	ldr	r3, [pc, #40]	; (ff2c <_wdt_init+0x84>)
    ff02:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ff04:	687b      	ldr	r3, [r7, #4]
    ff06:	681b      	ldr	r3, [r3, #0]
    ff08:	210b      	movs	r1, #11
    ff0a:	4618      	mov	r0, r3
    ff0c:	4b08      	ldr	r3, [pc, #32]	; (ff30 <_wdt_init+0x88>)
    ff0e:	4798      	blx	r3
	}

	return ERR_NONE;
    ff10:	2300      	movs	r3, #0
}
    ff12:	4618      	mov	r0, r3
    ff14:	3708      	adds	r7, #8
    ff16:	46bd      	mov	sp, r7
    ff18:	bd80      	pop	{r7, pc}
    ff1a:	bf00      	nop
    ff1c:	0001f858 	.word	0x0001f858
    ff20:	00007d91 	.word	0x00007d91
    ff24:	0000fe39 	.word	0x0000fe39
    ff28:	0000fdd1 	.word	0x0000fdd1
    ff2c:	0000fe0d 	.word	0x0000fe0d
    ff30:	0000fe6d 	.word	0x0000fe6d

0000ff34 <hri_port_set_DIR_reg>:
{
    ff34:	b480      	push	{r7}
    ff36:	b085      	sub	sp, #20
    ff38:	af00      	add	r7, sp, #0
    ff3a:	60f8      	str	r0, [r7, #12]
    ff3c:	460b      	mov	r3, r1
    ff3e:	607a      	str	r2, [r7, #4]
    ff40:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    ff42:	7afb      	ldrb	r3, [r7, #11]
    ff44:	68fa      	ldr	r2, [r7, #12]
    ff46:	01db      	lsls	r3, r3, #7
    ff48:	4413      	add	r3, r2
    ff4a:	3308      	adds	r3, #8
    ff4c:	687a      	ldr	r2, [r7, #4]
    ff4e:	601a      	str	r2, [r3, #0]
}
    ff50:	bf00      	nop
    ff52:	3714      	adds	r7, #20
    ff54:	46bd      	mov	sp, r7
    ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff5a:	4770      	bx	lr

0000ff5c <hri_port_clear_DIR_reg>:
{
    ff5c:	b480      	push	{r7}
    ff5e:	b085      	sub	sp, #20
    ff60:	af00      	add	r7, sp, #0
    ff62:	60f8      	str	r0, [r7, #12]
    ff64:	460b      	mov	r3, r1
    ff66:	607a      	str	r2, [r7, #4]
    ff68:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    ff6a:	7afb      	ldrb	r3, [r7, #11]
    ff6c:	68fa      	ldr	r2, [r7, #12]
    ff6e:	01db      	lsls	r3, r3, #7
    ff70:	4413      	add	r3, r2
    ff72:	3304      	adds	r3, #4
    ff74:	687a      	ldr	r2, [r7, #4]
    ff76:	601a      	str	r2, [r3, #0]
}
    ff78:	bf00      	nop
    ff7a:	3714      	adds	r7, #20
    ff7c:	46bd      	mov	sp, r7
    ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff82:	4770      	bx	lr

0000ff84 <hri_port_set_OUT_reg>:
{
    ff84:	b480      	push	{r7}
    ff86:	b085      	sub	sp, #20
    ff88:	af00      	add	r7, sp, #0
    ff8a:	60f8      	str	r0, [r7, #12]
    ff8c:	460b      	mov	r3, r1
    ff8e:	607a      	str	r2, [r7, #4]
    ff90:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ff92:	7afb      	ldrb	r3, [r7, #11]
    ff94:	68fa      	ldr	r2, [r7, #12]
    ff96:	01db      	lsls	r3, r3, #7
    ff98:	4413      	add	r3, r2
    ff9a:	3318      	adds	r3, #24
    ff9c:	687a      	ldr	r2, [r7, #4]
    ff9e:	601a      	str	r2, [r3, #0]
}
    ffa0:	bf00      	nop
    ffa2:	3714      	adds	r7, #20
    ffa4:	46bd      	mov	sp, r7
    ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    ffaa:	4770      	bx	lr

0000ffac <hri_port_clear_OUT_reg>:
{
    ffac:	b480      	push	{r7}
    ffae:	b085      	sub	sp, #20
    ffb0:	af00      	add	r7, sp, #0
    ffb2:	60f8      	str	r0, [r7, #12]
    ffb4:	460b      	mov	r3, r1
    ffb6:	607a      	str	r2, [r7, #4]
    ffb8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ffba:	7afb      	ldrb	r3, [r7, #11]
    ffbc:	68fa      	ldr	r2, [r7, #12]
    ffbe:	01db      	lsls	r3, r3, #7
    ffc0:	4413      	add	r3, r2
    ffc2:	3314      	adds	r3, #20
    ffc4:	687a      	ldr	r2, [r7, #4]
    ffc6:	601a      	str	r2, [r3, #0]
}
    ffc8:	bf00      	nop
    ffca:	3714      	adds	r7, #20
    ffcc:	46bd      	mov	sp, r7
    ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
    ffd2:	4770      	bx	lr

0000ffd4 <hri_port_write_PMUX_PMUXE_bf>:
{
    ffd4:	b480      	push	{r7}
    ffd6:	b085      	sub	sp, #20
    ffd8:	af00      	add	r7, sp, #0
    ffda:	6078      	str	r0, [r7, #4]
    ffdc:	4608      	mov	r0, r1
    ffde:	4611      	mov	r1, r2
    ffe0:	461a      	mov	r2, r3
    ffe2:	4603      	mov	r3, r0
    ffe4:	70fb      	strb	r3, [r7, #3]
    ffe6:	460b      	mov	r3, r1
    ffe8:	70bb      	strb	r3, [r7, #2]
    ffea:	4613      	mov	r3, r2
    ffec:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ffee:	78fa      	ldrb	r2, [r7, #3]
    fff0:	78bb      	ldrb	r3, [r7, #2]
    fff2:	6879      	ldr	r1, [r7, #4]
    fff4:	01d2      	lsls	r2, r2, #7
    fff6:	440a      	add	r2, r1
    fff8:	4413      	add	r3, r2
    fffa:	3330      	adds	r3, #48	; 0x30
    fffc:	781b      	ldrb	r3, [r3, #0]
    fffe:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   10000:	7bfb      	ldrb	r3, [r7, #15]
   10002:	f023 030f 	bic.w	r3, r3, #15
   10006:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   10008:	787b      	ldrb	r3, [r7, #1]
   1000a:	f003 030f 	and.w	r3, r3, #15
   1000e:	b2da      	uxtb	r2, r3
   10010:	7bfb      	ldrb	r3, [r7, #15]
   10012:	4313      	orrs	r3, r2
   10014:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10016:	78fa      	ldrb	r2, [r7, #3]
   10018:	78bb      	ldrb	r3, [r7, #2]
   1001a:	6879      	ldr	r1, [r7, #4]
   1001c:	01d2      	lsls	r2, r2, #7
   1001e:	440a      	add	r2, r1
   10020:	4413      	add	r3, r2
   10022:	3330      	adds	r3, #48	; 0x30
   10024:	7bfa      	ldrb	r2, [r7, #15]
   10026:	701a      	strb	r2, [r3, #0]
}
   10028:	bf00      	nop
   1002a:	3714      	adds	r7, #20
   1002c:	46bd      	mov	sp, r7
   1002e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10032:	4770      	bx	lr

00010034 <hri_port_write_PMUX_PMUXO_bf>:
{
   10034:	b480      	push	{r7}
   10036:	b085      	sub	sp, #20
   10038:	af00      	add	r7, sp, #0
   1003a:	6078      	str	r0, [r7, #4]
   1003c:	4608      	mov	r0, r1
   1003e:	4611      	mov	r1, r2
   10040:	461a      	mov	r2, r3
   10042:	4603      	mov	r3, r0
   10044:	70fb      	strb	r3, [r7, #3]
   10046:	460b      	mov	r3, r1
   10048:	70bb      	strb	r3, [r7, #2]
   1004a:	4613      	mov	r3, r2
   1004c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1004e:	78fa      	ldrb	r2, [r7, #3]
   10050:	78bb      	ldrb	r3, [r7, #2]
   10052:	6879      	ldr	r1, [r7, #4]
   10054:	01d2      	lsls	r2, r2, #7
   10056:	440a      	add	r2, r1
   10058:	4413      	add	r3, r2
   1005a:	3330      	adds	r3, #48	; 0x30
   1005c:	781b      	ldrb	r3, [r3, #0]
   1005e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   10060:	7bfb      	ldrb	r3, [r7, #15]
   10062:	f003 030f 	and.w	r3, r3, #15
   10066:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   10068:	787b      	ldrb	r3, [r7, #1]
   1006a:	011b      	lsls	r3, r3, #4
   1006c:	b2da      	uxtb	r2, r3
   1006e:	7bfb      	ldrb	r3, [r7, #15]
   10070:	4313      	orrs	r3, r2
   10072:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10074:	78fa      	ldrb	r2, [r7, #3]
   10076:	78bb      	ldrb	r3, [r7, #2]
   10078:	6879      	ldr	r1, [r7, #4]
   1007a:	01d2      	lsls	r2, r2, #7
   1007c:	440a      	add	r2, r1
   1007e:	4413      	add	r3, r2
   10080:	3330      	adds	r3, #48	; 0x30
   10082:	7bfa      	ldrb	r2, [r7, #15]
   10084:	701a      	strb	r2, [r3, #0]
}
   10086:	bf00      	nop
   10088:	3714      	adds	r7, #20
   1008a:	46bd      	mov	sp, r7
   1008c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10090:	4770      	bx	lr

00010092 <hri_port_write_PINCFG_PMUXEN_bit>:
{
   10092:	b480      	push	{r7}
   10094:	b085      	sub	sp, #20
   10096:	af00      	add	r7, sp, #0
   10098:	6078      	str	r0, [r7, #4]
   1009a:	4608      	mov	r0, r1
   1009c:	4611      	mov	r1, r2
   1009e:	461a      	mov	r2, r3
   100a0:	4603      	mov	r3, r0
   100a2:	70fb      	strb	r3, [r7, #3]
   100a4:	460b      	mov	r3, r1
   100a6:	70bb      	strb	r3, [r7, #2]
   100a8:	4613      	mov	r3, r2
   100aa:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   100ac:	78fa      	ldrb	r2, [r7, #3]
   100ae:	78bb      	ldrb	r3, [r7, #2]
   100b0:	6879      	ldr	r1, [r7, #4]
   100b2:	01d2      	lsls	r2, r2, #7
   100b4:	440a      	add	r2, r1
   100b6:	4413      	add	r3, r2
   100b8:	3340      	adds	r3, #64	; 0x40
   100ba:	781b      	ldrb	r3, [r3, #0]
   100bc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   100be:	7bfb      	ldrb	r3, [r7, #15]
   100c0:	f023 0301 	bic.w	r3, r3, #1
   100c4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   100c6:	787a      	ldrb	r2, [r7, #1]
   100c8:	7bfb      	ldrb	r3, [r7, #15]
   100ca:	4313      	orrs	r3, r2
   100cc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   100ce:	78fa      	ldrb	r2, [r7, #3]
   100d0:	78bb      	ldrb	r3, [r7, #2]
   100d2:	6879      	ldr	r1, [r7, #4]
   100d4:	01d2      	lsls	r2, r2, #7
   100d6:	440a      	add	r2, r1
   100d8:	4413      	add	r3, r2
   100da:	3340      	adds	r3, #64	; 0x40
   100dc:	7bfa      	ldrb	r2, [r7, #15]
   100de:	701a      	strb	r2, [r3, #0]
}
   100e0:	bf00      	nop
   100e2:	3714      	adds	r7, #20
   100e4:	46bd      	mov	sp, r7
   100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   100ea:	4770      	bx	lr

000100ec <hri_port_write_WRCONFIG_reg>:
{
   100ec:	b480      	push	{r7}
   100ee:	b085      	sub	sp, #20
   100f0:	af00      	add	r7, sp, #0
   100f2:	60f8      	str	r0, [r7, #12]
   100f4:	460b      	mov	r3, r1
   100f6:	607a      	str	r2, [r7, #4]
   100f8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   100fa:	7afb      	ldrb	r3, [r7, #11]
   100fc:	68fa      	ldr	r2, [r7, #12]
   100fe:	01db      	lsls	r3, r3, #7
   10100:	4413      	add	r3, r2
   10102:	3328      	adds	r3, #40	; 0x28
   10104:	687a      	ldr	r2, [r7, #4]
   10106:	601a      	str	r2, [r3, #0]
}
   10108:	bf00      	nop
   1010a:	3714      	adds	r7, #20
   1010c:	46bd      	mov	sp, r7
   1010e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10112:	4770      	bx	lr

00010114 <_gpio_set_direction>:
{
   10114:	b580      	push	{r7, lr}
   10116:	b082      	sub	sp, #8
   10118:	af00      	add	r7, sp, #0
   1011a:	4603      	mov	r3, r0
   1011c:	6039      	str	r1, [r7, #0]
   1011e:	71fb      	strb	r3, [r7, #7]
   10120:	4613      	mov	r3, r2
   10122:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   10124:	79bb      	ldrb	r3, [r7, #6]
   10126:	2b01      	cmp	r3, #1
   10128:	d01c      	beq.n	10164 <_gpio_set_direction+0x50>
   1012a:	2b02      	cmp	r3, #2
   1012c:	d037      	beq.n	1019e <_gpio_set_direction+0x8a>
   1012e:	2b00      	cmp	r3, #0
   10130:	d14e      	bne.n	101d0 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10132:	79fb      	ldrb	r3, [r7, #7]
   10134:	683a      	ldr	r2, [r7, #0]
   10136:	4619      	mov	r1, r3
   10138:	482a      	ldr	r0, [pc, #168]	; (101e4 <_gpio_set_direction+0xd0>)
   1013a:	4b2b      	ldr	r3, [pc, #172]	; (101e8 <_gpio_set_direction+0xd4>)
   1013c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   1013e:	683b      	ldr	r3, [r7, #0]
   10140:	b29b      	uxth	r3, r3
   10142:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10146:	79fb      	ldrb	r3, [r7, #7]
   10148:	4619      	mov	r1, r3
   1014a:	4826      	ldr	r0, [pc, #152]	; (101e4 <_gpio_set_direction+0xd0>)
   1014c:	4b27      	ldr	r3, [pc, #156]	; (101ec <_gpio_set_direction+0xd8>)
   1014e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10150:	683b      	ldr	r3, [r7, #0]
   10152:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10154:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   10158:	79fb      	ldrb	r3, [r7, #7]
   1015a:	4619      	mov	r1, r3
   1015c:	4821      	ldr	r0, [pc, #132]	; (101e4 <_gpio_set_direction+0xd0>)
   1015e:	4b23      	ldr	r3, [pc, #140]	; (101ec <_gpio_set_direction+0xd8>)
   10160:	4798      	blx	r3
		break;
   10162:	e03a      	b.n	101da <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10164:	79fb      	ldrb	r3, [r7, #7]
   10166:	683a      	ldr	r2, [r7, #0]
   10168:	4619      	mov	r1, r3
   1016a:	481e      	ldr	r0, [pc, #120]	; (101e4 <_gpio_set_direction+0xd0>)
   1016c:	4b1e      	ldr	r3, [pc, #120]	; (101e8 <_gpio_set_direction+0xd4>)
   1016e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   10170:	683b      	ldr	r3, [r7, #0]
   10172:	b29b      	uxth	r3, r3
   10174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1017c:	79f9      	ldrb	r1, [r7, #7]
   1017e:	461a      	mov	r2, r3
   10180:	4818      	ldr	r0, [pc, #96]	; (101e4 <_gpio_set_direction+0xd0>)
   10182:	4b1a      	ldr	r3, [pc, #104]	; (101ec <_gpio_set_direction+0xd8>)
   10184:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   10186:	683b      	ldr	r3, [r7, #0]
   10188:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   1018a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1018e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10192:	79f9      	ldrb	r1, [r7, #7]
   10194:	461a      	mov	r2, r3
   10196:	4813      	ldr	r0, [pc, #76]	; (101e4 <_gpio_set_direction+0xd0>)
   10198:	4b14      	ldr	r3, [pc, #80]	; (101ec <_gpio_set_direction+0xd8>)
   1019a:	4798      	blx	r3
		break;
   1019c:	e01d      	b.n	101da <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   1019e:	79fb      	ldrb	r3, [r7, #7]
   101a0:	683a      	ldr	r2, [r7, #0]
   101a2:	4619      	mov	r1, r3
   101a4:	480f      	ldr	r0, [pc, #60]	; (101e4 <_gpio_set_direction+0xd0>)
   101a6:	4b12      	ldr	r3, [pc, #72]	; (101f0 <_gpio_set_direction+0xdc>)
   101a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   101aa:	683b      	ldr	r3, [r7, #0]
   101ac:	b29b      	uxth	r3, r3
   101ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   101b2:	79fb      	ldrb	r3, [r7, #7]
   101b4:	4619      	mov	r1, r3
   101b6:	480b      	ldr	r0, [pc, #44]	; (101e4 <_gpio_set_direction+0xd0>)
   101b8:	4b0c      	ldr	r3, [pc, #48]	; (101ec <_gpio_set_direction+0xd8>)
   101ba:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   101bc:	683b      	ldr	r3, [r7, #0]
   101be:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   101c0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   101c4:	79fb      	ldrb	r3, [r7, #7]
   101c6:	4619      	mov	r1, r3
   101c8:	4806      	ldr	r0, [pc, #24]	; (101e4 <_gpio_set_direction+0xd0>)
   101ca:	4b08      	ldr	r3, [pc, #32]	; (101ec <_gpio_set_direction+0xd8>)
   101cc:	4798      	blx	r3
		break;
   101ce:	e004      	b.n	101da <_gpio_set_direction+0xc6>
		ASSERT(false);
   101d0:	2246      	movs	r2, #70	; 0x46
   101d2:	4908      	ldr	r1, [pc, #32]	; (101f4 <_gpio_set_direction+0xe0>)
   101d4:	2000      	movs	r0, #0
   101d6:	4b08      	ldr	r3, [pc, #32]	; (101f8 <_gpio_set_direction+0xe4>)
   101d8:	4798      	blx	r3
}
   101da:	bf00      	nop
   101dc:	3708      	adds	r7, #8
   101de:	46bd      	mov	sp, r7
   101e0:	bd80      	pop	{r7, pc}
   101e2:	bf00      	nop
   101e4:	41008000 	.word	0x41008000
   101e8:	0000ff5d 	.word	0x0000ff5d
   101ec:	000100ed 	.word	0x000100ed
   101f0:	0000ff35 	.word	0x0000ff35
   101f4:	0001f870 	.word	0x0001f870
   101f8:	00007d91 	.word	0x00007d91

000101fc <_gpio_set_level>:
{
   101fc:	b580      	push	{r7, lr}
   101fe:	b082      	sub	sp, #8
   10200:	af00      	add	r7, sp, #0
   10202:	4603      	mov	r3, r0
   10204:	6039      	str	r1, [r7, #0]
   10206:	71fb      	strb	r3, [r7, #7]
   10208:	4613      	mov	r3, r2
   1020a:	71bb      	strb	r3, [r7, #6]
	if (level) {
   1020c:	79bb      	ldrb	r3, [r7, #6]
   1020e:	2b00      	cmp	r3, #0
   10210:	d006      	beq.n	10220 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10212:	79fb      	ldrb	r3, [r7, #7]
   10214:	683a      	ldr	r2, [r7, #0]
   10216:	4619      	mov	r1, r3
   10218:	4806      	ldr	r0, [pc, #24]	; (10234 <_gpio_set_level+0x38>)
   1021a:	4b07      	ldr	r3, [pc, #28]	; (10238 <_gpio_set_level+0x3c>)
   1021c:	4798      	blx	r3
}
   1021e:	e005      	b.n	1022c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   10220:	79fb      	ldrb	r3, [r7, #7]
   10222:	683a      	ldr	r2, [r7, #0]
   10224:	4619      	mov	r1, r3
   10226:	4803      	ldr	r0, [pc, #12]	; (10234 <_gpio_set_level+0x38>)
   10228:	4b04      	ldr	r3, [pc, #16]	; (1023c <_gpio_set_level+0x40>)
   1022a:	4798      	blx	r3
}
   1022c:	bf00      	nop
   1022e:	3708      	adds	r7, #8
   10230:	46bd      	mov	sp, r7
   10232:	bd80      	pop	{r7, pc}
   10234:	41008000 	.word	0x41008000
   10238:	0000ff85 	.word	0x0000ff85
   1023c:	0000ffad 	.word	0x0000ffad

00010240 <_gpio_set_pin_function>:
{
   10240:	b590      	push	{r4, r7, lr}
   10242:	b085      	sub	sp, #20
   10244:	af00      	add	r7, sp, #0
   10246:	6078      	str	r0, [r7, #4]
   10248:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   1024a:	687b      	ldr	r3, [r7, #4]
   1024c:	095b      	lsrs	r3, r3, #5
   1024e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   10250:	687b      	ldr	r3, [r7, #4]
   10252:	b2db      	uxtb	r3, r3
   10254:	f003 031f 	and.w	r3, r3, #31
   10258:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
   1025a:	683b      	ldr	r3, [r7, #0]
   1025c:	f1b3 3fff 	cmp.w	r3, #4294967295
   10260:	d106      	bne.n	10270 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   10262:	7bba      	ldrb	r2, [r7, #14]
   10264:	7bf9      	ldrb	r1, [r7, #15]
   10266:	2300      	movs	r3, #0
   10268:	4812      	ldr	r0, [pc, #72]	; (102b4 <_gpio_set_pin_function+0x74>)
   1026a:	4c13      	ldr	r4, [pc, #76]	; (102b8 <_gpio_set_pin_function+0x78>)
   1026c:	47a0      	blx	r4
}
   1026e:	e01d      	b.n	102ac <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   10270:	7bba      	ldrb	r2, [r7, #14]
   10272:	7bf9      	ldrb	r1, [r7, #15]
   10274:	2301      	movs	r3, #1
   10276:	480f      	ldr	r0, [pc, #60]	; (102b4 <_gpio_set_pin_function+0x74>)
   10278:	4c0f      	ldr	r4, [pc, #60]	; (102b8 <_gpio_set_pin_function+0x78>)
   1027a:	47a0      	blx	r4
		if (pin & 1) {
   1027c:	7bbb      	ldrb	r3, [r7, #14]
   1027e:	f003 0301 	and.w	r3, r3, #1
   10282:	2b00      	cmp	r3, #0
   10284:	d009      	beq.n	1029a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   10286:	7bbb      	ldrb	r3, [r7, #14]
   10288:	085b      	lsrs	r3, r3, #1
   1028a:	b2da      	uxtb	r2, r3
   1028c:	683b      	ldr	r3, [r7, #0]
   1028e:	b2db      	uxtb	r3, r3
   10290:	7bf9      	ldrb	r1, [r7, #15]
   10292:	4808      	ldr	r0, [pc, #32]	; (102b4 <_gpio_set_pin_function+0x74>)
   10294:	4c09      	ldr	r4, [pc, #36]	; (102bc <_gpio_set_pin_function+0x7c>)
   10296:	47a0      	blx	r4
}
   10298:	e008      	b.n	102ac <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   1029a:	7bbb      	ldrb	r3, [r7, #14]
   1029c:	085b      	lsrs	r3, r3, #1
   1029e:	b2da      	uxtb	r2, r3
   102a0:	683b      	ldr	r3, [r7, #0]
   102a2:	b2db      	uxtb	r3, r3
   102a4:	7bf9      	ldrb	r1, [r7, #15]
   102a6:	4803      	ldr	r0, [pc, #12]	; (102b4 <_gpio_set_pin_function+0x74>)
   102a8:	4c05      	ldr	r4, [pc, #20]	; (102c0 <_gpio_set_pin_function+0x80>)
   102aa:	47a0      	blx	r4
}
   102ac:	bf00      	nop
   102ae:	3714      	adds	r7, #20
   102b0:	46bd      	mov	sp, r7
   102b2:	bd90      	pop	{r4, r7, pc}
   102b4:	41008000 	.word	0x41008000
   102b8:	00010093 	.word	0x00010093
   102bc:	00010035 	.word	0x00010035
   102c0:	0000ffd5 	.word	0x0000ffd5

000102c4 <gpio_set_pin_function>:
{
   102c4:	b580      	push	{r7, lr}
   102c6:	b082      	sub	sp, #8
   102c8:	af00      	add	r7, sp, #0
   102ca:	6078      	str	r0, [r7, #4]
   102cc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   102ce:	6839      	ldr	r1, [r7, #0]
   102d0:	6878      	ldr	r0, [r7, #4]
   102d2:	4b03      	ldr	r3, [pc, #12]	; (102e0 <gpio_set_pin_function+0x1c>)
   102d4:	4798      	blx	r3
}
   102d6:	bf00      	nop
   102d8:	3708      	adds	r7, #8
   102da:	46bd      	mov	sp, r7
   102dc:	bd80      	pop	{r7, pc}
   102de:	bf00      	nop
   102e0:	00010241 	.word	0x00010241

000102e4 <gpio_set_pin_direction>:
{
   102e4:	b580      	push	{r7, lr}
   102e6:	b082      	sub	sp, #8
   102e8:	af00      	add	r7, sp, #0
   102ea:	4603      	mov	r3, r0
   102ec:	460a      	mov	r2, r1
   102ee:	71fb      	strb	r3, [r7, #7]
   102f0:	4613      	mov	r3, r2
   102f2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   102f4:	79fb      	ldrb	r3, [r7, #7]
   102f6:	095b      	lsrs	r3, r3, #5
   102f8:	b2d8      	uxtb	r0, r3
   102fa:	79fb      	ldrb	r3, [r7, #7]
   102fc:	f003 031f 	and.w	r3, r3, #31
   10300:	2201      	movs	r2, #1
   10302:	fa02 f303 	lsl.w	r3, r2, r3
   10306:	79ba      	ldrb	r2, [r7, #6]
   10308:	4619      	mov	r1, r3
   1030a:	4b03      	ldr	r3, [pc, #12]	; (10318 <gpio_set_pin_direction+0x34>)
   1030c:	4798      	blx	r3
}
   1030e:	bf00      	nop
   10310:	3708      	adds	r7, #8
   10312:	46bd      	mov	sp, r7
   10314:	bd80      	pop	{r7, pc}
   10316:	bf00      	nop
   10318:	00010115 	.word	0x00010115

0001031c <gpio_set_pin_level>:
{
   1031c:	b580      	push	{r7, lr}
   1031e:	b082      	sub	sp, #8
   10320:	af00      	add	r7, sp, #0
   10322:	4603      	mov	r3, r0
   10324:	460a      	mov	r2, r1
   10326:	71fb      	strb	r3, [r7, #7]
   10328:	4613      	mov	r3, r2
   1032a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1032c:	79fb      	ldrb	r3, [r7, #7]
   1032e:	095b      	lsrs	r3, r3, #5
   10330:	b2d8      	uxtb	r0, r3
   10332:	79fb      	ldrb	r3, [r7, #7]
   10334:	f003 031f 	and.w	r3, r3, #31
   10338:	2201      	movs	r2, #1
   1033a:	fa02 f303 	lsl.w	r3, r2, r3
   1033e:	79ba      	ldrb	r2, [r7, #6]
   10340:	4619      	mov	r1, r3
   10342:	4b03      	ldr	r3, [pc, #12]	; (10350 <gpio_set_pin_level+0x34>)
   10344:	4798      	blx	r3
}
   10346:	bf00      	nop
   10348:	3708      	adds	r7, #8
   1034a:	46bd      	mov	sp, r7
   1034c:	bd80      	pop	{r7, pc}
   1034e:	bf00      	nop
   10350:	000101fd 	.word	0x000101fd

00010354 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
   10354:	b580      	push	{r7, lr}
   10356:	b082      	sub	sp, #8
   10358:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   1035a:	2100      	movs	r1, #0
   1035c:	2008      	movs	r0, #8
   1035e:	4b24      	ldr	r3, [pc, #144]	; (103f0 <QSPI_N25Q256_exit_xip+0x9c>)
   10360:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   10362:	2100      	movs	r1, #0
   10364:	202b      	movs	r0, #43	; 0x2b
   10366:	4b22      	ldr	r3, [pc, #136]	; (103f0 <QSPI_N25Q256_exit_xip+0x9c>)
   10368:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   1036a:	2100      	movs	r1, #0
   1036c:	202a      	movs	r0, #42	; 0x2a
   1036e:	4b20      	ldr	r3, [pc, #128]	; (103f0 <QSPI_N25Q256_exit_xip+0x9c>)
   10370:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   10372:	2102      	movs	r1, #2
   10374:	2008      	movs	r0, #8
   10376:	4b1f      	ldr	r3, [pc, #124]	; (103f4 <QSPI_N25Q256_exit_xip+0xa0>)
   10378:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   1037a:	2102      	movs	r1, #2
   1037c:	202b      	movs	r0, #43	; 0x2b
   1037e:	4b1d      	ldr	r3, [pc, #116]	; (103f4 <QSPI_N25Q256_exit_xip+0xa0>)
   10380:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   10382:	2102      	movs	r1, #2
   10384:	202a      	movs	r0, #42	; 0x2a
   10386:	4b1b      	ldr	r3, [pc, #108]	; (103f4 <QSPI_N25Q256_exit_xip+0xa0>)
   10388:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   1038a:	2101      	movs	r1, #1
   1038c:	2008      	movs	r0, #8
   1038e:	4b1a      	ldr	r3, [pc, #104]	; (103f8 <QSPI_N25Q256_exit_xip+0xa4>)
   10390:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   10392:	2100      	movs	r1, #0
   10394:	202b      	movs	r0, #43	; 0x2b
   10396:	4b18      	ldr	r3, [pc, #96]	; (103f8 <QSPI_N25Q256_exit_xip+0xa4>)
   10398:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   1039a:	2100      	movs	r1, #0
   1039c:	202a      	movs	r0, #42	; 0x2a
   1039e:	4b16      	ldr	r3, [pc, #88]	; (103f8 <QSPI_N25Q256_exit_xip+0xa4>)
   103a0:	4798      	blx	r3

	delay_us(1);
   103a2:	2001      	movs	r0, #1
   103a4:	4b15      	ldr	r3, [pc, #84]	; (103fc <QSPI_N25Q256_exit_xip+0xa8>)
   103a6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   103a8:	2300      	movs	r3, #0
   103aa:	607b      	str	r3, [r7, #4]
   103ac:	e010      	b.n	103d0 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
   103ae:	2101      	movs	r1, #1
   103b0:	202a      	movs	r0, #42	; 0x2a
   103b2:	4b11      	ldr	r3, [pc, #68]	; (103f8 <QSPI_N25Q256_exit_xip+0xa4>)
   103b4:	4798      	blx	r3
		delay_us(1);
   103b6:	2001      	movs	r0, #1
   103b8:	4b10      	ldr	r3, [pc, #64]	; (103fc <QSPI_N25Q256_exit_xip+0xa8>)
   103ba:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   103bc:	2100      	movs	r1, #0
   103be:	202a      	movs	r0, #42	; 0x2a
   103c0:	4b0d      	ldr	r3, [pc, #52]	; (103f8 <QSPI_N25Q256_exit_xip+0xa4>)
   103c2:	4798      	blx	r3
		delay_us(1);
   103c4:	2001      	movs	r0, #1
   103c6:	4b0d      	ldr	r3, [pc, #52]	; (103fc <QSPI_N25Q256_exit_xip+0xa8>)
   103c8:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   103ca:	687b      	ldr	r3, [r7, #4]
   103cc:	3301      	adds	r3, #1
   103ce:	607b      	str	r3, [r7, #4]
   103d0:	687b      	ldr	r3, [r7, #4]
   103d2:	2b06      	cmp	r3, #6
   103d4:	ddeb      	ble.n	103ae <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
   103d6:	2101      	movs	r1, #1
   103d8:	202b      	movs	r0, #43	; 0x2b
   103da:	4b07      	ldr	r3, [pc, #28]	; (103f8 <QSPI_N25Q256_exit_xip+0xa4>)
   103dc:	4798      	blx	r3
	delay_us(1);
   103de:	2001      	movs	r0, #1
   103e0:	4b06      	ldr	r3, [pc, #24]	; (103fc <QSPI_N25Q256_exit_xip+0xa8>)
   103e2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   103e4:	4b06      	ldr	r3, [pc, #24]	; (10400 <QSPI_N25Q256_exit_xip+0xac>)
   103e6:	4798      	blx	r3
}
   103e8:	bf00      	nop
   103ea:	3708      	adds	r7, #8
   103ec:	46bd      	mov	sp, r7
   103ee:	bd80      	pop	{r7, pc}
   103f0:	000102c5 	.word	0x000102c5
   103f4:	000102e5 	.word	0x000102e5
   103f8:	0001031d 	.word	0x0001031d
   103fc:	00005fed 	.word	0x00005fed
   10400:	00004dfd 	.word	0x00004dfd

00010404 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
   10404:	b598      	push	{r3, r4, r7, lr}
   10406:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
   10408:	4806      	ldr	r0, [pc, #24]	; (10424 <spi_nor_flash_init+0x20>)
   1040a:	4b07      	ldr	r3, [pc, #28]	; (10428 <spi_nor_flash_init+0x24>)
   1040c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
   1040e:	2300      	movs	r3, #0
   10410:	4a06      	ldr	r2, [pc, #24]	; (1042c <spi_nor_flash_init+0x28>)
   10412:	4904      	ldr	r1, [pc, #16]	; (10424 <spi_nor_flash_init+0x20>)
   10414:	4806      	ldr	r0, [pc, #24]	; (10430 <spi_nor_flash_init+0x2c>)
   10416:	4c07      	ldr	r4, [pc, #28]	; (10434 <spi_nor_flash_init+0x30>)
   10418:	47a0      	blx	r4
   1041a:	4602      	mov	r2, r0
   1041c:	4b06      	ldr	r3, [pc, #24]	; (10438 <spi_nor_flash_init+0x34>)
   1041e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
   10420:	bf00      	nop
   10422:	bd98      	pop	{r3, r4, r7, pc}
   10424:	2000a1c0 	.word	0x2000a1c0
   10428:	000067bd 	.word	0x000067bd
   1042c:	00010355 	.word	0x00010355
   10430:	20008b48 	.word	0x20008b48
   10434:	00010871 	.word	0x00010871
   10438:	2000a3ec 	.word	0x2000a3ec

0001043c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
   1043c:	b580      	push	{r7, lr}
   1043e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
   10440:	4805      	ldr	r0, [pc, #20]	; (10458 <cdc_device_acm_init+0x1c>)
   10442:	4b06      	ldr	r3, [pc, #24]	; (1045c <cdc_device_acm_init+0x20>)
   10444:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
   10446:	4b06      	ldr	r3, [pc, #24]	; (10460 <cdc_device_acm_init+0x24>)
   10448:	4798      	blx	r3

	usbdc_start(single_desc);
   1044a:	4806      	ldr	r0, [pc, #24]	; (10464 <cdc_device_acm_init+0x28>)
   1044c:	4b06      	ldr	r3, [pc, #24]	; (10468 <cdc_device_acm_init+0x2c>)
   1044e:	4798      	blx	r3
	usbdc_attach();
   10450:	4b06      	ldr	r3, [pc, #24]	; (1046c <cdc_device_acm_init+0x30>)
   10452:	4798      	blx	r3
}
   10454:	bf00      	nop
   10456:	bd80      	pop	{r7, pc}
   10458:	20008b98 	.word	0x20008b98
   1045c:	00011f99 	.word	0x00011f99
   10460:	00011211 	.word	0x00011211
   10464:	200001a8 	.word	0x200001a8
   10468:	00012035 	.word	0x00012035
   1046c:	00012085 	.word	0x00012085

00010470 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
   10470:	b580      	push	{r7, lr}
   10472:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
   10474:	4b01      	ldr	r3, [pc, #4]	; (1047c <usb_init+0xc>)
   10476:	4798      	blx	r3
}
   10478:	bf00      	nop
   1047a:	bd80      	pop	{r7, pc}
   1047c:	0001043d 	.word	0x0001043d

00010480 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
   10480:	b480      	push	{r7}
   10482:	b085      	sub	sp, #20
   10484:	af00      	add	r7, sp, #0
   10486:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   10488:	f3ef 8310 	mrs	r3, PRIMASK
   1048c:	60fb      	str	r3, [r7, #12]
  return(result);
   1048e:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
   10490:	687b      	ldr	r3, [r7, #4]
   10492:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   10494:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   10496:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
   1049a:	bf00      	nop
   1049c:	3714      	adds	r7, #20
   1049e:	46bd      	mov	sp, r7
   104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   104a4:	4770      	bx	lr

000104a6 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
   104a6:	b480      	push	{r7}
   104a8:	b085      	sub	sp, #20
   104aa:	af00      	add	r7, sp, #0
   104ac:	6078      	str	r0, [r7, #4]
   104ae:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
   104b2:	687b      	ldr	r3, [r7, #4]
   104b4:	681b      	ldr	r3, [r3, #0]
   104b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   104b8:	68fb      	ldr	r3, [r7, #12]
   104ba:	f383 8810 	msr	PRIMASK, r3
}
   104be:	bf00      	nop
   104c0:	3714      	adds	r7, #20
   104c2:	46bd      	mov	sp, r7
   104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   104c8:	4770      	bx	lr
	...

000104cc <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
   104cc:	b580      	push	{r7, lr}
   104ce:	b08c      	sub	sp, #48	; 0x30
   104d0:	af00      	add	r7, sp, #0
   104d2:	6078      	str	r0, [r7, #4]
   104d4:	460b      	mov	r3, r1
   104d6:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   104d8:	687b      	ldr	r3, [r7, #4]
   104da:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   104dc:	687b      	ldr	r3, [r7, #4]
   104de:	681b      	ldr	r3, [r3, #0]
   104e0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
   104e2:	f107 030c 	add.w	r3, r7, #12
   104e6:	2200      	movs	r2, #0
   104e8:	601a      	str	r2, [r3, #0]
   104ea:	605a      	str	r2, [r3, #4]
   104ec:	609a      	str	r2, [r3, #8]
   104ee:	60da      	str	r2, [r3, #12]
   104f0:	611a      	str	r2, [r3, #16]
   104f2:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   104f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   104f6:	7b1b      	ldrb	r3, [r3, #12]
   104f8:	2b00      	cmp	r3, #0
   104fa:	d001      	beq.n	10500 <n25q256a_xip_confirm+0x34>
   104fc:	2206      	movs	r2, #6
   104fe:	e000      	b.n	10502 <n25q256a_xip_confirm+0x36>
   10500:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   10502:	7b3b      	ldrb	r3, [r7, #12]
   10504:	f362 0302 	bfi	r3, r2, #0, #3
   10508:	733b      	strb	r3, [r7, #12]
   1050a:	7b3b      	ldrb	r3, [r7, #12]
   1050c:	f043 0310 	orr.w	r3, r3, #16
   10510:	733b      	strb	r3, [r7, #12]
   10512:	7b3b      	ldrb	r3, [r7, #12]
   10514:	f043 0320 	orr.w	r3, r3, #32
   10518:	733b      	strb	r3, [r7, #12]
   1051a:	7b3b      	ldrb	r3, [r7, #12]
   1051c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10520:	733b      	strb	r3, [r7, #12]
   10522:	7b3b      	ldrb	r3, [r7, #12]
   10524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10528:	733b      	strb	r3, [r7, #12]
   1052a:	7b7b      	ldrb	r3, [r7, #13]
   1052c:	f043 0303 	orr.w	r3, r3, #3
   10530:	737b      	strb	r3, [r7, #13]
   10532:	7b7b      	ldrb	r3, [r7, #13]
   10534:	2201      	movs	r2, #1
   10536:	f362 1305 	bfi	r3, r2, #4, #2
   1053a:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
   1053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1053e:	7b1b      	ldrb	r3, [r3, #12]
   10540:	2b00      	cmp	r3, #0
   10542:	d001      	beq.n	10548 <n25q256a_xip_confirm+0x7c>
   10544:	2208      	movs	r2, #8
   10546:	e000      	b.n	1054a <n25q256a_xip_confirm+0x7e>
   10548:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   1054a:	7bbb      	ldrb	r3, [r7, #14]
   1054c:	f362 0304 	bfi	r3, r2, #0, #5
   10550:	73bb      	strb	r3, [r7, #14]
   10552:	230b      	movs	r3, #11
   10554:	743b      	strb	r3, [r7, #16]
   10556:	78fb      	ldrb	r3, [r7, #3]
   10558:	2b00      	cmp	r3, #0
   1055a:	d001      	beq.n	10560 <n25q256a_xip_confirm+0x94>
   1055c:	2300      	movs	r3, #0
   1055e:	e000      	b.n	10562 <n25q256a_xip_confirm+0x96>
   10560:	23ff      	movs	r3, #255	; 0xff
   10562:	747b      	strb	r3, [r7, #17]
   10564:	2301      	movs	r3, #1
   10566:	61bb      	str	r3, [r7, #24]
   10568:	f107 0327 	add.w	r3, r7, #39	; 0x27
   1056c:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
   1056e:	f107 030c 	add.w	r3, r7, #12
   10572:	4619      	mov	r1, r3
   10574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10576:	4b07      	ldr	r3, [pc, #28]	; (10594 <n25q256a_xip_confirm+0xc8>)
   10578:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
   1057a:	78fb      	ldrb	r3, [r7, #3]
   1057c:	2b00      	cmp	r3, #0
   1057e:	d001      	beq.n	10584 <n25q256a_xip_confirm+0xb8>
   10580:	2202      	movs	r2, #2
   10582:	e000      	b.n	10586 <n25q256a_xip_confirm+0xba>
   10584:	2201      	movs	r2, #1
   10586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10588:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   1058a:	2300      	movs	r3, #0
}
   1058c:	4618      	mov	r0, r3
   1058e:	3730      	adds	r7, #48	; 0x30
   10590:	46bd      	mov	sp, r7
   10592:	bd80      	pop	{r7, pc}
   10594:	00006835 	.word	0x00006835

00010598 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
   10598:	b580      	push	{r7, lr}
   1059a:	b08c      	sub	sp, #48	; 0x30
   1059c:	af00      	add	r7, sp, #0
   1059e:	6078      	str	r0, [r7, #4]
   105a0:	460b      	mov	r3, r1
   105a2:	70fb      	strb	r3, [r7, #3]
   105a4:	4613      	mov	r3, r2
   105a6:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
   105a8:	2300      	movs	r3, #0
   105aa:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
   105ac:	687b      	ldr	r3, [r7, #4]
   105ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
   105b0:	687b      	ldr	r3, [r7, #4]
   105b2:	681b      	ldr	r3, [r3, #0]
   105b4:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
   105b6:	f107 030c 	add.w	r3, r7, #12
   105ba:	2200      	movs	r2, #0
   105bc:	601a      	str	r2, [r3, #0]
   105be:	605a      	str	r2, [r3, #4]
   105c0:	609a      	str	r2, [r3, #8]
   105c2:	60da      	str	r2, [r3, #12]
   105c4:	611a      	str	r2, [r3, #16]
   105c6:	615a      	str	r2, [r3, #20]
   105c8:	78fb      	ldrb	r3, [r7, #3]
   105ca:	f003 0307 	and.w	r3, r3, #7
   105ce:	b2da      	uxtb	r2, r3
   105d0:	7b3b      	ldrb	r3, [r7, #12]
   105d2:	f362 0302 	bfi	r3, r2, #0, #3
   105d6:	733b      	strb	r3, [r7, #12]
   105d8:	7b3b      	ldrb	r3, [r7, #12]
   105da:	f043 0310 	orr.w	r3, r3, #16
   105de:	733b      	strb	r3, [r7, #12]
   105e0:	7b3b      	ldrb	r3, [r7, #12]
   105e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   105e6:	733b      	strb	r3, [r7, #12]
   105e8:	78bb      	ldrb	r3, [r7, #2]
   105ea:	743b      	strb	r3, [r7, #16]
   105ec:	2301      	movs	r3, #1
   105ee:	61bb      	str	r3, [r7, #24]
   105f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
   105f4:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
   105f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105f8:	7b5b      	ldrb	r3, [r3, #13]
   105fa:	2b00      	cmp	r3, #0
   105fc:	d003      	beq.n	10606 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
   105fe:	2100      	movs	r1, #0
   10600:	6878      	ldr	r0, [r7, #4]
   10602:	4b0a      	ldr	r3, [pc, #40]	; (1062c <n25q256a_read_reg+0x94>)
   10604:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   10606:	f107 030c 	add.w	r3, r7, #12
   1060a:	4619      	mov	r1, r3
   1060c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1060e:	4b08      	ldr	r3, [pc, #32]	; (10630 <n25q256a_read_reg+0x98>)
   10610:	4798      	blx	r3
	if (n25q->xip_mode) {
   10612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10614:	7b5b      	ldrb	r3, [r3, #13]
   10616:	2b00      	cmp	r3, #0
   10618:	d003      	beq.n	10622 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
   1061a:	2101      	movs	r1, #1
   1061c:	6878      	ldr	r0, [r7, #4]
   1061e:	4b03      	ldr	r3, [pc, #12]	; (1062c <n25q256a_read_reg+0x94>)
   10620:	4798      	blx	r3
	}
	return status;
   10622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   10624:	4618      	mov	r0, r3
   10626:	3730      	adds	r7, #48	; 0x30
   10628:	46bd      	mov	sp, r7
   1062a:	bd80      	pop	{r7, pc}
   1062c:	000104cd 	.word	0x000104cd
   10630:	00006835 	.word	0x00006835

00010634 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
   10634:	b580      	push	{r7, lr}
   10636:	b08c      	sub	sp, #48	; 0x30
   10638:	af00      	add	r7, sp, #0
   1063a:	60f8      	str	r0, [r7, #12]
   1063c:	607b      	str	r3, [r7, #4]
   1063e:	460b      	mov	r3, r1
   10640:	72fb      	strb	r3, [r7, #11]
   10642:	4613      	mov	r3, r2
   10644:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10646:	68fb      	ldr	r3, [r7, #12]
   10648:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   1064a:	68fb      	ldr	r3, [r7, #12]
   1064c:	681b      	ldr	r3, [r3, #0]
   1064e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
   10650:	f107 0310 	add.w	r3, r7, #16
   10654:	2200      	movs	r2, #0
   10656:	601a      	str	r2, [r3, #0]
   10658:	605a      	str	r2, [r3, #4]
   1065a:	609a      	str	r2, [r3, #8]
   1065c:	60da      	str	r2, [r3, #12]
   1065e:	611a      	str	r2, [r3, #16]
   10660:	615a      	str	r2, [r3, #20]
   10662:	7afb      	ldrb	r3, [r7, #11]
   10664:	f003 0307 	and.w	r3, r3, #7
   10668:	b2da      	uxtb	r2, r3
   1066a:	7c3b      	ldrb	r3, [r7, #16]
   1066c:	f362 0302 	bfi	r3, r2, #0, #3
   10670:	743b      	strb	r3, [r7, #16]
   10672:	7c3b      	ldrb	r3, [r7, #16]
   10674:	f043 0310 	orr.w	r3, r3, #16
   10678:	743b      	strb	r3, [r7, #16]
   1067a:	7c3b      	ldrb	r3, [r7, #16]
   1067c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10680:	743b      	strb	r3, [r7, #16]
   10682:	7c7b      	ldrb	r3, [r7, #17]
   10684:	2202      	movs	r2, #2
   10686:	f362 1305 	bfi	r3, r2, #4, #2
   1068a:	747b      	strb	r3, [r7, #17]
   1068c:	7abb      	ldrb	r3, [r7, #10]
   1068e:	753b      	strb	r3, [r7, #20]
   10690:	2301      	movs	r3, #1
   10692:	61fb      	str	r3, [r7, #28]
   10694:	1d3b      	adds	r3, r7, #4
   10696:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
   10698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1069a:	7b5b      	ldrb	r3, [r3, #13]
   1069c:	2b00      	cmp	r3, #0
   1069e:	d003      	beq.n	106a8 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
   106a0:	2100      	movs	r1, #0
   106a2:	68f8      	ldr	r0, [r7, #12]
   106a4:	4b09      	ldr	r3, [pc, #36]	; (106cc <n25q256a_write_reg+0x98>)
   106a6:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   106a8:	f107 0310 	add.w	r3, r7, #16
   106ac:	4619      	mov	r1, r3
   106ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   106b0:	4b07      	ldr	r3, [pc, #28]	; (106d0 <n25q256a_write_reg+0x9c>)
   106b2:	4798      	blx	r3
	if (n25q->xip_mode) {
   106b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   106b6:	7b5b      	ldrb	r3, [r3, #13]
   106b8:	2b00      	cmp	r3, #0
   106ba:	d003      	beq.n	106c4 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
   106bc:	2101      	movs	r1, #1
   106be:	68f8      	ldr	r0, [r7, #12]
   106c0:	4b02      	ldr	r3, [pc, #8]	; (106cc <n25q256a_write_reg+0x98>)
   106c2:	4798      	blx	r3
	}
}
   106c4:	bf00      	nop
   106c6:	3730      	adds	r7, #48	; 0x30
   106c8:	46bd      	mov	sp, r7
   106ca:	bd80      	pop	{r7, pc}
   106cc:	000104cd 	.word	0x000104cd
   106d0:	00006835 	.word	0x00006835

000106d4 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
   106d4:	b580      	push	{r7, lr}
   106d6:	b090      	sub	sp, #64	; 0x40
   106d8:	af00      	add	r7, sp, #0
   106da:	6078      	str	r0, [r7, #4]
   106dc:	460b      	mov	r3, r1
   106de:	70fb      	strb	r3, [r7, #3]
   106e0:	4613      	mov	r3, r2
   106e2:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   106e4:	687b      	ldr	r3, [r7, #4]
   106e6:	681b      	ldr	r3, [r3, #0]
   106e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
   106ea:	78bb      	ldrb	r3, [r7, #2]
   106ec:	2b00      	cmp	r3, #0
   106ee:	d001      	beq.n	106f4 <n25q256a_write_enable+0x20>
   106f0:	2306      	movs	r3, #6
   106f2:	e000      	b.n	106f6 <n25q256a_write_enable+0x22>
   106f4:	2304      	movs	r3, #4
   106f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
   106fa:	f107 0320 	add.w	r3, r7, #32
   106fe:	2200      	movs	r2, #0
   10700:	601a      	str	r2, [r3, #0]
   10702:	605a      	str	r2, [r3, #4]
   10704:	609a      	str	r2, [r3, #8]
   10706:	60da      	str	r2, [r3, #12]
   10708:	611a      	str	r2, [r3, #16]
   1070a:	615a      	str	r2, [r3, #20]
   1070c:	78fb      	ldrb	r3, [r7, #3]
   1070e:	f003 0307 	and.w	r3, r3, #7
   10712:	b2da      	uxtb	r2, r3
   10714:	f897 3020 	ldrb.w	r3, [r7, #32]
   10718:	f362 0302 	bfi	r3, r2, #0, #3
   1071c:	f887 3020 	strb.w	r3, [r7, #32]
   10720:	f897 3020 	ldrb.w	r3, [r7, #32]
   10724:	f043 0310 	orr.w	r3, r3, #16
   10728:	f887 3020 	strb.w	r3, [r7, #32]
   1072c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   10730:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
   10734:	f107 0308 	add.w	r3, r7, #8
   10738:	2200      	movs	r2, #0
   1073a:	601a      	str	r2, [r3, #0]
   1073c:	605a      	str	r2, [r3, #4]
   1073e:	609a      	str	r2, [r3, #8]
   10740:	60da      	str	r2, [r3, #12]
   10742:	611a      	str	r2, [r3, #16]
   10744:	615a      	str	r2, [r3, #20]
   10746:	78fb      	ldrb	r3, [r7, #3]
   10748:	f003 0307 	and.w	r3, r3, #7
   1074c:	b2da      	uxtb	r2, r3
   1074e:	7a3b      	ldrb	r3, [r7, #8]
   10750:	f362 0302 	bfi	r3, r2, #0, #3
   10754:	723b      	strb	r3, [r7, #8]
   10756:	7a3b      	ldrb	r3, [r7, #8]
   10758:	f043 0310 	orr.w	r3, r3, #16
   1075c:	723b      	strb	r3, [r7, #8]
   1075e:	7a3b      	ldrb	r3, [r7, #8]
   10760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10764:	723b      	strb	r3, [r7, #8]
   10766:	2305      	movs	r3, #5
   10768:	733b      	strb	r3, [r7, #12]
   1076a:	2301      	movs	r3, #1
   1076c:	617b      	str	r3, [r7, #20]
   1076e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   10772:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
   10774:	f107 0320 	add.w	r3, r7, #32
   10778:	4619      	mov	r1, r3
   1077a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1077c:	4b08      	ldr	r3, [pc, #32]	; (107a0 <n25q256a_write_enable+0xcc>)
   1077e:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
   10780:	f107 0308 	add.w	r3, r7, #8
   10784:	4619      	mov	r1, r3
   10786:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   10788:	4b05      	ldr	r3, [pc, #20]	; (107a0 <n25q256a_write_enable+0xcc>)
   1078a:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
   1078c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   10790:	f003 0302 	and.w	r3, r3, #2
   10794:	2b00      	cmp	r3, #0
   10796:	d0ed      	beq.n	10774 <n25q256a_write_enable+0xa0>
}
   10798:	bf00      	nop
   1079a:	3740      	adds	r7, #64	; 0x40
   1079c:	46bd      	mov	sp, r7
   1079e:	bd80      	pop	{r7, pc}
   107a0:	00006835 	.word	0x00006835

000107a4 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
   107a4:	b590      	push	{r4, r7, lr}
   107a6:	b087      	sub	sp, #28
   107a8:	af00      	add	r7, sp, #0
   107aa:	6078      	str	r0, [r7, #4]
   107ac:	460b      	mov	r3, r1
   107ae:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
   107b0:	687b      	ldr	r3, [r7, #4]
   107b2:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   107b4:	68fb      	ldr	r3, [r7, #12]
   107b6:	7b1b      	ldrb	r3, [r3, #12]
   107b8:	2b00      	cmp	r3, #0
   107ba:	d001      	beq.n	107c0 <n25q256a_switch_mode+0x1c>
   107bc:	2306      	movs	r3, #6
   107be:	e000      	b.n	107c2 <n25q256a_switch_mode+0x1e>
   107c0:	2300      	movs	r3, #0
   107c2:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   107c4:	7afb      	ldrb	r3, [r7, #11]
   107c6:	2265      	movs	r2, #101	; 0x65
   107c8:	4619      	mov	r1, r3
   107ca:	6878      	ldr	r0, [r7, #4]
   107cc:	4b25      	ldr	r3, [pc, #148]	; (10864 <n25q256a_switch_mode+0xc0>)
   107ce:	4798      	blx	r3
   107d0:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
   107d2:	2300      	movs	r3, #0
   107d4:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
   107d6:	68fb      	ldr	r3, [r7, #12]
   107d8:	7b1b      	ldrb	r3, [r3, #12]
   107da:	78fa      	ldrb	r2, [r7, #3]
   107dc:	429a      	cmp	r2, r3
   107de:	d03d      	beq.n	1085c <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
   107e0:	78fb      	ldrb	r3, [r7, #3]
   107e2:	2b00      	cmp	r3, #0
   107e4:	d00b      	beq.n	107fe <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
   107e6:	697b      	ldr	r3, [r7, #20]
   107e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   107ec:	2b00      	cmp	r3, #0
   107ee:	d011      	beq.n	10814 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
   107f0:	697b      	ldr	r3, [r7, #20]
   107f2:	f003 031f 	and.w	r3, r3, #31
   107f6:	617b      	str	r3, [r7, #20]
			modify = 1;
   107f8:	2301      	movs	r3, #1
   107fa:	74fb      	strb	r3, [r7, #19]
   107fc:	e00a      	b.n	10814 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
   107fe:	697b      	ldr	r3, [r7, #20]
   10800:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10804:	2b00      	cmp	r3, #0
   10806:	d105      	bne.n	10814 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
   10808:	697b      	ldr	r3, [r7, #20]
   1080a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   1080e:	617b      	str	r3, [r7, #20]
			modify = 1;
   10810:	2301      	movs	r3, #1
   10812:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
   10814:	7cfb      	ldrb	r3, [r7, #19]
   10816:	2b00      	cmp	r3, #0
   10818:	d021      	beq.n	1085e <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
   1081a:	68fb      	ldr	r3, [r7, #12]
   1081c:	78fa      	ldrb	r2, [r7, #3]
   1081e:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
   10820:	7afb      	ldrb	r3, [r7, #11]
   10822:	2201      	movs	r2, #1
   10824:	4619      	mov	r1, r3
   10826:	6878      	ldr	r0, [r7, #4]
   10828:	4b0f      	ldr	r3, [pc, #60]	; (10868 <n25q256a_switch_mode+0xc4>)
   1082a:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
   1082c:	7af9      	ldrb	r1, [r7, #11]
   1082e:	697b      	ldr	r3, [r7, #20]
   10830:	2261      	movs	r2, #97	; 0x61
   10832:	6878      	ldr	r0, [r7, #4]
   10834:	4c0d      	ldr	r4, [pc, #52]	; (1086c <n25q256a_switch_mode+0xc8>)
   10836:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10838:	78fb      	ldrb	r3, [r7, #3]
   1083a:	2b00      	cmp	r3, #0
   1083c:	d001      	beq.n	10842 <n25q256a_switch_mode+0x9e>
   1083e:	2306      	movs	r3, #6
   10840:	e000      	b.n	10844 <n25q256a_switch_mode+0xa0>
   10842:	2300      	movs	r3, #0
   10844:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   10846:	7afb      	ldrb	r3, [r7, #11]
   10848:	2265      	movs	r2, #101	; 0x65
   1084a:	4619      	mov	r1, r3
   1084c:	6878      	ldr	r0, [r7, #4]
   1084e:	4b05      	ldr	r3, [pc, #20]	; (10864 <n25q256a_switch_mode+0xc0>)
   10850:	4798      	blx	r3
   10852:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
   10854:	68fb      	ldr	r3, [r7, #12]
   10856:	78fa      	ldrb	r2, [r7, #3]
   10858:	731a      	strb	r2, [r3, #12]
   1085a:	e000      	b.n	1085e <n25q256a_switch_mode+0xba>
		return;
   1085c:	bf00      	nop
	}
}
   1085e:	371c      	adds	r7, #28
   10860:	46bd      	mov	sp, r7
   10862:	bd90      	pop	{r4, r7, pc}
   10864:	00010599 	.word	0x00010599
   10868:	000106d5 	.word	0x000106d5
   1086c:	00010635 	.word	0x00010635

00010870 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
   10870:	b580      	push	{r7, lr}
   10872:	b086      	sub	sp, #24
   10874:	af00      	add	r7, sp, #0
   10876:	60f8      	str	r0, [r7, #12]
   10878:	60b9      	str	r1, [r7, #8]
   1087a:	607a      	str	r2, [r7, #4]
   1087c:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
   1087e:	68fb      	ldr	r3, [r7, #12]
   10880:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
   10882:	4a0c      	ldr	r2, [pc, #48]	; (108b4 <n25q256a_construct+0x44>)
   10884:	68b9      	ldr	r1, [r7, #8]
   10886:	68f8      	ldr	r0, [r7, #12]
   10888:	4b0b      	ldr	r3, [pc, #44]	; (108b8 <n25q256a_construct+0x48>)
   1088a:	4798      	blx	r3
	n25q->quad_mode    = 0;
   1088c:	697b      	ldr	r3, [r7, #20]
   1088e:	2200      	movs	r2, #0
   10890:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
   10892:	697b      	ldr	r3, [r7, #20]
   10894:	2200      	movs	r2, #0
   10896:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
   10898:	697b      	ldr	r3, [r7, #20]
   1089a:	687a      	ldr	r2, [r7, #4]
   1089c:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
   1089e:	78fb      	ldrb	r3, [r7, #3]
   108a0:	4619      	mov	r1, r3
   108a2:	68f8      	ldr	r0, [r7, #12]
   108a4:	4b05      	ldr	r3, [pc, #20]	; (108bc <n25q256a_construct+0x4c>)
   108a6:	4798      	blx	r3
	return me;
   108a8:	68fb      	ldr	r3, [r7, #12]
}
   108aa:	4618      	mov	r0, r3
   108ac:	3718      	adds	r7, #24
   108ae:	46bd      	mov	sp, r7
   108b0:	bd80      	pop	{r7, pc}
   108b2:	bf00      	nop
   108b4:	0001f88c 	.word	0x0001f88c
   108b8:	00010d4d 	.word	0x00010d4d
   108bc:	000107a5 	.word	0x000107a5

000108c0 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   108c0:	b580      	push	{r7, lr}
   108c2:	b08c      	sub	sp, #48	; 0x30
   108c4:	af00      	add	r7, sp, #0
   108c6:	60f8      	str	r0, [r7, #12]
   108c8:	60b9      	str	r1, [r7, #8]
   108ca:	607a      	str	r2, [r7, #4]
   108cc:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   108ce:	68fb      	ldr	r3, [r7, #12]
   108d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   108d2:	68fb      	ldr	r3, [r7, #12]
   108d4:	681b      	ldr	r3, [r3, #0]
   108d6:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
   108d8:	f107 0310 	add.w	r3, r7, #16
   108dc:	2200      	movs	r2, #0
   108de:	601a      	str	r2, [r3, #0]
   108e0:	605a      	str	r2, [r3, #4]
   108e2:	609a      	str	r2, [r3, #8]
   108e4:	60da      	str	r2, [r3, #12]
   108e6:	611a      	str	r2, [r3, #16]
   108e8:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   108ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   108ec:	7b1b      	ldrb	r3, [r3, #12]
   108ee:	2b00      	cmp	r3, #0
   108f0:	d001      	beq.n	108f6 <n25q256a_read+0x36>
   108f2:	2206      	movs	r2, #6
   108f4:	e000      	b.n	108f8 <n25q256a_read+0x38>
   108f6:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
   108f8:	7c3b      	ldrb	r3, [r7, #16]
   108fa:	f362 0302 	bfi	r3, r2, #0, #3
   108fe:	743b      	strb	r3, [r7, #16]
   10900:	7c3b      	ldrb	r3, [r7, #16]
   10902:	f043 0310 	orr.w	r3, r3, #16
   10906:	743b      	strb	r3, [r7, #16]
   10908:	7c3b      	ldrb	r3, [r7, #16]
   1090a:	f043 0320 	orr.w	r3, r3, #32
   1090e:	743b      	strb	r3, [r7, #16]
   10910:	7c3b      	ldrb	r3, [r7, #16]
   10912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10916:	743b      	strb	r3, [r7, #16]
   10918:	7c7b      	ldrb	r3, [r7, #17]
   1091a:	2201      	movs	r2, #1
   1091c:	f362 1305 	bfi	r3, r2, #4, #2
   10920:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
   10922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10924:	7b1b      	ldrb	r3, [r3, #12]
   10926:	2b00      	cmp	r3, #0
   10928:	d001      	beq.n	1092e <n25q256a_read+0x6e>
   1092a:	220a      	movs	r2, #10
   1092c:	e000      	b.n	10930 <n25q256a_read+0x70>
   1092e:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
   10930:	7cbb      	ldrb	r3, [r7, #18]
   10932:	f362 0304 	bfi	r3, r2, #0, #5
   10936:	74bb      	strb	r3, [r7, #18]
   10938:	230b      	movs	r3, #11
   1093a:	753b      	strb	r3, [r7, #20]
   1093c:	687b      	ldr	r3, [r7, #4]
   1093e:	61bb      	str	r3, [r7, #24]
   10940:	683b      	ldr	r3, [r7, #0]
   10942:	61fb      	str	r3, [r7, #28]
   10944:	68bb      	ldr	r3, [r7, #8]
   10946:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
   10948:	f107 0310 	add.w	r3, r7, #16
   1094c:	4619      	mov	r1, r3
   1094e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10950:	4b03      	ldr	r3, [pc, #12]	; (10960 <n25q256a_read+0xa0>)
   10952:	4798      	blx	r3
	return ERR_NONE;
   10954:	2300      	movs	r3, #0
}
   10956:	4618      	mov	r0, r3
   10958:	3730      	adds	r7, #48	; 0x30
   1095a:	46bd      	mov	sp, r7
   1095c:	bd80      	pop	{r7, pc}
   1095e:	bf00      	nop
   10960:	00006835 	.word	0x00006835

00010964 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   10964:	b580      	push	{r7, lr}
   10966:	b08c      	sub	sp, #48	; 0x30
   10968:	af00      	add	r7, sp, #0
   1096a:	60f8      	str	r0, [r7, #12]
   1096c:	60b9      	str	r1, [r7, #8]
   1096e:	607a      	str	r2, [r7, #4]
   10970:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10972:	68fb      	ldr	r3, [r7, #12]
   10974:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10976:	68fb      	ldr	r3, [r7, #12]
   10978:	681b      	ldr	r3, [r3, #0]
   1097a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
   1097c:	f107 0310 	add.w	r3, r7, #16
   10980:	2200      	movs	r2, #0
   10982:	601a      	str	r2, [r3, #0]
   10984:	605a      	str	r2, [r3, #4]
   10986:	609a      	str	r2, [r3, #8]
   10988:	60da      	str	r2, [r3, #12]
   1098a:	611a      	str	r2, [r3, #16]
   1098c:	615a      	str	r2, [r3, #20]
   1098e:	7c3b      	ldrb	r3, [r7, #16]
   10990:	f043 0310 	orr.w	r3, r3, #16
   10994:	743b      	strb	r3, [r7, #16]
   10996:	7c3b      	ldrb	r3, [r7, #16]
   10998:	f043 0320 	orr.w	r3, r3, #32
   1099c:	743b      	strb	r3, [r7, #16]
   1099e:	7c3b      	ldrb	r3, [r7, #16]
   109a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   109a4:	743b      	strb	r3, [r7, #16]
   109a6:	7c7b      	ldrb	r3, [r7, #17]
   109a8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   109ac:	747b      	strb	r3, [r7, #17]
   109ae:	2302      	movs	r3, #2
   109b0:	753b      	strb	r3, [r7, #20]
   109b2:	687b      	ldr	r3, [r7, #4]
   109b4:	61bb      	str	r3, [r7, #24]
   109b6:	683b      	ldr	r3, [r7, #0]
   109b8:	61fb      	str	r3, [r7, #28]
   109ba:	68bb      	ldr	r3, [r7, #8]
   109bc:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   109be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   109c0:	7b1b      	ldrb	r3, [r3, #12]
   109c2:	2b00      	cmp	r3, #0
   109c4:	d001      	beq.n	109ca <n25q256a_write+0x66>
   109c6:	2206      	movs	r2, #6
   109c8:	e000      	b.n	109cc <n25q256a_write+0x68>
   109ca:	2200      	movs	r2, #0
   109cc:	7c3b      	ldrb	r3, [r7, #16]
   109ce:	f362 0302 	bfi	r3, r2, #0, #3
   109d2:	743b      	strb	r3, [r7, #16]
	while (length) {
   109d4:	e035      	b.n	10a42 <n25q256a_write+0xde>
		cmd.address = address;
   109d6:	687b      	ldr	r3, [r7, #4]
   109d8:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
   109da:	683b      	ldr	r3, [r7, #0]
   109dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   109e0:	d802      	bhi.n	109e8 <n25q256a_write+0x84>
			cmd.buf_len = length;
   109e2:	683b      	ldr	r3, [r7, #0]
   109e4:	61fb      	str	r3, [r7, #28]
   109e6:	e002      	b.n	109ee <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
   109e8:	f44f 7380 	mov.w	r3, #256	; 0x100
   109ec:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   109ee:	7c3b      	ldrb	r3, [r7, #16]
   109f0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   109f4:	b2db      	uxtb	r3, r3
   109f6:	2201      	movs	r2, #1
   109f8:	4619      	mov	r1, r3
   109fa:	68f8      	ldr	r0, [r7, #12]
   109fc:	4b19      	ldr	r3, [pc, #100]	; (10a64 <n25q256a_write+0x100>)
   109fe:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
   10a00:	f107 0310 	add.w	r3, r7, #16
   10a04:	4619      	mov	r1, r3
   10a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10a08:	4b17      	ldr	r3, [pc, #92]	; (10a68 <n25q256a_write+0x104>)
   10a0a:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   10a0c:	bf00      	nop
   10a0e:	7c3b      	ldrb	r3, [r7, #16]
   10a10:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10a14:	b2db      	uxtb	r3, r3
   10a16:	2270      	movs	r2, #112	; 0x70
   10a18:	4619      	mov	r1, r3
   10a1a:	68f8      	ldr	r0, [r7, #12]
   10a1c:	4b13      	ldr	r3, [pc, #76]	; (10a6c <n25q256a_write+0x108>)
   10a1e:	4798      	blx	r3
   10a20:	4603      	mov	r3, r0
   10a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10a26:	2b00      	cmp	r3, #0
   10a28:	d0f1      	beq.n	10a0e <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
   10a2a:	6a3a      	ldr	r2, [r7, #32]
   10a2c:	69fb      	ldr	r3, [r7, #28]
   10a2e:	4413      	add	r3, r2
   10a30:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
   10a32:	69fb      	ldr	r3, [r7, #28]
   10a34:	683a      	ldr	r2, [r7, #0]
   10a36:	1ad3      	subs	r3, r2, r3
   10a38:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
   10a3a:	69fb      	ldr	r3, [r7, #28]
   10a3c:	687a      	ldr	r2, [r7, #4]
   10a3e:	4413      	add	r3, r2
   10a40:	607b      	str	r3, [r7, #4]
	while (length) {
   10a42:	683b      	ldr	r3, [r7, #0]
   10a44:	2b00      	cmp	r3, #0
   10a46:	d1c6      	bne.n	109d6 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
   10a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a4a:	7b5b      	ldrb	r3, [r3, #13]
   10a4c:	2b00      	cmp	r3, #0
   10a4e:	d003      	beq.n	10a58 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
   10a50:	2101      	movs	r1, #1
   10a52:	68f8      	ldr	r0, [r7, #12]
   10a54:	4b06      	ldr	r3, [pc, #24]	; (10a70 <n25q256a_write+0x10c>)
   10a56:	4798      	blx	r3
	}
	return ERR_NONE;
   10a58:	2300      	movs	r3, #0
}
   10a5a:	4618      	mov	r0, r3
   10a5c:	3730      	adds	r7, #48	; 0x30
   10a5e:	46bd      	mov	sp, r7
   10a60:	bd80      	pop	{r7, pc}
   10a62:	bf00      	nop
   10a64:	000106d5 	.word	0x000106d5
   10a68:	00006835 	.word	0x00006835
   10a6c:	00010599 	.word	0x00010599
   10a70:	000104cd 	.word	0x000104cd

00010a74 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
   10a74:	b580      	push	{r7, lr}
   10a76:	b090      	sub	sp, #64	; 0x40
   10a78:	af00      	add	r7, sp, #0
   10a7a:	60f8      	str	r0, [r7, #12]
   10a7c:	60b9      	str	r1, [r7, #8]
   10a7e:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10a80:	68fb      	ldr	r3, [r7, #12]
   10a82:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10a84:	68fb      	ldr	r3, [r7, #12]
   10a86:	681b      	ldr	r3, [r3, #0]
   10a88:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
   10a8a:	f107 0314 	add.w	r3, r7, #20
   10a8e:	2200      	movs	r2, #0
   10a90:	601a      	str	r2, [r3, #0]
   10a92:	605a      	str	r2, [r3, #4]
   10a94:	609a      	str	r2, [r3, #8]
   10a96:	60da      	str	r2, [r3, #12]
   10a98:	611a      	str	r2, [r3, #16]
   10a9a:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   10a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10a9e:	7b1b      	ldrb	r3, [r3, #12]
   10aa0:	2b00      	cmp	r3, #0
   10aa2:	d001      	beq.n	10aa8 <n25q256a_erase+0x34>
   10aa4:	2206      	movs	r2, #6
   10aa6:	e000      	b.n	10aaa <n25q256a_erase+0x36>
   10aa8:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
   10aaa:	7d3b      	ldrb	r3, [r7, #20]
   10aac:	f362 0302 	bfi	r3, r2, #0, #3
   10ab0:	753b      	strb	r3, [r7, #20]
   10ab2:	7d3b      	ldrb	r3, [r7, #20]
   10ab4:	f043 0310 	orr.w	r3, r3, #16
   10ab8:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
   10aba:	687b      	ldr	r3, [r7, #4]
   10abc:	4a56      	ldr	r2, [pc, #344]	; (10c18 <n25q256a_erase+0x1a4>)
   10abe:	4293      	cmp	r3, r2
   10ac0:	bf94      	ite	ls
   10ac2:	2301      	movls	r3, #1
   10ac4:	2300      	movhi	r3, #0
   10ac6:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
   10ac8:	7d3b      	ldrb	r3, [r7, #20]
   10aca:	f362 1345 	bfi	r3, r2, #5, #1
   10ace:	753b      	strb	r3, [r7, #20]
   10ad0:	7d7b      	ldrb	r3, [r7, #21]
   10ad2:	2202      	movs	r2, #2
   10ad4:	f362 1305 	bfi	r3, r2, #4, #2
   10ad8:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
   10ada:	68bb      	ldr	r3, [r7, #8]
   10adc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
   10ade:	687b      	ldr	r3, [r7, #4]
   10ae0:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
   10ae2:	2300      	movs	r3, #0
   10ae4:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
   10ae6:	687b      	ldr	r3, [r7, #4]
   10ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
   10aec:	2b00      	cmp	r3, #0
   10aee:	d104      	bne.n	10afa <n25q256a_erase+0x86>
   10af0:	68bb      	ldr	r3, [r7, #8]
   10af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
   10af6:	2b00      	cmp	r3, #0
   10af8:	d002      	beq.n	10b00 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
   10afa:	f06f 030c 	mvn.w	r3, #12
   10afe:	e087      	b.n	10c10 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
   10b00:	687b      	ldr	r3, [r7, #4]
   10b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   10b06:	d368      	bcc.n	10bda <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
   10b08:	23c7      	movs	r3, #199	; 0xc7
   10b0a:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   10b0c:	7d3b      	ldrb	r3, [r7, #20]
   10b0e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10b12:	b2db      	uxtb	r3, r3
   10b14:	2201      	movs	r2, #1
   10b16:	4619      	mov	r1, r3
   10b18:	68f8      	ldr	r0, [r7, #12]
   10b1a:	4b40      	ldr	r3, [pc, #256]	; (10c1c <n25q256a_erase+0x1a8>)
   10b1c:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
   10b1e:	f107 0314 	add.w	r3, r7, #20
   10b22:	4619      	mov	r1, r3
   10b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10b26:	4b3e      	ldr	r3, [pc, #248]	; (10c20 <n25q256a_erase+0x1ac>)
   10b28:	4798      	blx	r3
   10b2a:	e059      	b.n	10be0 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
   10b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b2e:	b29b      	uxth	r3, r3
   10b30:	2b00      	cmp	r3, #0
   10b32:	d11f      	bne.n	10b74 <n25q256a_erase+0x100>
   10b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   10b3a:	d31b      	bcc.n	10b74 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
   10b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b3e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
   10b40:	23d8      	movs	r3, #216	; 0xd8
   10b42:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   10b44:	7d3b      	ldrb	r3, [r7, #20]
   10b46:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10b4a:	b2db      	uxtb	r3, r3
   10b4c:	2201      	movs	r2, #1
   10b4e:	4619      	mov	r1, r3
   10b50:	68f8      	ldr	r0, [r7, #12]
   10b52:	4b32      	ldr	r3, [pc, #200]	; (10c1c <n25q256a_erase+0x1a8>)
   10b54:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   10b56:	f107 0314 	add.w	r3, r7, #20
   10b5a:	4619      	mov	r1, r3
   10b5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10b5e:	4b30      	ldr	r3, [pc, #192]	; (10c20 <n25q256a_erase+0x1ac>)
   10b60:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
   10b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b64:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   10b68:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
   10b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10b6c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   10b70:	63bb      	str	r3, [r7, #56]	; 0x38
   10b72:	e023      	b.n	10bbc <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
   10b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   10b7a:	d31b      	bcc.n	10bb4 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
   10b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b7e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
   10b80:	2320      	movs	r3, #32
   10b82:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   10b84:	7d3b      	ldrb	r3, [r7, #20]
   10b86:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10b8a:	b2db      	uxtb	r3, r3
   10b8c:	2201      	movs	r2, #1
   10b8e:	4619      	mov	r1, r3
   10b90:	68f8      	ldr	r0, [r7, #12]
   10b92:	4b22      	ldr	r3, [pc, #136]	; (10c1c <n25q256a_erase+0x1a8>)
   10b94:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   10b96:	f107 0314 	add.w	r3, r7, #20
   10b9a:	4619      	mov	r1, r3
   10b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10b9e:	4b20      	ldr	r3, [pc, #128]	; (10c20 <n25q256a_erase+0x1ac>)
   10ba0:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
   10ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   10ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
   10baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10bac:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   10bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   10bb2:	e003      	b.n	10bbc <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
   10bb4:	f06f 030c 	mvn.w	r3, #12
   10bb8:	637b      	str	r3, [r7, #52]	; 0x34
				break;
   10bba:	e011      	b.n	10be0 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   10bbc:	bf00      	nop
   10bbe:	7d3b      	ldrb	r3, [r7, #20]
   10bc0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10bc4:	b2db      	uxtb	r3, r3
   10bc6:	2270      	movs	r2, #112	; 0x70
   10bc8:	4619      	mov	r1, r3
   10bca:	68f8      	ldr	r0, [r7, #12]
   10bcc:	4b15      	ldr	r3, [pc, #84]	; (10c24 <n25q256a_erase+0x1b0>)
   10bce:	4798      	blx	r3
   10bd0:	4603      	mov	r3, r0
   10bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10bd6:	2b00      	cmp	r3, #0
   10bd8:	d0f1      	beq.n	10bbe <n25q256a_erase+0x14a>
		while (temp_len > 0) {
   10bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10bdc:	2b00      	cmp	r3, #0
   10bde:	d1a5      	bne.n	10b2c <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   10be0:	bf00      	nop
   10be2:	7d3b      	ldrb	r3, [r7, #20]
   10be4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10be8:	b2db      	uxtb	r3, r3
   10bea:	2270      	movs	r2, #112	; 0x70
   10bec:	4619      	mov	r1, r3
   10bee:	68f8      	ldr	r0, [r7, #12]
   10bf0:	4b0c      	ldr	r3, [pc, #48]	; (10c24 <n25q256a_erase+0x1b0>)
   10bf2:	4798      	blx	r3
   10bf4:	4603      	mov	r3, r0
   10bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10bfa:	2b00      	cmp	r3, #0
   10bfc:	d0f1      	beq.n	10be2 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
   10bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10c00:	7b5b      	ldrb	r3, [r3, #13]
   10c02:	2b00      	cmp	r3, #0
   10c04:	d003      	beq.n	10c0e <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
   10c06:	2101      	movs	r1, #1
   10c08:	68f8      	ldr	r0, [r7, #12]
   10c0a:	4b07      	ldr	r3, [pc, #28]	; (10c28 <n25q256a_erase+0x1b4>)
   10c0c:	4798      	blx	r3
	}
	return rc;
   10c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   10c10:	4618      	mov	r0, r3
   10c12:	3740      	adds	r7, #64	; 0x40
   10c14:	46bd      	mov	sp, r7
   10c16:	bd80      	pop	{r7, pc}
   10c18:	001fffff 	.word	0x001fffff
   10c1c:	000106d5 	.word	0x000106d5
   10c20:	00006835 	.word	0x00006835
   10c24:	00010599 	.word	0x00010599
   10c28:	000104cd 	.word	0x000104cd

00010c2c <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
   10c2c:	b590      	push	{r4, r7, lr}
   10c2e:	b085      	sub	sp, #20
   10c30:	af00      	add	r7, sp, #0
   10c32:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
   10c34:	687b      	ldr	r3, [r7, #4]
   10c36:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10c38:	68fb      	ldr	r3, [r7, #12]
   10c3a:	7b1b      	ldrb	r3, [r3, #12]
   10c3c:	2b00      	cmp	r3, #0
   10c3e:	d001      	beq.n	10c44 <n25q256a_enable_xip+0x18>
   10c40:	2306      	movs	r3, #6
   10c42:	e000      	b.n	10c46 <n25q256a_enable_xip+0x1a>
   10c44:	2300      	movs	r3, #0
   10c46:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
   10c48:	68fb      	ldr	r3, [r7, #12]
   10c4a:	7b5b      	ldrb	r3, [r3, #13]
   10c4c:	2b00      	cmp	r3, #0
   10c4e:	d129      	bne.n	10ca4 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   10c50:	7afb      	ldrb	r3, [r7, #11]
   10c52:	2285      	movs	r2, #133	; 0x85
   10c54:	4619      	mov	r1, r3
   10c56:	6878      	ldr	r0, [r7, #4]
   10c58:	4b15      	ldr	r3, [pc, #84]	; (10cb0 <n25q256a_enable_xip+0x84>)
   10c5a:	4798      	blx	r3
   10c5c:	4603      	mov	r3, r0
   10c5e:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
   10c60:	7abb      	ldrb	r3, [r7, #10]
   10c62:	f003 0308 	and.w	r3, r3, #8
   10c66:	2b00      	cmp	r3, #0
   10c68:	d015      	beq.n	10c96 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
   10c6a:	7abb      	ldrb	r3, [r7, #10]
   10c6c:	f023 0308 	bic.w	r3, r3, #8
   10c70:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
   10c72:	7abb      	ldrb	r3, [r7, #10]
   10c74:	7af9      	ldrb	r1, [r7, #11]
   10c76:	2281      	movs	r2, #129	; 0x81
   10c78:	6878      	ldr	r0, [r7, #4]
   10c7a:	4c0e      	ldr	r4, [pc, #56]	; (10cb4 <n25q256a_enable_xip+0x88>)
   10c7c:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   10c7e:	bf00      	nop
   10c80:	7afb      	ldrb	r3, [r7, #11]
   10c82:	2270      	movs	r2, #112	; 0x70
   10c84:	4619      	mov	r1, r3
   10c86:	6878      	ldr	r0, [r7, #4]
   10c88:	4b09      	ldr	r3, [pc, #36]	; (10cb0 <n25q256a_enable_xip+0x84>)
   10c8a:	4798      	blx	r3
   10c8c:	4603      	mov	r3, r0
   10c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10c92:	2b00      	cmp	r3, #0
   10c94:	d0f4      	beq.n	10c80 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
   10c96:	68fb      	ldr	r3, [r7, #12]
   10c98:	2201      	movs	r2, #1
   10c9a:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
   10c9c:	2101      	movs	r1, #1
   10c9e:	6878      	ldr	r0, [r7, #4]
   10ca0:	4b05      	ldr	r3, [pc, #20]	; (10cb8 <n25q256a_enable_xip+0x8c>)
   10ca2:	4798      	blx	r3
	}
	return ERR_NONE;
   10ca4:	2300      	movs	r3, #0
}
   10ca6:	4618      	mov	r0, r3
   10ca8:	3714      	adds	r7, #20
   10caa:	46bd      	mov	sp, r7
   10cac:	bd90      	pop	{r4, r7, pc}
   10cae:	bf00      	nop
   10cb0:	00010599 	.word	0x00010599
   10cb4:	00010635 	.word	0x00010635
   10cb8:	000104cd 	.word	0x000104cd

00010cbc <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
   10cbc:	b580      	push	{r7, lr}
   10cbe:	b086      	sub	sp, #24
   10cc0:	af00      	add	r7, sp, #0
   10cc2:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10cc4:	687b      	ldr	r3, [r7, #4]
   10cc6:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10cc8:	687b      	ldr	r3, [r7, #4]
   10cca:	681b      	ldr	r3, [r3, #0]
   10ccc:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10cce:	697b      	ldr	r3, [r7, #20]
   10cd0:	7b1b      	ldrb	r3, [r3, #12]
   10cd2:	2b00      	cmp	r3, #0
   10cd4:	d001      	beq.n	10cda <n25q256a_disable_xip+0x1e>
   10cd6:	2306      	movs	r3, #6
   10cd8:	e000      	b.n	10cdc <n25q256a_disable_xip+0x20>
   10cda:	2300      	movs	r3, #0
   10cdc:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
   10cde:	2100      	movs	r1, #0
   10ce0:	6878      	ldr	r0, [r7, #4]
   10ce2:	4b15      	ldr	r3, [pc, #84]	; (10d38 <n25q256a_disable_xip+0x7c>)
   10ce4:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   10ce6:	7bfb      	ldrb	r3, [r7, #15]
   10ce8:	2285      	movs	r2, #133	; 0x85
   10cea:	4619      	mov	r1, r3
   10cec:	6878      	ldr	r0, [r7, #4]
   10cee:	4b13      	ldr	r3, [pc, #76]	; (10d3c <n25q256a_disable_xip+0x80>)
   10cf0:	4798      	blx	r3
   10cf2:	4603      	mov	r3, r0
   10cf4:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
   10cf6:	7bbb      	ldrb	r3, [r7, #14]
   10cf8:	f003 0308 	and.w	r3, r3, #8
   10cfc:	2b00      	cmp	r3, #0
   10cfe:	d113      	bne.n	10d28 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
   10d00:	697b      	ldr	r3, [r7, #20]
   10d02:	689b      	ldr	r3, [r3, #8]
   10d04:	2b00      	cmp	r3, #0
   10d06:	d00f      	beq.n	10d28 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
   10d08:	693b      	ldr	r3, [r7, #16]
   10d0a:	681b      	ldr	r3, [r3, #0]
   10d0c:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
   10d0e:	6938      	ldr	r0, [r7, #16]
   10d10:	4b0b      	ldr	r3, [pc, #44]	; (10d40 <n25q256a_disable_xip+0x84>)
   10d12:	4798      	blx	r3
			n25q->pin_exit_xip();
   10d14:	697b      	ldr	r3, [r7, #20]
   10d16:	689b      	ldr	r3, [r3, #8]
   10d18:	4798      	blx	r3

			qspi_sync_init(descr, hw);
   10d1a:	68b9      	ldr	r1, [r7, #8]
   10d1c:	6938      	ldr	r0, [r7, #16]
   10d1e:	4b09      	ldr	r3, [pc, #36]	; (10d44 <n25q256a_disable_xip+0x88>)
   10d20:	4798      	blx	r3
			qspi_sync_enable(descr);
   10d22:	6938      	ldr	r0, [r7, #16]
   10d24:	4b08      	ldr	r3, [pc, #32]	; (10d48 <n25q256a_disable_xip+0x8c>)
   10d26:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
   10d28:	697b      	ldr	r3, [r7, #20]
   10d2a:	2200      	movs	r2, #0
   10d2c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   10d2e:	2300      	movs	r3, #0
}
   10d30:	4618      	mov	r0, r3
   10d32:	3718      	adds	r7, #24
   10d34:	46bd      	mov	sp, r7
   10d36:	bd80      	pop	{r7, pc}
   10d38:	000104cd 	.word	0x000104cd
   10d3c:	00010599 	.word	0x00010599
   10d40:	000067f9 	.word	0x000067f9
   10d44:	00006771 	.word	0x00006771
   10d48:	000067bd 	.word	0x000067bd

00010d4c <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
   10d4c:	b480      	push	{r7}
   10d4e:	b085      	sub	sp, #20
   10d50:	af00      	add	r7, sp, #0
   10d52:	60f8      	str	r0, [r7, #12]
   10d54:	60b9      	str	r1, [r7, #8]
   10d56:	607a      	str	r2, [r7, #4]
	me->io        = io;
   10d58:	68fb      	ldr	r3, [r7, #12]
   10d5a:	68ba      	ldr	r2, [r7, #8]
   10d5c:	601a      	str	r2, [r3, #0]
	me->interface = interface;
   10d5e:	68fb      	ldr	r3, [r7, #12]
   10d60:	687a      	ldr	r2, [r7, #4]
   10d62:	605a      	str	r2, [r3, #4]

	return me;
   10d64:	68fb      	ldr	r3, [r7, #12]
}
   10d66:	4618      	mov	r0, r3
   10d68:	3714      	adds	r7, #20
   10d6a:	46bd      	mov	sp, r7
   10d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d70:	4770      	bx	lr

00010d72 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
   10d72:	b480      	push	{r7}
   10d74:	b083      	sub	sp, #12
   10d76:	af00      	add	r7, sp, #0
   10d78:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   10d7a:	687b      	ldr	r3, [r7, #4]
   10d7c:	781b      	ldrb	r3, [r3, #0]
   10d7e:	b29a      	uxth	r2, r3
   10d80:	687b      	ldr	r3, [r7, #4]
   10d82:	3301      	adds	r3, #1
   10d84:	781b      	ldrb	r3, [r3, #0]
   10d86:	b29b      	uxth	r3, r3
   10d88:	021b      	lsls	r3, r3, #8
   10d8a:	b29b      	uxth	r3, r3
   10d8c:	4413      	add	r3, r2
   10d8e:	b29b      	uxth	r3, r3
}
   10d90:	4618      	mov	r0, r3
   10d92:	370c      	adds	r7, #12
   10d94:	46bd      	mov	sp, r7
   10d96:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d9a:	4770      	bx	lr

00010d9c <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
   10d9c:	b480      	push	{r7}
   10d9e:	b083      	sub	sp, #12
   10da0:	af00      	add	r7, sp, #0
   10da2:	6078      	str	r0, [r7, #4]
	return desc[0];
   10da4:	687b      	ldr	r3, [r7, #4]
   10da6:	781b      	ldrb	r3, [r3, #0]
}
   10da8:	4618      	mov	r0, r3
   10daa:	370c      	adds	r7, #12
   10dac:	46bd      	mov	sp, r7
   10dae:	f85d 7b04 	ldr.w	r7, [sp], #4
   10db2:	4770      	bx	lr

00010db4 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
   10db4:	b580      	push	{r7, lr}
   10db6:	b082      	sub	sp, #8
   10db8:	af00      	add	r7, sp, #0
   10dba:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   10dbc:	6878      	ldr	r0, [r7, #4]
   10dbe:	4b05      	ldr	r3, [pc, #20]	; (10dd4 <usb_desc_next+0x20>)
   10dc0:	4798      	blx	r3
   10dc2:	4603      	mov	r3, r0
   10dc4:	461a      	mov	r2, r3
   10dc6:	687b      	ldr	r3, [r7, #4]
   10dc8:	4413      	add	r3, r2
}
   10dca:	4618      	mov	r0, r3
   10dcc:	3708      	adds	r7, #8
   10dce:	46bd      	mov	sp, r7
   10dd0:	bd80      	pop	{r7, pc}
   10dd2:	bf00      	nop
   10dd4:	00010d9d 	.word	0x00010d9d

00010dd8 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   10dd8:	b580      	push	{r7, lr}
   10dda:	b08c      	sub	sp, #48	; 0x30
   10ddc:	af00      	add	r7, sp, #0
   10dde:	6078      	str	r0, [r7, #4]
   10de0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   10de2:	687b      	ldr	r3, [r7, #4]
   10de4:	689b      	ldr	r3, [r3, #8]
   10de6:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
   10de8:	683b      	ldr	r3, [r7, #0]
   10dea:	681b      	ldr	r3, [r3, #0]
   10dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   10dee:	2300      	movs	r3, #0
   10df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   10df4:	e08f      	b.n	10f16 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
   10df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10df8:	2b00      	cmp	r3, #0
   10dfa:	d102      	bne.n	10e02 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
   10dfc:	f06f 0309 	mvn.w	r3, #9
   10e00:	e092      	b.n	10f28 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
   10e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e04:	789b      	ldrb	r3, [r3, #2]
   10e06:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
   10e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e0a:	795b      	ldrb	r3, [r3, #5]
   10e0c:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
   10e0e:	7c7b      	ldrb	r3, [r7, #17]
   10e10:	2b02      	cmp	r3, #2
   10e12:	d002      	beq.n	10e1a <cdcdf_acm_enable+0x42>
   10e14:	7c7b      	ldrb	r3, [r7, #17]
   10e16:	2b0a      	cmp	r3, #10
   10e18:	d121      	bne.n	10e5e <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   10e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10e1e:	6a3a      	ldr	r2, [r7, #32]
   10e20:	5cd2      	ldrb	r2, [r2, r3]
   10e22:	7bbb      	ldrb	r3, [r7, #14]
   10e24:	429a      	cmp	r2, r3
   10e26:	d102      	bne.n	10e2e <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
   10e28:	f06f 0311 	mvn.w	r3, #17
   10e2c:	e07c      	b.n	10f28 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
   10e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10e32:	6a3a      	ldr	r2, [r7, #32]
   10e34:	5cd3      	ldrb	r3, [r2, r3]
   10e36:	2bff      	cmp	r3, #255	; 0xff
   10e38:	d002      	beq.n	10e40 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
   10e3a:	f06f 031b 	mvn.w	r3, #27
   10e3e:	e073      	b.n	10f28 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
   10e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10e44:	7bb9      	ldrb	r1, [r7, #14]
   10e46:	6a3a      	ldr	r2, [r7, #32]
   10e48:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   10e4a:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
   10e4c:	683b      	ldr	r3, [r7, #0]
   10e4e:	685b      	ldr	r3, [r3, #4]
   10e50:	2205      	movs	r2, #5
   10e52:	4619      	mov	r1, r3
   10e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10e56:	4b36      	ldr	r3, [pc, #216]	; (10f30 <cdcdf_acm_enable+0x158>)
   10e58:	4798      	blx	r3
   10e5a:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   10e5c:	e047      	b.n	10eee <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
   10e5e:	f06f 0309 	mvn.w	r3, #9
   10e62:	e061      	b.n	10f28 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
   10e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10e66:	789b      	ldrb	r3, [r3, #2]
   10e68:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
   10e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10e6c:	78db      	ldrb	r3, [r3, #3]
   10e6e:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
   10e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10e72:	3304      	adds	r3, #4
   10e74:	4618      	mov	r0, r3
   10e76:	4b2f      	ldr	r3, [pc, #188]	; (10f34 <cdcdf_acm_enable+0x15c>)
   10e78:	4798      	blx	r3
   10e7a:	4603      	mov	r3, r0
   10e7c:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
   10e7e:	7ebb      	ldrb	r3, [r7, #26]
   10e80:	7ef9      	ldrb	r1, [r7, #27]
   10e82:	8bba      	ldrh	r2, [r7, #28]
   10e84:	4618      	mov	r0, r3
   10e86:	4b2c      	ldr	r3, [pc, #176]	; (10f38 <cdcdf_acm_enable+0x160>)
   10e88:	4798      	blx	r3
   10e8a:	4603      	mov	r3, r0
   10e8c:	2b00      	cmp	r3, #0
   10e8e:	d002      	beq.n	10e96 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
   10e90:	f06f 0313 	mvn.w	r3, #19
   10e94:	e048      	b.n	10f28 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
   10e96:	7ebb      	ldrb	r3, [r7, #26]
   10e98:	b25b      	sxtb	r3, r3
   10e9a:	2b00      	cmp	r3, #0
   10e9c:	da0f      	bge.n	10ebe <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
   10e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10ea2:	7eb9      	ldrb	r1, [r7, #26]
   10ea4:	6a3a      	ldr	r2, [r7, #32]
   10ea6:	4413      	add	r3, r2
   10ea8:	460a      	mov	r2, r1
   10eaa:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
   10eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10eb0:	6a3a      	ldr	r2, [r7, #32]
   10eb2:	4413      	add	r3, r2
   10eb4:	789b      	ldrb	r3, [r3, #2]
   10eb6:	4618      	mov	r0, r3
   10eb8:	4b20      	ldr	r3, [pc, #128]	; (10f3c <cdcdf_acm_enable+0x164>)
   10eba:	4798      	blx	r3
   10ebc:	e007      	b.n	10ece <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
   10ebe:	7eba      	ldrb	r2, [r7, #26]
   10ec0:	6a3b      	ldr	r3, [r7, #32]
   10ec2:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
   10ec4:	6a3b      	ldr	r3, [r7, #32]
   10ec6:	791b      	ldrb	r3, [r3, #4]
   10ec8:	4618      	mov	r0, r3
   10eca:	4b1c      	ldr	r3, [pc, #112]	; (10f3c <cdcdf_acm_enable+0x164>)
   10ecc:	4798      	blx	r3
			}
			desc->sod = ep;
   10ece:	683b      	ldr	r3, [r7, #0]
   10ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10ed2:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
   10ed4:	683b      	ldr	r3, [r7, #0]
   10ed6:	681b      	ldr	r3, [r3, #0]
   10ed8:	4618      	mov	r0, r3
   10eda:	4b19      	ldr	r3, [pc, #100]	; (10f40 <cdcdf_acm_enable+0x168>)
   10edc:	4798      	blx	r3
   10ede:	4602      	mov	r2, r0
   10ee0:	683b      	ldr	r3, [r7, #0]
   10ee2:	685b      	ldr	r3, [r3, #4]
   10ee4:	4619      	mov	r1, r3
   10ee6:	4610      	mov	r0, r2
   10ee8:	4b16      	ldr	r3, [pc, #88]	; (10f44 <cdcdf_acm_enable+0x16c>)
   10eea:	4798      	blx	r3
   10eec:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   10eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	d1b7      	bne.n	10e64 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
   10ef4:	683b      	ldr	r3, [r7, #0]
   10ef6:	681b      	ldr	r3, [r3, #0]
   10ef8:	4618      	mov	r0, r3
   10efa:	4b11      	ldr	r3, [pc, #68]	; (10f40 <cdcdf_acm_enable+0x168>)
   10efc:	4798      	blx	r3
   10efe:	683b      	ldr	r3, [r7, #0]
   10f00:	685b      	ldr	r3, [r3, #4]
   10f02:	2204      	movs	r2, #4
   10f04:	4619      	mov	r1, r3
   10f06:	4b0a      	ldr	r3, [pc, #40]	; (10f30 <cdcdf_acm_enable+0x158>)
   10f08:	4798      	blx	r3
   10f0a:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   10f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10f10:	3301      	adds	r3, #1
   10f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   10f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10f1a:	2b01      	cmp	r3, #1
   10f1c:	f67f af6b 	bls.w	10df6 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
   10f20:	4b09      	ldr	r3, [pc, #36]	; (10f48 <cdcdf_acm_enable+0x170>)
   10f22:	2201      	movs	r2, #1
   10f24:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   10f26:	2300      	movs	r3, #0
}
   10f28:	4618      	mov	r0, r3
   10f2a:	3730      	adds	r7, #48	; 0x30
   10f2c:	46bd      	mov	sp, r7
   10f2e:	bd80      	pop	{r7, pc}
   10f30:	00012199 	.word	0x00012199
   10f34:	00010d73 	.word	0x00010d73
   10f38:	00007925 	.word	0x00007925
   10f3c:	00007a11 	.word	0x00007a11
   10f40:	00010db5 	.word	0x00010db5
   10f44:	000121f5 	.word	0x000121f5
   10f48:	20008be4 	.word	0x20008be4

00010f4c <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   10f4c:	b580      	push	{r7, lr}
   10f4e:	b088      	sub	sp, #32
   10f50:	af00      	add	r7, sp, #0
   10f52:	6078      	str	r0, [r7, #4]
   10f54:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   10f56:	687b      	ldr	r3, [r7, #4]
   10f58:	689b      	ldr	r3, [r3, #8]
   10f5a:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
   10f5c:	683b      	ldr	r3, [r7, #0]
   10f5e:	2b00      	cmp	r3, #0
   10f60:	d00c      	beq.n	10f7c <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
   10f62:	683b      	ldr	r3, [r7, #0]
   10f64:	681b      	ldr	r3, [r3, #0]
   10f66:	795b      	ldrb	r3, [r3, #5]
   10f68:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
   10f6a:	7c7b      	ldrb	r3, [r7, #17]
   10f6c:	2b02      	cmp	r3, #2
   10f6e:	d005      	beq.n	10f7c <cdcdf_acm_disable+0x30>
   10f70:	7c7b      	ldrb	r3, [r7, #17]
   10f72:	2b0a      	cmp	r3, #10
   10f74:	d002      	beq.n	10f7c <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
   10f76:	f06f 0309 	mvn.w	r3, #9
   10f7a:	e035      	b.n	10fe8 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
   10f7c:	2300      	movs	r3, #0
   10f7e:	77fb      	strb	r3, [r7, #31]
   10f80:	e01f      	b.n	10fc2 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
   10f82:	7ffb      	ldrb	r3, [r7, #31]
   10f84:	69ba      	ldr	r2, [r7, #24]
   10f86:	5cd3      	ldrb	r3, [r2, r3]
   10f88:	2bff      	cmp	r3, #255	; 0xff
   10f8a:	d016      	beq.n	10fba <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
   10f8c:	7ffb      	ldrb	r3, [r7, #31]
   10f8e:	69ba      	ldr	r2, [r7, #24]
   10f90:	21ff      	movs	r1, #255	; 0xff
   10f92:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
   10f94:	7ffb      	ldrb	r3, [r7, #31]
   10f96:	69ba      	ldr	r2, [r7, #24]
   10f98:	4413      	add	r3, r2
   10f9a:	789b      	ldrb	r3, [r3, #2]
   10f9c:	2bff      	cmp	r3, #255	; 0xff
   10f9e:	d00d      	beq.n	10fbc <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
   10fa0:	7ffb      	ldrb	r3, [r7, #31]
   10fa2:	69ba      	ldr	r2, [r7, #24]
   10fa4:	4413      	add	r3, r2
   10fa6:	789b      	ldrb	r3, [r3, #2]
   10fa8:	4618      	mov	r0, r3
   10faa:	4b11      	ldr	r3, [pc, #68]	; (10ff0 <cdcdf_acm_disable+0xa4>)
   10fac:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
   10fae:	7ffb      	ldrb	r3, [r7, #31]
   10fb0:	69ba      	ldr	r2, [r7, #24]
   10fb2:	4413      	add	r3, r2
   10fb4:	22ff      	movs	r2, #255	; 0xff
   10fb6:	709a      	strb	r2, [r3, #2]
   10fb8:	e000      	b.n	10fbc <cdcdf_acm_disable+0x70>
			continue;
   10fba:	bf00      	nop
	for (i = 0; i < 2; i++) {
   10fbc:	7ffb      	ldrb	r3, [r7, #31]
   10fbe:	3301      	adds	r3, #1
   10fc0:	77fb      	strb	r3, [r7, #31]
   10fc2:	7ffb      	ldrb	r3, [r7, #31]
   10fc4:	2b01      	cmp	r3, #1
   10fc6:	d9dc      	bls.n	10f82 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
   10fc8:	69bb      	ldr	r3, [r7, #24]
   10fca:	791b      	ldrb	r3, [r3, #4]
   10fcc:	2bff      	cmp	r3, #255	; 0xff
   10fce:	d007      	beq.n	10fe0 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
   10fd0:	69bb      	ldr	r3, [r7, #24]
   10fd2:	791b      	ldrb	r3, [r3, #4]
   10fd4:	4618      	mov	r0, r3
   10fd6:	4b06      	ldr	r3, [pc, #24]	; (10ff0 <cdcdf_acm_disable+0xa4>)
   10fd8:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
   10fda:	69bb      	ldr	r3, [r7, #24]
   10fdc:	22ff      	movs	r2, #255	; 0xff
   10fde:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
   10fe0:	4b04      	ldr	r3, [pc, #16]	; (10ff4 <cdcdf_acm_disable+0xa8>)
   10fe2:	2200      	movs	r2, #0
   10fe4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   10fe6:	2300      	movs	r3, #0
}
   10fe8:	4618      	mov	r0, r3
   10fea:	3720      	adds	r7, #32
   10fec:	46bd      	mov	sp, r7
   10fee:	bd80      	pop	{r7, pc}
   10ff0:	000079c1 	.word	0x000079c1
   10ff4:	20008be4 	.word	0x20008be4

00010ff8 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
   10ff8:	b580      	push	{r7, lr}
   10ffa:	b084      	sub	sp, #16
   10ffc:	af00      	add	r7, sp, #0
   10ffe:	60f8      	str	r0, [r7, #12]
   11000:	460b      	mov	r3, r1
   11002:	607a      	str	r2, [r7, #4]
   11004:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
   11006:	7afb      	ldrb	r3, [r7, #11]
   11008:	2b01      	cmp	r3, #1
   1100a:	d009      	beq.n	11020 <cdcdf_acm_ctrl+0x28>
   1100c:	2b02      	cmp	r3, #2
   1100e:	d00d      	beq.n	1102c <cdcdf_acm_ctrl+0x34>
   11010:	2b00      	cmp	r3, #0
   11012:	d10e      	bne.n	11032 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
   11014:	6879      	ldr	r1, [r7, #4]
   11016:	68f8      	ldr	r0, [r7, #12]
   11018:	4b09      	ldr	r3, [pc, #36]	; (11040 <cdcdf_acm_ctrl+0x48>)
   1101a:	4798      	blx	r3
   1101c:	4603      	mov	r3, r0
   1101e:	e00a      	b.n	11036 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
   11020:	6879      	ldr	r1, [r7, #4]
   11022:	68f8      	ldr	r0, [r7, #12]
   11024:	4b07      	ldr	r3, [pc, #28]	; (11044 <cdcdf_acm_ctrl+0x4c>)
   11026:	4798      	blx	r3
   11028:	4603      	mov	r3, r0
   1102a:	e004      	b.n	11036 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
   1102c:	f06f 031a 	mvn.w	r3, #26
   11030:	e001      	b.n	11036 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
   11032:	f06f 030c 	mvn.w	r3, #12
	}
}
   11036:	4618      	mov	r0, r3
   11038:	3710      	adds	r7, #16
   1103a:	46bd      	mov	sp, r7
   1103c:	bd80      	pop	{r7, pc}
   1103e:	bf00      	nop
   11040:	00010dd9 	.word	0x00010dd9
   11044:	00010f4d 	.word	0x00010f4d

00011048 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11048:	b590      	push	{r4, r7, lr}
   1104a:	b087      	sub	sp, #28
   1104c:	af00      	add	r7, sp, #0
   1104e:	4603      	mov	r3, r0
   11050:	6039      	str	r1, [r7, #0]
   11052:	71fb      	strb	r3, [r7, #7]
   11054:	4613      	mov	r3, r2
   11056:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
   11058:	683b      	ldr	r3, [r7, #0]
   1105a:	799a      	ldrb	r2, [r3, #6]
   1105c:	79db      	ldrb	r3, [r3, #7]
   1105e:	021b      	lsls	r3, r3, #8
   11060:	4313      	orrs	r3, r2
   11062:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
   11064:	4b2b      	ldr	r3, [pc, #172]	; (11114 <cdcdf_acm_set_req+0xcc>)
   11066:	4798      	blx	r3
   11068:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
   1106a:	683b      	ldr	r3, [r7, #0]
   1106c:	785b      	ldrb	r3, [r3, #1]
   1106e:	2b20      	cmp	r3, #32
   11070:	d002      	beq.n	11078 <cdcdf_acm_set_req+0x30>
   11072:	2b22      	cmp	r3, #34	; 0x22
   11074:	d034      	beq.n	110e0 <cdcdf_acm_set_req+0x98>
   11076:	e046      	b.n	11106 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   11078:	8afb      	ldrh	r3, [r7, #22]
   1107a:	2b07      	cmp	r3, #7
   1107c:	d002      	beq.n	11084 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
   1107e:	f04f 33ff 	mov.w	r3, #4294967295
   11082:	e042      	b.n	1110a <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
   11084:	79bb      	ldrb	r3, [r7, #6]
   11086:	2b00      	cmp	r3, #0
   11088:	d107      	bne.n	1109a <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
   1108a:	8afa      	ldrh	r2, [r7, #22]
   1108c:	79f8      	ldrb	r0, [r7, #7]
   1108e:	2300      	movs	r3, #0
   11090:	6939      	ldr	r1, [r7, #16]
   11092:	4c21      	ldr	r4, [pc, #132]	; (11118 <cdcdf_acm_set_req+0xd0>)
   11094:	47a0      	blx	r4
   11096:	4603      	mov	r3, r0
   11098:	e037      	b.n	1110a <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
   1109a:	693a      	ldr	r2, [r7, #16]
   1109c:	f107 0308 	add.w	r3, r7, #8
   110a0:	6810      	ldr	r0, [r2, #0]
   110a2:	6018      	str	r0, [r3, #0]
   110a4:	8891      	ldrh	r1, [r2, #4]
   110a6:	7992      	ldrb	r2, [r2, #6]
   110a8:	8099      	strh	r1, [r3, #4]
   110aa:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
   110ac:	4b1b      	ldr	r3, [pc, #108]	; (1111c <cdcdf_acm_set_req+0xd4>)
   110ae:	681b      	ldr	r3, [r3, #0]
   110b0:	2b00      	cmp	r3, #0
   110b2:	d008      	beq.n	110c6 <cdcdf_acm_set_req+0x7e>
   110b4:	4b19      	ldr	r3, [pc, #100]	; (1111c <cdcdf_acm_set_req+0xd4>)
   110b6:	681b      	ldr	r3, [r3, #0]
   110b8:	f107 0208 	add.w	r2, r7, #8
   110bc:	4610      	mov	r0, r2
   110be:	4798      	blx	r3
   110c0:	4603      	mov	r3, r0
   110c2:	2b00      	cmp	r3, #0
   110c4:	d00a      	beq.n	110dc <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
   110c6:	4b16      	ldr	r3, [pc, #88]	; (11120 <cdcdf_acm_set_req+0xd8>)
   110c8:	f107 0208 	add.w	r2, r7, #8
   110cc:	e892 0003 	ldmia.w	r2, {r0, r1}
   110d0:	6018      	str	r0, [r3, #0]
   110d2:	3304      	adds	r3, #4
   110d4:	8019      	strh	r1, [r3, #0]
   110d6:	3302      	adds	r3, #2
   110d8:	0c0a      	lsrs	r2, r1, #16
   110da:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
   110dc:	2300      	movs	r3, #0
   110de:	e014      	b.n	1110a <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
   110e0:	2300      	movs	r3, #0
   110e2:	2200      	movs	r2, #0
   110e4:	2100      	movs	r1, #0
   110e6:	2000      	movs	r0, #0
   110e8:	4c0b      	ldr	r4, [pc, #44]	; (11118 <cdcdf_acm_set_req+0xd0>)
   110ea:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
   110ec:	4b0d      	ldr	r3, [pc, #52]	; (11124 <cdcdf_acm_set_req+0xdc>)
   110ee:	681b      	ldr	r3, [r3, #0]
   110f0:	2b00      	cmp	r3, #0
   110f2:	d006      	beq.n	11102 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
   110f4:	4b0b      	ldr	r3, [pc, #44]	; (11124 <cdcdf_acm_set_req+0xdc>)
   110f6:	681b      	ldr	r3, [r3, #0]
   110f8:	683a      	ldr	r2, [r7, #0]
   110fa:	8852      	ldrh	r2, [r2, #2]
   110fc:	b292      	uxth	r2, r2
   110fe:	4610      	mov	r0, r2
   11100:	4798      	blx	r3
		}
		return ERR_NONE;
   11102:	2300      	movs	r3, #0
   11104:	e001      	b.n	1110a <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
   11106:	f06f 030c 	mvn.w	r3, #12
	}
}
   1110a:	4618      	mov	r0, r3
   1110c:	371c      	adds	r7, #28
   1110e:	46bd      	mov	sp, r7
   11110:	bd90      	pop	{r4, r7, pc}
   11112:	bf00      	nop
   11114:	00012095 	.word	0x00012095
   11118:	00011f09 	.word	0x00011f09
   1111c:	20008bf8 	.word	0x20008bf8
   11120:	20008bec 	.word	0x20008bec
   11124:	20008bf4 	.word	0x20008bf4

00011128 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11128:	b590      	push	{r4, r7, lr}
   1112a:	b085      	sub	sp, #20
   1112c:	af00      	add	r7, sp, #0
   1112e:	4603      	mov	r3, r0
   11130:	6039      	str	r1, [r7, #0]
   11132:	71fb      	strb	r3, [r7, #7]
   11134:	4613      	mov	r3, r2
   11136:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
   11138:	683b      	ldr	r3, [r7, #0]
   1113a:	799a      	ldrb	r2, [r3, #6]
   1113c:	79db      	ldrb	r3, [r3, #7]
   1113e:	021b      	lsls	r3, r3, #8
   11140:	4313      	orrs	r3, r2
   11142:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
   11144:	79bb      	ldrb	r3, [r7, #6]
   11146:	2b01      	cmp	r3, #1
   11148:	d101      	bne.n	1114e <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
   1114a:	2300      	movs	r3, #0
   1114c:	e013      	b.n	11176 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
   1114e:	683b      	ldr	r3, [r7, #0]
   11150:	785b      	ldrb	r3, [r3, #1]
   11152:	2b21      	cmp	r3, #33	; 0x21
   11154:	d10d      	bne.n	11172 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   11156:	89fb      	ldrh	r3, [r7, #14]
   11158:	2b07      	cmp	r3, #7
   1115a:	d002      	beq.n	11162 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
   1115c:	f04f 33ff 	mov.w	r3, #4294967295
   11160:	e009      	b.n	11176 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
   11162:	89fa      	ldrh	r2, [r7, #14]
   11164:	79f8      	ldrb	r0, [r7, #7]
   11166:	2300      	movs	r3, #0
   11168:	4905      	ldr	r1, [pc, #20]	; (11180 <cdcdf_acm_get_req+0x58>)
   1116a:	4c06      	ldr	r4, [pc, #24]	; (11184 <cdcdf_acm_get_req+0x5c>)
   1116c:	47a0      	blx	r4
   1116e:	4603      	mov	r3, r0
   11170:	e001      	b.n	11176 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
   11172:	f06f 030c 	mvn.w	r3, #12
	}
}
   11176:	4618      	mov	r0, r3
   11178:	3714      	adds	r7, #20
   1117a:	46bd      	mov	sp, r7
   1117c:	bd90      	pop	{r4, r7, pc}
   1117e:	bf00      	nop
   11180:	20008bec 	.word	0x20008bec
   11184:	00011f09 	.word	0x00011f09

00011188 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11188:	b580      	push	{r7, lr}
   1118a:	b082      	sub	sp, #8
   1118c:	af00      	add	r7, sp, #0
   1118e:	4603      	mov	r3, r0
   11190:	6039      	str	r1, [r7, #0]
   11192:	71fb      	strb	r3, [r7, #7]
   11194:	4613      	mov	r3, r2
   11196:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
   11198:	683b      	ldr	r3, [r7, #0]
   1119a:	781b      	ldrb	r3, [r3, #0]
   1119c:	095b      	lsrs	r3, r3, #5
   1119e:	b2db      	uxtb	r3, r3
   111a0:	f003 0303 	and.w	r3, r3, #3
   111a4:	2b01      	cmp	r3, #1
   111a6:	d002      	beq.n	111ae <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
   111a8:	f06f 0309 	mvn.w	r3, #9
   111ac:	e026      	b.n	111fc <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
   111ae:	683b      	ldr	r3, [r7, #0]
   111b0:	889b      	ldrh	r3, [r3, #4]
   111b2:	b29a      	uxth	r2, r3
   111b4:	4b13      	ldr	r3, [pc, #76]	; (11204 <cdcdf_acm_req+0x7c>)
   111b6:	781b      	ldrb	r3, [r3, #0]
   111b8:	b29b      	uxth	r3, r3
   111ba:	429a      	cmp	r2, r3
   111bc:	d007      	beq.n	111ce <cdcdf_acm_req+0x46>
   111be:	683b      	ldr	r3, [r7, #0]
   111c0:	889b      	ldrh	r3, [r3, #4]
   111c2:	b29a      	uxth	r2, r3
   111c4:	4b0f      	ldr	r3, [pc, #60]	; (11204 <cdcdf_acm_req+0x7c>)
   111c6:	785b      	ldrb	r3, [r3, #1]
   111c8:	b29b      	uxth	r3, r3
   111ca:	429a      	cmp	r2, r3
   111cc:	d114      	bne.n	111f8 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
   111ce:	683b      	ldr	r3, [r7, #0]
   111d0:	781b      	ldrb	r3, [r3, #0]
   111d2:	b25b      	sxtb	r3, r3
   111d4:	2b00      	cmp	r3, #0
   111d6:	da07      	bge.n	111e8 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
   111d8:	79ba      	ldrb	r2, [r7, #6]
   111da:	79fb      	ldrb	r3, [r7, #7]
   111dc:	6839      	ldr	r1, [r7, #0]
   111de:	4618      	mov	r0, r3
   111e0:	4b09      	ldr	r3, [pc, #36]	; (11208 <cdcdf_acm_req+0x80>)
   111e2:	4798      	blx	r3
   111e4:	4603      	mov	r3, r0
   111e6:	e009      	b.n	111fc <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
   111e8:	79ba      	ldrb	r2, [r7, #6]
   111ea:	79fb      	ldrb	r3, [r7, #7]
   111ec:	6839      	ldr	r1, [r7, #0]
   111ee:	4618      	mov	r0, r3
   111f0:	4b06      	ldr	r3, [pc, #24]	; (1120c <cdcdf_acm_req+0x84>)
   111f2:	4798      	blx	r3
   111f4:	4603      	mov	r3, r0
   111f6:	e001      	b.n	111fc <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
   111f8:	f06f 0309 	mvn.w	r3, #9
	}
}
   111fc:	4618      	mov	r0, r3
   111fe:	3708      	adds	r7, #8
   11200:	46bd      	mov	sp, r7
   11202:	bd80      	pop	{r7, pc}
   11204:	20008be4 	.word	0x20008be4
   11208:	00011129 	.word	0x00011129
   1120c:	00011049 	.word	0x00011049

00011210 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
   11210:	b580      	push	{r7, lr}
   11212:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
   11214:	4b0b      	ldr	r3, [pc, #44]	; (11244 <cdcdf_acm_init+0x34>)
   11216:	4798      	blx	r3
   11218:	4603      	mov	r3, r0
   1121a:	2b01      	cmp	r3, #1
   1121c:	d902      	bls.n	11224 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
   1121e:	f06f 0310 	mvn.w	r3, #16
   11222:	e00d      	b.n	11240 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
   11224:	4b08      	ldr	r3, [pc, #32]	; (11248 <cdcdf_acm_init+0x38>)
   11226:	4a09      	ldr	r2, [pc, #36]	; (1124c <cdcdf_acm_init+0x3c>)
   11228:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
   1122a:	4b07      	ldr	r3, [pc, #28]	; (11248 <cdcdf_acm_init+0x38>)
   1122c:	4a08      	ldr	r2, [pc, #32]	; (11250 <cdcdf_acm_init+0x40>)
   1122e:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
   11230:	4805      	ldr	r0, [pc, #20]	; (11248 <cdcdf_acm_init+0x38>)
   11232:	4b08      	ldr	r3, [pc, #32]	; (11254 <cdcdf_acm_init+0x44>)
   11234:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
   11236:	4908      	ldr	r1, [pc, #32]	; (11258 <cdcdf_acm_init+0x48>)
   11238:	2001      	movs	r0, #1
   1123a:	4b08      	ldr	r3, [pc, #32]	; (1125c <cdcdf_acm_init+0x4c>)
   1123c:	4798      	blx	r3
	return ERR_NONE;
   1123e:	2300      	movs	r3, #0
}
   11240:	4618      	mov	r0, r3
   11242:	bd80      	pop	{r7, pc}
   11244:	000120ad 	.word	0x000120ad
   11248:	20008bd8 	.word	0x20008bd8
   1124c:	00010ff9 	.word	0x00010ff9
   11250:	20008be4 	.word	0x20008be4
   11254:	00012015 	.word	0x00012015
   11258:	200001b0 	.word	0x200001b0
   1125c:	00011f45 	.word	0x00011f45

00011260 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
   11260:	b590      	push	{r4, r7, lr}
   11262:	b083      	sub	sp, #12
   11264:	af00      	add	r7, sp, #0
   11266:	6078      	str	r0, [r7, #4]
   11268:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   1126a:	4b0b      	ldr	r3, [pc, #44]	; (11298 <cdcdf_acm_read+0x38>)
   1126c:	4798      	blx	r3
   1126e:	4603      	mov	r3, r0
   11270:	f083 0301 	eor.w	r3, r3, #1
   11274:	b2db      	uxtb	r3, r3
   11276:	2b00      	cmp	r3, #0
   11278:	d002      	beq.n	11280 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
   1127a:	f06f 0310 	mvn.w	r3, #16
   1127e:	e007      	b.n	11290 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
   11280:	4b06      	ldr	r3, [pc, #24]	; (1129c <cdcdf_acm_read+0x3c>)
   11282:	7918      	ldrb	r0, [r3, #4]
   11284:	2300      	movs	r3, #0
   11286:	683a      	ldr	r2, [r7, #0]
   11288:	6879      	ldr	r1, [r7, #4]
   1128a:	4c05      	ldr	r4, [pc, #20]	; (112a0 <cdcdf_acm_read+0x40>)
   1128c:	47a0      	blx	r4
   1128e:	4603      	mov	r3, r0
}
   11290:	4618      	mov	r0, r3
   11292:	370c      	adds	r7, #12
   11294:	46bd      	mov	sp, r7
   11296:	bd90      	pop	{r4, r7, pc}
   11298:	00011385 	.word	0x00011385
   1129c:	20008be4 	.word	0x20008be4
   112a0:	00011f09 	.word	0x00011f09

000112a4 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
   112a4:	b590      	push	{r4, r7, lr}
   112a6:	b083      	sub	sp, #12
   112a8:	af00      	add	r7, sp, #0
   112aa:	6078      	str	r0, [r7, #4]
   112ac:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   112ae:	4b0b      	ldr	r3, [pc, #44]	; (112dc <cdcdf_acm_write+0x38>)
   112b0:	4798      	blx	r3
   112b2:	4603      	mov	r3, r0
   112b4:	f083 0301 	eor.w	r3, r3, #1
   112b8:	b2db      	uxtb	r3, r3
   112ba:	2b00      	cmp	r3, #0
   112bc:	d002      	beq.n	112c4 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
   112be:	f06f 0310 	mvn.w	r3, #16
   112c2:	e007      	b.n	112d4 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
   112c4:	4b06      	ldr	r3, [pc, #24]	; (112e0 <cdcdf_acm_write+0x3c>)
   112c6:	78d8      	ldrb	r0, [r3, #3]
   112c8:	2301      	movs	r3, #1
   112ca:	683a      	ldr	r2, [r7, #0]
   112cc:	6879      	ldr	r1, [r7, #4]
   112ce:	4c05      	ldr	r4, [pc, #20]	; (112e4 <cdcdf_acm_write+0x40>)
   112d0:	47a0      	blx	r4
   112d2:	4603      	mov	r3, r0
}
   112d4:	4618      	mov	r0, r3
   112d6:	370c      	adds	r7, #12
   112d8:	46bd      	mov	sp, r7
   112da:	bd90      	pop	{r4, r7, pc}
   112dc:	00011385 	.word	0x00011385
   112e0:	20008be4 	.word	0x20008be4
   112e4:	00011f09 	.word	0x00011f09

000112e8 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
   112e8:	b580      	push	{r7, lr}
   112ea:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
   112ec:	4b05      	ldr	r3, [pc, #20]	; (11304 <cdcdf_acm_stop_xfer+0x1c>)
   112ee:	78db      	ldrb	r3, [r3, #3]
   112f0:	4618      	mov	r0, r3
   112f2:	4b05      	ldr	r3, [pc, #20]	; (11308 <cdcdf_acm_stop_xfer+0x20>)
   112f4:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
   112f6:	4b03      	ldr	r3, [pc, #12]	; (11304 <cdcdf_acm_stop_xfer+0x1c>)
   112f8:	791b      	ldrb	r3, [r3, #4]
   112fa:	4618      	mov	r0, r3
   112fc:	4b02      	ldr	r3, [pc, #8]	; (11308 <cdcdf_acm_stop_xfer+0x20>)
   112fe:	4798      	blx	r3
}
   11300:	bf00      	nop
   11302:	bd80      	pop	{r7, pc}
   11304:	20008be4 	.word	0x20008be4
   11308:	00007be9 	.word	0x00007be9

0001130c <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
   1130c:	b580      	push	{r7, lr}
   1130e:	b082      	sub	sp, #8
   11310:	af00      	add	r7, sp, #0
   11312:	4603      	mov	r3, r0
   11314:	6039      	str	r1, [r7, #0]
   11316:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
   11318:	79fb      	ldrb	r3, [r7, #7]
   1131a:	2b03      	cmp	r3, #3
   1131c:	d822      	bhi.n	11364 <cdcdf_acm_register_callback+0x58>
   1131e:	a201      	add	r2, pc, #4	; (adr r2, 11324 <cdcdf_acm_register_callback+0x18>)
   11320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11324:	00011335 	.word	0x00011335
   11328:	00011345 	.word	0x00011345
   1132c:	00011355 	.word	0x00011355
   11330:	0001135d 	.word	0x0001135d
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
   11334:	4b0f      	ldr	r3, [pc, #60]	; (11374 <cdcdf_acm_register_callback+0x68>)
   11336:	791b      	ldrb	r3, [r3, #4]
   11338:	683a      	ldr	r2, [r7, #0]
   1133a:	2102      	movs	r1, #2
   1133c:	4618      	mov	r0, r3
   1133e:	4b0e      	ldr	r3, [pc, #56]	; (11378 <cdcdf_acm_register_callback+0x6c>)
   11340:	4798      	blx	r3
		break;
   11342:	e012      	b.n	1136a <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
   11344:	4b0b      	ldr	r3, [pc, #44]	; (11374 <cdcdf_acm_register_callback+0x68>)
   11346:	78db      	ldrb	r3, [r3, #3]
   11348:	683a      	ldr	r2, [r7, #0]
   1134a:	2102      	movs	r1, #2
   1134c:	4618      	mov	r0, r3
   1134e:	4b0a      	ldr	r3, [pc, #40]	; (11378 <cdcdf_acm_register_callback+0x6c>)
   11350:	4798      	blx	r3
		break;
   11352:	e00a      	b.n	1136a <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
   11354:	4a09      	ldr	r2, [pc, #36]	; (1137c <cdcdf_acm_register_callback+0x70>)
   11356:	683b      	ldr	r3, [r7, #0]
   11358:	6013      	str	r3, [r2, #0]
		break;
   1135a:	e006      	b.n	1136a <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
   1135c:	4a08      	ldr	r2, [pc, #32]	; (11380 <cdcdf_acm_register_callback+0x74>)
   1135e:	683b      	ldr	r3, [r7, #0]
   11360:	6013      	str	r3, [r2, #0]
		break;
   11362:	e002      	b.n	1136a <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
   11364:	f06f 030c 	mvn.w	r3, #12
   11368:	e000      	b.n	1136c <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
   1136a:	2300      	movs	r3, #0
}
   1136c:	4618      	mov	r0, r3
   1136e:	3708      	adds	r7, #8
   11370:	46bd      	mov	sp, r7
   11372:	bd80      	pop	{r7, pc}
   11374:	20008be4 	.word	0x20008be4
   11378:	00007d15 	.word	0x00007d15
   1137c:	20008bf8 	.word	0x20008bf8
   11380:	20008bf4 	.word	0x20008bf4

00011384 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
   11384:	b480      	push	{r7}
   11386:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
   11388:	4b03      	ldr	r3, [pc, #12]	; (11398 <cdcdf_acm_is_enabled+0x14>)
   1138a:	795b      	ldrb	r3, [r3, #5]
}
   1138c:	4618      	mov	r0, r3
   1138e:	46bd      	mov	sp, r7
   11390:	f85d 7b04 	ldr.w	r7, [sp], #4
   11394:	4770      	bx	lr
   11396:	bf00      	nop
   11398:	20008be4 	.word	0x20008be4

0001139c <usb_get_u16>:
{
   1139c:	b480      	push	{r7}
   1139e:	b083      	sub	sp, #12
   113a0:	af00      	add	r7, sp, #0
   113a2:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   113a4:	687b      	ldr	r3, [r7, #4]
   113a6:	781b      	ldrb	r3, [r3, #0]
   113a8:	b29a      	uxth	r2, r3
   113aa:	687b      	ldr	r3, [r7, #4]
   113ac:	3301      	adds	r3, #1
   113ae:	781b      	ldrb	r3, [r3, #0]
   113b0:	b29b      	uxth	r3, r3
   113b2:	021b      	lsls	r3, r3, #8
   113b4:	b29b      	uxth	r3, r3
   113b6:	4413      	add	r3, r2
   113b8:	b29b      	uxth	r3, r3
}
   113ba:	4618      	mov	r0, r3
   113bc:	370c      	adds	r7, #12
   113be:	46bd      	mov	sp, r7
   113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   113c4:	4770      	bx	lr

000113c6 <usb_desc_len>:
{
   113c6:	b480      	push	{r7}
   113c8:	b083      	sub	sp, #12
   113ca:	af00      	add	r7, sp, #0
   113cc:	6078      	str	r0, [r7, #4]
	return desc[0];
   113ce:	687b      	ldr	r3, [r7, #4]
   113d0:	781b      	ldrb	r3, [r3, #0]
}
   113d2:	4618      	mov	r0, r3
   113d4:	370c      	adds	r7, #12
   113d6:	46bd      	mov	sp, r7
   113d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   113dc:	4770      	bx	lr
	...

000113e0 <usb_desc_next>:
{
   113e0:	b580      	push	{r7, lr}
   113e2:	b082      	sub	sp, #8
   113e4:	af00      	add	r7, sp, #0
   113e6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   113e8:	6878      	ldr	r0, [r7, #4]
   113ea:	4b05      	ldr	r3, [pc, #20]	; (11400 <usb_desc_next+0x20>)
   113ec:	4798      	blx	r3
   113ee:	4603      	mov	r3, r0
   113f0:	461a      	mov	r2, r3
   113f2:	687b      	ldr	r3, [r7, #4]
   113f4:	4413      	add	r3, r2
}
   113f6:	4618      	mov	r0, r3
   113f8:	3708      	adds	r7, #8
   113fa:	46bd      	mov	sp, r7
   113fc:	bd80      	pop	{r7, pc}
   113fe:	bf00      	nop
   11400:	000113c7 	.word	0x000113c7

00011404 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
   11404:	b580      	push	{r7, lr}
   11406:	b082      	sub	sp, #8
   11408:	af00      	add	r7, sp, #0
   1140a:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   1140c:	687b      	ldr	r3, [r7, #4]
   1140e:	3302      	adds	r3, #2
   11410:	4618      	mov	r0, r3
   11412:	4b03      	ldr	r3, [pc, #12]	; (11420 <usb_cfg_desc_total_len+0x1c>)
   11414:	4798      	blx	r3
   11416:	4603      	mov	r3, r0
}
   11418:	4618      	mov	r0, r3
   1141a:	3708      	adds	r7, #8
   1141c:	46bd      	mov	sp, r7
   1141e:	bd80      	pop	{r7, pc}
   11420:	0001139d 	.word	0x0001139d

00011424 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
   11424:	b590      	push	{r4, r7, lr}
   11426:	b085      	sub	sp, #20
   11428:	af00      	add	r7, sp, #0
   1142a:	4603      	mov	r3, r0
   1142c:	6039      	str	r1, [r7, #0]
   1142e:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
   11430:	2300      	movs	r3, #0
   11432:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
   11434:	683b      	ldr	r3, [r7, #0]
   11436:	799a      	ldrb	r2, [r3, #6]
   11438:	79db      	ldrb	r3, [r3, #7]
   1143a:	021b      	lsls	r3, r3, #8
   1143c:	4313      	orrs	r3, r2
   1143e:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
   11440:	897b      	ldrh	r3, [r7, #10]
   11442:	2b12      	cmp	r3, #18
   11444:	d901      	bls.n	1144a <usbdc_get_dev_desc+0x26>
		length = 0x12;
   11446:	2312      	movs	r3, #18
   11448:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
   1144a:	68fb      	ldr	r3, [r7, #12]
   1144c:	2b00      	cmp	r3, #0
   1144e:	d10a      	bne.n	11466 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   11450:	4b0f      	ldr	r3, [pc, #60]	; (11490 <usbdc_get_dev_desc+0x6c>)
   11452:	681b      	ldr	r3, [r3, #0]
   11454:	6818      	ldr	r0, [r3, #0]
   11456:	4b0e      	ldr	r3, [pc, #56]	; (11490 <usbdc_get_dev_desc+0x6c>)
   11458:	681b      	ldr	r3, [r3, #0]
   1145a:	685b      	ldr	r3, [r3, #4]
   1145c:	2201      	movs	r2, #1
   1145e:	4619      	mov	r1, r3
   11460:	4b0c      	ldr	r3, [pc, #48]	; (11494 <usbdc_get_dev_desc+0x70>)
   11462:	4798      	blx	r3
   11464:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
   11466:	68fb      	ldr	r3, [r7, #12]
   11468:	2b00      	cmp	r3, #0
   1146a:	d101      	bne.n	11470 <usbdc_get_dev_desc+0x4c>
		return false;
   1146c:	2300      	movs	r3, #0
   1146e:	e00b      	b.n	11488 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   11470:	897a      	ldrh	r2, [r7, #10]
   11472:	79f8      	ldrb	r0, [r7, #7]
   11474:	2300      	movs	r3, #0
   11476:	68f9      	ldr	r1, [r7, #12]
   11478:	4c07      	ldr	r4, [pc, #28]	; (11498 <usbdc_get_dev_desc+0x74>)
   1147a:	47a0      	blx	r4
   1147c:	4603      	mov	r3, r0
   1147e:	2b00      	cmp	r3, #0
   11480:	d001      	beq.n	11486 <usbdc_get_dev_desc+0x62>
		return false;
   11482:	2300      	movs	r3, #0
   11484:	e000      	b.n	11488 <usbdc_get_dev_desc+0x64>
	}
	return true;
   11486:	2301      	movs	r3, #1
}
   11488:	4618      	mov	r0, r3
   1148a:	3714      	adds	r7, #20
   1148c:	46bd      	mov	sp, r7
   1148e:	bd90      	pop	{r4, r7, pc}
   11490:	20008bfc 	.word	0x20008bfc
   11494:	00012199 	.word	0x00012199
   11498:	00011f09 	.word	0x00011f09

0001149c <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   1149c:	b590      	push	{r4, r7, lr}
   1149e:	b087      	sub	sp, #28
   114a0:	af00      	add	r7, sp, #0
   114a2:	4603      	mov	r3, r0
   114a4:	6039      	str	r1, [r7, #0]
   114a6:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   114a8:	2300      	movs	r3, #0
   114aa:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   114ac:	683b      	ldr	r3, [r7, #0]
   114ae:	799a      	ldrb	r2, [r3, #6]
   114b0:	79db      	ldrb	r3, [r3, #7]
   114b2:	021b      	lsls	r3, r3, #8
   114b4:	4313      	orrs	r3, r2
   114b6:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   114b8:	683b      	ldr	r3, [r7, #0]
   114ba:	885b      	ldrh	r3, [r3, #2]
   114bc:	b29b      	uxth	r3, r3
   114be:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   114c0:	8a7a      	ldrh	r2, [r7, #18]
   114c2:	4b1e      	ldr	r3, [pc, #120]	; (1153c <usbdc_get_cfg_desc+0xa0>)
   114c4:	7f1b      	ldrb	r3, [r3, #28]
   114c6:	3b01      	subs	r3, #1
   114c8:	4013      	ands	r3, r2
   114ca:	2b00      	cmp	r3, #0
   114cc:	bf0c      	ite	eq
   114ce:	2301      	moveq	r3, #1
   114d0:	2300      	movne	r3, #0
   114d2:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   114d4:	697b      	ldr	r3, [r7, #20]
   114d6:	2b00      	cmp	r3, #0
   114d8:	d10c      	bne.n	114f4 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   114da:	4b18      	ldr	r3, [pc, #96]	; (1153c <usbdc_get_cfg_desc+0xa0>)
   114dc:	681b      	ldr	r3, [r3, #0]
   114de:	6818      	ldr	r0, [r3, #0]
   114e0:	4b16      	ldr	r3, [pc, #88]	; (1153c <usbdc_get_cfg_desc+0xa0>)
   114e2:	681b      	ldr	r3, [r3, #0]
   114e4:	6859      	ldr	r1, [r3, #4]
   114e6:	7c3b      	ldrb	r3, [r7, #16]
   114e8:	3301      	adds	r3, #1
   114ea:	b2db      	uxtb	r3, r3
   114ec:	461a      	mov	r2, r3
   114ee:	4b14      	ldr	r3, [pc, #80]	; (11540 <usbdc_get_cfg_desc+0xa4>)
   114f0:	4798      	blx	r3
   114f2:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   114f4:	697b      	ldr	r3, [r7, #20]
   114f6:	2b00      	cmp	r3, #0
   114f8:	d101      	bne.n	114fe <usbdc_get_cfg_desc+0x62>
		return false;
   114fa:	2300      	movs	r3, #0
   114fc:	e019      	b.n	11532 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   114fe:	6978      	ldr	r0, [r7, #20]
   11500:	4b10      	ldr	r3, [pc, #64]	; (11544 <usbdc_get_cfg_desc+0xa8>)
   11502:	4798      	blx	r3
   11504:	4603      	mov	r3, r0
   11506:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   11508:	8a7a      	ldrh	r2, [r7, #18]
   1150a:	89fb      	ldrh	r3, [r7, #14]
   1150c:	429a      	cmp	r2, r3
   1150e:	d802      	bhi.n	11516 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   11510:	2300      	movs	r3, #0
   11512:	747b      	strb	r3, [r7, #17]
   11514:	e001      	b.n	1151a <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   11516:	89fb      	ldrh	r3, [r7, #14]
   11518:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   1151a:	8a7a      	ldrh	r2, [r7, #18]
   1151c:	7c7b      	ldrb	r3, [r7, #17]
   1151e:	79f8      	ldrb	r0, [r7, #7]
   11520:	6979      	ldr	r1, [r7, #20]
   11522:	4c09      	ldr	r4, [pc, #36]	; (11548 <usbdc_get_cfg_desc+0xac>)
   11524:	47a0      	blx	r4
   11526:	4603      	mov	r3, r0
   11528:	2b00      	cmp	r3, #0
   1152a:	d001      	beq.n	11530 <usbdc_get_cfg_desc+0x94>
		return false;
   1152c:	2300      	movs	r3, #0
   1152e:	e000      	b.n	11532 <usbdc_get_cfg_desc+0x96>
	}
	return true;
   11530:	2301      	movs	r3, #1
}
   11532:	4618      	mov	r0, r3
   11534:	371c      	adds	r7, #28
   11536:	46bd      	mov	sp, r7
   11538:	bd90      	pop	{r4, r7, pc}
   1153a:	bf00      	nop
   1153c:	20008bfc 	.word	0x20008bfc
   11540:	00012259 	.word	0x00012259
   11544:	00011405 	.word	0x00011405
   11548:	00011f09 	.word	0x00011f09

0001154c <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   1154c:	b590      	push	{r4, r7, lr}
   1154e:	b085      	sub	sp, #20
   11550:	af00      	add	r7, sp, #0
   11552:	4603      	mov	r3, r0
   11554:	6039      	str	r1, [r7, #0]
   11556:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   11558:	683b      	ldr	r3, [r7, #0]
   1155a:	799a      	ldrb	r2, [r3, #6]
   1155c:	79db      	ldrb	r3, [r3, #7]
   1155e:	021b      	lsls	r3, r3, #8
   11560:	4313      	orrs	r3, r2
   11562:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   11564:	683b      	ldr	r3, [r7, #0]
   11566:	885b      	ldrh	r3, [r3, #2]
   11568:	b29b      	uxth	r3, r3
   1156a:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   1156c:	89fa      	ldrh	r2, [r7, #14]
   1156e:	4b1a      	ldr	r3, [pc, #104]	; (115d8 <usbdc_get_str_desc+0x8c>)
   11570:	7f1b      	ldrb	r3, [r3, #28]
   11572:	3b01      	subs	r3, #1
   11574:	4013      	ands	r3, r2
   11576:	2b00      	cmp	r3, #0
   11578:	bf0c      	ite	eq
   1157a:	2301      	moveq	r3, #1
   1157c:	2300      	movne	r3, #0
   1157e:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   11580:	4b15      	ldr	r3, [pc, #84]	; (115d8 <usbdc_get_str_desc+0x8c>)
   11582:	681b      	ldr	r3, [r3, #0]
   11584:	6818      	ldr	r0, [r3, #0]
   11586:	4b14      	ldr	r3, [pc, #80]	; (115d8 <usbdc_get_str_desc+0x8c>)
   11588:	681b      	ldr	r3, [r3, #0]
   1158a:	685b      	ldr	r3, [r3, #4]
   1158c:	7b3a      	ldrb	r2, [r7, #12]
   1158e:	4619      	mov	r1, r3
   11590:	4b12      	ldr	r3, [pc, #72]	; (115dc <usbdc_get_str_desc+0x90>)
   11592:	4798      	blx	r3
   11594:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   11596:	68bb      	ldr	r3, [r7, #8]
   11598:	2b00      	cmp	r3, #0
   1159a:	d101      	bne.n	115a0 <usbdc_get_str_desc+0x54>
		return false;
   1159c:	2300      	movs	r3, #0
   1159e:	e017      	b.n	115d0 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   115a0:	68bb      	ldr	r3, [r7, #8]
   115a2:	781b      	ldrb	r3, [r3, #0]
   115a4:	b29b      	uxth	r3, r3
   115a6:	89fa      	ldrh	r2, [r7, #14]
   115a8:	429a      	cmp	r2, r3
   115aa:	d802      	bhi.n	115b2 <usbdc_get_str_desc+0x66>
		need_zlp = false;
   115ac:	2300      	movs	r3, #0
   115ae:	737b      	strb	r3, [r7, #13]
   115b0:	e002      	b.n	115b8 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   115b2:	68bb      	ldr	r3, [r7, #8]
   115b4:	781b      	ldrb	r3, [r3, #0]
   115b6:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   115b8:	89fa      	ldrh	r2, [r7, #14]
   115ba:	7b7b      	ldrb	r3, [r7, #13]
   115bc:	79f8      	ldrb	r0, [r7, #7]
   115be:	68b9      	ldr	r1, [r7, #8]
   115c0:	4c07      	ldr	r4, [pc, #28]	; (115e0 <usbdc_get_str_desc+0x94>)
   115c2:	47a0      	blx	r4
   115c4:	4603      	mov	r3, r0
   115c6:	2b00      	cmp	r3, #0
   115c8:	d001      	beq.n	115ce <usbdc_get_str_desc+0x82>
		return false;
   115ca:	2300      	movs	r3, #0
   115cc:	e000      	b.n	115d0 <usbdc_get_str_desc+0x84>
	}
	return true;
   115ce:	2301      	movs	r3, #1
}
   115d0:	4618      	mov	r0, r3
   115d2:	3714      	adds	r7, #20
   115d4:	46bd      	mov	sp, r7
   115d6:	bd90      	pop	{r4, r7, pc}
   115d8:	20008bfc 	.word	0x20008bfc
   115dc:	000122d1 	.word	0x000122d1
   115e0:	00011f09 	.word	0x00011f09

000115e4 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   115e4:	b580      	push	{r7, lr}
   115e6:	b084      	sub	sp, #16
   115e8:	af00      	add	r7, sp, #0
   115ea:	4603      	mov	r3, r0
   115ec:	6039      	str	r1, [r7, #0]
   115ee:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   115f0:	683b      	ldr	r3, [r7, #0]
   115f2:	885b      	ldrh	r3, [r3, #2]
   115f4:	b29b      	uxth	r3, r3
   115f6:	0a1b      	lsrs	r3, r3, #8
   115f8:	b29b      	uxth	r3, r3
   115fa:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   115fc:	7bfb      	ldrb	r3, [r7, #15]
   115fe:	2b02      	cmp	r3, #2
   11600:	d00d      	beq.n	1161e <usbdc_get_desc_req+0x3a>
   11602:	2b03      	cmp	r3, #3
   11604:	d012      	beq.n	1162c <usbdc_get_desc_req+0x48>
   11606:	2b01      	cmp	r3, #1
   11608:	d002      	beq.n	11610 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   1160a:	bf00      	nop
	}
	return false;
   1160c:	2300      	movs	r3, #0
   1160e:	e013      	b.n	11638 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   11610:	79fb      	ldrb	r3, [r7, #7]
   11612:	6839      	ldr	r1, [r7, #0]
   11614:	4618      	mov	r0, r3
   11616:	4b0a      	ldr	r3, [pc, #40]	; (11640 <usbdc_get_desc_req+0x5c>)
   11618:	4798      	blx	r3
   1161a:	4603      	mov	r3, r0
   1161c:	e00c      	b.n	11638 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   1161e:	79fb      	ldrb	r3, [r7, #7]
   11620:	6839      	ldr	r1, [r7, #0]
   11622:	4618      	mov	r0, r3
   11624:	4b07      	ldr	r3, [pc, #28]	; (11644 <usbdc_get_desc_req+0x60>)
   11626:	4798      	blx	r3
   11628:	4603      	mov	r3, r0
   1162a:	e005      	b.n	11638 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   1162c:	79fb      	ldrb	r3, [r7, #7]
   1162e:	6839      	ldr	r1, [r7, #0]
   11630:	4618      	mov	r0, r3
   11632:	4b05      	ldr	r3, [pc, #20]	; (11648 <usbdc_get_desc_req+0x64>)
   11634:	4798      	blx	r3
   11636:	4603      	mov	r3, r0
}
   11638:	4618      	mov	r0, r3
   1163a:	3710      	adds	r7, #16
   1163c:	46bd      	mov	sp, r7
   1163e:	bd80      	pop	{r7, pc}
   11640:	00011425 	.word	0x00011425
   11644:	0001149d 	.word	0x0001149d
   11648:	0001154d 	.word	0x0001154d

0001164c <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   1164c:	b590      	push	{r4, r7, lr}
   1164e:	b085      	sub	sp, #20
   11650:	af00      	add	r7, sp, #0
   11652:	4603      	mov	r3, r0
   11654:	6039      	str	r1, [r7, #0]
   11656:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11658:	683b      	ldr	r3, [r7, #0]
   1165a:	781b      	ldrb	r3, [r3, #0]
   1165c:	f003 031f 	and.w	r3, r3, #31
   11660:	2b00      	cmp	r3, #0
   11662:	db1b      	blt.n	1169c <usbdc_get_status_req+0x50>
   11664:	2b01      	cmp	r3, #1
   11666:	dd02      	ble.n	1166e <usbdc_get_status_req+0x22>
   11668:	2b02      	cmp	r3, #2
   1166a:	d003      	beq.n	11674 <usbdc_get_status_req+0x28>
   1166c:	e016      	b.n	1169c <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   1166e:	2300      	movs	r3, #0
   11670:	60fb      	str	r3, [r7, #12]
		break;
   11672:	e015      	b.n	116a0 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   11674:	683b      	ldr	r3, [r7, #0]
   11676:	889b      	ldrh	r3, [r3, #4]
   11678:	b29b      	uxth	r3, r3
   1167a:	b2db      	uxtb	r3, r3
   1167c:	2102      	movs	r1, #2
   1167e:	4618      	mov	r0, r3
   11680:	4b0f      	ldr	r3, [pc, #60]	; (116c0 <usbdc_get_status_req+0x74>)
   11682:	4798      	blx	r3
   11684:	4603      	mov	r3, r0
   11686:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   11688:	68fb      	ldr	r3, [r7, #12]
   1168a:	2b00      	cmp	r3, #0
   1168c:	da01      	bge.n	11692 <usbdc_get_status_req+0x46>
			return false;
   1168e:	2300      	movs	r3, #0
   11690:	e012      	b.n	116b8 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   11692:	68fb      	ldr	r3, [r7, #12]
   11694:	f003 0301 	and.w	r3, r3, #1
   11698:	60fb      	str	r3, [r7, #12]
		break;
   1169a:	e001      	b.n	116a0 <usbdc_get_status_req+0x54>
	default:
		return false;
   1169c:	2300      	movs	r3, #0
   1169e:	e00b      	b.n	116b8 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   116a0:	4b08      	ldr	r3, [pc, #32]	; (116c4 <usbdc_get_status_req+0x78>)
   116a2:	695b      	ldr	r3, [r3, #20]
   116a4:	89ba      	ldrh	r2, [r7, #12]
   116a6:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   116a8:	4b06      	ldr	r3, [pc, #24]	; (116c4 <usbdc_get_status_req+0x78>)
   116aa:	6959      	ldr	r1, [r3, #20]
   116ac:	79f8      	ldrb	r0, [r7, #7]
   116ae:	2300      	movs	r3, #0
   116b0:	2202      	movs	r2, #2
   116b2:	4c05      	ldr	r4, [pc, #20]	; (116c8 <usbdc_get_status_req+0x7c>)
   116b4:	47a0      	blx	r4
	return true;
   116b6:	2301      	movs	r3, #1
}
   116b8:	4618      	mov	r0, r3
   116ba:	3714      	adds	r7, #20
   116bc:	46bd      	mov	sp, r7
   116be:	bd90      	pop	{r4, r7, pc}
   116c0:	00007cc1 	.word	0x00007cc1
   116c4:	20008bfc 	.word	0x20008bfc
   116c8:	00011f09 	.word	0x00011f09

000116cc <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   116cc:	b590      	push	{r4, r7, lr}
   116ce:	b085      	sub	sp, #20
   116d0:	af00      	add	r7, sp, #0
   116d2:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   116d4:	4b1f      	ldr	r3, [pc, #124]	; (11754 <usbdc_get_interface+0x88>)
   116d6:	691b      	ldr	r3, [r3, #16]
   116d8:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   116da:	4b1e      	ldr	r3, [pc, #120]	; (11754 <usbdc_get_interface+0x88>)
   116dc:	7f5b      	ldrb	r3, [r3, #29]
   116de:	461a      	mov	r2, r3
   116e0:	687b      	ldr	r3, [r7, #4]
   116e2:	889b      	ldrh	r3, [r3, #4]
   116e4:	b29b      	uxth	r3, r3
   116e6:	fa42 f303 	asr.w	r3, r2, r3
   116ea:	f003 0301 	and.w	r3, r3, #1
   116ee:	2b00      	cmp	r3, #0
   116f0:	d128      	bne.n	11744 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   116f2:	4b18      	ldr	r3, [pc, #96]	; (11754 <usbdc_get_interface+0x88>)
   116f4:	695b      	ldr	r3, [r3, #20]
   116f6:	2200      	movs	r2, #0
   116f8:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   116fa:	4b16      	ldr	r3, [pc, #88]	; (11754 <usbdc_get_interface+0x88>)
   116fc:	6959      	ldr	r1, [r3, #20]
   116fe:	2300      	movs	r3, #0
   11700:	2201      	movs	r2, #1
   11702:	2000      	movs	r0, #0
   11704:	4c14      	ldr	r4, [pc, #80]	; (11758 <usbdc_get_interface+0x8c>)
   11706:	47a0      	blx	r4
		return true;
   11708:	2301      	movs	r3, #1
   1170a:	e01f      	b.n	1174c <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   1170c:	68fb      	ldr	r3, [r7, #12]
   1170e:	685b      	ldr	r3, [r3, #4]
   11710:	687a      	ldr	r2, [r7, #4]
   11712:	2102      	movs	r1, #2
   11714:	68f8      	ldr	r0, [r7, #12]
   11716:	4798      	blx	r3
   11718:	60b8      	str	r0, [r7, #8]
   1171a:	68bb      	ldr	r3, [r7, #8]
   1171c:	2b00      	cmp	r3, #0
   1171e:	da03      	bge.n	11728 <usbdc_get_interface+0x5c>
			func = func->next;
   11720:	68fb      	ldr	r3, [r7, #12]
   11722:	681b      	ldr	r3, [r3, #0]
   11724:	60fb      	str	r3, [r7, #12]
   11726:	e00d      	b.n	11744 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   11728:	4b0a      	ldr	r3, [pc, #40]	; (11754 <usbdc_get_interface+0x88>)
   1172a:	695b      	ldr	r3, [r3, #20]
   1172c:	68ba      	ldr	r2, [r7, #8]
   1172e:	b2d2      	uxtb	r2, r2
   11730:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11732:	4b08      	ldr	r3, [pc, #32]	; (11754 <usbdc_get_interface+0x88>)
   11734:	6959      	ldr	r1, [r3, #20]
   11736:	2300      	movs	r3, #0
   11738:	2201      	movs	r2, #1
   1173a:	2000      	movs	r0, #0
   1173c:	4c06      	ldr	r4, [pc, #24]	; (11758 <usbdc_get_interface+0x8c>)
   1173e:	47a0      	blx	r4
			return true;
   11740:	2301      	movs	r3, #1
   11742:	e003      	b.n	1174c <usbdc_get_interface+0x80>
	while (NULL != func) {
   11744:	68fb      	ldr	r3, [r7, #12]
   11746:	2b00      	cmp	r3, #0
   11748:	d1e0      	bne.n	1170c <usbdc_get_interface+0x40>
		}
	}
	return false;
   1174a:	2300      	movs	r3, #0
}
   1174c:	4618      	mov	r0, r3
   1174e:	3714      	adds	r7, #20
   11750:	46bd      	mov	sp, r7
   11752:	bd90      	pop	{r4, r7, pc}
   11754:	20008bfc 	.word	0x20008bfc
   11758:	00011f09 	.word	0x00011f09

0001175c <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   1175c:	b590      	push	{r4, r7, lr}
   1175e:	b083      	sub	sp, #12
   11760:	af00      	add	r7, sp, #0
   11762:	4603      	mov	r3, r0
   11764:	6039      	str	r1, [r7, #0]
   11766:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   11768:	683b      	ldr	r3, [r7, #0]
   1176a:	785b      	ldrb	r3, [r3, #1]
   1176c:	2b0a      	cmp	r3, #10
   1176e:	d83a      	bhi.n	117e6 <usbdc_get_req+0x8a>
   11770:	a201      	add	r2, pc, #4	; (adr r2, 11778 <usbdc_get_req+0x1c>)
   11772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11776:	bf00      	nop
   11778:	000117cf 	.word	0x000117cf
   1177c:	000117e7 	.word	0x000117e7
   11780:	000117e7 	.word	0x000117e7
   11784:	000117e7 	.word	0x000117e7
   11788:	000117e7 	.word	0x000117e7
   1178c:	000117e7 	.word	0x000117e7
   11790:	000117a5 	.word	0x000117a5
   11794:	000117e7 	.word	0x000117e7
   11798:	000117b3 	.word	0x000117b3
   1179c:	000117e7 	.word	0x000117e7
   117a0:	000117dd 	.word	0x000117dd
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   117a4:	79fb      	ldrb	r3, [r7, #7]
   117a6:	6839      	ldr	r1, [r7, #0]
   117a8:	4618      	mov	r0, r3
   117aa:	4b11      	ldr	r3, [pc, #68]	; (117f0 <usbdc_get_req+0x94>)
   117ac:	4798      	blx	r3
   117ae:	4603      	mov	r3, r0
   117b0:	e01a      	b.n	117e8 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   117b2:	4b10      	ldr	r3, [pc, #64]	; (117f4 <usbdc_get_req+0x98>)
   117b4:	695b      	ldr	r3, [r3, #20]
   117b6:	4a0f      	ldr	r2, [pc, #60]	; (117f4 <usbdc_get_req+0x98>)
   117b8:	7ed2      	ldrb	r2, [r2, #27]
   117ba:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   117bc:	4b0d      	ldr	r3, [pc, #52]	; (117f4 <usbdc_get_req+0x98>)
   117be:	6959      	ldr	r1, [r3, #20]
   117c0:	79f8      	ldrb	r0, [r7, #7]
   117c2:	2300      	movs	r3, #0
   117c4:	2201      	movs	r2, #1
   117c6:	4c0c      	ldr	r4, [pc, #48]	; (117f8 <usbdc_get_req+0x9c>)
   117c8:	47a0      	blx	r4
		return true;
   117ca:	2301      	movs	r3, #1
   117cc:	e00c      	b.n	117e8 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   117ce:	79fb      	ldrb	r3, [r7, #7]
   117d0:	6839      	ldr	r1, [r7, #0]
   117d2:	4618      	mov	r0, r3
   117d4:	4b09      	ldr	r3, [pc, #36]	; (117fc <usbdc_get_req+0xa0>)
   117d6:	4798      	blx	r3
   117d8:	4603      	mov	r3, r0
   117da:	e005      	b.n	117e8 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   117dc:	6838      	ldr	r0, [r7, #0]
   117de:	4b08      	ldr	r3, [pc, #32]	; (11800 <usbdc_get_req+0xa4>)
   117e0:	4798      	blx	r3
   117e2:	4603      	mov	r3, r0
   117e4:	e000      	b.n	117e8 <usbdc_get_req+0x8c>
	default:
		return false;
   117e6:	2300      	movs	r3, #0
	}
}
   117e8:	4618      	mov	r0, r3
   117ea:	370c      	adds	r7, #12
   117ec:	46bd      	mov	sp, r7
   117ee:	bd90      	pop	{r4, r7, pc}
   117f0:	000115e5 	.word	0x000115e5
   117f4:	20008bfc 	.word	0x20008bfc
   117f8:	00011f09 	.word	0x00011f09
   117fc:	0001164d 	.word	0x0001164d
   11800:	000116cd 	.word	0x000116cd

00011804 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   11804:	b590      	push	{r4, r7, lr}
   11806:	b083      	sub	sp, #12
   11808:	af00      	add	r7, sp, #0
   1180a:	4603      	mov	r3, r0
   1180c:	6039      	str	r1, [r7, #0]
   1180e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11810:	683b      	ldr	r3, [r7, #0]
   11812:	781b      	ldrb	r3, [r3, #0]
   11814:	f003 031f 	and.w	r3, r3, #31
   11818:	2b02      	cmp	r3, #2
   1181a:	d116      	bne.n	1184a <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   1181c:	683b      	ldr	r3, [r7, #0]
   1181e:	88db      	ldrh	r3, [r3, #6]
   11820:	b29b      	uxth	r3, r3
   11822:	2b00      	cmp	r3, #0
   11824:	d001      	beq.n	1182a <usbdc_clear_ftr_req+0x26>
			return false;
   11826:	2300      	movs	r3, #0
   11828:	e010      	b.n	1184c <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   1182a:	683b      	ldr	r3, [r7, #0]
   1182c:	889b      	ldrh	r3, [r3, #4]
   1182e:	b29b      	uxth	r3, r3
   11830:	b2db      	uxtb	r3, r3
   11832:	2100      	movs	r1, #0
   11834:	4618      	mov	r0, r3
   11836:	4b07      	ldr	r3, [pc, #28]	; (11854 <usbdc_clear_ftr_req+0x50>)
   11838:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   1183a:	79f8      	ldrb	r0, [r7, #7]
   1183c:	2301      	movs	r3, #1
   1183e:	2200      	movs	r2, #0
   11840:	2100      	movs	r1, #0
   11842:	4c05      	ldr	r4, [pc, #20]	; (11858 <usbdc_clear_ftr_req+0x54>)
   11844:	47a0      	blx	r4
		return true;
   11846:	2301      	movs	r3, #1
   11848:	e000      	b.n	1184c <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   1184a:	2300      	movs	r3, #0
	}
}
   1184c:	4618      	mov	r0, r3
   1184e:	370c      	adds	r7, #12
   11850:	46bd      	mov	sp, r7
   11852:	bd90      	pop	{r4, r7, pc}
   11854:	00007cc1 	.word	0x00007cc1
   11858:	00011f09 	.word	0x00011f09

0001185c <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   1185c:	b590      	push	{r4, r7, lr}
   1185e:	b083      	sub	sp, #12
   11860:	af00      	add	r7, sp, #0
   11862:	4603      	mov	r3, r0
   11864:	6039      	str	r1, [r7, #0]
   11866:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11868:	683b      	ldr	r3, [r7, #0]
   1186a:	781b      	ldrb	r3, [r3, #0]
   1186c:	f003 031f 	and.w	r3, r3, #31
   11870:	2b02      	cmp	r3, #2
   11872:	d116      	bne.n	118a2 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   11874:	683b      	ldr	r3, [r7, #0]
   11876:	88db      	ldrh	r3, [r3, #6]
   11878:	b29b      	uxth	r3, r3
   1187a:	2b00      	cmp	r3, #0
   1187c:	d001      	beq.n	11882 <usbdc_set_ftr_req+0x26>
			return false;
   1187e:	2300      	movs	r3, #0
   11880:	e010      	b.n	118a4 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   11882:	683b      	ldr	r3, [r7, #0]
   11884:	889b      	ldrh	r3, [r3, #4]
   11886:	b29b      	uxth	r3, r3
   11888:	b2db      	uxtb	r3, r3
   1188a:	2101      	movs	r1, #1
   1188c:	4618      	mov	r0, r3
   1188e:	4b07      	ldr	r3, [pc, #28]	; (118ac <usbdc_set_ftr_req+0x50>)
   11890:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   11892:	79f8      	ldrb	r0, [r7, #7]
   11894:	2301      	movs	r3, #1
   11896:	2200      	movs	r2, #0
   11898:	2100      	movs	r1, #0
   1189a:	4c05      	ldr	r4, [pc, #20]	; (118b0 <usbdc_set_ftr_req+0x54>)
   1189c:	47a0      	blx	r4
		return true;
   1189e:	2301      	movs	r3, #1
   118a0:	e000      	b.n	118a4 <usbdc_set_ftr_req+0x48>
	default:
		return false;
   118a2:	2300      	movs	r3, #0
	}
}
   118a4:	4618      	mov	r0, r3
   118a6:	370c      	adds	r7, #12
   118a8:	46bd      	mov	sp, r7
   118aa:	bd90      	pop	{r4, r7, pc}
   118ac:	00007cc1 	.word	0x00007cc1
   118b0:	00011f09 	.word	0x00011f09

000118b4 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   118b4:	b580      	push	{r7, lr}
   118b6:	b082      	sub	sp, #8
   118b8:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   118ba:	4b0a      	ldr	r3, [pc, #40]	; (118e4 <usbdc_unconfig+0x30>)
   118bc:	691b      	ldr	r3, [r3, #16]
   118be:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   118c0:	e008      	b.n	118d4 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   118c2:	687b      	ldr	r3, [r7, #4]
   118c4:	685b      	ldr	r3, [r3, #4]
   118c6:	2200      	movs	r2, #0
   118c8:	2101      	movs	r1, #1
   118ca:	6878      	ldr	r0, [r7, #4]
   118cc:	4798      	blx	r3
		func = func->next;
   118ce:	687b      	ldr	r3, [r7, #4]
   118d0:	681b      	ldr	r3, [r3, #0]
   118d2:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   118d4:	687b      	ldr	r3, [r7, #4]
   118d6:	2b00      	cmp	r3, #0
   118d8:	d1f3      	bne.n	118c2 <usbdc_unconfig+0xe>
	}
}
   118da:	bf00      	nop
   118dc:	3708      	adds	r7, #8
   118de:	46bd      	mov	sp, r7
   118e0:	bd80      	pop	{r7, pc}
   118e2:	bf00      	nop
   118e4:	20008bfc 	.word	0x20008bfc

000118e8 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   118e8:	b580      	push	{r7, lr}
   118ea:	b088      	sub	sp, #32
   118ec:	af00      	add	r7, sp, #0
   118ee:	4603      	mov	r3, r0
   118f0:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   118f2:	2300      	movs	r3, #0
   118f4:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   118f6:	23ff      	movs	r3, #255	; 0xff
   118f8:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   118fa:	79fb      	ldrb	r3, [r7, #7]
   118fc:	2b00      	cmp	r3, #0
   118fe:	d103      	bne.n	11908 <usbdc_set_config+0x20>
		usbdc_unconfig();
   11900:	4b2e      	ldr	r3, [pc, #184]	; (119bc <usbdc_set_config+0xd4>)
   11902:	4798      	blx	r3
		return true;
   11904:	2301      	movs	r3, #1
   11906:	e055      	b.n	119b4 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   11908:	69bb      	ldr	r3, [r7, #24]
   1190a:	2b00      	cmp	r3, #0
   1190c:	d10a      	bne.n	11924 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   1190e:	4b2c      	ldr	r3, [pc, #176]	; (119c0 <usbdc_set_config+0xd8>)
   11910:	681b      	ldr	r3, [r3, #0]
   11912:	6818      	ldr	r0, [r3, #0]
   11914:	4b2a      	ldr	r3, [pc, #168]	; (119c0 <usbdc_set_config+0xd8>)
   11916:	681b      	ldr	r3, [r3, #0]
   11918:	685b      	ldr	r3, [r3, #4]
   1191a:	79fa      	ldrb	r2, [r7, #7]
   1191c:	4619      	mov	r1, r3
   1191e:	4b29      	ldr	r3, [pc, #164]	; (119c4 <usbdc_set_config+0xdc>)
   11920:	4798      	blx	r3
   11922:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   11924:	69bb      	ldr	r3, [r7, #24]
   11926:	2b00      	cmp	r3, #0
   11928:	d101      	bne.n	1192e <usbdc_set_config+0x46>
		return false;
   1192a:	2300      	movs	r3, #0
   1192c:	e042      	b.n	119b4 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   1192e:	69b8      	ldr	r0, [r7, #24]
   11930:	4b25      	ldr	r3, [pc, #148]	; (119c8 <usbdc_set_config+0xe0>)
   11932:	4798      	blx	r3
   11934:	4603      	mov	r3, r0
   11936:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   11938:	8abb      	ldrh	r3, [r7, #20]
   1193a:	69ba      	ldr	r2, [r7, #24]
   1193c:	4413      	add	r3, r2
   1193e:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11940:	693b      	ldr	r3, [r7, #16]
   11942:	2204      	movs	r2, #4
   11944:	4619      	mov	r1, r3
   11946:	69b8      	ldr	r0, [r7, #24]
   11948:	4b20      	ldr	r3, [pc, #128]	; (119cc <usbdc_set_config+0xe4>)
   1194a:	4798      	blx	r3
   1194c:	4603      	mov	r3, r0
   1194e:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   11950:	e02c      	b.n	119ac <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   11952:	68fb      	ldr	r3, [r7, #12]
   11954:	3302      	adds	r3, #2
   11956:	781b      	ldrb	r3, [r3, #0]
   11958:	7dfa      	ldrb	r2, [r7, #23]
   1195a:	429a      	cmp	r2, r3
   1195c:	d018      	beq.n	11990 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   1195e:	68fb      	ldr	r3, [r7, #12]
   11960:	789b      	ldrb	r3, [r3, #2]
   11962:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   11964:	4b16      	ldr	r3, [pc, #88]	; (119c0 <usbdc_set_config+0xd8>)
   11966:	691b      	ldr	r3, [r3, #16]
   11968:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   1196a:	e00c      	b.n	11986 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   1196c:	69fb      	ldr	r3, [r7, #28]
   1196e:	685b      	ldr	r3, [r3, #4]
   11970:	f107 020c 	add.w	r2, r7, #12
   11974:	2100      	movs	r1, #0
   11976:	69f8      	ldr	r0, [r7, #28]
   11978:	4798      	blx	r3
   1197a:	4603      	mov	r3, r0
   1197c:	2b00      	cmp	r3, #0
   1197e:	d006      	beq.n	1198e <usbdc_set_config+0xa6>
					func = func->next;
   11980:	69fb      	ldr	r3, [r7, #28]
   11982:	681b      	ldr	r3, [r3, #0]
   11984:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   11986:	69fb      	ldr	r3, [r7, #28]
   11988:	2b00      	cmp	r3, #0
   1198a:	d1ef      	bne.n	1196c <usbdc_set_config+0x84>
   1198c:	e000      	b.n	11990 <usbdc_set_config+0xa8>
				} else {
					break;
   1198e:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   11990:	68fb      	ldr	r3, [r7, #12]
   11992:	4618      	mov	r0, r3
   11994:	4b0e      	ldr	r3, [pc, #56]	; (119d0 <usbdc_set_config+0xe8>)
   11996:	4798      	blx	r3
   11998:	4603      	mov	r3, r0
   1199a:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   1199c:	68fb      	ldr	r3, [r7, #12]
   1199e:	6939      	ldr	r1, [r7, #16]
   119a0:	2204      	movs	r2, #4
   119a2:	4618      	mov	r0, r3
   119a4:	4b09      	ldr	r3, [pc, #36]	; (119cc <usbdc_set_config+0xe4>)
   119a6:	4798      	blx	r3
   119a8:	4603      	mov	r3, r0
   119aa:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   119ac:	68fb      	ldr	r3, [r7, #12]
   119ae:	2b00      	cmp	r3, #0
   119b0:	d1cf      	bne.n	11952 <usbdc_set_config+0x6a>
	}
	return true;
   119b2:	2301      	movs	r3, #1
}
   119b4:	4618      	mov	r0, r3
   119b6:	3720      	adds	r7, #32
   119b8:	46bd      	mov	sp, r7
   119ba:	bd80      	pop	{r7, pc}
   119bc:	000118b5 	.word	0x000118b5
   119c0:	20008bfc 	.word	0x20008bfc
   119c4:	00012259 	.word	0x00012259
   119c8:	00011405 	.word	0x00011405
   119cc:	00012199 	.word	0x00012199
   119d0:	000113e1 	.word	0x000113e1

000119d4 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   119d4:	b580      	push	{r7, lr}
   119d6:	b082      	sub	sp, #8
   119d8:	af00      	add	r7, sp, #0
   119da:	4603      	mov	r3, r0
   119dc:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   119de:	79fb      	ldrb	r3, [r7, #7]
   119e0:	4618      	mov	r0, r3
   119e2:	4b03      	ldr	r3, [pc, #12]	; (119f0 <usbdc_set_address+0x1c>)
   119e4:	4798      	blx	r3
}
   119e6:	bf00      	nop
   119e8:	3708      	adds	r7, #8
   119ea:	46bd      	mov	sp, r7
   119ec:	bd80      	pop	{r7, pc}
   119ee:	bf00      	nop
   119f0:	000078dd 	.word	0x000078dd

000119f4 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   119f4:	b590      	push	{r4, r7, lr}
   119f6:	b087      	sub	sp, #28
   119f8:	af00      	add	r7, sp, #0
   119fa:	4603      	mov	r3, r0
   119fc:	460a      	mov	r2, r1
   119fe:	80fb      	strh	r3, [r7, #6]
   11a00:	4613      	mov	r3, r2
   11a02:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   11a04:	2300      	movs	r3, #0
   11a06:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   11a08:	693b      	ldr	r3, [r7, #16]
   11a0a:	2b00      	cmp	r3, #0
   11a0c:	d10b      	bne.n	11a26 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11a0e:	4b43      	ldr	r3, [pc, #268]	; (11b1c <usbdc_set_interface+0x128>)
   11a10:	681b      	ldr	r3, [r3, #0]
   11a12:	6818      	ldr	r0, [r3, #0]
   11a14:	4b41      	ldr	r3, [pc, #260]	; (11b1c <usbdc_set_interface+0x128>)
   11a16:	681b      	ldr	r3, [r3, #0]
   11a18:	6859      	ldr	r1, [r3, #4]
   11a1a:	4b40      	ldr	r3, [pc, #256]	; (11b1c <usbdc_set_interface+0x128>)
   11a1c:	7edb      	ldrb	r3, [r3, #27]
   11a1e:	461a      	mov	r2, r3
   11a20:	4b3f      	ldr	r3, [pc, #252]	; (11b20 <usbdc_set_interface+0x12c>)
   11a22:	4798      	blx	r3
   11a24:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   11a26:	693b      	ldr	r3, [r7, #16]
   11a28:	2b00      	cmp	r3, #0
   11a2a:	d101      	bne.n	11a30 <usbdc_set_interface+0x3c>
		return false;
   11a2c:	2300      	movs	r3, #0
   11a2e:	e071      	b.n	11b14 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   11a30:	693b      	ldr	r3, [r7, #16]
   11a32:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   11a34:	6938      	ldr	r0, [r7, #16]
   11a36:	4b3b      	ldr	r3, [pc, #236]	; (11b24 <usbdc_set_interface+0x130>)
   11a38:	4798      	blx	r3
   11a3a:	4603      	mov	r3, r0
   11a3c:	461a      	mov	r2, r3
   11a3e:	693b      	ldr	r3, [r7, #16]
   11a40:	4413      	add	r3, r2
   11a42:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   11a44:	68bb      	ldr	r3, [r7, #8]
   11a46:	68f9      	ldr	r1, [r7, #12]
   11a48:	2204      	movs	r2, #4
   11a4a:	4618      	mov	r0, r3
   11a4c:	4b36      	ldr	r3, [pc, #216]	; (11b28 <usbdc_set_interface+0x134>)
   11a4e:	4798      	blx	r3
   11a50:	6138      	str	r0, [r7, #16]
   11a52:	693b      	ldr	r3, [r7, #16]
   11a54:	2b00      	cmp	r3, #0
   11a56:	d113      	bne.n	11a80 <usbdc_set_interface+0x8c>
		return false;
   11a58:	2300      	movs	r3, #0
   11a5a:	e05b      	b.n	11b14 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   11a5c:	68bb      	ldr	r3, [r7, #8]
   11a5e:	4618      	mov	r0, r3
   11a60:	4b32      	ldr	r3, [pc, #200]	; (11b2c <usbdc_set_interface+0x138>)
   11a62:	4798      	blx	r3
   11a64:	4603      	mov	r3, r0
   11a66:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11a68:	68bb      	ldr	r3, [r7, #8]
   11a6a:	68f9      	ldr	r1, [r7, #12]
   11a6c:	2204      	movs	r2, #4
   11a6e:	4618      	mov	r0, r3
   11a70:	4b2d      	ldr	r3, [pc, #180]	; (11b28 <usbdc_set_interface+0x134>)
   11a72:	4798      	blx	r3
   11a74:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   11a76:	693b      	ldr	r3, [r7, #16]
   11a78:	2b00      	cmp	r3, #0
   11a7a:	d101      	bne.n	11a80 <usbdc_set_interface+0x8c>
			return false;
   11a7c:	2300      	movs	r3, #0
   11a7e:	e049      	b.n	11b14 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   11a80:	693b      	ldr	r3, [r7, #16]
   11a82:	3302      	adds	r3, #2
   11a84:	781b      	ldrb	r3, [r3, #0]
   11a86:	b29b      	uxth	r3, r3
   11a88:	88ba      	ldrh	r2, [r7, #4]
   11a8a:	429a      	cmp	r2, r3
   11a8c:	d1e6      	bne.n	11a5c <usbdc_set_interface+0x68>
   11a8e:	693b      	ldr	r3, [r7, #16]
   11a90:	3303      	adds	r3, #3
   11a92:	781b      	ldrb	r3, [r3, #0]
   11a94:	b29b      	uxth	r3, r3
   11a96:	88fa      	ldrh	r2, [r7, #6]
   11a98:	429a      	cmp	r2, r3
   11a9a:	d1df      	bne.n	11a5c <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   11a9c:	693b      	ldr	r3, [r7, #16]
   11a9e:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   11aa0:	4b1e      	ldr	r3, [pc, #120]	; (11b1c <usbdc_set_interface+0x128>)
   11aa2:	691b      	ldr	r3, [r3, #16]
   11aa4:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   11aa6:	e031      	b.n	11b0c <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   11aa8:	697b      	ldr	r3, [r7, #20]
   11aaa:	685b      	ldr	r3, [r3, #4]
   11aac:	f107 0208 	add.w	r2, r7, #8
   11ab0:	2101      	movs	r1, #1
   11ab2:	6978      	ldr	r0, [r7, #20]
   11ab4:	4798      	blx	r3
   11ab6:	4603      	mov	r3, r0
   11ab8:	2b00      	cmp	r3, #0
   11aba:	d003      	beq.n	11ac4 <usbdc_set_interface+0xd0>
			func = func->next;
   11abc:	697b      	ldr	r3, [r7, #20]
   11abe:	681b      	ldr	r3, [r3, #0]
   11ac0:	617b      	str	r3, [r7, #20]
   11ac2:	e023      	b.n	11b0c <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   11ac4:	697b      	ldr	r3, [r7, #20]
   11ac6:	685b      	ldr	r3, [r3, #4]
   11ac8:	f107 0208 	add.w	r2, r7, #8
   11acc:	2100      	movs	r1, #0
   11ace:	6978      	ldr	r0, [r7, #20]
   11ad0:	4798      	blx	r3
   11ad2:	4603      	mov	r3, r0
   11ad4:	2b00      	cmp	r3, #0
   11ad6:	d117      	bne.n	11b08 <usbdc_set_interface+0x114>
			if (alt_set) {
   11ad8:	88fb      	ldrh	r3, [r7, #6]
   11ada:	2b00      	cmp	r3, #0
   11adc:	d00c      	beq.n	11af8 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   11ade:	4b0f      	ldr	r3, [pc, #60]	; (11b1c <usbdc_set_interface+0x128>)
   11ae0:	7f5b      	ldrb	r3, [r3, #29]
   11ae2:	b25a      	sxtb	r2, r3
   11ae4:	88bb      	ldrh	r3, [r7, #4]
   11ae6:	2101      	movs	r1, #1
   11ae8:	fa01 f303 	lsl.w	r3, r1, r3
   11aec:	b25b      	sxtb	r3, r3
   11aee:	4313      	orrs	r3, r2
   11af0:	b25b      	sxtb	r3, r3
   11af2:	b2da      	uxtb	r2, r3
   11af4:	4b09      	ldr	r3, [pc, #36]	; (11b1c <usbdc_set_interface+0x128>)
   11af6:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   11af8:	2300      	movs	r3, #0
   11afa:	2200      	movs	r2, #0
   11afc:	2100      	movs	r1, #0
   11afe:	2000      	movs	r0, #0
   11b00:	4c0b      	ldr	r4, [pc, #44]	; (11b30 <usbdc_set_interface+0x13c>)
   11b02:	47a0      	blx	r4
			return true;
   11b04:	2301      	movs	r3, #1
   11b06:	e005      	b.n	11b14 <usbdc_set_interface+0x120>
		} else {
			return false;
   11b08:	2300      	movs	r3, #0
   11b0a:	e003      	b.n	11b14 <usbdc_set_interface+0x120>
	while (NULL != func) {
   11b0c:	697b      	ldr	r3, [r7, #20]
   11b0e:	2b00      	cmp	r3, #0
   11b10:	d1ca      	bne.n	11aa8 <usbdc_set_interface+0xb4>
		}
	}

	return false;
   11b12:	2300      	movs	r3, #0
}
   11b14:	4618      	mov	r0, r3
   11b16:	371c      	adds	r7, #28
   11b18:	46bd      	mov	sp, r7
   11b1a:	bd90      	pop	{r4, r7, pc}
   11b1c:	20008bfc 	.word	0x20008bfc
   11b20:	00012259 	.word	0x00012259
   11b24:	00011405 	.word	0x00011405
   11b28:	00012199 	.word	0x00012199
   11b2c:	000113e1 	.word	0x000113e1
   11b30:	00011f09 	.word	0x00011f09

00011b34 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   11b34:	b590      	push	{r4, r7, lr}
   11b36:	b083      	sub	sp, #12
   11b38:	af00      	add	r7, sp, #0
   11b3a:	4603      	mov	r3, r0
   11b3c:	6039      	str	r1, [r7, #0]
   11b3e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   11b40:	683b      	ldr	r3, [r7, #0]
   11b42:	785b      	ldrb	r3, [r3, #1]
   11b44:	3b01      	subs	r3, #1
   11b46:	2b0a      	cmp	r3, #10
   11b48:	d85b      	bhi.n	11c02 <usbdc_set_req+0xce>
   11b4a:	a201      	add	r2, pc, #4	; (adr r2, 11b50 <usbdc_set_req+0x1c>)
   11b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11b50:	00011bcf 	.word	0x00011bcf
   11b54:	00011c03 	.word	0x00011c03
   11b58:	00011bdd 	.word	0x00011bdd
   11b5c:	00011c03 	.word	0x00011c03
   11b60:	00011b7d 	.word	0x00011b7d
   11b64:	00011c03 	.word	0x00011c03
   11b68:	00011c03 	.word	0x00011c03
   11b6c:	00011c03 	.word	0x00011c03
   11b70:	00011b97 	.word	0x00011b97
   11b74:	00011c03 	.word	0x00011c03
   11b78:	00011beb 	.word	0x00011beb
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   11b7c:	79f8      	ldrb	r0, [r7, #7]
   11b7e:	2301      	movs	r3, #1
   11b80:	2200      	movs	r2, #0
   11b82:	2100      	movs	r1, #0
   11b84:	4c21      	ldr	r4, [pc, #132]	; (11c0c <usbdc_set_req+0xd8>)
   11b86:	47a0      	blx	r4
   11b88:	4603      	mov	r3, r0
   11b8a:	2b00      	cmp	r3, #0
   11b8c:	bf0c      	ite	eq
   11b8e:	2301      	moveq	r3, #1
   11b90:	2300      	movne	r3, #0
   11b92:	b2db      	uxtb	r3, r3
   11b94:	e036      	b.n	11c04 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   11b96:	683b      	ldr	r3, [r7, #0]
   11b98:	885b      	ldrh	r3, [r3, #2]
   11b9a:	b29b      	uxth	r3, r3
   11b9c:	b2db      	uxtb	r3, r3
   11b9e:	4618      	mov	r0, r3
   11ba0:	4b1b      	ldr	r3, [pc, #108]	; (11c10 <usbdc_set_req+0xdc>)
   11ba2:	4798      	blx	r3
   11ba4:	4603      	mov	r3, r0
   11ba6:	f083 0301 	eor.w	r3, r3, #1
   11baa:	b2db      	uxtb	r3, r3
   11bac:	2b00      	cmp	r3, #0
   11bae:	d001      	beq.n	11bb4 <usbdc_set_req+0x80>
			return false;
   11bb0:	2300      	movs	r3, #0
   11bb2:	e027      	b.n	11c04 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   11bb4:	79f8      	ldrb	r0, [r7, #7]
   11bb6:	2301      	movs	r3, #1
   11bb8:	2200      	movs	r2, #0
   11bba:	2100      	movs	r1, #0
   11bbc:	4c13      	ldr	r4, [pc, #76]	; (11c0c <usbdc_set_req+0xd8>)
   11bbe:	47a0      	blx	r4
   11bc0:	4603      	mov	r3, r0
   11bc2:	2b00      	cmp	r3, #0
   11bc4:	bf0c      	ite	eq
   11bc6:	2301      	moveq	r3, #1
   11bc8:	2300      	movne	r3, #0
   11bca:	b2db      	uxtb	r3, r3
   11bcc:	e01a      	b.n	11c04 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   11bce:	79fb      	ldrb	r3, [r7, #7]
   11bd0:	6839      	ldr	r1, [r7, #0]
   11bd2:	4618      	mov	r0, r3
   11bd4:	4b0f      	ldr	r3, [pc, #60]	; (11c14 <usbdc_set_req+0xe0>)
   11bd6:	4798      	blx	r3
   11bd8:	4603      	mov	r3, r0
   11bda:	e013      	b.n	11c04 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   11bdc:	79fb      	ldrb	r3, [r7, #7]
   11bde:	6839      	ldr	r1, [r7, #0]
   11be0:	4618      	mov	r0, r3
   11be2:	4b0d      	ldr	r3, [pc, #52]	; (11c18 <usbdc_set_req+0xe4>)
   11be4:	4798      	blx	r3
   11be6:	4603      	mov	r3, r0
   11be8:	e00c      	b.n	11c04 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   11bea:	683b      	ldr	r3, [r7, #0]
   11bec:	885b      	ldrh	r3, [r3, #2]
   11bee:	b29a      	uxth	r2, r3
   11bf0:	683b      	ldr	r3, [r7, #0]
   11bf2:	889b      	ldrh	r3, [r3, #4]
   11bf4:	b29b      	uxth	r3, r3
   11bf6:	4619      	mov	r1, r3
   11bf8:	4610      	mov	r0, r2
   11bfa:	4b08      	ldr	r3, [pc, #32]	; (11c1c <usbdc_set_req+0xe8>)
   11bfc:	4798      	blx	r3
   11bfe:	4603      	mov	r3, r0
   11c00:	e000      	b.n	11c04 <usbdc_set_req+0xd0>
	default:
		return false;
   11c02:	2300      	movs	r3, #0
	}
}
   11c04:	4618      	mov	r0, r3
   11c06:	370c      	adds	r7, #12
   11c08:	46bd      	mov	sp, r7
   11c0a:	bd90      	pop	{r4, r7, pc}
   11c0c:	00011f09 	.word	0x00011f09
   11c10:	000118e9 	.word	0x000118e9
   11c14:	00011805 	.word	0x00011805
   11c18:	0001185d 	.word	0x0001185d
   11c1c:	000119f5 	.word	0x000119f5

00011c20 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   11c20:	b580      	push	{r7, lr}
   11c22:	b082      	sub	sp, #8
   11c24:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   11c26:	4b0a      	ldr	r3, [pc, #40]	; (11c50 <usbdc_sof_notify+0x30>)
   11c28:	685b      	ldr	r3, [r3, #4]
   11c2a:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   11c2c:	e009      	b.n	11c42 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   11c2e:	687b      	ldr	r3, [r7, #4]
   11c30:	685b      	ldr	r3, [r3, #4]
   11c32:	2b00      	cmp	r3, #0
   11c34:	d002      	beq.n	11c3c <usbdc_sof_notify+0x1c>
			sof->cb();
   11c36:	687b      	ldr	r3, [r7, #4]
   11c38:	685b      	ldr	r3, [r3, #4]
   11c3a:	4798      	blx	r3
		}
		sof = sof->next;
   11c3c:	687b      	ldr	r3, [r7, #4]
   11c3e:	681b      	ldr	r3, [r3, #0]
   11c40:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   11c42:	687b      	ldr	r3, [r7, #4]
   11c44:	2b00      	cmp	r3, #0
   11c46:	d1f2      	bne.n	11c2e <usbdc_sof_notify+0xe>
	}
}
   11c48:	bf00      	nop
   11c4a:	3708      	adds	r7, #8
   11c4c:	46bd      	mov	sp, r7
   11c4e:	bd80      	pop	{r7, pc}
   11c50:	20008bfc 	.word	0x20008bfc

00011c54 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   11c54:	b580      	push	{r7, lr}
   11c56:	b084      	sub	sp, #16
   11c58:	af00      	add	r7, sp, #0
   11c5a:	4603      	mov	r3, r0
   11c5c:	6039      	str	r1, [r7, #0]
   11c5e:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   11c60:	4b0b      	ldr	r3, [pc, #44]	; (11c90 <usbdc_change_notify+0x3c>)
   11c62:	68db      	ldr	r3, [r3, #12]
   11c64:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   11c66:	e00c      	b.n	11c82 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   11c68:	68fb      	ldr	r3, [r7, #12]
   11c6a:	685b      	ldr	r3, [r3, #4]
   11c6c:	2b00      	cmp	r3, #0
   11c6e:	d005      	beq.n	11c7c <usbdc_change_notify+0x28>
			cg->cb(change, value);
   11c70:	68fb      	ldr	r3, [r7, #12]
   11c72:	685b      	ldr	r3, [r3, #4]
   11c74:	79fa      	ldrb	r2, [r7, #7]
   11c76:	6839      	ldr	r1, [r7, #0]
   11c78:	4610      	mov	r0, r2
   11c7a:	4798      	blx	r3
		}
		cg = cg->next;
   11c7c:	68fb      	ldr	r3, [r7, #12]
   11c7e:	681b      	ldr	r3, [r3, #0]
   11c80:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   11c82:	68fb      	ldr	r3, [r7, #12]
   11c84:	2b00      	cmp	r3, #0
   11c86:	d1ef      	bne.n	11c68 <usbdc_change_notify+0x14>
	}
}
   11c88:	bf00      	nop
   11c8a:	3710      	adds	r7, #16
   11c8c:	46bd      	mov	sp, r7
   11c8e:	bd80      	pop	{r7, pc}
   11c90:	20008bfc 	.word	0x20008bfc

00011c94 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11c94:	b580      	push	{r7, lr}
   11c96:	b084      	sub	sp, #16
   11c98:	af00      	add	r7, sp, #0
   11c9a:	4603      	mov	r3, r0
   11c9c:	6039      	str	r1, [r7, #0]
   11c9e:	71fb      	strb	r3, [r7, #7]
   11ca0:	4613      	mov	r3, r2
   11ca2:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   11ca4:	4b12      	ldr	r3, [pc, #72]	; (11cf0 <usbdc_request_handler+0x5c>)
   11ca6:	689b      	ldr	r3, [r3, #8]
   11ca8:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   11caa:	e019      	b.n	11ce0 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   11cac:	68fb      	ldr	r3, [r7, #12]
   11cae:	685b      	ldr	r3, [r3, #4]
   11cb0:	2b00      	cmp	r3, #0
   11cb2:	d012      	beq.n	11cda <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   11cb4:	68fb      	ldr	r3, [r7, #12]
   11cb6:	685b      	ldr	r3, [r3, #4]
   11cb8:	79ba      	ldrb	r2, [r7, #6]
   11cba:	79f8      	ldrb	r0, [r7, #7]
   11cbc:	6839      	ldr	r1, [r7, #0]
   11cbe:	4798      	blx	r3
   11cc0:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   11cc2:	68bb      	ldr	r3, [r7, #8]
   11cc4:	2b00      	cmp	r3, #0
   11cc6:	d101      	bne.n	11ccc <usbdc_request_handler+0x38>
				return true;
   11cc8:	2301      	movs	r3, #1
   11cca:	e00d      	b.n	11ce8 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   11ccc:	68bb      	ldr	r3, [r7, #8]
   11cce:	f113 0f0a 	cmn.w	r3, #10
   11cd2:	d002      	beq.n	11cda <usbdc_request_handler+0x46>
				return -1;
   11cd4:	f04f 33ff 	mov.w	r3, #4294967295
   11cd8:	e006      	b.n	11ce8 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   11cda:	68fb      	ldr	r3, [r7, #12]
   11cdc:	681b      	ldr	r3, [r3, #0]
   11cde:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   11ce0:	68fb      	ldr	r3, [r7, #12]
   11ce2:	2b00      	cmp	r3, #0
   11ce4:	d1e2      	bne.n	11cac <usbdc_request_handler+0x18>
	}
	return false;
   11ce6:	2300      	movs	r3, #0
}
   11ce8:	4618      	mov	r0, r3
   11cea:	3710      	adds	r7, #16
   11cec:	46bd      	mov	sp, r7
   11cee:	bd80      	pop	{r7, pc}
   11cf0:	20008bfc 	.word	0x20008bfc

00011cf4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   11cf4:	b580      	push	{r7, lr}
   11cf6:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   11cf8:	4b01      	ldr	r3, [pc, #4]	; (11d00 <usbd_sof_cb+0xc>)
   11cfa:	4798      	blx	r3
}
   11cfc:	bf00      	nop
   11cfe:	bd80      	pop	{r7, pc}
   11d00:	00011c21 	.word	0x00011c21

00011d04 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   11d04:	b580      	push	{r7, lr}
   11d06:	b082      	sub	sp, #8
   11d08:	af00      	add	r7, sp, #0
   11d0a:	4603      	mov	r3, r0
   11d0c:	6039      	str	r1, [r7, #0]
   11d0e:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   11d10:	79fb      	ldrb	r3, [r7, #7]
   11d12:	2200      	movs	r2, #0
   11d14:	6839      	ldr	r1, [r7, #0]
   11d16:	4618      	mov	r0, r3
   11d18:	4b14      	ldr	r3, [pc, #80]	; (11d6c <usbdc_cb_ctl_req+0x68>)
   11d1a:	4798      	blx	r3
   11d1c:	4603      	mov	r3, r0
   11d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
   11d22:	d00b      	beq.n	11d3c <usbdc_cb_ctl_req+0x38>
   11d24:	2b01      	cmp	r3, #1
   11d26:	d007      	beq.n	11d38 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   11d28:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   11d2a:	683b      	ldr	r3, [r7, #0]
   11d2c:	781b      	ldrb	r3, [r3, #0]
   11d2e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   11d32:	2b00      	cmp	r3, #0
   11d34:	d007      	beq.n	11d46 <usbdc_cb_ctl_req+0x42>
   11d36:	e003      	b.n	11d40 <usbdc_cb_ctl_req+0x3c>
		return true;
   11d38:	2301      	movs	r3, #1
   11d3a:	e013      	b.n	11d64 <usbdc_cb_ctl_req+0x60>
		return false;
   11d3c:	2300      	movs	r3, #0
   11d3e:	e011      	b.n	11d64 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   11d40:	2b80      	cmp	r3, #128	; 0x80
   11d42:	d007      	beq.n	11d54 <usbdc_cb_ctl_req+0x50>
   11d44:	e00d      	b.n	11d62 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   11d46:	79fb      	ldrb	r3, [r7, #7]
   11d48:	6839      	ldr	r1, [r7, #0]
   11d4a:	4618      	mov	r0, r3
   11d4c:	4b08      	ldr	r3, [pc, #32]	; (11d70 <usbdc_cb_ctl_req+0x6c>)
   11d4e:	4798      	blx	r3
   11d50:	4603      	mov	r3, r0
   11d52:	e007      	b.n	11d64 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   11d54:	79fb      	ldrb	r3, [r7, #7]
   11d56:	6839      	ldr	r1, [r7, #0]
   11d58:	4618      	mov	r0, r3
   11d5a:	4b06      	ldr	r3, [pc, #24]	; (11d74 <usbdc_cb_ctl_req+0x70>)
   11d5c:	4798      	blx	r3
   11d5e:	4603      	mov	r3, r0
   11d60:	e000      	b.n	11d64 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   11d62:	2300      	movs	r3, #0
	}
}
   11d64:	4618      	mov	r0, r3
   11d66:	3708      	adds	r7, #8
   11d68:	46bd      	mov	sp, r7
   11d6a:	bd80      	pop	{r7, pc}
   11d6c:	00011c95 	.word	0x00011c95
   11d70:	00011b35 	.word	0x00011b35
   11d74:	0001175d 	.word	0x0001175d

00011d78 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   11d78:	b580      	push	{r7, lr}
   11d7a:	b082      	sub	sp, #8
   11d7c:	af00      	add	r7, sp, #0
   11d7e:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   11d80:	687b      	ldr	r3, [r7, #4]
   11d82:	781b      	ldrb	r3, [r3, #0]
   11d84:	2b00      	cmp	r3, #0
   11d86:	d135      	bne.n	11df4 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   11d88:	687b      	ldr	r3, [r7, #4]
   11d8a:	785b      	ldrb	r3, [r3, #1]
   11d8c:	2b05      	cmp	r3, #5
   11d8e:	d019      	beq.n	11dc4 <usbdc_ctrl_status_end+0x4c>
   11d90:	2b09      	cmp	r3, #9
   11d92:	d000      	beq.n	11d96 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   11d94:	e02f      	b.n	11df6 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   11d96:	687b      	ldr	r3, [r7, #4]
   11d98:	885b      	ldrh	r3, [r3, #2]
   11d9a:	b29b      	uxth	r3, r3
   11d9c:	b2da      	uxtb	r2, r3
   11d9e:	4b17      	ldr	r3, [pc, #92]	; (11dfc <usbdc_ctrl_status_end+0x84>)
   11da0:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   11da2:	687b      	ldr	r3, [r7, #4]
   11da4:	885b      	ldrh	r3, [r3, #2]
   11da6:	b29b      	uxth	r3, r3
   11da8:	2b00      	cmp	r3, #0
   11daa:	d001      	beq.n	11db0 <usbdc_ctrl_status_end+0x38>
   11dac:	2204      	movs	r2, #4
   11dae:	e000      	b.n	11db2 <usbdc_ctrl_status_end+0x3a>
   11db0:	2203      	movs	r2, #3
   11db2:	4b12      	ldr	r3, [pc, #72]	; (11dfc <usbdc_ctrl_status_end+0x84>)
   11db4:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   11db6:	4b11      	ldr	r3, [pc, #68]	; (11dfc <usbdc_ctrl_status_end+0x84>)
   11db8:	7e9b      	ldrb	r3, [r3, #26]
   11dba:	4619      	mov	r1, r3
   11dbc:	2001      	movs	r0, #1
   11dbe:	4b10      	ldr	r3, [pc, #64]	; (11e00 <usbdc_ctrl_status_end+0x88>)
   11dc0:	4798      	blx	r3
		break;
   11dc2:	e018      	b.n	11df6 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   11dc4:	687b      	ldr	r3, [r7, #4]
   11dc6:	885b      	ldrh	r3, [r3, #2]
   11dc8:	b29b      	uxth	r3, r3
   11dca:	b2db      	uxtb	r3, r3
   11dcc:	4618      	mov	r0, r3
   11dce:	4b0d      	ldr	r3, [pc, #52]	; (11e04 <usbdc_ctrl_status_end+0x8c>)
   11dd0:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   11dd2:	687b      	ldr	r3, [r7, #4]
   11dd4:	885b      	ldrh	r3, [r3, #2]
   11dd6:	b29b      	uxth	r3, r3
   11dd8:	2b00      	cmp	r3, #0
   11dda:	d001      	beq.n	11de0 <usbdc_ctrl_status_end+0x68>
   11ddc:	2203      	movs	r2, #3
   11dde:	e000      	b.n	11de2 <usbdc_ctrl_status_end+0x6a>
   11de0:	2202      	movs	r2, #2
   11de2:	4b06      	ldr	r3, [pc, #24]	; (11dfc <usbdc_ctrl_status_end+0x84>)
   11de4:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   11de6:	4b05      	ldr	r3, [pc, #20]	; (11dfc <usbdc_ctrl_status_end+0x84>)
   11de8:	7e9b      	ldrb	r3, [r3, #26]
   11dea:	4619      	mov	r1, r3
   11dec:	2001      	movs	r0, #1
   11dee:	4b04      	ldr	r3, [pc, #16]	; (11e00 <usbdc_ctrl_status_end+0x88>)
   11df0:	4798      	blx	r3
		break;
   11df2:	e000      	b.n	11df6 <usbdc_ctrl_status_end+0x7e>
		return;
   11df4:	bf00      	nop
	}
}
   11df6:	3708      	adds	r7, #8
   11df8:	46bd      	mov	sp, r7
   11dfa:	bd80      	pop	{r7, pc}
   11dfc:	20008bfc 	.word	0x20008bfc
   11e00:	00011c55 	.word	0x00011c55
   11e04:	000119d5 	.word	0x000119d5

00011e08 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   11e08:	b580      	push	{r7, lr}
   11e0a:	b082      	sub	sp, #8
   11e0c:	af00      	add	r7, sp, #0
   11e0e:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   11e10:	2201      	movs	r2, #1
   11e12:	6879      	ldr	r1, [r7, #4]
   11e14:	2000      	movs	r0, #0
   11e16:	4b03      	ldr	r3, [pc, #12]	; (11e24 <usbdc_ctrl_data_end+0x1c>)
   11e18:	4798      	blx	r3
	return false;
   11e1a:	2300      	movs	r3, #0
}
   11e1c:	4618      	mov	r0, r3
   11e1e:	3708      	adds	r7, #8
   11e20:	46bd      	mov	sp, r7
   11e22:	bd80      	pop	{r7, pc}
   11e24:	00011c95 	.word	0x00011c95

00011e28 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   11e28:	b580      	push	{r7, lr}
   11e2a:	b082      	sub	sp, #8
   11e2c:	af00      	add	r7, sp, #0
   11e2e:	4603      	mov	r3, r0
   11e30:	603a      	str	r2, [r7, #0]
   11e32:	71fb      	strb	r3, [r7, #7]
   11e34:	460b      	mov	r3, r1
   11e36:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   11e38:	79bb      	ldrb	r3, [r7, #6]
   11e3a:	2b00      	cmp	r3, #0
   11e3c:	d002      	beq.n	11e44 <usbdc_cb_ctl_done+0x1c>
   11e3e:	2b01      	cmp	r3, #1
   11e40:	d004      	beq.n	11e4c <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   11e42:	e008      	b.n	11e56 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   11e44:	6838      	ldr	r0, [r7, #0]
   11e46:	4b06      	ldr	r3, [pc, #24]	; (11e60 <usbdc_cb_ctl_done+0x38>)
   11e48:	4798      	blx	r3
		break;
   11e4a:	e004      	b.n	11e56 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   11e4c:	6838      	ldr	r0, [r7, #0]
   11e4e:	4b05      	ldr	r3, [pc, #20]	; (11e64 <usbdc_cb_ctl_done+0x3c>)
   11e50:	4798      	blx	r3
   11e52:	4603      	mov	r3, r0
   11e54:	e000      	b.n	11e58 <usbdc_cb_ctl_done+0x30>
	}
	return false;
   11e56:	2300      	movs	r3, #0
}
   11e58:	4618      	mov	r0, r3
   11e5a:	3708      	adds	r7, #8
   11e5c:	46bd      	mov	sp, r7
   11e5e:	bd80      	pop	{r7, pc}
   11e60:	00011d79 	.word	0x00011d79
   11e64:	00011e09 	.word	0x00011e09

00011e68 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   11e68:	b580      	push	{r7, lr}
   11e6a:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   11e6c:	4b10      	ldr	r3, [pc, #64]	; (11eb0 <usbdc_reset+0x48>)
   11e6e:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   11e70:	4b10      	ldr	r3, [pc, #64]	; (11eb4 <usbdc_reset+0x4c>)
   11e72:	2202      	movs	r2, #2
   11e74:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   11e76:	4b0f      	ldr	r3, [pc, #60]	; (11eb4 <usbdc_reset+0x4c>)
   11e78:	2200      	movs	r2, #0
   11e7a:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   11e7c:	4b0d      	ldr	r3, [pc, #52]	; (11eb4 <usbdc_reset+0x4c>)
   11e7e:	2200      	movs	r2, #0
   11e80:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   11e82:	2000      	movs	r0, #0
   11e84:	4b0c      	ldr	r3, [pc, #48]	; (11eb8 <usbdc_reset+0x50>)
   11e86:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   11e88:	4b0a      	ldr	r3, [pc, #40]	; (11eb4 <usbdc_reset+0x4c>)
   11e8a:	7f1b      	ldrb	r3, [r3, #28]
   11e8c:	4618      	mov	r0, r3
   11e8e:	4b0b      	ldr	r3, [pc, #44]	; (11ebc <usbdc_reset+0x54>)
   11e90:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   11e92:	4a0b      	ldr	r2, [pc, #44]	; (11ec0 <usbdc_reset+0x58>)
   11e94:	2100      	movs	r1, #0
   11e96:	2000      	movs	r0, #0
   11e98:	4b0a      	ldr	r3, [pc, #40]	; (11ec4 <usbdc_reset+0x5c>)
   11e9a:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   11e9c:	4a0a      	ldr	r2, [pc, #40]	; (11ec8 <usbdc_reset+0x60>)
   11e9e:	2102      	movs	r1, #2
   11ea0:	2000      	movs	r0, #0
   11ea2:	4b08      	ldr	r3, [pc, #32]	; (11ec4 <usbdc_reset+0x5c>)
   11ea4:	4798      	blx	r3
	usb_d_ep_enable(0);
   11ea6:	2000      	movs	r0, #0
   11ea8:	4b08      	ldr	r3, [pc, #32]	; (11ecc <usbdc_reset+0x64>)
   11eaa:	4798      	blx	r3
}
   11eac:	bf00      	nop
   11eae:	bd80      	pop	{r7, pc}
   11eb0:	000118b5 	.word	0x000118b5
   11eb4:	20008bfc 	.word	0x20008bfc
   11eb8:	000079c1 	.word	0x000079c1
   11ebc:	000078fd 	.word	0x000078fd
   11ec0:	00011d05 	.word	0x00011d05
   11ec4:	00007d15 	.word	0x00007d15
   11ec8:	00011e29 	.word	0x00011e29
   11ecc:	00007a11 	.word	0x00007a11

00011ed0 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   11ed0:	b580      	push	{r7, lr}
   11ed2:	b082      	sub	sp, #8
   11ed4:	af00      	add	r7, sp, #0
   11ed6:	4603      	mov	r3, r0
   11ed8:	6039      	str	r1, [r7, #0]
   11eda:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   11edc:	79fb      	ldrb	r3, [r7, #7]
   11ede:	2b00      	cmp	r3, #0
   11ee0:	d002      	beq.n	11ee8 <usbd_event_cb+0x18>
   11ee2:	2b01      	cmp	r3, #1
   11ee4:	d005      	beq.n	11ef2 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   11ee6:	e007      	b.n	11ef8 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   11ee8:	6839      	ldr	r1, [r7, #0]
   11eea:	2000      	movs	r0, #0
   11eec:	4b04      	ldr	r3, [pc, #16]	; (11f00 <usbd_event_cb+0x30>)
   11eee:	4798      	blx	r3
		break;
   11ef0:	e002      	b.n	11ef8 <usbd_event_cb+0x28>
		usbdc_reset();
   11ef2:	4b04      	ldr	r3, [pc, #16]	; (11f04 <usbd_event_cb+0x34>)
   11ef4:	4798      	blx	r3
		break;
   11ef6:	bf00      	nop
	}
}
   11ef8:	bf00      	nop
   11efa:	3708      	adds	r7, #8
   11efc:	46bd      	mov	sp, r7
   11efe:	bd80      	pop	{r7, pc}
   11f00:	00011c55 	.word	0x00011c55
   11f04:	00011e69 	.word	0x00011e69

00011f08 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   11f08:	b580      	push	{r7, lr}
   11f0a:	b088      	sub	sp, #32
   11f0c:	af00      	add	r7, sp, #0
   11f0e:	60b9      	str	r1, [r7, #8]
   11f10:	607a      	str	r2, [r7, #4]
   11f12:	461a      	mov	r2, r3
   11f14:	4603      	mov	r3, r0
   11f16:	73fb      	strb	r3, [r7, #15]
   11f18:	4613      	mov	r3, r2
   11f1a:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   11f1c:	68bb      	ldr	r3, [r7, #8]
   11f1e:	617b      	str	r3, [r7, #20]
   11f20:	687b      	ldr	r3, [r7, #4]
   11f22:	61bb      	str	r3, [r7, #24]
   11f24:	7bfb      	ldrb	r3, [r7, #15]
   11f26:	773b      	strb	r3, [r7, #28]
   11f28:	7bbb      	ldrb	r3, [r7, #14]
   11f2a:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   11f2c:	f107 0314 	add.w	r3, r7, #20
   11f30:	4618      	mov	r0, r3
   11f32:	4b03      	ldr	r3, [pc, #12]	; (11f40 <usbdc_xfer+0x38>)
   11f34:	4798      	blx	r3
   11f36:	4603      	mov	r3, r0
}
   11f38:	4618      	mov	r0, r3
   11f3a:	3720      	adds	r7, #32
   11f3c:	46bd      	mov	sp, r7
   11f3e:	bd80      	pop	{r7, pc}
   11f40:	00007a81 	.word	0x00007a81

00011f44 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   11f44:	b580      	push	{r7, lr}
   11f46:	b082      	sub	sp, #8
   11f48:	af00      	add	r7, sp, #0
   11f4a:	4603      	mov	r3, r0
   11f4c:	6039      	str	r1, [r7, #0]
   11f4e:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   11f50:	79fb      	ldrb	r3, [r7, #7]
   11f52:	2b01      	cmp	r3, #1
   11f54:	d009      	beq.n	11f6a <usbdc_register_handler+0x26>
   11f56:	2b02      	cmp	r3, #2
   11f58:	d00c      	beq.n	11f74 <usbdc_register_handler+0x30>
   11f5a:	2b00      	cmp	r3, #0
   11f5c:	d000      	beq.n	11f60 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   11f5e:	e00e      	b.n	11f7e <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   11f60:	6839      	ldr	r1, [r7, #0]
   11f62:	4809      	ldr	r0, [pc, #36]	; (11f88 <usbdc_register_handler+0x44>)
   11f64:	4b09      	ldr	r3, [pc, #36]	; (11f8c <usbdc_register_handler+0x48>)
   11f66:	4798      	blx	r3
		break;
   11f68:	e009      	b.n	11f7e <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   11f6a:	6839      	ldr	r1, [r7, #0]
   11f6c:	4808      	ldr	r0, [pc, #32]	; (11f90 <usbdc_register_handler+0x4c>)
   11f6e:	4b07      	ldr	r3, [pc, #28]	; (11f8c <usbdc_register_handler+0x48>)
   11f70:	4798      	blx	r3
		break;
   11f72:	e004      	b.n	11f7e <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   11f74:	6839      	ldr	r1, [r7, #0]
   11f76:	4807      	ldr	r0, [pc, #28]	; (11f94 <usbdc_register_handler+0x50>)
   11f78:	4b04      	ldr	r3, [pc, #16]	; (11f8c <usbdc_register_handler+0x48>)
   11f7a:	4798      	blx	r3
		break;
   11f7c:	bf00      	nop
	}
}
   11f7e:	bf00      	nop
   11f80:	3708      	adds	r7, #8
   11f82:	46bd      	mov	sp, r7
   11f84:	bd80      	pop	{r7, pc}
   11f86:	bf00      	nop
   11f88:	20008c00 	.word	0x20008c00
   11f8c:	00007e6d 	.word	0x00007e6d
   11f90:	20008c04 	.word	0x20008c04
   11f94:	20008c08 	.word	0x20008c08

00011f98 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   11f98:	b580      	push	{r7, lr}
   11f9a:	b084      	sub	sp, #16
   11f9c:	af00      	add	r7, sp, #0
   11f9e:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   11fa0:	687b      	ldr	r3, [r7, #4]
   11fa2:	2b00      	cmp	r3, #0
   11fa4:	bf14      	ite	ne
   11fa6:	2301      	movne	r3, #1
   11fa8:	2300      	moveq	r3, #0
   11faa:	b2db      	uxtb	r3, r3
   11fac:	f240 3255 	movw	r2, #853	; 0x355
   11fb0:	4910      	ldr	r1, [pc, #64]	; (11ff4 <usbdc_init+0x5c>)
   11fb2:	4618      	mov	r0, r3
   11fb4:	4b10      	ldr	r3, [pc, #64]	; (11ff8 <usbdc_init+0x60>)
   11fb6:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   11fb8:	4b10      	ldr	r3, [pc, #64]	; (11ffc <usbdc_init+0x64>)
   11fba:	4798      	blx	r3
   11fbc:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   11fbe:	68fb      	ldr	r3, [r7, #12]
   11fc0:	2b00      	cmp	r3, #0
   11fc2:	da01      	bge.n	11fc8 <usbdc_init+0x30>
		return rc;
   11fc4:	68fb      	ldr	r3, [r7, #12]
   11fc6:	e010      	b.n	11fea <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   11fc8:	2220      	movs	r2, #32
   11fca:	2100      	movs	r1, #0
   11fcc:	480c      	ldr	r0, [pc, #48]	; (12000 <usbdc_init+0x68>)
   11fce:	4b0d      	ldr	r3, [pc, #52]	; (12004 <usbdc_init+0x6c>)
   11fd0:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   11fd2:	4a0b      	ldr	r2, [pc, #44]	; (12000 <usbdc_init+0x68>)
   11fd4:	687b      	ldr	r3, [r7, #4]
   11fd6:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   11fd8:	490b      	ldr	r1, [pc, #44]	; (12008 <usbdc_init+0x70>)
   11fda:	2000      	movs	r0, #0
   11fdc:	4b0b      	ldr	r3, [pc, #44]	; (1200c <usbdc_init+0x74>)
   11fde:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   11fe0:	490b      	ldr	r1, [pc, #44]	; (12010 <usbdc_init+0x78>)
   11fe2:	2001      	movs	r0, #1
   11fe4:	4b09      	ldr	r3, [pc, #36]	; (1200c <usbdc_init+0x74>)
   11fe6:	4798      	blx	r3

	return 0;
   11fe8:	2300      	movs	r3, #0
}
   11fea:	4618      	mov	r0, r3
   11fec:	3710      	adds	r7, #16
   11fee:	46bd      	mov	sp, r7
   11ff0:	bd80      	pop	{r7, pc}
   11ff2:	bf00      	nop
   11ff4:	0001f8a0 	.word	0x0001f8a0
   11ff8:	00007d91 	.word	0x00007d91
   11ffc:	000077e9 	.word	0x000077e9
   12000:	20008bfc 	.word	0x20008bfc
   12004:	0001b089 	.word	0x0001b089
   12008:	00011cf5 	.word	0x00011cf5
   1200c:	00007895 	.word	0x00007895
   12010:	00011ed1 	.word	0x00011ed1

00012014 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   12014:	b580      	push	{r7, lr}
   12016:	b082      	sub	sp, #8
   12018:	af00      	add	r7, sp, #0
   1201a:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   1201c:	6879      	ldr	r1, [r7, #4]
   1201e:	4803      	ldr	r0, [pc, #12]	; (1202c <usbdc_register_function+0x18>)
   12020:	4b03      	ldr	r3, [pc, #12]	; (12030 <usbdc_register_function+0x1c>)
   12022:	4798      	blx	r3
}
   12024:	bf00      	nop
   12026:	3708      	adds	r7, #8
   12028:	46bd      	mov	sp, r7
   1202a:	bd80      	pop	{r7, pc}
   1202c:	20008c0c 	.word	0x20008c0c
   12030:	00007e6d 	.word	0x00007e6d

00012034 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   12034:	b580      	push	{r7, lr}
   12036:	b082      	sub	sp, #8
   12038:	af00      	add	r7, sp, #0
   1203a:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   1203c:	4b0f      	ldr	r3, [pc, #60]	; (1207c <usbdc_start+0x48>)
   1203e:	7e9b      	ldrb	r3, [r3, #26]
   12040:	2b00      	cmp	r3, #0
   12042:	d002      	beq.n	1204a <usbdc_start+0x16>
		return ERR_BUSY;
   12044:	f06f 0303 	mvn.w	r3, #3
   12048:	e013      	b.n	12072 <usbdc_start+0x3e>
	}

	if (desces) {
   1204a:	687b      	ldr	r3, [r7, #4]
   1204c:	2b00      	cmp	r3, #0
   1204e:	d00e      	beq.n	1206e <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   12050:	4a0a      	ldr	r2, [pc, #40]	; (1207c <usbdc_start+0x48>)
   12052:	687b      	ldr	r3, [r7, #4]
   12054:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   12056:	687b      	ldr	r3, [r7, #4]
   12058:	681b      	ldr	r3, [r3, #0]
   1205a:	79da      	ldrb	r2, [r3, #7]
   1205c:	4b07      	ldr	r3, [pc, #28]	; (1207c <usbdc_start+0x48>)
   1205e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   12060:	4b06      	ldr	r3, [pc, #24]	; (1207c <usbdc_start+0x48>)
   12062:	2201      	movs	r2, #1
   12064:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   12066:	4b06      	ldr	r3, [pc, #24]	; (12080 <usbdc_start+0x4c>)
   12068:	4798      	blx	r3
	return ERR_NONE;
   1206a:	2300      	movs	r3, #0
   1206c:	e001      	b.n	12072 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   1206e:	f06f 0308 	mvn.w	r3, #8
}
   12072:	4618      	mov	r0, r3
   12074:	3708      	adds	r7, #8
   12076:	46bd      	mov	sp, r7
   12078:	bd80      	pop	{r7, pc}
   1207a:	bf00      	nop
   1207c:	20008bfc 	.word	0x20008bfc
   12080:	000078b9 	.word	0x000078b9

00012084 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   12084:	b580      	push	{r7, lr}
   12086:	af00      	add	r7, sp, #0
	usb_d_attach();
   12088:	4b01      	ldr	r3, [pc, #4]	; (12090 <usbdc_attach+0xc>)
   1208a:	4798      	blx	r3
}
   1208c:	bf00      	nop
   1208e:	bd80      	pop	{r7, pc}
   12090:	000078cd 	.word	0x000078cd

00012094 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   12094:	b480      	push	{r7}
   12096:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   12098:	4b03      	ldr	r3, [pc, #12]	; (120a8 <usbdc_get_ctrl_buffer+0x14>)
   1209a:	695b      	ldr	r3, [r3, #20]
}
   1209c:	4618      	mov	r0, r3
   1209e:	46bd      	mov	sp, r7
   120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   120a4:	4770      	bx	lr
   120a6:	bf00      	nop
   120a8:	20008bfc 	.word	0x20008bfc

000120ac <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   120ac:	b480      	push	{r7}
   120ae:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   120b0:	4b07      	ldr	r3, [pc, #28]	; (120d0 <usbdc_get_state+0x24>)
   120b2:	7e9b      	ldrb	r3, [r3, #26]
   120b4:	f003 0310 	and.w	r3, r3, #16
   120b8:	2b00      	cmp	r3, #0
   120ba:	d001      	beq.n	120c0 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   120bc:	2310      	movs	r3, #16
   120be:	e001      	b.n	120c4 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   120c0:	4b03      	ldr	r3, [pc, #12]	; (120d0 <usbdc_get_state+0x24>)
   120c2:	7e9b      	ldrb	r3, [r3, #26]
}
   120c4:	4618      	mov	r0, r3
   120c6:	46bd      	mov	sp, r7
   120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   120cc:	4770      	bx	lr
   120ce:	bf00      	nop
   120d0:	20008bfc 	.word	0x20008bfc

000120d4 <usb_get_u16>:
{
   120d4:	b480      	push	{r7}
   120d6:	b083      	sub	sp, #12
   120d8:	af00      	add	r7, sp, #0
   120da:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   120dc:	687b      	ldr	r3, [r7, #4]
   120de:	781b      	ldrb	r3, [r3, #0]
   120e0:	b29a      	uxth	r2, r3
   120e2:	687b      	ldr	r3, [r7, #4]
   120e4:	3301      	adds	r3, #1
   120e6:	781b      	ldrb	r3, [r3, #0]
   120e8:	b29b      	uxth	r3, r3
   120ea:	021b      	lsls	r3, r3, #8
   120ec:	b29b      	uxth	r3, r3
   120ee:	4413      	add	r3, r2
   120f0:	b29b      	uxth	r3, r3
}
   120f2:	4618      	mov	r0, r3
   120f4:	370c      	adds	r7, #12
   120f6:	46bd      	mov	sp, r7
   120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   120fc:	4770      	bx	lr

000120fe <usb_desc_len>:
{
   120fe:	b480      	push	{r7}
   12100:	b083      	sub	sp, #12
   12102:	af00      	add	r7, sp, #0
   12104:	6078      	str	r0, [r7, #4]
	return desc[0];
   12106:	687b      	ldr	r3, [r7, #4]
   12108:	781b      	ldrb	r3, [r3, #0]
}
   1210a:	4618      	mov	r0, r3
   1210c:	370c      	adds	r7, #12
   1210e:	46bd      	mov	sp, r7
   12110:	f85d 7b04 	ldr.w	r7, [sp], #4
   12114:	4770      	bx	lr

00012116 <usb_desc_type>:
{
   12116:	b480      	push	{r7}
   12118:	b083      	sub	sp, #12
   1211a:	af00      	add	r7, sp, #0
   1211c:	6078      	str	r0, [r7, #4]
	return desc[1];
   1211e:	687b      	ldr	r3, [r7, #4]
   12120:	3301      	adds	r3, #1
   12122:	781b      	ldrb	r3, [r3, #0]
}
   12124:	4618      	mov	r0, r3
   12126:	370c      	adds	r7, #12
   12128:	46bd      	mov	sp, r7
   1212a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1212e:	4770      	bx	lr

00012130 <usb_desc_next>:
{
   12130:	b580      	push	{r7, lr}
   12132:	b082      	sub	sp, #8
   12134:	af00      	add	r7, sp, #0
   12136:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   12138:	6878      	ldr	r0, [r7, #4]
   1213a:	4b05      	ldr	r3, [pc, #20]	; (12150 <usb_desc_next+0x20>)
   1213c:	4798      	blx	r3
   1213e:	4603      	mov	r3, r0
   12140:	461a      	mov	r2, r3
   12142:	687b      	ldr	r3, [r7, #4]
   12144:	4413      	add	r3, r2
}
   12146:	4618      	mov	r0, r3
   12148:	3708      	adds	r7, #8
   1214a:	46bd      	mov	sp, r7
   1214c:	bd80      	pop	{r7, pc}
   1214e:	bf00      	nop
   12150:	000120ff 	.word	0x000120ff

00012154 <usb_cfg_desc_total_len>:
{
   12154:	b580      	push	{r7, lr}
   12156:	b082      	sub	sp, #8
   12158:	af00      	add	r7, sp, #0
   1215a:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   1215c:	687b      	ldr	r3, [r7, #4]
   1215e:	3302      	adds	r3, #2
   12160:	4618      	mov	r0, r3
   12162:	4b03      	ldr	r3, [pc, #12]	; (12170 <usb_cfg_desc_total_len+0x1c>)
   12164:	4798      	blx	r3
   12166:	4603      	mov	r3, r0
}
   12168:	4618      	mov	r0, r3
   1216a:	3708      	adds	r7, #8
   1216c:	46bd      	mov	sp, r7
   1216e:	bd80      	pop	{r7, pc}
   12170:	000120d5 	.word	0x000120d5

00012174 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   12174:	b580      	push	{r7, lr}
   12176:	b082      	sub	sp, #8
   12178:	af00      	add	r7, sp, #0
   1217a:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   1217c:	6878      	ldr	r0, [r7, #4]
   1217e:	4b05      	ldr	r3, [pc, #20]	; (12194 <usb_cfg_desc_next+0x20>)
   12180:	4798      	blx	r3
   12182:	4603      	mov	r3, r0
   12184:	461a      	mov	r2, r3
   12186:	687b      	ldr	r3, [r7, #4]
   12188:	4413      	add	r3, r2
}
   1218a:	4618      	mov	r0, r3
   1218c:	3708      	adds	r7, #8
   1218e:	46bd      	mov	sp, r7
   12190:	bd80      	pop	{r7, pc}
   12192:	bf00      	nop
   12194:	00012155 	.word	0x00012155

00012198 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   12198:	b580      	push	{r7, lr}
   1219a:	b084      	sub	sp, #16
   1219c:	af00      	add	r7, sp, #0
   1219e:	60f8      	str	r0, [r7, #12]
   121a0:	60b9      	str	r1, [r7, #8]
   121a2:	4613      	mov	r3, r2
   121a4:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   121a6:	e015      	b.n	121d4 <usb_find_desc+0x3c>
		_desc_len_check();
   121a8:	68f8      	ldr	r0, [r7, #12]
   121aa:	4b0f      	ldr	r3, [pc, #60]	; (121e8 <usb_find_desc+0x50>)
   121ac:	4798      	blx	r3
   121ae:	4603      	mov	r3, r0
   121b0:	2b01      	cmp	r3, #1
   121b2:	d801      	bhi.n	121b8 <usb_find_desc+0x20>
   121b4:	2300      	movs	r3, #0
   121b6:	e012      	b.n	121de <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   121b8:	68f8      	ldr	r0, [r7, #12]
   121ba:	4b0c      	ldr	r3, [pc, #48]	; (121ec <usb_find_desc+0x54>)
   121bc:	4798      	blx	r3
   121be:	4603      	mov	r3, r0
   121c0:	461a      	mov	r2, r3
   121c2:	79fb      	ldrb	r3, [r7, #7]
   121c4:	4293      	cmp	r3, r2
   121c6:	d101      	bne.n	121cc <usb_find_desc+0x34>
			return desc;
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	e008      	b.n	121de <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   121cc:	68f8      	ldr	r0, [r7, #12]
   121ce:	4b08      	ldr	r3, [pc, #32]	; (121f0 <usb_find_desc+0x58>)
   121d0:	4798      	blx	r3
   121d2:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   121d4:	68fa      	ldr	r2, [r7, #12]
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	429a      	cmp	r2, r3
   121da:	d3e5      	bcc.n	121a8 <usb_find_desc+0x10>
	}
	return NULL;
   121dc:	2300      	movs	r3, #0
}
   121de:	4618      	mov	r0, r3
   121e0:	3710      	adds	r7, #16
   121e2:	46bd      	mov	sp, r7
   121e4:	bd80      	pop	{r7, pc}
   121e6:	bf00      	nop
   121e8:	000120ff 	.word	0x000120ff
   121ec:	00012117 	.word	0x00012117
   121f0:	00012131 	.word	0x00012131

000121f4 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   121f4:	b580      	push	{r7, lr}
   121f6:	b082      	sub	sp, #8
   121f8:	af00      	add	r7, sp, #0
   121fa:	6078      	str	r0, [r7, #4]
   121fc:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   121fe:	e019      	b.n	12234 <usb_find_ep_desc+0x40>
		_desc_len_check();
   12200:	6878      	ldr	r0, [r7, #4]
   12202:	4b12      	ldr	r3, [pc, #72]	; (1224c <usb_find_ep_desc+0x58>)
   12204:	4798      	blx	r3
   12206:	4603      	mov	r3, r0
   12208:	2b01      	cmp	r3, #1
   1220a:	d801      	bhi.n	12210 <usb_find_ep_desc+0x1c>
   1220c:	2300      	movs	r3, #0
   1220e:	e018      	b.n	12242 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   12210:	6878      	ldr	r0, [r7, #4]
   12212:	4b0f      	ldr	r3, [pc, #60]	; (12250 <usb_find_ep_desc+0x5c>)
   12214:	4798      	blx	r3
   12216:	4603      	mov	r3, r0
   12218:	2b04      	cmp	r3, #4
   1221a:	d010      	beq.n	1223e <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   1221c:	6878      	ldr	r0, [r7, #4]
   1221e:	4b0c      	ldr	r3, [pc, #48]	; (12250 <usb_find_ep_desc+0x5c>)
   12220:	4798      	blx	r3
   12222:	4603      	mov	r3, r0
   12224:	2b05      	cmp	r3, #5
   12226:	d101      	bne.n	1222c <usb_find_ep_desc+0x38>
			return desc;
   12228:	687b      	ldr	r3, [r7, #4]
   1222a:	e00a      	b.n	12242 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   1222c:	6878      	ldr	r0, [r7, #4]
   1222e:	4b09      	ldr	r3, [pc, #36]	; (12254 <usb_find_ep_desc+0x60>)
   12230:	4798      	blx	r3
   12232:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   12234:	687a      	ldr	r2, [r7, #4]
   12236:	683b      	ldr	r3, [r7, #0]
   12238:	429a      	cmp	r2, r3
   1223a:	d3e1      	bcc.n	12200 <usb_find_ep_desc+0xc>
   1223c:	e000      	b.n	12240 <usb_find_ep_desc+0x4c>
			break;
   1223e:	bf00      	nop
	}
	return NULL;
   12240:	2300      	movs	r3, #0
}
   12242:	4618      	mov	r0, r3
   12244:	3708      	adds	r7, #8
   12246:	46bd      	mov	sp, r7
   12248:	bd80      	pop	{r7, pc}
   1224a:	bf00      	nop
   1224c:	000120ff 	.word	0x000120ff
   12250:	00012117 	.word	0x00012117
   12254:	00012131 	.word	0x00012131

00012258 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   12258:	b580      	push	{r7, lr}
   1225a:	b084      	sub	sp, #16
   1225c:	af00      	add	r7, sp, #0
   1225e:	60f8      	str	r0, [r7, #12]
   12260:	60b9      	str	r1, [r7, #8]
   12262:	4613      	mov	r3, r2
   12264:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   12266:	2202      	movs	r2, #2
   12268:	68b9      	ldr	r1, [r7, #8]
   1226a:	68f8      	ldr	r0, [r7, #12]
   1226c:	4b15      	ldr	r3, [pc, #84]	; (122c4 <usb_find_cfg_desc+0x6c>)
   1226e:	4798      	blx	r3
   12270:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	2b00      	cmp	r3, #0
   12276:	d11a      	bne.n	122ae <usb_find_cfg_desc+0x56>
		return NULL;
   12278:	2300      	movs	r3, #0
   1227a:	e01f      	b.n	122bc <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   1227c:	68f8      	ldr	r0, [r7, #12]
   1227e:	4b12      	ldr	r3, [pc, #72]	; (122c8 <usb_find_cfg_desc+0x70>)
   12280:	4798      	blx	r3
   12282:	4603      	mov	r3, r0
   12284:	2b01      	cmp	r3, #1
   12286:	d801      	bhi.n	1228c <usb_find_cfg_desc+0x34>
   12288:	2300      	movs	r3, #0
   1228a:	e017      	b.n	122bc <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   1228c:	68fb      	ldr	r3, [r7, #12]
   1228e:	3301      	adds	r3, #1
   12290:	781b      	ldrb	r3, [r3, #0]
   12292:	2b02      	cmp	r3, #2
   12294:	d110      	bne.n	122b8 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   12296:	68fb      	ldr	r3, [r7, #12]
   12298:	3305      	adds	r3, #5
   1229a:	781b      	ldrb	r3, [r3, #0]
   1229c:	79fa      	ldrb	r2, [r7, #7]
   1229e:	429a      	cmp	r2, r3
   122a0:	d101      	bne.n	122a6 <usb_find_cfg_desc+0x4e>
			return desc;
   122a2:	68fb      	ldr	r3, [r7, #12]
   122a4:	e00a      	b.n	122bc <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   122a6:	68f8      	ldr	r0, [r7, #12]
   122a8:	4b08      	ldr	r3, [pc, #32]	; (122cc <usb_find_cfg_desc+0x74>)
   122aa:	4798      	blx	r3
   122ac:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   122ae:	68fa      	ldr	r2, [r7, #12]
   122b0:	68bb      	ldr	r3, [r7, #8]
   122b2:	429a      	cmp	r2, r3
   122b4:	d3e2      	bcc.n	1227c <usb_find_cfg_desc+0x24>
   122b6:	e000      	b.n	122ba <usb_find_cfg_desc+0x62>
			break;
   122b8:	bf00      	nop
	}
	return NULL;
   122ba:	2300      	movs	r3, #0
}
   122bc:	4618      	mov	r0, r3
   122be:	3710      	adds	r7, #16
   122c0:	46bd      	mov	sp, r7
   122c2:	bd80      	pop	{r7, pc}
   122c4:	00012199 	.word	0x00012199
   122c8:	000120ff 	.word	0x000120ff
   122cc:	00012175 	.word	0x00012175

000122d0 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   122d0:	b580      	push	{r7, lr}
   122d2:	b086      	sub	sp, #24
   122d4:	af00      	add	r7, sp, #0
   122d6:	60f8      	str	r0, [r7, #12]
   122d8:	60b9      	str	r1, [r7, #8]
   122da:	4613      	mov	r3, r2
   122dc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   122de:	2300      	movs	r3, #0
   122e0:	75fb      	strb	r3, [r7, #23]
   122e2:	e020      	b.n	12326 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   122e4:	2203      	movs	r2, #3
   122e6:	68b9      	ldr	r1, [r7, #8]
   122e8:	68f8      	ldr	r0, [r7, #12]
   122ea:	4b13      	ldr	r3, [pc, #76]	; (12338 <usb_find_str_desc+0x68>)
   122ec:	4798      	blx	r3
   122ee:	60f8      	str	r0, [r7, #12]
		if (desc) {
   122f0:	68fb      	ldr	r3, [r7, #12]
   122f2:	2b00      	cmp	r3, #0
   122f4:	d015      	beq.n	12322 <usb_find_str_desc+0x52>
			_desc_len_check();
   122f6:	68f8      	ldr	r0, [r7, #12]
   122f8:	4b10      	ldr	r3, [pc, #64]	; (1233c <usb_find_str_desc+0x6c>)
   122fa:	4798      	blx	r3
   122fc:	4603      	mov	r3, r0
   122fe:	2b01      	cmp	r3, #1
   12300:	d801      	bhi.n	12306 <usb_find_str_desc+0x36>
   12302:	2300      	movs	r3, #0
   12304:	e014      	b.n	12330 <usb_find_str_desc+0x60>
			if (i == str_index) {
   12306:	7dfa      	ldrb	r2, [r7, #23]
   12308:	79fb      	ldrb	r3, [r7, #7]
   1230a:	429a      	cmp	r2, r3
   1230c:	d101      	bne.n	12312 <usb_find_str_desc+0x42>
				return desc;
   1230e:	68fb      	ldr	r3, [r7, #12]
   12310:	e00e      	b.n	12330 <usb_find_str_desc+0x60>
			}
			i++;
   12312:	7dfb      	ldrb	r3, [r7, #23]
   12314:	3301      	adds	r3, #1
   12316:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   12318:	68f8      	ldr	r0, [r7, #12]
   1231a:	4b09      	ldr	r3, [pc, #36]	; (12340 <usb_find_str_desc+0x70>)
   1231c:	4798      	blx	r3
   1231e:	60f8      	str	r0, [r7, #12]
   12320:	e001      	b.n	12326 <usb_find_str_desc+0x56>
		} else {
			return NULL;
   12322:	2300      	movs	r3, #0
   12324:	e004      	b.n	12330 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   12326:	68fa      	ldr	r2, [r7, #12]
   12328:	68bb      	ldr	r3, [r7, #8]
   1232a:	429a      	cmp	r2, r3
   1232c:	d3da      	bcc.n	122e4 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   1232e:	2300      	movs	r3, #0
}
   12330:	4618      	mov	r0, r3
   12332:	3718      	adds	r7, #24
   12334:	46bd      	mov	sp, r7
   12336:	bd80      	pop	{r7, pc}
   12338:	00012199 	.word	0x00012199
   1233c:	000120ff 	.word	0x000120ff
   12340:	00012131 	.word	0x00012131

00012344 <_ZN18ARINC_Buffer_ClassC2Ev>:
#include "TemperatureSensors_Class.h"
#include "string.h"


// default constructor
ARINC_Buffer_Class::ARINC_Buffer_Class()
   12344:	b480      	push	{r7}
   12346:	b083      	sub	sp, #12
   12348:	af00      	add	r7, sp, #0
   1234a:	6078      	str	r0, [r7, #4]
   1234c:	6039      	str	r1, [r7, #0]
   1234e:	683b      	ldr	r3, [r7, #0]
   12350:	681a      	ldr	r2, [r3, #0]
   12352:	687b      	ldr	r3, [r7, #4]
   12354:	601a      	str	r2, [r3, #0]
   12356:	687b      	ldr	r3, [r7, #4]
   12358:	681b      	ldr	r3, [r3, #0]
   1235a:	3b0c      	subs	r3, #12
   1235c:	681b      	ldr	r3, [r3, #0]
   1235e:	461a      	mov	r2, r3
   12360:	687b      	ldr	r3, [r7, #4]
   12362:	4413      	add	r3, r2
   12364:	683a      	ldr	r2, [r7, #0]
   12366:	6852      	ldr	r2, [r2, #4]
   12368:	601a      	str	r2, [r3, #0]
   1236a:	687b      	ldr	r3, [r7, #4]
   1236c:	681b      	ldr	r3, [r3, #0]
   1236e:	3b10      	subs	r3, #16
   12370:	681b      	ldr	r3, [r3, #0]
   12372:	461a      	mov	r2, r3
   12374:	687b      	ldr	r3, [r7, #4]
   12376:	4413      	add	r3, r2
   12378:	683a      	ldr	r2, [r7, #0]
   1237a:	6892      	ldr	r2, [r2, #8]
   1237c:	601a      	str	r2, [r3, #0]
{
} //ARINC_Buffer_Class
   1237e:	687b      	ldr	r3, [r7, #4]
   12380:	4618      	mov	r0, r3
   12382:	370c      	adds	r7, #12
   12384:	46bd      	mov	sp, r7
   12386:	bc80      	pop	{r7}
   12388:	4770      	bx	lr

0001238a <_ZN18ARINC_Buffer_ClassD2Ev>:

// default destructor
ARINC_Buffer_Class::~ARINC_Buffer_Class()
   1238a:	b480      	push	{r7}
   1238c:	b083      	sub	sp, #12
   1238e:	af00      	add	r7, sp, #0
   12390:	6078      	str	r0, [r7, #4]
   12392:	6039      	str	r1, [r7, #0]
   12394:	683b      	ldr	r3, [r7, #0]
   12396:	681a      	ldr	r2, [r3, #0]
   12398:	687b      	ldr	r3, [r7, #4]
   1239a:	601a      	str	r2, [r3, #0]
   1239c:	687b      	ldr	r3, [r7, #4]
   1239e:	681b      	ldr	r3, [r3, #0]
   123a0:	3b0c      	subs	r3, #12
   123a2:	681b      	ldr	r3, [r3, #0]
   123a4:	461a      	mov	r2, r3
   123a6:	687b      	ldr	r3, [r7, #4]
   123a8:	4413      	add	r3, r2
   123aa:	683a      	ldr	r2, [r7, #0]
   123ac:	6852      	ldr	r2, [r2, #4]
   123ae:	601a      	str	r2, [r3, #0]
   123b0:	687b      	ldr	r3, [r7, #4]
   123b2:	681b      	ldr	r3, [r3, #0]
   123b4:	3b10      	subs	r3, #16
   123b6:	681b      	ldr	r3, [r3, #0]
   123b8:	461a      	mov	r2, r3
   123ba:	687b      	ldr	r3, [r7, #4]
   123bc:	4413      	add	r3, r2
   123be:	683a      	ldr	r2, [r7, #0]
   123c0:	6892      	ldr	r2, [r2, #8]
   123c2:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Buffer_Class
   123c4:	687b      	ldr	r3, [r7, #4]
   123c6:	4618      	mov	r0, r3
   123c8:	370c      	adds	r7, #12
   123ca:	46bd      	mov	sp, r7
   123cc:	bc80      	pop	{r7}
   123ce:	4770      	bx	lr

000123d0 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv>:

void ARINC_Buffer_Class::SaveTemperature(void){
   123d0:	b590      	push	{r4, r7, lr}
   123d2:	b085      	sub	sp, #20
   123d4:	af00      	add	r7, sp, #0
   123d6:	6078      	str	r0, [r7, #4]
	octalLabel=Label2Byte(COCKPITS_TEMPERATURE);
   123d8:	687b      	ldr	r3, [r7, #4]
   123da:	681b      	ldr	r3, [r3, #0]
   123dc:	3b0c      	subs	r3, #12
   123de:	681b      	ldr	r3, [r3, #0]
   123e0:	461a      	mov	r2, r3
   123e2:	687b      	ldr	r3, [r7, #4]
   123e4:	4413      	add	r3, r2
   123e6:	681b      	ldr	r3, [r3, #0]
   123e8:	3304      	adds	r3, #4
   123ea:	681b      	ldr	r3, [r3, #0]
   123ec:	687a      	ldr	r2, [r7, #4]
   123ee:	6812      	ldr	r2, [r2, #0]
   123f0:	3a0c      	subs	r2, #12
   123f2:	6812      	ldr	r2, [r2, #0]
   123f4:	4611      	mov	r1, r2
   123f6:	687a      	ldr	r2, [r7, #4]
   123f8:	440a      	add	r2, r1
   123fa:	f44f 71bb 	mov.w	r1, #374	; 0x176
   123fe:	4610      	mov	r0, r2
   12400:	4798      	blx	r3
   12402:	4603      	mov	r3, r0
   12404:	461a      	mov	r2, r3
   12406:	687b      	ldr	r3, [r7, #4]
   12408:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
	index=GetIndexTXLabelarray(FlipByte(octalLabel),LabelsArrayTX);
   1240c:	687b      	ldr	r3, [r7, #4]
   1240e:	681b      	ldr	r3, [r3, #0]
   12410:	3b0c      	subs	r3, #12
   12412:	681b      	ldr	r3, [r3, #0]
   12414:	461a      	mov	r2, r3
   12416:	687b      	ldr	r3, [r7, #4]
   12418:	189c      	adds	r4, r3, r2
   1241a:	687b      	ldr	r3, [r7, #4]
   1241c:	681b      	ldr	r3, [r3, #0]
   1241e:	3b0c      	subs	r3, #12
   12420:	681b      	ldr	r3, [r3, #0]
   12422:	461a      	mov	r2, r3
   12424:	687b      	ldr	r3, [r7, #4]
   12426:	4413      	add	r3, r2
   12428:	681b      	ldr	r3, [r3, #0]
   1242a:	681b      	ldr	r3, [r3, #0]
   1242c:	687a      	ldr	r2, [r7, #4]
   1242e:	6812      	ldr	r2, [r2, #0]
   12430:	3a0c      	subs	r2, #12
   12432:	6812      	ldr	r2, [r2, #0]
   12434:	4611      	mov	r1, r2
   12436:	687a      	ldr	r2, [r7, #4]
   12438:	1850      	adds	r0, r2, r1
   1243a:	687a      	ldr	r2, [r7, #4]
   1243c:	f892 2165 	ldrb.w	r2, [r2, #357]	; 0x165
   12440:	4611      	mov	r1, r2
   12442:	4798      	blx	r3
   12444:	4603      	mov	r3, r0
   12446:	4619      	mov	r1, r3
   12448:	687b      	ldr	r3, [r7, #4]
   1244a:	3304      	adds	r3, #4
   1244c:	461a      	mov	r2, r3
   1244e:	4620      	mov	r0, r4
   12450:	4b23      	ldr	r3, [pc, #140]	; (124e0 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x110>)
   12452:	4798      	blx	r3
   12454:	4603      	mov	r3, r0
   12456:	461a      	mov	r2, r3
   12458:	687b      	ldr	r3, [r7, #4]
   1245a:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
	float temperature=temperatures.lastValue;
   1245e:	4b21      	ldr	r3, [pc, #132]	; (124e4 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x114>)
   12460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   12462:	60fb      	str	r3, [r7, #12]
	data=MakeLabel374(FloatTwoComplement(temperature,15),temperature);
   12464:	687b      	ldr	r3, [r7, #4]
   12466:	681b      	ldr	r3, [r3, #0]
   12468:	3b10      	subs	r3, #16
   1246a:	681b      	ldr	r3, [r3, #0]
   1246c:	461a      	mov	r2, r3
   1246e:	687b      	ldr	r3, [r7, #4]
   12470:	189c      	adds	r4, r3, r2
   12472:	687b      	ldr	r3, [r7, #4]
   12474:	681b      	ldr	r3, [r3, #0]
   12476:	3b0c      	subs	r3, #12
   12478:	681b      	ldr	r3, [r3, #0]
   1247a:	461a      	mov	r2, r3
   1247c:	687b      	ldr	r3, [r7, #4]
   1247e:	4413      	add	r3, r2
   12480:	220f      	movs	r2, #15
   12482:	68f9      	ldr	r1, [r7, #12]
   12484:	4618      	mov	r0, r3
   12486:	4b18      	ldr	r3, [pc, #96]	; (124e8 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x118>)
   12488:	4798      	blx	r3
   1248a:	4603      	mov	r3, r0
   1248c:	68fa      	ldr	r2, [r7, #12]
   1248e:	4619      	mov	r1, r3
   12490:	4620      	mov	r0, r4
   12492:	4b16      	ldr	r3, [pc, #88]	; (124ec <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x11c>)
   12494:	4798      	blx	r3
   12496:	4602      	mov	r2, r0
   12498:	687b      	ldr	r3, [r7, #4]
   1249a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	Uint32FourBytesArray(data,localArray);
   1249e:	687b      	ldr	r3, [r7, #4]
   124a0:	681b      	ldr	r3, [r3, #0]
   124a2:	3b0c      	subs	r3, #12
   124a4:	681b      	ldr	r3, [r3, #0]
   124a6:	461a      	mov	r2, r3
   124a8:	687b      	ldr	r3, [r7, #4]
   124aa:	1898      	adds	r0, r3, r2
   124ac:	687b      	ldr	r3, [r7, #4]
   124ae:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
   124b2:	687b      	ldr	r3, [r7, #4]
   124b4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   124b8:	461a      	mov	r2, r3
   124ba:	4b0d      	ldr	r3, [pc, #52]	; (124f0 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0x120>)
   124bc:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   124be:	687b      	ldr	r3, [r7, #4]
   124c0:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
   124c4:	3338      	adds	r3, #56	; 0x38
   124c6:	009b      	lsls	r3, r3, #2
   124c8:	687a      	ldr	r2, [r7, #4]
   124ca:	4413      	add	r3, r2
   124cc:	3304      	adds	r3, #4
   124ce:	687a      	ldr	r2, [r7, #4]
   124d0:	f502 72b6 	add.w	r2, r2, #364	; 0x16c
   124d4:	6812      	ldr	r2, [r2, #0]
   124d6:	601a      	str	r2, [r3, #0]
   124d8:	bf00      	nop
   124da:	3714      	adds	r7, #20
   124dc:	46bd      	mov	sp, r7
   124de:	bd90      	pop	{r4, r7, pc}
   124e0:	000126ef 	.word	0x000126ef
   124e4:	20009820 	.word	0x20009820
   124e8:	0001283d 	.word	0x0001283d
   124ec:	00013b21 	.word	0x00013b21
   124f0:	000127eb 	.word	0x000127eb

000124f4 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
   124f4:	b480      	push	{r7}
   124f6:	b083      	sub	sp, #12
   124f8:	af00      	add	r7, sp, #0
   124fa:	6078      	str	r0, [r7, #4]
   124fc:	4a04      	ldr	r2, [pc, #16]	; (12510 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
   124fe:	687b      	ldr	r3, [r7, #4]
   12500:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
   12502:	687b      	ldr	r3, [r7, #4]
   12504:	4618      	mov	r0, r3
   12506:	370c      	adds	r7, #12
   12508:	46bd      	mov	sp, r7
   1250a:	bc80      	pop	{r7}
   1250c:	4770      	bx	lr
   1250e:	bf00      	nop
   12510:	0001f8c0 	.word	0x0001f8c0

00012514 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
   12514:	b480      	push	{r7}
   12516:	b083      	sub	sp, #12
   12518:	af00      	add	r7, sp, #0
   1251a:	6078      	str	r0, [r7, #4]
   1251c:	4a04      	ldr	r2, [pc, #16]	; (12530 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
   1251e:	687b      	ldr	r3, [r7, #4]
   12520:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
   12522:	687b      	ldr	r3, [r7, #4]
   12524:	4618      	mov	r0, r3
   12526:	370c      	adds	r7, #12
   12528:	46bd      	mov	sp, r7
   1252a:	bc80      	pop	{r7}
   1252c:	4770      	bx	lr
   1252e:	bf00      	nop
   12530:	0001f8c0 	.word	0x0001f8c0

00012534 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   12534:	b5b0      	push	{r4, r5, r7, lr}
   12536:	b082      	sub	sp, #8
   12538:	af00      	add	r7, sp, #0
   1253a:	6078      	str	r0, [r7, #4]
   1253c:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   1253e:	4b0a      	ldr	r3, [pc, #40]	; (12568 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   12540:	6878      	ldr	r0, [r7, #4]
   12542:	4798      	blx	r3
   12544:	4604      	mov	r4, r0
   12546:	460d      	mov	r5, r1
   12548:	4b07      	ldr	r3, [pc, #28]	; (12568 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   1254a:	6838      	ldr	r0, [r7, #0]
   1254c:	4798      	blx	r3
   1254e:	4602      	mov	r2, r0
   12550:	460b      	mov	r3, r1
   12552:	4620      	mov	r0, r4
   12554:	4629      	mov	r1, r5
   12556:	4c05      	ldr	r4, [pc, #20]	; (1256c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
   12558:	47a0      	blx	r4
   1255a:	4603      	mov	r3, r0
   1255c:	460c      	mov	r4, r1
    }
   1255e:	4618      	mov	r0, r3
   12560:	4621      	mov	r1, r4
   12562:	3708      	adds	r7, #8
   12564:	46bd      	mov	sp, r7
   12566:	bdb0      	pop	{r4, r5, r7, pc}
   12568:	00019d09 	.word	0x00019d09
   1256c:	00018919 	.word	0x00018919

00012570 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   12570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12574:	b085      	sub	sp, #20
   12576:	af00      	add	r7, sp, #0
   12578:	6078      	str	r0, [r7, #4]
   1257a:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
   1257c:	2300      	movs	r3, #0
   1257e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   12580:	2300      	movs	r3, #0
   12582:	73bb      	strb	r3, [r7, #14]
   12584:	7bbb      	ldrb	r3, [r7, #14]
   12586:	2b02      	cmp	r3, #2
   12588:	d86d      	bhi.n	12666 <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   1258a:	7bbb      	ldrb	r3, [r7, #14]
   1258c:	f1c3 0402 	rsb	r4, r3, #2
   12590:	4b3c      	ldr	r3, [pc, #240]	; (12684 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   12592:	6838      	ldr	r0, [r7, #0]
   12594:	4798      	blx	r3
   12596:	4680      	mov	r8, r0
   12598:	4689      	mov	r9, r1
   1259a:	7bbb      	ldrb	r3, [r7, #14]
   1259c:	f1c3 0302 	rsb	r3, r3, #2
   125a0:	4619      	mov	r1, r3
   125a2:	200a      	movs	r0, #10
   125a4:	4b38      	ldr	r3, [pc, #224]	; (12688 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   125a6:	4798      	blx	r3
   125a8:	4602      	mov	r2, r0
   125aa:	460b      	mov	r3, r1
   125ac:	4d37      	ldr	r5, [pc, #220]	; (1268c <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
   125ae:	4640      	mov	r0, r8
   125b0:	4649      	mov	r1, r9
   125b2:	47a8      	blx	r5
   125b4:	4602      	mov	r2, r0
   125b6:	460b      	mov	r3, r1
   125b8:	4611      	mov	r1, r2
   125ba:	461a      	mov	r2, r3
   125bc:	4b34      	ldr	r3, [pc, #208]	; (12690 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   125be:	4608      	mov	r0, r1
   125c0:	4611      	mov	r1, r2
   125c2:	4798      	blx	r3
   125c4:	4603      	mov	r3, r0
   125c6:	b2da      	uxtb	r2, r3
   125c8:	f107 0310 	add.w	r3, r7, #16
   125cc:	4423      	add	r3, r4
   125ce:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
   125d2:	7bbb      	ldrb	r3, [r7, #14]
   125d4:	f1c3 0302 	rsb	r3, r3, #2
   125d8:	f107 0210 	add.w	r2, r7, #16
   125dc:	4413      	add	r3, r2
   125de:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   125e2:	461a      	mov	r2, r3
   125e4:	4b2b      	ldr	r3, [pc, #172]	; (12694 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
   125e6:	4610      	mov	r0, r2
   125e8:	4798      	blx	r3
   125ea:	4605      	mov	r5, r0
   125ec:	460e      	mov	r6, r1
   125ee:	7bbb      	ldrb	r3, [r7, #14]
   125f0:	f1c3 0302 	rsb	r3, r3, #2
   125f4:	4619      	mov	r1, r3
   125f6:	200a      	movs	r0, #10
   125f8:	4b23      	ldr	r3, [pc, #140]	; (12688 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   125fa:	4798      	blx	r3
   125fc:	4602      	mov	r2, r0
   125fe:	460b      	mov	r3, r1
   12600:	4c25      	ldr	r4, [pc, #148]	; (12698 <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
   12602:	4628      	mov	r0, r5
   12604:	4631      	mov	r1, r6
   12606:	47a0      	blx	r4
   12608:	4603      	mov	r3, r0
   1260a:	460c      	mov	r4, r1
   1260c:	461d      	mov	r5, r3
   1260e:	4626      	mov	r6, r4
   12610:	4b1c      	ldr	r3, [pc, #112]	; (12684 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   12612:	6838      	ldr	r0, [r7, #0]
   12614:	4798      	blx	r3
   12616:	4c21      	ldr	r4, [pc, #132]	; (1269c <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
   12618:	462a      	mov	r2, r5
   1261a:	4633      	mov	r3, r6
   1261c:	47a0      	blx	r4
   1261e:	4603      	mov	r3, r0
   12620:	460c      	mov	r4, r1
   12622:	4619      	mov	r1, r3
   12624:	4622      	mov	r2, r4
   12626:	4b1a      	ldr	r3, [pc, #104]	; (12690 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   12628:	4608      	mov	r0, r1
   1262a:	4611      	mov	r1, r2
   1262c:	4798      	blx	r3
   1262e:	4603      	mov	r3, r0
   12630:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
   12632:	7bbb      	ldrb	r3, [r7, #14]
   12634:	f1c3 0302 	rsb	r3, r3, #2
   12638:	f107 0210 	add.w	r2, r7, #16
   1263c:	4413      	add	r3, r2
   1263e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   12642:	461a      	mov	r2, r3
   12644:	7bbb      	ldrb	r3, [r7, #14]
   12646:	4619      	mov	r1, r3
   12648:	009b      	lsls	r3, r3, #2
   1264a:	1acb      	subs	r3, r1, r3
   1264c:	3306      	adds	r3, #6
   1264e:	fa02 f303 	lsl.w	r3, r2, r3
   12652:	b25a      	sxtb	r2, r3
   12654:	f997 300f 	ldrsb.w	r3, [r7, #15]
   12658:	4313      	orrs	r3, r2
   1265a:	b25b      	sxtb	r3, r3
   1265c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   1265e:	7bbb      	ldrb	r3, [r7, #14]
   12660:	3301      	adds	r3, #1
   12662:	73bb      	strb	r3, [r7, #14]
   12664:	e78e      	b.n	12584 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
   12666:	687b      	ldr	r3, [r7, #4]
   12668:	681b      	ldr	r3, [r3, #0]
   1266a:	681b      	ldr	r3, [r3, #0]
   1266c:	7bfa      	ldrb	r2, [r7, #15]
   1266e:	4611      	mov	r1, r2
   12670:	6878      	ldr	r0, [r7, #4]
   12672:	4798      	blx	r3
   12674:	4603      	mov	r3, r0
   12676:	73fb      	strb	r3, [r7, #15]
	return result;
   12678:	7bfb      	ldrb	r3, [r7, #15]
	
}
   1267a:	4618      	mov	r0, r3
   1267c:	3714      	adds	r7, #20
   1267e:	46bd      	mov	sp, r7
   12680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12684:	00019ce9 	.word	0x00019ce9
   12688:	00012535 	.word	0x00012535
   1268c:	0001a029 	.word	0x0001a029
   12690:	0001a335 	.word	0x0001a335
   12694:	00019d09 	.word	0x00019d09
   12698:	00019dd5 	.word	0x00019dd5
   1269c:	00019a6d 	.word	0x00019a6d

000126a0 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
   126a0:	b480      	push	{r7}
   126a2:	b085      	sub	sp, #20
   126a4:	af00      	add	r7, sp, #0
   126a6:	6078      	str	r0, [r7, #4]
   126a8:	460b      	mov	r3, r1
   126aa:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
   126ac:	2300      	movs	r3, #0
   126ae:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   126b0:	2300      	movs	r3, #0
   126b2:	60bb      	str	r3, [r7, #8]
   126b4:	68bb      	ldr	r3, [r7, #8]
   126b6:	2b07      	cmp	r3, #7
   126b8:	dc13      	bgt.n	126e2 <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
   126ba:	7bfb      	ldrb	r3, [r7, #15]
   126bc:	005b      	lsls	r3, r3, #1
   126be:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   126c0:	78fa      	ldrb	r2, [r7, #3]
   126c2:	68bb      	ldr	r3, [r7, #8]
   126c4:	fa42 f303 	asr.w	r3, r2, r3
   126c8:	b25b      	sxtb	r3, r3
   126ca:	f003 0301 	and.w	r3, r3, #1
   126ce:	b25a      	sxtb	r2, r3
   126d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
   126d4:	4313      	orrs	r3, r2
   126d6:	b25b      	sxtb	r3, r3
   126d8:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   126da:	68bb      	ldr	r3, [r7, #8]
   126dc:	3301      	adds	r3, #1
   126de:	60bb      	str	r3, [r7, #8]
   126e0:	e7e8      	b.n	126b4 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
   126e2:	7bfb      	ldrb	r3, [r7, #15]
}
   126e4:	4618      	mov	r0, r3
   126e6:	3714      	adds	r7, #20
   126e8:	46bd      	mov	sp, r7
   126ea:	bc80      	pop	{r7}
   126ec:	4770      	bx	lr

000126ee <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh>:
uint8_t ARINC_Conversions::GetIndexTXLabelarray(uint8_t l, uint8_t* arr){
   126ee:	b480      	push	{r7}
   126f0:	b085      	sub	sp, #20
   126f2:	af00      	add	r7, sp, #0
   126f4:	60f8      	str	r0, [r7, #12]
   126f6:	460b      	mov	r3, r1
   126f8:	607a      	str	r2, [r7, #4]
   126fa:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < 32; i++)
   126fc:	68fb      	ldr	r3, [r7, #12]
   126fe:	2200      	movs	r2, #0
   12700:	711a      	strb	r2, [r3, #4]
   12702:	68fb      	ldr	r3, [r7, #12]
   12704:	791b      	ldrb	r3, [r3, #4]
   12706:	2b1f      	cmp	r3, #31
   12708:	dc12      	bgt.n	12730 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x42>
	{
		if (arr[i]==l)
   1270a:	68fb      	ldr	r3, [r7, #12]
   1270c:	791b      	ldrb	r3, [r3, #4]
   1270e:	461a      	mov	r2, r3
   12710:	687b      	ldr	r3, [r7, #4]
   12712:	4413      	add	r3, r2
   12714:	781b      	ldrb	r3, [r3, #0]
   12716:	7afa      	ldrb	r2, [r7, #11]
   12718:	429a      	cmp	r2, r3
   1271a:	d102      	bne.n	12722 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x34>
		{
			return i;
   1271c:	68fb      	ldr	r3, [r7, #12]
   1271e:	791b      	ldrb	r3, [r3, #4]
   12720:	e007      	b.n	12732 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x44>
	for (i = 0; i < 32; i++)
   12722:	68fb      	ldr	r3, [r7, #12]
   12724:	791b      	ldrb	r3, [r3, #4]
   12726:	3301      	adds	r3, #1
   12728:	b2da      	uxtb	r2, r3
   1272a:	68fb      	ldr	r3, [r7, #12]
   1272c:	711a      	strb	r2, [r3, #4]
   1272e:	e7e8      	b.n	12702 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x14>
		}
		
	}
	return 32;
   12730:	2320      	movs	r3, #32
}
   12732:	4618      	mov	r0, r3
   12734:	3714      	adds	r7, #20
   12736:	46bd      	mov	sp, r7
   12738:	bc80      	pop	{r7}
   1273a:	4770      	bx	lr

0001273c <_ZN17ARINC_Conversions21PrepareSingleTXBufferEPhS0_>:

void ARINC_Conversions::PrepareSingleTXBuffer(uint8_t* buff, uint8_t* src){
   1273c:	b480      	push	{r7}
   1273e:	b085      	sub	sp, #20
   12740:	af00      	add	r7, sp, #0
   12742:	60f8      	str	r0, [r7, #12]
   12744:	60b9      	str	r1, [r7, #8]
   12746:	607a      	str	r2, [r7, #4]

	for (i = 0; i < 4; i++)
   12748:	68fb      	ldr	r3, [r7, #12]
   1274a:	2200      	movs	r2, #0
   1274c:	711a      	strb	r2, [r3, #4]
   1274e:	68fb      	ldr	r3, [r7, #12]
   12750:	791b      	ldrb	r3, [r3, #4]
   12752:	2b03      	cmp	r3, #3
   12754:	dc14      	bgt.n	12780 <_ZN17ARINC_Conversions21PrepareSingleTXBufferEPhS0_+0x44>
	{
		buff[3-i]=src[i];
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	791b      	ldrb	r3, [r3, #4]
   1275a:	f1c3 0303 	rsb	r3, r3, #3
   1275e:	461a      	mov	r2, r3
   12760:	68bb      	ldr	r3, [r7, #8]
   12762:	4413      	add	r3, r2
   12764:	68fa      	ldr	r2, [r7, #12]
   12766:	7912      	ldrb	r2, [r2, #4]
   12768:	4611      	mov	r1, r2
   1276a:	687a      	ldr	r2, [r7, #4]
   1276c:	440a      	add	r2, r1
   1276e:	7812      	ldrb	r2, [r2, #0]
   12770:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
   12772:	68fb      	ldr	r3, [r7, #12]
   12774:	791b      	ldrb	r3, [r3, #4]
   12776:	3301      	adds	r3, #1
   12778:	b2da      	uxtb	r2, r3
   1277a:	68fb      	ldr	r3, [r7, #12]
   1277c:	711a      	strb	r2, [r3, #4]
   1277e:	e7e6      	b.n	1274e <_ZN17ARINC_Conversions21PrepareSingleTXBufferEPhS0_+0x12>
	
		
	}


}
   12780:	bf00      	nop
   12782:	3714      	adds	r7, #20
   12784:	46bd      	mov	sp, r7
   12786:	bc80      	pop	{r7}
   12788:	4770      	bx	lr

0001278a <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh>:
uint32_t	ARINC_Conversions::FourBytesArray2Uint32(uint8_t* arr){
   1278a:	b480      	push	{r7}
   1278c:	b083      	sub	sp, #12
   1278e:	af00      	add	r7, sp, #0
   12790:	6078      	str	r0, [r7, #4]
   12792:	6039      	str	r1, [r7, #0]

		result=0;
   12794:	687b      	ldr	r3, [r7, #4]
   12796:	2200      	movs	r2, #0
   12798:	609a      	str	r2, [r3, #8]
		for (i = 0; i < 4; i++)
   1279a:	687b      	ldr	r3, [r7, #4]
   1279c:	2200      	movs	r2, #0
   1279e:	711a      	strb	r2, [r3, #4]
   127a0:	687b      	ldr	r3, [r7, #4]
   127a2:	791b      	ldrb	r3, [r3, #4]
   127a4:	2b03      	cmp	r3, #3
   127a6:	dc19      	bgt.n	127dc <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x52>
		{
			result|=((uint32_t)arr[i])<<(24-i*8);
   127a8:	687b      	ldr	r3, [r7, #4]
   127aa:	689a      	ldr	r2, [r3, #8]
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	791b      	ldrb	r3, [r3, #4]
   127b0:	4619      	mov	r1, r3
   127b2:	683b      	ldr	r3, [r7, #0]
   127b4:	440b      	add	r3, r1
   127b6:	781b      	ldrb	r3, [r3, #0]
   127b8:	4619      	mov	r1, r3
   127ba:	687b      	ldr	r3, [r7, #4]
   127bc:	791b      	ldrb	r3, [r3, #4]
   127be:	f1c3 0303 	rsb	r3, r3, #3
   127c2:	00db      	lsls	r3, r3, #3
   127c4:	fa01 f303 	lsl.w	r3, r1, r3
   127c8:	431a      	orrs	r2, r3
   127ca:	687b      	ldr	r3, [r7, #4]
   127cc:	609a      	str	r2, [r3, #8]
		for (i = 0; i < 4; i++)
   127ce:	687b      	ldr	r3, [r7, #4]
   127d0:	791b      	ldrb	r3, [r3, #4]
   127d2:	3301      	adds	r3, #1
   127d4:	b2da      	uxtb	r2, r3
   127d6:	687b      	ldr	r3, [r7, #4]
   127d8:	711a      	strb	r2, [r3, #4]
   127da:	e7e1      	b.n	127a0 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x16>

		}
		return result;
   127dc:	687b      	ldr	r3, [r7, #4]
   127de:	689b      	ldr	r3, [r3, #8]
}
   127e0:	4618      	mov	r0, r3
   127e2:	370c      	adds	r7, #12
   127e4:	46bd      	mov	sp, r7
   127e6:	bc80      	pop	{r7}
   127e8:	4770      	bx	lr

000127ea <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh>:
void	ARINC_Conversions::Uint32FourBytesArray(uint32_t data,uint8_t *dest){
   127ea:	b480      	push	{r7}
   127ec:	b087      	sub	sp, #28
   127ee:	af00      	add	r7, sp, #0
   127f0:	60f8      	str	r0, [r7, #12]
   127f2:	60b9      	str	r1, [r7, #8]
   127f4:	607a      	str	r2, [r7, #4]

	uint8_t d;
	for (i = 0; i < 4; i++)
   127f6:	68fb      	ldr	r3, [r7, #12]
   127f8:	2200      	movs	r2, #0
   127fa:	711a      	strb	r2, [r3, #4]
   127fc:	68fb      	ldr	r3, [r7, #12]
   127fe:	791b      	ldrb	r3, [r3, #4]
   12800:	2b03      	cmp	r3, #3
   12802:	dc16      	bgt.n	12832 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x48>
	{
		d=(uint8_t)((data>>(24-i*8))&(0xff));
   12804:	68fb      	ldr	r3, [r7, #12]
   12806:	791b      	ldrb	r3, [r3, #4]
   12808:	f1c3 0303 	rsb	r3, r3, #3
   1280c:	00db      	lsls	r3, r3, #3
   1280e:	68ba      	ldr	r2, [r7, #8]
   12810:	fa22 f303 	lsr.w	r3, r2, r3
   12814:	75fb      	strb	r3, [r7, #23]
		dest[i]=d;
   12816:	68fb      	ldr	r3, [r7, #12]
   12818:	791b      	ldrb	r3, [r3, #4]
   1281a:	461a      	mov	r2, r3
   1281c:	687b      	ldr	r3, [r7, #4]
   1281e:	4413      	add	r3, r2
   12820:	7dfa      	ldrb	r2, [r7, #23]
   12822:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
   12824:	68fb      	ldr	r3, [r7, #12]
   12826:	791b      	ldrb	r3, [r3, #4]
   12828:	3301      	adds	r3, #1
   1282a:	b2da      	uxtb	r2, r3
   1282c:	68fb      	ldr	r3, [r7, #12]
   1282e:	711a      	strb	r2, [r3, #4]
   12830:	e7e4      	b.n	127fc <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x12>

	}

}
   12832:	bf00      	nop
   12834:	371c      	adds	r7, #28
   12836:	46bd      	mov	sp, r7
   12838:	bc80      	pop	{r7}
   1283a:	4770      	bx	lr

0001283c <_ZN17ARINC_Conversions18FloatTwoComplementEfh>:
uint32_t	ARINC_Conversions::FloatTwoComplement(float f, uint8_t size){
   1283c:	b580      	push	{r7, lr}
   1283e:	b084      	sub	sp, #16
   12840:	af00      	add	r7, sp, #0
   12842:	60f8      	str	r0, [r7, #12]
   12844:	60b9      	str	r1, [r7, #8]
   12846:	4613      	mov	r3, r2
   12848:	71fb      	strb	r3, [r7, #7]
	
	if (f>=0)
   1284a:	4b17      	ldr	r3, [pc, #92]	; (128a8 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x6c>)
   1284c:	f04f 0100 	mov.w	r1, #0
   12850:	68b8      	ldr	r0, [r7, #8]
   12852:	4798      	blx	r3
   12854:	4603      	mov	r3, r0
   12856:	2b00      	cmp	r3, #0
   12858:	d006      	beq.n	12868 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x2c>
	{
		value=(uint32_t)f;
   1285a:	4b14      	ldr	r3, [pc, #80]	; (128ac <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   1285c:	68b8      	ldr	r0, [r7, #8]
   1285e:	4798      	blx	r3
   12860:	4602      	mov	r2, r0
   12862:	68fb      	ldr	r3, [r7, #12]
   12864:	60da      	str	r2, [r3, #12]
   12866:	e018      	b.n	1289a <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x5e>
	} 
	else
	{
		value=(uint32_t)(-1*f);
   12868:	68bb      	ldr	r3, [r7, #8]
   1286a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   1286e:	4b0f      	ldr	r3, [pc, #60]	; (128ac <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   12870:	4610      	mov	r0, r2
   12872:	4798      	blx	r3
   12874:	4602      	mov	r2, r0
   12876:	68fb      	ldr	r3, [r7, #12]
   12878:	60da      	str	r2, [r3, #12]
		value=(~value)&((1<<(size))-1);
   1287a:	68fb      	ldr	r3, [r7, #12]
   1287c:	68db      	ldr	r3, [r3, #12]
   1287e:	43db      	mvns	r3, r3
   12880:	79fa      	ldrb	r2, [r7, #7]
   12882:	4611      	mov	r1, r2
   12884:	2201      	movs	r2, #1
   12886:	408a      	lsls	r2, r1
   12888:	3a01      	subs	r2, #1
   1288a:	401a      	ands	r2, r3
   1288c:	68fb      	ldr	r3, [r7, #12]
   1288e:	60da      	str	r2, [r3, #12]
		value+=1;
   12890:	68fb      	ldr	r3, [r7, #12]
   12892:	68db      	ldr	r3, [r3, #12]
   12894:	1c5a      	adds	r2, r3, #1
   12896:	68fb      	ldr	r3, [r7, #12]
   12898:	60da      	str	r2, [r3, #12]
	}
	return value;
   1289a:	68fb      	ldr	r3, [r7, #12]
   1289c:	68db      	ldr	r3, [r3, #12]
}
   1289e:	4618      	mov	r0, r3
   128a0:	3710      	adds	r7, #16
   128a2:	46bd      	mov	sp, r7
   128a4:	bd80      	pop	{r7, pc}
   128a6:	bf00      	nop
   128a8:	0001a8f5 	.word	0x0001a8f5
   128ac:	0001a91d 	.word	0x0001a91d

000128b0 <_ZN17ARINC_Conversions10FindParityEm>:


// Function to find the parity
bool ARINC_Conversions::FindParity(uint32_t x)
{
   128b0:	b480      	push	{r7}
   128b2:	b085      	sub	sp, #20
   128b4:	af00      	add	r7, sp, #0
   128b6:	6078      	str	r0, [r7, #4]
   128b8:	6039      	str	r1, [r7, #0]
	uint32_t y = x ^ (x >> 1);
   128ba:	683b      	ldr	r3, [r7, #0]
   128bc:	085a      	lsrs	r2, r3, #1
   128be:	683b      	ldr	r3, [r7, #0]
   128c0:	4053      	eors	r3, r2
   128c2:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 2);
   128c4:	68fb      	ldr	r3, [r7, #12]
   128c6:	089b      	lsrs	r3, r3, #2
   128c8:	68fa      	ldr	r2, [r7, #12]
   128ca:	4053      	eors	r3, r2
   128cc:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 4);
   128ce:	68fb      	ldr	r3, [r7, #12]
   128d0:	091b      	lsrs	r3, r3, #4
   128d2:	68fa      	ldr	r2, [r7, #12]
   128d4:	4053      	eors	r3, r2
   128d6:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 8);
   128d8:	68fb      	ldr	r3, [r7, #12]
   128da:	0a1b      	lsrs	r3, r3, #8
   128dc:	68fa      	ldr	r2, [r7, #12]
   128de:	4053      	eors	r3, r2
   128e0:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 16);
   128e2:	68fb      	ldr	r3, [r7, #12]
   128e4:	0c1b      	lsrs	r3, r3, #16
   128e6:	68fa      	ldr	r2, [r7, #12]
   128e8:	4053      	eors	r3, r2
   128ea:	60fb      	str	r3, [r7, #12]

	// Rightmost bit of y holds the parity value
	// if (y&1) is 1 then parity is odd else even
	if (y & 1){
   128ec:	68fb      	ldr	r3, [r7, #12]
   128ee:	f003 0301 	and.w	r3, r3, #1
   128f2:	2b00      	cmp	r3, #0
   128f4:	d001      	beq.n	128fa <_ZN17ARINC_Conversions10FindParityEm+0x4a>
			return 1;
   128f6:	2301      	movs	r3, #1
   128f8:	e000      	b.n	128fc <_ZN17ARINC_Conversions10FindParityEm+0x4c>
	}

	return 0;
   128fa:	2300      	movs	r3, #0
}
   128fc:	4618      	mov	r0, r3
   128fe:	3714      	adds	r7, #20
   12900:	46bd      	mov	sp, r7
   12902:	bc80      	pop	{r7}
   12904:	4770      	bx	lr

00012906 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   12906:	b480      	push	{r7}
   12908:	b085      	sub	sp, #20
   1290a:	af00      	add	r7, sp, #0
   1290c:	60f8      	str	r0, [r7, #12]
   1290e:	460b      	mov	r3, r1
   12910:	607a      	str	r2, [r7, #4]
   12912:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12914:	7afb      	ldrb	r3, [r7, #11]
   12916:	68fa      	ldr	r2, [r7, #12]
   12918:	01db      	lsls	r3, r3, #7
   1291a:	4413      	add	r3, r2
   1291c:	3318      	adds	r3, #24
   1291e:	687a      	ldr	r2, [r7, #4]
   12920:	601a      	str	r2, [r3, #0]
}
   12922:	bf00      	nop
   12924:	3714      	adds	r7, #20
   12926:	46bd      	mov	sp, r7
   12928:	bc80      	pop	{r7}
   1292a:	4770      	bx	lr

0001292c <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   1292c:	b480      	push	{r7}
   1292e:	b085      	sub	sp, #20
   12930:	af00      	add	r7, sp, #0
   12932:	60f8      	str	r0, [r7, #12]
   12934:	460b      	mov	r3, r1
   12936:	607a      	str	r2, [r7, #4]
   12938:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1293a:	7afb      	ldrb	r3, [r7, #11]
   1293c:	68fa      	ldr	r2, [r7, #12]
   1293e:	01db      	lsls	r3, r3, #7
   12940:	4413      	add	r3, r2
   12942:	3314      	adds	r3, #20
   12944:	687a      	ldr	r2, [r7, #4]
   12946:	601a      	str	r2, [r3, #0]
}
   12948:	bf00      	nop
   1294a:	3714      	adds	r7, #20
   1294c:	46bd      	mov	sp, r7
   1294e:	bc80      	pop	{r7}
   12950:	4770      	bx	lr
	...

00012954 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   12954:	b580      	push	{r7, lr}
   12956:	b082      	sub	sp, #8
   12958:	af00      	add	r7, sp, #0
   1295a:	4603      	mov	r3, r0
   1295c:	6039      	str	r1, [r7, #0]
   1295e:	71fb      	strb	r3, [r7, #7]
   12960:	4613      	mov	r3, r2
   12962:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12964:	79bb      	ldrb	r3, [r7, #6]
   12966:	2b00      	cmp	r3, #0
   12968:	d006      	beq.n	12978 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1296a:	79fb      	ldrb	r3, [r7, #7]
   1296c:	683a      	ldr	r2, [r7, #0]
   1296e:	4619      	mov	r1, r3
   12970:	4806      	ldr	r0, [pc, #24]	; (1298c <_gpio_set_level+0x38>)
   12972:	4b07      	ldr	r3, [pc, #28]	; (12990 <_gpio_set_level+0x3c>)
   12974:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   12976:	e005      	b.n	12984 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   12978:	79fb      	ldrb	r3, [r7, #7]
   1297a:	683a      	ldr	r2, [r7, #0]
   1297c:	4619      	mov	r1, r3
   1297e:	4803      	ldr	r0, [pc, #12]	; (1298c <_gpio_set_level+0x38>)
   12980:	4b04      	ldr	r3, [pc, #16]	; (12994 <_gpio_set_level+0x40>)
   12982:	4798      	blx	r3
}
   12984:	bf00      	nop
   12986:	3708      	adds	r7, #8
   12988:	46bd      	mov	sp, r7
   1298a:	bd80      	pop	{r7, pc}
   1298c:	41008000 	.word	0x41008000
   12990:	00012907 	.word	0x00012907
   12994:	0001292d 	.word	0x0001292d

00012998 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   12998:	b580      	push	{r7, lr}
   1299a:	b082      	sub	sp, #8
   1299c:	af00      	add	r7, sp, #0
   1299e:	4603      	mov	r3, r0
   129a0:	460a      	mov	r2, r1
   129a2:	71fb      	strb	r3, [r7, #7]
   129a4:	4613      	mov	r3, r2
   129a6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   129a8:	79fb      	ldrb	r3, [r7, #7]
   129aa:	115b      	asrs	r3, r3, #5
   129ac:	b2d8      	uxtb	r0, r3
   129ae:	79fb      	ldrb	r3, [r7, #7]
   129b0:	f003 031f 	and.w	r3, r3, #31
   129b4:	2201      	movs	r2, #1
   129b6:	fa02 f303 	lsl.w	r3, r2, r3
   129ba:	79ba      	ldrb	r2, [r7, #6]
   129bc:	4619      	mov	r1, r3
   129be:	4b03      	ldr	r3, [pc, #12]	; (129cc <gpio_set_pin_level+0x34>)
   129c0:	4798      	blx	r3
}
   129c2:	bf00      	nop
   129c4:	3708      	adds	r7, #8
   129c6:	46bd      	mov	sp, r7
   129c8:	bd80      	pop	{r7, pc}
   129ca:	bf00      	nop
   129cc:	00012955 	.word	0x00012955

000129d0 <_ZL10blink_LED0PK10timer_task>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(const struct timer_task *const timer_task){
   129d0:	b480      	push	{r7}
   129d2:	b083      	sub	sp, #12
   129d4:	af00      	add	r7, sp, #0
   129d6:	6078      	str	r0, [r7, #4]
	//gpio_toggle_pin_level(LED0);
}
   129d8:	bf00      	nop
   129da:	370c      	adds	r7, #12
   129dc:	46bd      	mov	sp, r7
   129de:	bc80      	pop	{r7}
   129e0:	4770      	bx	lr
	...

000129e4 <_ZL9TxTimeoutPK10timer_task>:
static void TxTimeout(const struct timer_task *const timer_task){
   129e4:	b480      	push	{r7}
   129e6:	b083      	sub	sp, #12
   129e8:	af00      	add	r7, sp, #0
   129ea:	6078      	str	r0, [r7, #4]
	ptrARINCInterface->txTimeout=true;
   129ec:	4b04      	ldr	r3, [pc, #16]	; (12a00 <_ZL9TxTimeoutPK10timer_task+0x1c>)
   129ee:	681b      	ldr	r3, [r3, #0]
   129f0:	2201      	movs	r2, #1
   129f2:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
}
   129f6:	bf00      	nop
   129f8:	370c      	adds	r7, #12
   129fa:	46bd      	mov	sp, r7
   129fc:	bc80      	pop	{r7}
   129fe:	4770      	bx	lr
   12a00:	20008c1c 	.word	0x20008c1c

00012a04 <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
   12a04:	b480      	push	{r7}
   12a06:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
   12a08:	4b04      	ldr	r3, [pc, #16]	; (12a1c <_ZL12Receiver1Intv+0x18>)
   12a0a:	681b      	ldr	r3, [r3, #0]
   12a0c:	2201      	movs	r2, #1
   12a0e:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
}
   12a12:	bf00      	nop
   12a14:	46bd      	mov	sp, r7
   12a16:	bc80      	pop	{r7}
   12a18:	4770      	bx	lr
   12a1a:	bf00      	nop
   12a1c:	20008c1c 	.word	0x20008c1c

00012a20 <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
   12a20:	b580      	push	{r7, lr}
   12a22:	b082      	sub	sp, #8
   12a24:	af00      	add	r7, sp, #0
   12a26:	6078      	str	r0, [r7, #4]
   12a28:	6039      	str	r1, [r7, #0]
   12a2a:	687a      	ldr	r2, [r7, #4]
   12a2c:	683b      	ldr	r3, [r7, #0]
   12a2e:	3304      	adds	r3, #4
   12a30:	4619      	mov	r1, r3
   12a32:	4610      	mov	r0, r2
   12a34:	4b13      	ldr	r3, [pc, #76]	; (12a84 <_ZN15ARINC_InterfaceC2Ev+0x64>)
   12a36:	4798      	blx	r3
   12a38:	683b      	ldr	r3, [r7, #0]
   12a3a:	681a      	ldr	r2, [r3, #0]
   12a3c:	687b      	ldr	r3, [r7, #4]
   12a3e:	601a      	str	r2, [r3, #0]
   12a40:	687b      	ldr	r3, [r7, #4]
   12a42:	681b      	ldr	r3, [r3, #0]
   12a44:	3b0c      	subs	r3, #12
   12a46:	681b      	ldr	r3, [r3, #0]
   12a48:	461a      	mov	r2, r3
   12a4a:	687b      	ldr	r3, [r7, #4]
   12a4c:	4413      	add	r3, r2
   12a4e:	683a      	ldr	r2, [r7, #0]
   12a50:	6912      	ldr	r2, [r2, #16]
   12a52:	601a      	str	r2, [r3, #0]
   12a54:	687b      	ldr	r3, [r7, #4]
   12a56:	681b      	ldr	r3, [r3, #0]
   12a58:	3b10      	subs	r3, #16
   12a5a:	681b      	ldr	r3, [r3, #0]
   12a5c:	461a      	mov	r2, r3
   12a5e:	687b      	ldr	r3, [r7, #4]
   12a60:	4413      	add	r3, r2
   12a62:	683a      	ldr	r2, [r7, #0]
   12a64:	6952      	ldr	r2, [r2, #20]
   12a66:	601a      	str	r2, [r3, #0]
   12a68:	687b      	ldr	r3, [r7, #4]
   12a6a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   12a6e:	4618      	mov	r0, r3
   12a70:	4b05      	ldr	r3, [pc, #20]	; (12a88 <_ZN15ARINC_InterfaceC2Ev+0x68>)
   12a72:	4798      	blx	r3
{
	ptrARINCInterface=this;
   12a74:	4a05      	ldr	r2, [pc, #20]	; (12a8c <_ZN15ARINC_InterfaceC2Ev+0x6c>)
   12a76:	687b      	ldr	r3, [r7, #4]
   12a78:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
   12a7a:	687b      	ldr	r3, [r7, #4]
   12a7c:	4618      	mov	r0, r3
   12a7e:	3708      	adds	r7, #8
   12a80:	46bd      	mov	sp, r7
   12a82:	bd80      	pop	{r7, pc}
   12a84:	00012345 	.word	0x00012345
   12a88:	00013395 	.word	0x00013395
   12a8c:	20008c1c 	.word	0x20008c1c

00012a90 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   12a90:	b580      	push	{r7, lr}
   12a92:	b082      	sub	sp, #8
   12a94:	af00      	add	r7, sp, #0
   12a96:	6078      	str	r0, [r7, #4]
   12a98:	687b      	ldr	r3, [r7, #4]
   12a9a:	f503 7341 	add.w	r3, r3, #772	; 0x304
   12a9e:	4618      	mov	r0, r3
   12aa0:	4b15      	ldr	r3, [pc, #84]	; (12af8 <_ZN15ARINC_InterfaceC1Ev+0x68>)
   12aa2:	4798      	blx	r3
   12aa4:	687b      	ldr	r3, [r7, #4]
   12aa6:	f503 7345 	add.w	r3, r3, #788	; 0x314
   12aaa:	4a14      	ldr	r2, [pc, #80]	; (12afc <_ZN15ARINC_InterfaceC1Ev+0x6c>)
   12aac:	4611      	mov	r1, r2
   12aae:	4618      	mov	r0, r3
   12ab0:	4b13      	ldr	r3, [pc, #76]	; (12b00 <_ZN15ARINC_InterfaceC1Ev+0x70>)
   12ab2:	4798      	blx	r3
   12ab4:	687b      	ldr	r3, [r7, #4]
   12ab6:	4a13      	ldr	r2, [pc, #76]	; (12b04 <_ZN15ARINC_InterfaceC1Ev+0x74>)
   12ab8:	4611      	mov	r1, r2
   12aba:	4618      	mov	r0, r3
   12abc:	4b12      	ldr	r3, [pc, #72]	; (12b08 <_ZN15ARINC_InterfaceC1Ev+0x78>)
   12abe:	4798      	blx	r3
   12ac0:	4a12      	ldr	r2, [pc, #72]	; (12b0c <_ZN15ARINC_InterfaceC1Ev+0x7c>)
   12ac2:	687b      	ldr	r3, [r7, #4]
   12ac4:	601a      	str	r2, [r3, #0]
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	f503 7341 	add.w	r3, r3, #772	; 0x304
   12acc:	4a10      	ldr	r2, [pc, #64]	; (12b10 <_ZN15ARINC_InterfaceC1Ev+0x80>)
   12ace:	601a      	str	r2, [r3, #0]
   12ad0:	687b      	ldr	r3, [r7, #4]
   12ad2:	f503 7345 	add.w	r3, r3, #788	; 0x314
   12ad6:	4a0f      	ldr	r2, [pc, #60]	; (12b14 <_ZN15ARINC_InterfaceC1Ev+0x84>)
   12ad8:	601a      	str	r2, [r3, #0]
   12ada:	687b      	ldr	r3, [r7, #4]
   12adc:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   12ae0:	4618      	mov	r0, r3
   12ae2:	4b0d      	ldr	r3, [pc, #52]	; (12b18 <_ZN15ARINC_InterfaceC1Ev+0x88>)
   12ae4:	4798      	blx	r3
	ptrARINCInterface=this;
   12ae6:	4a0d      	ldr	r2, [pc, #52]	; (12b1c <_ZN15ARINC_InterfaceC1Ev+0x8c>)
   12ae8:	687b      	ldr	r3, [r7, #4]
   12aea:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	4618      	mov	r0, r3
   12af0:	3708      	adds	r7, #8
   12af2:	46bd      	mov	sp, r7
   12af4:	bd80      	pop	{r7, pc}
   12af6:	bf00      	nop
   12af8:	000124f5 	.word	0x000124f5
   12afc:	00020378 	.word	0x00020378
   12b00:	00000b69 	.word	0x00000b69
   12b04:	00020364 	.word	0x00020364
   12b08:	00012345 	.word	0x00012345
   12b0c:	0002031c 	.word	0x0002031c
   12b10:	00020338 	.word	0x00020338
   12b14:	00020354 	.word	0x00020354
   12b18:	00013395 	.word	0x00013395
   12b1c:	20008c1c 	.word	0x20008c1c

00012b20 <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
   12b20:	b580      	push	{r7, lr}
   12b22:	b082      	sub	sp, #8
   12b24:	af00      	add	r7, sp, #0
   12b26:	6078      	str	r0, [r7, #4]
   12b28:	6039      	str	r1, [r7, #0]
   12b2a:	683b      	ldr	r3, [r7, #0]
   12b2c:	681a      	ldr	r2, [r3, #0]
   12b2e:	687b      	ldr	r3, [r7, #4]
   12b30:	601a      	str	r2, [r3, #0]
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	681b      	ldr	r3, [r3, #0]
   12b36:	3b0c      	subs	r3, #12
   12b38:	681b      	ldr	r3, [r3, #0]
   12b3a:	461a      	mov	r2, r3
   12b3c:	687b      	ldr	r3, [r7, #4]
   12b3e:	4413      	add	r3, r2
   12b40:	683a      	ldr	r2, [r7, #0]
   12b42:	6912      	ldr	r2, [r2, #16]
   12b44:	601a      	str	r2, [r3, #0]
   12b46:	687b      	ldr	r3, [r7, #4]
   12b48:	681b      	ldr	r3, [r3, #0]
   12b4a:	3b10      	subs	r3, #16
   12b4c:	681b      	ldr	r3, [r3, #0]
   12b4e:	461a      	mov	r2, r3
   12b50:	687b      	ldr	r3, [r7, #4]
   12b52:	4413      	add	r3, r2
   12b54:	683a      	ldr	r2, [r7, #0]
   12b56:	6952      	ldr	r2, [r2, #20]
   12b58:	601a      	str	r2, [r3, #0]
   12b5a:	687b      	ldr	r3, [r7, #4]
   12b5c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   12b60:	4618      	mov	r0, r3
   12b62:	4b07      	ldr	r3, [pc, #28]	; (12b80 <_ZN15ARINC_InterfaceD2Ev+0x60>)
   12b64:	4798      	blx	r3
   12b66:	687a      	ldr	r2, [r7, #4]
   12b68:	683b      	ldr	r3, [r7, #0]
   12b6a:	3304      	adds	r3, #4
   12b6c:	4619      	mov	r1, r3
   12b6e:	4610      	mov	r0, r2
   12b70:	4b04      	ldr	r3, [pc, #16]	; (12b84 <_ZN15ARINC_InterfaceD2Ev+0x64>)
   12b72:	4798      	blx	r3
{
} //~ARINC_Interface
   12b74:	687b      	ldr	r3, [r7, #4]
   12b76:	4618      	mov	r0, r3
   12b78:	3708      	adds	r7, #8
   12b7a:	46bd      	mov	sp, r7
   12b7c:	bd80      	pop	{r7, pc}
   12b7e:	bf00      	nop
   12b80:	000133b5 	.word	0x000133b5
   12b84:	0001238b 	.word	0x0001238b

00012b88 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
   12b88:	b580      	push	{r7, lr}
   12b8a:	b082      	sub	sp, #8
   12b8c:	af00      	add	r7, sp, #0
   12b8e:	6078      	str	r0, [r7, #4]
   12b90:	4a15      	ldr	r2, [pc, #84]	; (12be8 <_ZN15ARINC_InterfaceD1Ev+0x60>)
   12b92:	687b      	ldr	r3, [r7, #4]
   12b94:	601a      	str	r2, [r3, #0]
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	f503 7341 	add.w	r3, r3, #772	; 0x304
   12b9c:	4a13      	ldr	r2, [pc, #76]	; (12bec <_ZN15ARINC_InterfaceD1Ev+0x64>)
   12b9e:	601a      	str	r2, [r3, #0]
   12ba0:	687b      	ldr	r3, [r7, #4]
   12ba2:	f503 7345 	add.w	r3, r3, #788	; 0x314
   12ba6:	4a12      	ldr	r2, [pc, #72]	; (12bf0 <_ZN15ARINC_InterfaceD1Ev+0x68>)
   12ba8:	601a      	str	r2, [r3, #0]
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   12bb0:	4618      	mov	r0, r3
   12bb2:	4b10      	ldr	r3, [pc, #64]	; (12bf4 <_ZN15ARINC_InterfaceD1Ev+0x6c>)
   12bb4:	4798      	blx	r3
   12bb6:	687b      	ldr	r3, [r7, #4]
   12bb8:	4a0f      	ldr	r2, [pc, #60]	; (12bf8 <_ZN15ARINC_InterfaceD1Ev+0x70>)
   12bba:	4611      	mov	r1, r2
   12bbc:	4618      	mov	r0, r3
   12bbe:	4b0f      	ldr	r3, [pc, #60]	; (12bfc <_ZN15ARINC_InterfaceD1Ev+0x74>)
   12bc0:	4798      	blx	r3
   12bc2:	687b      	ldr	r3, [r7, #4]
   12bc4:	f503 7345 	add.w	r3, r3, #788	; 0x314
   12bc8:	4a0d      	ldr	r2, [pc, #52]	; (12c00 <_ZN15ARINC_InterfaceD1Ev+0x78>)
   12bca:	4611      	mov	r1, r2
   12bcc:	4618      	mov	r0, r3
   12bce:	4b0d      	ldr	r3, [pc, #52]	; (12c04 <_ZN15ARINC_InterfaceD1Ev+0x7c>)
   12bd0:	4798      	blx	r3
   12bd2:	687b      	ldr	r3, [r7, #4]
   12bd4:	f503 7341 	add.w	r3, r3, #772	; 0x304
   12bd8:	4618      	mov	r0, r3
   12bda:	4b0b      	ldr	r3, [pc, #44]	; (12c08 <_ZN15ARINC_InterfaceD1Ev+0x80>)
   12bdc:	4798      	blx	r3
} //~ARINC_Interface
   12bde:	687b      	ldr	r3, [r7, #4]
   12be0:	4618      	mov	r0, r3
   12be2:	3708      	adds	r7, #8
   12be4:	46bd      	mov	sp, r7
   12be6:	bd80      	pop	{r7, pc}
   12be8:	0002031c 	.word	0x0002031c
   12bec:	00020338 	.word	0x00020338
   12bf0:	00020354 	.word	0x00020354
   12bf4:	000133b5 	.word	0x000133b5
   12bf8:	00020364 	.word	0x00020364
   12bfc:	0001238b 	.word	0x0001238b
   12c00:	00020378 	.word	0x00020378
   12c04:	00013a95 	.word	0x00013a95
   12c08:	00012515 	.word	0x00012515

00012c0c <_ZTv0_n16_N15ARINC_InterfaceD1Ev>:
   12c0c:	b580      	push	{r7, lr}
   12c0e:	b082      	sub	sp, #8
   12c10:	af00      	add	r7, sp, #0
   12c12:	6078      	str	r0, [r7, #4]
   12c14:	687b      	ldr	r3, [r7, #4]
   12c16:	681b      	ldr	r3, [r3, #0]
   12c18:	3b10      	subs	r3, #16
   12c1a:	681b      	ldr	r3, [r3, #0]
   12c1c:	461a      	mov	r2, r3
   12c1e:	687b      	ldr	r3, [r7, #4]
   12c20:	4413      	add	r3, r2
   12c22:	4618      	mov	r0, r3
   12c24:	4b03      	ldr	r3, [pc, #12]	; (12c34 <_ZTv0_n16_N15ARINC_InterfaceD1Ev+0x28>)
   12c26:	4798      	blx	r3
   12c28:	4603      	mov	r3, r0
   12c2a:	4618      	mov	r0, r3
   12c2c:	3708      	adds	r7, #8
   12c2e:	46bd      	mov	sp, r7
   12c30:	bd80      	pop	{r7, pc}
   12c32:	bf00      	nop
   12c34:	00012b89 	.word	0x00012b89

00012c38 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   12c38:	b580      	push	{r7, lr}
   12c3a:	b082      	sub	sp, #8
   12c3c:	af00      	add	r7, sp, #0
   12c3e:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
   12c40:	6878      	ldr	r0, [r7, #4]
   12c42:	4b06      	ldr	r3, [pc, #24]	; (12c5c <_ZN15ARINC_InterfaceD0Ev+0x24>)
   12c44:	4798      	blx	r3
   12c46:	f44f 714a 	mov.w	r1, #808	; 0x328
   12c4a:	6878      	ldr	r0, [r7, #4]
   12c4c:	4b04      	ldr	r3, [pc, #16]	; (12c60 <_ZN15ARINC_InterfaceD0Ev+0x28>)
   12c4e:	4798      	blx	r3
   12c50:	687b      	ldr	r3, [r7, #4]
   12c52:	4618      	mov	r0, r3
   12c54:	3708      	adds	r7, #8
   12c56:	46bd      	mov	sp, r7
   12c58:	bd80      	pop	{r7, pc}
   12c5a:	bf00      	nop
   12c5c:	00012b89 	.word	0x00012b89
   12c60:	000187fd 	.word	0x000187fd

00012c64 <_ZTv0_n16_N15ARINC_InterfaceD0Ev>:
   12c64:	b580      	push	{r7, lr}
   12c66:	b082      	sub	sp, #8
   12c68:	af00      	add	r7, sp, #0
   12c6a:	6078      	str	r0, [r7, #4]
   12c6c:	687b      	ldr	r3, [r7, #4]
   12c6e:	681b      	ldr	r3, [r3, #0]
   12c70:	3b10      	subs	r3, #16
   12c72:	681b      	ldr	r3, [r3, #0]
   12c74:	461a      	mov	r2, r3
   12c76:	687b      	ldr	r3, [r7, #4]
   12c78:	4413      	add	r3, r2
   12c7a:	4618      	mov	r0, r3
   12c7c:	4b03      	ldr	r3, [pc, #12]	; (12c8c <_ZTv0_n16_N15ARINC_InterfaceD0Ev+0x28>)
   12c7e:	4798      	blx	r3
   12c80:	4603      	mov	r3, r0
   12c82:	4618      	mov	r0, r3
   12c84:	3708      	adds	r7, #8
   12c86:	46bd      	mov	sp, r7
   12c88:	bd80      	pop	{r7, pc}
   12c8a:	bf00      	nop
   12c8c:	00012c39 	.word	0x00012c39

00012c90 <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
   12c90:	b580      	push	{r7, lr}
   12c92:	b082      	sub	sp, #8
   12c94:	af00      	add	r7, sp, #0
   12c96:	6078      	str	r0, [r7, #4]
	MessageCount=0; MessageCount1=0; MessageCount2=0;
   12c98:	687b      	ldr	r3, [r7, #4]
   12c9a:	2200      	movs	r2, #0
   12c9c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
   12ca0:	687b      	ldr	r3, [r7, #4]
   12ca2:	2200      	movs	r2, #0
   12ca4:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
   12ca8:	687b      	ldr	r3, [r7, #4]
   12caa:	2200      	movs	r2, #0
   12cac:	f883 21c5 	strb.w	r2, [r3, #453]	; 0x1c5
	BITRATE0=false;
   12cb0:	687b      	ldr	r3, [r7, #4]
   12cb2:	2200      	movs	r2, #0
   12cb4:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
	BITRATE1=false;
   12cb8:	687b      	ldr	r3, [r7, #4]
   12cba:	2200      	movs	r2, #0
   12cbc:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
	BITRATE2=false;
   12cc0:	687b      	ldr	r3, [r7, #4]
   12cc2:	2200      	movs	r2, #0
   12cc4:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6

	PARITY=false;
   12cc8:	687b      	ldr	r3, [r7, #4]
   12cca:	2200      	movs	r2, #0
   12ccc:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
	HW_RESET();
   12cd0:	6878      	ldr	r0, [r7, #4]
   12cd2:	4b3b      	ldr	r3, [pc, #236]	; (12dc0 <_ZN15ARINC_Interface4InitEv+0x130>)
   12cd4:	4798      	blx	r3
	statusHolt=HI3593.Init();
   12cd6:	687b      	ldr	r3, [r7, #4]
   12cd8:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   12cdc:	4618      	mov	r0, r3
   12cde:	4b39      	ldr	r3, [pc, #228]	; (12dc4 <_ZN15ARINC_Interface4InitEv+0x134>)
   12ce0:	4798      	blx	r3
   12ce2:	4603      	mov	r3, r0
   12ce4:	461a      	mov	r2, r3
   12ce6:	687b      	ldr	r3, [r7, #4]
   12ce8:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
	if (statusHolt!=TSR_Default){
   12cec:	687b      	ldr	r3, [r7, #4]
   12cee:	f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d008      	beq.n	12d08 <_ZN15ARINC_Interface4InitEv+0x78>
		usb.println("\n\rHI-3593 failed to Initilize\n\r");
   12cf6:	4934      	ldr	r1, [pc, #208]	; (12dc8 <_ZN15ARINC_Interface4InitEv+0x138>)
   12cf8:	4834      	ldr	r0, [pc, #208]	; (12dcc <_ZN15ARINC_Interface4InitEv+0x13c>)
   12cfa:	4b35      	ldr	r3, [pc, #212]	; (12dd0 <_ZN15ARINC_Interface4InitEv+0x140>)
   12cfc:	4798      	blx	r3
		isOK=false;
   12cfe:	687b      	ldr	r3, [r7, #4]
   12d00:	2200      	movs	r2, #0
   12d02:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
   12d06:	e03d      	b.n	12d84 <_ZN15ARINC_Interface4InitEv+0xf4>
	}else{
		isOK=true;
   12d08:	687b      	ldr	r3, [r7, #4]
   12d0a:	2201      	movs	r2, #1
   12d0c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		newMessageR1=false;
   12d10:	687b      	ldr	r3, [r7, #4]
   12d12:	2200      	movs	r2, #0
   12d14:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		newMessageR2=false;
   12d18:	687b      	ldr	r3, [r7, #4]
   12d1a:	2200      	movs	r2, #0
   12d1c:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
		BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   12d20:	687b      	ldr	r3, [r7, #4]
   12d22:	2200      	movs	r2, #0
   12d24:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		MessageCount=0;
   12d28:	687b      	ldr	r3, [r7, #4]
   12d2a:	2200      	movs	r2, #0
   12d2c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
		octalLabel = 0x1D;         // Write ARINC Label
   12d30:	687b      	ldr	r3, [r7, #4]
   12d32:	221d      	movs	r2, #29
   12d34:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
		Arate=0;
   12d38:	687b      	ldr	r3, [r7, #4]
   12d3a:	2200      	movs	r2, #0
   12d3c:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
		
		(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   12d40:	687b      	ldr	r3, [r7, #4]
   12d42:	f203 1373 	addw	r3, r3, #371	; 0x173
   12d46:	2210      	movs	r2, #16
   12d48:	2100      	movs	r1, #0
   12d4a:	4618      	mov	r0, r3
   12d4c:	4b21      	ldr	r3, [pc, #132]	; (12dd4 <_ZN15ARINC_Interface4InitEv+0x144>)
   12d4e:	4798      	blx	r3
			
		// Setup the Labels
		HI3593.InitReceiver1Labels();     // initial Rec1 labels
   12d50:	687b      	ldr	r3, [r7, #4]
   12d52:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   12d56:	4618      	mov	r0, r3
   12d58:	4b1f      	ldr	r3, [pc, #124]	; (12dd8 <_ZN15ARINC_Interface4InitEv+0x148>)
   12d5a:	4798      	blx	r3
		HI3593.initReceiver2Labels();     // initial Rec2 labels
   12d5c:	687b      	ldr	r3, [r7, #4]
   12d5e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   12d62:	4618      	mov	r0, r3
   12d64:	4b1d      	ldr	r3, [pc, #116]	; (12ddc <_ZN15ARINC_Interface4InitEv+0x14c>)
   12d66:	4798      	blx	r3
		HI3593.InitPriorityLabels();
   12d68:	687b      	ldr	r3, [r7, #4]
   12d6a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   12d6e:	4618      	mov	r0, r3
   12d70:	4b1b      	ldr	r3, [pc, #108]	; (12de0 <_ZN15ARINC_Interface4InitEv+0x150>)
   12d72:	4798      	blx	r3
		//HI3593.MultiByteRead(REC1MEMORY, 32, LabelsArrayRX1); // read in all Rec-1 labels into the passed array
		//HI3593.MultiByteRead(REC2MEMORY, 32, LabelsArrayRX2); // read in all Rec-2 labels into the passed array

		Rec1Parity =0;
   12d74:	687b      	ldr	r3, [r7, #4]
   12d76:	2200      	movs	r2, #0
   12d78:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
		Rec2Parity =0;
   12d7c:	687b      	ldr	r3, [r7, #4]
   12d7e:	2200      	movs	r2, #0
   12d80:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3

		//HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
		//HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
	}
	
	arincTimer.Init();
   12d84:	4817      	ldr	r0, [pc, #92]	; (12de4 <_ZN15ARINC_Interface4InitEv+0x154>)
   12d86:	4b18      	ldr	r3, [pc, #96]	; (12de8 <_ZN15ARINC_Interface4InitEv+0x158>)
   12d88:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(blink_LED0),1000);
   12d8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12d8e:	4917      	ldr	r1, [pc, #92]	; (12dec <_ZN15ARINC_Interface4InitEv+0x15c>)
   12d90:	4814      	ldr	r0, [pc, #80]	; (12de4 <_ZN15ARINC_Interface4InitEv+0x154>)
   12d92:	4b17      	ldr	r3, [pc, #92]	; (12df0 <_ZN15ARINC_Interface4InitEv+0x160>)
   12d94:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(TxTimeout),500);
   12d96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   12d9a:	4916      	ldr	r1, [pc, #88]	; (12df4 <_ZN15ARINC_Interface4InitEv+0x164>)
   12d9c:	4811      	ldr	r0, [pc, #68]	; (12de4 <_ZN15ARINC_Interface4InitEv+0x154>)
   12d9e:	4b14      	ldr	r3, [pc, #80]	; (12df0 <_ZN15ARINC_Interface4InitEv+0x160>)
   12da0:	4798      	blx	r3
	ext_irq_register(ARINCR1Int, Receiver1Int);
   12da2:	4915      	ldr	r1, [pc, #84]	; (12df8 <_ZN15ARINC_Interface4InitEv+0x168>)
   12da4:	2057      	movs	r0, #87	; 0x57
   12da6:	4b15      	ldr	r3, [pc, #84]	; (12dfc <_ZN15ARINC_Interface4InitEv+0x16c>)
   12da8:	4798      	blx	r3
	arincTimer.start();
   12daa:	480e      	ldr	r0, [pc, #56]	; (12de4 <_ZN15ARINC_Interface4InitEv+0x154>)
   12dac:	4b14      	ldr	r3, [pc, #80]	; (12e00 <_ZN15ARINC_Interface4InitEv+0x170>)
   12dae:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
   12db0:	687b      	ldr	r3, [r7, #4]
   12db2:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
}
   12db6:	4618      	mov	r0, r3
   12db8:	3708      	adds	r7, #8
   12dba:	46bd      	mov	sp, r7
   12dbc:	bd80      	pop	{r7, pc}
   12dbe:	bf00      	nop
   12dc0:	00013255 	.word	0x00013255
   12dc4:	000133d5 	.word	0x000133d5
   12dc8:	0001f900 	.word	0x0001f900
   12dcc:	20009e88 	.word	0x20009e88
   12dd0:	00017411 	.word	0x00017411
   12dd4:	0001b089 	.word	0x0001b089
   12dd8:	000135e9 	.word	0x000135e9
   12ddc:	00013769 	.word	0x00013769
   12de0:	00013655 	.word	0x00013655
   12de4:	20009e64 	.word	0x20009e64
   12de8:	00016915 	.word	0x00016915
   12dec:	000129d1 	.word	0x000129d1
   12df0:	00016a69 	.word	0x00016a69
   12df4:	000129e5 	.word	0x000129e5
   12df8:	00012a05 	.word	0x00012a05
   12dfc:	000060b5 	.word	0x000060b5
   12e00:	000169c1 	.word	0x000169c1

00012e04 <_ZN15ARINC_Interface12ReadRXBufferEh>:
	else
	{
		return false;
	}
}
uint32_t ARINC_Interface::ReadRXBuffer(uint8_t n){
   12e04:	b580      	push	{r7, lr}
   12e06:	b082      	sub	sp, #8
   12e08:	af00      	add	r7, sp, #0
   12e0a:	6078      	str	r0, [r7, #4]
   12e0c:	460b      	mov	r3, r1
   12e0e:	70fb      	strb	r3, [r7, #3]
	
	usb.println("r\n---!got message!----");
   12e10:	4935      	ldr	r1, [pc, #212]	; (12ee8 <_ZN15ARINC_Interface12ReadRXBufferEh+0xe4>)
   12e12:	4836      	ldr	r0, [pc, #216]	; (12eec <_ZN15ARINC_Interface12ReadRXBufferEh+0xe8>)
   12e14:	4b36      	ldr	r3, [pc, #216]	; (12ef0 <_ZN15ARINC_Interface12ReadRXBufferEh+0xec>)
   12e16:	4798      	blx	r3
	cpu_irq_disable();
   12e18:	6878      	ldr	r0, [r7, #4]
   12e1a:	4b36      	ldr	r3, [pc, #216]	; (12ef4 <_ZN15ARINC_Interface12ReadRXBufferEh+0xf0>)
   12e1c:	4798      	blx	r3
	                     // Poll Receiver1 status register
	
	for (i = 0; i <2*RX_LABELS_NUMBER ; i++)
   12e1e:	687b      	ldr	r3, [r7, #4]
   12e20:	2200      	movs	r2, #0
   12e22:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
   12e26:	687b      	ldr	r3, [r7, #4]
   12e28:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
   12e2c:	2b3f      	cmp	r3, #63	; 0x3f
   12e2e:	dc41      	bgt.n	12eb4 <_ZN15ARINC_Interface12ReadRXBufferEh+0xb0>
	{
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   12e30:	687b      	ldr	r3, [r7, #4]
   12e32:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
   12e36:	78fb      	ldrb	r3, [r7, #3]
   12e38:	3b01      	subs	r3, #1
   12e3a:	b2db      	uxtb	r3, r3
   12e3c:	015b      	lsls	r3, r3, #5
   12e3e:	b2db      	uxtb	r3, r3
   12e40:	3b70      	subs	r3, #112	; 0x70
   12e42:	b2db      	uxtb	r3, r3
   12e44:	4619      	mov	r1, r3
   12e46:	4610      	mov	r0, r2
   12e48:	4b2b      	ldr	r3, [pc, #172]	; (12ef8 <_ZN15ARINC_Interface12ReadRXBufferEh+0xf4>)
   12e4a:	4798      	blx	r3
   12e4c:	4603      	mov	r3, r0
   12e4e:	461a      	mov	r2, r3
   12e50:	687b      	ldr	r3, [r7, #4]
   12e52:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
		if(((statusRegister & FFEMPTY) == 0))
   12e56:	687b      	ldr	r3, [r7, #4]
   12e58:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
   12e5c:	f003 0301 	and.w	r3, r3, #1
   12e60:	2b00      	cmp	r3, #0
   12e62:	d126      	bne.n	12eb2 <_ZN15ARINC_Interface12ReadRXBufferEh+0xae>
		{
				
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   12e64:	687b      	ldr	r3, [r7, #4]
   12e66:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   12e6a:	78fb      	ldrb	r3, [r7, #3]
   12e6c:	3304      	adds	r3, #4
   12e6e:	b2db      	uxtb	r3, r3
   12e70:	015b      	lsls	r3, r3, #5
   12e72:	b2d9      	uxtb	r1, r3
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
   12e7a:	461a      	mov	r2, r3
   12e7c:	4b1f      	ldr	r3, [pc, #124]	; (12efc <_ZN15ARINC_Interface12ReadRXBufferEh+0xf8>)
   12e7e:	4798      	blx	r3
				
			memcpy(receiverBuffer[MessageCount],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
   12e80:	687b      	ldr	r3, [r7, #4]
   12e82:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
   12e86:	3318      	adds	r3, #24
   12e88:	009b      	lsls	r3, r3, #2
   12e8a:	687a      	ldr	r2, [r7, #4]
   12e8c:	4413      	add	r3, r2
   12e8e:	3304      	adds	r3, #4
   12e90:	687a      	ldr	r2, [r7, #4]
   12e92:	f502 72d6 	add.w	r2, r2, #428	; 0x1ac
   12e96:	6812      	ldr	r2, [r2, #0]
   12e98:	601a      	str	r2, [r3, #0]
				
			//		printARINCData(REC1_HEADER,RXBuffer);
			CheckMessageCountMax();
   12e9a:	6878      	ldr	r0, [r7, #4]
   12e9c:	4b18      	ldr	r3, [pc, #96]	; (12f00 <_ZN15ARINC_Interface12ReadRXBufferEh+0xfc>)
   12e9e:	4798      	blx	r3
	for (i = 0; i <2*RX_LABELS_NUMBER ; i++)
   12ea0:	687b      	ldr	r3, [r7, #4]
   12ea2:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
   12ea6:	3301      	adds	r3, #1
   12ea8:	b2da      	uxtb	r2, r3
   12eaa:	687b      	ldr	r3, [r7, #4]
   12eac:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
   12eb0:	e7b9      	b.n	12e26 <_ZN15ARINC_Interface12ReadRXBufferEh+0x22>
				
		}else{
			break;
   12eb2:	bf00      	nop
		}
	}

	cpu_irq_enable();
   12eb4:	6878      	ldr	r0, [r7, #4]
   12eb6:	4b13      	ldr	r3, [pc, #76]	; (12f04 <_ZN15ARINC_Interface12ReadRXBufferEh+0x100>)
   12eb8:	4798      	blx	r3

		if ((n==1))
   12eba:	78fb      	ldrb	r3, [r7, #3]
   12ebc:	2b01      	cmp	r3, #1
   12ebe:	d104      	bne.n	12eca <_ZN15ARINC_Interface12ReadRXBufferEh+0xc6>
		{
			newMessageR1=false;
   12ec0:	687b      	ldr	r3, [r7, #4]
   12ec2:	2200      	movs	r2, #0
   12ec4:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   12ec8:	e006      	b.n	12ed8 <_ZN15ARINC_Interface12ReadRXBufferEh+0xd4>
		}
		else if (n==2)
   12eca:	78fb      	ldrb	r3, [r7, #3]
   12ecc:	2b02      	cmp	r3, #2
   12ece:	d103      	bne.n	12ed8 <_ZN15ARINC_Interface12ReadRXBufferEh+0xd4>
		{
			newMessageR2=false;
   12ed0:	687b      	ldr	r3, [r7, #4]
   12ed2:	2200      	movs	r2, #0
   12ed4:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
		}

	
	return statusRegister;	
   12ed8:	687b      	ldr	r3, [r7, #4]
   12eda:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
}
   12ede:	4618      	mov	r0, r3
   12ee0:	3708      	adds	r7, #8
   12ee2:	46bd      	mov	sp, r7
   12ee4:	bd80      	pop	{r7, pc}
   12ee6:	bf00      	nop
   12ee8:	0001f944 	.word	0x0001f944
   12eec:	20009e88 	.word	0x20009e88
   12ef0:	00017411 	.word	0x00017411
   12ef4:	0001315d 	.word	0x0001315d
   12ef8:	00013a15 	.word	0x00013a15
   12efc:	000137d5 	.word	0x000137d5
   12f00:	00013221 	.word	0x00013221
   12f04:	00013145 	.word	0x00013145

00012f08 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   12f08:	b480      	push	{r7}
   12f0a:	b085      	sub	sp, #20
   12f0c:	af00      	add	r7, sp, #0
   12f0e:	6078      	str	r0, [r7, #4]
   12f10:	460b      	mov	r3, r1
   12f12:	70fb      	strb	r3, [r7, #3]
	uint32_t *data;
	uint8_t	j;
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   12f14:	2300      	movs	r3, #0
   12f16:	73fb      	strb	r3, [r7, #15]
   12f18:	7bfb      	ldrb	r3, [r7, #15]
   12f1a:	2b1f      	cmp	r3, #31
   12f1c:	dc1f      	bgt.n	12f5e <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
   12f1e:	687b      	ldr	r3, [r7, #4]
   12f20:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
   12f24:	7bfb      	ldrb	r3, [r7, #15]
   12f26:	4413      	add	r3, r2
   12f28:	b2db      	uxtb	r3, r3
   12f2a:	f003 031f 	and.w	r3, r3, #31
   12f2e:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
   12f30:	7bbb      	ldrb	r3, [r7, #14]
   12f32:	687a      	ldr	r2, [r7, #4]
   12f34:	009b      	lsls	r3, r3, #2
   12f36:	4413      	add	r3, r2
   12f38:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
   12f3c:	78fa      	ldrb	r2, [r7, #3]
   12f3e:	429a      	cmp	r2, r3
   12f40:	d109      	bne.n	12f56 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4e>
		{
			data=(uint32_t*)receiverBuffer[j];
   12f42:	7bbb      	ldrb	r3, [r7, #14]
   12f44:	3318      	adds	r3, #24
   12f46:	009b      	lsls	r3, r3, #2
   12f48:	687a      	ldr	r2, [r7, #4]
   12f4a:	4413      	add	r3, r2
   12f4c:	3304      	adds	r3, #4
   12f4e:	60bb      	str	r3, [r7, #8]
			return *data;
   12f50:	68bb      	ldr	r3, [r7, #8]
   12f52:	681b      	ldr	r3, [r3, #0]
   12f54:	e004      	b.n	12f60 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x58>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   12f56:	7bfb      	ldrb	r3, [r7, #15]
   12f58:	3301      	adds	r3, #1
   12f5a:	73fb      	strb	r3, [r7, #15]
   12f5c:	e7dc      	b.n	12f18 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
   12f5e:	2300      	movs	r3, #0
}
   12f60:	4618      	mov	r0, r3
   12f62:	3714      	adds	r7, #20
   12f64:	46bd      	mov	sp, r7
   12f66:	bc80      	pop	{r7}
   12f68:	4770      	bx	lr
	...

00012f6c <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh>:
   12f6c:	b580      	push	{r7, lr}
   12f6e:	b082      	sub	sp, #8
   12f70:	af00      	add	r7, sp, #0
   12f72:	6078      	str	r0, [r7, #4]
   12f74:	460b      	mov	r3, r1
   12f76:	70fb      	strb	r3, [r7, #3]
   12f78:	687b      	ldr	r3, [r7, #4]
   12f7a:	681b      	ldr	r3, [r3, #0]
   12f7c:	3b14      	subs	r3, #20
   12f7e:	681b      	ldr	r3, [r3, #0]
   12f80:	461a      	mov	r2, r3
   12f82:	687b      	ldr	r3, [r7, #4]
   12f84:	4413      	add	r3, r2
   12f86:	78fa      	ldrb	r2, [r7, #3]
   12f88:	4611      	mov	r1, r2
   12f8a:	4618      	mov	r0, r3
   12f8c:	4b03      	ldr	r3, [pc, #12]	; (12f9c <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh+0x30>)
   12f8e:	4798      	blx	r3
   12f90:	4603      	mov	r3, r0
   12f92:	4618      	mov	r0, r3
   12f94:	3708      	adds	r7, #8
   12f96:	46bd      	mov	sp, r7
   12f98:	bd80      	pop	{r7, pc}
   12f9a:	bf00      	nop
   12f9c:	00012f09 	.word	0x00012f09

00012fa0 <_ZN15ARINC_Interface18TrasmitSingleLabelEv>:
uint32_t ARINC_Interface::ReadBufferLabel(int label){
	uint8_t	l=Label2Byte((uint32_t)label);
	return (uint32_t)ReadBufferLabel(l);
}
uint32_t ARINC_Interface::TrasmitSingleLabel(void){
   12fa0:	b580      	push	{r7, lr}
   12fa2:	b082      	sub	sp, #8
   12fa4:	af00      	add	r7, sp, #0
   12fa6:	6078      	str	r0, [r7, #4]
	return	TrasmitSingleLabel(DEFAULT_LABEL);
   12fa8:	f44f 7187 	mov.w	r1, #270	; 0x10e
   12fac:	6878      	ldr	r0, [r7, #4]
   12fae:	4b03      	ldr	r3, [pc, #12]	; (12fbc <_ZN15ARINC_Interface18TrasmitSingleLabelEv+0x1c>)
   12fb0:	4798      	blx	r3
   12fb2:	4603      	mov	r3, r0
}
   12fb4:	4618      	mov	r0, r3
   12fb6:	3708      	adds	r7, #8
   12fb8:	46bd      	mov	sp, r7
   12fba:	bd80      	pop	{r7, pc}
   12fbc:	00012fc1 	.word	0x00012fc1

00012fc0 <_ZN15ARINC_Interface18TrasmitSingleLabelEm>:

uint32_t ARINC_Interface::TrasmitSingleLabel(uint32_t l){
   12fc0:	b590      	push	{r4, r7, lr}
   12fc2:	b085      	sub	sp, #20
   12fc4:	af00      	add	r7, sp, #0
   12fc6:	6078      	str	r0, [r7, #4]
   12fc8:	6039      	str	r1, [r7, #0]
	gpio_set_pin_level(LED0,false);
   12fca:	2100      	movs	r1, #0
   12fcc:	2052      	movs	r0, #82	; 0x52
   12fce:	4b4e      	ldr	r3, [pc, #312]	; (13108 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x148>)
   12fd0:	4798      	blx	r3
	octalLabel=Label2Byte(l);
   12fd2:	687b      	ldr	r3, [r7, #4]
   12fd4:	681b      	ldr	r3, [r3, #0]
   12fd6:	3b0c      	subs	r3, #12
   12fd8:	681b      	ldr	r3, [r3, #0]
   12fda:	461a      	mov	r2, r3
   12fdc:	687b      	ldr	r3, [r7, #4]
   12fde:	4413      	add	r3, r2
   12fe0:	681b      	ldr	r3, [r3, #0]
   12fe2:	3304      	adds	r3, #4
   12fe4:	681b      	ldr	r3, [r3, #0]
   12fe6:	687a      	ldr	r2, [r7, #4]
   12fe8:	6812      	ldr	r2, [r2, #0]
   12fea:	3a0c      	subs	r2, #12
   12fec:	6812      	ldr	r2, [r2, #0]
   12fee:	4611      	mov	r1, r2
   12ff0:	687a      	ldr	r2, [r7, #4]
   12ff2:	440a      	add	r2, r1
   12ff4:	6839      	ldr	r1, [r7, #0]
   12ff6:	4610      	mov	r0, r2
   12ff8:	4798      	blx	r3
   12ffa:	4603      	mov	r3, r0
   12ffc:	461a      	mov	r2, r3
   12ffe:	687b      	ldr	r3, [r7, #4]
   13000:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
	index=GetIndexTXLabelarray(FlipByte(octalLabel),LabelsArrayTX);
   13004:	687b      	ldr	r3, [r7, #4]
   13006:	681b      	ldr	r3, [r3, #0]
   13008:	3b0c      	subs	r3, #12
   1300a:	681b      	ldr	r3, [r3, #0]
   1300c:	461a      	mov	r2, r3
   1300e:	687b      	ldr	r3, [r7, #4]
   13010:	189c      	adds	r4, r3, r2
   13012:	687b      	ldr	r3, [r7, #4]
   13014:	681b      	ldr	r3, [r3, #0]
   13016:	3b0c      	subs	r3, #12
   13018:	681b      	ldr	r3, [r3, #0]
   1301a:	461a      	mov	r2, r3
   1301c:	687b      	ldr	r3, [r7, #4]
   1301e:	4413      	add	r3, r2
   13020:	681b      	ldr	r3, [r3, #0]
   13022:	681b      	ldr	r3, [r3, #0]
   13024:	687a      	ldr	r2, [r7, #4]
   13026:	6812      	ldr	r2, [r2, #0]
   13028:	3a0c      	subs	r2, #12
   1302a:	6812      	ldr	r2, [r2, #0]
   1302c:	4611      	mov	r1, r2
   1302e:	687a      	ldr	r2, [r7, #4]
   13030:	1850      	adds	r0, r2, r1
   13032:	687a      	ldr	r2, [r7, #4]
   13034:	f892 21d0 	ldrb.w	r2, [r2, #464]	; 0x1d0
   13038:	4611      	mov	r1, r2
   1303a:	4798      	blx	r3
   1303c:	4603      	mov	r3, r0
   1303e:	4619      	mov	r1, r3
   13040:	687b      	ldr	r3, [r7, #4]
   13042:	3304      	adds	r3, #4
   13044:	461a      	mov	r2, r3
   13046:	4620      	mov	r0, r4
   13048:	4b30      	ldr	r3, [pc, #192]	; (1310c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x14c>)
   1304a:	4798      	blx	r3
   1304c:	4603      	mov	r3, r0
   1304e:	461a      	mov	r2, r3
   13050:	687b      	ldr	r3, [r7, #4]
   13052:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
	uint8_t localBuffer[4];
//	memcpy(localBuffer,LabelsArrayTX,4);
//	memcpy(localBuffer,&transmitBuffer[index][0],4);
	Uint32FourBytesArray(0x1234561d,localBuffer);
   13056:	687b      	ldr	r3, [r7, #4]
   13058:	681b      	ldr	r3, [r3, #0]
   1305a:	3b0c      	subs	r3, #12
   1305c:	681b      	ldr	r3, [r3, #0]
   1305e:	461a      	mov	r2, r3
   13060:	687b      	ldr	r3, [r7, #4]
   13062:	4413      	add	r3, r2
   13064:	f107 020c 	add.w	r2, r7, #12
   13068:	4929      	ldr	r1, [pc, #164]	; (13110 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x150>)
   1306a:	4618      	mov	r0, r3
   1306c:	4b29      	ldr	r3, [pc, #164]	; (13114 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x154>)
   1306e:	4798      	blx	r3
	PrepareSingleTXBuffer(TXBuffer,LabelsArrayTX);
   13070:	687b      	ldr	r3, [r7, #4]
   13072:	681b      	ldr	r3, [r3, #0]
   13074:	3b0c      	subs	r3, #12
   13076:	681b      	ldr	r3, [r3, #0]
   13078:	461a      	mov	r2, r3
   1307a:	687b      	ldr	r3, [r7, #4]
   1307c:	1898      	adds	r0, r3, r2
   1307e:	687b      	ldr	r3, [r7, #4]
   13080:	f203 1173 	addw	r1, r3, #371	; 0x173
   13084:	687b      	ldr	r3, [r7, #4]
   13086:	3304      	adds	r3, #4
   13088:	461a      	mov	r2, r3
   1308a:	4b23      	ldr	r3, [pc, #140]	; (13118 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x158>)
   1308c:	4798      	blx	r3
	usb.println(" transmitting...");
   1308e:	4923      	ldr	r1, [pc, #140]	; (1311c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x15c>)
   13090:	4823      	ldr	r0, [pc, #140]	; (13120 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x160>)
   13092:	4b24      	ldr	r3, [pc, #144]	; (13124 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x164>)
   13094:	4798      	blx	r3
	cpu_irq_disable();
   13096:	6878      	ldr	r0, [r7, #4]
   13098:	4b23      	ldr	r3, [pc, #140]	; (13128 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x168>)
   1309a:	4798      	blx	r3
	HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   1309c:	687b      	ldr	r3, [r7, #4]
   1309e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   130a2:	f107 020c 	add.w	r2, r7, #12
   130a6:	210c      	movs	r1, #12
   130a8:	4618      	mov	r0, r3
   130aa:	4b20      	ldr	r3, [pc, #128]	; (1312c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x16c>)
   130ac:	4798      	blx	r3
	cpu_irq_enable();
   130ae:	6878      	ldr	r0, [r7, #4]
   130b0:	4b1f      	ldr	r3, [pc, #124]	; (13130 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x170>)
   130b2:	4798      	blx	r3
	usb.println(" Transmitted!");
   130b4:	491f      	ldr	r1, [pc, #124]	; (13134 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x174>)
   130b6:	481a      	ldr	r0, [pc, #104]	; (13120 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x160>)
   130b8:	4b1a      	ldr	r3, [pc, #104]	; (13124 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x164>)
   130ba:	4798      	blx	r3
	usb.println(">");
   130bc:	491e      	ldr	r1, [pc, #120]	; (13138 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x178>)
   130be:	4818      	ldr	r0, [pc, #96]	; (13120 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x160>)
   130c0:	4b18      	ldr	r3, [pc, #96]	; (13124 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x164>)
   130c2:	4798      	blx	r3
	printARINCTXData(TXBuffer);
   130c4:	687b      	ldr	r3, [r7, #4]
   130c6:	f203 1373 	addw	r3, r3, #371	; 0x173
   130ca:	4619      	mov	r1, r3
   130cc:	6878      	ldr	r0, [r7, #4]
   130ce:	4b1b      	ldr	r3, [pc, #108]	; (1313c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x17c>)
   130d0:	4798      	blx	r3
	txTimeout=false;
   130d2:	687b      	ldr	r3, [r7, #4]
   130d4:	2200      	movs	r2, #0
   130d6:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
	gpio_set_pin_level(LED0,true);
   130da:	2101      	movs	r1, #1
   130dc:	2052      	movs	r0, #82	; 0x52
   130de:	4b0a      	ldr	r3, [pc, #40]	; (13108 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x148>)
   130e0:	4798      	blx	r3
	return FourBytesArray2Uint32(TXBuffer);
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	681b      	ldr	r3, [r3, #0]
   130e6:	3b0c      	subs	r3, #12
   130e8:	681b      	ldr	r3, [r3, #0]
   130ea:	461a      	mov	r2, r3
   130ec:	687b      	ldr	r3, [r7, #4]
   130ee:	441a      	add	r2, r3
   130f0:	687b      	ldr	r3, [r7, #4]
   130f2:	f203 1373 	addw	r3, r3, #371	; 0x173
   130f6:	4619      	mov	r1, r3
   130f8:	4610      	mov	r0, r2
   130fa:	4b11      	ldr	r3, [pc, #68]	; (13140 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x180>)
   130fc:	4798      	blx	r3
   130fe:	4603      	mov	r3, r0
}
   13100:	4618      	mov	r0, r3
   13102:	3714      	adds	r7, #20
   13104:	46bd      	mov	sp, r7
   13106:	bd90      	pop	{r4, r7, pc}
   13108:	00012999 	.word	0x00012999
   1310c:	000126ef 	.word	0x000126ef
   13110:	1234561d 	.word	0x1234561d
   13114:	000127eb 	.word	0x000127eb
   13118:	0001273d 	.word	0x0001273d
   1311c:	0001f95c 	.word	0x0001f95c
   13120:	20009e88 	.word	0x20009e88
   13124:	00017411 	.word	0x00017411
   13128:	0001315d 	.word	0x0001315d
   1312c:	000138a1 	.word	0x000138a1
   13130:	00013145 	.word	0x00013145
   13134:	0001f970 	.word	0x0001f970
   13138:	0001f980 	.word	0x0001f980
   1313c:	000131ad 	.word	0x000131ad
   13140:	0001278b 	.word	0x0001278b

00013144 <_ZN15ARINC_Interface14cpu_irq_enableEv>:
	usb.println("  I = Increment Message and Transmit. Explorer Mode  - ONLY!");
	usb.println("  M = Enter Custom Message. Explorer Mode  - ONLY!");
	usb.println("  ENTER= Transmit next message. Explorer Mode  - ONLY!");
}

void	ARINC_Interface::cpu_irq_enable(void){
   13144:	b480      	push	{r7}
   13146:	b083      	sub	sp, #12
   13148:	af00      	add	r7, sp, #0
   1314a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   1314c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   13150:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   13152:	bf00      	nop
   13154:	370c      	adds	r7, #12
   13156:	46bd      	mov	sp, r7
   13158:	bc80      	pop	{r7}
   1315a:	4770      	bx	lr

0001315c <_ZN15ARINC_Interface15cpu_irq_disableEv>:
void	ARINC_Interface::cpu_irq_disable(void){
   1315c:	b480      	push	{r7}
   1315e:	b083      	sub	sp, #12
   13160:	af00      	add	r7, sp, #0
   13162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   13164:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   13168:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   1316a:	bf00      	nop
   1316c:	370c      	adds	r7, #12
   1316e:	46bd      	mov	sp, r7
   13170:	bc80      	pop	{r7}
   13172:	4770      	bx	lr

00013174 <_ZN15ARINC_Interface12PrintHexByteEh>:
	usb.write(&p,1);
	p=0x0D;
	usb.write(&p,1);
}
void ARINC_Interface::PrintHexByte(uint8_t c)
{
   13174:	b580      	push	{r7, lr}
   13176:	b082      	sub	sp, #8
   13178:	af00      	add	r7, sp, #0
   1317a:	6078      	str	r0, [r7, #4]
   1317c:	460b      	mov	r3, r1
   1317e:	70fb      	strb	r3, [r7, #3]
	usb<<"0x ";
   13180:	4906      	ldr	r1, [pc, #24]	; (1319c <_ZN15ARINC_Interface12PrintHexByteEh+0x28>)
   13182:	4807      	ldr	r0, [pc, #28]	; (131a0 <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   13184:	4b07      	ldr	r3, [pc, #28]	; (131a4 <_ZN15ARINC_Interface12PrintHexByteEh+0x30>)
   13186:	4798      	blx	r3
	usb.println(c,HEX);
   13188:	78fb      	ldrb	r3, [r7, #3]
   1318a:	2210      	movs	r2, #16
   1318c:	4619      	mov	r1, r3
   1318e:	4804      	ldr	r0, [pc, #16]	; (131a0 <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   13190:	4b05      	ldr	r3, [pc, #20]	; (131a8 <_ZN15ARINC_Interface12PrintHexByteEh+0x34>)
   13192:	4798      	blx	r3
	
}
   13194:	bf00      	nop
   13196:	3708      	adds	r7, #8
   13198:	46bd      	mov	sp, r7
   1319a:	bd80      	pop	{r7, pc}
   1319c:	0001fe20 	.word	0x0001fe20
   131a0:	20009e88 	.word	0x20009e88
   131a4:	0000116d 	.word	0x0000116d
   131a8:	00017445 	.word	0x00017445

000131ac <_ZN15ARINC_Interface16printARINCTXDataEPh>:
		usb.println("\n\rLabels 192-255:  ");
	}
	
}

void ARINC_Interface::printARINCTXData(unsigned char *array) {
   131ac:	b580      	push	{r7, lr}
   131ae:	b084      	sub	sp, #16
   131b0:	af00      	add	r7, sp, #0
   131b2:	6078      	str	r0, [r7, #4]
   131b4:	6039      	str	r1, [r7, #0]
	unsigned char i;
	
	usb.println("\n\r>TX    Data:");
   131b6:	4914      	ldr	r1, [pc, #80]	; (13208 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x5c>)
   131b8:	4814      	ldr	r0, [pc, #80]	; (1320c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   131ba:	4b15      	ldr	r3, [pc, #84]	; (13210 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   131bc:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   131be:	2300      	movs	r3, #0
   131c0:	73fb      	strb	r3, [r7, #15]
   131c2:	7bfb      	ldrb	r3, [r7, #15]
   131c4:	2b02      	cmp	r3, #2
   131c6:	dc0b      	bgt.n	131e0 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x34>
		PrintHexByte(array[i]);          // Output the data
   131c8:	7bfb      	ldrb	r3, [r7, #15]
   131ca:	683a      	ldr	r2, [r7, #0]
   131cc:	4413      	add	r3, r2
   131ce:	781b      	ldrb	r3, [r3, #0]
   131d0:	4619      	mov	r1, r3
   131d2:	6878      	ldr	r0, [r7, #4]
   131d4:	4b0f      	ldr	r3, [pc, #60]	; (13214 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   131d6:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   131d8:	7bfb      	ldrb	r3, [r7, #15]
   131da:	3301      	adds	r3, #1
   131dc:	73fb      	strb	r3, [r7, #15]
   131de:	e7f0      	b.n	131c2 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x16>
	}
	usb.println("Label:");
   131e0:	490d      	ldr	r1, [pc, #52]	; (13218 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x6c>)
   131e2:	480a      	ldr	r0, [pc, #40]	; (1320c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   131e4:	4b0a      	ldr	r3, [pc, #40]	; (13210 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   131e6:	4798      	blx	r3
	PrintHexByte(array[3]);             // Output the label data
   131e8:	683b      	ldr	r3, [r7, #0]
   131ea:	3303      	adds	r3, #3
   131ec:	781b      	ldrb	r3, [r3, #0]
   131ee:	4619      	mov	r1, r3
   131f0:	6878      	ldr	r0, [r7, #4]
   131f2:	4b08      	ldr	r3, [pc, #32]	; (13214 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   131f4:	4798      	blx	r3
	
	//crlf();
	usb.println(">");
   131f6:	4909      	ldr	r1, [pc, #36]	; (1321c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x70>)
   131f8:	4804      	ldr	r0, [pc, #16]	; (1320c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   131fa:	4b05      	ldr	r3, [pc, #20]	; (13210 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   131fc:	4798      	blx	r3
}
   131fe:	bf00      	nop
   13200:	3710      	adds	r7, #16
   13202:	46bd      	mov	sp, r7
   13204:	bd80      	pop	{r7, pc}
   13206:	bf00      	nop
   13208:	0001ffe4 	.word	0x0001ffe4
   1320c:	20009e88 	.word	0x20009e88
   13210:	00017411 	.word	0x00017411
   13214:	00013175 	.word	0x00013175
   13218:	0001fff4 	.word	0x0001fff4
   1321c:	0001f980 	.word	0x0001f980

00013220 <_ZN15ARINC_Interface20CheckMessageCountMaxEv>:
		default: break;
	}
}
*/
void ARINC_Interface::CheckMessageCountMax(void)
{
   13220:	b480      	push	{r7}
   13222:	b083      	sub	sp, #12
   13224:	af00      	add	r7, sp, #0
   13226:	6078      	str	r0, [r7, #4]
	MessageCount++;
   13228:	687b      	ldr	r3, [r7, #4]
   1322a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
   1322e:	3301      	adds	r3, #1
   13230:	b2da      	uxtb	r2, r3
   13232:	687b      	ldr	r3, [r7, #4]
   13234:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
	MessageCount=MessageCount%MESSAGECOUNTMAX;
   13238:	687b      	ldr	r3, [r7, #4]
   1323a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
   1323e:	f003 031f 	and.w	r3, r3, #31
   13242:	b2da      	uxtb	r2, r3
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

}
   1324a:	bf00      	nop
   1324c:	370c      	adds	r7, #12
   1324e:	46bd      	mov	sp, r7
   13250:	bc80      	pop	{r7}
   13252:	4770      	bx	lr

00013254 <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
   13254:	b580      	push	{r7, lr}
   13256:	b082      	sub	sp, #8
   13258:	af00      	add	r7, sp, #0
   1325a:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   1325c:	2001      	movs	r0, #1
   1325e:	4b03      	ldr	r3, [pc, #12]	; (1326c <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
   13260:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
   13262:	bf00      	nop
   13264:	3708      	adds	r7, #8
   13266:	46bd      	mov	sp, r7
   13268:	bd80      	pop	{r7, pc}
   1326a:	bf00      	nop
   1326c:	00005fed 	.word	0x00005fed

00013270 <_Z41__static_initialization_and_destruction_0ii>:
	
	usb.write(&p[0],sizeof(p));
}


   13270:	b580      	push	{r7, lr}
   13272:	b082      	sub	sp, #8
   13274:	af00      	add	r7, sp, #0
   13276:	6078      	str	r0, [r7, #4]
   13278:	6039      	str	r1, [r7, #0]
   1327a:	687b      	ldr	r3, [r7, #4]
   1327c:	2b01      	cmp	r3, #1
   1327e:	d10c      	bne.n	1329a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13280:	683b      	ldr	r3, [r7, #0]
   13282:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13286:	4293      	cmp	r3, r2
   13288:	d107      	bne.n	1329a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1328a:	4806      	ldr	r0, [pc, #24]	; (132a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1328c:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1328e:	4798      	blx	r3
   13290:	4a06      	ldr	r2, [pc, #24]	; (132ac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13292:	4907      	ldr	r1, [pc, #28]	; (132b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13294:	4803      	ldr	r0, [pc, #12]	; (132a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13296:	4b07      	ldr	r3, [pc, #28]	; (132b4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13298:	4798      	blx	r3
   1329a:	bf00      	nop
   1329c:	3708      	adds	r7, #8
   1329e:	46bd      	mov	sp, r7
   132a0:	bd80      	pop	{r7, pc}
   132a2:	bf00      	nop
   132a4:	20008c20 	.word	0x20008c20
   132a8:	00012a91 	.word	0x00012a91
   132ac:	20000000 	.word	0x20000000
   132b0:	00012b89 	.word	0x00012b89
   132b4:	000187f1 	.word	0x000187f1

000132b8 <_GLOBAL__sub_I_HexSymbols>:
   132b8:	b580      	push	{r7, lr}
   132ba:	af00      	add	r7, sp, #0
   132bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   132c0:	2001      	movs	r0, #1
   132c2:	4b01      	ldr	r3, [pc, #4]	; (132c8 <_GLOBAL__sub_I_HexSymbols+0x10>)
   132c4:	4798      	blx	r3
   132c6:	bd80      	pop	{r7, pc}
   132c8:	00013271 	.word	0x00013271

000132cc <hri_port_set_OUT_reg>:
{
   132cc:	b480      	push	{r7}
   132ce:	b085      	sub	sp, #20
   132d0:	af00      	add	r7, sp, #0
   132d2:	60f8      	str	r0, [r7, #12]
   132d4:	460b      	mov	r3, r1
   132d6:	607a      	str	r2, [r7, #4]
   132d8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   132da:	7afb      	ldrb	r3, [r7, #11]
   132dc:	68fa      	ldr	r2, [r7, #12]
   132de:	01db      	lsls	r3, r3, #7
   132e0:	4413      	add	r3, r2
   132e2:	3318      	adds	r3, #24
   132e4:	687a      	ldr	r2, [r7, #4]
   132e6:	601a      	str	r2, [r3, #0]
}
   132e8:	bf00      	nop
   132ea:	3714      	adds	r7, #20
   132ec:	46bd      	mov	sp, r7
   132ee:	bc80      	pop	{r7}
   132f0:	4770      	bx	lr

000132f2 <hri_port_clear_OUT_reg>:
{
   132f2:	b480      	push	{r7}
   132f4:	b085      	sub	sp, #20
   132f6:	af00      	add	r7, sp, #0
   132f8:	60f8      	str	r0, [r7, #12]
   132fa:	460b      	mov	r3, r1
   132fc:	607a      	str	r2, [r7, #4]
   132fe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   13300:	7afb      	ldrb	r3, [r7, #11]
   13302:	68fa      	ldr	r2, [r7, #12]
   13304:	01db      	lsls	r3, r3, #7
   13306:	4413      	add	r3, r2
   13308:	3314      	adds	r3, #20
   1330a:	687a      	ldr	r2, [r7, #4]
   1330c:	601a      	str	r2, [r3, #0]
}
   1330e:	bf00      	nop
   13310:	3714      	adds	r7, #20
   13312:	46bd      	mov	sp, r7
   13314:	bc80      	pop	{r7}
   13316:	4770      	bx	lr

00013318 <_gpio_set_level>:
{
   13318:	b580      	push	{r7, lr}
   1331a:	b082      	sub	sp, #8
   1331c:	af00      	add	r7, sp, #0
   1331e:	4603      	mov	r3, r0
   13320:	6039      	str	r1, [r7, #0]
   13322:	71fb      	strb	r3, [r7, #7]
   13324:	4613      	mov	r3, r2
   13326:	71bb      	strb	r3, [r7, #6]
	if (level) {
   13328:	79bb      	ldrb	r3, [r7, #6]
   1332a:	2b00      	cmp	r3, #0
   1332c:	d006      	beq.n	1333c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1332e:	79fb      	ldrb	r3, [r7, #7]
   13330:	683a      	ldr	r2, [r7, #0]
   13332:	4619      	mov	r1, r3
   13334:	4806      	ldr	r0, [pc, #24]	; (13350 <_gpio_set_level+0x38>)
   13336:	4b07      	ldr	r3, [pc, #28]	; (13354 <_gpio_set_level+0x3c>)
   13338:	4798      	blx	r3
}
   1333a:	e005      	b.n	13348 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   1333c:	79fb      	ldrb	r3, [r7, #7]
   1333e:	683a      	ldr	r2, [r7, #0]
   13340:	4619      	mov	r1, r3
   13342:	4803      	ldr	r0, [pc, #12]	; (13350 <_gpio_set_level+0x38>)
   13344:	4b04      	ldr	r3, [pc, #16]	; (13358 <_gpio_set_level+0x40>)
   13346:	4798      	blx	r3
}
   13348:	bf00      	nop
   1334a:	3708      	adds	r7, #8
   1334c:	46bd      	mov	sp, r7
   1334e:	bd80      	pop	{r7, pc}
   13350:	41008000 	.word	0x41008000
   13354:	000132cd 	.word	0x000132cd
   13358:	000132f3 	.word	0x000132f3

0001335c <gpio_set_pin_level>:
{
   1335c:	b580      	push	{r7, lr}
   1335e:	b082      	sub	sp, #8
   13360:	af00      	add	r7, sp, #0
   13362:	4603      	mov	r3, r0
   13364:	460a      	mov	r2, r1
   13366:	71fb      	strb	r3, [r7, #7]
   13368:	4613      	mov	r3, r2
   1336a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1336c:	79fb      	ldrb	r3, [r7, #7]
   1336e:	115b      	asrs	r3, r3, #5
   13370:	b2d8      	uxtb	r0, r3
   13372:	79fb      	ldrb	r3, [r7, #7]
   13374:	f003 031f 	and.w	r3, r3, #31
   13378:	2201      	movs	r2, #1
   1337a:	fa02 f303 	lsl.w	r3, r2, r3
   1337e:	79ba      	ldrb	r2, [r7, #6]
   13380:	4619      	mov	r1, r3
   13382:	4b03      	ldr	r3, [pc, #12]	; (13390 <gpio_set_pin_level+0x34>)
   13384:	4798      	blx	r3
}
   13386:	bf00      	nop
   13388:	3708      	adds	r7, #8
   1338a:	46bd      	mov	sp, r7
   1338c:	bd80      	pop	{r7, pc}
   1338e:	bf00      	nop
   13390:	00013319 	.word	0x00013319

00013394 <_ZN15Holt_3593_ClassC1Ev>:
#include "Holt_3593_Class.h"
#include "ARINC_Interface.h"
#include "string.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
   13394:	b580      	push	{r7, lr}
   13396:	b082      	sub	sp, #8
   13398:	af00      	add	r7, sp, #0
   1339a:	6078      	str	r0, [r7, #4]
   1339c:	687b      	ldr	r3, [r7, #4]
   1339e:	4618      	mov	r0, r3
   133a0:	4b03      	ldr	r3, [pc, #12]	; (133b0 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
   133a2:	4798      	blx	r3
{
} //Holt_3593_Class
   133a4:	687b      	ldr	r3, [r7, #4]
   133a6:	4618      	mov	r0, r3
   133a8:	3708      	adds	r7, #8
   133aa:	46bd      	mov	sp, r7
   133ac:	bd80      	pop	{r7, pc}
   133ae:	bf00      	nop
   133b0:	00014edd 	.word	0x00014edd

000133b4 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
   133b4:	b580      	push	{r7, lr}
   133b6:	b082      	sub	sp, #8
   133b8:	af00      	add	r7, sp, #0
   133ba:	6078      	str	r0, [r7, #4]
   133bc:	687b      	ldr	r3, [r7, #4]
   133be:	4618      	mov	r0, r3
   133c0:	4b03      	ldr	r3, [pc, #12]	; (133d0 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
   133c2:	4798      	blx	r3
{
} //~Holt_3593_Class
   133c4:	687b      	ldr	r3, [r7, #4]
   133c6:	4618      	mov	r0, r3
   133c8:	3708      	adds	r7, #8
   133ca:	46bd      	mov	sp, r7
   133cc:	bd80      	pop	{r7, pc}
   133ce:	bf00      	nop
   133d0:	00014efd 	.word	0x00014efd

000133d4 <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
   133d4:	b590      	push	{r4, r7, lr}
   133d6:	b089      	sub	sp, #36	; 0x24
   133d8:	af02      	add	r7, sp, #8
   133da:	6078      	str	r0, [r7, #4]
	 
	 spi.SetDescriptor(&SPI_HI3593);
   133dc:	687b      	ldr	r3, [r7, #4]
   133de:	492d      	ldr	r1, [pc, #180]	; (13494 <_ZN15Holt_3593_Class4InitEv+0xc0>)
   133e0:	4618      	mov	r0, r3
   133e2:	4b2d      	ldr	r3, [pc, #180]	; (13498 <_ZN15Holt_3593_Class4InitEv+0xc4>)
   133e4:	4798      	blx	r3
	  spi.init();
   133e6:	687b      	ldr	r3, [r7, #4]
   133e8:	4618      	mov	r0, r3
   133ea:	4b2c      	ldr	r3, [pc, #176]	; (1349c <_ZN15Holt_3593_Class4InitEv+0xc8>)
   133ec:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
   133ee:	2340      	movs	r3, #64	; 0x40
   133f0:	9301      	str	r3, [sp, #4]
   133f2:	2300      	movs	r3, #0
   133f4:	9300      	str	r3, [sp, #0]
   133f6:	2300      	movs	r3, #0
   133f8:	2201      	movs	r2, #1
   133fa:	2104      	movs	r1, #4
   133fc:	6878      	ldr	r0, [r7, #4]
   133fe:	4c28      	ldr	r4, [pc, #160]	; (134a0 <_ZN15Holt_3593_Class4InitEv+0xcc>)
   13400:	47a0      	blx	r4
   13402:	4603      	mov	r3, r0
   13404:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
   13406:	2300      	movs	r3, #0
   13408:	617b      	str	r3, [r7, #20]
   1340a:	697b      	ldr	r3, [r7, #20]
   1340c:	2b1f      	cmp	r3, #31
   1340e:	dc2a      	bgt.n	13466 <_ZN15Holt_3593_Class4InitEv+0x92>
	{
// 		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
// 		LabelArray_1[i]=LabelArray_2[i];
		LabelArray_2[i]=LabelArray_1[i];
   13410:	4a24      	ldr	r2, [pc, #144]	; (134a4 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13412:	697b      	ldr	r3, [r7, #20]
   13414:	4413      	add	r3, r2
   13416:	7819      	ldrb	r1, [r3, #0]
   13418:	4a23      	ldr	r2, [pc, #140]	; (134a8 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   1341a:	697b      	ldr	r3, [r7, #20]
   1341c:	4413      	add	r3, r2
   1341e:	460a      	mov	r2, r1
   13420:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX1[i]=LabelArray_2[i];
   13422:	4a21      	ldr	r2, [pc, #132]	; (134a8 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13424:	697b      	ldr	r3, [r7, #20]
   13426:	4413      	add	r3, r2
   13428:	7819      	ldrb	r1, [r3, #0]
   1342a:	4a20      	ldr	r2, [pc, #128]	; (134ac <_ZN15Holt_3593_Class4InitEv+0xd8>)
   1342c:	697b      	ldr	r3, [r7, #20]
   1342e:	4413      	add	r3, r2
   13430:	3324      	adds	r3, #36	; 0x24
   13432:	460a      	mov	r2, r1
   13434:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX2[i]=LabelArray_2[i];
   13436:	4a1c      	ldr	r2, [pc, #112]	; (134a8 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13438:	697b      	ldr	r3, [r7, #20]
   1343a:	4413      	add	r3, r2
   1343c:	7819      	ldrb	r1, [r3, #0]
   1343e:	4a1b      	ldr	r2, [pc, #108]	; (134ac <_ZN15Holt_3593_Class4InitEv+0xd8>)
   13440:	697b      	ldr	r3, [r7, #20]
   13442:	4413      	add	r3, r2
   13444:	3344      	adds	r3, #68	; 0x44
   13446:	460a      	mov	r2, r1
   13448:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayTX[i]=LabelArray_2[i];
   1344a:	4a17      	ldr	r2, [pc, #92]	; (134a8 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   1344c:	697b      	ldr	r3, [r7, #20]
   1344e:	4413      	add	r3, r2
   13450:	7819      	ldrb	r1, [r3, #0]
   13452:	4a16      	ldr	r2, [pc, #88]	; (134ac <_ZN15Holt_3593_Class4InitEv+0xd8>)
   13454:	697b      	ldr	r3, [r7, #20]
   13456:	4413      	add	r3, r2
   13458:	3304      	adds	r3, #4
   1345a:	460a      	mov	r2, r1
   1345c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
   1345e:	697b      	ldr	r3, [r7, #20]
   13460:	3301      	adds	r3, #1
   13462:	617b      	str	r3, [r7, #20]
   13464:	e7d1      	b.n	1340a <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
   13466:	2300      	movs	r3, #0
   13468:	613b      	str	r3, [r7, #16]
   1346a:	693b      	ldr	r3, [r7, #16]
   1346c:	2b02      	cmp	r3, #2
   1346e:	dc0c      	bgt.n	1348a <_ZN15Holt_3593_Class4InitEv+0xb6>
	{
		//LabelPriority2[i]=FlipByte(LabelPriority1[i]);
		LabelPriority2[i]=LabelPriority1[i];
   13470:	4a0f      	ldr	r2, [pc, #60]	; (134b0 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   13472:	693b      	ldr	r3, [r7, #16]
   13474:	4413      	add	r3, r2
   13476:	7819      	ldrb	r1, [r3, #0]
   13478:	4a0e      	ldr	r2, [pc, #56]	; (134b4 <_ZN15Holt_3593_Class4InitEv+0xe0>)
   1347a:	693b      	ldr	r3, [r7, #16]
   1347c:	4413      	add	r3, r2
   1347e:	460a      	mov	r2, r1
   13480:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
   13482:	693b      	ldr	r3, [r7, #16]
   13484:	3301      	adds	r3, #1
   13486:	613b      	str	r3, [r7, #16]
   13488:	e7ef      	b.n	1346a <_ZN15Holt_3593_Class4InitEv+0x96>
	}
	//memcpy(arinc.LabelsArrayRX1,LabelArray_1,LABEL_ARRAY_SIZE);	
//	memcpy(arinc.LabelsArrayRX2,LabelArray_2,LABEL_ARRAY_SIZE);	
	//memcpy(arinc.LabelsArrayTX,LabelArray_2,LABEL_ARRAY_SIZE);		
	return	status;
   1348a:	7bfb      	ldrb	r3, [r7, #15]
 } 
   1348c:	4618      	mov	r0, r3
   1348e:	371c      	adds	r7, #28
   13490:	46bd      	mov	sp, r7
   13492:	bd90      	pop	{r4, r7, pc}
   13494:	2000a144 	.word	0x2000a144
   13498:	00014f49 	.word	0x00014f49
   1349c:	00014f11 	.word	0x00014f11
   134a0:	000134b9 	.word	0x000134b9
   134a4:	00020400 	.word	0x00020400
   134a8:	20008f48 	.word	0x20008f48
   134ac:	20008c20 	.word	0x20008c20
   134b0:	200001b8 	.word	0x200001b8
   134b4:	20008f68 	.word	0x20008f68

000134b8 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
   134b8:	b580      	push	{r7, lr}
   134ba:	b084      	sub	sp, #16
   134bc:	af00      	add	r7, sp, #0
   134be:	6078      	str	r0, [r7, #4]
   134c0:	4608      	mov	r0, r1
   134c2:	4611      	mov	r1, r2
   134c4:	461a      	mov	r2, r3
   134c6:	4603      	mov	r3, r0
   134c8:	70fb      	strb	r3, [r7, #3]
   134ca:	460b      	mov	r3, r1
   134cc:	70bb      	strb	r3, [r7, #2]
   134ce:	4613      	mov	r3, r2
   134d0:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
   134d2:	2300      	movs	r3, #0
   134d4:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
   134d6:	2104      	movs	r1, #4
   134d8:	6878      	ldr	r0, [r7, #4]
   134da:	4b18      	ldr	r3, [pc, #96]	; (1353c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
   134dc:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   134de:	78fb      	ldrb	r3, [r7, #3]
   134e0:	461a      	mov	r2, r3
   134e2:	2138      	movs	r1, #56	; 0x38
   134e4:	6878      	ldr	r0, [r7, #4]
   134e6:	4b16      	ldr	r3, [pc, #88]	; (13540 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   134e8:	4798      	blx	r3
	 cmd =  arate;
   134ea:	7e3b      	ldrb	r3, [r7, #24]
   134ec:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
   134ee:	787b      	ldrb	r3, [r7, #1]
   134f0:	011b      	lsls	r3, r3, #4
   134f2:	b25a      	sxtb	r2, r3
   134f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   134f8:	4313      	orrs	r3, r2
   134fa:	b25b      	sxtb	r3, r3
   134fc:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
   134fe:	78bb      	ldrb	r3, [r7, #2]
   13500:	015b      	lsls	r3, r3, #5
   13502:	b25a      	sxtb	r2, r3
   13504:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13508:	4313      	orrs	r3, r2
   1350a:	b25b      	sxtb	r3, r3
   1350c:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
   1350e:	7f3b      	ldrb	r3, [r7, #28]
   13510:	019b      	lsls	r3, r3, #6
   13512:	b25a      	sxtb	r2, r3
   13514:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13518:	4313      	orrs	r3, r2
   1351a:	b25b      	sxtb	r3, r3
   1351c:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   1351e:	7bfb      	ldrb	r3, [r7, #15]
   13520:	461a      	mov	r2, r3
   13522:	2108      	movs	r1, #8
   13524:	6878      	ldr	r0, [r7, #4]
   13526:	4b06      	ldr	r3, [pc, #24]	; (13540 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   13528:	4798      	blx	r3
	 return R_Register (R_TSR);
   1352a:	2180      	movs	r1, #128	; 0x80
   1352c:	6878      	ldr	r0, [r7, #4]
   1352e:	4b05      	ldr	r3, [pc, #20]	; (13544 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
   13530:	4798      	blx	r3
   13532:	4603      	mov	r3, r0
	 
	 
 }
   13534:	4618      	mov	r0, r3
   13536:	3710      	adds	r7, #16
   13538:	46bd      	mov	sp, r7
   1353a:	bd80      	pop	{r7, pc}
   1353c:	0001394d 	.word	0x0001394d
   13540:	000139a1 	.word	0x000139a1
   13544:	00013a15 	.word	0x00013a15

00013548 <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
   13548:	b580      	push	{r7, lr}
   1354a:	b082      	sub	sp, #8
   1354c:	af00      	add	r7, sp, #0
   1354e:	6078      	str	r0, [r7, #4]
	 	spi.enable();
   13550:	687b      	ldr	r3, [r7, #4]
   13552:	4618      	mov	r0, r3
   13554:	4b04      	ldr	r3, [pc, #16]	; (13568 <_ZN15Holt_3593_Class4openEv+0x20>)
   13556:	4798      	blx	r3
		 SS_Low();
   13558:	6878      	ldr	r0, [r7, #4]
   1355a:	4b04      	ldr	r3, [pc, #16]	; (1356c <_ZN15Holt_3593_Class4openEv+0x24>)
   1355c:	4798      	blx	r3
 }
   1355e:	bf00      	nop
   13560:	3708      	adds	r7, #8
   13562:	46bd      	mov	sp, r7
   13564:	bd80      	pop	{r7, pc}
   13566:	bf00      	nop
   13568:	00014f6d 	.word	0x00014f6d
   1356c:	00013a5d 	.word	0x00013a5d

00013570 <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
   13570:	b580      	push	{r7, lr}
   13572:	b082      	sub	sp, #8
   13574:	af00      	add	r7, sp, #0
   13576:	6078      	str	r0, [r7, #4]
	    SS_High();
   13578:	6878      	ldr	r0, [r7, #4]
   1357a:	4b05      	ldr	r3, [pc, #20]	; (13590 <_ZN15Holt_3593_Class5closeEv+0x20>)
   1357c:	4798      	blx	r3
	  spi.disable();
   1357e:	687b      	ldr	r3, [r7, #4]
   13580:	4618      	mov	r0, r3
   13582:	4b04      	ldr	r3, [pc, #16]	; (13594 <_ZN15Holt_3593_Class5closeEv+0x24>)
   13584:	4798      	blx	r3
	
  }
   13586:	bf00      	nop
   13588:	3708      	adds	r7, #8
   1358a:	46bd      	mov	sp, r7
   1358c:	bd80      	pop	{r7, pc}
   1358e:	bf00      	nop
   13590:	00013a79 	.word	0x00013a79
   13594:	00015031 	.word	0x00015031

00013598 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   13598:	b580      	push	{r7, lr}
   1359a:	b084      	sub	sp, #16
   1359c:	af00      	add	r7, sp, #0
   1359e:	6078      	str	r0, [r7, #4]
   135a0:	460b      	mov	r3, r1
   135a2:	70fb      	strb	r3, [r7, #3]
   135a4:	4613      	mov	r3, r2
   135a6:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
   135a8:	78fb      	ldrb	r3, [r7, #3]
   135aa:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   135ac:	7bfb      	ldrb	r3, [r7, #15]
   135ae:	4619      	mov	r1, r3
   135b0:	6878      	ldr	r0, [r7, #4]
   135b2:	4b0b      	ldr	r3, [pc, #44]	; (135e0 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
   135b4:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
   135b6:	78bb      	ldrb	r3, [r7, #2]
   135b8:	2b00      	cmp	r3, #0
   135ba:	d00a      	beq.n	135d2 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.isSPIReady());     
   135bc:	687b      	ldr	r3, [r7, #4]
   135be:	4618      	mov	r0, r3
   135c0:	4b08      	ldr	r3, [pc, #32]	; (135e4 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
   135c2:	4798      	blx	r3
   135c4:	4603      	mov	r3, r0
   135c6:	f083 0301 	eor.w	r3, r3, #1
   135ca:	b2db      	uxtb	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d000      	beq.n	135d2 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
   135d0:	e7f4      	b.n	135bc <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
   135d2:	78fb      	ldrb	r3, [r7, #3]
   135d4:	73bb      	strb	r3, [r7, #14]
   135d6:	7bbb      	ldrb	r3, [r7, #14]
  
}
   135d8:	4618      	mov	r0, r3
   135da:	3710      	adds	r7, #16
   135dc:	46bd      	mov	sp, r7
   135de:	bd80      	pop	{r7, pc}
   135e0:	000136bd 	.word	0x000136bd
   135e4:	00015051 	.word	0x00015051

000135e8 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::InitReceiver1Labels(void)
{
   135e8:	b580      	push	{r7, lr}
   135ea:	b084      	sub	sp, #16
   135ec:	af00      	add	r7, sp, #0
   135ee:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
   135f0:	6878      	ldr	r0, [r7, #4]
   135f2:	4b14      	ldr	r3, [pc, #80]	; (13644 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x5c>)
   135f4:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
   135f6:	2201      	movs	r2, #1
   135f8:	2114      	movs	r1, #20
   135fa:	6878      	ldr	r0, [r7, #4]
   135fc:	4b12      	ldr	r3, [pc, #72]	; (13648 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   135fe:	4798      	blx	r3
   13600:	4603      	mov	r3, r0
   13602:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   13604:	231f      	movs	r3, #31
   13606:	73fb      	strb	r3, [r7, #15]
   13608:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1360c:	2b00      	cmp	r3, #0
   1360e:	db11      	blt.n	13634 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   13610:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13614:	4a0d      	ldr	r2, [pc, #52]	; (1364c <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x64>)
   13616:	5cd3      	ldrb	r3, [r2, r3]
   13618:	2201      	movs	r2, #1
   1361a:	4619      	mov	r1, r3
   1361c:	6878      	ldr	r0, [r7, #4]
   1361e:	4b0a      	ldr	r3, [pc, #40]	; (13648 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   13620:	4798      	blx	r3
   13622:	4603      	mov	r3, r0
   13624:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   13626:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1362a:	b2db      	uxtb	r3, r3
   1362c:	3b01      	subs	r3, #1
   1362e:	b2db      	uxtb	r3, r3
   13630:	73fb      	strb	r3, [r7, #15]
   13632:	e7e9      	b.n	13608 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x20>
  }    
 	  
	close();
   13634:	6878      	ldr	r0, [r7, #4]
   13636:	4b06      	ldr	r3, [pc, #24]	; (13650 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x68>)
   13638:	4798      	blx	r3
}
   1363a:	bf00      	nop
   1363c:	3710      	adds	r7, #16
   1363e:	46bd      	mov	sp, r7
   13640:	bd80      	pop	{r7, pc}
   13642:	bf00      	nop
   13644:	00013549 	.word	0x00013549
   13648:	00013599 	.word	0x00013599
   1364c:	00020400 	.word	0x00020400
   13650:	00013571 	.word	0x00013571

00013654 <_ZN15Holt_3593_Class18InitPriorityLabelsEv>:
void Holt_3593_Class::InitPriorityLabels(void)
{
   13654:	b580      	push	{r7, lr}
   13656:	b082      	sub	sp, #8
   13658:	af00      	add	r7, sp, #0
   1365a:	6078      	str	r0, [r7, #4]
	
	// Priorty Labels
	TXBuffer[0] =  LabelPriority1[0];   // filter 3
   1365c:	4b14      	ldr	r3, [pc, #80]	; (136b0 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x5c>)
   1365e:	781a      	ldrb	r2, [r3, #0]
   13660:	687b      	ldr	r3, [r7, #4]
   13662:	765a      	strb	r2, [r3, #25]
	TXBuffer[1] =  LabelPriority1[1];   // filter 2
   13664:	4b12      	ldr	r3, [pc, #72]	; (136b0 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x5c>)
   13666:	785a      	ldrb	r2, [r3, #1]
   13668:	687b      	ldr	r3, [r7, #4]
   1366a:	769a      	strb	r2, [r3, #26]
	TXBuffer[2] =  LabelPriority1[2];   // filter 1
   1366c:	4b10      	ldr	r3, [pc, #64]	; (136b0 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x5c>)
   1366e:	789a      	ldrb	r2, [r3, #2]
   13670:	687b      	ldr	r3, [r7, #4]
   13672:	76da      	strb	r2, [r3, #27]
	TransmitCommandAndData(W_PL1Match,TXBuffer);  // initialize the Receiver1 PL match registers
   13674:	687b      	ldr	r3, [r7, #4]
   13676:	3319      	adds	r3, #25
   13678:	461a      	mov	r2, r3
   1367a:	2118      	movs	r1, #24
   1367c:	6878      	ldr	r0, [r7, #4]
   1367e:	4b0d      	ldr	r3, [pc, #52]	; (136b4 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x60>)
   13680:	4798      	blx	r3
	
	TXBuffer[0] =  LabelPriority2[0];   // filter 3
   13682:	4b0d      	ldr	r3, [pc, #52]	; (136b8 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x64>)
   13684:	781a      	ldrb	r2, [r3, #0]
   13686:	687b      	ldr	r3, [r7, #4]
   13688:	765a      	strb	r2, [r3, #25]
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
   1368a:	4b0b      	ldr	r3, [pc, #44]	; (136b8 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x64>)
   1368c:	785a      	ldrb	r2, [r3, #1]
   1368e:	687b      	ldr	r3, [r7, #4]
   13690:	769a      	strb	r2, [r3, #26]
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
   13692:	4b09      	ldr	r3, [pc, #36]	; (136b8 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x64>)
   13694:	789a      	ldrb	r2, [r3, #2]
   13696:	687b      	ldr	r3, [r7, #4]
   13698:	76da      	strb	r2, [r3, #27]
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
   1369a:	687b      	ldr	r3, [r7, #4]
   1369c:	3319      	adds	r3, #25
   1369e:	461a      	mov	r2, r3
   136a0:	212c      	movs	r1, #44	; 0x2c
   136a2:	6878      	ldr	r0, [r7, #4]
   136a4:	4b03      	ldr	r3, [pc, #12]	; (136b4 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x60>)
   136a6:	4798      	blx	r3
}
   136a8:	bf00      	nop
   136aa:	3708      	adds	r7, #8
   136ac:	46bd      	mov	sp, r7
   136ae:	bd80      	pop	{r7, pc}
   136b0:	200001b8 	.word	0x200001b8
   136b4:	000138a1 	.word	0x000138a1
   136b8:	20008f68 	.word	0x20008f68

000136bc <_ZN15Holt_3593_Class9Send_ByteEh>:
	}
	return rev;
}

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   136bc:	b580      	push	{r7, lr}
   136be:	b082      	sub	sp, #8
   136c0:	af00      	add	r7, sp, #0
   136c2:	6078      	str	r0, [r7, #4]
   136c4:	460b      	mov	r3, r1
   136c6:	70fb      	strb	r3, [r7, #3]
	while (!spi.isSPIReady()); 
   136c8:	687b      	ldr	r3, [r7, #4]
   136ca:	4618      	mov	r0, r3
   136cc:	4b0f      	ldr	r3, [pc, #60]	; (1370c <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   136ce:	4798      	blx	r3
   136d0:	4603      	mov	r3, r0
   136d2:	f083 0301 	eor.w	r3, r3, #1
   136d6:	b2db      	uxtb	r3, r3
   136d8:	2b00      	cmp	r3, #0
   136da:	d000      	beq.n	136de <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
   136dc:	e7f4      	b.n	136c8 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.write(&byte,1);
   136de:	687b      	ldr	r3, [r7, #4]
   136e0:	1cf9      	adds	r1, r7, #3
   136e2:	2201      	movs	r2, #1
   136e4:	4618      	mov	r0, r3
   136e6:	4b0a      	ldr	r3, [pc, #40]	; (13710 <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
   136e8:	4798      	blx	r3
	while (!spi.isSPIReady());  
   136ea:	687b      	ldr	r3, [r7, #4]
   136ec:	4618      	mov	r0, r3
   136ee:	4b07      	ldr	r3, [pc, #28]	; (1370c <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   136f0:	4798      	blx	r3
   136f2:	4603      	mov	r3, r0
   136f4:	f083 0301 	eor.w	r3, r3, #1
   136f8:	b2db      	uxtb	r3, r3
   136fa:	2b00      	cmp	r3, #0
   136fc:	d000      	beq.n	13700 <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
   136fe:	e7f4      	b.n	136ea <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
   13700:	78fb      	ldrb	r3, [r7, #3]
}
   13702:	4618      	mov	r0, r3
   13704:	3708      	adds	r7, #8
   13706:	46bd      	mov	sp, r7
   13708:	bd80      	pop	{r7, pc}
   1370a:	bf00      	nop
   1370c:	00015051 	.word	0x00015051
   13710:	00014fa9 	.word	0x00014fa9

00013714 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   13714:	b580      	push	{r7, lr}
   13716:	b084      	sub	sp, #16
   13718:	af00      	add	r7, sp, #0
   1371a:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.isSPIReady());
   1371c:	687b      	ldr	r3, [r7, #4]
   1371e:	4618      	mov	r0, r3
   13720:	4b0f      	ldr	r3, [pc, #60]	; (13760 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   13722:	4798      	blx	r3
   13724:	4603      	mov	r3, r0
   13726:	f083 0301 	eor.w	r3, r3, #1
   1372a:	b2db      	uxtb	r3, r3
   1372c:	2b00      	cmp	r3, #0
   1372e:	d000      	beq.n	13732 <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
   13730:	e7f4      	b.n	1371c <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.read(&byte,1);
   13732:	687b      	ldr	r3, [r7, #4]
   13734:	f107 010f 	add.w	r1, r7, #15
   13738:	2201      	movs	r2, #1
   1373a:	4618      	mov	r0, r3
   1373c:	4b09      	ldr	r3, [pc, #36]	; (13764 <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
   1373e:	4798      	blx	r3
	while (!spi.isSPIReady());
   13740:	687b      	ldr	r3, [r7, #4]
   13742:	4618      	mov	r0, r3
   13744:	4b06      	ldr	r3, [pc, #24]	; (13760 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   13746:	4798      	blx	r3
   13748:	4603      	mov	r3, r0
   1374a:	f083 0301 	eor.w	r3, r3, #1
   1374e:	b2db      	uxtb	r3, r3
   13750:	2b00      	cmp	r3, #0
   13752:	d000      	beq.n	13756 <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
   13754:	e7f4      	b.n	13740 <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
   13756:	7bfb      	ldrb	r3, [r7, #15]
}	
   13758:	4618      	mov	r0, r3
   1375a:	3710      	adds	r7, #16
   1375c:	46bd      	mov	sp, r7
   1375e:	bd80      	pop	{r7, pc}
   13760:	00015051 	.word	0x00015051
   13764:	00014fed 	.word	0x00014fed

00013768 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   13768:	b580      	push	{r7, lr}
   1376a:	b084      	sub	sp, #16
   1376c:	af00      	add	r7, sp, #0
   1376e:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   13770:	6878      	ldr	r0, [r7, #4]
   13772:	4b14      	ldr	r3, [pc, #80]	; (137c4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
   13774:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   13776:	2201      	movs	r2, #1
   13778:	2128      	movs	r1, #40	; 0x28
   1377a:	6878      	ldr	r0, [r7, #4]
   1377c:	4b12      	ldr	r3, [pc, #72]	; (137c8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   1377e:	4798      	blx	r3
   13780:	4603      	mov	r3, r0
   13782:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   13784:	231f      	movs	r3, #31
   13786:	73fb      	strb	r3, [r7, #15]
   13788:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1378c:	2b00      	cmp	r3, #0
   1378e:	db11      	blt.n	137b4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   13790:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13794:	4a0d      	ldr	r2, [pc, #52]	; (137cc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
   13796:	5cd3      	ldrb	r3, [r2, r3]
   13798:	2201      	movs	r2, #1
   1379a:	4619      	mov	r1, r3
   1379c:	6878      	ldr	r0, [r7, #4]
   1379e:	4b0a      	ldr	r3, [pc, #40]	; (137c8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   137a0:	4798      	blx	r3
   137a2:	4603      	mov	r3, r0
   137a4:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   137a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
   137aa:	b2db      	uxtb	r3, r3
   137ac:	3b01      	subs	r3, #1
   137ae:	b2db      	uxtb	r3, r3
   137b0:	73fb      	strb	r3, [r7, #15]
   137b2:	e7e9      	b.n	13788 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
   137b4:	6878      	ldr	r0, [r7, #4]
   137b6:	4b06      	ldr	r3, [pc, #24]	; (137d0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
   137b8:	4798      	blx	r3
}
   137ba:	bf00      	nop
   137bc:	3710      	adds	r7, #16
   137be:	46bd      	mov	sp, r7
   137c0:	bd80      	pop	{r7, pc}
   137c2:	bf00      	nop
   137c4:	00013549 	.word	0x00013549
   137c8:	00013599 	.word	0x00013599
   137cc:	20008f48 	.word	0x20008f48
   137d0:	00013571 	.word	0x00013571

000137d4 <_ZN15Holt_3593_Class9ArincReadEhPh>:
// ------------------------------------------------------
// Fetch the FIFO ARINC data from the desired receiver channel 
//
// ------------------------------------------------------
void Holt_3593_Class::ArincRead(uint8_t source, unsigned char *passedArray)
{
   137d4:	b580      	push	{r7, lr}
   137d6:	b086      	sub	sp, #24
   137d8:	af00      	add	r7, sp, #0
   137da:	60f8      	str	r0, [r7, #12]
   137dc:	460b      	mov	r3, r1
   137de:	607a      	str	r2, [r7, #4]
   137e0:	72fb      	strb	r3, [r7, #11]
   uint8_t dummy, ByteCount, count;
   
   count = 3;                // assume it's a Priority Label Word?
   137e2:	2303      	movs	r3, #3
   137e4:	75bb      	strb	r3, [r7, #22]
   if(source==0xA0 || source == 0xC0){  // is it a normal Word?
   137e6:	7afb      	ldrb	r3, [r7, #11]
   137e8:	2ba0      	cmp	r3, #160	; 0xa0
   137ea:	d002      	beq.n	137f2 <_ZN15Holt_3593_Class9ArincReadEhPh+0x1e>
   137ec:	7afb      	ldrb	r3, [r7, #11]
   137ee:	2bc0      	cmp	r3, #192	; 0xc0
   137f0:	d102      	bne.n	137f8 <_ZN15Holt_3593_Class9ArincReadEhPh+0x24>
       count++;								 // then it has 4 bytes.
   137f2:	7dbb      	ldrb	r3, [r7, #22]
   137f4:	3301      	adds	r3, #1
   137f6:	75bb      	strb	r3, [r7, #22]
	   }                        
  open();
   137f8:	68f8      	ldr	r0, [r7, #12]
   137fa:	4b11      	ldr	r3, [pc, #68]	; (13840 <_ZN15Holt_3593_Class9ArincReadEhPh+0x6c>)
   137fc:	4798      	blx	r3
  // dummy = Get_Byte();                   // clear SPI status register    
   Send_Byte(source) ;                  // source command to read FIFO data
   137fe:	7afb      	ldrb	r3, [r7, #11]
   13800:	4619      	mov	r1, r3
   13802:	68f8      	ldr	r0, [r7, #12]
   13804:	4b0f      	ldr	r3, [pc, #60]	; (13844 <_ZN15Holt_3593_Class9ArincReadEhPh+0x70>)
   13806:	4798      	blx	r3
   
 //  dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   13808:	2300      	movs	r3, #0
   1380a:	75fb      	strb	r3, [r7, #23]
   1380c:	7dfa      	ldrb	r2, [r7, #23]
   1380e:	7dbb      	ldrb	r3, [r7, #22]
   13810:	429a      	cmp	r2, r3
   13812:	da0d      	bge.n	13830 <_ZN15Holt_3593_Class9ArincReadEhPh+0x5c>
      dummy = Get_Byte(); 
   13814:	68f8      	ldr	r0, [r7, #12]
   13816:	4b0c      	ldr	r3, [pc, #48]	; (13848 <_ZN15Holt_3593_Class9ArincReadEhPh+0x74>)
   13818:	4798      	blx	r3
   1381a:	4603      	mov	r3, r0
   1381c:	757b      	strb	r3, [r7, #21]
      passedArray[ByteCount] = dummy; 
   1381e:	7dfb      	ldrb	r3, [r7, #23]
   13820:	687a      	ldr	r2, [r7, #4]
   13822:	4413      	add	r3, r2
   13824:	7d7a      	ldrb	r2, [r7, #21]
   13826:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   13828:	7dfb      	ldrb	r3, [r7, #23]
   1382a:	3301      	adds	r3, #1
   1382c:	75fb      	strb	r3, [r7, #23]
   1382e:	e7ed      	b.n	1380c <_ZN15Holt_3593_Class9ArincReadEhPh+0x38>
     }

  close();
   13830:	68f8      	ldr	r0, [r7, #12]
   13832:	4b06      	ldr	r3, [pc, #24]	; (1384c <_ZN15Holt_3593_Class9ArincReadEhPh+0x78>)
   13834:	4798      	blx	r3
  
}
   13836:	bf00      	nop
   13838:	3718      	adds	r7, #24
   1383a:	46bd      	mov	sp, r7
   1383c:	bd80      	pop	{r7, pc}
   1383e:	bf00      	nop
   13840:	00013549 	.word	0x00013549
   13844:	000136bd 	.word	0x000136bd
   13848:	00013715 	.word	0x00013715
   1384c:	00013571 	.word	0x00013571

00013850 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   13850:	b580      	push	{r7, lr}
   13852:	b084      	sub	sp, #16
   13854:	af00      	add	r7, sp, #0
   13856:	6078      	str	r0, [r7, #4]
   13858:	460b      	mov	r3, r1
   1385a:	70fb      	strb	r3, [r7, #3]
   1385c:	4613      	mov	r3, r2
   1385e:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   13860:	78fb      	ldrb	r3, [r7, #3]
   13862:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   13864:	7bfb      	ldrb	r3, [r7, #15]
   13866:	4619      	mov	r1, r3
   13868:	6878      	ldr	r0, [r7, #4]
   1386a:	4b0b      	ldr	r3, [pc, #44]	; (13898 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
   1386c:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   1386e:	78bb      	ldrb	r3, [r7, #2]
   13870:	2b00      	cmp	r3, #0
   13872:	d00a      	beq.n	1388a <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.isSPIReady());      
   13874:	687b      	ldr	r3, [r7, #4]
   13876:	4618      	mov	r0, r3
   13878:	4b08      	ldr	r3, [pc, #32]	; (1389c <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
   1387a:	4798      	blx	r3
   1387c:	4603      	mov	r3, r0
   1387e:	f083 0301 	eor.w	r3, r3, #1
   13882:	b2db      	uxtb	r3, r3
   13884:	2b00      	cmp	r3, #0
   13886:	d000      	beq.n	1388a <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
   13888:	e7f4      	b.n	13874 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
   1388a:	78fb      	ldrb	r3, [r7, #3]
   1388c:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
   1388e:	7bbb      	ldrb	r3, [r7, #14]
  
 }
   13890:	4618      	mov	r0, r3
   13892:	3710      	adds	r7, #16
   13894:	46bd      	mov	sp, r7
   13896:	bd80      	pop	{r7, pc}
   13898:	000136bd 	.word	0x000136bd
   1389c:	00015051 	.word	0x00015051

000138a0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
   138a0:	b580      	push	{r7, lr}
   138a2:	b084      	sub	sp, #16
   138a4:	af00      	add	r7, sp, #0
   138a6:	60f8      	str	r0, [r7, #12]
   138a8:	460b      	mov	r3, r1
   138aa:	607a      	str	r2, [r7, #4]
   138ac:	72fb      	strb	r3, [r7, #11]
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
   138ae:	68f8      	ldr	r0, [r7, #12]
   138b0:	4b20      	ldr	r3, [pc, #128]	; (13934 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x94>)
   138b2:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   138b4:	4b20      	ldr	r3, [pc, #128]	; (13938 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   138b6:	2204      	movs	r2, #4
   138b8:	701a      	strb	r2, [r3, #0]
   if(cmd==W_PL1Match || cmd==W_PL2Match){       // if writing PL Match registers send only 3 bytes
   138ba:	7afb      	ldrb	r3, [r7, #11]
   138bc:	2b18      	cmp	r3, #24
   138be:	d002      	beq.n	138c6 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x26>
   138c0:	7afb      	ldrb	r3, [r7, #11]
   138c2:	2b2c      	cmp	r3, #44	; 0x2c
   138c4:	d105      	bne.n	138d2 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x32>
      transmitCount--;
   138c6:	4b1c      	ldr	r3, [pc, #112]	; (13938 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   138c8:	781b      	ldrb	r3, [r3, #0]
   138ca:	3b01      	subs	r3, #1
   138cc:	b2da      	uxtb	r2, r3
   138ce:	4b1a      	ldr	r3, [pc, #104]	; (13938 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   138d0:	701a      	strb	r2, [r3, #0]
   }
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
   138d2:	7afb      	ldrb	r3, [r7, #11]
   138d4:	2201      	movs	r2, #1
   138d6:	4619      	mov	r1, r3
   138d8:	68f8      	ldr	r0, [r7, #12]
   138da:	4b18      	ldr	r3, [pc, #96]	; (1393c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   138dc:	4798      	blx	r3
   138de:	4603      	mov	r3, r0
   138e0:	461a      	mov	r2, r3
   138e2:	4b17      	ldr	r3, [pc, #92]	; (13940 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   138e4:	701a      	strb	r2, [r3, #0]

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   138e6:	4b17      	ldr	r3, [pc, #92]	; (13944 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   138e8:	2200      	movs	r2, #0
   138ea:	701a      	strb	r2, [r3, #0]
   138ec:	4b15      	ldr	r3, [pc, #84]	; (13944 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   138ee:	781b      	ldrb	r3, [r3, #0]
   138f0:	461a      	mov	r2, r3
   138f2:	4b11      	ldr	r3, [pc, #68]	; (13938 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   138f4:	781b      	ldrb	r3, [r3, #0]
   138f6:	429a      	cmp	r2, r3
   138f8:	da15      	bge.n	13926 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x86>
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   138fa:	4b12      	ldr	r3, [pc, #72]	; (13944 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   138fc:	781b      	ldrb	r3, [r3, #0]
   138fe:	461a      	mov	r2, r3
   13900:	687b      	ldr	r3, [r7, #4]
   13902:	4413      	add	r3, r2
   13904:	781b      	ldrb	r3, [r3, #0]
   13906:	2201      	movs	r2, #1
   13908:	4619      	mov	r1, r3
   1390a:	68f8      	ldr	r0, [r7, #12]
   1390c:	4b0b      	ldr	r3, [pc, #44]	; (1393c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   1390e:	4798      	blx	r3
   13910:	4603      	mov	r3, r0
   13912:	461a      	mov	r2, r3
   13914:	4b0a      	ldr	r3, [pc, #40]	; (13940 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   13916:	701a      	strb	r2, [r3, #0]
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   13918:	4b0a      	ldr	r3, [pc, #40]	; (13944 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   1391a:	781b      	ldrb	r3, [r3, #0]
   1391c:	3301      	adds	r3, #1
   1391e:	b2da      	uxtb	r2, r3
   13920:	4b08      	ldr	r3, [pc, #32]	; (13944 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   13922:	701a      	strb	r2, [r3, #0]
   13924:	e7e2      	b.n	138ec <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x4c>
      }   
 close();
   13926:	68f8      	ldr	r0, [r7, #12]
   13928:	4b07      	ldr	r3, [pc, #28]	; (13948 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa8>)
   1392a:	4798      	blx	r3
}
   1392c:	bf00      	nop
   1392e:	3710      	adds	r7, #16
   13930:	46bd      	mov	sp, r7
   13932:	bd80      	pop	{r7, pc}
   13934:	00013549 	.word	0x00013549
   13938:	20008f6d 	.word	0x20008f6d
   1393c:	00013851 	.word	0x00013851
   13940:	20008f6c 	.word	0x20008f6c
   13944:	20008f6b 	.word	0x20008f6b
   13948:	00013571 	.word	0x00013571

0001394c <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   1394c:	b580      	push	{r7, lr}
   1394e:	b084      	sub	sp, #16
   13950:	af00      	add	r7, sp, #0
   13952:	6078      	str	r0, [r7, #4]
   13954:	460b      	mov	r3, r1
   13956:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
   13958:	78fb      	ldrb	r3, [r7, #3]
   1395a:	73fb      	strb	r3, [r7, #15]
  open();
   1395c:	6878      	ldr	r0, [r7, #4]
   1395e:	4b0c      	ldr	r3, [pc, #48]	; (13990 <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
   13960:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   13962:	7bfb      	ldrb	r3, [r7, #15]
   13964:	4619      	mov	r1, r3
   13966:	6878      	ldr	r0, [r7, #4]
   13968:	4b0a      	ldr	r3, [pc, #40]	; (13994 <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
   1396a:	4798      	blx	r3
  while (!spi.isSPIReady()) {;}      // Wait for data to come back in.
   1396c:	687b      	ldr	r3, [r7, #4]
   1396e:	4618      	mov	r0, r3
   13970:	4b09      	ldr	r3, [pc, #36]	; (13998 <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
   13972:	4798      	blx	r3
   13974:	4603      	mov	r3, r0
   13976:	f083 0301 	eor.w	r3, r3, #1
   1397a:	b2db      	uxtb	r3, r3
   1397c:	2b00      	cmp	r3, #0
   1397e:	d000      	beq.n	13982 <_ZN15Holt_3593_Class9W_CommandEc+0x36>
   13980:	e7f4      	b.n	1396c <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   13982:	6878      	ldr	r0, [r7, #4]
   13984:	4b05      	ldr	r3, [pc, #20]	; (1399c <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
   13986:	4798      	blx	r3
}
   13988:	bf00      	nop
   1398a:	3710      	adds	r7, #16
   1398c:	46bd      	mov	sp, r7
   1398e:	bd80      	pop	{r7, pc}
   13990:	00013549 	.word	0x00013549
   13994:	000136bd 	.word	0x000136bd
   13998:	00015051 	.word	0x00015051
   1399c:	00013571 	.word	0x00013571

000139a0 <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   139a0:	b580      	push	{r7, lr}
   139a2:	b082      	sub	sp, #8
   139a4:	af00      	add	r7, sp, #0
   139a6:	6078      	str	r0, [r7, #4]
   139a8:	460b      	mov	r3, r1
   139aa:	70fb      	strb	r3, [r7, #3]
   139ac:	4613      	mov	r3, r2
   139ae:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
   139b0:	6878      	ldr	r0, [r7, #4]
   139b2:	4b14      	ldr	r3, [pc, #80]	; (13a04 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
   139b4:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   139b6:	78fb      	ldrb	r3, [r7, #3]
   139b8:	4619      	mov	r1, r3
   139ba:	6878      	ldr	r0, [r7, #4]
   139bc:	4b12      	ldr	r3, [pc, #72]	; (13a08 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   139be:	4798      	blx	r3
  while (!spi.isSPIReady());    
   139c0:	687b      	ldr	r3, [r7, #4]
   139c2:	4618      	mov	r0, r3
   139c4:	4b11      	ldr	r3, [pc, #68]	; (13a0c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   139c6:	4798      	blx	r3
   139c8:	4603      	mov	r3, r0
   139ca:	f083 0301 	eor.w	r3, r3, #1
   139ce:	b2db      	uxtb	r3, r3
   139d0:	2b00      	cmp	r3, #0
   139d2:	d000      	beq.n	139d6 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
   139d4:	e7f4      	b.n	139c0 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   139d6:	78bb      	ldrb	r3, [r7, #2]
   139d8:	4619      	mov	r1, r3
   139da:	6878      	ldr	r0, [r7, #4]
   139dc:	4b0a      	ldr	r3, [pc, #40]	; (13a08 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   139de:	4798      	blx	r3
  while (!spi.isSPIReady());    
   139e0:	687b      	ldr	r3, [r7, #4]
   139e2:	4618      	mov	r0, r3
   139e4:	4b09      	ldr	r3, [pc, #36]	; (13a0c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   139e6:	4798      	blx	r3
   139e8:	4603      	mov	r3, r0
   139ea:	f083 0301 	eor.w	r3, r3, #1
   139ee:	b2db      	uxtb	r3, r3
   139f0:	2b00      	cmp	r3, #0
   139f2:	d000      	beq.n	139f6 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
   139f4:	e7f4      	b.n	139e0 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   139f6:	6878      	ldr	r0, [r7, #4]
   139f8:	4b05      	ldr	r3, [pc, #20]	; (13a10 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
   139fa:	4798      	blx	r3
}
   139fc:	bf00      	nop
   139fe:	3708      	adds	r7, #8
   13a00:	46bd      	mov	sp, r7
   13a02:	bd80      	pop	{r7, pc}
   13a04:	00013549 	.word	0x00013549
   13a08:	000136bd 	.word	0x000136bd
   13a0c:	00015051 	.word	0x00015051
   13a10:	00013571 	.word	0x00013571

00013a14 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   13a14:	b580      	push	{r7, lr}
   13a16:	b084      	sub	sp, #16
   13a18:	af00      	add	r7, sp, #0
   13a1a:	6078      	str	r0, [r7, #4]
   13a1c:	460b      	mov	r3, r1
   13a1e:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
   13a20:	6878      	ldr	r0, [r7, #4]
   13a22:	4b0a      	ldr	r3, [pc, #40]	; (13a4c <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
   13a24:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   13a26:	78fb      	ldrb	r3, [r7, #3]
   13a28:	2201      	movs	r2, #1
   13a2a:	4619      	mov	r1, r3
   13a2c:	6878      	ldr	r0, [r7, #4]
   13a2e:	4b08      	ldr	r3, [pc, #32]	; (13a50 <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
   13a30:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   13a32:	6878      	ldr	r0, [r7, #4]
   13a34:	4b07      	ldr	r3, [pc, #28]	; (13a54 <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
   13a36:	4798      	blx	r3
   13a38:	4603      	mov	r3, r0
   13a3a:	73fb      	strb	r3, [r7, #15]
         
  close();
   13a3c:	6878      	ldr	r0, [r7, #4]
   13a3e:	4b06      	ldr	r3, [pc, #24]	; (13a58 <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
   13a40:	4798      	blx	r3
  return R_Reg;
   13a42:	7bfb      	ldrb	r3, [r7, #15]
}
   13a44:	4618      	mov	r0, r3
   13a46:	3710      	adds	r7, #16
   13a48:	46bd      	mov	sp, r7
   13a4a:	bd80      	pop	{r7, pc}
   13a4c:	00013549 	.word	0x00013549
   13a50:	00013851 	.word	0x00013851
   13a54:	00013715 	.word	0x00013715
   13a58:	00013571 	.word	0x00013571

00013a5c <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
   13a5c:	b580      	push	{r7, lr}
   13a5e:	b082      	sub	sp, #8
   13a60:	af00      	add	r7, sp, #0
   13a62:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
   13a64:	2100      	movs	r1, #0
   13a66:	204e      	movs	r0, #78	; 0x4e
   13a68:	4b02      	ldr	r3, [pc, #8]	; (13a74 <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
   13a6a:	4798      	blx	r3
}
   13a6c:	bf00      	nop
   13a6e:	3708      	adds	r7, #8
   13a70:	46bd      	mov	sp, r7
   13a72:	bd80      	pop	{r7, pc}
   13a74:	0001335d 	.word	0x0001335d

00013a78 <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
   13a78:	b580      	push	{r7, lr}
   13a7a:	b082      	sub	sp, #8
   13a7c:	af00      	add	r7, sp, #0
   13a7e:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
   13a80:	2101      	movs	r1, #1
   13a82:	204e      	movs	r0, #78	; 0x4e
   13a84:	4b02      	ldr	r3, [pc, #8]	; (13a90 <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
   13a86:	4798      	blx	r3
}
   13a88:	bf00      	nop
   13a8a:	3708      	adds	r7, #8
   13a8c:	46bd      	mov	sp, r7
   13a8e:	bd80      	pop	{r7, pc}
   13a90:	0001335d 	.word	0x0001335d

00013a94 <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
   13a94:	b480      	push	{r7}
   13a96:	b083      	sub	sp, #12
   13a98:	af00      	add	r7, sp, #0
   13a9a:	6078      	str	r0, [r7, #4]
   13a9c:	6039      	str	r1, [r7, #0]
   13a9e:	683b      	ldr	r3, [r7, #0]
   13aa0:	681a      	ldr	r2, [r3, #0]
   13aa2:	687b      	ldr	r3, [r7, #4]
   13aa4:	601a      	str	r2, [r3, #0]
   13aa6:	687b      	ldr	r3, [r7, #4]
   13aa8:	681b      	ldr	r3, [r3, #0]
   13aaa:	3b0c      	subs	r3, #12
   13aac:	681b      	ldr	r3, [r3, #0]
   13aae:	461a      	mov	r2, r3
   13ab0:	687b      	ldr	r3, [r7, #4]
   13ab2:	4413      	add	r3, r2
   13ab4:	683a      	ldr	r2, [r7, #0]
   13ab6:	6852      	ldr	r2, [r2, #4]
   13ab8:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
   13aba:	687b      	ldr	r3, [r7, #4]
   13abc:	4618      	mov	r0, r3
   13abe:	370c      	adds	r7, #12
   13ac0:	46bd      	mov	sp, r7
   13ac2:	bc80      	pop	{r7}
   13ac4:	4770      	bx	lr

00013ac6 <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   13ac6:	b590      	push	{r4, r7, lr}
   13ac8:	b085      	sub	sp, #20
   13aca:	af00      	add	r7, sp, #0
   13acc:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   13ace:	687b      	ldr	r3, [r7, #4]
   13ad0:	681b      	ldr	r3, [r3, #0]
   13ad2:	3308      	adds	r3, #8
   13ad4:	681c      	ldr	r4, [r3, #0]
   13ad6:	687b      	ldr	r3, [r7, #4]
   13ad8:	681b      	ldr	r3, [r3, #0]
   13ada:	3b0c      	subs	r3, #12
   13adc:	681b      	ldr	r3, [r3, #0]
   13ade:	461a      	mov	r2, r3
   13ae0:	687b      	ldr	r3, [r7, #4]
   13ae2:	4413      	add	r3, r2
   13ae4:	681b      	ldr	r3, [r3, #0]
   13ae6:	3304      	adds	r3, #4
   13ae8:	681b      	ldr	r3, [r3, #0]
   13aea:	687a      	ldr	r2, [r7, #4]
   13aec:	6812      	ldr	r2, [r2, #0]
   13aee:	3a0c      	subs	r2, #12
   13af0:	6812      	ldr	r2, [r2, #0]
   13af2:	4611      	mov	r1, r2
   13af4:	687a      	ldr	r2, [r7, #4]
   13af6:	440a      	add	r2, r1
   13af8:	f44f 7187 	mov.w	r1, #270	; 0x10e
   13afc:	4610      	mov	r0, r2
   13afe:	4798      	blx	r3
   13b00:	4603      	mov	r3, r0
   13b02:	4619      	mov	r1, r3
   13b04:	6878      	ldr	r0, [r7, #4]
   13b06:	47a0      	blx	r4
   13b08:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
   13b0a:	68fb      	ldr	r3, [r7, #12]
   13b0c:	0c9b      	lsrs	r3, r3, #18
   13b0e:	b2db      	uxtb	r3, r3
   13b10:	f003 0303 	and.w	r3, r3, #3
   13b14:	72fb      	strb	r3, [r7, #11]

	return key;
   13b16:	7afb      	ldrb	r3, [r7, #11]
}
   13b18:	4618      	mov	r0, r3
   13b1a:	3714      	adds	r7, #20
   13b1c:	46bd      	mov	sp, r7
   13b1e:	bd90      	pop	{r4, r7, pc}

00013b20 <_ZN14Protocol_Class12MakeLabel374Emf>:
	data=(0x1ffffc00&d)>>10;
	datagram.bit.dataField=data;

	return	data;
}
uint32_t Protocol_Class::MakeLabel374(uint32_t d,float v){
   13b20:	b580      	push	{r7, lr}
   13b22:	b084      	sub	sp, #16
   13b24:	af00      	add	r7, sp, #0
   13b26:	60f8      	str	r0, [r7, #12]
   13b28:	60b9      	str	r1, [r7, #8]
   13b2a:	607a      	str	r2, [r7, #4]
	value=d<<10;
   13b2c:	68bb      	ldr	r3, [r7, #8]
   13b2e:	029a      	lsls	r2, r3, #10
   13b30:	68fb      	ldr	r3, [r7, #12]
   13b32:	60da      	str	r2, [r3, #12]
	label=Label2Byte(374);
   13b34:	68fb      	ldr	r3, [r7, #12]
   13b36:	681b      	ldr	r3, [r3, #0]
   13b38:	3b0c      	subs	r3, #12
   13b3a:	681b      	ldr	r3, [r3, #0]
   13b3c:	461a      	mov	r2, r3
   13b3e:	68fb      	ldr	r3, [r7, #12]
   13b40:	4413      	add	r3, r2
   13b42:	681b      	ldr	r3, [r3, #0]
   13b44:	3304      	adds	r3, #4
   13b46:	681b      	ldr	r3, [r3, #0]
   13b48:	68fa      	ldr	r2, [r7, #12]
   13b4a:	6812      	ldr	r2, [r2, #0]
   13b4c:	3a0c      	subs	r2, #12
   13b4e:	6812      	ldr	r2, [r2, #0]
   13b50:	4611      	mov	r1, r2
   13b52:	68fa      	ldr	r2, [r7, #12]
   13b54:	440a      	add	r2, r1
   13b56:	f44f 71bb 	mov.w	r1, #374	; 0x176
   13b5a:	4610      	mov	r0, r2
   13b5c:	4798      	blx	r3
   13b5e:	4603      	mov	r3, r0
   13b60:	461a      	mov	r2, r3
   13b62:	68fb      	ldr	r3, [r7, #12]
   13b64:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   13b66:	68fb      	ldr	r3, [r7, #12]
   13b68:	68db      	ldr	r3, [r3, #12]
   13b6a:	68fa      	ldr	r2, [r7, #12]
   13b6c:	7c12      	ldrb	r2, [r2, #16]
   13b6e:	431a      	orrs	r2, r3
   13b70:	68fb      	ldr	r3, [r7, #12]
   13b72:	60da      	str	r2, [r3, #12]
	if (v<0)
   13b74:	4b0e      	ldr	r3, [pc, #56]	; (13bb0 <_ZN14Protocol_Class12MakeLabel374Emf+0x90>)
   13b76:	f04f 0100 	mov.w	r1, #0
   13b7a:	6878      	ldr	r0, [r7, #4]
   13b7c:	4798      	blx	r3
   13b7e:	4603      	mov	r3, r0
   13b80:	2b00      	cmp	r3, #0
   13b82:	d005      	beq.n	13b90 <_ZN14Protocol_Class12MakeLabel374Emf+0x70>
	{
		value|=0x1<<28;
   13b84:	68fb      	ldr	r3, [r7, #12]
   13b86:	68db      	ldr	r3, [r3, #12]
   13b88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
   13b8c:	68fb      	ldr	r3, [r7, #12]
   13b8e:	60da      	str	r2, [r3, #12]
	}
	value=MakeEvenParity(value);
   13b90:	68fb      	ldr	r3, [r7, #12]
   13b92:	68db      	ldr	r3, [r3, #12]
   13b94:	4619      	mov	r1, r3
   13b96:	68f8      	ldr	r0, [r7, #12]
   13b98:	4b06      	ldr	r3, [pc, #24]	; (13bb4 <_ZN14Protocol_Class12MakeLabel374Emf+0x94>)
   13b9a:	4798      	blx	r3
   13b9c:	4602      	mov	r2, r0
   13b9e:	68fb      	ldr	r3, [r7, #12]
   13ba0:	60da      	str	r2, [r3, #12]
	return value;
   13ba2:	68fb      	ldr	r3, [r7, #12]
   13ba4:	68db      	ldr	r3, [r3, #12]
	
}
   13ba6:	4618      	mov	r0, r3
   13ba8:	3710      	adds	r7, #16
   13baa:	46bd      	mov	sp, r7
   13bac:	bd80      	pop	{r7, pc}
   13bae:	bf00      	nop
   13bb0:	0001a8cd 	.word	0x0001a8cd
   13bb4:	00013bb9 	.word	0x00013bb9

00013bb8 <_ZN14Protocol_Class14MakeEvenParityEm>:
uint32_t Protocol_Class::MakeEvenParity(uint32_t data){
   13bb8:	b580      	push	{r7, lr}
   13bba:	b082      	sub	sp, #8
   13bbc:	af00      	add	r7, sp, #0
   13bbe:	6078      	str	r0, [r7, #4]
   13bc0:	6039      	str	r1, [r7, #0]
	if (FindParity(data))
   13bc2:	687b      	ldr	r3, [r7, #4]
   13bc4:	681b      	ldr	r3, [r3, #0]
   13bc6:	3b0c      	subs	r3, #12
   13bc8:	681b      	ldr	r3, [r3, #0]
   13bca:	461a      	mov	r2, r3
   13bcc:	687b      	ldr	r3, [r7, #4]
   13bce:	4413      	add	r3, r2
   13bd0:	6839      	ldr	r1, [r7, #0]
   13bd2:	4618      	mov	r0, r3
   13bd4:	4b06      	ldr	r3, [pc, #24]	; (13bf0 <_ZN14Protocol_Class14MakeEvenParityEm+0x38>)
   13bd6:	4798      	blx	r3
   13bd8:	4603      	mov	r3, r0
   13bda:	2b00      	cmp	r3, #0
   13bdc:	d003      	beq.n	13be6 <_ZN14Protocol_Class14MakeEvenParityEm+0x2e>
	{
		data|=0x01<<31;
   13bde:	683b      	ldr	r3, [r7, #0]
   13be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13be4:	603b      	str	r3, [r7, #0]
	} 
	else
	{
		
	}
	return data;
   13be6:	683b      	ldr	r3, [r7, #0]
   13be8:	4618      	mov	r0, r3
   13bea:	3708      	adds	r7, #8
   13bec:	46bd      	mov	sp, r7
   13bee:	bd80      	pop	{r7, pc}
   13bf0:	000128b1 	.word	0x000128b1

00013bf4 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   13bf4:	b480      	push	{r7}
   13bf6:	b083      	sub	sp, #12
   13bf8:	af00      	add	r7, sp, #0
   13bfa:	6078      	str	r0, [r7, #4]
    return (void *)0;
   13bfc:	2300      	movs	r3, #0
	}
   13bfe:	4618      	mov	r0, r3
   13c00:	370c      	adds	r7, #12
   13c02:	46bd      	mov	sp, r7
   13c04:	bc80      	pop	{r7}
   13c06:	4770      	bx	lr

00013c08 <free>:
//............................................................................
extern "C" void free(void *)
	{
   13c08:	b480      	push	{r7}
   13c0a:	b083      	sub	sp, #12
   13c0c:	af00      	add	r7, sp, #0
   13c0e:	6078      	str	r0, [r7, #4]
	}
   13c10:	bf00      	nop
   13c12:	370c      	adds	r7, #12
   13c14:	46bd      	mov	sp, r7
   13c16:	bc80      	pop	{r7}
   13c18:	4770      	bx	lr

00013c1a <_sbrk>:

extern "C" void *_sbrk (ptrdiff_t)
	{
   13c1a:	b480      	push	{r7}
   13c1c:	b083      	sub	sp, #12
   13c1e:	af00      	add	r7, sp, #0
   13c20:	6078      	str	r0, [r7, #4]
    return (void *)0;
   13c22:	2300      	movs	r3, #0
	}
   13c24:	4618      	mov	r0, r3
   13c26:	370c      	adds	r7, #12
   13c28:	46bd      	mov	sp, r7
   13c2a:	bc80      	pop	{r7}
   13c2c:	4770      	bx	lr

00013c2e <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   13c2e:	b480      	push	{r7}
   13c30:	af00      	add	r7, sp, #0
		}
   13c32:	bf00      	nop
   13c34:	46bd      	mov	sp, r7
   13c36:	bc80      	pop	{r7}
   13c38:	4770      	bx	lr
	...

00013c3c <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   13c3c:	b580      	push	{r7, lr}
   13c3e:	b082      	sub	sp, #8
   13c40:	af00      	add	r7, sp, #0
   13c42:	6078      	str	r0, [r7, #4]
	free(p);
   13c44:	6878      	ldr	r0, [r7, #4]
   13c46:	4b03      	ldr	r3, [pc, #12]	; (13c54 <_ZdlPv+0x18>)
   13c48:	4798      	blx	r3
	}
   13c4a:	bf00      	nop
   13c4c:	3708      	adds	r7, #8
   13c4e:	46bd      	mov	sp, r7
   13c50:	bd80      	pop	{r7, pc}
   13c52:	bf00      	nop
   13c54:	00013c09 	.word	0x00013c09

00013c58 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
   13c58:	b480      	push	{r7}
   13c5a:	b083      	sub	sp, #12
   13c5c:	af00      	add	r7, sp, #0
   13c5e:	6078      	str	r0, [r7, #4]
   13c60:	687b      	ldr	r3, [r7, #4]
   13c62:	4618      	mov	r0, r3
   13c64:	370c      	adds	r7, #12
   13c66:	46bd      	mov	sp, r7
   13c68:	bc80      	pop	{r7}
   13c6a:	4770      	bx	lr

00013c6c <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
   13c6c:	b480      	push	{r7}
   13c6e:	b083      	sub	sp, #12
   13c70:	af00      	add	r7, sp, #0
   13c72:	6078      	str	r0, [r7, #4]
   13c74:	687b      	ldr	r3, [r7, #4]
   13c76:	4618      	mov	r0, r3
   13c78:	370c      	adds	r7, #12
   13c7a:	46bd      	mov	sp, r7
   13c7c:	bc80      	pop	{r7}
   13c7e:	4770      	bx	lr

00013c80 <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
   13c80:	b580      	push	{r7, lr}
   13c82:	b084      	sub	sp, #16
   13c84:	af00      	add	r7, sp, #0
   13c86:	6078      	str	r0, [r7, #4]
   13c88:	460b      	mov	r3, r1
   13c8a:	70fb      	strb	r3, [r7, #3]
   13c8c:	4613      	mov	r3, r2
   13c8e:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
   13c90:	687b      	ldr	r3, [r7, #4]
   13c92:	78fa      	ldrb	r2, [r7, #3]
   13c94:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
   13c96:	78bb      	ldrb	r3, [r7, #2]
   13c98:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
   13c9a:	7bfb      	ldrb	r3, [r7, #15]
   13c9c:	2b00      	cmp	r3, #0
   13c9e:	f000 80ba 	beq.w	13e16 <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
   13ca2:	78fb      	ldrb	r3, [r7, #3]
   13ca4:	2b14      	cmp	r3, #20
   13ca6:	f200 80a2 	bhi.w	13dee <_ZN11Diagnostics12troubleshootEhb+0x16e>
   13caa:	a201      	add	r2, pc, #4	; (adr r2, 13cb0 <_ZN11Diagnostics12troubleshootEhb+0x30>)
   13cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13cb0:	00013d05 	.word	0x00013d05
   13cb4:	00013d19 	.word	0x00013d19
   13cb8:	00013d23 	.word	0x00013d23
   13cbc:	00013d2d 	.word	0x00013d2d
   13cc0:	00013d37 	.word	0x00013d37
   13cc4:	00013d49 	.word	0x00013d49
   13cc8:	00013d53 	.word	0x00013d53
   13ccc:	00013d65 	.word	0x00013d65
   13cd0:	00013d77 	.word	0x00013d77
   13cd4:	00013d8b 	.word	0x00013d8b
   13cd8:	00013d95 	.word	0x00013d95
   13cdc:	00013d0f 	.word	0x00013d0f
   13ce0:	00013d81 	.word	0x00013d81
   13ce4:	00013d9f 	.word	0x00013d9f
   13ce8:	00013da9 	.word	0x00013da9
   13cec:	00013db3 	.word	0x00013db3
   13cf0:	00013dbd 	.word	0x00013dbd
   13cf4:	00013dc7 	.word	0x00013dc7
   13cf8:	00013dd1 	.word	0x00013dd1
   13cfc:	00013ddb 	.word	0x00013ddb
   13d00:	00013de5 	.word	0x00013de5
      case SUCCESS:
      usb.println(F("Function executed successfully"));
   13d04:	4946      	ldr	r1, [pc, #280]	; (13e20 <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
   13d06:	4847      	ldr	r0, [pc, #284]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d08:	4b47      	ldr	r3, [pc, #284]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d0a:	4798      	blx	r3
      break;
   13d0c:	e074      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
   13d0e:	4947      	ldr	r1, [pc, #284]	; (13e2c <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
   13d10:	4844      	ldr	r0, [pc, #272]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d12:	4b45      	ldr	r3, [pc, #276]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d14:	4798      	blx	r3
      break;
   13d16:	e06f      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
   13d18:	4945      	ldr	r1, [pc, #276]	; (13e30 <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
   13d1a:	4842      	ldr	r0, [pc, #264]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d1c:	4b42      	ldr	r3, [pc, #264]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d1e:	4798      	blx	r3
      break;
   13d20:	e06a      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
   13d22:	4944      	ldr	r1, [pc, #272]	; (13e34 <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
   13d24:	483f      	ldr	r0, [pc, #252]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d26:	4b40      	ldr	r3, [pc, #256]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d28:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
   13d2a:	e065      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
   13d2c:	4942      	ldr	r1, [pc, #264]	; (13e38 <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
   13d2e:	483d      	ldr	r0, [pc, #244]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d30:	4b3d      	ldr	r3, [pc, #244]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d32:	4798      	blx	r3
      break;
   13d34:	e060      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
   13d36:	4941      	ldr	r1, [pc, #260]	; (13e3c <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
   13d38:	483a      	ldr	r0, [pc, #232]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d3a:	4b3b      	ldr	r3, [pc, #236]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d3c:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
   13d3e:	4940      	ldr	r1, [pc, #256]	; (13e40 <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
   13d40:	4838      	ldr	r0, [pc, #224]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d42:	4b39      	ldr	r3, [pc, #228]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d44:	4798      	blx	r3
      break;
   13d46:	e057      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
   13d48:	493e      	ldr	r1, [pc, #248]	; (13e44 <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
   13d4a:	4836      	ldr	r0, [pc, #216]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d4c:	4b36      	ldr	r3, [pc, #216]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d4e:	4798      	blx	r3
      break;
   13d50:	e052      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
   13d52:	493d      	ldr	r1, [pc, #244]	; (13e48 <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
   13d54:	4833      	ldr	r0, [pc, #204]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d56:	4b34      	ldr	r3, [pc, #208]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d58:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
   13d5a:	493c      	ldr	r1, [pc, #240]	; (13e4c <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
   13d5c:	4831      	ldr	r0, [pc, #196]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d5e:	4b32      	ldr	r3, [pc, #200]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d60:	4798      	blx	r3
      break;
   13d62:	e049      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
   13d64:	493a      	ldr	r1, [pc, #232]	; (13e50 <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
   13d66:	482f      	ldr	r0, [pc, #188]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d68:	4b2f      	ldr	r3, [pc, #188]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d6a:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
   13d6c:	4939      	ldr	r1, [pc, #228]	; (13e54 <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
   13d6e:	482d      	ldr	r0, [pc, #180]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d70:	4b2d      	ldr	r3, [pc, #180]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d72:	4798      	blx	r3
      break;
   13d74:	e040      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
   13d76:	4938      	ldr	r1, [pc, #224]	; (13e58 <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
   13d78:	482a      	ldr	r0, [pc, #168]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d7a:	4b2b      	ldr	r3, [pc, #172]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d7c:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
   13d7e:	e03b      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
   13d80:	4936      	ldr	r1, [pc, #216]	; (13e5c <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
   13d82:	4828      	ldr	r0, [pc, #160]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d84:	4b28      	ldr	r3, [pc, #160]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d86:	4798      	blx	r3
      break;
   13d88:	e036      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
   13d8a:	4935      	ldr	r1, [pc, #212]	; (13e60 <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
   13d8c:	4825      	ldr	r0, [pc, #148]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d8e:	4b26      	ldr	r3, [pc, #152]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d90:	4798      	blx	r3
      break;
   13d92:	e031      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
   13d94:	4933      	ldr	r1, [pc, #204]	; (13e64 <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
   13d96:	4823      	ldr	r0, [pc, #140]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13d98:	4b23      	ldr	r3, [pc, #140]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13d9a:	4798      	blx	r3
      break;
   13d9c:	e02c      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
   13d9e:	4932      	ldr	r1, [pc, #200]	; (13e68 <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
   13da0:	4820      	ldr	r0, [pc, #128]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13da2:	4b21      	ldr	r3, [pc, #132]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13da4:	4798      	blx	r3
      break;
   13da6:	e027      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
   13da8:	4930      	ldr	r1, [pc, #192]	; (13e6c <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
   13daa:	481e      	ldr	r0, [pc, #120]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13dac:	4b1e      	ldr	r3, [pc, #120]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13dae:	4798      	blx	r3
      break;
   13db0:	e022      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
   13db2:	492f      	ldr	r1, [pc, #188]	; (13e70 <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
   13db4:	481b      	ldr	r0, [pc, #108]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13db6:	4b1c      	ldr	r3, [pc, #112]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13db8:	4798      	blx	r3
      break;
   13dba:	e01d      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
   13dbc:	492d      	ldr	r1, [pc, #180]	; (13e74 <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
   13dbe:	4819      	ldr	r0, [pc, #100]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13dc0:	4b19      	ldr	r3, [pc, #100]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13dc2:	4798      	blx	r3
      break;
   13dc4:	e018      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
   13dc6:	492c      	ldr	r1, [pc, #176]	; (13e78 <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
   13dc8:	4816      	ldr	r0, [pc, #88]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13dca:	4b17      	ldr	r3, [pc, #92]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13dcc:	4798      	blx	r3
      break;
   13dce:	e013      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
   13dd0:	492a      	ldr	r1, [pc, #168]	; (13e7c <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
   13dd2:	4814      	ldr	r0, [pc, #80]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13dd4:	4b14      	ldr	r3, [pc, #80]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13dd6:	4798      	blx	r3
      break;
   13dd8:	e00e      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
   13dda:	4929      	ldr	r1, [pc, #164]	; (13e80 <_ZN11Diagnostics12troubleshootEhb+0x200>)
   13ddc:	4811      	ldr	r0, [pc, #68]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13dde:	4b12      	ldr	r3, [pc, #72]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13de0:	4798      	blx	r3
      break;
   13de2:	e009      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
   13de4:	4927      	ldr	r1, [pc, #156]	; (13e84 <_ZN11Diagnostics12troubleshootEhb+0x204>)
   13de6:	480f      	ldr	r0, [pc, #60]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13de8:	4b0f      	ldr	r3, [pc, #60]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13dea:	4798      	blx	r3
      break;
   13dec:	e004      	b.n	13df8 <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
   13dee:	4926      	ldr	r1, [pc, #152]	; (13e88 <_ZN11Diagnostics12troubleshootEhb+0x208>)
   13df0:	480c      	ldr	r0, [pc, #48]	; (13e24 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   13df2:	4b0d      	ldr	r3, [pc, #52]	; (13e28 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   13df4:	4798      	blx	r3
      break;
   13df6:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
   13df8:	78fb      	ldrb	r3, [r7, #3]
   13dfa:	2b0a      	cmp	r3, #10
   13dfc:	d008      	beq.n	13e10 <_ZN11Diagnostics12troubleshootEhb+0x190>
   13dfe:	78fb      	ldrb	r3, [r7, #3]
   13e00:	2b06      	cmp	r3, #6
   13e02:	d005      	beq.n	13e10 <_ZN11Diagnostics12troubleshootEhb+0x190>
   13e04:	78fb      	ldrb	r3, [r7, #3]
   13e06:	2b02      	cmp	r3, #2
   13e08:	d002      	beq.n	13e10 <_ZN11Diagnostics12troubleshootEhb+0x190>
   13e0a:	78fb      	ldrb	r3, [r7, #3]
   13e0c:	2b0b      	cmp	r3, #11
   13e0e:	d102      	bne.n	13e16 <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
   13e10:	6878      	ldr	r0, [r7, #4]
   13e12:	4b1e      	ldr	r3, [pc, #120]	; (13e8c <_ZN11Diagnostics12troubleshootEhb+0x20c>)
   13e14:	4798      	blx	r3
    }
  #endif
  }
}
   13e16:	bf00      	nop
   13e18:	3710      	adds	r7, #16
   13e1a:	46bd      	mov	sp, r7
   13e1c:	bd80      	pop	{r7, pc}
   13e1e:	bf00      	nop
   13e20:	00020420 	.word	0x00020420
   13e24:	20009e88 	.word	0x20009e88
   13e28:	000173b9 	.word	0x000173b9
   13e2c:	00020440 	.word	0x00020440
   13e30:	00020474 	.word	0x00020474
   13e34:	000204b4 	.word	0x000204b4
   13e38:	000204f4 	.word	0x000204f4
   13e3c:	0002058c 	.word	0x0002058c
   13e40:	0002059c 	.word	0x0002059c
   13e44:	000205cc 	.word	0x000205cc
   13e48:	00020618 	.word	0x00020618
   13e4c:	0002063c 	.word	0x0002063c
   13e50:	00020680 	.word	0x00020680
   13e54:	000206a4 	.word	0x000206a4
   13e58:	000206e0 	.word	0x000206e0
   13e5c:	00020730 	.word	0x00020730
   13e60:	00020770 	.word	0x00020770
   13e64:	00020794 	.word	0x00020794
   13e68:	000207bc 	.word	0x000207bc
   13e6c:	000207e0 	.word	0x000207e0
   13e70:	00020808 	.word	0x00020808
   13e74:	0002082c 	.word	0x0002082c
   13e78:	00020854 	.word	0x00020854
   13e7c:	000208a0 	.word	0x000208a0
   13e80:	000208f0 	.word	0x000208f0
   13e84:	00020940 	.word	0x00020940
   13e88:	00020974 	.word	0x00020974
   13e8c:	00013e91 	.word	0x00013e91

00013e90 <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
   13e90:	b580      	push	{r7, lr}
   13e92:	b082      	sub	sp, #8
   13e94:	af00      	add	r7, sp, #0
   13e96:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
   13e98:	4905      	ldr	r1, [pc, #20]	; (13eb0 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
   13e9a:	4806      	ldr	r0, [pc, #24]	; (13eb4 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   13e9c:	4b06      	ldr	r3, [pc, #24]	; (13eb8 <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
   13e9e:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
   13ea0:	4906      	ldr	r1, [pc, #24]	; (13ebc <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
   13ea2:	4804      	ldr	r0, [pc, #16]	; (13eb4 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   13ea4:	4b06      	ldr	r3, [pc, #24]	; (13ec0 <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
   13ea6:	4798      	blx	r3
}
   13ea8:	bf00      	nop
   13eaa:	3708      	adds	r7, #8
   13eac:	46bd      	mov	sp, r7
   13eae:	bd80      	pop	{r7, pc}
   13eb0:	00020998 	.word	0x00020998
   13eb4:	20009e88 	.word	0x20009e88
   13eb8:	000172e9 	.word	0x000172e9
   13ebc:	000209cc 	.word	0x000209cc
   13ec0:	000173b9 	.word	0x000173b9

00013ec4 <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
   13ec4:	b580      	push	{r7, lr}
   13ec6:	b082      	sub	sp, #8
   13ec8:	af00      	add	r7, sp, #0
   13eca:	6078      	str	r0, [r7, #4]
   13ecc:	6039      	str	r1, [r7, #0]
   13ece:	687b      	ldr	r3, [r7, #4]
   13ed0:	2b01      	cmp	r3, #1
   13ed2:	d10c      	bne.n	13eee <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13ed4:	683b      	ldr	r3, [r7, #0]
   13ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13eda:	4293      	cmp	r3, r2
   13edc:	d107      	bne.n	13eee <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13ede:	4806      	ldr	r0, [pc, #24]	; (13ef8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13ee0:	4b06      	ldr	r3, [pc, #24]	; (13efc <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13ee2:	4798      	blx	r3
   13ee4:	4a06      	ldr	r2, [pc, #24]	; (13f00 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13ee6:	4907      	ldr	r1, [pc, #28]	; (13f04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13ee8:	4803      	ldr	r0, [pc, #12]	; (13ef8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13eea:	4b07      	ldr	r3, [pc, #28]	; (13f08 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13eec:	4798      	blx	r3
   13eee:	bf00      	nop
   13ef0:	3708      	adds	r7, #8
   13ef2:	46bd      	mov	sp, r7
   13ef4:	bd80      	pop	{r7, pc}
   13ef6:	bf00      	nop
   13ef8:	20008f70 	.word	0x20008f70
   13efc:	00013c59 	.word	0x00013c59
   13f00:	20000000 	.word	0x20000000
   13f04:	00013c6d 	.word	0x00013c6d
   13f08:	000187f1 	.word	0x000187f1

00013f0c <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
   13f0c:	b580      	push	{r7, lr}
   13f0e:	af00      	add	r7, sp, #0
   13f10:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13f14:	2001      	movs	r0, #1
   13f16:	4b01      	ldr	r3, [pc, #4]	; (13f1c <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
   13f18:	4798      	blx	r3
   13f1a:	bd80      	pop	{r7, pc}
   13f1c:	00013ec5 	.word	0x00013ec5

00013f20 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   13f20:	b480      	push	{r7}
   13f22:	b083      	sub	sp, #12
   13f24:	af00      	add	r7, sp, #0
   13f26:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   13f28:	4b04      	ldr	r3, [pc, #16]	; (13f3c <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   13f2a:	681b      	ldr	r3, [r3, #0]
   13f2c:	2201      	movs	r2, #1
   13f2e:	741a      	strb	r2, [r3, #16]
}
   13f30:	bf00      	nop
   13f32:	370c      	adds	r7, #12
   13f34:	46bd      	mov	sp, r7
   13f36:	bc80      	pop	{r7}
   13f38:	4770      	bx	lr
   13f3a:	bf00      	nop
   13f3c:	20009778 	.word	0x20009778

00013f40 <_ZL15EventTimerTicksPK10timer_task>:

static void EventTimerTicks(const struct timer_task *const timer_task)
{
   13f40:	b480      	push	{r7}
   13f42:	b083      	sub	sp, #12
   13f44:	af00      	add	r7, sp, #0
   13f46:	6078      	str	r0, [r7, #4]
	eventTimer.ticks++;
   13f48:	4b04      	ldr	r3, [pc, #16]	; (13f5c <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   13f4a:	689b      	ldr	r3, [r3, #8]
   13f4c:	3301      	adds	r3, #1
   13f4e:	4a03      	ldr	r2, [pc, #12]	; (13f5c <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   13f50:	6093      	str	r3, [r2, #8]
}
   13f52:	bf00      	nop
   13f54:	370c      	adds	r7, #12
   13f56:	46bd      	mov	sp, r7
   13f58:	bc80      	pop	{r7}
   13f5a:	4770      	bx	lr
   13f5c:	20009e04 	.word	0x20009e04

00013f60 <_ZN18EventHandler_ClassC1Ev>:

// default constructor
EventHandler_Class::EventHandler_Class()
   13f60:	b580      	push	{r7, lr}
   13f62:	b082      	sub	sp, #8
   13f64:	af00      	add	r7, sp, #0
   13f66:	6078      	str	r0, [r7, #4]
   13f68:	687b      	ldr	r3, [r7, #4]
   13f6a:	4618      	mov	r0, r3
   13f6c:	4b06      	ldr	r3, [pc, #24]	; (13f88 <_ZN18EventHandler_ClassC1Ev+0x28>)
   13f6e:	4798      	blx	r3
{
	ptrEventHandlerClass=this;
   13f70:	4a06      	ldr	r2, [pc, #24]	; (13f8c <_ZN18EventHandler_ClassC1Ev+0x2c>)
   13f72:	687b      	ldr	r3, [r7, #4]
   13f74:	6013      	str	r3, [r2, #0]
	eventQueue = eventStorage;
   13f76:	687b      	ldr	r3, [r7, #4]
   13f78:	4a05      	ldr	r2, [pc, #20]	; (13f90 <_ZN18EventHandler_ClassC1Ev+0x30>)
   13f7a:	635a      	str	r2, [r3, #52]	; 0x34
} //EventHandler_Class
   13f7c:	687b      	ldr	r3, [r7, #4]
   13f7e:	4618      	mov	r0, r3
   13f80:	3708      	adds	r7, #8
   13f82:	46bd      	mov	sp, r7
   13f84:	bd80      	pop	{r7, pc}
   13f86:	bf00      	nop
   13f88:	000002ed 	.word	0x000002ed
   13f8c:	20009778 	.word	0x20009778
   13f90:	20008f74 	.word	0x20008f74

00013f94 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   13f94:	b480      	push	{r7}
   13f96:	b083      	sub	sp, #12
   13f98:	af00      	add	r7, sp, #0
   13f9a:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   13f9c:	4a04      	ldr	r2, [pc, #16]	; (13fb0 <_ZN18EventHandler_ClassD1Ev+0x1c>)
   13f9e:	687b      	ldr	r3, [r7, #4]
   13fa0:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   13fa2:	687b      	ldr	r3, [r7, #4]
   13fa4:	4618      	mov	r0, r3
   13fa6:	370c      	adds	r7, #12
   13fa8:	46bd      	mov	sp, r7
   13faa:	bc80      	pop	{r7}
   13fac:	4770      	bx	lr
   13fae:	bf00      	nop
   13fb0:	20009778 	.word	0x20009778

00013fb4 <_ZN18EventHandler_Class4InitEv>:



bool EventHandler_Class::Init(void)
{
   13fb4:	b580      	push	{r7, lr}
   13fb6:	b082      	sub	sp, #8
   13fb8:	af00      	add	r7, sp, #0
   13fba:	6078      	str	r0, [r7, #4]

	eventTimeout=false;
   13fbc:	687b      	ldr	r3, [r7, #4]
   13fbe:	2200      	movs	r2, #0
   13fc0:	741a      	strb	r2, [r3, #16]
	eventsInUse=0;
   13fc2:	687b      	ldr	r3, [r7, #4]
   13fc4:	2200      	movs	r2, #0
   13fc6:	61da      	str	r2, [r3, #28]
	eventsInUsePeak=0;
   13fc8:	687b      	ldr	r3, [r7, #4]
   13fca:	2200      	movs	r2, #0
   13fcc:	621a      	str	r2, [r3, #32]
	eventCollisions=0;
   13fce:	687b      	ldr	r3, [r7, #4]
   13fd0:	2200      	movs	r2, #0
   13fd2:	625a      	str	r2, [r3, #36]	; 0x24
	eventEvalCollisions=0;
   13fd4:	687b      	ldr	r3, [r7, #4]
   13fd6:	2200      	movs	r2, #0
   13fd8:	629a      	str	r2, [r3, #40]	; 0x28
	eventQueueUnderflow=0;
   13fda:	687b      	ldr	r3, [r7, #4]
   13fdc:	2200      	movs	r2, #0
   13fde:	62da      	str	r2, [r3, #44]	; 0x2c

	usb << "initializeEvents\r";

	#endif

	for (i=1; i<sizeOfEventQueue; i++)
   13fe0:	687b      	ldr	r3, [r7, #4]
   13fe2:	2201      	movs	r2, #1
   13fe4:	861a      	strh	r2, [r3, #48]	; 0x30
   13fe6:	687b      	ldr	r3, [r7, #4]
   13fe8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   13fec:	2b7f      	cmp	r3, #127	; 0x7f
   13fee:	dc21      	bgt.n	14034 <_ZN18EventHandler_Class4InitEv+0x80>
	{
		eventStorage[i].next = (event*)NULL;
   13ff0:	687b      	ldr	r3, [r7, #4]
   13ff2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   13ff6:	4a18      	ldr	r2, [pc, #96]	; (14058 <_ZN18EventHandler_Class4InitEv+0xa4>)
   13ff8:	011b      	lsls	r3, r3, #4
   13ffa:	4413      	add	r3, r2
   13ffc:	330c      	adds	r3, #12
   13ffe:	2200      	movs	r2, #0
   14000:	601a      	str	r2, [r3, #0]
		eventStorage[i-1].next = &eventStorage[i];
   14002:	687b      	ldr	r3, [r7, #4]
   14004:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   14008:	3b01      	subs	r3, #1
   1400a:	687a      	ldr	r2, [r7, #4]
   1400c:	f9b2 2030 	ldrsh.w	r2, [r2, #48]	; 0x30
   14010:	0112      	lsls	r2, r2, #4
   14012:	4911      	ldr	r1, [pc, #68]	; (14058 <_ZN18EventHandler_Class4InitEv+0xa4>)
   14014:	440a      	add	r2, r1
   14016:	4910      	ldr	r1, [pc, #64]	; (14058 <_ZN18EventHandler_Class4InitEv+0xa4>)
   14018:	011b      	lsls	r3, r3, #4
   1401a:	440b      	add	r3, r1
   1401c:	330c      	adds	r3, #12
   1401e:	601a      	str	r2, [r3, #0]
	for (i=1; i<sizeOfEventQueue; i++)
   14020:	687b      	ldr	r3, [r7, #4]
   14022:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   14026:	b29b      	uxth	r3, r3
   14028:	3301      	adds	r3, #1
   1402a:	b29b      	uxth	r3, r3
   1402c:	b21a      	sxth	r2, r3
   1402e:	687b      	ldr	r3, [r7, #4]
   14030:	861a      	strh	r2, [r3, #48]	; 0x30
   14032:	e7d8      	b.n	13fe6 <_ZN18EventHandler_Class4InitEv+0x32>
	}
	isOK=eventTimer.Init();
   14034:	4809      	ldr	r0, [pc, #36]	; (1405c <_ZN18EventHandler_Class4InitEv+0xa8>)
   14036:	4b0a      	ldr	r3, [pc, #40]	; (14060 <_ZN18EventHandler_Class4InitEv+0xac>)
   14038:	4798      	blx	r3
   1403a:	4603      	mov	r3, r0
   1403c:	461a      	mov	r2, r3
   1403e:	687b      	ldr	r3, [r7, #4]
   14040:	761a      	strb	r2, [r3, #24]
	eventTimer.Start_periodic_task(FUNC_PTR(EventTimerTicks),1);
   14042:	2201      	movs	r2, #1
   14044:	4907      	ldr	r1, [pc, #28]	; (14064 <_ZN18EventHandler_Class4InitEv+0xb0>)
   14046:	4805      	ldr	r0, [pc, #20]	; (1405c <_ZN18EventHandler_Class4InitEv+0xa8>)
   14048:	4b07      	ldr	r3, [pc, #28]	; (14068 <_ZN18EventHandler_Class4InitEv+0xb4>)
   1404a:	4798      	blx	r3
	{
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
	return (bool)&eventStorage[0];
   1404c:	2301      	movs	r3, #1
}
   1404e:	4618      	mov	r0, r3
   14050:	3708      	adds	r7, #8
   14052:	46bd      	mov	sp, r7
   14054:	bd80      	pop	{r7, pc}
   14056:	bf00      	nop
   14058:	20008f74 	.word	0x20008f74
   1405c:	20009e04 	.word	0x20009e04
   14060:	00016915 	.word	0x00016915
   14064:	00013f41 	.word	0x00013f41
   14068:	00016a35 	.word	0x00016a35

0001406c <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   1406c:	b590      	push	{r4, r7, lr}
   1406e:	b087      	sub	sp, #28
   14070:	af02      	add	r7, sp, #8
   14072:	60f8      	str	r0, [r7, #12]
   14074:	60b9      	str	r1, [r7, #8]
   14076:	4611      	mov	r1, r2
   14078:	461a      	mov	r2, r3
   1407a:	460b      	mov	r3, r1
   1407c:	80fb      	strh	r3, [r7, #6]
   1407e:	4613      	mov	r3, r2
   14080:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   14082:	88b9      	ldrh	r1, [r7, #4]
   14084:	88fa      	ldrh	r2, [r7, #6]
   14086:	6a3b      	ldr	r3, [r7, #32]
   14088:	9300      	str	r3, [sp, #0]
   1408a:	460b      	mov	r3, r1
   1408c:	68b9      	ldr	r1, [r7, #8]
   1408e:	68f8      	ldr	r0, [r7, #12]
   14090:	4c03      	ldr	r4, [pc, #12]	; (140a0 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   14092:	47a0      	blx	r4
   14094:	4603      	mov	r3, r0
}
   14096:	4618      	mov	r0, r3
   14098:	3714      	adds	r7, #20
   1409a:	46bd      	mov	sp, r7
   1409c:	bd90      	pop	{r4, r7, pc}
   1409e:	bf00      	nop
   140a0:	000140a5 	.word	0x000140a5

000140a4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   140a4:	b590      	push	{r4, r7, lr}
   140a6:	b089      	sub	sp, #36	; 0x24
   140a8:	af00      	add	r7, sp, #0
   140aa:	60f8      	str	r0, [r7, #12]
   140ac:	60b9      	str	r1, [r7, #8]
   140ae:	4611      	mov	r1, r2
   140b0:	461a      	mov	r2, r3
   140b2:	460b      	mov	r3, r1
   140b4:	80fb      	strh	r3, [r7, #6]
   140b6:	4613      	mov	r3, r2
   140b8:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   140ba:	2300      	movs	r3, #0
   140bc:	77fb      	strb	r3, [r7, #31]
	event*	queue;
	event*	queuePrev(NULL);
   140be:	2300      	movs	r3, #0
   140c0:	617b      	str	r3, [r7, #20]
	eventTimeout=false;
   140c2:	68fb      	ldr	r3, [r7, #12]
   140c4:	2200      	movs	r2, #0
   140c6:	741a      	strb	r2, [r3, #16]

	
	e.eventClass = eventClass;
   140c8:	68bb      	ldr	r3, [r7, #8]
   140ca:	88fa      	ldrh	r2, [r7, #6]
   140cc:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   140ce:	68bb      	ldr	r3, [r7, #8]
   140d0:	88ba      	ldrh	r2, [r7, #4]
   140d2:	805a      	strh	r2, [r3, #2]

	
	if (timeout != forever){
   140d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   140d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   140da:	4293      	cmp	r3, r2
   140dc:	d006      	beq.n	140ec <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x48>
		eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,(uint32_t)timeout);
   140de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   140e0:	461a      	mov	r2, r3
   140e2:	493c      	ldr	r1, [pc, #240]	; (141d4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   140e4:	483c      	ldr	r0, [pc, #240]	; (141d8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   140e6:	4b3d      	ldr	r3, [pc, #244]	; (141dc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x138>)
   140e8:	4798      	blx	r3
   140ea:	e004      	b.n	140f6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>

	}else{
		
			eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   140ec:	2232      	movs	r2, #50	; 0x32
   140ee:	4939      	ldr	r1, [pc, #228]	; (141d4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   140f0:	4839      	ldr	r0, [pc, #228]	; (141d8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   140f2:	4b3a      	ldr	r3, [pc, #232]	; (141dc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x138>)
   140f4:	4798      	blx	r3
	}

	while (!result && (!eventTimeout))
   140f6:	7ffb      	ldrb	r3, [r7, #31]
   140f8:	f083 0301 	eor.w	r3, r3, #1
   140fc:	b2db      	uxtb	r3, r3
   140fe:	2b00      	cmp	r3, #0
   14100:	d009      	beq.n	14116 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   14102:	68fb      	ldr	r3, [r7, #12]
   14104:	7c1b      	ldrb	r3, [r3, #16]
   14106:	b2db      	uxtb	r3, r3
   14108:	f083 0301 	eor.w	r3, r3, #1
   1410c:	b2db      	uxtb	r3, r3
   1410e:	2b00      	cmp	r3, #0
   14110:	d001      	beq.n	14116 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   14112:	2301      	movs	r3, #1
   14114:	e000      	b.n	14118 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x74>
   14116:	2300      	movs	r3, #0
   14118:	2b00      	cmp	r3, #0
   1411a:	d055      	beq.n	141c8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x124>
	{
		if (eventHandler)
   1411c:	68fb      	ldr	r3, [r7, #12]
   1411e:	695b      	ldr	r3, [r3, #20]
   14120:	2b00      	cmp	r3, #0
   14122:	d002      	beq.n	1412a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x86>
		{
			eventHandler();
   14124:	68fb      	ldr	r3, [r7, #12]
   14126:	695b      	ldr	r3, [r3, #20]
   14128:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   1412a:	4b2d      	ldr	r3, [pc, #180]	; (141e0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x13c>)
   1412c:	681b      	ldr	r3, [r3, #0]
   1412e:	61bb      	str	r3, [r7, #24]

		while (queue)
   14130:	69bb      	ldr	r3, [r7, #24]
   14132:	2b00      	cmp	r3, #0
   14134:	d040      	beq.n	141b8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x114>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
		
			#endif
			if (((e.eventClass == kAnyEventClass) ||(queue->eventClass == e.eventClass))
   14136:	68bb      	ldr	r3, [r7, #8]
   14138:	881b      	ldrh	r3, [r3, #0]
   1413a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1413e:	4293      	cmp	r3, r2
   14140:	d005      	beq.n	1414e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xaa>
   14142:	69bb      	ldr	r3, [r7, #24]
   14144:	881a      	ldrh	r2, [r3, #0]
   14146:	68bb      	ldr	r3, [r7, #8]
   14148:	881b      	ldrh	r3, [r3, #0]
   1414a:	429a      	cmp	r2, r3
   1414c:	d12e      	bne.n	141ac <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			&& ((e.eventType == kAnyEventType) ||	(queue->eventType == e.eventType)))
   1414e:	68bb      	ldr	r3, [r7, #8]
   14150:	885b      	ldrh	r3, [r3, #2]
   14152:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14156:	4293      	cmp	r3, r2
   14158:	d005      	beq.n	14166 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xc2>
   1415a:	69bb      	ldr	r3, [r7, #24]
   1415c:	885a      	ldrh	r2, [r3, #2]
   1415e:	68bb      	ldr	r3, [r7, #8]
   14160:	885b      	ldrh	r3, [r3, #2]
   14162:	429a      	cmp	r2, r3
   14164:	d122      	bne.n	141ac <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			{
				if (queuePrev)
   14166:	697b      	ldr	r3, [r7, #20]
   14168:	2b00      	cmp	r3, #0
   1416a:	d004      	beq.n	14176 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xd2>
				{
					queuePrev->next = queue->next;
   1416c:	69bb      	ldr	r3, [r7, #24]
   1416e:	68da      	ldr	r2, [r3, #12]
   14170:	697b      	ldr	r3, [r7, #20]
   14172:	60da      	str	r2, [r3, #12]
   14174:	e003      	b.n	1417e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xda>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   14176:	69bb      	ldr	r3, [r7, #24]
   14178:	68db      	ldr	r3, [r3, #12]
   1417a:	4a19      	ldr	r2, [pc, #100]	; (141e0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x13c>)
   1417c:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   1417e:	68ba      	ldr	r2, [r7, #8]
   14180:	69bb      	ldr	r3, [r7, #24]
   14182:	4614      	mov	r4, r2
   14184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   1418a:	68fb      	ldr	r3, [r7, #12]
   1418c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1418e:	69bb      	ldr	r3, [r7, #24]
   14190:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   14192:	68fb      	ldr	r3, [r7, #12]
   14194:	69ba      	ldr	r2, [r7, #24]
   14196:	635a      	str	r2, [r3, #52]	; 0x34
				
				eventsInUse--;
   14198:	68fb      	ldr	r3, [r7, #12]
   1419a:	69db      	ldr	r3, [r3, #28]
   1419c:	1e5a      	subs	r2, r3, #1
   1419e:	68fb      	ldr	r3, [r7, #12]
   141a0:	61da      	str	r2, [r3, #28]

				queue = NULL;
   141a2:	2300      	movs	r3, #0
   141a4:	61bb      	str	r3, [r7, #24]
				result = true;
   141a6:	2301      	movs	r3, #1
   141a8:	77fb      	strb	r3, [r7, #31]
   141aa:	e004      	b.n	141b6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x112>
			}
			else
			{
				queuePrev = queue;
   141ac:	69bb      	ldr	r3, [r7, #24]
   141ae:	617b      	str	r3, [r7, #20]
				queue = queue->next;
   141b0:	69bb      	ldr	r3, [r7, #24]
   141b2:	68db      	ldr	r3, [r3, #12]
   141b4:	61bb      	str	r3, [r7, #24]
		while (queue)
   141b6:	e7bb      	b.n	14130 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x8c>
			}
		}

		if (result)
   141b8:	7ffb      	ldrb	r3, [r7, #31]
   141ba:	2b00      	cmp	r3, #0
   141bc:	d09b      	beq.n	140f6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>
			usb << "     got event!" << newline;
			usb << "     eventClass:       " << e.eventClass << newline;
			usb << "     eventType:        " << e.eventType << newline;
		
			#endif
			eventTimer.Remove_task(FUNC_PTR(EventTimerTask));
   141be:	4905      	ldr	r1, [pc, #20]	; (141d4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   141c0:	4805      	ldr	r0, [pc, #20]	; (141d8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   141c2:	4b08      	ldr	r3, [pc, #32]	; (141e4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x140>)
   141c4:	4798      	blx	r3
	while (!result && (!eventTimeout))
   141c6:	e796      	b.n	140f6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>
			//while (!eventTimeout);
		
		}
	}
	//eventTimer.stop();
	return result;
   141c8:	7ffb      	ldrb	r3, [r7, #31]
}
   141ca:	4618      	mov	r0, r3
   141cc:	3724      	adds	r7, #36	; 0x24
   141ce:	46bd      	mov	sp, r7
   141d0:	bd90      	pop	{r4, r7, pc}
   141d2:	bf00      	nop
   141d4:	00013f21 	.word	0x00013f21
   141d8:	20009e04 	.word	0x20009e04
   141dc:	00016b01 	.word	0x00016b01
   141e0:	20009774 	.word	0x20009774
   141e4:	00016a91 	.word	0x00016a91

000141e8 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
{
	SendEventSelf(e);
}

void EventHandler_Class::SendEventSelf(const event& e)
{
   141e8:	b580      	push	{r7, lr}
   141ea:	b084      	sub	sp, #16
   141ec:	af00      	add	r7, sp, #0
   141ee:	6078      	str	r0, [r7, #4]
   141f0:	6039      	str	r1, [r7, #0]
	usb << "send event:\r";
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	event*	theEvent(eventQueue);
   141f2:	687b      	ldr	r3, [r7, #4]
   141f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   141f6:	60bb      	str	r3, [r7, #8]
	
	if (theEvent)
   141f8:	68bb      	ldr	r3, [r7, #8]
   141fa:	2b00      	cmp	r3, #0
   141fc:	d035      	beq.n	1426a <_ZN18EventHandler_Class13SendEventSelfERK5event+0x82>
	{
		eventQueue = eventQueue->next;
   141fe:	687b      	ldr	r3, [r7, #4]
   14200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14202:	68da      	ldr	r2, [r3, #12]
   14204:	687b      	ldr	r3, [r7, #4]
   14206:	635a      	str	r2, [r3, #52]	; 0x34
		theEvent->next = NULL;
   14208:	68bb      	ldr	r3, [r7, #8]
   1420a:	2200      	movs	r2, #0
   1420c:	60da      	str	r2, [r3, #12]
		eventsInUse++;
   1420e:	687b      	ldr	r3, [r7, #4]
   14210:	69db      	ldr	r3, [r3, #28]
   14212:	1c5a      	adds	r2, r3, #1
   14214:	687b      	ldr	r3, [r7, #4]
   14216:	61da      	str	r2, [r3, #28]

		event*	threadQueue((event*)mainThreadEventQueue);
   14218:	4b18      	ldr	r3, [pc, #96]	; (1427c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   1421a:	681b      	ldr	r3, [r3, #0]
   1421c:	60fb      	str	r3, [r7, #12]
		if (threadQueue == NULL)
   1421e:	68fb      	ldr	r3, [r7, #12]
   14220:	2b00      	cmp	r3, #0
   14222:	d103      	bne.n	1422c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
		mainThreadEventQueue = theEvent;
   14224:	4a15      	ldr	r2, [pc, #84]	; (1427c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x94>)
   14226:	68bb      	ldr	r3, [r7, #8]
   14228:	6013      	str	r3, [r2, #0]
   1422a:	e00a      	b.n	14242 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
		else
		{
			while (threadQueue->next)
   1422c:	68fb      	ldr	r3, [r7, #12]
   1422e:	68db      	ldr	r3, [r3, #12]
   14230:	2b00      	cmp	r3, #0
   14232:	d003      	beq.n	1423c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x54>
			threadQueue = threadQueue->next;
   14234:	68fb      	ldr	r3, [r7, #12]
   14236:	68db      	ldr	r3, [r3, #12]
   14238:	60fb      	str	r3, [r7, #12]
			while (threadQueue->next)
   1423a:	e7f7      	b.n	1422c <_ZN18EventHandler_Class13SendEventSelfERK5event+0x44>
			threadQueue->next = theEvent;
   1423c:	68fb      	ldr	r3, [r7, #12]
   1423e:	68ba      	ldr	r2, [r7, #8]
   14240:	60da      	str	r2, [r3, #12]
			usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
			
		}
		#endif

		(*theEvent).eventClass = e.eventClass;
   14242:	683b      	ldr	r3, [r7, #0]
   14244:	881a      	ldrh	r2, [r3, #0]
   14246:	68bb      	ldr	r3, [r7, #8]
   14248:	801a      	strh	r2, [r3, #0]
		(*theEvent).eventType = e.eventType;
   1424a:	683b      	ldr	r3, [r7, #0]
   1424c:	885a      	ldrh	r2, [r3, #2]
   1424e:	68bb      	ldr	r3, [r7, #8]
   14250:	805a      	strh	r2, [r3, #2]
		(*theEvent).data = e.data;
   14252:	68bb      	ldr	r3, [r7, #8]
   14254:	683a      	ldr	r2, [r7, #0]
   14256:	6892      	ldr	r2, [r2, #8]
   14258:	609a      	str	r2, [r3, #8]
		(*theEvent).timestamp = eventTimer.Get_ticks();
   1425a:	4809      	ldr	r0, [pc, #36]	; (14280 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>)
   1425c:	4b09      	ldr	r3, [pc, #36]	; (14284 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x9c>)
   1425e:	4798      	blx	r3
   14260:	4603      	mov	r3, r0
   14262:	461a      	mov	r2, r3
   14264:	68bb      	ldr	r3, [r7, #8]
   14266:	605a      	str	r2, [r3, #4]
		usb << "     type:    " << (uint16)e.eventType << newline;
		
		#endif
		eventQueueUnderflow++;
	}
}
   14268:	e004      	b.n	14274 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x8c>
		eventQueueUnderflow++;
   1426a:	687b      	ldr	r3, [r7, #4]
   1426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1426e:	1c5a      	adds	r2, r3, #1
   14270:	687b      	ldr	r3, [r7, #4]
   14272:	62da      	str	r2, [r3, #44]	; 0x2c
}
   14274:	bf00      	nop
   14276:	3710      	adds	r7, #16
   14278:	46bd      	mov	sp, r7
   1427a:	bd80      	pop	{r7, pc}
   1427c:	20009774 	.word	0x20009774
   14280:	20009e04 	.word	0x20009e04
   14284:	00016ae9 	.word	0x00016ae9

00014288 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
   14288:	b580      	push	{r7, lr}
   1428a:	b088      	sub	sp, #32
   1428c:	af00      	add	r7, sp, #0
   1428e:	60f8      	str	r0, [r7, #12]
   14290:	460b      	mov	r3, r1
   14292:	607a      	str	r2, [r7, #4]
   14294:	817b      	strh	r3, [r7, #10]
	event		theEvent;
   14296:	f107 0310 	add.w	r3, r7, #16
   1429a:	4618      	mov	r0, r3
   1429c:	4b09      	ldr	r3, [pc, #36]	; (142c4 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
   1429e:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
   142a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   142a4:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(EventType)et ;
   142a6:	897b      	ldrh	r3, [r7, #10]
   142a8:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   142aa:	687b      	ldr	r3, [r7, #4]
   142ac:	681b      	ldr	r3, [r3, #0]
   142ae:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
   142b0:	f107 0310 	add.w	r3, r7, #16
   142b4:	4619      	mov	r1, r3
   142b6:	68f8      	ldr	r0, [r7, #12]
   142b8:	4b03      	ldr	r3, [pc, #12]	; (142c8 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
   142ba:	4798      	blx	r3
}
   142bc:	bf00      	nop
   142be:	3720      	adds	r7, #32
   142c0:	46bd      	mov	sp, r7
   142c2:	bd80      	pop	{r7, pc}
   142c4:	000002ed 	.word	0x000002ed
   142c8:	000141e9 	.word	0x000141e9

000142cc <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
   142cc:	b580      	push	{r7, lr}
   142ce:	b08a      	sub	sp, #40	; 0x28
   142d0:	af00      	add	r7, sp, #0
   142d2:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   142d4:	f04f 0300 	mov.w	r3, #0
   142d8:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   142da:	f04f 0300 	mov.w	r3, #0
   142de:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   142e0:	f04f 0300 	mov.w	r3, #0
   142e4:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   142e6:	f107 030c 	add.w	r3, r7, #12
   142ea:	4618      	mov	r0, r3
   142ec:	4b03      	ldr	r3, [pc, #12]	; (142fc <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   142ee:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   142f0:	687b      	ldr	r3, [r7, #4]
   142f2:	69db      	ldr	r3, [r3, #28]
	
}
   142f4:	4618      	mov	r0, r3
   142f6:	3728      	adds	r7, #40	; 0x28
   142f8:	46bd      	mov	sp, r7
   142fa:	bd80      	pop	{r7, pc}
   142fc:	000002ed 	.word	0x000002ed

00014300 <_Z41__static_initialization_and_destruction_0ii>:


   14300:	b5b0      	push	{r4, r5, r7, lr}
   14302:	b082      	sub	sp, #8
   14304:	af00      	add	r7, sp, #0
   14306:	6078      	str	r0, [r7, #4]
   14308:	6039      	str	r1, [r7, #0]
   1430a:	687b      	ldr	r3, [r7, #4]
   1430c:	2b01      	cmp	r3, #1
   1430e:	d117      	bne.n	14340 <_Z41__static_initialization_and_destruction_0ii+0x40>
   14310:	683b      	ldr	r3, [r7, #0]
   14312:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14316:	4293      	cmp	r3, r2
   14318:	d112      	bne.n	14340 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   1431a:	4b0b      	ldr	r3, [pc, #44]	; (14348 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1431c:	247f      	movs	r4, #127	; 0x7f
   1431e:	461d      	mov	r5, r3
   14320:	2c00      	cmp	r4, #0
   14322:	db05      	blt.n	14330 <_Z41__static_initialization_and_destruction_0ii+0x30>
   14324:	4628      	mov	r0, r5
   14326:	4b09      	ldr	r3, [pc, #36]	; (1434c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   14328:	4798      	blx	r3
   1432a:	3510      	adds	r5, #16
   1432c:	3c01      	subs	r4, #1
   1432e:	e7f7      	b.n	14320 <_Z41__static_initialization_and_destruction_0ii+0x20>
   14330:	4807      	ldr	r0, [pc, #28]	; (14350 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   14332:	4b08      	ldr	r3, [pc, #32]	; (14354 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   14334:	4798      	blx	r3
   14336:	4a08      	ldr	r2, [pc, #32]	; (14358 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   14338:	4908      	ldr	r1, [pc, #32]	; (1435c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1433a:	4805      	ldr	r0, [pc, #20]	; (14350 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   1433c:	4b08      	ldr	r3, [pc, #32]	; (14360 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   1433e:	4798      	blx	r3
   14340:	bf00      	nop
   14342:	3708      	adds	r7, #8
   14344:	46bd      	mov	sp, r7
   14346:	bdb0      	pop	{r4, r5, r7, pc}
   14348:	20008f74 	.word	0x20008f74
   1434c:	000002ed 	.word	0x000002ed
   14350:	20009788 	.word	0x20009788
   14354:	00013f61 	.word	0x00013f61
   14358:	20000000 	.word	0x20000000
   1435c:	00013f95 	.word	0x00013f95
   14360:	000187f1 	.word	0x000187f1

00014364 <_GLOBAL__sub_I_maxEventCount>:
   14364:	b580      	push	{r7, lr}
   14366:	af00      	add	r7, sp, #0
   14368:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1436c:	2001      	movs	r0, #1
   1436e:	4b01      	ldr	r3, [pc, #4]	; (14374 <_GLOBAL__sub_I_maxEventCount+0x10>)
   14370:	4798      	blx	r3
   14372:	bd80      	pop	{r7, pc}
   14374:	00014301 	.word	0x00014301

00014378 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc>:

I2C_Asyn_Class	*ptrI2C_Asyn_Class=NULL;
//static list_descriptor i2cList=NULL;
//i2cList=NULL;
list_descriptor i2cList;
static void GetRelativeClassPointer(i2c_m_async_desc*  i2c){
   14378:	b580      	push	{r7, lr}
   1437a:	b084      	sub	sp, #16
   1437c:	af00      	add	r7, sp, #0
   1437e:	6078      	str	r0, [r7, #4]
	uint32_t  *ptr=(uint32_t*)ptrI2C_Asyn_Class->GetClassPointer(i2c);;
   14380:	4b08      	ldr	r3, [pc, #32]	; (143a4 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   14382:	681b      	ldr	r3, [r3, #0]
   14384:	6879      	ldr	r1, [r7, #4]
   14386:	4618      	mov	r0, r3
   14388:	4b07      	ldr	r3, [pc, #28]	; (143a8 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x30>)
   1438a:	4798      	blx	r3
   1438c:	4603      	mov	r3, r0
   1438e:	60fb      	str	r3, [r7, #12]
	I2C_Asyn_Class	*ptrClass=(I2C_Asyn_Class*)ptr;
   14390:	68fb      	ldr	r3, [r7, #12]
   14392:	60bb      	str	r3, [r7, #8]
	ptrI2C_Asyn_Class=ptrClass;
   14394:	4a03      	ldr	r2, [pc, #12]	; (143a4 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   14396:	68bb      	ldr	r3, [r7, #8]
   14398:	6013      	str	r3, [r2, #0]
}
   1439a:	bf00      	nop
   1439c:	3710      	adds	r7, #16
   1439e:	46bd      	mov	sp, r7
   143a0:	bd80      	pop	{r7, pc}
   143a2:	bf00      	nop
   143a4:	200097c0 	.word	0x200097c0
   143a8:	000147ed 	.word	0x000147ed

000143ac <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
   143ac:	b580      	push	{r7, lr}
   143ae:	b082      	sub	sp, #8
   143b0:	af00      	add	r7, sp, #0
   143b2:	6078      	str	r0, [r7, #4]
	
	GetRelativeClassPointer(i2c);
   143b4:	6878      	ldr	r0, [r7, #4]
   143b6:	4b05      	ldr	r3, [pc, #20]	; (143cc <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x20>)
   143b8:	4798      	blx	r3
	ptrI2C_Asyn_Class->txReady=true;
   143ba:	4b05      	ldr	r3, [pc, #20]	; (143d0 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x24>)
   143bc:	681b      	ldr	r3, [r3, #0]
   143be:	2201      	movs	r2, #1
   143c0:	751a      	strb	r2, [r3, #20]


}
   143c2:	bf00      	nop
   143c4:	3708      	adds	r7, #8
   143c6:	46bd      	mov	sp, r7
   143c8:	bd80      	pop	{r7, pc}
   143ca:	bf00      	nop
   143cc:	00014379 	.word	0x00014379
   143d0:	200097c0 	.word	0x200097c0

000143d4 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
   143d4:	b580      	push	{r7, lr}
   143d6:	b082      	sub	sp, #8
   143d8:	af00      	add	r7, sp, #0
   143da:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   143dc:	6878      	ldr	r0, [r7, #4]
   143de:	4b05      	ldr	r3, [pc, #20]	; (143f4 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x20>)
   143e0:	4798      	blx	r3
	ptrI2C_Asyn_Class->rxReady=true;
   143e2:	4b05      	ldr	r3, [pc, #20]	; (143f8 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x24>)
   143e4:	681b      	ldr	r3, [r3, #0]
   143e6:	2201      	movs	r2, #1
   143e8:	755a      	strb	r2, [r3, #21]
}
   143ea:	bf00      	nop
   143ec:	3708      	adds	r7, #8
   143ee:	46bd      	mov	sp, r7
   143f0:	bd80      	pop	{r7, pc}
   143f2:	bf00      	nop
   143f4:	00014379 	.word	0x00014379
   143f8:	200097c0 	.word	0x200097c0

000143fc <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
   143fc:	b580      	push	{r7, lr}
   143fe:	b082      	sub	sp, #8
   14400:	af00      	add	r7, sp, #0
   14402:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   14404:	6878      	ldr	r0, [r7, #4]
   14406:	4b09      	ldr	r3, [pc, #36]	; (1442c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
   14408:	4798      	blx	r3
		ptrI2C_Asyn_Class->Clear_ack();
   1440a:	4b09      	ldr	r3, [pc, #36]	; (14430 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   1440c:	681b      	ldr	r3, [r3, #0]
   1440e:	4618      	mov	r0, r3
   14410:	4b08      	ldr	r3, [pc, #32]	; (14434 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x38>)
   14412:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
   14414:	4b06      	ldr	r3, [pc, #24]	; (14430 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   14416:	681b      	ldr	r3, [r3, #0]
   14418:	2201      	movs	r2, #1
   1441a:	751a      	strb	r2, [r3, #20]
		ptrI2C_Asyn_Class->rxReady=true;
   1441c:	4b04      	ldr	r3, [pc, #16]	; (14430 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   1441e:	681b      	ldr	r3, [r3, #0]
   14420:	2201      	movs	r2, #1
   14422:	755a      	strb	r2, [r3, #21]
 }
   14424:	bf00      	nop
   14426:	3708      	adds	r7, #8
   14428:	46bd      	mov	sp, r7
   1442a:	bd80      	pop	{r7, pc}
   1442c:	00014379 	.word	0x00014379
   14430:	200097c0 	.word	0x200097c0
   14434:	000146d1 	.word	0x000146d1

00014438 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
   14438:	b580      	push	{r7, lr}
   1443a:	b082      	sub	sp, #8
   1443c:	af00      	add	r7, sp, #0
   1443e:	6078      	str	r0, [r7, #4]
   14440:	687b      	ldr	r3, [r7, #4]
   14442:	4618      	mov	r0, r3
   14444:	4b07      	ldr	r3, [pc, #28]	; (14464 <_ZN14I2C_Asyn_ClassC1Ev+0x2c>)
   14446:	4798      	blx	r3
{
	ptrI2CAsynDescr=&I2C_EXPANDER;
   14448:	687b      	ldr	r3, [r7, #4]
   1444a:	4a07      	ldr	r2, [pc, #28]	; (14468 <_ZN14I2C_Asyn_ClassC1Ev+0x30>)
   1444c:	625a      	str	r2, [r3, #36]	; 0x24
	ptrClass=this;
   1444e:	687b      	ldr	r3, [r7, #4]
   14450:	687a      	ldr	r2, [r7, #4]
   14452:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   14454:	4a05      	ldr	r2, [pc, #20]	; (1446c <_ZN14I2C_Asyn_ClassC1Ev+0x34>)
   14456:	687b      	ldr	r3, [r7, #4]
   14458:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
   1445a:	687b      	ldr	r3, [r7, #4]
   1445c:	4618      	mov	r0, r3
   1445e:	3708      	adds	r7, #8
   14460:	46bd      	mov	sp, r7
   14462:	bd80      	pop	{r7, pc}
   14464:	00014705 	.word	0x00014705
   14468:	2000a278 	.word	0x2000a278
   1446c:	200097c0 	.word	0x200097c0

00014470 <_ZN14I2C_Asyn_ClassC1EP16i2c_m_async_desc>:
// default constructor
I2C_Asyn_Class::I2C_Asyn_Class(i2c_m_async_desc *i2c_a)
   14470:	b580      	push	{r7, lr}
   14472:	b082      	sub	sp, #8
   14474:	af00      	add	r7, sp, #0
   14476:	6078      	str	r0, [r7, #4]
   14478:	6039      	str	r1, [r7, #0]
   1447a:	687b      	ldr	r3, [r7, #4]
   1447c:	4618      	mov	r0, r3
   1447e:	4b0b      	ldr	r3, [pc, #44]	; (144ac <_ZN14I2C_Asyn_ClassC1EP16i2c_m_async_desc+0x3c>)
   14480:	4798      	blx	r3
{
	ptrI2CAsynDescr=i2c_a;
   14482:	687b      	ldr	r3, [r7, #4]
   14484:	683a      	ldr	r2, [r7, #0]
   14486:	625a      	str	r2, [r3, #36]	; 0x24
	ptrClass=this;
   14488:	687b      	ldr	r3, [r7, #4]
   1448a:	687a      	ldr	r2, [r7, #4]
   1448c:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   1448e:	4a08      	ldr	r2, [pc, #32]	; (144b0 <_ZN14I2C_Asyn_ClassC1EP16i2c_m_async_desc+0x40>)
   14490:	687b      	ldr	r3, [r7, #4]
   14492:	6013      	str	r3, [r2, #0]
	isOK=false;
   14494:	687b      	ldr	r3, [r7, #4]
   14496:	2200      	movs	r2, #0
   14498:	761a      	strb	r2, [r3, #24]
	initiated=false;
   1449a:	687b      	ldr	r3, [r7, #4]
   1449c:	2200      	movs	r2, #0
   1449e:	759a      	strb	r2, [r3, #22]
} //I2C_Asyn_Class
   144a0:	687b      	ldr	r3, [r7, #4]
   144a2:	4618      	mov	r0, r3
   144a4:	3708      	adds	r7, #8
   144a6:	46bd      	mov	sp, r7
   144a8:	bd80      	pop	{r7, pc}
   144aa:	bf00      	nop
   144ac:	00014705 	.word	0x00014705
   144b0:	200097c0 	.word	0x200097c0

000144b4 <_ZN14I2C_Asyn_ClassD1Ev>:

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
   144b4:	b580      	push	{r7, lr}
   144b6:	b082      	sub	sp, #8
   144b8:	af00      	add	r7, sp, #0
   144ba:	6078      	str	r0, [r7, #4]
   144bc:	687b      	ldr	r3, [r7, #4]
   144be:	4618      	mov	r0, r3
   144c0:	4b03      	ldr	r3, [pc, #12]	; (144d0 <_ZN14I2C_Asyn_ClassD1Ev+0x1c>)
   144c2:	4798      	blx	r3
{

} //~I2C_Asyn_Class
   144c4:	687b      	ldr	r3, [r7, #4]
   144c6:	4618      	mov	r0, r3
   144c8:	3708      	adds	r7, #8
   144ca:	46bd      	mov	sp, r7
   144cc:	bd80      	pop	{r7, pc}
   144ce:	bf00      	nop
   144d0:	00014725 	.word	0x00014725

000144d4 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
   144d4:	b480      	push	{r7}
   144d6:	b083      	sub	sp, #12
   144d8:	af00      	add	r7, sp, #0
   144da:	6078      	str	r0, [r7, #4]
   144dc:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
   144de:	687b      	ldr	r3, [r7, #4]
   144e0:	683a      	ldr	r2, [r7, #0]
   144e2:	625a      	str	r2, [r3, #36]	; 0x24
	ptrClass=this;
   144e4:	687b      	ldr	r3, [r7, #4]
   144e6:	687a      	ldr	r2, [r7, #4]
   144e8:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   144ea:	4a04      	ldr	r2, [pc, #16]	; (144fc <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x28>)
   144ec:	687b      	ldr	r3, [r7, #4]
   144ee:	6013      	str	r3, [r2, #0]
}
   144f0:	bf00      	nop
   144f2:	370c      	adds	r7, #12
   144f4:	46bd      	mov	sp, r7
   144f6:	bc80      	pop	{r7}
   144f8:	4770      	bx	lr
   144fa:	bf00      	nop
   144fc:	200097c0 	.word	0x200097c0

00014500 <_ZN14I2C_Asyn_Class4InitEv>:

bool	I2C_Asyn_Class::Init(void){
   14500:	b580      	push	{r7, lr}
   14502:	b084      	sub	sp, #16
   14504:	af00      	add	r7, sp, #0
   14506:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
   14508:	687b      	ldr	r3, [r7, #4]
   1450a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1450c:	687b      	ldr	r3, [r7, #4]
   1450e:	3320      	adds	r3, #32
   14510:	4619      	mov	r1, r3
   14512:	4610      	mov	r0, r2
   14514:	4b26      	ldr	r3, [pc, #152]	; (145b0 <_ZN14I2C_Asyn_Class4InitEv+0xb0>)
   14516:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
   14518:	687b      	ldr	r3, [r7, #4]
   1451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1451c:	4618      	mov	r0, r3
   1451e:	4b25      	ldr	r3, [pc, #148]	; (145b4 <_ZN14I2C_Asyn_Class4InitEv+0xb4>)
   14520:	4798      	blx	r3
   14522:	4603      	mov	r3, r0
   14524:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
   14526:	687b      	ldr	r3, [r7, #4]
   14528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1452a:	4a23      	ldr	r2, [pc, #140]	; (145b8 <_ZN14I2C_Asyn_Class4InitEv+0xb8>)
   1452c:	2101      	movs	r1, #1
   1452e:	4618      	mov	r0, r3
   14530:	4b22      	ldr	r3, [pc, #136]	; (145bc <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   14532:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
   14534:	687b      	ldr	r3, [r7, #4]
   14536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14538:	4a21      	ldr	r2, [pc, #132]	; (145c0 <_ZN14I2C_Asyn_Class4InitEv+0xc0>)
   1453a:	2102      	movs	r1, #2
   1453c:	4618      	mov	r0, r3
   1453e:	4b1f      	ldr	r3, [pc, #124]	; (145bc <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   14540:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
   14542:	687b      	ldr	r3, [r7, #4]
   14544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14546:	4a1f      	ldr	r2, [pc, #124]	; (145c4 <_ZN14I2C_Asyn_Class4InitEv+0xc4>)
   14548:	2100      	movs	r1, #0
   1454a:	4618      	mov	r0, r3
   1454c:	4b1b      	ldr	r3, [pc, #108]	; (145bc <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   1454e:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	coupleKey.ptrI2CAsynClass=(uint32_t)ptrClass;
   14550:	687b      	ldr	r3, [r7, #4]
   14552:	69db      	ldr	r3, [r3, #28]
   14554:	461a      	mov	r2, r3
   14556:	687b      	ldr	r3, [r7, #4]
   14558:	639a      	str	r2, [r3, #56]	; 0x38
	coupleKey.i2cDescr=ptrI2CAsynDescr;
   1455a:	687b      	ldr	r3, [r7, #4]
   1455c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1455e:	687b      	ldr	r3, [r7, #4]
   14560:	635a      	str	r2, [r3, #52]	; 0x34
	coupleKey.dummy=(uint32_t)ptrClass;
   14562:	687b      	ldr	r3, [r7, #4]
   14564:	69db      	ldr	r3, [r3, #28]
   14566:	461a      	mov	r2, r3
   14568:	687b      	ldr	r3, [r7, #4]
   1456a:	631a      	str	r2, [r3, #48]	; 0x30
	AddI2CObject(coupleKey);
   1456c:	687a      	ldr	r2, [r7, #4]
   1456e:	687b      	ldr	r3, [r7, #4]
   14570:	332c      	adds	r3, #44	; 0x2c
   14572:	4619      	mov	r1, r3
   14574:	4610      	mov	r0, r2
   14576:	4b14      	ldr	r3, [pc, #80]	; (145c8 <_ZN14I2C_Asyn_Class4InitEv+0xc8>)
   14578:	4798      	blx	r3
	txReady=true;
   1457a:	687b      	ldr	r3, [r7, #4]
   1457c:	2201      	movs	r2, #1
   1457e:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   14580:	687b      	ldr	r3, [r7, #4]
   14582:	2201      	movs	r2, #1
   14584:	755a      	strb	r2, [r3, #21]
	isOK=ena==0;
   14586:	7bfb      	ldrb	r3, [r7, #15]
   14588:	2b00      	cmp	r3, #0
   1458a:	bf0c      	ite	eq
   1458c:	2301      	moveq	r3, #1
   1458e:	2300      	movne	r3, #0
   14590:	b2da      	uxtb	r2, r3
   14592:	687b      	ldr	r3, [r7, #4]
   14594:	761a      	strb	r2, [r3, #24]
	initiated=isOK;
   14596:	687b      	ldr	r3, [r7, #4]
   14598:	7e1b      	ldrb	r3, [r3, #24]
   1459a:	b2da      	uxtb	r2, r3
   1459c:	687b      	ldr	r3, [r7, #4]
   1459e:	759a      	strb	r2, [r3, #22]
	return isOK;
   145a0:	687b      	ldr	r3, [r7, #4]
   145a2:	7e1b      	ldrb	r3, [r3, #24]
   145a4:	b2db      	uxtb	r3, r3
	
}
   145a6:	4618      	mov	r0, r3
   145a8:	3710      	adds	r7, #16
   145aa:	46bd      	mov	sp, r7
   145ac:	bd80      	pop	{r7, pc}
   145ae:	bf00      	nop
   145b0:	0000654f 	.word	0x0000654f
   145b4:	00006461 	.word	0x00006461
   145b8:	000143ad 	.word	0x000143ad
   145bc:	00006507 	.word	0x00006507
   145c0:	000143d5 	.word	0x000143d5
   145c4:	000143fd 	.word	0x000143fd
   145c8:	00014739 	.word	0x00014739

000145cc <_ZN14I2C_Asyn_Class4InitEh>:
bool	I2C_Asyn_Class::Init(uint8_t add){
   145cc:	b580      	push	{r7, lr}
   145ce:	b082      	sub	sp, #8
   145d0:	af00      	add	r7, sp, #0
   145d2:	6078      	str	r0, [r7, #4]
   145d4:	460b      	mov	r3, r1
   145d6:	70fb      	strb	r3, [r7, #3]
	isOK=Init();
   145d8:	6878      	ldr	r0, [r7, #4]
   145da:	4b0e      	ldr	r3, [pc, #56]	; (14614 <_ZN14I2C_Asyn_Class4InitEh+0x48>)
   145dc:	4798      	blx	r3
   145de:	4603      	mov	r3, r0
   145e0:	461a      	mov	r2, r3
   145e2:	687b      	ldr	r3, [r7, #4]
   145e4:	761a      	strb	r2, [r3, #24]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   145e6:	687b      	ldr	r3, [r7, #4]
   145e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   145ea:	78fa      	ldrb	r2, [r7, #3]
   145ec:	b211      	sxth	r1, r2
   145ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   145f2:	4618      	mov	r0, r3
   145f4:	4b08      	ldr	r3, [pc, #32]	; (14618 <_ZN14I2C_Asyn_Class4InitEh+0x4c>)
   145f6:	4798      	blx	r3
	txReady=true;
   145f8:	687b      	ldr	r3, [r7, #4]
   145fa:	2201      	movs	r2, #1
   145fc:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   145fe:	687b      	ldr	r3, [r7, #4]
   14600:	2201      	movs	r2, #1
   14602:	755a      	strb	r2, [r3, #21]
	return isOK;
   14604:	687b      	ldr	r3, [r7, #4]
   14606:	7e1b      	ldrb	r3, [r3, #24]
   14608:	b2db      	uxtb	r3, r3
}
   1460a:	4618      	mov	r0, r3
   1460c:	3708      	adds	r7, #8
   1460e:	46bd      	mov	sp, r7
   14610:	bd80      	pop	{r7, pc}
   14612:	bf00      	nop
   14614:	00014501 	.word	0x00014501
   14618:	000064cd 	.word	0x000064cd

0001461c <_ZN14I2C_Asyn_Class13Set_slaveaddrEh>:
	txReady=true;
	rxReady=true;
	return ena==0;
}

int32_t	I2C_Asyn_Class::Set_slaveaddr(uint8_t add){
   1461c:	b580      	push	{r7, lr}
   1461e:	b082      	sub	sp, #8
   14620:	af00      	add	r7, sp, #0
   14622:	6078      	str	r0, [r7, #4]
   14624:	460b      	mov	r3, r1
   14626:	70fb      	strb	r3, [r7, #3]
	return i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   14628:	687b      	ldr	r3, [r7, #4]
   1462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1462c:	78fa      	ldrb	r2, [r7, #3]
   1462e:	b211      	sxth	r1, r2
   14630:	f44f 6200 	mov.w	r2, #2048	; 0x800
   14634:	4618      	mov	r0, r3
   14636:	4b03      	ldr	r3, [pc, #12]	; (14644 <_ZN14I2C_Asyn_Class13Set_slaveaddrEh+0x28>)
   14638:	4798      	blx	r3
   1463a:	4603      	mov	r3, r0
}
   1463c:	4618      	mov	r0, r3
   1463e:	3708      	adds	r7, #8
   14640:	46bd      	mov	sp, r7
   14642:	bd80      	pop	{r7, pc}
   14644:	000064cd 	.word	0x000064cd

00014648 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
   14648:	b580      	push	{r7, lr}
   1464a:	b084      	sub	sp, #16
   1464c:	af00      	add	r7, sp, #0
   1464e:	60f8      	str	r0, [r7, #12]
   14650:	60b9      	str	r1, [r7, #8]
   14652:	4613      	mov	r3, r2
   14654:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
   14656:	68fb      	ldr	r3, [r7, #12]
   14658:	7d1b      	ldrb	r3, [r3, #20]
   1465a:	b2db      	uxtb	r3, r3
   1465c:	f083 0301 	eor.w	r3, r3, #1
   14660:	b2db      	uxtb	r3, r3
   14662:	2b00      	cmp	r3, #0
   14664:	d000      	beq.n	14668 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
   14666:	e7f6      	b.n	14656 <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
   14668:	68fb      	ldr	r3, [r7, #12]
   1466a:	2200      	movs	r2, #0
   1466c:	751a      	strb	r2, [r3, #20]
	return io_write(I2C_io, buffer, lenght);
   1466e:	68fb      	ldr	r3, [r7, #12]
   14670:	6a1b      	ldr	r3, [r3, #32]
   14672:	88fa      	ldrh	r2, [r7, #6]
   14674:	68b9      	ldr	r1, [r7, #8]
   14676:	4618      	mov	r0, r3
   14678:	4b03      	ldr	r3, [pc, #12]	; (14688 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
   1467a:	4798      	blx	r3
   1467c:	4603      	mov	r3, r0
}
   1467e:	4618      	mov	r0, r3
   14680:	3710      	adds	r7, #16
   14682:	46bd      	mov	sp, r7
   14684:	bd80      	pop	{r7, pc}
   14686:	bf00      	nop
   14688:	00018751 	.word	0x00018751

0001468c <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
   1468c:	b580      	push	{r7, lr}
   1468e:	b084      	sub	sp, #16
   14690:	af00      	add	r7, sp, #0
   14692:	60f8      	str	r0, [r7, #12]
   14694:	60b9      	str	r1, [r7, #8]
   14696:	4613      	mov	r3, r2
   14698:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
   1469a:	68fb      	ldr	r3, [r7, #12]
   1469c:	7d5b      	ldrb	r3, [r3, #21]
   1469e:	b2db      	uxtb	r3, r3
   146a0:	f083 0301 	eor.w	r3, r3, #1
   146a4:	b2db      	uxtb	r3, r3
   146a6:	2b00      	cmp	r3, #0
   146a8:	d000      	beq.n	146ac <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
   146aa:	e7f6      	b.n	1469a <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
   146ac:	68fb      	ldr	r3, [r7, #12]
   146ae:	2200      	movs	r2, #0
   146b0:	755a      	strb	r2, [r3, #21]
		return io_read(I2C_io, buffer, lenght);
   146b2:	68fb      	ldr	r3, [r7, #12]
   146b4:	6a1b      	ldr	r3, [r3, #32]
   146b6:	88fa      	ldrh	r2, [r7, #6]
   146b8:	68b9      	ldr	r1, [r7, #8]
   146ba:	4618      	mov	r0, r3
   146bc:	4b03      	ldr	r3, [pc, #12]	; (146cc <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
   146be:	4798      	blx	r3
   146c0:	4603      	mov	r3, r0
}
   146c2:	4618      	mov	r0, r3
   146c4:	3710      	adds	r7, #16
   146c6:	46bd      	mov	sp, r7
   146c8:	bd80      	pop	{r7, pc}
   146ca:	bf00      	nop
   146cc:	000187a1 	.word	0x000187a1

000146d0 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
   146d0:	b480      	push	{r7}
   146d2:	b083      	sub	sp, #12
   146d4:	af00      	add	r7, sp, #0
   146d6:	6078      	str	r0, [r7, #4]
	 ack=false;
   146d8:	687b      	ldr	r3, [r7, #4]
   146da:	2200      	movs	r2, #0
   146dc:	75da      	strb	r2, [r3, #23]
	 return ack;
   146de:	687b      	ldr	r3, [r7, #4]
   146e0:	7ddb      	ldrb	r3, [r3, #23]
   146e2:	b2db      	uxtb	r3, r3
 }
   146e4:	4618      	mov	r0, r3
   146e6:	370c      	adds	r7, #12
   146e8:	46bd      	mov	sp, r7
   146ea:	bc80      	pop	{r7}
   146ec:	4770      	bx	lr

000146ee <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
   146ee:	b480      	push	{r7}
   146f0:	b083      	sub	sp, #12
   146f2:	af00      	add	r7, sp, #0
   146f4:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
   146f6:	687b      	ldr	r3, [r7, #4]
   146f8:	681b      	ldr	r3, [r3, #0]
}
   146fa:	4618      	mov	r0, r3
   146fc:	370c      	adds	r7, #12
   146fe:	46bd      	mov	sp, r7
   14700:	bc80      	pop	{r7}
   14702:	4770      	bx	lr

00014704 <_ZN14I2C_ObjectListC1Ev>:

#include "I2C_ObjectList.h"
#include "I2C_Asyn_Class.h"

// default constructor
I2C_ObjectList::I2C_ObjectList()
   14704:	b480      	push	{r7}
   14706:	b083      	sub	sp, #12
   14708:	af00      	add	r7, sp, #0
   1470a:	6078      	str	r0, [r7, #4]
{
	objList=&i2cList;
   1470c:	687b      	ldr	r3, [r7, #4]
   1470e:	4a04      	ldr	r2, [pc, #16]	; (14720 <_ZN14I2C_ObjectListC1Ev+0x1c>)
   14710:	611a      	str	r2, [r3, #16]
} //I2C_ObjectList
   14712:	687b      	ldr	r3, [r7, #4]
   14714:	4618      	mov	r0, r3
   14716:	370c      	adds	r7, #12
   14718:	46bd      	mov	sp, r7
   1471a:	bc80      	pop	{r7}
   1471c:	4770      	bx	lr
   1471e:	bf00      	nop
   14720:	200097c4 	.word	0x200097c4

00014724 <_ZN14I2C_ObjectListD1Ev>:

// default destructor
I2C_ObjectList::~I2C_ObjectList()
   14724:	b480      	push	{r7}
   14726:	b083      	sub	sp, #12
   14728:	af00      	add	r7, sp, #0
   1472a:	6078      	str	r0, [r7, #4]
{
} //~I2C_ObjectList
   1472c:	687b      	ldr	r3, [r7, #4]
   1472e:	4618      	mov	r0, r3
   14730:	370c      	adds	r7, #12
   14732:	46bd      	mov	sp, r7
   14734:	bc80      	pop	{r7}
   14736:	4770      	bx	lr

00014738 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor>:

int I2C_ObjectList::AddI2CObject(I2CPointerAndDescriptor& ck ){
   14738:	b580      	push	{r7, lr}
   1473a:	b082      	sub	sp, #8
   1473c:	af00      	add	r7, sp, #0
   1473e:	6078      	str	r0, [r7, #4]
   14740:	6039      	str	r1, [r7, #0]
	
		ASSERT((objList)&&(&ck));
   14742:	687b      	ldr	r3, [r7, #4]
   14744:	691b      	ldr	r3, [r3, #16]
   14746:	2b00      	cmp	r3, #0
   14748:	d004      	beq.n	14754 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   1474a:	683b      	ldr	r3, [r7, #0]
   1474c:	2b00      	cmp	r3, #0
   1474e:	d001      	beq.n	14754 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   14750:	2301      	movs	r3, #1
   14752:	e000      	b.n	14756 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1e>
   14754:	2300      	movs	r3, #0
   14756:	2219      	movs	r2, #25
   14758:	4910      	ldr	r1, [pc, #64]	; (1479c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   1475a:	4618      	mov	r0, r3
   1475c:	4b10      	ldr	r3, [pc, #64]	; (147a0 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   1475e:	4798      	blx	r3
		if (is_list_element(objList,&ck)) {
   14760:	687b      	ldr	r3, [r7, #4]
   14762:	691b      	ldr	r3, [r3, #16]
   14764:	6839      	ldr	r1, [r7, #0]
   14766:	4618      	mov	r0, r3
   14768:	4b0e      	ldr	r3, [pc, #56]	; (147a4 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x6c>)
   1476a:	4798      	blx	r3
   1476c:	4603      	mov	r3, r0
   1476e:	2b00      	cmp	r3, #0
   14770:	d007      	beq.n	14782 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x4a>

			ASSERT(false);
   14772:	221c      	movs	r2, #28
   14774:	4909      	ldr	r1, [pc, #36]	; (1479c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   14776:	2000      	movs	r0, #0
   14778:	4b09      	ldr	r3, [pc, #36]	; (147a0 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   1477a:	4798      	blx	r3
			return ERR_ALREADY_INITIALIZED;
   1477c:	f06f 0311 	mvn.w	r3, #17
   14780:	e007      	b.n	14792 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x5a>
		}
		AddObject(objList,&ck);
   14782:	687b      	ldr	r3, [r7, #4]
   14784:	691b      	ldr	r3, [r3, #16]
   14786:	683a      	ldr	r2, [r7, #0]
   14788:	4619      	mov	r1, r3
   1478a:	6878      	ldr	r0, [r7, #4]
   1478c:	4b06      	ldr	r3, [pc, #24]	; (147a8 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x70>)
   1478e:	4798      	blx	r3
		return ERR_NONE;
   14790:	2300      	movs	r3, #0
}
   14792:	4618      	mov	r0, r3
   14794:	3708      	adds	r7, #8
   14796:	46bd      	mov	sp, r7
   14798:	bd80      	pop	{r7, pc}
   1479a:	bf00      	nop
   1479c:	00020a64 	.word	0x00020a64
   147a0:	00007d91 	.word	0x00007d91
   147a4:	00007db9 	.word	0x00007db9
   147a8:	000147ad 	.word	0x000147ad

000147ac <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor>:
		coupleKey.i2cDescr=ptrI2C;
		ck=coupleKey;
			
}

void I2C_ObjectList::AddObject(list_descriptor *list,I2CPointerAndDescriptor* nck){
   147ac:	b580      	push	{r7, lr}
   147ae:	b086      	sub	sp, #24
   147b0:	af00      	add	r7, sp, #0
   147b2:	60f8      	str	r0, [r7, #12]
   147b4:	60b9      	str	r1, [r7, #8]
   147b6:	607a      	str	r2, [r7, #4]
		I2CPointerAndDescriptor *it, *head = (I2CPointerAndDescriptor *)list_get_head(list);
   147b8:	68b8      	ldr	r0, [r7, #8]
   147ba:	4b09      	ldr	r3, [pc, #36]	; (147e0 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x34>)
   147bc:	4798      	blx	r3
   147be:	6178      	str	r0, [r7, #20]

		if (!head) {
   147c0:	697b      	ldr	r3, [r7, #20]
   147c2:	2b00      	cmp	r3, #0
   147c4:	d104      	bne.n	147d0 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x24>
			list_insert_as_head(list, nck);
   147c6:	6879      	ldr	r1, [r7, #4]
   147c8:	68b8      	ldr	r0, [r7, #8]
   147ca:	4b06      	ldr	r3, [pc, #24]	; (147e4 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x38>)
   147cc:	4798      	blx	r3
			return;
   147ce:	e003      	b.n	147d8 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x2c>
		}else{
			list_insert_at_end(list,nck);
   147d0:	6879      	ldr	r1, [r7, #4]
   147d2:	68b8      	ldr	r0, [r7, #8]
   147d4:	4b04      	ldr	r3, [pc, #16]	; (147e8 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x3c>)
   147d6:	4798      	blx	r3
		}
}
   147d8:	3718      	adds	r7, #24
   147da:	46bd      	mov	sp, r7
   147dc:	bd80      	pop	{r7, pc}
   147de:	bf00      	nop
   147e0:	000146ef 	.word	0x000146ef
   147e4:	00007df1 	.word	0x00007df1
   147e8:	00007e6d 	.word	0x00007e6d

000147ec <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc>:

uint32_t I2C_ObjectList::GetClassPointer(i2c_m_async_desc*	i2cDescr){
   147ec:	b480      	push	{r7}
   147ee:	b087      	sub	sp, #28
   147f0:	af00      	add	r7, sp, #0
   147f2:	6078      	str	r0, [r7, #4]
   147f4:	6039      	str	r1, [r7, #0]
		struct list_element *it;
		//I2CPointerAndDescriptor *it;
		I2CPointerAndDescriptor *k;
		uint32_t ptr;
		for (it = objList->head; it; it = it->next) {
   147f6:	687b      	ldr	r3, [r7, #4]
   147f8:	691b      	ldr	r3, [r3, #16]
   147fa:	681b      	ldr	r3, [r3, #0]
   147fc:	617b      	str	r3, [r7, #20]
   147fe:	697b      	ldr	r3, [r7, #20]
   14800:	2b00      	cmp	r3, #0
   14802:	d00f      	beq.n	14824 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x38>
			k=(I2CPointerAndDescriptor*)it;
   14804:	697b      	ldr	r3, [r7, #20]
   14806:	613b      	str	r3, [r7, #16]
			
			if (k->i2cDescr== i2cDescr){
   14808:	693b      	ldr	r3, [r7, #16]
   1480a:	689a      	ldr	r2, [r3, #8]
   1480c:	683b      	ldr	r3, [r7, #0]
   1480e:	429a      	cmp	r2, r3
   14810:	d104      	bne.n	1481c <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x30>
				ptr=k->ptrI2CAsynClass;
   14812:	693b      	ldr	r3, [r7, #16]
   14814:	68db      	ldr	r3, [r3, #12]
   14816:	60fb      	str	r3, [r7, #12]
				return ptr;
   14818:	68fb      	ldr	r3, [r7, #12]
   1481a:	e004      	b.n	14826 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x3a>
		for (it = objList->head; it; it = it->next) {
   1481c:	697b      	ldr	r3, [r7, #20]
   1481e:	681b      	ldr	r3, [r3, #0]
   14820:	617b      	str	r3, [r7, #20]
   14822:	e7ec      	b.n	147fe <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x12>
			}
		}

		return 0;
   14824:	2300      	movs	r3, #0
   14826:	4618      	mov	r0, r3
   14828:	371c      	adds	r7, #28
   1482a:	46bd      	mov	sp, r7
   1482c:	bc80      	pop	{r7}
   1482e:	4770      	bx	lr

00014830 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   14830:	b480      	push	{r7}
   14832:	b083      	sub	sp, #12
   14834:	af00      	add	r7, sp, #0
   14836:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   14838:	687b      	ldr	r3, [r7, #4]
   1483a:	4618      	mov	r0, r3
   1483c:	370c      	adds	r7, #12
   1483e:	46bd      	mov	sp, r7
   14840:	bc80      	pop	{r7}
   14842:	4770      	bx	lr

00014844 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   14844:	b480      	push	{r7}
   14846:	b083      	sub	sp, #12
   14848:	af00      	add	r7, sp, #0
   1484a:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   1484c:	687b      	ldr	r3, [r7, #4]
   1484e:	4618      	mov	r0, r3
   14850:	370c      	adds	r7, #12
   14852:	46bd      	mov	sp, r7
   14854:	bc80      	pop	{r7}
   14856:	4770      	bx	lr

00014858 <_ZN14MCP23008_Class4InitEhP14I2C_Asyn_Class>:
	//i2ca.Set_descriptor(ptrI2CDescr);
	//isReady=i2ca.Init(addr)==0;
	//ext_irq_register(PIN_PA04,FUNC_PTR(MCPHadChanged));
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Asyn_Class *i2c){
   14858:	b480      	push	{r7}
   1485a:	b085      	sub	sp, #20
   1485c:	af00      	add	r7, sp, #0
   1485e:	60f8      	str	r0, [r7, #12]
   14860:	460b      	mov	r3, r1
   14862:	607a      	str	r2, [r7, #4]
   14864:	72fb      	strb	r3, [r7, #11]
	i2cAddress=addr;
   14866:	68fb      	ldr	r3, [r7, #12]
   14868:	7afa      	ldrb	r2, [r7, #11]
   1486a:	73da      	strb	r2, [r3, #15]
	i2cClass=i2c;
   1486c:	68fb      	ldr	r3, [r7, #12]
   1486e:	687a      	ldr	r2, [r7, #4]
   14870:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
   14872:	68fb      	ldr	r3, [r7, #12]
   14874:	691b      	ldr	r3, [r3, #16]
   14876:	7e1b      	ldrb	r3, [r3, #24]
   14878:	b2da      	uxtb	r2, r3
   1487a:	68fb      	ldr	r3, [r7, #12]
   1487c:	735a      	strb	r2, [r3, #13]

	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   1487e:	bf00      	nop
   14880:	4618      	mov	r0, r3
   14882:	3714      	adds	r7, #20
   14884:	46bd      	mov	sp, r7
   14886:	bc80      	pop	{r7}
   14888:	4770      	bx	lr
	...

0001488c <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   1488c:	b580      	push	{r7, lr}
   1488e:	b082      	sub	sp, #8
   14890:	af00      	add	r7, sp, #0
   14892:	6078      	str	r0, [r7, #4]
   14894:	460b      	mov	r3, r1
   14896:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->Write(&addr,1);
   14898:	687b      	ldr	r3, [r7, #4]
   1489a:	691b      	ldr	r3, [r3, #16]
   1489c:	1cf9      	adds	r1, r7, #3
   1489e:	2201      	movs	r2, #1
   148a0:	4618      	mov	r0, r3
   148a2:	4b12      	ldr	r3, [pc, #72]	; (148ec <_ZN14MCP23008_Class12readRegisterEh+0x60>)
   148a4:	4798      	blx	r3
	while(!i2cClass->txReady);
   148a6:	687b      	ldr	r3, [r7, #4]
   148a8:	691b      	ldr	r3, [r3, #16]
   148aa:	7d1b      	ldrb	r3, [r3, #20]
   148ac:	b2db      	uxtb	r3, r3
   148ae:	f083 0301 	eor.w	r3, r3, #1
   148b2:	b2db      	uxtb	r3, r3
   148b4:	2b00      	cmp	r3, #0
   148b6:	d000      	beq.n	148ba <_ZN14MCP23008_Class12readRegisterEh+0x2e>
   148b8:	e7f5      	b.n	148a6 <_ZN14MCP23008_Class12readRegisterEh+0x1a>
	i2cClass->Read(&registerValue,1);
   148ba:	687b      	ldr	r3, [r7, #4]
   148bc:	6918      	ldr	r0, [r3, #16]
   148be:	687b      	ldr	r3, [r7, #4]
   148c0:	3307      	adds	r3, #7
   148c2:	2201      	movs	r2, #1
   148c4:	4619      	mov	r1, r3
   148c6:	4b0a      	ldr	r3, [pc, #40]	; (148f0 <_ZN14MCP23008_Class12readRegisterEh+0x64>)
   148c8:	4798      	blx	r3
	while(!i2cClass->rxReady);
   148ca:	687b      	ldr	r3, [r7, #4]
   148cc:	691b      	ldr	r3, [r3, #16]
   148ce:	7d5b      	ldrb	r3, [r3, #21]
   148d0:	b2db      	uxtb	r3, r3
   148d2:	f083 0301 	eor.w	r3, r3, #1
   148d6:	b2db      	uxtb	r3, r3
   148d8:	2b00      	cmp	r3, #0
   148da:	d000      	beq.n	148de <_ZN14MCP23008_Class12readRegisterEh+0x52>
   148dc:	e7f5      	b.n	148ca <_ZN14MCP23008_Class12readRegisterEh+0x3e>
	return registerValue;
   148de:	687b      	ldr	r3, [r7, #4]
   148e0:	79db      	ldrb	r3, [r3, #7]
}
   148e2:	4618      	mov	r0, r3
   148e4:	3708      	adds	r7, #8
   148e6:	46bd      	mov	sp, r7
   148e8:	bd80      	pop	{r7, pc}
   148ea:	bf00      	nop
   148ec:	00014649 	.word	0x00014649
   148f0:	0001468d 	.word	0x0001468d

000148f4 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->Set_slaveaddr(add);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   148f4:	b580      	push	{r7, lr}
   148f6:	b082      	sub	sp, #8
   148f8:	af00      	add	r7, sp, #0
   148fa:	6078      	str	r0, [r7, #4]
	i2cClass->Set_slaveaddr(i2cAddress);
   148fc:	687b      	ldr	r3, [r7, #4]
   148fe:	691a      	ldr	r2, [r3, #16]
   14900:	687b      	ldr	r3, [r7, #4]
   14902:	7bdb      	ldrb	r3, [r3, #15]
   14904:	4619      	mov	r1, r3
   14906:	4610      	mov	r0, r2
   14908:	4b05      	ldr	r3, [pc, #20]	; (14920 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x2c>)
   1490a:	4798      	blx	r3
	return readRegister(MCP23008_GPIOA);
   1490c:	2109      	movs	r1, #9
   1490e:	6878      	ldr	r0, [r7, #4]
   14910:	4b04      	ldr	r3, [pc, #16]	; (14924 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   14912:	4798      	blx	r3
   14914:	4603      	mov	r3, r0
}
   14916:	4618      	mov	r0, r3
   14918:	3708      	adds	r7, #8
   1491a:	46bd      	mov	sp, r7
   1491c:	bd80      	pop	{r7, pc}
   1491e:	bf00      	nop
   14920:	0001461d 	.word	0x0001461d
   14924:	0001488d 	.word	0x0001488d

00014928 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
void MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   14928:	b580      	push	{r7, lr}
   1492a:	b084      	sub	sp, #16
   1492c:	af00      	add	r7, sp, #0
   1492e:	6078      	str	r0, [r7, #4]
   14930:	460b      	mov	r3, r1
   14932:	70fb      	strb	r3, [r7, #3]
   14934:	4613      	mov	r3, r2
   14936:	70bb      	strb	r3, [r7, #2]
	// Write the register

	uint8_t array[2];
	array[0]=addr;
   14938:	78fb      	ldrb	r3, [r7, #3]
   1493a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   1493c:	78bb      	ldrb	r3, [r7, #2]
   1493e:	737b      	strb	r3, [r7, #13]
	i2cClass->Write(array,2);
   14940:	687b      	ldr	r3, [r7, #4]
   14942:	691b      	ldr	r3, [r3, #16]
   14944:	f107 010c 	add.w	r1, r7, #12
   14948:	2202      	movs	r2, #2
   1494a:	4618      	mov	r0, r3
   1494c:	4b02      	ldr	r3, [pc, #8]	; (14958 <_ZN14MCP23008_Class13writeRegisterEhh+0x30>)
   1494e:	4798      	blx	r3
	//while(!(i2cClass->txReady));
}
   14950:	bf00      	nop
   14952:	3710      	adds	r7, #16
   14954:	46bd      	mov	sp, r7
   14956:	bd80      	pop	{r7, pc}
   14958:	00014649 	.word	0x00014649

0001495c <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   1495c:	b580      	push	{r7, lr}
   1495e:	b082      	sub	sp, #8
   14960:	af00      	add	r7, sp, #0
   14962:	6078      	str	r0, [r7, #4]
   14964:	460b      	mov	r3, r1
   14966:	70fb      	strb	r3, [r7, #3]
	i2cClass->Set_slaveaddr(i2cAddress);
   14968:	687b      	ldr	r3, [r7, #4]
   1496a:	691a      	ldr	r2, [r3, #16]
   1496c:	687b      	ldr	r3, [r7, #4]
   1496e:	7bdb      	ldrb	r3, [r3, #15]
   14970:	4619      	mov	r1, r3
   14972:	4610      	mov	r0, r2
   14974:	4b06      	ldr	r3, [pc, #24]	; (14990 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   14976:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   14978:	78fb      	ldrb	r3, [r7, #3]
   1497a:	461a      	mov	r2, r3
   1497c:	2109      	movs	r1, #9
   1497e:	6878      	ldr	r0, [r7, #4]
   14980:	4b04      	ldr	r3, [pc, #16]	; (14994 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   14982:	4798      	blx	r3
	return v;
   14984:	78fb      	ldrb	r3, [r7, #3]
}
   14986:	4618      	mov	r0, r3
   14988:	3708      	adds	r7, #8
   1498a:	46bd      	mov	sp, r7
   1498c:	bd80      	pop	{r7, pc}
   1498e:	bf00      	nop
   14990:	0001461d 	.word	0x0001461d
   14994:	00014929 	.word	0x00014929

00014998 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc>:

MCP23017_Class::MCP23017_Class()
{
	ptrMCP23017Class=this;
} //AT24MAC_Class
MCP23017_Class::MCP23017_Class(i2c_m_async_desc *i2c)
   14998:	b580      	push	{r7, lr}
   1499a:	b082      	sub	sp, #8
   1499c:	af00      	add	r7, sp, #0
   1499e:	6078      	str	r0, [r7, #4]
   149a0:	6039      	str	r1, [r7, #0]
   149a2:	687b      	ldr	r3, [r7, #4]
   149a4:	3304      	adds	r3, #4
   149a6:	4618      	mov	r0, r3
   149a8:	4b06      	ldr	r3, [pc, #24]	; (149c4 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x2c>)
   149aa:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   149ac:	687b      	ldr	r3, [r7, #4]
   149ae:	683a      	ldr	r2, [r7, #0]
   149b0:	641a      	str	r2, [r3, #64]	; 0x40
	ptrMCP23017Class=this;
   149b2:	4a05      	ldr	r2, [pc, #20]	; (149c8 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x30>)
   149b4:	687b      	ldr	r3, [r7, #4]
   149b6:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   149b8:	687b      	ldr	r3, [r7, #4]
   149ba:	4618      	mov	r0, r3
   149bc:	3708      	adds	r7, #8
   149be:	46bd      	mov	sp, r7
   149c0:	bd80      	pop	{r7, pc}
   149c2:	bf00      	nop
   149c4:	00014439 	.word	0x00014439
   149c8:	200097c8 	.word	0x200097c8

000149cc <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
   149cc:	b580      	push	{r7, lr}
   149ce:	b082      	sub	sp, #8
   149d0:	af00      	add	r7, sp, #0
   149d2:	6078      	str	r0, [r7, #4]
   149d4:	687b      	ldr	r3, [r7, #4]
   149d6:	3304      	adds	r3, #4
   149d8:	4618      	mov	r0, r3
   149da:	4b03      	ldr	r3, [pc, #12]	; (149e8 <_ZN14MCP23017_ClassD1Ev+0x1c>)
   149dc:	4798      	blx	r3
{
} //~AT24MAC_Class
   149de:	687b      	ldr	r3, [r7, #4]
   149e0:	4618      	mov	r0, r3
   149e2:	3708      	adds	r7, #8
   149e4:	46bd      	mov	sp, r7
   149e6:	bd80      	pop	{r7, pc}
   149e8:	000144b5 	.word	0x000144b5

000149ec <_ZN14MCP23017_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23017_Class::readRegister(uint8_t addr){
   149ec:	b580      	push	{r7, lr}
   149ee:	b082      	sub	sp, #8
   149f0:	af00      	add	r7, sp, #0
   149f2:	6078      	str	r0, [r7, #4]
   149f4:	460b      	mov	r3, r1
   149f6:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   149f8:	687b      	ldr	r3, [r7, #4]
   149fa:	3304      	adds	r3, #4
   149fc:	1cf9      	adds	r1, r7, #3
   149fe:	2201      	movs	r2, #1
   14a00:	4618      	mov	r0, r3
   14a02:	4b11      	ldr	r3, [pc, #68]	; (14a48 <_ZN14MCP23017_Class12readRegisterEh+0x5c>)
   14a04:	4798      	blx	r3
	while(!i2ca.txReady);
   14a06:	687b      	ldr	r3, [r7, #4]
   14a08:	7e1b      	ldrb	r3, [r3, #24]
   14a0a:	b2db      	uxtb	r3, r3
   14a0c:	f083 0301 	eor.w	r3, r3, #1
   14a10:	b2db      	uxtb	r3, r3
   14a12:	2b00      	cmp	r3, #0
   14a14:	d000      	beq.n	14a18 <_ZN14MCP23017_Class12readRegisterEh+0x2c>
   14a16:	e7f6      	b.n	14a06 <_ZN14MCP23017_Class12readRegisterEh+0x1a>
	i2ca.Read(&registerValue,1);
   14a18:	687b      	ldr	r3, [r7, #4]
   14a1a:	1d18      	adds	r0, r3, #4
   14a1c:	687b      	ldr	r3, [r7, #4]
   14a1e:	3348      	adds	r3, #72	; 0x48
   14a20:	2201      	movs	r2, #1
   14a22:	4619      	mov	r1, r3
   14a24:	4b09      	ldr	r3, [pc, #36]	; (14a4c <_ZN14MCP23017_Class12readRegisterEh+0x60>)
   14a26:	4798      	blx	r3
	while(!i2ca.rxReady);
   14a28:	687b      	ldr	r3, [r7, #4]
   14a2a:	7e5b      	ldrb	r3, [r3, #25]
   14a2c:	b2db      	uxtb	r3, r3
   14a2e:	f083 0301 	eor.w	r3, r3, #1
   14a32:	b2db      	uxtb	r3, r3
   14a34:	2b00      	cmp	r3, #0
   14a36:	d000      	beq.n	14a3a <_ZN14MCP23017_Class12readRegisterEh+0x4e>
   14a38:	e7f6      	b.n	14a28 <_ZN14MCP23017_Class12readRegisterEh+0x3c>
	return registerValue;
   14a3a:	687b      	ldr	r3, [r7, #4]
   14a3c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
   14a40:	4618      	mov	r0, r3
   14a42:	3708      	adds	r7, #8
   14a44:	46bd      	mov	sp, r7
   14a46:	bd80      	pop	{r7, pc}
   14a48:	00014649 	.word	0x00014649
   14a4c:	0001468d 	.word	0x0001468d

00014a50 <_ZN14MCP23017_Class8readGPIOEh>:

/**
 * Read a single port, A or B, and return its current 8 bit value.
 * Parameter b should be 0 for GPIOA, and 1 for GPIOB.
 */
uint8_t MCP23017_Class::readGPIO(uint8_t b) {
   14a50:	b580      	push	{r7, lr}
   14a52:	b082      	sub	sp, #8
   14a54:	af00      	add	r7, sp, #0
   14a56:	6078      	str	r0, [r7, #4]
   14a58:	460b      	mov	r3, r1
   14a5a:	70fb      	strb	r3, [r7, #3]

	if (b == 0){
   14a5c:	78fb      	ldrb	r3, [r7, #3]
   14a5e:	2b00      	cmp	r3, #0
   14a60:	d10c      	bne.n	14a7c <_ZN14MCP23017_Class8readGPIOEh+0x2c>
		regAddress=MCP23017_GPIOA;
   14a62:	687b      	ldr	r3, [r7, #4]
   14a64:	2212      	movs	r2, #18
   14a66:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		i2ca.Write(&regAddress,1);
   14a6a:	687b      	ldr	r3, [r7, #4]
   14a6c:	1d18      	adds	r0, r3, #4
   14a6e:	687b      	ldr	r3, [r7, #4]
   14a70:	3349      	adds	r3, #73	; 0x49
   14a72:	2201      	movs	r2, #1
   14a74:	4619      	mov	r1, r3
   14a76:	4b18      	ldr	r3, [pc, #96]	; (14ad8 <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   14a78:	4798      	blx	r3
   14a7a:	e00b      	b.n	14a94 <_ZN14MCP23017_Class8readGPIOEh+0x44>
	}else {
		regAddress=MCP23017_GPIOB;
   14a7c:	687b      	ldr	r3, [r7, #4]
   14a7e:	2213      	movs	r2, #19
   14a80:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		i2ca.Write(&regAddress,1);
   14a84:	687b      	ldr	r3, [r7, #4]
   14a86:	1d18      	adds	r0, r3, #4
   14a88:	687b      	ldr	r3, [r7, #4]
   14a8a:	3349      	adds	r3, #73	; 0x49
   14a8c:	2201      	movs	r2, #1
   14a8e:	4619      	mov	r1, r3
   14a90:	4b11      	ldr	r3, [pc, #68]	; (14ad8 <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   14a92:	4798      	blx	r3
	}


		while(!i2ca.txReady);
   14a94:	687b      	ldr	r3, [r7, #4]
   14a96:	7e1b      	ldrb	r3, [r3, #24]
   14a98:	b2db      	uxtb	r3, r3
   14a9a:	f083 0301 	eor.w	r3, r3, #1
   14a9e:	b2db      	uxtb	r3, r3
   14aa0:	2b00      	cmp	r3, #0
   14aa2:	d000      	beq.n	14aa6 <_ZN14MCP23017_Class8readGPIOEh+0x56>
   14aa4:	e7f6      	b.n	14a94 <_ZN14MCP23017_Class8readGPIOEh+0x44>
		i2ca.Read(&registerValue,1);
   14aa6:	687b      	ldr	r3, [r7, #4]
   14aa8:	1d18      	adds	r0, r3, #4
   14aaa:	687b      	ldr	r3, [r7, #4]
   14aac:	3348      	adds	r3, #72	; 0x48
   14aae:	2201      	movs	r2, #1
   14ab0:	4619      	mov	r1, r3
   14ab2:	4b0a      	ldr	r3, [pc, #40]	; (14adc <_ZN14MCP23017_Class8readGPIOEh+0x8c>)
   14ab4:	4798      	blx	r3
		while(!i2ca.rxReady);
   14ab6:	687b      	ldr	r3, [r7, #4]
   14ab8:	7e5b      	ldrb	r3, [r3, #25]
   14aba:	b2db      	uxtb	r3, r3
   14abc:	f083 0301 	eor.w	r3, r3, #1
   14ac0:	b2db      	uxtb	r3, r3
   14ac2:	2b00      	cmp	r3, #0
   14ac4:	d000      	beq.n	14ac8 <_ZN14MCP23017_Class8readGPIOEh+0x78>
   14ac6:	e7f6      	b.n	14ab6 <_ZN14MCP23017_Class8readGPIOEh+0x66>
		return	registerValue;
   14ac8:	687b      	ldr	r3, [r7, #4]
   14aca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
   14ace:	4618      	mov	r0, r3
   14ad0:	3708      	adds	r7, #8
   14ad2:	46bd      	mov	sp, r7
   14ad4:	bd80      	pop	{r7, pc}
   14ad6:	bf00      	nop
   14ad8:	00014649 	.word	0x00014649
   14adc:	0001468d 	.word	0x0001468d

00014ae0 <_ZN14MCP23017_Class9SavePortsEv>:
	for(int i=0;i<8;i++) if (bitRead(intf,i)) return i+8;

	return MCP23017_INT_ERR;

}
uint8_t	MCP23017_Class::SavePorts(void){
   14ae0:	b580      	push	{r7, lr}
   14ae2:	b082      	sub	sp, #8
   14ae4:	af00      	add	r7, sp, #0
   14ae6:	6078      	str	r0, [r7, #4]
	portA=readGPIO(0);
   14ae8:	2100      	movs	r1, #0
   14aea:	6878      	ldr	r0, [r7, #4]
   14aec:	4b0f      	ldr	r3, [pc, #60]	; (14b2c <_ZN14MCP23017_Class9SavePortsEv+0x4c>)
   14aee:	4798      	blx	r3
   14af0:	4603      	mov	r3, r0
   14af2:	461a      	mov	r2, r3
   14af4:	687b      	ldr	r3, [r7, #4]
   14af6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	portB=readGPIO(1);
   14afa:	2101      	movs	r1, #1
   14afc:	6878      	ldr	r0, [r7, #4]
   14afe:	4b0b      	ldr	r3, [pc, #44]	; (14b2c <_ZN14MCP23017_Class9SavePortsEv+0x4c>)
   14b00:	4798      	blx	r3
   14b02:	4603      	mov	r3, r0
   14b04:	461a      	mov	r2, r3
   14b06:	687b      	ldr	r3, [r7, #4]
   14b08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	if (hasChanged)
   14b0c:	687b      	ldr	r3, [r7, #4]
   14b0e:	785b      	ldrb	r3, [r3, #1]
   14b10:	b2db      	uxtb	r3, r3
   14b12:	2b00      	cmp	r3, #0
   14b14:	d002      	beq.n	14b1c <_ZN14MCP23017_Class9SavePortsEv+0x3c>
	{
		ClearIntRegisters();
   14b16:	6878      	ldr	r0, [r7, #4]
   14b18:	4b05      	ldr	r3, [pc, #20]	; (14b30 <_ZN14MCP23017_Class9SavePortsEv+0x50>)
   14b1a:	4798      	blx	r3
	}
	return portA;
   14b1c:	687b      	ldr	r3, [r7, #4]
   14b1e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
}
   14b22:	4618      	mov	r0, r3
   14b24:	3708      	adds	r7, #8
   14b26:	46bd      	mov	sp, r7
   14b28:	bd80      	pop	{r7, pc}
   14b2a:	bf00      	nop
   14b2c:	00014a51 	.word	0x00014a51
   14b30:	00014b35 	.word	0x00014b35

00014b34 <_ZN14MCP23017_Class17ClearIntRegistersEv>:
void MCP23017_Class::ClearIntRegisters(){
   14b34:	b580      	push	{r7, lr}
   14b36:	b082      	sub	sp, #8
   14b38:	af00      	add	r7, sp, #0
   14b3a:	6078      	str	r0, [r7, #4]
		readRegister(MCP23017_INTCAPA);
   14b3c:	2110      	movs	r1, #16
   14b3e:	6878      	ldr	r0, [r7, #4]
   14b40:	4b04      	ldr	r3, [pc, #16]	; (14b54 <_ZN14MCP23017_Class17ClearIntRegistersEv+0x20>)
   14b42:	4798      	blx	r3
	readRegister(MCP23017_INTCAPB);
   14b44:	2111      	movs	r1, #17
   14b46:	6878      	ldr	r0, [r7, #4]
   14b48:	4b02      	ldr	r3, [pc, #8]	; (14b54 <_ZN14MCP23017_Class17ClearIntRegistersEv+0x20>)
   14b4a:	4798      	blx	r3
}
   14b4c:	bf00      	nop
   14b4e:	3708      	adds	r7, #8
   14b50:	46bd      	mov	sp, r7
   14b52:	bd80      	pop	{r7, pc}
   14b54:	000149ed 	.word	0x000149ed

00014b58 <_Z41__static_initialization_and_destruction_0ii>:
	{
		isOK=false;
	}
	return isOK;
}
   14b58:	b580      	push	{r7, lr}
   14b5a:	b082      	sub	sp, #8
   14b5c:	af00      	add	r7, sp, #0
   14b5e:	6078      	str	r0, [r7, #4]
   14b60:	6039      	str	r1, [r7, #0]
   14b62:	687b      	ldr	r3, [r7, #4]
   14b64:	2b01      	cmp	r3, #1
   14b66:	d10d      	bne.n	14b84 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   14b68:	683b      	ldr	r3, [r7, #0]
   14b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14b6e:	4293      	cmp	r3, r2
   14b70:	d108      	bne.n	14b84 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   14b72:	4906      	ldr	r1, [pc, #24]	; (14b8c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14b74:	4806      	ldr	r0, [pc, #24]	; (14b90 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14b76:	4b07      	ldr	r3, [pc, #28]	; (14b94 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   14b78:	4798      	blx	r3
   14b7a:	4a07      	ldr	r2, [pc, #28]	; (14b98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   14b7c:	4907      	ldr	r1, [pc, #28]	; (14b9c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   14b7e:	4804      	ldr	r0, [pc, #16]	; (14b90 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14b80:	4b07      	ldr	r3, [pc, #28]	; (14ba0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   14b82:	4798      	blx	r3
   14b84:	bf00      	nop
   14b86:	3708      	adds	r7, #8
   14b88:	46bd      	mov	sp, r7
   14b8a:	bd80      	pop	{r7, pc}
   14b8c:	2000a278 	.word	0x2000a278
   14b90:	200097cc 	.word	0x200097cc
   14b94:	00014999 	.word	0x00014999
   14b98:	20000000 	.word	0x20000000
   14b9c:	000149cd 	.word	0x000149cd
   14ba0:	000187f1 	.word	0x000187f1

00014ba4 <_GLOBAL__sub_I_ptrMCP23017Class>:
   14ba4:	b580      	push	{r7, lr}
   14ba6:	af00      	add	r7, sp, #0
   14ba8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14bac:	2001      	movs	r0, #1
   14bae:	4b01      	ldr	r3, [pc, #4]	; (14bb4 <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
   14bb0:	4798      	blx	r3
   14bb2:	bd80      	pop	{r7, pc}
   14bb4:	00014b59 	.word	0x00014b59

00014bb8 <_ZL15Converter1Readyv>:


#include "TemperatureSensors_Class.h"
TemperatureSensors_Class	*ptrTemperaturesClass;

static void Converter1Ready(void){
   14bb8:	b580      	push	{r7, lr}
   14bba:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[0]=true;
   14bbc:	4b06      	ldr	r3, [pc, #24]	; (14bd8 <_ZL15Converter1Readyv+0x20>)
   14bbe:	681b      	ldr	r3, [r3, #0]
   14bc0:	2201      	movs	r2, #1
   14bc2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	ptrTemperaturesClass->SetModuleReady(0);
   14bc6:	4b04      	ldr	r3, [pc, #16]	; (14bd8 <_ZL15Converter1Readyv+0x20>)
   14bc8:	681b      	ldr	r3, [r3, #0]
   14bca:	2100      	movs	r1, #0
   14bcc:	4618      	mov	r0, r3
   14bce:	4b03      	ldr	r3, [pc, #12]	; (14bdc <_ZL15Converter1Readyv+0x24>)
   14bd0:	4798      	blx	r3
}
   14bd2:	bf00      	nop
   14bd4:	bd80      	pop	{r7, pc}
   14bd6:	bf00      	nop
   14bd8:	2000981c 	.word	0x2000981c
   14bdc:	00014e3f 	.word	0x00014e3f

00014be0 <_ZL15Converter2Readyv>:
static void Converter2Ready(void){
   14be0:	b580      	push	{r7, lr}
   14be2:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[1]=true;
   14be4:	4b06      	ldr	r3, [pc, #24]	; (14c00 <_ZL15Converter2Readyv+0x20>)
   14be6:	681b      	ldr	r3, [r3, #0]
   14be8:	2201      	movs	r2, #1
   14bea:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	ptrTemperaturesClass->SetModuleReady(1);
   14bee:	4b04      	ldr	r3, [pc, #16]	; (14c00 <_ZL15Converter2Readyv+0x20>)
   14bf0:	681b      	ldr	r3, [r3, #0]
   14bf2:	2101      	movs	r1, #1
   14bf4:	4618      	mov	r0, r3
   14bf6:	4b03      	ldr	r3, [pc, #12]	; (14c04 <_ZL15Converter2Readyv+0x24>)
   14bf8:	4798      	blx	r3
}
   14bfa:	bf00      	nop
   14bfc:	bd80      	pop	{r7, pc}
   14bfe:	bf00      	nop
   14c00:	2000981c 	.word	0x2000981c
   14c04:	00014e3f 	.word	0x00014e3f

00014c08 <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor>:
// default constructor
TemperatureSensors_Class::TemperatureSensors_Class()
{
} //TemperatureSensors_Class
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_async_descriptor *SPI_LTC)
   14c08:	b5b0      	push	{r4, r5, r7, lr}
   14c0a:	b082      	sub	sp, #8
   14c0c:	af00      	add	r7, sp, #0
   14c0e:	6078      	str	r0, [r7, #4]
   14c10:	6039      	str	r1, [r7, #0]
   14c12:	687b      	ldr	r3, [r7, #4]
   14c14:	4618      	mov	r0, r3
   14c16:	4b10      	ldr	r3, [pc, #64]	; (14c58 <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x50>)
   14c18:	4798      	blx	r3
   14c1a:	687b      	ldr	r3, [r7, #4]
   14c1c:	3374      	adds	r3, #116	; 0x74
   14c1e:	2401      	movs	r4, #1
   14c20:	461d      	mov	r5, r3
   14c22:	2c00      	cmp	r4, #0
   14c24:	db05      	blt.n	14c32 <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x2a>
   14c26:	4628      	mov	r0, r5
   14c28:	4b0c      	ldr	r3, [pc, #48]	; (14c5c <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x54>)
   14c2a:	4798      	blx	r3
   14c2c:	3550      	adds	r5, #80	; 0x50
   14c2e:	3c01      	subs	r4, #1
   14c30:	e7f7      	b.n	14c22 <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x1a>
   14c32:	687b      	ldr	r3, [r7, #4]
   14c34:	f503 7390 	add.w	r3, r3, #288	; 0x120
   14c38:	4618      	mov	r0, r3
   14c3a:	4b09      	ldr	r3, [pc, #36]	; (14c60 <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x58>)
   14c3c:	4798      	blx	r3
{
		ptrTemperaturesClass=this;
   14c3e:	4a09      	ldr	r2, [pc, #36]	; (14c64 <_ZN24TemperatureSensors_ClassC1EP22spi_m_async_descriptor+0x5c>)
   14c40:	687b      	ldr	r3, [r7, #4]
   14c42:	6013      	str	r3, [r2, #0]
		SPIA=SPI_LTC;
   14c44:	687b      	ldr	r3, [r7, #4]
   14c46:	683a      	ldr	r2, [r7, #0]
   14c48:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
} //TemperatureSensors_Class
   14c4c:	687b      	ldr	r3, [r7, #4]
   14c4e:	4618      	mov	r0, r3
   14c50:	3708      	adds	r7, #8
   14c52:	46bd      	mov	sp, r7
   14c54:	bdb0      	pop	{r4, r5, r7, pc}
   14c56:	bf00      	nop
   14c58:	00017b7d 	.word	0x00017b7d
   14c5c:	00017b7d 	.word	0x00017b7d
   14c60:	00018269 	.word	0x00018269
   14c64:	2000981c 	.word	0x2000981c

00014c68 <_ZN24TemperatureSensors_ClassD1Ev>:

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   14c68:	b590      	push	{r4, r7, lr}
   14c6a:	b083      	sub	sp, #12
   14c6c:	af00      	add	r7, sp, #0
   14c6e:	6078      	str	r0, [r7, #4]
   14c70:	687b      	ldr	r3, [r7, #4]
   14c72:	f503 7390 	add.w	r3, r3, #288	; 0x120
   14c76:	4618      	mov	r0, r3
   14c78:	4b0d      	ldr	r3, [pc, #52]	; (14cb0 <_ZN24TemperatureSensors_ClassD1Ev+0x48>)
   14c7a:	4798      	blx	r3
   14c7c:	687b      	ldr	r3, [r7, #4]
   14c7e:	3374      	adds	r3, #116	; 0x74
   14c80:	2b00      	cmp	r3, #0
   14c82:	d00c      	beq.n	14c9e <_ZN24TemperatureSensors_ClassD1Ev+0x36>
   14c84:	687b      	ldr	r3, [r7, #4]
   14c86:	3374      	adds	r3, #116	; 0x74
   14c88:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
   14c8c:	687b      	ldr	r3, [r7, #4]
   14c8e:	3374      	adds	r3, #116	; 0x74
   14c90:	42a3      	cmp	r3, r4
   14c92:	d004      	beq.n	14c9e <_ZN24TemperatureSensors_ClassD1Ev+0x36>
   14c94:	3c50      	subs	r4, #80	; 0x50
   14c96:	4620      	mov	r0, r4
   14c98:	4b06      	ldr	r3, [pc, #24]	; (14cb4 <_ZN24TemperatureSensors_ClassD1Ev+0x4c>)
   14c9a:	4798      	blx	r3
   14c9c:	e7f6      	b.n	14c8c <_ZN24TemperatureSensors_ClassD1Ev+0x24>
   14c9e:	687b      	ldr	r3, [r7, #4]
   14ca0:	4618      	mov	r0, r3
   14ca2:	4b05      	ldr	r3, [pc, #20]	; (14cb8 <_ZN24TemperatureSensors_ClassD1Ev+0x50>)
   14ca4:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   14ca6:	687b      	ldr	r3, [r7, #4]
   14ca8:	4618      	mov	r0, r3
   14caa:	370c      	adds	r7, #12
   14cac:	46bd      	mov	sp, r7
   14cae:	bd90      	pop	{r4, r7, pc}
   14cb0:	00018289 	.word	0x00018289
   14cb4:	00017b91 	.word	0x00017b91
   14cb8:	00017b91 	.word	0x00017b91

00014cbc <_ZN24TemperatureSensors_Class4InitEv>:

bool	TemperatureSensors_Class::Init(void){
   14cbc:	b580      	push	{r7, lr}
   14cbe:	b082      	sub	sp, #8
   14cc0:	af00      	add	r7, sp, #0
   14cc2:	6078      	str	r0, [r7, #4]
	spiLT.set_descriptor(SPIA);
   14cc4:	687b      	ldr	r3, [r7, #4]
   14cc6:	f503 7290 	add.w	r2, r3, #288	; 0x120
   14cca:	687b      	ldr	r3, [r7, #4]
   14ccc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   14cd0:	4619      	mov	r1, r3
   14cd2:	4610      	mov	r0, r2
   14cd4:	4b17      	ldr	r3, [pc, #92]	; (14d34 <_ZN24TemperatureSensors_Class4InitEv+0x78>)
   14cd6:	4798      	blx	r3
	spiLT.init();
   14cd8:	687b      	ldr	r3, [r7, #4]
   14cda:	f503 7390 	add.w	r3, r3, #288	; 0x120
   14cde:	4618      	mov	r0, r3
   14ce0:	4b15      	ldr	r3, [pc, #84]	; (14d38 <_ZN24TemperatureSensors_Class4InitEv+0x7c>)
   14ce2:	4798      	blx	r3
	InitModules();
   14ce4:	6878      	ldr	r0, [r7, #4]
   14ce6:	4b15      	ldr	r3, [pc, #84]	; (14d3c <_ZN24TemperatureSensors_Class4InitEv+0x80>)
   14ce8:	4798      	blx	r3
	ext_irq_register(PIN_PB08, Converter1Ready);
   14cea:	4915      	ldr	r1, [pc, #84]	; (14d40 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   14cec:	2028      	movs	r0, #40	; 0x28
   14cee:	4b15      	ldr	r3, [pc, #84]	; (14d44 <_ZN24TemperatureSensors_Class4InitEv+0x88>)
   14cf0:	4798      	blx	r3
	ext_irq_register(PIN_PB09, Converter2Ready);
   14cf2:	4915      	ldr	r1, [pc, #84]	; (14d48 <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
   14cf4:	2029      	movs	r0, #41	; 0x29
   14cf6:	4b13      	ldr	r3, [pc, #76]	; (14d44 <_ZN24TemperatureSensors_Class4InitEv+0x88>)
   14cf8:	4798      	blx	r3
	currentModule=0; currentChannel=0;
   14cfa:	687b      	ldr	r3, [r7, #4]
   14cfc:	2200      	movs	r2, #0
   14cfe:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
   14d02:	687b      	ldr	r3, [r7, #4]
   14d04:	2200      	movs	r2, #0
   14d06:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	isOK=(module[0].isOK)&(module[1].isOK);
   14d0a:	687b      	ldr	r3, [r7, #4]
   14d0c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   14d10:	461a      	mov	r2, r3
   14d12:	687b      	ldr	r3, [r7, #4]
   14d14:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   14d18:	4013      	ands	r3, r2
   14d1a:	2b00      	cmp	r3, #0
   14d1c:	bf14      	ite	ne
   14d1e:	2301      	movne	r3, #1
   14d20:	2300      	moveq	r3, #0
   14d22:	b2da      	uxtb	r2, r3
   14d24:	687b      	ldr	r3, [r7, #4]
   14d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
   14d2a:	bf00      	nop
   14d2c:	4618      	mov	r0, r3
   14d2e:	3708      	adds	r7, #8
   14d30:	46bd      	mov	sp, r7
   14d32:	bd80      	pop	{r7, pc}
   14d34:	000182dd 	.word	0x000182dd
   14d38:	0001829d 	.word	0x0001829d
   14d3c:	00014d4d 	.word	0x00014d4d
   14d40:	00014bb9 	.word	0x00014bb9
   14d44:	000060b5 	.word	0x000060b5
   14d48:	00014be1 	.word	0x00014be1

00014d4c <_ZN24TemperatureSensors_Class11InitModulesEv>:

bool TemperatureSensors_Class::InitModules(void){
   14d4c:	b580      	push	{r7, lr}
   14d4e:	b082      	sub	sp, #8
   14d50:	af00      	add	r7, sp, #0
   14d52:	6078      	str	r0, [r7, #4]
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2;
   14d54:	687b      	ldr	r3, [r7, #4]
   14d56:	223d      	movs	r2, #61	; 0x3d
   14d58:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   14d5c:	687b      	ldr	r3, [r7, #4]
   14d5e:	221b      	movs	r2, #27
   14d60:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	for (i = 0; i < NUMBER_LTC2983_MODULES; i++)
   14d64:	687b      	ldr	r3, [r7, #4]
   14d66:	2200      	movs	r2, #0
   14d68:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
   14d6c:	687b      	ldr	r3, [r7, #4]
   14d6e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
   14d72:	2b01      	cmp	r3, #1
   14d74:	dc22      	bgt.n	14dbc <_ZN24TemperatureSensors_Class11InitModulesEv+0x70>
	{
		module[i].Init(csPins[i],&spiLT);
   14d76:	687b      	ldr	r3, [r7, #4]
   14d78:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
   14d7c:	461a      	mov	r2, r3
   14d7e:	4613      	mov	r3, r2
   14d80:	009b      	lsls	r3, r3, #2
   14d82:	4413      	add	r3, r2
   14d84:	011b      	lsls	r3, r3, #4
   14d86:	3370      	adds	r3, #112	; 0x70
   14d88:	687a      	ldr	r2, [r7, #4]
   14d8a:	4413      	add	r3, r2
   14d8c:	1d18      	adds	r0, r3, #4
   14d8e:	687b      	ldr	r3, [r7, #4]
   14d90:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
   14d94:	687a      	ldr	r2, [r7, #4]
   14d96:	3344      	adds	r3, #68	; 0x44
   14d98:	009b      	lsls	r3, r3, #2
   14d9a:	4413      	add	r3, r2
   14d9c:	6859      	ldr	r1, [r3, #4]
   14d9e:	687b      	ldr	r3, [r7, #4]
   14da0:	f503 7390 	add.w	r3, r3, #288	; 0x120
   14da4:	461a      	mov	r2, r3
   14da6:	4b08      	ldr	r3, [pc, #32]	; (14dc8 <_ZN24TemperatureSensors_Class11InitModulesEv+0x7c>)
   14da8:	4798      	blx	r3
	for (i = 0; i < NUMBER_LTC2983_MODULES; i++)
   14daa:	687b      	ldr	r3, [r7, #4]
   14dac:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
   14db0:	3301      	adds	r3, #1
   14db2:	b2da      	uxtb	r2, r3
   14db4:	687b      	ldr	r3, [r7, #4]
   14db6:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
   14dba:	e7d7      	b.n	14d6c <_ZN24TemperatureSensors_Class11InitModulesEv+0x20>
	}

}
   14dbc:	bf00      	nop
   14dbe:	4618      	mov	r0, r3
   14dc0:	3708      	adds	r7, #8
   14dc2:	46bd      	mov	sp, r7
   14dc4:	bd80      	pop	{r7, pc}
   14dc6:	bf00      	nop
   14dc8:	00017ba5 	.word	0x00017ba5

00014dcc <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   14dcc:	b580      	push	{r7, lr}
   14dce:	b082      	sub	sp, #8
   14dd0:	af00      	add	r7, sp, #0
   14dd2:	6078      	str	r0, [r7, #4]
	converterReady[currentModule]=false;
   14dd4:	687b      	ldr	r3, [r7, #4]
   14dd6:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
   14dda:	461a      	mov	r2, r3
   14ddc:	687b      	ldr	r3, [r7, #4]
   14dde:	4413      	add	r3, r2
   14de0:	2200      	movs	r2, #0
   14de2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	module[currentModule].ConvertAsyncChannelIndex(currentChannel);
   14de6:	687b      	ldr	r3, [r7, #4]
   14de8:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
   14dec:	461a      	mov	r2, r3
   14dee:	4613      	mov	r3, r2
   14df0:	009b      	lsls	r3, r3, #2
   14df2:	4413      	add	r3, r2
   14df4:	011b      	lsls	r3, r3, #4
   14df6:	3370      	adds	r3, #112	; 0x70
   14df8:	687a      	ldr	r2, [r7, #4]
   14dfa:	4413      	add	r3, r2
   14dfc:	1d1a      	adds	r2, r3, #4
   14dfe:	687b      	ldr	r3, [r7, #4]
   14e00:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
   14e04:	4619      	mov	r1, r3
   14e06:	4610      	mov	r0, r2
   14e08:	4b02      	ldr	r3, [pc, #8]	; (14e14 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x48>)
   14e0a:	4798      	blx	r3
	
}
   14e0c:	bf00      	nop
   14e0e:	3708      	adds	r7, #8
   14e10:	46bd      	mov	sp, r7
   14e12:	bd80      	pop	{r7, pc}
   14e14:	00017c5d 	.word	0x00017c5d

00014e18 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	else
	{
	}
	return lastValue;
}
bool	TemperatureSensors_Class::IsConversionFinished(){
   14e18:	b480      	push	{r7}
   14e1a:	b083      	sub	sp, #12
   14e1c:	af00      	add	r7, sp, #0
   14e1e:	6078      	str	r0, [r7, #4]
	return converterReady[0]|converterReady[1];
   14e20:	687b      	ldr	r3, [r7, #4]
   14e22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   14e26:	b2da      	uxtb	r2, r3
   14e28:	687b      	ldr	r3, [r7, #4]
   14e2a:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
   14e2e:	b2db      	uxtb	r3, r3
   14e30:	4313      	orrs	r3, r2
   14e32:	b2db      	uxtb	r3, r3
}
   14e34:	4618      	mov	r0, r3
   14e36:	370c      	adds	r7, #12
   14e38:	46bd      	mov	sp, r7
   14e3a:	bc80      	pop	{r7}
   14e3c:	4770      	bx	lr

00014e3e <_ZN24TemperatureSensors_Class14SetModuleReadyEh>:
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
   14e3e:	b480      	push	{r7}
   14e40:	b083      	sub	sp, #12
   14e42:	af00      	add	r7, sp, #0
   14e44:	6078      	str	r0, [r7, #4]
   14e46:	460b      	mov	r3, r1
   14e48:	70fb      	strb	r3, [r7, #3]
	module[m].ready=true;
   14e4a:	78fa      	ldrb	r2, [r7, #3]
   14e4c:	6879      	ldr	r1, [r7, #4]
   14e4e:	4613      	mov	r3, r2
   14e50:	009b      	lsls	r3, r3, #2
   14e52:	4413      	add	r3, r2
   14e54:	011b      	lsls	r3, r3, #4
   14e56:	440b      	add	r3, r1
   14e58:	3374      	adds	r3, #116	; 0x74
   14e5a:	2201      	movs	r2, #1
   14e5c:	701a      	strb	r2, [r3, #0]
	return module[m].ready;
   14e5e:	78fa      	ldrb	r2, [r7, #3]
   14e60:	6879      	ldr	r1, [r7, #4]
   14e62:	4613      	mov	r3, r2
   14e64:	009b      	lsls	r3, r3, #2
   14e66:	4413      	add	r3, r2
   14e68:	011b      	lsls	r3, r3, #4
   14e6a:	440b      	add	r3, r1
   14e6c:	3374      	adds	r3, #116	; 0x74
   14e6e:	781b      	ldrb	r3, [r3, #0]
   14e70:	b2db      	uxtb	r3, r3
}
   14e72:	4618      	mov	r0, r3
   14e74:	370c      	adds	r7, #12
   14e76:	46bd      	mov	sp, r7
   14e78:	bc80      	pop	{r7}
   14e7a:	4770      	bx	lr

00014e7c <_Z41__static_initialization_and_destruction_0ii>:

TemperatureSensors_Class temperatures(&SPI_TEMP);
   14e7c:	b580      	push	{r7, lr}
   14e7e:	b082      	sub	sp, #8
   14e80:	af00      	add	r7, sp, #0
   14e82:	6078      	str	r0, [r7, #4]
   14e84:	6039      	str	r1, [r7, #0]
   14e86:	687b      	ldr	r3, [r7, #4]
   14e88:	2b01      	cmp	r3, #1
   14e8a:	d10d      	bne.n	14ea8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   14e8c:	683b      	ldr	r3, [r7, #0]
   14e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14e92:	4293      	cmp	r3, r2
   14e94:	d108      	bne.n	14ea8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   14e96:	4906      	ldr	r1, [pc, #24]	; (14eb0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14e98:	4806      	ldr	r0, [pc, #24]	; (14eb4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14e9a:	4b07      	ldr	r3, [pc, #28]	; (14eb8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   14e9c:	4798      	blx	r3
   14e9e:	4a07      	ldr	r2, [pc, #28]	; (14ebc <_Z41__static_initialization_and_destruction_0ii+0x40>)
   14ea0:	4907      	ldr	r1, [pc, #28]	; (14ec0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   14ea2:	4804      	ldr	r0, [pc, #16]	; (14eb4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14ea4:	4b07      	ldr	r3, [pc, #28]	; (14ec4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   14ea6:	4798      	blx	r3
   14ea8:	bf00      	nop
   14eaa:	3708      	adds	r7, #8
   14eac:	46bd      	mov	sp, r7
   14eae:	bd80      	pop	{r7, pc}
   14eb0:	2000a15c 	.word	0x2000a15c
   14eb4:	20009820 	.word	0x20009820
   14eb8:	00014c09 	.word	0x00014c09
   14ebc:	20000000 	.word	0x20000000
   14ec0:	00014c69 	.word	0x00014c69
   14ec4:	000187f1 	.word	0x000187f1

00014ec8 <_GLOBAL__sub_I_ptrTemperaturesClass>:
   14ec8:	b580      	push	{r7, lr}
   14eca:	af00      	add	r7, sp, #0
   14ecc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14ed0:	2001      	movs	r0, #1
   14ed2:	4b01      	ldr	r3, [pc, #4]	; (14ed8 <_GLOBAL__sub_I_ptrTemperaturesClass+0x10>)
   14ed4:	4798      	blx	r3
   14ed6:	bd80      	pop	{r7, pc}
   14ed8:	00014e7d 	.word	0x00014e7d

00014edc <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   14edc:	b480      	push	{r7}
   14ede:	b083      	sub	sp, #12
   14ee0:	af00      	add	r7, sp, #0
   14ee2:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   14ee4:	4a04      	ldr	r2, [pc, #16]	; (14ef8 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   14ee6:	687b      	ldr	r3, [r7, #4]
   14ee8:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   14eea:	687b      	ldr	r3, [r7, #4]
   14eec:	4618      	mov	r0, r3
   14eee:	370c      	adds	r7, #12
   14ef0:	46bd      	mov	sp, r7
   14ef2:	bc80      	pop	{r7}
   14ef4:	4770      	bx	lr
   14ef6:	bf00      	nop
   14ef8:	20009950 	.word	0x20009950

00014efc <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   14efc:	b480      	push	{r7}
   14efe:	b083      	sub	sp, #12
   14f00:	af00      	add	r7, sp, #0
   14f02:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   14f04:	687b      	ldr	r3, [r7, #4]
   14f06:	4618      	mov	r0, r3
   14f08:	370c      	adds	r7, #12
   14f0a:	46bd      	mov	sp, r7
   14f0c:	bc80      	pop	{r7}
   14f0e:	4770      	bx	lr

00014f10 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   14f10:	b580      	push	{r7, lr}
   14f12:	b082      	sub	sp, #8
   14f14:	af00      	add	r7, sp, #0
   14f16:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   14f18:	687b      	ldr	r3, [r7, #4]
   14f1a:	685a      	ldr	r2, [r3, #4]
   14f1c:	687b      	ldr	r3, [r7, #4]
   14f1e:	3308      	adds	r3, #8
   14f20:	4619      	mov	r1, r3
   14f22:	4610      	mov	r0, r2
   14f24:	4b06      	ldr	r3, [pc, #24]	; (14f40 <_ZN13SPI_Syn_Class4initEv+0x30>)
   14f26:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   14f28:	687b      	ldr	r3, [r7, #4]
   14f2a:	685b      	ldr	r3, [r3, #4]
   14f2c:	4618      	mov	r0, r3
   14f2e:	4b05      	ldr	r3, [pc, #20]	; (14f44 <_ZN13SPI_Syn_Class4initEv+0x34>)
   14f30:	4798      	blx	r3
	
	ready=true;
   14f32:	687b      	ldr	r3, [r7, #4]
   14f34:	2201      	movs	r2, #1
   14f36:	701a      	strb	r2, [r3, #0]
	
}
   14f38:	bf00      	nop
   14f3a:	3708      	adds	r7, #8
   14f3c:	46bd      	mov	sp, r7
   14f3e:	bd80      	pop	{r7, pc}
   14f40:	00006f55 	.word	0x00006f55
   14f44:	00006dc9 	.word	0x00006dc9

00014f48 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   14f48:	b480      	push	{r7}
   14f4a:	b083      	sub	sp, #12
   14f4c:	af00      	add	r7, sp, #0
   14f4e:	6078      	str	r0, [r7, #4]
   14f50:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   14f52:	4a05      	ldr	r2, [pc, #20]	; (14f68 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   14f54:	687b      	ldr	r3, [r7, #4]
   14f56:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   14f58:	687b      	ldr	r3, [r7, #4]
   14f5a:	683a      	ldr	r2, [r7, #0]
   14f5c:	605a      	str	r2, [r3, #4]
}
   14f5e:	bf00      	nop
   14f60:	370c      	adds	r7, #12
   14f62:	46bd      	mov	sp, r7
   14f64:	bc80      	pop	{r7}
   14f66:	4770      	bx	lr
   14f68:	20009950 	.word	0x20009950

00014f6c <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
   14f6c:	b580      	push	{r7, lr}
   14f6e:	b082      	sub	sp, #8
   14f70:	af00      	add	r7, sp, #0
   14f72:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   14f74:	687b      	ldr	r3, [r7, #4]
   14f76:	685a      	ldr	r2, [r3, #4]
   14f78:	687b      	ldr	r3, [r7, #4]
   14f7a:	3308      	adds	r3, #8
   14f7c:	4619      	mov	r1, r3
   14f7e:	4610      	mov	r0, r2
   14f80:	4b07      	ldr	r3, [pc, #28]	; (14fa0 <_ZN13SPI_Syn_Class6enableEv+0x34>)
   14f82:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   14f84:	687b      	ldr	r3, [r7, #4]
   14f86:	685b      	ldr	r3, [r3, #4]
   14f88:	4618      	mov	r0, r3
   14f8a:	4b06      	ldr	r3, [pc, #24]	; (14fa4 <_ZN13SPI_Syn_Class6enableEv+0x38>)
   14f8c:	4798      	blx	r3
	ready=true;
   14f8e:	687b      	ldr	r3, [r7, #4]
   14f90:	2201      	movs	r2, #1
   14f92:	701a      	strb	r2, [r3, #0]
	return 0;
   14f94:	2300      	movs	r3, #0
}
   14f96:	4618      	mov	r0, r3
   14f98:	3708      	adds	r7, #8
   14f9a:	46bd      	mov	sp, r7
   14f9c:	bd80      	pop	{r7, pc}
   14f9e:	bf00      	nop
   14fa0:	00006f55 	.word	0x00006f55
   14fa4:	00006dc9 	.word	0x00006dc9

00014fa8 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
   14fa8:	b580      	push	{r7, lr}
   14faa:	b086      	sub	sp, #24
   14fac:	af00      	add	r7, sp, #0
   14fae:	60f8      	str	r0, [r7, #12]
   14fb0:	60b9      	str	r1, [r7, #8]
   14fb2:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   14fb4:	68fb      	ldr	r3, [r7, #12]
   14fb6:	2201      	movs	r2, #1
   14fb8:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
   14fba:	68fb      	ldr	r3, [r7, #12]
   14fbc:	689b      	ldr	r3, [r3, #8]
   14fbe:	687a      	ldr	r2, [r7, #4]
   14fc0:	b292      	uxth	r2, r2
   14fc2:	68b9      	ldr	r1, [r7, #8]
   14fc4:	4618      	mov	r0, r3
   14fc6:	4b08      	ldr	r3, [pc, #32]	; (14fe8 <_ZN13SPI_Syn_Class5writeEPKhl+0x40>)
   14fc8:	4798      	blx	r3
   14fca:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   14fcc:	697b      	ldr	r3, [r7, #20]
   14fce:	2b00      	cmp	r3, #0
   14fd0:	bf14      	ite	ne
   14fd2:	2301      	movne	r3, #1
   14fd4:	2300      	moveq	r3, #0
   14fd6:	b2da      	uxtb	r2, r3
   14fd8:	68fb      	ldr	r3, [r7, #12]
   14fda:	741a      	strb	r2, [r3, #16]
	 return w;
   14fdc:	697b      	ldr	r3, [r7, #20]
	
}
   14fde:	4618      	mov	r0, r3
   14fe0:	3718      	adds	r7, #24
   14fe2:	46bd      	mov	sp, r7
   14fe4:	bd80      	pop	{r7, pc}
   14fe6:	bf00      	nop
   14fe8:	00018751 	.word	0x00018751

00014fec <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
   14fec:	b580      	push	{r7, lr}
   14fee:	b086      	sub	sp, #24
   14ff0:	af00      	add	r7, sp, #0
   14ff2:	60f8      	str	r0, [r7, #12]
   14ff4:	60b9      	str	r1, [r7, #8]
   14ff6:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   14ff8:	68fb      	ldr	r3, [r7, #12]
   14ffa:	2201      	movs	r2, #1
   14ffc:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
   14ffe:	68fb      	ldr	r3, [r7, #12]
   15000:	689b      	ldr	r3, [r3, #8]
   15002:	687a      	ldr	r2, [r7, #4]
   15004:	b292      	uxth	r2, r2
   15006:	68b9      	ldr	r1, [r7, #8]
   15008:	4618      	mov	r0, r3
   1500a:	4b08      	ldr	r3, [pc, #32]	; (1502c <_ZN13SPI_Syn_Class4readEPhl+0x40>)
   1500c:	4798      	blx	r3
   1500e:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   15010:	697b      	ldr	r3, [r7, #20]
   15012:	2b00      	cmp	r3, #0
   15014:	bf14      	ite	ne
   15016:	2301      	movne	r3, #1
   15018:	2300      	moveq	r3, #0
   1501a:	b2da      	uxtb	r2, r3
   1501c:	68fb      	ldr	r3, [r7, #12]
   1501e:	745a      	strb	r2, [r3, #17]
	return  r;
   15020:	697b      	ldr	r3, [r7, #20]
}
   15022:	4618      	mov	r0, r3
   15024:	3718      	adds	r7, #24
   15026:	46bd      	mov	sp, r7
   15028:	bd80      	pop	{r7, pc}
   1502a:	bf00      	nop
   1502c:	000187a1 	.word	0x000187a1

00015030 <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
   15030:	b580      	push	{r7, lr}
   15032:	b082      	sub	sp, #8
   15034:	af00      	add	r7, sp, #0
   15036:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   15038:	687b      	ldr	r3, [r7, #4]
   1503a:	685b      	ldr	r3, [r3, #4]
   1503c:	4618      	mov	r0, r3
   1503e:	4b03      	ldr	r3, [pc, #12]	; (1504c <_ZN13SPI_Syn_Class7disableEv+0x1c>)
   15040:	4798      	blx	r3
	
}
   15042:	bf00      	nop
   15044:	3708      	adds	r7, #8
   15046:	46bd      	mov	sp, r7
   15048:	bd80      	pop	{r7, pc}
   1504a:	bf00      	nop
   1504c:	00006e05 	.word	0x00006e05

00015050 <_ZN13SPI_Syn_Class10isSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::isSPIReady(void){
   15050:	b480      	push	{r7}
   15052:	b083      	sub	sp, #12
   15054:	af00      	add	r7, sp, #0
   15056:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   15058:	687b      	ldr	r3, [r7, #4]
   1505a:	7c5b      	ldrb	r3, [r3, #17]
   1505c:	b2db      	uxtb	r3, r3
   1505e:	2b00      	cmp	r3, #0
   15060:	d103      	bne.n	1506a <_ZN13SPI_Syn_Class10isSPIReadyEv+0x1a>
   15062:	687b      	ldr	r3, [r7, #4]
   15064:	7c1b      	ldrb	r3, [r3, #16]
   15066:	b2db      	uxtb	r3, r3
   15068:	2b00      	cmp	r3, #0
   1506a:	687b      	ldr	r3, [r7, #4]
   1506c:	2201      	movs	r2, #1
   1506e:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   15070:	687b      	ldr	r3, [r7, #4]
   15072:	781b      	ldrb	r3, [r3, #0]
   15074:	b2db      	uxtb	r3, r3
   15076:	2b00      	cmp	r3, #0
   15078:	d001      	beq.n	1507e <_ZN13SPI_Syn_Class10isSPIReadyEv+0x2e>
	{
		
		return true;
   1507a:	2301      	movs	r3, #1
   1507c:	e000      	b.n	15080 <_ZN13SPI_Syn_Class10isSPIReadyEv+0x30>
	} 
	else
	{
		return false;
   1507e:	2300      	movs	r3, #0
	}
	return ready;
	
}
   15080:	4618      	mov	r0, r3
   15082:	370c      	adds	r7, #12
   15084:	46bd      	mov	sp, r7
   15086:	bc80      	pop	{r7}
   15088:	4770      	bx	lr
	...

0001508c <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
   1508c:	b580      	push	{r7, lr}
   1508e:	b082      	sub	sp, #8
   15090:	af00      	add	r7, sp, #0
   15092:	6078      	str	r0, [r7, #4]
   15094:	6039      	str	r1, [r7, #0]
   15096:	687b      	ldr	r3, [r7, #4]
   15098:	3304      	adds	r3, #4
   1509a:	4618      	mov	r0, r3
   1509c:	4b06      	ldr	r3, [pc, #24]	; (150b8 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
   1509e:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   150a0:	687b      	ldr	r3, [r7, #4]
   150a2:	683a      	ldr	r2, [r7, #0]
   150a4:	641a      	str	r2, [r3, #64]	; 0x40
	ptrAT24MACClass=this;
   150a6:	4a05      	ldr	r2, [pc, #20]	; (150bc <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
   150a8:	687b      	ldr	r3, [r7, #4]
   150aa:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   150ac:	687b      	ldr	r3, [r7, #4]
   150ae:	4618      	mov	r0, r3
   150b0:	3708      	adds	r7, #8
   150b2:	46bd      	mov	sp, r7
   150b4:	bd80      	pop	{r7, pc}
   150b6:	bf00      	nop
   150b8:	00014439 	.word	0x00014439
   150bc:	20009954 	.word	0x20009954

000150c0 <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
   150c0:	b580      	push	{r7, lr}
   150c2:	b082      	sub	sp, #8
   150c4:	af00      	add	r7, sp, #0
   150c6:	6078      	str	r0, [r7, #4]
   150c8:	687b      	ldr	r3, [r7, #4]
   150ca:	3304      	adds	r3, #4
   150cc:	4618      	mov	r0, r3
   150ce:	4b03      	ldr	r3, [pc, #12]	; (150dc <_ZN13AT24MAC_ClassD1Ev+0x1c>)
   150d0:	4798      	blx	r3
{
} //~AT24MAC_Class
   150d2:	687b      	ldr	r3, [r7, #4]
   150d4:	4618      	mov	r0, r3
   150d6:	3708      	adds	r7, #8
   150d8:	46bd      	mov	sp, r7
   150da:	bd80      	pop	{r7, pc}
   150dc:	000144b5 	.word	0x000144b5

000150e0 <_ZN13AT24MAC_Class4InitEv>:


bool AT24MAC_Class::Init(void){
   150e0:	b580      	push	{r7, lr}
   150e2:	b082      	sub	sp, #8
   150e4:	af00      	add	r7, sp, #0
   150e6:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
   150e8:	2156      	movs	r1, #86	; 0x56
   150ea:	6878      	ldr	r0, [r7, #4]
   150ec:	4b04      	ldr	r3, [pc, #16]	; (15100 <_ZN13AT24MAC_Class4InitEv+0x20>)
   150ee:	4798      	blx	r3
	return SelfTest();
   150f0:	6878      	ldr	r0, [r7, #4]
   150f2:	4b04      	ldr	r3, [pc, #16]	; (15104 <_ZN13AT24MAC_Class4InitEv+0x24>)
   150f4:	4798      	blx	r3
   150f6:	4603      	mov	r3, r0
}
   150f8:	4618      	mov	r0, r3
   150fa:	3708      	adds	r7, #8
   150fc:	46bd      	mov	sp, r7
   150fe:	bd80      	pop	{r7, pc}
   15100:	00015109 	.word	0x00015109
   15104:	000153e9 	.word	0x000153e9

00015108 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
   15108:	b580      	push	{r7, lr}
   1510a:	b082      	sub	sp, #8
   1510c:	af00      	add	r7, sp, #0
   1510e:	6078      	str	r0, [r7, #4]
   15110:	460b      	mov	r3, r1
   15112:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   15114:	687b      	ldr	r3, [r7, #4]
   15116:	78fa      	ldrb	r2, [r7, #3]
   15118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	i2ca.Set_descriptor(ptrI2CDescr);
   1511c:	687b      	ldr	r3, [r7, #4]
   1511e:	1d1a      	adds	r2, r3, #4
   15120:	687b      	ldr	r3, [r7, #4]
   15122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15124:	4619      	mov	r1, r3
   15126:	4610      	mov	r0, r2
   15128:	4b09      	ldr	r3, [pc, #36]	; (15150 <_ZN13AT24MAC_Class4InitEh+0x48>)
   1512a:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
   1512c:	687b      	ldr	r3, [r7, #4]
   1512e:	3304      	adds	r3, #4
   15130:	78fa      	ldrb	r2, [r7, #3]
   15132:	4611      	mov	r1, r2
   15134:	4618      	mov	r0, r3
   15136:	4b07      	ldr	r3, [pc, #28]	; (15154 <_ZN13AT24MAC_Class4InitEh+0x4c>)
   15138:	4798      	blx	r3
   1513a:	4603      	mov	r3, r0
   1513c:	f083 0301 	eor.w	r3, r3, #1
   15140:	b2da      	uxtb	r2, r3
   15142:	687b      	ldr	r3, [r7, #4]
   15144:	701a      	strb	r2, [r3, #0]
}
   15146:	bf00      	nop
   15148:	3708      	adds	r7, #8
   1514a:	46bd      	mov	sp, r7
   1514c:	bd80      	pop	{r7, pc}
   1514e:	bf00      	nop
   15150:	000144d5 	.word	0x000144d5
   15154:	000145cd 	.word	0x000145cd

00015158 <_ZN13AT24MAC_Class10Write_byteEhh>:


int32_t AT24MAC_Class::Write_byte(uint8_t addr, uint8_t value){
   15158:	b580      	push	{r7, lr}
   1515a:	b084      	sub	sp, #16
   1515c:	af00      	add	r7, sp, #0
   1515e:	6078      	str	r0, [r7, #4]
   15160:	460b      	mov	r3, r1
   15162:	70fb      	strb	r3, [r7, #3]
   15164:	4613      	mov	r3, r2
   15166:	70bb      	strb	r3, [r7, #2]
	
	isReady=false;
   15168:	687b      	ldr	r3, [r7, #4]
   1516a:	2200      	movs	r2, #0
   1516c:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
   1516e:	78fb      	ldrb	r3, [r7, #3]
   15170:	723b      	strb	r3, [r7, #8]
	array[1]=value;
   15172:	78bb      	ldrb	r3, [r7, #2]
   15174:	727b      	strb	r3, [r7, #9]
	uint32_t w= i2ca.Write(array,2);
   15176:	687b      	ldr	r3, [r7, #4]
   15178:	3304      	adds	r3, #4
   1517a:	f107 0108 	add.w	r1, r7, #8
   1517e:	2202      	movs	r2, #2
   15180:	4618      	mov	r0, r3
   15182:	4b09      	ldr	r3, [pc, #36]	; (151a8 <_ZN13AT24MAC_Class10Write_byteEhh+0x50>)
   15184:	4798      	blx	r3
   15186:	4603      	mov	r3, r0
   15188:	60fb      	str	r3, [r7, #12]
	while(!i2ca.txReady);
   1518a:	687b      	ldr	r3, [r7, #4]
   1518c:	7e1b      	ldrb	r3, [r3, #24]
   1518e:	b2db      	uxtb	r3, r3
   15190:	f083 0301 	eor.w	r3, r3, #1
   15194:	b2db      	uxtb	r3, r3
   15196:	2b00      	cmp	r3, #0
   15198:	d000      	beq.n	1519c <_ZN13AT24MAC_Class10Write_byteEhh+0x44>
   1519a:	e7f6      	b.n	1518a <_ZN13AT24MAC_Class10Write_byteEhh+0x32>
	return	w;
   1519c:	68fb      	ldr	r3, [r7, #12]
}
   1519e:	4618      	mov	r0, r3
   151a0:	3710      	adds	r7, #16
   151a2:	46bd      	mov	sp, r7
   151a4:	bd80      	pop	{r7, pc}
   151a6:	bf00      	nop
   151a8:	00014649 	.word	0x00014649

000151ac <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
   151ac:	b580      	push	{r7, lr}
   151ae:	b086      	sub	sp, #24
   151b0:	af00      	add	r7, sp, #0
   151b2:	60f8      	str	r0, [r7, #12]
   151b4:	60b9      	str	r1, [r7, #8]
   151b6:	4611      	mov	r1, r2
   151b8:	461a      	mov	r2, r3
   151ba:	460b      	mov	r3, r1
   151bc:	71fb      	strb	r3, [r7, #7]
   151be:	4613      	mov	r3, r2
   151c0:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	for (int i = 0; i < size; i++)
   151c2:	2300      	movs	r3, #0
   151c4:	613b      	str	r3, [r7, #16]
   151c6:	79ba      	ldrb	r2, [r7, #6]
   151c8:	693b      	ldr	r3, [r7, #16]
   151ca:	429a      	cmp	r2, r3
   151cc:	dd2a      	ble.n	15224 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x78>
	{
		while(!IsReady());
   151ce:	68f8      	ldr	r0, [r7, #12]
   151d0:	4b17      	ldr	r3, [pc, #92]	; (15230 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>)
   151d2:	4798      	blx	r3
   151d4:	4603      	mov	r3, r0
   151d6:	f083 0301 	eor.w	r3, r3, #1
   151da:	b2db      	uxtb	r3, r3
   151dc:	2b00      	cmp	r3, #0
   151de:	d000      	beq.n	151e2 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x36>
   151e0:	e7f5      	b.n	151ce <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x22>
		w=Write_byte(addr+i,*p);
   151e2:	693b      	ldr	r3, [r7, #16]
   151e4:	b2da      	uxtb	r2, r3
   151e6:	79fb      	ldrb	r3, [r7, #7]
   151e8:	4413      	add	r3, r2
   151ea:	b2d9      	uxtb	r1, r3
   151ec:	68bb      	ldr	r3, [r7, #8]
   151ee:	781b      	ldrb	r3, [r3, #0]
   151f0:	461a      	mov	r2, r3
   151f2:	68f8      	ldr	r0, [r7, #12]
   151f4:	4b0f      	ldr	r3, [pc, #60]	; (15234 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x88>)
   151f6:	4798      	blx	r3
   151f8:	4603      	mov	r3, r0
   151fa:	617b      	str	r3, [r7, #20]
		p++;
   151fc:	68bb      	ldr	r3, [r7, #8]
   151fe:	3301      	adds	r3, #1
   15200:	60bb      	str	r3, [r7, #8]
		delay_ms(2);
   15202:	2002      	movs	r0, #2
   15204:	4b0c      	ldr	r3, [pc, #48]	; (15238 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x8c>)
   15206:	4798      	blx	r3
		while(!AcknolledgePolling());
   15208:	68f8      	ldr	r0, [r7, #12]
   1520a:	4b0c      	ldr	r3, [pc, #48]	; (1523c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x90>)
   1520c:	4798      	blx	r3
   1520e:	4603      	mov	r3, r0
   15210:	f083 0301 	eor.w	r3, r3, #1
   15214:	b2db      	uxtb	r3, r3
   15216:	2b00      	cmp	r3, #0
   15218:	d000      	beq.n	1521c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
   1521a:	e7f5      	b.n	15208 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x5c>
	for (int i = 0; i < size; i++)
   1521c:	693b      	ldr	r3, [r7, #16]
   1521e:	3301      	adds	r3, #1
   15220:	613b      	str	r3, [r7, #16]
   15222:	e7d0      	b.n	151c6 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x1a>
// 		array[i]=value;
// 		p++;
// 	}
// 	w= i2ca.Write(array,1+size);
// 	while(!i2ca.txReady);
	return	w;
   15224:	697b      	ldr	r3, [r7, #20]
}
   15226:	4618      	mov	r0, r3
   15228:	3718      	adds	r7, #24
   1522a:	46bd      	mov	sp, r7
   1522c:	bd80      	pop	{r7, pc}
   1522e:	bf00      	nop
   15230:	000154e1 	.word	0x000154e1
   15234:	00015159 	.word	0x00015159
   15238:	00006021 	.word	0x00006021
   1523c:	000153b1 	.word	0x000153b1

00015240 <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
   15240:	b590      	push	{r4, r7, lr}
   15242:	b087      	sub	sp, #28
   15244:	af00      	add	r7, sp, #0
   15246:	60f8      	str	r0, [r7, #12]
   15248:	60b9      	str	r1, [r7, #8]
   1524a:	4611      	mov	r1, r2
   1524c:	461a      	mov	r2, r3
   1524e:	460b      	mov	r3, r1
   15250:	80fb      	strh	r3, [r7, #6]
   15252:	4613      	mov	r3, r2
   15254:	717b      	strb	r3, [r7, #5]
	

	uint8_t add=(uint8_t)(0xff&addr);
   15256:	88fb      	ldrh	r3, [r7, #6]
   15258:	75fb      	strb	r3, [r7, #23]
	return	WriteAddress(p,add,size);
   1525a:	797b      	ldrb	r3, [r7, #5]
   1525c:	7dfa      	ldrb	r2, [r7, #23]
   1525e:	68b9      	ldr	r1, [r7, #8]
   15260:	68f8      	ldr	r0, [r7, #12]
   15262:	4c03      	ldr	r4, [pc, #12]	; (15270 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>)
   15264:	47a0      	blx	r4
   15266:	4603      	mov	r3, r0
}
   15268:	4618      	mov	r0, r3
   1526a:	371c      	adds	r7, #28
   1526c:	46bd      	mov	sp, r7
   1526e:	bd90      	pop	{r4, r7, pc}
   15270:	000151ad 	.word	0x000151ad

00015274 <_ZN13AT24MAC_Class9Read_byteEh>:
	}
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	return i2ca.Write(frame,17);
}

uint8_t AT24MAC_Class::Read_byte(uint8_t addr){
   15274:	b580      	push	{r7, lr}
   15276:	b084      	sub	sp, #16
   15278:	af00      	add	r7, sp, #0
   1527a:	6078      	str	r0, [r7, #4]
   1527c:	460b      	mov	r3, r1
   1527e:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   15280:	687b      	ldr	r3, [r7, #4]
   15282:	3304      	adds	r3, #4
   15284:	1cf9      	adds	r1, r7, #3
   15286:	2201      	movs	r2, #1
   15288:	4618      	mov	r0, r3
   1528a:	4b10      	ldr	r3, [pc, #64]	; (152cc <_ZN13AT24MAC_Class9Read_byteEh+0x58>)
   1528c:	4798      	blx	r3
	while(!i2ca.txReady);
   1528e:	687b      	ldr	r3, [r7, #4]
   15290:	7e1b      	ldrb	r3, [r3, #24]
   15292:	b2db      	uxtb	r3, r3
   15294:	f083 0301 	eor.w	r3, r3, #1
   15298:	b2db      	uxtb	r3, r3
   1529a:	2b00      	cmp	r3, #0
   1529c:	d000      	beq.n	152a0 <_ZN13AT24MAC_Class9Read_byteEh+0x2c>
   1529e:	e7f6      	b.n	1528e <_ZN13AT24MAC_Class9Read_byteEh+0x1a>
	i2ca.Read(&value,1);
   152a0:	687b      	ldr	r3, [r7, #4]
   152a2:	3304      	adds	r3, #4
   152a4:	f107 010f 	add.w	r1, r7, #15
   152a8:	2201      	movs	r2, #1
   152aa:	4618      	mov	r0, r3
   152ac:	4b08      	ldr	r3, [pc, #32]	; (152d0 <_ZN13AT24MAC_Class9Read_byteEh+0x5c>)
   152ae:	4798      	blx	r3
	while(!i2ca.rxReady);
   152b0:	687b      	ldr	r3, [r7, #4]
   152b2:	7e5b      	ldrb	r3, [r3, #25]
   152b4:	b2db      	uxtb	r3, r3
   152b6:	f083 0301 	eor.w	r3, r3, #1
   152ba:	b2db      	uxtb	r3, r3
   152bc:	2b00      	cmp	r3, #0
   152be:	d000      	beq.n	152c2 <_ZN13AT24MAC_Class9Read_byteEh+0x4e>
   152c0:	e7f6      	b.n	152b0 <_ZN13AT24MAC_Class9Read_byteEh+0x3c>
	return value;
   152c2:	7bfb      	ldrb	r3, [r7, #15]
}
   152c4:	4618      	mov	r0, r3
   152c6:	3710      	adds	r7, #16
   152c8:	46bd      	mov	sp, r7
   152ca:	bd80      	pop	{r7, pc}
   152cc:	00014649 	.word	0x00014649
   152d0:	0001468d 	.word	0x0001468d

000152d4 <_ZN13AT24MAC_Class11ReadAddressEPhhh>:

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
   152d4:	b580      	push	{r7, lr}
   152d6:	b086      	sub	sp, #24
   152d8:	af00      	add	r7, sp, #0
   152da:	60f8      	str	r0, [r7, #12]
   152dc:	60b9      	str	r1, [r7, #8]
   152de:	4611      	mov	r1, r2
   152e0:	461a      	mov	r2, r3
   152e2:	460b      	mov	r3, r1
   152e4:	71fb      	strb	r3, [r7, #7]
   152e6:	4613      	mov	r3, r2
   152e8:	71bb      	strb	r3, [r7, #6]
	
	uint32_t r;
	uint8_t	value;
	i2ca.Write(&addr,1);
   152ea:	68fb      	ldr	r3, [r7, #12]
   152ec:	3304      	adds	r3, #4
   152ee:	1df9      	adds	r1, r7, #7
   152f0:	2201      	movs	r2, #1
   152f2:	4618      	mov	r0, r3
   152f4:	4b11      	ldr	r3, [pc, #68]	; (1533c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x68>)
   152f6:	4798      	blx	r3
	while(!i2ca.txReady);
   152f8:	68fb      	ldr	r3, [r7, #12]
   152fa:	7e1b      	ldrb	r3, [r3, #24]
   152fc:	b2db      	uxtb	r3, r3
   152fe:	f083 0301 	eor.w	r3, r3, #1
   15302:	b2db      	uxtb	r3, r3
   15304:	2b00      	cmp	r3, #0
   15306:	d000      	beq.n	1530a <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x36>
   15308:	e7f6      	b.n	152f8 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x24>
	r= i2ca.Read(p,size);
   1530a:	68fb      	ldr	r3, [r7, #12]
   1530c:	3304      	adds	r3, #4
   1530e:	79ba      	ldrb	r2, [r7, #6]
   15310:	b292      	uxth	r2, r2
   15312:	68b9      	ldr	r1, [r7, #8]
   15314:	4618      	mov	r0, r3
   15316:	4b0a      	ldr	r3, [pc, #40]	; (15340 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x6c>)
   15318:	4798      	blx	r3
   1531a:	4603      	mov	r3, r0
   1531c:	617b      	str	r3, [r7, #20]
	while(!i2ca.rxReady);
   1531e:	68fb      	ldr	r3, [r7, #12]
   15320:	7e5b      	ldrb	r3, [r3, #25]
   15322:	b2db      	uxtb	r3, r3
   15324:	f083 0301 	eor.w	r3, r3, #1
   15328:	b2db      	uxtb	r3, r3
   1532a:	2b00      	cmp	r3, #0
   1532c:	d000      	beq.n	15330 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x5c>
   1532e:	e7f6      	b.n	1531e <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4a>
			localAddress+=localSize;
		}
	}
	*/
	
	return r;
   15330:	697b      	ldr	r3, [r7, #20]
}
   15332:	4618      	mov	r0, r3
   15334:	3718      	adds	r7, #24
   15336:	46bd      	mov	sp, r7
   15338:	bd80      	pop	{r7, pc}
   1533a:	bf00      	nop
   1533c:	00014649 	.word	0x00014649
   15340:	0001468d 	.word	0x0001468d

00015344 <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
   15344:	b590      	push	{r4, r7, lr}
   15346:	b087      	sub	sp, #28
   15348:	af00      	add	r7, sp, #0
   1534a:	60f8      	str	r0, [r7, #12]
   1534c:	60b9      	str	r1, [r7, #8]
   1534e:	4611      	mov	r1, r2
   15350:	461a      	mov	r2, r3
   15352:	460b      	mov	r3, r1
   15354:	80fb      	strh	r3, [r7, #6]
   15356:	4613      	mov	r3, r2
   15358:	717b      	strb	r3, [r7, #5]
	uint8_t add=(uint8_t)(0xff&addr);
   1535a:	88fb      	ldrh	r3, [r7, #6]
   1535c:	75fb      	strb	r3, [r7, #23]
	
	return ReadAddress(p,add,size);
   1535e:	797b      	ldrb	r3, [r7, #5]
   15360:	7dfa      	ldrb	r2, [r7, #23]
   15362:	68b9      	ldr	r1, [r7, #8]
   15364:	68f8      	ldr	r0, [r7, #12]
   15366:	4c03      	ldr	r4, [pc, #12]	; (15374 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x30>)
   15368:	47a0      	blx	r4
   1536a:	4603      	mov	r3, r0
}
   1536c:	4618      	mov	r0, r3
   1536e:	371c      	adds	r7, #28
   15370:	46bd      	mov	sp, r7
   15372:	bd90      	pop	{r4, r7, pc}
   15374:	000152d5 	.word	0x000152d5

00015378 <_ZN13AT24MAC_Class14GetAcknowledgeEv>:
bool	AT24MAC_Class::GetAcknowledge(void){
   15378:	b580      	push	{r7, lr}
   1537a:	b082      	sub	sp, #8
   1537c:	af00      	add	r7, sp, #0
   1537e:	6078      	str	r0, [r7, #4]
	byte=Read_byte(0);
   15380:	2100      	movs	r1, #0
   15382:	6878      	ldr	r0, [r7, #4]
   15384:	4b09      	ldr	r3, [pc, #36]	; (153ac <_ZN13AT24MAC_Class14GetAcknowledgeEv+0x34>)
   15386:	4798      	blx	r3
   15388:	4603      	mov	r3, r0
   1538a:	461a      	mov	r2, r3
   1538c:	687b      	ldr	r3, [r7, #4]
   1538e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	return	byte>0;
   15392:	687b      	ldr	r3, [r7, #4]
   15394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   15398:	2b00      	cmp	r3, #0
   1539a:	bfcc      	ite	gt
   1539c:	2301      	movgt	r3, #1
   1539e:	2300      	movle	r3, #0
   153a0:	b2db      	uxtb	r3, r3
}
   153a2:	4618      	mov	r0, r3
   153a4:	3708      	adds	r7, #8
   153a6:	46bd      	mov	sp, r7
   153a8:	bd80      	pop	{r7, pc}
   153aa:	bf00      	nop
   153ac:	00015275 	.word	0x00015275

000153b0 <_ZN13AT24MAC_Class18AcknolledgePollingEv>:
bool AT24MAC_Class::AcknolledgePolling(void){
   153b0:	b580      	push	{r7, lr}
   153b2:	b082      	sub	sp, #8
   153b4:	af00      	add	r7, sp, #0
   153b6:	6078      	str	r0, [r7, #4]
	do 
	{
		GetAcknowledge();
   153b8:	6878      	ldr	r0, [r7, #4]
   153ba:	4b09      	ldr	r3, [pc, #36]	; (153e0 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x30>)
   153bc:	4798      	blx	r3
	} while (!IsReady());
   153be:	6878      	ldr	r0, [r7, #4]
   153c0:	4b08      	ldr	r3, [pc, #32]	; (153e4 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x34>)
   153c2:	4798      	blx	r3
   153c4:	4603      	mov	r3, r0
	do 
   153c6:	f083 0301 	eor.w	r3, r3, #1
   153ca:	b2db      	uxtb	r3, r3
   153cc:	2b00      	cmp	r3, #0
   153ce:	d000      	beq.n	153d2 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x22>
   153d0:	e7f2      	b.n	153b8 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x8>
	return isReady;
   153d2:	687b      	ldr	r3, [r7, #4]
   153d4:	781b      	ldrb	r3, [r3, #0]
   153d6:	b2db      	uxtb	r3, r3
}
   153d8:	4618      	mov	r0, r3
   153da:	3708      	adds	r7, #8
   153dc:	46bd      	mov	sp, r7
   153de:	bd80      	pop	{r7, pc}
   153e0:	00015379 	.word	0x00015379
   153e4:	000154e1 	.word	0x000154e1

000153e8 <_ZN13AT24MAC_Class8SelfTestEv>:

bool	AT24MAC_Class::SelfTest(void){
   153e8:	b590      	push	{r4, r7, lr}
   153ea:	b085      	sub	sp, #20
   153ec:	af00      	add	r7, sp, #0
   153ee:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE*2;
   153f0:	687b      	ldr	r3, [r7, #4]
   153f2:	22e0      	movs	r2, #224	; 0xe0
   153f4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   153f8:	2300      	movs	r3, #0
   153fa:	60fb      	str	r3, [r7, #12]
   153fc:	68fb      	ldr	r3, [r7, #12]
   153fe:	2b0f      	cmp	r3, #15
   15400:	dc18      	bgt.n	15434 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
   15402:	4b33      	ldr	r3, [pc, #204]	; (154d0 <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
   15404:	4798      	blx	r3
   15406:	4603      	mov	r3, r0
   15408:	b2d9      	uxtb	r1, r3
   1540a:	687a      	ldr	r2, [r7, #4]
   1540c:	68fb      	ldr	r3, [r7, #12]
   1540e:	4413      	add	r3, r2
   15410:	3346      	adds	r3, #70	; 0x46
   15412:	460a      	mov	r2, r1
   15414:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
   15416:	68fb      	ldr	r3, [r7, #12]
   15418:	b2db      	uxtb	r3, r3
   1541a:	f1c3 0310 	rsb	r3, r3, #16
   1541e:	b2d9      	uxtb	r1, r3
   15420:	687a      	ldr	r2, [r7, #4]
   15422:	68fb      	ldr	r3, [r7, #12]
   15424:	4413      	add	r3, r2
   15426:	3356      	adds	r3, #86	; 0x56
   15428:	460a      	mov	r2, r1
   1542a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   1542c:	68fb      	ldr	r3, [r7, #12]
   1542e:	3301      	adds	r3, #1
   15430:	60fb      	str	r3, [r7, #12]
   15432:	e7e3      	b.n	153fc <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
   15434:	6878      	ldr	r0, [r7, #4]
   15436:	4b27      	ldr	r3, [pc, #156]	; (154d4 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   15438:	4798      	blx	r3
   1543a:	4603      	mov	r3, r0
   1543c:	f083 0301 	eor.w	r3, r3, #1
   15440:	b2db      	uxtb	r3, r3
   15442:	2b00      	cmp	r3, #0
   15444:	d000      	beq.n	15448 <_ZN13AT24MAC_Class8SelfTestEv+0x60>
   15446:	e7f5      	b.n	15434 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   15448:	687b      	ldr	r3, [r7, #4]
   1544a:	f103 0146 	add.w	r1, r3, #70	; 0x46
   1544e:	687b      	ldr	r3, [r7, #4]
   15450:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
   15454:	2310      	movs	r3, #16
   15456:	6878      	ldr	r0, [r7, #4]
   15458:	4c1f      	ldr	r4, [pc, #124]	; (154d8 <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
   1545a:	47a0      	blx	r4
	while(!IsReady());
   1545c:	6878      	ldr	r0, [r7, #4]
   1545e:	4b1d      	ldr	r3, [pc, #116]	; (154d4 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   15460:	4798      	blx	r3
   15462:	4603      	mov	r3, r0
   15464:	f083 0301 	eor.w	r3, r3, #1
   15468:	b2db      	uxtb	r3, r3
   1546a:	2b00      	cmp	r3, #0
   1546c:	d000      	beq.n	15470 <_ZN13AT24MAC_Class8SelfTestEv+0x88>
   1546e:	e7f5      	b.n	1545c <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   15470:	687b      	ldr	r3, [r7, #4]
   15472:	f103 0156 	add.w	r1, r3, #86	; 0x56
   15476:	687b      	ldr	r3, [r7, #4]
   15478:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
   1547c:	2310      	movs	r3, #16
   1547e:	6878      	ldr	r0, [r7, #4]
   15480:	4c16      	ldr	r4, [pc, #88]	; (154dc <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
   15482:	47a0      	blx	r4
	isOK = true;
   15484:	687b      	ldr	r3, [r7, #4]
   15486:	2201      	movs	r2, #1
   15488:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   1548c:	2300      	movs	r3, #0
   1548e:	60bb      	str	r3, [r7, #8]
   15490:	68bb      	ldr	r3, [r7, #8]
   15492:	2b0f      	cmp	r3, #15
   15494:	dc14      	bgt.n	154c0 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
   15496:	687a      	ldr	r2, [r7, #4]
   15498:	68bb      	ldr	r3, [r7, #8]
   1549a:	4413      	add	r3, r2
   1549c:	3346      	adds	r3, #70	; 0x46
   1549e:	781a      	ldrb	r2, [r3, #0]
   154a0:	6879      	ldr	r1, [r7, #4]
   154a2:	68bb      	ldr	r3, [r7, #8]
   154a4:	440b      	add	r3, r1
   154a6:	3356      	adds	r3, #86	; 0x56
   154a8:	781b      	ldrb	r3, [r3, #0]
   154aa:	429a      	cmp	r2, r3
   154ac:	d004      	beq.n	154b8 <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
   154ae:	687b      	ldr	r3, [r7, #4]
   154b0:	2200      	movs	r2, #0
   154b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
   154b6:	e003      	b.n	154c0 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   154b8:	68bb      	ldr	r3, [r7, #8]
   154ba:	3301      	adds	r3, #1
   154bc:	60bb      	str	r3, [r7, #8]
   154be:	e7e7      	b.n	15490 <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
   154c0:	687b      	ldr	r3, [r7, #4]
   154c2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
   154c6:	4618      	mov	r0, r3
   154c8:	3714      	adds	r7, #20
   154ca:	46bd      	mov	sp, r7
   154cc:	bd90      	pop	{r4, r7, pc}
   154ce:	bf00      	nop
   154d0:	0001b125 	.word	0x0001b125
   154d4:	000154e1 	.word	0x000154e1
   154d8:	000151ad 	.word	0x000151ad
   154dc:	000152d5 	.word	0x000152d5

000154e0 <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
   154e0:	b480      	push	{r7}
   154e2:	b083      	sub	sp, #12
   154e4:	af00      	add	r7, sp, #0
   154e6:	6078      	str	r0, [r7, #4]

	if (i2ca.txReady && i2ca.rxReady)
   154e8:	687b      	ldr	r3, [r7, #4]
   154ea:	7e1b      	ldrb	r3, [r3, #24]
   154ec:	b2db      	uxtb	r3, r3
   154ee:	2b00      	cmp	r3, #0
   154f0:	d006      	beq.n	15500 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
   154f2:	687b      	ldr	r3, [r7, #4]
   154f4:	7e5b      	ldrb	r3, [r3, #25]
   154f6:	b2db      	uxtb	r3, r3
   154f8:	2b00      	cmp	r3, #0
   154fa:	d001      	beq.n	15500 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
   154fc:	2301      	movs	r3, #1
   154fe:	e000      	b.n	15502 <_ZN13AT24MAC_Class7IsReadyEv+0x22>
   15500:	2300      	movs	r3, #0
   15502:	2b00      	cmp	r3, #0
   15504:	d003      	beq.n	1550e <_ZN13AT24MAC_Class7IsReadyEv+0x2e>
	{
		isReady=true;
   15506:	687b      	ldr	r3, [r7, #4]
   15508:	2201      	movs	r2, #1
   1550a:	701a      	strb	r2, [r3, #0]
   1550c:	e002      	b.n	15514 <_ZN13AT24MAC_Class7IsReadyEv+0x34>
	}
	else
	{
		isReady=false;
   1550e:	687b      	ldr	r3, [r7, #4]
   15510:	2200      	movs	r2, #0
   15512:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
   15514:	687b      	ldr	r3, [r7, #4]
   15516:	781b      	ldrb	r3, [r3, #0]
   15518:	b2db      	uxtb	r3, r3
}
   1551a:	4618      	mov	r0, r3
   1551c:	370c      	adds	r7, #12
   1551e:	46bd      	mov	sp, r7
   15520:	bc80      	pop	{r7}
   15522:	4770      	bx	lr

00015524 <_Z41__static_initialization_and_destruction_0ii>:

   15524:	b580      	push	{r7, lr}
   15526:	b082      	sub	sp, #8
   15528:	af00      	add	r7, sp, #0
   1552a:	6078      	str	r0, [r7, #4]
   1552c:	6039      	str	r1, [r7, #0]
   1552e:	687b      	ldr	r3, [r7, #4]
   15530:	2b01      	cmp	r3, #1
   15532:	d10d      	bne.n	15550 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   15534:	683b      	ldr	r3, [r7, #0]
   15536:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1553a:	4293      	cmp	r3, r2
   1553c:	d108      	bne.n	15550 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1553e:	4906      	ldr	r1, [pc, #24]	; (15558 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   15540:	4806      	ldr	r0, [pc, #24]	; (1555c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   15542:	4b07      	ldr	r3, [pc, #28]	; (15560 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   15544:	4798      	blx	r3
   15546:	4a07      	ldr	r2, [pc, #28]	; (15564 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   15548:	4907      	ldr	r1, [pc, #28]	; (15568 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1554a:	4804      	ldr	r0, [pc, #16]	; (1555c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1554c:	4b07      	ldr	r3, [pc, #28]	; (1556c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1554e:	4798      	blx	r3
   15550:	bf00      	nop
   15552:	3708      	adds	r7, #8
   15554:	46bd      	mov	sp, r7
   15556:	bd80      	pop	{r7, pc}
   15558:	2000a2f4 	.word	0x2000a2f4
   1555c:	2000995c 	.word	0x2000995c
   15560:	0001508d 	.word	0x0001508d
   15564:	20000000 	.word	0x20000000
   15568:	000150c1 	.word	0x000150c1
   1556c:	000187f1 	.word	0x000187f1

00015570 <_GLOBAL__sub_I_ptrAT24MACClass>:
   15570:	b580      	push	{r7, lr}
   15572:	af00      	add	r7, sp, #0
   15574:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15578:	2001      	movs	r0, #1
   1557a:	4b01      	ldr	r3, [pc, #4]	; (15580 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
   1557c:	4798      	blx	r3
   1557e:	bd80      	pop	{r7, pc}
   15580:	00015525 	.word	0x00015525

00015584 <hri_port_set_DIR_reg>:
{
   15584:	b480      	push	{r7}
   15586:	b085      	sub	sp, #20
   15588:	af00      	add	r7, sp, #0
   1558a:	60f8      	str	r0, [r7, #12]
   1558c:	460b      	mov	r3, r1
   1558e:	607a      	str	r2, [r7, #4]
   15590:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   15592:	7afb      	ldrb	r3, [r7, #11]
   15594:	68fa      	ldr	r2, [r7, #12]
   15596:	01db      	lsls	r3, r3, #7
   15598:	4413      	add	r3, r2
   1559a:	3308      	adds	r3, #8
   1559c:	687a      	ldr	r2, [r7, #4]
   1559e:	601a      	str	r2, [r3, #0]
}
   155a0:	bf00      	nop
   155a2:	3714      	adds	r7, #20
   155a4:	46bd      	mov	sp, r7
   155a6:	bc80      	pop	{r7}
   155a8:	4770      	bx	lr

000155aa <hri_port_clear_DIR_reg>:
{
   155aa:	b480      	push	{r7}
   155ac:	b085      	sub	sp, #20
   155ae:	af00      	add	r7, sp, #0
   155b0:	60f8      	str	r0, [r7, #12]
   155b2:	460b      	mov	r3, r1
   155b4:	607a      	str	r2, [r7, #4]
   155b6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   155b8:	7afb      	ldrb	r3, [r7, #11]
   155ba:	68fa      	ldr	r2, [r7, #12]
   155bc:	01db      	lsls	r3, r3, #7
   155be:	4413      	add	r3, r2
   155c0:	3304      	adds	r3, #4
   155c2:	687a      	ldr	r2, [r7, #4]
   155c4:	601a      	str	r2, [r3, #0]
}
   155c6:	bf00      	nop
   155c8:	3714      	adds	r7, #20
   155ca:	46bd      	mov	sp, r7
   155cc:	bc80      	pop	{r7}
   155ce:	4770      	bx	lr

000155d0 <hri_port_set_OUT_reg>:
{
   155d0:	b480      	push	{r7}
   155d2:	b085      	sub	sp, #20
   155d4:	af00      	add	r7, sp, #0
   155d6:	60f8      	str	r0, [r7, #12]
   155d8:	460b      	mov	r3, r1
   155da:	607a      	str	r2, [r7, #4]
   155dc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   155de:	7afb      	ldrb	r3, [r7, #11]
   155e0:	68fa      	ldr	r2, [r7, #12]
   155e2:	01db      	lsls	r3, r3, #7
   155e4:	4413      	add	r3, r2
   155e6:	3318      	adds	r3, #24
   155e8:	687a      	ldr	r2, [r7, #4]
   155ea:	601a      	str	r2, [r3, #0]
}
   155ec:	bf00      	nop
   155ee:	3714      	adds	r7, #20
   155f0:	46bd      	mov	sp, r7
   155f2:	bc80      	pop	{r7}
   155f4:	4770      	bx	lr

000155f6 <hri_port_clear_OUT_reg>:
{
   155f6:	b480      	push	{r7}
   155f8:	b085      	sub	sp, #20
   155fa:	af00      	add	r7, sp, #0
   155fc:	60f8      	str	r0, [r7, #12]
   155fe:	460b      	mov	r3, r1
   15600:	607a      	str	r2, [r7, #4]
   15602:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   15604:	7afb      	ldrb	r3, [r7, #11]
   15606:	68fa      	ldr	r2, [r7, #12]
   15608:	01db      	lsls	r3, r3, #7
   1560a:	4413      	add	r3, r2
   1560c:	3314      	adds	r3, #20
   1560e:	687a      	ldr	r2, [r7, #4]
   15610:	601a      	str	r2, [r3, #0]
}
   15612:	bf00      	nop
   15614:	3714      	adds	r7, #20
   15616:	46bd      	mov	sp, r7
   15618:	bc80      	pop	{r7}
   1561a:	4770      	bx	lr

0001561c <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   1561c:	b480      	push	{r7}
   1561e:	b085      	sub	sp, #20
   15620:	af00      	add	r7, sp, #0
   15622:	6078      	str	r0, [r7, #4]
   15624:	4608      	mov	r0, r1
   15626:	4611      	mov	r1, r2
   15628:	461a      	mov	r2, r3
   1562a:	4603      	mov	r3, r0
   1562c:	70fb      	strb	r3, [r7, #3]
   1562e:	460b      	mov	r3, r1
   15630:	70bb      	strb	r3, [r7, #2]
   15632:	4613      	mov	r3, r2
   15634:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   15636:	78fa      	ldrb	r2, [r7, #3]
   15638:	78bb      	ldrb	r3, [r7, #2]
   1563a:	6879      	ldr	r1, [r7, #4]
   1563c:	01d2      	lsls	r2, r2, #7
   1563e:	440a      	add	r2, r1
   15640:	4413      	add	r3, r2
   15642:	3330      	adds	r3, #48	; 0x30
   15644:	781b      	ldrb	r3, [r3, #0]
   15646:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   15648:	7bfb      	ldrb	r3, [r7, #15]
   1564a:	f023 030f 	bic.w	r3, r3, #15
   1564e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   15650:	787b      	ldrb	r3, [r7, #1]
   15652:	f003 030f 	and.w	r3, r3, #15
   15656:	b2da      	uxtb	r2, r3
   15658:	7bfb      	ldrb	r3, [r7, #15]
   1565a:	4313      	orrs	r3, r2
   1565c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   1565e:	78fa      	ldrb	r2, [r7, #3]
   15660:	78bb      	ldrb	r3, [r7, #2]
   15662:	6879      	ldr	r1, [r7, #4]
   15664:	01d2      	lsls	r2, r2, #7
   15666:	440a      	add	r2, r1
   15668:	4413      	add	r3, r2
   1566a:	3330      	adds	r3, #48	; 0x30
   1566c:	7bfa      	ldrb	r2, [r7, #15]
   1566e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   15670:	bf00      	nop
   15672:	3714      	adds	r7, #20
   15674:	46bd      	mov	sp, r7
   15676:	bc80      	pop	{r7}
   15678:	4770      	bx	lr

0001567a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   1567a:	b480      	push	{r7}
   1567c:	b085      	sub	sp, #20
   1567e:	af00      	add	r7, sp, #0
   15680:	6078      	str	r0, [r7, #4]
   15682:	4608      	mov	r0, r1
   15684:	4611      	mov	r1, r2
   15686:	461a      	mov	r2, r3
   15688:	4603      	mov	r3, r0
   1568a:	70fb      	strb	r3, [r7, #3]
   1568c:	460b      	mov	r3, r1
   1568e:	70bb      	strb	r3, [r7, #2]
   15690:	4613      	mov	r3, r2
   15692:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   15694:	78fa      	ldrb	r2, [r7, #3]
   15696:	78bb      	ldrb	r3, [r7, #2]
   15698:	6879      	ldr	r1, [r7, #4]
   1569a:	01d2      	lsls	r2, r2, #7
   1569c:	440a      	add	r2, r1
   1569e:	4413      	add	r3, r2
   156a0:	3330      	adds	r3, #48	; 0x30
   156a2:	781b      	ldrb	r3, [r3, #0]
   156a4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   156a6:	7bfb      	ldrb	r3, [r7, #15]
   156a8:	f003 030f 	and.w	r3, r3, #15
   156ac:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   156ae:	787b      	ldrb	r3, [r7, #1]
   156b0:	011b      	lsls	r3, r3, #4
   156b2:	b2da      	uxtb	r2, r3
   156b4:	7bfb      	ldrb	r3, [r7, #15]
   156b6:	4313      	orrs	r3, r2
   156b8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   156ba:	78fa      	ldrb	r2, [r7, #3]
   156bc:	78bb      	ldrb	r3, [r7, #2]
   156be:	6879      	ldr	r1, [r7, #4]
   156c0:	01d2      	lsls	r2, r2, #7
   156c2:	440a      	add	r2, r1
   156c4:	4413      	add	r3, r2
   156c6:	3330      	adds	r3, #48	; 0x30
   156c8:	7bfa      	ldrb	r2, [r7, #15]
   156ca:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   156cc:	bf00      	nop
   156ce:	3714      	adds	r7, #20
   156d0:	46bd      	mov	sp, r7
   156d2:	bc80      	pop	{r7}
   156d4:	4770      	bx	lr

000156d6 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   156d6:	b480      	push	{r7}
   156d8:	b085      	sub	sp, #20
   156da:	af00      	add	r7, sp, #0
   156dc:	6078      	str	r0, [r7, #4]
   156de:	4608      	mov	r0, r1
   156e0:	4611      	mov	r1, r2
   156e2:	461a      	mov	r2, r3
   156e4:	4603      	mov	r3, r0
   156e6:	70fb      	strb	r3, [r7, #3]
   156e8:	460b      	mov	r3, r1
   156ea:	70bb      	strb	r3, [r7, #2]
   156ec:	4613      	mov	r3, r2
   156ee:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   156f0:	78fa      	ldrb	r2, [r7, #3]
   156f2:	78bb      	ldrb	r3, [r7, #2]
   156f4:	6879      	ldr	r1, [r7, #4]
   156f6:	01d2      	lsls	r2, r2, #7
   156f8:	440a      	add	r2, r1
   156fa:	4413      	add	r3, r2
   156fc:	3340      	adds	r3, #64	; 0x40
   156fe:	781b      	ldrb	r3, [r3, #0]
   15700:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   15702:	7bfb      	ldrb	r3, [r7, #15]
   15704:	f023 0301 	bic.w	r3, r3, #1
   15708:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   1570a:	787a      	ldrb	r2, [r7, #1]
   1570c:	7bfb      	ldrb	r3, [r7, #15]
   1570e:	4313      	orrs	r3, r2
   15710:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   15712:	78fa      	ldrb	r2, [r7, #3]
   15714:	78bb      	ldrb	r3, [r7, #2]
   15716:	6879      	ldr	r1, [r7, #4]
   15718:	01d2      	lsls	r2, r2, #7
   1571a:	440a      	add	r2, r1
   1571c:	4413      	add	r3, r2
   1571e:	3340      	adds	r3, #64	; 0x40
   15720:	7bfa      	ldrb	r2, [r7, #15]
   15722:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   15724:	bf00      	nop
   15726:	3714      	adds	r7, #20
   15728:	46bd      	mov	sp, r7
   1572a:	bc80      	pop	{r7}
   1572c:	4770      	bx	lr

0001572e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   1572e:	b480      	push	{r7}
   15730:	b085      	sub	sp, #20
   15732:	af00      	add	r7, sp, #0
   15734:	60f8      	str	r0, [r7, #12]
   15736:	460b      	mov	r3, r1
   15738:	607a      	str	r2, [r7, #4]
   1573a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   1573c:	7afb      	ldrb	r3, [r7, #11]
   1573e:	68fa      	ldr	r2, [r7, #12]
   15740:	01db      	lsls	r3, r3, #7
   15742:	4413      	add	r3, r2
   15744:	3328      	adds	r3, #40	; 0x28
   15746:	687a      	ldr	r2, [r7, #4]
   15748:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1574a:	bf00      	nop
   1574c:	3714      	adds	r7, #20
   1574e:	46bd      	mov	sp, r7
   15750:	bc80      	pop	{r7}
   15752:	4770      	bx	lr

00015754 <_gpio_set_direction>:
{
   15754:	b580      	push	{r7, lr}
   15756:	b082      	sub	sp, #8
   15758:	af00      	add	r7, sp, #0
   1575a:	4603      	mov	r3, r0
   1575c:	6039      	str	r1, [r7, #0]
   1575e:	71fb      	strb	r3, [r7, #7]
   15760:	4613      	mov	r3, r2
   15762:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   15764:	79bb      	ldrb	r3, [r7, #6]
   15766:	2b01      	cmp	r3, #1
   15768:	d01c      	beq.n	157a4 <_gpio_set_direction+0x50>
   1576a:	2b02      	cmp	r3, #2
   1576c:	d037      	beq.n	157de <_gpio_set_direction+0x8a>
   1576e:	2b00      	cmp	r3, #0
   15770:	d14e      	bne.n	15810 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   15772:	79fb      	ldrb	r3, [r7, #7]
   15774:	683a      	ldr	r2, [r7, #0]
   15776:	4619      	mov	r1, r3
   15778:	482a      	ldr	r0, [pc, #168]	; (15824 <_gpio_set_direction+0xd0>)
   1577a:	4b2b      	ldr	r3, [pc, #172]	; (15828 <_gpio_set_direction+0xd4>)
   1577c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   1577e:	683b      	ldr	r3, [r7, #0]
   15780:	b29b      	uxth	r3, r3
   15782:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   15786:	79fb      	ldrb	r3, [r7, #7]
   15788:	4619      	mov	r1, r3
   1578a:	4826      	ldr	r0, [pc, #152]	; (15824 <_gpio_set_direction+0xd0>)
   1578c:	4b27      	ldr	r3, [pc, #156]	; (1582c <_gpio_set_direction+0xd8>)
   1578e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   15790:	683b      	ldr	r3, [r7, #0]
   15792:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   15794:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   15798:	79fb      	ldrb	r3, [r7, #7]
   1579a:	4619      	mov	r1, r3
   1579c:	4821      	ldr	r0, [pc, #132]	; (15824 <_gpio_set_direction+0xd0>)
   1579e:	4b23      	ldr	r3, [pc, #140]	; (1582c <_gpio_set_direction+0xd8>)
   157a0:	4798      	blx	r3
		break;
   157a2:	e03a      	b.n	1581a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   157a4:	79fb      	ldrb	r3, [r7, #7]
   157a6:	683a      	ldr	r2, [r7, #0]
   157a8:	4619      	mov	r1, r3
   157aa:	481e      	ldr	r0, [pc, #120]	; (15824 <_gpio_set_direction+0xd0>)
   157ac:	4b1e      	ldr	r3, [pc, #120]	; (15828 <_gpio_set_direction+0xd4>)
   157ae:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   157b0:	683b      	ldr	r3, [r7, #0]
   157b2:	b29b      	uxth	r3, r3
   157b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   157b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   157bc:	79f9      	ldrb	r1, [r7, #7]
   157be:	461a      	mov	r2, r3
   157c0:	4818      	ldr	r0, [pc, #96]	; (15824 <_gpio_set_direction+0xd0>)
   157c2:	4b1a      	ldr	r3, [pc, #104]	; (1582c <_gpio_set_direction+0xd8>)
   157c4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   157c6:	683b      	ldr	r3, [r7, #0]
   157c8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   157ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   157ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   157d2:	79f9      	ldrb	r1, [r7, #7]
   157d4:	461a      	mov	r2, r3
   157d6:	4813      	ldr	r0, [pc, #76]	; (15824 <_gpio_set_direction+0xd0>)
   157d8:	4b14      	ldr	r3, [pc, #80]	; (1582c <_gpio_set_direction+0xd8>)
   157da:	4798      	blx	r3
		break;
   157dc:	e01d      	b.n	1581a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   157de:	79fb      	ldrb	r3, [r7, #7]
   157e0:	683a      	ldr	r2, [r7, #0]
   157e2:	4619      	mov	r1, r3
   157e4:	480f      	ldr	r0, [pc, #60]	; (15824 <_gpio_set_direction+0xd0>)
   157e6:	4b12      	ldr	r3, [pc, #72]	; (15830 <_gpio_set_direction+0xdc>)
   157e8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   157ea:	683b      	ldr	r3, [r7, #0]
   157ec:	b29b      	uxth	r3, r3
   157ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   157f2:	79fb      	ldrb	r3, [r7, #7]
   157f4:	4619      	mov	r1, r3
   157f6:	480b      	ldr	r0, [pc, #44]	; (15824 <_gpio_set_direction+0xd0>)
   157f8:	4b0c      	ldr	r3, [pc, #48]	; (1582c <_gpio_set_direction+0xd8>)
   157fa:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   157fc:	683b      	ldr	r3, [r7, #0]
   157fe:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   15800:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   15804:	79fb      	ldrb	r3, [r7, #7]
   15806:	4619      	mov	r1, r3
   15808:	4806      	ldr	r0, [pc, #24]	; (15824 <_gpio_set_direction+0xd0>)
   1580a:	4b08      	ldr	r3, [pc, #32]	; (1582c <_gpio_set_direction+0xd8>)
   1580c:	4798      	blx	r3
		break;
   1580e:	e004      	b.n	1581a <_gpio_set_direction+0xc6>
		ASSERT(false);
   15810:	2246      	movs	r2, #70	; 0x46
   15812:	4908      	ldr	r1, [pc, #32]	; (15834 <_gpio_set_direction+0xe0>)
   15814:	2000      	movs	r0, #0
   15816:	4b08      	ldr	r3, [pc, #32]	; (15838 <_gpio_set_direction+0xe4>)
   15818:	4798      	blx	r3
}
   1581a:	bf00      	nop
   1581c:	3708      	adds	r7, #8
   1581e:	46bd      	mov	sp, r7
   15820:	bd80      	pop	{r7, pc}
   15822:	bf00      	nop
   15824:	41008000 	.word	0x41008000
   15828:	000155ab 	.word	0x000155ab
   1582c:	0001572f 	.word	0x0001572f
   15830:	00015585 	.word	0x00015585
   15834:	00020a80 	.word	0x00020a80
   15838:	00007d91 	.word	0x00007d91

0001583c <_gpio_set_level>:
{
   1583c:	b580      	push	{r7, lr}
   1583e:	b082      	sub	sp, #8
   15840:	af00      	add	r7, sp, #0
   15842:	4603      	mov	r3, r0
   15844:	6039      	str	r1, [r7, #0]
   15846:	71fb      	strb	r3, [r7, #7]
   15848:	4613      	mov	r3, r2
   1584a:	71bb      	strb	r3, [r7, #6]
	if (level) {
   1584c:	79bb      	ldrb	r3, [r7, #6]
   1584e:	2b00      	cmp	r3, #0
   15850:	d006      	beq.n	15860 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   15852:	79fb      	ldrb	r3, [r7, #7]
   15854:	683a      	ldr	r2, [r7, #0]
   15856:	4619      	mov	r1, r3
   15858:	4806      	ldr	r0, [pc, #24]	; (15874 <_gpio_set_level+0x38>)
   1585a:	4b07      	ldr	r3, [pc, #28]	; (15878 <_gpio_set_level+0x3c>)
   1585c:	4798      	blx	r3
}
   1585e:	e005      	b.n	1586c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   15860:	79fb      	ldrb	r3, [r7, #7]
   15862:	683a      	ldr	r2, [r7, #0]
   15864:	4619      	mov	r1, r3
   15866:	4803      	ldr	r0, [pc, #12]	; (15874 <_gpio_set_level+0x38>)
   15868:	4b04      	ldr	r3, [pc, #16]	; (1587c <_gpio_set_level+0x40>)
   1586a:	4798      	blx	r3
}
   1586c:	bf00      	nop
   1586e:	3708      	adds	r7, #8
   15870:	46bd      	mov	sp, r7
   15872:	bd80      	pop	{r7, pc}
   15874:	41008000 	.word	0x41008000
   15878:	000155d1 	.word	0x000155d1
   1587c:	000155f7 	.word	0x000155f7

00015880 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   15880:	b590      	push	{r4, r7, lr}
   15882:	b085      	sub	sp, #20
   15884:	af00      	add	r7, sp, #0
   15886:	6078      	str	r0, [r7, #4]
   15888:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   1588a:	687b      	ldr	r3, [r7, #4]
   1588c:	095b      	lsrs	r3, r3, #5
   1588e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   15890:	687b      	ldr	r3, [r7, #4]
   15892:	b2db      	uxtb	r3, r3
   15894:	f003 031f 	and.w	r3, r3, #31
   15898:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   1589a:	683b      	ldr	r3, [r7, #0]
   1589c:	f1b3 3fff 	cmp.w	r3, #4294967295
   158a0:	d106      	bne.n	158b0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   158a2:	7bba      	ldrb	r2, [r7, #14]
   158a4:	7bf9      	ldrb	r1, [r7, #15]
   158a6:	2300      	movs	r3, #0
   158a8:	4812      	ldr	r0, [pc, #72]	; (158f4 <_gpio_set_pin_function+0x74>)
   158aa:	4c13      	ldr	r4, [pc, #76]	; (158f8 <_gpio_set_pin_function+0x78>)
   158ac:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   158ae:	e01d      	b.n	158ec <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   158b0:	7bba      	ldrb	r2, [r7, #14]
   158b2:	7bf9      	ldrb	r1, [r7, #15]
   158b4:	2301      	movs	r3, #1
   158b6:	480f      	ldr	r0, [pc, #60]	; (158f4 <_gpio_set_pin_function+0x74>)
   158b8:	4c0f      	ldr	r4, [pc, #60]	; (158f8 <_gpio_set_pin_function+0x78>)
   158ba:	47a0      	blx	r4
		if (pin & 1) {
   158bc:	7bbb      	ldrb	r3, [r7, #14]
   158be:	f003 0301 	and.w	r3, r3, #1
   158c2:	2b00      	cmp	r3, #0
   158c4:	d009      	beq.n	158da <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   158c6:	7bbb      	ldrb	r3, [r7, #14]
   158c8:	105b      	asrs	r3, r3, #1
   158ca:	b2da      	uxtb	r2, r3
   158cc:	683b      	ldr	r3, [r7, #0]
   158ce:	b2db      	uxtb	r3, r3
   158d0:	7bf9      	ldrb	r1, [r7, #15]
   158d2:	4808      	ldr	r0, [pc, #32]	; (158f4 <_gpio_set_pin_function+0x74>)
   158d4:	4c09      	ldr	r4, [pc, #36]	; (158fc <_gpio_set_pin_function+0x7c>)
   158d6:	47a0      	blx	r4
}
   158d8:	e008      	b.n	158ec <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   158da:	7bbb      	ldrb	r3, [r7, #14]
   158dc:	105b      	asrs	r3, r3, #1
   158de:	b2da      	uxtb	r2, r3
   158e0:	683b      	ldr	r3, [r7, #0]
   158e2:	b2db      	uxtb	r3, r3
   158e4:	7bf9      	ldrb	r1, [r7, #15]
   158e6:	4803      	ldr	r0, [pc, #12]	; (158f4 <_gpio_set_pin_function+0x74>)
   158e8:	4c05      	ldr	r4, [pc, #20]	; (15900 <_gpio_set_pin_function+0x80>)
   158ea:	47a0      	blx	r4
}
   158ec:	bf00      	nop
   158ee:	3714      	adds	r7, #20
   158f0:	46bd      	mov	sp, r7
   158f2:	bd90      	pop	{r4, r7, pc}
   158f4:	41008000 	.word	0x41008000
   158f8:	000156d7 	.word	0x000156d7
   158fc:	0001567b 	.word	0x0001567b
   15900:	0001561d 	.word	0x0001561d

00015904 <gpio_set_pin_function>:
{
   15904:	b580      	push	{r7, lr}
   15906:	b082      	sub	sp, #8
   15908:	af00      	add	r7, sp, #0
   1590a:	6078      	str	r0, [r7, #4]
   1590c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   1590e:	6839      	ldr	r1, [r7, #0]
   15910:	6878      	ldr	r0, [r7, #4]
   15912:	4b03      	ldr	r3, [pc, #12]	; (15920 <gpio_set_pin_function+0x1c>)
   15914:	4798      	blx	r3
}
   15916:	bf00      	nop
   15918:	3708      	adds	r7, #8
   1591a:	46bd      	mov	sp, r7
   1591c:	bd80      	pop	{r7, pc}
   1591e:	bf00      	nop
   15920:	00015881 	.word	0x00015881

00015924 <gpio_set_pin_direction>:
{
   15924:	b580      	push	{r7, lr}
   15926:	b082      	sub	sp, #8
   15928:	af00      	add	r7, sp, #0
   1592a:	4603      	mov	r3, r0
   1592c:	460a      	mov	r2, r1
   1592e:	71fb      	strb	r3, [r7, #7]
   15930:	4613      	mov	r3, r2
   15932:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   15934:	79fb      	ldrb	r3, [r7, #7]
   15936:	115b      	asrs	r3, r3, #5
   15938:	b2d8      	uxtb	r0, r3
   1593a:	79fb      	ldrb	r3, [r7, #7]
   1593c:	f003 031f 	and.w	r3, r3, #31
   15940:	2201      	movs	r2, #1
   15942:	fa02 f303 	lsl.w	r3, r2, r3
   15946:	79ba      	ldrb	r2, [r7, #6]
   15948:	4619      	mov	r1, r3
   1594a:	4b03      	ldr	r3, [pc, #12]	; (15958 <gpio_set_pin_direction+0x34>)
   1594c:	4798      	blx	r3
}
   1594e:	bf00      	nop
   15950:	3708      	adds	r7, #8
   15952:	46bd      	mov	sp, r7
   15954:	bd80      	pop	{r7, pc}
   15956:	bf00      	nop
   15958:	00015755 	.word	0x00015755

0001595c <gpio_set_pin_level>:
{
   1595c:	b580      	push	{r7, lr}
   1595e:	b082      	sub	sp, #8
   15960:	af00      	add	r7, sp, #0
   15962:	4603      	mov	r3, r0
   15964:	460a      	mov	r2, r1
   15966:	71fb      	strb	r3, [r7, #7]
   15968:	4613      	mov	r3, r2
   1596a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1596c:	79fb      	ldrb	r3, [r7, #7]
   1596e:	115b      	asrs	r3, r3, #5
   15970:	b2d8      	uxtb	r0, r3
   15972:	79fb      	ldrb	r3, [r7, #7]
   15974:	f003 031f 	and.w	r3, r3, #31
   15978:	2201      	movs	r2, #1
   1597a:	fa02 f303 	lsl.w	r3, r2, r3
   1597e:	79ba      	ldrb	r2, [r7, #6]
   15980:	4619      	mov	r1, r3
   15982:	4b03      	ldr	r3, [pc, #12]	; (15990 <gpio_set_pin_level+0x34>)
   15984:	4798      	blx	r3
}
   15986:	bf00      	nop
   15988:	3708      	adds	r7, #8
   1598a:	46bd      	mov	sp, r7
   1598c:	bd80      	pop	{r7, pc}
   1598e:	bf00      	nop
   15990:	0001583d 	.word	0x0001583d

00015994 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   15994:	b580      	push	{r7, lr}
   15996:	b082      	sub	sp, #8
   15998:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   1599a:	2100      	movs	r1, #0
   1599c:	2008      	movs	r0, #8
   1599e:	4b24      	ldr	r3, [pc, #144]	; (15a30 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   159a0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   159a2:	2100      	movs	r1, #0
   159a4:	202b      	movs	r0, #43	; 0x2b
   159a6:	4b22      	ldr	r3, [pc, #136]	; (15a30 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   159a8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   159aa:	2100      	movs	r1, #0
   159ac:	202a      	movs	r0, #42	; 0x2a
   159ae:	4b20      	ldr	r3, [pc, #128]	; (15a30 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   159b0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   159b2:	2102      	movs	r1, #2
   159b4:	2008      	movs	r0, #8
   159b6:	4b1f      	ldr	r3, [pc, #124]	; (15a34 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   159b8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   159ba:	2102      	movs	r1, #2
   159bc:	202b      	movs	r0, #43	; 0x2b
   159be:	4b1d      	ldr	r3, [pc, #116]	; (15a34 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   159c0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   159c2:	2102      	movs	r1, #2
   159c4:	202a      	movs	r0, #42	; 0x2a
   159c6:	4b1b      	ldr	r3, [pc, #108]	; (15a34 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   159c8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   159ca:	2101      	movs	r1, #1
   159cc:	2008      	movs	r0, #8
   159ce:	4b1a      	ldr	r3, [pc, #104]	; (15a38 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   159d0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   159d2:	2100      	movs	r1, #0
   159d4:	202b      	movs	r0, #43	; 0x2b
   159d6:	4b18      	ldr	r3, [pc, #96]	; (15a38 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   159d8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   159da:	2100      	movs	r1, #0
   159dc:	202a      	movs	r0, #42	; 0x2a
   159de:	4b16      	ldr	r3, [pc, #88]	; (15a38 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   159e0:	4798      	blx	r3

	delay_us(1);
   159e2:	2001      	movs	r0, #1
   159e4:	4b15      	ldr	r3, [pc, #84]	; (15a3c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   159e6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   159e8:	2300      	movs	r3, #0
   159ea:	607b      	str	r3, [r7, #4]
   159ec:	687b      	ldr	r3, [r7, #4]
   159ee:	2b06      	cmp	r3, #6
   159f0:	dc11      	bgt.n	15a16 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   159f2:	2101      	movs	r1, #1
   159f4:	202a      	movs	r0, #42	; 0x2a
   159f6:	4b10      	ldr	r3, [pc, #64]	; (15a38 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   159f8:	4798      	blx	r3
		delay_us(1);
   159fa:	2001      	movs	r0, #1
   159fc:	4b0f      	ldr	r3, [pc, #60]	; (15a3c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   159fe:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   15a00:	2100      	movs	r1, #0
   15a02:	202a      	movs	r0, #42	; 0x2a
   15a04:	4b0c      	ldr	r3, [pc, #48]	; (15a38 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   15a06:	4798      	blx	r3
		delay_us(1);
   15a08:	2001      	movs	r0, #1
   15a0a:	4b0c      	ldr	r3, [pc, #48]	; (15a3c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   15a0c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   15a0e:	687b      	ldr	r3, [r7, #4]
   15a10:	3301      	adds	r3, #1
   15a12:	607b      	str	r3, [r7, #4]
   15a14:	e7ea      	b.n	159ec <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   15a16:	2101      	movs	r1, #1
   15a18:	202b      	movs	r0, #43	; 0x2b
   15a1a:	4b07      	ldr	r3, [pc, #28]	; (15a38 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   15a1c:	4798      	blx	r3
	delay_us(1);
   15a1e:	2001      	movs	r0, #1
   15a20:	4b06      	ldr	r3, [pc, #24]	; (15a3c <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   15a22:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   15a24:	4b06      	ldr	r3, [pc, #24]	; (15a40 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   15a26:	4798      	blx	r3
}
   15a28:	bf00      	nop
   15a2a:	3708      	adds	r7, #8
   15a2c:	46bd      	mov	sp, r7
   15a2e:	bd80      	pop	{r7, pc}
   15a30:	00015905 	.word	0x00015905
   15a34:	00015925 	.word	0x00015925
   15a38:	0001595d 	.word	0x0001595d
   15a3c:	00005fed 	.word	0x00005fed
   15a40:	00004dfd 	.word	0x00004dfd

00015a44 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   15a44:	b480      	push	{r7}
   15a46:	b083      	sub	sp, #12
   15a48:	af00      	add	r7, sp, #0
   15a4a:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   15a4c:	687b      	ldr	r3, [r7, #4]
   15a4e:	4618      	mov	r0, r3
   15a50:	370c      	adds	r7, #12
   15a52:	46bd      	mov	sp, r7
   15a54:	bc80      	pop	{r7}
   15a56:	4770      	bx	lr

00015a58 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   15a58:	b480      	push	{r7}
   15a5a:	b083      	sub	sp, #12
   15a5c:	af00      	add	r7, sp, #0
   15a5e:	6078      	str	r0, [r7, #4]
   15a60:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   15a62:	687b      	ldr	r3, [r7, #4]
   15a64:	683a      	ldr	r2, [r7, #0]
   15a66:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   15a68:	687b      	ldr	r3, [r7, #4]
   15a6a:	4a04      	ldr	r2, [pc, #16]	; (15a7c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   15a6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   15a70:	687b      	ldr	r3, [r7, #4]
   15a72:	4618      	mov	r0, r3
   15a74:	370c      	adds	r7, #12
   15a76:	46bd      	mov	sp, r7
   15a78:	bc80      	pop	{r7}
   15a7a:	4770      	bx	lr
   15a7c:	001fff00 	.word	0x001fff00

00015a80 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   15a80:	b480      	push	{r7}
   15a82:	b083      	sub	sp, #12
   15a84:	af00      	add	r7, sp, #0
   15a86:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   15a88:	687b      	ldr	r3, [r7, #4]
   15a8a:	4618      	mov	r0, r3
   15a8c:	370c      	adds	r7, #12
   15a8e:	46bd      	mov	sp, r7
   15a90:	bc80      	pop	{r7}
   15a92:	4770      	bx	lr

00015a94 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   15a94:	b580      	push	{r7, lr}
   15a96:	b082      	sub	sp, #8
   15a98:	af00      	add	r7, sp, #0
   15a9a:	6078      	str	r0, [r7, #4]
	xferDone=false;
   15a9c:	687b      	ldr	r3, [r7, #4]
   15a9e:	2200      	movs	r2, #0
   15aa0:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   15aa2:	6878      	ldr	r0, [r7, #4]
   15aa4:	4b04      	ldr	r3, [pc, #16]	; (15ab8 <_ZN13N25Q256_Class4InitEv+0x24>)
   15aa6:	4798      	blx	r3
	return SelfTest();
   15aa8:	6878      	ldr	r0, [r7, #4]
   15aaa:	4b04      	ldr	r3, [pc, #16]	; (15abc <_ZN13N25Q256_Class4InitEv+0x28>)
   15aac:	4798      	blx	r3
   15aae:	4603      	mov	r3, r0
}
   15ab0:	4618      	mov	r0, r3
   15ab2:	3708      	adds	r7, #8
   15ab4:	46bd      	mov	sp, r7
   15ab6:	bd80      	pop	{r7, pc}
   15ab8:	00015ac1 	.word	0x00015ac1
   15abc:	00015c75 	.word	0x00015c75

00015ac0 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   15ac0:	b590      	push	{r4, r7, lr}
   15ac2:	b083      	sub	sp, #12
   15ac4:	af00      	add	r7, sp, #0
   15ac6:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   15ac8:	687b      	ldr	r3, [r7, #4]
   15aca:	685b      	ldr	r3, [r3, #4]
   15acc:	4618      	mov	r0, r3
   15ace:	4b08      	ldr	r3, [pc, #32]	; (15af0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   15ad0:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   15ad2:	687b      	ldr	r3, [r7, #4]
   15ad4:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   15ad6:	2300      	movs	r3, #0
   15ad8:	4a06      	ldr	r2, [pc, #24]	; (15af4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   15ada:	4807      	ldr	r0, [pc, #28]	; (15af8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   15adc:	4c07      	ldr	r4, [pc, #28]	; (15afc <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   15ade:	47a0      	blx	r4
   15ae0:	4602      	mov	r2, r0
   15ae2:	687b      	ldr	r3, [r7, #4]
   15ae4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   15ae8:	bf00      	nop
   15aea:	370c      	adds	r7, #12
   15aec:	46bd      	mov	sp, r7
   15aee:	bd90      	pop	{r4, r7, pc}
   15af0:	000067bd 	.word	0x000067bd
   15af4:	00015995 	.word	0x00015995
   15af8:	200099cc 	.word	0x200099cc
   15afc:	00010871 	.word	0x00010871

00015b00 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   15b00:	b580      	push	{r7, lr}
   15b02:	b084      	sub	sp, #16
   15b04:	af00      	add	r7, sp, #0
   15b06:	6078      	str	r0, [r7, #4]
   15b08:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   15b0a:	687b      	ldr	r3, [r7, #4]
   15b0c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   15b10:	685b      	ldr	r3, [r3, #4]
   15b12:	689b      	ldr	r3, [r3, #8]
   15b14:	687a      	ldr	r2, [r7, #4]
   15b16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   15b1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   15b1e:	6839      	ldr	r1, [r7, #0]
   15b20:	4798      	blx	r3
   15b22:	4603      	mov	r3, r0
   15b24:	60fb      	str	r3, [r7, #12]
	return	e;
   15b26:	68fb      	ldr	r3, [r7, #12]
}
   15b28:	4618      	mov	r0, r3
   15b2a:	3710      	adds	r7, #16
   15b2c:	46bd      	mov	sp, r7
   15b2e:	bd80      	pop	{r7, pc}

00015b30 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   15b30:	b590      	push	{r4, r7, lr}
   15b32:	b087      	sub	sp, #28
   15b34:	af00      	add	r7, sp, #0
   15b36:	60f8      	str	r0, [r7, #12]
   15b38:	60b9      	str	r1, [r7, #8]
   15b3a:	607a      	str	r2, [r7, #4]
   15b3c:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   15b3e:	68fb      	ldr	r3, [r7, #12]
   15b40:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   15b44:	685b      	ldr	r3, [r3, #4]
   15b46:	685c      	ldr	r4, [r3, #4]
   15b48:	68fb      	ldr	r3, [r7, #12]
   15b4a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   15b4e:	683b      	ldr	r3, [r7, #0]
   15b50:	687a      	ldr	r2, [r7, #4]
   15b52:	68b9      	ldr	r1, [r7, #8]
   15b54:	47a0      	blx	r4
   15b56:	4603      	mov	r3, r0
   15b58:	617b      	str	r3, [r7, #20]
	return	w;
   15b5a:	697b      	ldr	r3, [r7, #20]
}
   15b5c:	4618      	mov	r0, r3
   15b5e:	371c      	adds	r7, #28
   15b60:	46bd      	mov	sp, r7
   15b62:	bd90      	pop	{r4, r7, pc}

00015b64 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   15b64:	b590      	push	{r4, r7, lr}
   15b66:	b087      	sub	sp, #28
   15b68:	af00      	add	r7, sp, #0
   15b6a:	60f8      	str	r0, [r7, #12]
   15b6c:	60b9      	str	r1, [r7, #8]
   15b6e:	607a      	str	r2, [r7, #4]
   15b70:	603b      	str	r3, [r7, #0]
	xferDone=false;
   15b72:	68fb      	ldr	r3, [r7, #12]
   15b74:	2200      	movs	r2, #0
   15b76:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   15b78:	68fb      	ldr	r3, [r7, #12]
   15b7a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   15b7e:	685b      	ldr	r3, [r3, #4]
   15b80:	681c      	ldr	r4, [r3, #0]
   15b82:	68fb      	ldr	r3, [r7, #12]
   15b84:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   15b88:	683b      	ldr	r3, [r7, #0]
   15b8a:	687a      	ldr	r2, [r7, #4]
   15b8c:	68b9      	ldr	r1, [r7, #8]
   15b8e:	47a0      	blx	r4
   15b90:	4603      	mov	r3, r0
   15b92:	617b      	str	r3, [r7, #20]
	return	r;
   15b94:	697b      	ldr	r3, [r7, #20]
}
   15b96:	4618      	mov	r0, r3
   15b98:	371c      	adds	r7, #28
   15b9a:	46bd      	mov	sp, r7
   15b9c:	bd90      	pop	{r4, r7, pc}
	...

00015ba0 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   15ba0:	b580      	push	{r7, lr}
   15ba2:	b082      	sub	sp, #8
   15ba4:	af00      	add	r7, sp, #0
   15ba6:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   15ba8:	687a      	ldr	r2, [r7, #4]
   15baa:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   15bae:	f043 0310 	orr.w	r3, r3, #16
   15bb2:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   15bb6:	687a      	ldr	r2, [r7, #4]
   15bb8:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   15bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15bc0:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   15bc4:	687a      	ldr	r2, [r7, #4]
   15bc6:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   15bca:	f36f 1305 	bfc	r3, #4, #2
   15bce:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   15bd2:	687b      	ldr	r3, [r7, #4]
   15bd4:	2205      	movs	r2, #5
   15bd6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   15bda:	687b      	ldr	r3, [r7, #4]
   15bdc:	2201      	movs	r2, #1
   15bde:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   15be2:	687b      	ldr	r3, [r7, #4]
   15be4:	f203 2212 	addw	r2, r3, #530	; 0x212
   15be8:	687b      	ldr	r3, [r7, #4]
   15bea:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   15bee:	687b      	ldr	r3, [r7, #4]
   15bf0:	685a      	ldr	r2, [r3, #4]
   15bf2:	687b      	ldr	r3, [r7, #4]
   15bf4:	f503 7305 	add.w	r3, r3, #532	; 0x214
   15bf8:	4619      	mov	r1, r3
   15bfa:	4610      	mov	r0, r2
   15bfc:	4b04      	ldr	r3, [pc, #16]	; (15c10 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   15bfe:	4798      	blx	r3
		return status;
   15c00:	687b      	ldr	r3, [r7, #4]
   15c02:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   15c06:	4618      	mov	r0, r3
   15c08:	3708      	adds	r7, #8
   15c0a:	46bd      	mov	sp, r7
   15c0c:	bd80      	pop	{r7, pc}
   15c0e:	bf00      	nop
   15c10:	00006835 	.word	0x00006835

00015c14 <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
uint32_t	N25Q256_Class::GetMemoryCapacity(){
   15c14:	b480      	push	{r7}
   15c16:	b083      	sub	sp, #12
   15c18:	af00      	add	r7, sp, #0
   15c1a:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
   15c1c:	687b      	ldr	r3, [r7, #4]
   15c1e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
   15c22:	4618      	mov	r0, r3
   15c24:	370c      	adds	r7, #12
   15c26:	46bd      	mov	sp, r7
   15c28:	bc80      	pop	{r7}
   15c2a:	4770      	bx	lr

00015c2c <_ZN13N25Q256_Class10WaitOnBusyEv>:
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   15c2c:	b580      	push	{r7, lr}
   15c2e:	b082      	sub	sp, #8
   15c30:	af00      	add	r7, sp, #0
   15c32:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   15c34:	6878      	ldr	r0, [r7, #4]
   15c36:	4b0e      	ldr	r3, [pc, #56]	; (15c70 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   15c38:	4798      	blx	r3
   15c3a:	4603      	mov	r3, r0
   15c3c:	461a      	mov	r2, r3
   15c3e:	687b      	ldr	r3, [r7, #4]
   15c40:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   15c44:	687b      	ldr	r3, [r7, #4]
   15c46:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   15c4a:	f003 0301 	and.w	r3, r3, #1
   15c4e:	2b00      	cmp	r3, #0
   15c50:	d000      	beq.n	15c54 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   15c52:	e7ef      	b.n	15c34 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   15c54:	687b      	ldr	r3, [r7, #4]
   15c56:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   15c5a:	f003 0301 	and.w	r3, r3, #1
   15c5e:	2b00      	cmp	r3, #0
   15c60:	bf0c      	ite	eq
   15c62:	2301      	moveq	r3, #1
   15c64:	2300      	movne	r3, #0
   15c66:	b2db      	uxtb	r3, r3
}
   15c68:	4618      	mov	r0, r3
   15c6a:	3708      	adds	r7, #8
   15c6c:	46bd      	mov	sp, r7
   15c6e:	bd80      	pop	{r7, pc}
   15c70:	00015ba1 	.word	0x00015ba1

00015c74 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   15c74:	b590      	push	{r4, r7, lr}
   15c76:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   15c7a:	b085      	sub	sp, #20
   15c7c:	af00      	add	r7, sp, #0
   15c7e:	f107 0310 	add.w	r3, r7, #16
   15c82:	3b0c      	subs	r3, #12
   15c84:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   15c86:	f107 0310 	add.w	r3, r7, #16
   15c8a:	3b0c      	subs	r3, #12
   15c8c:	681b      	ldr	r3, [r3, #0]
   15c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15c92:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   15c96:	f107 0310 	add.w	r3, r7, #16
   15c9a:	3b0c      	subs	r3, #12
   15c9c:	681b      	ldr	r3, [r3, #0]
   15c9e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   15ca2:	f107 0110 	add.w	r1, r7, #16
   15ca6:	3904      	subs	r1, #4
   15ca8:	f107 0010 	add.w	r0, r7, #16
   15cac:	380c      	subs	r0, #12
   15cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15cb2:	6800      	ldr	r0, [r0, #0]
   15cb4:	4c4b      	ldr	r4, [pc, #300]	; (15de4 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   15cb6:	47a0      	blx	r4
	WaitOnBusy();
   15cb8:	f107 0310 	add.w	r3, r7, #16
   15cbc:	3b0c      	subs	r3, #12
   15cbe:	6818      	ldr	r0, [r3, #0]
   15cc0:	4b49      	ldr	r3, [pc, #292]	; (15de8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   15cc2:	4798      	blx	r3
	Erase(currentAddress);
   15cc4:	f107 0310 	add.w	r3, r7, #16
   15cc8:	3b0c      	subs	r3, #12
   15cca:	681b      	ldr	r3, [r3, #0]
   15ccc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   15cd0:	f107 0310 	add.w	r3, r7, #16
   15cd4:	3b0c      	subs	r3, #12
   15cd6:	4611      	mov	r1, r2
   15cd8:	6818      	ldr	r0, [r3, #0]
   15cda:	4b44      	ldr	r3, [pc, #272]	; (15dec <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   15cdc:	4798      	blx	r3
	WaitOnBusy();
   15cde:	f107 0310 	add.w	r3, r7, #16
   15ce2:	3b0c      	subs	r3, #12
   15ce4:	6818      	ldr	r0, [r3, #0]
   15ce6:	4b40      	ldr	r3, [pc, #256]	; (15de8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   15ce8:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   15cea:	f107 0310 	add.w	r3, r7, #16
   15cee:	3b0c      	subs	r3, #12
   15cf0:	681b      	ldr	r3, [r3, #0]
   15cf2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   15cf6:	f107 0110 	add.w	r1, r7, #16
   15cfa:	3904      	subs	r1, #4
   15cfc:	f107 0010 	add.w	r0, r7, #16
   15d00:	380c      	subs	r0, #12
   15d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15d06:	6800      	ldr	r0, [r0, #0]
   15d08:	4c39      	ldr	r4, [pc, #228]	; (15df0 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   15d0a:	47a0      	blx	r4
	WaitOnBusy();
   15d0c:	f107 0310 	add.w	r3, r7, #16
   15d10:	3b0c      	subs	r3, #12
   15d12:	6818      	ldr	r0, [r3, #0]
   15d14:	4b34      	ldr	r3, [pc, #208]	; (15de8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   15d16:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   15d18:	f107 0310 	add.w	r3, r7, #16
   15d1c:	3b0c      	subs	r3, #12
   15d1e:	681b      	ldr	r3, [r3, #0]
   15d20:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   15d24:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   15d28:	f101 0110 	add.w	r1, r1, #16
   15d2c:	3904      	subs	r1, #4
   15d2e:	f107 0010 	add.w	r0, r7, #16
   15d32:	380c      	subs	r0, #12
   15d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15d38:	6800      	ldr	r0, [r0, #0]
   15d3a:	4c2a      	ldr	r4, [pc, #168]	; (15de4 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   15d3c:	47a0      	blx	r4
	WaitOnBusy();
   15d3e:	f107 0310 	add.w	r3, r7, #16
   15d42:	3b0c      	subs	r3, #12
   15d44:	6818      	ldr	r0, [r3, #0]
   15d46:	4b28      	ldr	r3, [pc, #160]	; (15de8 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   15d48:	4798      	blx	r3
	isOK	 = true;
   15d4a:	f107 0310 	add.w	r3, r7, #16
   15d4e:	3b0c      	subs	r3, #12
   15d50:	681b      	ldr	r3, [r3, #0]
   15d52:	2201      	movs	r2, #1
   15d54:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   15d58:	2300      	movs	r3, #0
   15d5a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   15d5e:	f102 020c 	add.w	r2, r2, #12
   15d62:	6013      	str	r3, [r2, #0]
   15d64:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   15d68:	f103 030c 	add.w	r3, r3, #12
   15d6c:	681b      	ldr	r3, [r3, #0]
   15d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   15d72:	da2b      	bge.n	15dcc <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   15d74:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   15d78:	f103 0310 	add.w	r3, r3, #16
   15d7c:	3b04      	subs	r3, #4
   15d7e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   15d82:	f102 020c 	add.w	r2, r2, #12
   15d86:	6812      	ldr	r2, [r2, #0]
   15d88:	4413      	add	r3, r2
   15d8a:	781a      	ldrb	r2, [r3, #0]
   15d8c:	f107 0310 	add.w	r3, r7, #16
   15d90:	3b04      	subs	r3, #4
   15d92:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   15d96:	f101 010c 	add.w	r1, r1, #12
   15d9a:	6809      	ldr	r1, [r1, #0]
   15d9c:	440b      	add	r3, r1
   15d9e:	781b      	ldrb	r3, [r3, #0]
   15da0:	429a      	cmp	r2, r3
   15da2:	d007      	beq.n	15db4 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   15da4:	f107 0310 	add.w	r3, r7, #16
   15da8:	3b0c      	subs	r3, #12
   15daa:	681b      	ldr	r3, [r3, #0]
   15dac:	2200      	movs	r2, #0
   15dae:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   15db2:	e00b      	b.n	15dcc <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   15db4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   15db8:	f103 030c 	add.w	r3, r3, #12
   15dbc:	681b      	ldr	r3, [r3, #0]
   15dbe:	3301      	adds	r3, #1
   15dc0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   15dc4:	f102 020c 	add.w	r2, r2, #12
   15dc8:	6013      	str	r3, [r2, #0]
   15dca:	e7cb      	b.n	15d64 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   15dcc:	f107 0310 	add.w	r3, r7, #16
   15dd0:	3b0c      	subs	r3, #12
   15dd2:	681b      	ldr	r3, [r3, #0]
   15dd4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   15dd8:	4618      	mov	r0, r3
   15dda:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   15dde:	3714      	adds	r7, #20
   15de0:	46bd      	mov	sp, r7
   15de2:	bd90      	pop	{r4, r7, pc}
   15de4:	00015b65 	.word	0x00015b65
   15de8:	00015c2d 	.word	0x00015c2d
   15dec:	00015b01 	.word	0x00015b01
   15df0:	00015b31 	.word	0x00015b31

00015df4 <_Z41__static_initialization_and_destruction_0ii>:
   15df4:	b580      	push	{r7, lr}
   15df6:	b082      	sub	sp, #8
   15df8:	af00      	add	r7, sp, #0
   15dfa:	6078      	str	r0, [r7, #4]
   15dfc:	6039      	str	r1, [r7, #0]
   15dfe:	687b      	ldr	r3, [r7, #4]
   15e00:	2b01      	cmp	r3, #1
   15e02:	d10d      	bne.n	15e20 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   15e04:	683b      	ldr	r3, [r7, #0]
   15e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15e0a:	4293      	cmp	r3, r2
   15e0c:	d108      	bne.n	15e20 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   15e0e:	4906      	ldr	r1, [pc, #24]	; (15e28 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   15e10:	4806      	ldr	r0, [pc, #24]	; (15e2c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   15e12:	4b07      	ldr	r3, [pc, #28]	; (15e30 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   15e14:	4798      	blx	r3
   15e16:	4a07      	ldr	r2, [pc, #28]	; (15e34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   15e18:	4907      	ldr	r1, [pc, #28]	; (15e38 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15e1a:	4804      	ldr	r0, [pc, #16]	; (15e2c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   15e1c:	4b07      	ldr	r3, [pc, #28]	; (15e3c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   15e1e:	4798      	blx	r3
   15e20:	bf00      	nop
   15e22:	3708      	adds	r7, #8
   15e24:	46bd      	mov	sp, r7
   15e26:	bd80      	pop	{r7, pc}
   15e28:	2000a1c0 	.word	0x2000a1c0
   15e2c:	200099dc 	.word	0x200099dc
   15e30:	00015a59 	.word	0x00015a59
   15e34:	20000000 	.word	0x20000000
   15e38:	00015a81 	.word	0x00015a81
   15e3c:	000187f1 	.word	0x000187f1

00015e40 <_GLOBAL__sub_I_ptrN25Q256Class>:
   15e40:	b580      	push	{r7, lr}
   15e42:	af00      	add	r7, sp, #0
   15e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15e48:	2001      	movs	r0, #1
   15e4a:	4b01      	ldr	r3, [pc, #4]	; (15e50 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   15e4c:	4798      	blx	r3
   15e4e:	bd80      	pop	{r7, pc}
   15e50:	00015df5 	.word	0x00015df5

00015e54 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   15e54:	b580      	push	{r7, lr}
   15e56:	b082      	sub	sp, #8
   15e58:	af00      	add	r7, sp, #0
   15e5a:	6078      	str	r0, [r7, #4]
   15e5c:	687b      	ldr	r3, [r7, #4]
   15e5e:	4618      	mov	r0, r3
   15e60:	4b06      	ldr	r3, [pc, #24]	; (15e7c <_ZN14Calendar_ClassC1Ev+0x28>)
   15e62:	4798      	blx	r3
   15e64:	4a06      	ldr	r2, [pc, #24]	; (15e80 <_ZN14Calendar_ClassC1Ev+0x2c>)
   15e66:	687b      	ldr	r3, [r7, #4]
   15e68:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   15e6a:	4a06      	ldr	r2, [pc, #24]	; (15e84 <_ZN14Calendar_ClassC1Ev+0x30>)
   15e6c:	687b      	ldr	r3, [r7, #4]
   15e6e:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   15e70:	687b      	ldr	r3, [r7, #4]
   15e72:	4618      	mov	r0, r3
   15e74:	3708      	adds	r7, #8
   15e76:	46bd      	mov	sp, r7
   15e78:	bd80      	pop	{r7, pc}
   15e7a:	bf00      	nop
   15e7c:	000165a1 	.word	0x000165a1
   15e80:	00020acc 	.word	0x00020acc
   15e84:	20009c10 	.word	0x20009c10

00015e88 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   15e88:	b580      	push	{r7, lr}
   15e8a:	b082      	sub	sp, #8
   15e8c:	af00      	add	r7, sp, #0
   15e8e:	6078      	str	r0, [r7, #4]
   15e90:	6039      	str	r1, [r7, #0]
   15e92:	687b      	ldr	r3, [r7, #4]
   15e94:	4618      	mov	r0, r3
   15e96:	4b08      	ldr	r3, [pc, #32]	; (15eb8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   15e98:	4798      	blx	r3
   15e9a:	4a08      	ldr	r2, [pc, #32]	; (15ebc <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   15e9c:	687b      	ldr	r3, [r7, #4]
   15e9e:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   15ea0:	687b      	ldr	r3, [r7, #4]
   15ea2:	683a      	ldr	r2, [r7, #0]
   15ea4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   15ea8:	4a05      	ldr	r2, [pc, #20]	; (15ec0 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   15eaa:	687b      	ldr	r3, [r7, #4]
   15eac:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   15eae:	687b      	ldr	r3, [r7, #4]
   15eb0:	4618      	mov	r0, r3
   15eb2:	3708      	adds	r7, #8
   15eb4:	46bd      	mov	sp, r7
   15eb6:	bd80      	pop	{r7, pc}
   15eb8:	000165a1 	.word	0x000165a1
   15ebc:	00020acc 	.word	0x00020acc
   15ec0:	20009c10 	.word	0x20009c10

00015ec4 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   15ec4:	b580      	push	{r7, lr}
   15ec6:	b082      	sub	sp, #8
   15ec8:	af00      	add	r7, sp, #0
   15eca:	6078      	str	r0, [r7, #4]
   15ecc:	4a05      	ldr	r2, [pc, #20]	; (15ee4 <_ZN14Calendar_ClassD1Ev+0x20>)
   15ece:	687b      	ldr	r3, [r7, #4]
   15ed0:	601a      	str	r2, [r3, #0]
   15ed2:	687b      	ldr	r3, [r7, #4]
   15ed4:	4618      	mov	r0, r3
   15ed6:	4b04      	ldr	r3, [pc, #16]	; (15ee8 <_ZN14Calendar_ClassD1Ev+0x24>)
   15ed8:	4798      	blx	r3
{
} //~Calendar_Class
   15eda:	687b      	ldr	r3, [r7, #4]
   15edc:	4618      	mov	r0, r3
   15ede:	3708      	adds	r7, #8
   15ee0:	46bd      	mov	sp, r7
   15ee2:	bd80      	pop	{r7, pc}
   15ee4:	00020acc 	.word	0x00020acc
   15ee8:	000165c1 	.word	0x000165c1

00015eec <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
   15eec:	b580      	push	{r7, lr}
   15eee:	b082      	sub	sp, #8
   15ef0:	af00      	add	r7, sp, #0
   15ef2:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
   15ef4:	687b      	ldr	r3, [r7, #4]
   15ef6:	4a50      	ldr	r2, [pc, #320]	; (16038 <_ZN14Calendar_Class4InitEv+0x14c>)
   15ef8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
   15efc:	687b      	ldr	r3, [r7, #4]
   15efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15f02:	4618      	mov	r0, r3
   15f04:	4b4d      	ldr	r3, [pc, #308]	; (1603c <_ZN14Calendar_Class4InitEv+0x150>)
   15f06:	4798      	blx	r3
	
	InitMaxDate();
   15f08:	6878      	ldr	r0, [r7, #4]
   15f0a:	4b4d      	ldr	r3, [pc, #308]	; (16040 <_ZN14Calendar_Class4InitEv+0x154>)
   15f0c:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
   15f0e:	687b      	ldr	r3, [r7, #4]
   15f10:	4618      	mov	r0, r3
   15f12:	4b4c      	ldr	r3, [pc, #304]	; (16044 <_ZN14Calendar_Class4InitEv+0x158>)
   15f14:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   15f16:	687b      	ldr	r3, [r7, #4]
   15f18:	681b      	ldr	r3, [r3, #0]
   15f1a:	3304      	adds	r3, #4
   15f1c:	681b      	ldr	r3, [r3, #0]
   15f1e:	687a      	ldr	r2, [r7, #4]
   15f20:	3260      	adds	r2, #96	; 0x60
   15f22:	4611      	mov	r1, r2
   15f24:	6878      	ldr	r0, [r7, #4]
   15f26:	4798      	blx	r3
   15f28:	4602      	mov	r2, r0
   15f2a:	687b      	ldr	r3, [r7, #4]
   15f2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   15f30:	687b      	ldr	r3, [r7, #4]
   15f32:	681b      	ldr	r3, [r3, #0]
   15f34:	3304      	adds	r3, #4
   15f36:	681b      	ldr	r3, [r3, #0]
   15f38:	687a      	ldr	r2, [r7, #4]
   15f3a:	326c      	adds	r2, #108	; 0x6c
   15f3c:	4611      	mov	r1, r2
   15f3e:	6878      	ldr	r0, [r7, #4]
   15f40:	4798      	blx	r3
   15f42:	4602      	mov	r2, r0
   15f44:	687b      	ldr	r3, [r7, #4]
   15f46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   15f4a:	687b      	ldr	r3, [r7, #4]
   15f4c:	681b      	ldr	r3, [r3, #0]
   15f4e:	3304      	adds	r3, #4
   15f50:	681b      	ldr	r3, [r3, #0]
   15f52:	687a      	ldr	r2, [r7, #4]
   15f54:	327c      	adds	r2, #124	; 0x7c
   15f56:	4611      	mov	r1, r2
   15f58:	6878      	ldr	r0, [r7, #4]
   15f5a:	4798      	blx	r3
   15f5c:	4602      	mov	r2, r0
   15f5e:	687b      	ldr	r3, [r7, #4]
   15f60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   15f64:	687b      	ldr	r3, [r7, #4]
   15f66:	681b      	ldr	r3, [r3, #0]
   15f68:	3304      	adds	r3, #4
   15f6a:	681b      	ldr	r3, [r3, #0]
   15f6c:	687a      	ldr	r2, [r7, #4]
   15f6e:	3284      	adds	r2, #132	; 0x84
   15f70:	4611      	mov	r1, r2
   15f72:	6878      	ldr	r0, [r7, #4]
   15f74:	4798      	blx	r3
   15f76:	4602      	mov	r2, r0
   15f78:	687b      	ldr	r3, [r7, #4]
   15f7a:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   15f7c:	6878      	ldr	r0, [r7, #4]
   15f7e:	4b32      	ldr	r3, [pc, #200]	; (16048 <_ZN14Calendar_Class4InitEv+0x15c>)
   15f80:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   15f82:	687b      	ldr	r3, [r7, #4]
   15f84:	681b      	ldr	r3, [r3, #0]
   15f86:	3304      	adds	r3, #4
   15f88:	681b      	ldr	r3, [r3, #0]
   15f8a:	687a      	ldr	r2, [r7, #4]
   15f8c:	3274      	adds	r2, #116	; 0x74
   15f8e:	4611      	mov	r1, r2
   15f90:	6878      	ldr	r0, [r7, #4]
   15f92:	4798      	blx	r3
   15f94:	4602      	mov	r2, r0
   15f96:	687b      	ldr	r3, [r7, #4]
   15f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   15f9c:	687b      	ldr	r3, [r7, #4]
   15f9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   15fa2:	687b      	ldr	r3, [r7, #4]
   15fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   15fa8:	429a      	cmp	r2, r3
   15faa:	d80e      	bhi.n	15fca <_ZN14Calendar_Class4InitEv+0xde>
   15fac:	687b      	ldr	r3, [r7, #4]
   15fae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   15fb2:	687b      	ldr	r3, [r7, #4]
   15fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   15fb8:	429a      	cmp	r2, r3
   15fba:	d006      	beq.n	15fca <_ZN14Calendar_Class4InitEv+0xde>
   15fbc:	687b      	ldr	r3, [r7, #4]
   15fbe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   15fc2:	687b      	ldr	r3, [r7, #4]
   15fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   15fc6:	429a      	cmp	r2, r3
   15fc8:	d106      	bne.n	15fd8 <_ZN14Calendar_Class4InitEv+0xec>
	{
		SetDateTime(&compilationDateTime);
   15fca:	687b      	ldr	r3, [r7, #4]
   15fcc:	3374      	adds	r3, #116	; 0x74
   15fce:	4619      	mov	r1, r3
   15fd0:	6878      	ldr	r0, [r7, #4]
   15fd2:	4b1e      	ldr	r3, [pc, #120]	; (1604c <_ZN14Calendar_Class4InitEv+0x160>)
   15fd4:	4798      	blx	r3
   15fd6:	e022      	b.n	1601e <_ZN14Calendar_Class4InitEv+0x132>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
   15fd8:	687b      	ldr	r3, [r7, #4]
   15fda:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   15fde:	687b      	ldr	r3, [r7, #4]
   15fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   15fe4:	429a      	cmp	r2, r3
   15fe6:	d206      	bcs.n	15ff6 <_ZN14Calendar_Class4InitEv+0x10a>
		{
			SetDateTime(&compilationDateTime);
   15fe8:	687b      	ldr	r3, [r7, #4]
   15fea:	3374      	adds	r3, #116	; 0x74
   15fec:	4619      	mov	r1, r3
   15fee:	6878      	ldr	r0, [r7, #4]
   15ff0:	4b16      	ldr	r3, [pc, #88]	; (1604c <_ZN14Calendar_Class4InitEv+0x160>)
   15ff2:	4798      	blx	r3
   15ff4:	e013      	b.n	1601e <_ZN14Calendar_Class4InitEv+0x132>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   15ff6:	687b      	ldr	r3, [r7, #4]
   15ff8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   15ffc:	687b      	ldr	r3, [r7, #4]
   15ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   16000:	429a      	cmp	r2, r3
   16002:	d106      	bne.n	16012 <_ZN14Calendar_Class4InitEv+0x126>
			{
				SetDateTime(&compilationDateTime);
   16004:	687b      	ldr	r3, [r7, #4]
   16006:	3374      	adds	r3, #116	; 0x74
   16008:	4619      	mov	r1, r3
   1600a:	6878      	ldr	r0, [r7, #4]
   1600c:	4b0f      	ldr	r3, [pc, #60]	; (1604c <_ZN14Calendar_Class4InitEv+0x160>)
   1600e:	4798      	blx	r3
   16010:	e005      	b.n	1601e <_ZN14Calendar_Class4InitEv+0x132>
			} 
			else
			{
				SetDateTime(&lastDateTime);
   16012:	687b      	ldr	r3, [r7, #4]
   16014:	3360      	adds	r3, #96	; 0x60
   16016:	4619      	mov	r1, r3
   16018:	6878      	ldr	r0, [r7, #4]
   1601a:	4b0c      	ldr	r3, [pc, #48]	; (1604c <_ZN14Calendar_Class4InitEv+0x160>)
   1601c:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
   1601e:	687b      	ldr	r3, [r7, #4]
   16020:	2200      	movs	r2, #0
   16022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
   16026:	687b      	ldr	r3, [r7, #4]
   16028:	4618      	mov	r0, r3
   1602a:	4b09      	ldr	r3, [pc, #36]	; (16050 <_ZN14Calendar_Class4InitEv+0x164>)
   1602c:	4798      	blx	r3
	
}
   1602e:	bf00      	nop
   16030:	3708      	adds	r7, #8
   16032:	46bd      	mov	sp, r7
   16034:	bd80      	pop	{r7, pc}
   16036:	bf00      	nop
   16038:	2000995c 	.word	0x2000995c
   1603c:	00005c79 	.word	0x00005c79
   16040:	00016055 	.word	0x00016055
   16044:	00016875 	.word	0x00016875
   16048:	000160fb 	.word	0x000160fb
   1604c:	000162f1 	.word	0x000162f1
   16050:	00016805 	.word	0x00016805

00016054 <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
   16054:	b480      	push	{r7}
   16056:	b083      	sub	sp, #12
   16058:	af00      	add	r7, sp, #0
   1605a:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   1605c:	687b      	ldr	r3, [r7, #4]
   1605e:	f640 0202 	movw	r2, #2050	; 0x802
   16062:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   16066:	687b      	ldr	r3, [r7, #4]
   16068:	220c      	movs	r2, #12
   1606a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   1606e:	687b      	ldr	r3, [r7, #4]
   16070:	221f      	movs	r2, #31
   16072:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   16076:	687b      	ldr	r3, [r7, #4]
   16078:	220c      	movs	r2, #12
   1607a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   1607e:	687b      	ldr	r3, [r7, #4]
   16080:	223b      	movs	r2, #59	; 0x3b
   16082:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   16086:	687b      	ldr	r3, [r7, #4]
   16088:	223b      	movs	r2, #59	; 0x3b
   1608a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   1608e:	687b      	ldr	r3, [r7, #4]
   16090:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16094:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   16098:	687b      	ldr	r3, [r7, #4]
   1609a:	22ff      	movs	r2, #255	; 0xff
   1609c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   160a0:	687b      	ldr	r3, [r7, #4]
   160a2:	22ff      	movs	r2, #255	; 0xff
   160a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   160a8:	687b      	ldr	r3, [r7, #4]
   160aa:	22ff      	movs	r2, #255	; 0xff
   160ac:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   160b0:	687b      	ldr	r3, [r7, #4]
   160b2:	22ff      	movs	r2, #255	; 0xff
   160b4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   160b8:	687b      	ldr	r3, [r7, #4]
   160ba:	22ff      	movs	r2, #255	; 0xff
   160bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   160c0:	687b      	ldr	r3, [r7, #4]
   160c2:	2200      	movs	r2, #0
   160c4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   160c8:	687b      	ldr	r3, [r7, #4]
   160ca:	2200      	movs	r2, #0
   160cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   160d0:	687b      	ldr	r3, [r7, #4]
   160d2:	2200      	movs	r2, #0
   160d4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   160d8:	687b      	ldr	r3, [r7, #4]
   160da:	2200      	movs	r2, #0
   160dc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   160e0:	687b      	ldr	r3, [r7, #4]
   160e2:	2200      	movs	r2, #0
   160e4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   160e8:	687b      	ldr	r3, [r7, #4]
   160ea:	2200      	movs	r2, #0
   160ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   160f0:	bf00      	nop
   160f2:	370c      	adds	r7, #12
   160f4:	46bd      	mov	sp, r7
   160f6:	bc80      	pop	{r7}
   160f8:	4770      	bx	lr

000160fa <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   160fa:	b480      	push	{r7}
   160fc:	b083      	sub	sp, #12
   160fe:	af00      	add	r7, sp, #0
   16100:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   16102:	2332      	movs	r3, #50	; 0x32
   16104:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16108:	4613      	mov	r3, r2
   1610a:	009b      	lsls	r3, r3, #2
   1610c:	4413      	add	r3, r2
   1610e:	005b      	lsls	r3, r3, #1
   16110:	461a      	mov	r2, r3
   16112:	2330      	movs	r3, #48	; 0x30
   16114:	3b30      	subs	r3, #48	; 0x30
   16116:	441a      	add	r2, r3
   16118:	4613      	mov	r3, r2
   1611a:	009b      	lsls	r3, r3, #2
   1611c:	4413      	add	r3, r2
   1611e:	005b      	lsls	r3, r3, #1
   16120:	461a      	mov	r2, r3
   16122:	2332      	movs	r3, #50	; 0x32
   16124:	3b30      	subs	r3, #48	; 0x30
   16126:	4413      	add	r3, r2
   16128:	b29b      	uxth	r3, r3
   1612a:	461a      	mov	r2, r3
   1612c:	0092      	lsls	r2, r2, #2
   1612e:	4413      	add	r3, r2
   16130:	005b      	lsls	r3, r3, #1
   16132:	b29a      	uxth	r2, r3
   16134:	2330      	movs	r3, #48	; 0x30
   16136:	b29b      	uxth	r3, r3
   16138:	4413      	add	r3, r2
   1613a:	b29b      	uxth	r3, r3
   1613c:	3b30      	subs	r3, #48	; 0x30
   1613e:	b29a      	uxth	r2, r3
   16140:	687b      	ldr	r3, [r7, #4]
   16142:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   16146:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16148:	2b6e      	cmp	r3, #110	; 0x6e
   1614a:	d106      	bne.n	1615a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   1614c:	2363      	movs	r3, #99	; 0x63
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1614e:	2b61      	cmp	r3, #97	; 0x61
   16150:	d101      	bne.n	16156 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   16152:	2301      	movs	r3, #1
   16154:	e02f      	b.n	161b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16156:	2306      	movs	r3, #6
   16158:	e02d      	b.n	161b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   1615a:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1615c:	2b62      	cmp	r3, #98	; 0x62
   1615e:	d029      	beq.n	161b4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   16160:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16162:	2b72      	cmp	r3, #114	; 0x72
   16164:	d106      	bne.n	16174 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   16166:	234f      	movs	r3, #79	; 0x4f
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16168:	2b4d      	cmp	r3, #77	; 0x4d
   1616a:	d101      	bne.n	16170 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   1616c:	2303      	movs	r3, #3
   1616e:	e022      	b.n	161b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16170:	2304      	movs	r3, #4
   16172:	e020      	b.n	161b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   16174:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16176:	2b79      	cmp	r3, #121	; 0x79
   16178:	d01a      	beq.n	161b0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   1617a:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1617c:	2b6c      	cmp	r3, #108	; 0x6c
   1617e:	d015      	beq.n	161ac <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   16180:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16182:	2b67      	cmp	r3, #103	; 0x67
   16184:	d010      	beq.n	161a8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   16186:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16188:	2b70      	cmp	r3, #112	; 0x70
   1618a:	d00b      	beq.n	161a4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   1618c:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1618e:	2b74      	cmp	r3, #116	; 0x74
   16190:	d006      	beq.n	161a0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   16192:	2374      	movs	r3, #116	; 0x74
   16194:	2b76      	cmp	r3, #118	; 0x76
   16196:	d101      	bne.n	1619c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   16198:	230b      	movs	r3, #11
   1619a:	e00c      	b.n	161b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1619c:	230c      	movs	r3, #12
   1619e:	e00a      	b.n	161b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   161a0:	230a      	movs	r3, #10
   161a2:	e008      	b.n	161b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   161a4:	2309      	movs	r3, #9
   161a6:	e006      	b.n	161b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   161a8:	2308      	movs	r3, #8
   161aa:	e004      	b.n	161b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   161ac:	2307      	movs	r3, #7
   161ae:	e002      	b.n	161b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   161b0:	2305      	movs	r3, #5
   161b2:	e000      	b.n	161b6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   161b4:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   161b6:	687a      	ldr	r2, [r7, #4]
   161b8:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   161bc:	2320      	movs	r3, #32
   161be:	2b20      	cmp	r3, #32
   161c0:	d008      	beq.n	161d4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   161c2:	2320      	movs	r3, #32
   161c4:	3b30      	subs	r3, #48	; 0x30
   161c6:	b2db      	uxtb	r3, r3
   161c8:	461a      	mov	r2, r3
   161ca:	0092      	lsls	r2, r2, #2
   161cc:	4413      	add	r3, r2
   161ce:	005b      	lsls	r3, r3, #1
   161d0:	b2db      	uxtb	r3, r3
   161d2:	e000      	b.n	161d6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   161d4:	2300      	movs	r3, #0
   161d6:	2239      	movs	r2, #57	; 0x39
   161d8:	4413      	add	r3, r2
   161da:	b2db      	uxtb	r3, r3
   161dc:	3b30      	subs	r3, #48	; 0x30
   161de:	b2da      	uxtb	r2, r3
   161e0:	687b      	ldr	r3, [r7, #4]
   161e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   161e6:	2331      	movs	r3, #49	; 0x31
   161e8:	3b30      	subs	r3, #48	; 0x30
   161ea:	b2db      	uxtb	r3, r3
   161ec:	461a      	mov	r2, r3
   161ee:	0092      	lsls	r2, r2, #2
   161f0:	4413      	add	r3, r2
   161f2:	005b      	lsls	r3, r3, #1
   161f4:	b2db      	uxtb	r3, r3
   161f6:	2237      	movs	r2, #55	; 0x37
   161f8:	4413      	add	r3, r2
   161fa:	b2db      	uxtb	r3, r3
   161fc:	3b30      	subs	r3, #48	; 0x30
   161fe:	b2da      	uxtb	r2, r3
   16200:	687b      	ldr	r3, [r7, #4]
   16202:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   16206:	2333      	movs	r3, #51	; 0x33
   16208:	3b30      	subs	r3, #48	; 0x30
   1620a:	b2db      	uxtb	r3, r3
   1620c:	461a      	mov	r2, r3
   1620e:	0092      	lsls	r2, r2, #2
   16210:	4413      	add	r3, r2
   16212:	005b      	lsls	r3, r3, #1
   16214:	b2db      	uxtb	r3, r3
   16216:	2233      	movs	r2, #51	; 0x33
   16218:	4413      	add	r3, r2
   1621a:	b2db      	uxtb	r3, r3
   1621c:	3b30      	subs	r3, #48	; 0x30
   1621e:	b2da      	uxtb	r2, r3
   16220:	687b      	ldr	r3, [r7, #4]
   16222:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   16226:	2331      	movs	r3, #49	; 0x31
   16228:	3b30      	subs	r3, #48	; 0x30
   1622a:	b2db      	uxtb	r3, r3
   1622c:	461a      	mov	r2, r3
   1622e:	0092      	lsls	r2, r2, #2
   16230:	4413      	add	r3, r2
   16232:	005b      	lsls	r3, r3, #1
   16234:	b2db      	uxtb	r3, r3
   16236:	2232      	movs	r2, #50	; 0x32
   16238:	4413      	add	r3, r2
   1623a:	b2db      	uxtb	r3, r3
   1623c:	3b30      	subs	r3, #48	; 0x30
   1623e:	b2da      	uxtb	r2, r3
   16240:	687b      	ldr	r3, [r7, #4]
   16242:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
   16246:	bf00      	nop
   16248:	370c      	adds	r7, #12
   1624a:	46bd      	mov	sp, r7
   1624c:	bc80      	pop	{r7}
   1624e:	4770      	bx	lr

00016250 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   16250:	b580      	push	{r7, lr}
   16252:	b082      	sub	sp, #8
   16254:	af00      	add	r7, sp, #0
   16256:	6078      	str	r0, [r7, #4]
   16258:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   1625a:	687b      	ldr	r3, [r7, #4]
   1625c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16260:	6839      	ldr	r1, [r7, #0]
   16262:	4618      	mov	r0, r3
   16264:	4b03      	ldr	r3, [pc, #12]	; (16274 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   16266:	4798      	blx	r3
   16268:	4603      	mov	r3, r0
}
   1626a:	4618      	mov	r0, r3
   1626c:	3708      	adds	r7, #8
   1626e:	46bd      	mov	sp, r7
   16270:	bd80      	pop	{r7, pc}
   16272:	bf00      	nop
   16274:	00005dc9 	.word	0x00005dc9

00016278 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   16278:	b480      	push	{r7}
   1627a:	b083      	sub	sp, #12
   1627c:	af00      	add	r7, sp, #0
   1627e:	6078      	str	r0, [r7, #4]
   16280:	460b      	mov	r3, r1
   16282:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   16284:	887b      	ldrh	r3, [r7, #2]
   16286:	f003 0303 	and.w	r3, r3, #3
   1628a:	2b00      	cmp	r3, #0
   1628c:	d001      	beq.n	16292 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   1628e:	2300      	movs	r3, #0
   16290:	e000      	b.n	16294 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   16292:	2301      	movs	r3, #1
	}
}
   16294:	4618      	mov	r0, r3
   16296:	370c      	adds	r7, #12
   16298:	46bd      	mov	sp, r7
   1629a:	bc80      	pop	{r7}
   1629c:	4770      	bx	lr
	...

000162a0 <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   162a0:	b580      	push	{r7, lr}
   162a2:	b082      	sub	sp, #8
   162a4:	af00      	add	r7, sp, #0
   162a6:	6078      	str	r0, [r7, #4]
   162a8:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   162aa:	687b      	ldr	r3, [r7, #4]
   162ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   162b0:	6839      	ldr	r1, [r7, #0]
   162b2:	4618      	mov	r0, r3
   162b4:	4b03      	ldr	r3, [pc, #12]	; (162c4 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   162b6:	4798      	blx	r3
   162b8:	4603      	mov	r3, r0
}
   162ba:	4618      	mov	r0, r3
   162bc:	3708      	adds	r7, #8
   162be:	46bd      	mov	sp, r7
   162c0:	bd80      	pop	{r7, pc}
   162c2:	bf00      	nop
   162c4:	00005cb9 	.word	0x00005cb9

000162c8 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   162c8:	b580      	push	{r7, lr}
   162ca:	b082      	sub	sp, #8
   162cc:	af00      	add	r7, sp, #0
   162ce:	6078      	str	r0, [r7, #4]
   162d0:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   162d2:	687b      	ldr	r3, [r7, #4]
   162d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   162d8:	6839      	ldr	r1, [r7, #0]
   162da:	4618      	mov	r0, r3
   162dc:	4b03      	ldr	r3, [pc, #12]	; (162ec <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   162de:	4798      	blx	r3
   162e0:	4603      	mov	r3, r0
}
   162e2:	4618      	mov	r0, r3
   162e4:	3708      	adds	r7, #8
   162e6:	46bd      	mov	sp, r7
   162e8:	bd80      	pop	{r7, pc}
   162ea:	bf00      	nop
   162ec:	00005d41 	.word	0x00005d41

000162f0 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   162f0:	b580      	push	{r7, lr}
   162f2:	b084      	sub	sp, #16
   162f4:	af00      	add	r7, sp, #0
   162f6:	6078      	str	r0, [r7, #4]
   162f8:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   162fa:	683a      	ldr	r2, [r7, #0]
   162fc:	f107 030c 	add.w	r3, r7, #12
   16300:	3204      	adds	r2, #4
   16302:	6810      	ldr	r0, [r2, #0]
   16304:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   16306:	f107 030c 	add.w	r3, r7, #12
   1630a:	4619      	mov	r1, r3
   1630c:	6878      	ldr	r0, [r7, #4]
   1630e:	4b0a      	ldr	r3, [pc, #40]	; (16338 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   16310:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   16312:	683a      	ldr	r2, [r7, #0]
   16314:	f107 0308 	add.w	r3, r7, #8
   16318:	8811      	ldrh	r1, [r2, #0]
   1631a:	7892      	ldrb	r2, [r2, #2]
   1631c:	8019      	strh	r1, [r3, #0]
   1631e:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   16320:	f107 0308 	add.w	r3, r7, #8
   16324:	4619      	mov	r1, r3
   16326:	6878      	ldr	r0, [r7, #4]
   16328:	4b04      	ldr	r3, [pc, #16]	; (1633c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   1632a:	4798      	blx	r3
   1632c:	4603      	mov	r3, r0
			
}
   1632e:	4618      	mov	r0, r3
   16330:	3710      	adds	r7, #16
   16332:	46bd      	mov	sp, r7
   16334:	bd80      	pop	{r7, pc}
   16336:	bf00      	nop
   16338:	000162c9 	.word	0x000162c9
   1633c:	000162a1 	.word	0x000162a1

00016340 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   16340:	b580      	push	{r7, lr}
   16342:	b086      	sub	sp, #24
   16344:	af00      	add	r7, sp, #0
   16346:	6078      	str	r0, [r7, #4]
   16348:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   1634a:	2300      	movs	r3, #0
   1634c:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   1634e:	2300      	movs	r3, #0
   16350:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   16352:	683b      	ldr	r3, [r7, #0]
   16354:	88db      	ldrh	r3, [r3, #6]
   16356:	b2da      	uxtb	r2, r3
   16358:	687b      	ldr	r3, [r7, #4]
   1635a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1635e:	699b      	ldr	r3, [r3, #24]
   16360:	b2db      	uxtb	r3, r3
   16362:	1ad3      	subs	r3, r2, r3
   16364:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   16366:	683b      	ldr	r3, [r7, #0]
   16368:	795b      	ldrb	r3, [r3, #5]
   1636a:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   1636c:	683b      	ldr	r3, [r7, #0]
   1636e:	791b      	ldrb	r3, [r3, #4]
   16370:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   16372:	683b      	ldr	r3, [r7, #0]
   16374:	789b      	ldrb	r3, [r3, #2]
   16376:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   16378:	683b      	ldr	r3, [r7, #0]
   1637a:	785b      	ldrb	r3, [r3, #1]
   1637c:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   1637e:	683b      	ldr	r3, [r7, #0]
   16380:	781b      	ldrb	r3, [r3, #0]
   16382:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   16384:	2300      	movs	r3, #0
   16386:	613b      	str	r3, [r7, #16]
   16388:	7bfa      	ldrb	r2, [r7, #15]
   1638a:	693b      	ldr	r3, [r7, #16]
   1638c:	429a      	cmp	r2, r3
   1638e:	d91e      	bls.n	163ce <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   16390:	687b      	ldr	r3, [r7, #4]
   16392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16396:	699b      	ldr	r3, [r3, #24]
   16398:	b29a      	uxth	r2, r3
   1639a:	693b      	ldr	r3, [r7, #16]
   1639c:	b29b      	uxth	r3, r3
   1639e:	4413      	add	r3, r2
   163a0:	b29b      	uxth	r3, r3
   163a2:	4619      	mov	r1, r3
   163a4:	6878      	ldr	r0, [r7, #4]
   163a6:	4b27      	ldr	r3, [pc, #156]	; (16444 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   163a8:	4798      	blx	r3
   163aa:	4603      	mov	r3, r0
   163ac:	2b00      	cmp	r3, #0
   163ae:	d006      	beq.n	163be <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   163b0:	697b      	ldr	r3, [r7, #20]
   163b2:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   163b6:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   163ba:	617b      	str	r3, [r7, #20]
   163bc:	e003      	b.n	163c6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   163be:	697a      	ldr	r2, [r7, #20]
   163c0:	4b21      	ldr	r3, [pc, #132]	; (16448 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   163c2:	4413      	add	r3, r2
   163c4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   163c6:	693b      	ldr	r3, [r7, #16]
   163c8:	3301      	adds	r3, #1
   163ca:	613b      	str	r3, [r7, #16]
   163cc:	e7dc      	b.n	16388 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   163ce:	2301      	movs	r3, #1
   163d0:	613b      	str	r3, [r7, #16]
   163d2:	7bba      	ldrb	r2, [r7, #14]
   163d4:	693b      	ldr	r3, [r7, #16]
   163d6:	429a      	cmp	r2, r3
   163d8:	d910      	bls.n	163fc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   163da:	683b      	ldr	r3, [r7, #0]
   163dc:	88db      	ldrh	r3, [r3, #6]
   163de:	4619      	mov	r1, r3
   163e0:	693b      	ldr	r3, [r7, #16]
   163e2:	b2db      	uxtb	r3, r3
   163e4:	461a      	mov	r2, r3
   163e6:	6878      	ldr	r0, [r7, #4]
   163e8:	4b18      	ldr	r3, [pc, #96]	; (1644c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   163ea:	4798      	blx	r3
   163ec:	4602      	mov	r2, r0
   163ee:	697b      	ldr	r3, [r7, #20]
   163f0:	4413      	add	r3, r2
   163f2:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   163f4:	693b      	ldr	r3, [r7, #16]
   163f6:	3301      	adds	r3, #1
   163f8:	613b      	str	r3, [r7, #16]
   163fa:	e7ea      	b.n	163d2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   163fc:	7b7b      	ldrb	r3, [r7, #13]
   163fe:	3b01      	subs	r3, #1
   16400:	4a13      	ldr	r2, [pc, #76]	; (16450 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   16402:	fb02 f303 	mul.w	r3, r2, r3
   16406:	461a      	mov	r2, r3
   16408:	697b      	ldr	r3, [r7, #20]
   1640a:	4413      	add	r3, r2
   1640c:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   1640e:	7b3b      	ldrb	r3, [r7, #12]
   16410:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   16414:	fb02 f303 	mul.w	r3, r2, r3
   16418:	461a      	mov	r2, r3
   1641a:	697b      	ldr	r3, [r7, #20]
   1641c:	4413      	add	r3, r2
   1641e:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   16420:	7afa      	ldrb	r2, [r7, #11]
   16422:	4613      	mov	r3, r2
   16424:	011b      	lsls	r3, r3, #4
   16426:	1a9b      	subs	r3, r3, r2
   16428:	009b      	lsls	r3, r3, #2
   1642a:	461a      	mov	r2, r3
   1642c:	697b      	ldr	r3, [r7, #20]
   1642e:	4413      	add	r3, r2
   16430:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   16432:	7abb      	ldrb	r3, [r7, #10]
   16434:	697a      	ldr	r2, [r7, #20]
   16436:	4413      	add	r3, r2
   16438:	617b      	str	r3, [r7, #20]

	return tmp;
   1643a:	697b      	ldr	r3, [r7, #20]
}
   1643c:	4618      	mov	r0, r3
   1643e:	3718      	adds	r7, #24
   16440:	46bd      	mov	sp, r7
   16442:	bd80      	pop	{r7, pc}
   16444:	00016279 	.word	0x00016279
   16448:	01e13380 	.word	0x01e13380
   1644c:	00016455 	.word	0x00016455
   16450:	00015180 	.word	0x00015180

00016454 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   16454:	b580      	push	{r7, lr}
   16456:	b086      	sub	sp, #24
   16458:	af00      	add	r7, sp, #0
   1645a:	60f8      	str	r0, [r7, #12]
   1645c:	60b9      	str	r1, [r7, #8]
   1645e:	4613      	mov	r3, r2
   16460:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   16462:	2300      	movs	r3, #0
   16464:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   16466:	68bb      	ldr	r3, [r7, #8]
   16468:	b29b      	uxth	r3, r3
   1646a:	4619      	mov	r1, r3
   1646c:	68f8      	ldr	r0, [r7, #12]
   1646e:	4b2f      	ldr	r3, [pc, #188]	; (1652c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   16470:	4798      	blx	r3
   16472:	4603      	mov	r3, r0
   16474:	2b00      	cmp	r3, #0
   16476:	d028      	beq.n	164ca <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   16478:	79fb      	ldrb	r3, [r7, #7]
   1647a:	3b01      	subs	r3, #1
   1647c:	2b0b      	cmp	r3, #11
   1647e:	d84c      	bhi.n	1651a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   16480:	a201      	add	r2, pc, #4	; (adr r2, 16488 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   16482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16486:	bf00      	nop
   16488:	000164b9 	.word	0x000164b9
   1648c:	000164bf 	.word	0x000164bf
   16490:	000164b9 	.word	0x000164b9
   16494:	000164c5 	.word	0x000164c5
   16498:	000164b9 	.word	0x000164b9
   1649c:	000164c5 	.word	0x000164c5
   164a0:	000164b9 	.word	0x000164b9
   164a4:	000164b9 	.word	0x000164b9
   164a8:	000164c5 	.word	0x000164c5
   164ac:	000164b9 	.word	0x000164b9
   164b0:	000164c5 	.word	0x000164c5
   164b4:	000164b9 	.word	0x000164b9
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   164b8:	4b1d      	ldr	r3, [pc, #116]	; (16530 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   164ba:	617b      	str	r3, [r7, #20]
			break;
   164bc:	e030      	b.n	16520 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   164be:	4b1d      	ldr	r3, [pc, #116]	; (16534 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   164c0:	617b      	str	r3, [r7, #20]
			break;
   164c2:	e02d      	b.n	16520 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   164c4:	4b1c      	ldr	r3, [pc, #112]	; (16538 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   164c6:	617b      	str	r3, [r7, #20]
			break;
   164c8:	e02a      	b.n	16520 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   164ca:	79fb      	ldrb	r3, [r7, #7]
   164cc:	3b01      	subs	r3, #1
   164ce:	2b0b      	cmp	r3, #11
   164d0:	d825      	bhi.n	1651e <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   164d2:	a201      	add	r2, pc, #4	; (adr r2, 164d8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   164d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   164d8:	00016509 	.word	0x00016509
   164dc:	0001650f 	.word	0x0001650f
   164e0:	00016509 	.word	0x00016509
   164e4:	00016515 	.word	0x00016515
   164e8:	00016509 	.word	0x00016509
   164ec:	00016515 	.word	0x00016515
   164f0:	00016509 	.word	0x00016509
   164f4:	00016509 	.word	0x00016509
   164f8:	00016515 	.word	0x00016515
   164fc:	00016509 	.word	0x00016509
   16500:	00016515 	.word	0x00016515
   16504:	00016509 	.word	0x00016509
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   16508:	4b09      	ldr	r3, [pc, #36]	; (16530 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   1650a:	617b      	str	r3, [r7, #20]
			break;
   1650c:	e008      	b.n	16520 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   1650e:	4b0b      	ldr	r3, [pc, #44]	; (1653c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   16510:	617b      	str	r3, [r7, #20]
			break;
   16512:	e005      	b.n	16520 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   16514:	4b08      	ldr	r3, [pc, #32]	; (16538 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   16516:	617b      	str	r3, [r7, #20]
			break;
   16518:	e002      	b.n	16520 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   1651a:	bf00      	nop
   1651c:	e000      	b.n	16520 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   1651e:	bf00      	nop
		}
	}

	return sec_in_month;
   16520:	697b      	ldr	r3, [r7, #20]
}
   16522:	4618      	mov	r0, r3
   16524:	3718      	adds	r7, #24
   16526:	46bd      	mov	sp, r7
   16528:	bd80      	pop	{r7, pc}
   1652a:	bf00      	nop
   1652c:	00016279 	.word	0x00016279
   16530:	0028de80 	.word	0x0028de80
   16534:	00263b80 	.word	0x00263b80
   16538:	00278d00 	.word	0x00278d00
   1653c:	0024ea00 	.word	0x0024ea00

00016540 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
   16540:	b580      	push	{r7, lr}
   16542:	b082      	sub	sp, #8
   16544:	af00      	add	r7, sp, #0
   16546:	6078      	str	r0, [r7, #4]
   16548:	6039      	str	r1, [r7, #0]
   1654a:	687b      	ldr	r3, [r7, #4]
   1654c:	2b01      	cmp	r3, #1
   1654e:	d10d      	bne.n	1656c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   16550:	683b      	ldr	r3, [r7, #0]
   16552:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16556:	4293      	cmp	r3, r2
   16558:	d108      	bne.n	1656c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1655a:	4906      	ldr	r1, [pc, #24]	; (16574 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1655c:	4806      	ldr	r0, [pc, #24]	; (16578 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1655e:	4b07      	ldr	r3, [pc, #28]	; (1657c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   16560:	4798      	blx	r3
   16562:	4a07      	ldr	r2, [pc, #28]	; (16580 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   16564:	4907      	ldr	r1, [pc, #28]	; (16584 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   16566:	4804      	ldr	r0, [pc, #16]	; (16578 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   16568:	4b07      	ldr	r3, [pc, #28]	; (16588 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1656a:	4798      	blx	r3
   1656c:	bf00      	nop
   1656e:	3708      	adds	r7, #8
   16570:	46bd      	mov	sp, r7
   16572:	bd80      	pop	{r7, pc}
   16574:	2000a334 	.word	0x2000a334
   16578:	20009c18 	.word	0x20009c18
   1657c:	00015e89 	.word	0x00015e89
   16580:	20000000 	.word	0x20000000
   16584:	00015ec5 	.word	0x00015ec5
   16588:	000187f1 	.word	0x000187f1

0001658c <_GLOBAL__sub_I_ptrCalendarClass>:
   1658c:	b580      	push	{r7, lr}
   1658e:	af00      	add	r7, sp, #0
   16590:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16594:	2001      	movs	r0, #1
   16596:	4b01      	ldr	r3, [pc, #4]	; (1659c <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   16598:	4798      	blx	r3
   1659a:	bd80      	pop	{r7, pc}
   1659c:	00016541 	.word	0x00016541

000165a0 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   165a0:	b480      	push	{r7}
   165a2:	b083      	sub	sp, #12
   165a4:	af00      	add	r7, sp, #0
   165a6:	6078      	str	r0, [r7, #4]
   165a8:	4a04      	ldr	r2, [pc, #16]	; (165bc <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   165aa:	687b      	ldr	r3, [r7, #4]
   165ac:	601a      	str	r2, [r3, #0]
{
} //~D
   165ae:	687b      	ldr	r3, [r7, #4]
   165b0:	4618      	mov	r0, r3
   165b2:	370c      	adds	r7, #12
   165b4:	46bd      	mov	sp, r7
   165b6:	bc80      	pop	{r7}
   165b8:	4770      	bx	lr
   165ba:	bf00      	nop
   165bc:	00020adc 	.word	0x00020adc

000165c0 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   165c0:	b480      	push	{r7}
   165c2:	b083      	sub	sp, #12
   165c4:	af00      	add	r7, sp, #0
   165c6:	6078      	str	r0, [r7, #4]
   165c8:	4a04      	ldr	r2, [pc, #16]	; (165dc <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   165ca:	687b      	ldr	r3, [r7, #4]
   165cc:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   165ce:	687b      	ldr	r3, [r7, #4]
   165d0:	4618      	mov	r0, r3
   165d2:	370c      	adds	r7, #12
   165d4:	46bd      	mov	sp, r7
   165d6:	bc80      	pop	{r7}
   165d8:	4770      	bx	lr
   165da:	bf00      	nop
   165dc:	00020adc 	.word	0x00020adc

000165e0 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
   165e0:	b590      	push	{r4, r7, lr}
   165e2:	b085      	sub	sp, #20
   165e4:	af00      	add	r7, sp, #0
   165e6:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
   165e8:	687b      	ldr	r3, [r7, #4]
   165ea:	681b      	ldr	r3, [r3, #0]
   165ec:	681b      	ldr	r3, [r3, #0]
   165ee:	687a      	ldr	r2, [r7, #4]
   165f0:	3226      	adds	r2, #38	; 0x26
   165f2:	4611      	mov	r1, r2
   165f4:	6878      	ldr	r0, [r7, #4]
   165f6:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
   165f8:	687b      	ldr	r3, [r7, #4]
   165fa:	681b      	ldr	r3, [r3, #0]
   165fc:	3304      	adds	r3, #4
   165fe:	681b      	ldr	r3, [r3, #0]
   16600:	687a      	ldr	r2, [r7, #4]
   16602:	3226      	adds	r2, #38	; 0x26
   16604:	4611      	mov	r1, r2
   16606:	6878      	ldr	r0, [r7, #4]
   16608:	4798      	blx	r3
   1660a:	4602      	mov	r2, r0
   1660c:	687b      	ldr	r3, [r7, #4]
   1660e:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
   16610:	6878      	ldr	r0, [r7, #4]
   16612:	4b1a      	ldr	r3, [pc, #104]	; (1667c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x9c>)
   16614:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   16616:	687b      	ldr	r3, [r7, #4]
   16618:	681b      	ldr	r3, [r3, #0]
   1661a:	3304      	adds	r3, #4
   1661c:	681b      	ldr	r3, [r3, #0]
   1661e:	687a      	ldr	r2, [r7, #4]
   16620:	322e      	adds	r2, #46	; 0x2e
   16622:	4611      	mov	r1, r2
   16624:	6878      	ldr	r0, [r7, #4]
   16626:	4798      	blx	r3
   16628:	4602      	mov	r2, r0
   1662a:	687b      	ldr	r3, [r7, #4]
   1662c:	60da      	str	r2, [r3, #12]
	tick_t diferencia;
	if (lastTimestamp==calendar.nullTimestamp)
   1662e:	687b      	ldr	r3, [r7, #4]
   16630:	68da      	ldr	r2, [r3, #12]
   16632:	4b13      	ldr	r3, [pc, #76]	; (16680 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa0>)
   16634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   16636:	429a      	cmp	r2, r3
   16638:	d103      	bne.n	16642 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x62>
	{
		diferencia=UPDATE_TIME_MAX*2;
   1663a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1663e:	60fb      	str	r3, [r7, #12]
   16640:	e016      	b.n	16670 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>
	} 
	else
	{
		timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
   16642:	687b      	ldr	r3, [r7, #4]
   16644:	689b      	ldr	r3, [r3, #8]
   16646:	461a      	mov	r2, r3
   16648:	687b      	ldr	r3, [r7, #4]
   1664a:	68db      	ldr	r3, [r3, #12]
   1664c:	4619      	mov	r1, r3
   1664e:	4610      	mov	r0, r2
   16650:	4b0c      	ldr	r3, [pc, #48]	; (16684 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa4>)
   16652:	4798      	blx	r3
   16654:	4603      	mov	r3, r0
   16656:	460c      	mov	r4, r1
   16658:	687a      	ldr	r2, [r7, #4]
   1665a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		diferencia=(uint32_t)timeDifference;
   1665e:	687b      	ldr	r3, [r7, #4]
   16660:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
   16664:	4a08      	ldr	r2, [pc, #32]	; (16688 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa8>)
   16666:	4618      	mov	r0, r3
   16668:	4621      	mov	r1, r4
   1666a:	4790      	blx	r2
   1666c:	4603      	mov	r3, r0
   1666e:	60fb      	str	r3, [r7, #12]
	}

	return	diferencia;
   16670:	68fb      	ldr	r3, [r7, #12]
}
   16672:	4618      	mov	r0, r3
   16674:	3714      	adds	r7, #20
   16676:	46bd      	mov	sp, r7
   16678:	bd90      	pop	{r4, r7, pc}
   1667a:	bf00      	nop
   1667c:	00016875 	.word	0x00016875
   16680:	20009c18 	.word	0x20009c18
   16684:	0001ac89 	.word	0x0001ac89
   16688:	0001a335 	.word	0x0001a335

0001668c <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
   1668c:	b5b0      	push	{r4, r5, r7, lr}
   1668e:	b082      	sub	sp, #8
   16690:	af00      	add	r7, sp, #0
   16692:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
   16694:	4b07      	ldr	r3, [pc, #28]	; (166b4 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
   16696:	6878      	ldr	r0, [r7, #4]
   16698:	4798      	blx	r3
   1669a:	4602      	mov	r2, r0
   1669c:	460b      	mov	r3, r1
   1669e:	4614      	mov	r4, r2
   166a0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   166a4:	4623      	mov	r3, r4
   166a6:	462c      	mov	r4, r5
   166a8:	4618      	mov	r0, r3
   166aa:	4621      	mov	r1, r4
   166ac:	3708      	adds	r7, #8
   166ae:	46bd      	mov	sp, r7
   166b0:	bdb0      	pop	{r4, r5, r7, pc}
   166b2:	bf00      	nop
   166b4:	00019d09 	.word	0x00019d09

000166b8 <_ZN17DateTimeLog_Class14WasInterruptedEv>:

bool	DateTimeLog_Class::WasInterrupted(void){
   166b8:	b5b0      	push	{r4, r5, r7, lr}
   166ba:	b082      	sub	sp, #8
   166bc:	af00      	add	r7, sp, #0
   166be:	6078      	str	r0, [r7, #4]
	
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
   166c0:	6878      	ldr	r0, [r7, #4]
   166c2:	4b12      	ldr	r3, [pc, #72]	; (1670c <_ZN17DateTimeLog_Class14WasInterruptedEv+0x54>)
   166c4:	4798      	blx	r3
   166c6:	4603      	mov	r3, r0
   166c8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   166cc:	4618      	mov	r0, r3
   166ce:	4b10      	ldr	r3, [pc, #64]	; (16710 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x58>)
   166d0:	4798      	blx	r3
   166d2:	2301      	movs	r3, #1
   166d4:	461d      	mov	r5, r3
   166d6:	4c0f      	ldr	r4, [pc, #60]	; (16714 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x5c>)
   166d8:	f04f 0200 	mov.w	r2, #0
   166dc:	4b0e      	ldr	r3, [pc, #56]	; (16718 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x60>)
   166de:	47a0      	blx	r4
   166e0:	4603      	mov	r3, r0
   166e2:	2b00      	cmp	r3, #0
   166e4:	d101      	bne.n	166ea <_ZN17DateTimeLog_Class14WasInterruptedEv+0x32>
   166e6:	2300      	movs	r3, #0
   166e8:	461d      	mov	r5, r3
   166ea:	b2eb      	uxtb	r3, r5
   166ec:	2b00      	cmp	r3, #0
   166ee:	d003      	beq.n	166f8 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x40>
	{
		powerInterrupt=true;
   166f0:	687b      	ldr	r3, [r7, #4]
   166f2:	2201      	movs	r2, #1
   166f4:	711a      	strb	r2, [r3, #4]
   166f6:	e002      	b.n	166fe <_ZN17DateTimeLog_Class14WasInterruptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
   166f8:	687b      	ldr	r3, [r7, #4]
   166fa:	2200      	movs	r2, #0
   166fc:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
   166fe:	687b      	ldr	r3, [r7, #4]
   16700:	791b      	ldrb	r3, [r3, #4]
   16702:	b2db      	uxtb	r3, r3
}
   16704:	4618      	mov	r0, r3
   16706:	3708      	adds	r7, #8
   16708:	46bd      	mov	sp, r7
   1670a:	bdb0      	pop	{r4, r5, r7, pc}
   1670c:	000165e1 	.word	0x000165e1
   16710:	0001668d 	.word	0x0001668d
   16714:	0001a2f5 	.word	0x0001a2f5
   16718:	40490000 	.word	0x40490000

0001671c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
   1671c:	b590      	push	{r4, r7, lr}
   1671e:	b085      	sub	sp, #20
   16720:	af00      	add	r7, sp, #0
   16722:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
   16724:	687b      	ldr	r3, [r7, #4]
   16726:	f103 0122 	add.w	r1, r3, #34	; 0x22
   1672a:	687b      	ldr	r3, [r7, #4]
   1672c:	8c1a      	ldrh	r2, [r3, #32]
   1672e:	2301      	movs	r3, #1
   16730:	480c      	ldr	r0, [pc, #48]	; (16764 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   16732:	4c0d      	ldr	r4, [pc, #52]	; (16768 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
   16734:	47a0      	blx	r4
   16736:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
   16738:	6878      	ldr	r0, [r7, #4]
   1673a:	4b0c      	ldr	r3, [pc, #48]	; (1676c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
   1673c:	4798      	blx	r3
   1673e:	4603      	mov	r3, r0
   16740:	b29a      	uxth	r2, r3
   16742:	687b      	ldr	r3, [r7, #4]
   16744:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
   16746:	687b      	ldr	r3, [r7, #4]
   16748:	f103 0122 	add.w	r1, r3, #34	; 0x22
   1674c:	687b      	ldr	r3, [r7, #4]
   1674e:	8c1a      	ldrh	r2, [r3, #32]
   16750:	2301      	movs	r3, #1
   16752:	4804      	ldr	r0, [pc, #16]	; (16764 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   16754:	4c06      	ldr	r4, [pc, #24]	; (16770 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
   16756:	47a0      	blx	r4
   16758:	60f8      	str	r0, [r7, #12]
	return r;
   1675a:	68fb      	ldr	r3, [r7, #12]
}
   1675c:	4618      	mov	r0, r3
   1675e:	3714      	adds	r7, #20
   16760:	46bd      	mov	sp, r7
   16762:	bd90      	pop	{r4, r7, pc}
   16764:	2000995c 	.word	0x2000995c
   16768:	00015345 	.word	0x00015345
   1676c:	00016775 	.word	0x00016775
   16770:	00015241 	.word	0x00015241

00016774 <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
   16774:	b480      	push	{r7}
   16776:	b083      	sub	sp, #12
   16778:	af00      	add	r7, sp, #0
   1677a:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
   1677c:	687b      	ldr	r3, [r7, #4]
   1677e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   16780:	b2db      	uxtb	r3, r3
   16782:	3301      	adds	r3, #1
   16784:	b2db      	uxtb	r3, r3
   16786:	f003 030f 	and.w	r3, r3, #15
   1678a:	b2db      	uxtb	r3, r3
 }
   1678c:	4618      	mov	r0, r3
   1678e:	370c      	adds	r7, #12
   16790:	46bd      	mov	sp, r7
   16792:	bc80      	pop	{r7}
   16794:	4770      	bx	lr
	...

00016798 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
   16798:	b590      	push	{r4, r7, lr}
   1679a:	b085      	sub	sp, #20
   1679c:	af00      	add	r7, sp, #0
   1679e:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
   167a0:	687b      	ldr	r3, [r7, #4]
   167a2:	8c1a      	ldrh	r2, [r3, #32]
   167a4:	f107 010f 	add.w	r1, r7, #15
   167a8:	2301      	movs	r3, #1
   167aa:	4804      	ldr	r0, [pc, #16]	; (167bc <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
   167ac:	4c04      	ldr	r4, [pc, #16]	; (167c0 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
   167ae:	47a0      	blx	r4
	 return	s;
   167b0:	7bfb      	ldrb	r3, [r7, #15]
 }
   167b2:	4618      	mov	r0, r3
   167b4:	3714      	adds	r7, #20
   167b6:	46bd      	mov	sp, r7
   167b8:	bd90      	pop	{r4, r7, pc}
   167ba:	bf00      	nop
   167bc:	2000995c 	.word	0x2000995c
   167c0:	00015345 	.word	0x00015345

000167c4 <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
   167c4:	b480      	push	{r7}
   167c6:	b083      	sub	sp, #12
   167c8:	af00      	add	r7, sp, #0
   167ca:	6078      	str	r0, [r7, #4]
   167cc:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
   167ce:	683b      	ldr	r3, [r7, #0]
   167d0:	b29a      	uxth	r2, r3
   167d2:	687b      	ldr	r3, [r7, #4]
   167d4:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
   167d6:	687b      	ldr	r3, [r7, #4]
   167d8:	8c1b      	ldrh	r3, [r3, #32]
 }
   167da:	4618      	mov	r0, r3
   167dc:	370c      	adds	r7, #12
   167de:	46bd      	mov	sp, r7
   167e0:	bc80      	pop	{r7}
   167e2:	4770      	bx	lr

000167e4 <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
   167e4:	b480      	push	{r7}
   167e6:	b083      	sub	sp, #12
   167e8:	af00      	add	r7, sp, #0
   167ea:	6078      	str	r0, [r7, #4]
   167ec:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
   167ee:	683b      	ldr	r3, [r7, #0]
   167f0:	b29a      	uxth	r2, r3
   167f2:	687b      	ldr	r3, [r7, #4]
   167f4:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
   167f6:	687b      	ldr	r3, [r7, #4]
   167f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
   167fa:	4618      	mov	r0, r3
   167fc:	370c      	adds	r7, #12
   167fe:	46bd      	mov	sp, r7
   16800:	bc80      	pop	{r7}
   16802:	4770      	bx	lr

00016804 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
   16804:	b590      	push	{r4, r7, lr}
   16806:	b085      	sub	sp, #20
   16808:	af00      	add	r7, sp, #0
   1680a:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   1680c:	6878      	ldr	r0, [r7, #4]
   1680e:	4b15      	ldr	r3, [pc, #84]	; (16864 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
   16810:	4798      	blx	r3
   16812:	4603      	mov	r3, r0
   16814:	b29a      	uxth	r2, r3
   16816:	687b      	ldr	r3, [r7, #4]
   16818:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
   1681a:	687b      	ldr	r3, [r7, #4]
   1681c:	681b      	ldr	r3, [r3, #0]
   1681e:	681b      	ldr	r3, [r3, #0]
   16820:	687a      	ldr	r2, [r7, #4]
   16822:	3226      	adds	r2, #38	; 0x26
   16824:	4611      	mov	r1, r2
   16826:	6878      	ldr	r0, [r7, #4]
   16828:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
   1682a:	687b      	ldr	r3, [r7, #4]
   1682c:	3326      	adds	r3, #38	; 0x26
   1682e:	461a      	mov	r2, r3
   16830:	687b      	ldr	r3, [r7, #4]
   16832:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   16834:	687b      	ldr	r3, [r7, #4]
   16836:	6b99      	ldr	r1, [r3, #56]	; 0x38
   16838:	687b      	ldr	r3, [r7, #4]
   1683a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1683c:	b2da      	uxtb	r2, r3
   1683e:	687b      	ldr	r3, [r7, #4]
   16840:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   16842:	b2db      	uxtb	r3, r3
   16844:	4413      	add	r3, r2
   16846:	b2da      	uxtb	r2, r3
   16848:	2308      	movs	r3, #8
   1684a:	4807      	ldr	r0, [pc, #28]	; (16868 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
   1684c:	4c07      	ldr	r4, [pc, #28]	; (1686c <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
   1684e:	47a0      	blx	r4
   16850:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
   16852:	6878      	ldr	r0, [r7, #4]
   16854:	4b06      	ldr	r3, [pc, #24]	; (16870 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
   16856:	4798      	blx	r3
	return	w;
   16858:	68fb      	ldr	r3, [r7, #12]
}
   1685a:	4618      	mov	r0, r3
   1685c:	3714      	adds	r7, #20
   1685e:	46bd      	mov	sp, r7
   16860:	bd90      	pop	{r4, r7, pc}
   16862:	bf00      	nop
   16864:	00016799 	.word	0x00016799
   16868:	2000995c 	.word	0x2000995c
   1686c:	000151ad 	.word	0x000151ad
   16870:	0001671d 	.word	0x0001671d

00016874 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
   16874:	b590      	push	{r4, r7, lr}
   16876:	b085      	sub	sp, #20
   16878:	af00      	add	r7, sp, #0
   1687a:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   1687c:	6878      	ldr	r0, [r7, #4]
   1687e:	4b0f      	ldr	r3, [pc, #60]	; (168bc <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
   16880:	4798      	blx	r3
   16882:	4603      	mov	r3, r0
   16884:	b29a      	uxth	r2, r3
   16886:	687b      	ldr	r3, [r7, #4]
   16888:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
   1688a:	687b      	ldr	r3, [r7, #4]
   1688c:	332e      	adds	r3, #46	; 0x2e
   1688e:	461a      	mov	r2, r3
   16890:	687b      	ldr	r3, [r7, #4]
   16892:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   16894:	687b      	ldr	r3, [r7, #4]
   16896:	6b99      	ldr	r1, [r3, #56]	; 0x38
   16898:	687b      	ldr	r3, [r7, #4]
   1689a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1689c:	b2da      	uxtb	r2, r3
   1689e:	687b      	ldr	r3, [r7, #4]
   168a0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   168a2:	b2db      	uxtb	r3, r3
   168a4:	4413      	add	r3, r2
   168a6:	b2da      	uxtb	r2, r3
   168a8:	2308      	movs	r3, #8
   168aa:	4805      	ldr	r0, [pc, #20]	; (168c0 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
   168ac:	4c05      	ldr	r4, [pc, #20]	; (168c4 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
   168ae:	47a0      	blx	r4
   168b0:	60f8      	str	r0, [r7, #12]
	return	r;
   168b2:	68fb      	ldr	r3, [r7, #12]
}
   168b4:	4618      	mov	r0, r3
   168b6:	3714      	adds	r7, #20
   168b8:	46bd      	mov	sp, r7
   168ba:	bd90      	pop	{r4, r7, pc}
   168bc:	00016799 	.word	0x00016799
   168c0:	2000995c 	.word	0x2000995c
   168c4:	000152d5 	.word	0x000152d5

000168c8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   168c8:	b480      	push	{r7}
   168ca:	b083      	sub	sp, #12
   168cc:	af00      	add	r7, sp, #0
   168ce:	6078      	str	r0, [r7, #4]
   168d0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   168d2:	687b      	ldr	r3, [r7, #4]
   168d4:	683a      	ldr	r2, [r7, #0]
   168d6:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   168d8:	4a06      	ldr	r2, [pc, #24]	; (168f4 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
   168da:	687b      	ldr	r3, [r7, #4]
   168dc:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   168de:	687b      	ldr	r3, [r7, #4]
   168e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   168e4:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   168e6:	687b      	ldr	r3, [r7, #4]
   168e8:	4618      	mov	r0, r3
   168ea:	370c      	adds	r7, #12
   168ec:	46bd      	mov	sp, r7
   168ee:	bc80      	pop	{r7}
   168f0:	4770      	bx	lr
   168f2:	bf00      	nop
   168f4:	20009cc0 	.word	0x20009cc0

000168f8 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   168f8:	b480      	push	{r7}
   168fa:	b083      	sub	sp, #12
   168fc:	af00      	add	r7, sp, #0
   168fe:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   16900:	687b      	ldr	r3, [r7, #4]
   16902:	2200      	movs	r2, #0
   16904:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   16906:	687b      	ldr	r3, [r7, #4]
   16908:	4618      	mov	r0, r3
   1690a:	370c      	adds	r7, #12
   1690c:	46bd      	mov	sp, r7
   1690e:	bc80      	pop	{r7}
   16910:	4770      	bx	lr
	...

00016914 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   16914:	b580      	push	{r7, lr}
   16916:	b082      	sub	sp, #8
   16918:	af00      	add	r7, sp, #0
   1691a:	6078      	str	r0, [r7, #4]
	ticks=0;
   1691c:	687b      	ldr	r3, [r7, #4]
   1691e:	2200      	movs	r2, #0
   16920:	609a      	str	r2, [r3, #8]
	for (i=1; i<TASK_NUMBER	; i++)
   16922:	687b      	ldr	r3, [r7, #4]
   16924:	2201      	movs	r2, #1
   16926:	771a      	strb	r2, [r3, #28]
   16928:	687b      	ldr	r3, [r7, #4]
   1692a:	7f1b      	ldrb	r3, [r3, #28]
   1692c:	2b0f      	cmp	r3, #15
   1692e:	dc30      	bgt.n	16992 <_ZN11Timer_Class4InitEv+0x7e>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   16930:	687b      	ldr	r3, [r7, #4]
   16932:	7f1b      	ldrb	r3, [r3, #28]
   16934:	4619      	mov	r1, r3
   16936:	4a20      	ldr	r2, [pc, #128]	; (169b8 <_ZN11Timer_Class4InitEv+0xa4>)
   16938:	460b      	mov	r3, r1
   1693a:	009b      	lsls	r3, r3, #2
   1693c:	440b      	add	r3, r1
   1693e:	009b      	lsls	r3, r3, #2
   16940:	4413      	add	r3, r2
   16942:	2200      	movs	r2, #0
   16944:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   16946:	687b      	ldr	r3, [r7, #4]
   16948:	7f1b      	ldrb	r3, [r3, #28]
   1694a:	4619      	mov	r1, r3
   1694c:	4a1a      	ldr	r2, [pc, #104]	; (169b8 <_ZN11Timer_Class4InitEv+0xa4>)
   1694e:	460b      	mov	r3, r1
   16950:	009b      	lsls	r3, r3, #2
   16952:	440b      	add	r3, r1
   16954:	009b      	lsls	r3, r3, #2
   16956:	4413      	add	r3, r2
   16958:	330c      	adds	r3, #12
   1695a:	2200      	movs	r2, #0
   1695c:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   1695e:	687b      	ldr	r3, [r7, #4]
   16960:	7f1b      	ldrb	r3, [r3, #28]
   16962:	1e5a      	subs	r2, r3, #1
   16964:	687b      	ldr	r3, [r7, #4]
   16966:	7f1b      	ldrb	r3, [r3, #28]
   16968:	4619      	mov	r1, r3
   1696a:	460b      	mov	r3, r1
   1696c:	009b      	lsls	r3, r3, #2
   1696e:	440b      	add	r3, r1
   16970:	009b      	lsls	r3, r3, #2
   16972:	4911      	ldr	r1, [pc, #68]	; (169b8 <_ZN11Timer_Class4InitEv+0xa4>)
   16974:	4419      	add	r1, r3
   16976:	4810      	ldr	r0, [pc, #64]	; (169b8 <_ZN11Timer_Class4InitEv+0xa4>)
   16978:	4613      	mov	r3, r2
   1697a:	009b      	lsls	r3, r3, #2
   1697c:	4413      	add	r3, r2
   1697e:	009b      	lsls	r3, r3, #2
   16980:	4403      	add	r3, r0
   16982:	6019      	str	r1, [r3, #0]
	for (i=1; i<TASK_NUMBER	; i++)
   16984:	687b      	ldr	r3, [r7, #4]
   16986:	7f1b      	ldrb	r3, [r3, #28]
   16988:	3301      	adds	r3, #1
   1698a:	b2da      	uxtb	r2, r3
   1698c:	687b      	ldr	r3, [r7, #4]
   1698e:	771a      	strb	r2, [r3, #28]
   16990:	e7ca      	b.n	16928 <_ZN11Timer_Class4InitEv+0x14>
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=start()==ERR_NONE;
   16992:	6878      	ldr	r0, [r7, #4]
   16994:	4b09      	ldr	r3, [pc, #36]	; (169bc <_ZN11Timer_Class4InitEv+0xa8>)
   16996:	4798      	blx	r3
   16998:	4603      	mov	r3, r0
   1699a:	2b00      	cmp	r3, #0
   1699c:	bf0c      	ite	eq
   1699e:	2301      	moveq	r3, #1
   169a0:	2300      	movne	r3, #0
   169a2:	b2da      	uxtb	r2, r3
   169a4:	687b      	ldr	r3, [r7, #4]
   169a6:	709a      	strb	r2, [r3, #2]
	return isOK;
   169a8:	687b      	ldr	r3, [r7, #4]
   169aa:	789b      	ldrb	r3, [r3, #2]
   169ac:	b2db      	uxtb	r3, r3
}
   169ae:	4618      	mov	r0, r3
   169b0:	3708      	adds	r7, #8
   169b2:	46bd      	mov	sp, r7
   169b4:	bd80      	pop	{r7, pc}
   169b6:	bf00      	nop
   169b8:	20009cc4 	.word	0x20009cc4
   169bc:	000169c1 	.word	0x000169c1

000169c0 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   169c0:	b580      	push	{r7, lr}
   169c2:	b084      	sub	sp, #16
   169c4:	af00      	add	r7, sp, #0
   169c6:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   169c8:	687b      	ldr	r3, [r7, #4]
   169ca:	68db      	ldr	r3, [r3, #12]
   169cc:	4618      	mov	r0, r3
   169ce:	4b04      	ldr	r3, [pc, #16]	; (169e0 <_ZN11Timer_Class5startEv+0x20>)
   169d0:	4798      	blx	r3
   169d2:	60f8      	str	r0, [r7, #12]
	return status;
   169d4:	68fb      	ldr	r3, [r7, #12]
	
}
   169d6:	4618      	mov	r0, r3
   169d8:	3710      	adds	r7, #16
   169da:	46bd      	mov	sp, r7
   169dc:	bd80      	pop	{r7, pc}
   169de:	bf00      	nop
   169e0:	00007039 	.word	0x00007039

000169e4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   169e4:	b580      	push	{r7, lr}
   169e6:	b086      	sub	sp, #24
   169e8:	af00      	add	r7, sp, #0
   169ea:	60f8      	str	r0, [r7, #12]
   169ec:	60b9      	str	r1, [r7, #8]
   169ee:	607a      	str	r2, [r7, #4]
   169f0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   169f2:	68f8      	ldr	r0, [r7, #12]
   169f4:	4b0d      	ldr	r3, [pc, #52]	; (16a2c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   169f6:	4798      	blx	r3
	task->interval = interval;
   169f8:	68fb      	ldr	r3, [r7, #12]
   169fa:	699b      	ldr	r3, [r3, #24]
   169fc:	687a      	ldr	r2, [r7, #4]
   169fe:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   16a00:	68fb      	ldr	r3, [r7, #12]
   16a02:	699b      	ldr	r3, [r3, #24]
   16a04:	68ba      	ldr	r2, [r7, #8]
   16a06:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   16a08:	68fb      	ldr	r3, [r7, #12]
   16a0a:	699b      	ldr	r3, [r3, #24]
   16a0c:	78fa      	ldrb	r2, [r7, #3]
   16a0e:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   16a10:	68fb      	ldr	r3, [r7, #12]
   16a12:	68da      	ldr	r2, [r3, #12]
   16a14:	68fb      	ldr	r3, [r7, #12]
   16a16:	699b      	ldr	r3, [r3, #24]
   16a18:	4619      	mov	r1, r3
   16a1a:	4610      	mov	r0, r2
   16a1c:	4b04      	ldr	r3, [pc, #16]	; (16a30 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   16a1e:	4798      	blx	r3
   16a20:	6178      	str	r0, [r7, #20]
	
	return status;
   16a22:	697b      	ldr	r3, [r7, #20]
}
   16a24:	4618      	mov	r0, r3
   16a26:	3718      	adds	r7, #24
   16a28:	46bd      	mov	sp, r7
   16a2a:	bd80      	pop	{r7, pc}
   16a2c:	00016b39 	.word	0x00016b39
   16a30:	000070e9 	.word	0x000070e9

00016a34 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   16a34:	b580      	push	{r7, lr}
   16a36:	b084      	sub	sp, #16
   16a38:	af00      	add	r7, sp, #0
   16a3a:	60f8      	str	r0, [r7, #12]
   16a3c:	60b9      	str	r1, [r7, #8]
   16a3e:	607a      	str	r2, [r7, #4]
	 Add_periodic_task(func,interval);
   16a40:	687a      	ldr	r2, [r7, #4]
   16a42:	68b9      	ldr	r1, [r7, #8]
   16a44:	68f8      	ldr	r0, [r7, #12]
   16a46:	4b06      	ldr	r3, [pc, #24]	; (16a60 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x2c>)
   16a48:	4798      	blx	r3
	 return timer_start(timer_descr);
   16a4a:	68fb      	ldr	r3, [r7, #12]
   16a4c:	68db      	ldr	r3, [r3, #12]
   16a4e:	4618      	mov	r0, r3
   16a50:	4b04      	ldr	r3, [pc, #16]	; (16a64 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x30>)
   16a52:	4798      	blx	r3
   16a54:	4603      	mov	r3, r0
}
   16a56:	4618      	mov	r0, r3
   16a58:	3710      	adds	r7, #16
   16a5a:	46bd      	mov	sp, r7
   16a5c:	bd80      	pop	{r7, pc}
   16a5e:	bf00      	nop
   16a60:	00016a69 	.word	0x00016a69
   16a64:	00007039 	.word	0x00007039

00016a68 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   16a68:	b590      	push	{r4, r7, lr}
   16a6a:	b087      	sub	sp, #28
   16a6c:	af00      	add	r7, sp, #0
   16a6e:	60f8      	str	r0, [r7, #12]
   16a70:	60b9      	str	r1, [r7, #8]
   16a72:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   16a74:	2301      	movs	r3, #1
   16a76:	687a      	ldr	r2, [r7, #4]
   16a78:	68b9      	ldr	r1, [r7, #8]
   16a7a:	68f8      	ldr	r0, [r7, #12]
   16a7c:	4c03      	ldr	r4, [pc, #12]	; (16a8c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   16a7e:	47a0      	blx	r4
   16a80:	6178      	str	r0, [r7, #20]
		return status;
   16a82:	697b      	ldr	r3, [r7, #20]
}
   16a84:	4618      	mov	r0, r3
   16a86:	371c      	adds	r7, #28
   16a88:	46bd      	mov	sp, r7
   16a8a:	bd90      	pop	{r4, r7, pc}
   16a8c:	000169e5 	.word	0x000169e5

00016a90 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
   16a90:	b580      	push	{r7, lr}
   16a92:	b082      	sub	sp, #8
   16a94:	af00      	add	r7, sp, #0
   16a96:	6078      	str	r0, [r7, #4]
   16a98:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   16a9a:	6839      	ldr	r1, [r7, #0]
   16a9c:	6878      	ldr	r0, [r7, #4]
   16a9e:	4b0f      	ldr	r3, [pc, #60]	; (16adc <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   16aa0:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   16aa2:	687b      	ldr	r3, [r7, #4]
   16aa4:	68db      	ldr	r3, [r3, #12]
   16aa6:	f103 0214 	add.w	r2, r3, #20
   16aaa:	687b      	ldr	r3, [r7, #4]
   16aac:	699b      	ldr	r3, [r3, #24]
   16aae:	4619      	mov	r1, r3
   16ab0:	4610      	mov	r0, r2
   16ab2:	4b0b      	ldr	r3, [pc, #44]	; (16ae0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   16ab4:	4798      	blx	r3
   16ab6:	4603      	mov	r3, r0
   16ab8:	2b00      	cmp	r3, #0
   16aba:	d007      	beq.n	16acc <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   16abc:	687b      	ldr	r3, [r7, #4]
   16abe:	68da      	ldr	r2, [r3, #12]
   16ac0:	687b      	ldr	r3, [r7, #4]
   16ac2:	699b      	ldr	r3, [r3, #24]
   16ac4:	4619      	mov	r1, r3
   16ac6:	4610      	mov	r0, r2
   16ac8:	4b06      	ldr	r3, [pc, #24]	; (16ae4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   16aca:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   16acc:	687b      	ldr	r3, [r7, #4]
   16ace:	699b      	ldr	r3, [r3, #24]
   16ad0:	2200      	movs	r2, #0
   16ad2:	60da      	str	r2, [r3, #12]
}
   16ad4:	bf00      	nop
   16ad6:	3708      	adds	r7, #8
   16ad8:	46bd      	mov	sp, r7
   16ada:	bd80      	pop	{r7, pc}
   16adc:	00016ba1 	.word	0x00016ba1
   16ae0:	00007db9 	.word	0x00007db9
   16ae4:	000071e1 	.word	0x000071e1

00016ae8 <_ZN11Timer_Class9Get_ticksEv>:



uint32_t	Timer_Class::Get_ticks(void){
   16ae8:	b480      	push	{r7}
   16aea:	b083      	sub	sp, #12
   16aec:	af00      	add	r7, sp, #0
   16aee:	6078      	str	r0, [r7, #4]
	
		return ticks;
   16af0:	687b      	ldr	r3, [r7, #4]
   16af2:	689b      	ldr	r3, [r3, #8]
}
   16af4:	4618      	mov	r0, r3
   16af6:	370c      	adds	r7, #12
   16af8:	46bd      	mov	sp, r7
   16afa:	bc80      	pop	{r7}
   16afc:	4770      	bx	lr
	...

00016b00 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   16b00:	b590      	push	{r4, r7, lr}
   16b02:	b087      	sub	sp, #28
   16b04:	af00      	add	r7, sp, #0
   16b06:	60f8      	str	r0, [r7, #12]
   16b08:	60b9      	str	r1, [r7, #8]
   16b0a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   16b0c:	2300      	movs	r3, #0
   16b0e:	687a      	ldr	r2, [r7, #4]
   16b10:	68b9      	ldr	r1, [r7, #8]
   16b12:	68f8      	ldr	r0, [r7, #12]
   16b14:	4c06      	ldr	r4, [pc, #24]	; (16b30 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x30>)
   16b16:	47a0      	blx	r4
   16b18:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   16b1a:	68fb      	ldr	r3, [r7, #12]
   16b1c:	68db      	ldr	r3, [r3, #12]
   16b1e:	4618      	mov	r0, r3
   16b20:	4b04      	ldr	r3, [pc, #16]	; (16b34 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x34>)
   16b22:	4798      	blx	r3
   16b24:	6178      	str	r0, [r7, #20]
	return status;
   16b26:	697b      	ldr	r3, [r7, #20]
}
   16b28:	4618      	mov	r0, r3
   16b2a:	371c      	adds	r7, #28
   16b2c:	46bd      	mov	sp, r7
   16b2e:	bd90      	pop	{r4, r7, pc}
   16b30:	000169e5 	.word	0x000169e5
   16b34:	00007039 	.word	0x00007039

00016b38 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   16b38:	b480      	push	{r7}
   16b3a:	b083      	sub	sp, #12
   16b3c:	af00      	add	r7, sp, #0
   16b3e:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
   16b40:	687b      	ldr	r3, [r7, #4]
   16b42:	2200      	movs	r2, #0
   16b44:	771a      	strb	r2, [r3, #28]
   16b46:	687b      	ldr	r3, [r7, #4]
   16b48:	7f1b      	ldrb	r3, [r3, #28]
   16b4a:	2b0f      	cmp	r3, #15
   16b4c:	dc1f      	bgt.n	16b8e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x56>
	{
		if (taskArray[i].cb==NULL)
   16b4e:	687b      	ldr	r3, [r7, #4]
   16b50:	7f1b      	ldrb	r3, [r3, #28]
   16b52:	4619      	mov	r1, r3
   16b54:	4a11      	ldr	r2, [pc, #68]	; (16b9c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
   16b56:	460b      	mov	r3, r1
   16b58:	009b      	lsls	r3, r3, #2
   16b5a:	440b      	add	r3, r1
   16b5c:	009b      	lsls	r3, r3, #2
   16b5e:	4413      	add	r3, r2
   16b60:	330c      	adds	r3, #12
   16b62:	681b      	ldr	r3, [r3, #0]
   16b64:	2b00      	cmp	r3, #0
   16b66:	d10b      	bne.n	16b80 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x48>
		{
			
			task=&taskArray[i];
   16b68:	687b      	ldr	r3, [r7, #4]
   16b6a:	7f1b      	ldrb	r3, [r3, #28]
   16b6c:	461a      	mov	r2, r3
   16b6e:	4613      	mov	r3, r2
   16b70:	009b      	lsls	r3, r3, #2
   16b72:	4413      	add	r3, r2
   16b74:	009b      	lsls	r3, r3, #2
   16b76:	4a09      	ldr	r2, [pc, #36]	; (16b9c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
   16b78:	441a      	add	r2, r3
   16b7a:	687b      	ldr	r3, [r7, #4]
   16b7c:	619a      	str	r2, [r3, #24]
			return;
   16b7e:	e009      	b.n	16b94 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
   16b80:	687b      	ldr	r3, [r7, #4]
   16b82:	7f1b      	ldrb	r3, [r3, #28]
   16b84:	3301      	adds	r3, #1
   16b86:	b2da      	uxtb	r2, r3
   16b88:	687b      	ldr	r3, [r7, #4]
   16b8a:	771a      	strb	r2, [r3, #28]
   16b8c:	e7db      	b.n	16b46 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xe>
			
		}
	}
	task=&taskArray[0];
   16b8e:	687b      	ldr	r3, [r7, #4]
   16b90:	4a02      	ldr	r2, [pc, #8]	; (16b9c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
   16b92:	619a      	str	r2, [r3, #24]

}
   16b94:	370c      	adds	r7, #12
   16b96:	46bd      	mov	sp, r7
   16b98:	bc80      	pop	{r7}
   16b9a:	4770      	bx	lr
   16b9c:	20009cc4 	.word	0x20009cc4

00016ba0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   16ba0:	b480      	push	{r7}
   16ba2:	b083      	sub	sp, #12
   16ba4:	af00      	add	r7, sp, #0
   16ba6:	6078      	str	r0, [r7, #4]
   16ba8:	6039      	str	r1, [r7, #0]
	for (i = 0; i < TASK_NUMBER; i++)
   16baa:	687b      	ldr	r3, [r7, #4]
   16bac:	2200      	movs	r2, #0
   16bae:	771a      	strb	r2, [r3, #28]
   16bb0:	687b      	ldr	r3, [r7, #4]
   16bb2:	7f1b      	ldrb	r3, [r3, #28]
   16bb4:	2b0f      	cmp	r3, #15
   16bb6:	dc20      	bgt.n	16bfa <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x5a>
	{
		if (taskArray[i].cb==(timer_cb_t)func)
   16bb8:	687b      	ldr	r3, [r7, #4]
   16bba:	7f1b      	ldrb	r3, [r3, #28]
   16bbc:	4619      	mov	r1, r3
   16bbe:	4a11      	ldr	r2, [pc, #68]	; (16c04 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x64>)
   16bc0:	460b      	mov	r3, r1
   16bc2:	009b      	lsls	r3, r3, #2
   16bc4:	440b      	add	r3, r1
   16bc6:	009b      	lsls	r3, r3, #2
   16bc8:	4413      	add	r3, r2
   16bca:	330c      	adds	r3, #12
   16bcc:	681a      	ldr	r2, [r3, #0]
   16bce:	683b      	ldr	r3, [r7, #0]
   16bd0:	429a      	cmp	r2, r3
   16bd2:	d10b      	bne.n	16bec <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4c>
		{
			
			task=&taskArray[i];
   16bd4:	687b      	ldr	r3, [r7, #4]
   16bd6:	7f1b      	ldrb	r3, [r3, #28]
   16bd8:	461a      	mov	r2, r3
   16bda:	4613      	mov	r3, r2
   16bdc:	009b      	lsls	r3, r3, #2
   16bde:	4413      	add	r3, r2
   16be0:	009b      	lsls	r3, r3, #2
   16be2:	4a08      	ldr	r2, [pc, #32]	; (16c04 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x64>)
   16be4:	441a      	add	r2, r3
   16be6:	687b      	ldr	r3, [r7, #4]
   16be8:	619a      	str	r2, [r3, #24]
			return;
   16bea:	e006      	b.n	16bfa <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x5a>
	for (i = 0; i < TASK_NUMBER; i++)
   16bec:	687b      	ldr	r3, [r7, #4]
   16bee:	7f1b      	ldrb	r3, [r3, #28]
   16bf0:	3301      	adds	r3, #1
   16bf2:	b2da      	uxtb	r2, r3
   16bf4:	687b      	ldr	r3, [r7, #4]
   16bf6:	771a      	strb	r2, [r3, #28]
   16bf8:	e7da      	b.n	16bb0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x10>
			
		}
	}


}
   16bfa:	370c      	adds	r7, #12
   16bfc:	46bd      	mov	sp, r7
   16bfe:	bc80      	pop	{r7}
   16c00:	4770      	bx	lr
   16c02:	bf00      	nop
   16c04:	20009cc4 	.word	0x20009cc4

00016c08 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
   16c08:	b580      	push	{r7, lr}
   16c0a:	b082      	sub	sp, #8
   16c0c:	af00      	add	r7, sp, #0
   16c0e:	6078      	str	r0, [r7, #4]
   16c10:	6039      	str	r1, [r7, #0]
   16c12:	687b      	ldr	r3, [r7, #4]
   16c14:	2b01      	cmp	r3, #1
   16c16:	d128      	bne.n	16c6a <_Z41__static_initialization_and_destruction_0ii+0x62>
   16c18:	683b      	ldr	r3, [r7, #0]
   16c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16c1e:	4293      	cmp	r3, r2
   16c20:	d123      	bne.n	16c6a <_Z41__static_initialization_and_destruction_0ii+0x62>
Timer_Class eventTimer(&TIMER_EVENT);
   16c22:	4914      	ldr	r1, [pc, #80]	; (16c74 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   16c24:	4814      	ldr	r0, [pc, #80]	; (16c78 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   16c26:	4b15      	ldr	r3, [pc, #84]	; (16c7c <_Z41__static_initialization_and_destruction_0ii+0x74>)
   16c28:	4798      	blx	r3
   16c2a:	4a15      	ldr	r2, [pc, #84]	; (16c80 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   16c2c:	4915      	ldr	r1, [pc, #84]	; (16c84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   16c2e:	4812      	ldr	r0, [pc, #72]	; (16c78 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   16c30:	4b15      	ldr	r3, [pc, #84]	; (16c88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   16c32:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   16c34:	4915      	ldr	r1, [pc, #84]	; (16c8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   16c36:	4816      	ldr	r0, [pc, #88]	; (16c90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   16c38:	4b10      	ldr	r3, [pc, #64]	; (16c7c <_Z41__static_initialization_and_destruction_0ii+0x74>)
   16c3a:	4798      	blx	r3
   16c3c:	4a10      	ldr	r2, [pc, #64]	; (16c80 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   16c3e:	4911      	ldr	r1, [pc, #68]	; (16c84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   16c40:	4813      	ldr	r0, [pc, #76]	; (16c90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   16c42:	4b11      	ldr	r3, [pc, #68]	; (16c88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   16c44:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
   16c46:	4913      	ldr	r1, [pc, #76]	; (16c94 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   16c48:	4813      	ldr	r0, [pc, #76]	; (16c98 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   16c4a:	4b0c      	ldr	r3, [pc, #48]	; (16c7c <_Z41__static_initialization_and_destruction_0ii+0x74>)
   16c4c:	4798      	blx	r3
   16c4e:	4a0c      	ldr	r2, [pc, #48]	; (16c80 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   16c50:	490c      	ldr	r1, [pc, #48]	; (16c84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   16c52:	4811      	ldr	r0, [pc, #68]	; (16c98 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   16c54:	4b0c      	ldr	r3, [pc, #48]	; (16c88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   16c56:	4798      	blx	r3
   16c58:	4910      	ldr	r1, [pc, #64]	; (16c9c <_Z41__static_initialization_and_destruction_0ii+0x94>)
   16c5a:	4811      	ldr	r0, [pc, #68]	; (16ca0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   16c5c:	4b07      	ldr	r3, [pc, #28]	; (16c7c <_Z41__static_initialization_and_destruction_0ii+0x74>)
   16c5e:	4798      	blx	r3
   16c60:	4a07      	ldr	r2, [pc, #28]	; (16c80 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   16c62:	4908      	ldr	r1, [pc, #32]	; (16c84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   16c64:	480e      	ldr	r0, [pc, #56]	; (16ca0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   16c66:	4b08      	ldr	r3, [pc, #32]	; (16c88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   16c68:	4798      	blx	r3
   16c6a:	bf00      	nop
   16c6c:	3708      	adds	r7, #8
   16c6e:	46bd      	mov	sp, r7
   16c70:	bd80      	pop	{r7, pc}
   16c72:	bf00      	nop
   16c74:	2000a1c4 	.word	0x2000a1c4
   16c78:	20009e04 	.word	0x20009e04
   16c7c:	000168c9 	.word	0x000168c9
   16c80:	20000000 	.word	0x20000000
   16c84:	000168f9 	.word	0x000168f9
   16c88:	000187f1 	.word	0x000187f1
   16c8c:	2000a2d8 	.word	0x2000a2d8
   16c90:	20009e24 	.word	0x20009e24
   16c94:	2000a1e0 	.word	0x2000a1e0
   16c98:	20009e44 	.word	0x20009e44
   16c9c:	2000a240 	.word	0x2000a240
   16ca0:	20009e64 	.word	0x20009e64

00016ca4 <_GLOBAL__sub_I_ptrTimerClass>:
   16ca4:	b580      	push	{r7, lr}
   16ca6:	af00      	add	r7, sp, #0
   16ca8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16cac:	2001      	movs	r0, #1
   16cae:	4b01      	ldr	r3, [pc, #4]	; (16cb4 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   16cb0:	4798      	blx	r3
   16cb2:	bd80      	pop	{r7, pc}
   16cb4:	00016c09 	.word	0x00016c09

00016cb8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   16cb8:	b480      	push	{r7}
   16cba:	b083      	sub	sp, #12
   16cbc:	af00      	add	r7, sp, #0
   16cbe:	6078      	str	r0, [r7, #4]
   16cc0:	4a05      	ldr	r2, [pc, #20]	; (16cd8 <_ZN5PrintC1Ev+0x20>)
   16cc2:	687b      	ldr	r3, [r7, #4]
   16cc4:	601a      	str	r2, [r3, #0]
   16cc6:	687b      	ldr	r3, [r7, #4]
   16cc8:	2200      	movs	r2, #0
   16cca:	605a      	str	r2, [r3, #4]
   16ccc:	687b      	ldr	r3, [r7, #4]
   16cce:	4618      	mov	r0, r3
   16cd0:	370c      	adds	r7, #12
   16cd2:	46bd      	mov	sp, r7
   16cd4:	bc80      	pop	{r7}
   16cd6:	4770      	bx	lr
   16cd8:	00020b58 	.word	0x00020b58

00016cdc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   16cdc:	b480      	push	{r7}
   16cde:	b083      	sub	sp, #12
   16ce0:	af00      	add	r7, sp, #0
   16ce2:	6078      	str	r0, [r7, #4]
   16ce4:	2300      	movs	r3, #0
   16ce6:	4618      	mov	r0, r3
   16ce8:	370c      	adds	r7, #12
   16cea:	46bd      	mov	sp, r7
   16cec:	bc80      	pop	{r7}
   16cee:	4770      	bx	lr

00016cf0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   16cf0:	b480      	push	{r7}
   16cf2:	b083      	sub	sp, #12
   16cf4:	af00      	add	r7, sp, #0
   16cf6:	6078      	str	r0, [r7, #4]
   16cf8:	bf00      	nop
   16cfa:	370c      	adds	r7, #12
   16cfc:	46bd      	mov	sp, r7
   16cfe:	bc80      	pop	{r7}
   16d00:	4770      	bx	lr
	...

00016d04 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   16d04:	b580      	push	{r7, lr}
   16d06:	b082      	sub	sp, #8
   16d08:	af00      	add	r7, sp, #0
   16d0a:	6078      	str	r0, [r7, #4]
   16d0c:	687b      	ldr	r3, [r7, #4]
   16d0e:	4618      	mov	r0, r3
   16d10:	4b06      	ldr	r3, [pc, #24]	; (16d2c <_ZN6StreamC1Ev+0x28>)
   16d12:	4798      	blx	r3
   16d14:	4a06      	ldr	r2, [pc, #24]	; (16d30 <_ZN6StreamC1Ev+0x2c>)
   16d16:	687b      	ldr	r3, [r7, #4]
   16d18:	601a      	str	r2, [r3, #0]
   16d1a:	687b      	ldr	r3, [r7, #4]
   16d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16d20:	609a      	str	r2, [r3, #8]
   16d22:	687b      	ldr	r3, [r7, #4]
   16d24:	4618      	mov	r0, r3
   16d26:	3708      	adds	r7, #8
   16d28:	46bd      	mov	sp, r7
   16d2a:	bd80      	pop	{r7, pc}
   16d2c:	00016cb9 	.word	0x00016cb9
   16d30:	00020b1c 	.word	0x00020b1c

00016d34 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   16d34:	b480      	push	{r7}
   16d36:	b083      	sub	sp, #12
   16d38:	af00      	add	r7, sp, #0
   16d3a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   16d3c:	4b06      	ldr	r3, [pc, #24]	; (16d58 <_ZL10USBTimeoutPK10timer_task+0x24>)
   16d3e:	681b      	ldr	r3, [r3, #0]
   16d40:	2201      	movs	r2, #1
   16d42:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   16d44:	4b04      	ldr	r3, [pc, #16]	; (16d58 <_ZL10USBTimeoutPK10timer_task+0x24>)
   16d46:	681b      	ldr	r3, [r3, #0]
   16d48:	2200      	movs	r2, #0
   16d4a:	741a      	strb	r2, [r3, #16]
	
}
   16d4c:	bf00      	nop
   16d4e:	370c      	adds	r7, #12
   16d50:	46bd      	mov	sp, r7
   16d52:	bc80      	pop	{r7}
   16d54:	4770      	bx	lr
   16d56:	bf00      	nop
   16d58:	20009e84 	.word	0x20009e84

00016d5c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   16d5c:	b480      	push	{r7}
   16d5e:	b083      	sub	sp, #12
   16d60:	af00      	add	r7, sp, #0
   16d62:	4603      	mov	r3, r0
   16d64:	603a      	str	r2, [r7, #0]
   16d66:	71fb      	strb	r3, [r7, #7]
   16d68:	460b      	mov	r3, r1
   16d6a:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   16d6c:	4b08      	ldr	r3, [pc, #32]	; (16d90 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   16d6e:	681b      	ldr	r3, [r3, #0]
   16d70:	2201      	movs	r2, #1
   16d72:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   16d74:	4b06      	ldr	r3, [pc, #24]	; (16d90 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   16d76:	681b      	ldr	r3, [r3, #0]
   16d78:	2201      	movs	r2, #1
   16d7a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   16d7c:	4b04      	ldr	r3, [pc, #16]	; (16d90 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   16d7e:	681b      	ldr	r3, [r3, #0]
   16d80:	2201      	movs	r2, #1
   16d82:	741a      	strb	r2, [r3, #16]


	return false;
   16d84:	2300      	movs	r3, #0
}
   16d86:	4618      	mov	r0, r3
   16d88:	370c      	adds	r7, #12
   16d8a:	46bd      	mov	sp, r7
   16d8c:	bc80      	pop	{r7}
   16d8e:	4770      	bx	lr
   16d90:	20009e84 	.word	0x20009e84

00016d94 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   16d94:	b480      	push	{r7}
   16d96:	b083      	sub	sp, #12
   16d98:	af00      	add	r7, sp, #0
   16d9a:	4603      	mov	r3, r0
   16d9c:	603a      	str	r2, [r7, #0]
   16d9e:	71fb      	strb	r3, [r7, #7]
   16da0:	460b      	mov	r3, r1
   16da2:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   16da4:	4b08      	ldr	r3, [pc, #32]	; (16dc8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   16da6:	681b      	ldr	r3, [r3, #0]
   16da8:	2201      	movs	r2, #1
   16daa:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   16dac:	4b06      	ldr	r3, [pc, #24]	; (16dc8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   16dae:	681b      	ldr	r3, [r3, #0]
   16db0:	2201      	movs	r2, #1
   16db2:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   16db4:	4b04      	ldr	r3, [pc, #16]	; (16dc8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   16db6:	681b      	ldr	r3, [r3, #0]
   16db8:	2201      	movs	r2, #1
   16dba:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   16dbc:	2300      	movs	r3, #0
}
   16dbe:	4618      	mov	r0, r3
   16dc0:	370c      	adds	r7, #12
   16dc2:	46bd      	mov	sp, r7
   16dc4:	bc80      	pop	{r7}
   16dc6:	4770      	bx	lr
   16dc8:	20009e84 	.word	0x20009e84

00016dcc <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   16dcc:	b580      	push	{r7, lr}
   16dce:	b082      	sub	sp, #8
   16dd0:	af00      	add	r7, sp, #0
   16dd2:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   16dd4:	793b      	ldrb	r3, [r7, #4]
   16dd6:	f003 0301 	and.w	r3, r3, #1
   16dda:	b2db      	uxtb	r3, r3
   16ddc:	2b00      	cmp	r3, #0
   16dde:	d013      	beq.n	16e08 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   16de0:	490c      	ldr	r1, [pc, #48]	; (16e14 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   16de2:	2000      	movs	r0, #0
   16de4:	4b0c      	ldr	r3, [pc, #48]	; (16e18 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   16de6:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   16de8:	490c      	ldr	r1, [pc, #48]	; (16e1c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   16dea:	2001      	movs	r0, #1
   16dec:	4b0a      	ldr	r3, [pc, #40]	; (16e18 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   16dee:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   16df0:	4b0b      	ldr	r3, [pc, #44]	; (16e20 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   16df2:	681b      	ldr	r3, [r3, #0]
   16df4:	2201      	movs	r2, #1
   16df6:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   16df8:	4b09      	ldr	r3, [pc, #36]	; (16e20 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   16dfa:	681b      	ldr	r3, [r3, #0]
   16dfc:	2201      	movs	r2, #1
   16dfe:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   16e00:	4b07      	ldr	r3, [pc, #28]	; (16e20 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   16e02:	681b      	ldr	r3, [r3, #0]
   16e04:	2201      	movs	r2, #1
   16e06:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   16e08:	2300      	movs	r3, #0
}
   16e0a:	4618      	mov	r0, r3
   16e0c:	3708      	adds	r7, #8
   16e0e:	46bd      	mov	sp, r7
   16e10:	bd80      	pop	{r7, pc}
   16e12:	bf00      	nop
   16e14:	00016d5d 	.word	0x00016d5d
   16e18:	0001130d 	.word	0x0001130d
   16e1c:	00016d95 	.word	0x00016d95
   16e20:	20009e84 	.word	0x20009e84

00016e24 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   16e24:	b580      	push	{r7, lr}
   16e26:	b082      	sub	sp, #8
   16e28:	af00      	add	r7, sp, #0
   16e2a:	6078      	str	r0, [r7, #4]
   16e2c:	687b      	ldr	r3, [r7, #4]
   16e2e:	4618      	mov	r0, r3
   16e30:	4b0a      	ldr	r3, [pc, #40]	; (16e5c <_ZN9CDC_ClassC1Ev+0x38>)
   16e32:	4798      	blx	r3
   16e34:	687b      	ldr	r3, [r7, #4]
   16e36:	3310      	adds	r3, #16
   16e38:	4618      	mov	r0, r3
   16e3a:	4b09      	ldr	r3, [pc, #36]	; (16e60 <_ZN9CDC_ClassC1Ev+0x3c>)
   16e3c:	4798      	blx	r3
   16e3e:	4a09      	ldr	r2, [pc, #36]	; (16e64 <_ZN9CDC_ClassC1Ev+0x40>)
   16e40:	687b      	ldr	r3, [r7, #4]
   16e42:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   16e44:	687b      	ldr	r3, [r7, #4]
   16e46:	f04f 32ff 	mov.w	r2, #4294967295
   16e4a:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   16e4c:	4a06      	ldr	r2, [pc, #24]	; (16e68 <_ZN9CDC_ClassC1Ev+0x44>)
   16e4e:	687b      	ldr	r3, [r7, #4]
   16e50:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   16e52:	687b      	ldr	r3, [r7, #4]
   16e54:	4618      	mov	r0, r3
   16e56:	3708      	adds	r7, #8
   16e58:	46bd      	mov	sp, r7
   16e5a:	bd80      	pop	{r7, pc}
   16e5c:	00016d05 	.word	0x00016d05
   16e60:	000176b5 	.word	0x000176b5
   16e64:	00020aec 	.word	0x00020aec
   16e68:	20009e84 	.word	0x20009e84

00016e6c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   16e6c:	b580      	push	{r7, lr}
   16e6e:	b082      	sub	sp, #8
   16e70:	af00      	add	r7, sp, #0
   16e72:	6078      	str	r0, [r7, #4]
   16e74:	4a06      	ldr	r2, [pc, #24]	; (16e90 <_ZN9CDC_ClassD1Ev+0x24>)
   16e76:	687b      	ldr	r3, [r7, #4]
   16e78:	601a      	str	r2, [r3, #0]
   16e7a:	687b      	ldr	r3, [r7, #4]
   16e7c:	3310      	adds	r3, #16
   16e7e:	4618      	mov	r0, r3
   16e80:	4b04      	ldr	r3, [pc, #16]	; (16e94 <_ZN9CDC_ClassD1Ev+0x28>)
   16e82:	4798      	blx	r3
{
} //~CDC_Class
   16e84:	687b      	ldr	r3, [r7, #4]
   16e86:	4618      	mov	r0, r3
   16e88:	3708      	adds	r7, #8
   16e8a:	46bd      	mov	sp, r7
   16e8c:	bd80      	pop	{r7, pc}
   16e8e:	bf00      	nop
   16e90:	00020aec 	.word	0x00020aec
   16e94:	000176d5 	.word	0x000176d5

00016e98 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   16e98:	b580      	push	{r7, lr}
   16e9a:	b082      	sub	sp, #8
   16e9c:	af00      	add	r7, sp, #0
   16e9e:	6078      	str	r0, [r7, #4]
	
	OnInit();
   16ea0:	687b      	ldr	r3, [r7, #4]
   16ea2:	3310      	adds	r3, #16
   16ea4:	4618      	mov	r0, r3
   16ea6:	4b07      	ldr	r3, [pc, #28]	; (16ec4 <_ZN9CDC_Class4InitEv+0x2c>)
   16ea8:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   16eaa:	4907      	ldr	r1, [pc, #28]	; (16ec8 <_ZN9CDC_Class4InitEv+0x30>)
   16eac:	2003      	movs	r0, #3
   16eae:	4b07      	ldr	r3, [pc, #28]	; (16ecc <_ZN9CDC_Class4InitEv+0x34>)
   16eb0:	4798      	blx	r3
	
		
	if (connected)
   16eb2:	687b      	ldr	r3, [r7, #4]
   16eb4:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
   16eb6:	20c8      	movs	r0, #200	; 0xc8
   16eb8:	4b05      	ldr	r3, [pc, #20]	; (16ed0 <_ZN9CDC_Class4InitEv+0x38>)
   16eba:	4798      	blx	r3

	

}
   16ebc:	bf00      	nop
   16ebe:	3708      	adds	r7, #8
   16ec0:	46bd      	mov	sp, r7
   16ec2:	bd80      	pop	{r7, pc}
   16ec4:	000176e9 	.word	0x000176e9
   16ec8:	00016dcd 	.word	0x00016dcd
   16ecc:	0001130d 	.word	0x0001130d
   16ed0:	00006021 	.word	0x00006021

00016ed4 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   16ed4:	b580      	push	{r7, lr}
   16ed6:	b082      	sub	sp, #8
   16ed8:	af00      	add	r7, sp, #0
   16eda:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   16edc:	4b03      	ldr	r3, [pc, #12]	; (16eec <_ZN9CDC_Class9IsEnabledEv+0x18>)
   16ede:	4798      	blx	r3
   16ee0:	4603      	mov	r3, r0
	
}
   16ee2:	4618      	mov	r0, r3
   16ee4:	3708      	adds	r7, #8
   16ee6:	46bd      	mov	sp, r7
   16ee8:	bd80      	pop	{r7, pc}
   16eea:	bf00      	nop
   16eec:	00011385 	.word	0x00011385

00016ef0 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   16ef0:	b580      	push	{r7, lr}
   16ef2:	b084      	sub	sp, #16
   16ef4:	af00      	add	r7, sp, #0
   16ef6:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   16ef8:	687b      	ldr	r3, [r7, #4]
   16efa:	699b      	ldr	r3, [r3, #24]
   16efc:	f1b3 3fff 	cmp.w	r3, #4294967295
   16f00:	bf14      	ite	ne
   16f02:	2301      	movne	r3, #1
   16f04:	2300      	moveq	r3, #0
   16f06:	b2db      	uxtb	r3, r3
   16f08:	2b00      	cmp	r3, #0
   16f0a:	d002      	beq.n	16f12 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   16f0c:	687b      	ldr	r3, [r7, #4]
   16f0e:	699b      	ldr	r3, [r3, #24]
   16f10:	e011      	b.n	16f36 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   16f12:	687b      	ldr	r3, [r7, #4]
   16f14:	681b      	ldr	r3, [r3, #0]
   16f16:	331c      	adds	r3, #28
   16f18:	681b      	ldr	r3, [r3, #0]
   16f1a:	f107 010f 	add.w	r1, r7, #15
   16f1e:	2201      	movs	r2, #1
   16f20:	6878      	ldr	r0, [r7, #4]
   16f22:	4798      	blx	r3
   16f24:	4602      	mov	r2, r0
   16f26:	687b      	ldr	r3, [r7, #4]
   16f28:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   16f2a:	7bfb      	ldrb	r3, [r7, #15]
   16f2c:	461a      	mov	r2, r3
   16f2e:	687b      	ldr	r3, [r7, #4]
   16f30:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   16f32:	687b      	ldr	r3, [r7, #4]
   16f34:	699b      	ldr	r3, [r3, #24]
}
   16f36:	4618      	mov	r0, r3
   16f38:	3710      	adds	r7, #16
   16f3a:	46bd      	mov	sp, r7
   16f3c:	bd80      	pop	{r7, pc}
	...

00016f40 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   16f40:	b580      	push	{r7, lr}
   16f42:	b086      	sub	sp, #24
   16f44:	af00      	add	r7, sp, #0
   16f46:	60f8      	str	r0, [r7, #12]
   16f48:	60b9      	str	r1, [r7, #8]
   16f4a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   16f4c:	68fb      	ldr	r3, [r7, #12]
   16f4e:	7c1b      	ldrb	r3, [r3, #16]
   16f50:	b2db      	uxtb	r3, r3
   16f52:	2b00      	cmp	r3, #0
   16f54:	d02e      	beq.n	16fb4 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   16f56:	687a      	ldr	r2, [r7, #4]
   16f58:	4613      	mov	r3, r2
   16f5a:	009b      	lsls	r3, r3, #2
   16f5c:	4413      	add	r3, r2
   16f5e:	005b      	lsls	r3, r3, #1
   16f60:	461a      	mov	r2, r3
   16f62:	4918      	ldr	r1, [pc, #96]	; (16fc4 <_ZN9CDC_Class8readDataEPvl+0x84>)
   16f64:	4818      	ldr	r0, [pc, #96]	; (16fc8 <_ZN9CDC_Class8readDataEPvl+0x88>)
   16f66:	4b19      	ldr	r3, [pc, #100]	; (16fcc <_ZN9CDC_Class8readDataEPvl+0x8c>)
   16f68:	4798      	blx	r3
		rxReady=false;
   16f6a:	68fb      	ldr	r3, [r7, #12]
   16f6c:	2200      	movs	r2, #0
   16f6e:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   16f70:	687b      	ldr	r3, [r7, #4]
   16f72:	4619      	mov	r1, r3
   16f74:	68b8      	ldr	r0, [r7, #8]
   16f76:	4b16      	ldr	r3, [pc, #88]	; (16fd0 <_ZN9CDC_Class8readDataEPvl+0x90>)
   16f78:	4798      	blx	r3
   16f7a:	4603      	mov	r3, r0
   16f7c:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   16f7e:	68fb      	ldr	r3, [r7, #12]
   16f80:	7d5b      	ldrb	r3, [r3, #21]
   16f82:	b2db      	uxtb	r3, r3
   16f84:	f083 0301 	eor.w	r3, r3, #1
   16f88:	b2db      	uxtb	r3, r3
   16f8a:	2b00      	cmp	r3, #0
   16f8c:	d006      	beq.n	16f9c <_ZN9CDC_Class8readDataEPvl+0x5c>
   16f8e:	68fb      	ldr	r3, [r7, #12]
   16f90:	7c1b      	ldrb	r3, [r3, #16]
   16f92:	b2db      	uxtb	r3, r3
   16f94:	2b00      	cmp	r3, #0
   16f96:	d001      	beq.n	16f9c <_ZN9CDC_Class8readDataEPvl+0x5c>
   16f98:	2301      	movs	r3, #1
   16f9a:	e000      	b.n	16f9e <_ZN9CDC_Class8readDataEPvl+0x5e>
   16f9c:	2300      	movs	r3, #0
   16f9e:	2b00      	cmp	r3, #0
   16fa0:	d000      	beq.n	16fa4 <_ZN9CDC_Class8readDataEPvl+0x64>
   16fa2:	e7ec      	b.n	16f7e <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   16fa4:	4808      	ldr	r0, [pc, #32]	; (16fc8 <_ZN9CDC_Class8readDataEPvl+0x88>)
   16fa6:	4b0b      	ldr	r3, [pc, #44]	; (16fd4 <_ZN9CDC_Class8readDataEPvl+0x94>)
   16fa8:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   16faa:	4906      	ldr	r1, [pc, #24]	; (16fc4 <_ZN9CDC_Class8readDataEPvl+0x84>)
   16fac:	4806      	ldr	r0, [pc, #24]	; (16fc8 <_ZN9CDC_Class8readDataEPvl+0x88>)
   16fae:	4b0a      	ldr	r3, [pc, #40]	; (16fd8 <_ZN9CDC_Class8readDataEPvl+0x98>)
   16fb0:	4798      	blx	r3
   16fb2:	e001      	b.n	16fb8 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   16fb4:	2300      	movs	r3, #0
   16fb6:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   16fb8:	7dfb      	ldrb	r3, [r7, #23]
}
   16fba:	4618      	mov	r0, r3
   16fbc:	3718      	adds	r7, #24
   16fbe:	46bd      	mov	sp, r7
   16fc0:	bd80      	pop	{r7, pc}
   16fc2:	bf00      	nop
   16fc4:	00016d35 	.word	0x00016d35
   16fc8:	20009f40 	.word	0x20009f40
   16fcc:	00017955 	.word	0x00017955
   16fd0:	00011261 	.word	0x00011261
   16fd4:	00017875 	.word	0x00017875
   16fd8:	000179b9 	.word	0x000179b9

00016fdc <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   16fdc:	b580      	push	{r7, lr}
   16fde:	b086      	sub	sp, #24
   16fe0:	af00      	add	r7, sp, #0
   16fe2:	60f8      	str	r0, [r7, #12]
   16fe4:	60b9      	str	r1, [r7, #8]
   16fe6:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   16fe8:	68fb      	ldr	r3, [r7, #12]
   16fea:	2200      	movs	r2, #0
   16fec:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   16fee:	687b      	ldr	r3, [r7, #4]
   16ff0:	4619      	mov	r1, r3
   16ff2:	68b8      	ldr	r0, [r7, #8]
   16ff4:	4b04      	ldr	r3, [pc, #16]	; (17008 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   16ff6:	4798      	blx	r3
   16ff8:	4603      	mov	r3, r0
   16ffa:	617b      	str	r3, [r7, #20]
	return r;
   16ffc:	697b      	ldr	r3, [r7, #20]
}
   16ffe:	4618      	mov	r0, r3
   17000:	3718      	adds	r7, #24
   17002:	46bd      	mov	sp, r7
   17004:	bd80      	pop	{r7, pc}
   17006:	bf00      	nop
   17008:	00011261 	.word	0x00011261

0001700c <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   1700c:	b580      	push	{r7, lr}
   1700e:	b084      	sub	sp, #16
   17010:	af00      	add	r7, sp, #0
   17012:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   17014:	687b      	ldr	r3, [r7, #4]
   17016:	2200      	movs	r2, #0
   17018:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   1701a:	f107 030f 	add.w	r3, r7, #15
   1701e:	2101      	movs	r1, #1
   17020:	4618      	mov	r0, r3
   17022:	4b08      	ldr	r3, [pc, #32]	; (17044 <_ZN9CDC_Class4readEv+0x38>)
   17024:	4798      	blx	r3
	while(!rxReady);
   17026:	687b      	ldr	r3, [r7, #4]
   17028:	7d5b      	ldrb	r3, [r3, #21]
   1702a:	b2db      	uxtb	r3, r3
   1702c:	f083 0301 	eor.w	r3, r3, #1
   17030:	b2db      	uxtb	r3, r3
   17032:	2b00      	cmp	r3, #0
   17034:	d000      	beq.n	17038 <_ZN9CDC_Class4readEv+0x2c>
   17036:	e7f6      	b.n	17026 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   17038:	7bfb      	ldrb	r3, [r7, #15]
}
   1703a:	4618      	mov	r0, r3
   1703c:	3710      	adds	r7, #16
   1703e:	46bd      	mov	sp, r7
   17040:	bd80      	pop	{r7, pc}
   17042:	bf00      	nop
   17044:	00011261 	.word	0x00011261

00017048 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   17048:	b580      	push	{r7, lr}
   1704a:	b082      	sub	sp, #8
   1704c:	af00      	add	r7, sp, #0
   1704e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   17050:	687b      	ldr	r3, [r7, #4]
   17052:	331c      	adds	r3, #28
   17054:	2140      	movs	r1, #64	; 0x40
   17056:	4618      	mov	r0, r3
   17058:	4b02      	ldr	r3, [pc, #8]	; (17064 <_ZN9CDC_Class5flushEv+0x1c>)
   1705a:	4798      	blx	r3
}
   1705c:	bf00      	nop
   1705e:	3708      	adds	r7, #8
   17060:	46bd      	mov	sp, r7
   17062:	bd80      	pop	{r7, pc}
   17064:	000112a5 	.word	0x000112a5

00017068 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   17068:	b580      	push	{r7, lr}
   1706a:	b082      	sub	sp, #8
   1706c:	af00      	add	r7, sp, #0
   1706e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   17070:	4b02      	ldr	r3, [pc, #8]	; (1707c <_ZN9CDC_Class5clearEv+0x14>)
   17072:	4798      	blx	r3
}
   17074:	bf00      	nop
   17076:	3708      	adds	r7, #8
   17078:	46bd      	mov	sp, r7
   1707a:	bd80      	pop	{r7, pc}
   1707c:	000112e9 	.word	0x000112e9

00017080 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   17080:	b580      	push	{r7, lr}
   17082:	b082      	sub	sp, #8
   17084:	af00      	add	r7, sp, #0
   17086:	6078      	str	r0, [r7, #4]
   17088:	460b      	mov	r3, r1
   1708a:	70fb      	strb	r3, [r7, #3]
	if (connected){
   1708c:	687b      	ldr	r3, [r7, #4]
   1708e:	7c1b      	ldrb	r3, [r3, #16]
   17090:	b2db      	uxtb	r3, r3
   17092:	2b00      	cmp	r3, #0
   17094:	d012      	beq.n	170bc <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   17096:	687b      	ldr	r3, [r7, #4]
   17098:	7d1b      	ldrb	r3, [r3, #20]
   1709a:	b2db      	uxtb	r3, r3
   1709c:	f083 0301 	eor.w	r3, r3, #1
   170a0:	b2db      	uxtb	r3, r3
   170a2:	2b00      	cmp	r3, #0
   170a4:	d000      	beq.n	170a8 <_ZN9CDC_Class5writeEh+0x28>
   170a6:	e7f6      	b.n	17096 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   170a8:	687b      	ldr	r3, [r7, #4]
   170aa:	681b      	ldr	r3, [r3, #0]
   170ac:	3324      	adds	r3, #36	; 0x24
   170ae:	681b      	ldr	r3, [r3, #0]
   170b0:	1cf9      	adds	r1, r7, #3
   170b2:	2201      	movs	r2, #1
   170b4:	6878      	ldr	r0, [r7, #4]
   170b6:	4798      	blx	r3
   170b8:	4603      	mov	r3, r0
   170ba:	e000      	b.n	170be <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   170bc:	2300      	movs	r3, #0
	}
		
}
   170be:	4618      	mov	r0, r3
   170c0:	3708      	adds	r7, #8
   170c2:	46bd      	mov	sp, r7
   170c4:	bd80      	pop	{r7, pc}
	...

000170c8 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   170c8:	b580      	push	{r7, lr}
   170ca:	b086      	sub	sp, #24
   170cc:	af00      	add	r7, sp, #0
   170ce:	60f8      	str	r0, [r7, #12]
   170d0:	60b9      	str	r1, [r7, #8]
   170d2:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   170d4:	68fb      	ldr	r3, [r7, #12]
   170d6:	7c1b      	ldrb	r3, [r3, #16]
   170d8:	b2db      	uxtb	r3, r3
   170da:	2b00      	cmp	r3, #0
   170dc:	d02f      	beq.n	1713e <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   170de:	687a      	ldr	r2, [r7, #4]
   170e0:	4613      	mov	r3, r2
   170e2:	009b      	lsls	r3, r3, #2
   170e4:	4413      	add	r3, r2
   170e6:	005b      	lsls	r3, r3, #1
   170e8:	461a      	mov	r2, r3
   170ea:	4917      	ldr	r1, [pc, #92]	; (17148 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   170ec:	4817      	ldr	r0, [pc, #92]	; (1714c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   170ee:	4b18      	ldr	r3, [pc, #96]	; (17150 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   170f0:	4798      	blx	r3
		txReady=false;
   170f2:	68fb      	ldr	r3, [r7, #12]
   170f4:	2200      	movs	r2, #0
   170f6:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   170f8:	687b      	ldr	r3, [r7, #4]
   170fa:	4619      	mov	r1, r3
   170fc:	68b8      	ldr	r0, [r7, #8]
   170fe:	4b15      	ldr	r3, [pc, #84]	; (17154 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   17100:	4798      	blx	r3
   17102:	4603      	mov	r3, r0
   17104:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   17106:	68fb      	ldr	r3, [r7, #12]
   17108:	7d1b      	ldrb	r3, [r3, #20]
   1710a:	b2db      	uxtb	r3, r3
   1710c:	f083 0301 	eor.w	r3, r3, #1
   17110:	b2db      	uxtb	r3, r3
   17112:	2b00      	cmp	r3, #0
   17114:	d006      	beq.n	17124 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   17116:	68fb      	ldr	r3, [r7, #12]
   17118:	7c1b      	ldrb	r3, [r3, #16]
   1711a:	b2db      	uxtb	r3, r3
   1711c:	2b00      	cmp	r3, #0
   1711e:	d001      	beq.n	17124 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   17120:	2301      	movs	r3, #1
   17122:	e000      	b.n	17126 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   17124:	2300      	movs	r3, #0
   17126:	2b00      	cmp	r3, #0
   17128:	d000      	beq.n	1712c <_ZN9CDC_Class9writeDataEPKvl+0x64>
   1712a:	e7ec      	b.n	17106 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   1712c:	4807      	ldr	r0, [pc, #28]	; (1714c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   1712e:	4b0a      	ldr	r3, [pc, #40]	; (17158 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   17130:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   17132:	4905      	ldr	r1, [pc, #20]	; (17148 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   17134:	4805      	ldr	r0, [pc, #20]	; (1714c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   17136:	4b09      	ldr	r3, [pc, #36]	; (1715c <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   17138:	4798      	blx	r3
		return r;
   1713a:	697b      	ldr	r3, [r7, #20]
   1713c:	e000      	b.n	17140 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   1713e:	2300      	movs	r3, #0
	}
	

}
   17140:	4618      	mov	r0, r3
   17142:	3718      	adds	r7, #24
   17144:	46bd      	mov	sp, r7
   17146:	bd80      	pop	{r7, pc}
   17148:	00016d35 	.word	0x00016d35
   1714c:	20009f40 	.word	0x20009f40
   17150:	00017955 	.word	0x00017955
   17154:	000112a5 	.word	0x000112a5
   17158:	00017875 	.word	0x00017875
   1715c:	000179b9 	.word	0x000179b9

00017160 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   17160:	b580      	push	{r7, lr}
   17162:	b086      	sub	sp, #24
   17164:	af00      	add	r7, sp, #0
   17166:	60f8      	str	r0, [r7, #12]
   17168:	60b9      	str	r1, [r7, #8]
   1716a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   1716c:	68fb      	ldr	r3, [r7, #12]
   1716e:	2200      	movs	r2, #0
   17170:	751a      	strb	r2, [r3, #20]

 	if (connected){
   17172:	68fb      	ldr	r3, [r7, #12]
   17174:	7c1b      	ldrb	r3, [r3, #16]
   17176:	b2db      	uxtb	r3, r3
   17178:	2b00      	cmp	r3, #0
   1717a:	d02a      	beq.n	171d2 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   1717c:	687a      	ldr	r2, [r7, #4]
   1717e:	4613      	mov	r3, r2
   17180:	009b      	lsls	r3, r3, #2
   17182:	4413      	add	r3, r2
   17184:	005b      	lsls	r3, r3, #1
   17186:	461a      	mov	r2, r3
   17188:	4915      	ldr	r1, [pc, #84]	; (171e0 <_ZN9CDC_Class5writeEPKhj+0x80>)
   1718a:	4816      	ldr	r0, [pc, #88]	; (171e4 <_ZN9CDC_Class5writeEPKhj+0x84>)
   1718c:	4b16      	ldr	r3, [pc, #88]	; (171e8 <_ZN9CDC_Class5writeEPKhj+0x88>)
   1718e:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   17190:	6879      	ldr	r1, [r7, #4]
   17192:	68b8      	ldr	r0, [r7, #8]
   17194:	4b15      	ldr	r3, [pc, #84]	; (171ec <_ZN9CDC_Class5writeEPKhj+0x8c>)
   17196:	4798      	blx	r3
   17198:	4603      	mov	r3, r0
   1719a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   1719c:	68fb      	ldr	r3, [r7, #12]
   1719e:	7d1b      	ldrb	r3, [r3, #20]
   171a0:	b2db      	uxtb	r3, r3
   171a2:	f083 0301 	eor.w	r3, r3, #1
   171a6:	b2db      	uxtb	r3, r3
   171a8:	2b00      	cmp	r3, #0
   171aa:	d006      	beq.n	171ba <_ZN9CDC_Class5writeEPKhj+0x5a>
   171ac:	68fb      	ldr	r3, [r7, #12]
   171ae:	7c1b      	ldrb	r3, [r3, #16]
   171b0:	b2db      	uxtb	r3, r3
   171b2:	2b00      	cmp	r3, #0
   171b4:	d001      	beq.n	171ba <_ZN9CDC_Class5writeEPKhj+0x5a>
   171b6:	2301      	movs	r3, #1
   171b8:	e000      	b.n	171bc <_ZN9CDC_Class5writeEPKhj+0x5c>
   171ba:	2300      	movs	r3, #0
   171bc:	2b00      	cmp	r3, #0
   171be:	d000      	beq.n	171c2 <_ZN9CDC_Class5writeEPKhj+0x62>
   171c0:	e7ec      	b.n	1719c <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   171c2:	4808      	ldr	r0, [pc, #32]	; (171e4 <_ZN9CDC_Class5writeEPKhj+0x84>)
   171c4:	4b0a      	ldr	r3, [pc, #40]	; (171f0 <_ZN9CDC_Class5writeEPKhj+0x90>)
   171c6:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   171c8:	4905      	ldr	r1, [pc, #20]	; (171e0 <_ZN9CDC_Class5writeEPKhj+0x80>)
   171ca:	4806      	ldr	r0, [pc, #24]	; (171e4 <_ZN9CDC_Class5writeEPKhj+0x84>)
   171cc:	4b09      	ldr	r3, [pc, #36]	; (171f4 <_ZN9CDC_Class5writeEPKhj+0x94>)
   171ce:	4798      	blx	r3
   171d0:	e001      	b.n	171d6 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   171d2:	2300      	movs	r3, #0
   171d4:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   171d6:	697b      	ldr	r3, [r7, #20]
}
   171d8:	4618      	mov	r0, r3
   171da:	3718      	adds	r7, #24
   171dc:	46bd      	mov	sp, r7
   171de:	bd80      	pop	{r7, pc}
   171e0:	00016d35 	.word	0x00016d35
   171e4:	20009f40 	.word	0x20009f40
   171e8:	00017955 	.word	0x00017955
   171ec:	000112a5 	.word	0x000112a5
   171f0:	00017875 	.word	0x00017875
   171f4:	000179b9 	.word	0x000179b9

000171f8 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   171f8:	b480      	push	{r7}
   171fa:	b083      	sub	sp, #12
   171fc:	af00      	add	r7, sp, #0
   171fe:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   17200:	687b      	ldr	r3, [r7, #4]
   17202:	7d5b      	ldrb	r3, [r3, #21]
   17204:	b2db      	uxtb	r3, r3
   17206:	2b00      	cmp	r3, #0
   17208:	d006      	beq.n	17218 <_ZN9CDC_Class9availableEv+0x20>
   1720a:	687b      	ldr	r3, [r7, #4]
   1720c:	7d1b      	ldrb	r3, [r3, #20]
   1720e:	b2db      	uxtb	r3, r3
   17210:	2b00      	cmp	r3, #0
   17212:	d001      	beq.n	17218 <_ZN9CDC_Class9availableEv+0x20>
   17214:	2301      	movs	r3, #1
   17216:	e000      	b.n	1721a <_ZN9CDC_Class9availableEv+0x22>
   17218:	2300      	movs	r3, #0
   1721a:	2b00      	cmp	r3, #0
   1721c:	d001      	beq.n	17222 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   1721e:	2301      	movs	r3, #1
   17220:	e000      	b.n	17224 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   17222:	2300      	movs	r3, #0
	}
	
}
   17224:	4618      	mov	r0, r3
   17226:	370c      	adds	r7, #12
   17228:	46bd      	mov	sp, r7
   1722a:	bc80      	pop	{r7}
   1722c:	4770      	bx	lr
	...

00017230 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   17230:	b580      	push	{r7, lr}
   17232:	b082      	sub	sp, #8
   17234:	af00      	add	r7, sp, #0
   17236:	6078      	str	r0, [r7, #4]
   17238:	6039      	str	r1, [r7, #0]
   1723a:	687b      	ldr	r3, [r7, #4]
   1723c:	2b01      	cmp	r3, #1
   1723e:	d10c      	bne.n	1725a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   17240:	683b      	ldr	r3, [r7, #0]
   17242:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17246:	4293      	cmp	r3, r2
   17248:	d107      	bne.n	1725a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1724a:	4806      	ldr	r0, [pc, #24]	; (17264 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1724c:	4b06      	ldr	r3, [pc, #24]	; (17268 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1724e:	4798      	blx	r3
   17250:	4a06      	ldr	r2, [pc, #24]	; (1726c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   17252:	4907      	ldr	r1, [pc, #28]	; (17270 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   17254:	4803      	ldr	r0, [pc, #12]	; (17264 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   17256:	4b07      	ldr	r3, [pc, #28]	; (17274 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   17258:	4798      	blx	r3
   1725a:	bf00      	nop
   1725c:	3708      	adds	r7, #8
   1725e:	46bd      	mov	sp, r7
   17260:	bd80      	pop	{r7, pc}
   17262:	bf00      	nop
   17264:	20009e88 	.word	0x20009e88
   17268:	00016e25 	.word	0x00016e25
   1726c:	20000000 	.word	0x20000000
   17270:	00016e6d 	.word	0x00016e6d
   17274:	000187f1 	.word	0x000187f1

00017278 <_GLOBAL__sub_I_ptrCDCClass>:
   17278:	b580      	push	{r7, lr}
   1727a:	af00      	add	r7, sp, #0
   1727c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17280:	2001      	movs	r0, #1
   17282:	4b01      	ldr	r3, [pc, #4]	; (17288 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   17284:	4798      	blx	r3
   17286:	bd80      	pop	{r7, pc}
   17288:	00017231 	.word	0x00017231

0001728c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   1728c:	b580      	push	{r7, lr}
   1728e:	b086      	sub	sp, #24
   17290:	af00      	add	r7, sp, #0
   17292:	60f8      	str	r0, [r7, #12]
   17294:	60b9      	str	r1, [r7, #8]
   17296:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   17298:	2300      	movs	r3, #0
   1729a:	617b      	str	r3, [r7, #20]
  while (size--) {
   1729c:	687b      	ldr	r3, [r7, #4]
   1729e:	1e5a      	subs	r2, r3, #1
   172a0:	607a      	str	r2, [r7, #4]
   172a2:	2b00      	cmp	r3, #0
   172a4:	bf14      	ite	ne
   172a6:	2301      	movne	r3, #1
   172a8:	2300      	moveq	r3, #0
   172aa:	b2db      	uxtb	r3, r3
   172ac:	2b00      	cmp	r3, #0
   172ae:	d016      	beq.n	172de <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   172b0:	68fb      	ldr	r3, [r7, #12]
   172b2:	681b      	ldr	r3, [r3, #0]
   172b4:	681a      	ldr	r2, [r3, #0]
   172b6:	68bb      	ldr	r3, [r7, #8]
   172b8:	1c59      	adds	r1, r3, #1
   172ba:	60b9      	str	r1, [r7, #8]
   172bc:	781b      	ldrb	r3, [r3, #0]
   172be:	4619      	mov	r1, r3
   172c0:	68f8      	ldr	r0, [r7, #12]
   172c2:	4790      	blx	r2
   172c4:	4603      	mov	r3, r0
   172c6:	2b00      	cmp	r3, #0
   172c8:	bf14      	ite	ne
   172ca:	2301      	movne	r3, #1
   172cc:	2300      	moveq	r3, #0
   172ce:	b2db      	uxtb	r3, r3
   172d0:	2b00      	cmp	r3, #0
   172d2:	d003      	beq.n	172dc <_ZN5Print5writeEPKhj+0x50>
   172d4:	697b      	ldr	r3, [r7, #20]
   172d6:	3301      	adds	r3, #1
   172d8:	617b      	str	r3, [r7, #20]
  while (size--) {
   172da:	e7df      	b.n	1729c <_ZN5Print5writeEPKhj+0x10>
    else break;
   172dc:	bf00      	nop
  }
  return n;
   172de:	697b      	ldr	r3, [r7, #20]
}
   172e0:	4618      	mov	r0, r3
   172e2:	3718      	adds	r7, #24
   172e4:	46bd      	mov	sp, r7
   172e6:	bd80      	pop	{r7, pc}

000172e8 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
   172e8:	b580      	push	{r7, lr}
   172ea:	b082      	sub	sp, #8
   172ec:	af00      	add	r7, sp, #0
   172ee:	6078      	str	r0, [r7, #4]
   172f0:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
   172f2:	6839      	ldr	r1, [r7, #0]
   172f4:	6878      	ldr	r0, [r7, #4]
   172f6:	4b03      	ldr	r3, [pc, #12]	; (17304 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
   172f8:	4798      	blx	r3
   172fa:	4603      	mov	r3, r0
}
   172fc:	4618      	mov	r0, r3
   172fe:	3708      	adds	r7, #8
   17300:	46bd      	mov	sp, r7
   17302:	bd80      	pop	{r7, pc}
   17304:	00017309 	.word	0x00017309

00017308 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   17308:	b580      	push	{r7, lr}
   1730a:	b082      	sub	sp, #8
   1730c:	af00      	add	r7, sp, #0
   1730e:	6078      	str	r0, [r7, #4]
   17310:	6039      	str	r1, [r7, #0]
  return write(str);
   17312:	6839      	ldr	r1, [r7, #0]
   17314:	6878      	ldr	r0, [r7, #4]
   17316:	4b03      	ldr	r3, [pc, #12]	; (17324 <_ZN5Print5printEPKc+0x1c>)
   17318:	4798      	blx	r3
   1731a:	4603      	mov	r3, r0
}
   1731c:	4618      	mov	r0, r3
   1731e:	3708      	adds	r7, #8
   17320:	46bd      	mov	sp, r7
   17322:	bd80      	pop	{r7, pc}
   17324:	00002f01 	.word	0x00002f01

00017328 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
   17328:	b580      	push	{r7, lr}
   1732a:	b082      	sub	sp, #8
   1732c:	af00      	add	r7, sp, #0
   1732e:	6078      	str	r0, [r7, #4]
   17330:	460b      	mov	r3, r1
   17332:	70fb      	strb	r3, [r7, #3]
  return write(c);
   17334:	687b      	ldr	r3, [r7, #4]
   17336:	681b      	ldr	r3, [r3, #0]
   17338:	681b      	ldr	r3, [r3, #0]
   1733a:	78fa      	ldrb	r2, [r7, #3]
   1733c:	4611      	mov	r1, r2
   1733e:	6878      	ldr	r0, [r7, #4]
   17340:	4798      	blx	r3
   17342:	4603      	mov	r3, r0
}
   17344:	4618      	mov	r0, r3
   17346:	3708      	adds	r7, #8
   17348:	46bd      	mov	sp, r7
   1734a:	bd80      	pop	{r7, pc}

0001734c <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   1734c:	b580      	push	{r7, lr}
   1734e:	b084      	sub	sp, #16
   17350:	af00      	add	r7, sp, #0
   17352:	60f8      	str	r0, [r7, #12]
   17354:	460b      	mov	r3, r1
   17356:	607a      	str	r2, [r7, #4]
   17358:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   1735a:	7afb      	ldrb	r3, [r7, #11]
   1735c:	687a      	ldr	r2, [r7, #4]
   1735e:	4619      	mov	r1, r3
   17360:	68f8      	ldr	r0, [r7, #12]
   17362:	4b03      	ldr	r3, [pc, #12]	; (17370 <_ZN5Print5printEhi+0x24>)
   17364:	4798      	blx	r3
   17366:	4603      	mov	r3, r0
}
   17368:	4618      	mov	r0, r3
   1736a:	3710      	adds	r7, #16
   1736c:	46bd      	mov	sp, r7
   1736e:	bd80      	pop	{r7, pc}
   17370:	00017375 	.word	0x00017375

00017374 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   17374:	b580      	push	{r7, lr}
   17376:	b084      	sub	sp, #16
   17378:	af00      	add	r7, sp, #0
   1737a:	60f8      	str	r0, [r7, #12]
   1737c:	60b9      	str	r1, [r7, #8]
   1737e:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   17380:	687b      	ldr	r3, [r7, #4]
   17382:	2b00      	cmp	r3, #0
   17384:	d109      	bne.n	1739a <_ZN5Print5printEmi+0x26>
   17386:	68fb      	ldr	r3, [r7, #12]
   17388:	681b      	ldr	r3, [r3, #0]
   1738a:	681b      	ldr	r3, [r3, #0]
   1738c:	68ba      	ldr	r2, [r7, #8]
   1738e:	b2d2      	uxtb	r2, r2
   17390:	4611      	mov	r1, r2
   17392:	68f8      	ldr	r0, [r7, #12]
   17394:	4798      	blx	r3
   17396:	4603      	mov	r3, r0
   17398:	e007      	b.n	173aa <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   1739a:	687b      	ldr	r3, [r7, #4]
   1739c:	b2db      	uxtb	r3, r3
   1739e:	461a      	mov	r2, r3
   173a0:	68b9      	ldr	r1, [r7, #8]
   173a2:	68f8      	ldr	r0, [r7, #12]
   173a4:	4b03      	ldr	r3, [pc, #12]	; (173b4 <_ZN5Print5printEmi+0x40>)
   173a6:	4798      	blx	r3
   173a8:	4603      	mov	r3, r0
}
   173aa:	4618      	mov	r0, r3
   173ac:	3710      	adds	r7, #16
   173ae:	46bd      	mov	sp, r7
   173b0:	bd80      	pop	{r7, pc}
   173b2:	bf00      	nop
   173b4:	000174b9 	.word	0x000174b9

000173b8 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
   173b8:	b580      	push	{r7, lr}
   173ba:	b084      	sub	sp, #16
   173bc:	af00      	add	r7, sp, #0
   173be:	6078      	str	r0, [r7, #4]
   173c0:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
   173c2:	6839      	ldr	r1, [r7, #0]
   173c4:	6878      	ldr	r0, [r7, #4]
   173c6:	4b07      	ldr	r3, [pc, #28]	; (173e4 <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
   173c8:	4798      	blx	r3
   173ca:	60f8      	str	r0, [r7, #12]
  n += println();
   173cc:	6878      	ldr	r0, [r7, #4]
   173ce:	4b06      	ldr	r3, [pc, #24]	; (173e8 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
   173d0:	4798      	blx	r3
   173d2:	4602      	mov	r2, r0
   173d4:	68fb      	ldr	r3, [r7, #12]
   173d6:	4413      	add	r3, r2
   173d8:	60fb      	str	r3, [r7, #12]
  return n;
   173da:	68fb      	ldr	r3, [r7, #12]
}
   173dc:	4618      	mov	r0, r3
   173de:	3710      	adds	r7, #16
   173e0:	46bd      	mov	sp, r7
   173e2:	bd80      	pop	{r7, pc}
   173e4:	000172e9 	.word	0x000172e9
   173e8:	000173ed 	.word	0x000173ed

000173ec <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   173ec:	b580      	push	{r7, lr}
   173ee:	b082      	sub	sp, #8
   173f0:	af00      	add	r7, sp, #0
   173f2:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   173f4:	4904      	ldr	r1, [pc, #16]	; (17408 <_ZN5Print7printlnEv+0x1c>)
   173f6:	6878      	ldr	r0, [r7, #4]
   173f8:	4b04      	ldr	r3, [pc, #16]	; (1740c <_ZN5Print7printlnEv+0x20>)
   173fa:	4798      	blx	r3
   173fc:	4603      	mov	r3, r0
}
   173fe:	4618      	mov	r0, r3
   17400:	3708      	adds	r7, #8
   17402:	46bd      	mov	sp, r7
   17404:	bd80      	pop	{r7, pc}
   17406:	bf00      	nop
   17408:	00020b40 	.word	0x00020b40
   1740c:	00002f01 	.word	0x00002f01

00017410 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   17410:	b580      	push	{r7, lr}
   17412:	b084      	sub	sp, #16
   17414:	af00      	add	r7, sp, #0
   17416:	6078      	str	r0, [r7, #4]
   17418:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   1741a:	6839      	ldr	r1, [r7, #0]
   1741c:	6878      	ldr	r0, [r7, #4]
   1741e:	4b07      	ldr	r3, [pc, #28]	; (1743c <_ZN5Print7printlnEPKc+0x2c>)
   17420:	4798      	blx	r3
   17422:	60f8      	str	r0, [r7, #12]
  n += println();
   17424:	6878      	ldr	r0, [r7, #4]
   17426:	4b06      	ldr	r3, [pc, #24]	; (17440 <_ZN5Print7printlnEPKc+0x30>)
   17428:	4798      	blx	r3
   1742a:	4602      	mov	r2, r0
   1742c:	68fb      	ldr	r3, [r7, #12]
   1742e:	4413      	add	r3, r2
   17430:	60fb      	str	r3, [r7, #12]
  return n;
   17432:	68fb      	ldr	r3, [r7, #12]
}
   17434:	4618      	mov	r0, r3
   17436:	3710      	adds	r7, #16
   17438:	46bd      	mov	sp, r7
   1743a:	bd80      	pop	{r7, pc}
   1743c:	00017309 	.word	0x00017309
   17440:	000173ed 	.word	0x000173ed

00017444 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   17444:	b580      	push	{r7, lr}
   17446:	b086      	sub	sp, #24
   17448:	af00      	add	r7, sp, #0
   1744a:	60f8      	str	r0, [r7, #12]
   1744c:	460b      	mov	r3, r1
   1744e:	607a      	str	r2, [r7, #4]
   17450:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
   17452:	7afb      	ldrb	r3, [r7, #11]
   17454:	687a      	ldr	r2, [r7, #4]
   17456:	4619      	mov	r1, r3
   17458:	68f8      	ldr	r0, [r7, #12]
   1745a:	4b07      	ldr	r3, [pc, #28]	; (17478 <_ZN5Print7printlnEhi+0x34>)
   1745c:	4798      	blx	r3
   1745e:	6178      	str	r0, [r7, #20]
  n += println();
   17460:	68f8      	ldr	r0, [r7, #12]
   17462:	4b06      	ldr	r3, [pc, #24]	; (1747c <_ZN5Print7printlnEhi+0x38>)
   17464:	4798      	blx	r3
   17466:	4602      	mov	r2, r0
   17468:	697b      	ldr	r3, [r7, #20]
   1746a:	4413      	add	r3, r2
   1746c:	617b      	str	r3, [r7, #20]
  return n;
   1746e:	697b      	ldr	r3, [r7, #20]
}
   17470:	4618      	mov	r0, r3
   17472:	3718      	adds	r7, #24
   17474:	46bd      	mov	sp, r7
   17476:	bd80      	pop	{r7, pc}
   17478:	0001734d 	.word	0x0001734d
   1747c:	000173ed 	.word	0x000173ed

00017480 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   17480:	b580      	push	{r7, lr}
   17482:	b086      	sub	sp, #24
   17484:	af00      	add	r7, sp, #0
   17486:	60f8      	str	r0, [r7, #12]
   17488:	60b9      	str	r1, [r7, #8]
   1748a:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
   1748c:	687a      	ldr	r2, [r7, #4]
   1748e:	68b9      	ldr	r1, [r7, #8]
   17490:	68f8      	ldr	r0, [r7, #12]
   17492:	4b07      	ldr	r3, [pc, #28]	; (174b0 <_ZN5Print7printlnEmi+0x30>)
   17494:	4798      	blx	r3
   17496:	6178      	str	r0, [r7, #20]
  n += println();
   17498:	68f8      	ldr	r0, [r7, #12]
   1749a:	4b06      	ldr	r3, [pc, #24]	; (174b4 <_ZN5Print7printlnEmi+0x34>)
   1749c:	4798      	blx	r3
   1749e:	4602      	mov	r2, r0
   174a0:	697b      	ldr	r3, [r7, #20]
   174a2:	4413      	add	r3, r2
   174a4:	617b      	str	r3, [r7, #20]
  return n;
   174a6:	697b      	ldr	r3, [r7, #20]
}
   174a8:	4618      	mov	r0, r3
   174aa:	3718      	adds	r7, #24
   174ac:	46bd      	mov	sp, r7
   174ae:	bd80      	pop	{r7, pc}
   174b0:	00017375 	.word	0x00017375
   174b4:	000173ed 	.word	0x000173ed

000174b8 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   174b8:	b580      	push	{r7, lr}
   174ba:	b08e      	sub	sp, #56	; 0x38
   174bc:	af00      	add	r7, sp, #0
   174be:	60f8      	str	r0, [r7, #12]
   174c0:	60b9      	str	r1, [r7, #8]
   174c2:	4613      	mov	r3, r2
   174c4:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   174c6:	f107 0310 	add.w	r3, r7, #16
   174ca:	3320      	adds	r3, #32
   174cc:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   174ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   174d0:	2200      	movs	r2, #0
   174d2:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   174d4:	79fb      	ldrb	r3, [r7, #7]
   174d6:	2b01      	cmp	r3, #1
   174d8:	dc01      	bgt.n	174de <_ZN5Print11printNumberEmh+0x26>
   174da:	230a      	movs	r3, #10
   174dc:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   174de:	79fa      	ldrb	r2, [r7, #7]
   174e0:	68bb      	ldr	r3, [r7, #8]
   174e2:	fbb3 f1f2 	udiv	r1, r3, r2
   174e6:	fb02 f201 	mul.w	r2, r2, r1
   174ea:	1a9b      	subs	r3, r3, r2
   174ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   174f0:	79fb      	ldrb	r3, [r7, #7]
   174f2:	68ba      	ldr	r2, [r7, #8]
   174f4:	fbb2 f3f3 	udiv	r3, r2, r3
   174f8:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   174fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   174fc:	3b01      	subs	r3, #1
   174fe:	637b      	str	r3, [r7, #52]	; 0x34
   17500:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   17504:	2b09      	cmp	r3, #9
   17506:	dc04      	bgt.n	17512 <_ZN5Print11printNumberEmh+0x5a>
   17508:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1750c:	3330      	adds	r3, #48	; 0x30
   1750e:	b2db      	uxtb	r3, r3
   17510:	e003      	b.n	1751a <_ZN5Print11printNumberEmh+0x62>
   17512:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   17516:	3337      	adds	r3, #55	; 0x37
   17518:	b2db      	uxtb	r3, r3
   1751a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1751c:	7013      	strb	r3, [r2, #0]
  } while(n);
   1751e:	68bb      	ldr	r3, [r7, #8]
   17520:	2b00      	cmp	r3, #0
   17522:	d000      	beq.n	17526 <_ZN5Print11printNumberEmh+0x6e>
  do {
   17524:	e7db      	b.n	174de <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   17526:	6b79      	ldr	r1, [r7, #52]	; 0x34
   17528:	68f8      	ldr	r0, [r7, #12]
   1752a:	4b03      	ldr	r3, [pc, #12]	; (17538 <_ZN5Print11printNumberEmh+0x80>)
   1752c:	4798      	blx	r3
   1752e:	4603      	mov	r3, r0
}
   17530:	4618      	mov	r0, r3
   17532:	3738      	adds	r7, #56	; 0x38
   17534:	46bd      	mov	sp, r7
   17536:	bd80      	pop	{r7, pc}
   17538:	00002f01 	.word	0x00002f01

0001753c <hri_port_read_DIR_reg>:
{
   1753c:	b480      	push	{r7}
   1753e:	b083      	sub	sp, #12
   17540:	af00      	add	r7, sp, #0
   17542:	6078      	str	r0, [r7, #4]
   17544:	460b      	mov	r3, r1
   17546:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   17548:	78fb      	ldrb	r3, [r7, #3]
   1754a:	687a      	ldr	r2, [r7, #4]
   1754c:	01db      	lsls	r3, r3, #7
   1754e:	4413      	add	r3, r2
   17550:	681b      	ldr	r3, [r3, #0]
}
   17552:	4618      	mov	r0, r3
   17554:	370c      	adds	r7, #12
   17556:	46bd      	mov	sp, r7
   17558:	bc80      	pop	{r7}
   1755a:	4770      	bx	lr

0001755c <hri_port_read_OUT_reg>:
{
   1755c:	b480      	push	{r7}
   1755e:	b083      	sub	sp, #12
   17560:	af00      	add	r7, sp, #0
   17562:	6078      	str	r0, [r7, #4]
   17564:	460b      	mov	r3, r1
   17566:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   17568:	78fb      	ldrb	r3, [r7, #3]
   1756a:	687a      	ldr	r2, [r7, #4]
   1756c:	01db      	lsls	r3, r3, #7
   1756e:	4413      	add	r3, r2
   17570:	3310      	adds	r3, #16
   17572:	681b      	ldr	r3, [r3, #0]
}
   17574:	4618      	mov	r0, r3
   17576:	370c      	adds	r7, #12
   17578:	46bd      	mov	sp, r7
   1757a:	bc80      	pop	{r7}
   1757c:	4770      	bx	lr

0001757e <hri_port_read_IN_reg>:
{
   1757e:	b480      	push	{r7}
   17580:	b083      	sub	sp, #12
   17582:	af00      	add	r7, sp, #0
   17584:	6078      	str	r0, [r7, #4]
   17586:	460b      	mov	r3, r1
   17588:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   1758a:	78fb      	ldrb	r3, [r7, #3]
   1758c:	687a      	ldr	r2, [r7, #4]
   1758e:	01db      	lsls	r3, r3, #7
   17590:	4413      	add	r3, r2
   17592:	3320      	adds	r3, #32
   17594:	681b      	ldr	r3, [r3, #0]
}
   17596:	4618      	mov	r0, r3
   17598:	370c      	adds	r7, #12
   1759a:	46bd      	mov	sp, r7
   1759c:	bc80      	pop	{r7}
   1759e:	4770      	bx	lr

000175a0 <_gpio_get_level>:
{
   175a0:	b580      	push	{r7, lr}
   175a2:	b086      	sub	sp, #24
   175a4:	af00      	add	r7, sp, #0
   175a6:	4603      	mov	r3, r0
   175a8:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
   175aa:	f107 030c 	add.w	r3, r7, #12
   175ae:	4618      	mov	r0, r3
   175b0:	4b13      	ldr	r3, [pc, #76]	; (17600 <_gpio_get_level+0x60>)
   175b2:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   175b4:	79fb      	ldrb	r3, [r7, #7]
   175b6:	4619      	mov	r1, r3
   175b8:	4812      	ldr	r0, [pc, #72]	; (17604 <_gpio_get_level+0x64>)
   175ba:	4b13      	ldr	r3, [pc, #76]	; (17608 <_gpio_get_level+0x68>)
   175bc:	4798      	blx	r3
   175be:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   175c0:	79fb      	ldrb	r3, [r7, #7]
   175c2:	4619      	mov	r1, r3
   175c4:	480f      	ldr	r0, [pc, #60]	; (17604 <_gpio_get_level+0x64>)
   175c6:	4b11      	ldr	r3, [pc, #68]	; (1760c <_gpio_get_level+0x6c>)
   175c8:	4798      	blx	r3
   175ca:	4602      	mov	r2, r0
   175cc:	697b      	ldr	r3, [r7, #20]
   175ce:	43db      	mvns	r3, r3
   175d0:	4013      	ands	r3, r2
   175d2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   175d4:	79fb      	ldrb	r3, [r7, #7]
   175d6:	4619      	mov	r1, r3
   175d8:	480a      	ldr	r0, [pc, #40]	; (17604 <_gpio_get_level+0x64>)
   175da:	4b0d      	ldr	r3, [pc, #52]	; (17610 <_gpio_get_level+0x70>)
   175dc:	4798      	blx	r3
   175de:	4602      	mov	r2, r0
   175e0:	697b      	ldr	r3, [r7, #20]
   175e2:	4013      	ands	r3, r2
   175e4:	693a      	ldr	r2, [r7, #16]
   175e6:	4313      	orrs	r3, r2
   175e8:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
   175ea:	f107 030c 	add.w	r3, r7, #12
   175ee:	4618      	mov	r0, r3
   175f0:	4b08      	ldr	r3, [pc, #32]	; (17614 <_gpio_get_level+0x74>)
   175f2:	4798      	blx	r3
	return tmp;
   175f4:	693b      	ldr	r3, [r7, #16]
}
   175f6:	4618      	mov	r0, r3
   175f8:	3718      	adds	r7, #24
   175fa:	46bd      	mov	sp, r7
   175fc:	bd80      	pop	{r7, pc}
   175fe:	bf00      	nop
   17600:	00010481 	.word	0x00010481
   17604:	41008000 	.word	0x41008000
   17608:	0001753d 	.word	0x0001753d
   1760c:	0001757f 	.word	0x0001757f
   17610:	0001755d 	.word	0x0001755d
   17614:	000104a7 	.word	0x000104a7

00017618 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   17618:	b580      	push	{r7, lr}
   1761a:	b082      	sub	sp, #8
   1761c:	af00      	add	r7, sp, #0
   1761e:	4603      	mov	r3, r0
   17620:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   17622:	79fb      	ldrb	r3, [r7, #7]
   17624:	115b      	asrs	r3, r3, #5
   17626:	b2db      	uxtb	r3, r3
   17628:	4618      	mov	r0, r3
   1762a:	4b09      	ldr	r3, [pc, #36]	; (17650 <gpio_get_pin_level+0x38>)
   1762c:	4798      	blx	r3
   1762e:	4601      	mov	r1, r0
   17630:	79fb      	ldrb	r3, [r7, #7]
   17632:	f003 031f 	and.w	r3, r3, #31
   17636:	2201      	movs	r2, #1
   17638:	fa02 f303 	lsl.w	r3, r2, r3
   1763c:	400b      	ands	r3, r1
   1763e:	2b00      	cmp	r3, #0
   17640:	bf14      	ite	ne
   17642:	2301      	movne	r3, #1
   17644:	2300      	moveq	r3, #0
   17646:	b2db      	uxtb	r3, r3
}
   17648:	4618      	mov	r0, r3
   1764a:	3708      	adds	r7, #8
   1764c:	46bd      	mov	sp, r7
   1764e:	bd80      	pop	{r7, pc}
   17650:	000175a1 	.word	0x000175a1

00017654 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   17654:	b480      	push	{r7}
   17656:	b083      	sub	sp, #12
   17658:	af00      	add	r7, sp, #0
   1765a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   1765c:	4b06      	ldr	r3, [pc, #24]	; (17678 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   1765e:	681b      	ldr	r3, [r3, #0]
   17660:	2201      	movs	r2, #1
   17662:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   17664:	4b04      	ldr	r3, [pc, #16]	; (17678 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   17666:	681b      	ldr	r3, [r3, #0]
   17668:	2200      	movs	r2, #0
   1766a:	705a      	strb	r2, [r3, #1]
}
   1766c:	bf00      	nop
   1766e:	370c      	adds	r7, #12
   17670:	46bd      	mov	sp, r7
   17672:	bc80      	pop	{r7}
   17674:	4770      	bx	lr
   17676:	bf00      	nop
   17678:	20009ee8 	.word	0x20009ee8

0001767c <_ZL10USBPluggedv>:

static void USBPlugged(void){
   1767c:	b580      	push	{r7, lr}
   1767e:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   17680:	2040      	movs	r0, #64	; 0x40
   17682:	4b0a      	ldr	r3, [pc, #40]	; (176ac <_ZL10USBPluggedv+0x30>)
   17684:	4798      	blx	r3
   17686:	4603      	mov	r3, r0
   17688:	2b00      	cmp	r3, #0
   1768a:	d004      	beq.n	17696 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   1768c:	4b08      	ldr	r3, [pc, #32]	; (176b0 <_ZL10USBPluggedv+0x34>)
   1768e:	681b      	ldr	r3, [r3, #0]
   17690:	2201      	movs	r2, #1
   17692:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   17694:	e007      	b.n	176a6 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   17696:	4b06      	ldr	r3, [pc, #24]	; (176b0 <_ZL10USBPluggedv+0x34>)
   17698:	681b      	ldr	r3, [r3, #0]
   1769a:	2200      	movs	r2, #0
   1769c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   1769e:	4b04      	ldr	r3, [pc, #16]	; (176b0 <_ZL10USBPluggedv+0x34>)
   176a0:	681b      	ldr	r3, [r3, #0]
   176a2:	2200      	movs	r2, #0
   176a4:	701a      	strb	r2, [r3, #0]
}
   176a6:	bf00      	nop
   176a8:	bd80      	pop	{r7, pc}
   176aa:	bf00      	nop
   176ac:	00017619 	.word	0x00017619
   176b0:	20009ee8 	.word	0x20009ee8

000176b4 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   176b4:	b480      	push	{r7}
   176b6:	b083      	sub	sp, #12
   176b8:	af00      	add	r7, sp, #0
   176ba:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   176bc:	4a04      	ldr	r2, [pc, #16]	; (176d0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   176be:	687b      	ldr	r3, [r7, #4]
   176c0:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   176c2:	687b      	ldr	r3, [r7, #4]
   176c4:	4618      	mov	r0, r3
   176c6:	370c      	adds	r7, #12
   176c8:	46bd      	mov	sp, r7
   176ca:	bc80      	pop	{r7}
   176cc:	4770      	bx	lr
   176ce:	bf00      	nop
   176d0:	20009ee8 	.word	0x20009ee8

000176d4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   176d4:	b480      	push	{r7}
   176d6:	b083      	sub	sp, #12
   176d8:	af00      	add	r7, sp, #0
   176da:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   176dc:	687b      	ldr	r3, [r7, #4]
   176de:	4618      	mov	r0, r3
   176e0:	370c      	adds	r7, #12
   176e2:	46bd      	mov	sp, r7
   176e4:	bc80      	pop	{r7}
   176e6:	4770      	bx	lr

000176e8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   176e8:	b580      	push	{r7, lr}
   176ea:	b082      	sub	sp, #8
   176ec:	af00      	add	r7, sp, #0
   176ee:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   176f0:	491f      	ldr	r1, [pc, #124]	; (17770 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   176f2:	2040      	movs	r0, #64	; 0x40
   176f4:	4b1f      	ldr	r3, [pc, #124]	; (17774 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   176f6:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   176f8:	481f      	ldr	r0, [pc, #124]	; (17778 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   176fa:	4b20      	ldr	r3, [pc, #128]	; (1777c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   176fc:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   176fe:	2040      	movs	r0, #64	; 0x40
   17700:	4b1f      	ldr	r3, [pc, #124]	; (17780 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   17702:	4798      	blx	r3
   17704:	4603      	mov	r3, r0
   17706:	461a      	mov	r2, r3
   17708:	687b      	ldr	r3, [r7, #4]
   1770a:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   1770c:	687b      	ldr	r3, [r7, #4]
   1770e:	78db      	ldrb	r3, [r3, #3]
   17710:	2b00      	cmp	r3, #0
   17712:	d024      	beq.n	1775e <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
   17714:	687b      	ldr	r3, [r7, #4]
   17716:	2200      	movs	r2, #0
   17718:	709a      	strb	r2, [r3, #2]
			plugged=true;
   1771a:	687b      	ldr	r3, [r7, #4]
   1771c:	2201      	movs	r2, #1
   1771e:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   17720:	f44f 7216 	mov.w	r2, #600	; 0x258
   17724:	4917      	ldr	r1, [pc, #92]	; (17784 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   17726:	4814      	ldr	r0, [pc, #80]	; (17778 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   17728:	4b17      	ldr	r3, [pc, #92]	; (17788 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   1772a:	4798      	blx	r3
			usbTerminalTimer.Start();
   1772c:	4812      	ldr	r0, [pc, #72]	; (17778 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   1772e:	4b17      	ldr	r3, [pc, #92]	; (1778c <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   17730:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   17732:	4817      	ldr	r0, [pc, #92]	; (17790 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   17734:	4b17      	ldr	r3, [pc, #92]	; (17794 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
   17736:	4798      	blx	r3
   17738:	4603      	mov	r3, r0
   1773a:	f083 0301 	eor.w	r3, r3, #1
   1773e:	b2db      	uxtb	r3, r3
   17740:	2b00      	cmp	r3, #0
   17742:	d008      	beq.n	17756 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
   17744:	687b      	ldr	r3, [r7, #4]
   17746:	789b      	ldrb	r3, [r3, #2]
   17748:	b2db      	uxtb	r3, r3
   1774a:	2b00      	cmp	r3, #0
   1774c:	d0f1      	beq.n	17732 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
   1774e:	687b      	ldr	r3, [r7, #4]
   17750:	2200      	movs	r2, #0
   17752:	701a      	strb	r2, [r3, #0]
					return;
   17754:	e009      	b.n	1776a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   17756:	4808      	ldr	r0, [pc, #32]	; (17778 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   17758:	4b0f      	ldr	r3, [pc, #60]	; (17798 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
   1775a:	4798      	blx	r3
   1775c:	e005      	b.n	1776a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
   1775e:	687b      	ldr	r3, [r7, #4]
   17760:	2200      	movs	r2, #0
   17762:	701a      	strb	r2, [r3, #0]
			plugged=false;
   17764:	687b      	ldr	r3, [r7, #4]
   17766:	2200      	movs	r2, #0
   17768:	705a      	strb	r2, [r3, #1]
		}
		
}
   1776a:	3708      	adds	r7, #8
   1776c:	46bd      	mov	sp, r7
   1776e:	bd80      	pop	{r7, pc}
   17770:	0001767d 	.word	0x0001767d
   17774:	000060b5 	.word	0x000060b5
   17778:	20009f40 	.word	0x20009f40
   1777c:	00017819 	.word	0x00017819
   17780:	00017619 	.word	0x00017619
   17784:	00017655 	.word	0x00017655
   17788:	0001792d 	.word	0x0001792d
   1778c:	00017851 	.word	0x00017851
   17790:	20009e88 	.word	0x20009e88
   17794:	00016ed5 	.word	0x00016ed5
   17798:	00017875 	.word	0x00017875

0001779c <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   1779c:	b580      	push	{r7, lr}
   1779e:	b082      	sub	sp, #8
   177a0:	af00      	add	r7, sp, #0
   177a2:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   177a4:	4b04      	ldr	r3, [pc, #16]	; (177b8 <_ZL7task_cbPK10timer_task+0x1c>)
   177a6:	681b      	ldr	r3, [r3, #0]
   177a8:	4618      	mov	r0, r3
   177aa:	4b04      	ldr	r3, [pc, #16]	; (177bc <_ZL7task_cbPK10timer_task+0x20>)
   177ac:	4798      	blx	r3
}
   177ae:	bf00      	nop
   177b0:	3708      	adds	r7, #8
   177b2:	46bd      	mov	sp, r7
   177b4:	bd80      	pop	{r7, pc}
   177b6:	bf00      	nop
   177b8:	20009eec 	.word	0x20009eec
   177bc:	0001789d 	.word	0x0001789d

000177c0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   177c0:	b480      	push	{r7}
   177c2:	b083      	sub	sp, #12
   177c4:	af00      	add	r7, sp, #0
   177c6:	6078      	str	r0, [r7, #4]
   177c8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   177ca:	687b      	ldr	r3, [r7, #4]
   177cc:	683a      	ldr	r2, [r7, #0]
   177ce:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
   177d0:	4a08      	ldr	r2, [pc, #32]	; (177f4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   177d2:	687b      	ldr	r3, [r7, #4]
   177d4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   177d6:	687b      	ldr	r3, [r7, #4]
   177d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   177dc:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
   177de:	687b      	ldr	r3, [r7, #4]
   177e0:	689b      	ldr	r3, [r3, #8]
   177e2:	4a05      	ldr	r2, [pc, #20]	; (177f8 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
   177e4:	60da      	str	r2, [r3, #12]
} //Timer_Class
   177e6:	687b      	ldr	r3, [r7, #4]
   177e8:	4618      	mov	r0, r3
   177ea:	370c      	adds	r7, #12
   177ec:	46bd      	mov	sp, r7
   177ee:	bc80      	pop	{r7}
   177f0:	4770      	bx	lr
   177f2:	bf00      	nop
   177f4:	20009eec 	.word	0x20009eec
   177f8:	0001779d 	.word	0x0001779d

000177fc <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   177fc:	b480      	push	{r7}
   177fe:	b083      	sub	sp, #12
   17800:	af00      	add	r7, sp, #0
   17802:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   17804:	687b      	ldr	r3, [r7, #4]
   17806:	2200      	movs	r2, #0
   17808:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   1780a:	687b      	ldr	r3, [r7, #4]
   1780c:	4618      	mov	r0, r3
   1780e:	370c      	adds	r7, #12
   17810:	46bd      	mov	sp, r7
   17812:	bc80      	pop	{r7}
   17814:	4770      	bx	lr
	...

00017818 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
   17818:	b580      	push	{r7, lr}
   1781a:	b082      	sub	sp, #8
   1781c:	af00      	add	r7, sp, #0
   1781e:	6078      	str	r0, [r7, #4]
	
	ticks=0;
   17820:	687b      	ldr	r3, [r7, #4]
   17822:	2200      	movs	r2, #0
   17824:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
   17826:	6878      	ldr	r0, [r7, #4]
   17828:	4b08      	ldr	r3, [pc, #32]	; (1784c <_ZN17TimerSerial_Class4InitEv+0x34>)
   1782a:	4798      	blx	r3
   1782c:	4603      	mov	r3, r0
   1782e:	2b00      	cmp	r3, #0
   17830:	bf0c      	ite	eq
   17832:	2301      	moveq	r3, #1
   17834:	2300      	movne	r3, #0
   17836:	b2da      	uxtb	r2, r3
   17838:	687b      	ldr	r3, [r7, #4]
   1783a:	709a      	strb	r2, [r3, #2]
	return isOK;
   1783c:	687b      	ldr	r3, [r7, #4]
   1783e:	789b      	ldrb	r3, [r3, #2]
   17840:	b2db      	uxtb	r3, r3
}
   17842:	4618      	mov	r0, r3
   17844:	3708      	adds	r7, #8
   17846:	46bd      	mov	sp, r7
   17848:	bd80      	pop	{r7, pc}
   1784a:	bf00      	nop
   1784c:	00017851 	.word	0x00017851

00017850 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   17850:	b580      	push	{r7, lr}
   17852:	b084      	sub	sp, #16
   17854:	af00      	add	r7, sp, #0
   17856:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   17858:	687b      	ldr	r3, [r7, #4]
   1785a:	691b      	ldr	r3, [r3, #16]
   1785c:	4618      	mov	r0, r3
   1785e:	4b04      	ldr	r3, [pc, #16]	; (17870 <_ZN17TimerSerial_Class5StartEv+0x20>)
   17860:	4798      	blx	r3
   17862:	60f8      	str	r0, [r7, #12]
	return status;
   17864:	68fb      	ldr	r3, [r7, #12]
	
}
   17866:	4618      	mov	r0, r3
   17868:	3710      	adds	r7, #16
   1786a:	46bd      	mov	sp, r7
   1786c:	bd80      	pop	{r7, pc}
   1786e:	bf00      	nop
   17870:	00007039 	.word	0x00007039

00017874 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   17874:	b580      	push	{r7, lr}
   17876:	b084      	sub	sp, #16
   17878:	af00      	add	r7, sp, #0
   1787a:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   1787c:	687b      	ldr	r3, [r7, #4]
   1787e:	691b      	ldr	r3, [r3, #16]
   17880:	4618      	mov	r0, r3
   17882:	4b05      	ldr	r3, [pc, #20]	; (17898 <_ZN17TimerSerial_Class4StopEv+0x24>)
   17884:	4798      	blx	r3
   17886:	60f8      	str	r0, [r7, #12]
	timeout=0;
   17888:	687b      	ldr	r3, [r7, #4]
   1788a:	2200      	movs	r2, #0
   1788c:	705a      	strb	r2, [r3, #1]
	return status;
   1788e:	68fb      	ldr	r3, [r7, #12]
}
   17890:	4618      	mov	r0, r3
   17892:	3710      	adds	r7, #16
   17894:	46bd      	mov	sp, r7
   17896:	bd80      	pop	{r7, pc}
   17898:	0000708d 	.word	0x0000708d

0001789c <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
   1789c:	b480      	push	{r7}
   1789e:	b083      	sub	sp, #12
   178a0:	af00      	add	r7, sp, #0
   178a2:	6078      	str	r0, [r7, #4]
	timeout=1;
   178a4:	687b      	ldr	r3, [r7, #4]
   178a6:	2201      	movs	r2, #1
   178a8:	705a      	strb	r2, [r3, #1]
}
   178aa:	bf00      	nop
   178ac:	370c      	adds	r7, #12
   178ae:	46bd      	mov	sp, r7
   178b0:	bc80      	pop	{r7}
   178b2:	4770      	bx	lr

000178b4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   178b4:	b580      	push	{r7, lr}
   178b6:	b086      	sub	sp, #24
   178b8:	af00      	add	r7, sp, #0
   178ba:	60f8      	str	r0, [r7, #12]
   178bc:	60b9      	str	r1, [r7, #8]
   178be:	607a      	str	r2, [r7, #4]
   178c0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   178c2:	68f8      	ldr	r0, [r7, #12]
   178c4:	4b0d      	ldr	r3, [pc, #52]	; (178fc <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   178c6:	4798      	blx	r3
	task->interval = interval;
   178c8:	68fb      	ldr	r3, [r7, #12]
   178ca:	689b      	ldr	r3, [r3, #8]
   178cc:	687a      	ldr	r2, [r7, #4]
   178ce:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   178d0:	68fb      	ldr	r3, [r7, #12]
   178d2:	689b      	ldr	r3, [r3, #8]
   178d4:	68ba      	ldr	r2, [r7, #8]
   178d6:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   178d8:	68fb      	ldr	r3, [r7, #12]
   178da:	689b      	ldr	r3, [r3, #8]
   178dc:	78fa      	ldrb	r2, [r7, #3]
   178de:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   178e0:	68fb      	ldr	r3, [r7, #12]
   178e2:	691a      	ldr	r2, [r3, #16]
   178e4:	68fb      	ldr	r3, [r7, #12]
   178e6:	689b      	ldr	r3, [r3, #8]
   178e8:	4619      	mov	r1, r3
   178ea:	4610      	mov	r0, r2
   178ec:	4b04      	ldr	r3, [pc, #16]	; (17900 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   178ee:	4798      	blx	r3
   178f0:	6178      	str	r0, [r7, #20]
	
	return status;
   178f2:	697b      	ldr	r3, [r7, #20]
}
   178f4:	4618      	mov	r0, r3
   178f6:	3718      	adds	r7, #24
   178f8:	46bd      	mov	sp, r7
   178fa:	bd80      	pop	{r7, pc}
   178fc:	00017a11 	.word	0x00017a11
   17900:	000070e9 	.word	0x000070e9

00017904 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   17904:	b590      	push	{r4, r7, lr}
   17906:	b087      	sub	sp, #28
   17908:	af00      	add	r7, sp, #0
   1790a:	60f8      	str	r0, [r7, #12]
   1790c:	60b9      	str	r1, [r7, #8]
   1790e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   17910:	2301      	movs	r3, #1
   17912:	687a      	ldr	r2, [r7, #4]
   17914:	68b9      	ldr	r1, [r7, #8]
   17916:	68f8      	ldr	r0, [r7, #12]
   17918:	4c03      	ldr	r4, [pc, #12]	; (17928 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
   1791a:	47a0      	blx	r4
   1791c:	6178      	str	r0, [r7, #20]
		return status;
   1791e:	697b      	ldr	r3, [r7, #20]
}
   17920:	4618      	mov	r0, r3
   17922:	371c      	adds	r7, #28
   17924:	46bd      	mov	sp, r7
   17926:	bd90      	pop	{r4, r7, pc}
   17928:	000178b5 	.word	0x000178b5

0001792c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   1792c:	b590      	push	{r4, r7, lr}
   1792e:	b087      	sub	sp, #28
   17930:	af00      	add	r7, sp, #0
   17932:	60f8      	str	r0, [r7, #12]
   17934:	60b9      	str	r1, [r7, #8]
   17936:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   17938:	2300      	movs	r3, #0
   1793a:	687a      	ldr	r2, [r7, #4]
   1793c:	68b9      	ldr	r1, [r7, #8]
   1793e:	68f8      	ldr	r0, [r7, #12]
   17940:	4c03      	ldr	r4, [pc, #12]	; (17950 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   17942:	47a0      	blx	r4
   17944:	6178      	str	r0, [r7, #20]
	return status;
   17946:	697b      	ldr	r3, [r7, #20]
}
   17948:	4618      	mov	r0, r3
   1794a:	371c      	adds	r7, #28
   1794c:	46bd      	mov	sp, r7
   1794e:	bd90      	pop	{r4, r7, pc}
   17950:	000178b5 	.word	0x000178b5

00017954 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   17954:	b590      	push	{r4, r7, lr}
   17956:	b087      	sub	sp, #28
   17958:	af00      	add	r7, sp, #0
   1795a:	60f8      	str	r0, [r7, #12]
   1795c:	60b9      	str	r1, [r7, #8]
   1795e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   17960:	2300      	movs	r3, #0
   17962:	687a      	ldr	r2, [r7, #4]
   17964:	68b9      	ldr	r1, [r7, #8]
   17966:	68f8      	ldr	r0, [r7, #12]
   17968:	4c06      	ldr	r4, [pc, #24]	; (17984 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
   1796a:	47a0      	blx	r4
   1796c:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   1796e:	68fb      	ldr	r3, [r7, #12]
   17970:	691b      	ldr	r3, [r3, #16]
   17972:	4618      	mov	r0, r3
   17974:	4b04      	ldr	r3, [pc, #16]	; (17988 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
   17976:	4798      	blx	r3
   17978:	6178      	str	r0, [r7, #20]
	return status;
   1797a:	697b      	ldr	r3, [r7, #20]
}
   1797c:	4618      	mov	r0, r3
   1797e:	371c      	adds	r7, #28
   17980:	46bd      	mov	sp, r7
   17982:	bd90      	pop	{r4, r7, pc}
   17984:	000178b5 	.word	0x000178b5
   17988:	00007039 	.word	0x00007039

0001798c <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
   1798c:	b580      	push	{r7, lr}
   1798e:	b082      	sub	sp, #8
   17990:	af00      	add	r7, sp, #0
   17992:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   17994:	687b      	ldr	r3, [r7, #4]
   17996:	691a      	ldr	r2, [r3, #16]
   17998:	687b      	ldr	r3, [r7, #4]
   1799a:	689b      	ldr	r3, [r3, #8]
   1799c:	4619      	mov	r1, r3
   1799e:	4610      	mov	r0, r2
   179a0:	4b04      	ldr	r3, [pc, #16]	; (179b4 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
   179a2:	4798      	blx	r3
	task->cb=NULL;
   179a4:	687b      	ldr	r3, [r7, #4]
   179a6:	689b      	ldr	r3, [r3, #8]
   179a8:	2200      	movs	r2, #0
   179aa:	60da      	str	r2, [r3, #12]
}
   179ac:	bf00      	nop
   179ae:	3708      	adds	r7, #8
   179b0:	46bd      	mov	sp, r7
   179b2:	bd80      	pop	{r7, pc}
   179b4:	000071e1 	.word	0x000071e1

000179b8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
   179b8:	b580      	push	{r7, lr}
   179ba:	b082      	sub	sp, #8
   179bc:	af00      	add	r7, sp, #0
   179be:	6078      	str	r0, [r7, #4]
   179c0:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   179c2:	6839      	ldr	r1, [r7, #0]
   179c4:	6878      	ldr	r0, [r7, #4]
   179c6:	4b0f      	ldr	r3, [pc, #60]	; (17a04 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
   179c8:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   179ca:	687b      	ldr	r3, [r7, #4]
   179cc:	691b      	ldr	r3, [r3, #16]
   179ce:	f103 0214 	add.w	r2, r3, #20
   179d2:	687b      	ldr	r3, [r7, #4]
   179d4:	689b      	ldr	r3, [r3, #8]
   179d6:	4619      	mov	r1, r3
   179d8:	4610      	mov	r0, r2
   179da:	4b0b      	ldr	r3, [pc, #44]	; (17a08 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
   179dc:	4798      	blx	r3
   179de:	4603      	mov	r3, r0
   179e0:	2b00      	cmp	r3, #0
   179e2:	d007      	beq.n	179f4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   179e4:	687b      	ldr	r3, [r7, #4]
   179e6:	691a      	ldr	r2, [r3, #16]
   179e8:	687b      	ldr	r3, [r7, #4]
   179ea:	689b      	ldr	r3, [r3, #8]
   179ec:	4619      	mov	r1, r3
   179ee:	4610      	mov	r0, r2
   179f0:	4b06      	ldr	r3, [pc, #24]	; (17a0c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
   179f2:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   179f4:	687b      	ldr	r3, [r7, #4]
   179f6:	689b      	ldr	r3, [r3, #8]
   179f8:	2200      	movs	r2, #0
   179fa:	60da      	str	r2, [r3, #12]
}
   179fc:	bf00      	nop
   179fe:	3708      	adds	r7, #8
   17a00:	46bd      	mov	sp, r7
   17a02:	bd80      	pop	{r7, pc}
   17a04:	00017a79 	.word	0x00017a79
   17a08:	00007db9 	.word	0x00007db9
   17a0c:	000071e1 	.word	0x000071e1

00017a10 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
   17a10:	b480      	push	{r7}
   17a12:	b083      	sub	sp, #12
   17a14:	af00      	add	r7, sp, #0
   17a16:	6078      	str	r0, [r7, #4]
	for (i = 0; i < SERIAL_TASK_NUMBER; i++)
   17a18:	687b      	ldr	r3, [r7, #4]
   17a1a:	2200      	movs	r2, #0
   17a1c:	771a      	strb	r2, [r3, #28]
   17a1e:	687b      	ldr	r3, [r7, #4]
   17a20:	7f1b      	ldrb	r3, [r3, #28]
   17a22:	2b03      	cmp	r3, #3
   17a24:	dc1f      	bgt.n	17a66 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x56>
	{
			if (taskArray[i].cb==NULL)
   17a26:	687b      	ldr	r3, [r7, #4]
   17a28:	7f1b      	ldrb	r3, [r3, #28]
   17a2a:	4619      	mov	r1, r3
   17a2c:	4a11      	ldr	r2, [pc, #68]	; (17a74 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   17a2e:	460b      	mov	r3, r1
   17a30:	009b      	lsls	r3, r3, #2
   17a32:	440b      	add	r3, r1
   17a34:	009b      	lsls	r3, r3, #2
   17a36:	4413      	add	r3, r2
   17a38:	330c      	adds	r3, #12
   17a3a:	681b      	ldr	r3, [r3, #0]
   17a3c:	2b00      	cmp	r3, #0
   17a3e:	d10b      	bne.n	17a58 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x48>
			{
				
				task=&taskArray[i];
   17a40:	687b      	ldr	r3, [r7, #4]
   17a42:	7f1b      	ldrb	r3, [r3, #28]
   17a44:	461a      	mov	r2, r3
   17a46:	4613      	mov	r3, r2
   17a48:	009b      	lsls	r3, r3, #2
   17a4a:	4413      	add	r3, r2
   17a4c:	009b      	lsls	r3, r3, #2
   17a4e:	4a09      	ldr	r2, [pc, #36]	; (17a74 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   17a50:	441a      	add	r2, r3
   17a52:	687b      	ldr	r3, [r7, #4]
   17a54:	609a      	str	r2, [r3, #8]
			return;
   17a56:	e009      	b.n	17a6c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < SERIAL_TASK_NUMBER; i++)
   17a58:	687b      	ldr	r3, [r7, #4]
   17a5a:	7f1b      	ldrb	r3, [r3, #28]
   17a5c:	3301      	adds	r3, #1
   17a5e:	b2da      	uxtb	r2, r3
   17a60:	687b      	ldr	r3, [r7, #4]
   17a62:	771a      	strb	r2, [r3, #28]
   17a64:	e7db      	b.n	17a1e <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xe>
				
			}
	}
	task=&taskArray[0];
   17a66:	687b      	ldr	r3, [r7, #4]
   17a68:	4a02      	ldr	r2, [pc, #8]	; (17a74 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
   17a6a:	609a      	str	r2, [r3, #8]

}
   17a6c:	370c      	adds	r7, #12
   17a6e:	46bd      	mov	sp, r7
   17a70:	bc80      	pop	{r7}
   17a72:	4770      	bx	lr
   17a74:	20009ef0 	.word	0x20009ef0

00017a78 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
   17a78:	b480      	push	{r7}
   17a7a:	b083      	sub	sp, #12
   17a7c:	af00      	add	r7, sp, #0
   17a7e:	6078      	str	r0, [r7, #4]
   17a80:	6039      	str	r1, [r7, #0]
	for (i = 0; i < SERIAL_TASK_NUMBER; i++)
   17a82:	687b      	ldr	r3, [r7, #4]
   17a84:	2200      	movs	r2, #0
   17a86:	771a      	strb	r2, [r3, #28]
   17a88:	687b      	ldr	r3, [r7, #4]
   17a8a:	7f1b      	ldrb	r3, [r3, #28]
   17a8c:	2b03      	cmp	r3, #3
   17a8e:	dc20      	bgt.n	17ad2 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	{
		if (taskArray[i].cb==(timer_cb_t)func)
   17a90:	687b      	ldr	r3, [r7, #4]
   17a92:	7f1b      	ldrb	r3, [r3, #28]
   17a94:	4619      	mov	r1, r3
   17a96:	4a11      	ldr	r2, [pc, #68]	; (17adc <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
   17a98:	460b      	mov	r3, r1
   17a9a:	009b      	lsls	r3, r3, #2
   17a9c:	440b      	add	r3, r1
   17a9e:	009b      	lsls	r3, r3, #2
   17aa0:	4413      	add	r3, r2
   17aa2:	330c      	adds	r3, #12
   17aa4:	681a      	ldr	r2, [r3, #0]
   17aa6:	683b      	ldr	r3, [r7, #0]
   17aa8:	429a      	cmp	r2, r3
   17aaa:	d10b      	bne.n	17ac4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4c>
		{
			
			task=&taskArray[i];
   17aac:	687b      	ldr	r3, [r7, #4]
   17aae:	7f1b      	ldrb	r3, [r3, #28]
   17ab0:	461a      	mov	r2, r3
   17ab2:	4613      	mov	r3, r2
   17ab4:	009b      	lsls	r3, r3, #2
   17ab6:	4413      	add	r3, r2
   17ab8:	009b      	lsls	r3, r3, #2
   17aba:	4a08      	ldr	r2, [pc, #32]	; (17adc <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
   17abc:	441a      	add	r2, r3
   17abe:	687b      	ldr	r3, [r7, #4]
   17ac0:	609a      	str	r2, [r3, #8]
			return;
   17ac2:	e006      	b.n	17ad2 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	for (i = 0; i < SERIAL_TASK_NUMBER; i++)
   17ac4:	687b      	ldr	r3, [r7, #4]
   17ac6:	7f1b      	ldrb	r3, [r3, #28]
   17ac8:	3301      	adds	r3, #1
   17aca:	b2da      	uxtb	r2, r3
   17acc:	687b      	ldr	r3, [r7, #4]
   17ace:	771a      	strb	r2, [r3, #28]
   17ad0:	e7da      	b.n	17a88 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x10>
			
		}
	}


}
   17ad2:	370c      	adds	r7, #12
   17ad4:	46bd      	mov	sp, r7
   17ad6:	bc80      	pop	{r7}
   17ad8:	4770      	bx	lr
   17ada:	bf00      	nop
   17adc:	20009ef0 	.word	0x20009ef0

00017ae0 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   17ae0:	b580      	push	{r7, lr}
   17ae2:	b082      	sub	sp, #8
   17ae4:	af00      	add	r7, sp, #0
   17ae6:	6078      	str	r0, [r7, #4]
   17ae8:	6039      	str	r1, [r7, #0]
   17aea:	687b      	ldr	r3, [r7, #4]
   17aec:	2b01      	cmp	r3, #1
   17aee:	d116      	bne.n	17b1e <_Z41__static_initialization_and_destruction_0ii+0x3e>
   17af0:	683b      	ldr	r3, [r7, #0]
   17af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17af6:	4293      	cmp	r3, r2
   17af8:	d111      	bne.n	17b1e <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
   17afa:	490b      	ldr	r1, [pc, #44]	; (17b28 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   17afc:	480b      	ldr	r0, [pc, #44]	; (17b2c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   17afe:	4b0c      	ldr	r3, [pc, #48]	; (17b30 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   17b00:	4798      	blx	r3
   17b02:	4a0c      	ldr	r2, [pc, #48]	; (17b34 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   17b04:	490c      	ldr	r1, [pc, #48]	; (17b38 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   17b06:	4809      	ldr	r0, [pc, #36]	; (17b2c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   17b08:	4b0c      	ldr	r3, [pc, #48]	; (17b3c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   17b0a:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   17b0c:	490c      	ldr	r1, [pc, #48]	; (17b40 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   17b0e:	480d      	ldr	r0, [pc, #52]	; (17b44 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   17b10:	4b07      	ldr	r3, [pc, #28]	; (17b30 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   17b12:	4798      	blx	r3
   17b14:	4a07      	ldr	r2, [pc, #28]	; (17b34 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   17b16:	4908      	ldr	r1, [pc, #32]	; (17b38 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   17b18:	480a      	ldr	r0, [pc, #40]	; (17b44 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   17b1a:	4b08      	ldr	r3, [pc, #32]	; (17b3c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   17b1c:	4798      	blx	r3
   17b1e:	bf00      	nop
   17b20:	3708      	adds	r7, #8
   17b22:	46bd      	mov	sp, r7
   17b24:	bd80      	pop	{r7, pc}
   17b26:	bf00      	nop
   17b28:	2000a25c 	.word	0x2000a25c
   17b2c:	20009f40 	.word	0x20009f40
   17b30:	000177c1 	.word	0x000177c1
   17b34:	20000000 	.word	0x20000000
   17b38:	000177fd 	.word	0x000177fd
   17b3c:	000187f1 	.word	0x000187f1
   17b40:	2000a1a4 	.word	0x2000a1a4
   17b44:	20009f60 	.word	0x20009f60

00017b48 <_GLOBAL__sub_I_ptrTimerSerialClass>:
   17b48:	b580      	push	{r7, lr}
   17b4a:	af00      	add	r7, sp, #0
   17b4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17b50:	2001      	movs	r0, #1
   17b52:	4b01      	ldr	r3, [pc, #4]	; (17b58 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   17b54:	4798      	blx	r3
   17b56:	bd80      	pop	{r7, pc}
   17b58:	00017ae1 	.word	0x00017ae1

00017b5c <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   17b5c:	b480      	push	{r7}
   17b5e:	b083      	sub	sp, #12
   17b60:	af00      	add	r7, sp, #0
   17b62:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   17b64:	4b04      	ldr	r3, [pc, #16]	; (17b78 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   17b66:	681b      	ldr	r3, [r3, #0]
   17b68:	2201      	movs	r2, #1
   17b6a:	709a      	strb	r2, [r3, #2]
}
   17b6c:	bf00      	nop
   17b6e:	370c      	adds	r7, #12
   17b70:	46bd      	mov	sp, r7
   17b72:	bc80      	pop	{r7}
   17b74:	4770      	bx	lr
   17b76:	bf00      	nop
   17b78:	20009f80 	.word	0x20009f80

00017b7c <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   17b7c:	b480      	push	{r7}
   17b7e:	b083      	sub	sp, #12
   17b80:	af00      	add	r7, sp, #0
   17b82:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   17b84:	687b      	ldr	r3, [r7, #4]
   17b86:	4618      	mov	r0, r3
   17b88:	370c      	adds	r7, #12
   17b8a:	46bd      	mov	sp, r7
   17b8c:	bc80      	pop	{r7}
   17b8e:	4770      	bx	lr

00017b90 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   17b90:	b480      	push	{r7}
   17b92:	b083      	sub	sp, #12
   17b94:	af00      	add	r7, sp, #0
   17b96:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   17b98:	687b      	ldr	r3, [r7, #4]
   17b9a:	4618      	mov	r0, r3
   17b9c:	370c      	adds	r7, #12
   17b9e:	46bd      	mov	sp, r7
   17ba0:	bc80      	pop	{r7}
   17ba2:	4770      	bx	lr

00017ba4 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   17ba4:	b580      	push	{r7, lr}
   17ba6:	b084      	sub	sp, #16
   17ba8:	af00      	add	r7, sp, #0
   17baa:	60f8      	str	r0, [r7, #12]
   17bac:	60b9      	str	r1, [r7, #8]
   17bae:	607a      	str	r2, [r7, #4]
	chipSelect=csPin;
   17bb0:	68fb      	ldr	r3, [r7, #12]
   17bb2:	68ba      	ldr	r2, [r7, #8]
   17bb4:	641a      	str	r2, [r3, #64]	; 0x40
	spiLT=spiLite;
   17bb6:	68fb      	ldr	r3, [r7, #12]
   17bb8:	687a      	ldr	r2, [r7, #4]
   17bba:	619a      	str	r2, [r3, #24]
	auxTimer=&hvacTimer;
   17bbc:	68fb      	ldr	r3, [r7, #12]
   17bbe:	4a0e      	ldr	r2, [pc, #56]	; (17bf8 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x54>)
   17bc0:	61da      	str	r2, [r3, #28]
	activeChannels[0]=4;
   17bc2:	68fb      	ldr	r3, [r7, #12]
   17bc4:	2204      	movs	r2, #4
   17bc6:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=8;
   17bc8:	68fb      	ldr	r3, [r7, #12]
   17bca:	2208      	movs	r2, #8
   17bcc:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=15;
   17bce:	68fb      	ldr	r3, [r7, #12]
   17bd0:	220f      	movs	r2, #15
   17bd2:	715a      	strb	r2, [r3, #5]

	configure_channels();
   17bd4:	68f8      	ldr	r0, [r7, #12]
   17bd6:	4b09      	ldr	r3, [pc, #36]	; (17bfc <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x58>)
   17bd8:	4798      	blx	r3
	configure_global_parameters();
   17bda:	68f8      	ldr	r0, [r7, #12]
   17bdc:	4b08      	ldr	r3, [pc, #32]	; (17c00 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x5c>)
   17bde:	4798      	blx	r3
	ready=true;
   17be0:	68fb      	ldr	r3, [r7, #12]
   17be2:	2201      	movs	r2, #1
   17be4:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   17be6:	68f8      	ldr	r0, [r7, #12]
   17be8:	4b06      	ldr	r3, [pc, #24]	; (17c04 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x60>)
   17bea:	4798      	blx	r3
   17bec:	4603      	mov	r3, r0
}
   17bee:	4618      	mov	r0, r3
   17bf0:	3710      	adds	r7, #16
   17bf2:	46bd      	mov	sp, r7
   17bf4:	bd80      	pop	{r7, pc}
   17bf6:	bf00      	nop
   17bf8:	20009e24 	.word	0x20009e24
   17bfc:	00017fe9 	.word	0x00017fe9
   17c00:	00018079 	.word	0x00018079
   17c04:	000180b1 	.word	0x000180b1

00017c08 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   17c08:	b590      	push	{r4, r7, lr}
   17c0a:	b089      	sub	sp, #36	; 0x24
   17c0c:	af02      	add	r7, sp, #8
   17c0e:	60f8      	str	r0, [r7, #12]
   17c10:	60b9      	str	r1, [r7, #8]
   17c12:	603b      	str	r3, [r7, #0]
   17c14:	4613      	mov	r3, r2
   17c16:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   17c18:	79fb      	ldrb	r3, [r7, #7]
   17c1a:	461a      	mov	r2, r3
   17c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
   17c20:	68f8      	ldr	r0, [r7, #12]
   17c22:	4b0b      	ldr	r3, [pc, #44]	; (17c50 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   17c24:	4798      	blx	r3
   17c26:	4603      	mov	r3, r0
   17c28:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   17c2a:	8afa      	ldrh	r2, [r7, #22]
   17c2c:	683b      	ldr	r3, [r7, #0]
   17c2e:	9300      	str	r3, [sp, #0]
   17c30:	4613      	mov	r3, r2
   17c32:	2202      	movs	r2, #2
   17c34:	68b9      	ldr	r1, [r7, #8]
   17c36:	68f8      	ldr	r0, [r7, #12]
   17c38:	4c06      	ldr	r4, [pc, #24]	; (17c54 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   17c3a:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   17c3c:	8afb      	ldrh	r3, [r7, #22]
   17c3e:	79fa      	ldrb	r2, [r7, #7]
   17c40:	68b9      	ldr	r1, [r7, #8]
   17c42:	68f8      	ldr	r0, [r7, #12]
   17c44:	4c04      	ldr	r4, [pc, #16]	; (17c58 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   17c46:	47a0      	blx	r4
}
   17c48:	bf00      	nop
   17c4a:	371c      	adds	r7, #28
   17c4c:	46bd      	mov	sp, r7
   17c4e:	bd90      	pop	{r4, r7, pc}
   17c50:	00017fbd 	.word	0x00017fbd
   17c54:	00017ed5 	.word	0x00017ed5
   17c58:	00017ca9 	.word	0x00017ca9

00017c5c <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   17c5c:	b590      	push	{r4, r7, lr}
   17c5e:	b087      	sub	sp, #28
   17c60:	af02      	add	r7, sp, #8
   17c62:	6078      	str	r0, [r7, #4]
   17c64:	460b      	mov	r3, r1
   17c66:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   17c68:	78fb      	ldrb	r3, [r7, #3]
   17c6a:	687a      	ldr	r2, [r7, #4]
   17c6c:	4413      	add	r3, r2
   17c6e:	78db      	ldrb	r3, [r3, #3]
   17c70:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   17c72:	687b      	ldr	r3, [r7, #4]
   17c74:	2200      	movs	r2, #0
   17c76:	705a      	strb	r2, [r3, #1]
	ready=false;
   17c78:	687b      	ldr	r3, [r7, #4]
   17c7a:	2200      	movs	r2, #0
   17c7c:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   17c7e:	687b      	ldr	r3, [r7, #4]
   17c80:	6c19      	ldr	r1, [r3, #64]	; 0x40
   17c82:	7bfb      	ldrb	r3, [r7, #15]
   17c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17c88:	b2db      	uxtb	r3, r3
   17c8a:	9300      	str	r3, [sp, #0]
   17c8c:	2300      	movs	r3, #0
   17c8e:	2202      	movs	r2, #2
   17c90:	6878      	ldr	r0, [r7, #4]
   17c92:	4c04      	ldr	r4, [pc, #16]	; (17ca4 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   17c94:	47a0      	blx	r4
	channelOnProcess=channel_number;
   17c96:	687b      	ldr	r3, [r7, #4]
   17c98:	7bfa      	ldrb	r2, [r7, #15]
   17c9a:	71da      	strb	r2, [r3, #7]
	//wait_for_process_to_finish(chip_select);
}
   17c9c:	bf00      	nop
   17c9e:	3714      	adds	r7, #20
   17ca0:	46bd      	mov	sp, r7
   17ca2:	bd90      	pop	{r4, r7, pc}
   17ca4:	00017f65 	.word	0x00017f65

00017ca8 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   17ca8:	b590      	push	{r4, r7, lr}
   17caa:	b089      	sub	sp, #36	; 0x24
   17cac:	af02      	add	r7, sp, #8
   17cae:	60f8      	str	r0, [r7, #12]
   17cb0:	60b9      	str	r1, [r7, #8]
   17cb2:	4611      	mov	r1, r2
   17cb4:	461a      	mov	r2, r3
   17cb6:	460b      	mov	r3, r1
   17cb8:	71fb      	strb	r3, [r7, #7]
   17cba:	4613      	mov	r3, r2
   17cbc:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   17cbe:	88ba      	ldrh	r2, [r7, #4]
   17cc0:	2300      	movs	r3, #0
   17cc2:	9300      	str	r3, [sp, #0]
   17cc4:	4613      	mov	r3, r2
   17cc6:	2203      	movs	r2, #3
   17cc8:	68b9      	ldr	r1, [r7, #8]
   17cca:	68f8      	ldr	r0, [r7, #12]
   17ccc:	4c0c      	ldr	r4, [pc, #48]	; (17d00 <_ZN13LTC2983_Class20print_config_channelEmht+0x58>)
   17cce:	47a0      	blx	r4
   17cd0:	6178      	str	r0, [r7, #20]

	usb.print(F("\nChannel Config "));
   17cd2:	490c      	ldr	r1, [pc, #48]	; (17d04 <_ZN13LTC2983_Class20print_config_channelEmht+0x5c>)
   17cd4:	480c      	ldr	r0, [pc, #48]	; (17d08 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   17cd6:	4b0d      	ldr	r3, [pc, #52]	; (17d0c <_ZN13LTC2983_Class20print_config_channelEmht+0x64>)
   17cd8:	4798      	blx	r3
	usb.println(channel_number);
   17cda:	79fb      	ldrb	r3, [r7, #7]
   17cdc:	220a      	movs	r2, #10
   17cde:	4619      	mov	r1, r3
   17ce0:	4809      	ldr	r0, [pc, #36]	; (17d08 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   17ce2:	4b0b      	ldr	r3, [pc, #44]	; (17d10 <_ZN13LTC2983_Class20print_config_channelEmht+0x68>)
   17ce4:	4798      	blx	r3

	// 24 LSB's are conversion result
	
	usb<<"register value: ";
   17ce6:	490b      	ldr	r1, [pc, #44]	; (17d14 <_ZN13LTC2983_Class20print_config_channelEmht+0x6c>)
   17ce8:	4807      	ldr	r0, [pc, #28]	; (17d08 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   17cea:	4b0b      	ldr	r3, [pc, #44]	; (17d18 <_ZN13LTC2983_Class20print_config_channelEmht+0x70>)
   17cec:	4798      	blx	r3
	usb.println(raw_data,HEX);
   17cee:	2210      	movs	r2, #16
   17cf0:	6979      	ldr	r1, [r7, #20]
   17cf2:	4805      	ldr	r0, [pc, #20]	; (17d08 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   17cf4:	4b09      	ldr	r3, [pc, #36]	; (17d1c <_ZN13LTC2983_Class20print_config_channelEmht+0x74>)
   17cf6:	4798      	blx	r3
	
}
   17cf8:	bf00      	nop
   17cfa:	371c      	adds	r7, #28
   17cfc:	46bd      	mov	sp, r7
   17cfe:	bd90      	pop	{r4, r7, pc}
   17d00:	00017ed5 	.word	0x00017ed5
   17d04:	00020d40 	.word	0x00020d40
   17d08:	20009e88 	.word	0x20009e88
   17d0c:	000172e9 	.word	0x000172e9
   17d10:	00017445 	.word	0x00017445
   17d14:	00020d54 	.word	0x00020d54
   17d18:	00018181 	.word	0x00018181
   17d1c:	00017481 	.word	0x00017481

00017d20 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   17d20:	b590      	push	{r4, r7, lr}
   17d22:	b085      	sub	sp, #20
   17d24:	af02      	add	r7, sp, #8
   17d26:	6078      	str	r0, [r7, #4]
   17d28:	460b      	mov	r3, r1
   17d2a:	70fb      	strb	r3, [r7, #3]
   17d2c:	4613      	mov	r3, r2
   17d2e:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   17d30:	78fb      	ldrb	r3, [r7, #3]
   17d32:	461a      	mov	r2, r3
   17d34:	2110      	movs	r1, #16
   17d36:	6878      	ldr	r0, [r7, #4]
   17d38:	4b17      	ldr	r3, [pc, #92]	; (17d98 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   17d3a:	4798      	blx	r3
   17d3c:	4603      	mov	r3, r0
   17d3e:	461a      	mov	r2, r3
   17d40:	687b      	ldr	r3, [r7, #4]
   17d42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   17d46:	687b      	ldr	r3, [r7, #4]
   17d48:	6c19      	ldr	r1, [r3, #64]	; 0x40
   17d4a:	687b      	ldr	r3, [r7, #4]
   17d4c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
   17d50:	2300      	movs	r3, #0
   17d52:	9300      	str	r3, [sp, #0]
   17d54:	4613      	mov	r3, r2
   17d56:	2203      	movs	r2, #3
   17d58:	6878      	ldr	r0, [r7, #4]
   17d5a:	4c10      	ldr	r4, [pc, #64]	; (17d9c <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   17d5c:	47a0      	blx	r4
   17d5e:	4602      	mov	r2, r0
   17d60:	687b      	ldr	r3, [r7, #4]
   17d62:	63da      	str	r2, [r3, #60]	; 0x3c


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   17d64:	687b      	ldr	r3, [r7, #4]
   17d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17d68:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   17d6c:	687b      	ldr	r3, [r7, #4]
   17d6e:	639a      	str	r2, [r3, #56]	; 0x38
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   17d70:	687b      	ldr	r3, [r7, #4]
   17d72:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17d74:	78bb      	ldrb	r3, [r7, #2]
   17d76:	78fa      	ldrb	r2, [r7, #3]
   17d78:	6878      	ldr	r0, [r7, #4]
   17d7a:	4c09      	ldr	r4, [pc, #36]	; (17da0 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   17d7c:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   17d7e:	687b      	ldr	r3, [r7, #4]
   17d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17d82:	0e1b      	lsrs	r3, r3, #24
   17d84:	b2da      	uxtb	r2, r3
   17d86:	687b      	ldr	r3, [r7, #4]
   17d88:	719a      	strb	r2, [r3, #6]
	return scaled_result;
   17d8a:	687b      	ldr	r3, [r7, #4]
   17d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
   17d8e:	4618      	mov	r0, r3
   17d90:	370c      	adds	r7, #12
   17d92:	46bd      	mov	sp, r7
   17d94:	bd90      	pop	{r4, r7, pc}
   17d96:	bf00      	nop
   17d98:	00017fbd 	.word	0x00017fbd
   17d9c:	00017ed5 	.word	0x00017ed5
   17da0:	00017dcd 	.word	0x00017dcd

00017da4 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:
float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   17da4:	b580      	push	{r7, lr}
   17da6:	b082      	sub	sp, #8
   17da8:	af00      	add	r7, sp, #0
   17daa:	6078      	str	r0, [r7, #4]
   17dac:	460b      	mov	r3, r1
   17dae:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   17db0:	78fb      	ldrb	r3, [r7, #3]
   17db2:	2202      	movs	r2, #2
   17db4:	4619      	mov	r1, r3
   17db6:	6878      	ldr	r0, [r7, #4]
   17db8:	4b03      	ldr	r3, [pc, #12]	; (17dc8 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   17dba:	4798      	blx	r3
   17dbc:	4603      	mov	r3, r0
}
   17dbe:	4618      	mov	r0, r3
   17dc0:	3708      	adds	r7, #8
   17dc2:	46bd      	mov	sp, r7
   17dc4:	bd80      	pop	{r7, pc}
   17dc6:	bf00      	nop
   17dc8:	00017d21 	.word	0x00017d21

00017dcc <_ZN13LTC2983_Class13ConvertResultEmhh>:
		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   17dcc:	b580      	push	{r7, lr}
   17dce:	b084      	sub	sp, #16
   17dd0:	af00      	add	r7, sp, #0
   17dd2:	60f8      	str	r0, [r7, #12]
   17dd4:	60b9      	str	r1, [r7, #8]
   17dd6:	4611      	mov	r1, r2
   17dd8:	461a      	mov	r2, r3
   17dda:	460b      	mov	r3, r1
   17ddc:	71fb      	strb	r3, [r7, #7]
   17dde:	4613      	mov	r3, r2
   17de0:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   17de2:	68ba      	ldr	r2, [r7, #8]
   17de4:	68fb      	ldr	r3, [r7, #12]
   17de6:	649a      	str	r2, [r3, #72]	; 0x48
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   17de8:	68fb      	ldr	r3, [r7, #12]
   17dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   17dec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   17df0:	2b00      	cmp	r3, #0
   17df2:	d006      	beq.n	17e02 <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   17df4:	68fb      	ldr	r3, [r7, #12]
   17df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   17df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   17dfc:	461a      	mov	r2, r3
   17dfe:	68fb      	ldr	r3, [r7, #12]
   17e00:	649a      	str	r2, [r3, #72]	; 0x48

	// Translate and print result
	if (channel_output == TEMPERATURE)
   17e02:	79bb      	ldrb	r3, [r7, #6]
   17e04:	2b02      	cmp	r3, #2
   17e06:	d11c      	bne.n	17e42 <_ZN13LTC2983_Class13ConvertResultEmhh+0x76>
	{
		scaled_result= float(signed_data) / 1024;
   17e08:	68fb      	ldr	r3, [r7, #12]
   17e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   17e0c:	4b18      	ldr	r3, [pc, #96]	; (17e70 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   17e0e:	4610      	mov	r0, r2
   17e10:	4798      	blx	r3
   17e12:	4602      	mov	r2, r0
   17e14:	4b17      	ldr	r3, [pc, #92]	; (17e74 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   17e16:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   17e1a:	4610      	mov	r0, r2
   17e1c:	4798      	blx	r3
   17e1e:	4603      	mov	r3, r0
   17e20:	461a      	mov	r2, r3
   17e22:	68fb      	ldr	r3, [r7, #12]
   17e24:	645a      	str	r2, [r3, #68]	; 0x44
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   17e26:	79fb      	ldrb	r3, [r7, #7]
   17e28:	4619      	mov	r1, r3
   17e2a:	68f8      	ldr	r0, [r7, #12]
   17e2c:	4b12      	ldr	r3, [pc, #72]	; (17e78 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   17e2e:	4798      	blx	r3
   17e30:	4603      	mov	r3, r0
   17e32:	461a      	mov	r2, r3
   17e34:	68fb      	ldr	r3, [r7, #12]
   17e36:	6c59      	ldr	r1, [r3, #68]	; 0x44
   17e38:	68fb      	ldr	r3, [r7, #12]
   17e3a:	3202      	adds	r2, #2
   17e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   17e40:	e011      	b.n	17e66 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
	else if (channel_output == VOLTAGE)
   17e42:	79bb      	ldrb	r3, [r7, #6]
   17e44:	2b01      	cmp	r3, #1
   17e46:	d10e      	bne.n	17e66 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
		scaled_result = float(signed_data) / 2097152;
   17e48:	68fb      	ldr	r3, [r7, #12]
   17e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   17e4c:	4b08      	ldr	r3, [pc, #32]	; (17e70 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   17e4e:	4610      	mov	r0, r2
   17e50:	4798      	blx	r3
   17e52:	4602      	mov	r2, r0
   17e54:	4b07      	ldr	r3, [pc, #28]	; (17e74 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   17e56:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   17e5a:	4610      	mov	r0, r2
   17e5c:	4798      	blx	r3
   17e5e:	4603      	mov	r3, r0
   17e60:	461a      	mov	r2, r3
   17e62:	68fb      	ldr	r3, [r7, #12]
   17e64:	645a      	str	r2, [r3, #68]	; 0x44
}
   17e66:	bf00      	nop
   17e68:	3710      	adds	r7, #16
   17e6a:	46bd      	mov	sp, r7
   17e6c:	bd80      	pop	{r7, pc}
   17e6e:	bf00      	nop
   17e70:	0001a4e9 	.word	0x0001a4e9
   17e74:	0001a6f9 	.word	0x0001a6f9
   17e78:	00017e7d 	.word	0x00017e7d

00017e7c <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   17e7c:	b480      	push	{r7}
   17e7e:	b083      	sub	sp, #12
   17e80:	af00      	add	r7, sp, #0
   17e82:	6078      	str	r0, [r7, #4]
   17e84:	460b      	mov	r3, r1
   17e86:	70fb      	strb	r3, [r7, #3]
	for (i = 0; i < NUMBER_TEMPERATURE_CHANNELS; i++)
   17e88:	687b      	ldr	r3, [r7, #4]
   17e8a:	2200      	movs	r2, #0
   17e8c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   17e90:	687b      	ldr	r3, [r7, #4]
   17e92:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   17e96:	2b02      	cmp	r3, #2
   17e98:	dc16      	bgt.n	17ec8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x4c>
	{
		if (activeChannels[i]==chn)
   17e9a:	687b      	ldr	r3, [r7, #4]
   17e9c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   17ea0:	461a      	mov	r2, r3
   17ea2:	687b      	ldr	r3, [r7, #4]
   17ea4:	4413      	add	r3, r2
   17ea6:	78db      	ldrb	r3, [r3, #3]
   17ea8:	78fa      	ldrb	r2, [r7, #3]
   17eaa:	429a      	cmp	r2, r3
   17eac:	d103      	bne.n	17eb6 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x3a>
		{
			return i;
   17eae:	687b      	ldr	r3, [r7, #4]
   17eb0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   17eb4:	e009      	b.n	17eca <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x4e>
	for (i = 0; i < NUMBER_TEMPERATURE_CHANNELS; i++)
   17eb6:	687b      	ldr	r3, [r7, #4]
   17eb8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   17ebc:	3301      	adds	r3, #1
   17ebe:	b2da      	uxtb	r2, r3
   17ec0:	687b      	ldr	r3, [r7, #4]
   17ec2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   17ec6:	e7e3      	b.n	17e90 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x14>
		}
	}
	return 0;
   17ec8:	2300      	movs	r3, #0
}
   17eca:	4618      	mov	r0, r3
   17ecc:	370c      	adds	r7, #12
   17ece:	46bd      	mov	sp, r7
   17ed0:	bc80      	pop	{r7}
   17ed2:	4770      	bx	lr

00017ed4 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   17ed4:	b590      	push	{r4, r7, lr}
   17ed6:	b08d      	sub	sp, #52	; 0x34
   17ed8:	af02      	add	r7, sp, #8
   17eda:	60f8      	str	r0, [r7, #12]
   17edc:	60b9      	str	r1, [r7, #8]
   17ede:	4611      	mov	r1, r2
   17ee0:	461a      	mov	r2, r3
   17ee2:	460b      	mov	r3, r1
   17ee4:	71fb      	strb	r3, [r7, #7]
   17ee6:	4613      	mov	r3, r2
   17ee8:	80bb      	strh	r3, [r7, #4]
	uint32_t output_data;
	volatile uint8_t tx[7], rx[7];

	tx[0] = ram_read_or_write;
   17eea:	79fb      	ldrb	r3, [r7, #7]
   17eec:	773b      	strb	r3, [r7, #28]
	tx[1] = highByte(start_address);
   17eee:	88bb      	ldrh	r3, [r7, #4]
   17ef0:	121b      	asrs	r3, r3, #8
   17ef2:	b2db      	uxtb	r3, r3
   17ef4:	777b      	strb	r3, [r7, #29]
	tx[2] = lowByte(start_address);
   17ef6:	88bb      	ldrh	r3, [r7, #4]
   17ef8:	b2db      	uxtb	r3, r3
   17efa:	77bb      	strb	r3, [r7, #30]
	tx[3] = (uint8_t)(input_data >> 24);
   17efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17efe:	0e1b      	lsrs	r3, r3, #24
   17f00:	b2db      	uxtb	r3, r3
   17f02:	77fb      	strb	r3, [r7, #31]
	tx[4] = (uint8_t)(input_data >> 16);
   17f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17f06:	0c1b      	lsrs	r3, r3, #16
   17f08:	b2db      	uxtb	r3, r3
   17f0a:	f887 3020 	strb.w	r3, [r7, #32]
	tx[5] = (uint8_t)(input_data >> 8);
   17f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17f10:	0a1b      	lsrs	r3, r3, #8
   17f12:	b2db      	uxtb	r3, r3
   17f14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	tx[6] = (uint8_t) input_data;
   17f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17f1a:	b2db      	uxtb	r3, r3
   17f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	spiLT->spi_transfer_block(chip_select,(uint8_t*)tx,(uint8_t*)rx, 7);
   17f20:	68fb      	ldr	r3, [r7, #12]
   17f22:	6998      	ldr	r0, [r3, #24]
   17f24:	f107 0114 	add.w	r1, r7, #20
   17f28:	f107 021c 	add.w	r2, r7, #28
   17f2c:	2307      	movs	r3, #7
   17f2e:	9300      	str	r3, [sp, #0]
   17f30:	460b      	mov	r3, r1
   17f32:	68b9      	ldr	r1, [r7, #8]
   17f34:	4c0a      	ldr	r4, [pc, #40]	; (17f60 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x8c>)
   17f36:	47a0      	blx	r4

	output_data = (uint32_t) rx[3] << 24 |
   17f38:	7dfb      	ldrb	r3, [r7, #23]
   17f3a:	b2db      	uxtb	r3, r3
   17f3c:	061a      	lsls	r2, r3, #24
	(uint32_t) rx[4] << 16 |
   17f3e:	7e3b      	ldrb	r3, [r7, #24]
   17f40:	b2db      	uxtb	r3, r3
   17f42:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx[3] << 24 |
   17f44:	431a      	orrs	r2, r3
	(uint32_t) rx[5] << 8  |
   17f46:	7e7b      	ldrb	r3, [r7, #25]
   17f48:	b2db      	uxtb	r3, r3
   17f4a:	021b      	lsls	r3, r3, #8
	(uint32_t) rx[4] << 16 |
   17f4c:	4313      	orrs	r3, r2
	(uint32_t) rx[6];
   17f4e:	7eba      	ldrb	r2, [r7, #26]
   17f50:	b2d2      	uxtb	r2, r2
	output_data = (uint32_t) rx[3] << 24 |
   17f52:	4313      	orrs	r3, r2
   17f54:	627b      	str	r3, [r7, #36]	; 0x24

	return output_data;
   17f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   17f58:	4618      	mov	r0, r3
   17f5a:	372c      	adds	r7, #44	; 0x2c
   17f5c:	46bd      	mov	sp, r7
   17f5e:	bd90      	pop	{r4, r7, pc}
   17f60:	00018301 	.word	0x00018301

00017f64 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   17f64:	b590      	push	{r4, r7, lr}
   17f66:	b089      	sub	sp, #36	; 0x24
   17f68:	af02      	add	r7, sp, #8
   17f6a:	60f8      	str	r0, [r7, #12]
   17f6c:	60b9      	str	r1, [r7, #8]
   17f6e:	4611      	mov	r1, r2
   17f70:	461a      	mov	r2, r3
   17f72:	460b      	mov	r3, r1
   17f74:	71fb      	strb	r3, [r7, #7]
   17f76:	4613      	mov	r3, r2
   17f78:	80bb      	strh	r3, [r7, #4]
	volatile uint8_t tx[4], rx[4];

	tx[0] = ram_read_or_write;
   17f7a:	79fb      	ldrb	r3, [r7, #7]
   17f7c:	753b      	strb	r3, [r7, #20]
	tx[1] = (uint8_t)(start_address >> 8);
   17f7e:	88bb      	ldrh	r3, [r7, #4]
   17f80:	121b      	asrs	r3, r3, #8
   17f82:	b2db      	uxtb	r3, r3
   17f84:	757b      	strb	r3, [r7, #21]
	tx[2] = (uint8_t)start_address;
   17f86:	88bb      	ldrh	r3, [r7, #4]
   17f88:	b2db      	uxtb	r3, r3
   17f8a:	75bb      	strb	r3, [r7, #22]
	tx[3] = input_data;
   17f8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   17f90:	75fb      	strb	r3, [r7, #23]
	spiLT->spi_transfer_block(chip_select, (uint8_t*)tx, (uint8_t*)rx, 4);
   17f92:	68fb      	ldr	r3, [r7, #12]
   17f94:	6998      	ldr	r0, [r3, #24]
   17f96:	f107 0110 	add.w	r1, r7, #16
   17f9a:	f107 0214 	add.w	r2, r7, #20
   17f9e:	2304      	movs	r3, #4
   17fa0:	9300      	str	r3, [sp, #0]
   17fa2:	460b      	mov	r3, r1
   17fa4:	68b9      	ldr	r1, [r7, #8]
   17fa6:	4c04      	ldr	r4, [pc, #16]	; (17fb8 <_ZN13LTC2983_Class13transfer_byteEmhth+0x54>)
   17fa8:	47a0      	blx	r4
	return rx[0];
   17faa:	7c3b      	ldrb	r3, [r7, #16]
   17fac:	b2db      	uxtb	r3, r3
}
   17fae:	4618      	mov	r0, r3
   17fb0:	371c      	adds	r7, #28
   17fb2:	46bd      	mov	sp, r7
   17fb4:	bd90      	pop	{r4, r7, pc}
   17fb6:	bf00      	nop
   17fb8:	00018301 	.word	0x00018301

00017fbc <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   17fbc:	b480      	push	{r7}
   17fbe:	b083      	sub	sp, #12
   17fc0:	af00      	add	r7, sp, #0
   17fc2:	6078      	str	r0, [r7, #4]
   17fc4:	460b      	mov	r3, r1
   17fc6:	807b      	strh	r3, [r7, #2]
   17fc8:	4613      	mov	r3, r2
   17fca:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   17fcc:	787b      	ldrb	r3, [r7, #1]
   17fce:	3b01      	subs	r3, #1
   17fd0:	b29b      	uxth	r3, r3
   17fd2:	009b      	lsls	r3, r3, #2
   17fd4:	b29a      	uxth	r2, r3
   17fd6:	887b      	ldrh	r3, [r7, #2]
   17fd8:	4413      	add	r3, r2
   17fda:	b29b      	uxth	r3, r3
}
   17fdc:	4618      	mov	r0, r3
   17fde:	370c      	adds	r7, #12
   17fe0:	46bd      	mov	sp, r7
   17fe2:	bc80      	pop	{r7}
   17fe4:	4770      	bx	lr
	...

00017fe8 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   17fe8:	b590      	push	{r4, r7, lr}
   17fea:	b085      	sub	sp, #20
   17fec:	af00      	add	r7, sp, #0
   17fee:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	// ----- Channel 2: Assign Sense Resistor -----
	channel_assignment_data =
   17ff0:	4b1c      	ldr	r3, [pc, #112]	; (18064 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   17ff2:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 2, channel_assignment_data);
   17ff4:	687b      	ldr	r3, [r7, #4]
   17ff6:	6c19      	ldr	r1, [r3, #64]	; 0x40
   17ff8:	68fb      	ldr	r3, [r7, #12]
   17ffa:	2202      	movs	r2, #2
   17ffc:	6878      	ldr	r0, [r7, #4]
   17ffe:	4c1a      	ldr	r4, [pc, #104]	; (18068 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18000:	47a0      	blx	r4
	// ----- Channel 4: Assign RTD PT-100 -----
	channel_assignment_data =
   18002:	4b1a      	ldr	r3, [pc, #104]	; (1806c <_ZN13LTC2983_Class18configure_channelsEv+0x84>)
   18004:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__2 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 4, channel_assignment_data);
   18006:	687b      	ldr	r3, [r7, #4]
   18008:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1800a:	68fb      	ldr	r3, [r7, #12]
   1800c:	2204      	movs	r2, #4
   1800e:	6878      	ldr	r0, [r7, #4]
   18010:	4c15      	ldr	r4, [pc, #84]	; (18068 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18012:	47a0      	blx	r4
	// ----- Channel 6: Assign Sense Resistor -----
	channel_assignment_data =
   18014:	4b13      	ldr	r3, [pc, #76]	; (18064 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   18016:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 6, channel_assignment_data);
   18018:	687b      	ldr	r3, [r7, #4]
   1801a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1801c:	68fb      	ldr	r3, [r7, #12]
   1801e:	2206      	movs	r2, #6
   18020:	6878      	ldr	r0, [r7, #4]
   18022:	4c11      	ldr	r4, [pc, #68]	; (18068 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18024:	47a0      	blx	r4
	// ----- Channel 8: Assign RTD PT-100 -----
	channel_assignment_data =
   18026:	4b12      	ldr	r3, [pc, #72]	; (18070 <_ZN13LTC2983_Class18configure_channelsEv+0x88>)
   18028:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__6 |
	RTD_NUM_WIRES__4_WIRE |
	RTD_EXCITATION_MODE__ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 8, channel_assignment_data);
   1802a:	687b      	ldr	r3, [r7, #4]
   1802c:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1802e:	68fb      	ldr	r3, [r7, #12]
   18030:	2208      	movs	r2, #8
   18032:	6878      	ldr	r0, [r7, #4]
   18034:	4c0c      	ldr	r4, [pc, #48]	; (18068 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18036:	47a0      	blx	r4
	// ----- Channel 13: Assign Sense Resistor -----
	channel_assignment_data =
   18038:	4b0a      	ldr	r3, [pc, #40]	; (18064 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   1803a:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 13, channel_assignment_data);
   1803c:	687b      	ldr	r3, [r7, #4]
   1803e:	6c19      	ldr	r1, [r3, #64]	; 0x40
   18040:	68fb      	ldr	r3, [r7, #12]
   18042:	220d      	movs	r2, #13
   18044:	6878      	ldr	r0, [r7, #4]
   18046:	4c08      	ldr	r4, [pc, #32]	; (18068 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18048:	47a0      	blx	r4
	// ----- Channel 15: Assign RTD PT-100 -----
	channel_assignment_data =
   1804a:	4b0a      	ldr	r3, [pc, #40]	; (18074 <_ZN13LTC2983_Class18configure_channelsEv+0x8c>)
   1804c:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__13 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 15, channel_assignment_data);
   1804e:	687b      	ldr	r3, [r7, #4]
   18050:	6c19      	ldr	r1, [r3, #64]	; 0x40
   18052:	68fb      	ldr	r3, [r7, #12]
   18054:	220f      	movs	r2, #15
   18056:	6878      	ldr	r0, [r7, #4]
   18058:	4c03      	ldr	r4, [pc, #12]	; (18068 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   1805a:	47a0      	blx	r4

}
   1805c:	bf00      	nop
   1805e:	3714      	adds	r7, #20
   18060:	46bd      	mov	sp, r7
   18062:	bd90      	pop	{r4, r7, pc}
   18064:	e89c4000 	.word	0xe89c4000
   18068:	00017c09 	.word	0x00017c09
   1806c:	60851000 	.word	0x60851000
   18070:	61a91000 	.word	0x61a91000
   18074:	63451000 	.word	0x63451000

00018078 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   18078:	b590      	push	{r4, r7, lr}
   1807a:	b085      	sub	sp, #20
   1807c:	af02      	add	r7, sp, #8
   1807e:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   18080:	687b      	ldr	r3, [r7, #4]
   18082:	6c19      	ldr	r1, [r3, #64]	; 0x40
	REJECTION__50_60_HZ);
   18084:	2300      	movs	r3, #0
   18086:	9300      	str	r3, [sp, #0]
   18088:	23f0      	movs	r3, #240	; 0xf0
   1808a:	2202      	movs	r2, #2
   1808c:	6878      	ldr	r0, [r7, #4]
   1808e:	4c07      	ldr	r4, [pc, #28]	; (180ac <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   18090:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   18092:	687b      	ldr	r3, [r7, #4]
   18094:	6c19      	ldr	r1, [r3, #64]	; 0x40
   18096:	2300      	movs	r3, #0
   18098:	9300      	str	r3, [sp, #0]
   1809a:	23ff      	movs	r3, #255	; 0xff
   1809c:	2202      	movs	r2, #2
   1809e:	6878      	ldr	r0, [r7, #4]
   180a0:	4c02      	ldr	r4, [pc, #8]	; (180ac <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   180a2:	47a0      	blx	r4
}
   180a4:	bf00      	nop
   180a6:	370c      	adds	r7, #12
   180a8:	46bd      	mov	sp, r7
   180aa:	bd90      	pop	{r4, r7, pc}
   180ac:	00017f65 	.word	0x00017f65

000180b0 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   180b0:	b580      	push	{r7, lr}
   180b2:	b082      	sub	sp, #8
   180b4:	af00      	add	r7, sp, #0
   180b6:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   180b8:	687b      	ldr	r3, [r7, #4]
   180ba:	2200      	movs	r2, #0
   180bc:	f883 2020 	strb.w	r2, [r3, #32]

	meassureTimeout=false;
   180c0:	687b      	ldr	r3, [r7, #4]
   180c2:	2200      	movs	r2, #0
   180c4:	709a      	strb	r2, [r3, #2]
	auxTimer->Start_oneShot_task((FUNC_PTR)MeassureTimeout,5000);
   180c6:	687b      	ldr	r3, [r7, #4]
   180c8:	69db      	ldr	r3, [r3, #28]
   180ca:	f241 3288 	movw	r2, #5000	; 0x1388
   180ce:	4927      	ldr	r1, [pc, #156]	; (1816c <_ZN13LTC2983_Class8SelfTestEv+0xbc>)
   180d0:	4618      	mov	r0, r3
   180d2:	4b27      	ldr	r3, [pc, #156]	; (18170 <_ZN13LTC2983_Class8SelfTestEv+0xc0>)
   180d4:	4798      	blx	r3
			ready=false;
   180d6:	687b      	ldr	r3, [r7, #4]
   180d8:	2200      	movs	r2, #0
   180da:	701a      	strb	r2, [r3, #0]
			ConvertAsyncChannelIndex(1);
   180dc:	2101      	movs	r1, #1
   180de:	6878      	ldr	r0, [r7, #4]
   180e0:	4b24      	ldr	r3, [pc, #144]	; (18174 <_ZN13LTC2983_Class8SelfTestEv+0xc4>)
   180e2:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   180e4:	687b      	ldr	r3, [r7, #4]
   180e6:	799b      	ldrb	r3, [r3, #6]
   180e8:	2b01      	cmp	r3, #1
   180ea:	d009      	beq.n	18100 <_ZN13LTC2983_Class8SelfTestEv+0x50>
   180ec:	687b      	ldr	r3, [r7, #4]
   180ee:	789b      	ldrb	r3, [r3, #2]
   180f0:	b2db      	uxtb	r3, r3
   180f2:	f083 0301 	eor.w	r3, r3, #1
   180f6:	b2db      	uxtb	r3, r3
   180f8:	2b00      	cmp	r3, #0
   180fa:	d001      	beq.n	18100 <_ZN13LTC2983_Class8SelfTestEv+0x50>
   180fc:	2301      	movs	r3, #1
   180fe:	e000      	b.n	18102 <_ZN13LTC2983_Class8SelfTestEv+0x52>
   18100:	2300      	movs	r3, #0
   18102:	2b00      	cmp	r3, #0
   18104:	d022      	beq.n	1814c <_ZN13LTC2983_Class8SelfTestEv+0x9c>

		delay_ms(1);
   18106:	2001      	movs	r0, #1
   18108:	4b1b      	ldr	r3, [pc, #108]	; (18178 <_ZN13LTC2983_Class8SelfTestEv+0xc8>)
   1810a:	4798      	blx	r3
		while((!ready)&&(!meassureTimeout))
   1810c:	687b      	ldr	r3, [r7, #4]
   1810e:	781b      	ldrb	r3, [r3, #0]
   18110:	b2db      	uxtb	r3, r3
   18112:	f083 0301 	eor.w	r3, r3, #1
   18116:	b2db      	uxtb	r3, r3
   18118:	2b00      	cmp	r3, #0
   1811a:	d009      	beq.n	18130 <_ZN13LTC2983_Class8SelfTestEv+0x80>
   1811c:	687b      	ldr	r3, [r7, #4]
   1811e:	789b      	ldrb	r3, [r3, #2]
   18120:	b2db      	uxtb	r3, r3
   18122:	f083 0301 	eor.w	r3, r3, #1
   18126:	b2db      	uxtb	r3, r3
   18128:	2b00      	cmp	r3, #0
   1812a:	d001      	beq.n	18130 <_ZN13LTC2983_Class8SelfTestEv+0x80>
   1812c:	2301      	movs	r3, #1
   1812e:	e000      	b.n	18132 <_ZN13LTC2983_Class8SelfTestEv+0x82>
   18130:	2300      	movs	r3, #0
   18132:	2b00      	cmp	r3, #0
   18134:	d006      	beq.n	18144 <_ZN13LTC2983_Class8SelfTestEv+0x94>
		GetSingleChannelResult(activeChannels[0]);
   18136:	687b      	ldr	r3, [r7, #4]
   18138:	78db      	ldrb	r3, [r3, #3]
   1813a:	4619      	mov	r1, r3
   1813c:	6878      	ldr	r0, [r7, #4]
   1813e:	4b0f      	ldr	r3, [pc, #60]	; (1817c <_ZN13LTC2983_Class8SelfTestEv+0xcc>)
   18140:	4798      	blx	r3
		while((!ready)&&(!meassureTimeout))
   18142:	e7e3      	b.n	1810c <_ZN13LTC2983_Class8SelfTestEv+0x5c>
		delay_ms(1);
   18144:	2001      	movs	r0, #1
   18146:	4b0c      	ldr	r3, [pc, #48]	; (18178 <_ZN13LTC2983_Class8SelfTestEv+0xc8>)
   18148:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   1814a:	e7cb      	b.n	180e4 <_ZN13LTC2983_Class8SelfTestEv+0x34>
	}
	

	isOK=fault_data==VALID_TEMPERATURE;
   1814c:	687b      	ldr	r3, [r7, #4]
   1814e:	799b      	ldrb	r3, [r3, #6]
   18150:	2b01      	cmp	r3, #1
   18152:	bf0c      	ite	eq
   18154:	2301      	moveq	r3, #1
   18156:	2300      	movne	r3, #0
   18158:	b2da      	uxtb	r2, r3
   1815a:	687b      	ldr	r3, [r7, #4]
   1815c:	751a      	strb	r2, [r3, #20]
	return	isOK;
   1815e:	687b      	ldr	r3, [r7, #4]
   18160:	7d1b      	ldrb	r3, [r3, #20]
	}
   18162:	4618      	mov	r0, r3
   18164:	3708      	adds	r7, #8
   18166:	46bd      	mov	sp, r7
   18168:	bd80      	pop	{r7, pc}
   1816a:	bf00      	nop
   1816c:	00017b5d 	.word	0x00017b5d
   18170:	00016b01 	.word	0x00016b01
   18174:	00017c5d 	.word	0x00017c5d
   18178:	00006021 	.word	0x00006021
   1817c:	00017da5 	.word	0x00017da5

00018180 <_ZlsIA17_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
   18180:	b580      	push	{r7, lr}
   18182:	b082      	sub	sp, #8
   18184:	af00      	add	r7, sp, #0
   18186:	6078      	str	r0, [r7, #4]
   18188:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
   1818a:	6839      	ldr	r1, [r7, #0]
   1818c:	6878      	ldr	r0, [r7, #4]
   1818e:	4b03      	ldr	r3, [pc, #12]	; (1819c <_ZlsIA17_cER5PrintS2_RKT_+0x1c>)
   18190:	4798      	blx	r3
   18192:	687b      	ldr	r3, [r7, #4]
   18194:	4618      	mov	r0, r3
   18196:	3708      	adds	r7, #8
   18198:	46bd      	mov	sp, r7
   1819a:	bd80      	pop	{r7, pc}
   1819c:	00017309 	.word	0x00017309

000181a0 <hri_port_set_OUT_reg>:
{
   181a0:	b480      	push	{r7}
   181a2:	b085      	sub	sp, #20
   181a4:	af00      	add	r7, sp, #0
   181a6:	60f8      	str	r0, [r7, #12]
   181a8:	460b      	mov	r3, r1
   181aa:	607a      	str	r2, [r7, #4]
   181ac:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   181ae:	7afb      	ldrb	r3, [r7, #11]
   181b0:	68fa      	ldr	r2, [r7, #12]
   181b2:	01db      	lsls	r3, r3, #7
   181b4:	4413      	add	r3, r2
   181b6:	3318      	adds	r3, #24
   181b8:	687a      	ldr	r2, [r7, #4]
   181ba:	601a      	str	r2, [r3, #0]
}
   181bc:	bf00      	nop
   181be:	3714      	adds	r7, #20
   181c0:	46bd      	mov	sp, r7
   181c2:	bc80      	pop	{r7}
   181c4:	4770      	bx	lr

000181c6 <hri_port_clear_OUT_reg>:
{
   181c6:	b480      	push	{r7}
   181c8:	b085      	sub	sp, #20
   181ca:	af00      	add	r7, sp, #0
   181cc:	60f8      	str	r0, [r7, #12]
   181ce:	460b      	mov	r3, r1
   181d0:	607a      	str	r2, [r7, #4]
   181d2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   181d4:	7afb      	ldrb	r3, [r7, #11]
   181d6:	68fa      	ldr	r2, [r7, #12]
   181d8:	01db      	lsls	r3, r3, #7
   181da:	4413      	add	r3, r2
   181dc:	3314      	adds	r3, #20
   181de:	687a      	ldr	r2, [r7, #4]
   181e0:	601a      	str	r2, [r3, #0]
}
   181e2:	bf00      	nop
   181e4:	3714      	adds	r7, #20
   181e6:	46bd      	mov	sp, r7
   181e8:	bc80      	pop	{r7}
   181ea:	4770      	bx	lr

000181ec <_gpio_set_level>:
{
   181ec:	b580      	push	{r7, lr}
   181ee:	b082      	sub	sp, #8
   181f0:	af00      	add	r7, sp, #0
   181f2:	4603      	mov	r3, r0
   181f4:	6039      	str	r1, [r7, #0]
   181f6:	71fb      	strb	r3, [r7, #7]
   181f8:	4613      	mov	r3, r2
   181fa:	71bb      	strb	r3, [r7, #6]
	if (level) {
   181fc:	79bb      	ldrb	r3, [r7, #6]
   181fe:	2b00      	cmp	r3, #0
   18200:	d006      	beq.n	18210 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   18202:	79fb      	ldrb	r3, [r7, #7]
   18204:	683a      	ldr	r2, [r7, #0]
   18206:	4619      	mov	r1, r3
   18208:	4806      	ldr	r0, [pc, #24]	; (18224 <_gpio_set_level+0x38>)
   1820a:	4b07      	ldr	r3, [pc, #28]	; (18228 <_gpio_set_level+0x3c>)
   1820c:	4798      	blx	r3
}
   1820e:	e005      	b.n	1821c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   18210:	79fb      	ldrb	r3, [r7, #7]
   18212:	683a      	ldr	r2, [r7, #0]
   18214:	4619      	mov	r1, r3
   18216:	4803      	ldr	r0, [pc, #12]	; (18224 <_gpio_set_level+0x38>)
   18218:	4b04      	ldr	r3, [pc, #16]	; (1822c <_gpio_set_level+0x40>)
   1821a:	4798      	blx	r3
}
   1821c:	bf00      	nop
   1821e:	3708      	adds	r7, #8
   18220:	46bd      	mov	sp, r7
   18222:	bd80      	pop	{r7, pc}
   18224:	41008000 	.word	0x41008000
   18228:	000181a1 	.word	0x000181a1
   1822c:	000181c7 	.word	0x000181c7

00018230 <gpio_set_pin_level>:
{
   18230:	b580      	push	{r7, lr}
   18232:	b082      	sub	sp, #8
   18234:	af00      	add	r7, sp, #0
   18236:	4603      	mov	r3, r0
   18238:	460a      	mov	r2, r1
   1823a:	71fb      	strb	r3, [r7, #7]
   1823c:	4613      	mov	r3, r2
   1823e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   18240:	79fb      	ldrb	r3, [r7, #7]
   18242:	115b      	asrs	r3, r3, #5
   18244:	b2d8      	uxtb	r0, r3
   18246:	79fb      	ldrb	r3, [r7, #7]
   18248:	f003 031f 	and.w	r3, r3, #31
   1824c:	2201      	movs	r2, #1
   1824e:	fa02 f303 	lsl.w	r3, r2, r3
   18252:	79ba      	ldrb	r2, [r7, #6]
   18254:	4619      	mov	r1, r3
   18256:	4b03      	ldr	r3, [pc, #12]	; (18264 <gpio_set_pin_level+0x34>)
   18258:	4798      	blx	r3
}
   1825a:	bf00      	nop
   1825c:	3708      	adds	r7, #8
   1825e:	46bd      	mov	sp, r7
   18260:	bd80      	pop	{r7, pc}
   18262:	bf00      	nop
   18264:	000181ed 	.word	0x000181ed

00018268 <_ZN6LT_SPIC1Ev>:

SPI_Asyn_Class LT_SPI::spiTemp;


// default constructor
LT_SPI::LT_SPI()
   18268:	b480      	push	{r7}
   1826a:	b083      	sub	sp, #12
   1826c:	af00      	add	r7, sp, #0
   1826e:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   18270:	4a04      	ldr	r2, [pc, #16]	; (18284 <_ZN6LT_SPIC1Ev+0x1c>)
   18272:	687b      	ldr	r3, [r7, #4]
   18274:	6013      	str	r3, [r2, #0]
} //LT_SPI
   18276:	687b      	ldr	r3, [r7, #4]
   18278:	4618      	mov	r0, r3
   1827a:	370c      	adds	r7, #12
   1827c:	46bd      	mov	sp, r7
   1827e:	bc80      	pop	{r7}
   18280:	4770      	bx	lr
   18282:	bf00      	nop
   18284:	20009f84 	.word	0x20009f84

00018288 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   18288:	b480      	push	{r7}
   1828a:	b083      	sub	sp, #12
   1828c:	af00      	add	r7, sp, #0
   1828e:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   18290:	687b      	ldr	r3, [r7, #4]
   18292:	4618      	mov	r0, r3
   18294:	370c      	adds	r7, #12
   18296:	46bd      	mov	sp, r7
   18298:	bc80      	pop	{r7}
   1829a:	4770      	bx	lr

0001829c <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   1829c:	b580      	push	{r7, lr}
   1829e:	b082      	sub	sp, #8
   182a0:	af00      	add	r7, sp, #0
   182a2:	6078      	str	r0, [r7, #4]
	spiTemp.set_descriptor(SPIA);
   182a4:	687b      	ldr	r3, [r7, #4]
   182a6:	685b      	ldr	r3, [r3, #4]
   182a8:	4619      	mov	r1, r3
   182aa:	4808      	ldr	r0, [pc, #32]	; (182cc <_ZN6LT_SPI4initEv+0x30>)
   182ac:	4b08      	ldr	r3, [pc, #32]	; (182d0 <_ZN6LT_SPI4initEv+0x34>)
   182ae:	4798      	blx	r3
	spiTemp.init();
   182b0:	4806      	ldr	r0, [pc, #24]	; (182cc <_ZN6LT_SPI4initEv+0x30>)
   182b2:	4b08      	ldr	r3, [pc, #32]	; (182d4 <_ZN6LT_SPI4initEv+0x38>)
   182b4:	4798      	blx	r3
	spiTemp.enable();
   182b6:	4805      	ldr	r0, [pc, #20]	; (182cc <_ZN6LT_SPI4initEv+0x30>)
   182b8:	4b07      	ldr	r3, [pc, #28]	; (182d8 <_ZN6LT_SPI4initEv+0x3c>)
   182ba:	4798      	blx	r3
	ready=true;
   182bc:	687b      	ldr	r3, [r7, #4]
   182be:	2201      	movs	r2, #1
   182c0:	701a      	strb	r2, [r3, #0]
}
   182c2:	bf00      	nop
   182c4:	3708      	adds	r7, #8
   182c6:	46bd      	mov	sp, r7
   182c8:	bd80      	pop	{r7, pc}
   182ca:	bf00      	nop
   182cc:	20009f88 	.word	0x20009f88
   182d0:	000184bd 	.word	0x000184bd
   182d4:	000184e1 	.word	0x000184e1
   182d8:	00018535 	.word	0x00018535

000182dc <_ZN6LT_SPI14set_descriptorEP22spi_m_async_descriptor>:
void	LT_SPI::set_descriptor(spi_m_async_descriptor * i2c_a){
   182dc:	b480      	push	{r7}
   182de:	b083      	sub	sp, #12
   182e0:	af00      	add	r7, sp, #0
   182e2:	6078      	str	r0, [r7, #4]
   182e4:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   182e6:	687b      	ldr	r3, [r7, #4]
   182e8:	683a      	ldr	r2, [r7, #0]
   182ea:	605a      	str	r2, [r3, #4]
	ptrLTSPIClass=this;
   182ec:	4a03      	ldr	r2, [pc, #12]	; (182fc <_ZN6LT_SPI14set_descriptorEP22spi_m_async_descriptor+0x20>)
   182ee:	687b      	ldr	r3, [r7, #4]
   182f0:	6013      	str	r3, [r2, #0]
}
   182f2:	bf00      	nop
   182f4:	370c      	adds	r7, #12
   182f6:	46bd      	mov	sp, r7
   182f8:	bc80      	pop	{r7}
   182fa:	4770      	bx	lr
   182fc:	20009f84 	.word	0x20009f84

00018300 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   18300:	b580      	push	{r7, lr}
   18302:	b086      	sub	sp, #24
   18304:	af00      	add	r7, sp, #0
   18306:	60f8      	str	r0, [r7, #12]
   18308:	60b9      	str	r1, [r7, #8]
   1830a:	607a      	str	r2, [r7, #4]
   1830c:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   1830e:	687b      	ldr	r3, [r7, #4]
   18310:	781b      	ldrb	r3, [r3, #0]
   18312:	75bb      	strb	r3, [r7, #22]
	gpio_set_pin_level(cs_pin,false)  ;               //! 1) Pull CS low
   18314:	68bb      	ldr	r3, [r7, #8]
   18316:	b2db      	uxtb	r3, r3
   18318:	2100      	movs	r1, #0
   1831a:	4618      	mov	r0, r3
   1831c:	4b32      	ldr	r3, [pc, #200]	; (183e8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xe8>)
   1831e:	4798      	blx	r3
	
	switch(rOrw){
   18320:	7dbb      	ldrb	r3, [r7, #22]
   18322:	2b02      	cmp	r3, #2
   18324:	d002      	beq.n	1832c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x2c>
   18326:	2b03      	cmp	r3, #3
   18328:	d010      	beq.n	1834c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x4c>
   1832a:	e038      	b.n	1839e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case WRITE_TO_RAM:
			spiTemp.write(tx,length);				//! 2) Read byte and send byte
   1832c:	f897 3020 	ldrb.w	r3, [r7, #32]
   18330:	461a      	mov	r2, r3
   18332:	6879      	ldr	r1, [r7, #4]
   18334:	482d      	ldr	r0, [pc, #180]	; (183ec <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xec>)
   18336:	4b2e      	ldr	r3, [pc, #184]	; (183f0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xf0>)
   18338:	4798      	blx	r3
			while(!spiTemp.xferDone);
   1833a:	4b2c      	ldr	r3, [pc, #176]	; (183ec <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xec>)
   1833c:	781b      	ldrb	r3, [r3, #0]
   1833e:	b2db      	uxtb	r3, r3
   18340:	f083 0301 	eor.w	r3, r3, #1
   18344:	b2db      	uxtb	r3, r3
   18346:	2b00      	cmp	r3, #0
   18348:	d042      	beq.n	183d0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xd0>
   1834a:	e7f6      	b.n	1833a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
			break;
		case READ_FROM_RAM:
			spiTemp.write(tx,3); 
   1834c:	2203      	movs	r2, #3
   1834e:	6879      	ldr	r1, [r7, #4]
   18350:	4826      	ldr	r0, [pc, #152]	; (183ec <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xec>)
   18352:	4b27      	ldr	r3, [pc, #156]	; (183f0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xf0>)
   18354:	4798      	blx	r3
			//while(!spiTemp.xferDone);
			if (length>4)
   18356:	f897 3020 	ldrb.w	r3, [r7, #32]
   1835a:	2b04      	cmp	r3, #4
   1835c:	dd19      	ble.n	18392 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x92>
			{
				for (uint8_t i=0;i<length;i++)
   1835e:	2300      	movs	r3, #0
   18360:	75fb      	strb	r3, [r7, #23]
   18362:	7dfa      	ldrb	r2, [r7, #23]
   18364:	f897 3020 	ldrb.w	r3, [r7, #32]
   18368:	429a      	cmp	r2, r3
   1836a:	da0b      	bge.n	18384 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x84>
				{
					//spiTemp.write(tx,1); tx++;
					//while(!spiTemp.xferDone);
					spiTemp.read(rx,1); 
   1836c:	2201      	movs	r2, #1
   1836e:	6839      	ldr	r1, [r7, #0]
   18370:	481e      	ldr	r0, [pc, #120]	; (183ec <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xec>)
   18372:	4b20      	ldr	r3, [pc, #128]	; (183f4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xf4>)
   18374:	4798      	blx	r3
						rx++;	
   18376:	683b      	ldr	r3, [r7, #0]
   18378:	3301      	adds	r3, #1
   1837a:	603b      	str	r3, [r7, #0]
				for (uint8_t i=0;i<length;i++)
   1837c:	7dfb      	ldrb	r3, [r7, #23]
   1837e:	3301      	adds	r3, #1
   18380:	75fb      	strb	r3, [r7, #23]
   18382:	e7ee      	b.n	18362 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x62>
				}
				rx-=length;
   18384:	f897 3020 	ldrb.w	r3, [r7, #32]
   18388:	425b      	negs	r3, r3
   1838a:	683a      	ldr	r2, [r7, #0]
   1838c:	4413      	add	r3, r2
   1838e:	603b      	str	r3, [r7, #0]
			else
			{
				spiTemp.read(rx,1);
			}
	
			break;
   18390:	e01f      	b.n	183d2 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xd2>
				spiTemp.read(rx,1);
   18392:	2201      	movs	r2, #1
   18394:	6839      	ldr	r1, [r7, #0]
   18396:	4815      	ldr	r0, [pc, #84]	; (183ec <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xec>)
   18398:	4b16      	ldr	r3, [pc, #88]	; (183f4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xf4>)
   1839a:	4798      	blx	r3
			break;
   1839c:	e019      	b.n	183d2 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xd2>
		default:
			spiTemp.write(tx,length);             //! 2) Read byte and send byte
   1839e:	f897 3020 	ldrb.w	r3, [r7, #32]
   183a2:	461a      	mov	r2, r3
   183a4:	6879      	ldr	r1, [r7, #4]
   183a6:	4811      	ldr	r0, [pc, #68]	; (183ec <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xec>)
   183a8:	4b11      	ldr	r3, [pc, #68]	; (183f0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xf0>)
   183aa:	4798      	blx	r3
			while(!spiTemp.xferDone);
   183ac:	4b0f      	ldr	r3, [pc, #60]	; (183ec <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xec>)
   183ae:	781b      	ldrb	r3, [r3, #0]
   183b0:	b2db      	uxtb	r3, r3
   183b2:	f083 0301 	eor.w	r3, r3, #1
   183b6:	b2db      	uxtb	r3, r3
   183b8:	2b00      	cmp	r3, #0
   183ba:	d000      	beq.n	183be <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbe>
   183bc:	e7f6      	b.n	183ac <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xac>
			spiTemp.read(rx,length-3);
   183be:	f897 3020 	ldrb.w	r3, [r7, #32]
   183c2:	3b03      	subs	r3, #3
   183c4:	461a      	mov	r2, r3
   183c6:	6839      	ldr	r1, [r7, #0]
   183c8:	4808      	ldr	r0, [pc, #32]	; (183ec <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xec>)
   183ca:	4b0a      	ldr	r3, [pc, #40]	; (183f4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xf4>)
   183cc:	4798      	blx	r3
			break;
   183ce:	e000      	b.n	183d2 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xd2>
			break;
   183d0:	bf00      	nop


	


	gpio_set_pin_level(cs_pin,true)   ;              //! 3) Pull CS high
   183d2:	68bb      	ldr	r3, [r7, #8]
   183d4:	b2db      	uxtb	r3, r3
   183d6:	2101      	movs	r1, #1
   183d8:	4618      	mov	r0, r3
   183da:	4b03      	ldr	r3, [pc, #12]	; (183e8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xe8>)
   183dc:	4798      	blx	r3
}
   183de:	bf00      	nop
   183e0:	3718      	adds	r7, #24
   183e2:	46bd      	mov	sp, r7
   183e4:	bd80      	pop	{r7, pc}
   183e6:	bf00      	nop
   183e8:	00018231 	.word	0x00018231
   183ec:	20009f88 	.word	0x20009f88
   183f0:	0001855d 	.word	0x0001855d
   183f4:	000185a1 	.word	0x000185a1

000183f8 <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp.read(&rx,1);
	return	(int8_t)rx;

}
   183f8:	b580      	push	{r7, lr}
   183fa:	b082      	sub	sp, #8
   183fc:	af00      	add	r7, sp, #0
   183fe:	6078      	str	r0, [r7, #4]
   18400:	6039      	str	r1, [r7, #0]
   18402:	687b      	ldr	r3, [r7, #4]
   18404:	2b01      	cmp	r3, #1
   18406:	d10c      	bne.n	18422 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   18408:	683b      	ldr	r3, [r7, #0]
   1840a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1840e:	4293      	cmp	r3, r2
   18410:	d107      	bne.n	18422 <_Z41__static_initialization_and_destruction_0ii+0x2a>
SPI_Asyn_Class LT_SPI::spiTemp;
   18412:	4806      	ldr	r0, [pc, #24]	; (1842c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   18414:	4b06      	ldr	r3, [pc, #24]	; (18430 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   18416:	4798      	blx	r3
   18418:	4a06      	ldr	r2, [pc, #24]	; (18434 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1841a:	4907      	ldr	r1, [pc, #28]	; (18438 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1841c:	4803      	ldr	r0, [pc, #12]	; (1842c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1841e:	4b07      	ldr	r3, [pc, #28]	; (1843c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   18420:	4798      	blx	r3
}
   18422:	bf00      	nop
   18424:	3708      	adds	r7, #8
   18426:	46bd      	mov	sp, r7
   18428:	bd80      	pop	{r7, pc}
   1842a:	bf00      	nop
   1842c:	20009f88 	.word	0x20009f88
   18430:	00018489 	.word	0x00018489
   18434:	20000000 	.word	0x20000000
   18438:	000184a9 	.word	0x000184a9
   1843c:	000187f1 	.word	0x000187f1

00018440 <_GLOBAL__sub_I_ptrLTSPIClass>:
   18440:	b580      	push	{r7, lr}
   18442:	af00      	add	r7, sp, #0
   18444:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18448:	2001      	movs	r0, #1
   1844a:	4b01      	ldr	r3, [pc, #4]	; (18450 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   1844c:	4798      	blx	r3
   1844e:	bd80      	pop	{r7, pc}
   18450:	000183f9 	.word	0x000183f9

00018454 <_ZL15complete_cb_SPIPK22spi_m_async_descriptor>:

#include "SPI_Asyn_Class.h"

 SPI_Asyn_Class* ptrSPIAClass;
static void complete_cb_SPI(const struct spi_m_async_descriptor *const io_descr)
{
   18454:	b480      	push	{r7}
   18456:	b083      	sub	sp, #12
   18458:	af00      	add	r7, sp, #0
   1845a:	6078      	str	r0, [r7, #4]

	ptrSPIAClass->xferDone=true;
   1845c:	4b04      	ldr	r3, [pc, #16]	; (18470 <_ZL15complete_cb_SPIPK22spi_m_async_descriptor+0x1c>)
   1845e:	681b      	ldr	r3, [r3, #0]
   18460:	2201      	movs	r2, #1
   18462:	701a      	strb	r2, [r3, #0]

}
   18464:	bf00      	nop
   18466:	370c      	adds	r7, #12
   18468:	46bd      	mov	sp, r7
   1846a:	bc80      	pop	{r7}
   1846c:	4770      	bx	lr
   1846e:	bf00      	nop
   18470:	20009fa8 	.word	0x20009fa8

00018474 <_ZL12error_cb_SPIPK22spi_m_async_descriptor>:
static void error_cb_SPI(const struct spi_m_async_descriptor *const io_descr)
{
   18474:	b480      	push	{r7}
   18476:	b083      	sub	sp, #12
   18478:	af00      	add	r7, sp, #0
   1847a:	6078      	str	r0, [r7, #4]

	//ptrSPIAClass->xferDone=true;

}
   1847c:	bf00      	nop
   1847e:	370c      	adds	r7, #12
   18480:	46bd      	mov	sp, r7
   18482:	bc80      	pop	{r7}
   18484:	4770      	bx	lr
	...

00018488 <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
   18488:	b480      	push	{r7}
   1848a:	b083      	sub	sp, #12
   1848c:	af00      	add	r7, sp, #0
   1848e:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
   18490:	4a04      	ldr	r2, [pc, #16]	; (184a4 <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
   18492:	687b      	ldr	r3, [r7, #4]
   18494:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
   18496:	687b      	ldr	r3, [r7, #4]
   18498:	4618      	mov	r0, r3
   1849a:	370c      	adds	r7, #12
   1849c:	46bd      	mov	sp, r7
   1849e:	bc80      	pop	{r7}
   184a0:	4770      	bx	lr
   184a2:	bf00      	nop
   184a4:	20009fa8 	.word	0x20009fa8

000184a8 <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
   184a8:	b480      	push	{r7}
   184aa:	b083      	sub	sp, #12
   184ac:	af00      	add	r7, sp, #0
   184ae:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
   184b0:	687b      	ldr	r3, [r7, #4]
   184b2:	4618      	mov	r0, r3
   184b4:	370c      	adds	r7, #12
   184b6:	46bd      	mov	sp, r7
   184b8:	bc80      	pop	{r7}
   184ba:	4770      	bx	lr

000184bc <_ZN14SPI_Asyn_Class14set_descriptorEP22spi_m_async_descriptor>:



void SPI_Asyn_Class::set_descriptor(spi_m_async_descriptor *spi){
   184bc:	b480      	push	{r7}
   184be:	b083      	sub	sp, #12
   184c0:	af00      	add	r7, sp, #0
   184c2:	6078      	str	r0, [r7, #4]
   184c4:	6039      	str	r1, [r7, #0]
	ptrSPIAClass=this;
   184c6:	4a05      	ldr	r2, [pc, #20]	; (184dc <_ZN14SPI_Asyn_Class14set_descriptorEP22spi_m_async_descriptor+0x20>)
   184c8:	687b      	ldr	r3, [r7, #4]
   184ca:	6013      	str	r3, [r2, #0]
	SPIA=spi;
   184cc:	687b      	ldr	r3, [r7, #4]
   184ce:	683a      	ldr	r2, [r7, #0]
   184d0:	615a      	str	r2, [r3, #20]
}
   184d2:	bf00      	nop
   184d4:	370c      	adds	r7, #12
   184d6:	46bd      	mov	sp, r7
   184d8:	bc80      	pop	{r7}
   184da:	4770      	bx	lr
   184dc:	20009fa8 	.word	0x20009fa8

000184e0 <_ZN14SPI_Asyn_Class4initEv>:

void SPI_Asyn_Class::init(){
   184e0:	b580      	push	{r7, lr}
   184e2:	b082      	sub	sp, #8
   184e4:	af00      	add	r7, sp, #0
   184e6:	6078      	str	r0, [r7, #4]

	spi_m_async_get_io_descriptor(SPIA, &spio);
   184e8:	687b      	ldr	r3, [r7, #4]
   184ea:	695a      	ldr	r2, [r3, #20]
   184ec:	687b      	ldr	r3, [r7, #4]
   184ee:	3310      	adds	r3, #16
   184f0:	4619      	mov	r1, r3
   184f2:	4610      	mov	r0, r2
   184f4:	4b0b      	ldr	r3, [pc, #44]	; (18524 <_ZN14SPI_Asyn_Class4initEv+0x44>)
   184f6:	4798      	blx	r3
	spi_m_async_register_callback(SPIA, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(complete_cb_SPI));
   184f8:	687b      	ldr	r3, [r7, #4]
   184fa:	695b      	ldr	r3, [r3, #20]
   184fc:	4a0a      	ldr	r2, [pc, #40]	; (18528 <_ZN14SPI_Asyn_Class4initEv+0x48>)
   184fe:	2100      	movs	r1, #0
   18500:	4618      	mov	r0, r3
   18502:	4b0a      	ldr	r3, [pc, #40]	; (1852c <_ZN14SPI_Asyn_Class4initEv+0x4c>)
   18504:	4798      	blx	r3
	spi_m_async_register_callback(SPIA, SPI_M_ASYNC_CB_ERROR, (FUNC_PTR)(error_cb_SPI));
   18506:	687b      	ldr	r3, [r7, #4]
   18508:	695b      	ldr	r3, [r3, #20]
   1850a:	4a09      	ldr	r2, [pc, #36]	; (18530 <_ZN14SPI_Asyn_Class4initEv+0x50>)
   1850c:	2101      	movs	r1, #1
   1850e:	4618      	mov	r0, r3
   18510:	4b06      	ldr	r3, [pc, #24]	; (1852c <_ZN14SPI_Asyn_Class4initEv+0x4c>)
   18512:	4798      	blx	r3
	xferDone=true;
   18514:	687b      	ldr	r3, [r7, #4]
   18516:	2201      	movs	r2, #1
   18518:	701a      	strb	r2, [r3, #0]
}
   1851a:	bf00      	nop
   1851c:	3708      	adds	r7, #8
   1851e:	46bd      	mov	sp, r7
   18520:	bd80      	pop	{r7, pc}
   18522:	bf00      	nop
   18524:	00006cfd 	.word	0x00006cfd
   18528:	00018455 	.word	0x00018455
   1852c:	00006c89 	.word	0x00006c89
   18530:	00018475 	.word	0x00018475

00018534 <_ZN14SPI_Asyn_Class6enableEv>:

int32_t SPI_Asyn_Class::enable(){
   18534:	b580      	push	{r7, lr}
   18536:	b082      	sub	sp, #8
   18538:	af00      	add	r7, sp, #0
   1853a:	6078      	str	r0, [r7, #4]

	spi_m_async_enable(SPIA);
   1853c:	687b      	ldr	r3, [r7, #4]
   1853e:	695b      	ldr	r3, [r3, #20]
   18540:	4618      	mov	r0, r3
   18542:	4b05      	ldr	r3, [pc, #20]	; (18558 <_ZN14SPI_Asyn_Class6enableEv+0x24>)
   18544:	4798      	blx	r3
	xferDone=true;
   18546:	687b      	ldr	r3, [r7, #4]
   18548:	2201      	movs	r2, #1
   1854a:	701a      	strb	r2, [r3, #0]

	return 0;
   1854c:	2300      	movs	r3, #0
}
   1854e:	4618      	mov	r0, r3
   18550:	3708      	adds	r7, #8
   18552:	46bd      	mov	sp, r7
   18554:	bd80      	pop	{r7, pc}
   18556:	bf00      	nop
   18558:	00006b5d 	.word	0x00006b5d

0001855c <_ZN14SPI_Asyn_Class5writeEPKhl>:

int32_t  SPI_Asyn_Class::write(const uint8_t * p, int32_t n){
   1855c:	b580      	push	{r7, lr}
   1855e:	b086      	sub	sp, #24
   18560:	af00      	add	r7, sp, #0
   18562:	60f8      	str	r0, [r7, #12]
   18564:	60b9      	str	r1, [r7, #8]
   18566:	607a      	str	r2, [r7, #4]

	while(!xferDone);
   18568:	68fb      	ldr	r3, [r7, #12]
   1856a:	781b      	ldrb	r3, [r3, #0]
   1856c:	b2db      	uxtb	r3, r3
   1856e:	f083 0301 	eor.w	r3, r3, #1
   18572:	b2db      	uxtb	r3, r3
   18574:	2b00      	cmp	r3, #0
   18576:	d000      	beq.n	1857a <_ZN14SPI_Asyn_Class5writeEPKhl+0x1e>
   18578:	e7f6      	b.n	18568 <_ZN14SPI_Asyn_Class5writeEPKhl+0xc>
	xferDone=false;
   1857a:	68fb      	ldr	r3, [r7, #12]
   1857c:	2200      	movs	r2, #0
   1857e:	701a      	strb	r2, [r3, #0]
	int32_t w= io_write(spio,p,(uint16_t)n);
   18580:	68fb      	ldr	r3, [r7, #12]
   18582:	691b      	ldr	r3, [r3, #16]
   18584:	687a      	ldr	r2, [r7, #4]
   18586:	b292      	uxth	r2, r2
   18588:	68b9      	ldr	r1, [r7, #8]
   1858a:	4618      	mov	r0, r3
   1858c:	4b03      	ldr	r3, [pc, #12]	; (1859c <_ZN14SPI_Asyn_Class5writeEPKhl+0x40>)
   1858e:	4798      	blx	r3
   18590:	6178      	str	r0, [r7, #20]
	 return w;
   18592:	697b      	ldr	r3, [r7, #20]
	
}
   18594:	4618      	mov	r0, r3
   18596:	3718      	adds	r7, #24
   18598:	46bd      	mov	sp, r7
   1859a:	bd80      	pop	{r7, pc}
   1859c:	00018751 	.word	0x00018751

000185a0 <_ZN14SPI_Asyn_Class4readEPhl>:
int32_t  SPI_Asyn_Class::read(uint8_t * p, int32_t n){
   185a0:	b580      	push	{r7, lr}
   185a2:	b086      	sub	sp, #24
   185a4:	af00      	add	r7, sp, #0
   185a6:	60f8      	str	r0, [r7, #12]
   185a8:	60b9      	str	r1, [r7, #8]
   185aa:	607a      	str	r2, [r7, #4]
	while(!xferDone);
   185ac:	68fb      	ldr	r3, [r7, #12]
   185ae:	781b      	ldrb	r3, [r3, #0]
   185b0:	b2db      	uxtb	r3, r3
   185b2:	f083 0301 	eor.w	r3, r3, #1
   185b6:	b2db      	uxtb	r3, r3
   185b8:	2b00      	cmp	r3, #0
   185ba:	d000      	beq.n	185be <_ZN14SPI_Asyn_Class4readEPhl+0x1e>
   185bc:	e7f6      	b.n	185ac <_ZN14SPI_Asyn_Class4readEPhl+0xc>
	xferDone=false;
   185be:	68fb      	ldr	r3, [r7, #12]
   185c0:	2200      	movs	r2, #0
   185c2:	701a      	strb	r2, [r3, #0]
	int32_t r=io_read(spio,p,(uint16_t)n);
   185c4:	68fb      	ldr	r3, [r7, #12]
   185c6:	691b      	ldr	r3, [r3, #16]
   185c8:	687a      	ldr	r2, [r7, #4]
   185ca:	b292      	uxth	r2, r2
   185cc:	68b9      	ldr	r1, [r7, #8]
   185ce:	4618      	mov	r0, r3
   185d0:	4b08      	ldr	r3, [pc, #32]	; (185f4 <_ZN14SPI_Asyn_Class4readEPhl+0x54>)
   185d2:	4798      	blx	r3
   185d4:	6178      	str	r0, [r7, #20]
	while((!xferDone));
   185d6:	68fb      	ldr	r3, [r7, #12]
   185d8:	781b      	ldrb	r3, [r3, #0]
   185da:	b2db      	uxtb	r3, r3
   185dc:	f083 0301 	eor.w	r3, r3, #1
   185e0:	b2db      	uxtb	r3, r3
   185e2:	2b00      	cmp	r3, #0
   185e4:	d000      	beq.n	185e8 <_ZN14SPI_Asyn_Class4readEPhl+0x48>
   185e6:	e7f6      	b.n	185d6 <_ZN14SPI_Asyn_Class4readEPhl+0x36>
	return  r;
   185e8:	697b      	ldr	r3, [r7, #20]
}
   185ea:	4618      	mov	r0, r3
   185ec:	3718      	adds	r7, #24
   185ee:	46bd      	mov	sp, r7
   185f0:	bd80      	pop	{r7, pc}
   185f2:	bf00      	nop
   185f4:	000187a1 	.word	0x000187a1

000185f8 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
   185f8:	4b02      	ldr	r3, [pc, #8]	; (18604 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
   185fa:	681a      	ldr	r2, [r3, #0]
   185fc:	6813      	ldr	r3, [r2, #0]
   185fe:	3301      	adds	r3, #1
   18600:	6013      	str	r3, [r2, #0]
   18602:	4770      	bx	lr
   18604:	20009fac 	.word	0x20009fac

00018608 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
   18608:	4b02      	ldr	r3, [pc, #8]	; (18614 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
   1860a:	681b      	ldr	r3, [r3, #0]
   1860c:	2200      	movs	r2, #0
   1860e:	711a      	strb	r2, [r3, #4]
   18610:	4770      	bx	lr
   18612:	bf00      	nop
   18614:	20009fac 	.word	0x20009fac

00018618 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
   18618:	b538      	push	{r3, r4, r5, lr}
   1861a:	4604      	mov	r4, r0
{
	ticks=0;
   1861c:	2300      	movs	r3, #0
   1861e:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
   18620:	4d04      	ldr	r5, [pc, #16]	; (18634 <_ZN16Maintenance_ToolD1Ev+0x1c>)
   18622:	4628      	mov	r0, r5
   18624:	4b04      	ldr	r3, [pc, #16]	; (18638 <_ZN16Maintenance_ToolD1Ev+0x20>)
   18626:	4798      	blx	r3
	interfaceTimer.Remove_task();
   18628:	4628      	mov	r0, r5
   1862a:	4b04      	ldr	r3, [pc, #16]	; (1863c <_ZN16Maintenance_ToolD1Ev+0x24>)
   1862c:	4798      	blx	r3
	
} //~Maintenance_Tool
   1862e:	4620      	mov	r0, r4
   18630:	bd38      	pop	{r3, r4, r5, pc}
   18632:	bf00      	nop
   18634:	20009f60 	.word	0x20009f60
   18638:	00017875 	.word	0x00017875
   1863c:	0001798d 	.word	0x0001798d

00018640 <_ZN16Maintenance_ToolC1Ev>:
	ptrMaintenanceTool=this;
   18640:	4a04      	ldr	r2, [pc, #16]	; (18654 <_ZN16Maintenance_ToolC1Ev+0x14>)
   18642:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
   18644:	2200      	movs	r2, #0
   18646:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	nextMaintenanceSyncTime = 0;
   1864a:	6482      	str	r2, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
   1864c:	64c2      	str	r2, [r0, #76]	; 0x4c
	ticks=0;
   1864e:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
   18650:	4770      	bx	lr
   18652:	bf00      	nop
   18654:	20009fac 	.word	0x20009fac

00018658 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
   18658:	b510      	push	{r4, lr}
		maintenanceIsConnected = isConnected;
   1865a:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
		if (isConnected)
   1865e:	b919      	cbnz	r1, 18668 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
   18660:	4808      	ldr	r0, [pc, #32]	; (18684 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   18662:	4b09      	ldr	r3, [pc, #36]	; (18688 <_ZN16Maintenance_Tool12setConnectedEb+0x30>)
   18664:	4798      	blx	r3
   18666:	bd10      	pop	{r4, pc}
			interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
   18668:	4c06      	ldr	r4, [pc, #24]	; (18684 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   1866a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1866e:	4907      	ldr	r1, [pc, #28]	; (1868c <_ZN16Maintenance_Tool12setConnectedEb+0x34>)
   18670:	4620      	mov	r0, r4
   18672:	4b07      	ldr	r3, [pc, #28]	; (18690 <_ZN16Maintenance_Tool12setConnectedEb+0x38>)
   18674:	4798      	blx	r3
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
   18676:	f64e 2260 	movw	r2, #60000	; 0xea60
   1867a:	4906      	ldr	r1, [pc, #24]	; (18694 <_ZN16Maintenance_Tool12setConnectedEb+0x3c>)
   1867c:	4620      	mov	r0, r4
   1867e:	4b06      	ldr	r3, [pc, #24]	; (18698 <_ZN16Maintenance_Tool12setConnectedEb+0x40>)
   18680:	4798      	blx	r3
   18682:	bd10      	pop	{r4, pc}
   18684:	20009f60 	.word	0x20009f60
   18688:	00017875 	.word	0x00017875
   1868c:	000185f9 	.word	0x000185f9
   18690:	00017905 	.word	0x00017905
   18694:	00018609 	.word	0x00018609
   18698:	00017955 	.word	0x00017955

0001869c <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
   1869c:	b510      	push	{r4, lr}
   1869e:	4604      	mov	r4, r0
	result=false;
   186a0:	2300      	movs	r3, #0
   186a2:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	magic=0;
   186a6:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	if (gotAccess==true)
   186aa:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
   186ae:	b12b      	cbz	r3, 186bc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
   186b0:	2301      	movs	r3, #1
   186b2:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	return	result;
   186b6:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
}
   186ba:	bd10      	pop	{r4, pc}
		if (usb.connected)
   186bc:	4b15      	ldr	r3, [pc, #84]	; (18714 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   186be:	7c1b      	ldrb	r3, [r3, #16]
   186c0:	2b00      	cmp	r3, #0
   186c2:	d0f8      	beq.n	186b6 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
			if (usb.rxReady)
   186c4:	4b13      	ldr	r3, [pc, #76]	; (18714 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   186c6:	7d5b      	ldrb	r3, [r3, #21]
   186c8:	b18b      	cbz	r3, 186ee <_ZN16Maintenance_Tool14IsAppConnectedEv+0x52>
   186ca:	1d43      	adds	r3, r0, #5
   186cc:	3009      	adds	r0, #9
   186ce:	2200      	movs	r2, #0
					magic|= localBuffer[i];
   186d0:	f813 1b01 	ldrb.w	r1, [r3], #1
   186d4:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
				for (int i = 0; i < 4; i++)
   186d8:	4283      	cmp	r3, r0
   186da:	d1f9      	bne.n	186d0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x34>
   186dc:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
				xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
   186e0:	4b0d      	ldr	r3, [pc, #52]	; (18718 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
   186e2:	ea82 0103 	eor.w	r1, r2, r3
   186e6:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
				if (xorResult==0)
   186ea:	429a      	cmp	r2, r3
   186ec:	d005      	beq.n	186fa <_ZN16Maintenance_Tool14IsAppConnectedEv+0x5e>
			usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   186ee:	2240      	movs	r2, #64	; 0x40
   186f0:	1d61      	adds	r1, r4, #5
   186f2:	4808      	ldr	r0, [pc, #32]	; (18714 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   186f4:	4b09      	ldr	r3, [pc, #36]	; (1871c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
   186f6:	4798      	blx	r3
   186f8:	e7dd      	b.n	186b6 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
					gotAccess=true;
   186fa:	2101      	movs	r1, #1
   186fc:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
					result=true;
   18700:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
					is_MTPC_Beaming=true;
   18704:	7121      	strb	r1, [r4, #4]
					setConnected(true);
   18706:	4620      	mov	r0, r4
   18708:	4b05      	ldr	r3, [pc, #20]	; (18720 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
   1870a:	4798      	blx	r3
					return	result;
   1870c:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
   18710:	bd10      	pop	{r4, pc}
   18712:	bf00      	nop
   18714:	20009e88 	.word	0x20009e88
   18718:	61626364 	.word	0x61626364
   1871c:	00016fdd 	.word	0x00016fdd
   18720:	00018659 	.word	0x00018659

00018724 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
	}

}
   18724:	b510      	push	{r4, lr}
   18726:	4c05      	ldr	r4, [pc, #20]	; (1873c <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
   18728:	4620      	mov	r0, r4
   1872a:	4b05      	ldr	r3, [pc, #20]	; (18740 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
   1872c:	4798      	blx	r3
   1872e:	4a05      	ldr	r2, [pc, #20]	; (18744 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
   18730:	4905      	ldr	r1, [pc, #20]	; (18748 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
   18732:	4620      	mov	r0, r4
   18734:	4b05      	ldr	r3, [pc, #20]	; (1874c <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
   18736:	4798      	blx	r3
   18738:	bd10      	pop	{r4, pc}
   1873a:	bf00      	nop
   1873c:	20009fb0 	.word	0x20009fb0
   18740:	00018641 	.word	0x00018641
   18744:	20000000 	.word	0x20000000
   18748:	00018619 	.word	0x00018619
   1874c:	000187f1 	.word	0x000187f1

00018750 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   18750:	b580      	push	{r7, lr}
   18752:	b084      	sub	sp, #16
   18754:	af00      	add	r7, sp, #0
   18756:	60f8      	str	r0, [r7, #12]
   18758:	60b9      	str	r1, [r7, #8]
   1875a:	4613      	mov	r3, r2
   1875c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   1875e:	68fb      	ldr	r3, [r7, #12]
   18760:	2b00      	cmp	r3, #0
   18762:	d004      	beq.n	1876e <io_write+0x1e>
   18764:	68bb      	ldr	r3, [r7, #8]
   18766:	2b00      	cmp	r3, #0
   18768:	d001      	beq.n	1876e <io_write+0x1e>
   1876a:	2301      	movs	r3, #1
   1876c:	e000      	b.n	18770 <io_write+0x20>
   1876e:	2300      	movs	r3, #0
   18770:	f003 0301 	and.w	r3, r3, #1
   18774:	b2db      	uxtb	r3, r3
   18776:	2234      	movs	r2, #52	; 0x34
   18778:	4907      	ldr	r1, [pc, #28]	; (18798 <io_write+0x48>)
   1877a:	4618      	mov	r0, r3
   1877c:	4b07      	ldr	r3, [pc, #28]	; (1879c <io_write+0x4c>)
   1877e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   18780:	68fb      	ldr	r3, [r7, #12]
   18782:	681b      	ldr	r3, [r3, #0]
   18784:	88fa      	ldrh	r2, [r7, #6]
   18786:	68b9      	ldr	r1, [r7, #8]
   18788:	68f8      	ldr	r0, [r7, #12]
   1878a:	4798      	blx	r3
   1878c:	4603      	mov	r3, r0
}
   1878e:	4618      	mov	r0, r3
   18790:	3710      	adds	r7, #16
   18792:	46bd      	mov	sp, r7
   18794:	bd80      	pop	{r7, pc}
   18796:	bf00      	nop
   18798:	00020e9c 	.word	0x00020e9c
   1879c:	00007d91 	.word	0x00007d91

000187a0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   187a0:	b580      	push	{r7, lr}
   187a2:	b084      	sub	sp, #16
   187a4:	af00      	add	r7, sp, #0
   187a6:	60f8      	str	r0, [r7, #12]
   187a8:	60b9      	str	r1, [r7, #8]
   187aa:	4613      	mov	r3, r2
   187ac:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   187ae:	68fb      	ldr	r3, [r7, #12]
   187b0:	2b00      	cmp	r3, #0
   187b2:	d004      	beq.n	187be <io_read+0x1e>
   187b4:	68bb      	ldr	r3, [r7, #8]
   187b6:	2b00      	cmp	r3, #0
   187b8:	d001      	beq.n	187be <io_read+0x1e>
   187ba:	2301      	movs	r3, #1
   187bc:	e000      	b.n	187c0 <io_read+0x20>
   187be:	2300      	movs	r3, #0
   187c0:	f003 0301 	and.w	r3, r3, #1
   187c4:	b2db      	uxtb	r3, r3
   187c6:	223d      	movs	r2, #61	; 0x3d
   187c8:	4907      	ldr	r1, [pc, #28]	; (187e8 <io_read+0x48>)
   187ca:	4618      	mov	r0, r3
   187cc:	4b07      	ldr	r3, [pc, #28]	; (187ec <io_read+0x4c>)
   187ce:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   187d0:	68fb      	ldr	r3, [r7, #12]
   187d2:	685b      	ldr	r3, [r3, #4]
   187d4:	88fa      	ldrh	r2, [r7, #6]
   187d6:	68b9      	ldr	r1, [r7, #8]
   187d8:	68f8      	ldr	r0, [r7, #12]
   187da:	4798      	blx	r3
   187dc:	4603      	mov	r3, r0
}
   187de:	4618      	mov	r0, r3
   187e0:	3710      	adds	r7, #16
   187e2:	46bd      	mov	sp, r7
   187e4:	bd80      	pop	{r7, pc}
   187e6:	bf00      	nop
   187e8:	00020e9c 	.word	0x00020e9c
   187ec:	00007d91 	.word	0x00007d91

000187f0 <__aeabi_atexit>:
   187f0:	460b      	mov	r3, r1
   187f2:	4601      	mov	r1, r0
   187f4:	4618      	mov	r0, r3
   187f6:	f002 ba41 	b.w	1ac7c <__cxa_atexit>
   187fa:	bf00      	nop

000187fc <_ZdlPvj>:
   187fc:	f7fb ba1e 	b.w	13c3c <_ZdlPv>

00018800 <floor>:
   18800:	f3c1 520a 	ubfx	r2, r1, #20, #11
   18804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18808:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   1880c:	2e13      	cmp	r6, #19
   1880e:	460b      	mov	r3, r1
   18810:	460d      	mov	r5, r1
   18812:	4604      	mov	r4, r0
   18814:	4688      	mov	r8, r1
   18816:	4607      	mov	r7, r0
   18818:	dc1d      	bgt.n	18856 <floor+0x56>
   1881a:	2e00      	cmp	r6, #0
   1881c:	db40      	blt.n	188a0 <floor+0xa0>
   1881e:	4a3c      	ldr	r2, [pc, #240]	; (18910 <floor+0x110>)
   18820:	fa42 f906 	asr.w	r9, r2, r6
   18824:	ea01 0209 	and.w	r2, r1, r9
   18828:	4302      	orrs	r2, r0
   1882a:	4686      	mov	lr, r0
   1882c:	d018      	beq.n	18860 <floor+0x60>
   1882e:	a336      	add	r3, pc, #216	; (adr r3, 18908 <floor+0x108>)
   18830:	e9d3 2300 	ldrd	r2, r3, [r3]
   18834:	f001 f91c 	bl	19a70 <__adddf3>
   18838:	2200      	movs	r2, #0
   1883a:	2300      	movs	r3, #0
   1883c:	f001 fd5a 	bl	1a2f4 <__aeabi_dcmpgt>
   18840:	b120      	cbz	r0, 1884c <floor+0x4c>
   18842:	2d00      	cmp	r5, #0
   18844:	db42      	blt.n	188cc <floor+0xcc>
   18846:	ea28 0509 	bic.w	r5, r8, r9
   1884a:	2700      	movs	r7, #0
   1884c:	463c      	mov	r4, r7
   1884e:	4629      	mov	r1, r5
   18850:	4620      	mov	r0, r4
   18852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18856:	2e33      	cmp	r6, #51	; 0x33
   18858:	dd06      	ble.n	18868 <floor+0x68>
   1885a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1885e:	d02f      	beq.n	188c0 <floor+0xc0>
   18860:	4619      	mov	r1, r3
   18862:	4620      	mov	r0, r4
   18864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18868:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   1886c:	f04f 39ff 	mov.w	r9, #4294967295
   18870:	fa29 f902 	lsr.w	r9, r9, r2
   18874:	ea10 0f09 	tst.w	r0, r9
   18878:	d0f2      	beq.n	18860 <floor+0x60>
   1887a:	a323      	add	r3, pc, #140	; (adr r3, 18908 <floor+0x108>)
   1887c:	e9d3 2300 	ldrd	r2, r3, [r3]
   18880:	f001 f8f6 	bl	19a70 <__adddf3>
   18884:	2200      	movs	r2, #0
   18886:	2300      	movs	r3, #0
   18888:	f001 fd34 	bl	1a2f4 <__aeabi_dcmpgt>
   1888c:	2800      	cmp	r0, #0
   1888e:	d0dd      	beq.n	1884c <floor+0x4c>
   18890:	2d00      	cmp	r5, #0
   18892:	db21      	blt.n	188d8 <floor+0xd8>
   18894:	4645      	mov	r5, r8
   18896:	ea27 0709 	bic.w	r7, r7, r9
   1889a:	463c      	mov	r4, r7
   1889c:	4629      	mov	r1, r5
   1889e:	e7d7      	b.n	18850 <floor+0x50>
   188a0:	a319      	add	r3, pc, #100	; (adr r3, 18908 <floor+0x108>)
   188a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   188a6:	f001 f8e3 	bl	19a70 <__adddf3>
   188aa:	2200      	movs	r2, #0
   188ac:	2300      	movs	r3, #0
   188ae:	f001 fd21 	bl	1a2f4 <__aeabi_dcmpgt>
   188b2:	2800      	cmp	r0, #0
   188b4:	d0ca      	beq.n	1884c <floor+0x4c>
   188b6:	2d00      	cmp	r5, #0
   188b8:	db19      	blt.n	188ee <floor+0xee>
   188ba:	2700      	movs	r7, #0
   188bc:	463d      	mov	r5, r7
   188be:	e7c5      	b.n	1884c <floor+0x4c>
   188c0:	4602      	mov	r2, r0
   188c2:	460b      	mov	r3, r1
   188c4:	f001 f8d4 	bl	19a70 <__adddf3>
   188c8:	4604      	mov	r4, r0
   188ca:	e7ca      	b.n	18862 <floor+0x62>
   188cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   188d0:	fa43 f606 	asr.w	r6, r3, r6
   188d4:	44b0      	add	r8, r6
   188d6:	e7b6      	b.n	18846 <floor+0x46>
   188d8:	2e14      	cmp	r6, #20
   188da:	d010      	beq.n	188fe <floor+0xfe>
   188dc:	2301      	movs	r3, #1
   188de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   188e2:	fa03 f606 	lsl.w	r6, r3, r6
   188e6:	1937      	adds	r7, r6, r4
   188e8:	bf28      	it	cs
   188ea:	4498      	addcs	r8, r3
   188ec:	e7d2      	b.n	18894 <floor+0x94>
   188ee:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   188f2:	4b08      	ldr	r3, [pc, #32]	; (18914 <floor+0x114>)
   188f4:	4322      	orrs	r2, r4
   188f6:	bf18      	it	ne
   188f8:	461d      	movne	r5, r3
   188fa:	2700      	movs	r7, #0
   188fc:	e7a6      	b.n	1884c <floor+0x4c>
   188fe:	f105 0801 	add.w	r8, r5, #1
   18902:	e7c7      	b.n	18894 <floor+0x94>
   18904:	f3af 8000 	nop.w
   18908:	8800759c 	.word	0x8800759c
   1890c:	7e37e43c 	.word	0x7e37e43c
   18910:	000fffff 	.word	0x000fffff
   18914:	bff00000 	.word	0xbff00000

00018918 <pow>:
   18918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1891c:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 18c10 <pow+0x2f8>
   18920:	b08d      	sub	sp, #52	; 0x34
   18922:	4606      	mov	r6, r0
   18924:	460f      	mov	r7, r1
   18926:	4614      	mov	r4, r2
   18928:	461d      	mov	r5, r3
   1892a:	f000 f975 	bl	18c18 <__ieee754_pow>
   1892e:	f999 8000 	ldrsb.w	r8, [r9]
   18932:	f1b8 3fff 	cmp.w	r8, #4294967295
   18936:	e9cd 0100 	strd	r0, r1, [sp]
   1893a:	d036      	beq.n	189aa <pow+0x92>
   1893c:	4622      	mov	r2, r4
   1893e:	462b      	mov	r3, r5
   18940:	4620      	mov	r0, r4
   18942:	4629      	mov	r1, r5
   18944:	f001 fce0 	bl	1a308 <__aeabi_dcmpun>
   18948:	4683      	mov	fp, r0
   1894a:	bb70      	cbnz	r0, 189aa <pow+0x92>
   1894c:	4632      	mov	r2, r6
   1894e:	463b      	mov	r3, r7
   18950:	4630      	mov	r0, r6
   18952:	4639      	mov	r1, r7
   18954:	f001 fcd8 	bl	1a308 <__aeabi_dcmpun>
   18958:	2200      	movs	r2, #0
   1895a:	4682      	mov	sl, r0
   1895c:	2300      	movs	r3, #0
   1895e:	2800      	cmp	r0, #0
   18960:	f040 80a0 	bne.w	18aa4 <pow+0x18c>
   18964:	4630      	mov	r0, r6
   18966:	4639      	mov	r1, r7
   18968:	f001 fc9c 	bl	1a2a4 <__aeabi_dcmpeq>
   1896c:	b310      	cbz	r0, 189b4 <pow+0x9c>
   1896e:	2200      	movs	r2, #0
   18970:	2300      	movs	r3, #0
   18972:	4620      	mov	r0, r4
   18974:	4629      	mov	r1, r5
   18976:	f001 fc95 	bl	1a2a4 <__aeabi_dcmpeq>
   1897a:	4683      	mov	fp, r0
   1897c:	2800      	cmp	r0, #0
   1897e:	d06a      	beq.n	18a56 <pow+0x13e>
   18980:	2201      	movs	r2, #1
   18982:	4b9c      	ldr	r3, [pc, #624]	; (18bf4 <pow+0x2dc>)
   18984:	9202      	str	r2, [sp, #8]
   18986:	2100      	movs	r1, #0
   18988:	2200      	movs	r2, #0
   1898a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1898e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18992:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18996:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1899a:	9303      	str	r3, [sp, #12]
   1899c:	f1b8 0f00 	cmp.w	r8, #0
   189a0:	d045      	beq.n	18a2e <pow+0x116>
   189a2:	4c95      	ldr	r4, [pc, #596]	; (18bf8 <pow+0x2e0>)
   189a4:	2300      	movs	r3, #0
   189a6:	e9cd 3400 	strd	r3, r4, [sp]
   189aa:	e9dd 0100 	ldrd	r0, r1, [sp]
   189ae:	b00d      	add	sp, #52	; 0x34
   189b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189b4:	e9dd 0100 	ldrd	r0, r1, [sp]
   189b8:	f000 ff34 	bl	19824 <finite>
   189bc:	4680      	mov	r8, r0
   189be:	2800      	cmp	r0, #0
   189c0:	f000 808b 	beq.w	18ada <pow+0x1c2>
   189c4:	f04f 0a00 	mov.w	sl, #0
   189c8:	f04f 0b00 	mov.w	fp, #0
   189cc:	4652      	mov	r2, sl
   189ce:	465b      	mov	r3, fp
   189d0:	e9dd 0100 	ldrd	r0, r1, [sp]
   189d4:	f001 fc66 	bl	1a2a4 <__aeabi_dcmpeq>
   189d8:	2800      	cmp	r0, #0
   189da:	d0e6      	beq.n	189aa <pow+0x92>
   189dc:	4630      	mov	r0, r6
   189de:	4639      	mov	r1, r7
   189e0:	f000 ff20 	bl	19824 <finite>
   189e4:	2800      	cmp	r0, #0
   189e6:	d0e0      	beq.n	189aa <pow+0x92>
   189e8:	4620      	mov	r0, r4
   189ea:	4629      	mov	r1, r5
   189ec:	f000 ff1a 	bl	19824 <finite>
   189f0:	2800      	cmp	r0, #0
   189f2:	d0da      	beq.n	189aa <pow+0x92>
   189f4:	f999 3000 	ldrsb.w	r3, [r9]
   189f8:	4a7e      	ldr	r2, [pc, #504]	; (18bf4 <pow+0x2dc>)
   189fa:	9203      	str	r2, [sp, #12]
   189fc:	2104      	movs	r1, #4
   189fe:	2200      	movs	r2, #0
   18a00:	2b02      	cmp	r3, #2
   18a02:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18a06:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18a0a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   18a0e:	9102      	str	r1, [sp, #8]
   18a10:	920a      	str	r2, [sp, #40]	; 0x28
   18a12:	d003      	beq.n	18a1c <pow+0x104>
   18a14:	a802      	add	r0, sp, #8
   18a16:	f000 ff0b 	bl	19830 <matherr>
   18a1a:	b968      	cbnz	r0, 18a38 <pow+0x120>
   18a1c:	f002 f93a 	bl	1ac94 <__errno>
   18a20:	2322      	movs	r3, #34	; 0x22
   18a22:	6003      	str	r3, [r0, #0]
   18a24:	e008      	b.n	18a38 <pow+0x120>
   18a26:	2300      	movs	r3, #0
   18a28:	2400      	movs	r4, #0
   18a2a:	e9cd 3408 	strd	r3, r4, [sp, #32]
   18a2e:	a802      	add	r0, sp, #8
   18a30:	f000 fefe 	bl	19830 <matherr>
   18a34:	2800      	cmp	r0, #0
   18a36:	d030      	beq.n	18a9a <pow+0x182>
   18a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18a3a:	b11b      	cbz	r3, 18a44 <pow+0x12c>
   18a3c:	f002 f92a 	bl	1ac94 <__errno>
   18a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18a42:	6003      	str	r3, [r0, #0]
   18a44:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   18a48:	e9cd 3400 	strd	r3, r4, [sp]
   18a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
   18a50:	b00d      	add	sp, #52	; 0x34
   18a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a56:	4620      	mov	r0, r4
   18a58:	4629      	mov	r1, r5
   18a5a:	f000 fee3 	bl	19824 <finite>
   18a5e:	2800      	cmp	r0, #0
   18a60:	d0a3      	beq.n	189aa <pow+0x92>
   18a62:	2200      	movs	r2, #0
   18a64:	2300      	movs	r3, #0
   18a66:	4620      	mov	r0, r4
   18a68:	4629      	mov	r1, r5
   18a6a:	f001 fc25 	bl	1a2b8 <__aeabi_dcmplt>
   18a6e:	2800      	cmp	r0, #0
   18a70:	d09b      	beq.n	189aa <pow+0x92>
   18a72:	f999 3000 	ldrsb.w	r3, [r9]
   18a76:	4a5f      	ldr	r2, [pc, #380]	; (18bf4 <pow+0x2dc>)
   18a78:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   18a7c:	2101      	movs	r1, #1
   18a7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18a82:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18a86:	9102      	str	r1, [sp, #8]
   18a88:	9203      	str	r2, [sp, #12]
   18a8a:	2b00      	cmp	r3, #0
   18a8c:	d0cb      	beq.n	18a26 <pow+0x10e>
   18a8e:	495b      	ldr	r1, [pc, #364]	; (18bfc <pow+0x2e4>)
   18a90:	2000      	movs	r0, #0
   18a92:	2b02      	cmp	r3, #2
   18a94:	e9cd 0108 	strd	r0, r1, [sp, #32]
   18a98:	d1c9      	bne.n	18a2e <pow+0x116>
   18a9a:	f002 f8fb 	bl	1ac94 <__errno>
   18a9e:	2321      	movs	r3, #33	; 0x21
   18aa0:	6003      	str	r3, [r0, #0]
   18aa2:	e7c9      	b.n	18a38 <pow+0x120>
   18aa4:	4620      	mov	r0, r4
   18aa6:	4629      	mov	r1, r5
   18aa8:	f001 fbfc 	bl	1a2a4 <__aeabi_dcmpeq>
   18aac:	2800      	cmp	r0, #0
   18aae:	f43f af7c 	beq.w	189aa <pow+0x92>
   18ab2:	4b51      	ldr	r3, [pc, #324]	; (18bf8 <pow+0x2e0>)
   18ab4:	494f      	ldr	r1, [pc, #316]	; (18bf4 <pow+0x2dc>)
   18ab6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   18aba:	2001      	movs	r0, #1
   18abc:	2200      	movs	r2, #0
   18abe:	f1b8 0f02 	cmp.w	r8, #2
   18ac2:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18ac6:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18aca:	9002      	str	r0, [sp, #8]
   18acc:	9103      	str	r1, [sp, #12]
   18ace:	e9cd 2308 	strd	r2, r3, [sp, #32]
   18ad2:	d1ac      	bne.n	18a2e <pow+0x116>
   18ad4:	e9cd 2300 	strd	r2, r3, [sp]
   18ad8:	e767      	b.n	189aa <pow+0x92>
   18ada:	4630      	mov	r0, r6
   18adc:	4639      	mov	r1, r7
   18ade:	f000 fea1 	bl	19824 <finite>
   18ae2:	2800      	cmp	r0, #0
   18ae4:	f43f af6e 	beq.w	189c4 <pow+0xac>
   18ae8:	4620      	mov	r0, r4
   18aea:	4629      	mov	r1, r5
   18aec:	f000 fe9a 	bl	19824 <finite>
   18af0:	2800      	cmp	r0, #0
   18af2:	f43f af67 	beq.w	189c4 <pow+0xac>
   18af6:	e9dd 2300 	ldrd	r2, r3, [sp]
   18afa:	4610      	mov	r0, r2
   18afc:	4619      	mov	r1, r3
   18afe:	f001 fc03 	bl	1a308 <__aeabi_dcmpun>
   18b02:	2800      	cmp	r0, #0
   18b04:	d158      	bne.n	18bb8 <pow+0x2a0>
   18b06:	2303      	movs	r3, #3
   18b08:	f999 8000 	ldrsb.w	r8, [r9]
   18b0c:	9302      	str	r3, [sp, #8]
   18b0e:	4b39      	ldr	r3, [pc, #228]	; (18bf4 <pow+0x2dc>)
   18b10:	900a      	str	r0, [sp, #40]	; 0x28
   18b12:	9303      	str	r3, [sp, #12]
   18b14:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18b18:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18b1c:	2200      	movs	r2, #0
   18b1e:	2300      	movs	r3, #0
   18b20:	4630      	mov	r0, r6
   18b22:	4639      	mov	r1, r7
   18b24:	f1b8 0f00 	cmp.w	r8, #0
   18b28:	d126      	bne.n	18b78 <pow+0x260>
   18b2a:	4f35      	ldr	r7, [pc, #212]	; (18c00 <pow+0x2e8>)
   18b2c:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   18b30:	e9cd 6708 	strd	r6, r7, [sp, #32]
   18b34:	f001 fbc0 	bl	1a2b8 <__aeabi_dcmplt>
   18b38:	2800      	cmp	r0, #0
   18b3a:	f43f af6b 	beq.w	18a14 <pow+0xfc>
   18b3e:	2200      	movs	r2, #0
   18b40:	4b30      	ldr	r3, [pc, #192]	; (18c04 <pow+0x2ec>)
   18b42:	4620      	mov	r0, r4
   18b44:	4629      	mov	r1, r5
   18b46:	f001 f945 	bl	19dd4 <__aeabi_dmul>
   18b4a:	4604      	mov	r4, r0
   18b4c:	460d      	mov	r5, r1
   18b4e:	f000 fe77 	bl	19840 <rint>
   18b52:	4602      	mov	r2, r0
   18b54:	460b      	mov	r3, r1
   18b56:	4620      	mov	r0, r4
   18b58:	4629      	mov	r1, r5
   18b5a:	f001 fba3 	bl	1a2a4 <__aeabi_dcmpeq>
   18b5e:	bb40      	cbnz	r0, 18bb2 <pow+0x29a>
   18b60:	4b29      	ldr	r3, [pc, #164]	; (18c08 <pow+0x2f0>)
   18b62:	f999 8000 	ldrsb.w	r8, [r9]
   18b66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   18b6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   18b6e:	f1b8 0f02 	cmp.w	r8, #2
   18b72:	f47f af4f 	bne.w	18a14 <pow+0xfc>
   18b76:	e751      	b.n	18a1c <pow+0x104>
   18b78:	4f24      	ldr	r7, [pc, #144]	; (18c0c <pow+0x2f4>)
   18b7a:	2600      	movs	r6, #0
   18b7c:	e9cd 6708 	strd	r6, r7, [sp, #32]
   18b80:	f001 fb9a 	bl	1a2b8 <__aeabi_dcmplt>
   18b84:	2800      	cmp	r0, #0
   18b86:	d0f2      	beq.n	18b6e <pow+0x256>
   18b88:	2200      	movs	r2, #0
   18b8a:	4b1e      	ldr	r3, [pc, #120]	; (18c04 <pow+0x2ec>)
   18b8c:	4620      	mov	r0, r4
   18b8e:	4629      	mov	r1, r5
   18b90:	f001 f920 	bl	19dd4 <__aeabi_dmul>
   18b94:	4604      	mov	r4, r0
   18b96:	460d      	mov	r5, r1
   18b98:	f000 fe52 	bl	19840 <rint>
   18b9c:	4602      	mov	r2, r0
   18b9e:	460b      	mov	r3, r1
   18ba0:	4620      	mov	r0, r4
   18ba2:	4629      	mov	r1, r5
   18ba4:	f001 fb7e 	bl	1a2a4 <__aeabi_dcmpeq>
   18ba8:	b918      	cbnz	r0, 18bb2 <pow+0x29a>
   18baa:	4b14      	ldr	r3, [pc, #80]	; (18bfc <pow+0x2e4>)
   18bac:	2200      	movs	r2, #0
   18bae:	e9cd 2308 	strd	r2, r3, [sp, #32]
   18bb2:	f999 8000 	ldrsb.w	r8, [r9]
   18bb6:	e7da      	b.n	18b6e <pow+0x256>
   18bb8:	f999 9000 	ldrsb.w	r9, [r9]
   18bbc:	4b0d      	ldr	r3, [pc, #52]	; (18bf4 <pow+0x2dc>)
   18bbe:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   18bc2:	2201      	movs	r2, #1
   18bc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18bc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18bcc:	9202      	str	r2, [sp, #8]
   18bce:	9303      	str	r3, [sp, #12]
   18bd0:	f1b9 0f00 	cmp.w	r9, #0
   18bd4:	f43f af27 	beq.w	18a26 <pow+0x10e>
   18bd8:	2200      	movs	r2, #0
   18bda:	2300      	movs	r3, #0
   18bdc:	4610      	mov	r0, r2
   18bde:	4619      	mov	r1, r3
   18be0:	f001 fa22 	bl	1a028 <__aeabi_ddiv>
   18be4:	f1b9 0f02 	cmp.w	r9, #2
   18be8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   18bec:	f43f af55 	beq.w	18a9a <pow+0x182>
   18bf0:	e71d      	b.n	18a2e <pow+0x116>
   18bf2:	bf00      	nop
   18bf4:	00020eb0 	.word	0x00020eb0
   18bf8:	3ff00000 	.word	0x3ff00000
   18bfc:	fff00000 	.word	0xfff00000
   18c00:	47efffff 	.word	0x47efffff
   18c04:	3fe00000 	.word	0x3fe00000
   18c08:	c7efffff 	.word	0xc7efffff
   18c0c:	7ff00000 	.word	0x7ff00000
   18c10:	200001bb 	.word	0x200001bb
   18c14:	00000000 	.word	0x00000000

00018c18 <__ieee754_pow>:
   18c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c1c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   18c20:	ea57 0402 	orrs.w	r4, r7, r2
   18c24:	b093      	sub	sp, #76	; 0x4c
   18c26:	d037      	beq.n	18c98 <__ieee754_pow+0x80>
   18c28:	4c67      	ldr	r4, [pc, #412]	; (18dc8 <__ieee754_pow+0x1b0>)
   18c2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   18c2e:	42a6      	cmp	r6, r4
   18c30:	4683      	mov	fp, r0
   18c32:	460d      	mov	r5, r1
   18c34:	dc29      	bgt.n	18c8a <__ieee754_pow+0x72>
   18c36:	469a      	mov	sl, r3
   18c38:	4696      	mov	lr, r2
   18c3a:	d025      	beq.n	18c88 <__ieee754_pow+0x70>
   18c3c:	42a7      	cmp	r7, r4
   18c3e:	dc24      	bgt.n	18c8a <__ieee754_pow+0x72>
   18c40:	4c61      	ldr	r4, [pc, #388]	; (18dc8 <__ieee754_pow+0x1b0>)
   18c42:	42a7      	cmp	r7, r4
   18c44:	d079      	beq.n	18d3a <__ieee754_pow+0x122>
   18c46:	2d00      	cmp	r5, #0
   18c48:	4689      	mov	r9, r1
   18c4a:	4680      	mov	r8, r0
   18c4c:	e9cd 2300 	strd	r2, r3, [sp]
   18c50:	db77      	blt.n	18d42 <__ieee754_pow+0x12a>
   18c52:	2400      	movs	r4, #0
   18c54:	f1be 0f00 	cmp.w	lr, #0
   18c58:	d12c      	bne.n	18cb4 <__ieee754_pow+0x9c>
   18c5a:	4b5b      	ldr	r3, [pc, #364]	; (18dc8 <__ieee754_pow+0x1b0>)
   18c5c:	429f      	cmp	r7, r3
   18c5e:	f000 808b 	beq.w	18d78 <__ieee754_pow+0x160>
   18c62:	4b5a      	ldr	r3, [pc, #360]	; (18dcc <__ieee754_pow+0x1b4>)
   18c64:	429f      	cmp	r7, r3
   18c66:	d061      	beq.n	18d2c <__ieee754_pow+0x114>
   18c68:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   18c6c:	f000 83ba 	beq.w	193e4 <__ieee754_pow+0x7cc>
   18c70:	4b57      	ldr	r3, [pc, #348]	; (18dd0 <__ieee754_pow+0x1b8>)
   18c72:	459a      	cmp	sl, r3
   18c74:	d11e      	bne.n	18cb4 <__ieee754_pow+0x9c>
   18c76:	2d00      	cmp	r5, #0
   18c78:	db1c      	blt.n	18cb4 <__ieee754_pow+0x9c>
   18c7a:	4640      	mov	r0, r8
   18c7c:	4649      	mov	r1, r9
   18c7e:	b013      	add	sp, #76	; 0x4c
   18c80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c84:	f000 bd0e 	b.w	196a4 <__ieee754_sqrt>
   18c88:	b158      	cbz	r0, 18ca2 <__ieee754_pow+0x8a>
   18c8a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   18c8e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   18c92:	ea56 030b 	orrs.w	r3, r6, fp
   18c96:	d106      	bne.n	18ca6 <__ieee754_pow+0x8e>
   18c98:	494c      	ldr	r1, [pc, #304]	; (18dcc <__ieee754_pow+0x1b4>)
   18c9a:	2000      	movs	r0, #0
   18c9c:	b013      	add	sp, #76	; 0x4c
   18c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ca2:	42b7      	cmp	r7, r6
   18ca4:	ddcc      	ble.n	18c40 <__ieee754_pow+0x28>
   18ca6:	484b      	ldr	r0, [pc, #300]	; (18dd4 <__ieee754_pow+0x1bc>)
   18ca8:	b013      	add	sp, #76	; 0x4c
   18caa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cae:	f000 bdc1 	b.w	19834 <nan>
   18cb2:	2400      	movs	r4, #0
   18cb4:	4640      	mov	r0, r8
   18cb6:	4649      	mov	r1, r9
   18cb8:	f000 fdb0 	bl	1981c <fabs>
   18cbc:	f1bb 0f00 	cmp.w	fp, #0
   18cc0:	d119      	bne.n	18cf6 <__ieee754_pow+0xde>
   18cc2:	b126      	cbz	r6, 18cce <__ieee754_pow+0xb6>
   18cc4:	4b41      	ldr	r3, [pc, #260]	; (18dcc <__ieee754_pow+0x1b4>)
   18cc6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   18cca:	429a      	cmp	r2, r3
   18ccc:	d113      	bne.n	18cf6 <__ieee754_pow+0xde>
   18cce:	f1ba 0f00 	cmp.w	sl, #0
   18cd2:	f2c0 83bc 	blt.w	1944e <__ieee754_pow+0x836>
   18cd6:	2d00      	cmp	r5, #0
   18cd8:	dae0      	bge.n	18c9c <__ieee754_pow+0x84>
   18cda:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   18cde:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   18ce2:	ea56 0304 	orrs.w	r3, r6, r4
   18ce6:	f000 848f 	beq.w	19608 <__ieee754_pow+0x9f0>
   18cea:	2c01      	cmp	r4, #1
   18cec:	d1d6      	bne.n	18c9c <__ieee754_pow+0x84>
   18cee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   18cf2:	4619      	mov	r1, r3
   18cf4:	e7d2      	b.n	18c9c <__ieee754_pow+0x84>
   18cf6:	0fed      	lsrs	r5, r5, #31
   18cf8:	3d01      	subs	r5, #1
   18cfa:	ea54 0305 	orrs.w	r3, r4, r5
   18cfe:	d04e      	beq.n	18d9e <__ieee754_pow+0x186>
   18d00:	4b35      	ldr	r3, [pc, #212]	; (18dd8 <__ieee754_pow+0x1c0>)
   18d02:	429f      	cmp	r7, r3
   18d04:	dd6e      	ble.n	18de4 <__ieee754_pow+0x1cc>
   18d06:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   18d0a:	429f      	cmp	r7, r3
   18d0c:	f340 83e8 	ble.w	194e0 <__ieee754_pow+0x8c8>
   18d10:	4b32      	ldr	r3, [pc, #200]	; (18ddc <__ieee754_pow+0x1c4>)
   18d12:	429e      	cmp	r6, r3
   18d14:	dd4e      	ble.n	18db4 <__ieee754_pow+0x19c>
   18d16:	f1ba 0f00 	cmp.w	sl, #0
   18d1a:	dd4e      	ble.n	18dba <__ieee754_pow+0x1a2>
   18d1c:	a328      	add	r3, pc, #160	; (adr r3, 18dc0 <__ieee754_pow+0x1a8>)
   18d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18d22:	4610      	mov	r0, r2
   18d24:	4619      	mov	r1, r3
   18d26:	f001 f855 	bl	19dd4 <__aeabi_dmul>
   18d2a:	e7b7      	b.n	18c9c <__ieee754_pow+0x84>
   18d2c:	f1ba 0f00 	cmp.w	sl, #0
   18d30:	f2c0 843c 	blt.w	195ac <__ieee754_pow+0x994>
   18d34:	4640      	mov	r0, r8
   18d36:	4649      	mov	r1, r9
   18d38:	e7b0      	b.n	18c9c <__ieee754_pow+0x84>
   18d3a:	f1be 0f00 	cmp.w	lr, #0
   18d3e:	d082      	beq.n	18c46 <__ieee754_pow+0x2e>
   18d40:	e7a3      	b.n	18c8a <__ieee754_pow+0x72>
   18d42:	4b27      	ldr	r3, [pc, #156]	; (18de0 <__ieee754_pow+0x1c8>)
   18d44:	429f      	cmp	r7, r3
   18d46:	dc28      	bgt.n	18d9a <__ieee754_pow+0x182>
   18d48:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   18d4c:	429f      	cmp	r7, r3
   18d4e:	dd80      	ble.n	18c52 <__ieee754_pow+0x3a>
   18d50:	153b      	asrs	r3, r7, #20
   18d52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   18d56:	2b14      	cmp	r3, #20
   18d58:	f340 843e 	ble.w	195d8 <__ieee754_pow+0x9c0>
   18d5c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   18d60:	fa2e f203 	lsr.w	r2, lr, r3
   18d64:	fa02 f303 	lsl.w	r3, r2, r3
   18d68:	459e      	cmp	lr, r3
   18d6a:	f47f af72 	bne.w	18c52 <__ieee754_pow+0x3a>
   18d6e:	f002 0201 	and.w	r2, r2, #1
   18d72:	f1c2 0402 	rsb	r4, r2, #2
   18d76:	e76d      	b.n	18c54 <__ieee754_pow+0x3c>
   18d78:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   18d7c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   18d80:	ea53 030b 	orrs.w	r3, r3, fp
   18d84:	d088      	beq.n	18c98 <__ieee754_pow+0x80>
   18d86:	4b15      	ldr	r3, [pc, #84]	; (18ddc <__ieee754_pow+0x1c4>)
   18d88:	429e      	cmp	r6, r3
   18d8a:	f340 8332 	ble.w	193f2 <__ieee754_pow+0x7da>
   18d8e:	f1ba 0f00 	cmp.w	sl, #0
   18d92:	db12      	blt.n	18dba <__ieee754_pow+0x1a2>
   18d94:	e9dd 0100 	ldrd	r0, r1, [sp]
   18d98:	e780      	b.n	18c9c <__ieee754_pow+0x84>
   18d9a:	2402      	movs	r4, #2
   18d9c:	e75a      	b.n	18c54 <__ieee754_pow+0x3c>
   18d9e:	4642      	mov	r2, r8
   18da0:	464b      	mov	r3, r9
   18da2:	4640      	mov	r0, r8
   18da4:	4649      	mov	r1, r9
   18da6:	f000 fe61 	bl	19a6c <__aeabi_dsub>
   18daa:	4602      	mov	r2, r0
   18dac:	460b      	mov	r3, r1
   18dae:	f001 f93b 	bl	1a028 <__aeabi_ddiv>
   18db2:	e773      	b.n	18c9c <__ieee754_pow+0x84>
   18db4:	f1ba 0f00 	cmp.w	sl, #0
   18db8:	dbb0      	blt.n	18d1c <__ieee754_pow+0x104>
   18dba:	2000      	movs	r0, #0
   18dbc:	2100      	movs	r1, #0
   18dbe:	e76d      	b.n	18c9c <__ieee754_pow+0x84>
   18dc0:	8800759c 	.word	0x8800759c
   18dc4:	7e37e43c 	.word	0x7e37e43c
   18dc8:	7ff00000 	.word	0x7ff00000
   18dcc:	3ff00000 	.word	0x3ff00000
   18dd0:	3fe00000 	.word	0x3fe00000
   18dd4:	00020fec 	.word	0x00020fec
   18dd8:	41e00000 	.word	0x41e00000
   18ddc:	3fefffff 	.word	0x3fefffff
   18de0:	433fffff 	.word	0x433fffff
   18de4:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   18de8:	f04f 0200 	mov.w	r2, #0
   18dec:	da05      	bge.n	18dfa <__ieee754_pow+0x1e2>
   18dee:	4bd4      	ldr	r3, [pc, #848]	; (19140 <__ieee754_pow+0x528>)
   18df0:	f000 fff0 	bl	19dd4 <__aeabi_dmul>
   18df4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   18df8:	460e      	mov	r6, r1
   18dfa:	1533      	asrs	r3, r6, #20
   18dfc:	4fd1      	ldr	r7, [pc, #836]	; (19144 <__ieee754_pow+0x52c>)
   18dfe:	f3c6 0613 	ubfx	r6, r6, #0, #20
   18e02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   18e06:	4413      	add	r3, r2
   18e08:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   18e0c:	42be      	cmp	r6, r7
   18e0e:	461a      	mov	r2, r3
   18e10:	930d      	str	r3, [sp, #52]	; 0x34
   18e12:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   18e16:	f340 8321 	ble.w	1945c <__ieee754_pow+0x844>
   18e1a:	4bcb      	ldr	r3, [pc, #812]	; (19148 <__ieee754_pow+0x530>)
   18e1c:	429e      	cmp	r6, r3
   18e1e:	f340 83fd 	ble.w	1961c <__ieee754_pow+0xa04>
   18e22:	4613      	mov	r3, r2
   18e24:	3301      	adds	r3, #1
   18e26:	930d      	str	r3, [sp, #52]	; 0x34
   18e28:	4bc8      	ldr	r3, [pc, #800]	; (1914c <__ieee754_pow+0x534>)
   18e2a:	2200      	movs	r2, #0
   18e2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18e30:	2700      	movs	r7, #0
   18e32:	2600      	movs	r6, #0
   18e34:	e9cd 6708 	strd	r6, r7, [sp, #32]
   18e38:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   18e3c:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   18e40:	2700      	movs	r7, #0
   18e42:	4602      	mov	r2, r0
   18e44:	4653      	mov	r3, sl
   18e46:	4651      	mov	r1, sl
   18e48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   18e4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   18e50:	f000 fe0c 	bl	19a6c <__aeabi_dsub>
   18e54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   18e58:	4680      	mov	r8, r0
   18e5a:	4689      	mov	r9, r1
   18e5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18e60:	f000 fe06 	bl	19a70 <__adddf3>
   18e64:	4602      	mov	r2, r0
   18e66:	460b      	mov	r3, r1
   18e68:	2000      	movs	r0, #0
   18e6a:	49b8      	ldr	r1, [pc, #736]	; (1914c <__ieee754_pow+0x534>)
   18e6c:	f001 f8dc 	bl	1a028 <__aeabi_ddiv>
   18e70:	460a      	mov	r2, r1
   18e72:	4601      	mov	r1, r0
   18e74:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   18e78:	4613      	mov	r3, r2
   18e7a:	4649      	mov	r1, r9
   18e7c:	4602      	mov	r2, r0
   18e7e:	4640      	mov	r0, r8
   18e80:	f000 ffa8 	bl	19dd4 <__aeabi_dmul>
   18e84:	ea4f 036a 	mov.w	r3, sl, asr #1
   18e88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   18e8c:	468c      	mov	ip, r1
   18e8e:	4683      	mov	fp, r0
   18e90:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   18e94:	e9cd bc04 	strd	fp, ip, [sp, #16]
   18e98:	46da      	mov	sl, fp
   18e9a:	468b      	mov	fp, r1
   18e9c:	19d9      	adds	r1, r3, r7
   18e9e:	2300      	movs	r3, #0
   18ea0:	e9cd ab02 	strd	sl, fp, [sp, #8]
   18ea4:	9302      	str	r3, [sp, #8]
   18ea6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   18eaa:	2000      	movs	r0, #0
   18eac:	4606      	mov	r6, r0
   18eae:	460f      	mov	r7, r1
   18eb0:	4602      	mov	r2, r0
   18eb2:	460b      	mov	r3, r1
   18eb4:	4650      	mov	r0, sl
   18eb6:	4659      	mov	r1, fp
   18eb8:	f000 ff8c 	bl	19dd4 <__aeabi_dmul>
   18ebc:	4602      	mov	r2, r0
   18ebe:	460b      	mov	r3, r1
   18ec0:	4640      	mov	r0, r8
   18ec2:	4649      	mov	r1, r9
   18ec4:	f000 fdd2 	bl	19a6c <__aeabi_dsub>
   18ec8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   18ecc:	4680      	mov	r8, r0
   18ece:	4689      	mov	r9, r1
   18ed0:	4630      	mov	r0, r6
   18ed2:	4639      	mov	r1, r7
   18ed4:	f000 fdca 	bl	19a6c <__aeabi_dsub>
   18ed8:	4602      	mov	r2, r0
   18eda:	460b      	mov	r3, r1
   18edc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18ee0:	f000 fdc4 	bl	19a6c <__aeabi_dsub>
   18ee4:	4652      	mov	r2, sl
   18ee6:	465b      	mov	r3, fp
   18ee8:	f000 ff74 	bl	19dd4 <__aeabi_dmul>
   18eec:	4602      	mov	r2, r0
   18eee:	460b      	mov	r3, r1
   18ef0:	4640      	mov	r0, r8
   18ef2:	4649      	mov	r1, r9
   18ef4:	f000 fdba 	bl	19a6c <__aeabi_dsub>
   18ef8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   18efc:	f000 ff6a 	bl	19dd4 <__aeabi_dmul>
   18f00:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   18f04:	e9cd 0106 	strd	r0, r1, [sp, #24]
   18f08:	4632      	mov	r2, r6
   18f0a:	463b      	mov	r3, r7
   18f0c:	4630      	mov	r0, r6
   18f0e:	4639      	mov	r1, r7
   18f10:	f000 ff60 	bl	19dd4 <__aeabi_dmul>
   18f14:	a378      	add	r3, pc, #480	; (adr r3, 190f8 <__ieee754_pow+0x4e0>)
   18f16:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f1a:	4606      	mov	r6, r0
   18f1c:	460f      	mov	r7, r1
   18f1e:	f000 ff59 	bl	19dd4 <__aeabi_dmul>
   18f22:	a377      	add	r3, pc, #476	; (adr r3, 19100 <__ieee754_pow+0x4e8>)
   18f24:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f28:	f000 fda2 	bl	19a70 <__adddf3>
   18f2c:	4632      	mov	r2, r6
   18f2e:	463b      	mov	r3, r7
   18f30:	f000 ff50 	bl	19dd4 <__aeabi_dmul>
   18f34:	a374      	add	r3, pc, #464	; (adr r3, 19108 <__ieee754_pow+0x4f0>)
   18f36:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f3a:	f000 fd99 	bl	19a70 <__adddf3>
   18f3e:	4632      	mov	r2, r6
   18f40:	463b      	mov	r3, r7
   18f42:	f000 ff47 	bl	19dd4 <__aeabi_dmul>
   18f46:	a372      	add	r3, pc, #456	; (adr r3, 19110 <__ieee754_pow+0x4f8>)
   18f48:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f4c:	f000 fd90 	bl	19a70 <__adddf3>
   18f50:	4632      	mov	r2, r6
   18f52:	463b      	mov	r3, r7
   18f54:	f000 ff3e 	bl	19dd4 <__aeabi_dmul>
   18f58:	a36f      	add	r3, pc, #444	; (adr r3, 19118 <__ieee754_pow+0x500>)
   18f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f5e:	f000 fd87 	bl	19a70 <__adddf3>
   18f62:	4632      	mov	r2, r6
   18f64:	463b      	mov	r3, r7
   18f66:	f000 ff35 	bl	19dd4 <__aeabi_dmul>
   18f6a:	a36d      	add	r3, pc, #436	; (adr r3, 19120 <__ieee754_pow+0x508>)
   18f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f70:	f000 fd7e 	bl	19a70 <__adddf3>
   18f74:	4632      	mov	r2, r6
   18f76:	4680      	mov	r8, r0
   18f78:	4689      	mov	r9, r1
   18f7a:	463b      	mov	r3, r7
   18f7c:	4630      	mov	r0, r6
   18f7e:	4639      	mov	r1, r7
   18f80:	f000 ff28 	bl	19dd4 <__aeabi_dmul>
   18f84:	4602      	mov	r2, r0
   18f86:	460b      	mov	r3, r1
   18f88:	4640      	mov	r0, r8
   18f8a:	4649      	mov	r1, r9
   18f8c:	f000 ff22 	bl	19dd4 <__aeabi_dmul>
   18f90:	4652      	mov	r2, sl
   18f92:	4606      	mov	r6, r0
   18f94:	460f      	mov	r7, r1
   18f96:	465b      	mov	r3, fp
   18f98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   18f9c:	f000 fd68 	bl	19a70 <__adddf3>
   18fa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   18fa4:	f000 ff16 	bl	19dd4 <__aeabi_dmul>
   18fa8:	4632      	mov	r2, r6
   18faa:	463b      	mov	r3, r7
   18fac:	f000 fd60 	bl	19a70 <__adddf3>
   18fb0:	4652      	mov	r2, sl
   18fb2:	4680      	mov	r8, r0
   18fb4:	4689      	mov	r9, r1
   18fb6:	465b      	mov	r3, fp
   18fb8:	4650      	mov	r0, sl
   18fba:	4659      	mov	r1, fp
   18fbc:	f000 ff0a 	bl	19dd4 <__aeabi_dmul>
   18fc0:	2200      	movs	r2, #0
   18fc2:	4b63      	ldr	r3, [pc, #396]	; (19150 <__ieee754_pow+0x538>)
   18fc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   18fc8:	f000 fd52 	bl	19a70 <__adddf3>
   18fcc:	4642      	mov	r2, r8
   18fce:	464b      	mov	r3, r9
   18fd0:	f000 fd4e 	bl	19a70 <__adddf3>
   18fd4:	9802      	ldr	r0, [sp, #8]
   18fd6:	460f      	mov	r7, r1
   18fd8:	4606      	mov	r6, r0
   18fda:	4632      	mov	r2, r6
   18fdc:	463b      	mov	r3, r7
   18fde:	4650      	mov	r0, sl
   18fe0:	4659      	mov	r1, fp
   18fe2:	f000 fef7 	bl	19dd4 <__aeabi_dmul>
   18fe6:	2200      	movs	r2, #0
   18fe8:	4682      	mov	sl, r0
   18fea:	468b      	mov	fp, r1
   18fec:	4b58      	ldr	r3, [pc, #352]	; (19150 <__ieee754_pow+0x538>)
   18fee:	4630      	mov	r0, r6
   18ff0:	4639      	mov	r1, r7
   18ff2:	f000 fd3b 	bl	19a6c <__aeabi_dsub>
   18ff6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   18ffa:	f000 fd37 	bl	19a6c <__aeabi_dsub>
   18ffe:	4602      	mov	r2, r0
   19000:	460b      	mov	r3, r1
   19002:	4640      	mov	r0, r8
   19004:	4649      	mov	r1, r9
   19006:	f000 fd31 	bl	19a6c <__aeabi_dsub>
   1900a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1900e:	f000 fee1 	bl	19dd4 <__aeabi_dmul>
   19012:	4632      	mov	r2, r6
   19014:	4680      	mov	r8, r0
   19016:	4689      	mov	r9, r1
   19018:	463b      	mov	r3, r7
   1901a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1901e:	f000 fed9 	bl	19dd4 <__aeabi_dmul>
   19022:	4602      	mov	r2, r0
   19024:	460b      	mov	r3, r1
   19026:	4640      	mov	r0, r8
   19028:	4649      	mov	r1, r9
   1902a:	f000 fd21 	bl	19a70 <__adddf3>
   1902e:	4680      	mov	r8, r0
   19030:	4689      	mov	r9, r1
   19032:	4602      	mov	r2, r0
   19034:	460b      	mov	r3, r1
   19036:	4650      	mov	r0, sl
   19038:	4659      	mov	r1, fp
   1903a:	e9cd ab04 	strd	sl, fp, [sp, #16]
   1903e:	f000 fd17 	bl	19a70 <__adddf3>
   19042:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   19046:	a338      	add	r3, pc, #224	; (adr r3, 19128 <__ieee754_pow+0x510>)
   19048:	e9d3 2300 	ldrd	r2, r3, [r3]
   1904c:	4650      	mov	r0, sl
   1904e:	460f      	mov	r7, r1
   19050:	f000 fec0 	bl	19dd4 <__aeabi_dmul>
   19054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19058:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1905c:	4639      	mov	r1, r7
   1905e:	4650      	mov	r0, sl
   19060:	f000 fd04 	bl	19a6c <__aeabi_dsub>
   19064:	4602      	mov	r2, r0
   19066:	460b      	mov	r3, r1
   19068:	4640      	mov	r0, r8
   1906a:	4649      	mov	r1, r9
   1906c:	f000 fcfe 	bl	19a6c <__aeabi_dsub>
   19070:	a32f      	add	r3, pc, #188	; (adr r3, 19130 <__ieee754_pow+0x518>)
   19072:	e9d3 2300 	ldrd	r2, r3, [r3]
   19076:	f000 fead 	bl	19dd4 <__aeabi_dmul>
   1907a:	a32f      	add	r3, pc, #188	; (adr r3, 19138 <__ieee754_pow+0x520>)
   1907c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19080:	4680      	mov	r8, r0
   19082:	4689      	mov	r9, r1
   19084:	4650      	mov	r0, sl
   19086:	4639      	mov	r1, r7
   19088:	f000 fea4 	bl	19dd4 <__aeabi_dmul>
   1908c:	4602      	mov	r2, r0
   1908e:	460b      	mov	r3, r1
   19090:	4640      	mov	r0, r8
   19092:	4649      	mov	r1, r9
   19094:	f000 fcec 	bl	19a70 <__adddf3>
   19098:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1909c:	f000 fce8 	bl	19a70 <__adddf3>
   190a0:	4680      	mov	r8, r0
   190a2:	980d      	ldr	r0, [sp, #52]	; 0x34
   190a4:	4689      	mov	r9, r1
   190a6:	f000 fe2f 	bl	19d08 <__aeabi_i2d>
   190aa:	4642      	mov	r2, r8
   190ac:	4606      	mov	r6, r0
   190ae:	460f      	mov	r7, r1
   190b0:	464b      	mov	r3, r9
   190b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   190b6:	f000 fcdb 	bl	19a70 <__adddf3>
   190ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   190be:	f000 fcd7 	bl	19a70 <__adddf3>
   190c2:	4632      	mov	r2, r6
   190c4:	463b      	mov	r3, r7
   190c6:	f000 fcd3 	bl	19a70 <__adddf3>
   190ca:	4632      	mov	r2, r6
   190cc:	463b      	mov	r3, r7
   190ce:	4650      	mov	r0, sl
   190d0:	468b      	mov	fp, r1
   190d2:	f000 fccb 	bl	19a6c <__aeabi_dsub>
   190d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   190da:	f000 fcc7 	bl	19a6c <__aeabi_dsub>
   190de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   190e2:	f000 fcc3 	bl	19a6c <__aeabi_dsub>
   190e6:	4602      	mov	r2, r0
   190e8:	460b      	mov	r3, r1
   190ea:	4640      	mov	r0, r8
   190ec:	4649      	mov	r1, r9
   190ee:	f000 fcbd 	bl	19a6c <__aeabi_dsub>
   190f2:	4680      	mov	r8, r0
   190f4:	e02e      	b.n	19154 <__ieee754_pow+0x53c>
   190f6:	bf00      	nop
   190f8:	4a454eef 	.word	0x4a454eef
   190fc:	3fca7e28 	.word	0x3fca7e28
   19100:	93c9db65 	.word	0x93c9db65
   19104:	3fcd864a 	.word	0x3fcd864a
   19108:	a91d4101 	.word	0xa91d4101
   1910c:	3fd17460 	.word	0x3fd17460
   19110:	518f264d 	.word	0x518f264d
   19114:	3fd55555 	.word	0x3fd55555
   19118:	db6fabff 	.word	0xdb6fabff
   1911c:	3fdb6db6 	.word	0x3fdb6db6
   19120:	33333303 	.word	0x33333303
   19124:	3fe33333 	.word	0x3fe33333
   19128:	e0000000 	.word	0xe0000000
   1912c:	3feec709 	.word	0x3feec709
   19130:	dc3a03fd 	.word	0xdc3a03fd
   19134:	3feec709 	.word	0x3feec709
   19138:	145b01f5 	.word	0x145b01f5
   1913c:	be3e2fe0 	.word	0xbe3e2fe0
   19140:	43400000 	.word	0x43400000
   19144:	0003988e 	.word	0x0003988e
   19148:	000bb679 	.word	0x000bb679
   1914c:	3ff00000 	.word	0x3ff00000
   19150:	40080000 	.word	0x40080000
   19154:	4689      	mov	r9, r1
   19156:	3c01      	subs	r4, #1
   19158:	ea54 0305 	orrs.w	r3, r4, r5
   1915c:	e9dd 0100 	ldrd	r0, r1, [sp]
   19160:	bf14      	ite	ne
   19162:	4cd9      	ldrne	r4, [pc, #868]	; (194c8 <__ieee754_pow+0x8b0>)
   19164:	4cd9      	ldreq	r4, [pc, #868]	; (194cc <__ieee754_pow+0x8b4>)
   19166:	2300      	movs	r3, #0
   19168:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1916c:	4603      	mov	r3, r0
   1916e:	460c      	mov	r4, r1
   19170:	e9cd 3402 	strd	r3, r4, [sp, #8]
   19174:	2300      	movs	r3, #0
   19176:	9302      	str	r3, [sp, #8]
   19178:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   1917c:	4622      	mov	r2, r4
   1917e:	462b      	mov	r3, r5
   19180:	f000 fc74 	bl	19a6c <__aeabi_dsub>
   19184:	4652      	mov	r2, sl
   19186:	465b      	mov	r3, fp
   19188:	f000 fe24 	bl	19dd4 <__aeabi_dmul>
   1918c:	e9dd 2300 	ldrd	r2, r3, [sp]
   19190:	4606      	mov	r6, r0
   19192:	460f      	mov	r7, r1
   19194:	4640      	mov	r0, r8
   19196:	4649      	mov	r1, r9
   19198:	f000 fe1c 	bl	19dd4 <__aeabi_dmul>
   1919c:	4602      	mov	r2, r0
   1919e:	460b      	mov	r3, r1
   191a0:	4630      	mov	r0, r6
   191a2:	4639      	mov	r1, r7
   191a4:	f000 fc64 	bl	19a70 <__adddf3>
   191a8:	4622      	mov	r2, r4
   191aa:	4680      	mov	r8, r0
   191ac:	4689      	mov	r9, r1
   191ae:	462b      	mov	r3, r5
   191b0:	4650      	mov	r0, sl
   191b2:	4659      	mov	r1, fp
   191b4:	e9cd 8900 	strd	r8, r9, [sp]
   191b8:	f000 fe0c 	bl	19dd4 <__aeabi_dmul>
   191bc:	460b      	mov	r3, r1
   191be:	4602      	mov	r2, r0
   191c0:	4606      	mov	r6, r0
   191c2:	460f      	mov	r7, r1
   191c4:	4640      	mov	r0, r8
   191c6:	4649      	mov	r1, r9
   191c8:	f000 fc52 	bl	19a70 <__adddf3>
   191cc:	4bc0      	ldr	r3, [pc, #768]	; (194d0 <__ieee754_pow+0x8b8>)
   191ce:	4299      	cmp	r1, r3
   191d0:	4604      	mov	r4, r0
   191d2:	460d      	mov	r5, r1
   191d4:	468a      	mov	sl, r1
   191d6:	f340 8116 	ble.w	19406 <__ieee754_pow+0x7ee>
   191da:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   191de:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   191e2:	4303      	orrs	r3, r0
   191e4:	f040 81ea 	bne.w	195bc <__ieee754_pow+0x9a4>
   191e8:	a3a3      	add	r3, pc, #652	; (adr r3, 19478 <__ieee754_pow+0x860>)
   191ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   191ee:	e9dd 0100 	ldrd	r0, r1, [sp]
   191f2:	f000 fc3d 	bl	19a70 <__adddf3>
   191f6:	4632      	mov	r2, r6
   191f8:	4680      	mov	r8, r0
   191fa:	4689      	mov	r9, r1
   191fc:	463b      	mov	r3, r7
   191fe:	4620      	mov	r0, r4
   19200:	4629      	mov	r1, r5
   19202:	f000 fc33 	bl	19a6c <__aeabi_dsub>
   19206:	4602      	mov	r2, r0
   19208:	460b      	mov	r3, r1
   1920a:	4640      	mov	r0, r8
   1920c:	4649      	mov	r1, r9
   1920e:	f001 f871 	bl	1a2f4 <__aeabi_dcmpgt>
   19212:	2800      	cmp	r0, #0
   19214:	f040 81d2 	bne.w	195bc <__ieee754_pow+0x9a4>
   19218:	46a8      	mov	r8, r5
   1921a:	ea4f 5328 	mov.w	r3, r8, asr #20
   1921e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   19222:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   19226:	fa42 f303 	asr.w	r3, r2, r3
   1922a:	4453      	add	r3, sl
   1922c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   19230:	4da8      	ldr	r5, [pc, #672]	; (194d4 <__ieee754_pow+0x8bc>)
   19232:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   19236:	4115      	asrs	r5, r2
   19238:	f3c3 0413 	ubfx	r4, r3, #0, #20
   1923c:	ea23 0105 	bic.w	r1, r3, r5
   19240:	2000      	movs	r0, #0
   19242:	f1c2 0b14 	rsb	fp, r2, #20
   19246:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   1924a:	f1ba 0f00 	cmp.w	sl, #0
   1924e:	4602      	mov	r2, r0
   19250:	460b      	mov	r3, r1
   19252:	fa44 fb0b 	asr.w	fp, r4, fp
   19256:	4630      	mov	r0, r6
   19258:	4639      	mov	r1, r7
   1925a:	bfb8      	it	lt
   1925c:	f1cb 0b00 	rsblt	fp, fp, #0
   19260:	f000 fc04 	bl	19a6c <__aeabi_dsub>
   19264:	4602      	mov	r2, r0
   19266:	460b      	mov	r3, r1
   19268:	4606      	mov	r6, r0
   1926a:	460f      	mov	r7, r1
   1926c:	e9dd 0100 	ldrd	r0, r1, [sp]
   19270:	f000 fbfe 	bl	19a70 <__adddf3>
   19274:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   19278:	460d      	mov	r5, r1
   1927a:	2400      	movs	r4, #0
   1927c:	a380      	add	r3, pc, #512	; (adr r3, 19480 <__ieee754_pow+0x868>)
   1927e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19282:	4620      	mov	r0, r4
   19284:	4629      	mov	r1, r5
   19286:	f000 fda5 	bl	19dd4 <__aeabi_dmul>
   1928a:	4632      	mov	r2, r6
   1928c:	4680      	mov	r8, r0
   1928e:	4689      	mov	r9, r1
   19290:	463b      	mov	r3, r7
   19292:	4620      	mov	r0, r4
   19294:	4629      	mov	r1, r5
   19296:	f000 fbe9 	bl	19a6c <__aeabi_dsub>
   1929a:	4602      	mov	r2, r0
   1929c:	460b      	mov	r3, r1
   1929e:	e9dd 0100 	ldrd	r0, r1, [sp]
   192a2:	f000 fbe3 	bl	19a6c <__aeabi_dsub>
   192a6:	a378      	add	r3, pc, #480	; (adr r3, 19488 <__ieee754_pow+0x870>)
   192a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   192ac:	f000 fd92 	bl	19dd4 <__aeabi_dmul>
   192b0:	a377      	add	r3, pc, #476	; (adr r3, 19490 <__ieee754_pow+0x878>)
   192b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   192b6:	4606      	mov	r6, r0
   192b8:	460f      	mov	r7, r1
   192ba:	4620      	mov	r0, r4
   192bc:	4629      	mov	r1, r5
   192be:	f000 fd89 	bl	19dd4 <__aeabi_dmul>
   192c2:	4602      	mov	r2, r0
   192c4:	460b      	mov	r3, r1
   192c6:	4630      	mov	r0, r6
   192c8:	4639      	mov	r1, r7
   192ca:	f000 fbd1 	bl	19a70 <__adddf3>
   192ce:	4606      	mov	r6, r0
   192d0:	460f      	mov	r7, r1
   192d2:	4602      	mov	r2, r0
   192d4:	460b      	mov	r3, r1
   192d6:	4640      	mov	r0, r8
   192d8:	4649      	mov	r1, r9
   192da:	f000 fbc9 	bl	19a70 <__adddf3>
   192de:	4642      	mov	r2, r8
   192e0:	464b      	mov	r3, r9
   192e2:	4604      	mov	r4, r0
   192e4:	460d      	mov	r5, r1
   192e6:	f000 fbc1 	bl	19a6c <__aeabi_dsub>
   192ea:	4602      	mov	r2, r0
   192ec:	460b      	mov	r3, r1
   192ee:	4630      	mov	r0, r6
   192f0:	4639      	mov	r1, r7
   192f2:	f000 fbbb 	bl	19a6c <__aeabi_dsub>
   192f6:	4622      	mov	r2, r4
   192f8:	4680      	mov	r8, r0
   192fa:	4689      	mov	r9, r1
   192fc:	462b      	mov	r3, r5
   192fe:	4620      	mov	r0, r4
   19300:	4629      	mov	r1, r5
   19302:	f000 fd67 	bl	19dd4 <__aeabi_dmul>
   19306:	a364      	add	r3, pc, #400	; (adr r3, 19498 <__ieee754_pow+0x880>)
   19308:	e9d3 2300 	ldrd	r2, r3, [r3]
   1930c:	4606      	mov	r6, r0
   1930e:	460f      	mov	r7, r1
   19310:	f000 fd60 	bl	19dd4 <__aeabi_dmul>
   19314:	a362      	add	r3, pc, #392	; (adr r3, 194a0 <__ieee754_pow+0x888>)
   19316:	e9d3 2300 	ldrd	r2, r3, [r3]
   1931a:	f000 fba7 	bl	19a6c <__aeabi_dsub>
   1931e:	4632      	mov	r2, r6
   19320:	463b      	mov	r3, r7
   19322:	f000 fd57 	bl	19dd4 <__aeabi_dmul>
   19326:	a360      	add	r3, pc, #384	; (adr r3, 194a8 <__ieee754_pow+0x890>)
   19328:	e9d3 2300 	ldrd	r2, r3, [r3]
   1932c:	f000 fba0 	bl	19a70 <__adddf3>
   19330:	4632      	mov	r2, r6
   19332:	463b      	mov	r3, r7
   19334:	f000 fd4e 	bl	19dd4 <__aeabi_dmul>
   19338:	a35d      	add	r3, pc, #372	; (adr r3, 194b0 <__ieee754_pow+0x898>)
   1933a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1933e:	f000 fb95 	bl	19a6c <__aeabi_dsub>
   19342:	4632      	mov	r2, r6
   19344:	463b      	mov	r3, r7
   19346:	f000 fd45 	bl	19dd4 <__aeabi_dmul>
   1934a:	a35b      	add	r3, pc, #364	; (adr r3, 194b8 <__ieee754_pow+0x8a0>)
   1934c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19350:	f000 fb8e 	bl	19a70 <__adddf3>
   19354:	4632      	mov	r2, r6
   19356:	463b      	mov	r3, r7
   19358:	f000 fd3c 	bl	19dd4 <__aeabi_dmul>
   1935c:	4602      	mov	r2, r0
   1935e:	460b      	mov	r3, r1
   19360:	4620      	mov	r0, r4
   19362:	4629      	mov	r1, r5
   19364:	f000 fb82 	bl	19a6c <__aeabi_dsub>
   19368:	4606      	mov	r6, r0
   1936a:	460f      	mov	r7, r1
   1936c:	4602      	mov	r2, r0
   1936e:	460b      	mov	r3, r1
   19370:	4620      	mov	r0, r4
   19372:	4629      	mov	r1, r5
   19374:	f000 fd2e 	bl	19dd4 <__aeabi_dmul>
   19378:	2200      	movs	r2, #0
   1937a:	e9cd 0100 	strd	r0, r1, [sp]
   1937e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19382:	4630      	mov	r0, r6
   19384:	4639      	mov	r1, r7
   19386:	f000 fb71 	bl	19a6c <__aeabi_dsub>
   1938a:	4602      	mov	r2, r0
   1938c:	460b      	mov	r3, r1
   1938e:	e9dd 0100 	ldrd	r0, r1, [sp]
   19392:	f000 fe49 	bl	1a028 <__aeabi_ddiv>
   19396:	4642      	mov	r2, r8
   19398:	4606      	mov	r6, r0
   1939a:	460f      	mov	r7, r1
   1939c:	464b      	mov	r3, r9
   1939e:	4620      	mov	r0, r4
   193a0:	4629      	mov	r1, r5
   193a2:	f000 fd17 	bl	19dd4 <__aeabi_dmul>
   193a6:	4642      	mov	r2, r8
   193a8:	464b      	mov	r3, r9
   193aa:	f000 fb61 	bl	19a70 <__adddf3>
   193ae:	4602      	mov	r2, r0
   193b0:	460b      	mov	r3, r1
   193b2:	4630      	mov	r0, r6
   193b4:	4639      	mov	r1, r7
   193b6:	f000 fb59 	bl	19a6c <__aeabi_dsub>
   193ba:	4622      	mov	r2, r4
   193bc:	462b      	mov	r3, r5
   193be:	f000 fb55 	bl	19a6c <__aeabi_dsub>
   193c2:	4602      	mov	r2, r0
   193c4:	460b      	mov	r3, r1
   193c6:	2000      	movs	r0, #0
   193c8:	493f      	ldr	r1, [pc, #252]	; (194c8 <__ieee754_pow+0x8b0>)
   193ca:	f000 fb4f 	bl	19a6c <__aeabi_dsub>
   193ce:	448a      	add	sl, r1
   193d0:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   193d4:	f2c0 8133 	blt.w	1963e <__ieee754_pow+0xa26>
   193d8:	4651      	mov	r1, sl
   193da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   193de:	f000 fcf9 	bl	19dd4 <__aeabi_dmul>
   193e2:	e45b      	b.n	18c9c <__ieee754_pow+0x84>
   193e4:	4642      	mov	r2, r8
   193e6:	4640      	mov	r0, r8
   193e8:	464b      	mov	r3, r9
   193ea:	4649      	mov	r1, r9
   193ec:	f000 fcf2 	bl	19dd4 <__aeabi_dmul>
   193f0:	e454      	b.n	18c9c <__ieee754_pow+0x84>
   193f2:	f1ba 0f00 	cmp.w	sl, #0
   193f6:	f6bf ace0 	bge.w	18dba <__ieee754_pow+0x1a2>
   193fa:	e9dd 3400 	ldrd	r3, r4, [sp]
   193fe:	4618      	mov	r0, r3
   19400:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   19404:	e44a      	b.n	18c9c <__ieee754_pow+0x84>
   19406:	4b34      	ldr	r3, [pc, #208]	; (194d8 <__ieee754_pow+0x8c0>)
   19408:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   1940c:	4598      	cmp	r8, r3
   1940e:	f340 80f2 	ble.w	195f6 <__ieee754_pow+0x9de>
   19412:	4b32      	ldr	r3, [pc, #200]	; (194dc <__ieee754_pow+0x8c4>)
   19414:	440b      	add	r3, r1
   19416:	4303      	orrs	r3, r0
   19418:	d10c      	bne.n	19434 <__ieee754_pow+0x81c>
   1941a:	4632      	mov	r2, r6
   1941c:	463b      	mov	r3, r7
   1941e:	f000 fb25 	bl	19a6c <__aeabi_dsub>
   19422:	4602      	mov	r2, r0
   19424:	460b      	mov	r3, r1
   19426:	e9dd 0100 	ldrd	r0, r1, [sp]
   1942a:	f000 ff4f 	bl	1a2cc <__aeabi_dcmple>
   1942e:	2800      	cmp	r0, #0
   19430:	f43f aef3 	beq.w	1921a <__ieee754_pow+0x602>
   19434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19438:	a321      	add	r3, pc, #132	; (adr r3, 194c0 <__ieee754_pow+0x8a8>)
   1943a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1943e:	f000 fcc9 	bl	19dd4 <__aeabi_dmul>
   19442:	a31f      	add	r3, pc, #124	; (adr r3, 194c0 <__ieee754_pow+0x8a8>)
   19444:	e9d3 2300 	ldrd	r2, r3, [r3]
   19448:	f000 fcc4 	bl	19dd4 <__aeabi_dmul>
   1944c:	e426      	b.n	18c9c <__ieee754_pow+0x84>
   1944e:	4602      	mov	r2, r0
   19450:	460b      	mov	r3, r1
   19452:	2000      	movs	r0, #0
   19454:	491c      	ldr	r1, [pc, #112]	; (194c8 <__ieee754_pow+0x8b0>)
   19456:	f000 fde7 	bl	1a028 <__aeabi_ddiv>
   1945a:	e43c      	b.n	18cd6 <__ieee754_pow+0xbe>
   1945c:	2200      	movs	r2, #0
   1945e:	2300      	movs	r3, #0
   19460:	e9cd 2308 	strd	r2, r3, [sp, #32]
   19464:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   19468:	4b17      	ldr	r3, [pc, #92]	; (194c8 <__ieee754_pow+0x8b0>)
   1946a:	2200      	movs	r2, #0
   1946c:	2700      	movs	r7, #0
   1946e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19472:	e4e6      	b.n	18e42 <__ieee754_pow+0x22a>
   19474:	f3af 8000 	nop.w
   19478:	652b82fe 	.word	0x652b82fe
   1947c:	3c971547 	.word	0x3c971547
   19480:	00000000 	.word	0x00000000
   19484:	3fe62e43 	.word	0x3fe62e43
   19488:	fefa39ef 	.word	0xfefa39ef
   1948c:	3fe62e42 	.word	0x3fe62e42
   19490:	0ca86c39 	.word	0x0ca86c39
   19494:	be205c61 	.word	0xbe205c61
   19498:	72bea4d0 	.word	0x72bea4d0
   1949c:	3e663769 	.word	0x3e663769
   194a0:	c5d26bf1 	.word	0xc5d26bf1
   194a4:	3ebbbd41 	.word	0x3ebbbd41
   194a8:	af25de2c 	.word	0xaf25de2c
   194ac:	3f11566a 	.word	0x3f11566a
   194b0:	16bebd93 	.word	0x16bebd93
   194b4:	3f66c16c 	.word	0x3f66c16c
   194b8:	5555553e 	.word	0x5555553e
   194bc:	3fc55555 	.word	0x3fc55555
   194c0:	c2f8f359 	.word	0xc2f8f359
   194c4:	01a56e1f 	.word	0x01a56e1f
   194c8:	3ff00000 	.word	0x3ff00000
   194cc:	bff00000 	.word	0xbff00000
   194d0:	408fffff 	.word	0x408fffff
   194d4:	000fffff 	.word	0x000fffff
   194d8:	4090cbff 	.word	0x4090cbff
   194dc:	3f6f3400 	.word	0x3f6f3400
   194e0:	4b6b      	ldr	r3, [pc, #428]	; (19690 <__ieee754_pow+0xa78>)
   194e2:	429e      	cmp	r6, r3
   194e4:	f77f ac66 	ble.w	18db4 <__ieee754_pow+0x19c>
   194e8:	4b6a      	ldr	r3, [pc, #424]	; (19694 <__ieee754_pow+0xa7c>)
   194ea:	429e      	cmp	r6, r3
   194ec:	f73f ac13 	bgt.w	18d16 <__ieee754_pow+0xfe>
   194f0:	2200      	movs	r2, #0
   194f2:	4b68      	ldr	r3, [pc, #416]	; (19694 <__ieee754_pow+0xa7c>)
   194f4:	f000 faba 	bl	19a6c <__aeabi_dsub>
   194f8:	a357      	add	r3, pc, #348	; (adr r3, 19658 <__ieee754_pow+0xa40>)
   194fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   194fe:	4606      	mov	r6, r0
   19500:	460f      	mov	r7, r1
   19502:	f000 fc67 	bl	19dd4 <__aeabi_dmul>
   19506:	a356      	add	r3, pc, #344	; (adr r3, 19660 <__ieee754_pow+0xa48>)
   19508:	e9d3 2300 	ldrd	r2, r3, [r3]
   1950c:	4680      	mov	r8, r0
   1950e:	4689      	mov	r9, r1
   19510:	4630      	mov	r0, r6
   19512:	4639      	mov	r1, r7
   19514:	f000 fc5e 	bl	19dd4 <__aeabi_dmul>
   19518:	2200      	movs	r2, #0
   1951a:	4682      	mov	sl, r0
   1951c:	468b      	mov	fp, r1
   1951e:	4b5e      	ldr	r3, [pc, #376]	; (19698 <__ieee754_pow+0xa80>)
   19520:	4630      	mov	r0, r6
   19522:	4639      	mov	r1, r7
   19524:	f000 fc56 	bl	19dd4 <__aeabi_dmul>
   19528:	4602      	mov	r2, r0
   1952a:	460b      	mov	r3, r1
   1952c:	a14e      	add	r1, pc, #312	; (adr r1, 19668 <__ieee754_pow+0xa50>)
   1952e:	e9d1 0100 	ldrd	r0, r1, [r1]
   19532:	f000 fa9b 	bl	19a6c <__aeabi_dsub>
   19536:	4632      	mov	r2, r6
   19538:	463b      	mov	r3, r7
   1953a:	f000 fc4b 	bl	19dd4 <__aeabi_dmul>
   1953e:	4602      	mov	r2, r0
   19540:	460b      	mov	r3, r1
   19542:	2000      	movs	r0, #0
   19544:	4955      	ldr	r1, [pc, #340]	; (1969c <__ieee754_pow+0xa84>)
   19546:	f000 fa91 	bl	19a6c <__aeabi_dsub>
   1954a:	4632      	mov	r2, r6
   1954c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19550:	463b      	mov	r3, r7
   19552:	4630      	mov	r0, r6
   19554:	4639      	mov	r1, r7
   19556:	f000 fc3d 	bl	19dd4 <__aeabi_dmul>
   1955a:	4602      	mov	r2, r0
   1955c:	460b      	mov	r3, r1
   1955e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   19562:	f000 fc37 	bl	19dd4 <__aeabi_dmul>
   19566:	a342      	add	r3, pc, #264	; (adr r3, 19670 <__ieee754_pow+0xa58>)
   19568:	e9d3 2300 	ldrd	r2, r3, [r3]
   1956c:	f000 fc32 	bl	19dd4 <__aeabi_dmul>
   19570:	4602      	mov	r2, r0
   19572:	460b      	mov	r3, r1
   19574:	4650      	mov	r0, sl
   19576:	4659      	mov	r1, fp
   19578:	f000 fa78 	bl	19a6c <__aeabi_dsub>
   1957c:	4602      	mov	r2, r0
   1957e:	460b      	mov	r3, r1
   19580:	4606      	mov	r6, r0
   19582:	460f      	mov	r7, r1
   19584:	4640      	mov	r0, r8
   19586:	4649      	mov	r1, r9
   19588:	f000 fa72 	bl	19a70 <__adddf3>
   1958c:	4642      	mov	r2, r8
   1958e:	464b      	mov	r3, r9
   19590:	2000      	movs	r0, #0
   19592:	4682      	mov	sl, r0
   19594:	468b      	mov	fp, r1
   19596:	f000 fa69 	bl	19a6c <__aeabi_dsub>
   1959a:	4602      	mov	r2, r0
   1959c:	460b      	mov	r3, r1
   1959e:	4630      	mov	r0, r6
   195a0:	4639      	mov	r1, r7
   195a2:	f000 fa63 	bl	19a6c <__aeabi_dsub>
   195a6:	4680      	mov	r8, r0
   195a8:	4689      	mov	r9, r1
   195aa:	e5d4      	b.n	19156 <__ieee754_pow+0x53e>
   195ac:	4642      	mov	r2, r8
   195ae:	464b      	mov	r3, r9
   195b0:	2000      	movs	r0, #0
   195b2:	4938      	ldr	r1, [pc, #224]	; (19694 <__ieee754_pow+0xa7c>)
   195b4:	f000 fd38 	bl	1a028 <__aeabi_ddiv>
   195b8:	f7ff bb70 	b.w	18c9c <__ieee754_pow+0x84>
   195bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   195c0:	a32d      	add	r3, pc, #180	; (adr r3, 19678 <__ieee754_pow+0xa60>)
   195c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   195c6:	f000 fc05 	bl	19dd4 <__aeabi_dmul>
   195ca:	a32b      	add	r3, pc, #172	; (adr r3, 19678 <__ieee754_pow+0xa60>)
   195cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   195d0:	f000 fc00 	bl	19dd4 <__aeabi_dmul>
   195d4:	f7ff bb62 	b.w	18c9c <__ieee754_pow+0x84>
   195d8:	f1be 0f00 	cmp.w	lr, #0
   195dc:	f47f ab69 	bne.w	18cb2 <__ieee754_pow+0x9a>
   195e0:	f1c3 0314 	rsb	r3, r3, #20
   195e4:	fa47 f203 	asr.w	r2, r7, r3
   195e8:	fa02 f303 	lsl.w	r3, r2, r3
   195ec:	429f      	cmp	r7, r3
   195ee:	d02a      	beq.n	19646 <__ieee754_pow+0xa2e>
   195f0:	4674      	mov	r4, lr
   195f2:	f7ff bb36 	b.w	18c62 <__ieee754_pow+0x4a>
   195f6:	4b29      	ldr	r3, [pc, #164]	; (1969c <__ieee754_pow+0xa84>)
   195f8:	4598      	cmp	r8, r3
   195fa:	f73f ae0e 	bgt.w	1921a <__ieee754_pow+0x602>
   195fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19602:	4692      	mov	sl, r2
   19604:	4693      	mov	fp, r2
   19606:	e638      	b.n	1927a <__ieee754_pow+0x662>
   19608:	4602      	mov	r2, r0
   1960a:	460b      	mov	r3, r1
   1960c:	f000 fa2e 	bl	19a6c <__aeabi_dsub>
   19610:	4602      	mov	r2, r0
   19612:	460b      	mov	r3, r1
   19614:	f000 fd08 	bl	1a028 <__aeabi_ddiv>
   19618:	f7ff bb40 	b.w	18c9c <__ieee754_pow+0x84>
   1961c:	a318      	add	r3, pc, #96	; (adr r3, 19680 <__ieee754_pow+0xa68>)
   1961e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19622:	e9cd 2308 	strd	r2, r3, [sp, #32]
   19626:	a318      	add	r3, pc, #96	; (adr r3, 19688 <__ieee754_pow+0xa70>)
   19628:	e9d3 2300 	ldrd	r2, r3, [r3]
   1962c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   19630:	4b1b      	ldr	r3, [pc, #108]	; (196a0 <__ieee754_pow+0xa88>)
   19632:	2200      	movs	r2, #0
   19634:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   19638:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1963c:	e401      	b.n	18e42 <__ieee754_pow+0x22a>
   1963e:	465a      	mov	r2, fp
   19640:	f000 f98a 	bl	19958 <scalbn>
   19644:	e6c9      	b.n	193da <__ieee754_pow+0x7c2>
   19646:	f002 0201 	and.w	r2, r2, #1
   1964a:	f1c2 0402 	rsb	r4, r2, #2
   1964e:	f7ff bb08 	b.w	18c62 <__ieee754_pow+0x4a>
   19652:	bf00      	nop
   19654:	f3af 8000 	nop.w
   19658:	60000000 	.word	0x60000000
   1965c:	3ff71547 	.word	0x3ff71547
   19660:	f85ddf44 	.word	0xf85ddf44
   19664:	3e54ae0b 	.word	0x3e54ae0b
   19668:	55555555 	.word	0x55555555
   1966c:	3fd55555 	.word	0x3fd55555
   19670:	652b82fe 	.word	0x652b82fe
   19674:	3ff71547 	.word	0x3ff71547
   19678:	8800759c 	.word	0x8800759c
   1967c:	7e37e43c 	.word	0x7e37e43c
   19680:	40000000 	.word	0x40000000
   19684:	3fe2b803 	.word	0x3fe2b803
   19688:	43cfd006 	.word	0x43cfd006
   1968c:	3e4cfdeb 	.word	0x3e4cfdeb
   19690:	3feffffe 	.word	0x3feffffe
   19694:	3ff00000 	.word	0x3ff00000
   19698:	3fd00000 	.word	0x3fd00000
   1969c:	3fe00000 	.word	0x3fe00000
   196a0:	3ff80000 	.word	0x3ff80000

000196a4 <__ieee754_sqrt>:
   196a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   196a8:	4f5b      	ldr	r7, [pc, #364]	; (19818 <__ieee754_sqrt+0x174>)
   196aa:	438f      	bics	r7, r1
   196ac:	4605      	mov	r5, r0
   196ae:	460c      	mov	r4, r1
   196b0:	f000 8092 	beq.w	197d8 <__ieee754_sqrt+0x134>
   196b4:	2900      	cmp	r1, #0
   196b6:	460b      	mov	r3, r1
   196b8:	4602      	mov	r2, r0
   196ba:	dd6f      	ble.n	1979c <__ieee754_sqrt+0xf8>
   196bc:	150f      	asrs	r7, r1, #20
   196be:	d07b      	beq.n	197b8 <__ieee754_sqrt+0x114>
   196c0:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   196c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
   196c8:	07f8      	lsls	r0, r7, #31
   196ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   196ce:	d45c      	bmi.n	1978a <__ieee754_sqrt+0xe6>
   196d0:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   196d4:	2600      	movs	r6, #0
   196d6:	440b      	add	r3, r1
   196d8:	107f      	asrs	r7, r7, #1
   196da:	0052      	lsls	r2, r2, #1
   196dc:	46b6      	mov	lr, r6
   196de:	2016      	movs	r0, #22
   196e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   196e4:	eb0e 0401 	add.w	r4, lr, r1
   196e8:	429c      	cmp	r4, r3
   196ea:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   196ee:	ea4f 0242 	mov.w	r2, r2, lsl #1
   196f2:	dc03      	bgt.n	196fc <__ieee754_sqrt+0x58>
   196f4:	1b1b      	subs	r3, r3, r4
   196f6:	eb04 0e01 	add.w	lr, r4, r1
   196fa:	440e      	add	r6, r1
   196fc:	3801      	subs	r0, #1
   196fe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   19702:	ea4f 0151 	mov.w	r1, r1, lsr #1
   19706:	d1ed      	bne.n	196e4 <__ieee754_sqrt+0x40>
   19708:	4684      	mov	ip, r0
   1970a:	2420      	movs	r4, #32
   1970c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   19710:	e009      	b.n	19726 <__ieee754_sqrt+0x82>
   19712:	d020      	beq.n	19756 <__ieee754_sqrt+0xb2>
   19714:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   19718:	3c01      	subs	r4, #1
   1971a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1971e:	442b      	add	r3, r5
   19720:	ea4f 0242 	mov.w	r2, r2, lsl #1
   19724:	d020      	beq.n	19768 <__ieee754_sqrt+0xc4>
   19726:	4573      	cmp	r3, lr
   19728:	eb01 050c 	add.w	r5, r1, ip
   1972c:	ddf1      	ble.n	19712 <__ieee754_sqrt+0x6e>
   1972e:	2d00      	cmp	r5, #0
   19730:	eb05 0c01 	add.w	ip, r5, r1
   19734:	db09      	blt.n	1974a <__ieee754_sqrt+0xa6>
   19736:	46f0      	mov	r8, lr
   19738:	4295      	cmp	r5, r2
   1973a:	eba3 030e 	sub.w	r3, r3, lr
   1973e:	d900      	bls.n	19742 <__ieee754_sqrt+0x9e>
   19740:	3b01      	subs	r3, #1
   19742:	1b52      	subs	r2, r2, r5
   19744:	4408      	add	r0, r1
   19746:	46c6      	mov	lr, r8
   19748:	e7e4      	b.n	19714 <__ieee754_sqrt+0x70>
   1974a:	f1bc 0f00 	cmp.w	ip, #0
   1974e:	dbf2      	blt.n	19736 <__ieee754_sqrt+0x92>
   19750:	f10e 0801 	add.w	r8, lr, #1
   19754:	e7f0      	b.n	19738 <__ieee754_sqrt+0x94>
   19756:	4295      	cmp	r5, r2
   19758:	d8dc      	bhi.n	19714 <__ieee754_sqrt+0x70>
   1975a:	2d00      	cmp	r5, #0
   1975c:	eb05 0c01 	add.w	ip, r5, r1
   19760:	db44      	blt.n	197ec <__ieee754_sqrt+0x148>
   19762:	4698      	mov	r8, r3
   19764:	2300      	movs	r3, #0
   19766:	e7ec      	b.n	19742 <__ieee754_sqrt+0x9e>
   19768:	4313      	orrs	r3, r2
   1976a:	d113      	bne.n	19794 <__ieee754_sqrt+0xf0>
   1976c:	0840      	lsrs	r0, r0, #1
   1976e:	1073      	asrs	r3, r6, #1
   19770:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   19774:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   19778:	07f2      	lsls	r2, r6, #31
   1977a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   1977e:	bf48      	it	mi
   19780:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   19784:	4649      	mov	r1, r9
   19786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1978a:	005b      	lsls	r3, r3, #1
   1978c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   19790:	0052      	lsls	r2, r2, #1
   19792:	e79d      	b.n	196d0 <__ieee754_sqrt+0x2c>
   19794:	1c41      	adds	r1, r0, #1
   19796:	d02d      	beq.n	197f4 <__ieee754_sqrt+0x150>
   19798:	3001      	adds	r0, #1
   1979a:	e7e7      	b.n	1976c <__ieee754_sqrt+0xc8>
   1979c:	4606      	mov	r6, r0
   1979e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   197a2:	433e      	orrs	r6, r7
   197a4:	d0ef      	beq.n	19786 <__ieee754_sqrt+0xe2>
   197a6:	bb69      	cbnz	r1, 19804 <__ieee754_sqrt+0x160>
   197a8:	460f      	mov	r7, r1
   197aa:	0ad3      	lsrs	r3, r2, #11
   197ac:	3f15      	subs	r7, #21
   197ae:	0552      	lsls	r2, r2, #21
   197b0:	2b00      	cmp	r3, #0
   197b2:	d0fa      	beq.n	197aa <__ieee754_sqrt+0x106>
   197b4:	02de      	lsls	r6, r3, #11
   197b6:	d420      	bmi.n	197fa <__ieee754_sqrt+0x156>
   197b8:	2400      	movs	r4, #0
   197ba:	e000      	b.n	197be <__ieee754_sqrt+0x11a>
   197bc:	4604      	mov	r4, r0
   197be:	005b      	lsls	r3, r3, #1
   197c0:	02dd      	lsls	r5, r3, #11
   197c2:	f104 0001 	add.w	r0, r4, #1
   197c6:	d5f9      	bpl.n	197bc <__ieee754_sqrt+0x118>
   197c8:	f1c0 0120 	rsb	r1, r0, #32
   197cc:	fa22 f101 	lsr.w	r1, r2, r1
   197d0:	430b      	orrs	r3, r1
   197d2:	1b3f      	subs	r7, r7, r4
   197d4:	4082      	lsls	r2, r0
   197d6:	e773      	b.n	196c0 <__ieee754_sqrt+0x1c>
   197d8:	4602      	mov	r2, r0
   197da:	460b      	mov	r3, r1
   197dc:	f000 fafa 	bl	19dd4 <__aeabi_dmul>
   197e0:	462a      	mov	r2, r5
   197e2:	4623      	mov	r3, r4
   197e4:	f000 f944 	bl	19a70 <__adddf3>
   197e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   197ec:	f1bc 0f00 	cmp.w	ip, #0
   197f0:	daae      	bge.n	19750 <__ieee754_sqrt+0xac>
   197f2:	e7b6      	b.n	19762 <__ieee754_sqrt+0xbe>
   197f4:	3601      	adds	r6, #1
   197f6:	4620      	mov	r0, r4
   197f8:	e7b9      	b.n	1976e <__ieee754_sqrt+0xca>
   197fa:	2000      	movs	r0, #0
   197fc:	2120      	movs	r1, #32
   197fe:	f04f 34ff 	mov.w	r4, #4294967295
   19802:	e7e3      	b.n	197cc <__ieee754_sqrt+0x128>
   19804:	4602      	mov	r2, r0
   19806:	460b      	mov	r3, r1
   19808:	f000 f930 	bl	19a6c <__aeabi_dsub>
   1980c:	4602      	mov	r2, r0
   1980e:	460b      	mov	r3, r1
   19810:	f000 fc0a 	bl	1a028 <__aeabi_ddiv>
   19814:	e7b7      	b.n	19786 <__ieee754_sqrt+0xe2>
   19816:	bf00      	nop
   19818:	7ff00000 	.word	0x7ff00000

0001981c <fabs>:
   1981c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   19820:	4770      	bx	lr
   19822:	bf00      	nop

00019824 <finite>:
   19824:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   19828:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   1982c:	0fc0      	lsrs	r0, r0, #31
   1982e:	4770      	bx	lr

00019830 <matherr>:
   19830:	2000      	movs	r0, #0
   19832:	4770      	bx	lr

00019834 <nan>:
   19834:	2000      	movs	r0, #0
   19836:	4901      	ldr	r1, [pc, #4]	; (1983c <nan+0x8>)
   19838:	4770      	bx	lr
   1983a:	bf00      	nop
   1983c:	7ff80000 	.word	0x7ff80000

00019840 <rint>:
   19840:	b5f0      	push	{r4, r5, r6, r7, lr}
   19842:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   19846:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   1984a:	2e13      	cmp	r6, #19
   1984c:	b083      	sub	sp, #12
   1984e:	4602      	mov	r2, r0
   19850:	460b      	mov	r3, r1
   19852:	460c      	mov	r4, r1
   19854:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   19858:	4607      	mov	r7, r0
   1985a:	dc2e      	bgt.n	198ba <rint+0x7a>
   1985c:	2e00      	cmp	r6, #0
   1985e:	db49      	blt.n	198f4 <rint+0xb4>
   19860:	493a      	ldr	r1, [pc, #232]	; (1994c <rint+0x10c>)
   19862:	4131      	asrs	r1, r6
   19864:	ea03 0001 	and.w	r0, r3, r1
   19868:	4310      	orrs	r0, r2
   1986a:	d02b      	beq.n	198c4 <rint+0x84>
   1986c:	0849      	lsrs	r1, r1, #1
   1986e:	400b      	ands	r3, r1
   19870:	ea53 0702 	orrs.w	r7, r3, r2
   19874:	d00c      	beq.n	19890 <rint+0x50>
   19876:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1987a:	2e13      	cmp	r6, #19
   1987c:	ea24 0101 	bic.w	r1, r4, r1
   19880:	fa43 f406 	asr.w	r4, r3, r6
   19884:	ea44 0401 	orr.w	r4, r4, r1
   19888:	bf0c      	ite	eq
   1988a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   1988e:	2700      	movne	r7, #0
   19890:	4b2f      	ldr	r3, [pc, #188]	; (19950 <rint+0x110>)
   19892:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   19896:	4621      	mov	r1, r4
   19898:	e9d5 4500 	ldrd	r4, r5, [r5]
   1989c:	4638      	mov	r0, r7
   1989e:	4622      	mov	r2, r4
   198a0:	462b      	mov	r3, r5
   198a2:	f000 f8e5 	bl	19a70 <__adddf3>
   198a6:	e9cd 0100 	strd	r0, r1, [sp]
   198aa:	4622      	mov	r2, r4
   198ac:	462b      	mov	r3, r5
   198ae:	e9dd 0100 	ldrd	r0, r1, [sp]
   198b2:	f000 f8db 	bl	19a6c <__aeabi_dsub>
   198b6:	b003      	add	sp, #12
   198b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   198ba:	2e33      	cmp	r6, #51	; 0x33
   198bc:	dd06      	ble.n	198cc <rint+0x8c>
   198be:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   198c2:	d040      	beq.n	19946 <rint+0x106>
   198c4:	4610      	mov	r0, r2
   198c6:	4619      	mov	r1, r3
   198c8:	b003      	add	sp, #12
   198ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   198cc:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   198d0:	f04f 31ff 	mov.w	r1, #4294967295
   198d4:	fa21 f10e 	lsr.w	r1, r1, lr
   198d8:	4208      	tst	r0, r1
   198da:	d0f3      	beq.n	198c4 <rint+0x84>
   198dc:	0849      	lsrs	r1, r1, #1
   198de:	4208      	tst	r0, r1
   198e0:	d0d6      	beq.n	19890 <rint+0x50>
   198e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   198e6:	ea20 0101 	bic.w	r1, r0, r1
   198ea:	fa43 fe0e 	asr.w	lr, r3, lr
   198ee:	ea4e 0701 	orr.w	r7, lr, r1
   198f2:	e7cd      	b.n	19890 <rint+0x50>
   198f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   198f8:	4301      	orrs	r1, r0
   198fa:	d0e3      	beq.n	198c4 <rint+0x84>
   198fc:	f3c3 0113 	ubfx	r1, r3, #0, #20
   19900:	4e13      	ldr	r6, [pc, #76]	; (19950 <rint+0x110>)
   19902:	4301      	orrs	r1, r0
   19904:	f1c1 0c00 	rsb	ip, r1, #0
   19908:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   1990c:	e9d6 6700 	ldrd	r6, r7, [r6]
   19910:	ea4c 0c01 	orr.w	ip, ip, r1
   19914:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   19918:	0c5c      	lsrs	r4, r3, #17
   1991a:	0464      	lsls	r4, r4, #17
   1991c:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   19920:	ea43 0104 	orr.w	r1, r3, r4
   19924:	4632      	mov	r2, r6
   19926:	463b      	mov	r3, r7
   19928:	f000 f8a2 	bl	19a70 <__adddf3>
   1992c:	e9cd 0100 	strd	r0, r1, [sp]
   19930:	4632      	mov	r2, r6
   19932:	463b      	mov	r3, r7
   19934:	e9dd 0100 	ldrd	r0, r1, [sp]
   19938:	f000 f898 	bl	19a6c <__aeabi_dsub>
   1993c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   19940:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   19944:	e7c0      	b.n	198c8 <rint+0x88>
   19946:	f000 f893 	bl	19a70 <__adddf3>
   1994a:	e7bd      	b.n	198c8 <rint+0x88>
   1994c:	000fffff 	.word	0x000fffff
   19950:	00020eb8 	.word	0x00020eb8
   19954:	00000000 	.word	0x00000000

00019958 <scalbn>:
   19958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1995a:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1995e:	4604      	mov	r4, r0
   19960:	460d      	mov	r5, r1
   19962:	460b      	mov	r3, r1
   19964:	4617      	mov	r7, r2
   19966:	bb0e      	cbnz	r6, 199ac <scalbn+0x54>
   19968:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1996c:	4303      	orrs	r3, r0
   1996e:	4686      	mov	lr, r0
   19970:	d025      	beq.n	199be <scalbn+0x66>
   19972:	2200      	movs	r2, #0
   19974:	4b34      	ldr	r3, [pc, #208]	; (19a48 <scalbn+0xf0>)
   19976:	f000 fa2d 	bl	19dd4 <__aeabi_dmul>
   1997a:	4a34      	ldr	r2, [pc, #208]	; (19a4c <scalbn+0xf4>)
   1997c:	4297      	cmp	r7, r2
   1997e:	4604      	mov	r4, r0
   19980:	460d      	mov	r5, r1
   19982:	460b      	mov	r3, r1
   19984:	db2a      	blt.n	199dc <scalbn+0x84>
   19986:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1998a:	3e36      	subs	r6, #54	; 0x36
   1998c:	443e      	add	r6, r7
   1998e:	f240 72fe 	movw	r2, #2046	; 0x7fe
   19992:	4296      	cmp	r6, r2
   19994:	dc28      	bgt.n	199e8 <scalbn+0x90>
   19996:	2e00      	cmp	r6, #0
   19998:	dd12      	ble.n	199c0 <scalbn+0x68>
   1999a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1999e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   199a2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   199a6:	4620      	mov	r0, r4
   199a8:	4629      	mov	r1, r5
   199aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
   199b0:	4296      	cmp	r6, r2
   199b2:	d1eb      	bne.n	1998c <scalbn+0x34>
   199b4:	4602      	mov	r2, r0
   199b6:	460b      	mov	r3, r1
   199b8:	f000 f85a 	bl	19a70 <__adddf3>
   199bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199c0:	f116 0f35 	cmn.w	r6, #53	; 0x35
   199c4:	da1d      	bge.n	19a02 <scalbn+0xaa>
   199c6:	f24c 3350 	movw	r3, #50000	; 0xc350
   199ca:	429f      	cmp	r7, r3
   199cc:	4622      	mov	r2, r4
   199ce:	462b      	mov	r3, r5
   199d0:	dc25      	bgt.n	19a1e <scalbn+0xc6>
   199d2:	a119      	add	r1, pc, #100	; (adr r1, 19a38 <scalbn+0xe0>)
   199d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   199d8:	f000 f83c 	bl	19a54 <copysign>
   199dc:	a316      	add	r3, pc, #88	; (adr r3, 19a38 <scalbn+0xe0>)
   199de:	e9d3 2300 	ldrd	r2, r3, [r3]
   199e2:	f000 f9f7 	bl	19dd4 <__aeabi_dmul>
   199e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199e8:	4622      	mov	r2, r4
   199ea:	462b      	mov	r3, r5
   199ec:	a114      	add	r1, pc, #80	; (adr r1, 19a40 <scalbn+0xe8>)
   199ee:	e9d1 0100 	ldrd	r0, r1, [r1]
   199f2:	f000 f82f 	bl	19a54 <copysign>
   199f6:	a312      	add	r3, pc, #72	; (adr r3, 19a40 <scalbn+0xe8>)
   199f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   199fc:	f000 f9ea 	bl	19dd4 <__aeabi_dmul>
   19a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19a02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   19a06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   19a0a:	3636      	adds	r6, #54	; 0x36
   19a0c:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   19a10:	4620      	mov	r0, r4
   19a12:	4629      	mov	r1, r5
   19a14:	2200      	movs	r2, #0
   19a16:	4b0e      	ldr	r3, [pc, #56]	; (19a50 <scalbn+0xf8>)
   19a18:	f000 f9dc 	bl	19dd4 <__aeabi_dmul>
   19a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19a1e:	a108      	add	r1, pc, #32	; (adr r1, 19a40 <scalbn+0xe8>)
   19a20:	e9d1 0100 	ldrd	r0, r1, [r1]
   19a24:	f000 f816 	bl	19a54 <copysign>
   19a28:	a305      	add	r3, pc, #20	; (adr r3, 19a40 <scalbn+0xe8>)
   19a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   19a2e:	f000 f9d1 	bl	19dd4 <__aeabi_dmul>
   19a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19a34:	f3af 8000 	nop.w
   19a38:	c2f8f359 	.word	0xc2f8f359
   19a3c:	01a56e1f 	.word	0x01a56e1f
   19a40:	8800759c 	.word	0x8800759c
   19a44:	7e37e43c 	.word	0x7e37e43c
   19a48:	43500000 	.word	0x43500000
   19a4c:	ffff3cb0 	.word	0xffff3cb0
   19a50:	3c900000 	.word	0x3c900000

00019a54 <copysign>:
   19a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   19a58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   19a5c:	ea42 0103 	orr.w	r1, r2, r3
   19a60:	4770      	bx	lr
   19a62:	bf00      	nop

00019a64 <__aeabi_drsub>:
   19a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   19a68:	e002      	b.n	19a70 <__adddf3>
   19a6a:	bf00      	nop

00019a6c <__aeabi_dsub>:
   19a6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00019a70 <__adddf3>:
   19a70:	b530      	push	{r4, r5, lr}
   19a72:	ea4f 0441 	mov.w	r4, r1, lsl #1
   19a76:	ea4f 0543 	mov.w	r5, r3, lsl #1
   19a7a:	ea94 0f05 	teq	r4, r5
   19a7e:	bf08      	it	eq
   19a80:	ea90 0f02 	teqeq	r0, r2
   19a84:	bf1f      	itttt	ne
   19a86:	ea54 0c00 	orrsne.w	ip, r4, r0
   19a8a:	ea55 0c02 	orrsne.w	ip, r5, r2
   19a8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   19a92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   19a96:	f000 80e2 	beq.w	19c5e <__adddf3+0x1ee>
   19a9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   19a9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   19aa2:	bfb8      	it	lt
   19aa4:	426d      	neglt	r5, r5
   19aa6:	dd0c      	ble.n	19ac2 <__adddf3+0x52>
   19aa8:	442c      	add	r4, r5
   19aaa:	ea80 0202 	eor.w	r2, r0, r2
   19aae:	ea81 0303 	eor.w	r3, r1, r3
   19ab2:	ea82 0000 	eor.w	r0, r2, r0
   19ab6:	ea83 0101 	eor.w	r1, r3, r1
   19aba:	ea80 0202 	eor.w	r2, r0, r2
   19abe:	ea81 0303 	eor.w	r3, r1, r3
   19ac2:	2d36      	cmp	r5, #54	; 0x36
   19ac4:	bf88      	it	hi
   19ac6:	bd30      	pophi	{r4, r5, pc}
   19ac8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   19acc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   19ad0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   19ad4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   19ad8:	d002      	beq.n	19ae0 <__adddf3+0x70>
   19ada:	4240      	negs	r0, r0
   19adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19ae0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   19ae4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   19ae8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   19aec:	d002      	beq.n	19af4 <__adddf3+0x84>
   19aee:	4252      	negs	r2, r2
   19af0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   19af4:	ea94 0f05 	teq	r4, r5
   19af8:	f000 80a7 	beq.w	19c4a <__adddf3+0x1da>
   19afc:	f1a4 0401 	sub.w	r4, r4, #1
   19b00:	f1d5 0e20 	rsbs	lr, r5, #32
   19b04:	db0d      	blt.n	19b22 <__adddf3+0xb2>
   19b06:	fa02 fc0e 	lsl.w	ip, r2, lr
   19b0a:	fa22 f205 	lsr.w	r2, r2, r5
   19b0e:	1880      	adds	r0, r0, r2
   19b10:	f141 0100 	adc.w	r1, r1, #0
   19b14:	fa03 f20e 	lsl.w	r2, r3, lr
   19b18:	1880      	adds	r0, r0, r2
   19b1a:	fa43 f305 	asr.w	r3, r3, r5
   19b1e:	4159      	adcs	r1, r3
   19b20:	e00e      	b.n	19b40 <__adddf3+0xd0>
   19b22:	f1a5 0520 	sub.w	r5, r5, #32
   19b26:	f10e 0e20 	add.w	lr, lr, #32
   19b2a:	2a01      	cmp	r2, #1
   19b2c:	fa03 fc0e 	lsl.w	ip, r3, lr
   19b30:	bf28      	it	cs
   19b32:	f04c 0c02 	orrcs.w	ip, ip, #2
   19b36:	fa43 f305 	asr.w	r3, r3, r5
   19b3a:	18c0      	adds	r0, r0, r3
   19b3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   19b40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19b44:	d507      	bpl.n	19b56 <__adddf3+0xe6>
   19b46:	f04f 0e00 	mov.w	lr, #0
   19b4a:	f1dc 0c00 	rsbs	ip, ip, #0
   19b4e:	eb7e 0000 	sbcs.w	r0, lr, r0
   19b52:	eb6e 0101 	sbc.w	r1, lr, r1
   19b56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   19b5a:	d31b      	bcc.n	19b94 <__adddf3+0x124>
   19b5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   19b60:	d30c      	bcc.n	19b7c <__adddf3+0x10c>
   19b62:	0849      	lsrs	r1, r1, #1
   19b64:	ea5f 0030 	movs.w	r0, r0, rrx
   19b68:	ea4f 0c3c 	mov.w	ip, ip, rrx
   19b6c:	f104 0401 	add.w	r4, r4, #1
   19b70:	ea4f 5244 	mov.w	r2, r4, lsl #21
   19b74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   19b78:	f080 809a 	bcs.w	19cb0 <__adddf3+0x240>
   19b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   19b80:	bf08      	it	eq
   19b82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   19b86:	f150 0000 	adcs.w	r0, r0, #0
   19b8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   19b8e:	ea41 0105 	orr.w	r1, r1, r5
   19b92:	bd30      	pop	{r4, r5, pc}
   19b94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   19b98:	4140      	adcs	r0, r0
   19b9a:	eb41 0101 	adc.w	r1, r1, r1
   19b9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   19ba2:	f1a4 0401 	sub.w	r4, r4, #1
   19ba6:	d1e9      	bne.n	19b7c <__adddf3+0x10c>
   19ba8:	f091 0f00 	teq	r1, #0
   19bac:	bf04      	itt	eq
   19bae:	4601      	moveq	r1, r0
   19bb0:	2000      	moveq	r0, #0
   19bb2:	fab1 f381 	clz	r3, r1
   19bb6:	bf08      	it	eq
   19bb8:	3320      	addeq	r3, #32
   19bba:	f1a3 030b 	sub.w	r3, r3, #11
   19bbe:	f1b3 0220 	subs.w	r2, r3, #32
   19bc2:	da0c      	bge.n	19bde <__adddf3+0x16e>
   19bc4:	320c      	adds	r2, #12
   19bc6:	dd08      	ble.n	19bda <__adddf3+0x16a>
   19bc8:	f102 0c14 	add.w	ip, r2, #20
   19bcc:	f1c2 020c 	rsb	r2, r2, #12
   19bd0:	fa01 f00c 	lsl.w	r0, r1, ip
   19bd4:	fa21 f102 	lsr.w	r1, r1, r2
   19bd8:	e00c      	b.n	19bf4 <__adddf3+0x184>
   19bda:	f102 0214 	add.w	r2, r2, #20
   19bde:	bfd8      	it	le
   19be0:	f1c2 0c20 	rsble	ip, r2, #32
   19be4:	fa01 f102 	lsl.w	r1, r1, r2
   19be8:	fa20 fc0c 	lsr.w	ip, r0, ip
   19bec:	bfdc      	itt	le
   19bee:	ea41 010c 	orrle.w	r1, r1, ip
   19bf2:	4090      	lslle	r0, r2
   19bf4:	1ae4      	subs	r4, r4, r3
   19bf6:	bfa2      	ittt	ge
   19bf8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   19bfc:	4329      	orrge	r1, r5
   19bfe:	bd30      	popge	{r4, r5, pc}
   19c00:	ea6f 0404 	mvn.w	r4, r4
   19c04:	3c1f      	subs	r4, #31
   19c06:	da1c      	bge.n	19c42 <__adddf3+0x1d2>
   19c08:	340c      	adds	r4, #12
   19c0a:	dc0e      	bgt.n	19c2a <__adddf3+0x1ba>
   19c0c:	f104 0414 	add.w	r4, r4, #20
   19c10:	f1c4 0220 	rsb	r2, r4, #32
   19c14:	fa20 f004 	lsr.w	r0, r0, r4
   19c18:	fa01 f302 	lsl.w	r3, r1, r2
   19c1c:	ea40 0003 	orr.w	r0, r0, r3
   19c20:	fa21 f304 	lsr.w	r3, r1, r4
   19c24:	ea45 0103 	orr.w	r1, r5, r3
   19c28:	bd30      	pop	{r4, r5, pc}
   19c2a:	f1c4 040c 	rsb	r4, r4, #12
   19c2e:	f1c4 0220 	rsb	r2, r4, #32
   19c32:	fa20 f002 	lsr.w	r0, r0, r2
   19c36:	fa01 f304 	lsl.w	r3, r1, r4
   19c3a:	ea40 0003 	orr.w	r0, r0, r3
   19c3e:	4629      	mov	r1, r5
   19c40:	bd30      	pop	{r4, r5, pc}
   19c42:	fa21 f004 	lsr.w	r0, r1, r4
   19c46:	4629      	mov	r1, r5
   19c48:	bd30      	pop	{r4, r5, pc}
   19c4a:	f094 0f00 	teq	r4, #0
   19c4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   19c52:	bf06      	itte	eq
   19c54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   19c58:	3401      	addeq	r4, #1
   19c5a:	3d01      	subne	r5, #1
   19c5c:	e74e      	b.n	19afc <__adddf3+0x8c>
   19c5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   19c62:	bf18      	it	ne
   19c64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   19c68:	d029      	beq.n	19cbe <__adddf3+0x24e>
   19c6a:	ea94 0f05 	teq	r4, r5
   19c6e:	bf08      	it	eq
   19c70:	ea90 0f02 	teqeq	r0, r2
   19c74:	d005      	beq.n	19c82 <__adddf3+0x212>
   19c76:	ea54 0c00 	orrs.w	ip, r4, r0
   19c7a:	bf04      	itt	eq
   19c7c:	4619      	moveq	r1, r3
   19c7e:	4610      	moveq	r0, r2
   19c80:	bd30      	pop	{r4, r5, pc}
   19c82:	ea91 0f03 	teq	r1, r3
   19c86:	bf1e      	ittt	ne
   19c88:	2100      	movne	r1, #0
   19c8a:	2000      	movne	r0, #0
   19c8c:	bd30      	popne	{r4, r5, pc}
   19c8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   19c92:	d105      	bne.n	19ca0 <__adddf3+0x230>
   19c94:	0040      	lsls	r0, r0, #1
   19c96:	4149      	adcs	r1, r1
   19c98:	bf28      	it	cs
   19c9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   19c9e:	bd30      	pop	{r4, r5, pc}
   19ca0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   19ca4:	bf3c      	itt	cc
   19ca6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   19caa:	bd30      	popcc	{r4, r5, pc}
   19cac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19cb0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   19cb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   19cb8:	f04f 0000 	mov.w	r0, #0
   19cbc:	bd30      	pop	{r4, r5, pc}
   19cbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   19cc2:	bf1a      	itte	ne
   19cc4:	4619      	movne	r1, r3
   19cc6:	4610      	movne	r0, r2
   19cc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   19ccc:	bf1c      	itt	ne
   19cce:	460b      	movne	r3, r1
   19cd0:	4602      	movne	r2, r0
   19cd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   19cd6:	bf06      	itte	eq
   19cd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   19cdc:	ea91 0f03 	teqeq	r1, r3
   19ce0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   19ce4:	bd30      	pop	{r4, r5, pc}
   19ce6:	bf00      	nop

00019ce8 <__aeabi_ui2d>:
   19ce8:	f090 0f00 	teq	r0, #0
   19cec:	bf04      	itt	eq
   19cee:	2100      	moveq	r1, #0
   19cf0:	4770      	bxeq	lr
   19cf2:	b530      	push	{r4, r5, lr}
   19cf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   19cf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   19cfc:	f04f 0500 	mov.w	r5, #0
   19d00:	f04f 0100 	mov.w	r1, #0
   19d04:	e750      	b.n	19ba8 <__adddf3+0x138>
   19d06:	bf00      	nop

00019d08 <__aeabi_i2d>:
   19d08:	f090 0f00 	teq	r0, #0
   19d0c:	bf04      	itt	eq
   19d0e:	2100      	moveq	r1, #0
   19d10:	4770      	bxeq	lr
   19d12:	b530      	push	{r4, r5, lr}
   19d14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   19d18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   19d1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   19d20:	bf48      	it	mi
   19d22:	4240      	negmi	r0, r0
   19d24:	f04f 0100 	mov.w	r1, #0
   19d28:	e73e      	b.n	19ba8 <__adddf3+0x138>
   19d2a:	bf00      	nop

00019d2c <__aeabi_f2d>:
   19d2c:	0042      	lsls	r2, r0, #1
   19d2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   19d32:	ea4f 0131 	mov.w	r1, r1, rrx
   19d36:	ea4f 7002 	mov.w	r0, r2, lsl #28
   19d3a:	bf1f      	itttt	ne
   19d3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   19d40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   19d44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   19d48:	4770      	bxne	lr
   19d4a:	f092 0f00 	teq	r2, #0
   19d4e:	bf14      	ite	ne
   19d50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   19d54:	4770      	bxeq	lr
   19d56:	b530      	push	{r4, r5, lr}
   19d58:	f44f 7460 	mov.w	r4, #896	; 0x380
   19d5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19d60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   19d64:	e720      	b.n	19ba8 <__adddf3+0x138>
   19d66:	bf00      	nop

00019d68 <__aeabi_ul2d>:
   19d68:	ea50 0201 	orrs.w	r2, r0, r1
   19d6c:	bf08      	it	eq
   19d6e:	4770      	bxeq	lr
   19d70:	b530      	push	{r4, r5, lr}
   19d72:	f04f 0500 	mov.w	r5, #0
   19d76:	e00a      	b.n	19d8e <__aeabi_l2d+0x16>

00019d78 <__aeabi_l2d>:
   19d78:	ea50 0201 	orrs.w	r2, r0, r1
   19d7c:	bf08      	it	eq
   19d7e:	4770      	bxeq	lr
   19d80:	b530      	push	{r4, r5, lr}
   19d82:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   19d86:	d502      	bpl.n	19d8e <__aeabi_l2d+0x16>
   19d88:	4240      	negs	r0, r0
   19d8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19d8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   19d92:	f104 0432 	add.w	r4, r4, #50	; 0x32
   19d96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   19d9a:	f43f aedc 	beq.w	19b56 <__adddf3+0xe6>
   19d9e:	f04f 0203 	mov.w	r2, #3
   19da2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   19da6:	bf18      	it	ne
   19da8:	3203      	addne	r2, #3
   19daa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   19dae:	bf18      	it	ne
   19db0:	3203      	addne	r2, #3
   19db2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   19db6:	f1c2 0320 	rsb	r3, r2, #32
   19dba:	fa00 fc03 	lsl.w	ip, r0, r3
   19dbe:	fa20 f002 	lsr.w	r0, r0, r2
   19dc2:	fa01 fe03 	lsl.w	lr, r1, r3
   19dc6:	ea40 000e 	orr.w	r0, r0, lr
   19dca:	fa21 f102 	lsr.w	r1, r1, r2
   19dce:	4414      	add	r4, r2
   19dd0:	e6c1      	b.n	19b56 <__adddf3+0xe6>
   19dd2:	bf00      	nop

00019dd4 <__aeabi_dmul>:
   19dd4:	b570      	push	{r4, r5, r6, lr}
   19dd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   19dda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   19dde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   19de2:	bf1d      	ittte	ne
   19de4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   19de8:	ea94 0f0c 	teqne	r4, ip
   19dec:	ea95 0f0c 	teqne	r5, ip
   19df0:	f000 f8de 	bleq	19fb0 <__aeabi_dmul+0x1dc>
   19df4:	442c      	add	r4, r5
   19df6:	ea81 0603 	eor.w	r6, r1, r3
   19dfa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   19dfe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   19e02:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   19e06:	bf18      	it	ne
   19e08:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   19e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   19e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   19e14:	d038      	beq.n	19e88 <__aeabi_dmul+0xb4>
   19e16:	fba0 ce02 	umull	ip, lr, r0, r2
   19e1a:	f04f 0500 	mov.w	r5, #0
   19e1e:	fbe1 e502 	umlal	lr, r5, r1, r2
   19e22:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   19e26:	fbe0 e503 	umlal	lr, r5, r0, r3
   19e2a:	f04f 0600 	mov.w	r6, #0
   19e2e:	fbe1 5603 	umlal	r5, r6, r1, r3
   19e32:	f09c 0f00 	teq	ip, #0
   19e36:	bf18      	it	ne
   19e38:	f04e 0e01 	orrne.w	lr, lr, #1
   19e3c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   19e40:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   19e44:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   19e48:	d204      	bcs.n	19e54 <__aeabi_dmul+0x80>
   19e4a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   19e4e:	416d      	adcs	r5, r5
   19e50:	eb46 0606 	adc.w	r6, r6, r6
   19e54:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   19e58:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   19e5c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   19e60:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   19e64:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   19e68:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   19e6c:	bf88      	it	hi
   19e6e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   19e72:	d81e      	bhi.n	19eb2 <__aeabi_dmul+0xde>
   19e74:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   19e78:	bf08      	it	eq
   19e7a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   19e7e:	f150 0000 	adcs.w	r0, r0, #0
   19e82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   19e86:	bd70      	pop	{r4, r5, r6, pc}
   19e88:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   19e8c:	ea46 0101 	orr.w	r1, r6, r1
   19e90:	ea40 0002 	orr.w	r0, r0, r2
   19e94:	ea81 0103 	eor.w	r1, r1, r3
   19e98:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   19e9c:	bfc2      	ittt	gt
   19e9e:	ebd4 050c 	rsbsgt	r5, r4, ip
   19ea2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   19ea6:	bd70      	popgt	{r4, r5, r6, pc}
   19ea8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   19eac:	f04f 0e00 	mov.w	lr, #0
   19eb0:	3c01      	subs	r4, #1
   19eb2:	f300 80ab 	bgt.w	1a00c <__aeabi_dmul+0x238>
   19eb6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   19eba:	bfde      	ittt	le
   19ebc:	2000      	movle	r0, #0
   19ebe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   19ec2:	bd70      	pople	{r4, r5, r6, pc}
   19ec4:	f1c4 0400 	rsb	r4, r4, #0
   19ec8:	3c20      	subs	r4, #32
   19eca:	da35      	bge.n	19f38 <__aeabi_dmul+0x164>
   19ecc:	340c      	adds	r4, #12
   19ece:	dc1b      	bgt.n	19f08 <__aeabi_dmul+0x134>
   19ed0:	f104 0414 	add.w	r4, r4, #20
   19ed4:	f1c4 0520 	rsb	r5, r4, #32
   19ed8:	fa00 f305 	lsl.w	r3, r0, r5
   19edc:	fa20 f004 	lsr.w	r0, r0, r4
   19ee0:	fa01 f205 	lsl.w	r2, r1, r5
   19ee4:	ea40 0002 	orr.w	r0, r0, r2
   19ee8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   19eec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   19ef0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   19ef4:	fa21 f604 	lsr.w	r6, r1, r4
   19ef8:	eb42 0106 	adc.w	r1, r2, r6
   19efc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   19f00:	bf08      	it	eq
   19f02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   19f06:	bd70      	pop	{r4, r5, r6, pc}
   19f08:	f1c4 040c 	rsb	r4, r4, #12
   19f0c:	f1c4 0520 	rsb	r5, r4, #32
   19f10:	fa00 f304 	lsl.w	r3, r0, r4
   19f14:	fa20 f005 	lsr.w	r0, r0, r5
   19f18:	fa01 f204 	lsl.w	r2, r1, r4
   19f1c:	ea40 0002 	orr.w	r0, r0, r2
   19f20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   19f24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   19f28:	f141 0100 	adc.w	r1, r1, #0
   19f2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   19f30:	bf08      	it	eq
   19f32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   19f36:	bd70      	pop	{r4, r5, r6, pc}
   19f38:	f1c4 0520 	rsb	r5, r4, #32
   19f3c:	fa00 f205 	lsl.w	r2, r0, r5
   19f40:	ea4e 0e02 	orr.w	lr, lr, r2
   19f44:	fa20 f304 	lsr.w	r3, r0, r4
   19f48:	fa01 f205 	lsl.w	r2, r1, r5
   19f4c:	ea43 0302 	orr.w	r3, r3, r2
   19f50:	fa21 f004 	lsr.w	r0, r1, r4
   19f54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   19f58:	fa21 f204 	lsr.w	r2, r1, r4
   19f5c:	ea20 0002 	bic.w	r0, r0, r2
   19f60:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   19f64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   19f68:	bf08      	it	eq
   19f6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   19f6e:	bd70      	pop	{r4, r5, r6, pc}
   19f70:	f094 0f00 	teq	r4, #0
   19f74:	d10f      	bne.n	19f96 <__aeabi_dmul+0x1c2>
   19f76:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   19f7a:	0040      	lsls	r0, r0, #1
   19f7c:	eb41 0101 	adc.w	r1, r1, r1
   19f80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   19f84:	bf08      	it	eq
   19f86:	3c01      	subeq	r4, #1
   19f88:	d0f7      	beq.n	19f7a <__aeabi_dmul+0x1a6>
   19f8a:	ea41 0106 	orr.w	r1, r1, r6
   19f8e:	f095 0f00 	teq	r5, #0
   19f92:	bf18      	it	ne
   19f94:	4770      	bxne	lr
   19f96:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   19f9a:	0052      	lsls	r2, r2, #1
   19f9c:	eb43 0303 	adc.w	r3, r3, r3
   19fa0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   19fa4:	bf08      	it	eq
   19fa6:	3d01      	subeq	r5, #1
   19fa8:	d0f7      	beq.n	19f9a <__aeabi_dmul+0x1c6>
   19faa:	ea43 0306 	orr.w	r3, r3, r6
   19fae:	4770      	bx	lr
   19fb0:	ea94 0f0c 	teq	r4, ip
   19fb4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   19fb8:	bf18      	it	ne
   19fba:	ea95 0f0c 	teqne	r5, ip
   19fbe:	d00c      	beq.n	19fda <__aeabi_dmul+0x206>
   19fc0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   19fc4:	bf18      	it	ne
   19fc6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   19fca:	d1d1      	bne.n	19f70 <__aeabi_dmul+0x19c>
   19fcc:	ea81 0103 	eor.w	r1, r1, r3
   19fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   19fd4:	f04f 0000 	mov.w	r0, #0
   19fd8:	bd70      	pop	{r4, r5, r6, pc}
   19fda:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   19fde:	bf06      	itte	eq
   19fe0:	4610      	moveq	r0, r2
   19fe2:	4619      	moveq	r1, r3
   19fe4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   19fe8:	d019      	beq.n	1a01e <__aeabi_dmul+0x24a>
   19fea:	ea94 0f0c 	teq	r4, ip
   19fee:	d102      	bne.n	19ff6 <__aeabi_dmul+0x222>
   19ff0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   19ff4:	d113      	bne.n	1a01e <__aeabi_dmul+0x24a>
   19ff6:	ea95 0f0c 	teq	r5, ip
   19ffa:	d105      	bne.n	1a008 <__aeabi_dmul+0x234>
   19ffc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1a000:	bf1c      	itt	ne
   1a002:	4610      	movne	r0, r2
   1a004:	4619      	movne	r1, r3
   1a006:	d10a      	bne.n	1a01e <__aeabi_dmul+0x24a>
   1a008:	ea81 0103 	eor.w	r1, r1, r3
   1a00c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a010:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1a014:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1a018:	f04f 0000 	mov.w	r0, #0
   1a01c:	bd70      	pop	{r4, r5, r6, pc}
   1a01e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1a022:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1a026:	bd70      	pop	{r4, r5, r6, pc}

0001a028 <__aeabi_ddiv>:
   1a028:	b570      	push	{r4, r5, r6, lr}
   1a02a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a02e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1a032:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1a036:	bf1d      	ittte	ne
   1a038:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1a03c:	ea94 0f0c 	teqne	r4, ip
   1a040:	ea95 0f0c 	teqne	r5, ip
   1a044:	f000 f8a7 	bleq	1a196 <__aeabi_ddiv+0x16e>
   1a048:	eba4 0405 	sub.w	r4, r4, r5
   1a04c:	ea81 0e03 	eor.w	lr, r1, r3
   1a050:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1a054:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1a058:	f000 8088 	beq.w	1a16c <__aeabi_ddiv+0x144>
   1a05c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1a060:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1a064:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1a068:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a06c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1a070:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1a074:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1a078:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1a07c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1a080:	429d      	cmp	r5, r3
   1a082:	bf08      	it	eq
   1a084:	4296      	cmpeq	r6, r2
   1a086:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1a08a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1a08e:	d202      	bcs.n	1a096 <__aeabi_ddiv+0x6e>
   1a090:	085b      	lsrs	r3, r3, #1
   1a092:	ea4f 0232 	mov.w	r2, r2, rrx
   1a096:	1ab6      	subs	r6, r6, r2
   1a098:	eb65 0503 	sbc.w	r5, r5, r3
   1a09c:	085b      	lsrs	r3, r3, #1
   1a09e:	ea4f 0232 	mov.w	r2, r2, rrx
   1a0a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1a0a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1a0aa:	ebb6 0e02 	subs.w	lr, r6, r2
   1a0ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a0b2:	bf22      	ittt	cs
   1a0b4:	1ab6      	subcs	r6, r6, r2
   1a0b6:	4675      	movcs	r5, lr
   1a0b8:	ea40 000c 	orrcs.w	r0, r0, ip
   1a0bc:	085b      	lsrs	r3, r3, #1
   1a0be:	ea4f 0232 	mov.w	r2, r2, rrx
   1a0c2:	ebb6 0e02 	subs.w	lr, r6, r2
   1a0c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a0ca:	bf22      	ittt	cs
   1a0cc:	1ab6      	subcs	r6, r6, r2
   1a0ce:	4675      	movcs	r5, lr
   1a0d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1a0d4:	085b      	lsrs	r3, r3, #1
   1a0d6:	ea4f 0232 	mov.w	r2, r2, rrx
   1a0da:	ebb6 0e02 	subs.w	lr, r6, r2
   1a0de:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a0e2:	bf22      	ittt	cs
   1a0e4:	1ab6      	subcs	r6, r6, r2
   1a0e6:	4675      	movcs	r5, lr
   1a0e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1a0ec:	085b      	lsrs	r3, r3, #1
   1a0ee:	ea4f 0232 	mov.w	r2, r2, rrx
   1a0f2:	ebb6 0e02 	subs.w	lr, r6, r2
   1a0f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a0fa:	bf22      	ittt	cs
   1a0fc:	1ab6      	subcs	r6, r6, r2
   1a0fe:	4675      	movcs	r5, lr
   1a100:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1a104:	ea55 0e06 	orrs.w	lr, r5, r6
   1a108:	d018      	beq.n	1a13c <__aeabi_ddiv+0x114>
   1a10a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1a10e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1a112:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1a116:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1a11a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1a11e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1a122:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1a126:	d1c0      	bne.n	1a0aa <__aeabi_ddiv+0x82>
   1a128:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a12c:	d10b      	bne.n	1a146 <__aeabi_ddiv+0x11e>
   1a12e:	ea41 0100 	orr.w	r1, r1, r0
   1a132:	f04f 0000 	mov.w	r0, #0
   1a136:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1a13a:	e7b6      	b.n	1a0aa <__aeabi_ddiv+0x82>
   1a13c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a140:	bf04      	itt	eq
   1a142:	4301      	orreq	r1, r0
   1a144:	2000      	moveq	r0, #0
   1a146:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1a14a:	bf88      	it	hi
   1a14c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1a150:	f63f aeaf 	bhi.w	19eb2 <__aeabi_dmul+0xde>
   1a154:	ebb5 0c03 	subs.w	ip, r5, r3
   1a158:	bf04      	itt	eq
   1a15a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1a15e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1a162:	f150 0000 	adcs.w	r0, r0, #0
   1a166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a16a:	bd70      	pop	{r4, r5, r6, pc}
   1a16c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1a170:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1a174:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1a178:	bfc2      	ittt	gt
   1a17a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1a17e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1a182:	bd70      	popgt	{r4, r5, r6, pc}
   1a184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a188:	f04f 0e00 	mov.w	lr, #0
   1a18c:	3c01      	subs	r4, #1
   1a18e:	e690      	b.n	19eb2 <__aeabi_dmul+0xde>
   1a190:	ea45 0e06 	orr.w	lr, r5, r6
   1a194:	e68d      	b.n	19eb2 <__aeabi_dmul+0xde>
   1a196:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1a19a:	ea94 0f0c 	teq	r4, ip
   1a19e:	bf08      	it	eq
   1a1a0:	ea95 0f0c 	teqeq	r5, ip
   1a1a4:	f43f af3b 	beq.w	1a01e <__aeabi_dmul+0x24a>
   1a1a8:	ea94 0f0c 	teq	r4, ip
   1a1ac:	d10a      	bne.n	1a1c4 <__aeabi_ddiv+0x19c>
   1a1ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1a1b2:	f47f af34 	bne.w	1a01e <__aeabi_dmul+0x24a>
   1a1b6:	ea95 0f0c 	teq	r5, ip
   1a1ba:	f47f af25 	bne.w	1a008 <__aeabi_dmul+0x234>
   1a1be:	4610      	mov	r0, r2
   1a1c0:	4619      	mov	r1, r3
   1a1c2:	e72c      	b.n	1a01e <__aeabi_dmul+0x24a>
   1a1c4:	ea95 0f0c 	teq	r5, ip
   1a1c8:	d106      	bne.n	1a1d8 <__aeabi_ddiv+0x1b0>
   1a1ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1a1ce:	f43f aefd 	beq.w	19fcc <__aeabi_dmul+0x1f8>
   1a1d2:	4610      	mov	r0, r2
   1a1d4:	4619      	mov	r1, r3
   1a1d6:	e722      	b.n	1a01e <__aeabi_dmul+0x24a>
   1a1d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1a1dc:	bf18      	it	ne
   1a1de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1a1e2:	f47f aec5 	bne.w	19f70 <__aeabi_dmul+0x19c>
   1a1e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1a1ea:	f47f af0d 	bne.w	1a008 <__aeabi_dmul+0x234>
   1a1ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1a1f2:	f47f aeeb 	bne.w	19fcc <__aeabi_dmul+0x1f8>
   1a1f6:	e712      	b.n	1a01e <__aeabi_dmul+0x24a>

0001a1f8 <__gedf2>:
   1a1f8:	f04f 3cff 	mov.w	ip, #4294967295
   1a1fc:	e006      	b.n	1a20c <__cmpdf2+0x4>
   1a1fe:	bf00      	nop

0001a200 <__ledf2>:
   1a200:	f04f 0c01 	mov.w	ip, #1
   1a204:	e002      	b.n	1a20c <__cmpdf2+0x4>
   1a206:	bf00      	nop

0001a208 <__cmpdf2>:
   1a208:	f04f 0c01 	mov.w	ip, #1
   1a20c:	f84d cd04 	str.w	ip, [sp, #-4]!
   1a210:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1a214:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a218:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1a21c:	bf18      	it	ne
   1a21e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1a222:	d01b      	beq.n	1a25c <__cmpdf2+0x54>
   1a224:	b001      	add	sp, #4
   1a226:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1a22a:	bf0c      	ite	eq
   1a22c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1a230:	ea91 0f03 	teqne	r1, r3
   1a234:	bf02      	ittt	eq
   1a236:	ea90 0f02 	teqeq	r0, r2
   1a23a:	2000      	moveq	r0, #0
   1a23c:	4770      	bxeq	lr
   1a23e:	f110 0f00 	cmn.w	r0, #0
   1a242:	ea91 0f03 	teq	r1, r3
   1a246:	bf58      	it	pl
   1a248:	4299      	cmppl	r1, r3
   1a24a:	bf08      	it	eq
   1a24c:	4290      	cmpeq	r0, r2
   1a24e:	bf2c      	ite	cs
   1a250:	17d8      	asrcs	r0, r3, #31
   1a252:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1a256:	f040 0001 	orr.w	r0, r0, #1
   1a25a:	4770      	bx	lr
   1a25c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1a260:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a264:	d102      	bne.n	1a26c <__cmpdf2+0x64>
   1a266:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1a26a:	d107      	bne.n	1a27c <__cmpdf2+0x74>
   1a26c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1a270:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a274:	d1d6      	bne.n	1a224 <__cmpdf2+0x1c>
   1a276:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1a27a:	d0d3      	beq.n	1a224 <__cmpdf2+0x1c>
   1a27c:	f85d 0b04 	ldr.w	r0, [sp], #4
   1a280:	4770      	bx	lr
   1a282:	bf00      	nop

0001a284 <__aeabi_cdrcmple>:
   1a284:	4684      	mov	ip, r0
   1a286:	4610      	mov	r0, r2
   1a288:	4662      	mov	r2, ip
   1a28a:	468c      	mov	ip, r1
   1a28c:	4619      	mov	r1, r3
   1a28e:	4663      	mov	r3, ip
   1a290:	e000      	b.n	1a294 <__aeabi_cdcmpeq>
   1a292:	bf00      	nop

0001a294 <__aeabi_cdcmpeq>:
   1a294:	b501      	push	{r0, lr}
   1a296:	f7ff ffb7 	bl	1a208 <__cmpdf2>
   1a29a:	2800      	cmp	r0, #0
   1a29c:	bf48      	it	mi
   1a29e:	f110 0f00 	cmnmi.w	r0, #0
   1a2a2:	bd01      	pop	{r0, pc}

0001a2a4 <__aeabi_dcmpeq>:
   1a2a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a2a8:	f7ff fff4 	bl	1a294 <__aeabi_cdcmpeq>
   1a2ac:	bf0c      	ite	eq
   1a2ae:	2001      	moveq	r0, #1
   1a2b0:	2000      	movne	r0, #0
   1a2b2:	f85d fb08 	ldr.w	pc, [sp], #8
   1a2b6:	bf00      	nop

0001a2b8 <__aeabi_dcmplt>:
   1a2b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a2bc:	f7ff ffea 	bl	1a294 <__aeabi_cdcmpeq>
   1a2c0:	bf34      	ite	cc
   1a2c2:	2001      	movcc	r0, #1
   1a2c4:	2000      	movcs	r0, #0
   1a2c6:	f85d fb08 	ldr.w	pc, [sp], #8
   1a2ca:	bf00      	nop

0001a2cc <__aeabi_dcmple>:
   1a2cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a2d0:	f7ff ffe0 	bl	1a294 <__aeabi_cdcmpeq>
   1a2d4:	bf94      	ite	ls
   1a2d6:	2001      	movls	r0, #1
   1a2d8:	2000      	movhi	r0, #0
   1a2da:	f85d fb08 	ldr.w	pc, [sp], #8
   1a2de:	bf00      	nop

0001a2e0 <__aeabi_dcmpge>:
   1a2e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a2e4:	f7ff ffce 	bl	1a284 <__aeabi_cdrcmple>
   1a2e8:	bf94      	ite	ls
   1a2ea:	2001      	movls	r0, #1
   1a2ec:	2000      	movhi	r0, #0
   1a2ee:	f85d fb08 	ldr.w	pc, [sp], #8
   1a2f2:	bf00      	nop

0001a2f4 <__aeabi_dcmpgt>:
   1a2f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a2f8:	f7ff ffc4 	bl	1a284 <__aeabi_cdrcmple>
   1a2fc:	bf34      	ite	cc
   1a2fe:	2001      	movcc	r0, #1
   1a300:	2000      	movcs	r0, #0
   1a302:	f85d fb08 	ldr.w	pc, [sp], #8
   1a306:	bf00      	nop

0001a308 <__aeabi_dcmpun>:
   1a308:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1a30c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a310:	d102      	bne.n	1a318 <__aeabi_dcmpun+0x10>
   1a312:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1a316:	d10a      	bne.n	1a32e <__aeabi_dcmpun+0x26>
   1a318:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1a31c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a320:	d102      	bne.n	1a328 <__aeabi_dcmpun+0x20>
   1a322:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1a326:	d102      	bne.n	1a32e <__aeabi_dcmpun+0x26>
   1a328:	f04f 0000 	mov.w	r0, #0
   1a32c:	4770      	bx	lr
   1a32e:	f04f 0001 	mov.w	r0, #1
   1a332:	4770      	bx	lr

0001a334 <__aeabi_d2uiz>:
   1a334:	004a      	lsls	r2, r1, #1
   1a336:	d211      	bcs.n	1a35c <__aeabi_d2uiz+0x28>
   1a338:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1a33c:	d211      	bcs.n	1a362 <__aeabi_d2uiz+0x2e>
   1a33e:	d50d      	bpl.n	1a35c <__aeabi_d2uiz+0x28>
   1a340:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1a344:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1a348:	d40e      	bmi.n	1a368 <__aeabi_d2uiz+0x34>
   1a34a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1a34e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a352:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1a356:	fa23 f002 	lsr.w	r0, r3, r2
   1a35a:	4770      	bx	lr
   1a35c:	f04f 0000 	mov.w	r0, #0
   1a360:	4770      	bx	lr
   1a362:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1a366:	d102      	bne.n	1a36e <__aeabi_d2uiz+0x3a>
   1a368:	f04f 30ff 	mov.w	r0, #4294967295
   1a36c:	4770      	bx	lr
   1a36e:	f04f 0000 	mov.w	r0, #0
   1a372:	4770      	bx	lr

0001a374 <__aeabi_frsub>:
   1a374:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1a378:	e002      	b.n	1a380 <__addsf3>
   1a37a:	bf00      	nop

0001a37c <__aeabi_fsub>:
   1a37c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001a380 <__addsf3>:
   1a380:	0042      	lsls	r2, r0, #1
   1a382:	bf1f      	itttt	ne
   1a384:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1a388:	ea92 0f03 	teqne	r2, r3
   1a38c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1a390:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a394:	d06a      	beq.n	1a46c <__addsf3+0xec>
   1a396:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1a39a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1a39e:	bfc1      	itttt	gt
   1a3a0:	18d2      	addgt	r2, r2, r3
   1a3a2:	4041      	eorgt	r1, r0
   1a3a4:	4048      	eorgt	r0, r1
   1a3a6:	4041      	eorgt	r1, r0
   1a3a8:	bfb8      	it	lt
   1a3aa:	425b      	neglt	r3, r3
   1a3ac:	2b19      	cmp	r3, #25
   1a3ae:	bf88      	it	hi
   1a3b0:	4770      	bxhi	lr
   1a3b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1a3b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a3ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a3be:	bf18      	it	ne
   1a3c0:	4240      	negne	r0, r0
   1a3c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a3c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1a3ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a3ce:	bf18      	it	ne
   1a3d0:	4249      	negne	r1, r1
   1a3d2:	ea92 0f03 	teq	r2, r3
   1a3d6:	d03f      	beq.n	1a458 <__addsf3+0xd8>
   1a3d8:	f1a2 0201 	sub.w	r2, r2, #1
   1a3dc:	fa41 fc03 	asr.w	ip, r1, r3
   1a3e0:	eb10 000c 	adds.w	r0, r0, ip
   1a3e4:	f1c3 0320 	rsb	r3, r3, #32
   1a3e8:	fa01 f103 	lsl.w	r1, r1, r3
   1a3ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a3f0:	d502      	bpl.n	1a3f8 <__addsf3+0x78>
   1a3f2:	4249      	negs	r1, r1
   1a3f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1a3f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a3fc:	d313      	bcc.n	1a426 <__addsf3+0xa6>
   1a3fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1a402:	d306      	bcc.n	1a412 <__addsf3+0x92>
   1a404:	0840      	lsrs	r0, r0, #1
   1a406:	ea4f 0131 	mov.w	r1, r1, rrx
   1a40a:	f102 0201 	add.w	r2, r2, #1
   1a40e:	2afe      	cmp	r2, #254	; 0xfe
   1a410:	d251      	bcs.n	1a4b6 <__addsf3+0x136>
   1a412:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1a416:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a41a:	bf08      	it	eq
   1a41c:	f020 0001 	biceq.w	r0, r0, #1
   1a420:	ea40 0003 	orr.w	r0, r0, r3
   1a424:	4770      	bx	lr
   1a426:	0049      	lsls	r1, r1, #1
   1a428:	eb40 0000 	adc.w	r0, r0, r0
   1a42c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1a430:	f1a2 0201 	sub.w	r2, r2, #1
   1a434:	d1ed      	bne.n	1a412 <__addsf3+0x92>
   1a436:	fab0 fc80 	clz	ip, r0
   1a43a:	f1ac 0c08 	sub.w	ip, ip, #8
   1a43e:	ebb2 020c 	subs.w	r2, r2, ip
   1a442:	fa00 f00c 	lsl.w	r0, r0, ip
   1a446:	bfaa      	itet	ge
   1a448:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1a44c:	4252      	neglt	r2, r2
   1a44e:	4318      	orrge	r0, r3
   1a450:	bfbc      	itt	lt
   1a452:	40d0      	lsrlt	r0, r2
   1a454:	4318      	orrlt	r0, r3
   1a456:	4770      	bx	lr
   1a458:	f092 0f00 	teq	r2, #0
   1a45c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1a460:	bf06      	itte	eq
   1a462:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1a466:	3201      	addeq	r2, #1
   1a468:	3b01      	subne	r3, #1
   1a46a:	e7b5      	b.n	1a3d8 <__addsf3+0x58>
   1a46c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1a470:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1a474:	bf18      	it	ne
   1a476:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a47a:	d021      	beq.n	1a4c0 <__addsf3+0x140>
   1a47c:	ea92 0f03 	teq	r2, r3
   1a480:	d004      	beq.n	1a48c <__addsf3+0x10c>
   1a482:	f092 0f00 	teq	r2, #0
   1a486:	bf08      	it	eq
   1a488:	4608      	moveq	r0, r1
   1a48a:	4770      	bx	lr
   1a48c:	ea90 0f01 	teq	r0, r1
   1a490:	bf1c      	itt	ne
   1a492:	2000      	movne	r0, #0
   1a494:	4770      	bxne	lr
   1a496:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1a49a:	d104      	bne.n	1a4a6 <__addsf3+0x126>
   1a49c:	0040      	lsls	r0, r0, #1
   1a49e:	bf28      	it	cs
   1a4a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1a4a4:	4770      	bx	lr
   1a4a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1a4aa:	bf3c      	itt	cc
   1a4ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1a4b0:	4770      	bxcc	lr
   1a4b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a4b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1a4ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a4be:	4770      	bx	lr
   1a4c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1a4c4:	bf16      	itet	ne
   1a4c6:	4608      	movne	r0, r1
   1a4c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1a4cc:	4601      	movne	r1, r0
   1a4ce:	0242      	lsls	r2, r0, #9
   1a4d0:	bf06      	itte	eq
   1a4d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1a4d6:	ea90 0f01 	teqeq	r0, r1
   1a4da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1a4de:	4770      	bx	lr

0001a4e0 <__aeabi_ui2f>:
   1a4e0:	f04f 0300 	mov.w	r3, #0
   1a4e4:	e004      	b.n	1a4f0 <__aeabi_i2f+0x8>
   1a4e6:	bf00      	nop

0001a4e8 <__aeabi_i2f>:
   1a4e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1a4ec:	bf48      	it	mi
   1a4ee:	4240      	negmi	r0, r0
   1a4f0:	ea5f 0c00 	movs.w	ip, r0
   1a4f4:	bf08      	it	eq
   1a4f6:	4770      	bxeq	lr
   1a4f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1a4fc:	4601      	mov	r1, r0
   1a4fe:	f04f 0000 	mov.w	r0, #0
   1a502:	e01c      	b.n	1a53e <__aeabi_l2f+0x2a>

0001a504 <__aeabi_ul2f>:
   1a504:	ea50 0201 	orrs.w	r2, r0, r1
   1a508:	bf08      	it	eq
   1a50a:	4770      	bxeq	lr
   1a50c:	f04f 0300 	mov.w	r3, #0
   1a510:	e00a      	b.n	1a528 <__aeabi_l2f+0x14>
   1a512:	bf00      	nop

0001a514 <__aeabi_l2f>:
   1a514:	ea50 0201 	orrs.w	r2, r0, r1
   1a518:	bf08      	it	eq
   1a51a:	4770      	bxeq	lr
   1a51c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1a520:	d502      	bpl.n	1a528 <__aeabi_l2f+0x14>
   1a522:	4240      	negs	r0, r0
   1a524:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a528:	ea5f 0c01 	movs.w	ip, r1
   1a52c:	bf02      	ittt	eq
   1a52e:	4684      	moveq	ip, r0
   1a530:	4601      	moveq	r1, r0
   1a532:	2000      	moveq	r0, #0
   1a534:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1a538:	bf08      	it	eq
   1a53a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1a53e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1a542:	fabc f28c 	clz	r2, ip
   1a546:	3a08      	subs	r2, #8
   1a548:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1a54c:	db10      	blt.n	1a570 <__aeabi_l2f+0x5c>
   1a54e:	fa01 fc02 	lsl.w	ip, r1, r2
   1a552:	4463      	add	r3, ip
   1a554:	fa00 fc02 	lsl.w	ip, r0, r2
   1a558:	f1c2 0220 	rsb	r2, r2, #32
   1a55c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1a560:	fa20 f202 	lsr.w	r2, r0, r2
   1a564:	eb43 0002 	adc.w	r0, r3, r2
   1a568:	bf08      	it	eq
   1a56a:	f020 0001 	biceq.w	r0, r0, #1
   1a56e:	4770      	bx	lr
   1a570:	f102 0220 	add.w	r2, r2, #32
   1a574:	fa01 fc02 	lsl.w	ip, r1, r2
   1a578:	f1c2 0220 	rsb	r2, r2, #32
   1a57c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1a580:	fa21 f202 	lsr.w	r2, r1, r2
   1a584:	eb43 0002 	adc.w	r0, r3, r2
   1a588:	bf08      	it	eq
   1a58a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1a58e:	4770      	bx	lr

0001a590 <__aeabi_fmul>:
   1a590:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a594:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1a598:	bf1e      	ittt	ne
   1a59a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1a59e:	ea92 0f0c 	teqne	r2, ip
   1a5a2:	ea93 0f0c 	teqne	r3, ip
   1a5a6:	d06f      	beq.n	1a688 <__aeabi_fmul+0xf8>
   1a5a8:	441a      	add	r2, r3
   1a5aa:	ea80 0c01 	eor.w	ip, r0, r1
   1a5ae:	0240      	lsls	r0, r0, #9
   1a5b0:	bf18      	it	ne
   1a5b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1a5b6:	d01e      	beq.n	1a5f6 <__aeabi_fmul+0x66>
   1a5b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1a5bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1a5c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1a5c4:	fba0 3101 	umull	r3, r1, r0, r1
   1a5c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1a5cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1a5d0:	bf3e      	ittt	cc
   1a5d2:	0049      	lslcc	r1, r1, #1
   1a5d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1a5d8:	005b      	lslcc	r3, r3, #1
   1a5da:	ea40 0001 	orr.w	r0, r0, r1
   1a5de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1a5e2:	2afd      	cmp	r2, #253	; 0xfd
   1a5e4:	d81d      	bhi.n	1a622 <__aeabi_fmul+0x92>
   1a5e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1a5ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a5ee:	bf08      	it	eq
   1a5f0:	f020 0001 	biceq.w	r0, r0, #1
   1a5f4:	4770      	bx	lr
   1a5f6:	f090 0f00 	teq	r0, #0
   1a5fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1a5fe:	bf08      	it	eq
   1a600:	0249      	lsleq	r1, r1, #9
   1a602:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1a606:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1a60a:	3a7f      	subs	r2, #127	; 0x7f
   1a60c:	bfc2      	ittt	gt
   1a60e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1a612:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1a616:	4770      	bxgt	lr
   1a618:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a61c:	f04f 0300 	mov.w	r3, #0
   1a620:	3a01      	subs	r2, #1
   1a622:	dc5d      	bgt.n	1a6e0 <__aeabi_fmul+0x150>
   1a624:	f112 0f19 	cmn.w	r2, #25
   1a628:	bfdc      	itt	le
   1a62a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1a62e:	4770      	bxle	lr
   1a630:	f1c2 0200 	rsb	r2, r2, #0
   1a634:	0041      	lsls	r1, r0, #1
   1a636:	fa21 f102 	lsr.w	r1, r1, r2
   1a63a:	f1c2 0220 	rsb	r2, r2, #32
   1a63e:	fa00 fc02 	lsl.w	ip, r0, r2
   1a642:	ea5f 0031 	movs.w	r0, r1, rrx
   1a646:	f140 0000 	adc.w	r0, r0, #0
   1a64a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1a64e:	bf08      	it	eq
   1a650:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1a654:	4770      	bx	lr
   1a656:	f092 0f00 	teq	r2, #0
   1a65a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1a65e:	bf02      	ittt	eq
   1a660:	0040      	lsleq	r0, r0, #1
   1a662:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1a666:	3a01      	subeq	r2, #1
   1a668:	d0f9      	beq.n	1a65e <__aeabi_fmul+0xce>
   1a66a:	ea40 000c 	orr.w	r0, r0, ip
   1a66e:	f093 0f00 	teq	r3, #0
   1a672:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1a676:	bf02      	ittt	eq
   1a678:	0049      	lsleq	r1, r1, #1
   1a67a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1a67e:	3b01      	subeq	r3, #1
   1a680:	d0f9      	beq.n	1a676 <__aeabi_fmul+0xe6>
   1a682:	ea41 010c 	orr.w	r1, r1, ip
   1a686:	e78f      	b.n	1a5a8 <__aeabi_fmul+0x18>
   1a688:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1a68c:	ea92 0f0c 	teq	r2, ip
   1a690:	bf18      	it	ne
   1a692:	ea93 0f0c 	teqne	r3, ip
   1a696:	d00a      	beq.n	1a6ae <__aeabi_fmul+0x11e>
   1a698:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1a69c:	bf18      	it	ne
   1a69e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1a6a2:	d1d8      	bne.n	1a656 <__aeabi_fmul+0xc6>
   1a6a4:	ea80 0001 	eor.w	r0, r0, r1
   1a6a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1a6ac:	4770      	bx	lr
   1a6ae:	f090 0f00 	teq	r0, #0
   1a6b2:	bf17      	itett	ne
   1a6b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1a6b8:	4608      	moveq	r0, r1
   1a6ba:	f091 0f00 	teqne	r1, #0
   1a6be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1a6c2:	d014      	beq.n	1a6ee <__aeabi_fmul+0x15e>
   1a6c4:	ea92 0f0c 	teq	r2, ip
   1a6c8:	d101      	bne.n	1a6ce <__aeabi_fmul+0x13e>
   1a6ca:	0242      	lsls	r2, r0, #9
   1a6cc:	d10f      	bne.n	1a6ee <__aeabi_fmul+0x15e>
   1a6ce:	ea93 0f0c 	teq	r3, ip
   1a6d2:	d103      	bne.n	1a6dc <__aeabi_fmul+0x14c>
   1a6d4:	024b      	lsls	r3, r1, #9
   1a6d6:	bf18      	it	ne
   1a6d8:	4608      	movne	r0, r1
   1a6da:	d108      	bne.n	1a6ee <__aeabi_fmul+0x15e>
   1a6dc:	ea80 0001 	eor.w	r0, r0, r1
   1a6e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1a6e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1a6e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a6ec:	4770      	bx	lr
   1a6ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1a6f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1a6f6:	4770      	bx	lr

0001a6f8 <__aeabi_fdiv>:
   1a6f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a6fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1a700:	bf1e      	ittt	ne
   1a702:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1a706:	ea92 0f0c 	teqne	r2, ip
   1a70a:	ea93 0f0c 	teqne	r3, ip
   1a70e:	d069      	beq.n	1a7e4 <__aeabi_fdiv+0xec>
   1a710:	eba2 0203 	sub.w	r2, r2, r3
   1a714:	ea80 0c01 	eor.w	ip, r0, r1
   1a718:	0249      	lsls	r1, r1, #9
   1a71a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1a71e:	d037      	beq.n	1a790 <__aeabi_fdiv+0x98>
   1a720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a724:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1a728:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1a72c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1a730:	428b      	cmp	r3, r1
   1a732:	bf38      	it	cc
   1a734:	005b      	lslcc	r3, r3, #1
   1a736:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1a73a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1a73e:	428b      	cmp	r3, r1
   1a740:	bf24      	itt	cs
   1a742:	1a5b      	subcs	r3, r3, r1
   1a744:	ea40 000c 	orrcs.w	r0, r0, ip
   1a748:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1a74c:	bf24      	itt	cs
   1a74e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1a752:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1a756:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1a75a:	bf24      	itt	cs
   1a75c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1a760:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1a764:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1a768:	bf24      	itt	cs
   1a76a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1a76e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1a772:	011b      	lsls	r3, r3, #4
   1a774:	bf18      	it	ne
   1a776:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1a77a:	d1e0      	bne.n	1a73e <__aeabi_fdiv+0x46>
   1a77c:	2afd      	cmp	r2, #253	; 0xfd
   1a77e:	f63f af50 	bhi.w	1a622 <__aeabi_fmul+0x92>
   1a782:	428b      	cmp	r3, r1
   1a784:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a788:	bf08      	it	eq
   1a78a:	f020 0001 	biceq.w	r0, r0, #1
   1a78e:	4770      	bx	lr
   1a790:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1a794:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1a798:	327f      	adds	r2, #127	; 0x7f
   1a79a:	bfc2      	ittt	gt
   1a79c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1a7a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1a7a4:	4770      	bxgt	lr
   1a7a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a7aa:	f04f 0300 	mov.w	r3, #0
   1a7ae:	3a01      	subs	r2, #1
   1a7b0:	e737      	b.n	1a622 <__aeabi_fmul+0x92>
   1a7b2:	f092 0f00 	teq	r2, #0
   1a7b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1a7ba:	bf02      	ittt	eq
   1a7bc:	0040      	lsleq	r0, r0, #1
   1a7be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1a7c2:	3a01      	subeq	r2, #1
   1a7c4:	d0f9      	beq.n	1a7ba <__aeabi_fdiv+0xc2>
   1a7c6:	ea40 000c 	orr.w	r0, r0, ip
   1a7ca:	f093 0f00 	teq	r3, #0
   1a7ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1a7d2:	bf02      	ittt	eq
   1a7d4:	0049      	lsleq	r1, r1, #1
   1a7d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1a7da:	3b01      	subeq	r3, #1
   1a7dc:	d0f9      	beq.n	1a7d2 <__aeabi_fdiv+0xda>
   1a7de:	ea41 010c 	orr.w	r1, r1, ip
   1a7e2:	e795      	b.n	1a710 <__aeabi_fdiv+0x18>
   1a7e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1a7e8:	ea92 0f0c 	teq	r2, ip
   1a7ec:	d108      	bne.n	1a800 <__aeabi_fdiv+0x108>
   1a7ee:	0242      	lsls	r2, r0, #9
   1a7f0:	f47f af7d 	bne.w	1a6ee <__aeabi_fmul+0x15e>
   1a7f4:	ea93 0f0c 	teq	r3, ip
   1a7f8:	f47f af70 	bne.w	1a6dc <__aeabi_fmul+0x14c>
   1a7fc:	4608      	mov	r0, r1
   1a7fe:	e776      	b.n	1a6ee <__aeabi_fmul+0x15e>
   1a800:	ea93 0f0c 	teq	r3, ip
   1a804:	d104      	bne.n	1a810 <__aeabi_fdiv+0x118>
   1a806:	024b      	lsls	r3, r1, #9
   1a808:	f43f af4c 	beq.w	1a6a4 <__aeabi_fmul+0x114>
   1a80c:	4608      	mov	r0, r1
   1a80e:	e76e      	b.n	1a6ee <__aeabi_fmul+0x15e>
   1a810:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1a814:	bf18      	it	ne
   1a816:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1a81a:	d1ca      	bne.n	1a7b2 <__aeabi_fdiv+0xba>
   1a81c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1a820:	f47f af5c 	bne.w	1a6dc <__aeabi_fmul+0x14c>
   1a824:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1a828:	f47f af3c 	bne.w	1a6a4 <__aeabi_fmul+0x114>
   1a82c:	e75f      	b.n	1a6ee <__aeabi_fmul+0x15e>
   1a82e:	bf00      	nop

0001a830 <__gesf2>:
   1a830:	f04f 3cff 	mov.w	ip, #4294967295
   1a834:	e006      	b.n	1a844 <__cmpsf2+0x4>
   1a836:	bf00      	nop

0001a838 <__lesf2>:
   1a838:	f04f 0c01 	mov.w	ip, #1
   1a83c:	e002      	b.n	1a844 <__cmpsf2+0x4>
   1a83e:	bf00      	nop

0001a840 <__cmpsf2>:
   1a840:	f04f 0c01 	mov.w	ip, #1
   1a844:	f84d cd04 	str.w	ip, [sp, #-4]!
   1a848:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1a84c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1a850:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1a854:	bf18      	it	ne
   1a856:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a85a:	d011      	beq.n	1a880 <__cmpsf2+0x40>
   1a85c:	b001      	add	sp, #4
   1a85e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1a862:	bf18      	it	ne
   1a864:	ea90 0f01 	teqne	r0, r1
   1a868:	bf58      	it	pl
   1a86a:	ebb2 0003 	subspl.w	r0, r2, r3
   1a86e:	bf88      	it	hi
   1a870:	17c8      	asrhi	r0, r1, #31
   1a872:	bf38      	it	cc
   1a874:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1a878:	bf18      	it	ne
   1a87a:	f040 0001 	orrne.w	r0, r0, #1
   1a87e:	4770      	bx	lr
   1a880:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1a884:	d102      	bne.n	1a88c <__cmpsf2+0x4c>
   1a886:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1a88a:	d105      	bne.n	1a898 <__cmpsf2+0x58>
   1a88c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1a890:	d1e4      	bne.n	1a85c <__cmpsf2+0x1c>
   1a892:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1a896:	d0e1      	beq.n	1a85c <__cmpsf2+0x1c>
   1a898:	f85d 0b04 	ldr.w	r0, [sp], #4
   1a89c:	4770      	bx	lr
   1a89e:	bf00      	nop

0001a8a0 <__aeabi_cfrcmple>:
   1a8a0:	4684      	mov	ip, r0
   1a8a2:	4608      	mov	r0, r1
   1a8a4:	4661      	mov	r1, ip
   1a8a6:	e7ff      	b.n	1a8a8 <__aeabi_cfcmpeq>

0001a8a8 <__aeabi_cfcmpeq>:
   1a8a8:	b50f      	push	{r0, r1, r2, r3, lr}
   1a8aa:	f7ff ffc9 	bl	1a840 <__cmpsf2>
   1a8ae:	2800      	cmp	r0, #0
   1a8b0:	bf48      	it	mi
   1a8b2:	f110 0f00 	cmnmi.w	r0, #0
   1a8b6:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001a8b8 <__aeabi_fcmpeq>:
   1a8b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a8bc:	f7ff fff4 	bl	1a8a8 <__aeabi_cfcmpeq>
   1a8c0:	bf0c      	ite	eq
   1a8c2:	2001      	moveq	r0, #1
   1a8c4:	2000      	movne	r0, #0
   1a8c6:	f85d fb08 	ldr.w	pc, [sp], #8
   1a8ca:	bf00      	nop

0001a8cc <__aeabi_fcmplt>:
   1a8cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a8d0:	f7ff ffea 	bl	1a8a8 <__aeabi_cfcmpeq>
   1a8d4:	bf34      	ite	cc
   1a8d6:	2001      	movcc	r0, #1
   1a8d8:	2000      	movcs	r0, #0
   1a8da:	f85d fb08 	ldr.w	pc, [sp], #8
   1a8de:	bf00      	nop

0001a8e0 <__aeabi_fcmple>:
   1a8e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a8e4:	f7ff ffe0 	bl	1a8a8 <__aeabi_cfcmpeq>
   1a8e8:	bf94      	ite	ls
   1a8ea:	2001      	movls	r0, #1
   1a8ec:	2000      	movhi	r0, #0
   1a8ee:	f85d fb08 	ldr.w	pc, [sp], #8
   1a8f2:	bf00      	nop

0001a8f4 <__aeabi_fcmpge>:
   1a8f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a8f8:	f7ff ffd2 	bl	1a8a0 <__aeabi_cfrcmple>
   1a8fc:	bf94      	ite	ls
   1a8fe:	2001      	movls	r0, #1
   1a900:	2000      	movhi	r0, #0
   1a902:	f85d fb08 	ldr.w	pc, [sp], #8
   1a906:	bf00      	nop

0001a908 <__aeabi_fcmpgt>:
   1a908:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a90c:	f7ff ffc8 	bl	1a8a0 <__aeabi_cfrcmple>
   1a910:	bf34      	ite	cc
   1a912:	2001      	movcc	r0, #1
   1a914:	2000      	movcs	r0, #0
   1a916:	f85d fb08 	ldr.w	pc, [sp], #8
   1a91a:	bf00      	nop

0001a91c <__aeabi_f2uiz>:
   1a91c:	0042      	lsls	r2, r0, #1
   1a91e:	d20e      	bcs.n	1a93e <__aeabi_f2uiz+0x22>
   1a920:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1a924:	d30b      	bcc.n	1a93e <__aeabi_f2uiz+0x22>
   1a926:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1a92a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1a92e:	d409      	bmi.n	1a944 <__aeabi_f2uiz+0x28>
   1a930:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1a934:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a938:	fa23 f002 	lsr.w	r0, r3, r2
   1a93c:	4770      	bx	lr
   1a93e:	f04f 0000 	mov.w	r0, #0
   1a942:	4770      	bx	lr
   1a944:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1a948:	d101      	bne.n	1a94e <__aeabi_f2uiz+0x32>
   1a94a:	0242      	lsls	r2, r0, #9
   1a94c:	d102      	bne.n	1a954 <__aeabi_f2uiz+0x38>
   1a94e:	f04f 30ff 	mov.w	r0, #4294967295
   1a952:	4770      	bx	lr
   1a954:	f04f 0000 	mov.w	r0, #0
   1a958:	4770      	bx	lr
   1a95a:	bf00      	nop

0001a95c <__aeabi_uldivmod>:
   1a95c:	b953      	cbnz	r3, 1a974 <__aeabi_uldivmod+0x18>
   1a95e:	b94a      	cbnz	r2, 1a974 <__aeabi_uldivmod+0x18>
   1a960:	2900      	cmp	r1, #0
   1a962:	bf08      	it	eq
   1a964:	2800      	cmpeq	r0, #0
   1a966:	bf1c      	itt	ne
   1a968:	f04f 31ff 	movne.w	r1, #4294967295
   1a96c:	f04f 30ff 	movne.w	r0, #4294967295
   1a970:	f000 b97a 	b.w	1ac68 <__aeabi_idiv0>
   1a974:	f1ad 0c08 	sub.w	ip, sp, #8
   1a978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1a97c:	f000 f806 	bl	1a98c <__udivmoddi4>
   1a980:	f8dd e004 	ldr.w	lr, [sp, #4]
   1a984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a988:	b004      	add	sp, #16
   1a98a:	4770      	bx	lr

0001a98c <__udivmoddi4>:
   1a98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a990:	468c      	mov	ip, r1
   1a992:	460d      	mov	r5, r1
   1a994:	4604      	mov	r4, r0
   1a996:	9e08      	ldr	r6, [sp, #32]
   1a998:	2b00      	cmp	r3, #0
   1a99a:	d151      	bne.n	1aa40 <__udivmoddi4+0xb4>
   1a99c:	428a      	cmp	r2, r1
   1a99e:	4617      	mov	r7, r2
   1a9a0:	d96d      	bls.n	1aa7e <__udivmoddi4+0xf2>
   1a9a2:	fab2 fe82 	clz	lr, r2
   1a9a6:	f1be 0f00 	cmp.w	lr, #0
   1a9aa:	d00b      	beq.n	1a9c4 <__udivmoddi4+0x38>
   1a9ac:	f1ce 0c20 	rsb	ip, lr, #32
   1a9b0:	fa01 f50e 	lsl.w	r5, r1, lr
   1a9b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1a9b8:	fa02 f70e 	lsl.w	r7, r2, lr
   1a9bc:	ea4c 0c05 	orr.w	ip, ip, r5
   1a9c0:	fa00 f40e 	lsl.w	r4, r0, lr
   1a9c4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1a9c8:	0c25      	lsrs	r5, r4, #16
   1a9ca:	fbbc f8fa 	udiv	r8, ip, sl
   1a9ce:	fa1f f987 	uxth.w	r9, r7
   1a9d2:	fb0a cc18 	mls	ip, sl, r8, ip
   1a9d6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1a9da:	fb08 f309 	mul.w	r3, r8, r9
   1a9de:	42ab      	cmp	r3, r5
   1a9e0:	d90a      	bls.n	1a9f8 <__udivmoddi4+0x6c>
   1a9e2:	19ed      	adds	r5, r5, r7
   1a9e4:	f108 32ff 	add.w	r2, r8, #4294967295
   1a9e8:	f080 8123 	bcs.w	1ac32 <__udivmoddi4+0x2a6>
   1a9ec:	42ab      	cmp	r3, r5
   1a9ee:	f240 8120 	bls.w	1ac32 <__udivmoddi4+0x2a6>
   1a9f2:	f1a8 0802 	sub.w	r8, r8, #2
   1a9f6:	443d      	add	r5, r7
   1a9f8:	1aed      	subs	r5, r5, r3
   1a9fa:	b2a4      	uxth	r4, r4
   1a9fc:	fbb5 f0fa 	udiv	r0, r5, sl
   1aa00:	fb0a 5510 	mls	r5, sl, r0, r5
   1aa04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1aa08:	fb00 f909 	mul.w	r9, r0, r9
   1aa0c:	45a1      	cmp	r9, r4
   1aa0e:	d909      	bls.n	1aa24 <__udivmoddi4+0x98>
   1aa10:	19e4      	adds	r4, r4, r7
   1aa12:	f100 33ff 	add.w	r3, r0, #4294967295
   1aa16:	f080 810a 	bcs.w	1ac2e <__udivmoddi4+0x2a2>
   1aa1a:	45a1      	cmp	r9, r4
   1aa1c:	f240 8107 	bls.w	1ac2e <__udivmoddi4+0x2a2>
   1aa20:	3802      	subs	r0, #2
   1aa22:	443c      	add	r4, r7
   1aa24:	eba4 0409 	sub.w	r4, r4, r9
   1aa28:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1aa2c:	2100      	movs	r1, #0
   1aa2e:	2e00      	cmp	r6, #0
   1aa30:	d061      	beq.n	1aaf6 <__udivmoddi4+0x16a>
   1aa32:	fa24 f40e 	lsr.w	r4, r4, lr
   1aa36:	2300      	movs	r3, #0
   1aa38:	6034      	str	r4, [r6, #0]
   1aa3a:	6073      	str	r3, [r6, #4]
   1aa3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aa40:	428b      	cmp	r3, r1
   1aa42:	d907      	bls.n	1aa54 <__udivmoddi4+0xc8>
   1aa44:	2e00      	cmp	r6, #0
   1aa46:	d054      	beq.n	1aaf2 <__udivmoddi4+0x166>
   1aa48:	2100      	movs	r1, #0
   1aa4a:	e886 0021 	stmia.w	r6, {r0, r5}
   1aa4e:	4608      	mov	r0, r1
   1aa50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aa54:	fab3 f183 	clz	r1, r3
   1aa58:	2900      	cmp	r1, #0
   1aa5a:	f040 808e 	bne.w	1ab7a <__udivmoddi4+0x1ee>
   1aa5e:	42ab      	cmp	r3, r5
   1aa60:	d302      	bcc.n	1aa68 <__udivmoddi4+0xdc>
   1aa62:	4282      	cmp	r2, r0
   1aa64:	f200 80fa 	bhi.w	1ac5c <__udivmoddi4+0x2d0>
   1aa68:	1a84      	subs	r4, r0, r2
   1aa6a:	eb65 0503 	sbc.w	r5, r5, r3
   1aa6e:	2001      	movs	r0, #1
   1aa70:	46ac      	mov	ip, r5
   1aa72:	2e00      	cmp	r6, #0
   1aa74:	d03f      	beq.n	1aaf6 <__udivmoddi4+0x16a>
   1aa76:	e886 1010 	stmia.w	r6, {r4, ip}
   1aa7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aa7e:	b912      	cbnz	r2, 1aa86 <__udivmoddi4+0xfa>
   1aa80:	2701      	movs	r7, #1
   1aa82:	fbb7 f7f2 	udiv	r7, r7, r2
   1aa86:	fab7 fe87 	clz	lr, r7
   1aa8a:	f1be 0f00 	cmp.w	lr, #0
   1aa8e:	d134      	bne.n	1aafa <__udivmoddi4+0x16e>
   1aa90:	1beb      	subs	r3, r5, r7
   1aa92:	0c3a      	lsrs	r2, r7, #16
   1aa94:	fa1f fc87 	uxth.w	ip, r7
   1aa98:	2101      	movs	r1, #1
   1aa9a:	fbb3 f8f2 	udiv	r8, r3, r2
   1aa9e:	0c25      	lsrs	r5, r4, #16
   1aaa0:	fb02 3318 	mls	r3, r2, r8, r3
   1aaa4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1aaa8:	fb0c f308 	mul.w	r3, ip, r8
   1aaac:	42ab      	cmp	r3, r5
   1aaae:	d907      	bls.n	1aac0 <__udivmoddi4+0x134>
   1aab0:	19ed      	adds	r5, r5, r7
   1aab2:	f108 30ff 	add.w	r0, r8, #4294967295
   1aab6:	d202      	bcs.n	1aabe <__udivmoddi4+0x132>
   1aab8:	42ab      	cmp	r3, r5
   1aaba:	f200 80d1 	bhi.w	1ac60 <__udivmoddi4+0x2d4>
   1aabe:	4680      	mov	r8, r0
   1aac0:	1aed      	subs	r5, r5, r3
   1aac2:	b2a3      	uxth	r3, r4
   1aac4:	fbb5 f0f2 	udiv	r0, r5, r2
   1aac8:	fb02 5510 	mls	r5, r2, r0, r5
   1aacc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1aad0:	fb0c fc00 	mul.w	ip, ip, r0
   1aad4:	45a4      	cmp	ip, r4
   1aad6:	d907      	bls.n	1aae8 <__udivmoddi4+0x15c>
   1aad8:	19e4      	adds	r4, r4, r7
   1aada:	f100 33ff 	add.w	r3, r0, #4294967295
   1aade:	d202      	bcs.n	1aae6 <__udivmoddi4+0x15a>
   1aae0:	45a4      	cmp	ip, r4
   1aae2:	f200 80b8 	bhi.w	1ac56 <__udivmoddi4+0x2ca>
   1aae6:	4618      	mov	r0, r3
   1aae8:	eba4 040c 	sub.w	r4, r4, ip
   1aaec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1aaf0:	e79d      	b.n	1aa2e <__udivmoddi4+0xa2>
   1aaf2:	4631      	mov	r1, r6
   1aaf4:	4630      	mov	r0, r6
   1aaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aafa:	f1ce 0420 	rsb	r4, lr, #32
   1aafe:	fa05 f30e 	lsl.w	r3, r5, lr
   1ab02:	fa07 f70e 	lsl.w	r7, r7, lr
   1ab06:	fa20 f804 	lsr.w	r8, r0, r4
   1ab0a:	0c3a      	lsrs	r2, r7, #16
   1ab0c:	fa25 f404 	lsr.w	r4, r5, r4
   1ab10:	ea48 0803 	orr.w	r8, r8, r3
   1ab14:	fbb4 f1f2 	udiv	r1, r4, r2
   1ab18:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1ab1c:	fb02 4411 	mls	r4, r2, r1, r4
   1ab20:	fa1f fc87 	uxth.w	ip, r7
   1ab24:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1ab28:	fb01 f30c 	mul.w	r3, r1, ip
   1ab2c:	42ab      	cmp	r3, r5
   1ab2e:	fa00 f40e 	lsl.w	r4, r0, lr
   1ab32:	d909      	bls.n	1ab48 <__udivmoddi4+0x1bc>
   1ab34:	19ed      	adds	r5, r5, r7
   1ab36:	f101 30ff 	add.w	r0, r1, #4294967295
   1ab3a:	f080 808a 	bcs.w	1ac52 <__udivmoddi4+0x2c6>
   1ab3e:	42ab      	cmp	r3, r5
   1ab40:	f240 8087 	bls.w	1ac52 <__udivmoddi4+0x2c6>
   1ab44:	3902      	subs	r1, #2
   1ab46:	443d      	add	r5, r7
   1ab48:	1aeb      	subs	r3, r5, r3
   1ab4a:	fa1f f588 	uxth.w	r5, r8
   1ab4e:	fbb3 f0f2 	udiv	r0, r3, r2
   1ab52:	fb02 3310 	mls	r3, r2, r0, r3
   1ab56:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1ab5a:	fb00 f30c 	mul.w	r3, r0, ip
   1ab5e:	42ab      	cmp	r3, r5
   1ab60:	d907      	bls.n	1ab72 <__udivmoddi4+0x1e6>
   1ab62:	19ed      	adds	r5, r5, r7
   1ab64:	f100 38ff 	add.w	r8, r0, #4294967295
   1ab68:	d26f      	bcs.n	1ac4a <__udivmoddi4+0x2be>
   1ab6a:	42ab      	cmp	r3, r5
   1ab6c:	d96d      	bls.n	1ac4a <__udivmoddi4+0x2be>
   1ab6e:	3802      	subs	r0, #2
   1ab70:	443d      	add	r5, r7
   1ab72:	1aeb      	subs	r3, r5, r3
   1ab74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1ab78:	e78f      	b.n	1aa9a <__udivmoddi4+0x10e>
   1ab7a:	f1c1 0720 	rsb	r7, r1, #32
   1ab7e:	fa22 f807 	lsr.w	r8, r2, r7
   1ab82:	408b      	lsls	r3, r1
   1ab84:	fa05 f401 	lsl.w	r4, r5, r1
   1ab88:	ea48 0303 	orr.w	r3, r8, r3
   1ab8c:	fa20 fe07 	lsr.w	lr, r0, r7
   1ab90:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1ab94:	40fd      	lsrs	r5, r7
   1ab96:	ea4e 0e04 	orr.w	lr, lr, r4
   1ab9a:	fbb5 f9fc 	udiv	r9, r5, ip
   1ab9e:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1aba2:	fb0c 5519 	mls	r5, ip, r9, r5
   1aba6:	fa1f f883 	uxth.w	r8, r3
   1abaa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1abae:	fb09 f408 	mul.w	r4, r9, r8
   1abb2:	42ac      	cmp	r4, r5
   1abb4:	fa02 f201 	lsl.w	r2, r2, r1
   1abb8:	fa00 fa01 	lsl.w	sl, r0, r1
   1abbc:	d908      	bls.n	1abd0 <__udivmoddi4+0x244>
   1abbe:	18ed      	adds	r5, r5, r3
   1abc0:	f109 30ff 	add.w	r0, r9, #4294967295
   1abc4:	d243      	bcs.n	1ac4e <__udivmoddi4+0x2c2>
   1abc6:	42ac      	cmp	r4, r5
   1abc8:	d941      	bls.n	1ac4e <__udivmoddi4+0x2c2>
   1abca:	f1a9 0902 	sub.w	r9, r9, #2
   1abce:	441d      	add	r5, r3
   1abd0:	1b2d      	subs	r5, r5, r4
   1abd2:	fa1f fe8e 	uxth.w	lr, lr
   1abd6:	fbb5 f0fc 	udiv	r0, r5, ip
   1abda:	fb0c 5510 	mls	r5, ip, r0, r5
   1abde:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1abe2:	fb00 f808 	mul.w	r8, r0, r8
   1abe6:	45a0      	cmp	r8, r4
   1abe8:	d907      	bls.n	1abfa <__udivmoddi4+0x26e>
   1abea:	18e4      	adds	r4, r4, r3
   1abec:	f100 35ff 	add.w	r5, r0, #4294967295
   1abf0:	d229      	bcs.n	1ac46 <__udivmoddi4+0x2ba>
   1abf2:	45a0      	cmp	r8, r4
   1abf4:	d927      	bls.n	1ac46 <__udivmoddi4+0x2ba>
   1abf6:	3802      	subs	r0, #2
   1abf8:	441c      	add	r4, r3
   1abfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1abfe:	eba4 0408 	sub.w	r4, r4, r8
   1ac02:	fba0 8902 	umull	r8, r9, r0, r2
   1ac06:	454c      	cmp	r4, r9
   1ac08:	46c6      	mov	lr, r8
   1ac0a:	464d      	mov	r5, r9
   1ac0c:	d315      	bcc.n	1ac3a <__udivmoddi4+0x2ae>
   1ac0e:	d012      	beq.n	1ac36 <__udivmoddi4+0x2aa>
   1ac10:	b156      	cbz	r6, 1ac28 <__udivmoddi4+0x29c>
   1ac12:	ebba 030e 	subs.w	r3, sl, lr
   1ac16:	eb64 0405 	sbc.w	r4, r4, r5
   1ac1a:	fa04 f707 	lsl.w	r7, r4, r7
   1ac1e:	40cb      	lsrs	r3, r1
   1ac20:	431f      	orrs	r7, r3
   1ac22:	40cc      	lsrs	r4, r1
   1ac24:	6037      	str	r7, [r6, #0]
   1ac26:	6074      	str	r4, [r6, #4]
   1ac28:	2100      	movs	r1, #0
   1ac2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ac2e:	4618      	mov	r0, r3
   1ac30:	e6f8      	b.n	1aa24 <__udivmoddi4+0x98>
   1ac32:	4690      	mov	r8, r2
   1ac34:	e6e0      	b.n	1a9f8 <__udivmoddi4+0x6c>
   1ac36:	45c2      	cmp	sl, r8
   1ac38:	d2ea      	bcs.n	1ac10 <__udivmoddi4+0x284>
   1ac3a:	ebb8 0e02 	subs.w	lr, r8, r2
   1ac3e:	eb69 0503 	sbc.w	r5, r9, r3
   1ac42:	3801      	subs	r0, #1
   1ac44:	e7e4      	b.n	1ac10 <__udivmoddi4+0x284>
   1ac46:	4628      	mov	r0, r5
   1ac48:	e7d7      	b.n	1abfa <__udivmoddi4+0x26e>
   1ac4a:	4640      	mov	r0, r8
   1ac4c:	e791      	b.n	1ab72 <__udivmoddi4+0x1e6>
   1ac4e:	4681      	mov	r9, r0
   1ac50:	e7be      	b.n	1abd0 <__udivmoddi4+0x244>
   1ac52:	4601      	mov	r1, r0
   1ac54:	e778      	b.n	1ab48 <__udivmoddi4+0x1bc>
   1ac56:	3802      	subs	r0, #2
   1ac58:	443c      	add	r4, r7
   1ac5a:	e745      	b.n	1aae8 <__udivmoddi4+0x15c>
   1ac5c:	4608      	mov	r0, r1
   1ac5e:	e708      	b.n	1aa72 <__udivmoddi4+0xe6>
   1ac60:	f1a8 0802 	sub.w	r8, r8, #2
   1ac64:	443d      	add	r5, r7
   1ac66:	e72b      	b.n	1aac0 <__udivmoddi4+0x134>

0001ac68 <__aeabi_idiv0>:
   1ac68:	4770      	bx	lr
   1ac6a:	bf00      	nop

0001ac6c <ctime>:
   1ac6c:	b508      	push	{r3, lr}
   1ac6e:	f000 f84d 	bl	1ad0c <localtime>
   1ac72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1ac76:	f000 bdc7 	b.w	1b808 <asctime>
   1ac7a:	bf00      	nop

0001ac7c <__cxa_atexit>:
   1ac7c:	4613      	mov	r3, r2
   1ac7e:	460a      	mov	r2, r1
   1ac80:	4601      	mov	r1, r0
   1ac82:	2002      	movs	r0, #2
   1ac84:	f000 bd54 	b.w	1b730 <__register_exitproc>

0001ac88 <difftime>:
   1ac88:	b508      	push	{r3, lr}
   1ac8a:	1a40      	subs	r0, r0, r1
   1ac8c:	f7ff f83c 	bl	19d08 <__aeabi_i2d>
   1ac90:	bd08      	pop	{r3, pc}
   1ac92:	bf00      	nop

0001ac94 <__errno>:
   1ac94:	4b01      	ldr	r3, [pc, #4]	; (1ac9c <__errno+0x8>)
   1ac96:	6818      	ldr	r0, [r3, #0]
   1ac98:	4770      	bx	lr
   1ac9a:	bf00      	nop
   1ac9c:	200001bc 	.word	0x200001bc

0001aca0 <ffs>:
   1aca0:	b140      	cbz	r0, 1acb4 <ffs+0x14>
   1aca2:	2300      	movs	r3, #0
   1aca4:	fa40 f103 	asr.w	r1, r0, r3
   1aca8:	1c5a      	adds	r2, r3, #1
   1acaa:	07c9      	lsls	r1, r1, #31
   1acac:	4613      	mov	r3, r2
   1acae:	d5f9      	bpl.n	1aca4 <ffs+0x4>
   1acb0:	4610      	mov	r0, r2
   1acb2:	4770      	bx	lr
   1acb4:	4602      	mov	r2, r0
   1acb6:	4610      	mov	r0, r2
   1acb8:	4770      	bx	lr
   1acba:	bf00      	nop

0001acbc <__libc_init_array>:
   1acbc:	b570      	push	{r4, r5, r6, lr}
   1acbe:	4e0f      	ldr	r6, [pc, #60]	; (1acfc <__libc_init_array+0x40>)
   1acc0:	4d0f      	ldr	r5, [pc, #60]	; (1ad00 <__libc_init_array+0x44>)
   1acc2:	1b76      	subs	r6, r6, r5
   1acc4:	10b6      	asrs	r6, r6, #2
   1acc6:	bf18      	it	ne
   1acc8:	2400      	movne	r4, #0
   1acca:	d005      	beq.n	1acd8 <__libc_init_array+0x1c>
   1accc:	3401      	adds	r4, #1
   1acce:	f855 3b04 	ldr.w	r3, [r5], #4
   1acd2:	4798      	blx	r3
   1acd4:	42a6      	cmp	r6, r4
   1acd6:	d1f9      	bne.n	1accc <__libc_init_array+0x10>
   1acd8:	4e0a      	ldr	r6, [pc, #40]	; (1ad04 <__libc_init_array+0x48>)
   1acda:	4d0b      	ldr	r5, [pc, #44]	; (1ad08 <__libc_init_array+0x4c>)
   1acdc:	1b76      	subs	r6, r6, r5
   1acde:	f006 fa41 	bl	21164 <_init>
   1ace2:	10b6      	asrs	r6, r6, #2
   1ace4:	bf18      	it	ne
   1ace6:	2400      	movne	r4, #0
   1ace8:	d006      	beq.n	1acf8 <__libc_init_array+0x3c>
   1acea:	3401      	adds	r4, #1
   1acec:	f855 3b04 	ldr.w	r3, [r5], #4
   1acf0:	4798      	blx	r3
   1acf2:	42a6      	cmp	r6, r4
   1acf4:	d1f9      	bne.n	1acea <__libc_init_array+0x2e>
   1acf6:	bd70      	pop	{r4, r5, r6, pc}
   1acf8:	bd70      	pop	{r4, r5, r6, pc}
   1acfa:	bf00      	nop
   1acfc:	00021170 	.word	0x00021170
   1ad00:	00021170 	.word	0x00021170
   1ad04:	000211d0 	.word	0x000211d0
   1ad08:	00021170 	.word	0x00021170

0001ad0c <localtime>:
   1ad0c:	4b02      	ldr	r3, [pc, #8]	; (1ad18 <localtime+0xc>)
   1ad0e:	6819      	ldr	r1, [r3, #0]
   1ad10:	317c      	adds	r1, #124	; 0x7c
   1ad12:	f000 b803 	b.w	1ad1c <localtime_r>
   1ad16:	bf00      	nop
   1ad18:	200001bc 	.word	0x200001bc

0001ad1c <localtime_r>:
   1ad1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad20:	460c      	mov	r4, r1
   1ad22:	4607      	mov	r7, r0
   1ad24:	f000 fe04 	bl	1b930 <__gettzinfo>
   1ad28:	4621      	mov	r1, r4
   1ad2a:	4680      	mov	r8, r0
   1ad2c:	4638      	mov	r0, r7
   1ad2e:	f000 fe03 	bl	1b938 <gmtime_r>
   1ad32:	6946      	ldr	r6, [r0, #20]
   1ad34:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1ad38:	07b1      	lsls	r1, r6, #30
   1ad3a:	4604      	mov	r4, r0
   1ad3c:	f000 80b9 	beq.w	1aeb2 <localtime_r+0x196>
   1ad40:	17f5      	asrs	r5, r6, #31
   1ad42:	4b7f      	ldr	r3, [pc, #508]	; (1af40 <localtime_r+0x224>)
   1ad44:	fb83 2306 	smull	r2, r3, r3, r6
   1ad48:	ebc5 15e3 	rsb	r5, r5, r3, asr #7
   1ad4c:	f44f 73c8 	mov.w	r3, #400	; 0x190
   1ad50:	fb03 6515 	mls	r5, r3, r5, r6
   1ad54:	2d00      	cmp	r5, #0
   1ad56:	bf0c      	ite	eq
   1ad58:	2530      	moveq	r5, #48	; 0x30
   1ad5a:	2500      	movne	r5, #0
   1ad5c:	4b79      	ldr	r3, [pc, #484]	; (1af44 <localtime_r+0x228>)
   1ad5e:	441d      	add	r5, r3
   1ad60:	f000 fb3e 	bl	1b3e0 <__tz_lock>
   1ad64:	f000 fb48 	bl	1b3f8 <_tzset_unlocked>
   1ad68:	4b77      	ldr	r3, [pc, #476]	; (1af48 <localtime_r+0x22c>)
   1ad6a:	681b      	ldr	r3, [r3, #0]
   1ad6c:	b343      	cbz	r3, 1adc0 <localtime_r+0xa4>
   1ad6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ad72:	429e      	cmp	r6, r3
   1ad74:	d005      	beq.n	1ad82 <localtime_r+0x66>
   1ad76:	4630      	mov	r0, r6
   1ad78:	f000 fa70 	bl	1b25c <__tzcalc_limits>
   1ad7c:	2800      	cmp	r0, #0
   1ad7e:	f000 80a6 	beq.w	1aece <localtime_r+0x1b2>
   1ad82:	f8d8 3000 	ldr.w	r3, [r8]
   1ad86:	b983      	cbnz	r3, 1adaa <localtime_r+0x8e>
   1ad88:	683b      	ldr	r3, [r7, #0]
   1ad8a:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1ad8e:	4293      	cmp	r3, r2
   1ad90:	f280 80a1 	bge.w	1aed6 <localtime_r+0x1ba>
   1ad94:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1ad98:	4293      	cmp	r3, r2
   1ad9a:	bfb4      	ite	lt
   1ad9c:	2301      	movlt	r3, #1
   1ad9e:	2300      	movge	r3, #0
   1ada0:	6223      	str	r3, [r4, #32]
   1ada2:	da0e      	bge.n	1adc2 <localtime_r+0xa6>
   1ada4:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
   1ada8:	e00d      	b.n	1adc6 <localtime_r+0xaa>
   1adaa:	683b      	ldr	r3, [r7, #0]
   1adac:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1adb0:	4293      	cmp	r3, r2
   1adb2:	db04      	blt.n	1adbe <localtime_r+0xa2>
   1adb4:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1adb8:	4293      	cmp	r3, r2
   1adba:	f2c0 808c 	blt.w	1aed6 <localtime_r+0x1ba>
   1adbe:	2300      	movs	r3, #0
   1adc0:	6223      	str	r3, [r4, #32]
   1adc2:	f8d8 6020 	ldr.w	r6, [r8, #32]
   1adc6:	4a61      	ldr	r2, [pc, #388]	; (1af4c <localtime_r+0x230>)
   1adc8:	4f61      	ldr	r7, [pc, #388]	; (1af50 <localtime_r+0x234>)
   1adca:	68a1      	ldr	r1, [r4, #8]
   1adcc:	fb82 3206 	smull	r3, r2, r2, r6
   1add0:	4432      	add	r2, r6
   1add2:	17f3      	asrs	r3, r6, #31
   1add4:	12d2      	asrs	r2, r2, #11
   1add6:	1ad0      	subs	r0, r2, r3
   1add8:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1addc:	fb0e 6010 	mls	r0, lr, r0, r6
   1ade0:	fb87 6700 	smull	r6, r7, r7, r0
   1ade4:	183e      	adds	r6, r7, r0
   1ade6:	17c7      	asrs	r7, r0, #31
   1ade8:	ebc7 1766 	rsb	r7, r7, r6, asr #5
   1adec:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
   1adf0:	6826      	ldr	r6, [r4, #0]
   1adf2:	1ad3      	subs	r3, r2, r3
   1adf4:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
   1adf8:	6862      	ldr	r2, [r4, #4]
   1adfa:	1a30      	subs	r0, r6, r0
   1adfc:	1acb      	subs	r3, r1, r3
   1adfe:	1bd2      	subs	r2, r2, r7
   1ae00:	283b      	cmp	r0, #59	; 0x3b
   1ae02:	e884 000d 	stmia.w	r4, {r0, r2, r3}
   1ae06:	dd4d      	ble.n	1aea4 <localtime_r+0x188>
   1ae08:	3201      	adds	r2, #1
   1ae0a:	383c      	subs	r0, #60	; 0x3c
   1ae0c:	e884 0005 	stmia.w	r4, {r0, r2}
   1ae10:	2a3b      	cmp	r2, #59	; 0x3b
   1ae12:	dd40      	ble.n	1ae96 <localtime_r+0x17a>
   1ae14:	3301      	adds	r3, #1
   1ae16:	3a3c      	subs	r2, #60	; 0x3c
   1ae18:	60a3      	str	r3, [r4, #8]
   1ae1a:	6062      	str	r2, [r4, #4]
   1ae1c:	2b17      	cmp	r3, #23
   1ae1e:	dd1d      	ble.n	1ae5c <localtime_r+0x140>
   1ae20:	69a2      	ldr	r2, [r4, #24]
   1ae22:	69e1      	ldr	r1, [r4, #28]
   1ae24:	3201      	adds	r2, #1
   1ae26:	2a06      	cmp	r2, #6
   1ae28:	bfc8      	it	gt
   1ae2a:	2200      	movgt	r2, #0
   1ae2c:	61a2      	str	r2, [r4, #24]
   1ae2e:	68e2      	ldr	r2, [r4, #12]
   1ae30:	3101      	adds	r1, #1
   1ae32:	61e1      	str	r1, [r4, #28]
   1ae34:	3b18      	subs	r3, #24
   1ae36:	3201      	adds	r2, #1
   1ae38:	6921      	ldr	r1, [r4, #16]
   1ae3a:	60a3      	str	r3, [r4, #8]
   1ae3c:	60e2      	str	r2, [r4, #12]
   1ae3e:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1ae42:	429a      	cmp	r2, r3
   1ae44:	dd05      	ble.n	1ae52 <localtime_r+0x136>
   1ae46:	3101      	adds	r1, #1
   1ae48:	1ad2      	subs	r2, r2, r3
   1ae4a:	290c      	cmp	r1, #12
   1ae4c:	60e2      	str	r2, [r4, #12]
   1ae4e:	d045      	beq.n	1aedc <localtime_r+0x1c0>
   1ae50:	6121      	str	r1, [r4, #16]
   1ae52:	f000 facb 	bl	1b3ec <__tz_unlock>
   1ae56:	4620      	mov	r0, r4
   1ae58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ae5c:	2b00      	cmp	r3, #0
   1ae5e:	daf8      	bge.n	1ae52 <localtime_r+0x136>
   1ae60:	69a2      	ldr	r2, [r4, #24]
   1ae62:	69e1      	ldr	r1, [r4, #28]
   1ae64:	3a01      	subs	r2, #1
   1ae66:	bf48      	it	mi
   1ae68:	2206      	movmi	r2, #6
   1ae6a:	61a2      	str	r2, [r4, #24]
   1ae6c:	68e2      	ldr	r2, [r4, #12]
   1ae6e:	3901      	subs	r1, #1
   1ae70:	3318      	adds	r3, #24
   1ae72:	3a01      	subs	r2, #1
   1ae74:	61e1      	str	r1, [r4, #28]
   1ae76:	60a3      	str	r3, [r4, #8]
   1ae78:	60e2      	str	r2, [r4, #12]
   1ae7a:	2a00      	cmp	r2, #0
   1ae7c:	d1e9      	bne.n	1ae52 <localtime_r+0x136>
   1ae7e:	6923      	ldr	r3, [r4, #16]
   1ae80:	3b01      	subs	r3, #1
   1ae82:	d432      	bmi.n	1aeea <localtime_r+0x1ce>
   1ae84:	6123      	str	r3, [r4, #16]
   1ae86:	009b      	lsls	r3, r3, #2
   1ae88:	58eb      	ldr	r3, [r5, r3]
   1ae8a:	60e3      	str	r3, [r4, #12]
   1ae8c:	f000 faae 	bl	1b3ec <__tz_unlock>
   1ae90:	4620      	mov	r0, r4
   1ae92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ae96:	2a00      	cmp	r2, #0
   1ae98:	dac0      	bge.n	1ae1c <localtime_r+0x100>
   1ae9a:	3b01      	subs	r3, #1
   1ae9c:	323c      	adds	r2, #60	; 0x3c
   1ae9e:	60a3      	str	r3, [r4, #8]
   1aea0:	6062      	str	r2, [r4, #4]
   1aea2:	e7bb      	b.n	1ae1c <localtime_r+0x100>
   1aea4:	2800      	cmp	r0, #0
   1aea6:	dab3      	bge.n	1ae10 <localtime_r+0xf4>
   1aea8:	3a01      	subs	r2, #1
   1aeaa:	303c      	adds	r0, #60	; 0x3c
   1aeac:	e884 0005 	stmia.w	r4, {r0, r2}
   1aeb0:	e7ae      	b.n	1ae10 <localtime_r+0xf4>
   1aeb2:	4b23      	ldr	r3, [pc, #140]	; (1af40 <localtime_r+0x224>)
   1aeb4:	17f5      	asrs	r5, r6, #31
   1aeb6:	fb83 2306 	smull	r2, r3, r3, r6
   1aeba:	ebc5 1363 	rsb	r3, r5, r3, asr #5
   1aebe:	2264      	movs	r2, #100	; 0x64
   1aec0:	fb02 6313 	mls	r3, r2, r3, r6
   1aec4:	2b00      	cmp	r3, #0
   1aec6:	f43f af3c 	beq.w	1ad42 <localtime_r+0x26>
   1aeca:	2530      	movs	r5, #48	; 0x30
   1aecc:	e746      	b.n	1ad5c <localtime_r+0x40>
   1aece:	f04f 33ff 	mov.w	r3, #4294967295
   1aed2:	6223      	str	r3, [r4, #32]
   1aed4:	e775      	b.n	1adc2 <localtime_r+0xa6>
   1aed6:	2301      	movs	r3, #1
   1aed8:	6223      	str	r3, [r4, #32]
   1aeda:	e763      	b.n	1ada4 <localtime_r+0x88>
   1aedc:	6963      	ldr	r3, [r4, #20]
   1aede:	2200      	movs	r2, #0
   1aee0:	3301      	adds	r3, #1
   1aee2:	6163      	str	r3, [r4, #20]
   1aee4:	6122      	str	r2, [r4, #16]
   1aee6:	61e2      	str	r2, [r4, #28]
   1aee8:	e7b3      	b.n	1ae52 <localtime_r+0x136>
   1aeea:	6963      	ldr	r3, [r4, #20]
   1aeec:	1e5a      	subs	r2, r3, #1
   1aeee:	210b      	movs	r1, #11
   1aef0:	6162      	str	r2, [r4, #20]
   1aef2:	0792      	lsls	r2, r2, #30
   1aef4:	6121      	str	r1, [r4, #16]
   1aef6:	d013      	beq.n	1af20 <localtime_r+0x204>
   1aef8:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1aefc:	17d3      	asrs	r3, r2, #31
   1aefe:	4910      	ldr	r1, [pc, #64]	; (1af40 <localtime_r+0x224>)
   1af00:	fb81 0102 	smull	r0, r1, r1, r2
   1af04:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
   1af08:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1af0c:	fb01 2313 	mls	r3, r1, r3, r2
   1af10:	fab3 f383 	clz	r3, r3
   1af14:	095b      	lsrs	r3, r3, #5
   1af16:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   1af1a:	61e3      	str	r3, [r4, #28]
   1af1c:	232c      	movs	r3, #44	; 0x2c
   1af1e:	e7b3      	b.n	1ae88 <localtime_r+0x16c>
   1af20:	4907      	ldr	r1, [pc, #28]	; (1af40 <localtime_r+0x224>)
   1af22:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1af26:	fb81 3102 	smull	r3, r1, r1, r2
   1af2a:	17d3      	asrs	r3, r2, #31
   1af2c:	ebc3 1161 	rsb	r1, r3, r1, asr #5
   1af30:	2064      	movs	r0, #100	; 0x64
   1af32:	fb00 2111 	mls	r1, r0, r1, r2
   1af36:	2900      	cmp	r1, #0
   1af38:	d0e1      	beq.n	1aefe <localtime_r+0x1e2>
   1af3a:	f240 136d 	movw	r3, #365	; 0x16d
   1af3e:	e7ec      	b.n	1af1a <localtime_r+0x1fe>
   1af40:	51eb851f 	.word	0x51eb851f
   1af44:	00020ecc 	.word	0x00020ecc
   1af48:	2000a0ec 	.word	0x2000a0ec
   1af4c:	91a2b3c5 	.word	0x91a2b3c5
   1af50:	88888889 	.word	0x88888889

0001af54 <memcpy>:
   1af54:	4684      	mov	ip, r0
   1af56:	ea41 0300 	orr.w	r3, r1, r0
   1af5a:	f013 0303 	ands.w	r3, r3, #3
   1af5e:	d16d      	bne.n	1b03c <memcpy+0xe8>
   1af60:	3a40      	subs	r2, #64	; 0x40
   1af62:	d341      	bcc.n	1afe8 <memcpy+0x94>
   1af64:	f851 3b04 	ldr.w	r3, [r1], #4
   1af68:	f840 3b04 	str.w	r3, [r0], #4
   1af6c:	f851 3b04 	ldr.w	r3, [r1], #4
   1af70:	f840 3b04 	str.w	r3, [r0], #4
   1af74:	f851 3b04 	ldr.w	r3, [r1], #4
   1af78:	f840 3b04 	str.w	r3, [r0], #4
   1af7c:	f851 3b04 	ldr.w	r3, [r1], #4
   1af80:	f840 3b04 	str.w	r3, [r0], #4
   1af84:	f851 3b04 	ldr.w	r3, [r1], #4
   1af88:	f840 3b04 	str.w	r3, [r0], #4
   1af8c:	f851 3b04 	ldr.w	r3, [r1], #4
   1af90:	f840 3b04 	str.w	r3, [r0], #4
   1af94:	f851 3b04 	ldr.w	r3, [r1], #4
   1af98:	f840 3b04 	str.w	r3, [r0], #4
   1af9c:	f851 3b04 	ldr.w	r3, [r1], #4
   1afa0:	f840 3b04 	str.w	r3, [r0], #4
   1afa4:	f851 3b04 	ldr.w	r3, [r1], #4
   1afa8:	f840 3b04 	str.w	r3, [r0], #4
   1afac:	f851 3b04 	ldr.w	r3, [r1], #4
   1afb0:	f840 3b04 	str.w	r3, [r0], #4
   1afb4:	f851 3b04 	ldr.w	r3, [r1], #4
   1afb8:	f840 3b04 	str.w	r3, [r0], #4
   1afbc:	f851 3b04 	ldr.w	r3, [r1], #4
   1afc0:	f840 3b04 	str.w	r3, [r0], #4
   1afc4:	f851 3b04 	ldr.w	r3, [r1], #4
   1afc8:	f840 3b04 	str.w	r3, [r0], #4
   1afcc:	f851 3b04 	ldr.w	r3, [r1], #4
   1afd0:	f840 3b04 	str.w	r3, [r0], #4
   1afd4:	f851 3b04 	ldr.w	r3, [r1], #4
   1afd8:	f840 3b04 	str.w	r3, [r0], #4
   1afdc:	f851 3b04 	ldr.w	r3, [r1], #4
   1afe0:	f840 3b04 	str.w	r3, [r0], #4
   1afe4:	3a40      	subs	r2, #64	; 0x40
   1afe6:	d2bd      	bcs.n	1af64 <memcpy+0x10>
   1afe8:	3230      	adds	r2, #48	; 0x30
   1afea:	d311      	bcc.n	1b010 <memcpy+0xbc>
   1afec:	f851 3b04 	ldr.w	r3, [r1], #4
   1aff0:	f840 3b04 	str.w	r3, [r0], #4
   1aff4:	f851 3b04 	ldr.w	r3, [r1], #4
   1aff8:	f840 3b04 	str.w	r3, [r0], #4
   1affc:	f851 3b04 	ldr.w	r3, [r1], #4
   1b000:	f840 3b04 	str.w	r3, [r0], #4
   1b004:	f851 3b04 	ldr.w	r3, [r1], #4
   1b008:	f840 3b04 	str.w	r3, [r0], #4
   1b00c:	3a10      	subs	r2, #16
   1b00e:	d2ed      	bcs.n	1afec <memcpy+0x98>
   1b010:	320c      	adds	r2, #12
   1b012:	d305      	bcc.n	1b020 <memcpy+0xcc>
   1b014:	f851 3b04 	ldr.w	r3, [r1], #4
   1b018:	f840 3b04 	str.w	r3, [r0], #4
   1b01c:	3a04      	subs	r2, #4
   1b01e:	d2f9      	bcs.n	1b014 <memcpy+0xc0>
   1b020:	3204      	adds	r2, #4
   1b022:	d008      	beq.n	1b036 <memcpy+0xe2>
   1b024:	07d2      	lsls	r2, r2, #31
   1b026:	bf1c      	itt	ne
   1b028:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1b02c:	f800 3b01 	strbne.w	r3, [r0], #1
   1b030:	d301      	bcc.n	1b036 <memcpy+0xe2>
   1b032:	880b      	ldrh	r3, [r1, #0]
   1b034:	8003      	strh	r3, [r0, #0]
   1b036:	4660      	mov	r0, ip
   1b038:	4770      	bx	lr
   1b03a:	bf00      	nop
   1b03c:	2a08      	cmp	r2, #8
   1b03e:	d313      	bcc.n	1b068 <memcpy+0x114>
   1b040:	078b      	lsls	r3, r1, #30
   1b042:	d08d      	beq.n	1af60 <memcpy+0xc>
   1b044:	f010 0303 	ands.w	r3, r0, #3
   1b048:	d08a      	beq.n	1af60 <memcpy+0xc>
   1b04a:	f1c3 0304 	rsb	r3, r3, #4
   1b04e:	1ad2      	subs	r2, r2, r3
   1b050:	07db      	lsls	r3, r3, #31
   1b052:	bf1c      	itt	ne
   1b054:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1b058:	f800 3b01 	strbne.w	r3, [r0], #1
   1b05c:	d380      	bcc.n	1af60 <memcpy+0xc>
   1b05e:	f831 3b02 	ldrh.w	r3, [r1], #2
   1b062:	f820 3b02 	strh.w	r3, [r0], #2
   1b066:	e77b      	b.n	1af60 <memcpy+0xc>
   1b068:	3a04      	subs	r2, #4
   1b06a:	d3d9      	bcc.n	1b020 <memcpy+0xcc>
   1b06c:	3a01      	subs	r2, #1
   1b06e:	f811 3b01 	ldrb.w	r3, [r1], #1
   1b072:	f800 3b01 	strb.w	r3, [r0], #1
   1b076:	d2f9      	bcs.n	1b06c <memcpy+0x118>
   1b078:	780b      	ldrb	r3, [r1, #0]
   1b07a:	7003      	strb	r3, [r0, #0]
   1b07c:	784b      	ldrb	r3, [r1, #1]
   1b07e:	7043      	strb	r3, [r0, #1]
   1b080:	788b      	ldrb	r3, [r1, #2]
   1b082:	7083      	strb	r3, [r0, #2]
   1b084:	4660      	mov	r0, ip
   1b086:	4770      	bx	lr

0001b088 <memset>:
   1b088:	b470      	push	{r4, r5, r6}
   1b08a:	0786      	lsls	r6, r0, #30
   1b08c:	d046      	beq.n	1b11c <memset+0x94>
   1b08e:	1e54      	subs	r4, r2, #1
   1b090:	2a00      	cmp	r2, #0
   1b092:	d041      	beq.n	1b118 <memset+0x90>
   1b094:	b2ca      	uxtb	r2, r1
   1b096:	4603      	mov	r3, r0
   1b098:	e002      	b.n	1b0a0 <memset+0x18>
   1b09a:	f114 34ff 	adds.w	r4, r4, #4294967295
   1b09e:	d33b      	bcc.n	1b118 <memset+0x90>
   1b0a0:	f803 2b01 	strb.w	r2, [r3], #1
   1b0a4:	079d      	lsls	r5, r3, #30
   1b0a6:	d1f8      	bne.n	1b09a <memset+0x12>
   1b0a8:	2c03      	cmp	r4, #3
   1b0aa:	d92e      	bls.n	1b10a <memset+0x82>
   1b0ac:	b2cd      	uxtb	r5, r1
   1b0ae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1b0b2:	2c0f      	cmp	r4, #15
   1b0b4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1b0b8:	d919      	bls.n	1b0ee <memset+0x66>
   1b0ba:	f103 0210 	add.w	r2, r3, #16
   1b0be:	4626      	mov	r6, r4
   1b0c0:	3e10      	subs	r6, #16
   1b0c2:	2e0f      	cmp	r6, #15
   1b0c4:	f842 5c10 	str.w	r5, [r2, #-16]
   1b0c8:	f842 5c0c 	str.w	r5, [r2, #-12]
   1b0cc:	f842 5c08 	str.w	r5, [r2, #-8]
   1b0d0:	f842 5c04 	str.w	r5, [r2, #-4]
   1b0d4:	f102 0210 	add.w	r2, r2, #16
   1b0d8:	d8f2      	bhi.n	1b0c0 <memset+0x38>
   1b0da:	f1a4 0210 	sub.w	r2, r4, #16
   1b0de:	f022 020f 	bic.w	r2, r2, #15
   1b0e2:	f004 040f 	and.w	r4, r4, #15
   1b0e6:	3210      	adds	r2, #16
   1b0e8:	2c03      	cmp	r4, #3
   1b0ea:	4413      	add	r3, r2
   1b0ec:	d90d      	bls.n	1b10a <memset+0x82>
   1b0ee:	461e      	mov	r6, r3
   1b0f0:	4622      	mov	r2, r4
   1b0f2:	3a04      	subs	r2, #4
   1b0f4:	2a03      	cmp	r2, #3
   1b0f6:	f846 5b04 	str.w	r5, [r6], #4
   1b0fa:	d8fa      	bhi.n	1b0f2 <memset+0x6a>
   1b0fc:	1f22      	subs	r2, r4, #4
   1b0fe:	f022 0203 	bic.w	r2, r2, #3
   1b102:	3204      	adds	r2, #4
   1b104:	4413      	add	r3, r2
   1b106:	f004 0403 	and.w	r4, r4, #3
   1b10a:	b12c      	cbz	r4, 1b118 <memset+0x90>
   1b10c:	b2c9      	uxtb	r1, r1
   1b10e:	441c      	add	r4, r3
   1b110:	f803 1b01 	strb.w	r1, [r3], #1
   1b114:	429c      	cmp	r4, r3
   1b116:	d1fb      	bne.n	1b110 <memset+0x88>
   1b118:	bc70      	pop	{r4, r5, r6}
   1b11a:	4770      	bx	lr
   1b11c:	4614      	mov	r4, r2
   1b11e:	4603      	mov	r3, r0
   1b120:	e7c2      	b.n	1b0a8 <memset+0x20>
   1b122:	bf00      	nop

0001b124 <rand>:
   1b124:	b410      	push	{r4}
   1b126:	4b0c      	ldr	r3, [pc, #48]	; (1b158 <rand+0x34>)
   1b128:	480c      	ldr	r0, [pc, #48]	; (1b15c <rand+0x38>)
   1b12a:	6819      	ldr	r1, [r3, #0]
   1b12c:	4c0c      	ldr	r4, [pc, #48]	; (1b160 <rand+0x3c>)
   1b12e:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   1b132:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   1b136:	fb00 f002 	mul.w	r0, r0, r2
   1b13a:	fb04 0003 	mla	r0, r4, r3, r0
   1b13e:	fba2 2304 	umull	r2, r3, r2, r4
   1b142:	4403      	add	r3, r0
   1b144:	3201      	adds	r2, #1
   1b146:	f143 0300 	adc.w	r3, r3, #0
   1b14a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   1b14e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b152:	bc10      	pop	{r4}
   1b154:	4770      	bx	lr
   1b156:	bf00      	nop
   1b158:	200001bc 	.word	0x200001bc
   1b15c:	5851f42d 	.word	0x5851f42d
   1b160:	4c957f2d 	.word	0x4c957f2d
	...

0001b180 <strlen>:
   1b180:	f890 f000 	pld	[r0]
   1b184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1b188:	f020 0107 	bic.w	r1, r0, #7
   1b18c:	f06f 0c00 	mvn.w	ip, #0
   1b190:	f010 0407 	ands.w	r4, r0, #7
   1b194:	f891 f020 	pld	[r1, #32]
   1b198:	f040 8049 	bne.w	1b22e <strlen+0xae>
   1b19c:	f04f 0400 	mov.w	r4, #0
   1b1a0:	f06f 0007 	mvn.w	r0, #7
   1b1a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b1a8:	f891 f040 	pld	[r1, #64]	; 0x40
   1b1ac:	f100 0008 	add.w	r0, r0, #8
   1b1b0:	fa82 f24c 	uadd8	r2, r2, ip
   1b1b4:	faa4 f28c 	sel	r2, r4, ip
   1b1b8:	fa83 f34c 	uadd8	r3, r3, ip
   1b1bc:	faa2 f38c 	sel	r3, r2, ip
   1b1c0:	bb4b      	cbnz	r3, 1b216 <strlen+0x96>
   1b1c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1b1c6:	fa82 f24c 	uadd8	r2, r2, ip
   1b1ca:	f100 0008 	add.w	r0, r0, #8
   1b1ce:	faa4 f28c 	sel	r2, r4, ip
   1b1d2:	fa83 f34c 	uadd8	r3, r3, ip
   1b1d6:	faa2 f38c 	sel	r3, r2, ip
   1b1da:	b9e3      	cbnz	r3, 1b216 <strlen+0x96>
   1b1dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1b1e0:	fa82 f24c 	uadd8	r2, r2, ip
   1b1e4:	f100 0008 	add.w	r0, r0, #8
   1b1e8:	faa4 f28c 	sel	r2, r4, ip
   1b1ec:	fa83 f34c 	uadd8	r3, r3, ip
   1b1f0:	faa2 f38c 	sel	r3, r2, ip
   1b1f4:	b97b      	cbnz	r3, 1b216 <strlen+0x96>
   1b1f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1b1fa:	f101 0120 	add.w	r1, r1, #32
   1b1fe:	fa82 f24c 	uadd8	r2, r2, ip
   1b202:	f100 0008 	add.w	r0, r0, #8
   1b206:	faa4 f28c 	sel	r2, r4, ip
   1b20a:	fa83 f34c 	uadd8	r3, r3, ip
   1b20e:	faa2 f38c 	sel	r3, r2, ip
   1b212:	2b00      	cmp	r3, #0
   1b214:	d0c6      	beq.n	1b1a4 <strlen+0x24>
   1b216:	2a00      	cmp	r2, #0
   1b218:	bf04      	itt	eq
   1b21a:	3004      	addeq	r0, #4
   1b21c:	461a      	moveq	r2, r3
   1b21e:	ba12      	rev	r2, r2
   1b220:	fab2 f282 	clz	r2, r2
   1b224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1b228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1b22c:	4770      	bx	lr
   1b22e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b232:	f004 0503 	and.w	r5, r4, #3
   1b236:	f1c4 0000 	rsb	r0, r4, #0
   1b23a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1b23e:	f014 0f04 	tst.w	r4, #4
   1b242:	f891 f040 	pld	[r1, #64]	; 0x40
   1b246:	fa0c f505 	lsl.w	r5, ip, r5
   1b24a:	ea62 0205 	orn	r2, r2, r5
   1b24e:	bf1c      	itt	ne
   1b250:	ea63 0305 	ornne	r3, r3, r5
   1b254:	4662      	movne	r2, ip
   1b256:	f04f 0400 	mov.w	r4, #0
   1b25a:	e7a9      	b.n	1b1b0 <strlen+0x30>

0001b25c <__tzcalc_limits>:
   1b25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b260:	b083      	sub	sp, #12
   1b262:	4605      	mov	r5, r0
   1b264:	f000 fb64 	bl	1b930 <__gettzinfo>
   1b268:	f240 73b1 	movw	r3, #1969	; 0x7b1
   1b26c:	429d      	cmp	r5, r3
   1b26e:	f340 8093 	ble.w	1b398 <__tzcalc_limits+0x13c>
   1b272:	4c57      	ldr	r4, [pc, #348]	; (1b3d0 <__tzcalc_limits+0x174>)
   1b274:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1b3dc <__tzcalc_limits+0x180>
   1b278:	6045      	str	r5, [r0, #4]
   1b27a:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   1b27e:	18ee      	adds	r6, r5, r3
   1b280:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
   1b284:	fb84 3102 	smull	r3, r1, r4, r2
   1b288:	10b7      	asrs	r7, r6, #2
   1b28a:	f240 1e6d 	movw	lr, #365	; 0x16d
   1b28e:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   1b292:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
   1b296:	17d2      	asrs	r2, r2, #31
   1b298:	eb05 030c 	add.w	r3, r5, ip
   1b29c:	fb0e 7606 	mla	r6, lr, r6, r7
   1b2a0:	eba2 1261 	sub.w	r2, r2, r1, asr #5
   1b2a4:	17ef      	asrs	r7, r5, #31
   1b2a6:	fb84 c105 	smull	ip, r1, r4, r5
   1b2aa:	4416      	add	r6, r2
   1b2ac:	fb84 e403 	smull	lr, r4, r4, r3
   1b2b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1b2b4:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
   1b2b8:	17db      	asrs	r3, r3, #31
   1b2ba:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
   1b2be:	fb02 5e1e 	mls	lr, r2, lr, r5
   1b2c2:	ebc7 1761 	rsb	r7, r7, r1, asr #5
   1b2c6:	2264      	movs	r2, #100	; 0x64
   1b2c8:	441e      	add	r6, r3
   1b2ca:	f1be 0f00 	cmp.w	lr, #0
   1b2ce:	bf0c      	ite	eq
   1b2d0:	2330      	moveq	r3, #48	; 0x30
   1b2d2:	2300      	movne	r3, #0
   1b2d4:	fb02 5717 	mls	r7, r2, r7, r5
   1b2d8:	9301      	str	r3, [sp, #4]
   1b2da:	f005 0503 	and.w	r5, r5, #3
   1b2de:	4604      	mov	r4, r0
   1b2e0:	f100 0c38 	add.w	ip, r0, #56	; 0x38
   1b2e4:	7a23      	ldrb	r3, [r4, #8]
   1b2e6:	2b4a      	cmp	r3, #74	; 0x4a
   1b2e8:	d05a      	beq.n	1b3a0 <__tzcalc_limits+0x144>
   1b2ea:	2b44      	cmp	r3, #68	; 0x44
   1b2ec:	d068      	beq.n	1b3c0 <__tzcalc_limits+0x164>
   1b2ee:	2d00      	cmp	r5, #0
   1b2f0:	d04b      	beq.n	1b38a <__tzcalc_limits+0x12e>
   1b2f2:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1b2f6:	68e3      	ldr	r3, [r4, #12]
   1b2f8:	4a36      	ldr	r2, [pc, #216]	; (1b3d4 <__tzcalc_limits+0x178>)
   1b2fa:	2b01      	cmp	r3, #1
   1b2fc:	4491      	add	r9, r2
   1b2fe:	dd62      	ble.n	1b3c6 <__tzcalc_limits+0x16a>
   1b300:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
   1b304:	f1ab 0b02 	sub.w	fp, fp, #2
   1b308:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   1b30c:	eb09 0a0b 	add.w	sl, r9, fp
   1b310:	f1a9 0304 	sub.w	r3, r9, #4
   1b314:	4632      	mov	r2, r6
   1b316:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1b31a:	459a      	cmp	sl, r3
   1b31c:	440a      	add	r2, r1
   1b31e:	d1fa      	bne.n	1b316 <__tzcalc_limits+0xba>
   1b320:	f10b 0b04 	add.w	fp, fp, #4
   1b324:	4b2c      	ldr	r3, [pc, #176]	; (1b3d8 <__tzcalc_limits+0x17c>)
   1b326:	f859 900b 	ldr.w	r9, [r9, fp]
   1b32a:	1d11      	adds	r1, r2, #4
   1b32c:	fb83 a301 	smull	sl, r3, r3, r1
   1b330:	440b      	add	r3, r1
   1b332:	ea4f 7ae1 	mov.w	sl, r1, asr #31
   1b336:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
   1b33a:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
   1b33e:	6963      	ldr	r3, [r4, #20]
   1b340:	eba1 010a 	sub.w	r1, r1, sl
   1b344:	1a59      	subs	r1, r3, r1
   1b346:	6923      	ldr	r3, [r4, #16]
   1b348:	f103 33ff 	add.w	r3, r3, #4294967295
   1b34c:	bf48      	it	mi
   1b34e:	3107      	addmi	r1, #7
   1b350:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1b354:	440b      	add	r3, r1
   1b356:	454b      	cmp	r3, r9
   1b358:	db02      	blt.n	1b360 <__tzcalc_limits+0x104>
   1b35a:	3b07      	subs	r3, #7
   1b35c:	454b      	cmp	r3, r9
   1b35e:	dafc      	bge.n	1b35a <__tzcalc_limits+0xfe>
   1b360:	441a      	add	r2, r3
   1b362:	69a1      	ldr	r1, [r4, #24]
   1b364:	6a23      	ldr	r3, [r4, #32]
   1b366:	fb08 1102 	mla	r1, r8, r2, r1
   1b36a:	440b      	add	r3, r1
   1b36c:	f844 3f1c 	str.w	r3, [r4, #28]!
   1b370:	45a4      	cmp	ip, r4
   1b372:	d1b7      	bne.n	1b2e4 <__tzcalc_limits+0x88>
   1b374:	69c3      	ldr	r3, [r0, #28]
   1b376:	6b82      	ldr	r2, [r0, #56]	; 0x38
   1b378:	4293      	cmp	r3, r2
   1b37a:	bfac      	ite	ge
   1b37c:	2300      	movge	r3, #0
   1b37e:	2301      	movlt	r3, #1
   1b380:	6003      	str	r3, [r0, #0]
   1b382:	2001      	movs	r0, #1
   1b384:	b003      	add	sp, #12
   1b386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b38a:	9b01      	ldr	r3, [sp, #4]
   1b38c:	2f00      	cmp	r7, #0
   1b38e:	bf0c      	ite	eq
   1b390:	4699      	moveq	r9, r3
   1b392:	f04f 0930 	movne.w	r9, #48	; 0x30
   1b396:	e7ae      	b.n	1b2f6 <__tzcalc_limits+0x9a>
   1b398:	2000      	movs	r0, #0
   1b39a:	b003      	add	sp, #12
   1b39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3a0:	6962      	ldr	r2, [r4, #20]
   1b3a2:	18b1      	adds	r1, r6, r2
   1b3a4:	b93d      	cbnz	r5, 1b3b6 <__tzcalc_limits+0x15a>
   1b3a6:	b137      	cbz	r7, 1b3b6 <__tzcalc_limits+0x15a>
   1b3a8:	2a3b      	cmp	r2, #59	; 0x3b
   1b3aa:	bfd4      	ite	le
   1b3ac:	2200      	movle	r2, #0
   1b3ae:	2201      	movgt	r2, #1
   1b3b0:	440a      	add	r2, r1
   1b3b2:	3a01      	subs	r2, #1
   1b3b4:	e7d5      	b.n	1b362 <__tzcalc_limits+0x106>
   1b3b6:	f1be 0f00 	cmp.w	lr, #0
   1b3ba:	d0f5      	beq.n	1b3a8 <__tzcalc_limits+0x14c>
   1b3bc:	2200      	movs	r2, #0
   1b3be:	e7f7      	b.n	1b3b0 <__tzcalc_limits+0x154>
   1b3c0:	6962      	ldr	r2, [r4, #20]
   1b3c2:	4432      	add	r2, r6
   1b3c4:	e7cd      	b.n	1b362 <__tzcalc_limits+0x106>
   1b3c6:	4632      	mov	r2, r6
   1b3c8:	f04f 0b00 	mov.w	fp, #0
   1b3cc:	e7aa      	b.n	1b324 <__tzcalc_limits+0xc8>
   1b3ce:	bf00      	nop
   1b3d0:	51eb851f 	.word	0x51eb851f
   1b3d4:	00020ecc 	.word	0x00020ecc
   1b3d8:	92492493 	.word	0x92492493
   1b3dc:	00015180 	.word	0x00015180

0001b3e0 <__tz_lock>:
   1b3e0:	4801      	ldr	r0, [pc, #4]	; (1b3e8 <__tz_lock+0x8>)
   1b3e2:	f000 bb93 	b.w	1bb0c <__retarget_lock_acquire>
   1b3e6:	bf00      	nop
   1b3e8:	2000a40c 	.word	0x2000a40c

0001b3ec <__tz_unlock>:
   1b3ec:	4801      	ldr	r0, [pc, #4]	; (1b3f4 <__tz_unlock+0x8>)
   1b3ee:	f000 bb91 	b.w	1bb14 <__retarget_lock_release>
   1b3f2:	bf00      	nop
   1b3f4:	2000a40c 	.word	0x2000a40c

0001b3f8 <_tzset_unlocked>:
   1b3f8:	4b01      	ldr	r3, [pc, #4]	; (1b400 <_tzset_unlocked+0x8>)
   1b3fa:	6818      	ldr	r0, [r3, #0]
   1b3fc:	f000 b802 	b.w	1b404 <_tzset_unlocked_r>
   1b400:	200001bc 	.word	0x200001bc

0001b404 <_tzset_unlocked_r>:
   1b404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b408:	b08b      	sub	sp, #44	; 0x2c
   1b40a:	4607      	mov	r7, r0
   1b40c:	f000 fa90 	bl	1b930 <__gettzinfo>
   1b410:	49bb      	ldr	r1, [pc, #748]	; (1b700 <_tzset_unlocked_r+0x2fc>)
   1b412:	4dbc      	ldr	r5, [pc, #752]	; (1b704 <_tzset_unlocked_r+0x300>)
   1b414:	4606      	mov	r6, r0
   1b416:	4638      	mov	r0, r7
   1b418:	f000 fa82 	bl	1b920 <_getenv_r>
   1b41c:	4604      	mov	r4, r0
   1b41e:	2800      	cmp	r0, #0
   1b420:	f000 80f7 	beq.w	1b612 <_tzset_unlocked_r+0x20e>
   1b424:	6829      	ldr	r1, [r5, #0]
   1b426:	b131      	cbz	r1, 1b436 <_tzset_unlocked_r+0x32>
   1b428:	f000 fefe 	bl	1c228 <strcmp>
   1b42c:	b910      	cbnz	r0, 1b434 <_tzset_unlocked_r+0x30>
   1b42e:	b00b      	add	sp, #44	; 0x2c
   1b430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b434:	6829      	ldr	r1, [r5, #0]
   1b436:	4608      	mov	r0, r1
   1b438:	f7f8 fbe6 	bl	13c08 <free>
   1b43c:	4620      	mov	r0, r4
   1b43e:	f7ff fe9f 	bl	1b180 <strlen>
   1b442:	1c41      	adds	r1, r0, #1
   1b444:	4638      	mov	r0, r7
   1b446:	f000 fb69 	bl	1bb1c <_malloc_r>
   1b44a:	6028      	str	r0, [r5, #0]
   1b44c:	b110      	cbz	r0, 1b454 <_tzset_unlocked_r+0x50>
   1b44e:	4621      	mov	r1, r4
   1b450:	f001 f854 	bl	1c4fc <strcpy>
   1b454:	7823      	ldrb	r3, [r4, #0]
   1b456:	4aac      	ldr	r2, [pc, #688]	; (1b708 <_tzset_unlocked_r+0x304>)
   1b458:	49ac      	ldr	r1, [pc, #688]	; (1b70c <_tzset_unlocked_r+0x308>)
   1b45a:	2b3a      	cmp	r3, #58	; 0x3a
   1b45c:	bf08      	it	eq
   1b45e:	3401      	addeq	r4, #1
   1b460:	ad08      	add	r5, sp, #32
   1b462:	462b      	mov	r3, r5
   1b464:	4620      	mov	r0, r4
   1b466:	f000 fe9f 	bl	1c1a8 <siscanf>
   1b46a:	2800      	cmp	r0, #0
   1b46c:	dddf      	ble.n	1b42e <_tzset_unlocked_r+0x2a>
   1b46e:	9b08      	ldr	r3, [sp, #32]
   1b470:	5ce2      	ldrb	r2, [r4, r3]
   1b472:	2a2d      	cmp	r2, #45	; 0x2d
   1b474:	441c      	add	r4, r3
   1b476:	f000 80c8 	beq.w	1b60a <_tzset_unlocked_r+0x206>
   1b47a:	2a2b      	cmp	r2, #43	; 0x2b
   1b47c:	bf08      	it	eq
   1b47e:	3401      	addeq	r4, #1
   1b480:	f04f 0801 	mov.w	r8, #1
   1b484:	ab06      	add	r3, sp, #24
   1b486:	9302      	str	r3, [sp, #8]
   1b488:	f10d 0316 	add.w	r3, sp, #22
   1b48c:	2700      	movs	r7, #0
   1b48e:	9300      	str	r3, [sp, #0]
   1b490:	9503      	str	r5, [sp, #12]
   1b492:	9501      	str	r5, [sp, #4]
   1b494:	aa05      	add	r2, sp, #20
   1b496:	462b      	mov	r3, r5
   1b498:	499d      	ldr	r1, [pc, #628]	; (1b710 <_tzset_unlocked_r+0x30c>)
   1b49a:	f8ad 7016 	strh.w	r7, [sp, #22]
   1b49e:	4620      	mov	r0, r4
   1b4a0:	f8ad 7018 	strh.w	r7, [sp, #24]
   1b4a4:	f000 fe80 	bl	1c1a8 <siscanf>
   1b4a8:	42b8      	cmp	r0, r7
   1b4aa:	ddc0      	ble.n	1b42e <_tzset_unlocked_r+0x2a>
   1b4ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1b4b0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1b4b4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1b4b8:	9808      	ldr	r0, [sp, #32]
   1b4ba:	f8df a26c 	ldr.w	sl, [pc, #620]	; 1b728 <_tzset_unlocked_r+0x324>
   1b4be:	f8df 925c 	ldr.w	r9, [pc, #604]	; 1b71c <_tzset_unlocked_r+0x318>
   1b4c2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1b4c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1b4ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1b4ce:	fb01 3302 	mla	r3, r1, r2, r3
   1b4d2:	fb08 f303 	mul.w	r3, r8, r3
   1b4d6:	6233      	str	r3, [r6, #32]
   1b4d8:	4404      	add	r4, r0
   1b4da:	4b8b      	ldr	r3, [pc, #556]	; (1b708 <_tzset_unlocked_r+0x304>)
   1b4dc:	f8c9 3000 	str.w	r3, [r9]
   1b4e0:	4620      	mov	r0, r4
   1b4e2:	4652      	mov	r2, sl
   1b4e4:	4989      	ldr	r1, [pc, #548]	; (1b70c <_tzset_unlocked_r+0x308>)
   1b4e6:	462b      	mov	r3, r5
   1b4e8:	f000 fe5e 	bl	1c1a8 <siscanf>
   1b4ec:	42b8      	cmp	r0, r7
   1b4ee:	f340 8082 	ble.w	1b5f6 <_tzset_unlocked_r+0x1f2>
   1b4f2:	9808      	ldr	r0, [sp, #32]
   1b4f4:	f8c9 a004 	str.w	sl, [r9, #4]
   1b4f8:	5c23      	ldrb	r3, [r4, r0]
   1b4fa:	2b2d      	cmp	r3, #45	; 0x2d
   1b4fc:	4404      	add	r4, r0
   1b4fe:	f000 8095 	beq.w	1b62c <_tzset_unlocked_r+0x228>
   1b502:	2b2b      	cmp	r3, #43	; 0x2b
   1b504:	bf08      	it	eq
   1b506:	3401      	addeq	r4, #1
   1b508:	f04f 0801 	mov.w	r8, #1
   1b50c:	ab06      	add	r3, sp, #24
   1b50e:	9302      	str	r3, [sp, #8]
   1b510:	f10d 0316 	add.w	r3, sp, #22
   1b514:	2700      	movs	r7, #0
   1b516:	9300      	str	r3, [sp, #0]
   1b518:	9503      	str	r5, [sp, #12]
   1b51a:	9501      	str	r5, [sp, #4]
   1b51c:	462b      	mov	r3, r5
   1b51e:	aa05      	add	r2, sp, #20
   1b520:	497b      	ldr	r1, [pc, #492]	; (1b710 <_tzset_unlocked_r+0x30c>)
   1b522:	f8ad 7014 	strh.w	r7, [sp, #20]
   1b526:	4620      	mov	r0, r4
   1b528:	f8ad 7016 	strh.w	r7, [sp, #22]
   1b52c:	f8ad 7018 	strh.w	r7, [sp, #24]
   1b530:	9708      	str	r7, [sp, #32]
   1b532:	f000 fe39 	bl	1c1a8 <siscanf>
   1b536:	42b8      	cmp	r0, r7
   1b538:	dd7c      	ble.n	1b634 <_tzset_unlocked_r+0x230>
   1b53a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1b53e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1b542:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1b546:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1b54a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1b54e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1b552:	fb01 3302 	mla	r3, r1, r2, r3
   1b556:	fb08 f303 	mul.w	r3, r8, r3
   1b55a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1b55c:	9b08      	ldr	r3, [sp, #32]
   1b55e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 1b72c <_tzset_unlocked_r+0x328>
   1b562:	441c      	add	r4, r3
   1b564:	46b0      	mov	r8, r6
   1b566:	f04f 0a00 	mov.w	sl, #0
   1b56a:	7827      	ldrb	r7, [r4, #0]
   1b56c:	2f2c      	cmp	r7, #44	; 0x2c
   1b56e:	bf04      	itt	eq
   1b570:	7867      	ldrbeq	r7, [r4, #1]
   1b572:	3401      	addeq	r4, #1
   1b574:	2f4d      	cmp	r7, #77	; 0x4d
   1b576:	d062      	beq.n	1b63e <_tzset_unlocked_r+0x23a>
   1b578:	2f4a      	cmp	r7, #74	; 0x4a
   1b57a:	bf08      	it	eq
   1b57c:	3401      	addeq	r4, #1
   1b57e:	f04f 020a 	mov.w	r2, #10
   1b582:	a909      	add	r1, sp, #36	; 0x24
   1b584:	4620      	mov	r0, r4
   1b586:	bf18      	it	ne
   1b588:	2744      	movne	r7, #68	; 0x44
   1b58a:	f001 f91d 	bl	1c7c8 <strtoul>
   1b58e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1b592:	f8ad 001e 	strh.w	r0, [sp, #30]
   1b596:	454c      	cmp	r4, r9
   1b598:	f000 809c 	beq.w	1b6d4 <_tzset_unlocked_r+0x2d0>
   1b59c:	b280      	uxth	r0, r0
   1b59e:	f8c8 0014 	str.w	r0, [r8, #20]
   1b5a2:	f888 7008 	strb.w	r7, [r8, #8]
   1b5a6:	2400      	movs	r4, #0
   1b5a8:	2302      	movs	r3, #2
   1b5aa:	f8ad 3014 	strh.w	r3, [sp, #20]
   1b5ae:	f8ad 4016 	strh.w	r4, [sp, #22]
   1b5b2:	f8ad 4018 	strh.w	r4, [sp, #24]
   1b5b6:	9408      	str	r4, [sp, #32]
   1b5b8:	f899 3000 	ldrb.w	r3, [r9]
   1b5bc:	2b2f      	cmp	r3, #47	; 0x2f
   1b5be:	d06c      	beq.n	1b69a <_tzset_unlocked_r+0x296>
   1b5c0:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   1b5c4:	f10a 0a01 	add.w	sl, sl, #1
   1b5c8:	f1ba 0f02 	cmp.w	sl, #2
   1b5cc:	f8c8 3018 	str.w	r3, [r8, #24]
   1b5d0:	444c      	add	r4, r9
   1b5d2:	f108 081c 	add.w	r8, r8, #28
   1b5d6:	d1c8      	bne.n	1b56a <_tzset_unlocked_r+0x166>
   1b5d8:	6870      	ldr	r0, [r6, #4]
   1b5da:	f7ff fe3f 	bl	1b25c <__tzcalc_limits>
   1b5de:	6a32      	ldr	r2, [r6, #32]
   1b5e0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1b5e2:	484c      	ldr	r0, [pc, #304]	; (1b714 <_tzset_unlocked_r+0x310>)
   1b5e4:	494c      	ldr	r1, [pc, #304]	; (1b718 <_tzset_unlocked_r+0x314>)
   1b5e6:	1a9b      	subs	r3, r3, r2
   1b5e8:	bf18      	it	ne
   1b5ea:	2301      	movne	r3, #1
   1b5ec:	6003      	str	r3, [r0, #0]
   1b5ee:	600a      	str	r2, [r1, #0]
   1b5f0:	b00b      	add	sp, #44	; 0x2c
   1b5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5f6:	4948      	ldr	r1, [pc, #288]	; (1b718 <_tzset_unlocked_r+0x314>)
   1b5f8:	4a46      	ldr	r2, [pc, #280]	; (1b714 <_tzset_unlocked_r+0x310>)
   1b5fa:	6a30      	ldr	r0, [r6, #32]
   1b5fc:	f8d9 3000 	ldr.w	r3, [r9]
   1b600:	6008      	str	r0, [r1, #0]
   1b602:	6017      	str	r7, [r2, #0]
   1b604:	f8c9 3004 	str.w	r3, [r9, #4]
   1b608:	e711      	b.n	1b42e <_tzset_unlocked_r+0x2a>
   1b60a:	3401      	adds	r4, #1
   1b60c:	f04f 38ff 	mov.w	r8, #4294967295
   1b610:	e738      	b.n	1b484 <_tzset_unlocked_r+0x80>
   1b612:	4b42      	ldr	r3, [pc, #264]	; (1b71c <_tzset_unlocked_r+0x318>)
   1b614:	493f      	ldr	r1, [pc, #252]	; (1b714 <_tzset_unlocked_r+0x310>)
   1b616:	4e40      	ldr	r6, [pc, #256]	; (1b718 <_tzset_unlocked_r+0x314>)
   1b618:	4a41      	ldr	r2, [pc, #260]	; (1b720 <_tzset_unlocked_r+0x31c>)
   1b61a:	6828      	ldr	r0, [r5, #0]
   1b61c:	6034      	str	r4, [r6, #0]
   1b61e:	600c      	str	r4, [r1, #0]
   1b620:	601a      	str	r2, [r3, #0]
   1b622:	605a      	str	r2, [r3, #4]
   1b624:	f7f8 faf0 	bl	13c08 <free>
   1b628:	602c      	str	r4, [r5, #0]
   1b62a:	e700      	b.n	1b42e <_tzset_unlocked_r+0x2a>
   1b62c:	3401      	adds	r4, #1
   1b62e:	f04f 38ff 	mov.w	r8, #4294967295
   1b632:	e76b      	b.n	1b50c <_tzset_unlocked_r+0x108>
   1b634:	6a33      	ldr	r3, [r6, #32]
   1b636:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   1b63a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1b63c:	e78e      	b.n	1b55c <_tzset_unlocked_r+0x158>
   1b63e:	f10d 021e 	add.w	r2, sp, #30
   1b642:	ab07      	add	r3, sp, #28
   1b644:	9202      	str	r2, [sp, #8]
   1b646:	9300      	str	r3, [sp, #0]
   1b648:	9503      	str	r5, [sp, #12]
   1b64a:	9501      	str	r5, [sp, #4]
   1b64c:	462b      	mov	r3, r5
   1b64e:	f10d 021a 	add.w	r2, sp, #26
   1b652:	4659      	mov	r1, fp
   1b654:	4620      	mov	r0, r4
   1b656:	f000 fda7 	bl	1c1a8 <siscanf>
   1b65a:	2803      	cmp	r0, #3
   1b65c:	f47f aee7 	bne.w	1b42e <_tzset_unlocked_r+0x2a>
   1b660:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1b664:	1e5a      	subs	r2, r3, #1
   1b666:	2a0b      	cmp	r2, #11
   1b668:	f63f aee1 	bhi.w	1b42e <_tzset_unlocked_r+0x2a>
   1b66c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1b670:	1e51      	subs	r1, r2, #1
   1b672:	2904      	cmp	r1, #4
   1b674:	f63f aedb 	bhi.w	1b42e <_tzset_unlocked_r+0x2a>
   1b678:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   1b67c:	2906      	cmp	r1, #6
   1b67e:	f63f aed6 	bhi.w	1b42e <_tzset_unlocked_r+0x2a>
   1b682:	f888 7008 	strb.w	r7, [r8, #8]
   1b686:	f8c8 300c 	str.w	r3, [r8, #12]
   1b68a:	f8c8 2010 	str.w	r2, [r8, #16]
   1b68e:	f8c8 1014 	str.w	r1, [r8, #20]
   1b692:	9b08      	ldr	r3, [sp, #32]
   1b694:	eb04 0903 	add.w	r9, r4, r3
   1b698:	e785      	b.n	1b5a6 <_tzset_unlocked_r+0x1a2>
   1b69a:	ab06      	add	r3, sp, #24
   1b69c:	9302      	str	r3, [sp, #8]
   1b69e:	f10d 0316 	add.w	r3, sp, #22
   1b6a2:	9300      	str	r3, [sp, #0]
   1b6a4:	aa05      	add	r2, sp, #20
   1b6a6:	462b      	mov	r3, r5
   1b6a8:	491e      	ldr	r1, [pc, #120]	; (1b724 <_tzset_unlocked_r+0x320>)
   1b6aa:	9503      	str	r5, [sp, #12]
   1b6ac:	9501      	str	r5, [sp, #4]
   1b6ae:	4648      	mov	r0, r9
   1b6b0:	f000 fd7a 	bl	1c1a8 <siscanf>
   1b6b4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1b6b8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1b6bc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1b6c0:	9c08      	ldr	r4, [sp, #32]
   1b6c2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   1b6c6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1b6ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1b6ce:	fb01 2303 	mla	r3, r1, r3, r2
   1b6d2:	e777      	b.n	1b5c4 <_tzset_unlocked_r+0x1c0>
   1b6d4:	f1ba 0f00 	cmp.w	sl, #0
   1b6d8:	d009      	beq.n	1b6ee <_tzset_unlocked_r+0x2ea>
   1b6da:	224d      	movs	r2, #77	; 0x4d
   1b6dc:	230b      	movs	r3, #11
   1b6de:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
   1b6e2:	62b3      	str	r3, [r6, #40]	; 0x28
   1b6e4:	2201      	movs	r2, #1
   1b6e6:	2300      	movs	r3, #0
   1b6e8:	62f2      	str	r2, [r6, #44]	; 0x2c
   1b6ea:	6333      	str	r3, [r6, #48]	; 0x30
   1b6ec:	e75b      	b.n	1b5a6 <_tzset_unlocked_r+0x1a2>
   1b6ee:	234d      	movs	r3, #77	; 0x4d
   1b6f0:	2203      	movs	r2, #3
   1b6f2:	7233      	strb	r3, [r6, #8]
   1b6f4:	2302      	movs	r3, #2
   1b6f6:	f8c6 a014 	str.w	sl, [r6, #20]
   1b6fa:	60f2      	str	r2, [r6, #12]
   1b6fc:	6133      	str	r3, [r6, #16]
   1b6fe:	e752      	b.n	1b5a6 <_tzset_unlocked_r+0x1a2>
   1b700:	00020f2c 	.word	0x00020f2c
   1b704:	2000a0e8 	.word	0x2000a0e8
   1b708:	2000a0dc 	.word	0x2000a0dc
   1b70c:	00020f34 	.word	0x00020f34
   1b710:	00020f44 	.word	0x00020f44
   1b714:	2000a0ec 	.word	0x2000a0ec
   1b718:	2000a0f0 	.word	0x2000a0f0
   1b71c:	200005e8 	.word	0x200005e8
   1b720:	00020f30 	.word	0x00020f30
   1b724:	00020f6c 	.word	0x00020f6c
   1b728:	2000a0d0 	.word	0x2000a0d0
   1b72c:	00020f58 	.word	0x00020f58

0001b730 <__register_exitproc>:
   1b730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b734:	4d2c      	ldr	r5, [pc, #176]	; (1b7e8 <__register_exitproc+0xb8>)
   1b736:	4606      	mov	r6, r0
   1b738:	6828      	ldr	r0, [r5, #0]
   1b73a:	4698      	mov	r8, r3
   1b73c:	460f      	mov	r7, r1
   1b73e:	4691      	mov	r9, r2
   1b740:	f000 f9e6 	bl	1bb10 <__retarget_lock_acquire_recursive>
   1b744:	4b29      	ldr	r3, [pc, #164]	; (1b7ec <__register_exitproc+0xbc>)
   1b746:	681c      	ldr	r4, [r3, #0]
   1b748:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1b74c:	2b00      	cmp	r3, #0
   1b74e:	d03e      	beq.n	1b7ce <__register_exitproc+0x9e>
   1b750:	685a      	ldr	r2, [r3, #4]
   1b752:	2a1f      	cmp	r2, #31
   1b754:	dc1c      	bgt.n	1b790 <__register_exitproc+0x60>
   1b756:	f102 0e01 	add.w	lr, r2, #1
   1b75a:	b176      	cbz	r6, 1b77a <__register_exitproc+0x4a>
   1b75c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1b760:	2401      	movs	r4, #1
   1b762:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1b766:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1b76a:	4094      	lsls	r4, r2
   1b76c:	4320      	orrs	r0, r4
   1b76e:	2e02      	cmp	r6, #2
   1b770:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1b774:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1b778:	d023      	beq.n	1b7c2 <__register_exitproc+0x92>
   1b77a:	3202      	adds	r2, #2
   1b77c:	f8c3 e004 	str.w	lr, [r3, #4]
   1b780:	6828      	ldr	r0, [r5, #0]
   1b782:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1b786:	f000 f9c7 	bl	1bb18 <__retarget_lock_release_recursive>
   1b78a:	2000      	movs	r0, #0
   1b78c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b790:	4b17      	ldr	r3, [pc, #92]	; (1b7f0 <__register_exitproc+0xc0>)
   1b792:	b30b      	cbz	r3, 1b7d8 <__register_exitproc+0xa8>
   1b794:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1b798:	f7f8 fa2c 	bl	13bf4 <malloc>
   1b79c:	4603      	mov	r3, r0
   1b79e:	b1d8      	cbz	r0, 1b7d8 <__register_exitproc+0xa8>
   1b7a0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1b7a4:	6002      	str	r2, [r0, #0]
   1b7a6:	2100      	movs	r1, #0
   1b7a8:	6041      	str	r1, [r0, #4]
   1b7aa:	460a      	mov	r2, r1
   1b7ac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1b7b0:	f04f 0e01 	mov.w	lr, #1
   1b7b4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1b7b8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1b7bc:	2e00      	cmp	r6, #0
   1b7be:	d0dc      	beq.n	1b77a <__register_exitproc+0x4a>
   1b7c0:	e7cc      	b.n	1b75c <__register_exitproc+0x2c>
   1b7c2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1b7c6:	430c      	orrs	r4, r1
   1b7c8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1b7cc:	e7d5      	b.n	1b77a <__register_exitproc+0x4a>
   1b7ce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1b7d2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1b7d6:	e7bb      	b.n	1b750 <__register_exitproc+0x20>
   1b7d8:	6828      	ldr	r0, [r5, #0]
   1b7da:	f000 f99d 	bl	1bb18 <__retarget_lock_release_recursive>
   1b7de:	f04f 30ff 	mov.w	r0, #4294967295
   1b7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b7e6:	bf00      	nop
   1b7e8:	200005f0 	.word	0x200005f0
   1b7ec:	00020ec8 	.word	0x00020ec8
   1b7f0:	00013bf5 	.word	0x00013bf5

0001b7f4 <register_fini>:
   1b7f4:	4b02      	ldr	r3, [pc, #8]	; (1b800 <register_fini+0xc>)
   1b7f6:	b113      	cbz	r3, 1b7fe <register_fini+0xa>
   1b7f8:	4802      	ldr	r0, [pc, #8]	; (1b804 <register_fini+0x10>)
   1b7fa:	f000 b833 	b.w	1b864 <atexit>
   1b7fe:	4770      	bx	lr
   1b800:	00000000 	.word	0x00000000
   1b804:	0001b871 	.word	0x0001b871

0001b808 <asctime>:
   1b808:	4b02      	ldr	r3, [pc, #8]	; (1b814 <asctime+0xc>)
   1b80a:	6819      	ldr	r1, [r3, #0]
   1b80c:	3160      	adds	r1, #96	; 0x60
   1b80e:	f000 b803 	b.w	1b818 <asctime_r>
   1b812:	bf00      	nop
   1b814:	200001bc 	.word	0x200001bc

0001b818 <asctime_r>:
   1b818:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b81a:	6946      	ldr	r6, [r0, #20]
   1b81c:	6807      	ldr	r7, [r0, #0]
   1b81e:	6905      	ldr	r5, [r0, #16]
   1b820:	6984      	ldr	r4, [r0, #24]
   1b822:	4b0d      	ldr	r3, [pc, #52]	; (1b858 <asctime_r+0x40>)
   1b824:	4a0d      	ldr	r2, [pc, #52]	; (1b85c <asctime_r+0x44>)
   1b826:	b087      	sub	sp, #28
   1b828:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1b82c:	9703      	str	r7, [sp, #12]
   1b82e:	460f      	mov	r7, r1
   1b830:	6841      	ldr	r1, [r0, #4]
   1b832:	9604      	str	r6, [sp, #16]
   1b834:	6886      	ldr	r6, [r0, #8]
   1b836:	68c0      	ldr	r0, [r0, #12]
   1b838:	9102      	str	r1, [sp, #8]
   1b83a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1b83e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b842:	e88d 0041 	stmia.w	sp, {r0, r6}
   1b846:	442b      	add	r3, r5
   1b848:	4422      	add	r2, r4
   1b84a:	4638      	mov	r0, r7
   1b84c:	4904      	ldr	r1, [pc, #16]	; (1b860 <asctime_r+0x48>)
   1b84e:	f000 fc85 	bl	1c15c <siprintf>
   1b852:	4638      	mov	r0, r7
   1b854:	b007      	add	sp, #28
   1b856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b858:	00020fb8 	.word	0x00020fb8
   1b85c:	00020fa0 	.word	0x00020fa0
   1b860:	00020f80 	.word	0x00020f80

0001b864 <atexit>:
   1b864:	2300      	movs	r3, #0
   1b866:	4601      	mov	r1, r0
   1b868:	461a      	mov	r2, r3
   1b86a:	4618      	mov	r0, r3
   1b86c:	f7ff bf60 	b.w	1b730 <__register_exitproc>

0001b870 <__libc_fini_array>:
   1b870:	b538      	push	{r3, r4, r5, lr}
   1b872:	4c0a      	ldr	r4, [pc, #40]	; (1b89c <__libc_fini_array+0x2c>)
   1b874:	4d0a      	ldr	r5, [pc, #40]	; (1b8a0 <__libc_fini_array+0x30>)
   1b876:	1b64      	subs	r4, r4, r5
   1b878:	10a4      	asrs	r4, r4, #2
   1b87a:	d00a      	beq.n	1b892 <__libc_fini_array+0x22>
   1b87c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1b880:	3b01      	subs	r3, #1
   1b882:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1b886:	3c01      	subs	r4, #1
   1b888:	f855 3904 	ldr.w	r3, [r5], #-4
   1b88c:	4798      	blx	r3
   1b88e:	2c00      	cmp	r4, #0
   1b890:	d1f9      	bne.n	1b886 <__libc_fini_array+0x16>
   1b892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b896:	f005 bc9b 	b.w	211d0 <_fini>
   1b89a:	bf00      	nop
   1b89c:	000211e0 	.word	0x000211e0
   1b8a0:	000211dc 	.word	0x000211dc

0001b8a4 <_findenv_r>:
   1b8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b8a8:	4f1c      	ldr	r7, [pc, #112]	; (1b91c <_findenv_r+0x78>)
   1b8aa:	460e      	mov	r6, r1
   1b8ac:	4691      	mov	r9, r2
   1b8ae:	4680      	mov	r8, r0
   1b8b0:	f002 faf2 	bl	1de98 <__env_lock>
   1b8b4:	683d      	ldr	r5, [r7, #0]
   1b8b6:	b1f5      	cbz	r5, 1b8f6 <_findenv_r+0x52>
   1b8b8:	7834      	ldrb	r4, [r6, #0]
   1b8ba:	b15c      	cbz	r4, 1b8d4 <_findenv_r+0x30>
   1b8bc:	2c3d      	cmp	r4, #61	; 0x3d
   1b8be:	bf18      	it	ne
   1b8c0:	4634      	movne	r4, r6
   1b8c2:	d102      	bne.n	1b8ca <_findenv_r+0x26>
   1b8c4:	e017      	b.n	1b8f6 <_findenv_r+0x52>
   1b8c6:	2b3d      	cmp	r3, #61	; 0x3d
   1b8c8:	d015      	beq.n	1b8f6 <_findenv_r+0x52>
   1b8ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1b8ce:	2b00      	cmp	r3, #0
   1b8d0:	d1f9      	bne.n	1b8c6 <_findenv_r+0x22>
   1b8d2:	1ba4      	subs	r4, r4, r6
   1b8d4:	6828      	ldr	r0, [r5, #0]
   1b8d6:	b170      	cbz	r0, 1b8f6 <_findenv_r+0x52>
   1b8d8:	4622      	mov	r2, r4
   1b8da:	4631      	mov	r1, r6
   1b8dc:	f000 fe6c 	bl	1c5b8 <strncmp>
   1b8e0:	b928      	cbnz	r0, 1b8ee <_findenv_r+0x4a>
   1b8e2:	6828      	ldr	r0, [r5, #0]
   1b8e4:	5d03      	ldrb	r3, [r0, r4]
   1b8e6:	2b3d      	cmp	r3, #61	; 0x3d
   1b8e8:	eb00 0a04 	add.w	sl, r0, r4
   1b8ec:	d009      	beq.n	1b902 <_findenv_r+0x5e>
   1b8ee:	f855 0f04 	ldr.w	r0, [r5, #4]!
   1b8f2:	2800      	cmp	r0, #0
   1b8f4:	d1f0      	bne.n	1b8d8 <_findenv_r+0x34>
   1b8f6:	4640      	mov	r0, r8
   1b8f8:	f002 fad4 	bl	1dea4 <__env_unlock>
   1b8fc:	2000      	movs	r0, #0
   1b8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b902:	683b      	ldr	r3, [r7, #0]
   1b904:	1aed      	subs	r5, r5, r3
   1b906:	10ad      	asrs	r5, r5, #2
   1b908:	4640      	mov	r0, r8
   1b90a:	f8c9 5000 	str.w	r5, [r9]
   1b90e:	f002 fac9 	bl	1dea4 <__env_unlock>
   1b912:	f10a 0001 	add.w	r0, sl, #1
   1b916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b91a:	bf00      	nop
   1b91c:	20000a44 	.word	0x20000a44

0001b920 <_getenv_r>:
   1b920:	b500      	push	{lr}
   1b922:	b083      	sub	sp, #12
   1b924:	aa01      	add	r2, sp, #4
   1b926:	f7ff ffbd 	bl	1b8a4 <_findenv_r>
   1b92a:	b003      	add	sp, #12
   1b92c:	f85d fb04 	ldr.w	pc, [sp], #4

0001b930 <__gettzinfo>:
   1b930:	4800      	ldr	r0, [pc, #0]	; (1b934 <__gettzinfo+0x4>)
   1b932:	4770      	bx	lr
   1b934:	200005f4 	.word	0x200005f4

0001b938 <gmtime_r>:
   1b938:	6800      	ldr	r0, [r0, #0]
   1b93a:	4b65      	ldr	r3, [pc, #404]	; (1bad0 <gmtime_r+0x198>)
   1b93c:	fb83 2300 	smull	r2, r3, r3, r0
   1b940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b944:	4403      	add	r3, r0
   1b946:	4d63      	ldr	r5, [pc, #396]	; (1bad4 <gmtime_r+0x19c>)
   1b948:	17c2      	asrs	r2, r0, #31
   1b94a:	ebc2 4323 	rsb	r3, r2, r3, asr #16
   1b94e:	fb05 0513 	mls	r5, r5, r3, r0
   1b952:	2d00      	cmp	r5, #0
   1b954:	f2c0 80b3 	blt.w	1babe <gmtime_r+0x186>
   1b958:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1b95c:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
   1b960:	4e5d      	ldr	r6, [pc, #372]	; (1bad8 <gmtime_r+0x1a0>)
   1b962:	485e      	ldr	r0, [pc, #376]	; (1badc <gmtime_r+0x1a4>)
   1b964:	4a5e      	ldr	r2, [pc, #376]	; (1bae0 <gmtime_r+0x1a8>)
   1b966:	4c5f      	ldr	r4, [pc, #380]	; (1bae4 <gmtime_r+0x1ac>)
   1b968:	f8df c18c 	ldr.w	ip, [pc, #396]	; 1baf8 <gmtime_r+0x1c0>
   1b96c:	f8df e18c 	ldr.w	lr, [pc, #396]	; 1bafc <gmtime_r+0x1c4>
   1b970:	fb86 7603 	smull	r7, r6, r6, r3
   1b974:	17df      	asrs	r7, r3, #31
   1b976:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
   1b97a:	fb00 3006 	mla	r0, r0, r6, r3
   1b97e:	0887      	lsrs	r7, r0, #2
   1b980:	fba2 8207 	umull	r8, r2, r2, r7
   1b984:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
   1b988:	fba4 8707 	umull	r8, r7, r4, r7
   1b98c:	ea4f 1810 	mov.w	r8, r0, lsr #4
   1b990:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
   1b994:	fbac c708 	umull	ip, r7, ip, r8
   1b998:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
   1b99c:	f8df c160 	ldr.w	ip, [pc, #352]	; 1bb00 <gmtime_r+0x1c8>
   1b9a0:	4f51      	ldr	r7, [pc, #324]	; (1bae8 <gmtime_r+0x1b0>)
   1b9a2:	fbae 8e02 	umull	r8, lr, lr, r2
   1b9a6:	fbac 9c02 	umull	r9, ip, ip, r2
   1b9aa:	eba2 080e 	sub.w	r8, r2, lr
   1b9ae:	0892      	lsrs	r2, r2, #2
   1b9b0:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
   1b9b4:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
   1b9b8:	fba4 4202 	umull	r4, r2, r4, r2
   1b9bc:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
   1b9c0:	ea4f 241e 	mov.w	r4, lr, lsr #8
   1b9c4:	f240 106d 	movw	r0, #365	; 0x16d
   1b9c8:	fb00 2214 	mls	r2, r0, r4, r2
   1b9cc:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1bb04 <gmtime_r+0x1cc>
   1b9d0:	fb87 0e05 	smull	r0, lr, r7, r5
   1b9d4:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1b9d8:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1b9dc:	44ae      	add	lr, r5
   1b9de:	3002      	adds	r0, #2
   1b9e0:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
   1b9e4:	4f41      	ldr	r7, [pc, #260]	; (1baec <gmtime_r+0x1b4>)
   1b9e6:	f8c1 e008 	str.w	lr, [r1, #8]
   1b9ea:	f103 0c03 	add.w	ip, r3, #3
   1b9ee:	fba8 3000 	umull	r3, r0, r8, r0
   1b9f2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   1b9f6:	fb03 551e 	mls	r5, r3, lr, r5
   1b9fa:	4b3d      	ldr	r3, [pc, #244]	; (1baf0 <gmtime_r+0x1b8>)
   1b9fc:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1bb08 <gmtime_r+0x1d0>
   1ba00:	fb87 e705 	smull	lr, r7, r7, r5
   1ba04:	fb83 390c 	smull	r3, r9, r3, ip
   1ba08:	197b      	adds	r3, r7, r5
   1ba0a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   1ba0e:	fb07 4606 	mla	r6, r7, r6, r4
   1ba12:	17ef      	asrs	r7, r5, #31
   1ba14:	44e1      	add	r9, ip
   1ba16:	ebc7 1363 	rsb	r3, r7, r3, asr #5
   1ba1a:	ea4f 77ec 	mov.w	r7, ip, asr #31
   1ba1e:	09c0      	lsrs	r0, r0, #7
   1ba20:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
   1ba24:	2809      	cmp	r0, #9
   1ba26:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
   1ba2a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
   1ba2e:	ebac 0707 	sub.w	r7, ip, r7
   1ba32:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
   1ba36:	bf8c      	ite	hi
   1ba38:	f06f 0c09 	mvnhi.w	ip, #9
   1ba3c:	f04f 0c02 	movls.w	ip, #2
   1ba40:	4460      	add	r0, ip
   1ba42:	f10e 0e02 	add.w	lr, lr, #2
   1ba46:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
   1ba4a:	fba8 8e0e 	umull	r8, lr, r8, lr
   1ba4e:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
   1ba52:	f102 0801 	add.w	r8, r2, #1
   1ba56:	2801      	cmp	r0, #1
   1ba58:	bf98      	it	ls
   1ba5a:	3601      	addls	r6, #1
   1ba5c:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
   1ba60:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
   1ba64:	604b      	str	r3, [r1, #4]
   1ba66:	600d      	str	r5, [r1, #0]
   1ba68:	618f      	str	r7, [r1, #24]
   1ba6a:	d225      	bcs.n	1bab8 <gmtime_r+0x180>
   1ba6c:	07a3      	lsls	r3, r4, #30
   1ba6e:	d018      	beq.n	1baa2 <gmtime_r+0x16a>
   1ba70:	4b20      	ldr	r3, [pc, #128]	; (1baf4 <gmtime_r+0x1bc>)
   1ba72:	fba3 5304 	umull	r5, r3, r3, r4
   1ba76:	09db      	lsrs	r3, r3, #7
   1ba78:	f44f 75c8 	mov.w	r5, #400	; 0x190
   1ba7c:	fb05 4413 	mls	r4, r5, r3, r4
   1ba80:	fab4 f484 	clz	r4, r4
   1ba84:	0964      	lsrs	r4, r4, #5
   1ba86:	323b      	adds	r2, #59	; 0x3b
   1ba88:	4422      	add	r2, r4
   1ba8a:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   1ba8e:	2300      	movs	r3, #0
   1ba90:	6108      	str	r0, [r1, #16]
   1ba92:	614e      	str	r6, [r1, #20]
   1ba94:	61ca      	str	r2, [r1, #28]
   1ba96:	f8c1 e00c 	str.w	lr, [r1, #12]
   1ba9a:	620b      	str	r3, [r1, #32]
   1ba9c:	4608      	mov	r0, r1
   1ba9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1baa2:	4b14      	ldr	r3, [pc, #80]	; (1baf4 <gmtime_r+0x1bc>)
   1baa4:	fba3 5304 	umull	r5, r3, r3, r4
   1baa8:	095b      	lsrs	r3, r3, #5
   1baaa:	2564      	movs	r5, #100	; 0x64
   1baac:	fb05 4313 	mls	r3, r5, r3, r4
   1bab0:	2b00      	cmp	r3, #0
   1bab2:	d0dd      	beq.n	1ba70 <gmtime_r+0x138>
   1bab4:	2401      	movs	r4, #1
   1bab6:	e7e6      	b.n	1ba86 <gmtime_r+0x14e>
   1bab8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
   1babc:	e7e5      	b.n	1ba8a <gmtime_r+0x152>
   1babe:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
   1bac2:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1bac6:	f505 75c0 	add.w	r5, r5, #384	; 0x180
   1baca:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
   1bace:	e747      	b.n	1b960 <gmtime_r+0x28>
   1bad0:	c22e4507 	.word	0xc22e4507
   1bad4:	00015180 	.word	0x00015180
   1bad8:	396b06bd 	.word	0x396b06bd
   1badc:	fffdc54f 	.word	0xfffdc54f
   1bae0:	396b207f 	.word	0x396b207f
   1bae4:	59c67cd9 	.word	0x59c67cd9
   1bae8:	91a2b3c5 	.word	0x91a2b3c5
   1baec:	88888889 	.word	0x88888889
   1baf0:	92492493 	.word	0x92492493
   1baf4:	51eb851f 	.word	0x51eb851f
   1baf8:	0072d641 	.word	0x0072d641
   1bafc:	6719f361 	.word	0x6719f361
   1bb00:	e5d32b1f 	.word	0xe5d32b1f
   1bb04:	d62b80d7 	.word	0xd62b80d7
   1bb08:	cccccccd 	.word	0xcccccccd

0001bb0c <__retarget_lock_acquire>:
   1bb0c:	4770      	bx	lr
   1bb0e:	bf00      	nop

0001bb10 <__retarget_lock_acquire_recursive>:
   1bb10:	4770      	bx	lr
   1bb12:	bf00      	nop

0001bb14 <__retarget_lock_release>:
   1bb14:	4770      	bx	lr
   1bb16:	bf00      	nop

0001bb18 <__retarget_lock_release_recursive>:
   1bb18:	4770      	bx	lr
   1bb1a:	bf00      	nop

0001bb1c <_malloc_r>:
   1bb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb20:	f101 060b 	add.w	r6, r1, #11
   1bb24:	2e16      	cmp	r6, #22
   1bb26:	b083      	sub	sp, #12
   1bb28:	4605      	mov	r5, r0
   1bb2a:	f240 809e 	bls.w	1bc6a <_malloc_r+0x14e>
   1bb2e:	f036 0607 	bics.w	r6, r6, #7
   1bb32:	f100 80bd 	bmi.w	1bcb0 <_malloc_r+0x194>
   1bb36:	42b1      	cmp	r1, r6
   1bb38:	f200 80ba 	bhi.w	1bcb0 <_malloc_r+0x194>
   1bb3c:	f000 faf0 	bl	1c120 <__malloc_lock>
   1bb40:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1bb44:	f0c0 8293 	bcc.w	1c06e <_malloc_r+0x552>
   1bb48:	0a73      	lsrs	r3, r6, #9
   1bb4a:	f000 80b8 	beq.w	1bcbe <_malloc_r+0x1a2>
   1bb4e:	2b04      	cmp	r3, #4
   1bb50:	f200 8179 	bhi.w	1be46 <_malloc_r+0x32a>
   1bb54:	09b3      	lsrs	r3, r6, #6
   1bb56:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1bb5a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1bb5e:	00c3      	lsls	r3, r0, #3
   1bb60:	4fbf      	ldr	r7, [pc, #764]	; (1be60 <_malloc_r+0x344>)
   1bb62:	443b      	add	r3, r7
   1bb64:	f1a3 0108 	sub.w	r1, r3, #8
   1bb68:	685c      	ldr	r4, [r3, #4]
   1bb6a:	42a1      	cmp	r1, r4
   1bb6c:	d106      	bne.n	1bb7c <_malloc_r+0x60>
   1bb6e:	e00c      	b.n	1bb8a <_malloc_r+0x6e>
   1bb70:	2a00      	cmp	r2, #0
   1bb72:	f280 80aa 	bge.w	1bcca <_malloc_r+0x1ae>
   1bb76:	68e4      	ldr	r4, [r4, #12]
   1bb78:	42a1      	cmp	r1, r4
   1bb7a:	d006      	beq.n	1bb8a <_malloc_r+0x6e>
   1bb7c:	6863      	ldr	r3, [r4, #4]
   1bb7e:	f023 0303 	bic.w	r3, r3, #3
   1bb82:	1b9a      	subs	r2, r3, r6
   1bb84:	2a0f      	cmp	r2, #15
   1bb86:	ddf3      	ble.n	1bb70 <_malloc_r+0x54>
   1bb88:	4670      	mov	r0, lr
   1bb8a:	693c      	ldr	r4, [r7, #16]
   1bb8c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1be74 <_malloc_r+0x358>
   1bb90:	4574      	cmp	r4, lr
   1bb92:	f000 81ab 	beq.w	1beec <_malloc_r+0x3d0>
   1bb96:	6863      	ldr	r3, [r4, #4]
   1bb98:	f023 0303 	bic.w	r3, r3, #3
   1bb9c:	1b9a      	subs	r2, r3, r6
   1bb9e:	2a0f      	cmp	r2, #15
   1bba0:	f300 8190 	bgt.w	1bec4 <_malloc_r+0x3a8>
   1bba4:	2a00      	cmp	r2, #0
   1bba6:	f8c7 e014 	str.w	lr, [r7, #20]
   1bbaa:	f8c7 e010 	str.w	lr, [r7, #16]
   1bbae:	f280 809d 	bge.w	1bcec <_malloc_r+0x1d0>
   1bbb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1bbb6:	f080 8161 	bcs.w	1be7c <_malloc_r+0x360>
   1bbba:	08db      	lsrs	r3, r3, #3
   1bbbc:	f103 0c01 	add.w	ip, r3, #1
   1bbc0:	1099      	asrs	r1, r3, #2
   1bbc2:	687a      	ldr	r2, [r7, #4]
   1bbc4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1bbc8:	f8c4 8008 	str.w	r8, [r4, #8]
   1bbcc:	2301      	movs	r3, #1
   1bbce:	408b      	lsls	r3, r1
   1bbd0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1bbd4:	4313      	orrs	r3, r2
   1bbd6:	3908      	subs	r1, #8
   1bbd8:	60e1      	str	r1, [r4, #12]
   1bbda:	607b      	str	r3, [r7, #4]
   1bbdc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1bbe0:	f8c8 400c 	str.w	r4, [r8, #12]
   1bbe4:	1082      	asrs	r2, r0, #2
   1bbe6:	2401      	movs	r4, #1
   1bbe8:	4094      	lsls	r4, r2
   1bbea:	429c      	cmp	r4, r3
   1bbec:	f200 808b 	bhi.w	1bd06 <_malloc_r+0x1ea>
   1bbf0:	421c      	tst	r4, r3
   1bbf2:	d106      	bne.n	1bc02 <_malloc_r+0xe6>
   1bbf4:	f020 0003 	bic.w	r0, r0, #3
   1bbf8:	0064      	lsls	r4, r4, #1
   1bbfa:	421c      	tst	r4, r3
   1bbfc:	f100 0004 	add.w	r0, r0, #4
   1bc00:	d0fa      	beq.n	1bbf8 <_malloc_r+0xdc>
   1bc02:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1bc06:	46cc      	mov	ip, r9
   1bc08:	4680      	mov	r8, r0
   1bc0a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1bc0e:	459c      	cmp	ip, r3
   1bc10:	d107      	bne.n	1bc22 <_malloc_r+0x106>
   1bc12:	e16d      	b.n	1bef0 <_malloc_r+0x3d4>
   1bc14:	2a00      	cmp	r2, #0
   1bc16:	f280 817b 	bge.w	1bf10 <_malloc_r+0x3f4>
   1bc1a:	68db      	ldr	r3, [r3, #12]
   1bc1c:	459c      	cmp	ip, r3
   1bc1e:	f000 8167 	beq.w	1bef0 <_malloc_r+0x3d4>
   1bc22:	6859      	ldr	r1, [r3, #4]
   1bc24:	f021 0103 	bic.w	r1, r1, #3
   1bc28:	1b8a      	subs	r2, r1, r6
   1bc2a:	2a0f      	cmp	r2, #15
   1bc2c:	ddf2      	ble.n	1bc14 <_malloc_r+0xf8>
   1bc2e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1bc32:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1bc36:	9300      	str	r3, [sp, #0]
   1bc38:	199c      	adds	r4, r3, r6
   1bc3a:	4628      	mov	r0, r5
   1bc3c:	f046 0601 	orr.w	r6, r6, #1
   1bc40:	f042 0501 	orr.w	r5, r2, #1
   1bc44:	605e      	str	r6, [r3, #4]
   1bc46:	f8c8 c00c 	str.w	ip, [r8, #12]
   1bc4a:	f8cc 8008 	str.w	r8, [ip, #8]
   1bc4e:	617c      	str	r4, [r7, #20]
   1bc50:	613c      	str	r4, [r7, #16]
   1bc52:	f8c4 e00c 	str.w	lr, [r4, #12]
   1bc56:	f8c4 e008 	str.w	lr, [r4, #8]
   1bc5a:	6065      	str	r5, [r4, #4]
   1bc5c:	505a      	str	r2, [r3, r1]
   1bc5e:	f000 fa65 	bl	1c12c <__malloc_unlock>
   1bc62:	9b00      	ldr	r3, [sp, #0]
   1bc64:	f103 0408 	add.w	r4, r3, #8
   1bc68:	e01e      	b.n	1bca8 <_malloc_r+0x18c>
   1bc6a:	2910      	cmp	r1, #16
   1bc6c:	d820      	bhi.n	1bcb0 <_malloc_r+0x194>
   1bc6e:	f000 fa57 	bl	1c120 <__malloc_lock>
   1bc72:	2610      	movs	r6, #16
   1bc74:	2318      	movs	r3, #24
   1bc76:	2002      	movs	r0, #2
   1bc78:	4f79      	ldr	r7, [pc, #484]	; (1be60 <_malloc_r+0x344>)
   1bc7a:	443b      	add	r3, r7
   1bc7c:	f1a3 0208 	sub.w	r2, r3, #8
   1bc80:	685c      	ldr	r4, [r3, #4]
   1bc82:	4294      	cmp	r4, r2
   1bc84:	f000 813d 	beq.w	1bf02 <_malloc_r+0x3e6>
   1bc88:	6863      	ldr	r3, [r4, #4]
   1bc8a:	68e1      	ldr	r1, [r4, #12]
   1bc8c:	68a6      	ldr	r6, [r4, #8]
   1bc8e:	f023 0303 	bic.w	r3, r3, #3
   1bc92:	4423      	add	r3, r4
   1bc94:	4628      	mov	r0, r5
   1bc96:	685a      	ldr	r2, [r3, #4]
   1bc98:	60f1      	str	r1, [r6, #12]
   1bc9a:	f042 0201 	orr.w	r2, r2, #1
   1bc9e:	608e      	str	r6, [r1, #8]
   1bca0:	605a      	str	r2, [r3, #4]
   1bca2:	f000 fa43 	bl	1c12c <__malloc_unlock>
   1bca6:	3408      	adds	r4, #8
   1bca8:	4620      	mov	r0, r4
   1bcaa:	b003      	add	sp, #12
   1bcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcb0:	2400      	movs	r4, #0
   1bcb2:	230c      	movs	r3, #12
   1bcb4:	4620      	mov	r0, r4
   1bcb6:	602b      	str	r3, [r5, #0]
   1bcb8:	b003      	add	sp, #12
   1bcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcbe:	2040      	movs	r0, #64	; 0x40
   1bcc0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1bcc4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1bcc8:	e74a      	b.n	1bb60 <_malloc_r+0x44>
   1bcca:	4423      	add	r3, r4
   1bccc:	68e1      	ldr	r1, [r4, #12]
   1bcce:	685a      	ldr	r2, [r3, #4]
   1bcd0:	68a6      	ldr	r6, [r4, #8]
   1bcd2:	f042 0201 	orr.w	r2, r2, #1
   1bcd6:	60f1      	str	r1, [r6, #12]
   1bcd8:	4628      	mov	r0, r5
   1bcda:	608e      	str	r6, [r1, #8]
   1bcdc:	605a      	str	r2, [r3, #4]
   1bcde:	f000 fa25 	bl	1c12c <__malloc_unlock>
   1bce2:	3408      	adds	r4, #8
   1bce4:	4620      	mov	r0, r4
   1bce6:	b003      	add	sp, #12
   1bce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcec:	4423      	add	r3, r4
   1bcee:	4628      	mov	r0, r5
   1bcf0:	685a      	ldr	r2, [r3, #4]
   1bcf2:	f042 0201 	orr.w	r2, r2, #1
   1bcf6:	605a      	str	r2, [r3, #4]
   1bcf8:	f000 fa18 	bl	1c12c <__malloc_unlock>
   1bcfc:	3408      	adds	r4, #8
   1bcfe:	4620      	mov	r0, r4
   1bd00:	b003      	add	sp, #12
   1bd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd06:	68bc      	ldr	r4, [r7, #8]
   1bd08:	6863      	ldr	r3, [r4, #4]
   1bd0a:	f023 0803 	bic.w	r8, r3, #3
   1bd0e:	45b0      	cmp	r8, r6
   1bd10:	d304      	bcc.n	1bd1c <_malloc_r+0x200>
   1bd12:	eba8 0306 	sub.w	r3, r8, r6
   1bd16:	2b0f      	cmp	r3, #15
   1bd18:	f300 8085 	bgt.w	1be26 <_malloc_r+0x30a>
   1bd1c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1be78 <_malloc_r+0x35c>
   1bd20:	4b50      	ldr	r3, [pc, #320]	; (1be64 <_malloc_r+0x348>)
   1bd22:	f8d9 2000 	ldr.w	r2, [r9]
   1bd26:	681b      	ldr	r3, [r3, #0]
   1bd28:	3201      	adds	r2, #1
   1bd2a:	4433      	add	r3, r6
   1bd2c:	eb04 0a08 	add.w	sl, r4, r8
   1bd30:	f000 8155 	beq.w	1bfde <_malloc_r+0x4c2>
   1bd34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1bd38:	330f      	adds	r3, #15
   1bd3a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1bd3e:	f02b 0b0f 	bic.w	fp, fp, #15
   1bd42:	4659      	mov	r1, fp
   1bd44:	4628      	mov	r0, r5
   1bd46:	f000 f9f7 	bl	1c138 <_sbrk_r>
   1bd4a:	1c41      	adds	r1, r0, #1
   1bd4c:	4602      	mov	r2, r0
   1bd4e:	f000 80fc 	beq.w	1bf4a <_malloc_r+0x42e>
   1bd52:	4582      	cmp	sl, r0
   1bd54:	f200 80f7 	bhi.w	1bf46 <_malloc_r+0x42a>
   1bd58:	4b43      	ldr	r3, [pc, #268]	; (1be68 <_malloc_r+0x34c>)
   1bd5a:	6819      	ldr	r1, [r3, #0]
   1bd5c:	4459      	add	r1, fp
   1bd5e:	6019      	str	r1, [r3, #0]
   1bd60:	f000 814d 	beq.w	1bffe <_malloc_r+0x4e2>
   1bd64:	f8d9 0000 	ldr.w	r0, [r9]
   1bd68:	3001      	adds	r0, #1
   1bd6a:	bf1b      	ittet	ne
   1bd6c:	eba2 0a0a 	subne.w	sl, r2, sl
   1bd70:	4451      	addne	r1, sl
   1bd72:	f8c9 2000 	streq.w	r2, [r9]
   1bd76:	6019      	strne	r1, [r3, #0]
   1bd78:	f012 0107 	ands.w	r1, r2, #7
   1bd7c:	f000 8115 	beq.w	1bfaa <_malloc_r+0x48e>
   1bd80:	f1c1 0008 	rsb	r0, r1, #8
   1bd84:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1bd88:	4402      	add	r2, r0
   1bd8a:	3108      	adds	r1, #8
   1bd8c:	eb02 090b 	add.w	r9, r2, fp
   1bd90:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1bd94:	eba1 0909 	sub.w	r9, r1, r9
   1bd98:	4649      	mov	r1, r9
   1bd9a:	4628      	mov	r0, r5
   1bd9c:	9301      	str	r3, [sp, #4]
   1bd9e:	9200      	str	r2, [sp, #0]
   1bda0:	f000 f9ca 	bl	1c138 <_sbrk_r>
   1bda4:	1c43      	adds	r3, r0, #1
   1bda6:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1bdaa:	f000 8143 	beq.w	1c034 <_malloc_r+0x518>
   1bdae:	1a80      	subs	r0, r0, r2
   1bdb0:	4448      	add	r0, r9
   1bdb2:	f040 0001 	orr.w	r0, r0, #1
   1bdb6:	6819      	ldr	r1, [r3, #0]
   1bdb8:	60ba      	str	r2, [r7, #8]
   1bdba:	4449      	add	r1, r9
   1bdbc:	42bc      	cmp	r4, r7
   1bdbe:	6050      	str	r0, [r2, #4]
   1bdc0:	6019      	str	r1, [r3, #0]
   1bdc2:	d017      	beq.n	1bdf4 <_malloc_r+0x2d8>
   1bdc4:	f1b8 0f0f 	cmp.w	r8, #15
   1bdc8:	f240 80fb 	bls.w	1bfc2 <_malloc_r+0x4a6>
   1bdcc:	6860      	ldr	r0, [r4, #4]
   1bdce:	f1a8 020c 	sub.w	r2, r8, #12
   1bdd2:	f022 0207 	bic.w	r2, r2, #7
   1bdd6:	eb04 0e02 	add.w	lr, r4, r2
   1bdda:	f000 0001 	and.w	r0, r0, #1
   1bdde:	f04f 0c05 	mov.w	ip, #5
   1bde2:	4310      	orrs	r0, r2
   1bde4:	2a0f      	cmp	r2, #15
   1bde6:	6060      	str	r0, [r4, #4]
   1bde8:	f8ce c004 	str.w	ip, [lr, #4]
   1bdec:	f8ce c008 	str.w	ip, [lr, #8]
   1bdf0:	f200 8117 	bhi.w	1c022 <_malloc_r+0x506>
   1bdf4:	4b1d      	ldr	r3, [pc, #116]	; (1be6c <_malloc_r+0x350>)
   1bdf6:	68bc      	ldr	r4, [r7, #8]
   1bdf8:	681a      	ldr	r2, [r3, #0]
   1bdfa:	4291      	cmp	r1, r2
   1bdfc:	bf88      	it	hi
   1bdfe:	6019      	strhi	r1, [r3, #0]
   1be00:	4b1b      	ldr	r3, [pc, #108]	; (1be70 <_malloc_r+0x354>)
   1be02:	681a      	ldr	r2, [r3, #0]
   1be04:	4291      	cmp	r1, r2
   1be06:	6862      	ldr	r2, [r4, #4]
   1be08:	bf88      	it	hi
   1be0a:	6019      	strhi	r1, [r3, #0]
   1be0c:	f022 0203 	bic.w	r2, r2, #3
   1be10:	4296      	cmp	r6, r2
   1be12:	eba2 0306 	sub.w	r3, r2, r6
   1be16:	d801      	bhi.n	1be1c <_malloc_r+0x300>
   1be18:	2b0f      	cmp	r3, #15
   1be1a:	dc04      	bgt.n	1be26 <_malloc_r+0x30a>
   1be1c:	4628      	mov	r0, r5
   1be1e:	f000 f985 	bl	1c12c <__malloc_unlock>
   1be22:	2400      	movs	r4, #0
   1be24:	e740      	b.n	1bca8 <_malloc_r+0x18c>
   1be26:	19a2      	adds	r2, r4, r6
   1be28:	f043 0301 	orr.w	r3, r3, #1
   1be2c:	f046 0601 	orr.w	r6, r6, #1
   1be30:	6066      	str	r6, [r4, #4]
   1be32:	4628      	mov	r0, r5
   1be34:	60ba      	str	r2, [r7, #8]
   1be36:	6053      	str	r3, [r2, #4]
   1be38:	f000 f978 	bl	1c12c <__malloc_unlock>
   1be3c:	3408      	adds	r4, #8
   1be3e:	4620      	mov	r0, r4
   1be40:	b003      	add	sp, #12
   1be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be46:	2b14      	cmp	r3, #20
   1be48:	d971      	bls.n	1bf2e <_malloc_r+0x412>
   1be4a:	2b54      	cmp	r3, #84	; 0x54
   1be4c:	f200 80a3 	bhi.w	1bf96 <_malloc_r+0x47a>
   1be50:	0b33      	lsrs	r3, r6, #12
   1be52:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1be56:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1be5a:	00c3      	lsls	r3, r0, #3
   1be5c:	e680      	b.n	1bb60 <_malloc_r+0x44>
   1be5e:	bf00      	nop
   1be60:	20000634 	.word	0x20000634
   1be64:	2000a124 	.word	0x2000a124
   1be68:	2000a0f4 	.word	0x2000a0f4
   1be6c:	2000a11c 	.word	0x2000a11c
   1be70:	2000a120 	.word	0x2000a120
   1be74:	2000063c 	.word	0x2000063c
   1be78:	20000a3c 	.word	0x20000a3c
   1be7c:	0a5a      	lsrs	r2, r3, #9
   1be7e:	2a04      	cmp	r2, #4
   1be80:	d95b      	bls.n	1bf3a <_malloc_r+0x41e>
   1be82:	2a14      	cmp	r2, #20
   1be84:	f200 80ae 	bhi.w	1bfe4 <_malloc_r+0x4c8>
   1be88:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1be8c:	00c9      	lsls	r1, r1, #3
   1be8e:	325b      	adds	r2, #91	; 0x5b
   1be90:	eb07 0c01 	add.w	ip, r7, r1
   1be94:	5879      	ldr	r1, [r7, r1]
   1be96:	f1ac 0c08 	sub.w	ip, ip, #8
   1be9a:	458c      	cmp	ip, r1
   1be9c:	f000 8088 	beq.w	1bfb0 <_malloc_r+0x494>
   1bea0:	684a      	ldr	r2, [r1, #4]
   1bea2:	f022 0203 	bic.w	r2, r2, #3
   1bea6:	4293      	cmp	r3, r2
   1bea8:	d273      	bcs.n	1bf92 <_malloc_r+0x476>
   1beaa:	6889      	ldr	r1, [r1, #8]
   1beac:	458c      	cmp	ip, r1
   1beae:	d1f7      	bne.n	1bea0 <_malloc_r+0x384>
   1beb0:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1beb4:	687b      	ldr	r3, [r7, #4]
   1beb6:	60e2      	str	r2, [r4, #12]
   1beb8:	f8c4 c008 	str.w	ip, [r4, #8]
   1bebc:	6094      	str	r4, [r2, #8]
   1bebe:	f8cc 400c 	str.w	r4, [ip, #12]
   1bec2:	e68f      	b.n	1bbe4 <_malloc_r+0xc8>
   1bec4:	19a1      	adds	r1, r4, r6
   1bec6:	f046 0c01 	orr.w	ip, r6, #1
   1beca:	f042 0601 	orr.w	r6, r2, #1
   1bece:	f8c4 c004 	str.w	ip, [r4, #4]
   1bed2:	4628      	mov	r0, r5
   1bed4:	6179      	str	r1, [r7, #20]
   1bed6:	6139      	str	r1, [r7, #16]
   1bed8:	f8c1 e00c 	str.w	lr, [r1, #12]
   1bedc:	f8c1 e008 	str.w	lr, [r1, #8]
   1bee0:	604e      	str	r6, [r1, #4]
   1bee2:	50e2      	str	r2, [r4, r3]
   1bee4:	f000 f922 	bl	1c12c <__malloc_unlock>
   1bee8:	3408      	adds	r4, #8
   1beea:	e6dd      	b.n	1bca8 <_malloc_r+0x18c>
   1beec:	687b      	ldr	r3, [r7, #4]
   1beee:	e679      	b.n	1bbe4 <_malloc_r+0xc8>
   1bef0:	f108 0801 	add.w	r8, r8, #1
   1bef4:	f018 0f03 	tst.w	r8, #3
   1bef8:	f10c 0c08 	add.w	ip, ip, #8
   1befc:	f47f ae85 	bne.w	1bc0a <_malloc_r+0xee>
   1bf00:	e02d      	b.n	1bf5e <_malloc_r+0x442>
   1bf02:	68dc      	ldr	r4, [r3, #12]
   1bf04:	42a3      	cmp	r3, r4
   1bf06:	bf08      	it	eq
   1bf08:	3002      	addeq	r0, #2
   1bf0a:	f43f ae3e 	beq.w	1bb8a <_malloc_r+0x6e>
   1bf0e:	e6bb      	b.n	1bc88 <_malloc_r+0x16c>
   1bf10:	4419      	add	r1, r3
   1bf12:	461c      	mov	r4, r3
   1bf14:	684a      	ldr	r2, [r1, #4]
   1bf16:	68db      	ldr	r3, [r3, #12]
   1bf18:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1bf1c:	f042 0201 	orr.w	r2, r2, #1
   1bf20:	604a      	str	r2, [r1, #4]
   1bf22:	4628      	mov	r0, r5
   1bf24:	60f3      	str	r3, [r6, #12]
   1bf26:	609e      	str	r6, [r3, #8]
   1bf28:	f000 f900 	bl	1c12c <__malloc_unlock>
   1bf2c:	e6bc      	b.n	1bca8 <_malloc_r+0x18c>
   1bf2e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1bf32:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1bf36:	00c3      	lsls	r3, r0, #3
   1bf38:	e612      	b.n	1bb60 <_malloc_r+0x44>
   1bf3a:	099a      	lsrs	r2, r3, #6
   1bf3c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1bf40:	00c9      	lsls	r1, r1, #3
   1bf42:	3238      	adds	r2, #56	; 0x38
   1bf44:	e7a4      	b.n	1be90 <_malloc_r+0x374>
   1bf46:	42bc      	cmp	r4, r7
   1bf48:	d054      	beq.n	1bff4 <_malloc_r+0x4d8>
   1bf4a:	68bc      	ldr	r4, [r7, #8]
   1bf4c:	6862      	ldr	r2, [r4, #4]
   1bf4e:	f022 0203 	bic.w	r2, r2, #3
   1bf52:	e75d      	b.n	1be10 <_malloc_r+0x2f4>
   1bf54:	f859 3908 	ldr.w	r3, [r9], #-8
   1bf58:	4599      	cmp	r9, r3
   1bf5a:	f040 8086 	bne.w	1c06a <_malloc_r+0x54e>
   1bf5e:	f010 0f03 	tst.w	r0, #3
   1bf62:	f100 30ff 	add.w	r0, r0, #4294967295
   1bf66:	d1f5      	bne.n	1bf54 <_malloc_r+0x438>
   1bf68:	687b      	ldr	r3, [r7, #4]
   1bf6a:	ea23 0304 	bic.w	r3, r3, r4
   1bf6e:	607b      	str	r3, [r7, #4]
   1bf70:	0064      	lsls	r4, r4, #1
   1bf72:	429c      	cmp	r4, r3
   1bf74:	f63f aec7 	bhi.w	1bd06 <_malloc_r+0x1ea>
   1bf78:	2c00      	cmp	r4, #0
   1bf7a:	f43f aec4 	beq.w	1bd06 <_malloc_r+0x1ea>
   1bf7e:	421c      	tst	r4, r3
   1bf80:	4640      	mov	r0, r8
   1bf82:	f47f ae3e 	bne.w	1bc02 <_malloc_r+0xe6>
   1bf86:	0064      	lsls	r4, r4, #1
   1bf88:	421c      	tst	r4, r3
   1bf8a:	f100 0004 	add.w	r0, r0, #4
   1bf8e:	d0fa      	beq.n	1bf86 <_malloc_r+0x46a>
   1bf90:	e637      	b.n	1bc02 <_malloc_r+0xe6>
   1bf92:	468c      	mov	ip, r1
   1bf94:	e78c      	b.n	1beb0 <_malloc_r+0x394>
   1bf96:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1bf9a:	d815      	bhi.n	1bfc8 <_malloc_r+0x4ac>
   1bf9c:	0bf3      	lsrs	r3, r6, #15
   1bf9e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1bfa2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1bfa6:	00c3      	lsls	r3, r0, #3
   1bfa8:	e5da      	b.n	1bb60 <_malloc_r+0x44>
   1bfaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1bfae:	e6ed      	b.n	1bd8c <_malloc_r+0x270>
   1bfb0:	687b      	ldr	r3, [r7, #4]
   1bfb2:	1092      	asrs	r2, r2, #2
   1bfb4:	2101      	movs	r1, #1
   1bfb6:	fa01 f202 	lsl.w	r2, r1, r2
   1bfba:	4313      	orrs	r3, r2
   1bfbc:	607b      	str	r3, [r7, #4]
   1bfbe:	4662      	mov	r2, ip
   1bfc0:	e779      	b.n	1beb6 <_malloc_r+0x39a>
   1bfc2:	2301      	movs	r3, #1
   1bfc4:	6053      	str	r3, [r2, #4]
   1bfc6:	e729      	b.n	1be1c <_malloc_r+0x300>
   1bfc8:	f240 5254 	movw	r2, #1364	; 0x554
   1bfcc:	4293      	cmp	r3, r2
   1bfce:	d822      	bhi.n	1c016 <_malloc_r+0x4fa>
   1bfd0:	0cb3      	lsrs	r3, r6, #18
   1bfd2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1bfd6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1bfda:	00c3      	lsls	r3, r0, #3
   1bfdc:	e5c0      	b.n	1bb60 <_malloc_r+0x44>
   1bfde:	f103 0b10 	add.w	fp, r3, #16
   1bfe2:	e6ae      	b.n	1bd42 <_malloc_r+0x226>
   1bfe4:	2a54      	cmp	r2, #84	; 0x54
   1bfe6:	d829      	bhi.n	1c03c <_malloc_r+0x520>
   1bfe8:	0b1a      	lsrs	r2, r3, #12
   1bfea:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1bfee:	00c9      	lsls	r1, r1, #3
   1bff0:	326e      	adds	r2, #110	; 0x6e
   1bff2:	e74d      	b.n	1be90 <_malloc_r+0x374>
   1bff4:	4b20      	ldr	r3, [pc, #128]	; (1c078 <_malloc_r+0x55c>)
   1bff6:	6819      	ldr	r1, [r3, #0]
   1bff8:	4459      	add	r1, fp
   1bffa:	6019      	str	r1, [r3, #0]
   1bffc:	e6b2      	b.n	1bd64 <_malloc_r+0x248>
   1bffe:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1c002:	2800      	cmp	r0, #0
   1c004:	f47f aeae 	bne.w	1bd64 <_malloc_r+0x248>
   1c008:	eb08 030b 	add.w	r3, r8, fp
   1c00c:	68ba      	ldr	r2, [r7, #8]
   1c00e:	f043 0301 	orr.w	r3, r3, #1
   1c012:	6053      	str	r3, [r2, #4]
   1c014:	e6ee      	b.n	1bdf4 <_malloc_r+0x2d8>
   1c016:	207f      	movs	r0, #127	; 0x7f
   1c018:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1c01c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1c020:	e59e      	b.n	1bb60 <_malloc_r+0x44>
   1c022:	f104 0108 	add.w	r1, r4, #8
   1c026:	4628      	mov	r0, r5
   1c028:	9300      	str	r3, [sp, #0]
   1c02a:	f001 ff91 	bl	1df50 <_free_r>
   1c02e:	9b00      	ldr	r3, [sp, #0]
   1c030:	6819      	ldr	r1, [r3, #0]
   1c032:	e6df      	b.n	1bdf4 <_malloc_r+0x2d8>
   1c034:	2001      	movs	r0, #1
   1c036:	f04f 0900 	mov.w	r9, #0
   1c03a:	e6bc      	b.n	1bdb6 <_malloc_r+0x29a>
   1c03c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1c040:	d805      	bhi.n	1c04e <_malloc_r+0x532>
   1c042:	0bda      	lsrs	r2, r3, #15
   1c044:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1c048:	00c9      	lsls	r1, r1, #3
   1c04a:	3277      	adds	r2, #119	; 0x77
   1c04c:	e720      	b.n	1be90 <_malloc_r+0x374>
   1c04e:	f240 5154 	movw	r1, #1364	; 0x554
   1c052:	428a      	cmp	r2, r1
   1c054:	d805      	bhi.n	1c062 <_malloc_r+0x546>
   1c056:	0c9a      	lsrs	r2, r3, #18
   1c058:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1c05c:	00c9      	lsls	r1, r1, #3
   1c05e:	327c      	adds	r2, #124	; 0x7c
   1c060:	e716      	b.n	1be90 <_malloc_r+0x374>
   1c062:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1c066:	227e      	movs	r2, #126	; 0x7e
   1c068:	e712      	b.n	1be90 <_malloc_r+0x374>
   1c06a:	687b      	ldr	r3, [r7, #4]
   1c06c:	e780      	b.n	1bf70 <_malloc_r+0x454>
   1c06e:	08f0      	lsrs	r0, r6, #3
   1c070:	f106 0308 	add.w	r3, r6, #8
   1c074:	e600      	b.n	1bc78 <_malloc_r+0x15c>
   1c076:	bf00      	nop
   1c078:	2000a0f4 	.word	0x2000a0f4
   1c07c:	00000000 	.word	0x00000000

0001c080 <memchr>:
   1c080:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1c084:	2a10      	cmp	r2, #16
   1c086:	db2b      	blt.n	1c0e0 <memchr+0x60>
   1c088:	f010 0f07 	tst.w	r0, #7
   1c08c:	d008      	beq.n	1c0a0 <memchr+0x20>
   1c08e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1c092:	3a01      	subs	r2, #1
   1c094:	428b      	cmp	r3, r1
   1c096:	d02d      	beq.n	1c0f4 <memchr+0x74>
   1c098:	f010 0f07 	tst.w	r0, #7
   1c09c:	b342      	cbz	r2, 1c0f0 <memchr+0x70>
   1c09e:	d1f6      	bne.n	1c08e <memchr+0xe>
   1c0a0:	b4f0      	push	{r4, r5, r6, r7}
   1c0a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1c0a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1c0aa:	f022 0407 	bic.w	r4, r2, #7
   1c0ae:	f07f 0700 	mvns.w	r7, #0
   1c0b2:	2300      	movs	r3, #0
   1c0b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1c0b8:	3c08      	subs	r4, #8
   1c0ba:	ea85 0501 	eor.w	r5, r5, r1
   1c0be:	ea86 0601 	eor.w	r6, r6, r1
   1c0c2:	fa85 f547 	uadd8	r5, r5, r7
   1c0c6:	faa3 f587 	sel	r5, r3, r7
   1c0ca:	fa86 f647 	uadd8	r6, r6, r7
   1c0ce:	faa5 f687 	sel	r6, r5, r7
   1c0d2:	b98e      	cbnz	r6, 1c0f8 <memchr+0x78>
   1c0d4:	d1ee      	bne.n	1c0b4 <memchr+0x34>
   1c0d6:	bcf0      	pop	{r4, r5, r6, r7}
   1c0d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1c0dc:	f002 0207 	and.w	r2, r2, #7
   1c0e0:	b132      	cbz	r2, 1c0f0 <memchr+0x70>
   1c0e2:	f810 3b01 	ldrb.w	r3, [r0], #1
   1c0e6:	3a01      	subs	r2, #1
   1c0e8:	ea83 0301 	eor.w	r3, r3, r1
   1c0ec:	b113      	cbz	r3, 1c0f4 <memchr+0x74>
   1c0ee:	d1f8      	bne.n	1c0e2 <memchr+0x62>
   1c0f0:	2000      	movs	r0, #0
   1c0f2:	4770      	bx	lr
   1c0f4:	3801      	subs	r0, #1
   1c0f6:	4770      	bx	lr
   1c0f8:	2d00      	cmp	r5, #0
   1c0fa:	bf06      	itte	eq
   1c0fc:	4635      	moveq	r5, r6
   1c0fe:	3803      	subeq	r0, #3
   1c100:	3807      	subne	r0, #7
   1c102:	f015 0f01 	tst.w	r5, #1
   1c106:	d107      	bne.n	1c118 <memchr+0x98>
   1c108:	3001      	adds	r0, #1
   1c10a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1c10e:	bf02      	ittt	eq
   1c110:	3001      	addeq	r0, #1
   1c112:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1c116:	3001      	addeq	r0, #1
   1c118:	bcf0      	pop	{r4, r5, r6, r7}
   1c11a:	3801      	subs	r0, #1
   1c11c:	4770      	bx	lr
   1c11e:	bf00      	nop

0001c120 <__malloc_lock>:
   1c120:	4801      	ldr	r0, [pc, #4]	; (1c128 <__malloc_lock+0x8>)
   1c122:	f7ff bcf5 	b.w	1bb10 <__retarget_lock_acquire_recursive>
   1c126:	bf00      	nop
   1c128:	2000a400 	.word	0x2000a400

0001c12c <__malloc_unlock>:
   1c12c:	4801      	ldr	r0, [pc, #4]	; (1c134 <__malloc_unlock+0x8>)
   1c12e:	f7ff bcf3 	b.w	1bb18 <__retarget_lock_release_recursive>
   1c132:	bf00      	nop
   1c134:	2000a400 	.word	0x2000a400

0001c138 <_sbrk_r>:
   1c138:	b538      	push	{r3, r4, r5, lr}
   1c13a:	4c07      	ldr	r4, [pc, #28]	; (1c158 <_sbrk_r+0x20>)
   1c13c:	2300      	movs	r3, #0
   1c13e:	4605      	mov	r5, r0
   1c140:	4608      	mov	r0, r1
   1c142:	6023      	str	r3, [r4, #0]
   1c144:	f7f7 fd69 	bl	13c1a <_sbrk>
   1c148:	1c43      	adds	r3, r0, #1
   1c14a:	d000      	beq.n	1c14e <_sbrk_r+0x16>
   1c14c:	bd38      	pop	{r3, r4, r5, pc}
   1c14e:	6823      	ldr	r3, [r4, #0]
   1c150:	2b00      	cmp	r3, #0
   1c152:	d0fb      	beq.n	1c14c <_sbrk_r+0x14>
   1c154:	602b      	str	r3, [r5, #0]
   1c156:	bd38      	pop	{r3, r4, r5, pc}
   1c158:	2000a414 	.word	0x2000a414

0001c15c <siprintf>:
   1c15c:	b40e      	push	{r1, r2, r3}
   1c15e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c160:	b09c      	sub	sp, #112	; 0x70
   1c162:	ab21      	add	r3, sp, #132	; 0x84
   1c164:	490f      	ldr	r1, [pc, #60]	; (1c1a4 <siprintf+0x48>)
   1c166:	f853 2b04 	ldr.w	r2, [r3], #4
   1c16a:	9301      	str	r3, [sp, #4]
   1c16c:	4605      	mov	r5, r0
   1c16e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1c172:	6808      	ldr	r0, [r1, #0]
   1c174:	9502      	str	r5, [sp, #8]
   1c176:	f44f 7702 	mov.w	r7, #520	; 0x208
   1c17a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1c17e:	a902      	add	r1, sp, #8
   1c180:	9506      	str	r5, [sp, #24]
   1c182:	f8ad 7014 	strh.w	r7, [sp, #20]
   1c186:	9404      	str	r4, [sp, #16]
   1c188:	9407      	str	r4, [sp, #28]
   1c18a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1c18e:	f000 fbaf 	bl	1c8f0 <_svfiprintf_r>
   1c192:	9b02      	ldr	r3, [sp, #8]
   1c194:	2200      	movs	r2, #0
   1c196:	701a      	strb	r2, [r3, #0]
   1c198:	b01c      	add	sp, #112	; 0x70
   1c19a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c19e:	b003      	add	sp, #12
   1c1a0:	4770      	bx	lr
   1c1a2:	bf00      	nop
   1c1a4:	200001bc 	.word	0x200001bc

0001c1a8 <siscanf>:
   1c1a8:	b40e      	push	{r1, r2, r3}
   1c1aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c1ac:	b09c      	sub	sp, #112	; 0x70
   1c1ae:	ac21      	add	r4, sp, #132	; 0x84
   1c1b0:	f44f 7201 	mov.w	r2, #516	; 0x204
   1c1b4:	f854 6b04 	ldr.w	r6, [r4], #4
   1c1b8:	f8ad 2014 	strh.w	r2, [sp, #20]
   1c1bc:	9002      	str	r0, [sp, #8]
   1c1be:	9006      	str	r0, [sp, #24]
   1c1c0:	f7fe ffde 	bl	1b180 <strlen>
   1c1c4:	4b0c      	ldr	r3, [pc, #48]	; (1c1f8 <siscanf+0x50>)
   1c1c6:	9401      	str	r4, [sp, #4]
   1c1c8:	4605      	mov	r5, r0
   1c1ca:	4632      	mov	r2, r6
   1c1cc:	4f0b      	ldr	r7, [pc, #44]	; (1c1fc <siscanf+0x54>)
   1c1ce:	6818      	ldr	r0, [r3, #0]
   1c1d0:	9503      	str	r5, [sp, #12]
   1c1d2:	4623      	mov	r3, r4
   1c1d4:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1c1d8:	2400      	movs	r4, #0
   1c1da:	a902      	add	r1, sp, #8
   1c1dc:	9507      	str	r5, [sp, #28]
   1c1de:	970a      	str	r7, [sp, #40]	; 0x28
   1c1e0:	940e      	str	r4, [sp, #56]	; 0x38
   1c1e2:	9413      	str	r4, [sp, #76]	; 0x4c
   1c1e4:	f8ad 6016 	strh.w	r6, [sp, #22]
   1c1e8:	f001 f94a 	bl	1d480 <__ssvfiscanf_r>
   1c1ec:	b01c      	add	sp, #112	; 0x70
   1c1ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c1f2:	b003      	add	sp, #12
   1c1f4:	4770      	bx	lr
   1c1f6:	bf00      	nop
   1c1f8:	200001bc 	.word	0x200001bc
   1c1fc:	0001c201 	.word	0x0001c201

0001c200 <__seofread>:
   1c200:	2000      	movs	r0, #0
   1c202:	4770      	bx	lr
	...
   1c220:	eba2 0003 	sub.w	r0, r2, r3
   1c224:	4770      	bx	lr
   1c226:	bf00      	nop

0001c228 <strcmp>:
   1c228:	7802      	ldrb	r2, [r0, #0]
   1c22a:	780b      	ldrb	r3, [r1, #0]
   1c22c:	2a01      	cmp	r2, #1
   1c22e:	bf28      	it	cs
   1c230:	429a      	cmpcs	r2, r3
   1c232:	d1f5      	bne.n	1c220 <__seofread+0x20>
   1c234:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1c238:	ea40 0401 	orr.w	r4, r0, r1
   1c23c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1c240:	f06f 0c00 	mvn.w	ip, #0
   1c244:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1c248:	b312      	cbz	r2, 1c290 <strcmp+0x68>
   1c24a:	ea80 0401 	eor.w	r4, r0, r1
   1c24e:	f014 0f07 	tst.w	r4, #7
   1c252:	d16a      	bne.n	1c32a <strcmp+0x102>
   1c254:	f000 0407 	and.w	r4, r0, #7
   1c258:	f020 0007 	bic.w	r0, r0, #7
   1c25c:	f004 0503 	and.w	r5, r4, #3
   1c260:	f021 0107 	bic.w	r1, r1, #7
   1c264:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1c268:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1c26c:	f014 0f04 	tst.w	r4, #4
   1c270:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1c274:	fa0c f405 	lsl.w	r4, ip, r5
   1c278:	ea62 0204 	orn	r2, r2, r4
   1c27c:	ea66 0604 	orn	r6, r6, r4
   1c280:	d00a      	beq.n	1c298 <strcmp+0x70>
   1c282:	ea63 0304 	orn	r3, r3, r4
   1c286:	4662      	mov	r2, ip
   1c288:	ea67 0704 	orn	r7, r7, r4
   1c28c:	4666      	mov	r6, ip
   1c28e:	e003      	b.n	1c298 <strcmp+0x70>
   1c290:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1c294:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1c298:	fa82 f54c 	uadd8	r5, r2, ip
   1c29c:	ea82 0406 	eor.w	r4, r2, r6
   1c2a0:	faa4 f48c 	sel	r4, r4, ip
   1c2a4:	bb6c      	cbnz	r4, 1c302 <strcmp+0xda>
   1c2a6:	fa83 f54c 	uadd8	r5, r3, ip
   1c2aa:	ea83 0507 	eor.w	r5, r3, r7
   1c2ae:	faa5 f58c 	sel	r5, r5, ip
   1c2b2:	b995      	cbnz	r5, 1c2da <strcmp+0xb2>
   1c2b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1c2b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1c2bc:	fa82 f54c 	uadd8	r5, r2, ip
   1c2c0:	ea82 0406 	eor.w	r4, r2, r6
   1c2c4:	faa4 f48c 	sel	r4, r4, ip
   1c2c8:	fa83 f54c 	uadd8	r5, r3, ip
   1c2cc:	ea83 0507 	eor.w	r5, r3, r7
   1c2d0:	faa5 f58c 	sel	r5, r5, ip
   1c2d4:	4325      	orrs	r5, r4
   1c2d6:	d0db      	beq.n	1c290 <strcmp+0x68>
   1c2d8:	b99c      	cbnz	r4, 1c302 <strcmp+0xda>
   1c2da:	ba2d      	rev	r5, r5
   1c2dc:	fab5 f485 	clz	r4, r5
   1c2e0:	f024 0407 	bic.w	r4, r4, #7
   1c2e4:	fa27 f104 	lsr.w	r1, r7, r4
   1c2e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1c2ec:	fa23 f304 	lsr.w	r3, r3, r4
   1c2f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1c2f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1c2f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c2fc:	eba0 0001 	sub.w	r0, r0, r1
   1c300:	4770      	bx	lr
   1c302:	ba24      	rev	r4, r4
   1c304:	fab4 f484 	clz	r4, r4
   1c308:	f024 0407 	bic.w	r4, r4, #7
   1c30c:	fa26 f104 	lsr.w	r1, r6, r4
   1c310:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1c314:	fa22 f204 	lsr.w	r2, r2, r4
   1c318:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1c31c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1c320:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c324:	eba0 0001 	sub.w	r0, r0, r1
   1c328:	4770      	bx	lr
   1c32a:	f014 0f03 	tst.w	r4, #3
   1c32e:	d13c      	bne.n	1c3aa <strcmp+0x182>
   1c330:	f010 0403 	ands.w	r4, r0, #3
   1c334:	d128      	bne.n	1c388 <strcmp+0x160>
   1c336:	f850 2b08 	ldr.w	r2, [r0], #8
   1c33a:	f851 3b08 	ldr.w	r3, [r1], #8
   1c33e:	fa82 f54c 	uadd8	r5, r2, ip
   1c342:	ea82 0503 	eor.w	r5, r2, r3
   1c346:	faa5 f58c 	sel	r5, r5, ip
   1c34a:	b95d      	cbnz	r5, 1c364 <strcmp+0x13c>
   1c34c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1c350:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1c354:	fa82 f54c 	uadd8	r5, r2, ip
   1c358:	ea82 0503 	eor.w	r5, r2, r3
   1c35c:	faa5 f58c 	sel	r5, r5, ip
   1c360:	2d00      	cmp	r5, #0
   1c362:	d0e8      	beq.n	1c336 <strcmp+0x10e>
   1c364:	ba2d      	rev	r5, r5
   1c366:	fab5 f485 	clz	r4, r5
   1c36a:	f024 0407 	bic.w	r4, r4, #7
   1c36e:	fa23 f104 	lsr.w	r1, r3, r4
   1c372:	fa22 f204 	lsr.w	r2, r2, r4
   1c376:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1c37a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1c37e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c382:	eba0 0001 	sub.w	r0, r0, r1
   1c386:	4770      	bx	lr
   1c388:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1c38c:	f020 0003 	bic.w	r0, r0, #3
   1c390:	f850 2b08 	ldr.w	r2, [r0], #8
   1c394:	f021 0103 	bic.w	r1, r1, #3
   1c398:	f851 3b08 	ldr.w	r3, [r1], #8
   1c39c:	fa0c f404 	lsl.w	r4, ip, r4
   1c3a0:	ea62 0204 	orn	r2, r2, r4
   1c3a4:	ea63 0304 	orn	r3, r3, r4
   1c3a8:	e7c9      	b.n	1c33e <strcmp+0x116>
   1c3aa:	f010 0403 	ands.w	r4, r0, #3
   1c3ae:	d01a      	beq.n	1c3e6 <strcmp+0x1be>
   1c3b0:	eba1 0104 	sub.w	r1, r1, r4
   1c3b4:	f020 0003 	bic.w	r0, r0, #3
   1c3b8:	07e4      	lsls	r4, r4, #31
   1c3ba:	f850 2b04 	ldr.w	r2, [r0], #4
   1c3be:	d006      	beq.n	1c3ce <strcmp+0x1a6>
   1c3c0:	d20f      	bcs.n	1c3e2 <strcmp+0x1ba>
   1c3c2:	788b      	ldrb	r3, [r1, #2]
   1c3c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1c3c8:	1ae4      	subs	r4, r4, r3
   1c3ca:	d106      	bne.n	1c3da <strcmp+0x1b2>
   1c3cc:	b12b      	cbz	r3, 1c3da <strcmp+0x1b2>
   1c3ce:	78cb      	ldrb	r3, [r1, #3]
   1c3d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1c3d4:	1ae4      	subs	r4, r4, r3
   1c3d6:	d100      	bne.n	1c3da <strcmp+0x1b2>
   1c3d8:	b91b      	cbnz	r3, 1c3e2 <strcmp+0x1ba>
   1c3da:	4620      	mov	r0, r4
   1c3dc:	f85d 4b10 	ldr.w	r4, [sp], #16
   1c3e0:	4770      	bx	lr
   1c3e2:	f101 0104 	add.w	r1, r1, #4
   1c3e6:	f850 2b04 	ldr.w	r2, [r0], #4
   1c3ea:	07cc      	lsls	r4, r1, #31
   1c3ec:	f021 0103 	bic.w	r1, r1, #3
   1c3f0:	f851 3b04 	ldr.w	r3, [r1], #4
   1c3f4:	d848      	bhi.n	1c488 <strcmp+0x260>
   1c3f6:	d224      	bcs.n	1c442 <strcmp+0x21a>
   1c3f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1c3fc:	fa82 f54c 	uadd8	r5, r2, ip
   1c400:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1c404:	faa5 f58c 	sel	r5, r5, ip
   1c408:	d10a      	bne.n	1c420 <strcmp+0x1f8>
   1c40a:	b965      	cbnz	r5, 1c426 <strcmp+0x1fe>
   1c40c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c410:	ea84 0402 	eor.w	r4, r4, r2
   1c414:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1c418:	d10e      	bne.n	1c438 <strcmp+0x210>
   1c41a:	f850 2b04 	ldr.w	r2, [r0], #4
   1c41e:	e7eb      	b.n	1c3f8 <strcmp+0x1d0>
   1c420:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1c424:	e055      	b.n	1c4d2 <strcmp+0x2aa>
   1c426:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1c42a:	d14d      	bne.n	1c4c8 <strcmp+0x2a0>
   1c42c:	7808      	ldrb	r0, [r1, #0]
   1c42e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c432:	f1c0 0000 	rsb	r0, r0, #0
   1c436:	4770      	bx	lr
   1c438:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1c43c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1c440:	e047      	b.n	1c4d2 <strcmp+0x2aa>
   1c442:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1c446:	fa82 f54c 	uadd8	r5, r2, ip
   1c44a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1c44e:	faa5 f58c 	sel	r5, r5, ip
   1c452:	d10a      	bne.n	1c46a <strcmp+0x242>
   1c454:	b965      	cbnz	r5, 1c470 <strcmp+0x248>
   1c456:	f851 3b04 	ldr.w	r3, [r1], #4
   1c45a:	ea84 0402 	eor.w	r4, r4, r2
   1c45e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1c462:	d10c      	bne.n	1c47e <strcmp+0x256>
   1c464:	f850 2b04 	ldr.w	r2, [r0], #4
   1c468:	e7eb      	b.n	1c442 <strcmp+0x21a>
   1c46a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1c46e:	e030      	b.n	1c4d2 <strcmp+0x2aa>
   1c470:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1c474:	d128      	bne.n	1c4c8 <strcmp+0x2a0>
   1c476:	880b      	ldrh	r3, [r1, #0]
   1c478:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1c47c:	e029      	b.n	1c4d2 <strcmp+0x2aa>
   1c47e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1c482:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1c486:	e024      	b.n	1c4d2 <strcmp+0x2aa>
   1c488:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1c48c:	fa82 f54c 	uadd8	r5, r2, ip
   1c490:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1c494:	faa5 f58c 	sel	r5, r5, ip
   1c498:	d10a      	bne.n	1c4b0 <strcmp+0x288>
   1c49a:	b965      	cbnz	r5, 1c4b6 <strcmp+0x28e>
   1c49c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4a0:	ea84 0402 	eor.w	r4, r4, r2
   1c4a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1c4a8:	d109      	bne.n	1c4be <strcmp+0x296>
   1c4aa:	f850 2b04 	ldr.w	r2, [r0], #4
   1c4ae:	e7eb      	b.n	1c488 <strcmp+0x260>
   1c4b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1c4b4:	e00d      	b.n	1c4d2 <strcmp+0x2aa>
   1c4b6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1c4ba:	d105      	bne.n	1c4c8 <strcmp+0x2a0>
   1c4bc:	680b      	ldr	r3, [r1, #0]
   1c4be:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1c4c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1c4c6:	e004      	b.n	1c4d2 <strcmp+0x2aa>
   1c4c8:	f04f 0000 	mov.w	r0, #0
   1c4cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c4d0:	4770      	bx	lr
   1c4d2:	ba12      	rev	r2, r2
   1c4d4:	ba1b      	rev	r3, r3
   1c4d6:	fa82 f44c 	uadd8	r4, r2, ip
   1c4da:	ea82 0403 	eor.w	r4, r2, r3
   1c4de:	faa4 f58c 	sel	r5, r4, ip
   1c4e2:	fab5 f485 	clz	r4, r5
   1c4e6:	fa02 f204 	lsl.w	r2, r2, r4
   1c4ea:	fa03 f304 	lsl.w	r3, r3, r4
   1c4ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1c4f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c4f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1c4fa:	4770      	bx	lr

0001c4fc <strcpy>:
   1c4fc:	ea80 0201 	eor.w	r2, r0, r1
   1c500:	4684      	mov	ip, r0
   1c502:	f012 0f03 	tst.w	r2, #3
   1c506:	d14f      	bne.n	1c5a8 <strcpy+0xac>
   1c508:	f011 0f03 	tst.w	r1, #3
   1c50c:	d132      	bne.n	1c574 <strcpy+0x78>
   1c50e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1c512:	f011 0f04 	tst.w	r1, #4
   1c516:	f851 3b04 	ldr.w	r3, [r1], #4
   1c51a:	d00b      	beq.n	1c534 <strcpy+0x38>
   1c51c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1c520:	439a      	bics	r2, r3
   1c522:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1c526:	bf04      	itt	eq
   1c528:	f84c 3b04 	streq.w	r3, [ip], #4
   1c52c:	f851 3b04 	ldreq.w	r3, [r1], #4
   1c530:	d116      	bne.n	1c560 <strcpy+0x64>
   1c532:	bf00      	nop
   1c534:	f851 4b04 	ldr.w	r4, [r1], #4
   1c538:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1c53c:	439a      	bics	r2, r3
   1c53e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1c542:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1c546:	d10b      	bne.n	1c560 <strcpy+0x64>
   1c548:	f84c 3b04 	str.w	r3, [ip], #4
   1c54c:	43a2      	bics	r2, r4
   1c54e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1c552:	bf04      	itt	eq
   1c554:	f851 3b04 	ldreq.w	r3, [r1], #4
   1c558:	f84c 4b04 	streq.w	r4, [ip], #4
   1c55c:	d0ea      	beq.n	1c534 <strcpy+0x38>
   1c55e:	4623      	mov	r3, r4
   1c560:	f80c 3b01 	strb.w	r3, [ip], #1
   1c564:	f013 0fff 	tst.w	r3, #255	; 0xff
   1c568:	ea4f 2333 	mov.w	r3, r3, ror #8
   1c56c:	d1f8      	bne.n	1c560 <strcpy+0x64>
   1c56e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c572:	4770      	bx	lr
   1c574:	f011 0f01 	tst.w	r1, #1
   1c578:	d006      	beq.n	1c588 <strcpy+0x8c>
   1c57a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1c57e:	f80c 2b01 	strb.w	r2, [ip], #1
   1c582:	2a00      	cmp	r2, #0
   1c584:	bf08      	it	eq
   1c586:	4770      	bxeq	lr
   1c588:	f011 0f02 	tst.w	r1, #2
   1c58c:	d0bf      	beq.n	1c50e <strcpy+0x12>
   1c58e:	f831 2b02 	ldrh.w	r2, [r1], #2
   1c592:	f012 0fff 	tst.w	r2, #255	; 0xff
   1c596:	bf16      	itet	ne
   1c598:	f82c 2b02 	strhne.w	r2, [ip], #2
   1c59c:	f88c 2000 	strbeq.w	r2, [ip]
   1c5a0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1c5a4:	d1b3      	bne.n	1c50e <strcpy+0x12>
   1c5a6:	4770      	bx	lr
   1c5a8:	f811 2b01 	ldrb.w	r2, [r1], #1
   1c5ac:	f80c 2b01 	strb.w	r2, [ip], #1
   1c5b0:	2a00      	cmp	r2, #0
   1c5b2:	d1f9      	bne.n	1c5a8 <strcpy+0xac>
   1c5b4:	4770      	bx	lr
   1c5b6:	bf00      	nop

0001c5b8 <strncmp>:
   1c5b8:	2a00      	cmp	r2, #0
   1c5ba:	d041      	beq.n	1c640 <strncmp+0x88>
   1c5bc:	ea40 0301 	orr.w	r3, r0, r1
   1c5c0:	f013 0303 	ands.w	r3, r3, #3
   1c5c4:	b4f0      	push	{r4, r5, r6, r7}
   1c5c6:	d125      	bne.n	1c614 <strncmp+0x5c>
   1c5c8:	2a03      	cmp	r2, #3
   1c5ca:	d923      	bls.n	1c614 <strncmp+0x5c>
   1c5cc:	6804      	ldr	r4, [r0, #0]
   1c5ce:	680d      	ldr	r5, [r1, #0]
   1c5d0:	42ac      	cmp	r4, r5
   1c5d2:	d11f      	bne.n	1c614 <strncmp+0x5c>
   1c5d4:	3a04      	subs	r2, #4
   1c5d6:	d038      	beq.n	1c64a <strncmp+0x92>
   1c5d8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1c5dc:	ea25 0404 	bic.w	r4, r5, r4
   1c5e0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1c5e4:	d12e      	bne.n	1c644 <strncmp+0x8c>
   1c5e6:	3004      	adds	r0, #4
   1c5e8:	3104      	adds	r1, #4
   1c5ea:	e00f      	b.n	1c60c <strncmp+0x54>
   1c5ec:	f850 3b04 	ldr.w	r3, [r0], #4
   1c5f0:	680e      	ldr	r6, [r1, #0]
   1c5f2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1c5f6:	42b3      	cmp	r3, r6
   1c5f8:	ea24 0403 	bic.w	r4, r4, r3
   1c5fc:	f101 0104 	add.w	r1, r1, #4
   1c600:	d126      	bne.n	1c650 <strncmp+0x98>
   1c602:	3a04      	subs	r2, #4
   1c604:	d021      	beq.n	1c64a <strncmp+0x92>
   1c606:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1c60a:	d11b      	bne.n	1c644 <strncmp+0x8c>
   1c60c:	2a03      	cmp	r2, #3
   1c60e:	4607      	mov	r7, r0
   1c610:	460d      	mov	r5, r1
   1c612:	d8eb      	bhi.n	1c5ec <strncmp+0x34>
   1c614:	7805      	ldrb	r5, [r0, #0]
   1c616:	780c      	ldrb	r4, [r1, #0]
   1c618:	42ac      	cmp	r4, r5
   1c61a:	f102 33ff 	add.w	r3, r2, #4294967295
   1c61e:	d11a      	bne.n	1c656 <strncmp+0x9e>
   1c620:	b183      	cbz	r3, 1c644 <strncmp+0x8c>
   1c622:	b914      	cbnz	r4, 1c62a <strncmp+0x72>
   1c624:	e00e      	b.n	1c644 <strncmp+0x8c>
   1c626:	b16b      	cbz	r3, 1c644 <strncmp+0x8c>
   1c628:	b17a      	cbz	r2, 1c64a <strncmp+0x92>
   1c62a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1c62e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1c632:	42a2      	cmp	r2, r4
   1c634:	f103 33ff 	add.w	r3, r3, #4294967295
   1c638:	d0f5      	beq.n	1c626 <strncmp+0x6e>
   1c63a:	1b10      	subs	r0, r2, r4
   1c63c:	bcf0      	pop	{r4, r5, r6, r7}
   1c63e:	4770      	bx	lr
   1c640:	4610      	mov	r0, r2
   1c642:	4770      	bx	lr
   1c644:	2000      	movs	r0, #0
   1c646:	bcf0      	pop	{r4, r5, r6, r7}
   1c648:	4770      	bx	lr
   1c64a:	4610      	mov	r0, r2
   1c64c:	bcf0      	pop	{r4, r5, r6, r7}
   1c64e:	4770      	bx	lr
   1c650:	4629      	mov	r1, r5
   1c652:	4638      	mov	r0, r7
   1c654:	e7de      	b.n	1c614 <strncmp+0x5c>
   1c656:	462a      	mov	r2, r5
   1c658:	e7ef      	b.n	1c63a <strncmp+0x82>
   1c65a:	bf00      	nop

0001c65c <_strtoul_l.isra.0>:
   1c65c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c660:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1c664:	460e      	mov	r6, r1
   1c666:	4607      	mov	r7, r0
   1c668:	4615      	mov	r5, r2
   1c66a:	4698      	mov	r8, r3
   1c66c:	468a      	mov	sl, r1
   1c66e:	e000      	b.n	1c672 <_strtoul_l.isra.0+0x16>
   1c670:	46a2      	mov	sl, r4
   1c672:	4654      	mov	r4, sl
   1c674:	4648      	mov	r0, r9
   1c676:	f814 bb01 	ldrb.w	fp, [r4], #1
   1c67a:	f001 fd6b 	bl	1e154 <__locale_ctype_ptr_l>
   1c67e:	4458      	add	r0, fp
   1c680:	7840      	ldrb	r0, [r0, #1]
   1c682:	f010 0008 	ands.w	r0, r0, #8
   1c686:	d1f3      	bne.n	1c670 <_strtoul_l.isra.0+0x14>
   1c688:	4659      	mov	r1, fp
   1c68a:	292d      	cmp	r1, #45	; 0x2d
   1c68c:	d059      	beq.n	1c742 <_strtoul_l.isra.0+0xe6>
   1c68e:	292b      	cmp	r1, #43	; 0x2b
   1c690:	bf04      	itt	eq
   1c692:	7821      	ldrbeq	r1, [r4, #0]
   1c694:	f10a 0402 	addeq.w	r4, sl, #2
   1c698:	f1b8 0f00 	cmp.w	r8, #0
   1c69c:	d00c      	beq.n	1c6b8 <_strtoul_l.isra.0+0x5c>
   1c69e:	f1b8 0f10 	cmp.w	r8, #16
   1c6a2:	d053      	beq.n	1c74c <_strtoul_l.isra.0+0xf0>
   1c6a4:	f04f 3cff 	mov.w	ip, #4294967295
   1c6a8:	fbbc fcf8 	udiv	ip, ip, r8
   1c6ac:	fb08 fa0c 	mul.w	sl, r8, ip
   1c6b0:	ea6f 0a0a 	mvn.w	sl, sl
   1c6b4:	46c1      	mov	r9, r8
   1c6b6:	e008      	b.n	1c6ca <_strtoul_l.isra.0+0x6e>
   1c6b8:	2930      	cmp	r1, #48	; 0x30
   1c6ba:	d058      	beq.n	1c76e <_strtoul_l.isra.0+0x112>
   1c6bc:	f04f 080a 	mov.w	r8, #10
   1c6c0:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 1c7a0 <_strtoul_l.isra.0+0x144>
   1c6c4:	46c1      	mov	r9, r8
   1c6c6:	f04f 0a05 	mov.w	sl, #5
   1c6ca:	2300      	movs	r3, #0
   1c6cc:	469e      	mov	lr, r3
   1c6ce:	e005      	b.n	1c6dc <_strtoul_l.isra.0+0x80>
   1c6d0:	d02a      	beq.n	1c728 <_strtoul_l.isra.0+0xcc>
   1c6d2:	fb09 2e0e 	mla	lr, r9, lr, r2
   1c6d6:	2301      	movs	r3, #1
   1c6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
   1c6dc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1c6e0:	2a09      	cmp	r2, #9
   1c6e2:	d905      	bls.n	1c6f0 <_strtoul_l.isra.0+0x94>
   1c6e4:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1c6e8:	2a19      	cmp	r2, #25
   1c6ea:	d80a      	bhi.n	1c702 <_strtoul_l.isra.0+0xa6>
   1c6ec:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   1c6f0:	4590      	cmp	r8, r2
   1c6f2:	dd0e      	ble.n	1c712 <_strtoul_l.isra.0+0xb6>
   1c6f4:	2b00      	cmp	r3, #0
   1c6f6:	db01      	blt.n	1c6fc <_strtoul_l.isra.0+0xa0>
   1c6f8:	45e6      	cmp	lr, ip
   1c6fa:	d9e9      	bls.n	1c6d0 <_strtoul_l.isra.0+0x74>
   1c6fc:	f04f 33ff 	mov.w	r3, #4294967295
   1c700:	e7ea      	b.n	1c6d8 <_strtoul_l.isra.0+0x7c>
   1c702:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1c706:	2a19      	cmp	r2, #25
   1c708:	d803      	bhi.n	1c712 <_strtoul_l.isra.0+0xb6>
   1c70a:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   1c70e:	4590      	cmp	r8, r2
   1c710:	dcf0      	bgt.n	1c6f4 <_strtoul_l.isra.0+0x98>
   1c712:	2b00      	cmp	r3, #0
   1c714:	db0d      	blt.n	1c732 <_strtoul_l.isra.0+0xd6>
   1c716:	b108      	cbz	r0, 1c71c <_strtoul_l.isra.0+0xc0>
   1c718:	f1ce 0e00 	rsb	lr, lr, #0
   1c71c:	b10d      	cbz	r5, 1c722 <_strtoul_l.isra.0+0xc6>
   1c71e:	b973      	cbnz	r3, 1c73e <_strtoul_l.isra.0+0xe2>
   1c720:	602e      	str	r6, [r5, #0]
   1c722:	4670      	mov	r0, lr
   1c724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c728:	4552      	cmp	r2, sl
   1c72a:	ddd2      	ble.n	1c6d2 <_strtoul_l.isra.0+0x76>
   1c72c:	f04f 33ff 	mov.w	r3, #4294967295
   1c730:	e7d2      	b.n	1c6d8 <_strtoul_l.isra.0+0x7c>
   1c732:	2322      	movs	r3, #34	; 0x22
   1c734:	603b      	str	r3, [r7, #0]
   1c736:	f04f 3eff 	mov.w	lr, #4294967295
   1c73a:	2d00      	cmp	r5, #0
   1c73c:	d0f1      	beq.n	1c722 <_strtoul_l.isra.0+0xc6>
   1c73e:	1e66      	subs	r6, r4, #1
   1c740:	e7ee      	b.n	1c720 <_strtoul_l.isra.0+0xc4>
   1c742:	7821      	ldrb	r1, [r4, #0]
   1c744:	2001      	movs	r0, #1
   1c746:	f10a 0402 	add.w	r4, sl, #2
   1c74a:	e7a5      	b.n	1c698 <_strtoul_l.isra.0+0x3c>
   1c74c:	2930      	cmp	r1, #48	; 0x30
   1c74e:	d11b      	bne.n	1c788 <_strtoul_l.isra.0+0x12c>
   1c750:	7823      	ldrb	r3, [r4, #0]
   1c752:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c756:	2b58      	cmp	r3, #88	; 0x58
   1c758:	d11c      	bne.n	1c794 <_strtoul_l.isra.0+0x138>
   1c75a:	f04f 0910 	mov.w	r9, #16
   1c75e:	7861      	ldrb	r1, [r4, #1]
   1c760:	46c8      	mov	r8, r9
   1c762:	f04f 0a0f 	mov.w	sl, #15
   1c766:	3402      	adds	r4, #2
   1c768:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1c76c:	e7ad      	b.n	1c6ca <_strtoul_l.isra.0+0x6e>
   1c76e:	7823      	ldrb	r3, [r4, #0]
   1c770:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c774:	2b58      	cmp	r3, #88	; 0x58
   1c776:	d0f0      	beq.n	1c75a <_strtoul_l.isra.0+0xfe>
   1c778:	f04f 0808 	mov.w	r8, #8
   1c77c:	46c1      	mov	r9, r8
   1c77e:	f04f 0a07 	mov.w	sl, #7
   1c782:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   1c786:	e7a0      	b.n	1c6ca <_strtoul_l.isra.0+0x6e>
   1c788:	f04f 0a0f 	mov.w	sl, #15
   1c78c:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1c790:	46c1      	mov	r9, r8
   1c792:	e79a      	b.n	1c6ca <_strtoul_l.isra.0+0x6e>
   1c794:	46c1      	mov	r9, r8
   1c796:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1c79a:	f04f 0a0f 	mov.w	sl, #15
   1c79e:	e794      	b.n	1c6ca <_strtoul_l.isra.0+0x6e>
   1c7a0:	19999999 	.word	0x19999999

0001c7a4 <_strtoul_r>:
   1c7a4:	b530      	push	{r4, r5, lr}
   1c7a6:	4c06      	ldr	r4, [pc, #24]	; (1c7c0 <_strtoul_r+0x1c>)
   1c7a8:	4d06      	ldr	r5, [pc, #24]	; (1c7c4 <_strtoul_r+0x20>)
   1c7aa:	6824      	ldr	r4, [r4, #0]
   1c7ac:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1c7ae:	b083      	sub	sp, #12
   1c7b0:	2c00      	cmp	r4, #0
   1c7b2:	bf08      	it	eq
   1c7b4:	462c      	moveq	r4, r5
   1c7b6:	9400      	str	r4, [sp, #0]
   1c7b8:	f7ff ff50 	bl	1c65c <_strtoul_l.isra.0>
   1c7bc:	b003      	add	sp, #12
   1c7be:	bd30      	pop	{r4, r5, pc}
   1c7c0:	200001bc 	.word	0x200001bc
   1c7c4:	20000a48 	.word	0x20000a48

0001c7c8 <strtoul>:
   1c7c8:	b530      	push	{r4, r5, lr}
   1c7ca:	4c08      	ldr	r4, [pc, #32]	; (1c7ec <strtoul+0x24>)
   1c7cc:	4b08      	ldr	r3, [pc, #32]	; (1c7f0 <strtoul+0x28>)
   1c7ce:	6825      	ldr	r5, [r4, #0]
   1c7d0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   1c7d2:	b083      	sub	sp, #12
   1c7d4:	2c00      	cmp	r4, #0
   1c7d6:	bf08      	it	eq
   1c7d8:	461c      	moveq	r4, r3
   1c7da:	9400      	str	r4, [sp, #0]
   1c7dc:	4613      	mov	r3, r2
   1c7de:	460a      	mov	r2, r1
   1c7e0:	4601      	mov	r1, r0
   1c7e2:	4628      	mov	r0, r5
   1c7e4:	f7ff ff3a 	bl	1c65c <_strtoul_l.isra.0>
   1c7e8:	b003      	add	sp, #12
   1c7ea:	bd30      	pop	{r4, r5, pc}
   1c7ec:	200001bc 	.word	0x200001bc
   1c7f0:	20000a48 	.word	0x20000a48

0001c7f4 <__ssprint_r>:
   1c7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7f8:	6893      	ldr	r3, [r2, #8]
   1c7fa:	b083      	sub	sp, #12
   1c7fc:	4690      	mov	r8, r2
   1c7fe:	2b00      	cmp	r3, #0
   1c800:	d070      	beq.n	1c8e4 <__ssprint_r+0xf0>
   1c802:	4682      	mov	sl, r0
   1c804:	460c      	mov	r4, r1
   1c806:	6817      	ldr	r7, [r2, #0]
   1c808:	688d      	ldr	r5, [r1, #8]
   1c80a:	6808      	ldr	r0, [r1, #0]
   1c80c:	e042      	b.n	1c894 <__ssprint_r+0xa0>
   1c80e:	89a3      	ldrh	r3, [r4, #12]
   1c810:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1c814:	d02e      	beq.n	1c874 <__ssprint_r+0x80>
   1c816:	6965      	ldr	r5, [r4, #20]
   1c818:	6921      	ldr	r1, [r4, #16]
   1c81a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1c81e:	eba0 0b01 	sub.w	fp, r0, r1
   1c822:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1c826:	f10b 0001 	add.w	r0, fp, #1
   1c82a:	106d      	asrs	r5, r5, #1
   1c82c:	4430      	add	r0, r6
   1c82e:	42a8      	cmp	r0, r5
   1c830:	462a      	mov	r2, r5
   1c832:	bf84      	itt	hi
   1c834:	4605      	movhi	r5, r0
   1c836:	462a      	movhi	r2, r5
   1c838:	055b      	lsls	r3, r3, #21
   1c83a:	d538      	bpl.n	1c8ae <__ssprint_r+0xba>
   1c83c:	4611      	mov	r1, r2
   1c83e:	4650      	mov	r0, sl
   1c840:	f7ff f96c 	bl	1bb1c <_malloc_r>
   1c844:	2800      	cmp	r0, #0
   1c846:	d03c      	beq.n	1c8c2 <__ssprint_r+0xce>
   1c848:	465a      	mov	r2, fp
   1c84a:	6921      	ldr	r1, [r4, #16]
   1c84c:	9001      	str	r0, [sp, #4]
   1c84e:	f7fe fb81 	bl	1af54 <memcpy>
   1c852:	89a2      	ldrh	r2, [r4, #12]
   1c854:	9b01      	ldr	r3, [sp, #4]
   1c856:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1c85a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1c85e:	81a2      	strh	r2, [r4, #12]
   1c860:	eba5 020b 	sub.w	r2, r5, fp
   1c864:	eb03 000b 	add.w	r0, r3, fp
   1c868:	6165      	str	r5, [r4, #20]
   1c86a:	6123      	str	r3, [r4, #16]
   1c86c:	6020      	str	r0, [r4, #0]
   1c86e:	60a2      	str	r2, [r4, #8]
   1c870:	4635      	mov	r5, r6
   1c872:	46b3      	mov	fp, r6
   1c874:	465a      	mov	r2, fp
   1c876:	4649      	mov	r1, r9
   1c878:	f001 fcc2 	bl	1e200 <memmove>
   1c87c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1c880:	68a2      	ldr	r2, [r4, #8]
   1c882:	6820      	ldr	r0, [r4, #0]
   1c884:	1b55      	subs	r5, r2, r5
   1c886:	4458      	add	r0, fp
   1c888:	1b9e      	subs	r6, r3, r6
   1c88a:	60a5      	str	r5, [r4, #8]
   1c88c:	6020      	str	r0, [r4, #0]
   1c88e:	f8c8 6008 	str.w	r6, [r8, #8]
   1c892:	b33e      	cbz	r6, 1c8e4 <__ssprint_r+0xf0>
   1c894:	687e      	ldr	r6, [r7, #4]
   1c896:	463b      	mov	r3, r7
   1c898:	3708      	adds	r7, #8
   1c89a:	2e00      	cmp	r6, #0
   1c89c:	d0fa      	beq.n	1c894 <__ssprint_r+0xa0>
   1c89e:	42ae      	cmp	r6, r5
   1c8a0:	f8d3 9000 	ldr.w	r9, [r3]
   1c8a4:	46ab      	mov	fp, r5
   1c8a6:	d2b2      	bcs.n	1c80e <__ssprint_r+0x1a>
   1c8a8:	4635      	mov	r5, r6
   1c8aa:	46b3      	mov	fp, r6
   1c8ac:	e7e2      	b.n	1c874 <__ssprint_r+0x80>
   1c8ae:	4650      	mov	r0, sl
   1c8b0:	f001 fd0a 	bl	1e2c8 <_realloc_r>
   1c8b4:	4603      	mov	r3, r0
   1c8b6:	2800      	cmp	r0, #0
   1c8b8:	d1d2      	bne.n	1c860 <__ssprint_r+0x6c>
   1c8ba:	6921      	ldr	r1, [r4, #16]
   1c8bc:	4650      	mov	r0, sl
   1c8be:	f001 fb47 	bl	1df50 <_free_r>
   1c8c2:	230c      	movs	r3, #12
   1c8c4:	f8ca 3000 	str.w	r3, [sl]
   1c8c8:	89a3      	ldrh	r3, [r4, #12]
   1c8ca:	2200      	movs	r2, #0
   1c8cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c8d0:	f04f 30ff 	mov.w	r0, #4294967295
   1c8d4:	81a3      	strh	r3, [r4, #12]
   1c8d6:	f8c8 2008 	str.w	r2, [r8, #8]
   1c8da:	f8c8 2004 	str.w	r2, [r8, #4]
   1c8de:	b003      	add	sp, #12
   1c8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8e4:	2000      	movs	r0, #0
   1c8e6:	f8c8 0004 	str.w	r0, [r8, #4]
   1c8ea:	b003      	add	sp, #12
   1c8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c8f0 <_svfiprintf_r>:
   1c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8f4:	b0ad      	sub	sp, #180	; 0xb4
   1c8f6:	460c      	mov	r4, r1
   1c8f8:	9105      	str	r1, [sp, #20]
   1c8fa:	8989      	ldrh	r1, [r1, #12]
   1c8fc:	9307      	str	r3, [sp, #28]
   1c8fe:	060d      	lsls	r5, r1, #24
   1c900:	900a      	str	r0, [sp, #40]	; 0x28
   1c902:	d503      	bpl.n	1c90c <_svfiprintf_r+0x1c>
   1c904:	6923      	ldr	r3, [r4, #16]
   1c906:	2b00      	cmp	r3, #0
   1c908:	f000 84d6 	beq.w	1d2b8 <_svfiprintf_r+0x9c8>
   1c90c:	2300      	movs	r3, #0
   1c90e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   1c912:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1c914:	930b      	str	r3, [sp, #44]	; 0x2c
   1c916:	4693      	mov	fp, r2
   1c918:	9311      	str	r3, [sp, #68]	; 0x44
   1c91a:	9310      	str	r3, [sp, #64]	; 0x40
   1c91c:	9302      	str	r3, [sp, #8]
   1c91e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   1c922:	46d1      	mov	r9, sl
   1c924:	f89b 3000 	ldrb.w	r3, [fp]
   1c928:	465c      	mov	r4, fp
   1c92a:	b1eb      	cbz	r3, 1c968 <_svfiprintf_r+0x78>
   1c92c:	2b25      	cmp	r3, #37	; 0x25
   1c92e:	d102      	bne.n	1c936 <_svfiprintf_r+0x46>
   1c930:	e01a      	b.n	1c968 <_svfiprintf_r+0x78>
   1c932:	2b25      	cmp	r3, #37	; 0x25
   1c934:	d003      	beq.n	1c93e <_svfiprintf_r+0x4e>
   1c936:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1c93a:	2b00      	cmp	r3, #0
   1c93c:	d1f9      	bne.n	1c932 <_svfiprintf_r+0x42>
   1c93e:	eba4 050b 	sub.w	r5, r4, fp
   1c942:	b18d      	cbz	r5, 1c968 <_svfiprintf_r+0x78>
   1c944:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1c946:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1c948:	f8c9 b000 	str.w	fp, [r9]
   1c94c:	3301      	adds	r3, #1
   1c94e:	442a      	add	r2, r5
   1c950:	2b07      	cmp	r3, #7
   1c952:	f8c9 5004 	str.w	r5, [r9, #4]
   1c956:	9211      	str	r2, [sp, #68]	; 0x44
   1c958:	9310      	str	r3, [sp, #64]	; 0x40
   1c95a:	f300 83c3 	bgt.w	1d0e4 <_svfiprintf_r+0x7f4>
   1c95e:	f109 0908 	add.w	r9, r9, #8
   1c962:	9b02      	ldr	r3, [sp, #8]
   1c964:	442b      	add	r3, r5
   1c966:	9302      	str	r3, [sp, #8]
   1c968:	7823      	ldrb	r3, [r4, #0]
   1c96a:	2b00      	cmp	r3, #0
   1c96c:	f000 834b 	beq.w	1d006 <_svfiprintf_r+0x716>
   1c970:	2000      	movs	r0, #0
   1c972:	f04f 0300 	mov.w	r3, #0
   1c976:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1c97a:	f104 0b01 	add.w	fp, r4, #1
   1c97e:	7862      	ldrb	r2, [r4, #1]
   1c980:	4605      	mov	r5, r0
   1c982:	4603      	mov	r3, r0
   1c984:	f04f 38ff 	mov.w	r8, #4294967295
   1c988:	4604      	mov	r4, r0
   1c98a:	f10b 0b01 	add.w	fp, fp, #1
   1c98e:	f1a2 0120 	sub.w	r1, r2, #32
   1c992:	2958      	cmp	r1, #88	; 0x58
   1c994:	f200 826b 	bhi.w	1ce6e <_svfiprintf_r+0x57e>
   1c998:	e8df f011 	tbh	[pc, r1, lsl #1]
   1c99c:	026900bd 	.word	0x026900bd
   1c9a0:	00b80269 	.word	0x00b80269
   1c9a4:	02690269 	.word	0x02690269
   1c9a8:	02690269 	.word	0x02690269
   1c9ac:	02690269 	.word	0x02690269
   1c9b0:	00b30059 	.word	0x00b30059
   1c9b4:	00630269 	.word	0x00630269
   1c9b8:	026901c0 	.word	0x026901c0
   1c9bc:	01ad01bb 	.word	0x01ad01bb
   1c9c0:	01ad01ad 	.word	0x01ad01ad
   1c9c4:	01ad01ad 	.word	0x01ad01ad
   1c9c8:	01ad01ad 	.word	0x01ad01ad
   1c9cc:	01ad01ad 	.word	0x01ad01ad
   1c9d0:	02690269 	.word	0x02690269
   1c9d4:	02690269 	.word	0x02690269
   1c9d8:	02690269 	.word	0x02690269
   1c9dc:	02690269 	.word	0x02690269
   1c9e0:	02690269 	.word	0x02690269
   1c9e4:	0269015f 	.word	0x0269015f
   1c9e8:	02690269 	.word	0x02690269
   1c9ec:	02690269 	.word	0x02690269
   1c9f0:	02690269 	.word	0x02690269
   1c9f4:	02690269 	.word	0x02690269
   1c9f8:	014d0269 	.word	0x014d0269
   1c9fc:	02690269 	.word	0x02690269
   1ca00:	02690269 	.word	0x02690269
   1ca04:	013c0269 	.word	0x013c0269
   1ca08:	02690269 	.word	0x02690269
   1ca0c:	02690125 	.word	0x02690125
   1ca10:	02690269 	.word	0x02690269
   1ca14:	02690269 	.word	0x02690269
   1ca18:	02690269 	.word	0x02690269
   1ca1c:	02690269 	.word	0x02690269
   1ca20:	00c50269 	.word	0x00c50269
   1ca24:	02690200 	.word	0x02690200
   1ca28:	02690269 	.word	0x02690269
   1ca2c:	020001fb 	.word	0x020001fb
   1ca30:	02690269 	.word	0x02690269
   1ca34:	026901ee 	.word	0x026901ee
   1ca38:	007a01da 	.word	0x007a01da
   1ca3c:	02310236 	.word	0x02310236
   1ca40:	020e0269 	.word	0x020e0269
   1ca44:	00680269 	.word	0x00680269
   1ca48:	02690269 	.word	0x02690269
   1ca4c:	008f      	.short	0x008f
   1ca4e:	9907      	ldr	r1, [sp, #28]
   1ca50:	680c      	ldr	r4, [r1, #0]
   1ca52:	460a      	mov	r2, r1
   1ca54:	2c00      	cmp	r4, #0
   1ca56:	f102 0204 	add.w	r2, r2, #4
   1ca5a:	f280 83c9 	bge.w	1d1f0 <_svfiprintf_r+0x900>
   1ca5e:	4264      	negs	r4, r4
   1ca60:	9207      	str	r2, [sp, #28]
   1ca62:	f043 0304 	orr.w	r3, r3, #4
   1ca66:	f89b 2000 	ldrb.w	r2, [fp]
   1ca6a:	e78e      	b.n	1c98a <_svfiprintf_r+0x9a>
   1ca6c:	9406      	str	r4, [sp, #24]
   1ca6e:	069c      	lsls	r4, r3, #26
   1ca70:	f100 80d6 	bmi.w	1cc20 <_svfiprintf_r+0x330>
   1ca74:	9907      	ldr	r1, [sp, #28]
   1ca76:	06d8      	lsls	r0, r3, #27
   1ca78:	460a      	mov	r2, r1
   1ca7a:	f100 820a 	bmi.w	1ce92 <_svfiprintf_r+0x5a2>
   1ca7e:	065e      	lsls	r6, r3, #25
   1ca80:	f140 8207 	bpl.w	1ce92 <_svfiprintf_r+0x5a2>
   1ca84:	880c      	ldrh	r4, [r1, #0]
   1ca86:	3104      	adds	r1, #4
   1ca88:	2500      	movs	r5, #0
   1ca8a:	2201      	movs	r2, #1
   1ca8c:	9107      	str	r1, [sp, #28]
   1ca8e:	e1cc      	b.n	1ce2a <_svfiprintf_r+0x53a>
   1ca90:	f013 0220 	ands.w	r2, r3, #32
   1ca94:	9406      	str	r4, [sp, #24]
   1ca96:	f040 80d5 	bne.w	1cc44 <_svfiprintf_r+0x354>
   1ca9a:	f013 0110 	ands.w	r1, r3, #16
   1ca9e:	f040 81fe 	bne.w	1ce9e <_svfiprintf_r+0x5ae>
   1caa2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   1caa6:	f000 81fa 	beq.w	1ce9e <_svfiprintf_r+0x5ae>
   1caaa:	9807      	ldr	r0, [sp, #28]
   1caac:	460a      	mov	r2, r1
   1caae:	4601      	mov	r1, r0
   1cab0:	3104      	adds	r1, #4
   1cab2:	8804      	ldrh	r4, [r0, #0]
   1cab4:	9107      	str	r1, [sp, #28]
   1cab6:	2500      	movs	r5, #0
   1cab8:	e1b7      	b.n	1ce2a <_svfiprintf_r+0x53a>
   1caba:	9406      	str	r4, [sp, #24]
   1cabc:	2800      	cmp	r0, #0
   1cabe:	f040 8431 	bne.w	1d324 <_svfiprintf_r+0xa34>
   1cac2:	49ba      	ldr	r1, [pc, #744]	; (1cdac <_svfiprintf_r+0x4bc>)
   1cac4:	910b      	str	r1, [sp, #44]	; 0x2c
   1cac6:	069d      	lsls	r5, r3, #26
   1cac8:	f100 8096 	bmi.w	1cbf8 <_svfiprintf_r+0x308>
   1cacc:	9807      	ldr	r0, [sp, #28]
   1cace:	06dc      	lsls	r4, r3, #27
   1cad0:	4601      	mov	r1, r0
   1cad2:	d402      	bmi.n	1cada <_svfiprintf_r+0x1ea>
   1cad4:	0658      	lsls	r0, r3, #25
   1cad6:	f100 83a9 	bmi.w	1d22c <_svfiprintf_r+0x93c>
   1cada:	680c      	ldr	r4, [r1, #0]
   1cadc:	3104      	adds	r1, #4
   1cade:	9107      	str	r1, [sp, #28]
   1cae0:	2500      	movs	r5, #0
   1cae2:	07d9      	lsls	r1, r3, #31
   1cae4:	f140 8094 	bpl.w	1cc10 <_svfiprintf_r+0x320>
   1cae8:	ea54 0105 	orrs.w	r1, r4, r5
   1caec:	f000 8090 	beq.w	1cc10 <_svfiprintf_r+0x320>
   1caf0:	2130      	movs	r1, #48	; 0x30
   1caf2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1caf6:	f043 0302 	orr.w	r3, r3, #2
   1cafa:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1cafe:	2202      	movs	r2, #2
   1cb00:	e193      	b.n	1ce2a <_svfiprintf_r+0x53a>
   1cb02:	f89b 2000 	ldrb.w	r2, [fp]
   1cb06:	2001      	movs	r0, #1
   1cb08:	252b      	movs	r5, #43	; 0x2b
   1cb0a:	e73e      	b.n	1c98a <_svfiprintf_r+0x9a>
   1cb0c:	f043 0301 	orr.w	r3, r3, #1
   1cb10:	f89b 2000 	ldrb.w	r2, [fp]
   1cb14:	e739      	b.n	1c98a <_svfiprintf_r+0x9a>
   1cb16:	f89b 2000 	ldrb.w	r2, [fp]
   1cb1a:	2d00      	cmp	r5, #0
   1cb1c:	f47f af35 	bne.w	1c98a <_svfiprintf_r+0x9a>
   1cb20:	2001      	movs	r0, #1
   1cb22:	2520      	movs	r5, #32
   1cb24:	e731      	b.n	1c98a <_svfiprintf_r+0x9a>
   1cb26:	9907      	ldr	r1, [sp, #28]
   1cb28:	9406      	str	r4, [sp, #24]
   1cb2a:	680a      	ldr	r2, [r1, #0]
   1cb2c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1cb30:	f04f 0000 	mov.w	r0, #0
   1cb34:	460a      	mov	r2, r1
   1cb36:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1cb3a:	3204      	adds	r2, #4
   1cb3c:	2001      	movs	r0, #1
   1cb3e:	9000      	str	r0, [sp, #0]
   1cb40:	9207      	str	r2, [sp, #28]
   1cb42:	9004      	str	r0, [sp, #16]
   1cb44:	ae12      	add	r6, sp, #72	; 0x48
   1cb46:	9301      	str	r3, [sp, #4]
   1cb48:	f04f 0800 	mov.w	r8, #0
   1cb4c:	9b01      	ldr	r3, [sp, #4]
   1cb4e:	f013 0302 	ands.w	r3, r3, #2
   1cb52:	9308      	str	r3, [sp, #32]
   1cb54:	d002      	beq.n	1cb5c <_svfiprintf_r+0x26c>
   1cb56:	9b00      	ldr	r3, [sp, #0]
   1cb58:	3302      	adds	r3, #2
   1cb5a:	9300      	str	r3, [sp, #0]
   1cb5c:	9b01      	ldr	r3, [sp, #4]
   1cb5e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   1cb62:	9309      	str	r3, [sp, #36]	; 0x24
   1cb64:	f040 81a2 	bne.w	1ceac <_svfiprintf_r+0x5bc>
   1cb68:	9b06      	ldr	r3, [sp, #24]
   1cb6a:	9a00      	ldr	r2, [sp, #0]
   1cb6c:	1a9c      	subs	r4, r3, r2
   1cb6e:	2c00      	cmp	r4, #0
   1cb70:	f340 819c 	ble.w	1ceac <_svfiprintf_r+0x5bc>
   1cb74:	2c10      	cmp	r4, #16
   1cb76:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cb78:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1cb7a:	4d8d      	ldr	r5, [pc, #564]	; (1cdb0 <_svfiprintf_r+0x4c0>)
   1cb7c:	dd25      	ble.n	1cbca <_svfiprintf_r+0x2da>
   1cb7e:	4648      	mov	r0, r9
   1cb80:	2310      	movs	r3, #16
   1cb82:	46c1      	mov	r9, r8
   1cb84:	46b0      	mov	r8, r6
   1cb86:	9e05      	ldr	r6, [sp, #20]
   1cb88:	e004      	b.n	1cb94 <_svfiprintf_r+0x2a4>
   1cb8a:	3c10      	subs	r4, #16
   1cb8c:	2c10      	cmp	r4, #16
   1cb8e:	f100 0008 	add.w	r0, r0, #8
   1cb92:	dd17      	ble.n	1cbc4 <_svfiprintf_r+0x2d4>
   1cb94:	3201      	adds	r2, #1
   1cb96:	3110      	adds	r1, #16
   1cb98:	2a07      	cmp	r2, #7
   1cb9a:	9111      	str	r1, [sp, #68]	; 0x44
   1cb9c:	9210      	str	r2, [sp, #64]	; 0x40
   1cb9e:	6005      	str	r5, [r0, #0]
   1cba0:	6043      	str	r3, [r0, #4]
   1cba2:	ddf2      	ble.n	1cb8a <_svfiprintf_r+0x29a>
   1cba4:	aa0f      	add	r2, sp, #60	; 0x3c
   1cba6:	4631      	mov	r1, r6
   1cba8:	4638      	mov	r0, r7
   1cbaa:	9303      	str	r3, [sp, #12]
   1cbac:	f7ff fe22 	bl	1c7f4 <__ssprint_r>
   1cbb0:	2800      	cmp	r0, #0
   1cbb2:	f040 822f 	bne.w	1d014 <_svfiprintf_r+0x724>
   1cbb6:	3c10      	subs	r4, #16
   1cbb8:	2c10      	cmp	r4, #16
   1cbba:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cbbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1cbbe:	9b03      	ldr	r3, [sp, #12]
   1cbc0:	4650      	mov	r0, sl
   1cbc2:	dce7      	bgt.n	1cb94 <_svfiprintf_r+0x2a4>
   1cbc4:	4646      	mov	r6, r8
   1cbc6:	46c8      	mov	r8, r9
   1cbc8:	4681      	mov	r9, r0
   1cbca:	1c53      	adds	r3, r2, #1
   1cbcc:	4421      	add	r1, r4
   1cbce:	2b07      	cmp	r3, #7
   1cbd0:	9111      	str	r1, [sp, #68]	; 0x44
   1cbd2:	9310      	str	r3, [sp, #64]	; 0x40
   1cbd4:	f8c9 5000 	str.w	r5, [r9]
   1cbd8:	f8c9 4004 	str.w	r4, [r9, #4]
   1cbdc:	f300 82f2 	bgt.w	1d1c4 <_svfiprintf_r+0x8d4>
   1cbe0:	f109 0908 	add.w	r9, r9, #8
   1cbe4:	e164      	b.n	1ceb0 <_svfiprintf_r+0x5c0>
   1cbe6:	9406      	str	r4, [sp, #24]
   1cbe8:	2800      	cmp	r0, #0
   1cbea:	f040 83a5 	bne.w	1d338 <_svfiprintf_r+0xa48>
   1cbee:	4971      	ldr	r1, [pc, #452]	; (1cdb4 <_svfiprintf_r+0x4c4>)
   1cbf0:	910b      	str	r1, [sp, #44]	; 0x2c
   1cbf2:	069d      	lsls	r5, r3, #26
   1cbf4:	f57f af6a 	bpl.w	1cacc <_svfiprintf_r+0x1dc>
   1cbf8:	9c07      	ldr	r4, [sp, #28]
   1cbfa:	3407      	adds	r4, #7
   1cbfc:	f024 0107 	bic.w	r1, r4, #7
   1cc00:	f101 0008 	add.w	r0, r1, #8
   1cc04:	e9d1 4500 	ldrd	r4, r5, [r1]
   1cc08:	07d9      	lsls	r1, r3, #31
   1cc0a:	9007      	str	r0, [sp, #28]
   1cc0c:	f53f af6c 	bmi.w	1cae8 <_svfiprintf_r+0x1f8>
   1cc10:	2202      	movs	r2, #2
   1cc12:	e10a      	b.n	1ce2a <_svfiprintf_r+0x53a>
   1cc14:	f043 0310 	orr.w	r3, r3, #16
   1cc18:	9406      	str	r4, [sp, #24]
   1cc1a:	069c      	lsls	r4, r3, #26
   1cc1c:	f57f af2a 	bpl.w	1ca74 <_svfiprintf_r+0x184>
   1cc20:	9c07      	ldr	r4, [sp, #28]
   1cc22:	3407      	adds	r4, #7
   1cc24:	f024 0207 	bic.w	r2, r4, #7
   1cc28:	f102 0108 	add.w	r1, r2, #8
   1cc2c:	e9d2 4500 	ldrd	r4, r5, [r2]
   1cc30:	9107      	str	r1, [sp, #28]
   1cc32:	2201      	movs	r2, #1
   1cc34:	e0f9      	b.n	1ce2a <_svfiprintf_r+0x53a>
   1cc36:	f043 0310 	orr.w	r3, r3, #16
   1cc3a:	f013 0220 	ands.w	r2, r3, #32
   1cc3e:	9406      	str	r4, [sp, #24]
   1cc40:	f43f af2b 	beq.w	1ca9a <_svfiprintf_r+0x1aa>
   1cc44:	9c07      	ldr	r4, [sp, #28]
   1cc46:	3407      	adds	r4, #7
   1cc48:	f024 0207 	bic.w	r2, r4, #7
   1cc4c:	f102 0108 	add.w	r1, r2, #8
   1cc50:	e9d2 4500 	ldrd	r4, r5, [r2]
   1cc54:	9107      	str	r1, [sp, #28]
   1cc56:	2200      	movs	r2, #0
   1cc58:	e0e7      	b.n	1ce2a <_svfiprintf_r+0x53a>
   1cc5a:	9406      	str	r4, [sp, #24]
   1cc5c:	2800      	cmp	r0, #0
   1cc5e:	f040 8365 	bne.w	1d32c <_svfiprintf_r+0xa3c>
   1cc62:	f043 0310 	orr.w	r3, r3, #16
   1cc66:	069c      	lsls	r4, r3, #26
   1cc68:	f100 82fa 	bmi.w	1d260 <_svfiprintf_r+0x970>
   1cc6c:	06d8      	lsls	r0, r3, #27
   1cc6e:	d402      	bmi.n	1cc76 <_svfiprintf_r+0x386>
   1cc70:	0659      	lsls	r1, r3, #25
   1cc72:	f100 82c4 	bmi.w	1d1fe <_svfiprintf_r+0x90e>
   1cc76:	9907      	ldr	r1, [sp, #28]
   1cc78:	680c      	ldr	r4, [r1, #0]
   1cc7a:	460a      	mov	r2, r1
   1cc7c:	17e5      	asrs	r5, r4, #31
   1cc7e:	3204      	adds	r2, #4
   1cc80:	9207      	str	r2, [sp, #28]
   1cc82:	4620      	mov	r0, r4
   1cc84:	4629      	mov	r1, r5
   1cc86:	2800      	cmp	r0, #0
   1cc88:	f171 0200 	sbcs.w	r2, r1, #0
   1cc8c:	f2c0 82c5 	blt.w	1d21a <_svfiprintf_r+0x92a>
   1cc90:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1cc94:	9203      	str	r2, [sp, #12]
   1cc96:	f1b8 3fff 	cmp.w	r8, #4294967295
   1cc9a:	f04f 0201 	mov.w	r2, #1
   1cc9e:	f040 80ce 	bne.w	1ce3e <_svfiprintf_r+0x54e>
   1cca2:	ea54 0105 	orrs.w	r1, r4, r5
   1cca6:	f000 820d 	beq.w	1d0c4 <_svfiprintf_r+0x7d4>
   1ccaa:	9301      	str	r3, [sp, #4]
   1ccac:	2a01      	cmp	r2, #1
   1ccae:	f000 826b 	beq.w	1d188 <_svfiprintf_r+0x898>
   1ccb2:	2a02      	cmp	r2, #2
   1ccb4:	f040 822d 	bne.w	1d112 <_svfiprintf_r+0x822>
   1ccb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ccba:	4656      	mov	r6, sl
   1ccbc:	0923      	lsrs	r3, r4, #4
   1ccbe:	f004 010f 	and.w	r1, r4, #15
   1ccc2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1ccc6:	092a      	lsrs	r2, r5, #4
   1ccc8:	461c      	mov	r4, r3
   1ccca:	4615      	mov	r5, r2
   1cccc:	5c43      	ldrb	r3, [r0, r1]
   1ccce:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1ccd2:	ea54 0305 	orrs.w	r3, r4, r5
   1ccd6:	d1f1      	bne.n	1ccbc <_svfiprintf_r+0x3cc>
   1ccd8:	ebaa 0306 	sub.w	r3, sl, r6
   1ccdc:	9304      	str	r3, [sp, #16]
   1ccde:	9b04      	ldr	r3, [sp, #16]
   1cce0:	9a03      	ldr	r2, [sp, #12]
   1cce2:	4543      	cmp	r3, r8
   1cce4:	bfb8      	it	lt
   1cce6:	4643      	movlt	r3, r8
   1cce8:	9300      	str	r3, [sp, #0]
   1ccea:	2a00      	cmp	r2, #0
   1ccec:	f43f af2e 	beq.w	1cb4c <_svfiprintf_r+0x25c>
   1ccf0:	3301      	adds	r3, #1
   1ccf2:	9300      	str	r3, [sp, #0]
   1ccf4:	e72a      	b.n	1cb4c <_svfiprintf_r+0x25c>
   1ccf6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1ccfa:	2400      	movs	r4, #0
   1ccfc:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1cd00:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1cd04:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   1cd08:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1cd0c:	2909      	cmp	r1, #9
   1cd0e:	d9f5      	bls.n	1ccfc <_svfiprintf_r+0x40c>
   1cd10:	e63d      	b.n	1c98e <_svfiprintf_r+0x9e>
   1cd12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1cd16:	f89b 2000 	ldrb.w	r2, [fp]
   1cd1a:	e636      	b.n	1c98a <_svfiprintf_r+0x9a>
   1cd1c:	f89b 2000 	ldrb.w	r2, [fp]
   1cd20:	2a2a      	cmp	r2, #42	; 0x2a
   1cd22:	f10b 0601 	add.w	r6, fp, #1
   1cd26:	f000 82e7 	beq.w	1d2f8 <_svfiprintf_r+0xa08>
   1cd2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1cd2e:	2909      	cmp	r1, #9
   1cd30:	46b3      	mov	fp, r6
   1cd32:	f04f 0800 	mov.w	r8, #0
   1cd36:	f63f ae2a 	bhi.w	1c98e <_svfiprintf_r+0x9e>
   1cd3a:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1cd3e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1cd42:	eb01 0848 	add.w	r8, r1, r8, lsl #1
   1cd46:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1cd4a:	2909      	cmp	r1, #9
   1cd4c:	d9f5      	bls.n	1cd3a <_svfiprintf_r+0x44a>
   1cd4e:	e61e      	b.n	1c98e <_svfiprintf_r+0x9e>
   1cd50:	2800      	cmp	r0, #0
   1cd52:	f040 82dd 	bne.w	1d310 <_svfiprintf_r+0xa20>
   1cd56:	069a      	lsls	r2, r3, #26
   1cd58:	f100 8276 	bmi.w	1d248 <_svfiprintf_r+0x958>
   1cd5c:	06de      	lsls	r6, r3, #27
   1cd5e:	f100 8297 	bmi.w	1d290 <_svfiprintf_r+0x9a0>
   1cd62:	065d      	lsls	r5, r3, #25
   1cd64:	f140 8294 	bpl.w	1d290 <_svfiprintf_r+0x9a0>
   1cd68:	9a07      	ldr	r2, [sp, #28]
   1cd6a:	6813      	ldr	r3, [r2, #0]
   1cd6c:	3204      	adds	r2, #4
   1cd6e:	9207      	str	r2, [sp, #28]
   1cd70:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1cd74:	801a      	strh	r2, [r3, #0]
   1cd76:	e5d5      	b.n	1c924 <_svfiprintf_r+0x34>
   1cd78:	f89b 2000 	ldrb.w	r2, [fp]
   1cd7c:	2a6c      	cmp	r2, #108	; 0x6c
   1cd7e:	bf03      	ittte	eq
   1cd80:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
   1cd84:	f043 0320 	orreq.w	r3, r3, #32
   1cd88:	f10b 0b01 	addeq.w	fp, fp, #1
   1cd8c:	f043 0310 	orrne.w	r3, r3, #16
   1cd90:	e5fb      	b.n	1c98a <_svfiprintf_r+0x9a>
   1cd92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1cd96:	f89b 2000 	ldrb.w	r2, [fp]
   1cd9a:	e5f6      	b.n	1c98a <_svfiprintf_r+0x9a>
   1cd9c:	9406      	str	r4, [sp, #24]
   1cd9e:	2800      	cmp	r0, #0
   1cda0:	f43f af61 	beq.w	1cc66 <_svfiprintf_r+0x376>
   1cda4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1cda8:	e75d      	b.n	1cc66 <_svfiprintf_r+0x376>
   1cdaa:	bf00      	nop
   1cdac:	00020ff0 	.word	0x00020ff0
   1cdb0:	0002100c 	.word	0x0002100c
   1cdb4:	00020fdc 	.word	0x00020fdc
   1cdb8:	9907      	ldr	r1, [sp, #28]
   1cdba:	9406      	str	r4, [sp, #24]
   1cdbc:	680e      	ldr	r6, [r1, #0]
   1cdbe:	f04f 0200 	mov.w	r2, #0
   1cdc2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1cdc6:	1d0c      	adds	r4, r1, #4
   1cdc8:	2e00      	cmp	r6, #0
   1cdca:	f000 8283 	beq.w	1d2d4 <_svfiprintf_r+0x9e4>
   1cdce:	f1b8 3fff 	cmp.w	r8, #4294967295
   1cdd2:	f000 8265 	beq.w	1d2a0 <_svfiprintf_r+0x9b0>
   1cdd6:	4642      	mov	r2, r8
   1cdd8:	2100      	movs	r1, #0
   1cdda:	4630      	mov	r0, r6
   1cddc:	9300      	str	r3, [sp, #0]
   1cdde:	f7ff f94f 	bl	1c080 <memchr>
   1cde2:	9b00      	ldr	r3, [sp, #0]
   1cde4:	2800      	cmp	r0, #0
   1cde6:	f000 827e 	beq.w	1d2e6 <_svfiprintf_r+0x9f6>
   1cdea:	1b82      	subs	r2, r0, r6
   1cdec:	9301      	str	r3, [sp, #4]
   1cdee:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1cdf2:	9204      	str	r2, [sp, #16]
   1cdf4:	9407      	str	r4, [sp, #28]
   1cdf6:	9303      	str	r3, [sp, #12]
   1cdf8:	f04f 0800 	mov.w	r8, #0
   1cdfc:	e76f      	b.n	1ccde <_svfiprintf_r+0x3ee>
   1cdfe:	f043 0320 	orr.w	r3, r3, #32
   1ce02:	f89b 2000 	ldrb.w	r2, [fp]
   1ce06:	e5c0      	b.n	1c98a <_svfiprintf_r+0x9a>
   1ce08:	9807      	ldr	r0, [sp, #28]
   1ce0a:	4ab3      	ldr	r2, [pc, #716]	; (1d0d8 <_svfiprintf_r+0x7e8>)
   1ce0c:	9406      	str	r4, [sp, #24]
   1ce0e:	920b      	str	r2, [sp, #44]	; 0x2c
   1ce10:	6804      	ldr	r4, [r0, #0]
   1ce12:	2278      	movs	r2, #120	; 0x78
   1ce14:	2130      	movs	r1, #48	; 0x30
   1ce16:	3004      	adds	r0, #4
   1ce18:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1ce1c:	f043 0302 	orr.w	r3, r3, #2
   1ce20:	9007      	str	r0, [sp, #28]
   1ce22:	2500      	movs	r5, #0
   1ce24:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1ce28:	2202      	movs	r2, #2
   1ce2a:	f04f 0100 	mov.w	r1, #0
   1ce2e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   1ce32:	2100      	movs	r1, #0
   1ce34:	9103      	str	r1, [sp, #12]
   1ce36:	f1b8 3fff 	cmp.w	r8, #4294967295
   1ce3a:	f43f af32 	beq.w	1cca2 <_svfiprintf_r+0x3b2>
   1ce3e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   1ce42:	9101      	str	r1, [sp, #4]
   1ce44:	ea54 0105 	orrs.w	r1, r4, r5
   1ce48:	f47f af30 	bne.w	1ccac <_svfiprintf_r+0x3bc>
   1ce4c:	f1b8 0f00 	cmp.w	r8, #0
   1ce50:	f040 8137 	bne.w	1d0c2 <_svfiprintf_r+0x7d2>
   1ce54:	2a00      	cmp	r2, #0
   1ce56:	f040 81b1 	bne.w	1d1bc <_svfiprintf_r+0x8cc>
   1ce5a:	f013 0301 	ands.w	r3, r3, #1
   1ce5e:	9304      	str	r3, [sp, #16]
   1ce60:	f000 81cb 	beq.w	1d1fa <_svfiprintf_r+0x90a>
   1ce64:	ae2c      	add	r6, sp, #176	; 0xb0
   1ce66:	2330      	movs	r3, #48	; 0x30
   1ce68:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1ce6c:	e737      	b.n	1ccde <_svfiprintf_r+0x3ee>
   1ce6e:	9406      	str	r4, [sp, #24]
   1ce70:	2800      	cmp	r0, #0
   1ce72:	f040 825e 	bne.w	1d332 <_svfiprintf_r+0xa42>
   1ce76:	2a00      	cmp	r2, #0
   1ce78:	f000 80c5 	beq.w	1d006 <_svfiprintf_r+0x716>
   1ce7c:	2101      	movs	r1, #1
   1ce7e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1ce82:	f04f 0200 	mov.w	r2, #0
   1ce86:	9100      	str	r1, [sp, #0]
   1ce88:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1ce8c:	9104      	str	r1, [sp, #16]
   1ce8e:	ae12      	add	r6, sp, #72	; 0x48
   1ce90:	e659      	b.n	1cb46 <_svfiprintf_r+0x256>
   1ce92:	3104      	adds	r1, #4
   1ce94:	6814      	ldr	r4, [r2, #0]
   1ce96:	9107      	str	r1, [sp, #28]
   1ce98:	2201      	movs	r2, #1
   1ce9a:	2500      	movs	r5, #0
   1ce9c:	e7c5      	b.n	1ce2a <_svfiprintf_r+0x53a>
   1ce9e:	9807      	ldr	r0, [sp, #28]
   1cea0:	4601      	mov	r1, r0
   1cea2:	3104      	adds	r1, #4
   1cea4:	6804      	ldr	r4, [r0, #0]
   1cea6:	9107      	str	r1, [sp, #28]
   1cea8:	2500      	movs	r5, #0
   1ceaa:	e7be      	b.n	1ce2a <_svfiprintf_r+0x53a>
   1ceac:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ceae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ceb0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1ceb4:	b16a      	cbz	r2, 1ced2 <_svfiprintf_r+0x5e2>
   1ceb6:	3301      	adds	r3, #1
   1ceb8:	3101      	adds	r1, #1
   1ceba:	f10d 0037 	add.w	r0, sp, #55	; 0x37
   1cebe:	2201      	movs	r2, #1
   1cec0:	2b07      	cmp	r3, #7
   1cec2:	9111      	str	r1, [sp, #68]	; 0x44
   1cec4:	9310      	str	r3, [sp, #64]	; 0x40
   1cec6:	e889 0005 	stmia.w	r9, {r0, r2}
   1ceca:	f300 8145 	bgt.w	1d158 <_svfiprintf_r+0x868>
   1cece:	f109 0908 	add.w	r9, r9, #8
   1ced2:	9a08      	ldr	r2, [sp, #32]
   1ced4:	b162      	cbz	r2, 1cef0 <_svfiprintf_r+0x600>
   1ced6:	3301      	adds	r3, #1
   1ced8:	3102      	adds	r1, #2
   1ceda:	a80e      	add	r0, sp, #56	; 0x38
   1cedc:	2202      	movs	r2, #2
   1cede:	2b07      	cmp	r3, #7
   1cee0:	9111      	str	r1, [sp, #68]	; 0x44
   1cee2:	9310      	str	r3, [sp, #64]	; 0x40
   1cee4:	e889 0005 	stmia.w	r9, {r0, r2}
   1cee8:	f300 8142 	bgt.w	1d170 <_svfiprintf_r+0x880>
   1ceec:	f109 0908 	add.w	r9, r9, #8
   1cef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cef2:	2a80      	cmp	r2, #128	; 0x80
   1cef4:	f000 809b 	beq.w	1d02e <_svfiprintf_r+0x73e>
   1cef8:	9a04      	ldr	r2, [sp, #16]
   1cefa:	eba8 0502 	sub.w	r5, r8, r2
   1cefe:	2d00      	cmp	r5, #0
   1cf00:	dd31      	ble.n	1cf66 <_svfiprintf_r+0x676>
   1cf02:	2d10      	cmp	r5, #16
   1cf04:	4c75      	ldr	r4, [pc, #468]	; (1d0dc <_svfiprintf_r+0x7ec>)
   1cf06:	dd23      	ble.n	1cf50 <_svfiprintf_r+0x660>
   1cf08:	464a      	mov	r2, r9
   1cf0a:	f04f 0810 	mov.w	r8, #16
   1cf0e:	46b1      	mov	r9, r6
   1cf10:	4626      	mov	r6, r4
   1cf12:	9c05      	ldr	r4, [sp, #20]
   1cf14:	e004      	b.n	1cf20 <_svfiprintf_r+0x630>
   1cf16:	3d10      	subs	r5, #16
   1cf18:	2d10      	cmp	r5, #16
   1cf1a:	f102 0208 	add.w	r2, r2, #8
   1cf1e:	dd14      	ble.n	1cf4a <_svfiprintf_r+0x65a>
   1cf20:	3301      	adds	r3, #1
   1cf22:	3110      	adds	r1, #16
   1cf24:	2b07      	cmp	r3, #7
   1cf26:	9111      	str	r1, [sp, #68]	; 0x44
   1cf28:	9310      	str	r3, [sp, #64]	; 0x40
   1cf2a:	e882 0140 	stmia.w	r2, {r6, r8}
   1cf2e:	ddf2      	ble.n	1cf16 <_svfiprintf_r+0x626>
   1cf30:	aa0f      	add	r2, sp, #60	; 0x3c
   1cf32:	4621      	mov	r1, r4
   1cf34:	4638      	mov	r0, r7
   1cf36:	f7ff fc5d 	bl	1c7f4 <__ssprint_r>
   1cf3a:	2800      	cmp	r0, #0
   1cf3c:	d16a      	bne.n	1d014 <_svfiprintf_r+0x724>
   1cf3e:	3d10      	subs	r5, #16
   1cf40:	2d10      	cmp	r5, #16
   1cf42:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cf44:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cf46:	4652      	mov	r2, sl
   1cf48:	dcea      	bgt.n	1cf20 <_svfiprintf_r+0x630>
   1cf4a:	4634      	mov	r4, r6
   1cf4c:	464e      	mov	r6, r9
   1cf4e:	4691      	mov	r9, r2
   1cf50:	3301      	adds	r3, #1
   1cf52:	4429      	add	r1, r5
   1cf54:	2b07      	cmp	r3, #7
   1cf56:	9111      	str	r1, [sp, #68]	; 0x44
   1cf58:	9310      	str	r3, [sp, #64]	; 0x40
   1cf5a:	e889 0030 	stmia.w	r9, {r4, r5}
   1cf5e:	f300 80ca 	bgt.w	1d0f6 <_svfiprintf_r+0x806>
   1cf62:	f109 0908 	add.w	r9, r9, #8
   1cf66:	9804      	ldr	r0, [sp, #16]
   1cf68:	f8c9 6000 	str.w	r6, [r9]
   1cf6c:	3301      	adds	r3, #1
   1cf6e:	4401      	add	r1, r0
   1cf70:	2b07      	cmp	r3, #7
   1cf72:	9111      	str	r1, [sp, #68]	; 0x44
   1cf74:	9310      	str	r3, [sp, #64]	; 0x40
   1cf76:	f8c9 0004 	str.w	r0, [r9, #4]
   1cf7a:	f300 8090 	bgt.w	1d09e <_svfiprintf_r+0x7ae>
   1cf7e:	f109 0908 	add.w	r9, r9, #8
   1cf82:	9b01      	ldr	r3, [sp, #4]
   1cf84:	075b      	lsls	r3, r3, #29
   1cf86:	d530      	bpl.n	1cfea <_svfiprintf_r+0x6fa>
   1cf88:	9b06      	ldr	r3, [sp, #24]
   1cf8a:	9a00      	ldr	r2, [sp, #0]
   1cf8c:	1a9c      	subs	r4, r3, r2
   1cf8e:	2c00      	cmp	r4, #0
   1cf90:	dd2b      	ble.n	1cfea <_svfiprintf_r+0x6fa>
   1cf92:	2c10      	cmp	r4, #16
   1cf94:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cf96:	4d52      	ldr	r5, [pc, #328]	; (1d0e0 <_svfiprintf_r+0x7f0>)
   1cf98:	dd1c      	ble.n	1cfd4 <_svfiprintf_r+0x6e4>
   1cf9a:	2610      	movs	r6, #16
   1cf9c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1cfa0:	e004      	b.n	1cfac <_svfiprintf_r+0x6bc>
   1cfa2:	3c10      	subs	r4, #16
   1cfa4:	2c10      	cmp	r4, #16
   1cfa6:	f109 0908 	add.w	r9, r9, #8
   1cfaa:	dd13      	ble.n	1cfd4 <_svfiprintf_r+0x6e4>
   1cfac:	3301      	adds	r3, #1
   1cfae:	3110      	adds	r1, #16
   1cfb0:	2b07      	cmp	r3, #7
   1cfb2:	9111      	str	r1, [sp, #68]	; 0x44
   1cfb4:	9310      	str	r3, [sp, #64]	; 0x40
   1cfb6:	e889 0060 	stmia.w	r9, {r5, r6}
   1cfba:	ddf2      	ble.n	1cfa2 <_svfiprintf_r+0x6b2>
   1cfbc:	aa0f      	add	r2, sp, #60	; 0x3c
   1cfbe:	4641      	mov	r1, r8
   1cfc0:	4638      	mov	r0, r7
   1cfc2:	f7ff fc17 	bl	1c7f4 <__ssprint_r>
   1cfc6:	bb28      	cbnz	r0, 1d014 <_svfiprintf_r+0x724>
   1cfc8:	3c10      	subs	r4, #16
   1cfca:	2c10      	cmp	r4, #16
   1cfcc:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cfce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cfd0:	46d1      	mov	r9, sl
   1cfd2:	dceb      	bgt.n	1cfac <_svfiprintf_r+0x6bc>
   1cfd4:	3301      	adds	r3, #1
   1cfd6:	4421      	add	r1, r4
   1cfd8:	2b07      	cmp	r3, #7
   1cfda:	9111      	str	r1, [sp, #68]	; 0x44
   1cfdc:	9310      	str	r3, [sp, #64]	; 0x40
   1cfde:	f8c9 5000 	str.w	r5, [r9]
   1cfe2:	f8c9 4004 	str.w	r4, [r9, #4]
   1cfe6:	f300 80f9 	bgt.w	1d1dc <_svfiprintf_r+0x8ec>
   1cfea:	9b02      	ldr	r3, [sp, #8]
   1cfec:	9a06      	ldr	r2, [sp, #24]
   1cfee:	9800      	ldr	r0, [sp, #0]
   1cff0:	4282      	cmp	r2, r0
   1cff2:	bfac      	ite	ge
   1cff4:	189b      	addge	r3, r3, r2
   1cff6:	181b      	addlt	r3, r3, r0
   1cff8:	9302      	str	r3, [sp, #8]
   1cffa:	2900      	cmp	r1, #0
   1cffc:	d159      	bne.n	1d0b2 <_svfiprintf_r+0x7c2>
   1cffe:	2300      	movs	r3, #0
   1d000:	9310      	str	r3, [sp, #64]	; 0x40
   1d002:	46d1      	mov	r9, sl
   1d004:	e48e      	b.n	1c924 <_svfiprintf_r+0x34>
   1d006:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d008:	b123      	cbz	r3, 1d014 <_svfiprintf_r+0x724>
   1d00a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1d00c:	9905      	ldr	r1, [sp, #20]
   1d00e:	aa0f      	add	r2, sp, #60	; 0x3c
   1d010:	f7ff fbf0 	bl	1c7f4 <__ssprint_r>
   1d014:	9b05      	ldr	r3, [sp, #20]
   1d016:	899b      	ldrh	r3, [r3, #12]
   1d018:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d01c:	9b02      	ldr	r3, [sp, #8]
   1d01e:	bf18      	it	ne
   1d020:	f04f 33ff 	movne.w	r3, #4294967295
   1d024:	9302      	str	r3, [sp, #8]
   1d026:	9802      	ldr	r0, [sp, #8]
   1d028:	b02d      	add	sp, #180	; 0xb4
   1d02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d02e:	9a06      	ldr	r2, [sp, #24]
   1d030:	9800      	ldr	r0, [sp, #0]
   1d032:	1a15      	subs	r5, r2, r0
   1d034:	2d00      	cmp	r5, #0
   1d036:	f77f af5f 	ble.w	1cef8 <_svfiprintf_r+0x608>
   1d03a:	2d10      	cmp	r5, #16
   1d03c:	4c27      	ldr	r4, [pc, #156]	; (1d0dc <_svfiprintf_r+0x7ec>)
   1d03e:	dd22      	ble.n	1d086 <_svfiprintf_r+0x796>
   1d040:	464a      	mov	r2, r9
   1d042:	46b1      	mov	r9, r6
   1d044:	4626      	mov	r6, r4
   1d046:	9c05      	ldr	r4, [sp, #20]
   1d048:	e004      	b.n	1d054 <_svfiprintf_r+0x764>
   1d04a:	3d10      	subs	r5, #16
   1d04c:	2d10      	cmp	r5, #16
   1d04e:	f102 0208 	add.w	r2, r2, #8
   1d052:	dd15      	ble.n	1d080 <_svfiprintf_r+0x790>
   1d054:	3301      	adds	r3, #1
   1d056:	3110      	adds	r1, #16
   1d058:	2010      	movs	r0, #16
   1d05a:	2b07      	cmp	r3, #7
   1d05c:	9111      	str	r1, [sp, #68]	; 0x44
   1d05e:	9310      	str	r3, [sp, #64]	; 0x40
   1d060:	6016      	str	r6, [r2, #0]
   1d062:	6050      	str	r0, [r2, #4]
   1d064:	ddf1      	ble.n	1d04a <_svfiprintf_r+0x75a>
   1d066:	aa0f      	add	r2, sp, #60	; 0x3c
   1d068:	4621      	mov	r1, r4
   1d06a:	4638      	mov	r0, r7
   1d06c:	f7ff fbc2 	bl	1c7f4 <__ssprint_r>
   1d070:	2800      	cmp	r0, #0
   1d072:	d1cf      	bne.n	1d014 <_svfiprintf_r+0x724>
   1d074:	3d10      	subs	r5, #16
   1d076:	2d10      	cmp	r5, #16
   1d078:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d07a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d07c:	4652      	mov	r2, sl
   1d07e:	dce9      	bgt.n	1d054 <_svfiprintf_r+0x764>
   1d080:	4634      	mov	r4, r6
   1d082:	464e      	mov	r6, r9
   1d084:	4691      	mov	r9, r2
   1d086:	3301      	adds	r3, #1
   1d088:	4429      	add	r1, r5
   1d08a:	2b07      	cmp	r3, #7
   1d08c:	9111      	str	r1, [sp, #68]	; 0x44
   1d08e:	9310      	str	r3, [sp, #64]	; 0x40
   1d090:	e889 0030 	stmia.w	r9, {r4, r5}
   1d094:	f300 80f0 	bgt.w	1d278 <_svfiprintf_r+0x988>
   1d098:	f109 0908 	add.w	r9, r9, #8
   1d09c:	e72c      	b.n	1cef8 <_svfiprintf_r+0x608>
   1d09e:	aa0f      	add	r2, sp, #60	; 0x3c
   1d0a0:	9905      	ldr	r1, [sp, #20]
   1d0a2:	4638      	mov	r0, r7
   1d0a4:	f7ff fba6 	bl	1c7f4 <__ssprint_r>
   1d0a8:	2800      	cmp	r0, #0
   1d0aa:	d1b3      	bne.n	1d014 <_svfiprintf_r+0x724>
   1d0ac:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d0ae:	46d1      	mov	r9, sl
   1d0b0:	e767      	b.n	1cf82 <_svfiprintf_r+0x692>
   1d0b2:	aa0f      	add	r2, sp, #60	; 0x3c
   1d0b4:	9905      	ldr	r1, [sp, #20]
   1d0b6:	4638      	mov	r0, r7
   1d0b8:	f7ff fb9c 	bl	1c7f4 <__ssprint_r>
   1d0bc:	2800      	cmp	r0, #0
   1d0be:	d09e      	beq.n	1cffe <_svfiprintf_r+0x70e>
   1d0c0:	e7a8      	b.n	1d014 <_svfiprintf_r+0x724>
   1d0c2:	9b01      	ldr	r3, [sp, #4]
   1d0c4:	2a01      	cmp	r2, #1
   1d0c6:	f000 80b7 	beq.w	1d238 <_svfiprintf_r+0x948>
   1d0ca:	2a02      	cmp	r2, #2
   1d0cc:	d11e      	bne.n	1d10c <_svfiprintf_r+0x81c>
   1d0ce:	9301      	str	r3, [sp, #4]
   1d0d0:	2400      	movs	r4, #0
   1d0d2:	2500      	movs	r5, #0
   1d0d4:	e5f0      	b.n	1ccb8 <_svfiprintf_r+0x3c8>
   1d0d6:	bf00      	nop
   1d0d8:	00020ff0 	.word	0x00020ff0
   1d0dc:	0002101c 	.word	0x0002101c
   1d0e0:	0002100c 	.word	0x0002100c
   1d0e4:	aa0f      	add	r2, sp, #60	; 0x3c
   1d0e6:	9905      	ldr	r1, [sp, #20]
   1d0e8:	4638      	mov	r0, r7
   1d0ea:	f7ff fb83 	bl	1c7f4 <__ssprint_r>
   1d0ee:	2800      	cmp	r0, #0
   1d0f0:	d190      	bne.n	1d014 <_svfiprintf_r+0x724>
   1d0f2:	46d1      	mov	r9, sl
   1d0f4:	e435      	b.n	1c962 <_svfiprintf_r+0x72>
   1d0f6:	aa0f      	add	r2, sp, #60	; 0x3c
   1d0f8:	9905      	ldr	r1, [sp, #20]
   1d0fa:	4638      	mov	r0, r7
   1d0fc:	f7ff fb7a 	bl	1c7f4 <__ssprint_r>
   1d100:	2800      	cmp	r0, #0
   1d102:	d187      	bne.n	1d014 <_svfiprintf_r+0x724>
   1d104:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d106:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d108:	46d1      	mov	r9, sl
   1d10a:	e72c      	b.n	1cf66 <_svfiprintf_r+0x676>
   1d10c:	9301      	str	r3, [sp, #4]
   1d10e:	2400      	movs	r4, #0
   1d110:	2500      	movs	r5, #0
   1d112:	4651      	mov	r1, sl
   1d114:	e000      	b.n	1d118 <_svfiprintf_r+0x828>
   1d116:	4631      	mov	r1, r6
   1d118:	08e2      	lsrs	r2, r4, #3
   1d11a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1d11e:	08e8      	lsrs	r0, r5, #3
   1d120:	f004 0307 	and.w	r3, r4, #7
   1d124:	4605      	mov	r5, r0
   1d126:	4614      	mov	r4, r2
   1d128:	3330      	adds	r3, #48	; 0x30
   1d12a:	ea54 0205 	orrs.w	r2, r4, r5
   1d12e:	f801 3c01 	strb.w	r3, [r1, #-1]
   1d132:	f101 36ff 	add.w	r6, r1, #4294967295
   1d136:	d1ee      	bne.n	1d116 <_svfiprintf_r+0x826>
   1d138:	9a01      	ldr	r2, [sp, #4]
   1d13a:	07d2      	lsls	r2, r2, #31
   1d13c:	f57f adcc 	bpl.w	1ccd8 <_svfiprintf_r+0x3e8>
   1d140:	2b30      	cmp	r3, #48	; 0x30
   1d142:	f43f adc9 	beq.w	1ccd8 <_svfiprintf_r+0x3e8>
   1d146:	3902      	subs	r1, #2
   1d148:	2330      	movs	r3, #48	; 0x30
   1d14a:	f806 3c01 	strb.w	r3, [r6, #-1]
   1d14e:	ebaa 0301 	sub.w	r3, sl, r1
   1d152:	9304      	str	r3, [sp, #16]
   1d154:	460e      	mov	r6, r1
   1d156:	e5c2      	b.n	1ccde <_svfiprintf_r+0x3ee>
   1d158:	aa0f      	add	r2, sp, #60	; 0x3c
   1d15a:	9905      	ldr	r1, [sp, #20]
   1d15c:	4638      	mov	r0, r7
   1d15e:	f7ff fb49 	bl	1c7f4 <__ssprint_r>
   1d162:	2800      	cmp	r0, #0
   1d164:	f47f af56 	bne.w	1d014 <_svfiprintf_r+0x724>
   1d168:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d16a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d16c:	46d1      	mov	r9, sl
   1d16e:	e6b0      	b.n	1ced2 <_svfiprintf_r+0x5e2>
   1d170:	aa0f      	add	r2, sp, #60	; 0x3c
   1d172:	9905      	ldr	r1, [sp, #20]
   1d174:	4638      	mov	r0, r7
   1d176:	f7ff fb3d 	bl	1c7f4 <__ssprint_r>
   1d17a:	2800      	cmp	r0, #0
   1d17c:	f47f af4a 	bne.w	1d014 <_svfiprintf_r+0x724>
   1d180:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d182:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d184:	46d1      	mov	r9, sl
   1d186:	e6b3      	b.n	1cef0 <_svfiprintf_r+0x600>
   1d188:	2d00      	cmp	r5, #0
   1d18a:	bf08      	it	eq
   1d18c:	2c0a      	cmpeq	r4, #10
   1d18e:	d352      	bcc.n	1d236 <_svfiprintf_r+0x946>
   1d190:	4656      	mov	r6, sl
   1d192:	4620      	mov	r0, r4
   1d194:	4629      	mov	r1, r5
   1d196:	220a      	movs	r2, #10
   1d198:	2300      	movs	r3, #0
   1d19a:	f7fd fbdf 	bl	1a95c <__aeabi_uldivmod>
   1d19e:	3230      	adds	r2, #48	; 0x30
   1d1a0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1d1a4:	4620      	mov	r0, r4
   1d1a6:	4629      	mov	r1, r5
   1d1a8:	2300      	movs	r3, #0
   1d1aa:	220a      	movs	r2, #10
   1d1ac:	f7fd fbd6 	bl	1a95c <__aeabi_uldivmod>
   1d1b0:	4604      	mov	r4, r0
   1d1b2:	460d      	mov	r5, r1
   1d1b4:	ea54 0305 	orrs.w	r3, r4, r5
   1d1b8:	d1eb      	bne.n	1d192 <_svfiprintf_r+0x8a2>
   1d1ba:	e58d      	b.n	1ccd8 <_svfiprintf_r+0x3e8>
   1d1bc:	f8cd 8010 	str.w	r8, [sp, #16]
   1d1c0:	4656      	mov	r6, sl
   1d1c2:	e58c      	b.n	1ccde <_svfiprintf_r+0x3ee>
   1d1c4:	aa0f      	add	r2, sp, #60	; 0x3c
   1d1c6:	9905      	ldr	r1, [sp, #20]
   1d1c8:	4638      	mov	r0, r7
   1d1ca:	f7ff fb13 	bl	1c7f4 <__ssprint_r>
   1d1ce:	2800      	cmp	r0, #0
   1d1d0:	f47f af20 	bne.w	1d014 <_svfiprintf_r+0x724>
   1d1d4:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d1d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d1d8:	46d1      	mov	r9, sl
   1d1da:	e669      	b.n	1ceb0 <_svfiprintf_r+0x5c0>
   1d1dc:	aa0f      	add	r2, sp, #60	; 0x3c
   1d1de:	9905      	ldr	r1, [sp, #20]
   1d1e0:	4638      	mov	r0, r7
   1d1e2:	f7ff fb07 	bl	1c7f4 <__ssprint_r>
   1d1e6:	2800      	cmp	r0, #0
   1d1e8:	f47f af14 	bne.w	1d014 <_svfiprintf_r+0x724>
   1d1ec:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d1ee:	e6fc      	b.n	1cfea <_svfiprintf_r+0x6fa>
   1d1f0:	9207      	str	r2, [sp, #28]
   1d1f2:	f89b 2000 	ldrb.w	r2, [fp]
   1d1f6:	f7ff bbc8 	b.w	1c98a <_svfiprintf_r+0x9a>
   1d1fa:	4656      	mov	r6, sl
   1d1fc:	e56f      	b.n	1ccde <_svfiprintf_r+0x3ee>
   1d1fe:	9e07      	ldr	r6, [sp, #28]
   1d200:	f9b6 4000 	ldrsh.w	r4, [r6]
   1d204:	4632      	mov	r2, r6
   1d206:	17e5      	asrs	r5, r4, #31
   1d208:	4620      	mov	r0, r4
   1d20a:	3204      	adds	r2, #4
   1d20c:	4629      	mov	r1, r5
   1d20e:	2800      	cmp	r0, #0
   1d210:	9207      	str	r2, [sp, #28]
   1d212:	f171 0200 	sbcs.w	r2, r1, #0
   1d216:	f6bf ad3b 	bge.w	1cc90 <_svfiprintf_r+0x3a0>
   1d21a:	222d      	movs	r2, #45	; 0x2d
   1d21c:	4264      	negs	r4, r4
   1d21e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1d222:	9203      	str	r2, [sp, #12]
   1d224:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1d228:	2201      	movs	r2, #1
   1d22a:	e604      	b.n	1ce36 <_svfiprintf_r+0x546>
   1d22c:	880c      	ldrh	r4, [r1, #0]
   1d22e:	3104      	adds	r1, #4
   1d230:	2500      	movs	r5, #0
   1d232:	9107      	str	r1, [sp, #28]
   1d234:	e455      	b.n	1cae2 <_svfiprintf_r+0x1f2>
   1d236:	9b01      	ldr	r3, [sp, #4]
   1d238:	9301      	str	r3, [sp, #4]
   1d23a:	ae2c      	add	r6, sp, #176	; 0xb0
   1d23c:	3430      	adds	r4, #48	; 0x30
   1d23e:	2301      	movs	r3, #1
   1d240:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1d244:	9304      	str	r3, [sp, #16]
   1d246:	e54a      	b.n	1ccde <_svfiprintf_r+0x3ee>
   1d248:	9a07      	ldr	r2, [sp, #28]
   1d24a:	9902      	ldr	r1, [sp, #8]
   1d24c:	6813      	ldr	r3, [r2, #0]
   1d24e:	17cd      	asrs	r5, r1, #31
   1d250:	4608      	mov	r0, r1
   1d252:	3204      	adds	r2, #4
   1d254:	4629      	mov	r1, r5
   1d256:	9207      	str	r2, [sp, #28]
   1d258:	e9c3 0100 	strd	r0, r1, [r3]
   1d25c:	f7ff bb62 	b.w	1c924 <_svfiprintf_r+0x34>
   1d260:	9c07      	ldr	r4, [sp, #28]
   1d262:	3407      	adds	r4, #7
   1d264:	f024 0407 	bic.w	r4, r4, #7
   1d268:	e9d4 0100 	ldrd	r0, r1, [r4]
   1d26c:	f104 0208 	add.w	r2, r4, #8
   1d270:	9207      	str	r2, [sp, #28]
   1d272:	4604      	mov	r4, r0
   1d274:	460d      	mov	r5, r1
   1d276:	e506      	b.n	1cc86 <_svfiprintf_r+0x396>
   1d278:	aa0f      	add	r2, sp, #60	; 0x3c
   1d27a:	9905      	ldr	r1, [sp, #20]
   1d27c:	4638      	mov	r0, r7
   1d27e:	f7ff fab9 	bl	1c7f4 <__ssprint_r>
   1d282:	2800      	cmp	r0, #0
   1d284:	f47f aec6 	bne.w	1d014 <_svfiprintf_r+0x724>
   1d288:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d28a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d28c:	46d1      	mov	r9, sl
   1d28e:	e633      	b.n	1cef8 <_svfiprintf_r+0x608>
   1d290:	9a07      	ldr	r2, [sp, #28]
   1d292:	6813      	ldr	r3, [r2, #0]
   1d294:	3204      	adds	r2, #4
   1d296:	9207      	str	r2, [sp, #28]
   1d298:	9a02      	ldr	r2, [sp, #8]
   1d29a:	601a      	str	r2, [r3, #0]
   1d29c:	f7ff bb42 	b.w	1c924 <_svfiprintf_r+0x34>
   1d2a0:	4630      	mov	r0, r6
   1d2a2:	9301      	str	r3, [sp, #4]
   1d2a4:	9407      	str	r4, [sp, #28]
   1d2a6:	f7fd ff6b 	bl	1b180 <strlen>
   1d2aa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1d2ae:	9004      	str	r0, [sp, #16]
   1d2b0:	9303      	str	r3, [sp, #12]
   1d2b2:	f04f 0800 	mov.w	r8, #0
   1d2b6:	e512      	b.n	1ccde <_svfiprintf_r+0x3ee>
   1d2b8:	2140      	movs	r1, #64	; 0x40
   1d2ba:	9200      	str	r2, [sp, #0]
   1d2bc:	f7fe fc2e 	bl	1bb1c <_malloc_r>
   1d2c0:	9a05      	ldr	r2, [sp, #20]
   1d2c2:	6010      	str	r0, [r2, #0]
   1d2c4:	6110      	str	r0, [r2, #16]
   1d2c6:	9a00      	ldr	r2, [sp, #0]
   1d2c8:	b328      	cbz	r0, 1d316 <_svfiprintf_r+0xa26>
   1d2ca:	9905      	ldr	r1, [sp, #20]
   1d2cc:	2340      	movs	r3, #64	; 0x40
   1d2ce:	614b      	str	r3, [r1, #20]
   1d2d0:	f7ff bb1c 	b.w	1c90c <_svfiprintf_r+0x1c>
   1d2d4:	4642      	mov	r2, r8
   1d2d6:	2a06      	cmp	r2, #6
   1d2d8:	bf28      	it	cs
   1d2da:	2206      	movcs	r2, #6
   1d2dc:	9204      	str	r2, [sp, #16]
   1d2de:	9407      	str	r4, [sp, #28]
   1d2e0:	9200      	str	r2, [sp, #0]
   1d2e2:	4e17      	ldr	r6, [pc, #92]	; (1d340 <_svfiprintf_r+0xa50>)
   1d2e4:	e42f      	b.n	1cb46 <_svfiprintf_r+0x256>
   1d2e6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1d2ea:	f8cd 8010 	str.w	r8, [sp, #16]
   1d2ee:	9203      	str	r2, [sp, #12]
   1d2f0:	9407      	str	r4, [sp, #28]
   1d2f2:	9301      	str	r3, [sp, #4]
   1d2f4:	4680      	mov	r8, r0
   1d2f6:	e4f2      	b.n	1ccde <_svfiprintf_r+0x3ee>
   1d2f8:	9a07      	ldr	r2, [sp, #28]
   1d2fa:	6811      	ldr	r1, [r2, #0]
   1d2fc:	f89b 2001 	ldrb.w	r2, [fp, #1]
   1d300:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
   1d304:	9907      	ldr	r1, [sp, #28]
   1d306:	3104      	adds	r1, #4
   1d308:	46b3      	mov	fp, r6
   1d30a:	9107      	str	r1, [sp, #28]
   1d30c:	f7ff bb3d 	b.w	1c98a <_svfiprintf_r+0x9a>
   1d310:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1d314:	e51f      	b.n	1cd56 <_svfiprintf_r+0x466>
   1d316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d318:	230c      	movs	r3, #12
   1d31a:	6013      	str	r3, [r2, #0]
   1d31c:	f04f 33ff 	mov.w	r3, #4294967295
   1d320:	9302      	str	r3, [sp, #8]
   1d322:	e680      	b.n	1d026 <_svfiprintf_r+0x736>
   1d324:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1d328:	f7ff bbcb 	b.w	1cac2 <_svfiprintf_r+0x1d2>
   1d32c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1d330:	e497      	b.n	1cc62 <_svfiprintf_r+0x372>
   1d332:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1d336:	e59e      	b.n	1ce76 <_svfiprintf_r+0x586>
   1d338:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1d33c:	e457      	b.n	1cbee <_svfiprintf_r+0x2fe>
   1d33e:	bf00      	nop
   1d340:	00021004 	.word	0x00021004

0001d344 <_sungetc_r>:
   1d344:	b538      	push	{r3, r4, r5, lr}
   1d346:	1c4b      	adds	r3, r1, #1
   1d348:	d01a      	beq.n	1d380 <_sungetc_r+0x3c>
   1d34a:	8993      	ldrh	r3, [r2, #12]
   1d34c:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1d34e:	f023 0320 	bic.w	r3, r3, #32
   1d352:	b2cd      	uxtb	r5, r1
   1d354:	8193      	strh	r3, [r2, #12]
   1d356:	b1b4      	cbz	r4, 1d386 <_sungetc_r+0x42>
   1d358:	4614      	mov	r4, r2
   1d35a:	6852      	ldr	r2, [r2, #4]
   1d35c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d35e:	429a      	cmp	r2, r3
   1d360:	da09      	bge.n	1d376 <_sungetc_r+0x32>
   1d362:	6823      	ldr	r3, [r4, #0]
   1d364:	1e5a      	subs	r2, r3, #1
   1d366:	6022      	str	r2, [r4, #0]
   1d368:	f803 5c01 	strb.w	r5, [r3, #-1]
   1d36c:	6863      	ldr	r3, [r4, #4]
   1d36e:	3301      	adds	r3, #1
   1d370:	6063      	str	r3, [r4, #4]
   1d372:	4628      	mov	r0, r5
   1d374:	bd38      	pop	{r3, r4, r5, pc}
   1d376:	4621      	mov	r1, r4
   1d378:	f000 fd52 	bl	1de20 <__submore>
   1d37c:	2800      	cmp	r0, #0
   1d37e:	d0f0      	beq.n	1d362 <_sungetc_r+0x1e>
   1d380:	f04f 35ff 	mov.w	r5, #4294967295
   1d384:	e7f5      	b.n	1d372 <_sungetc_r+0x2e>
   1d386:	6911      	ldr	r1, [r2, #16]
   1d388:	6813      	ldr	r3, [r2, #0]
   1d38a:	b129      	cbz	r1, 1d398 <_sungetc_r+0x54>
   1d38c:	4299      	cmp	r1, r3
   1d38e:	d203      	bcs.n	1d398 <_sungetc_r+0x54>
   1d390:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   1d394:	428d      	cmp	r5, r1
   1d396:	d00f      	beq.n	1d3b8 <_sungetc_r+0x74>
   1d398:	6393      	str	r3, [r2, #56]	; 0x38
   1d39a:	4613      	mov	r3, r2
   1d39c:	6854      	ldr	r4, [r2, #4]
   1d39e:	63d4      	str	r4, [r2, #60]	; 0x3c
   1d3a0:	f102 0040 	add.w	r0, r2, #64	; 0x40
   1d3a4:	2103      	movs	r1, #3
   1d3a6:	6310      	str	r0, [r2, #48]	; 0x30
   1d3a8:	6351      	str	r1, [r2, #52]	; 0x34
   1d3aa:	f803 5f42 	strb.w	r5, [r3, #66]!
   1d3ae:	2101      	movs	r1, #1
   1d3b0:	6013      	str	r3, [r2, #0]
   1d3b2:	6051      	str	r1, [r2, #4]
   1d3b4:	4628      	mov	r0, r5
   1d3b6:	bd38      	pop	{r3, r4, r5, pc}
   1d3b8:	6851      	ldr	r1, [r2, #4]
   1d3ba:	3b01      	subs	r3, #1
   1d3bc:	3101      	adds	r1, #1
   1d3be:	6013      	str	r3, [r2, #0]
   1d3c0:	6051      	str	r1, [r2, #4]
   1d3c2:	e7d6      	b.n	1d372 <_sungetc_r+0x2e>

0001d3c4 <__ssrefill_r>:
   1d3c4:	b510      	push	{r4, lr}
   1d3c6:	460c      	mov	r4, r1
   1d3c8:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1d3ca:	b169      	cbz	r1, 1d3e8 <__ssrefill_r+0x24>
   1d3cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1d3d0:	4299      	cmp	r1, r3
   1d3d2:	d001      	beq.n	1d3d8 <__ssrefill_r+0x14>
   1d3d4:	f000 fdbc 	bl	1df50 <_free_r>
   1d3d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1d3da:	6063      	str	r3, [r4, #4]
   1d3dc:	2000      	movs	r0, #0
   1d3de:	6320      	str	r0, [r4, #48]	; 0x30
   1d3e0:	b113      	cbz	r3, 1d3e8 <__ssrefill_r+0x24>
   1d3e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d3e4:	6023      	str	r3, [r4, #0]
   1d3e6:	bd10      	pop	{r4, pc}
   1d3e8:	89a3      	ldrh	r3, [r4, #12]
   1d3ea:	6922      	ldr	r2, [r4, #16]
   1d3ec:	6022      	str	r2, [r4, #0]
   1d3ee:	f043 0320 	orr.w	r3, r3, #32
   1d3f2:	2200      	movs	r2, #0
   1d3f4:	81a3      	strh	r3, [r4, #12]
   1d3f6:	6062      	str	r2, [r4, #4]
   1d3f8:	f04f 30ff 	mov.w	r0, #4294967295
   1d3fc:	bd10      	pop	{r4, pc}
   1d3fe:	bf00      	nop

0001d400 <_sfread_r>:
   1d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d404:	b083      	sub	sp, #12
   1d406:	fb02 f903 	mul.w	r9, r2, r3
   1d40a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1d40c:	f1b9 0f00 	cmp.w	r9, #0
   1d410:	d028      	beq.n	1d464 <_sfread_r+0x64>
   1d412:	4607      	mov	r7, r0
   1d414:	469a      	mov	sl, r3
   1d416:	9201      	str	r2, [sp, #4]
   1d418:	460d      	mov	r5, r1
   1d41a:	464e      	mov	r6, r9
   1d41c:	f04f 0800 	mov.w	r8, #0
   1d420:	e00f      	b.n	1d442 <_sfread_r+0x42>
   1d422:	6821      	ldr	r1, [r4, #0]
   1d424:	f7fd fd96 	bl	1af54 <memcpy>
   1d428:	6822      	ldr	r2, [r4, #0]
   1d42a:	f8c4 8004 	str.w	r8, [r4, #4]
   1d42e:	445a      	add	r2, fp
   1d430:	6022      	str	r2, [r4, #0]
   1d432:	4621      	mov	r1, r4
   1d434:	4638      	mov	r0, r7
   1d436:	445d      	add	r5, fp
   1d438:	eba6 060b 	sub.w	r6, r6, fp
   1d43c:	f7ff ffc2 	bl	1d3c4 <__ssrefill_r>
   1d440:	b9a0      	cbnz	r0, 1d46c <_sfread_r+0x6c>
   1d442:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1d446:	455e      	cmp	r6, fp
   1d448:	4628      	mov	r0, r5
   1d44a:	465a      	mov	r2, fp
   1d44c:	d8e9      	bhi.n	1d422 <_sfread_r+0x22>
   1d44e:	4632      	mov	r2, r6
   1d450:	6821      	ldr	r1, [r4, #0]
   1d452:	f7fd fd7f 	bl	1af54 <memcpy>
   1d456:	6862      	ldr	r2, [r4, #4]
   1d458:	6823      	ldr	r3, [r4, #0]
   1d45a:	1b92      	subs	r2, r2, r6
   1d45c:	441e      	add	r6, r3
   1d45e:	46d1      	mov	r9, sl
   1d460:	6062      	str	r2, [r4, #4]
   1d462:	6026      	str	r6, [r4, #0]
   1d464:	4648      	mov	r0, r9
   1d466:	b003      	add	sp, #12
   1d468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d46c:	9b01      	ldr	r3, [sp, #4]
   1d46e:	eba9 0906 	sub.w	r9, r9, r6
   1d472:	fbb9 f9f3 	udiv	r9, r9, r3
   1d476:	4648      	mov	r0, r9
   1d478:	b003      	add	sp, #12
   1d47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d47e:	bf00      	nop

0001d480 <__ssvfiscanf_r>:
   1d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d484:	468b      	mov	fp, r1
   1d486:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1d48a:	b0d9      	sub	sp, #356	; 0x164
   1d48c:	4607      	mov	r7, r0
   1d48e:	0488      	lsls	r0, r1, #18
   1d490:	9306      	str	r3, [sp, #24]
   1d492:	d409      	bmi.n	1d4a8 <__ssvfiscanf_r+0x28>
   1d494:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1d498:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1d49c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1d4a0:	f8ab 100c 	strh.w	r1, [fp, #12]
   1d4a4:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   1d4a8:	4614      	mov	r4, r2
   1d4aa:	4626      	mov	r6, r4
   1d4ac:	2300      	movs	r3, #0
   1d4ae:	9307      	str	r3, [sp, #28]
   1d4b0:	9304      	str	r3, [sp, #16]
   1d4b2:	469a      	mov	sl, r3
   1d4b4:	9305      	str	r3, [sp, #20]
   1d4b6:	f816 3b01 	ldrb.w	r3, [r6], #1
   1d4ba:	930b      	str	r3, [sp, #44]	; 0x2c
   1d4bc:	b363      	cbz	r3, 1d518 <__ssvfiscanf_r+0x98>
   1d4be:	f000 fe4d 	bl	1e15c <__locale_ctype_ptr>
   1d4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d4c4:	4418      	add	r0, r3
   1d4c6:	7845      	ldrb	r5, [r0, #1]
   1d4c8:	f015 0508 	ands.w	r5, r5, #8
   1d4cc:	d028      	beq.n	1d520 <__ssvfiscanf_r+0xa0>
   1d4ce:	f8db 2004 	ldr.w	r2, [fp, #4]
   1d4d2:	e012      	b.n	1d4fa <__ssvfiscanf_r+0x7a>
   1d4d4:	f000 fe42 	bl	1e15c <__locale_ctype_ptr>
   1d4d8:	f8db 3000 	ldr.w	r3, [fp]
   1d4dc:	781a      	ldrb	r2, [r3, #0]
   1d4de:	4410      	add	r0, r2
   1d4e0:	3301      	adds	r3, #1
   1d4e2:	7842      	ldrb	r2, [r0, #1]
   1d4e4:	0712      	lsls	r2, r2, #28
   1d4e6:	d510      	bpl.n	1d50a <__ssvfiscanf_r+0x8a>
   1d4e8:	f8db 2004 	ldr.w	r2, [fp, #4]
   1d4ec:	f8cb 3000 	str.w	r3, [fp]
   1d4f0:	3a01      	subs	r2, #1
   1d4f2:	f10a 0a01 	add.w	sl, sl, #1
   1d4f6:	f8cb 2004 	str.w	r2, [fp, #4]
   1d4fa:	2a00      	cmp	r2, #0
   1d4fc:	dcea      	bgt.n	1d4d4 <__ssvfiscanf_r+0x54>
   1d4fe:	4659      	mov	r1, fp
   1d500:	4638      	mov	r0, r7
   1d502:	f7ff ff5f 	bl	1d3c4 <__ssrefill_r>
   1d506:	2800      	cmp	r0, #0
   1d508:	d0e4      	beq.n	1d4d4 <__ssvfiscanf_r+0x54>
   1d50a:	4634      	mov	r4, r6
   1d50c:	4626      	mov	r6, r4
   1d50e:	f816 3b01 	ldrb.w	r3, [r6], #1
   1d512:	930b      	str	r3, [sp, #44]	; 0x2c
   1d514:	2b00      	cmp	r3, #0
   1d516:	d1d2      	bne.n	1d4be <__ssvfiscanf_r+0x3e>
   1d518:	9805      	ldr	r0, [sp, #20]
   1d51a:	b059      	add	sp, #356	; 0x164
   1d51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d520:	2b25      	cmp	r3, #37	; 0x25
   1d522:	f040 8084 	bne.w	1d62e <__ssvfiscanf_r+0x1ae>
   1d526:	f894 8001 	ldrb.w	r8, [r4, #1]
   1d52a:	462c      	mov	r4, r5
   1d52c:	1c73      	adds	r3, r6, #1
   1d52e:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
   1d532:	f200 8187 	bhi.w	1d844 <__ssvfiscanf_r+0x3c4>
   1d536:	e8df f018 	tbh	[pc, r8, lsl #1]
   1d53a:	0093      	.short	0x0093
   1d53c:	01850185 	.word	0x01850185
   1d540:	01850185 	.word	0x01850185
   1d544:	01850185 	.word	0x01850185
   1d548:	01850185 	.word	0x01850185
   1d54c:	01850185 	.word	0x01850185
   1d550:	01850185 	.word	0x01850185
   1d554:	01850185 	.word	0x01850185
   1d558:	01850185 	.word	0x01850185
   1d55c:	01850185 	.word	0x01850185
   1d560:	01850185 	.word	0x01850185
   1d564:	01850185 	.word	0x01850185
   1d568:	01850185 	.word	0x01850185
   1d56c:	01850185 	.word	0x01850185
   1d570:	01850185 	.word	0x01850185
   1d574:	01850185 	.word	0x01850185
   1d578:	01850185 	.word	0x01850185
   1d57c:	01850185 	.word	0x01850185
   1d580:	01850185 	.word	0x01850185
   1d584:	01850079 	.word	0x01850079
   1d588:	01850185 	.word	0x01850185
   1d58c:	017f0185 	.word	0x017f0185
   1d590:	01850185 	.word	0x01850185
   1d594:	01850185 	.word	0x01850185
   1d598:	01760185 	.word	0x01760185
   1d59c:	01760176 	.word	0x01760176
   1d5a0:	01760176 	.word	0x01760176
   1d5a4:	01760176 	.word	0x01760176
   1d5a8:	01760176 	.word	0x01760176
   1d5ac:	01850176 	.word	0x01850176
   1d5b0:	01850185 	.word	0x01850185
   1d5b4:	01850185 	.word	0x01850185
   1d5b8:	01850185 	.word	0x01850185
   1d5bc:	01850185 	.word	0x01850185
   1d5c0:	01720185 	.word	0x01720185
   1d5c4:	01850185 	.word	0x01850185
   1d5c8:	01850185 	.word	0x01850185
   1d5cc:	01850185 	.word	0x01850185
   1d5d0:	016c0185 	.word	0x016c0185
   1d5d4:	01850185 	.word	0x01850185
   1d5d8:	01850168 	.word	0x01850168
   1d5dc:	01850185 	.word	0x01850185
   1d5e0:	01850185 	.word	0x01850185
   1d5e4:	01850185 	.word	0x01850185
   1d5e8:	01640185 	.word	0x01640185
   1d5ec:	01850185 	.word	0x01850185
   1d5f0:	0185015b 	.word	0x0185015b
   1d5f4:	01850185 	.word	0x01850185
   1d5f8:	01850185 	.word	0x01850185
   1d5fc:	01850185 	.word	0x01850185
   1d600:	01030115 	.word	0x01030115
   1d604:	01850185 	.word	0x01850185
   1d608:	011a0185 	.word	0x011a0185
   1d60c:	0185009a 	.word	0x0185009a
   1d610:	01510185 	.word	0x01510185
   1d614:	013a0185 	.word	0x013a0185
   1d618:	012a0133 	.word	0x012a0133
   1d61c:	01850185 	.word	0x01850185
   1d620:	01850127 	.word	0x01850127
   1d624:	01850120 	.word	0x01850120
   1d628:	01640185 	.word	0x01640185
   1d62c:	461e      	mov	r6, r3
   1d62e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1d632:	2b00      	cmp	r3, #0
   1d634:	f340 8375 	ble.w	1dd22 <__ssvfiscanf_r+0x8a2>
   1d638:	f8db 3000 	ldr.w	r3, [fp]
   1d63c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   1d640:	7819      	ldrb	r1, [r3, #0]
   1d642:	4291      	cmp	r1, r2
   1d644:	f47f af68 	bne.w	1d518 <__ssvfiscanf_r+0x98>
   1d648:	f8db 2004 	ldr.w	r2, [fp, #4]
   1d64c:	3301      	adds	r3, #1
   1d64e:	3a01      	subs	r2, #1
   1d650:	f8cb 3000 	str.w	r3, [fp]
   1d654:	f10a 0a01 	add.w	sl, sl, #1
   1d658:	f8cb 2004 	str.w	r2, [fp, #4]
   1d65c:	4634      	mov	r4, r6
   1d65e:	e755      	b.n	1d50c <__ssvfiscanf_r+0x8c>
   1d660:	f04f 33ff 	mov.w	r3, #4294967295
   1d664:	9305      	str	r3, [sp, #20]
   1d666:	9805      	ldr	r0, [sp, #20]
   1d668:	b059      	add	sp, #356	; 0x164
   1d66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d66e:	9303      	str	r3, [sp, #12]
   1d670:	4ba7      	ldr	r3, [pc, #668]	; (1d910 <__ssvfiscanf_r+0x490>)
   1d672:	9307      	str	r3, [sp, #28]
   1d674:	2300      	movs	r3, #0
   1d676:	9304      	str	r3, [sp, #16]
   1d678:	2603      	movs	r6, #3
   1d67a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1d67e:	2b00      	cmp	r3, #0
   1d680:	dd69      	ble.n	1d756 <__ssvfiscanf_r+0x2d6>
   1d682:	0669      	lsls	r1, r5, #25
   1d684:	d533      	bpl.n	1d6ee <__ssvfiscanf_r+0x26e>
   1d686:	2e02      	cmp	r6, #2
   1d688:	f000 81f7 	beq.w	1da7a <__ssvfiscanf_r+0x5fa>
   1d68c:	2e03      	cmp	r6, #3
   1d68e:	f000 8143 	beq.w	1d918 <__ssvfiscanf_r+0x498>
   1d692:	2e01      	cmp	r6, #1
   1d694:	f000 810a 	beq.w	1d8ac <__ssvfiscanf_r+0x42c>
   1d698:	2c00      	cmp	r4, #0
   1d69a:	bf08      	it	eq
   1d69c:	2401      	moveq	r4, #1
   1d69e:	f015 0301 	ands.w	r3, r5, #1
   1d6a2:	f040 8247 	bne.w	1db34 <__ssvfiscanf_r+0x6b4>
   1d6a6:	06ed      	lsls	r5, r5, #27
   1d6a8:	f140 831c 	bpl.w	1dce4 <__ssvfiscanf_r+0x864>
   1d6ac:	461d      	mov	r5, r3
   1d6ae:	e009      	b.n	1d6c4 <__ssvfiscanf_r+0x244>
   1d6b0:	4413      	add	r3, r2
   1d6b2:	f8cb 3000 	str.w	r3, [fp]
   1d6b6:	4415      	add	r5, r2
   1d6b8:	1aa4      	subs	r4, r4, r2
   1d6ba:	f7ff fe83 	bl	1d3c4 <__ssrefill_r>
   1d6be:	2800      	cmp	r0, #0
   1d6c0:	f040 82d6 	bne.w	1dc70 <__ssvfiscanf_r+0x7f0>
   1d6c4:	f8db 2004 	ldr.w	r2, [fp, #4]
   1d6c8:	f8db 3000 	ldr.w	r3, [fp]
   1d6cc:	42a2      	cmp	r2, r4
   1d6ce:	4659      	mov	r1, fp
   1d6d0:	4638      	mov	r0, r7
   1d6d2:	dbed      	blt.n	1d6b0 <__ssvfiscanf_r+0x230>
   1d6d4:	1b12      	subs	r2, r2, r4
   1d6d6:	4423      	add	r3, r4
   1d6d8:	f8cb 2004 	str.w	r2, [fp, #4]
   1d6dc:	4425      	add	r5, r4
   1d6de:	f8cb 3000 	str.w	r3, [fp]
   1d6e2:	9e03      	ldr	r6, [sp, #12]
   1d6e4:	44aa      	add	sl, r5
   1d6e6:	4634      	mov	r4, r6
   1d6e8:	e710      	b.n	1d50c <__ssvfiscanf_r+0x8c>
   1d6ea:	f8cb 3000 	str.w	r3, [fp]
   1d6ee:	f000 fd35 	bl	1e15c <__locale_ctype_ptr>
   1d6f2:	f8db 3000 	ldr.w	r3, [fp]
   1d6f6:	781a      	ldrb	r2, [r3, #0]
   1d6f8:	4410      	add	r0, r2
   1d6fa:	3301      	adds	r3, #1
   1d6fc:	7842      	ldrb	r2, [r0, #1]
   1d6fe:	0712      	lsls	r2, r2, #28
   1d700:	d5c1      	bpl.n	1d686 <__ssvfiscanf_r+0x206>
   1d702:	f8db 2004 	ldr.w	r2, [fp, #4]
   1d706:	3a01      	subs	r2, #1
   1d708:	2a00      	cmp	r2, #0
   1d70a:	f10a 0a01 	add.w	sl, sl, #1
   1d70e:	f8cb 2004 	str.w	r2, [fp, #4]
   1d712:	dcea      	bgt.n	1d6ea <__ssvfiscanf_r+0x26a>
   1d714:	4659      	mov	r1, fp
   1d716:	4638      	mov	r0, r7
   1d718:	f7ff fe54 	bl	1d3c4 <__ssrefill_r>
   1d71c:	2800      	cmp	r0, #0
   1d71e:	d0e6      	beq.n	1d6ee <__ssvfiscanf_r+0x26e>
   1d720:	9a05      	ldr	r2, [sp, #20]
   1d722:	2a00      	cmp	r2, #0
   1d724:	d09c      	beq.n	1d660 <__ssvfiscanf_r+0x1e0>
   1d726:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1d72a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d72e:	4613      	mov	r3, r2
   1d730:	bf18      	it	ne
   1d732:	f04f 33ff 	movne.w	r3, #4294967295
   1d736:	9305      	str	r3, [sp, #20]
   1d738:	9805      	ldr	r0, [sp, #20]
   1d73a:	b059      	add	sp, #356	; 0x164
   1d73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d740:	9303      	str	r3, [sp, #12]
   1d742:	4b73      	ldr	r3, [pc, #460]	; (1d910 <__ssvfiscanf_r+0x490>)
   1d744:	9307      	str	r3, [sp, #28]
   1d746:	230a      	movs	r3, #10
   1d748:	9304      	str	r3, [sp, #16]
   1d74a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1d74e:	2b00      	cmp	r3, #0
   1d750:	f04f 0603 	mov.w	r6, #3
   1d754:	dc95      	bgt.n	1d682 <__ssvfiscanf_r+0x202>
   1d756:	4659      	mov	r1, fp
   1d758:	4638      	mov	r0, r7
   1d75a:	f7ff fe33 	bl	1d3c4 <__ssrefill_r>
   1d75e:	2800      	cmp	r0, #0
   1d760:	d08f      	beq.n	1d682 <__ssvfiscanf_r+0x202>
   1d762:	e7dd      	b.n	1d720 <__ssvfiscanf_r+0x2a0>
   1d764:	9303      	str	r3, [sp, #12]
   1d766:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1d76a:	2600      	movs	r6, #0
   1d76c:	e785      	b.n	1d67a <__ssvfiscanf_r+0x1fa>
   1d76e:	f896 8001 	ldrb.w	r8, [r6, #1]
   1d772:	f045 0504 	orr.w	r5, r5, #4
   1d776:	461e      	mov	r6, r3
   1d778:	e6d8      	b.n	1d52c <__ssvfiscanf_r+0xac>
   1d77a:	9303      	str	r3, [sp, #12]
   1d77c:	4b65      	ldr	r3, [pc, #404]	; (1d914 <__ssvfiscanf_r+0x494>)
   1d77e:	9307      	str	r3, [sp, #28]
   1d780:	230a      	movs	r3, #10
   1d782:	9304      	str	r3, [sp, #16]
   1d784:	2603      	movs	r6, #3
   1d786:	e778      	b.n	1d67a <__ssvfiscanf_r+0x1fa>
   1d788:	9303      	str	r3, [sp, #12]
   1d78a:	2602      	movs	r6, #2
   1d78c:	e775      	b.n	1d67a <__ssvfiscanf_r+0x1fa>
   1d78e:	9303      	str	r3, [sp, #12]
   1d790:	f445 7508 	orr.w	r5, r5, #544	; 0x220
   1d794:	4b5f      	ldr	r3, [pc, #380]	; (1d914 <__ssvfiscanf_r+0x494>)
   1d796:	9307      	str	r3, [sp, #28]
   1d798:	2310      	movs	r3, #16
   1d79a:	9304      	str	r3, [sp, #16]
   1d79c:	2603      	movs	r6, #3
   1d79e:	e76c      	b.n	1d67a <__ssvfiscanf_r+0x1fa>
   1d7a0:	9303      	str	r3, [sp, #12]
   1d7a2:	4b5c      	ldr	r3, [pc, #368]	; (1d914 <__ssvfiscanf_r+0x494>)
   1d7a4:	9307      	str	r3, [sp, #28]
   1d7a6:	2308      	movs	r3, #8
   1d7a8:	9304      	str	r3, [sp, #16]
   1d7aa:	2603      	movs	r6, #3
   1d7ac:	e765      	b.n	1d67a <__ssvfiscanf_r+0x1fa>
   1d7ae:	9303      	str	r3, [sp, #12]
   1d7b0:	06eb      	lsls	r3, r5, #27
   1d7b2:	d478      	bmi.n	1d8a6 <__ssvfiscanf_r+0x426>
   1d7b4:	076e      	lsls	r6, r5, #29
   1d7b6:	f100 82d4 	bmi.w	1dd62 <__ssvfiscanf_r+0x8e2>
   1d7ba:	07ec      	lsls	r4, r5, #31
   1d7bc:	f100 82c0 	bmi.w	1dd40 <__ssvfiscanf_r+0x8c0>
   1d7c0:	07a8      	lsls	r0, r5, #30
   1d7c2:	f140 82bd 	bpl.w	1dd40 <__ssvfiscanf_r+0x8c0>
   1d7c6:	9a06      	ldr	r2, [sp, #24]
   1d7c8:	9e03      	ldr	r6, [sp, #12]
   1d7ca:	6813      	ldr	r3, [r2, #0]
   1d7cc:	4650      	mov	r0, sl
   1d7ce:	17c1      	asrs	r1, r0, #31
   1d7d0:	3204      	adds	r2, #4
   1d7d2:	9206      	str	r2, [sp, #24]
   1d7d4:	e9c3 0100 	strd	r0, r1, [r3]
   1d7d8:	4634      	mov	r4, r6
   1d7da:	e697      	b.n	1d50c <__ssvfiscanf_r+0x8c>
   1d7dc:	f896 8001 	ldrb.w	r8, [r6, #1]
   1d7e0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1d7e4:	f000 82a5 	beq.w	1dd32 <__ssvfiscanf_r+0x8b2>
   1d7e8:	f045 0501 	orr.w	r5, r5, #1
   1d7ec:	461e      	mov	r6, r3
   1d7ee:	e69d      	b.n	1d52c <__ssvfiscanf_r+0xac>
   1d7f0:	4619      	mov	r1, r3
   1d7f2:	a818      	add	r0, sp, #96	; 0x60
   1d7f4:	f000 ff0e 	bl	1e614 <__sccl>
   1d7f8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1d7fc:	9003      	str	r0, [sp, #12]
   1d7fe:	2601      	movs	r6, #1
   1d800:	e73b      	b.n	1d67a <__ssvfiscanf_r+0x1fa>
   1d802:	9303      	str	r3, [sp, #12]
   1d804:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1d808:	e7c4      	b.n	1d794 <__ssvfiscanf_r+0x314>
   1d80a:	9303      	str	r3, [sp, #12]
   1d80c:	f045 0501 	orr.w	r5, r5, #1
   1d810:	e7c7      	b.n	1d7a2 <__ssvfiscanf_r+0x322>
   1d812:	f896 8001 	ldrb.w	r8, [r6, #1]
   1d816:	f045 0502 	orr.w	r5, r5, #2
   1d81a:	461e      	mov	r6, r3
   1d81c:	e686      	b.n	1d52c <__ssvfiscanf_r+0xac>
   1d81e:	9303      	str	r3, [sp, #12]
   1d820:	f045 0501 	orr.w	r5, r5, #1
   1d824:	e78d      	b.n	1d742 <__ssvfiscanf_r+0x2c2>
   1d826:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1d82a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
   1d82e:	3c30      	subs	r4, #48	; 0x30
   1d830:	f896 8001 	ldrb.w	r8, [r6, #1]
   1d834:	461e      	mov	r6, r3
   1d836:	e679      	b.n	1d52c <__ssvfiscanf_r+0xac>
   1d838:	f896 8001 	ldrb.w	r8, [r6, #1]
   1d83c:	f045 0510 	orr.w	r5, r5, #16
   1d840:	461e      	mov	r6, r3
   1d842:	e673      	b.n	1d52c <__ssvfiscanf_r+0xac>
   1d844:	9303      	str	r3, [sp, #12]
   1d846:	f000 fc89 	bl	1e15c <__locale_ctype_ptr>
   1d84a:	4440      	add	r0, r8
   1d84c:	7843      	ldrb	r3, [r0, #1]
   1d84e:	f003 0303 	and.w	r3, r3, #3
   1d852:	2b01      	cmp	r3, #1
   1d854:	f47f af75 	bne.w	1d742 <__ssvfiscanf_r+0x2c2>
   1d858:	f045 0501 	orr.w	r5, r5, #1
   1d85c:	e771      	b.n	1d742 <__ssvfiscanf_r+0x2c2>
   1d85e:	ab0c      	add	r3, sp, #48	; 0x30
   1d860:	4618      	mov	r0, r3
   1d862:	2208      	movs	r2, #8
   1d864:	2100      	movs	r1, #0
   1d866:	9308      	str	r3, [sp, #32]
   1d868:	f7fd fc0e 	bl	1b088 <memset>
   1d86c:	f015 0310 	ands.w	r3, r5, #16
   1d870:	9309      	str	r3, [sp, #36]	; 0x24
   1d872:	f000 81e1 	beq.w	1dc38 <__ssvfiscanf_r+0x7b8>
   1d876:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   1d87a:	2600      	movs	r6, #0
   1d87c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1d880:	f000 fc6c 	bl	1e15c <__locale_ctype_ptr>
   1d884:	f8db 3000 	ldr.w	r3, [fp]
   1d888:	781b      	ldrb	r3, [r3, #0]
   1d88a:	4403      	add	r3, r0
   1d88c:	785b      	ldrb	r3, [r3, #1]
   1d88e:	071a      	lsls	r2, r3, #28
   1d890:	d402      	bmi.n	1d898 <__ssvfiscanf_r+0x418>
   1d892:	2c00      	cmp	r4, #0
   1d894:	f040 8270 	bne.w	1dd78 <__ssvfiscanf_r+0x8f8>
   1d898:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d89a:	b923      	cbnz	r3, 1d8a6 <__ssvfiscanf_r+0x426>
   1d89c:	f8c9 3000 	str.w	r3, [r9]
   1d8a0:	9b05      	ldr	r3, [sp, #20]
   1d8a2:	3301      	adds	r3, #1
   1d8a4:	9305      	str	r3, [sp, #20]
   1d8a6:	9e03      	ldr	r6, [sp, #12]
   1d8a8:	4634      	mov	r4, r6
   1d8aa:	e62f      	b.n	1d50c <__ssvfiscanf_r+0x8c>
   1d8ac:	2c00      	cmp	r4, #0
   1d8ae:	bf08      	it	eq
   1d8b0:	f04f 34ff 	moveq.w	r4, #4294967295
   1d8b4:	06e8      	lsls	r0, r5, #27
   1d8b6:	f140 810b 	bpl.w	1dad0 <__ssvfiscanf_r+0x650>
   1d8ba:	f8db 2000 	ldr.w	r2, [fp]
   1d8be:	2500      	movs	r5, #0
   1d8c0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1d8c4:	7813      	ldrb	r3, [r2, #0]
   1d8c6:	f818 3003 	ldrb.w	r3, [r8, r3]
   1d8ca:	3201      	adds	r2, #1
   1d8cc:	b1db      	cbz	r3, 1d906 <__ssvfiscanf_r+0x486>
   1d8ce:	f8db 3004 	ldr.w	r3, [fp, #4]
   1d8d2:	f8cb 2000 	str.w	r2, [fp]
   1d8d6:	3501      	adds	r5, #1
   1d8d8:	3b01      	subs	r3, #1
   1d8da:	42ac      	cmp	r4, r5
   1d8dc:	f8cb 3004 	str.w	r3, [fp, #4]
   1d8e0:	f43f aeff 	beq.w	1d6e2 <__ssvfiscanf_r+0x262>
   1d8e4:	2b00      	cmp	r3, #0
   1d8e6:	dced      	bgt.n	1d8c4 <__ssvfiscanf_r+0x444>
   1d8e8:	4659      	mov	r1, fp
   1d8ea:	4638      	mov	r0, r7
   1d8ec:	f7ff fd6a 	bl	1d3c4 <__ssrefill_r>
   1d8f0:	2800      	cmp	r0, #0
   1d8f2:	f47f aef6 	bne.w	1d6e2 <__ssvfiscanf_r+0x262>
   1d8f6:	f8db 2000 	ldr.w	r2, [fp]
   1d8fa:	7813      	ldrb	r3, [r2, #0]
   1d8fc:	f818 3003 	ldrb.w	r3, [r8, r3]
   1d900:	3201      	adds	r2, #1
   1d902:	2b00      	cmp	r3, #0
   1d904:	d1e3      	bne.n	1d8ce <__ssvfiscanf_r+0x44e>
   1d906:	2d00      	cmp	r5, #0
   1d908:	f47f aeeb 	bne.w	1d6e2 <__ssvfiscanf_r+0x262>
   1d90c:	e604      	b.n	1d518 <__ssvfiscanf_r+0x98>
   1d90e:	bf00      	nop
   1d910:	0001e7b1 	.word	0x0001e7b1
   1d914:	0001c7a5 	.word	0x0001c7a5
   1d918:	1e63      	subs	r3, r4, #1
   1d91a:	2b26      	cmp	r3, #38	; 0x26
   1d91c:	bf8c      	ite	hi
   1d91e:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
   1d922:	2200      	movls	r2, #0
   1d924:	f04f 0900 	mov.w	r9, #0
   1d928:	4611      	mov	r1, r2
   1d92a:	ae0e      	add	r6, sp, #56	; 0x38
   1d92c:	464b      	mov	r3, r9
   1d92e:	46b9      	mov	r9, r7
   1d930:	9f04      	ldr	r7, [sp, #16]
   1d932:	4652      	mov	r2, sl
   1d934:	bf88      	it	hi
   1d936:	2427      	movhi	r4, #39	; 0x27
   1d938:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
   1d93c:	46b0      	mov	r8, r6
   1d93e:	468a      	mov	sl, r1
   1d940:	f8db 0000 	ldr.w	r0, [fp]
   1d944:	f890 e000 	ldrb.w	lr, [r0]
   1d948:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
   1d94c:	294d      	cmp	r1, #77	; 0x4d
   1d94e:	d842      	bhi.n	1d9d6 <__ssvfiscanf_r+0x556>
   1d950:	e8df f001 	tbb	[pc, r1]
   1d954:	418e418e 	.word	0x418e418e
   1d958:	5d5d6341 	.word	0x5d5d6341
   1d95c:	5d5d5d5d 	.word	0x5d5d5d5d
   1d960:	4188885d 	.word	0x4188885d
   1d964:	41414141 	.word	0x41414141
   1d968:	58584141 	.word	0x58584141
   1d96c:	58585858 	.word	0x58585858
   1d970:	41414141 	.word	0x41414141
   1d974:	41414141 	.word	0x41414141
   1d978:	41414141 	.word	0x41414141
   1d97c:	41414141 	.word	0x41414141
   1d980:	41412741 	.word	0x41412741
   1d984:	41414141 	.word	0x41414141
   1d988:	58584141 	.word	0x58584141
   1d98c:	58585858 	.word	0x58585858
   1d990:	41414141 	.word	0x41414141
   1d994:	41414141 	.word	0x41414141
   1d998:	41414141 	.word	0x41414141
   1d99c:	41414141 	.word	0x41414141
   1d9a0:	2741      	.short	0x2741
   1d9a2:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
   1d9a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1d9aa:	d114      	bne.n	1d9d6 <__ssvfiscanf_r+0x556>
   1d9ac:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   1d9b0:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
   1d9b4:	2710      	movs	r7, #16
   1d9b6:	f8db 1004 	ldr.w	r1, [fp, #4]
   1d9ba:	f888 e000 	strb.w	lr, [r8]
   1d9be:	3901      	subs	r1, #1
   1d9c0:	2900      	cmp	r1, #0
   1d9c2:	f108 0801 	add.w	r8, r8, #1
   1d9c6:	f8cb 1004 	str.w	r1, [fp, #4]
   1d9ca:	dd40      	ble.n	1da4e <__ssvfiscanf_r+0x5ce>
   1d9cc:	3001      	adds	r0, #1
   1d9ce:	f8cb 0000 	str.w	r0, [fp]
   1d9d2:	3c01      	subs	r4, #1
   1d9d4:	d1b4      	bne.n	1d940 <__ssvfiscanf_r+0x4c0>
   1d9d6:	05e8      	lsls	r0, r5, #23
   1d9d8:	9704      	str	r7, [sp, #16]
   1d9da:	4692      	mov	sl, r2
   1d9dc:	464f      	mov	r7, r9
   1d9de:	4699      	mov	r9, r3
   1d9e0:	d505      	bpl.n	1d9ee <__ssvfiscanf_r+0x56e>
   1d9e2:	45b0      	cmp	r8, r6
   1d9e4:	f200 8194 	bhi.w	1dd10 <__ssvfiscanf_r+0x890>
   1d9e8:	45b0      	cmp	r8, r6
   1d9ea:	f43f ad95 	beq.w	1d518 <__ssvfiscanf_r+0x98>
   1d9ee:	f015 0410 	ands.w	r4, r5, #16
   1d9f2:	f000 80e5 	beq.w	1dbc0 <__ssvfiscanf_r+0x740>
   1d9f6:	eba8 0606 	sub.w	r6, r8, r6
   1d9fa:	44b1      	add	r9, r6
   1d9fc:	9e03      	ldr	r6, [sp, #12]
   1d9fe:	44ca      	add	sl, r9
   1da00:	4634      	mov	r4, r6
   1da02:	e583      	b.n	1d50c <__ssvfiscanf_r+0x8c>
   1da04:	2f0a      	cmp	r7, #10
   1da06:	dde6      	ble.n	1d9d6 <__ssvfiscanf_r+0x556>
   1da08:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1da0c:	e7d3      	b.n	1d9b6 <__ssvfiscanf_r+0x536>
   1da0e:	49b3      	ldr	r1, [pc, #716]	; (1dcdc <__ssvfiscanf_r+0x85c>)
   1da10:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1da14:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1da18:	e7cd      	b.n	1d9b6 <__ssvfiscanf_r+0x536>
   1da1a:	0529      	lsls	r1, r5, #20
   1da1c:	d5cb      	bpl.n	1d9b6 <__ssvfiscanf_r+0x536>
   1da1e:	b917      	cbnz	r7, 1da26 <__ssvfiscanf_r+0x5a6>
   1da20:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1da24:	2708      	movs	r7, #8
   1da26:	0569      	lsls	r1, r5, #21
   1da28:	f100 80fa 	bmi.w	1dc20 <__ssvfiscanf_r+0x7a0>
   1da2c:	f425 7560 	bic.w	r5, r5, #896	; 0x380
   1da30:	f1ba 0f00 	cmp.w	sl, #0
   1da34:	d002      	beq.n	1da3c <__ssvfiscanf_r+0x5bc>
   1da36:	f10a 3aff 	add.w	sl, sl, #4294967295
   1da3a:	3401      	adds	r4, #1
   1da3c:	f8db 1004 	ldr.w	r1, [fp, #4]
   1da40:	3901      	subs	r1, #1
   1da42:	2900      	cmp	r1, #0
   1da44:	f103 0301 	add.w	r3, r3, #1
   1da48:	f8cb 1004 	str.w	r1, [fp, #4]
   1da4c:	dcbe      	bgt.n	1d9cc <__ssvfiscanf_r+0x54c>
   1da4e:	4659      	mov	r1, fp
   1da50:	4648      	mov	r0, r9
   1da52:	9308      	str	r3, [sp, #32]
   1da54:	9204      	str	r2, [sp, #16]
   1da56:	f7ff fcb5 	bl	1d3c4 <__ssrefill_r>
   1da5a:	9a04      	ldr	r2, [sp, #16]
   1da5c:	9b08      	ldr	r3, [sp, #32]
   1da5e:	2800      	cmp	r0, #0
   1da60:	d0b7      	beq.n	1d9d2 <__ssvfiscanf_r+0x552>
   1da62:	e7b8      	b.n	1d9d6 <__ssvfiscanf_r+0x556>
   1da64:	499d      	ldr	r1, [pc, #628]	; (1dcdc <__ssvfiscanf_r+0x85c>)
   1da66:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1da6a:	2f08      	cmp	r7, #8
   1da6c:	dccc      	bgt.n	1da08 <__ssvfiscanf_r+0x588>
   1da6e:	e7b2      	b.n	1d9d6 <__ssvfiscanf_r+0x556>
   1da70:	0629      	lsls	r1, r5, #24
   1da72:	d5b0      	bpl.n	1d9d6 <__ssvfiscanf_r+0x556>
   1da74:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   1da78:	e79d      	b.n	1d9b6 <__ssvfiscanf_r+0x536>
   1da7a:	2c00      	cmp	r4, #0
   1da7c:	bf08      	it	eq
   1da7e:	f04f 34ff 	moveq.w	r4, #4294967295
   1da82:	f015 0601 	ands.w	r6, r5, #1
   1da86:	f47f aeea 	bne.w	1d85e <__ssvfiscanf_r+0x3de>
   1da8a:	06eb      	lsls	r3, r5, #27
   1da8c:	f140 80f4 	bpl.w	1dc78 <__ssvfiscanf_r+0x7f8>
   1da90:	f000 fb64 	bl	1e15c <__locale_ctype_ptr>
   1da94:	f8db 3000 	ldr.w	r3, [fp]
   1da98:	781a      	ldrb	r2, [r3, #0]
   1da9a:	4410      	add	r0, r2
   1da9c:	3301      	adds	r3, #1
   1da9e:	7842      	ldrb	r2, [r0, #1]
   1daa0:	0715      	lsls	r5, r2, #28
   1daa2:	d411      	bmi.n	1dac8 <__ssvfiscanf_r+0x648>
   1daa4:	f8db 2004 	ldr.w	r2, [fp, #4]
   1daa8:	f8cb 3000 	str.w	r3, [fp]
   1daac:	3601      	adds	r6, #1
   1daae:	3a01      	subs	r2, #1
   1dab0:	42b4      	cmp	r4, r6
   1dab2:	f8cb 2004 	str.w	r2, [fp, #4]
   1dab6:	d007      	beq.n	1dac8 <__ssvfiscanf_r+0x648>
   1dab8:	2a00      	cmp	r2, #0
   1daba:	dce9      	bgt.n	1da90 <__ssvfiscanf_r+0x610>
   1dabc:	4659      	mov	r1, fp
   1dabe:	4638      	mov	r0, r7
   1dac0:	f7ff fc80 	bl	1d3c4 <__ssrefill_r>
   1dac4:	2800      	cmp	r0, #0
   1dac6:	d0e3      	beq.n	1da90 <__ssvfiscanf_r+0x610>
   1dac8:	44b2      	add	sl, r6
   1daca:	9e03      	ldr	r6, [sp, #12]
   1dacc:	4634      	mov	r4, r6
   1dace:	e51d      	b.n	1d50c <__ssvfiscanf_r+0x8c>
   1dad0:	9a06      	ldr	r2, [sp, #24]
   1dad2:	6815      	ldr	r5, [r2, #0]
   1dad4:	1d16      	adds	r6, r2, #4
   1dad6:	46a9      	mov	r9, r5
   1dad8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1dadc:	f8db 3000 	ldr.w	r3, [fp]
   1dae0:	781a      	ldrb	r2, [r3, #0]
   1dae2:	f818 2002 	ldrb.w	r2, [r8, r2]
   1dae6:	1c59      	adds	r1, r3, #1
   1dae8:	b1c2      	cbz	r2, 1db1c <__ssvfiscanf_r+0x69c>
   1daea:	f8db 2004 	ldr.w	r2, [fp, #4]
   1daee:	f8cb 1000 	str.w	r1, [fp]
   1daf2:	3a01      	subs	r2, #1
   1daf4:	f8cb 2004 	str.w	r2, [fp, #4]
   1daf8:	781b      	ldrb	r3, [r3, #0]
   1dafa:	f809 3b01 	strb.w	r3, [r9], #1
   1dafe:	3c01      	subs	r4, #1
   1db00:	d00c      	beq.n	1db1c <__ssvfiscanf_r+0x69c>
   1db02:	f8db 3004 	ldr.w	r3, [fp, #4]
   1db06:	2b00      	cmp	r3, #0
   1db08:	dce8      	bgt.n	1dadc <__ssvfiscanf_r+0x65c>
   1db0a:	4659      	mov	r1, fp
   1db0c:	4638      	mov	r0, r7
   1db0e:	f7ff fc59 	bl	1d3c4 <__ssrefill_r>
   1db12:	2800      	cmp	r0, #0
   1db14:	d0e2      	beq.n	1dadc <__ssvfiscanf_r+0x65c>
   1db16:	454d      	cmp	r5, r9
   1db18:	f43f ae02 	beq.w	1d720 <__ssvfiscanf_r+0x2a0>
   1db1c:	ebb9 0505 	subs.w	r5, r9, r5
   1db20:	f43f acfa 	beq.w	1d518 <__ssvfiscanf_r+0x98>
   1db24:	9a05      	ldr	r2, [sp, #20]
   1db26:	9606      	str	r6, [sp, #24]
   1db28:	2300      	movs	r3, #0
   1db2a:	3201      	adds	r2, #1
   1db2c:	9205      	str	r2, [sp, #20]
   1db2e:	f889 3000 	strb.w	r3, [r9]
   1db32:	e5d6      	b.n	1d6e2 <__ssvfiscanf_r+0x262>
   1db34:	ab0c      	add	r3, sp, #48	; 0x30
   1db36:	4618      	mov	r0, r3
   1db38:	2208      	movs	r2, #8
   1db3a:	2100      	movs	r1, #0
   1db3c:	9308      	str	r3, [sp, #32]
   1db3e:	f7fd faa3 	bl	1b088 <memset>
   1db42:	f015 0310 	ands.w	r3, r5, #16
   1db46:	9309      	str	r3, [sp, #36]	; 0x24
   1db48:	d06d      	beq.n	1dc26 <__ssvfiscanf_r+0x7a6>
   1db4a:	f04f 0900 	mov.w	r9, #0
   1db4e:	2c00      	cmp	r4, #0
   1db50:	f43f aea9 	beq.w	1d8a6 <__ssvfiscanf_r+0x426>
   1db54:	2500      	movs	r5, #0
   1db56:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1db5a:	f000 faed 	bl	1e138 <__locale_mb_cur_max>
   1db5e:	4285      	cmp	r5, r0
   1db60:	f43f adde 	beq.w	1d720 <__ssvfiscanf_r+0x2a0>
   1db64:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1db68:	f812 0b01 	ldrb.w	r0, [r2], #1
   1db6c:	f8cb 2000 	str.w	r2, [fp]
   1db70:	3b01      	subs	r3, #1
   1db72:	9a08      	ldr	r2, [sp, #32]
   1db74:	9200      	str	r2, [sp, #0]
   1db76:	1c6e      	adds	r6, r5, #1
   1db78:	f8cb 3004 	str.w	r3, [fp, #4]
   1db7c:	f808 0005 	strb.w	r0, [r8, r5]
   1db80:	4633      	mov	r3, r6
   1db82:	4642      	mov	r2, r8
   1db84:	4649      	mov	r1, r9
   1db86:	4638      	mov	r0, r7
   1db88:	f000 faf6 	bl	1e178 <_mbrtowc_r>
   1db8c:	1c43      	adds	r3, r0, #1
   1db8e:	f43f adc7 	beq.w	1d720 <__ssvfiscanf_r+0x2a0>
   1db92:	2800      	cmp	r0, #0
   1db94:	d15d      	bne.n	1dc52 <__ssvfiscanf_r+0x7d2>
   1db96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1db98:	2b00      	cmp	r3, #0
   1db9a:	d15e      	bne.n	1dc5a <__ssvfiscanf_r+0x7da>
   1db9c:	f8c9 3000 	str.w	r3, [r9]
   1dba0:	44b2      	add	sl, r6
   1dba2:	3c01      	subs	r4, #1
   1dba4:	f109 0904 	add.w	r9, r9, #4
   1dba8:	2500      	movs	r5, #0
   1dbaa:	f8db 3004 	ldr.w	r3, [fp, #4]
   1dbae:	2b00      	cmp	r3, #0
   1dbb0:	dd2d      	ble.n	1dc0e <__ssvfiscanf_r+0x78e>
   1dbb2:	2c00      	cmp	r4, #0
   1dbb4:	d1d1      	bne.n	1db5a <__ssvfiscanf_r+0x6da>
   1dbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dbb8:	2b00      	cmp	r3, #0
   1dbba:	f43f ae71 	beq.w	1d8a0 <__ssvfiscanf_r+0x420>
   1dbbe:	e672      	b.n	1d8a6 <__ssvfiscanf_r+0x426>
   1dbc0:	4622      	mov	r2, r4
   1dbc2:	4631      	mov	r1, r6
   1dbc4:	f888 4000 	strb.w	r4, [r8]
   1dbc8:	9b04      	ldr	r3, [sp, #16]
   1dbca:	9c07      	ldr	r4, [sp, #28]
   1dbcc:	4638      	mov	r0, r7
   1dbce:	47a0      	blx	r4
   1dbd0:	06a9      	lsls	r1, r5, #26
   1dbd2:	d438      	bmi.n	1dc46 <__ssvfiscanf_r+0x7c6>
   1dbd4:	076a      	lsls	r2, r5, #29
   1dbd6:	f100 80be 	bmi.w	1dd56 <__ssvfiscanf_r+0x8d6>
   1dbda:	f015 0201 	ands.w	r2, r5, #1
   1dbde:	d132      	bne.n	1dc46 <__ssvfiscanf_r+0x7c6>
   1dbe0:	07ab      	lsls	r3, r5, #30
   1dbe2:	d530      	bpl.n	1dc46 <__ssvfiscanf_r+0x7c6>
   1dbe4:	9b07      	ldr	r3, [sp, #28]
   1dbe6:	4619      	mov	r1, r3
   1dbe8:	4b3d      	ldr	r3, [pc, #244]	; (1dce0 <__ssvfiscanf_r+0x860>)
   1dbea:	4299      	cmp	r1, r3
   1dbec:	4638      	mov	r0, r7
   1dbee:	9b04      	ldr	r3, [sp, #16]
   1dbf0:	4631      	mov	r1, r6
   1dbf2:	f000 8105 	beq.w	1de00 <__ssvfiscanf_r+0x980>
   1dbf6:	f000 febb 	bl	1e970 <_strtoll_r>
   1dbfa:	9a06      	ldr	r2, [sp, #24]
   1dbfc:	6813      	ldr	r3, [r2, #0]
   1dbfe:	e9c3 0100 	strd	r0, r1, [r3]
   1dc02:	3204      	adds	r2, #4
   1dc04:	9206      	str	r2, [sp, #24]
   1dc06:	9b05      	ldr	r3, [sp, #20]
   1dc08:	3301      	adds	r3, #1
   1dc0a:	9305      	str	r3, [sp, #20]
   1dc0c:	e6f3      	b.n	1d9f6 <__ssvfiscanf_r+0x576>
   1dc0e:	4659      	mov	r1, fp
   1dc10:	4638      	mov	r0, r7
   1dc12:	f7ff fbd7 	bl	1d3c4 <__ssrefill_r>
   1dc16:	2800      	cmp	r0, #0
   1dc18:	d0cb      	beq.n	1dbb2 <__ssvfiscanf_r+0x732>
   1dc1a:	2d00      	cmp	r5, #0
   1dc1c:	d0cb      	beq.n	1dbb6 <__ssvfiscanf_r+0x736>
   1dc1e:	e57f      	b.n	1d720 <__ssvfiscanf_r+0x2a0>
   1dc20:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
   1dc24:	e6c7      	b.n	1d9b6 <__ssvfiscanf_r+0x536>
   1dc26:	9a06      	ldr	r2, [sp, #24]
   1dc28:	4613      	mov	r3, r2
   1dc2a:	3304      	adds	r3, #4
   1dc2c:	f8d2 9000 	ldr.w	r9, [r2]
   1dc30:	9306      	str	r3, [sp, #24]
   1dc32:	2c00      	cmp	r4, #0
   1dc34:	d18e      	bne.n	1db54 <__ssvfiscanf_r+0x6d4>
   1dc36:	e633      	b.n	1d8a0 <__ssvfiscanf_r+0x420>
   1dc38:	9a06      	ldr	r2, [sp, #24]
   1dc3a:	4613      	mov	r3, r2
   1dc3c:	3304      	adds	r3, #4
   1dc3e:	f8d2 9000 	ldr.w	r9, [r2]
   1dc42:	9306      	str	r3, [sp, #24]
   1dc44:	e619      	b.n	1d87a <__ssvfiscanf_r+0x3fa>
   1dc46:	9a06      	ldr	r2, [sp, #24]
   1dc48:	6813      	ldr	r3, [r2, #0]
   1dc4a:	3204      	adds	r2, #4
   1dc4c:	9206      	str	r2, [sp, #24]
   1dc4e:	6018      	str	r0, [r3, #0]
   1dc50:	e7d9      	b.n	1dc06 <__ssvfiscanf_r+0x786>
   1dc52:	3002      	adds	r0, #2
   1dc54:	d105      	bne.n	1dc62 <__ssvfiscanf_r+0x7e2>
   1dc56:	4635      	mov	r5, r6
   1dc58:	e7a7      	b.n	1dbaa <__ssvfiscanf_r+0x72a>
   1dc5a:	44b2      	add	sl, r6
   1dc5c:	3c01      	subs	r4, #1
   1dc5e:	4605      	mov	r5, r0
   1dc60:	e7a3      	b.n	1dbaa <__ssvfiscanf_r+0x72a>
   1dc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dc64:	44b2      	add	sl, r6
   1dc66:	3c01      	subs	r4, #1
   1dc68:	2b00      	cmp	r3, #0
   1dc6a:	d09b      	beq.n	1dba4 <__ssvfiscanf_r+0x724>
   1dc6c:	2500      	movs	r5, #0
   1dc6e:	e79c      	b.n	1dbaa <__ssvfiscanf_r+0x72a>
   1dc70:	2d00      	cmp	r5, #0
   1dc72:	f47f ad36 	bne.w	1d6e2 <__ssvfiscanf_r+0x262>
   1dc76:	e553      	b.n	1d720 <__ssvfiscanf_r+0x2a0>
   1dc78:	9a06      	ldr	r2, [sp, #24]
   1dc7a:	6816      	ldr	r6, [r2, #0]
   1dc7c:	f102 0804 	add.w	r8, r2, #4
   1dc80:	4635      	mov	r5, r6
   1dc82:	f000 fa6b 	bl	1e15c <__locale_ctype_ptr>
   1dc86:	f8db 2000 	ldr.w	r2, [fp]
   1dc8a:	7813      	ldrb	r3, [r2, #0]
   1dc8c:	4418      	add	r0, r3
   1dc8e:	1c51      	adds	r1, r2, #1
   1dc90:	7843      	ldrb	r3, [r0, #1]
   1dc92:	0718      	lsls	r0, r3, #28
   1dc94:	d415      	bmi.n	1dcc2 <__ssvfiscanf_r+0x842>
   1dc96:	f8db 3004 	ldr.w	r3, [fp, #4]
   1dc9a:	f8cb 1000 	str.w	r1, [fp]
   1dc9e:	3b01      	subs	r3, #1
   1dca0:	f8cb 3004 	str.w	r3, [fp, #4]
   1dca4:	7813      	ldrb	r3, [r2, #0]
   1dca6:	f805 3b01 	strb.w	r3, [r5], #1
   1dcaa:	3c01      	subs	r4, #1
   1dcac:	d009      	beq.n	1dcc2 <__ssvfiscanf_r+0x842>
   1dcae:	f8db 3004 	ldr.w	r3, [fp, #4]
   1dcb2:	2b00      	cmp	r3, #0
   1dcb4:	dce5      	bgt.n	1dc82 <__ssvfiscanf_r+0x802>
   1dcb6:	4659      	mov	r1, fp
   1dcb8:	4638      	mov	r0, r7
   1dcba:	f7ff fb83 	bl	1d3c4 <__ssrefill_r>
   1dcbe:	2800      	cmp	r0, #0
   1dcc0:	d0df      	beq.n	1dc82 <__ssvfiscanf_r+0x802>
   1dcc2:	1bae      	subs	r6, r5, r6
   1dcc4:	9a05      	ldr	r2, [sp, #20]
   1dcc6:	f8cd 8018 	str.w	r8, [sp, #24]
   1dcca:	44b2      	add	sl, r6
   1dccc:	9e03      	ldr	r6, [sp, #12]
   1dcce:	2300      	movs	r3, #0
   1dcd0:	3201      	adds	r2, #1
   1dcd2:	9205      	str	r2, [sp, #20]
   1dcd4:	702b      	strb	r3, [r5, #0]
   1dcd6:	4634      	mov	r4, r6
   1dcd8:	e418      	b.n	1d50c <__ssvfiscanf_r+0x8c>
   1dcda:	bf00      	nop
   1dcdc:	0002102c 	.word	0x0002102c
   1dce0:	0001c7a5 	.word	0x0001c7a5
   1dce4:	9d06      	ldr	r5, [sp, #24]
   1dce6:	4623      	mov	r3, r4
   1dce8:	6829      	ldr	r1, [r5, #0]
   1dcea:	f8cd b000 	str.w	fp, [sp]
   1dcee:	2201      	movs	r2, #1
   1dcf0:	4638      	mov	r0, r7
   1dcf2:	f7ff fb85 	bl	1d400 <_sfread_r>
   1dcf6:	1d2e      	adds	r6, r5, #4
   1dcf8:	2800      	cmp	r0, #0
   1dcfa:	f43f ad11 	beq.w	1d720 <__ssvfiscanf_r+0x2a0>
   1dcfe:	9b05      	ldr	r3, [sp, #20]
   1dd00:	9606      	str	r6, [sp, #24]
   1dd02:	9e03      	ldr	r6, [sp, #12]
   1dd04:	3301      	adds	r3, #1
   1dd06:	4482      	add	sl, r0
   1dd08:	9305      	str	r3, [sp, #20]
   1dd0a:	4634      	mov	r4, r6
   1dd0c:	f7ff bbfe 	b.w	1d50c <__ssvfiscanf_r+0x8c>
   1dd10:	f818 1c01 	ldrb.w	r1, [r8, #-1]
   1dd14:	465a      	mov	r2, fp
   1dd16:	4638      	mov	r0, r7
   1dd18:	f7ff fb14 	bl	1d344 <_sungetc_r>
   1dd1c:	f108 38ff 	add.w	r8, r8, #4294967295
   1dd20:	e662      	b.n	1d9e8 <__ssvfiscanf_r+0x568>
   1dd22:	4659      	mov	r1, fp
   1dd24:	4638      	mov	r0, r7
   1dd26:	f7ff fb4d 	bl	1d3c4 <__ssrefill_r>
   1dd2a:	2800      	cmp	r0, #0
   1dd2c:	f43f ac84 	beq.w	1d638 <__ssvfiscanf_r+0x1b8>
   1dd30:	e4f6      	b.n	1d720 <__ssvfiscanf_r+0x2a0>
   1dd32:	f896 8002 	ldrb.w	r8, [r6, #2]
   1dd36:	f045 0502 	orr.w	r5, r5, #2
   1dd3a:	3602      	adds	r6, #2
   1dd3c:	f7ff bbf6 	b.w	1d52c <__ssvfiscanf_r+0xac>
   1dd40:	9a06      	ldr	r2, [sp, #24]
   1dd42:	9e03      	ldr	r6, [sp, #12]
   1dd44:	6813      	ldr	r3, [r2, #0]
   1dd46:	f8c3 a000 	str.w	sl, [r3]
   1dd4a:	4613      	mov	r3, r2
   1dd4c:	3304      	adds	r3, #4
   1dd4e:	9306      	str	r3, [sp, #24]
   1dd50:	4634      	mov	r4, r6
   1dd52:	f7ff bbdb 	b.w	1d50c <__ssvfiscanf_r+0x8c>
   1dd56:	9a06      	ldr	r2, [sp, #24]
   1dd58:	6813      	ldr	r3, [r2, #0]
   1dd5a:	3204      	adds	r2, #4
   1dd5c:	9206      	str	r2, [sp, #24]
   1dd5e:	8018      	strh	r0, [r3, #0]
   1dd60:	e751      	b.n	1dc06 <__ssvfiscanf_r+0x786>
   1dd62:	9a06      	ldr	r2, [sp, #24]
   1dd64:	9e03      	ldr	r6, [sp, #12]
   1dd66:	6813      	ldr	r3, [r2, #0]
   1dd68:	f8a3 a000 	strh.w	sl, [r3]
   1dd6c:	4613      	mov	r3, r2
   1dd6e:	3304      	adds	r3, #4
   1dd70:	9306      	str	r3, [sp, #24]
   1dd72:	4634      	mov	r4, r6
   1dd74:	f7ff bbca 	b.w	1d50c <__ssvfiscanf_r+0x8c>
   1dd78:	f000 f9de 	bl	1e138 <__locale_mb_cur_max>
   1dd7c:	4286      	cmp	r6, r0
   1dd7e:	f43f accf 	beq.w	1d720 <__ssvfiscanf_r+0x2a0>
   1dd82:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1dd86:	f812 0b01 	ldrb.w	r0, [r2], #1
   1dd8a:	f8cb 2000 	str.w	r2, [fp]
   1dd8e:	3b01      	subs	r3, #1
   1dd90:	9a08      	ldr	r2, [sp, #32]
   1dd92:	9200      	str	r2, [sp, #0]
   1dd94:	1c75      	adds	r5, r6, #1
   1dd96:	f8cb 3004 	str.w	r3, [fp, #4]
   1dd9a:	4649      	mov	r1, r9
   1dd9c:	f808 0006 	strb.w	r0, [r8, r6]
   1dda0:	462b      	mov	r3, r5
   1dda2:	4642      	mov	r2, r8
   1dda4:	4638      	mov	r0, r7
   1dda6:	f000 f9e7 	bl	1e178 <_mbrtowc_r>
   1ddaa:	1c41      	adds	r1, r0, #1
   1ddac:	f43f acb8 	beq.w	1d720 <__ssvfiscanf_r+0x2a0>
   1ddb0:	b198      	cbz	r0, 1ddda <__ssvfiscanf_r+0x95a>
   1ddb2:	3002      	adds	r0, #2
   1ddb4:	bf08      	it	eq
   1ddb6:	462e      	moveq	r6, r5
   1ddb8:	d12e      	bne.n	1de18 <__ssvfiscanf_r+0x998>
   1ddba:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ddbe:	2b00      	cmp	r3, #0
   1ddc0:	f73f ad5e 	bgt.w	1d880 <__ssvfiscanf_r+0x400>
   1ddc4:	4659      	mov	r1, fp
   1ddc6:	4638      	mov	r0, r7
   1ddc8:	f7ff fafc 	bl	1d3c4 <__ssrefill_r>
   1ddcc:	2800      	cmp	r0, #0
   1ddce:	f43f ad57 	beq.w	1d880 <__ssvfiscanf_r+0x400>
   1ddd2:	2e00      	cmp	r6, #0
   1ddd4:	f47f aca4 	bne.w	1d720 <__ssvfiscanf_r+0x2a0>
   1ddd8:	e55e      	b.n	1d898 <__ssvfiscanf_r+0x418>
   1ddda:	f8c9 0000 	str.w	r0, [r9]
   1ddde:	f000 f99d 	bl	1e11c <iswspace>
   1dde2:	4606      	mov	r6, r0
   1dde4:	b178      	cbz	r0, 1de06 <__ssvfiscanf_r+0x986>
   1dde6:	2d00      	cmp	r5, #0
   1dde8:	f43f ad56 	beq.w	1d898 <__ssvfiscanf_r+0x418>
   1ddec:	4445      	add	r5, r8
   1ddee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1ddf2:	465a      	mov	r2, fp
   1ddf4:	4638      	mov	r0, r7
   1ddf6:	f7ff faa5 	bl	1d344 <_sungetc_r>
   1ddfa:	4545      	cmp	r5, r8
   1ddfc:	d1f7      	bne.n	1ddee <__ssvfiscanf_r+0x96e>
   1ddfe:	e54b      	b.n	1d898 <__ssvfiscanf_r+0x418>
   1de00:	f000 fea6 	bl	1eb50 <_strtoull_r>
   1de04:	e6f9      	b.n	1dbfa <__ssvfiscanf_r+0x77a>
   1de06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1de08:	44aa      	add	sl, r5
   1de0a:	3c01      	subs	r4, #1
   1de0c:	2b00      	cmp	r3, #0
   1de0e:	d1d4      	bne.n	1ddba <__ssvfiscanf_r+0x93a>
   1de10:	f109 0904 	add.w	r9, r9, #4
   1de14:	461e      	mov	r6, r3
   1de16:	e7d0      	b.n	1ddba <__ssvfiscanf_r+0x93a>
   1de18:	f8d9 0000 	ldr.w	r0, [r9]
   1de1c:	e7df      	b.n	1ddde <__ssvfiscanf_r+0x95e>
   1de1e:	bf00      	nop

0001de20 <__submore>:
   1de20:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1de24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de28:	460c      	mov	r4, r1
   1de2a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1de2c:	4299      	cmp	r1, r3
   1de2e:	d014      	beq.n	1de5a <__submore+0x3a>
   1de30:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1de32:	0077      	lsls	r7, r6, #1
   1de34:	463a      	mov	r2, r7
   1de36:	f000 fa47 	bl	1e2c8 <_realloc_r>
   1de3a:	4605      	mov	r5, r0
   1de3c:	b340      	cbz	r0, 1de90 <__submore+0x70>
   1de3e:	eb00 0806 	add.w	r8, r0, r6
   1de42:	4632      	mov	r2, r6
   1de44:	4640      	mov	r0, r8
   1de46:	4629      	mov	r1, r5
   1de48:	f7fd f884 	bl	1af54 <memcpy>
   1de4c:	f8c4 8000 	str.w	r8, [r4]
   1de50:	6325      	str	r5, [r4, #48]	; 0x30
   1de52:	6367      	str	r7, [r4, #52]	; 0x34
   1de54:	2000      	movs	r0, #0
   1de56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1de5e:	f7fd fe5d 	bl	1bb1c <_malloc_r>
   1de62:	b1a8      	cbz	r0, 1de90 <__submore+0x70>
   1de64:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1de68:	6320      	str	r0, [r4, #48]	; 0x30
   1de6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1de6e:	6362      	str	r2, [r4, #52]	; 0x34
   1de70:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1de74:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1de78:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1de7c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1de80:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   1de84:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   1de88:	6020      	str	r0, [r4, #0]
   1de8a:	2000      	movs	r0, #0
   1de8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de90:	f04f 30ff 	mov.w	r0, #4294967295
   1de94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001de98 <__env_lock>:
   1de98:	4801      	ldr	r0, [pc, #4]	; (1dea0 <__env_lock+0x8>)
   1de9a:	f7fd be39 	b.w	1bb10 <__retarget_lock_acquire_recursive>
   1de9e:	bf00      	nop
   1dea0:	2000a3f8 	.word	0x2000a3f8

0001dea4 <__env_unlock>:
   1dea4:	4801      	ldr	r0, [pc, #4]	; (1deac <__env_unlock+0x8>)
   1dea6:	f7fd be37 	b.w	1bb18 <__retarget_lock_release_recursive>
   1deaa:	bf00      	nop
   1deac:	2000a3f8 	.word	0x2000a3f8

0001deb0 <_malloc_trim_r>:
   1deb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1deb2:	4f24      	ldr	r7, [pc, #144]	; (1df44 <_malloc_trim_r+0x94>)
   1deb4:	460c      	mov	r4, r1
   1deb6:	4606      	mov	r6, r0
   1deb8:	f7fe f932 	bl	1c120 <__malloc_lock>
   1debc:	68bb      	ldr	r3, [r7, #8]
   1debe:	685d      	ldr	r5, [r3, #4]
   1dec0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1dec4:	310f      	adds	r1, #15
   1dec6:	f025 0503 	bic.w	r5, r5, #3
   1deca:	4429      	add	r1, r5
   1decc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1ded0:	f021 010f 	bic.w	r1, r1, #15
   1ded4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   1ded8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1dedc:	db07      	blt.n	1deee <_malloc_trim_r+0x3e>
   1dede:	2100      	movs	r1, #0
   1dee0:	4630      	mov	r0, r6
   1dee2:	f7fe f929 	bl	1c138 <_sbrk_r>
   1dee6:	68bb      	ldr	r3, [r7, #8]
   1dee8:	442b      	add	r3, r5
   1deea:	4298      	cmp	r0, r3
   1deec:	d004      	beq.n	1def8 <_malloc_trim_r+0x48>
   1deee:	4630      	mov	r0, r6
   1def0:	f7fe f91c 	bl	1c12c <__malloc_unlock>
   1def4:	2000      	movs	r0, #0
   1def6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1def8:	4261      	negs	r1, r4
   1defa:	4630      	mov	r0, r6
   1defc:	f7fe f91c 	bl	1c138 <_sbrk_r>
   1df00:	3001      	adds	r0, #1
   1df02:	d00d      	beq.n	1df20 <_malloc_trim_r+0x70>
   1df04:	4b10      	ldr	r3, [pc, #64]	; (1df48 <_malloc_trim_r+0x98>)
   1df06:	68ba      	ldr	r2, [r7, #8]
   1df08:	6819      	ldr	r1, [r3, #0]
   1df0a:	1b2d      	subs	r5, r5, r4
   1df0c:	f045 0501 	orr.w	r5, r5, #1
   1df10:	4630      	mov	r0, r6
   1df12:	1b09      	subs	r1, r1, r4
   1df14:	6055      	str	r5, [r2, #4]
   1df16:	6019      	str	r1, [r3, #0]
   1df18:	f7fe f908 	bl	1c12c <__malloc_unlock>
   1df1c:	2001      	movs	r0, #1
   1df1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1df20:	2100      	movs	r1, #0
   1df22:	4630      	mov	r0, r6
   1df24:	f7fe f908 	bl	1c138 <_sbrk_r>
   1df28:	68ba      	ldr	r2, [r7, #8]
   1df2a:	1a83      	subs	r3, r0, r2
   1df2c:	2b0f      	cmp	r3, #15
   1df2e:	ddde      	ble.n	1deee <_malloc_trim_r+0x3e>
   1df30:	4c06      	ldr	r4, [pc, #24]	; (1df4c <_malloc_trim_r+0x9c>)
   1df32:	4905      	ldr	r1, [pc, #20]	; (1df48 <_malloc_trim_r+0x98>)
   1df34:	6824      	ldr	r4, [r4, #0]
   1df36:	f043 0301 	orr.w	r3, r3, #1
   1df3a:	1b00      	subs	r0, r0, r4
   1df3c:	6053      	str	r3, [r2, #4]
   1df3e:	6008      	str	r0, [r1, #0]
   1df40:	e7d5      	b.n	1deee <_malloc_trim_r+0x3e>
   1df42:	bf00      	nop
   1df44:	20000634 	.word	0x20000634
   1df48:	2000a0f4 	.word	0x2000a0f4
   1df4c:	20000a3c 	.word	0x20000a3c

0001df50 <_free_r>:
   1df50:	2900      	cmp	r1, #0
   1df52:	d044      	beq.n	1dfde <_free_r+0x8e>
   1df54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df58:	460d      	mov	r5, r1
   1df5a:	4680      	mov	r8, r0
   1df5c:	f7fe f8e0 	bl	1c120 <__malloc_lock>
   1df60:	f855 7c04 	ldr.w	r7, [r5, #-4]
   1df64:	4969      	ldr	r1, [pc, #420]	; (1e10c <_free_r+0x1bc>)
   1df66:	f027 0301 	bic.w	r3, r7, #1
   1df6a:	f1a5 0408 	sub.w	r4, r5, #8
   1df6e:	18e2      	adds	r2, r4, r3
   1df70:	688e      	ldr	r6, [r1, #8]
   1df72:	6850      	ldr	r0, [r2, #4]
   1df74:	42b2      	cmp	r2, r6
   1df76:	f020 0003 	bic.w	r0, r0, #3
   1df7a:	d05e      	beq.n	1e03a <_free_r+0xea>
   1df7c:	07fe      	lsls	r6, r7, #31
   1df7e:	6050      	str	r0, [r2, #4]
   1df80:	d40b      	bmi.n	1df9a <_free_r+0x4a>
   1df82:	f855 7c08 	ldr.w	r7, [r5, #-8]
   1df86:	1be4      	subs	r4, r4, r7
   1df88:	f101 0e08 	add.w	lr, r1, #8
   1df8c:	68a5      	ldr	r5, [r4, #8]
   1df8e:	4575      	cmp	r5, lr
   1df90:	443b      	add	r3, r7
   1df92:	d06d      	beq.n	1e070 <_free_r+0x120>
   1df94:	68e7      	ldr	r7, [r4, #12]
   1df96:	60ef      	str	r7, [r5, #12]
   1df98:	60bd      	str	r5, [r7, #8]
   1df9a:	1815      	adds	r5, r2, r0
   1df9c:	686d      	ldr	r5, [r5, #4]
   1df9e:	07ed      	lsls	r5, r5, #31
   1dfa0:	d53e      	bpl.n	1e020 <_free_r+0xd0>
   1dfa2:	f043 0201 	orr.w	r2, r3, #1
   1dfa6:	6062      	str	r2, [r4, #4]
   1dfa8:	50e3      	str	r3, [r4, r3]
   1dfaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1dfae:	d217      	bcs.n	1dfe0 <_free_r+0x90>
   1dfb0:	08db      	lsrs	r3, r3, #3
   1dfb2:	1c58      	adds	r0, r3, #1
   1dfb4:	109a      	asrs	r2, r3, #2
   1dfb6:	684d      	ldr	r5, [r1, #4]
   1dfb8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   1dfbc:	60a7      	str	r7, [r4, #8]
   1dfbe:	2301      	movs	r3, #1
   1dfc0:	4093      	lsls	r3, r2
   1dfc2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   1dfc6:	432b      	orrs	r3, r5
   1dfc8:	3a08      	subs	r2, #8
   1dfca:	60e2      	str	r2, [r4, #12]
   1dfcc:	604b      	str	r3, [r1, #4]
   1dfce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   1dfd2:	60fc      	str	r4, [r7, #12]
   1dfd4:	4640      	mov	r0, r8
   1dfd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1dfda:	f7fe b8a7 	b.w	1c12c <__malloc_unlock>
   1dfde:	4770      	bx	lr
   1dfe0:	0a5a      	lsrs	r2, r3, #9
   1dfe2:	2a04      	cmp	r2, #4
   1dfe4:	d852      	bhi.n	1e08c <_free_r+0x13c>
   1dfe6:	099a      	lsrs	r2, r3, #6
   1dfe8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   1dfec:	00ff      	lsls	r7, r7, #3
   1dfee:	f102 0538 	add.w	r5, r2, #56	; 0x38
   1dff2:	19c8      	adds	r0, r1, r7
   1dff4:	59ca      	ldr	r2, [r1, r7]
   1dff6:	3808      	subs	r0, #8
   1dff8:	4290      	cmp	r0, r2
   1dffa:	d04f      	beq.n	1e09c <_free_r+0x14c>
   1dffc:	6851      	ldr	r1, [r2, #4]
   1dffe:	f021 0103 	bic.w	r1, r1, #3
   1e002:	428b      	cmp	r3, r1
   1e004:	d232      	bcs.n	1e06c <_free_r+0x11c>
   1e006:	6892      	ldr	r2, [r2, #8]
   1e008:	4290      	cmp	r0, r2
   1e00a:	d1f7      	bne.n	1dffc <_free_r+0xac>
   1e00c:	68c3      	ldr	r3, [r0, #12]
   1e00e:	60a0      	str	r0, [r4, #8]
   1e010:	60e3      	str	r3, [r4, #12]
   1e012:	609c      	str	r4, [r3, #8]
   1e014:	60c4      	str	r4, [r0, #12]
   1e016:	4640      	mov	r0, r8
   1e018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e01c:	f7fe b886 	b.w	1c12c <__malloc_unlock>
   1e020:	6895      	ldr	r5, [r2, #8]
   1e022:	4f3b      	ldr	r7, [pc, #236]	; (1e110 <_free_r+0x1c0>)
   1e024:	42bd      	cmp	r5, r7
   1e026:	4403      	add	r3, r0
   1e028:	d040      	beq.n	1e0ac <_free_r+0x15c>
   1e02a:	68d0      	ldr	r0, [r2, #12]
   1e02c:	60e8      	str	r0, [r5, #12]
   1e02e:	f043 0201 	orr.w	r2, r3, #1
   1e032:	6085      	str	r5, [r0, #8]
   1e034:	6062      	str	r2, [r4, #4]
   1e036:	50e3      	str	r3, [r4, r3]
   1e038:	e7b7      	b.n	1dfaa <_free_r+0x5a>
   1e03a:	07ff      	lsls	r7, r7, #31
   1e03c:	4403      	add	r3, r0
   1e03e:	d407      	bmi.n	1e050 <_free_r+0x100>
   1e040:	f855 2c08 	ldr.w	r2, [r5, #-8]
   1e044:	1aa4      	subs	r4, r4, r2
   1e046:	4413      	add	r3, r2
   1e048:	68a0      	ldr	r0, [r4, #8]
   1e04a:	68e2      	ldr	r2, [r4, #12]
   1e04c:	60c2      	str	r2, [r0, #12]
   1e04e:	6090      	str	r0, [r2, #8]
   1e050:	4a30      	ldr	r2, [pc, #192]	; (1e114 <_free_r+0x1c4>)
   1e052:	6812      	ldr	r2, [r2, #0]
   1e054:	f043 0001 	orr.w	r0, r3, #1
   1e058:	4293      	cmp	r3, r2
   1e05a:	6060      	str	r0, [r4, #4]
   1e05c:	608c      	str	r4, [r1, #8]
   1e05e:	d3b9      	bcc.n	1dfd4 <_free_r+0x84>
   1e060:	4b2d      	ldr	r3, [pc, #180]	; (1e118 <_free_r+0x1c8>)
   1e062:	4640      	mov	r0, r8
   1e064:	6819      	ldr	r1, [r3, #0]
   1e066:	f7ff ff23 	bl	1deb0 <_malloc_trim_r>
   1e06a:	e7b3      	b.n	1dfd4 <_free_r+0x84>
   1e06c:	4610      	mov	r0, r2
   1e06e:	e7cd      	b.n	1e00c <_free_r+0xbc>
   1e070:	1811      	adds	r1, r2, r0
   1e072:	6849      	ldr	r1, [r1, #4]
   1e074:	07c9      	lsls	r1, r1, #31
   1e076:	d444      	bmi.n	1e102 <_free_r+0x1b2>
   1e078:	6891      	ldr	r1, [r2, #8]
   1e07a:	68d2      	ldr	r2, [r2, #12]
   1e07c:	60ca      	str	r2, [r1, #12]
   1e07e:	4403      	add	r3, r0
   1e080:	f043 0001 	orr.w	r0, r3, #1
   1e084:	6091      	str	r1, [r2, #8]
   1e086:	6060      	str	r0, [r4, #4]
   1e088:	50e3      	str	r3, [r4, r3]
   1e08a:	e7a3      	b.n	1dfd4 <_free_r+0x84>
   1e08c:	2a14      	cmp	r2, #20
   1e08e:	d816      	bhi.n	1e0be <_free_r+0x16e>
   1e090:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   1e094:	00ff      	lsls	r7, r7, #3
   1e096:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   1e09a:	e7aa      	b.n	1dff2 <_free_r+0xa2>
   1e09c:	10aa      	asrs	r2, r5, #2
   1e09e:	2301      	movs	r3, #1
   1e0a0:	684d      	ldr	r5, [r1, #4]
   1e0a2:	4093      	lsls	r3, r2
   1e0a4:	432b      	orrs	r3, r5
   1e0a6:	604b      	str	r3, [r1, #4]
   1e0a8:	4603      	mov	r3, r0
   1e0aa:	e7b0      	b.n	1e00e <_free_r+0xbe>
   1e0ac:	f043 0201 	orr.w	r2, r3, #1
   1e0b0:	614c      	str	r4, [r1, #20]
   1e0b2:	610c      	str	r4, [r1, #16]
   1e0b4:	60e5      	str	r5, [r4, #12]
   1e0b6:	60a5      	str	r5, [r4, #8]
   1e0b8:	6062      	str	r2, [r4, #4]
   1e0ba:	50e3      	str	r3, [r4, r3]
   1e0bc:	e78a      	b.n	1dfd4 <_free_r+0x84>
   1e0be:	2a54      	cmp	r2, #84	; 0x54
   1e0c0:	d806      	bhi.n	1e0d0 <_free_r+0x180>
   1e0c2:	0b1a      	lsrs	r2, r3, #12
   1e0c4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   1e0c8:	00ff      	lsls	r7, r7, #3
   1e0ca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   1e0ce:	e790      	b.n	1dff2 <_free_r+0xa2>
   1e0d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e0d4:	d806      	bhi.n	1e0e4 <_free_r+0x194>
   1e0d6:	0bda      	lsrs	r2, r3, #15
   1e0d8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   1e0dc:	00ff      	lsls	r7, r7, #3
   1e0de:	f102 0577 	add.w	r5, r2, #119	; 0x77
   1e0e2:	e786      	b.n	1dff2 <_free_r+0xa2>
   1e0e4:	f240 5054 	movw	r0, #1364	; 0x554
   1e0e8:	4282      	cmp	r2, r0
   1e0ea:	d806      	bhi.n	1e0fa <_free_r+0x1aa>
   1e0ec:	0c9a      	lsrs	r2, r3, #18
   1e0ee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   1e0f2:	00ff      	lsls	r7, r7, #3
   1e0f4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   1e0f8:	e77b      	b.n	1dff2 <_free_r+0xa2>
   1e0fa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   1e0fe:	257e      	movs	r5, #126	; 0x7e
   1e100:	e777      	b.n	1dff2 <_free_r+0xa2>
   1e102:	f043 0101 	orr.w	r1, r3, #1
   1e106:	6061      	str	r1, [r4, #4]
   1e108:	6013      	str	r3, [r2, #0]
   1e10a:	e763      	b.n	1dfd4 <_free_r+0x84>
   1e10c:	20000634 	.word	0x20000634
   1e110:	2000063c 	.word	0x2000063c
   1e114:	20000a40 	.word	0x20000a40
   1e118:	2000a124 	.word	0x2000a124

0001e11c <iswspace>:
   1e11c:	28ff      	cmp	r0, #255	; 0xff
   1e11e:	d901      	bls.n	1e124 <iswspace+0x8>
   1e120:	2000      	movs	r0, #0
   1e122:	4770      	bx	lr
   1e124:	b510      	push	{r4, lr}
   1e126:	4604      	mov	r4, r0
   1e128:	f000 f818 	bl	1e15c <__locale_ctype_ptr>
   1e12c:	4420      	add	r0, r4
   1e12e:	7840      	ldrb	r0, [r0, #1]
   1e130:	f000 0008 	and.w	r0, r0, #8
   1e134:	bd10      	pop	{r4, pc}
   1e136:	bf00      	nop

0001e138 <__locale_mb_cur_max>:
   1e138:	4b04      	ldr	r3, [pc, #16]	; (1e14c <__locale_mb_cur_max+0x14>)
   1e13a:	4a05      	ldr	r2, [pc, #20]	; (1e150 <__locale_mb_cur_max+0x18>)
   1e13c:	681b      	ldr	r3, [r3, #0]
   1e13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e140:	2b00      	cmp	r3, #0
   1e142:	bf08      	it	eq
   1e144:	4613      	moveq	r3, r2
   1e146:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1e14a:	4770      	bx	lr
   1e14c:	200001bc 	.word	0x200001bc
   1e150:	20000a48 	.word	0x20000a48

0001e154 <__locale_ctype_ptr_l>:
   1e154:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1e158:	4770      	bx	lr
   1e15a:	bf00      	nop

0001e15c <__locale_ctype_ptr>:
   1e15c:	4b04      	ldr	r3, [pc, #16]	; (1e170 <__locale_ctype_ptr+0x14>)
   1e15e:	4a05      	ldr	r2, [pc, #20]	; (1e174 <__locale_ctype_ptr+0x18>)
   1e160:	681b      	ldr	r3, [r3, #0]
   1e162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e164:	2b00      	cmp	r3, #0
   1e166:	bf08      	it	eq
   1e168:	4613      	moveq	r3, r2
   1e16a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1e16e:	4770      	bx	lr
   1e170:	200001bc 	.word	0x200001bc
   1e174:	20000a48 	.word	0x20000a48

0001e178 <_mbrtowc_r>:
   1e178:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e17a:	b083      	sub	sp, #12
   1e17c:	4607      	mov	r7, r0
   1e17e:	9d08      	ldr	r5, [sp, #32]
   1e180:	b192      	cbz	r2, 1e1a8 <_mbrtowc_r+0x30>
   1e182:	4c11      	ldr	r4, [pc, #68]	; (1e1c8 <_mbrtowc_r+0x50>)
   1e184:	4e11      	ldr	r6, [pc, #68]	; (1e1cc <_mbrtowc_r+0x54>)
   1e186:	6824      	ldr	r4, [r4, #0]
   1e188:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1e18a:	9500      	str	r5, [sp, #0]
   1e18c:	2c00      	cmp	r4, #0
   1e18e:	bf08      	it	eq
   1e190:	4634      	moveq	r4, r6
   1e192:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   1e196:	47a0      	blx	r4
   1e198:	1c43      	adds	r3, r0, #1
   1e19a:	d103      	bne.n	1e1a4 <_mbrtowc_r+0x2c>
   1e19c:	2200      	movs	r2, #0
   1e19e:	238a      	movs	r3, #138	; 0x8a
   1e1a0:	602a      	str	r2, [r5, #0]
   1e1a2:	603b      	str	r3, [r7, #0]
   1e1a4:	b003      	add	sp, #12
   1e1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1a8:	4b07      	ldr	r3, [pc, #28]	; (1e1c8 <_mbrtowc_r+0x50>)
   1e1aa:	4908      	ldr	r1, [pc, #32]	; (1e1cc <_mbrtowc_r+0x54>)
   1e1ac:	681b      	ldr	r3, [r3, #0]
   1e1ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e1b0:	9500      	str	r5, [sp, #0]
   1e1b2:	2b00      	cmp	r3, #0
   1e1b4:	bf08      	it	eq
   1e1b6:	460b      	moveq	r3, r1
   1e1b8:	4614      	mov	r4, r2
   1e1ba:	4621      	mov	r1, r4
   1e1bc:	4a04      	ldr	r2, [pc, #16]	; (1e1d0 <_mbrtowc_r+0x58>)
   1e1be:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   1e1c2:	2301      	movs	r3, #1
   1e1c4:	47a0      	blx	r4
   1e1c6:	e7e7      	b.n	1e198 <_mbrtowc_r+0x20>
   1e1c8:	200001bc 	.word	0x200001bc
   1e1cc:	20000a48 	.word	0x20000a48
   1e1d0:	00020fec 	.word	0x00020fec

0001e1d4 <__ascii_mbtowc>:
   1e1d4:	b082      	sub	sp, #8
   1e1d6:	b149      	cbz	r1, 1e1ec <__ascii_mbtowc+0x18>
   1e1d8:	b15a      	cbz	r2, 1e1f2 <__ascii_mbtowc+0x1e>
   1e1da:	b16b      	cbz	r3, 1e1f8 <__ascii_mbtowc+0x24>
   1e1dc:	7813      	ldrb	r3, [r2, #0]
   1e1de:	600b      	str	r3, [r1, #0]
   1e1e0:	7812      	ldrb	r2, [r2, #0]
   1e1e2:	1c10      	adds	r0, r2, #0
   1e1e4:	bf18      	it	ne
   1e1e6:	2001      	movne	r0, #1
   1e1e8:	b002      	add	sp, #8
   1e1ea:	4770      	bx	lr
   1e1ec:	a901      	add	r1, sp, #4
   1e1ee:	2a00      	cmp	r2, #0
   1e1f0:	d1f3      	bne.n	1e1da <__ascii_mbtowc+0x6>
   1e1f2:	4610      	mov	r0, r2
   1e1f4:	b002      	add	sp, #8
   1e1f6:	4770      	bx	lr
   1e1f8:	f06f 0001 	mvn.w	r0, #1
   1e1fc:	e7f4      	b.n	1e1e8 <__ascii_mbtowc+0x14>
   1e1fe:	bf00      	nop

0001e200 <memmove>:
   1e200:	4288      	cmp	r0, r1
   1e202:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e204:	d90d      	bls.n	1e222 <memmove+0x22>
   1e206:	188b      	adds	r3, r1, r2
   1e208:	4298      	cmp	r0, r3
   1e20a:	d20a      	bcs.n	1e222 <memmove+0x22>
   1e20c:	1884      	adds	r4, r0, r2
   1e20e:	2a00      	cmp	r2, #0
   1e210:	d051      	beq.n	1e2b6 <memmove+0xb6>
   1e212:	4622      	mov	r2, r4
   1e214:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e218:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e21c:	4299      	cmp	r1, r3
   1e21e:	d1f9      	bne.n	1e214 <memmove+0x14>
   1e220:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e222:	2a0f      	cmp	r2, #15
   1e224:	d948      	bls.n	1e2b8 <memmove+0xb8>
   1e226:	ea41 0300 	orr.w	r3, r1, r0
   1e22a:	079b      	lsls	r3, r3, #30
   1e22c:	d146      	bne.n	1e2bc <memmove+0xbc>
   1e22e:	f100 0410 	add.w	r4, r0, #16
   1e232:	f101 0310 	add.w	r3, r1, #16
   1e236:	4615      	mov	r5, r2
   1e238:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e23c:	f844 6c10 	str.w	r6, [r4, #-16]
   1e240:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e244:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e248:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e24c:	f844 6c08 	str.w	r6, [r4, #-8]
   1e250:	3d10      	subs	r5, #16
   1e252:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e256:	f844 6c04 	str.w	r6, [r4, #-4]
   1e25a:	2d0f      	cmp	r5, #15
   1e25c:	f103 0310 	add.w	r3, r3, #16
   1e260:	f104 0410 	add.w	r4, r4, #16
   1e264:	d8e8      	bhi.n	1e238 <memmove+0x38>
   1e266:	f1a2 0310 	sub.w	r3, r2, #16
   1e26a:	f023 030f 	bic.w	r3, r3, #15
   1e26e:	f002 0e0f 	and.w	lr, r2, #15
   1e272:	3310      	adds	r3, #16
   1e274:	f1be 0f03 	cmp.w	lr, #3
   1e278:	4419      	add	r1, r3
   1e27a:	4403      	add	r3, r0
   1e27c:	d921      	bls.n	1e2c2 <memmove+0xc2>
   1e27e:	1f1e      	subs	r6, r3, #4
   1e280:	460d      	mov	r5, r1
   1e282:	4674      	mov	r4, lr
   1e284:	3c04      	subs	r4, #4
   1e286:	f855 7b04 	ldr.w	r7, [r5], #4
   1e28a:	f846 7f04 	str.w	r7, [r6, #4]!
   1e28e:	2c03      	cmp	r4, #3
   1e290:	d8f8      	bhi.n	1e284 <memmove+0x84>
   1e292:	f1ae 0404 	sub.w	r4, lr, #4
   1e296:	f024 0403 	bic.w	r4, r4, #3
   1e29a:	3404      	adds	r4, #4
   1e29c:	4421      	add	r1, r4
   1e29e:	4423      	add	r3, r4
   1e2a0:	f002 0203 	and.w	r2, r2, #3
   1e2a4:	b162      	cbz	r2, 1e2c0 <memmove+0xc0>
   1e2a6:	3b01      	subs	r3, #1
   1e2a8:	440a      	add	r2, r1
   1e2aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e2ae:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e2b2:	428a      	cmp	r2, r1
   1e2b4:	d1f9      	bne.n	1e2aa <memmove+0xaa>
   1e2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e2b8:	4603      	mov	r3, r0
   1e2ba:	e7f3      	b.n	1e2a4 <memmove+0xa4>
   1e2bc:	4603      	mov	r3, r0
   1e2be:	e7f2      	b.n	1e2a6 <memmove+0xa6>
   1e2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e2c2:	4672      	mov	r2, lr
   1e2c4:	e7ee      	b.n	1e2a4 <memmove+0xa4>
   1e2c6:	bf00      	nop

0001e2c8 <_realloc_r>:
   1e2c8:	2900      	cmp	r1, #0
   1e2ca:	f000 8095 	beq.w	1e3f8 <_realloc_r+0x130>
   1e2ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2d2:	460d      	mov	r5, r1
   1e2d4:	4616      	mov	r6, r2
   1e2d6:	b083      	sub	sp, #12
   1e2d8:	4680      	mov	r8, r0
   1e2da:	f106 070b 	add.w	r7, r6, #11
   1e2de:	f7fd ff1f 	bl	1c120 <__malloc_lock>
   1e2e2:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1e2e6:	2f16      	cmp	r7, #22
   1e2e8:	f02e 0403 	bic.w	r4, lr, #3
   1e2ec:	f1a5 0908 	sub.w	r9, r5, #8
   1e2f0:	d83c      	bhi.n	1e36c <_realloc_r+0xa4>
   1e2f2:	2210      	movs	r2, #16
   1e2f4:	4617      	mov	r7, r2
   1e2f6:	42be      	cmp	r6, r7
   1e2f8:	d83d      	bhi.n	1e376 <_realloc_r+0xae>
   1e2fa:	4294      	cmp	r4, r2
   1e2fc:	da43      	bge.n	1e386 <_realloc_r+0xbe>
   1e2fe:	4bc4      	ldr	r3, [pc, #784]	; (1e610 <_realloc_r+0x348>)
   1e300:	6899      	ldr	r1, [r3, #8]
   1e302:	eb09 0004 	add.w	r0, r9, r4
   1e306:	4288      	cmp	r0, r1
   1e308:	f000 80b4 	beq.w	1e474 <_realloc_r+0x1ac>
   1e30c:	6843      	ldr	r3, [r0, #4]
   1e30e:	f023 0101 	bic.w	r1, r3, #1
   1e312:	4401      	add	r1, r0
   1e314:	6849      	ldr	r1, [r1, #4]
   1e316:	07c9      	lsls	r1, r1, #31
   1e318:	d54c      	bpl.n	1e3b4 <_realloc_r+0xec>
   1e31a:	f01e 0f01 	tst.w	lr, #1
   1e31e:	f000 809b 	beq.w	1e458 <_realloc_r+0x190>
   1e322:	4631      	mov	r1, r6
   1e324:	4640      	mov	r0, r8
   1e326:	f7fd fbf9 	bl	1bb1c <_malloc_r>
   1e32a:	4606      	mov	r6, r0
   1e32c:	2800      	cmp	r0, #0
   1e32e:	d03a      	beq.n	1e3a6 <_realloc_r+0xde>
   1e330:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e334:	f023 0301 	bic.w	r3, r3, #1
   1e338:	444b      	add	r3, r9
   1e33a:	f1a0 0208 	sub.w	r2, r0, #8
   1e33e:	429a      	cmp	r2, r3
   1e340:	f000 8121 	beq.w	1e586 <_realloc_r+0x2be>
   1e344:	1f22      	subs	r2, r4, #4
   1e346:	2a24      	cmp	r2, #36	; 0x24
   1e348:	f200 8107 	bhi.w	1e55a <_realloc_r+0x292>
   1e34c:	2a13      	cmp	r2, #19
   1e34e:	f200 80db 	bhi.w	1e508 <_realloc_r+0x240>
   1e352:	4603      	mov	r3, r0
   1e354:	462a      	mov	r2, r5
   1e356:	6811      	ldr	r1, [r2, #0]
   1e358:	6019      	str	r1, [r3, #0]
   1e35a:	6851      	ldr	r1, [r2, #4]
   1e35c:	6059      	str	r1, [r3, #4]
   1e35e:	6892      	ldr	r2, [r2, #8]
   1e360:	609a      	str	r2, [r3, #8]
   1e362:	4629      	mov	r1, r5
   1e364:	4640      	mov	r0, r8
   1e366:	f7ff fdf3 	bl	1df50 <_free_r>
   1e36a:	e01c      	b.n	1e3a6 <_realloc_r+0xde>
   1e36c:	f027 0707 	bic.w	r7, r7, #7
   1e370:	2f00      	cmp	r7, #0
   1e372:	463a      	mov	r2, r7
   1e374:	dabf      	bge.n	1e2f6 <_realloc_r+0x2e>
   1e376:	2600      	movs	r6, #0
   1e378:	230c      	movs	r3, #12
   1e37a:	4630      	mov	r0, r6
   1e37c:	f8c8 3000 	str.w	r3, [r8]
   1e380:	b003      	add	sp, #12
   1e382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e386:	462e      	mov	r6, r5
   1e388:	1be3      	subs	r3, r4, r7
   1e38a:	2b0f      	cmp	r3, #15
   1e38c:	d81e      	bhi.n	1e3cc <_realloc_r+0x104>
   1e38e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e392:	f003 0301 	and.w	r3, r3, #1
   1e396:	4323      	orrs	r3, r4
   1e398:	444c      	add	r4, r9
   1e39a:	f8c9 3004 	str.w	r3, [r9, #4]
   1e39e:	6863      	ldr	r3, [r4, #4]
   1e3a0:	f043 0301 	orr.w	r3, r3, #1
   1e3a4:	6063      	str	r3, [r4, #4]
   1e3a6:	4640      	mov	r0, r8
   1e3a8:	f7fd fec0 	bl	1c12c <__malloc_unlock>
   1e3ac:	4630      	mov	r0, r6
   1e3ae:	b003      	add	sp, #12
   1e3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3b4:	f023 0303 	bic.w	r3, r3, #3
   1e3b8:	18e1      	adds	r1, r4, r3
   1e3ba:	4291      	cmp	r1, r2
   1e3bc:	db1f      	blt.n	1e3fe <_realloc_r+0x136>
   1e3be:	68c3      	ldr	r3, [r0, #12]
   1e3c0:	6882      	ldr	r2, [r0, #8]
   1e3c2:	462e      	mov	r6, r5
   1e3c4:	60d3      	str	r3, [r2, #12]
   1e3c6:	460c      	mov	r4, r1
   1e3c8:	609a      	str	r2, [r3, #8]
   1e3ca:	e7dd      	b.n	1e388 <_realloc_r+0xc0>
   1e3cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e3d0:	eb09 0107 	add.w	r1, r9, r7
   1e3d4:	f002 0201 	and.w	r2, r2, #1
   1e3d8:	444c      	add	r4, r9
   1e3da:	f043 0301 	orr.w	r3, r3, #1
   1e3de:	4317      	orrs	r7, r2
   1e3e0:	f8c9 7004 	str.w	r7, [r9, #4]
   1e3e4:	604b      	str	r3, [r1, #4]
   1e3e6:	6863      	ldr	r3, [r4, #4]
   1e3e8:	f043 0301 	orr.w	r3, r3, #1
   1e3ec:	3108      	adds	r1, #8
   1e3ee:	6063      	str	r3, [r4, #4]
   1e3f0:	4640      	mov	r0, r8
   1e3f2:	f7ff fdad 	bl	1df50 <_free_r>
   1e3f6:	e7d6      	b.n	1e3a6 <_realloc_r+0xde>
   1e3f8:	4611      	mov	r1, r2
   1e3fa:	f7fd bb8f 	b.w	1bb1c <_malloc_r>
   1e3fe:	f01e 0f01 	tst.w	lr, #1
   1e402:	d18e      	bne.n	1e322 <_realloc_r+0x5a>
   1e404:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e408:	eba9 0a01 	sub.w	sl, r9, r1
   1e40c:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e410:	f021 0103 	bic.w	r1, r1, #3
   1e414:	440b      	add	r3, r1
   1e416:	4423      	add	r3, r4
   1e418:	4293      	cmp	r3, r2
   1e41a:	db25      	blt.n	1e468 <_realloc_r+0x1a0>
   1e41c:	68c2      	ldr	r2, [r0, #12]
   1e41e:	6881      	ldr	r1, [r0, #8]
   1e420:	4656      	mov	r6, sl
   1e422:	60ca      	str	r2, [r1, #12]
   1e424:	6091      	str	r1, [r2, #8]
   1e426:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e42a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e42e:	1f22      	subs	r2, r4, #4
   1e430:	2a24      	cmp	r2, #36	; 0x24
   1e432:	60c1      	str	r1, [r0, #12]
   1e434:	6088      	str	r0, [r1, #8]
   1e436:	f200 8094 	bhi.w	1e562 <_realloc_r+0x29a>
   1e43a:	2a13      	cmp	r2, #19
   1e43c:	d96f      	bls.n	1e51e <_realloc_r+0x256>
   1e43e:	6829      	ldr	r1, [r5, #0]
   1e440:	f8ca 1008 	str.w	r1, [sl, #8]
   1e444:	6869      	ldr	r1, [r5, #4]
   1e446:	f8ca 100c 	str.w	r1, [sl, #12]
   1e44a:	2a1b      	cmp	r2, #27
   1e44c:	f200 80a2 	bhi.w	1e594 <_realloc_r+0x2cc>
   1e450:	3508      	adds	r5, #8
   1e452:	f10a 0210 	add.w	r2, sl, #16
   1e456:	e063      	b.n	1e520 <_realloc_r+0x258>
   1e458:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1e45c:	eba9 0a03 	sub.w	sl, r9, r3
   1e460:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e464:	f021 0103 	bic.w	r1, r1, #3
   1e468:	1863      	adds	r3, r4, r1
   1e46a:	4293      	cmp	r3, r2
   1e46c:	f6ff af59 	blt.w	1e322 <_realloc_r+0x5a>
   1e470:	4656      	mov	r6, sl
   1e472:	e7d8      	b.n	1e426 <_realloc_r+0x15e>
   1e474:	6841      	ldr	r1, [r0, #4]
   1e476:	f021 0b03 	bic.w	fp, r1, #3
   1e47a:	44a3      	add	fp, r4
   1e47c:	f107 0010 	add.w	r0, r7, #16
   1e480:	4583      	cmp	fp, r0
   1e482:	da56      	bge.n	1e532 <_realloc_r+0x26a>
   1e484:	f01e 0f01 	tst.w	lr, #1
   1e488:	f47f af4b 	bne.w	1e322 <_realloc_r+0x5a>
   1e48c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e490:	eba9 0a01 	sub.w	sl, r9, r1
   1e494:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e498:	f021 0103 	bic.w	r1, r1, #3
   1e49c:	448b      	add	fp, r1
   1e49e:	4558      	cmp	r0, fp
   1e4a0:	dce2      	bgt.n	1e468 <_realloc_r+0x1a0>
   1e4a2:	4656      	mov	r6, sl
   1e4a4:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e4a8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e4ac:	1f22      	subs	r2, r4, #4
   1e4ae:	2a24      	cmp	r2, #36	; 0x24
   1e4b0:	60c1      	str	r1, [r0, #12]
   1e4b2:	6088      	str	r0, [r1, #8]
   1e4b4:	f200 808f 	bhi.w	1e5d6 <_realloc_r+0x30e>
   1e4b8:	2a13      	cmp	r2, #19
   1e4ba:	f240 808a 	bls.w	1e5d2 <_realloc_r+0x30a>
   1e4be:	6829      	ldr	r1, [r5, #0]
   1e4c0:	f8ca 1008 	str.w	r1, [sl, #8]
   1e4c4:	6869      	ldr	r1, [r5, #4]
   1e4c6:	f8ca 100c 	str.w	r1, [sl, #12]
   1e4ca:	2a1b      	cmp	r2, #27
   1e4cc:	f200 808a 	bhi.w	1e5e4 <_realloc_r+0x31c>
   1e4d0:	3508      	adds	r5, #8
   1e4d2:	f10a 0210 	add.w	r2, sl, #16
   1e4d6:	6829      	ldr	r1, [r5, #0]
   1e4d8:	6011      	str	r1, [r2, #0]
   1e4da:	6869      	ldr	r1, [r5, #4]
   1e4dc:	6051      	str	r1, [r2, #4]
   1e4de:	68a9      	ldr	r1, [r5, #8]
   1e4e0:	6091      	str	r1, [r2, #8]
   1e4e2:	eb0a 0107 	add.w	r1, sl, r7
   1e4e6:	ebab 0207 	sub.w	r2, fp, r7
   1e4ea:	f042 0201 	orr.w	r2, r2, #1
   1e4ee:	6099      	str	r1, [r3, #8]
   1e4f0:	604a      	str	r2, [r1, #4]
   1e4f2:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e4f6:	f003 0301 	and.w	r3, r3, #1
   1e4fa:	431f      	orrs	r7, r3
   1e4fc:	4640      	mov	r0, r8
   1e4fe:	f8ca 7004 	str.w	r7, [sl, #4]
   1e502:	f7fd fe13 	bl	1c12c <__malloc_unlock>
   1e506:	e751      	b.n	1e3ac <_realloc_r+0xe4>
   1e508:	682b      	ldr	r3, [r5, #0]
   1e50a:	6003      	str	r3, [r0, #0]
   1e50c:	686b      	ldr	r3, [r5, #4]
   1e50e:	6043      	str	r3, [r0, #4]
   1e510:	2a1b      	cmp	r2, #27
   1e512:	d82d      	bhi.n	1e570 <_realloc_r+0x2a8>
   1e514:	f100 0308 	add.w	r3, r0, #8
   1e518:	f105 0208 	add.w	r2, r5, #8
   1e51c:	e71b      	b.n	1e356 <_realloc_r+0x8e>
   1e51e:	4632      	mov	r2, r6
   1e520:	6829      	ldr	r1, [r5, #0]
   1e522:	6011      	str	r1, [r2, #0]
   1e524:	6869      	ldr	r1, [r5, #4]
   1e526:	6051      	str	r1, [r2, #4]
   1e528:	68a9      	ldr	r1, [r5, #8]
   1e52a:	6091      	str	r1, [r2, #8]
   1e52c:	461c      	mov	r4, r3
   1e52e:	46d1      	mov	r9, sl
   1e530:	e72a      	b.n	1e388 <_realloc_r+0xc0>
   1e532:	eb09 0107 	add.w	r1, r9, r7
   1e536:	ebab 0b07 	sub.w	fp, fp, r7
   1e53a:	f04b 0201 	orr.w	r2, fp, #1
   1e53e:	6099      	str	r1, [r3, #8]
   1e540:	604a      	str	r2, [r1, #4]
   1e542:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e546:	f003 0301 	and.w	r3, r3, #1
   1e54a:	431f      	orrs	r7, r3
   1e54c:	4640      	mov	r0, r8
   1e54e:	f845 7c04 	str.w	r7, [r5, #-4]
   1e552:	f7fd fdeb 	bl	1c12c <__malloc_unlock>
   1e556:	462e      	mov	r6, r5
   1e558:	e728      	b.n	1e3ac <_realloc_r+0xe4>
   1e55a:	4629      	mov	r1, r5
   1e55c:	f7ff fe50 	bl	1e200 <memmove>
   1e560:	e6ff      	b.n	1e362 <_realloc_r+0x9a>
   1e562:	4629      	mov	r1, r5
   1e564:	4630      	mov	r0, r6
   1e566:	461c      	mov	r4, r3
   1e568:	46d1      	mov	r9, sl
   1e56a:	f7ff fe49 	bl	1e200 <memmove>
   1e56e:	e70b      	b.n	1e388 <_realloc_r+0xc0>
   1e570:	68ab      	ldr	r3, [r5, #8]
   1e572:	6083      	str	r3, [r0, #8]
   1e574:	68eb      	ldr	r3, [r5, #12]
   1e576:	60c3      	str	r3, [r0, #12]
   1e578:	2a24      	cmp	r2, #36	; 0x24
   1e57a:	d017      	beq.n	1e5ac <_realloc_r+0x2e4>
   1e57c:	f100 0310 	add.w	r3, r0, #16
   1e580:	f105 0210 	add.w	r2, r5, #16
   1e584:	e6e7      	b.n	1e356 <_realloc_r+0x8e>
   1e586:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1e58a:	f023 0303 	bic.w	r3, r3, #3
   1e58e:	441c      	add	r4, r3
   1e590:	462e      	mov	r6, r5
   1e592:	e6f9      	b.n	1e388 <_realloc_r+0xc0>
   1e594:	68a9      	ldr	r1, [r5, #8]
   1e596:	f8ca 1010 	str.w	r1, [sl, #16]
   1e59a:	68e9      	ldr	r1, [r5, #12]
   1e59c:	f8ca 1014 	str.w	r1, [sl, #20]
   1e5a0:	2a24      	cmp	r2, #36	; 0x24
   1e5a2:	d00c      	beq.n	1e5be <_realloc_r+0x2f6>
   1e5a4:	3510      	adds	r5, #16
   1e5a6:	f10a 0218 	add.w	r2, sl, #24
   1e5aa:	e7b9      	b.n	1e520 <_realloc_r+0x258>
   1e5ac:	692b      	ldr	r3, [r5, #16]
   1e5ae:	6103      	str	r3, [r0, #16]
   1e5b0:	696b      	ldr	r3, [r5, #20]
   1e5b2:	6143      	str	r3, [r0, #20]
   1e5b4:	f105 0218 	add.w	r2, r5, #24
   1e5b8:	f100 0318 	add.w	r3, r0, #24
   1e5bc:	e6cb      	b.n	1e356 <_realloc_r+0x8e>
   1e5be:	692a      	ldr	r2, [r5, #16]
   1e5c0:	f8ca 2018 	str.w	r2, [sl, #24]
   1e5c4:	696a      	ldr	r2, [r5, #20]
   1e5c6:	f8ca 201c 	str.w	r2, [sl, #28]
   1e5ca:	3518      	adds	r5, #24
   1e5cc:	f10a 0220 	add.w	r2, sl, #32
   1e5d0:	e7a6      	b.n	1e520 <_realloc_r+0x258>
   1e5d2:	4632      	mov	r2, r6
   1e5d4:	e77f      	b.n	1e4d6 <_realloc_r+0x20e>
   1e5d6:	4629      	mov	r1, r5
   1e5d8:	4630      	mov	r0, r6
   1e5da:	9301      	str	r3, [sp, #4]
   1e5dc:	f7ff fe10 	bl	1e200 <memmove>
   1e5e0:	9b01      	ldr	r3, [sp, #4]
   1e5e2:	e77e      	b.n	1e4e2 <_realloc_r+0x21a>
   1e5e4:	68a9      	ldr	r1, [r5, #8]
   1e5e6:	f8ca 1010 	str.w	r1, [sl, #16]
   1e5ea:	68e9      	ldr	r1, [r5, #12]
   1e5ec:	f8ca 1014 	str.w	r1, [sl, #20]
   1e5f0:	2a24      	cmp	r2, #36	; 0x24
   1e5f2:	d003      	beq.n	1e5fc <_realloc_r+0x334>
   1e5f4:	3510      	adds	r5, #16
   1e5f6:	f10a 0218 	add.w	r2, sl, #24
   1e5fa:	e76c      	b.n	1e4d6 <_realloc_r+0x20e>
   1e5fc:	692a      	ldr	r2, [r5, #16]
   1e5fe:	f8ca 2018 	str.w	r2, [sl, #24]
   1e602:	696a      	ldr	r2, [r5, #20]
   1e604:	f8ca 201c 	str.w	r2, [sl, #28]
   1e608:	3518      	adds	r5, #24
   1e60a:	f10a 0220 	add.w	r2, sl, #32
   1e60e:	e762      	b.n	1e4d6 <_realloc_r+0x20e>
   1e610:	20000634 	.word	0x20000634

0001e614 <__sccl>:
   1e614:	b470      	push	{r4, r5, r6}
   1e616:	780c      	ldrb	r4, [r1, #0]
   1e618:	2c5e      	cmp	r4, #94	; 0x5e
   1e61a:	d02f      	beq.n	1e67c <__sccl+0x68>
   1e61c:	2200      	movs	r2, #0
   1e61e:	1c4d      	adds	r5, r1, #1
   1e620:	4616      	mov	r6, r2
   1e622:	1e43      	subs	r3, r0, #1
   1e624:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   1e628:	f803 2f01 	strb.w	r2, [r3, #1]!
   1e62c:	428b      	cmp	r3, r1
   1e62e:	d1fb      	bne.n	1e628 <__sccl+0x14>
   1e630:	b174      	cbz	r4, 1e650 <__sccl+0x3c>
   1e632:	f086 0201 	eor.w	r2, r6, #1
   1e636:	5502      	strb	r2, [r0, r4]
   1e638:	1c6e      	adds	r6, r5, #1
   1e63a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1e63e:	2b2d      	cmp	r3, #45	; 0x2d
   1e640:	4631      	mov	r1, r6
   1e642:	d00d      	beq.n	1e660 <__sccl+0x4c>
   1e644:	2b5d      	cmp	r3, #93	; 0x5d
   1e646:	d004      	beq.n	1e652 <__sccl+0x3e>
   1e648:	b133      	cbz	r3, 1e658 <__sccl+0x44>
   1e64a:	461c      	mov	r4, r3
   1e64c:	4635      	mov	r5, r6
   1e64e:	e7f2      	b.n	1e636 <__sccl+0x22>
   1e650:	1e69      	subs	r1, r5, #1
   1e652:	4608      	mov	r0, r1
   1e654:	bc70      	pop	{r4, r5, r6}
   1e656:	4770      	bx	lr
   1e658:	4629      	mov	r1, r5
   1e65a:	4608      	mov	r0, r1
   1e65c:	bc70      	pop	{r4, r5, r6}
   1e65e:	4770      	bx	lr
   1e660:	7869      	ldrb	r1, [r5, #1]
   1e662:	295d      	cmp	r1, #93	; 0x5d
   1e664:	d0f1      	beq.n	1e64a <__sccl+0x36>
   1e666:	428c      	cmp	r4, r1
   1e668:	dcef      	bgt.n	1e64a <__sccl+0x36>
   1e66a:	3502      	adds	r5, #2
   1e66c:	1903      	adds	r3, r0, r4
   1e66e:	3401      	adds	r4, #1
   1e670:	42a1      	cmp	r1, r4
   1e672:	f803 2f01 	strb.w	r2, [r3, #1]!
   1e676:	dcfa      	bgt.n	1e66e <__sccl+0x5a>
   1e678:	3602      	adds	r6, #2
   1e67a:	e7de      	b.n	1e63a <__sccl+0x26>
   1e67c:	2201      	movs	r2, #1
   1e67e:	784c      	ldrb	r4, [r1, #1]
   1e680:	4616      	mov	r6, r2
   1e682:	1c8d      	adds	r5, r1, #2
   1e684:	e7cd      	b.n	1e622 <__sccl+0xe>
   1e686:	bf00      	nop

0001e688 <_strtol_l.isra.0>:
   1e688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e68c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1e690:	460f      	mov	r7, r1
   1e692:	4680      	mov	r8, r0
   1e694:	4616      	mov	r6, r2
   1e696:	461d      	mov	r5, r3
   1e698:	468a      	mov	sl, r1
   1e69a:	e000      	b.n	1e69e <_strtol_l.isra.0+0x16>
   1e69c:	46a2      	mov	sl, r4
   1e69e:	4654      	mov	r4, sl
   1e6a0:	4648      	mov	r0, r9
   1e6a2:	f814 bb01 	ldrb.w	fp, [r4], #1
   1e6a6:	f7ff fd55 	bl	1e154 <__locale_ctype_ptr_l>
   1e6aa:	4458      	add	r0, fp
   1e6ac:	7842      	ldrb	r2, [r0, #1]
   1e6ae:	f012 0208 	ands.w	r2, r2, #8
   1e6b2:	d1f3      	bne.n	1e69c <_strtol_l.isra.0+0x14>
   1e6b4:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1e6b8:	d04f      	beq.n	1e75a <_strtol_l.isra.0+0xd2>
   1e6ba:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   1e6be:	bf04      	itt	eq
   1e6c0:	f894 b000 	ldrbeq.w	fp, [r4]
   1e6c4:	f10a 0402 	addeq.w	r4, sl, #2
   1e6c8:	b11d      	cbz	r5, 1e6d2 <_strtol_l.isra.0+0x4a>
   1e6ca:	2d10      	cmp	r5, #16
   1e6cc:	d056      	beq.n	1e77c <_strtol_l.isra.0+0xf4>
   1e6ce:	46ac      	mov	ip, r5
   1e6d0:	e004      	b.n	1e6dc <_strtol_l.isra.0+0x54>
   1e6d2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1e6d6:	d060      	beq.n	1e79a <_strtol_l.isra.0+0x112>
   1e6d8:	250a      	movs	r5, #10
   1e6da:	46ac      	mov	ip, r5
   1e6dc:	2a00      	cmp	r2, #0
   1e6de:	bf0c      	ite	eq
   1e6e0:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   1e6e4:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   1e6e8:	2100      	movs	r1, #0
   1e6ea:	fbb9 fefc 	udiv	lr, r9, ip
   1e6ee:	4608      	mov	r0, r1
   1e6f0:	fb0c 9a1e 	mls	sl, ip, lr, r9
   1e6f4:	e005      	b.n	1e702 <_strtol_l.isra.0+0x7a>
   1e6f6:	d029      	beq.n	1e74c <_strtol_l.isra.0+0xc4>
   1e6f8:	fb0c 3000 	mla	r0, ip, r0, r3
   1e6fc:	2101      	movs	r1, #1
   1e6fe:	f814 bb01 	ldrb.w	fp, [r4], #1
   1e702:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   1e706:	2b09      	cmp	r3, #9
   1e708:	d905      	bls.n	1e716 <_strtol_l.isra.0+0x8e>
   1e70a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   1e70e:	2b19      	cmp	r3, #25
   1e710:	d80b      	bhi.n	1e72a <_strtol_l.isra.0+0xa2>
   1e712:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   1e716:	429d      	cmp	r5, r3
   1e718:	dd0f      	ble.n	1e73a <_strtol_l.isra.0+0xb2>
   1e71a:	f1b1 3fff 	cmp.w	r1, #4294967295
   1e71e:	d0ee      	beq.n	1e6fe <_strtol_l.isra.0+0x76>
   1e720:	4586      	cmp	lr, r0
   1e722:	d2e8      	bcs.n	1e6f6 <_strtol_l.isra.0+0x6e>
   1e724:	f04f 31ff 	mov.w	r1, #4294967295
   1e728:	e7e9      	b.n	1e6fe <_strtol_l.isra.0+0x76>
   1e72a:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   1e72e:	2b19      	cmp	r3, #25
   1e730:	d803      	bhi.n	1e73a <_strtol_l.isra.0+0xb2>
   1e732:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   1e736:	429d      	cmp	r5, r3
   1e738:	dcef      	bgt.n	1e71a <_strtol_l.isra.0+0x92>
   1e73a:	1c4b      	adds	r3, r1, #1
   1e73c:	d013      	beq.n	1e766 <_strtol_l.isra.0+0xde>
   1e73e:	b102      	cbz	r2, 1e742 <_strtol_l.isra.0+0xba>
   1e740:	4240      	negs	r0, r0
   1e742:	b146      	cbz	r6, 1e756 <_strtol_l.isra.0+0xce>
   1e744:	b9c1      	cbnz	r1, 1e778 <_strtol_l.isra.0+0xf0>
   1e746:	6037      	str	r7, [r6, #0]
   1e748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e74c:	459a      	cmp	sl, r3
   1e74e:	dad3      	bge.n	1e6f8 <_strtol_l.isra.0+0x70>
   1e750:	f04f 31ff 	mov.w	r1, #4294967295
   1e754:	e7d3      	b.n	1e6fe <_strtol_l.isra.0+0x76>
   1e756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e75a:	f894 b000 	ldrb.w	fp, [r4]
   1e75e:	2201      	movs	r2, #1
   1e760:	f10a 0402 	add.w	r4, sl, #2
   1e764:	e7b0      	b.n	1e6c8 <_strtol_l.isra.0+0x40>
   1e766:	2322      	movs	r3, #34	; 0x22
   1e768:	f8c8 3000 	str.w	r3, [r8]
   1e76c:	b1ee      	cbz	r6, 1e7aa <_strtol_l.isra.0+0x122>
   1e76e:	1e67      	subs	r7, r4, #1
   1e770:	4648      	mov	r0, r9
   1e772:	6037      	str	r7, [r6, #0]
   1e774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e778:	4681      	mov	r9, r0
   1e77a:	e7f8      	b.n	1e76e <_strtol_l.isra.0+0xe6>
   1e77c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1e780:	d1a5      	bne.n	1e6ce <_strtol_l.isra.0+0x46>
   1e782:	7823      	ldrb	r3, [r4, #0]
   1e784:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e788:	2b58      	cmp	r3, #88	; 0x58
   1e78a:	d1a0      	bne.n	1e6ce <_strtol_l.isra.0+0x46>
   1e78c:	f04f 0c10 	mov.w	ip, #16
   1e790:	f894 b001 	ldrb.w	fp, [r4, #1]
   1e794:	4665      	mov	r5, ip
   1e796:	3402      	adds	r4, #2
   1e798:	e7a0      	b.n	1e6dc <_strtol_l.isra.0+0x54>
   1e79a:	7823      	ldrb	r3, [r4, #0]
   1e79c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e7a0:	2b58      	cmp	r3, #88	; 0x58
   1e7a2:	d0f3      	beq.n	1e78c <_strtol_l.isra.0+0x104>
   1e7a4:	2508      	movs	r5, #8
   1e7a6:	46ac      	mov	ip, r5
   1e7a8:	e798      	b.n	1e6dc <_strtol_l.isra.0+0x54>
   1e7aa:	4648      	mov	r0, r9
   1e7ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e7b0 <_strtol_r>:
   1e7b0:	b530      	push	{r4, r5, lr}
   1e7b2:	4c06      	ldr	r4, [pc, #24]	; (1e7cc <_strtol_r+0x1c>)
   1e7b4:	4d06      	ldr	r5, [pc, #24]	; (1e7d0 <_strtol_r+0x20>)
   1e7b6:	6824      	ldr	r4, [r4, #0]
   1e7b8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1e7ba:	b083      	sub	sp, #12
   1e7bc:	2c00      	cmp	r4, #0
   1e7be:	bf08      	it	eq
   1e7c0:	462c      	moveq	r4, r5
   1e7c2:	9400      	str	r4, [sp, #0]
   1e7c4:	f7ff ff60 	bl	1e688 <_strtol_l.isra.0>
   1e7c8:	b003      	add	sp, #12
   1e7ca:	bd30      	pop	{r4, r5, pc}
   1e7cc:	200001bc 	.word	0x200001bc
   1e7d0:	20000a48 	.word	0x20000a48

0001e7d4 <_strtoll_l.isra.0>:
   1e7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7d8:	b085      	sub	sp, #20
   1e7da:	461e      	mov	r6, r3
   1e7dc:	9102      	str	r1, [sp, #8]
   1e7de:	9003      	str	r0, [sp, #12]
   1e7e0:	9200      	str	r2, [sp, #0]
   1e7e2:	4688      	mov	r8, r1
   1e7e4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1e7e6:	e000      	b.n	1e7ea <_strtoll_l.isra.0+0x16>
   1e7e8:	46a8      	mov	r8, r5
   1e7ea:	4645      	mov	r5, r8
   1e7ec:	4638      	mov	r0, r7
   1e7ee:	f815 4b01 	ldrb.w	r4, [r5], #1
   1e7f2:	f7ff fcaf 	bl	1e154 <__locale_ctype_ptr_l>
   1e7f6:	4420      	add	r0, r4
   1e7f8:	7843      	ldrb	r3, [r0, #1]
   1e7fa:	f013 0308 	ands.w	r3, r3, #8
   1e7fe:	d1f3      	bne.n	1e7e8 <_strtoll_l.isra.0+0x14>
   1e800:	2c2d      	cmp	r4, #45	; 0x2d
   1e802:	f000 8081 	beq.w	1e908 <_strtoll_l.isra.0+0x134>
   1e806:	2c2b      	cmp	r4, #43	; 0x2b
   1e808:	bf03      	ittte	eq
   1e80a:	782c      	ldrbeq	r4, [r5, #0]
   1e80c:	9301      	streq	r3, [sp, #4]
   1e80e:	f108 0502 	addeq.w	r5, r8, #2
   1e812:	9301      	strne	r3, [sp, #4]
   1e814:	b166      	cbz	r6, 1e830 <_strtoll_l.isra.0+0x5c>
   1e816:	2e10      	cmp	r6, #16
   1e818:	f000 8088 	beq.w	1e92c <_strtoll_l.isra.0+0x158>
   1e81c:	9b01      	ldr	r3, [sp, #4]
   1e81e:	46b0      	mov	r8, r6
   1e820:	ea4f 79e6 	mov.w	r9, r6, asr #31
   1e824:	b97b      	cbnz	r3, 1e846 <_strtoll_l.isra.0+0x72>
   1e826:	f04f 3aff 	mov.w	sl, #4294967295
   1e82a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   1e82e:	e00e      	b.n	1e84e <_strtoll_l.isra.0+0x7a>
   1e830:	2c30      	cmp	r4, #48	; 0x30
   1e832:	f000 808a 	beq.w	1e94a <_strtoll_l.isra.0+0x176>
   1e836:	f04f 080a 	mov.w	r8, #10
   1e83a:	f04f 0900 	mov.w	r9, #0
   1e83e:	260a      	movs	r6, #10
   1e840:	9b01      	ldr	r3, [sp, #4]
   1e842:	2b00      	cmp	r3, #0
   1e844:	d0ef      	beq.n	1e826 <_strtoll_l.isra.0+0x52>
   1e846:	f04f 0a00 	mov.w	sl, #0
   1e84a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
   1e84e:	4642      	mov	r2, r8
   1e850:	464b      	mov	r3, r9
   1e852:	4650      	mov	r0, sl
   1e854:	4639      	mov	r1, r7
   1e856:	f7fc f881 	bl	1a95c <__aeabi_uldivmod>
   1e85a:	464b      	mov	r3, r9
   1e85c:	4693      	mov	fp, r2
   1e85e:	4650      	mov	r0, sl
   1e860:	4642      	mov	r2, r8
   1e862:	4639      	mov	r1, r7
   1e864:	f7fc f87a 	bl	1a95c <__aeabi_uldivmod>
   1e868:	f04f 0e00 	mov.w	lr, #0
   1e86c:	2200      	movs	r2, #0
   1e86e:	2300      	movs	r3, #0
   1e870:	e00f      	b.n	1e892 <_strtoll_l.isra.0+0xbe>
   1e872:	d044      	beq.n	1e8fe <_strtoll_l.isra.0+0x12a>
   1e874:	fb02 f409 	mul.w	r4, r2, r9
   1e878:	fb08 4403 	mla	r4, r8, r3, r4
   1e87c:	fba2 2308 	umull	r2, r3, r2, r8
   1e880:	4423      	add	r3, r4
   1e882:	eb12 020c 	adds.w	r2, r2, ip
   1e886:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
   1e88a:	f04f 0e01 	mov.w	lr, #1
   1e88e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1e892:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   1e896:	f1bc 0f09 	cmp.w	ip, #9
   1e89a:	d906      	bls.n	1e8aa <_strtoll_l.isra.0+0xd6>
   1e89c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   1e8a0:	f1bc 0f19 	cmp.w	ip, #25
   1e8a4:	d80d      	bhi.n	1e8c2 <_strtoll_l.isra.0+0xee>
   1e8a6:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
   1e8aa:	4566      	cmp	r6, ip
   1e8ac:	dd12      	ble.n	1e8d4 <_strtoll_l.isra.0+0x100>
   1e8ae:	f1be 3fff 	cmp.w	lr, #4294967295
   1e8b2:	d0ec      	beq.n	1e88e <_strtoll_l.isra.0+0xba>
   1e8b4:	4299      	cmp	r1, r3
   1e8b6:	bf08      	it	eq
   1e8b8:	4290      	cmpeq	r0, r2
   1e8ba:	d2da      	bcs.n	1e872 <_strtoll_l.isra.0+0x9e>
   1e8bc:	f04f 3eff 	mov.w	lr, #4294967295
   1e8c0:	e7e5      	b.n	1e88e <_strtoll_l.isra.0+0xba>
   1e8c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1e8c6:	f1bc 0f19 	cmp.w	ip, #25
   1e8ca:	d803      	bhi.n	1e8d4 <_strtoll_l.isra.0+0x100>
   1e8cc:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
   1e8d0:	4566      	cmp	r6, ip
   1e8d2:	dcec      	bgt.n	1e8ae <_strtoll_l.isra.0+0xda>
   1e8d4:	f1be 3fff 	cmp.w	lr, #4294967295
   1e8d8:	d01c      	beq.n	1e914 <_strtoll_l.isra.0+0x140>
   1e8da:	9901      	ldr	r1, [sp, #4]
   1e8dc:	b111      	cbz	r1, 1e8e4 <_strtoll_l.isra.0+0x110>
   1e8de:	4252      	negs	r2, r2
   1e8e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1e8e4:	9900      	ldr	r1, [sp, #0]
   1e8e6:	b129      	cbz	r1, 1e8f4 <_strtoll_l.isra.0+0x120>
   1e8e8:	f1be 0f00 	cmp.w	lr, #0
   1e8ec:	d11b      	bne.n	1e926 <_strtoll_l.isra.0+0x152>
   1e8ee:	9d02      	ldr	r5, [sp, #8]
   1e8f0:	9900      	ldr	r1, [sp, #0]
   1e8f2:	600d      	str	r5, [r1, #0]
   1e8f4:	4610      	mov	r0, r2
   1e8f6:	4619      	mov	r1, r3
   1e8f8:	b005      	add	sp, #20
   1e8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8fe:	45e3      	cmp	fp, ip
   1e900:	dab8      	bge.n	1e874 <_strtoll_l.isra.0+0xa0>
   1e902:	f04f 3eff 	mov.w	lr, #4294967295
   1e906:	e7c2      	b.n	1e88e <_strtoll_l.isra.0+0xba>
   1e908:	2301      	movs	r3, #1
   1e90a:	782c      	ldrb	r4, [r5, #0]
   1e90c:	9301      	str	r3, [sp, #4]
   1e90e:	f108 0502 	add.w	r5, r8, #2
   1e912:	e77f      	b.n	1e814 <_strtoll_l.isra.0+0x40>
   1e914:	9a03      	ldr	r2, [sp, #12]
   1e916:	2322      	movs	r3, #34	; 0x22
   1e918:	6013      	str	r3, [r2, #0]
   1e91a:	9b00      	ldr	r3, [sp, #0]
   1e91c:	b32b      	cbz	r3, 1e96a <_strtoll_l.isra.0+0x196>
   1e91e:	4652      	mov	r2, sl
   1e920:	463b      	mov	r3, r7
   1e922:	3d01      	subs	r5, #1
   1e924:	e7e4      	b.n	1e8f0 <_strtoll_l.isra.0+0x11c>
   1e926:	4692      	mov	sl, r2
   1e928:	461f      	mov	r7, r3
   1e92a:	e7f8      	b.n	1e91e <_strtoll_l.isra.0+0x14a>
   1e92c:	2c30      	cmp	r4, #48	; 0x30
   1e92e:	d117      	bne.n	1e960 <_strtoll_l.isra.0+0x18c>
   1e930:	782b      	ldrb	r3, [r5, #0]
   1e932:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e936:	2b58      	cmp	r3, #88	; 0x58
   1e938:	d112      	bne.n	1e960 <_strtoll_l.isra.0+0x18c>
   1e93a:	786c      	ldrb	r4, [r5, #1]
   1e93c:	f04f 0810 	mov.w	r8, #16
   1e940:	f04f 0900 	mov.w	r9, #0
   1e944:	3502      	adds	r5, #2
   1e946:	2610      	movs	r6, #16
   1e948:	e77a      	b.n	1e840 <_strtoll_l.isra.0+0x6c>
   1e94a:	782b      	ldrb	r3, [r5, #0]
   1e94c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e950:	2b58      	cmp	r3, #88	; 0x58
   1e952:	d0f2      	beq.n	1e93a <_strtoll_l.isra.0+0x166>
   1e954:	f04f 0808 	mov.w	r8, #8
   1e958:	f04f 0900 	mov.w	r9, #0
   1e95c:	2608      	movs	r6, #8
   1e95e:	e76f      	b.n	1e840 <_strtoll_l.isra.0+0x6c>
   1e960:	f04f 0810 	mov.w	r8, #16
   1e964:	f04f 0900 	mov.w	r9, #0
   1e968:	e76a      	b.n	1e840 <_strtoll_l.isra.0+0x6c>
   1e96a:	4652      	mov	r2, sl
   1e96c:	463b      	mov	r3, r7
   1e96e:	e7c1      	b.n	1e8f4 <_strtoll_l.isra.0+0x120>

0001e970 <_strtoll_r>:
   1e970:	b530      	push	{r4, r5, lr}
   1e972:	4c06      	ldr	r4, [pc, #24]	; (1e98c <_strtoll_r+0x1c>)
   1e974:	4d06      	ldr	r5, [pc, #24]	; (1e990 <_strtoll_r+0x20>)
   1e976:	6824      	ldr	r4, [r4, #0]
   1e978:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1e97a:	b083      	sub	sp, #12
   1e97c:	2c00      	cmp	r4, #0
   1e97e:	bf08      	it	eq
   1e980:	462c      	moveq	r4, r5
   1e982:	9400      	str	r4, [sp, #0]
   1e984:	f7ff ff26 	bl	1e7d4 <_strtoll_l.isra.0>
   1e988:	b003      	add	sp, #12
   1e98a:	bd30      	pop	{r4, r5, pc}
   1e98c:	200001bc 	.word	0x200001bc
   1e990:	20000a48 	.word	0x20000a48

0001e994 <_strtoull_l.isra.0>:
   1e994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e998:	b085      	sub	sp, #20
   1e99a:	4693      	mov	fp, r2
   1e99c:	9102      	str	r1, [sp, #8]
   1e99e:	9003      	str	r0, [sp, #12]
   1e9a0:	469a      	mov	sl, r3
   1e9a2:	460f      	mov	r7, r1
   1e9a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1e9a6:	e000      	b.n	1e9aa <_strtoull_l.isra.0+0x16>
   1e9a8:	462f      	mov	r7, r5
   1e9aa:	463d      	mov	r5, r7
   1e9ac:	4630      	mov	r0, r6
   1e9ae:	f815 4b01 	ldrb.w	r4, [r5], #1
   1e9b2:	f7ff fbcf 	bl	1e154 <__locale_ctype_ptr_l>
   1e9b6:	4420      	add	r0, r4
   1e9b8:	7843      	ldrb	r3, [r0, #1]
   1e9ba:	f013 0308 	ands.w	r3, r3, #8
   1e9be:	d1f3      	bne.n	1e9a8 <_strtoull_l.isra.0+0x14>
   1e9c0:	2c2d      	cmp	r4, #45	; 0x2d
   1e9c2:	f000 8089 	beq.w	1ead8 <_strtoull_l.isra.0+0x144>
   1e9c6:	2c2b      	cmp	r4, #43	; 0x2b
   1e9c8:	bf03      	ittte	eq
   1e9ca:	782c      	ldrbeq	r4, [r5, #0]
   1e9cc:	9301      	streq	r3, [sp, #4]
   1e9ce:	1cbd      	addeq	r5, r7, #2
   1e9d0:	9301      	strne	r3, [sp, #4]
   1e9d2:	f1ba 0f00 	cmp.w	sl, #0
   1e9d6:	d019      	beq.n	1ea0c <_strtoull_l.isra.0+0x78>
   1e9d8:	f1ba 0f10 	cmp.w	sl, #16
   1e9dc:	f000 8081 	beq.w	1eae2 <_strtoull_l.isra.0+0x14e>
   1e9e0:	46d0      	mov	r8, sl
   1e9e2:	ea4f 79ea 	mov.w	r9, sl, asr #31
   1e9e6:	4642      	mov	r2, r8
   1e9e8:	464b      	mov	r3, r9
   1e9ea:	f04f 30ff 	mov.w	r0, #4294967295
   1e9ee:	f04f 31ff 	mov.w	r1, #4294967295
   1e9f2:	f7fb ffb3 	bl	1a95c <__aeabi_uldivmod>
   1e9f6:	4642      	mov	r2, r8
   1e9f8:	4606      	mov	r6, r0
   1e9fa:	460f      	mov	r7, r1
   1e9fc:	464b      	mov	r3, r9
   1e9fe:	f04f 30ff 	mov.w	r0, #4294967295
   1ea02:	f04f 31ff 	mov.w	r1, #4294967295
   1ea06:	f7fb ffa9 	bl	1a95c <__aeabi_uldivmod>
   1ea0a:	e00b      	b.n	1ea24 <_strtoull_l.isra.0+0x90>
   1ea0c:	2c30      	cmp	r4, #48	; 0x30
   1ea0e:	d07d      	beq.n	1eb0c <_strtoull_l.isra.0+0x178>
   1ea10:	4f4e      	ldr	r7, [pc, #312]	; (1eb4c <_strtoull_l.isra.0+0x1b8>)
   1ea12:	2205      	movs	r2, #5
   1ea14:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   1ea18:	f04f 080a 	mov.w	r8, #10
   1ea1c:	f04f 0900 	mov.w	r9, #0
   1ea20:	f04f 0a0a 	mov.w	sl, #10
   1ea24:	f04f 0e00 	mov.w	lr, #0
   1ea28:	2000      	movs	r0, #0
   1ea2a:	2100      	movs	r1, #0
   1ea2c:	e011      	b.n	1ea52 <_strtoull_l.isra.0+0xbe>
   1ea2e:	42b9      	cmp	r1, r7
   1ea30:	bf08      	it	eq
   1ea32:	42b0      	cmpeq	r0, r6
   1ea34:	d03f      	beq.n	1eab6 <_strtoull_l.isra.0+0x122>
   1ea36:	fb00 f409 	mul.w	r4, r0, r9
   1ea3a:	fb08 4401 	mla	r4, r8, r1, r4
   1ea3e:	fba0 0108 	umull	r0, r1, r0, r8
   1ea42:	4421      	add	r1, r4
   1ea44:	18c0      	adds	r0, r0, r3
   1ea46:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1ea4a:	f04f 0e01 	mov.w	lr, #1
   1ea4e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ea52:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1ea56:	2b09      	cmp	r3, #9
   1ea58:	d905      	bls.n	1ea66 <_strtoull_l.isra.0+0xd2>
   1ea5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   1ea5e:	2b19      	cmp	r3, #25
   1ea60:	d80d      	bhi.n	1ea7e <_strtoull_l.isra.0+0xea>
   1ea62:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1ea66:	459a      	cmp	sl, r3
   1ea68:	dd11      	ble.n	1ea8e <_strtoull_l.isra.0+0xfa>
   1ea6a:	f1be 0f00 	cmp.w	lr, #0
   1ea6e:	db03      	blt.n	1ea78 <_strtoull_l.isra.0+0xe4>
   1ea70:	428f      	cmp	r7, r1
   1ea72:	bf08      	it	eq
   1ea74:	4286      	cmpeq	r6, r0
   1ea76:	d2da      	bcs.n	1ea2e <_strtoull_l.isra.0+0x9a>
   1ea78:	f04f 3eff 	mov.w	lr, #4294967295
   1ea7c:	e7e7      	b.n	1ea4e <_strtoull_l.isra.0+0xba>
   1ea7e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1ea82:	2b19      	cmp	r3, #25
   1ea84:	d803      	bhi.n	1ea8e <_strtoull_l.isra.0+0xfa>
   1ea86:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   1ea8a:	459a      	cmp	sl, r3
   1ea8c:	dced      	bgt.n	1ea6a <_strtoull_l.isra.0+0xd6>
   1ea8e:	f1be 0f00 	cmp.w	lr, #0
   1ea92:	db15      	blt.n	1eac0 <_strtoull_l.isra.0+0x12c>
   1ea94:	9b01      	ldr	r3, [sp, #4]
   1ea96:	b113      	cbz	r3, 1ea9e <_strtoull_l.isra.0+0x10a>
   1ea98:	4240      	negs	r0, r0
   1ea9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ea9e:	f1bb 0f00 	cmp.w	fp, #0
   1eaa2:	d005      	beq.n	1eab0 <_strtoull_l.isra.0+0x11c>
   1eaa4:	f1be 0f00 	cmp.w	lr, #0
   1eaa8:	d114      	bne.n	1ead4 <_strtoull_l.isra.0+0x140>
   1eaaa:	9d02      	ldr	r5, [sp, #8]
   1eaac:	f8cb 5000 	str.w	r5, [fp]
   1eab0:	b005      	add	sp, #20
   1eab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eab6:	4293      	cmp	r3, r2
   1eab8:	ddbd      	ble.n	1ea36 <_strtoull_l.isra.0+0xa2>
   1eaba:	f04f 3eff 	mov.w	lr, #4294967295
   1eabe:	e7c6      	b.n	1ea4e <_strtoull_l.isra.0+0xba>
   1eac0:	9a03      	ldr	r2, [sp, #12]
   1eac2:	2322      	movs	r3, #34	; 0x22
   1eac4:	6013      	str	r3, [r2, #0]
   1eac6:	f04f 30ff 	mov.w	r0, #4294967295
   1eaca:	f04f 31ff 	mov.w	r1, #4294967295
   1eace:	f1bb 0f00 	cmp.w	fp, #0
   1ead2:	d0ed      	beq.n	1eab0 <_strtoull_l.isra.0+0x11c>
   1ead4:	3d01      	subs	r5, #1
   1ead6:	e7e9      	b.n	1eaac <_strtoull_l.isra.0+0x118>
   1ead8:	2301      	movs	r3, #1
   1eada:	782c      	ldrb	r4, [r5, #0]
   1eadc:	9301      	str	r3, [sp, #4]
   1eade:	1cbd      	adds	r5, r7, #2
   1eae0:	e777      	b.n	1e9d2 <_strtoull_l.isra.0+0x3e>
   1eae2:	2c30      	cmp	r4, #48	; 0x30
   1eae4:	d123      	bne.n	1eb2e <_strtoull_l.isra.0+0x19a>
   1eae6:	782b      	ldrb	r3, [r5, #0]
   1eae8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1eaec:	2b58      	cmp	r3, #88	; 0x58
   1eaee:	d128      	bne.n	1eb42 <_strtoull_l.isra.0+0x1ae>
   1eaf0:	786c      	ldrb	r4, [r5, #1]
   1eaf2:	220f      	movs	r2, #15
   1eaf4:	3502      	adds	r5, #2
   1eaf6:	f04f 36ff 	mov.w	r6, #4294967295
   1eafa:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   1eafe:	f04f 0810 	mov.w	r8, #16
   1eb02:	f04f 0900 	mov.w	r9, #0
   1eb06:	f04f 0a10 	mov.w	sl, #16
   1eb0a:	e78b      	b.n	1ea24 <_strtoull_l.isra.0+0x90>
   1eb0c:	782b      	ldrb	r3, [r5, #0]
   1eb0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1eb12:	2b58      	cmp	r3, #88	; 0x58
   1eb14:	d0ec      	beq.n	1eaf0 <_strtoull_l.isra.0+0x15c>
   1eb16:	2207      	movs	r2, #7
   1eb18:	f04f 36ff 	mov.w	r6, #4294967295
   1eb1c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   1eb20:	f04f 0808 	mov.w	r8, #8
   1eb24:	f04f 0900 	mov.w	r9, #0
   1eb28:	f04f 0a08 	mov.w	sl, #8
   1eb2c:	e77a      	b.n	1ea24 <_strtoull_l.isra.0+0x90>
   1eb2e:	220f      	movs	r2, #15
   1eb30:	f04f 36ff 	mov.w	r6, #4294967295
   1eb34:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   1eb38:	f04f 0810 	mov.w	r8, #16
   1eb3c:	f04f 0900 	mov.w	r9, #0
   1eb40:	e770      	b.n	1ea24 <_strtoull_l.isra.0+0x90>
   1eb42:	f04f 0810 	mov.w	r8, #16
   1eb46:	f04f 0900 	mov.w	r9, #0
   1eb4a:	e74c      	b.n	1e9e6 <_strtoull_l.isra.0+0x52>
   1eb4c:	19999999 	.word	0x19999999

0001eb50 <_strtoull_r>:
   1eb50:	b530      	push	{r4, r5, lr}
   1eb52:	4c06      	ldr	r4, [pc, #24]	; (1eb6c <_strtoull_r+0x1c>)
   1eb54:	4d06      	ldr	r5, [pc, #24]	; (1eb70 <_strtoull_r+0x20>)
   1eb56:	6824      	ldr	r4, [r4, #0]
   1eb58:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1eb5a:	b083      	sub	sp, #12
   1eb5c:	2c00      	cmp	r4, #0
   1eb5e:	bf08      	it	eq
   1eb60:	462c      	moveq	r4, r5
   1eb62:	9400      	str	r4, [sp, #0]
   1eb64:	f7ff ff16 	bl	1e994 <_strtoull_l.isra.0>
   1eb68:	b003      	add	sp, #12
   1eb6a:	bd30      	pop	{r4, r5, pc}
   1eb6c:	200001bc 	.word	0x200001bc
   1eb70:	20000a48 	.word	0x20000a48

0001eb74 <__ascii_wctomb>:
   1eb74:	b121      	cbz	r1, 1eb80 <__ascii_wctomb+0xc>
   1eb76:	2aff      	cmp	r2, #255	; 0xff
   1eb78:	d804      	bhi.n	1eb84 <__ascii_wctomb+0x10>
   1eb7a:	700a      	strb	r2, [r1, #0]
   1eb7c:	2001      	movs	r0, #1
   1eb7e:	4770      	bx	lr
   1eb80:	4608      	mov	r0, r1
   1eb82:	4770      	bx	lr
   1eb84:	238a      	movs	r3, #138	; 0x8a
   1eb86:	6003      	str	r3, [r0, #0]
   1eb88:	f04f 30ff 	mov.w	r0, #4294967295
   1eb8c:	4770      	bx	lr
   1eb8e:	bf00      	nop
   1eb90:	2e2f2e2e 	.word	0x2e2f2e2e
   1eb94:	2e2e2f2e 	.word	0x2e2e2f2e
   1eb98:	554c412f 	.word	0x554c412f
   1eb9c:	6972445f 	.word	0x6972445f
   1eba0:	2f726576 	.word	0x2f726576
   1eba4:	5f554c41 	.word	0x5f554c41
   1eba8:	76697244 	.word	0x76697244
   1ebac:	682f7265 	.word	0x682f7265
   1ebb0:	692f6c61 	.word	0x692f6c61
   1ebb4:	756c636e 	.word	0x756c636e
   1ebb8:	682f6564 	.word	0x682f6564
   1ebbc:	775f6c61 	.word	0x775f6c61
   1ebc0:	682e7464 	.word	0x682e7464
   1ebc4:	00000000 	.word	0x00000000
   1ebc8:	656c6553 	.word	0x656c6553
   1ebcc:	64657463 	.word	0x64657463
   1ebd0:	6e696c20 	.word	0x6e696c20
   1ebd4:	00003a65 	.word	0x00003a65
   1ebd8:	00000a0d 	.word	0x00000a0d
   1ebdc:	2a2a2a2a 	.word	0x2a2a2a2a
   1ebe0:	66694c20 	.word	0x66694c20
   1ebe4:	75502065 	.word	0x75502065
   1ebe8:	2065736c 	.word	0x2065736c
   1ebec:	69746341 	.word	0x69746341
   1ebf0:	65746176 	.word	0x65746176
   1ebf4:	2a2a2a64 	.word	0x2a2a2a64
   1ebf8:	0000002a 	.word	0x0000002a

0001ebfc <_ZTV10AMMC_Class>:
   1ebfc:	00000318 00000308 00000000 00000000     ................
   1ec0c:	00000c11 00000cb1 00012f09 00000000     ........./......
   1ec1c:	00000000 fffffcf8 00000000 000126a1     .............&..
   1ec2c:	00012571 fffffce8 fffffce8 fffffff0     q%..............
   1ec3c:	fffffce8 00000000 00000c85 00000cdd     ................
   1ec4c:	00012f6d                                m/..

0001ec50 <_ZTT10AMMC_Class>:
   1ec50:	0001ec0c 0001ec8c 0001ece0 0001ecf8     ................
   1ec60:	0001ed14 0001eca8 0001ecc4 0001ec28     ............(...
   1ec70:	0001ec44 0001ed2c 0001ed48              D...,...H...

0001ec7c <_ZTC10AMMC_Class0_15ARINC_Interface>:
   1ec7c:	00000318 00000308 00000000 00000000     ................
	...
   1ec94:	00012f09 00000000 00000000 fffffcf8     ./..............
   1eca4:	00000000 000126a1 00012571 fffffce8     .....&..q%......
   1ecb4:	fffffce8 fffffff0 fffffce8 00000000     ................
	...
   1eccc:	00012f6d                                m/..

0001ecd0 <_ZTC10AMMC_Class0_18ARINC_Buffer_Class>:
   1ecd0:	00000318 00000308 00000000 00000000     ................
	...
   1ecf0:	fffffcf8 00000000 000126a1 00012571     .........&..q%..
   1ed00:	00000000 fffffce8 fffffff0 fffffce8     ................
	...
   1ed1c:	00013c2f                                /<..

0001ed20 <_ZTC10AMMC_Class792_14Protocol_Class>:
   1ed20:	fffffff0 00000000 00000000 00000000     ................
   1ed30:	00000000 00013c2f 00000000 00000000     ..../<..........
   1ed40:	00000010 00000000 000126a1 00012571     .........&..q%..

0001ed50 <factoryDefaultsConfiguration>:
   1ed50:	000000ac 00000004 0000070c 00000000     ................
   1ed60:	00000000 00000001 000003e8 000003e8     ................
   1ed70:	000003e8 00000000 00000000 00000000     ................
   1ed80:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
   1ed90:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
   1eda0:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
   1edb0:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
   1edc0:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
   1edd0:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
   1ede0:	41200000 41200000 00000014 00000078     .. A.. A....x...
   1edf0:	be23d70a 41d00000 00000078              ..#....Ax...

0001edfc <factoryDefaultsCycles>:
   1edfc:	000001c0 00000005 0000000c 00000024     ............$...
   1ee0c:	756e614d 00006c61 00000000 00000000     Manual..........
   1ee1c:	00000000 00000001 00000258 0000000f     ........X.......
   1ee2c:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
   1ee44:	00000001 00000258 0000001e 0000012c     ....X.......,...
   1ee54:	2030332b 73636573 00000000 00000000     +30 secs........
   1ee64:	00000000 00000001 000000f0 0000001e     ................
   1ee74:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
   1ee9c:	73657250 32207465 00000000 00000000     Preset 2........
	...
   1eec0:	73657250 33207465 00000000 00000000     Preset 3........
	...
   1eee4:	73657250 34207465 00000000 00000000     Preset 4........
	...
   1ef08:	73657250 35207465 00000000 00000000     Preset 5........
	...
   1ef2c:	73657250 36207465 00000000 00000000     Preset 6........
	...
   1ef50:	73657250 37207465 00000000 00000000     Preset 7........
	...
   1ef74:	73657250 38207465 00000000 00000000     Preset 8........
	...
   1ef98:	73657250 39207465 00000000 00000000     Preset 9........
	...
   1efbc:	65736552 00000074 74696e49 696c6169     Reset...Initiali
   1efcc:	0000657a 75736552 0000656d 6e617453     ze..Resume..Stan
   1efdc:	4f796264 00004646 70657250 53657261     dbyOFF..PrepareS
   1efec:	646e6174 4e4f7962 00000000 6e617453     tandbyON....Stan
   1effc:	4f796264 0000004e 6e617453 52796264     dbyON...StandbyR
   1f00c:	79646165 00000000 616c6544 00646579     eady....Delayed.
   1f01c:	65746e49 70757272 00646574 00004e4f     Interrupted.ON..
   1f02c:	706f7453 50646570 65636f72 00007373     StoppedProcess..
   1f03c:	61656c43 0070756e 696e6946 64656873     Cleanup.Finished
   1f04c:	00000000 7065654b 00746f48 666c6553     ....KeepHot.Self
   1f05c:	746f7250 00746365 6f727245 00000072     Protect.Error...
   1f06c:	6e69614d 616e6574 0065636e 55494d48     Maintenance.HMIU
   1f07c:	74616470 00000065 6d726946 65726177     pdate...Firmware
   1f08c:	61647055 00006574 72727543 20746e65     Update..Current 
   1f09c:	74617453 00000065 6c637943 75442065     State...Cycle Du
   1f0ac:	69746172 00006e6f 616d6552 6e696e69     ration..Remainin
   1f0bc:	69542067 0000656d 67726154 50207465     g Time..Target P
   1f0cc:	7265776f 00000000 00776f4e 6967614d     ower....Now.Magi
   1f0dc:	00000063                                c...

0001f0e0 <defaultHVACState>:
   1f0e0:	61626364 00000000 00000000 00000000     dcba............
	...
   1f14c:	00203a20 00007830 00000a0d               : .0x......

0001f158 <_ZTV17ConfigState_Class>:
	...
   1f160:	00013c2f                                /<..

0001f164 <_ZTV14DateTime_Class>:
	...
   1f16c:	00016251 00016341 6e69614d 616e6574     Qb..Ac..Maintena
   1f17c:	2065636e 6c6f6f54 636f4c20 0064656b     nce Tool Locked.
   1f18c:	00000a0d 6f6d6552 6f206574 61726570     ....Remote opera
   1f19c:	6e6f6974 73694420 656c6261 00000064     tion Disabled...
   1f1ac:	49505351 6f725020 6d617267 61745320     QSPI Program Sta
   1f1bc:	64657472 00000d0a 73616c46 61642068     rted....Flash da
   1f1cc:	76206174 66697265 74616369 206e6f69     ta verification 
   1f1dc:	6c696166 0a2e6465 0000000d 74696220     failed...... bit
   1f1ec:	00003a20 00000a0d 74697257 202d2065      :......Write - 
   1f1fc:	64616552 20736920 63637573 66737365     Read is successf
   1f20c:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
   1f21c:	6d656d20 2079726f 00000000 202a2a2a      memory ....*** 
   1f22c:	72617453 20705574 6f676c41 68746972     StartUp Algorith
   1f23c:	206e656d 74736554 2a2a2a20 00000000     men Test ***....
   1f24c:	202a2a2a 65746144 0020203a 2074634f     *** Date:  .Oct 
   1f25c:	32203920 00303230 6d695420 00203a65      9 2020. Time: .
   1f26c:	303a3831 34353a38 00000000 202a2a2a     18:08:54....*** 
   1f27c:	20554c41 74696e69 65746169 2a2a2064     ALU initiated **
   1f28c:	0000002a 69746341 6c206576 3a656e69     *...Active line:
   1f29c:	00000020 73616c46 654d2068 79726f6d      ...Flash Memory
   1f2ac:	6c655320 73655466 41502074 44455353      SelfTest PASSED
   1f2bc:	00000000 00000a0d 73616c46 654d2068     ........Flash Me
   1f2cc:	79726f6d 6c655320 73655466 41462074     mory SelfTest FA
   1f2dc:	44454c49 00000000 52504545 4d204d4f     ILED....EEPROM M
   1f2ec:	726f6d65 65532079 6554666c 50207473     emory SelfTest P
   1f2fc:	45535341 00000044 52504545 4d204d4f     ASSED...EEPROM M
   1f30c:	726f6d65 65532079 6554666c 46207473     emory SelfTest F
   1f31c:	454c4941 00000044 20726941 646e6f43     AILED...Air Cond
   1f32c:	6f697469 676e696e 73795320 206d6574     itioning System 
   1f33c:	7265704f 6e697461 00000067 00000a0d     Operating.......
   1f34c:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   1f35c:	73795320 206d6574 72617453 00646574      System Started.
   1f36c:	646e6168 4147656c 76454e49 20746e65     handleGAINEvent 
   1f37c:	65636572 64657669 7773203a 68637469     received: switch
   1f38c:	20676e69 6d6f7266 00000020 206f7420     ing from ... to 
   1f39c:	00000000 6c662820 20736761 00203d3d     .... (flags == .
   1f3ac:	646e6168 7453656c 49657461 6974696e     handleStateIniti
   1f3bc:	7a696c61 66203a65 7367616c 203d3d20     alize: flags == 
   1f3cc:	00007830 646e6168 7453656c 49657461     0x..handleStateI
   1f3dc:	6974696e 7a696c61 00000065 646e6168     nitialize...hand
   1f3ec:	7453656c 53657461 646e6174 464f7962     leStateStandbyOF
   1f3fc:	00000046 646e6168 7453656c 50657461     F...handleStateP
   1f40c:	61706572 74536572 62646e61 004e4f79     repareStandbyON.
   1f41c:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   1f42c:	73795320 206d6574 706f7453 00646570      System Stopped.

0001f43c <_ZTV12States_Class>:
	...
   1f444:	00003db1 2e2f2e2e 7361542f 6e61486b     .=...././TaskHan
   1f454:	72656c64 616c435f 632e7373 00007070     dler_Class.cpp..
   1f464:	682f2e2e 702f6c70 2f74726f 5f6c7068     ../hpl/port/hpl_
   1f474:	6f697067 7361625f 00682e65 682f2e2e     gpio_base.h.../h
   1f484:	692f6c61 756c636e 682f6564 775f6c61     al/include/hal_w
   1f494:	682e7464 00000000 682f2e2e 732f6c61     dt.h....../hal/s
   1f4a4:	682f6372 635f6c61 6e656c61 2e726164     rc/hal_calendar.
   1f4b4:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
   1f4c4:	635f6c61 615f6e61 636e7973 0000632e     al_can_async.c..
   1f4d4:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   1f4e4:	735f6372 2e636e79 00000063 682f2e2e     rc_sync.c...../h
   1f4f4:	732f6c61 682f6372 695f6c61 6d5f6332     al/src/hal_i2c_m
   1f504:	7973615f 632e636e 00000000 682f2e2e     _async.c....../h
   1f514:	732f6c61 682f6372 695f6c61 6d5f6332     al/src/hal_i2c_m
   1f524:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
   1f534:	682f6372 705f6c61 632e6d77 00000000     rc/hal_pwm.c....
   1f544:	682f2e2e 732f6c61 682f6372 715f6c61     ../hal/src/hal_q
   1f554:	5f697073 636e7973 0000632e 682f2e2e     spi_sync.c..../h
   1f564:	732f6c61 682f6372 735f6c61 6d5f6970     al/src/hal_spi_m
   1f574:	7973615f 632e636e 00000000 682f2e2e     _async.c....../h
   1f584:	732f6c61 682f6372 735f6c61 6d5f6970     al/src/hal_spi_m
   1f594:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
   1f5a4:	682f6372 745f6c61 72656d69 0000632e     rc/hal_timer.c..
   1f5b4:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
   1f5c4:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...

0001f5d4 <_map>:
   1f5d4:	00000000 00000040 00000004 00000004     ....@...........
   1f5e4:	00000005 00000005 00000006 00000056     ............V...
   1f5f4:	00000007 00000057 00000008 00000028     ....W.......(...
   1f604:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   1f614:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0001f624 <user_mux_confs>:
   1f624:	00020100 00000000 00000000 00000000     ................
	...

0001f668 <channel_confs>:
   1f668:	0660065f 00000000 00000000 00000000     _.`.............
	...

0001f6a8 <interrupt_cfg>:
	...
   1f728:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   1f738:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   1f748:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   1f758:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   1f768:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   1f778:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   1f788:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   1f798:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   1f7a8:	43000c00                                ...C

0001f7ac <sercomspi_regs>:
   1f7ac:	0020008c 00020000 00000000 01ff0063     .. .........c...
   1f7bc:	20000c01 02000000 00000000 ff00ef00     ... ............
   1f7cc:	000c0401 00000030 00000002 00ef0000     ....0...........
   1f7dc:	000601ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1f7ec:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1f7fc:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1f80c:	43001400 43001800                       ...C...C

0001f814 <_usb_ep_cfgs>:
   1f814:	200087a0 00000000 00000040 200087e0     ... ....@...... 
   1f824:	20008820 00400040 20008860 200088a0      .. @.@.`.. ... 
   1f834:	00400040 200088e0 20008920 00400040     @.@....  .. @.@.
   1f844:	20008960 200089a0 00400040 00000804     `.. ... @.@.....
   1f854:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1f864:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1f874:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1f884:	7361625f 00682e65                       _base.h.

0001f88c <n25q256a_interface>:
   1f88c:	000108c1 00010965 00010a75 00010c2d     ....e...u...-...
   1f89c:	00010cbd 752f2e2e 642f6273 63697665     ....../usb/devic
   1f8ac:	73752f65 2e636462 00000063              e/usbdc.c...

0001f8b8 <_ZTV17ARINC_Conversions>:
	...
   1f8c0:	000126a1 00012571                       .&..q%..

0001f8c8 <_ZL5Mesg1>:
   1f8c8:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

0001f8d8 <_ZL5Mesg2>:
   1f8d8:	61746144 0000203a                       Data: ..

0001f8e0 <_ZL10HexToAscii>:
   1f8e0:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0001f8f0 <_ZL11HistoryMesg>:
   1f8f0:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
   1f900:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   1f910:	206f7420 74696e49 7a696c69 000d0a65      to Initilize...
   1f920:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
   1f930:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
   1f940:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
   1f950:	67617373 2d2d2165 00002d2d 61727420     ssage!----.. tra
   1f960:	696d736e 6e697474 2e2e2e67 00000000     nsmitting.......
   1f970:	61725420 696d736e 64657474 00000021      Transmitted!...
   1f980:	0000003e 72540d0a 6d736e61 26207469     >.....Transmit &
   1f990:	63655220 65766965 74695720 614c2068      Receive With La
   1f9a0:	736c6562 646f4d20 000d0a65 45530d0a     bels Mode.....SE
   1f9b0:	542d464c 2c545345 746e4920 616e7265     LF-TEST, Interna
   1f9c0:	6944206c 61746967 6f4c206c 622d706f     l Digital Loop-b
   1f9d0:	2c6b6361 206f4e20 61746164 20736920     ack, No data is 
   1f9e0:	6e617274 74696d73 20646574 65747865     transmitted exte
   1f9f0:	6c616e72 0d0a796c 00000000 6f200d0a     rnally........ o
   1fa00:	6154206e 20656c62 6562616c 6120736c     n Table labels a
   1fa10:	45206572 6c62616e 00006465 500a0d0a     re Enabled.....P
   1fa20:	73736572 2d575320 6f742031 61747320     ress SW-1 to sta
   1fa30:	69207472 6974696e 796c6c61 000a0d0a     rt initially....
   1fa40:	202d2d2d 74747542 43206e6f 616d6d6f     --- Button Comma
   1fa50:	2073646e 0a2d2d2d 0000000d 70532020     nds ---.....  Sp
   1fa60:	20656361 20726142 44206f74 6c707369     ace Bar to Displ
   1fa70:	53207961 75746174 6e612073 6f432064     ay Status and Co
   1fa80:	6f72746e 6552206c 74736967 0a737265     ntrol Registers.
   1fa90:	0000000d 20702020 50206f74 65737561     ....  p to Pause
   1faa0:	00000d0a 206d2020 44206f74 6c707369     ....  m to Displ
   1fab0:	4c207961 6c656261 6d654d20 0079726f     ay Label Memory.
   1fac0:	003e0d0a 72540d0a 6d736e61 69747469     ..>...Transmitti
   1fad0:	0d0a676e 0000003e 49480d0a 3935332d     ng..>.....HI-359
   1fae0:	74532033 73757461 6f43202c 6f72746e     3 Status, Contro
   1faf0:	6552206c 74736967 0d737265 0000000a     l Registers.....
   1fb00:	20090d0a 2a2a2a20 50202a2a 73736572     ...  ***** Press
   1fb10:	70732020 62656361 74207261 6f63206f       spacebar to co
   1fb20:	6e69746e 2a206575 2a2a2a2a 0000002a     ntinue ******...
   1fb30:	540d0a0a 736e6172 2074696d 73756150     ...Transmit Paus
   1fb40:	0d0a6465 00000000 72500d0a 20737365     ed........Press 
   1fb50:	44454c4f 5455425f 2d4e4f54 6f742032     OLED_BUTTON-2 to
   1fb60:	61727420 696d736e 6e6f2074 72662065      transmit one fr
   1fb70:	20656d61 20646e61 73756170 000d0a65     ame and pause...
   1fb80:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   1fb90:	2d4e4f54 6f742033 73655220 0a656d75     TON-3 to Resume.
   1fba0:	0000000d 72540d0a 6d736e61 65747469     ......Transmitte
   1fbb0:	65522072 656d7573 2e2e2e64 00000d0a     r Resumed.......
   1fbc0:	65520d0a 76696563 31207265 62614c20     ..Receiver 1 Lab
   1fbd0:	0a736c65 0000000d 65520d0a 76696563     els.......Receiv
   1fbe0:	32207265 62614c20 0a736c65 0000000d     er 2 Labels.....
   1fbf0:	72540d0a 6d736e61 26207469 63655220     ..Transmit & Rec
   1fc00:	65766965 68634520 6f4d206f 0d0a6564     eive Echo Mode..
   1fc10:	00000000 6c530d0a 5320776f 64656570     ......Slow Speed
   1fc20:	00000000 61460d0a 53207473 64656570     ......Fast Speed
   1fc30:	00000000 72540d0a 6d736e61 65747469     ......Transmitte
   1fc40:	61502072 79746972 616e4520 64656c62     r Parity Enabled
   1fc50:	00000000 49480d0a 3935332d 61662033     ......HI-3593 fa
   1fc60:	64656c69 206f7420 74696e69 7a696c69     iled to initiliz
   1fc70:	000d0a65 61540d0a 20656c62 6562616c     e.....Table labe
   1fc80:	6120736c 45206572 6c62616e 00006465     ls are Enabled..
   1fc90:	2d0a0d0a 43202d2d 6f736e6f 4320656c     ...--- Console C
   1fca0:	616d6d6f 2073646e 706c6548 2d2d2d20     ommands Help ---
   1fcb0:	00000000 20502020 6150203d 79746972     ....  P = Parity
   1fcc0:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   1fcd0:	20542020 4654203d 2050494c 676f5420       T = TFLIP  Tog
   1fce0:	20656c67 6f2f6e6f 00006666 20522020     gle on/off..  R 
   1fcf0:	4652203d 2050494c 676f5420 20656c67     = RFLIP  Toggle 
   1fd00:	6f2f6e6f 00006666 20532020 4453203d     on/off..  S = SD
   1fd10:	202c4e4f 2c394453 31445320 6f542030     ON, SD9, SD10 To
   1fd20:	656c6767 2f6e6f20 0066666f 20482020     ggle on/off.  H 
   1fd30:	6854203d 48207369 20706c65 65676150     = This Help Page
   1fd40:	00000000 70532020 20656361 20726142     ....  Space Bar 
   1fd50:	6944203d 616c7073 74532079 73757461     = Display Status
   1fd60:	646e6120 6e6f4320 6c6f7274 67657220      and Control reg
   1fd70:	00000073 20492020 6e49203d 6d657263     s...  I = Increm
   1fd80:	20746e65 7373654d 20656761 20646e61     ent Message and 
   1fd90:	6e617254 74696d73 7845202e 726f6c70     Transmit. Explor
   1fda0:	4d207265 2065646f 4f202d20 21594c4e     er Mode  - ONLY!
   1fdb0:	00000000 204d2020 6e45203d 20726574     ....  M = Enter 
   1fdc0:	74737543 4d206d6f 61737365 202e6567     Custom Message. 
   1fdd0:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   1fde0:	4c4e4f20 00002159 4e452020 3d524554      ONLY!..  ENTER=
   1fdf0:	61725420 696d736e 656e2074 6d207478      Transmit next m
   1fe00:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   1fe10:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   1fe20:	00207830 30307826 00002030 50205854     0x .&x000 ..TX P
   1fe30:	74697261 4e4f2079 003e0d0a 50205854     arity ON..>.TX P
   1fe40:	74697261 464f2079 3e0d0a46 00000000     arity OFF..>....
   1fe50:	494c4654 65532050 3e0d0a74 00000000     TFLIP Set..>....
   1fe60:	494c4654 6c432050 65726165 3e0d0a64     TFLIP Cleared..>
   1fe70:	00000000 2d434552 46522031 2050494c     ....REC-1 RFLIP 
   1fe80:	0a746553 00003e0d 2d434552 46522031     Set..>..REC-1 RF
   1fe90:	2050494c 61656c43 0a646572 00003e0d     LIP Cleared..>..
   1fea0:	2d434552 46522032 2050494c 0a746553     REC-2 RFLIP Set.
   1feb0:	00003e0d 2d434552 46522032 2050494c     .>..REC-2 RFLIP 
   1fec0:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   1fed0:	44532031 532c4e4f 61203944 5320646e     1 SDON,SD9 and S
   1fee0:	20303144 0a746553 00003e0d 2d434552     D10 Set..>..REC-
   1fef0:	44532031 532c4e4f 61203944 5320646e     1 SDON,SD9 and S
   1ff00:	20303144 61656c43 0a646572 00003e0d     D10 Cleared..>..
   1ff10:	2d434552 44532032 532c4e4f 61203944     REC-2 SDON,SD9 a
   1ff20:	5320646e 20303144 0a746553 00003e0d     nd SD10 Set..>..
   1ff30:	2d434552 44532032 532c4e4f 61203944     REC-2 SDON,SD9 a
   1ff40:	5320646e 20303144 61656c43 0a646572     nd SD10 Cleared.
   1ff50:	00003e0d 500a0d0a 73736572 61705320     .>.....Press Spa
   1ff60:	42206563 6f207261 57532072 7420342d     ce Bar or SW-4 t
   1ff70:	6572206f 656d7573 00000000 6562614c     o resume....Labe
   1ff80:	2020736c 202d2030 203a3336 00000020     ls  0 - 63:  ...
   1ff90:	00000020 614c0d0a 736c6562 34362020      .....Labels  64
   1ffa0:	3732312d 0020203a 614c0d0a 736c6562     -127:  ...Labels
   1ffb0:	38323120 3139312d 0020203a 614c0d0a      128-191:  ...La
   1ffc0:	736c6562 32393120 3535322d 0020203a     bels 192-255:  .
   1ffd0:	614c0d0a 736c6562 20302020 3336202d     ..Labels  0 - 63
   1ffe0:	0020203a 543e0d0a 20202058 74614420     :  ...>TX    Dat
   1fff0:	00003a61 6562614c 00003a6c 2d636552     a:..Label:..Rec-
   20000:	61442031 003a6174 2d314c50 61442031     1 Data:.PL1-1 Da
   20010:	003a6174 6374614d 00003a68 2d314c50     ta:.Match:..PL1-
   20020:	61442032 003a6174 2d314c50 61442033     2 Data:.PL1-3 Da
   20030:	003a6174 2d636552 61442032 003a6174     ta:.Rec-2 Data:.
   20040:	2d324c50 61442031 003a6174 2d324c50     PL2-1 Data:.PL2-
   20050:	61442032 003a6174 2d324c50 61442033     2 Data:.PL2-3 Da
   20060:	003a6174 00000d0a 78450d0a 726f6c70     ta:.......Explor
   20070:	4d207265 0a65646f 0000000d 6c200d0a     er Mode....... l
   20080:	6c656261 61542073 20656c62 45207369     abels Table is E
   20090:	6c62616e 00006465 2d0a0d0a 42202d2d     nabled.....--- B
   200a0:	6f747475 6f43206e 6e616d6d 2d207364     utton Commands -
   200b0:	00002d2d 20200d0a 63617073 72616265     --....  spacebar
   200c0:	206f7420 70736944 2079616c 74617453      to Display Stat
   200d0:	61207375 4320646e 72746e6f 52206c6f     us and Control R
   200e0:	73696765 73726574 00000000 20200d0a     egisters......  
   200f0:	44454c4f 5455422d 324e4f54 61727420     OLED-BUTTON2 tra
   20100:	696d736e 6e6f2074 656d2065 67617373     nsmit one messag
   20110:	72662065 74206d6f 736e6172 2074696d     e from transmit 
   20120:	66667562 00007265 20200d0a 6f74204c     buffer....  L to
   20130:	69725020 4c20746e 6c656261 6d654d20      Print Label Mem
   20140:	0a79726f 0000000d 72500d0a 20737365     ory.......Press 
   20150:	45544e45 6f742052 61725420 696d736e     ENTER to Transmi
   20160:	726f2074 65737520 65687420 294d2820     t or use the (M)
   20170:	6d6f6320 646e616d 206f7420 65746e65      command to ente
   20180:	20612072 74737563 6d206d6f 61737365     r a custom messa
   20190:	00006567 73657250 57532073 726f2034     ge..Press SW4 or
   201a0:	61707320 61626563 6f742072 6e6f6320      spacebar to con
   201b0:	756e6974 00000065 73657250 70732073     tinue...Press sp
   201c0:	62656361 74207261 6f63206f 6e69746e     acebar to contin
   201d0:	00006575 433e0d0a 616d6d6f 4d20646e     ue....>Command M
   201e0:	00000000 6e450d0a 20726574 79622033     ......Enter 3 by
   201f0:	20736574 414c202b 204c4542 54206f74     tes + LABEL to T
   20200:	736e6172 2074696d 6c6c6f66 6465776f     ransmit followed
   20210:	20796220 45544e45 000d0a52 6f540d0a      by ENTER.....To
   20220:	61725420 696d736e 65202c74 7265746e      Transmit, enter
   20230:	62203320 73657479 6c6f6620 65776f6c      3 bytes followe
   20240:	79622064 4c206120 6c656261 74796220     d by a Label byt
   20250:	6f662065 776f6c6c 62206465 4e452079     e followed by EN
   20260:	0a524554 0000000d 6d726f46 203a7461     TER.....Format: 
   20270:	73746942 322d3233 42202c35 32737469     Bits32-25, Bits2
   20280:	37312d34 6942202c 36317374 202c392d     4-17, Bits16-9, 
   20290:	4542414c 3a0d0a4c 00000000 6d617845     LABEL..:....Exam
   202a0:	3a656c70 20313020 34203332 37362035     ple: 01 23 45 67
   202b0:	544e4520 0d0a5245 0000003a 65725020      ENTER..:... Pre
   202c0:	52207373 52555445 0000004e 61725420     ss RETURN... Tra
   202d0:	696d736e 676e6974 002e2e2e 61725420     nsmiting.... Tra
   202e0:	696d736e 21646574 00000000 6d6d6f43     nsmited!....Comm
   202f0:	20646e61 49203a49 6572636e 746e656d     and I: Increment
   20300:	74616420 3e0d0a61 00000000               data..>....

0002030c <_ZTV15ARINC_Interface>:
   2030c:	00000314 00000304 00000000 00000000     ................
   2031c:	00012b89 00012c39 00012f09 00000000     .+..9,.../......
   2032c:	00000000 fffffcfc 00000000 000126a1     .............&..
   2033c:	00012571 fffffcec fffffcec fffffff0     q%..............
   2034c:	fffffcec 00000000 00012c0d 00012c65     .........,..e,..
   2035c:	00012f6d                                m/..

00020360 <_ZTT15ARINC_Interface>:
   20360:	0002031c 00020390 000203a8 000203c4     ................
   20370:	00020338 00020354 000203dc 000203f8     8...T...........

00020380 <_ZTC15ARINC_Interface0_18ARINC_Buffer_Class>:
   20380:	00000314 00000304 00000000 00000000     ................
	...
   203a0:	fffffcfc 00000000 000126a1 00012571     .........&..q%..
   203b0:	00000000 fffffcec fffffff0 fffffcec     ................
	...
   203cc:	00013c2f                                /<..

000203d0 <_ZTC15ARINC_Interface788_14Protocol_Class>:
   203d0:	fffffff0 00000000 00000000 00000000     ................
   203e0:	00000000 00013c2f 00000000 00000000     ..../<..........
   203f0:	00000010 00000000 000126a1 00012571     .........&..q%..

00020400 <_ZL12LabelArray_1>:
   20400:	c1215d1d 9616efdd 3f5f9f0d bd00ffdf     .]!......._?....
	...
   20420:	636e7546 6e6f6974 65786520 65747563     Function execute
   20430:	75732064 73656363 6c756673 0000796c     d successfully..
   20440:	63656843 6f79206b 77207275 6e697269     Check your wirin
   20450:	46202e67 6873616c 69686320 73692070     g. Flash chip is
   20460:	6e6f6e20 7365722d 736e6f70 2e657669      non-responsive.
   20470:	00000000 6e6f632a 75727473 726f7463     ....*constructor
   20480:	5f666f5f 696f6863 2e2a6563 69676562     _of_choice*.begi
   20490:	2029286e 20736177 20746f6e 6c6c6163     n() was not call
   204a0:	69206465 6f76206e 73206469 70757465     ed in void setup
   204b0:	00002928 62616e55 7420656c 6469206f     ()..Unable to id
   204c0:	69746e65 63207966 2e706968 65724120     entify chip. Are
   204d0:	756f7920 72757320 68742065 63207369      you sure this c
   204e0:	20706968 73207369 6f707075 64657472     hip is supported
   204f0:	0000003f 62616e55 7420656c 6469206f     ?...Unable to id
   20500:	69746e65 63207966 63617061 2e797469     entify capacity.
   20510:	20734920 73696874 69686320 666f2070      Is this chip of
   20520:	69636966 796c6c61 70757320 74726f70     ficially support
   20530:	203f6465 6e206649 202c746f 61656c70     ed? If not, plea
   20540:	64206573 6e696665 20612065 50414360     se define a `CAP
   20550:	54494341 63206059 74736e6f 20746e61     ACITY` constant 
   20560:	20646e61 6c636e69 20656475 69207469     and include it i
   20570:	6c66206e 2e687361 69676562 4143286e     n flash.begin(CA
   20580:	49434150 2e295954 00000000 70696843     PACITY).....Chip
   20590:	20736920 79737562 0000002e 656b614d      is busy....Make
   205a0:	72757320 6c612065 6970206c 6820736e      sure all pins h
   205b0:	20657661 6e656562 6e6f6320 7463656e     ave been connect
   205c0:	70206465 65706f72 00796c72 65676150     ed properly.Page
   205d0:	65766f20 6f6c6672 61682077 65622073      overflow has be
   205e0:	64206e65 62617369 2064656c 20646e61     en disabled and 
   205f0:	20656874 72646461 20737365 6c6c6163     the address call
   20600:	65206465 65656378 74207364 6d206568     ed exceeds the m
   20610:	726f6d65 00000079 62616e55 7420656c     emory...Unable t
   20620:	6e45206f 656c6261 69725720 676e6974     o Enable Writing
   20630:	206f7420 70696863 0000002e 61656c50      to chip....Plea
   20640:	6d206573 20656b61 65727573 65687420     se make sure the
   20650:	4c4f4820 20262044 54495257 4f525045      HOLD & WRITEPRO
   20660:	54434554 6e697020 72612073 75702065     TECT pins are pu
   20670:	64656c6c 20707520 56206f74 00004343     lled up to VCC..
   20680:	73696854 63657320 20726f74 65726c61     This sector alre
   20690:	20796461 746e6f63 736e6961 74616420     ady contains dat
   206a0:	00002e61 61656c50 6d206573 20656b61     a...Please make 
   206b0:	65727573 65687420 63657320 73726f74     sure the sectors
   206c0:	69656220 7720676e 74746972 74206e65      being written t
   206d0:	7261206f 72652065 64657361 0000002e     o are erased....
   206e0:	20756f59 20657261 6e6e7572 20676e69     You are running 
   206f0:	20776f6c 53206e6f 2e4d4152 656c5020     low on SRAM. Ple
   20700:	20657361 6974706f 6573696d 756f7920     ase optimise you
   20710:	72702072 6172676f 6f66206d 65622072     r program for be
   20720:	72657474 4d415220 61737520 00006567     tter RAM usage..
   20730:	73696854 6e756620 6f697463 7369206e     This function is
   20740:	746f6e20 70757320 74726f70 62206465      not supported b
   20750:	68742079 6c662065 20687361 6f6d656d     y the flash memo
   20760:	68207972 77647261 2e657261 00000000     ry hardware.....
   20770:	62616e55 7420656c 7573206f 6e657073     Unable to suspen
   20780:	65722f64 656d7573 65706f20 69746172     d/resume operati
   20790:	002e6e6f 74697257 75462065 6974636e     on..Write Functi
   207a0:	68206e6f 66207361 656c6961 72652064     on has failed er
   207b0:	63726f72 6b636568 0000002e 62616e55     rorcheck....Unab
   207c0:	7420656c 6e65206f 656c6261 622d3420     le to enable 4-b
   207d0:	20657479 72646461 69737365 002e676e     yte addressing..
   207e0:	62616e55 7420656c 6964206f 6c626173     Unable to disabl
   207f0:	2d342065 65747962 64646120 73736572     e 4-byte address
   20800:	2e676e69 00000000 20656854 70696863     ing.....The chip
   20810:	20736920 72727563 6c746e65 6f702079      is currently po
   20820:	65726577 6f642064 002e6e77 20656854     wered down..The 
   20830:	73616c46 68632068 64207069 2073656f     Flash chip does 
   20840:	20746f6e 70707573 2074726f 50444653     not support SFDP
   20850:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
   20860:	45206461 65736172 72615020 74656d61     ad Erase Paramet
   20870:	20737265 6d6f7266 69686320 52202e70     ers from chip. R
   20880:	72657665 676e6974 206f7420 7262696c     everting to libr
   20890:	20797261 61666564 73746c75 0000002e     ary defaults....
   208a0:	62616e55 7420656c 6572206f 65206461     Unable to read e
   208b0:	65736172 6d697420 66207365 206d6f72     rase times from 
   208c0:	73616c66 656d2068 79726f6d 6552202e     flash memory. Re
   208d0:	74726576 20676e69 6c206f74 61726269     verting to libra
   208e0:	64207972 75616665 2e73746c 00000000     ry defaults.....
   208f0:	62616e55 7420656c 6572206f 70206461     Unable to read p
   20900:	72676f72 74206d61 73656d69 6f726620     rogram times fro
   20910:	6c66206d 20687361 6f6d656d 202e7972     m flash memory. 
   20920:	65766552 6e697472 6f742067 62696c20     Reverting to lib
   20930:	79726172 66656420 746c7561 00002e73     rary defaults...
   20940:	43206f4e 20706968 656c6553 70207463     No Chip Select p
   20950:	64206e69 6e696665 69206465 6874206e     in defined in th
   20960:	75632065 6d6f7473 49505320 72724120     e custom SPI Arr
   20970:	002e7961 6e6b6e55 206e776f 6f727265     ay..Unknown erro
   20980:	00000072 6f727245 6f632072 203a6564     r...Error code: 
   20990:	00007830 00000030 74206649 20736968     0x..0...If this 
   209a0:	73656f64 746f6e20 6c656820 65722070     does not help re
   209b0:	766c6f73 6c632f65 66697261 68742079     solve/clarify th
   209c0:	69207369 65757373 0000202c 61656c70     is issue, ..plea
   209d0:	72206573 65736961 206e6120 75737369     se raise an issu
   209e0:	74612065 74746820 2f2f3a70 2e777777     e at http://www.
   209f0:	2d327368 69676e65 7265656e 2e676e69     hs2-engineering.
   20a00:	692f6564 7865646e 7068702e 6e6f632f     de/index.php/con
   20a10:	74636174 6d74682e 6977206c 74206874     tact.html with t
   20a20:	64206568 69617465 6f20736c 68772066     he details of wh
   20a30:	79207461 2072756f 65726577 696f6420     at your were doi
   20a40:	7720676e 206e6568 73696874 72726520     ng when this err
   20a50:	6f20726f 72756363 00646572              or occurred.

00020a5c <maxEventCount>:
   20a5c:	00800008                                         ..

00020a5e <sizeOfEventQueue>:
   20a5e:	ffff0080                                         ..

00020a60 <forever>:
   20a60:	7fffffff 492f2e2e 492f4332 4f5f4332     ....../I2C/I2C_O
   20a70:	63656a62 73694c74 70632e74 00000070     bjectList.cpp...
   20a80:	2e2f2e2e 2e2e2f2e 554c412f 6972445f     ../../../ALU_Dri
   20a90:	2f726576 5f554c41 76697244 682f7265     ver/ALU_Driver/h
   20aa0:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   20ab0:	7361625f 00682e65                       _base.h.

00020ab8 <defaultParameters>:
   20ab8:	00000082                                ....

00020abc <defaultPreferences>:
   20abc:	000000fa 00000032                       ....2...

00020ac4 <_ZTV14Calendar_Class>:
	...
   20acc:	00016251 00016341                       Qb..Ac..

00020ad4 <_ZTV17DateTimeLog_Class>:
	...
   20adc:	00013c2f 00013c2f                       /<../<..

00020ae4 <_ZTV9CDC_Class>:
	...
   20aec:	00017081 00017161 00016cdd 00017049     .p..aq...l..Ip..
   20afc:	000171f9 0001700d 00016ef1 00016f41     .q...p...n..Ao..
   20b0c:	00017069 000170c9                       ip...p..

00020b14 <_ZTV6Stream>:
	...
   20b1c:	00013c2f 0001728d 00016cdd 00016cf1     /<...r...l...l..
   20b2c:	00013c2f 00013c2f 00013c2f 2e257830     /<../<../<..0x%.
   20b3c:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   20b4c:	0066766f                                ovf.

00020b50 <_ZTV5Print>:
	...
   20b58:	00013c2f 0001728d 00016cdd 00016cf1     /<...r...l...l..
   20b68:	2a2a2a0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     .***************
   20b78:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   20b88:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   20b98:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   20ba8:	0a2a2a2a 0000000d 43544c20 33383932     ***..... LTC2983
   20bb8:	6d654420 74736e6f 69746172 50206e6f      Demonstration P
   20bc8:	72676f72 20206d61 20202020 20202020     rogram          
   20bd8:	20202020 20202020 20202020 00000d0a                 ....
   20be8:	20202020 20202020 20202020 20202020                     
   20bf8:	20202020 20202020 20202020 20202020                     
   20c08:	20202020 20202020 20202020 20202020                     
   20c18:	20202020 20202020 20202020 20202020                     
   20c28:	00000d0a 69685420 72702073 6172676f     .... This progra
   20c38:	6564206d 736e6f6d 74617274 68207365     m demonstrates h
   20c48:	7420776f 6572206f 74206461 6d206568     ow to read the m
   20c58:	69746c75 6e65732d 20726f73 20202020     ulti-sensor     
   20c68:	20202020 00000d0a 6d657420 61726570         .... tempera
   20c78:	65727574 61656d20 65727573 746e656d     ture measurement
   20c88:	73797320 2e6d6574 20202020 20202020      system.        
   20c98:	20202020 20202020 20202020 20202020                     
   20ca8:	20202020 20202020 00000d0a 74655320             .... Set
   20cb8:	65687420 75616220 61722064 74206574      the baud rate t
   20cc8:	3131206f 30303235 646e6120 6c657320     o 115200 and sel
   20cd8:	20746365 20656874 6c77656e 20656e69     ect the newline 
   20ce8:	6d726574 74616e69 202e726f 00000d0a     terminator. ....
   20cf8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   20d08:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   20d18:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   20d28:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   20d38:	0d0a2a2a 00000000 6168430a 6c656e6e     **.......Channel
   20d48:	6e6f4320 20676966 00000000 69676572      Config ....regi
   20d58:	72657473 6c617620 203a6575 00000000     ster value: ....
   20d68:	6168430a 6c656e6e 00000020 65542020     .Channel ...  Te
   20d78:	7265706d 72757461 203d2065 00000000     mperature = ....
   20d88:	69442020 74636572 43444120 61657220       Direct ADC rea
   20d98:	676e6964 206e6920 203d2056 00000000     ding in V = ....
   20da8:	6f562020 6761746c 726f2065 73657220       Voltage or res
   20db8:	61747369 2065636e 0000203d 41462020     istance = ..  FA
   20dc8:	20544c55 41544144 00203d20 202d2020     ULT DATA = .  - 
   20dd8:	534e4553 4820524f 20445241 554c4146     SENSOR HARD FALU
   20de8:	00004552 202d2020 5f434441 44524148     RE..  - ADC_HARD
   20df8:	4941465f 4552554c 00000000 202d2020     _FAILURE....  - 
   20e08:	485f4a43 5f445241 4c494146 00455255     CJ_HARD_FAILURE.
   20e18:	202d2020 535f4a43 5f54464f 4c494146       - CJ_SOFT_FAIL
   20e28:	00455255 202d2020 534e4553 415f524f     URE.  - SENSOR_A
   20e38:	45564f42 00000000 202d2020 534e4553     BOVE....  - SENS
   20e48:	425f524f 574f4c45 00000000 202d2020     OR_BELOW....  - 
   20e58:	5f434441 474e4152 52455f45 00524f52     ADC_RANGE_ERROR.
   20e68:	41564e49 2044494c 44414552 20474e49     INVALID READING 
   20e78:	21212121 00002121 464e4f43 52554749     !!!!!!..CONFIGUR
   20e88:	4f495441 5245204e 20524f52 21212121     ATION ERROR !!!!
   20e98:	00002121 682f2e2e 732f6c61 682f6372     !!..../hal/src/h
   20ea8:	695f6c61 00632e6f 00776f70 00000000     al_io.c.pow.....

00020eb8 <TWO52>:
   20eb8:	00000000 43300000 00000000 c3300000     ......0C......0.

00020ec8 <_global_impure_ptr>:
   20ec8:	200001c0                                ... 

00020ecc <__month_lengths>:
   20ecc:	0000001f 0000001c 0000001f 0000001e     ................
   20edc:	0000001f 0000001e 0000001f 0000001f     ................
   20eec:	0000001e 0000001f 0000001e 0000001f     ................
   20efc:	0000001f 0000001d 0000001f 0000001e     ................
   20f0c:	0000001f 0000001e 0000001f 0000001f     ................
   20f1c:	0000001e 0000001f 0000001e 0000001f     ................
   20f2c:	00005a54 00544d47 5b303125 392d305e     TZ..GMT.%10[^0-9
   20f3c:	5d2d2b2c 00006e25 25756825 68253a6e     ,+-]%n..%hu%n:%h
   20f4c:	3a6e2575 25756825 0000006e 7568254d     u%n:%hu%n...M%hu
   20f5c:	252e6e25 6e257568 7568252e 00006e25     %n.%hu%n.%hu%n..
   20f6c:	7568252f 253a6e25 6e257568 7568253a     /%hu%n:%hu%n:%hu
   20f7c:	00006e25 73332e25 332e2520 64332573     %n..%.3s %.3s%3d
   20f8c:	322e2520 2e253a64 253a6432 2064322e      %.2d:%.2d:%.2d 
   20f9c:	000a6425                                %d..

00020fa0 <day_name.4727>:
   20fa0:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   20fb0:	61536972 00000074                       riSat...

00020fb8 <mon_name.4728>:
   20fb8:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   20fc8:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   20fd8:	63654476 33323130 37363534 42413938     vDec0123456789AB
   20fe8:	46454443 00000000 33323130 37363534     CDEF....01234567
   20ff8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   21008:	0000296c                                l)..

0002100c <blanks.7203>:
   2100c:	20202020 20202020 20202020 20202020                     

0002101c <zeroes.7204>:
   2101c:	30303030 30303030 30303030 30303030     0000000000000000

0002102c <basefix.6796>:
   2102c:	0001000a 00030002 00050004 00070006     ................
   2103c:	00090008 000b000a 000d000c 000f000e     ................
   2104c:	00000010 00000043 49534f50 00000058     ....C...POSIX...
   2105c:	0000002e                                ....

00021060 <_ctype_>:
   21060:	20202000 20202020 28282020 20282828     .         ((((( 
   21070:	20202020 20202020 20202020 20202020                     
   21080:	10108820 10101010 10101010 10101010      ...............
   21090:	04040410 04040404 10040404 10101010     ................
   210a0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   210b0:	01010101 01010101 01010101 10101010     ................
   210c0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   210d0:	02020202 02020202 02020202 10101010     ................
   210e0:	00000020 00000000 00000000 00000000      ...............
	...

00021164 <_init>:
   21164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21166:	bf00      	nop
   21168:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2116a:	bc08      	pop	{r3}
   2116c:	469e      	mov	lr, r3
   2116e:	4770      	bx	lr

00021170 <__init_array_start>:
   21170:	0001b7f5 	.word	0x0001b7f5

00021174 <__frame_dummy_init_array_entry>:
   21174:	00000289 00000b55 00000d65 00000e09     ....U...e.......
   21184:	00001459 00001d99 00002225 00002889     Y.......%"...(..
   21194:	00002d7d 00003fa9 000132b9 00013f0d     }-...?...2...?..
   211a4:	00014365 00014ba5 00014ec9 00015571     eC...K...N..qU..
   211b4:	00015e41 0001658d 00016ca5 00017279     A^...e...l..yr..
   211c4:	00017b49 00018441 00018725              I{..A...%...

000211d0 <_fini>:
   211d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   211d2:	bf00      	nop
   211d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   211d6:	bc08      	pop	{r3}
   211d8:	469e      	mov	lr, r3
   211da:	4770      	bx	lr

000211dc <__fini_array_start>:
   211dc:	00000265 	.word	0x00000265
