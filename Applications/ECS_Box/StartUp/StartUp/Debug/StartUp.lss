
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002380c  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002380c  0002380c  0003380c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c44  20000000  00023814  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00040c44  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00040c44  2**0
                  CONTENTS
  5 .bss          00009bf0  20000c48  00024460  00040c48  2**3
                  ALLOC
  6 .stack        00010000  2000a838  0002e050  00040c48  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00040c44  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00040c72  2**0
                  CONTENTS, READONLY
  9 .debug_info   000f9970  00000000  00000000  00040ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000136dd  00000000  00000000  0013a63b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00029b4d  00000000  00000000  0014dd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004ac0  00000000  00000000  00177865  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004558  00000000  00000000  0017c325  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000661ec  00000000  00000000  0018087d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00068cf5  00000000  00000000  001e6a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014f183  00000000  00000000  0024f75e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00014cb0  00000000  00000000  0039e8e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 a8 01 20 4d 17 00 00 d1 17 00 00 d1 17 00 00     8.. M...........
      10:	d1 17 00 00 d1 17 00 00 d1 17 00 00 00 00 00 00     ................
	...
      2c:	d1 17 00 00 d1 17 00 00 00 00 00 00 d1 17 00 00     ................
      3c:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
      4c:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
      5c:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
      6c:	81 a9 00 00 55 93 00 00 d1 17 00 00 d1 17 00 00     ....U...........
      7c:	d1 17 00 00 65 93 00 00 75 93 00 00 85 93 00 00     ....e...u.......
      8c:	95 93 00 00 a5 93 00 00 b5 93 00 00 d1 17 00 00     ................
      9c:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
      ac:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
      bc:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
      cc:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
      dc:	d1 17 00 00 d1 17 00 00 d1 17 00 00 00 00 00 00     ................
	...
      f4:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     104:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     114:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     124:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     134:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     144:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     154:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     164:	d1 17 00 00 f9 bf 00 00 15 c0 00 00 31 c0 00 00     ............1...
     174:	4d c0 00 00 d1 17 00 00 69 85 00 00 41 00 01 00     M.......i...A...
     184:	51 00 01 00 61 00 01 00 71 00 01 00 d1 17 00 00     Q...a...q.......
     194:	5d ca 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ]...............
     1a4:	d1 17 00 00 d1 17 00 00 d1 17 00 00 79 ca 00 00     ............y...
     1b4:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     1c4:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     1d4:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     1e4:	d1 17 00 00 d1 17 00 00 3d d7 00 00 59 d7 00 00     ........=...Y...
     1f4:	75 d7 00 00 d1 17 00 00 91 d7 00 00 ad d7 00 00     u...............
     204:	c9 d7 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     214:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     224:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     234:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     244:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................
     254:	d1 17 00 00 d1 17 00 00 d1 17 00 00 d1 17 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000c48 	.word	0x20000c48
     280:	00000000 	.word	0x00000000
     284:	00023814 	.word	0x00023814

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00023814 	.word	0x00023814
     2c4:	20000c4c 	.word	0x20000c4c
     2c8:	00023814 	.word	0x00023814
     2cc:	00000000 	.word	0x00000000

000002d0 <wdt_set_timeout_period>:
 * \retval -1 Always on or enabled, can't set again.
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	60f8      	str	r0, [r7, #12]
     2d8:	60b9      	str	r1, [r7, #8]
     2da:	4613      	mov	r3, r2
     2dc:	80fb      	strh	r3, [r7, #6]
	ASSERT(wdt && wdt->dev.hw);
     2de:	68fb      	ldr	r3, [r7, #12]
     2e0:	2b00      	cmp	r3, #0
     2e2:	d005      	beq.n	2f0 <wdt_set_timeout_period+0x20>
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	681b      	ldr	r3, [r3, #0]
     2e8:	2b00      	cmp	r3, #0
     2ea:	d001      	beq.n	2f0 <wdt_set_timeout_period+0x20>
     2ec:	2301      	movs	r3, #1
     2ee:	e000      	b.n	2f2 <wdt_set_timeout_period+0x22>
     2f0:	2300      	movs	r3, #0
     2f2:	226f      	movs	r2, #111	; 0x6f
     2f4:	4907      	ldr	r1, [pc, #28]	; (314 <wdt_set_timeout_period+0x44>)
     2f6:	4618      	mov	r0, r3
     2f8:	4b07      	ldr	r3, [pc, #28]	; (318 <wdt_set_timeout_period+0x48>)
     2fa:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
     2fc:	68fb      	ldr	r3, [r7, #12]
     2fe:	88fa      	ldrh	r2, [r7, #6]
     300:	68b9      	ldr	r1, [r7, #8]
     302:	4618      	mov	r0, r3
     304:	4b05      	ldr	r3, [pc, #20]	; (31c <wdt_set_timeout_period+0x4c>)
     306:	4798      	blx	r3
     308:	4603      	mov	r3, r0
}
     30a:	4618      	mov	r0, r3
     30c:	3710      	adds	r7, #16
     30e:	46bd      	mov	sp, r7
     310:	bd80      	pop	{r7, pc}
     312:	bf00      	nop
     314:	00020fd0 	.word	0x00020fd0
     318:	00007e21 	.word	0x00007e21
     31c:	0001025d 	.word	0x0001025d

00000320 <wdt_enable>:
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
     320:	b580      	push	{r7, lr}
     322:	b082      	sub	sp, #8
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
	ASSERT(wdt && wdt->dev.hw);
     328:	687b      	ldr	r3, [r7, #4]
     32a:	2b00      	cmp	r3, #0
     32c:	d005      	beq.n	33a <wdt_enable+0x1a>
     32e:	687b      	ldr	r3, [r7, #4]
     330:	681b      	ldr	r3, [r3, #0]
     332:	2b00      	cmp	r3, #0
     334:	d001      	beq.n	33a <wdt_enable+0x1a>
     336:	2301      	movs	r3, #1
     338:	e000      	b.n	33c <wdt_enable+0x1c>
     33a:	2300      	movs	r3, #0
     33c:	228c      	movs	r2, #140	; 0x8c
     33e:	4906      	ldr	r1, [pc, #24]	; (358 <wdt_enable+0x38>)
     340:	4618      	mov	r0, r3
     342:	4b06      	ldr	r3, [pc, #24]	; (35c <wdt_enable+0x3c>)
     344:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
     346:	687b      	ldr	r3, [r7, #4]
     348:	4618      	mov	r0, r3
     34a:	4b05      	ldr	r3, [pc, #20]	; (360 <wdt_enable+0x40>)
     34c:	4798      	blx	r3
     34e:	4603      	mov	r3, r0
}
     350:	4618      	mov	r0, r3
     352:	3708      	adds	r7, #8
     354:	46bd      	mov	sp, r7
     356:	bd80      	pop	{r7, pc}
     358:	00020fd0 	.word	0x00020fd0
     35c:	00007e21 	.word	0x00007e21
     360:	000103ed 	.word	0x000103ed

00000364 <wdt_feed>:
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
	ASSERT(wdt && wdt->dev.hw);
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	2b00      	cmp	r3, #0
     370:	d005      	beq.n	37e <wdt_feed+0x1a>
     372:	687b      	ldr	r3, [r7, #4]
     374:	681b      	ldr	r3, [r3, #0]
     376:	2b00      	cmp	r3, #0
     378:	d001      	beq.n	37e <wdt_feed+0x1a>
     37a:	2301      	movs	r3, #1
     37c:	e000      	b.n	380 <wdt_feed+0x1c>
     37e:	2300      	movs	r3, #0
     380:	22a9      	movs	r2, #169	; 0xa9
     382:	4906      	ldr	r1, [pc, #24]	; (39c <wdt_feed+0x38>)
     384:	4618      	mov	r0, r3
     386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <wdt_feed+0x3c>)
     388:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	4618      	mov	r0, r3
     38e:	4b05      	ldr	r3, [pc, #20]	; (3a4 <wdt_feed+0x40>)
     390:	4798      	blx	r3
     392:	4603      	mov	r3, r0
}
     394:	4618      	mov	r0, r3
     396:	3708      	adds	r7, #8
     398:	46bd      	mov	sp, r7
     39a:	bd80      	pop	{r7, pc}
     39c:	00020fd0 	.word	0x00020fd0
     3a0:	00007e21 	.word	0x00007e21
     3a4:	00010439 	.word	0x00010439

000003a8 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
	{
	data = v;
     3b2:	687b      	ldr	r3, [r7, #4]
     3b4:	683a      	ldr	r2, [r7, #0]
     3b6:	601a      	str	r2, [r3, #0]
	}
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	4618      	mov	r0, r3
     3bc:	370c      	adds	r7, #12
     3be:	46bd      	mov	sp, r7
     3c0:	bc80      	pop	{r7}
     3c2:	4770      	bx	lr

000003c4 <_ZN5eventC1Ev>:
	private:
		
		
	};

inline event::event()
     3c4:	b580      	push	{r7, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	af00      	add	r7, sp, #0
     3ca:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3d2:	801a      	strh	r2, [r3, #0]
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3da:	805a      	strh	r2, [r3, #2]
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	2200      	movs	r2, #0
     3e0:	605a      	str	r2, [r3, #4]
     3e2:	687b      	ldr	r3, [r7, #4]
     3e4:	3308      	adds	r3, #8
     3e6:	2100      	movs	r1, #0
     3e8:	4618      	mov	r0, r3
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <_ZN5eventC1Ev+0x3c>)
     3ec:	4798      	blx	r3
     3ee:	687b      	ldr	r3, [r7, #4]
     3f0:	2200      	movs	r2, #0
     3f2:	60da      	str	r2, [r3, #12]
	{
		
	}
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	4618      	mov	r0, r3
     3f8:	3708      	adds	r7, #8
     3fa:	46bd      	mov	sp, r7
     3fc:	bd80      	pop	{r7, pc}
     3fe:	bf00      	nop
     400:	000003a9 	.word	0x000003a9

00000404 <_ZL11ARINCTimeUpPK10timer_task>:
ALU_Class	*ptrALUClass;

//static TaskHandler_Class*	taskList(NULL);

static void CheckPeriodicTask(void);
static void ARINCTimeUp(const struct timer_task *const timer_task){
     404:	b480      	push	{r7}
     406:	b083      	sub	sp, #12
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
	ptrALUClass->arincTXTimeUP=true;
     40c:	4b04      	ldr	r3, [pc, #16]	; (420 <_ZL11ARINCTimeUpPK10timer_task+0x1c>)
     40e:	681b      	ldr	r3, [r3, #0]
     410:	2201      	movs	r2, #1
     412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
     416:	bf00      	nop
     418:	370c      	adds	r7, #12
     41a:	46bd      	mov	sp, r7
     41c:	bc80      	pop	{r7}
     41e:	4770      	bx	lr
     420:	20000c7c 	.word	0x20000c7c

00000424 <_ZN9ALU_ClassC1Ev>:


// default constructor
ALU_Class::ALU_Class()
     424:	b580      	push	{r7, lr}
     426:	b082      	sub	sp, #8
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
     42c:	687b      	ldr	r3, [r7, #4]
     42e:	4618      	mov	r0, r3
     430:	4b09      	ldr	r3, [pc, #36]	; (458 <_ZN9ALU_ClassC1Ev+0x34>)
     432:	4798      	blx	r3
{
	
	//taskList=(list_descriptor*)taskStorage;
	ptrALUClass=this;
     434:	4a09      	ldr	r2, [pc, #36]	; (45c <_ZN9ALU_ClassC1Ev+0x38>)
     436:	687b      	ldr	r3, [r7, #4]
     438:	6013      	str	r3, [r2, #0]
	clk_rate       = 1000;
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     440:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	timeout_period = 4096*1024;
     444:	687b      	ldr	r3, [r7, #4]
     446:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     44a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
} //ALU_Class
     44e:	687b      	ldr	r3, [r7, #4]
     450:	4618      	mov	r0, r3
     452:	3708      	adds	r7, #8
     454:	46bd      	mov	sp, r7
     456:	bd80      	pop	{r7, pc}
     458:	000043c9 	.word	0x000043c9
     45c:	20000c7c 	.word	0x20000c7c

00000460 <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
     468:	687b      	ldr	r3, [r7, #4]
     46a:	4618      	mov	r0, r3
     46c:	4b03      	ldr	r3, [pc, #12]	; (47c <_ZN9ALU_ClassD1Ev+0x1c>)
     46e:	4798      	blx	r3
{
} //~ALU_Class
     470:	687b      	ldr	r3, [r7, #4]
     472:	4618      	mov	r0, r3
     474:	3708      	adds	r7, #8
     476:	46bd      	mov	sp, r7
     478:	bd80      	pop	{r7, pc}
     47a:	bf00      	nop
     47c:	000043e9 	.word	0x000043e9

00000480 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     480:	b580      	push	{r7, lr}
     482:	b08a      	sub	sp, #40	; 0x28
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
	uint32_t	s;
	event	e;
     488:	f107 030c 	add.w	r3, r7, #12
     48c:	4618      	mov	r0, r3
     48e:	4b39      	ldr	r3, [pc, #228]	; (574 <_ZN9ALU_Class4InitEv+0xf4>)
     490:	4798      	blx	r3
	ptrPbit=&pBit;
     492:	687b      	ldr	r3, [r7, #4]
     494:	4a38      	ldr	r2, [pc, #224]	; (578 <_ZN9ALU_Class4InitEv+0xf8>)
     496:	621a      	str	r2, [r3, #32]
	StartLivePulse();
     498:	6878      	ldr	r0, [r7, #4]
     49a:	4b38      	ldr	r3, [pc, #224]	; (57c <_ZN9ALU_Class4InitEv+0xfc>)
     49c:	4798      	blx	r3
		
	if (hvac.Init())
     49e:	4838      	ldr	r0, [pc, #224]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4a0:	4b38      	ldr	r3, [pc, #224]	; (584 <_ZN9ALU_Class4InitEv+0x104>)
     4a2:	4798      	blx	r3
     4a4:	4603      	mov	r3, r0
     4a6:	2b00      	cmp	r3, #0
     4a8:	d05f      	beq.n	56a <_ZN9ALU_Class4InitEv+0xea>
	{
		cBit.isOK=true;
     4aa:	4b37      	ldr	r3, [pc, #220]	; (588 <_ZN9ALU_Class4InitEv+0x108>)
     4ac:	2201      	movs	r2, #1
     4ae:	701a      	strb	r2, [r3, #0]
		hvac.SetCRCConfigData();
     4b0:	4833      	ldr	r0, [pc, #204]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4b2:	4b36      	ldr	r3, [pc, #216]	; (58c <_ZN9ALU_Class4InitEv+0x10c>)
     4b4:	4798      	blx	r3
		SetInitialConfiguration(configuration);
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	332c      	adds	r3, #44	; 0x2c
     4ba:	4619      	mov	r1, r3
     4bc:	6878      	ldr	r0, [r7, #4]
     4be:	4b34      	ldr	r3, [pc, #208]	; (590 <_ZN9ALU_Class4InitEv+0x110>)
     4c0:	4798      	blx	r3
		memory.WriteDefaultState();
     4c2:	4834      	ldr	r0, [pc, #208]	; (594 <_ZN9ALU_Class4InitEv+0x114>)
     4c4:	4b34      	ldr	r3, [pc, #208]	; (598 <_ZN9ALU_Class4InitEv+0x118>)
     4c6:	4798      	blx	r3
		hvac.SetInitialState();
     4c8:	4834      	ldr	r0, [pc, #208]	; (59c <_ZN9ALU_Class4InitEv+0x11c>)
     4ca:	4b35      	ldr	r3, [pc, #212]	; (5a0 <_ZN9ALU_Class4InitEv+0x120>)
     4cc:	4798      	blx	r3
		uhr.Init();
     4ce:	4835      	ldr	r0, [pc, #212]	; (5a4 <_ZN9ALU_Class4InitEv+0x124>)
     4d0:	4b35      	ldr	r3, [pc, #212]	; (5a8 <_ZN9ALU_Class4InitEv+0x128>)
     4d2:	4798      	blx	r3
		hvac.saveCurrentState();
     4d4:	482a      	ldr	r0, [pc, #168]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4d6:	4b35      	ldr	r3, [pc, #212]	; (5ac <_ZN9ALU_Class4InitEv+0x12c>)
     4d8:	4798      	blx	r3
		listener.Init();
     4da:	4835      	ldr	r0, [pc, #212]	; (5b0 <_ZN9ALU_Class4InitEv+0x130>)
     4dc:	4b35      	ldr	r3, [pc, #212]	; (5b4 <_ZN9ALU_Class4InitEv+0x134>)
     4de:	4798      	blx	r3
		
		if (!(interfaces.Init()))
     4e0:	4835      	ldr	r0, [pc, #212]	; (5b8 <_ZN9ALU_Class4InitEv+0x138>)
     4e2:	4b36      	ldr	r3, [pc, #216]	; (5bc <_ZN9ALU_Class4InitEv+0x13c>)
     4e4:	4798      	blx	r3
     4e6:	4603      	mov	r3, r0
     4e8:	f083 0301 	eor.w	r3, r3, #1
     4ec:	b2db      	uxtb	r3, r3
     4ee:	2b00      	cmp	r3, #0
     4f0:	d00e      	beq.n	510 <_ZN9ALU_Class4InitEv+0x90>
		{
			NotifyError(kARINCINnterfaceError,s);
     4f2:	f107 031c 	add.w	r3, r7, #28
     4f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
     4f8:	4618      	mov	r0, r3
     4fa:	4b31      	ldr	r3, [pc, #196]	; (5c0 <_ZN9ALU_Class4InitEv+0x140>)
     4fc:	4798      	blx	r3
     4fe:	f107 031c 	add.w	r3, r7, #28
     502:	461a      	mov	r2, r3
     504:	2100      	movs	r1, #0
     506:	6878      	ldr	r0, [r7, #4]
     508:	4b2e      	ldr	r3, [pc, #184]	; (5c4 <_ZN9ALU_Class4InitEv+0x144>)
     50a:	4798      	blx	r3
			return s;
     50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     50e:	e02d      	b.n	56c <_ZN9ALU_Class4InitEv+0xec>
		}
		else
		{
			arincTimer.Start_periodic_task(FUNC_PTR(ARINCTimeUp),500);
     510:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     514:	492c      	ldr	r1, [pc, #176]	; (5c8 <_ZN9ALU_Class4InitEv+0x148>)
     516:	482d      	ldr	r0, [pc, #180]	; (5cc <_ZN9ALU_Class4InitEv+0x14c>)
     518:	4b2d      	ldr	r3, [pc, #180]	; (5d0 <_ZN9ALU_Class4InitEv+0x150>)
     51a:	4798      	blx	r3
			
			s=pBit.CheckCurrentStatus(status);
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
     522:	4619      	mov	r1, r3
     524:	4814      	ldr	r0, [pc, #80]	; (578 <_ZN9ALU_Class4InitEv+0xf8>)
     526:	4b2b      	ldr	r3, [pc, #172]	; (5d4 <_ZN9ALU_Class4InitEv+0x154>)
     528:	4798      	blx	r3
     52a:	6278      	str	r0, [r7, #36]	; 0x24
			if (s>0)
     52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     52e:	2b00      	cmp	r3, #0
     530:	d00e      	beq.n	550 <_ZN9ALU_Class4InitEv+0xd0>
			{
				NotifyError(kpBITError,s);
     532:	f107 0320 	add.w	r3, r7, #32
     536:	6a79      	ldr	r1, [r7, #36]	; 0x24
     538:	4618      	mov	r0, r3
     53a:	4b21      	ldr	r3, [pc, #132]	; (5c0 <_ZN9ALU_Class4InitEv+0x140>)
     53c:	4798      	blx	r3
     53e:	f107 0320 	add.w	r3, r7, #32
     542:	461a      	mov	r2, r3
     544:	2101      	movs	r1, #1
     546:	6878      	ldr	r0, [r7, #4]
     548:	4b1e      	ldr	r3, [pc, #120]	; (5c4 <_ZN9ALU_Class4InitEv+0x144>)
     54a:	4798      	blx	r3
				return s;
     54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     54e:	e00d      	b.n	56c <_ZN9ALU_Class4InitEv+0xec>
			}
			else
			{
				InitTaskArray();
     550:	687b      	ldr	r3, [r7, #4]
     552:	4618      	mov	r0, r3
     554:	4b20      	ldr	r3, [pc, #128]	; (5d8 <_ZN9ALU_Class4InitEv+0x158>)
     556:	4798      	blx	r3
				EnableWatchDog();
     558:	6878      	ldr	r0, [r7, #4]
     55a:	4b20      	ldr	r3, [pc, #128]	; (5dc <_ZN9ALU_Class4InitEv+0x15c>)
     55c:	4798      	blx	r3
				PrepareNewEvent(kALUEventSimpleStart);
     55e:	2200      	movs	r2, #0
     560:	f44f 7182 	mov.w	r1, #260	; 0x104
     564:	6878      	ldr	r0, [r7, #4]
     566:	4b1e      	ldr	r3, [pc, #120]	; (5e0 <_ZN9ALU_Class4InitEv+0x160>)
     568:	4798      	blx	r3
	//while(1);

	

	  
	return s;
     56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     56c:	4618      	mov	r0, r3
     56e:	3728      	adds	r7, #40	; 0x28
     570:	46bd      	mov	sp, r7
     572:	bd80      	pop	{r7, pc}
     574:	000003c5 	.word	0x000003c5
     578:	20000c64 	.word	0x20000c64
     57c:	0000082d 	.word	0x0000082d
     580:	20008034 	.word	0x20008034
     584:	00002e95 	.word	0x00002e95
     588:	20000c78 	.word	0x20000c78
     58c:	00004045 	.word	0x00004045
     590:	00000879 	.word	0x00000879
     594:	20002be4 	.word	0x20002be4
     598:	00002929 	.word	0x00002929
     59c:	2000824c 	.word	0x2000824c
     5a0:	00001121 	.word	0x00001121
     5a4:	200013f0 	.word	0x200013f0
     5a8:	000016a5 	.word	0x000016a5
     5ac:	00003eb9 	.word	0x00003eb9
     5b0:	20009850 	.word	0x20009850
     5b4:	000149b1 	.word	0x000149b1
     5b8:	200014cc 	.word	0x200014cc
     5bc:	00001b59 	.word	0x00001b59
     5c0:	000003a9 	.word	0x000003a9
     5c4:	000009d1 	.word	0x000009d1
     5c8:	00000405 	.word	0x00000405
     5cc:	2000a120 	.word	0x2000a120
     5d0:	00017769 	.word	0x00017769
     5d4:	00002b01 	.word	0x00002b01
     5d8:	000043fd 	.word	0x000043fd
     5dc:	000007d1 	.word	0x000007d1
     5e0:	00000a39 	.word	0x00000a39

000005e4 <_ZN9ALU_Class13RunControllerEv>:

uint32_t	ALU_Class::RunController(void){
     5e4:	b590      	push	{r4, r7, lr}
     5e6:	b089      	sub	sp, #36	; 0x24
     5e8:	af02      	add	r7, sp, #8
     5ea:	6078      	str	r0, [r7, #4]
	event e;
     5ec:	f107 0308 	add.w	r3, r7, #8
     5f0:	4618      	mov	r0, r3
     5f2:	4b22      	ldr	r3, [pc, #136]	; (67c <_ZN9ALU_Class13RunControllerEv+0x98>)
     5f4:	4798      	blx	r3
	
	
	   while (pBit)
     5f6:	4822      	ldr	r0, [pc, #136]	; (680 <_ZN9ALU_Class13RunControllerEv+0x9c>)
     5f8:	4b22      	ldr	r3, [pc, #136]	; (684 <_ZN9ALU_Class13RunControllerEv+0xa0>)
     5fa:	4798      	blx	r3
     5fc:	4603      	mov	r3, r0
     5fe:	2b00      	cmp	r3, #0
     600:	d036      	beq.n	670 <_ZN9ALU_Class13RunControllerEv+0x8c>
	   {
		   listener.eventHandler=&ALU_Class::CheckPeriodicTask;
     602:	4b21      	ldr	r3, [pc, #132]	; (688 <_ZN9ALU_Class13RunControllerEv+0xa4>)
     604:	4a21      	ldr	r2, [pc, #132]	; (68c <_ZN9ALU_Class13RunControllerEv+0xa8>)
     606:	615a      	str	r2, [r3, #20]
		   while (!arincTXTimeUP)
     608:	687b      	ldr	r3, [r7, #4]
     60a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
     60e:	b2db      	uxtb	r3, r3
     610:	f083 0301 	eor.w	r3, r3, #1
     614:	b2db      	uxtb	r3, r3
     616:	2b00      	cmp	r3, #0
     618:	d022      	beq.n	660 <_ZN9ALU_Class13RunControllerEv+0x7c>
		   	{
				   if (listener.WaitForEvent(e, kALUEventClass, kALUControllerEvent,8))
     61a:	f107 0108 	add.w	r1, r7, #8
     61e:	2308      	movs	r3, #8
     620:	9300      	str	r3, [sp, #0]
     622:	2302      	movs	r3, #2
     624:	f44f 7240 	mov.w	r2, #768	; 0x300
     628:	4817      	ldr	r0, [pc, #92]	; (688 <_ZN9ALU_Class13RunControllerEv+0xa4>)
     62a:	4c19      	ldr	r4, [pc, #100]	; (690 <_ZN9ALU_Class13RunControllerEv+0xac>)
     62c:	47a0      	blx	r4
     62e:	4603      	mov	r3, r0
     630:	2b00      	cmp	r3, #0
     632:	d006      	beq.n	642 <_ZN9ALU_Class13RunControllerEv+0x5e>
				   {
					   HandleControllerEvent(e);
     634:	f107 0308 	add.w	r3, r7, #8
     638:	4619      	mov	r1, r3
     63a:	6878      	ldr	r0, [r7, #4]
     63c:	4b15      	ldr	r3, [pc, #84]	; (694 <_ZN9ALU_Class13RunControllerEv+0xb0>)
     63e:	4798      	blx	r3
     640:	e7e2      	b.n	608 <_ZN9ALU_Class13RunControllerEv+0x24>
					   
				   }else if (listener.WaitForEvent(e, kHVACEventClass, kHVACEventDoPendingTasks,8))
     642:	f107 0108 	add.w	r1, r7, #8
     646:	2308      	movs	r3, #8
     648:	9300      	str	r3, [sp, #0]
     64a:	2303      	movs	r3, #3
     64c:	f44f 7200 	mov.w	r2, #512	; 0x200
     650:	480d      	ldr	r0, [pc, #52]	; (688 <_ZN9ALU_Class13RunControllerEv+0xa4>)
     652:	4c0f      	ldr	r4, [pc, #60]	; (690 <_ZN9ALU_Class13RunControllerEv+0xac>)
     654:	47a0      	blx	r4
     656:	4603      	mov	r3, r0
     658:	2b00      	cmp	r3, #0
     65a:	d100      	bne.n	65e <_ZN9ALU_Class13RunControllerEv+0x7a>
		   while (!arincTXTimeUP)
     65c:	e7d4      	b.n	608 <_ZN9ALU_Class13RunControllerEv+0x24>
				   {
					break;
     65e:	bf00      	nop
				   }
			 }
			//arinc.TrasmitSingleLabel();
			ExecutePendingTask();
     660:	6878      	ldr	r0, [r7, #4]
     662:	4b0d      	ldr	r3, [pc, #52]	; (698 <_ZN9ALU_Class13RunControllerEv+0xb4>)
     664:	4798      	blx	r3
			arincTXTimeUP=false;
     666:	687b      	ldr	r3, [r7, #4]
     668:	2200      	movs	r2, #0
     66a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	   while (pBit)
     66e:	e7c2      	b.n	5f6 <_ZN9ALU_Class13RunControllerEv+0x12>
// 			
// 		}
// 		interfaces.CheckCommunication();
// 	}
	
}
     670:	bf00      	nop
     672:	4618      	mov	r0, r3
     674:	371c      	adds	r7, #28
     676:	46bd      	mov	sp, r7
     678:	bd90      	pop	{r4, r7, pc}
     67a:	bf00      	nop
     67c:	000003c5 	.word	0x000003c5
     680:	20000c64 	.word	0x20000c64
     684:	00002ae7 	.word	0x00002ae7
     688:	20009850 	.word	0x20009850
     68c:	00000c25 	.word	0x00000c25
     690:	00014a91 	.word	0x00014a91
     694:	0000069d 	.word	0x0000069d
     698:	00000a85 	.word	0x00000a85

0000069c <_ZN9ALU_Class21HandleControllerEventER5event>:



void ALU_Class::HandleControllerEvent(event& e)
{
     69c:	b580      	push	{r7, lr}
     69e:	b086      	sub	sp, #24
     6a0:	af00      	add	r7, sp, #0
     6a2:	6078      	str	r0, [r7, #4]
     6a4:	6039      	str	r1, [r7, #0]

	alu.callingTask = alu.currentTask;
     6a6:	4b28      	ldr	r3, [pc, #160]	; (748 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6a8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
     6ac:	4a26      	ldr	r2, [pc, #152]	; (748 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6ae:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	alu.currentTask = e.data.wordData[0];
     6b2:	683b      	ldr	r3, [r7, #0]
     6b4:	891b      	ldrh	r3, [r3, #8]
     6b6:	461a      	mov	r2, r3
     6b8:	4b23      	ldr	r3, [pc, #140]	; (748 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6ba:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	alu.taskEntryTime= hvacTimer.Get_ticks();
     6be:	4823      	ldr	r0, [pc, #140]	; (74c <_ZN9ALU_Class21HandleControllerEventER5event+0xb0>)
     6c0:	4b23      	ldr	r3, [pc, #140]	; (750 <_ZN9ALU_Class21HandleControllerEventER5event+0xb4>)
     6c2:	4798      	blx	r3
     6c4:	4602      	mov	r2, r0
     6c6:	4b20      	ldr	r3, [pc, #128]	; (748 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6c8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154




	switch (alu.currentTask)
     6cc:	4b1e      	ldr	r3, [pc, #120]	; (748 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6ce:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
     6d2:	f240 1205 	movw	r2, #261	; 0x105
     6d6:	4293      	cmp	r3, r2
     6d8:	d026      	beq.n	728 <_ZN9ALU_Class21HandleControllerEventER5event+0x8c>
     6da:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     6de:	d205      	bcs.n	6ec <_ZN9ALU_Class21HandleControllerEventER5event+0x50>
     6e0:	2b03      	cmp	r3, #3
     6e2:	d01a      	beq.n	71a <_ZN9ALU_Class21HandleControllerEventER5event+0x7e>
     6e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
     6e8:	d008      	beq.n	6fc <_ZN9ALU_Class21HandleControllerEventER5event+0x60>
     6ea:	e024      	b.n	736 <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
     6ec:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     6f0:	d00e      	beq.n	710 <_ZN9ALU_Class21HandleControllerEventER5event+0x74>
     6f2:	f240 1207 	movw	r2, #263	; 0x107
     6f6:	4293      	cmp	r3, r2
     6f8:	d005      	beq.n	706 <_ZN9ALU_Class21HandleControllerEventER5event+0x6a>
     6fa:	e01c      	b.n	736 <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
	{
		case kALUEventSimpleStart:
			hvac.Start(1);
     6fc:	2101      	movs	r1, #1
     6fe:	4815      	ldr	r0, [pc, #84]	; (754 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     700:	4b15      	ldr	r3, [pc, #84]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xbc>)
     702:	4798      	blx	r3
		break;
     704:	e01c      	b.n	740 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleResume:
			hvac.ControllerResume(1);
     706:	2101      	movs	r1, #1
     708:	4812      	ldr	r0, [pc, #72]	; (754 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     70a:	4b14      	ldr	r3, [pc, #80]	; (75c <_ZN9ALU_Class21HandleControllerEventER5event+0xc0>)
     70c:	4798      	blx	r3
		break;
     70e:	e017      	b.n	740 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleStop:
			hvac.Stop(0);
     710:	2100      	movs	r1, #0
     712:	4810      	ldr	r0, [pc, #64]	; (754 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     714:	4b12      	ldr	r3, [pc, #72]	; (760 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     716:	4798      	blx	r3
		break;
     718:	e012      	b.n	740 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     71a:	f107 0308 	add.w	r3, r7, #8
     71e:	4911      	ldr	r1, [pc, #68]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     720:	4618      	mov	r0, r3
     722:	4b11      	ldr	r3, [pc, #68]	; (768 <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     724:	4798      	blx	r3
		break;
     726:	e00b      	b.n	740 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUEventCheckPheripherals:
			interfaces.CheckCommunication();
     728:	f107 0310 	add.w	r3, r7, #16
     72c:	490d      	ldr	r1, [pc, #52]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     72e:	4618      	mov	r0, r3
     730:	4b0d      	ldr	r3, [pc, #52]	; (768 <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     732:	4798      	blx	r3
		break;
     734:	e004      	b.n	740 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		default:
			hvac.Stop(0);
     736:	2100      	movs	r1, #0
     738:	4806      	ldr	r0, [pc, #24]	; (754 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     73a:	4b09      	ldr	r3, [pc, #36]	; (760 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     73c:	4798      	blx	r3
		break;
     73e:	bf00      	nop
	}
}
     740:	bf00      	nop
     742:	3718      	adds	r7, #24
     744:	46bd      	mov	sp, r7
     746:	bd80      	pop	{r7, pc}
     748:	20000c80 	.word	0x20000c80
     74c:	2000a0e8 	.word	0x2000a0e8
     750:	00017835 	.word	0x00017835
     754:	20008034 	.word	0x20008034
     758:	000030a1 	.word	0x000030a1
     75c:	00002f1d 	.word	0x00002f1d
     760:	00003f49 	.word	0x00003f49
     764:	200014cc 	.word	0x200014cc
     768:	00001be1 	.word	0x00001be1

0000076c <_ZN9ALU_Class15GetSelectedAMMCEv>:

uint8_t	ALU_Class::GetSelectedAMMC(void){
     76c:	b580      	push	{r7, lr}
     76e:	b082      	sub	sp, #8
     770:	af00      	add	r7, sp, #0
     772:	6078      	str	r0, [r7, #4]
	activeLine=arinc.GetActiveLine();
     774:	4811      	ldr	r0, [pc, #68]	; (7bc <_ZN9ALU_Class15GetSelectedAMMCEv+0x50>)
     776:	4b12      	ldr	r3, [pc, #72]	; (7c0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>)
     778:	4798      	blx	r3
     77a:	4603      	mov	r3, r0
     77c:	461a      	mov	r2, r3
     77e:	687b      	ldr	r3, [r7, #4]
     780:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
		switch (activeLine)
     784:	687b      	ldr	r3, [r7, #4]
     786:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
     78a:	2b01      	cmp	r3, #1
     78c:	d002      	beq.n	794 <_ZN9ALU_Class15GetSelectedAMMCEv+0x28>
     78e:	2b02      	cmp	r3, #2
     790:	d004      	beq.n	79c <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>
     792:	e007      	b.n	7a4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>
		{
			case 1:
			ammc=&ammc1;
     794:	4b0b      	ldr	r3, [pc, #44]	; (7c4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     796:	4a0c      	ldr	r2, [pc, #48]	; (7c8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     798:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     79a:	e007      	b.n	7ac <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			
			case 2:
			ammc=&ammc2;
     79c:	4b09      	ldr	r3, [pc, #36]	; (7c4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     79e:	4a0b      	ldr	r2, [pc, #44]	; (7cc <_ZN9ALU_Class15GetSelectedAMMCEv+0x60>)
     7a0:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     7a2:	e003      	b.n	7ac <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			default:
			ammc=&ammc1;
     7a4:	4b07      	ldr	r3, [pc, #28]	; (7c4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     7a6:	4a08      	ldr	r2, [pc, #32]	; (7c8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     7a8:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     7aa:	bf00      	nop
		}
	return activeLine;	
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
}
     7b2:	4618      	mov	r0, r3
     7b4:	3708      	adds	r7, #8
     7b6:	46bd      	mov	sp, r7
     7b8:	bd80      	pop	{r7, pc}
     7ba:	bf00      	nop
     7bc:	20008ff4 	.word	0x20008ff4
     7c0:	0001431f 	.word	0x0001431f
     7c4:	200013e4 	.word	0x200013e4
     7c8:	20000e04 	.word	0x20000e04
     7cc:	200010f4 	.word	0x200010f4

000007d0 <_ZN9ALU_Class14EnableWatchDogEv>:
	else
	{
	}
	return line;
}
int32_t	ALU_Class::EnableWatchDog(void){
     7d0:	b580      	push	{r7, lr}
     7d2:	b082      	sub	sp, #8
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]

	wdt_set_timeout_period(&WATCHDOG, clk_rate, timeout_period);
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
     7de:	687b      	ldr	r3, [r7, #4]
     7e0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
     7e4:	b29b      	uxth	r3, r3
     7e6:	461a      	mov	r2, r3
     7e8:	4805      	ldr	r0, [pc, #20]	; (800 <_ZN9ALU_Class14EnableWatchDogEv+0x30>)
     7ea:	4b06      	ldr	r3, [pc, #24]	; (804 <_ZN9ALU_Class14EnableWatchDogEv+0x34>)
     7ec:	4798      	blx	r3
	return wdt_enable(&WATCHDOG);
     7ee:	4804      	ldr	r0, [pc, #16]	; (800 <_ZN9ALU_Class14EnableWatchDogEv+0x30>)
     7f0:	4b05      	ldr	r3, [pc, #20]	; (808 <_ZN9ALU_Class14EnableWatchDogEv+0x38>)
     7f2:	4798      	blx	r3
     7f4:	4603      	mov	r3, r0

	
}
     7f6:	4618      	mov	r0, r3
     7f8:	3708      	adds	r7, #8
     7fa:	46bd      	mov	sp, r7
     7fc:	bd80      	pop	{r7, pc}
     7fe:	bf00      	nop
     800:	2000a774 	.word	0x2000a774
     804:	000002d1 	.word	0x000002d1
     808:	00000321 	.word	0x00000321

0000080c <_ZN9ALU_Class12FeedWatchDogEv>:
int32_t	ALU_Class::FeedWatchDog(void){
     80c:	b580      	push	{r7, lr}
     80e:	b082      	sub	sp, #8
     810:	af00      	add	r7, sp, #0
     812:	6078      	str	r0, [r7, #4]
	return wdt_feed(&WATCHDOG);
     814:	4803      	ldr	r0, [pc, #12]	; (824 <_ZN9ALU_Class12FeedWatchDogEv+0x18>)
     816:	4b04      	ldr	r3, [pc, #16]	; (828 <_ZN9ALU_Class12FeedWatchDogEv+0x1c>)
     818:	4798      	blx	r3
     81a:	4603      	mov	r3, r0
}
     81c:	4618      	mov	r0, r3
     81e:	3708      	adds	r7, #8
     820:	46bd      	mov	sp, r7
     822:	bd80      	pop	{r7, pc}
     824:	2000a774 	.word	0x2000a774
     828:	00000365 	.word	0x00000365

0000082c <_ZN9ALU_Class14StartLivePulseEv>:
uint8_t	ALU_Class::StartLivePulse(void){
     82c:	b580      	push	{r7, lr}
     82e:	b084      	sub	sp, #16
     830:	af00      	add	r7, sp, #0
     832:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     834:	4909      	ldr	r1, [pc, #36]	; (85c <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     836:	480a      	ldr	r0, [pc, #40]	; (860 <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     838:	4b0a      	ldr	r3, [pc, #40]	; (864 <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     83a:	4798      	blx	r3
     83c:	4603      	mov	r3, r0
     83e:	490a      	ldr	r1, [pc, #40]	; (868 <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     840:	4618      	mov	r0, r3
     842:	4b0a      	ldr	r3, [pc, #40]	; (86c <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     844:	4798      	blx	r3
	//pwm_set_parameters(&LIVE_PULSE, 1000000, 500);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     846:	480a      	ldr	r0, [pc, #40]	; (870 <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     848:	4b0a      	ldr	r3, [pc, #40]	; (874 <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     84a:	4798      	blx	r3
     84c:	4603      	mov	r3, r0
     84e:	60fb      	str	r3, [r7, #12]
	return p;
     850:	68fb      	ldr	r3, [r7, #12]
     852:	b2db      	uxtb	r3, r3
}
     854:	4618      	mov	r0, r3
     856:	3710      	adds	r7, #16
     858:	46bd      	mov	sp, r7
     85a:	bd80      	pop	{r7, pc}
     85c:	0002101c 	.word	0x0002101c
     860:	2000a140 	.word	0x2000a140
     864:	00000ca9 	.word	0x00000ca9
     868:	00021018 	.word	0x00021018
     86c:	00000c89 	.word	0x00000c89
     870:	2000a630 	.word	0x2000a630
     874:	00006be1 	.word	0x00006be1

00000878 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.Get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     878:	b580      	push	{r7, lr}
     87a:	b088      	sub	sp, #32
     87c:	af00      	add	r7, sp, #0
     87e:	6078      	str	r0, [r7, #4]
     880:	6039      	str	r1, [r7, #0]
	uint32_t	w,crc,refCRC,e;
	w=0;
     882:	2300      	movs	r3, #0
     884:	61bb      	str	r3, [r7, #24]
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     886:	6839      	ldr	r1, [r7, #0]
     888:	483d      	ldr	r0, [pc, #244]	; (980 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     88a:	4b3e      	ldr	r3, [pc, #248]	; (984 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     88c:	4798      	blx	r3
     88e:	61f8      	str	r0, [r7, #28]
	if (memory.IsConfigurationDataUpdated())
     890:	483d      	ldr	r0, [pc, #244]	; (988 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     892:	4b3e      	ldr	r3, [pc, #248]	; (98c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x114>)
     894:	4798      	blx	r3
     896:	4603      	mov	r3, r0
     898:	2b00      	cmp	r3, #0
     89a:	d007      	beq.n	8ac <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x34>
	{
		r=memory.ReadUpdatedConfigurationData(configuration);
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	332c      	adds	r3, #44	; 0x2c
     8a0:	4619      	mov	r1, r3
     8a2:	4837      	ldr	r0, [pc, #220]	; (980 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8a4:	4b3a      	ldr	r3, [pc, #232]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x118>)
     8a6:	4798      	blx	r3
     8a8:	61f8      	str	r0, [r7, #28]
     8aa:	e05e      	b.n	96a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     8ac:	22ac      	movs	r2, #172	; 0xac
     8ae:	6839      	ldr	r1, [r7, #0]
     8b0:	4835      	ldr	r0, [pc, #212]	; (988 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     8b2:	4b38      	ldr	r3, [pc, #224]	; (994 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     8b4:	4798      	blx	r3
     8b6:	6178      	str	r0, [r7, #20]
		refCRC=memory.ReadCRCConfigurationData();
     8b8:	4831      	ldr	r0, [pc, #196]	; (980 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8ba:	4b37      	ldr	r3, [pc, #220]	; (998 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x120>)
     8bc:	4798      	blx	r3
     8be:	6138      	str	r0, [r7, #16]
		if (crc==refCRC)
     8c0:	697a      	ldr	r2, [r7, #20]
     8c2:	693b      	ldr	r3, [r7, #16]
     8c4:	429a      	cmp	r2, r3
     8c6:	d108      	bne.n	8da <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x62>
		{
			configuration=cd;
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	683a      	ldr	r2, [r7, #0]
     8cc:	332c      	adds	r3, #44	; 0x2c
     8ce:	4611      	mov	r1, r2
     8d0:	22ac      	movs	r2, #172	; 0xac
     8d2:	4618      	mov	r0, r3
     8d4:	4b31      	ldr	r3, [pc, #196]	; (99c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     8d6:	4798      	blx	r3
     8d8:	e047      	b.n	96a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	332c      	adds	r3, #44	; 0x2c
     8de:	4619      	mov	r1, r3
     8e0:	4827      	ldr	r0, [pc, #156]	; (980 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8e2:	4b2f      	ldr	r3, [pc, #188]	; (9a0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x128>)
     8e4:	4798      	blx	r3
     8e6:	61f8      	str	r0, [r7, #28]
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     8e8:	687b      	ldr	r3, [r7, #4]
     8ea:	332c      	adds	r3, #44	; 0x2c
     8ec:	22ac      	movs	r2, #172	; 0xac
     8ee:	4619      	mov	r1, r3
     8f0:	4825      	ldr	r0, [pc, #148]	; (988 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     8f2:	4b28      	ldr	r3, [pc, #160]	; (994 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     8f4:	4798      	blx	r3
     8f6:	6178      	str	r0, [r7, #20]
			if (crc==hvac.CRC32)
     8f8:	4b2a      	ldr	r3, [pc, #168]	; (9a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     8fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
     8fe:	697b      	ldr	r3, [r7, #20]
     900:	429a      	cmp	r2, r3
     902:	d105      	bne.n	910 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x98>
			{
				w=memory.WriteCRCConfigurationData(crc);
     904:	6979      	ldr	r1, [r7, #20]
     906:	481e      	ldr	r0, [pc, #120]	; (980 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     908:	4b27      	ldr	r3, [pc, #156]	; (9a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     90a:	4798      	blx	r3
     90c:	61b8      	str	r0, [r7, #24]
     90e:	e02c      	b.n	96a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     910:	687b      	ldr	r3, [r7, #4]
     912:	4a26      	ldr	r2, [pc, #152]	; (9ac <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x134>)
     914:	332c      	adds	r3, #44	; 0x2c
     916:	4611      	mov	r1, r2
     918:	22ac      	movs	r2, #172	; 0xac
     91a:	4618      	mov	r0, r3
     91c:	4b1f      	ldr	r3, [pc, #124]	; (99c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     91e:	4798      	blx	r3
				e=qspiFlash.Erase((uint32_t)&flashMap->configurationSector);
     920:	4b23      	ldr	r3, [pc, #140]	; (9b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     922:	681b      	ldr	r3, [r3, #0]
     924:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     928:	4619      	mov	r1, r3
     92a:	4822      	ldr	r0, [pc, #136]	; (9b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     92c:	4b22      	ldr	r3, [pc, #136]	; (9b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     92e:	4798      	blx	r3
     930:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultConfiguration();
     932:	4813      	ldr	r0, [pc, #76]	; (980 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     934:	4b21      	ldr	r3, [pc, #132]	; (9bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x144>)
     936:	4798      	blx	r3
     938:	61b8      	str	r0, [r7, #24]
				
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     93a:	4b1a      	ldr	r3, [pc, #104]	; (9a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     93c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     940:	4619      	mov	r1, r3
     942:	480f      	ldr	r0, [pc, #60]	; (980 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     944:	4b18      	ldr	r3, [pc, #96]	; (9a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     946:	4798      	blx	r3
     948:	61b8      	str	r0, [r7, #24]
				
				e=qspiFlash.Erase((uint32_t)&flashMap->parametersSector);
     94a:	4b19      	ldr	r3, [pc, #100]	; (9b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     94c:	681b      	ldr	r3, [r3, #0]
     94e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     952:	4619      	mov	r1, r3
     954:	4817      	ldr	r0, [pc, #92]	; (9b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     956:	4b18      	ldr	r3, [pc, #96]	; (9b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     958:	4798      	blx	r3
     95a:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultParameters();
     95c:	4808      	ldr	r0, [pc, #32]	; (980 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     95e:	4b18      	ldr	r3, [pc, #96]	; (9c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x148>)
     960:	4798      	blx	r3
     962:	61b8      	str	r0, [r7, #24]
				memory.WriteFastDefaultParameters();
     964:	4817      	ldr	r0, [pc, #92]	; (9c4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x14c>)
     966:	4b18      	ldr	r3, [pc, #96]	; (9c8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x150>)
     968:	4798      	blx	r3
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	332c      	adds	r3, #44	; 0x2c
     96e:	4619      	mov	r1, r3
     970:	480c      	ldr	r0, [pc, #48]	; (9a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     972:	4b16      	ldr	r3, [pc, #88]	; (9cc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x154>)
     974:	4798      	blx	r3
	return r;
     976:	69fb      	ldr	r3, [r7, #28]
};
     978:	4618      	mov	r0, r3
     97a:	3720      	adds	r7, #32
     97c:	46bd      	mov	sp, r7
     97e:	bd80      	pop	{r7, pc}
     980:	20002be4 	.word	0x20002be4
     984:	0000271d 	.word	0x0000271d
     988:	20002a50 	.word	0x20002a50
     98c:	00002c15 	.word	0x00002c15
     990:	00002751 	.word	0x00002751
     994:	00001519 	.word	0x00001519
     998:	000027bd 	.word	0x000027bd
     99c:	0001d37d 	.word	0x0001d37d
     9a0:	000026e9 	.word	0x000026e9
     9a4:	20008034 	.word	0x20008034
     9a8:	000029ad 	.word	0x000029ad
     9ac:	00021190 	.word	0x00021190
     9b0:	20007f98 	.word	0x20007f98
     9b4:	20009c84 	.word	0x20009c84
     9b8:	00016819 	.word	0x00016819
     9bc:	00002895 	.word	0x00002895
     9c0:	000028e9 	.word	0x000028e9
     9c4:	20002bd4 	.word	0x20002bd4
     9c8:	00001961 	.word	0x00001961
     9cc:	00003fc5 	.word	0x00003fc5

000009d0 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData>:

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
     9d0:	b580      	push	{r7, lr}
     9d2:	b084      	sub	sp, #16
     9d4:	af00      	add	r7, sp, #0
     9d6:	60f8      	str	r0, [r7, #12]
     9d8:	460b      	mov	r3, r1
     9da:	607a      	str	r2, [r7, #4]
     9dc:	72fb      	strb	r3, [r7, #11]
	listener.SendErrorSelf(uint16_t(ifl),data);
     9de:	7afb      	ldrb	r3, [r7, #11]
     9e0:	b29b      	uxth	r3, r3
     9e2:	687a      	ldr	r2, [r7, #4]
     9e4:	4619      	mov	r1, r3
     9e6:	4803      	ldr	r0, [pc, #12]	; (9f4 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x24>)
     9e8:	4b03      	ldr	r3, [pc, #12]	; (9f8 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x28>)
     9ea:	4798      	blx	r3
}
     9ec:	bf00      	nop
     9ee:	3710      	adds	r7, #16
     9f0:	46bd      	mov	sp, r7
     9f2:	bd80      	pop	{r7, pc}
     9f4:	20009850 	.word	0x20009850
     9f8:	00014d59 	.word	0x00014d59

000009fc <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm>:
{
	listener.SendErrorSelf(uint16_t(fl),data);
}

void ALU_Class::PrepareNewTask(ALUTaskEnum newTask, uint32_t data)
{
     9fc:	b580      	push	{r7, lr}
     9fe:	b084      	sub	sp, #16
     a00:	af00      	add	r7, sp, #0
     a02:	60f8      	str	r0, [r7, #12]
     a04:	460b      	mov	r3, r1
     a06:	607a      	str	r2, [r7, #4]
     a08:	72fb      	strb	r3, [r7, #11]
	
	task.id=newTask;
     a0a:	68fb      	ldr	r3, [r7, #12]
     a0c:	7afa      	ldrb	r2, [r7, #11]
     a0e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	task.prio=(uint8_t)newTask;
     a12:	68fb      	ldr	r3, [r7, #12]
     a14:	7afa      	ldrb	r2, [r7, #11]
     a16:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	AddTask(task);
     a1a:	68fa      	ldr	r2, [r7, #12]
     a1c:	68fb      	ldr	r3, [r7, #12]
     a1e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
     a22:	4619      	mov	r1, r3
     a24:	4610      	mov	r0, r2
     a26:	4b03      	ldr	r3, [pc, #12]	; (a34 <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm+0x38>)
     a28:	4798      	blx	r3

}
     a2a:	bf00      	nop
     a2c:	3710      	adds	r7, #16
     a2e:	46bd      	mov	sp, r7
     a30:	bd80      	pop	{r7, pc}
     a32:	bf00      	nop
     a34:	000044a5 	.word	0x000044a5

00000a38 <_ZN9ALU_Class15PrepareNewEventEtt>:

void ALU_Class::PrepareNewEvent( uint16 newState, uint16 data)
{
     a38:	b580      	push	{r7, lr}
     a3a:	b086      	sub	sp, #24
     a3c:	af00      	add	r7, sp, #0
     a3e:	6078      	str	r0, [r7, #4]
     a40:	460b      	mov	r3, r1
     a42:	807b      	strh	r3, [r7, #2]
     a44:	4613      	mov	r3, r2
     a46:	803b      	strh	r3, [r7, #0]
	event	e;
     a48:	f107 0308 	add.w	r3, r7, #8
     a4c:	4618      	mov	r0, r3
     a4e:	4b0a      	ldr	r3, [pc, #40]	; (a78 <_ZN9ALU_Class15PrepareNewEventEtt+0x40>)
     a50:	4798      	blx	r3
	e.eventClass =(EventClass)kALUEventClass;
     a52:	f44f 7340 	mov.w	r3, #768	; 0x300
     a56:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kALUControllerEvent;
     a58:	2302      	movs	r3, #2
     a5a:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
     a5c:	887b      	ldrh	r3, [r7, #2]
     a5e:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
     a60:	883b      	ldrh	r3, [r7, #0]
     a62:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
     a64:	f107 0308 	add.w	r3, r7, #8
     a68:	4619      	mov	r1, r3
     a6a:	4804      	ldr	r0, [pc, #16]	; (a7c <_ZN9ALU_Class15PrepareNewEventEtt+0x44>)
     a6c:	4b04      	ldr	r3, [pc, #16]	; (a80 <_ZN9ALU_Class15PrepareNewEventEtt+0x48>)
     a6e:	4798      	blx	r3

}
     a70:	bf00      	nop
     a72:	3718      	adds	r7, #24
     a74:	46bd      	mov	sp, r7
     a76:	bd80      	pop	{r7, pc}
     a78:	000003c5 	.word	0x000003c5
     a7c:	20009850 	.word	0x20009850
     a80:	00014c55 	.word	0x00014c55

00000a84 <_ZN9ALU_Class18ExecutePendingTaskEv>:

bool	ALU_Class::ExecutePendingTask(void){
     a84:	b580      	push	{r7, lr}
     a86:	b088      	sub	sp, #32
     a88:	af00      	add	r7, sp, #0
     a8a:	60f8      	str	r0, [r7, #12]
	allTasksDone=false;
     a8c:	68fb      	ldr	r3, [r7, #12]
     a8e:	2200      	movs	r2, #0
     a90:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	list_element *it;
	ControllerTask tk;
	uint8_t		highPrio=kALUNumberTasks;
     a94:	230c      	movs	r3, #12
     a96:	77fb      	strb	r3, [r7, #31]
	tk=GetHighPrioTask();
     a98:	68fa      	ldr	r2, [r7, #12]
     a9a:	463b      	mov	r3, r7
     a9c:	4611      	mov	r1, r2
     a9e:	4618      	mov	r0, r3
     aa0:	4b24      	ldr	r3, [pc, #144]	; (b34 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb0>)
     aa2:	4798      	blx	r3
     aa4:	f107 0314 	add.w	r3, r7, #20
     aa8:	463a      	mov	r2, r7
     aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
     aae:	e883 0003 	stmia.w	r3, {r0, r1}
	if (tk.id!=kALUTaskArincTXMessage)
     ab2:	7e3b      	ldrb	r3, [r7, #24]
     ab4:	2b02      	cmp	r3, #2
     ab6:	d004      	beq.n	ac2 <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	{
		PrepareNewTask(kALUTaskArincTXMessage);
     ab8:	2200      	movs	r2, #0
     aba:	2102      	movs	r1, #2
     abc:	68f8      	ldr	r0, [r7, #12]
     abe:	4b1e      	ldr	r3, [pc, #120]	; (b38 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb4>)
     ac0:	4798      	blx	r3
	}
	while (taskList->head){
     ac2:	68fb      	ldr	r3, [r7, #12]
     ac4:	681b      	ldr	r3, [r3, #0]
     ac6:	681b      	ldr	r3, [r3, #0]
     ac8:	2b00      	cmp	r3, #0
     aca:	d01a      	beq.n	b02 <_ZN9ALU_Class18ExecutePendingTaskEv+0x7e>
		tk=GetHighPrioTask();
     acc:	68fa      	ldr	r2, [r7, #12]
     ace:	463b      	mov	r3, r7
     ad0:	4611      	mov	r1, r2
     ad2:	4618      	mov	r0, r3
     ad4:	4b17      	ldr	r3, [pc, #92]	; (b34 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb0>)
     ad6:	4798      	blx	r3
     ad8:	f107 0314 	add.w	r3, r7, #20
     adc:	463a      	mov	r2, r7
     ade:	e892 0003 	ldmia.w	r2, {r0, r1}
     ae2:	e883 0003 	stmia.w	r3, {r0, r1}
		HandleTasks(tk);
     ae6:	f107 0314 	add.w	r3, r7, #20
     aea:	4619      	mov	r1, r3
     aec:	68f8      	ldr	r0, [r7, #12]
     aee:	4b13      	ldr	r3, [pc, #76]	; (b3c <_ZN9ALU_Class18ExecutePendingTaskEv+0xb8>)
     af0:	4798      	blx	r3
		RemoveTask(tk);
     af2:	68fb      	ldr	r3, [r7, #12]
     af4:	f107 0214 	add.w	r2, r7, #20
     af8:	4611      	mov	r1, r2
     afa:	4618      	mov	r0, r3
     afc:	4b10      	ldr	r3, [pc, #64]	; (b40 <_ZN9ALU_Class18ExecutePendingTaskEv+0xbc>)
     afe:	4798      	blx	r3
	while (taskList->head){
     b00:	e7df      	b.n	ac2 <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	
	}
	RunPeriodicTasks();
     b02:	68f8      	ldr	r0, [r7, #12]
     b04:	4b0f      	ldr	r3, [pc, #60]	; (b44 <_ZN9ALU_Class18ExecutePendingTaskEv+0xc0>)
     b06:	4798      	blx	r3
	allTasksDone=~((bool)taskList->head);
     b08:	68fb      	ldr	r3, [r7, #12]
     b0a:	2201      	movs	r2, #1
     b0c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	if (allTasksDone)
     b10:	68fb      	ldr	r3, [r7, #12]
     b12:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
     b16:	2b00      	cmp	r3, #0
     b18:	d005      	beq.n	b26 <_ZN9ALU_Class18ExecutePendingTaskEv+0xa2>
	{
		
		PrepareNewEvent(kALUEventSimpleResume);
     b1a:	2200      	movs	r2, #0
     b1c:	f240 1107 	movw	r1, #263	; 0x107
     b20:	68f8      	ldr	r0, [r7, #12]
     b22:	4b09      	ldr	r3, [pc, #36]	; (b48 <_ZN9ALU_Class18ExecutePendingTaskEv+0xc4>)
     b24:	4798      	blx	r3
	}
	return allTasksDone; 
     b26:	68fb      	ldr	r3, [r7, #12]
     b28:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
}
     b2c:	4618      	mov	r0, r3
     b2e:	3720      	adds	r7, #32
     b30:	46bd      	mov	sp, r7
     b32:	bd80      	pop	{r7, pc}
     b34:	00004629 	.word	0x00004629
     b38:	000009fd 	.word	0x000009fd
     b3c:	00000b4d 	.word	0x00000b4d
     b40:	00004595 	.word	0x00004595
     b44:	00000c45 	.word	0x00000c45
     b48:	00000a39 	.word	0x00000a39

00000b4c <_ZN9ALU_Class11HandleTasksER14ControllerTask>:
void ALU_Class::HandleTasks(ControllerTask& ct)
{
     b4c:	b580      	push	{r7, lr}
     b4e:	b084      	sub	sp, #16
     b50:	af00      	add	r7, sp, #0
     b52:	6078      	str	r0, [r7, #4]
     b54:	6039      	str	r1, [r7, #0]

	taskEntryTime= hvacTimer.Get_ticks();
     b56:	4827      	ldr	r0, [pc, #156]	; (bf4 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa8>)
     b58:	4b27      	ldr	r3, [pc, #156]	; (bf8 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     b5a:	4798      	blx	r3
     b5c:	4602      	mov	r2, r0
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	switch (ct.id)
     b64:	683b      	ldr	r3, [r7, #0]
     b66:	791b      	ldrb	r3, [r3, #4]
     b68:	3b02      	subs	r3, #2
     b6a:	2b09      	cmp	r3, #9
     b6c:	d838      	bhi.n	be0 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x94>
     b6e:	a201      	add	r2, pc, #4	; (adr r2, b74 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x28>)
     b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     b74:	00000bc9 	.word	0x00000bc9
     b78:	00000bb1 	.word	0x00000bb1
     b7c:	00000bbf 	.word	0x00000bbf
     b80:	00000be1 	.word	0x00000be1
     b84:	00000be1 	.word	0x00000be1
     b88:	00000be1 	.word	0x00000be1
     b8c:	00000ba7 	.word	0x00000ba7
     b90:	00000b9d 	.word	0x00000b9d
     b94:	00000bd1 	.word	0x00000bd1
     b98:	00000bd9 	.word	0x00000bd9
	{
		case kALUEventSimpleStart:
			hvac.Start(0);
		break;
		case kALUSimpleResume:
			hvac.ControllerResume(0);
     b9c:	2100      	movs	r1, #0
     b9e:	4817      	ldr	r0, [pc, #92]	; (bfc <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     ba0:	4b17      	ldr	r3, [pc, #92]	; (c00 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb4>)
     ba2:	4798      	blx	r3
		break;
     ba4:	e021      	b.n	bea <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUSimpleStop:
			hvac.Stop(0);
     ba6:	2100      	movs	r1, #0
     ba8:	4814      	ldr	r0, [pc, #80]	; (bfc <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     baa:	4b16      	ldr	r3, [pc, #88]	; (c04 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     bac:	4798      	blx	r3
		break;
     bae:	e01c      	b.n	bea <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     bb0:	f107 0308 	add.w	r3, r7, #8
     bb4:	4914      	ldr	r1, [pc, #80]	; (c08 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xbc>)
     bb6:	4618      	mov	r0, r3
     bb8:	4b14      	ldr	r3, [pc, #80]	; (c0c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc0>)
     bba:	4798      	blx	r3
		break;
     bbc:	e015      	b.n	bea <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskReadARINCR1:
			arinc.ReadRXBuffer(1);			
     bbe:	2101      	movs	r1, #1
     bc0:	4813      	ldr	r0, [pc, #76]	; (c10 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     bc2:	4b14      	ldr	r3, [pc, #80]	; (c14 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc8>)
     bc4:	4798      	blx	r3
		break;
     bc6:	e010      	b.n	bea <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskArincTXMessage:
			arinc.TransmitTXBuffer();
     bc8:	4811      	ldr	r0, [pc, #68]	; (c10 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     bca:	4b13      	ldr	r3, [pc, #76]	; (c18 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xcc>)
     bcc:	4798      	blx	r3
		break;
     bce:	e00c      	b.n	bea <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskUpdateTemperatures:
			arinc.SaveTemperature();		
     bd0:	480f      	ldr	r0, [pc, #60]	; (c10 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     bd2:	4b12      	ldr	r3, [pc, #72]	; (c1c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xd0>)
     bd4:	4798      	blx	r3
		break;
     bd6:	e008      	b.n	bea <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskUpdateFlapperValves:
			arinc.SaveFlapperValveAngle();
     bd8:	480d      	ldr	r0, [pc, #52]	; (c10 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     bda:	4b11      	ldr	r3, [pc, #68]	; (c20 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xd4>)
     bdc:	4798      	blx	r3
		break;
     bde:	e004      	b.n	bea <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>

		default:
		hvac.Stop(0);
     be0:	2100      	movs	r1, #0
     be2:	4806      	ldr	r0, [pc, #24]	; (bfc <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     be4:	4b07      	ldr	r3, [pc, #28]	; (c04 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     be6:	4798      	blx	r3
		break;
     be8:	bf00      	nop
	}
}
     bea:	bf00      	nop
     bec:	3710      	adds	r7, #16
     bee:	46bd      	mov	sp, r7
     bf0:	bd80      	pop	{r7, pc}
     bf2:	bf00      	nop
     bf4:	2000a0e8 	.word	0x2000a0e8
     bf8:	00017835 	.word	0x00017835
     bfc:	20008034 	.word	0x20008034
     c00:	00002f1d 	.word	0x00002f1d
     c04:	00003f49 	.word	0x00003f49
     c08:	200014cc 	.word	0x200014cc
     c0c:	00001be1 	.word	0x00001be1
     c10:	20008d24 	.word	0x20008d24
     c14:	0001352d 	.word	0x0001352d
     c18:	0001397d 	.word	0x0001397d
     c1c:	00012a81 	.word	0x00012a81
     c20:	000129ad 	.word	0x000129ad

00000c24 <_ZN9ALU_Class17CheckPeriodicTaskEv>:

void ALU_Class::CheckPeriodicTask(void){
     c24:	b580      	push	{r7, lr}
     c26:	b082      	sub	sp, #8
     c28:	af00      	add	r7, sp, #0
	interfaces.CheckCommunication();
     c2a:	463b      	mov	r3, r7
     c2c:	4903      	ldr	r1, [pc, #12]	; (c3c <_ZN9ALU_Class17CheckPeriodicTaskEv+0x18>)
     c2e:	4618      	mov	r0, r3
     c30:	4b03      	ldr	r3, [pc, #12]	; (c40 <_ZN9ALU_Class17CheckPeriodicTaskEv+0x1c>)
     c32:	4798      	blx	r3
}
     c34:	bf00      	nop
     c36:	3708      	adds	r7, #8
     c38:	46bd      	mov	sp, r7
     c3a:	bd80      	pop	{r7, pc}
     c3c:	200014cc 	.word	0x200014cc
     c40:	00001be1 	.word	0x00001be1

00000c44 <_ZN9ALU_Class16RunPeriodicTasksEv>:

void	ALU_Class::RunPeriodicTasks(void){
     c44:	b580      	push	{r7, lr}
     c46:	b082      	sub	sp, #8
     c48:	af00      	add	r7, sp, #0
     c4a:	6078      	str	r0, [r7, #4]
	FeedWatchDog();
     c4c:	6878      	ldr	r0, [r7, #4]
     c4e:	4b03      	ldr	r3, [pc, #12]	; (c5c <_ZN9ALU_Class16RunPeriodicTasksEv+0x18>)
     c50:	4798      	blx	r3

}
     c52:	bf00      	nop
     c54:	3708      	adds	r7, #8
     c56:	46bd      	mov	sp, r7
     c58:	bd80      	pop	{r7, pc}
     c5a:	bf00      	nop
     c5c:	0000080d 	.word	0x0000080d

00000c60 <_ZlsIhER5PrintS1_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     c60:	b580      	push	{r7, lr}
     c62:	b082      	sub	sp, #8
     c64:	af00      	add	r7, sp, #0
     c66:	6078      	str	r0, [r7, #4]
     c68:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     c6a:	683b      	ldr	r3, [r7, #0]
     c6c:	781b      	ldrb	r3, [r3, #0]
     c6e:	220a      	movs	r2, #10
     c70:	4619      	mov	r1, r3
     c72:	6878      	ldr	r0, [r7, #4]
     c74:	4b03      	ldr	r3, [pc, #12]	; (c84 <_ZlsIhER5PrintS1_RKT_+0x24>)
     c76:	4798      	blx	r3
     c78:	687b      	ldr	r3, [r7, #4]
     c7a:	4618      	mov	r0, r3
     c7c:	3708      	adds	r7, #8
     c7e:	46bd      	mov	sp, r7
     c80:	bd80      	pop	{r7, pc}
     c82:	bf00      	nop
     c84:	000180d1 	.word	0x000180d1

00000c88 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     c88:	b580      	push	{r7, lr}
     c8a:	b082      	sub	sp, #8
     c8c:	af00      	add	r7, sp, #0
     c8e:	6078      	str	r0, [r7, #4]
     c90:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     c92:	6839      	ldr	r1, [r7, #0]
     c94:	6878      	ldr	r0, [r7, #4]
     c96:	4b03      	ldr	r3, [pc, #12]	; (ca4 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     c98:	4798      	blx	r3
     c9a:	687b      	ldr	r3, [r7, #4]
     c9c:	4618      	mov	r0, r3
     c9e:	3708      	adds	r7, #8
     ca0:	46bd      	mov	sp, r7
     ca2:	bd80      	pop	{r7, pc}
     ca4:	000180b1 	.word	0x000180b1

00000ca8 <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     ca8:	b580      	push	{r7, lr}
     caa:	b082      	sub	sp, #8
     cac:	af00      	add	r7, sp, #0
     cae:	6078      	str	r0, [r7, #4]
     cb0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     cb2:	6839      	ldr	r1, [r7, #0]
     cb4:	6878      	ldr	r0, [r7, #4]
     cb6:	4b03      	ldr	r3, [pc, #12]	; (cc4 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     cb8:	4798      	blx	r3
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	4618      	mov	r0, r3
     cbe:	3708      	adds	r7, #8
     cc0:	46bd      	mov	sp, r7
     cc2:	bd80      	pop	{r7, pc}
     cc4:	000180b1 	.word	0x000180b1

00000cc8 <_Z41__static_initialization_and_destruction_0ii>:




     cc8:	b580      	push	{r7, lr}
     cca:	b082      	sub	sp, #8
     ccc:	af00      	add	r7, sp, #0
     cce:	6078      	str	r0, [r7, #4]
     cd0:	6039      	str	r1, [r7, #0]
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	2b01      	cmp	r3, #1
     cd6:	d11c      	bne.n	d12 <_Z41__static_initialization_and_destruction_0ii+0x4a>
     cd8:	683b      	ldr	r3, [r7, #0]
     cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
     cde:	4293      	cmp	r3, r2
     ce0:	d117      	bne.n	d12 <_Z41__static_initialization_and_destruction_0ii+0x4a>
	PBIT_Class( const PBIT_Class &c );
	PBIT_Class& operator=( const PBIT_Class &c );

}; //PBIT_Class

static	PBIT_Class	pBit;
     ce2:	480e      	ldr	r0, [pc, #56]	; (d1c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     ce4:	4b0e      	ldr	r3, [pc, #56]	; (d20 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     ce6:	4798      	blx	r3
     ce8:	4a0e      	ldr	r2, [pc, #56]	; (d24 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     cea:	490f      	ldr	r1, [pc, #60]	; (d28 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     cec:	480b      	ldr	r0, [pc, #44]	; (d1c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     cee:	4b0f      	ldr	r3, [pc, #60]	; (d2c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     cf0:	4798      	blx	r3
	CBIT_Class( const CBIT_Class &c );
	CBIT_Class& operator=( const CBIT_Class &c );

}; //CBIT_Class

static	CBIT_Class	cBit;
     cf2:	480f      	ldr	r0, [pc, #60]	; (d30 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     cf4:	4b0f      	ldr	r3, [pc, #60]	; (d34 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     cf6:	4798      	blx	r3
     cf8:	4a0a      	ldr	r2, [pc, #40]	; (d24 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     cfa:	490f      	ldr	r1, [pc, #60]	; (d38 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     cfc:	480c      	ldr	r0, [pc, #48]	; (d30 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     cfe:	4b0b      	ldr	r3, [pc, #44]	; (d2c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     d00:	4798      	blx	r3
     d02:	480e      	ldr	r0, [pc, #56]	; (d3c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     d04:	4b0e      	ldr	r3, [pc, #56]	; (d40 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     d06:	4798      	blx	r3
     d08:	4a06      	ldr	r2, [pc, #24]	; (d24 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     d0a:	490e      	ldr	r1, [pc, #56]	; (d44 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     d0c:	480b      	ldr	r0, [pc, #44]	; (d3c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     d0e:	4b07      	ldr	r3, [pc, #28]	; (d2c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     d10:	4798      	blx	r3
     d12:	bf00      	nop
     d14:	3708      	adds	r7, #8
     d16:	46bd      	mov	sp, r7
     d18:	bd80      	pop	{r7, pc}
     d1a:	bf00      	nop
     d1c:	20000c64 	.word	0x20000c64
     d20:	00002ab9 	.word	0x00002ab9
     d24:	20000000 	.word	0x20000000
     d28:	00002ad3 	.word	0x00002ad3
     d2c:	00019ab1 	.word	0x00019ab1
     d30:	20000c78 	.word	0x20000c78
     d34:	00000fa5 	.word	0x00000fa5
     d38:	00000fbf 	.word	0x00000fbf
     d3c:	20000c80 	.word	0x20000c80
     d40:	00000425 	.word	0x00000425
     d44:	00000461 	.word	0x00000461

00000d48 <_GLOBAL__sub_I_ptrALUClass>:
     d48:	b580      	push	{r7, lr}
     d4a:	af00      	add	r7, sp, #0
     d4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     d50:	2001      	movs	r0, #1
     d52:	4b01      	ldr	r3, [pc, #4]	; (d58 <_GLOBAL__sub_I_ptrALUClass+0x10>)
     d54:	4798      	blx	r3
     d56:	bd80      	pop	{r7, pc}
     d58:	00000cc9 	.word	0x00000cc9

00000d5c <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: private virtual ARINC_Conversions
     d5c:	b480      	push	{r7}
     d5e:	b083      	sub	sp, #12
     d60:	af00      	add	r7, sp, #0
     d62:	6078      	str	r0, [r7, #4]
     d64:	6039      	str	r1, [r7, #0]
     d66:	683b      	ldr	r3, [r7, #0]
     d68:	681a      	ldr	r2, [r3, #0]
     d6a:	687b      	ldr	r3, [r7, #4]
     d6c:	601a      	str	r2, [r3, #0]
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	3b0c      	subs	r3, #12
     d74:	681b      	ldr	r3, [r3, #0]
     d76:	461a      	mov	r2, r3
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	4413      	add	r3, r2
     d7c:	683a      	ldr	r2, [r7, #0]
     d7e:	6852      	ldr	r2, [r2, #4]
     d80:	601a      	str	r2, [r3, #0]
     d82:	687b      	ldr	r3, [r7, #4]
     d84:	4618      	mov	r0, r3
     d86:	370c      	adds	r7, #12
     d88:	46bd      	mov	sp, r7
     d8a:	bc80      	pop	{r7}
     d8c:	4770      	bx	lr
	...

00000d90 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     d90:	b580      	push	{r7, lr}
     d92:	b082      	sub	sp, #8
     d94:	af00      	add	r7, sp, #0
     d96:	6078      	str	r0, [r7, #4]
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
     d9e:	4618      	mov	r0, r3
     da0:	4b10      	ldr	r3, [pc, #64]	; (de4 <_ZN10AMMC_ClassC1Ev+0x54>)
     da2:	4798      	blx	r3
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
     daa:	4a0f      	ldr	r2, [pc, #60]	; (de8 <_ZN10AMMC_ClassC1Ev+0x58>)
     dac:	4611      	mov	r1, r2
     dae:	4618      	mov	r0, r3
     db0:	4b0e      	ldr	r3, [pc, #56]	; (dec <_ZN10AMMC_ClassC1Ev+0x5c>)
     db2:	4798      	blx	r3
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	4a0e      	ldr	r2, [pc, #56]	; (df0 <_ZN10AMMC_ClassC1Ev+0x60>)
     db8:	4611      	mov	r1, r2
     dba:	4618      	mov	r0, r3
     dbc:	4b0d      	ldr	r3, [pc, #52]	; (df4 <_ZN10AMMC_ClassC1Ev+0x64>)
     dbe:	4798      	blx	r3
     dc0:	4a0d      	ldr	r2, [pc, #52]	; (df8 <_ZN10AMMC_ClassC1Ev+0x68>)
     dc2:	687b      	ldr	r3, [r7, #4]
     dc4:	601a      	str	r2, [r3, #0]
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
     dcc:	4a0b      	ldr	r2, [pc, #44]	; (dfc <_ZN10AMMC_ClassC1Ev+0x6c>)
     dce:	601a      	str	r2, [r3, #0]
     dd0:	687b      	ldr	r3, [r7, #4]
     dd2:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
     dd6:	4a0a      	ldr	r2, [pc, #40]	; (e00 <_ZN10AMMC_ClassC1Ev+0x70>)
     dd8:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	4618      	mov	r0, r3
     dde:	3708      	adds	r7, #8
     de0:	46bd      	mov	sp, r7
     de2:	bd80      	pop	{r7, pc}
     de4:	00012c8d 	.word	0x00012c8d
     de8:	000210b4 	.word	0x000210b4
     dec:	00000d5d 	.word	0x00000d5d
     df0:	00021094 	.word	0x00021094
     df4:	0001313d 	.word	0x0001313d
     df8:	0002104c 	.word	0x0002104c
     dfc:	00021068 	.word	0x00021068
     e00:	00021084 	.word	0x00021084

00000e04 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     e04:	b580      	push	{r7, lr}
     e06:	b082      	sub	sp, #8
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
     e0c:	4a12      	ldr	r2, [pc, #72]	; (e58 <_ZN10AMMC_ClassD1Ev+0x54>)
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	601a      	str	r2, [r3, #0]
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
     e18:	4a10      	ldr	r2, [pc, #64]	; (e5c <_ZN10AMMC_ClassD1Ev+0x58>)
     e1a:	601a      	str	r2, [r3, #0]
     e1c:	687b      	ldr	r3, [r7, #4]
     e1e:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
     e22:	4a0f      	ldr	r2, [pc, #60]	; (e60 <_ZN10AMMC_ClassD1Ev+0x5c>)
     e24:	601a      	str	r2, [r3, #0]
     e26:	687b      	ldr	r3, [r7, #4]
     e28:	4a0e      	ldr	r2, [pc, #56]	; (e64 <_ZN10AMMC_ClassD1Ev+0x60>)
     e2a:	4611      	mov	r1, r2
     e2c:	4618      	mov	r0, r3
     e2e:	4b0e      	ldr	r3, [pc, #56]	; (e68 <_ZN10AMMC_ClassD1Ev+0x64>)
     e30:	4798      	blx	r3
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
     e38:	4a0c      	ldr	r2, [pc, #48]	; (e6c <_ZN10AMMC_ClassD1Ev+0x68>)
     e3a:	4611      	mov	r1, r2
     e3c:	4618      	mov	r0, r3
     e3e:	4b0c      	ldr	r3, [pc, #48]	; (e70 <_ZN10AMMC_ClassD1Ev+0x6c>)
     e40:	4798      	blx	r3
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
     e48:	4618      	mov	r0, r3
     e4a:	4b0a      	ldr	r3, [pc, #40]	; (e74 <_ZN10AMMC_ClassD1Ev+0x70>)
     e4c:	4798      	blx	r3
{
} //~AMMC_Class
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	4618      	mov	r0, r3
     e52:	3708      	adds	r7, #8
     e54:	46bd      	mov	sp, r7
     e56:	bd80      	pop	{r7, pc}
     e58:	0002104c 	.word	0x0002104c
     e5c:	00021068 	.word	0x00021068
     e60:	00021084 	.word	0x00021084
     e64:	00021094 	.word	0x00021094
     e68:	0001323d 	.word	0x0001323d
     e6c:	000210b4 	.word	0x000210b4
     e70:	000142ed 	.word	0x000142ed
     e74:	00012cad 	.word	0x00012cad

00000e78 <_ZTv0_n16_N10AMMC_ClassD1Ev>:
     e78:	b580      	push	{r7, lr}
     e7a:	b082      	sub	sp, #8
     e7c:	af00      	add	r7, sp, #0
     e7e:	6078      	str	r0, [r7, #4]
     e80:	687b      	ldr	r3, [r7, #4]
     e82:	681b      	ldr	r3, [r3, #0]
     e84:	3b10      	subs	r3, #16
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	461a      	mov	r2, r3
     e8a:	687b      	ldr	r3, [r7, #4]
     e8c:	4413      	add	r3, r2
     e8e:	4618      	mov	r0, r3
     e90:	4b03      	ldr	r3, [pc, #12]	; (ea0 <_ZTv0_n16_N10AMMC_ClassD1Ev+0x28>)
     e92:	4798      	blx	r3
     e94:	4603      	mov	r3, r0
     e96:	4618      	mov	r0, r3
     e98:	3708      	adds	r7, #8
     e9a:	46bd      	mov	sp, r7
     e9c:	bd80      	pop	{r7, pc}
     e9e:	bf00      	nop
     ea0:	00000e05 	.word	0x00000e05

00000ea4 <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     ea4:	b580      	push	{r7, lr}
     ea6:	b082      	sub	sp, #8
     ea8:	af00      	add	r7, sp, #0
     eaa:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     eac:	6878      	ldr	r0, [r7, #4]
     eae:	4b06      	ldr	r3, [pc, #24]	; (ec8 <_ZN10AMMC_ClassD0Ev+0x24>)
     eb0:	4798      	blx	r3
     eb2:	f44f 713c 	mov.w	r1, #752	; 0x2f0
     eb6:	6878      	ldr	r0, [r7, #4]
     eb8:	4b04      	ldr	r3, [pc, #16]	; (ecc <_ZN10AMMC_ClassD0Ev+0x28>)
     eba:	4798      	blx	r3
     ebc:	687b      	ldr	r3, [r7, #4]
     ebe:	4618      	mov	r0, r3
     ec0:	3708      	adds	r7, #8
     ec2:	46bd      	mov	sp, r7
     ec4:	bd80      	pop	{r7, pc}
     ec6:	bf00      	nop
     ec8:	00000e05 	.word	0x00000e05
     ecc:	00019abd 	.word	0x00019abd

00000ed0 <_ZTv0_n16_N10AMMC_ClassD0Ev>:
     ed0:	b580      	push	{r7, lr}
     ed2:	b082      	sub	sp, #8
     ed4:	af00      	add	r7, sp, #0
     ed6:	6078      	str	r0, [r7, #4]
     ed8:	687b      	ldr	r3, [r7, #4]
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	3b10      	subs	r3, #16
     ede:	681b      	ldr	r3, [r3, #0]
     ee0:	461a      	mov	r2, r3
     ee2:	687b      	ldr	r3, [r7, #4]
     ee4:	4413      	add	r3, r2
     ee6:	4618      	mov	r0, r3
     ee8:	4b03      	ldr	r3, [pc, #12]	; (ef8 <_ZTv0_n16_N10AMMC_ClassD0Ev+0x28>)
     eea:	4798      	blx	r3
     eec:	4603      	mov	r3, r0
     eee:	4618      	mov	r0, r3
     ef0:	3708      	adds	r7, #8
     ef2:	46bd      	mov	sp, r7
     ef4:	bd80      	pop	{r7, pc}
     ef6:	bf00      	nop
     ef8:	00000ea5 	.word	0x00000ea5

00000efc <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     efc:	b580      	push	{r7, lr}
     efe:	b082      	sub	sp, #8
     f00:	af00      	add	r7, sp, #0
     f02:	6078      	str	r0, [r7, #4]
     f04:	6039      	str	r1, [r7, #0]
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	2b01      	cmp	r3, #1
     f0a:	d124      	bne.n	f56 <_Z41__static_initialization_and_destruction_0ii+0x5a>
     f0c:	683b      	ldr	r3, [r7, #0]
     f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     f12:	4293      	cmp	r3, r2
     f14:	d11f      	bne.n	f56 <_Z41__static_initialization_and_destruction_0ii+0x5a>
     f16:	4812      	ldr	r0, [pc, #72]	; (f60 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     f18:	4b12      	ldr	r3, [pc, #72]	; (f64 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     f1a:	4798      	blx	r3
     f1c:	4a12      	ldr	r2, [pc, #72]	; (f68 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f1e:	4913      	ldr	r1, [pc, #76]	; (f6c <_Z41__static_initialization_and_destruction_0ii+0x70>)
     f20:	480f      	ldr	r0, [pc, #60]	; (f60 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     f22:	4b13      	ldr	r3, [pc, #76]	; (f70 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f24:	4798      	blx	r3
     f26:	4813      	ldr	r0, [pc, #76]	; (f74 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     f28:	4b13      	ldr	r3, [pc, #76]	; (f78 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     f2a:	4798      	blx	r3
     f2c:	4a0e      	ldr	r2, [pc, #56]	; (f68 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f2e:	4913      	ldr	r1, [pc, #76]	; (f7c <_Z41__static_initialization_and_destruction_0ii+0x80>)
     f30:	4810      	ldr	r0, [pc, #64]	; (f74 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     f32:	4b0f      	ldr	r3, [pc, #60]	; (f70 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f34:	4798      	blx	r3
AMMC_Class	ammc1;
     f36:	4812      	ldr	r0, [pc, #72]	; (f80 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     f38:	4b12      	ldr	r3, [pc, #72]	; (f84 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     f3a:	4798      	blx	r3
     f3c:	4a0a      	ldr	r2, [pc, #40]	; (f68 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f3e:	4912      	ldr	r1, [pc, #72]	; (f88 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     f40:	480f      	ldr	r0, [pc, #60]	; (f80 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     f42:	4b0b      	ldr	r3, [pc, #44]	; (f70 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f44:	4798      	blx	r3
AMMC_Class	ammc2;
     f46:	4811      	ldr	r0, [pc, #68]	; (f8c <_Z41__static_initialization_and_destruction_0ii+0x90>)
     f48:	4b0e      	ldr	r3, [pc, #56]	; (f84 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     f4a:	4798      	blx	r3
     f4c:	4a06      	ldr	r2, [pc, #24]	; (f68 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f4e:	490e      	ldr	r1, [pc, #56]	; (f88 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     f50:	480e      	ldr	r0, [pc, #56]	; (f8c <_Z41__static_initialization_and_destruction_0ii+0x90>)
     f52:	4b07      	ldr	r3, [pc, #28]	; (f70 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f54:	4798      	blx	r3
     f56:	bf00      	nop
     f58:	3708      	adds	r7, #8
     f5a:	46bd      	mov	sp, r7
     f5c:	bd80      	pop	{r7, pc}
     f5e:	bf00      	nop
     f60:	20000dec 	.word	0x20000dec
     f64:	00002ab9 	.word	0x00002ab9
     f68:	20000000 	.word	0x20000000
     f6c:	00002ad3 	.word	0x00002ad3
     f70:	00019ab1 	.word	0x00019ab1
     f74:	20000e00 	.word	0x20000e00
     f78:	00000fa5 	.word	0x00000fa5
     f7c:	00000fbf 	.word	0x00000fbf
     f80:	20000e04 	.word	0x20000e04
     f84:	00000d91 	.word	0x00000d91
     f88:	00000e05 	.word	0x00000e05
     f8c:	200010f4 	.word	0x200010f4

00000f90 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     f90:	b580      	push	{r7, lr}
     f92:	af00      	add	r7, sp, #0
     f94:	f64f 71ff 	movw	r1, #65535	; 0xffff
     f98:	2001      	movs	r0, #1
     f9a:	4b01      	ldr	r3, [pc, #4]	; (fa0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     f9c:	4798      	blx	r3
     f9e:	bd80      	pop	{r7, pc}
     fa0:	00000efd 	.word	0x00000efd

00000fa4 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     fa4:	b480      	push	{r7}
     fa6:	b083      	sub	sp, #12
     fa8:	af00      	add	r7, sp, #0
     faa:	6078      	str	r0, [r7, #4]
{
	isOK=true;
     fac:	687b      	ldr	r3, [r7, #4]
     fae:	2201      	movs	r2, #1
     fb0:	701a      	strb	r2, [r3, #0]
} //CBIT_Class
     fb2:	687b      	ldr	r3, [r7, #4]
     fb4:	4618      	mov	r0, r3
     fb6:	370c      	adds	r7, #12
     fb8:	46bd      	mov	sp, r7
     fba:	bc80      	pop	{r7}
     fbc:	4770      	bx	lr

00000fbe <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     fbe:	b480      	push	{r7}
     fc0:	b083      	sub	sp, #12
     fc2:	af00      	add	r7, sp, #0
     fc4:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     fc6:	687b      	ldr	r3, [r7, #4]
     fc8:	4618      	mov	r0, r3
     fca:	370c      	adds	r7, #12
     fcc:	46bd      	mov	sp, r7
     fce:	bc80      	pop	{r7}
     fd0:	4770      	bx	lr

00000fd2 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     fd2:	b480      	push	{r7}
     fd4:	b083      	sub	sp, #12
     fd6:	af00      	add	r7, sp, #0
     fd8:	6078      	str	r0, [r7, #4]
	return	isOK;
     fda:	687b      	ldr	r3, [r7, #4]
     fdc:	781b      	ldrb	r3, [r3, #0]
     fde:	b2db      	uxtb	r3, r3
}
     fe0:	4618      	mov	r0, r3
     fe2:	370c      	adds	r7, #12
     fe4:	46bd      	mov	sp, r7
     fe6:	bc80      	pop	{r7}
     fe8:	4770      	bx	lr
	...

00000fec <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}
     fec:	b580      	push	{r7, lr}
     fee:	b082      	sub	sp, #8
     ff0:	af00      	add	r7, sp, #0
     ff2:	6078      	str	r0, [r7, #4]
     ff4:	6039      	str	r1, [r7, #0]
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	2b01      	cmp	r3, #1
     ffa:	d10c      	bne.n	1016 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     ffc:	683b      	ldr	r3, [r7, #0]
     ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1002:	4293      	cmp	r3, r2
    1004:	d107      	bne.n	1016 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1006:	4806      	ldr	r0, [pc, #24]	; (1020 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1008:	4b06      	ldr	r3, [pc, #24]	; (1024 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    100a:	4798      	blx	r3
    100c:	4a06      	ldr	r2, [pc, #24]	; (1028 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    100e:	4907      	ldr	r1, [pc, #28]	; (102c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1010:	4803      	ldr	r0, [pc, #12]	; (1020 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1012:	4b07      	ldr	r3, [pc, #28]	; (1030 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1014:	4798      	blx	r3
    1016:	bf00      	nop
    1018:	3708      	adds	r7, #8
    101a:	46bd      	mov	sp, r7
    101c:	bd80      	pop	{r7, pc}
    101e:	bf00      	nop
    1020:	200013e8 	.word	0x200013e8
    1024:	00000fa5 	.word	0x00000fa5
    1028:	20000000 	.word	0x20000000
    102c:	00000fbf 	.word	0x00000fbf
    1030:	00019ab1 	.word	0x00019ab1

00001034 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
    1034:	b580      	push	{r7, lr}
    1036:	af00      	add	r7, sp, #0
    1038:	f64f 71ff 	movw	r1, #65535	; 0xffff
    103c:	2001      	movs	r0, #1
    103e:	4b01      	ldr	r3, [pc, #4]	; (1044 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
    1040:	4798      	blx	r3
    1042:	bd80      	pop	{r7, pc}
    1044:	00000fed 	.word	0x00000fed

00001048 <_ZN17ConfigState_ClassC1Ev>:

} ;


// default constructor
ConfigState_Class::ConfigState_Class()
    1048:	b480      	push	{r7}
    104a:	b083      	sub	sp, #12
    104c:	af00      	add	r7, sp, #0
    104e:	6078      	str	r0, [r7, #4]
    1050:	4a13      	ldr	r2, [pc, #76]	; (10a0 <_ZN17ConfigState_ClassC1Ev+0x58>)
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kHVACStateReset;
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	f240 122d 	movw	r2, #301	; 0x12d
    105c:	629a      	str	r2, [r3, #40]	; 0x28
	defaultState.callingState = kHVACStateReset;
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	f240 122d 	movw	r2, #301	; 0x12d
    1064:	62da      	str	r2, [r3, #44]	; 0x2c
	defaultState.internalCateringState = 0;
    1066:	687b      	ldr	r3, [r7, #4]
    1068:	2200      	movs	r2, #0
    106a:	631a      	str	r2, [r3, #48]	; 0x30
	//defaultState.targetUDC = 0.0;
	defaultState.cycleDuration = 0;
    106c:	687b      	ldr	r3, [r7, #4]
    106e:	2200      	movs	r2, #0
    1070:	645a      	str	r2, [r3, #68]	; 0x44
	defaultState.inStateTime = 0;
    1072:	687b      	ldr	r3, [r7, #4]
    1074:	2200      	movs	r2, #0
    1076:	63da      	str	r2, [r3, #60]	; 0x3c
	defaultState.remainingTime = 0;
    1078:	687b      	ldr	r3, [r7, #4]
    107a:	2200      	movs	r2, #0
    107c:	649a      	str	r2, [r3, #72]	; 0x48
	defaultState.waitingExceededTime = 0;
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	2200      	movs	r2, #0
    1082:	651a      	str	r2, [r3, #80]	; 0x50
	defaultState.fansOnAfterCateringCycleTime = forever;
    1084:	4b07      	ldr	r3, [pc, #28]	; (10a4 <_ZN17ConfigState_ClassC1Ev+0x5c>)
    1086:	681a      	ldr	r2, [r3, #0]
    1088:	687b      	ldr	r3, [r7, #4]
    108a:	655a      	str	r2, [r3, #84]	; 0x54
	defaultState.magic=0xCAFEBABE;
    108c:	687b      	ldr	r3, [r7, #4]
    108e:	4a06      	ldr	r2, [pc, #24]	; (10a8 <_ZN17ConfigState_ClassC1Ev+0x60>)
    1090:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	4618      	mov	r0, r3
    1096:	370c      	adds	r7, #12
    1098:	46bd      	mov	sp, r7
    109a:	bc80      	pop	{r7}
    109c:	4770      	bx	lr
    109e:	bf00      	nop
    10a0:	0002159c 	.word	0x0002159c
    10a4:	00022eb4 	.word	0x00022eb4
    10a8:	cafebabe 	.word	0xcafebabe

000010ac <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
    10ac:	b480      	push	{r7}
    10ae:	b083      	sub	sp, #12
    10b0:	af00      	add	r7, sp, #0
    10b2:	6078      	str	r0, [r7, #4]
    10b4:	4a04      	ldr	r2, [pc, #16]	; (10c8 <_ZN17ConfigState_ClassD1Ev+0x1c>)
    10b6:	687b      	ldr	r3, [r7, #4]
    10b8:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
    10ba:	687b      	ldr	r3, [r7, #4]
    10bc:	4618      	mov	r0, r3
    10be:	370c      	adds	r7, #12
    10c0:	46bd      	mov	sp, r7
    10c2:	bc80      	pop	{r7}
    10c4:	4770      	bx	lr
    10c6:	bf00      	nop
    10c8:	0002159c 	.word	0x0002159c

000010cc <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
    10cc:	b580      	push	{r7, lr}
    10ce:	b084      	sub	sp, #16
    10d0:	af00      	add	r7, sp, #0
    10d2:	60f8      	str	r0, [r7, #12]
    10d4:	60b9      	str	r1, [r7, #8]
    10d6:	4611      	mov	r1, r2
    10d8:	461a      	mov	r2, r3
    10da:	460b      	mov	r3, r1
    10dc:	71fb      	strb	r3, [r7, #7]
    10de:	4613      	mov	r3, r2
    10e0:	71bb      	strb	r3, [r7, #6]
	
	if (config)
    10e2:	79fb      	ldrb	r3, [r7, #7]
    10e4:	2b00      	cmp	r3, #0
    10e6:	d00f      	beq.n	1108 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x3c>
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
    10e8:	68fb      	ldr	r3, [r7, #12]
    10ea:	336c      	adds	r3, #108	; 0x6c
    10ec:	22ac      	movs	r2, #172	; 0xac
    10ee:	4908      	ldr	r1, [pc, #32]	; (1110 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x44>)
    10f0:	4618      	mov	r0, r3
    10f2:	4b08      	ldr	r3, [pc, #32]	; (1114 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x48>)
    10f4:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
    10f6:	68fb      	ldr	r3, [r7, #12]
    10f8:	68ba      	ldr	r2, [r7, #8]
    10fa:	679a      	str	r2, [r3, #120]	; 0x78
		memory.writeConfigurationDataArea(configuration);
    10fc:	68fb      	ldr	r3, [r7, #12]
    10fe:	336c      	adds	r3, #108	; 0x6c
    1100:	4619      	mov	r1, r3
    1102:	4805      	ldr	r0, [pc, #20]	; (1118 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4c>)
    1104:	4b05      	ldr	r3, [pc, #20]	; (111c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x50>)
    1106:	4798      	blx	r3
	}
	
	
}
    1108:	bf00      	nop
    110a:	3710      	adds	r7, #16
    110c:	46bd      	mov	sp, r7
    110e:	bd80      	pop	{r7, pc}
    1110:	00021190 	.word	0x00021190
    1114:	0001d37d 	.word	0x0001d37d
    1118:	20002a50 	.word	0x20002a50
    111c:	00002be5 	.word	0x00002be5

00001120 <_ZN17ConfigState_Class15SetInitialStateEv>:


uint32_t ConfigState_Class::SetInitialState(){
    1120:	b580      	push	{r7, lr}
    1122:	b084      	sub	sp, #16
    1124:	af00      	add	r7, sp, #0
    1126:	6078      	str	r0, [r7, #4]
		uint32_t	r;
		r=memory.ReadApplicationState(lastHVACState);
    1128:	687b      	ldr	r3, [r7, #4]
    112a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    112e:	4619      	mov	r1, r3
    1130:	4823      	ldr	r0, [pc, #140]	; (11c0 <_ZN17ConfigState_Class15SetInitialStateEv+0xa0>)
    1132:	4b24      	ldr	r3, [pc, #144]	; (11c4 <_ZN17ConfigState_Class15SetInitialStateEv+0xa4>)
    1134:	4798      	blx	r3
    1136:	60f8      	str	r0, [r7, #12]
		if (memory.IsStateDataValid(lastHVACState))
    1138:	687b      	ldr	r3, [r7, #4]
    113a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    113e:	4619      	mov	r1, r3
    1140:	4821      	ldr	r0, [pc, #132]	; (11c8 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
    1142:	4b22      	ldr	r3, [pc, #136]	; (11cc <_ZN17ConfigState_Class15SetInitialStateEv+0xac>)
    1144:	4798      	blx	r3
    1146:	4603      	mov	r3, r0
    1148:	2b00      	cmp	r3, #0
    114a:	d007      	beq.n	115c <_ZN17ConfigState_Class15SetInitialStateEv+0x3c>
		{
				hvac.SetCurrentState(lastHVACState);
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    1152:	4619      	mov	r1, r3
    1154:	481e      	ldr	r0, [pc, #120]	; (11d0 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
    1156:	4b1f      	ldr	r3, [pc, #124]	; (11d4 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
    1158:	4798      	blx	r3
    115a:	e02b      	b.n	11b4 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
		} 
		else
		{	
			r=memory.ReadFastApplicationState(lastHVACState);
    115c:	687b      	ldr	r3, [r7, #4]
    115e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    1162:	4619      	mov	r1, r3
    1164:	481c      	ldr	r0, [pc, #112]	; (11d8 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
    1166:	4b1d      	ldr	r3, [pc, #116]	; (11dc <_ZN17ConfigState_Class15SetInitialStateEv+0xbc>)
    1168:	4798      	blx	r3
    116a:	60f8      	str	r0, [r7, #12]
			if (memory.IsFastStateDataValid(lastHVACState))
    116c:	687b      	ldr	r3, [r7, #4]
    116e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    1172:	4619      	mov	r1, r3
    1174:	4814      	ldr	r0, [pc, #80]	; (11c8 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
    1176:	4b1a      	ldr	r3, [pc, #104]	; (11e0 <_ZN17ConfigState_Class15SetInitialStateEv+0xc0>)
    1178:	4798      	blx	r3
    117a:	4603      	mov	r3, r0
    117c:	2b00      	cmp	r3, #0
    117e:	d00e      	beq.n	119e <_ZN17ConfigState_Class15SetInitialStateEv+0x7e>
			{
				hvac.SetCurrentState(lastHVACState);
    1180:	687b      	ldr	r3, [r7, #4]
    1182:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    1186:	4619      	mov	r1, r3
    1188:	4811      	ldr	r0, [pc, #68]	; (11d0 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
    118a:	4b12      	ldr	r3, [pc, #72]	; (11d4 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
    118c:	4798      	blx	r3
				memory.SaveApplicationState(lastHVACState);
    118e:	687b      	ldr	r3, [r7, #4]
    1190:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    1194:	4619      	mov	r1, r3
    1196:	4813      	ldr	r0, [pc, #76]	; (11e4 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
    1198:	4b13      	ldr	r3, [pc, #76]	; (11e8 <_ZN17ConfigState_Class15SetInitialStateEv+0xc8>)
    119a:	4798      	blx	r3
    119c:	e00a      	b.n	11b4 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
			} 
			else
			{
				hvac.SetDefaultState();
    119e:	4813      	ldr	r0, [pc, #76]	; (11ec <_ZN17ConfigState_Class15SetInitialStateEv+0xcc>)
    11a0:	4b13      	ldr	r3, [pc, #76]	; (11f0 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
    11a2:	4798      	blx	r3
				memory.WriteValidApplicationState(hvac.defaultState);
    11a4:	4913      	ldr	r1, [pc, #76]	; (11f4 <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
    11a6:	480f      	ldr	r0, [pc, #60]	; (11e4 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
    11a8:	4b13      	ldr	r3, [pc, #76]	; (11f8 <_ZN17ConfigState_Class15SetInitialStateEv+0xd8>)
    11aa:	4798      	blx	r3
				memory.WriteFastCurrentState(hvac.defaultState);
    11ac:	4911      	ldr	r1, [pc, #68]	; (11f4 <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
    11ae:	480a      	ldr	r0, [pc, #40]	; (11d8 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
    11b0:	4b12      	ldr	r3, [pc, #72]	; (11fc <_ZN17ConfigState_Class15SetInitialStateEv+0xdc>)
    11b2:	4798      	blx	r3
			}
					
		
		}

		return r;
    11b4:	68fb      	ldr	r3, [r7, #12]
	};
    11b6:	4618      	mov	r0, r3
    11b8:	3710      	adds	r7, #16
    11ba:	46bd      	mov	sp, r7
    11bc:	bd80      	pop	{r7, pc}
    11be:	bf00      	nop
    11c0:	20002be4 	.word	0x20002be4
    11c4:	00002a25 	.word	0x00002a25
    11c8:	20002a50 	.word	0x20002a50
    11cc:	00002c91 	.word	0x00002c91
    11d0:	20008034 	.word	0x20008034
    11d4:	00003fed 	.word	0x00003fed
    11d8:	20002bd4 	.word	0x20002bd4
    11dc:	00001841 	.word	0x00001841
    11e0:	00002cd5 	.word	0x00002cd5
    11e4:	20002564 	.word	0x20002564
    11e8:	000025c1 	.word	0x000025c1
    11ec:	2000824c 	.word	0x2000824c
    11f0:	00001405 	.word	0x00001405
    11f4:	20008250 	.word	0x20008250
    11f8:	000024d5 	.word	0x000024d5
    11fc:	00001889 	.word	0x00001889

00001200 <_ZN17ConfigState_Class23ConvertStatusArincLabelEv>:
	
uint32_t	ConfigState_Class::ConvertStatusArincLabel(void){
    1200:	b480      	push	{r7}
    1202:	b085      	sub	sp, #20
    1204:	af00      	add	r7, sp, #0
    1206:	6078      	str	r0, [r7, #4]
	uint32_t s=0;
    1208:	2300      	movs	r3, #0
    120a:	60fb      	str	r3, [r7, #12]
	AcknoledgeStatus as=hvac.hvacState->arincStatus;
    120c:	4b19      	ldr	r3, [pc, #100]	; (1274 <_ZN17ConfigState_Class23ConvertStatusArincLabelEv+0x74>)
    120e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    1212:	69db      	ldr	r3, [r3, #28]
    1214:	60bb      	str	r3, [r7, #8]
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    1216:	7a3b      	ldrb	r3, [r7, #8]
    1218:	461a      	mov	r2, r3
    121a:	7a7b      	ldrb	r3, [r7, #9]
    121c:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1220:	b2db      	uxtb	r3, r3
    1222:	009b      	lsls	r3, r3, #2
    1224:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
    1226:	7a7b      	ldrb	r3, [r7, #9]
    1228:	f3c3 0340 	ubfx	r3, r3, #1, #1
    122c:	b2db      	uxtb	r3, r3
    122e:	00db      	lsls	r3, r3, #3
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    1230:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
    1232:	7a7b      	ldrb	r3, [r7, #9]
    1234:	f3c3 0380 	ubfx	r3, r3, #2, #1
    1238:	b2db      	uxtb	r3, r3
    123a:	011b      	lsls	r3, r3, #4
    123c:	431a      	orrs	r2, r3
	//|(((uint32_t)0x1d)<<9)
	|(((uint32_t)as.statusFV)<<5)|(((uint32_t)as.DEFOG)<<7);
    123e:	7abb      	ldrb	r3, [r7, #10]
    1240:	015b      	lsls	r3, r3, #5
    1242:	431a      	orrs	r2, r3
    1244:	7afb      	ldrb	r3, [r7, #11]
    1246:	f3c3 0300 	ubfx	r3, r3, #0, #1
    124a:	b2db      	uxtb	r3, r3
    124c:	01db      	lsls	r3, r3, #7
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    124e:	4313      	orrs	r3, r2
    1250:	60fb      	str	r3, [r7, #12]
	lastAcknowledgeStatus=acknowledgeStatus;
    1252:	687b      	ldr	r3, [r7, #4]
    1254:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
    1258:	687b      	ldr	r3, [r7, #4]
    125a:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	acknowledgeStatus=s;
    125e:	687b      	ldr	r3, [r7, #4]
    1260:	68fa      	ldr	r2, [r7, #12]
    1262:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	return s;
    1266:	68fb      	ldr	r3, [r7, #12]
}	
    1268:	4618      	mov	r0, r3
    126a:	3714      	adds	r7, #20
    126c:	46bd      	mov	sp, r7
    126e:	bc80      	pop	{r7}
    1270:	4770      	bx	lr
    1272:	bf00      	nop
    1274:	20008034 	.word	0x20008034

00001278 <_ZN17ConfigState_Class20GetAcknowledgeStatusEv>:

uint32_t ConfigState_Class::GetAcknowledgeStatus(void){
    1278:	b480      	push	{r7}
    127a:	b083      	sub	sp, #12
    127c:	af00      	add	r7, sp, #0
    127e:	6078      	str	r0, [r7, #4]
	
	return acknowledgeStatus;
    1280:	687b      	ldr	r3, [r7, #4]
    1282:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
}
    1286:	4618      	mov	r0, r3
    1288:	370c      	adds	r7, #12
    128a:	46bd      	mov	sp, r7
    128c:	bc80      	pop	{r7}
    128e:	4770      	bx	lr

00001290 <_ZN17ConfigState_Class25IsStatusArinclabelChangedEv>:
bool  ConfigState_Class::IsStatusArinclabelChanged(void){
    1290:	b580      	push	{r7, lr}
    1292:	b082      	sub	sp, #8
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
	ConvertStatusArincLabel();
    1298:	6878      	ldr	r0, [r7, #4]
    129a:	4b08      	ldr	r3, [pc, #32]	; (12bc <_ZN17ConfigState_Class25IsStatusArinclabelChangedEv+0x2c>)
    129c:	4798      	blx	r3
	return lastAcknowledgeStatus!=acknowledgeStatus;
    129e:	687b      	ldr	r3, [r7, #4]
    12a0:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    12aa:	429a      	cmp	r2, r3
    12ac:	bf14      	ite	ne
    12ae:	2301      	movne	r3, #1
    12b0:	2300      	moveq	r3, #0
    12b2:	b2db      	uxtb	r3, r3
}
    12b4:	4618      	mov	r0, r3
    12b6:	3708      	adds	r7, #8
    12b8:	46bd      	mov	sp, r7
    12ba:	bd80      	pop	{r7, pc}
    12bc:	00001201 	.word	0x00001201

000012c0 <_ZN17ConfigState_Class10PrintStateEv>:
		st=is;
	}
	s=uint32_t(st.rawStatus);
	return	s;
}
void	ConfigState_Class::PrintState(void){
    12c0:	b580      	push	{r7, lr}
    12c2:	b0a2      	sub	sp, #136	; 0x88
    12c4:	af00      	add	r7, sp, #0
    12c6:	6078      	str	r0, [r7, #4]
	HVACState	hs;
	bool	done=false;
    12c8:	2300      	movs	r3, #0
    12ca:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	hvac.GetCurrentState(hs);
    12ce:	f107 030c 	add.w	r3, r7, #12
    12d2:	4619      	mov	r1, r3
    12d4:	483d      	ldr	r0, [pc, #244]	; (13cc <_ZN17ConfigState_Class10PrintStateEv+0x10c>)
    12d6:	4b3e      	ldr	r3, [pc, #248]	; (13d0 <_ZN17ConfigState_Class10PrintStateEv+0x110>)
    12d8:	4798      	blx	r3
	uint32_t	nowTime=(uint32_t)hs.now;
    12da:	693b      	ldr	r3, [r7, #16]
    12dc:	60bb      	str	r3, [r7, #8]
	char *act=ctime((time_t *)&nowTime);
    12de:	f107 0308 	add.w	r3, r7, #8
    12e2:	4618      	mov	r0, r3
    12e4:	4b3b      	ldr	r3, [pc, #236]	; (13d4 <_ZN17ConfigState_Class10PrintStateEv+0x114>)
    12e6:	4798      	blx	r3
    12e8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	k=sizeof(printableNamesHVACState)/(sizeof(char*));
    12ec:	687b      	ldr	r3, [r7, #4]
    12ee:	2206      	movs	r2, #6
    12f0:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
	for (uint8_t ii = 0; ii < k; ii++)
    12f4:	2300      	movs	r3, #0
    12f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    12fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    12fe:	687a      	ldr	r2, [r7, #4]
    1300:	f892 2296 	ldrb.w	r2, [r2, #662]	; 0x296
    1304:	4293      	cmp	r3, r2
    1306:	da5d      	bge.n	13c4 <_ZN17ConfigState_Class10PrintStateEv+0x104>
	{
	
		usb<<printableNamesHVACState[ii]<<" : ";
    1308:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    130c:	009b      	lsls	r3, r3, #2
    130e:	4a32      	ldr	r2, [pc, #200]	; (13d8 <_ZN17ConfigState_Class10PrintStateEv+0x118>)
    1310:	4413      	add	r3, r2
    1312:	4619      	mov	r1, r3
    1314:	4831      	ldr	r0, [pc, #196]	; (13dc <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    1316:	4b32      	ldr	r3, [pc, #200]	; (13e0 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    1318:	4798      	blx	r3
    131a:	4603      	mov	r3, r0
    131c:	4931      	ldr	r1, [pc, #196]	; (13e4 <_ZN17ConfigState_Class10PrintStateEv+0x124>)
    131e:	4618      	mov	r0, r3
    1320:	4b31      	ldr	r3, [pc, #196]	; (13e8 <_ZN17ConfigState_Class10PrintStateEv+0x128>)
    1322:	4798      	blx	r3
	
		switch (ii)
    1324:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    1328:	2b05      	cmp	r3, #5
    132a:	d83b      	bhi.n	13a4 <_ZN17ConfigState_Class10PrintStateEv+0xe4>
    132c:	a201      	add	r2, pc, #4	; (adr r2, 1334 <_ZN17ConfigState_Class10PrintStateEv+0x74>)
    132e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1332:	bf00      	nop
    1334:	0000134d 	.word	0x0000134d
    1338:	0000135f 	.word	0x0000135f
    133c:	00001371 	.word	0x00001371
    1340:	000013af 	.word	0x000013af
    1344:	00001383 	.word	0x00001383
    1348:	0000138f 	.word	0x0000138f
		{
			case 0:
				usb<<(uint32_t)hs.currentState;
    134c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    134e:	677b      	str	r3, [r7, #116]	; 0x74
    1350:	f107 0374 	add.w	r3, r7, #116	; 0x74
    1354:	4619      	mov	r1, r3
    1356:	4821      	ldr	r0, [pc, #132]	; (13dc <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    1358:	4b24      	ldr	r3, [pc, #144]	; (13ec <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    135a:	4798      	blx	r3
			/* Your code here */
			break;
    135c:	e028      	b.n	13b0 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			case 1:
				usb<<(uint32_t)hs.cycleDuration;
    135e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1360:	67bb      	str	r3, [r7, #120]	; 0x78
    1362:	f107 0378 	add.w	r3, r7, #120	; 0x78
    1366:	4619      	mov	r1, r3
    1368:	481c      	ldr	r0, [pc, #112]	; (13dc <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    136a:	4b20      	ldr	r3, [pc, #128]	; (13ec <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    136c:	4798      	blx	r3
			/* Your code here */
			break;
    136e:	e01f      	b.n	13b0 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			case 2:
				usb<<(uint32_t)hs.remainingTime;
    1370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1372:	67fb      	str	r3, [r7, #124]	; 0x7c
    1374:	f107 037c 	add.w	r3, r7, #124	; 0x7c
    1378:	4619      	mov	r1, r3
    137a:	4818      	ldr	r0, [pc, #96]	; (13dc <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    137c:	4b1b      	ldr	r3, [pc, #108]	; (13ec <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    137e:	4798      	blx	r3
			/* Your code here */
			break;
    1380:	e016      	b.n	13b0 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
				//usb<<(uint32_t)hs.targetPower;
			/* Your code here */
			break;
			case 4:
				
				usb.print(act);
    1382:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    1386:	4815      	ldr	r0, [pc, #84]	; (13dc <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    1388:	4b19      	ldr	r3, [pc, #100]	; (13f0 <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    138a:	4798      	blx	r3
			/* Your code here */
			break;
    138c:	e010      	b.n	13b0 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			case 5:
				usb<<"0x";
    138e:	4919      	ldr	r1, [pc, #100]	; (13f4 <_ZN17ConfigState_Class10PrintStateEv+0x134>)
    1390:	4812      	ldr	r0, [pc, #72]	; (13dc <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    1392:	4b19      	ldr	r3, [pc, #100]	; (13f8 <_ZN17ConfigState_Class10PrintStateEv+0x138>)
    1394:	4798      	blx	r3
				usb.print(hs.magic,HEX);
    1396:	68fb      	ldr	r3, [r7, #12]
    1398:	2210      	movs	r2, #16
    139a:	4619      	mov	r1, r3
    139c:	480f      	ldr	r0, [pc, #60]	; (13dc <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    139e:	4b17      	ldr	r3, [pc, #92]	; (13fc <_ZN17ConfigState_Class10PrintStateEv+0x13c>)
    13a0:	4798      	blx	r3
			
				/* Your code here */
			break;
    13a2:	e005      	b.n	13b0 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			default:
				i=sizeof(printableNamesHVACState);
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	2218      	movs	r2, #24
    13a8:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
				
			/* Your code here */
			break;
    13ac:	e000      	b.n	13b0 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			break;
    13ae:	bf00      	nop
		}
		usb<<NEWLINE;
    13b0:	4913      	ldr	r1, [pc, #76]	; (1400 <_ZN17ConfigState_Class10PrintStateEv+0x140>)
    13b2:	480a      	ldr	r0, [pc, #40]	; (13dc <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13b4:	4b10      	ldr	r3, [pc, #64]	; (13f8 <_ZN17ConfigState_Class10PrintStateEv+0x138>)
    13b6:	4798      	blx	r3
	for (uint8_t ii = 0; ii < k; ii++)
    13b8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    13bc:	3301      	adds	r3, #1
    13be:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    13c2:	e79a      	b.n	12fa <_ZN17ConfigState_Class10PrintStateEv+0x3a>
			
	}
	
}
    13c4:	bf00      	nop
    13c6:	3788      	adds	r7, #136	; 0x88
    13c8:	46bd      	mov	sp, r7
    13ca:	bd80      	pop	{r7, pc}
    13cc:	20008034 	.word	0x20008034
    13d0:	00003f99 	.word	0x00003f99
    13d4:	0001d095 	.word	0x0001d095
    13d8:	20000050 	.word	0x20000050
    13dc:	2000a140 	.word	0x2000a140
    13e0:	00001429 	.word	0x00001429
    13e4:	00021588 	.word	0x00021588
    13e8:	0000144d 	.word	0x0000144d
    13ec:	0000146d 	.word	0x0000146d
    13f0:	000180b1 	.word	0x000180b1
    13f4:	0002158c 	.word	0x0002158c
    13f8:	00000c89 	.word	0x00000c89
    13fc:	000180f9 	.word	0x000180f9
    1400:	00021590 	.word	0x00021590

00001404 <_ZN17ConfigState_Class15SetDefaultStateEv>:
void	ConfigState_Class::SetDefaultState(void){
    1404:	b580      	push	{r7, lr}
    1406:	b082      	sub	sp, #8
    1408:	af00      	add	r7, sp, #0
    140a:	6078      	str	r0, [r7, #4]
	hvac.SetCurrentState(defaultState);
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	3304      	adds	r3, #4
    1410:	4619      	mov	r1, r3
    1412:	4803      	ldr	r0, [pc, #12]	; (1420 <_ZN17ConfigState_Class15SetDefaultStateEv+0x1c>)
    1414:	4b03      	ldr	r3, [pc, #12]	; (1424 <_ZN17ConfigState_Class15SetDefaultStateEv+0x20>)
    1416:	4798      	blx	r3

}
    1418:	bf00      	nop
    141a:	3708      	adds	r7, #8
    141c:	46bd      	mov	sp, r7
    141e:	bd80      	pop	{r7, pc}
    1420:	20008034 	.word	0x20008034
    1424:	00003fed 	.word	0x00003fed

00001428 <_ZlsIPKcER5PrintS3_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1428:	b580      	push	{r7, lr}
    142a:	b082      	sub	sp, #8
    142c:	af00      	add	r7, sp, #0
    142e:	6078      	str	r0, [r7, #4]
    1430:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1432:	683b      	ldr	r3, [r7, #0]
    1434:	681b      	ldr	r3, [r3, #0]
    1436:	4619      	mov	r1, r3
    1438:	6878      	ldr	r0, [r7, #4]
    143a:	4b03      	ldr	r3, [pc, #12]	; (1448 <_ZlsIPKcER5PrintS3_RKT_+0x20>)
    143c:	4798      	blx	r3
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	4618      	mov	r0, r3
    1442:	3708      	adds	r7, #8
    1444:	46bd      	mov	sp, r7
    1446:	bd80      	pop	{r7, pc}
    1448:	000180b1 	.word	0x000180b1

0000144c <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    144c:	b580      	push	{r7, lr}
    144e:	b082      	sub	sp, #8
    1450:	af00      	add	r7, sp, #0
    1452:	6078      	str	r0, [r7, #4]
    1454:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1456:	6839      	ldr	r1, [r7, #0]
    1458:	6878      	ldr	r0, [r7, #4]
    145a:	4b03      	ldr	r3, [pc, #12]	; (1468 <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
    145c:	4798      	blx	r3
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	4618      	mov	r0, r3
    1462:	3708      	adds	r7, #8
    1464:	46bd      	mov	sp, r7
    1466:	bd80      	pop	{r7, pc}
    1468:	000180b1 	.word	0x000180b1

0000146c <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    146c:	b580      	push	{r7, lr}
    146e:	b082      	sub	sp, #8
    1470:	af00      	add	r7, sp, #0
    1472:	6078      	str	r0, [r7, #4]
    1474:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1476:	683b      	ldr	r3, [r7, #0]
    1478:	681b      	ldr	r3, [r3, #0]
    147a:	220a      	movs	r2, #10
    147c:	4619      	mov	r1, r3
    147e:	6878      	ldr	r0, [r7, #4]
    1480:	4b03      	ldr	r3, [pc, #12]	; (1490 <_ZlsImER5PrintS1_RKT_+0x24>)
    1482:	4798      	blx	r3
    1484:	687b      	ldr	r3, [r7, #4]
    1486:	4618      	mov	r0, r3
    1488:	3708      	adds	r7, #8
    148a:	46bd      	mov	sp, r7
    148c:	bd80      	pop	{r7, pc}
    148e:	bf00      	nop
    1490:	000180f9 	.word	0x000180f9

00001494 <_ZN11CRC32_ClassC1Ev>:

#include "CRC32_Class.h"
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
    1494:	b480      	push	{r7}
    1496:	b083      	sub	sp, #12
    1498:	af00      	add	r7, sp, #0
    149a:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
    149c:	687b      	ldr	r3, [r7, #4]
    149e:	4618      	mov	r0, r3
    14a0:	370c      	adds	r7, #12
    14a2:	46bd      	mov	sp, r7
    14a4:	bc80      	pop	{r7}
    14a6:	4770      	bx	lr

000014a8 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
    14a8:	b480      	push	{r7}
    14aa:	b083      	sub	sp, #12
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	4618      	mov	r0, r3
    14b4:	370c      	adds	r7, #12
    14b6:	46bd      	mov	sp, r7
    14b8:	bc80      	pop	{r7}
    14ba:	4770      	bx	lr

000014bc <_ZN11CRC32_Class4InitEm>:

uint32_t	CRC32_Class::Init(uint32_t refCRC/* =0xFFFFFFFF */){
    14bc:	b580      	push	{r7, lr}
    14be:	b082      	sub	sp, #8
    14c0:	af00      	add	r7, sp, #0
    14c2:	6078      	str	r0, [r7, #4]
    14c4:	6039      	str	r1, [r7, #0]
	crc_sync_enable(&CRC_CALC);
    14c6:	4806      	ldr	r0, [pc, #24]	; (14e0 <_ZN11CRC32_Class4InitEm+0x24>)
    14c8:	4b06      	ldr	r3, [pc, #24]	; (14e4 <_ZN11CRC32_Class4InitEm+0x28>)
    14ca:	4798      	blx	r3
	refCRC32=refCRC;
    14cc:	687b      	ldr	r3, [r7, #4]
    14ce:	683a      	ldr	r2, [r7, #0]
    14d0:	601a      	str	r2, [r3, #0]
	return	refCRC32;
    14d2:	687b      	ldr	r3, [r7, #4]
    14d4:	681b      	ldr	r3, [r3, #0]
}
    14d6:	4618      	mov	r0, r3
    14d8:	3708      	adds	r7, #8
    14da:	46bd      	mov	sp, r7
    14dc:	bd80      	pop	{r7, pc}
    14de:	bf00      	nop
    14e0:	2000a778 	.word	0x2000a778
    14e4:	000063e1 	.word	0x000063e1

000014e8 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    14e8:	b590      	push	{r4, r7, lr}
    14ea:	b083      	sub	sp, #12
    14ec:	af00      	add	r7, sp, #0
    14ee:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
    14f0:	4b07      	ldr	r3, [pc, #28]	; (1510 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
    14f2:	6878      	ldr	r0, [r7, #4]
    14f4:	4798      	blx	r3
    14f6:	4603      	mov	r3, r0
    14f8:	460c      	mov	r4, r1
    14fa:	4618      	mov	r0, r3
    14fc:	4621      	mov	r1, r4
    14fe:	4b05      	ldr	r3, [pc, #20]	; (1514 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x2c>)
    1500:	4798      	blx	r3
    1502:	4603      	mov	r3, r0
    1504:	460c      	mov	r4, r1
    1506:	4618      	mov	r0, r3
    1508:	4621      	mov	r1, r4
    150a:	370c      	adds	r7, #12
    150c:	46bd      	mov	sp, r7
    150e:	bd90      	pop	{r4, r7, pc}
    1510:	0001c0c1 	.word	0x0001c0c1
    1514:	00019ac1 	.word	0x00019ac1

00001518 <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
    1518:	b590      	push	{r4, r7, lr}
    151a:	b087      	sub	sp, #28
    151c:	af00      	add	r7, sp, #0
    151e:	60f8      	str	r0, [r7, #12]
    1520:	60b9      	str	r1, [r7, #8]
    1522:	607a      	str	r2, [r7, #4]
	uint32_t	lenght32=(uint32_t)floor(len/4);
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	089b      	lsrs	r3, r3, #2
    1528:	4618      	mov	r0, r3
    152a:	4b0f      	ldr	r3, [pc, #60]	; (1568 <_ZN11CRC32_Class12CalculateCRCEPmm+0x50>)
    152c:	4798      	blx	r3
    152e:	460a      	mov	r2, r1
    1530:	4601      	mov	r1, r0
    1532:	4b0e      	ldr	r3, [pc, #56]	; (156c <_ZN11CRC32_Class12CalculateCRCEPmm+0x54>)
    1534:	4608      	mov	r0, r1
    1536:	4611      	mov	r1, r2
    1538:	4798      	blx	r3
    153a:	4603      	mov	r3, r0
    153c:	617b      	str	r3, [r7, #20]
	uint32_t crc=Init();
    153e:	f04f 31ff 	mov.w	r1, #4294967295
    1542:	68f8      	ldr	r0, [r7, #12]
    1544:	4b0a      	ldr	r3, [pc, #40]	; (1570 <_ZN11CRC32_Class12CalculateCRCEPmm+0x58>)
    1546:	4798      	blx	r3
    1548:	4603      	mov	r3, r0
    154a:	613b      	str	r3, [r7, #16]
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
    154c:	f107 0310 	add.w	r3, r7, #16
    1550:	697a      	ldr	r2, [r7, #20]
    1552:	68b9      	ldr	r1, [r7, #8]
    1554:	4807      	ldr	r0, [pc, #28]	; (1574 <_ZN11CRC32_Class12CalculateCRCEPmm+0x5c>)
    1556:	4c08      	ldr	r4, [pc, #32]	; (1578 <_ZN11CRC32_Class12CalculateCRCEPmm+0x60>)
    1558:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
    155a:	693b      	ldr	r3, [r7, #16]
    155c:	43db      	mvns	r3, r3
    155e:	4618      	mov	r0, r3
    1560:	371c      	adds	r7, #28
    1562:	46bd      	mov	sp, r7
    1564:	bd90      	pop	{r4, r7, pc}
    1566:	bf00      	nop
    1568:	000014e9 	.word	0x000014e9
    156c:	0001c75d 	.word	0x0001c75d
    1570:	000014bd 	.word	0x000014bd
    1574:	2000a778 	.word	0x2000a778
    1578:	0000641d 	.word	0x0000641d

0000157c <_ZN15DataLoger_ClassC1Ev>:
#include "ConfigurationData.h"
#include "FlashHandler_Class.h"
#include "N25Q256_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
    157c:	b580      	push	{r7, lr}
    157e:	b082      	sub	sp, #8
    1580:	af00      	add	r7, sp, #0
    1582:	6078      	str	r0, [r7, #4]
    1584:	687b      	ldr	r3, [r7, #4]
    1586:	4618      	mov	r0, r3
    1588:	4b06      	ldr	r3, [pc, #24]	; (15a4 <_ZN15DataLoger_ClassC1Ev+0x28>)
    158a:	4798      	blx	r3
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
    1592:	4618      	mov	r0, r3
    1594:	4b04      	ldr	r3, [pc, #16]	; (15a8 <_ZN15DataLoger_ClassC1Ev+0x2c>)
    1596:	4798      	blx	r3
{
} //DataLoger_Class
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	4618      	mov	r0, r3
    159c:	3708      	adds	r7, #8
    159e:	46bd      	mov	sp, r7
    15a0:	bd80      	pop	{r7, pc}
    15a2:	bf00      	nop
    15a4:	0001675d 	.word	0x0001675d
    15a8:	000015e1 	.word	0x000015e1

000015ac <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
    15ac:	b580      	push	{r7, lr}
    15ae:	b082      	sub	sp, #8
    15b0:	af00      	add	r7, sp, #0
    15b2:	6078      	str	r0, [r7, #4]
    15b4:	687b      	ldr	r3, [r7, #4]
    15b6:	4618      	mov	r0, r3
    15b8:	4b03      	ldr	r3, [pc, #12]	; (15c8 <_ZN15DataLoger_ClassD1Ev+0x1c>)
    15ba:	4798      	blx	r3
{
} //~DataLoger_Class
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	4618      	mov	r0, r3
    15c0:	3708      	adds	r7, #8
    15c2:	46bd      	mov	sp, r7
    15c4:	bd80      	pop	{r7, pc}
    15c6:	bf00      	nop
    15c8:	00016799 	.word	0x00016799

000015cc <_ZN15DataLoger_Class13LogResetEventEv>:
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)PTR_CONFIG_DATA(cd),add,sizeof(dataOnMemory));
	
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
    15cc:	b480      	push	{r7}
    15ce:	b083      	sub	sp, #12
    15d0:	af00      	add	r7, sp, #0
    15d2:	6078      	str	r0, [r7, #4]
	return 0;
    15d4:	2300      	movs	r3, #0
    15d6:	4618      	mov	r0, r3
    15d8:	370c      	adds	r7, #12
    15da:	46bd      	mov	sp, r7
    15dc:	bc80      	pop	{r7}
    15de:	4770      	bx	lr

000015e0 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
    15e0:	b580      	push	{r7, lr}
    15e2:	b082      	sub	sp, #8
    15e4:	af00      	add	r7, sp, #0
    15e6:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
    15e8:	687b      	ldr	r3, [r7, #4]
    15ea:	f44f 7200 	mov.w	r2, #512	; 0x200
    15ee:	2100      	movs	r1, #0
    15f0:	4618      	mov	r0, r3
    15f2:	4b05      	ldr	r3, [pc, #20]	; (1608 <_ZN11RingBufferNILi512EEC1Ev+0x28>)
    15f4:	4798      	blx	r3
    clear();
    15f6:	6878      	ldr	r0, [r7, #4]
    15f8:	4b04      	ldr	r3, [pc, #16]	; (160c <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
    15fa:	4798      	blx	r3
}
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	4618      	mov	r0, r3
    1600:	3708      	adds	r7, #8
    1602:	46bd      	mov	sp, r7
    1604:	bd80      	pop	{r7, pc}
    1606:	bf00      	nop
    1608:	0001d4b1 	.word	0x0001d4b1
    160c:	00001611 	.word	0x00001611

00001610 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
    1610:	b480      	push	{r7}
    1612:	b083      	sub	sp, #12
    1614:	af00      	add	r7, sp, #0
    1616:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
    1618:	687b      	ldr	r3, [r7, #4]
    161a:	2200      	movs	r2, #0
    161c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	2200      	movs	r2, #0
    1624:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
    1628:	bf00      	nop
    162a:	370c      	adds	r7, #12
    162c:	46bd      	mov	sp, r7
    162e:	bc80      	pop	{r7}
    1630:	4770      	bx	lr
	...

00001634 <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
    1634:	b580      	push	{r7, lr}
    1636:	b082      	sub	sp, #8
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
    163c:	687b      	ldr	r3, [r7, #4]
    163e:	33a8      	adds	r3, #168	; 0xa8
    1640:	4618      	mov	r0, r3
    1642:	4b07      	ldr	r3, [pc, #28]	; (1660 <_ZN14DateTime_ClassC1Ev+0x2c>)
    1644:	4798      	blx	r3
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	4618      	mov	r0, r3
    164a:	4b06      	ldr	r3, [pc, #24]	; (1664 <_ZN14DateTime_ClassC1Ev+0x30>)
    164c:	4798      	blx	r3
    164e:	4a06      	ldr	r2, [pc, #24]	; (1668 <_ZN14DateTime_ClassC1Ev+0x34>)
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	4618      	mov	r0, r3
    1658:	3708      	adds	r7, #8
    165a:	46bd      	mov	sp, r7
    165c:	bd80      	pop	{r7, pc}
    165e:	bf00      	nop
    1660:	000017d7 	.word	0x000017d7
    1664:	00016b6d 	.word	0x00016b6d
    1668:	000215a8 	.word	0x000215a8

0000166c <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
    166c:	b580      	push	{r7, lr}
    166e:	b082      	sub	sp, #8
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	4a08      	ldr	r2, [pc, #32]	; (1698 <_ZN14DateTime_ClassD1Ev+0x2c>)
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	601a      	str	r2, [r3, #0]
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	4618      	mov	r0, r3
    167e:	4b07      	ldr	r3, [pc, #28]	; (169c <_ZN14DateTime_ClassD1Ev+0x30>)
    1680:	4798      	blx	r3
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	33a8      	adds	r3, #168	; 0xa8
    1686:	4618      	mov	r0, r3
    1688:	4b05      	ldr	r3, [pc, #20]	; (16a0 <_ZN14DateTime_ClassD1Ev+0x34>)
    168a:	4798      	blx	r3
{
} //~DateTime_Class
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	4618      	mov	r0, r3
    1690:	3708      	adds	r7, #8
    1692:	46bd      	mov	sp, r7
    1694:	bd80      	pop	{r7, pc}
    1696:	bf00      	nop
    1698:	000215a8 	.word	0x000215a8
    169c:	00016bdd 	.word	0x00016bdd
    16a0:	000017eb 	.word	0x000017eb

000016a4 <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
    16a4:	b580      	push	{r7, lr}
    16a6:	b084      	sub	sp, #16
    16a8:	af00      	add	r7, sp, #0
    16aa:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&eepromMap->stack;
    16ac:	4b0b      	ldr	r3, [pc, #44]	; (16dc <_ZN14DateTime_Class4InitEv+0x38>)
    16ae:	681b      	ldr	r3, [r3, #0]
    16b0:	3370      	adds	r3, #112	; 0x70
    16b2:	60fb      	str	r3, [r7, #12]
	calendar.SetCalendarStackAddress(add);
    16b4:	68f9      	ldr	r1, [r7, #12]
    16b6:	480a      	ldr	r0, [pc, #40]	; (16e0 <_ZN14DateTime_Class4InitEv+0x3c>)
    16b8:	4b0a      	ldr	r3, [pc, #40]	; (16e4 <_ZN14DateTime_Class4InitEv+0x40>)
    16ba:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[0];
    16bc:	4b07      	ldr	r3, [pc, #28]	; (16dc <_ZN14DateTime_Class4InitEv+0x38>)
    16be:	681b      	ldr	r3, [r3, #0]
    16c0:	3374      	adds	r3, #116	; 0x74
    16c2:	60bb      	str	r3, [r7, #8]
	calendar.SetCalendarAddress(addTimeLogs);
    16c4:	68b9      	ldr	r1, [r7, #8]
    16c6:	4806      	ldr	r0, [pc, #24]	; (16e0 <_ZN14DateTime_Class4InitEv+0x3c>)
    16c8:	4b07      	ldr	r3, [pc, #28]	; (16e8 <_ZN14DateTime_Class4InitEv+0x44>)
    16ca:	4798      	blx	r3
	calendar.Init();
    16cc:	4804      	ldr	r0, [pc, #16]	; (16e0 <_ZN14DateTime_Class4InitEv+0x3c>)
    16ce:	4b07      	ldr	r3, [pc, #28]	; (16ec <_ZN14DateTime_Class4InitEv+0x48>)
    16d0:	4798      	blx	r3
	
}
    16d2:	bf00      	nop
    16d4:	3710      	adds	r7, #16
    16d6:	46bd      	mov	sp, r7
    16d8:	bd80      	pop	{r7, pc}
    16da:	bf00      	nop
    16dc:	200014a8 	.word	0x200014a8
    16e0:	20009ec0 	.word	0x20009ec0
    16e4:	000174dd 	.word	0x000174dd
    16e8:	000174fd 	.word	0x000174fd
    16ec:	00016c05 	.word	0x00016c05

000016f0 <_Z41__static_initialization_and_destruction_0ii>:

    16f0:	b580      	push	{r7, lr}
    16f2:	b082      	sub	sp, #8
    16f4:	af00      	add	r7, sp, #0
    16f6:	6078      	str	r0, [r7, #4]
    16f8:	6039      	str	r1, [r7, #0]
    16fa:	687b      	ldr	r3, [r7, #4]
    16fc:	2b01      	cmp	r3, #1
    16fe:	d10c      	bne.n	171a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1700:	683b      	ldr	r3, [r7, #0]
    1702:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1706:	4293      	cmp	r3, r2
    1708:	d107      	bne.n	171a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    170a:	4806      	ldr	r0, [pc, #24]	; (1724 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    170c:	4b06      	ldr	r3, [pc, #24]	; (1728 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    170e:	4798      	blx	r3
    1710:	4a06      	ldr	r2, [pc, #24]	; (172c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1712:	4907      	ldr	r1, [pc, #28]	; (1730 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1714:	4803      	ldr	r0, [pc, #12]	; (1724 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1716:	4b07      	ldr	r3, [pc, #28]	; (1734 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1718:	4798      	blx	r3
    171a:	bf00      	nop
    171c:	3708      	adds	r7, #8
    171e:	46bd      	mov	sp, r7
    1720:	bd80      	pop	{r7, pc}
    1722:	bf00      	nop
    1724:	200013f0 	.word	0x200013f0
    1728:	00001635 	.word	0x00001635
    172c:	20000000 	.word	0x20000000
    1730:	0000166d 	.word	0x0000166d
    1734:	00019ab1 	.word	0x00019ab1

00001738 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
    1738:	b580      	push	{r7, lr}
    173a:	af00      	add	r7, sp, #0
    173c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1740:	2001      	movs	r0, #1
    1742:	4b01      	ldr	r3, [pc, #4]	; (1748 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
    1744:	4798      	blx	r3
    1746:	bd80      	pop	{r7, pc}
    1748:	000016f1 	.word	0x000016f1

0000174c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    174c:	b580      	push	{r7, lr}
    174e:	b082      	sub	sp, #8
    1750:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1752:	4b16      	ldr	r3, [pc, #88]	; (17ac <Reset_Handler+0x60>)
    1754:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1756:	4b16      	ldr	r3, [pc, #88]	; (17b0 <Reset_Handler+0x64>)
    1758:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    175a:	687a      	ldr	r2, [r7, #4]
    175c:	683b      	ldr	r3, [r7, #0]
    175e:	429a      	cmp	r2, r3
    1760:	d00c      	beq.n	177c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1762:	e007      	b.n	1774 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1764:	683b      	ldr	r3, [r7, #0]
    1766:	1d1a      	adds	r2, r3, #4
    1768:	603a      	str	r2, [r7, #0]
    176a:	687a      	ldr	r2, [r7, #4]
    176c:	1d11      	adds	r1, r2, #4
    176e:	6079      	str	r1, [r7, #4]
    1770:	6812      	ldr	r2, [r2, #0]
    1772:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1774:	683b      	ldr	r3, [r7, #0]
    1776:	4a0f      	ldr	r2, [pc, #60]	; (17b4 <Reset_Handler+0x68>)
    1778:	4293      	cmp	r3, r2
    177a:	d3f3      	bcc.n	1764 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    177c:	4b0e      	ldr	r3, [pc, #56]	; (17b8 <Reset_Handler+0x6c>)
    177e:	603b      	str	r3, [r7, #0]
    1780:	e004      	b.n	178c <Reset_Handler+0x40>
                *pDest++ = 0;
    1782:	683b      	ldr	r3, [r7, #0]
    1784:	1d1a      	adds	r2, r3, #4
    1786:	603a      	str	r2, [r7, #0]
    1788:	2200      	movs	r2, #0
    178a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    178c:	683b      	ldr	r3, [r7, #0]
    178e:	4a0b      	ldr	r2, [pc, #44]	; (17bc <Reset_Handler+0x70>)
    1790:	4293      	cmp	r3, r2
    1792:	d3f6      	bcc.n	1782 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1794:	4b0a      	ldr	r3, [pc, #40]	; (17c0 <Reset_Handler+0x74>)
    1796:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1798:	4a0a      	ldr	r2, [pc, #40]	; (17c4 <Reset_Handler+0x78>)
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    17a0:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    17a2:	4b09      	ldr	r3, [pc, #36]	; (17c8 <Reset_Handler+0x7c>)
    17a4:	4798      	blx	r3

        /* Branch to main function */
        main();
    17a6:	4b09      	ldr	r3, [pc, #36]	; (17cc <Reset_Handler+0x80>)
    17a8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    17aa:	e7fe      	b.n	17aa <Reset_Handler+0x5e>
    17ac:	00023814 	.word	0x00023814
    17b0:	20000000 	.word	0x20000000
    17b4:	20000c44 	.word	0x20000c44
    17b8:	20000c48 	.word	0x20000c48
    17bc:	2000a838 	.word	0x2000a838
    17c0:	00000000 	.word	0x00000000
    17c4:	e000ed00 	.word	0xe000ed00
    17c8:	0001d0e5 	.word	0x0001d0e5
    17cc:	00001fd5 	.word	0x00001fd5

000017d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    17d0:	b480      	push	{r7}
    17d2:	af00      	add	r7, sp, #0
        while (1) {
    17d4:	e7fe      	b.n	17d4 <Dummy_Handler+0x4>

000017d6 <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
    17d6:	b480      	push	{r7}
    17d8:	b083      	sub	sp, #12
    17da:	af00      	add	r7, sp, #0
    17dc:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	4618      	mov	r0, r3
    17e2:	370c      	adds	r7, #12
    17e4:	46bd      	mov	sp, r7
    17e6:	bc80      	pop	{r7}
    17e8:	4770      	bx	lr

000017ea <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
    17ea:	b480      	push	{r7}
    17ec:	b083      	sub	sp, #12
    17ee:	af00      	add	r7, sp, #0
    17f0:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
    17f2:	687b      	ldr	r3, [r7, #4]
    17f4:	4618      	mov	r0, r3
    17f6:	370c      	adds	r7, #12
    17f8:	46bd      	mov	sp, r7
    17fa:	bc80      	pop	{r7}
    17fc:	4770      	bx	lr
	...

00001800 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv>:


uint32_t	FastStorage_Class::ReadFastCRCApplicationState(void){
    1800:	b590      	push	{r4, r7, lr}
    1802:	b087      	sub	sp, #28
    1804:	af00      	add	r7, sp, #0
    1806:	6078      	str	r0, [r7, #4]
	uint32_t	crc,add32;
	add32=(uint32_t)&eepromMap->crcAppState;
    1808:	4b0a      	ldr	r3, [pc, #40]	; (1834 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x34>)
    180a:	681b      	ldr	r3, [r3, #0]
    180c:	3304      	adds	r3, #4
    180e:	617b      	str	r3, [r7, #20]
	eepromAddress=(uint16_t)(0xffff&add32);
    1810:	697b      	ldr	r3, [r7, #20]
    1812:	b29a      	uxth	r2, r3
    1814:	687b      	ldr	r3, [r7, #4]
    1816:	819a      	strh	r2, [r3, #12]
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(&crc),eepromAddress,sizeof(uint32_t));
    1818:	687b      	ldr	r3, [r7, #4]
    181a:	899a      	ldrh	r2, [r3, #12]
    181c:	f107 010c 	add.w	r1, r7, #12
    1820:	2304      	movs	r3, #4
    1822:	4805      	ldr	r0, [pc, #20]	; (1838 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x38>)
    1824:	4c05      	ldr	r4, [pc, #20]	; (183c <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x3c>)
    1826:	47a0      	blx	r4
    1828:	6138      	str	r0, [r7, #16]
	return	crc;
    182a:	68fb      	ldr	r3, [r7, #12]
}
    182c:	4618      	mov	r0, r3
    182e:	371c      	adds	r7, #28
    1830:	46bd      	mov	sp, r7
    1832:	bd90      	pop	{r4, r7, pc}
    1834:	200014a8 	.word	0x200014a8
    1838:	20009c3c 	.word	0x20009c3c
    183c:	00016099 	.word	0x00016099

00001840 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState>:
uint32_t	FastStorage_Class::ReadFastApplicationState(HVACState& hs){
    1840:	b590      	push	{r4, r7, lr}
    1842:	b085      	sub	sp, #20
    1844:	af00      	add	r7, sp, #0
    1846:	6078      	str	r0, [r7, #4]
    1848:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->appState;
    184a:	4b0c      	ldr	r3, [pc, #48]	; (187c <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x3c>)
    184c:	681b      	ldr	r3, [r3, #0]
    184e:	3308      	adds	r3, #8
    1850:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    1852:	68fb      	ldr	r3, [r7, #12]
    1854:	b29a      	uxth	r2, r3
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	819a      	strh	r2, [r3, #12]
	handlerAppState=PTR_HVAC_STATE(&hs);
    185a:	683a      	ldr	r2, [r7, #0]
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	601a      	str	r2, [r3, #0]
	r=eeprom.ReadAddress((uint8_t*)handlerAppState,eepromAddress,sizeof(HVACState));
    1860:	687b      	ldr	r3, [r7, #4]
    1862:	6819      	ldr	r1, [r3, #0]
    1864:	687b      	ldr	r3, [r7, #4]
    1866:	899a      	ldrh	r2, [r3, #12]
    1868:	2368      	movs	r3, #104	; 0x68
    186a:	4805      	ldr	r0, [pc, #20]	; (1880 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x40>)
    186c:	4c05      	ldr	r4, [pc, #20]	; (1884 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x44>)
    186e:	47a0      	blx	r4
    1870:	60b8      	str	r0, [r7, #8]
	return	r;
    1872:	68bb      	ldr	r3, [r7, #8]
}
    1874:	4618      	mov	r0, r3
    1876:	3714      	adds	r7, #20
    1878:	46bd      	mov	sp, r7
    187a:	bd90      	pop	{r4, r7, pc}
    187c:	200014a8 	.word	0x200014a8
    1880:	20009c3c 	.word	0x20009c3c
    1884:	00016099 	.word	0x00016099

00001888 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState>:
	eepromAddress=(uint16_t)(0xffff&add32);
	handlerCalendar=(PTR_DATE_TIME)(&cdt);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(handlerCalendar),(uint8_t)eepromAddress,sizeof(calendar_date_time)*AT24MAC_BUFFER_SIZE);
	return	r;
}
uint32_t	FastStorage_Class::WriteFastCurrentState(HVACState& hs){
    1888:	b580      	push	{r7, lr}
    188a:	b084      	sub	sp, #16
    188c:	af00      	add	r7, sp, #0
    188e:	6078      	str	r0, [r7, #4]
    1890:	6039      	str	r1, [r7, #0]
	uint32_t	add32=(uint32_t)&eepromMap->appState;
    1892:	4b12      	ldr	r3, [pc, #72]	; (18dc <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x54>)
    1894:	681b      	ldr	r3, [r3, #0]
    1896:	3308      	adds	r3, #8
    1898:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    189a:	68fb      	ldr	r3, [r7, #12]
    189c:	b29a      	uxth	r2, r3
    189e:	687b      	ldr	r3, [r7, #4]
    18a0:	819a      	strh	r2, [r3, #12]
	uint32_t	w=WriteFastAppState(hs,eepromAddress);
    18a2:	687b      	ldr	r3, [r7, #4]
    18a4:	899b      	ldrh	r3, [r3, #12]
    18a6:	461a      	mov	r2, r3
    18a8:	6839      	ldr	r1, [r7, #0]
    18aa:	6878      	ldr	r0, [r7, #4]
    18ac:	4b0c      	ldr	r3, [pc, #48]	; (18e0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x58>)
    18ae:	4798      	blx	r3
    18b0:	60b8      	str	r0, [r7, #8]
	crc32=		memory.CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    18b2:	2268      	movs	r2, #104	; 0x68
    18b4:	6839      	ldr	r1, [r7, #0]
    18b6:	480b      	ldr	r0, [pc, #44]	; (18e4 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x5c>)
    18b8:	4b0b      	ldr	r3, [pc, #44]	; (18e8 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x60>)
    18ba:	4798      	blx	r3
    18bc:	4602      	mov	r2, r0
    18be:	687b      	ldr	r3, [r7, #4]
    18c0:	609a      	str	r2, [r3, #8]
	w=WriteFastCRCAppState(crc32);
    18c2:	687b      	ldr	r3, [r7, #4]
    18c4:	689b      	ldr	r3, [r3, #8]
    18c6:	4619      	mov	r1, r3
    18c8:	6878      	ldr	r0, [r7, #4]
    18ca:	4b08      	ldr	r3, [pc, #32]	; (18ec <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x64>)
    18cc:	4798      	blx	r3
    18ce:	60b8      	str	r0, [r7, #8]
	return	w;
    18d0:	68bb      	ldr	r3, [r7, #8]
}
    18d2:	4618      	mov	r0, r3
    18d4:	3710      	adds	r7, #16
    18d6:	46bd      	mov	sp, r7
    18d8:	bd80      	pop	{r7, pc}
    18da:	bf00      	nop
    18dc:	200014a8 	.word	0x200014a8
    18e0:	000018f1 	.word	0x000018f1
    18e4:	20002a50 	.word	0x20002a50
    18e8:	00001519 	.word	0x00001519
    18ec:	00001929 	.word	0x00001929

000018f0 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem>:
uint32_t	FastStorage_Class::WriteFastAppState(HVACState& hs,uint32_t add){
    18f0:	b590      	push	{r4, r7, lr}
    18f2:	b087      	sub	sp, #28
    18f4:	af00      	add	r7, sp, #0
    18f6:	60f8      	str	r0, [r7, #12]
    18f8:	60b9      	str	r1, [r7, #8]
    18fa:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    18fc:	68ba      	ldr	r2, [r7, #8]
    18fe:	68fb      	ldr	r3, [r7, #12]
    1900:	601a      	str	r2, [r3, #0]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)handlerAppState,(uint16_t)add,sizeof(HVACState));
    1902:	68fb      	ldr	r3, [r7, #12]
    1904:	6819      	ldr	r1, [r3, #0]
    1906:	687b      	ldr	r3, [r7, #4]
    1908:	b29a      	uxth	r2, r3
    190a:	2368      	movs	r3, #104	; 0x68
    190c:	4804      	ldr	r0, [pc, #16]	; (1920 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x30>)
    190e:	4c05      	ldr	r4, [pc, #20]	; (1924 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x34>)
    1910:	47a0      	blx	r4
    1912:	6178      	str	r0, [r7, #20]
	return	w;
    1914:	697b      	ldr	r3, [r7, #20]
}
    1916:	4618      	mov	r0, r3
    1918:	371c      	adds	r7, #28
    191a:	46bd      	mov	sp, r7
    191c:	bd90      	pop	{r4, r7, pc}
    191e:	bf00      	nop
    1920:	20009c3c 	.word	0x20009c3c
    1924:	00015fdd 	.word	0x00015fdd

00001928 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm>:
uint32_t	FastStorage_Class::WriteFastCRCAppState(uint32_t crc){
    1928:	b590      	push	{r4, r7, lr}
    192a:	b085      	sub	sp, #20
    192c:	af00      	add	r7, sp, #0
    192e:	6078      	str	r0, [r7, #4]
    1930:	6039      	str	r1, [r7, #0]
	uint16_t	add=(uint32_t)&eepromMap->crcAppState;
    1932:	4b08      	ldr	r3, [pc, #32]	; (1954 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x2c>)
    1934:	681b      	ldr	r3, [r3, #0]
    1936:	3304      	adds	r3, #4
    1938:	81fb      	strh	r3, [r7, #14]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&crc),(uint16_t)add,sizeof(uint32_t));
    193a:	89fa      	ldrh	r2, [r7, #14]
    193c:	4639      	mov	r1, r7
    193e:	2304      	movs	r3, #4
    1940:	4805      	ldr	r0, [pc, #20]	; (1958 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x30>)
    1942:	4c06      	ldr	r4, [pc, #24]	; (195c <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x34>)
    1944:	47a0      	blx	r4
    1946:	60b8      	str	r0, [r7, #8]
	return	w;
    1948:	68bb      	ldr	r3, [r7, #8]
}
    194a:	4618      	mov	r0, r3
    194c:	3714      	adds	r7, #20
    194e:	46bd      	mov	sp, r7
    1950:	bd90      	pop	{r4, r7, pc}
    1952:	bf00      	nop
    1954:	200014a8 	.word	0x200014a8
    1958:	20009c3c 	.word	0x20009c3c
    195c:	00015fdd 	.word	0x00015fdd

00001960 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv>:
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
	uint8_t		add8=(uint8_t)(0xff&&add32);
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
	return	w;
}
uint32_t	FastStorage_Class::WriteFastDefaultParameters(void){
    1960:	b590      	push	{r4, r7, lr}
    1962:	b087      	sub	sp, #28
    1964:	af00      	add	r7, sp, #0
    1966:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    1968:	4b0d      	ldr	r3, [pc, #52]	; (19a0 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x40>)
    196a:	781b      	ldrb	r3, [r3, #0]
    196c:	723b      	strb	r3, [r7, #8]
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
    196e:	4b0d      	ldr	r3, [pc, #52]	; (19a4 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x44>)
    1970:	681b      	ldr	r3, [r3, #0]
    1972:	3301      	adds	r3, #1
    1974:	617b      	str	r3, [r7, #20]
	uint8_t		add8=(uint8_t)(0xff&&add32);
    1976:	697b      	ldr	r3, [r7, #20]
    1978:	2b00      	cmp	r3, #0
    197a:	bf14      	ite	ne
    197c:	2301      	movne	r3, #1
    197e:	2300      	moveq	r3, #0
    1980:	b2db      	uxtb	r3, r3
    1982:	74fb      	strb	r3, [r7, #19]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
    1984:	7cfa      	ldrb	r2, [r7, #19]
    1986:	f107 0108 	add.w	r1, r7, #8
    198a:	2301      	movs	r3, #1
    198c:	4806      	ldr	r0, [pc, #24]	; (19a8 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x48>)
    198e:	4c07      	ldr	r4, [pc, #28]	; (19ac <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x4c>)
    1990:	47a0      	blx	r4
    1992:	60f8      	str	r0, [r7, #12]
	return	w;
    1994:	68fb      	ldr	r3, [r7, #12]
    1996:	4618      	mov	r0, r3
    1998:	371c      	adds	r7, #28
    199a:	46bd      	mov	sp, r7
    199c:	bd90      	pop	{r4, r7, pc}
    199e:	bf00      	nop
    19a0:	00022ef0 	.word	0x00022ef0
    19a4:	200014a8 	.word	0x200014a8
    19a8:	20009c3c 	.word	0x20009c3c
    19ac:	00015e7d 	.word	0x00015e7d

000019b0 <_ZN19HVAC_Commando_ClassC2Ev>:

#include "HVAC_Commando_Class.h"
#include "ARINC_Interface.h"

// default constructor
HVAC_Commando_Class::HVAC_Commando_Class()
    19b0:	b480      	push	{r7}
    19b2:	b083      	sub	sp, #12
    19b4:	af00      	add	r7, sp, #0
    19b6:	6078      	str	r0, [r7, #4]
    19b8:	6039      	str	r1, [r7, #0]
    19ba:	683b      	ldr	r3, [r7, #0]
    19bc:	681a      	ldr	r2, [r3, #0]
    19be:	687b      	ldr	r3, [r7, #4]
    19c0:	601a      	str	r2, [r3, #0]
    19c2:	687b      	ldr	r3, [r7, #4]
    19c4:	681b      	ldr	r3, [r3, #0]
    19c6:	3b0c      	subs	r3, #12
    19c8:	681b      	ldr	r3, [r3, #0]
    19ca:	461a      	mov	r2, r3
    19cc:	687b      	ldr	r3, [r7, #4]
    19ce:	4413      	add	r3, r2
    19d0:	683a      	ldr	r2, [r7, #0]
    19d2:	6852      	ldr	r2, [r2, #4]
    19d4:	601a      	str	r2, [r3, #0]
{
} //HVAC_Commando_Class
    19d6:	687b      	ldr	r3, [r7, #4]
    19d8:	4618      	mov	r0, r3
    19da:	370c      	adds	r7, #12
    19dc:	46bd      	mov	sp, r7
    19de:	bc80      	pop	{r7}
    19e0:	4770      	bx	lr

000019e2 <_ZN19HVAC_Commando_ClassD2Ev>:

// default destructor
HVAC_Commando_Class::~HVAC_Commando_Class()
    19e2:	b480      	push	{r7}
    19e4:	b083      	sub	sp, #12
    19e6:	af00      	add	r7, sp, #0
    19e8:	6078      	str	r0, [r7, #4]
    19ea:	6039      	str	r1, [r7, #0]
    19ec:	683b      	ldr	r3, [r7, #0]
    19ee:	681a      	ldr	r2, [r3, #0]
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	601a      	str	r2, [r3, #0]
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	681b      	ldr	r3, [r3, #0]
    19f8:	3b0c      	subs	r3, #12
    19fa:	681b      	ldr	r3, [r3, #0]
    19fc:	461a      	mov	r2, r3
    19fe:	687b      	ldr	r3, [r7, #4]
    1a00:	4413      	add	r3, r2
    1a02:	683a      	ldr	r2, [r7, #0]
    1a04:	6852      	ldr	r2, [r2, #4]
    1a06:	601a      	str	r2, [r3, #0]
{
} //~HVAC_Commando_Class
    1a08:	687b      	ldr	r3, [r7, #4]
    1a0a:	4618      	mov	r0, r3
    1a0c:	370c      	adds	r7, #12
    1a0e:	46bd      	mov	sp, r7
    1a10:	bc80      	pop	{r7}
    1a12:	4770      	bx	lr

00001a14 <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv>:

bool HVAC_Commando_Class::IsCommando270Changed(void){
    1a14:	b590      	push	{r4, r7, lr}
    1a16:	b083      	sub	sp, #12
    1a18:	af00      	add	r7, sp, #0
    1a1a:	6078      	str	r0, [r7, #4]
	
	if (lastCommando==UpdateCommando())
    1a1c:	687b      	ldr	r3, [r7, #4]
    1a1e:	68dc      	ldr	r4, [r3, #12]
    1a20:	6878      	ldr	r0, [r7, #4]
    1a22:	4b08      	ldr	r3, [pc, #32]	; (1a44 <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x30>)
    1a24:	4798      	blx	r3
    1a26:	4603      	mov	r3, r0
    1a28:	429c      	cmp	r4, r3
    1a2a:	bf0c      	ite	eq
    1a2c:	2301      	moveq	r3, #1
    1a2e:	2300      	movne	r3, #0
    1a30:	b2db      	uxtb	r3, r3
    1a32:	2b00      	cmp	r3, #0
    1a34:	d001      	beq.n	1a3a <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x26>
	{
		return false;
    1a36:	2300      	movs	r3, #0
    1a38:	e000      	b.n	1a3c <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x28>
	} 
	else
	{
		return true;
    1a3a:	2301      	movs	r3, #1
	
	}
	return true;
}
    1a3c:	4618      	mov	r0, r3
    1a3e:	370c      	adds	r7, #12
    1a40:	46bd      	mov	sp, r7
    1a42:	bd90      	pop	{r4, r7, pc}
    1a44:	00001a49 	.word	0x00001a49

00001a48 <_ZN19HVAC_Commando_Class14UpdateCommandoEv>:

uint32_t HVAC_Commando_Class::UpdateCommando(void){
    1a48:	b580      	push	{r7, lr}
    1a4a:	b084      	sub	sp, #16
    1a4c:	af00      	add	r7, sp, #0
    1a4e:	6078      	str	r0, [r7, #4]
	lastCommando=actualCommando;
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	689a      	ldr	r2, [r3, #8]
    1a54:	687b      	ldr	r3, [r7, #4]
    1a56:	60da      	str	r2, [r3, #12]
	uint32_t value=arinc.ReadBufferLabel((uint32_t)270);
    1a58:	f44f 7187 	mov.w	r1, #270	; 0x10e
    1a5c:	4810      	ldr	r0, [pc, #64]	; (1aa0 <_ZN19HVAC_Commando_Class14UpdateCommandoEv+0x58>)
    1a5e:	4b11      	ldr	r3, [pc, #68]	; (1aa4 <_ZN19HVAC_Commando_Class14UpdateCommandoEv+0x5c>)
    1a60:	4798      	blx	r3
    1a62:	60f8      	str	r0, [r7, #12]
	commando270.AC_CMD=(bool)((value>>12)&0x01);
    1a64:	68fb      	ldr	r3, [r7, #12]
    1a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	bf14      	ite	ne
    1a6e:	2301      	movne	r3, #1
    1a70:	2300      	moveq	r3, #0
    1a72:	b2d9      	uxtb	r1, r3
    1a74:	687a      	ldr	r2, [r7, #4]
    1a76:	7953      	ldrb	r3, [r2, #5]
    1a78:	f361 0300 	bfi	r3, r1, #0, #1
    1a7c:	7153      	strb	r3, [r2, #5]
	commando270.statusArinc=(StatusHVACARINC)((value>>10)&0x03);
    1a7e:	68fb      	ldr	r3, [r7, #12]
    1a80:	0a9b      	lsrs	r3, r3, #10
    1a82:	b2db      	uxtb	r3, r3
    1a84:	f003 0303 	and.w	r3, r3, #3
    1a88:	b2da      	uxtb	r2, r3
    1a8a:	687b      	ldr	r3, [r7, #4]
    1a8c:	711a      	strb	r2, [r3, #4]
	actualCommando=value;
    1a8e:	687b      	ldr	r3, [r7, #4]
    1a90:	68fa      	ldr	r2, [r7, #12]
    1a92:	609a      	str	r2, [r3, #8]
	return actualCommando;
    1a94:	687b      	ldr	r3, [r7, #4]
    1a96:	689b      	ldr	r3, [r3, #8]
}
    1a98:	4618      	mov	r0, r3
    1a9a:	3710      	adds	r7, #16
    1a9c:	46bd      	mov	sp, r7
    1a9e:	bd80      	pop	{r7, pc}
    1aa0:	20008d24 	.word	0x20008d24
    1aa4:	00013721 	.word	0x00013721

00001aa8 <_ZN19HVAC_Commando_Class27UpadateFlapperValveSetpointEv>:
uint32_t HVAC_Commando_Class::GetCommando270(void){
	return actualCommando;
}
uint8_t HVAC_Commando_Class::UpadateFlapperValveSetpoint(void){
    1aa8:	b580      	push	{r7, lr}
    1aaa:	b084      	sub	sp, #16
    1aac:	af00      	add	r7, sp, #0
    1aae:	6078      	str	r0, [r7, #4]
	lastflapperValveSetpoint=flapperValveSetpoint;
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	7c1a      	ldrb	r2, [r3, #16]
    1ab4:	687b      	ldr	r3, [r7, #4]
    1ab6:	745a      	strb	r2, [r3, #17]
	uint32_t value=arinc.ReadBufferLabel((uint32_t)275);
    1ab8:	f240 1113 	movw	r1, #275	; 0x113
    1abc:	4807      	ldr	r0, [pc, #28]	; (1adc <_ZN19HVAC_Commando_Class27UpadateFlapperValveSetpointEv+0x34>)
    1abe:	4b08      	ldr	r3, [pc, #32]	; (1ae0 <_ZN19HVAC_Commando_Class27UpadateFlapperValveSetpointEv+0x38>)
    1ac0:	4798      	blx	r3
    1ac2:	60f8      	str	r0, [r7, #12]
	uint8_t position=(uint8_t)((value>>10)&0xff);
    1ac4:	68fb      	ldr	r3, [r7, #12]
    1ac6:	0a9b      	lsrs	r3, r3, #10
    1ac8:	72fb      	strb	r3, [r7, #11]
	flapperValveSetpoint=position;
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	7afa      	ldrb	r2, [r7, #11]
    1ace:	741a      	strb	r2, [r3, #16]
	return flapperValveSetpoint;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	7c1b      	ldrb	r3, [r3, #16]
}
    1ad4:	4618      	mov	r0, r3
    1ad6:	3710      	adds	r7, #16
    1ad8:	46bd      	mov	sp, r7
    1ada:	bd80      	pop	{r7, pc}
    1adc:	20008d24 	.word	0x20008d24
    1ae0:	00013721 	.word	0x00013721

00001ae4 <_ZN19HVAC_Commando_Class23GetFlapperValveSetpointEv>:
uint8_t HVAC_Commando_Class::GetFlapperValveSetpoint(void){
    1ae4:	b480      	push	{r7}
    1ae6:	b083      	sub	sp, #12
    1ae8:	af00      	add	r7, sp, #0
    1aea:	6078      	str	r0, [r7, #4]
	return flapperValveSetpoint;
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	7c1b      	ldrb	r3, [r3, #16]
}
    1af0:	4618      	mov	r0, r3
    1af2:	370c      	adds	r7, #12
    1af4:	46bd      	mov	sp, r7
    1af6:	bc80      	pop	{r7}
    1af8:	4770      	bx	lr
	...

00001afc <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv>:

bool HVAC_Commando_Class::IsNewFlapperValveSetpoint(void){
    1afc:	b590      	push	{r4, r7, lr}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
		if (lastflapperValveSetpoint==UpadateFlapperValveSetpoint())
    1b04:	687b      	ldr	r3, [r7, #4]
    1b06:	7c5c      	ldrb	r4, [r3, #17]
    1b08:	6878      	ldr	r0, [r7, #4]
    1b0a:	4b08      	ldr	r3, [pc, #32]	; (1b2c <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv+0x30>)
    1b0c:	4798      	blx	r3
    1b0e:	4603      	mov	r3, r0
    1b10:	429c      	cmp	r4, r3
    1b12:	bf0c      	ite	eq
    1b14:	2301      	moveq	r3, #1
    1b16:	2300      	movne	r3, #0
    1b18:	b2db      	uxtb	r3, r3
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d001      	beq.n	1b22 <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv+0x26>
		{
			return false;
    1b1e:	2300      	movs	r3, #0
    1b20:	e000      	b.n	1b24 <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv+0x28>
		}
		else
		{
			return true;
    1b22:	2301      	movs	r3, #1
			
		}
		return true;
    1b24:	4618      	mov	r0, r3
    1b26:	370c      	adds	r7, #12
    1b28:	46bd      	mov	sp, r7
    1b2a:	bd90      	pop	{r4, r7, pc}
    1b2c:	00001aa9 	.word	0x00001aa9

00001b30 <_ZN16Interfaces_ClassC1Ev>:
#include "Maintenance_Tool.h"
#include "FlapperValve_Class.h"


// default constructor
Interfaces_Class::Interfaces_Class()
    1b30:	b480      	push	{r7}
    1b32:	b083      	sub	sp, #12
    1b34:	af00      	add	r7, sp, #0
    1b36:	6078      	str	r0, [r7, #4]
{
	
} //Interfaces_Class
    1b38:	687b      	ldr	r3, [r7, #4]
    1b3a:	4618      	mov	r0, r3
    1b3c:	370c      	adds	r7, #12
    1b3e:	46bd      	mov	sp, r7
    1b40:	bc80      	pop	{r7}
    1b42:	4770      	bx	lr

00001b44 <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    1b44:	b480      	push	{r7}
    1b46:	b083      	sub	sp, #12
    1b48:	af00      	add	r7, sp, #0
    1b4a:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	4618      	mov	r0, r3
    1b50:	370c      	adds	r7, #12
    1b52:	46bd      	mov	sp, r7
    1b54:	bc80      	pop	{r7}
    1b56:	4770      	bx	lr

00001b58 <_ZN16Interfaces_Class4InitEv>:

CommunicationRequest	Interfaces_Class::request;

bool	Interfaces_Class::Init(){
    1b58:	b580      	push	{r7, lr}
    1b5a:	b084      	sub	sp, #16
    1b5c:	af00      	add	r7, sp, #0
    1b5e:	6078      	str	r0, [r7, #4]
	size=sizeof(CommunicationRequest);
    1b60:	687b      	ldr	r3, [r7, #4]
    1b62:	2205      	movs	r2, #5
    1b64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	result=arinc.Init();
    1b68:	4815      	ldr	r0, [pc, #84]	; (1bc0 <_ZN16Interfaces_Class4InitEv+0x68>)
    1b6a:	4b16      	ldr	r3, [pc, #88]	; (1bc4 <_ZN16Interfaces_Class4InitEv+0x6c>)
    1b6c:	4798      	blx	r3
    1b6e:	4603      	mov	r3, r0
    1b70:	461a      	mov	r2, r3
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	675a      	str	r2, [r3, #116]	; 0x74
	if (result==0x01)
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    1b7a:	2b01      	cmp	r3, #1
    1b7c:	d106      	bne.n	1b8c <_ZN16Interfaces_Class4InitEv+0x34>
	{
		arinc.TrasmitSingleLabel();
    1b7e:	4810      	ldr	r0, [pc, #64]	; (1bc0 <_ZN16Interfaces_Class4InitEv+0x68>)
    1b80:	4b11      	ldr	r3, [pc, #68]	; (1bc8 <_ZN16Interfaces_Class4InitEv+0x70>)
    1b82:	4798      	blx	r3
		if (maintenance.IsAppConnected())
    1b84:	4811      	ldr	r0, [pc, #68]	; (1bcc <_ZN16Interfaces_Class4InitEv+0x74>)
    1b86:	4b12      	ldr	r3, [pc, #72]	; (1bd0 <_ZN16Interfaces_Class4InitEv+0x78>)
    1b88:	4798      	blx	r3
    1b8a:	e00e      	b.n	1baa <_ZN16Interfaces_Class4InitEv+0x52>
		{
		}
	} 
	else
	{
		alu.NotifyError(kARINCINnterfaceError,result);
    1b8c:	687b      	ldr	r3, [r7, #4]
    1b8e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    1b90:	f107 030c 	add.w	r3, r7, #12
    1b94:	4611      	mov	r1, r2
    1b96:	4618      	mov	r0, r3
    1b98:	4b0e      	ldr	r3, [pc, #56]	; (1bd4 <_ZN16Interfaces_Class4InitEv+0x7c>)
    1b9a:	4798      	blx	r3
    1b9c:	f107 030c 	add.w	r3, r7, #12
    1ba0:	461a      	mov	r2, r3
    1ba2:	2100      	movs	r1, #0
    1ba4:	480c      	ldr	r0, [pc, #48]	; (1bd8 <_ZN16Interfaces_Class4InitEv+0x80>)
    1ba6:	4b0d      	ldr	r3, [pc, #52]	; (1bdc <_ZN16Interfaces_Class4InitEv+0x84>)
    1ba8:	4798      	blx	r3
	}
	return result;
    1baa:	687b      	ldr	r3, [r7, #4]
    1bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    1bae:	2b00      	cmp	r3, #0
    1bb0:	bf14      	ite	ne
    1bb2:	2301      	movne	r3, #1
    1bb4:	2300      	moveq	r3, #0
    1bb6:	b2db      	uxtb	r3, r3
}
    1bb8:	4618      	mov	r0, r3
    1bba:	3710      	adds	r7, #16
    1bbc:	46bd      	mov	sp, r7
    1bbe:	bd80      	pop	{r7, pc}
    1bc0:	20008d24 	.word	0x20008d24
    1bc4:	000133ad 	.word	0x000133ad
    1bc8:	00013771 	.word	0x00013771
    1bcc:	2000a3e8 	.word	0x2000a3e8
    1bd0:	0001995d 	.word	0x0001995d
    1bd4:	000003a9 	.word	0x000003a9
    1bd8:	20000c80 	.word	0x20000c80
    1bdc:	000009d1 	.word	0x000009d1

00001be0 <_ZN16Interfaces_Class18CheckCommunicationEv>:

CommunicationRequest Interfaces_Class::CheckCommunication(void)
{
    1be0:	b580      	push	{r7, lr}
    1be2:	b086      	sub	sp, #24
    1be4:	af00      	add	r7, sp, #0
    1be6:	6078      	str	r0, [r7, #4]
    1be8:	6039      	str	r1, [r7, #0]
	event e;
    1bea:	f107 0308 	add.w	r3, r7, #8
    1bee:	4618      	mov	r0, r3
    1bf0:	4b09      	ldr	r3, [pc, #36]	; (1c18 <_ZN16Interfaces_Class18CheckCommunicationEv+0x38>)
    1bf2:	4798      	blx	r3
	CommunicationRequest	r;
	CheckInternalCommunication();
    1bf4:	6838      	ldr	r0, [r7, #0]
    1bf6:	4b09      	ldr	r3, [pc, #36]	; (1c1c <_ZN16Interfaces_Class18CheckCommunicationEv+0x3c>)
    1bf8:	4798      	blx	r3
	CheckExternalCommunication();
    1bfa:	6838      	ldr	r0, [r7, #0]
    1bfc:	4b08      	ldr	r3, [pc, #32]	; (1c20 <_ZN16Interfaces_Class18CheckCommunicationEv+0x40>)
    1bfe:	4798      	blx	r3
	r=request;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	4a08      	ldr	r2, [pc, #32]	; (1c24 <_ZN16Interfaces_Class18CheckCommunicationEv+0x44>)
    1c04:	6810      	ldr	r0, [r2, #0]
    1c06:	6018      	str	r0, [r3, #0]
    1c08:	7912      	ldrb	r2, [r2, #4]
    1c0a:	711a      	strb	r2, [r3, #4]
	
	return	r;
    1c0c:	bf00      	nop
}
    1c0e:	6878      	ldr	r0, [r7, #4]
    1c10:	3718      	adds	r7, #24
    1c12:	46bd      	mov	sp, r7
    1c14:	bd80      	pop	{r7, pc}
    1c16:	bf00      	nop
    1c18:	000003c5 	.word	0x000003c5
    1c1c:	00001ca1 	.word	0x00001ca1
    1c20:	00001ce1 	.word	0x00001ce1
    1c24:	200014c4 	.word	0x200014c4

00001c28 <_ZN16Interfaces_Class22IsCommunicationRequestEv>:

bool	Interfaces_Class::IsCommunicationRequest(void){
    1c28:	b580      	push	{r7, lr}
    1c2a:	b086      	sub	sp, #24
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	6078      	str	r0, [r7, #4]
	bool arr[sizeof(CommunicationRequest)];
	CommunicationRequest r=CheckCommunication();
    1c30:	f107 0308 	add.w	r3, r7, #8
    1c34:	6879      	ldr	r1, [r7, #4]
    1c36:	4618      	mov	r0, r3
    1c38:	4b17      	ldr	r3, [pc, #92]	; (1c98 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x70>)
    1c3a:	4798      	blx	r3
	uint8_t result=0;
    1c3c:	2300      	movs	r3, #0
    1c3e:	75fb      	strb	r3, [r7, #23]
	memcpy((void*)arr,(void*)&r,size);
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    1c46:	461a      	mov	r2, r3
    1c48:	f107 0108 	add.w	r1, r7, #8
    1c4c:	f107 0310 	add.w	r3, r7, #16
    1c50:	4618      	mov	r0, r3
    1c52:	4b12      	ldr	r3, [pc, #72]	; (1c9c <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x74>)
    1c54:	4798      	blx	r3
	for (uint8_t ii = 0; ii < size; ii++)
    1c56:	2300      	movs	r3, #0
    1c58:	75bb      	strb	r3, [r7, #22]
    1c5a:	7dbb      	ldrb	r3, [r7, #22]
    1c5c:	687a      	ldr	r2, [r7, #4]
    1c5e:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    1c62:	4293      	cmp	r3, r2
    1c64:	da0d      	bge.n	1c82 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x5a>
	{
		result|=arr[ii];
    1c66:	7dbb      	ldrb	r3, [r7, #22]
    1c68:	f107 0218 	add.w	r2, r7, #24
    1c6c:	4413      	add	r3, r2
    1c6e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    1c72:	461a      	mov	r2, r3
    1c74:	7dfb      	ldrb	r3, [r7, #23]
    1c76:	4313      	orrs	r3, r2
    1c78:	75fb      	strb	r3, [r7, #23]
	for (uint8_t ii = 0; ii < size; ii++)
    1c7a:	7dbb      	ldrb	r3, [r7, #22]
    1c7c:	3301      	adds	r3, #1
    1c7e:	75bb      	strb	r3, [r7, #22]
    1c80:	e7eb      	b.n	1c5a <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x32>
	}
	return	result>0;
    1c82:	7dfb      	ldrb	r3, [r7, #23]
    1c84:	2b00      	cmp	r3, #0
    1c86:	bfcc      	ite	gt
    1c88:	2301      	movgt	r3, #1
    1c8a:	2300      	movle	r3, #0
    1c8c:	b2db      	uxtb	r3, r3
}
    1c8e:	4618      	mov	r0, r3
    1c90:	3718      	adds	r7, #24
    1c92:	46bd      	mov	sp, r7
    1c94:	bd80      	pop	{r7, pc}
    1c96:	bf00      	nop
    1c98:	00001be1 	.word	0x00001be1
    1c9c:	0001d37d 	.word	0x0001d37d

00001ca0 <_ZN16Interfaces_Class26CheckInternalCommunicationEv>:

uint32_t Interfaces_Class::CheckInternalCommunication(void)
{
    1ca0:	b580      	push	{r7, lr}
    1ca2:	b084      	sub	sp, #16
    1ca4:	af00      	add	r7, sp, #0
    1ca6:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1ca8:	2300      	movs	r3, #0
    1caa:	60fb      	str	r3, [r7, #12]
	request.internRequest.flapperValvesMessage=CheckFlapperValveInterface(1);
    1cac:	2101      	movs	r1, #1
    1cae:	6878      	ldr	r0, [r7, #4]
    1cb0:	4b08      	ldr	r3, [pc, #32]	; (1cd4 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x34>)
    1cb2:	4798      	blx	r3
    1cb4:	4603      	mov	r3, r0
    1cb6:	461a      	mov	r2, r3
    1cb8:	4b07      	ldr	r3, [pc, #28]	; (1cd8 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1cba:	705a      	strb	r2, [r3, #1]
	request.internRequest.temperatureSensorsMessage=CheckTemperatures();
    1cbc:	6878      	ldr	r0, [r7, #4]
    1cbe:	4b07      	ldr	r3, [pc, #28]	; (1cdc <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x3c>)
    1cc0:	4798      	blx	r3
    1cc2:	4603      	mov	r3, r0
    1cc4:	461a      	mov	r2, r3
    1cc6:	4b04      	ldr	r3, [pc, #16]	; (1cd8 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1cc8:	701a      	strb	r2, [r3, #0]
	return	0;
    1cca:	2300      	movs	r3, #0
}
    1ccc:	4618      	mov	r0, r3
    1cce:	3710      	adds	r7, #16
    1cd0:	46bd      	mov	sp, r7
    1cd2:	bd80      	pop	{r7, pc}
    1cd4:	00001d55 	.word	0x00001d55
    1cd8:	200014c4 	.word	0x200014c4
    1cdc:	00001e25 	.word	0x00001e25

00001ce0 <_ZN16Interfaces_Class26CheckExternalCommunicationEv>:
uint32_t Interfaces_Class::CheckExternalCommunication(void)
{
    1ce0:	b580      	push	{r7, lr}
    1ce2:	b084      	sub	sp, #16
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1ce8:	2300      	movs	r3, #0
    1cea:	60fb      	str	r3, [r7, #12]


	if (arinc.newMessageR1)
    1cec:	4b14      	ldr	r3, [pc, #80]	; (1d40 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
    1cee:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
    1cf2:	b2db      	uxtb	r3, r3
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d007      	beq.n	1d08 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x28>
	{
		request.externRequest.arinc1GotMessage=true;
    1cf8:	4b12      	ldr	r3, [pc, #72]	; (1d44 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1cfa:	2201      	movs	r2, #1
    1cfc:	709a      	strb	r2, [r3, #2]
		alu.PrepareNewTask(kALUTaskReadARINCR1);
    1cfe:	2200      	movs	r2, #0
    1d00:	2104      	movs	r1, #4
    1d02:	4811      	ldr	r0, [pc, #68]	; (1d48 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
    1d04:	4b11      	ldr	r3, [pc, #68]	; (1d4c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>)
    1d06:	4798      	blx	r3
	}
	if (arinc.newMessageR2)
    1d08:	4b0d      	ldr	r3, [pc, #52]	; (1d40 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
    1d0a:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
    1d0e:	b2db      	uxtb	r3, r3
    1d10:	2b00      	cmp	r3, #0
    1d12:	d007      	beq.n	1d24 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x44>
	{
		request.externRequest.arinc2GotMessage=true;
    1d14:	4b0b      	ldr	r3, [pc, #44]	; (1d44 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1d16:	2201      	movs	r2, #1
    1d18:	70da      	strb	r2, [r3, #3]
		alu.PrepareNewTask(kALUTaskReadARINCR2);
    1d1a:	2200      	movs	r2, #0
    1d1c:	2105      	movs	r1, #5
    1d1e:	480a      	ldr	r0, [pc, #40]	; (1d48 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
    1d20:	4b0a      	ldr	r3, [pc, #40]	; (1d4c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>)
    1d22:	4798      	blx	r3
	}
	if (CheckUSBInterface())
    1d24:	6878      	ldr	r0, [r7, #4]
    1d26:	4b0a      	ldr	r3, [pc, #40]	; (1d50 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x70>)
    1d28:	4798      	blx	r3
    1d2a:	4603      	mov	r3, r0
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d002      	beq.n	1d36 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x56>
	{
		request.externRequest.usbGotMessage=true;
    1d30:	4b04      	ldr	r3, [pc, #16]	; (1d44 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1d32:	2201      	movs	r2, #1
    1d34:	711a      	strb	r2, [r3, #4]
		//alu.PrepareNewTask(kALUTaskReadARINCR2);
	}
	//request.externRequest.arinc1GotMessage=arinc.newMessageR2;
	
	return	0;
    1d36:	2300      	movs	r3, #0
}
    1d38:	4618      	mov	r0, r3
    1d3a:	3710      	adds	r7, #16
    1d3c:	46bd      	mov	sp, r7
    1d3e:	bd80      	pop	{r7, pc}
    1d40:	20008d24 	.word	0x20008d24
    1d44:	200014c4 	.word	0x200014c4
    1d48:	20000c80 	.word	0x20000c80
    1d4c:	000009fd 	.word	0x000009fd
    1d50:	00001da1 	.word	0x00001da1

00001d54 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh>:
bool	Interfaces_Class::CheckFlapperValveInterface(uint8_t add){
    1d54:	b580      	push	{r7, lr}
    1d56:	b082      	sub	sp, #8
    1d58:	af00      	add	r7, sp, #0
    1d5a:	6078      	str	r0, [r7, #4]
    1d5c:	460b      	mov	r3, r1
    1d5e:	70fb      	strb	r3, [r7, #3]
		if (fv1.fv1StatusChanged)
    1d60:	4b0b      	ldr	r3, [pc, #44]	; (1d90 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1d62:	7fdb      	ldrb	r3, [r3, #31]
    1d64:	b2db      	uxtb	r3, r3
    1d66:	2b00      	cmp	r3, #0
    1d68:	d00a      	beq.n	1d80 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x2c>
		{
			fv1.ReadActualPosition();
    1d6a:	4809      	ldr	r0, [pc, #36]	; (1d90 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1d6c:	4b09      	ldr	r3, [pc, #36]	; (1d94 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x40>)
    1d6e:	4798      	blx	r3
			alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    1d70:	2200      	movs	r2, #0
    1d72:	210b      	movs	r1, #11
    1d74:	4808      	ldr	r0, [pc, #32]	; (1d98 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x44>)
    1d76:	4b09      	ldr	r3, [pc, #36]	; (1d9c <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x48>)
    1d78:	4798      	blx	r3
			fv1.fv1StatusChanged=false;
    1d7a:	4b05      	ldr	r3, [pc, #20]	; (1d90 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1d7c:	2200      	movs	r2, #0
    1d7e:	77da      	strb	r2, [r3, #31]
		}
		return	fv1.fv1StatusChanged;
    1d80:	4b03      	ldr	r3, [pc, #12]	; (1d90 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1d82:	7fdb      	ldrb	r3, [r3, #31]
    1d84:	b2db      	uxtb	r3, r3
}
    1d86:	4618      	mov	r0, r3
    1d88:	3708      	adds	r7, #8
    1d8a:	46bd      	mov	sp, r7
    1d8c:	bd80      	pop	{r7, pc}
    1d8e:	bf00      	nop
    1d90:	200098e8 	.word	0x200098e8
    1d94:	000151f5 	.word	0x000151f5
    1d98:	20000c80 	.word	0x20000c80
    1d9c:	000009fd 	.word	0x000009fd

00001da0 <_ZN16Interfaces_Class17CheckUSBInterfaceEv>:
bool	Interfaces_Class::CheckUSBInterface(void){
    1da0:	b580      	push	{r7, lr}
    1da2:	b082      	sub	sp, #8
    1da4:	af00      	add	r7, sp, #0
    1da6:	6078      	str	r0, [r7, #4]
		if (usb.connected)
    1da8:	4b13      	ldr	r3, [pc, #76]	; (1df8 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1daa:	7c1b      	ldrb	r3, [r3, #16]
    1dac:	b2db      	uxtb	r3, r3
    1dae:	2b00      	cmp	r3, #0
    1db0:	d01b      	beq.n	1dea <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x4a>
		{
			if (maintenance.IsAppConnected())
    1db2:	4812      	ldr	r0, [pc, #72]	; (1dfc <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x5c>)
    1db4:	4b12      	ldr	r3, [pc, #72]	; (1e00 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x60>)
    1db6:	4798      	blx	r3
    1db8:	4603      	mov	r3, r0
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d009      	beq.n	1dd2 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x32>
			{
				usb<<"Maintenance Tool Locked"<<NEWLINE;
    1dbe:	4911      	ldr	r1, [pc, #68]	; (1e04 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x64>)
    1dc0:	480d      	ldr	r0, [pc, #52]	; (1df8 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1dc2:	4b11      	ldr	r3, [pc, #68]	; (1e08 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x68>)
    1dc4:	4798      	blx	r3
    1dc6:	4603      	mov	r3, r0
    1dc8:	4910      	ldr	r1, [pc, #64]	; (1e0c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    1dca:	4618      	mov	r0, r3
    1dcc:	4b10      	ldr	r3, [pc, #64]	; (1e10 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    1dce:	4798      	blx	r3
    1dd0:	e008      	b.n	1de4 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x44>
			} 
			else
			{
				usb<<"Remote operation Disabled"<<NEWLINE;
    1dd2:	4910      	ldr	r1, [pc, #64]	; (1e14 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x74>)
    1dd4:	4808      	ldr	r0, [pc, #32]	; (1df8 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1dd6:	4b10      	ldr	r3, [pc, #64]	; (1e18 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x78>)
    1dd8:	4798      	blx	r3
    1dda:	4603      	mov	r3, r0
    1ddc:	490b      	ldr	r1, [pc, #44]	; (1e0c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    1dde:	4618      	mov	r0, r3
    1de0:	4b0b      	ldr	r3, [pc, #44]	; (1e10 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    1de2:	4798      	blx	r3
			}
			hvac.PrintState();
    1de4:	480d      	ldr	r0, [pc, #52]	; (1e1c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x7c>)
    1de6:	4b0e      	ldr	r3, [pc, #56]	; (1e20 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x80>)
    1de8:	4798      	blx	r3
		}else{
						
		}
		return	usb.rxReady;
    1dea:	4b03      	ldr	r3, [pc, #12]	; (1df8 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1dec:	7d5b      	ldrb	r3, [r3, #21]
    1dee:	b2db      	uxtb	r3, r3
}
    1df0:	4618      	mov	r0, r3
    1df2:	3708      	adds	r7, #8
    1df4:	46bd      	mov	sp, r7
    1df6:	bd80      	pop	{r7, pc}
    1df8:	2000a140 	.word	0x2000a140
    1dfc:	2000a3e8 	.word	0x2000a3e8
    1e00:	0001995d 	.word	0x0001995d
    1e04:	000215b0 	.word	0x000215b0
    1e08:	00001f01 	.word	0x00001f01
    1e0c:	000215c8 	.word	0x000215c8
    1e10:	00000c89 	.word	0x00000c89
    1e14:	000215cc 	.word	0x000215cc
    1e18:	00001f21 	.word	0x00001f21
    1e1c:	2000824c 	.word	0x2000824c
    1e20:	000012c1 	.word	0x000012c1

00001e24 <_ZN16Interfaces_Class17CheckTemperaturesEv>:

bool	Interfaces_Class::CheckTemperatures(void){
    1e24:	b580      	push	{r7, lr}
    1e26:	b084      	sub	sp, #16
    1e28:	af00      	add	r7, sp, #0
    1e2a:	6078      	str	r0, [r7, #4]
	bool result(false);
    1e2c:	2300      	movs	r3, #0
    1e2e:	73fb      	strb	r3, [r7, #15]
	if (temperatures.IsConversionFinished())
    1e30:	4815      	ldr	r0, [pc, #84]	; (1e88 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    1e32:	4b16      	ldr	r3, [pc, #88]	; (1e8c <_ZN16Interfaces_Class17CheckTemperaturesEv+0x68>)
    1e34:	4798      	blx	r3
    1e36:	4603      	mov	r3, r0
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d020      	beq.n	1e7e <_ZN16Interfaces_Class17CheckTemperaturesEv+0x5a>
	{
		
		temperatures.GetConversionResult();
    1e3c:	4812      	ldr	r0, [pc, #72]	; (1e88 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    1e3e:	4b14      	ldr	r3, [pc, #80]	; (1e90 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x6c>)
    1e40:	4798      	blx	r3
		if (temperatures.faultData==VALID_TEMPERATURE)
    1e42:	4b11      	ldr	r3, [pc, #68]	; (1e88 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    1e44:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    1e48:	2b01      	cmp	r3, #1
    1e4a:	d114      	bne.n	1e76 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x52>
		{
			if (lastTemperature!=temperatures.values[0][1])
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    1e50:	4b0d      	ldr	r3, [pc, #52]	; (1e88 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    1e52:	6e59      	ldr	r1, [r3, #100]	; 0x64
    1e54:	4b0f      	ldr	r3, [pc, #60]	; (1e94 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x70>)
    1e56:	4610      	mov	r0, r2
    1e58:	4798      	blx	r3
    1e5a:	4603      	mov	r3, r0
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d10a      	bne.n	1e76 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x52>
			{
				lastTemperature=temperatures.values[0][1];
    1e60:	4b09      	ldr	r3, [pc, #36]	; (1e88 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    1e62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	67da      	str	r2, [r3, #124]	; 0x7c
				alu.PrepareNewTask(kALUTaskUpdateTemperatures);
    1e68:	2200      	movs	r2, #0
    1e6a:	210a      	movs	r1, #10
    1e6c:	480a      	ldr	r0, [pc, #40]	; (1e98 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x74>)
    1e6e:	4b0b      	ldr	r3, [pc, #44]	; (1e9c <_ZN16Interfaces_Class17CheckTemperaturesEv+0x78>)
    1e70:	4798      	blx	r3
				result=true;
    1e72:	2301      	movs	r3, #1
    1e74:	73fb      	strb	r3, [r7, #15]
			}
				
		}
			temperatures.StartOneConversion();
    1e76:	4804      	ldr	r0, [pc, #16]	; (1e88 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    1e78:	4b09      	ldr	r3, [pc, #36]	; (1ea0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x7c>)
    1e7a:	4798      	blx	r3
			asm("nop");
    1e7c:	bf00      	nop
	
	} 
	else
	{
	}
	return	result;
    1e7e:	7bfb      	ldrb	r3, [r7, #15]
}
    1e80:	4618      	mov	r0, r3
    1e82:	3710      	adds	r7, #16
    1e84:	46bd      	mov	sp, r7
    1e86:	bd80      	pop	{r7, pc}
    1e88:	20009a5c 	.word	0x20009a5c
    1e8c:	00015b31 	.word	0x00015b31
    1e90:	00015a41 	.word	0x00015a41
    1e94:	0001cce1 	.word	0x0001cce1
    1e98:	20000c80 	.word	0x20000c80
    1e9c:	000009fd 	.word	0x000009fd
    1ea0:	000159d5 	.word	0x000159d5

00001ea4 <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:
	{
		
	}
	return	arinc.newMessageR1||arinc.newMessageR2;
}
uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
    1ea4:	b480      	push	{r7}
    1ea6:	b085      	sub	sp, #20
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	6039      	str	r1, [r7, #0]
	s=status;
    1eae:	683a      	ldr	r2, [r7, #0]
    1eb0:	687b      	ldr	r3, [r7, #4]
    1eb2:	3368      	adds	r3, #104	; 0x68
    1eb4:	e893 0003 	ldmia.w	r3, {r0, r1}
    1eb8:	e882 0003 	stmia.w	r2, {r0, r1}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
    1ebc:	683b      	ldr	r3, [r7, #0]
    1ebe:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    1ec0:	2300      	movs	r3, #0
    1ec2:	60bb      	str	r3, [r7, #8]
    1ec4:	68bb      	ldr	r3, [r7, #8]
    1ec6:	2b01      	cmp	r3, #1
    1ec8:	d812      	bhi.n	1ef0 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x4c>
	{
		s.rawStatus+=(*p)&(0x01<<i);
    1eca:	683b      	ldr	r3, [r7, #0]
    1ecc:	685a      	ldr	r2, [r3, #4]
    1ece:	68fb      	ldr	r3, [r7, #12]
    1ed0:	681b      	ldr	r3, [r3, #0]
    1ed2:	2001      	movs	r0, #1
    1ed4:	68b9      	ldr	r1, [r7, #8]
    1ed6:	fa00 f101 	lsl.w	r1, r0, r1
    1eda:	400b      	ands	r3, r1
    1edc:	441a      	add	r2, r3
    1ede:	683b      	ldr	r3, [r7, #0]
    1ee0:	605a      	str	r2, [r3, #4]
		p++;
    1ee2:	68fb      	ldr	r3, [r7, #12]
    1ee4:	3304      	adds	r3, #4
    1ee6:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    1ee8:	68bb      	ldr	r3, [r7, #8]
    1eea:	3301      	adds	r3, #1
    1eec:	60bb      	str	r3, [r7, #8]
    1eee:	e7e9      	b.n	1ec4 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x20>
	}
	return	status.rawStatus;
    1ef0:	687b      	ldr	r3, [r7, #4]
    1ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
}
    1ef4:	4618      	mov	r0, r3
    1ef6:	3714      	adds	r7, #20
    1ef8:	46bd      	mov	sp, r7
    1efa:	bc80      	pop	{r7}
    1efc:	4770      	bx	lr
	...

00001f00 <_ZlsIA24_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1f00:	b580      	push	{r7, lr}
    1f02:	b082      	sub	sp, #8
    1f04:	af00      	add	r7, sp, #0
    1f06:	6078      	str	r0, [r7, #4]
    1f08:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1f0a:	6839      	ldr	r1, [r7, #0]
    1f0c:	6878      	ldr	r0, [r7, #4]
    1f0e:	4b03      	ldr	r3, [pc, #12]	; (1f1c <_ZlsIA24_cER5PrintS2_RKT_+0x1c>)
    1f10:	4798      	blx	r3
    1f12:	687b      	ldr	r3, [r7, #4]
    1f14:	4618      	mov	r0, r3
    1f16:	3708      	adds	r7, #8
    1f18:	46bd      	mov	sp, r7
    1f1a:	bd80      	pop	{r7, pc}
    1f1c:	000180b1 	.word	0x000180b1

00001f20 <_ZlsIA26_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1f20:	b580      	push	{r7, lr}
    1f22:	b082      	sub	sp, #8
    1f24:	af00      	add	r7, sp, #0
    1f26:	6078      	str	r0, [r7, #4]
    1f28:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1f2a:	6839      	ldr	r1, [r7, #0]
    1f2c:	6878      	ldr	r0, [r7, #4]
    1f2e:	4b03      	ldr	r3, [pc, #12]	; (1f3c <_ZlsIA26_cER5PrintS2_RKT_+0x1c>)
    1f30:	4798      	blx	r3
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	4618      	mov	r0, r3
    1f36:	3708      	adds	r7, #8
    1f38:	46bd      	mov	sp, r7
    1f3a:	bd80      	pop	{r7, pc}
    1f3c:	000180b1 	.word	0x000180b1

00001f40 <_Z41__static_initialization_and_destruction_0ii>:
Interfaces_Class	interfaces;
    1f40:	b580      	push	{r7, lr}
    1f42:	b082      	sub	sp, #8
    1f44:	af00      	add	r7, sp, #0
    1f46:	6078      	str	r0, [r7, #4]
    1f48:	6039      	str	r1, [r7, #0]
    1f4a:	687b      	ldr	r3, [r7, #4]
    1f4c:	2b01      	cmp	r3, #1
    1f4e:	d11c      	bne.n	1f8a <_Z41__static_initialization_and_destruction_0ii+0x4a>
    1f50:	683b      	ldr	r3, [r7, #0]
    1f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1f56:	4293      	cmp	r3, r2
    1f58:	d117      	bne.n	1f8a <_Z41__static_initialization_and_destruction_0ii+0x4a>
    1f5a:	480e      	ldr	r0, [pc, #56]	; (1f94 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1f5c:	4b0e      	ldr	r3, [pc, #56]	; (1f98 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    1f5e:	4798      	blx	r3
    1f60:	4a0e      	ldr	r2, [pc, #56]	; (1f9c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1f62:	490f      	ldr	r1, [pc, #60]	; (1fa0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1f64:	480b      	ldr	r0, [pc, #44]	; (1f94 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1f66:	4b0f      	ldr	r3, [pc, #60]	; (1fa4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1f68:	4798      	blx	r3
    1f6a:	480f      	ldr	r0, [pc, #60]	; (1fa8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1f6c:	4b0f      	ldr	r3, [pc, #60]	; (1fac <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1f6e:	4798      	blx	r3
    1f70:	4a0a      	ldr	r2, [pc, #40]	; (1f9c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1f72:	490f      	ldr	r1, [pc, #60]	; (1fb0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    1f74:	480c      	ldr	r0, [pc, #48]	; (1fa8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1f76:	4b0b      	ldr	r3, [pc, #44]	; (1fa4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1f78:	4798      	blx	r3
    1f7a:	480e      	ldr	r0, [pc, #56]	; (1fb4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1f7c:	4b0e      	ldr	r3, [pc, #56]	; (1fb8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1f7e:	4798      	blx	r3
    1f80:	4a06      	ldr	r2, [pc, #24]	; (1f9c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1f82:	490e      	ldr	r1, [pc, #56]	; (1fbc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1f84:	480b      	ldr	r0, [pc, #44]	; (1fb4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1f86:	4b07      	ldr	r3, [pc, #28]	; (1fa4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1f88:	4798      	blx	r3
    1f8a:	bf00      	nop
    1f8c:	3708      	adds	r7, #8
    1f8e:	46bd      	mov	sp, r7
    1f90:	bd80      	pop	{r7, pc}
    1f92:	bf00      	nop
    1f94:	200014ac 	.word	0x200014ac
    1f98:	00002ab9 	.word	0x00002ab9
    1f9c:	20000000 	.word	0x20000000
    1fa0:	00002ad3 	.word	0x00002ad3
    1fa4:	00019ab1 	.word	0x00019ab1
    1fa8:	200014c0 	.word	0x200014c0
    1fac:	00000fa5 	.word	0x00000fa5
    1fb0:	00000fbf 	.word	0x00000fbf
    1fb4:	200014cc 	.word	0x200014cc
    1fb8:	00001b31 	.word	0x00001b31
    1fbc:	00001b45 	.word	0x00001b45

00001fc0 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    1fc0:	b580      	push	{r7, lr}
    1fc2:	af00      	add	r7, sp, #0
    1fc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1fc8:	2001      	movs	r0, #1
    1fca:	4b01      	ldr	r3, [pc, #4]	; (1fd0 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    1fcc:	4798      	blx	r3
    1fce:	bd80      	pop	{r7, pc}
    1fd0:	00001f41 	.word	0x00001f41

00001fd4 <main>:
		
	}
}

int main(void)
{
    1fd4:	b580      	push	{r7, lr}
    1fd6:	b082      	sub	sp, #8
    1fd8:	af00      	add	r7, sp, #0
	atmel_start_init();
    1fda:	4b40      	ldr	r3, [pc, #256]	; (20dc <main+0x108>)
    1fdc:	4798      	blx	r3
//  	uint32_t p=pwm_enable(&LIVE_PULSE);
//  	while (1);

	usb.Init();
    1fde:	4840      	ldr	r0, [pc, #256]	; (20e0 <main+0x10c>)
    1fe0:	4b40      	ldr	r3, [pc, #256]	; (20e4 <main+0x110>)
    1fe2:	4798      	blx	r3
	delay_ms(100);
    1fe4:	2064      	movs	r0, #100	; 0x64
    1fe6:	4b40      	ldr	r3, [pc, #256]	; (20e8 <main+0x114>)
    1fe8:	4798      	blx	r3
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    1fea:	4940      	ldr	r1, [pc, #256]	; (20ec <main+0x118>)
    1fec:	483c      	ldr	r0, [pc, #240]	; (20e0 <main+0x10c>)
    1fee:	4b40      	ldr	r3, [pc, #256]	; (20f0 <main+0x11c>)
    1ff0:	4798      	blx	r3
    1ff2:	4603      	mov	r3, r0
    1ff4:	493d      	ldr	r1, [pc, #244]	; (20ec <main+0x118>)
    1ff6:	4618      	mov	r0, r3
    1ff8:	4b3d      	ldr	r3, [pc, #244]	; (20f0 <main+0x11c>)
    1ffa:	4798      	blx	r3
    1ffc:	4603      	mov	r3, r0
    1ffe:	493d      	ldr	r1, [pc, #244]	; (20f4 <main+0x120>)
    2000:	4618      	mov	r0, r3
    2002:	4b3d      	ldr	r3, [pc, #244]	; (20f8 <main+0x124>)
    2004:	4798      	blx	r3
    2006:	4603      	mov	r3, r0
    2008:	4938      	ldr	r1, [pc, #224]	; (20ec <main+0x118>)
    200a:	4618      	mov	r0, r3
    200c:	4b38      	ldr	r3, [pc, #224]	; (20f0 <main+0x11c>)
    200e:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    2010:	493a      	ldr	r1, [pc, #232]	; (20fc <main+0x128>)
    2012:	4833      	ldr	r0, [pc, #204]	; (20e0 <main+0x10c>)
    2014:	4b3a      	ldr	r3, [pc, #232]	; (2100 <main+0x12c>)
    2016:	4798      	blx	r3
    2018:	4603      	mov	r3, r0
    201a:	493a      	ldr	r1, [pc, #232]	; (2104 <main+0x130>)
    201c:	4618      	mov	r0, r3
    201e:	4b38      	ldr	r3, [pc, #224]	; (2100 <main+0x12c>)
    2020:	4798      	blx	r3
    2022:	4603      	mov	r3, r0
    2024:	4938      	ldr	r1, [pc, #224]	; (2108 <main+0x134>)
    2026:	4618      	mov	r0, r3
    2028:	4b38      	ldr	r3, [pc, #224]	; (210c <main+0x138>)
    202a:	4798      	blx	r3
    202c:	4603      	mov	r3, r0
    202e:	4938      	ldr	r1, [pc, #224]	; (2110 <main+0x13c>)
    2030:	4618      	mov	r0, r3
    2032:	4b38      	ldr	r3, [pc, #224]	; (2114 <main+0x140>)
    2034:	4798      	blx	r3
    2036:	4603      	mov	r3, r0
    2038:	492c      	ldr	r1, [pc, #176]	; (20ec <main+0x118>)
    203a:	4618      	mov	r0, r3
    203c:	4b2c      	ldr	r3, [pc, #176]	; (20f0 <main+0x11c>)
    203e:	4798      	blx	r3
    2040:	4603      	mov	r3, r0
    2042:	492a      	ldr	r1, [pc, #168]	; (20ec <main+0x118>)
    2044:	4618      	mov	r0, r3
    2046:	4b2a      	ldr	r3, [pc, #168]	; (20f0 <main+0x11c>)
    2048:	4798      	blx	r3
	//QSPIDriverTest();
	memory.Init();
    204a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    204e:	4832      	ldr	r0, [pc, #200]	; (2118 <main+0x144>)
    2050:	4b32      	ldr	r3, [pc, #200]	; (211c <main+0x148>)
    2052:	4798      	blx	r3
	alu.Init();
    2054:	4832      	ldr	r0, [pc, #200]	; (2120 <main+0x14c>)
    2056:	4b33      	ldr	r3, [pc, #204]	; (2124 <main+0x150>)
    2058:	4798      	blx	r3
	alu.RunController();
    205a:	4831      	ldr	r0, [pc, #196]	; (2120 <main+0x14c>)
    205c:	4b32      	ldr	r3, [pc, #200]	; (2128 <main+0x154>)
    205e:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    2060:	4932      	ldr	r1, [pc, #200]	; (212c <main+0x158>)
    2062:	481f      	ldr	r0, [pc, #124]	; (20e0 <main+0x10c>)
    2064:	4b32      	ldr	r3, [pc, #200]	; (2130 <main+0x15c>)
    2066:	4798      	blx	r3
    2068:	4603      	mov	r3, r0
    206a:	4920      	ldr	r1, [pc, #128]	; (20ec <main+0x118>)
    206c:	4618      	mov	r0, r3
    206e:	4b20      	ldr	r3, [pc, #128]	; (20f0 <main+0x11c>)
    2070:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    2072:	482b      	ldr	r0, [pc, #172]	; (2120 <main+0x14c>)
    2074:	4b2f      	ldr	r3, [pc, #188]	; (2134 <main+0x160>)
    2076:	4798      	blx	r3
    2078:	4603      	mov	r3, r0
    207a:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    207c:	492e      	ldr	r1, [pc, #184]	; (2138 <main+0x164>)
    207e:	4818      	ldr	r0, [pc, #96]	; (20e0 <main+0x10c>)
    2080:	4b2e      	ldr	r3, [pc, #184]	; (213c <main+0x168>)
    2082:	4798      	blx	r3
    2084:	4602      	mov	r2, r0
    2086:	1dfb      	adds	r3, r7, #7
    2088:	4619      	mov	r1, r3
    208a:	4610      	mov	r0, r2
    208c:	4b2c      	ldr	r3, [pc, #176]	; (2140 <main+0x16c>)
    208e:	4798      	blx	r3
    2090:	4603      	mov	r3, r0
    2092:	4916      	ldr	r1, [pc, #88]	; (20ec <main+0x118>)
    2094:	4618      	mov	r0, r3
    2096:	4b16      	ldr	r3, [pc, #88]	; (20f0 <main+0x11c>)
    2098:	4798      	blx	r3
	if (!pBit)
    209a:	482a      	ldr	r0, [pc, #168]	; (2144 <main+0x170>)
    209c:	4b2a      	ldr	r3, [pc, #168]	; (2148 <main+0x174>)
    209e:	4798      	blx	r3
    20a0:	4603      	mov	r3, r0
    20a2:	f083 0301 	eor.w	r3, r3, #1
    20a6:	b2db      	uxtb	r3, r3
    20a8:	2b00      	cmp	r3, #0
    20aa:	d004      	beq.n	20b6 <main+0xe2>
	{
		hvac.Stop(0);
    20ac:	2100      	movs	r1, #0
    20ae:	4827      	ldr	r0, [pc, #156]	; (214c <main+0x178>)
    20b0:	4b27      	ldr	r3, [pc, #156]	; (2150 <main+0x17c>)
    20b2:	4798      	blx	r3
    20b4:	e003      	b.n	20be <main+0xea>
	} 
	else
	{
		hvac.Start(0);
    20b6:	2100      	movs	r1, #0
    20b8:	4824      	ldr	r0, [pc, #144]	; (214c <main+0x178>)
    20ba:	4b26      	ldr	r3, [pc, #152]	; (2154 <main+0x180>)
    20bc:	4798      	blx	r3
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
    20be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    20c2:	4b09      	ldr	r3, [pc, #36]	; (20e8 <main+0x114>)
    20c4:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    20c6:	490b      	ldr	r1, [pc, #44]	; (20f4 <main+0x120>)
    20c8:	4805      	ldr	r0, [pc, #20]	; (20e0 <main+0x10c>)
    20ca:	4b0b      	ldr	r3, [pc, #44]	; (20f8 <main+0x124>)
    20cc:	4798      	blx	r3
    20ce:	4603      	mov	r3, r0
    20d0:	4906      	ldr	r1, [pc, #24]	; (20ec <main+0x118>)
    20d2:	4618      	mov	r0, r3
    20d4:	4b06      	ldr	r3, [pc, #24]	; (20f0 <main+0x11c>)
    20d6:	4798      	blx	r3
		delay_ms(1000);
    20d8:	e7f1      	b.n	20be <main+0xea>
    20da:	bf00      	nop
    20dc:	0000475d 	.word	0x0000475d
    20e0:	2000a140 	.word	0x2000a140
    20e4:	00017bfd 	.word	0x00017bfd
    20e8:	000064b1 	.word	0x000064b1
    20ec:	0002162c 	.word	0x0002162c
    20f0:	00000c89 	.word	0x00000c89
    20f4:	00021664 	.word	0x00021664
    20f8:	00002159 	.word	0x00002159
    20fc:	00021688 	.word	0x00021688
    2100:	00002179 	.word	0x00002179
    2104:	00021694 	.word	0x00021694
    2108:	000216a0 	.word	0x000216a0
    210c:	00002199 	.word	0x00002199
    2110:	000216a8 	.word	0x000216a8
    2114:	000021b9 	.word	0x000021b9
    2118:	20002564 	.word	0x20002564
    211c:	00002391 	.word	0x00002391
    2120:	20000c80 	.word	0x20000c80
    2124:	00000481 	.word	0x00000481
    2128:	000005e5 	.word	0x000005e5
    212c:	000216b4 	.word	0x000216b4
    2130:	000021d9 	.word	0x000021d9
    2134:	0000076d 	.word	0x0000076d
    2138:	000216cc 	.word	0x000216cc
    213c:	000021f9 	.word	0x000021f9
    2140:	00000c61 	.word	0x00000c61
    2144:	2000154c 	.word	0x2000154c
    2148:	00002ae7 	.word	0x00002ae7
    214c:	20008034 	.word	0x20008034
    2150:	00003f49 	.word	0x00003f49
    2154:	000030a1 	.word	0x000030a1

00002158 <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2158:	b580      	push	{r7, lr}
    215a:	b082      	sub	sp, #8
    215c:	af00      	add	r7, sp, #0
    215e:	6078      	str	r0, [r7, #4]
    2160:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2162:	6839      	ldr	r1, [r7, #0]
    2164:	6878      	ldr	r0, [r7, #4]
    2166:	4b03      	ldr	r3, [pc, #12]	; (2174 <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    2168:	4798      	blx	r3
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	4618      	mov	r0, r3
    216e:	3708      	adds	r7, #8
    2170:	46bd      	mov	sp, r7
    2172:	bd80      	pop	{r7, pc}
    2174:	000180b1 	.word	0x000180b1

00002178 <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2178:	b580      	push	{r7, lr}
    217a:	b082      	sub	sp, #8
    217c:	af00      	add	r7, sp, #0
    217e:	6078      	str	r0, [r7, #4]
    2180:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2182:	6839      	ldr	r1, [r7, #0]
    2184:	6878      	ldr	r0, [r7, #4]
    2186:	4b03      	ldr	r3, [pc, #12]	; (2194 <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    2188:	4798      	blx	r3
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	4618      	mov	r0, r3
    218e:	3708      	adds	r7, #8
    2190:	46bd      	mov	sp, r7
    2192:	bd80      	pop	{r7, pc}
    2194:	000180b1 	.word	0x000180b1

00002198 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2198:	b580      	push	{r7, lr}
    219a:	b082      	sub	sp, #8
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
    21a0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    21a2:	6839      	ldr	r1, [r7, #0]
    21a4:	6878      	ldr	r0, [r7, #4]
    21a6:	4b03      	ldr	r3, [pc, #12]	; (21b4 <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    21a8:	4798      	blx	r3
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	4618      	mov	r0, r3
    21ae:	3708      	adds	r7, #8
    21b0:	46bd      	mov	sp, r7
    21b2:	bd80      	pop	{r7, pc}
    21b4:	000180b1 	.word	0x000180b1

000021b8 <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    21b8:	b580      	push	{r7, lr}
    21ba:	b082      	sub	sp, #8
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
    21c0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    21c2:	6839      	ldr	r1, [r7, #0]
    21c4:	6878      	ldr	r0, [r7, #4]
    21c6:	4b03      	ldr	r3, [pc, #12]	; (21d4 <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    21c8:	4798      	blx	r3
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	4618      	mov	r0, r3
    21ce:	3708      	adds	r7, #8
    21d0:	46bd      	mov	sp, r7
    21d2:	bd80      	pop	{r7, pc}
    21d4:	000180b1 	.word	0x000180b1

000021d8 <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    21d8:	b580      	push	{r7, lr}
    21da:	b082      	sub	sp, #8
    21dc:	af00      	add	r7, sp, #0
    21de:	6078      	str	r0, [r7, #4]
    21e0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    21e2:	6839      	ldr	r1, [r7, #0]
    21e4:	6878      	ldr	r0, [r7, #4]
    21e6:	4b03      	ldr	r3, [pc, #12]	; (21f4 <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    21e8:	4798      	blx	r3
    21ea:	687b      	ldr	r3, [r7, #4]
    21ec:	4618      	mov	r0, r3
    21ee:	3708      	adds	r7, #8
    21f0:	46bd      	mov	sp, r7
    21f2:	bd80      	pop	{r7, pc}
    21f4:	000180b1 	.word	0x000180b1

000021f8 <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    21f8:	b580      	push	{r7, lr}
    21fa:	b082      	sub	sp, #8
    21fc:	af00      	add	r7, sp, #0
    21fe:	6078      	str	r0, [r7, #4]
    2200:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2202:	6839      	ldr	r1, [r7, #0]
    2204:	6878      	ldr	r0, [r7, #4]
    2206:	4b03      	ldr	r3, [pc, #12]	; (2214 <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    2208:	4798      	blx	r3
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	4618      	mov	r0, r3
    220e:	3708      	adds	r7, #8
    2210:	46bd      	mov	sp, r7
    2212:	bd80      	pop	{r7, pc}
    2214:	000180b1 	.word	0x000180b1

00002218 <_Z41__static_initialization_and_destruction_0ii>:
    }
}
    2218:	b580      	push	{r7, lr}
    221a:	b082      	sub	sp, #8
    221c:	af00      	add	r7, sp, #0
    221e:	6078      	str	r0, [r7, #4]
    2220:	6039      	str	r1, [r7, #0]
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	2b01      	cmp	r3, #1
    2226:	d114      	bne.n	2252 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2228:	683b      	ldr	r3, [r7, #0]
    222a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    222e:	4293      	cmp	r3, r2
    2230:	d10f      	bne.n	2252 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2232:	480a      	ldr	r0, [pc, #40]	; (225c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2234:	4b0a      	ldr	r3, [pc, #40]	; (2260 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    2236:	4798      	blx	r3
    2238:	4a0a      	ldr	r2, [pc, #40]	; (2264 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    223a:	490b      	ldr	r1, [pc, #44]	; (2268 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    223c:	4807      	ldr	r0, [pc, #28]	; (225c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    223e:	4b0b      	ldr	r3, [pc, #44]	; (226c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    2240:	4798      	blx	r3
    2242:	480b      	ldr	r0, [pc, #44]	; (2270 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    2244:	4b0b      	ldr	r3, [pc, #44]	; (2274 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    2246:	4798      	blx	r3
    2248:	4a06      	ldr	r2, [pc, #24]	; (2264 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    224a:	490b      	ldr	r1, [pc, #44]	; (2278 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    224c:	4808      	ldr	r0, [pc, #32]	; (2270 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    224e:	4b07      	ldr	r3, [pc, #28]	; (226c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    2250:	4798      	blx	r3
    2252:	bf00      	nop
    2254:	3708      	adds	r7, #8
    2256:	46bd      	mov	sp, r7
    2258:	bd80      	pop	{r7, pc}
    225a:	bf00      	nop
    225c:	2000154c 	.word	0x2000154c
    2260:	00002ab9 	.word	0x00002ab9
    2264:	20000000 	.word	0x20000000
    2268:	00002ad3 	.word	0x00002ad3
    226c:	00019ab1 	.word	0x00019ab1
    2270:	20001560 	.word	0x20001560
    2274:	00000fa5 	.word	0x00000fa5
    2278:	00000fbf 	.word	0x00000fbf

0000227c <_GLOBAL__sub_I__Z14QSPIDriverTestv>:
    227c:	b580      	push	{r7, lr}
    227e:	af00      	add	r7, sp, #0
    2280:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2284:	2001      	movs	r0, #1
    2286:	4b01      	ldr	r3, [pc, #4]	; (228c <_GLOBAL__sub_I__Z14QSPIDriverTestv+0x10>)
    2288:	4798      	blx	r3
    228a:	bd80      	pop	{r7, pc}
    228c:	00002219 	.word	0x00002219

00002290 <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
    2290:	b580      	push	{r7, lr}
    2292:	b082      	sub	sp, #8
    2294:	af00      	add	r7, sp, #0
    2296:	6078      	str	r0, [r7, #4]
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	4618      	mov	r0, r3
    229c:	4b03      	ldr	r3, [pc, #12]	; (22ac <_ZN19PersistenceServicesD1Ev+0x1c>)
    229e:	4798      	blx	r3
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	4618      	mov	r0, r3
    22a4:	3708      	adds	r7, #8
    22a6:	46bd      	mov	sp, r7
    22a8:	bd80      	pop	{r7, pc}
    22aa:	bf00      	nop
    22ac:	000014a9 	.word	0x000014a9

000022b0 <_ZN21MemoryManagment_ClassC1Ev>:
#include "CDC_Class.h"

static	uint8_t	flashBufferStatic[QSPI_ERBLK/1];

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
    22b0:	b580      	push	{r7, lr}
    22b2:	b082      	sub	sp, #8
    22b4:	af00      	add	r7, sp, #0
    22b6:	6078      	str	r0, [r7, #4]
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	4618      	mov	r0, r3
    22bc:	4b1a      	ldr	r3, [pc, #104]	; (2328 <_ZN21MemoryManagment_ClassC1Ev+0x78>)
    22be:	4798      	blx	r3
    22c0:	687b      	ldr	r3, [r7, #4]
    22c2:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    22c6:	4618      	mov	r0, r3
    22c8:	4b18      	ldr	r3, [pc, #96]	; (232c <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
    22ca:	4798      	blx	r3
    22cc:	687b      	ldr	r3, [r7, #4]
    22ce:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    22d2:	4618      	mov	r0, r3
    22d4:	4b16      	ldr	r3, [pc, #88]	; (2330 <_ZN21MemoryManagment_ClassC1Ev+0x80>)
    22d6:	4798      	blx	r3
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    22de:	4618      	mov	r0, r3
    22e0:	4b14      	ldr	r3, [pc, #80]	; (2334 <_ZN21MemoryManagment_ClassC1Ev+0x84>)
    22e2:	4798      	blx	r3
    22e4:	687b      	ldr	r3, [r7, #4]
    22e6:	f203 733c 	addw	r3, r3, #1852	; 0x73c
    22ea:	4618      	mov	r0, r3
    22ec:	4b12      	ldr	r3, [pc, #72]	; (2338 <_ZN21MemoryManagment_ClassC1Ev+0x88>)
    22ee:	4798      	blx	r3
    22f0:	687b      	ldr	r3, [r7, #4]
    22f2:	2200      	movs	r2, #0
    22f4:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
{
	_currentAddress=0;
    22f8:	687b      	ldr	r3, [r7, #4]
    22fa:	2200      	movs	r2, #0
    22fc:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
	head=512;
    2300:	687b      	ldr	r3, [r7, #4]
    2302:	f44f 7200 	mov.w	r2, #512	; 0x200
    2306:	f8c3 2974 	str.w	r2, [r3, #2420]	; 0x974
	tail=0;
    230a:	687b      	ldr	r3, [r7, #4]
    230c:	2200      	movs	r2, #0
    230e:	f8c3 2978 	str.w	r2, [r3, #2424]	; 0x978
	flashBuffer=&flashBufferStatic[0];
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2318:	3330      	adds	r3, #48	; 0x30
    231a:	4a08      	ldr	r2, [pc, #32]	; (233c <_ZN21MemoryManagment_ClassC1Ev+0x8c>)
    231c:	601a      	str	r2, [r3, #0]
	
} //MemoryManagment_Class
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	4618      	mov	r0, r3
    2322:	3708      	adds	r7, #8
    2324:	46bd      	mov	sp, r7
    2326:	bd80      	pop	{r7, pc}
    2328:	0000157d 	.word	0x0000157d
    232c:	00002bbd 	.word	0x00002bbd
    2330:	000017d7 	.word	0x000017d7
    2334:	000026c1 	.word	0x000026c1
    2338:	000015e1 	.word	0x000015e1
    233c:	20001564 	.word	0x20001564

00002340 <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
    2340:	b580      	push	{r7, lr}
    2342:	b082      	sub	sp, #8
    2344:	af00      	add	r7, sp, #0
    2346:	6078      	str	r0, [r7, #4]
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    234e:	4618      	mov	r0, r3
    2350:	4b0b      	ldr	r3, [pc, #44]	; (2380 <_ZN21MemoryManagment_ClassD1Ev+0x40>)
    2352:	4798      	blx	r3
    2354:	687b      	ldr	r3, [r7, #4]
    2356:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    235a:	4618      	mov	r0, r3
    235c:	4b09      	ldr	r3, [pc, #36]	; (2384 <_ZN21MemoryManagment_ClassD1Ev+0x44>)
    235e:	4798      	blx	r3
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    2366:	4618      	mov	r0, r3
    2368:	4b07      	ldr	r3, [pc, #28]	; (2388 <_ZN21MemoryManagment_ClassD1Ev+0x48>)
    236a:	4798      	blx	r3
    236c:	687b      	ldr	r3, [r7, #4]
    236e:	4618      	mov	r0, r3
    2370:	4b06      	ldr	r3, [pc, #24]	; (238c <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
    2372:	4798      	blx	r3
{
} //~MemoryManagment_Class
    2374:	687b      	ldr	r3, [r7, #4]
    2376:	4618      	mov	r0, r3
    2378:	3708      	adds	r7, #8
    237a:	46bd      	mov	sp, r7
    237c:	bd80      	pop	{r7, pc}
    237e:	bf00      	nop
    2380:	000026d5 	.word	0x000026d5
    2384:	000017eb 	.word	0x000017eb
    2388:	00002291 	.word	0x00002291
    238c:	000015ad 	.word	0x000015ad

00002390 <_ZN21MemoryManagment_Class4InitEm>:

bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
    2390:	b580      	push	{r7, lr}
    2392:	b082      	sub	sp, #8
    2394:	af00      	add	r7, sp, #0
    2396:	6078      	str	r0, [r7, #4]
    2398:	6039      	str	r1, [r7, #0]
		if (qspiFlash.Init())
    239a:	481d      	ldr	r0, [pc, #116]	; (2410 <_ZN21MemoryManagment_Class4InitEm+0x80>)
    239c:	4b1d      	ldr	r3, [pc, #116]	; (2414 <_ZN21MemoryManagment_Class4InitEm+0x84>)
    239e:	4798      	blx	r3
    23a0:	4603      	mov	r3, r0
    23a2:	2b00      	cmp	r3, #0
    23a4:	d009      	beq.n	23ba <_ZN21MemoryManagment_Class4InitEm+0x2a>
		{
			usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
    23a6:	491c      	ldr	r1, [pc, #112]	; (2418 <_ZN21MemoryManagment_Class4InitEm+0x88>)
    23a8:	481c      	ldr	r0, [pc, #112]	; (241c <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    23aa:	4b1d      	ldr	r3, [pc, #116]	; (2420 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    23ac:	4798      	blx	r3
    23ae:	4603      	mov	r3, r0
    23b0:	491c      	ldr	r1, [pc, #112]	; (2424 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    23b2:	4618      	mov	r0, r3
    23b4:	4b1c      	ldr	r3, [pc, #112]	; (2428 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    23b6:	4798      	blx	r3
    23b8:	e008      	b.n	23cc <_ZN21MemoryManagment_Class4InitEm+0x3c>
		} 
		else
		{
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
    23ba:	491c      	ldr	r1, [pc, #112]	; (242c <_ZN21MemoryManagment_Class4InitEm+0x9c>)
    23bc:	4817      	ldr	r0, [pc, #92]	; (241c <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    23be:	4b18      	ldr	r3, [pc, #96]	; (2420 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    23c0:	4798      	blx	r3
    23c2:	4603      	mov	r3, r0
    23c4:	4917      	ldr	r1, [pc, #92]	; (2424 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    23c6:	4618      	mov	r0, r3
    23c8:	4b17      	ldr	r3, [pc, #92]	; (2428 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    23ca:	4798      	blx	r3
		}
		if (eeprom.Init())
    23cc:	4818      	ldr	r0, [pc, #96]	; (2430 <_ZN21MemoryManagment_Class4InitEm+0xa0>)
    23ce:	4b19      	ldr	r3, [pc, #100]	; (2434 <_ZN21MemoryManagment_Class4InitEm+0xa4>)
    23d0:	4798      	blx	r3
    23d2:	4603      	mov	r3, r0
    23d4:	2b00      	cmp	r3, #0
    23d6:	d009      	beq.n	23ec <_ZN21MemoryManagment_Class4InitEm+0x5c>
		{
			usb<<"EEPROM Memory SelfTest PASSED"<<NEWLINE;
    23d8:	4917      	ldr	r1, [pc, #92]	; (2438 <_ZN21MemoryManagment_Class4InitEm+0xa8>)
    23da:	4810      	ldr	r0, [pc, #64]	; (241c <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    23dc:	4b17      	ldr	r3, [pc, #92]	; (243c <_ZN21MemoryManagment_Class4InitEm+0xac>)
    23de:	4798      	blx	r3
    23e0:	4603      	mov	r3, r0
    23e2:	4910      	ldr	r1, [pc, #64]	; (2424 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    23e4:	4618      	mov	r0, r3
    23e6:	4b10      	ldr	r3, [pc, #64]	; (2428 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    23e8:	4798      	blx	r3
    23ea:	e008      	b.n	23fe <_ZN21MemoryManagment_Class4InitEm+0x6e>
		
		} 
		else
		{
			usb<<"EEPROM Memory SelfTest FAILED"<<NEWLINE;
    23ec:	4914      	ldr	r1, [pc, #80]	; (2440 <_ZN21MemoryManagment_Class4InitEm+0xb0>)
    23ee:	480b      	ldr	r0, [pc, #44]	; (241c <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    23f0:	4b12      	ldr	r3, [pc, #72]	; (243c <_ZN21MemoryManagment_Class4InitEm+0xac>)
    23f2:	4798      	blx	r3
    23f4:	4603      	mov	r3, r0
    23f6:	490b      	ldr	r1, [pc, #44]	; (2424 <_ZN21MemoryManagment_Class4InitEm+0x94>)
    23f8:	4618      	mov	r0, r3
    23fa:	4b0b      	ldr	r3, [pc, #44]	; (2428 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    23fc:	4798      	blx	r3
		}
		
		SetChipID(flashChipSize);
    23fe:	6839      	ldr	r1, [r7, #0]
    2400:	6878      	ldr	r0, [r7, #4]
    2402:	4b10      	ldr	r3, [pc, #64]	; (2444 <_ZN21MemoryManagment_Class4InitEm+0xb4>)
    2404:	4798      	blx	r3
}
    2406:	bf00      	nop
    2408:	4618      	mov	r0, r3
    240a:	3708      	adds	r7, #8
    240c:	46bd      	mov	sp, r7
    240e:	bd80      	pop	{r7, pc}
    2410:	20009c84 	.word	0x20009c84
    2414:	000167ad 	.word	0x000167ad
    2418:	000216dc 	.word	0x000216dc
    241c:	2000a140 	.word	0x2000a140
    2420:	00002645 	.word	0x00002645
    2424:	000216fc 	.word	0x000216fc
    2428:	00000c89 	.word	0x00000c89
    242c:	00021700 	.word	0x00021700
    2430:	20009c3c 	.word	0x20009c3c
    2434:	00015e09 	.word	0x00015e09
    2438:	00021720 	.word	0x00021720
    243c:	00000ca9 	.word	0x00000ca9
    2440:	00021740 	.word	0x00021740
    2444:	00002475 	.word	0x00002475

00002448 <_ZN21MemoryManagment_Class13_troubleshootEhb>:
 uint8_t	MemoryManagment_Class::GetErrorCode(){
	 
	 // PLease don forget to do the real impelementation
	 return	0;
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
    2448:	b580      	push	{r7, lr}
    244a:	b082      	sub	sp, #8
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
    2450:	460b      	mov	r3, r1
    2452:	70fb      	strb	r3, [r7, #3]
    2454:	4613      	mov	r3, r2
    2456:	70bb      	strb	r3, [r7, #2]
	  diagnostics.troubleshoot(_code, printoverride);
    2458:	78ba      	ldrb	r2, [r7, #2]
    245a:	78fb      	ldrb	r3, [r7, #3]
    245c:	4619      	mov	r1, r3
    245e:	4803      	ldr	r0, [pc, #12]	; (246c <_ZN21MemoryManagment_Class13_troubleshootEhb+0x24>)
    2460:	4b03      	ldr	r3, [pc, #12]	; (2470 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x28>)
    2462:	4798      	blx	r3
  }
    2464:	bf00      	nop
    2466:	3708      	adds	r7, #8
    2468:	46bd      	mov	sp, r7
    246a:	bd80      	pop	{r7, pc}
    246c:	20009038 	.word	0x20009038
    2470:	0001467d 	.word	0x0001467d

00002474 <_ZN21MemoryManagment_Class9SetChipIDEm>:

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
    2474:	b580      	push	{r7, lr}
    2476:	b082      	sub	sp, #8
    2478:	af00      	add	r7, sp, #0
    247a:	6078      	str	r0, [r7, #4]
    247c:	6039      	str	r1, [r7, #0]
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
    247e:	687b      	ldr	r3, [r7, #4]
    2480:	4618      	mov	r0, r3
    2482:	4b12      	ldr	r3, [pc, #72]	; (24cc <_ZN21MemoryManagment_Class9SetChipIDEm+0x58>)
    2484:	4798      	blx	r3
    2486:	4602      	mov	r2, r0
    2488:	687b      	ldr	r3, [r7, #4]
    248a:	f8c3 2968 	str.w	r2, [r3, #2408]	; 0x968


	 if (!logArea.capacity) {
    248e:	687b      	ldr	r3, [r7, #4]
    2490:	f8d3 3968 	ldr.w	r3, [r3, #2408]	; 0x968
    2494:	2b00      	cmp	r3, #0
    2496:	d113      	bne.n	24c0 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4c>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
    2498:	683b      	ldr	r3, [r7, #0]
    249a:	2b00      	cmp	r3, #0
    249c:	d009      	beq.n	24b2 <_ZN21MemoryManagment_Class9SetChipIDEm+0x3e>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
    249e:	687b      	ldr	r3, [r7, #4]
    24a0:	683a      	ldr	r2, [r7, #0]
    24a2:	f8c3 2968 	str.w	r2, [r3, #2408]	; 0x968
			 logArea.supported = false;
    24a6:	687b      	ldr	r3, [r7, #4]
    24a8:	2200      	movs	r2, #0
    24aa:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
			 return true;
    24ae:	2301      	movs	r3, #1
    24b0:	e007      	b.n	24c2 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
    24b2:	2200      	movs	r2, #0
    24b4:	2103      	movs	r1, #3
    24b6:	6878      	ldr	r0, [r7, #4]
    24b8:	4b05      	ldr	r3, [pc, #20]	; (24d0 <_ZN21MemoryManagment_Class9SetChipIDEm+0x5c>)
    24ba:	4798      	blx	r3
			 return false;
    24bc:	2300      	movs	r3, #0
    24be:	e000      	b.n	24c2 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

	 }
	 return true;
    24c0:	2301      	movs	r3, #1
 }
    24c2:	4618      	mov	r0, r3
    24c4:	3708      	adds	r7, #8
    24c6:	46bd      	mov	sp, r7
    24c8:	bd80      	pop	{r7, pc}
    24ca:	bf00      	nop
    24cc:	0001692d 	.word	0x0001692d
    24d0:	00002449 	.word	0x00002449

000024d4 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState>:
	handlerAppState=PTR_HVAC_STATE(&as);
	uint32_t	add=(uint32_t )(&flashMap->hvacStateSector.hvacDefaultState);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
	return	r;
}
 uint32_t	MemoryManagment_Class::WriteValidApplicationState(HVACState& hs ){
    24d4:	b580      	push	{r7, lr}
    24d6:	b084      	sub	sp, #16
    24d8:	af00      	add	r7, sp, #0
    24da:	6078      	str	r0, [r7, #4]
    24dc:	6039      	str	r1, [r7, #0]
	uint32_t w=  WriteCurrentState(hs);
    24de:	687b      	ldr	r3, [r7, #4]
    24e0:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    24e4:	6839      	ldr	r1, [r7, #0]
    24e6:	4618      	mov	r0, r3
    24e8:	4b11      	ldr	r3, [pc, #68]	; (2530 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x5c>)
    24ea:	4798      	blx	r3
    24ec:	60f8      	str	r0, [r7, #12]
	crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    24f4:	2268      	movs	r2, #104	; 0x68
    24f6:	6839      	ldr	r1, [r7, #0]
    24f8:	4618      	mov	r0, r3
    24fa:	4b0e      	ldr	r3, [pc, #56]	; (2534 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x60>)
    24fc:	4798      	blx	r3
    24fe:	4602      	mov	r2, r0
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2506:	332c      	adds	r3, #44	; 0x2c
    2508:	601a      	str	r2, [r3, #0]
	w=WriteCRCAppState(crc32);
    250a:	687b      	ldr	r3, [r7, #4]
    250c:	f503 62d0 	add.w	r2, r3, #1664	; 0x680
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2516:	332c      	adds	r3, #44	; 0x2c
    2518:	681b      	ldr	r3, [r3, #0]
    251a:	4619      	mov	r1, r3
    251c:	4610      	mov	r0, r2
    251e:	4b06      	ldr	r3, [pc, #24]	; (2538 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x64>)
    2520:	4798      	blx	r3
    2522:	60f8      	str	r0, [r7, #12]
	return	w;
    2524:	68fb      	ldr	r3, [r7, #12]
 }
    2526:	4618      	mov	r0, r3
    2528:	3710      	adds	r7, #16
    252a:	46bd      	mov	sp, r7
    252c:	bd80      	pop	{r7, pc}
    252e:	bf00      	nop
    2530:	00002979 	.word	0x00002979
    2534:	00001519 	.word	0x00001519
    2538:	000029e9 	.word	0x000029e9

0000253c <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState>:
 uint32_t	MemoryManagment_Class::WriteValidConfigurationData(ConfigurationData& cd){
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
 };
 uint32_t	MemoryManagment_Class::SaveCurrentState(HVACState& hs){
    253c:	b590      	push	{r4, r7, lr}
    253e:	b087      	sub	sp, #28
    2540:	af00      	add	r7, sp, #0
    2542:	6078      	str	r0, [r7, #4]
    2544:	6039      	str	r1, [r7, #0]
	 uint32_t	add=(uint32_t)&flashMap->hvacStateSector;
    2546:	4b18      	ldr	r3, [pc, #96]	; (25a8 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x6c>)
    2548:	681b      	ldr	r3, [r3, #0]
    254a:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    254e:	332c      	adds	r3, #44	; 0x2c
    2550:	617b      	str	r3, [r7, #20]
	 HVACStateSector	*hss=(HVACStateSector*)&flashBuffer[0];
    2552:	687b      	ldr	r3, [r7, #4]
    2554:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2558:	3330      	adds	r3, #48	; 0x30
    255a:	681b      	ldr	r3, [r3, #0]
    255c:	613b      	str	r3, [r7, #16]
	 uint32_t r=qspiFlash.ReadAddress((uint8_t*)hss,add,QSPI_ERBLK);
    255e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2562:	697a      	ldr	r2, [r7, #20]
    2564:	6939      	ldr	r1, [r7, #16]
    2566:	4811      	ldr	r0, [pc, #68]	; (25ac <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    2568:	4c11      	ldr	r4, [pc, #68]	; (25b0 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x74>)
    256a:	47a0      	blx	r4
    256c:	60f8      	str	r0, [r7, #12]
	 if (r==0)
    256e:	68fb      	ldr	r3, [r7, #12]
    2570:	2b00      	cmp	r3, #0
    2572:	d114      	bne.n	259e <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x62>
	 {
		 memcpy((void*)&(hss->hvacState),(void*)&hs,sizeof(HVACState));
    2574:	693b      	ldr	r3, [r7, #16]
    2576:	3370      	adds	r3, #112	; 0x70
    2578:	2268      	movs	r2, #104	; 0x68
    257a:	6839      	ldr	r1, [r7, #0]
    257c:	4618      	mov	r0, r3
    257e:	4b0d      	ldr	r3, [pc, #52]	; (25b4 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x78>)
    2580:	4798      	blx	r3
		 qspiFlash.Erase(add);
    2582:	6979      	ldr	r1, [r7, #20]
    2584:	4809      	ldr	r0, [pc, #36]	; (25ac <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    2586:	4b0c      	ldr	r3, [pc, #48]	; (25b8 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x7c>)
    2588:	4798      	blx	r3
		 uint32_t w=qspiFlash.WriteAddress((uint8_t*)hss,add,QSPI_ERBLK);
    258a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    258e:	697a      	ldr	r2, [r7, #20]
    2590:	6939      	ldr	r1, [r7, #16]
    2592:	4806      	ldr	r0, [pc, #24]	; (25ac <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    2594:	4c09      	ldr	r4, [pc, #36]	; (25bc <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x80>)
    2596:	47a0      	blx	r4
    2598:	60b8      	str	r0, [r7, #8]
		  return	w;
    259a:	68bb      	ldr	r3, [r7, #8]
    259c:	e000      	b.n	25a0 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x64>
	 }

	 return	r;
    259e:	68fb      	ldr	r3, [r7, #12]
 }
    25a0:	4618      	mov	r0, r3
    25a2:	371c      	adds	r7, #28
    25a4:	46bd      	mov	sp, r7
    25a6:	bd90      	pop	{r4, r7, pc}
    25a8:	20007f98 	.word	0x20007f98
    25ac:	20009c84 	.word	0x20009c84
    25b0:	0001687d 	.word	0x0001687d
    25b4:	0001d37d 	.word	0x0001d37d
    25b8:	00016819 	.word	0x00016819
    25bc:	00016849 	.word	0x00016849

000025c0 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryManagment_Class::SaveApplicationState(HVACState& hs ){
    25c0:	b580      	push	{r7, lr}
    25c2:	b084      	sub	sp, #16
    25c4:	af00      	add	r7, sp, #0
    25c6:	6078      	str	r0, [r7, #4]
    25c8:	6039      	str	r1, [r7, #0]
	  uint32_t w=  SaveCurrentState(hs);
    25ca:	6839      	ldr	r1, [r7, #0]
    25cc:	6878      	ldr	r0, [r7, #4]
    25ce:	4b10      	ldr	r3, [pc, #64]	; (2610 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x50>)
    25d0:	4798      	blx	r3
    25d2:	60f8      	str	r0, [r7, #12]
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    25da:	2268      	movs	r2, #104	; 0x68
    25dc:	6839      	ldr	r1, [r7, #0]
    25de:	4618      	mov	r0, r3
    25e0:	4b0c      	ldr	r3, [pc, #48]	; (2614 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x54>)
    25e2:	4798      	blx	r3
    25e4:	4602      	mov	r2, r0
    25e6:	687b      	ldr	r3, [r7, #4]
    25e8:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    25ec:	332c      	adds	r3, #44	; 0x2c
    25ee:	601a      	str	r2, [r3, #0]
	  w=SaveCRCAppState(crc32);
    25f0:	687b      	ldr	r3, [r7, #4]
    25f2:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    25f6:	332c      	adds	r3, #44	; 0x2c
    25f8:	681b      	ldr	r3, [r3, #0]
    25fa:	4619      	mov	r1, r3
    25fc:	6878      	ldr	r0, [r7, #4]
    25fe:	4b06      	ldr	r3, [pc, #24]	; (2618 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x58>)
    2600:	4798      	blx	r3
    2602:	60f8      	str	r0, [r7, #12]
	  return	w;
    2604:	68fb      	ldr	r3, [r7, #12]
  }
    2606:	4618      	mov	r0, r3
    2608:	3710      	adds	r7, #16
    260a:	46bd      	mov	sp, r7
    260c:	bd80      	pop	{r7, pc}
    260e:	bf00      	nop
    2610:	0000253d 	.word	0x0000253d
    2614:	00001519 	.word	0x00001519
    2618:	0000261d 	.word	0x0000261d

0000261c <_ZN21MemoryManagment_Class15SaveCRCAppStateEm>:
uint32_t	MemoryManagment_Class::SaveCRCAppState(uint32_t crc){
    261c:	b580      	push	{r7, lr}
    261e:	b082      	sub	sp, #8
    2620:	af00      	add	r7, sp, #0
    2622:	6078      	str	r0, [r7, #4]
    2624:	6039      	str	r1, [r7, #0]
// 	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
// 	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
    2626:	687b      	ldr	r3, [r7, #4]
    2628:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    262c:	6839      	ldr	r1, [r7, #0]
    262e:	4618      	mov	r0, r3
    2630:	4b03      	ldr	r3, [pc, #12]	; (2640 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm+0x24>)
    2632:	4798      	blx	r3
    2634:	4603      	mov	r3, r0
}
    2636:	4618      	mov	r0, r3
    2638:	3708      	adds	r7, #8
    263a:	46bd      	mov	sp, r7
    263c:	bd80      	pop	{r7, pc}
    263e:	bf00      	nop
    2640:	000029e9 	.word	0x000029e9

00002644 <_ZlsIA29_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2644:	b580      	push	{r7, lr}
    2646:	b082      	sub	sp, #8
    2648:	af00      	add	r7, sp, #0
    264a:	6078      	str	r0, [r7, #4]
    264c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    264e:	6839      	ldr	r1, [r7, #0]
    2650:	6878      	ldr	r0, [r7, #4]
    2652:	4b03      	ldr	r3, [pc, #12]	; (2660 <_ZlsIA29_cER5PrintS2_RKT_+0x1c>)
    2654:	4798      	blx	r3
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	4618      	mov	r0, r3
    265a:	3708      	adds	r7, #8
    265c:	46bd      	mov	sp, r7
    265e:	bd80      	pop	{r7, pc}
    2660:	000180b1 	.word	0x000180b1

00002664 <_Z41__static_initialization_and_destruction_0ii>:
 
    2664:	b580      	push	{r7, lr}
    2666:	b082      	sub	sp, #8
    2668:	af00      	add	r7, sp, #0
    266a:	6078      	str	r0, [r7, #4]
    266c:	6039      	str	r1, [r7, #0]
    266e:	687b      	ldr	r3, [r7, #4]
    2670:	2b01      	cmp	r3, #1
    2672:	d10c      	bne.n	268e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2674:	683b      	ldr	r3, [r7, #0]
    2676:	f64f 72ff 	movw	r2, #65535	; 0xffff
    267a:	4293      	cmp	r3, r2
    267c:	d107      	bne.n	268e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    267e:	4806      	ldr	r0, [pc, #24]	; (2698 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2680:	4b06      	ldr	r3, [pc, #24]	; (269c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2682:	4798      	blx	r3
    2684:	4a06      	ldr	r2, [pc, #24]	; (26a0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2686:	4907      	ldr	r1, [pc, #28]	; (26a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2688:	4803      	ldr	r0, [pc, #12]	; (2698 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    268a:	4b07      	ldr	r3, [pc, #28]	; (26a8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    268c:	4798      	blx	r3
    268e:	bf00      	nop
    2690:	3708      	adds	r7, #8
    2692:	46bd      	mov	sp, r7
    2694:	bd80      	pop	{r7, pc}
    2696:	bf00      	nop
    2698:	20002564 	.word	0x20002564
    269c:	000022b1 	.word	0x000022b1
    26a0:	20000000 	.word	0x20000000
    26a4:	00002341 	.word	0x00002341
    26a8:	00019ab1 	.word	0x00019ab1

000026ac <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
    26ac:	b580      	push	{r7, lr}
    26ae:	af00      	add	r7, sp, #0
    26b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    26b4:	2001      	movs	r0, #1
    26b6:	4b01      	ldr	r3, [pc, #4]	; (26bc <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
    26b8:	4798      	blx	r3
    26ba:	bd80      	pop	{r7, pc}
    26bc:	00002665 	.word	0x00002665

000026c0 <_ZN18FlashHandler_ClassC1Ev>:


MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
    26c0:	b480      	push	{r7}
    26c2:	b083      	sub	sp, #12
    26c4:	af00      	add	r7, sp, #0
    26c6:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
    26c8:	687b      	ldr	r3, [r7, #4]
    26ca:	4618      	mov	r0, r3
    26cc:	370c      	adds	r7, #12
    26ce:	46bd      	mov	sp, r7
    26d0:	bc80      	pop	{r7}
    26d2:	4770      	bx	lr

000026d4 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
    26d4:	b480      	push	{r7}
    26d6:	b083      	sub	sp, #12
    26d8:	af00      	add	r7, sp, #0
    26da:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	4618      	mov	r0, r3
    26e0:	370c      	adds	r7, #12
    26e2:	46bd      	mov	sp, r7
    26e4:	bc80      	pop	{r7}
    26e6:	4770      	bx	lr

000026e8 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData>:

uint32_t	FlashHandler_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
    26e8:	b580      	push	{r7, lr}
    26ea:	b084      	sub	sp, #16
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
    26f0:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    26f2:	4b08      	ldr	r3, [pc, #32]	; (2714 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x2c>)
    26f4:	681b      	ldr	r3, [r3, #0]
    26f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    26fa:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    26fc:	68fa      	ldr	r2, [r7, #12]
    26fe:	6839      	ldr	r1, [r7, #0]
    2700:	6878      	ldr	r0, [r7, #4]
    2702:	4b05      	ldr	r3, [pc, #20]	; (2718 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x30>)
    2704:	4798      	blx	r3
    2706:	60b8      	str	r0, [r7, #8]
	return	r;
    2708:	68bb      	ldr	r3, [r7, #8]
}
    270a:	4618      	mov	r0, r3
    270c:	3710      	adds	r7, #16
    270e:	46bd      	mov	sp, r7
    2710:	bd80      	pop	{r7, pc}
    2712:	bf00      	nop
    2714:	20007f98 	.word	0x20007f98
    2718:	00002785 	.word	0x00002785

0000271c <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadDefaultParameters(UserParameters& up){
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
	uint32_t	r=ReadParameters(up,add);
	return	r;
}
uint32_t	FlashHandler_Class::ReadLastConfigurationData(ConfigurationData& cd){
    271c:	b580      	push	{r7, lr}
    271e:	b084      	sub	sp, #16
    2720:	af00      	add	r7, sp, #0
    2722:	6078      	str	r0, [r7, #4]
    2724:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
    2726:	4b08      	ldr	r3, [pc, #32]	; (2748 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x2c>)
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
    272e:	332c      	adds	r3, #44	; 0x2c
    2730:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    2732:	68fa      	ldr	r2, [r7, #12]
    2734:	6839      	ldr	r1, [r7, #0]
    2736:	6878      	ldr	r0, [r7, #4]
    2738:	4b04      	ldr	r3, [pc, #16]	; (274c <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x30>)
    273a:	4798      	blx	r3
    273c:	60b8      	str	r0, [r7, #8]
	return	r;
    273e:	68bb      	ldr	r3, [r7, #8]
}
    2740:	4618      	mov	r0, r3
    2742:	3710      	adds	r7, #16
    2744:	46bd      	mov	sp, r7
    2746:	bd80      	pop	{r7, pc}
    2748:	20007f98 	.word	0x20007f98
    274c:	00002785 	.word	0x00002785

00002750 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
    2750:	b580      	push	{r7, lr}
    2752:	b084      	sub	sp, #16
    2754:	af00      	add	r7, sp, #0
    2756:	6078      	str	r0, [r7, #4]
    2758:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.updatedConfiguration;
    275a:	4b08      	ldr	r3, [pc, #32]	; (277c <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x2c>)
    275c:	681b      	ldr	r3, [r3, #0]
    275e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
    2762:	3304      	adds	r3, #4
    2764:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    2766:	68fa      	ldr	r2, [r7, #12]
    2768:	6839      	ldr	r1, [r7, #0]
    276a:	6878      	ldr	r0, [r7, #4]
    276c:	4b04      	ldr	r3, [pc, #16]	; (2780 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x30>)
    276e:	4798      	blx	r3
    2770:	60b8      	str	r0, [r7, #8]
	return	r;
    2772:	68bb      	ldr	r3, [r7, #8]
}
    2774:	4618      	mov	r0, r3
    2776:	3710      	adds	r7, #16
    2778:	46bd      	mov	sp, r7
    277a:	bd80      	pop	{r7, pc}
    277c:	20007f98 	.word	0x20007f98
    2780:	00002785 	.word	0x00002785

00002784 <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam>:

uint32_t	FlashHandler_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
    2784:	b590      	push	{r4, r7, lr}
    2786:	b087      	sub	sp, #28
    2788:	af00      	add	r7, sp, #0
    278a:	60f8      	str	r0, [r7, #12]
    278c:	60b9      	str	r1, [r7, #8]
    278e:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    2790:	68ba      	ldr	r2, [r7, #8]
    2792:	68fb      	ldr	r3, [r7, #12]
    2794:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    2798:	68fb      	ldr	r3, [r7, #12]
    279a:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    279e:	23ac      	movs	r3, #172	; 0xac
    27a0:	687a      	ldr	r2, [r7, #4]
    27a2:	4804      	ldr	r0, [pc, #16]	; (27b4 <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x30>)
    27a4:	4c04      	ldr	r4, [pc, #16]	; (27b8 <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x34>)
    27a6:	47a0      	blx	r4
    27a8:	6178      	str	r0, [r7, #20]
	return	r;
    27aa:	697b      	ldr	r3, [r7, #20]
}
    27ac:	4618      	mov	r0, r3
    27ae:	371c      	adds	r7, #28
    27b0:	46bd      	mov	sp, r7
    27b2:	bd90      	pop	{r4, r7, pc}
    27b4:	20009c84 	.word	0x20009c84
    27b8:	0001687d 	.word	0x0001687d

000027bc <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
	return	r;
}
uint32_t	FlashHandler_Class::ReadCRCConfigurationData(void){
    27bc:	b590      	push	{r4, r7, lr}
    27be:	b087      	sub	sp, #28
    27c0:	af00      	add	r7, sp, #0
    27c2:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    27c4:	4b09      	ldr	r3, [pc, #36]	; (27ec <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x30>)
    27c6:	681b      	ldr	r3, [r3, #0]
    27c8:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    27cc:	3330      	adds	r3, #48	; 0x30
    27ce:	617b      	str	r3, [r7, #20]
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    27d0:	f107 010c 	add.w	r1, r7, #12
    27d4:	2304      	movs	r3, #4
    27d6:	697a      	ldr	r2, [r7, #20]
    27d8:	4805      	ldr	r0, [pc, #20]	; (27f0 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x34>)
    27da:	4c06      	ldr	r4, [pc, #24]	; (27f4 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x38>)
    27dc:	47a0      	blx	r4
    27de:	6138      	str	r0, [r7, #16]
	return	crc;
    27e0:	68fb      	ldr	r3, [r7, #12]
}
    27e2:	4618      	mov	r0, r3
    27e4:	371c      	adds	r7, #28
    27e6:	46bd      	mov	sp, r7
    27e8:	bd90      	pop	{r4, r7, pc}
    27ea:	bf00      	nop
    27ec:	20007f98 	.word	0x20007f98
    27f0:	20009c84 	.word	0x20009c84
    27f4:	0001687d 	.word	0x0001687d

000027f8 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
    27f8:	b590      	push	{r4, r7, lr}
    27fa:	b087      	sub	sp, #28
    27fc:	af00      	add	r7, sp, #0
    27fe:	60f8      	str	r0, [r7, #12]
    2800:	60b9      	str	r1, [r7, #8]
    2802:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    2804:	68ba      	ldr	r2, [r7, #8]
    2806:	68fb      	ldr	r3, [r7, #12]
    2808:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    280c:	68fb      	ldr	r3, [r7, #12]
    280e:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    2812:	23ac      	movs	r3, #172	; 0xac
    2814:	687a      	ldr	r2, [r7, #4]
    2816:	4804      	ldr	r0, [pc, #16]	; (2828 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x30>)
    2818:	4c04      	ldr	r4, [pc, #16]	; (282c <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x34>)
    281a:	47a0      	blx	r4
    281c:	6178      	str	r0, [r7, #20]
	return	w;
    281e:	697b      	ldr	r3, [r7, #20]
}
    2820:	4618      	mov	r0, r3
    2822:	371c      	adds	r7, #28
    2824:	46bd      	mov	sp, r7
    2826:	bd90      	pop	{r4, r7, pc}
    2828:	20009c84 	.word	0x20009c84
    282c:	00016849 	.word	0x00016849

00002830 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    2830:	b590      	push	{r4, r7, lr}
    2832:	b087      	sub	sp, #28
    2834:	af00      	add	r7, sp, #0
    2836:	60f8      	str	r0, [r7, #12]
    2838:	60b9      	str	r1, [r7, #8]
    283a:	607a      	str	r2, [r7, #4]

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    283c:	2301      	movs	r3, #1
    283e:	687a      	ldr	r2, [r7, #4]
    2840:	68b9      	ldr	r1, [r7, #8]
    2842:	4804      	ldr	r0, [pc, #16]	; (2854 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x24>)
    2844:	4c04      	ldr	r4, [pc, #16]	; (2858 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x28>)
    2846:	47a0      	blx	r4
    2848:	6178      	str	r0, [r7, #20]
	return	w;
    284a:	697b      	ldr	r3, [r7, #20]
}
    284c:	4618      	mov	r0, r3
    284e:	371c      	adds	r7, #28
    2850:	46bd      	mov	sp, r7
    2852:	bd90      	pop	{r4, r7, pc}
    2854:	20009c84 	.word	0x20009c84
    2858:	00016849 	.word	0x00016849

0000285c <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem>:
uint32_t	FlashHandler_Class::WriteApplicationState(HVACState& hs,uint32_t add){
    285c:	b590      	push	{r4, r7, lr}
    285e:	b087      	sub	sp, #28
    2860:	af00      	add	r7, sp, #0
    2862:	60f8      	str	r0, [r7, #12]
    2864:	60b9      	str	r1, [r7, #8]
    2866:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    2868:	68ba      	ldr	r2, [r7, #8]
    286a:	68fb      	ldr	r3, [r7, #12]
    286c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
    2870:	68fb      	ldr	r3, [r7, #12]
    2872:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    2876:	2368      	movs	r3, #104	; 0x68
    2878:	687a      	ldr	r2, [r7, #4]
    287a:	4804      	ldr	r0, [pc, #16]	; (288c <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x30>)
    287c:	4c04      	ldr	r4, [pc, #16]	; (2890 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x34>)
    287e:	47a0      	blx	r4
    2880:	6178      	str	r0, [r7, #20]
	return	w;
    2882:	697b      	ldr	r3, [r7, #20]
}
    2884:	4618      	mov	r0, r3
    2886:	371c      	adds	r7, #28
    2888:	46bd      	mov	sp, r7
    288a:	bd90      	pop	{r4, r7, pc}
    288c:	20009c84 	.word	0x20009c84
    2890:	00016849 	.word	0x00016849

00002894 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv>:
uint32_t	FlashHandler_Class::WriteDefaultConfiguration(void){
    2894:	b580      	push	{r7, lr}
    2896:	b0b0      	sub	sp, #192	; 0xc0
    2898:	af00      	add	r7, sp, #0
    289a:	6078      	str	r0, [r7, #4]
	ConfigurationData cd=factoryDefaultsConfiguration;
    289c:	4a0e      	ldr	r2, [pc, #56]	; (28d8 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x44>)
    289e:	f107 030c 	add.w	r3, r7, #12
    28a2:	4611      	mov	r1, r2
    28a4:	22ac      	movs	r2, #172	; 0xac
    28a6:	4618      	mov	r0, r3
    28a8:	4b0c      	ldr	r3, [pc, #48]	; (28dc <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x48>)
    28aa:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    28ac:	4b0c      	ldr	r3, [pc, #48]	; (28e0 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x4c>)
    28ae:	681b      	ldr	r3, [r3, #0]
    28b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    28b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t	w=WriteConfigurationData(cd,add);
    28b8:	f107 030c 	add.w	r3, r7, #12
    28bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    28c0:	4619      	mov	r1, r3
    28c2:	6878      	ldr	r0, [r7, #4]
    28c4:	4b07      	ldr	r3, [pc, #28]	; (28e4 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x50>)
    28c6:	4798      	blx	r3
    28c8:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	return	w;
    28cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
}
    28d0:	4618      	mov	r0, r3
    28d2:	37c0      	adds	r7, #192	; 0xc0
    28d4:	46bd      	mov	sp, r7
    28d6:	bd80      	pop	{r7, pc}
    28d8:	00021190 	.word	0x00021190
    28dc:	0001d37d 	.word	0x0001d37d
    28e0:	20007f98 	.word	0x20007f98
    28e4:	000027f9 	.word	0x000027f9

000028e8 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    28e8:	b580      	push	{r7, lr}
    28ea:	b086      	sub	sp, #24
    28ec:	af00      	add	r7, sp, #0
    28ee:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    28f0:	4b0a      	ldr	r3, [pc, #40]	; (291c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x34>)
    28f2:	781b      	ldrb	r3, [r3, #0]
    28f4:	733b      	strb	r3, [r7, #12]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    28f6:	4b0a      	ldr	r3, [pc, #40]	; (2920 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x38>)
    28f8:	681b      	ldr	r3, [r3, #0]
    28fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    28fe:	3301      	adds	r3, #1
    2900:	617b      	str	r3, [r7, #20]
	uint32_t	w=WriteParameters(up,add);
    2902:	f107 030c 	add.w	r3, r7, #12
    2906:	697a      	ldr	r2, [r7, #20]
    2908:	4619      	mov	r1, r3
    290a:	6878      	ldr	r0, [r7, #4]
    290c:	4b05      	ldr	r3, [pc, #20]	; (2924 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x3c>)
    290e:	4798      	blx	r3
    2910:	6138      	str	r0, [r7, #16]
	return	w;
    2912:	693b      	ldr	r3, [r7, #16]
}
    2914:	4618      	mov	r0, r3
    2916:	3718      	adds	r7, #24
    2918:	46bd      	mov	sp, r7
    291a:	bd80      	pop	{r7, pc}
    291c:	00022ef0 	.word	0x00022ef0
    2920:	20007f98 	.word	0x20007f98
    2924:	00002831 	.word	0x00002831

00002928 <_ZN18FlashHandler_Class17WriteDefaultStateEv>:
uint32_t	FlashHandler_Class::WriteDefaultState(void){
    2928:	b580      	push	{r7, lr}
    292a:	b09e      	sub	sp, #120	; 0x78
    292c:	af00      	add	r7, sp, #0
    292e:	6078      	str	r0, [r7, #4]
	HVACState hs=defaultHVACState;
    2930:	4a0d      	ldr	r2, [pc, #52]	; (2968 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x40>)
    2932:	f107 0308 	add.w	r3, r7, #8
    2936:	4611      	mov	r1, r2
    2938:	2268      	movs	r2, #104	; 0x68
    293a:	4618      	mov	r0, r3
    293c:	4b0b      	ldr	r3, [pc, #44]	; (296c <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x44>)
    293e:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacDefaultState;
    2940:	4b0b      	ldr	r3, [pc, #44]	; (2970 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x48>)
    2942:	681b      	ldr	r3, [r3, #0]
    2944:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    2948:	3334      	adds	r3, #52	; 0x34
    294a:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t	w=WriteApplicationState(hs,add);
    294c:	f107 0308 	add.w	r3, r7, #8
    2950:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    2952:	4619      	mov	r1, r3
    2954:	6878      	ldr	r0, [r7, #4]
    2956:	4b07      	ldr	r3, [pc, #28]	; (2974 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x4c>)
    2958:	4798      	blx	r3
    295a:	6738      	str	r0, [r7, #112]	; 0x70
	return	w;
    295c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
    295e:	4618      	mov	r0, r3
    2960:	3778      	adds	r7, #120	; 0x78
    2962:	46bd      	mov	sp, r7
    2964:	bd80      	pop	{r7, pc}
    2966:	bf00      	nop
    2968:	00021520 	.word	0x00021520
    296c:	0001d37d 	.word	0x0001d37d
    2970:	20007f98 	.word	0x20007f98
    2974:	0000285d 	.word	0x0000285d

00002978 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState>:

uint32_t	FlashHandler_Class::WriteCurrentState(HVACState& hs){
    2978:	b580      	push	{r7, lr}
    297a:	b084      	sub	sp, #16
    297c:	af00      	add	r7, sp, #0
    297e:	6078      	str	r0, [r7, #4]
    2980:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacState;
    2982:	4b08      	ldr	r3, [pc, #32]	; (29a4 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x2c>)
    2984:	681b      	ldr	r3, [r3, #0]
    2986:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    298a:	331c      	adds	r3, #28
    298c:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hs,add);
    298e:	68fa      	ldr	r2, [r7, #12]
    2990:	6839      	ldr	r1, [r7, #0]
    2992:	6878      	ldr	r0, [r7, #4]
    2994:	4b04      	ldr	r3, [pc, #16]	; (29a8 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x30>)
    2996:	4798      	blx	r3
    2998:	60b8      	str	r0, [r7, #8]
	return	w;
    299a:	68bb      	ldr	r3, [r7, #8]
}
    299c:	4618      	mov	r0, r3
    299e:	3710      	adds	r7, #16
    29a0:	46bd      	mov	sp, r7
    29a2:	bd80      	pop	{r7, pc}
    29a4:	20007f98 	.word	0x20007f98
    29a8:	0000285d 	.word	0x0000285d

000029ac <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm>:

uint32_t	FlashHandler_Class::WriteCRCConfigurationData(uint32_t crc){
    29ac:	b590      	push	{r4, r7, lr}
    29ae:	b085      	sub	sp, #20
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    29b4:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    29b6:	4b09      	ldr	r3, [pc, #36]	; (29dc <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x30>)
    29b8:	681b      	ldr	r3, [r3, #0]
    29ba:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    29be:	3330      	adds	r3, #48	; 0x30
    29c0:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    29c2:	4639      	mov	r1, r7
    29c4:	2304      	movs	r3, #4
    29c6:	68fa      	ldr	r2, [r7, #12]
    29c8:	4805      	ldr	r0, [pc, #20]	; (29e0 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x34>)
    29ca:	4c06      	ldr	r4, [pc, #24]	; (29e4 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x38>)
    29cc:	47a0      	blx	r4
    29ce:	60b8      	str	r0, [r7, #8]
	return	w;
    29d0:	68bb      	ldr	r3, [r7, #8]
}
    29d2:	4618      	mov	r0, r3
    29d4:	3714      	adds	r7, #20
    29d6:	46bd      	mov	sp, r7
    29d8:	bd90      	pop	{r4, r7, pc}
    29da:	bf00      	nop
    29dc:	20007f98 	.word	0x20007f98
    29e0:	20009c84 	.word	0x20009c84
    29e4:	00016849 	.word	0x00016849

000029e8 <_ZN18FlashHandler_Class16WriteCRCAppStateEm>:
uint32_t	FlashHandler_Class::WriteCRCAppState(uint32_t crc){
    29e8:	b590      	push	{r4, r7, lr}
    29ea:	b085      	sub	sp, #20
    29ec:	af00      	add	r7, sp, #0
    29ee:	6078      	str	r0, [r7, #4]
    29f0:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    29f2:	4b09      	ldr	r3, [pc, #36]	; (2a18 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x30>)
    29f4:	681b      	ldr	r3, [r3, #0]
    29f6:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    29fa:	3304      	adds	r3, #4
    29fc:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    29fe:	4639      	mov	r1, r7
    2a00:	2304      	movs	r3, #4
    2a02:	68fa      	ldr	r2, [r7, #12]
    2a04:	4805      	ldr	r0, [pc, #20]	; (2a1c <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x34>)
    2a06:	4c06      	ldr	r4, [pc, #24]	; (2a20 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x38>)
    2a08:	47a0      	blx	r4
    2a0a:	60b8      	str	r0, [r7, #8]
	return	w;
    2a0c:	68bb      	ldr	r3, [r7, #8]
}
    2a0e:	4618      	mov	r0, r3
    2a10:	3714      	adds	r7, #20
    2a12:	46bd      	mov	sp, r7
    2a14:	bd90      	pop	{r4, r7, pc}
    2a16:	bf00      	nop
    2a18:	20007f98 	.word	0x20007f98
    2a1c:	20009c84 	.word	0x20009c84
    2a20:	00016849 	.word	0x00016849

00002a24 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState>:
uint32_t	FlashHandler_Class::WriteLastConfigurationData(ConfigurationData& cd){
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::ReadApplicationState(HVACState& as){
    2a24:	b590      	push	{r4, r7, lr}
    2a26:	b085      	sub	sp, #20
    2a28:	af00      	add	r7, sp, #0
    2a2a:	6078      	str	r0, [r7, #4]
    2a2c:	6039      	str	r1, [r7, #0]
	flashAddress=(uint32_t)&flashMap->hvacStateSector.hvacState;
    2a2e:	4b0e      	ldr	r3, [pc, #56]	; (2a68 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x44>)
    2a30:	681b      	ldr	r3, [r3, #0]
    2a32:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    2a36:	331c      	adds	r3, #28
    2a38:	461a      	mov	r2, r3
    2a3a:	687b      	ldr	r3, [r7, #4]
    2a3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	handlerAppState=PTR_HVAC_STATE(&as);
    2a40:	683a      	ldr	r2, [r7, #0]
    2a42:	687b      	ldr	r3, [r7, #4]
    2a44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,flashAddress,sizeof(HVACState));
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    2a4e:	687b      	ldr	r3, [r7, #4]
    2a50:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2a54:	2368      	movs	r3, #104	; 0x68
    2a56:	4805      	ldr	r0, [pc, #20]	; (2a6c <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x48>)
    2a58:	4c05      	ldr	r4, [pc, #20]	; (2a70 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x4c>)
    2a5a:	47a0      	blx	r4
    2a5c:	60f8      	str	r0, [r7, #12]
	return	r;
    2a5e:	68fb      	ldr	r3, [r7, #12]
}
    2a60:	4618      	mov	r0, r3
    2a62:	3714      	adds	r7, #20
    2a64:	46bd      	mov	sp, r7
    2a66:	bd90      	pop	{r4, r7, pc}
    2a68:	20007f98 	.word	0x20007f98
    2a6c:	20009c84 	.word	0x20009c84
    2a70:	0001687d 	.word	0x0001687d

00002a74 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv>:
uint32_t	FlashHandler_Class::ReadCRCApplicationState(void){
    2a74:	b590      	push	{r4, r7, lr}
    2a76:	b085      	sub	sp, #20
    2a78:	af00      	add	r7, sp, #0
    2a7a:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	flashAddress=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    2a7c:	4b0b      	ldr	r3, [pc, #44]	; (2aac <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x38>)
    2a7e:	681b      	ldr	r3, [r3, #0]
    2a80:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    2a84:	3304      	adds	r3, #4
    2a86:	461a      	mov	r2, r3
    2a88:	687b      	ldr	r3, [r7, #4]
    2a8a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),flashAddress,sizeof(uint32_t));
    2a8e:	687b      	ldr	r3, [r7, #4]
    2a90:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2a94:	f107 0108 	add.w	r1, r7, #8
    2a98:	2304      	movs	r3, #4
    2a9a:	4805      	ldr	r0, [pc, #20]	; (2ab0 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x3c>)
    2a9c:	4c05      	ldr	r4, [pc, #20]	; (2ab4 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x40>)
    2a9e:	47a0      	blx	r4
    2aa0:	60f8      	str	r0, [r7, #12]
	return	crc;
    2aa2:	68bb      	ldr	r3, [r7, #8]
    2aa4:	4618      	mov	r0, r3
    2aa6:	3714      	adds	r7, #20
    2aa8:	46bd      	mov	sp, r7
    2aaa:	bd90      	pop	{r4, r7, pc}
    2aac:	20007f98 	.word	0x20007f98
    2ab0:	20009c84 	.word	0x20009c84
    2ab4:	0001687d 	.word	0x0001687d

00002ab8 <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    2ab8:	b480      	push	{r7}
    2aba:	b083      	sub	sp, #12
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
{
	isOK=true;
    2ac0:	687b      	ldr	r3, [r7, #4]
    2ac2:	2201      	movs	r2, #1
    2ac4:	701a      	strb	r2, [r3, #0]
} //PBIT_Class
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	4618      	mov	r0, r3
    2aca:	370c      	adds	r7, #12
    2acc:	46bd      	mov	sp, r7
    2ace:	bc80      	pop	{r7}
    2ad0:	4770      	bx	lr

00002ad2 <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    2ad2:	b480      	push	{r7}
    2ad4:	b083      	sub	sp, #12
    2ad6:	af00      	add	r7, sp, #0
    2ad8:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	4618      	mov	r0, r3
    2ade:	370c      	adds	r7, #12
    2ae0:	46bd      	mov	sp, r7
    2ae2:	bc80      	pop	{r7}
    2ae4:	4770      	bx	lr

00002ae6 <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    2ae6:	b480      	push	{r7}
    2ae8:	b083      	sub	sp, #12
    2aea:	af00      	add	r7, sp, #0
    2aec:	6078      	str	r0, [r7, #4]
	return	isOK;
    2aee:	687b      	ldr	r3, [r7, #4]
    2af0:	781b      	ldrb	r3, [r3, #0]
    2af2:	b2db      	uxtb	r3, r3
}
    2af4:	4618      	mov	r0, r3
    2af6:	370c      	adds	r7, #12
    2af8:	46bd      	mov	sp, r7
    2afa:	bc80      	pop	{r7}
    2afc:	4770      	bx	lr
	...

00002b00 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
    2b00:	b580      	push	{r7, lr}
    2b02:	b086      	sub	sp, #24
    2b04:	af00      	add	r7, sp, #0
    2b06:	6078      	str	r0, [r7, #4]
    2b08:	6039      	str	r1, [r7, #0]
	interfaces.GetStatus(cs);
    2b0a:	6839      	ldr	r1, [r7, #0]
    2b0c:	4812      	ldr	r0, [pc, #72]	; (2b58 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x58>)
    2b0e:	4b13      	ldr	r3, [pc, #76]	; (2b5c <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x5c>)
    2b10:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
    2b12:	683b      	ldr	r3, [r7, #0]
    2b14:	613b      	str	r3, [r7, #16]
	uint32_t	v=*s;
    2b16:	693b      	ldr	r3, [r7, #16]
    2b18:	681b      	ldr	r3, [r3, #0]
    2b1a:	60fb      	str	r3, [r7, #12]

	for (int i=0;i<32;i++)
    2b1c:	2300      	movs	r3, #0
    2b1e:	617b      	str	r3, [r7, #20]
    2b20:	697b      	ldr	r3, [r7, #20]
    2b22:	2b1f      	cmp	r3, #31
    2b24:	dc0d      	bgt.n	2b42 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x42>
	{
		v+=(0x01<<i)&(v);
    2b26:	2201      	movs	r2, #1
    2b28:	697b      	ldr	r3, [r7, #20]
    2b2a:	fa02 f303 	lsl.w	r3, r2, r3
    2b2e:	461a      	mov	r2, r3
    2b30:	68fb      	ldr	r3, [r7, #12]
    2b32:	401a      	ands	r2, r3
    2b34:	68fb      	ldr	r3, [r7, #12]
    2b36:	4413      	add	r3, r2
    2b38:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<32;i++)
    2b3a:	697b      	ldr	r3, [r7, #20]
    2b3c:	3301      	adds	r3, #1
    2b3e:	617b      	str	r3, [r7, #20]
    2b40:	e7ee      	b.n	2b20 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x20>
		
	}
	if (v==0)
    2b42:	68fb      	ldr	r3, [r7, #12]
    2b44:	2b00      	cmp	r3, #0
    2b46:	d102      	bne.n	2b4e <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x4e>
	{
		isOK=true;
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	2201      	movs	r2, #1
    2b4c:	701a      	strb	r2, [r3, #0]
	}
	return	v;
    2b4e:	68fb      	ldr	r3, [r7, #12]
}
    2b50:	4618      	mov	r0, r3
    2b52:	3718      	adds	r7, #24
    2b54:	46bd      	mov	sp, r7
    2b56:	bd80      	pop	{r7, pc}
    2b58:	200014cc 	.word	0x200014cc
    2b5c:	00001ea5 	.word	0x00001ea5

00002b60 <_Z41__static_initialization_and_destruction_0ii>:
    2b60:	b580      	push	{r7, lr}
    2b62:	b082      	sub	sp, #8
    2b64:	af00      	add	r7, sp, #0
    2b66:	6078      	str	r0, [r7, #4]
    2b68:	6039      	str	r1, [r7, #0]
    2b6a:	687b      	ldr	r3, [r7, #4]
    2b6c:	2b01      	cmp	r3, #1
    2b6e:	d10c      	bne.n	2b8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2b70:	683b      	ldr	r3, [r7, #0]
    2b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2b76:	4293      	cmp	r3, r2
    2b78:	d107      	bne.n	2b8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2b7a:	4806      	ldr	r0, [pc, #24]	; (2b94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2b7c:	4b06      	ldr	r3, [pc, #24]	; (2b98 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2b7e:	4798      	blx	r3
    2b80:	4a06      	ldr	r2, [pc, #24]	; (2b9c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2b82:	4907      	ldr	r1, [pc, #28]	; (2ba0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2b84:	4803      	ldr	r0, [pc, #12]	; (2b94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2b86:	4b07      	ldr	r3, [pc, #28]	; (2ba4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2b88:	4798      	blx	r3
    2b8a:	bf00      	nop
    2b8c:	3708      	adds	r7, #8
    2b8e:	46bd      	mov	sp, r7
    2b90:	bd80      	pop	{r7, pc}
    2b92:	bf00      	nop
    2b94:	20007f9c 	.word	0x20007f9c
    2b98:	00002ab9 	.word	0x00002ab9
    2b9c:	20000000 	.word	0x20000000
    2ba0:	00002ad3 	.word	0x00002ad3
    2ba4:	00019ab1 	.word	0x00019ab1

00002ba8 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    2ba8:	b580      	push	{r7, lr}
    2baa:	af00      	add	r7, sp, #0
    2bac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2bb0:	2001      	movs	r0, #1
    2bb2:	4b01      	ldr	r3, [pc, #4]	; (2bb8 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    2bb4:	4798      	blx	r3
    2bb6:	bd80      	pop	{r7, pc}
    2bb8:	00002b61 	.word	0x00002b61

00002bbc <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
    2bbc:	b580      	push	{r7, lr}
    2bbe:	b082      	sub	sp, #8
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	4618      	mov	r0, r3
    2bc8:	4b05      	ldr	r3, [pc, #20]	; (2be0 <_ZN19PersistenceServicesC1Ev+0x24>)
    2bca:	4798      	blx	r3
    2bcc:	687b      	ldr	r3, [r7, #4]
    2bce:	2200      	movs	r2, #0
    2bd0:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
	{
	}
    2bd4:	687b      	ldr	r3, [r7, #4]
    2bd6:	4618      	mov	r0, r3
    2bd8:	3708      	adds	r7, #8
    2bda:	46bd      	mov	sp, r7
    2bdc:	bd80      	pop	{r7, pc}
    2bde:	bf00      	nop
    2be0:	00001495 	.word	0x00001495

00002be4 <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:
	
	return result;
	}

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
    2be4:	b480      	push	{r7}
    2be6:	b085      	sub	sp, #20
    2be8:	af00      	add	r7, sp, #0
    2bea:	6078      	str	r0, [r7, #4]
    2bec:	6039      	str	r1, [r7, #0]
	bool	result(true);
    2bee:	2301      	movs	r3, #1
    2bf0:	73fb      	strb	r3, [r7, #15]

	data.commons.version = kConfigurationDataVersion;
    2bf2:	683b      	ldr	r3, [r7, #0]
    2bf4:	2204      	movs	r2, #4
    2bf6:	605a      	str	r2, [r3, #4]
	data.commons.size = kConfigurationDataSize;
    2bf8:	683b      	ldr	r3, [r7, #0]
    2bfa:	22ac      	movs	r2, #172	; 0xac
    2bfc:	601a      	str	r2, [r3, #0]
	data.commons.partNumber = PARTNUMBER;
    2bfe:	683b      	ldr	r3, [r7, #0]
    2c00:	f240 720c 	movw	r2, #1804	; 0x70c
    2c04:	609a      	str	r2, [r3, #8]



	

	return result;
    2c06:	7bfb      	ldrb	r3, [r7, #15]
	}
    2c08:	4618      	mov	r0, r3
    2c0a:	3714      	adds	r7, #20
    2c0c:	46bd      	mov	sp, r7
    2c0e:	bc80      	pop	{r7}
    2c10:	4770      	bx	lr
	...

00002c14 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
	value += increment;

	}
	
bool PersistenceServices::IsConfigurationDataUpdated()
{
    2c14:	b580      	push	{r7, lr}
    2c16:	b086      	sub	sp, #24
    2c18:	af00      	add	r7, sp, #0
    2c1a:	6078      	str	r0, [r7, #4]
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
    2c1c:	4b17      	ldr	r3, [pc, #92]	; (2c7c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x68>)
    2c1e:	685b      	ldr	r3, [r3, #4]
    2c20:	617b      	str	r3, [r7, #20]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
    2c22:	687b      	ldr	r3, [r7, #4]
    2c24:	33d4      	adds	r3, #212	; 0xd4
    2c26:	4619      	mov	r1, r3
    2c28:	4815      	ldr	r0, [pc, #84]	; (2c80 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2c2a:	4b16      	ldr	r3, [pc, #88]	; (2c84 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x70>)
    2c2c:	4798      	blx	r3
    2c2e:	6138      	str	r0, [r7, #16]

	if ((verUp>0))
    2c30:	693b      	ldr	r3, [r7, #16]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d001      	beq.n	2c3a <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x26>
	{
		return false;
    2c36:	2300      	movs	r3, #0
    2c38:	e01c      	b.n	2c74 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
	} 
	else
	{
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
    2c3a:	4811      	ldr	r0, [pc, #68]	; (2c80 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2c3c:	4b12      	ldr	r3, [pc, #72]	; (2c88 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x74>)
    2c3e:	4798      	blx	r3
    2c40:	60f8      	str	r0, [r7, #12]
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
    2c42:	6878      	ldr	r0, [r7, #4]
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	33d4      	adds	r3, #212	; 0xd4
    2c48:	22ac      	movs	r2, #172	; 0xac
    2c4a:	4619      	mov	r1, r3
    2c4c:	4b0f      	ldr	r3, [pc, #60]	; (2c8c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x78>)
    2c4e:	4798      	blx	r3
    2c50:	60b8      	str	r0, [r7, #8]
		if (refCRC==crc)
    2c52:	68fa      	ldr	r2, [r7, #12]
    2c54:	68bb      	ldr	r3, [r7, #8]
    2c56:	429a      	cmp	r2, r3
    2c58:	d10b      	bne.n	2c72 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x5e>
		{
			verUp=configuration.commons.version;
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    2c60:	613b      	str	r3, [r7, #16]
			return (verUp>ver);
    2c62:	693a      	ldr	r2, [r7, #16]
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	429a      	cmp	r2, r3
    2c68:	bf8c      	ite	hi
    2c6a:	2301      	movhi	r3, #1
    2c6c:	2300      	movls	r3, #0
    2c6e:	b2db      	uxtb	r3, r3
    2c70:	e000      	b.n	2c74 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
		} 
		else
		{
			return	false;
    2c72:	2300      	movs	r3, #0
		}
		
	}
	return	false;

}
    2c74:	4618      	mov	r0, r3
    2c76:	3718      	adds	r7, #24
    2c78:	46bd      	mov	sp, r7
    2c7a:	bd80      	pop	{r7, pc}
    2c7c:	00021190 	.word	0x00021190
    2c80:	20002be4 	.word	0x20002be4
    2c84:	00002751 	.word	0x00002751
    2c88:	000027bd 	.word	0x000027bd
    2c8c:	00001519 	.word	0x00001519

00002c90 <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
	

	return result;
	}
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
    2c90:	b580      	push	{r7, lr}
    2c92:	b084      	sub	sp, #16
    2c94:	af00      	add	r7, sp, #0
    2c96:	6078      	str	r0, [r7, #4]
    2c98:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadCRCApplicationState();
    2c9a:	480b      	ldr	r0, [pc, #44]	; (2cc8 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x38>)
    2c9c:	4b0b      	ldr	r3, [pc, #44]	; (2ccc <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x3c>)
    2c9e:	4798      	blx	r3
    2ca0:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	2268      	movs	r2, #104	; 0x68
    2ca6:	6839      	ldr	r1, [r7, #0]
    2ca8:	4618      	mov	r0, r3
    2caa:	4b09      	ldr	r3, [pc, #36]	; (2cd0 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x40>)
    2cac:	4798      	blx	r3
    2cae:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    2cb0:	68fa      	ldr	r2, [r7, #12]
    2cb2:	68bb      	ldr	r3, [r7, #8]
    2cb4:	429a      	cmp	r2, r3
    2cb6:	bf0c      	ite	eq
    2cb8:	2301      	moveq	r3, #1
    2cba:	2300      	movne	r3, #0
    2cbc:	b2db      	uxtb	r3, r3
}
    2cbe:	4618      	mov	r0, r3
    2cc0:	3710      	adds	r7, #16
    2cc2:	46bd      	mov	sp, r7
    2cc4:	bd80      	pop	{r7, pc}
    2cc6:	bf00      	nop
    2cc8:	20002be4 	.word	0x20002be4
    2ccc:	00002a75 	.word	0x00002a75
    2cd0:	00001519 	.word	0x00001519

00002cd4 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState>:
bool PersistenceServices::IsFastStateDataValid(HVACState& as)
{
    2cd4:	b580      	push	{r7, lr}
    2cd6:	b084      	sub	sp, #16
    2cd8:	af00      	add	r7, sp, #0
    2cda:	6078      	str	r0, [r7, #4]
    2cdc:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadFastCRCApplicationState();
    2cde:	480b      	ldr	r0, [pc, #44]	; (2d0c <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x38>)
    2ce0:	4b0b      	ldr	r3, [pc, #44]	; (2d10 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x3c>)
    2ce2:	4798      	blx	r3
    2ce4:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(HVACState));
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	2268      	movs	r2, #104	; 0x68
    2cea:	6839      	ldr	r1, [r7, #0]
    2cec:	4618      	mov	r0, r3
    2cee:	4b09      	ldr	r3, [pc, #36]	; (2d14 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x40>)
    2cf0:	4798      	blx	r3
    2cf2:	60b8      	str	r0, [r7, #8]
	
	return (refCRC==crc);
    2cf4:	68fa      	ldr	r2, [r7, #12]
    2cf6:	68bb      	ldr	r3, [r7, #8]
    2cf8:	429a      	cmp	r2, r3
    2cfa:	bf0c      	ite	eq
    2cfc:	2301      	moveq	r3, #1
    2cfe:	2300      	movne	r3, #0
    2d00:	b2db      	uxtb	r3, r3
}
    2d02:	4618      	mov	r0, r3
    2d04:	3710      	adds	r7, #16
    2d06:	46bd      	mov	sp, r7
    2d08:	bd80      	pop	{r7, pc}
    2d0a:	bf00      	nop
    2d0c:	20002bd4 	.word	0x20002bd4
    2d10:	00001801 	.word	0x00001801
    2d14:	00001519 	.word	0x00001519

00002d18 <_ZN9eventDataC1Ei>:
inline eventData::eventData(int v)
    2d18:	b480      	push	{r7}
    2d1a:	b083      	sub	sp, #12
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	6078      	str	r0, [r7, #4]
    2d20:	6039      	str	r1, [r7, #0]
	integerData = v;
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	683a      	ldr	r2, [r7, #0]
    2d26:	601a      	str	r2, [r3, #0]
	}
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	4618      	mov	r0, r3
    2d2c:	370c      	adds	r7, #12
    2d2e:	46bd      	mov	sp, r7
    2d30:	bc80      	pop	{r7}
    2d32:	4770      	bx	lr

00002d34 <_ZL24HVACOperationTimeElapsedPK10timer_task>:
#include "CBIT_Class.h"
#include "FlapperValve_Class.h"
#include "TemperatureSensors_Class.h"

States_Class*	ptrStatesClass;
static void  HVACOperationTimeElapsed(const struct timer_task *const timer_task){
    2d34:	b480      	push	{r7}
    2d36:	b083      	sub	sp, #12
    2d38:	af00      	add	r7, sp, #0
    2d3a:	6078      	str	r0, [r7, #4]
	ptrStatesClass->timeElapsed=true;
    2d3c:	4b04      	ldr	r3, [pc, #16]	; (2d50 <_ZL24HVACOperationTimeElapsedPK10timer_task+0x1c>)
    2d3e:	681b      	ldr	r3, [r3, #0]
    2d40:	2201      	movs	r2, #1
    2d42:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
}
    2d46:	bf00      	nop
    2d48:	370c      	adds	r7, #12
    2d4a:	46bd      	mov	sp, r7
    2d4c:	bc80      	pop	{r7}
    2d4e:	4770      	bx	lr
    2d50:	20007fc8 	.word	0x20007fc8

00002d54 <_ZL14HVACTimerTicksPK10timer_task>:
static void HVACTimerTicks(const struct timer_task *const timer_task)
{
    2d54:	b480      	push	{r7}
    2d56:	b083      	sub	sp, #12
    2d58:	af00      	add	r7, sp, #0
    2d5a:	6078      	str	r0, [r7, #4]
	hvacTimer.ticks++;
    2d5c:	4b04      	ldr	r3, [pc, #16]	; (2d70 <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2d5e:	689b      	ldr	r3, [r3, #8]
    2d60:	3301      	adds	r3, #1
    2d62:	4a03      	ldr	r2, [pc, #12]	; (2d70 <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2d64:	6093      	str	r3, [r2, #8]
}
    2d66:	bf00      	nop
    2d68:	370c      	adds	r7, #12
    2d6a:	46bd      	mov	sp, r7
    2d6c:	bc80      	pop	{r7}
    2d6e:	4770      	bx	lr
    2d70:	2000a0e8 	.word	0x2000a0e8

00002d74 <_ZN12States_ClassC1Ev>:

static HVACState staticCurrentState;
	// default constructor
States_Class::States_Class(void)
    2d74:	b580      	push	{r7, lr}
    2d76:	b082      	sub	sp, #8
    2d78:	af00      	add	r7, sp, #0
    2d7a:	6078      	str	r0, [r7, #4]
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	f503 7306 	add.w	r3, r3, #536	; 0x218
    2d82:	4618      	mov	r0, r3
    2d84:	4b1c      	ldr	r3, [pc, #112]	; (2df8 <_ZN12States_ClassC1Ev+0x84>)
    2d86:	4798      	blx	r3
    2d88:	687b      	ldr	r3, [r7, #4]
    2d8a:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    2d8e:	4a1b      	ldr	r2, [pc, #108]	; (2dfc <_ZN12States_ClassC1Ev+0x88>)
    2d90:	4611      	mov	r1, r2
    2d92:	4618      	mov	r0, r3
    2d94:	4b1a      	ldr	r3, [pc, #104]	; (2e00 <_ZN12States_ClassC1Ev+0x8c>)
    2d96:	4798      	blx	r3
    2d98:	687b      	ldr	r3, [r7, #4]
    2d9a:	3304      	adds	r3, #4
    2d9c:	4618      	mov	r0, r3
    2d9e:	4b19      	ldr	r3, [pc, #100]	; (2e04 <_ZN12States_ClassC1Ev+0x90>)
    2da0:	4798      	blx	r3
    2da2:	4a19      	ldr	r2, [pc, #100]	; (2e08 <_ZN12States_ClassC1Ev+0x94>)
    2da4:	687b      	ldr	r3, [r7, #4]
    2da6:	601a      	str	r2, [r3, #0]
    2da8:	687b      	ldr	r3, [r7, #4]
    2daa:	f503 7306 	add.w	r3, r3, #536	; 0x218
    2dae:	4a17      	ldr	r2, [pc, #92]	; (2e0c <_ZN12States_ClassC1Ev+0x98>)
    2db0:	601a      	str	r2, [r3, #0]
    2db2:	687b      	ldr	r3, [r7, #4]
    2db4:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    2db8:	4a15      	ldr	r2, [pc, #84]	; (2e10 <_ZN12States_ClassC1Ev+0x9c>)
    2dba:	601a      	str	r2, [r3, #0]
{
	ptrStatesClass=this;
    2dbc:	4a15      	ldr	r2, [pc, #84]	; (2e14 <_ZN12States_ClassC1Ev+0xa0>)
    2dbe:	687b      	ldr	r3, [r7, #4]
    2dc0:	6013      	str	r3, [r2, #0]
	listener.eventHandler = NULL;
    2dc2:	4b15      	ldr	r3, [pc, #84]	; (2e18 <_ZN12States_ClassC1Ev+0xa4>)
    2dc4:	2200      	movs	r2, #0
    2dc6:	615a      	str	r2, [r3, #20]
	staticCurrentState=defaultState;
    2dc8:	687b      	ldr	r3, [r7, #4]
    2dca:	f503 7306 	add.w	r3, r3, #536	; 0x218
    2dce:	4a13      	ldr	r2, [pc, #76]	; (2e1c <_ZN12States_ClassC1Ev+0xa8>)
    2dd0:	4610      	mov	r0, r2
    2dd2:	3304      	adds	r3, #4
    2dd4:	2268      	movs	r2, #104	; 0x68
    2dd6:	4619      	mov	r1, r3
    2dd8:	4b11      	ldr	r3, [pc, #68]	; (2e20 <_ZN12States_ClassC1Ev+0xac>)
    2dda:	4798      	blx	r3
	isOK=false;
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	2200      	movs	r2, #0
    2de0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	hvacState=&staticCurrentState;
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	4a0d      	ldr	r2, [pc, #52]	; (2e1c <_ZN12States_ClassC1Ev+0xa8>)
    2de8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
    2dec:	687b      	ldr	r3, [r7, #4]
    2dee:	4618      	mov	r0, r3
    2df0:	3708      	adds	r7, #8
    2df2:	46bd      	mov	sp, r7
    2df4:	bd80      	pop	{r7, pc}
    2df6:	bf00      	nop
    2df8:	00001049 	.word	0x00001049
    2dfc:	0002188c 	.word	0x0002188c
    2e00:	000019b1 	.word	0x000019b1
    2e04:	00001b31 	.word	0x00001b31
    2e08:	00021860 	.word	0x00021860
    2e0c:	00021870 	.word	0x00021870
    2e10:	00021880 	.word	0x00021880
    2e14:	20007fc8 	.word	0x20007fc8
    2e18:	20009850 	.word	0x20009850
    2e1c:	20007fcc 	.word	0x20007fcc
    2e20:	0001d37d 	.word	0x0001d37d

00002e24 <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    2e24:	b580      	push	{r7, lr}
    2e26:	b082      	sub	sp, #8
    2e28:	af00      	add	r7, sp, #0
    2e2a:	6078      	str	r0, [r7, #4]
    2e2c:	4a12      	ldr	r2, [pc, #72]	; (2e78 <_ZN12States_ClassD1Ev+0x54>)
    2e2e:	687b      	ldr	r3, [r7, #4]
    2e30:	601a      	str	r2, [r3, #0]
    2e32:	687b      	ldr	r3, [r7, #4]
    2e34:	f503 7306 	add.w	r3, r3, #536	; 0x218
    2e38:	4a10      	ldr	r2, [pc, #64]	; (2e7c <_ZN12States_ClassD1Ev+0x58>)
    2e3a:	601a      	str	r2, [r3, #0]
    2e3c:	687b      	ldr	r3, [r7, #4]
    2e3e:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    2e42:	4a0f      	ldr	r2, [pc, #60]	; (2e80 <_ZN12States_ClassD1Ev+0x5c>)
    2e44:	601a      	str	r2, [r3, #0]
    2e46:	687b      	ldr	r3, [r7, #4]
    2e48:	3304      	adds	r3, #4
    2e4a:	4618      	mov	r0, r3
    2e4c:	4b0d      	ldr	r3, [pc, #52]	; (2e84 <_ZN12States_ClassD1Ev+0x60>)
    2e4e:	4798      	blx	r3
    2e50:	687b      	ldr	r3, [r7, #4]
    2e52:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    2e56:	4a0c      	ldr	r2, [pc, #48]	; (2e88 <_ZN12States_ClassD1Ev+0x64>)
    2e58:	4611      	mov	r1, r2
    2e5a:	4618      	mov	r0, r3
    2e5c:	4b0b      	ldr	r3, [pc, #44]	; (2e8c <_ZN12States_ClassD1Ev+0x68>)
    2e5e:	4798      	blx	r3
    2e60:	687b      	ldr	r3, [r7, #4]
    2e62:	f503 7306 	add.w	r3, r3, #536	; 0x218
    2e66:	4618      	mov	r0, r3
    2e68:	4b09      	ldr	r3, [pc, #36]	; (2e90 <_ZN12States_ClassD1Ev+0x6c>)
    2e6a:	4798      	blx	r3
{
} //~States_Class
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	4618      	mov	r0, r3
    2e70:	3708      	adds	r7, #8
    2e72:	46bd      	mov	sp, r7
    2e74:	bd80      	pop	{r7, pc}
    2e76:	bf00      	nop
    2e78:	00021860 	.word	0x00021860
    2e7c:	00021870 	.word	0x00021870
    2e80:	00021880 	.word	0x00021880
    2e84:	00001b45 	.word	0x00001b45
    2e88:	0002188c 	.word	0x0002188c
    2e8c:	000019e3 	.word	0x000019e3
    2e90:	000010ad 	.word	0x000010ad

00002e94 <_ZN12States_Class4InitEv>:

bool States_Class::Init(void){
    2e94:	b580      	push	{r7, lr}
    2e96:	b082      	sub	sp, #8
    2e98:	af00      	add	r7, sp, #0
    2e9a:	6078      	str	r0, [r7, #4]
	if (hvacTimer.Init())
    2e9c:	4816      	ldr	r0, [pc, #88]	; (2ef8 <_ZN12States_Class4InitEv+0x64>)
    2e9e:	4b17      	ldr	r3, [pc, #92]	; (2efc <_ZN12States_Class4InitEv+0x68>)
    2ea0:	4798      	blx	r3
    2ea2:	4603      	mov	r3, r0
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d004      	beq.n	2eb2 <_ZN12States_Class4InitEv+0x1e>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACTimerTicks),1);
    2ea8:	2201      	movs	r2, #1
    2eaa:	4915      	ldr	r1, [pc, #84]	; (2f00 <_ZN12States_Class4InitEv+0x6c>)
    2eac:	4812      	ldr	r0, [pc, #72]	; (2ef8 <_ZN12States_Class4InitEv+0x64>)
    2eae:	4b15      	ldr	r3, [pc, #84]	; (2f04 <_ZN12States_Class4InitEv+0x70>)
    2eb0:	4798      	blx	r3
	}
	isOK=temperatures.Init();
    2eb2:	4815      	ldr	r0, [pc, #84]	; (2f08 <_ZN12States_Class4InitEv+0x74>)
    2eb4:	4b15      	ldr	r3, [pc, #84]	; (2f0c <_ZN12States_Class4InitEv+0x78>)
    2eb6:	4798      	blx	r3
    2eb8:	4603      	mov	r3, r0
    2eba:	461a      	mov	r2, r3
    2ebc:	687b      	ldr	r3, [r7, #4]
    2ebe:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	if (isOK)
    2ec2:	687b      	ldr	r3, [r7, #4]
    2ec4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
    2ec8:	b2db      	uxtb	r3, r3
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d002      	beq.n	2ed4 <_ZN12States_Class4InitEv+0x40>
	{
		temperatures.StartOneConversion();
    2ece:	480e      	ldr	r0, [pc, #56]	; (2f08 <_ZN12States_Class4InitEv+0x74>)
    2ed0:	4b0f      	ldr	r3, [pc, #60]	; (2f10 <_ZN12States_Class4InitEv+0x7c>)
    2ed2:	4798      	blx	r3
	}
	if (fv1.Init())
    2ed4:	480f      	ldr	r0, [pc, #60]	; (2f14 <_ZN12States_Class4InitEv+0x80>)
    2ed6:	4b10      	ldr	r3, [pc, #64]	; (2f18 <_ZN12States_Class4InitEv+0x84>)
    2ed8:	4798      	blx	r3
    2eda:	4603      	mov	r3, r0
    2edc:	2b00      	cmp	r3, #0
    2ede:	d006      	beq.n	2eee <_ZN12States_Class4InitEv+0x5a>
	{
		hvacState->hvacStatus.statusBits.flapValve1=true;
    2ee0:	687b      	ldr	r3, [r7, #4]
    2ee2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    2ee6:	7d13      	ldrb	r3, [r2, #20]
    2ee8:	f043 0308 	orr.w	r3, r3, #8
    2eec:	7513      	strb	r3, [r2, #20]
	}
	
	

	//return isOK;
	return true;
    2eee:	2301      	movs	r3, #1
	
}
    2ef0:	4618      	mov	r0, r3
    2ef2:	3708      	adds	r7, #8
    2ef4:	46bd      	mov	sp, r7
    2ef6:	bd80      	pop	{r7, pc}
    2ef8:	2000a0e8 	.word	0x2000a0e8
    2efc:	000176a5 	.word	0x000176a5
    2f00:	00002d55 	.word	0x00002d55
    2f04:	00017769 	.word	0x00017769
    2f08:	20009a5c 	.word	0x20009a5c
    2f0c:	000158d5 	.word	0x000158d5
    2f10:	000159d5 	.word	0x000159d5
    2f14:	200098e8 	.word	0x200098e8
    2f18:	00014f49 	.word	0x00014f49

00002f1c <_ZN12States_Class16ControllerResumeEh>:
void States_Class::ControllerResume(uint8_t	operationMode){
    2f1c:	b590      	push	{r4, r7, lr}
    2f1e:	b08f      	sub	sp, #60	; 0x3c
    2f20:	af02      	add	r7, sp, #8
    2f22:	6078      	str	r0, [r7, #4]
    2f24:	460b      	mov	r3, r1
    2f26:	70fb      	strb	r3, [r7, #3]
	event e;
    2f28:	f107 031c 	add.w	r3, r7, #28
    2f2c:	4618      	mov	r0, r3
    2f2e:	4b4b      	ldr	r3, [pc, #300]	; (305c <_ZN12States_Class16ControllerResumeEh+0x140>)
    2f30:	4798      	blx	r3
	bool done(false);
    2f32:	2300      	movs	r3, #0
    2f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	
	
		if (operationMode==0)
    2f38:	78fb      	ldrb	r3, [r7, #3]
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d115      	bne.n	2f6a <_ZN12States_Class16ControllerResumeEh+0x4e>
		{
			if (timeElapsed)
    2f3e:	687b      	ldr	r3, [r7, #4]
    2f40:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    2f44:	b2db      	uxtb	r3, r3
    2f46:	2b00      	cmp	r3, #0
    2f48:	d00f      	beq.n	2f6a <_ZN12States_Class16ControllerResumeEh+0x4e>
			{
				usb<<"Air Conditioning System Operating"<<NEWLINE;
    2f4a:	4945      	ldr	r1, [pc, #276]	; (3060 <_ZN12States_Class16ControllerResumeEh+0x144>)
    2f4c:	4845      	ldr	r0, [pc, #276]	; (3064 <_ZN12States_Class16ControllerResumeEh+0x148>)
    2f4e:	4b46      	ldr	r3, [pc, #280]	; (3068 <_ZN12States_Class16ControllerResumeEh+0x14c>)
    2f50:	4798      	blx	r3
    2f52:	4603      	mov	r3, r0
    2f54:	4945      	ldr	r1, [pc, #276]	; (306c <_ZN12States_Class16ControllerResumeEh+0x150>)
    2f56:	4618      	mov	r0, r3
    2f58:	4b45      	ldr	r3, [pc, #276]	; (3070 <_ZN12States_Class16ControllerResumeEh+0x154>)
    2f5a:	4798      	blx	r3
				timeElapsed=false;
    2f5c:	687b      	ldr	r3, [r7, #4]
    2f5e:	2200      	movs	r2, #0
    2f60:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
				delay_ms(10);
    2f64:	200a      	movs	r0, #10
    2f66:	4b43      	ldr	r3, [pc, #268]	; (3074 <_ZN12States_Class16ControllerResumeEh+0x158>)
    2f68:	4798      	blx	r3
				//alu.PrepareNewTask(kALUCheckCommunication);
				
			}
		}
		if (hvacState->currentState==kHVACStateLeaving)
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    2f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f72:	f240 1243 	movw	r2, #323	; 0x143
    2f76:	4293      	cmp	r3, r2
    2f78:	d10a      	bne.n	2f90 <_ZN12States_Class16ControllerResumeEh+0x74>
		{
			prepareStateChangeEvent(hvacState->lastState);
    2f7a:	687b      	ldr	r3, [r7, #4]
    2f7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    2f80:	6a1b      	ldr	r3, [r3, #32]
    2f82:	b29b      	uxth	r3, r3
    2f84:	2200      	movs	r2, #0
    2f86:	4619      	mov	r1, r3
    2f88:	6878      	ldr	r0, [r7, #4]
    2f8a:	4b3b      	ldr	r3, [pc, #236]	; (3078 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    2f8c:	4798      	blx	r3
    2f8e:	e005      	b.n	2f9c <_ZN12States_Class16ControllerResumeEh+0x80>
			
		} 
		else
		{
			prepareStateChangeEvent(kHVACStateInitialize);
    2f90:	2200      	movs	r2, #0
    2f92:	f44f 7197 	mov.w	r1, #302	; 0x12e
    2f96:	6878      	ldr	r0, [r7, #4]
    2f98:	4b37      	ldr	r3, [pc, #220]	; (3078 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    2f9a:	4798      	blx	r3
		}
		
		if (operationMode>0)
    2f9c:	78fb      	ldrb	r3, [r7, #3]
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	dd51      	ble.n	3046 <_ZN12States_Class16ControllerResumeEh+0x12a>
		{
			
			event	e;
    2fa2:	f107 030c 	add.w	r3, r7, #12
    2fa6:	4618      	mov	r0, r3
    2fa8:	4b2c      	ldr	r3, [pc, #176]	; (305c <_ZN12States_Class16ControllerResumeEh+0x140>)
    2faa:	4798      	blx	r3
			listener.eventHandler=&States_Class::CheckEvents;
    2fac:	4b33      	ldr	r3, [pc, #204]	; (307c <_ZN12States_Class16ControllerResumeEh+0x160>)
    2fae:	4a34      	ldr	r2, [pc, #208]	; (3080 <_ZN12States_Class16ControllerResumeEh+0x164>)
    2fb0:	615a      	str	r2, [r3, #20]
			while ((cBit.IsOK())&&(!done))
    2fb2:	4834      	ldr	r0, [pc, #208]	; (3084 <_ZN12States_Class16ControllerResumeEh+0x168>)
    2fb4:	4b34      	ldr	r3, [pc, #208]	; (3088 <_ZN12States_Class16ControllerResumeEh+0x16c>)
    2fb6:	4798      	blx	r3
    2fb8:	4603      	mov	r3, r0
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d008      	beq.n	2fd0 <_ZN12States_Class16ControllerResumeEh+0xb4>
    2fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    2fc2:	f083 0301 	eor.w	r3, r3, #1
    2fc6:	b2db      	uxtb	r3, r3
    2fc8:	2b00      	cmp	r3, #0
    2fca:	d001      	beq.n	2fd0 <_ZN12States_Class16ControllerResumeEh+0xb4>
    2fcc:	2301      	movs	r3, #1
    2fce:	e000      	b.n	2fd2 <_ZN12States_Class16ControllerResumeEh+0xb6>
    2fd0:	2300      	movs	r3, #0
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	d03e      	beq.n	3054 <_ZN12States_Class16ControllerResumeEh+0x138>
			{
				if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent,8))
    2fd6:	f107 010c 	add.w	r1, r7, #12
    2fda:	2308      	movs	r3, #8
    2fdc:	9300      	str	r3, [sp, #0]
    2fde:	f44f 7300 	mov.w	r3, #512	; 0x200
    2fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
    2fe6:	4825      	ldr	r0, [pc, #148]	; (307c <_ZN12States_Class16ControllerResumeEh+0x160>)
    2fe8:	4c28      	ldr	r4, [pc, #160]	; (308c <_ZN12States_Class16ControllerResumeEh+0x170>)
    2fea:	47a0      	blx	r4
    2fec:	4603      	mov	r3, r0
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d011      	beq.n	3016 <_ZN12States_Class16ControllerResumeEh+0xfa>
				{
					handleHVACEvent(e);
    2ff2:	f107 030c 	add.w	r3, r7, #12
    2ff6:	4619      	mov	r1, r3
    2ff8:	6878      	ldr	r0, [r7, #4]
    2ffa:	4b25      	ldr	r3, [pc, #148]	; (3090 <_ZN12States_Class16ControllerResumeEh+0x174>)
    2ffc:	4798      	blx	r3
					if (hvacState->currentState==kHVACStateLeaving)
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3006:	f240 1243 	movw	r2, #323	; 0x143
    300a:	4293      	cmp	r3, r2
    300c:	d1d1      	bne.n	2fb2 <_ZN12States_Class16ControllerResumeEh+0x96>
					{
							done=true;
    300e:	2301      	movs	r3, #1
    3010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
    3014:	e01e      	b.n	3054 <_ZN12States_Class16ControllerResumeEh+0x138>
					} 
						
				}
				else if (listener.WaitForEvent(e, kALUEventClass, kAnyEventType,4)){
    3016:	f107 010c 	add.w	r1, r7, #12
    301a:	2304      	movs	r3, #4
    301c:	9300      	str	r3, [sp, #0]
    301e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3022:	f44f 7240 	mov.w	r2, #768	; 0x300
    3026:	4815      	ldr	r0, [pc, #84]	; (307c <_ZN12States_Class16ControllerResumeEh+0x160>)
    3028:	4c1a      	ldr	r4, [pc, #104]	; (3094 <_ZN12States_Class16ControllerResumeEh+0x178>)
    302a:	47a0      	blx	r4
    302c:	4603      	mov	r3, r0
    302e:	2b00      	cmp	r3, #0
    3030:	d0bf      	beq.n	2fb2 <_ZN12States_Class16ControllerResumeEh+0x96>
					alu.PrepareNewEvent(kALUEventCheckPheripherals);
    3032:	2200      	movs	r2, #0
    3034:	f240 1105 	movw	r1, #261	; 0x105
    3038:	4817      	ldr	r0, [pc, #92]	; (3098 <_ZN12States_Class16ControllerResumeEh+0x17c>)
    303a:	4b18      	ldr	r3, [pc, #96]	; (309c <_ZN12States_Class16ControllerResumeEh+0x180>)
    303c:	4798      	blx	r3
					done=true;
    303e:	2301      	movs	r3, #1
    3040:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while ((cBit.IsOK())&&(!done))
    3044:	e7b5      	b.n	2fb2 <_ZN12States_Class16ControllerResumeEh+0x96>
				}
			}
			
		}else{
			alu.PrepareNewEvent(kALUEventSimpleStart);
    3046:	2200      	movs	r2, #0
    3048:	f44f 7182 	mov.w	r1, #260	; 0x104
    304c:	4812      	ldr	r0, [pc, #72]	; (3098 <_ZN12States_Class16ControllerResumeEh+0x17c>)
    304e:	4b13      	ldr	r3, [pc, #76]	; (309c <_ZN12States_Class16ControllerResumeEh+0x180>)
    3050:	4798      	blx	r3
			return;
    3052:	bf00      	nop
		}
		
}
    3054:	3734      	adds	r7, #52	; 0x34
    3056:	46bd      	mov	sp, r7
    3058:	bd90      	pop	{r4, r7, pc}
    305a:	bf00      	nop
    305c:	000003c5 	.word	0x000003c5
    3060:	00021760 	.word	0x00021760
    3064:	2000a140 	.word	0x2000a140
    3068:	0000427d 	.word	0x0000427d
    306c:	00021784 	.word	0x00021784
    3070:	00000c89 	.word	0x00000c89
    3074:	000064b1 	.word	0x000064b1
    3078:	00003e45 	.word	0x00003e45
    307c:	20009850 	.word	0x20009850
    3080:	0000419d 	.word	0x0000419d
    3084:	20007fc4 	.word	0x20007fc4
    3088:	00000fd3 	.word	0x00000fd3
    308c:	00014a59 	.word	0x00014a59
    3090:	000032cd 	.word	0x000032cd
    3094:	00014a91 	.word	0x00014a91
    3098:	20000c80 	.word	0x20000c80
    309c:	00000a39 	.word	0x00000a39

000030a0 <_ZN12States_Class5StartEh>:

void States_Class::Start(uint8_t	operationMode)
	{
    30a0:	b590      	push	{r4, r7, lr}
    30a2:	b08d      	sub	sp, #52	; 0x34
    30a4:	af02      	add	r7, sp, #8
    30a6:	6078      	str	r0, [r7, #4]
    30a8:	460b      	mov	r3, r1
    30aa:	70fb      	strb	r3, [r7, #3]
	hvacState->currentState = kHVACStateStart;
    30ac:	687b      	ldr	r3, [r7, #4]
    30ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    30b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
    30b6:	625a      	str	r2, [r3, #36]	; 0x24
	bool done(false);
    30b8:	2300      	movs	r3, #0
    30ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (operationMode==0)
    30be:	78fb      	ldrb	r3, [r7, #3]
    30c0:	2b00      	cmp	r3, #0
    30c2:	d113      	bne.n	30ec <_ZN12States_Class5StartEh+0x4c>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACOperationTimeElapsed),100);
    30c4:	2264      	movs	r2, #100	; 0x64
    30c6:	4962      	ldr	r1, [pc, #392]	; (3250 <_ZN12States_Class5StartEh+0x1b0>)
    30c8:	4862      	ldr	r0, [pc, #392]	; (3254 <_ZN12States_Class5StartEh+0x1b4>)
    30ca:	4b63      	ldr	r3, [pc, #396]	; (3258 <_ZN12States_Class5StartEh+0x1b8>)
    30cc:	4798      	blx	r3
		usb<<"Air Conditioning System Started"<<NEWLINE;
    30ce:	4963      	ldr	r1, [pc, #396]	; (325c <_ZN12States_Class5StartEh+0x1bc>)
    30d0:	4863      	ldr	r0, [pc, #396]	; (3260 <_ZN12States_Class5StartEh+0x1c0>)
    30d2:	4b64      	ldr	r3, [pc, #400]	; (3264 <_ZN12States_Class5StartEh+0x1c4>)
    30d4:	4798      	blx	r3
    30d6:	4603      	mov	r3, r0
    30d8:	4963      	ldr	r1, [pc, #396]	; (3268 <_ZN12States_Class5StartEh+0x1c8>)
    30da:	4618      	mov	r0, r3
    30dc:	4b63      	ldr	r3, [pc, #396]	; (326c <_ZN12States_Class5StartEh+0x1cc>)
    30de:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskCheckCommunication);
    30e0:	2200      	movs	r2, #0
    30e2:	2103      	movs	r1, #3
    30e4:	4862      	ldr	r0, [pc, #392]	; (3270 <_ZN12States_Class5StartEh+0x1d0>)
    30e6:	4b63      	ldr	r3, [pc, #396]	; (3274 <_ZN12States_Class5StartEh+0x1d4>)
    30e8:	4798      	blx	r3
	
		return;
    30ea:	e0ad      	b.n	3248 <_ZN12States_Class5StartEh+0x1a8>
	}
		
		

    tick_t	timerValue = 0L;
    30ec:	2300      	movs	r3, #0
    30ee:	623b      	str	r3, [r7, #32]
    bool	isCurrentStateValid = false;
    30f0:	2300      	movs	r3, #0
    30f2:	77fb      	strb	r3, [r7, #31]
	memory.ReadFastApplicationState(lastHVACState);
    30f4:	687b      	ldr	r3, [r7, #4]
    30f6:	33f0      	adds	r3, #240	; 0xf0
    30f8:	4619      	mov	r1, r3
    30fa:	485f      	ldr	r0, [pc, #380]	; (3278 <_ZN12States_Class5StartEh+0x1d8>)
    30fc:	4b5f      	ldr	r3, [pc, #380]	; (327c <_ZN12States_Class5StartEh+0x1dc>)
    30fe:	4798      	blx	r3
	
	if (calendar.WasInterrupted())
    3100:	485f      	ldr	r0, [pc, #380]	; (3280 <_ZN12States_Class5StartEh+0x1e0>)
    3102:	4b60      	ldr	r3, [pc, #384]	; (3284 <_ZN12States_Class5StartEh+0x1e4>)
    3104:	4798      	blx	r3
    3106:	4603      	mov	r3, r0
    3108:	2b00      	cmp	r3, #0
    310a:	d019      	beq.n	3140 <_ZN12States_Class5StartEh+0xa0>
	{
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    310c:	485c      	ldr	r0, [pc, #368]	; (3280 <_ZN12States_Class5StartEh+0x1e0>)
    310e:	4b5e      	ldr	r3, [pc, #376]	; (3288 <_ZN12States_Class5StartEh+0x1e8>)
    3110:	4798      	blx	r3
    3112:	4602      	mov	r2, r0
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		#ifdef OFFLINE
		resumeLastStateValid = ((powerInterruptDuration > 0) && (powerInterruptDuration < 5000L));
		#else
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    3120:	2b00      	cmp	r3, #0
    3122:	db08      	blt.n	3136 <_ZN12States_Class5StartEh+0x96>
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    312a:	f241 3287 	movw	r2, #4999	; 0x1387
    312e:	4293      	cmp	r3, r2
    3130:	dc01      	bgt.n	3136 <_ZN12States_Class5StartEh+0x96>
    3132:	2201      	movs	r2, #1
    3134:	e000      	b.n	3138 <_ZN12States_Class5StartEh+0x98>
    3136:	2200      	movs	r2, #0
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    313e:	e002      	b.n	3146 <_ZN12States_Class5StartEh+0xa6>

		usb << "powerInterruptDuration was " << powerInterruptDuration << (resumeLastStateValid?" 200msec":" power resume") << newline;
		
		#endif
	}else{
		memory.LogResetEvent();
    3140:	4852      	ldr	r0, [pc, #328]	; (328c <_ZN12States_Class5StartEh+0x1ec>)
    3142:	4b53      	ldr	r3, [pc, #332]	; (3290 <_ZN12States_Class5StartEh+0x1f0>)
    3144:	4798      	blx	r3
	//	SetDefaultState();
	//}



	readResult=memory.ReadLastConfigurationData(configuration);
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	f503 73b0 	add.w	r3, r3, #352	; 0x160
    314c:	4619      	mov	r1, r3
    314e:	4851      	ldr	r0, [pc, #324]	; (3294 <_ZN12States_Class5StartEh+0x1f4>)
    3150:	4b51      	ldr	r3, [pc, #324]	; (3298 <_ZN12States_Class5StartEh+0x1f8>)
    3152:	4798      	blx	r3
    3154:	4602      	mov	r2, r0
    3156:	687b      	ldr	r3, [r7, #4]
    3158:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	if (readResult>0)
    315c:	687b      	ldr	r3, [r7, #4]
    315e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    3162:	2b00      	cmp	r3, #0
    3164:	d00b      	beq.n	317e <_ZN12States_Class5StartEh+0xde>
		{
		#if __DEBUG__ > 3
			usb << "readConfigurationDataArea failed!" << newline;
		#endif
		SetFactoryDefaults(0, true, false);
    3166:	687b      	ldr	r3, [r7, #4]
    3168:	681b      	ldr	r3, [r3, #0]
    316a:	3b0c      	subs	r3, #12
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	461a      	mov	r2, r3
    3170:	687b      	ldr	r3, [r7, #4]
    3172:	1898      	adds	r0, r3, r2
    3174:	2300      	movs	r3, #0
    3176:	2201      	movs	r2, #1
    3178:	2100      	movs	r1, #0
    317a:	4c48      	ldr	r4, [pc, #288]	; (329c <_ZN12States_Class5StartEh+0x1fc>)
    317c:	47a0      	blx	r4
// #endif
	

	//interfaces.CheckInternalCommunication();

	if (readResult==0)
    317e:	687b      	ldr	r3, [r7, #4]
    3180:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    3184:	2b00      	cmp	r3, #0
    3186:	d158      	bne.n	323a <_ZN12States_Class5StartEh+0x19a>
    {
		prepareStateChangeEvent(kHVACStateInitialize);
    3188:	2200      	movs	r2, #0
    318a:	f44f 7197 	mov.w	r1, #302	; 0x12e
    318e:	6878      	ldr	r0, [r7, #4]
    3190:	4b43      	ldr	r3, [pc, #268]	; (32a0 <_ZN12States_Class5StartEh+0x200>)
    3192:	4798      	blx	r3
		event	e;
    3194:	f107 030c 	add.w	r3, r7, #12
    3198:	4618      	mov	r0, r3
    319a:	4b42      	ldr	r3, [pc, #264]	; (32a4 <_ZN12States_Class5StartEh+0x204>)
    319c:	4798      	blx	r3
		listener.eventHandler=&States_Class::CheckEvents;
    319e:	4b42      	ldr	r3, [pc, #264]	; (32a8 <_ZN12States_Class5StartEh+0x208>)
    31a0:	4a42      	ldr	r2, [pc, #264]	; (32ac <_ZN12States_Class5StartEh+0x20c>)
    31a2:	615a      	str	r2, [r3, #20]
		while ((cBit.IsOK())&&(!done))
    31a4:	4842      	ldr	r0, [pc, #264]	; (32b0 <_ZN12States_Class5StartEh+0x210>)
    31a6:	4b43      	ldr	r3, [pc, #268]	; (32b4 <_ZN12States_Class5StartEh+0x214>)
    31a8:	4798      	blx	r3
    31aa:	4603      	mov	r3, r0
    31ac:	2b00      	cmp	r3, #0
    31ae:	d008      	beq.n	31c2 <_ZN12States_Class5StartEh+0x122>
    31b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    31b4:	f083 0301 	eor.w	r3, r3, #1
    31b8:	b2db      	uxtb	r3, r3
    31ba:	2b00      	cmp	r3, #0
    31bc:	d001      	beq.n	31c2 <_ZN12States_Class5StartEh+0x122>
    31be:	2301      	movs	r3, #1
    31c0:	e000      	b.n	31c4 <_ZN12States_Class5StartEh+0x124>
    31c2:	2300      	movs	r3, #0
    31c4:	2b00      	cmp	r3, #0
    31c6:	d03f      	beq.n	3248 <_ZN12States_Class5StartEh+0x1a8>
		{
			if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent))
    31c8:	4b3b      	ldr	r3, [pc, #236]	; (32b8 <_ZN12States_Class5StartEh+0x218>)
    31ca:	681b      	ldr	r3, [r3, #0]
    31cc:	f107 010c 	add.w	r1, r7, #12
    31d0:	9300      	str	r3, [sp, #0]
    31d2:	f44f 7300 	mov.w	r3, #512	; 0x200
    31d6:	f44f 7200 	mov.w	r2, #512	; 0x200
    31da:	4833      	ldr	r0, [pc, #204]	; (32a8 <_ZN12States_Class5StartEh+0x208>)
    31dc:	4c37      	ldr	r4, [pc, #220]	; (32bc <_ZN12States_Class5StartEh+0x21c>)
    31de:	47a0      	blx	r4
    31e0:	4603      	mov	r3, r0
    31e2:	2b00      	cmp	r3, #0
    31e4:	d011      	beq.n	320a <_ZN12States_Class5StartEh+0x16a>
			{
		
				handleHVACEvent(e);
    31e6:	f107 030c 	add.w	r3, r7, #12
    31ea:	4619      	mov	r1, r3
    31ec:	6878      	ldr	r0, [r7, #4]
    31ee:	4b34      	ldr	r3, [pc, #208]	; (32c0 <_ZN12States_Class5StartEh+0x220>)
    31f0:	4798      	blx	r3
				if (hvacState->currentState==kHVACStateLeaving)
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    31f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31fa:	f240 1243 	movw	r2, #323	; 0x143
    31fe:	4293      	cmp	r3, r2
    3200:	d1d0      	bne.n	31a4 <_ZN12States_Class5StartEh+0x104>
				{
						done=true;
    3202:	2301      	movs	r3, #1
    3204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
    3208:	e01e      	b.n	3248 <_ZN12States_Class5StartEh+0x1a8>
					
				}
			
			}
			else{
				if (listener.WaitForEvent(e, kALUEventClass, kHVACEventDoPendingTasks)){
    320a:	4b2b      	ldr	r3, [pc, #172]	; (32b8 <_ZN12States_Class5StartEh+0x218>)
    320c:	681b      	ldr	r3, [r3, #0]
    320e:	f107 010c 	add.w	r1, r7, #12
    3212:	9300      	str	r3, [sp, #0]
    3214:	2303      	movs	r3, #3
    3216:	f44f 7240 	mov.w	r2, #768	; 0x300
    321a:	4823      	ldr	r0, [pc, #140]	; (32a8 <_ZN12States_Class5StartEh+0x208>)
    321c:	4c29      	ldr	r4, [pc, #164]	; (32c4 <_ZN12States_Class5StartEh+0x224>)
    321e:	47a0      	blx	r4
    3220:	4603      	mov	r3, r0
    3222:	2b00      	cmp	r3, #0
    3224:	d0be      	beq.n	31a4 <_ZN12States_Class5StartEh+0x104>
					alu.PrepareNewEvent(kALUEventSimpleStart);
    3226:	2200      	movs	r2, #0
    3228:	f44f 7182 	mov.w	r1, #260	; 0x104
    322c:	4810      	ldr	r0, [pc, #64]	; (3270 <_ZN12States_Class5StartEh+0x1d0>)
    322e:	4b26      	ldr	r3, [pc, #152]	; (32c8 <_ZN12States_Class5StartEh+0x228>)
    3230:	4798      	blx	r3
					done=true;
    3232:	2301      	movs	r3, #1
    3234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    3238:	e006      	b.n	3248 <_ZN12States_Class5StartEh+0x1a8>

			}
		}
			
    }else{
		alu.PrepareNewEvent(kALUEventSimpleStart);
    323a:	2200      	movs	r2, #0
    323c:	f44f 7182 	mov.w	r1, #260	; 0x104
    3240:	480b      	ldr	r0, [pc, #44]	; (3270 <_ZN12States_Class5StartEh+0x1d0>)
    3242:	4b21      	ldr	r3, [pc, #132]	; (32c8 <_ZN12States_Class5StartEh+0x228>)
    3244:	4798      	blx	r3
		return;
    3246:	bf00      	nop
    }



}
    3248:	372c      	adds	r7, #44	; 0x2c
    324a:	46bd      	mov	sp, r7
    324c:	bd90      	pop	{r4, r7, pc}
    324e:	bf00      	nop
    3250:	00002d35 	.word	0x00002d35
    3254:	2000a0e8 	.word	0x2000a0e8
    3258:	00017769 	.word	0x00017769
    325c:	00021788 	.word	0x00021788
    3260:	2000a140 	.word	0x2000a140
    3264:	0000429d 	.word	0x0000429d
    3268:	00021784 	.word	0x00021784
    326c:	00000c89 	.word	0x00000c89
    3270:	20000c80 	.word	0x20000c80
    3274:	000009fd 	.word	0x000009fd
    3278:	20002bd4 	.word	0x20002bd4
    327c:	00001841 	.word	0x00001841
    3280:	20009ec0 	.word	0x20009ec0
    3284:	000173d1 	.word	0x000173d1
    3288:	000172f9 	.word	0x000172f9
    328c:	20002564 	.word	0x20002564
    3290:	000015cd 	.word	0x000015cd
    3294:	20002be4 	.word	0x20002be4
    3298:	0000271d 	.word	0x0000271d
    329c:	000010cd 	.word	0x000010cd
    32a0:	00003e45 	.word	0x00003e45
    32a4:	000003c5 	.word	0x000003c5
    32a8:	20009850 	.word	0x20009850
    32ac:	0000419d 	.word	0x0000419d
    32b0:	20007fc4 	.word	0x20007fc4
    32b4:	00000fd3 	.word	0x00000fd3
    32b8:	00022eb4 	.word	0x00022eb4
    32bc:	00014a59 	.word	0x00014a59
    32c0:	000032cd 	.word	0x000032cd
    32c4:	00014a91 	.word	0x00014a91
    32c8:	00000a39 	.word	0x00000a39

000032cc <_ZN12States_Class15handleHVACEventER5event>:
	return result;
	}


void States_Class::handleHVACEvent(event& e)
	{
    32cc:	b590      	push	{r4, r7, lr}
    32ce:	b083      	sub	sp, #12
    32d0:	af00      	add	r7, sp, #0
    32d2:	6078      	str	r0, [r7, #4]
    32d4:	6039      	str	r1, [r7, #0]
		hvacState->callingState = hvacState->currentState;
    32d6:	687b      	ldr	r3, [r7, #4]
    32d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    32dc:	687a      	ldr	r2, [r7, #4]
    32de:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    32e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
    32e4:	629a      	str	r2, [r3, #40]	; 0x28
	if (hvacState->currentState != kHVACStateResume){
    32e6:	687b      	ldr	r3, [r7, #4]
    32e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    32ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32ee:	f240 122f 	movw	r2, #303	; 0x12f
    32f2:	4293      	cmp	r3, r2
    32f4:	d00c      	beq.n	3310 <_ZN12States_Class15handleHVACEventER5event+0x44>
		hvacState->currentState = e.data.wordData[0];
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    32fc:	683a      	ldr	r2, [r7, #0]
    32fe:	8912      	ldrh	r2, [r2, #8]
    3300:	625a      	str	r2, [r3, #36]	; 0x24
		hvacState->stateFlags = e.data.wordData[1];
    3302:	687b      	ldr	r3, [r7, #4]
    3304:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3308:	683a      	ldr	r2, [r7, #0]
    330a:	8952      	ldrh	r2, [r2, #10]
    330c:	631a      	str	r2, [r3, #48]	; 0x30
    330e:	e007      	b.n	3320 <_ZN12States_Class15handleHVACEventER5event+0x54>
		
	}else{
		hvacState->currentState=hvacState->lastState;
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3316:	687a      	ldr	r2, [r7, #4]
    3318:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    331c:	6a12      	ldr	r2, [r2, #32]
    331e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	hvacState->stateEntryTime = hvacTimer.Get_ticks();
    3320:	687b      	ldr	r3, [r7, #4]
    3322:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    3326:	4871      	ldr	r0, [pc, #452]	; (34ec <_ZN12States_Class15handleHVACEventER5event+0x220>)
    3328:	4b71      	ldr	r3, [pc, #452]	; (34f0 <_ZN12States_Class15handleHVACEventER5event+0x224>)
    332a:	4798      	blx	r3
    332c:	4603      	mov	r3, r0
    332e:	6363      	str	r3, [r4, #52]	; 0x34

#if __DEBUG__ > 0
	
	usb << "handleGAINEvent received: switching from ";
    3330:	4970      	ldr	r1, [pc, #448]	; (34f4 <_ZN12States_Class15handleHVACEventER5event+0x228>)
    3332:	4871      	ldr	r0, [pc, #452]	; (34f8 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    3334:	4b71      	ldr	r3, [pc, #452]	; (34fc <_ZN12States_Class15handleHVACEventER5event+0x230>)
    3336:	4798      	blx	r3
	//usb.write(gainStateDescription[hvacState->callingState]);
	usb << " to ";
    3338:	4971      	ldr	r1, [pc, #452]	; (3500 <_ZN12States_Class15handleHVACEventER5event+0x234>)
    333a:	486f      	ldr	r0, [pc, #444]	; (34f8 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    333c:	4b71      	ldr	r3, [pc, #452]	; (3504 <_ZN12States_Class15handleHVACEventER5event+0x238>)
    333e:	4798      	blx	r3
	//usb.write(gainStateDescription[hvacState->currentState]);
	//usb << " (flags == " << hvacState->stateFlags << ')' << NEWLINE;
	
#endif

	saveCurrentState();
    3340:	6878      	ldr	r0, [r7, #4]
    3342:	4b71      	ldr	r3, [pc, #452]	; (3508 <_ZN12States_Class15handleHVACEventER5event+0x23c>)
    3344:	4798      	blx	r3

	switch (hvacState->currentState)
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    334e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
    3352:	2b15      	cmp	r3, #21
    3354:	f200 80c0 	bhi.w	34d8 <_ZN12States_Class15handleHVACEventER5event+0x20c>
    3358:	a201      	add	r2, pc, #4	; (adr r2, 3360 <_ZN12States_Class15handleHVACEventER5event+0x94>)
    335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    335e:	bf00      	nop
    3360:	000033b9 	.word	0x000033b9
    3364:	000033cb 	.word	0x000033cb
    3368:	00003425 	.word	0x00003425
    336c:	00003413 	.word	0x00003413
    3370:	000033dd 	.word	0x000033dd
    3374:	00003449 	.word	0x00003449
    3378:	000033ef 	.word	0x000033ef
    337c:	00003401 	.word	0x00003401
    3380:	00003437 	.word	0x00003437
    3384:	000034d9 	.word	0x000034d9
    3388:	000034d9 	.word	0x000034d9
    338c:	0000345b 	.word	0x0000345b
    3390:	0000347f 	.word	0x0000347f
    3394:	000034d9 	.word	0x000034d9
    3398:	0000346d 	.word	0x0000346d
    339c:	000034d9 	.word	0x000034d9
    33a0:	00003491 	.word	0x00003491
    33a4:	000034a3 	.word	0x000034a3
    33a8:	000034b5 	.word	0x000034b5
    33ac:	000034d9 	.word	0x000034d9
    33b0:	000034d9 	.word	0x000034d9
    33b4:	000034c7 	.word	0x000034c7
		{
		case kHVACStateInitialize:
			StateInitialize(hvacState->stateFlags);
    33b8:	687b      	ldr	r3, [r7, #4]
    33ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    33be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    33c0:	4619      	mov	r1, r3
    33c2:	6878      	ldr	r0, [r7, #4]
    33c4:	4b51      	ldr	r3, [pc, #324]	; (350c <_ZN12States_Class15handleHVACEventER5event+0x240>)
    33c6:	4798      	blx	r3
			break;
    33c8:	e08b      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateResume:
			StateResume(hvacState->stateFlags);
    33ca:	687b      	ldr	r3, [r7, #4]
    33cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    33d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    33d2:	4619      	mov	r1, r3
    33d4:	6878      	ldr	r0, [r7, #4]
    33d6:	4b4e      	ldr	r3, [pc, #312]	; (3510 <_ZN12States_Class15handleHVACEventER5event+0x244>)
    33d8:	4798      	blx	r3
			break;
    33da:	e082      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStandbyOFF:
			StateStandbyOFF(hvacState->stateFlags);
    33dc:	687b      	ldr	r3, [r7, #4]
    33de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    33e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    33e4:	4619      	mov	r1, r3
    33e6:	6878      	ldr	r0, [r7, #4]
    33e8:	4b4a      	ldr	r3, [pc, #296]	; (3514 <_ZN12States_Class15handleHVACEventER5event+0x248>)
    33ea:	4798      	blx	r3
			break;
    33ec:	e079      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStatePrepareStandbyON:
			StatePrepareStandbyON(hvacState->stateFlags);
    33ee:	687b      	ldr	r3, [r7, #4]
    33f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    33f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    33f6:	4619      	mov	r1, r3
    33f8:	6878      	ldr	r0, [r7, #4]
    33fa:	4b47      	ldr	r3, [pc, #284]	; (3518 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    33fc:	4798      	blx	r3
			break;
    33fe:	e070      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStandbyON:
			handleStateStandbyON(hvacState->stateFlags);
    3400:	687b      	ldr	r3, [r7, #4]
    3402:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3408:	4619      	mov	r1, r3
    340a:	6878      	ldr	r0, [r7, #4]
    340c:	4b43      	ldr	r3, [pc, #268]	; (351c <_ZN12States_Class15handleHVACEventER5event+0x250>)
    340e:	4798      	blx	r3
			break;
    3410:	e067      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStateStandbyAUTO:
			StateStandbyAUTO(hvacState->stateFlags);
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    341a:	4619      	mov	r1, r3
    341c:	6878      	ldr	r0, [r7, #4]
    341e:	4b40      	ldr	r3, [pc, #256]	; (3520 <_ZN12States_Class15handleHVACEventER5event+0x254>)
    3420:	4798      	blx	r3
			break;
    3422:	e05e      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStateStandbyVENT:
			StateStandbyVENT(hvacState->stateFlags);
    3424:	687b      	ldr	r3, [r7, #4]
    3426:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    342c:	4619      	mov	r1, r3
    342e:	6878      	ldr	r0, [r7, #4]
    3430:	4b3c      	ldr	r3, [pc, #240]	; (3524 <_ZN12States_Class15handleHVACEventER5event+0x258>)
    3432:	4798      	blx	r3
			break;
    3434:	e055      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStandbyReady:
			handleStateStandbyReady(hvacState->stateFlags);
    3436:	687b      	ldr	r3, [r7, #4]
    3438:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    343e:	4619      	mov	r1, r3
    3440:	6878      	ldr	r0, [r7, #4]
    3442:	4b39      	ldr	r3, [pc, #228]	; (3528 <_ZN12States_Class15handleHVACEventER5event+0x25c>)
    3444:	4798      	blx	r3
			break;
    3446:	e04c      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStatePrepareStandbyOFF:
			StatePrepareStandbyOFF(hvacState->stateFlags);
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3450:	4619      	mov	r1, r3
    3452:	6878      	ldr	r0, [r7, #4]
    3454:	4b35      	ldr	r3, [pc, #212]	; (352c <_ZN12States_Class15handleHVACEventER5event+0x260>)
    3456:	4798      	blx	r3
			break;
    3458:	e043      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateON:
			handleStateON(hvacState->stateFlags);
    345a:	687b      	ldr	r3, [r7, #4]
    345c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3462:	4619      	mov	r1, r3
    3464:	6878      	ldr	r0, [r7, #4]
    3466:	4b32      	ldr	r3, [pc, #200]	; (3530 <_ZN12States_Class15handleHVACEventER5event+0x264>)
    3468:	4798      	blx	r3
			break;
    346a:	e03a      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateFinished:
			handleStateFinished(hvacState->stateFlags);
    346c:	687b      	ldr	r3, [r7, #4]
    346e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3474:	4619      	mov	r1, r3
    3476:	6878      	ldr	r0, [r7, #4]
    3478:	4b2e      	ldr	r3, [pc, #184]	; (3534 <_ZN12States_Class15handleHVACEventER5event+0x268>)
    347a:	4798      	blx	r3
			break;
    347c:	e031      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStoppedProcess:
			StateStoppedProcess(hvacState->stateFlags);
    347e:	687b      	ldr	r3, [r7, #4]
    3480:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3486:	4619      	mov	r1, r3
    3488:	6878      	ldr	r0, [r7, #4]
    348a:	4b2b      	ldr	r3, [pc, #172]	; (3538 <_ZN12States_Class15handleHVACEventER5event+0x26c>)
    348c:	4798      	blx	r3
			break;
    348e:	e028      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateSelfProtect:
			handleStateSelfProtect(hvacState->stateFlags);
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3498:	4619      	mov	r1, r3
    349a:	6878      	ldr	r0, [r7, #4]
    349c:	4b27      	ldr	r3, [pc, #156]	; (353c <_ZN12States_Class15handleHVACEventER5event+0x270>)
    349e:	4798      	blx	r3
			break;
    34a0:	e01f      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateError:
			handleStateError(hvacState->stateFlags);
    34a2:	687b      	ldr	r3, [r7, #4]
    34a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    34a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    34aa:	4619      	mov	r1, r3
    34ac:	6878      	ldr	r0, [r7, #4]
    34ae:	4b24      	ldr	r3, [pc, #144]	; (3540 <_ZN12States_Class15handleHVACEventER5event+0x274>)
    34b0:	4798      	blx	r3
			break;
    34b2:	e016      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateMaintenance:
			handleStateMaintenance(hvacState->stateFlags);
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    34ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    34bc:	4619      	mov	r1, r3
    34be:	6878      	ldr	r0, [r7, #4]
    34c0:	4b20      	ldr	r3, [pc, #128]	; (3544 <_ZN12States_Class15handleHVACEventER5event+0x278>)
    34c2:	4798      	blx	r3
			break;
    34c4:	e00d      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStateLeaving:
			StateLeaving(hvacState->stateFlags);
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    34cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    34ce:	4619      	mov	r1, r3
    34d0:	6878      	ldr	r0, [r7, #4]
    34d2:	4b1d      	ldr	r3, [pc, #116]	; (3548 <_ZN12States_Class15handleHVACEventER5event+0x27c>)
    34d4:	4798      	blx	r3
		break;
    34d6:	e004      	b.n	34e2 <_ZN12States_Class15handleHVACEventER5event+0x216>

		default:
			handleStateError(kHVACErrorIllegalStateTransition);
    34d8:	2102      	movs	r1, #2
    34da:	6878      	ldr	r0, [r7, #4]
    34dc:	4b18      	ldr	r3, [pc, #96]	; (3540 <_ZN12States_Class15handleHVACEventER5event+0x274>)
    34de:	4798      	blx	r3
			break;
    34e0:	bf00      	nop
		}
	}
    34e2:	bf00      	nop
    34e4:	370c      	adds	r7, #12
    34e6:	46bd      	mov	sp, r7
    34e8:	bd90      	pop	{r4, r7, pc}
    34ea:	bf00      	nop
    34ec:	2000a0e8 	.word	0x2000a0e8
    34f0:	00017835 	.word	0x00017835
    34f4:	000217a8 	.word	0x000217a8
    34f8:	2000a140 	.word	0x2000a140
    34fc:	000042bd 	.word	0x000042bd
    3500:	000217d4 	.word	0x000217d4
    3504:	000042dd 	.word	0x000042dd
    3508:	00003eb9 	.word	0x00003eb9
    350c:	0000354d 	.word	0x0000354d
    3510:	0000360d 	.word	0x0000360d
    3514:	000036c1 	.word	0x000036c1
    3518:	00003ab9 	.word	0x00003ab9
    351c:	00003bad 	.word	0x00003bad
    3520:	000037c1 	.word	0x000037c1
    3524:	00003939 	.word	0x00003939
    3528:	00003c21 	.word	0x00003c21
    352c:	00003b41 	.word	0x00003b41
    3530:	00003c59 	.word	0x00003c59
    3534:	00003ca5 	.word	0x00003ca5
    3538:	00003d25 	.word	0x00003d25
    353c:	00003d65 	.word	0x00003d65
    3540:	00003d9d 	.word	0x00003d9d
    3544:	00003dd5 	.word	0x00003dd5
    3548:	00003cdd 	.word	0x00003cdd

0000354c <_ZN12States_Class15StateInitializeEm>:


void States_Class::StateInitialize(uint32 flags)
	{
    354c:	b580      	push	{r7, lr}
    354e:	b088      	sub	sp, #32
    3550:	af00      	add	r7, sp, #0
    3552:	6078      	str	r0, [r7, #4]
    3554:	6039      	str	r1, [r7, #0]
	event	e;
    3556:	f107 030c 	add.w	r3, r7, #12
    355a:	4618      	mov	r0, r3
    355c:	4b1e      	ldr	r3, [pc, #120]	; (35d8 <_ZN12States_Class15StateInitializeEm+0x8c>)
    355e:	4798      	blx	r3
	hvacState->currentState=kHVACStateInitialize;
    3560:	687b      	ldr	r3, [r7, #4]
    3562:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3566:	f44f 7297 	mov.w	r2, #302	; 0x12e
    356a:	625a      	str	r2, [r3, #36]	; 0x24
   	uint16	selfTestResult(kHVACNoError);
    356c:	2300      	movs	r3, #0
    356e:	83fb      	strh	r3, [r7, #30]
	
#if __DEBUG__ > 0
	
	usb << "handleStateInitialize: flags == 0x" << flags << NEWLINE;
    3570:	491a      	ldr	r1, [pc, #104]	; (35dc <_ZN12States_Class15StateInitializeEm+0x90>)
    3572:	481b      	ldr	r0, [pc, #108]	; (35e0 <_ZN12States_Class15StateInitializeEm+0x94>)
    3574:	4b1b      	ldr	r3, [pc, #108]	; (35e4 <_ZN12States_Class15StateInitializeEm+0x98>)
    3576:	4798      	blx	r3
    3578:	4602      	mov	r2, r0
    357a:	463b      	mov	r3, r7
    357c:	4619      	mov	r1, r3
    357e:	4610      	mov	r0, r2
    3580:	4b19      	ldr	r3, [pc, #100]	; (35e8 <_ZN12States_Class15StateInitializeEm+0x9c>)
    3582:	4798      	blx	r3
    3584:	4603      	mov	r3, r0
    3586:	4919      	ldr	r1, [pc, #100]	; (35ec <_ZN12States_Class15StateInitializeEm+0xa0>)
    3588:	4618      	mov	r0, r3
    358a:	4b19      	ldr	r3, [pc, #100]	; (35f0 <_ZN12States_Class15StateInitializeEm+0xa4>)
    358c:	4798      	blx	r3
		
#endif
	
	
	//listener.CheckEvent();
	if (pBit.isOK)
    358e:	4b19      	ldr	r3, [pc, #100]	; (35f4 <_ZN12States_Class15StateInitializeEm+0xa8>)
    3590:	781b      	ldrb	r3, [r3, #0]
    3592:	b2db      	uxtb	r3, r3
    3594:	2b00      	cmp	r3, #0
    3596:	d017      	beq.n	35c8 <_ZN12States_Class15StateInitializeEm+0x7c>
	{
		#if __DEBUG__ > 0
		
		usb << "handleStateInitialize" << NEWLINE;
    3598:	4917      	ldr	r1, [pc, #92]	; (35f8 <_ZN12States_Class15StateInitializeEm+0xac>)
    359a:	4811      	ldr	r0, [pc, #68]	; (35e0 <_ZN12States_Class15StateInitializeEm+0x94>)
    359c:	4b17      	ldr	r3, [pc, #92]	; (35fc <_ZN12States_Class15StateInitializeEm+0xb0>)
    359e:	4798      	blx	r3
    35a0:	4603      	mov	r3, r0
    35a2:	4912      	ldr	r1, [pc, #72]	; (35ec <_ZN12States_Class15StateInitializeEm+0xa0>)
    35a4:	4618      	mov	r0, r3
    35a6:	4b12      	ldr	r3, [pc, #72]	; (35f0 <_ZN12States_Class15StateInitializeEm+0xa4>)
    35a8:	4798      	blx	r3

		#ifdef _OFFLINE
			prepareStateChangeEvent( kHVACStateInterrupted);
			listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    35aa:	6878      	ldr	r0, [r7, #4]
    35ac:	4b14      	ldr	r3, [pc, #80]	; (3600 <_ZN12States_Class15StateInitializeEm+0xb4>)
    35ae:	4798      	blx	r3
    35b0:	4603      	mov	r3, r0
    35b2:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kHVACNoError)
    35b4:	8bfb      	ldrh	r3, [r7, #30]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d10a      	bne.n	35d0 <_ZN12States_Class15StateInitializeEm+0x84>
		{
			prepareStateChangeEvent( kHVACStateStandbyOFF);
    35ba:	2200      	movs	r2, #0
    35bc:	f44f 7199 	mov.w	r1, #306	; 0x132
    35c0:	6878      	ldr	r0, [r7, #4]
    35c2:	4b10      	ldr	r3, [pc, #64]	; (3604 <_ZN12States_Class15StateInitializeEm+0xb8>)
    35c4:	4798      	blx	r3
	}



	
	}
    35c6:	e003      	b.n	35d0 <_ZN12States_Class15StateInitializeEm+0x84>
		Stop(0);
    35c8:	2100      	movs	r1, #0
    35ca:	6878      	ldr	r0, [r7, #4]
    35cc:	4b0e      	ldr	r3, [pc, #56]	; (3608 <_ZN12States_Class15StateInitializeEm+0xbc>)
    35ce:	4798      	blx	r3
	}
    35d0:	bf00      	nop
    35d2:	3720      	adds	r7, #32
    35d4:	46bd      	mov	sp, r7
    35d6:	bd80      	pop	{r7, pc}
    35d8:	000003c5 	.word	0x000003c5
    35dc:	000217dc 	.word	0x000217dc
    35e0:	2000a140 	.word	0x2000a140
    35e4:	000042fd 	.word	0x000042fd
    35e8:	0000146d 	.word	0x0000146d
    35ec:	00021784 	.word	0x00021784
    35f0:	00000c89 	.word	0x00000c89
    35f4:	20007fb0 	.word	0x20007fb0
    35f8:	00021800 	.word	0x00021800
    35fc:	000021d9 	.word	0x000021d9
    3600:	00003e95 	.word	0x00003e95
    3604:	00003e45 	.word	0x00003e45
    3608:	00003f49 	.word	0x00003f49

0000360c <_ZN12States_Class11StateResumeEm>:


void States_Class::StateResume(uint32 flags)
	{
    360c:	b580      	push	{r7, lr}
    360e:	b088      	sub	sp, #32
    3610:	af00      	add	r7, sp, #0
    3612:	6078      	str	r0, [r7, #4]
    3614:	6039      	str	r1, [r7, #0]
	event	e;
    3616:	f107 030c 	add.w	r3, r7, #12
    361a:	4618      	mov	r0, r3
    361c:	4b23      	ldr	r3, [pc, #140]	; (36ac <_ZN12States_Class11StateResumeEm+0xa0>)
    361e:	4798      	blx	r3
	uint8	currentState(hvacState->currentState);
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3628:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kHVACNoError);
    362a:	2300      	movs	r3, #0
    362c:	83bb      	strh	r3, [r7, #28]
	usb << "state.currentState (after) " << hvacState->currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kHVACNoError)
    362e:	8bbb      	ldrh	r3, [r7, #28]
    3630:	2b00      	cmp	r3, #0
    3632:	d128      	bne.n	3686 <_ZN12States_Class11StateResumeEm+0x7a>
    {
        switch (hvacState->currentState)
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    363c:	f240 1239 	movw	r2, #313	; 0x139
    3640:	4293      	cmp	r3, r2
    3642:	d003      	beq.n	364c <_ZN12States_Class11StateResumeEm+0x40>
    3644:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
    3648:	d00b      	beq.n	3662 <_ZN12States_Class11StateResumeEm+0x56>
    364a:	e011      	b.n	3670 <_ZN12States_Class11StateResumeEm+0x64>
        {
        case kHVACStateON:
            prepareStateChangeEvent( hvacState->currentState, true);
    364c:	687b      	ldr	r3, [r7, #4]
    364e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3654:	b29b      	uxth	r3, r3
    3656:	2201      	movs	r2, #1
    3658:	4619      	mov	r1, r3
    365a:	6878      	ldr	r0, [r7, #4]
    365c:	4b14      	ldr	r3, [pc, #80]	; (36b0 <_ZN12States_Class11StateResumeEm+0xa4>)
    365e:	4798      	blx	r3
            break;
    3660:	e011      	b.n	3686 <_ZN12States_Class11StateResumeEm+0x7a>

        case kHVACStateStoppedProcess:
            prepareStateChangeEvent( kHVACStateStoppedProcess);
    3662:	2200      	movs	r2, #0
    3664:	f44f 719d 	mov.w	r1, #314	; 0x13a
    3668:	6878      	ldr	r0, [r7, #4]
    366a:	4b11      	ldr	r3, [pc, #68]	; (36b0 <_ZN12States_Class11StateResumeEm+0xa4>)
    366c:	4798      	blx	r3
            break;
    366e:	e00a      	b.n	3686 <_ZN12States_Class11StateResumeEm+0x7a>

        default:
            prepareStateChangeEvent( hvacState->currentState);
    3670:	687b      	ldr	r3, [r7, #4]
    3672:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3678:	b29b      	uxth	r3, r3
    367a:	2200      	movs	r2, #0
    367c:	4619      	mov	r1, r3
    367e:	6878      	ldr	r0, [r7, #4]
    3680:	4b0b      	ldr	r3, [pc, #44]	; (36b0 <_ZN12States_Class11StateResumeEm+0xa4>)
    3682:	4798      	blx	r3
            break;
    3684:	bf00      	nop
        }
    }

	hvacState->currentState = currentState;
    3686:	687b      	ldr	r3, [r7, #4]
    3688:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    368c:	7ffa      	ldrb	r2, [r7, #31]
    368e:	625a      	str	r2, [r3, #36]	; 0x24

	listener.CheckEvent();
    3690:	4808      	ldr	r0, [pc, #32]	; (36b4 <_ZN12States_Class11StateResumeEm+0xa8>)
    3692:	4b09      	ldr	r3, [pc, #36]	; (36b8 <_ZN12States_Class11StateResumeEm+0xac>)
    3694:	4798      	blx	r3
	listener.SendEventSelf(e);
    3696:	f107 030c 	add.w	r3, r7, #12
    369a:	4619      	mov	r1, r3
    369c:	4805      	ldr	r0, [pc, #20]	; (36b4 <_ZN12States_Class11StateResumeEm+0xa8>)
    369e:	4b07      	ldr	r3, [pc, #28]	; (36bc <_ZN12States_Class11StateResumeEm+0xb0>)
    36a0:	4798      	blx	r3
	}
    36a2:	bf00      	nop
    36a4:	3720      	adds	r7, #32
    36a6:	46bd      	mov	sp, r7
    36a8:	bd80      	pop	{r7, pc}
    36aa:	bf00      	nop
    36ac:	000003c5 	.word	0x000003c5
    36b0:	00003e45 	.word	0x00003e45
    36b4:	20009850 	.word	0x20009850
    36b8:	00014d9d 	.word	0x00014d9d
    36bc:	00014c55 	.word	0x00014c55

000036c0 <_ZN12States_Class15StateStandbyOFFEm>:
				
void States_Class::StateStandbyOFF(uint32 flags)
{
    36c0:	b580      	push	{r7, lr}
    36c2:	b088      	sub	sp, #32
    36c4:	af00      	add	r7, sp, #0
    36c6:	6078      	str	r0, [r7, #4]
    36c8:	6039      	str	r1, [r7, #0]
	event	e;
    36ca:	f107 030c 	add.w	r3, r7, #12
    36ce:	4618      	mov	r0, r3
    36d0:	4b31      	ldr	r3, [pc, #196]	; (3798 <_ZN12States_Class15StateStandbyOFFEm+0xd8>)
    36d2:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyOFF;
    36d4:	687b      	ldr	r3, [r7, #4]
    36d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36da:	f44f 7299 	mov.w	r2, #306	; 0x132
    36de:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=OFF;
    36e0:	687b      	ldr	r3, [r7, #4]
    36e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36e6:	2200      	movs	r2, #0
    36e8:	771a      	strb	r2, [r3, #28]
	bool	done(false);
    36ea:	2300      	movs	r3, #0
    36ec:	77fb      	strb	r3, [r7, #31]

#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    36ee:	492b      	ldr	r1, [pc, #172]	; (379c <_ZN12States_Class15StateStandbyOFFEm+0xdc>)
    36f0:	482b      	ldr	r0, [pc, #172]	; (37a0 <_ZN12States_Class15StateStandbyOFFEm+0xe0>)
    36f2:	4b2c      	ldr	r3, [pc, #176]	; (37a4 <_ZN12States_Class15StateStandbyOFFEm+0xe4>)
    36f4:	4798      	blx	r3
    36f6:	4603      	mov	r3, r0
    36f8:	492b      	ldr	r1, [pc, #172]	; (37a8 <_ZN12States_Class15StateStandbyOFFEm+0xe8>)
    36fa:	4618      	mov	r0, r3
    36fc:	4b2b      	ldr	r3, [pc, #172]	; (37ac <_ZN12States_Class15StateStandbyOFFEm+0xec>)
    36fe:	4798      	blx	r3
#endif




	listener.eventHandler=&States_Class::CheckEvents;
    3700:	4b2b      	ldr	r3, [pc, #172]	; (37b0 <_ZN12States_Class15StateStandbyOFFEm+0xf0>)
    3702:	4a2c      	ldr	r2, [pc, #176]	; (37b4 <_ZN12States_Class15StateStandbyOFFEm+0xf4>)
    3704:	615a      	str	r2, [r3, #20]
	while(!done){
    3706:	7ffb      	ldrb	r3, [r7, #31]
    3708:	2b00      	cmp	r3, #0
    370a:	d141      	bne.n	3790 <_ZN12States_Class15StateStandbyOFFEm+0xd0>
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    370c:	f107 030c 	add.w	r3, r7, #12
    3710:	2208      	movs	r2, #8
    3712:	4619      	mov	r1, r3
    3714:	6878      	ldr	r0, [r7, #4]
    3716:	4b28      	ldr	r3, [pc, #160]	; (37b8 <_ZN12States_Class15StateStandbyOFFEm+0xf8>)
    3718:	4798      	blx	r3
    371a:	4603      	mov	r3, r0
    371c:	2b00      	cmp	r3, #0
    371e:	d034      	beq.n	378a <_ZN12States_Class15StateStandbyOFFEm+0xca>
		{
			switch(e.eventClass){
    3720:	89bb      	ldrh	r3, [r7, #12]
    3722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3726:	d006      	beq.n	3736 <_ZN12States_Class15StateStandbyOFFEm+0x76>
    3728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    372c:	d01f      	beq.n	376e <_ZN12States_Class15StateStandbyOFFEm+0xae>
    372e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3732:	d00e      	beq.n	3752 <_ZN12States_Class15StateStandbyOFFEm+0x92>
						break;
					}
		
				break;
				default:
				break;
    3734:	e02b      	b.n	378e <_ZN12States_Class15StateStandbyOFFEm+0xce>
					switch (e.eventType){
    3736:	89fb      	ldrh	r3, [r7, #14]
    3738:	2b03      	cmp	r3, #3
    373a:	d000      	beq.n	373e <_ZN12States_Class15StateStandbyOFFEm+0x7e>
						break;
    373c:	e008      	b.n	3750 <_ZN12States_Class15StateStandbyOFFEm+0x90>
							prepareStateChangeEvent(kHVACStateLeaving);
    373e:	2200      	movs	r2, #0
    3740:	f240 1143 	movw	r1, #323	; 0x143
    3744:	6878      	ldr	r0, [r7, #4]
    3746:	4b1d      	ldr	r3, [pc, #116]	; (37bc <_ZN12States_Class15StateStandbyOFFEm+0xfc>)
    3748:	4798      	blx	r3
							done=true;
    374a:	2301      	movs	r3, #1
    374c:	77fb      	strb	r3, [r7, #31]
						break;
    374e:	bf00      	nop
				break;
    3750:	e01d      	b.n	378e <_ZN12States_Class15StateStandbyOFFEm+0xce>
					switch (e.eventType){
    3752:	89fb      	ldrh	r3, [r7, #14]
    3754:	2b03      	cmp	r3, #3
    3756:	d000      	beq.n	375a <_ZN12States_Class15StateStandbyOFFEm+0x9a>
							break;
    3758:	e008      	b.n	376c <_ZN12States_Class15StateStandbyOFFEm+0xac>
								prepareStateChangeEvent(kHVACStateLeaving);
    375a:	2200      	movs	r2, #0
    375c:	f240 1143 	movw	r1, #323	; 0x143
    3760:	6878      	ldr	r0, [r7, #4]
    3762:	4b16      	ldr	r3, [pc, #88]	; (37bc <_ZN12States_Class15StateStandbyOFFEm+0xfc>)
    3764:	4798      	blx	r3
								done=true;
    3766:	2301      	movs	r3, #1
    3768:	77fb      	strb	r3, [r7, #31]
							break;
    376a:	bf00      	nop
				break;
    376c:	e00f      	b.n	378e <_ZN12States_Class15StateStandbyOFFEm+0xce>
					switch (e.eventType){
    376e:	89fb      	ldrh	r3, [r7, #14]
    3770:	2b04      	cmp	r3, #4
    3772:	d000      	beq.n	3776 <_ZN12States_Class15StateStandbyOFFEm+0xb6>
						break;
    3774:	e008      	b.n	3788 <_ZN12States_Class15StateStandbyOFFEm+0xc8>
							prepareStateChangeEvent(kHVACStatePrepareStandbyON);
    3776:	2200      	movs	r2, #0
    3778:	f44f 719a 	mov.w	r1, #308	; 0x134
    377c:	6878      	ldr	r0, [r7, #4]
    377e:	4b0f      	ldr	r3, [pc, #60]	; (37bc <_ZN12States_Class15StateStandbyOFFEm+0xfc>)
    3780:	4798      	blx	r3
							done=true;
    3782:	2301      	movs	r3, #1
    3784:	77fb      	strb	r3, [r7, #31]
						break;
    3786:	bf00      	nop
				break;
    3788:	e001      	b.n	378e <_ZN12States_Class15StateStandbyOFFEm+0xce>
		
			
		} 
		else
		{
			done=false;			
    378a:	2300      	movs	r3, #0
    378c:	77fb      	strb	r3, [r7, #31]
	while(!done){
    378e:	e7ba      	b.n	3706 <_ZN12States_Class15StateStandbyOFFEm+0x46>
		}
	}



}
    3790:	bf00      	nop
    3792:	3720      	adds	r7, #32
    3794:	46bd      	mov	sp, r7
    3796:	bd80      	pop	{r7, pc}
    3798:	000003c5 	.word	0x000003c5
    379c:	00021818 	.word	0x00021818
    37a0:	2000a140 	.word	0x2000a140
    37a4:	000021d9 	.word	0x000021d9
    37a8:	00021784 	.word	0x00021784
    37ac:	00000c89 	.word	0x00000c89
    37b0:	20009850 	.word	0x20009850
    37b4:	0000419d 	.word	0x0000419d
    37b8:	00003e0d 	.word	0x00003e0d
    37bc:	00003e45 	.word	0x00003e45

000037c0 <_ZN12States_Class16StateStandbyAUTOEm>:
	
void States_Class::StateStandbyAUTO(uint32 flags)
{
    37c0:	b580      	push	{r7, lr}
    37c2:	b088      	sub	sp, #32
    37c4:	af00      	add	r7, sp, #0
    37c6:	6078      	str	r0, [r7, #4]
    37c8:	6039      	str	r1, [r7, #0]
	event	e;
    37ca:	f107 030c 	add.w	r3, r7, #12
    37ce:	4618      	mov	r0, r3
    37d0:	4b4a      	ldr	r3, [pc, #296]	; (38fc <_ZN12States_Class16StateStandbyAUTOEm+0x13c>)
    37d2:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyAUTO;
    37d4:	687b      	ldr	r3, [r7, #4]
    37d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    37da:	f240 1231 	movw	r2, #305	; 0x131
    37de:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=AUTO;
    37e0:	687b      	ldr	r3, [r7, #4]
    37e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    37e6:	2202      	movs	r2, #2
    37e8:	771a      	strb	r2, [r3, #28]
	bool	done(false);
    37ea:	2300      	movs	r3, #0
    37ec:	77fb      	strb	r3, [r7, #31]
	gotAluEvent=false;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	2200      	movs	r2, #0
    37f2:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	gotHVACEvent=false;
    37f6:	687b      	ldr	r3, [r7, #4]
    37f8:	2200      	movs	r2, #0
    37fa:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	
	#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    37fe:	4940      	ldr	r1, [pc, #256]	; (3900 <_ZN12States_Class16StateStandbyAUTOEm+0x140>)
    3800:	4840      	ldr	r0, [pc, #256]	; (3904 <_ZN12States_Class16StateStandbyAUTOEm+0x144>)
    3802:	4b41      	ldr	r3, [pc, #260]	; (3908 <_ZN12States_Class16StateStandbyAUTOEm+0x148>)
    3804:	4798      	blx	r3
    3806:	4603      	mov	r3, r0
    3808:	4940      	ldr	r1, [pc, #256]	; (390c <_ZN12States_Class16StateStandbyAUTOEm+0x14c>)
    380a:	4618      	mov	r0, r3
    380c:	4b40      	ldr	r3, [pc, #256]	; (3910 <_ZN12States_Class16StateStandbyAUTOEm+0x150>)
    380e:	4798      	blx	r3
	#endif




	listener.eventHandler=&States_Class::CheckEvents;
    3810:	4b40      	ldr	r3, [pc, #256]	; (3914 <_ZN12States_Class16StateStandbyAUTOEm+0x154>)
    3812:	4a41      	ldr	r2, [pc, #260]	; (3918 <_ZN12States_Class16StateStandbyAUTOEm+0x158>)
    3814:	615a      	str	r2, [r3, #20]
	while(!done){
    3816:	7ffb      	ldrb	r3, [r7, #31]
    3818:	2b00      	cmp	r3, #0
    381a:	d164      	bne.n	38e6 <_ZN12States_Class16StateStandbyAUTOEm+0x126>
		do
		{
				fv1.WriteSetpoint(GetFlapperValveSetpoint());
    381c:	687b      	ldr	r3, [r7, #4]
    381e:	681b      	ldr	r3, [r3, #0]
    3820:	3b10      	subs	r3, #16
    3822:	681b      	ldr	r3, [r3, #0]
    3824:	461a      	mov	r2, r3
    3826:	687b      	ldr	r3, [r7, #4]
    3828:	4413      	add	r3, r2
    382a:	4618      	mov	r0, r3
    382c:	4b3b      	ldr	r3, [pc, #236]	; (391c <_ZN12States_Class16StateStandbyAUTOEm+0x15c>)
    382e:	4798      	blx	r3
    3830:	4603      	mov	r3, r0
    3832:	4619      	mov	r1, r3
    3834:	483a      	ldr	r0, [pc, #232]	; (3920 <_ZN12States_Class16StateStandbyAUTOEm+0x160>)
    3836:	4b3b      	ldr	r3, [pc, #236]	; (3924 <_ZN12States_Class16StateStandbyAUTOEm+0x164>)
    3838:	4798      	blx	r3
		}while(IsNewFlapperValveSetpoint());
    383a:	687b      	ldr	r3, [r7, #4]
    383c:	681b      	ldr	r3, [r3, #0]
    383e:	3b10      	subs	r3, #16
    3840:	681b      	ldr	r3, [r3, #0]
    3842:	461a      	mov	r2, r3
    3844:	687b      	ldr	r3, [r7, #4]
    3846:	4413      	add	r3, r2
		do
    3848:	4618      	mov	r0, r3
    384a:	4b37      	ldr	r3, [pc, #220]	; (3928 <_ZN12States_Class16StateStandbyAUTOEm+0x168>)
    384c:	4798      	blx	r3
    384e:	4603      	mov	r3, r0
    3850:	2b00      	cmp	r3, #0
    3852:	d000      	beq.n	3856 <_ZN12States_Class16StateStandbyAUTOEm+0x96>
    3854:	e7e2      	b.n	381c <_ZN12States_Class16StateStandbyAUTOEm+0x5c>
	
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    3856:	f107 030c 	add.w	r3, r7, #12
    385a:	2208      	movs	r2, #8
    385c:	4619      	mov	r1, r3
    385e:	6878      	ldr	r0, [r7, #4]
    3860:	4b32      	ldr	r3, [pc, #200]	; (392c <_ZN12States_Class16StateStandbyAUTOEm+0x16c>)
    3862:	4798      	blx	r3
    3864:	4603      	mov	r3, r0
    3866:	2b00      	cmp	r3, #0
    3868:	d03a      	beq.n	38e0 <_ZN12States_Class16StateStandbyAUTOEm+0x120>
		{
			switch(e.eventClass){
    386a:	89bb      	ldrh	r3, [r7, #12]
    386c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3870:	d006      	beq.n	3880 <_ZN12States_Class16StateStandbyAUTOEm+0xc0>
    3872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3876:	d025      	beq.n	38c4 <_ZN12States_Class16StateStandbyAUTOEm+0x104>
    3878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    387c:	d011      	beq.n	38a2 <_ZN12States_Class16StateStandbyAUTOEm+0xe2>
						break;
					}
				
				break;
				default:
				break;
    387e:	e031      	b.n	38e4 <_ZN12States_Class16StateStandbyAUTOEm+0x124>
					switch (e.eventType){
    3880:	89fb      	ldrh	r3, [r7, #14]
    3882:	2b03      	cmp	r3, #3
    3884:	d000      	beq.n	3888 <_ZN12States_Class16StateStandbyAUTOEm+0xc8>
						break;
    3886:	e00b      	b.n	38a0 <_ZN12States_Class16StateStandbyAUTOEm+0xe0>
							saveCurrentState();
    3888:	6878      	ldr	r0, [r7, #4]
    388a:	4b29      	ldr	r3, [pc, #164]	; (3930 <_ZN12States_Class16StateStandbyAUTOEm+0x170>)
    388c:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateLeaving);
    388e:	2200      	movs	r2, #0
    3890:	f240 1143 	movw	r1, #323	; 0x143
    3894:	6878      	ldr	r0, [r7, #4]
    3896:	4b27      	ldr	r3, [pc, #156]	; (3934 <_ZN12States_Class16StateStandbyAUTOEm+0x174>)
    3898:	4798      	blx	r3
							done=true;
    389a:	2301      	movs	r3, #1
    389c:	77fb      	strb	r3, [r7, #31]
						break;
    389e:	bf00      	nop
				break;
    38a0:	e020      	b.n	38e4 <_ZN12States_Class16StateStandbyAUTOEm+0x124>
					switch (e.eventType){
    38a2:	89fb      	ldrh	r3, [r7, #14]
    38a4:	2b03      	cmp	r3, #3
    38a6:	d000      	beq.n	38aa <_ZN12States_Class16StateStandbyAUTOEm+0xea>
						break;
    38a8:	e00b      	b.n	38c2 <_ZN12States_Class16StateStandbyAUTOEm+0x102>
							saveCurrentState();
    38aa:	6878      	ldr	r0, [r7, #4]
    38ac:	4b20      	ldr	r3, [pc, #128]	; (3930 <_ZN12States_Class16StateStandbyAUTOEm+0x170>)
    38ae:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateLeaving);
    38b0:	2200      	movs	r2, #0
    38b2:	f240 1143 	movw	r1, #323	; 0x143
    38b6:	6878      	ldr	r0, [r7, #4]
    38b8:	4b1e      	ldr	r3, [pc, #120]	; (3934 <_ZN12States_Class16StateStandbyAUTOEm+0x174>)
    38ba:	4798      	blx	r3
							done=true;
    38bc:	2301      	movs	r3, #1
    38be:	77fb      	strb	r3, [r7, #31]
						break;
    38c0:	bf00      	nop
				break;
    38c2:	e00f      	b.n	38e4 <_ZN12States_Class16StateStandbyAUTOEm+0x124>
					switch (e.eventType){
    38c4:	89fb      	ldrh	r3, [r7, #14]
    38c6:	2b05      	cmp	r3, #5
    38c8:	d000      	beq.n	38cc <_ZN12States_Class16StateStandbyAUTOEm+0x10c>
						break;
    38ca:	e008      	b.n	38de <_ZN12States_Class16StateStandbyAUTOEm+0x11e>
							prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    38cc:	2200      	movs	r2, #0
    38ce:	f240 1133 	movw	r1, #307	; 0x133
    38d2:	6878      	ldr	r0, [r7, #4]
    38d4:	4b17      	ldr	r3, [pc, #92]	; (3934 <_ZN12States_Class16StateStandbyAUTOEm+0x174>)
    38d6:	4798      	blx	r3
							done=true;
    38d8:	2301      	movs	r3, #1
    38da:	77fb      	strb	r3, [r7, #31]
						break;
    38dc:	bf00      	nop
				break;
    38de:	e001      	b.n	38e4 <_ZN12States_Class16StateStandbyAUTOEm+0x124>
			
			
		}
		else
		{
			done=false;
    38e0:	2300      	movs	r3, #0
    38e2:	77fb      	strb	r3, [r7, #31]
	while(!done){
    38e4:	e797      	b.n	3816 <_ZN12States_Class16StateStandbyAUTOEm+0x56>
		}
	}

	prepareStateChangeEvent(kHVACStateLeaving);
    38e6:	2200      	movs	r2, #0
    38e8:	f240 1143 	movw	r1, #323	; 0x143
    38ec:	6878      	ldr	r0, [r7, #4]
    38ee:	4b11      	ldr	r3, [pc, #68]	; (3934 <_ZN12States_Class16StateStandbyAUTOEm+0x174>)
    38f0:	4798      	blx	r3

}
    38f2:	bf00      	nop
    38f4:	3720      	adds	r7, #32
    38f6:	46bd      	mov	sp, r7
    38f8:	bd80      	pop	{r7, pc}
    38fa:	bf00      	nop
    38fc:	000003c5 	.word	0x000003c5
    3900:	00021818 	.word	0x00021818
    3904:	2000a140 	.word	0x2000a140
    3908:	000021d9 	.word	0x000021d9
    390c:	00021784 	.word	0x00021784
    3910:	00000c89 	.word	0x00000c89
    3914:	20009850 	.word	0x20009850
    3918:	0000419d 	.word	0x0000419d
    391c:	00001ae5 	.word	0x00001ae5
    3920:	200098e8 	.word	0x200098e8
    3924:	00015011 	.word	0x00015011
    3928:	00001afd 	.word	0x00001afd
    392c:	00003e0d 	.word	0x00003e0d
    3930:	00003eb9 	.word	0x00003eb9
    3934:	00003e45 	.word	0x00003e45

00003938 <_ZN12States_Class16StateStandbyVENTEm>:

void States_Class::StateStandbyVENT(uint32 flags)
{
    3938:	b580      	push	{r7, lr}
    393a:	b08a      	sub	sp, #40	; 0x28
    393c:	af00      	add	r7, sp, #0
    393e:	6078      	str	r0, [r7, #4]
    3940:	6039      	str	r1, [r7, #0]
	event	e;
    3942:	f107 030c 	add.w	r3, r7, #12
    3946:	4618      	mov	r0, r3
    3948:	4b48      	ldr	r3, [pc, #288]	; (3a6c <_ZN12States_Class16StateStandbyVENTEm+0x134>)
    394a:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyVENT;
    394c:	687b      	ldr	r3, [r7, #4]
    394e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3952:	f44f 7298 	mov.w	r2, #304	; 0x130
    3956:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=VENT;
    3958:	687b      	ldr	r3, [r7, #4]
    395a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    395e:	2201      	movs	r2, #1
    3960:	771a      	strb	r2, [r3, #28]
	bool	done(false);
    3962:	2300      	movs	r3, #0
    3964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t	coolingRequired;

	
	#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    3968:	4941      	ldr	r1, [pc, #260]	; (3a70 <_ZN12States_Class16StateStandbyVENTEm+0x138>)
    396a:	4842      	ldr	r0, [pc, #264]	; (3a74 <_ZN12States_Class16StateStandbyVENTEm+0x13c>)
    396c:	4b42      	ldr	r3, [pc, #264]	; (3a78 <_ZN12States_Class16StateStandbyVENTEm+0x140>)
    396e:	4798      	blx	r3
    3970:	4603      	mov	r3, r0
    3972:	4942      	ldr	r1, [pc, #264]	; (3a7c <_ZN12States_Class16StateStandbyVENTEm+0x144>)
    3974:	4618      	mov	r0, r3
    3976:	4b42      	ldr	r3, [pc, #264]	; (3a80 <_ZN12States_Class16StateStandbyVENTEm+0x148>)
    3978:	4798      	blx	r3
	#endif




	listener.eventHandler=&States_Class::CheckEvents;
    397a:	4b42      	ldr	r3, [pc, #264]	; (3a84 <_ZN12States_Class16StateStandbyVENTEm+0x14c>)
    397c:	4a42      	ldr	r2, [pc, #264]	; (3a88 <_ZN12States_Class16StateStandbyVENTEm+0x150>)
    397e:	615a      	str	r2, [r3, #20]
	while(!done){
    3980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3984:	2b00      	cmp	r3, #0
    3986:	d166      	bne.n	3a56 <_ZN12States_Class16StateStandbyVENTEm+0x11e>
		cokspitTemperature=temperatures.values[0][1];
    3988:	4b40      	ldr	r3, [pc, #256]	; (3a8c <_ZN12States_Class16StateStandbyVENTEm+0x154>)
    398a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    398c:	623b      	str	r3, [r7, #32]
		coolingRequired=0x80+(uint8_t)(((uint32_t)((cokspitTemperature*10)-200))&0xff);
    398e:	4b40      	ldr	r3, [pc, #256]	; (3a90 <_ZN12States_Class16StateStandbyVENTEm+0x158>)
    3990:	4940      	ldr	r1, [pc, #256]	; (3a94 <_ZN12States_Class16StateStandbyVENTEm+0x15c>)
    3992:	6a38      	ldr	r0, [r7, #32]
    3994:	4798      	blx	r3
    3996:	4603      	mov	r3, r0
    3998:	461a      	mov	r2, r3
    399a:	4b3f      	ldr	r3, [pc, #252]	; (3a98 <_ZN12States_Class16StateStandbyVENTEm+0x160>)
    399c:	493f      	ldr	r1, [pc, #252]	; (3a9c <_ZN12States_Class16StateStandbyVENTEm+0x164>)
    399e:	4610      	mov	r0, r2
    39a0:	4798      	blx	r3
    39a2:	4603      	mov	r3, r0
    39a4:	461a      	mov	r2, r3
    39a6:	4b3e      	ldr	r3, [pc, #248]	; (3aa0 <_ZN12States_Class16StateStandbyVENTEm+0x168>)
    39a8:	4610      	mov	r0, r2
    39aa:	4798      	blx	r3
    39ac:	4603      	mov	r3, r0
    39ae:	b2db      	uxtb	r3, r3
    39b0:	3b80      	subs	r3, #128	; 0x80
    39b2:	77fb      	strb	r3, [r7, #31]
		fv1.WriteSetpoint(coolingRequired);
    39b4:	7ffb      	ldrb	r3, [r7, #31]
    39b6:	4619      	mov	r1, r3
    39b8:	483a      	ldr	r0, [pc, #232]	; (3aa4 <_ZN12States_Class16StateStandbyVENTEm+0x16c>)
    39ba:	4b3b      	ldr	r3, [pc, #236]	; (3aa8 <_ZN12States_Class16StateStandbyVENTEm+0x170>)
    39bc:	4798      	blx	r3
		
		
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    39be:	f107 030c 	add.w	r3, r7, #12
    39c2:	2208      	movs	r2, #8
    39c4:	4619      	mov	r1, r3
    39c6:	6878      	ldr	r0, [r7, #4]
    39c8:	4b38      	ldr	r3, [pc, #224]	; (3aac <_ZN12States_Class16StateStandbyVENTEm+0x174>)
    39ca:	4798      	blx	r3
    39cc:	4603      	mov	r3, r0
    39ce:	2b00      	cmp	r3, #0
    39d0:	d03d      	beq.n	3a4e <_ZN12States_Class16StateStandbyVENTEm+0x116>
		{
			switch(e.eventClass){
    39d2:	89bb      	ldrh	r3, [r7, #12]
    39d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    39d8:	d006      	beq.n	39e8 <_ZN12States_Class16StateStandbyVENTEm+0xb0>
    39da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    39de:	d027      	beq.n	3a30 <_ZN12States_Class16StateStandbyVENTEm+0xf8>
    39e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    39e4:	d012      	beq.n	3a0c <_ZN12States_Class16StateStandbyVENTEm+0xd4>
					break;
				}
				
				break;
				default:
				break;
    39e6:	e035      	b.n	3a54 <_ZN12States_Class16StateStandbyVENTEm+0x11c>
				switch (e.eventType){
    39e8:	89fb      	ldrh	r3, [r7, #14]
    39ea:	2b03      	cmp	r3, #3
    39ec:	d000      	beq.n	39f0 <_ZN12States_Class16StateStandbyVENTEm+0xb8>
					break;
    39ee:	e00c      	b.n	3a0a <_ZN12States_Class16StateStandbyVENTEm+0xd2>
					saveCurrentState();
    39f0:	6878      	ldr	r0, [r7, #4]
    39f2:	4b2f      	ldr	r3, [pc, #188]	; (3ab0 <_ZN12States_Class16StateStandbyVENTEm+0x178>)
    39f4:	4798      	blx	r3
					prepareStateChangeEvent(kHVACStateLeaving);
    39f6:	2200      	movs	r2, #0
    39f8:	f240 1143 	movw	r1, #323	; 0x143
    39fc:	6878      	ldr	r0, [r7, #4]
    39fe:	4b2d      	ldr	r3, [pc, #180]	; (3ab4 <_ZN12States_Class16StateStandbyVENTEm+0x17c>)
    3a00:	4798      	blx	r3
					done=true;
    3a02:	2301      	movs	r3, #1
    3a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    3a08:	bf00      	nop
				break;
    3a0a:	e023      	b.n	3a54 <_ZN12States_Class16StateStandbyVENTEm+0x11c>
				switch (e.eventType){
    3a0c:	89fb      	ldrh	r3, [r7, #14]
    3a0e:	2b03      	cmp	r3, #3
    3a10:	d000      	beq.n	3a14 <_ZN12States_Class16StateStandbyVENTEm+0xdc>
					break;
    3a12:	e00c      	b.n	3a2e <_ZN12States_Class16StateStandbyVENTEm+0xf6>
					saveCurrentState();
    3a14:	6878      	ldr	r0, [r7, #4]
    3a16:	4b26      	ldr	r3, [pc, #152]	; (3ab0 <_ZN12States_Class16StateStandbyVENTEm+0x178>)
    3a18:	4798      	blx	r3
					prepareStateChangeEvent(kHVACStateLeaving);
    3a1a:	2200      	movs	r2, #0
    3a1c:	f240 1143 	movw	r1, #323	; 0x143
    3a20:	6878      	ldr	r0, [r7, #4]
    3a22:	4b24      	ldr	r3, [pc, #144]	; (3ab4 <_ZN12States_Class16StateStandbyVENTEm+0x17c>)
    3a24:	4798      	blx	r3
					done=true;
    3a26:	2301      	movs	r3, #1
    3a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    3a2c:	bf00      	nop
				break;
    3a2e:	e011      	b.n	3a54 <_ZN12States_Class16StateStandbyVENTEm+0x11c>
				switch (e.eventType){
    3a30:	89fb      	ldrh	r3, [r7, #14]
    3a32:	2b05      	cmp	r3, #5
    3a34:	d000      	beq.n	3a38 <_ZN12States_Class16StateStandbyVENTEm+0x100>
					break;
    3a36:	e009      	b.n	3a4c <_ZN12States_Class16StateStandbyVENTEm+0x114>
					prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3a38:	2200      	movs	r2, #0
    3a3a:	f240 1133 	movw	r1, #307	; 0x133
    3a3e:	6878      	ldr	r0, [r7, #4]
    3a40:	4b1c      	ldr	r3, [pc, #112]	; (3ab4 <_ZN12States_Class16StateStandbyVENTEm+0x17c>)
    3a42:	4798      	blx	r3
					done=true;
    3a44:	2301      	movs	r3, #1
    3a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    3a4a:	bf00      	nop
				break;
    3a4c:	e002      	b.n	3a54 <_ZN12States_Class16StateStandbyVENTEm+0x11c>
			
			
		}
		else
		{
			done=false;
    3a4e:	2300      	movs	r3, #0
    3a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(!done){
    3a54:	e794      	b.n	3980 <_ZN12States_Class16StateStandbyVENTEm+0x48>
		}
	}

	prepareStateChangeEvent(kHVACStateLeaving);
    3a56:	2200      	movs	r2, #0
    3a58:	f240 1143 	movw	r1, #323	; 0x143
    3a5c:	6878      	ldr	r0, [r7, #4]
    3a5e:	4b15      	ldr	r3, [pc, #84]	; (3ab4 <_ZN12States_Class16StateStandbyVENTEm+0x17c>)
    3a60:	4798      	blx	r3

}
    3a62:	bf00      	nop
    3a64:	3728      	adds	r7, #40	; 0x28
    3a66:	46bd      	mov	sp, r7
    3a68:	bd80      	pop	{r7, pc}
    3a6a:	bf00      	nop
    3a6c:	000003c5 	.word	0x000003c5
    3a70:	00021818 	.word	0x00021818
    3a74:	2000a140 	.word	0x2000a140
    3a78:	000021d9 	.word	0x000021d9
    3a7c:	00021784 	.word	0x00021784
    3a80:	00000c89 	.word	0x00000c89
    3a84:	20009850 	.word	0x20009850
    3a88:	0000419d 	.word	0x0000419d
    3a8c:	20009a5c 	.word	0x20009a5c
    3a90:	0001c9b9 	.word	0x0001c9b9
    3a94:	41200000 	.word	0x41200000
    3a98:	0001c7a5 	.word	0x0001c7a5
    3a9c:	43480000 	.word	0x43480000
    3aa0:	0001cd45 	.word	0x0001cd45
    3aa4:	200098e8 	.word	0x200098e8
    3aa8:	00015011 	.word	0x00015011
    3aac:	00003e0d 	.word	0x00003e0d
    3ab0:	00003eb9 	.word	0x00003eb9
    3ab4:	00003e45 	.word	0x00003e45

00003ab8 <_ZN12States_Class21StatePrepareStandbyONEm>:

void States_Class::StatePrepareStandbyON(uint32 flags)
	{
    3ab8:	b580      	push	{r7, lr}
    3aba:	b082      	sub	sp, #8
    3abc:	af00      	add	r7, sp, #0
    3abe:	6078      	str	r0, [r7, #4]
    3ac0:	6039      	str	r1, [r7, #0]
	hvacState->lastState=hvacState->currentState;
    3ac2:	687b      	ldr	r3, [r7, #4]
    3ac4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3ac8:	687a      	ldr	r2, [r7, #4]
    3aca:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    3ace:	6a52      	ldr	r2, [r2, #36]	; 0x24
    3ad0:	621a      	str	r2, [r3, #32]
	hvacState->currentState=kHVACStatePrepareStandbyON;
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3ad8:	f44f 729a 	mov.w	r2, #308	; 0x134
    3adc:	625a      	str	r2, [r3, #36]	; 0x24
	//usb << "handleStatePrepareStandbyON" << NEWLINE;
		
#endif

	//tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
		switch (commando270.statusArinc)
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	681b      	ldr	r3, [r3, #0]
    3ae2:	3b10      	subs	r3, #16
    3ae4:	681b      	ldr	r3, [r3, #0]
    3ae6:	461a      	mov	r2, r3
    3ae8:	687b      	ldr	r3, [r7, #4]
    3aea:	4413      	add	r3, r2
    3aec:	791b      	ldrb	r3, [r3, #4]
    3aee:	2b01      	cmp	r3, #1
    3af0:	d00a      	beq.n	3b08 <_ZN12States_Class21StatePrepareStandbyONEm+0x50>
    3af2:	2b02      	cmp	r3, #2
    3af4:	d00f      	beq.n	3b16 <_ZN12States_Class21StatePrepareStandbyONEm+0x5e>
    3af6:	2b00      	cmp	r3, #0
    3af8:	d114      	bne.n	3b24 <_ZN12States_Class21StatePrepareStandbyONEm+0x6c>
		{
			case OFF:
				prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3afa:	2200      	movs	r2, #0
    3afc:	f240 1133 	movw	r1, #307	; 0x133
    3b00:	6878      	ldr	r0, [r7, #4]
    3b02:	4b0e      	ldr	r3, [pc, #56]	; (3b3c <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3b04:	4798      	blx	r3
			/* Your code here */
			break;
    3b06:	e014      	b.n	3b32 <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			case VENT:
				prepareStateChangeEvent(kHVACStateStandbyVENT);
    3b08:	2200      	movs	r2, #0
    3b0a:	f44f 7198 	mov.w	r1, #304	; 0x130
    3b0e:	6878      	ldr	r0, [r7, #4]
    3b10:	4b0a      	ldr	r3, [pc, #40]	; (3b3c <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3b12:	4798      	blx	r3
			/* Your code here */
			break;
    3b14:	e00d      	b.n	3b32 <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			case AUTO :
				prepareStateChangeEvent(kHVACStateStandbyAUTO);
    3b16:	2200      	movs	r2, #0
    3b18:	f240 1131 	movw	r1, #305	; 0x131
    3b1c:	6878      	ldr	r0, [r7, #4]
    3b1e:	4b07      	ldr	r3, [pc, #28]	; (3b3c <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3b20:	4798      	blx	r3
			/* Your code here */
			break;
    3b22:	e006      	b.n	3b32 <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			default:
				prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3b24:	2200      	movs	r2, #0
    3b26:	f240 1133 	movw	r1, #307	; 0x133
    3b2a:	6878      	ldr	r0, [r7, #4]
    3b2c:	4b03      	ldr	r3, [pc, #12]	; (3b3c <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3b2e:	4798      	blx	r3
			/* Your code here */
			break;
    3b30:	bf00      	nop
		}
	


	}
    3b32:	bf00      	nop
    3b34:	3708      	adds	r7, #8
    3b36:	46bd      	mov	sp, r7
    3b38:	bd80      	pop	{r7, pc}
    3b3a:	bf00      	nop
    3b3c:	00003e45 	.word	0x00003e45

00003b40 <_ZN12States_Class22StatePrepareStandbyOFFEm>:
	
void States_Class::StatePrepareStandbyOFF(uint32 flags)
{
    3b40:	b580      	push	{r7, lr}
    3b42:	b082      	sub	sp, #8
    3b44:	af00      	add	r7, sp, #0
    3b46:	6078      	str	r0, [r7, #4]
    3b48:	6039      	str	r1, [r7, #0]
	
	hvacState->currentState=kHVACStatePrepareStandbyOFF;
    3b4a:	687b      	ldr	r3, [r7, #4]
    3b4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3b50:	f240 1233 	movw	r2, #307	; 0x133
    3b54:	625a      	str	r2, [r3, #36]	; 0x24
	//usb << "handleStatePrepareStandbyON" << NEWLINE;
	
	#endif

	//tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
	switch (hvacState->lastState)
    3b56:	687b      	ldr	r3, [r7, #4]
    3b58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3b5c:	6a1b      	ldr	r3, [r3, #32]
    3b5e:	f240 1231 	movw	r2, #305	; 0x131
    3b62:	4293      	cmp	r3, r2
    3b64:	d00a      	beq.n	3b7c <_ZN12States_Class22StatePrepareStandbyOFFEm+0x3c>
    3b66:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    3b6a:	d00b      	beq.n	3b84 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x44>
    3b6c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
    3b70:	d000      	beq.n	3b74 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x34>
		/* Your code here */
		break;
		default:
	
		/* Your code here */
		break;
    3b72:	e008      	b.n	3b86 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x46>
			fv1.SetVentilatePosition();
    3b74:	4809      	ldr	r0, [pc, #36]	; (3b9c <_ZN12States_Class22StatePrepareStandbyOFFEm+0x5c>)
    3b76:	4b0a      	ldr	r3, [pc, #40]	; (3ba0 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x60>)
    3b78:	4798      	blx	r3
		break;
    3b7a:	e004      	b.n	3b86 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x46>
			fv1.SetOffsetPosition();
    3b7c:	4807      	ldr	r0, [pc, #28]	; (3b9c <_ZN12States_Class22StatePrepareStandbyOFFEm+0x5c>)
    3b7e:	4b09      	ldr	r3, [pc, #36]	; (3ba4 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x64>)
    3b80:	4798      	blx	r3
		break;
    3b82:	e000      	b.n	3b86 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x46>
		break;
    3b84:	bf00      	nop
	}
	prepareStateChangeEvent(kHVACStateStandbyOFF);
    3b86:	2200      	movs	r2, #0
    3b88:	f44f 7199 	mov.w	r1, #306	; 0x132
    3b8c:	6878      	ldr	r0, [r7, #4]
    3b8e:	4b06      	ldr	r3, [pc, #24]	; (3ba8 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x68>)
    3b90:	4798      	blx	r3


}
    3b92:	bf00      	nop
    3b94:	3708      	adds	r7, #8
    3b96:	46bd      	mov	sp, r7
    3b98:	bd80      	pop	{r7, pc}
    3b9a:	bf00      	nop
    3b9c:	200098e8 	.word	0x200098e8
    3ba0:	00015121 	.word	0x00015121
    3ba4:	00015049 	.word	0x00015049
    3ba8:	00003e45 	.word	0x00003e45

00003bac <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    3bac:	b580      	push	{r7, lr}
    3bae:	b088      	sub	sp, #32
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	6078      	str	r0, [r7, #4]
    3bb4:	6039      	str	r1, [r7, #0]
	event	e;
    3bb6:	f107 030c 	add.w	r3, r7, #12
    3bba:	4618      	mov	r0, r3
    3bbc:	4b15      	ldr	r3, [pc, #84]	; (3c14 <_ZN12States_Class20handleStateStandbyONEm+0x68>)
    3bbe:	4798      	blx	r3
	bool	done(false);
    3bc0:	2300      	movs	r3, #0
    3bc2:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	hvacState->latchClosedConfirmPending = false;
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3bca:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
    3bce:	f36f 1345 	bfc	r3, #5, #1
    3bd2:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    hvacState->remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    3bd6:	687b      	ldr	r3, [r7, #4]
    3bd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3bdc:	687a      	ldr	r2, [r7, #4]
    3bde:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    3be2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3be6:	fb01 f202 	mul.w	r2, r1, r2
    3bea:	645a      	str	r2, [r3, #68]	; 0x44

	
	hvacState->reedRelayOpen = false;
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3bf2:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
    3bf6:	f36f 1304 	bfc	r3, #4, #1
    3bfa:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
	
	listener.SendEventSelf(e);
    3bfe:	f107 030c 	add.w	r3, r7, #12
    3c02:	4619      	mov	r1, r3
    3c04:	4804      	ldr	r0, [pc, #16]	; (3c18 <_ZN12States_Class20handleStateStandbyONEm+0x6c>)
    3c06:	4b05      	ldr	r3, [pc, #20]	; (3c1c <_ZN12States_Class20handleStateStandbyONEm+0x70>)
    3c08:	4798      	blx	r3
	}
    3c0a:	bf00      	nop
    3c0c:	3720      	adds	r7, #32
    3c0e:	46bd      	mov	sp, r7
    3c10:	bd80      	pop	{r7, pc}
    3c12:	bf00      	nop
    3c14:	000003c5 	.word	0x000003c5
    3c18:	20009850 	.word	0x20009850
    3c1c:	00014c55 	.word	0x00014c55

00003c20 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    3c20:	b580      	push	{r7, lr}
    3c22:	b088      	sub	sp, #32
    3c24:	af00      	add	r7, sp, #0
    3c26:	6078      	str	r0, [r7, #4]
    3c28:	6039      	str	r1, [r7, #0]
	event	e;
    3c2a:	f107 030c 	add.w	r3, r7, #12
    3c2e:	4618      	mov	r0, r3
    3c30:	4b06      	ldr	r3, [pc, #24]	; (3c4c <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    3c32:	4798      	blx	r3
	bool	done(false);
    3c34:	2300      	movs	r3, #0
    3c36:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    3c38:	f107 030c 	add.w	r3, r7, #12
    3c3c:	4619      	mov	r1, r3
    3c3e:	4804      	ldr	r0, [pc, #16]	; (3c50 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    3c40:	4b04      	ldr	r3, [pc, #16]	; (3c54 <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    3c42:	4798      	blx	r3
	}
    3c44:	bf00      	nop
    3c46:	3720      	adds	r7, #32
    3c48:	46bd      	mov	sp, r7
    3c4a:	bd80      	pop	{r7, pc}
    3c4c:	000003c5 	.word	0x000003c5
    3c50:	20009850 	.word	0x20009850
    3c54:	00014c55 	.word	0x00014c55

00003c58 <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    3c58:	b580      	push	{r7, lr}
    3c5a:	b088      	sub	sp, #32
    3c5c:	af00      	add	r7, sp, #0
    3c5e:	6078      	str	r0, [r7, #4]
    3c60:	6039      	str	r1, [r7, #0]
	event	e;
    3c62:	f107 030c 	add.w	r3, r7, #12
    3c66:	4618      	mov	r0, r3
    3c68:	4b0b      	ldr	r3, [pc, #44]	; (3c98 <_ZN12States_Class13handleStateONEm+0x40>)
    3c6a:	4798      	blx	r3
	bool	done(false);
    3c6c:	2300      	movs	r3, #0
    3c6e:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    3c70:	2301      	movs	r3, #1
    3c72:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    3c74:	2301      	movs	r3, #1
    3c76:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    3c78:	683b      	ldr	r3, [r7, #0]
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	bf14      	ite	ne
    3c7e:	2301      	movne	r3, #1
    3c80:	2300      	moveq	r3, #0
    3c82:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    3c84:	f107 030c 	add.w	r3, r7, #12
    3c88:	4619      	mov	r1, r3
    3c8a:	4804      	ldr	r0, [pc, #16]	; (3c9c <_ZN12States_Class13handleStateONEm+0x44>)
    3c8c:	4b04      	ldr	r3, [pc, #16]	; (3ca0 <_ZN12States_Class13handleStateONEm+0x48>)
    3c8e:	4798      	blx	r3
	}
    3c90:	bf00      	nop
    3c92:	3720      	adds	r7, #32
    3c94:	46bd      	mov	sp, r7
    3c96:	bd80      	pop	{r7, pc}
    3c98:	000003c5 	.word	0x000003c5
    3c9c:	20009850 	.word	0x20009850
    3ca0:	00014c55 	.word	0x00014c55

00003ca4 <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    3ca4:	b580      	push	{r7, lr}
    3ca6:	b088      	sub	sp, #32
    3ca8:	af00      	add	r7, sp, #0
    3caa:	6078      	str	r0, [r7, #4]
    3cac:	6039      	str	r1, [r7, #0]
	event	e;
    3cae:	f107 030c 	add.w	r3, r7, #12
    3cb2:	4618      	mov	r0, r3
    3cb4:	4b06      	ldr	r3, [pc, #24]	; (3cd0 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    3cb6:	4798      	blx	r3
	bool	done(false);
    3cb8:	2300      	movs	r3, #0
    3cba:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3cbc:	f107 030c 	add.w	r3, r7, #12
    3cc0:	4619      	mov	r1, r3
    3cc2:	4804      	ldr	r0, [pc, #16]	; (3cd4 <_ZN12States_Class19handleStateFinishedEm+0x30>)
    3cc4:	4b04      	ldr	r3, [pc, #16]	; (3cd8 <_ZN12States_Class19handleStateFinishedEm+0x34>)
    3cc6:	4798      	blx	r3
	}
    3cc8:	bf00      	nop
    3cca:	3720      	adds	r7, #32
    3ccc:	46bd      	mov	sp, r7
    3cce:	bd80      	pop	{r7, pc}
    3cd0:	000003c5 	.word	0x000003c5
    3cd4:	20009850 	.word	0x20009850
    3cd8:	00014c55 	.word	0x00014c55

00003cdc <_ZN12States_Class12StateLeavingEm>:
void States_Class::StateLeaving(uint32 flags)
{
    3cdc:	b580      	push	{r7, lr}
    3cde:	b086      	sub	sp, #24
    3ce0:	af00      	add	r7, sp, #0
    3ce2:	6078      	str	r0, [r7, #4]
    3ce4:	6039      	str	r1, [r7, #0]
	event	e;
    3ce6:	f107 0308 	add.w	r3, r7, #8
    3cea:	4618      	mov	r0, r3
    3cec:	4b0b      	ldr	r3, [pc, #44]	; (3d1c <_ZN12States_Class12StateLeavingEm+0x40>)
    3cee:	4798      	blx	r3
	hvacState->lastState=hvacState->callingState;
    3cf0:	687b      	ldr	r3, [r7, #4]
    3cf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3cf6:	687a      	ldr	r2, [r7, #4]
    3cf8:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    3cfc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3cfe:	621a      	str	r2, [r3, #32]
	hvacState->currentState=kHVACStateLeaving;
    3d00:	687b      	ldr	r3, [r7, #4]
    3d02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3d06:	f240 1243 	movw	r2, #323	; 0x143
    3d0a:	625a      	str	r2, [r3, #36]	; 0x24
	
	saveCurrentState();
    3d0c:	6878      	ldr	r0, [r7, #4]
    3d0e:	4b04      	ldr	r3, [pc, #16]	; (3d20 <_ZN12States_Class12StateLeavingEm+0x44>)
    3d10:	4798      	blx	r3
	//prepareStateChangeEvent(kHVACStateLeaving,(uint16)hvacState->lastState);
	//bool	done(false);
	//listener.SendEventSelf(e);
}
    3d12:	bf00      	nop
    3d14:	3718      	adds	r7, #24
    3d16:	46bd      	mov	sp, r7
    3d18:	bd80      	pop	{r7, pc}
    3d1a:	bf00      	nop
    3d1c:	000003c5 	.word	0x000003c5
    3d20:	00003eb9 	.word	0x00003eb9

00003d24 <_ZN12States_Class19StateStoppedProcessEm>:

void States_Class::StateStoppedProcess(uint32 flags)
	{
    3d24:	b580      	push	{r7, lr}
    3d26:	b088      	sub	sp, #32
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
    3d2c:	6039      	str	r1, [r7, #0]
	event	e;
    3d2e:	f107 030c 	add.w	r3, r7, #12
    3d32:	4618      	mov	r0, r3
    3d34:	4b08      	ldr	r3, [pc, #32]	; (3d58 <_ZN12States_Class19StateStoppedProcessEm+0x34>)
    3d36:	4798      	blx	r3
 	bool	done(false);
    3d38:	2300      	movs	r3, #0
    3d3a:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    3d3c:	2301      	movs	r3, #1
    3d3e:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    3d40:	683b      	ldr	r3, [r7, #0]
    3d42:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    3d44:	f107 030c 	add.w	r3, r7, #12
    3d48:	4619      	mov	r1, r3
    3d4a:	4804      	ldr	r0, [pc, #16]	; (3d5c <_ZN12States_Class19StateStoppedProcessEm+0x38>)
    3d4c:	4b04      	ldr	r3, [pc, #16]	; (3d60 <_ZN12States_Class19StateStoppedProcessEm+0x3c>)
    3d4e:	4798      	blx	r3
	}
    3d50:	bf00      	nop
    3d52:	3720      	adds	r7, #32
    3d54:	46bd      	mov	sp, r7
    3d56:	bd80      	pop	{r7, pc}
    3d58:	000003c5 	.word	0x000003c5
    3d5c:	20009850 	.word	0x20009850
    3d60:	00014c55 	.word	0x00014c55

00003d64 <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    3d64:	b580      	push	{r7, lr}
    3d66:	b088      	sub	sp, #32
    3d68:	af00      	add	r7, sp, #0
    3d6a:	6078      	str	r0, [r7, #4]
    3d6c:	6039      	str	r1, [r7, #0]
	event	e;
    3d6e:	f107 030c 	add.w	r3, r7, #12
    3d72:	4618      	mov	r0, r3
    3d74:	4b06      	ldr	r3, [pc, #24]	; (3d90 <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    3d76:	4798      	blx	r3
	bool	done(false);
    3d78:	2300      	movs	r3, #0
    3d7a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3d7c:	f107 030c 	add.w	r3, r7, #12
    3d80:	4619      	mov	r1, r3
    3d82:	4804      	ldr	r0, [pc, #16]	; (3d94 <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    3d84:	4b04      	ldr	r3, [pc, #16]	; (3d98 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    3d86:	4798      	blx	r3
	}
    3d88:	bf00      	nop
    3d8a:	3720      	adds	r7, #32
    3d8c:	46bd      	mov	sp, r7
    3d8e:	bd80      	pop	{r7, pc}
    3d90:	000003c5 	.word	0x000003c5
    3d94:	20009850 	.word	0x20009850
    3d98:	00014c55 	.word	0x00014c55

00003d9c <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    3d9c:	b580      	push	{r7, lr}
    3d9e:	b088      	sub	sp, #32
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
    3da4:	6039      	str	r1, [r7, #0]
	event	e;
    3da6:	f107 030c 	add.w	r3, r7, #12
    3daa:	4618      	mov	r0, r3
    3dac:	4b06      	ldr	r3, [pc, #24]	; (3dc8 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    3dae:	4798      	blx	r3
	bool	done(false);
    3db0:	2300      	movs	r3, #0
    3db2:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3db4:	f107 030c 	add.w	r3, r7, #12
    3db8:	4619      	mov	r1, r3
    3dba:	4804      	ldr	r0, [pc, #16]	; (3dcc <_ZN12States_Class16handleStateErrorEm+0x30>)
    3dbc:	4b04      	ldr	r3, [pc, #16]	; (3dd0 <_ZN12States_Class16handleStateErrorEm+0x34>)
    3dbe:	4798      	blx	r3
	}
    3dc0:	bf00      	nop
    3dc2:	3720      	adds	r7, #32
    3dc4:	46bd      	mov	sp, r7
    3dc6:	bd80      	pop	{r7, pc}
    3dc8:	000003c5 	.word	0x000003c5
    3dcc:	20009850 	.word	0x20009850
    3dd0:	00014c55 	.word	0x00014c55

00003dd4 <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	b088      	sub	sp, #32
    3dd8:	af00      	add	r7, sp, #0
    3dda:	6078      	str	r0, [r7, #4]
    3ddc:	6039      	str	r1, [r7, #0]
	event	e;
    3dde:	f107 030c 	add.w	r3, r7, #12
    3de2:	4618      	mov	r0, r3
    3de4:	4b06      	ldr	r3, [pc, #24]	; (3e00 <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    3de6:	4798      	blx	r3
	bool	done(false);
    3de8:	2300      	movs	r3, #0
    3dea:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3dec:	f107 030c 	add.w	r3, r7, #12
    3df0:	4619      	mov	r1, r3
    3df2:	4804      	ldr	r0, [pc, #16]	; (3e04 <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    3df4:	4b04      	ldr	r3, [pc, #16]	; (3e08 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    3df6:	4798      	blx	r3
	}
    3df8:	bf00      	nop
    3dfa:	3720      	adds	r7, #32
    3dfc:	46bd      	mov	sp, r7
    3dfe:	bd80      	pop	{r7, pc}
    3e00:	000003c5 	.word	0x000003c5
    3e04:	20009850 	.word	0x20009850
    3e08:	00014c55 	.word	0x00014c55

00003e0c <_ZN12States_Class12InStateEventER5eventl>:
	result=listener.WaitForEvent(e,kAnyEventClass,kAnyEventType,t);
	
	return result;
	}
	
bool States_Class::InStateEvent(event& e, tick_t t){
    3e0c:	b590      	push	{r4, r7, lr}
    3e0e:	b089      	sub	sp, #36	; 0x24
    3e10:	af02      	add	r7, sp, #8
    3e12:	60f8      	str	r0, [r7, #12]
    3e14:	60b9      	str	r1, [r7, #8]
    3e16:	607a      	str	r2, [r7, #4]

	bool result=listener.WaitForEvent(e,kAnyEventClass,kAnyEventType,t);
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	9300      	str	r3, [sp, #0]
    3e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3e24:	68b9      	ldr	r1, [r7, #8]
    3e26:	4805      	ldr	r0, [pc, #20]	; (3e3c <_ZN12States_Class12InStateEventER5eventl+0x30>)
    3e28:	4c05      	ldr	r4, [pc, #20]	; (3e40 <_ZN12States_Class12InStateEventER5eventl+0x34>)
    3e2a:	47a0      	blx	r4
    3e2c:	4603      	mov	r3, r0
    3e2e:	75fb      	strb	r3, [r7, #23]
	return result;
    3e30:	7dfb      	ldrb	r3, [r7, #23]

}
    3e32:	4618      	mov	r0, r3
    3e34:	371c      	adds	r7, #28
    3e36:	46bd      	mov	sp, r7
    3e38:	bd90      	pop	{r4, r7, pc}
    3e3a:	bf00      	nop
    3e3c:	20009850 	.word	0x20009850
    3e40:	00014a91 	.word	0x00014a91

00003e44 <_ZN12States_Class23prepareStateChangeEventEtt>:

void States_Class::prepareStateChangeEvent(uint16 newState, uint16 data)
	{
    3e44:	b580      	push	{r7, lr}
    3e46:	b086      	sub	sp, #24
    3e48:	af00      	add	r7, sp, #0
    3e4a:	6078      	str	r0, [r7, #4]
    3e4c:	460b      	mov	r3, r1
    3e4e:	807b      	strh	r3, [r7, #2]
    3e50:	4613      	mov	r3, r2
    3e52:	803b      	strh	r3, [r7, #0]
	event e;
    3e54:	f107 0308 	add.w	r3, r7, #8
    3e58:	4618      	mov	r0, r3
    3e5a:	4b0b      	ldr	r3, [pc, #44]	; (3e88 <_ZN12States_Class23prepareStateChangeEventEtt+0x44>)
    3e5c:	4798      	blx	r3
	e.eventClass =(EventClass)kHVACEventClass;
    3e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
    3e62:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kHVACSwitchStateEvent;
    3e64:	f44f 7300 	mov.w	r3, #512	; 0x200
    3e68:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
    3e6a:	887b      	ldrh	r3, [r7, #2]
    3e6c:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
    3e6e:	883b      	ldrh	r3, [r7, #0]
    3e70:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
    3e72:	f107 0308 	add.w	r3, r7, #8
    3e76:	4619      	mov	r1, r3
    3e78:	4804      	ldr	r0, [pc, #16]	; (3e8c <_ZN12States_Class23prepareStateChangeEventEtt+0x48>)
    3e7a:	4b05      	ldr	r3, [pc, #20]	; (3e90 <_ZN12States_Class23prepareStateChangeEventEtt+0x4c>)
    3e7c:	4798      	blx	r3
	}
    3e7e:	bf00      	nop
    3e80:	3718      	adds	r7, #24
    3e82:	46bd      	mov	sp, r7
    3e84:	bd80      	pop	{r7, pc}
    3e86:	bf00      	nop
    3e88:	000003c5 	.word	0x000003c5
    3e8c:	20009850 	.word	0x20009850
    3e90:	00014c55 	.word	0x00014c55

00003e94 <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    3e94:	b580      	push	{r7, lr}
    3e96:	b088      	sub	sp, #32
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
	event	e;
    3e9c:	f107 030c 	add.w	r3, r7, #12
    3ea0:	4618      	mov	r0, r3
    3ea2:	4b04      	ldr	r3, [pc, #16]	; (3eb4 <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    3ea4:	4798      	blx	r3
	uint16	selfTestResult(kHVACNoError);
    3ea6:	2300      	movs	r3, #0
    3ea8:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    3eaa:	8bfb      	ldrh	r3, [r7, #30]
	}
    3eac:	4618      	mov	r0, r3
    3eae:	3720      	adds	r7, #32
    3eb0:	46bd      	mov	sp, r7
    3eb2:	bd80      	pop	{r7, pc}
    3eb4:	000003c5 	.word	0x000003c5

00003eb8 <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    3eb8:	b590      	push	{r4, r7, lr}
    3eba:	b085      	sub	sp, #20
    3ebc:	af00      	add	r7, sp, #0
    3ebe:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    3ec0:	f107 0308 	add.w	r3, r7, #8
    3ec4:	4619      	mov	r1, r3
    3ec6:	4818      	ldr	r0, [pc, #96]	; (3f28 <_ZN12States_Class16saveCurrentStateEv+0x70>)
    3ec8:	4b18      	ldr	r3, [pc, #96]	; (3f2c <_ZN12States_Class16saveCurrentStateEv+0x74>)
    3eca:	4798      	blx	r3
		hvacState->dateTime=cdt;
    3ecc:	687b      	ldr	r3, [r7, #4]
    3ece:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3ed2:	3308      	adds	r3, #8
    3ed4:	f107 0208 	add.w	r2, r7, #8
    3ed8:	e892 0003 	ldmia.w	r2, {r0, r1}
    3edc:	e883 0003 	stmia.w	r3, {r0, r1}
		hvacState->now = calendar.convert_datetime_to_timestamp(&cdt);
    3ee0:	687b      	ldr	r3, [r7, #4]
    3ee2:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    3ee6:	f107 0308 	add.w	r3, r7, #8
    3eea:	4619      	mov	r1, r3
    3eec:	480e      	ldr	r0, [pc, #56]	; (3f28 <_ZN12States_Class16saveCurrentStateEv+0x70>)
    3eee:	4b10      	ldr	r3, [pc, #64]	; (3f30 <_ZN12States_Class16saveCurrentStateEv+0x78>)
    3ef0:	4798      	blx	r3
    3ef2:	4603      	mov	r3, r0
    3ef4:	6063      	str	r3, [r4, #4]
	if (hvacState->currentState!=kHVACStateMaintenance){
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3efe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    3f02:	d00d      	beq.n	3f20 <_ZN12States_Class16saveCurrentStateEv+0x68>
		memory.WriteFastCurrentState(staticCurrentState);
    3f04:	490b      	ldr	r1, [pc, #44]	; (3f34 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    3f06:	480c      	ldr	r0, [pc, #48]	; (3f38 <_ZN12States_Class16saveCurrentStateEv+0x80>)
    3f08:	4b0c      	ldr	r3, [pc, #48]	; (3f3c <_ZN12States_Class16saveCurrentStateEv+0x84>)
    3f0a:	4798      	blx	r3
		//memory.ReadFastApplicationState(lastState);
		if (hvacState->currentState==0)
    3f0c:	687b      	ldr	r3, [r7, #4]
    3f0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f14:	2b00      	cmp	r3, #0
    3f16:	d103      	bne.n	3f20 <_ZN12States_Class16saveCurrentStateEv+0x68>
		{
			memory.SaveApplicationState(staticCurrentState);
    3f18:	4906      	ldr	r1, [pc, #24]	; (3f34 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    3f1a:	4809      	ldr	r0, [pc, #36]	; (3f40 <_ZN12States_Class16saveCurrentStateEv+0x88>)
    3f1c:	4b09      	ldr	r3, [pc, #36]	; (3f44 <_ZN12States_Class16saveCurrentStateEv+0x8c>)
    3f1e:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    3f20:	bf00      	nop
    3f22:	3714      	adds	r7, #20
    3f24:	46bd      	mov	sp, r7
    3f26:	bd90      	pop	{r4, r7, pc}
    3f28:	20009ec0 	.word	0x20009ec0
    3f2c:	00016f69 	.word	0x00016f69
    3f30:	00017059 	.word	0x00017059
    3f34:	20007fcc 	.word	0x20007fcc
    3f38:	20002bd4 	.word	0x20002bd4
    3f3c:	00001889 	.word	0x00001889
    3f40:	20002564 	.word	0x20002564
    3f44:	000025c1 	.word	0x000025c1

00003f48 <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    3f48:	b580      	push	{r7, lr}
    3f4a:	b082      	sub	sp, #8
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]
    3f50:	460b      	mov	r3, r1
    3f52:	70fb      	strb	r3, [r7, #3]
		if (layer==0)
    3f54:	78fb      	ldrb	r3, [r7, #3]
    3f56:	2b00      	cmp	r3, #0
    3f58:	d10d      	bne.n	3f76 <_ZN12States_Class4StopEh+0x2e>
		{
			usb<<"Air Conditioning System Stopped"<<NEWLINE;
    3f5a:	4909      	ldr	r1, [pc, #36]	; (3f80 <_ZN12States_Class4StopEh+0x38>)
    3f5c:	4809      	ldr	r0, [pc, #36]	; (3f84 <_ZN12States_Class4StopEh+0x3c>)
    3f5e:	4b0a      	ldr	r3, [pc, #40]	; (3f88 <_ZN12States_Class4StopEh+0x40>)
    3f60:	4798      	blx	r3
    3f62:	4603      	mov	r3, r0
    3f64:	4909      	ldr	r1, [pc, #36]	; (3f8c <_ZN12States_Class4StopEh+0x44>)
    3f66:	4618      	mov	r0, r3
    3f68:	4b09      	ldr	r3, [pc, #36]	; (3f90 <_ZN12States_Class4StopEh+0x48>)
    3f6a:	4798      	blx	r3
			delay_ms(100);
    3f6c:	2064      	movs	r0, #100	; 0x64
    3f6e:	4b09      	ldr	r3, [pc, #36]	; (3f94 <_ZN12States_Class4StopEh+0x4c>)
    3f70:	4798      	blx	r3
			return layer;
    3f72:	78fb      	ldrb	r3, [r7, #3]
    3f74:	e000      	b.n	3f78 <_ZN12States_Class4StopEh+0x30>
		}
	return	layer;
    3f76:	78fb      	ldrb	r3, [r7, #3]
}
    3f78:	4618      	mov	r0, r3
    3f7a:	3708      	adds	r7, #8
    3f7c:	46bd      	mov	sp, r7
    3f7e:	bd80      	pop	{r7, pc}
    3f80:	00021830 	.word	0x00021830
    3f84:	2000a140 	.word	0x2000a140
    3f88:	0000429d 	.word	0x0000429d
    3f8c:	00021784 	.word	0x00021784
    3f90:	00000c89 	.word	0x00000c89
    3f94:	000064b1 	.word	0x000064b1

00003f98 <_ZN12States_Class15GetCurrentStateER9HVACState>:

void	States_Class::GetCurrentConfiguration(ConfigurationData *cd){
	cd=&configuration;
}
void	States_Class::GetCurrentState(HVACState& hs){
    3f98:	b580      	push	{r7, lr}
    3f9a:	b082      	sub	sp, #8
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
    3fa0:	6039      	str	r1, [r7, #0]
	hs=*hvacState;
    3fa2:	687b      	ldr	r3, [r7, #4]
    3fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3fa8:	683a      	ldr	r2, [r7, #0]
    3faa:	4610      	mov	r0, r2
    3fac:	4619      	mov	r1, r3
    3fae:	2368      	movs	r3, #104	; 0x68
    3fb0:	461a      	mov	r2, r3
    3fb2:	4b03      	ldr	r3, [pc, #12]	; (3fc0 <_ZN12States_Class15GetCurrentStateER9HVACState+0x28>)
    3fb4:	4798      	blx	r3
}
    3fb6:	bf00      	nop
    3fb8:	3708      	adds	r7, #8
    3fba:	46bd      	mov	sp, r7
    3fbc:	bd80      	pop	{r7, pc}
    3fbe:	bf00      	nop
    3fc0:	0001d37d 	.word	0x0001d37d

00003fc4 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    3fc4:	b580      	push	{r7, lr}
    3fc6:	b082      	sub	sp, #8
    3fc8:	af00      	add	r7, sp, #0
    3fca:	6078      	str	r0, [r7, #4]
    3fcc:	6039      	str	r1, [r7, #0]
	configuration=cd;
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	683a      	ldr	r2, [r7, #0]
    3fd2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
    3fd6:	4611      	mov	r1, r2
    3fd8:	22ac      	movs	r2, #172	; 0xac
    3fda:	4618      	mov	r0, r3
    3fdc:	4b02      	ldr	r3, [pc, #8]	; (3fe8 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x24>)
    3fde:	4798      	blx	r3
}
    3fe0:	bf00      	nop
    3fe2:	3708      	adds	r7, #8
    3fe4:	46bd      	mov	sp, r7
    3fe6:	bd80      	pop	{r7, pc}
    3fe8:	0001d37d 	.word	0x0001d37d

00003fec <_ZN12States_Class15SetCurrentStateER9HVACState>:
void	States_Class::SetCurrentState(HVACState& hs){
    3fec:	b580      	push	{r7, lr}
    3fee:	b082      	sub	sp, #8
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	6078      	str	r0, [r7, #4]
    3ff4:	6039      	str	r1, [r7, #0]
	staticCurrentState=hs;
    3ff6:	4a06      	ldr	r2, [pc, #24]	; (4010 <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    3ff8:	683b      	ldr	r3, [r7, #0]
    3ffa:	4610      	mov	r0, r2
    3ffc:	4619      	mov	r1, r3
    3ffe:	2368      	movs	r3, #104	; 0x68
    4000:	461a      	mov	r2, r3
    4002:	4b04      	ldr	r3, [pc, #16]	; (4014 <_ZN12States_Class15SetCurrentStateER9HVACState+0x28>)
    4004:	4798      	blx	r3
}
    4006:	bf00      	nop
    4008:	3708      	adds	r7, #8
    400a:	46bd      	mov	sp, r7
    400c:	bd80      	pop	{r7, pc}
    400e:	bf00      	nop
    4010:	20007fcc 	.word	0x20007fcc
    4014:	0001d37d 	.word	0x0001d37d

00004018 <_ZTv0_n12_N12States_Class15SetCurrentStateER9HVACState>:
    4018:	b580      	push	{r7, lr}
    401a:	b082      	sub	sp, #8
    401c:	af00      	add	r7, sp, #0
    401e:	6078      	str	r0, [r7, #4]
    4020:	6039      	str	r1, [r7, #0]
    4022:	687b      	ldr	r3, [r7, #4]
    4024:	681b      	ldr	r3, [r3, #0]
    4026:	3b0c      	subs	r3, #12
    4028:	681b      	ldr	r3, [r3, #0]
    402a:	461a      	mov	r2, r3
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	4413      	add	r3, r2
    4030:	6839      	ldr	r1, [r7, #0]
    4032:	4618      	mov	r0, r3
    4034:	4b02      	ldr	r3, [pc, #8]	; (4040 <_ZTv0_n12_N12States_Class15SetCurrentStateER9HVACState+0x28>)
    4036:	4798      	blx	r3
    4038:	3708      	adds	r7, #8
    403a:	46bd      	mov	sp, r7
    403c:	bd80      	pop	{r7, pc}
    403e:	bf00      	nop
    4040:	00003fed 	.word	0x00003fed

00004044 <_ZN12States_Class16SetCRCConfigDataEv>:
void	States_Class::SetCRCConfigData(void){
    4044:	b580      	push	{r7, lr}
    4046:	b082      	sub	sp, #8
    4048:	af00      	add	r7, sp, #0
    404a:	6078      	str	r0, [r7, #4]
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    404c:	22ac      	movs	r2, #172	; 0xac
    404e:	4906      	ldr	r1, [pc, #24]	; (4068 <_ZN12States_Class16SetCRCConfigDataEv+0x24>)
    4050:	4806      	ldr	r0, [pc, #24]	; (406c <_ZN12States_Class16SetCRCConfigDataEv+0x28>)
    4052:	4b07      	ldr	r3, [pc, #28]	; (4070 <_ZN12States_Class16SetCRCConfigDataEv+0x2c>)
    4054:	4798      	blx	r3
    4056:	4602      	mov	r2, r0
    4058:	687b      	ldr	r3, [r7, #4]
    405a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
    405e:	bf00      	nop
    4060:	3708      	adds	r7, #8
    4062:	46bd      	mov	sp, r7
    4064:	bd80      	pop	{r7, pc}
    4066:	bf00      	nop
    4068:	00021190 	.word	0x00021190
    406c:	20002a50 	.word	0x20002a50
    4070:	00001519 	.word	0x00001519

00004074 <_ZN12States_Class19ExecutePeriodicTaskEv>:
uint32_t	States_Class::GetStatus(HVACStatus& s){
	s=hvacState->hvacStatus;
	return	hvacState->hvacStatus.rawStatus;
}
void States_Class::ExecutePeriodicTask(void){
    4074:	b590      	push	{r4, r7, lr}
    4076:	b085      	sub	sp, #20
    4078:	af00      	add	r7, sp, #0
    407a:	6078      	str	r0, [r7, #4]
	if (IsCommando270Changed())
    407c:	687b      	ldr	r3, [r7, #4]
    407e:	681b      	ldr	r3, [r3, #0]
    4080:	3b10      	subs	r3, #16
    4082:	681b      	ldr	r3, [r3, #0]
    4084:	461a      	mov	r2, r3
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	4413      	add	r3, r2
    408a:	4618      	mov	r0, r3
    408c:	4b36      	ldr	r3, [pc, #216]	; (4168 <_ZN12States_Class19ExecutePeriodicTaskEv+0xf4>)
    408e:	4798      	blx	r3
    4090:	4603      	mov	r3, r0
    4092:	2b00      	cmp	r3, #0
    4094:	d035      	beq.n	4102 <_ZN12States_Class19ExecutePeriodicTaskEv+0x8e>
	{
		if (commando270.AC_CMD)
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	3b10      	subs	r3, #16
    409c:	681b      	ldr	r3, [r3, #0]
    409e:	461a      	mov	r2, r3
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	4413      	add	r3, r2
    40a4:	795b      	ldrb	r3, [r3, #5]
    40a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
    40aa:	b2db      	uxtb	r3, r3
    40ac:	2b00      	cmp	r3, #0
    40ae:	d014      	beq.n	40da <_ZN12States_Class19ExecutePeriodicTaskEv+0x66>
		{
			
			prepareStateChangeEvent(kHVACStatePrepareStandbyON);
    40b0:	2200      	movs	r2, #0
    40b2:	f44f 719a 	mov.w	r1, #308	; 0x134
    40b6:	6878      	ldr	r0, [r7, #4]
    40b8:	4b2c      	ldr	r3, [pc, #176]	; (416c <_ZN12States_Class19ExecutePeriodicTaskEv+0xf8>)
    40ba:	4798      	blx	r3
			listener.SendEventSelf(kInterfaceEventClass,k_AC_CMD_ENABLE_Event);
    40bc:	f107 0308 	add.w	r3, r7, #8
    40c0:	2100      	movs	r1, #0
    40c2:	4618      	mov	r0, r3
    40c4:	4b2a      	ldr	r3, [pc, #168]	; (4170 <_ZN12States_Class19ExecutePeriodicTaskEv+0xfc>)
    40c6:	4798      	blx	r3
    40c8:	f107 0308 	add.w	r3, r7, #8
    40cc:	2204      	movs	r2, #4
    40ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
    40d2:	4828      	ldr	r0, [pc, #160]	; (4174 <_ZN12States_Class19ExecutePeriodicTaskEv+0x100>)
    40d4:	4c28      	ldr	r4, [pc, #160]	; (4178 <_ZN12States_Class19ExecutePeriodicTaskEv+0x104>)
    40d6:	47a0      	blx	r4
    40d8:	e013      	b.n	4102 <_ZN12States_Class19ExecutePeriodicTaskEv+0x8e>
		} 
		else
		{
			prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    40da:	2200      	movs	r2, #0
    40dc:	f240 1133 	movw	r1, #307	; 0x133
    40e0:	6878      	ldr	r0, [r7, #4]
    40e2:	4b22      	ldr	r3, [pc, #136]	; (416c <_ZN12States_Class19ExecutePeriodicTaskEv+0xf8>)
    40e4:	4798      	blx	r3
			listener.SendEventSelf(kInterfaceEventClass,k_AC_CMD_DISABLE_Event);
    40e6:	f107 030c 	add.w	r3, r7, #12
    40ea:	2100      	movs	r1, #0
    40ec:	4618      	mov	r0, r3
    40ee:	4b20      	ldr	r3, [pc, #128]	; (4170 <_ZN12States_Class19ExecutePeriodicTaskEv+0xfc>)
    40f0:	4798      	blx	r3
    40f2:	f107 030c 	add.w	r3, r7, #12
    40f6:	2205      	movs	r2, #5
    40f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    40fc:	481d      	ldr	r0, [pc, #116]	; (4174 <_ZN12States_Class19ExecutePeriodicTaskEv+0x100>)
    40fe:	4c1e      	ldr	r4, [pc, #120]	; (4178 <_ZN12States_Class19ExecutePeriodicTaskEv+0x104>)
    4100:	47a0      	blx	r4
		}
		

	}
	if (fv1.IsPositionChanged())
    4102:	481e      	ldr	r0, [pc, #120]	; (417c <_ZN12States_Class19ExecutePeriodicTaskEv+0x108>)
    4104:	4b1e      	ldr	r3, [pc, #120]	; (4180 <_ZN12States_Class19ExecutePeriodicTaskEv+0x10c>)
    4106:	4798      	blx	r3
    4108:	4603      	mov	r3, r0
    410a:	2b00      	cmp	r3, #0
    410c:	d00b      	beq.n	4126 <_ZN12States_Class19ExecutePeriodicTaskEv+0xb2>
	{
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    410e:	2200      	movs	r2, #0
    4110:	210b      	movs	r1, #11
    4112:	481c      	ldr	r0, [pc, #112]	; (4184 <_ZN12States_Class19ExecutePeriodicTaskEv+0x110>)
    4114:	4b1c      	ldr	r3, [pc, #112]	; (4188 <_ZN12States_Class19ExecutePeriodicTaskEv+0x114>)
    4116:	4798      	blx	r3
		hvacState->arincStatus.statusFV=fv1.statusFlapperValve;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    411e:	4a17      	ldr	r2, [pc, #92]	; (417c <_ZN12States_Class19ExecutePeriodicTaskEv+0x108>)
    4120:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    4124:	779a      	strb	r2, [r3, #30]
		
	}
	if (IsStatusArinclabelChanged())
    4126:	687b      	ldr	r3, [r7, #4]
    4128:	681b      	ldr	r3, [r3, #0]
    412a:	3b0c      	subs	r3, #12
    412c:	681b      	ldr	r3, [r3, #0]
    412e:	461a      	mov	r2, r3
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	4413      	add	r3, r2
    4134:	4618      	mov	r0, r3
    4136:	4b15      	ldr	r3, [pc, #84]	; (418c <_ZN12States_Class19ExecutePeriodicTaskEv+0x118>)
    4138:	4798      	blx	r3
    413a:	4603      	mov	r3, r0
    413c:	2b00      	cmp	r3, #0
    413e:	d00e      	beq.n	415e <_ZN12States_Class19ExecutePeriodicTaskEv+0xea>
	{
		arinc.SaveStatus(GetAcknowledgeStatus());
    4140:	687b      	ldr	r3, [r7, #4]
    4142:	681b      	ldr	r3, [r3, #0]
    4144:	3b0c      	subs	r3, #12
    4146:	681b      	ldr	r3, [r3, #0]
    4148:	461a      	mov	r2, r3
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	4413      	add	r3, r2
    414e:	4618      	mov	r0, r3
    4150:	4b0f      	ldr	r3, [pc, #60]	; (4190 <_ZN12States_Class19ExecutePeriodicTaskEv+0x11c>)
    4152:	4798      	blx	r3
    4154:	4603      	mov	r3, r0
    4156:	4619      	mov	r1, r3
    4158:	480e      	ldr	r0, [pc, #56]	; (4194 <_ZN12States_Class19ExecutePeriodicTaskEv+0x120>)
    415a:	4b0f      	ldr	r3, [pc, #60]	; (4198 <_ZN12States_Class19ExecutePeriodicTaskEv+0x124>)
    415c:	4798      	blx	r3
	}
		
}
    415e:	bf00      	nop
    4160:	3714      	adds	r7, #20
    4162:	46bd      	mov	sp, r7
    4164:	bd90      	pop	{r4, r7, pc}
    4166:	bf00      	nop
    4168:	00001a15 	.word	0x00001a15
    416c:	00003e45 	.word	0x00003e45
    4170:	00002d19 	.word	0x00002d19
    4174:	20009850 	.word	0x20009850
    4178:	00014d11 	.word	0x00014d11
    417c:	200098e8 	.word	0x200098e8
    4180:	00015265 	.word	0x00015265
    4184:	20000c80 	.word	0x20000c80
    4188:	000009fd 	.word	0x000009fd
    418c:	00001291 	.word	0x00001291
    4190:	00001279 	.word	0x00001279
    4194:	20008d24 	.word	0x20008d24
    4198:	00012b6d 	.word	0x00012b6d

0000419c <_ZN12States_Class11CheckEventsEv>:

void States_Class::CheckEvents(void){
    419c:	b590      	push	{r4, r7, lr}
    419e:	b087      	sub	sp, #28
    41a0:	af00      	add	r7, sp, #0
	event e;
    41a2:	463b      	mov	r3, r7
    41a4:	4618      	mov	r0, r3
    41a6:	4b28      	ldr	r3, [pc, #160]	; (4248 <_ZN12States_Class11CheckEventsEv+0xac>)
    41a8:	4798      	blx	r3
	hvac.ExecutePeriodicTask();
    41aa:	4828      	ldr	r0, [pc, #160]	; (424c <_ZN12States_Class11CheckEventsEv+0xb0>)
    41ac:	4b28      	ldr	r3, [pc, #160]	; (4250 <_ZN12States_Class11CheckEventsEv+0xb4>)
    41ae:	4798      	blx	r3
	if (interfaces.IsCommunicationRequest())
    41b0:	4828      	ldr	r0, [pc, #160]	; (4254 <_ZN12States_Class11CheckEventsEv+0xb8>)
    41b2:	4b29      	ldr	r3, [pc, #164]	; (4258 <_ZN12States_Class11CheckEventsEv+0xbc>)
    41b4:	4798      	blx	r3
	{
		//e.eventClass=kALUEventClass;
	//	e.eventType=(EventType)kALUEventCheckCommunication;
		
	}
	if ((hvac.hvacState->currentState==kHVACStateStandbyOFF)&&(alu.taskList->head)){
    41b6:	4b25      	ldr	r3, [pc, #148]	; (424c <_ZN12States_Class11CheckEventsEv+0xb0>)
    41b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    41bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41be:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    41c2:	d11a      	bne.n	41fa <_ZN12States_Class11CheckEventsEv+0x5e>
    41c4:	4b25      	ldr	r3, [pc, #148]	; (425c <_ZN12States_Class11CheckEventsEv+0xc0>)
    41c6:	681b      	ldr	r3, [r3, #0]
    41c8:	681b      	ldr	r3, [r3, #0]
    41ca:	2b00      	cmp	r3, #0
    41cc:	d015      	beq.n	41fa <_ZN12States_Class11CheckEventsEv+0x5e>
		fv1.ReadActualPosition();
    41ce:	4824      	ldr	r0, [pc, #144]	; (4260 <_ZN12States_Class11CheckEventsEv+0xc4>)
    41d0:	4b24      	ldr	r3, [pc, #144]	; (4264 <_ZN12States_Class11CheckEventsEv+0xc8>)
    41d2:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    41d4:	2200      	movs	r2, #0
    41d6:	210b      	movs	r1, #11
    41d8:	4820      	ldr	r0, [pc, #128]	; (425c <_ZN12States_Class11CheckEventsEv+0xc0>)
    41da:	4b23      	ldr	r3, [pc, #140]	; (4268 <_ZN12States_Class11CheckEventsEv+0xcc>)
    41dc:	4798      	blx	r3
		listener.SendEventSelf(kHVACEventClass,kHVACEventDoPendingTasks);
    41de:	f107 0310 	add.w	r3, r7, #16
    41e2:	2100      	movs	r1, #0
    41e4:	4618      	mov	r0, r3
    41e6:	4b21      	ldr	r3, [pc, #132]	; (426c <_ZN12States_Class11CheckEventsEv+0xd0>)
    41e8:	4798      	blx	r3
    41ea:	f107 0310 	add.w	r3, r7, #16
    41ee:	2203      	movs	r2, #3
    41f0:	f44f 7100 	mov.w	r1, #512	; 0x200
    41f4:	481e      	ldr	r0, [pc, #120]	; (4270 <_ZN12States_Class11CheckEventsEv+0xd4>)
    41f6:	4c1f      	ldr	r4, [pc, #124]	; (4274 <_ZN12States_Class11CheckEventsEv+0xd8>)
    41f8:	47a0      	blx	r4

	}
	if (alu.arincTXTimeUP){
    41fa:	4b18      	ldr	r3, [pc, #96]	; (425c <_ZN12States_Class11CheckEventsEv+0xc0>)
    41fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4200:	b2db      	uxtb	r3, r3
    4202:	2b00      	cmp	r3, #0
    4204:	d01c      	beq.n	4240 <_ZN12States_Class11CheckEventsEv+0xa4>
		if ((!alu.IsListedTask(kALUTaskArincTXMessage)))
    4206:	2102      	movs	r1, #2
    4208:	4814      	ldr	r0, [pc, #80]	; (425c <_ZN12States_Class11CheckEventsEv+0xc0>)
    420a:	4b1b      	ldr	r3, [pc, #108]	; (4278 <_ZN12States_Class11CheckEventsEv+0xdc>)
    420c:	4798      	blx	r3
    420e:	4603      	mov	r3, r0
    4210:	f083 0301 	eor.w	r3, r3, #1
    4214:	b2db      	uxtb	r3, r3
    4216:	2b00      	cmp	r3, #0
    4218:	d004      	beq.n	4224 <_ZN12States_Class11CheckEventsEv+0x88>
		{
			alu.PrepareNewTask(kALUTaskArincTXMessage);
    421a:	2200      	movs	r2, #0
    421c:	2102      	movs	r1, #2
    421e:	480f      	ldr	r0, [pc, #60]	; (425c <_ZN12States_Class11CheckEventsEv+0xc0>)
    4220:	4b11      	ldr	r3, [pc, #68]	; (4268 <_ZN12States_Class11CheckEventsEv+0xcc>)
    4222:	4798      	blx	r3
		} 
		else
		{
			
		}
		listener.SendEventSelf(kALUEventClass,kHVACEventDoPendingTasks);
    4224:	f107 0314 	add.w	r3, r7, #20
    4228:	2100      	movs	r1, #0
    422a:	4618      	mov	r0, r3
    422c:	4b0f      	ldr	r3, [pc, #60]	; (426c <_ZN12States_Class11CheckEventsEv+0xd0>)
    422e:	4798      	blx	r3
    4230:	f107 0314 	add.w	r3, r7, #20
    4234:	2203      	movs	r2, #3
    4236:	f44f 7140 	mov.w	r1, #768	; 0x300
    423a:	480d      	ldr	r0, [pc, #52]	; (4270 <_ZN12States_Class11CheckEventsEv+0xd4>)
    423c:	4c0d      	ldr	r4, [pc, #52]	; (4274 <_ZN12States_Class11CheckEventsEv+0xd8>)
    423e:	47a0      	blx	r4
	}
		

}
    4240:	bf00      	nop
    4242:	371c      	adds	r7, #28
    4244:	46bd      	mov	sp, r7
    4246:	bd90      	pop	{r4, r7, pc}
    4248:	000003c5 	.word	0x000003c5
    424c:	20008034 	.word	0x20008034
    4250:	00004075 	.word	0x00004075
    4254:	200014cc 	.word	0x200014cc
    4258:	00001c29 	.word	0x00001c29
    425c:	20000c80 	.word	0x20000c80
    4260:	200098e8 	.word	0x200098e8
    4264:	000151f5 	.word	0x000151f5
    4268:	000009fd 	.word	0x000009fd
    426c:	00002d19 	.word	0x00002d19
    4270:	20009850 	.word	0x20009850
    4274:	00014d11 	.word	0x00014d11
    4278:	00004719 	.word	0x00004719

0000427c <_ZlsIA34_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    427c:	b580      	push	{r7, lr}
    427e:	b082      	sub	sp, #8
    4280:	af00      	add	r7, sp, #0
    4282:	6078      	str	r0, [r7, #4]
    4284:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    4286:	6839      	ldr	r1, [r7, #0]
    4288:	6878      	ldr	r0, [r7, #4]
    428a:	4b03      	ldr	r3, [pc, #12]	; (4298 <_ZlsIA34_cER5PrintS2_RKT_+0x1c>)
    428c:	4798      	blx	r3
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	4618      	mov	r0, r3
    4292:	3708      	adds	r7, #8
    4294:	46bd      	mov	sp, r7
    4296:	bd80      	pop	{r7, pc}
    4298:	000180b1 	.word	0x000180b1

0000429c <_ZlsIA32_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    429c:	b580      	push	{r7, lr}
    429e:	b082      	sub	sp, #8
    42a0:	af00      	add	r7, sp, #0
    42a2:	6078      	str	r0, [r7, #4]
    42a4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    42a6:	6839      	ldr	r1, [r7, #0]
    42a8:	6878      	ldr	r0, [r7, #4]
    42aa:	4b03      	ldr	r3, [pc, #12]	; (42b8 <_ZlsIA32_cER5PrintS2_RKT_+0x1c>)
    42ac:	4798      	blx	r3
    42ae:	687b      	ldr	r3, [r7, #4]
    42b0:	4618      	mov	r0, r3
    42b2:	3708      	adds	r7, #8
    42b4:	46bd      	mov	sp, r7
    42b6:	bd80      	pop	{r7, pc}
    42b8:	000180b1 	.word	0x000180b1

000042bc <_ZlsIA42_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    42bc:	b580      	push	{r7, lr}
    42be:	b082      	sub	sp, #8
    42c0:	af00      	add	r7, sp, #0
    42c2:	6078      	str	r0, [r7, #4]
    42c4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    42c6:	6839      	ldr	r1, [r7, #0]
    42c8:	6878      	ldr	r0, [r7, #4]
    42ca:	4b03      	ldr	r3, [pc, #12]	; (42d8 <_ZlsIA42_cER5PrintS2_RKT_+0x1c>)
    42cc:	4798      	blx	r3
    42ce:	687b      	ldr	r3, [r7, #4]
    42d0:	4618      	mov	r0, r3
    42d2:	3708      	adds	r7, #8
    42d4:	46bd      	mov	sp, r7
    42d6:	bd80      	pop	{r7, pc}
    42d8:	000180b1 	.word	0x000180b1

000042dc <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    42dc:	b580      	push	{r7, lr}
    42de:	b082      	sub	sp, #8
    42e0:	af00      	add	r7, sp, #0
    42e2:	6078      	str	r0, [r7, #4]
    42e4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    42e6:	6839      	ldr	r1, [r7, #0]
    42e8:	6878      	ldr	r0, [r7, #4]
    42ea:	4b03      	ldr	r3, [pc, #12]	; (42f8 <_ZlsIA5_cER5PrintS2_RKT_+0x1c>)
    42ec:	4798      	blx	r3
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	4618      	mov	r0, r3
    42f2:	3708      	adds	r7, #8
    42f4:	46bd      	mov	sp, r7
    42f6:	bd80      	pop	{r7, pc}
    42f8:	000180b1 	.word	0x000180b1

000042fc <_ZlsIA35_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    42fc:	b580      	push	{r7, lr}
    42fe:	b082      	sub	sp, #8
    4300:	af00      	add	r7, sp, #0
    4302:	6078      	str	r0, [r7, #4]
    4304:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    4306:	6839      	ldr	r1, [r7, #0]
    4308:	6878      	ldr	r0, [r7, #4]
    430a:	4b03      	ldr	r3, [pc, #12]	; (4318 <_ZlsIA35_cER5PrintS2_RKT_+0x1c>)
    430c:	4798      	blx	r3
    430e:	687b      	ldr	r3, [r7, #4]
    4310:	4618      	mov	r0, r3
    4312:	3708      	adds	r7, #8
    4314:	46bd      	mov	sp, r7
    4316:	bd80      	pop	{r7, pc}
    4318:	000180b1 	.word	0x000180b1

0000431c <_Z41__static_initialization_and_destruction_0ii>:


    431c:	b580      	push	{r7, lr}
    431e:	b082      	sub	sp, #8
    4320:	af00      	add	r7, sp, #0
    4322:	6078      	str	r0, [r7, #4]
    4324:	6039      	str	r1, [r7, #0]
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	2b01      	cmp	r3, #1
    432a:	d11c      	bne.n	4366 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    432c:	683b      	ldr	r3, [r7, #0]
    432e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4332:	4293      	cmp	r3, r2
    4334:	d117      	bne.n	4366 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    4336:	480e      	ldr	r0, [pc, #56]	; (4370 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    4338:	4b0e      	ldr	r3, [pc, #56]	; (4374 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    433a:	4798      	blx	r3
    433c:	4a0e      	ldr	r2, [pc, #56]	; (4378 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    433e:	490f      	ldr	r1, [pc, #60]	; (437c <_Z41__static_initialization_and_destruction_0ii+0x60>)
    4340:	480b      	ldr	r0, [pc, #44]	; (4370 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    4342:	4b0f      	ldr	r3, [pc, #60]	; (4380 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    4344:	4798      	blx	r3
    4346:	480f      	ldr	r0, [pc, #60]	; (4384 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    4348:	4b0f      	ldr	r3, [pc, #60]	; (4388 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    434a:	4798      	blx	r3
    434c:	4a0a      	ldr	r2, [pc, #40]	; (4378 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    434e:	490f      	ldr	r1, [pc, #60]	; (438c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    4350:	480c      	ldr	r0, [pc, #48]	; (4384 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    4352:	4b0b      	ldr	r3, [pc, #44]	; (4380 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    4354:	4798      	blx	r3
    4356:	480e      	ldr	r0, [pc, #56]	; (4390 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    4358:	4b0e      	ldr	r3, [pc, #56]	; (4394 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    435a:	4798      	blx	r3
    435c:	4a06      	ldr	r2, [pc, #24]	; (4378 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    435e:	490e      	ldr	r1, [pc, #56]	; (4398 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    4360:	480b      	ldr	r0, [pc, #44]	; (4390 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    4362:	4b07      	ldr	r3, [pc, #28]	; (4380 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    4364:	4798      	blx	r3
    4366:	bf00      	nop
    4368:	3708      	adds	r7, #8
    436a:	46bd      	mov	sp, r7
    436c:	bd80      	pop	{r7, pc}
    436e:	bf00      	nop
    4370:	20007fb0 	.word	0x20007fb0
    4374:	00002ab9 	.word	0x00002ab9
    4378:	20000000 	.word	0x20000000
    437c:	00002ad3 	.word	0x00002ad3
    4380:	00019ab1 	.word	0x00019ab1
    4384:	20007fc4 	.word	0x20007fc4
    4388:	00000fa5 	.word	0x00000fa5
    438c:	00000fbf 	.word	0x00000fbf
    4390:	20008034 	.word	0x20008034
    4394:	00002d75 	.word	0x00002d75
    4398:	00002e25 	.word	0x00002e25

0000439c <_GLOBAL__sub_I_ptrStatesClass>:
    439c:	b580      	push	{r7, lr}
    439e:	af00      	add	r7, sp, #0
    43a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    43a4:	2001      	movs	r0, #1
    43a6:	4b01      	ldr	r3, [pc, #4]	; (43ac <_GLOBAL__sub_I_ptrStatesClass+0x10>)
    43a8:	4798      	blx	r3
    43aa:	bd80      	pop	{r7, pc}
    43ac:	0000431d 	.word	0x0000431d

000043b0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    43b0:	b480      	push	{r7}
    43b2:	b083      	sub	sp, #12
    43b4:	af00      	add	r7, sp, #0
    43b6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	681b      	ldr	r3, [r3, #0]
}
    43bc:	4618      	mov	r0, r3
    43be:	370c      	adds	r7, #12
    43c0:	46bd      	mov	sp, r7
    43c2:	bc80      	pop	{r7}
    43c4:	4770      	bx	lr
	...

000043c8 <_ZN17TaskHandler_ClassC1Ev>:
//static TaskHandler_Class	taskStorage[MAXIMUM_TASKS];
//list_descriptor		taskStorage;
static	ControllerTask	taskStorage[MAXIMUM_TASKS];
static	list_element	listElements[MAXIMUM_TASKS];
// default constructor
TaskHandler_Class::TaskHandler_Class()
    43c8:	b480      	push	{r7}
    43ca:	b083      	sub	sp, #12
    43cc:	af00      	add	r7, sp, #0
    43ce:	6078      	str	r0, [r7, #4]
{
	taskListPrivate=(list_descriptor*)listElements;
    43d0:	687b      	ldr	r3, [r7, #4]
    43d2:	4a04      	ldr	r2, [pc, #16]	; (43e4 <_ZN17TaskHandler_ClassC1Ev+0x1c>)
    43d4:	60da      	str	r2, [r3, #12]
	//taskList->head->next=NULL;
	
	//task->id=(ALUTaskEnum)0;


} //TaskHandler_Class
    43d6:	687b      	ldr	r3, [r7, #4]
    43d8:	4618      	mov	r0, r3
    43da:	370c      	adds	r7, #12
    43dc:	46bd      	mov	sp, r7
    43de:	bc80      	pop	{r7}
    43e0:	4770      	bx	lr
    43e2:	bf00      	nop
    43e4:	20008560 	.word	0x20008560

000043e8 <_ZN17TaskHandler_ClassD1Ev>:

// default destructor
TaskHandler_Class::~TaskHandler_Class()
    43e8:	b480      	push	{r7}
    43ea:	b083      	sub	sp, #12
    43ec:	af00      	add	r7, sp, #0
    43ee:	6078      	str	r0, [r7, #4]
{
} //~TaskHandler_Class
    43f0:	687b      	ldr	r3, [r7, #4]
    43f2:	4618      	mov	r0, r3
    43f4:	370c      	adds	r7, #12
    43f6:	46bd      	mov	sp, r7
    43f8:	bc80      	pop	{r7}
    43fa:	4770      	bx	lr

000043fc <_ZN17TaskHandler_Class13InitTaskArrayEv>:

void TaskHandler_Class::InitTaskArray(void){
    43fc:	b480      	push	{r7}
    43fe:	b083      	sub	sp, #12
    4400:	af00      	add	r7, sp, #0
    4402:	6078      	str	r0, [r7, #4]
	for (i=1; i<MAXIMUM_TASKS; i++)
    4404:	687b      	ldr	r3, [r7, #4]
    4406:	2201      	movs	r2, #1
    4408:	721a      	strb	r2, [r3, #8]
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	7a1b      	ldrb	r3, [r3, #8]
    440e:	2b0b      	cmp	r3, #11
    4410:	dc31      	bgt.n	4476 <_ZN17TaskHandler_Class13InitTaskArrayEv+0x7a>
	{
		taskStorage[i].elem.next = (list_element*)NULL;
    4412:	687b      	ldr	r3, [r7, #4]
    4414:	7a1b      	ldrb	r3, [r3, #8]
    4416:	4619      	mov	r1, r3
    4418:	4b20      	ldr	r3, [pc, #128]	; (449c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    441a:	2200      	movs	r2, #0
    441c:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
		taskStorage[i].id=kALUNotTaskEvent;
    4420:	687b      	ldr	r3, [r7, #4]
    4422:	7a1b      	ldrb	r3, [r3, #8]
    4424:	4a1d      	ldr	r2, [pc, #116]	; (449c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    4426:	00db      	lsls	r3, r3, #3
    4428:	4413      	add	r3, r2
    442a:	2200      	movs	r2, #0
    442c:	711a      	strb	r2, [r3, #4]
		taskStorage[i-1].elem.next = &taskStorage[i].elem;
    442e:	687b      	ldr	r3, [r7, #4]
    4430:	7a1b      	ldrb	r3, [r3, #8]
    4432:	3b01      	subs	r3, #1
    4434:	687a      	ldr	r2, [r7, #4]
    4436:	7a12      	ldrb	r2, [r2, #8]
    4438:	00d2      	lsls	r2, r2, #3
    443a:	4918      	ldr	r1, [pc, #96]	; (449c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    443c:	440a      	add	r2, r1
    443e:	4917      	ldr	r1, [pc, #92]	; (449c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    4440:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		listElements[i].next = (list_element*)NULL;
    4444:	687b      	ldr	r3, [r7, #4]
    4446:	7a1b      	ldrb	r3, [r3, #8]
    4448:	4619      	mov	r1, r3
    444a:	4b15      	ldr	r3, [pc, #84]	; (44a0 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    444c:	2200      	movs	r2, #0
    444e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		listElements[i-1].next = &listElements[i];
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	7a1b      	ldrb	r3, [r3, #8]
    4456:	3b01      	subs	r3, #1
    4458:	687a      	ldr	r2, [r7, #4]
    445a:	7a12      	ldrb	r2, [r2, #8]
    445c:	0092      	lsls	r2, r2, #2
    445e:	4910      	ldr	r1, [pc, #64]	; (44a0 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    4460:	440a      	add	r2, r1
    4462:	490f      	ldr	r1, [pc, #60]	; (44a0 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    4464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=1; i<MAXIMUM_TASKS; i++)
    4468:	687b      	ldr	r3, [r7, #4]
    446a:	7a1b      	ldrb	r3, [r3, #8]
    446c:	3301      	adds	r3, #1
    446e:	b2da      	uxtb	r2, r3
    4470:	687b      	ldr	r3, [r7, #4]
    4472:	721a      	strb	r2, [r3, #8]
    4474:	e7c9      	b.n	440a <_ZN17TaskHandler_Class13InitTaskArrayEv+0xe>
	}
	taskListPrivate->head->next=NULL;
    4476:	687b      	ldr	r3, [r7, #4]
    4478:	68db      	ldr	r3, [r3, #12]
    447a:	681b      	ldr	r3, [r3, #0]
    447c:	2200      	movs	r2, #0
    447e:	601a      	str	r2, [r3, #0]
	taskListPrivate->head=NULL;
    4480:	687b      	ldr	r3, [r7, #4]
    4482:	68db      	ldr	r3, [r3, #12]
    4484:	2200      	movs	r2, #0
    4486:	601a      	str	r2, [r3, #0]

		//taskList->head->next=NULL;
		taskList=taskListPrivate;
    4488:	687b      	ldr	r3, [r7, #4]
    448a:	68da      	ldr	r2, [r3, #12]
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	601a      	str	r2, [r3, #0]
}
    4490:	bf00      	nop
    4492:	370c      	adds	r7, #12
    4494:	46bd      	mov	sp, r7
    4496:	bc80      	pop	{r7}
    4498:	4770      	bx	lr
    449a:	bf00      	nop
    449c:	20008500 	.word	0x20008500
    44a0:	20008560 	.word	0x20008560

000044a4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask>:
		return ERR_ALREADY_INITIALIZED;
	}
	AddALUTask(taskListPrivate,task);
	return ERR_NONE;
}
int TaskHandler_Class::AddTask(ControllerTask& tk ){
    44a4:	b580      	push	{r7, lr}
    44a6:	b082      	sub	sp, #8
    44a8:	af00      	add	r7, sp, #0
    44aa:	6078      	str	r0, [r7, #4]
    44ac:	6039      	str	r1, [r7, #0]
	if (IsNotDeclaredTask(tk))
    44ae:	6839      	ldr	r1, [r7, #0]
    44b0:	6878      	ldr	r0, [r7, #4]
    44b2:	4b22      	ldr	r3, [pc, #136]	; (453c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x98>)
    44b4:	4798      	blx	r3
    44b6:	4603      	mov	r3, r0
    44b8:	2b00      	cmp	r3, #0
    44ba:	d039      	beq.n	4530 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x8c>
	{
		ChooseAvailableTask();
    44bc:	6878      	ldr	r0, [r7, #4]
    44be:	4b20      	ldr	r3, [pc, #128]	; (4540 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x9c>)
    44c0:	4798      	blx	r3
		task->elem=tk.elem;
    44c2:	687b      	ldr	r3, [r7, #4]
    44c4:	685b      	ldr	r3, [r3, #4]
    44c6:	683a      	ldr	r2, [r7, #0]
    44c8:	6812      	ldr	r2, [r2, #0]
    44ca:	601a      	str	r2, [r3, #0]
		task->id=tk.id;
    44cc:	687b      	ldr	r3, [r7, #4]
    44ce:	685b      	ldr	r3, [r3, #4]
    44d0:	683a      	ldr	r2, [r7, #0]
    44d2:	7912      	ldrb	r2, [r2, #4]
    44d4:	711a      	strb	r2, [r3, #4]
		task->prio=tk.prio;
    44d6:	687b      	ldr	r3, [r7, #4]
    44d8:	685b      	ldr	r3, [r3, #4]
    44da:	683a      	ldr	r2, [r7, #0]
    44dc:	7952      	ldrb	r2, [r2, #5]
    44de:	715a      	strb	r2, [r3, #5]
		ASSERT((taskListPrivate)&&(task));
    44e0:	687b      	ldr	r3, [r7, #4]
    44e2:	68db      	ldr	r3, [r3, #12]
    44e4:	2b00      	cmp	r3, #0
    44e6:	d005      	beq.n	44f4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    44e8:	687b      	ldr	r3, [r7, #4]
    44ea:	685b      	ldr	r3, [r3, #4]
    44ec:	2b00      	cmp	r3, #0
    44ee:	d001      	beq.n	44f4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    44f0:	2301      	movs	r3, #1
    44f2:	e000      	b.n	44f6 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x52>
    44f4:	2300      	movs	r3, #0
    44f6:	2242      	movs	r2, #66	; 0x42
    44f8:	4912      	ldr	r1, [pc, #72]	; (4544 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa0>)
    44fa:	4618      	mov	r0, r3
    44fc:	4b12      	ldr	r3, [pc, #72]	; (4548 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa4>)
    44fe:	4798      	blx	r3
		if (is_list_element(taskListPrivate,task)) {
    4500:	687b      	ldr	r3, [r7, #4]
    4502:	68da      	ldr	r2, [r3, #12]
    4504:	687b      	ldr	r3, [r7, #4]
    4506:	685b      	ldr	r3, [r3, #4]
    4508:	4619      	mov	r1, r3
    450a:	4610      	mov	r0, r2
    450c:	4b0f      	ldr	r3, [pc, #60]	; (454c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa8>)
    450e:	4798      	blx	r3
    4510:	4603      	mov	r3, r0
    4512:	2b00      	cmp	r3, #0
    4514:	d002      	beq.n	451c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x78>

			//ASSERT(false);
			return ERR_ALREADY_INITIALIZED;
    4516:	f06f 0311 	mvn.w	r3, #17
    451a:	e00b      	b.n	4534 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
		}
		AddALUTask(taskListPrivate,task);
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	68d9      	ldr	r1, [r3, #12]
    4520:	687b      	ldr	r3, [r7, #4]
    4522:	685b      	ldr	r3, [r3, #4]
    4524:	461a      	mov	r2, r3
    4526:	6878      	ldr	r0, [r7, #4]
    4528:	4b09      	ldr	r3, [pc, #36]	; (4550 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xac>)
    452a:	4798      	blx	r3
		return ERR_NONE;
    452c:	2300      	movs	r3, #0
    452e:	e001      	b.n	4534 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
	}else{
		return ERR_ALREADY_INITIALIZED;
    4530:	f06f 0311 	mvn.w	r3, #17
	}
	
}
    4534:	4618      	mov	r0, r3
    4536:	3708      	adds	r7, #8
    4538:	46bd      	mov	sp, r7
    453a:	bd80      	pop	{r7, pc}
    453c:	000046c9 	.word	0x000046c9
    4540:	00004681 	.word	0x00004681
    4544:	000218b0 	.word	0x000218b0
    4548:	00007e21 	.word	0x00007e21
    454c:	00007e49 	.word	0x00007e49
    4550:	00004555 	.word	0x00004555

00004554 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask>:

void TaskHandler_Class::AddALUTask(list_descriptor *list,ControllerTask* pct){
    4554:	b580      	push	{r7, lr}
    4556:	b086      	sub	sp, #24
    4558:	af00      	add	r7, sp, #0
    455a:	60f8      	str	r0, [r7, #12]
    455c:	60b9      	str	r1, [r7, #8]
    455e:	607a      	str	r2, [r7, #4]
	ControllerTask *it, *head = (ControllerTask *)list_get_head(list);
    4560:	68b8      	ldr	r0, [r7, #8]
    4562:	4b09      	ldr	r3, [pc, #36]	; (4588 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x34>)
    4564:	4798      	blx	r3
    4566:	6178      	str	r0, [r7, #20]

	if (!head) {
    4568:	697b      	ldr	r3, [r7, #20]
    456a:	2b00      	cmp	r3, #0
    456c:	d104      	bne.n	4578 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x24>
		list_insert_as_head(list, pct);
    456e:	6879      	ldr	r1, [r7, #4]
    4570:	68b8      	ldr	r0, [r7, #8]
    4572:	4b06      	ldr	r3, [pc, #24]	; (458c <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x38>)
    4574:	4798      	blx	r3
		return;
    4576:	e003      	b.n	4580 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x2c>
		}else{
		list_insert_at_end(list,pct);
    4578:	6879      	ldr	r1, [r7, #4]
    457a:	68b8      	ldr	r0, [r7, #8]
    457c:	4b04      	ldr	r3, [pc, #16]	; (4590 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x3c>)
    457e:	4798      	blx	r3
	}

		

}
    4580:	3718      	adds	r7, #24
    4582:	46bd      	mov	sp, r7
    4584:	bd80      	pop	{r7, pc}
    4586:	bf00      	nop
    4588:	000043b1 	.word	0x000043b1
    458c:	00007e81 	.word	0x00007e81
    4590:	00007efd 	.word	0x00007efd

00004594 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask>:
		}
		list_delete_element(taskListPrivate, task);

		return ERR_NONE;
}
int32_t TaskHandler_Class::RemoveTask(ControllerTask& tk){
    4594:	b580      	push	{r7, lr}
    4596:	b082      	sub	sp, #8
    4598:	af00      	add	r7, sp, #0
    459a:	6078      	str	r0, [r7, #4]
    459c:	6039      	str	r1, [r7, #0]


	ASSERT(taskListPrivate && (&tk));
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	68db      	ldr	r3, [r3, #12]
    45a2:	2b00      	cmp	r3, #0
    45a4:	d004      	beq.n	45b0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    45a6:	683b      	ldr	r3, [r7, #0]
    45a8:	2b00      	cmp	r3, #0
    45aa:	d001      	beq.n	45b0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    45ac:	2301      	movs	r3, #1
    45ae:	e000      	b.n	45b2 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1e>
    45b0:	2300      	movs	r3, #0
    45b2:	226f      	movs	r2, #111	; 0x6f
    45b4:	4917      	ldr	r1, [pc, #92]	; (4614 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x80>)
    45b6:	4618      	mov	r0, r3
    45b8:	4b17      	ldr	r3, [pc, #92]	; (4618 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x84>)
    45ba:	4798      	blx	r3
	if (IsNotDeclaredTask(tk))
    45bc:	6839      	ldr	r1, [r7, #0]
    45be:	6878      	ldr	r0, [r7, #4]
    45c0:	4b16      	ldr	r3, [pc, #88]	; (461c <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x88>)
    45c2:	4798      	blx	r3
    45c4:	4603      	mov	r3, r0
    45c6:	2b00      	cmp	r3, #0
    45c8:	d002      	beq.n	45d0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x3c>
	{
			return ERR_NOT_FOUND;
    45ca:	f06f 0309 	mvn.w	r3, #9
    45ce:	e01d      	b.n	460c <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
	} 
	else
	{
		
		if (!is_list_element(taskListPrivate, task)) {
    45d0:	687b      	ldr	r3, [r7, #4]
    45d2:	68da      	ldr	r2, [r3, #12]
    45d4:	687b      	ldr	r3, [r7, #4]
    45d6:	685b      	ldr	r3, [r3, #4]
    45d8:	4619      	mov	r1, r3
    45da:	4610      	mov	r0, r2
    45dc:	4b10      	ldr	r3, [pc, #64]	; (4620 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x8c>)
    45de:	4798      	blx	r3
    45e0:	4603      	mov	r3, r0
    45e2:	f083 0301 	eor.w	r3, r3, #1
    45e6:	b2db      	uxtb	r3, r3
    45e8:	2b00      	cmp	r3, #0
    45ea:	d002      	beq.n	45f2 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x5e>
			//ASSERT(false);
			return ERR_NOT_FOUND;
    45ec:	f06f 0309 	mvn.w	r3, #9
    45f0:	e00c      	b.n	460c <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
		}
			
		list_delete_element(taskListPrivate, task);
    45f2:	687b      	ldr	r3, [r7, #4]
    45f4:	68da      	ldr	r2, [r3, #12]
    45f6:	687b      	ldr	r3, [r7, #4]
    45f8:	685b      	ldr	r3, [r3, #4]
    45fa:	4619      	mov	r1, r3
    45fc:	4610      	mov	r0, r2
    45fe:	4b09      	ldr	r3, [pc, #36]	; (4624 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x90>)
    4600:	4798      	blx	r3
		task->id=kALUNotTaskEvent;
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	685b      	ldr	r3, [r3, #4]
    4606:	2200      	movs	r2, #0
    4608:	711a      	strb	r2, [r3, #4]
		return ERR_NONE;
    460a:	2300      	movs	r3, #0
	}

	return ERR_NOT_FOUND;
}
    460c:	4618      	mov	r0, r3
    460e:	3708      	adds	r7, #8
    4610:	46bd      	mov	sp, r7
    4612:	bd80      	pop	{r7, pc}
    4614:	000218b0 	.word	0x000218b0
    4618:	00007e21 	.word	0x00007e21
    461c:	000046c9 	.word	0x000046c9
    4620:	00007e49 	.word	0x00007e49
    4624:	00007fab 	.word	0x00007fab

00004628 <_ZN17TaskHandler_Class15GetHighPrioTaskEv>:

ControllerTask	TaskHandler_Class::GetHighPrioTask(void){
    4628:	b480      	push	{r7}
    462a:	b087      	sub	sp, #28
    462c:	af00      	add	r7, sp, #0
    462e:	6078      	str	r0, [r7, #4]
    4630:	6039      	str	r1, [r7, #0]
	list_element *it;
	ControllerTask* ct;
	uint8_t		highPrio=kALUNumberTasks;
    4632:	230c      	movs	r3, #12
    4634:	73fb      	strb	r3, [r7, #15]
		
	for (it = taskListPrivate->head; it; it = it->next) {
    4636:	683b      	ldr	r3, [r7, #0]
    4638:	68db      	ldr	r3, [r3, #12]
    463a:	681b      	ldr	r3, [r3, #0]
    463c:	617b      	str	r3, [r7, #20]
    463e:	697b      	ldr	r3, [r7, #20]
    4640:	2b00      	cmp	r3, #0
    4642:	d011      	beq.n	4668 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x40>
		ct=(ControllerTask*)it;
    4644:	697b      	ldr	r3, [r7, #20]
    4646:	613b      	str	r3, [r7, #16]
		if ((ct->prio)<(highPrio)) {
    4648:	693b      	ldr	r3, [r7, #16]
    464a:	795b      	ldrb	r3, [r3, #5]
    464c:	461a      	mov	r2, r3
    464e:	7bfb      	ldrb	r3, [r7, #15]
    4650:	429a      	cmp	r2, r3
    4652:	da05      	bge.n	4660 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x38>
			highPrio=ct->prio;
    4654:	693b      	ldr	r3, [r7, #16]
    4656:	795b      	ldrb	r3, [r3, #5]
    4658:	73fb      	strb	r3, [r7, #15]
			task=ct;
    465a:	683b      	ldr	r3, [r7, #0]
    465c:	693a      	ldr	r2, [r7, #16]
    465e:	605a      	str	r2, [r3, #4]
	for (it = taskListPrivate->head; it; it = it->next) {
    4660:	697b      	ldr	r3, [r7, #20]
    4662:	681b      	ldr	r3, [r3, #0]
    4664:	617b      	str	r3, [r7, #20]
    4666:	e7ea      	b.n	463e <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x16>
			
		}
	}
	return (ControllerTask)(*task);
    4668:	683b      	ldr	r3, [r7, #0]
    466a:	685a      	ldr	r2, [r3, #4]
    466c:	687b      	ldr	r3, [r7, #4]
    466e:	e892 0003 	ldmia.w	r2, {r0, r1}
    4672:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4676:	6878      	ldr	r0, [r7, #4]
    4678:	371c      	adds	r7, #28
    467a:	46bd      	mov	sp, r7
    467c:	bc80      	pop	{r7}
    467e:	4770      	bx	lr

00004680 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv>:

void	TaskHandler_Class::ChooseAvailableTask(void){
    4680:	b480      	push	{r7}
    4682:	b085      	sub	sp, #20
    4684:	af00      	add	r7, sp, #0
    4686:	6078      	str	r0, [r7, #4]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4688:	2300      	movs	r3, #0
    468a:	73fb      	strb	r3, [r7, #15]
    468c:	7bfb      	ldrb	r3, [r7, #15]
    468e:	2b0b      	cmp	r3, #11
    4690:	dc11      	bgt.n	46b6 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x36>
	{
	
		if (taskStorage[ii].id==kALUNotTaskEvent)
    4692:	7bfb      	ldrb	r3, [r7, #15]
    4694:	4a0b      	ldr	r2, [pc, #44]	; (46c4 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    4696:	00db      	lsls	r3, r3, #3
    4698:	4413      	add	r3, r2
    469a:	791b      	ldrb	r3, [r3, #4]
    469c:	2b00      	cmp	r3, #0
    469e:	d106      	bne.n	46ae <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x2e>
		{			
			task=&taskStorage[ii];
    46a0:	7bfb      	ldrb	r3, [r7, #15]
    46a2:	00db      	lsls	r3, r3, #3
    46a4:	4a07      	ldr	r2, [pc, #28]	; (46c4 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    46a6:	441a      	add	r2, r3
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	605a      	str	r2, [r3, #4]
			return;
    46ac:	e006      	b.n	46bc <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x3c>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    46ae:	7bfb      	ldrb	r3, [r7, #15]
    46b0:	3301      	adds	r3, #1
    46b2:	73fb      	strb	r3, [r7, #15]
    46b4:	e7ea      	b.n	468c <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0xc>
			
		}
	}
	task=&taskStorage[0];
    46b6:	687b      	ldr	r3, [r7, #4]
    46b8:	4a02      	ldr	r2, [pc, #8]	; (46c4 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    46ba:	605a      	str	r2, [r3, #4]

}
    46bc:	3714      	adds	r7, #20
    46be:	46bd      	mov	sp, r7
    46c0:	bc80      	pop	{r7}
    46c2:	4770      	bx	lr
    46c4:	20008500 	.word	0x20008500

000046c8 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask>:

bool	TaskHandler_Class::IsNotDeclaredTask(ControllerTask& tk){
    46c8:	b480      	push	{r7}
    46ca:	b085      	sub	sp, #20
    46cc:	af00      	add	r7, sp, #0
    46ce:	6078      	str	r0, [r7, #4]
    46d0:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    46d2:	2300      	movs	r3, #0
    46d4:	73fb      	strb	r3, [r7, #15]
    46d6:	7bfb      	ldrb	r3, [r7, #15]
    46d8:	2b0b      	cmp	r3, #11
    46da:	dc14      	bgt.n	4706 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x3e>
	{
		if (taskStorage[ii].id==tk.id)
    46dc:	7bfb      	ldrb	r3, [r7, #15]
    46de:	4a0d      	ldr	r2, [pc, #52]	; (4714 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    46e0:	00db      	lsls	r3, r3, #3
    46e2:	4413      	add	r3, r2
    46e4:	791a      	ldrb	r2, [r3, #4]
    46e6:	683b      	ldr	r3, [r7, #0]
    46e8:	791b      	ldrb	r3, [r3, #4]
    46ea:	429a      	cmp	r2, r3
    46ec:	d107      	bne.n	46fe <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x36>
		{
			task=&taskStorage[ii];
    46ee:	7bfb      	ldrb	r3, [r7, #15]
    46f0:	00db      	lsls	r3, r3, #3
    46f2:	4a08      	ldr	r2, [pc, #32]	; (4714 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    46f4:	441a      	add	r2, r3
    46f6:	687b      	ldr	r3, [r7, #4]
    46f8:	605a      	str	r2, [r3, #4]
			return false;
    46fa:	2300      	movs	r3, #0
    46fc:	e004      	b.n	4708 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x40>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    46fe:	7bfb      	ldrb	r3, [r7, #15]
    4700:	3301      	adds	r3, #1
    4702:	73fb      	strb	r3, [r7, #15]
    4704:	e7e7      	b.n	46d6 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0xe>
			
		}
	}
	return true;
    4706:	2301      	movs	r3, #1


}
    4708:	4618      	mov	r0, r3
    470a:	3714      	adds	r7, #20
    470c:	46bd      	mov	sp, r7
    470e:	bc80      	pop	{r7}
    4710:	4770      	bx	lr
    4712:	bf00      	nop
    4714:	20008500 	.word	0x20008500

00004718 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum>:

bool	TaskHandler_Class::IsListedTask(ALUTaskEnum at){
    4718:	b480      	push	{r7}
    471a:	b085      	sub	sp, #20
    471c:	af00      	add	r7, sp, #0
    471e:	6078      	str	r0, [r7, #4]
    4720:	460b      	mov	r3, r1
    4722:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4724:	2300      	movs	r3, #0
    4726:	73fb      	strb	r3, [r7, #15]
    4728:	7bfb      	ldrb	r3, [r7, #15]
    472a:	2b0b      	cmp	r3, #11
    472c:	dc0d      	bgt.n	474a <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x32>
	{
		if (taskStorage[ii].id==at)
    472e:	7bfb      	ldrb	r3, [r7, #15]
    4730:	4a09      	ldr	r2, [pc, #36]	; (4758 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x40>)
    4732:	00db      	lsls	r3, r3, #3
    4734:	4413      	add	r3, r2
    4736:	791b      	ldrb	r3, [r3, #4]
    4738:	78fa      	ldrb	r2, [r7, #3]
    473a:	429a      	cmp	r2, r3
    473c:	d101      	bne.n	4742 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x2a>
		{
		//	task=&taskStorage[ii];
			return true;
    473e:	2301      	movs	r3, #1
    4740:	e004      	b.n	474c <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x34>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4742:	7bfb      	ldrb	r3, [r7, #15]
    4744:	3301      	adds	r3, #1
    4746:	73fb      	strb	r3, [r7, #15]
    4748:	e7ee      	b.n	4728 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x10>
			
		}
	}
	return false;
    474a:	2300      	movs	r3, #0


    474c:	4618      	mov	r0, r3
    474e:	3714      	adds	r7, #20
    4750:	46bd      	mov	sp, r7
    4752:	bc80      	pop	{r7}
    4754:	4770      	bx	lr
    4756:	bf00      	nop
    4758:	20008500 	.word	0x20008500

0000475c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    475c:	b580      	push	{r7, lr}
    475e:	af00      	add	r7, sp, #0
	system_init();
    4760:	4b03      	ldr	r3, [pc, #12]	; (4770 <atmel_start_init+0x14>)
    4762:	4798      	blx	r3
	usb_init();
    4764:	4b03      	ldr	r3, [pc, #12]	; (4774 <atmel_start_init+0x18>)
    4766:	4798      	blx	r3
	spi_nor_flash_init();
    4768:	4b03      	ldr	r3, [pc, #12]	; (4778 <atmel_start_init+0x1c>)
    476a:	4798      	blx	r3
}
    476c:	bf00      	nop
    476e:	bd80      	pop	{r7, pc}
    4770:	00005b9d 	.word	0x00005b9d
    4774:	000109c5 	.word	0x000109c5
    4778:	00010959 	.word	0x00010959

0000477c <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    477c:	b480      	push	{r7}
    477e:	b085      	sub	sp, #20
    4780:	af00      	add	r7, sp, #0
    4782:	60f8      	str	r0, [r7, #12]
    4784:	460b      	mov	r3, r1
    4786:	607a      	str	r2, [r7, #4]
    4788:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    478a:	7afa      	ldrb	r2, [r7, #11]
    478c:	68fb      	ldr	r3, [r7, #12]
    478e:	3220      	adds	r2, #32
    4790:	6879      	ldr	r1, [r7, #4]
    4792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    4796:	bf00      	nop
    4798:	3714      	adds	r7, #20
    479a:	46bd      	mov	sp, r7
    479c:	f85d 7b04 	ldr.w	r7, [sp], #4
    47a0:	4770      	bx	lr

000047a2 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    47a2:	b480      	push	{r7}
    47a4:	b083      	sub	sp, #12
    47a6:	af00      	add	r7, sp, #0
    47a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    47aa:	687b      	ldr	r3, [r7, #4]
    47ac:	691b      	ldr	r3, [r3, #16]
    47ae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    47b2:	687b      	ldr	r3, [r7, #4]
    47b4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    47b6:	bf00      	nop
    47b8:	370c      	adds	r7, #12
    47ba:	46bd      	mov	sp, r7
    47bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c0:	4770      	bx	lr

000047c2 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    47c2:	b480      	push	{r7}
    47c4:	b083      	sub	sp, #12
    47c6:	af00      	add	r7, sp, #0
    47c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	691b      	ldr	r3, [r3, #16]
    47ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    47d2:	687b      	ldr	r3, [r7, #4]
    47d4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    47d6:	bf00      	nop
    47d8:	370c      	adds	r7, #12
    47da:	46bd      	mov	sp, r7
    47dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    47e0:	4770      	bx	lr

000047e2 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    47e2:	b480      	push	{r7}
    47e4:	b083      	sub	sp, #12
    47e6:	af00      	add	r7, sp, #0
    47e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    47ea:	687b      	ldr	r3, [r7, #4]
    47ec:	691b      	ldr	r3, [r3, #16]
    47ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    47f2:	687b      	ldr	r3, [r7, #4]
    47f4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    47f6:	bf00      	nop
    47f8:	370c      	adds	r7, #12
    47fa:	46bd      	mov	sp, r7
    47fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4800:	4770      	bx	lr

00004802 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    4802:	b480      	push	{r7}
    4804:	b083      	sub	sp, #12
    4806:	af00      	add	r7, sp, #0
    4808:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	691b      	ldr	r3, [r3, #16]
    480e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    4812:	687b      	ldr	r3, [r7, #4]
    4814:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4816:	bf00      	nop
    4818:	370c      	adds	r7, #12
    481a:	46bd      	mov	sp, r7
    481c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4820:	4770      	bx	lr

00004822 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    4822:	b480      	push	{r7}
    4824:	b083      	sub	sp, #12
    4826:	af00      	add	r7, sp, #0
    4828:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    482a:	687b      	ldr	r3, [r7, #4]
    482c:	695b      	ldr	r3, [r3, #20]
    482e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    4832:	687b      	ldr	r3, [r7, #4]
    4834:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4836:	bf00      	nop
    4838:	370c      	adds	r7, #12
    483a:	46bd      	mov	sp, r7
    483c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4840:	4770      	bx	lr

00004842 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    4842:	b480      	push	{r7}
    4844:	b083      	sub	sp, #12
    4846:	af00      	add	r7, sp, #0
    4848:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    484a:	687b      	ldr	r3, [r7, #4]
    484c:	695b      	ldr	r3, [r3, #20]
    484e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4852:	687b      	ldr	r3, [r7, #4]
    4854:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4856:	bf00      	nop
    4858:	370c      	adds	r7, #12
    485a:	46bd      	mov	sp, r7
    485c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4860:	4770      	bx	lr

00004862 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    4862:	b480      	push	{r7}
    4864:	b083      	sub	sp, #12
    4866:	af00      	add	r7, sp, #0
    4868:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    486a:	687b      	ldr	r3, [r7, #4]
    486c:	695b      	ldr	r3, [r3, #20]
    486e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4872:	687b      	ldr	r3, [r7, #4]
    4874:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4876:	bf00      	nop
    4878:	370c      	adds	r7, #12
    487a:	46bd      	mov	sp, r7
    487c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4880:	4770      	bx	lr

00004882 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    4882:	b480      	push	{r7}
    4884:	b083      	sub	sp, #12
    4886:	af00      	add	r7, sp, #0
    4888:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    488a:	687b      	ldr	r3, [r7, #4]
    488c:	695b      	ldr	r3, [r3, #20]
    488e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4892:	687b      	ldr	r3, [r7, #4]
    4894:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4896:	bf00      	nop
    4898:	370c      	adds	r7, #12
    489a:	46bd      	mov	sp, r7
    489c:	f85d 7b04 	ldr.w	r7, [sp], #4
    48a0:	4770      	bx	lr

000048a2 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    48a2:	b480      	push	{r7}
    48a4:	b083      	sub	sp, #12
    48a6:	af00      	add	r7, sp, #0
    48a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	695b      	ldr	r3, [r3, #20]
    48ae:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    48b2:	687b      	ldr	r3, [r7, #4]
    48b4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    48b6:	bf00      	nop
    48b8:	370c      	adds	r7, #12
    48ba:	46bd      	mov	sp, r7
    48bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    48c0:	4770      	bx	lr

000048c2 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    48c2:	b480      	push	{r7}
    48c4:	b083      	sub	sp, #12
    48c6:	af00      	add	r7, sp, #0
    48c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	695b      	ldr	r3, [r3, #20]
    48ce:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    48d2:	687b      	ldr	r3, [r7, #4]
    48d4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    48d6:	bf00      	nop
    48d8:	370c      	adds	r7, #12
    48da:	46bd      	mov	sp, r7
    48dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e0:	4770      	bx	lr

000048e2 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    48e2:	b480      	push	{r7}
    48e4:	b083      	sub	sp, #12
    48e6:	af00      	add	r7, sp, #0
    48e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    48ea:	687b      	ldr	r3, [r7, #4]
    48ec:	699b      	ldr	r3, [r3, #24]
    48ee:	f043 0201 	orr.w	r2, r3, #1
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    48f6:	bf00      	nop
    48f8:	370c      	adds	r7, #12
    48fa:	46bd      	mov	sp, r7
    48fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4900:	4770      	bx	lr

00004902 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    4902:	b480      	push	{r7}
    4904:	b083      	sub	sp, #12
    4906:	af00      	add	r7, sp, #0
    4908:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    490a:	687b      	ldr	r3, [r7, #4]
    490c:	699b      	ldr	r3, [r3, #24]
    490e:	f043 0202 	orr.w	r2, r3, #2
    4912:	687b      	ldr	r3, [r7, #4]
    4914:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4916:	bf00      	nop
    4918:	370c      	adds	r7, #12
    491a:	46bd      	mov	sp, r7
    491c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4920:	4770      	bx	lr

00004922 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    4922:	b480      	push	{r7}
    4924:	b083      	sub	sp, #12
    4926:	af00      	add	r7, sp, #0
    4928:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    492a:	687b      	ldr	r3, [r7, #4]
    492c:	699b      	ldr	r3, [r3, #24]
    492e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    4932:	687b      	ldr	r3, [r7, #4]
    4934:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4936:	bf00      	nop
    4938:	370c      	adds	r7, #12
    493a:	46bd      	mov	sp, r7
    493c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4940:	4770      	bx	lr

00004942 <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
    4942:	b480      	push	{r7}
    4944:	b083      	sub	sp, #12
    4946:	af00      	add	r7, sp, #0
    4948:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    494a:	687b      	ldr	r3, [r7, #4]
    494c:	699b      	ldr	r3, [r3, #24]
    494e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4956:	bf00      	nop
    4958:	370c      	adds	r7, #12
    495a:	46bd      	mov	sp, r7
    495c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4960:	4770      	bx	lr

00004962 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    4962:	b480      	push	{r7}
    4964:	b083      	sub	sp, #12
    4966:	af00      	add	r7, sp, #0
    4968:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    496a:	687b      	ldr	r3, [r7, #4]
    496c:	699b      	ldr	r3, [r3, #24]
    496e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    4972:	687b      	ldr	r3, [r7, #4]
    4974:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4976:	bf00      	nop
    4978:	370c      	adds	r7, #12
    497a:	46bd      	mov	sp, r7
    497c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4980:	4770      	bx	lr

00004982 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    4982:	b480      	push	{r7}
    4984:	b083      	sub	sp, #12
    4986:	af00      	add	r7, sp, #0
    4988:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    498a:	687b      	ldr	r3, [r7, #4]
    498c:	699b      	ldr	r3, [r3, #24]
    498e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    4992:	687b      	ldr	r3, [r7, #4]
    4994:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4996:	bf00      	nop
    4998:	370c      	adds	r7, #12
    499a:	46bd      	mov	sp, r7
    499c:	f85d 7b04 	ldr.w	r7, [sp], #4
    49a0:	4770      	bx	lr

000049a2 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    49a2:	b480      	push	{r7}
    49a4:	b083      	sub	sp, #12
    49a6:	af00      	add	r7, sp, #0
    49a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    49aa:	687b      	ldr	r3, [r7, #4]
    49ac:	699b      	ldr	r3, [r3, #24]
    49ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    49b2:	687b      	ldr	r3, [r7, #4]
    49b4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    49b6:	bf00      	nop
    49b8:	370c      	adds	r7, #12
    49ba:	46bd      	mov	sp, r7
    49bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    49c0:	4770      	bx	lr

000049c2 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    49c2:	b480      	push	{r7}
    49c4:	b083      	sub	sp, #12
    49c6:	af00      	add	r7, sp, #0
    49c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    49ca:	687b      	ldr	r3, [r7, #4]
    49cc:	69db      	ldr	r3, [r3, #28]
    49ce:	f043 0220 	orr.w	r2, r3, #32
    49d2:	687b      	ldr	r3, [r7, #4]
    49d4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    49d6:	bf00      	nop
    49d8:	370c      	adds	r7, #12
    49da:	46bd      	mov	sp, r7
    49dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    49e0:	4770      	bx	lr

000049e2 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    49e2:	b480      	push	{r7}
    49e4:	b083      	sub	sp, #12
    49e6:	af00      	add	r7, sp, #0
    49e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    49ea:	687b      	ldr	r3, [r7, #4]
    49ec:	69db      	ldr	r3, [r3, #28]
    49ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    49f6:	bf00      	nop
    49f8:	370c      	adds	r7, #12
    49fa:	46bd      	mov	sp, r7
    49fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a00:	4770      	bx	lr

00004a02 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    4a02:	b480      	push	{r7}
    4a04:	b083      	sub	sp, #12
    4a06:	af00      	add	r7, sp, #0
    4a08:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    4a0a:	687b      	ldr	r3, [r7, #4]
    4a0c:	69db      	ldr	r3, [r3, #28]
    4a0e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4a12:	687b      	ldr	r3, [r7, #4]
    4a14:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4a16:	bf00      	nop
    4a18:	370c      	adds	r7, #12
    4a1a:	46bd      	mov	sp, r7
    4a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a20:	4770      	bx	lr

00004a22 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    4a22:	b480      	push	{r7}
    4a24:	b083      	sub	sp, #12
    4a26:	af00      	add	r7, sp, #0
    4a28:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    4a2a:	687b      	ldr	r3, [r7, #4]
    4a2c:	6a1b      	ldr	r3, [r3, #32]
    4a2e:	f043 0201 	orr.w	r2, r3, #1
    4a32:	687b      	ldr	r3, [r7, #4]
    4a34:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4a36:	bf00      	nop
    4a38:	370c      	adds	r7, #12
    4a3a:	46bd      	mov	sp, r7
    4a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a40:	4770      	bx	lr

00004a42 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    4a42:	b480      	push	{r7}
    4a44:	b083      	sub	sp, #12
    4a46:	af00      	add	r7, sp, #0
    4a48:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4a4a:	687b      	ldr	r3, [r7, #4]
    4a4c:	6a1b      	ldr	r3, [r3, #32]
    4a4e:	f043 0202 	orr.w	r2, r3, #2
    4a52:	687b      	ldr	r3, [r7, #4]
    4a54:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4a56:	bf00      	nop
    4a58:	370c      	adds	r7, #12
    4a5a:	46bd      	mov	sp, r7
    4a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a60:	4770      	bx	lr

00004a62 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    4a62:	b480      	push	{r7}
    4a64:	b083      	sub	sp, #12
    4a66:	af00      	add	r7, sp, #0
    4a68:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    4a6a:	687b      	ldr	r3, [r7, #4]
    4a6c:	6a1b      	ldr	r3, [r3, #32]
    4a6e:	f043 0204 	orr.w	r2, r3, #4
    4a72:	687b      	ldr	r3, [r7, #4]
    4a74:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4a76:	bf00      	nop
    4a78:	370c      	adds	r7, #12
    4a7a:	46bd      	mov	sp, r7
    4a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a80:	4770      	bx	lr

00004a82 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    4a82:	b480      	push	{r7}
    4a84:	b083      	sub	sp, #12
    4a86:	af00      	add	r7, sp, #0
    4a88:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    4a8a:	687b      	ldr	r3, [r7, #4]
    4a8c:	6a1b      	ldr	r3, [r3, #32]
    4a8e:	f043 0208 	orr.w	r2, r3, #8
    4a92:	687b      	ldr	r3, [r7, #4]
    4a94:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4a96:	bf00      	nop
    4a98:	370c      	adds	r7, #12
    4a9a:	46bd      	mov	sp, r7
    4a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aa0:	4770      	bx	lr

00004aa2 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    4aa2:	b480      	push	{r7}
    4aa4:	b083      	sub	sp, #12
    4aa6:	af00      	add	r7, sp, #0
    4aa8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    4aaa:	687b      	ldr	r3, [r7, #4]
    4aac:	6a1b      	ldr	r3, [r3, #32]
    4aae:	f043 0220 	orr.w	r2, r3, #32
    4ab2:	687b      	ldr	r3, [r7, #4]
    4ab4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4ab6:	bf00      	nop
    4ab8:	370c      	adds	r7, #12
    4aba:	46bd      	mov	sp, r7
    4abc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ac0:	4770      	bx	lr

00004ac2 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    4ac2:	b480      	push	{r7}
    4ac4:	b085      	sub	sp, #20
    4ac6:	af00      	add	r7, sp, #0
    4ac8:	60f8      	str	r0, [r7, #12]
    4aca:	460b      	mov	r3, r1
    4acc:	607a      	str	r2, [r7, #4]
    4ace:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4ad0:	7afb      	ldrb	r3, [r7, #11]
    4ad2:	68fa      	ldr	r2, [r7, #12]
    4ad4:	01db      	lsls	r3, r3, #7
    4ad6:	4413      	add	r3, r2
    4ad8:	3308      	adds	r3, #8
    4ada:	687a      	ldr	r2, [r7, #4]
    4adc:	601a      	str	r2, [r3, #0]
}
    4ade:	bf00      	nop
    4ae0:	3714      	adds	r7, #20
    4ae2:	46bd      	mov	sp, r7
    4ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ae8:	4770      	bx	lr

00004aea <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    4aea:	b480      	push	{r7}
    4aec:	b085      	sub	sp, #20
    4aee:	af00      	add	r7, sp, #0
    4af0:	60f8      	str	r0, [r7, #12]
    4af2:	460b      	mov	r3, r1
    4af4:	607a      	str	r2, [r7, #4]
    4af6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4af8:	7afb      	ldrb	r3, [r7, #11]
    4afa:	68fa      	ldr	r2, [r7, #12]
    4afc:	01db      	lsls	r3, r3, #7
    4afe:	4413      	add	r3, r2
    4b00:	3304      	adds	r3, #4
    4b02:	687a      	ldr	r2, [r7, #4]
    4b04:	601a      	str	r2, [r3, #0]
}
    4b06:	bf00      	nop
    4b08:	3714      	adds	r7, #20
    4b0a:	46bd      	mov	sp, r7
    4b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b10:	4770      	bx	lr

00004b12 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4b12:	b480      	push	{r7}
    4b14:	b085      	sub	sp, #20
    4b16:	af00      	add	r7, sp, #0
    4b18:	60f8      	str	r0, [r7, #12]
    4b1a:	460b      	mov	r3, r1
    4b1c:	607a      	str	r2, [r7, #4]
    4b1e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4b20:	7afb      	ldrb	r3, [r7, #11]
    4b22:	68fa      	ldr	r2, [r7, #12]
    4b24:	01db      	lsls	r3, r3, #7
    4b26:	4413      	add	r3, r2
    4b28:	3318      	adds	r3, #24
    4b2a:	687a      	ldr	r2, [r7, #4]
    4b2c:	601a      	str	r2, [r3, #0]
}
    4b2e:	bf00      	nop
    4b30:	3714      	adds	r7, #20
    4b32:	46bd      	mov	sp, r7
    4b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b38:	4770      	bx	lr

00004b3a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4b3a:	b480      	push	{r7}
    4b3c:	b085      	sub	sp, #20
    4b3e:	af00      	add	r7, sp, #0
    4b40:	60f8      	str	r0, [r7, #12]
    4b42:	460b      	mov	r3, r1
    4b44:	607a      	str	r2, [r7, #4]
    4b46:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4b48:	7afb      	ldrb	r3, [r7, #11]
    4b4a:	68fa      	ldr	r2, [r7, #12]
    4b4c:	01db      	lsls	r3, r3, #7
    4b4e:	4413      	add	r3, r2
    4b50:	3314      	adds	r3, #20
    4b52:	687a      	ldr	r2, [r7, #4]
    4b54:	601a      	str	r2, [r3, #0]
}
    4b56:	bf00      	nop
    4b58:	3714      	adds	r7, #20
    4b5a:	46bd      	mov	sp, r7
    4b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b60:	4770      	bx	lr

00004b62 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4b62:	b480      	push	{r7}
    4b64:	b085      	sub	sp, #20
    4b66:	af00      	add	r7, sp, #0
    4b68:	6078      	str	r0, [r7, #4]
    4b6a:	4608      	mov	r0, r1
    4b6c:	4611      	mov	r1, r2
    4b6e:	461a      	mov	r2, r3
    4b70:	4603      	mov	r3, r0
    4b72:	70fb      	strb	r3, [r7, #3]
    4b74:	460b      	mov	r3, r1
    4b76:	70bb      	strb	r3, [r7, #2]
    4b78:	4613      	mov	r3, r2
    4b7a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4b7c:	78fa      	ldrb	r2, [r7, #3]
    4b7e:	78bb      	ldrb	r3, [r7, #2]
    4b80:	6879      	ldr	r1, [r7, #4]
    4b82:	01d2      	lsls	r2, r2, #7
    4b84:	440a      	add	r2, r1
    4b86:	4413      	add	r3, r2
    4b88:	3330      	adds	r3, #48	; 0x30
    4b8a:	781b      	ldrb	r3, [r3, #0]
    4b8c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4b8e:	7bfb      	ldrb	r3, [r7, #15]
    4b90:	f023 030f 	bic.w	r3, r3, #15
    4b94:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    4b96:	787b      	ldrb	r3, [r7, #1]
    4b98:	f003 030f 	and.w	r3, r3, #15
    4b9c:	b2da      	uxtb	r2, r3
    4b9e:	7bfb      	ldrb	r3, [r7, #15]
    4ba0:	4313      	orrs	r3, r2
    4ba2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4ba4:	78fa      	ldrb	r2, [r7, #3]
    4ba6:	78bb      	ldrb	r3, [r7, #2]
    4ba8:	6879      	ldr	r1, [r7, #4]
    4baa:	01d2      	lsls	r2, r2, #7
    4bac:	440a      	add	r2, r1
    4bae:	4413      	add	r3, r2
    4bb0:	3330      	adds	r3, #48	; 0x30
    4bb2:	7bfa      	ldrb	r2, [r7, #15]
    4bb4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4bb6:	bf00      	nop
    4bb8:	3714      	adds	r7, #20
    4bba:	46bd      	mov	sp, r7
    4bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bc0:	4770      	bx	lr

00004bc2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4bc2:	b480      	push	{r7}
    4bc4:	b085      	sub	sp, #20
    4bc6:	af00      	add	r7, sp, #0
    4bc8:	6078      	str	r0, [r7, #4]
    4bca:	4608      	mov	r0, r1
    4bcc:	4611      	mov	r1, r2
    4bce:	461a      	mov	r2, r3
    4bd0:	4603      	mov	r3, r0
    4bd2:	70fb      	strb	r3, [r7, #3]
    4bd4:	460b      	mov	r3, r1
    4bd6:	70bb      	strb	r3, [r7, #2]
    4bd8:	4613      	mov	r3, r2
    4bda:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4bdc:	78fa      	ldrb	r2, [r7, #3]
    4bde:	78bb      	ldrb	r3, [r7, #2]
    4be0:	6879      	ldr	r1, [r7, #4]
    4be2:	01d2      	lsls	r2, r2, #7
    4be4:	440a      	add	r2, r1
    4be6:	4413      	add	r3, r2
    4be8:	3330      	adds	r3, #48	; 0x30
    4bea:	781b      	ldrb	r3, [r3, #0]
    4bec:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4bee:	7bfb      	ldrb	r3, [r7, #15]
    4bf0:	f003 030f 	and.w	r3, r3, #15
    4bf4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    4bf6:	787b      	ldrb	r3, [r7, #1]
    4bf8:	011b      	lsls	r3, r3, #4
    4bfa:	b2da      	uxtb	r2, r3
    4bfc:	7bfb      	ldrb	r3, [r7, #15]
    4bfe:	4313      	orrs	r3, r2
    4c00:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4c02:	78fa      	ldrb	r2, [r7, #3]
    4c04:	78bb      	ldrb	r3, [r7, #2]
    4c06:	6879      	ldr	r1, [r7, #4]
    4c08:	01d2      	lsls	r2, r2, #7
    4c0a:	440a      	add	r2, r1
    4c0c:	4413      	add	r3, r2
    4c0e:	3330      	adds	r3, #48	; 0x30
    4c10:	7bfa      	ldrb	r2, [r7, #15]
    4c12:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4c14:	bf00      	nop
    4c16:	3714      	adds	r7, #20
    4c18:	46bd      	mov	sp, r7
    4c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c1e:	4770      	bx	lr

00004c20 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    4c20:	b480      	push	{r7}
    4c22:	b085      	sub	sp, #20
    4c24:	af00      	add	r7, sp, #0
    4c26:	6078      	str	r0, [r7, #4]
    4c28:	4608      	mov	r0, r1
    4c2a:	4611      	mov	r1, r2
    4c2c:	461a      	mov	r2, r3
    4c2e:	4603      	mov	r3, r0
    4c30:	70fb      	strb	r3, [r7, #3]
    4c32:	460b      	mov	r3, r1
    4c34:	70bb      	strb	r3, [r7, #2]
    4c36:	4613      	mov	r3, r2
    4c38:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c3a:	78fa      	ldrb	r2, [r7, #3]
    4c3c:	78bb      	ldrb	r3, [r7, #2]
    4c3e:	6879      	ldr	r1, [r7, #4]
    4c40:	01d2      	lsls	r2, r2, #7
    4c42:	440a      	add	r2, r1
    4c44:	4413      	add	r3, r2
    4c46:	3340      	adds	r3, #64	; 0x40
    4c48:	781b      	ldrb	r3, [r3, #0]
    4c4a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c4c:	7bfb      	ldrb	r3, [r7, #15]
    4c4e:	f023 0301 	bic.w	r3, r3, #1
    4c52:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c54:	787a      	ldrb	r2, [r7, #1]
    4c56:	7bfb      	ldrb	r3, [r7, #15]
    4c58:	4313      	orrs	r3, r2
    4c5a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c5c:	78fa      	ldrb	r2, [r7, #3]
    4c5e:	78bb      	ldrb	r3, [r7, #2]
    4c60:	6879      	ldr	r1, [r7, #4]
    4c62:	01d2      	lsls	r2, r2, #7
    4c64:	440a      	add	r2, r1
    4c66:	4413      	add	r3, r2
    4c68:	3340      	adds	r3, #64	; 0x40
    4c6a:	7bfa      	ldrb	r2, [r7, #15]
    4c6c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4c6e:	bf00      	nop
    4c70:	3714      	adds	r7, #20
    4c72:	46bd      	mov	sp, r7
    4c74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c78:	4770      	bx	lr

00004c7a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    4c7a:	b490      	push	{r4, r7}
    4c7c:	b082      	sub	sp, #8
    4c7e:	af00      	add	r7, sp, #0
    4c80:	6078      	str	r0, [r7, #4]
    4c82:	460b      	mov	r3, r1
    4c84:	70fb      	strb	r3, [r7, #3]
    4c86:	4613      	mov	r3, r2
    4c88:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4c8a:	78fa      	ldrb	r2, [r7, #3]
    4c8c:	78bb      	ldrb	r3, [r7, #2]
    4c8e:	78f8      	ldrb	r0, [r7, #3]
    4c90:	78b9      	ldrb	r1, [r7, #2]
    4c92:	687c      	ldr	r4, [r7, #4]
    4c94:	01c0      	lsls	r0, r0, #7
    4c96:	4420      	add	r0, r4
    4c98:	4401      	add	r1, r0
    4c9a:	3140      	adds	r1, #64	; 0x40
    4c9c:	7809      	ldrb	r1, [r1, #0]
    4c9e:	b2c9      	uxtb	r1, r1
    4ca0:	f041 0104 	orr.w	r1, r1, #4
    4ca4:	b2c8      	uxtb	r0, r1
    4ca6:	6879      	ldr	r1, [r7, #4]
    4ca8:	01d2      	lsls	r2, r2, #7
    4caa:	440a      	add	r2, r1
    4cac:	4413      	add	r3, r2
    4cae:	3340      	adds	r3, #64	; 0x40
    4cb0:	4602      	mov	r2, r0
    4cb2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4cb4:	bf00      	nop
    4cb6:	3708      	adds	r7, #8
    4cb8:	46bd      	mov	sp, r7
    4cba:	bc90      	pop	{r4, r7}
    4cbc:	4770      	bx	lr

00004cbe <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    4cbe:	b490      	push	{r4, r7}
    4cc0:	b082      	sub	sp, #8
    4cc2:	af00      	add	r7, sp, #0
    4cc4:	6078      	str	r0, [r7, #4]
    4cc6:	460b      	mov	r3, r1
    4cc8:	70fb      	strb	r3, [r7, #3]
    4cca:	4613      	mov	r3, r2
    4ccc:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4cce:	78fa      	ldrb	r2, [r7, #3]
    4cd0:	78bb      	ldrb	r3, [r7, #2]
    4cd2:	78f8      	ldrb	r0, [r7, #3]
    4cd4:	78b9      	ldrb	r1, [r7, #2]
    4cd6:	687c      	ldr	r4, [r7, #4]
    4cd8:	01c0      	lsls	r0, r0, #7
    4cda:	4420      	add	r0, r4
    4cdc:	4401      	add	r1, r0
    4cde:	3140      	adds	r1, #64	; 0x40
    4ce0:	7809      	ldrb	r1, [r1, #0]
    4ce2:	b2c9      	uxtb	r1, r1
    4ce4:	f021 0104 	bic.w	r1, r1, #4
    4ce8:	b2c8      	uxtb	r0, r1
    4cea:	6879      	ldr	r1, [r7, #4]
    4cec:	01d2      	lsls	r2, r2, #7
    4cee:	440a      	add	r2, r1
    4cf0:	4413      	add	r3, r2
    4cf2:	3340      	adds	r3, #64	; 0x40
    4cf4:	4602      	mov	r2, r0
    4cf6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4cf8:	bf00      	nop
    4cfa:	3708      	adds	r7, #8
    4cfc:	46bd      	mov	sp, r7
    4cfe:	bc90      	pop	{r4, r7}
    4d00:	4770      	bx	lr

00004d02 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    4d02:	b480      	push	{r7}
    4d04:	b085      	sub	sp, #20
    4d06:	af00      	add	r7, sp, #0
    4d08:	60f8      	str	r0, [r7, #12]
    4d0a:	460b      	mov	r3, r1
    4d0c:	607a      	str	r2, [r7, #4]
    4d0e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4d10:	7afb      	ldrb	r3, [r7, #11]
    4d12:	68fa      	ldr	r2, [r7, #12]
    4d14:	01db      	lsls	r3, r3, #7
    4d16:	4413      	add	r3, r2
    4d18:	3328      	adds	r3, #40	; 0x28
    4d1a:	687a      	ldr	r2, [r7, #4]
    4d1c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4d1e:	bf00      	nop
    4d20:	3714      	adds	r7, #20
    4d22:	46bd      	mov	sp, r7
    4d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d28:	4770      	bx	lr
	...

00004d2c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    4d2c:	b580      	push	{r7, lr}
    4d2e:	b082      	sub	sp, #8
    4d30:	af00      	add	r7, sp, #0
    4d32:	4603      	mov	r3, r0
    4d34:	6039      	str	r1, [r7, #0]
    4d36:	71fb      	strb	r3, [r7, #7]
    4d38:	4613      	mov	r3, r2
    4d3a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    4d3c:	79bb      	ldrb	r3, [r7, #6]
    4d3e:	2b01      	cmp	r3, #1
    4d40:	d01c      	beq.n	4d7c <_gpio_set_direction+0x50>
    4d42:	2b02      	cmp	r3, #2
    4d44:	d037      	beq.n	4db6 <_gpio_set_direction+0x8a>
    4d46:	2b00      	cmp	r3, #0
    4d48:	d14e      	bne.n	4de8 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    4d4a:	79fb      	ldrb	r3, [r7, #7]
    4d4c:	683a      	ldr	r2, [r7, #0]
    4d4e:	4619      	mov	r1, r3
    4d50:	482a      	ldr	r0, [pc, #168]	; (4dfc <_gpio_set_direction+0xd0>)
    4d52:	4b2b      	ldr	r3, [pc, #172]	; (4e00 <_gpio_set_direction+0xd4>)
    4d54:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4d56:	683b      	ldr	r3, [r7, #0]
    4d58:	b29b      	uxth	r3, r3
    4d5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    4d5e:	79fb      	ldrb	r3, [r7, #7]
    4d60:	4619      	mov	r1, r3
    4d62:	4826      	ldr	r0, [pc, #152]	; (4dfc <_gpio_set_direction+0xd0>)
    4d64:	4b27      	ldr	r3, [pc, #156]	; (4e04 <_gpio_set_direction+0xd8>)
    4d66:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4d68:	683b      	ldr	r3, [r7, #0]
    4d6a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    4d6c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    4d70:	79fb      	ldrb	r3, [r7, #7]
    4d72:	4619      	mov	r1, r3
    4d74:	4821      	ldr	r0, [pc, #132]	; (4dfc <_gpio_set_direction+0xd0>)
    4d76:	4b23      	ldr	r3, [pc, #140]	; (4e04 <_gpio_set_direction+0xd8>)
    4d78:	4798      	blx	r3
		break;
    4d7a:	e03a      	b.n	4df2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    4d7c:	79fb      	ldrb	r3, [r7, #7]
    4d7e:	683a      	ldr	r2, [r7, #0]
    4d80:	4619      	mov	r1, r3
    4d82:	481e      	ldr	r0, [pc, #120]	; (4dfc <_gpio_set_direction+0xd0>)
    4d84:	4b1e      	ldr	r3, [pc, #120]	; (4e00 <_gpio_set_direction+0xd4>)
    4d86:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    4d88:	683b      	ldr	r3, [r7, #0]
    4d8a:	b29b      	uxth	r3, r3
    4d8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    4d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4d94:	79f9      	ldrb	r1, [r7, #7]
    4d96:	461a      	mov	r2, r3
    4d98:	4818      	ldr	r0, [pc, #96]	; (4dfc <_gpio_set_direction+0xd0>)
    4d9a:	4b1a      	ldr	r3, [pc, #104]	; (4e04 <_gpio_set_direction+0xd8>)
    4d9c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    4d9e:	683b      	ldr	r3, [r7, #0]
    4da0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    4da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4daa:	79f9      	ldrb	r1, [r7, #7]
    4dac:	461a      	mov	r2, r3
    4dae:	4813      	ldr	r0, [pc, #76]	; (4dfc <_gpio_set_direction+0xd0>)
    4db0:	4b14      	ldr	r3, [pc, #80]	; (4e04 <_gpio_set_direction+0xd8>)
    4db2:	4798      	blx	r3
		break;
    4db4:	e01d      	b.n	4df2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    4db6:	79fb      	ldrb	r3, [r7, #7]
    4db8:	683a      	ldr	r2, [r7, #0]
    4dba:	4619      	mov	r1, r3
    4dbc:	480f      	ldr	r0, [pc, #60]	; (4dfc <_gpio_set_direction+0xd0>)
    4dbe:	4b12      	ldr	r3, [pc, #72]	; (4e08 <_gpio_set_direction+0xdc>)
    4dc0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4dc2:	683b      	ldr	r3, [r7, #0]
    4dc4:	b29b      	uxth	r3, r3
    4dc6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    4dca:	79fb      	ldrb	r3, [r7, #7]
    4dcc:	4619      	mov	r1, r3
    4dce:	480b      	ldr	r0, [pc, #44]	; (4dfc <_gpio_set_direction+0xd0>)
    4dd0:	4b0c      	ldr	r3, [pc, #48]	; (4e04 <_gpio_set_direction+0xd8>)
    4dd2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4dd4:	683b      	ldr	r3, [r7, #0]
    4dd6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    4dd8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    4ddc:	79fb      	ldrb	r3, [r7, #7]
    4dde:	4619      	mov	r1, r3
    4de0:	4806      	ldr	r0, [pc, #24]	; (4dfc <_gpio_set_direction+0xd0>)
    4de2:	4b08      	ldr	r3, [pc, #32]	; (4e04 <_gpio_set_direction+0xd8>)
    4de4:	4798      	blx	r3
		break;
    4de6:	e004      	b.n	4df2 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    4de8:	2246      	movs	r2, #70	; 0x46
    4dea:	4908      	ldr	r1, [pc, #32]	; (4e0c <_gpio_set_direction+0xe0>)
    4dec:	2000      	movs	r0, #0
    4dee:	4b08      	ldr	r3, [pc, #32]	; (4e10 <_gpio_set_direction+0xe4>)
    4df0:	4798      	blx	r3
	}
}
    4df2:	bf00      	nop
    4df4:	3708      	adds	r7, #8
    4df6:	46bd      	mov	sp, r7
    4df8:	bd80      	pop	{r7, pc}
    4dfa:	bf00      	nop
    4dfc:	41008000 	.word	0x41008000
    4e00:	00004aeb 	.word	0x00004aeb
    4e04:	00004d03 	.word	0x00004d03
    4e08:	00004ac3 	.word	0x00004ac3
    4e0c:	000218cc 	.word	0x000218cc
    4e10:	00007e21 	.word	0x00007e21

00004e14 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    4e14:	b580      	push	{r7, lr}
    4e16:	b082      	sub	sp, #8
    4e18:	af00      	add	r7, sp, #0
    4e1a:	4603      	mov	r3, r0
    4e1c:	6039      	str	r1, [r7, #0]
    4e1e:	71fb      	strb	r3, [r7, #7]
    4e20:	4613      	mov	r3, r2
    4e22:	71bb      	strb	r3, [r7, #6]
	if (level) {
    4e24:	79bb      	ldrb	r3, [r7, #6]
    4e26:	2b00      	cmp	r3, #0
    4e28:	d006      	beq.n	4e38 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    4e2a:	79fb      	ldrb	r3, [r7, #7]
    4e2c:	683a      	ldr	r2, [r7, #0]
    4e2e:	4619      	mov	r1, r3
    4e30:	4806      	ldr	r0, [pc, #24]	; (4e4c <_gpio_set_level+0x38>)
    4e32:	4b07      	ldr	r3, [pc, #28]	; (4e50 <_gpio_set_level+0x3c>)
    4e34:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    4e36:	e005      	b.n	4e44 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    4e38:	79fb      	ldrb	r3, [r7, #7]
    4e3a:	683a      	ldr	r2, [r7, #0]
    4e3c:	4619      	mov	r1, r3
    4e3e:	4803      	ldr	r0, [pc, #12]	; (4e4c <_gpio_set_level+0x38>)
    4e40:	4b04      	ldr	r3, [pc, #16]	; (4e54 <_gpio_set_level+0x40>)
    4e42:	4798      	blx	r3
}
    4e44:	bf00      	nop
    4e46:	3708      	adds	r7, #8
    4e48:	46bd      	mov	sp, r7
    4e4a:	bd80      	pop	{r7, pc}
    4e4c:	41008000 	.word	0x41008000
    4e50:	00004b13 	.word	0x00004b13
    4e54:	00004b3b 	.word	0x00004b3b

00004e58 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    4e58:	b580      	push	{r7, lr}
    4e5a:	b082      	sub	sp, #8
    4e5c:	af00      	add	r7, sp, #0
    4e5e:	4603      	mov	r3, r0
    4e60:	71fb      	strb	r3, [r7, #7]
    4e62:	460b      	mov	r3, r1
    4e64:	71bb      	strb	r3, [r7, #6]
    4e66:	4613      	mov	r3, r2
    4e68:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    4e6a:	797b      	ldrb	r3, [r7, #5]
    4e6c:	2b01      	cmp	r3, #1
    4e6e:	d00a      	beq.n	4e86 <_gpio_set_pin_pull_mode+0x2e>
    4e70:	2b02      	cmp	r3, #2
    4e72:	d01f      	beq.n	4eb4 <_gpio_set_pin_pull_mode+0x5c>
    4e74:	2b00      	cmp	r3, #0
    4e76:	d134      	bne.n	4ee2 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    4e78:	79ba      	ldrb	r2, [r7, #6]
    4e7a:	79fb      	ldrb	r3, [r7, #7]
    4e7c:	4619      	mov	r1, r3
    4e7e:	481e      	ldr	r0, [pc, #120]	; (4ef8 <_gpio_set_pin_pull_mode+0xa0>)
    4e80:	4b1e      	ldr	r3, [pc, #120]	; (4efc <_gpio_set_pin_pull_mode+0xa4>)
    4e82:	4798      	blx	r3
		break;
    4e84:	e033      	b.n	4eee <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    4e86:	79bb      	ldrb	r3, [r7, #6]
    4e88:	2201      	movs	r2, #1
    4e8a:	409a      	lsls	r2, r3
    4e8c:	79fb      	ldrb	r3, [r7, #7]
    4e8e:	4619      	mov	r1, r3
    4e90:	4819      	ldr	r0, [pc, #100]	; (4ef8 <_gpio_set_pin_pull_mode+0xa0>)
    4e92:	4b1b      	ldr	r3, [pc, #108]	; (4f00 <_gpio_set_pin_pull_mode+0xa8>)
    4e94:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4e96:	79ba      	ldrb	r2, [r7, #6]
    4e98:	79fb      	ldrb	r3, [r7, #7]
    4e9a:	4619      	mov	r1, r3
    4e9c:	4816      	ldr	r0, [pc, #88]	; (4ef8 <_gpio_set_pin_pull_mode+0xa0>)
    4e9e:	4b19      	ldr	r3, [pc, #100]	; (4f04 <_gpio_set_pin_pull_mode+0xac>)
    4ea0:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    4ea2:	79bb      	ldrb	r3, [r7, #6]
    4ea4:	2201      	movs	r2, #1
    4ea6:	409a      	lsls	r2, r3
    4ea8:	79fb      	ldrb	r3, [r7, #7]
    4eaa:	4619      	mov	r1, r3
    4eac:	4812      	ldr	r0, [pc, #72]	; (4ef8 <_gpio_set_pin_pull_mode+0xa0>)
    4eae:	4b16      	ldr	r3, [pc, #88]	; (4f08 <_gpio_set_pin_pull_mode+0xb0>)
    4eb0:	4798      	blx	r3
		break;
    4eb2:	e01c      	b.n	4eee <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    4eb4:	79bb      	ldrb	r3, [r7, #6]
    4eb6:	2201      	movs	r2, #1
    4eb8:	409a      	lsls	r2, r3
    4eba:	79fb      	ldrb	r3, [r7, #7]
    4ebc:	4619      	mov	r1, r3
    4ebe:	480e      	ldr	r0, [pc, #56]	; (4ef8 <_gpio_set_pin_pull_mode+0xa0>)
    4ec0:	4b0f      	ldr	r3, [pc, #60]	; (4f00 <_gpio_set_pin_pull_mode+0xa8>)
    4ec2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4ec4:	79ba      	ldrb	r2, [r7, #6]
    4ec6:	79fb      	ldrb	r3, [r7, #7]
    4ec8:	4619      	mov	r1, r3
    4eca:	480b      	ldr	r0, [pc, #44]	; (4ef8 <_gpio_set_pin_pull_mode+0xa0>)
    4ecc:	4b0d      	ldr	r3, [pc, #52]	; (4f04 <_gpio_set_pin_pull_mode+0xac>)
    4ece:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    4ed0:	79bb      	ldrb	r3, [r7, #6]
    4ed2:	2201      	movs	r2, #1
    4ed4:	409a      	lsls	r2, r3
    4ed6:	79fb      	ldrb	r3, [r7, #7]
    4ed8:	4619      	mov	r1, r3
    4eda:	4807      	ldr	r0, [pc, #28]	; (4ef8 <_gpio_set_pin_pull_mode+0xa0>)
    4edc:	4b0b      	ldr	r3, [pc, #44]	; (4f0c <_gpio_set_pin_pull_mode+0xb4>)
    4ede:	4798      	blx	r3
		break;
    4ee0:	e005      	b.n	4eee <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    4ee2:	2289      	movs	r2, #137	; 0x89
    4ee4:	490a      	ldr	r1, [pc, #40]	; (4f10 <_gpio_set_pin_pull_mode+0xb8>)
    4ee6:	2000      	movs	r0, #0
    4ee8:	4b0a      	ldr	r3, [pc, #40]	; (4f14 <_gpio_set_pin_pull_mode+0xbc>)
    4eea:	4798      	blx	r3
		break;
    4eec:	bf00      	nop
	}
}
    4eee:	bf00      	nop
    4ef0:	3708      	adds	r7, #8
    4ef2:	46bd      	mov	sp, r7
    4ef4:	bd80      	pop	{r7, pc}
    4ef6:	bf00      	nop
    4ef8:	41008000 	.word	0x41008000
    4efc:	00004cbf 	.word	0x00004cbf
    4f00:	00004aeb 	.word	0x00004aeb
    4f04:	00004c7b 	.word	0x00004c7b
    4f08:	00004b13 	.word	0x00004b13
    4f0c:	00004b3b 	.word	0x00004b3b
    4f10:	000218cc 	.word	0x000218cc
    4f14:	00007e21 	.word	0x00007e21

00004f18 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    4f18:	b590      	push	{r4, r7, lr}
    4f1a:	b085      	sub	sp, #20
    4f1c:	af00      	add	r7, sp, #0
    4f1e:	6078      	str	r0, [r7, #4]
    4f20:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    4f22:	687b      	ldr	r3, [r7, #4]
    4f24:	095b      	lsrs	r3, r3, #5
    4f26:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	b2db      	uxtb	r3, r3
    4f2c:	f003 031f 	and.w	r3, r3, #31
    4f30:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    4f32:	683b      	ldr	r3, [r7, #0]
    4f34:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f38:	d106      	bne.n	4f48 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    4f3a:	7bba      	ldrb	r2, [r7, #14]
    4f3c:	7bf9      	ldrb	r1, [r7, #15]
    4f3e:	2300      	movs	r3, #0
    4f40:	4812      	ldr	r0, [pc, #72]	; (4f8c <_gpio_set_pin_function+0x74>)
    4f42:	4c13      	ldr	r4, [pc, #76]	; (4f90 <_gpio_set_pin_function+0x78>)
    4f44:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    4f46:	e01d      	b.n	4f84 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    4f48:	7bba      	ldrb	r2, [r7, #14]
    4f4a:	7bf9      	ldrb	r1, [r7, #15]
    4f4c:	2301      	movs	r3, #1
    4f4e:	480f      	ldr	r0, [pc, #60]	; (4f8c <_gpio_set_pin_function+0x74>)
    4f50:	4c0f      	ldr	r4, [pc, #60]	; (4f90 <_gpio_set_pin_function+0x78>)
    4f52:	47a0      	blx	r4
		if (pin & 1) {
    4f54:	7bbb      	ldrb	r3, [r7, #14]
    4f56:	f003 0301 	and.w	r3, r3, #1
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	d009      	beq.n	4f72 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    4f5e:	7bbb      	ldrb	r3, [r7, #14]
    4f60:	085b      	lsrs	r3, r3, #1
    4f62:	b2da      	uxtb	r2, r3
    4f64:	683b      	ldr	r3, [r7, #0]
    4f66:	b2db      	uxtb	r3, r3
    4f68:	7bf9      	ldrb	r1, [r7, #15]
    4f6a:	4808      	ldr	r0, [pc, #32]	; (4f8c <_gpio_set_pin_function+0x74>)
    4f6c:	4c09      	ldr	r4, [pc, #36]	; (4f94 <_gpio_set_pin_function+0x7c>)
    4f6e:	47a0      	blx	r4
}
    4f70:	e008      	b.n	4f84 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    4f72:	7bbb      	ldrb	r3, [r7, #14]
    4f74:	085b      	lsrs	r3, r3, #1
    4f76:	b2da      	uxtb	r2, r3
    4f78:	683b      	ldr	r3, [r7, #0]
    4f7a:	b2db      	uxtb	r3, r3
    4f7c:	7bf9      	ldrb	r1, [r7, #15]
    4f7e:	4803      	ldr	r0, [pc, #12]	; (4f8c <_gpio_set_pin_function+0x74>)
    4f80:	4c05      	ldr	r4, [pc, #20]	; (4f98 <_gpio_set_pin_function+0x80>)
    4f82:	47a0      	blx	r4
}
    4f84:	bf00      	nop
    4f86:	3714      	adds	r7, #20
    4f88:	46bd      	mov	sp, r7
    4f8a:	bd90      	pop	{r4, r7, pc}
    4f8c:	41008000 	.word	0x41008000
    4f90:	00004c21 	.word	0x00004c21
    4f94:	00004bc3 	.word	0x00004bc3
    4f98:	00004b63 	.word	0x00004b63

00004f9c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b082      	sub	sp, #8
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	4603      	mov	r3, r0
    4fa4:	460a      	mov	r2, r1
    4fa6:	71fb      	strb	r3, [r7, #7]
    4fa8:	4613      	mov	r3, r2
    4faa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    4fac:	79fb      	ldrb	r3, [r7, #7]
    4fae:	095b      	lsrs	r3, r3, #5
    4fb0:	b2d8      	uxtb	r0, r3
    4fb2:	79fb      	ldrb	r3, [r7, #7]
    4fb4:	f003 031f 	and.w	r3, r3, #31
    4fb8:	b2db      	uxtb	r3, r3
    4fba:	79ba      	ldrb	r2, [r7, #6]
    4fbc:	4619      	mov	r1, r3
    4fbe:	4b03      	ldr	r3, [pc, #12]	; (4fcc <gpio_set_pin_pull_mode+0x30>)
    4fc0:	4798      	blx	r3
}
    4fc2:	bf00      	nop
    4fc4:	3708      	adds	r7, #8
    4fc6:	46bd      	mov	sp, r7
    4fc8:	bd80      	pop	{r7, pc}
    4fca:	bf00      	nop
    4fcc:	00004e59 	.word	0x00004e59

00004fd0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    4fd0:	b580      	push	{r7, lr}
    4fd2:	b082      	sub	sp, #8
    4fd4:	af00      	add	r7, sp, #0
    4fd6:	6078      	str	r0, [r7, #4]
    4fd8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    4fda:	6839      	ldr	r1, [r7, #0]
    4fdc:	6878      	ldr	r0, [r7, #4]
    4fde:	4b03      	ldr	r3, [pc, #12]	; (4fec <gpio_set_pin_function+0x1c>)
    4fe0:	4798      	blx	r3
}
    4fe2:	bf00      	nop
    4fe4:	3708      	adds	r7, #8
    4fe6:	46bd      	mov	sp, r7
    4fe8:	bd80      	pop	{r7, pc}
    4fea:	bf00      	nop
    4fec:	00004f19 	.word	0x00004f19

00004ff0 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    4ff0:	b580      	push	{r7, lr}
    4ff2:	b082      	sub	sp, #8
    4ff4:	af00      	add	r7, sp, #0
    4ff6:	4603      	mov	r3, r0
    4ff8:	460a      	mov	r2, r1
    4ffa:	71fb      	strb	r3, [r7, #7]
    4ffc:	4613      	mov	r3, r2
    4ffe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    5000:	79fb      	ldrb	r3, [r7, #7]
    5002:	095b      	lsrs	r3, r3, #5
    5004:	b2d8      	uxtb	r0, r3
    5006:	79fb      	ldrb	r3, [r7, #7]
    5008:	f003 031f 	and.w	r3, r3, #31
    500c:	2201      	movs	r2, #1
    500e:	fa02 f303 	lsl.w	r3, r2, r3
    5012:	79ba      	ldrb	r2, [r7, #6]
    5014:	4619      	mov	r1, r3
    5016:	4b03      	ldr	r3, [pc, #12]	; (5024 <gpio_set_pin_direction+0x34>)
    5018:	4798      	blx	r3
}
    501a:	bf00      	nop
    501c:	3708      	adds	r7, #8
    501e:	46bd      	mov	sp, r7
    5020:	bd80      	pop	{r7, pc}
    5022:	bf00      	nop
    5024:	00004d2d 	.word	0x00004d2d

00005028 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    5028:	b580      	push	{r7, lr}
    502a:	b082      	sub	sp, #8
    502c:	af00      	add	r7, sp, #0
    502e:	4603      	mov	r3, r0
    5030:	460a      	mov	r2, r1
    5032:	71fb      	strb	r3, [r7, #7]
    5034:	4613      	mov	r3, r2
    5036:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    5038:	79fb      	ldrb	r3, [r7, #7]
    503a:	095b      	lsrs	r3, r3, #5
    503c:	b2d8      	uxtb	r0, r3
    503e:	79fb      	ldrb	r3, [r7, #7]
    5040:	f003 031f 	and.w	r3, r3, #31
    5044:	2201      	movs	r2, #1
    5046:	fa02 f303 	lsl.w	r3, r2, r3
    504a:	79ba      	ldrb	r2, [r7, #6]
    504c:	4619      	mov	r1, r3
    504e:	4b03      	ldr	r3, [pc, #12]	; (505c <gpio_set_pin_level+0x34>)
    5050:	4798      	blx	r3
}
    5052:	bf00      	nop
    5054:	3708      	adds	r7, #8
    5056:	46bd      	mov	sp, r7
    5058:	bd80      	pop	{r7, pc}
    505a:	bf00      	nop
    505c:	00004e15 	.word	0x00004e15

00005060 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    5060:	b580      	push	{r7, lr}
    5062:	af00      	add	r7, sp, #0
	_init_chip();
    5064:	4b01      	ldr	r3, [pc, #4]	; (506c <init_mcu+0xc>)
    5066:	4798      	blx	r3
}
    5068:	bf00      	nop
    506a:	bd80      	pop	{r7, pc}
    506c:	00008a2d 	.word	0x00008a2d

00005070 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    5070:	b580      	push	{r7, lr}
    5072:	b082      	sub	sp, #8
    5074:	af00      	add	r7, sp, #0
    5076:	6078      	str	r0, [r7, #4]
    5078:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    507a:	687b      	ldr	r3, [r7, #4]
    507c:	2b00      	cmp	r3, #0
    507e:	d004      	beq.n	508a <wdt_init+0x1a>
    5080:	683b      	ldr	r3, [r7, #0]
    5082:	2b00      	cmp	r3, #0
    5084:	d001      	beq.n	508a <wdt_init+0x1a>
    5086:	2301      	movs	r3, #1
    5088:	e000      	b.n	508c <wdt_init+0x1c>
    508a:	2300      	movs	r3, #0
    508c:	f003 0301 	and.w	r3, r3, #1
    5090:	b2db      	uxtb	r3, r3
    5092:	2248      	movs	r2, #72	; 0x48
    5094:	4907      	ldr	r1, [pc, #28]	; (50b4 <wdt_init+0x44>)
    5096:	4618      	mov	r0, r3
    5098:	4b07      	ldr	r3, [pc, #28]	; (50b8 <wdt_init+0x48>)
    509a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    509c:	687b      	ldr	r3, [r7, #4]
    509e:	683a      	ldr	r2, [r7, #0]
    50a0:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    50a2:	687b      	ldr	r3, [r7, #4]
    50a4:	4618      	mov	r0, r3
    50a6:	4b05      	ldr	r3, [pc, #20]	; (50bc <wdt_init+0x4c>)
    50a8:	4798      	blx	r3
    50aa:	4603      	mov	r3, r0
}
    50ac:	4618      	mov	r0, r3
    50ae:	3708      	adds	r7, #8
    50b0:	46bd      	mov	sp, r7
    50b2:	bd80      	pop	{r7, pc}
    50b4:	000218e8 	.word	0x000218e8
    50b8:	00007e21 	.word	0x00007e21
    50bc:	000101d1 	.word	0x000101d1

000050c0 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    50c0:	b580      	push	{r7, lr}
    50c2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    50c4:	4804      	ldr	r0, [pc, #16]	; (50d8 <CRC_CALC_init+0x18>)
    50c6:	4b05      	ldr	r3, [pc, #20]	; (50dc <CRC_CALC_init+0x1c>)
    50c8:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    50ca:	4905      	ldr	r1, [pc, #20]	; (50e0 <CRC_CALC_init+0x20>)
    50cc:	4805      	ldr	r0, [pc, #20]	; (50e4 <CRC_CALC_init+0x24>)
    50ce:	4b06      	ldr	r3, [pc, #24]	; (50e8 <CRC_CALC_init+0x28>)
    50d0:	4798      	blx	r3
}
    50d2:	bf00      	nop
    50d4:	bd80      	pop	{r7, pc}
    50d6:	bf00      	nop
    50d8:	40000800 	.word	0x40000800
    50dc:	00004903 	.word	0x00004903
    50e0:	41002000 	.word	0x41002000
    50e4:	2000a778 	.word	0x2000a778
    50e8:	00006395 	.word	0x00006395

000050ec <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    50ec:	b580      	push	{r7, lr}
    50ee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    50f0:	2244      	movs	r2, #68	; 0x44
    50f2:	2104      	movs	r1, #4
    50f4:	4832      	ldr	r0, [pc, #200]	; (51c0 <EXTERNAL_IRQ_0_init+0xd4>)
    50f6:	4b33      	ldr	r3, [pc, #204]	; (51c4 <EXTERNAL_IRQ_0_init+0xd8>)
    50f8:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    50fa:	4833      	ldr	r0, [pc, #204]	; (51c8 <EXTERNAL_IRQ_0_init+0xdc>)
    50fc:	4b33      	ldr	r3, [pc, #204]	; (51cc <EXTERNAL_IRQ_0_init+0xe0>)
    50fe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    5100:	2101      	movs	r1, #1
    5102:	2040      	movs	r0, #64	; 0x40
    5104:	4b32      	ldr	r3, [pc, #200]	; (51d0 <EXTERNAL_IRQ_0_init+0xe4>)
    5106:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    5108:	2100      	movs	r1, #0
    510a:	2040      	movs	r0, #64	; 0x40
    510c:	4b31      	ldr	r3, [pc, #196]	; (51d4 <EXTERNAL_IRQ_0_init+0xe8>)
    510e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    5110:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5114:	2040      	movs	r0, #64	; 0x40
    5116:	4b30      	ldr	r3, [pc, #192]	; (51d8 <EXTERNAL_IRQ_0_init+0xec>)
    5118:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    511a:	2101      	movs	r1, #1
    511c:	2004      	movs	r0, #4
    511e:	4b2c      	ldr	r3, [pc, #176]	; (51d0 <EXTERNAL_IRQ_0_init+0xe4>)
    5120:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    5122:	2102      	movs	r1, #2
    5124:	2004      	movs	r0, #4
    5126:	4b2b      	ldr	r3, [pc, #172]	; (51d4 <EXTERNAL_IRQ_0_init+0xe8>)
    5128:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    512a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    512e:	2004      	movs	r0, #4
    5130:	4b29      	ldr	r3, [pc, #164]	; (51d8 <EXTERNAL_IRQ_0_init+0xec>)
    5132:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    5134:	2101      	movs	r1, #1
    5136:	2005      	movs	r0, #5
    5138:	4b25      	ldr	r3, [pc, #148]	; (51d0 <EXTERNAL_IRQ_0_init+0xe4>)
    513a:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    513c:	2102      	movs	r1, #2
    513e:	2005      	movs	r0, #5
    5140:	4b24      	ldr	r3, [pc, #144]	; (51d4 <EXTERNAL_IRQ_0_init+0xe8>)
    5142:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    5144:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    5148:	2005      	movs	r0, #5
    514a:	4b23      	ldr	r3, [pc, #140]	; (51d8 <EXTERNAL_IRQ_0_init+0xec>)
    514c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    514e:	2101      	movs	r1, #1
    5150:	2056      	movs	r0, #86	; 0x56
    5152:	4b1f      	ldr	r3, [pc, #124]	; (51d0 <EXTERNAL_IRQ_0_init+0xe4>)
    5154:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    5156:	2102      	movs	r1, #2
    5158:	2056      	movs	r0, #86	; 0x56
    515a:	4b1e      	ldr	r3, [pc, #120]	; (51d4 <EXTERNAL_IRQ_0_init+0xe8>)
    515c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    515e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    5162:	2056      	movs	r0, #86	; 0x56
    5164:	4b1c      	ldr	r3, [pc, #112]	; (51d8 <EXTERNAL_IRQ_0_init+0xec>)
    5166:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    5168:	2101      	movs	r1, #1
    516a:	2057      	movs	r0, #87	; 0x57
    516c:	4b18      	ldr	r3, [pc, #96]	; (51d0 <EXTERNAL_IRQ_0_init+0xe4>)
    516e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    5170:	2102      	movs	r1, #2
    5172:	2057      	movs	r0, #87	; 0x57
    5174:	4b17      	ldr	r3, [pc, #92]	; (51d4 <EXTERNAL_IRQ_0_init+0xe8>)
    5176:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    5178:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    517c:	2057      	movs	r0, #87	; 0x57
    517e:	4b16      	ldr	r3, [pc, #88]	; (51d8 <EXTERNAL_IRQ_0_init+0xec>)
    5180:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    5182:	2101      	movs	r1, #1
    5184:	2028      	movs	r0, #40	; 0x28
    5186:	4b12      	ldr	r3, [pc, #72]	; (51d0 <EXTERNAL_IRQ_0_init+0xe4>)
    5188:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    518a:	2100      	movs	r1, #0
    518c:	2028      	movs	r0, #40	; 0x28
    518e:	4b11      	ldr	r3, [pc, #68]	; (51d4 <EXTERNAL_IRQ_0_init+0xe8>)
    5190:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    5192:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    5196:	2028      	movs	r0, #40	; 0x28
    5198:	4b0f      	ldr	r3, [pc, #60]	; (51d8 <EXTERNAL_IRQ_0_init+0xec>)
    519a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    519c:	2101      	movs	r1, #1
    519e:	2029      	movs	r0, #41	; 0x29
    51a0:	4b0b      	ldr	r3, [pc, #44]	; (51d0 <EXTERNAL_IRQ_0_init+0xe4>)
    51a2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    51a4:	2100      	movs	r1, #0
    51a6:	2029      	movs	r0, #41	; 0x29
    51a8:	4b0a      	ldr	r3, [pc, #40]	; (51d4 <EXTERNAL_IRQ_0_init+0xe8>)
    51aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    51ac:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    51b0:	2029      	movs	r0, #41	; 0x29
    51b2:	4b09      	ldr	r3, [pc, #36]	; (51d8 <EXTERNAL_IRQ_0_init+0xec>)
    51b4:	4798      	blx	r3

	ext_irq_init();
    51b6:	4b09      	ldr	r3, [pc, #36]	; (51dc <EXTERNAL_IRQ_0_init+0xf0>)
    51b8:	4798      	blx	r3
}
    51ba:	bf00      	nop
    51bc:	bd80      	pop	{r7, pc}
    51be:	bf00      	nop
    51c0:	40001c00 	.word	0x40001c00
    51c4:	0000477d 	.word	0x0000477d
    51c8:	40000800 	.word	0x40000800
    51cc:	00004863 	.word	0x00004863
    51d0:	00004ff1 	.word	0x00004ff1
    51d4:	00004f9d 	.word	0x00004f9d
    51d8:	00004fd1 	.word	0x00004fd1
    51dc:	000064f9 	.word	0x000064f9

000051e0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    51e0:	b580      	push	{r7, lr}
    51e2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    51e4:	2244      	movs	r2, #68	; 0x44
    51e6:	210b      	movs	r1, #11
    51e8:	4807      	ldr	r0, [pc, #28]	; (5208 <EVENT_SYSTEM_0_init+0x28>)
    51ea:	4b08      	ldr	r3, [pc, #32]	; (520c <EVENT_SYSTEM_0_init+0x2c>)
    51ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    51ee:	2244      	movs	r2, #68	; 0x44
    51f0:	210c      	movs	r1, #12
    51f2:	4805      	ldr	r0, [pc, #20]	; (5208 <EVENT_SYSTEM_0_init+0x28>)
    51f4:	4b05      	ldr	r3, [pc, #20]	; (520c <EVENT_SYSTEM_0_init+0x2c>)
    51f6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    51f8:	4805      	ldr	r0, [pc, #20]	; (5210 <EVENT_SYSTEM_0_init+0x30>)
    51fa:	4b06      	ldr	r3, [pc, #24]	; (5214 <EVENT_SYSTEM_0_init+0x34>)
    51fc:	4798      	blx	r3

	event_system_init();
    51fe:	4b06      	ldr	r3, [pc, #24]	; (5218 <EVENT_SYSTEM_0_init+0x38>)
    5200:	4798      	blx	r3
}
    5202:	bf00      	nop
    5204:	bd80      	pop	{r7, pc}
    5206:	bf00      	nop
    5208:	40001c00 	.word	0x40001c00
    520c:	0000477d 	.word	0x0000477d
    5210:	40000800 	.word	0x40000800
    5214:	00004923 	.word	0x00004923
    5218:	000064e5 	.word	0x000064e5

0000521c <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    521c:	b580      	push	{r7, lr}
    521e:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    5220:	2101      	movs	r1, #1
    5222:	202b      	movs	r0, #43	; 0x2b
    5224:	4b2b      	ldr	r3, [pc, #172]	; (52d4 <QSPI_N25Q256_PORT_init+0xb8>)
    5226:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    5228:	2100      	movs	r1, #0
    522a:	202b      	movs	r0, #43	; 0x2b
    522c:	4b2a      	ldr	r3, [pc, #168]	; (52d8 <QSPI_N25Q256_PORT_init+0xbc>)
    522e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    5230:	492a      	ldr	r1, [pc, #168]	; (52dc <QSPI_N25Q256_PORT_init+0xc0>)
    5232:	202b      	movs	r0, #43	; 0x2b
    5234:	4b2a      	ldr	r3, [pc, #168]	; (52e0 <QSPI_N25Q256_PORT_init+0xc4>)
    5236:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    5238:	2102      	movs	r1, #2
    523a:	2008      	movs	r0, #8
    523c:	4b25      	ldr	r3, [pc, #148]	; (52d4 <QSPI_N25Q256_PORT_init+0xb8>)
    523e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    5240:	2100      	movs	r1, #0
    5242:	2008      	movs	r0, #8
    5244:	4b27      	ldr	r3, [pc, #156]	; (52e4 <QSPI_N25Q256_PORT_init+0xc8>)
    5246:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    5248:	2100      	movs	r1, #0
    524a:	2008      	movs	r0, #8
    524c:	4b22      	ldr	r3, [pc, #136]	; (52d8 <QSPI_N25Q256_PORT_init+0xbc>)
    524e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    5250:	4925      	ldr	r1, [pc, #148]	; (52e8 <QSPI_N25Q256_PORT_init+0xcc>)
    5252:	2008      	movs	r0, #8
    5254:	4b22      	ldr	r3, [pc, #136]	; (52e0 <QSPI_N25Q256_PORT_init+0xc4>)
    5256:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    5258:	2102      	movs	r1, #2
    525a:	2009      	movs	r0, #9
    525c:	4b1d      	ldr	r3, [pc, #116]	; (52d4 <QSPI_N25Q256_PORT_init+0xb8>)
    525e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    5260:	2100      	movs	r1, #0
    5262:	2009      	movs	r0, #9
    5264:	4b1f      	ldr	r3, [pc, #124]	; (52e4 <QSPI_N25Q256_PORT_init+0xc8>)
    5266:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    5268:	2100      	movs	r1, #0
    526a:	2009      	movs	r0, #9
    526c:	4b1a      	ldr	r3, [pc, #104]	; (52d8 <QSPI_N25Q256_PORT_init+0xbc>)
    526e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    5270:	491e      	ldr	r1, [pc, #120]	; (52ec <QSPI_N25Q256_PORT_init+0xd0>)
    5272:	2009      	movs	r0, #9
    5274:	4b1a      	ldr	r3, [pc, #104]	; (52e0 <QSPI_N25Q256_PORT_init+0xc4>)
    5276:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    5278:	2102      	movs	r1, #2
    527a:	200a      	movs	r0, #10
    527c:	4b15      	ldr	r3, [pc, #84]	; (52d4 <QSPI_N25Q256_PORT_init+0xb8>)
    527e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    5280:	2100      	movs	r1, #0
    5282:	200a      	movs	r0, #10
    5284:	4b17      	ldr	r3, [pc, #92]	; (52e4 <QSPI_N25Q256_PORT_init+0xc8>)
    5286:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    5288:	2100      	movs	r1, #0
    528a:	200a      	movs	r0, #10
    528c:	4b12      	ldr	r3, [pc, #72]	; (52d8 <QSPI_N25Q256_PORT_init+0xbc>)
    528e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    5290:	4917      	ldr	r1, [pc, #92]	; (52f0 <QSPI_N25Q256_PORT_init+0xd4>)
    5292:	200a      	movs	r0, #10
    5294:	4b12      	ldr	r3, [pc, #72]	; (52e0 <QSPI_N25Q256_PORT_init+0xc4>)
    5296:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    5298:	2102      	movs	r1, #2
    529a:	200b      	movs	r0, #11
    529c:	4b0d      	ldr	r3, [pc, #52]	; (52d4 <QSPI_N25Q256_PORT_init+0xb8>)
    529e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    52a0:	2100      	movs	r1, #0
    52a2:	200b      	movs	r0, #11
    52a4:	4b0f      	ldr	r3, [pc, #60]	; (52e4 <QSPI_N25Q256_PORT_init+0xc8>)
    52a6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    52a8:	2100      	movs	r1, #0
    52aa:	200b      	movs	r0, #11
    52ac:	4b0a      	ldr	r3, [pc, #40]	; (52d8 <QSPI_N25Q256_PORT_init+0xbc>)
    52ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    52b0:	4910      	ldr	r1, [pc, #64]	; (52f4 <QSPI_N25Q256_PORT_init+0xd8>)
    52b2:	200b      	movs	r0, #11
    52b4:	4b0a      	ldr	r3, [pc, #40]	; (52e0 <QSPI_N25Q256_PORT_init+0xc4>)
    52b6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    52b8:	2101      	movs	r1, #1
    52ba:	202a      	movs	r0, #42	; 0x2a
    52bc:	4b05      	ldr	r3, [pc, #20]	; (52d4 <QSPI_N25Q256_PORT_init+0xb8>)
    52be:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    52c0:	2100      	movs	r1, #0
    52c2:	202a      	movs	r0, #42	; 0x2a
    52c4:	4b04      	ldr	r3, [pc, #16]	; (52d8 <QSPI_N25Q256_PORT_init+0xbc>)
    52c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    52c8:	490b      	ldr	r1, [pc, #44]	; (52f8 <QSPI_N25Q256_PORT_init+0xdc>)
    52ca:	202a      	movs	r0, #42	; 0x2a
    52cc:	4b04      	ldr	r3, [pc, #16]	; (52e0 <QSPI_N25Q256_PORT_init+0xc4>)
    52ce:	4798      	blx	r3
}
    52d0:	bf00      	nop
    52d2:	bd80      	pop	{r7, pc}
    52d4:	00004ff1 	.word	0x00004ff1
    52d8:	00004f9d 	.word	0x00004f9d
    52dc:	002b0007 	.word	0x002b0007
    52e0:	00004fd1 	.word	0x00004fd1
    52e4:	00005029 	.word	0x00005029
    52e8:	00080007 	.word	0x00080007
    52ec:	00090007 	.word	0x00090007
    52f0:	000a0007 	.word	0x000a0007
    52f4:	000b0007 	.word	0x000b0007
    52f8:	002a0007 	.word	0x002a0007

000052fc <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    52fc:	b580      	push	{r7, lr}
    52fe:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    5300:	4805      	ldr	r0, [pc, #20]	; (5318 <QSPI_N25Q256_CLOCK_init+0x1c>)
    5302:	4b06      	ldr	r3, [pc, #24]	; (531c <QSPI_N25Q256_CLOCK_init+0x20>)
    5304:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    5306:	4804      	ldr	r0, [pc, #16]	; (5318 <QSPI_N25Q256_CLOCK_init+0x1c>)
    5308:	4b05      	ldr	r3, [pc, #20]	; (5320 <QSPI_N25Q256_CLOCK_init+0x24>)
    530a:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    530c:	4802      	ldr	r0, [pc, #8]	; (5318 <QSPI_N25Q256_CLOCK_init+0x1c>)
    530e:	4b05      	ldr	r3, [pc, #20]	; (5324 <QSPI_N25Q256_CLOCK_init+0x28>)
    5310:	4798      	blx	r3
}
    5312:	bf00      	nop
    5314:	bd80      	pop	{r7, pc}
    5316:	bf00      	nop
    5318:	40000800 	.word	0x40000800
    531c:	000047c3 	.word	0x000047c3
    5320:	00004803 	.word	0x00004803
    5324:	00004a03 	.word	0x00004a03

00005328 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    5328:	b580      	push	{r7, lr}
    532a:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    532c:	4b04      	ldr	r3, [pc, #16]	; (5340 <QSPI_N25Q256_init+0x18>)
    532e:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    5330:	4904      	ldr	r1, [pc, #16]	; (5344 <QSPI_N25Q256_init+0x1c>)
    5332:	4805      	ldr	r0, [pc, #20]	; (5348 <QSPI_N25Q256_init+0x20>)
    5334:	4b05      	ldr	r3, [pc, #20]	; (534c <QSPI_N25Q256_init+0x24>)
    5336:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    5338:	4b05      	ldr	r3, [pc, #20]	; (5350 <QSPI_N25Q256_init+0x28>)
    533a:	4798      	blx	r3
}
    533c:	bf00      	nop
    533e:	bd80      	pop	{r7, pc}
    5340:	000052fd 	.word	0x000052fd
    5344:	42003400 	.word	0x42003400
    5348:	2000a5ec 	.word	0x2000a5ec
    534c:	00006c7d 	.word	0x00006c7d
    5350:	0000521d 	.word	0x0000521d

00005354 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    5354:	b580      	push	{r7, lr}
    5356:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    5358:	4802      	ldr	r0, [pc, #8]	; (5364 <DATETIME_CLOCK_CLOCK_init+0x10>)
    535a:	4b03      	ldr	r3, [pc, #12]	; (5368 <DATETIME_CLOCK_CLOCK_init+0x14>)
    535c:	4798      	blx	r3
}
    535e:	bf00      	nop
    5360:	bd80      	pop	{r7, pc}
    5362:	bf00      	nop
    5364:	40000800 	.word	0x40000800
    5368:	00004843 	.word	0x00004843

0000536c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    536c:	b580      	push	{r7, lr}
    536e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    5370:	4b03      	ldr	r3, [pc, #12]	; (5380 <DATETIME_CLOCK_init+0x14>)
    5372:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    5374:	4903      	ldr	r1, [pc, #12]	; (5384 <DATETIME_CLOCK_init+0x18>)
    5376:	4804      	ldr	r0, [pc, #16]	; (5388 <DATETIME_CLOCK_init+0x1c>)
    5378:	4b04      	ldr	r3, [pc, #16]	; (538c <DATETIME_CLOCK_init+0x20>)
    537a:	4798      	blx	r3
}
    537c:	bf00      	nop
    537e:	bd80      	pop	{r7, pc}
    5380:	00005355 	.word	0x00005355
    5384:	40002400 	.word	0x40002400
    5388:	2000a754 	.word	0x2000a754
    538c:	00006099 	.word	0x00006099

00005390 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    5390:	b580      	push	{r7, lr}
    5392:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    5394:	2100      	movs	r1, #0
    5396:	2010      	movs	r0, #16
    5398:	4b11      	ldr	r3, [pc, #68]	; (53e0 <SPI_MEMORIES_PORT_init+0x50>)
    539a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    539c:	2102      	movs	r1, #2
    539e:	2010      	movs	r0, #16
    53a0:	4b10      	ldr	r3, [pc, #64]	; (53e4 <SPI_MEMORIES_PORT_init+0x54>)
    53a2:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    53a4:	4910      	ldr	r1, [pc, #64]	; (53e8 <SPI_MEMORIES_PORT_init+0x58>)
    53a6:	2010      	movs	r0, #16
    53a8:	4b10      	ldr	r3, [pc, #64]	; (53ec <SPI_MEMORIES_PORT_init+0x5c>)
    53aa:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    53ac:	2100      	movs	r1, #0
    53ae:	2011      	movs	r0, #17
    53b0:	4b0b      	ldr	r3, [pc, #44]	; (53e0 <SPI_MEMORIES_PORT_init+0x50>)
    53b2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    53b4:	2102      	movs	r1, #2
    53b6:	2011      	movs	r0, #17
    53b8:	4b0a      	ldr	r3, [pc, #40]	; (53e4 <SPI_MEMORIES_PORT_init+0x54>)
    53ba:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    53bc:	490c      	ldr	r1, [pc, #48]	; (53f0 <SPI_MEMORIES_PORT_init+0x60>)
    53be:	2011      	movs	r0, #17
    53c0:	4b0a      	ldr	r3, [pc, #40]	; (53ec <SPI_MEMORIES_PORT_init+0x5c>)
    53c2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    53c4:	2101      	movs	r1, #1
    53c6:	2012      	movs	r0, #18
    53c8:	4b06      	ldr	r3, [pc, #24]	; (53e4 <SPI_MEMORIES_PORT_init+0x54>)
    53ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    53cc:	2100      	movs	r1, #0
    53ce:	2012      	movs	r0, #18
    53d0:	4b08      	ldr	r3, [pc, #32]	; (53f4 <SPI_MEMORIES_PORT_init+0x64>)
    53d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    53d4:	4908      	ldr	r1, [pc, #32]	; (53f8 <SPI_MEMORIES_PORT_init+0x68>)
    53d6:	2012      	movs	r0, #18
    53d8:	4b04      	ldr	r3, [pc, #16]	; (53ec <SPI_MEMORIES_PORT_init+0x5c>)
    53da:	4798      	blx	r3
}
    53dc:	bf00      	nop
    53de:	bd80      	pop	{r7, pc}
    53e0:	00005029 	.word	0x00005029
    53e4:	00004ff1 	.word	0x00004ff1
    53e8:	00100002 	.word	0x00100002
    53ec:	00004fd1 	.word	0x00004fd1
    53f0:	00110002 	.word	0x00110002
    53f4:	00004f9d 	.word	0x00004f9d
    53f8:	00120002 	.word	0x00120002

000053fc <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    53fc:	b580      	push	{r7, lr}
    53fe:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5400:	2245      	movs	r2, #69	; 0x45
    5402:	2108      	movs	r1, #8
    5404:	4806      	ldr	r0, [pc, #24]	; (5420 <SPI_MEMORIES_CLOCK_init+0x24>)
    5406:	4b07      	ldr	r3, [pc, #28]	; (5424 <SPI_MEMORIES_CLOCK_init+0x28>)
    5408:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    540a:	224a      	movs	r2, #74	; 0x4a
    540c:	2103      	movs	r1, #3
    540e:	4804      	ldr	r0, [pc, #16]	; (5420 <SPI_MEMORIES_CLOCK_init+0x24>)
    5410:	4b04      	ldr	r3, [pc, #16]	; (5424 <SPI_MEMORIES_CLOCK_init+0x28>)
    5412:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    5414:	4804      	ldr	r0, [pc, #16]	; (5428 <SPI_MEMORIES_CLOCK_init+0x2c>)
    5416:	4b05      	ldr	r3, [pc, #20]	; (542c <SPI_MEMORIES_CLOCK_init+0x30>)
    5418:	4798      	blx	r3
}
    541a:	bf00      	nop
    541c:	bd80      	pop	{r7, pc}
    541e:	bf00      	nop
    5420:	40001c00 	.word	0x40001c00
    5424:	0000477d 	.word	0x0000477d
    5428:	40000800 	.word	0x40000800
    542c:	00004883 	.word	0x00004883

00005430 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    5430:	b580      	push	{r7, lr}
    5432:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    5434:	4b04      	ldr	r3, [pc, #16]	; (5448 <SPI_MEMORIES_init+0x18>)
    5436:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    5438:	4904      	ldr	r1, [pc, #16]	; (544c <SPI_MEMORIES_init+0x1c>)
    543a:	4805      	ldr	r0, [pc, #20]	; (5450 <SPI_MEMORIES_init+0x20>)
    543c:	4b05      	ldr	r3, [pc, #20]	; (5454 <SPI_MEMORIES_init+0x24>)
    543e:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    5440:	4b05      	ldr	r3, [pc, #20]	; (5458 <SPI_MEMORIES_init+0x28>)
    5442:	4798      	blx	r3
}
    5444:	bf00      	nop
    5446:	bd80      	pop	{r7, pc}
    5448:	000053fd 	.word	0x000053fd
    544c:	40003400 	.word	0x40003400
    5450:	2000a584 	.word	0x2000a584
    5454:	00006d8d 	.word	0x00006d8d
    5458:	00005391 	.word	0x00005391

0000545c <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    545c:	b580      	push	{r7, lr}
    545e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA12,
    5460:	2100      	movs	r1, #0
    5462:	200c      	movs	r0, #12
    5464:	4b07      	ldr	r3, [pc, #28]	; (5484 <I2C_SHARED_PORT_init+0x28>)
    5466:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
    5468:	4907      	ldr	r1, [pc, #28]	; (5488 <I2C_SHARED_PORT_init+0x2c>)
    546a:	200c      	movs	r0, #12
    546c:	4b07      	ldr	r3, [pc, #28]	; (548c <I2C_SHARED_PORT_init+0x30>)
    546e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA13,
    5470:	2100      	movs	r1, #0
    5472:	200d      	movs	r0, #13
    5474:	4b03      	ldr	r3, [pc, #12]	; (5484 <I2C_SHARED_PORT_init+0x28>)
    5476:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
    5478:	4905      	ldr	r1, [pc, #20]	; (5490 <I2C_SHARED_PORT_init+0x34>)
    547a:	200d      	movs	r0, #13
    547c:	4b03      	ldr	r3, [pc, #12]	; (548c <I2C_SHARED_PORT_init+0x30>)
    547e:	4798      	blx	r3
}
    5480:	bf00      	nop
    5482:	bd80      	pop	{r7, pc}
    5484:	00004f9d 	.word	0x00004f9d
    5488:	000c0002 	.word	0x000c0002
    548c:	00004fd1 	.word	0x00004fd1
    5490:	000d0002 	.word	0x000d0002

00005494 <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    5494:	b580      	push	{r7, lr}
    5496:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5498:	2242      	movs	r2, #66	; 0x42
    549a:	2117      	movs	r1, #23
    549c:	4806      	ldr	r0, [pc, #24]	; (54b8 <I2C_SHARED_CLOCK_init+0x24>)
    549e:	4b07      	ldr	r3, [pc, #28]	; (54bc <I2C_SHARED_CLOCK_init+0x28>)
    54a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    54a2:	224a      	movs	r2, #74	; 0x4a
    54a4:	2103      	movs	r1, #3
    54a6:	4804      	ldr	r0, [pc, #16]	; (54b8 <I2C_SHARED_CLOCK_init+0x24>)
    54a8:	4b04      	ldr	r3, [pc, #16]	; (54bc <I2C_SHARED_CLOCK_init+0x28>)
    54aa:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
    54ac:	4804      	ldr	r0, [pc, #16]	; (54c0 <I2C_SHARED_CLOCK_init+0x2c>)
    54ae:	4b05      	ldr	r3, [pc, #20]	; (54c4 <I2C_SHARED_CLOCK_init+0x30>)
    54b0:	4798      	blx	r3
}
    54b2:	bf00      	nop
    54b4:	bd80      	pop	{r7, pc}
    54b6:	bf00      	nop
    54b8:	40001c00 	.word	0x40001c00
    54bc:	0000477d 	.word	0x0000477d
    54c0:	40000800 	.word	0x40000800
    54c4:	00004943 	.word	0x00004943

000054c8 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    54c8:	b580      	push	{r7, lr}
    54ca:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    54cc:	4b04      	ldr	r3, [pc, #16]	; (54e0 <I2C_SHARED_init+0x18>)
    54ce:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM2);
    54d0:	4904      	ldr	r1, [pc, #16]	; (54e4 <I2C_SHARED_init+0x1c>)
    54d2:	4805      	ldr	r0, [pc, #20]	; (54e8 <I2C_SHARED_init+0x20>)
    54d4:	4b05      	ldr	r3, [pc, #20]	; (54ec <I2C_SHARED_init+0x24>)
    54d6:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    54d8:	4b05      	ldr	r3, [pc, #20]	; (54f0 <I2C_SHARED_init+0x28>)
    54da:	4798      	blx	r3
}
    54dc:	bf00      	nop
    54de:	bd80      	pop	{r7, pc}
    54e0:	00005495 	.word	0x00005495
    54e4:	41012000 	.word	0x41012000
    54e8:	2000a6d4 	.word	0x2000a6d4
    54ec:	00006aa1 	.word	0x00006aa1
    54f0:	0000545d 	.word	0x0000545d

000054f4 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    54f4:	b580      	push	{r7, lr}
    54f6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    54f8:	2100      	movs	r1, #0
    54fa:	203b      	movs	r0, #59	; 0x3b
    54fc:	4b11      	ldr	r3, [pc, #68]	; (5544 <SPI_TEMP_PORT_init+0x50>)
    54fe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    5500:	2102      	movs	r1, #2
    5502:	203b      	movs	r0, #59	; 0x3b
    5504:	4b10      	ldr	r3, [pc, #64]	; (5548 <SPI_TEMP_PORT_init+0x54>)
    5506:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    5508:	4910      	ldr	r1, [pc, #64]	; (554c <SPI_TEMP_PORT_init+0x58>)
    550a:	203b      	movs	r0, #59	; 0x3b
    550c:	4b10      	ldr	r3, [pc, #64]	; (5550 <SPI_TEMP_PORT_init+0x5c>)
    550e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    5510:	2100      	movs	r1, #0
    5512:	203a      	movs	r0, #58	; 0x3a
    5514:	4b0b      	ldr	r3, [pc, #44]	; (5544 <SPI_TEMP_PORT_init+0x50>)
    5516:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    5518:	2102      	movs	r1, #2
    551a:	203a      	movs	r0, #58	; 0x3a
    551c:	4b0a      	ldr	r3, [pc, #40]	; (5548 <SPI_TEMP_PORT_init+0x54>)
    551e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    5520:	490c      	ldr	r1, [pc, #48]	; (5554 <SPI_TEMP_PORT_init+0x60>)
    5522:	203a      	movs	r0, #58	; 0x3a
    5524:	4b0a      	ldr	r3, [pc, #40]	; (5550 <SPI_TEMP_PORT_init+0x5c>)
    5526:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    5528:	2101      	movs	r1, #1
    552a:	203c      	movs	r0, #60	; 0x3c
    552c:	4b06      	ldr	r3, [pc, #24]	; (5548 <SPI_TEMP_PORT_init+0x54>)
    552e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    5530:	2100      	movs	r1, #0
    5532:	203c      	movs	r0, #60	; 0x3c
    5534:	4b08      	ldr	r3, [pc, #32]	; (5558 <SPI_TEMP_PORT_init+0x64>)
    5536:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    5538:	4908      	ldr	r1, [pc, #32]	; (555c <SPI_TEMP_PORT_init+0x68>)
    553a:	203c      	movs	r0, #60	; 0x3c
    553c:	4b04      	ldr	r3, [pc, #16]	; (5550 <SPI_TEMP_PORT_init+0x5c>)
    553e:	4798      	blx	r3
}
    5540:	bf00      	nop
    5542:	bd80      	pop	{r7, pc}
    5544:	00005029 	.word	0x00005029
    5548:	00004ff1 	.word	0x00004ff1
    554c:	003b0003 	.word	0x003b0003
    5550:	00004fd1 	.word	0x00004fd1
    5554:	003a0003 	.word	0x003a0003
    5558:	00004f9d 	.word	0x00004f9d
    555c:	003c0003 	.word	0x003c0003

00005560 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    5560:	b580      	push	{r7, lr}
    5562:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5564:	2245      	movs	r2, #69	; 0x45
    5566:	2122      	movs	r1, #34	; 0x22
    5568:	4806      	ldr	r0, [pc, #24]	; (5584 <SPI_TEMP_CLOCK_init+0x24>)
    556a:	4b07      	ldr	r3, [pc, #28]	; (5588 <SPI_TEMP_CLOCK_init+0x28>)
    556c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    556e:	224a      	movs	r2, #74	; 0x4a
    5570:	2103      	movs	r1, #3
    5572:	4804      	ldr	r0, [pc, #16]	; (5584 <SPI_TEMP_CLOCK_init+0x24>)
    5574:	4b04      	ldr	r3, [pc, #16]	; (5588 <SPI_TEMP_CLOCK_init+0x28>)
    5576:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    5578:	4804      	ldr	r0, [pc, #16]	; (558c <SPI_TEMP_CLOCK_init+0x2c>)
    557a:	4b05      	ldr	r3, [pc, #20]	; (5590 <SPI_TEMP_CLOCK_init+0x30>)
    557c:	4798      	blx	r3
}
    557e:	bf00      	nop
    5580:	bd80      	pop	{r7, pc}
    5582:	bf00      	nop
    5584:	40001c00 	.word	0x40001c00
    5588:	0000477d 	.word	0x0000477d
    558c:	40000800 	.word	0x40000800
    5590:	00004a23 	.word	0x00004a23

00005594 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    5594:	b580      	push	{r7, lr}
    5596:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    5598:	4b05      	ldr	r3, [pc, #20]	; (55b0 <SPI_TEMP_init+0x1c>)
    559a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    559c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    55a0:	4804      	ldr	r0, [pc, #16]	; (55b4 <SPI_TEMP_init+0x20>)
    55a2:	4b05      	ldr	r3, [pc, #20]	; (55b8 <SPI_TEMP_init+0x24>)
    55a4:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    55a6:	4b05      	ldr	r3, [pc, #20]	; (55bc <SPI_TEMP_init+0x28>)
    55a8:	4798      	blx	r3
}
    55aa:	bf00      	nop
    55ac:	bd80      	pop	{r7, pc}
    55ae:	bf00      	nop
    55b0:	00005561 	.word	0x00005561
    55b4:	2000a5b4 	.word	0x2000a5b4
    55b8:	00006d8d 	.word	0x00006d8d
    55bc:	000054f5 	.word	0x000054f5

000055c0 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    55c0:	b580      	push	{r7, lr}
    55c2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    55c4:	2100      	movs	r1, #0
    55c6:	2017      	movs	r0, #23
    55c8:	4b07      	ldr	r3, [pc, #28]	; (55e8 <I2C_EXPANDER_PORT_init+0x28>)
    55ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    55cc:	4907      	ldr	r1, [pc, #28]	; (55ec <I2C_EXPANDER_PORT_init+0x2c>)
    55ce:	2017      	movs	r0, #23
    55d0:	4b07      	ldr	r3, [pc, #28]	; (55f0 <I2C_EXPANDER_PORT_init+0x30>)
    55d2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    55d4:	2100      	movs	r1, #0
    55d6:	2016      	movs	r0, #22
    55d8:	4b03      	ldr	r3, [pc, #12]	; (55e8 <I2C_EXPANDER_PORT_init+0x28>)
    55da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    55dc:	4905      	ldr	r1, [pc, #20]	; (55f4 <I2C_EXPANDER_PORT_init+0x34>)
    55de:	2016      	movs	r0, #22
    55e0:	4b03      	ldr	r3, [pc, #12]	; (55f0 <I2C_EXPANDER_PORT_init+0x30>)
    55e2:	4798      	blx	r3
}
    55e4:	bf00      	nop
    55e6:	bd80      	pop	{r7, pc}
    55e8:	00004f9d 	.word	0x00004f9d
    55ec:	00170003 	.word	0x00170003
    55f0:	00004fd1 	.word	0x00004fd1
    55f4:	00160003 	.word	0x00160003

000055f8 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    55f8:	b580      	push	{r7, lr}
    55fa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    55fc:	2248      	movs	r2, #72	; 0x48
    55fe:	2123      	movs	r1, #35	; 0x23
    5600:	4806      	ldr	r0, [pc, #24]	; (561c <I2C_EXPANDER_CLOCK_init+0x24>)
    5602:	4b07      	ldr	r3, [pc, #28]	; (5620 <I2C_EXPANDER_CLOCK_init+0x28>)
    5604:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5606:	224a      	movs	r2, #74	; 0x4a
    5608:	2103      	movs	r1, #3
    560a:	4804      	ldr	r0, [pc, #16]	; (561c <I2C_EXPANDER_CLOCK_init+0x24>)
    560c:	4b04      	ldr	r3, [pc, #16]	; (5620 <I2C_EXPANDER_CLOCK_init+0x28>)
    560e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    5610:	4804      	ldr	r0, [pc, #16]	; (5624 <I2C_EXPANDER_CLOCK_init+0x2c>)
    5612:	4b05      	ldr	r3, [pc, #20]	; (5628 <I2C_EXPANDER_CLOCK_init+0x30>)
    5614:	4798      	blx	r3
}
    5616:	bf00      	nop
    5618:	bd80      	pop	{r7, pc}
    561a:	bf00      	nop
    561c:	40001c00 	.word	0x40001c00
    5620:	0000477d 	.word	0x0000477d
    5624:	40000800 	.word	0x40000800
    5628:	00004a43 	.word	0x00004a43

0000562c <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    562c:	b580      	push	{r7, lr}
    562e:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    5630:	4b04      	ldr	r3, [pc, #16]	; (5644 <I2C_EXPANDER_init+0x18>)
    5632:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    5634:	4904      	ldr	r1, [pc, #16]	; (5648 <I2C_EXPANDER_init+0x1c>)
    5636:	4805      	ldr	r0, [pc, #20]	; (564c <I2C_EXPANDER_init+0x20>)
    5638:	4b05      	ldr	r3, [pc, #20]	; (5650 <I2C_EXPANDER_init+0x24>)
    563a:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    563c:	4b05      	ldr	r3, [pc, #20]	; (5654 <I2C_EXPANDER_init+0x28>)
    563e:	4798      	blx	r3
}
    5640:	bf00      	nop
    5642:	bd80      	pop	{r7, pc}
    5644:	000055f9 	.word	0x000055f9
    5648:	43000400 	.word	0x43000400
    564c:	2000a6b4 	.word	0x2000a6b4
    5650:	00006aa1 	.word	0x00006aa1
    5654:	000055c1 	.word	0x000055c1

00005658 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    5658:	b580      	push	{r7, lr}
    565a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    565c:	2100      	movs	r1, #0
    565e:	2044      	movs	r0, #68	; 0x44
    5660:	4b11      	ldr	r3, [pc, #68]	; (56a8 <SPI_HI3593_PORT_init+0x50>)
    5662:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    5664:	2102      	movs	r1, #2
    5666:	2044      	movs	r0, #68	; 0x44
    5668:	4b10      	ldr	r3, [pc, #64]	; (56ac <SPI_HI3593_PORT_init+0x54>)
    566a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    566c:	4910      	ldr	r1, [pc, #64]	; (56b0 <SPI_HI3593_PORT_init+0x58>)
    566e:	2044      	movs	r0, #68	; 0x44
    5670:	4b10      	ldr	r3, [pc, #64]	; (56b4 <SPI_HI3593_PORT_init+0x5c>)
    5672:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    5674:	2100      	movs	r1, #0
    5676:	2045      	movs	r0, #69	; 0x45
    5678:	4b0b      	ldr	r3, [pc, #44]	; (56a8 <SPI_HI3593_PORT_init+0x50>)
    567a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    567c:	2102      	movs	r1, #2
    567e:	2045      	movs	r0, #69	; 0x45
    5680:	4b0a      	ldr	r3, [pc, #40]	; (56ac <SPI_HI3593_PORT_init+0x54>)
    5682:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    5684:	490c      	ldr	r1, [pc, #48]	; (56b8 <SPI_HI3593_PORT_init+0x60>)
    5686:	2045      	movs	r0, #69	; 0x45
    5688:	4b0a      	ldr	r3, [pc, #40]	; (56b4 <SPI_HI3593_PORT_init+0x5c>)
    568a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    568c:	2101      	movs	r1, #1
    568e:	2047      	movs	r0, #71	; 0x47
    5690:	4b06      	ldr	r3, [pc, #24]	; (56ac <SPI_HI3593_PORT_init+0x54>)
    5692:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    5694:	2100      	movs	r1, #0
    5696:	2047      	movs	r0, #71	; 0x47
    5698:	4b08      	ldr	r3, [pc, #32]	; (56bc <SPI_HI3593_PORT_init+0x64>)
    569a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    569c:	4908      	ldr	r1, [pc, #32]	; (56c0 <SPI_HI3593_PORT_init+0x68>)
    569e:	2047      	movs	r0, #71	; 0x47
    56a0:	4b04      	ldr	r3, [pc, #16]	; (56b4 <SPI_HI3593_PORT_init+0x5c>)
    56a2:	4798      	blx	r3
}
    56a4:	bf00      	nop
    56a6:	bd80      	pop	{r7, pc}
    56a8:	00005029 	.word	0x00005029
    56ac:	00004ff1 	.word	0x00004ff1
    56b0:	00440002 	.word	0x00440002
    56b4:	00004fd1 	.word	0x00004fd1
    56b8:	00450002 	.word	0x00450002
    56bc:	00004f9d 	.word	0x00004f9d
    56c0:	00470002 	.word	0x00470002

000056c4 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    56c4:	b580      	push	{r7, lr}
    56c6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    56c8:	2242      	movs	r2, #66	; 0x42
    56ca:	2124      	movs	r1, #36	; 0x24
    56cc:	4806      	ldr	r0, [pc, #24]	; (56e8 <SPI_HI3593_CLOCK_init+0x24>)
    56ce:	4b07      	ldr	r3, [pc, #28]	; (56ec <SPI_HI3593_CLOCK_init+0x28>)
    56d0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    56d2:	224a      	movs	r2, #74	; 0x4a
    56d4:	2103      	movs	r1, #3
    56d6:	4804      	ldr	r0, [pc, #16]	; (56e8 <SPI_HI3593_CLOCK_init+0x24>)
    56d8:	4b04      	ldr	r3, [pc, #16]	; (56ec <SPI_HI3593_CLOCK_init+0x28>)
    56da:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    56dc:	4804      	ldr	r0, [pc, #16]	; (56f0 <SPI_HI3593_CLOCK_init+0x2c>)
    56de:	4b05      	ldr	r3, [pc, #20]	; (56f4 <SPI_HI3593_CLOCK_init+0x30>)
    56e0:	4798      	blx	r3
}
    56e2:	bf00      	nop
    56e4:	bd80      	pop	{r7, pc}
    56e6:	bf00      	nop
    56e8:	40001c00 	.word	0x40001c00
    56ec:	0000477d 	.word	0x0000477d
    56f0:	40000800 	.word	0x40000800
    56f4:	00004a63 	.word	0x00004a63

000056f8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    56f8:	b580      	push	{r7, lr}
    56fa:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    56fc:	4b04      	ldr	r3, [pc, #16]	; (5710 <SPI_HI3593_init+0x18>)
    56fe:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    5700:	4904      	ldr	r1, [pc, #16]	; (5714 <SPI_HI3593_init+0x1c>)
    5702:	4805      	ldr	r0, [pc, #20]	; (5718 <SPI_HI3593_init+0x20>)
    5704:	4b05      	ldr	r3, [pc, #20]	; (571c <SPI_HI3593_init+0x24>)
    5706:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    5708:	4b05      	ldr	r3, [pc, #20]	; (5720 <SPI_HI3593_init+0x28>)
    570a:	4798      	blx	r3
}
    570c:	bf00      	nop
    570e:	bd80      	pop	{r7, pc}
    5710:	000056c5 	.word	0x000056c5
    5714:	43000800 	.word	0x43000800
    5718:	2000a59c 	.word	0x2000a59c
    571c:	00006d8d 	.word	0x00006d8d
    5720:	00005659 	.word	0x00005659

00005724 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    5724:	b580      	push	{r7, lr}
    5726:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    5728:	2100      	movs	r1, #0
    572a:	2068      	movs	r0, #104	; 0x68
    572c:	4b07      	ldr	r3, [pc, #28]	; (574c <I2C_EEPROM_PORT_init+0x28>)
    572e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    5730:	4907      	ldr	r1, [pc, #28]	; (5750 <I2C_EEPROM_PORT_init+0x2c>)
    5732:	2068      	movs	r0, #104	; 0x68
    5734:	4b07      	ldr	r3, [pc, #28]	; (5754 <I2C_EEPROM_PORT_init+0x30>)
    5736:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    5738:	2100      	movs	r1, #0
    573a:	2069      	movs	r0, #105	; 0x69
    573c:	4b03      	ldr	r3, [pc, #12]	; (574c <I2C_EEPROM_PORT_init+0x28>)
    573e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    5740:	4905      	ldr	r1, [pc, #20]	; (5758 <I2C_EEPROM_PORT_init+0x34>)
    5742:	2069      	movs	r0, #105	; 0x69
    5744:	4b03      	ldr	r3, [pc, #12]	; (5754 <I2C_EEPROM_PORT_init+0x30>)
    5746:	4798      	blx	r3
}
    5748:	bf00      	nop
    574a:	bd80      	pop	{r7, pc}
    574c:	00004f9d 	.word	0x00004f9d
    5750:	00680002 	.word	0x00680002
    5754:	00004fd1 	.word	0x00004fd1
    5758:	00690002 	.word	0x00690002

0000575c <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    575c:	b580      	push	{r7, lr}
    575e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5760:	2248      	movs	r2, #72	; 0x48
    5762:	2125      	movs	r1, #37	; 0x25
    5764:	4806      	ldr	r0, [pc, #24]	; (5780 <I2C_EEPROM_CLOCK_init+0x24>)
    5766:	4b07      	ldr	r3, [pc, #28]	; (5784 <I2C_EEPROM_CLOCK_init+0x28>)
    5768:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    576a:	224a      	movs	r2, #74	; 0x4a
    576c:	2103      	movs	r1, #3
    576e:	4804      	ldr	r0, [pc, #16]	; (5780 <I2C_EEPROM_CLOCK_init+0x24>)
    5770:	4b04      	ldr	r3, [pc, #16]	; (5784 <I2C_EEPROM_CLOCK_init+0x28>)
    5772:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    5774:	4804      	ldr	r0, [pc, #16]	; (5788 <I2C_EEPROM_CLOCK_init+0x2c>)
    5776:	4b05      	ldr	r3, [pc, #20]	; (578c <I2C_EEPROM_CLOCK_init+0x30>)
    5778:	4798      	blx	r3
}
    577a:	bf00      	nop
    577c:	bd80      	pop	{r7, pc}
    577e:	bf00      	nop
    5780:	40001c00 	.word	0x40001c00
    5784:	0000477d 	.word	0x0000477d
    5788:	40000800 	.word	0x40000800
    578c:	00004a83 	.word	0x00004a83

00005790 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    5790:	b580      	push	{r7, lr}
    5792:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    5794:	4b04      	ldr	r3, [pc, #16]	; (57a8 <I2C_EEPROM_init+0x18>)
    5796:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    5798:	4904      	ldr	r1, [pc, #16]	; (57ac <I2C_EEPROM_init+0x1c>)
    579a:	4805      	ldr	r0, [pc, #20]	; (57b0 <I2C_EEPROM_init+0x20>)
    579c:	4b05      	ldr	r3, [pc, #20]	; (57b4 <I2C_EEPROM_init+0x24>)
    579e:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    57a0:	4b05      	ldr	r3, [pc, #20]	; (57b8 <I2C_EEPROM_init+0x28>)
    57a2:	4798      	blx	r3
}
    57a4:	bf00      	nop
    57a6:	bd80      	pop	{r7, pc}
    57a8:	0000575d 	.word	0x0000575d
    57ac:	43000c00 	.word	0x43000c00
    57b0:	2000a714 	.word	0x2000a714
    57b4:	0000685d 	.word	0x0000685d
    57b8:	00005725 	.word	0x00005725

000057bc <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    57bc:	b580      	push	{r7, lr}
    57be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    57c0:	4808      	ldr	r0, [pc, #32]	; (57e4 <TIMER_USB_init+0x28>)
    57c2:	4b09      	ldr	r3, [pc, #36]	; (57e8 <TIMER_USB_init+0x2c>)
    57c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    57c6:	2243      	movs	r2, #67	; 0x43
    57c8:	2109      	movs	r1, #9
    57ca:	4808      	ldr	r0, [pc, #32]	; (57ec <TIMER_USB_init+0x30>)
    57cc:	4b08      	ldr	r3, [pc, #32]	; (57f0 <TIMER_USB_init+0x34>)
    57ce:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    57d0:	4b08      	ldr	r3, [pc, #32]	; (57f4 <TIMER_USB_init+0x38>)
    57d2:	4798      	blx	r3
    57d4:	4603      	mov	r3, r0
    57d6:	461a      	mov	r2, r3
    57d8:	4907      	ldr	r1, [pc, #28]	; (57f8 <TIMER_USB_init+0x3c>)
    57da:	4808      	ldr	r0, [pc, #32]	; (57fc <TIMER_USB_init+0x40>)
    57dc:	4b08      	ldr	r3, [pc, #32]	; (5800 <TIMER_USB_init+0x44>)
    57de:	4798      	blx	r3
}
    57e0:	bf00      	nop
    57e2:	bd80      	pop	{r7, pc}
    57e4:	40000800 	.word	0x40000800
    57e8:	000048a3 	.word	0x000048a3
    57ec:	40001c00 	.word	0x40001c00
    57f0:	0000477d 	.word	0x0000477d
    57f4:	0000d615 	.word	0x0000d615
    57f8:	40003800 	.word	0x40003800
    57fc:	2000a694 	.word	0x2000a694
    5800:	0000701d 	.word	0x0000701d

00005804 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    5804:	b480      	push	{r7}
    5806:	af00      	add	r7, sp, #0
}
    5808:	bf00      	nop
    580a:	46bd      	mov	sp, r7
    580c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5810:	4770      	bx	lr
	...

00005814 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    5814:	b580      	push	{r7, lr}
    5816:	af00      	add	r7, sp, #0

	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    5818:	4804      	ldr	r0, [pc, #16]	; (582c <LIVE_PULSE_CLOCK_init+0x18>)
    581a:	4b05      	ldr	r3, [pc, #20]	; (5830 <LIVE_PULSE_CLOCK_init+0x1c>)
    581c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    581e:	2244      	movs	r2, #68	; 0x44
    5820:	2109      	movs	r1, #9
    5822:	4804      	ldr	r0, [pc, #16]	; (5834 <LIVE_PULSE_CLOCK_init+0x20>)
    5824:	4b04      	ldr	r3, [pc, #16]	; (5838 <LIVE_PULSE_CLOCK_init+0x24>)
    5826:	4798      	blx	r3
}
    5828:	bf00      	nop
    582a:	bd80      	pop	{r7, pc}
    582c:	40000800 	.word	0x40000800
    5830:	000048c3 	.word	0x000048c3
    5834:	40001c00 	.word	0x40001c00
    5838:	0000477d 	.word	0x0000477d

0000583c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    583c:	b580      	push	{r7, lr}
    583e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    5840:	4b06      	ldr	r3, [pc, #24]	; (585c <LIVE_PULSE_init+0x20>)
    5842:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    5844:	4b06      	ldr	r3, [pc, #24]	; (5860 <LIVE_PULSE_init+0x24>)
    5846:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC1, _tc_get_pwm());
    5848:	4b06      	ldr	r3, [pc, #24]	; (5864 <LIVE_PULSE_init+0x28>)
    584a:	4798      	blx	r3
    584c:	4603      	mov	r3, r0
    584e:	461a      	mov	r2, r3
    5850:	4905      	ldr	r1, [pc, #20]	; (5868 <LIVE_PULSE_init+0x2c>)
    5852:	4806      	ldr	r0, [pc, #24]	; (586c <LIVE_PULSE_init+0x30>)
    5854:	4b06      	ldr	r3, [pc, #24]	; (5870 <LIVE_PULSE_init+0x34>)
    5856:	4798      	blx	r3
}
    5858:	bf00      	nop
    585a:	bd80      	pop	{r7, pc}
    585c:	00005815 	.word	0x00005815
    5860:	00005805 	.word	0x00005805
    5864:	0000d629 	.word	0x0000d629
    5868:	40003c00 	.word	0x40003c00
    586c:	2000a630 	.word	0x2000a630
    5870:	00006b7d 	.word	0x00006b7d

00005874 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    5874:	b580      	push	{r7, lr}
    5876:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    5878:	4808      	ldr	r0, [pc, #32]	; (589c <TIMER_ARINC_init+0x28>)
    587a:	4b09      	ldr	r3, [pc, #36]	; (58a0 <TIMER_ARINC_init+0x2c>)
    587c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    587e:	2244      	movs	r2, #68	; 0x44
    5880:	211a      	movs	r1, #26
    5882:	4808      	ldr	r0, [pc, #32]	; (58a4 <TIMER_ARINC_init+0x30>)
    5884:	4b08      	ldr	r3, [pc, #32]	; (58a8 <TIMER_ARINC_init+0x34>)
    5886:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    5888:	4b08      	ldr	r3, [pc, #32]	; (58ac <TIMER_ARINC_init+0x38>)
    588a:	4798      	blx	r3
    588c:	4603      	mov	r3, r0
    588e:	461a      	mov	r2, r3
    5890:	4907      	ldr	r1, [pc, #28]	; (58b0 <TIMER_ARINC_init+0x3c>)
    5892:	4808      	ldr	r0, [pc, #32]	; (58b4 <TIMER_ARINC_init+0x40>)
    5894:	4b08      	ldr	r3, [pc, #32]	; (58b8 <TIMER_ARINC_init+0x44>)
    5896:	4798      	blx	r3
}
    5898:	bf00      	nop
    589a:	bd80      	pop	{r7, pc}
    589c:	40000800 	.word	0x40000800
    58a0:	000049a3 	.word	0x000049a3
    58a4:	40001c00 	.word	0x40001c00
    58a8:	0000477d 	.word	0x0000477d
    58ac:	0000d615 	.word	0x0000d615
    58b0:	4101a000 	.word	0x4101a000
    58b4:	2000a674 	.word	0x2000a674
    58b8:	0000701d 	.word	0x0000701d

000058bc <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    58bc:	b580      	push	{r7, lr}
    58be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    58c0:	4808      	ldr	r0, [pc, #32]	; (58e4 <TIMER_MAINTENANCE_init+0x28>)
    58c2:	4b09      	ldr	r3, [pc, #36]	; (58e8 <TIMER_MAINTENANCE_init+0x2c>)
    58c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    58c6:	2246      	movs	r2, #70	; 0x46
    58c8:	211e      	movs	r1, #30
    58ca:	4808      	ldr	r0, [pc, #32]	; (58ec <TIMER_MAINTENANCE_init+0x30>)
    58cc:	4b08      	ldr	r3, [pc, #32]	; (58f0 <TIMER_MAINTENANCE_init+0x34>)
    58ce:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    58d0:	4b08      	ldr	r3, [pc, #32]	; (58f4 <TIMER_MAINTENANCE_init+0x38>)
    58d2:	4798      	blx	r3
    58d4:	4603      	mov	r3, r0
    58d6:	461a      	mov	r2, r3
    58d8:	4907      	ldr	r1, [pc, #28]	; (58f8 <TIMER_MAINTENANCE_init+0x3c>)
    58da:	4808      	ldr	r0, [pc, #32]	; (58fc <TIMER_MAINTENANCE_init+0x40>)
    58dc:	4b08      	ldr	r3, [pc, #32]	; (5900 <TIMER_MAINTENANCE_init+0x44>)
    58de:	4798      	blx	r3
}
    58e0:	bf00      	nop
    58e2:	bd80      	pop	{r7, pc}
    58e4:	40000800 	.word	0x40000800
    58e8:	000049c3 	.word	0x000049c3
    58ec:	40001c00 	.word	0x40001c00
    58f0:	0000477d 	.word	0x0000477d
    58f4:	0000d615 	.word	0x0000d615
    58f8:	42001400 	.word	0x42001400
    58fc:	2000a5cc 	.word	0x2000a5cc
    5900:	0000701d 	.word	0x0000701d

00005904 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    5904:	b580      	push	{r7, lr}
    5906:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    5908:	4808      	ldr	r0, [pc, #32]	; (592c <TIMER_INTERFACE_init+0x28>)
    590a:	4b09      	ldr	r3, [pc, #36]	; (5930 <TIMER_INTERFACE_init+0x2c>)
    590c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    590e:	2246      	movs	r2, #70	; 0x46
    5910:	211e      	movs	r1, #30
    5912:	4808      	ldr	r0, [pc, #32]	; (5934 <TIMER_INTERFACE_init+0x30>)
    5914:	4b08      	ldr	r3, [pc, #32]	; (5938 <TIMER_INTERFACE_init+0x34>)
    5916:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    5918:	4b08      	ldr	r3, [pc, #32]	; (593c <TIMER_INTERFACE_init+0x38>)
    591a:	4798      	blx	r3
    591c:	4603      	mov	r3, r0
    591e:	461a      	mov	r2, r3
    5920:	4907      	ldr	r1, [pc, #28]	; (5940 <TIMER_INTERFACE_init+0x3c>)
    5922:	4808      	ldr	r0, [pc, #32]	; (5944 <TIMER_INTERFACE_init+0x40>)
    5924:	4b08      	ldr	r3, [pc, #32]	; (5948 <TIMER_INTERFACE_init+0x44>)
    5926:	4798      	blx	r3
}
    5928:	bf00      	nop
    592a:	bd80      	pop	{r7, pc}
    592c:	40000800 	.word	0x40000800
    5930:	000049e3 	.word	0x000049e3
    5934:	40001c00 	.word	0x40001c00
    5938:	0000477d 	.word	0x0000477d
    593c:	0000d615 	.word	0x0000d615
    5940:	42001800 	.word	0x42001800
    5944:	2000a610 	.word	0x2000a610
    5948:	0000701d 	.word	0x0000701d

0000594c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    594c:	b580      	push	{r7, lr}
    594e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    5950:	4808      	ldr	r0, [pc, #32]	; (5974 <TIMER_EVENT_init+0x28>)
    5952:	4b09      	ldr	r3, [pc, #36]	; (5978 <TIMER_EVENT_init+0x2c>)
    5954:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5956:	2246      	movs	r2, #70	; 0x46
    5958:	2127      	movs	r1, #39	; 0x27
    595a:	4808      	ldr	r0, [pc, #32]	; (597c <TIMER_EVENT_init+0x30>)
    595c:	4b08      	ldr	r3, [pc, #32]	; (5980 <TIMER_EVENT_init+0x34>)
    595e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    5960:	4b08      	ldr	r3, [pc, #32]	; (5984 <TIMER_EVENT_init+0x38>)
    5962:	4798      	blx	r3
    5964:	4603      	mov	r3, r0
    5966:	461a      	mov	r2, r3
    5968:	4907      	ldr	r1, [pc, #28]	; (5988 <TIMER_EVENT_init+0x3c>)
    596a:	4808      	ldr	r0, [pc, #32]	; (598c <TIMER_EVENT_init+0x40>)
    596c:	4b08      	ldr	r3, [pc, #32]	; (5990 <TIMER_EVENT_init+0x44>)
    596e:	4798      	blx	r3
}
    5970:	bf00      	nop
    5972:	bd80      	pop	{r7, pc}
    5974:	40000800 	.word	0x40000800
    5978:	00004aa3 	.word	0x00004aa3
    597c:	40001c00 	.word	0x40001c00
    5980:	0000477d 	.word	0x0000477d
    5984:	0000d615 	.word	0x0000d615
    5988:	43001400 	.word	0x43001400
    598c:	2000a5f0 	.word	0x2000a5f0
    5990:	0000701d 	.word	0x0000701d

00005994 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    5994:	b580      	push	{r7, lr}
    5996:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    5998:	4804      	ldr	r0, [pc, #16]	; (59ac <TIMER_HVAC_CLOCK_init+0x18>)
    599a:	4b05      	ldr	r3, [pc, #20]	; (59b0 <TIMER_HVAC_CLOCK_init+0x1c>)
    599c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    599e:	2244      	movs	r2, #68	; 0x44
    59a0:	2119      	movs	r1, #25
    59a2:	4804      	ldr	r0, [pc, #16]	; (59b4 <TIMER_HVAC_CLOCK_init+0x20>)
    59a4:	4b04      	ldr	r3, [pc, #16]	; (59b8 <TIMER_HVAC_CLOCK_init+0x24>)
    59a6:	4798      	blx	r3
}
    59a8:	bf00      	nop
    59aa:	bd80      	pop	{r7, pc}
    59ac:	40000800 	.word	0x40000800
    59b0:	00004963 	.word	0x00004963
    59b4:	40001c00 	.word	0x40001c00
    59b8:	0000477d 	.word	0x0000477d

000059bc <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    59bc:	b580      	push	{r7, lr}
    59be:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    59c0:	4b05      	ldr	r3, [pc, #20]	; (59d8 <TIMER_HVAC_init+0x1c>)
    59c2:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    59c4:	4b05      	ldr	r3, [pc, #20]	; (59dc <TIMER_HVAC_init+0x20>)
    59c6:	4798      	blx	r3
    59c8:	4603      	mov	r3, r0
    59ca:	461a      	mov	r2, r3
    59cc:	4904      	ldr	r1, [pc, #16]	; (59e0 <TIMER_HVAC_init+0x24>)
    59ce:	4805      	ldr	r0, [pc, #20]	; (59e4 <TIMER_HVAC_init+0x28>)
    59d0:	4b05      	ldr	r3, [pc, #20]	; (59e8 <TIMER_HVAC_init+0x2c>)
    59d2:	4798      	blx	r3
}
    59d4:	bf00      	nop
    59d6:	bd80      	pop	{r7, pc}
    59d8:	00005995 	.word	0x00005995
    59dc:	0000c9d5 	.word	0x0000c9d5
    59e0:	41016000 	.word	0x41016000
    59e4:	2000a6f4 	.word	0x2000a6f4
    59e8:	0000701d 	.word	0x0000701d

000059ec <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    59ec:	b580      	push	{r7, lr}
    59ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    59f0:	4804      	ldr	r0, [pc, #16]	; (5a04 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    59f2:	4b05      	ldr	r3, [pc, #20]	; (5a08 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    59f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    59f6:	2244      	movs	r2, #68	; 0x44
    59f8:	2119      	movs	r1, #25
    59fa:	4804      	ldr	r0, [pc, #16]	; (5a0c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    59fc:	4b04      	ldr	r3, [pc, #16]	; (5a10 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    59fe:	4798      	blx	r3
}
    5a00:	bf00      	nop
    5a02:	bd80      	pop	{r7, pc}
    5a04:	40000800 	.word	0x40000800
    5a08:	00004983 	.word	0x00004983
    5a0c:	40001c00 	.word	0x40001c00
    5a10:	0000477d 	.word	0x0000477d

00005a14 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    5a14:	b580      	push	{r7, lr}
    5a16:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    5a18:	4b05      	ldr	r3, [pc, #20]	; (5a30 <TIMER_TEMPERATURES_init+0x1c>)
    5a1a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    5a1c:	4b05      	ldr	r3, [pc, #20]	; (5a34 <TIMER_TEMPERATURES_init+0x20>)
    5a1e:	4798      	blx	r3
    5a20:	4603      	mov	r3, r0
    5a22:	461a      	mov	r2, r3
    5a24:	4904      	ldr	r1, [pc, #16]	; (5a38 <TIMER_TEMPERATURES_init+0x24>)
    5a26:	4805      	ldr	r0, [pc, #20]	; (5a3c <TIMER_TEMPERATURES_init+0x28>)
    5a28:	4b05      	ldr	r3, [pc, #20]	; (5a40 <TIMER_TEMPERATURES_init+0x2c>)
    5a2a:	4798      	blx	r3
}
    5a2c:	bf00      	nop
    5a2e:	bd80      	pop	{r7, pc}
    5a30:	000059ed 	.word	0x000059ed
    5a34:	0000c9d5 	.word	0x0000c9d5
    5a38:	41018000 	.word	0x41018000
    5a3c:	2000a564 	.word	0x2000a564
    5a40:	0000701d 	.word	0x0000701d

00005a44 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    5a44:	b580      	push	{r7, lr}
    5a46:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    5a48:	2102      	movs	r1, #2
    5a4a:	2018      	movs	r0, #24
    5a4c:	4b0f      	ldr	r3, [pc, #60]	; (5a8c <CDCUSB_PORT_init+0x48>)
    5a4e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    5a50:	2100      	movs	r1, #0
    5a52:	2018      	movs	r0, #24
    5a54:	4b0e      	ldr	r3, [pc, #56]	; (5a90 <CDCUSB_PORT_init+0x4c>)
    5a56:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    5a58:	2100      	movs	r1, #0
    5a5a:	2018      	movs	r0, #24
    5a5c:	4b0d      	ldr	r3, [pc, #52]	; (5a94 <CDCUSB_PORT_init+0x50>)
    5a5e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    5a60:	490d      	ldr	r1, [pc, #52]	; (5a98 <CDCUSB_PORT_init+0x54>)
    5a62:	2018      	movs	r0, #24
    5a64:	4b0d      	ldr	r3, [pc, #52]	; (5a9c <CDCUSB_PORT_init+0x58>)
    5a66:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    5a68:	2102      	movs	r1, #2
    5a6a:	2019      	movs	r0, #25
    5a6c:	4b07      	ldr	r3, [pc, #28]	; (5a8c <CDCUSB_PORT_init+0x48>)
    5a6e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    5a70:	2100      	movs	r1, #0
    5a72:	2019      	movs	r0, #25
    5a74:	4b06      	ldr	r3, [pc, #24]	; (5a90 <CDCUSB_PORT_init+0x4c>)
    5a76:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    5a78:	2100      	movs	r1, #0
    5a7a:	2019      	movs	r0, #25
    5a7c:	4b05      	ldr	r3, [pc, #20]	; (5a94 <CDCUSB_PORT_init+0x50>)
    5a7e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    5a80:	4907      	ldr	r1, [pc, #28]	; (5aa0 <CDCUSB_PORT_init+0x5c>)
    5a82:	2019      	movs	r0, #25
    5a84:	4b05      	ldr	r3, [pc, #20]	; (5a9c <CDCUSB_PORT_init+0x58>)
    5a86:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    5a88:	bf00      	nop
    5a8a:	bd80      	pop	{r7, pc}
    5a8c:	00004ff1 	.word	0x00004ff1
    5a90:	00005029 	.word	0x00005029
    5a94:	00004f9d 	.word	0x00004f9d
    5a98:	00180007 	.word	0x00180007
    5a9c:	00004fd1 	.word	0x00004fd1
    5aa0:	00190007 	.word	0x00190007

00005aa4 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    5aa4:	b580      	push	{r7, lr}
    5aa6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    5aa8:	2242      	movs	r2, #66	; 0x42
    5aaa:	210a      	movs	r1, #10
    5aac:	4805      	ldr	r0, [pc, #20]	; (5ac4 <CDCUSB_CLOCK_init+0x20>)
    5aae:	4b06      	ldr	r3, [pc, #24]	; (5ac8 <CDCUSB_CLOCK_init+0x24>)
    5ab0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    5ab2:	4806      	ldr	r0, [pc, #24]	; (5acc <CDCUSB_CLOCK_init+0x28>)
    5ab4:	4b06      	ldr	r3, [pc, #24]	; (5ad0 <CDCUSB_CLOCK_init+0x2c>)
    5ab6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    5ab8:	4804      	ldr	r0, [pc, #16]	; (5acc <CDCUSB_CLOCK_init+0x28>)
    5aba:	4b06      	ldr	r3, [pc, #24]	; (5ad4 <CDCUSB_CLOCK_init+0x30>)
    5abc:	4798      	blx	r3
}
    5abe:	bf00      	nop
    5ac0:	bd80      	pop	{r7, pc}
    5ac2:	bf00      	nop
    5ac4:	40001c00 	.word	0x40001c00
    5ac8:	0000477d 	.word	0x0000477d
    5acc:	40000800 	.word	0x40000800
    5ad0:	000047a3 	.word	0x000047a3
    5ad4:	000048e3 	.word	0x000048e3

00005ad8 <CDCUSB_init>:

void CDCUSB_init(void)
{
    5ad8:	b580      	push	{r7, lr}
    5ada:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    5adc:	4b03      	ldr	r3, [pc, #12]	; (5aec <CDCUSB_init+0x14>)
    5ade:	4798      	blx	r3
	usb_d_init();
    5ae0:	4b03      	ldr	r3, [pc, #12]	; (5af0 <CDCUSB_init+0x18>)
    5ae2:	4798      	blx	r3
	CDCUSB_PORT_init();
    5ae4:	4b03      	ldr	r3, [pc, #12]	; (5af4 <CDCUSB_init+0x1c>)
    5ae6:	4798      	blx	r3
}
    5ae8:	bf00      	nop
    5aea:	bd80      	pop	{r7, pc}
    5aec:	00005aa5 	.word	0x00005aa5
    5af0:	00007879 	.word	0x00007879
    5af4:	00005a45 	.word	0x00005a45

00005af8 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    5af8:	b580      	push	{r7, lr}
    5afa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    5afc:	4802      	ldr	r0, [pc, #8]	; (5b08 <WATCHDOG_CLOCK_init+0x10>)
    5afe:	4b03      	ldr	r3, [pc, #12]	; (5b0c <WATCHDOG_CLOCK_init+0x14>)
    5b00:	4798      	blx	r3
}
    5b02:	bf00      	nop
    5b04:	bd80      	pop	{r7, pc}
    5b06:	bf00      	nop
    5b08:	40000800 	.word	0x40000800
    5b0c:	00004823 	.word	0x00004823

00005b10 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    5b10:	b580      	push	{r7, lr}
    5b12:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    5b14:	4b03      	ldr	r3, [pc, #12]	; (5b24 <WATCHDOG_init+0x14>)
    5b16:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    5b18:	4903      	ldr	r1, [pc, #12]	; (5b28 <WATCHDOG_init+0x18>)
    5b1a:	4804      	ldr	r0, [pc, #16]	; (5b2c <WATCHDOG_init+0x1c>)
    5b1c:	4b04      	ldr	r3, [pc, #16]	; (5b30 <WATCHDOG_init+0x20>)
    5b1e:	4798      	blx	r3
}
    5b20:	bf00      	nop
    5b22:	bd80      	pop	{r7, pc}
    5b24:	00005af9 	.word	0x00005af9
    5b28:	40002000 	.word	0x40002000
    5b2c:	2000a774 	.word	0x2000a774
    5b30:	00005071 	.word	0x00005071

00005b34 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    5b34:	b580      	push	{r7, lr}
    5b36:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    5b38:	4904      	ldr	r1, [pc, #16]	; (5b4c <CAN_CCU_PORT_init+0x18>)
    5b3a:	202d      	movs	r0, #45	; 0x2d
    5b3c:	4b04      	ldr	r3, [pc, #16]	; (5b50 <CAN_CCU_PORT_init+0x1c>)
    5b3e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    5b40:	4904      	ldr	r1, [pc, #16]	; (5b54 <CAN_CCU_PORT_init+0x20>)
    5b42:	202c      	movs	r0, #44	; 0x2c
    5b44:	4b02      	ldr	r3, [pc, #8]	; (5b50 <CAN_CCU_PORT_init+0x1c>)
    5b46:	4798      	blx	r3
}
    5b48:	bf00      	nop
    5b4a:	bd80      	pop	{r7, pc}
    5b4c:	002d0007 	.word	0x002d0007
    5b50:	00004fd1 	.word	0x00004fd1
    5b54:	002c0007 	.word	0x002c0007

00005b58 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    5b58:	b580      	push	{r7, lr}
    5b5a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    5b5c:	4807      	ldr	r0, [pc, #28]	; (5b7c <CAN_CCU_init+0x24>)
    5b5e:	4b08      	ldr	r3, [pc, #32]	; (5b80 <CAN_CCU_init+0x28>)
    5b60:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5b62:	2243      	movs	r2, #67	; 0x43
    5b64:	211c      	movs	r1, #28
    5b66:	4807      	ldr	r0, [pc, #28]	; (5b84 <CAN_CCU_init+0x2c>)
    5b68:	4b07      	ldr	r3, [pc, #28]	; (5b88 <CAN_CCU_init+0x30>)
    5b6a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    5b6c:	4907      	ldr	r1, [pc, #28]	; (5b8c <CAN_CCU_init+0x34>)
    5b6e:	4808      	ldr	r0, [pc, #32]	; (5b90 <CAN_CCU_init+0x38>)
    5b70:	4b08      	ldr	r3, [pc, #32]	; (5b94 <CAN_CCU_init+0x3c>)
    5b72:	4798      	blx	r3
	CAN_CCU_PORT_init();
    5b74:	4b08      	ldr	r3, [pc, #32]	; (5b98 <CAN_CCU_init+0x40>)
    5b76:	4798      	blx	r3
}
    5b78:	bf00      	nop
    5b7a:	bd80      	pop	{r7, pc}
    5b7c:	40000800 	.word	0x40000800
    5b80:	000047e3 	.word	0x000047e3
    5b84:	40001c00 	.word	0x40001c00
    5b88:	0000477d 	.word	0x0000477d
    5b8c:	42000400 	.word	0x42000400
    5b90:	2000a64c 	.word	0x2000a64c
    5b94:	000062a9 	.word	0x000062a9
    5b98:	00005b35 	.word	0x00005b35

00005b9c <system_init>:

void system_init(void)
{
    5b9c:	b580      	push	{r7, lr}
    5b9e:	af00      	add	r7, sp, #0
	init_mcu();
    5ba0:	4b58      	ldr	r3, [pc, #352]	; (5d04 <system_init+0x168>)
    5ba2:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    5ba4:	2101      	movs	r1, #1
    5ba6:	200f      	movs	r0, #15
    5ba8:	4b57      	ldr	r3, [pc, #348]	; (5d08 <system_init+0x16c>)
    5baa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    5bac:	2102      	movs	r1, #2
    5bae:	200f      	movs	r0, #15
    5bb0:	4b56      	ldr	r3, [pc, #344]	; (5d0c <system_init+0x170>)
    5bb2:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    5bb4:	f04f 31ff 	mov.w	r1, #4294967295
    5bb8:	200f      	movs	r0, #15
    5bba:	4b55      	ldr	r3, [pc, #340]	; (5d10 <system_init+0x174>)
    5bbc:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    5bbe:	2101      	movs	r1, #1
    5bc0:	2013      	movs	r0, #19
    5bc2:	4b51      	ldr	r3, [pc, #324]	; (5d08 <system_init+0x16c>)
    5bc4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    5bc6:	2102      	movs	r1, #2
    5bc8:	2013      	movs	r0, #19
    5bca:	4b50      	ldr	r3, [pc, #320]	; (5d0c <system_init+0x170>)
    5bcc:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    5bce:	f04f 31ff 	mov.w	r1, #4294967295
    5bd2:	2013      	movs	r0, #19
    5bd4:	4b4e      	ldr	r3, [pc, #312]	; (5d10 <system_init+0x174>)
    5bd6:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    5bd8:	2101      	movs	r1, #1
    5bda:	201b      	movs	r0, #27
    5bdc:	4b4a      	ldr	r3, [pc, #296]	; (5d08 <system_init+0x16c>)
    5bde:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    5be0:	2102      	movs	r1, #2
    5be2:	201b      	movs	r0, #27
    5be4:	4b49      	ldr	r3, [pc, #292]	; (5d0c <system_init+0x170>)
    5be6:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    5be8:	f04f 31ff 	mov.w	r1, #4294967295
    5bec:	201b      	movs	r0, #27
    5bee:	4b48      	ldr	r3, [pc, #288]	; (5d10 <system_init+0x174>)
    5bf0:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    5bf2:	2101      	movs	r1, #1
    5bf4:	2027      	movs	r0, #39	; 0x27
    5bf6:	4b45      	ldr	r3, [pc, #276]	; (5d0c <system_init+0x170>)
    5bf8:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    5bfa:	2102      	movs	r1, #2
    5bfc:	2027      	movs	r0, #39	; 0x27
    5bfe:	4b45      	ldr	r3, [pc, #276]	; (5d14 <system_init+0x178>)
    5c00:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    5c02:	f04f 31ff 	mov.w	r1, #4294967295
    5c06:	2027      	movs	r0, #39	; 0x27
    5c08:	4b41      	ldr	r3, [pc, #260]	; (5d10 <system_init+0x174>)
    5c0a:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    5c0c:	2101      	movs	r1, #1
    5c0e:	203d      	movs	r0, #61	; 0x3d
    5c10:	4b3d      	ldr	r3, [pc, #244]	; (5d08 <system_init+0x16c>)
    5c12:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    5c14:	2102      	movs	r1, #2
    5c16:	203d      	movs	r0, #61	; 0x3d
    5c18:	4b3c      	ldr	r3, [pc, #240]	; (5d0c <system_init+0x170>)
    5c1a:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    5c1c:	f04f 31ff 	mov.w	r1, #4294967295
    5c20:	203d      	movs	r0, #61	; 0x3d
    5c22:	4b3b      	ldr	r3, [pc, #236]	; (5d10 <system_init+0x174>)
    5c24:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    5c26:	2101      	movs	r1, #1
    5c28:	203f      	movs	r0, #63	; 0x3f
    5c2a:	4b38      	ldr	r3, [pc, #224]	; (5d0c <system_init+0x170>)
    5c2c:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    5c2e:	2101      	movs	r1, #1
    5c30:	203f      	movs	r0, #63	; 0x3f
    5c32:	4b38      	ldr	r3, [pc, #224]	; (5d14 <system_init+0x178>)
    5c34:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    5c36:	f04f 31ff 	mov.w	r1, #4294967295
    5c3a:	203f      	movs	r0, #63	; 0x3f
    5c3c:	4b34      	ldr	r3, [pc, #208]	; (5d10 <system_init+0x174>)
    5c3e:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    5c40:	2100      	movs	r1, #0
    5c42:	204d      	movs	r0, #77	; 0x4d
    5c44:	4b30      	ldr	r3, [pc, #192]	; (5d08 <system_init+0x16c>)
    5c46:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    5c48:	2102      	movs	r1, #2
    5c4a:	204d      	movs	r0, #77	; 0x4d
    5c4c:	4b2f      	ldr	r3, [pc, #188]	; (5d0c <system_init+0x170>)
    5c4e:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    5c50:	f04f 31ff 	mov.w	r1, #4294967295
    5c54:	204d      	movs	r0, #77	; 0x4d
    5c56:	4b2e      	ldr	r3, [pc, #184]	; (5d10 <system_init+0x174>)
    5c58:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    5c5a:	2101      	movs	r1, #1
    5c5c:	204e      	movs	r0, #78	; 0x4e
    5c5e:	4b2a      	ldr	r3, [pc, #168]	; (5d08 <system_init+0x16c>)
    5c60:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    5c62:	2102      	movs	r1, #2
    5c64:	204e      	movs	r0, #78	; 0x4e
    5c66:	4b29      	ldr	r3, [pc, #164]	; (5d0c <system_init+0x170>)
    5c68:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    5c6a:	f04f 31ff 	mov.w	r1, #4294967295
    5c6e:	204e      	movs	r0, #78	; 0x4e
    5c70:	4b27      	ldr	r3, [pc, #156]	; (5d10 <system_init+0x174>)
    5c72:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    5c74:	2100      	movs	r1, #0
    5c76:	204f      	movs	r0, #79	; 0x4f
    5c78:	4b23      	ldr	r3, [pc, #140]	; (5d08 <system_init+0x16c>)
    5c7a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    5c7c:	2102      	movs	r1, #2
    5c7e:	204f      	movs	r0, #79	; 0x4f
    5c80:	4b22      	ldr	r3, [pc, #136]	; (5d0c <system_init+0x170>)
    5c82:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    5c84:	f04f 31ff 	mov.w	r1, #4294967295
    5c88:	204f      	movs	r0, #79	; 0x4f
    5c8a:	4b21      	ldr	r3, [pc, #132]	; (5d10 <system_init+0x174>)
    5c8c:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    5c8e:	2100      	movs	r1, #0
    5c90:	2052      	movs	r0, #82	; 0x52
    5c92:	4b1d      	ldr	r3, [pc, #116]	; (5d08 <system_init+0x16c>)
    5c94:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    5c96:	2102      	movs	r1, #2
    5c98:	2052      	movs	r0, #82	; 0x52
    5c9a:	4b1c      	ldr	r3, [pc, #112]	; (5d0c <system_init+0x170>)
    5c9c:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    5c9e:	f04f 31ff 	mov.w	r1, #4294967295
    5ca2:	2052      	movs	r0, #82	; 0x52
    5ca4:	4b1a      	ldr	r3, [pc, #104]	; (5d10 <system_init+0x174>)
    5ca6:	4798      	blx	r3

	CRC_CALC_init();
    5ca8:	4b1b      	ldr	r3, [pc, #108]	; (5d18 <system_init+0x17c>)
    5caa:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    5cac:	4b1b      	ldr	r3, [pc, #108]	; (5d1c <system_init+0x180>)
    5cae:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    5cb0:	4b1b      	ldr	r3, [pc, #108]	; (5d20 <system_init+0x184>)
    5cb2:	4798      	blx	r3

	QSPI_N25Q256_init();
    5cb4:	4b1b      	ldr	r3, [pc, #108]	; (5d24 <system_init+0x188>)
    5cb6:	4798      	blx	r3

	DATETIME_CLOCK_init();
    5cb8:	4b1b      	ldr	r3, [pc, #108]	; (5d28 <system_init+0x18c>)
    5cba:	4798      	blx	r3

	SPI_MEMORIES_init();
    5cbc:	4b1b      	ldr	r3, [pc, #108]	; (5d2c <system_init+0x190>)
    5cbe:	4798      	blx	r3

	I2C_SHARED_init();
    5cc0:	4b1b      	ldr	r3, [pc, #108]	; (5d30 <system_init+0x194>)
    5cc2:	4798      	blx	r3

	SPI_TEMP_init();
    5cc4:	4b1b      	ldr	r3, [pc, #108]	; (5d34 <system_init+0x198>)
    5cc6:	4798      	blx	r3

	I2C_EXPANDER_init();
    5cc8:	4b1b      	ldr	r3, [pc, #108]	; (5d38 <system_init+0x19c>)
    5cca:	4798      	blx	r3

	SPI_HI3593_init();
    5ccc:	4b1b      	ldr	r3, [pc, #108]	; (5d3c <system_init+0x1a0>)
    5cce:	4798      	blx	r3

	I2C_EEPROM_init();
    5cd0:	4b1b      	ldr	r3, [pc, #108]	; (5d40 <system_init+0x1a4>)
    5cd2:	4798      	blx	r3

	TIMER_USB_init();
    5cd4:	4b1b      	ldr	r3, [pc, #108]	; (5d44 <system_init+0x1a8>)
    5cd6:	4798      	blx	r3
	LIVE_PULSE_init();
    5cd8:	4b1b      	ldr	r3, [pc, #108]	; (5d48 <system_init+0x1ac>)
    5cda:	4798      	blx	r3

	TIMER_ARINC_init();
    5cdc:	4b1b      	ldr	r3, [pc, #108]	; (5d4c <system_init+0x1b0>)
    5cde:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    5ce0:	4b1b      	ldr	r3, [pc, #108]	; (5d50 <system_init+0x1b4>)
    5ce2:	4798      	blx	r3
	TIMER_INTERFACE_init();
    5ce4:	4b1b      	ldr	r3, [pc, #108]	; (5d54 <system_init+0x1b8>)
    5ce6:	4798      	blx	r3
	TIMER_EVENT_init();
    5ce8:	4b1b      	ldr	r3, [pc, #108]	; (5d58 <system_init+0x1bc>)
    5cea:	4798      	blx	r3
	TIMER_HVAC_init();
    5cec:	4b1b      	ldr	r3, [pc, #108]	; (5d5c <system_init+0x1c0>)
    5cee:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    5cf0:	4b1b      	ldr	r3, [pc, #108]	; (5d60 <system_init+0x1c4>)
    5cf2:	4798      	blx	r3

	CDCUSB_init();
    5cf4:	4b1b      	ldr	r3, [pc, #108]	; (5d64 <system_init+0x1c8>)
    5cf6:	4798      	blx	r3

	WATCHDOG_init();
    5cf8:	4b1b      	ldr	r3, [pc, #108]	; (5d68 <system_init+0x1cc>)
    5cfa:	4798      	blx	r3
	CAN_CCU_init();
    5cfc:	4b1b      	ldr	r3, [pc, #108]	; (5d6c <system_init+0x1d0>)
    5cfe:	4798      	blx	r3
}
    5d00:	bf00      	nop
    5d02:	bd80      	pop	{r7, pc}
    5d04:	00005061 	.word	0x00005061
    5d08:	00005029 	.word	0x00005029
    5d0c:	00004ff1 	.word	0x00004ff1
    5d10:	00004fd1 	.word	0x00004fd1
    5d14:	00004f9d 	.word	0x00004f9d
    5d18:	000050c1 	.word	0x000050c1
    5d1c:	000050ed 	.word	0x000050ed
    5d20:	000051e1 	.word	0x000051e1
    5d24:	00005329 	.word	0x00005329
    5d28:	0000536d 	.word	0x0000536d
    5d2c:	00005431 	.word	0x00005431
    5d30:	000054c9 	.word	0x000054c9
    5d34:	00005595 	.word	0x00005595
    5d38:	0000562d 	.word	0x0000562d
    5d3c:	000056f9 	.word	0x000056f9
    5d40:	00005791 	.word	0x00005791
    5d44:	000057bd 	.word	0x000057bd
    5d48:	0000583d 	.word	0x0000583d
    5d4c:	00005875 	.word	0x00005875
    5d50:	000058bd 	.word	0x000058bd
    5d54:	00005905 	.word	0x00005905
    5d58:	0000594d 	.word	0x0000594d
    5d5c:	000059bd 	.word	0x000059bd
    5d60:	00005a15 	.word	0x00005a15
    5d64:	00005ad9 	.word	0x00005ad9
    5d68:	00005b11 	.word	0x00005b11
    5d6c:	00005b59 	.word	0x00005b59

00005d70 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    5d70:	b480      	push	{r7}
    5d72:	b083      	sub	sp, #12
    5d74:	af00      	add	r7, sp, #0
    5d76:	4603      	mov	r3, r0
    5d78:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    5d7a:	88fb      	ldrh	r3, [r7, #6]
    5d7c:	f003 0303 	and.w	r3, r3, #3
    5d80:	2b00      	cmp	r3, #0
    5d82:	d001      	beq.n	5d88 <leap_year+0x18>
		return false;
    5d84:	2300      	movs	r3, #0
    5d86:	e000      	b.n	5d8a <leap_year+0x1a>
	} else {
		return true;
    5d88:	2301      	movs	r3, #1
	}
}
    5d8a:	4618      	mov	r0, r3
    5d8c:	370c      	adds	r7, #12
    5d8e:	46bd      	mov	sp, r7
    5d90:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d94:	4770      	bx	lr
	...

00005d98 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	b084      	sub	sp, #16
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	6078      	str	r0, [r7, #4]
    5da0:	460b      	mov	r3, r1
    5da2:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    5da4:	2300      	movs	r3, #0
    5da6:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	b29b      	uxth	r3, r3
    5dac:	4618      	mov	r0, r3
    5dae:	4b2f      	ldr	r3, [pc, #188]	; (5e6c <get_secs_in_month+0xd4>)
    5db0:	4798      	blx	r3
    5db2:	4603      	mov	r3, r0
    5db4:	2b00      	cmp	r3, #0
    5db6:	d028      	beq.n	5e0a <get_secs_in_month+0x72>
		switch (month) {
    5db8:	78fb      	ldrb	r3, [r7, #3]
    5dba:	3b01      	subs	r3, #1
    5dbc:	2b0b      	cmp	r3, #11
    5dbe:	d84c      	bhi.n	5e5a <get_secs_in_month+0xc2>
    5dc0:	a201      	add	r2, pc, #4	; (adr r2, 5dc8 <get_secs_in_month+0x30>)
    5dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5dc6:	bf00      	nop
    5dc8:	00005df9 	.word	0x00005df9
    5dcc:	00005dff 	.word	0x00005dff
    5dd0:	00005df9 	.word	0x00005df9
    5dd4:	00005e05 	.word	0x00005e05
    5dd8:	00005df9 	.word	0x00005df9
    5ddc:	00005e05 	.word	0x00005e05
    5de0:	00005df9 	.word	0x00005df9
    5de4:	00005df9 	.word	0x00005df9
    5de8:	00005e05 	.word	0x00005e05
    5dec:	00005df9 	.word	0x00005df9
    5df0:	00005e05 	.word	0x00005e05
    5df4:	00005df9 	.word	0x00005df9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    5df8:	4b1d      	ldr	r3, [pc, #116]	; (5e70 <get_secs_in_month+0xd8>)
    5dfa:	60fb      	str	r3, [r7, #12]
			break;
    5dfc:	e030      	b.n	5e60 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    5dfe:	4b1d      	ldr	r3, [pc, #116]	; (5e74 <get_secs_in_month+0xdc>)
    5e00:	60fb      	str	r3, [r7, #12]
			break;
    5e02:	e02d      	b.n	5e60 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    5e04:	4b1c      	ldr	r3, [pc, #112]	; (5e78 <get_secs_in_month+0xe0>)
    5e06:	60fb      	str	r3, [r7, #12]
			break;
    5e08:	e02a      	b.n	5e60 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    5e0a:	78fb      	ldrb	r3, [r7, #3]
    5e0c:	3b01      	subs	r3, #1
    5e0e:	2b0b      	cmp	r3, #11
    5e10:	d825      	bhi.n	5e5e <get_secs_in_month+0xc6>
    5e12:	a201      	add	r2, pc, #4	; (adr r2, 5e18 <get_secs_in_month+0x80>)
    5e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5e18:	00005e49 	.word	0x00005e49
    5e1c:	00005e4f 	.word	0x00005e4f
    5e20:	00005e49 	.word	0x00005e49
    5e24:	00005e55 	.word	0x00005e55
    5e28:	00005e49 	.word	0x00005e49
    5e2c:	00005e55 	.word	0x00005e55
    5e30:	00005e49 	.word	0x00005e49
    5e34:	00005e49 	.word	0x00005e49
    5e38:	00005e55 	.word	0x00005e55
    5e3c:	00005e49 	.word	0x00005e49
    5e40:	00005e55 	.word	0x00005e55
    5e44:	00005e49 	.word	0x00005e49
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    5e48:	4b09      	ldr	r3, [pc, #36]	; (5e70 <get_secs_in_month+0xd8>)
    5e4a:	60fb      	str	r3, [r7, #12]
			break;
    5e4c:	e008      	b.n	5e60 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    5e4e:	4b0b      	ldr	r3, [pc, #44]	; (5e7c <get_secs_in_month+0xe4>)
    5e50:	60fb      	str	r3, [r7, #12]
			break;
    5e52:	e005      	b.n	5e60 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    5e54:	4b08      	ldr	r3, [pc, #32]	; (5e78 <get_secs_in_month+0xe0>)
    5e56:	60fb      	str	r3, [r7, #12]
			break;
    5e58:	e002      	b.n	5e60 <get_secs_in_month+0xc8>
			break;
    5e5a:	bf00      	nop
    5e5c:	e000      	b.n	5e60 <get_secs_in_month+0xc8>
		default:
			break;
    5e5e:	bf00      	nop
		}
	}

	return sec_in_month;
    5e60:	68fb      	ldr	r3, [r7, #12]
}
    5e62:	4618      	mov	r0, r3
    5e64:	3710      	adds	r7, #16
    5e66:	46bd      	mov	sp, r7
    5e68:	bd80      	pop	{r7, pc}
    5e6a:	bf00      	nop
    5e6c:	00005d71 	.word	0x00005d71
    5e70:	0028de80 	.word	0x0028de80
    5e74:	00263b80 	.word	0x00263b80
    5e78:	00278d00 	.word	0x00278d00
    5e7c:	0024ea00 	.word	0x0024ea00

00005e80 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    5e80:	b580      	push	{r7, lr}
    5e82:	b08a      	sub	sp, #40	; 0x28
    5e84:	af00      	add	r7, sp, #0
    5e86:	60f8      	str	r0, [r7, #12]
    5e88:	60b9      	str	r1, [r7, #8]
    5e8a:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    5e8c:	68fb      	ldr	r3, [r7, #12]
    5e8e:	699b      	ldr	r3, [r3, #24]
    5e90:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    5e92:	2301      	movs	r3, #1
    5e94:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    5e96:	2301      	movs	r3, #1
    5e98:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    5e9a:	2300      	movs	r3, #0
    5e9c:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    5e9e:	2300      	movs	r3, #0
    5ea0:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    5ea2:	68bb      	ldr	r3, [r7, #8]
    5ea4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    5ea6:	6a3b      	ldr	r3, [r7, #32]
    5ea8:	b29b      	uxth	r3, r3
    5eaa:	4618      	mov	r0, r3
    5eac:	4b32      	ldr	r3, [pc, #200]	; (5f78 <convert_timestamp_to_datetime+0xf8>)
    5eae:	4798      	blx	r3
    5eb0:	4603      	mov	r3, r0
    5eb2:	2b00      	cmp	r3, #0
    5eb4:	d001      	beq.n	5eba <convert_timestamp_to_datetime+0x3a>
    5eb6:	4b31      	ldr	r3, [pc, #196]	; (5f7c <convert_timestamp_to_datetime+0xfc>)
    5eb8:	e000      	b.n	5ebc <convert_timestamp_to_datetime+0x3c>
    5eba:	4b31      	ldr	r3, [pc, #196]	; (5f80 <convert_timestamp_to_datetime+0x100>)
    5ebc:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    5ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5ec0:	69bb      	ldr	r3, [r7, #24]
    5ec2:	429a      	cmp	r2, r3
    5ec4:	d307      	bcc.n	5ed6 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    5ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5ec8:	69bb      	ldr	r3, [r7, #24]
    5eca:	1ad3      	subs	r3, r2, r3
    5ecc:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    5ece:	6a3b      	ldr	r3, [r7, #32]
    5ed0:	3301      	adds	r3, #1
    5ed2:	623b      	str	r3, [r7, #32]
    5ed4:	e7e7      	b.n	5ea6 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    5ed6:	7ffb      	ldrb	r3, [r7, #31]
    5ed8:	4619      	mov	r1, r3
    5eda:	6a38      	ldr	r0, [r7, #32]
    5edc:	4b29      	ldr	r3, [pc, #164]	; (5f84 <convert_timestamp_to_datetime+0x104>)
    5ede:	4798      	blx	r3
    5ee0:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    5ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5ee4:	697b      	ldr	r3, [r7, #20]
    5ee6:	429a      	cmp	r2, r3
    5ee8:	d307      	bcc.n	5efa <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    5eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5eec:	697b      	ldr	r3, [r7, #20]
    5eee:	1ad3      	subs	r3, r2, r3
    5ef0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    5ef2:	7ffb      	ldrb	r3, [r7, #31]
    5ef4:	3301      	adds	r3, #1
    5ef6:	77fb      	strb	r3, [r7, #31]
    5ef8:	e7ed      	b.n	5ed6 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    5efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5efc:	4a22      	ldr	r2, [pc, #136]	; (5f88 <convert_timestamp_to_datetime+0x108>)
    5efe:	4293      	cmp	r3, r2
    5f00:	d909      	bls.n	5f16 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    5f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f04:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    5f08:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    5f0c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    5f0e:	7fbb      	ldrb	r3, [r7, #30]
    5f10:	3301      	adds	r3, #1
    5f12:	77bb      	strb	r3, [r7, #30]
    5f14:	e7f1      	b.n	5efa <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    5f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f18:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    5f1c:	d307      	bcc.n	5f2e <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    5f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f20:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    5f24:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    5f26:	7f7b      	ldrb	r3, [r7, #29]
    5f28:	3301      	adds	r3, #1
    5f2a:	777b      	strb	r3, [r7, #29]
    5f2c:	e7f3      	b.n	5f16 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    5f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f30:	2b3b      	cmp	r3, #59	; 0x3b
    5f32:	d906      	bls.n	5f42 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    5f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f36:	3b3c      	subs	r3, #60	; 0x3c
    5f38:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    5f3a:	7f3b      	ldrb	r3, [r7, #28]
    5f3c:	3301      	adds	r3, #1
    5f3e:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    5f40:	e7f5      	b.n	5f2e <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    5f42:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    5f44:	6a3b      	ldr	r3, [r7, #32]
    5f46:	b29a      	uxth	r2, r3
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    5f4c:	687b      	ldr	r3, [r7, #4]
    5f4e:	7ffa      	ldrb	r2, [r7, #31]
    5f50:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    5f52:	687b      	ldr	r3, [r7, #4]
    5f54:	7fba      	ldrb	r2, [r7, #30]
    5f56:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    5f58:	687b      	ldr	r3, [r7, #4]
    5f5a:	7f7a      	ldrb	r2, [r7, #29]
    5f5c:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    5f5e:	687b      	ldr	r3, [r7, #4]
    5f60:	7f3a      	ldrb	r2, [r7, #28]
    5f62:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    5f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f66:	b2da      	uxtb	r2, r3
    5f68:	687b      	ldr	r3, [r7, #4]
    5f6a:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    5f6c:	2300      	movs	r3, #0
}
    5f6e:	4618      	mov	r0, r3
    5f70:	3728      	adds	r7, #40	; 0x28
    5f72:	46bd      	mov	sp, r7
    5f74:	bd80      	pop	{r7, pc}
    5f76:	bf00      	nop
    5f78:	00005d71 	.word	0x00005d71
    5f7c:	01e28500 	.word	0x01e28500
    5f80:	01e13380 	.word	0x01e13380
    5f84:	00005d99 	.word	0x00005d99
    5f88:	0001517f 	.word	0x0001517f

00005f8c <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    5f8c:	b580      	push	{r7, lr}
    5f8e:	b086      	sub	sp, #24
    5f90:	af00      	add	r7, sp, #0
    5f92:	6078      	str	r0, [r7, #4]
    5f94:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    5f96:	2300      	movs	r3, #0
    5f98:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    5f9a:	2300      	movs	r3, #0
    5f9c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    5f9e:	683b      	ldr	r3, [r7, #0]
    5fa0:	88db      	ldrh	r3, [r3, #6]
    5fa2:	b2da      	uxtb	r2, r3
    5fa4:	687b      	ldr	r3, [r7, #4]
    5fa6:	699b      	ldr	r3, [r3, #24]
    5fa8:	b2db      	uxtb	r3, r3
    5faa:	1ad3      	subs	r3, r2, r3
    5fac:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    5fae:	683b      	ldr	r3, [r7, #0]
    5fb0:	795b      	ldrb	r3, [r3, #5]
    5fb2:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    5fb4:	683b      	ldr	r3, [r7, #0]
    5fb6:	791b      	ldrb	r3, [r3, #4]
    5fb8:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    5fba:	683b      	ldr	r3, [r7, #0]
    5fbc:	789b      	ldrb	r3, [r3, #2]
    5fbe:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    5fc0:	683b      	ldr	r3, [r7, #0]
    5fc2:	785b      	ldrb	r3, [r3, #1]
    5fc4:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    5fc6:	683b      	ldr	r3, [r7, #0]
    5fc8:	781b      	ldrb	r3, [r3, #0]
    5fca:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    5fcc:	2300      	movs	r3, #0
    5fce:	613b      	str	r3, [r7, #16]
    5fd0:	e01a      	b.n	6008 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    5fd2:	687b      	ldr	r3, [r7, #4]
    5fd4:	699b      	ldr	r3, [r3, #24]
    5fd6:	b29a      	uxth	r2, r3
    5fd8:	693b      	ldr	r3, [r7, #16]
    5fda:	b29b      	uxth	r3, r3
    5fdc:	4413      	add	r3, r2
    5fde:	b29b      	uxth	r3, r3
    5fe0:	4618      	mov	r0, r3
    5fe2:	4b29      	ldr	r3, [pc, #164]	; (6088 <convert_datetime_to_timestamp+0xfc>)
    5fe4:	4798      	blx	r3
    5fe6:	4603      	mov	r3, r0
    5fe8:	2b00      	cmp	r3, #0
    5fea:	d006      	beq.n	5ffa <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    5fec:	697b      	ldr	r3, [r7, #20]
    5fee:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    5ff2:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    5ff6:	617b      	str	r3, [r7, #20]
    5ff8:	e003      	b.n	6002 <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    5ffa:	697a      	ldr	r2, [r7, #20]
    5ffc:	4b23      	ldr	r3, [pc, #140]	; (608c <convert_datetime_to_timestamp+0x100>)
    5ffe:	4413      	add	r3, r2
    6000:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    6002:	693b      	ldr	r3, [r7, #16]
    6004:	3301      	adds	r3, #1
    6006:	613b      	str	r3, [r7, #16]
    6008:	7bfa      	ldrb	r2, [r7, #15]
    600a:	693b      	ldr	r3, [r7, #16]
    600c:	429a      	cmp	r2, r3
    600e:	d8e0      	bhi.n	5fd2 <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    6010:	2301      	movs	r3, #1
    6012:	613b      	str	r3, [r7, #16]
    6014:	e00f      	b.n	6036 <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    6016:	683b      	ldr	r3, [r7, #0]
    6018:	88db      	ldrh	r3, [r3, #6]
    601a:	461a      	mov	r2, r3
    601c:	693b      	ldr	r3, [r7, #16]
    601e:	b2db      	uxtb	r3, r3
    6020:	4619      	mov	r1, r3
    6022:	4610      	mov	r0, r2
    6024:	4b1a      	ldr	r3, [pc, #104]	; (6090 <convert_datetime_to_timestamp+0x104>)
    6026:	4798      	blx	r3
    6028:	4602      	mov	r2, r0
    602a:	697b      	ldr	r3, [r7, #20]
    602c:	4413      	add	r3, r2
    602e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    6030:	693b      	ldr	r3, [r7, #16]
    6032:	3301      	adds	r3, #1
    6034:	613b      	str	r3, [r7, #16]
    6036:	7bba      	ldrb	r2, [r7, #14]
    6038:	693b      	ldr	r3, [r7, #16]
    603a:	429a      	cmp	r2, r3
    603c:	d8eb      	bhi.n	6016 <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    603e:	7b7b      	ldrb	r3, [r7, #13]
    6040:	3b01      	subs	r3, #1
    6042:	4a14      	ldr	r2, [pc, #80]	; (6094 <convert_datetime_to_timestamp+0x108>)
    6044:	fb02 f303 	mul.w	r3, r2, r3
    6048:	461a      	mov	r2, r3
    604a:	697b      	ldr	r3, [r7, #20]
    604c:	4413      	add	r3, r2
    604e:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    6050:	7b3b      	ldrb	r3, [r7, #12]
    6052:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    6056:	fb02 f303 	mul.w	r3, r2, r3
    605a:	461a      	mov	r2, r3
    605c:	697b      	ldr	r3, [r7, #20]
    605e:	4413      	add	r3, r2
    6060:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    6062:	7afa      	ldrb	r2, [r7, #11]
    6064:	4613      	mov	r3, r2
    6066:	011b      	lsls	r3, r3, #4
    6068:	1a9b      	subs	r3, r3, r2
    606a:	009b      	lsls	r3, r3, #2
    606c:	461a      	mov	r2, r3
    606e:	697b      	ldr	r3, [r7, #20]
    6070:	4413      	add	r3, r2
    6072:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    6074:	7abb      	ldrb	r3, [r7, #10]
    6076:	697a      	ldr	r2, [r7, #20]
    6078:	4413      	add	r3, r2
    607a:	617b      	str	r3, [r7, #20]

	return tmp;
    607c:	697b      	ldr	r3, [r7, #20]
}
    607e:	4618      	mov	r0, r3
    6080:	3718      	adds	r7, #24
    6082:	46bd      	mov	sp, r7
    6084:	bd80      	pop	{r7, pc}
    6086:	bf00      	nop
    6088:	00005d71 	.word	0x00005d71
    608c:	01e13380 	.word	0x01e13380
    6090:	00005d99 	.word	0x00005d99
    6094:	00015180 	.word	0x00015180

00006098 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    6098:	b580      	push	{r7, lr}
    609a:	b084      	sub	sp, #16
    609c:	af00      	add	r7, sp, #0
    609e:	6078      	str	r0, [r7, #4]
    60a0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    60a2:	2300      	movs	r3, #0
    60a4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    60a6:	687b      	ldr	r3, [r7, #4]
    60a8:	2b00      	cmp	r3, #0
    60aa:	bf14      	ite	ne
    60ac:	2301      	movne	r3, #1
    60ae:	2300      	moveq	r3, #0
    60b0:	b2db      	uxtb	r3, r3
    60b2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    60b6:	4911      	ldr	r1, [pc, #68]	; (60fc <calendar_init+0x64>)
    60b8:	4618      	mov	r0, r3
    60ba:	4b11      	ldr	r3, [pc, #68]	; (6100 <calendar_init+0x68>)
    60bc:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    60be:	687b      	ldr	r3, [r7, #4]
    60c0:	681a      	ldr	r2, [r3, #0]
    60c2:	683b      	ldr	r3, [r7, #0]
    60c4:	429a      	cmp	r2, r3
    60c6:	d101      	bne.n	60cc <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    60c8:	2300      	movs	r3, #0
    60ca:	e013      	b.n	60f4 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	681b      	ldr	r3, [r3, #0]
    60d0:	2b00      	cmp	r3, #0
    60d2:	d002      	beq.n	60da <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    60d4:	f06f 0311 	mvn.w	r3, #17
    60d8:	e00c      	b.n	60f4 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    60da:	687b      	ldr	r3, [r7, #4]
    60dc:	683a      	ldr	r2, [r7, #0]
    60de:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	4618      	mov	r0, r3
    60e4:	4b07      	ldr	r3, [pc, #28]	; (6104 <calendar_init+0x6c>)
    60e6:	4798      	blx	r3
    60e8:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    60ea:	687b      	ldr	r3, [r7, #4]
    60ec:	f240 72b2 	movw	r2, #1970	; 0x7b2
    60f0:	619a      	str	r2, [r3, #24]

	return ret;
    60f2:	68fb      	ldr	r3, [r7, #12]
}
    60f4:	4618      	mov	r0, r3
    60f6:	3710      	adds	r7, #16
    60f8:	46bd      	mov	sp, r7
    60fa:	bd80      	pop	{r7, pc}
    60fc:	00021904 	.word	0x00021904
    6100:	00007e21 	.word	0x00007e21
    6104:	0000a75d 	.word	0x0000a75d

00006108 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    6108:	b580      	push	{r7, lr}
    610a:	b082      	sub	sp, #8
    610c:	af00      	add	r7, sp, #0
    610e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    6110:	687b      	ldr	r3, [r7, #4]
    6112:	2b00      	cmp	r3, #0
    6114:	bf14      	ite	ne
    6116:	2301      	movne	r3, #1
    6118:	2300      	moveq	r3, #0
    611a:	b2db      	uxtb	r3, r3
    611c:	f240 12e5 	movw	r2, #485	; 0x1e5
    6120:	4906      	ldr	r1, [pc, #24]	; (613c <calendar_enable+0x34>)
    6122:	4618      	mov	r0, r3
    6124:	4b06      	ldr	r3, [pc, #24]	; (6140 <calendar_enable+0x38>)
    6126:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    6128:	687b      	ldr	r3, [r7, #4]
    612a:	4618      	mov	r0, r3
    612c:	4b05      	ldr	r3, [pc, #20]	; (6144 <calendar_enable+0x3c>)
    612e:	4798      	blx	r3

	return ERR_NONE;
    6130:	2300      	movs	r3, #0
}
    6132:	4618      	mov	r0, r3
    6134:	3708      	adds	r7, #8
    6136:	46bd      	mov	sp, r7
    6138:	bd80      	pop	{r7, pc}
    613a:	bf00      	nop
    613c:	00021904 	.word	0x00021904
    6140:	00007e21 	.word	0x00007e21
    6144:	0000a815 	.word	0x0000a815

00006148 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    6148:	b580      	push	{r7, lr}
    614a:	b086      	sub	sp, #24
    614c:	af00      	add	r7, sp, #0
    614e:	6078      	str	r0, [r7, #4]
    6150:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    6152:	687b      	ldr	r3, [r7, #4]
    6154:	2b00      	cmp	r3, #0
    6156:	bf14      	ite	ne
    6158:	2301      	movne	r3, #1
    615a:	2300      	moveq	r3, #0
    615c:	b2db      	uxtb	r3, r3
    615e:	f44f 7203 	mov.w	r2, #524	; 0x20c
    6162:	4915      	ldr	r1, [pc, #84]	; (61b8 <calendar_set_time+0x70>)
    6164:	4618      	mov	r0, r3
    6166:	4b15      	ldr	r3, [pc, #84]	; (61bc <calendar_set_time+0x74>)
    6168:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    616a:	687b      	ldr	r3, [r7, #4]
    616c:	4618      	mov	r0, r3
    616e:	4b14      	ldr	r3, [pc, #80]	; (61c0 <calendar_set_time+0x78>)
    6170:	4798      	blx	r3
    6172:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    6174:	f107 0308 	add.w	r3, r7, #8
    6178:	461a      	mov	r2, r3
    617a:	6979      	ldr	r1, [r7, #20]
    617c:	6878      	ldr	r0, [r7, #4]
    617e:	4b11      	ldr	r3, [pc, #68]	; (61c4 <calendar_set_time+0x7c>)
    6180:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    6182:	683b      	ldr	r3, [r7, #0]
    6184:	781b      	ldrb	r3, [r3, #0]
    6186:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    6188:	683b      	ldr	r3, [r7, #0]
    618a:	785b      	ldrb	r3, [r3, #1]
    618c:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    618e:	683b      	ldr	r3, [r7, #0]
    6190:	789b      	ldrb	r3, [r3, #2]
    6192:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    6194:	f107 0308 	add.w	r3, r7, #8
    6198:	4619      	mov	r1, r3
    619a:	6878      	ldr	r0, [r7, #4]
    619c:	4b0a      	ldr	r3, [pc, #40]	; (61c8 <calendar_set_time+0x80>)
    619e:	4798      	blx	r3
    61a0:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	6939      	ldr	r1, [r7, #16]
    61a6:	4618      	mov	r0, r3
    61a8:	4b08      	ldr	r3, [pc, #32]	; (61cc <calendar_set_time+0x84>)
    61aa:	4798      	blx	r3

	return ERR_NONE;
    61ac:	2300      	movs	r3, #0
}
    61ae:	4618      	mov	r0, r3
    61b0:	3718      	adds	r7, #24
    61b2:	46bd      	mov	sp, r7
    61b4:	bd80      	pop	{r7, pc}
    61b6:	bf00      	nop
    61b8:	00021904 	.word	0x00021904
    61bc:	00007e21 	.word	0x00007e21
    61c0:	0000a8b1 	.word	0x0000a8b1
    61c4:	00005e81 	.word	0x00005e81
    61c8:	00005f8d 	.word	0x00005f8d
    61cc:	0000a861 	.word	0x0000a861

000061d0 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    61d0:	b580      	push	{r7, lr}
    61d2:	b086      	sub	sp, #24
    61d4:	af00      	add	r7, sp, #0
    61d6:	6078      	str	r0, [r7, #4]
    61d8:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    61da:	687b      	ldr	r3, [r7, #4]
    61dc:	2b00      	cmp	r3, #0
    61de:	bf14      	ite	ne
    61e0:	2301      	movne	r3, #1
    61e2:	2300      	moveq	r3, #0
    61e4:	b2db      	uxtb	r3, r3
    61e6:	f44f 7209 	mov.w	r2, #548	; 0x224
    61ea:	4915      	ldr	r1, [pc, #84]	; (6240 <calendar_set_date+0x70>)
    61ec:	4618      	mov	r0, r3
    61ee:	4b15      	ldr	r3, [pc, #84]	; (6244 <calendar_set_date+0x74>)
    61f0:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    61f2:	687b      	ldr	r3, [r7, #4]
    61f4:	4618      	mov	r0, r3
    61f6:	4b14      	ldr	r3, [pc, #80]	; (6248 <calendar_set_date+0x78>)
    61f8:	4798      	blx	r3
    61fa:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    61fc:	f107 0308 	add.w	r3, r7, #8
    6200:	461a      	mov	r2, r3
    6202:	6979      	ldr	r1, [r7, #20]
    6204:	6878      	ldr	r0, [r7, #4]
    6206:	4b11      	ldr	r3, [pc, #68]	; (624c <calendar_set_date+0x7c>)
    6208:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    620a:	683b      	ldr	r3, [r7, #0]
    620c:	781b      	ldrb	r3, [r3, #0]
    620e:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    6210:	683b      	ldr	r3, [r7, #0]
    6212:	785b      	ldrb	r3, [r3, #1]
    6214:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    6216:	683b      	ldr	r3, [r7, #0]
    6218:	885b      	ldrh	r3, [r3, #2]
    621a:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    621c:	f107 0308 	add.w	r3, r7, #8
    6220:	4619      	mov	r1, r3
    6222:	6878      	ldr	r0, [r7, #4]
    6224:	4b0a      	ldr	r3, [pc, #40]	; (6250 <calendar_set_date+0x80>)
    6226:	4798      	blx	r3
    6228:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    622a:	687b      	ldr	r3, [r7, #4]
    622c:	6939      	ldr	r1, [r7, #16]
    622e:	4618      	mov	r0, r3
    6230:	4b08      	ldr	r3, [pc, #32]	; (6254 <calendar_set_date+0x84>)
    6232:	4798      	blx	r3

	return ERR_NONE;
    6234:	2300      	movs	r3, #0
}
    6236:	4618      	mov	r0, r3
    6238:	3718      	adds	r7, #24
    623a:	46bd      	mov	sp, r7
    623c:	bd80      	pop	{r7, pc}
    623e:	bf00      	nop
    6240:	00021904 	.word	0x00021904
    6244:	00007e21 	.word	0x00007e21
    6248:	0000a8b1 	.word	0x0000a8b1
    624c:	00005e81 	.word	0x00005e81
    6250:	00005f8d 	.word	0x00005f8d
    6254:	0000a861 	.word	0x0000a861

00006258 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    6258:	b580      	push	{r7, lr}
    625a:	b084      	sub	sp, #16
    625c:	af00      	add	r7, sp, #0
    625e:	6078      	str	r0, [r7, #4]
    6260:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    6262:	687b      	ldr	r3, [r7, #4]
    6264:	2b00      	cmp	r3, #0
    6266:	bf14      	ite	ne
    6268:	2301      	movne	r3, #1
    626a:	2300      	moveq	r3, #0
    626c:	b2db      	uxtb	r3, r3
    626e:	f240 223b 	movw	r2, #571	; 0x23b
    6272:	4909      	ldr	r1, [pc, #36]	; (6298 <calendar_get_date_time+0x40>)
    6274:	4618      	mov	r0, r3
    6276:	4b09      	ldr	r3, [pc, #36]	; (629c <calendar_get_date_time+0x44>)
    6278:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    627a:	687b      	ldr	r3, [r7, #4]
    627c:	4618      	mov	r0, r3
    627e:	4b08      	ldr	r3, [pc, #32]	; (62a0 <calendar_get_date_time+0x48>)
    6280:	4798      	blx	r3
    6282:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    6284:	683a      	ldr	r2, [r7, #0]
    6286:	68f9      	ldr	r1, [r7, #12]
    6288:	6878      	ldr	r0, [r7, #4]
    628a:	4b06      	ldr	r3, [pc, #24]	; (62a4 <calendar_get_date_time+0x4c>)
    628c:	4798      	blx	r3

	return ERR_NONE;
    628e:	2300      	movs	r3, #0
}
    6290:	4618      	mov	r0, r3
    6292:	3710      	adds	r7, #16
    6294:	46bd      	mov	sp, r7
    6296:	bd80      	pop	{r7, pc}
    6298:	00021904 	.word	0x00021904
    629c:	00007e21 	.word	0x00007e21
    62a0:	0000a8b1 	.word	0x0000a8b1
    62a4:	00005e81 	.word	0x00005e81

000062a8 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    62a8:	b580      	push	{r7, lr}
    62aa:	b084      	sub	sp, #16
    62ac:	af00      	add	r7, sp, #0
    62ae:	6078      	str	r0, [r7, #4]
    62b0:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    62b2:	687b      	ldr	r3, [r7, #4]
    62b4:	2b00      	cmp	r3, #0
    62b6:	d004      	beq.n	62c2 <can_async_init+0x1a>
    62b8:	683b      	ldr	r3, [r7, #0]
    62ba:	2b00      	cmp	r3, #0
    62bc:	d001      	beq.n	62c2 <can_async_init+0x1a>
    62be:	2301      	movs	r3, #1
    62c0:	e000      	b.n	62c4 <can_async_init+0x1c>
    62c2:	2300      	movs	r3, #0
    62c4:	f003 0301 	and.w	r3, r3, #1
    62c8:	b2db      	uxtb	r3, r3
    62ca:	2241      	movs	r2, #65	; 0x41
    62cc:	490e      	ldr	r1, [pc, #56]	; (6308 <can_async_init+0x60>)
    62ce:	4618      	mov	r0, r3
    62d0:	4b0e      	ldr	r3, [pc, #56]	; (630c <can_async_init+0x64>)
    62d2:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    62d4:	687b      	ldr	r3, [r7, #4]
    62d6:	6839      	ldr	r1, [r7, #0]
    62d8:	4618      	mov	r0, r3
    62da:	4b0d      	ldr	r3, [pc, #52]	; (6310 <can_async_init+0x68>)
    62dc:	4798      	blx	r3
    62de:	60f8      	str	r0, [r7, #12]
	if (rc) {
    62e0:	68fb      	ldr	r3, [r7, #12]
    62e2:	2b00      	cmp	r3, #0
    62e4:	d001      	beq.n	62ea <can_async_init+0x42>
		return rc;
    62e6:	68fb      	ldr	r3, [r7, #12]
    62e8:	e009      	b.n	62fe <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    62ea:	687b      	ldr	r3, [r7, #4]
    62ec:	4a09      	ldr	r2, [pc, #36]	; (6314 <can_async_init+0x6c>)
    62ee:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    62f0:	687b      	ldr	r3, [r7, #4]
    62f2:	4a09      	ldr	r2, [pc, #36]	; (6318 <can_async_init+0x70>)
    62f4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    62f6:	687b      	ldr	r3, [r7, #4]
    62f8:	4a08      	ldr	r2, [pc, #32]	; (631c <can_async_init+0x74>)
    62fa:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    62fc:	2300      	movs	r3, #0
}
    62fe:	4618      	mov	r0, r3
    6300:	3710      	adds	r7, #16
    6302:	46bd      	mov	sp, r7
    6304:	bd80      	pop	{r7, pc}
    6306:	bf00      	nop
    6308:	00021920 	.word	0x00021920
    630c:	00007e21 	.word	0x00007e21
    6310:	0000837d 	.word	0x0000837d
    6314:	00006321 	.word	0x00006321
    6318:	00006345 	.word	0x00006345
    631c:	00006369 	.word	0x00006369

00006320 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    6320:	b580      	push	{r7, lr}
    6322:	b084      	sub	sp, #16
    6324:	af00      	add	r7, sp, #0
    6326:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    6328:	687b      	ldr	r3, [r7, #4]
    632a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    632c:	68fb      	ldr	r3, [r7, #12]
    632e:	69db      	ldr	r3, [r3, #28]
    6330:	2b00      	cmp	r3, #0
    6332:	d003      	beq.n	633c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    6334:	68fb      	ldr	r3, [r7, #12]
    6336:	69db      	ldr	r3, [r3, #28]
    6338:	68f8      	ldr	r0, [r7, #12]
    633a:	4798      	blx	r3
	}
}
    633c:	bf00      	nop
    633e:	3710      	adds	r7, #16
    6340:	46bd      	mov	sp, r7
    6342:	bd80      	pop	{r7, pc}

00006344 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    6344:	b580      	push	{r7, lr}
    6346:	b084      	sub	sp, #16
    6348:	af00      	add	r7, sp, #0
    634a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    634c:	687b      	ldr	r3, [r7, #4]
    634e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    6350:	68fb      	ldr	r3, [r7, #12]
    6352:	6a1b      	ldr	r3, [r3, #32]
    6354:	2b00      	cmp	r3, #0
    6356:	d003      	beq.n	6360 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    6358:	68fb      	ldr	r3, [r7, #12]
    635a:	6a1b      	ldr	r3, [r3, #32]
    635c:	68f8      	ldr	r0, [r7, #12]
    635e:	4798      	blx	r3
	}
}
    6360:	bf00      	nop
    6362:	3710      	adds	r7, #16
    6364:	46bd      	mov	sp, r7
    6366:	bd80      	pop	{r7, pc}

00006368 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    6368:	b580      	push	{r7, lr}
    636a:	b084      	sub	sp, #16
    636c:	af00      	add	r7, sp, #0
    636e:	6078      	str	r0, [r7, #4]
    6370:	460b      	mov	r3, r1
    6372:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    6374:	687b      	ldr	r3, [r7, #4]
    6376:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    6378:	68fb      	ldr	r3, [r7, #12]
    637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    637c:	2b00      	cmp	r3, #0
    637e:	d005      	beq.n	638c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    6380:	68fb      	ldr	r3, [r7, #12]
    6382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6384:	78fa      	ldrb	r2, [r7, #3]
    6386:	4611      	mov	r1, r2
    6388:	68f8      	ldr	r0, [r7, #12]
    638a:	4798      	blx	r3
	}
}
    638c:	bf00      	nop
    638e:	3710      	adds	r7, #16
    6390:	46bd      	mov	sp, r7
    6392:	bd80      	pop	{r7, pc}

00006394 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    6394:	b580      	push	{r7, lr}
    6396:	b082      	sub	sp, #8
    6398:	af00      	add	r7, sp, #0
    639a:	6078      	str	r0, [r7, #4]
    639c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    639e:	687b      	ldr	r3, [r7, #4]
    63a0:	2b00      	cmp	r3, #0
    63a2:	d004      	beq.n	63ae <crc_sync_init+0x1a>
    63a4:	683b      	ldr	r3, [r7, #0]
    63a6:	2b00      	cmp	r3, #0
    63a8:	d001      	beq.n	63ae <crc_sync_init+0x1a>
    63aa:	2301      	movs	r3, #1
    63ac:	e000      	b.n	63b0 <crc_sync_init+0x1c>
    63ae:	2300      	movs	r3, #0
    63b0:	f003 0301 	and.w	r3, r3, #1
    63b4:	b2db      	uxtb	r3, r3
    63b6:	222b      	movs	r2, #43	; 0x2b
    63b8:	4906      	ldr	r1, [pc, #24]	; (63d4 <crc_sync_init+0x40>)
    63ba:	4618      	mov	r0, r3
    63bc:	4b06      	ldr	r3, [pc, #24]	; (63d8 <crc_sync_init+0x44>)
    63be:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    63c0:	687b      	ldr	r3, [r7, #4]
    63c2:	6839      	ldr	r1, [r7, #0]
    63c4:	4618      	mov	r0, r3
    63c6:	4b05      	ldr	r3, [pc, #20]	; (63dc <crc_sync_init+0x48>)
    63c8:	4798      	blx	r3
    63ca:	4603      	mov	r3, r0
}
    63cc:	4618      	mov	r0, r3
    63ce:	3708      	adds	r7, #8
    63d0:	46bd      	mov	sp, r7
    63d2:	bd80      	pop	{r7, pc}
    63d4:	0002193c 	.word	0x0002193c
    63d8:	00007e21 	.word	0x00007e21
    63dc:	00008ba9 	.word	0x00008ba9

000063e0 <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    63e0:	b580      	push	{r7, lr}
    63e2:	b082      	sub	sp, #8
    63e4:	af00      	add	r7, sp, #0
    63e6:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    63e8:	687b      	ldr	r3, [r7, #4]
    63ea:	2b00      	cmp	r3, #0
    63ec:	bf14      	ite	ne
    63ee:	2301      	movne	r3, #1
    63f0:	2300      	moveq	r3, #0
    63f2:	b2db      	uxtb	r3, r3
    63f4:	223f      	movs	r2, #63	; 0x3f
    63f6:	4906      	ldr	r1, [pc, #24]	; (6410 <crc_sync_enable+0x30>)
    63f8:	4618      	mov	r0, r3
    63fa:	4b06      	ldr	r3, [pc, #24]	; (6414 <crc_sync_enable+0x34>)
    63fc:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    63fe:	687b      	ldr	r3, [r7, #4]
    6400:	4618      	mov	r0, r3
    6402:	4b05      	ldr	r3, [pc, #20]	; (6418 <crc_sync_enable+0x38>)
    6404:	4798      	blx	r3
    6406:	4603      	mov	r3, r0
}
    6408:	4618      	mov	r0, r3
    640a:	3708      	adds	r7, #8
    640c:	46bd      	mov	sp, r7
    640e:	bd80      	pop	{r7, pc}
    6410:	0002193c 	.word	0x0002193c
    6414:	00007e21 	.word	0x00007e21
    6418:	00008bc7 	.word	0x00008bc7

0000641c <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    641c:	b590      	push	{r4, r7, lr}
    641e:	b085      	sub	sp, #20
    6420:	af00      	add	r7, sp, #0
    6422:	60f8      	str	r0, [r7, #12]
    6424:	60b9      	str	r1, [r7, #8]
    6426:	607a      	str	r2, [r7, #4]
    6428:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    642a:	68fb      	ldr	r3, [r7, #12]
    642c:	2b00      	cmp	r3, #0
    642e:	d00a      	beq.n	6446 <crc_sync_crc32+0x2a>
    6430:	68bb      	ldr	r3, [r7, #8]
    6432:	2b00      	cmp	r3, #0
    6434:	d007      	beq.n	6446 <crc_sync_crc32+0x2a>
    6436:	687b      	ldr	r3, [r7, #4]
    6438:	2b00      	cmp	r3, #0
    643a:	d004      	beq.n	6446 <crc_sync_crc32+0x2a>
    643c:	683b      	ldr	r3, [r7, #0]
    643e:	2b00      	cmp	r3, #0
    6440:	d001      	beq.n	6446 <crc_sync_crc32+0x2a>
    6442:	2301      	movs	r3, #1
    6444:	e000      	b.n	6448 <crc_sync_crc32+0x2c>
    6446:	2300      	movs	r3, #0
    6448:	f003 0301 	and.w	r3, r3, #1
    644c:	b2db      	uxtb	r3, r3
    644e:	2253      	movs	r2, #83	; 0x53
    6450:	4907      	ldr	r1, [pc, #28]	; (6470 <crc_sync_crc32+0x54>)
    6452:	4618      	mov	r0, r3
    6454:	4b07      	ldr	r3, [pc, #28]	; (6474 <crc_sync_crc32+0x58>)
    6456:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    6458:	68f8      	ldr	r0, [r7, #12]
    645a:	683b      	ldr	r3, [r7, #0]
    645c:	687a      	ldr	r2, [r7, #4]
    645e:	68b9      	ldr	r1, [r7, #8]
    6460:	4c05      	ldr	r4, [pc, #20]	; (6478 <crc_sync_crc32+0x5c>)
    6462:	47a0      	blx	r4
    6464:	4603      	mov	r3, r0
}
    6466:	4618      	mov	r0, r3
    6468:	3714      	adds	r7, #20
    646a:	46bd      	mov	sp, r7
    646c:	bd90      	pop	{r4, r7, pc}
    646e:	bf00      	nop
    6470:	0002193c 	.word	0x0002193c
    6474:	00007e21 	.word	0x00007e21
    6478:	00008bdd 	.word	0x00008bdd

0000647c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    647c:	b590      	push	{r4, r7, lr}
    647e:	b083      	sub	sp, #12
    6480:	af00      	add	r7, sp, #0
    6482:	4603      	mov	r3, r0
    6484:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    6486:	4b07      	ldr	r3, [pc, #28]	; (64a4 <delay_us+0x28>)
    6488:	681c      	ldr	r4, [r3, #0]
    648a:	88fb      	ldrh	r3, [r7, #6]
    648c:	4618      	mov	r0, r3
    648e:	4b06      	ldr	r3, [pc, #24]	; (64a8 <delay_us+0x2c>)
    6490:	4798      	blx	r3
    6492:	4603      	mov	r3, r0
    6494:	4619      	mov	r1, r3
    6496:	4620      	mov	r0, r4
    6498:	4b04      	ldr	r3, [pc, #16]	; (64ac <delay_us+0x30>)
    649a:	4798      	blx	r3
}
    649c:	bf00      	nop
    649e:	370c      	adds	r7, #12
    64a0:	46bd      	mov	sp, r7
    64a2:	bd90      	pop	{r4, r7, pc}
    64a4:	20008590 	.word	0x20008590
    64a8:	000087d5 	.word	0x000087d5
    64ac:	00008969 	.word	0x00008969

000064b0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    64b0:	b590      	push	{r4, r7, lr}
    64b2:	b083      	sub	sp, #12
    64b4:	af00      	add	r7, sp, #0
    64b6:	4603      	mov	r3, r0
    64b8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    64ba:	4b07      	ldr	r3, [pc, #28]	; (64d8 <delay_ms+0x28>)
    64bc:	681c      	ldr	r4, [r3, #0]
    64be:	88fb      	ldrh	r3, [r7, #6]
    64c0:	4618      	mov	r0, r3
    64c2:	4b06      	ldr	r3, [pc, #24]	; (64dc <delay_ms+0x2c>)
    64c4:	4798      	blx	r3
    64c6:	4603      	mov	r3, r0
    64c8:	4619      	mov	r1, r3
    64ca:	4620      	mov	r0, r4
    64cc:	4b04      	ldr	r3, [pc, #16]	; (64e0 <delay_ms+0x30>)
    64ce:	4798      	blx	r3
}
    64d0:	bf00      	nop
    64d2:	370c      	adds	r7, #12
    64d4:	46bd      	mov	sp, r7
    64d6:	bd90      	pop	{r4, r7, pc}
    64d8:	20008590 	.word	0x20008590
    64dc:	00008941 	.word	0x00008941
    64e0:	00008969 	.word	0x00008969

000064e4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    64e4:	b580      	push	{r7, lr}
    64e6:	af00      	add	r7, sp, #0
	return _event_system_init();
    64e8:	4b02      	ldr	r3, [pc, #8]	; (64f4 <event_system_init+0x10>)
    64ea:	4798      	blx	r3
    64ec:	4603      	mov	r3, r0
}
    64ee:	4618      	mov	r0, r3
    64f0:	bd80      	pop	{r7, pc}
    64f2:	bf00      	nop
    64f4:	00009451 	.word	0x00009451

000064f8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    64f8:	b580      	push	{r7, lr}
    64fa:	b082      	sub	sp, #8
    64fc:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    64fe:	2300      	movs	r3, #0
    6500:	80fb      	strh	r3, [r7, #6]
    6502:	e00e      	b.n	6522 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    6504:	88fb      	ldrh	r3, [r7, #6]
    6506:	4a0c      	ldr	r2, [pc, #48]	; (6538 <ext_irq_init+0x40>)
    6508:	00db      	lsls	r3, r3, #3
    650a:	4413      	add	r3, r2
    650c:	f04f 32ff 	mov.w	r2, #4294967295
    6510:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    6512:	88fb      	ldrh	r3, [r7, #6]
    6514:	4a08      	ldr	r2, [pc, #32]	; (6538 <ext_irq_init+0x40>)
    6516:	2100      	movs	r1, #0
    6518:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    651c:	88fb      	ldrh	r3, [r7, #6]
    651e:	3301      	adds	r3, #1
    6520:	80fb      	strh	r3, [r7, #6]
    6522:	88fb      	ldrh	r3, [r7, #6]
    6524:	2b06      	cmp	r3, #6
    6526:	d9ed      	bls.n	6504 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    6528:	4804      	ldr	r0, [pc, #16]	; (653c <ext_irq_init+0x44>)
    652a:	4b05      	ldr	r3, [pc, #20]	; (6540 <ext_irq_init+0x48>)
    652c:	4798      	blx	r3
    652e:	4603      	mov	r3, r0
}
    6530:	4618      	mov	r0, r3
    6532:	3708      	adds	r7, #8
    6534:	46bd      	mov	sp, r7
    6536:	bd80      	pop	{r7, pc}
    6538:	20008594 	.word	0x20008594
    653c:	0000669d 	.word	0x0000669d
    6540:	00009019 	.word	0x00009019

00006544 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    6544:	b580      	push	{r7, lr}
    6546:	b086      	sub	sp, #24
    6548:	af00      	add	r7, sp, #0
    654a:	6078      	str	r0, [r7, #4]
    654c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    654e:	2300      	movs	r3, #0
    6550:	75fb      	strb	r3, [r7, #23]
    6552:	2300      	movs	r3, #0
    6554:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    6556:	2300      	movs	r3, #0
    6558:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    655a:	e012      	b.n	6582 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    655c:	7dfb      	ldrb	r3, [r7, #23]
    655e:	4a4d      	ldr	r2, [pc, #308]	; (6694 <ext_irq_register+0x150>)
    6560:	00db      	lsls	r3, r3, #3
    6562:	4413      	add	r3, r2
    6564:	685a      	ldr	r2, [r3, #4]
    6566:	687b      	ldr	r3, [r7, #4]
    6568:	429a      	cmp	r2, r3
    656a:	d107      	bne.n	657c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    656c:	7dfb      	ldrb	r3, [r7, #23]
    656e:	4949      	ldr	r1, [pc, #292]	; (6694 <ext_irq_register+0x150>)
    6570:	683a      	ldr	r2, [r7, #0]
    6572:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    6576:	2301      	movs	r3, #1
    6578:	757b      	strb	r3, [r7, #21]
			break;
    657a:	e005      	b.n	6588 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    657c:	7dfb      	ldrb	r3, [r7, #23]
    657e:	3301      	adds	r3, #1
    6580:	75fb      	strb	r3, [r7, #23]
    6582:	7dfb      	ldrb	r3, [r7, #23]
    6584:	2b06      	cmp	r3, #6
    6586:	d9e9      	bls.n	655c <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    6588:	683b      	ldr	r3, [r7, #0]
    658a:	2b00      	cmp	r3, #0
    658c:	d10e      	bne.n	65ac <ext_irq_register+0x68>
		if (!found) {
    658e:	7d7b      	ldrb	r3, [r7, #21]
    6590:	f083 0301 	eor.w	r3, r3, #1
    6594:	b2db      	uxtb	r3, r3
    6596:	2b00      	cmp	r3, #0
    6598:	d002      	beq.n	65a0 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    659a:	f06f 030c 	mvn.w	r3, #12
    659e:	e074      	b.n	668a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    65a0:	2100      	movs	r1, #0
    65a2:	6878      	ldr	r0, [r7, #4]
    65a4:	4b3c      	ldr	r3, [pc, #240]	; (6698 <ext_irq_register+0x154>)
    65a6:	4798      	blx	r3
    65a8:	4603      	mov	r3, r0
    65aa:	e06e      	b.n	668a <ext_irq_register+0x146>
	}

	if (!found) {
    65ac:	7d7b      	ldrb	r3, [r7, #21]
    65ae:	f083 0301 	eor.w	r3, r3, #1
    65b2:	b2db      	uxtb	r3, r3
    65b4:	2b00      	cmp	r3, #0
    65b6:	d05a      	beq.n	666e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    65b8:	2300      	movs	r3, #0
    65ba:	75fb      	strb	r3, [r7, #23]
    65bc:	e016      	b.n	65ec <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    65be:	7dfb      	ldrb	r3, [r7, #23]
    65c0:	4a34      	ldr	r2, [pc, #208]	; (6694 <ext_irq_register+0x150>)
    65c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    65c6:	2b00      	cmp	r3, #0
    65c8:	d10d      	bne.n	65e6 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    65ca:	7dfb      	ldrb	r3, [r7, #23]
    65cc:	4931      	ldr	r1, [pc, #196]	; (6694 <ext_irq_register+0x150>)
    65ce:	683a      	ldr	r2, [r7, #0]
    65d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    65d4:	7dfb      	ldrb	r3, [r7, #23]
    65d6:	4a2f      	ldr	r2, [pc, #188]	; (6694 <ext_irq_register+0x150>)
    65d8:	00db      	lsls	r3, r3, #3
    65da:	4413      	add	r3, r2
    65dc:	687a      	ldr	r2, [r7, #4]
    65de:	605a      	str	r2, [r3, #4]
				found           = true;
    65e0:	2301      	movs	r3, #1
    65e2:	757b      	strb	r3, [r7, #21]
				break;
    65e4:	e005      	b.n	65f2 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    65e6:	7dfb      	ldrb	r3, [r7, #23]
    65e8:	3301      	adds	r3, #1
    65ea:	75fb      	strb	r3, [r7, #23]
    65ec:	7dfb      	ldrb	r3, [r7, #23]
    65ee:	2b06      	cmp	r3, #6
    65f0:	d9e5      	bls.n	65be <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    65f2:	e036      	b.n	6662 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    65f4:	7dfb      	ldrb	r3, [r7, #23]
    65f6:	4a27      	ldr	r2, [pc, #156]	; (6694 <ext_irq_register+0x150>)
    65f8:	00db      	lsls	r3, r3, #3
    65fa:	4413      	add	r3, r2
    65fc:	685a      	ldr	r2, [r3, #4]
    65fe:	7dbb      	ldrb	r3, [r7, #22]
    6600:	4924      	ldr	r1, [pc, #144]	; (6694 <ext_irq_register+0x150>)
    6602:	00db      	lsls	r3, r3, #3
    6604:	440b      	add	r3, r1
    6606:	685b      	ldr	r3, [r3, #4]
    6608:	429a      	cmp	r2, r3
    660a:	d227      	bcs.n	665c <ext_irq_register+0x118>
    660c:	7dbb      	ldrb	r3, [r7, #22]
    660e:	4a21      	ldr	r2, [pc, #132]	; (6694 <ext_irq_register+0x150>)
    6610:	00db      	lsls	r3, r3, #3
    6612:	4413      	add	r3, r2
    6614:	685b      	ldr	r3, [r3, #4]
    6616:	f1b3 3fff 	cmp.w	r3, #4294967295
    661a:	d01f      	beq.n	665c <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    661c:	7dbb      	ldrb	r3, [r7, #22]
    661e:	491d      	ldr	r1, [pc, #116]	; (6694 <ext_irq_register+0x150>)
    6620:	f107 020c 	add.w	r2, r7, #12
    6624:	00db      	lsls	r3, r3, #3
    6626:	440b      	add	r3, r1
    6628:	e893 0003 	ldmia.w	r3, {r0, r1}
    662c:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    6630:	7dbb      	ldrb	r3, [r7, #22]
    6632:	7dfa      	ldrb	r2, [r7, #23]
    6634:	4817      	ldr	r0, [pc, #92]	; (6694 <ext_irq_register+0x150>)
    6636:	4917      	ldr	r1, [pc, #92]	; (6694 <ext_irq_register+0x150>)
    6638:	00db      	lsls	r3, r3, #3
    663a:	4403      	add	r3, r0
    663c:	00d2      	lsls	r2, r2, #3
    663e:	440a      	add	r2, r1
    6640:	e892 0003 	ldmia.w	r2, {r0, r1}
    6644:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    6648:	7dfb      	ldrb	r3, [r7, #23]
    664a:	4a12      	ldr	r2, [pc, #72]	; (6694 <ext_irq_register+0x150>)
    664c:	00db      	lsls	r3, r3, #3
    664e:	4413      	add	r3, r2
    6650:	f107 020c 	add.w	r2, r7, #12
    6654:	e892 0003 	ldmia.w	r2, {r0, r1}
    6658:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    665c:	7dbb      	ldrb	r3, [r7, #22]
    665e:	3301      	adds	r3, #1
    6660:	75bb      	strb	r3, [r7, #22]
    6662:	7dbb      	ldrb	r3, [r7, #22]
    6664:	2b06      	cmp	r3, #6
    6666:	d802      	bhi.n	666e <ext_irq_register+0x12a>
    6668:	7dfb      	ldrb	r3, [r7, #23]
    666a:	2b06      	cmp	r3, #6
    666c:	d9c2      	bls.n	65f4 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    666e:	7d7b      	ldrb	r3, [r7, #21]
    6670:	f083 0301 	eor.w	r3, r3, #1
    6674:	b2db      	uxtb	r3, r3
    6676:	2b00      	cmp	r3, #0
    6678:	d002      	beq.n	6680 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    667a:	f06f 030c 	mvn.w	r3, #12
    667e:	e004      	b.n	668a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    6680:	2101      	movs	r1, #1
    6682:	6878      	ldr	r0, [r7, #4]
    6684:	4b04      	ldr	r3, [pc, #16]	; (6698 <ext_irq_register+0x154>)
    6686:	4798      	blx	r3
    6688:	4603      	mov	r3, r0
}
    668a:	4618      	mov	r0, r3
    668c:	3718      	adds	r7, #24
    668e:	46bd      	mov	sp, r7
    6690:	bd80      	pop	{r7, pc}
    6692:	bf00      	nop
    6694:	20008594 	.word	0x20008594
    6698:	00009189 	.word	0x00009189

0000669c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    669c:	b580      	push	{r7, lr}
    669e:	b084      	sub	sp, #16
    66a0:	af00      	add	r7, sp, #0
    66a2:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    66a4:	2300      	movs	r3, #0
    66a6:	73fb      	strb	r3, [r7, #15]
    66a8:	2307      	movs	r3, #7
    66aa:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    66ac:	e02a      	b.n	6704 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    66ae:	7bba      	ldrb	r2, [r7, #14]
    66b0:	7bfb      	ldrb	r3, [r7, #15]
    66b2:	4413      	add	r3, r2
    66b4:	105b      	asrs	r3, r3, #1
    66b6:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    66b8:	7b7b      	ldrb	r3, [r7, #13]
    66ba:	2b06      	cmp	r3, #6
    66bc:	d827      	bhi.n	670e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    66be:	7b7b      	ldrb	r3, [r7, #13]
    66c0:	4a16      	ldr	r2, [pc, #88]	; (671c <process_ext_irq+0x80>)
    66c2:	00db      	lsls	r3, r3, #3
    66c4:	4413      	add	r3, r2
    66c6:	685a      	ldr	r2, [r3, #4]
    66c8:	687b      	ldr	r3, [r7, #4]
    66ca:	429a      	cmp	r2, r3
    66cc:	d10b      	bne.n	66e6 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    66ce:	7b7b      	ldrb	r3, [r7, #13]
    66d0:	4a12      	ldr	r2, [pc, #72]	; (671c <process_ext_irq+0x80>)
    66d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    66d6:	2b00      	cmp	r3, #0
    66d8:	d01b      	beq.n	6712 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    66da:	7b7b      	ldrb	r3, [r7, #13]
    66dc:	4a0f      	ldr	r2, [pc, #60]	; (671c <process_ext_irq+0x80>)
    66de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    66e2:	4798      	blx	r3
			}
			return;
    66e4:	e015      	b.n	6712 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    66e6:	7b7b      	ldrb	r3, [r7, #13]
    66e8:	4a0c      	ldr	r2, [pc, #48]	; (671c <process_ext_irq+0x80>)
    66ea:	00db      	lsls	r3, r3, #3
    66ec:	4413      	add	r3, r2
    66ee:	685a      	ldr	r2, [r3, #4]
    66f0:	687b      	ldr	r3, [r7, #4]
    66f2:	429a      	cmp	r2, r3
    66f4:	d203      	bcs.n	66fe <process_ext_irq+0x62>
			lower = middle + 1;
    66f6:	7b7b      	ldrb	r3, [r7, #13]
    66f8:	3301      	adds	r3, #1
    66fa:	73fb      	strb	r3, [r7, #15]
    66fc:	e002      	b.n	6704 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    66fe:	7b7b      	ldrb	r3, [r7, #13]
    6700:	3b01      	subs	r3, #1
    6702:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    6704:	7bba      	ldrb	r2, [r7, #14]
    6706:	7bfb      	ldrb	r3, [r7, #15]
    6708:	429a      	cmp	r2, r3
    670a:	d2d0      	bcs.n	66ae <process_ext_irq+0x12>
    670c:	e002      	b.n	6714 <process_ext_irq+0x78>
			return;
    670e:	bf00      	nop
    6710:	e000      	b.n	6714 <process_ext_irq+0x78>
			return;
    6712:	bf00      	nop
		}
	}
}
    6714:	3710      	adds	r7, #16
    6716:	46bd      	mov	sp, r7
    6718:	bd80      	pop	{r7, pc}
    671a:	bf00      	nop
    671c:	20008594 	.word	0x20008594

00006720 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    6720:	b580      	push	{r7, lr}
    6722:	b084      	sub	sp, #16
    6724:	af00      	add	r7, sp, #0
    6726:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    6728:	687b      	ldr	r3, [r7, #4]
    672a:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    672c:	687b      	ldr	r3, [r7, #4]
    672e:	885b      	ldrh	r3, [r3, #2]
    6730:	b29b      	uxth	r3, r3
    6732:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6736:	2b00      	cmp	r3, #0
    6738:	d107      	bne.n	674a <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    673a:	68fb      	ldr	r3, [r7, #12]
    673c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    673e:	2b00      	cmp	r3, #0
    6740:	d003      	beq.n	674a <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    6742:	68fb      	ldr	r3, [r7, #12]
    6744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6746:	68f8      	ldr	r0, [r7, #12]
    6748:	4798      	blx	r3
		}
	}
}
    674a:	bf00      	nop
    674c:	3710      	adds	r7, #16
    674e:	46bd      	mov	sp, r7
    6750:	bd80      	pop	{r7, pc}

00006752 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    6752:	b580      	push	{r7, lr}
    6754:	b084      	sub	sp, #16
    6756:	af00      	add	r7, sp, #0
    6758:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    675a:	687b      	ldr	r3, [r7, #4]
    675c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    675e:	687b      	ldr	r3, [r7, #4]
    6760:	885b      	ldrh	r3, [r3, #2]
    6762:	b29b      	uxth	r3, r3
    6764:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6768:	2b00      	cmp	r3, #0
    676a:	d107      	bne.n	677c <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    676c:	68fb      	ldr	r3, [r7, #12]
    676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6770:	2b00      	cmp	r3, #0
    6772:	d003      	beq.n	677c <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    6774:	68fb      	ldr	r3, [r7, #12]
    6776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6778:	68f8      	ldr	r0, [r7, #12]
    677a:	4798      	blx	r3
		}
	}
}
    677c:	bf00      	nop
    677e:	3710      	adds	r7, #16
    6780:	46bd      	mov	sp, r7
    6782:	bd80      	pop	{r7, pc}

00006784 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    6784:	b580      	push	{r7, lr}
    6786:	b084      	sub	sp, #16
    6788:	af00      	add	r7, sp, #0
    678a:	6078      	str	r0, [r7, #4]
    678c:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    678e:	687b      	ldr	r3, [r7, #4]
    6790:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    6792:	687b      	ldr	r3, [r7, #4]
    6794:	885b      	ldrh	r3, [r3, #2]
    6796:	b29b      	uxth	r3, r3
    6798:	f403 7380 	and.w	r3, r3, #256	; 0x100
    679c:	2b00      	cmp	r3, #0
    679e:	d108      	bne.n	67b2 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    67a0:	68fb      	ldr	r3, [r7, #12]
    67a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    67a4:	2b00      	cmp	r3, #0
    67a6:	d004      	beq.n	67b2 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    67a8:	68fb      	ldr	r3, [r7, #12]
    67aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    67ac:	6839      	ldr	r1, [r7, #0]
    67ae:	68f8      	ldr	r0, [r7, #12]
    67b0:	4798      	blx	r3
		}
	}
}
    67b2:	bf00      	nop
    67b4:	3710      	adds	r7, #16
    67b6:	46bd      	mov	sp, r7
    67b8:	bd80      	pop	{r7, pc}
	...

000067bc <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    67bc:	b580      	push	{r7, lr}
    67be:	b08a      	sub	sp, #40	; 0x28
    67c0:	af00      	add	r7, sp, #0
    67c2:	60f8      	str	r0, [r7, #12]
    67c4:	60b9      	str	r1, [r7, #8]
    67c6:	4613      	mov	r3, r2
    67c8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    67ca:	68fb      	ldr	r3, [r7, #12]
    67cc:	3b28      	subs	r3, #40	; 0x28
    67ce:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    67d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    67d2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    67d4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    67d6:	88fb      	ldrh	r3, [r7, #6]
    67d8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    67da:	f248 0301 	movw	r3, #32769	; 0x8001
    67de:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    67e0:	68bb      	ldr	r3, [r7, #8]
    67e2:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    67e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    67e6:	f107 0214 	add.w	r2, r7, #20
    67ea:	4611      	mov	r1, r2
    67ec:	4618      	mov	r0, r3
    67ee:	4b06      	ldr	r3, [pc, #24]	; (6808 <i2c_m_async_read+0x4c>)
    67f0:	4798      	blx	r3
    67f2:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    67f4:	6a3b      	ldr	r3, [r7, #32]
    67f6:	2b00      	cmp	r3, #0
    67f8:	d001      	beq.n	67fe <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    67fa:	6a3b      	ldr	r3, [r7, #32]
    67fc:	e000      	b.n	6800 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    67fe:	88fb      	ldrh	r3, [r7, #6]
}
    6800:	4618      	mov	r0, r3
    6802:	3728      	adds	r7, #40	; 0x28
    6804:	46bd      	mov	sp, r7
    6806:	bd80      	pop	{r7, pc}
    6808:	0000b77d 	.word	0x0000b77d

0000680c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    680c:	b580      	push	{r7, lr}
    680e:	b08a      	sub	sp, #40	; 0x28
    6810:	af00      	add	r7, sp, #0
    6812:	60f8      	str	r0, [r7, #12]
    6814:	60b9      	str	r1, [r7, #8]
    6816:	4613      	mov	r3, r2
    6818:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    681a:	68fb      	ldr	r3, [r7, #12]
    681c:	3b28      	subs	r3, #40	; 0x28
    681e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    6820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6822:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    6824:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6826:	88fb      	ldrh	r3, [r7, #6]
    6828:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    682a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    682e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6830:	68bb      	ldr	r3, [r7, #8]
    6832:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    6834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6836:	f107 0214 	add.w	r2, r7, #20
    683a:	4611      	mov	r1, r2
    683c:	4618      	mov	r0, r3
    683e:	4b06      	ldr	r3, [pc, #24]	; (6858 <i2c_m_async_write+0x4c>)
    6840:	4798      	blx	r3
    6842:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    6844:	6a3b      	ldr	r3, [r7, #32]
    6846:	2b00      	cmp	r3, #0
    6848:	d001      	beq.n	684e <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    684a:	6a3b      	ldr	r3, [r7, #32]
    684c:	e000      	b.n	6850 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    684e:	88fb      	ldrh	r3, [r7, #6]
}
    6850:	4618      	mov	r0, r3
    6852:	3728      	adds	r7, #40	; 0x28
    6854:	46bd      	mov	sp, r7
    6856:	bd80      	pop	{r7, pc}
    6858:	0000b77d 	.word	0x0000b77d

0000685c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    685c:	b580      	push	{r7, lr}
    685e:	b084      	sub	sp, #16
    6860:	af00      	add	r7, sp, #0
    6862:	6078      	str	r0, [r7, #4]
    6864:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    6866:	687b      	ldr	r3, [r7, #4]
    6868:	2b00      	cmp	r3, #0
    686a:	bf14      	ite	ne
    686c:	2301      	movne	r3, #1
    686e:	2300      	moveq	r3, #0
    6870:	b2db      	uxtb	r3, r3
    6872:	2289      	movs	r2, #137	; 0x89
    6874:	4915      	ldr	r1, [pc, #84]	; (68cc <i2c_m_async_init+0x70>)
    6876:	4618      	mov	r0, r3
    6878:	4b15      	ldr	r3, [pc, #84]	; (68d0 <i2c_m_async_init+0x74>)
    687a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    687c:	687b      	ldr	r3, [r7, #4]
    687e:	6839      	ldr	r1, [r7, #0]
    6880:	4618      	mov	r0, r3
    6882:	4b14      	ldr	r3, [pc, #80]	; (68d4 <i2c_m_async_init+0x78>)
    6884:	4798      	blx	r3
    6886:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6888:	68fb      	ldr	r3, [r7, #12]
    688a:	2b00      	cmp	r3, #0
    688c:	d001      	beq.n	6892 <i2c_m_async_init+0x36>
		return init_status;
    688e:	68fb      	ldr	r3, [r7, #12]
    6890:	e018      	b.n	68c4 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    6892:	687b      	ldr	r3, [r7, #4]
    6894:	4a10      	ldr	r2, [pc, #64]	; (68d8 <i2c_m_async_init+0x7c>)
    6896:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    6898:	687b      	ldr	r3, [r7, #4]
    689a:	4a10      	ldr	r2, [pc, #64]	; (68dc <i2c_m_async_init+0x80>)
    689c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    689e:	687b      	ldr	r3, [r7, #4]
    68a0:	4a0f      	ldr	r2, [pc, #60]	; (68e0 <i2c_m_async_init+0x84>)
    68a2:	2101      	movs	r1, #1
    68a4:	4618      	mov	r0, r3
    68a6:	4b0f      	ldr	r3, [pc, #60]	; (68e4 <i2c_m_async_init+0x88>)
    68a8:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    68aa:	687b      	ldr	r3, [r7, #4]
    68ac:	4a0e      	ldr	r2, [pc, #56]	; (68e8 <i2c_m_async_init+0x8c>)
    68ae:	2102      	movs	r1, #2
    68b0:	4618      	mov	r0, r3
    68b2:	4b0c      	ldr	r3, [pc, #48]	; (68e4 <i2c_m_async_init+0x88>)
    68b4:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    68b6:	687b      	ldr	r3, [r7, #4]
    68b8:	4a0c      	ldr	r2, [pc, #48]	; (68ec <i2c_m_async_init+0x90>)
    68ba:	2100      	movs	r1, #0
    68bc:	4618      	mov	r0, r3
    68be:	4b09      	ldr	r3, [pc, #36]	; (68e4 <i2c_m_async_init+0x88>)
    68c0:	4798      	blx	r3

	return ERR_NONE;
    68c2:	2300      	movs	r3, #0
}
    68c4:	4618      	mov	r0, r3
    68c6:	3710      	adds	r7, #16
    68c8:	46bd      	mov	sp, r7
    68ca:	bd80      	pop	{r7, pc}
    68cc:	00021958 	.word	0x00021958
    68d0:	00007e21 	.word	0x00007e21
    68d4:	0000b5cd 	.word	0x0000b5cd
    68d8:	000067bd 	.word	0x000067bd
    68dc:	0000680d 	.word	0x0000680d
    68e0:	00006721 	.word	0x00006721
    68e4:	0000b851 	.word	0x0000b851
    68e8:	00006753 	.word	0x00006753
    68ec:	00006785 	.word	0x00006785

000068f0 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b084      	sub	sp, #16
    68f4:	af00      	add	r7, sp, #0
    68f6:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    68f8:	687b      	ldr	r3, [r7, #4]
    68fa:	2b00      	cmp	r3, #0
    68fc:	bf14      	ite	ne
    68fe:	2301      	movne	r3, #1
    6900:	2300      	moveq	r3, #0
    6902:	b2db      	uxtb	r3, r3
    6904:	22b9      	movs	r2, #185	; 0xb9
    6906:	4911      	ldr	r1, [pc, #68]	; (694c <i2c_m_async_enable+0x5c>)
    6908:	4618      	mov	r0, r3
    690a:	4b11      	ldr	r3, [pc, #68]	; (6950 <i2c_m_async_enable+0x60>)
    690c:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    690e:	687b      	ldr	r3, [r7, #4]
    6910:	4618      	mov	r0, r3
    6912:	4b10      	ldr	r3, [pc, #64]	; (6954 <i2c_m_async_enable+0x64>)
    6914:	4798      	blx	r3
    6916:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    6918:	68fb      	ldr	r3, [r7, #12]
    691a:	2b00      	cmp	r3, #0
    691c:	d111      	bne.n	6942 <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    691e:	687b      	ldr	r3, [r7, #4]
    6920:	2201      	movs	r2, #1
    6922:	2101      	movs	r1, #1
    6924:	4618      	mov	r0, r3
    6926:	4b0c      	ldr	r3, [pc, #48]	; (6958 <i2c_m_async_enable+0x68>)
    6928:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    692a:	687b      	ldr	r3, [r7, #4]
    692c:	2201      	movs	r2, #1
    692e:	2102      	movs	r1, #2
    6930:	4618      	mov	r0, r3
    6932:	4b09      	ldr	r3, [pc, #36]	; (6958 <i2c_m_async_enable+0x68>)
    6934:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    6936:	687b      	ldr	r3, [r7, #4]
    6938:	2201      	movs	r2, #1
    693a:	2100      	movs	r1, #0
    693c:	4618      	mov	r0, r3
    693e:	4b06      	ldr	r3, [pc, #24]	; (6958 <i2c_m_async_enable+0x68>)
    6940:	4798      	blx	r3
	}
	return rc;
    6942:	68fb      	ldr	r3, [r7, #12]
}
    6944:	4618      	mov	r0, r3
    6946:	3710      	adds	r7, #16
    6948:	46bd      	mov	sp, r7
    694a:	bd80      	pop	{r7, pc}
    694c:	00021958 	.word	0x00021958
    6950:	00007e21 	.word	0x00007e21
    6954:	0000b569 	.word	0x0000b569
    6958:	0000b91d 	.word	0x0000b91d

0000695c <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    695c:	b480      	push	{r7}
    695e:	b085      	sub	sp, #20
    6960:	af00      	add	r7, sp, #0
    6962:	60f8      	str	r0, [r7, #12]
    6964:	460b      	mov	r3, r1
    6966:	607a      	str	r2, [r7, #4]
    6968:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    696a:	897b      	ldrh	r3, [r7, #10]
    696c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6970:	b21a      	sxth	r2, r3
    6972:	687b      	ldr	r3, [r7, #4]
    6974:	b21b      	sxth	r3, r3
    6976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    697a:	b21b      	sxth	r3, r3
    697c:	4313      	orrs	r3, r2
    697e:	b21b      	sxth	r3, r3
    6980:	b29a      	uxth	r2, r3
    6982:	68fb      	ldr	r3, [r7, #12]
    6984:	879a      	strh	r2, [r3, #60]	; 0x3c
    6986:	68fb      	ldr	r3, [r7, #12]
    6988:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    698a:	4618      	mov	r0, r3
    698c:	3714      	adds	r7, #20
    698e:	46bd      	mov	sp, r7
    6990:	f85d 7b04 	ldr.w	r7, [sp], #4
    6994:	4770      	bx	lr

00006996 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    6996:	b480      	push	{r7}
    6998:	b085      	sub	sp, #20
    699a:	af00      	add	r7, sp, #0
    699c:	60f8      	str	r0, [r7, #12]
    699e:	460b      	mov	r3, r1
    69a0:	607a      	str	r2, [r7, #4]
    69a2:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    69a4:	7afb      	ldrb	r3, [r7, #11]
    69a6:	2b01      	cmp	r3, #1
    69a8:	d007      	beq.n	69ba <i2c_m_async_register_callback+0x24>
    69aa:	2b02      	cmp	r3, #2
    69ac:	d009      	beq.n	69c2 <i2c_m_async_register_callback+0x2c>
    69ae:	2b00      	cmp	r3, #0
    69b0:	d10b      	bne.n	69ca <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    69b2:	68fb      	ldr	r3, [r7, #12]
    69b4:	687a      	ldr	r2, [r7, #4]
    69b6:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    69b8:	e00a      	b.n	69d0 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    69ba:	68fb      	ldr	r3, [r7, #12]
    69bc:	687a      	ldr	r2, [r7, #4]
    69be:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    69c0:	e006      	b.n	69d0 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    69c2:	68fb      	ldr	r3, [r7, #12]
    69c4:	687a      	ldr	r2, [r7, #4]
    69c6:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    69c8:	e002      	b.n	69d0 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    69ca:	f06f 030c 	mvn.w	r3, #12
    69ce:	e000      	b.n	69d2 <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    69d0:	2300      	movs	r3, #0
}
    69d2:	4618      	mov	r0, r3
    69d4:	3714      	adds	r7, #20
    69d6:	46bd      	mov	sp, r7
    69d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    69dc:	4770      	bx	lr

000069de <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    69de:	b480      	push	{r7}
    69e0:	b083      	sub	sp, #12
    69e2:	af00      	add	r7, sp, #0
    69e4:	6078      	str	r0, [r7, #4]
    69e6:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    69e8:	687b      	ldr	r3, [r7, #4]
    69ea:	f103 0228 	add.w	r2, r3, #40	; 0x28
    69ee:	683b      	ldr	r3, [r7, #0]
    69f0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    69f2:	2300      	movs	r3, #0
}
    69f4:	4618      	mov	r0, r3
    69f6:	370c      	adds	r7, #12
    69f8:	46bd      	mov	sp, r7
    69fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    69fe:	4770      	bx	lr

00006a00 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    6a00:	b580      	push	{r7, lr}
    6a02:	b08a      	sub	sp, #40	; 0x28
    6a04:	af00      	add	r7, sp, #0
    6a06:	60f8      	str	r0, [r7, #12]
    6a08:	60b9      	str	r1, [r7, #8]
    6a0a:	4613      	mov	r3, r2
    6a0c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6a0e:	68fb      	ldr	r3, [r7, #12]
    6a10:	3b14      	subs	r3, #20
    6a12:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a16:	8b9b      	ldrh	r3, [r3, #28]
    6a18:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6a1a:	88fb      	ldrh	r3, [r7, #6]
    6a1c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    6a1e:	f248 0301 	movw	r3, #32769	; 0x8001
    6a22:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    6a24:	68bb      	ldr	r3, [r7, #8]
    6a26:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a2a:	f107 0214 	add.w	r2, r7, #20
    6a2e:	4611      	mov	r1, r2
    6a30:	4618      	mov	r0, r3
    6a32:	4b06      	ldr	r3, [pc, #24]	; (6a4c <i2c_m_sync_read+0x4c>)
    6a34:	4798      	blx	r3
    6a36:	6238      	str	r0, [r7, #32]

	if (ret) {
    6a38:	6a3b      	ldr	r3, [r7, #32]
    6a3a:	2b00      	cmp	r3, #0
    6a3c:	d001      	beq.n	6a42 <i2c_m_sync_read+0x42>
		return ret;
    6a3e:	6a3b      	ldr	r3, [r7, #32]
    6a40:	e000      	b.n	6a44 <i2c_m_sync_read+0x44>
	}

	return n;
    6a42:	88fb      	ldrh	r3, [r7, #6]
}
    6a44:	4618      	mov	r0, r3
    6a46:	3728      	adds	r7, #40	; 0x28
    6a48:	46bd      	mov	sp, r7
    6a4a:	bd80      	pop	{r7, pc}
    6a4c:	0000bafd 	.word	0x0000bafd

00006a50 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    6a50:	b580      	push	{r7, lr}
    6a52:	b08a      	sub	sp, #40	; 0x28
    6a54:	af00      	add	r7, sp, #0
    6a56:	60f8      	str	r0, [r7, #12]
    6a58:	60b9      	str	r1, [r7, #8]
    6a5a:	4613      	mov	r3, r2
    6a5c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6a5e:	68fb      	ldr	r3, [r7, #12]
    6a60:	3b14      	subs	r3, #20
    6a62:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a66:	8b9b      	ldrh	r3, [r3, #28]
    6a68:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6a6a:	88fb      	ldrh	r3, [r7, #6]
    6a6c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    6a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6a72:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6a74:	68bb      	ldr	r3, [r7, #8]
    6a76:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a7a:	f107 0214 	add.w	r2, r7, #20
    6a7e:	4611      	mov	r1, r2
    6a80:	4618      	mov	r0, r3
    6a82:	4b06      	ldr	r3, [pc, #24]	; (6a9c <i2c_m_sync_write+0x4c>)
    6a84:	4798      	blx	r3
    6a86:	6238      	str	r0, [r7, #32]

	if (ret) {
    6a88:	6a3b      	ldr	r3, [r7, #32]
    6a8a:	2b00      	cmp	r3, #0
    6a8c:	d001      	beq.n	6a92 <i2c_m_sync_write+0x42>
		return ret;
    6a8e:	6a3b      	ldr	r3, [r7, #32]
    6a90:	e000      	b.n	6a94 <i2c_m_sync_write+0x44>
	}

	return n;
    6a92:	88fb      	ldrh	r3, [r7, #6]
}
    6a94:	4618      	mov	r0, r3
    6a96:	3728      	adds	r7, #40	; 0x28
    6a98:	46bd      	mov	sp, r7
    6a9a:	bd80      	pop	{r7, pc}
    6a9c:	0000bafd 	.word	0x0000bafd

00006aa0 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    6aa0:	b580      	push	{r7, lr}
    6aa2:	b084      	sub	sp, #16
    6aa4:	af00      	add	r7, sp, #0
    6aa6:	6078      	str	r0, [r7, #4]
    6aa8:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    6aaa:	687b      	ldr	r3, [r7, #4]
    6aac:	2b00      	cmp	r3, #0
    6aae:	bf14      	ite	ne
    6ab0:	2301      	movne	r3, #1
    6ab2:	2300      	moveq	r3, #0
    6ab4:	b2db      	uxtb	r3, r3
    6ab6:	225e      	movs	r2, #94	; 0x5e
    6ab8:	490c      	ldr	r1, [pc, #48]	; (6aec <i2c_m_sync_init+0x4c>)
    6aba:	4618      	mov	r0, r3
    6abc:	4b0c      	ldr	r3, [pc, #48]	; (6af0 <i2c_m_sync_init+0x50>)
    6abe:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	6839      	ldr	r1, [r7, #0]
    6ac4:	4618      	mov	r0, r3
    6ac6:	4b0b      	ldr	r3, [pc, #44]	; (6af4 <i2c_m_sync_init+0x54>)
    6ac8:	4798      	blx	r3
    6aca:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6acc:	68fb      	ldr	r3, [r7, #12]
    6ace:	2b00      	cmp	r3, #0
    6ad0:	d001      	beq.n	6ad6 <i2c_m_sync_init+0x36>
		return init_status;
    6ad2:	68fb      	ldr	r3, [r7, #12]
    6ad4:	e006      	b.n	6ae4 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    6ad6:	687b      	ldr	r3, [r7, #4]
    6ad8:	4a07      	ldr	r2, [pc, #28]	; (6af8 <i2c_m_sync_init+0x58>)
    6ada:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    6adc:	687b      	ldr	r3, [r7, #4]
    6ade:	4a07      	ldr	r2, [pc, #28]	; (6afc <i2c_m_sync_init+0x5c>)
    6ae0:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    6ae2:	2300      	movs	r3, #0
}
    6ae4:	4618      	mov	r0, r3
    6ae6:	3710      	adds	r7, #16
    6ae8:	46bd      	mov	sp, r7
    6aea:	bd80      	pop	{r7, pc}
    6aec:	00021978 	.word	0x00021978
    6af0:	00007e21 	.word	0x00007e21
    6af4:	0000b895 	.word	0x0000b895
    6af8:	00006a01 	.word	0x00006a01
    6afc:	00006a51 	.word	0x00006a51

00006b00 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    6b00:	b580      	push	{r7, lr}
    6b02:	b082      	sub	sp, #8
    6b04:	af00      	add	r7, sp, #0
    6b06:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    6b08:	687b      	ldr	r3, [r7, #4]
    6b0a:	4618      	mov	r0, r3
    6b0c:	4b03      	ldr	r3, [pc, #12]	; (6b1c <i2c_m_sync_enable+0x1c>)
    6b0e:	4798      	blx	r3
    6b10:	4603      	mov	r3, r0
}
    6b12:	4618      	mov	r0, r3
    6b14:	3708      	adds	r7, #8
    6b16:	46bd      	mov	sp, r7
    6b18:	bd80      	pop	{r7, pc}
    6b1a:	bf00      	nop
    6b1c:	0000b8dd 	.word	0x0000b8dd

00006b20 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    6b20:	b480      	push	{r7}
    6b22:	b085      	sub	sp, #20
    6b24:	af00      	add	r7, sp, #0
    6b26:	60f8      	str	r0, [r7, #12]
    6b28:	460b      	mov	r3, r1
    6b2a:	607a      	str	r2, [r7, #4]
    6b2c:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    6b2e:	897b      	ldrh	r3, [r7, #10]
    6b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6b34:	b21a      	sxth	r2, r3
    6b36:	687b      	ldr	r3, [r7, #4]
    6b38:	b21b      	sxth	r3, r3
    6b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6b3e:	b21b      	sxth	r3, r3
    6b40:	4313      	orrs	r3, r2
    6b42:	b21b      	sxth	r3, r3
    6b44:	b29a      	uxth	r2, r3
    6b46:	68fb      	ldr	r3, [r7, #12]
    6b48:	839a      	strh	r2, [r3, #28]
    6b4a:	68fb      	ldr	r3, [r7, #12]
    6b4c:	8b9b      	ldrh	r3, [r3, #28]
}
    6b4e:	4618      	mov	r0, r3
    6b50:	3714      	adds	r7, #20
    6b52:	46bd      	mov	sp, r7
    6b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b58:	4770      	bx	lr

00006b5a <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    6b5a:	b480      	push	{r7}
    6b5c:	b083      	sub	sp, #12
    6b5e:	af00      	add	r7, sp, #0
    6b60:	6078      	str	r0, [r7, #4]
    6b62:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    6b64:	687b      	ldr	r3, [r7, #4]
    6b66:	f103 0214 	add.w	r2, r3, #20
    6b6a:	683b      	ldr	r3, [r7, #0]
    6b6c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    6b6e:	2300      	movs	r3, #0
}
    6b70:	4618      	mov	r0, r3
    6b72:	370c      	adds	r7, #12
    6b74:	46bd      	mov	sp, r7
    6b76:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b7a:	4770      	bx	lr

00006b7c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    6b7c:	b580      	push	{r7, lr}
    6b7e:	b084      	sub	sp, #16
    6b80:	af00      	add	r7, sp, #0
    6b82:	60f8      	str	r0, [r7, #12]
    6b84:	60b9      	str	r1, [r7, #8]
    6b86:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    6b88:	68fb      	ldr	r3, [r7, #12]
    6b8a:	2b00      	cmp	r3, #0
    6b8c:	d004      	beq.n	6b98 <pwm_init+0x1c>
    6b8e:	68bb      	ldr	r3, [r7, #8]
    6b90:	2b00      	cmp	r3, #0
    6b92:	d001      	beq.n	6b98 <pwm_init+0x1c>
    6b94:	2301      	movs	r3, #1
    6b96:	e000      	b.n	6b9a <pwm_init+0x1e>
    6b98:	2300      	movs	r3, #0
    6b9a:	f003 0301 	and.w	r3, r3, #1
    6b9e:	b2db      	uxtb	r3, r3
    6ba0:	2233      	movs	r2, #51	; 0x33
    6ba2:	490a      	ldr	r1, [pc, #40]	; (6bcc <pwm_init+0x50>)
    6ba4:	4618      	mov	r0, r3
    6ba6:	4b0a      	ldr	r3, [pc, #40]	; (6bd0 <pwm_init+0x54>)
    6ba8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    6baa:	68fb      	ldr	r3, [r7, #12]
    6bac:	68b9      	ldr	r1, [r7, #8]
    6bae:	4618      	mov	r0, r3
    6bb0:	4b08      	ldr	r3, [pc, #32]	; (6bd4 <pwm_init+0x58>)
    6bb2:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    6bb4:	68fb      	ldr	r3, [r7, #12]
    6bb6:	4a08      	ldr	r2, [pc, #32]	; (6bd8 <pwm_init+0x5c>)
    6bb8:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    6bba:	68fb      	ldr	r3, [r7, #12]
    6bbc:	4a07      	ldr	r2, [pc, #28]	; (6bdc <pwm_init+0x60>)
    6bbe:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    6bc0:	2300      	movs	r3, #0
}
    6bc2:	4618      	mov	r0, r3
    6bc4:	3710      	adds	r7, #16
    6bc6:	46bd      	mov	sp, r7
    6bc8:	bd80      	pop	{r7, pc}
    6bca:	bf00      	nop
    6bcc:	00021994 	.word	0x00021994
    6bd0:	00007e21 	.word	0x00007e21
    6bd4:	0000d205 	.word	0x0000d205
    6bd8:	00006c35 	.word	0x00006c35
    6bdc:	00006c59 	.word	0x00006c59

00006be0 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    6be0:	b580      	push	{r7, lr}
    6be2:	b082      	sub	sp, #8
    6be4:	af00      	add	r7, sp, #0
    6be6:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	2b00      	cmp	r3, #0
    6bec:	bf14      	ite	ne
    6bee:	2301      	movne	r3, #1
    6bf0:	2300      	moveq	r3, #0
    6bf2:	b2db      	uxtb	r3, r3
    6bf4:	224a      	movs	r2, #74	; 0x4a
    6bf6:	490b      	ldr	r1, [pc, #44]	; (6c24 <pwm_enable+0x44>)
    6bf8:	4618      	mov	r0, r3
    6bfa:	4b0b      	ldr	r3, [pc, #44]	; (6c28 <pwm_enable+0x48>)
    6bfc:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	4618      	mov	r0, r3
    6c02:	4b0a      	ldr	r3, [pc, #40]	; (6c2c <pwm_enable+0x4c>)
    6c04:	4798      	blx	r3
    6c06:	4603      	mov	r3, r0
    6c08:	2b00      	cmp	r3, #0
    6c0a:	d002      	beq.n	6c12 <pwm_enable+0x32>
		return ERR_DENIED;
    6c0c:	f06f 0310 	mvn.w	r3, #16
    6c10:	e004      	b.n	6c1c <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    6c12:	687b      	ldr	r3, [r7, #4]
    6c14:	4618      	mov	r0, r3
    6c16:	4b06      	ldr	r3, [pc, #24]	; (6c30 <pwm_enable+0x50>)
    6c18:	4798      	blx	r3

	return ERR_NONE;
    6c1a:	2300      	movs	r3, #0
}
    6c1c:	4618      	mov	r0, r3
    6c1e:	3708      	adds	r7, #8
    6c20:	46bd      	mov	sp, r7
    6c22:	bd80      	pop	{r7, pc}
    6c24:	00021994 	.word	0x00021994
    6c28:	00007e21 	.word	0x00007e21
    6c2c:	0000d5f5 	.word	0x0000d5f5
    6c30:	0000d4b1 	.word	0x0000d4b1

00006c34 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    6c34:	b580      	push	{r7, lr}
    6c36:	b084      	sub	sp, #16
    6c38:	af00      	add	r7, sp, #0
    6c3a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    6c3c:	687b      	ldr	r3, [r7, #4]
    6c3e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    6c40:	68fb      	ldr	r3, [r7, #12]
    6c42:	695b      	ldr	r3, [r3, #20]
    6c44:	2b00      	cmp	r3, #0
    6c46:	d003      	beq.n	6c50 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    6c48:	68fb      	ldr	r3, [r7, #12]
    6c4a:	695b      	ldr	r3, [r3, #20]
    6c4c:	68f8      	ldr	r0, [r7, #12]
    6c4e:	4798      	blx	r3
	}
}
    6c50:	bf00      	nop
    6c52:	3710      	adds	r7, #16
    6c54:	46bd      	mov	sp, r7
    6c56:	bd80      	pop	{r7, pc}

00006c58 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    6c58:	b580      	push	{r7, lr}
    6c5a:	b084      	sub	sp, #16
    6c5c:	af00      	add	r7, sp, #0
    6c5e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    6c60:	687b      	ldr	r3, [r7, #4]
    6c62:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    6c64:	68fb      	ldr	r3, [r7, #12]
    6c66:	699b      	ldr	r3, [r3, #24]
    6c68:	2b00      	cmp	r3, #0
    6c6a:	d003      	beq.n	6c74 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    6c6c:	68fb      	ldr	r3, [r7, #12]
    6c6e:	699b      	ldr	r3, [r3, #24]
    6c70:	68f8      	ldr	r0, [r7, #12]
    6c72:	4798      	blx	r3
	}
}
    6c74:	bf00      	nop
    6c76:	3710      	adds	r7, #16
    6c78:	46bd      	mov	sp, r7
    6c7a:	bd80      	pop	{r7, pc}

00006c7c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    6c7c:	b580      	push	{r7, lr}
    6c7e:	b082      	sub	sp, #8
    6c80:	af00      	add	r7, sp, #0
    6c82:	6078      	str	r0, [r7, #4]
    6c84:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    6c86:	687b      	ldr	r3, [r7, #4]
    6c88:	2b00      	cmp	r3, #0
    6c8a:	d004      	beq.n	6c96 <qspi_sync_init+0x1a>
    6c8c:	683b      	ldr	r3, [r7, #0]
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d001      	beq.n	6c96 <qspi_sync_init+0x1a>
    6c92:	2301      	movs	r3, #1
    6c94:	e000      	b.n	6c98 <qspi_sync_init+0x1c>
    6c96:	2300      	movs	r3, #0
    6c98:	f003 0301 	and.w	r3, r3, #1
    6c9c:	b2db      	uxtb	r3, r3
    6c9e:	2231      	movs	r2, #49	; 0x31
    6ca0:	4906      	ldr	r1, [pc, #24]	; (6cbc <qspi_sync_init+0x40>)
    6ca2:	4618      	mov	r0, r3
    6ca4:	4b06      	ldr	r3, [pc, #24]	; (6cc0 <qspi_sync_init+0x44>)
    6ca6:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    6ca8:	687b      	ldr	r3, [r7, #4]
    6caa:	6839      	ldr	r1, [r7, #0]
    6cac:	4618      	mov	r0, r3
    6cae:	4b05      	ldr	r3, [pc, #20]	; (6cc4 <qspi_sync_init+0x48>)
    6cb0:	4798      	blx	r3
    6cb2:	4603      	mov	r3, r0
}
    6cb4:	4618      	mov	r0, r3
    6cb6:	3708      	adds	r7, #8
    6cb8:	46bd      	mov	sp, r7
    6cba:	bd80      	pop	{r7, pc}
    6cbc:	000219ac 	.word	0x000219ac
    6cc0:	00007e21 	.word	0x00007e21
    6cc4:	0000a325 	.word	0x0000a325

00006cc8 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    6cc8:	b580      	push	{r7, lr}
    6cca:	b082      	sub	sp, #8
    6ccc:	af00      	add	r7, sp, #0
    6cce:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    6cd0:	687b      	ldr	r3, [r7, #4]
    6cd2:	2b00      	cmp	r3, #0
    6cd4:	bf14      	ite	ne
    6cd6:	2301      	movne	r3, #1
    6cd8:	2300      	moveq	r3, #0
    6cda:	b2db      	uxtb	r3, r3
    6cdc:	223f      	movs	r2, #63	; 0x3f
    6cde:	4906      	ldr	r1, [pc, #24]	; (6cf8 <qspi_sync_enable+0x30>)
    6ce0:	4618      	mov	r0, r3
    6ce2:	4b06      	ldr	r3, [pc, #24]	; (6cfc <qspi_sync_enable+0x34>)
    6ce4:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    6ce6:	687b      	ldr	r3, [r7, #4]
    6ce8:	4618      	mov	r0, r3
    6cea:	4b05      	ldr	r3, [pc, #20]	; (6d00 <qspi_sync_enable+0x38>)
    6cec:	4798      	blx	r3
    6cee:	4603      	mov	r3, r0
}
    6cf0:	4618      	mov	r0, r3
    6cf2:	3708      	adds	r7, #8
    6cf4:	46bd      	mov	sp, r7
    6cf6:	bd80      	pop	{r7, pc}
    6cf8:	000219ac 	.word	0x000219ac
    6cfc:	00007e21 	.word	0x00007e21
    6d00:	0000a399 	.word	0x0000a399

00006d04 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    6d04:	b580      	push	{r7, lr}
    6d06:	b082      	sub	sp, #8
    6d08:	af00      	add	r7, sp, #0
    6d0a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    6d0c:	687b      	ldr	r3, [r7, #4]
    6d0e:	2b00      	cmp	r3, #0
    6d10:	bf14      	ite	ne
    6d12:	2301      	movne	r3, #1
    6d14:	2300      	moveq	r3, #0
    6d16:	b2db      	uxtb	r3, r3
    6d18:	2246      	movs	r2, #70	; 0x46
    6d1a:	4906      	ldr	r1, [pc, #24]	; (6d34 <qspi_sync_disable+0x30>)
    6d1c:	4618      	mov	r0, r3
    6d1e:	4b06      	ldr	r3, [pc, #24]	; (6d38 <qspi_sync_disable+0x34>)
    6d20:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    6d22:	687b      	ldr	r3, [r7, #4]
    6d24:	4618      	mov	r0, r3
    6d26:	4b05      	ldr	r3, [pc, #20]	; (6d3c <qspi_sync_disable+0x38>)
    6d28:	4798      	blx	r3
    6d2a:	4603      	mov	r3, r0
}
    6d2c:	4618      	mov	r0, r3
    6d2e:	3708      	adds	r7, #8
    6d30:	46bd      	mov	sp, r7
    6d32:	bd80      	pop	{r7, pc}
    6d34:	000219ac 	.word	0x000219ac
    6d38:	00007e21 	.word	0x00007e21
    6d3c:	0000a3bd 	.word	0x0000a3bd

00006d40 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    6d40:	b580      	push	{r7, lr}
    6d42:	b082      	sub	sp, #8
    6d44:	af00      	add	r7, sp, #0
    6d46:	6078      	str	r0, [r7, #4]
    6d48:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    6d4a:	687b      	ldr	r3, [r7, #4]
    6d4c:	2b00      	cmp	r3, #0
    6d4e:	d004      	beq.n	6d5a <qspi_sync_serial_run_command+0x1a>
    6d50:	683b      	ldr	r3, [r7, #0]
    6d52:	2b00      	cmp	r3, #0
    6d54:	d001      	beq.n	6d5a <qspi_sync_serial_run_command+0x1a>
    6d56:	2301      	movs	r3, #1
    6d58:	e000      	b.n	6d5c <qspi_sync_serial_run_command+0x1c>
    6d5a:	2300      	movs	r3, #0
    6d5c:	f003 0301 	and.w	r3, r3, #1
    6d60:	b2db      	uxtb	r3, r3
    6d62:	224d      	movs	r2, #77	; 0x4d
    6d64:	4906      	ldr	r1, [pc, #24]	; (6d80 <qspi_sync_serial_run_command+0x40>)
    6d66:	4618      	mov	r0, r3
    6d68:	4b06      	ldr	r3, [pc, #24]	; (6d84 <qspi_sync_serial_run_command+0x44>)
    6d6a:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	6839      	ldr	r1, [r7, #0]
    6d70:	4618      	mov	r0, r3
    6d72:	4b05      	ldr	r3, [pc, #20]	; (6d88 <qspi_sync_serial_run_command+0x48>)
    6d74:	4798      	blx	r3
    6d76:	4603      	mov	r3, r0
}
    6d78:	4618      	mov	r0, r3
    6d7a:	3708      	adds	r7, #8
    6d7c:	46bd      	mov	sp, r7
    6d7e:	bd80      	pop	{r7, pc}
    6d80:	000219ac 	.word	0x000219ac
    6d84:	00007e21 	.word	0x00007e21
    6d88:	0000a509 	.word	0x0000a509

00006d8c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    6d8c:	b580      	push	{r7, lr}
    6d8e:	b084      	sub	sp, #16
    6d90:	af00      	add	r7, sp, #0
    6d92:	6078      	str	r0, [r7, #4]
    6d94:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    6d96:	2300      	movs	r3, #0
    6d98:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    6d9a:	687b      	ldr	r3, [r7, #4]
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	d004      	beq.n	6daa <spi_m_sync_init+0x1e>
    6da0:	683b      	ldr	r3, [r7, #0]
    6da2:	2b00      	cmp	r3, #0
    6da4:	d001      	beq.n	6daa <spi_m_sync_init+0x1e>
    6da6:	2301      	movs	r3, #1
    6da8:	e000      	b.n	6dac <spi_m_sync_init+0x20>
    6daa:	2300      	movs	r3, #0
    6dac:	f003 0301 	and.w	r3, r3, #1
    6db0:	b2db      	uxtb	r3, r3
    6db2:	2240      	movs	r2, #64	; 0x40
    6db4:	4910      	ldr	r1, [pc, #64]	; (6df8 <spi_m_sync_init+0x6c>)
    6db6:	4618      	mov	r0, r3
    6db8:	4b10      	ldr	r3, [pc, #64]	; (6dfc <spi_m_sync_init+0x70>)
    6dba:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    6dbc:	687b      	ldr	r3, [r7, #4]
    6dbe:	683a      	ldr	r2, [r7, #0]
    6dc0:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    6dc2:	687b      	ldr	r3, [r7, #4]
    6dc4:	3304      	adds	r3, #4
    6dc6:	6839      	ldr	r1, [r7, #0]
    6dc8:	4618      	mov	r0, r3
    6dca:	4b0d      	ldr	r3, [pc, #52]	; (6e00 <spi_m_sync_init+0x74>)
    6dcc:	4798      	blx	r3
    6dce:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    6dd0:	68fb      	ldr	r3, [r7, #12]
    6dd2:	2b00      	cmp	r3, #0
    6dd4:	da01      	bge.n	6dda <spi_m_sync_init+0x4e>
		return rc;
    6dd6:	68fb      	ldr	r3, [r7, #12]
    6dd8:	e00a      	b.n	6df0 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    6dda:	687b      	ldr	r3, [r7, #4]
    6ddc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6de0:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    6de2:	687b      	ldr	r3, [r7, #4]
    6de4:	4a07      	ldr	r2, [pc, #28]	; (6e04 <spi_m_sync_init+0x78>)
    6de6:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	4a07      	ldr	r2, [pc, #28]	; (6e08 <spi_m_sync_init+0x7c>)
    6dec:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    6dee:	2300      	movs	r3, #0
}
    6df0:	4618      	mov	r0, r3
    6df2:	3710      	adds	r7, #16
    6df4:	46bd      	mov	sp, r7
    6df6:	bd80      	pop	{r7, pc}
    6df8:	000219c8 	.word	0x000219c8
    6dfc:	00007e21 	.word	0x00007e21
    6e00:	0000c069 	.word	0x0000c069
    6e04:	00006e85 	.word	0x00006e85
    6e08:	00006edd 	.word	0x00006edd

00006e0c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    6e0c:	b580      	push	{r7, lr}
    6e0e:	b082      	sub	sp, #8
    6e10:	af00      	add	r7, sp, #0
    6e12:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    6e14:	687b      	ldr	r3, [r7, #4]
    6e16:	2b00      	cmp	r3, #0
    6e18:	bf14      	ite	ne
    6e1a:	2301      	movne	r3, #1
    6e1c:	2300      	moveq	r3, #0
    6e1e:	b2db      	uxtb	r3, r3
    6e20:	2257      	movs	r2, #87	; 0x57
    6e22:	4906      	ldr	r1, [pc, #24]	; (6e3c <spi_m_sync_enable+0x30>)
    6e24:	4618      	mov	r0, r3
    6e26:	4b06      	ldr	r3, [pc, #24]	; (6e40 <spi_m_sync_enable+0x34>)
    6e28:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	3304      	adds	r3, #4
    6e2e:	4618      	mov	r0, r3
    6e30:	4b04      	ldr	r3, [pc, #16]	; (6e44 <spi_m_sync_enable+0x38>)
    6e32:	4798      	blx	r3
}
    6e34:	bf00      	nop
    6e36:	3708      	adds	r7, #8
    6e38:	46bd      	mov	sp, r7
    6e3a:	bd80      	pop	{r7, pc}
    6e3c:	000219c8 	.word	0x000219c8
    6e40:	00007e21 	.word	0x00007e21
    6e44:	0000c175 	.word	0x0000c175

00006e48 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    6e48:	b580      	push	{r7, lr}
    6e4a:	b082      	sub	sp, #8
    6e4c:	af00      	add	r7, sp, #0
    6e4e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    6e50:	687b      	ldr	r3, [r7, #4]
    6e52:	2b00      	cmp	r3, #0
    6e54:	bf14      	ite	ne
    6e56:	2301      	movne	r3, #1
    6e58:	2300      	moveq	r3, #0
    6e5a:	b2db      	uxtb	r3, r3
    6e5c:	225d      	movs	r2, #93	; 0x5d
    6e5e:	4906      	ldr	r1, [pc, #24]	; (6e78 <spi_m_sync_disable+0x30>)
    6e60:	4618      	mov	r0, r3
    6e62:	4b06      	ldr	r3, [pc, #24]	; (6e7c <spi_m_sync_disable+0x34>)
    6e64:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    6e66:	687b      	ldr	r3, [r7, #4]
    6e68:	3304      	adds	r3, #4
    6e6a:	4618      	mov	r0, r3
    6e6c:	4b04      	ldr	r3, [pc, #16]	; (6e80 <spi_m_sync_disable+0x38>)
    6e6e:	4798      	blx	r3
}
    6e70:	bf00      	nop
    6e72:	3708      	adds	r7, #8
    6e74:	46bd      	mov	sp, r7
    6e76:	bd80      	pop	{r7, pc}
    6e78:	000219c8 	.word	0x000219c8
    6e7c:	00007e21 	.word	0x00007e21
    6e80:	0000c1c5 	.word	0x0000c1c5

00006e84 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    6e84:	b580      	push	{r7, lr}
    6e86:	b088      	sub	sp, #32
    6e88:	af00      	add	r7, sp, #0
    6e8a:	60f8      	str	r0, [r7, #12]
    6e8c:	60b9      	str	r1, [r7, #8]
    6e8e:	4613      	mov	r3, r2
    6e90:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6e92:	68fb      	ldr	r3, [r7, #12]
    6e94:	2b00      	cmp	r3, #0
    6e96:	bf14      	ite	ne
    6e98:	2301      	movne	r3, #1
    6e9a:	2300      	moveq	r3, #0
    6e9c:	b2db      	uxtb	r3, r3
    6e9e:	2287      	movs	r2, #135	; 0x87
    6ea0:	490b      	ldr	r1, [pc, #44]	; (6ed0 <_spi_m_sync_io_read+0x4c>)
    6ea2:	4618      	mov	r0, r3
    6ea4:	4b0b      	ldr	r3, [pc, #44]	; (6ed4 <_spi_m_sync_io_read+0x50>)
    6ea6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6ea8:	68fb      	ldr	r3, [r7, #12]
    6eaa:	3b0c      	subs	r3, #12
    6eac:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    6eae:	68bb      	ldr	r3, [r7, #8]
    6eb0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    6eb2:	2300      	movs	r3, #0
    6eb4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6eb6:	88fb      	ldrh	r3, [r7, #6]
    6eb8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6eba:	f107 0310 	add.w	r3, r7, #16
    6ebe:	4619      	mov	r1, r3
    6ec0:	69f8      	ldr	r0, [r7, #28]
    6ec2:	4b05      	ldr	r3, [pc, #20]	; (6ed8 <_spi_m_sync_io_read+0x54>)
    6ec4:	4798      	blx	r3
    6ec6:	4603      	mov	r3, r0
}
    6ec8:	4618      	mov	r0, r3
    6eca:	3720      	adds	r7, #32
    6ecc:	46bd      	mov	sp, r7
    6ece:	bd80      	pop	{r7, pc}
    6ed0:	000219c8 	.word	0x000219c8
    6ed4:	00007e21 	.word	0x00007e21
    6ed8:	00006f35 	.word	0x00006f35

00006edc <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    6edc:	b580      	push	{r7, lr}
    6ede:	b088      	sub	sp, #32
    6ee0:	af00      	add	r7, sp, #0
    6ee2:	60f8      	str	r0, [r7, #12]
    6ee4:	60b9      	str	r1, [r7, #8]
    6ee6:	4613      	mov	r3, r2
    6ee8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6eea:	68fb      	ldr	r3, [r7, #12]
    6eec:	2b00      	cmp	r3, #0
    6eee:	bf14      	ite	ne
    6ef0:	2301      	movne	r3, #1
    6ef2:	2300      	moveq	r3, #0
    6ef4:	b2db      	uxtb	r3, r3
    6ef6:	22a3      	movs	r2, #163	; 0xa3
    6ef8:	490b      	ldr	r1, [pc, #44]	; (6f28 <_spi_m_sync_io_write+0x4c>)
    6efa:	4618      	mov	r0, r3
    6efc:	4b0b      	ldr	r3, [pc, #44]	; (6f2c <_spi_m_sync_io_write+0x50>)
    6efe:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6f00:	68fb      	ldr	r3, [r7, #12]
    6f02:	3b0c      	subs	r3, #12
    6f04:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    6f06:	2300      	movs	r3, #0
    6f08:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    6f0a:	68bb      	ldr	r3, [r7, #8]
    6f0c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6f0e:	88fb      	ldrh	r3, [r7, #6]
    6f10:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6f12:	f107 0310 	add.w	r3, r7, #16
    6f16:	4619      	mov	r1, r3
    6f18:	69f8      	ldr	r0, [r7, #28]
    6f1a:	4b05      	ldr	r3, [pc, #20]	; (6f30 <_spi_m_sync_io_write+0x54>)
    6f1c:	4798      	blx	r3
    6f1e:	4603      	mov	r3, r0
}
    6f20:	4618      	mov	r0, r3
    6f22:	3720      	adds	r7, #32
    6f24:	46bd      	mov	sp, r7
    6f26:	bd80      	pop	{r7, pc}
    6f28:	000219c8 	.word	0x000219c8
    6f2c:	00007e21 	.word	0x00007e21
    6f30:	00006f35 	.word	0x00006f35

00006f34 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    6f34:	b580      	push	{r7, lr}
    6f36:	b086      	sub	sp, #24
    6f38:	af00      	add	r7, sp, #0
    6f3a:	6078      	str	r0, [r7, #4]
    6f3c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    6f3e:	687b      	ldr	r3, [r7, #4]
    6f40:	2b00      	cmp	r3, #0
    6f42:	d004      	beq.n	6f4e <spi_m_sync_transfer+0x1a>
    6f44:	683b      	ldr	r3, [r7, #0]
    6f46:	2b00      	cmp	r3, #0
    6f48:	d001      	beq.n	6f4e <spi_m_sync_transfer+0x1a>
    6f4a:	2301      	movs	r3, #1
    6f4c:	e000      	b.n	6f50 <spi_m_sync_transfer+0x1c>
    6f4e:	2300      	movs	r3, #0
    6f50:	f003 0301 	and.w	r3, r3, #1
    6f54:	b2db      	uxtb	r3, r3
    6f56:	22b3      	movs	r2, #179	; 0xb3
    6f58:	490c      	ldr	r1, [pc, #48]	; (6f8c <spi_m_sync_transfer+0x58>)
    6f5a:	4618      	mov	r0, r3
    6f5c:	4b0c      	ldr	r3, [pc, #48]	; (6f90 <spi_m_sync_transfer+0x5c>)
    6f5e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    6f60:	683b      	ldr	r3, [r7, #0]
    6f62:	681b      	ldr	r3, [r3, #0]
    6f64:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    6f66:	683b      	ldr	r3, [r7, #0]
    6f68:	685b      	ldr	r3, [r3, #4]
    6f6a:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    6f6c:	683b      	ldr	r3, [r7, #0]
    6f6e:	689b      	ldr	r3, [r3, #8]
    6f70:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    6f72:	687b      	ldr	r3, [r7, #4]
    6f74:	3304      	adds	r3, #4
    6f76:	f107 020c 	add.w	r2, r7, #12
    6f7a:	4611      	mov	r1, r2
    6f7c:	4618      	mov	r0, r3
    6f7e:	4b05      	ldr	r3, [pc, #20]	; (6f94 <spi_m_sync_transfer+0x60>)
    6f80:	4798      	blx	r3
    6f82:	4603      	mov	r3, r0
}
    6f84:	4618      	mov	r0, r3
    6f86:	3718      	adds	r7, #24
    6f88:	46bd      	mov	sp, r7
    6f8a:	bd80      	pop	{r7, pc}
    6f8c:	000219c8 	.word	0x000219c8
    6f90:	00007e21 	.word	0x00007e21
    6f94:	0000c369 	.word	0x0000c369

00006f98 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    6f98:	b580      	push	{r7, lr}
    6f9a:	b082      	sub	sp, #8
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	6078      	str	r0, [r7, #4]
    6fa0:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    6fa2:	687b      	ldr	r3, [r7, #4]
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d004      	beq.n	6fb2 <spi_m_sync_get_io_descriptor+0x1a>
    6fa8:	683b      	ldr	r3, [r7, #0]
    6faa:	2b00      	cmp	r3, #0
    6fac:	d001      	beq.n	6fb2 <spi_m_sync_get_io_descriptor+0x1a>
    6fae:	2301      	movs	r3, #1
    6fb0:	e000      	b.n	6fb4 <spi_m_sync_get_io_descriptor+0x1c>
    6fb2:	2300      	movs	r3, #0
    6fb4:	f003 0301 	and.w	r3, r3, #1
    6fb8:	b2db      	uxtb	r3, r3
    6fba:	22bd      	movs	r2, #189	; 0xbd
    6fbc:	4906      	ldr	r1, [pc, #24]	; (6fd8 <spi_m_sync_get_io_descriptor+0x40>)
    6fbe:	4618      	mov	r0, r3
    6fc0:	4b06      	ldr	r3, [pc, #24]	; (6fdc <spi_m_sync_get_io_descriptor+0x44>)
    6fc2:	4798      	blx	r3
	*io = &spi->io;
    6fc4:	687b      	ldr	r3, [r7, #4]
    6fc6:	f103 020c 	add.w	r2, r3, #12
    6fca:	683b      	ldr	r3, [r7, #0]
    6fcc:	601a      	str	r2, [r3, #0]
	return 0;
    6fce:	2300      	movs	r3, #0
}
    6fd0:	4618      	mov	r0, r3
    6fd2:	3708      	adds	r7, #8
    6fd4:	46bd      	mov	sp, r7
    6fd6:	bd80      	pop	{r7, pc}
    6fd8:	000219c8 	.word	0x000219c8
    6fdc:	00007e21 	.word	0x00007e21

00006fe0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    6fe0:	b480      	push	{r7}
    6fe2:	b083      	sub	sp, #12
    6fe4:	af00      	add	r7, sp, #0
    6fe6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    6fe8:	687b      	ldr	r3, [r7, #4]
    6fea:	681b      	ldr	r3, [r3, #0]
}
    6fec:	4618      	mov	r0, r3
    6fee:	370c      	adds	r7, #12
    6ff0:	46bd      	mov	sp, r7
    6ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ff6:	4770      	bx	lr

00006ff8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    6ff8:	b480      	push	{r7}
    6ffa:	b083      	sub	sp, #12
    6ffc:	af00      	add	r7, sp, #0
    6ffe:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    7000:	687b      	ldr	r3, [r7, #4]
    7002:	2b00      	cmp	r3, #0
    7004:	d002      	beq.n	700c <list_get_next_element+0x14>
    7006:	687b      	ldr	r3, [r7, #4]
    7008:	681b      	ldr	r3, [r3, #0]
    700a:	e000      	b.n	700e <list_get_next_element+0x16>
    700c:	2300      	movs	r3, #0
}
    700e:	4618      	mov	r0, r3
    7010:	370c      	adds	r7, #12
    7012:	46bd      	mov	sp, r7
    7014:	f85d 7b04 	ldr.w	r7, [sp], #4
    7018:	4770      	bx	lr
	...

0000701c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    701c:	b580      	push	{r7, lr}
    701e:	b084      	sub	sp, #16
    7020:	af00      	add	r7, sp, #0
    7022:	60f8      	str	r0, [r7, #12]
    7024:	60b9      	str	r1, [r7, #8]
    7026:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    7028:	68fb      	ldr	r3, [r7, #12]
    702a:	2b00      	cmp	r3, #0
    702c:	d007      	beq.n	703e <timer_init+0x22>
    702e:	68bb      	ldr	r3, [r7, #8]
    7030:	2b00      	cmp	r3, #0
    7032:	d004      	beq.n	703e <timer_init+0x22>
    7034:	687b      	ldr	r3, [r7, #4]
    7036:	2b00      	cmp	r3, #0
    7038:	d001      	beq.n	703e <timer_init+0x22>
    703a:	2301      	movs	r3, #1
    703c:	e000      	b.n	7040 <timer_init+0x24>
    703e:	2300      	movs	r3, #0
    7040:	f003 0301 	and.w	r3, r3, #1
    7044:	b2db      	uxtb	r3, r3
    7046:	223b      	movs	r2, #59	; 0x3b
    7048:	490c      	ldr	r1, [pc, #48]	; (707c <timer_init+0x60>)
    704a:	4618      	mov	r0, r3
    704c:	4b0c      	ldr	r3, [pc, #48]	; (7080 <timer_init+0x64>)
    704e:	4798      	blx	r3
	descr->func = func;
    7050:	68fb      	ldr	r3, [r7, #12]
    7052:	687a      	ldr	r2, [r7, #4]
    7054:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    7056:	68fb      	ldr	r3, [r7, #12]
    7058:	681b      	ldr	r3, [r3, #0]
    705a:	681b      	ldr	r3, [r3, #0]
    705c:	68fa      	ldr	r2, [r7, #12]
    705e:	3204      	adds	r2, #4
    7060:	68b9      	ldr	r1, [r7, #8]
    7062:	4610      	mov	r0, r2
    7064:	4798      	blx	r3
	descr->time                           = 0;
    7066:	68fb      	ldr	r3, [r7, #12]
    7068:	2200      	movs	r2, #0
    706a:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    706c:	68fb      	ldr	r3, [r7, #12]
    706e:	4a05      	ldr	r2, [pc, #20]	; (7084 <timer_init+0x68>)
    7070:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    7072:	2300      	movs	r3, #0
}
    7074:	4618      	mov	r0, r3
    7076:	3710      	adds	r7, #16
    7078:	46bd      	mov	sp, r7
    707a:	bd80      	pop	{r7, pc}
    707c:	000219e4 	.word	0x000219e4
    7080:	00007e21 	.word	0x00007e21
    7084:	0000740d 	.word	0x0000740d

00007088 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    7088:	b580      	push	{r7, lr}
    708a:	b082      	sub	sp, #8
    708c:	af00      	add	r7, sp, #0
    708e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    7090:	687b      	ldr	r3, [r7, #4]
    7092:	2b00      	cmp	r3, #0
    7094:	d005      	beq.n	70a2 <timer_start+0x1a>
    7096:	687b      	ldr	r3, [r7, #4]
    7098:	681b      	ldr	r3, [r3, #0]
    709a:	2b00      	cmp	r3, #0
    709c:	d001      	beq.n	70a2 <timer_start+0x1a>
    709e:	2301      	movs	r3, #1
    70a0:	e000      	b.n	70a4 <timer_start+0x1c>
    70a2:	2300      	movs	r3, #0
    70a4:	f003 0301 	and.w	r3, r3, #1
    70a8:	b2db      	uxtb	r3, r3
    70aa:	2254      	movs	r2, #84	; 0x54
    70ac:	490e      	ldr	r1, [pc, #56]	; (70e8 <timer_start+0x60>)
    70ae:	4618      	mov	r0, r3
    70b0:	4b0e      	ldr	r3, [pc, #56]	; (70ec <timer_start+0x64>)
    70b2:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    70b4:	687b      	ldr	r3, [r7, #4]
    70b6:	681b      	ldr	r3, [r3, #0]
    70b8:	699b      	ldr	r3, [r3, #24]
    70ba:	687a      	ldr	r2, [r7, #4]
    70bc:	3204      	adds	r2, #4
    70be:	4610      	mov	r0, r2
    70c0:	4798      	blx	r3
    70c2:	4603      	mov	r3, r0
    70c4:	2b00      	cmp	r3, #0
    70c6:	d002      	beq.n	70ce <timer_start+0x46>
		return ERR_DENIED;
    70c8:	f06f 0310 	mvn.w	r3, #16
    70cc:	e007      	b.n	70de <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    70ce:	687b      	ldr	r3, [r7, #4]
    70d0:	681b      	ldr	r3, [r3, #0]
    70d2:	689b      	ldr	r3, [r3, #8]
    70d4:	687a      	ldr	r2, [r7, #4]
    70d6:	3204      	adds	r2, #4
    70d8:	4610      	mov	r0, r2
    70da:	4798      	blx	r3

	return ERR_NONE;
    70dc:	2300      	movs	r3, #0
}
    70de:	4618      	mov	r0, r3
    70e0:	3708      	adds	r7, #8
    70e2:	46bd      	mov	sp, r7
    70e4:	bd80      	pop	{r7, pc}
    70e6:	bf00      	nop
    70e8:	000219e4 	.word	0x000219e4
    70ec:	00007e21 	.word	0x00007e21

000070f0 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    70f0:	b580      	push	{r7, lr}
    70f2:	b082      	sub	sp, #8
    70f4:	af00      	add	r7, sp, #0
    70f6:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	2b00      	cmp	r3, #0
    70fc:	d005      	beq.n	710a <timer_stop+0x1a>
    70fe:	687b      	ldr	r3, [r7, #4]
    7100:	681b      	ldr	r3, [r3, #0]
    7102:	2b00      	cmp	r3, #0
    7104:	d001      	beq.n	710a <timer_stop+0x1a>
    7106:	2301      	movs	r3, #1
    7108:	e000      	b.n	710c <timer_stop+0x1c>
    710a:	2300      	movs	r3, #0
    710c:	f003 0301 	and.w	r3, r3, #1
    7110:	b2db      	uxtb	r3, r3
    7112:	2262      	movs	r2, #98	; 0x62
    7114:	490f      	ldr	r1, [pc, #60]	; (7154 <timer_stop+0x64>)
    7116:	4618      	mov	r0, r3
    7118:	4b0f      	ldr	r3, [pc, #60]	; (7158 <timer_stop+0x68>)
    711a:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    711c:	687b      	ldr	r3, [r7, #4]
    711e:	681b      	ldr	r3, [r3, #0]
    7120:	699b      	ldr	r3, [r3, #24]
    7122:	687a      	ldr	r2, [r7, #4]
    7124:	3204      	adds	r2, #4
    7126:	4610      	mov	r0, r2
    7128:	4798      	blx	r3
    712a:	4603      	mov	r3, r0
    712c:	f083 0301 	eor.w	r3, r3, #1
    7130:	b2db      	uxtb	r3, r3
    7132:	2b00      	cmp	r3, #0
    7134:	d002      	beq.n	713c <timer_stop+0x4c>
		return ERR_DENIED;
    7136:	f06f 0310 	mvn.w	r3, #16
    713a:	e007      	b.n	714c <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    713c:	687b      	ldr	r3, [r7, #4]
    713e:	681b      	ldr	r3, [r3, #0]
    7140:	68db      	ldr	r3, [r3, #12]
    7142:	687a      	ldr	r2, [r7, #4]
    7144:	3204      	adds	r2, #4
    7146:	4610      	mov	r0, r2
    7148:	4798      	blx	r3

	return ERR_NONE;
    714a:	2300      	movs	r3, #0
}
    714c:	4618      	mov	r0, r3
    714e:	3708      	adds	r7, #8
    7150:	46bd      	mov	sp, r7
    7152:	bd80      	pop	{r7, pc}
    7154:	000219e4 	.word	0x000219e4
    7158:	00007e21 	.word	0x00007e21

0000715c <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    715c:	b580      	push	{r7, lr}
    715e:	b084      	sub	sp, #16
    7160:	af00      	add	r7, sp, #0
    7162:	6078      	str	r0, [r7, #4]
    7164:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    7166:	687b      	ldr	r3, [r7, #4]
    7168:	2b00      	cmp	r3, #0
    716a:	d008      	beq.n	717e <timer_add_task+0x22>
    716c:	683b      	ldr	r3, [r7, #0]
    716e:	2b00      	cmp	r3, #0
    7170:	d005      	beq.n	717e <timer_add_task+0x22>
    7172:	687b      	ldr	r3, [r7, #4]
    7174:	681b      	ldr	r3, [r3, #0]
    7176:	2b00      	cmp	r3, #0
    7178:	d001      	beq.n	717e <timer_add_task+0x22>
    717a:	2301      	movs	r3, #1
    717c:	e000      	b.n	7180 <timer_add_task+0x24>
    717e:	2300      	movs	r3, #0
    7180:	f003 0301 	and.w	r3, r3, #1
    7184:	b2db      	uxtb	r3, r3
    7186:	227b      	movs	r2, #123	; 0x7b
    7188:	492f      	ldr	r1, [pc, #188]	; (7248 <timer_add_task+0xec>)
    718a:	4618      	mov	r0, r3
    718c:	4b2f      	ldr	r3, [pc, #188]	; (724c <timer_add_task+0xf0>)
    718e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    7190:	687b      	ldr	r3, [r7, #4]
    7192:	7f1b      	ldrb	r3, [r3, #28]
    7194:	b2db      	uxtb	r3, r3
    7196:	f043 0301 	orr.w	r3, r3, #1
    719a:	b2da      	uxtb	r2, r3
    719c:	687b      	ldr	r3, [r7, #4]
    719e:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    71a0:	687b      	ldr	r3, [r7, #4]
    71a2:	3318      	adds	r3, #24
    71a4:	6839      	ldr	r1, [r7, #0]
    71a6:	4618      	mov	r0, r3
    71a8:	4b29      	ldr	r3, [pc, #164]	; (7250 <timer_add_task+0xf4>)
    71aa:	4798      	blx	r3
    71ac:	4603      	mov	r3, r0
    71ae:	2b00      	cmp	r3, #0
    71b0:	d00f      	beq.n	71d2 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    71b2:	687b      	ldr	r3, [r7, #4]
    71b4:	7f1b      	ldrb	r3, [r3, #28]
    71b6:	b2db      	uxtb	r3, r3
    71b8:	f023 0301 	bic.w	r3, r3, #1
    71bc:	b2da      	uxtb	r2, r3
    71be:	687b      	ldr	r3, [r7, #4]
    71c0:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    71c2:	2280      	movs	r2, #128	; 0x80
    71c4:	4920      	ldr	r1, [pc, #128]	; (7248 <timer_add_task+0xec>)
    71c6:	2000      	movs	r0, #0
    71c8:	4b20      	ldr	r3, [pc, #128]	; (724c <timer_add_task+0xf0>)
    71ca:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    71cc:	f06f 0311 	mvn.w	r3, #17
    71d0:	e035      	b.n	723e <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    71d2:	687b      	ldr	r3, [r7, #4]
    71d4:	695a      	ldr	r2, [r3, #20]
    71d6:	683b      	ldr	r3, [r7, #0]
    71d8:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    71da:	687b      	ldr	r3, [r7, #4]
    71dc:	f103 0018 	add.w	r0, r3, #24
    71e0:	687b      	ldr	r3, [r7, #4]
    71e2:	695b      	ldr	r3, [r3, #20]
    71e4:	461a      	mov	r2, r3
    71e6:	6839      	ldr	r1, [r7, #0]
    71e8:	4b1a      	ldr	r3, [pc, #104]	; (7254 <timer_add_task+0xf8>)
    71ea:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    71ec:	687b      	ldr	r3, [r7, #4]
    71ee:	7f1b      	ldrb	r3, [r3, #28]
    71f0:	b2db      	uxtb	r3, r3
    71f2:	f023 0301 	bic.w	r3, r3, #1
    71f6:	b2da      	uxtb	r2, r3
    71f8:	687b      	ldr	r3, [r7, #4]
    71fa:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    71fc:	687b      	ldr	r3, [r7, #4]
    71fe:	7f1b      	ldrb	r3, [r3, #28]
    7200:	b2db      	uxtb	r3, r3
    7202:	f003 0302 	and.w	r3, r3, #2
    7206:	2b00      	cmp	r3, #0
    7208:	d018      	beq.n	723c <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    720a:	f107 030c 	add.w	r3, r7, #12
    720e:	4618      	mov	r0, r3
    7210:	4b11      	ldr	r3, [pc, #68]	; (7258 <timer_add_task+0xfc>)
    7212:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    7214:	687b      	ldr	r3, [r7, #4]
    7216:	7f1b      	ldrb	r3, [r3, #28]
    7218:	b2db      	uxtb	r3, r3
    721a:	f023 0302 	bic.w	r3, r3, #2
    721e:	b2da      	uxtb	r2, r3
    7220:	687b      	ldr	r3, [r7, #4]
    7222:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    7224:	687b      	ldr	r3, [r7, #4]
    7226:	681b      	ldr	r3, [r3, #0]
    7228:	69db      	ldr	r3, [r3, #28]
    722a:	687a      	ldr	r2, [r7, #4]
    722c:	3204      	adds	r2, #4
    722e:	4610      	mov	r0, r2
    7230:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    7232:	f107 030c 	add.w	r3, r7, #12
    7236:	4618      	mov	r0, r3
    7238:	4b08      	ldr	r3, [pc, #32]	; (725c <timer_add_task+0x100>)
    723a:	4798      	blx	r3
	}

	return ERR_NONE;
    723c:	2300      	movs	r3, #0
}
    723e:	4618      	mov	r0, r3
    7240:	3710      	adds	r7, #16
    7242:	46bd      	mov	sp, r7
    7244:	bd80      	pop	{r7, pc}
    7246:	bf00      	nop
    7248:	000219e4 	.word	0x000219e4
    724c:	00007e21 	.word	0x00007e21
    7250:	00007e49 	.word	0x00007e49
    7254:	0000735d 	.word	0x0000735d
    7258:	000109d5 	.word	0x000109d5
    725c:	000109fb 	.word	0x000109fb

00007260 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    7260:	b580      	push	{r7, lr}
    7262:	b084      	sub	sp, #16
    7264:	af00      	add	r7, sp, #0
    7266:	6078      	str	r0, [r7, #4]
    7268:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    726a:	687b      	ldr	r3, [r7, #4]
    726c:	2b00      	cmp	r3, #0
    726e:	d008      	beq.n	7282 <timer_remove_task+0x22>
    7270:	683b      	ldr	r3, [r7, #0]
    7272:	2b00      	cmp	r3, #0
    7274:	d005      	beq.n	7282 <timer_remove_task+0x22>
    7276:	687b      	ldr	r3, [r7, #4]
    7278:	681b      	ldr	r3, [r3, #0]
    727a:	2b00      	cmp	r3, #0
    727c:	d001      	beq.n	7282 <timer_remove_task+0x22>
    727e:	2301      	movs	r3, #1
    7280:	e000      	b.n	7284 <timer_remove_task+0x24>
    7282:	2300      	movs	r3, #0
    7284:	f003 0301 	and.w	r3, r3, #1
    7288:	b2db      	uxtb	r3, r3
    728a:	2296      	movs	r2, #150	; 0x96
    728c:	492d      	ldr	r1, [pc, #180]	; (7344 <timer_remove_task+0xe4>)
    728e:	4618      	mov	r0, r3
    7290:	4b2d      	ldr	r3, [pc, #180]	; (7348 <timer_remove_task+0xe8>)
    7292:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    7294:	687b      	ldr	r3, [r7, #4]
    7296:	7f1b      	ldrb	r3, [r3, #28]
    7298:	b2db      	uxtb	r3, r3
    729a:	f043 0301 	orr.w	r3, r3, #1
    729e:	b2da      	uxtb	r2, r3
    72a0:	687b      	ldr	r3, [r7, #4]
    72a2:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    72a4:	687b      	ldr	r3, [r7, #4]
    72a6:	3318      	adds	r3, #24
    72a8:	6839      	ldr	r1, [r7, #0]
    72aa:	4618      	mov	r0, r3
    72ac:	4b27      	ldr	r3, [pc, #156]	; (734c <timer_remove_task+0xec>)
    72ae:	4798      	blx	r3
    72b0:	4603      	mov	r3, r0
    72b2:	f083 0301 	eor.w	r3, r3, #1
    72b6:	b2db      	uxtb	r3, r3
    72b8:	2b00      	cmp	r3, #0
    72ba:	d00f      	beq.n	72dc <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    72bc:	687b      	ldr	r3, [r7, #4]
    72be:	7f1b      	ldrb	r3, [r3, #28]
    72c0:	b2db      	uxtb	r3, r3
    72c2:	f023 0301 	bic.w	r3, r3, #1
    72c6:	b2da      	uxtb	r2, r3
    72c8:	687b      	ldr	r3, [r7, #4]
    72ca:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    72cc:	229b      	movs	r2, #155	; 0x9b
    72ce:	491d      	ldr	r1, [pc, #116]	; (7344 <timer_remove_task+0xe4>)
    72d0:	2000      	movs	r0, #0
    72d2:	4b1d      	ldr	r3, [pc, #116]	; (7348 <timer_remove_task+0xe8>)
    72d4:	4798      	blx	r3
		return ERR_NOT_FOUND;
    72d6:	f06f 0309 	mvn.w	r3, #9
    72da:	e02e      	b.n	733a <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    72dc:	687b      	ldr	r3, [r7, #4]
    72de:	3318      	adds	r3, #24
    72e0:	6839      	ldr	r1, [r7, #0]
    72e2:	4618      	mov	r0, r3
    72e4:	4b1a      	ldr	r3, [pc, #104]	; (7350 <timer_remove_task+0xf0>)
    72e6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    72e8:	687b      	ldr	r3, [r7, #4]
    72ea:	7f1b      	ldrb	r3, [r3, #28]
    72ec:	b2db      	uxtb	r3, r3
    72ee:	f023 0301 	bic.w	r3, r3, #1
    72f2:	b2da      	uxtb	r2, r3
    72f4:	687b      	ldr	r3, [r7, #4]
    72f6:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    72f8:	687b      	ldr	r3, [r7, #4]
    72fa:	7f1b      	ldrb	r3, [r3, #28]
    72fc:	b2db      	uxtb	r3, r3
    72fe:	f003 0302 	and.w	r3, r3, #2
    7302:	2b00      	cmp	r3, #0
    7304:	d018      	beq.n	7338 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    7306:	f107 030c 	add.w	r3, r7, #12
    730a:	4618      	mov	r0, r3
    730c:	4b11      	ldr	r3, [pc, #68]	; (7354 <timer_remove_task+0xf4>)
    730e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    7310:	687b      	ldr	r3, [r7, #4]
    7312:	7f1b      	ldrb	r3, [r3, #28]
    7314:	b2db      	uxtb	r3, r3
    7316:	f023 0302 	bic.w	r3, r3, #2
    731a:	b2da      	uxtb	r2, r3
    731c:	687b      	ldr	r3, [r7, #4]
    731e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    7320:	687b      	ldr	r3, [r7, #4]
    7322:	681b      	ldr	r3, [r3, #0]
    7324:	69db      	ldr	r3, [r3, #28]
    7326:	687a      	ldr	r2, [r7, #4]
    7328:	3204      	adds	r2, #4
    732a:	4610      	mov	r0, r2
    732c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    732e:	f107 030c 	add.w	r3, r7, #12
    7332:	4618      	mov	r0, r3
    7334:	4b08      	ldr	r3, [pc, #32]	; (7358 <timer_remove_task+0xf8>)
    7336:	4798      	blx	r3
	}

	return ERR_NONE;
    7338:	2300      	movs	r3, #0
}
    733a:	4618      	mov	r0, r3
    733c:	3710      	adds	r7, #16
    733e:	46bd      	mov	sp, r7
    7340:	bd80      	pop	{r7, pc}
    7342:	bf00      	nop
    7344:	000219e4 	.word	0x000219e4
    7348:	00007e21 	.word	0x00007e21
    734c:	00007e49 	.word	0x00007e49
    7350:	00007fab 	.word	0x00007fab
    7354:	000109d5 	.word	0x000109d5
    7358:	000109fb 	.word	0x000109fb

0000735c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    735c:	b580      	push	{r7, lr}
    735e:	b088      	sub	sp, #32
    7360:	af00      	add	r7, sp, #0
    7362:	60f8      	str	r0, [r7, #12]
    7364:	60b9      	str	r1, [r7, #8]
    7366:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    7368:	2300      	movs	r3, #0
    736a:	61bb      	str	r3, [r7, #24]
    736c:	68f8      	ldr	r0, [r7, #12]
    736e:	4b23      	ldr	r3, [pc, #140]	; (73fc <timer_add_timer_task+0xa0>)
    7370:	4798      	blx	r3
    7372:	6138      	str	r0, [r7, #16]

	if (!head) {
    7374:	693b      	ldr	r3, [r7, #16]
    7376:	2b00      	cmp	r3, #0
    7378:	d104      	bne.n	7384 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    737a:	68b9      	ldr	r1, [r7, #8]
    737c:	68f8      	ldr	r0, [r7, #12]
    737e:	4b20      	ldr	r3, [pc, #128]	; (7400 <timer_add_timer_task+0xa4>)
    7380:	4798      	blx	r3
		return;
    7382:	e037      	b.n	73f4 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    7384:	693b      	ldr	r3, [r7, #16]
    7386:	61fb      	str	r3, [r7, #28]
    7388:	e022      	b.n	73d0 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    738a:	69fb      	ldr	r3, [r7, #28]
    738c:	685a      	ldr	r2, [r3, #4]
    738e:	687b      	ldr	r3, [r7, #4]
    7390:	429a      	cmp	r2, r3
    7392:	d808      	bhi.n	73a6 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    7394:	69fb      	ldr	r3, [r7, #28]
    7396:	689a      	ldr	r2, [r3, #8]
    7398:	69fb      	ldr	r3, [r7, #28]
    739a:	6859      	ldr	r1, [r3, #4]
    739c:	687b      	ldr	r3, [r7, #4]
    739e:	1acb      	subs	r3, r1, r3
    73a0:	4413      	add	r3, r2
    73a2:	617b      	str	r3, [r7, #20]
    73a4:	e009      	b.n	73ba <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    73a6:	69fb      	ldr	r3, [r7, #28]
    73a8:	689a      	ldr	r2, [r3, #8]
    73aa:	69fb      	ldr	r3, [r7, #28]
    73ac:	685b      	ldr	r3, [r3, #4]
    73ae:	441a      	add	r2, r3
    73b0:	687b      	ldr	r3, [r7, #4]
    73b2:	425b      	negs	r3, r3
    73b4:	4413      	add	r3, r2
    73b6:	3301      	adds	r3, #1
    73b8:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    73ba:	68bb      	ldr	r3, [r7, #8]
    73bc:	689a      	ldr	r2, [r3, #8]
    73be:	697b      	ldr	r3, [r7, #20]
    73c0:	429a      	cmp	r2, r3
    73c2:	d909      	bls.n	73d8 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    73c4:	69fb      	ldr	r3, [r7, #28]
    73c6:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    73c8:	69f8      	ldr	r0, [r7, #28]
    73ca:	4b0e      	ldr	r3, [pc, #56]	; (7404 <timer_add_timer_task+0xa8>)
    73cc:	4798      	blx	r3
    73ce:	61f8      	str	r0, [r7, #28]
    73d0:	69fb      	ldr	r3, [r7, #28]
    73d2:	2b00      	cmp	r3, #0
    73d4:	d1d9      	bne.n	738a <timer_add_timer_task+0x2e>
    73d6:	e000      	b.n	73da <timer_add_timer_task+0x7e>
			break;
    73d8:	bf00      	nop
	}

	if (it == head) {
    73da:	69fa      	ldr	r2, [r7, #28]
    73dc:	693b      	ldr	r3, [r7, #16]
    73de:	429a      	cmp	r2, r3
    73e0:	d104      	bne.n	73ec <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    73e2:	68b9      	ldr	r1, [r7, #8]
    73e4:	68f8      	ldr	r0, [r7, #12]
    73e6:	4b06      	ldr	r3, [pc, #24]	; (7400 <timer_add_timer_task+0xa4>)
    73e8:	4798      	blx	r3
    73ea:	e003      	b.n	73f4 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    73ec:	68b9      	ldr	r1, [r7, #8]
    73ee:	69b8      	ldr	r0, [r7, #24]
    73f0:	4b05      	ldr	r3, [pc, #20]	; (7408 <timer_add_timer_task+0xac>)
    73f2:	4798      	blx	r3
	}
}
    73f4:	3720      	adds	r7, #32
    73f6:	46bd      	mov	sp, r7
    73f8:	bd80      	pop	{r7, pc}
    73fa:	bf00      	nop
    73fc:	00006fe1 	.word	0x00006fe1
    7400:	00007e81 	.word	0x00007e81
    7404:	00006ff9 	.word	0x00006ff9
    7408:	00007ed9 	.word	0x00007ed9

0000740c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    740c:	b580      	push	{r7, lr}
    740e:	b086      	sub	sp, #24
    7410:	af00      	add	r7, sp, #0
    7412:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	3b04      	subs	r3, #4
    7418:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    741a:	693b      	ldr	r3, [r7, #16]
    741c:	3318      	adds	r3, #24
    741e:	4618      	mov	r0, r3
    7420:	4b27      	ldr	r3, [pc, #156]	; (74c0 <timer_process_counted+0xb4>)
    7422:	4798      	blx	r3
    7424:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    7426:	693b      	ldr	r3, [r7, #16]
    7428:	695b      	ldr	r3, [r3, #20]
    742a:	1c5a      	adds	r2, r3, #1
    742c:	693b      	ldr	r3, [r7, #16]
    742e:	615a      	str	r2, [r3, #20]
    7430:	693b      	ldr	r3, [r7, #16]
    7432:	695b      	ldr	r3, [r3, #20]
    7434:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    7436:	693b      	ldr	r3, [r7, #16]
    7438:	7f1b      	ldrb	r3, [r3, #28]
    743a:	b2db      	uxtb	r3, r3
    743c:	f003 0301 	and.w	r3, r3, #1
    7440:	2b00      	cmp	r3, #0
    7442:	d106      	bne.n	7452 <timer_process_counted+0x46>
    7444:	693b      	ldr	r3, [r7, #16]
    7446:	7f1b      	ldrb	r3, [r3, #28]
    7448:	b2db      	uxtb	r3, r3
    744a:	f003 0302 	and.w	r3, r3, #2
    744e:	2b00      	cmp	r3, #0
    7450:	d027      	beq.n	74a2 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    7452:	693b      	ldr	r3, [r7, #16]
    7454:	7f1b      	ldrb	r3, [r3, #28]
    7456:	b2db      	uxtb	r3, r3
    7458:	f043 0302 	orr.w	r3, r3, #2
    745c:	b2da      	uxtb	r2, r3
    745e:	693b      	ldr	r3, [r7, #16]
    7460:	771a      	strb	r2, [r3, #28]
		return;
    7462:	e029      	b.n	74b8 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    7464:	697b      	ldr	r3, [r7, #20]
    7466:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    7468:	693b      	ldr	r3, [r7, #16]
    746a:	3318      	adds	r3, #24
    746c:	4618      	mov	r0, r3
    746e:	4b15      	ldr	r3, [pc, #84]	; (74c4 <timer_process_counted+0xb8>)
    7470:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    7472:	68bb      	ldr	r3, [r7, #8]
    7474:	7c1b      	ldrb	r3, [r3, #16]
    7476:	2b01      	cmp	r3, #1
    7478:	d109      	bne.n	748e <timer_process_counted+0x82>
			tmp->time_label = time;
    747a:	68bb      	ldr	r3, [r7, #8]
    747c:	68fa      	ldr	r2, [r7, #12]
    747e:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    7480:	693b      	ldr	r3, [r7, #16]
    7482:	3318      	adds	r3, #24
    7484:	68fa      	ldr	r2, [r7, #12]
    7486:	68b9      	ldr	r1, [r7, #8]
    7488:	4618      	mov	r0, r3
    748a:	4b0f      	ldr	r3, [pc, #60]	; (74c8 <timer_process_counted+0xbc>)
    748c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    748e:	693b      	ldr	r3, [r7, #16]
    7490:	3318      	adds	r3, #24
    7492:	4618      	mov	r0, r3
    7494:	4b0a      	ldr	r3, [pc, #40]	; (74c0 <timer_process_counted+0xb4>)
    7496:	4798      	blx	r3
    7498:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    749a:	68bb      	ldr	r3, [r7, #8]
    749c:	68db      	ldr	r3, [r3, #12]
    749e:	68b8      	ldr	r0, [r7, #8]
    74a0:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    74a2:	697b      	ldr	r3, [r7, #20]
    74a4:	2b00      	cmp	r3, #0
    74a6:	d007      	beq.n	74b8 <timer_process_counted+0xac>
    74a8:	697b      	ldr	r3, [r7, #20]
    74aa:	685b      	ldr	r3, [r3, #4]
    74ac:	68fa      	ldr	r2, [r7, #12]
    74ae:	1ad2      	subs	r2, r2, r3
    74b0:	697b      	ldr	r3, [r7, #20]
    74b2:	689b      	ldr	r3, [r3, #8]
    74b4:	429a      	cmp	r2, r3
    74b6:	d2d5      	bcs.n	7464 <timer_process_counted+0x58>
	}
}
    74b8:	3718      	adds	r7, #24
    74ba:	46bd      	mov	sp, r7
    74bc:	bd80      	pop	{r7, pc}
    74be:	bf00      	nop
    74c0:	00006fe1 	.word	0x00006fe1
    74c4:	00007f79 	.word	0x00007f79
    74c8:	0000735d 	.word	0x0000735d

000074cc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    74cc:	b480      	push	{r7}
    74ce:	b085      	sub	sp, #20
    74d0:	af00      	add	r7, sp, #0
    74d2:	4603      	mov	r3, r0
    74d4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    74d6:	2300      	movs	r3, #0
    74d8:	73fb      	strb	r3, [r7, #15]
    74da:	e029      	b.n	7530 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    74dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    74e0:	4a19      	ldr	r2, [pc, #100]	; (7548 <_usb_d_find_ep+0x7c>)
    74e2:	015b      	lsls	r3, r3, #5
    74e4:	4413      	add	r3, r2
    74e6:	3301      	adds	r3, #1
    74e8:	781b      	ldrb	r3, [r3, #0]
    74ea:	79fa      	ldrb	r2, [r7, #7]
    74ec:	429a      	cmp	r2, r3
    74ee:	d102      	bne.n	74f6 <_usb_d_find_ep+0x2a>
			return i;
    74f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    74f4:	e022      	b.n	753c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    74f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    74fa:	4a13      	ldr	r2, [pc, #76]	; (7548 <_usb_d_find_ep+0x7c>)
    74fc:	015b      	lsls	r3, r3, #5
    74fe:	4413      	add	r3, r2
    7500:	781b      	ldrb	r3, [r3, #0]
    7502:	2b00      	cmp	r3, #0
    7504:	d10e      	bne.n	7524 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    7506:	79fb      	ldrb	r3, [r7, #7]
    7508:	f003 030f 	and.w	r3, r3, #15
    750c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7510:	490d      	ldr	r1, [pc, #52]	; (7548 <_usb_d_find_ep+0x7c>)
    7512:	0152      	lsls	r2, r2, #5
    7514:	440a      	add	r2, r1
    7516:	3201      	adds	r2, #1
    7518:	7812      	ldrb	r2, [r2, #0]
    751a:	4293      	cmp	r3, r2
    751c:	d102      	bne.n	7524 <_usb_d_find_ep+0x58>
			return i;
    751e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7522:	e00b      	b.n	753c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7524:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7528:	b2db      	uxtb	r3, r3
    752a:	3301      	adds	r3, #1
    752c:	b2db      	uxtb	r3, r3
    752e:	73fb      	strb	r3, [r7, #15]
    7530:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7534:	2b03      	cmp	r3, #3
    7536:	ddd1      	ble.n	74dc <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    7538:	f04f 33ff 	mov.w	r3, #4294967295
}
    753c:	4618      	mov	r0, r3
    753e:	3714      	adds	r7, #20
    7540:	46bd      	mov	sp, r7
    7542:	f85d 7b04 	ldr.w	r7, [sp], #4
    7546:	4770      	bx	lr
    7548:	200085cc 	.word	0x200085cc

0000754c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    754c:	b580      	push	{r7, lr}
    754e:	b088      	sub	sp, #32
    7550:	af00      	add	r7, sp, #0
    7552:	60ba      	str	r2, [r7, #8]
    7554:	607b      	str	r3, [r7, #4]
    7556:	4603      	mov	r3, r0
    7558:	73fb      	strb	r3, [r7, #15]
    755a:	460b      	mov	r3, r1
    755c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    755e:	68bb      	ldr	r3, [r7, #8]
    7560:	617b      	str	r3, [r7, #20]
    7562:	687b      	ldr	r3, [r7, #4]
    7564:	61bb      	str	r3, [r7, #24]
    7566:	7bbb      	ldrb	r3, [r7, #14]
    7568:	2b00      	cmp	r3, #0
    756a:	d004      	beq.n	7576 <_usb_d_trans+0x2a>
    756c:	7bfb      	ldrb	r3, [r7, #15]
    756e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7572:	b2db      	uxtb	r3, r3
    7574:	e003      	b.n	757e <_usb_d_trans+0x32>
    7576:	7bfb      	ldrb	r3, [r7, #15]
    7578:	f003 030f 	and.w	r3, r3, #15
    757c:	b2db      	uxtb	r3, r3
    757e:	773b      	strb	r3, [r7, #28]
    7580:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    7584:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    7586:	f107 0314 	add.w	r3, r7, #20
    758a:	4618      	mov	r0, r3
    758c:	4b03      	ldr	r3, [pc, #12]	; (759c <_usb_d_trans+0x50>)
    758e:	4798      	blx	r3
    7590:	4603      	mov	r3, r0
}
    7592:	4618      	mov	r0, r3
    7594:	3720      	adds	r7, #32
    7596:	46bd      	mov	sp, r7
    7598:	bd80      	pop	{r7, pc}
    759a:	bf00      	nop
    759c:	0000fd89 	.word	0x0000fd89

000075a0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    75a0:	b480      	push	{r7}
    75a2:	b085      	sub	sp, #20
    75a4:	af00      	add	r7, sp, #0
    75a6:	60f8      	str	r0, [r7, #12]
    75a8:	60b9      	str	r1, [r7, #8]
    75aa:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    75ac:	2300      	movs	r3, #0
}
    75ae:	4618      	mov	r0, r3
    75b0:	3714      	adds	r7, #20
    75b2:	46bd      	mov	sp, r7
    75b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    75b8:	4770      	bx	lr
	...

000075bc <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    75bc:	b580      	push	{r7, lr}
    75be:	b086      	sub	sp, #24
    75c0:	af00      	add	r7, sp, #0
    75c2:	4603      	mov	r3, r0
    75c4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    75c6:	79fb      	ldrb	r3, [r7, #7]
    75c8:	4618      	mov	r0, r3
    75ca:	4b2a      	ldr	r3, [pc, #168]	; (7674 <usb_d_cb_trans_setup+0xb8>)
    75cc:	4798      	blx	r3
    75ce:	4603      	mov	r3, r0
    75d0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    75d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    75d6:	015b      	lsls	r3, r3, #5
    75d8:	4a27      	ldr	r2, [pc, #156]	; (7678 <usb_d_cb_trans_setup+0xbc>)
    75da:	4413      	add	r3, r2
    75dc:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    75de:	693b      	ldr	r3, [r7, #16]
    75e0:	330c      	adds	r3, #12
    75e2:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    75e4:	79fb      	ldrb	r3, [r7, #7]
    75e6:	68f9      	ldr	r1, [r7, #12]
    75e8:	4618      	mov	r0, r3
    75ea:	4b24      	ldr	r3, [pc, #144]	; (767c <usb_d_cb_trans_setup+0xc0>)
    75ec:	4798      	blx	r3
    75ee:	4603      	mov	r3, r0
    75f0:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    75f2:	7afb      	ldrb	r3, [r7, #11]
    75f4:	2b08      	cmp	r3, #8
    75f6:	d00d      	beq.n	7614 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    75f8:	79fb      	ldrb	r3, [r7, #7]
    75fa:	2101      	movs	r1, #1
    75fc:	4618      	mov	r0, r3
    75fe:	4b20      	ldr	r3, [pc, #128]	; (7680 <usb_d_cb_trans_setup+0xc4>)
    7600:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    7602:	79fb      	ldrb	r3, [r7, #7]
    7604:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7608:	b2db      	uxtb	r3, r3
    760a:	2101      	movs	r1, #1
    760c:	4618      	mov	r0, r3
    760e:	4b1c      	ldr	r3, [pc, #112]	; (7680 <usb_d_cb_trans_setup+0xc4>)
    7610:	4798      	blx	r3
		return;
    7612:	e02b      	b.n	766c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7614:	79fb      	ldrb	r3, [r7, #7]
    7616:	2100      	movs	r1, #0
    7618:	4618      	mov	r0, r3
    761a:	4b19      	ldr	r3, [pc, #100]	; (7680 <usb_d_cb_trans_setup+0xc4>)
    761c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    761e:	79fb      	ldrb	r3, [r7, #7]
    7620:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7624:	b2db      	uxtb	r3, r3
    7626:	2100      	movs	r1, #0
    7628:	4618      	mov	r0, r3
    762a:	4b15      	ldr	r3, [pc, #84]	; (7680 <usb_d_cb_trans_setup+0xc4>)
    762c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    762e:	693b      	ldr	r3, [r7, #16]
    7630:	2201      	movs	r2, #1
    7632:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    7634:	693b      	ldr	r3, [r7, #16]
    7636:	695b      	ldr	r3, [r3, #20]
    7638:	79fa      	ldrb	r2, [r7, #7]
    763a:	68f9      	ldr	r1, [r7, #12]
    763c:	4610      	mov	r0, r2
    763e:	4798      	blx	r3
    7640:	4603      	mov	r3, r0
    7642:	f083 0301 	eor.w	r3, r3, #1
    7646:	b2db      	uxtb	r3, r3
    7648:	2b00      	cmp	r3, #0
    764a:	d00f      	beq.n	766c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    764c:	693b      	ldr	r3, [r7, #16]
    764e:	2205      	movs	r2, #5
    7650:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7652:	79fb      	ldrb	r3, [r7, #7]
    7654:	2101      	movs	r1, #1
    7656:	4618      	mov	r0, r3
    7658:	4b09      	ldr	r3, [pc, #36]	; (7680 <usb_d_cb_trans_setup+0xc4>)
    765a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    765c:	79fb      	ldrb	r3, [r7, #7]
    765e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7662:	b2db      	uxtb	r3, r3
    7664:	2101      	movs	r1, #1
    7666:	4618      	mov	r0, r3
    7668:	4b05      	ldr	r3, [pc, #20]	; (7680 <usb_d_cb_trans_setup+0xc4>)
    766a:	4798      	blx	r3
	}
}
    766c:	3718      	adds	r7, #24
    766e:	46bd      	mov	sp, r7
    7670:	bd80      	pop	{r7, pc}
    7672:	bf00      	nop
    7674:	000074cd 	.word	0x000074cd
    7678:	200085cc 	.word	0x200085cc
    767c:	0000fce1 	.word	0x0000fce1
    7680:	0000fb59 	.word	0x0000fb59

00007684 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    7684:	b580      	push	{r7, lr}
    7686:	b084      	sub	sp, #16
    7688:	af00      	add	r7, sp, #0
    768a:	4603      	mov	r3, r0
    768c:	6039      	str	r1, [r7, #0]
    768e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7690:	79fb      	ldrb	r3, [r7, #7]
    7692:	4618      	mov	r0, r3
    7694:	4b0d      	ldr	r3, [pc, #52]	; (76cc <usb_d_cb_trans_more+0x48>)
    7696:	4798      	blx	r3
    7698:	4603      	mov	r3, r0
    769a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    769c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    76a0:	015b      	lsls	r3, r3, #5
    76a2:	4a0b      	ldr	r2, [pc, #44]	; (76d0 <usb_d_cb_trans_more+0x4c>)
    76a4:	4413      	add	r3, r2
    76a6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    76a8:	68bb      	ldr	r3, [r7, #8]
    76aa:	789b      	ldrb	r3, [r3, #2]
    76ac:	2b03      	cmp	r3, #3
    76ae:	d107      	bne.n	76c0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    76b0:	68bb      	ldr	r3, [r7, #8]
    76b2:	699b      	ldr	r3, [r3, #24]
    76b4:	79fa      	ldrb	r2, [r7, #7]
    76b6:	6839      	ldr	r1, [r7, #0]
    76b8:	4610      	mov	r0, r2
    76ba:	4798      	blx	r3
    76bc:	4603      	mov	r3, r0
    76be:	e000      	b.n	76c2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    76c0:	2300      	movs	r3, #0
}
    76c2:	4618      	mov	r0, r3
    76c4:	3710      	adds	r7, #16
    76c6:	46bd      	mov	sp, r7
    76c8:	bd80      	pop	{r7, pc}
    76ca:	bf00      	nop
    76cc:	000074cd 	.word	0x000074cd
    76d0:	200085cc 	.word	0x200085cc

000076d4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    76d4:	b590      	push	{r4, r7, lr}
    76d6:	b087      	sub	sp, #28
    76d8:	af02      	add	r7, sp, #8
    76da:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    76dc:	687b      	ldr	r3, [r7, #4]
    76de:	789b      	ldrb	r3, [r3, #2]
    76e0:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    76e2:	687b      	ldr	r3, [r7, #4]
    76e4:	7b1b      	ldrb	r3, [r3, #12]
    76e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    76ea:	2b00      	cmp	r3, #0
    76ec:	bf14      	ite	ne
    76ee:	2301      	movne	r3, #1
    76f0:	2300      	moveq	r3, #0
    76f2:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    76f4:	7bfb      	ldrb	r3, [r7, #15]
    76f6:	2b03      	cmp	r3, #3
    76f8:	d13a      	bne.n	7770 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    76fa:	687b      	ldr	r3, [r7, #4]
    76fc:	69db      	ldr	r3, [r3, #28]
    76fe:	687a      	ldr	r2, [r7, #4]
    7700:	7850      	ldrb	r0, [r2, #1]
    7702:	687a      	ldr	r2, [r7, #4]
    7704:	320c      	adds	r2, #12
    7706:	2101      	movs	r1, #1
    7708:	4798      	blx	r3
    770a:	4603      	mov	r3, r0
    770c:	737b      	strb	r3, [r7, #13]
		if (err) {
    770e:	7b7b      	ldrb	r3, [r7, #13]
    7710:	2b00      	cmp	r3, #0
    7712:	d015      	beq.n	7740 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    7714:	687b      	ldr	r3, [r7, #4]
    7716:	2205      	movs	r2, #5
    7718:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    771a:	687b      	ldr	r3, [r7, #4]
    771c:	2202      	movs	r2, #2
    771e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    7720:	7bbb      	ldrb	r3, [r7, #14]
    7722:	2b00      	cmp	r3, #0
    7724:	d002      	beq.n	772c <usb_d_ctrl_trans_done+0x58>
    7726:	687b      	ldr	r3, [r7, #4]
    7728:	785b      	ldrb	r3, [r3, #1]
    772a:	e004      	b.n	7736 <usb_d_ctrl_trans_done+0x62>
    772c:	687b      	ldr	r3, [r7, #4]
    772e:	785b      	ldrb	r3, [r3, #1]
    7730:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7734:	b2db      	uxtb	r3, r3
    7736:	2101      	movs	r1, #1
    7738:	4618      	mov	r0, r3
    773a:	4b15      	ldr	r3, [pc, #84]	; (7790 <usb_d_ctrl_trans_done+0xbc>)
    773c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    773e:	e022      	b.n	7786 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    7740:	687b      	ldr	r3, [r7, #4]
    7742:	2204      	movs	r2, #4
    7744:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    7746:	687b      	ldr	r3, [r7, #4]
    7748:	7858      	ldrb	r0, [r3, #1]
    774a:	7bbb      	ldrb	r3, [r7, #14]
    774c:	2b00      	cmp	r3, #0
    774e:	bf14      	ite	ne
    7750:	2301      	movne	r3, #1
    7752:	2300      	moveq	r3, #0
    7754:	b2db      	uxtb	r3, r3
    7756:	f083 0301 	eor.w	r3, r3, #1
    775a:	b2db      	uxtb	r3, r3
    775c:	f003 0301 	and.w	r3, r3, #1
    7760:	b2d9      	uxtb	r1, r3
    7762:	2301      	movs	r3, #1
    7764:	9300      	str	r3, [sp, #0]
    7766:	2300      	movs	r3, #0
    7768:	2200      	movs	r2, #0
    776a:	4c0a      	ldr	r4, [pc, #40]	; (7794 <usb_d_ctrl_trans_done+0xc0>)
    776c:	47a0      	blx	r4
}
    776e:	e00a      	b.n	7786 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    7770:	687b      	ldr	r3, [r7, #4]
    7772:	69db      	ldr	r3, [r3, #28]
    7774:	687a      	ldr	r2, [r7, #4]
    7776:	7850      	ldrb	r0, [r2, #1]
    7778:	687a      	ldr	r2, [r7, #4]
    777a:	320c      	adds	r2, #12
    777c:	2100      	movs	r1, #0
    777e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7780:	687b      	ldr	r3, [r7, #4]
    7782:	2202      	movs	r2, #2
    7784:	709a      	strb	r2, [r3, #2]
}
    7786:	bf00      	nop
    7788:	3714      	adds	r7, #20
    778a:	46bd      	mov	sp, r7
    778c:	bd90      	pop	{r4, r7, pc}
    778e:	bf00      	nop
    7790:	0000fb59 	.word	0x0000fb59
    7794:	0000754d 	.word	0x0000754d

00007798 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    7798:	b580      	push	{r7, lr}
    779a:	b086      	sub	sp, #24
    779c:	af00      	add	r7, sp, #0
    779e:	4603      	mov	r3, r0
    77a0:	60b9      	str	r1, [r7, #8]
    77a2:	607a      	str	r2, [r7, #4]
    77a4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    77a6:	7bfb      	ldrb	r3, [r7, #15]
    77a8:	4618      	mov	r0, r3
    77aa:	4b2f      	ldr	r3, [pc, #188]	; (7868 <_usb_d_cb_trans_done+0xd0>)
    77ac:	4798      	blx	r3
    77ae:	4603      	mov	r3, r0
    77b0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    77b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    77b6:	015b      	lsls	r3, r3, #5
    77b8:	4a2c      	ldr	r2, [pc, #176]	; (786c <_usb_d_cb_trans_done+0xd4>)
    77ba:	4413      	add	r3, r2
    77bc:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    77be:	68bb      	ldr	r3, [r7, #8]
    77c0:	2b00      	cmp	r3, #0
    77c2:	d10e      	bne.n	77e2 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    77c4:	693b      	ldr	r3, [r7, #16]
    77c6:	2200      	movs	r2, #0
    77c8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    77ca:	693b      	ldr	r3, [r7, #16]
    77cc:	781b      	ldrb	r3, [r3, #0]
    77ce:	2b00      	cmp	r3, #0
    77d0:	d103      	bne.n	77da <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    77d2:	6938      	ldr	r0, [r7, #16]
    77d4:	4b26      	ldr	r3, [pc, #152]	; (7870 <_usb_d_cb_trans_done+0xd8>)
    77d6:	4798      	blx	r3
			return;
    77d8:	e043      	b.n	7862 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    77da:	693b      	ldr	r3, [r7, #16]
    77dc:	2201      	movs	r2, #1
    77de:	709a      	strb	r2, [r3, #2]
    77e0:	e038      	b.n	7854 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    77e2:	68bb      	ldr	r3, [r7, #8]
    77e4:	2b01      	cmp	r3, #1
    77e6:	d113      	bne.n	7810 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    77e8:	693b      	ldr	r3, [r7, #16]
    77ea:	2202      	movs	r2, #2
    77ec:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    77ee:	693b      	ldr	r3, [r7, #16]
    77f0:	781b      	ldrb	r3, [r3, #0]
    77f2:	2b00      	cmp	r3, #0
    77f4:	d108      	bne.n	7808 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    77f6:	693b      	ldr	r3, [r7, #16]
    77f8:	2202      	movs	r2, #2
    77fa:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    77fc:	7bfb      	ldrb	r3, [r7, #15]
    77fe:	2100      	movs	r1, #0
    7800:	4618      	mov	r0, r3
    7802:	4b1c      	ldr	r3, [pc, #112]	; (7874 <_usb_d_cb_trans_done+0xdc>)
    7804:	4798      	blx	r3
    7806:	e025      	b.n	7854 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    7808:	693b      	ldr	r3, [r7, #16]
    780a:	2205      	movs	r2, #5
    780c:	709a      	strb	r2, [r3, #2]
    780e:	e021      	b.n	7854 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    7810:	68bb      	ldr	r3, [r7, #8]
    7812:	2b02      	cmp	r3, #2
    7814:	d10e      	bne.n	7834 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    7816:	693b      	ldr	r3, [r7, #16]
    7818:	2204      	movs	r2, #4
    781a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    781c:	693b      	ldr	r3, [r7, #16]
    781e:	781b      	ldrb	r3, [r3, #0]
    7820:	2b00      	cmp	r3, #0
    7822:	d103      	bne.n	782c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7824:	693b      	ldr	r3, [r7, #16]
    7826:	2202      	movs	r2, #2
    7828:	709a      	strb	r2, [r3, #2]
			return;
    782a:	e01a      	b.n	7862 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    782c:	693b      	ldr	r3, [r7, #16]
    782e:	2201      	movs	r2, #1
    7830:	709a      	strb	r2, [r3, #2]
    7832:	e00f      	b.n	7854 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    7834:	68bb      	ldr	r3, [r7, #8]
    7836:	2b03      	cmp	r3, #3
    7838:	d106      	bne.n	7848 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    783a:	693b      	ldr	r3, [r7, #16]
    783c:	2200      	movs	r2, #0
    783e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    7840:	693b      	ldr	r3, [r7, #16]
    7842:	2205      	movs	r2, #5
    7844:	70da      	strb	r2, [r3, #3]
    7846:	e005      	b.n	7854 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    7848:	693b      	ldr	r3, [r7, #16]
    784a:	2206      	movs	r2, #6
    784c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    784e:	693b      	ldr	r3, [r7, #16]
    7850:	2206      	movs	r2, #6
    7852:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    7854:	693b      	ldr	r3, [r7, #16]
    7856:	69db      	ldr	r3, [r3, #28]
    7858:	693a      	ldr	r2, [r7, #16]
    785a:	78d1      	ldrb	r1, [r2, #3]
    785c:	687a      	ldr	r2, [r7, #4]
    785e:	7bf8      	ldrb	r0, [r7, #15]
    7860:	4798      	blx	r3
}
    7862:	3718      	adds	r7, #24
    7864:	46bd      	mov	sp, r7
    7866:	bd80      	pop	{r7, pc}
    7868:	000074cd 	.word	0x000074cd
    786c:	200085cc 	.word	0x200085cc
    7870:	000076d5 	.word	0x000076d5
    7874:	0000fb59 	.word	0x0000fb59

00007878 <usb_d_init>:

int32_t usb_d_init(void)
{
    7878:	b580      	push	{r7, lr}
    787a:	b082      	sub	sp, #8
    787c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    787e:	4b21      	ldr	r3, [pc, #132]	; (7904 <usb_d_init+0x8c>)
    7880:	4798      	blx	r3
    7882:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    7884:	683b      	ldr	r3, [r7, #0]
    7886:	2b00      	cmp	r3, #0
    7888:	da01      	bge.n	788e <usb_d_init+0x16>
		return rc;
    788a:	683b      	ldr	r3, [r7, #0]
    788c:	e036      	b.n	78fc <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    788e:	2280      	movs	r2, #128	; 0x80
    7890:	2100      	movs	r1, #0
    7892:	481d      	ldr	r0, [pc, #116]	; (7908 <usb_d_init+0x90>)
    7894:	4b1d      	ldr	r3, [pc, #116]	; (790c <usb_d_init+0x94>)
    7896:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7898:	2300      	movs	r3, #0
    789a:	71fb      	strb	r3, [r7, #7]
    789c:	e01e      	b.n	78dc <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    789e:	79fb      	ldrb	r3, [r7, #7]
    78a0:	4a19      	ldr	r2, [pc, #100]	; (7908 <usb_d_init+0x90>)
    78a2:	015b      	lsls	r3, r3, #5
    78a4:	4413      	add	r3, r2
    78a6:	3301      	adds	r3, #1
    78a8:	22ff      	movs	r2, #255	; 0xff
    78aa:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    78ac:	79fb      	ldrb	r3, [r7, #7]
    78ae:	4a16      	ldr	r2, [pc, #88]	; (7908 <usb_d_init+0x90>)
    78b0:	015b      	lsls	r3, r3, #5
    78b2:	4413      	add	r3, r2
    78b4:	3314      	adds	r3, #20
    78b6:	4a16      	ldr	r2, [pc, #88]	; (7910 <usb_d_init+0x98>)
    78b8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    78ba:	79fb      	ldrb	r3, [r7, #7]
    78bc:	4a12      	ldr	r2, [pc, #72]	; (7908 <usb_d_init+0x90>)
    78be:	015b      	lsls	r3, r3, #5
    78c0:	4413      	add	r3, r2
    78c2:	3318      	adds	r3, #24
    78c4:	4a12      	ldr	r2, [pc, #72]	; (7910 <usb_d_init+0x98>)
    78c6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    78c8:	79fb      	ldrb	r3, [r7, #7]
    78ca:	4a0f      	ldr	r2, [pc, #60]	; (7908 <usb_d_init+0x90>)
    78cc:	015b      	lsls	r3, r3, #5
    78ce:	4413      	add	r3, r2
    78d0:	331c      	adds	r3, #28
    78d2:	4a0f      	ldr	r2, [pc, #60]	; (7910 <usb_d_init+0x98>)
    78d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    78d6:	79fb      	ldrb	r3, [r7, #7]
    78d8:	3301      	adds	r3, #1
    78da:	71fb      	strb	r3, [r7, #7]
    78dc:	79fb      	ldrb	r3, [r7, #7]
    78de:	2b03      	cmp	r3, #3
    78e0:	d9dd      	bls.n	789e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    78e2:	490c      	ldr	r1, [pc, #48]	; (7914 <usb_d_init+0x9c>)
    78e4:	2000      	movs	r0, #0
    78e6:	4b0c      	ldr	r3, [pc, #48]	; (7918 <usb_d_init+0xa0>)
    78e8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    78ea:	490c      	ldr	r1, [pc, #48]	; (791c <usb_d_init+0xa4>)
    78ec:	2001      	movs	r0, #1
    78ee:	4b0a      	ldr	r3, [pc, #40]	; (7918 <usb_d_init+0xa0>)
    78f0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    78f2:	490b      	ldr	r1, [pc, #44]	; (7920 <usb_d_init+0xa8>)
    78f4:	2002      	movs	r0, #2
    78f6:	4b08      	ldr	r3, [pc, #32]	; (7918 <usb_d_init+0xa0>)
    78f8:	4798      	blx	r3
	return ERR_NONE;
    78fa:	2300      	movs	r3, #0
}
    78fc:	4618      	mov	r0, r3
    78fe:	3708      	adds	r7, #8
    7900:	46bd      	mov	sp, r7
    7902:	bd80      	pop	{r7, pc}
    7904:	0000f3a1 	.word	0x0000f3a1
    7908:	200085cc 	.word	0x200085cc
    790c:	0001d4b1 	.word	0x0001d4b1
    7910:	000075a1 	.word	0x000075a1
    7914:	000075bd 	.word	0x000075bd
    7918:	0000ffe9 	.word	0x0000ffe9
    791c:	00007685 	.word	0x00007685
    7920:	00007799 	.word	0x00007799

00007924 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    7924:	b580      	push	{r7, lr}
    7926:	b082      	sub	sp, #8
    7928:	af00      	add	r7, sp, #0
    792a:	4603      	mov	r3, r0
    792c:	6039      	str	r1, [r7, #0]
    792e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    7930:	79fb      	ldrb	r3, [r7, #7]
    7932:	6839      	ldr	r1, [r7, #0]
    7934:	4618      	mov	r0, r3
    7936:	4b03      	ldr	r3, [pc, #12]	; (7944 <usb_d_register_callback+0x20>)
    7938:	4798      	blx	r3
}
    793a:	bf00      	nop
    793c:	3708      	adds	r7, #8
    793e:	46bd      	mov	sp, r7
    7940:	bd80      	pop	{r7, pc}
    7942:	bf00      	nop
    7944:	0000ffa1 	.word	0x0000ffa1

00007948 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    7948:	b580      	push	{r7, lr}
    794a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    794c:	4b02      	ldr	r3, [pc, #8]	; (7958 <usb_d_enable+0x10>)
    794e:	4798      	blx	r3
    7950:	4603      	mov	r3, r0
}
    7952:	4618      	mov	r0, r3
    7954:	bd80      	pop	{r7, pc}
    7956:	bf00      	nop
    7958:	0000f491 	.word	0x0000f491

0000795c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    795c:	b580      	push	{r7, lr}
    795e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    7960:	4b01      	ldr	r3, [pc, #4]	; (7968 <usb_d_attach+0xc>)
    7962:	4798      	blx	r3
}
    7964:	bf00      	nop
    7966:	bd80      	pop	{r7, pc}
    7968:	0000f515 	.word	0x0000f515

0000796c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    796c:	b580      	push	{r7, lr}
    796e:	b082      	sub	sp, #8
    7970:	af00      	add	r7, sp, #0
    7972:	4603      	mov	r3, r0
    7974:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    7976:	79fb      	ldrb	r3, [r7, #7]
    7978:	4618      	mov	r0, r3
    797a:	4b03      	ldr	r3, [pc, #12]	; (7988 <usb_d_set_address+0x1c>)
    797c:	4798      	blx	r3
}
    797e:	bf00      	nop
    7980:	3708      	adds	r7, #8
    7982:	46bd      	mov	sp, r7
    7984:	bd80      	pop	{r7, pc}
    7986:	bf00      	nop
    7988:	0000f529 	.word	0x0000f529

0000798c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    798c:	b580      	push	{r7, lr}
    798e:	b082      	sub	sp, #8
    7990:	af00      	add	r7, sp, #0
    7992:	4603      	mov	r3, r0
    7994:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    7996:	79fb      	ldrb	r3, [r7, #7]
    7998:	b29b      	uxth	r3, r3
    799a:	461a      	mov	r2, r3
    799c:	2100      	movs	r1, #0
    799e:	2000      	movs	r0, #0
    79a0:	4b03      	ldr	r3, [pc, #12]	; (79b0 <usb_d_ep0_init+0x24>)
    79a2:	4798      	blx	r3
    79a4:	4603      	mov	r3, r0
}
    79a6:	4618      	mov	r0, r3
    79a8:	3708      	adds	r7, #8
    79aa:	46bd      	mov	sp, r7
    79ac:	bd80      	pop	{r7, pc}
    79ae:	bf00      	nop
    79b0:	000079b5 	.word	0x000079b5

000079b4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    79b4:	b580      	push	{r7, lr}
    79b6:	b086      	sub	sp, #24
    79b8:	af00      	add	r7, sp, #0
    79ba:	4603      	mov	r3, r0
    79bc:	71fb      	strb	r3, [r7, #7]
    79be:	460b      	mov	r3, r1
    79c0:	71bb      	strb	r3, [r7, #6]
    79c2:	4613      	mov	r3, r2
    79c4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    79c6:	79fb      	ldrb	r3, [r7, #7]
    79c8:	4618      	mov	r0, r3
    79ca:	4b1e      	ldr	r3, [pc, #120]	; (7a44 <usb_d_ep_init+0x90>)
    79cc:	4798      	blx	r3
    79ce:	4603      	mov	r3, r0
    79d0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    79d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    79d6:	015b      	lsls	r3, r3, #5
    79d8:	4a1b      	ldr	r2, [pc, #108]	; (7a48 <usb_d_ep_init+0x94>)
    79da:	4413      	add	r3, r2
    79dc:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    79de:	f997 3017 	ldrsb.w	r3, [r7, #23]
    79e2:	2b00      	cmp	r3, #0
    79e4:	db02      	blt.n	79ec <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    79e6:	f06f 0313 	mvn.w	r3, #19
    79ea:	e027      	b.n	7a3c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    79ec:	20ff      	movs	r0, #255	; 0xff
    79ee:	4b15      	ldr	r3, [pc, #84]	; (7a44 <usb_d_ep_init+0x90>)
    79f0:	4798      	blx	r3
    79f2:	4603      	mov	r3, r0
    79f4:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    79f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    79fa:	2b00      	cmp	r3, #0
    79fc:	da02      	bge.n	7a04 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    79fe:	f06f 0314 	mvn.w	r3, #20
    7a02:	e01b      	b.n	7a3c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    7a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7a08:	015b      	lsls	r3, r3, #5
    7a0a:	4a0f      	ldr	r2, [pc, #60]	; (7a48 <usb_d_ep_init+0x94>)
    7a0c:	4413      	add	r3, r2
    7a0e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    7a10:	88ba      	ldrh	r2, [r7, #4]
    7a12:	79b9      	ldrb	r1, [r7, #6]
    7a14:	79fb      	ldrb	r3, [r7, #7]
    7a16:	4618      	mov	r0, r3
    7a18:	4b0c      	ldr	r3, [pc, #48]	; (7a4c <usb_d_ep_init+0x98>)
    7a1a:	4798      	blx	r3
    7a1c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    7a1e:	68fb      	ldr	r3, [r7, #12]
    7a20:	2b00      	cmp	r3, #0
    7a22:	da01      	bge.n	7a28 <usb_d_ep_init+0x74>
		return rc;
    7a24:	68fb      	ldr	r3, [r7, #12]
    7a26:	e009      	b.n	7a3c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    7a28:	693b      	ldr	r3, [r7, #16]
    7a2a:	79fa      	ldrb	r2, [r7, #7]
    7a2c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    7a2e:	79bb      	ldrb	r3, [r7, #6]
    7a30:	f003 0303 	and.w	r3, r3, #3
    7a34:	b2da      	uxtb	r2, r3
    7a36:	693b      	ldr	r3, [r7, #16]
    7a38:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    7a3a:	2300      	movs	r3, #0
}
    7a3c:	4618      	mov	r0, r3
    7a3e:	3718      	adds	r7, #24
    7a40:	46bd      	mov	sp, r7
    7a42:	bd80      	pop	{r7, pc}
    7a44:	000074cd 	.word	0x000074cd
    7a48:	200085cc 	.word	0x200085cc
    7a4c:	0000f5c9 	.word	0x0000f5c9

00007a50 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    7a50:	b580      	push	{r7, lr}
    7a52:	b084      	sub	sp, #16
    7a54:	af00      	add	r7, sp, #0
    7a56:	4603      	mov	r3, r0
    7a58:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7a5a:	79fb      	ldrb	r3, [r7, #7]
    7a5c:	4618      	mov	r0, r3
    7a5e:	4b0d      	ldr	r3, [pc, #52]	; (7a94 <usb_d_ep_deinit+0x44>)
    7a60:	4798      	blx	r3
    7a62:	4603      	mov	r3, r0
    7a64:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7a6a:	015b      	lsls	r3, r3, #5
    7a6c:	4a0a      	ldr	r2, [pc, #40]	; (7a98 <usb_d_ep_deinit+0x48>)
    7a6e:	4413      	add	r3, r2
    7a70:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    7a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7a76:	2b00      	cmp	r3, #0
    7a78:	db07      	blt.n	7a8a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    7a7a:	79fb      	ldrb	r3, [r7, #7]
    7a7c:	4618      	mov	r0, r3
    7a7e:	4b07      	ldr	r3, [pc, #28]	; (7a9c <usb_d_ep_deinit+0x4c>)
    7a80:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    7a82:	68bb      	ldr	r3, [r7, #8]
    7a84:	22ff      	movs	r2, #255	; 0xff
    7a86:	705a      	strb	r2, [r3, #1]
    7a88:	e000      	b.n	7a8c <usb_d_ep_deinit+0x3c>
		return;
    7a8a:	bf00      	nop
}
    7a8c:	3710      	adds	r7, #16
    7a8e:	46bd      	mov	sp, r7
    7a90:	bd80      	pop	{r7, pc}
    7a92:	bf00      	nop
    7a94:	000074cd 	.word	0x000074cd
    7a98:	200085cc 	.word	0x200085cc
    7a9c:	0000f6fd 	.word	0x0000f6fd

00007aa0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    7aa0:	b580      	push	{r7, lr}
    7aa2:	b086      	sub	sp, #24
    7aa4:	af00      	add	r7, sp, #0
    7aa6:	4603      	mov	r3, r0
    7aa8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7aaa:	79fb      	ldrb	r3, [r7, #7]
    7aac:	4618      	mov	r0, r3
    7aae:	4b15      	ldr	r3, [pc, #84]	; (7b04 <usb_d_ep_enable+0x64>)
    7ab0:	4798      	blx	r3
    7ab2:	4603      	mov	r3, r0
    7ab4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7aba:	015b      	lsls	r3, r3, #5
    7abc:	4a12      	ldr	r2, [pc, #72]	; (7b08 <usb_d_ep_enable+0x68>)
    7abe:	4413      	add	r3, r2
    7ac0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    7ac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7ac6:	2b00      	cmp	r3, #0
    7ac8:	da02      	bge.n	7ad0 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    7aca:	f06f 0311 	mvn.w	r3, #17
    7ace:	e014      	b.n	7afa <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    7ad0:	693b      	ldr	r3, [r7, #16]
    7ad2:	781b      	ldrb	r3, [r3, #0]
    7ad4:	2b00      	cmp	r3, #0
    7ad6:	d101      	bne.n	7adc <usb_d_ep_enable+0x3c>
    7ad8:	2202      	movs	r2, #2
    7ada:	e000      	b.n	7ade <usb_d_ep_enable+0x3e>
    7adc:	2201      	movs	r2, #1
    7ade:	693b      	ldr	r3, [r7, #16]
    7ae0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    7ae2:	79fb      	ldrb	r3, [r7, #7]
    7ae4:	4618      	mov	r0, r3
    7ae6:	4b09      	ldr	r3, [pc, #36]	; (7b0c <usb_d_ep_enable+0x6c>)
    7ae8:	4798      	blx	r3
    7aea:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    7aec:	68fb      	ldr	r3, [r7, #12]
    7aee:	2b00      	cmp	r3, #0
    7af0:	da02      	bge.n	7af8 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    7af2:	693b      	ldr	r3, [r7, #16]
    7af4:	2200      	movs	r2, #0
    7af6:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    7af8:	68fb      	ldr	r3, [r7, #12]
}
    7afa:	4618      	mov	r0, r3
    7afc:	3718      	adds	r7, #24
    7afe:	46bd      	mov	sp, r7
    7b00:	bd80      	pop	{r7, pc}
    7b02:	bf00      	nop
    7b04:	000074cd 	.word	0x000074cd
    7b08:	200085cc 	.word	0x200085cc
    7b0c:	0000f7e1 	.word	0x0000f7e1

00007b10 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    7b10:	b590      	push	{r4, r7, lr}
    7b12:	b08d      	sub	sp, #52	; 0x34
    7b14:	af02      	add	r7, sp, #8
    7b16:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    7b18:	687b      	ldr	r3, [r7, #4]
    7b1a:	7a1b      	ldrb	r3, [r3, #8]
    7b1c:	4618      	mov	r0, r3
    7b1e:	4b51      	ldr	r3, [pc, #324]	; (7c64 <usb_d_ep_transfer+0x154>)
    7b20:	4798      	blx	r3
    7b22:	4603      	mov	r3, r0
    7b24:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    7b26:	f997 301f 	ldrsb.w	r3, [r7, #31]
    7b2a:	015b      	lsls	r3, r3, #5
    7b2c:	4a4e      	ldr	r2, [pc, #312]	; (7c68 <usb_d_ep_transfer+0x158>)
    7b2e:	4413      	add	r3, r2
    7b30:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    7b32:	687b      	ldr	r3, [r7, #4]
    7b34:	7a1b      	ldrb	r3, [r3, #8]
    7b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	bf14      	ite	ne
    7b3e:	2301      	movne	r3, #1
    7b40:	2300      	moveq	r3, #0
    7b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    7b46:	687b      	ldr	r3, [r7, #4]
    7b48:	7a5b      	ldrb	r3, [r3, #9]
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	bf14      	ite	ne
    7b4e:	2301      	movne	r3, #1
    7b50:	2300      	moveq	r3, #0
    7b52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    7b56:	687b      	ldr	r3, [r7, #4]
    7b58:	685b      	ldr	r3, [r3, #4]
    7b5a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    7b5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    7b60:	2b00      	cmp	r3, #0
    7b62:	da02      	bge.n	7b6a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    7b64:	f06f 0311 	mvn.w	r3, #17
    7b68:	e077      	b.n	7c5a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    7b6a:	f107 0308 	add.w	r3, r7, #8
    7b6e:	4618      	mov	r0, r3
    7b70:	4b3e      	ldr	r3, [pc, #248]	; (7c6c <usb_d_ep_transfer+0x15c>)
    7b72:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    7b74:	69bb      	ldr	r3, [r7, #24]
    7b76:	789b      	ldrb	r3, [r3, #2]
    7b78:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    7b7a:	7bfb      	ldrb	r3, [r7, #15]
    7b7c:	b2db      	uxtb	r3, r3
    7b7e:	2b01      	cmp	r3, #1
    7b80:	d10c      	bne.n	7b9c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    7b82:	69bb      	ldr	r3, [r7, #24]
    7b84:	2203      	movs	r2, #3
    7b86:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    7b88:	f107 0308 	add.w	r3, r7, #8
    7b8c:	4618      	mov	r0, r3
    7b8e:	4b38      	ldr	r3, [pc, #224]	; (7c70 <usb_d_ep_transfer+0x160>)
    7b90:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7b92:	69bb      	ldr	r3, [r7, #24]
    7b94:	781b      	ldrb	r3, [r3, #0]
    7b96:	2b00      	cmp	r3, #0
    7b98:	d151      	bne.n	7c3e <usb_d_ep_transfer+0x12e>
    7b9a:	e017      	b.n	7bcc <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    7b9c:	f107 0308 	add.w	r3, r7, #8
    7ba0:	4618      	mov	r0, r3
    7ba2:	4b33      	ldr	r3, [pc, #204]	; (7c70 <usb_d_ep_transfer+0x160>)
    7ba4:	4798      	blx	r3
		switch (state) {
    7ba6:	7bfb      	ldrb	r3, [r7, #15]
    7ba8:	b2db      	uxtb	r3, r3
    7baa:	2b05      	cmp	r3, #5
    7bac:	d004      	beq.n	7bb8 <usb_d_ep_transfer+0xa8>
    7bae:	2b06      	cmp	r3, #6
    7bb0:	d004      	beq.n	7bbc <usb_d_ep_transfer+0xac>
    7bb2:	2b00      	cmp	r3, #0
    7bb4:	d005      	beq.n	7bc2 <usb_d_ep_transfer+0xb2>
    7bb6:	e007      	b.n	7bc8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    7bb8:	2302      	movs	r3, #2
    7bba:	e04e      	b.n	7c5a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    7bbc:	f06f 030f 	mvn.w	r3, #15
    7bc0:	e04b      	b.n	7c5a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    7bc2:	f06f 0312 	mvn.w	r3, #18
    7bc6:	e048      	b.n	7c5a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    7bc8:	2301      	movs	r3, #1
    7bca:	e046      	b.n	7c5a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    7bcc:	69bb      	ldr	r3, [r7, #24]
    7bce:	7c9b      	ldrb	r3, [r3, #18]
    7bd0:	b29a      	uxth	r2, r3
    7bd2:	69bb      	ldr	r3, [r7, #24]
    7bd4:	7cdb      	ldrb	r3, [r3, #19]
    7bd6:	b29b      	uxth	r3, r3
    7bd8:	021b      	lsls	r3, r3, #8
    7bda:	b29b      	uxth	r3, r3
    7bdc:	4413      	add	r3, r2
    7bde:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    7be0:	8afb      	ldrh	r3, [r7, #22]
    7be2:	2b00      	cmp	r3, #0
    7be4:	d10b      	bne.n	7bfe <usb_d_ep_transfer+0xee>
			dir                 = true;
    7be6:	2301      	movs	r3, #1
    7be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    7bec:	2300      	movs	r3, #0
    7bee:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    7bf0:	2301      	movs	r3, #1
    7bf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    7bf6:	69bb      	ldr	r3, [r7, #24]
    7bf8:	2204      	movs	r2, #4
    7bfa:	709a      	strb	r2, [r3, #2]
    7bfc:	e01f      	b.n	7c3e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    7bfe:	69bb      	ldr	r3, [r7, #24]
    7c00:	7b1b      	ldrb	r3, [r3, #12]
    7c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7c06:	2b00      	cmp	r3, #0
    7c08:	bf14      	ite	ne
    7c0a:	2301      	movne	r3, #1
    7c0c:	2300      	moveq	r3, #0
    7c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    7c12:	8afa      	ldrh	r2, [r7, #22]
    7c14:	6a3b      	ldr	r3, [r7, #32]
    7c16:	429a      	cmp	r2, r3
    7c18:	d201      	bcs.n	7c1e <usb_d_ep_transfer+0x10e>
				len = req_len;
    7c1a:	8afb      	ldrh	r3, [r7, #22]
    7c1c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    7c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7c22:	2b00      	cmp	r3, #0
    7c24:	d008      	beq.n	7c38 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    7c26:	8afa      	ldrh	r2, [r7, #22]
    7c28:	6a3b      	ldr	r3, [r7, #32]
    7c2a:	429a      	cmp	r2, r3
    7c2c:	bf8c      	ite	hi
    7c2e:	2301      	movhi	r3, #1
    7c30:	2300      	movls	r3, #0
    7c32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    7c36:	e002      	b.n	7c3e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    7c38:	2300      	movs	r3, #0
    7c3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    7c3e:	687b      	ldr	r3, [r7, #4]
    7c40:	7a18      	ldrb	r0, [r3, #8]
    7c42:	687b      	ldr	r3, [r7, #4]
    7c44:	681a      	ldr	r2, [r3, #0]
    7c46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    7c4a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    7c4e:	9300      	str	r3, [sp, #0]
    7c50:	6a3b      	ldr	r3, [r7, #32]
    7c52:	4c08      	ldr	r4, [pc, #32]	; (7c74 <usb_d_ep_transfer+0x164>)
    7c54:	47a0      	blx	r4
    7c56:	6138      	str	r0, [r7, #16]
	return rc;
    7c58:	693b      	ldr	r3, [r7, #16]
}
    7c5a:	4618      	mov	r0, r3
    7c5c:	372c      	adds	r7, #44	; 0x2c
    7c5e:	46bd      	mov	sp, r7
    7c60:	bd90      	pop	{r4, r7, pc}
    7c62:	bf00      	nop
    7c64:	000074cd 	.word	0x000074cd
    7c68:	200085cc 	.word	0x200085cc
    7c6c:	000109d5 	.word	0x000109d5
    7c70:	000109fb 	.word	0x000109fb
    7c74:	0000754d 	.word	0x0000754d

00007c78 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    7c78:	b580      	push	{r7, lr}
    7c7a:	b084      	sub	sp, #16
    7c7c:	af00      	add	r7, sp, #0
    7c7e:	4603      	mov	r3, r0
    7c80:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7c82:	79fb      	ldrb	r3, [r7, #7]
    7c84:	4618      	mov	r0, r3
    7c86:	4b0e      	ldr	r3, [pc, #56]	; (7cc0 <usb_d_ep_abort+0x48>)
    7c88:	4798      	blx	r3
    7c8a:	4603      	mov	r3, r0
    7c8c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7c92:	015b      	lsls	r3, r3, #5
    7c94:	4a0b      	ldr	r2, [pc, #44]	; (7cc4 <usb_d_ep_abort+0x4c>)
    7c96:	4413      	add	r3, r2
    7c98:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    7c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	db0a      	blt.n	7cb8 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    7ca2:	79fb      	ldrb	r3, [r7, #7]
    7ca4:	4618      	mov	r0, r3
    7ca6:	4b08      	ldr	r3, [pc, #32]	; (7cc8 <usb_d_ep_abort+0x50>)
    7ca8:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7caa:	68bb      	ldr	r3, [r7, #8]
    7cac:	2201      	movs	r2, #1
    7cae:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    7cb0:	68bb      	ldr	r3, [r7, #8]
    7cb2:	2204      	movs	r2, #4
    7cb4:	70da      	strb	r2, [r3, #3]
    7cb6:	e000      	b.n	7cba <usb_d_ep_abort+0x42>
		return;
    7cb8:	bf00      	nop
}
    7cba:	3710      	adds	r7, #16
    7cbc:	46bd      	mov	sp, r7
    7cbe:	bd80      	pop	{r7, pc}
    7cc0:	000074cd 	.word	0x000074cd
    7cc4:	200085cc 	.word	0x200085cc
    7cc8:	0000ff4d 	.word	0x0000ff4d

00007ccc <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    7ccc:	b580      	push	{r7, lr}
    7cce:	b086      	sub	sp, #24
    7cd0:	af00      	add	r7, sp, #0
    7cd2:	4603      	mov	r3, r0
    7cd4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7cd6:	79fb      	ldrb	r3, [r7, #7]
    7cd8:	4618      	mov	r0, r3
    7cda:	4b1a      	ldr	r3, [pc, #104]	; (7d44 <_usb_d_ep_halt_clr+0x78>)
    7cdc:	4798      	blx	r3
    7cde:	4603      	mov	r3, r0
    7ce0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7ce6:	015b      	lsls	r3, r3, #5
    7ce8:	4a17      	ldr	r2, [pc, #92]	; (7d48 <_usb_d_ep_halt_clr+0x7c>)
    7cea:	4413      	add	r3, r2
    7cec:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    7cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7cf2:	2b00      	cmp	r3, #0
    7cf4:	da02      	bge.n	7cfc <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    7cf6:	f06f 0311 	mvn.w	r3, #17
    7cfa:	e01f      	b.n	7d3c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    7cfc:	79fb      	ldrb	r3, [r7, #7]
    7cfe:	2102      	movs	r1, #2
    7d00:	4618      	mov	r0, r3
    7d02:	4b12      	ldr	r3, [pc, #72]	; (7d4c <_usb_d_ep_halt_clr+0x80>)
    7d04:	4798      	blx	r3
    7d06:	4603      	mov	r3, r0
    7d08:	2b00      	cmp	r3, #0
    7d0a:	d016      	beq.n	7d3a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7d0c:	79fb      	ldrb	r3, [r7, #7]
    7d0e:	2100      	movs	r1, #0
    7d10:	4618      	mov	r0, r3
    7d12:	4b0e      	ldr	r3, [pc, #56]	; (7d4c <_usb_d_ep_halt_clr+0x80>)
    7d14:	4798      	blx	r3
    7d16:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    7d18:	68fb      	ldr	r3, [r7, #12]
    7d1a:	2b00      	cmp	r3, #0
    7d1c:	da01      	bge.n	7d22 <_usb_d_ep_halt_clr+0x56>
			return rc;
    7d1e:	68fb      	ldr	r3, [r7, #12]
    7d20:	e00c      	b.n	7d3c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7d22:	693b      	ldr	r3, [r7, #16]
    7d24:	2201      	movs	r2, #1
    7d26:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    7d28:	693b      	ldr	r3, [r7, #16]
    7d2a:	2203      	movs	r2, #3
    7d2c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    7d2e:	693b      	ldr	r3, [r7, #16]
    7d30:	69db      	ldr	r3, [r3, #28]
    7d32:	79f8      	ldrb	r0, [r7, #7]
    7d34:	2200      	movs	r2, #0
    7d36:	2103      	movs	r1, #3
    7d38:	4798      	blx	r3
	}
	return ERR_NONE;
    7d3a:	2300      	movs	r3, #0
}
    7d3c:	4618      	mov	r0, r3
    7d3e:	3718      	adds	r7, #24
    7d40:	46bd      	mov	sp, r7
    7d42:	bd80      	pop	{r7, pc}
    7d44:	000074cd 	.word	0x000074cd
    7d48:	200085cc 	.word	0x200085cc
    7d4c:	0000fb59 	.word	0x0000fb59

00007d50 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    7d50:	b580      	push	{r7, lr}
    7d52:	b082      	sub	sp, #8
    7d54:	af00      	add	r7, sp, #0
    7d56:	4603      	mov	r3, r0
    7d58:	460a      	mov	r2, r1
    7d5a:	71fb      	strb	r3, [r7, #7]
    7d5c:	4613      	mov	r3, r2
    7d5e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    7d60:	79bb      	ldrb	r3, [r7, #6]
    7d62:	2b00      	cmp	r3, #0
    7d64:	d105      	bne.n	7d72 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    7d66:	79fb      	ldrb	r3, [r7, #7]
    7d68:	4618      	mov	r0, r3
    7d6a:	4b0c      	ldr	r3, [pc, #48]	; (7d9c <usb_d_ep_halt+0x4c>)
    7d6c:	4798      	blx	r3
    7d6e:	4603      	mov	r3, r0
    7d70:	e00f      	b.n	7d92 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    7d72:	79bb      	ldrb	r3, [r7, #6]
    7d74:	2b01      	cmp	r3, #1
    7d76:	d106      	bne.n	7d86 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7d78:	79fb      	ldrb	r3, [r7, #7]
    7d7a:	2101      	movs	r1, #1
    7d7c:	4618      	mov	r0, r3
    7d7e:	4b08      	ldr	r3, [pc, #32]	; (7da0 <usb_d_ep_halt+0x50>)
    7d80:	4798      	blx	r3
    7d82:	4603      	mov	r3, r0
    7d84:	e005      	b.n	7d92 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    7d86:	79fb      	ldrb	r3, [r7, #7]
    7d88:	2102      	movs	r1, #2
    7d8a:	4618      	mov	r0, r3
    7d8c:	4b04      	ldr	r3, [pc, #16]	; (7da0 <usb_d_ep_halt+0x50>)
    7d8e:	4798      	blx	r3
    7d90:	4603      	mov	r3, r0
	}
}
    7d92:	4618      	mov	r0, r3
    7d94:	3708      	adds	r7, #8
    7d96:	46bd      	mov	sp, r7
    7d98:	bd80      	pop	{r7, pc}
    7d9a:	bf00      	nop
    7d9c:	00007ccd 	.word	0x00007ccd
    7da0:	0000fb59 	.word	0x0000fb59

00007da4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    7da4:	b580      	push	{r7, lr}
    7da6:	b086      	sub	sp, #24
    7da8:	af00      	add	r7, sp, #0
    7daa:	4603      	mov	r3, r0
    7dac:	603a      	str	r2, [r7, #0]
    7dae:	71fb      	strb	r3, [r7, #7]
    7db0:	460b      	mov	r3, r1
    7db2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7db4:	79fb      	ldrb	r3, [r7, #7]
    7db6:	4618      	mov	r0, r3
    7db8:	4b16      	ldr	r3, [pc, #88]	; (7e14 <usb_d_ep_register_callback+0x70>)
    7dba:	4798      	blx	r3
    7dbc:	4603      	mov	r3, r0
    7dbe:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7dc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7dc4:	015b      	lsls	r3, r3, #5
    7dc6:	4a14      	ldr	r2, [pc, #80]	; (7e18 <usb_d_ep_register_callback+0x74>)
    7dc8:	4413      	add	r3, r2
    7dca:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    7dcc:	683b      	ldr	r3, [r7, #0]
    7dce:	2b00      	cmp	r3, #0
    7dd0:	d001      	beq.n	7dd6 <usb_d_ep_register_callback+0x32>
    7dd2:	683b      	ldr	r3, [r7, #0]
    7dd4:	e000      	b.n	7dd8 <usb_d_ep_register_callback+0x34>
    7dd6:	4b11      	ldr	r3, [pc, #68]	; (7e1c <usb_d_ep_register_callback+0x78>)
    7dd8:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    7dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7dde:	2b00      	cmp	r3, #0
    7de0:	db13      	blt.n	7e0a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    7de2:	79bb      	ldrb	r3, [r7, #6]
    7de4:	2b01      	cmp	r3, #1
    7de6:	d008      	beq.n	7dfa <usb_d_ep_register_callback+0x56>
    7de8:	2b02      	cmp	r3, #2
    7dea:	d00a      	beq.n	7e02 <usb_d_ep_register_callback+0x5e>
    7dec:	2b00      	cmp	r3, #0
    7dee:	d000      	beq.n	7df2 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    7df0:	e00c      	b.n	7e0c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    7df2:	693b      	ldr	r3, [r7, #16]
    7df4:	68fa      	ldr	r2, [r7, #12]
    7df6:	615a      	str	r2, [r3, #20]
		break;
    7df8:	e008      	b.n	7e0c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    7dfa:	693b      	ldr	r3, [r7, #16]
    7dfc:	68fa      	ldr	r2, [r7, #12]
    7dfe:	619a      	str	r2, [r3, #24]
		break;
    7e00:	e004      	b.n	7e0c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    7e02:	693b      	ldr	r3, [r7, #16]
    7e04:	68fa      	ldr	r2, [r7, #12]
    7e06:	61da      	str	r2, [r3, #28]
		break;
    7e08:	e000      	b.n	7e0c <usb_d_ep_register_callback+0x68>
		return;
    7e0a:	bf00      	nop
	}
}
    7e0c:	3718      	adds	r7, #24
    7e0e:	46bd      	mov	sp, r7
    7e10:	bd80      	pop	{r7, pc}
    7e12:	bf00      	nop
    7e14:	000074cd 	.word	0x000074cd
    7e18:	200085cc 	.word	0x200085cc
    7e1c:	000075a1 	.word	0x000075a1

00007e20 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    7e20:	b480      	push	{r7}
    7e22:	b085      	sub	sp, #20
    7e24:	af00      	add	r7, sp, #0
    7e26:	4603      	mov	r3, r0
    7e28:	60b9      	str	r1, [r7, #8]
    7e2a:	607a      	str	r2, [r7, #4]
    7e2c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    7e2e:	7bfb      	ldrb	r3, [r7, #15]
    7e30:	f083 0301 	eor.w	r3, r3, #1
    7e34:	b2db      	uxtb	r3, r3
    7e36:	2b00      	cmp	r3, #0
    7e38:	d000      	beq.n	7e3c <assert+0x1c>
		__asm("BKPT #0");
    7e3a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    7e3c:	bf00      	nop
    7e3e:	3714      	adds	r7, #20
    7e40:	46bd      	mov	sp, r7
    7e42:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e46:	4770      	bx	lr

00007e48 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    7e48:	b480      	push	{r7}
    7e4a:	b085      	sub	sp, #20
    7e4c:	af00      	add	r7, sp, #0
    7e4e:	6078      	str	r0, [r7, #4]
    7e50:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    7e52:	687b      	ldr	r3, [r7, #4]
    7e54:	681b      	ldr	r3, [r3, #0]
    7e56:	60fb      	str	r3, [r7, #12]
    7e58:	e008      	b.n	7e6c <is_list_element+0x24>
		if (it == element) {
    7e5a:	68fa      	ldr	r2, [r7, #12]
    7e5c:	683b      	ldr	r3, [r7, #0]
    7e5e:	429a      	cmp	r2, r3
    7e60:	d101      	bne.n	7e66 <is_list_element+0x1e>
			return true;
    7e62:	2301      	movs	r3, #1
    7e64:	e006      	b.n	7e74 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    7e66:	68fb      	ldr	r3, [r7, #12]
    7e68:	681b      	ldr	r3, [r3, #0]
    7e6a:	60fb      	str	r3, [r7, #12]
    7e6c:	68fb      	ldr	r3, [r7, #12]
    7e6e:	2b00      	cmp	r3, #0
    7e70:	d1f3      	bne.n	7e5a <is_list_element+0x12>
		}
	}

	return false;
    7e72:	2300      	movs	r3, #0
}
    7e74:	4618      	mov	r0, r3
    7e76:	3714      	adds	r7, #20
    7e78:	46bd      	mov	sp, r7
    7e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e7e:	4770      	bx	lr

00007e80 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    7e80:	b580      	push	{r7, lr}
    7e82:	b082      	sub	sp, #8
    7e84:	af00      	add	r7, sp, #0
    7e86:	6078      	str	r0, [r7, #4]
    7e88:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    7e8a:	6839      	ldr	r1, [r7, #0]
    7e8c:	6878      	ldr	r0, [r7, #4]
    7e8e:	4b0f      	ldr	r3, [pc, #60]	; (7ecc <list_insert_as_head+0x4c>)
    7e90:	4798      	blx	r3
    7e92:	4603      	mov	r3, r0
    7e94:	2b00      	cmp	r3, #0
    7e96:	bf14      	ite	ne
    7e98:	2301      	movne	r3, #1
    7e9a:	2300      	moveq	r3, #0
    7e9c:	b2db      	uxtb	r3, r3
    7e9e:	f083 0301 	eor.w	r3, r3, #1
    7ea2:	b2db      	uxtb	r3, r3
    7ea4:	f003 0301 	and.w	r3, r3, #1
    7ea8:	b2db      	uxtb	r3, r3
    7eaa:	2239      	movs	r2, #57	; 0x39
    7eac:	4908      	ldr	r1, [pc, #32]	; (7ed0 <list_insert_as_head+0x50>)
    7eae:	4618      	mov	r0, r3
    7eb0:	4b08      	ldr	r3, [pc, #32]	; (7ed4 <list_insert_as_head+0x54>)
    7eb2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    7eb4:	687b      	ldr	r3, [r7, #4]
    7eb6:	681a      	ldr	r2, [r3, #0]
    7eb8:	683b      	ldr	r3, [r7, #0]
    7eba:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    7ebc:	687b      	ldr	r3, [r7, #4]
    7ebe:	683a      	ldr	r2, [r7, #0]
    7ec0:	601a      	str	r2, [r3, #0]
}
    7ec2:	bf00      	nop
    7ec4:	3708      	adds	r7, #8
    7ec6:	46bd      	mov	sp, r7
    7ec8:	bd80      	pop	{r7, pc}
    7eca:	bf00      	nop
    7ecc:	00007e49 	.word	0x00007e49
    7ed0:	000219fc 	.word	0x000219fc
    7ed4:	00007e21 	.word	0x00007e21

00007ed8 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    7ed8:	b480      	push	{r7}
    7eda:	b083      	sub	sp, #12
    7edc:	af00      	add	r7, sp, #0
    7ede:	6078      	str	r0, [r7, #4]
    7ee0:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    7ee2:	687b      	ldr	r3, [r7, #4]
    7ee4:	681a      	ldr	r2, [r3, #0]
    7ee6:	683b      	ldr	r3, [r7, #0]
    7ee8:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    7eea:	687b      	ldr	r3, [r7, #4]
    7eec:	683a      	ldr	r2, [r7, #0]
    7eee:	601a      	str	r2, [r3, #0]
}
    7ef0:	bf00      	nop
    7ef2:	370c      	adds	r7, #12
    7ef4:	46bd      	mov	sp, r7
    7ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7efa:	4770      	bx	lr

00007efc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    7efc:	b580      	push	{r7, lr}
    7efe:	b084      	sub	sp, #16
    7f00:	af00      	add	r7, sp, #0
    7f02:	6078      	str	r0, [r7, #4]
    7f04:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    7f06:	687b      	ldr	r3, [r7, #4]
    7f08:	681b      	ldr	r3, [r3, #0]
    7f0a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    7f0c:	6839      	ldr	r1, [r7, #0]
    7f0e:	6878      	ldr	r0, [r7, #4]
    7f10:	4b16      	ldr	r3, [pc, #88]	; (7f6c <list_insert_at_end+0x70>)
    7f12:	4798      	blx	r3
    7f14:	4603      	mov	r3, r0
    7f16:	2b00      	cmp	r3, #0
    7f18:	bf14      	ite	ne
    7f1a:	2301      	movne	r3, #1
    7f1c:	2300      	moveq	r3, #0
    7f1e:	b2db      	uxtb	r3, r3
    7f20:	f083 0301 	eor.w	r3, r3, #1
    7f24:	b2db      	uxtb	r3, r3
    7f26:	f003 0301 	and.w	r3, r3, #1
    7f2a:	b2db      	uxtb	r3, r3
    7f2c:	224f      	movs	r2, #79	; 0x4f
    7f2e:	4910      	ldr	r1, [pc, #64]	; (7f70 <list_insert_at_end+0x74>)
    7f30:	4618      	mov	r0, r3
    7f32:	4b10      	ldr	r3, [pc, #64]	; (7f74 <list_insert_at_end+0x78>)
    7f34:	4798      	blx	r3

	if (!list->head) {
    7f36:	687b      	ldr	r3, [r7, #4]
    7f38:	681b      	ldr	r3, [r3, #0]
    7f3a:	2b00      	cmp	r3, #0
    7f3c:	d109      	bne.n	7f52 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    7f3e:	687b      	ldr	r3, [r7, #4]
    7f40:	683a      	ldr	r2, [r7, #0]
    7f42:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    7f44:	683b      	ldr	r3, [r7, #0]
    7f46:	2200      	movs	r2, #0
    7f48:	601a      	str	r2, [r3, #0]
		return;
    7f4a:	e00c      	b.n	7f66 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    7f4c:	68fb      	ldr	r3, [r7, #12]
    7f4e:	681b      	ldr	r3, [r3, #0]
    7f50:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    7f52:	68fb      	ldr	r3, [r7, #12]
    7f54:	681b      	ldr	r3, [r3, #0]
    7f56:	2b00      	cmp	r3, #0
    7f58:	d1f8      	bne.n	7f4c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    7f5a:	68fb      	ldr	r3, [r7, #12]
    7f5c:	683a      	ldr	r2, [r7, #0]
    7f5e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    7f60:	683b      	ldr	r3, [r7, #0]
    7f62:	2200      	movs	r2, #0
    7f64:	601a      	str	r2, [r3, #0]
}
    7f66:	3710      	adds	r7, #16
    7f68:	46bd      	mov	sp, r7
    7f6a:	bd80      	pop	{r7, pc}
    7f6c:	00007e49 	.word	0x00007e49
    7f70:	000219fc 	.word	0x000219fc
    7f74:	00007e21 	.word	0x00007e21

00007f78 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    7f78:	b480      	push	{r7}
    7f7a:	b085      	sub	sp, #20
    7f7c:	af00      	add	r7, sp, #0
    7f7e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	681b      	ldr	r3, [r3, #0]
    7f84:	2b00      	cmp	r3, #0
    7f86:	d009      	beq.n	7f9c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    7f88:	687b      	ldr	r3, [r7, #4]
    7f8a:	681b      	ldr	r3, [r3, #0]
    7f8c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    7f8e:	687b      	ldr	r3, [r7, #4]
    7f90:	681b      	ldr	r3, [r3, #0]
    7f92:	681a      	ldr	r2, [r3, #0]
    7f94:	687b      	ldr	r3, [r7, #4]
    7f96:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    7f98:	68fb      	ldr	r3, [r7, #12]
    7f9a:	e000      	b.n	7f9e <list_remove_head+0x26>
	}

	return NULL;
    7f9c:	2300      	movs	r3, #0
}
    7f9e:	4618      	mov	r0, r3
    7fa0:	3714      	adds	r7, #20
    7fa2:	46bd      	mov	sp, r7
    7fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fa8:	4770      	bx	lr

00007faa <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    7faa:	b480      	push	{r7}
    7fac:	b085      	sub	sp, #20
    7fae:	af00      	add	r7, sp, #0
    7fb0:	6078      	str	r0, [r7, #4]
    7fb2:	6039      	str	r1, [r7, #0]
	if (!element) {
    7fb4:	683b      	ldr	r3, [r7, #0]
    7fb6:	2b00      	cmp	r3, #0
    7fb8:	d101      	bne.n	7fbe <list_delete_element+0x14>
		return false;
    7fba:	2300      	movs	r3, #0
    7fbc:	e024      	b.n	8008 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    7fbe:	687b      	ldr	r3, [r7, #4]
    7fc0:	681a      	ldr	r2, [r3, #0]
    7fc2:	683b      	ldr	r3, [r7, #0]
    7fc4:	429a      	cmp	r2, r3
    7fc6:	d106      	bne.n	7fd6 <list_delete_element+0x2c>
		list->head = list->head->next;
    7fc8:	687b      	ldr	r3, [r7, #4]
    7fca:	681b      	ldr	r3, [r3, #0]
    7fcc:	681a      	ldr	r2, [r3, #0]
    7fce:	687b      	ldr	r3, [r7, #4]
    7fd0:	601a      	str	r2, [r3, #0]
		return true;
    7fd2:	2301      	movs	r3, #1
    7fd4:	e018      	b.n	8008 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    7fd6:	687b      	ldr	r3, [r7, #4]
    7fd8:	681b      	ldr	r3, [r3, #0]
    7fda:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    7fdc:	e002      	b.n	7fe4 <list_delete_element+0x3a>
			it = it->next;
    7fde:	68fb      	ldr	r3, [r7, #12]
    7fe0:	681b      	ldr	r3, [r3, #0]
    7fe2:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    7fe4:	68fb      	ldr	r3, [r7, #12]
    7fe6:	2b00      	cmp	r3, #0
    7fe8:	d004      	beq.n	7ff4 <list_delete_element+0x4a>
    7fea:	68fb      	ldr	r3, [r7, #12]
    7fec:	681a      	ldr	r2, [r3, #0]
    7fee:	683b      	ldr	r3, [r7, #0]
    7ff0:	429a      	cmp	r2, r3
    7ff2:	d1f4      	bne.n	7fde <list_delete_element+0x34>
		}
		if (it) {
    7ff4:	68fb      	ldr	r3, [r7, #12]
    7ff6:	2b00      	cmp	r3, #0
    7ff8:	d005      	beq.n	8006 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    7ffa:	683b      	ldr	r3, [r7, #0]
    7ffc:	681a      	ldr	r2, [r3, #0]
    7ffe:	68fb      	ldr	r3, [r7, #12]
    8000:	601a      	str	r2, [r3, #0]
			return true;
    8002:	2301      	movs	r3, #1
    8004:	e000      	b.n	8008 <list_delete_element+0x5e>
		}
	}

	return false;
    8006:	2300      	movs	r3, #0
}
    8008:	4618      	mov	r0, r3
    800a:	3714      	adds	r7, #20
    800c:	46bd      	mov	sp, r7
    800e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8012:	4770      	bx	lr

00008014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    8014:	b480      	push	{r7}
    8016:	b083      	sub	sp, #12
    8018:	af00      	add	r7, sp, #0
    801a:	4603      	mov	r3, r0
    801c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    801e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8022:	2b00      	cmp	r3, #0
    8024:	db0b      	blt.n	803e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8026:	4909      	ldr	r1, [pc, #36]	; (804c <__NVIC_EnableIRQ+0x38>)
    8028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    802c:	095b      	lsrs	r3, r3, #5
    802e:	88fa      	ldrh	r2, [r7, #6]
    8030:	f002 021f 	and.w	r2, r2, #31
    8034:	2001      	movs	r0, #1
    8036:	fa00 f202 	lsl.w	r2, r0, r2
    803a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    803e:	bf00      	nop
    8040:	370c      	adds	r7, #12
    8042:	46bd      	mov	sp, r7
    8044:	f85d 7b04 	ldr.w	r7, [sp], #4
    8048:	4770      	bx	lr
    804a:	bf00      	nop
    804c:	e000e100 	.word	0xe000e100

00008050 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    8050:	b480      	push	{r7}
    8052:	b083      	sub	sp, #12
    8054:	af00      	add	r7, sp, #0
    8056:	4603      	mov	r3, r0
    8058:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    805a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    805e:	2b00      	cmp	r3, #0
    8060:	db10      	blt.n	8084 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8062:	490b      	ldr	r1, [pc, #44]	; (8090 <__NVIC_DisableIRQ+0x40>)
    8064:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8068:	095b      	lsrs	r3, r3, #5
    806a:	88fa      	ldrh	r2, [r7, #6]
    806c:	f002 021f 	and.w	r2, r2, #31
    8070:	2001      	movs	r0, #1
    8072:	fa00 f202 	lsl.w	r2, r0, r2
    8076:	3320      	adds	r3, #32
    8078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    807c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8080:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    8084:	bf00      	nop
    8086:	370c      	adds	r7, #12
    8088:	46bd      	mov	sp, r7
    808a:	f85d 7b04 	ldr.w	r7, [sp], #4
    808e:	4770      	bx	lr
    8090:	e000e100 	.word	0xe000e100

00008094 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    8094:	b480      	push	{r7}
    8096:	b083      	sub	sp, #12
    8098:	af00      	add	r7, sp, #0
    809a:	4603      	mov	r3, r0
    809c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    809e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80a2:	2b00      	cmp	r3, #0
    80a4:	db0c      	blt.n	80c0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    80a6:	4909      	ldr	r1, [pc, #36]	; (80cc <__NVIC_ClearPendingIRQ+0x38>)
    80a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80ac:	095b      	lsrs	r3, r3, #5
    80ae:	88fa      	ldrh	r2, [r7, #6]
    80b0:	f002 021f 	and.w	r2, r2, #31
    80b4:	2001      	movs	r0, #1
    80b6:	fa00 f202 	lsl.w	r2, r0, r2
    80ba:	3360      	adds	r3, #96	; 0x60
    80bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    80c0:	bf00      	nop
    80c2:	370c      	adds	r7, #12
    80c4:	46bd      	mov	sp, r7
    80c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    80ca:	4770      	bx	lr
    80cc:	e000e100 	.word	0xe000e100

000080d0 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    80d0:	b480      	push	{r7}
    80d2:	b083      	sub	sp, #12
    80d4:	af00      	add	r7, sp, #0
    80d6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    80d8:	687b      	ldr	r3, [r7, #4]
    80da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    80dc:	095b      	lsrs	r3, r3, #5
    80de:	f003 0301 	and.w	r3, r3, #1
    80e2:	2b00      	cmp	r3, #0
    80e4:	bf14      	ite	ne
    80e6:	2301      	movne	r3, #1
    80e8:	2300      	moveq	r3, #0
    80ea:	b2db      	uxtb	r3, r3
}
    80ec:	4618      	mov	r0, r3
    80ee:	370c      	adds	r7, #12
    80f0:	46bd      	mov	sp, r7
    80f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    80f6:	4770      	bx	lr

000080f8 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    80f8:	b480      	push	{r7}
    80fa:	b083      	sub	sp, #12
    80fc:	af00      	add	r7, sp, #0
    80fe:	6078      	str	r0, [r7, #4]
    8100:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    8102:	687b      	ldr	r3, [r7, #4]
    8104:	683a      	ldr	r2, [r7, #0]
    8106:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8108:	bf00      	nop
    810a:	370c      	adds	r7, #12
    810c:	46bd      	mov	sp, r7
    810e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8112:	4770      	bx	lr

00008114 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    8114:	b480      	push	{r7}
    8116:	b083      	sub	sp, #12
    8118:	af00      	add	r7, sp, #0
    811a:	6078      	str	r0, [r7, #4]
    811c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    811e:	687b      	ldr	r3, [r7, #4]
    8120:	683a      	ldr	r2, [r7, #0]
    8122:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8124:	bf00      	nop
    8126:	370c      	adds	r7, #12
    8128:	46bd      	mov	sp, r7
    812a:	f85d 7b04 	ldr.w	r7, [sp], #4
    812e:	4770      	bx	lr

00008130 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    8130:	b480      	push	{r7}
    8132:	b083      	sub	sp, #12
    8134:	af00      	add	r7, sp, #0
    8136:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    8138:	687b      	ldr	r3, [r7, #4]
    813a:	699b      	ldr	r3, [r3, #24]
    813c:	f043 0201 	orr.w	r2, r3, #1
    8140:	687b      	ldr	r3, [r7, #4]
    8142:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8144:	bf00      	nop
    8146:	370c      	adds	r7, #12
    8148:	46bd      	mov	sp, r7
    814a:	f85d 7b04 	ldr.w	r7, [sp], #4
    814e:	4770      	bx	lr

00008150 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    8150:	b480      	push	{r7}
    8152:	b085      	sub	sp, #20
    8154:	af00      	add	r7, sp, #0
    8156:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	699b      	ldr	r3, [r3, #24]
    815c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    815e:	68fb      	ldr	r3, [r7, #12]
    8160:	f003 0301 	and.w	r3, r3, #1
    8164:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8166:	68fb      	ldr	r3, [r7, #12]
    8168:	2b00      	cmp	r3, #0
    816a:	bf14      	ite	ne
    816c:	2301      	movne	r3, #1
    816e:	2300      	moveq	r3, #0
    8170:	b2db      	uxtb	r3, r3
}
    8172:	4618      	mov	r0, r3
    8174:	3714      	adds	r7, #20
    8176:	46bd      	mov	sp, r7
    8178:	f85d 7b04 	ldr.w	r7, [sp], #4
    817c:	4770      	bx	lr

0000817e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    817e:	b480      	push	{r7}
    8180:	b083      	sub	sp, #12
    8182:	af00      	add	r7, sp, #0
    8184:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    8186:	687b      	ldr	r3, [r7, #4]
    8188:	699b      	ldr	r3, [r3, #24]
    818a:	f023 0201 	bic.w	r2, r3, #1
    818e:	687b      	ldr	r3, [r7, #4]
    8190:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8192:	bf00      	nop
    8194:	370c      	adds	r7, #12
    8196:	46bd      	mov	sp, r7
    8198:	f85d 7b04 	ldr.w	r7, [sp], #4
    819c:	4770      	bx	lr

0000819e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    819e:	b480      	push	{r7}
    81a0:	b083      	sub	sp, #12
    81a2:	af00      	add	r7, sp, #0
    81a4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    81a6:	687b      	ldr	r3, [r7, #4]
    81a8:	699b      	ldr	r3, [r3, #24]
    81aa:	f043 0202 	orr.w	r2, r3, #2
    81ae:	687b      	ldr	r3, [r7, #4]
    81b0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    81b2:	bf00      	nop
    81b4:	370c      	adds	r7, #12
    81b6:	46bd      	mov	sp, r7
    81b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    81bc:	4770      	bx	lr

000081be <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    81be:	b480      	push	{r7}
    81c0:	b083      	sub	sp, #12
    81c2:	af00      	add	r7, sp, #0
    81c4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    81c6:	687b      	ldr	r3, [r7, #4]
    81c8:	699b      	ldr	r3, [r3, #24]
    81ca:	f023 0202 	bic.w	r2, r3, #2
    81ce:	687b      	ldr	r3, [r7, #4]
    81d0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    81d2:	bf00      	nop
    81d4:	370c      	adds	r7, #12
    81d6:	46bd      	mov	sp, r7
    81d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    81dc:	4770      	bx	lr

000081de <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    81de:	b480      	push	{r7}
    81e0:	b083      	sub	sp, #12
    81e2:	af00      	add	r7, sp, #0
    81e4:	6078      	str	r0, [r7, #4]
    81e6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    81e8:	687b      	ldr	r3, [r7, #4]
    81ea:	699a      	ldr	r2, [r3, #24]
    81ec:	683b      	ldr	r3, [r7, #0]
    81ee:	431a      	orrs	r2, r3
    81f0:	687b      	ldr	r3, [r7, #4]
    81f2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    81f4:	bf00      	nop
    81f6:	370c      	adds	r7, #12
    81f8:	46bd      	mov	sp, r7
    81fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    81fe:	4770      	bx	lr

00008200 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    8200:	b480      	push	{r7}
    8202:	b083      	sub	sp, #12
    8204:	af00      	add	r7, sp, #0
    8206:	6078      	str	r0, [r7, #4]
    8208:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    820a:	687b      	ldr	r3, [r7, #4]
    820c:	683a      	ldr	r2, [r7, #0]
    820e:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8210:	bf00      	nop
    8212:	370c      	adds	r7, #12
    8214:	46bd      	mov	sp, r7
    8216:	f85d 7b04 	ldr.w	r7, [sp], #4
    821a:	4770      	bx	lr

0000821c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    821c:	b480      	push	{r7}
    821e:	b083      	sub	sp, #12
    8220:	af00      	add	r7, sp, #0
    8222:	6078      	str	r0, [r7, #4]
    8224:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    8226:	687b      	ldr	r3, [r7, #4]
    8228:	683a      	ldr	r2, [r7, #0]
    822a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    822c:	bf00      	nop
    822e:	370c      	adds	r7, #12
    8230:	46bd      	mov	sp, r7
    8232:	f85d 7b04 	ldr.w	r7, [sp], #4
    8236:	4770      	bx	lr

00008238 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    8238:	b480      	push	{r7}
    823a:	b083      	sub	sp, #12
    823c:	af00      	add	r7, sp, #0
    823e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    8240:	687b      	ldr	r3, [r7, #4]
    8242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    8244:	4618      	mov	r0, r3
    8246:	370c      	adds	r7, #12
    8248:	46bd      	mov	sp, r7
    824a:	f85d 7b04 	ldr.w	r7, [sp], #4
    824e:	4770      	bx	lr

00008250 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    8250:	b480      	push	{r7}
    8252:	b083      	sub	sp, #12
    8254:	af00      	add	r7, sp, #0
    8256:	6078      	str	r0, [r7, #4]
    8258:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    825a:	687b      	ldr	r3, [r7, #4]
    825c:	683a      	ldr	r2, [r7, #0]
    825e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    8260:	bf00      	nop
    8262:	370c      	adds	r7, #12
    8264:	46bd      	mov	sp, r7
    8266:	f85d 7b04 	ldr.w	r7, [sp], #4
    826a:	4770      	bx	lr

0000826c <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    826c:	b480      	push	{r7}
    826e:	b083      	sub	sp, #12
    8270:	af00      	add	r7, sp, #0
    8272:	6078      	str	r0, [r7, #4]
    8274:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    8276:	687b      	ldr	r3, [r7, #4]
    8278:	683a      	ldr	r2, [r7, #0]
    827a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    827e:	bf00      	nop
    8280:	370c      	adds	r7, #12
    8282:	46bd      	mov	sp, r7
    8284:	f85d 7b04 	ldr.w	r7, [sp], #4
    8288:	4770      	bx	lr

0000828a <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    828a:	b480      	push	{r7}
    828c:	b083      	sub	sp, #12
    828e:	af00      	add	r7, sp, #0
    8290:	6078      	str	r0, [r7, #4]
    8292:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    8294:	687b      	ldr	r3, [r7, #4]
    8296:	683a      	ldr	r2, [r7, #0]
    8298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    829c:	bf00      	nop
    829e:	370c      	adds	r7, #12
    82a0:	46bd      	mov	sp, r7
    82a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    82a6:	4770      	bx	lr

000082a8 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    82a8:	b480      	push	{r7}
    82aa:	b083      	sub	sp, #12
    82ac:	af00      	add	r7, sp, #0
    82ae:	6078      	str	r0, [r7, #4]
    82b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    82b2:	687b      	ldr	r3, [r7, #4]
    82b4:	683a      	ldr	r2, [r7, #0]
    82b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    82ba:	bf00      	nop
    82bc:	370c      	adds	r7, #12
    82be:	46bd      	mov	sp, r7
    82c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    82c4:	4770      	bx	lr

000082c6 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    82c6:	b480      	push	{r7}
    82c8:	b083      	sub	sp, #12
    82ca:	af00      	add	r7, sp, #0
    82cc:	6078      	str	r0, [r7, #4]
    82ce:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    82d0:	687b      	ldr	r3, [r7, #4]
    82d2:	683a      	ldr	r2, [r7, #0]
    82d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    82d8:	bf00      	nop
    82da:	370c      	adds	r7, #12
    82dc:	46bd      	mov	sp, r7
    82de:	f85d 7b04 	ldr.w	r7, [sp], #4
    82e2:	4770      	bx	lr

000082e4 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    82e4:	b480      	push	{r7}
    82e6:	b083      	sub	sp, #12
    82e8:	af00      	add	r7, sp, #0
    82ea:	6078      	str	r0, [r7, #4]
    82ec:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    82ee:	687b      	ldr	r3, [r7, #4]
    82f0:	683a      	ldr	r2, [r7, #0]
    82f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    82f6:	bf00      	nop
    82f8:	370c      	adds	r7, #12
    82fa:	46bd      	mov	sp, r7
    82fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8300:	4770      	bx	lr

00008302 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    8302:	b480      	push	{r7}
    8304:	b083      	sub	sp, #12
    8306:	af00      	add	r7, sp, #0
    8308:	6078      	str	r0, [r7, #4]
    830a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    830c:	687b      	ldr	r3, [r7, #4]
    830e:	683a      	ldr	r2, [r7, #0]
    8310:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    8314:	bf00      	nop
    8316:	370c      	adds	r7, #12
    8318:	46bd      	mov	sp, r7
    831a:	f85d 7b04 	ldr.w	r7, [sp], #4
    831e:	4770      	bx	lr

00008320 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    8320:	b480      	push	{r7}
    8322:	b083      	sub	sp, #12
    8324:	af00      	add	r7, sp, #0
    8326:	6078      	str	r0, [r7, #4]
    8328:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    832a:	687b      	ldr	r3, [r7, #4]
    832c:	683a      	ldr	r2, [r7, #0]
    832e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    8332:	bf00      	nop
    8334:	370c      	adds	r7, #12
    8336:	46bd      	mov	sp, r7
    8338:	f85d 7b04 	ldr.w	r7, [sp], #4
    833c:	4770      	bx	lr

0000833e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    833e:	b480      	push	{r7}
    8340:	b083      	sub	sp, #12
    8342:	af00      	add	r7, sp, #0
    8344:	6078      	str	r0, [r7, #4]
    8346:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    8348:	687b      	ldr	r3, [r7, #4]
    834a:	683a      	ldr	r2, [r7, #0]
    834c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    8350:	bf00      	nop
    8352:	370c      	adds	r7, #12
    8354:	46bd      	mov	sp, r7
    8356:	f85d 7b04 	ldr.w	r7, [sp], #4
    835a:	4770      	bx	lr

0000835c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    835c:	b480      	push	{r7}
    835e:	b083      	sub	sp, #12
    8360:	af00      	add	r7, sp, #0
    8362:	6078      	str	r0, [r7, #4]
    8364:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    8366:	687b      	ldr	r3, [r7, #4]
    8368:	683a      	ldr	r2, [r7, #0]
    836a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    836e:	bf00      	nop
    8370:	370c      	adds	r7, #12
    8372:	46bd      	mov	sp, r7
    8374:	f85d 7b04 	ldr.w	r7, [sp], #4
    8378:	4770      	bx	lr
	...

0000837c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    837c:	b580      	push	{r7, lr}
    837e:	b082      	sub	sp, #8
    8380:	af00      	add	r7, sp, #0
    8382:	6078      	str	r0, [r7, #4]
    8384:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    8386:	687b      	ldr	r3, [r7, #4]
    8388:	683a      	ldr	r2, [r7, #0]
    838a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    838c:	687b      	ldr	r3, [r7, #4]
    838e:	681b      	ldr	r3, [r3, #0]
    8390:	4618      	mov	r0, r3
    8392:	4b55      	ldr	r3, [pc, #340]	; (84e8 <_can_async_init+0x16c>)
    8394:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    8396:	bf00      	nop
    8398:	687b      	ldr	r3, [r7, #4]
    839a:	681b      	ldr	r3, [r3, #0]
    839c:	4618      	mov	r0, r3
    839e:	4b53      	ldr	r3, [pc, #332]	; (84ec <_can_async_init+0x170>)
    83a0:	4798      	blx	r3
    83a2:	4603      	mov	r3, r0
    83a4:	f083 0301 	eor.w	r3, r3, #1
    83a8:	b2db      	uxtb	r3, r3
    83aa:	2b00      	cmp	r3, #0
    83ac:	d1f4      	bne.n	8398 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    83ae:	687b      	ldr	r3, [r7, #4]
    83b0:	681b      	ldr	r3, [r3, #0]
    83b2:	4618      	mov	r0, r3
    83b4:	4b4e      	ldr	r3, [pc, #312]	; (84f0 <_can_async_init+0x174>)
    83b6:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    83b8:	683b      	ldr	r3, [r7, #0]
    83ba:	4a4e      	ldr	r2, [pc, #312]	; (84f4 <_can_async_init+0x178>)
    83bc:	4293      	cmp	r3, r2
    83be:	d17a      	bne.n	84b6 <_can_async_init+0x13a>
		_can1_dev    = dev;
    83c0:	4a4d      	ldr	r2, [pc, #308]	; (84f8 <_can_async_init+0x17c>)
    83c2:	687b      	ldr	r3, [r7, #4]
    83c4:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	4a4c      	ldr	r2, [pc, #304]	; (84fc <_can_async_init+0x180>)
    83ca:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    83cc:	687b      	ldr	r3, [r7, #4]
    83ce:	681b      	ldr	r3, [r3, #0]
    83d0:	f44f 7140 	mov.w	r1, #768	; 0x300
    83d4:	4618      	mov	r0, r3
    83d6:	4b4a      	ldr	r3, [pc, #296]	; (8500 <_can_async_init+0x184>)
    83d8:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    83da:	687b      	ldr	r3, [r7, #4]
    83dc:	681b      	ldr	r3, [r3, #0]
    83de:	2102      	movs	r1, #2
    83e0:	4618      	mov	r0, r3
    83e2:	4b48      	ldr	r3, [pc, #288]	; (8504 <_can_async_init+0x188>)
    83e4:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    83e6:	687b      	ldr	r3, [r7, #4]
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	4947      	ldr	r1, [pc, #284]	; (8508 <_can_async_init+0x18c>)
    83ec:	4618      	mov	r0, r3
    83ee:	4b47      	ldr	r3, [pc, #284]	; (850c <_can_async_init+0x190>)
    83f0:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    83f2:	687b      	ldr	r3, [r7, #4]
    83f4:	681b      	ldr	r3, [r3, #0]
    83f6:	4946      	ldr	r1, [pc, #280]	; (8510 <_can_async_init+0x194>)
    83f8:	4618      	mov	r0, r3
    83fa:	4b46      	ldr	r3, [pc, #280]	; (8514 <_can_async_init+0x198>)
    83fc:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    83fe:	687b      	ldr	r3, [r7, #4]
    8400:	681a      	ldr	r2, [r3, #0]
    8402:	4b45      	ldr	r3, [pc, #276]	; (8518 <_can_async_init+0x19c>)
    8404:	b29b      	uxth	r3, r3
    8406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    840a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    840e:	4619      	mov	r1, r3
    8410:	4610      	mov	r0, r2
    8412:	4b42      	ldr	r3, [pc, #264]	; (851c <_can_async_init+0x1a0>)
    8414:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    8416:	687b      	ldr	r3, [r7, #4]
    8418:	681b      	ldr	r3, [r3, #0]
    841a:	2107      	movs	r1, #7
    841c:	4618      	mov	r0, r3
    841e:	4b40      	ldr	r3, [pc, #256]	; (8520 <_can_async_init+0x1a4>)
    8420:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    8422:	687b      	ldr	r3, [r7, #4]
    8424:	681b      	ldr	r3, [r3, #0]
    8426:	2107      	movs	r1, #7
    8428:	4618      	mov	r0, r3
    842a:	4b3e      	ldr	r3, [pc, #248]	; (8524 <_can_async_init+0x1a8>)
    842c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    842e:	687b      	ldr	r3, [r7, #4]
    8430:	681a      	ldr	r2, [r3, #0]
    8432:	4b3d      	ldr	r3, [pc, #244]	; (8528 <_can_async_init+0x1ac>)
    8434:	b29b      	uxth	r3, r3
    8436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    843a:	4619      	mov	r1, r3
    843c:	4610      	mov	r0, r2
    843e:	4b3b      	ldr	r3, [pc, #236]	; (852c <_can_async_init+0x1b0>)
    8440:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    8442:	687b      	ldr	r3, [r7, #4]
    8444:	681a      	ldr	r2, [r3, #0]
    8446:	4b3a      	ldr	r3, [pc, #232]	; (8530 <_can_async_init+0x1b4>)
    8448:	b29b      	uxth	r3, r3
    844a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    844e:	4619      	mov	r1, r3
    8450:	4610      	mov	r0, r2
    8452:	4b38      	ldr	r3, [pc, #224]	; (8534 <_can_async_init+0x1b8>)
    8454:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    8456:	687b      	ldr	r3, [r7, #4]
    8458:	681b      	ldr	r3, [r3, #0]
    845a:	2108      	movs	r1, #8
    845c:	4618      	mov	r0, r3
    845e:	4b36      	ldr	r3, [pc, #216]	; (8538 <_can_async_init+0x1bc>)
    8460:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    8462:	687b      	ldr	r3, [r7, #4]
    8464:	681a      	ldr	r2, [r3, #0]
    8466:	4b35      	ldr	r3, [pc, #212]	; (853c <_can_async_init+0x1c0>)
    8468:	b29b      	uxth	r3, r3
    846a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    846e:	4619      	mov	r1, r3
    8470:	4610      	mov	r0, r2
    8472:	4b33      	ldr	r3, [pc, #204]	; (8540 <_can_async_init+0x1c4>)
    8474:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    8476:	687b      	ldr	r3, [r7, #4]
    8478:	681a      	ldr	r2, [r3, #0]
    847a:	4b32      	ldr	r3, [pc, #200]	; (8544 <_can_async_init+0x1c8>)
    847c:	b29b      	uxth	r3, r3
    847e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8482:	4619      	mov	r1, r3
    8484:	4610      	mov	r0, r2
    8486:	4b30      	ldr	r3, [pc, #192]	; (8548 <_can_async_init+0x1cc>)
    8488:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    848a:	687b      	ldr	r3, [r7, #4]
    848c:	681b      	ldr	r3, [r3, #0]
    848e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    8492:	4618      	mov	r0, r3
    8494:	4b2d      	ldr	r3, [pc, #180]	; (854c <_can_async_init+0x1d0>)
    8496:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    8498:	204f      	movs	r0, #79	; 0x4f
    849a:	4b2d      	ldr	r3, [pc, #180]	; (8550 <_can_async_init+0x1d4>)
    849c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    849e:	204f      	movs	r0, #79	; 0x4f
    84a0:	4b2c      	ldr	r3, [pc, #176]	; (8554 <_can_async_init+0x1d8>)
    84a2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    84a4:	204f      	movs	r0, #79	; 0x4f
    84a6:	4b2c      	ldr	r3, [pc, #176]	; (8558 <_can_async_init+0x1dc>)
    84a8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    84aa:	687b      	ldr	r3, [r7, #4]
    84ac:	681b      	ldr	r3, [r3, #0]
    84ae:	2101      	movs	r1, #1
    84b0:	4618      	mov	r0, r3
    84b2:	4b2a      	ldr	r3, [pc, #168]	; (855c <_can_async_init+0x1e0>)
    84b4:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    84b6:	687b      	ldr	r3, [r7, #4]
    84b8:	681b      	ldr	r3, [r3, #0]
    84ba:	4618      	mov	r0, r3
    84bc:	4b28      	ldr	r3, [pc, #160]	; (8560 <_can_async_init+0x1e4>)
    84be:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    84c0:	687b      	ldr	r3, [r7, #4]
    84c2:	681b      	ldr	r3, [r3, #0]
    84c4:	4618      	mov	r0, r3
    84c6:	4b27      	ldr	r3, [pc, #156]	; (8564 <_can_async_init+0x1e8>)
    84c8:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    84ca:	bf00      	nop
    84cc:	687b      	ldr	r3, [r7, #4]
    84ce:	681b      	ldr	r3, [r3, #0]
    84d0:	4618      	mov	r0, r3
    84d2:	4b06      	ldr	r3, [pc, #24]	; (84ec <_can_async_init+0x170>)
    84d4:	4798      	blx	r3
    84d6:	4603      	mov	r3, r0
    84d8:	2b00      	cmp	r3, #0
    84da:	d1f7      	bne.n	84cc <_can_async_init+0x150>
	};

	return ERR_NONE;
    84dc:	2300      	movs	r3, #0
}
    84de:	4618      	mov	r0, r3
    84e0:	3708      	adds	r7, #8
    84e2:	46bd      	mov	sp, r7
    84e4:	bd80      	pop	{r7, pc}
    84e6:	bf00      	nop
    84e8:	00008131 	.word	0x00008131
    84ec:	00008151 	.word	0x00008151
    84f0:	0000819f 	.word	0x0000819f
    84f4:	42000400 	.word	0x42000400
    84f8:	200086ec 	.word	0x200086ec
    84fc:	20000068 	.word	0x20000068
    8500:	000081df 	.word	0x000081df
    8504:	000080f9 	.word	0x000080f9
    8508:	00010c01 	.word	0x00010c01
    850c:	00008201 	.word	0x00008201
    8510:	00010c10 	.word	0x00010c10
    8514:	00008115 	.word	0x00008115
    8518:	2000a7c4 	.word	0x2000a7c4
    851c:	000082e5 	.word	0x000082e5
    8520:	00008303 	.word	0x00008303
    8524:	0000833f 	.word	0x0000833f
    8528:	2000a77c 	.word	0x2000a77c
    852c:	00008321 	.word	0x00008321
    8530:	2000864c 	.word	0x2000864c
    8534:	0000835d 	.word	0x0000835d
    8538:	0000826d 	.word	0x0000826d
    853c:	2000865c 	.word	0x2000865c
    8540:	0000828b 	.word	0x0000828b
    8544:	200086dc 	.word	0x200086dc
    8548:	000082a9 	.word	0x000082a9
    854c:	000082c7 	.word	0x000082c7
    8550:	00008051 	.word	0x00008051
    8554:	00008095 	.word	0x00008095
    8558:	00008015 	.word	0x00008015
    855c:	00008251 	.word	0x00008251
    8560:	000081bf 	.word	0x000081bf
    8564:	0000817f 	.word	0x0000817f

00008568 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    8568:	b590      	push	{r4, r7, lr}
    856a:	b083      	sub	sp, #12
    856c:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    856e:	4b2c      	ldr	r3, [pc, #176]	; (8620 <CAN1_Handler+0xb8>)
    8570:	681b      	ldr	r3, [r3, #0]
    8572:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    8574:	687b      	ldr	r3, [r7, #4]
    8576:	681b      	ldr	r3, [r3, #0]
    8578:	4618      	mov	r0, r3
    857a:	4b2a      	ldr	r3, [pc, #168]	; (8624 <CAN1_Handler+0xbc>)
    857c:	4798      	blx	r3
    857e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    8580:	683b      	ldr	r3, [r7, #0]
    8582:	f003 0301 	and.w	r3, r3, #1
    8586:	2b00      	cmp	r3, #0
    8588:	d003      	beq.n	8592 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    858a:	687b      	ldr	r3, [r7, #4]
    858c:	689b      	ldr	r3, [r3, #8]
    858e:	6878      	ldr	r0, [r7, #4]
    8590:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    8592:	683b      	ldr	r3, [r7, #0]
    8594:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8598:	2b00      	cmp	r3, #0
    859a:	d003      	beq.n	85a4 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    859c:	687b      	ldr	r3, [r7, #4]
    859e:	685b      	ldr	r3, [r3, #4]
    85a0:	6878      	ldr	r0, [r7, #4]
    85a2:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    85a4:	683b      	ldr	r3, [r7, #0]
    85a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    85aa:	2b00      	cmp	r3, #0
    85ac:	d004      	beq.n	85b8 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    85ae:	687b      	ldr	r3, [r7, #4]
    85b0:	68db      	ldr	r3, [r3, #12]
    85b2:	2103      	movs	r1, #3
    85b4:	6878      	ldr	r0, [r7, #4]
    85b6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    85b8:	683b      	ldr	r3, [r7, #0]
    85ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    85be:	2b00      	cmp	r3, #0
    85c0:	d004      	beq.n	85cc <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    85c2:	687b      	ldr	r3, [r7, #4]
    85c4:	68db      	ldr	r3, [r3, #12]
    85c6:	2100      	movs	r1, #0
    85c8:	6878      	ldr	r0, [r7, #4]
    85ca:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    85cc:	683b      	ldr	r3, [r7, #0]
    85ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    85d2:	2b00      	cmp	r3, #0
    85d4:	d00f      	beq.n	85f6 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    85d6:	687b      	ldr	r3, [r7, #4]
    85d8:	68dc      	ldr	r4, [r3, #12]
    85da:	687b      	ldr	r3, [r7, #4]
    85dc:	681b      	ldr	r3, [r3, #0]
    85de:	4618      	mov	r0, r3
    85e0:	4b11      	ldr	r3, [pc, #68]	; (8628 <CAN1_Handler+0xc0>)
    85e2:	4798      	blx	r3
    85e4:	4603      	mov	r3, r0
    85e6:	2b00      	cmp	r3, #0
    85e8:	d001      	beq.n	85ee <CAN1_Handler+0x86>
    85ea:	2302      	movs	r3, #2
    85ec:	e000      	b.n	85f0 <CAN1_Handler+0x88>
    85ee:	2301      	movs	r3, #1
    85f0:	4619      	mov	r1, r3
    85f2:	6878      	ldr	r0, [r7, #4]
    85f4:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    85f6:	683b      	ldr	r3, [r7, #0]
    85f8:	f003 0308 	and.w	r3, r3, #8
    85fc:	2b00      	cmp	r3, #0
    85fe:	d004      	beq.n	860a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    8600:	687b      	ldr	r3, [r7, #4]
    8602:	68db      	ldr	r3, [r3, #12]
    8604:	2104      	movs	r1, #4
    8606:	6878      	ldr	r0, [r7, #4]
    8608:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    860a:	687b      	ldr	r3, [r7, #4]
    860c:	681b      	ldr	r3, [r3, #0]
    860e:	6839      	ldr	r1, [r7, #0]
    8610:	4618      	mov	r0, r3
    8612:	4b06      	ldr	r3, [pc, #24]	; (862c <CAN1_Handler+0xc4>)
    8614:	4798      	blx	r3
}
    8616:	bf00      	nop
    8618:	370c      	adds	r7, #12
    861a:	46bd      	mov	sp, r7
    861c:	bd90      	pop	{r4, r7, pc}
    861e:	bf00      	nop
    8620:	200086ec 	.word	0x200086ec
    8624:	00008239 	.word	0x00008239
    8628:	000080d1 	.word	0x000080d1
    862c:	0000821d 	.word	0x0000821d

00008630 <__NVIC_SetPendingIRQ>:
{
    8630:	b480      	push	{r7}
    8632:	b083      	sub	sp, #12
    8634:	af00      	add	r7, sp, #0
    8636:	4603      	mov	r3, r0
    8638:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    863a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    863e:	2b00      	cmp	r3, #0
    8640:	db0c      	blt.n	865c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8642:	4909      	ldr	r1, [pc, #36]	; (8668 <__NVIC_SetPendingIRQ+0x38>)
    8644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8648:	095b      	lsrs	r3, r3, #5
    864a:	88fa      	ldrh	r2, [r7, #6]
    864c:	f002 021f 	and.w	r2, r2, #31
    8650:	2001      	movs	r0, #1
    8652:	fa00 f202 	lsl.w	r2, r0, r2
    8656:	3340      	adds	r3, #64	; 0x40
    8658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    865c:	bf00      	nop
    865e:	370c      	adds	r7, #12
    8660:	46bd      	mov	sp, r7
    8662:	f85d 7b04 	ldr.w	r7, [sp], #4
    8666:	4770      	bx	lr
    8668:	e000e100 	.word	0xe000e100

0000866c <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    866c:	b580      	push	{r7, lr}
    866e:	b082      	sub	sp, #8
    8670:	af00      	add	r7, sp, #0
    8672:	4603      	mov	r3, r0
    8674:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    8676:	79fb      	ldrb	r3, [r7, #7]
    8678:	b21b      	sxth	r3, r3
    867a:	4618      	mov	r0, r3
    867c:	4b02      	ldr	r3, [pc, #8]	; (8688 <_irq_set+0x1c>)
    867e:	4798      	blx	r3
}
    8680:	bf00      	nop
    8682:	3708      	adds	r7, #8
    8684:	46bd      	mov	sp, r7
    8686:	bd80      	pop	{r7, pc}
    8688:	00008631 	.word	0x00008631

0000868c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    868c:	b480      	push	{r7}
    868e:	b083      	sub	sp, #12
    8690:	af00      	add	r7, sp, #0
    8692:	4603      	mov	r3, r0
    8694:	6039      	str	r1, [r7, #0]
    8696:	80fb      	strh	r3, [r7, #6]
    8698:	4613      	mov	r3, r2
    869a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    869c:	797b      	ldrb	r3, [r7, #5]
    869e:	3b04      	subs	r3, #4
    86a0:	2b05      	cmp	r3, #5
    86a2:	d86b      	bhi.n	877c <_get_cycles_for_us_internal+0xf0>
    86a4:	a201      	add	r2, pc, #4	; (adr r2, 86ac <_get_cycles_for_us_internal+0x20>)
    86a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    86aa:	bf00      	nop
    86ac:	0000875b 	.word	0x0000875b
    86b0:	0000873b 	.word	0x0000873b
    86b4:	0000871d 	.word	0x0000871d
    86b8:	000086ff 	.word	0x000086ff
    86bc:	000086e1 	.word	0x000086e1
    86c0:	000086c5 	.word	0x000086c5
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    86c4:	88fb      	ldrh	r3, [r7, #6]
    86c6:	683a      	ldr	r2, [r7, #0]
    86c8:	4935      	ldr	r1, [pc, #212]	; (87a0 <_get_cycles_for_us_internal+0x114>)
    86ca:	fba1 1202 	umull	r1, r2, r1, r2
    86ce:	0c92      	lsrs	r2, r2, #18
    86d0:	fb02 f303 	mul.w	r3, r2, r3
    86d4:	3302      	adds	r3, #2
    86d6:	4a33      	ldr	r2, [pc, #204]	; (87a4 <_get_cycles_for_us_internal+0x118>)
    86d8:	fba2 2303 	umull	r2, r3, r2, r3
    86dc:	085b      	lsrs	r3, r3, #1
    86de:	e059      	b.n	8794 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    86e0:	88fb      	ldrh	r3, [r7, #6]
    86e2:	683a      	ldr	r2, [r7, #0]
    86e4:	0952      	lsrs	r2, r2, #5
    86e6:	4930      	ldr	r1, [pc, #192]	; (87a8 <_get_cycles_for_us_internal+0x11c>)
    86e8:	fba1 1202 	umull	r1, r2, r1, r2
    86ec:	09d2      	lsrs	r2, r2, #7
    86ee:	fb02 f303 	mul.w	r3, r2, r3
    86f2:	331d      	adds	r3, #29
    86f4:	4a2d      	ldr	r2, [pc, #180]	; (87ac <_get_cycles_for_us_internal+0x120>)
    86f6:	fba2 2303 	umull	r2, r3, r2, r3
    86fa:	091b      	lsrs	r3, r3, #4
    86fc:	e04a      	b.n	8794 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    86fe:	88fb      	ldrh	r3, [r7, #6]
    8700:	683a      	ldr	r2, [r7, #0]
    8702:	492b      	ldr	r1, [pc, #172]	; (87b0 <_get_cycles_for_us_internal+0x124>)
    8704:	fba1 1202 	umull	r1, r2, r1, r2
    8708:	0b52      	lsrs	r2, r2, #13
    870a:	fb02 f303 	mul.w	r3, r2, r3
    870e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    8712:	4a28      	ldr	r2, [pc, #160]	; (87b4 <_get_cycles_for_us_internal+0x128>)
    8714:	fba2 2303 	umull	r2, r3, r2, r3
    8718:	095b      	lsrs	r3, r3, #5
    871a:	e03b      	b.n	8794 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    871c:	88fb      	ldrh	r3, [r7, #6]
    871e:	683a      	ldr	r2, [r7, #0]
    8720:	4925      	ldr	r1, [pc, #148]	; (87b8 <_get_cycles_for_us_internal+0x12c>)
    8722:	fba1 1202 	umull	r1, r2, r1, r2
    8726:	0992      	lsrs	r2, r2, #6
    8728:	fb02 f303 	mul.w	r3, r2, r3
    872c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8730:	4a22      	ldr	r2, [pc, #136]	; (87bc <_get_cycles_for_us_internal+0x130>)
    8732:	fba2 2303 	umull	r2, r3, r2, r3
    8736:	099b      	lsrs	r3, r3, #6
    8738:	e02c      	b.n	8794 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    873a:	88fb      	ldrh	r3, [r7, #6]
    873c:	683a      	ldr	r2, [r7, #0]
    873e:	4920      	ldr	r1, [pc, #128]	; (87c0 <_get_cycles_for_us_internal+0x134>)
    8740:	fba1 1202 	umull	r1, r2, r1, r2
    8744:	0952      	lsrs	r2, r2, #5
    8746:	fb02 f303 	mul.w	r3, r2, r3
    874a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    874e:	332f      	adds	r3, #47	; 0x2f
    8750:	4a1c      	ldr	r2, [pc, #112]	; (87c4 <_get_cycles_for_us_internal+0x138>)
    8752:	fba2 2303 	umull	r2, r3, r2, r3
    8756:	0b5b      	lsrs	r3, r3, #13
    8758:	e01c      	b.n	8794 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    875a:	88fb      	ldrh	r3, [r7, #6]
    875c:	683a      	ldr	r2, [r7, #0]
    875e:	491a      	ldr	r1, [pc, #104]	; (87c8 <_get_cycles_for_us_internal+0x13c>)
    8760:	fba1 1202 	umull	r1, r2, r1, r2
    8764:	08d2      	lsrs	r2, r2, #3
    8766:	fb02 f303 	mul.w	r3, r2, r3
    876a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    876e:	f203 33df 	addw	r3, r3, #991	; 0x3df
    8772:	4a16      	ldr	r2, [pc, #88]	; (87cc <_get_cycles_for_us_internal+0x140>)
    8774:	fba2 2303 	umull	r2, r3, r2, r3
    8778:	0c5b      	lsrs	r3, r3, #17
    877a:	e00b      	b.n	8794 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    877c:	88fb      	ldrh	r3, [r7, #6]
    877e:	683a      	ldr	r2, [r7, #0]
    8780:	fb02 f303 	mul.w	r3, r2, r3
    8784:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    8788:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    878c:	4a10      	ldr	r2, [pc, #64]	; (87d0 <_get_cycles_for_us_internal+0x144>)
    878e:	fba2 2303 	umull	r2, r3, r2, r3
    8792:	0c9b      	lsrs	r3, r3, #18
	}
}
    8794:	4618      	mov	r0, r3
    8796:	370c      	adds	r7, #12
    8798:	46bd      	mov	sp, r7
    879a:	f85d 7b04 	ldr.w	r7, [sp], #4
    879e:	4770      	bx	lr
    87a0:	431bde83 	.word	0x431bde83
    87a4:	aaaaaaab 	.word	0xaaaaaaab
    87a8:	0a7c5ac5 	.word	0x0a7c5ac5
    87ac:	88888889 	.word	0x88888889
    87b0:	d1b71759 	.word	0xd1b71759
    87b4:	1b4e81b5 	.word	0x1b4e81b5
    87b8:	10624dd3 	.word	0x10624dd3
    87bc:	057619f1 	.word	0x057619f1
    87c0:	51eb851f 	.word	0x51eb851f
    87c4:	45e7b273 	.word	0x45e7b273
    87c8:	cccccccd 	.word	0xcccccccd
    87cc:	6fd91d85 	.word	0x6fd91d85
    87d0:	165e9f81 	.word	0x165e9f81

000087d4 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    87d4:	b580      	push	{r7, lr}
    87d6:	b082      	sub	sp, #8
    87d8:	af00      	add	r7, sp, #0
    87da:	4603      	mov	r3, r0
    87dc:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    87de:	88fb      	ldrh	r3, [r7, #6]
    87e0:	2209      	movs	r2, #9
    87e2:	4904      	ldr	r1, [pc, #16]	; (87f4 <_get_cycles_for_us+0x20>)
    87e4:	4618      	mov	r0, r3
    87e6:	4b04      	ldr	r3, [pc, #16]	; (87f8 <_get_cycles_for_us+0x24>)
    87e8:	4798      	blx	r3
    87ea:	4603      	mov	r3, r0
}
    87ec:	4618      	mov	r0, r3
    87ee:	3708      	adds	r7, #8
    87f0:	46bd      	mov	sp, r7
    87f2:	bd80      	pop	{r7, pc}
    87f4:	07270e00 	.word	0x07270e00
    87f8:	0000868d 	.word	0x0000868d

000087fc <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    87fc:	b480      	push	{r7}
    87fe:	b083      	sub	sp, #12
    8800:	af00      	add	r7, sp, #0
    8802:	4603      	mov	r3, r0
    8804:	6039      	str	r1, [r7, #0]
    8806:	80fb      	strh	r3, [r7, #6]
    8808:	4613      	mov	r3, r2
    880a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    880c:	797b      	ldrb	r3, [r7, #5]
    880e:	3b04      	subs	r3, #4
    8810:	2b05      	cmp	r3, #5
    8812:	d870      	bhi.n	88f6 <_get_cycles_for_ms_internal+0xfa>
    8814:	a201      	add	r2, pc, #4	; (adr r2, 881c <_get_cycles_for_ms_internal+0x20>)
    8816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    881a:	bf00      	nop
    881c:	000088d9 	.word	0x000088d9
    8820:	000088bd 	.word	0x000088bd
    8824:	000088a1 	.word	0x000088a1
    8828:	0000887d 	.word	0x0000887d
    882c:	00008859 	.word	0x00008859
    8830:	00008835 	.word	0x00008835
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    8834:	88fb      	ldrh	r3, [r7, #6]
    8836:	683a      	ldr	r2, [r7, #0]
    8838:	4937      	ldr	r1, [pc, #220]	; (8918 <_get_cycles_for_ms_internal+0x11c>)
    883a:	fba1 1202 	umull	r1, r2, r1, r2
    883e:	0c92      	lsrs	r2, r2, #18
    8840:	fb02 f303 	mul.w	r3, r2, r3
    8844:	3302      	adds	r3, #2
    8846:	4a35      	ldr	r2, [pc, #212]	; (891c <_get_cycles_for_ms_internal+0x120>)
    8848:	fba2 2303 	umull	r2, r3, r2, r3
    884c:	085b      	lsrs	r3, r3, #1
    884e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8852:	fb02 f303 	mul.w	r3, r2, r3
    8856:	e058      	b.n	890a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    8858:	88fb      	ldrh	r3, [r7, #6]
    885a:	683a      	ldr	r2, [r7, #0]
    885c:	0952      	lsrs	r2, r2, #5
    885e:	4930      	ldr	r1, [pc, #192]	; (8920 <_get_cycles_for_ms_internal+0x124>)
    8860:	fba1 1202 	umull	r1, r2, r1, r2
    8864:	09d2      	lsrs	r2, r2, #7
    8866:	fb02 f303 	mul.w	r3, r2, r3
    886a:	3302      	adds	r3, #2
    886c:	4a2b      	ldr	r2, [pc, #172]	; (891c <_get_cycles_for_ms_internal+0x120>)
    886e:	fba2 2303 	umull	r2, r3, r2, r3
    8872:	085b      	lsrs	r3, r3, #1
    8874:	2264      	movs	r2, #100	; 0x64
    8876:	fb02 f303 	mul.w	r3, r2, r3
    887a:	e046      	b.n	890a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    887c:	88fb      	ldrh	r3, [r7, #6]
    887e:	683a      	ldr	r2, [r7, #0]
    8880:	4928      	ldr	r1, [pc, #160]	; (8924 <_get_cycles_for_ms_internal+0x128>)
    8882:	fba1 1202 	umull	r1, r2, r1, r2
    8886:	0b52      	lsrs	r2, r2, #13
    8888:	fb02 f303 	mul.w	r3, r2, r3
    888c:	3302      	adds	r3, #2
    888e:	4a23      	ldr	r2, [pc, #140]	; (891c <_get_cycles_for_ms_internal+0x120>)
    8890:	fba2 2303 	umull	r2, r3, r2, r3
    8894:	085a      	lsrs	r2, r3, #1
    8896:	4613      	mov	r3, r2
    8898:	009b      	lsls	r3, r3, #2
    889a:	4413      	add	r3, r2
    889c:	005b      	lsls	r3, r3, #1
    889e:	e034      	b.n	890a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    88a0:	88fb      	ldrh	r3, [r7, #6]
    88a2:	683a      	ldr	r2, [r7, #0]
    88a4:	4920      	ldr	r1, [pc, #128]	; (8928 <_get_cycles_for_ms_internal+0x12c>)
    88a6:	fba1 1202 	umull	r1, r2, r1, r2
    88aa:	0992      	lsrs	r2, r2, #6
    88ac:	fb02 f303 	mul.w	r3, r2, r3
    88b0:	3302      	adds	r3, #2
    88b2:	4a1a      	ldr	r2, [pc, #104]	; (891c <_get_cycles_for_ms_internal+0x120>)
    88b4:	fba2 2303 	umull	r2, r3, r2, r3
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	e026      	b.n	890a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    88bc:	88fb      	ldrh	r3, [r7, #6]
    88be:	683a      	ldr	r2, [r7, #0]
    88c0:	491a      	ldr	r1, [pc, #104]	; (892c <_get_cycles_for_ms_internal+0x130>)
    88c2:	fba1 1202 	umull	r1, r2, r1, r2
    88c6:	0952      	lsrs	r2, r2, #5
    88c8:	fb02 f303 	mul.w	r3, r2, r3
    88cc:	331d      	adds	r3, #29
    88ce:	4a18      	ldr	r2, [pc, #96]	; (8930 <_get_cycles_for_ms_internal+0x134>)
    88d0:	fba2 2303 	umull	r2, r3, r2, r3
    88d4:	091b      	lsrs	r3, r3, #4
    88d6:	e018      	b.n	890a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    88d8:	88fb      	ldrh	r3, [r7, #6]
    88da:	683a      	ldr	r2, [r7, #0]
    88dc:	4915      	ldr	r1, [pc, #84]	; (8934 <_get_cycles_for_ms_internal+0x138>)
    88de:	fba1 1202 	umull	r1, r2, r1, r2
    88e2:	08d2      	lsrs	r2, r2, #3
    88e4:	fb02 f303 	mul.w	r3, r2, r3
    88e8:	f203 132b 	addw	r3, r3, #299	; 0x12b
    88ec:	4a12      	ldr	r2, [pc, #72]	; (8938 <_get_cycles_for_ms_internal+0x13c>)
    88ee:	fba2 2303 	umull	r2, r3, r2, r3
    88f2:	095b      	lsrs	r3, r3, #5
    88f4:	e009      	b.n	890a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    88f6:	88fb      	ldrh	r3, [r7, #6]
    88f8:	683a      	ldr	r2, [r7, #0]
    88fa:	fb02 f303 	mul.w	r3, r2, r3
    88fe:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8902:	4a0e      	ldr	r2, [pc, #56]	; (893c <_get_cycles_for_ms_internal+0x140>)
    8904:	fba2 2303 	umull	r2, r3, r2, r3
    8908:	099b      	lsrs	r3, r3, #6
	}
}
    890a:	4618      	mov	r0, r3
    890c:	370c      	adds	r7, #12
    890e:	46bd      	mov	sp, r7
    8910:	f85d 7b04 	ldr.w	r7, [sp], #4
    8914:	4770      	bx	lr
    8916:	bf00      	nop
    8918:	431bde83 	.word	0x431bde83
    891c:	aaaaaaab 	.word	0xaaaaaaab
    8920:	0a7c5ac5 	.word	0x0a7c5ac5
    8924:	d1b71759 	.word	0xd1b71759
    8928:	10624dd3 	.word	0x10624dd3
    892c:	51eb851f 	.word	0x51eb851f
    8930:	88888889 	.word	0x88888889
    8934:	cccccccd 	.word	0xcccccccd
    8938:	1b4e81b5 	.word	0x1b4e81b5
    893c:	057619f1 	.word	0x057619f1

00008940 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    8940:	b580      	push	{r7, lr}
    8942:	b082      	sub	sp, #8
    8944:	af00      	add	r7, sp, #0
    8946:	4603      	mov	r3, r0
    8948:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    894a:	88fb      	ldrh	r3, [r7, #6]
    894c:	2209      	movs	r2, #9
    894e:	4904      	ldr	r1, [pc, #16]	; (8960 <_get_cycles_for_ms+0x20>)
    8950:	4618      	mov	r0, r3
    8952:	4b04      	ldr	r3, [pc, #16]	; (8964 <_get_cycles_for_ms+0x24>)
    8954:	4798      	blx	r3
    8956:	4603      	mov	r3, r0
}
    8958:	4618      	mov	r0, r3
    895a:	3708      	adds	r7, #8
    895c:	46bd      	mov	sp, r7
    895e:	bd80      	pop	{r7, pc}
    8960:	07270e00 	.word	0x07270e00
    8964:	000087fd 	.word	0x000087fd

00008968 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    8968:	b480      	push	{r7}
    896a:	b083      	sub	sp, #12
    896c:	af00      	add	r7, sp, #0
    896e:	6078      	str	r0, [r7, #4]
    8970:	6039      	str	r1, [r7, #0]
    8972:	bf00      	nop
    8974:	f3af 8000 	nop.w

00008978 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    8978:	3901      	subs	r1, #1
    897a:	d8fd      	bhi.n	8978 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    897c:	bf00      	nop
    897e:	370c      	adds	r7, #12
    8980:	46bd      	mov	sp, r7
    8982:	f85d 7b04 	ldr.w	r7, [sp], #4
    8986:	4770      	bx	lr

00008988 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    8988:	b480      	push	{r7}
    898a:	b083      	sub	sp, #12
    898c:	af00      	add	r7, sp, #0
    898e:	6078      	str	r0, [r7, #4]
    8990:	460b      	mov	r3, r1
    8992:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    8994:	687b      	ldr	r3, [r7, #4]
    8996:	881b      	ldrh	r3, [r3, #0]
    8998:	b29a      	uxth	r2, r3
    899a:	887b      	ldrh	r3, [r7, #2]
    899c:	021b      	lsls	r3, r3, #8
    899e:	b29b      	uxth	r3, r3
    89a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    89a4:	b29b      	uxth	r3, r3
    89a6:	4313      	orrs	r3, r2
    89a8:	b29a      	uxth	r2, r3
    89aa:	687b      	ldr	r3, [r7, #4]
    89ac:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    89ae:	bf00      	nop
    89b0:	370c      	adds	r7, #12
    89b2:	46bd      	mov	sp, r7
    89b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    89b8:	4770      	bx	lr

000089ba <hri_port_set_EVCTRL_reg>:
{
    89ba:	b480      	push	{r7}
    89bc:	b085      	sub	sp, #20
    89be:	af00      	add	r7, sp, #0
    89c0:	60f8      	str	r0, [r7, #12]
    89c2:	460b      	mov	r3, r1
    89c4:	607a      	str	r2, [r7, #4]
    89c6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    89c8:	7afb      	ldrb	r3, [r7, #11]
    89ca:	7afa      	ldrb	r2, [r7, #11]
    89cc:	68f9      	ldr	r1, [r7, #12]
    89ce:	01d2      	lsls	r2, r2, #7
    89d0:	440a      	add	r2, r1
    89d2:	322c      	adds	r2, #44	; 0x2c
    89d4:	6811      	ldr	r1, [r2, #0]
    89d6:	687a      	ldr	r2, [r7, #4]
    89d8:	430a      	orrs	r2, r1
    89da:	68f9      	ldr	r1, [r7, #12]
    89dc:	01db      	lsls	r3, r3, #7
    89de:	440b      	add	r3, r1
    89e0:	332c      	adds	r3, #44	; 0x2c
    89e2:	601a      	str	r2, [r3, #0]
}
    89e4:	bf00      	nop
    89e6:	3714      	adds	r7, #20
    89e8:	46bd      	mov	sp, r7
    89ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    89ee:	4770      	bx	lr

000089f0 <_port_event_init>:

static inline void _port_event_init()
{
    89f0:	b580      	push	{r7, lr}
    89f2:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    89f4:	2200      	movs	r2, #0
    89f6:	2100      	movs	r1, #0
    89f8:	480a      	ldr	r0, [pc, #40]	; (8a24 <_port_event_init+0x34>)
    89fa:	4b0b      	ldr	r3, [pc, #44]	; (8a28 <_port_event_init+0x38>)
    89fc:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    89fe:	2200      	movs	r2, #0
    8a00:	2101      	movs	r1, #1
    8a02:	4808      	ldr	r0, [pc, #32]	; (8a24 <_port_event_init+0x34>)
    8a04:	4b08      	ldr	r3, [pc, #32]	; (8a28 <_port_event_init+0x38>)
    8a06:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    8a08:	f64e 72ef 	movw	r2, #61423	; 0xefef
    8a0c:	2102      	movs	r1, #2
    8a0e:	4805      	ldr	r0, [pc, #20]	; (8a24 <_port_event_init+0x34>)
    8a10:	4b05      	ldr	r3, [pc, #20]	; (8a28 <_port_event_init+0x38>)
    8a12:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    8a14:	2200      	movs	r2, #0
    8a16:	2103      	movs	r1, #3
    8a18:	4802      	ldr	r0, [pc, #8]	; (8a24 <_port_event_init+0x34>)
    8a1a:	4b03      	ldr	r3, [pc, #12]	; (8a28 <_port_event_init+0x38>)
    8a1c:	4798      	blx	r3
}
    8a1e:	bf00      	nop
    8a20:	bd80      	pop	{r7, pc}
    8a22:	bf00      	nop
    8a24:	41008000 	.word	0x41008000
    8a28:	000089bb 	.word	0x000089bb

00008a2c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    8a2c:	b580      	push	{r7, lr}
    8a2e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    8a30:	2104      	movs	r1, #4
    8a32:	480b      	ldr	r0, [pc, #44]	; (8a60 <_init_chip+0x34>)
    8a34:	4b0b      	ldr	r3, [pc, #44]	; (8a64 <_init_chip+0x38>)
    8a36:	4798      	blx	r3

	_osc32kctrl_init_sources();
    8a38:	4b0b      	ldr	r3, [pc, #44]	; (8a68 <_init_chip+0x3c>)
    8a3a:	4798      	blx	r3
	_oscctrl_init_sources();
    8a3c:	4b0b      	ldr	r3, [pc, #44]	; (8a6c <_init_chip+0x40>)
    8a3e:	4798      	blx	r3
	_mclk_init();
    8a40:	4b0b      	ldr	r3, [pc, #44]	; (8a70 <_init_chip+0x44>)
    8a42:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    8a44:	f44f 6084 	mov.w	r0, #1056	; 0x420
    8a48:	4b0a      	ldr	r3, [pc, #40]	; (8a74 <_init_chip+0x48>)
    8a4a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    8a4c:	4b0a      	ldr	r3, [pc, #40]	; (8a78 <_init_chip+0x4c>)
    8a4e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    8a50:	f640 30df 	movw	r0, #3039	; 0xbdf
    8a54:	4b07      	ldr	r3, [pc, #28]	; (8a74 <_init_chip+0x48>)
    8a56:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    8a58:	4b08      	ldr	r3, [pc, #32]	; (8a7c <_init_chip+0x50>)
    8a5a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    8a5c:	bf00      	nop
    8a5e:	bd80      	pop	{r7, pc}
    8a60:	41004000 	.word	0x41004000
    8a64:	00008989 	.word	0x00008989
    8a68:	00009751 	.word	0x00009751
    8a6c:	00009c19 	.word	0x00009c19
    8a70:	00009671 	.word	0x00009671
    8a74:	00009531 	.word	0x00009531
    8a78:	00009c59 	.word	0x00009c59
    8a7c:	000089f1 	.word	0x000089f1

00008a80 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    8a80:	b480      	push	{r7}
    8a82:	b083      	sub	sp, #12
    8a84:	af00      	add	r7, sp, #0
    8a86:	6078      	str	r0, [r7, #4]
    8a88:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    8a8a:	687b      	ldr	r3, [r7, #4]
    8a8c:	683a      	ldr	r2, [r7, #0]
    8a8e:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8a90:	bf00      	nop
    8a92:	370c      	adds	r7, #12
    8a94:	46bd      	mov	sp, r7
    8a96:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a9a:	4770      	bx	lr

00008a9c <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    8a9c:	b480      	push	{r7}
    8a9e:	b085      	sub	sp, #20
    8aa0:	af00      	add	r7, sp, #0
    8aa2:	6078      	str	r0, [r7, #4]
    8aa4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    8aa6:	687b      	ldr	r3, [r7, #4]
    8aa8:	689b      	ldr	r3, [r3, #8]
    8aaa:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    8aac:	68fb      	ldr	r3, [r7, #12]
    8aae:	f003 0303 	and.w	r3, r3, #3
    8ab2:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    8ab4:	683b      	ldr	r3, [r7, #0]
    8ab6:	009b      	lsls	r3, r3, #2
    8ab8:	68fa      	ldr	r2, [r7, #12]
    8aba:	4313      	orrs	r3, r2
    8abc:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    8abe:	687b      	ldr	r3, [r7, #4]
    8ac0:	68fa      	ldr	r2, [r7, #12]
    8ac2:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8ac4:	bf00      	nop
    8ac6:	3714      	adds	r7, #20
    8ac8:	46bd      	mov	sp, r7
    8aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ace:	4770      	bx	lr

00008ad0 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    8ad0:	b480      	push	{r7}
    8ad2:	b083      	sub	sp, #12
    8ad4:	af00      	add	r7, sp, #0
    8ad6:	6078      	str	r0, [r7, #4]
    8ad8:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    8ada:	687b      	ldr	r3, [r7, #4]
    8adc:	683a      	ldr	r2, [r7, #0]
    8ade:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8ae0:	bf00      	nop
    8ae2:	370c      	adds	r7, #12
    8ae4:	46bd      	mov	sp, r7
    8ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aea:	4770      	bx	lr

00008aec <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    8aec:	b480      	push	{r7}
    8aee:	b083      	sub	sp, #12
    8af0:	af00      	add	r7, sp, #0
    8af2:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    8af4:	687b      	ldr	r3, [r7, #4]
    8af6:	68db      	ldr	r3, [r3, #12]
}
    8af8:	4618      	mov	r0, r3
    8afa:	370c      	adds	r7, #12
    8afc:	46bd      	mov	sp, r7
    8afe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b02:	4770      	bx	lr

00008b04 <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    8b04:	b480      	push	{r7}
    8b06:	b083      	sub	sp, #12
    8b08:	af00      	add	r7, sp, #0
    8b0a:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    8b0c:	687b      	ldr	r3, [r7, #4]
    8b0e:	785b      	ldrb	r3, [r3, #1]
    8b10:	b2db      	uxtb	r3, r3
    8b12:	f003 0301 	and.w	r3, r3, #1
    8b16:	2b00      	cmp	r3, #0
    8b18:	bf14      	ite	ne
    8b1a:	2301      	movne	r3, #1
    8b1c:	2300      	moveq	r3, #0
    8b1e:	b2db      	uxtb	r3, r3
}
    8b20:	4618      	mov	r0, r3
    8b22:	370c      	adds	r7, #12
    8b24:	46bd      	mov	sp, r7
    8b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b2a:	4770      	bx	lr

00008b2c <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    8b2c:	b480      	push	{r7}
    8b2e:	b083      	sub	sp, #12
    8b30:	af00      	add	r7, sp, #0
    8b32:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    8b34:	687b      	ldr	r3, [r7, #4]
    8b36:	2201      	movs	r2, #1
    8b38:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8b3a:	bf00      	nop
    8b3c:	370c      	adds	r7, #12
    8b3e:	46bd      	mov	sp, r7
    8b40:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b44:	4770      	bx	lr

00008b46 <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    8b46:	b480      	push	{r7}
    8b48:	b083      	sub	sp, #12
    8b4a:	af00      	add	r7, sp, #0
    8b4c:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    8b4e:	687b      	ldr	r3, [r7, #4]
    8b50:	785b      	ldrb	r3, [r3, #1]
    8b52:	b2db      	uxtb	r3, r3
    8b54:	089b      	lsrs	r3, r3, #2
    8b56:	f003 0301 	and.w	r3, r3, #1
    8b5a:	2b00      	cmp	r3, #0
    8b5c:	bf14      	ite	ne
    8b5e:	2301      	movne	r3, #1
    8b60:	2300      	moveq	r3, #0
    8b62:	b2db      	uxtb	r3, r3
}
    8b64:	4618      	mov	r0, r3
    8b66:	370c      	adds	r7, #12
    8b68:	46bd      	mov	sp, r7
    8b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b6e:	4770      	bx	lr

00008b70 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    8b70:	b480      	push	{r7}
    8b72:	b083      	sub	sp, #12
    8b74:	af00      	add	r7, sp, #0
    8b76:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    8b78:	687b      	ldr	r3, [r7, #4]
    8b7a:	2204      	movs	r2, #4
    8b7c:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8b7e:	bf00      	nop
    8b80:	370c      	adds	r7, #12
    8b82:	46bd      	mov	sp, r7
    8b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b88:	4770      	bx	lr

00008b8a <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    8b8a:	b480      	push	{r7}
    8b8c:	b083      	sub	sp, #12
    8b8e:	af00      	add	r7, sp, #0
    8b90:	6078      	str	r0, [r7, #4]
    8b92:	460b      	mov	r3, r1
    8b94:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    8b96:	687b      	ldr	r3, [r7, #4]
    8b98:	78fa      	ldrb	r2, [r7, #3]
    8b9a:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8b9c:	bf00      	nop
    8b9e:	370c      	adds	r7, #12
    8ba0:	46bd      	mov	sp, r7
    8ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ba6:	4770      	bx	lr

00008ba8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    8ba8:	b480      	push	{r7}
    8baa:	b083      	sub	sp, #12
    8bac:	af00      	add	r7, sp, #0
    8bae:	6078      	str	r0, [r7, #4]
    8bb0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    8bb2:	687b      	ldr	r3, [r7, #4]
    8bb4:	683a      	ldr	r2, [r7, #0]
    8bb6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    8bb8:	2300      	movs	r3, #0
}
    8bba:	4618      	mov	r0, r3
    8bbc:	370c      	adds	r7, #12
    8bbe:	46bd      	mov	sp, r7
    8bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bc4:	4770      	bx	lr

00008bc6 <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    8bc6:	b480      	push	{r7}
    8bc8:	b083      	sub	sp, #12
    8bca:	af00      	add	r7, sp, #0
    8bcc:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    8bce:	2300      	movs	r3, #0
}
    8bd0:	4618      	mov	r0, r3
    8bd2:	370c      	adds	r7, #12
    8bd4:	46bd      	mov	sp, r7
    8bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bda:	4770      	bx	lr

00008bdc <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    8bdc:	b580      	push	{r7, lr}
    8bde:	b086      	sub	sp, #24
    8be0:	af00      	add	r7, sp, #0
    8be2:	60f8      	str	r0, [r7, #12]
    8be4:	60b9      	str	r1, [r7, #8]
    8be6:	607a      	str	r2, [r7, #4]
    8be8:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    8bea:	2300      	movs	r3, #0
    8bec:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    8bee:	68bb      	ldr	r3, [r7, #8]
    8bf0:	f003 0303 	and.w	r3, r3, #3
    8bf4:	2b00      	cmp	r3, #0
    8bf6:	d002      	beq.n	8bfe <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    8bf8:	f06f 030c 	mvn.w	r3, #12
    8bfc:	e05e      	b.n	8cbc <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    8bfe:	f107 0310 	add.w	r3, r7, #16
    8c02:	4618      	mov	r0, r3
    8c04:	4b2f      	ldr	r3, [pc, #188]	; (8cc4 <_crc_sync_crc32+0xe8>)
    8c06:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    8c08:	68fb      	ldr	r3, [r7, #12]
    8c0a:	681b      	ldr	r3, [r3, #0]
    8c0c:	4618      	mov	r0, r3
    8c0e:	4b2e      	ldr	r3, [pc, #184]	; (8cc8 <_crc_sync_crc32+0xec>)
    8c10:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    8c12:	68fb      	ldr	r3, [r7, #12]
    8c14:	681b      	ldr	r3, [r3, #0]
    8c16:	68ba      	ldr	r2, [r7, #8]
    8c18:	4611      	mov	r1, r2
    8c1a:	4618      	mov	r0, r3
    8c1c:	4b2b      	ldr	r3, [pc, #172]	; (8ccc <_crc_sync_crc32+0xf0>)
    8c1e:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    8c20:	68fb      	ldr	r3, [r7, #12]
    8c22:	681b      	ldr	r3, [r3, #0]
    8c24:	6879      	ldr	r1, [r7, #4]
    8c26:	4618      	mov	r0, r3
    8c28:	4b29      	ldr	r3, [pc, #164]	; (8cd0 <_crc_sync_crc32+0xf4>)
    8c2a:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    8c2c:	68fb      	ldr	r3, [r7, #12]
    8c2e:	681a      	ldr	r2, [r3, #0]
    8c30:	683b      	ldr	r3, [r7, #0]
    8c32:	681b      	ldr	r3, [r3, #0]
    8c34:	4619      	mov	r1, r3
    8c36:	4610      	mov	r0, r2
    8c38:	4b26      	ldr	r3, [pc, #152]	; (8cd4 <_crc_sync_crc32+0xf8>)
    8c3a:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    8c3c:	68fb      	ldr	r3, [r7, #12]
    8c3e:	681b      	ldr	r3, [r3, #0]
    8c40:	2104      	movs	r1, #4
    8c42:	4618      	mov	r0, r3
    8c44:	4b24      	ldr	r3, [pc, #144]	; (8cd8 <_crc_sync_crc32+0xfc>)
    8c46:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    8c48:	bf00      	nop
    8c4a:	68fb      	ldr	r3, [r7, #12]
    8c4c:	681b      	ldr	r3, [r3, #0]
    8c4e:	4618      	mov	r0, r3
    8c50:	4b22      	ldr	r3, [pc, #136]	; (8cdc <_crc_sync_crc32+0x100>)
    8c52:	4798      	blx	r3
    8c54:	4603      	mov	r3, r0
    8c56:	f083 0301 	eor.w	r3, r3, #1
    8c5a:	b2db      	uxtb	r3, r3
    8c5c:	2b00      	cmp	r3, #0
    8c5e:	d1f4      	bne.n	8c4a <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    8c60:	68fb      	ldr	r3, [r7, #12]
    8c62:	681b      	ldr	r3, [r3, #0]
    8c64:	4618      	mov	r0, r3
    8c66:	4b1e      	ldr	r3, [pc, #120]	; (8ce0 <_crc_sync_crc32+0x104>)
    8c68:	4798      	blx	r3
    8c6a:	4603      	mov	r3, r0
    8c6c:	2b00      	cmp	r3, #0
    8c6e:	d00d      	beq.n	8c8c <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    8c70:	68fb      	ldr	r3, [r7, #12]
    8c72:	681b      	ldr	r3, [r3, #0]
    8c74:	4618      	mov	r0, r3
    8c76:	4b1b      	ldr	r3, [pc, #108]	; (8ce4 <_crc_sync_crc32+0x108>)
    8c78:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    8c7a:	68fb      	ldr	r3, [r7, #12]
    8c7c:	681b      	ldr	r3, [r3, #0]
    8c7e:	4618      	mov	r0, r3
    8c80:	4b19      	ldr	r3, [pc, #100]	; (8ce8 <_crc_sync_crc32+0x10c>)
    8c82:	4798      	blx	r3
		rc = ERR_IO;
    8c84:	f06f 0305 	mvn.w	r3, #5
    8c88:	617b      	str	r3, [r7, #20]
    8c8a:	e007      	b.n	8c9c <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    8c8c:	68fb      	ldr	r3, [r7, #12]
    8c8e:	681b      	ldr	r3, [r3, #0]
    8c90:	4618      	mov	r0, r3
    8c92:	4b16      	ldr	r3, [pc, #88]	; (8cec <_crc_sync_crc32+0x110>)
    8c94:	4798      	blx	r3
    8c96:	4602      	mov	r2, r0
    8c98:	683b      	ldr	r3, [r7, #0]
    8c9a:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    8c9c:	68fb      	ldr	r3, [r7, #12]
    8c9e:	681b      	ldr	r3, [r3, #0]
    8ca0:	4618      	mov	r0, r3
    8ca2:	4b11      	ldr	r3, [pc, #68]	; (8ce8 <_crc_sync_crc32+0x10c>)
    8ca4:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    8ca6:	68fb      	ldr	r3, [r7, #12]
    8ca8:	681b      	ldr	r3, [r3, #0]
    8caa:	4618      	mov	r0, r3
    8cac:	4b10      	ldr	r3, [pc, #64]	; (8cf0 <_crc_sync_crc32+0x114>)
    8cae:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    8cb0:	f107 0310 	add.w	r3, r7, #16
    8cb4:	4618      	mov	r0, r3
    8cb6:	4b0f      	ldr	r3, [pc, #60]	; (8cf4 <_crc_sync_crc32+0x118>)
    8cb8:	4798      	blx	r3

	return rc;
    8cba:	697b      	ldr	r3, [r7, #20]
}
    8cbc:	4618      	mov	r0, r3
    8cbe:	3718      	adds	r7, #24
    8cc0:	46bd      	mov	sp, r7
    8cc2:	bd80      	pop	{r7, pc}
    8cc4:	000109d5 	.word	0x000109d5
    8cc8:	00009ff9 	.word	0x00009ff9
    8ccc:	00008a81 	.word	0x00008a81
    8cd0:	00008a9d 	.word	0x00008a9d
    8cd4:	00008ad1 	.word	0x00008ad1
    8cd8:	00008b8b 	.word	0x00008b8b
    8cdc:	00008b05 	.word	0x00008b05
    8ce0:	00008b47 	.word	0x00008b47
    8ce4:	00008b71 	.word	0x00008b71
    8ce8:	00008b2d 	.word	0x00008b2d
    8cec:	00008aed 	.word	0x00008aed
    8cf0:	00009f6d 	.word	0x00009f6d
    8cf4:	000109fb 	.word	0x000109fb

00008cf8 <__NVIC_EnableIRQ>:
{
    8cf8:	b480      	push	{r7}
    8cfa:	b083      	sub	sp, #12
    8cfc:	af00      	add	r7, sp, #0
    8cfe:	4603      	mov	r3, r0
    8d00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d06:	2b00      	cmp	r3, #0
    8d08:	db0b      	blt.n	8d22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d0a:	4909      	ldr	r1, [pc, #36]	; (8d30 <__NVIC_EnableIRQ+0x38>)
    8d0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d10:	095b      	lsrs	r3, r3, #5
    8d12:	88fa      	ldrh	r2, [r7, #6]
    8d14:	f002 021f 	and.w	r2, r2, #31
    8d18:	2001      	movs	r0, #1
    8d1a:	fa00 f202 	lsl.w	r2, r0, r2
    8d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d22:	bf00      	nop
    8d24:	370c      	adds	r7, #12
    8d26:	46bd      	mov	sp, r7
    8d28:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d2c:	4770      	bx	lr
    8d2e:	bf00      	nop
    8d30:	e000e100 	.word	0xe000e100

00008d34 <__NVIC_DisableIRQ>:
{
    8d34:	b480      	push	{r7}
    8d36:	b083      	sub	sp, #12
    8d38:	af00      	add	r7, sp, #0
    8d3a:	4603      	mov	r3, r0
    8d3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d42:	2b00      	cmp	r3, #0
    8d44:	db10      	blt.n	8d68 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d46:	490b      	ldr	r1, [pc, #44]	; (8d74 <__NVIC_DisableIRQ+0x40>)
    8d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d4c:	095b      	lsrs	r3, r3, #5
    8d4e:	88fa      	ldrh	r2, [r7, #6]
    8d50:	f002 021f 	and.w	r2, r2, #31
    8d54:	2001      	movs	r0, #1
    8d56:	fa00 f202 	lsl.w	r2, r0, r2
    8d5a:	3320      	adds	r3, #32
    8d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8d60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8d64:	f3bf 8f6f 	isb	sy
}
    8d68:	bf00      	nop
    8d6a:	370c      	adds	r7, #12
    8d6c:	46bd      	mov	sp, r7
    8d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d72:	4770      	bx	lr
    8d74:	e000e100 	.word	0xe000e100

00008d78 <__NVIC_ClearPendingIRQ>:
{
    8d78:	b480      	push	{r7}
    8d7a:	b083      	sub	sp, #12
    8d7c:	af00      	add	r7, sp, #0
    8d7e:	4603      	mov	r3, r0
    8d80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d86:	2b00      	cmp	r3, #0
    8d88:	db0c      	blt.n	8da4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d8a:	4909      	ldr	r1, [pc, #36]	; (8db0 <__NVIC_ClearPendingIRQ+0x38>)
    8d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8d90:	095b      	lsrs	r3, r3, #5
    8d92:	88fa      	ldrh	r2, [r7, #6]
    8d94:	f002 021f 	and.w	r2, r2, #31
    8d98:	2001      	movs	r0, #1
    8d9a:	fa00 f202 	lsl.w	r2, r0, r2
    8d9e:	3360      	adds	r3, #96	; 0x60
    8da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8da4:	bf00      	nop
    8da6:	370c      	adds	r7, #12
    8da8:	46bd      	mov	sp, r7
    8daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dae:	4770      	bx	lr
    8db0:	e000e100 	.word	0xe000e100

00008db4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8db4:	b480      	push	{r7}
    8db6:	b083      	sub	sp, #12
    8db8:	af00      	add	r7, sp, #0
    8dba:	6078      	str	r0, [r7, #4]
    8dbc:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    8dbe:	bf00      	nop
    8dc0:	687b      	ldr	r3, [r7, #4]
    8dc2:	685a      	ldr	r2, [r3, #4]
    8dc4:	683b      	ldr	r3, [r7, #0]
    8dc6:	4013      	ands	r3, r2
    8dc8:	2b00      	cmp	r3, #0
    8dca:	d1f9      	bne.n	8dc0 <hri_eic_wait_for_sync+0xc>
	};
}
    8dcc:	bf00      	nop
    8dce:	370c      	adds	r7, #12
    8dd0:	46bd      	mov	sp, r7
    8dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dd6:	4770      	bx	lr

00008dd8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8dd8:	b480      	push	{r7}
    8dda:	b083      	sub	sp, #12
    8ddc:	af00      	add	r7, sp, #0
    8dde:	6078      	str	r0, [r7, #4]
    8de0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    8de2:	687b      	ldr	r3, [r7, #4]
    8de4:	685a      	ldr	r2, [r3, #4]
    8de6:	683b      	ldr	r3, [r7, #0]
    8de8:	4013      	ands	r3, r2
    8dea:	2b00      	cmp	r3, #0
    8dec:	bf14      	ite	ne
    8dee:	2301      	movne	r3, #1
    8df0:	2300      	moveq	r3, #0
    8df2:	b2db      	uxtb	r3, r3
}
    8df4:	4618      	mov	r0, r3
    8df6:	370c      	adds	r7, #12
    8df8:	46bd      	mov	sp, r7
    8dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dfe:	4770      	bx	lr

00008e00 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    8e00:	b480      	push	{r7}
    8e02:	b083      	sub	sp, #12
    8e04:	af00      	add	r7, sp, #0
    8e06:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    8e08:	687b      	ldr	r3, [r7, #4]
    8e0a:	695b      	ldr	r3, [r3, #20]
}
    8e0c:	4618      	mov	r0, r3
    8e0e:	370c      	adds	r7, #12
    8e10:	46bd      	mov	sp, r7
    8e12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e16:	4770      	bx	lr

00008e18 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    8e18:	b480      	push	{r7}
    8e1a:	b083      	sub	sp, #12
    8e1c:	af00      	add	r7, sp, #0
    8e1e:	6078      	str	r0, [r7, #4]
    8e20:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    8e22:	687b      	ldr	r3, [r7, #4]
    8e24:	683a      	ldr	r2, [r7, #0]
    8e26:	615a      	str	r2, [r3, #20]
}
    8e28:	bf00      	nop
    8e2a:	370c      	adds	r7, #12
    8e2c:	46bd      	mov	sp, r7
    8e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e32:	4770      	bx	lr

00008e34 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    8e34:	b480      	push	{r7}
    8e36:	b083      	sub	sp, #12
    8e38:	af00      	add	r7, sp, #0
    8e3a:	6078      	str	r0, [r7, #4]
    8e3c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    8e3e:	687b      	ldr	r3, [r7, #4]
    8e40:	683a      	ldr	r2, [r7, #0]
    8e42:	611a      	str	r2, [r3, #16]
}
    8e44:	bf00      	nop
    8e46:	370c      	adds	r7, #12
    8e48:	46bd      	mov	sp, r7
    8e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e4e:	4770      	bx	lr

00008e50 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    8e50:	b480      	push	{r7}
    8e52:	b083      	sub	sp, #12
    8e54:	af00      	add	r7, sp, #0
    8e56:	6078      	str	r0, [r7, #4]
    8e58:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    8e5a:	687b      	ldr	r3, [r7, #4]
    8e5c:	683a      	ldr	r2, [r7, #0]
    8e5e:	60da      	str	r2, [r3, #12]
}
    8e60:	bf00      	nop
    8e62:	370c      	adds	r7, #12
    8e64:	46bd      	mov	sp, r7
    8e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e6a:	4770      	bx	lr

00008e6c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8e6c:	b580      	push	{r7, lr}
    8e6e:	b082      	sub	sp, #8
    8e70:	af00      	add	r7, sp, #0
    8e72:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    8e74:	687b      	ldr	r3, [r7, #4]
    8e76:	781b      	ldrb	r3, [r3, #0]
    8e78:	b2db      	uxtb	r3, r3
    8e7a:	f043 0302 	orr.w	r3, r3, #2
    8e7e:	b2da      	uxtb	r2, r3
    8e80:	687b      	ldr	r3, [r7, #4]
    8e82:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8e84:	2103      	movs	r1, #3
    8e86:	6878      	ldr	r0, [r7, #4]
    8e88:	4b02      	ldr	r3, [pc, #8]	; (8e94 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    8e8a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8e8c:	bf00      	nop
    8e8e:	3708      	adds	r7, #8
    8e90:	46bd      	mov	sp, r7
    8e92:	bd80      	pop	{r7, pc}
    8e94:	00008db5 	.word	0x00008db5

00008e98 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8e98:	b580      	push	{r7, lr}
    8e9a:	b082      	sub	sp, #8
    8e9c:	af00      	add	r7, sp, #0
    8e9e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    8ea0:	687b      	ldr	r3, [r7, #4]
    8ea2:	781b      	ldrb	r3, [r3, #0]
    8ea4:	b2db      	uxtb	r3, r3
    8ea6:	f023 0302 	bic.w	r3, r3, #2
    8eaa:	b2da      	uxtb	r2, r3
    8eac:	687b      	ldr	r3, [r7, #4]
    8eae:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8eb0:	2103      	movs	r1, #3
    8eb2:	6878      	ldr	r0, [r7, #4]
    8eb4:	4b02      	ldr	r3, [pc, #8]	; (8ec0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    8eb6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8eb8:	bf00      	nop
    8eba:	3708      	adds	r7, #8
    8ebc:	46bd      	mov	sp, r7
    8ebe:	bd80      	pop	{r7, pc}
    8ec0:	00008db5 	.word	0x00008db5

00008ec4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    8ec4:	b580      	push	{r7, lr}
    8ec6:	b084      	sub	sp, #16
    8ec8:	af00      	add	r7, sp, #0
    8eca:	6078      	str	r0, [r7, #4]
    8ecc:	460b      	mov	r3, r1
    8ece:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    8ed0:	687b      	ldr	r3, [r7, #4]
    8ed2:	781b      	ldrb	r3, [r3, #0]
    8ed4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    8ed6:	7bfb      	ldrb	r3, [r7, #15]
    8ed8:	f023 0310 	bic.w	r3, r3, #16
    8edc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    8ede:	78fb      	ldrb	r3, [r7, #3]
    8ee0:	011b      	lsls	r3, r3, #4
    8ee2:	b25a      	sxtb	r2, r3
    8ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8ee8:	4313      	orrs	r3, r2
    8eea:	b25b      	sxtb	r3, r3
    8eec:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    8eee:	687b      	ldr	r3, [r7, #4]
    8ef0:	7bfa      	ldrb	r2, [r7, #15]
    8ef2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8ef4:	2103      	movs	r1, #3
    8ef6:	6878      	ldr	r0, [r7, #4]
    8ef8:	4b02      	ldr	r3, [pc, #8]	; (8f04 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    8efa:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8efc:	bf00      	nop
    8efe:	3710      	adds	r7, #16
    8f00:	46bd      	mov	sp, r7
    8f02:	bd80      	pop	{r7, pc}
    8f04:	00008db5 	.word	0x00008db5

00008f08 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    8f08:	b580      	push	{r7, lr}
    8f0a:	b084      	sub	sp, #16
    8f0c:	af00      	add	r7, sp, #0
    8f0e:	6078      	str	r0, [r7, #4]
    8f10:	460b      	mov	r3, r1
    8f12:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8f14:	2103      	movs	r1, #3
    8f16:	6878      	ldr	r0, [r7, #4]
    8f18:	4b06      	ldr	r3, [pc, #24]	; (8f34 <hri_eic_get_CTRLA_reg+0x2c>)
    8f1a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    8f1c:	687b      	ldr	r3, [r7, #4]
    8f1e:	781b      	ldrb	r3, [r3, #0]
    8f20:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8f22:	7bfa      	ldrb	r2, [r7, #15]
    8f24:	78fb      	ldrb	r3, [r7, #3]
    8f26:	4013      	ands	r3, r2
    8f28:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8f2a:	7bfb      	ldrb	r3, [r7, #15]
}
    8f2c:	4618      	mov	r0, r3
    8f2e:	3710      	adds	r7, #16
    8f30:	46bd      	mov	sp, r7
    8f32:	bd80      	pop	{r7, pc}
    8f34:	00008db5 	.word	0x00008db5

00008f38 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    8f38:	b580      	push	{r7, lr}
    8f3a:	b082      	sub	sp, #8
    8f3c:	af00      	add	r7, sp, #0
    8f3e:	6078      	str	r0, [r7, #4]
    8f40:	460b      	mov	r3, r1
    8f42:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    8f44:	687b      	ldr	r3, [r7, #4]
    8f46:	78fa      	ldrb	r2, [r7, #3]
    8f48:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8f4a:	2103      	movs	r1, #3
    8f4c:	6878      	ldr	r0, [r7, #4]
    8f4e:	4b03      	ldr	r3, [pc, #12]	; (8f5c <hri_eic_write_CTRLA_reg+0x24>)
    8f50:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8f52:	bf00      	nop
    8f54:	3708      	adds	r7, #8
    8f56:	46bd      	mov	sp, r7
    8f58:	bd80      	pop	{r7, pc}
    8f5a:	bf00      	nop
    8f5c:	00008db5 	.word	0x00008db5

00008f60 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    8f60:	b480      	push	{r7}
    8f62:	b083      	sub	sp, #12
    8f64:	af00      	add	r7, sp, #0
    8f66:	6078      	str	r0, [r7, #4]
    8f68:	460b      	mov	r3, r1
    8f6a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    8f6c:	687b      	ldr	r3, [r7, #4]
    8f6e:	78fa      	ldrb	r2, [r7, #3]
    8f70:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8f72:	bf00      	nop
    8f74:	370c      	adds	r7, #12
    8f76:	46bd      	mov	sp, r7
    8f78:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f7c:	4770      	bx	lr

00008f7e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    8f7e:	b480      	push	{r7}
    8f80:	b083      	sub	sp, #12
    8f82:	af00      	add	r7, sp, #0
    8f84:	6078      	str	r0, [r7, #4]
    8f86:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    8f88:	687b      	ldr	r3, [r7, #4]
    8f8a:	683a      	ldr	r2, [r7, #0]
    8f8c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8f8e:	bf00      	nop
    8f90:	370c      	adds	r7, #12
    8f92:	46bd      	mov	sp, r7
    8f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f98:	4770      	bx	lr

00008f9a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    8f9a:	b480      	push	{r7}
    8f9c:	b083      	sub	sp, #12
    8f9e:	af00      	add	r7, sp, #0
    8fa0:	6078      	str	r0, [r7, #4]
    8fa2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    8fa4:	687b      	ldr	r3, [r7, #4]
    8fa6:	683a      	ldr	r2, [r7, #0]
    8fa8:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8faa:	bf00      	nop
    8fac:	370c      	adds	r7, #12
    8fae:	46bd      	mov	sp, r7
    8fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fb4:	4770      	bx	lr

00008fb6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    8fb6:	b480      	push	{r7}
    8fb8:	b085      	sub	sp, #20
    8fba:	af00      	add	r7, sp, #0
    8fbc:	60f8      	str	r0, [r7, #12]
    8fbe:	460b      	mov	r3, r1
    8fc0:	607a      	str	r2, [r7, #4]
    8fc2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    8fc4:	7afb      	ldrb	r3, [r7, #11]
    8fc6:	68fa      	ldr	r2, [r7, #12]
    8fc8:	3306      	adds	r3, #6
    8fca:	009b      	lsls	r3, r3, #2
    8fcc:	4413      	add	r3, r2
    8fce:	687a      	ldr	r2, [r7, #4]
    8fd0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8fd2:	bf00      	nop
    8fd4:	3714      	adds	r7, #20
    8fd6:	46bd      	mov	sp, r7
    8fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fdc:	4770      	bx	lr

00008fde <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    8fde:	b480      	push	{r7}
    8fe0:	b083      	sub	sp, #12
    8fe2:	af00      	add	r7, sp, #0
    8fe4:	6078      	str	r0, [r7, #4]
    8fe6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    8fe8:	687b      	ldr	r3, [r7, #4]
    8fea:	683a      	ldr	r2, [r7, #0]
    8fec:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    8fee:	bf00      	nop
    8ff0:	370c      	adds	r7, #12
    8ff2:	46bd      	mov	sp, r7
    8ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ff8:	4770      	bx	lr

00008ffa <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    8ffa:	b480      	push	{r7}
    8ffc:	b083      	sub	sp, #12
    8ffe:	af00      	add	r7, sp, #0
    9000:	6078      	str	r0, [r7, #4]
    9002:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    9004:	687b      	ldr	r3, [r7, #4]
    9006:	683a      	ldr	r2, [r7, #0]
    9008:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    900a:	bf00      	nop
    900c:	370c      	adds	r7, #12
    900e:	46bd      	mov	sp, r7
    9010:	f85d 7b04 	ldr.w	r7, [sp], #4
    9014:	4770      	bx	lr
	...

00009018 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    9018:	b580      	push	{r7, lr}
    901a:	b082      	sub	sp, #8
    901c:	af00      	add	r7, sp, #0
    901e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    9020:	2101      	movs	r1, #1
    9022:	4846      	ldr	r0, [pc, #280]	; (913c <_ext_irq_init+0x124>)
    9024:	4b46      	ldr	r3, [pc, #280]	; (9140 <_ext_irq_init+0x128>)
    9026:	4798      	blx	r3
    9028:	4603      	mov	r3, r0
    902a:	f083 0301 	eor.w	r3, r3, #1
    902e:	b2db      	uxtb	r3, r3
    9030:	2b00      	cmp	r3, #0
    9032:	d011      	beq.n	9058 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    9034:	2102      	movs	r1, #2
    9036:	4841      	ldr	r0, [pc, #260]	; (913c <_ext_irq_init+0x124>)
    9038:	4b42      	ldr	r3, [pc, #264]	; (9144 <_ext_irq_init+0x12c>)
    903a:	4798      	blx	r3
    903c:	4603      	mov	r3, r0
    903e:	2b00      	cmp	r3, #0
    9040:	d006      	beq.n	9050 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    9042:	483e      	ldr	r0, [pc, #248]	; (913c <_ext_irq_init+0x124>)
    9044:	4b40      	ldr	r3, [pc, #256]	; (9148 <_ext_irq_init+0x130>)
    9046:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    9048:	2102      	movs	r1, #2
    904a:	483c      	ldr	r0, [pc, #240]	; (913c <_ext_irq_init+0x124>)
    904c:	4b3f      	ldr	r3, [pc, #252]	; (914c <_ext_irq_init+0x134>)
    904e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    9050:	2101      	movs	r1, #1
    9052:	483a      	ldr	r0, [pc, #232]	; (913c <_ext_irq_init+0x124>)
    9054:	4b3e      	ldr	r3, [pc, #248]	; (9150 <_ext_irq_init+0x138>)
    9056:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    9058:	2101      	movs	r1, #1
    905a:	4838      	ldr	r0, [pc, #224]	; (913c <_ext_irq_init+0x124>)
    905c:	4b3b      	ldr	r3, [pc, #236]	; (914c <_ext_irq_init+0x134>)
    905e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    9060:	2100      	movs	r1, #0
    9062:	4836      	ldr	r0, [pc, #216]	; (913c <_ext_irq_init+0x124>)
    9064:	4b3b      	ldr	r3, [pc, #236]	; (9154 <_ext_irq_init+0x13c>)
    9066:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    9068:	2100      	movs	r1, #0
    906a:	4834      	ldr	r0, [pc, #208]	; (913c <_ext_irq_init+0x124>)
    906c:	4b3a      	ldr	r3, [pc, #232]	; (9158 <_ext_irq_init+0x140>)
    906e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    9070:	2100      	movs	r1, #0
    9072:	4832      	ldr	r0, [pc, #200]	; (913c <_ext_irq_init+0x124>)
    9074:	4b39      	ldr	r3, [pc, #228]	; (915c <_ext_irq_init+0x144>)
    9076:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    9078:	f240 31b1 	movw	r1, #945	; 0x3b1
    907c:	482f      	ldr	r0, [pc, #188]	; (913c <_ext_irq_init+0x124>)
    907e:	4b38      	ldr	r3, [pc, #224]	; (9160 <_ext_irq_init+0x148>)
    9080:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    9082:	f240 3131 	movw	r1, #817	; 0x331
    9086:	482d      	ldr	r0, [pc, #180]	; (913c <_ext_irq_init+0x124>)
    9088:	4b36      	ldr	r3, [pc, #216]	; (9164 <_ext_irq_init+0x14c>)
    908a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    908c:	2100      	movs	r1, #0
    908e:	482b      	ldr	r0, [pc, #172]	; (913c <_ext_irq_init+0x124>)
    9090:	4b35      	ldr	r3, [pc, #212]	; (9168 <_ext_irq_init+0x150>)
    9092:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    9094:	4a35      	ldr	r2, [pc, #212]	; (916c <_ext_irq_init+0x154>)
    9096:	2100      	movs	r1, #0
    9098:	4828      	ldr	r0, [pc, #160]	; (913c <_ext_irq_init+0x124>)
    909a:	4b35      	ldr	r3, [pc, #212]	; (9170 <_ext_irq_init+0x158>)
    909c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    909e:	2211      	movs	r2, #17
    90a0:	2101      	movs	r1, #1
    90a2:	4826      	ldr	r0, [pc, #152]	; (913c <_ext_irq_init+0x124>)
    90a4:	4b32      	ldr	r3, [pc, #200]	; (9170 <_ext_irq_init+0x158>)
    90a6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    90a8:	4824      	ldr	r0, [pc, #144]	; (913c <_ext_irq_init+0x124>)
    90aa:	4b32      	ldr	r3, [pc, #200]	; (9174 <_ext_irq_init+0x15c>)
    90ac:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    90ae:	200c      	movs	r0, #12
    90b0:	4b31      	ldr	r3, [pc, #196]	; (9178 <_ext_irq_init+0x160>)
    90b2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    90b4:	200c      	movs	r0, #12
    90b6:	4b31      	ldr	r3, [pc, #196]	; (917c <_ext_irq_init+0x164>)
    90b8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    90ba:	200c      	movs	r0, #12
    90bc:	4b30      	ldr	r3, [pc, #192]	; (9180 <_ext_irq_init+0x168>)
    90be:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    90c0:	2010      	movs	r0, #16
    90c2:	4b2d      	ldr	r3, [pc, #180]	; (9178 <_ext_irq_init+0x160>)
    90c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    90c6:	2010      	movs	r0, #16
    90c8:	4b2c      	ldr	r3, [pc, #176]	; (917c <_ext_irq_init+0x164>)
    90ca:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    90cc:	2010      	movs	r0, #16
    90ce:	4b2c      	ldr	r3, [pc, #176]	; (9180 <_ext_irq_init+0x168>)
    90d0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    90d2:	2011      	movs	r0, #17
    90d4:	4b28      	ldr	r3, [pc, #160]	; (9178 <_ext_irq_init+0x160>)
    90d6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    90d8:	2011      	movs	r0, #17
    90da:	4b28      	ldr	r3, [pc, #160]	; (917c <_ext_irq_init+0x164>)
    90dc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    90de:	2011      	movs	r0, #17
    90e0:	4b27      	ldr	r3, [pc, #156]	; (9180 <_ext_irq_init+0x168>)
    90e2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    90e4:	2012      	movs	r0, #18
    90e6:	4b24      	ldr	r3, [pc, #144]	; (9178 <_ext_irq_init+0x160>)
    90e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    90ea:	2012      	movs	r0, #18
    90ec:	4b23      	ldr	r3, [pc, #140]	; (917c <_ext_irq_init+0x164>)
    90ee:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    90f0:	2012      	movs	r0, #18
    90f2:	4b23      	ldr	r3, [pc, #140]	; (9180 <_ext_irq_init+0x168>)
    90f4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    90f6:	2013      	movs	r0, #19
    90f8:	4b1f      	ldr	r3, [pc, #124]	; (9178 <_ext_irq_init+0x160>)
    90fa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    90fc:	2013      	movs	r0, #19
    90fe:	4b1f      	ldr	r3, [pc, #124]	; (917c <_ext_irq_init+0x164>)
    9100:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    9102:	2013      	movs	r0, #19
    9104:	4b1e      	ldr	r3, [pc, #120]	; (9180 <_ext_irq_init+0x168>)
    9106:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    9108:	2014      	movs	r0, #20
    910a:	4b1b      	ldr	r3, [pc, #108]	; (9178 <_ext_irq_init+0x160>)
    910c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    910e:	2014      	movs	r0, #20
    9110:	4b1a      	ldr	r3, [pc, #104]	; (917c <_ext_irq_init+0x164>)
    9112:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    9114:	2014      	movs	r0, #20
    9116:	4b1a      	ldr	r3, [pc, #104]	; (9180 <_ext_irq_init+0x168>)
    9118:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    911a:	2015      	movs	r0, #21
    911c:	4b16      	ldr	r3, [pc, #88]	; (9178 <_ext_irq_init+0x160>)
    911e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    9120:	2015      	movs	r0, #21
    9122:	4b16      	ldr	r3, [pc, #88]	; (917c <_ext_irq_init+0x164>)
    9124:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    9126:	2015      	movs	r0, #21
    9128:	4b15      	ldr	r3, [pc, #84]	; (9180 <_ext_irq_init+0x168>)
    912a:	4798      	blx	r3

	callback = cb;
    912c:	4a15      	ldr	r2, [pc, #84]	; (9184 <_ext_irq_init+0x16c>)
    912e:	687b      	ldr	r3, [r7, #4]
    9130:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    9132:	2300      	movs	r3, #0
}
    9134:	4618      	mov	r0, r3
    9136:	3708      	adds	r7, #8
    9138:	46bd      	mov	sp, r7
    913a:	bd80      	pop	{r7, pc}
    913c:	40002800 	.word	0x40002800
    9140:	00008dd9 	.word	0x00008dd9
    9144:	00008f09 	.word	0x00008f09
    9148:	00008e99 	.word	0x00008e99
    914c:	00008db5 	.word	0x00008db5
    9150:	00008f39 	.word	0x00008f39
    9154:	00008ec5 	.word	0x00008ec5
    9158:	00008f61 	.word	0x00008f61
    915c:	00008f7f 	.word	0x00008f7f
    9160:	00008f9b 	.word	0x00008f9b
    9164:	00008fdf 	.word	0x00008fdf
    9168:	00008ffb 	.word	0x00008ffb
    916c:	90990003 	.word	0x90990003
    9170:	00008fb7 	.word	0x00008fb7
    9174:	00008e6d 	.word	0x00008e6d
    9178:	00008d35 	.word	0x00008d35
    917c:	00008d79 	.word	0x00008d79
    9180:	00008cf9 	.word	0x00008cf9
    9184:	200086f0 	.word	0x200086f0

00009188 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    9188:	b580      	push	{r7, lr}
    918a:	b084      	sub	sp, #16
    918c:	af00      	add	r7, sp, #0
    918e:	6078      	str	r0, [r7, #4]
    9190:	460b      	mov	r3, r1
    9192:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    9194:	23ff      	movs	r3, #255	; 0xff
    9196:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    9198:	2300      	movs	r3, #0
    919a:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    919c:	e010      	b.n	91c0 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    919e:	7bbb      	ldrb	r3, [r7, #14]
    91a0:	4a1c      	ldr	r2, [pc, #112]	; (9214 <_ext_irq_enable+0x8c>)
    91a2:	00db      	lsls	r3, r3, #3
    91a4:	4413      	add	r3, r2
    91a6:	685a      	ldr	r2, [r3, #4]
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	429a      	cmp	r2, r3
    91ac:	d105      	bne.n	91ba <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    91ae:	7bbb      	ldrb	r3, [r7, #14]
    91b0:	4a18      	ldr	r2, [pc, #96]	; (9214 <_ext_irq_enable+0x8c>)
    91b2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    91b6:	73fb      	strb	r3, [r7, #15]
			break;
    91b8:	e005      	b.n	91c6 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    91ba:	7bbb      	ldrb	r3, [r7, #14]
    91bc:	3301      	adds	r3, #1
    91be:	73bb      	strb	r3, [r7, #14]
    91c0:	7bbb      	ldrb	r3, [r7, #14]
    91c2:	2b06      	cmp	r3, #6
    91c4:	d9eb      	bls.n	919e <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    91c6:	7bfb      	ldrb	r3, [r7, #15]
    91c8:	2bff      	cmp	r3, #255	; 0xff
    91ca:	d102      	bne.n	91d2 <_ext_irq_enable+0x4a>
		return -1;
    91cc:	f04f 33ff 	mov.w	r3, #4294967295
    91d0:	e01c      	b.n	920c <_ext_irq_enable+0x84>
	}

	if (enable) {
    91d2:	78fb      	ldrb	r3, [r7, #3]
    91d4:	2b00      	cmp	r3, #0
    91d6:	d008      	beq.n	91ea <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    91d8:	7bfb      	ldrb	r3, [r7, #15]
    91da:	2201      	movs	r2, #1
    91dc:	fa02 f303 	lsl.w	r3, r2, r3
    91e0:	4619      	mov	r1, r3
    91e2:	480d      	ldr	r0, [pc, #52]	; (9218 <_ext_irq_enable+0x90>)
    91e4:	4b0d      	ldr	r3, [pc, #52]	; (921c <_ext_irq_enable+0x94>)
    91e6:	4798      	blx	r3
    91e8:	e00f      	b.n	920a <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    91ea:	7bfb      	ldrb	r3, [r7, #15]
    91ec:	2201      	movs	r2, #1
    91ee:	fa02 f303 	lsl.w	r3, r2, r3
    91f2:	4619      	mov	r1, r3
    91f4:	4808      	ldr	r0, [pc, #32]	; (9218 <_ext_irq_enable+0x90>)
    91f6:	4b0a      	ldr	r3, [pc, #40]	; (9220 <_ext_irq_enable+0x98>)
    91f8:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    91fa:	7bfb      	ldrb	r3, [r7, #15]
    91fc:	2201      	movs	r2, #1
    91fe:	fa02 f303 	lsl.w	r3, r2, r3
    9202:	4619      	mov	r1, r3
    9204:	4804      	ldr	r0, [pc, #16]	; (9218 <_ext_irq_enable+0x90>)
    9206:	4b07      	ldr	r3, [pc, #28]	; (9224 <_ext_irq_enable+0x9c>)
    9208:	4798      	blx	r3
	}

	return ERR_NONE;
    920a:	2300      	movs	r3, #0
}
    920c:	4618      	mov	r0, r3
    920e:	3710      	adds	r7, #16
    9210:	46bd      	mov	sp, r7
    9212:	bd80      	pop	{r7, pc}
    9214:	00021a1c 	.word	0x00021a1c
    9218:	40002800 	.word	0x40002800
    921c:	00008e35 	.word	0x00008e35
    9220:	00008e51 	.word	0x00008e51
    9224:	00008e19 	.word	0x00008e19

00009228 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    9228:	b580      	push	{r7, lr}
    922a:	b084      	sub	sp, #16
    922c:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    922e:	4841      	ldr	r0, [pc, #260]	; (9334 <_ext_irq_handler+0x10c>)
    9230:	4b41      	ldr	r3, [pc, #260]	; (9338 <_ext_irq_handler+0x110>)
    9232:	4798      	blx	r3
    9234:	4603      	mov	r3, r0
    9236:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    9238:	f04f 33ff 	mov.w	r3, #4294967295
    923c:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    923e:	683b      	ldr	r3, [r7, #0]
    9240:	4619      	mov	r1, r3
    9242:	483c      	ldr	r0, [pc, #240]	; (9334 <_ext_irq_handler+0x10c>)
    9244:	4b3d      	ldr	r3, [pc, #244]	; (933c <_ext_irq_handler+0x114>)
    9246:	4798      	blx	r3

	ASSERT(callback);
    9248:	4b3d      	ldr	r3, [pc, #244]	; (9340 <_ext_irq_handler+0x118>)
    924a:	681b      	ldr	r3, [r3, #0]
    924c:	2b00      	cmp	r3, #0
    924e:	bf14      	ite	ne
    9250:	2301      	movne	r3, #1
    9252:	2300      	moveq	r3, #0
    9254:	b2db      	uxtb	r3, r3
    9256:	f44f 7280 	mov.w	r2, #256	; 0x100
    925a:	493a      	ldr	r1, [pc, #232]	; (9344 <_ext_irq_handler+0x11c>)
    925c:	4618      	mov	r0, r3
    925e:	4b3a      	ldr	r3, [pc, #232]	; (9348 <_ext_irq_handler+0x120>)
    9260:	4798      	blx	r3

	while (flags) {
    9262:	e060      	b.n	9326 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    9264:	683b      	ldr	r3, [r7, #0]
    9266:	4618      	mov	r0, r3
    9268:	4b38      	ldr	r3, [pc, #224]	; (934c <_ext_irq_handler+0x124>)
    926a:	4798      	blx	r3
    926c:	4603      	mov	r3, r0
    926e:	b2db      	uxtb	r3, r3
    9270:	3b01      	subs	r3, #1
    9272:	b2db      	uxtb	r3, r3
    9274:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    9276:	e047      	b.n	9308 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    9278:	2300      	movs	r3, #0
    927a:	71fb      	strb	r3, [r7, #7]
    927c:	2307      	movs	r3, #7
    927e:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    9280:	e024      	b.n	92cc <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    9282:	79ba      	ldrb	r2, [r7, #6]
    9284:	79fb      	ldrb	r3, [r7, #7]
    9286:	4413      	add	r3, r2
    9288:	105b      	asrs	r3, r3, #1
    928a:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    928c:	797b      	ldrb	r3, [r7, #5]
    928e:	4a30      	ldr	r2, [pc, #192]	; (9350 <_ext_irq_handler+0x128>)
    9290:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    9294:	461a      	mov	r2, r3
    9296:	f997 300f 	ldrsb.w	r3, [r7, #15]
    929a:	429a      	cmp	r2, r3
    929c:	d106      	bne.n	92ac <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    929e:	797b      	ldrb	r3, [r7, #5]
    92a0:	4a2b      	ldr	r2, [pc, #172]	; (9350 <_ext_irq_handler+0x128>)
    92a2:	00db      	lsls	r3, r3, #3
    92a4:	4413      	add	r3, r2
    92a6:	685b      	ldr	r3, [r3, #4]
    92a8:	60bb      	str	r3, [r7, #8]
					break;
    92aa:	e013      	b.n	92d4 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    92ac:	797b      	ldrb	r3, [r7, #5]
    92ae:	4a28      	ldr	r2, [pc, #160]	; (9350 <_ext_irq_handler+0x128>)
    92b0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    92b4:	461a      	mov	r2, r3
    92b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    92ba:	429a      	cmp	r2, r3
    92bc:	da03      	bge.n	92c6 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    92be:	797b      	ldrb	r3, [r7, #5]
    92c0:	3301      	adds	r3, #1
    92c2:	71fb      	strb	r3, [r7, #7]
    92c4:	e002      	b.n	92cc <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    92c6:	797b      	ldrb	r3, [r7, #5]
    92c8:	3b01      	subs	r3, #1
    92ca:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    92cc:	79ba      	ldrb	r2, [r7, #6]
    92ce:	79fb      	ldrb	r3, [r7, #7]
    92d0:	429a      	cmp	r2, r3
    92d2:	d2d6      	bcs.n	9282 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    92d4:	68bb      	ldr	r3, [r7, #8]
    92d6:	f1b3 3fff 	cmp.w	r3, #4294967295
    92da:	d003      	beq.n	92e4 <_ext_irq_handler+0xbc>
				callback(pin);
    92dc:	4b18      	ldr	r3, [pc, #96]	; (9340 <_ext_irq_handler+0x118>)
    92de:	681b      	ldr	r3, [r3, #0]
    92e0:	68b8      	ldr	r0, [r7, #8]
    92e2:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    92e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    92e8:	2201      	movs	r2, #1
    92ea:	fa02 f303 	lsl.w	r3, r2, r3
    92ee:	43da      	mvns	r2, r3
    92f0:	683b      	ldr	r3, [r7, #0]
    92f2:	4013      	ands	r3, r2
    92f4:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    92f6:	683b      	ldr	r3, [r7, #0]
    92f8:	4618      	mov	r0, r3
    92fa:	4b14      	ldr	r3, [pc, #80]	; (934c <_ext_irq_handler+0x124>)
    92fc:	4798      	blx	r3
    92fe:	4603      	mov	r3, r0
    9300:	b2db      	uxtb	r3, r3
    9302:	3b01      	subs	r3, #1
    9304:	b2db      	uxtb	r3, r3
    9306:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    9308:	f997 300f 	ldrsb.w	r3, [r7, #15]
    930c:	f1b3 3fff 	cmp.w	r3, #4294967295
    9310:	d1b2      	bne.n	9278 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    9312:	4808      	ldr	r0, [pc, #32]	; (9334 <_ext_irq_handler+0x10c>)
    9314:	4b08      	ldr	r3, [pc, #32]	; (9338 <_ext_irq_handler+0x110>)
    9316:	4798      	blx	r3
    9318:	4603      	mov	r3, r0
    931a:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    931c:	683b      	ldr	r3, [r7, #0]
    931e:	4619      	mov	r1, r3
    9320:	4804      	ldr	r0, [pc, #16]	; (9334 <_ext_irq_handler+0x10c>)
    9322:	4b06      	ldr	r3, [pc, #24]	; (933c <_ext_irq_handler+0x114>)
    9324:	4798      	blx	r3
	while (flags) {
    9326:	683b      	ldr	r3, [r7, #0]
    9328:	2b00      	cmp	r3, #0
    932a:	d19b      	bne.n	9264 <_ext_irq_handler+0x3c>
	}
}
    932c:	bf00      	nop
    932e:	3710      	adds	r7, #16
    9330:	46bd      	mov	sp, r7
    9332:	bd80      	pop	{r7, pc}
    9334:	40002800 	.word	0x40002800
    9338:	00008e01 	.word	0x00008e01
    933c:	00008e19 	.word	0x00008e19
    9340:	200086f0 	.word	0x200086f0
    9344:	00021a54 	.word	0x00021a54
    9348:	00007e21 	.word	0x00007e21
    934c:	0001d0c9 	.word	0x0001d0c9
    9350:	00021a1c 	.word	0x00021a1c

00009354 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    9354:	b580      	push	{r7, lr}
    9356:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9358:	4b01      	ldr	r3, [pc, #4]	; (9360 <EIC_0_Handler+0xc>)
    935a:	4798      	blx	r3
} /**
    935c:	bf00      	nop
    935e:	bd80      	pop	{r7, pc}
    9360:	00009229 	.word	0x00009229

00009364 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    9364:	b580      	push	{r7, lr}
    9366:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9368:	4b01      	ldr	r3, [pc, #4]	; (9370 <EIC_4_Handler+0xc>)
    936a:	4798      	blx	r3
} /**
    936c:	bf00      	nop
    936e:	bd80      	pop	{r7, pc}
    9370:	00009229 	.word	0x00009229

00009374 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    9374:	b580      	push	{r7, lr}
    9376:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9378:	4b01      	ldr	r3, [pc, #4]	; (9380 <EIC_5_Handler+0xc>)
    937a:	4798      	blx	r3
} /**
    937c:	bf00      	nop
    937e:	bd80      	pop	{r7, pc}
    9380:	00009229 	.word	0x00009229

00009384 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    9384:	b580      	push	{r7, lr}
    9386:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9388:	4b01      	ldr	r3, [pc, #4]	; (9390 <EIC_6_Handler+0xc>)
    938a:	4798      	blx	r3
} /**
    938c:	bf00      	nop
    938e:	bd80      	pop	{r7, pc}
    9390:	00009229 	.word	0x00009229

00009394 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    9394:	b580      	push	{r7, lr}
    9396:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9398:	4b01      	ldr	r3, [pc, #4]	; (93a0 <EIC_7_Handler+0xc>)
    939a:	4798      	blx	r3
} /**
    939c:	bf00      	nop
    939e:	bd80      	pop	{r7, pc}
    93a0:	00009229 	.word	0x00009229

000093a4 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    93a4:	b580      	push	{r7, lr}
    93a6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    93a8:	4b01      	ldr	r3, [pc, #4]	; (93b0 <EIC_8_Handler+0xc>)
    93aa:	4798      	blx	r3
} /**
    93ac:	bf00      	nop
    93ae:	bd80      	pop	{r7, pc}
    93b0:	00009229 	.word	0x00009229

000093b4 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    93b4:	b580      	push	{r7, lr}
    93b6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    93b8:	4b01      	ldr	r3, [pc, #4]	; (93c0 <EIC_9_Handler+0xc>)
    93ba:	4798      	blx	r3
}
    93bc:	bf00      	nop
    93be:	bd80      	pop	{r7, pc}
    93c0:	00009229 	.word	0x00009229

000093c4 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    93c4:	b480      	push	{r7}
    93c6:	b085      	sub	sp, #20
    93c8:	af00      	add	r7, sp, #0
    93ca:	60f8      	str	r0, [r7, #12]
    93cc:	460b      	mov	r3, r1
    93ce:	607a      	str	r2, [r7, #4]
    93d0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    93d2:	7afa      	ldrb	r2, [r7, #11]
    93d4:	68fb      	ldr	r3, [r7, #12]
    93d6:	3248      	adds	r2, #72	; 0x48
    93d8:	6879      	ldr	r1, [r7, #4]
    93da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    93de:	bf00      	nop
    93e0:	3714      	adds	r7, #20
    93e2:	46bd      	mov	sp, r7
    93e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    93e8:	4770      	bx	lr

000093ea <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    93ea:	b480      	push	{r7}
    93ec:	b083      	sub	sp, #12
    93ee:	af00      	add	r7, sp, #0
    93f0:	6078      	str	r0, [r7, #4]
    93f2:	460b      	mov	r3, r1
    93f4:	70fb      	strb	r3, [r7, #3]
    93f6:	4613      	mov	r3, r2
    93f8:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    93fa:	78fb      	ldrb	r3, [r7, #3]
    93fc:	687a      	ldr	r2, [r7, #4]
    93fe:	3304      	adds	r3, #4
    9400:	00db      	lsls	r3, r3, #3
    9402:	4413      	add	r3, r2
    9404:	78ba      	ldrb	r2, [r7, #2]
    9406:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    9408:	78fb      	ldrb	r3, [r7, #3]
    940a:	78ba      	ldrb	r2, [r7, #2]
    940c:	43d2      	mvns	r2, r2
    940e:	b2d1      	uxtb	r1, r2
    9410:	687a      	ldr	r2, [r7, #4]
    9412:	3304      	adds	r3, #4
    9414:	00db      	lsls	r3, r3, #3
    9416:	4413      	add	r3, r2
    9418:	460a      	mov	r2, r1
    941a:	711a      	strb	r2, [r3, #4]
}
    941c:	bf00      	nop
    941e:	370c      	adds	r7, #12
    9420:	46bd      	mov	sp, r7
    9422:	f85d 7b04 	ldr.w	r7, [sp], #4
    9426:	4770      	bx	lr

00009428 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    9428:	b480      	push	{r7}
    942a:	b085      	sub	sp, #20
    942c:	af00      	add	r7, sp, #0
    942e:	60f8      	str	r0, [r7, #12]
    9430:	460b      	mov	r3, r1
    9432:	607a      	str	r2, [r7, #4]
    9434:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    9436:	7afa      	ldrb	r2, [r7, #11]
    9438:	68fb      	ldr	r3, [r7, #12]
    943a:	3204      	adds	r2, #4
    943c:	6879      	ldr	r1, [r7, #4]
    943e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    9442:	bf00      	nop
    9444:	3714      	adds	r7, #20
    9446:	46bd      	mov	sp, r7
    9448:	f85d 7b04 	ldr.w	r7, [sp], #4
    944c:	4770      	bx	lr
	...

00009450 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    9450:	b580      	push	{r7, lr}
    9452:	b082      	sub	sp, #8
    9454:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    9456:	2300      	movs	r3, #0
    9458:	71fb      	strb	r3, [r7, #7]
    945a:	e00b      	b.n	9474 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    945c:	79fb      	ldrb	r3, [r7, #7]
    945e:	4a18      	ldr	r2, [pc, #96]	; (94c0 <_event_system_init+0x70>)
    9460:	5cd3      	ldrb	r3, [r2, r3]
    9462:	461a      	mov	r2, r3
    9464:	79fb      	ldrb	r3, [r7, #7]
    9466:	4619      	mov	r1, r3
    9468:	4816      	ldr	r0, [pc, #88]	; (94c4 <_event_system_init+0x74>)
    946a:	4b17      	ldr	r3, [pc, #92]	; (94c8 <_event_system_init+0x78>)
    946c:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    946e:	79fb      	ldrb	r3, [r7, #7]
    9470:	3301      	adds	r3, #1
    9472:	71fb      	strb	r3, [r7, #7]
    9474:	79fb      	ldrb	r3, [r7, #7]
    9476:	2b42      	cmp	r3, #66	; 0x42
    9478:	d9f0      	bls.n	945c <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    947a:	2300      	movs	r3, #0
    947c:	71fb      	strb	r3, [r7, #7]
    947e:	e016      	b.n	94ae <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    9480:	79fb      	ldrb	r3, [r7, #7]
    9482:	4a12      	ldr	r2, [pc, #72]	; (94cc <_event_system_init+0x7c>)
    9484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    9488:	461a      	mov	r2, r3
    948a:	79fb      	ldrb	r3, [r7, #7]
    948c:	4619      	mov	r1, r3
    948e:	480d      	ldr	r0, [pc, #52]	; (94c4 <_event_system_init+0x74>)
    9490:	4b0f      	ldr	r3, [pc, #60]	; (94d0 <_event_system_init+0x80>)
    9492:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    9494:	79fb      	ldrb	r3, [r7, #7]
    9496:	4a0f      	ldr	r2, [pc, #60]	; (94d4 <_event_system_init+0x84>)
    9498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    949c:	b2da      	uxtb	r2, r3
    949e:	79fb      	ldrb	r3, [r7, #7]
    94a0:	4619      	mov	r1, r3
    94a2:	4808      	ldr	r0, [pc, #32]	; (94c4 <_event_system_init+0x74>)
    94a4:	4b0c      	ldr	r3, [pc, #48]	; (94d8 <_event_system_init+0x88>)
    94a6:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    94a8:	79fb      	ldrb	r3, [r7, #7]
    94aa:	3301      	adds	r3, #1
    94ac:	71fb      	strb	r3, [r7, #7]
    94ae:	79fb      	ldrb	r3, [r7, #7]
    94b0:	2b1f      	cmp	r3, #31
    94b2:	d9e5      	bls.n	9480 <_event_system_init+0x30>
	}

	return ERR_NONE;
    94b4:	2300      	movs	r3, #0
}
    94b6:	4618      	mov	r0, r3
    94b8:	3708      	adds	r7, #8
    94ba:	46bd      	mov	sp, r7
    94bc:	bd80      	pop	{r7, pc}
    94be:	bf00      	nop
    94c0:	00021a6c 	.word	0x00021a6c
    94c4:	4100e000 	.word	0x4100e000
    94c8:	000093c5 	.word	0x000093c5
    94cc:	00021ab0 	.word	0x00021ab0
    94d0:	00009429 	.word	0x00009429
    94d4:	00021af0 	.word	0x00021af0
    94d8:	000093eb 	.word	0x000093eb

000094dc <hri_gclk_wait_for_sync>:
{
    94dc:	b480      	push	{r7}
    94de:	b083      	sub	sp, #12
    94e0:	af00      	add	r7, sp, #0
    94e2:	6078      	str	r0, [r7, #4]
    94e4:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    94e6:	bf00      	nop
    94e8:	687b      	ldr	r3, [r7, #4]
    94ea:	685a      	ldr	r2, [r3, #4]
    94ec:	683b      	ldr	r3, [r7, #0]
    94ee:	4013      	ands	r3, r2
    94f0:	2b00      	cmp	r3, #0
    94f2:	d1f9      	bne.n	94e8 <hri_gclk_wait_for_sync+0xc>
}
    94f4:	bf00      	nop
    94f6:	370c      	adds	r7, #12
    94f8:	46bd      	mov	sp, r7
    94fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    94fe:	4770      	bx	lr

00009500 <hri_gclk_write_GENCTRL_reg>:
{
    9500:	b580      	push	{r7, lr}
    9502:	b084      	sub	sp, #16
    9504:	af00      	add	r7, sp, #0
    9506:	60f8      	str	r0, [r7, #12]
    9508:	460b      	mov	r3, r1
    950a:	607a      	str	r2, [r7, #4]
    950c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    950e:	7afa      	ldrb	r2, [r7, #11]
    9510:	68fb      	ldr	r3, [r7, #12]
    9512:	3208      	adds	r2, #8
    9514:	6879      	ldr	r1, [r7, #4]
    9516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    951a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    951e:	68f8      	ldr	r0, [r7, #12]
    9520:	4b02      	ldr	r3, [pc, #8]	; (952c <hri_gclk_write_GENCTRL_reg+0x2c>)
    9522:	4798      	blx	r3
}
    9524:	bf00      	nop
    9526:	3710      	adds	r7, #16
    9528:	46bd      	mov	sp, r7
    952a:	bd80      	pop	{r7, pc}
    952c:	000094dd 	.word	0x000094dd

00009530 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    9530:	b580      	push	{r7, lr}
    9532:	b082      	sub	sp, #8
    9534:	af00      	add	r7, sp, #0
    9536:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    9538:	687b      	ldr	r3, [r7, #4]
    953a:	f003 0301 	and.w	r3, r3, #1
    953e:	2b00      	cmp	r3, #0
    9540:	d004      	beq.n	954c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    9542:	4a36      	ldr	r2, [pc, #216]	; (961c <_gclk_init_generators_by_fref+0xec>)
    9544:	2100      	movs	r1, #0
    9546:	4836      	ldr	r0, [pc, #216]	; (9620 <_gclk_init_generators_by_fref+0xf0>)
    9548:	4b36      	ldr	r3, [pc, #216]	; (9624 <_gclk_init_generators_by_fref+0xf4>)
    954a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    954c:	687b      	ldr	r3, [r7, #4]
    954e:	f003 0302 	and.w	r3, r3, #2
    9552:	2b00      	cmp	r3, #0
    9554:	d004      	beq.n	9560 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    9556:	4a34      	ldr	r2, [pc, #208]	; (9628 <_gclk_init_generators_by_fref+0xf8>)
    9558:	2101      	movs	r1, #1
    955a:	4831      	ldr	r0, [pc, #196]	; (9620 <_gclk_init_generators_by_fref+0xf0>)
    955c:	4b31      	ldr	r3, [pc, #196]	; (9624 <_gclk_init_generators_by_fref+0xf4>)
    955e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    9560:	687b      	ldr	r3, [r7, #4]
    9562:	f003 0304 	and.w	r3, r3, #4
    9566:	2b00      	cmp	r3, #0
    9568:	d004      	beq.n	9574 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    956a:	4a30      	ldr	r2, [pc, #192]	; (962c <_gclk_init_generators_by_fref+0xfc>)
    956c:	2102      	movs	r1, #2
    956e:	482c      	ldr	r0, [pc, #176]	; (9620 <_gclk_init_generators_by_fref+0xf0>)
    9570:	4b2c      	ldr	r3, [pc, #176]	; (9624 <_gclk_init_generators_by_fref+0xf4>)
    9572:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    9574:	687b      	ldr	r3, [r7, #4]
    9576:	f003 0308 	and.w	r3, r3, #8
    957a:	2b00      	cmp	r3, #0
    957c:	d004      	beq.n	9588 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    957e:	4a2c      	ldr	r2, [pc, #176]	; (9630 <_gclk_init_generators_by_fref+0x100>)
    9580:	2103      	movs	r1, #3
    9582:	4827      	ldr	r0, [pc, #156]	; (9620 <_gclk_init_generators_by_fref+0xf0>)
    9584:	4b27      	ldr	r3, [pc, #156]	; (9624 <_gclk_init_generators_by_fref+0xf4>)
    9586:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    9588:	687b      	ldr	r3, [r7, #4]
    958a:	f003 0310 	and.w	r3, r3, #16
    958e:	2b00      	cmp	r3, #0
    9590:	d004      	beq.n	959c <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    9592:	4a28      	ldr	r2, [pc, #160]	; (9634 <_gclk_init_generators_by_fref+0x104>)
    9594:	2104      	movs	r1, #4
    9596:	4822      	ldr	r0, [pc, #136]	; (9620 <_gclk_init_generators_by_fref+0xf0>)
    9598:	4b22      	ldr	r3, [pc, #136]	; (9624 <_gclk_init_generators_by_fref+0xf4>)
    959a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    959c:	687b      	ldr	r3, [r7, #4]
    959e:	f003 0320 	and.w	r3, r3, #32
    95a2:	2b00      	cmp	r3, #0
    95a4:	d004      	beq.n	95b0 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    95a6:	4a24      	ldr	r2, [pc, #144]	; (9638 <_gclk_init_generators_by_fref+0x108>)
    95a8:	2105      	movs	r1, #5
    95aa:	481d      	ldr	r0, [pc, #116]	; (9620 <_gclk_init_generators_by_fref+0xf0>)
    95ac:	4b1d      	ldr	r3, [pc, #116]	; (9624 <_gclk_init_generators_by_fref+0xf4>)
    95ae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    95b0:	687b      	ldr	r3, [r7, #4]
    95b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    95b6:	2b00      	cmp	r3, #0
    95b8:	d004      	beq.n	95c4 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    95ba:	4a20      	ldr	r2, [pc, #128]	; (963c <_gclk_init_generators_by_fref+0x10c>)
    95bc:	2106      	movs	r1, #6
    95be:	4818      	ldr	r0, [pc, #96]	; (9620 <_gclk_init_generators_by_fref+0xf0>)
    95c0:	4b18      	ldr	r3, [pc, #96]	; (9624 <_gclk_init_generators_by_fref+0xf4>)
    95c2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    95c4:	687b      	ldr	r3, [r7, #4]
    95c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    95ca:	2b00      	cmp	r3, #0
    95cc:	d004      	beq.n	95d8 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    95ce:	4a1c      	ldr	r2, [pc, #112]	; (9640 <_gclk_init_generators_by_fref+0x110>)
    95d0:	2107      	movs	r1, #7
    95d2:	4813      	ldr	r0, [pc, #76]	; (9620 <_gclk_init_generators_by_fref+0xf0>)
    95d4:	4b13      	ldr	r3, [pc, #76]	; (9624 <_gclk_init_generators_by_fref+0xf4>)
    95d6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    95d8:	687b      	ldr	r3, [r7, #4]
    95da:	f403 7380 	and.w	r3, r3, #256	; 0x100
    95de:	2b00      	cmp	r3, #0
    95e0:	d004      	beq.n	95ec <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    95e2:	4a18      	ldr	r2, [pc, #96]	; (9644 <_gclk_init_generators_by_fref+0x114>)
    95e4:	2108      	movs	r1, #8
    95e6:	480e      	ldr	r0, [pc, #56]	; (9620 <_gclk_init_generators_by_fref+0xf0>)
    95e8:	4b0e      	ldr	r3, [pc, #56]	; (9624 <_gclk_init_generators_by_fref+0xf4>)
    95ea:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    95ec:	687b      	ldr	r3, [r7, #4]
    95ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    95f2:	2b00      	cmp	r3, #0
    95f4:	d004      	beq.n	9600 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    95f6:	4a14      	ldr	r2, [pc, #80]	; (9648 <_gclk_init_generators_by_fref+0x118>)
    95f8:	210a      	movs	r1, #10
    95fa:	4809      	ldr	r0, [pc, #36]	; (9620 <_gclk_init_generators_by_fref+0xf0>)
    95fc:	4b09      	ldr	r3, [pc, #36]	; (9624 <_gclk_init_generators_by_fref+0xf4>)
    95fe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    9600:	687b      	ldr	r3, [r7, #4]
    9602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    9606:	2b00      	cmp	r3, #0
    9608:	d004      	beq.n	9614 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    960a:	4a10      	ldr	r2, [pc, #64]	; (964c <_gclk_init_generators_by_fref+0x11c>)
    960c:	210b      	movs	r1, #11
    960e:	4804      	ldr	r0, [pc, #16]	; (9620 <_gclk_init_generators_by_fref+0xf0>)
    9610:	4b04      	ldr	r3, [pc, #16]	; (9624 <_gclk_init_generators_by_fref+0xf4>)
    9612:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    9614:	bf00      	nop
    9616:	3708      	adds	r7, #8
    9618:	46bd      	mov	sp, r7
    961a:	bd80      	pop	{r7, pc}
    961c:	00010107 	.word	0x00010107
    9620:	40001c00 	.word	0x40001c00
    9624:	00009501 	.word	0x00009501
    9628:	00010907 	.word	0x00010907
    962c:	00010906 	.word	0x00010906
    9630:	00020908 	.word	0x00020908
    9634:	00010901 	.word	0x00010901
    9638:	00062901 	.word	0x00062901
    963c:	000c2901 	.word	0x000c2901
    9640:	00082908 	.word	0x00082908
    9644:	00032901 	.word	0x00032901
    9648:	00010905 	.word	0x00010905
    964c:	00041905 	.word	0x00041905

00009650 <hri_mclk_write_CPUDIV_reg>:
{
    9650:	b480      	push	{r7}
    9652:	b083      	sub	sp, #12
    9654:	af00      	add	r7, sp, #0
    9656:	6078      	str	r0, [r7, #4]
    9658:	460b      	mov	r3, r1
    965a:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    965c:	687b      	ldr	r3, [r7, #4]
    965e:	78fa      	ldrb	r2, [r7, #3]
    9660:	715a      	strb	r2, [r3, #5]
}
    9662:	bf00      	nop
    9664:	370c      	adds	r7, #12
    9666:	46bd      	mov	sp, r7
    9668:	f85d 7b04 	ldr.w	r7, [sp], #4
    966c:	4770      	bx	lr
	...

00009670 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    9670:	b580      	push	{r7, lr}
    9672:	b082      	sub	sp, #8
    9674:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    9676:	4b05      	ldr	r3, [pc, #20]	; (968c <_mclk_init+0x1c>)
    9678:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    967a:	2101      	movs	r1, #1
    967c:	6878      	ldr	r0, [r7, #4]
    967e:	4b04      	ldr	r3, [pc, #16]	; (9690 <_mclk_init+0x20>)
    9680:	4798      	blx	r3
}
    9682:	bf00      	nop
    9684:	3708      	adds	r7, #8
    9686:	46bd      	mov	sp, r7
    9688:	bd80      	pop	{r7, pc}
    968a:	bf00      	nop
    968c:	40000800 	.word	0x40000800
    9690:	00009651 	.word	0x00009651

00009694 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    9694:	b480      	push	{r7}
    9696:	b083      	sub	sp, #12
    9698:	af00      	add	r7, sp, #0
    969a:	6078      	str	r0, [r7, #4]
    969c:	460b      	mov	r3, r1
    969e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    96a0:	687b      	ldr	r3, [r7, #4]
    96a2:	78fa      	ldrb	r2, [r7, #3]
    96a4:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    96a6:	bf00      	nop
    96a8:	370c      	adds	r7, #12
    96aa:	46bd      	mov	sp, r7
    96ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    96b0:	4770      	bx	lr

000096b2 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    96b2:	b480      	push	{r7}
    96b4:	b083      	sub	sp, #12
    96b6:	af00      	add	r7, sp, #0
    96b8:	6078      	str	r0, [r7, #4]
    96ba:	460b      	mov	r3, r1
    96bc:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    96be:	687b      	ldr	r3, [r7, #4]
    96c0:	887a      	ldrh	r2, [r7, #2]
    96c2:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    96c4:	bf00      	nop
    96c6:	370c      	adds	r7, #12
    96c8:	46bd      	mov	sp, r7
    96ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    96ce:	4770      	bx	lr

000096d0 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    96d0:	b480      	push	{r7}
    96d2:	b083      	sub	sp, #12
    96d4:	af00      	add	r7, sp, #0
    96d6:	6078      	str	r0, [r7, #4]
    96d8:	460b      	mov	r3, r1
    96da:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    96dc:	687b      	ldr	r3, [r7, #4]
    96de:	78fa      	ldrb	r2, [r7, #3]
    96e0:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    96e2:	bf00      	nop
    96e4:	370c      	adds	r7, #12
    96e6:	46bd      	mov	sp, r7
    96e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    96ec:	4770      	bx	lr

000096ee <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    96ee:	b480      	push	{r7}
    96f0:	b083      	sub	sp, #12
    96f2:	af00      	add	r7, sp, #0
    96f4:	6078      	str	r0, [r7, #4]
    96f6:	460b      	mov	r3, r1
    96f8:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    96fa:	687b      	ldr	r3, [r7, #4]
    96fc:	78fa      	ldrb	r2, [r7, #3]
    96fe:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9700:	bf00      	nop
    9702:	370c      	adds	r7, #12
    9704:	46bd      	mov	sp, r7
    9706:	f85d 7b04 	ldr.w	r7, [sp], #4
    970a:	4770      	bx	lr

0000970c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    970c:	b480      	push	{r7}
    970e:	b085      	sub	sp, #20
    9710:	af00      	add	r7, sp, #0
    9712:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    9714:	687b      	ldr	r3, [r7, #4]
    9716:	69db      	ldr	r3, [r3, #28]
    9718:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    971a:	68fb      	ldr	r3, [r7, #12]
    971c:	0a1b      	lsrs	r3, r3, #8
    971e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9722:	60fb      	str	r3, [r7, #12]
	return tmp;
    9724:	68fb      	ldr	r3, [r7, #12]
}
    9726:	4618      	mov	r0, r3
    9728:	3714      	adds	r7, #20
    972a:	46bd      	mov	sp, r7
    972c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9730:	4770      	bx	lr

00009732 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    9732:	b480      	push	{r7}
    9734:	b083      	sub	sp, #12
    9736:	af00      	add	r7, sp, #0
    9738:	6078      	str	r0, [r7, #4]
    973a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	683a      	ldr	r2, [r7, #0]
    9740:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9742:	bf00      	nop
    9744:	370c      	adds	r7, #12
    9746:	46bd      	mov	sp, r7
    9748:	f85d 7b04 	ldr.w	r7, [sp], #4
    974c:	4770      	bx	lr
	...

00009750 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    9750:	b580      	push	{r7, lr}
    9752:	b082      	sub	sp, #8
    9754:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    9756:	4b13      	ldr	r3, [pc, #76]	; (97a4 <_osc32kctrl_init_sources+0x54>)
    9758:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    975a:	2300      	movs	r3, #0
    975c:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    975e:	f242 018e 	movw	r1, #8334	; 0x208e
    9762:	6878      	ldr	r0, [r7, #4]
    9764:	4b10      	ldr	r3, [pc, #64]	; (97a8 <_osc32kctrl_init_sources+0x58>)
    9766:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    9768:	2100      	movs	r1, #0
    976a:	6878      	ldr	r0, [r7, #4]
    976c:	4b0f      	ldr	r3, [pc, #60]	; (97ac <_osc32kctrl_init_sources+0x5c>)
    976e:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    9770:	2100      	movs	r1, #0
    9772:	6878      	ldr	r0, [r7, #4]
    9774:	4b0e      	ldr	r3, [pc, #56]	; (97b0 <_osc32kctrl_init_sources+0x60>)
    9776:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    9778:	6878      	ldr	r0, [r7, #4]
    977a:	4b0e      	ldr	r3, [pc, #56]	; (97b4 <_osc32kctrl_init_sources+0x64>)
    977c:	4798      	blx	r3
    977e:	4603      	mov	r3, r0
    9780:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    9782:	887b      	ldrh	r3, [r7, #2]
    9784:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    9786:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    978a:	4619      	mov	r1, r3
    978c:	6878      	ldr	r0, [r7, #4]
    978e:	4b0a      	ldr	r3, [pc, #40]	; (97b8 <_osc32kctrl_init_sources+0x68>)
    9790:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    9792:	2100      	movs	r1, #0
    9794:	6878      	ldr	r0, [r7, #4]
    9796:	4b09      	ldr	r3, [pc, #36]	; (97bc <_osc32kctrl_init_sources+0x6c>)
    9798:	4798      	blx	r3
	(void)calib;
}
    979a:	bf00      	nop
    979c:	3708      	adds	r7, #8
    979e:	46bd      	mov	sp, r7
    97a0:	bd80      	pop	{r7, pc}
    97a2:	bf00      	nop
    97a4:	40001400 	.word	0x40001400
    97a8:	000096b3 	.word	0x000096b3
    97ac:	000096d1 	.word	0x000096d1
    97b0:	000096ef 	.word	0x000096ef
    97b4:	0000970d 	.word	0x0000970d
    97b8:	00009733 	.word	0x00009733
    97bc:	00009695 	.word	0x00009695

000097c0 <hri_gclk_wait_for_sync>:
{
    97c0:	b480      	push	{r7}
    97c2:	b083      	sub	sp, #12
    97c4:	af00      	add	r7, sp, #0
    97c6:	6078      	str	r0, [r7, #4]
    97c8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    97ca:	bf00      	nop
    97cc:	687b      	ldr	r3, [r7, #4]
    97ce:	685a      	ldr	r2, [r3, #4]
    97d0:	683b      	ldr	r3, [r7, #0]
    97d2:	4013      	ands	r3, r2
    97d4:	2b00      	cmp	r3, #0
    97d6:	d1f9      	bne.n	97cc <hri_gclk_wait_for_sync+0xc>
}
    97d8:	bf00      	nop
    97da:	370c      	adds	r7, #12
    97dc:	46bd      	mov	sp, r7
    97de:	f85d 7b04 	ldr.w	r7, [sp], #4
    97e2:	4770      	bx	lr

000097e4 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    97e4:	b480      	push	{r7}
    97e6:	b083      	sub	sp, #12
    97e8:	af00      	add	r7, sp, #0
    97ea:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    97ec:	687b      	ldr	r3, [r7, #4]
    97ee:	685b      	ldr	r3, [r3, #4]
    97f0:	089b      	lsrs	r3, r3, #2
    97f2:	f003 0301 	and.w	r3, r3, #1
    97f6:	2b00      	cmp	r3, #0
    97f8:	bf14      	ite	ne
    97fa:	2301      	movne	r3, #1
    97fc:	2300      	moveq	r3, #0
    97fe:	b2db      	uxtb	r3, r3
}
    9800:	4618      	mov	r0, r3
    9802:	370c      	adds	r7, #12
    9804:	46bd      	mov	sp, r7
    9806:	f85d 7b04 	ldr.w	r7, [sp], #4
    980a:	4770      	bx	lr

0000980c <hri_gclk_read_SYNCBUSY_reg>:
{
    980c:	b480      	push	{r7}
    980e:	b083      	sub	sp, #12
    9810:	af00      	add	r7, sp, #0
    9812:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    9814:	687b      	ldr	r3, [r7, #4]
    9816:	685b      	ldr	r3, [r3, #4]
}
    9818:	4618      	mov	r0, r3
    981a:	370c      	adds	r7, #12
    981c:	46bd      	mov	sp, r7
    981e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9822:	4770      	bx	lr

00009824 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    9824:	b580      	push	{r7, lr}
    9826:	b086      	sub	sp, #24
    9828:	af00      	add	r7, sp, #0
    982a:	60f8      	str	r0, [r7, #12]
    982c:	460b      	mov	r3, r1
    982e:	607a      	str	r2, [r7, #4]
    9830:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    9832:	7afa      	ldrb	r2, [r7, #11]
    9834:	68fb      	ldr	r3, [r7, #12]
    9836:	3208      	adds	r2, #8
    9838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    983c:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    983e:	697b      	ldr	r3, [r7, #20]
    9840:	f023 030f 	bic.w	r3, r3, #15
    9844:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    9846:	687b      	ldr	r3, [r7, #4]
    9848:	f003 030f 	and.w	r3, r3, #15
    984c:	697a      	ldr	r2, [r7, #20]
    984e:	4313      	orrs	r3, r2
    9850:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    9852:	7afa      	ldrb	r2, [r7, #11]
    9854:	68fb      	ldr	r3, [r7, #12]
    9856:	3208      	adds	r2, #8
    9858:	6979      	ldr	r1, [r7, #20]
    985a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    985e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    9862:	68f8      	ldr	r0, [r7, #12]
    9864:	4b02      	ldr	r3, [pc, #8]	; (9870 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    9866:	4798      	blx	r3
}
    9868:	bf00      	nop
    986a:	3718      	adds	r7, #24
    986c:	46bd      	mov	sp, r7
    986e:	bd80      	pop	{r7, pc}
    9870:	000097c1 	.word	0x000097c1

00009874 <hri_gclk_write_PCHCTRL_reg>:
{
    9874:	b480      	push	{r7}
    9876:	b085      	sub	sp, #20
    9878:	af00      	add	r7, sp, #0
    987a:	60f8      	str	r0, [r7, #12]
    987c:	460b      	mov	r3, r1
    987e:	607a      	str	r2, [r7, #4]
    9880:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    9882:	7afa      	ldrb	r2, [r7, #11]
    9884:	68fb      	ldr	r3, [r7, #12]
    9886:	3220      	adds	r2, #32
    9888:	6879      	ldr	r1, [r7, #4]
    988a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    988e:	bf00      	nop
    9890:	3714      	adds	r7, #20
    9892:	46bd      	mov	sp, r7
    9894:	f85d 7b04 	ldr.w	r7, [sp], #4
    9898:	4770      	bx	lr

0000989a <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    989a:	b480      	push	{r7}
    989c:	b085      	sub	sp, #20
    989e:	af00      	add	r7, sp, #0
    98a0:	60f8      	str	r0, [r7, #12]
    98a2:	460b      	mov	r3, r1
    98a4:	607a      	str	r2, [r7, #4]
    98a6:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    98a8:	bf00      	nop
    98aa:	7afa      	ldrb	r2, [r7, #11]
    98ac:	68f9      	ldr	r1, [r7, #12]
    98ae:	4613      	mov	r3, r2
    98b0:	009b      	lsls	r3, r3, #2
    98b2:	4413      	add	r3, r2
    98b4:	009b      	lsls	r3, r3, #2
    98b6:	440b      	add	r3, r1
    98b8:	333c      	adds	r3, #60	; 0x3c
    98ba:	681a      	ldr	r2, [r3, #0]
    98bc:	687b      	ldr	r3, [r7, #4]
    98be:	4013      	ands	r3, r2
    98c0:	2b00      	cmp	r3, #0
    98c2:	d1f2      	bne.n	98aa <hri_oscctrl_wait_for_sync+0x10>
	};
}
    98c4:	bf00      	nop
    98c6:	3714      	adds	r7, #20
    98c8:	46bd      	mov	sp, r7
    98ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    98ce:	4770      	bx	lr

000098d0 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    98d0:	b480      	push	{r7}
    98d2:	b083      	sub	sp, #12
    98d4:	af00      	add	r7, sp, #0
    98d6:	6078      	str	r0, [r7, #4]
    98d8:	460b      	mov	r3, r1
    98da:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    98dc:	78fa      	ldrb	r2, [r7, #3]
    98de:	6879      	ldr	r1, [r7, #4]
    98e0:	4613      	mov	r3, r2
    98e2:	009b      	lsls	r3, r3, #2
    98e4:	4413      	add	r3, r2
    98e6:	009b      	lsls	r3, r3, #2
    98e8:	440b      	add	r3, r1
    98ea:	3340      	adds	r3, #64	; 0x40
    98ec:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    98ee:	f003 0301 	and.w	r3, r3, #1
    98f2:	2b00      	cmp	r3, #0
    98f4:	bf14      	ite	ne
    98f6:	2301      	movne	r3, #1
    98f8:	2300      	moveq	r3, #0
    98fa:	b2db      	uxtb	r3, r3
}
    98fc:	4618      	mov	r0, r3
    98fe:	370c      	adds	r7, #12
    9900:	46bd      	mov	sp, r7
    9902:	f85d 7b04 	ldr.w	r7, [sp], #4
    9906:	4770      	bx	lr

00009908 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    9908:	b480      	push	{r7}
    990a:	b083      	sub	sp, #12
    990c:	af00      	add	r7, sp, #0
    990e:	6078      	str	r0, [r7, #4]
    9910:	460b      	mov	r3, r1
    9912:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    9914:	78fa      	ldrb	r2, [r7, #3]
    9916:	6879      	ldr	r1, [r7, #4]
    9918:	4613      	mov	r3, r2
    991a:	009b      	lsls	r3, r3, #2
    991c:	4413      	add	r3, r2
    991e:	009b      	lsls	r3, r3, #2
    9920:	440b      	add	r3, r1
    9922:	3340      	adds	r3, #64	; 0x40
    9924:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    9926:	085b      	lsrs	r3, r3, #1
    9928:	f003 0301 	and.w	r3, r3, #1
    992c:	2b00      	cmp	r3, #0
    992e:	bf14      	ite	ne
    9930:	2301      	movne	r3, #1
    9932:	2300      	moveq	r3, #0
    9934:	b2db      	uxtb	r3, r3
}
    9936:	4618      	mov	r0, r3
    9938:	370c      	adds	r7, #12
    993a:	46bd      	mov	sp, r7
    993c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9940:	4770      	bx	lr
	...

00009944 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    9944:	b580      	push	{r7, lr}
    9946:	b082      	sub	sp, #8
    9948:	af00      	add	r7, sp, #0
    994a:	6078      	str	r0, [r7, #4]
    994c:	460b      	mov	r3, r1
    994e:	70fb      	strb	r3, [r7, #3]
    9950:	4613      	mov	r3, r2
    9952:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    9954:	78fa      	ldrb	r2, [r7, #3]
    9956:	6879      	ldr	r1, [r7, #4]
    9958:	4613      	mov	r3, r2
    995a:	009b      	lsls	r3, r3, #2
    995c:	4413      	add	r3, r2
    995e:	009b      	lsls	r3, r3, #2
    9960:	440b      	add	r3, r1
    9962:	3330      	adds	r3, #48	; 0x30
    9964:	78ba      	ldrb	r2, [r7, #2]
    9966:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    9968:	78fb      	ldrb	r3, [r7, #3]
    996a:	2202      	movs	r2, #2
    996c:	4619      	mov	r1, r3
    996e:	6878      	ldr	r0, [r7, #4]
    9970:	4b02      	ldr	r3, [pc, #8]	; (997c <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    9972:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9974:	bf00      	nop
    9976:	3708      	adds	r7, #8
    9978:	46bd      	mov	sp, r7
    997a:	bd80      	pop	{r7, pc}
    997c:	0000989b 	.word	0x0000989b

00009980 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    9980:	b580      	push	{r7, lr}
    9982:	b084      	sub	sp, #16
    9984:	af00      	add	r7, sp, #0
    9986:	60f8      	str	r0, [r7, #12]
    9988:	460b      	mov	r3, r1
    998a:	607a      	str	r2, [r7, #4]
    998c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    998e:	7afa      	ldrb	r2, [r7, #11]
    9990:	68f9      	ldr	r1, [r7, #12]
    9992:	4613      	mov	r3, r2
    9994:	009b      	lsls	r3, r3, #2
    9996:	4413      	add	r3, r2
    9998:	009b      	lsls	r3, r3, #2
    999a:	440b      	add	r3, r1
    999c:	3334      	adds	r3, #52	; 0x34
    999e:	687a      	ldr	r2, [r7, #4]
    99a0:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    99a2:	7afb      	ldrb	r3, [r7, #11]
    99a4:	2206      	movs	r2, #6
    99a6:	4619      	mov	r1, r3
    99a8:	68f8      	ldr	r0, [r7, #12]
    99aa:	4b03      	ldr	r3, [pc, #12]	; (99b8 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    99ac:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    99ae:	bf00      	nop
    99b0:	3710      	adds	r7, #16
    99b2:	46bd      	mov	sp, r7
    99b4:	bd80      	pop	{r7, pc}
    99b6:	bf00      	nop
    99b8:	0000989b 	.word	0x0000989b

000099bc <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    99bc:	b480      	push	{r7}
    99be:	b085      	sub	sp, #20
    99c0:	af00      	add	r7, sp, #0
    99c2:	60f8      	str	r0, [r7, #12]
    99c4:	460b      	mov	r3, r1
    99c6:	607a      	str	r2, [r7, #4]
    99c8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    99ca:	7afa      	ldrb	r2, [r7, #11]
    99cc:	68f9      	ldr	r1, [r7, #12]
    99ce:	4613      	mov	r3, r2
    99d0:	009b      	lsls	r3, r3, #2
    99d2:	4413      	add	r3, r2
    99d4:	009b      	lsls	r3, r3, #2
    99d6:	440b      	add	r3, r1
    99d8:	3338      	adds	r3, #56	; 0x38
    99da:	687a      	ldr	r2, [r7, #4]
    99dc:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    99de:	bf00      	nop
    99e0:	3714      	adds	r7, #20
    99e2:	46bd      	mov	sp, r7
    99e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    99e8:	4770      	bx	lr

000099ea <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    99ea:	b480      	push	{r7}
    99ec:	b083      	sub	sp, #12
    99ee:	af00      	add	r7, sp, #0
    99f0:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    99f2:	687b      	ldr	r3, [r7, #4]
    99f4:	691b      	ldr	r3, [r3, #16]
    99f6:	085b      	lsrs	r3, r3, #1
    99f8:	f003 0301 	and.w	r3, r3, #1
    99fc:	2b00      	cmp	r3, #0
    99fe:	bf14      	ite	ne
    9a00:	2301      	movne	r3, #1
    9a02:	2300      	moveq	r3, #0
    9a04:	b2db      	uxtb	r3, r3
}
    9a06:	4618      	mov	r0, r3
    9a08:	370c      	adds	r7, #12
    9a0a:	46bd      	mov	sp, r7
    9a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a10:	4770      	bx	lr

00009a12 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    9a12:	b480      	push	{r7}
    9a14:	b083      	sub	sp, #12
    9a16:	af00      	add	r7, sp, #0
    9a18:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    9a1a:	687b      	ldr	r3, [r7, #4]
    9a1c:	691b      	ldr	r3, [r3, #16]
    9a1e:	0a1b      	lsrs	r3, r3, #8
    9a20:	f003 0301 	and.w	r3, r3, #1
    9a24:	2b00      	cmp	r3, #0
    9a26:	bf14      	ite	ne
    9a28:	2301      	movne	r3, #1
    9a2a:	2300      	moveq	r3, #0
    9a2c:	b2db      	uxtb	r3, r3
}
    9a2e:	4618      	mov	r0, r3
    9a30:	370c      	adds	r7, #12
    9a32:	46bd      	mov	sp, r7
    9a34:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a38:	4770      	bx	lr

00009a3a <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    9a3a:	b480      	push	{r7}
    9a3c:	b085      	sub	sp, #20
    9a3e:	af00      	add	r7, sp, #0
    9a40:	6078      	str	r0, [r7, #4]
    9a42:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9a44:	687b      	ldr	r3, [r7, #4]
    9a46:	691b      	ldr	r3, [r3, #16]
    9a48:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9a4a:	68fa      	ldr	r2, [r7, #12]
    9a4c:	683b      	ldr	r3, [r7, #0]
    9a4e:	4013      	ands	r3, r2
    9a50:	60fb      	str	r3, [r7, #12]
	return tmp;
    9a52:	68fb      	ldr	r3, [r7, #12]
}
    9a54:	4618      	mov	r0, r3
    9a56:	3714      	adds	r7, #20
    9a58:	46bd      	mov	sp, r7
    9a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a5e:	4770      	bx	lr

00009a60 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    9a60:	b480      	push	{r7}
    9a62:	b085      	sub	sp, #20
    9a64:	af00      	add	r7, sp, #0
    9a66:	60f8      	str	r0, [r7, #12]
    9a68:	460b      	mov	r3, r1
    9a6a:	607a      	str	r2, [r7, #4]
    9a6c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    9a6e:	7afb      	ldrb	r3, [r7, #11]
    9a70:	68fa      	ldr	r2, [r7, #12]
    9a72:	3304      	adds	r3, #4
    9a74:	009b      	lsls	r3, r3, #2
    9a76:	4413      	add	r3, r2
    9a78:	687a      	ldr	r2, [r7, #4]
    9a7a:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9a7c:	bf00      	nop
    9a7e:	3714      	adds	r7, #20
    9a80:	46bd      	mov	sp, r7
    9a82:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a86:	4770      	bx	lr

00009a88 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    9a88:	b480      	push	{r7}
    9a8a:	b083      	sub	sp, #12
    9a8c:	af00      	add	r7, sp, #0
    9a8e:	6078      	str	r0, [r7, #4]
    9a90:	460b      	mov	r3, r1
    9a92:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    9a94:	687b      	ldr	r3, [r7, #4]
    9a96:	78fa      	ldrb	r2, [r7, #3]
    9a98:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9a9a:	bf00      	nop
    9a9c:	370c      	adds	r7, #12
    9a9e:	46bd      	mov	sp, r7
    9aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aa4:	4770      	bx	lr

00009aa6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    9aa6:	b480      	push	{r7}
    9aa8:	b085      	sub	sp, #20
    9aaa:	af00      	add	r7, sp, #0
    9aac:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    9aae:	687b      	ldr	r3, [r7, #4]
    9ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
    9ab4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9ab6:	7bfb      	ldrb	r3, [r7, #15]
    9ab8:	f003 0301 	and.w	r3, r3, #1
    9abc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9abe:	7bfb      	ldrb	r3, [r7, #15]
    9ac0:	2b00      	cmp	r3, #0
    9ac2:	bf14      	ite	ne
    9ac4:	2301      	movne	r3, #1
    9ac6:	2300      	moveq	r3, #0
    9ac8:	b2db      	uxtb	r3, r3
}
    9aca:	4618      	mov	r0, r3
    9acc:	3714      	adds	r7, #20
    9ace:	46bd      	mov	sp, r7
    9ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ad4:	4770      	bx	lr

00009ad6 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    9ad6:	b480      	push	{r7}
    9ad8:	b083      	sub	sp, #12
    9ada:	af00      	add	r7, sp, #0
    9adc:	6078      	str	r0, [r7, #4]
    9ade:	460b      	mov	r3, r1
    9ae0:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    9ae2:	687b      	ldr	r3, [r7, #4]
    9ae4:	78fa      	ldrb	r2, [r7, #3]
    9ae6:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9aea:	bf00      	nop
    9aec:	370c      	adds	r7, #12
    9aee:	46bd      	mov	sp, r7
    9af0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9af4:	4770      	bx	lr

00009af6 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    9af6:	b480      	push	{r7}
    9af8:	b083      	sub	sp, #12
    9afa:	af00      	add	r7, sp, #0
    9afc:	6078      	str	r0, [r7, #4]
    9afe:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    9b00:	687b      	ldr	r3, [r7, #4]
    9b02:	683a      	ldr	r2, [r7, #0]
    9b04:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9b06:	bf00      	nop
    9b08:	370c      	adds	r7, #12
    9b0a:	46bd      	mov	sp, r7
    9b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b10:	4770      	bx	lr

00009b12 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    9b12:	b480      	push	{r7}
    9b14:	b083      	sub	sp, #12
    9b16:	af00      	add	r7, sp, #0
    9b18:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    9b1a:	687b      	ldr	r3, [r7, #4]
    9b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    9b1e:	4618      	mov	r0, r3
    9b20:	370c      	adds	r7, #12
    9b22:	46bd      	mov	sp, r7
    9b24:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b28:	4770      	bx	lr

00009b2a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    9b2a:	b480      	push	{r7}
    9b2c:	b083      	sub	sp, #12
    9b2e:	af00      	add	r7, sp, #0
    9b30:	6078      	str	r0, [r7, #4]
    9b32:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    9b34:	687b      	ldr	r3, [r7, #4]
    9b36:	683a      	ldr	r2, [r7, #0]
    9b38:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9b3a:	bf00      	nop
    9b3c:	370c      	adds	r7, #12
    9b3e:	46bd      	mov	sp, r7
    9b40:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b44:	4770      	bx	lr

00009b46 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    9b46:	b480      	push	{r7}
    9b48:	b085      	sub	sp, #20
    9b4a:	af00      	add	r7, sp, #0
    9b4c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9b4e:	687b      	ldr	r3, [r7, #4]
    9b50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9b54:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    9b56:	7bfb      	ldrb	r3, [r7, #15]
    9b58:	085b      	lsrs	r3, r3, #1
    9b5a:	b2db      	uxtb	r3, r3
    9b5c:	f003 0301 	and.w	r3, r3, #1
    9b60:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9b62:	7bfb      	ldrb	r3, [r7, #15]
    9b64:	2b00      	cmp	r3, #0
    9b66:	bf14      	ite	ne
    9b68:	2301      	movne	r3, #1
    9b6a:	2300      	moveq	r3, #0
    9b6c:	b2db      	uxtb	r3, r3
}
    9b6e:	4618      	mov	r0, r3
    9b70:	3714      	adds	r7, #20
    9b72:	46bd      	mov	sp, r7
    9b74:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b78:	4770      	bx	lr

00009b7a <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    9b7a:	b480      	push	{r7}
    9b7c:	b085      	sub	sp, #20
    9b7e:	af00      	add	r7, sp, #0
    9b80:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9b82:	687b      	ldr	r3, [r7, #4]
    9b84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9b88:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    9b8a:	7bfb      	ldrb	r3, [r7, #15]
    9b8c:	089b      	lsrs	r3, r3, #2
    9b8e:	b2db      	uxtb	r3, r3
    9b90:	f003 0301 	and.w	r3, r3, #1
    9b94:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9b96:	7bfb      	ldrb	r3, [r7, #15]
    9b98:	2b00      	cmp	r3, #0
    9b9a:	bf14      	ite	ne
    9b9c:	2301      	movne	r3, #1
    9b9e:	2300      	moveq	r3, #0
    9ba0:	b2db      	uxtb	r3, r3
}
    9ba2:	4618      	mov	r0, r3
    9ba4:	3714      	adds	r7, #20
    9ba6:	46bd      	mov	sp, r7
    9ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bac:	4770      	bx	lr

00009bae <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    9bae:	b480      	push	{r7}
    9bb0:	b085      	sub	sp, #20
    9bb2:	af00      	add	r7, sp, #0
    9bb4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9bb6:	687b      	ldr	r3, [r7, #4]
    9bb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9bbc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    9bbe:	7bfb      	ldrb	r3, [r7, #15]
    9bc0:	08db      	lsrs	r3, r3, #3
    9bc2:	b2db      	uxtb	r3, r3
    9bc4:	f003 0301 	and.w	r3, r3, #1
    9bc8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9bca:	7bfb      	ldrb	r3, [r7, #15]
    9bcc:	2b00      	cmp	r3, #0
    9bce:	bf14      	ite	ne
    9bd0:	2301      	movne	r3, #1
    9bd2:	2300      	moveq	r3, #0
    9bd4:	b2db      	uxtb	r3, r3
}
    9bd6:	4618      	mov	r0, r3
    9bd8:	3714      	adds	r7, #20
    9bda:	46bd      	mov	sp, r7
    9bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9be0:	4770      	bx	lr

00009be2 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    9be2:	b480      	push	{r7}
    9be4:	b085      	sub	sp, #20
    9be6:	af00      	add	r7, sp, #0
    9be8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9bea:	687b      	ldr	r3, [r7, #4]
    9bec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9bf0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    9bf2:	7bfb      	ldrb	r3, [r7, #15]
    9bf4:	091b      	lsrs	r3, r3, #4
    9bf6:	b2db      	uxtb	r3, r3
    9bf8:	f003 0301 	and.w	r3, r3, #1
    9bfc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9bfe:	7bfb      	ldrb	r3, [r7, #15]
    9c00:	2b00      	cmp	r3, #0
    9c02:	bf14      	ite	ne
    9c04:	2301      	movne	r3, #1
    9c06:	2300      	moveq	r3, #0
    9c08:	b2db      	uxtb	r3, r3
}
    9c0a:	4618      	mov	r0, r3
    9c0c:	3714      	adds	r7, #20
    9c0e:	46bd      	mov	sp, r7
    9c10:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c14:	4770      	bx	lr
	...

00009c18 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    9c18:	b580      	push	{r7, lr}
    9c1a:	b082      	sub	sp, #8
    9c1c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9c1e:	4b0a      	ldr	r3, [pc, #40]	; (9c48 <_oscctrl_init_sources+0x30>)
    9c20:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    9c22:	4a0a      	ldr	r2, [pc, #40]	; (9c4c <_oscctrl_init_sources+0x34>)
    9c24:	2101      	movs	r1, #1
    9c26:	6878      	ldr	r0, [r7, #4]
    9c28:	4b09      	ldr	r3, [pc, #36]	; (9c50 <_oscctrl_init_sources+0x38>)
    9c2a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    9c2c:	bf00      	nop
    9c2e:	6878      	ldr	r0, [r7, #4]
    9c30:	4b08      	ldr	r3, [pc, #32]	; (9c54 <_oscctrl_init_sources+0x3c>)
    9c32:	4798      	blx	r3
    9c34:	4603      	mov	r3, r0
    9c36:	f083 0301 	eor.w	r3, r3, #1
    9c3a:	b2db      	uxtb	r3, r3
    9c3c:	2b00      	cmp	r3, #0
    9c3e:	d1f6      	bne.n	9c2e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    9c40:	bf00      	nop
    9c42:	3708      	adds	r7, #8
    9c44:	46bd      	mov	sp, r7
    9c46:	bd80      	pop	{r7, pc}
    9c48:	40001000 	.word	0x40001000
    9c4c:	03002646 	.word	0x03002646
    9c50:	00009a61 	.word	0x00009a61
    9c54:	000099eb 	.word	0x000099eb

00009c58 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    9c58:	b580      	push	{r7, lr}
    9c5a:	b084      	sub	sp, #16
    9c5c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9c5e:	4b6b      	ldr	r3, [pc, #428]	; (9e0c <_oscctrl_init_referenced_generators+0x1b4>)
    9c60:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    9c62:	2204      	movs	r2, #4
    9c64:	2100      	movs	r1, #0
    9c66:	486a      	ldr	r0, [pc, #424]	; (9e10 <_oscctrl_init_referenced_generators+0x1b8>)
    9c68:	4b6a      	ldr	r3, [pc, #424]	; (9e14 <_oscctrl_init_referenced_generators+0x1bc>)
    9c6a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9c6c:	bf00      	nop
    9c6e:	4868      	ldr	r0, [pc, #416]	; (9e10 <_oscctrl_init_referenced_generators+0x1b8>)
    9c70:	4b69      	ldr	r3, [pc, #420]	; (9e18 <_oscctrl_init_referenced_generators+0x1c0>)
    9c72:	4798      	blx	r3
    9c74:	4603      	mov	r3, r0
    9c76:	2b00      	cmp	r3, #0
    9c78:	d1f9      	bne.n	9c6e <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    9c7a:	2100      	movs	r1, #0
    9c7c:	68f8      	ldr	r0, [r7, #12]
    9c7e:	4b67      	ldr	r3, [pc, #412]	; (9e1c <_oscctrl_init_referenced_generators+0x1c4>)
    9c80:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    9c82:	4967      	ldr	r1, [pc, #412]	; (9e20 <_oscctrl_init_referenced_generators+0x1c8>)
    9c84:	68f8      	ldr	r0, [r7, #12]
    9c86:	4b67      	ldr	r3, [pc, #412]	; (9e24 <_oscctrl_init_referenced_generators+0x1cc>)
    9c88:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    9c8a:	bf00      	nop
    9c8c:	68f8      	ldr	r0, [r7, #12]
    9c8e:	4b66      	ldr	r3, [pc, #408]	; (9e28 <_oscctrl_init_referenced_generators+0x1d0>)
    9c90:	4798      	blx	r3
    9c92:	4603      	mov	r3, r0
    9c94:	2b00      	cmp	r3, #0
    9c96:	d1f9      	bne.n	9c8c <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    9c98:	2100      	movs	r1, #0
    9c9a:	68f8      	ldr	r0, [r7, #12]
    9c9c:	4b63      	ldr	r3, [pc, #396]	; (9e2c <_oscctrl_init_referenced_generators+0x1d4>)
    9c9e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9ca0:	bf00      	nop
    9ca2:	68f8      	ldr	r0, [r7, #12]
    9ca4:	4b62      	ldr	r3, [pc, #392]	; (9e30 <_oscctrl_init_referenced_generators+0x1d8>)
    9ca6:	4798      	blx	r3
    9ca8:	4603      	mov	r3, r0
    9caa:	2b00      	cmp	r3, #0
    9cac:	d1f9      	bne.n	9ca2 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    9cae:	2302      	movs	r3, #2
    9cb0:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    9cb2:	7afb      	ldrb	r3, [r7, #11]
    9cb4:	4619      	mov	r1, r3
    9cb6:	68f8      	ldr	r0, [r7, #12]
    9cb8:	4b58      	ldr	r3, [pc, #352]	; (9e1c <_oscctrl_init_referenced_generators+0x1c4>)
    9cba:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    9cbc:	bf00      	nop
    9cbe:	68f8      	ldr	r0, [r7, #12]
    9cc0:	4b5c      	ldr	r3, [pc, #368]	; (9e34 <_oscctrl_init_referenced_generators+0x1dc>)
    9cc2:	4798      	blx	r3
    9cc4:	4603      	mov	r3, r0
    9cc6:	2b00      	cmp	r3, #0
    9cc8:	d1f9      	bne.n	9cbe <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    9cca:	68f8      	ldr	r0, [r7, #12]
    9ccc:	4b5a      	ldr	r3, [pc, #360]	; (9e38 <_oscctrl_init_referenced_generators+0x1e0>)
    9cce:	4798      	blx	r3
    9cd0:	4603      	mov	r3, r0
    9cd2:	4619      	mov	r1, r3
    9cd4:	68f8      	ldr	r0, [r7, #12]
    9cd6:	4b59      	ldr	r3, [pc, #356]	; (9e3c <_oscctrl_init_referenced_generators+0x1e4>)
    9cd8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    9cda:	bf00      	nop
    9cdc:	68f8      	ldr	r0, [r7, #12]
    9cde:	4b58      	ldr	r3, [pc, #352]	; (9e40 <_oscctrl_init_referenced_generators+0x1e8>)
    9ce0:	4798      	blx	r3
    9ce2:	4603      	mov	r3, r0
    9ce4:	2b00      	cmp	r3, #0
    9ce6:	d1f9      	bne.n	9cdc <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    9ce8:	2319      	movs	r3, #25
    9cea:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    9cec:	7afb      	ldrb	r3, [r7, #11]
    9cee:	4619      	mov	r1, r3
    9cf0:	68f8      	ldr	r0, [r7, #12]
    9cf2:	4b4e      	ldr	r3, [pc, #312]	; (9e2c <_oscctrl_init_referenced_generators+0x1d4>)
    9cf4:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9cf6:	bf00      	nop
    9cf8:	68f8      	ldr	r0, [r7, #12]
    9cfa:	4b4d      	ldr	r3, [pc, #308]	; (9e30 <_oscctrl_init_referenced_generators+0x1d8>)
    9cfc:	4798      	blx	r3
    9cfe:	4603      	mov	r3, r0
    9d00:	2b00      	cmp	r3, #0
    9d02:	d1f9      	bne.n	9cf8 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    9d04:	2245      	movs	r2, #69	; 0x45
    9d06:	2101      	movs	r1, #1
    9d08:	4841      	ldr	r0, [pc, #260]	; (9e10 <_oscctrl_init_referenced_generators+0x1b8>)
    9d0a:	4b4e      	ldr	r3, [pc, #312]	; (9e44 <_oscctrl_init_referenced_generators+0x1ec>)
    9d0c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    9d0e:	223b      	movs	r2, #59	; 0x3b
    9d10:	2100      	movs	r1, #0
    9d12:	68f8      	ldr	r0, [r7, #12]
    9d14:	4b4c      	ldr	r3, [pc, #304]	; (9e48 <_oscctrl_init_referenced_generators+0x1f0>)
    9d16:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    9d18:	f44f 6201 	mov.w	r2, #2064	; 0x810
    9d1c:	2100      	movs	r1, #0
    9d1e:	68f8      	ldr	r0, [r7, #12]
    9d20:	4b4a      	ldr	r3, [pc, #296]	; (9e4c <_oscctrl_init_referenced_generators+0x1f4>)
    9d22:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9d24:	2242      	movs	r2, #66	; 0x42
    9d26:	2100      	movs	r1, #0
    9d28:	68f8      	ldr	r0, [r7, #12]
    9d2a:	4b49      	ldr	r3, [pc, #292]	; (9e50 <_oscctrl_init_referenced_generators+0x1f8>)
    9d2c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    9d2e:	4a49      	ldr	r2, [pc, #292]	; (9e54 <_oscctrl_init_referenced_generators+0x1fc>)
    9d30:	2101      	movs	r1, #1
    9d32:	68f8      	ldr	r0, [r7, #12]
    9d34:	4b44      	ldr	r3, [pc, #272]	; (9e48 <_oscctrl_init_referenced_generators+0x1f0>)
    9d36:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    9d38:	f44f 6203 	mov.w	r2, #2096	; 0x830
    9d3c:	2101      	movs	r1, #1
    9d3e:	68f8      	ldr	r0, [r7, #12]
    9d40:	4b42      	ldr	r3, [pc, #264]	; (9e4c <_oscctrl_init_referenced_generators+0x1f4>)
    9d42:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9d44:	2202      	movs	r2, #2
    9d46:	2101      	movs	r1, #1
    9d48:	68f8      	ldr	r0, [r7, #12]
    9d4a:	4b41      	ldr	r3, [pc, #260]	; (9e50 <_oscctrl_init_referenced_generators+0x1f8>)
    9d4c:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    9d4e:	68f8      	ldr	r0, [r7, #12]
    9d50:	4b41      	ldr	r3, [pc, #260]	; (9e58 <_oscctrl_init_referenced_generators+0x200>)
    9d52:	4798      	blx	r3
    9d54:	4603      	mov	r3, r0
    9d56:	2b00      	cmp	r3, #0
    9d58:	d00c      	beq.n	9d74 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    9d5a:	f44f 6310 	mov.w	r3, #2304	; 0x900
    9d5e:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    9d60:	bf00      	nop
    9d62:	6879      	ldr	r1, [r7, #4]
    9d64:	68f8      	ldr	r0, [r7, #12]
    9d66:	4b3d      	ldr	r3, [pc, #244]	; (9e5c <_oscctrl_init_referenced_generators+0x204>)
    9d68:	4798      	blx	r3
    9d6a:	4602      	mov	r2, r0
    9d6c:	687b      	ldr	r3, [r7, #4]
    9d6e:	429a      	cmp	r2, r3
    9d70:	d1f7      	bne.n	9d62 <_oscctrl_init_referenced_generators+0x10a>
    9d72:	e009      	b.n	9d88 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    9d74:	bf00      	nop
    9d76:	68f8      	ldr	r0, [r7, #12]
    9d78:	4b39      	ldr	r3, [pc, #228]	; (9e60 <_oscctrl_init_referenced_generators+0x208>)
    9d7a:	4798      	blx	r3
    9d7c:	4603      	mov	r3, r0
    9d7e:	f083 0301 	eor.w	r3, r3, #1
    9d82:	b2db      	uxtb	r3, r3
    9d84:	2b00      	cmp	r3, #0
    9d86:	d1f6      	bne.n	9d76 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    9d88:	bf00      	nop
    9d8a:	2100      	movs	r1, #0
    9d8c:	68f8      	ldr	r0, [r7, #12]
    9d8e:	4b35      	ldr	r3, [pc, #212]	; (9e64 <_oscctrl_init_referenced_generators+0x20c>)
    9d90:	4798      	blx	r3
    9d92:	4603      	mov	r3, r0
    9d94:	f083 0301 	eor.w	r3, r3, #1
    9d98:	b2db      	uxtb	r3, r3
    9d9a:	2b00      	cmp	r3, #0
    9d9c:	d009      	beq.n	9db2 <_oscctrl_init_referenced_generators+0x15a>
    9d9e:	2100      	movs	r1, #0
    9da0:	68f8      	ldr	r0, [r7, #12]
    9da2:	4b31      	ldr	r3, [pc, #196]	; (9e68 <_oscctrl_init_referenced_generators+0x210>)
    9da4:	4798      	blx	r3
    9da6:	4603      	mov	r3, r0
    9da8:	f083 0301 	eor.w	r3, r3, #1
    9dac:	b2db      	uxtb	r3, r3
    9dae:	2b00      	cmp	r3, #0
    9db0:	d1eb      	bne.n	9d8a <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    9db2:	bf00      	nop
    9db4:	2101      	movs	r1, #1
    9db6:	68f8      	ldr	r0, [r7, #12]
    9db8:	4b2a      	ldr	r3, [pc, #168]	; (9e64 <_oscctrl_init_referenced_generators+0x20c>)
    9dba:	4798      	blx	r3
    9dbc:	4603      	mov	r3, r0
    9dbe:	f083 0301 	eor.w	r3, r3, #1
    9dc2:	b2db      	uxtb	r3, r3
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	d009      	beq.n	9ddc <_oscctrl_init_referenced_generators+0x184>
    9dc8:	2101      	movs	r1, #1
    9dca:	68f8      	ldr	r0, [r7, #12]
    9dcc:	4b26      	ldr	r3, [pc, #152]	; (9e68 <_oscctrl_init_referenced_generators+0x210>)
    9dce:	4798      	blx	r3
    9dd0:	4603      	mov	r3, r0
    9dd2:	f083 0301 	eor.w	r3, r3, #1
    9dd6:	b2db      	uxtb	r3, r3
    9dd8:	2b00      	cmp	r3, #0
    9dda:	d1eb      	bne.n	9db4 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    9ddc:	bf00      	nop
    9dde:	480c      	ldr	r0, [pc, #48]	; (9e10 <_oscctrl_init_referenced_generators+0x1b8>)
    9de0:	4b22      	ldr	r3, [pc, #136]	; (9e6c <_oscctrl_init_referenced_generators+0x214>)
    9de2:	4798      	blx	r3
    9de4:	4603      	mov	r3, r0
    9de6:	2b00      	cmp	r3, #0
    9de8:	d1f9      	bne.n	9dde <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    9dea:	2207      	movs	r2, #7
    9dec:	2100      	movs	r1, #0
    9dee:	4808      	ldr	r0, [pc, #32]	; (9e10 <_oscctrl_init_referenced_generators+0x1b8>)
    9df0:	4b08      	ldr	r3, [pc, #32]	; (9e14 <_oscctrl_init_referenced_generators+0x1bc>)
    9df2:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9df4:	bf00      	nop
    9df6:	4806      	ldr	r0, [pc, #24]	; (9e10 <_oscctrl_init_referenced_generators+0x1b8>)
    9df8:	4b07      	ldr	r3, [pc, #28]	; (9e18 <_oscctrl_init_referenced_generators+0x1c0>)
    9dfa:	4798      	blx	r3
    9dfc:	4603      	mov	r3, r0
    9dfe:	2b00      	cmp	r3, #0
    9e00:	d1f9      	bne.n	9df6 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    9e02:	bf00      	nop
    9e04:	3710      	adds	r7, #16
    9e06:	46bd      	mov	sp, r7
    9e08:	bd80      	pop	{r7, pc}
    9e0a:	bf00      	nop
    9e0c:	40001000 	.word	0x40001000
    9e10:	40001c00 	.word	0x40001c00
    9e14:	00009825 	.word	0x00009825
    9e18:	000097e5 	.word	0x000097e5
    9e1c:	00009a89 	.word	0x00009a89
    9e20:	0401bb80 	.word	0x0401bb80
    9e24:	00009b2b 	.word	0x00009b2b
    9e28:	00009be3 	.word	0x00009be3
    9e2c:	00009ad7 	.word	0x00009ad7
    9e30:	00009b7b 	.word	0x00009b7b
    9e34:	00009b47 	.word	0x00009b47
    9e38:	00009b13 	.word	0x00009b13
    9e3c:	00009af7 	.word	0x00009af7
    9e40:	00009baf 	.word	0x00009baf
    9e44:	00009875 	.word	0x00009875
    9e48:	00009981 	.word	0x00009981
    9e4c:	000099bd 	.word	0x000099bd
    9e50:	00009945 	.word	0x00009945
    9e54:	000407a0 	.word	0x000407a0
    9e58:	00009aa7 	.word	0x00009aa7
    9e5c:	00009a3b 	.word	0x00009a3b
    9e60:	00009a13 	.word	0x00009a13
    9e64:	000098d1 	.word	0x000098d1
    9e68:	00009909 	.word	0x00009909
    9e6c:	0000980d 	.word	0x0000980d

00009e70 <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    9e70:	b480      	push	{r7}
    9e72:	b085      	sub	sp, #20
    9e74:	af00      	add	r7, sp, #0
    9e76:	6078      	str	r0, [r7, #4]
    9e78:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    9e7a:	687b      	ldr	r3, [r7, #4]
    9e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9e7e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9e80:	68fa      	ldr	r2, [r7, #12]
    9e82:	683b      	ldr	r3, [r7, #0]
    9e84:	4013      	ands	r3, r2
    9e86:	60fb      	str	r3, [r7, #12]
	return tmp;
    9e88:	68fb      	ldr	r3, [r7, #12]
}
    9e8a:	4618      	mov	r0, r3
    9e8c:	3714      	adds	r7, #20
    9e8e:	46bd      	mov	sp, r7
    9e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e94:	4770      	bx	lr

00009e96 <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    9e96:	b480      	push	{r7}
    9e98:	b085      	sub	sp, #20
    9e9a:	af00      	add	r7, sp, #0
    9e9c:	6078      	str	r0, [r7, #4]
    9e9e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    9ea0:	687b      	ldr	r3, [r7, #4]
    9ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9ea4:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9ea6:	68fa      	ldr	r2, [r7, #12]
    9ea8:	683b      	ldr	r3, [r7, #0]
    9eaa:	4013      	ands	r3, r2
    9eac:	60fb      	str	r3, [r7, #12]
	return tmp;
    9eae:	68fb      	ldr	r3, [r7, #12]
}
    9eb0:	4618      	mov	r0, r3
    9eb2:	3714      	adds	r7, #20
    9eb4:	46bd      	mov	sp, r7
    9eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eba:	4770      	bx	lr

00009ebc <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    9ebc:	b480      	push	{r7}
    9ebe:	b085      	sub	sp, #20
    9ec0:	af00      	add	r7, sp, #0
    9ec2:	6078      	str	r0, [r7, #4]
    9ec4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    9ec6:	687b      	ldr	r3, [r7, #4]
    9ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9eca:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9ecc:	68fa      	ldr	r2, [r7, #12]
    9ece:	683b      	ldr	r3, [r7, #0]
    9ed0:	4013      	ands	r3, r2
    9ed2:	60fb      	str	r3, [r7, #12]
	return tmp;
    9ed4:	68fb      	ldr	r3, [r7, #12]
}
    9ed6:	4618      	mov	r0, r3
    9ed8:	3714      	adds	r7, #20
    9eda:	46bd      	mov	sp, r7
    9edc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ee0:	4770      	bx	lr

00009ee2 <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    9ee2:	b480      	push	{r7}
    9ee4:	b085      	sub	sp, #20
    9ee6:	af00      	add	r7, sp, #0
    9ee8:	6078      	str	r0, [r7, #4]
    9eea:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    9eec:	687b      	ldr	r3, [r7, #4]
    9eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9ef0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9ef2:	68fa      	ldr	r2, [r7, #12]
    9ef4:	683b      	ldr	r3, [r7, #0]
    9ef6:	4013      	ands	r3, r2
    9ef8:	60fb      	str	r3, [r7, #12]
	return tmp;
    9efa:	68fb      	ldr	r3, [r7, #12]
}
    9efc:	4618      	mov	r0, r3
    9efe:	3714      	adds	r7, #20
    9f00:	46bd      	mov	sp, r7
    9f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f06:	4770      	bx	lr

00009f08 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    9f08:	b480      	push	{r7}
    9f0a:	b083      	sub	sp, #12
    9f0c:	af00      	add	r7, sp, #0
    9f0e:	6078      	str	r0, [r7, #4]
    9f10:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    9f12:	687b      	ldr	r3, [r7, #4]
    9f14:	683a      	ldr	r2, [r7, #0]
    9f16:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    9f18:	bf00      	nop
    9f1a:	370c      	adds	r7, #12
    9f1c:	46bd      	mov	sp, r7
    9f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f22:	4770      	bx	lr

00009f24 <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    9f24:	b480      	push	{r7}
    9f26:	b085      	sub	sp, #20
    9f28:	af00      	add	r7, sp, #0
    9f2a:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    9f2c:	230a      	movs	r3, #10
    9f2e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    9f30:	687b      	ldr	r3, [r7, #4]
    9f32:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    9f36:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    9f3a:	d101      	bne.n	9f40 <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    9f3c:	230d      	movs	r3, #13
    9f3e:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    9f40:	687b      	ldr	r3, [r7, #4]
    9f42:	0e1b      	lsrs	r3, r3, #24
    9f44:	f003 030f 	and.w	r3, r3, #15
    9f48:	015a      	lsls	r2, r3, #5
    9f4a:	6879      	ldr	r1, [r7, #4]
    9f4c:	4b06      	ldr	r3, [pc, #24]	; (9f68 <_pac_get_peripheral_id+0x44>)
    9f4e:	400b      	ands	r3, r1
    9f50:	68f9      	ldr	r1, [r7, #12]
    9f52:	40cb      	lsrs	r3, r1
    9f54:	4413      	add	r3, r2
    9f56:	60fb      	str	r3, [r7, #12]

	return peripheral;
    9f58:	68fb      	ldr	r3, [r7, #12]
}
    9f5a:	4618      	mov	r0, r3
    9f5c:	3714      	adds	r7, #20
    9f5e:	46bd      	mov	sp, r7
    9f60:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f64:	4770      	bx	lr
    9f66:	bf00      	nop
    9f68:	000fff00 	.word	0x000fff00

00009f6c <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    9f6c:	b580      	push	{r7, lr}
    9f6e:	b086      	sub	sp, #24
    9f70:	af00      	add	r7, sp, #0
    9f72:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9f74:	687b      	ldr	r3, [r7, #4]
    9f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9f7a:	bf8c      	ite	hi
    9f7c:	2301      	movhi	r3, #1
    9f7e:	2300      	movls	r3, #0
    9f80:	b2db      	uxtb	r3, r3
    9f82:	2239      	movs	r2, #57	; 0x39
    9f84:	4917      	ldr	r1, [pc, #92]	; (9fe4 <_periph_lock+0x78>)
    9f86:	4618      	mov	r0, r3
    9f88:	4b17      	ldr	r3, [pc, #92]	; (9fe8 <_periph_lock+0x7c>)
    9f8a:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    9f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9f90:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    9f92:	6878      	ldr	r0, [r7, #4]
    9f94:	4b15      	ldr	r3, [pc, #84]	; (9fec <_periph_lock+0x80>)
    9f96:	4798      	blx	r3
    9f98:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    9f9a:	693b      	ldr	r3, [r7, #16]
    9f9c:	b29b      	uxth	r3, r3
    9f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9fa2:	4619      	mov	r1, r3
    9fa4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9fa8:	4b11      	ldr	r3, [pc, #68]	; (9ff0 <_periph_lock+0x84>)
    9faa:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    9fac:	f107 030f 	add.w	r3, r7, #15
    9fb0:	4619      	mov	r1, r3
    9fb2:	6878      	ldr	r0, [r7, #4]
    9fb4:	4b0f      	ldr	r3, [pc, #60]	; (9ff4 <_periph_lock+0x88>)
    9fb6:	4798      	blx	r3
	} while (!stat && timeout--);
    9fb8:	7bfb      	ldrb	r3, [r7, #15]
    9fba:	f083 0301 	eor.w	r3, r3, #1
    9fbe:	b2db      	uxtb	r3, r3
    9fc0:	2b00      	cmp	r3, #0
    9fc2:	d004      	beq.n	9fce <_periph_lock+0x62>
    9fc4:	697b      	ldr	r3, [r7, #20]
    9fc6:	1e5a      	subs	r2, r3, #1
    9fc8:	617a      	str	r2, [r7, #20]
    9fca:	2b00      	cmp	r3, #0
    9fcc:	d1ee      	bne.n	9fac <_periph_lock+0x40>

	if (timeout < 0) {
    9fce:	697b      	ldr	r3, [r7, #20]
    9fd0:	2b00      	cmp	r3, #0
    9fd2:	da02      	bge.n	9fda <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    9fd4:	f06f 0307 	mvn.w	r3, #7
    9fd8:	e000      	b.n	9fdc <_periph_lock+0x70>
	}

	return ERR_NONE;
    9fda:	2300      	movs	r3, #0
}
    9fdc:	4618      	mov	r0, r3
    9fde:	3718      	adds	r7, #24
    9fe0:	46bd      	mov	sp, r7
    9fe2:	bd80      	pop	{r7, pc}
    9fe4:	00021b70 	.word	0x00021b70
    9fe8:	00007e21 	.word	0x00007e21
    9fec:	00009f25 	.word	0x00009f25
    9ff0:	00009f09 	.word	0x00009f09
    9ff4:	0000a081 	.word	0x0000a081

00009ff8 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    9ff8:	b580      	push	{r7, lr}
    9ffa:	b086      	sub	sp, #24
    9ffc:	af00      	add	r7, sp, #0
    9ffe:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    a000:	687b      	ldr	r3, [r7, #4]
    a002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a006:	bf8c      	ite	hi
    a008:	2301      	movhi	r3, #1
    a00a:	2300      	movls	r3, #0
    a00c:	b2db      	uxtb	r3, r3
    a00e:	2253      	movs	r2, #83	; 0x53
    a010:	4916      	ldr	r1, [pc, #88]	; (a06c <_periph_unlock+0x74>)
    a012:	4618      	mov	r0, r3
    a014:	4b16      	ldr	r3, [pc, #88]	; (a070 <_periph_unlock+0x78>)
    a016:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    a018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a01c:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    a01e:	6878      	ldr	r0, [r7, #4]
    a020:	4b14      	ldr	r3, [pc, #80]	; (a074 <_periph_unlock+0x7c>)
    a022:	4798      	blx	r3
    a024:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    a026:	693b      	ldr	r3, [r7, #16]
    a028:	b29b      	uxth	r3, r3
    a02a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a02e:	4619      	mov	r1, r3
    a030:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a034:	4b10      	ldr	r3, [pc, #64]	; (a078 <_periph_unlock+0x80>)
    a036:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    a038:	f107 030f 	add.w	r3, r7, #15
    a03c:	4619      	mov	r1, r3
    a03e:	6878      	ldr	r0, [r7, #4]
    a040:	4b0e      	ldr	r3, [pc, #56]	; (a07c <_periph_unlock+0x84>)
    a042:	4798      	blx	r3
	} while (stat && timeout--);
    a044:	7bfb      	ldrb	r3, [r7, #15]
    a046:	2b00      	cmp	r3, #0
    a048:	d004      	beq.n	a054 <_periph_unlock+0x5c>
    a04a:	697b      	ldr	r3, [r7, #20]
    a04c:	1e5a      	subs	r2, r3, #1
    a04e:	617a      	str	r2, [r7, #20]
    a050:	2b00      	cmp	r3, #0
    a052:	d1f1      	bne.n	a038 <_periph_unlock+0x40>

	if (timeout < 0) {
    a054:	697b      	ldr	r3, [r7, #20]
    a056:	2b00      	cmp	r3, #0
    a058:	da02      	bge.n	a060 <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    a05a:	f06f 0307 	mvn.w	r3, #7
    a05e:	e000      	b.n	a062 <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    a060:	2300      	movs	r3, #0
}
    a062:	4618      	mov	r0, r3
    a064:	3718      	adds	r7, #24
    a066:	46bd      	mov	sp, r7
    a068:	bd80      	pop	{r7, pc}
    a06a:	bf00      	nop
    a06c:	00021b70 	.word	0x00021b70
    a070:	00007e21 	.word	0x00007e21
    a074:	00009f25 	.word	0x00009f25
    a078:	00009f09 	.word	0x00009f09
    a07c:	0000a081 	.word	0x0000a081

0000a080 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    a080:	b580      	push	{r7, lr}
    a082:	b084      	sub	sp, #16
    a084:	af00      	add	r7, sp, #0
    a086:	6078      	str	r0, [r7, #4]
    a088:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    a08a:	687b      	ldr	r3, [r7, #4]
    a08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a090:	bf8c      	ite	hi
    a092:	2301      	movhi	r3, #1
    a094:	2300      	movls	r3, #0
    a096:	b2db      	uxtb	r3, r3
    a098:	226d      	movs	r2, #109	; 0x6d
    a09a:	4931      	ldr	r1, [pc, #196]	; (a160 <_periph_get_lock_state+0xe0>)
    a09c:	4618      	mov	r0, r3
    a09e:	4b31      	ldr	r3, [pc, #196]	; (a164 <_periph_get_lock_state+0xe4>)
    a0a0:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    a0a2:	6878      	ldr	r0, [r7, #4]
    a0a4:	4b30      	ldr	r3, [pc, #192]	; (a168 <_periph_get_lock_state+0xe8>)
    a0a6:	4798      	blx	r3
    a0a8:	4603      	mov	r3, r0
    a0aa:	f003 031f 	and.w	r3, r3, #31
    a0ae:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    a0b0:	687b      	ldr	r3, [r7, #4]
    a0b2:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    a0b6:	d211      	bcs.n	a0dc <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    a0b8:	2201      	movs	r2, #1
    a0ba:	68fb      	ldr	r3, [r7, #12]
    a0bc:	fa02 f303 	lsl.w	r3, r2, r3
    a0c0:	4619      	mov	r1, r3
    a0c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a0c6:	4b29      	ldr	r3, [pc, #164]	; (a16c <_periph_get_lock_state+0xec>)
    a0c8:	4798      	blx	r3
    a0ca:	4603      	mov	r3, r0
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	bf14      	ite	ne
    a0d0:	2301      	movne	r3, #1
    a0d2:	2300      	moveq	r3, #0
    a0d4:	b2da      	uxtb	r2, r3
    a0d6:	683b      	ldr	r3, [r7, #0]
    a0d8:	701a      	strb	r2, [r3, #0]
    a0da:	e03c      	b.n	a156 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    a0dc:	687b      	ldr	r3, [r7, #4]
    a0de:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    a0e2:	d211      	bcs.n	a108 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    a0e4:	2201      	movs	r2, #1
    a0e6:	68fb      	ldr	r3, [r7, #12]
    a0e8:	fa02 f303 	lsl.w	r3, r2, r3
    a0ec:	4619      	mov	r1, r3
    a0ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a0f2:	4b1f      	ldr	r3, [pc, #124]	; (a170 <_periph_get_lock_state+0xf0>)
    a0f4:	4798      	blx	r3
    a0f6:	4603      	mov	r3, r0
    a0f8:	2b00      	cmp	r3, #0
    a0fa:	bf14      	ite	ne
    a0fc:	2301      	movne	r3, #1
    a0fe:	2300      	moveq	r3, #0
    a100:	b2da      	uxtb	r2, r3
    a102:	683b      	ldr	r3, [r7, #0]
    a104:	701a      	strb	r2, [r3, #0]
    a106:	e026      	b.n	a156 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    a108:	687b      	ldr	r3, [r7, #4]
    a10a:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    a10e:	d211      	bcs.n	a134 <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    a110:	2201      	movs	r2, #1
    a112:	68fb      	ldr	r3, [r7, #12]
    a114:	fa02 f303 	lsl.w	r3, r2, r3
    a118:	4619      	mov	r1, r3
    a11a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a11e:	4b15      	ldr	r3, [pc, #84]	; (a174 <_periph_get_lock_state+0xf4>)
    a120:	4798      	blx	r3
    a122:	4603      	mov	r3, r0
    a124:	2b00      	cmp	r3, #0
    a126:	bf14      	ite	ne
    a128:	2301      	movne	r3, #1
    a12a:	2300      	moveq	r3, #0
    a12c:	b2da      	uxtb	r2, r3
    a12e:	683b      	ldr	r3, [r7, #0]
    a130:	701a      	strb	r2, [r3, #0]
    a132:	e010      	b.n	a156 <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    a134:	2201      	movs	r2, #1
    a136:	68fb      	ldr	r3, [r7, #12]
    a138:	fa02 f303 	lsl.w	r3, r2, r3
    a13c:	4619      	mov	r1, r3
    a13e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a142:	4b0d      	ldr	r3, [pc, #52]	; (a178 <_periph_get_lock_state+0xf8>)
    a144:	4798      	blx	r3
    a146:	4603      	mov	r3, r0
    a148:	2b00      	cmp	r3, #0
    a14a:	bf14      	ite	ne
    a14c:	2301      	movne	r3, #1
    a14e:	2300      	moveq	r3, #0
    a150:	b2da      	uxtb	r2, r3
    a152:	683b      	ldr	r3, [r7, #0]
    a154:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    a156:	2300      	movs	r3, #0
}
    a158:	4618      	mov	r0, r3
    a15a:	3710      	adds	r7, #16
    a15c:	46bd      	mov	sp, r7
    a15e:	bd80      	pop	{r7, pc}
    a160:	00021b70 	.word	0x00021b70
    a164:	00007e21 	.word	0x00007e21
    a168:	00009f25 	.word	0x00009f25
    a16c:	00009e71 	.word	0x00009e71
    a170:	00009e97 	.word	0x00009e97
    a174:	00009ebd 	.word	0x00009ebd
    a178:	00009ee3 	.word	0x00009ee3

0000a17c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    a17c:	b480      	push	{r7}
    a17e:	b083      	sub	sp, #12
    a180:	af00      	add	r7, sp, #0
    a182:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    a184:	687b      	ldr	r3, [r7, #4]
    a186:	69db      	ldr	r3, [r3, #28]
    a188:	0a9b      	lsrs	r3, r3, #10
    a18a:	f003 0301 	and.w	r3, r3, #1
    a18e:	2b00      	cmp	r3, #0
    a190:	bf14      	ite	ne
    a192:	2301      	movne	r3, #1
    a194:	2300      	moveq	r3, #0
    a196:	b2db      	uxtb	r3, r3
}
    a198:	4618      	mov	r0, r3
    a19a:	370c      	adds	r7, #12
    a19c:	46bd      	mov	sp, r7
    a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1a2:	4770      	bx	lr

0000a1a4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    a1a4:	b480      	push	{r7}
    a1a6:	b083      	sub	sp, #12
    a1a8:	af00      	add	r7, sp, #0
    a1aa:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    a1ac:	687b      	ldr	r3, [r7, #4]
    a1ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a1b2:	61da      	str	r2, [r3, #28]
}
    a1b4:	bf00      	nop
    a1b6:	370c      	adds	r7, #12
    a1b8:	46bd      	mov	sp, r7
    a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1be:	4770      	bx	lr

0000a1c0 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    a1c0:	b480      	push	{r7}
    a1c2:	b083      	sub	sp, #12
    a1c4:	af00      	add	r7, sp, #0
    a1c6:	6078      	str	r0, [r7, #4]
    a1c8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    a1ca:	687b      	ldr	r3, [r7, #4]
    a1cc:	683a      	ldr	r2, [r7, #0]
    a1ce:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a1d0:	bf00      	nop
    a1d2:	370c      	adds	r7, #12
    a1d4:	46bd      	mov	sp, r7
    a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1da:	4770      	bx	lr

0000a1dc <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    a1dc:	b480      	push	{r7}
    a1de:	b083      	sub	sp, #12
    a1e0:	af00      	add	r7, sp, #0
    a1e2:	6078      	str	r0, [r7, #4]
    a1e4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    a1e6:	687b      	ldr	r3, [r7, #4]
    a1e8:	683a      	ldr	r2, [r7, #0]
    a1ea:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a1ec:	bf00      	nop
    a1ee:	370c      	adds	r7, #12
    a1f0:	46bd      	mov	sp, r7
    a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1f6:	4770      	bx	lr

0000a1f8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    a1f8:	b480      	push	{r7}
    a1fa:	b083      	sub	sp, #12
    a1fc:	af00      	add	r7, sp, #0
    a1fe:	6078      	str	r0, [r7, #4]
    a200:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    a202:	687b      	ldr	r3, [r7, #4]
    a204:	683a      	ldr	r2, [r7, #0]
    a206:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a208:	bf00      	nop
    a20a:	370c      	adds	r7, #12
    a20c:	46bd      	mov	sp, r7
    a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a212:	4770      	bx	lr

0000a214 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    a214:	b480      	push	{r7}
    a216:	b083      	sub	sp, #12
    a218:	af00      	add	r7, sp, #0
    a21a:	6078      	str	r0, [r7, #4]
    a21c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    a21e:	687b      	ldr	r3, [r7, #4]
    a220:	683a      	ldr	r2, [r7, #0]
    a222:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a224:	bf00      	nop
    a226:	370c      	adds	r7, #12
    a228:	46bd      	mov	sp, r7
    a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a22e:	4770      	bx	lr

0000a230 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    a230:	b480      	push	{r7}
    a232:	b085      	sub	sp, #20
    a234:	af00      	add	r7, sp, #0
    a236:	6078      	str	r0, [r7, #4]
    a238:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    a23a:	687b      	ldr	r3, [r7, #4]
    a23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a23e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    a240:	68fb      	ldr	r3, [r7, #12]
    a242:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a246:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    a248:	683b      	ldr	r3, [r7, #0]
    a24a:	b2db      	uxtb	r3, r3
    a24c:	68fa      	ldr	r2, [r7, #12]
    a24e:	4313      	orrs	r3, r2
    a250:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    a252:	687b      	ldr	r3, [r7, #4]
    a254:	68fa      	ldr	r2, [r7, #12]
    a256:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a258:	bf00      	nop
    a25a:	3714      	adds	r7, #20
    a25c:	46bd      	mov	sp, r7
    a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a262:	4770      	bx	lr

0000a264 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    a264:	b480      	push	{r7}
    a266:	b085      	sub	sp, #20
    a268:	af00      	add	r7, sp, #0
    a26a:	6078      	str	r0, [r7, #4]
    a26c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    a26e:	687b      	ldr	r3, [r7, #4]
    a270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a272:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    a274:	68fb      	ldr	r3, [r7, #12]
    a276:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    a27a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    a27c:	683b      	ldr	r3, [r7, #0]
    a27e:	041b      	lsls	r3, r3, #16
    a280:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a284:	68fa      	ldr	r2, [r7, #12]
    a286:	4313      	orrs	r3, r2
    a288:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    a28a:	687b      	ldr	r3, [r7, #4]
    a28c:	68fa      	ldr	r2, [r7, #12]
    a28e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a290:	bf00      	nop
    a292:	3714      	adds	r7, #20
    a294:	46bd      	mov	sp, r7
    a296:	f85d 7b04 	ldr.w	r7, [sp], #4
    a29a:	4770      	bx	lr

0000a29c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    a29c:	b480      	push	{r7}
    a29e:	b083      	sub	sp, #12
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	6078      	str	r0, [r7, #4]
    a2a4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    a2a6:	687b      	ldr	r3, [r7, #4]
    a2a8:	683a      	ldr	r2, [r7, #0]
    a2aa:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a2ac:	bf00      	nop
    a2ae:	370c      	adds	r7, #12
    a2b0:	46bd      	mov	sp, r7
    a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2b6:	4770      	bx	lr

0000a2b8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    a2b8:	b480      	push	{r7}
    a2ba:	b083      	sub	sp, #12
    a2bc:	af00      	add	r7, sp, #0
    a2be:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    a2c0:	687b      	ldr	r3, [r7, #4]
    a2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    a2c4:	4618      	mov	r0, r3
    a2c6:	370c      	adds	r7, #12
    a2c8:	46bd      	mov	sp, r7
    a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2ce:	4770      	bx	lr

0000a2d0 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    a2d0:	b480      	push	{r7}
    a2d2:	b085      	sub	sp, #20
    a2d4:	af00      	add	r7, sp, #0
    a2d6:	60f8      	str	r0, [r7, #12]
    a2d8:	60b9      	str	r1, [r7, #8]
    a2da:	607a      	str	r2, [r7, #4]
	while (count--) {
    a2dc:	e007      	b.n	a2ee <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    a2de:	68fb      	ldr	r3, [r7, #12]
    a2e0:	1c5a      	adds	r2, r3, #1
    a2e2:	60fa      	str	r2, [r7, #12]
    a2e4:	68ba      	ldr	r2, [r7, #8]
    a2e6:	1c51      	adds	r1, r2, #1
    a2e8:	60b9      	str	r1, [r7, #8]
    a2ea:	7812      	ldrb	r2, [r2, #0]
    a2ec:	701a      	strb	r2, [r3, #0]
	while (count--) {
    a2ee:	687b      	ldr	r3, [r7, #4]
    a2f0:	1e5a      	subs	r2, r3, #1
    a2f2:	607a      	str	r2, [r7, #4]
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	d1f2      	bne.n	a2de <_qspi_memcpy+0xe>
	}
}
    a2f8:	bf00      	nop
    a2fa:	3714      	adds	r7, #20
    a2fc:	46bd      	mov	sp, r7
    a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a302:	4770      	bx	lr

0000a304 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    a304:	b580      	push	{r7, lr}
    a306:	b082      	sub	sp, #8
    a308:	af00      	add	r7, sp, #0
    a30a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    a30c:	4903      	ldr	r1, [pc, #12]	; (a31c <_qspi_end_transfer+0x18>)
    a30e:	6878      	ldr	r0, [r7, #4]
    a310:	4b03      	ldr	r3, [pc, #12]	; (a320 <_qspi_end_transfer+0x1c>)
    a312:	4798      	blx	r3
}
    a314:	bf00      	nop
    a316:	3708      	adds	r7, #8
    a318:	46bd      	mov	sp, r7
    a31a:	bd80      	pop	{r7, pc}
    a31c:	01000002 	.word	0x01000002
    a320:	0000a1c1 	.word	0x0000a1c1

0000a324 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    a324:	b580      	push	{r7, lr}
    a326:	b082      	sub	sp, #8
    a328:	af00      	add	r7, sp, #0
    a32a:	6078      	str	r0, [r7, #4]
    a32c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    a32e:	687b      	ldr	r3, [r7, #4]
    a330:	2b00      	cmp	r3, #0
    a332:	d004      	beq.n	a33e <_qspi_sync_init+0x1a>
    a334:	683b      	ldr	r3, [r7, #0]
    a336:	2b00      	cmp	r3, #0
    a338:	d001      	beq.n	a33e <_qspi_sync_init+0x1a>
    a33a:	2301      	movs	r3, #1
    a33c:	e000      	b.n	a340 <_qspi_sync_init+0x1c>
    a33e:	2300      	movs	r3, #0
    a340:	f003 0301 	and.w	r3, r3, #1
    a344:	b2db      	uxtb	r3, r3
    a346:	2240      	movs	r2, #64	; 0x40
    a348:	490c      	ldr	r1, [pc, #48]	; (a37c <_qspi_sync_init+0x58>)
    a34a:	4618      	mov	r0, r3
    a34c:	4b0c      	ldr	r3, [pc, #48]	; (a380 <_qspi_sync_init+0x5c>)
    a34e:	4798      	blx	r3
	dev->prvt = hw;
    a350:	687b      	ldr	r3, [r7, #4]
    a352:	683a      	ldr	r2, [r7, #0]
    a354:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    a356:	687b      	ldr	r3, [r7, #4]
    a358:	681b      	ldr	r3, [r3, #0]
    a35a:	2101      	movs	r1, #1
    a35c:	4618      	mov	r0, r3
    a35e:	4b09      	ldr	r3, [pc, #36]	; (a384 <_qspi_sync_init+0x60>)
    a360:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    a362:	4909      	ldr	r1, [pc, #36]	; (a388 <_qspi_sync_init+0x64>)
    a364:	6838      	ldr	r0, [r7, #0]
    a366:	4b09      	ldr	r3, [pc, #36]	; (a38c <_qspi_sync_init+0x68>)
    a368:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    a36a:	4909      	ldr	r1, [pc, #36]	; (a390 <_qspi_sync_init+0x6c>)
    a36c:	6838      	ldr	r0, [r7, #0]
    a36e:	4b09      	ldr	r3, [pc, #36]	; (a394 <_qspi_sync_init+0x70>)
    a370:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    a372:	2300      	movs	r3, #0
}
    a374:	4618      	mov	r0, r3
    a376:	3708      	adds	r7, #8
    a378:	46bd      	mov	sp, r7
    a37a:	bd80      	pop	{r7, pc}
    a37c:	00021b88 	.word	0x00021b88
    a380:	00007e21 	.word	0x00007e21
    a384:	0000a1c1 	.word	0x0000a1c1
    a388:	06000011 	.word	0x06000011
    a38c:	0000a1dd 	.word	0x0000a1dd
    a390:	00241300 	.word	0x00241300
    a394:	0000a1f9 	.word	0x0000a1f9

0000a398 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    a398:	b580      	push	{r7, lr}
    a39a:	b082      	sub	sp, #8
    a39c:	af00      	add	r7, sp, #0
    a39e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    a3a0:	687b      	ldr	r3, [r7, #4]
    a3a2:	681b      	ldr	r3, [r3, #0]
    a3a4:	2102      	movs	r1, #2
    a3a6:	4618      	mov	r0, r3
    a3a8:	4b03      	ldr	r3, [pc, #12]	; (a3b8 <_qspi_sync_enable+0x20>)
    a3aa:	4798      	blx	r3
	return ERR_NONE;
    a3ac:	2300      	movs	r3, #0
}
    a3ae:	4618      	mov	r0, r3
    a3b0:	3708      	adds	r7, #8
    a3b2:	46bd      	mov	sp, r7
    a3b4:	bd80      	pop	{r7, pc}
    a3b6:	bf00      	nop
    a3b8:	0000a1c1 	.word	0x0000a1c1

0000a3bc <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    a3bc:	b580      	push	{r7, lr}
    a3be:	b082      	sub	sp, #8
    a3c0:	af00      	add	r7, sp, #0
    a3c2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    a3c4:	687b      	ldr	r3, [r7, #4]
    a3c6:	681b      	ldr	r3, [r3, #0]
    a3c8:	2100      	movs	r1, #0
    a3ca:	4618      	mov	r0, r3
    a3cc:	4b03      	ldr	r3, [pc, #12]	; (a3dc <_qspi_sync_disable+0x20>)
    a3ce:	4798      	blx	r3
	return ERR_NONE;
    a3d0:	2300      	movs	r3, #0
}
    a3d2:	4618      	mov	r0, r3
    a3d4:	3708      	adds	r7, #8
    a3d6:	46bd      	mov	sp, r7
    a3d8:	bd80      	pop	{r7, pc}
    a3da:	bf00      	nop
    a3dc:	0000a1c1 	.word	0x0000a1c1

0000a3e0 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a3e0:	b580      	push	{r7, lr}
    a3e2:	b084      	sub	sp, #16
    a3e4:	af00      	add	r7, sp, #0
    a3e6:	6078      	str	r0, [r7, #4]
    a3e8:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    a3ea:	687b      	ldr	r3, [r7, #4]
    a3ec:	681b      	ldr	r3, [r3, #0]
    a3ee:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    a3f0:	683b      	ldr	r3, [r7, #0]
    a3f2:	781b      	ldrb	r3, [r3, #0]
    a3f4:	f003 0320 	and.w	r3, r3, #32
    a3f8:	b2db      	uxtb	r3, r3
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	d005      	beq.n	a40a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    a3fe:	683b      	ldr	r3, [r7, #0]
    a400:	689b      	ldr	r3, [r3, #8]
    a402:	4619      	mov	r1, r3
    a404:	68f8      	ldr	r0, [r7, #12]
    a406:	4b13      	ldr	r3, [pc, #76]	; (a454 <_qspi_sync_command_set_ifr+0x74>)
    a408:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    a40a:	683b      	ldr	r3, [r7, #0]
    a40c:	781b      	ldrb	r3, [r3, #0]
    a40e:	f003 0310 	and.w	r3, r3, #16
    a412:	b2db      	uxtb	r3, r3
    a414:	2b00      	cmp	r3, #0
    a416:	d005      	beq.n	a424 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    a418:	683b      	ldr	r3, [r7, #0]
    a41a:	791b      	ldrb	r3, [r3, #4]
    a41c:	4619      	mov	r1, r3
    a41e:	68f8      	ldr	r0, [r7, #12]
    a420:	4b0d      	ldr	r3, [pc, #52]	; (a458 <_qspi_sync_command_set_ifr+0x78>)
    a422:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    a424:	683b      	ldr	r3, [r7, #0]
    a426:	781b      	ldrb	r3, [r3, #0]
    a428:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a42c:	b2db      	uxtb	r3, r3
    a42e:	2b00      	cmp	r3, #0
    a430:	d005      	beq.n	a43e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    a432:	683b      	ldr	r3, [r7, #0]
    a434:	795b      	ldrb	r3, [r3, #5]
    a436:	4619      	mov	r1, r3
    a438:	68f8      	ldr	r0, [r7, #12]
    a43a:	4b08      	ldr	r3, [pc, #32]	; (a45c <_qspi_sync_command_set_ifr+0x7c>)
    a43c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    a43e:	683b      	ldr	r3, [r7, #0]
    a440:	681b      	ldr	r3, [r3, #0]
    a442:	4619      	mov	r1, r3
    a444:	68f8      	ldr	r0, [r7, #12]
    a446:	4b06      	ldr	r3, [pc, #24]	; (a460 <_qspi_sync_command_set_ifr+0x80>)
    a448:	4798      	blx	r3
}
    a44a:	bf00      	nop
    a44c:	3710      	adds	r7, #16
    a44e:	46bd      	mov	sp, r7
    a450:	bd80      	pop	{r7, pc}
    a452:	bf00      	nop
    a454:	0000a215 	.word	0x0000a215
    a458:	0000a231 	.word	0x0000a231
    a45c:	0000a265 	.word	0x0000a265
    a460:	0000a29d 	.word	0x0000a29d

0000a464 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a464:	b580      	push	{r7, lr}
    a466:	b084      	sub	sp, #16
    a468:	af00      	add	r7, sp, #0
    a46a:	6078      	str	r0, [r7, #4]
    a46c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	681b      	ldr	r3, [r3, #0]
    a472:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    a474:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a478:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    a47a:	683b      	ldr	r3, [r7, #0]
    a47c:	781b      	ldrb	r3, [r3, #0]
    a47e:	f003 0320 	and.w	r3, r3, #32
    a482:	b2db      	uxtb	r3, r3
    a484:	2b00      	cmp	r3, #0
    a486:	d004      	beq.n	a492 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    a488:	683b      	ldr	r3, [r7, #0]
    a48a:	689b      	ldr	r3, [r3, #8]
    a48c:	68fa      	ldr	r2, [r7, #12]
    a48e:	4413      	add	r3, r2
    a490:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    a492:	68b8      	ldr	r0, [r7, #8]
    a494:	4b18      	ldr	r3, [pc, #96]	; (a4f8 <_qspi_sync_run_transfer+0x94>)
    a496:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    a498:	683b      	ldr	r3, [r7, #0]
    a49a:	691b      	ldr	r3, [r3, #16]
    a49c:	2b00      	cmp	r3, #0
    a49e:	d103      	bne.n	a4a8 <_qspi_sync_run_transfer+0x44>
    a4a0:	683b      	ldr	r3, [r7, #0]
    a4a2:	695b      	ldr	r3, [r3, #20]
    a4a4:	2b00      	cmp	r3, #0
    a4a6:	d001      	beq.n	a4ac <_qspi_sync_run_transfer+0x48>
    a4a8:	2301      	movs	r3, #1
    a4aa:	e000      	b.n	a4ae <_qspi_sync_run_transfer+0x4a>
    a4ac:	2300      	movs	r3, #0
    a4ae:	f003 0301 	and.w	r3, r3, #1
    a4b2:	b2db      	uxtb	r3, r3
    a4b4:	2282      	movs	r2, #130	; 0x82
    a4b6:	4911      	ldr	r1, [pc, #68]	; (a4fc <_qspi_sync_run_transfer+0x98>)
    a4b8:	4618      	mov	r0, r3
    a4ba:	4b11      	ldr	r3, [pc, #68]	; (a500 <_qspi_sync_run_transfer+0x9c>)
    a4bc:	4798      	blx	r3

	if (cmd->tx_buf) {
    a4be:	683b      	ldr	r3, [r7, #0]
    a4c0:	691b      	ldr	r3, [r3, #16]
    a4c2:	2b00      	cmp	r3, #0
    a4c4:	d008      	beq.n	a4d8 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    a4c6:	683b      	ldr	r3, [r7, #0]
    a4c8:	6919      	ldr	r1, [r3, #16]
    a4ca:	683b      	ldr	r3, [r7, #0]
    a4cc:	68db      	ldr	r3, [r3, #12]
    a4ce:	461a      	mov	r2, r3
    a4d0:	68f8      	ldr	r0, [r7, #12]
    a4d2:	4b0c      	ldr	r3, [pc, #48]	; (a504 <_qspi_sync_run_transfer+0xa0>)
    a4d4:	4798      	blx	r3
    a4d6:	e007      	b.n	a4e8 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    a4d8:	683b      	ldr	r3, [r7, #0]
    a4da:	6958      	ldr	r0, [r3, #20]
    a4dc:	683b      	ldr	r3, [r7, #0]
    a4de:	68db      	ldr	r3, [r3, #12]
    a4e0:	461a      	mov	r2, r3
    a4e2:	68f9      	ldr	r1, [r7, #12]
    a4e4:	4b07      	ldr	r3, [pc, #28]	; (a504 <_qspi_sync_run_transfer+0xa0>)
    a4e6:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    a4e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a4ec:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    a4f0:	bf00      	nop
    a4f2:	3710      	adds	r7, #16
    a4f4:	46bd      	mov	sp, r7
    a4f6:	bd80      	pop	{r7, pc}
    a4f8:	0000a2b9 	.word	0x0000a2b9
    a4fc:	00021b88 	.word	0x00021b88
    a500:	00007e21 	.word	0x00007e21
    a504:	0000a2d1 	.word	0x0000a2d1

0000a508 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a508:	b580      	push	{r7, lr}
    a50a:	b082      	sub	sp, #8
    a50c:	af00      	add	r7, sp, #0
    a50e:	6078      	str	r0, [r7, #4]
    a510:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    a512:	6839      	ldr	r1, [r7, #0]
    a514:	6878      	ldr	r0, [r7, #4]
    a516:	4b14      	ldr	r3, [pc, #80]	; (a568 <_qspi_sync_serial_run_command+0x60>)
    a518:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    a51a:	683b      	ldr	r3, [r7, #0]
    a51c:	781b      	ldrb	r3, [r3, #0]
    a51e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a522:	b2db      	uxtb	r3, r3
    a524:	2b00      	cmp	r3, #0
    a526:	d003      	beq.n	a530 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    a528:	6839      	ldr	r1, [r7, #0]
    a52a:	6878      	ldr	r0, [r7, #4]
    a52c:	4b0f      	ldr	r3, [pc, #60]	; (a56c <_qspi_sync_serial_run_command+0x64>)
    a52e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    a530:	687b      	ldr	r3, [r7, #4]
    a532:	681b      	ldr	r3, [r3, #0]
    a534:	4618      	mov	r0, r3
    a536:	4b0e      	ldr	r3, [pc, #56]	; (a570 <_qspi_sync_serial_run_command+0x68>)
    a538:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    a53a:	bf00      	nop
    a53c:	687b      	ldr	r3, [r7, #4]
    a53e:	681b      	ldr	r3, [r3, #0]
    a540:	4618      	mov	r0, r3
    a542:	4b0c      	ldr	r3, [pc, #48]	; (a574 <_qspi_sync_serial_run_command+0x6c>)
    a544:	4798      	blx	r3
    a546:	4603      	mov	r3, r0
    a548:	f083 0301 	eor.w	r3, r3, #1
    a54c:	b2db      	uxtb	r3, r3
    a54e:	2b00      	cmp	r3, #0
    a550:	d1f4      	bne.n	a53c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    a552:	687b      	ldr	r3, [r7, #4]
    a554:	681b      	ldr	r3, [r3, #0]
    a556:	4618      	mov	r0, r3
    a558:	4b07      	ldr	r3, [pc, #28]	; (a578 <_qspi_sync_serial_run_command+0x70>)
    a55a:	4798      	blx	r3
	return ERR_NONE;
    a55c:	2300      	movs	r3, #0
}
    a55e:	4618      	mov	r0, r3
    a560:	3708      	adds	r7, #8
    a562:	46bd      	mov	sp, r7
    a564:	bd80      	pop	{r7, pc}
    a566:	bf00      	nop
    a568:	0000a3e1 	.word	0x0000a3e1
    a56c:	0000a465 	.word	0x0000a465
    a570:	0000a305 	.word	0x0000a305
    a574:	0000a17d 	.word	0x0000a17d
    a578:	0000a1a5 	.word	0x0000a1a5

0000a57c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    a57c:	b480      	push	{r7}
    a57e:	b083      	sub	sp, #12
    a580:	af00      	add	r7, sp, #0
    a582:	6078      	str	r0, [r7, #4]
    a584:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    a586:	bf00      	nop
    a588:	687b      	ldr	r3, [r7, #4]
    a58a:	691a      	ldr	r2, [r3, #16]
    a58c:	683b      	ldr	r3, [r7, #0]
    a58e:	4013      	ands	r3, r2
    a590:	2b00      	cmp	r3, #0
    a592:	d1f9      	bne.n	a588 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    a594:	bf00      	nop
    a596:	370c      	adds	r7, #12
    a598:	46bd      	mov	sp, r7
    a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a59e:	4770      	bx	lr

0000a5a0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    a5a0:	b480      	push	{r7}
    a5a2:	b083      	sub	sp, #12
    a5a4:	af00      	add	r7, sp, #0
    a5a6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    a5a8:	687b      	ldr	r3, [r7, #4]
    a5aa:	f44f 7280 	mov.w	r2, #256	; 0x100
    a5ae:	819a      	strh	r2, [r3, #12]
}
    a5b0:	bf00      	nop
    a5b2:	370c      	adds	r7, #12
    a5b4:	46bd      	mov	sp, r7
    a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5ba:	4770      	bx	lr

0000a5bc <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    a5bc:	b480      	push	{r7}
    a5be:	b083      	sub	sp, #12
    a5c0:	af00      	add	r7, sp, #0
    a5c2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    a5c4:	687b      	ldr	r3, [r7, #4]
    a5c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a5ca:	819a      	strh	r2, [r3, #12]
}
    a5cc:	bf00      	nop
    a5ce:	370c      	adds	r7, #12
    a5d0:	46bd      	mov	sp, r7
    a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5d6:	4770      	bx	lr

0000a5d8 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    a5d8:	b480      	push	{r7}
    a5da:	b083      	sub	sp, #12
    a5dc:	af00      	add	r7, sp, #0
    a5de:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    a5e0:	687b      	ldr	r3, [r7, #4]
    a5e2:	899b      	ldrh	r3, [r3, #12]
    a5e4:	b29b      	uxth	r3, r3
}
    a5e6:	4618      	mov	r0, r3
    a5e8:	370c      	adds	r7, #12
    a5ea:	46bd      	mov	sp, r7
    a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5f0:	4770      	bx	lr

0000a5f2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    a5f2:	b480      	push	{r7}
    a5f4:	b083      	sub	sp, #12
    a5f6:	af00      	add	r7, sp, #0
    a5f8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    a5fa:	687b      	ldr	r3, [r7, #4]
    a5fc:	895b      	ldrh	r3, [r3, #10]
    a5fe:	b29b      	uxth	r3, r3
}
    a600:	4618      	mov	r0, r3
    a602:	370c      	adds	r7, #12
    a604:	46bd      	mov	sp, r7
    a606:	f85d 7b04 	ldr.w	r7, [sp], #4
    a60a:	4770      	bx	lr

0000a60c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    a60c:	b580      	push	{r7, lr}
    a60e:	b082      	sub	sp, #8
    a610:	af00      	add	r7, sp, #0
    a612:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    a614:	687b      	ldr	r3, [r7, #4]
    a616:	881b      	ldrh	r3, [r3, #0]
    a618:	b29b      	uxth	r3, r3
    a61a:	f043 0301 	orr.w	r3, r3, #1
    a61e:	b29a      	uxth	r2, r3
    a620:	687b      	ldr	r3, [r7, #4]
    a622:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    a624:	2101      	movs	r1, #1
    a626:	6878      	ldr	r0, [r7, #4]
    a628:	4b02      	ldr	r3, [pc, #8]	; (a634 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    a62a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a62c:	bf00      	nop
    a62e:	3708      	adds	r7, #8
    a630:	46bd      	mov	sp, r7
    a632:	bd80      	pop	{r7, pc}
    a634:	0000a57d 	.word	0x0000a57d

0000a638 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a638:	b580      	push	{r7, lr}
    a63a:	b082      	sub	sp, #8
    a63c:	af00      	add	r7, sp, #0
    a63e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    a640:	687b      	ldr	r3, [r7, #4]
    a642:	881b      	ldrh	r3, [r3, #0]
    a644:	b29b      	uxth	r3, r3
    a646:	f043 0302 	orr.w	r3, r3, #2
    a64a:	b29a      	uxth	r2, r3
    a64c:	687b      	ldr	r3, [r7, #4]
    a64e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a650:	f248 0103 	movw	r1, #32771	; 0x8003
    a654:	6878      	ldr	r0, [r7, #4]
    a656:	4b03      	ldr	r3, [pc, #12]	; (a664 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    a658:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a65a:	bf00      	nop
    a65c:	3708      	adds	r7, #8
    a65e:	46bd      	mov	sp, r7
    a660:	bd80      	pop	{r7, pc}
    a662:	bf00      	nop
    a664:	0000a57d 	.word	0x0000a57d

0000a668 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a668:	b580      	push	{r7, lr}
    a66a:	b084      	sub	sp, #16
    a66c:	af00      	add	r7, sp, #0
    a66e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a670:	f248 0103 	movw	r1, #32771	; 0x8003
    a674:	6878      	ldr	r0, [r7, #4]
    a676:	4b0a      	ldr	r3, [pc, #40]	; (a6a0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    a678:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    a67a:	687b      	ldr	r3, [r7, #4]
    a67c:	881b      	ldrh	r3, [r3, #0]
    a67e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    a680:	89fb      	ldrh	r3, [r7, #14]
    a682:	085b      	lsrs	r3, r3, #1
    a684:	b29b      	uxth	r3, r3
    a686:	f003 0301 	and.w	r3, r3, #1
    a68a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    a68c:	89fb      	ldrh	r3, [r7, #14]
    a68e:	2b00      	cmp	r3, #0
    a690:	bf14      	ite	ne
    a692:	2301      	movne	r3, #1
    a694:	2300      	moveq	r3, #0
    a696:	b2db      	uxtb	r3, r3
}
    a698:	4618      	mov	r0, r3
    a69a:	3710      	adds	r7, #16
    a69c:	46bd      	mov	sp, r7
    a69e:	bd80      	pop	{r7, pc}
    a6a0:	0000a57d 	.word	0x0000a57d

0000a6a4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a6a4:	b580      	push	{r7, lr}
    a6a6:	b082      	sub	sp, #8
    a6a8:	af00      	add	r7, sp, #0
    a6aa:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    a6ac:	687b      	ldr	r3, [r7, #4]
    a6ae:	881b      	ldrh	r3, [r3, #0]
    a6b0:	b29b      	uxth	r3, r3
    a6b2:	f023 0302 	bic.w	r3, r3, #2
    a6b6:	b29a      	uxth	r2, r3
    a6b8:	687b      	ldr	r3, [r7, #4]
    a6ba:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a6bc:	f248 0103 	movw	r1, #32771	; 0x8003
    a6c0:	6878      	ldr	r0, [r7, #4]
    a6c2:	4b03      	ldr	r3, [pc, #12]	; (a6d0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    a6c4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a6c6:	bf00      	nop
    a6c8:	3708      	adds	r7, #8
    a6ca:	46bd      	mov	sp, r7
    a6cc:	bd80      	pop	{r7, pc}
    a6ce:	bf00      	nop
    a6d0:	0000a57d 	.word	0x0000a57d

0000a6d4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    a6d4:	b580      	push	{r7, lr}
    a6d6:	b082      	sub	sp, #8
    a6d8:	af00      	add	r7, sp, #0
    a6da:	6078      	str	r0, [r7, #4]
    a6dc:	460b      	mov	r3, r1
    a6de:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    a6e0:	687b      	ldr	r3, [r7, #4]
    a6e2:	887a      	ldrh	r2, [r7, #2]
    a6e4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a6e6:	f248 0103 	movw	r1, #32771	; 0x8003
    a6ea:	6878      	ldr	r0, [r7, #4]
    a6ec:	4b02      	ldr	r3, [pc, #8]	; (a6f8 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    a6ee:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a6f0:	bf00      	nop
    a6f2:	3708      	adds	r7, #8
    a6f4:	46bd      	mov	sp, r7
    a6f6:	bd80      	pop	{r7, pc}
    a6f8:	0000a57d 	.word	0x0000a57d

0000a6fc <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    a6fc:	b580      	push	{r7, lr}
    a6fe:	b082      	sub	sp, #8
    a700:	af00      	add	r7, sp, #0
    a702:	6078      	str	r0, [r7, #4]
    a704:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    a706:	687b      	ldr	r3, [r7, #4]
    a708:	683a      	ldr	r2, [r7, #0]
    a70a:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    a70c:	2108      	movs	r1, #8
    a70e:	6878      	ldr	r0, [r7, #4]
    a710:	4b02      	ldr	r3, [pc, #8]	; (a71c <hri_rtcmode0_write_COUNT_reg+0x20>)
    a712:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a714:	bf00      	nop
    a716:	3708      	adds	r7, #8
    a718:	46bd      	mov	sp, r7
    a71a:	bd80      	pop	{r7, pc}
    a71c:	0000a57d 	.word	0x0000a57d

0000a720 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    a720:	b580      	push	{r7, lr}
    a722:	b082      	sub	sp, #8
    a724:	af00      	add	r7, sp, #0
    a726:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    a728:	2108      	movs	r1, #8
    a72a:	6878      	ldr	r0, [r7, #4]
    a72c:	4b03      	ldr	r3, [pc, #12]	; (a73c <hri_rtcmode0_read_COUNT_reg+0x1c>)
    a72e:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    a730:	687b      	ldr	r3, [r7, #4]
    a732:	699b      	ldr	r3, [r3, #24]
}
    a734:	4618      	mov	r0, r3
    a736:	3708      	adds	r7, #8
    a738:	46bd      	mov	sp, r7
    a73a:	bd80      	pop	{r7, pc}
    a73c:	0000a57d 	.word	0x0000a57d

0000a740 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    a740:	b480      	push	{r7}
    a742:	b083      	sub	sp, #12
    a744:	af00      	add	r7, sp, #0
    a746:	6078      	str	r0, [r7, #4]
    a748:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    a74a:	687b      	ldr	r3, [r7, #4]
    a74c:	683a      	ldr	r2, [r7, #0]
    a74e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    a750:	bf00      	nop
    a752:	370c      	adds	r7, #12
    a754:	46bd      	mov	sp, r7
    a756:	f85d 7b04 	ldr.w	r7, [sp], #4
    a75a:	4770      	bx	lr

0000a75c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    a75c:	b580      	push	{r7, lr}
    a75e:	b082      	sub	sp, #8
    a760:	af00      	add	r7, sp, #0
    a762:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a764:	687b      	ldr	r3, [r7, #4]
    a766:	2b00      	cmp	r3, #0
    a768:	d005      	beq.n	a776 <_calendar_init+0x1a>
    a76a:	687b      	ldr	r3, [r7, #4]
    a76c:	681b      	ldr	r3, [r3, #0]
    a76e:	2b00      	cmp	r3, #0
    a770:	d001      	beq.n	a776 <_calendar_init+0x1a>
    a772:	2301      	movs	r3, #1
    a774:	e000      	b.n	a778 <_calendar_init+0x1c>
    a776:	2300      	movs	r3, #0
    a778:	f003 0301 	and.w	r3, r3, #1
    a77c:	b2db      	uxtb	r3, r3
    a77e:	222f      	movs	r2, #47	; 0x2f
    a780:	491b      	ldr	r1, [pc, #108]	; (a7f0 <_calendar_init+0x94>)
    a782:	4618      	mov	r0, r3
    a784:	4b1b      	ldr	r3, [pc, #108]	; (a7f4 <_calendar_init+0x98>)
    a786:	4798      	blx	r3

	_rtc_dev = dev;
    a788:	4a1b      	ldr	r2, [pc, #108]	; (a7f8 <_calendar_init+0x9c>)
    a78a:	687b      	ldr	r3, [r7, #4]
    a78c:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    a78e:	687b      	ldr	r3, [r7, #4]
    a790:	681b      	ldr	r3, [r3, #0]
    a792:	4618      	mov	r0, r3
    a794:	4b19      	ldr	r3, [pc, #100]	; (a7fc <_calendar_init+0xa0>)
    a796:	4798      	blx	r3
    a798:	4603      	mov	r3, r0
    a79a:	2b00      	cmp	r3, #0
    a79c:	d00a      	beq.n	a7b4 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    a79e:	687b      	ldr	r3, [r7, #4]
    a7a0:	681b      	ldr	r3, [r3, #0]
    a7a2:	4618      	mov	r0, r3
    a7a4:	4b16      	ldr	r3, [pc, #88]	; (a800 <_calendar_init+0xa4>)
    a7a6:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    a7a8:	687b      	ldr	r3, [r7, #4]
    a7aa:	681b      	ldr	r3, [r3, #0]
    a7ac:	2102      	movs	r1, #2
    a7ae:	4618      	mov	r0, r3
    a7b0:	4b14      	ldr	r3, [pc, #80]	; (a804 <_calendar_init+0xa8>)
    a7b2:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    a7b4:	687b      	ldr	r3, [r7, #4]
    a7b6:	681b      	ldr	r3, [r3, #0]
    a7b8:	4618      	mov	r0, r3
    a7ba:	4b13      	ldr	r3, [pc, #76]	; (a808 <_calendar_init+0xac>)
    a7bc:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    a7be:	687b      	ldr	r3, [r7, #4]
    a7c0:	681b      	ldr	r3, [r3, #0]
    a7c2:	2101      	movs	r1, #1
    a7c4:	4618      	mov	r0, r3
    a7c6:	4b0f      	ldr	r3, [pc, #60]	; (a804 <_calendar_init+0xa8>)
    a7c8:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    a7ca:	687b      	ldr	r3, [r7, #4]
    a7cc:	681b      	ldr	r3, [r3, #0]
    a7ce:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    a7d2:	4618      	mov	r0, r3
    a7d4:	4b0d      	ldr	r3, [pc, #52]	; (a80c <_calendar_init+0xb0>)
    a7d6:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    a7d8:	687b      	ldr	r3, [r7, #4]
    a7da:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    a7dc:	2100      	movs	r1, #0
    a7de:	4618      	mov	r0, r3
    a7e0:	4b0b      	ldr	r3, [pc, #44]	; (a810 <_calendar_init+0xb4>)
    a7e2:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    a7e4:	2300      	movs	r3, #0
}
    a7e6:	4618      	mov	r0, r3
    a7e8:	3708      	adds	r7, #8
    a7ea:	46bd      	mov	sp, r7
    a7ec:	bd80      	pop	{r7, pc}
    a7ee:	bf00      	nop
    a7f0:	00021ba0 	.word	0x00021ba0
    a7f4:	00007e21 	.word	0x00007e21
    a7f8:	200086f4 	.word	0x200086f4
    a7fc:	0000a669 	.word	0x0000a669
    a800:	0000a6a5 	.word	0x0000a6a5
    a804:	0000a57d 	.word	0x0000a57d
    a808:	0000a60d 	.word	0x0000a60d
    a80c:	0000a6d5 	.word	0x0000a6d5
    a810:	0000a741 	.word	0x0000a741

0000a814 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    a814:	b580      	push	{r7, lr}
    a816:	b082      	sub	sp, #8
    a818:	af00      	add	r7, sp, #0
    a81a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a81c:	687b      	ldr	r3, [r7, #4]
    a81e:	2b00      	cmp	r3, #0
    a820:	d005      	beq.n	a82e <_calendar_enable+0x1a>
    a822:	687b      	ldr	r3, [r7, #4]
    a824:	681b      	ldr	r3, [r3, #0]
    a826:	2b00      	cmp	r3, #0
    a828:	d001      	beq.n	a82e <_calendar_enable+0x1a>
    a82a:	2301      	movs	r3, #1
    a82c:	e000      	b.n	a830 <_calendar_enable+0x1c>
    a82e:	2300      	movs	r3, #0
    a830:	f003 0301 	and.w	r3, r3, #1
    a834:	b2db      	uxtb	r3, r3
    a836:	2275      	movs	r2, #117	; 0x75
    a838:	4906      	ldr	r1, [pc, #24]	; (a854 <_calendar_enable+0x40>)
    a83a:	4618      	mov	r0, r3
    a83c:	4b06      	ldr	r3, [pc, #24]	; (a858 <_calendar_enable+0x44>)
    a83e:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    a840:	687b      	ldr	r3, [r7, #4]
    a842:	681b      	ldr	r3, [r3, #0]
    a844:	4618      	mov	r0, r3
    a846:	4b05      	ldr	r3, [pc, #20]	; (a85c <_calendar_enable+0x48>)
    a848:	4798      	blx	r3

	return ERR_NONE;
    a84a:	2300      	movs	r3, #0
}
    a84c:	4618      	mov	r0, r3
    a84e:	3708      	adds	r7, #8
    a850:	46bd      	mov	sp, r7
    a852:	bd80      	pop	{r7, pc}
    a854:	00021ba0 	.word	0x00021ba0
    a858:	00007e21 	.word	0x00007e21
    a85c:	0000a639 	.word	0x0000a639

0000a860 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    a860:	b580      	push	{r7, lr}
    a862:	b082      	sub	sp, #8
    a864:	af00      	add	r7, sp, #0
    a866:	6078      	str	r0, [r7, #4]
    a868:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    a86a:	687b      	ldr	r3, [r7, #4]
    a86c:	2b00      	cmp	r3, #0
    a86e:	d005      	beq.n	a87c <_calendar_set_counter+0x1c>
    a870:	687b      	ldr	r3, [r7, #4]
    a872:	681b      	ldr	r3, [r3, #0]
    a874:	2b00      	cmp	r3, #0
    a876:	d001      	beq.n	a87c <_calendar_set_counter+0x1c>
    a878:	2301      	movs	r3, #1
    a87a:	e000      	b.n	a87e <_calendar_set_counter+0x1e>
    a87c:	2300      	movs	r3, #0
    a87e:	f003 0301 	and.w	r3, r3, #1
    a882:	b2db      	uxtb	r3, r3
    a884:	228d      	movs	r2, #141	; 0x8d
    a886:	4907      	ldr	r1, [pc, #28]	; (a8a4 <_calendar_set_counter+0x44>)
    a888:	4618      	mov	r0, r3
    a88a:	4b07      	ldr	r3, [pc, #28]	; (a8a8 <_calendar_set_counter+0x48>)
    a88c:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    a88e:	687b      	ldr	r3, [r7, #4]
    a890:	681b      	ldr	r3, [r3, #0]
    a892:	6839      	ldr	r1, [r7, #0]
    a894:	4618      	mov	r0, r3
    a896:	4b05      	ldr	r3, [pc, #20]	; (a8ac <_calendar_set_counter+0x4c>)
    a898:	4798      	blx	r3

	return ERR_NONE;
    a89a:	2300      	movs	r3, #0
}
    a89c:	4618      	mov	r0, r3
    a89e:	3708      	adds	r7, #8
    a8a0:	46bd      	mov	sp, r7
    a8a2:	bd80      	pop	{r7, pc}
    a8a4:	00021ba0 	.word	0x00021ba0
    a8a8:	00007e21 	.word	0x00007e21
    a8ac:	0000a6fd 	.word	0x0000a6fd

0000a8b0 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    a8b0:	b580      	push	{r7, lr}
    a8b2:	b082      	sub	sp, #8
    a8b4:	af00      	add	r7, sp, #0
    a8b6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a8b8:	687b      	ldr	r3, [r7, #4]
    a8ba:	2b00      	cmp	r3, #0
    a8bc:	d005      	beq.n	a8ca <_calendar_get_counter+0x1a>
    a8be:	687b      	ldr	r3, [r7, #4]
    a8c0:	681b      	ldr	r3, [r3, #0]
    a8c2:	2b00      	cmp	r3, #0
    a8c4:	d001      	beq.n	a8ca <_calendar_get_counter+0x1a>
    a8c6:	2301      	movs	r3, #1
    a8c8:	e000      	b.n	a8cc <_calendar_get_counter+0x1c>
    a8ca:	2300      	movs	r3, #0
    a8cc:	f003 0301 	and.w	r3, r3, #1
    a8d0:	b2db      	uxtb	r3, r3
    a8d2:	2299      	movs	r2, #153	; 0x99
    a8d4:	4906      	ldr	r1, [pc, #24]	; (a8f0 <_calendar_get_counter+0x40>)
    a8d6:	4618      	mov	r0, r3
    a8d8:	4b06      	ldr	r3, [pc, #24]	; (a8f4 <_calendar_get_counter+0x44>)
    a8da:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    a8dc:	687b      	ldr	r3, [r7, #4]
    a8de:	681b      	ldr	r3, [r3, #0]
    a8e0:	4618      	mov	r0, r3
    a8e2:	4b05      	ldr	r3, [pc, #20]	; (a8f8 <_calendar_get_counter+0x48>)
    a8e4:	4798      	blx	r3
    a8e6:	4603      	mov	r3, r0
}
    a8e8:	4618      	mov	r0, r3
    a8ea:	3708      	adds	r7, #8
    a8ec:	46bd      	mov	sp, r7
    a8ee:	bd80      	pop	{r7, pc}
    a8f0:	00021ba0 	.word	0x00021ba0
    a8f4:	00007e21 	.word	0x00007e21
    a8f8:	0000a721 	.word	0x0000a721

0000a8fc <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    a8fc:	b580      	push	{r7, lr}
    a8fe:	b084      	sub	sp, #16
    a900:	af00      	add	r7, sp, #0
    a902:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    a904:	687b      	ldr	r3, [r7, #4]
    a906:	681b      	ldr	r3, [r3, #0]
    a908:	4618      	mov	r0, r3
    a90a:	4b19      	ldr	r3, [pc, #100]	; (a970 <_rtc_interrupt_handler+0x74>)
    a90c:	4798      	blx	r3
    a90e:	4603      	mov	r3, r0
    a910:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    a912:	687b      	ldr	r3, [r7, #4]
    a914:	681b      	ldr	r3, [r3, #0]
    a916:	4618      	mov	r0, r3
    a918:	4b16      	ldr	r3, [pc, #88]	; (a974 <_rtc_interrupt_handler+0x78>)
    a91a:	4798      	blx	r3
    a91c:	4603      	mov	r3, r0
    a91e:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    a920:	89fa      	ldrh	r2, [r7, #14]
    a922:	89bb      	ldrh	r3, [r7, #12]
    a924:	4013      	ands	r3, r2
    a926:	b29b      	uxth	r3, r3
    a928:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a92c:	2b00      	cmp	r3, #0
    a92e:	d009      	beq.n	a944 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    a930:	687b      	ldr	r3, [r7, #4]
    a932:	685b      	ldr	r3, [r3, #4]
    a934:	6878      	ldr	r0, [r7, #4]
    a936:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    a938:	687b      	ldr	r3, [r7, #4]
    a93a:	681b      	ldr	r3, [r3, #0]
    a93c:	4618      	mov	r0, r3
    a93e:	4b0e      	ldr	r3, [pc, #56]	; (a978 <_rtc_interrupt_handler+0x7c>)
    a940:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    a942:	e010      	b.n	a966 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    a944:	89fa      	ldrh	r2, [r7, #14]
    a946:	89bb      	ldrh	r3, [r7, #12]
    a948:	4013      	ands	r3, r2
    a94a:	b29b      	uxth	r3, r3
    a94c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a950:	2b00      	cmp	r3, #0
    a952:	d008      	beq.n	a966 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    a954:	687b      	ldr	r3, [r7, #4]
    a956:	689b      	ldr	r3, [r3, #8]
    a958:	6878      	ldr	r0, [r7, #4]
    a95a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    a95c:	687b      	ldr	r3, [r7, #4]
    a95e:	681b      	ldr	r3, [r3, #0]
    a960:	4618      	mov	r0, r3
    a962:	4b06      	ldr	r3, [pc, #24]	; (a97c <_rtc_interrupt_handler+0x80>)
    a964:	4798      	blx	r3
}
    a966:	bf00      	nop
    a968:	3710      	adds	r7, #16
    a96a:	46bd      	mov	sp, r7
    a96c:	bd80      	pop	{r7, pc}
    a96e:	bf00      	nop
    a970:	0000a5d9 	.word	0x0000a5d9
    a974:	0000a5f3 	.word	0x0000a5f3
    a978:	0000a5a1 	.word	0x0000a5a1
    a97c:	0000a5bd 	.word	0x0000a5bd

0000a980 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    a980:	b580      	push	{r7, lr}
    a982:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    a984:	4b03      	ldr	r3, [pc, #12]	; (a994 <RTC_Handler+0x14>)
    a986:	681b      	ldr	r3, [r3, #0]
    a988:	4618      	mov	r0, r3
    a98a:	4b03      	ldr	r3, [pc, #12]	; (a998 <RTC_Handler+0x18>)
    a98c:	4798      	blx	r3
}
    a98e:	bf00      	nop
    a990:	bd80      	pop	{r7, pc}
    a992:	bf00      	nop
    a994:	200086f4 	.word	0x200086f4
    a998:	0000a8fd 	.word	0x0000a8fd

0000a99c <__NVIC_EnableIRQ>:
{
    a99c:	b480      	push	{r7}
    a99e:	b083      	sub	sp, #12
    a9a0:	af00      	add	r7, sp, #0
    a9a2:	4603      	mov	r3, r0
    a9a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a9a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a9aa:	2b00      	cmp	r3, #0
    a9ac:	db0b      	blt.n	a9c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a9ae:	4909      	ldr	r1, [pc, #36]	; (a9d4 <__NVIC_EnableIRQ+0x38>)
    a9b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a9b4:	095b      	lsrs	r3, r3, #5
    a9b6:	88fa      	ldrh	r2, [r7, #6]
    a9b8:	f002 021f 	and.w	r2, r2, #31
    a9bc:	2001      	movs	r0, #1
    a9be:	fa00 f202 	lsl.w	r2, r0, r2
    a9c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a9c6:	bf00      	nop
    a9c8:	370c      	adds	r7, #12
    a9ca:	46bd      	mov	sp, r7
    a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9d0:	4770      	bx	lr
    a9d2:	bf00      	nop
    a9d4:	e000e100 	.word	0xe000e100

0000a9d8 <__NVIC_DisableIRQ>:
{
    a9d8:	b480      	push	{r7}
    a9da:	b083      	sub	sp, #12
    a9dc:	af00      	add	r7, sp, #0
    a9de:	4603      	mov	r3, r0
    a9e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a9e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a9e6:	2b00      	cmp	r3, #0
    a9e8:	db10      	blt.n	aa0c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a9ea:	490b      	ldr	r1, [pc, #44]	; (aa18 <__NVIC_DisableIRQ+0x40>)
    a9ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a9f0:	095b      	lsrs	r3, r3, #5
    a9f2:	88fa      	ldrh	r2, [r7, #6]
    a9f4:	f002 021f 	and.w	r2, r2, #31
    a9f8:	2001      	movs	r0, #1
    a9fa:	fa00 f202 	lsl.w	r2, r0, r2
    a9fe:	3320      	adds	r3, #32
    aa00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    aa04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    aa08:	f3bf 8f6f 	isb	sy
}
    aa0c:	bf00      	nop
    aa0e:	370c      	adds	r7, #12
    aa10:	46bd      	mov	sp, r7
    aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa16:	4770      	bx	lr
    aa18:	e000e100 	.word	0xe000e100

0000aa1c <__NVIC_ClearPendingIRQ>:
{
    aa1c:	b480      	push	{r7}
    aa1e:	b083      	sub	sp, #12
    aa20:	af00      	add	r7, sp, #0
    aa22:	4603      	mov	r3, r0
    aa24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    aa26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	db0c      	blt.n	aa48 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa2e:	4909      	ldr	r1, [pc, #36]	; (aa54 <__NVIC_ClearPendingIRQ+0x38>)
    aa30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aa34:	095b      	lsrs	r3, r3, #5
    aa36:	88fa      	ldrh	r2, [r7, #6]
    aa38:	f002 021f 	and.w	r2, r2, #31
    aa3c:	2001      	movs	r0, #1
    aa3e:	fa00 f202 	lsl.w	r2, r0, r2
    aa42:	3360      	adds	r3, #96	; 0x60
    aa44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa48:	bf00      	nop
    aa4a:	370c      	adds	r7, #12
    aa4c:	46bd      	mov	sp, r7
    aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa52:	4770      	bx	lr
    aa54:	e000e100 	.word	0xe000e100

0000aa58 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    aa58:	b480      	push	{r7}
    aa5a:	b083      	sub	sp, #12
    aa5c:	af00      	add	r7, sp, #0
    aa5e:	6078      	str	r0, [r7, #4]
    aa60:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    aa62:	bf00      	nop
    aa64:	687b      	ldr	r3, [r7, #4]
    aa66:	69da      	ldr	r2, [r3, #28]
    aa68:	683b      	ldr	r3, [r7, #0]
    aa6a:	4013      	ands	r3, r2
    aa6c:	2b00      	cmp	r3, #0
    aa6e:	d1f9      	bne.n	aa64 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    aa70:	bf00      	nop
    aa72:	370c      	adds	r7, #12
    aa74:	46bd      	mov	sp, r7
    aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa7a:	4770      	bx	lr

0000aa7c <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    aa7c:	b480      	push	{r7}
    aa7e:	b083      	sub	sp, #12
    aa80:	af00      	add	r7, sp, #0
    aa82:	6078      	str	r0, [r7, #4]
    aa84:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    aa86:	687b      	ldr	r3, [r7, #4]
    aa88:	69da      	ldr	r2, [r3, #28]
    aa8a:	683b      	ldr	r3, [r7, #0]
    aa8c:	4013      	ands	r3, r2
    aa8e:	2b00      	cmp	r3, #0
    aa90:	bf14      	ite	ne
    aa92:	2301      	movne	r3, #1
    aa94:	2300      	moveq	r3, #0
    aa96:	b2db      	uxtb	r3, r3
}
    aa98:	4618      	mov	r0, r3
    aa9a:	370c      	adds	r7, #12
    aa9c:	46bd      	mov	sp, r7
    aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaa2:	4770      	bx	lr

0000aaa4 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    aaa4:	b480      	push	{r7}
    aaa6:	b083      	sub	sp, #12
    aaa8:	af00      	add	r7, sp, #0
    aaaa:	6078      	str	r0, [r7, #4]
    aaac:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    aaae:	bf00      	nop
    aab0:	687b      	ldr	r3, [r7, #4]
    aab2:	69da      	ldr	r2, [r3, #28]
    aab4:	683b      	ldr	r3, [r7, #0]
    aab6:	4013      	ands	r3, r2
    aab8:	2b00      	cmp	r3, #0
    aaba:	d1f9      	bne.n	aab0 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    aabc:	bf00      	nop
    aabe:	370c      	adds	r7, #12
    aac0:	46bd      	mov	sp, r7
    aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aac6:	4770      	bx	lr

0000aac8 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    aac8:	b480      	push	{r7}
    aaca:	b083      	sub	sp, #12
    aacc:	af00      	add	r7, sp, #0
    aace:	6078      	str	r0, [r7, #4]
    aad0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    aad2:	687b      	ldr	r3, [r7, #4]
    aad4:	69da      	ldr	r2, [r3, #28]
    aad6:	683b      	ldr	r3, [r7, #0]
    aad8:	4013      	ands	r3, r2
    aada:	2b00      	cmp	r3, #0
    aadc:	bf14      	ite	ne
    aade:	2301      	movne	r3, #1
    aae0:	2300      	moveq	r3, #0
    aae2:	b2db      	uxtb	r3, r3
}
    aae4:	4618      	mov	r0, r3
    aae6:	370c      	adds	r7, #12
    aae8:	46bd      	mov	sp, r7
    aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaee:	4770      	bx	lr

0000aaf0 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    aaf0:	b480      	push	{r7}
    aaf2:	b083      	sub	sp, #12
    aaf4:	af00      	add	r7, sp, #0
    aaf6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    aaf8:	687b      	ldr	r3, [r7, #4]
    aafa:	2201      	movs	r2, #1
    aafc:	761a      	strb	r2, [r3, #24]
}
    aafe:	bf00      	nop
    ab00:	370c      	adds	r7, #12
    ab02:	46bd      	mov	sp, r7
    ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab08:	4770      	bx	lr

0000ab0a <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    ab0a:	b480      	push	{r7}
    ab0c:	b083      	sub	sp, #12
    ab0e:	af00      	add	r7, sp, #0
    ab10:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    ab12:	687b      	ldr	r3, [r7, #4]
    ab14:	2202      	movs	r2, #2
    ab16:	761a      	strb	r2, [r3, #24]
}
    ab18:	bf00      	nop
    ab1a:	370c      	adds	r7, #12
    ab1c:	46bd      	mov	sp, r7
    ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab22:	4770      	bx	lr

0000ab24 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    ab24:	b480      	push	{r7}
    ab26:	b083      	sub	sp, #12
    ab28:	af00      	add	r7, sp, #0
    ab2a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    ab2c:	687b      	ldr	r3, [r7, #4]
    ab2e:	7e1b      	ldrb	r3, [r3, #24]
    ab30:	b2db      	uxtb	r3, r3
}
    ab32:	4618      	mov	r0, r3
    ab34:	370c      	adds	r7, #12
    ab36:	46bd      	mov	sp, r7
    ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab3c:	4770      	bx	lr

0000ab3e <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    ab3e:	b480      	push	{r7}
    ab40:	b083      	sub	sp, #12
    ab42:	af00      	add	r7, sp, #0
    ab44:	6078      	str	r0, [r7, #4]
    ab46:	460b      	mov	r3, r1
    ab48:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    ab4a:	687b      	ldr	r3, [r7, #4]
    ab4c:	78fa      	ldrb	r2, [r7, #3]
    ab4e:	761a      	strb	r2, [r3, #24]
}
    ab50:	bf00      	nop
    ab52:	370c      	adds	r7, #12
    ab54:	46bd      	mov	sp, r7
    ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab5a:	4770      	bx	lr

0000ab5c <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    ab5c:	b480      	push	{r7}
    ab5e:	b085      	sub	sp, #20
    ab60:	af00      	add	r7, sp, #0
    ab62:	6078      	str	r0, [r7, #4]
    ab64:	460b      	mov	r3, r1
    ab66:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    ab68:	687b      	ldr	r3, [r7, #4]
    ab6a:	7e1b      	ldrb	r3, [r3, #24]
    ab6c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    ab6e:	7bfa      	ldrb	r2, [r7, #15]
    ab70:	78fb      	ldrb	r3, [r7, #3]
    ab72:	4013      	ands	r3, r2
    ab74:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ab76:	7bfb      	ldrb	r3, [r7, #15]
}
    ab78:	4618      	mov	r0, r3
    ab7a:	3714      	adds	r7, #20
    ab7c:	46bd      	mov	sp, r7
    ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab82:	4770      	bx	lr

0000ab84 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    ab84:	b480      	push	{r7}
    ab86:	b083      	sub	sp, #12
    ab88:	af00      	add	r7, sp, #0
    ab8a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    ab8c:	687b      	ldr	r3, [r7, #4]
    ab8e:	7e1b      	ldrb	r3, [r3, #24]
    ab90:	b2db      	uxtb	r3, r3
}
    ab92:	4618      	mov	r0, r3
    ab94:	370c      	adds	r7, #12
    ab96:	46bd      	mov	sp, r7
    ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab9c:	4770      	bx	lr

0000ab9e <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    ab9e:	b480      	push	{r7}
    aba0:	b083      	sub	sp, #12
    aba2:	af00      	add	r7, sp, #0
    aba4:	6078      	str	r0, [r7, #4]
    aba6:	460b      	mov	r3, r1
    aba8:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    abaa:	687b      	ldr	r3, [r7, #4]
    abac:	78fa      	ldrb	r2, [r7, #3]
    abae:	761a      	strb	r2, [r3, #24]
}
    abb0:	bf00      	nop
    abb2:	370c      	adds	r7, #12
    abb4:	46bd      	mov	sp, r7
    abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    abba:	4770      	bx	lr

0000abbc <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    abbc:	b480      	push	{r7}
    abbe:	b083      	sub	sp, #12
    abc0:	af00      	add	r7, sp, #0
    abc2:	6078      	str	r0, [r7, #4]
    abc4:	460b      	mov	r3, r1
    abc6:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    abc8:	78fb      	ldrb	r3, [r7, #3]
    abca:	f083 0301 	eor.w	r3, r3, #1
    abce:	b2db      	uxtb	r3, r3
    abd0:	2b00      	cmp	r3, #0
    abd2:	d003      	beq.n	abdc <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    abd4:	687b      	ldr	r3, [r7, #4]
    abd6:	2201      	movs	r2, #1
    abd8:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    abda:	e002      	b.n	abe2 <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    abdc:	687b      	ldr	r3, [r7, #4]
    abde:	2201      	movs	r2, #1
    abe0:	759a      	strb	r2, [r3, #22]
}
    abe2:	bf00      	nop
    abe4:	370c      	adds	r7, #12
    abe6:	46bd      	mov	sp, r7
    abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    abec:	4770      	bx	lr

0000abee <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    abee:	b480      	push	{r7}
    abf0:	b083      	sub	sp, #12
    abf2:	af00      	add	r7, sp, #0
    abf4:	6078      	str	r0, [r7, #4]
    abf6:	460b      	mov	r3, r1
    abf8:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    abfa:	78fb      	ldrb	r3, [r7, #3]
    abfc:	f083 0301 	eor.w	r3, r3, #1
    ac00:	b2db      	uxtb	r3, r3
    ac02:	2b00      	cmp	r3, #0
    ac04:	d003      	beq.n	ac0e <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    ac06:	687b      	ldr	r3, [r7, #4]
    ac08:	2202      	movs	r2, #2
    ac0a:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    ac0c:	e002      	b.n	ac14 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    ac0e:	687b      	ldr	r3, [r7, #4]
    ac10:	2202      	movs	r2, #2
    ac12:	759a      	strb	r2, [r3, #22]
}
    ac14:	bf00      	nop
    ac16:	370c      	adds	r7, #12
    ac18:	46bd      	mov	sp, r7
    ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac1e:	4770      	bx	lr

0000ac20 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    ac20:	b480      	push	{r7}
    ac22:	b083      	sub	sp, #12
    ac24:	af00      	add	r7, sp, #0
    ac26:	6078      	str	r0, [r7, #4]
    ac28:	460b      	mov	r3, r1
    ac2a:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    ac2c:	78fb      	ldrb	r3, [r7, #3]
    ac2e:	f083 0301 	eor.w	r3, r3, #1
    ac32:	b2db      	uxtb	r3, r3
    ac34:	2b00      	cmp	r3, #0
    ac36:	d003      	beq.n	ac40 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    ac38:	687b      	ldr	r3, [r7, #4]
    ac3a:	2280      	movs	r2, #128	; 0x80
    ac3c:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    ac3e:	e002      	b.n	ac46 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    ac40:	687b      	ldr	r3, [r7, #4]
    ac42:	2280      	movs	r2, #128	; 0x80
    ac44:	759a      	strb	r2, [r3, #22]
}
    ac46:	bf00      	nop
    ac48:	370c      	adds	r7, #12
    ac4a:	46bd      	mov	sp, r7
    ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac50:	4770      	bx	lr
	...

0000ac54 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    ac54:	b580      	push	{r7, lr}
    ac56:	b082      	sub	sp, #8
    ac58:	af00      	add	r7, sp, #0
    ac5a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    ac5c:	687b      	ldr	r3, [r7, #4]
    ac5e:	681b      	ldr	r3, [r3, #0]
    ac60:	f043 0202 	orr.w	r2, r3, #2
    ac64:	687b      	ldr	r3, [r7, #4]
    ac66:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    ac68:	2103      	movs	r1, #3
    ac6a:	6878      	ldr	r0, [r7, #4]
    ac6c:	4b02      	ldr	r3, [pc, #8]	; (ac78 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    ac6e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ac70:	bf00      	nop
    ac72:	3708      	adds	r7, #8
    ac74:	46bd      	mov	sp, r7
    ac76:	bd80      	pop	{r7, pc}
    ac78:	0000aa59 	.word	0x0000aa59

0000ac7c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    ac7c:	b580      	push	{r7, lr}
    ac7e:	b082      	sub	sp, #8
    ac80:	af00      	add	r7, sp, #0
    ac82:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	681b      	ldr	r3, [r3, #0]
    ac88:	f023 0202 	bic.w	r2, r3, #2
    ac8c:	687b      	ldr	r3, [r7, #4]
    ac8e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    ac90:	2103      	movs	r1, #3
    ac92:	6878      	ldr	r0, [r7, #4]
    ac94:	4b02      	ldr	r3, [pc, #8]	; (aca0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    ac96:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ac98:	bf00      	nop
    ac9a:	3708      	adds	r7, #8
    ac9c:	46bd      	mov	sp, r7
    ac9e:	bd80      	pop	{r7, pc}
    aca0:	0000aa59 	.word	0x0000aa59

0000aca4 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    aca4:	b480      	push	{r7}
    aca6:	b085      	sub	sp, #20
    aca8:	af00      	add	r7, sp, #0
    acaa:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    acac:	687b      	ldr	r3, [r7, #4]
    acae:	681b      	ldr	r3, [r3, #0]
    acb0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    acb2:	68fb      	ldr	r3, [r7, #12]
    acb4:	0edb      	lsrs	r3, r3, #27
    acb6:	f003 0301 	and.w	r3, r3, #1
    acba:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    acbc:	68fb      	ldr	r3, [r7, #12]
    acbe:	2b00      	cmp	r3, #0
    acc0:	bf14      	ite	ne
    acc2:	2301      	movne	r3, #1
    acc4:	2300      	moveq	r3, #0
    acc6:	b2db      	uxtb	r3, r3
}
    acc8:	4618      	mov	r0, r3
    acca:	3714      	adds	r7, #20
    accc:	46bd      	mov	sp, r7
    acce:	f85d 7b04 	ldr.w	r7, [sp], #4
    acd2:	4770      	bx	lr

0000acd4 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    acd4:	b580      	push	{r7, lr}
    acd6:	b084      	sub	sp, #16
    acd8:	af00      	add	r7, sp, #0
    acda:	6078      	str	r0, [r7, #4]
    acdc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    acde:	2103      	movs	r1, #3
    ace0:	6878      	ldr	r0, [r7, #4]
    ace2:	4b07      	ldr	r3, [pc, #28]	; (ad00 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    ace4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    ace6:	687b      	ldr	r3, [r7, #4]
    ace8:	681b      	ldr	r3, [r3, #0]
    acea:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    acec:	68fa      	ldr	r2, [r7, #12]
    acee:	683b      	ldr	r3, [r7, #0]
    acf0:	4013      	ands	r3, r2
    acf2:	60fb      	str	r3, [r7, #12]
	return tmp;
    acf4:	68fb      	ldr	r3, [r7, #12]
}
    acf6:	4618      	mov	r0, r3
    acf8:	3710      	adds	r7, #16
    acfa:	46bd      	mov	sp, r7
    acfc:	bd80      	pop	{r7, pc}
    acfe:	bf00      	nop
    ad00:	0000aa59 	.word	0x0000aa59

0000ad04 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    ad04:	b580      	push	{r7, lr}
    ad06:	b082      	sub	sp, #8
    ad08:	af00      	add	r7, sp, #0
    ad0a:	6078      	str	r0, [r7, #4]
    ad0c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    ad0e:	687b      	ldr	r3, [r7, #4]
    ad10:	683a      	ldr	r2, [r7, #0]
    ad12:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    ad14:	2103      	movs	r1, #3
    ad16:	6878      	ldr	r0, [r7, #4]
    ad18:	4b02      	ldr	r3, [pc, #8]	; (ad24 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    ad1a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ad1c:	bf00      	nop
    ad1e:	3708      	adds	r7, #8
    ad20:	46bd      	mov	sp, r7
    ad22:	bd80      	pop	{r7, pc}
    ad24:	0000aa59 	.word	0x0000aa59

0000ad28 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    ad28:	b580      	push	{r7, lr}
    ad2a:	b082      	sub	sp, #8
    ad2c:	af00      	add	r7, sp, #0
    ad2e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    ad30:	687b      	ldr	r3, [r7, #4]
    ad32:	681b      	ldr	r3, [r3, #0]
    ad34:	f043 0202 	orr.w	r2, r3, #2
    ad38:	687b      	ldr	r3, [r7, #4]
    ad3a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    ad3c:	2103      	movs	r1, #3
    ad3e:	6878      	ldr	r0, [r7, #4]
    ad40:	4b02      	ldr	r3, [pc, #8]	; (ad4c <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    ad42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ad44:	bf00      	nop
    ad46:	3708      	adds	r7, #8
    ad48:	46bd      	mov	sp, r7
    ad4a:	bd80      	pop	{r7, pc}
    ad4c:	0000aaa5 	.word	0x0000aaa5

0000ad50 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ad50:	b580      	push	{r7, lr}
    ad52:	b084      	sub	sp, #16
    ad54:	af00      	add	r7, sp, #0
    ad56:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    ad58:	2103      	movs	r1, #3
    ad5a:	6878      	ldr	r0, [r7, #4]
    ad5c:	4b09      	ldr	r3, [pc, #36]	; (ad84 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    ad5e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    ad60:	687b      	ldr	r3, [r7, #4]
    ad62:	681b      	ldr	r3, [r3, #0]
    ad64:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    ad66:	68fb      	ldr	r3, [r7, #12]
    ad68:	085b      	lsrs	r3, r3, #1
    ad6a:	f003 0301 	and.w	r3, r3, #1
    ad6e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    ad70:	68fb      	ldr	r3, [r7, #12]
    ad72:	2b00      	cmp	r3, #0
    ad74:	bf14      	ite	ne
    ad76:	2301      	movne	r3, #1
    ad78:	2300      	moveq	r3, #0
    ad7a:	b2db      	uxtb	r3, r3
}
    ad7c:	4618      	mov	r0, r3
    ad7e:	3710      	adds	r7, #16
    ad80:	46bd      	mov	sp, r7
    ad82:	bd80      	pop	{r7, pc}
    ad84:	0000aaa5 	.word	0x0000aaa5

0000ad88 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    ad88:	b580      	push	{r7, lr}
    ad8a:	b082      	sub	sp, #8
    ad8c:	af00      	add	r7, sp, #0
    ad8e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    ad90:	687b      	ldr	r3, [r7, #4]
    ad92:	681b      	ldr	r3, [r3, #0]
    ad94:	f023 0202 	bic.w	r2, r3, #2
    ad98:	687b      	ldr	r3, [r7, #4]
    ad9a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    ad9c:	2103      	movs	r1, #3
    ad9e:	6878      	ldr	r0, [r7, #4]
    ada0:	4b02      	ldr	r3, [pc, #8]	; (adac <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    ada2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ada4:	bf00      	nop
    ada6:	3708      	adds	r7, #8
    ada8:	46bd      	mov	sp, r7
    adaa:	bd80      	pop	{r7, pc}
    adac:	0000aaa5 	.word	0x0000aaa5

0000adb0 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    adb0:	b580      	push	{r7, lr}
    adb2:	b084      	sub	sp, #16
    adb4:	af00      	add	r7, sp, #0
    adb6:	6078      	str	r0, [r7, #4]
    adb8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    adba:	2103      	movs	r1, #3
    adbc:	6878      	ldr	r0, [r7, #4]
    adbe:	4b07      	ldr	r3, [pc, #28]	; (addc <hri_sercomspi_get_CTRLA_reg+0x2c>)
    adc0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    adc2:	687b      	ldr	r3, [r7, #4]
    adc4:	681b      	ldr	r3, [r3, #0]
    adc6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    adc8:	68fa      	ldr	r2, [r7, #12]
    adca:	683b      	ldr	r3, [r7, #0]
    adcc:	4013      	ands	r3, r2
    adce:	60fb      	str	r3, [r7, #12]
	return tmp;
    add0:	68fb      	ldr	r3, [r7, #12]
}
    add2:	4618      	mov	r0, r3
    add4:	3710      	adds	r7, #16
    add6:	46bd      	mov	sp, r7
    add8:	bd80      	pop	{r7, pc}
    adda:	bf00      	nop
    addc:	0000aaa5 	.word	0x0000aaa5

0000ade0 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    ade0:	b580      	push	{r7, lr}
    ade2:	b082      	sub	sp, #8
    ade4:	af00      	add	r7, sp, #0
    ade6:	6078      	str	r0, [r7, #4]
    ade8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    adea:	687b      	ldr	r3, [r7, #4]
    adec:	683a      	ldr	r2, [r7, #0]
    adee:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    adf0:	2103      	movs	r1, #3
    adf2:	6878      	ldr	r0, [r7, #4]
    adf4:	4b02      	ldr	r3, [pc, #8]	; (ae00 <hri_sercomspi_write_CTRLA_reg+0x20>)
    adf6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    adf8:	bf00      	nop
    adfa:	3708      	adds	r7, #8
    adfc:	46bd      	mov	sp, r7
    adfe:	bd80      	pop	{r7, pc}
    ae00:	0000aaa5 	.word	0x0000aaa5

0000ae04 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    ae04:	b580      	push	{r7, lr}
    ae06:	b082      	sub	sp, #8
    ae08:	af00      	add	r7, sp, #0
    ae0a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    ae0c:	687b      	ldr	r3, [r7, #4]
    ae0e:	685b      	ldr	r3, [r3, #4]
    ae10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    ae14:	687b      	ldr	r3, [r7, #4]
    ae16:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ae18:	2104      	movs	r1, #4
    ae1a:	6878      	ldr	r0, [r7, #4]
    ae1c:	4b02      	ldr	r3, [pc, #8]	; (ae28 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    ae1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ae20:	bf00      	nop
    ae22:	3708      	adds	r7, #8
    ae24:	46bd      	mov	sp, r7
    ae26:	bd80      	pop	{r7, pc}
    ae28:	0000aa59 	.word	0x0000aa59

0000ae2c <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    ae2c:	b580      	push	{r7, lr}
    ae2e:	b082      	sub	sp, #8
    ae30:	af00      	add	r7, sp, #0
    ae32:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    ae34:	687b      	ldr	r3, [r7, #4]
    ae36:	685b      	ldr	r3, [r3, #4]
    ae38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    ae3c:	687b      	ldr	r3, [r7, #4]
    ae3e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ae40:	2104      	movs	r1, #4
    ae42:	6878      	ldr	r0, [r7, #4]
    ae44:	4b02      	ldr	r3, [pc, #8]	; (ae50 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    ae46:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ae48:	bf00      	nop
    ae4a:	3708      	adds	r7, #8
    ae4c:	46bd      	mov	sp, r7
    ae4e:	bd80      	pop	{r7, pc}
    ae50:	0000aa59 	.word	0x0000aa59

0000ae54 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    ae54:	b580      	push	{r7, lr}
    ae56:	b082      	sub	sp, #8
    ae58:	af00      	add	r7, sp, #0
    ae5a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    ae5c:	687b      	ldr	r3, [r7, #4]
    ae5e:	685b      	ldr	r3, [r3, #4]
    ae60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    ae64:	687b      	ldr	r3, [r7, #4]
    ae66:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ae68:	2104      	movs	r1, #4
    ae6a:	6878      	ldr	r0, [r7, #4]
    ae6c:	4b02      	ldr	r3, [pc, #8]	; (ae78 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    ae6e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ae70:	bf00      	nop
    ae72:	3708      	adds	r7, #8
    ae74:	46bd      	mov	sp, r7
    ae76:	bd80      	pop	{r7, pc}
    ae78:	0000aa59 	.word	0x0000aa59

0000ae7c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    ae7c:	b580      	push	{r7, lr}
    ae7e:	b082      	sub	sp, #8
    ae80:	af00      	add	r7, sp, #0
    ae82:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    ae84:	687b      	ldr	r3, [r7, #4]
    ae86:	685b      	ldr	r3, [r3, #4]
    ae88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    ae8c:	687b      	ldr	r3, [r7, #4]
    ae8e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ae90:	2104      	movs	r1, #4
    ae92:	6878      	ldr	r0, [r7, #4]
    ae94:	4b02      	ldr	r3, [pc, #8]	; (aea0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    ae96:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ae98:	bf00      	nop
    ae9a:	3708      	adds	r7, #8
    ae9c:	46bd      	mov	sp, r7
    ae9e:	bd80      	pop	{r7, pc}
    aea0:	0000aa59 	.word	0x0000aa59

0000aea4 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    aea4:	b580      	push	{r7, lr}
    aea6:	b082      	sub	sp, #8
    aea8:	af00      	add	r7, sp, #0
    aeaa:	6078      	str	r0, [r7, #4]
    aeac:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    aeae:	687b      	ldr	r3, [r7, #4]
    aeb0:	685a      	ldr	r2, [r3, #4]
    aeb2:	683b      	ldr	r3, [r7, #0]
    aeb4:	041b      	lsls	r3, r3, #16
    aeb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    aeba:	431a      	orrs	r2, r3
    aebc:	687b      	ldr	r3, [r7, #4]
    aebe:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aec0:	2104      	movs	r1, #4
    aec2:	6878      	ldr	r0, [r7, #4]
    aec4:	4b02      	ldr	r3, [pc, #8]	; (aed0 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    aec6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aec8:	bf00      	nop
    aeca:	3708      	adds	r7, #8
    aecc:	46bd      	mov	sp, r7
    aece:	bd80      	pop	{r7, pc}
    aed0:	0000aa59 	.word	0x0000aa59

0000aed4 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    aed4:	b580      	push	{r7, lr}
    aed6:	b082      	sub	sp, #8
    aed8:	af00      	add	r7, sp, #0
    aeda:	6078      	str	r0, [r7, #4]
    aedc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    aede:	687b      	ldr	r3, [r7, #4]
    aee0:	683a      	ldr	r2, [r7, #0]
    aee2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aee4:	2104      	movs	r1, #4
    aee6:	6878      	ldr	r0, [r7, #4]
    aee8:	4b02      	ldr	r3, [pc, #8]	; (aef4 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    aeea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aeec:	bf00      	nop
    aeee:	3708      	adds	r7, #8
    aef0:	46bd      	mov	sp, r7
    aef2:	bd80      	pop	{r7, pc}
    aef4:	0000aa59 	.word	0x0000aa59

0000aef8 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    aef8:	b580      	push	{r7, lr}
    aefa:	b082      	sub	sp, #8
    aefc:	af00      	add	r7, sp, #0
    aefe:	6078      	str	r0, [r7, #4]
    af00:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    af02:	687b      	ldr	r3, [r7, #4]
    af04:	683a      	ldr	r2, [r7, #0]
    af06:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    af08:	2117      	movs	r1, #23
    af0a:	6878      	ldr	r0, [r7, #4]
    af0c:	4b02      	ldr	r3, [pc, #8]	; (af18 <hri_sercomspi_write_CTRLB_reg+0x20>)
    af0e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af10:	bf00      	nop
    af12:	3708      	adds	r7, #8
    af14:	46bd      	mov	sp, r7
    af16:	bd80      	pop	{r7, pc}
    af18:	0000aaa5 	.word	0x0000aaa5

0000af1c <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    af1c:	b480      	push	{r7}
    af1e:	b083      	sub	sp, #12
    af20:	af00      	add	r7, sp, #0
    af22:	6078      	str	r0, [r7, #4]
    af24:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    af26:	687b      	ldr	r3, [r7, #4]
    af28:	683a      	ldr	r2, [r7, #0]
    af2a:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af2c:	bf00      	nop
    af2e:	370c      	adds	r7, #12
    af30:	46bd      	mov	sp, r7
    af32:	f85d 7b04 	ldr.w	r7, [sp], #4
    af36:	4770      	bx	lr

0000af38 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    af38:	b480      	push	{r7}
    af3a:	b083      	sub	sp, #12
    af3c:	af00      	add	r7, sp, #0
    af3e:	6078      	str	r0, [r7, #4]
    af40:	460b      	mov	r3, r1
    af42:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    af44:	687b      	ldr	r3, [r7, #4]
    af46:	78fa      	ldrb	r2, [r7, #3]
    af48:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af4a:	bf00      	nop
    af4c:	370c      	adds	r7, #12
    af4e:	46bd      	mov	sp, r7
    af50:	f85d 7b04 	ldr.w	r7, [sp], #4
    af54:	4770      	bx	lr
	...

0000af58 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    af58:	b580      	push	{r7, lr}
    af5a:	b084      	sub	sp, #16
    af5c:	af00      	add	r7, sp, #0
    af5e:	6078      	str	r0, [r7, #4]
    af60:	460b      	mov	r3, r1
    af62:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    af64:	687b      	ldr	r3, [r7, #4]
    af66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af68:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    af6a:	68fb      	ldr	r3, [r7, #12]
    af6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    af70:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    af72:	78fb      	ldrb	r3, [r7, #3]
    af74:	039b      	lsls	r3, r3, #14
    af76:	461a      	mov	r2, r3
    af78:	68fb      	ldr	r3, [r7, #12]
    af7a:	4313      	orrs	r3, r2
    af7c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    af7e:	687b      	ldr	r3, [r7, #4]
    af80:	68fa      	ldr	r2, [r7, #12]
    af82:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    af84:	2104      	movs	r1, #4
    af86:	6878      	ldr	r0, [r7, #4]
    af88:	4b02      	ldr	r3, [pc, #8]	; (af94 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    af8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    af8c:	bf00      	nop
    af8e:	3710      	adds	r7, #16
    af90:	46bd      	mov	sp, r7
    af92:	bd80      	pop	{r7, pc}
    af94:	0000aa59 	.word	0x0000aa59

0000af98 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    af98:	b580      	push	{r7, lr}
    af9a:	b082      	sub	sp, #8
    af9c:	af00      	add	r7, sp, #0
    af9e:	6078      	str	r0, [r7, #4]
    afa0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    afa2:	687b      	ldr	r3, [r7, #4]
    afa4:	683a      	ldr	r2, [r7, #0]
    afa6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    afa8:	2104      	movs	r1, #4
    afaa:	6878      	ldr	r0, [r7, #4]
    afac:	4b02      	ldr	r3, [pc, #8]	; (afb8 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    afae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    afb0:	bf00      	nop
    afb2:	3708      	adds	r7, #8
    afb4:	46bd      	mov	sp, r7
    afb6:	bd80      	pop	{r7, pc}
    afb8:	0000aa59 	.word	0x0000aa59

0000afbc <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    afbc:	b580      	push	{r7, lr}
    afbe:	b082      	sub	sp, #8
    afc0:	af00      	add	r7, sp, #0
    afc2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    afc4:	2104      	movs	r1, #4
    afc6:	6878      	ldr	r0, [r7, #4]
    afc8:	4b03      	ldr	r3, [pc, #12]	; (afd8 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    afca:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    afcc:	687b      	ldr	r3, [r7, #4]
    afce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    afd0:	4618      	mov	r0, r3
    afd2:	3708      	adds	r7, #8
    afd4:	46bd      	mov	sp, r7
    afd6:	bd80      	pop	{r7, pc}
    afd8:	0000aa59 	.word	0x0000aa59

0000afdc <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    afdc:	b480      	push	{r7}
    afde:	b083      	sub	sp, #12
    afe0:	af00      	add	r7, sp, #0
    afe2:	6078      	str	r0, [r7, #4]
    afe4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    afe6:	687b      	ldr	r3, [r7, #4]
    afe8:	683a      	ldr	r2, [r7, #0]
    afea:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    afec:	bf00      	nop
    afee:	370c      	adds	r7, #12
    aff0:	46bd      	mov	sp, r7
    aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aff6:	4770      	bx	lr

0000aff8 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    aff8:	b580      	push	{r7, lr}
    affa:	b082      	sub	sp, #8
    affc:	af00      	add	r7, sp, #0
    affe:	6078      	str	r0, [r7, #4]
    b000:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    b002:	687b      	ldr	r3, [r7, #4]
    b004:	683a      	ldr	r2, [r7, #0]
    b006:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b008:	2104      	movs	r1, #4
    b00a:	6878      	ldr	r0, [r7, #4]
    b00c:	4b02      	ldr	r3, [pc, #8]	; (b018 <hri_sercomi2cm_write_DATA_reg+0x20>)
    b00e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b010:	bf00      	nop
    b012:	3708      	adds	r7, #8
    b014:	46bd      	mov	sp, r7
    b016:	bd80      	pop	{r7, pc}
    b018:	0000aa59 	.word	0x0000aa59

0000b01c <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    b01c:	b580      	push	{r7, lr}
    b01e:	b082      	sub	sp, #8
    b020:	af00      	add	r7, sp, #0
    b022:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b024:	2104      	movs	r1, #4
    b026:	6878      	ldr	r0, [r7, #4]
    b028:	4b03      	ldr	r3, [pc, #12]	; (b038 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    b02a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    b02c:	687b      	ldr	r3, [r7, #4]
    b02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    b030:	4618      	mov	r0, r3
    b032:	3708      	adds	r7, #8
    b034:	46bd      	mov	sp, r7
    b036:	bd80      	pop	{r7, pc}
    b038:	0000aa59 	.word	0x0000aa59

0000b03c <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    b03c:	b480      	push	{r7}
    b03e:	b083      	sub	sp, #12
    b040:	af00      	add	r7, sp, #0
    b042:	6078      	str	r0, [r7, #4]
    b044:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    b046:	687b      	ldr	r3, [r7, #4]
    b048:	683a      	ldr	r2, [r7, #0]
    b04a:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b04c:	bf00      	nop
    b04e:	370c      	adds	r7, #12
    b050:	46bd      	mov	sp, r7
    b052:	f85d 7b04 	ldr.w	r7, [sp], #4
    b056:	4770      	bx	lr

0000b058 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    b058:	b480      	push	{r7}
    b05a:	b083      	sub	sp, #12
    b05c:	af00      	add	r7, sp, #0
    b05e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    b060:	687b      	ldr	r3, [r7, #4]
    b062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    b064:	4618      	mov	r0, r3
    b066:	370c      	adds	r7, #12
    b068:	46bd      	mov	sp, r7
    b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b06e:	4770      	bx	lr

0000b070 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    b070:	b480      	push	{r7}
    b072:	b083      	sub	sp, #12
    b074:	af00      	add	r7, sp, #0
    b076:	6078      	str	r0, [r7, #4]
    b078:	460b      	mov	r3, r1
    b07a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    b07c:	687b      	ldr	r3, [r7, #4]
    b07e:	78fa      	ldrb	r2, [r7, #3]
    b080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b084:	bf00      	nop
    b086:	370c      	adds	r7, #12
    b088:	46bd      	mov	sp, r7
    b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b08e:	4770      	bx	lr

0000b090 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    b090:	b480      	push	{r7}
    b092:	b083      	sub	sp, #12
    b094:	af00      	add	r7, sp, #0
    b096:	6078      	str	r0, [r7, #4]
    b098:	460b      	mov	r3, r1
    b09a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    b09c:	687b      	ldr	r3, [r7, #4]
    b09e:	887a      	ldrh	r2, [r7, #2]
    b0a0:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b0a2:	bf00      	nop
    b0a4:	370c      	adds	r7, #12
    b0a6:	46bd      	mov	sp, r7
    b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0ac:	4770      	bx	lr
	...

0000b0b0 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    b0b0:	b580      	push	{r7, lr}
    b0b2:	b082      	sub	sp, #8
    b0b4:	af00      	add	r7, sp, #0
    b0b6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b0b8:	2104      	movs	r1, #4
    b0ba:	6878      	ldr	r0, [r7, #4]
    b0bc:	4b06      	ldr	r3, [pc, #24]	; (b0d8 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    b0be:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    b0c0:	687b      	ldr	r3, [r7, #4]
    b0c2:	8b5b      	ldrh	r3, [r3, #26]
    b0c4:	b29b      	uxth	r3, r3
    b0c6:	091b      	lsrs	r3, r3, #4
    b0c8:	b29b      	uxth	r3, r3
    b0ca:	f003 0303 	and.w	r3, r3, #3
    b0ce:	b29b      	uxth	r3, r3
}
    b0d0:	4618      	mov	r0, r3
    b0d2:	3708      	adds	r7, #8
    b0d4:	46bd      	mov	sp, r7
    b0d6:	bd80      	pop	{r7, pc}
    b0d8:	0000aa59 	.word	0x0000aa59

0000b0dc <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    b0dc:	b580      	push	{r7, lr}
    b0de:	b082      	sub	sp, #8
    b0e0:	af00      	add	r7, sp, #0
    b0e2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b0e4:	2104      	movs	r1, #4
    b0e6:	6878      	ldr	r0, [r7, #4]
    b0e8:	4b04      	ldr	r3, [pc, #16]	; (b0fc <hri_sercomi2cm_read_STATUS_reg+0x20>)
    b0ea:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    b0ec:	687b      	ldr	r3, [r7, #4]
    b0ee:	8b5b      	ldrh	r3, [r3, #26]
    b0f0:	b29b      	uxth	r3, r3
}
    b0f2:	4618      	mov	r0, r3
    b0f4:	3708      	adds	r7, #8
    b0f6:	46bd      	mov	sp, r7
    b0f8:	bd80      	pop	{r7, pc}
    b0fa:	bf00      	nop
    b0fc:	0000aa59 	.word	0x0000aa59

0000b100 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    b100:	b580      	push	{r7, lr}
    b102:	b082      	sub	sp, #8
    b104:	af00      	add	r7, sp, #0
    b106:	6078      	str	r0, [r7, #4]
    b108:	460b      	mov	r3, r1
    b10a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    b10c:	687b      	ldr	r3, [r7, #4]
    b10e:	887a      	ldrh	r2, [r7, #2]
    b110:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b112:	2104      	movs	r1, #4
    b114:	6878      	ldr	r0, [r7, #4]
    b116:	4b03      	ldr	r3, [pc, #12]	; (b124 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    b118:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b11a:	bf00      	nop
    b11c:	3708      	adds	r7, #8
    b11e:	46bd      	mov	sp, r7
    b120:	bd80      	pop	{r7, pc}
    b122:	bf00      	nop
    b124:	0000aa59 	.word	0x0000aa59

0000b128 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    b128:	b4b0      	push	{r4, r5, r7}
    b12a:	b08d      	sub	sp, #52	; 0x34
    b12c:	af00      	add	r7, sp, #0
    b12e:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    b130:	4b13      	ldr	r3, [pc, #76]	; (b180 <_sercom_get_hardware_index+0x58>)
    b132:	f107 040c 	add.w	r4, r7, #12
    b136:	461d      	mov	r5, r3
    b138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b13a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b13c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b144:	2300      	movs	r3, #0
    b146:	62fb      	str	r3, [r7, #44]	; 0x2c
    b148:	e010      	b.n	b16c <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    b14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b14c:	009b      	lsls	r3, r3, #2
    b14e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b152:	4413      	add	r3, r2
    b154:	f853 3c24 	ldr.w	r3, [r3, #-36]
    b158:	461a      	mov	r2, r3
    b15a:	687b      	ldr	r3, [r7, #4]
    b15c:	429a      	cmp	r2, r3
    b15e:	d102      	bne.n	b166 <_sercom_get_hardware_index+0x3e>
			return i;
    b160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b162:	b2db      	uxtb	r3, r3
    b164:	e006      	b.n	b174 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b168:	3301      	adds	r3, #1
    b16a:	62fb      	str	r3, [r7, #44]	; 0x2c
    b16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b16e:	2b07      	cmp	r3, #7
    b170:	d9eb      	bls.n	b14a <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    b172:	2300      	movs	r3, #0
}
    b174:	4618      	mov	r0, r3
    b176:	3734      	adds	r7, #52	; 0x34
    b178:	46bd      	mov	sp, r7
    b17a:	bcb0      	pop	{r4, r5, r7}
    b17c:	4770      	bx	lr
    b17e:	bf00      	nop
    b180:	00021bd4 	.word	0x00021bd4

0000b184 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    b184:	b480      	push	{r7}
    b186:	b083      	sub	sp, #12
    b188:	af00      	add	r7, sp, #0
    b18a:	6078      	str	r0, [r7, #4]
    b18c:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    b18e:	687b      	ldr	r3, [r7, #4]
    b190:	4a05      	ldr	r2, [pc, #20]	; (b1a8 <_sercom_init_irq_param+0x24>)
    b192:	4293      	cmp	r3, r2
    b194:	d102      	bne.n	b19c <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    b196:	4a05      	ldr	r2, [pc, #20]	; (b1ac <_sercom_init_irq_param+0x28>)
    b198:	683b      	ldr	r3, [r7, #0]
    b19a:	6013      	str	r3, [r2, #0]
	}
}
    b19c:	bf00      	nop
    b19e:	370c      	adds	r7, #12
    b1a0:	46bd      	mov	sp, r7
    b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1a6:	4770      	bx	lr
    b1a8:	43000c00 	.word	0x43000c00
    b1ac:	20008710 	.word	0x20008710

0000b1b0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    b1b0:	b580      	push	{r7, lr}
    b1b2:	b084      	sub	sp, #16
    b1b4:	af00      	add	r7, sp, #0
    b1b6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    b1b8:	6878      	ldr	r0, [r7, #4]
    b1ba:	4b13      	ldr	r3, [pc, #76]	; (b208 <_get_i2cm_index+0x58>)
    b1bc:	4798      	blx	r3
    b1be:	4603      	mov	r3, r0
    b1c0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    b1c2:	2300      	movs	r3, #0
    b1c4:	73fb      	strb	r3, [r7, #15]
    b1c6:	e010      	b.n	b1ea <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    b1c8:	7bfa      	ldrb	r2, [r7, #15]
    b1ca:	4910      	ldr	r1, [pc, #64]	; (b20c <_get_i2cm_index+0x5c>)
    b1cc:	4613      	mov	r3, r2
    b1ce:	005b      	lsls	r3, r3, #1
    b1d0:	4413      	add	r3, r2
    b1d2:	00db      	lsls	r3, r3, #3
    b1d4:	440b      	add	r3, r1
    b1d6:	781b      	ldrb	r3, [r3, #0]
    b1d8:	7bba      	ldrb	r2, [r7, #14]
    b1da:	429a      	cmp	r2, r3
    b1dc:	d102      	bne.n	b1e4 <_get_i2cm_index+0x34>
			return i;
    b1de:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b1e2:	e00d      	b.n	b200 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    b1e4:	7bfb      	ldrb	r3, [r7, #15]
    b1e6:	3301      	adds	r3, #1
    b1e8:	73fb      	strb	r3, [r7, #15]
    b1ea:	7bfb      	ldrb	r3, [r7, #15]
    b1ec:	2b02      	cmp	r3, #2
    b1ee:	d9eb      	bls.n	b1c8 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    b1f0:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    b1f4:	4906      	ldr	r1, [pc, #24]	; (b210 <_get_i2cm_index+0x60>)
    b1f6:	2000      	movs	r0, #0
    b1f8:	4b06      	ldr	r3, [pc, #24]	; (b214 <_get_i2cm_index+0x64>)
    b1fa:	4798      	blx	r3
	return -1;
    b1fc:	f04f 33ff 	mov.w	r3, #4294967295
}
    b200:	4618      	mov	r0, r3
    b202:	3710      	adds	r7, #16
    b204:	46bd      	mov	sp, r7
    b206:	bd80      	pop	{r7, pc}
    b208:	0000b129 	.word	0x0000b129
    b20c:	2000007c 	.word	0x2000007c
    b210:	00021bb8 	.word	0x00021bb8
    b214:	00007e21 	.word	0x00007e21

0000b218 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    b218:	b580      	push	{r7, lr}
    b21a:	b082      	sub	sp, #8
    b21c:	af00      	add	r7, sp, #0
    b21e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    b220:	2103      	movs	r1, #3
    b222:	6878      	ldr	r0, [r7, #4]
    b224:	4b02      	ldr	r3, [pc, #8]	; (b230 <_sercom_i2c_send_stop+0x18>)
    b226:	4798      	blx	r3
}
    b228:	bf00      	nop
    b22a:	3708      	adds	r7, #8
    b22c:	46bd      	mov	sp, r7
    b22e:	bd80      	pop	{r7, pc}
    b230:	0000aea5 	.word	0x0000aea5

0000b234 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    b234:	b590      	push	{r4, r7, lr}
    b236:	b087      	sub	sp, #28
    b238:	af00      	add	r7, sp, #0
    b23a:	60f8      	str	r0, [r7, #12]
    b23c:	60b9      	str	r1, [r7, #8]
    b23e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b240:	68f8      	ldr	r0, [r7, #12]
    b242:	4b7d      	ldr	r3, [pc, #500]	; (b438 <_sercom_i2c_sync_analyse_flags+0x204>)
    b244:	4798      	blx	r3
    b246:	4603      	mov	r3, r0
    b248:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    b24a:	68f8      	ldr	r0, [r7, #12]
    b24c:	4b7b      	ldr	r3, [pc, #492]	; (b43c <_sercom_i2c_sync_analyse_flags+0x208>)
    b24e:	4798      	blx	r3
    b250:	4603      	mov	r3, r0
    b252:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    b254:	68bb      	ldr	r3, [r7, #8]
    b256:	f003 0301 	and.w	r3, r3, #1
    b25a:	2b00      	cmp	r3, #0
    b25c:	f000 8095 	beq.w	b38a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    b260:	8a7b      	ldrh	r3, [r7, #18]
    b262:	f003 0302 	and.w	r3, r3, #2
    b266:	2b00      	cmp	r3, #0
    b268:	d01d      	beq.n	b2a6 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    b26a:	68f8      	ldr	r0, [r7, #12]
    b26c:	4b74      	ldr	r3, [pc, #464]	; (b440 <_sercom_i2c_sync_analyse_flags+0x20c>)
    b26e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    b270:	687b      	ldr	r3, [r7, #4]
    b272:	885b      	ldrh	r3, [r3, #2]
    b274:	b29b      	uxth	r3, r3
    b276:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    b27a:	b29a      	uxth	r2, r3
    b27c:	687b      	ldr	r3, [r7, #4]
    b27e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    b280:	687b      	ldr	r3, [r7, #4]
    b282:	885b      	ldrh	r3, [r3, #2]
    b284:	b29b      	uxth	r3, r3
    b286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b28a:	b29a      	uxth	r2, r3
    b28c:	687b      	ldr	r3, [r7, #4]
    b28e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    b290:	8a7b      	ldrh	r3, [r7, #18]
    b292:	f003 0301 	and.w	r3, r3, #1
    b296:	2b00      	cmp	r3, #0
    b298:	d002      	beq.n	b2a0 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    b29a:	f06f 0304 	mvn.w	r3, #4
    b29e:	e0c6      	b.n	b42e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    b2a0:	f06f 0303 	mvn.w	r3, #3
    b2a4:	e0c3      	b.n	b42e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    b2a6:	8a7b      	ldrh	r3, [r7, #18]
    b2a8:	f003 0304 	and.w	r3, r3, #4
    b2ac:	2b00      	cmp	r3, #0
    b2ae:	d01f      	beq.n	b2f0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    b2b0:	687b      	ldr	r3, [r7, #4]
    b2b2:	685b      	ldr	r3, [r3, #4]
    b2b4:	2b00      	cmp	r3, #0
    b2b6:	dd07      	ble.n	b2c8 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    b2b8:	687b      	ldr	r3, [r7, #4]
    b2ba:	885b      	ldrh	r3, [r3, #2]
    b2bc:	b29b      	uxth	r3, r3
    b2be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    b2c2:	b29a      	uxth	r2, r3
    b2c4:	687b      	ldr	r3, [r7, #4]
    b2c6:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    b2c8:	687b      	ldr	r3, [r7, #4]
    b2ca:	885b      	ldrh	r3, [r3, #2]
    b2cc:	b29b      	uxth	r3, r3
    b2ce:	b21b      	sxth	r3, r3
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	da02      	bge.n	b2da <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    b2d4:	68f8      	ldr	r0, [r7, #12]
    b2d6:	4b5b      	ldr	r3, [pc, #364]	; (b444 <_sercom_i2c_sync_analyse_flags+0x210>)
    b2d8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b2da:	687b      	ldr	r3, [r7, #4]
    b2dc:	885b      	ldrh	r3, [r3, #2]
    b2de:	b29b      	uxth	r3, r3
    b2e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b2e4:	b29a      	uxth	r2, r3
    b2e6:	687b      	ldr	r3, [r7, #4]
    b2e8:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    b2ea:	f06f 0301 	mvn.w	r3, #1
    b2ee:	e09e      	b.n	b42e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    b2f0:	687b      	ldr	r3, [r7, #4]
    b2f2:	885b      	ldrh	r3, [r3, #2]
    b2f4:	b29b      	uxth	r3, r3
    b2f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	d01c      	beq.n	b338 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    b2fe:	687b      	ldr	r3, [r7, #4]
    b300:	881b      	ldrh	r3, [r3, #0]
    b302:	121b      	asrs	r3, r3, #8
    b304:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b306:	f003 0406 	and.w	r4, r3, #6
    b30a:	68f8      	ldr	r0, [r7, #12]
    b30c:	4b4e      	ldr	r3, [pc, #312]	; (b448 <_sercom_i2c_sync_analyse_flags+0x214>)
    b30e:	4798      	blx	r3
    b310:	4603      	mov	r3, r0
    b312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b316:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    b318:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    b31c:	4619      	mov	r1, r3
    b31e:	68f8      	ldr	r0, [r7, #12]
    b320:	4b4a      	ldr	r3, [pc, #296]	; (b44c <_sercom_i2c_sync_analyse_flags+0x218>)
    b322:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    b324:	687b      	ldr	r3, [r7, #4]
    b326:	885b      	ldrh	r3, [r3, #2]
    b328:	b29b      	uxth	r3, r3
    b32a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    b32e:	b29a      	uxth	r2, r3
    b330:	687b      	ldr	r3, [r7, #4]
    b332:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    b334:	2300      	movs	r3, #0
    b336:	e07a      	b.n	b42e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    b338:	687b      	ldr	r3, [r7, #4]
    b33a:	685b      	ldr	r3, [r3, #4]
    b33c:	2b00      	cmp	r3, #0
    b33e:	d111      	bne.n	b364 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    b340:	687b      	ldr	r3, [r7, #4]
    b342:	885b      	ldrh	r3, [r3, #2]
    b344:	b29b      	uxth	r3, r3
    b346:	b21b      	sxth	r3, r3
    b348:	2b00      	cmp	r3, #0
    b34a:	da02      	bge.n	b352 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    b34c:	68f8      	ldr	r0, [r7, #12]
    b34e:	4b3d      	ldr	r3, [pc, #244]	; (b444 <_sercom_i2c_sync_analyse_flags+0x210>)
    b350:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b352:	687b      	ldr	r3, [r7, #4]
    b354:	885b      	ldrh	r3, [r3, #2]
    b356:	b29b      	uxth	r3, r3
    b358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b35c:	b29a      	uxth	r2, r3
    b35e:	687b      	ldr	r3, [r7, #4]
    b360:	805a      	strh	r2, [r3, #2]
    b362:	e010      	b.n	b386 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    b364:	687b      	ldr	r3, [r7, #4]
    b366:	689b      	ldr	r3, [r3, #8]
    b368:	781b      	ldrb	r3, [r3, #0]
    b36a:	4619      	mov	r1, r3
    b36c:	68f8      	ldr	r0, [r7, #12]
    b36e:	4b38      	ldr	r3, [pc, #224]	; (b450 <_sercom_i2c_sync_analyse_flags+0x21c>)
    b370:	4798      	blx	r3
				msg->buffer++;
    b372:	687b      	ldr	r3, [r7, #4]
    b374:	689b      	ldr	r3, [r3, #8]
    b376:	1c5a      	adds	r2, r3, #1
    b378:	687b      	ldr	r3, [r7, #4]
    b37a:	609a      	str	r2, [r3, #8]
				msg->len--;
    b37c:	687b      	ldr	r3, [r7, #4]
    b37e:	685b      	ldr	r3, [r3, #4]
    b380:	1e5a      	subs	r2, r3, #1
    b382:	687b      	ldr	r3, [r7, #4]
    b384:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    b386:	2300      	movs	r3, #0
    b388:	e051      	b.n	b42e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    b38a:	68bb      	ldr	r3, [r7, #8]
    b38c:	f003 0302 	and.w	r3, r3, #2
    b390:	2b00      	cmp	r3, #0
    b392:	d04b      	beq.n	b42c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    b394:	687b      	ldr	r3, [r7, #4]
    b396:	685b      	ldr	r3, [r3, #4]
    b398:	2b00      	cmp	r3, #0
    b39a:	d041      	beq.n	b420 <_sercom_i2c_sync_analyse_flags+0x1ec>
    b39c:	8a7b      	ldrh	r3, [r7, #18]
    b39e:	f003 0304 	and.w	r3, r3, #4
    b3a2:	2b00      	cmp	r3, #0
    b3a4:	d13c      	bne.n	b420 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    b3a6:	687b      	ldr	r3, [r7, #4]
    b3a8:	685b      	ldr	r3, [r3, #4]
    b3aa:	1e5a      	subs	r2, r3, #1
    b3ac:	687b      	ldr	r3, [r7, #4]
    b3ae:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    b3b0:	687b      	ldr	r3, [r7, #4]
    b3b2:	685b      	ldr	r3, [r3, #4]
    b3b4:	2b00      	cmp	r3, #0
    b3b6:	d102      	bne.n	b3be <_sercom_i2c_sync_analyse_flags+0x18a>
    b3b8:	697b      	ldr	r3, [r7, #20]
    b3ba:	2b00      	cmp	r3, #0
    b3bc:	d006      	beq.n	b3cc <_sercom_i2c_sync_analyse_flags+0x198>
    b3be:	687b      	ldr	r3, [r7, #4]
    b3c0:	685b      	ldr	r3, [r3, #4]
    b3c2:	2b01      	cmp	r3, #1
    b3c4:	d105      	bne.n	b3d2 <_sercom_i2c_sync_analyse_flags+0x19e>
    b3c6:	697b      	ldr	r3, [r7, #20]
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d002      	beq.n	b3d2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b3cc:	68f8      	ldr	r0, [r7, #12]
    b3ce:	4b21      	ldr	r3, [pc, #132]	; (b454 <_sercom_i2c_sync_analyse_flags+0x220>)
    b3d0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    b3d2:	687b      	ldr	r3, [r7, #4]
    b3d4:	685b      	ldr	r3, [r3, #4]
    b3d6:	2b00      	cmp	r3, #0
    b3d8:	d113      	bne.n	b402 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    b3da:	687b      	ldr	r3, [r7, #4]
    b3dc:	885b      	ldrh	r3, [r3, #2]
    b3de:	b29b      	uxth	r3, r3
    b3e0:	b21b      	sxth	r3, r3
    b3e2:	2b00      	cmp	r3, #0
    b3e4:	da05      	bge.n	b3f2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    b3e6:	68f8      	ldr	r0, [r7, #12]
    b3e8:	4b1b      	ldr	r3, [pc, #108]	; (b458 <_sercom_i2c_sync_analyse_flags+0x224>)
    b3ea:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    b3ec:	68f8      	ldr	r0, [r7, #12]
    b3ee:	4b15      	ldr	r3, [pc, #84]	; (b444 <_sercom_i2c_sync_analyse_flags+0x210>)
    b3f0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b3f2:	687b      	ldr	r3, [r7, #4]
    b3f4:	885b      	ldrh	r3, [r3, #2]
    b3f6:	b29b      	uxth	r3, r3
    b3f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b3fc:	b29a      	uxth	r2, r3
    b3fe:	687b      	ldr	r3, [r7, #4]
    b400:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    b402:	687b      	ldr	r3, [r7, #4]
    b404:	689c      	ldr	r4, [r3, #8]
    b406:	1c62      	adds	r2, r4, #1
    b408:	687b      	ldr	r3, [r7, #4]
    b40a:	609a      	str	r2, [r3, #8]
    b40c:	68f8      	ldr	r0, [r7, #12]
    b40e:	4b13      	ldr	r3, [pc, #76]	; (b45c <_sercom_i2c_sync_analyse_flags+0x228>)
    b410:	4798      	blx	r3
    b412:	4603      	mov	r3, r0
    b414:	b2db      	uxtb	r3, r3
    b416:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    b418:	68f8      	ldr	r0, [r7, #12]
    b41a:	4b11      	ldr	r3, [pc, #68]	; (b460 <_sercom_i2c_sync_analyse_flags+0x22c>)
    b41c:	4798      	blx	r3
    b41e:	e005      	b.n	b42c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    b420:	68f8      	ldr	r0, [r7, #12]
    b422:	4b0f      	ldr	r3, [pc, #60]	; (b460 <_sercom_i2c_sync_analyse_flags+0x22c>)
    b424:	4798      	blx	r3
			return I2C_NACK;
    b426:	f06f 0301 	mvn.w	r3, #1
    b42a:	e000      	b.n	b42e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    b42c:	2300      	movs	r3, #0
}
    b42e:	4618      	mov	r0, r3
    b430:	371c      	adds	r7, #28
    b432:	46bd      	mov	sp, r7
    b434:	bd90      	pop	{r4, r7, pc}
    b436:	bf00      	nop
    b438:	0000aca5 	.word	0x0000aca5
    b43c:	0000b0dd 	.word	0x0000b0dd
    b440:	0000aaf1 	.word	0x0000aaf1
    b444:	0000b219 	.word	0x0000b219
    b448:	0000afbd 	.word	0x0000afbd
    b44c:	0000af99 	.word	0x0000af99
    b450:	0000aff9 	.word	0x0000aff9
    b454:	0000ae55 	.word	0x0000ae55
    b458:	0000ae2d 	.word	0x0000ae2d
    b45c:	0000b01d 	.word	0x0000b01d
    b460:	0000ab0b 	.word	0x0000ab0b

0000b464 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    b464:	b580      	push	{r7, lr}
    b466:	b086      	sub	sp, #24
    b468:	af00      	add	r7, sp, #0
    b46a:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    b46c:	687b      	ldr	r3, [r7, #4]
    b46e:	691b      	ldr	r3, [r3, #16]
    b470:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    b472:	6938      	ldr	r0, [r7, #16]
    b474:	4b37      	ldr	r3, [pc, #220]	; (b554 <_sercom_i2c_m_irq_handler+0xf0>)
    b476:	4798      	blx	r3
    b478:	4603      	mov	r3, r0
    b47a:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    b47c:	2300      	movs	r3, #0
    b47e:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    b480:	687b      	ldr	r3, [r7, #4]
    b482:	2b00      	cmp	r3, #0
    b484:	bf14      	ite	ne
    b486:	2301      	movne	r3, #1
    b488:	2300      	moveq	r3, #0
    b48a:	b2db      	uxtb	r3, r3
    b48c:	f240 421e 	movw	r2, #1054	; 0x41e
    b490:	4931      	ldr	r1, [pc, #196]	; (b558 <_sercom_i2c_m_irq_handler+0xf4>)
    b492:	4618      	mov	r0, r3
    b494:	4b31      	ldr	r3, [pc, #196]	; (b55c <_sercom_i2c_m_irq_handler+0xf8>)
    b496:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b498:	687b      	ldr	r3, [r7, #4]
    b49a:	691b      	ldr	r3, [r3, #16]
    b49c:	2b00      	cmp	r3, #0
    b49e:	bf14      	ite	ne
    b4a0:	2301      	movne	r3, #1
    b4a2:	2300      	moveq	r3, #0
    b4a4:	b2db      	uxtb	r3, r3
    b4a6:	f240 421f 	movw	r2, #1055	; 0x41f
    b4aa:	492b      	ldr	r1, [pc, #172]	; (b558 <_sercom_i2c_m_irq_handler+0xf4>)
    b4ac:	4618      	mov	r0, r3
    b4ae:	4b2b      	ldr	r3, [pc, #172]	; (b55c <_sercom_i2c_m_irq_handler+0xf8>)
    b4b0:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    b4b2:	bf00      	nop
    b4b4:	68fb      	ldr	r3, [r7, #12]
    b4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b4ba:	2b00      	cmp	r3, #0
    b4bc:	d126      	bne.n	b50c <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    b4be:	687b      	ldr	r3, [r7, #4]
    b4c0:	461a      	mov	r2, r3
    b4c2:	68f9      	ldr	r1, [r7, #12]
    b4c4:	6938      	ldr	r0, [r7, #16]
    b4c6:	4b26      	ldr	r3, [pc, #152]	; (b560 <_sercom_i2c_m_irq_handler+0xfc>)
    b4c8:	4798      	blx	r3
    b4ca:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    b4cc:	697b      	ldr	r3, [r7, #20]
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d11b      	bne.n	b50a <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    b4d2:	68fb      	ldr	r3, [r7, #12]
    b4d4:	f003 0301 	and.w	r3, r3, #1
    b4d8:	2b00      	cmp	r3, #0
    b4da:	d008      	beq.n	b4ee <_sercom_i2c_m_irq_handler+0x8a>
    b4dc:	687b      	ldr	r3, [r7, #4]
    b4de:	699b      	ldr	r3, [r3, #24]
    b4e0:	2b00      	cmp	r3, #0
    b4e2:	d004      	beq.n	b4ee <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    b4e4:	687b      	ldr	r3, [r7, #4]
    b4e6:	699b      	ldr	r3, [r3, #24]
    b4e8:	6878      	ldr	r0, [r7, #4]
    b4ea:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    b4ec:	e02e      	b.n	b54c <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    b4ee:	68fb      	ldr	r3, [r7, #12]
    b4f0:	f003 0302 	and.w	r3, r3, #2
    b4f4:	2b00      	cmp	r3, #0
    b4f6:	d029      	beq.n	b54c <_sercom_i2c_m_irq_handler+0xe8>
    b4f8:	687b      	ldr	r3, [r7, #4]
    b4fa:	69db      	ldr	r3, [r3, #28]
    b4fc:	2b00      	cmp	r3, #0
    b4fe:	d025      	beq.n	b54c <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    b500:	687b      	ldr	r3, [r7, #4]
    b502:	69db      	ldr	r3, [r3, #28]
    b504:	6878      	ldr	r0, [r7, #4]
    b506:	4798      	blx	r3
		return;
    b508:	e020      	b.n	b54c <_sercom_i2c_m_irq_handler+0xe8>
			break;
    b50a:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b50c:	687b      	ldr	r3, [r7, #4]
    b50e:	885b      	ldrh	r3, [r3, #2]
    b510:	b29b      	uxth	r3, r3
    b512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b516:	b29a      	uxth	r2, r3
    b518:	687b      	ldr	r3, [r7, #4]
    b51a:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    b51c:	687b      	ldr	r3, [r7, #4]
    b51e:	695b      	ldr	r3, [r3, #20]
    b520:	2b00      	cmp	r3, #0
    b522:	d014      	beq.n	b54e <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    b524:	697b      	ldr	r3, [r7, #20]
    b526:	2b00      	cmp	r3, #0
    b528:	d005      	beq.n	b536 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    b52a:	687b      	ldr	r3, [r7, #4]
    b52c:	695b      	ldr	r3, [r3, #20]
    b52e:	6979      	ldr	r1, [r7, #20]
    b530:	6878      	ldr	r0, [r7, #4]
    b532:	4798      	blx	r3
    b534:	e005      	b.n	b542 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    b536:	687b      	ldr	r3, [r7, #4]
    b538:	695b      	ldr	r3, [r3, #20]
    b53a:	f06f 0104 	mvn.w	r1, #4
    b53e:	6878      	ldr	r0, [r7, #4]
    b540:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    b542:	2180      	movs	r1, #128	; 0x80
    b544:	6938      	ldr	r0, [r7, #16]
    b546:	4b07      	ldr	r3, [pc, #28]	; (b564 <_sercom_i2c_m_irq_handler+0x100>)
    b548:	4798      	blx	r3
    b54a:	e000      	b.n	b54e <_sercom_i2c_m_irq_handler+0xea>
		return;
    b54c:	bf00      	nop
	}
}
    b54e:	3718      	adds	r7, #24
    b550:	46bd      	mov	sp, r7
    b552:	bd80      	pop	{r7, pc}
    b554:	0000ab25 	.word	0x0000ab25
    b558:	00021bb8 	.word	0x00021bb8
    b55c:	00007e21 	.word	0x00007e21
    b560:	0000b235 	.word	0x0000b235
    b564:	0000ab3f 	.word	0x0000ab3f

0000b568 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    b568:	b580      	push	{r7, lr}
    b56a:	b082      	sub	sp, #8
    b56c:	af00      	add	r7, sp, #0
    b56e:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    b570:	687b      	ldr	r3, [r7, #4]
    b572:	2b00      	cmp	r3, #0
    b574:	bf14      	ite	ne
    b576:	2301      	movne	r3, #1
    b578:	2300      	moveq	r3, #0
    b57a:	b2db      	uxtb	r3, r3
    b57c:	f240 4244 	movw	r2, #1092	; 0x444
    b580:	4906      	ldr	r1, [pc, #24]	; (b59c <_i2c_m_async_enable+0x34>)
    b582:	4618      	mov	r0, r3
    b584:	4b06      	ldr	r3, [pc, #24]	; (b5a0 <_i2c_m_async_enable+0x38>)
    b586:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    b588:	687b      	ldr	r3, [r7, #4]
    b58a:	691b      	ldr	r3, [r3, #16]
    b58c:	4618      	mov	r0, r3
    b58e:	4b05      	ldr	r3, [pc, #20]	; (b5a4 <_i2c_m_async_enable+0x3c>)
    b590:	4798      	blx	r3
    b592:	4603      	mov	r3, r0
}
    b594:	4618      	mov	r0, r3
    b596:	3708      	adds	r7, #8
    b598:	46bd      	mov	sp, r7
    b59a:	bd80      	pop	{r7, pc}
    b59c:	00021bb8 	.word	0x00021bb8
    b5a0:	00007e21 	.word	0x00007e21
    b5a4:	0000bc29 	.word	0x0000bc29

0000b5a8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    b5a8:	b580      	push	{r7, lr}
    b5aa:	b082      	sub	sp, #8
    b5ac:	af00      	add	r7, sp, #0
    b5ae:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    b5b0:	6878      	ldr	r0, [r7, #4]
    b5b2:	4b05      	ldr	r3, [pc, #20]	; (b5c8 <_sercom_get_irq_num+0x20>)
    b5b4:	4798      	blx	r3
    b5b6:	4603      	mov	r3, r0
    b5b8:	009b      	lsls	r3, r3, #2
    b5ba:	b2db      	uxtb	r3, r3
    b5bc:	332e      	adds	r3, #46	; 0x2e
    b5be:	b2db      	uxtb	r3, r3
}
    b5c0:	4618      	mov	r0, r3
    b5c2:	3708      	adds	r7, #8
    b5c4:	46bd      	mov	sp, r7
    b5c6:	bd80      	pop	{r7, pc}
    b5c8:	0000b129 	.word	0x0000b129

0000b5cc <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    b5cc:	b580      	push	{r7, lr}
    b5ce:	b086      	sub	sp, #24
    b5d0:	af00      	add	r7, sp, #0
    b5d2:	6078      	str	r0, [r7, #4]
    b5d4:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    b5d6:	687b      	ldr	r3, [r7, #4]
    b5d8:	2b00      	cmp	r3, #0
    b5da:	bf14      	ite	ne
    b5dc:	2301      	movne	r3, #1
    b5de:	2300      	moveq	r3, #0
    b5e0:	b2db      	uxtb	r3, r3
    b5e2:	f240 4292 	movw	r2, #1170	; 0x492
    b5e6:	491d      	ldr	r1, [pc, #116]	; (b65c <_i2c_m_async_init+0x90>)
    b5e8:	4618      	mov	r0, r3
    b5ea:	4b1d      	ldr	r3, [pc, #116]	; (b660 <_i2c_m_async_init+0x94>)
    b5ec:	4798      	blx	r3

	i2c_dev->hw = hw;
    b5ee:	687b      	ldr	r3, [r7, #4]
    b5f0:	683a      	ldr	r2, [r7, #0]
    b5f2:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    b5f4:	687b      	ldr	r3, [r7, #4]
    b5f6:	6839      	ldr	r1, [r7, #0]
    b5f8:	4618      	mov	r0, r3
    b5fa:	4b1a      	ldr	r3, [pc, #104]	; (b664 <_i2c_m_async_init+0x98>)
    b5fc:	4798      	blx	r3
    b5fe:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    b600:	68fb      	ldr	r3, [r7, #12]
    b602:	2b00      	cmp	r3, #0
    b604:	d001      	beq.n	b60a <_i2c_m_async_init+0x3e>
		return init_status;
    b606:	68fb      	ldr	r3, [r7, #12]
    b608:	e024      	b.n	b654 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    b60a:	6879      	ldr	r1, [r7, #4]
    b60c:	6838      	ldr	r0, [r7, #0]
    b60e:	4b16      	ldr	r3, [pc, #88]	; (b668 <_i2c_m_async_init+0x9c>)
    b610:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    b612:	6838      	ldr	r0, [r7, #0]
    b614:	4b15      	ldr	r3, [pc, #84]	; (b66c <_i2c_m_async_init+0xa0>)
    b616:	4798      	blx	r3
    b618:	4603      	mov	r3, r0
    b61a:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b61c:	2300      	movs	r3, #0
    b61e:	613b      	str	r3, [r7, #16]
    b620:	e014      	b.n	b64c <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    b622:	7dfb      	ldrb	r3, [r7, #23]
    b624:	b21b      	sxth	r3, r3
    b626:	4618      	mov	r0, r3
    b628:	4b11      	ldr	r3, [pc, #68]	; (b670 <_i2c_m_async_init+0xa4>)
    b62a:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    b62c:	7dfb      	ldrb	r3, [r7, #23]
    b62e:	b21b      	sxth	r3, r3
    b630:	4618      	mov	r0, r3
    b632:	4b10      	ldr	r3, [pc, #64]	; (b674 <_i2c_m_async_init+0xa8>)
    b634:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    b636:	7dfb      	ldrb	r3, [r7, #23]
    b638:	b21b      	sxth	r3, r3
    b63a:	4618      	mov	r0, r3
    b63c:	4b0e      	ldr	r3, [pc, #56]	; (b678 <_i2c_m_async_init+0xac>)
    b63e:	4798      	blx	r3
		irq++;
    b640:	7dfb      	ldrb	r3, [r7, #23]
    b642:	3301      	adds	r3, #1
    b644:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b646:	693b      	ldr	r3, [r7, #16]
    b648:	3301      	adds	r3, #1
    b64a:	613b      	str	r3, [r7, #16]
    b64c:	693b      	ldr	r3, [r7, #16]
    b64e:	2b03      	cmp	r3, #3
    b650:	d9e7      	bls.n	b622 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    b652:	2300      	movs	r3, #0
}
    b654:	4618      	mov	r0, r3
    b656:	3718      	adds	r7, #24
    b658:	46bd      	mov	sp, r7
    b65a:	bd80      	pop	{r7, pc}
    b65c:	00021bb8 	.word	0x00021bb8
    b660:	00007e21 	.word	0x00007e21
    b664:	0000bcb5 	.word	0x0000bcb5
    b668:	0000b185 	.word	0x0000b185
    b66c:	0000b5a9 	.word	0x0000b5a9
    b670:	0000a9d9 	.word	0x0000a9d9
    b674:	0000aa1d 	.word	0x0000aa1d
    b678:	0000a99d 	.word	0x0000a99d

0000b67c <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    b67c:	b590      	push	{r4, r7, lr}
    b67e:	b087      	sub	sp, #28
    b680:	af00      	add	r7, sp, #0
    b682:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    b684:	687b      	ldr	r3, [r7, #4]
    b686:	691b      	ldr	r3, [r3, #16]
    b688:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    b68a:	687b      	ldr	r3, [r7, #4]
    b68c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b68e:	6978      	ldr	r0, [r7, #20]
    b690:	4b33      	ldr	r3, [pc, #204]	; (b760 <_sercom_i2c_send_address+0xe4>)
    b692:	4798      	blx	r3
    b694:	4603      	mov	r3, r0
    b696:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    b698:	687b      	ldr	r3, [r7, #4]
    b69a:	2b00      	cmp	r3, #0
    b69c:	bf14      	ite	ne
    b69e:	2301      	movne	r3, #1
    b6a0:	2300      	moveq	r3, #0
    b6a2:	b2db      	uxtb	r3, r3
    b6a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    b6a8:	492e      	ldr	r1, [pc, #184]	; (b764 <_sercom_i2c_send_address+0xe8>)
    b6aa:	4618      	mov	r0, r3
    b6ac:	4b2e      	ldr	r3, [pc, #184]	; (b768 <_sercom_i2c_send_address+0xec>)
    b6ae:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    b6b0:	693b      	ldr	r3, [r7, #16]
    b6b2:	685b      	ldr	r3, [r3, #4]
    b6b4:	2b01      	cmp	r3, #1
    b6b6:	d106      	bne.n	b6c6 <_sercom_i2c_send_address+0x4a>
    b6b8:	68fb      	ldr	r3, [r7, #12]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d003      	beq.n	b6c6 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b6be:	6978      	ldr	r0, [r7, #20]
    b6c0:	4b2a      	ldr	r3, [pc, #168]	; (b76c <_sercom_i2c_send_address+0xf0>)
    b6c2:	4798      	blx	r3
    b6c4:	e002      	b.n	b6cc <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    b6c6:	6978      	ldr	r0, [r7, #20]
    b6c8:	4b29      	ldr	r3, [pc, #164]	; (b770 <_sercom_i2c_send_address+0xf4>)
    b6ca:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    b6cc:	693b      	ldr	r3, [r7, #16]
    b6ce:	881b      	ldrh	r3, [r3, #0]
    b6d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b6d4:	2b00      	cmp	r3, #0
    b6d6:	d022      	beq.n	b71e <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    b6d8:	693b      	ldr	r3, [r7, #16]
    b6da:	885b      	ldrh	r3, [r3, #2]
    b6dc:	b29b      	uxth	r3, r3
    b6de:	f003 0301 	and.w	r3, r3, #1
    b6e2:	2b00      	cmp	r3, #0
    b6e4:	d007      	beq.n	b6f6 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    b6e6:	693b      	ldr	r3, [r7, #16]
    b6e8:	885b      	ldrh	r3, [r3, #2]
    b6ea:	b29b      	uxth	r3, r3
    b6ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    b6f0:	b29a      	uxth	r2, r3
    b6f2:	693b      	ldr	r3, [r7, #16]
    b6f4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    b6f6:	693b      	ldr	r3, [r7, #16]
    b6f8:	881b      	ldrh	r3, [r3, #0]
    b6fa:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b6fc:	f240 74fe 	movw	r4, #2046	; 0x7fe
    b700:	401c      	ands	r4, r3
    b702:	6978      	ldr	r0, [r7, #20]
    b704:	4b1b      	ldr	r3, [pc, #108]	; (b774 <_sercom_i2c_send_address+0xf8>)
    b706:	4798      	blx	r3
    b708:	4603      	mov	r3, r0
    b70a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b70e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    b710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b714:	4619      	mov	r1, r3
    b716:	6978      	ldr	r0, [r7, #20]
    b718:	4b17      	ldr	r3, [pc, #92]	; (b778 <_sercom_i2c_send_address+0xfc>)
    b71a:	4798      	blx	r3
    b71c:	e01a      	b.n	b754 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    b71e:	693b      	ldr	r3, [r7, #16]
    b720:	881b      	ldrh	r3, [r3, #0]
    b722:	005b      	lsls	r3, r3, #1
    b724:	b2db      	uxtb	r3, r3
    b726:	693a      	ldr	r2, [r7, #16]
    b728:	8852      	ldrh	r2, [r2, #2]
    b72a:	b292      	uxth	r2, r2
    b72c:	f002 0201 	and.w	r2, r2, #1
    b730:	2a00      	cmp	r2, #0
    b732:	bf14      	ite	ne
    b734:	2201      	movne	r2, #1
    b736:	2200      	moveq	r2, #0
    b738:	b2d2      	uxtb	r2, r2
    b73a:	4313      	orrs	r3, r2
    b73c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b73e:	6978      	ldr	r0, [r7, #20]
    b740:	4b0c      	ldr	r3, [pc, #48]	; (b774 <_sercom_i2c_send_address+0xf8>)
    b742:	4798      	blx	r3
    b744:	4603      	mov	r3, r0
    b746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    b74a:	4323      	orrs	r3, r4
    b74c:	4619      	mov	r1, r3
    b74e:	6978      	ldr	r0, [r7, #20]
    b750:	4b09      	ldr	r3, [pc, #36]	; (b778 <_sercom_i2c_send_address+0xfc>)
    b752:	4798      	blx	r3
	}

	return ERR_NONE;
    b754:	2300      	movs	r3, #0
}
    b756:	4618      	mov	r0, r3
    b758:	371c      	adds	r7, #28
    b75a:	46bd      	mov	sp, r7
    b75c:	bd90      	pop	{r4, r7, pc}
    b75e:	bf00      	nop
    b760:	0000aca5 	.word	0x0000aca5
    b764:	00021bb8 	.word	0x00021bb8
    b768:	00007e21 	.word	0x00007e21
    b76c:	0000ae55 	.word	0x0000ae55
    b770:	0000ae7d 	.word	0x0000ae7d
    b774:	0000afbd 	.word	0x0000afbd
    b778:	0000af99 	.word	0x0000af99

0000b77c <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    b77c:	b580      	push	{r7, lr}
    b77e:	b084      	sub	sp, #16
    b780:	af00      	add	r7, sp, #0
    b782:	6078      	str	r0, [r7, #4]
    b784:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    b786:	687b      	ldr	r3, [r7, #4]
    b788:	2b00      	cmp	r3, #0
    b78a:	bf14      	ite	ne
    b78c:	2301      	movne	r3, #1
    b78e:	2300      	moveq	r3, #0
    b790:	b2db      	uxtb	r3, r3
    b792:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    b796:	492a      	ldr	r1, [pc, #168]	; (b840 <_i2c_m_async_transfer+0xc4>)
    b798:	4618      	mov	r0, r3
    b79a:	4b2a      	ldr	r3, [pc, #168]	; (b844 <_i2c_m_async_transfer+0xc8>)
    b79c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b79e:	687b      	ldr	r3, [r7, #4]
    b7a0:	691b      	ldr	r3, [r3, #16]
    b7a2:	2b00      	cmp	r3, #0
    b7a4:	bf14      	ite	ne
    b7a6:	2301      	movne	r3, #1
    b7a8:	2300      	moveq	r3, #0
    b7aa:	b2db      	uxtb	r3, r3
    b7ac:	f240 42e9 	movw	r2, #1257	; 0x4e9
    b7b0:	4923      	ldr	r1, [pc, #140]	; (b840 <_i2c_m_async_transfer+0xc4>)
    b7b2:	4618      	mov	r0, r3
    b7b4:	4b23      	ldr	r3, [pc, #140]	; (b844 <_i2c_m_async_transfer+0xc8>)
    b7b6:	4798      	blx	r3
	ASSERT(msg);
    b7b8:	683b      	ldr	r3, [r7, #0]
    b7ba:	2b00      	cmp	r3, #0
    b7bc:	bf14      	ite	ne
    b7be:	2301      	movne	r3, #1
    b7c0:	2300      	moveq	r3, #0
    b7c2:	b2db      	uxtb	r3, r3
    b7c4:	f240 42ea 	movw	r2, #1258	; 0x4ea
    b7c8:	491d      	ldr	r1, [pc, #116]	; (b840 <_i2c_m_async_transfer+0xc4>)
    b7ca:	4618      	mov	r0, r3
    b7cc:	4b1d      	ldr	r3, [pc, #116]	; (b844 <_i2c_m_async_transfer+0xc8>)
    b7ce:	4798      	blx	r3

	if (msg->len == 0) {
    b7d0:	683b      	ldr	r3, [r7, #0]
    b7d2:	685b      	ldr	r3, [r3, #4]
    b7d4:	2b00      	cmp	r3, #0
    b7d6:	d101      	bne.n	b7dc <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    b7d8:	2300      	movs	r3, #0
    b7da:	e02d      	b.n	b838 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    b7dc:	687b      	ldr	r3, [r7, #4]
    b7de:	885b      	ldrh	r3, [r3, #2]
    b7e0:	b29b      	uxth	r3, r3
    b7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b7e6:	2b00      	cmp	r3, #0
    b7e8:	d002      	beq.n	b7f0 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    b7ea:	f06f 0303 	mvn.w	r3, #3
    b7ee:	e023      	b.n	b838 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    b7f0:	683b      	ldr	r3, [r7, #0]
    b7f2:	885b      	ldrh	r3, [r3, #2]
    b7f4:	b29b      	uxth	r3, r3
    b7f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b7fa:	b29a      	uxth	r2, r3
    b7fc:	683b      	ldr	r3, [r7, #0]
    b7fe:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    b800:	687b      	ldr	r3, [r7, #4]
    b802:	683a      	ldr	r2, [r7, #0]
    b804:	ca07      	ldmia	r2, {r0, r1, r2}
    b806:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    b80a:	687b      	ldr	r3, [r7, #4]
    b80c:	691b      	ldr	r3, [r3, #16]
    b80e:	4618      	mov	r0, r3
    b810:	4b0d      	ldr	r3, [pc, #52]	; (b848 <_i2c_m_async_transfer+0xcc>)
    b812:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    b814:	6878      	ldr	r0, [r7, #4]
    b816:	4b0d      	ldr	r3, [pc, #52]	; (b84c <_i2c_m_async_transfer+0xd0>)
    b818:	4798      	blx	r3
    b81a:	60f8      	str	r0, [r7, #12]

	if (ret) {
    b81c:	68fb      	ldr	r3, [r7, #12]
    b81e:	2b00      	cmp	r3, #0
    b820:	d009      	beq.n	b836 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b822:	687b      	ldr	r3, [r7, #4]
    b824:	885b      	ldrh	r3, [r3, #2]
    b826:	b29b      	uxth	r3, r3
    b828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b82c:	b29a      	uxth	r2, r3
    b82e:	687b      	ldr	r3, [r7, #4]
    b830:	805a      	strh	r2, [r3, #2]

		return ret;
    b832:	68fb      	ldr	r3, [r7, #12]
    b834:	e000      	b.n	b838 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    b836:	2300      	movs	r3, #0
}
    b838:	4618      	mov	r0, r3
    b83a:	3710      	adds	r7, #16
    b83c:	46bd      	mov	sp, r7
    b83e:	bd80      	pop	{r7, pc}
    b840:	00021bb8 	.word	0x00021bb8
    b844:	00007e21 	.word	0x00007e21
    b848:	0000ae05 	.word	0x0000ae05
    b84c:	0000b67d 	.word	0x0000b67d

0000b850 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    b850:	b480      	push	{r7}
    b852:	b085      	sub	sp, #20
    b854:	af00      	add	r7, sp, #0
    b856:	60f8      	str	r0, [r7, #12]
    b858:	460b      	mov	r3, r1
    b85a:	607a      	str	r2, [r7, #4]
    b85c:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    b85e:	7afb      	ldrb	r3, [r7, #11]
    b860:	2b01      	cmp	r3, #1
    b862:	d008      	beq.n	b876 <_i2c_m_async_register_callback+0x26>
    b864:	2b02      	cmp	r3, #2
    b866:	d00a      	beq.n	b87e <_i2c_m_async_register_callback+0x2e>
    b868:	2b00      	cmp	r3, #0
    b86a:	d000      	beq.n	b86e <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    b86c:	e00b      	b.n	b886 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    b86e:	68fb      	ldr	r3, [r7, #12]
    b870:	687a      	ldr	r2, [r7, #4]
    b872:	615a      	str	r2, [r3, #20]
		break;
    b874:	e007      	b.n	b886 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    b876:	68fb      	ldr	r3, [r7, #12]
    b878:	687a      	ldr	r2, [r7, #4]
    b87a:	619a      	str	r2, [r3, #24]
		break;
    b87c:	e003      	b.n	b886 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    b87e:	68fb      	ldr	r3, [r7, #12]
    b880:	687a      	ldr	r2, [r7, #4]
    b882:	61da      	str	r2, [r3, #28]
		break;
    b884:	bf00      	nop
	}

	return ERR_NONE;
    b886:	2300      	movs	r3, #0
}
    b888:	4618      	mov	r0, r3
    b88a:	3714      	adds	r7, #20
    b88c:	46bd      	mov	sp, r7
    b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b892:	4770      	bx	lr

0000b894 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    b894:	b580      	push	{r7, lr}
    b896:	b082      	sub	sp, #8
    b898:	af00      	add	r7, sp, #0
    b89a:	6078      	str	r0, [r7, #4]
    b89c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    b89e:	687b      	ldr	r3, [r7, #4]
    b8a0:	2b00      	cmp	r3, #0
    b8a2:	bf14      	ite	ne
    b8a4:	2301      	movne	r3, #1
    b8a6:	2300      	moveq	r3, #0
    b8a8:	b2db      	uxtb	r3, r3
    b8aa:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    b8ae:	4908      	ldr	r1, [pc, #32]	; (b8d0 <_i2c_m_sync_init+0x3c>)
    b8b0:	4618      	mov	r0, r3
    b8b2:	4b08      	ldr	r3, [pc, #32]	; (b8d4 <_i2c_m_sync_init+0x40>)
    b8b4:	4798      	blx	r3

	i2c_dev->hw = hw;
    b8b6:	687b      	ldr	r3, [r7, #4]
    b8b8:	683a      	ldr	r2, [r7, #0]
    b8ba:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    b8bc:	687b      	ldr	r3, [r7, #4]
    b8be:	6839      	ldr	r1, [r7, #0]
    b8c0:	4618      	mov	r0, r3
    b8c2:	4b05      	ldr	r3, [pc, #20]	; (b8d8 <_i2c_m_sync_init+0x44>)
    b8c4:	4798      	blx	r3
    b8c6:	4603      	mov	r3, r0
}
    b8c8:	4618      	mov	r0, r3
    b8ca:	3708      	adds	r7, #8
    b8cc:	46bd      	mov	sp, r7
    b8ce:	bd80      	pop	{r7, pc}
    b8d0:	00021bb8 	.word	0x00021bb8
    b8d4:	00007e21 	.word	0x00007e21
    b8d8:	0000bcb5 	.word	0x0000bcb5

0000b8dc <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    b8dc:	b580      	push	{r7, lr}
    b8de:	b082      	sub	sp, #8
    b8e0:	af00      	add	r7, sp, #0
    b8e2:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    b8e4:	687b      	ldr	r3, [r7, #4]
    b8e6:	2b00      	cmp	r3, #0
    b8e8:	bf14      	ite	ne
    b8ea:	2301      	movne	r3, #1
    b8ec:	2300      	moveq	r3, #0
    b8ee:	b2db      	uxtb	r3, r3
    b8f0:	f240 5265 	movw	r2, #1381	; 0x565
    b8f4:	4906      	ldr	r1, [pc, #24]	; (b910 <_i2c_m_sync_enable+0x34>)
    b8f6:	4618      	mov	r0, r3
    b8f8:	4b06      	ldr	r3, [pc, #24]	; (b914 <_i2c_m_sync_enable+0x38>)
    b8fa:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    b8fc:	687b      	ldr	r3, [r7, #4]
    b8fe:	691b      	ldr	r3, [r3, #16]
    b900:	4618      	mov	r0, r3
    b902:	4b05      	ldr	r3, [pc, #20]	; (b918 <_i2c_m_sync_enable+0x3c>)
    b904:	4798      	blx	r3
    b906:	4603      	mov	r3, r0
}
    b908:	4618      	mov	r0, r3
    b90a:	3708      	adds	r7, #8
    b90c:	46bd      	mov	sp, r7
    b90e:	bd80      	pop	{r7, pc}
    b910:	00021bb8 	.word	0x00021bb8
    b914:	00007e21 	.word	0x00007e21
    b918:	0000bc29 	.word	0x0000bc29

0000b91c <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    b91c:	b580      	push	{r7, lr}
    b91e:	b082      	sub	sp, #8
    b920:	af00      	add	r7, sp, #0
    b922:	6078      	str	r0, [r7, #4]
    b924:	460b      	mov	r3, r1
    b926:	70fb      	strb	r3, [r7, #3]
    b928:	4613      	mov	r3, r2
    b92a:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    b92c:	78fb      	ldrb	r3, [r7, #3]
    b92e:	2b01      	cmp	r3, #1
    b930:	d002      	beq.n	b938 <_i2c_m_async_set_irq_state+0x1c>
    b932:	78fb      	ldrb	r3, [r7, #3]
    b934:	2b02      	cmp	r3, #2
    b936:	d10e      	bne.n	b956 <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    b938:	687b      	ldr	r3, [r7, #4]
    b93a:	691b      	ldr	r3, [r3, #16]
    b93c:	78ba      	ldrb	r2, [r7, #2]
    b93e:	4611      	mov	r1, r2
    b940:	4618      	mov	r0, r3
    b942:	4b0c      	ldr	r3, [pc, #48]	; (b974 <_i2c_m_async_set_irq_state+0x58>)
    b944:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    b946:	687b      	ldr	r3, [r7, #4]
    b948:	691b      	ldr	r3, [r3, #16]
    b94a:	78ba      	ldrb	r2, [r7, #2]
    b94c:	4611      	mov	r1, r2
    b94e:	4618      	mov	r0, r3
    b950:	4b09      	ldr	r3, [pc, #36]	; (b978 <_i2c_m_async_set_irq_state+0x5c>)
    b952:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    b954:	e009      	b.n	b96a <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    b956:	78fb      	ldrb	r3, [r7, #3]
    b958:	2b00      	cmp	r3, #0
    b95a:	d106      	bne.n	b96a <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    b95c:	687b      	ldr	r3, [r7, #4]
    b95e:	691b      	ldr	r3, [r3, #16]
    b960:	78ba      	ldrb	r2, [r7, #2]
    b962:	4611      	mov	r1, r2
    b964:	4618      	mov	r0, r3
    b966:	4b05      	ldr	r3, [pc, #20]	; (b97c <_i2c_m_async_set_irq_state+0x60>)
    b968:	4798      	blx	r3
}
    b96a:	bf00      	nop
    b96c:	3708      	adds	r7, #8
    b96e:	46bd      	mov	sp, r7
    b970:	bd80      	pop	{r7, pc}
    b972:	bf00      	nop
    b974:	0000abef 	.word	0x0000abef
    b978:	0000abbd 	.word	0x0000abbd
    b97c:	0000ac21 	.word	0x0000ac21

0000b980 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    b980:	b580      	push	{r7, lr}
    b982:	b084      	sub	sp, #16
    b984:	af00      	add	r7, sp, #0
    b986:	6078      	str	r0, [r7, #4]
    b988:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    b98a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b98e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    b990:	687b      	ldr	r3, [r7, #4]
    b992:	691b      	ldr	r3, [r3, #16]
    b994:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    b996:	68b8      	ldr	r0, [r7, #8]
    b998:	4b0f      	ldr	r3, [pc, #60]	; (b9d8 <_sercom_i2c_sync_wait_bus+0x58>)
    b99a:	4798      	blx	r3
    b99c:	4603      	mov	r3, r0
    b99e:	461a      	mov	r2, r3
    b9a0:	683b      	ldr	r3, [r7, #0]
    b9a2:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    b9a4:	68fb      	ldr	r3, [r7, #12]
    b9a6:	1e5a      	subs	r2, r3, #1
    b9a8:	60fa      	str	r2, [r7, #12]
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	d102      	bne.n	b9b4 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    b9ae:	f06f 0304 	mvn.w	r3, #4
    b9b2:	e00c      	b.n	b9ce <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    b9b4:	683b      	ldr	r3, [r7, #0]
    b9b6:	681b      	ldr	r3, [r3, #0]
    b9b8:	f003 0301 	and.w	r3, r3, #1
    b9bc:	2b00      	cmp	r3, #0
    b9be:	d105      	bne.n	b9cc <_sercom_i2c_sync_wait_bus+0x4c>
    b9c0:	683b      	ldr	r3, [r7, #0]
    b9c2:	681b      	ldr	r3, [r3, #0]
    b9c4:	f003 0302 	and.w	r3, r3, #2
    b9c8:	2b00      	cmp	r3, #0
    b9ca:	d0e4      	beq.n	b996 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    b9cc:	2300      	movs	r3, #0
}
    b9ce:	4618      	mov	r0, r3
    b9d0:	3710      	adds	r7, #16
    b9d2:	46bd      	mov	sp, r7
    b9d4:	bd80      	pop	{r7, pc}
    b9d6:	bf00      	nop
    b9d8:	0000ab25 	.word	0x0000ab25

0000b9dc <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    b9dc:	b590      	push	{r4, r7, lr}
    b9de:	b087      	sub	sp, #28
    b9e0:	af00      	add	r7, sp, #0
    b9e2:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    b9e4:	687b      	ldr	r3, [r7, #4]
    b9e6:	691b      	ldr	r3, [r3, #16]
    b9e8:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    b9ea:	687b      	ldr	r3, [r7, #4]
    b9ec:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b9ee:	6978      	ldr	r0, [r7, #20]
    b9f0:	4b39      	ldr	r3, [pc, #228]	; (bad8 <_sercom_i2c_sync_send_address+0xfc>)
    b9f2:	4798      	blx	r3
    b9f4:	4603      	mov	r3, r0
    b9f6:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    b9f8:	687b      	ldr	r3, [r7, #4]
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	bf14      	ite	ne
    b9fe:	2301      	movne	r3, #1
    ba00:	2300      	moveq	r3, #0
    ba02:	b2db      	uxtb	r3, r3
    ba04:	f240 52d5 	movw	r2, #1493	; 0x5d5
    ba08:	4934      	ldr	r1, [pc, #208]	; (badc <_sercom_i2c_sync_send_address+0x100>)
    ba0a:	4618      	mov	r0, r3
    ba0c:	4b34      	ldr	r3, [pc, #208]	; (bae0 <_sercom_i2c_sync_send_address+0x104>)
    ba0e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    ba10:	693b      	ldr	r3, [r7, #16]
    ba12:	685b      	ldr	r3, [r3, #4]
    ba14:	2b01      	cmp	r3, #1
    ba16:	d106      	bne.n	ba26 <_sercom_i2c_sync_send_address+0x4a>
    ba18:	68fb      	ldr	r3, [r7, #12]
    ba1a:	2b00      	cmp	r3, #0
    ba1c:	d003      	beq.n	ba26 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    ba1e:	6978      	ldr	r0, [r7, #20]
    ba20:	4b30      	ldr	r3, [pc, #192]	; (bae4 <_sercom_i2c_sync_send_address+0x108>)
    ba22:	4798      	blx	r3
    ba24:	e002      	b.n	ba2c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    ba26:	6978      	ldr	r0, [r7, #20]
    ba28:	4b2f      	ldr	r3, [pc, #188]	; (bae8 <_sercom_i2c_sync_send_address+0x10c>)
    ba2a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    ba2c:	693b      	ldr	r3, [r7, #16]
    ba2e:	881b      	ldrh	r3, [r3, #0]
    ba30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ba34:	2b00      	cmp	r3, #0
    ba36:	d022      	beq.n	ba7e <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    ba38:	693b      	ldr	r3, [r7, #16]
    ba3a:	885b      	ldrh	r3, [r3, #2]
    ba3c:	b29b      	uxth	r3, r3
    ba3e:	f003 0301 	and.w	r3, r3, #1
    ba42:	2b00      	cmp	r3, #0
    ba44:	d007      	beq.n	ba56 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    ba46:	693b      	ldr	r3, [r7, #16]
    ba48:	885b      	ldrh	r3, [r3, #2]
    ba4a:	b29b      	uxth	r3, r3
    ba4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ba50:	b29a      	uxth	r2, r3
    ba52:	693b      	ldr	r3, [r7, #16]
    ba54:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    ba56:	693b      	ldr	r3, [r7, #16]
    ba58:	881b      	ldrh	r3, [r3, #0]
    ba5a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    ba5c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    ba60:	401c      	ands	r4, r3
    ba62:	6978      	ldr	r0, [r7, #20]
    ba64:	4b21      	ldr	r3, [pc, #132]	; (baec <_sercom_i2c_sync_send_address+0x110>)
    ba66:	4798      	blx	r3
    ba68:	4603      	mov	r3, r0
    ba6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    ba6e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    ba70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ba74:	4619      	mov	r1, r3
    ba76:	6978      	ldr	r0, [r7, #20]
    ba78:	4b1d      	ldr	r3, [pc, #116]	; (baf0 <_sercom_i2c_sync_send_address+0x114>)
    ba7a:	4798      	blx	r3
    ba7c:	e01a      	b.n	bab4 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    ba7e:	693b      	ldr	r3, [r7, #16]
    ba80:	881b      	ldrh	r3, [r3, #0]
    ba82:	005b      	lsls	r3, r3, #1
    ba84:	b2db      	uxtb	r3, r3
    ba86:	693a      	ldr	r2, [r7, #16]
    ba88:	8852      	ldrh	r2, [r2, #2]
    ba8a:	b292      	uxth	r2, r2
    ba8c:	f002 0201 	and.w	r2, r2, #1
    ba90:	2a00      	cmp	r2, #0
    ba92:	bf14      	ite	ne
    ba94:	2201      	movne	r2, #1
    ba96:	2200      	moveq	r2, #0
    ba98:	b2d2      	uxtb	r2, r2
    ba9a:	4313      	orrs	r3, r2
    ba9c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    ba9e:	6978      	ldr	r0, [r7, #20]
    baa0:	4b12      	ldr	r3, [pc, #72]	; (baec <_sercom_i2c_sync_send_address+0x110>)
    baa2:	4798      	blx	r3
    baa4:	4603      	mov	r3, r0
    baa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    baaa:	4323      	orrs	r3, r4
    baac:	4619      	mov	r1, r3
    baae:	6978      	ldr	r0, [r7, #20]
    bab0:	4b0f      	ldr	r3, [pc, #60]	; (baf0 <_sercom_i2c_sync_send_address+0x114>)
    bab2:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    bab4:	f107 0308 	add.w	r3, r7, #8
    bab8:	4619      	mov	r1, r3
    baba:	6878      	ldr	r0, [r7, #4]
    babc:	4b0d      	ldr	r3, [pc, #52]	; (baf4 <_sercom_i2c_sync_send_address+0x118>)
    babe:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    bac0:	68bb      	ldr	r3, [r7, #8]
    bac2:	693a      	ldr	r2, [r7, #16]
    bac4:	4619      	mov	r1, r3
    bac6:	6978      	ldr	r0, [r7, #20]
    bac8:	4b0b      	ldr	r3, [pc, #44]	; (baf8 <_sercom_i2c_sync_send_address+0x11c>)
    baca:	4798      	blx	r3
    bacc:	4603      	mov	r3, r0
}
    bace:	4618      	mov	r0, r3
    bad0:	371c      	adds	r7, #28
    bad2:	46bd      	mov	sp, r7
    bad4:	bd90      	pop	{r4, r7, pc}
    bad6:	bf00      	nop
    bad8:	0000aca5 	.word	0x0000aca5
    badc:	00021bb8 	.word	0x00021bb8
    bae0:	00007e21 	.word	0x00007e21
    bae4:	0000ae55 	.word	0x0000ae55
    bae8:	0000ae7d 	.word	0x0000ae7d
    baec:	0000afbd 	.word	0x0000afbd
    baf0:	0000af99 	.word	0x0000af99
    baf4:	0000b981 	.word	0x0000b981
    baf8:	0000b235 	.word	0x0000b235

0000bafc <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    bafc:	b580      	push	{r7, lr}
    bafe:	b086      	sub	sp, #24
    bb00:	af00      	add	r7, sp, #0
    bb02:	6078      	str	r0, [r7, #4]
    bb04:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    bb06:	687b      	ldr	r3, [r7, #4]
    bb08:	691b      	ldr	r3, [r3, #16]
    bb0a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    bb0c:	687b      	ldr	r3, [r7, #4]
    bb0e:	2b00      	cmp	r3, #0
    bb10:	bf14      	ite	ne
    bb12:	2301      	movne	r3, #1
    bb14:	2300      	moveq	r3, #0
    bb16:	b2db      	uxtb	r3, r3
    bb18:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    bb1c:	493b      	ldr	r1, [pc, #236]	; (bc0c <_i2c_m_sync_transfer+0x110>)
    bb1e:	4618      	mov	r0, r3
    bb20:	4b3b      	ldr	r3, [pc, #236]	; (bc10 <_i2c_m_sync_transfer+0x114>)
    bb22:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    bb24:	687b      	ldr	r3, [r7, #4]
    bb26:	691b      	ldr	r3, [r3, #16]
    bb28:	2b00      	cmp	r3, #0
    bb2a:	bf14      	ite	ne
    bb2c:	2301      	movne	r3, #1
    bb2e:	2300      	moveq	r3, #0
    bb30:	b2db      	uxtb	r3, r3
    bb32:	f240 6201 	movw	r2, #1537	; 0x601
    bb36:	4935      	ldr	r1, [pc, #212]	; (bc0c <_i2c_m_sync_transfer+0x110>)
    bb38:	4618      	mov	r0, r3
    bb3a:	4b35      	ldr	r3, [pc, #212]	; (bc10 <_i2c_m_sync_transfer+0x114>)
    bb3c:	4798      	blx	r3
	ASSERT(msg);
    bb3e:	683b      	ldr	r3, [r7, #0]
    bb40:	2b00      	cmp	r3, #0
    bb42:	bf14      	ite	ne
    bb44:	2301      	movne	r3, #1
    bb46:	2300      	moveq	r3, #0
    bb48:	b2db      	uxtb	r3, r3
    bb4a:	f240 6202 	movw	r2, #1538	; 0x602
    bb4e:	492f      	ldr	r1, [pc, #188]	; (bc0c <_i2c_m_sync_transfer+0x110>)
    bb50:	4618      	mov	r0, r3
    bb52:	4b2f      	ldr	r3, [pc, #188]	; (bc10 <_i2c_m_sync_transfer+0x114>)
    bb54:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    bb56:	687b      	ldr	r3, [r7, #4]
    bb58:	885b      	ldrh	r3, [r3, #2]
    bb5a:	b29b      	uxth	r3, r3
    bb5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    bb60:	2b00      	cmp	r3, #0
    bb62:	d002      	beq.n	bb6a <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    bb64:	f06f 0305 	mvn.w	r3, #5
    bb68:	e04c      	b.n	bc04 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    bb6a:	683b      	ldr	r3, [r7, #0]
    bb6c:	885b      	ldrh	r3, [r3, #2]
    bb6e:	b29b      	uxth	r3, r3
    bb70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bb74:	b29a      	uxth	r2, r3
    bb76:	683b      	ldr	r3, [r7, #0]
    bb78:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    bb7a:	687b      	ldr	r3, [r7, #4]
    bb7c:	683a      	ldr	r2, [r7, #0]
    bb7e:	ca07      	ldmia	r2, {r0, r1, r2}
    bb80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    bb84:	6938      	ldr	r0, [r7, #16]
    bb86:	4b23      	ldr	r3, [pc, #140]	; (bc14 <_i2c_m_sync_transfer+0x118>)
    bb88:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    bb8a:	6878      	ldr	r0, [r7, #4]
    bb8c:	4b22      	ldr	r3, [pc, #136]	; (bc18 <_i2c_m_sync_transfer+0x11c>)
    bb8e:	4798      	blx	r3
    bb90:	6178      	str	r0, [r7, #20]

	if (ret) {
    bb92:	697b      	ldr	r3, [r7, #20]
    bb94:	2b00      	cmp	r3, #0
    bb96:	d02d      	beq.n	bbf4 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    bb98:	687b      	ldr	r3, [r7, #4]
    bb9a:	885b      	ldrh	r3, [r3, #2]
    bb9c:	b29b      	uxth	r3, r3
    bb9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bba2:	b29a      	uxth	r2, r3
    bba4:	687b      	ldr	r3, [r7, #4]
    bba6:	805a      	strh	r2, [r3, #2]

		return ret;
    bba8:	697b      	ldr	r3, [r7, #20]
    bbaa:	e02b      	b.n	bc04 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    bbac:	f107 030c 	add.w	r3, r7, #12
    bbb0:	4619      	mov	r1, r3
    bbb2:	6878      	ldr	r0, [r7, #4]
    bbb4:	4b19      	ldr	r3, [pc, #100]	; (bc1c <_i2c_m_sync_transfer+0x120>)
    bbb6:	4798      	blx	r3
    bbb8:	6178      	str	r0, [r7, #20]

		if (ret) {
    bbba:	697b      	ldr	r3, [r7, #20]
    bbbc:	2b00      	cmp	r3, #0
    bbbe:	d012      	beq.n	bbe6 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    bbc0:	683b      	ldr	r3, [r7, #0]
    bbc2:	885b      	ldrh	r3, [r3, #2]
    bbc4:	b29b      	uxth	r3, r3
    bbc6:	b21b      	sxth	r3, r3
    bbc8:	2b00      	cmp	r3, #0
    bbca:	da02      	bge.n	bbd2 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    bbcc:	6938      	ldr	r0, [r7, #16]
    bbce:	4b14      	ldr	r3, [pc, #80]	; (bc20 <_i2c_m_sync_transfer+0x124>)
    bbd0:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    bbd2:	687b      	ldr	r3, [r7, #4]
    bbd4:	885b      	ldrh	r3, [r3, #2]
    bbd6:	b29b      	uxth	r3, r3
    bbd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bbdc:	b29a      	uxth	r2, r3
    bbde:	687b      	ldr	r3, [r7, #4]
    bbe0:	805a      	strh	r2, [r3, #2]

			return ret;
    bbe2:	697b      	ldr	r3, [r7, #20]
    bbe4:	e00e      	b.n	bc04 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    bbe6:	68fb      	ldr	r3, [r7, #12]
    bbe8:	687a      	ldr	r2, [r7, #4]
    bbea:	4619      	mov	r1, r3
    bbec:	6938      	ldr	r0, [r7, #16]
    bbee:	4b0d      	ldr	r3, [pc, #52]	; (bc24 <_i2c_m_sync_transfer+0x128>)
    bbf0:	4798      	blx	r3
    bbf2:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    bbf4:	687b      	ldr	r3, [r7, #4]
    bbf6:	885b      	ldrh	r3, [r3, #2]
    bbf8:	b29b      	uxth	r3, r3
    bbfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
    bbfe:	2b00      	cmp	r3, #0
    bc00:	d1d4      	bne.n	bbac <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    bc02:	697b      	ldr	r3, [r7, #20]
}
    bc04:	4618      	mov	r0, r3
    bc06:	3718      	adds	r7, #24
    bc08:	46bd      	mov	sp, r7
    bc0a:	bd80      	pop	{r7, pc}
    bc0c:	00021bb8 	.word	0x00021bb8
    bc10:	00007e21 	.word	0x00007e21
    bc14:	0000ae05 	.word	0x0000ae05
    bc18:	0000b9dd 	.word	0x0000b9dd
    bc1c:	0000b981 	.word	0x0000b981
    bc20:	0000b219 	.word	0x0000b219
    bc24:	0000b235 	.word	0x0000b235

0000bc28 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    bc28:	b580      	push	{r7, lr}
    bc2a:	b084      	sub	sp, #16
    bc2c:	af00      	add	r7, sp, #0
    bc2e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    bc30:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bc34:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    bc36:	2304      	movs	r3, #4
    bc38:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    bc3a:	687b      	ldr	r3, [r7, #4]
    bc3c:	2b00      	cmp	r3, #0
    bc3e:	bf14      	ite	ne
    bc40:	2301      	movne	r3, #1
    bc42:	2300      	moveq	r3, #0
    bc44:	b2db      	uxtb	r3, r3
    bc46:	f240 6235 	movw	r2, #1589	; 0x635
    bc4a:	4915      	ldr	r1, [pc, #84]	; (bca0 <_i2c_m_enable_implementation+0x78>)
    bc4c:	4618      	mov	r0, r3
    bc4e:	4b15      	ldr	r3, [pc, #84]	; (bca4 <_i2c_m_enable_implementation+0x7c>)
    bc50:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    bc52:	6878      	ldr	r0, [r7, #4]
    bc54:	4b14      	ldr	r3, [pc, #80]	; (bca8 <_i2c_m_enable_implementation+0x80>)
    bc56:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    bc58:	e016      	b.n	bc88 <_i2c_m_enable_implementation+0x60>
		timeout--;
    bc5a:	68fb      	ldr	r3, [r7, #12]
    bc5c:	3b01      	subs	r3, #1
    bc5e:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    bc60:	68fb      	ldr	r3, [r7, #12]
    bc62:	2b00      	cmp	r3, #0
    bc64:	dc10      	bgt.n	bc88 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    bc66:	68bb      	ldr	r3, [r7, #8]
    bc68:	3b01      	subs	r3, #1
    bc6a:	60bb      	str	r3, [r7, #8]
    bc6c:	68bb      	ldr	r3, [r7, #8]
    bc6e:	2b00      	cmp	r3, #0
    bc70:	d007      	beq.n	bc82 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    bc72:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bc76:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    bc78:	2110      	movs	r1, #16
    bc7a:	6878      	ldr	r0, [r7, #4]
    bc7c:	4b0b      	ldr	r3, [pc, #44]	; (bcac <_i2c_m_enable_implementation+0x84>)
    bc7e:	4798      	blx	r3
    bc80:	e002      	b.n	bc88 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    bc82:	f06f 0305 	mvn.w	r3, #5
    bc86:	e006      	b.n	bc96 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    bc88:	6878      	ldr	r0, [r7, #4]
    bc8a:	4b09      	ldr	r3, [pc, #36]	; (bcb0 <_i2c_m_enable_implementation+0x88>)
    bc8c:	4798      	blx	r3
    bc8e:	4603      	mov	r3, r0
    bc90:	2b01      	cmp	r3, #1
    bc92:	d1e2      	bne.n	bc5a <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    bc94:	2300      	movs	r3, #0
}
    bc96:	4618      	mov	r0, r3
    bc98:	3710      	adds	r7, #16
    bc9a:	46bd      	mov	sp, r7
    bc9c:	bd80      	pop	{r7, pc}
    bc9e:	bf00      	nop
    bca0:	00021bb8 	.word	0x00021bb8
    bca4:	00007e21 	.word	0x00007e21
    bca8:	0000ac55 	.word	0x0000ac55
    bcac:	0000b101 	.word	0x0000b101
    bcb0:	0000b0b1 	.word	0x0000b0b1

0000bcb4 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    bcb4:	b580      	push	{r7, lr}
    bcb6:	b084      	sub	sp, #16
    bcb8:	af00      	add	r7, sp, #0
    bcba:	6078      	str	r0, [r7, #4]
    bcbc:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    bcbe:	6838      	ldr	r0, [r7, #0]
    bcc0:	4b42      	ldr	r3, [pc, #264]	; (bdcc <_i2c_m_sync_init_impl+0x118>)
    bcc2:	4798      	blx	r3
    bcc4:	4603      	mov	r3, r0
    bcc6:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    bcc8:	2101      	movs	r1, #1
    bcca:	6838      	ldr	r0, [r7, #0]
    bccc:	4b40      	ldr	r3, [pc, #256]	; (bdd0 <_i2c_m_sync_init_impl+0x11c>)
    bcce:	4798      	blx	r3
    bcd0:	4603      	mov	r3, r0
    bcd2:	f083 0301 	eor.w	r3, r3, #1
    bcd6:	b2db      	uxtb	r3, r3
    bcd8:	2b00      	cmp	r3, #0
    bcda:	d020      	beq.n	bd1e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    bcdc:	7bfa      	ldrb	r2, [r7, #15]
    bcde:	493d      	ldr	r1, [pc, #244]	; (bdd4 <_i2c_m_sync_init_impl+0x120>)
    bce0:	4613      	mov	r3, r2
    bce2:	005b      	lsls	r3, r3, #1
    bce4:	4413      	add	r3, r2
    bce6:	00db      	lsls	r3, r3, #3
    bce8:	440b      	add	r3, r1
    bcea:	3304      	adds	r3, #4
    bcec:	681b      	ldr	r3, [r3, #0]
    bcee:	f003 031c 	and.w	r3, r3, #28
    bcf2:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    bcf4:	2102      	movs	r1, #2
    bcf6:	6838      	ldr	r0, [r7, #0]
    bcf8:	4b37      	ldr	r3, [pc, #220]	; (bdd8 <_i2c_m_sync_init_impl+0x124>)
    bcfa:	4798      	blx	r3
    bcfc:	4603      	mov	r3, r0
    bcfe:	2b00      	cmp	r3, #0
    bd00:	d006      	beq.n	bd10 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    bd02:	6838      	ldr	r0, [r7, #0]
    bd04:	4b35      	ldr	r3, [pc, #212]	; (bddc <_i2c_m_sync_init_impl+0x128>)
    bd06:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    bd08:	2102      	movs	r1, #2
    bd0a:	6838      	ldr	r0, [r7, #0]
    bd0c:	4b34      	ldr	r3, [pc, #208]	; (bde0 <_i2c_m_sync_init_impl+0x12c>)
    bd0e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    bd10:	68bb      	ldr	r3, [r7, #8]
    bd12:	f043 0301 	orr.w	r3, r3, #1
    bd16:	4619      	mov	r1, r3
    bd18:	6838      	ldr	r0, [r7, #0]
    bd1a:	4b32      	ldr	r3, [pc, #200]	; (bde4 <_i2c_m_sync_init_impl+0x130>)
    bd1c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    bd1e:	2101      	movs	r1, #1
    bd20:	6838      	ldr	r0, [r7, #0]
    bd22:	4b2f      	ldr	r3, [pc, #188]	; (bde0 <_i2c_m_sync_init_impl+0x12c>)
    bd24:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    bd26:	7bfa      	ldrb	r2, [r7, #15]
    bd28:	492a      	ldr	r1, [pc, #168]	; (bdd4 <_i2c_m_sync_init_impl+0x120>)
    bd2a:	4613      	mov	r3, r2
    bd2c:	005b      	lsls	r3, r3, #1
    bd2e:	4413      	add	r3, r2
    bd30:	00db      	lsls	r3, r3, #3
    bd32:	440b      	add	r3, r1
    bd34:	3304      	adds	r3, #4
    bd36:	681b      	ldr	r3, [r3, #0]
    bd38:	4619      	mov	r1, r3
    bd3a:	6838      	ldr	r0, [r7, #0]
    bd3c:	4b29      	ldr	r3, [pc, #164]	; (bde4 <_i2c_m_sync_init_impl+0x130>)
    bd3e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    bd40:	7bfa      	ldrb	r2, [r7, #15]
    bd42:	4924      	ldr	r1, [pc, #144]	; (bdd4 <_i2c_m_sync_init_impl+0x120>)
    bd44:	4613      	mov	r3, r2
    bd46:	005b      	lsls	r3, r3, #1
    bd48:	4413      	add	r3, r2
    bd4a:	00db      	lsls	r3, r3, #3
    bd4c:	440b      	add	r3, r1
    bd4e:	3308      	adds	r3, #8
    bd50:	681b      	ldr	r3, [r3, #0]
    bd52:	4619      	mov	r1, r3
    bd54:	6838      	ldr	r0, [r7, #0]
    bd56:	4b24      	ldr	r3, [pc, #144]	; (bde8 <_i2c_m_sync_init_impl+0x134>)
    bd58:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    bd5a:	7bfa      	ldrb	r2, [r7, #15]
    bd5c:	491d      	ldr	r1, [pc, #116]	; (bdd4 <_i2c_m_sync_init_impl+0x120>)
    bd5e:	4613      	mov	r3, r2
    bd60:	005b      	lsls	r3, r3, #1
    bd62:	4413      	add	r3, r2
    bd64:	00db      	lsls	r3, r3, #3
    bd66:	440b      	add	r3, r1
    bd68:	330c      	adds	r3, #12
    bd6a:	681b      	ldr	r3, [r3, #0]
    bd6c:	4619      	mov	r1, r3
    bd6e:	6838      	ldr	r0, [r7, #0]
    bd70:	4b1e      	ldr	r3, [pc, #120]	; (bdec <_i2c_m_sync_init_impl+0x138>)
    bd72:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    bd74:	7bfa      	ldrb	r2, [r7, #15]
    bd76:	4917      	ldr	r1, [pc, #92]	; (bdd4 <_i2c_m_sync_init_impl+0x120>)
    bd78:	4613      	mov	r3, r2
    bd7a:	005b      	lsls	r3, r3, #1
    bd7c:	4413      	add	r3, r2
    bd7e:	00db      	lsls	r3, r3, #3
    bd80:	440b      	add	r3, r1
    bd82:	3304      	adds	r3, #4
    bd84:	681b      	ldr	r3, [r3, #0]
    bd86:	0e1b      	lsrs	r3, r3, #24
    bd88:	b29b      	uxth	r3, r3
    bd8a:	f003 0303 	and.w	r3, r3, #3
    bd8e:	b29a      	uxth	r2, r3
    bd90:	687b      	ldr	r3, [r7, #4]
    bd92:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    bd94:	687b      	ldr	r3, [r7, #4]
    bd96:	899b      	ldrh	r3, [r3, #12]
    bd98:	2b01      	cmp	r3, #1
    bd9a:	bf8c      	ite	hi
    bd9c:	2301      	movhi	r3, #1
    bd9e:	2300      	movls	r3, #0
    bda0:	b2db      	uxtb	r3, r3
    bda2:	4619      	mov	r1, r3
    bda4:	6838      	ldr	r0, [r7, #0]
    bda6:	4b12      	ldr	r3, [pc, #72]	; (bdf0 <_i2c_m_sync_init_impl+0x13c>)
    bda8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    bdaa:	7bfa      	ldrb	r2, [r7, #15]
    bdac:	4909      	ldr	r1, [pc, #36]	; (bdd4 <_i2c_m_sync_init_impl+0x120>)
    bdae:	4613      	mov	r3, r2
    bdb0:	005b      	lsls	r3, r3, #1
    bdb2:	4413      	add	r3, r2
    bdb4:	00db      	lsls	r3, r3, #3
    bdb6:	440b      	add	r3, r1
    bdb8:	3312      	adds	r3, #18
    bdba:	881a      	ldrh	r2, [r3, #0]
    bdbc:	687b      	ldr	r3, [r7, #4]
    bdbe:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    bdc0:	2300      	movs	r3, #0
}
    bdc2:	4618      	mov	r0, r3
    bdc4:	3710      	adds	r7, #16
    bdc6:	46bd      	mov	sp, r7
    bdc8:	bd80      	pop	{r7, pc}
    bdca:	bf00      	nop
    bdcc:	0000b1b1 	.word	0x0000b1b1
    bdd0:	0000aa7d 	.word	0x0000aa7d
    bdd4:	2000007c 	.word	0x2000007c
    bdd8:	0000acd5 	.word	0x0000acd5
    bddc:	0000ac7d 	.word	0x0000ac7d
    bde0:	0000aa59 	.word	0x0000aa59
    bde4:	0000ad05 	.word	0x0000ad05
    bde8:	0000aed5 	.word	0x0000aed5
    bdec:	0000af1d 	.word	0x0000af1d
    bdf0:	0000af59 	.word	0x0000af59

0000bdf4 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    bdf4:	b580      	push	{r7, lr}
    bdf6:	b082      	sub	sp, #8
    bdf8:	af00      	add	r7, sp, #0
    bdfa:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    bdfc:	2101      	movs	r1, #1
    bdfe:	6878      	ldr	r0, [r7, #4]
    be00:	4b07      	ldr	r3, [pc, #28]	; (be20 <_spi_sync_enable+0x2c>)
    be02:	4798      	blx	r3
    be04:	4603      	mov	r3, r0
    be06:	2b00      	cmp	r3, #0
    be08:	d002      	beq.n	be10 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    be0a:	f06f 0303 	mvn.w	r3, #3
    be0e:	e003      	b.n	be18 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    be10:	6878      	ldr	r0, [r7, #4]
    be12:	4b04      	ldr	r3, [pc, #16]	; (be24 <_spi_sync_enable+0x30>)
    be14:	4798      	blx	r3

	return ERR_NONE;
    be16:	2300      	movs	r3, #0
}
    be18:	4618      	mov	r0, r3
    be1a:	3708      	adds	r7, #8
    be1c:	46bd      	mov	sp, r7
    be1e:	bd80      	pop	{r7, pc}
    be20:	0000aac9 	.word	0x0000aac9
    be24:	0000ad29 	.word	0x0000ad29

0000be28 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    be28:	b580      	push	{r7, lr}
    be2a:	b082      	sub	sp, #8
    be2c:	af00      	add	r7, sp, #0
    be2e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    be30:	2101      	movs	r1, #1
    be32:	6878      	ldr	r0, [r7, #4]
    be34:	4b07      	ldr	r3, [pc, #28]	; (be54 <_spi_sync_disable+0x2c>)
    be36:	4798      	blx	r3
    be38:	4603      	mov	r3, r0
    be3a:	2b00      	cmp	r3, #0
    be3c:	d002      	beq.n	be44 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    be3e:	f06f 0303 	mvn.w	r3, #3
    be42:	e003      	b.n	be4c <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    be44:	6878      	ldr	r0, [r7, #4]
    be46:	4b04      	ldr	r3, [pc, #16]	; (be58 <_spi_sync_disable+0x30>)
    be48:	4798      	blx	r3

	return ERR_NONE;
    be4a:	2300      	movs	r3, #0
}
    be4c:	4618      	mov	r0, r3
    be4e:	3708      	adds	r7, #8
    be50:	46bd      	mov	sp, r7
    be52:	bd80      	pop	{r7, pc}
    be54:	0000aac9 	.word	0x0000aac9
    be58:	0000ad89 	.word	0x0000ad89

0000be5c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    be5c:	b580      	push	{r7, lr}
    be5e:	b082      	sub	sp, #8
    be60:	af00      	add	r7, sp, #0
    be62:	6078      	str	r0, [r7, #4]
    be64:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    be66:	687b      	ldr	r3, [r7, #4]
    be68:	2b00      	cmp	r3, #0
    be6a:	d004      	beq.n	be76 <_spi_load_regs_master+0x1a>
    be6c:	683b      	ldr	r3, [r7, #0]
    be6e:	2b00      	cmp	r3, #0
    be70:	d001      	beq.n	be76 <_spi_load_regs_master+0x1a>
    be72:	2301      	movs	r3, #1
    be74:	e000      	b.n	be78 <_spi_load_regs_master+0x1c>
    be76:	2300      	movs	r3, #0
    be78:	f003 0301 	and.w	r3, r3, #1
    be7c:	b2db      	uxtb	r3, r3
    be7e:	f640 1239 	movw	r2, #2361	; 0x939
    be82:	4915      	ldr	r1, [pc, #84]	; (bed8 <_spi_load_regs_master+0x7c>)
    be84:	4618      	mov	r0, r3
    be86:	4b15      	ldr	r3, [pc, #84]	; (bedc <_spi_load_regs_master+0x80>)
    be88:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    be8a:	683b      	ldr	r3, [r7, #0]
    be8c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    be8e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    be92:	f023 0301 	bic.w	r3, r3, #1
    be96:	4619      	mov	r1, r3
    be98:	6878      	ldr	r0, [r7, #4]
    be9a:	4b11      	ldr	r3, [pc, #68]	; (bee0 <_spi_load_regs_master+0x84>)
    be9c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    be9e:	683b      	ldr	r3, [r7, #0]
    bea0:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    bea2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    bea6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    beaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    beae:	4619      	mov	r1, r3
    beb0:	6878      	ldr	r0, [r7, #4]
    beb2:	4b0c      	ldr	r3, [pc, #48]	; (bee4 <_spi_load_regs_master+0x88>)
    beb4:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    beb6:	683b      	ldr	r3, [r7, #0]
    beb8:	7b1b      	ldrb	r3, [r3, #12]
    beba:	4619      	mov	r1, r3
    bebc:	6878      	ldr	r0, [r7, #4]
    bebe:	4b0a      	ldr	r3, [pc, #40]	; (bee8 <_spi_load_regs_master+0x8c>)
    bec0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    bec2:	683b      	ldr	r3, [r7, #0]
    bec4:	7b5b      	ldrb	r3, [r3, #13]
    bec6:	4619      	mov	r1, r3
    bec8:	6878      	ldr	r0, [r7, #4]
    beca:	4b08      	ldr	r3, [pc, #32]	; (beec <_spi_load_regs_master+0x90>)
    becc:	4798      	blx	r3
}
    bece:	bf00      	nop
    bed0:	3708      	adds	r7, #8
    bed2:	46bd      	mov	sp, r7
    bed4:	bd80      	pop	{r7, pc}
    bed6:	bf00      	nop
    bed8:	00021bb8 	.word	0x00021bb8
    bedc:	00007e21 	.word	0x00007e21
    bee0:	0000ade1 	.word	0x0000ade1
    bee4:	0000aef9 	.word	0x0000aef9
    bee8:	0000af39 	.word	0x0000af39
    beec:	0000b071 	.word	0x0000b071

0000bef0 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    bef0:	b580      	push	{r7, lr}
    bef2:	b082      	sub	sp, #8
    bef4:	af00      	add	r7, sp, #0
    bef6:	6078      	str	r0, [r7, #4]
    bef8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    befa:	687b      	ldr	r3, [r7, #4]
    befc:	2b00      	cmp	r3, #0
    befe:	d004      	beq.n	bf0a <_spi_load_regs_slave+0x1a>
    bf00:	683b      	ldr	r3, [r7, #0]
    bf02:	2b00      	cmp	r3, #0
    bf04:	d001      	beq.n	bf0a <_spi_load_regs_slave+0x1a>
    bf06:	2301      	movs	r3, #1
    bf08:	e000      	b.n	bf0c <_spi_load_regs_slave+0x1c>
    bf0a:	2300      	movs	r3, #0
    bf0c:	f003 0301 	and.w	r3, r3, #1
    bf10:	b2db      	uxtb	r3, r3
    bf12:	f640 124d 	movw	r2, #2381	; 0x94d
    bf16:	491a      	ldr	r1, [pc, #104]	; (bf80 <_spi_load_regs_slave+0x90>)
    bf18:	4618      	mov	r0, r3
    bf1a:	4b1a      	ldr	r3, [pc, #104]	; (bf84 <_spi_load_regs_slave+0x94>)
    bf1c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    bf1e:	683b      	ldr	r3, [r7, #0]
    bf20:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    bf22:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    bf26:	f023 0301 	bic.w	r3, r3, #1
    bf2a:	4619      	mov	r1, r3
    bf2c:	6878      	ldr	r0, [r7, #4]
    bf2e:	4b16      	ldr	r3, [pc, #88]	; (bf88 <_spi_load_regs_slave+0x98>)
    bf30:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    bf32:	683b      	ldr	r3, [r7, #0]
    bf34:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    bf36:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    bf3a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    bf3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bf42:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    bf46:	4619      	mov	r1, r3
    bf48:	6878      	ldr	r0, [r7, #4]
    bf4a:	4b10      	ldr	r3, [pc, #64]	; (bf8c <_spi_load_regs_slave+0x9c>)
    bf4c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    bf4e:	683b      	ldr	r3, [r7, #0]
    bf50:	689b      	ldr	r3, [r3, #8]
    bf52:	4619      	mov	r1, r3
    bf54:	6878      	ldr	r0, [r7, #4]
    bf56:	4b0e      	ldr	r3, [pc, #56]	; (bf90 <_spi_load_regs_slave+0xa0>)
    bf58:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    bf5a:	683b      	ldr	r3, [r7, #0]
    bf5c:	7b5b      	ldrb	r3, [r3, #13]
    bf5e:	4619      	mov	r1, r3
    bf60:	6878      	ldr	r0, [r7, #4]
    bf62:	4b0c      	ldr	r3, [pc, #48]	; (bf94 <_spi_load_regs_slave+0xa4>)
    bf64:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    bf66:	bf00      	nop
    bf68:	f04f 31ff 	mov.w	r1, #4294967295
    bf6c:	6878      	ldr	r0, [r7, #4]
    bf6e:	4b0a      	ldr	r3, [pc, #40]	; (bf98 <_spi_load_regs_slave+0xa8>)
    bf70:	4798      	blx	r3
    bf72:	4603      	mov	r3, r0
    bf74:	2b00      	cmp	r3, #0
    bf76:	d1f7      	bne.n	bf68 <_spi_load_regs_slave+0x78>
		;
}
    bf78:	bf00      	nop
    bf7a:	3708      	adds	r7, #8
    bf7c:	46bd      	mov	sp, r7
    bf7e:	bd80      	pop	{r7, pc}
    bf80:	00021bb8 	.word	0x00021bb8
    bf84:	00007e21 	.word	0x00007e21
    bf88:	0000ade1 	.word	0x0000ade1
    bf8c:	0000aef9 	.word	0x0000aef9
    bf90:	0000afdd 	.word	0x0000afdd
    bf94:	0000b071 	.word	0x0000b071
    bf98:	0000aac9 	.word	0x0000aac9

0000bf9c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    bf9c:	b580      	push	{r7, lr}
    bf9e:	b084      	sub	sp, #16
    bfa0:	af00      	add	r7, sp, #0
    bfa2:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    bfa4:	687b      	ldr	r3, [r7, #4]
    bfa6:	4618      	mov	r0, r3
    bfa8:	4b11      	ldr	r3, [pc, #68]	; (bff0 <_spi_get_regs+0x54>)
    bfaa:	4798      	blx	r3
    bfac:	4603      	mov	r3, r0
    bfae:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    bfb0:	2300      	movs	r3, #0
    bfb2:	73fb      	strb	r3, [r7, #15]
    bfb4:	e014      	b.n	bfe0 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    bfb6:	7bfa      	ldrb	r2, [r7, #15]
    bfb8:	490e      	ldr	r1, [pc, #56]	; (bff4 <_spi_get_regs+0x58>)
    bfba:	4613      	mov	r3, r2
    bfbc:	011b      	lsls	r3, r3, #4
    bfbe:	4413      	add	r3, r2
    bfc0:	440b      	add	r3, r1
    bfc2:	3310      	adds	r3, #16
    bfc4:	781b      	ldrb	r3, [r3, #0]
    bfc6:	7bba      	ldrb	r2, [r7, #14]
    bfc8:	429a      	cmp	r2, r3
    bfca:	d106      	bne.n	bfda <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    bfcc:	7bfa      	ldrb	r2, [r7, #15]
    bfce:	4613      	mov	r3, r2
    bfd0:	011b      	lsls	r3, r3, #4
    bfd2:	4413      	add	r3, r2
    bfd4:	4a07      	ldr	r2, [pc, #28]	; (bff4 <_spi_get_regs+0x58>)
    bfd6:	4413      	add	r3, r2
    bfd8:	e006      	b.n	bfe8 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    bfda:	7bfb      	ldrb	r3, [r7, #15]
    bfdc:	3301      	adds	r3, #1
    bfde:	73fb      	strb	r3, [r7, #15]
    bfe0:	7bfb      	ldrb	r3, [r7, #15]
    bfe2:	2b02      	cmp	r3, #2
    bfe4:	d9e7      	bls.n	bfb6 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    bfe6:	2300      	movs	r3, #0
}
    bfe8:	4618      	mov	r0, r3
    bfea:	3710      	adds	r7, #16
    bfec:	46bd      	mov	sp, r7
    bfee:	bd80      	pop	{r7, pc}
    bff0:	0000b129 	.word	0x0000b129
    bff4:	00021bf4 	.word	0x00021bf4

0000bff8 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    bff8:	b580      	push	{r7, lr}
    bffa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    bffc:	4b03      	ldr	r3, [pc, #12]	; (c00c <SERCOM7_0_Handler+0x14>)
    bffe:	681b      	ldr	r3, [r3, #0]
    c000:	4618      	mov	r0, r3
    c002:	4b03      	ldr	r3, [pc, #12]	; (c010 <SERCOM7_0_Handler+0x18>)
    c004:	4798      	blx	r3
}
    c006:	bf00      	nop
    c008:	bd80      	pop	{r7, pc}
    c00a:	bf00      	nop
    c00c:	20008710 	.word	0x20008710
    c010:	0000b465 	.word	0x0000b465

0000c014 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    c014:	b580      	push	{r7, lr}
    c016:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c018:	4b03      	ldr	r3, [pc, #12]	; (c028 <SERCOM7_1_Handler+0x14>)
    c01a:	681b      	ldr	r3, [r3, #0]
    c01c:	4618      	mov	r0, r3
    c01e:	4b03      	ldr	r3, [pc, #12]	; (c02c <SERCOM7_1_Handler+0x18>)
    c020:	4798      	blx	r3
}
    c022:	bf00      	nop
    c024:	bd80      	pop	{r7, pc}
    c026:	bf00      	nop
    c028:	20008710 	.word	0x20008710
    c02c:	0000b465 	.word	0x0000b465

0000c030 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    c030:	b580      	push	{r7, lr}
    c032:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c034:	4b03      	ldr	r3, [pc, #12]	; (c044 <SERCOM7_2_Handler+0x14>)
    c036:	681b      	ldr	r3, [r3, #0]
    c038:	4618      	mov	r0, r3
    c03a:	4b03      	ldr	r3, [pc, #12]	; (c048 <SERCOM7_2_Handler+0x18>)
    c03c:	4798      	blx	r3
}
    c03e:	bf00      	nop
    c040:	bd80      	pop	{r7, pc}
    c042:	bf00      	nop
    c044:	20008710 	.word	0x20008710
    c048:	0000b465 	.word	0x0000b465

0000c04c <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    c04c:	b580      	push	{r7, lr}
    c04e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c050:	4b03      	ldr	r3, [pc, #12]	; (c060 <SERCOM7_3_Handler+0x14>)
    c052:	681b      	ldr	r3, [r3, #0]
    c054:	4618      	mov	r0, r3
    c056:	4b03      	ldr	r3, [pc, #12]	; (c064 <SERCOM7_3_Handler+0x18>)
    c058:	4798      	blx	r3
}
    c05a:	bf00      	nop
    c05c:	bd80      	pop	{r7, pc}
    c05e:	bf00      	nop
    c060:	20008710 	.word	0x20008710
    c064:	0000b465 	.word	0x0000b465

0000c068 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    c068:	b580      	push	{r7, lr}
    c06a:	b084      	sub	sp, #16
    c06c:	af00      	add	r7, sp, #0
    c06e:	6078      	str	r0, [r7, #4]
    c070:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    c072:	683b      	ldr	r3, [r7, #0]
    c074:	4618      	mov	r0, r3
    c076:	4b35      	ldr	r3, [pc, #212]	; (c14c <_spi_m_sync_init+0xe4>)
    c078:	4798      	blx	r3
    c07a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    c07c:	687b      	ldr	r3, [r7, #4]
    c07e:	2b00      	cmp	r3, #0
    c080:	d004      	beq.n	c08c <_spi_m_sync_init+0x24>
    c082:	683b      	ldr	r3, [r7, #0]
    c084:	2b00      	cmp	r3, #0
    c086:	d001      	beq.n	c08c <_spi_m_sync_init+0x24>
    c088:	2301      	movs	r3, #1
    c08a:	e000      	b.n	c08e <_spi_m_sync_init+0x26>
    c08c:	2300      	movs	r3, #0
    c08e:	f003 0301 	and.w	r3, r3, #1
    c092:	b2db      	uxtb	r3, r3
    c094:	f640 128c 	movw	r2, #2444	; 0x98c
    c098:	492d      	ldr	r1, [pc, #180]	; (c150 <_spi_m_sync_init+0xe8>)
    c09a:	4618      	mov	r0, r3
    c09c:	4b2d      	ldr	r3, [pc, #180]	; (c154 <_spi_m_sync_init+0xec>)
    c09e:	4798      	blx	r3

	if (regs == NULL) {
    c0a0:	68fb      	ldr	r3, [r7, #12]
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	d102      	bne.n	c0ac <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    c0a6:	f06f 030c 	mvn.w	r3, #12
    c0aa:	e04a      	b.n	c142 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    c0ac:	2101      	movs	r1, #1
    c0ae:	6838      	ldr	r0, [r7, #0]
    c0b0:	4b29      	ldr	r3, [pc, #164]	; (c158 <_spi_m_sync_init+0xf0>)
    c0b2:	4798      	blx	r3
    c0b4:	4603      	mov	r3, r0
    c0b6:	f083 0301 	eor.w	r3, r3, #1
    c0ba:	b2db      	uxtb	r3, r3
    c0bc:	2b00      	cmp	r3, #0
    c0be:	d019      	beq.n	c0f4 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    c0c0:	68fb      	ldr	r3, [r7, #12]
    c0c2:	681b      	ldr	r3, [r3, #0]
    c0c4:	f003 031c 	and.w	r3, r3, #28
    c0c8:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    c0ca:	2102      	movs	r1, #2
    c0cc:	6838      	ldr	r0, [r7, #0]
    c0ce:	4b23      	ldr	r3, [pc, #140]	; (c15c <_spi_m_sync_init+0xf4>)
    c0d0:	4798      	blx	r3
    c0d2:	4603      	mov	r3, r0
    c0d4:	2b00      	cmp	r3, #0
    c0d6:	d006      	beq.n	c0e6 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    c0d8:	6838      	ldr	r0, [r7, #0]
    c0da:	4b21      	ldr	r3, [pc, #132]	; (c160 <_spi_m_sync_init+0xf8>)
    c0dc:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    c0de:	2102      	movs	r1, #2
    c0e0:	6838      	ldr	r0, [r7, #0]
    c0e2:	4b20      	ldr	r3, [pc, #128]	; (c164 <_spi_m_sync_init+0xfc>)
    c0e4:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    c0e6:	68bb      	ldr	r3, [r7, #8]
    c0e8:	f043 0301 	orr.w	r3, r3, #1
    c0ec:	4619      	mov	r1, r3
    c0ee:	6838      	ldr	r0, [r7, #0]
    c0f0:	4b1d      	ldr	r3, [pc, #116]	; (c168 <_spi_m_sync_init+0x100>)
    c0f2:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    c0f4:	2101      	movs	r1, #1
    c0f6:	6838      	ldr	r0, [r7, #0]
    c0f8:	4b1a      	ldr	r3, [pc, #104]	; (c164 <_spi_m_sync_init+0xfc>)
    c0fa:	4798      	blx	r3

	dev->prvt = hw;
    c0fc:	687b      	ldr	r3, [r7, #4]
    c0fe:	683a      	ldr	r2, [r7, #0]
    c100:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    c102:	68fb      	ldr	r3, [r7, #12]
    c104:	681b      	ldr	r3, [r3, #0]
    c106:	f003 031c 	and.w	r3, r3, #28
    c10a:	2b08      	cmp	r3, #8
    c10c:	d104      	bne.n	c118 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    c10e:	68f9      	ldr	r1, [r7, #12]
    c110:	6838      	ldr	r0, [r7, #0]
    c112:	4b16      	ldr	r3, [pc, #88]	; (c16c <_spi_m_sync_init+0x104>)
    c114:	4798      	blx	r3
    c116:	e003      	b.n	c120 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    c118:	68f9      	ldr	r1, [r7, #12]
    c11a:	6838      	ldr	r0, [r7, #0]
    c11c:	4b14      	ldr	r3, [pc, #80]	; (c170 <_spi_m_sync_init+0x108>)
    c11e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    c120:	68fb      	ldr	r3, [r7, #12]
    c122:	685b      	ldr	r3, [r3, #4]
    c124:	f003 0307 	and.w	r3, r3, #7
    c128:	2b00      	cmp	r3, #0
    c12a:	d101      	bne.n	c130 <_spi_m_sync_init+0xc8>
    c12c:	2201      	movs	r2, #1
    c12e:	e000      	b.n	c132 <_spi_m_sync_init+0xca>
    c130:	2202      	movs	r2, #2
    c132:	687b      	ldr	r3, [r7, #4]
    c134:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    c136:	68fb      	ldr	r3, [r7, #12]
    c138:	89db      	ldrh	r3, [r3, #14]
    c13a:	b29a      	uxth	r2, r3
    c13c:	687b      	ldr	r3, [r7, #4]
    c13e:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    c140:	2300      	movs	r3, #0
}
    c142:	4618      	mov	r0, r3
    c144:	3710      	adds	r7, #16
    c146:	46bd      	mov	sp, r7
    c148:	bd80      	pop	{r7, pc}
    c14a:	bf00      	nop
    c14c:	0000bf9d 	.word	0x0000bf9d
    c150:	00021bb8 	.word	0x00021bb8
    c154:	00007e21 	.word	0x00007e21
    c158:	0000aac9 	.word	0x0000aac9
    c15c:	0000adb1 	.word	0x0000adb1
    c160:	0000ad89 	.word	0x0000ad89
    c164:	0000aaa5 	.word	0x0000aaa5
    c168:	0000ade1 	.word	0x0000ade1
    c16c:	0000bef1 	.word	0x0000bef1
    c170:	0000be5d 	.word	0x0000be5d

0000c174 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    c174:	b580      	push	{r7, lr}
    c176:	b082      	sub	sp, #8
    c178:	af00      	add	r7, sp, #0
    c17a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c17c:	687b      	ldr	r3, [r7, #4]
    c17e:	2b00      	cmp	r3, #0
    c180:	d005      	beq.n	c18e <_spi_m_sync_enable+0x1a>
    c182:	687b      	ldr	r3, [r7, #4]
    c184:	681b      	ldr	r3, [r3, #0]
    c186:	2b00      	cmp	r3, #0
    c188:	d001      	beq.n	c18e <_spi_m_sync_enable+0x1a>
    c18a:	2301      	movs	r3, #1
    c18c:	e000      	b.n	c190 <_spi_m_sync_enable+0x1c>
    c18e:	2300      	movs	r3, #0
    c190:	f003 0301 	and.w	r3, r3, #1
    c194:	b2db      	uxtb	r3, r3
    c196:	f640 12eb 	movw	r2, #2539	; 0x9eb
    c19a:	4907      	ldr	r1, [pc, #28]	; (c1b8 <_spi_m_sync_enable+0x44>)
    c19c:	4618      	mov	r0, r3
    c19e:	4b07      	ldr	r3, [pc, #28]	; (c1bc <_spi_m_sync_enable+0x48>)
    c1a0:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    c1a2:	687b      	ldr	r3, [r7, #4]
    c1a4:	681b      	ldr	r3, [r3, #0]
    c1a6:	4618      	mov	r0, r3
    c1a8:	4b05      	ldr	r3, [pc, #20]	; (c1c0 <_spi_m_sync_enable+0x4c>)
    c1aa:	4798      	blx	r3
    c1ac:	4603      	mov	r3, r0
}
    c1ae:	4618      	mov	r0, r3
    c1b0:	3708      	adds	r7, #8
    c1b2:	46bd      	mov	sp, r7
    c1b4:	bd80      	pop	{r7, pc}
    c1b6:	bf00      	nop
    c1b8:	00021bb8 	.word	0x00021bb8
    c1bc:	00007e21 	.word	0x00007e21
    c1c0:	0000bdf5 	.word	0x0000bdf5

0000c1c4 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    c1c4:	b580      	push	{r7, lr}
    c1c6:	b082      	sub	sp, #8
    c1c8:	af00      	add	r7, sp, #0
    c1ca:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c1cc:	687b      	ldr	r3, [r7, #4]
    c1ce:	2b00      	cmp	r3, #0
    c1d0:	d005      	beq.n	c1de <_spi_m_sync_disable+0x1a>
    c1d2:	687b      	ldr	r3, [r7, #4]
    c1d4:	681b      	ldr	r3, [r3, #0]
    c1d6:	2b00      	cmp	r3, #0
    c1d8:	d001      	beq.n	c1de <_spi_m_sync_disable+0x1a>
    c1da:	2301      	movs	r3, #1
    c1dc:	e000      	b.n	c1e0 <_spi_m_sync_disable+0x1c>
    c1de:	2300      	movs	r3, #0
    c1e0:	f003 0301 	and.w	r3, r3, #1
    c1e4:	b2db      	uxtb	r3, r3
    c1e6:	f640 2207 	movw	r2, #2567	; 0xa07
    c1ea:	4907      	ldr	r1, [pc, #28]	; (c208 <_spi_m_sync_disable+0x44>)
    c1ec:	4618      	mov	r0, r3
    c1ee:	4b07      	ldr	r3, [pc, #28]	; (c20c <_spi_m_sync_disable+0x48>)
    c1f0:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    c1f2:	687b      	ldr	r3, [r7, #4]
    c1f4:	681b      	ldr	r3, [r3, #0]
    c1f6:	4618      	mov	r0, r3
    c1f8:	4b05      	ldr	r3, [pc, #20]	; (c210 <_spi_m_sync_disable+0x4c>)
    c1fa:	4798      	blx	r3
    c1fc:	4603      	mov	r3, r0
}
    c1fe:	4618      	mov	r0, r3
    c200:	3708      	adds	r7, #8
    c202:	46bd      	mov	sp, r7
    c204:	bd80      	pop	{r7, pc}
    c206:	bf00      	nop
    c208:	00021bb8 	.word	0x00021bb8
    c20c:	00007e21 	.word	0x00007e21
    c210:	0000be29 	.word	0x0000be29

0000c214 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    c214:	b580      	push	{r7, lr}
    c216:	b082      	sub	sp, #8
    c218:	af00      	add	r7, sp, #0
    c21a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    c21c:	bf00      	nop
    c21e:	2103      	movs	r1, #3
    c220:	6878      	ldr	r0, [r7, #4]
    c222:	4b06      	ldr	r3, [pc, #24]	; (c23c <_spi_wait_bus_idle+0x28>)
    c224:	4798      	blx	r3
    c226:	4603      	mov	r3, r0
    c228:	2b00      	cmp	r3, #0
    c22a:	d0f8      	beq.n	c21e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    c22c:	2103      	movs	r1, #3
    c22e:	6878      	ldr	r0, [r7, #4]
    c230:	4b03      	ldr	r3, [pc, #12]	; (c240 <_spi_wait_bus_idle+0x2c>)
    c232:	4798      	blx	r3
}
    c234:	bf00      	nop
    c236:	3708      	adds	r7, #8
    c238:	46bd      	mov	sp, r7
    c23a:	bd80      	pop	{r7, pc}
    c23c:	0000ab5d 	.word	0x0000ab5d
    c240:	0000ab9f 	.word	0x0000ab9f

0000c244 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    c244:	b580      	push	{r7, lr}
    c246:	b086      	sub	sp, #24
    c248:	af00      	add	r7, sp, #0
    c24a:	60f8      	str	r0, [r7, #12]
    c24c:	60b9      	str	r1, [r7, #8]
    c24e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    c250:	68bb      	ldr	r3, [r7, #8]
    c252:	f003 0304 	and.w	r3, r3, #4
    c256:	2b00      	cmp	r3, #0
    c258:	d101      	bne.n	c25e <_spi_rx_check_and_receive+0x1a>
		return false;
    c25a:	2300      	movs	r3, #0
    c25c:	e022      	b.n	c2a4 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    c25e:	68f8      	ldr	r0, [r7, #12]
    c260:	4b12      	ldr	r3, [pc, #72]	; (c2ac <_spi_rx_check_and_receive+0x68>)
    c262:	4798      	blx	r3
    c264:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    c266:	687b      	ldr	r3, [r7, #4]
    c268:	685b      	ldr	r3, [r3, #4]
    c26a:	2b00      	cmp	r3, #0
    c26c:	d014      	beq.n	c298 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    c26e:	687b      	ldr	r3, [r7, #4]
    c270:	685b      	ldr	r3, [r3, #4]
    c272:	1c59      	adds	r1, r3, #1
    c274:	687a      	ldr	r2, [r7, #4]
    c276:	6051      	str	r1, [r2, #4]
    c278:	697a      	ldr	r2, [r7, #20]
    c27a:	b2d2      	uxtb	r2, r2
    c27c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    c27e:	687b      	ldr	r3, [r7, #4]
    c280:	7c1b      	ldrb	r3, [r3, #16]
    c282:	2b01      	cmp	r3, #1
    c284:	d908      	bls.n	c298 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    c286:	687b      	ldr	r3, [r7, #4]
    c288:	685b      	ldr	r3, [r3, #4]
    c28a:	1c59      	adds	r1, r3, #1
    c28c:	687a      	ldr	r2, [r7, #4]
    c28e:	6051      	str	r1, [r2, #4]
    c290:	697a      	ldr	r2, [r7, #20]
    c292:	0a12      	lsrs	r2, r2, #8
    c294:	b2d2      	uxtb	r2, r2
    c296:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    c298:	687b      	ldr	r3, [r7, #4]
    c29a:	68db      	ldr	r3, [r3, #12]
    c29c:	1c5a      	adds	r2, r3, #1
    c29e:	687b      	ldr	r3, [r7, #4]
    c2a0:	60da      	str	r2, [r3, #12]

	return true;
    c2a2:	2301      	movs	r3, #1
}
    c2a4:	4618      	mov	r0, r3
    c2a6:	3718      	adds	r7, #24
    c2a8:	46bd      	mov	sp, r7
    c2aa:	bd80      	pop	{r7, pc}
    c2ac:	0000b059 	.word	0x0000b059

0000c2b0 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    c2b0:	b580      	push	{r7, lr}
    c2b2:	b086      	sub	sp, #24
    c2b4:	af00      	add	r7, sp, #0
    c2b6:	60f8      	str	r0, [r7, #12]
    c2b8:	60b9      	str	r1, [r7, #8]
    c2ba:	607a      	str	r2, [r7, #4]
    c2bc:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    c2be:	68bb      	ldr	r3, [r7, #8]
    c2c0:	f003 0301 	and.w	r3, r3, #1
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d028      	beq.n	c31a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    c2c8:	687b      	ldr	r3, [r7, #4]
    c2ca:	681b      	ldr	r3, [r3, #0]
    c2cc:	2b00      	cmp	r3, #0
    c2ce:	d018      	beq.n	c302 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    c2d0:	687b      	ldr	r3, [r7, #4]
    c2d2:	681b      	ldr	r3, [r3, #0]
    c2d4:	1c59      	adds	r1, r3, #1
    c2d6:	687a      	ldr	r2, [r7, #4]
    c2d8:	6011      	str	r1, [r2, #0]
    c2da:	781b      	ldrb	r3, [r3, #0]
    c2dc:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    c2de:	687b      	ldr	r3, [r7, #4]
    c2e0:	7c1b      	ldrb	r3, [r3, #16]
    c2e2:	2b01      	cmp	r3, #1
    c2e4:	d90f      	bls.n	c306 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    c2e6:	687b      	ldr	r3, [r7, #4]
    c2e8:	681b      	ldr	r3, [r3, #0]
    c2ea:	781b      	ldrb	r3, [r3, #0]
    c2ec:	021b      	lsls	r3, r3, #8
    c2ee:	461a      	mov	r2, r3
    c2f0:	697b      	ldr	r3, [r7, #20]
    c2f2:	4313      	orrs	r3, r2
    c2f4:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    c2f6:	687b      	ldr	r3, [r7, #4]
    c2f8:	681b      	ldr	r3, [r3, #0]
    c2fa:	1c5a      	adds	r2, r3, #1
    c2fc:	687b      	ldr	r3, [r7, #4]
    c2fe:	601a      	str	r2, [r3, #0]
    c300:	e001      	b.n	c306 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    c302:	887b      	ldrh	r3, [r7, #2]
    c304:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    c306:	687b      	ldr	r3, [r7, #4]
    c308:	689b      	ldr	r3, [r3, #8]
    c30a:	1c5a      	adds	r2, r3, #1
    c30c:	687b      	ldr	r3, [r7, #4]
    c30e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    c310:	6979      	ldr	r1, [r7, #20]
    c312:	68f8      	ldr	r0, [r7, #12]
    c314:	4b03      	ldr	r3, [pc, #12]	; (c324 <_spi_tx_check_and_send+0x74>)
    c316:	4798      	blx	r3
    c318:	e000      	b.n	c31c <_spi_tx_check_and_send+0x6c>
		return;
    c31a:	bf00      	nop
}
    c31c:	3718      	adds	r7, #24
    c31e:	46bd      	mov	sp, r7
    c320:	bd80      	pop	{r7, pc}
    c322:	bf00      	nop
    c324:	0000b03d 	.word	0x0000b03d

0000c328 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    c328:	b580      	push	{r7, lr}
    c32a:	b082      	sub	sp, #8
    c32c:	af00      	add	r7, sp, #0
    c32e:	6078      	str	r0, [r7, #4]
    c330:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    c332:	687b      	ldr	r3, [r7, #4]
    c334:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c338:	2b00      	cmp	r3, #0
    c33a:	d00b      	beq.n	c354 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    c33c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c340:	6838      	ldr	r0, [r7, #0]
    c342:	4b07      	ldr	r3, [pc, #28]	; (c360 <_spi_err_check+0x38>)
    c344:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    c346:	2180      	movs	r1, #128	; 0x80
    c348:	6838      	ldr	r0, [r7, #0]
    c34a:	4b06      	ldr	r3, [pc, #24]	; (c364 <_spi_err_check+0x3c>)
    c34c:	4798      	blx	r3
		return ERR_OVERFLOW;
    c34e:	f06f 0312 	mvn.w	r3, #18
    c352:	e000      	b.n	c356 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    c354:	2300      	movs	r3, #0
}
    c356:	4618      	mov	r0, r3
    c358:	3708      	adds	r7, #8
    c35a:	46bd      	mov	sp, r7
    c35c:	bd80      	pop	{r7, pc}
    c35e:	bf00      	nop
    c360:	0000b091 	.word	0x0000b091
    c364:	0000ab9f 	.word	0x0000ab9f

0000c368 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    c368:	b590      	push	{r4, r7, lr}
    c36a:	b08b      	sub	sp, #44	; 0x2c
    c36c:	af00      	add	r7, sp, #0
    c36e:	6078      	str	r0, [r7, #4]
    c370:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    c372:	687b      	ldr	r3, [r7, #4]
    c374:	681b      	ldr	r3, [r3, #0]
    c376:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    c378:	2300      	movs	r3, #0
    c37a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    c37c:	683b      	ldr	r3, [r7, #0]
    c37e:	681b      	ldr	r3, [r3, #0]
    c380:	60bb      	str	r3, [r7, #8]
    c382:	683b      	ldr	r3, [r7, #0]
    c384:	685b      	ldr	r3, [r3, #4]
    c386:	60fb      	str	r3, [r7, #12]
    c388:	2300      	movs	r3, #0
    c38a:	613b      	str	r3, [r7, #16]
    c38c:	2300      	movs	r3, #0
    c38e:	617b      	str	r3, [r7, #20]
    c390:	687b      	ldr	r3, [r7, #4]
    c392:	791b      	ldrb	r3, [r3, #4]
    c394:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    c396:	687b      	ldr	r3, [r7, #4]
    c398:	2b00      	cmp	r3, #0
    c39a:	d004      	beq.n	c3a6 <_spi_m_sync_trans+0x3e>
    c39c:	6a3b      	ldr	r3, [r7, #32]
    c39e:	2b00      	cmp	r3, #0
    c3a0:	d001      	beq.n	c3a6 <_spi_m_sync_trans+0x3e>
    c3a2:	2301      	movs	r3, #1
    c3a4:	e000      	b.n	c3a8 <_spi_m_sync_trans+0x40>
    c3a6:	2300      	movs	r3, #0
    c3a8:	f003 0301 	and.w	r3, r3, #1
    c3ac:	b2db      	uxtb	r3, r3
    c3ae:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    c3b2:	492b      	ldr	r1, [pc, #172]	; (c460 <_spi_m_sync_trans+0xf8>)
    c3b4:	4618      	mov	r0, r3
    c3b6:	4b2b      	ldr	r3, [pc, #172]	; (c464 <_spi_m_sync_trans+0xfc>)
    c3b8:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    c3ba:	2107      	movs	r1, #7
    c3bc:	6a38      	ldr	r0, [r7, #32]
    c3be:	4b2a      	ldr	r3, [pc, #168]	; (c468 <_spi_m_sync_trans+0x100>)
    c3c0:	4798      	blx	r3
    c3c2:	4603      	mov	r3, r0
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	d002      	beq.n	c3ce <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    c3c8:	f06f 0303 	mvn.w	r3, #3
    c3cc:	e043      	b.n	c456 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    c3ce:	6a38      	ldr	r0, [r7, #32]
    c3d0:	4b26      	ldr	r3, [pc, #152]	; (c46c <_spi_m_sync_trans+0x104>)
    c3d2:	4798      	blx	r3
    c3d4:	4603      	mov	r3, r0
    c3d6:	f083 0301 	eor.w	r3, r3, #1
    c3da:	b2db      	uxtb	r3, r3
    c3dc:	2b00      	cmp	r3, #0
    c3de:	d002      	beq.n	c3e6 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    c3e0:	f06f 0313 	mvn.w	r3, #19
    c3e4:	e037      	b.n	c456 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    c3e6:	6a38      	ldr	r0, [r7, #32]
    c3e8:	4b21      	ldr	r3, [pc, #132]	; (c470 <_spi_m_sync_trans+0x108>)
    c3ea:	4798      	blx	r3
    c3ec:	4603      	mov	r3, r0
    c3ee:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    c3f0:	f107 0308 	add.w	r3, r7, #8
    c3f4:	461a      	mov	r2, r3
    c3f6:	69f9      	ldr	r1, [r7, #28]
    c3f8:	6a38      	ldr	r0, [r7, #32]
    c3fa:	4b1e      	ldr	r3, [pc, #120]	; (c474 <_spi_m_sync_trans+0x10c>)
    c3fc:	4798      	blx	r3
    c3fe:	4603      	mov	r3, r0
    c400:	f083 0301 	eor.w	r3, r3, #1
    c404:	b2db      	uxtb	r3, r3
    c406:	2b00      	cmp	r3, #0
    c408:	d00b      	beq.n	c422 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    c40a:	697a      	ldr	r2, [r7, #20]
    c40c:	693b      	ldr	r3, [r7, #16]
    c40e:	429a      	cmp	r2, r3
    c410:	d307      	bcc.n	c422 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    c412:	687b      	ldr	r3, [r7, #4]
    c414:	88db      	ldrh	r3, [r3, #6]
    c416:	f107 0208 	add.w	r2, r7, #8
    c41a:	69f9      	ldr	r1, [r7, #28]
    c41c:	6a38      	ldr	r0, [r7, #32]
    c41e:	4c16      	ldr	r4, [pc, #88]	; (c478 <_spi_m_sync_trans+0x110>)
    c420:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    c422:	6a39      	ldr	r1, [r7, #32]
    c424:	69f8      	ldr	r0, [r7, #28]
    c426:	4b15      	ldr	r3, [pc, #84]	; (c47c <_spi_m_sync_trans+0x114>)
    c428:	4798      	blx	r3
    c42a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c42e:	2b00      	cmp	r3, #0
    c430:	db0c      	blt.n	c44c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    c432:	693a      	ldr	r2, [r7, #16]
    c434:	683b      	ldr	r3, [r7, #0]
    c436:	689b      	ldr	r3, [r3, #8]
    c438:	429a      	cmp	r2, r3
    c43a:	d3d4      	bcc.n	c3e6 <_spi_m_sync_trans+0x7e>
    c43c:	697a      	ldr	r2, [r7, #20]
    c43e:	683b      	ldr	r3, [r7, #0]
    c440:	689b      	ldr	r3, [r3, #8]
    c442:	429a      	cmp	r2, r3
    c444:	d3cf      	bcc.n	c3e6 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    c446:	693b      	ldr	r3, [r7, #16]
    c448:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    c44a:	e000      	b.n	c44e <_spi_m_sync_trans+0xe6>
			break;
    c44c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    c44e:	6a38      	ldr	r0, [r7, #32]
    c450:	4b0b      	ldr	r3, [pc, #44]	; (c480 <_spi_m_sync_trans+0x118>)
    c452:	4798      	blx	r3

	return rc;
    c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c456:	4618      	mov	r0, r3
    c458:	372c      	adds	r7, #44	; 0x2c
    c45a:	46bd      	mov	sp, r7
    c45c:	bd90      	pop	{r4, r7, pc}
    c45e:	bf00      	nop
    c460:	00021bb8 	.word	0x00021bb8
    c464:	00007e21 	.word	0x00007e21
    c468:	0000aac9 	.word	0x0000aac9
    c46c:	0000ad51 	.word	0x0000ad51
    c470:	0000ab85 	.word	0x0000ab85
    c474:	0000c245 	.word	0x0000c245
    c478:	0000c2b1 	.word	0x0000c2b1
    c47c:	0000c329 	.word	0x0000c329
    c480:	0000c215 	.word	0x0000c215

0000c484 <__NVIC_EnableIRQ>:
{
    c484:	b480      	push	{r7}
    c486:	b083      	sub	sp, #12
    c488:	af00      	add	r7, sp, #0
    c48a:	4603      	mov	r3, r0
    c48c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c48e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c492:	2b00      	cmp	r3, #0
    c494:	db0b      	blt.n	c4ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c496:	4909      	ldr	r1, [pc, #36]	; (c4bc <__NVIC_EnableIRQ+0x38>)
    c498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c49c:	095b      	lsrs	r3, r3, #5
    c49e:	88fa      	ldrh	r2, [r7, #6]
    c4a0:	f002 021f 	and.w	r2, r2, #31
    c4a4:	2001      	movs	r0, #1
    c4a6:	fa00 f202 	lsl.w	r2, r0, r2
    c4aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c4ae:	bf00      	nop
    c4b0:	370c      	adds	r7, #12
    c4b2:	46bd      	mov	sp, r7
    c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4b8:	4770      	bx	lr
    c4ba:	bf00      	nop
    c4bc:	e000e100 	.word	0xe000e100

0000c4c0 <__NVIC_DisableIRQ>:
{
    c4c0:	b480      	push	{r7}
    c4c2:	b083      	sub	sp, #12
    c4c4:	af00      	add	r7, sp, #0
    c4c6:	4603      	mov	r3, r0
    c4c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c4ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	db10      	blt.n	c4f4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c4d2:	490b      	ldr	r1, [pc, #44]	; (c500 <__NVIC_DisableIRQ+0x40>)
    c4d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c4d8:	095b      	lsrs	r3, r3, #5
    c4da:	88fa      	ldrh	r2, [r7, #6]
    c4dc:	f002 021f 	and.w	r2, r2, #31
    c4e0:	2001      	movs	r0, #1
    c4e2:	fa00 f202 	lsl.w	r2, r0, r2
    c4e6:	3320      	adds	r3, #32
    c4e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    c4ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c4f0:	f3bf 8f6f 	isb	sy
}
    c4f4:	bf00      	nop
    c4f6:	370c      	adds	r7, #12
    c4f8:	46bd      	mov	sp, r7
    c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4fe:	4770      	bx	lr
    c500:	e000e100 	.word	0xe000e100

0000c504 <__NVIC_ClearPendingIRQ>:
{
    c504:	b480      	push	{r7}
    c506:	b083      	sub	sp, #12
    c508:	af00      	add	r7, sp, #0
    c50a:	4603      	mov	r3, r0
    c50c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c50e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c512:	2b00      	cmp	r3, #0
    c514:	db0c      	blt.n	c530 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c516:	4909      	ldr	r1, [pc, #36]	; (c53c <__NVIC_ClearPendingIRQ+0x38>)
    c518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c51c:	095b      	lsrs	r3, r3, #5
    c51e:	88fa      	ldrh	r2, [r7, #6]
    c520:	f002 021f 	and.w	r2, r2, #31
    c524:	2001      	movs	r0, #1
    c526:	fa00 f202 	lsl.w	r2, r0, r2
    c52a:	3360      	adds	r3, #96	; 0x60
    c52c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c530:	bf00      	nop
    c532:	370c      	adds	r7, #12
    c534:	46bd      	mov	sp, r7
    c536:	f85d 7b04 	ldr.w	r7, [sp], #4
    c53a:	4770      	bx	lr
    c53c:	e000e100 	.word	0xe000e100

0000c540 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    c540:	b480      	push	{r7}
    c542:	b083      	sub	sp, #12
    c544:	af00      	add	r7, sp, #0
    c546:	6078      	str	r0, [r7, #4]
    c548:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    c54a:	bf00      	nop
    c54c:	687b      	ldr	r3, [r7, #4]
    c54e:	689a      	ldr	r2, [r3, #8]
    c550:	683b      	ldr	r3, [r7, #0]
    c552:	4013      	ands	r3, r2
    c554:	2b00      	cmp	r3, #0
    c556:	d1f9      	bne.n	c54c <hri_tcc_wait_for_sync+0xc>
	};
}
    c558:	bf00      	nop
    c55a:	370c      	adds	r7, #12
    c55c:	46bd      	mov	sp, r7
    c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c562:	4770      	bx	lr

0000c564 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    c564:	b480      	push	{r7}
    c566:	b083      	sub	sp, #12
    c568:	af00      	add	r7, sp, #0
    c56a:	6078      	str	r0, [r7, #4]
    c56c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    c56e:	687b      	ldr	r3, [r7, #4]
    c570:	689a      	ldr	r2, [r3, #8]
    c572:	683b      	ldr	r3, [r7, #0]
    c574:	4013      	ands	r3, r2
    c576:	2b00      	cmp	r3, #0
    c578:	bf14      	ite	ne
    c57a:	2301      	movne	r3, #1
    c57c:	2300      	moveq	r3, #0
    c57e:	b2db      	uxtb	r3, r3
}
    c580:	4618      	mov	r0, r3
    c582:	370c      	adds	r7, #12
    c584:	46bd      	mov	sp, r7
    c586:	f85d 7b04 	ldr.w	r7, [sp], #4
    c58a:	4770      	bx	lr

0000c58c <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    c58c:	b480      	push	{r7}
    c58e:	b083      	sub	sp, #12
    c590:	af00      	add	r7, sp, #0
    c592:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    c594:	687b      	ldr	r3, [r7, #4]
    c596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c598:	f003 0301 	and.w	r3, r3, #1
    c59c:	2b00      	cmp	r3, #0
    c59e:	bf14      	ite	ne
    c5a0:	2301      	movne	r3, #1
    c5a2:	2300      	moveq	r3, #0
    c5a4:	b2db      	uxtb	r3, r3
}
    c5a6:	4618      	mov	r0, r3
    c5a8:	370c      	adds	r7, #12
    c5aa:	46bd      	mov	sp, r7
    c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5b0:	4770      	bx	lr

0000c5b2 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    c5b2:	b480      	push	{r7}
    c5b4:	b083      	sub	sp, #12
    c5b6:	af00      	add	r7, sp, #0
    c5b8:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    c5ba:	687b      	ldr	r3, [r7, #4]
    c5bc:	2201      	movs	r2, #1
    c5be:	62da      	str	r2, [r3, #44]	; 0x2c
}
    c5c0:	bf00      	nop
    c5c2:	370c      	adds	r7, #12
    c5c4:	46bd      	mov	sp, r7
    c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5ca:	4770      	bx	lr

0000c5cc <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    c5cc:	b480      	push	{r7}
    c5ce:	b083      	sub	sp, #12
    c5d0:	af00      	add	r7, sp, #0
    c5d2:	6078      	str	r0, [r7, #4]
    c5d4:	460b      	mov	r3, r1
    c5d6:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    c5d8:	687b      	ldr	r3, [r7, #4]
    c5da:	78fa      	ldrb	r2, [r7, #3]
    c5dc:	715a      	strb	r2, [r3, #5]
}
    c5de:	bf00      	nop
    c5e0:	370c      	adds	r7, #12
    c5e2:	46bd      	mov	sp, r7
    c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5e8:	4770      	bx	lr

0000c5ea <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    c5ea:	b480      	push	{r7}
    c5ec:	b083      	sub	sp, #12
    c5ee:	af00      	add	r7, sp, #0
    c5f0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    c5f2:	687b      	ldr	r3, [r7, #4]
    c5f4:	2201      	movs	r2, #1
    c5f6:	629a      	str	r2, [r3, #40]	; 0x28
}
    c5f8:	bf00      	nop
    c5fa:	370c      	adds	r7, #12
    c5fc:	46bd      	mov	sp, r7
    c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    c602:	4770      	bx	lr

0000c604 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    c604:	b580      	push	{r7, lr}
    c606:	b082      	sub	sp, #8
    c608:	af00      	add	r7, sp, #0
    c60a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    c60c:	687b      	ldr	r3, [r7, #4]
    c60e:	681b      	ldr	r3, [r3, #0]
    c610:	f043 0201 	orr.w	r2, r3, #1
    c614:	687b      	ldr	r3, [r7, #4]
    c616:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    c618:	2101      	movs	r1, #1
    c61a:	6878      	ldr	r0, [r7, #4]
    c61c:	4b02      	ldr	r3, [pc, #8]	; (c628 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    c61e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c620:	bf00      	nop
    c622:	3708      	adds	r7, #8
    c624:	46bd      	mov	sp, r7
    c626:	bd80      	pop	{r7, pc}
    c628:	0000c541 	.word	0x0000c541

0000c62c <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    c62c:	b580      	push	{r7, lr}
    c62e:	b082      	sub	sp, #8
    c630:	af00      	add	r7, sp, #0
    c632:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    c634:	687b      	ldr	r3, [r7, #4]
    c636:	681b      	ldr	r3, [r3, #0]
    c638:	f043 0202 	orr.w	r2, r3, #2
    c63c:	687b      	ldr	r3, [r7, #4]
    c63e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c640:	2103      	movs	r1, #3
    c642:	6878      	ldr	r0, [r7, #4]
    c644:	4b02      	ldr	r3, [pc, #8]	; (c650 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    c646:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c648:	bf00      	nop
    c64a:	3708      	adds	r7, #8
    c64c:	46bd      	mov	sp, r7
    c64e:	bd80      	pop	{r7, pc}
    c650:	0000c541 	.word	0x0000c541

0000c654 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c654:	b580      	push	{r7, lr}
    c656:	b084      	sub	sp, #16
    c658:	af00      	add	r7, sp, #0
    c65a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c65c:	2103      	movs	r1, #3
    c65e:	6878      	ldr	r0, [r7, #4]
    c660:	4b09      	ldr	r3, [pc, #36]	; (c688 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    c662:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    c664:	687b      	ldr	r3, [r7, #4]
    c666:	681b      	ldr	r3, [r3, #0]
    c668:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    c66a:	68fb      	ldr	r3, [r7, #12]
    c66c:	085b      	lsrs	r3, r3, #1
    c66e:	f003 0301 	and.w	r3, r3, #1
    c672:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    c674:	68fb      	ldr	r3, [r7, #12]
    c676:	2b00      	cmp	r3, #0
    c678:	bf14      	ite	ne
    c67a:	2301      	movne	r3, #1
    c67c:	2300      	moveq	r3, #0
    c67e:	b2db      	uxtb	r3, r3
}
    c680:	4618      	mov	r0, r3
    c682:	3710      	adds	r7, #16
    c684:	46bd      	mov	sp, r7
    c686:	bd80      	pop	{r7, pc}
    c688:	0000c541 	.word	0x0000c541

0000c68c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c68c:	b580      	push	{r7, lr}
    c68e:	b082      	sub	sp, #8
    c690:	af00      	add	r7, sp, #0
    c692:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    c694:	687b      	ldr	r3, [r7, #4]
    c696:	681b      	ldr	r3, [r3, #0]
    c698:	f023 0202 	bic.w	r2, r3, #2
    c69c:	687b      	ldr	r3, [r7, #4]
    c69e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c6a0:	2103      	movs	r1, #3
    c6a2:	6878      	ldr	r0, [r7, #4]
    c6a4:	4b02      	ldr	r3, [pc, #8]	; (c6b0 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    c6a6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c6a8:	bf00      	nop
    c6aa:	3708      	adds	r7, #8
    c6ac:	46bd      	mov	sp, r7
    c6ae:	bd80      	pop	{r7, pc}
    c6b0:	0000c541 	.word	0x0000c541

0000c6b4 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    c6b4:	b580      	push	{r7, lr}
    c6b6:	b084      	sub	sp, #16
    c6b8:	af00      	add	r7, sp, #0
    c6ba:	6078      	str	r0, [r7, #4]
    c6bc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c6be:	2103      	movs	r1, #3
    c6c0:	6878      	ldr	r0, [r7, #4]
    c6c2:	4b07      	ldr	r3, [pc, #28]	; (c6e0 <hri_tcc_get_CTRLA_reg+0x2c>)
    c6c4:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    c6c6:	687b      	ldr	r3, [r7, #4]
    c6c8:	681b      	ldr	r3, [r3, #0]
    c6ca:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c6cc:	68fa      	ldr	r2, [r7, #12]
    c6ce:	683b      	ldr	r3, [r7, #0]
    c6d0:	4013      	ands	r3, r2
    c6d2:	60fb      	str	r3, [r7, #12]
	return tmp;
    c6d4:	68fb      	ldr	r3, [r7, #12]
}
    c6d6:	4618      	mov	r0, r3
    c6d8:	3710      	adds	r7, #16
    c6da:	46bd      	mov	sp, r7
    c6dc:	bd80      	pop	{r7, pc}
    c6de:	bf00      	nop
    c6e0:	0000c541 	.word	0x0000c541

0000c6e4 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    c6e4:	b580      	push	{r7, lr}
    c6e6:	b082      	sub	sp, #8
    c6e8:	af00      	add	r7, sp, #0
    c6ea:	6078      	str	r0, [r7, #4]
    c6ec:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    c6ee:	687b      	ldr	r3, [r7, #4]
    c6f0:	683a      	ldr	r2, [r7, #0]
    c6f2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c6f4:	2103      	movs	r1, #3
    c6f6:	6878      	ldr	r0, [r7, #4]
    c6f8:	4b02      	ldr	r3, [pc, #8]	; (c704 <hri_tcc_write_CTRLA_reg+0x20>)
    c6fa:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c6fc:	bf00      	nop
    c6fe:	3708      	adds	r7, #8
    c700:	46bd      	mov	sp, r7
    c702:	bd80      	pop	{r7, pc}
    c704:	0000c541 	.word	0x0000c541

0000c708 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    c708:	b480      	push	{r7}
    c70a:	b083      	sub	sp, #12
    c70c:	af00      	add	r7, sp, #0
    c70e:	6078      	str	r0, [r7, #4]
    c710:	460b      	mov	r3, r1
    c712:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    c714:	687b      	ldr	r3, [r7, #4]
    c716:	78fa      	ldrb	r2, [r7, #3]
    c718:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    c71a:	bf00      	nop
    c71c:	370c      	adds	r7, #12
    c71e:	46bd      	mov	sp, r7
    c720:	f85d 7b04 	ldr.w	r7, [sp], #4
    c724:	4770      	bx	lr

0000c726 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    c726:	b480      	push	{r7}
    c728:	b083      	sub	sp, #12
    c72a:	af00      	add	r7, sp, #0
    c72c:	6078      	str	r0, [r7, #4]
    c72e:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    c730:	687b      	ldr	r3, [r7, #4]
    c732:	683a      	ldr	r2, [r7, #0]
    c734:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    c736:	bf00      	nop
    c738:	370c      	adds	r7, #12
    c73a:	46bd      	mov	sp, r7
    c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c740:	4770      	bx	lr
	...

0000c744 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    c744:	b580      	push	{r7, lr}
    c746:	b082      	sub	sp, #8
    c748:	af00      	add	r7, sp, #0
    c74a:	6078      	str	r0, [r7, #4]
    c74c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    c74e:	687b      	ldr	r3, [r7, #4]
    c750:	683a      	ldr	r2, [r7, #0]
    c752:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    c754:	2180      	movs	r1, #128	; 0x80
    c756:	6878      	ldr	r0, [r7, #4]
    c758:	4b02      	ldr	r3, [pc, #8]	; (c764 <hri_tcc_write_PER_reg+0x20>)
    c75a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c75c:	bf00      	nop
    c75e:	3708      	adds	r7, #8
    c760:	46bd      	mov	sp, r7
    c762:	bd80      	pop	{r7, pc}
    c764:	0000c541 	.word	0x0000c541

0000c768 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    c768:	b580      	push	{r7, lr}
    c76a:	b082      	sub	sp, #8
    c76c:	af00      	add	r7, sp, #0
    c76e:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    c770:	2180      	movs	r1, #128	; 0x80
    c772:	6878      	ldr	r0, [r7, #4]
    c774:	4b03      	ldr	r3, [pc, #12]	; (c784 <hri_tcc_read_PER_reg+0x1c>)
    c776:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    c778:	687b      	ldr	r3, [r7, #4]
    c77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    c77c:	4618      	mov	r0, r3
    c77e:	3708      	adds	r7, #8
    c780:	46bd      	mov	sp, r7
    c782:	bd80      	pop	{r7, pc}
    c784:	0000c541 	.word	0x0000c541

0000c788 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    c788:	b480      	push	{r7}
    c78a:	b083      	sub	sp, #12
    c78c:	af00      	add	r7, sp, #0
    c78e:	6078      	str	r0, [r7, #4]
    c790:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    c792:	687b      	ldr	r3, [r7, #4]
    c794:	4a09      	ldr	r2, [pc, #36]	; (c7bc <_tcc_init_irq_param+0x34>)
    c796:	4293      	cmp	r3, r2
    c798:	d102      	bne.n	c7a0 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    c79a:	4a09      	ldr	r2, [pc, #36]	; (c7c0 <_tcc_init_irq_param+0x38>)
    c79c:	683b      	ldr	r3, [r7, #0]
    c79e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    c7a0:	687b      	ldr	r3, [r7, #4]
    c7a2:	4a08      	ldr	r2, [pc, #32]	; (c7c4 <_tcc_init_irq_param+0x3c>)
    c7a4:	4293      	cmp	r3, r2
    c7a6:	d102      	bne.n	c7ae <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    c7a8:	4a07      	ldr	r2, [pc, #28]	; (c7c8 <_tcc_init_irq_param+0x40>)
    c7aa:	683b      	ldr	r3, [r7, #0]
    c7ac:	6013      	str	r3, [r2, #0]
	}
}
    c7ae:	bf00      	nop
    c7b0:	370c      	adds	r7, #12
    c7b2:	46bd      	mov	sp, r7
    c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7b8:	4770      	bx	lr
    c7ba:	bf00      	nop
    c7bc:	41016000 	.word	0x41016000
    c7c0:	20008724 	.word	0x20008724
    c7c4:	41018000 	.word	0x41018000
    c7c8:	20008728 	.word	0x20008728

0000c7cc <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    c7cc:	b580      	push	{r7, lr}
    c7ce:	b084      	sub	sp, #16
    c7d0:	af00      	add	r7, sp, #0
    c7d2:	6078      	str	r0, [r7, #4]
    c7d4:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    c7d6:	6838      	ldr	r0, [r7, #0]
    c7d8:	4b33      	ldr	r3, [pc, #204]	; (c8a8 <_tcc_timer_init+0xdc>)
    c7da:	4798      	blx	r3
    c7dc:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    c7de:	68fb      	ldr	r3, [r7, #12]
    c7e0:	2b00      	cmp	r3, #0
    c7e2:	d102      	bne.n	c7ea <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    c7e4:	f06f 0309 	mvn.w	r3, #9
    c7e8:	e05a      	b.n	c8a0 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    c7ea:	687b      	ldr	r3, [r7, #4]
    c7ec:	683a      	ldr	r2, [r7, #0]
    c7ee:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    c7f0:	2101      	movs	r1, #1
    c7f2:	6838      	ldr	r0, [r7, #0]
    c7f4:	4b2d      	ldr	r3, [pc, #180]	; (c8ac <_tcc_timer_init+0xe0>)
    c7f6:	4798      	blx	r3
    c7f8:	4603      	mov	r3, r0
    c7fa:	f083 0301 	eor.w	r3, r3, #1
    c7fe:	b2db      	uxtb	r3, r3
    c800:	2b00      	cmp	r3, #0
    c802:	d011      	beq.n	c828 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    c804:	2102      	movs	r1, #2
    c806:	6838      	ldr	r0, [r7, #0]
    c808:	4b29      	ldr	r3, [pc, #164]	; (c8b0 <_tcc_timer_init+0xe4>)
    c80a:	4798      	blx	r3
    c80c:	4603      	mov	r3, r0
    c80e:	2b00      	cmp	r3, #0
    c810:	d006      	beq.n	c820 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    c812:	6838      	ldr	r0, [r7, #0]
    c814:	4b27      	ldr	r3, [pc, #156]	; (c8b4 <_tcc_timer_init+0xe8>)
    c816:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    c818:	2102      	movs	r1, #2
    c81a:	6838      	ldr	r0, [r7, #0]
    c81c:	4b26      	ldr	r3, [pc, #152]	; (c8b8 <_tcc_timer_init+0xec>)
    c81e:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    c820:	2101      	movs	r1, #1
    c822:	6838      	ldr	r0, [r7, #0]
    c824:	4b25      	ldr	r3, [pc, #148]	; (c8bc <_tcc_timer_init+0xf0>)
    c826:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    c828:	2101      	movs	r1, #1
    c82a:	6838      	ldr	r0, [r7, #0]
    c82c:	4b22      	ldr	r3, [pc, #136]	; (c8b8 <_tcc_timer_init+0xec>)
    c82e:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    c830:	68fb      	ldr	r3, [r7, #12]
    c832:	689b      	ldr	r3, [r3, #8]
    c834:	4619      	mov	r1, r3
    c836:	6838      	ldr	r0, [r7, #0]
    c838:	4b20      	ldr	r3, [pc, #128]	; (c8bc <_tcc_timer_init+0xf0>)
    c83a:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    c83c:	68fb      	ldr	r3, [r7, #12]
    c83e:	7b1b      	ldrb	r3, [r3, #12]
    c840:	4619      	mov	r1, r3
    c842:	6838      	ldr	r0, [r7, #0]
    c844:	4b1e      	ldr	r3, [pc, #120]	; (c8c0 <_tcc_timer_init+0xf4>)
    c846:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    c848:	68fb      	ldr	r3, [r7, #12]
    c84a:	7b5b      	ldrb	r3, [r3, #13]
    c84c:	4619      	mov	r1, r3
    c84e:	6838      	ldr	r0, [r7, #0]
    c850:	4b1c      	ldr	r3, [pc, #112]	; (c8c4 <_tcc_timer_init+0xf8>)
    c852:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    c854:	68fb      	ldr	r3, [r7, #12]
    c856:	691b      	ldr	r3, [r3, #16]
    c858:	4619      	mov	r1, r3
    c85a:	6838      	ldr	r0, [r7, #0]
    c85c:	4b1a      	ldr	r3, [pc, #104]	; (c8c8 <_tcc_timer_init+0xfc>)
    c85e:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    c860:	68fb      	ldr	r3, [r7, #12]
    c862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c864:	4619      	mov	r1, r3
    c866:	6838      	ldr	r0, [r7, #0]
    c868:	4b18      	ldr	r3, [pc, #96]	; (c8cc <_tcc_timer_init+0x100>)
    c86a:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    c86c:	6838      	ldr	r0, [r7, #0]
    c86e:	4b18      	ldr	r3, [pc, #96]	; (c8d0 <_tcc_timer_init+0x104>)
    c870:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    c872:	6879      	ldr	r1, [r7, #4]
    c874:	6838      	ldr	r0, [r7, #0]
    c876:	4b17      	ldr	r3, [pc, #92]	; (c8d4 <_tcc_timer_init+0x108>)
    c878:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    c87a:	68fb      	ldr	r3, [r7, #12]
    c87c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c880:	4618      	mov	r0, r3
    c882:	4b15      	ldr	r3, [pc, #84]	; (c8d8 <_tcc_timer_init+0x10c>)
    c884:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    c886:	68fb      	ldr	r3, [r7, #12]
    c888:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c88c:	4618      	mov	r0, r3
    c88e:	4b13      	ldr	r3, [pc, #76]	; (c8dc <_tcc_timer_init+0x110>)
    c890:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    c892:	68fb      	ldr	r3, [r7, #12]
    c894:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c898:	4618      	mov	r0, r3
    c89a:	4b11      	ldr	r3, [pc, #68]	; (c8e0 <_tcc_timer_init+0x114>)
    c89c:	4798      	blx	r3

	return ERR_NONE;
    c89e:	2300      	movs	r3, #0
}
    c8a0:	4618      	mov	r0, r3
    c8a2:	3710      	adds	r7, #16
    c8a4:	46bd      	mov	sp, r7
    c8a6:	bd80      	pop	{r7, pc}
    c8a8:	0000ca95 	.word	0x0000ca95
    c8ac:	0000c565 	.word	0x0000c565
    c8b0:	0000c6b5 	.word	0x0000c6b5
    c8b4:	0000c68d 	.word	0x0000c68d
    c8b8:	0000c541 	.word	0x0000c541
    c8bc:	0000c6e5 	.word	0x0000c6e5
    c8c0:	0000c5cd 	.word	0x0000c5cd
    c8c4:	0000c709 	.word	0x0000c709
    c8c8:	0000c727 	.word	0x0000c727
    c8cc:	0000c745 	.word	0x0000c745
    c8d0:	0000c5eb 	.word	0x0000c5eb
    c8d4:	0000c789 	.word	0x0000c789
    c8d8:	0000c4c1 	.word	0x0000c4c1
    c8dc:	0000c505 	.word	0x0000c505
    c8e0:	0000c485 	.word	0x0000c485

0000c8e4 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    c8e4:	b580      	push	{r7, lr}
    c8e6:	b084      	sub	sp, #16
    c8e8:	af00      	add	r7, sp, #0
    c8ea:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    c8ec:	687b      	ldr	r3, [r7, #4]
    c8ee:	68db      	ldr	r3, [r3, #12]
    c8f0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    c8f2:	68f8      	ldr	r0, [r7, #12]
    c8f4:	4b0a      	ldr	r3, [pc, #40]	; (c920 <_tcc_timer_deinit+0x3c>)
    c8f6:	4798      	blx	r3
    c8f8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    c8fa:	68bb      	ldr	r3, [r7, #8]
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d00b      	beq.n	c918 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    c900:	68bb      	ldr	r3, [r7, #8]
    c902:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c906:	4618      	mov	r0, r3
    c908:	4b06      	ldr	r3, [pc, #24]	; (c924 <_tcc_timer_deinit+0x40>)
    c90a:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    c90c:	68f8      	ldr	r0, [r7, #12]
    c90e:	4b06      	ldr	r3, [pc, #24]	; (c928 <_tcc_timer_deinit+0x44>)
    c910:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    c912:	68f8      	ldr	r0, [r7, #12]
    c914:	4b05      	ldr	r3, [pc, #20]	; (c92c <_tcc_timer_deinit+0x48>)
    c916:	4798      	blx	r3
	}
}
    c918:	bf00      	nop
    c91a:	3710      	adds	r7, #16
    c91c:	46bd      	mov	sp, r7
    c91e:	bd80      	pop	{r7, pc}
    c920:	0000ca95 	.word	0x0000ca95
    c924:	0000c4c1 	.word	0x0000c4c1
    c928:	0000c68d 	.word	0x0000c68d
    c92c:	0000c605 	.word	0x0000c605

0000c930 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    c930:	b580      	push	{r7, lr}
    c932:	b082      	sub	sp, #8
    c934:	af00      	add	r7, sp, #0
    c936:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    c938:	687b      	ldr	r3, [r7, #4]
    c93a:	68db      	ldr	r3, [r3, #12]
    c93c:	4618      	mov	r0, r3
    c93e:	4b03      	ldr	r3, [pc, #12]	; (c94c <_tcc_timer_start+0x1c>)
    c940:	4798      	blx	r3
}
    c942:	bf00      	nop
    c944:	3708      	adds	r7, #8
    c946:	46bd      	mov	sp, r7
    c948:	bd80      	pop	{r7, pc}
    c94a:	bf00      	nop
    c94c:	0000c62d 	.word	0x0000c62d

0000c950 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    c950:	b580      	push	{r7, lr}
    c952:	b082      	sub	sp, #8
    c954:	af00      	add	r7, sp, #0
    c956:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    c958:	687b      	ldr	r3, [r7, #4]
    c95a:	68db      	ldr	r3, [r3, #12]
    c95c:	4618      	mov	r0, r3
    c95e:	4b03      	ldr	r3, [pc, #12]	; (c96c <_tcc_timer_stop+0x1c>)
    c960:	4798      	blx	r3
}
    c962:	bf00      	nop
    c964:	3708      	adds	r7, #8
    c966:	46bd      	mov	sp, r7
    c968:	bd80      	pop	{r7, pc}
    c96a:	bf00      	nop
    c96c:	0000c68d 	.word	0x0000c68d

0000c970 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    c970:	b580      	push	{r7, lr}
    c972:	b082      	sub	sp, #8
    c974:	af00      	add	r7, sp, #0
    c976:	6078      	str	r0, [r7, #4]
    c978:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    c97a:	687b      	ldr	r3, [r7, #4]
    c97c:	68db      	ldr	r3, [r3, #12]
    c97e:	6839      	ldr	r1, [r7, #0]
    c980:	4618      	mov	r0, r3
    c982:	4b03      	ldr	r3, [pc, #12]	; (c990 <_tcc_timer_set_period+0x20>)
    c984:	4798      	blx	r3
}
    c986:	bf00      	nop
    c988:	3708      	adds	r7, #8
    c98a:	46bd      	mov	sp, r7
    c98c:	bd80      	pop	{r7, pc}
    c98e:	bf00      	nop
    c990:	0000c745 	.word	0x0000c745

0000c994 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    c994:	b580      	push	{r7, lr}
    c996:	b082      	sub	sp, #8
    c998:	af00      	add	r7, sp, #0
    c99a:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    c99c:	687b      	ldr	r3, [r7, #4]
    c99e:	68db      	ldr	r3, [r3, #12]
    c9a0:	4618      	mov	r0, r3
    c9a2:	4b03      	ldr	r3, [pc, #12]	; (c9b0 <_tcc_timer_get_period+0x1c>)
    c9a4:	4798      	blx	r3
    c9a6:	4603      	mov	r3, r0
}
    c9a8:	4618      	mov	r0, r3
    c9aa:	3708      	adds	r7, #8
    c9ac:	46bd      	mov	sp, r7
    c9ae:	bd80      	pop	{r7, pc}
    c9b0:	0000c769 	.word	0x0000c769

0000c9b4 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    c9b4:	b580      	push	{r7, lr}
    c9b6:	b082      	sub	sp, #8
    c9b8:	af00      	add	r7, sp, #0
    c9ba:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    c9bc:	687b      	ldr	r3, [r7, #4]
    c9be:	68db      	ldr	r3, [r3, #12]
    c9c0:	4618      	mov	r0, r3
    c9c2:	4b03      	ldr	r3, [pc, #12]	; (c9d0 <_tcc_timer_is_started+0x1c>)
    c9c4:	4798      	blx	r3
    c9c6:	4603      	mov	r3, r0
}
    c9c8:	4618      	mov	r0, r3
    c9ca:	3708      	adds	r7, #8
    c9cc:	46bd      	mov	sp, r7
    c9ce:	bd80      	pop	{r7, pc}
    c9d0:	0000c655 	.word	0x0000c655

0000c9d4 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    c9d4:	b480      	push	{r7}
    c9d6:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    c9d8:	4b02      	ldr	r3, [pc, #8]	; (c9e4 <_tcc_get_timer+0x10>)
}
    c9da:	4618      	mov	r0, r3
    c9dc:	46bd      	mov	sp, r7
    c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9e2:	4770      	bx	lr
    c9e4:	20000124 	.word	0x20000124

0000c9e8 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    c9e8:	b580      	push	{r7, lr}
    c9ea:	b084      	sub	sp, #16
    c9ec:	af00      	add	r7, sp, #0
    c9ee:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    c9f0:	687b      	ldr	r3, [r7, #4]
    c9f2:	68db      	ldr	r3, [r3, #12]
    c9f4:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    c9f6:	68f8      	ldr	r0, [r7, #12]
    c9f8:	4b08      	ldr	r3, [pc, #32]	; (ca1c <_tcc_timer_set_irq+0x34>)
    c9fa:	4798      	blx	r3
    c9fc:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    c9fe:	68bb      	ldr	r3, [r7, #8]
    ca00:	2b00      	cmp	r3, #0
    ca02:	d006      	beq.n	ca12 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    ca04:	68bb      	ldr	r3, [r7, #8]
    ca06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    ca0a:	b2db      	uxtb	r3, r3
    ca0c:	4618      	mov	r0, r3
    ca0e:	4b04      	ldr	r3, [pc, #16]	; (ca20 <_tcc_timer_set_irq+0x38>)
    ca10:	4798      	blx	r3
	}
}
    ca12:	bf00      	nop
    ca14:	3710      	adds	r7, #16
    ca16:	46bd      	mov	sp, r7
    ca18:	bd80      	pop	{r7, pc}
    ca1a:	bf00      	nop
    ca1c:	0000ca95 	.word	0x0000ca95
    ca20:	0000866d 	.word	0x0000866d

0000ca24 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    ca24:	b580      	push	{r7, lr}
    ca26:	b084      	sub	sp, #16
    ca28:	af00      	add	r7, sp, #0
    ca2a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    ca2c:	687b      	ldr	r3, [r7, #4]
    ca2e:	68db      	ldr	r3, [r3, #12]
    ca30:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    ca32:	68f8      	ldr	r0, [r7, #12]
    ca34:	4b07      	ldr	r3, [pc, #28]	; (ca54 <tcc_interrupt_handler+0x30>)
    ca36:	4798      	blx	r3
    ca38:	4603      	mov	r3, r0
    ca3a:	2b00      	cmp	r3, #0
    ca3c:	d006      	beq.n	ca4c <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    ca3e:	68f8      	ldr	r0, [r7, #12]
    ca40:	4b05      	ldr	r3, [pc, #20]	; (ca58 <tcc_interrupt_handler+0x34>)
    ca42:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    ca44:	687b      	ldr	r3, [r7, #4]
    ca46:	681b      	ldr	r3, [r3, #0]
    ca48:	6878      	ldr	r0, [r7, #4]
    ca4a:	4798      	blx	r3
	}
}
    ca4c:	bf00      	nop
    ca4e:	3710      	adds	r7, #16
    ca50:	46bd      	mov	sp, r7
    ca52:	bd80      	pop	{r7, pc}
    ca54:	0000c58d 	.word	0x0000c58d
    ca58:	0000c5b3 	.word	0x0000c5b3

0000ca5c <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    ca5c:	b580      	push	{r7, lr}
    ca5e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    ca60:	4b03      	ldr	r3, [pc, #12]	; (ca70 <TCC0_0_Handler+0x14>)
    ca62:	681b      	ldr	r3, [r3, #0]
    ca64:	4618      	mov	r0, r3
    ca66:	4b03      	ldr	r3, [pc, #12]	; (ca74 <TCC0_0_Handler+0x18>)
    ca68:	4798      	blx	r3
}
    ca6a:	bf00      	nop
    ca6c:	bd80      	pop	{r7, pc}
    ca6e:	bf00      	nop
    ca70:	20008724 	.word	0x20008724
    ca74:	0000ca25 	.word	0x0000ca25

0000ca78 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    ca78:	b580      	push	{r7, lr}
    ca7a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    ca7c:	4b03      	ldr	r3, [pc, #12]	; (ca8c <TCC1_0_Handler+0x14>)
    ca7e:	681b      	ldr	r3, [r3, #0]
    ca80:	4618      	mov	r0, r3
    ca82:	4b03      	ldr	r3, [pc, #12]	; (ca90 <TCC1_0_Handler+0x18>)
    ca84:	4798      	blx	r3
}
    ca86:	bf00      	nop
    ca88:	bd80      	pop	{r7, pc}
    ca8a:	bf00      	nop
    ca8c:	20008728 	.word	0x20008728
    ca90:	0000ca25 	.word	0x0000ca25

0000ca94 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    ca94:	b480      	push	{r7}
    ca96:	b085      	sub	sp, #20
    ca98:	af00      	add	r7, sp, #0
    ca9a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    ca9c:	2300      	movs	r3, #0
    ca9e:	73fb      	strb	r3, [r7, #15]
    caa0:	e015      	b.n	cace <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    caa2:	7bfa      	ldrb	r2, [r7, #15]
    caa4:	490f      	ldr	r1, [pc, #60]	; (cae4 <_get_tcc_cfg+0x50>)
    caa6:	4613      	mov	r3, r2
    caa8:	005b      	lsls	r3, r3, #1
    caaa:	4413      	add	r3, r2
    caac:	011b      	lsls	r3, r3, #4
    caae:	440b      	add	r3, r1
    cab0:	681a      	ldr	r2, [r3, #0]
    cab2:	687b      	ldr	r3, [r7, #4]
    cab4:	429a      	cmp	r2, r3
    cab6:	d107      	bne.n	cac8 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    cab8:	7bfa      	ldrb	r2, [r7, #15]
    caba:	4613      	mov	r3, r2
    cabc:	005b      	lsls	r3, r3, #1
    cabe:	4413      	add	r3, r2
    cac0:	011b      	lsls	r3, r3, #4
    cac2:	4a08      	ldr	r2, [pc, #32]	; (cae4 <_get_tcc_cfg+0x50>)
    cac4:	4413      	add	r3, r2
    cac6:	e006      	b.n	cad6 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    cac8:	7bfb      	ldrb	r3, [r7, #15]
    caca:	3301      	adds	r3, #1
    cacc:	73fb      	strb	r3, [r7, #15]
    cace:	7bfb      	ldrb	r3, [r7, #15]
    cad0:	2b01      	cmp	r3, #1
    cad2:	d9e6      	bls.n	caa2 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    cad4:	2300      	movs	r3, #0
}
    cad6:	4618      	mov	r0, r3
    cad8:	3714      	adds	r7, #20
    cada:	46bd      	mov	sp, r7
    cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cae0:	4770      	bx	lr
    cae2:	bf00      	nop
    cae4:	200000c4 	.word	0x200000c4

0000cae8 <__NVIC_EnableIRQ>:
{
    cae8:	b480      	push	{r7}
    caea:	b083      	sub	sp, #12
    caec:	af00      	add	r7, sp, #0
    caee:	4603      	mov	r3, r0
    caf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    caf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    caf6:	2b00      	cmp	r3, #0
    caf8:	db0b      	blt.n	cb12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cafa:	4909      	ldr	r1, [pc, #36]	; (cb20 <__NVIC_EnableIRQ+0x38>)
    cafc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cb00:	095b      	lsrs	r3, r3, #5
    cb02:	88fa      	ldrh	r2, [r7, #6]
    cb04:	f002 021f 	and.w	r2, r2, #31
    cb08:	2001      	movs	r0, #1
    cb0a:	fa00 f202 	lsl.w	r2, r0, r2
    cb0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb12:	bf00      	nop
    cb14:	370c      	adds	r7, #12
    cb16:	46bd      	mov	sp, r7
    cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb1c:	4770      	bx	lr
    cb1e:	bf00      	nop
    cb20:	e000e100 	.word	0xe000e100

0000cb24 <__NVIC_DisableIRQ>:
{
    cb24:	b480      	push	{r7}
    cb26:	b083      	sub	sp, #12
    cb28:	af00      	add	r7, sp, #0
    cb2a:	4603      	mov	r3, r0
    cb2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    cb2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cb32:	2b00      	cmp	r3, #0
    cb34:	db10      	blt.n	cb58 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cb36:	490b      	ldr	r1, [pc, #44]	; (cb64 <__NVIC_DisableIRQ+0x40>)
    cb38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cb3c:	095b      	lsrs	r3, r3, #5
    cb3e:	88fa      	ldrh	r2, [r7, #6]
    cb40:	f002 021f 	and.w	r2, r2, #31
    cb44:	2001      	movs	r0, #1
    cb46:	fa00 f202 	lsl.w	r2, r0, r2
    cb4a:	3320      	adds	r3, #32
    cb4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    cb50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cb54:	f3bf 8f6f 	isb	sy
}
    cb58:	bf00      	nop
    cb5a:	370c      	adds	r7, #12
    cb5c:	46bd      	mov	sp, r7
    cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb62:	4770      	bx	lr
    cb64:	e000e100 	.word	0xe000e100

0000cb68 <__NVIC_ClearPendingIRQ>:
{
    cb68:	b480      	push	{r7}
    cb6a:	b083      	sub	sp, #12
    cb6c:	af00      	add	r7, sp, #0
    cb6e:	4603      	mov	r3, r0
    cb70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    cb72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cb76:	2b00      	cmp	r3, #0
    cb78:	db0c      	blt.n	cb94 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cb7a:	4909      	ldr	r1, [pc, #36]	; (cba0 <__NVIC_ClearPendingIRQ+0x38>)
    cb7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cb80:	095b      	lsrs	r3, r3, #5
    cb82:	88fa      	ldrh	r2, [r7, #6]
    cb84:	f002 021f 	and.w	r2, r2, #31
    cb88:	2001      	movs	r0, #1
    cb8a:	fa00 f202 	lsl.w	r2, r0, r2
    cb8e:	3360      	adds	r3, #96	; 0x60
    cb90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb94:	bf00      	nop
    cb96:	370c      	adds	r7, #12
    cb98:	46bd      	mov	sp, r7
    cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb9e:	4770      	bx	lr
    cba0:	e000e100 	.word	0xe000e100

0000cba4 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    cba4:	b480      	push	{r7}
    cba6:	b083      	sub	sp, #12
    cba8:	af00      	add	r7, sp, #0
    cbaa:	6078      	str	r0, [r7, #4]
    cbac:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    cbae:	bf00      	nop
    cbb0:	687b      	ldr	r3, [r7, #4]
    cbb2:	691a      	ldr	r2, [r3, #16]
    cbb4:	683b      	ldr	r3, [r7, #0]
    cbb6:	4013      	ands	r3, r2
    cbb8:	2b00      	cmp	r3, #0
    cbba:	d1f9      	bne.n	cbb0 <hri_tc_wait_for_sync+0xc>
	};
}
    cbbc:	bf00      	nop
    cbbe:	370c      	adds	r7, #12
    cbc0:	46bd      	mov	sp, r7
    cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbc6:	4770      	bx	lr

0000cbc8 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    cbc8:	b480      	push	{r7}
    cbca:	b083      	sub	sp, #12
    cbcc:	af00      	add	r7, sp, #0
    cbce:	6078      	str	r0, [r7, #4]
    cbd0:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    cbd2:	687b      	ldr	r3, [r7, #4]
    cbd4:	691a      	ldr	r2, [r3, #16]
    cbd6:	683b      	ldr	r3, [r7, #0]
    cbd8:	4013      	ands	r3, r2
    cbda:	2b00      	cmp	r3, #0
    cbdc:	bf14      	ite	ne
    cbde:	2301      	movne	r3, #1
    cbe0:	2300      	moveq	r3, #0
    cbe2:	b2db      	uxtb	r3, r3
}
    cbe4:	4618      	mov	r0, r3
    cbe6:	370c      	adds	r7, #12
    cbe8:	46bd      	mov	sp, r7
    cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbee:	4770      	bx	lr

0000cbf0 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    cbf0:	b480      	push	{r7}
    cbf2:	b083      	sub	sp, #12
    cbf4:	af00      	add	r7, sp, #0
    cbf6:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    cbf8:	687b      	ldr	r3, [r7, #4]
    cbfa:	7a9b      	ldrb	r3, [r3, #10]
    cbfc:	b2db      	uxtb	r3, r3
    cbfe:	f003 0301 	and.w	r3, r3, #1
    cc02:	2b00      	cmp	r3, #0
    cc04:	bf14      	ite	ne
    cc06:	2301      	movne	r3, #1
    cc08:	2300      	moveq	r3, #0
    cc0a:	b2db      	uxtb	r3, r3
}
    cc0c:	4618      	mov	r0, r3
    cc0e:	370c      	adds	r7, #12
    cc10:	46bd      	mov	sp, r7
    cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc16:	4770      	bx	lr

0000cc18 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    cc18:	b480      	push	{r7}
    cc1a:	b083      	sub	sp, #12
    cc1c:	af00      	add	r7, sp, #0
    cc1e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    cc20:	687b      	ldr	r3, [r7, #4]
    cc22:	2201      	movs	r2, #1
    cc24:	729a      	strb	r2, [r3, #10]
}
    cc26:	bf00      	nop
    cc28:	370c      	adds	r7, #12
    cc2a:	46bd      	mov	sp, r7
    cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc30:	4770      	bx	lr

0000cc32 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    cc32:	b480      	push	{r7}
    cc34:	b083      	sub	sp, #12
    cc36:	af00      	add	r7, sp, #0
    cc38:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    cc3a:	687b      	ldr	r3, [r7, #4]
    cc3c:	2202      	movs	r2, #2
    cc3e:	729a      	strb	r2, [r3, #10]
}
    cc40:	bf00      	nop
    cc42:	370c      	adds	r7, #12
    cc44:	46bd      	mov	sp, r7
    cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc4a:	4770      	bx	lr

0000cc4c <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    cc4c:	b480      	push	{r7}
    cc4e:	b083      	sub	sp, #12
    cc50:	af00      	add	r7, sp, #0
    cc52:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    cc54:	687b      	ldr	r3, [r7, #4]
    cc56:	2201      	movs	r2, #1
    cc58:	725a      	strb	r2, [r3, #9]
}
    cc5a:	bf00      	nop
    cc5c:	370c      	adds	r7, #12
    cc5e:	46bd      	mov	sp, r7
    cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc64:	4770      	bx	lr

0000cc66 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    cc66:	b480      	push	{r7}
    cc68:	b083      	sub	sp, #12
    cc6a:	af00      	add	r7, sp, #0
    cc6c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    cc6e:	687b      	ldr	r3, [r7, #4]
    cc70:	7a5b      	ldrb	r3, [r3, #9]
    cc72:	b2db      	uxtb	r3, r3
    cc74:	085b      	lsrs	r3, r3, #1
    cc76:	f003 0301 	and.w	r3, r3, #1
    cc7a:	2b00      	cmp	r3, #0
    cc7c:	bf14      	ite	ne
    cc7e:	2301      	movne	r3, #1
    cc80:	2300      	moveq	r3, #0
    cc82:	b2db      	uxtb	r3, r3
}
    cc84:	4618      	mov	r0, r3
    cc86:	370c      	adds	r7, #12
    cc88:	46bd      	mov	sp, r7
    cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc8e:	4770      	bx	lr

0000cc90 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    cc90:	b580      	push	{r7, lr}
    cc92:	b082      	sub	sp, #8
    cc94:	af00      	add	r7, sp, #0
    cc96:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    cc98:	687b      	ldr	r3, [r7, #4]
    cc9a:	681b      	ldr	r3, [r3, #0]
    cc9c:	f043 0201 	orr.w	r2, r3, #1
    cca0:	687b      	ldr	r3, [r7, #4]
    cca2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    cca4:	2101      	movs	r1, #1
    cca6:	6878      	ldr	r0, [r7, #4]
    cca8:	4b02      	ldr	r3, [pc, #8]	; (ccb4 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    ccaa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ccac:	bf00      	nop
    ccae:	3708      	adds	r7, #8
    ccb0:	46bd      	mov	sp, r7
    ccb2:	bd80      	pop	{r7, pc}
    ccb4:	0000cba5 	.word	0x0000cba5

0000ccb8 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    ccb8:	b580      	push	{r7, lr}
    ccba:	b082      	sub	sp, #8
    ccbc:	af00      	add	r7, sp, #0
    ccbe:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    ccc0:	687b      	ldr	r3, [r7, #4]
    ccc2:	681b      	ldr	r3, [r3, #0]
    ccc4:	f043 0202 	orr.w	r2, r3, #2
    ccc8:	687b      	ldr	r3, [r7, #4]
    ccca:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cccc:	2103      	movs	r1, #3
    ccce:	6878      	ldr	r0, [r7, #4]
    ccd0:	4b02      	ldr	r3, [pc, #8]	; (ccdc <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    ccd2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ccd4:	bf00      	nop
    ccd6:	3708      	adds	r7, #8
    ccd8:	46bd      	mov	sp, r7
    ccda:	bd80      	pop	{r7, pc}
    ccdc:	0000cba5 	.word	0x0000cba5

0000cce0 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    cce0:	b580      	push	{r7, lr}
    cce2:	b084      	sub	sp, #16
    cce4:	af00      	add	r7, sp, #0
    cce6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cce8:	2103      	movs	r1, #3
    ccea:	6878      	ldr	r0, [r7, #4]
    ccec:	4b09      	ldr	r3, [pc, #36]	; (cd14 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    ccee:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    ccf0:	687b      	ldr	r3, [r7, #4]
    ccf2:	681b      	ldr	r3, [r3, #0]
    ccf4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    ccf6:	68fb      	ldr	r3, [r7, #12]
    ccf8:	085b      	lsrs	r3, r3, #1
    ccfa:	f003 0301 	and.w	r3, r3, #1
    ccfe:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    cd00:	68fb      	ldr	r3, [r7, #12]
    cd02:	2b00      	cmp	r3, #0
    cd04:	bf14      	ite	ne
    cd06:	2301      	movne	r3, #1
    cd08:	2300      	moveq	r3, #0
    cd0a:	b2db      	uxtb	r3, r3
}
    cd0c:	4618      	mov	r0, r3
    cd0e:	3710      	adds	r7, #16
    cd10:	46bd      	mov	sp, r7
    cd12:	bd80      	pop	{r7, pc}
    cd14:	0000cba5 	.word	0x0000cba5

0000cd18 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    cd18:	b580      	push	{r7, lr}
    cd1a:	b082      	sub	sp, #8
    cd1c:	af00      	add	r7, sp, #0
    cd1e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    cd20:	687b      	ldr	r3, [r7, #4]
    cd22:	681b      	ldr	r3, [r3, #0]
    cd24:	f023 0202 	bic.w	r2, r3, #2
    cd28:	687b      	ldr	r3, [r7, #4]
    cd2a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cd2c:	2103      	movs	r1, #3
    cd2e:	6878      	ldr	r0, [r7, #4]
    cd30:	4b02      	ldr	r3, [pc, #8]	; (cd3c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    cd32:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cd34:	bf00      	nop
    cd36:	3708      	adds	r7, #8
    cd38:	46bd      	mov	sp, r7
    cd3a:	bd80      	pop	{r7, pc}
    cd3c:	0000cba5 	.word	0x0000cba5

0000cd40 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    cd40:	b480      	push	{r7}
    cd42:	b085      	sub	sp, #20
    cd44:	af00      	add	r7, sp, #0
    cd46:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    cd48:	687b      	ldr	r3, [r7, #4]
    cd4a:	681b      	ldr	r3, [r3, #0]
    cd4c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    cd4e:	68fb      	ldr	r3, [r7, #12]
    cd50:	089b      	lsrs	r3, r3, #2
    cd52:	f003 0303 	and.w	r3, r3, #3
    cd56:	60fb      	str	r3, [r7, #12]
	return tmp;
    cd58:	68fb      	ldr	r3, [r7, #12]
}
    cd5a:	4618      	mov	r0, r3
    cd5c:	3714      	adds	r7, #20
    cd5e:	46bd      	mov	sp, r7
    cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd64:	4770      	bx	lr
	...

0000cd68 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    cd68:	b580      	push	{r7, lr}
    cd6a:	b084      	sub	sp, #16
    cd6c:	af00      	add	r7, sp, #0
    cd6e:	6078      	str	r0, [r7, #4]
    cd70:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cd72:	2103      	movs	r1, #3
    cd74:	6878      	ldr	r0, [r7, #4]
    cd76:	4b07      	ldr	r3, [pc, #28]	; (cd94 <hri_tc_get_CTRLA_reg+0x2c>)
    cd78:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    cd7a:	687b      	ldr	r3, [r7, #4]
    cd7c:	681b      	ldr	r3, [r3, #0]
    cd7e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    cd80:	68fa      	ldr	r2, [r7, #12]
    cd82:	683b      	ldr	r3, [r7, #0]
    cd84:	4013      	ands	r3, r2
    cd86:	60fb      	str	r3, [r7, #12]
	return tmp;
    cd88:	68fb      	ldr	r3, [r7, #12]
}
    cd8a:	4618      	mov	r0, r3
    cd8c:	3710      	adds	r7, #16
    cd8e:	46bd      	mov	sp, r7
    cd90:	bd80      	pop	{r7, pc}
    cd92:	bf00      	nop
    cd94:	0000cba5 	.word	0x0000cba5

0000cd98 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    cd98:	b580      	push	{r7, lr}
    cd9a:	b082      	sub	sp, #8
    cd9c:	af00      	add	r7, sp, #0
    cd9e:	6078      	str	r0, [r7, #4]
    cda0:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    cda2:	687b      	ldr	r3, [r7, #4]
    cda4:	683a      	ldr	r2, [r7, #0]
    cda6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    cda8:	2103      	movs	r1, #3
    cdaa:	6878      	ldr	r0, [r7, #4]
    cdac:	4b02      	ldr	r3, [pc, #8]	; (cdb8 <hri_tc_write_CTRLA_reg+0x20>)
    cdae:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cdb0:	bf00      	nop
    cdb2:	3708      	adds	r7, #8
    cdb4:	46bd      	mov	sp, r7
    cdb6:	bd80      	pop	{r7, pc}
    cdb8:	0000cba5 	.word	0x0000cba5

0000cdbc <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    cdbc:	b480      	push	{r7}
    cdbe:	b083      	sub	sp, #12
    cdc0:	af00      	add	r7, sp, #0
    cdc2:	6078      	str	r0, [r7, #4]
    cdc4:	460b      	mov	r3, r1
    cdc6:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    cdc8:	687b      	ldr	r3, [r7, #4]
    cdca:	887a      	ldrh	r2, [r7, #2]
    cdcc:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    cdce:	bf00      	nop
    cdd0:	370c      	adds	r7, #12
    cdd2:	46bd      	mov	sp, r7
    cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdd8:	4770      	bx	lr

0000cdda <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    cdda:	b480      	push	{r7}
    cddc:	b083      	sub	sp, #12
    cdde:	af00      	add	r7, sp, #0
    cde0:	6078      	str	r0, [r7, #4]
    cde2:	460b      	mov	r3, r1
    cde4:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    cde6:	687b      	ldr	r3, [r7, #4]
    cde8:	78fa      	ldrb	r2, [r7, #3]
    cdea:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    cdec:	bf00      	nop
    cdee:	370c      	adds	r7, #12
    cdf0:	46bd      	mov	sp, r7
    cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdf6:	4770      	bx	lr

0000cdf8 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    cdf8:	b480      	push	{r7}
    cdfa:	b083      	sub	sp, #12
    cdfc:	af00      	add	r7, sp, #0
    cdfe:	6078      	str	r0, [r7, #4]
    ce00:	460b      	mov	r3, r1
    ce02:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    ce04:	687b      	ldr	r3, [r7, #4]
    ce06:	78fa      	ldrb	r2, [r7, #3]
    ce08:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    ce0a:	bf00      	nop
    ce0c:	370c      	adds	r7, #12
    ce0e:	46bd      	mov	sp, r7
    ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce14:	4770      	bx	lr
	...

0000ce18 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    ce18:	b580      	push	{r7, lr}
    ce1a:	b082      	sub	sp, #8
    ce1c:	af00      	add	r7, sp, #0
    ce1e:	6078      	str	r0, [r7, #4]
    ce20:	460b      	mov	r3, r1
    ce22:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    ce24:	687b      	ldr	r3, [r7, #4]
    ce26:	78fa      	ldrb	r2, [r7, #3]
    ce28:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    ce2a:	2120      	movs	r1, #32
    ce2c:	6878      	ldr	r0, [r7, #4]
    ce2e:	4b03      	ldr	r3, [pc, #12]	; (ce3c <hri_tccount8_write_PER_reg+0x24>)
    ce30:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ce32:	bf00      	nop
    ce34:	3708      	adds	r7, #8
    ce36:	46bd      	mov	sp, r7
    ce38:	bd80      	pop	{r7, pc}
    ce3a:	bf00      	nop
    ce3c:	0000cba5 	.word	0x0000cba5

0000ce40 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    ce40:	b580      	push	{r7, lr}
    ce42:	b082      	sub	sp, #8
    ce44:	af00      	add	r7, sp, #0
    ce46:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    ce48:	2120      	movs	r1, #32
    ce4a:	6878      	ldr	r0, [r7, #4]
    ce4c:	4b04      	ldr	r3, [pc, #16]	; (ce60 <hri_tccount8_read_PER_reg+0x20>)
    ce4e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    ce50:	687b      	ldr	r3, [r7, #4]
    ce52:	7edb      	ldrb	r3, [r3, #27]
    ce54:	b2db      	uxtb	r3, r3
}
    ce56:	4618      	mov	r0, r3
    ce58:	3708      	adds	r7, #8
    ce5a:	46bd      	mov	sp, r7
    ce5c:	bd80      	pop	{r7, pc}
    ce5e:	bf00      	nop
    ce60:	0000cba5 	.word	0x0000cba5

0000ce64 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    ce64:	b580      	push	{r7, lr}
    ce66:	b082      	sub	sp, #8
    ce68:	af00      	add	r7, sp, #0
    ce6a:	6078      	str	r0, [r7, #4]
    ce6c:	460b      	mov	r3, r1
    ce6e:	70fb      	strb	r3, [r7, #3]
    ce70:	4613      	mov	r3, r2
    ce72:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    ce74:	78fb      	ldrb	r3, [r7, #3]
    ce76:	687a      	ldr	r2, [r7, #4]
    ce78:	4413      	add	r3, r2
    ce7a:	78ba      	ldrb	r2, [r7, #2]
    ce7c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ce7e:	21c0      	movs	r1, #192	; 0xc0
    ce80:	6878      	ldr	r0, [r7, #4]
    ce82:	4b03      	ldr	r3, [pc, #12]	; (ce90 <hri_tccount8_write_CC_reg+0x2c>)
    ce84:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ce86:	bf00      	nop
    ce88:	3708      	adds	r7, #8
    ce8a:	46bd      	mov	sp, r7
    ce8c:	bd80      	pop	{r7, pc}
    ce8e:	bf00      	nop
    ce90:	0000cba5 	.word	0x0000cba5

0000ce94 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    ce94:	b580      	push	{r7, lr}
    ce96:	b082      	sub	sp, #8
    ce98:	af00      	add	r7, sp, #0
    ce9a:	6078      	str	r0, [r7, #4]
    ce9c:	460b      	mov	r3, r1
    ce9e:	70fb      	strb	r3, [r7, #3]
    cea0:	4613      	mov	r3, r2
    cea2:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    cea4:	78fb      	ldrb	r3, [r7, #3]
    cea6:	687a      	ldr	r2, [r7, #4]
    cea8:	330c      	adds	r3, #12
    ceaa:	005b      	lsls	r3, r3, #1
    ceac:	4413      	add	r3, r2
    ceae:	883a      	ldrh	r2, [r7, #0]
    ceb0:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ceb2:	21c0      	movs	r1, #192	; 0xc0
    ceb4:	6878      	ldr	r0, [r7, #4]
    ceb6:	4b03      	ldr	r3, [pc, #12]	; (cec4 <hri_tccount16_write_CC_reg+0x30>)
    ceb8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ceba:	bf00      	nop
    cebc:	3708      	adds	r7, #8
    cebe:	46bd      	mov	sp, r7
    cec0:	bd80      	pop	{r7, pc}
    cec2:	bf00      	nop
    cec4:	0000cba5 	.word	0x0000cba5

0000cec8 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    cec8:	b580      	push	{r7, lr}
    ceca:	b082      	sub	sp, #8
    cecc:	af00      	add	r7, sp, #0
    cece:	6078      	str	r0, [r7, #4]
    ced0:	460b      	mov	r3, r1
    ced2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ced4:	21c0      	movs	r1, #192	; 0xc0
    ced6:	6878      	ldr	r0, [r7, #4]
    ced8:	4b06      	ldr	r3, [pc, #24]	; (cef4 <hri_tccount16_read_CC_reg+0x2c>)
    ceda:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    cedc:	78fb      	ldrb	r3, [r7, #3]
    cede:	687a      	ldr	r2, [r7, #4]
    cee0:	330c      	adds	r3, #12
    cee2:	005b      	lsls	r3, r3, #1
    cee4:	4413      	add	r3, r2
    cee6:	889b      	ldrh	r3, [r3, #4]
    cee8:	b29b      	uxth	r3, r3
}
    ceea:	4618      	mov	r0, r3
    ceec:	3708      	adds	r7, #8
    ceee:	46bd      	mov	sp, r7
    cef0:	bd80      	pop	{r7, pc}
    cef2:	bf00      	nop
    cef4:	0000cba5 	.word	0x0000cba5

0000cef8 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    cef8:	b580      	push	{r7, lr}
    cefa:	b084      	sub	sp, #16
    cefc:	af00      	add	r7, sp, #0
    cefe:	60f8      	str	r0, [r7, #12]
    cf00:	460b      	mov	r3, r1
    cf02:	607a      	str	r2, [r7, #4]
    cf04:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    cf06:	7afb      	ldrb	r3, [r7, #11]
    cf08:	68fa      	ldr	r2, [r7, #12]
    cf0a:	3306      	adds	r3, #6
    cf0c:	009b      	lsls	r3, r3, #2
    cf0e:	4413      	add	r3, r2
    cf10:	687a      	ldr	r2, [r7, #4]
    cf12:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    cf14:	21c0      	movs	r1, #192	; 0xc0
    cf16:	68f8      	ldr	r0, [r7, #12]
    cf18:	4b02      	ldr	r3, [pc, #8]	; (cf24 <hri_tccount32_write_CC_reg+0x2c>)
    cf1a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cf1c:	bf00      	nop
    cf1e:	3710      	adds	r7, #16
    cf20:	46bd      	mov	sp, r7
    cf22:	bd80      	pop	{r7, pc}
    cf24:	0000cba5 	.word	0x0000cba5

0000cf28 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    cf28:	b580      	push	{r7, lr}
    cf2a:	b082      	sub	sp, #8
    cf2c:	af00      	add	r7, sp, #0
    cf2e:	6078      	str	r0, [r7, #4]
    cf30:	460b      	mov	r3, r1
    cf32:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    cf34:	21c0      	movs	r1, #192	; 0xc0
    cf36:	6878      	ldr	r0, [r7, #4]
    cf38:	4b05      	ldr	r3, [pc, #20]	; (cf50 <hri_tccount32_read_CC_reg+0x28>)
    cf3a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    cf3c:	78fb      	ldrb	r3, [r7, #3]
    cf3e:	687a      	ldr	r2, [r7, #4]
    cf40:	3306      	adds	r3, #6
    cf42:	009b      	lsls	r3, r3, #2
    cf44:	4413      	add	r3, r2
    cf46:	685b      	ldr	r3, [r3, #4]
}
    cf48:	4618      	mov	r0, r3
    cf4a:	3708      	adds	r7, #8
    cf4c:	46bd      	mov	sp, r7
    cf4e:	bd80      	pop	{r7, pc}
    cf50:	0000cba5 	.word	0x0000cba5

0000cf54 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    cf54:	b580      	push	{r7, lr}
    cf56:	b084      	sub	sp, #16
    cf58:	af00      	add	r7, sp, #0
    cf5a:	6078      	str	r0, [r7, #4]
    cf5c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    cf5e:	6838      	ldr	r0, [r7, #0]
    cf60:	4b93      	ldr	r3, [pc, #588]	; (d1b0 <_tc_timer_init+0x25c>)
    cf62:	4798      	blx	r3
    cf64:	4603      	mov	r3, r0
    cf66:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    cf68:	687b      	ldr	r3, [r7, #4]
    cf6a:	683a      	ldr	r2, [r7, #0]
    cf6c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    cf6e:	22a4      	movs	r2, #164	; 0xa4
    cf70:	4990      	ldr	r1, [pc, #576]	; (d1b4 <_tc_timer_init+0x260>)
    cf72:	2001      	movs	r0, #1
    cf74:	4b90      	ldr	r3, [pc, #576]	; (d1b8 <_tc_timer_init+0x264>)
    cf76:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    cf78:	2101      	movs	r1, #1
    cf7a:	6838      	ldr	r0, [r7, #0]
    cf7c:	4b8f      	ldr	r3, [pc, #572]	; (d1bc <_tc_timer_init+0x268>)
    cf7e:	4798      	blx	r3
    cf80:	4603      	mov	r3, r0
    cf82:	f083 0301 	eor.w	r3, r3, #1
    cf86:	b2db      	uxtb	r3, r3
    cf88:	2b00      	cmp	r3, #0
    cf8a:	d011      	beq.n	cfb0 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    cf8c:	2102      	movs	r1, #2
    cf8e:	6838      	ldr	r0, [r7, #0]
    cf90:	4b8b      	ldr	r3, [pc, #556]	; (d1c0 <_tc_timer_init+0x26c>)
    cf92:	4798      	blx	r3
    cf94:	4603      	mov	r3, r0
    cf96:	2b00      	cmp	r3, #0
    cf98:	d006      	beq.n	cfa8 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    cf9a:	6838      	ldr	r0, [r7, #0]
    cf9c:	4b89      	ldr	r3, [pc, #548]	; (d1c4 <_tc_timer_init+0x270>)
    cf9e:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    cfa0:	2102      	movs	r1, #2
    cfa2:	6838      	ldr	r0, [r7, #0]
    cfa4:	4b88      	ldr	r3, [pc, #544]	; (d1c8 <_tc_timer_init+0x274>)
    cfa6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    cfa8:	2101      	movs	r1, #1
    cfaa:	6838      	ldr	r0, [r7, #0]
    cfac:	4b87      	ldr	r3, [pc, #540]	; (d1cc <_tc_timer_init+0x278>)
    cfae:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    cfb0:	2101      	movs	r1, #1
    cfb2:	6838      	ldr	r0, [r7, #0]
    cfb4:	4b84      	ldr	r3, [pc, #528]	; (d1c8 <_tc_timer_init+0x274>)
    cfb6:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    cfb8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cfbc:	4984      	ldr	r1, [pc, #528]	; (d1d0 <_tc_timer_init+0x27c>)
    cfbe:	4613      	mov	r3, r2
    cfc0:	009b      	lsls	r3, r3, #2
    cfc2:	4413      	add	r3, r2
    cfc4:	009b      	lsls	r3, r3, #2
    cfc6:	440b      	add	r3, r1
    cfc8:	3304      	adds	r3, #4
    cfca:	681b      	ldr	r3, [r3, #0]
    cfcc:	4619      	mov	r1, r3
    cfce:	6838      	ldr	r0, [r7, #0]
    cfd0:	4b7e      	ldr	r3, [pc, #504]	; (d1cc <_tc_timer_init+0x278>)
    cfd2:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    cfd4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cfd8:	497d      	ldr	r1, [pc, #500]	; (d1d0 <_tc_timer_init+0x27c>)
    cfda:	4613      	mov	r3, r2
    cfdc:	009b      	lsls	r3, r3, #2
    cfde:	4413      	add	r3, r2
    cfe0:	009b      	lsls	r3, r3, #2
    cfe2:	440b      	add	r3, r1
    cfe4:	330a      	adds	r3, #10
    cfe6:	781b      	ldrb	r3, [r3, #0]
    cfe8:	4619      	mov	r1, r3
    cfea:	6838      	ldr	r0, [r7, #0]
    cfec:	4b79      	ldr	r3, [pc, #484]	; (d1d4 <_tc_timer_init+0x280>)
    cfee:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    cff0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cff4:	4976      	ldr	r1, [pc, #472]	; (d1d0 <_tc_timer_init+0x27c>)
    cff6:	4613      	mov	r3, r2
    cff8:	009b      	lsls	r3, r3, #2
    cffa:	4413      	add	r3, r2
    cffc:	009b      	lsls	r3, r3, #2
    cffe:	440b      	add	r3, r1
    d000:	3308      	adds	r3, #8
    d002:	881b      	ldrh	r3, [r3, #0]
    d004:	4619      	mov	r1, r3
    d006:	6838      	ldr	r0, [r7, #0]
    d008:	4b73      	ldr	r3, [pc, #460]	; (d1d8 <_tc_timer_init+0x284>)
    d00a:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    d00c:	2101      	movs	r1, #1
    d00e:	6838      	ldr	r0, [r7, #0]
    d010:	4b72      	ldr	r3, [pc, #456]	; (d1dc <_tc_timer_init+0x288>)
    d012:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    d014:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d018:	496d      	ldr	r1, [pc, #436]	; (d1d0 <_tc_timer_init+0x27c>)
    d01a:	4613      	mov	r3, r2
    d01c:	009b      	lsls	r3, r3, #2
    d01e:	4413      	add	r3, r2
    d020:	009b      	lsls	r3, r3, #2
    d022:	440b      	add	r3, r1
    d024:	3304      	adds	r3, #4
    d026:	681b      	ldr	r3, [r3, #0]
    d028:	f003 030c 	and.w	r3, r3, #12
    d02c:	2b08      	cmp	r3, #8
    d02e:	d11e      	bne.n	d06e <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    d030:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d034:	4966      	ldr	r1, [pc, #408]	; (d1d0 <_tc_timer_init+0x27c>)
    d036:	4613      	mov	r3, r2
    d038:	009b      	lsls	r3, r3, #2
    d03a:	4413      	add	r3, r2
    d03c:	009b      	lsls	r3, r3, #2
    d03e:	440b      	add	r3, r1
    d040:	330c      	adds	r3, #12
    d042:	681b      	ldr	r3, [r3, #0]
    d044:	461a      	mov	r2, r3
    d046:	2100      	movs	r1, #0
    d048:	6838      	ldr	r0, [r7, #0]
    d04a:	4b65      	ldr	r3, [pc, #404]	; (d1e0 <_tc_timer_init+0x28c>)
    d04c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    d04e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d052:	495f      	ldr	r1, [pc, #380]	; (d1d0 <_tc_timer_init+0x27c>)
    d054:	4613      	mov	r3, r2
    d056:	009b      	lsls	r3, r3, #2
    d058:	4413      	add	r3, r2
    d05a:	009b      	lsls	r3, r3, #2
    d05c:	440b      	add	r3, r1
    d05e:	3310      	adds	r3, #16
    d060:	681b      	ldr	r3, [r3, #0]
    d062:	461a      	mov	r2, r3
    d064:	2101      	movs	r1, #1
    d066:	6838      	ldr	r0, [r7, #0]
    d068:	4b5d      	ldr	r3, [pc, #372]	; (d1e0 <_tc_timer_init+0x28c>)
    d06a:	4798      	blx	r3
    d06c:	e06a      	b.n	d144 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    d06e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d072:	4957      	ldr	r1, [pc, #348]	; (d1d0 <_tc_timer_init+0x27c>)
    d074:	4613      	mov	r3, r2
    d076:	009b      	lsls	r3, r3, #2
    d078:	4413      	add	r3, r2
    d07a:	009b      	lsls	r3, r3, #2
    d07c:	440b      	add	r3, r1
    d07e:	3304      	adds	r3, #4
    d080:	681b      	ldr	r3, [r3, #0]
    d082:	f003 030c 	and.w	r3, r3, #12
    d086:	2b00      	cmp	r3, #0
    d088:	d120      	bne.n	d0cc <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    d08a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d08e:	4950      	ldr	r1, [pc, #320]	; (d1d0 <_tc_timer_init+0x27c>)
    d090:	4613      	mov	r3, r2
    d092:	009b      	lsls	r3, r3, #2
    d094:	4413      	add	r3, r2
    d096:	009b      	lsls	r3, r3, #2
    d098:	440b      	add	r3, r1
    d09a:	330c      	adds	r3, #12
    d09c:	681b      	ldr	r3, [r3, #0]
    d09e:	b29b      	uxth	r3, r3
    d0a0:	461a      	mov	r2, r3
    d0a2:	2100      	movs	r1, #0
    d0a4:	6838      	ldr	r0, [r7, #0]
    d0a6:	4b4f      	ldr	r3, [pc, #316]	; (d1e4 <_tc_timer_init+0x290>)
    d0a8:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    d0aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d0ae:	4948      	ldr	r1, [pc, #288]	; (d1d0 <_tc_timer_init+0x27c>)
    d0b0:	4613      	mov	r3, r2
    d0b2:	009b      	lsls	r3, r3, #2
    d0b4:	4413      	add	r3, r2
    d0b6:	009b      	lsls	r3, r3, #2
    d0b8:	440b      	add	r3, r1
    d0ba:	3310      	adds	r3, #16
    d0bc:	681b      	ldr	r3, [r3, #0]
    d0be:	b29b      	uxth	r3, r3
    d0c0:	461a      	mov	r2, r3
    d0c2:	2101      	movs	r1, #1
    d0c4:	6838      	ldr	r0, [r7, #0]
    d0c6:	4b47      	ldr	r3, [pc, #284]	; (d1e4 <_tc_timer_init+0x290>)
    d0c8:	4798      	blx	r3
    d0ca:	e03b      	b.n	d144 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    d0cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d0d0:	493f      	ldr	r1, [pc, #252]	; (d1d0 <_tc_timer_init+0x27c>)
    d0d2:	4613      	mov	r3, r2
    d0d4:	009b      	lsls	r3, r3, #2
    d0d6:	4413      	add	r3, r2
    d0d8:	009b      	lsls	r3, r3, #2
    d0da:	440b      	add	r3, r1
    d0dc:	3304      	adds	r3, #4
    d0de:	681b      	ldr	r3, [r3, #0]
    d0e0:	f003 030c 	and.w	r3, r3, #12
    d0e4:	2b04      	cmp	r3, #4
    d0e6:	d12d      	bne.n	d144 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    d0e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d0ec:	4938      	ldr	r1, [pc, #224]	; (d1d0 <_tc_timer_init+0x27c>)
    d0ee:	4613      	mov	r3, r2
    d0f0:	009b      	lsls	r3, r3, #2
    d0f2:	4413      	add	r3, r2
    d0f4:	009b      	lsls	r3, r3, #2
    d0f6:	440b      	add	r3, r1
    d0f8:	330c      	adds	r3, #12
    d0fa:	681b      	ldr	r3, [r3, #0]
    d0fc:	b2db      	uxtb	r3, r3
    d0fe:	461a      	mov	r2, r3
    d100:	2100      	movs	r1, #0
    d102:	6838      	ldr	r0, [r7, #0]
    d104:	4b38      	ldr	r3, [pc, #224]	; (d1e8 <_tc_timer_init+0x294>)
    d106:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    d108:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d10c:	4930      	ldr	r1, [pc, #192]	; (d1d0 <_tc_timer_init+0x27c>)
    d10e:	4613      	mov	r3, r2
    d110:	009b      	lsls	r3, r3, #2
    d112:	4413      	add	r3, r2
    d114:	009b      	lsls	r3, r3, #2
    d116:	440b      	add	r3, r1
    d118:	3310      	adds	r3, #16
    d11a:	681b      	ldr	r3, [r3, #0]
    d11c:	b2db      	uxtb	r3, r3
    d11e:	461a      	mov	r2, r3
    d120:	2101      	movs	r1, #1
    d122:	6838      	ldr	r0, [r7, #0]
    d124:	4b30      	ldr	r3, [pc, #192]	; (d1e8 <_tc_timer_init+0x294>)
    d126:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    d128:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d12c:	4928      	ldr	r1, [pc, #160]	; (d1d0 <_tc_timer_init+0x27c>)
    d12e:	4613      	mov	r3, r2
    d130:	009b      	lsls	r3, r3, #2
    d132:	4413      	add	r3, r2
    d134:	009b      	lsls	r3, r3, #2
    d136:	440b      	add	r3, r1
    d138:	330b      	adds	r3, #11
    d13a:	781b      	ldrb	r3, [r3, #0]
    d13c:	4619      	mov	r1, r3
    d13e:	6838      	ldr	r0, [r7, #0]
    d140:	4b2a      	ldr	r3, [pc, #168]	; (d1ec <_tc_timer_init+0x298>)
    d142:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    d144:	6838      	ldr	r0, [r7, #0]
    d146:	4b2a      	ldr	r3, [pc, #168]	; (d1f0 <_tc_timer_init+0x29c>)
    d148:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    d14a:	6879      	ldr	r1, [r7, #4]
    d14c:	6838      	ldr	r0, [r7, #0]
    d14e:	4b29      	ldr	r3, [pc, #164]	; (d1f4 <_tc_timer_init+0x2a0>)
    d150:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    d152:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d156:	491e      	ldr	r1, [pc, #120]	; (d1d0 <_tc_timer_init+0x27c>)
    d158:	4613      	mov	r3, r2
    d15a:	009b      	lsls	r3, r3, #2
    d15c:	4413      	add	r3, r2
    d15e:	009b      	lsls	r3, r3, #2
    d160:	440b      	add	r3, r1
    d162:	3302      	adds	r3, #2
    d164:	f9b3 3000 	ldrsh.w	r3, [r3]
    d168:	4618      	mov	r0, r3
    d16a:	4b23      	ldr	r3, [pc, #140]	; (d1f8 <_tc_timer_init+0x2a4>)
    d16c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    d16e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d172:	4917      	ldr	r1, [pc, #92]	; (d1d0 <_tc_timer_init+0x27c>)
    d174:	4613      	mov	r3, r2
    d176:	009b      	lsls	r3, r3, #2
    d178:	4413      	add	r3, r2
    d17a:	009b      	lsls	r3, r3, #2
    d17c:	440b      	add	r3, r1
    d17e:	3302      	adds	r3, #2
    d180:	f9b3 3000 	ldrsh.w	r3, [r3]
    d184:	4618      	mov	r0, r3
    d186:	4b1d      	ldr	r3, [pc, #116]	; (d1fc <_tc_timer_init+0x2a8>)
    d188:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    d18a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d18e:	4910      	ldr	r1, [pc, #64]	; (d1d0 <_tc_timer_init+0x27c>)
    d190:	4613      	mov	r3, r2
    d192:	009b      	lsls	r3, r3, #2
    d194:	4413      	add	r3, r2
    d196:	009b      	lsls	r3, r3, #2
    d198:	440b      	add	r3, r1
    d19a:	3302      	adds	r3, #2
    d19c:	f9b3 3000 	ldrsh.w	r3, [r3]
    d1a0:	4618      	mov	r0, r3
    d1a2:	4b17      	ldr	r3, [pc, #92]	; (d200 <_tc_timer_init+0x2ac>)
    d1a4:	4798      	blx	r3

	return ERR_NONE;
    d1a6:	2300      	movs	r3, #0
}
    d1a8:	4618      	mov	r0, r3
    d1aa:	3710      	adds	r7, #16
    d1ac:	46bd      	mov	sp, r7
    d1ae:	bd80      	pop	{r7, pc}
    d1b0:	0000d7e5 	.word	0x0000d7e5
    d1b4:	00021c28 	.word	0x00021c28
    d1b8:	00007e21 	.word	0x00007e21
    d1bc:	0000cbc9 	.word	0x0000cbc9
    d1c0:	0000cd69 	.word	0x0000cd69
    d1c4:	0000cd19 	.word	0x0000cd19
    d1c8:	0000cba5 	.word	0x0000cba5
    d1cc:	0000cd99 	.word	0x0000cd99
    d1d0:	20000144 	.word	0x20000144
    d1d4:	0000cdf9 	.word	0x0000cdf9
    d1d8:	0000cdbd 	.word	0x0000cdbd
    d1dc:	0000cddb 	.word	0x0000cddb
    d1e0:	0000cef9 	.word	0x0000cef9
    d1e4:	0000ce95 	.word	0x0000ce95
    d1e8:	0000ce65 	.word	0x0000ce65
    d1ec:	0000ce19 	.word	0x0000ce19
    d1f0:	0000cc4d 	.word	0x0000cc4d
    d1f4:	0000d84d 	.word	0x0000d84d
    d1f8:	0000cb25 	.word	0x0000cb25
    d1fc:	0000cb69 	.word	0x0000cb69
    d200:	0000cae9 	.word	0x0000cae9

0000d204 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    d204:	b580      	push	{r7, lr}
    d206:	b084      	sub	sp, #16
    d208:	af00      	add	r7, sp, #0
    d20a:	6078      	str	r0, [r7, #4]
    d20c:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    d20e:	6838      	ldr	r0, [r7, #0]
    d210:	4b73      	ldr	r3, [pc, #460]	; (d3e0 <_pwm_init+0x1dc>)
    d212:	4798      	blx	r3
    d214:	4603      	mov	r3, r0
    d216:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    d218:	687b      	ldr	r3, [r7, #4]
    d21a:	683a      	ldr	r2, [r7, #0]
    d21c:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    d21e:	2101      	movs	r1, #1
    d220:	6838      	ldr	r0, [r7, #0]
    d222:	4b70      	ldr	r3, [pc, #448]	; (d3e4 <_pwm_init+0x1e0>)
    d224:	4798      	blx	r3
    d226:	4603      	mov	r3, r0
    d228:	f083 0301 	eor.w	r3, r3, #1
    d22c:	b2db      	uxtb	r3, r3
    d22e:	2b00      	cmp	r3, #0
    d230:	d011      	beq.n	d256 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    d232:	2102      	movs	r1, #2
    d234:	6838      	ldr	r0, [r7, #0]
    d236:	4b6c      	ldr	r3, [pc, #432]	; (d3e8 <_pwm_init+0x1e4>)
    d238:	4798      	blx	r3
    d23a:	4603      	mov	r3, r0
    d23c:	2b00      	cmp	r3, #0
    d23e:	d006      	beq.n	d24e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d240:	6838      	ldr	r0, [r7, #0]
    d242:	4b6a      	ldr	r3, [pc, #424]	; (d3ec <_pwm_init+0x1e8>)
    d244:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    d246:	2102      	movs	r1, #2
    d248:	6838      	ldr	r0, [r7, #0]
    d24a:	4b69      	ldr	r3, [pc, #420]	; (d3f0 <_pwm_init+0x1ec>)
    d24c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    d24e:	2101      	movs	r1, #1
    d250:	6838      	ldr	r0, [r7, #0]
    d252:	4b68      	ldr	r3, [pc, #416]	; (d3f4 <_pwm_init+0x1f0>)
    d254:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    d256:	2101      	movs	r1, #1
    d258:	6838      	ldr	r0, [r7, #0]
    d25a:	4b65      	ldr	r3, [pc, #404]	; (d3f0 <_pwm_init+0x1ec>)
    d25c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    d25e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d262:	4965      	ldr	r1, [pc, #404]	; (d3f8 <_pwm_init+0x1f4>)
    d264:	4613      	mov	r3, r2
    d266:	009b      	lsls	r3, r3, #2
    d268:	4413      	add	r3, r2
    d26a:	009b      	lsls	r3, r3, #2
    d26c:	440b      	add	r3, r1
    d26e:	3304      	adds	r3, #4
    d270:	681b      	ldr	r3, [r3, #0]
    d272:	4619      	mov	r1, r3
    d274:	6838      	ldr	r0, [r7, #0]
    d276:	4b5f      	ldr	r3, [pc, #380]	; (d3f4 <_pwm_init+0x1f0>)
    d278:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    d27a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d27e:	495e      	ldr	r1, [pc, #376]	; (d3f8 <_pwm_init+0x1f4>)
    d280:	4613      	mov	r3, r2
    d282:	009b      	lsls	r3, r3, #2
    d284:	4413      	add	r3, r2
    d286:	009b      	lsls	r3, r3, #2
    d288:	440b      	add	r3, r1
    d28a:	330a      	adds	r3, #10
    d28c:	781b      	ldrb	r3, [r3, #0]
    d28e:	4619      	mov	r1, r3
    d290:	6838      	ldr	r0, [r7, #0]
    d292:	4b5a      	ldr	r3, [pc, #360]	; (d3fc <_pwm_init+0x1f8>)
    d294:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    d296:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d29a:	4957      	ldr	r1, [pc, #348]	; (d3f8 <_pwm_init+0x1f4>)
    d29c:	4613      	mov	r3, r2
    d29e:	009b      	lsls	r3, r3, #2
    d2a0:	4413      	add	r3, r2
    d2a2:	009b      	lsls	r3, r3, #2
    d2a4:	440b      	add	r3, r1
    d2a6:	3308      	adds	r3, #8
    d2a8:	881b      	ldrh	r3, [r3, #0]
    d2aa:	4619      	mov	r1, r3
    d2ac:	6838      	ldr	r0, [r7, #0]
    d2ae:	4b54      	ldr	r3, [pc, #336]	; (d400 <_pwm_init+0x1fc>)
    d2b0:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    d2b2:	2103      	movs	r1, #3
    d2b4:	6838      	ldr	r0, [r7, #0]
    d2b6:	4b53      	ldr	r3, [pc, #332]	; (d404 <_pwm_init+0x200>)
    d2b8:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    d2ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d2be:	494e      	ldr	r1, [pc, #312]	; (d3f8 <_pwm_init+0x1f4>)
    d2c0:	4613      	mov	r3, r2
    d2c2:	009b      	lsls	r3, r3, #2
    d2c4:	4413      	add	r3, r2
    d2c6:	009b      	lsls	r3, r3, #2
    d2c8:	440b      	add	r3, r1
    d2ca:	3304      	adds	r3, #4
    d2cc:	681b      	ldr	r3, [r3, #0]
    d2ce:	f003 030c 	and.w	r3, r3, #12
    d2d2:	2b08      	cmp	r3, #8
    d2d4:	d11e      	bne.n	d314 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    d2d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d2da:	4947      	ldr	r1, [pc, #284]	; (d3f8 <_pwm_init+0x1f4>)
    d2dc:	4613      	mov	r3, r2
    d2de:	009b      	lsls	r3, r3, #2
    d2e0:	4413      	add	r3, r2
    d2e2:	009b      	lsls	r3, r3, #2
    d2e4:	440b      	add	r3, r1
    d2e6:	330c      	adds	r3, #12
    d2e8:	681b      	ldr	r3, [r3, #0]
    d2ea:	461a      	mov	r2, r3
    d2ec:	2100      	movs	r1, #0
    d2ee:	6838      	ldr	r0, [r7, #0]
    d2f0:	4b45      	ldr	r3, [pc, #276]	; (d408 <_pwm_init+0x204>)
    d2f2:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    d2f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d2f8:	493f      	ldr	r1, [pc, #252]	; (d3f8 <_pwm_init+0x1f4>)
    d2fa:	4613      	mov	r3, r2
    d2fc:	009b      	lsls	r3, r3, #2
    d2fe:	4413      	add	r3, r2
    d300:	009b      	lsls	r3, r3, #2
    d302:	440b      	add	r3, r1
    d304:	3310      	adds	r3, #16
    d306:	681b      	ldr	r3, [r3, #0]
    d308:	461a      	mov	r2, r3
    d30a:	2101      	movs	r1, #1
    d30c:	6838      	ldr	r0, [r7, #0]
    d30e:	4b3e      	ldr	r3, [pc, #248]	; (d408 <_pwm_init+0x204>)
    d310:	4798      	blx	r3
    d312:	e031      	b.n	d378 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    d314:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d318:	4937      	ldr	r1, [pc, #220]	; (d3f8 <_pwm_init+0x1f4>)
    d31a:	4613      	mov	r3, r2
    d31c:	009b      	lsls	r3, r3, #2
    d31e:	4413      	add	r3, r2
    d320:	009b      	lsls	r3, r3, #2
    d322:	440b      	add	r3, r1
    d324:	3304      	adds	r3, #4
    d326:	681b      	ldr	r3, [r3, #0]
    d328:	f003 030c 	and.w	r3, r3, #12
    d32c:	2b00      	cmp	r3, #0
    d32e:	d120      	bne.n	d372 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    d330:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d334:	4930      	ldr	r1, [pc, #192]	; (d3f8 <_pwm_init+0x1f4>)
    d336:	4613      	mov	r3, r2
    d338:	009b      	lsls	r3, r3, #2
    d33a:	4413      	add	r3, r2
    d33c:	009b      	lsls	r3, r3, #2
    d33e:	440b      	add	r3, r1
    d340:	330c      	adds	r3, #12
    d342:	681b      	ldr	r3, [r3, #0]
    d344:	b29b      	uxth	r3, r3
    d346:	461a      	mov	r2, r3
    d348:	2100      	movs	r1, #0
    d34a:	6838      	ldr	r0, [r7, #0]
    d34c:	4b2f      	ldr	r3, [pc, #188]	; (d40c <_pwm_init+0x208>)
    d34e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    d350:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d354:	4928      	ldr	r1, [pc, #160]	; (d3f8 <_pwm_init+0x1f4>)
    d356:	4613      	mov	r3, r2
    d358:	009b      	lsls	r3, r3, #2
    d35a:	4413      	add	r3, r2
    d35c:	009b      	lsls	r3, r3, #2
    d35e:	440b      	add	r3, r1
    d360:	3310      	adds	r3, #16
    d362:	681b      	ldr	r3, [r3, #0]
    d364:	b29b      	uxth	r3, r3
    d366:	461a      	mov	r2, r3
    d368:	2101      	movs	r1, #1
    d36a:	6838      	ldr	r0, [r7, #0]
    d36c:	4b27      	ldr	r3, [pc, #156]	; (d40c <_pwm_init+0x208>)
    d36e:	4798      	blx	r3
    d370:	e002      	b.n	d378 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    d372:	f04f 33ff 	mov.w	r3, #4294967295
    d376:	e02e      	b.n	d3d6 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    d378:	6879      	ldr	r1, [r7, #4]
    d37a:	6838      	ldr	r0, [r7, #0]
    d37c:	4b24      	ldr	r3, [pc, #144]	; (d410 <_pwm_init+0x20c>)
    d37e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    d380:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d384:	491c      	ldr	r1, [pc, #112]	; (d3f8 <_pwm_init+0x1f4>)
    d386:	4613      	mov	r3, r2
    d388:	009b      	lsls	r3, r3, #2
    d38a:	4413      	add	r3, r2
    d38c:	009b      	lsls	r3, r3, #2
    d38e:	440b      	add	r3, r1
    d390:	3302      	adds	r3, #2
    d392:	f9b3 3000 	ldrsh.w	r3, [r3]
    d396:	4618      	mov	r0, r3
    d398:	4b1e      	ldr	r3, [pc, #120]	; (d414 <_pwm_init+0x210>)
    d39a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    d39c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d3a0:	4915      	ldr	r1, [pc, #84]	; (d3f8 <_pwm_init+0x1f4>)
    d3a2:	4613      	mov	r3, r2
    d3a4:	009b      	lsls	r3, r3, #2
    d3a6:	4413      	add	r3, r2
    d3a8:	009b      	lsls	r3, r3, #2
    d3aa:	440b      	add	r3, r1
    d3ac:	3302      	adds	r3, #2
    d3ae:	f9b3 3000 	ldrsh.w	r3, [r3]
    d3b2:	4618      	mov	r0, r3
    d3b4:	4b18      	ldr	r3, [pc, #96]	; (d418 <_pwm_init+0x214>)
    d3b6:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    d3b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d3bc:	490e      	ldr	r1, [pc, #56]	; (d3f8 <_pwm_init+0x1f4>)
    d3be:	4613      	mov	r3, r2
    d3c0:	009b      	lsls	r3, r3, #2
    d3c2:	4413      	add	r3, r2
    d3c4:	009b      	lsls	r3, r3, #2
    d3c6:	440b      	add	r3, r1
    d3c8:	3302      	adds	r3, #2
    d3ca:	f9b3 3000 	ldrsh.w	r3, [r3]
    d3ce:	4618      	mov	r0, r3
    d3d0:	4b12      	ldr	r3, [pc, #72]	; (d41c <_pwm_init+0x218>)
    d3d2:	4798      	blx	r3

	return 0;
    d3d4:	2300      	movs	r3, #0
}
    d3d6:	4618      	mov	r0, r3
    d3d8:	3710      	adds	r7, #16
    d3da:	46bd      	mov	sp, r7
    d3dc:	bd80      	pop	{r7, pc}
    d3de:	bf00      	nop
    d3e0:	0000d7e5 	.word	0x0000d7e5
    d3e4:	0000cbc9 	.word	0x0000cbc9
    d3e8:	0000cd69 	.word	0x0000cd69
    d3ec:	0000cd19 	.word	0x0000cd19
    d3f0:	0000cba5 	.word	0x0000cba5
    d3f4:	0000cd99 	.word	0x0000cd99
    d3f8:	20000144 	.word	0x20000144
    d3fc:	0000cdf9 	.word	0x0000cdf9
    d400:	0000cdbd 	.word	0x0000cdbd
    d404:	0000cddb 	.word	0x0000cddb
    d408:	0000cef9 	.word	0x0000cef9
    d40c:	0000ce95 	.word	0x0000ce95
    d410:	0000d84d 	.word	0x0000d84d
    d414:	0000cb25 	.word	0x0000cb25
    d418:	0000cb69 	.word	0x0000cb69
    d41c:	0000cae9 	.word	0x0000cae9

0000d420 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    d420:	b580      	push	{r7, lr}
    d422:	b084      	sub	sp, #16
    d424:	af00      	add	r7, sp, #0
    d426:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d428:	687b      	ldr	r3, [r7, #4]
    d42a:	68db      	ldr	r3, [r3, #12]
    d42c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    d42e:	68f8      	ldr	r0, [r7, #12]
    d430:	4b10      	ldr	r3, [pc, #64]	; (d474 <_tc_timer_deinit+0x54>)
    d432:	4798      	blx	r3
    d434:	4603      	mov	r3, r0
    d436:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    d438:	22f9      	movs	r2, #249	; 0xf9
    d43a:	490f      	ldr	r1, [pc, #60]	; (d478 <_tc_timer_deinit+0x58>)
    d43c:	2001      	movs	r0, #1
    d43e:	4b0f      	ldr	r3, [pc, #60]	; (d47c <_tc_timer_deinit+0x5c>)
    d440:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    d442:	f997 200b 	ldrsb.w	r2, [r7, #11]
    d446:	490e      	ldr	r1, [pc, #56]	; (d480 <_tc_timer_deinit+0x60>)
    d448:	4613      	mov	r3, r2
    d44a:	009b      	lsls	r3, r3, #2
    d44c:	4413      	add	r3, r2
    d44e:	009b      	lsls	r3, r3, #2
    d450:	440b      	add	r3, r1
    d452:	3302      	adds	r3, #2
    d454:	f9b3 3000 	ldrsh.w	r3, [r3]
    d458:	4618      	mov	r0, r3
    d45a:	4b0a      	ldr	r3, [pc, #40]	; (d484 <_tc_timer_deinit+0x64>)
    d45c:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d45e:	68f8      	ldr	r0, [r7, #12]
    d460:	4b09      	ldr	r3, [pc, #36]	; (d488 <_tc_timer_deinit+0x68>)
    d462:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    d464:	68f8      	ldr	r0, [r7, #12]
    d466:	4b09      	ldr	r3, [pc, #36]	; (d48c <_tc_timer_deinit+0x6c>)
    d468:	4798      	blx	r3
}
    d46a:	bf00      	nop
    d46c:	3710      	adds	r7, #16
    d46e:	46bd      	mov	sp, r7
    d470:	bd80      	pop	{r7, pc}
    d472:	bf00      	nop
    d474:	0000d7e5 	.word	0x0000d7e5
    d478:	00021c28 	.word	0x00021c28
    d47c:	00007e21 	.word	0x00007e21
    d480:	20000144 	.word	0x20000144
    d484:	0000cb25 	.word	0x0000cb25
    d488:	0000cd19 	.word	0x0000cd19
    d48c:	0000cc91 	.word	0x0000cc91

0000d490 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    d490:	b580      	push	{r7, lr}
    d492:	b082      	sub	sp, #8
    d494:	af00      	add	r7, sp, #0
    d496:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    d498:	687b      	ldr	r3, [r7, #4]
    d49a:	68db      	ldr	r3, [r3, #12]
    d49c:	4618      	mov	r0, r3
    d49e:	4b03      	ldr	r3, [pc, #12]	; (d4ac <_tc_timer_start+0x1c>)
    d4a0:	4798      	blx	r3
}
    d4a2:	bf00      	nop
    d4a4:	3708      	adds	r7, #8
    d4a6:	46bd      	mov	sp, r7
    d4a8:	bd80      	pop	{r7, pc}
    d4aa:	bf00      	nop
    d4ac:	0000ccb9 	.word	0x0000ccb9

0000d4b0 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    d4b0:	b580      	push	{r7, lr}
    d4b2:	b082      	sub	sp, #8
    d4b4:	af00      	add	r7, sp, #0
    d4b6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    d4b8:	687b      	ldr	r3, [r7, #4]
    d4ba:	691b      	ldr	r3, [r3, #16]
    d4bc:	4618      	mov	r0, r3
    d4be:	4b03      	ldr	r3, [pc, #12]	; (d4cc <_pwm_enable+0x1c>)
    d4c0:	4798      	blx	r3
}
    d4c2:	bf00      	nop
    d4c4:	3708      	adds	r7, #8
    d4c6:	46bd      	mov	sp, r7
    d4c8:	bd80      	pop	{r7, pc}
    d4ca:	bf00      	nop
    d4cc:	0000ccb9 	.word	0x0000ccb9

0000d4d0 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    d4d0:	b580      	push	{r7, lr}
    d4d2:	b082      	sub	sp, #8
    d4d4:	af00      	add	r7, sp, #0
    d4d6:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    d4d8:	687b      	ldr	r3, [r7, #4]
    d4da:	68db      	ldr	r3, [r3, #12]
    d4dc:	4618      	mov	r0, r3
    d4de:	4b03      	ldr	r3, [pc, #12]	; (d4ec <_tc_timer_stop+0x1c>)
    d4e0:	4798      	blx	r3
}
    d4e2:	bf00      	nop
    d4e4:	3708      	adds	r7, #8
    d4e6:	46bd      	mov	sp, r7
    d4e8:	bd80      	pop	{r7, pc}
    d4ea:	bf00      	nop
    d4ec:	0000cd19 	.word	0x0000cd19

0000d4f0 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    d4f0:	b580      	push	{r7, lr}
    d4f2:	b084      	sub	sp, #16
    d4f4:	af00      	add	r7, sp, #0
    d4f6:	6078      	str	r0, [r7, #4]
    d4f8:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    d4fa:	687b      	ldr	r3, [r7, #4]
    d4fc:	68db      	ldr	r3, [r3, #12]
    d4fe:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d500:	68f8      	ldr	r0, [r7, #12]
    d502:	4b14      	ldr	r3, [pc, #80]	; (d554 <_tc_timer_set_period+0x64>)
    d504:	4798      	blx	r3
    d506:	4603      	mov	r3, r0
    d508:	2b02      	cmp	r3, #2
    d50a:	d105      	bne.n	d518 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    d50c:	683a      	ldr	r2, [r7, #0]
    d50e:	2100      	movs	r1, #0
    d510:	68f8      	ldr	r0, [r7, #12]
    d512:	4b11      	ldr	r3, [pc, #68]	; (d558 <_tc_timer_set_period+0x68>)
    d514:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    d516:	e019      	b.n	d54c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d518:	68f8      	ldr	r0, [r7, #12]
    d51a:	4b0e      	ldr	r3, [pc, #56]	; (d554 <_tc_timer_set_period+0x64>)
    d51c:	4798      	blx	r3
    d51e:	4603      	mov	r3, r0
    d520:	2b00      	cmp	r3, #0
    d522:	d107      	bne.n	d534 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    d524:	683b      	ldr	r3, [r7, #0]
    d526:	b29b      	uxth	r3, r3
    d528:	461a      	mov	r2, r3
    d52a:	2100      	movs	r1, #0
    d52c:	68f8      	ldr	r0, [r7, #12]
    d52e:	4b0b      	ldr	r3, [pc, #44]	; (d55c <_tc_timer_set_period+0x6c>)
    d530:	4798      	blx	r3
}
    d532:	e00b      	b.n	d54c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d534:	68f8      	ldr	r0, [r7, #12]
    d536:	4b07      	ldr	r3, [pc, #28]	; (d554 <_tc_timer_set_period+0x64>)
    d538:	4798      	blx	r3
    d53a:	4603      	mov	r3, r0
    d53c:	2b01      	cmp	r3, #1
    d53e:	d105      	bne.n	d54c <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    d540:	683b      	ldr	r3, [r7, #0]
    d542:	b2db      	uxtb	r3, r3
    d544:	4619      	mov	r1, r3
    d546:	68f8      	ldr	r0, [r7, #12]
    d548:	4b05      	ldr	r3, [pc, #20]	; (d560 <_tc_timer_set_period+0x70>)
    d54a:	4798      	blx	r3
}
    d54c:	bf00      	nop
    d54e:	3710      	adds	r7, #16
    d550:	46bd      	mov	sp, r7
    d552:	bd80      	pop	{r7, pc}
    d554:	0000cd41 	.word	0x0000cd41
    d558:	0000cef9 	.word	0x0000cef9
    d55c:	0000ce95 	.word	0x0000ce95
    d560:	0000ce19 	.word	0x0000ce19

0000d564 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    d564:	b580      	push	{r7, lr}
    d566:	b084      	sub	sp, #16
    d568:	af00      	add	r7, sp, #0
    d56a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d56c:	687b      	ldr	r3, [r7, #4]
    d56e:	68db      	ldr	r3, [r3, #12]
    d570:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d572:	68f8      	ldr	r0, [r7, #12]
    d574:	4b13      	ldr	r3, [pc, #76]	; (d5c4 <_tc_timer_get_period+0x60>)
    d576:	4798      	blx	r3
    d578:	4603      	mov	r3, r0
    d57a:	2b02      	cmp	r3, #2
    d57c:	d105      	bne.n	d58a <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    d57e:	2100      	movs	r1, #0
    d580:	68f8      	ldr	r0, [r7, #12]
    d582:	4b11      	ldr	r3, [pc, #68]	; (d5c8 <_tc_timer_get_period+0x64>)
    d584:	4798      	blx	r3
    d586:	4603      	mov	r3, r0
    d588:	e017      	b.n	d5ba <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d58a:	68f8      	ldr	r0, [r7, #12]
    d58c:	4b0d      	ldr	r3, [pc, #52]	; (d5c4 <_tc_timer_get_period+0x60>)
    d58e:	4798      	blx	r3
    d590:	4603      	mov	r3, r0
    d592:	2b00      	cmp	r3, #0
    d594:	d105      	bne.n	d5a2 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    d596:	2100      	movs	r1, #0
    d598:	68f8      	ldr	r0, [r7, #12]
    d59a:	4b0c      	ldr	r3, [pc, #48]	; (d5cc <_tc_timer_get_period+0x68>)
    d59c:	4798      	blx	r3
    d59e:	4603      	mov	r3, r0
    d5a0:	e00b      	b.n	d5ba <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d5a2:	68f8      	ldr	r0, [r7, #12]
    d5a4:	4b07      	ldr	r3, [pc, #28]	; (d5c4 <_tc_timer_get_period+0x60>)
    d5a6:	4798      	blx	r3
    d5a8:	4603      	mov	r3, r0
    d5aa:	2b01      	cmp	r3, #1
    d5ac:	d104      	bne.n	d5b8 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    d5ae:	68f8      	ldr	r0, [r7, #12]
    d5b0:	4b07      	ldr	r3, [pc, #28]	; (d5d0 <_tc_timer_get_period+0x6c>)
    d5b2:	4798      	blx	r3
    d5b4:	4603      	mov	r3, r0
    d5b6:	e000      	b.n	d5ba <_tc_timer_get_period+0x56>
	}

	return 0;
    d5b8:	2300      	movs	r3, #0
}
    d5ba:	4618      	mov	r0, r3
    d5bc:	3710      	adds	r7, #16
    d5be:	46bd      	mov	sp, r7
    d5c0:	bd80      	pop	{r7, pc}
    d5c2:	bf00      	nop
    d5c4:	0000cd41 	.word	0x0000cd41
    d5c8:	0000cf29 	.word	0x0000cf29
    d5cc:	0000cec9 	.word	0x0000cec9
    d5d0:	0000ce41 	.word	0x0000ce41

0000d5d4 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    d5d4:	b580      	push	{r7, lr}
    d5d6:	b082      	sub	sp, #8
    d5d8:	af00      	add	r7, sp, #0
    d5da:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    d5dc:	687b      	ldr	r3, [r7, #4]
    d5de:	68db      	ldr	r3, [r3, #12]
    d5e0:	4618      	mov	r0, r3
    d5e2:	4b03      	ldr	r3, [pc, #12]	; (d5f0 <_tc_timer_is_started+0x1c>)
    d5e4:	4798      	blx	r3
    d5e6:	4603      	mov	r3, r0
}
    d5e8:	4618      	mov	r0, r3
    d5ea:	3708      	adds	r7, #8
    d5ec:	46bd      	mov	sp, r7
    d5ee:	bd80      	pop	{r7, pc}
    d5f0:	0000cce1 	.word	0x0000cce1

0000d5f4 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    d5f4:	b580      	push	{r7, lr}
    d5f6:	b082      	sub	sp, #8
    d5f8:	af00      	add	r7, sp, #0
    d5fa:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    d5fc:	687b      	ldr	r3, [r7, #4]
    d5fe:	691b      	ldr	r3, [r3, #16]
    d600:	4618      	mov	r0, r3
    d602:	4b03      	ldr	r3, [pc, #12]	; (d610 <_pwm_is_enabled+0x1c>)
    d604:	4798      	blx	r3
    d606:	4603      	mov	r3, r0
}
    d608:	4618      	mov	r0, r3
    d60a:	3708      	adds	r7, #8
    d60c:	46bd      	mov	sp, r7
    d60e:	bd80      	pop	{r7, pc}
    d610:	0000cce1 	.word	0x0000cce1

0000d614 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    d614:	b480      	push	{r7}
    d616:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    d618:	4b02      	ldr	r3, [pc, #8]	; (d624 <_tc_get_timer+0x10>)
}
    d61a:	4618      	mov	r0, r3
    d61c:	46bd      	mov	sp, r7
    d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d622:	4770      	bx	lr
    d624:	200001bc 	.word	0x200001bc

0000d628 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    d628:	b480      	push	{r7}
    d62a:	af00      	add	r7, sp, #0
	return NULL;
    d62c:	2300      	movs	r3, #0
}
    d62e:	4618      	mov	r0, r3
    d630:	46bd      	mov	sp, r7
    d632:	f85d 7b04 	ldr.w	r7, [sp], #4
    d636:	4770      	bx	lr

0000d638 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    d638:	b580      	push	{r7, lr}
    d63a:	b084      	sub	sp, #16
    d63c:	af00      	add	r7, sp, #0
    d63e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d640:	687b      	ldr	r3, [r7, #4]
    d642:	68db      	ldr	r3, [r3, #12]
    d644:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    d646:	68f8      	ldr	r0, [r7, #12]
    d648:	4b0e      	ldr	r3, [pc, #56]	; (d684 <_tc_timer_set_irq+0x4c>)
    d64a:	4798      	blx	r3
    d64c:	4603      	mov	r3, r0
    d64e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    d650:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    d654:	490c      	ldr	r1, [pc, #48]	; (d688 <_tc_timer_set_irq+0x50>)
    d656:	2001      	movs	r0, #1
    d658:	4b0c      	ldr	r3, [pc, #48]	; (d68c <_tc_timer_set_irq+0x54>)
    d65a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    d65c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    d660:	490b      	ldr	r1, [pc, #44]	; (d690 <_tc_timer_set_irq+0x58>)
    d662:	4613      	mov	r3, r2
    d664:	009b      	lsls	r3, r3, #2
    d666:	4413      	add	r3, r2
    d668:	009b      	lsls	r3, r3, #2
    d66a:	440b      	add	r3, r1
    d66c:	3302      	adds	r3, #2
    d66e:	f9b3 3000 	ldrsh.w	r3, [r3]
    d672:	b2db      	uxtb	r3, r3
    d674:	4618      	mov	r0, r3
    d676:	4b07      	ldr	r3, [pc, #28]	; (d694 <_tc_timer_set_irq+0x5c>)
    d678:	4798      	blx	r3
}
    d67a:	bf00      	nop
    d67c:	3710      	adds	r7, #16
    d67e:	46bd      	mov	sp, r7
    d680:	bd80      	pop	{r7, pc}
    d682:	bf00      	nop
    d684:	0000d7e5 	.word	0x0000d7e5
    d688:	00021c28 	.word	0x00021c28
    d68c:	00007e21 	.word	0x00007e21
    d690:	20000144 	.word	0x20000144
    d694:	0000866d 	.word	0x0000866d

0000d698 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    d698:	b580      	push	{r7, lr}
    d69a:	b084      	sub	sp, #16
    d69c:	af00      	add	r7, sp, #0
    d69e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d6a0:	687b      	ldr	r3, [r7, #4]
    d6a2:	68db      	ldr	r3, [r3, #12]
    d6a4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    d6a6:	68f8      	ldr	r0, [r7, #12]
    d6a8:	4b07      	ldr	r3, [pc, #28]	; (d6c8 <tc_interrupt_handler+0x30>)
    d6aa:	4798      	blx	r3
    d6ac:	4603      	mov	r3, r0
    d6ae:	2b00      	cmp	r3, #0
    d6b0:	d006      	beq.n	d6c0 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    d6b2:	68f8      	ldr	r0, [r7, #12]
    d6b4:	4b05      	ldr	r3, [pc, #20]	; (d6cc <tc_interrupt_handler+0x34>)
    d6b6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    d6b8:	687b      	ldr	r3, [r7, #4]
    d6ba:	681b      	ldr	r3, [r3, #0]
    d6bc:	6878      	ldr	r0, [r7, #4]
    d6be:	4798      	blx	r3
	}
}
    d6c0:	bf00      	nop
    d6c2:	3710      	adds	r7, #16
    d6c4:	46bd      	mov	sp, r7
    d6c6:	bd80      	pop	{r7, pc}
    d6c8:	0000cbf1 	.word	0x0000cbf1
    d6cc:	0000cc19 	.word	0x0000cc19

0000d6d0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    d6d0:	b580      	push	{r7, lr}
    d6d2:	b084      	sub	sp, #16
    d6d4:	af00      	add	r7, sp, #0
    d6d6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d6d8:	687b      	ldr	r3, [r7, #4]
    d6da:	691b      	ldr	r3, [r3, #16]
    d6dc:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    d6de:	68f8      	ldr	r0, [r7, #12]
    d6e0:	4b12      	ldr	r3, [pc, #72]	; (d72c <tc_pwm_interrupt_handler+0x5c>)
    d6e2:	4798      	blx	r3
    d6e4:	4603      	mov	r3, r0
    d6e6:	2b00      	cmp	r3, #0
    d6e8:	d00a      	beq.n	d700 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    d6ea:	68f8      	ldr	r0, [r7, #12]
    d6ec:	4b10      	ldr	r3, [pc, #64]	; (d730 <tc_pwm_interrupt_handler+0x60>)
    d6ee:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    d6f0:	687b      	ldr	r3, [r7, #4]
    d6f2:	681b      	ldr	r3, [r3, #0]
    d6f4:	2b00      	cmp	r3, #0
    d6f6:	d003      	beq.n	d700 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    d6f8:	687b      	ldr	r3, [r7, #4]
    d6fa:	681b      	ldr	r3, [r3, #0]
    d6fc:	6878      	ldr	r0, [r7, #4]
    d6fe:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    d700:	68f8      	ldr	r0, [r7, #12]
    d702:	4b0c      	ldr	r3, [pc, #48]	; (d734 <tc_pwm_interrupt_handler+0x64>)
    d704:	4798      	blx	r3
    d706:	4603      	mov	r3, r0
    d708:	2b00      	cmp	r3, #0
    d70a:	d00a      	beq.n	d722 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    d70c:	68f8      	ldr	r0, [r7, #12]
    d70e:	4b0a      	ldr	r3, [pc, #40]	; (d738 <tc_pwm_interrupt_handler+0x68>)
    d710:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    d712:	687b      	ldr	r3, [r7, #4]
    d714:	685b      	ldr	r3, [r3, #4]
    d716:	2b00      	cmp	r3, #0
    d718:	d003      	beq.n	d722 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    d71a:	687b      	ldr	r3, [r7, #4]
    d71c:	685b      	ldr	r3, [r3, #4]
    d71e:	6878      	ldr	r0, [r7, #4]
    d720:	4798      	blx	r3
		}
	}
}
    d722:	bf00      	nop
    d724:	3710      	adds	r7, #16
    d726:	46bd      	mov	sp, r7
    d728:	bd80      	pop	{r7, pc}
    d72a:	bf00      	nop
    d72c:	0000cbf1 	.word	0x0000cbf1
    d730:	0000cc19 	.word	0x0000cc19
    d734:	0000cc67 	.word	0x0000cc67
    d738:	0000cc33 	.word	0x0000cc33

0000d73c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    d73c:	b580      	push	{r7, lr}
    d73e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    d740:	4b03      	ldr	r3, [pc, #12]	; (d750 <TC0_Handler+0x14>)
    d742:	681b      	ldr	r3, [r3, #0]
    d744:	4618      	mov	r0, r3
    d746:	4b03      	ldr	r3, [pc, #12]	; (d754 <TC0_Handler+0x18>)
    d748:	4798      	blx	r3
}
    d74a:	bf00      	nop
    d74c:	bd80      	pop	{r7, pc}
    d74e:	bf00      	nop
    d750:	2000872c 	.word	0x2000872c
    d754:	0000d699 	.word	0x0000d699

0000d758 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    d758:	b580      	push	{r7, lr}
    d75a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc1_dev);
    d75c:	4b03      	ldr	r3, [pc, #12]	; (d76c <TC1_Handler+0x14>)
    d75e:	681b      	ldr	r3, [r3, #0]
    d760:	4618      	mov	r0, r3
    d762:	4b03      	ldr	r3, [pc, #12]	; (d770 <TC1_Handler+0x18>)
    d764:	4798      	blx	r3
}
    d766:	bf00      	nop
    d768:	bd80      	pop	{r7, pc}
    d76a:	bf00      	nop
    d76c:	20008730 	.word	0x20008730
    d770:	0000d6d1 	.word	0x0000d6d1

0000d774 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    d774:	b580      	push	{r7, lr}
    d776:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    d778:	4b03      	ldr	r3, [pc, #12]	; (d788 <TC2_Handler+0x14>)
    d77a:	681b      	ldr	r3, [r3, #0]
    d77c:	4618      	mov	r0, r3
    d77e:	4b03      	ldr	r3, [pc, #12]	; (d78c <TC2_Handler+0x18>)
    d780:	4798      	blx	r3
}
    d782:	bf00      	nop
    d784:	bd80      	pop	{r7, pc}
    d786:	bf00      	nop
    d788:	20008734 	.word	0x20008734
    d78c:	0000d699 	.word	0x0000d699

0000d790 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    d790:	b580      	push	{r7, lr}
    d792:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    d794:	4b03      	ldr	r3, [pc, #12]	; (d7a4 <TC4_Handler+0x14>)
    d796:	681b      	ldr	r3, [r3, #0]
    d798:	4618      	mov	r0, r3
    d79a:	4b03      	ldr	r3, [pc, #12]	; (d7a8 <TC4_Handler+0x18>)
    d79c:	4798      	blx	r3
}
    d79e:	bf00      	nop
    d7a0:	bd80      	pop	{r7, pc}
    d7a2:	bf00      	nop
    d7a4:	20008738 	.word	0x20008738
    d7a8:	0000d699 	.word	0x0000d699

0000d7ac <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    d7ac:	b580      	push	{r7, lr}
    d7ae:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    d7b0:	4b03      	ldr	r3, [pc, #12]	; (d7c0 <TC5_Handler+0x14>)
    d7b2:	681b      	ldr	r3, [r3, #0]
    d7b4:	4618      	mov	r0, r3
    d7b6:	4b03      	ldr	r3, [pc, #12]	; (d7c4 <TC5_Handler+0x18>)
    d7b8:	4798      	blx	r3
}
    d7ba:	bf00      	nop
    d7bc:	bd80      	pop	{r7, pc}
    d7be:	bf00      	nop
    d7c0:	2000873c 	.word	0x2000873c
    d7c4:	0000d699 	.word	0x0000d699

0000d7c8 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    d7c8:	b580      	push	{r7, lr}
    d7ca:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    d7cc:	4b03      	ldr	r3, [pc, #12]	; (d7dc <TC6_Handler+0x14>)
    d7ce:	681b      	ldr	r3, [r3, #0]
    d7d0:	4618      	mov	r0, r3
    d7d2:	4b03      	ldr	r3, [pc, #12]	; (d7e0 <TC6_Handler+0x18>)
    d7d4:	4798      	blx	r3
}
    d7d6:	bf00      	nop
    d7d8:	bd80      	pop	{r7, pc}
    d7da:	bf00      	nop
    d7dc:	20008740 	.word	0x20008740
    d7e0:	0000d699 	.word	0x0000d699

0000d7e4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    d7e4:	b580      	push	{r7, lr}
    d7e6:	b084      	sub	sp, #16
    d7e8:	af00      	add	r7, sp, #0
    d7ea:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    d7ec:	6878      	ldr	r0, [r7, #4]
    d7ee:	4b13      	ldr	r3, [pc, #76]	; (d83c <get_tc_index+0x58>)
    d7f0:	4798      	blx	r3
    d7f2:	4603      	mov	r3, r0
    d7f4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    d7f6:	2300      	movs	r3, #0
    d7f8:	73fb      	strb	r3, [r7, #15]
    d7fa:	e010      	b.n	d81e <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    d7fc:	7bfa      	ldrb	r2, [r7, #15]
    d7fe:	4910      	ldr	r1, [pc, #64]	; (d840 <get_tc_index+0x5c>)
    d800:	4613      	mov	r3, r2
    d802:	009b      	lsls	r3, r3, #2
    d804:	4413      	add	r3, r2
    d806:	009b      	lsls	r3, r3, #2
    d808:	440b      	add	r3, r1
    d80a:	781b      	ldrb	r3, [r3, #0]
    d80c:	7bba      	ldrb	r2, [r7, #14]
    d80e:	429a      	cmp	r2, r3
    d810:	d102      	bne.n	d818 <get_tc_index+0x34>
			return i;
    d812:	f997 300f 	ldrsb.w	r3, [r7, #15]
    d816:	e00d      	b.n	d834 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    d818:	7bfb      	ldrb	r3, [r7, #15]
    d81a:	3301      	adds	r3, #1
    d81c:	73fb      	strb	r3, [r7, #15]
    d81e:	7bfb      	ldrb	r3, [r7, #15]
    d820:	2b05      	cmp	r3, #5
    d822:	d9eb      	bls.n	d7fc <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    d824:	f240 221d 	movw	r2, #541	; 0x21d
    d828:	4906      	ldr	r1, [pc, #24]	; (d844 <get_tc_index+0x60>)
    d82a:	2000      	movs	r0, #0
    d82c:	4b06      	ldr	r3, [pc, #24]	; (d848 <get_tc_index+0x64>)
    d82e:	4798      	blx	r3
	return -1;
    d830:	f04f 33ff 	mov.w	r3, #4294967295
}
    d834:	4618      	mov	r0, r3
    d836:	3710      	adds	r7, #16
    d838:	46bd      	mov	sp, r7
    d83a:	bd80      	pop	{r7, pc}
    d83c:	0000d8e9 	.word	0x0000d8e9
    d840:	20000144 	.word	0x20000144
    d844:	00021c28 	.word	0x00021c28
    d848:	00007e21 	.word	0x00007e21

0000d84c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    d84c:	b480      	push	{r7}
    d84e:	b083      	sub	sp, #12
    d850:	af00      	add	r7, sp, #0
    d852:	6078      	str	r0, [r7, #4]
    d854:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    d856:	687b      	ldr	r3, [r7, #4]
    d858:	4a17      	ldr	r2, [pc, #92]	; (d8b8 <_tc_init_irq_param+0x6c>)
    d85a:	4293      	cmp	r3, r2
    d85c:	d102      	bne.n	d864 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    d85e:	4a17      	ldr	r2, [pc, #92]	; (d8bc <_tc_init_irq_param+0x70>)
    d860:	683b      	ldr	r3, [r7, #0]
    d862:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    d864:	687b      	ldr	r3, [r7, #4]
    d866:	4a16      	ldr	r2, [pc, #88]	; (d8c0 <_tc_init_irq_param+0x74>)
    d868:	4293      	cmp	r3, r2
    d86a:	d102      	bne.n	d872 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _pwm_device *)dev;
    d86c:	4a15      	ldr	r2, [pc, #84]	; (d8c4 <_tc_init_irq_param+0x78>)
    d86e:	683b      	ldr	r3, [r7, #0]
    d870:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    d872:	687b      	ldr	r3, [r7, #4]
    d874:	4a14      	ldr	r2, [pc, #80]	; (d8c8 <_tc_init_irq_param+0x7c>)
    d876:	4293      	cmp	r3, r2
    d878:	d102      	bne.n	d880 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    d87a:	4a14      	ldr	r2, [pc, #80]	; (d8cc <_tc_init_irq_param+0x80>)
    d87c:	683b      	ldr	r3, [r7, #0]
    d87e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    d880:	687b      	ldr	r3, [r7, #4]
    d882:	4a13      	ldr	r2, [pc, #76]	; (d8d0 <_tc_init_irq_param+0x84>)
    d884:	4293      	cmp	r3, r2
    d886:	d102      	bne.n	d88e <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
    d888:	4a12      	ldr	r2, [pc, #72]	; (d8d4 <_tc_init_irq_param+0x88>)
    d88a:	683b      	ldr	r3, [r7, #0]
    d88c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    d88e:	687b      	ldr	r3, [r7, #4]
    d890:	4a11      	ldr	r2, [pc, #68]	; (d8d8 <_tc_init_irq_param+0x8c>)
    d892:	4293      	cmp	r3, r2
    d894:	d102      	bne.n	d89c <_tc_init_irq_param+0x50>
		_tc5_dev = (struct _timer_device *)dev;
    d896:	4a11      	ldr	r2, [pc, #68]	; (d8dc <_tc_init_irq_param+0x90>)
    d898:	683b      	ldr	r3, [r7, #0]
    d89a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    d89c:	687b      	ldr	r3, [r7, #4]
    d89e:	4a10      	ldr	r2, [pc, #64]	; (d8e0 <_tc_init_irq_param+0x94>)
    d8a0:	4293      	cmp	r3, r2
    d8a2:	d102      	bne.n	d8aa <_tc_init_irq_param+0x5e>
		_tc6_dev = (struct _timer_device *)dev;
    d8a4:	4a0f      	ldr	r2, [pc, #60]	; (d8e4 <_tc_init_irq_param+0x98>)
    d8a6:	683b      	ldr	r3, [r7, #0]
    d8a8:	6013      	str	r3, [r2, #0]
	}
}
    d8aa:	bf00      	nop
    d8ac:	370c      	adds	r7, #12
    d8ae:	46bd      	mov	sp, r7
    d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8b4:	4770      	bx	lr
    d8b6:	bf00      	nop
    d8b8:	40003800 	.word	0x40003800
    d8bc:	2000872c 	.word	0x2000872c
    d8c0:	40003c00 	.word	0x40003c00
    d8c4:	20008730 	.word	0x20008730
    d8c8:	4101a000 	.word	0x4101a000
    d8cc:	20008734 	.word	0x20008734
    d8d0:	42001400 	.word	0x42001400
    d8d4:	20008738 	.word	0x20008738
    d8d8:	42001800 	.word	0x42001800
    d8dc:	2000873c 	.word	0x2000873c
    d8e0:	43001400 	.word	0x43001400
    d8e4:	20008740 	.word	0x20008740

0000d8e8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    d8e8:	b4b0      	push	{r4, r5, r7}
    d8ea:	b08d      	sub	sp, #52	; 0x34
    d8ec:	af00      	add	r7, sp, #0
    d8ee:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    d8f0:	4b13      	ldr	r3, [pc, #76]	; (d940 <_get_hardware_offset+0x58>)
    d8f2:	f107 040c 	add.w	r4, r7, #12
    d8f6:	461d      	mov	r5, r3
    d8f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d8fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d8fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    d900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    d904:	2300      	movs	r3, #0
    d906:	62fb      	str	r3, [r7, #44]	; 0x2c
    d908:	e010      	b.n	d92c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    d90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d90c:	009b      	lsls	r3, r3, #2
    d90e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d912:	4413      	add	r3, r2
    d914:	f853 3c24 	ldr.w	r3, [r3, #-36]
    d918:	461a      	mov	r2, r3
    d91a:	687b      	ldr	r3, [r7, #4]
    d91c:	429a      	cmp	r2, r3
    d91e:	d102      	bne.n	d926 <_get_hardware_offset+0x3e>
			return i;
    d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d922:	b2db      	uxtb	r3, r3
    d924:	e006      	b.n	d934 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d928:	3301      	adds	r3, #1
    d92a:	62fb      	str	r3, [r7, #44]	; 0x2c
    d92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d92e:	2b07      	cmp	r3, #7
    d930:	d9eb      	bls.n	d90a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    d932:	2300      	movs	r3, #0
}
    d934:	4618      	mov	r0, r3
    d936:	3734      	adds	r7, #52	; 0x34
    d938:	46bd      	mov	sp, r7
    d93a:	bcb0      	pop	{r4, r5, r7}
    d93c:	4770      	bx	lr
    d93e:	bf00      	nop
    d940:	00021c3c 	.word	0x00021c3c

0000d944 <__NVIC_EnableIRQ>:
{
    d944:	b480      	push	{r7}
    d946:	b083      	sub	sp, #12
    d948:	af00      	add	r7, sp, #0
    d94a:	4603      	mov	r3, r0
    d94c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d94e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d952:	2b00      	cmp	r3, #0
    d954:	db0b      	blt.n	d96e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d956:	4909      	ldr	r1, [pc, #36]	; (d97c <__NVIC_EnableIRQ+0x38>)
    d958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d95c:	095b      	lsrs	r3, r3, #5
    d95e:	88fa      	ldrh	r2, [r7, #6]
    d960:	f002 021f 	and.w	r2, r2, #31
    d964:	2001      	movs	r0, #1
    d966:	fa00 f202 	lsl.w	r2, r0, r2
    d96a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d96e:	bf00      	nop
    d970:	370c      	adds	r7, #12
    d972:	46bd      	mov	sp, r7
    d974:	f85d 7b04 	ldr.w	r7, [sp], #4
    d978:	4770      	bx	lr
    d97a:	bf00      	nop
    d97c:	e000e100 	.word	0xe000e100

0000d980 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    d980:	b480      	push	{r7}
    d982:	b087      	sub	sp, #28
    d984:	af00      	add	r7, sp, #0
    d986:	60f8      	str	r0, [r7, #12]
    d988:	460b      	mov	r3, r1
    d98a:	607a      	str	r2, [r7, #4]
    d98c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    d98e:	7afa      	ldrb	r2, [r7, #11]
    d990:	68f9      	ldr	r1, [r7, #12]
    d992:	4613      	mov	r3, r2
    d994:	009b      	lsls	r3, r3, #2
    d996:	4413      	add	r3, r2
    d998:	009b      	lsls	r3, r3, #2
    d99a:	440b      	add	r3, r1
    d99c:	3340      	adds	r3, #64	; 0x40
    d99e:	681b      	ldr	r3, [r3, #0]
    d9a0:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    d9a2:	697a      	ldr	r2, [r7, #20]
    d9a4:	687b      	ldr	r3, [r7, #4]
    d9a6:	4013      	ands	r3, r2
    d9a8:	617b      	str	r3, [r7, #20]
	return tmp;
    d9aa:	697b      	ldr	r3, [r7, #20]
}
    d9ac:	4618      	mov	r0, r3
    d9ae:	371c      	adds	r7, #28
    d9b0:	46bd      	mov	sp, r7
    d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9b6:	4770      	bx	lr

0000d9b8 <hri_oscctrl_get_STATUS_reg>:
{
    d9b8:	b480      	push	{r7}
    d9ba:	b085      	sub	sp, #20
    d9bc:	af00      	add	r7, sp, #0
    d9be:	6078      	str	r0, [r7, #4]
    d9c0:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    d9c2:	687b      	ldr	r3, [r7, #4]
    d9c4:	691b      	ldr	r3, [r3, #16]
    d9c6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    d9c8:	68fa      	ldr	r2, [r7, #12]
    d9ca:	683b      	ldr	r3, [r7, #0]
    d9cc:	4013      	ands	r3, r2
    d9ce:	60fb      	str	r3, [r7, #12]
	return tmp;
    d9d0:	68fb      	ldr	r3, [r7, #12]
}
    d9d2:	4618      	mov	r0, r3
    d9d4:	3714      	adds	r7, #20
    d9d6:	46bd      	mov	sp, r7
    d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9dc:	4770      	bx	lr

0000d9de <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    d9de:	b480      	push	{r7}
    d9e0:	b085      	sub	sp, #20
    d9e2:	af00      	add	r7, sp, #0
    d9e4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    d9e6:	687b      	ldr	r3, [r7, #4]
    d9e8:	f893 3020 	ldrb.w	r3, [r3, #32]
    d9ec:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    d9ee:	7bfb      	ldrb	r3, [r7, #15]
    d9f0:	f003 0301 	and.w	r3, r3, #1
    d9f4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    d9f6:	7bfb      	ldrb	r3, [r7, #15]
    d9f8:	2b00      	cmp	r3, #0
    d9fa:	bf14      	ite	ne
    d9fc:	2301      	movne	r3, #1
    d9fe:	2300      	moveq	r3, #0
    da00:	b2db      	uxtb	r3, r3
}
    da02:	4618      	mov	r0, r3
    da04:	3714      	adds	r7, #20
    da06:	46bd      	mov	sp, r7
    da08:	f85d 7b04 	ldr.w	r7, [sp], #4
    da0c:	4770      	bx	lr

0000da0e <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    da0e:	b480      	push	{r7}
    da10:	b083      	sub	sp, #12
    da12:	af00      	add	r7, sp, #0
    da14:	6078      	str	r0, [r7, #4]
    da16:	460b      	mov	r3, r1
    da18:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    da1a:	bf00      	nop
    da1c:	687b      	ldr	r3, [r7, #4]
    da1e:	789b      	ldrb	r3, [r3, #2]
    da20:	b2da      	uxtb	r2, r3
    da22:	78fb      	ldrb	r3, [r7, #3]
    da24:	4013      	ands	r3, r2
    da26:	b2db      	uxtb	r3, r3
    da28:	2b00      	cmp	r3, #0
    da2a:	d1f7      	bne.n	da1c <hri_usb_wait_for_sync+0xe>
	};
}
    da2c:	bf00      	nop
    da2e:	370c      	adds	r7, #12
    da30:	46bd      	mov	sp, r7
    da32:	f85d 7b04 	ldr.w	r7, [sp], #4
    da36:	4770      	bx	lr

0000da38 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    da38:	b480      	push	{r7}
    da3a:	b083      	sub	sp, #12
    da3c:	af00      	add	r7, sp, #0
    da3e:	6078      	str	r0, [r7, #4]
    da40:	460b      	mov	r3, r1
    da42:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    da44:	687b      	ldr	r3, [r7, #4]
    da46:	789b      	ldrb	r3, [r3, #2]
    da48:	b2da      	uxtb	r2, r3
    da4a:	78fb      	ldrb	r3, [r7, #3]
    da4c:	4013      	ands	r3, r2
    da4e:	b2db      	uxtb	r3, r3
    da50:	2b00      	cmp	r3, #0
    da52:	bf14      	ite	ne
    da54:	2301      	movne	r3, #1
    da56:	2300      	moveq	r3, #0
    da58:	b2db      	uxtb	r3, r3
}
    da5a:	4618      	mov	r0, r3
    da5c:	370c      	adds	r7, #12
    da5e:	46bd      	mov	sp, r7
    da60:	f85d 7b04 	ldr.w	r7, [sp], #4
    da64:	4770      	bx	lr

0000da66 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    da66:	b480      	push	{r7}
    da68:	b085      	sub	sp, #20
    da6a:	af00      	add	r7, sp, #0
    da6c:	6078      	str	r0, [r7, #4]
    da6e:	460b      	mov	r3, r1
    da70:	70fb      	strb	r3, [r7, #3]
    da72:	4613      	mov	r3, r2
    da74:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    da76:	78fb      	ldrb	r3, [r7, #3]
    da78:	687a      	ldr	r2, [r7, #4]
    da7a:	3308      	adds	r3, #8
    da7c:	015b      	lsls	r3, r3, #5
    da7e:	4413      	add	r3, r2
    da80:	3307      	adds	r3, #7
    da82:	781b      	ldrb	r3, [r3, #0]
    da84:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    da86:	7bfa      	ldrb	r2, [r7, #15]
    da88:	78bb      	ldrb	r3, [r7, #2]
    da8a:	4013      	ands	r3, r2
    da8c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    da8e:	7bfb      	ldrb	r3, [r7, #15]
}
    da90:	4618      	mov	r0, r3
    da92:	3714      	adds	r7, #20
    da94:	46bd      	mov	sp, r7
    da96:	f85d 7b04 	ldr.w	r7, [sp], #4
    da9a:	4770      	bx	lr

0000da9c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    da9c:	b480      	push	{r7}
    da9e:	b083      	sub	sp, #12
    daa0:	af00      	add	r7, sp, #0
    daa2:	6078      	str	r0, [r7, #4]
    daa4:	460b      	mov	r3, r1
    daa6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    daa8:	78fb      	ldrb	r3, [r7, #3]
    daaa:	687a      	ldr	r2, [r7, #4]
    daac:	3308      	adds	r3, #8
    daae:	015b      	lsls	r3, r3, #5
    dab0:	4413      	add	r3, r2
    dab2:	3307      	adds	r3, #7
    dab4:	781b      	ldrb	r3, [r3, #0]
    dab6:	b2db      	uxtb	r3, r3
}
    dab8:	4618      	mov	r0, r3
    daba:	370c      	adds	r7, #12
    dabc:	46bd      	mov	sp, r7
    dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
    dac2:	4770      	bx	lr

0000dac4 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    dac4:	b480      	push	{r7}
    dac6:	b083      	sub	sp, #12
    dac8:	af00      	add	r7, sp, #0
    daca:	6078      	str	r0, [r7, #4]
    dacc:	460b      	mov	r3, r1
    dace:	70fb      	strb	r3, [r7, #3]
    dad0:	4613      	mov	r3, r2
    dad2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    dad4:	78fb      	ldrb	r3, [r7, #3]
    dad6:	687a      	ldr	r2, [r7, #4]
    dad8:	3308      	adds	r3, #8
    dada:	015b      	lsls	r3, r3, #5
    dadc:	4413      	add	r3, r2
    dade:	3307      	adds	r3, #7
    dae0:	78ba      	ldrb	r2, [r7, #2]
    dae2:	701a      	strb	r2, [r3, #0]
}
    dae4:	bf00      	nop
    dae6:	370c      	adds	r7, #12
    dae8:	46bd      	mov	sp, r7
    daea:	f85d 7b04 	ldr.w	r7, [sp], #4
    daee:	4770      	bx	lr

0000daf0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    daf0:	b480      	push	{r7}
    daf2:	b083      	sub	sp, #12
    daf4:	af00      	add	r7, sp, #0
    daf6:	6078      	str	r0, [r7, #4]
    daf8:	460b      	mov	r3, r1
    dafa:	70fb      	strb	r3, [r7, #3]
    dafc:	4613      	mov	r3, r2
    dafe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    db00:	78fb      	ldrb	r3, [r7, #3]
    db02:	687a      	ldr	r2, [r7, #4]
    db04:	3308      	adds	r3, #8
    db06:	015b      	lsls	r3, r3, #5
    db08:	4413      	add	r3, r2
    db0a:	3305      	adds	r3, #5
    db0c:	78ba      	ldrb	r2, [r7, #2]
    db0e:	701a      	strb	r2, [r3, #0]
}
    db10:	bf00      	nop
    db12:	370c      	adds	r7, #12
    db14:	46bd      	mov	sp, r7
    db16:	f85d 7b04 	ldr.w	r7, [sp], #4
    db1a:	4770      	bx	lr

0000db1c <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    db1c:	b480      	push	{r7}
    db1e:	b083      	sub	sp, #12
    db20:	af00      	add	r7, sp, #0
    db22:	6078      	str	r0, [r7, #4]
    db24:	460b      	mov	r3, r1
    db26:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    db28:	78fb      	ldrb	r3, [r7, #3]
    db2a:	687a      	ldr	r2, [r7, #4]
    db2c:	3308      	adds	r3, #8
    db2e:	015b      	lsls	r3, r3, #5
    db30:	4413      	add	r3, r2
    db32:	3306      	adds	r3, #6
    db34:	781b      	ldrb	r3, [r3, #0]
    db36:	b2db      	uxtb	r3, r3
}
    db38:	4618      	mov	r0, r3
    db3a:	370c      	adds	r7, #12
    db3c:	46bd      	mov	sp, r7
    db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    db42:	4770      	bx	lr

0000db44 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    db44:	b480      	push	{r7}
    db46:	b083      	sub	sp, #12
    db48:	af00      	add	r7, sp, #0
    db4a:	6078      	str	r0, [r7, #4]
    db4c:	460b      	mov	r3, r1
    db4e:	70fb      	strb	r3, [r7, #3]
    db50:	4613      	mov	r3, r2
    db52:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    db54:	78fb      	ldrb	r3, [r7, #3]
    db56:	687a      	ldr	r2, [r7, #4]
    db58:	3308      	adds	r3, #8
    db5a:	015b      	lsls	r3, r3, #5
    db5c:	4413      	add	r3, r2
    db5e:	3304      	adds	r3, #4
    db60:	78ba      	ldrb	r2, [r7, #2]
    db62:	701a      	strb	r2, [r3, #0]
}
    db64:	bf00      	nop
    db66:	370c      	adds	r7, #12
    db68:	46bd      	mov	sp, r7
    db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    db6e:	4770      	bx	lr

0000db70 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    db70:	b480      	push	{r7}
    db72:	b083      	sub	sp, #12
    db74:	af00      	add	r7, sp, #0
    db76:	6078      	str	r0, [r7, #4]
    db78:	460b      	mov	r3, r1
    db7a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    db7c:	78fb      	ldrb	r3, [r7, #3]
    db7e:	687a      	ldr	r2, [r7, #4]
    db80:	015b      	lsls	r3, r3, #5
    db82:	4413      	add	r3, r2
    db84:	f503 7384 	add.w	r3, r3, #264	; 0x108
    db88:	2210      	movs	r2, #16
    db8a:	701a      	strb	r2, [r3, #0]
}
    db8c:	bf00      	nop
    db8e:	370c      	adds	r7, #12
    db90:	46bd      	mov	sp, r7
    db92:	f85d 7b04 	ldr.w	r7, [sp], #4
    db96:	4770      	bx	lr

0000db98 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    db98:	b480      	push	{r7}
    db9a:	b083      	sub	sp, #12
    db9c:	af00      	add	r7, sp, #0
    db9e:	6078      	str	r0, [r7, #4]
    dba0:	460b      	mov	r3, r1
    dba2:	70fb      	strb	r3, [r7, #3]
    dba4:	4613      	mov	r3, r2
    dba6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    dba8:	78fb      	ldrb	r3, [r7, #3]
    dbaa:	687a      	ldr	r2, [r7, #4]
    dbac:	015b      	lsls	r3, r3, #5
    dbae:	4413      	add	r3, r2
    dbb0:	f203 1309 	addw	r3, r3, #265	; 0x109
    dbb4:	78ba      	ldrb	r2, [r7, #2]
    dbb6:	701a      	strb	r2, [r3, #0]
}
    dbb8:	bf00      	nop
    dbba:	370c      	adds	r7, #12
    dbbc:	46bd      	mov	sp, r7
    dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    dbc2:	4770      	bx	lr

0000dbc4 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    dbc4:	b480      	push	{r7}
    dbc6:	b083      	sub	sp, #12
    dbc8:	af00      	add	r7, sp, #0
    dbca:	6078      	str	r0, [r7, #4]
    dbcc:	460b      	mov	r3, r1
    dbce:	70fb      	strb	r3, [r7, #3]
    dbd0:	4613      	mov	r3, r2
    dbd2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    dbd4:	78fb      	ldrb	r3, [r7, #3]
    dbd6:	687a      	ldr	r2, [r7, #4]
    dbd8:	015b      	lsls	r3, r3, #5
    dbda:	4413      	add	r3, r2
    dbdc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    dbe0:	78ba      	ldrb	r2, [r7, #2]
    dbe2:	701a      	strb	r2, [r3, #0]
}
    dbe4:	bf00      	nop
    dbe6:	370c      	adds	r7, #12
    dbe8:	46bd      	mov	sp, r7
    dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
    dbee:	4770      	bx	lr

0000dbf0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    dbf0:	b480      	push	{r7}
    dbf2:	b085      	sub	sp, #20
    dbf4:	af00      	add	r7, sp, #0
    dbf6:	6078      	str	r0, [r7, #4]
    dbf8:	460b      	mov	r3, r1
    dbfa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    dbfc:	78fb      	ldrb	r3, [r7, #3]
    dbfe:	687a      	ldr	r2, [r7, #4]
    dc00:	3308      	adds	r3, #8
    dc02:	015b      	lsls	r3, r3, #5
    dc04:	4413      	add	r3, r2
    dc06:	781b      	ldrb	r3, [r3, #0]
    dc08:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    dc0a:	7bfb      	ldrb	r3, [r7, #15]
    dc0c:	f003 0307 	and.w	r3, r3, #7
    dc10:	73fb      	strb	r3, [r7, #15]
	return tmp;
    dc12:	7bfb      	ldrb	r3, [r7, #15]
}
    dc14:	4618      	mov	r0, r3
    dc16:	3714      	adds	r7, #20
    dc18:	46bd      	mov	sp, r7
    dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc1e:	4770      	bx	lr

0000dc20 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    dc20:	b480      	push	{r7}
    dc22:	b085      	sub	sp, #20
    dc24:	af00      	add	r7, sp, #0
    dc26:	6078      	str	r0, [r7, #4]
    dc28:	460b      	mov	r3, r1
    dc2a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    dc2c:	78fb      	ldrb	r3, [r7, #3]
    dc2e:	687a      	ldr	r2, [r7, #4]
    dc30:	3308      	adds	r3, #8
    dc32:	015b      	lsls	r3, r3, #5
    dc34:	4413      	add	r3, r2
    dc36:	781b      	ldrb	r3, [r3, #0]
    dc38:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    dc3a:	7bfb      	ldrb	r3, [r7, #15]
    dc3c:	091b      	lsrs	r3, r3, #4
    dc3e:	b2db      	uxtb	r3, r3
    dc40:	f003 0307 	and.w	r3, r3, #7
    dc44:	73fb      	strb	r3, [r7, #15]
	return tmp;
    dc46:	7bfb      	ldrb	r3, [r7, #15]
}
    dc48:	4618      	mov	r0, r3
    dc4a:	3714      	adds	r7, #20
    dc4c:	46bd      	mov	sp, r7
    dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc52:	4770      	bx	lr

0000dc54 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    dc54:	b480      	push	{r7}
    dc56:	b083      	sub	sp, #12
    dc58:	af00      	add	r7, sp, #0
    dc5a:	6078      	str	r0, [r7, #4]
    dc5c:	460b      	mov	r3, r1
    dc5e:	70fb      	strb	r3, [r7, #3]
    dc60:	4613      	mov	r3, r2
    dc62:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    dc64:	78fb      	ldrb	r3, [r7, #3]
    dc66:	687a      	ldr	r2, [r7, #4]
    dc68:	3308      	adds	r3, #8
    dc6a:	015b      	lsls	r3, r3, #5
    dc6c:	4413      	add	r3, r2
    dc6e:	78ba      	ldrb	r2, [r7, #2]
    dc70:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    dc72:	bf00      	nop
    dc74:	370c      	adds	r7, #12
    dc76:	46bd      	mov	sp, r7
    dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc7c:	4770      	bx	lr

0000dc7e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    dc7e:	b480      	push	{r7}
    dc80:	b083      	sub	sp, #12
    dc82:	af00      	add	r7, sp, #0
    dc84:	6078      	str	r0, [r7, #4]
    dc86:	460b      	mov	r3, r1
    dc88:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    dc8a:	78fb      	ldrb	r3, [r7, #3]
    dc8c:	687a      	ldr	r2, [r7, #4]
    dc8e:	3308      	adds	r3, #8
    dc90:	015b      	lsls	r3, r3, #5
    dc92:	4413      	add	r3, r2
    dc94:	781b      	ldrb	r3, [r3, #0]
    dc96:	b2db      	uxtb	r3, r3
}
    dc98:	4618      	mov	r0, r3
    dc9a:	370c      	adds	r7, #12
    dc9c:	46bd      	mov	sp, r7
    dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    dca2:	4770      	bx	lr

0000dca4 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    dca4:	b480      	push	{r7}
    dca6:	b083      	sub	sp, #12
    dca8:	af00      	add	r7, sp, #0
    dcaa:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    dcac:	687b      	ldr	r3, [r7, #4]
    dcae:	8b9b      	ldrh	r3, [r3, #28]
    dcb0:	b29b      	uxth	r3, r3
}
    dcb2:	4618      	mov	r0, r3
    dcb4:	370c      	adds	r7, #12
    dcb6:	46bd      	mov	sp, r7
    dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    dcbc:	4770      	bx	lr

0000dcbe <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    dcbe:	b480      	push	{r7}
    dcc0:	b083      	sub	sp, #12
    dcc2:	af00      	add	r7, sp, #0
    dcc4:	6078      	str	r0, [r7, #4]
    dcc6:	460b      	mov	r3, r1
    dcc8:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    dcca:	687b      	ldr	r3, [r7, #4]
    dccc:	887a      	ldrh	r2, [r7, #2]
    dcce:	839a      	strh	r2, [r3, #28]
}
    dcd0:	bf00      	nop
    dcd2:	370c      	adds	r7, #12
    dcd4:	46bd      	mov	sp, r7
    dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    dcda:	4770      	bx	lr

0000dcdc <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    dcdc:	b480      	push	{r7}
    dcde:	b083      	sub	sp, #12
    dce0:	af00      	add	r7, sp, #0
    dce2:	6078      	str	r0, [r7, #4]
    dce4:	460b      	mov	r3, r1
    dce6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    dce8:	687b      	ldr	r3, [r7, #4]
    dcea:	887a      	ldrh	r2, [r7, #2]
    dcec:	831a      	strh	r2, [r3, #24]
}
    dcee:	bf00      	nop
    dcf0:	370c      	adds	r7, #12
    dcf2:	46bd      	mov	sp, r7
    dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    dcf8:	4770      	bx	lr

0000dcfa <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    dcfa:	b480      	push	{r7}
    dcfc:	b083      	sub	sp, #12
    dcfe:	af00      	add	r7, sp, #0
    dd00:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    dd02:	687b      	ldr	r3, [r7, #4]
    dd04:	8b1b      	ldrh	r3, [r3, #24]
    dd06:	b29b      	uxth	r3, r3
}
    dd08:	4618      	mov	r0, r3
    dd0a:	370c      	adds	r7, #12
    dd0c:	46bd      	mov	sp, r7
    dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd12:	4770      	bx	lr

0000dd14 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    dd14:	b480      	push	{r7}
    dd16:	b083      	sub	sp, #12
    dd18:	af00      	add	r7, sp, #0
    dd1a:	6078      	str	r0, [r7, #4]
    dd1c:	460b      	mov	r3, r1
    dd1e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    dd20:	687b      	ldr	r3, [r7, #4]
    dd22:	887a      	ldrh	r2, [r7, #2]
    dd24:	829a      	strh	r2, [r3, #20]
}
    dd26:	bf00      	nop
    dd28:	370c      	adds	r7, #12
    dd2a:	46bd      	mov	sp, r7
    dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd30:	4770      	bx	lr

0000dd32 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    dd32:	b480      	push	{r7}
    dd34:	b085      	sub	sp, #20
    dd36:	af00      	add	r7, sp, #0
    dd38:	6078      	str	r0, [r7, #4]
    dd3a:	460b      	mov	r3, r1
    dd3c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    dd3e:	687b      	ldr	r3, [r7, #4]
    dd40:	789b      	ldrb	r3, [r3, #2]
    dd42:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    dd44:	7bfa      	ldrb	r2, [r7, #15]
    dd46:	78fb      	ldrb	r3, [r7, #3]
    dd48:	4013      	ands	r3, r2
    dd4a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    dd4c:	7bfb      	ldrb	r3, [r7, #15]
}
    dd4e:	4618      	mov	r0, r3
    dd50:	3714      	adds	r7, #20
    dd52:	46bd      	mov	sp, r7
    dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd58:	4770      	bx	lr
	...

0000dd5c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    dd5c:	b580      	push	{r7, lr}
    dd5e:	b082      	sub	sp, #8
    dd60:	af00      	add	r7, sp, #0
    dd62:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    dd64:	687b      	ldr	r3, [r7, #4]
    dd66:	781b      	ldrb	r3, [r3, #0]
    dd68:	b2db      	uxtb	r3, r3
    dd6a:	f023 0302 	bic.w	r3, r3, #2
    dd6e:	b2da      	uxtb	r2, r3
    dd70:	687b      	ldr	r3, [r7, #4]
    dd72:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    dd74:	2103      	movs	r1, #3
    dd76:	6878      	ldr	r0, [r7, #4]
    dd78:	4b02      	ldr	r3, [pc, #8]	; (dd84 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    dd7a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    dd7c:	bf00      	nop
    dd7e:	3708      	adds	r7, #8
    dd80:	46bd      	mov	sp, r7
    dd82:	bd80      	pop	{r7, pc}
    dd84:	0000da0f 	.word	0x0000da0f

0000dd88 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    dd88:	b580      	push	{r7, lr}
    dd8a:	b084      	sub	sp, #16
    dd8c:	af00      	add	r7, sp, #0
    dd8e:	6078      	str	r0, [r7, #4]
    dd90:	460b      	mov	r3, r1
    dd92:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    dd94:	2103      	movs	r1, #3
    dd96:	6878      	ldr	r0, [r7, #4]
    dd98:	4b06      	ldr	r3, [pc, #24]	; (ddb4 <hri_usb_get_CTRLA_reg+0x2c>)
    dd9a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    dd9c:	687b      	ldr	r3, [r7, #4]
    dd9e:	781b      	ldrb	r3, [r3, #0]
    dda0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    dda2:	7bfa      	ldrb	r2, [r7, #15]
    dda4:	78fb      	ldrb	r3, [r7, #3]
    dda6:	4013      	ands	r3, r2
    dda8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ddaa:	7bfb      	ldrb	r3, [r7, #15]
}
    ddac:	4618      	mov	r0, r3
    ddae:	3710      	adds	r7, #16
    ddb0:	46bd      	mov	sp, r7
    ddb2:	bd80      	pop	{r7, pc}
    ddb4:	0000da0f 	.word	0x0000da0f

0000ddb8 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    ddb8:	b580      	push	{r7, lr}
    ddba:	b082      	sub	sp, #8
    ddbc:	af00      	add	r7, sp, #0
    ddbe:	6078      	str	r0, [r7, #4]
    ddc0:	460b      	mov	r3, r1
    ddc2:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    ddc4:	687b      	ldr	r3, [r7, #4]
    ddc6:	78fa      	ldrb	r2, [r7, #3]
    ddc8:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    ddca:	2103      	movs	r1, #3
    ddcc:	6878      	ldr	r0, [r7, #4]
    ddce:	4b03      	ldr	r3, [pc, #12]	; (dddc <hri_usb_write_CTRLA_reg+0x24>)
    ddd0:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    ddd2:	bf00      	nop
    ddd4:	3708      	adds	r7, #8
    ddd6:	46bd      	mov	sp, r7
    ddd8:	bd80      	pop	{r7, pc}
    ddda:	bf00      	nop
    dddc:	0000da0f 	.word	0x0000da0f

0000dde0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    dde0:	b580      	push	{r7, lr}
    dde2:	b082      	sub	sp, #8
    dde4:	af00      	add	r7, sp, #0
    dde6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    dde8:	2103      	movs	r1, #3
    ddea:	6878      	ldr	r0, [r7, #4]
    ddec:	4b04      	ldr	r3, [pc, #16]	; (de00 <hri_usb_read_CTRLA_reg+0x20>)
    ddee:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    ddf0:	687b      	ldr	r3, [r7, #4]
    ddf2:	781b      	ldrb	r3, [r3, #0]
    ddf4:	b2db      	uxtb	r3, r3
}
    ddf6:	4618      	mov	r0, r3
    ddf8:	3708      	adds	r7, #8
    ddfa:	46bd      	mov	sp, r7
    ddfc:	bd80      	pop	{r7, pc}
    ddfe:	bf00      	nop
    de00:	0000da0f 	.word	0x0000da0f

0000de04 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    de04:	b480      	push	{r7}
    de06:	b083      	sub	sp, #12
    de08:	af00      	add	r7, sp, #0
    de0a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    de0c:	687b      	ldr	r3, [r7, #4]
    de0e:	891b      	ldrh	r3, [r3, #8]
    de10:	b29b      	uxth	r3, r3
    de12:	f023 0301 	bic.w	r3, r3, #1
    de16:	b29a      	uxth	r2, r3
    de18:	687b      	ldr	r3, [r7, #4]
    de1a:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    de1c:	bf00      	nop
    de1e:	370c      	adds	r7, #12
    de20:	46bd      	mov	sp, r7
    de22:	f85d 7b04 	ldr.w	r7, [sp], #4
    de26:	4770      	bx	lr

0000de28 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    de28:	b480      	push	{r7}
    de2a:	b083      	sub	sp, #12
    de2c:	af00      	add	r7, sp, #0
    de2e:	6078      	str	r0, [r7, #4]
    de30:	460b      	mov	r3, r1
    de32:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    de34:	687b      	ldr	r3, [r7, #4]
    de36:	887a      	ldrh	r2, [r7, #2]
    de38:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    de3a:	bf00      	nop
    de3c:	370c      	adds	r7, #12
    de3e:	46bd      	mov	sp, r7
    de40:	f85d 7b04 	ldr.w	r7, [sp], #4
    de44:	4770      	bx	lr

0000de46 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    de46:	b480      	push	{r7}
    de48:	b083      	sub	sp, #12
    de4a:	af00      	add	r7, sp, #0
    de4c:	6078      	str	r0, [r7, #4]
    de4e:	460b      	mov	r3, r1
    de50:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    de52:	687b      	ldr	r3, [r7, #4]
    de54:	78fa      	ldrb	r2, [r7, #3]
    de56:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    de58:	bf00      	nop
    de5a:	370c      	adds	r7, #12
    de5c:	46bd      	mov	sp, r7
    de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    de62:	4770      	bx	lr

0000de64 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    de64:	b480      	push	{r7}
    de66:	b083      	sub	sp, #12
    de68:	af00      	add	r7, sp, #0
    de6a:	6078      	str	r0, [r7, #4]
    de6c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    de6e:	687b      	ldr	r3, [r7, #4]
    de70:	683a      	ldr	r2, [r7, #0]
    de72:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    de74:	bf00      	nop
    de76:	370c      	adds	r7, #12
    de78:	46bd      	mov	sp, r7
    de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    de7e:	4770      	bx	lr

0000de80 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    de80:	b480      	push	{r7}
    de82:	b083      	sub	sp, #12
    de84:	af00      	add	r7, sp, #0
    de86:	6078      	str	r0, [r7, #4]
    de88:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    de8a:	2300      	movs	r3, #0
}
    de8c:	4618      	mov	r0, r3
    de8e:	370c      	adds	r7, #12
    de90:	46bd      	mov	sp, r7
    de92:	f85d 7b04 	ldr.w	r7, [sp], #4
    de96:	4770      	bx	lr

0000de98 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    de98:	b480      	push	{r7}
    de9a:	b085      	sub	sp, #20
    de9c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    de9e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    dea2:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    dea4:	4b28      	ldr	r3, [pc, #160]	; (df48 <_usb_load_calib+0xb0>)
    dea6:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    dea8:	f003 031f 	and.w	r3, r3, #31
    deac:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    deae:	4b26      	ldr	r3, [pc, #152]	; (df48 <_usb_load_calib+0xb0>)
    deb0:	681b      	ldr	r3, [r3, #0]
    deb2:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    deb4:	f003 031f 	and.w	r3, r3, #31
    deb8:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    deba:	4b23      	ldr	r3, [pc, #140]	; (df48 <_usb_load_calib+0xb0>)
    debc:	681b      	ldr	r3, [r3, #0]
    debe:	0a9b      	lsrs	r3, r3, #10
    dec0:	f003 0307 	and.w	r3, r3, #7
    dec4:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    dec6:	68fb      	ldr	r3, [r7, #12]
    dec8:	2b00      	cmp	r3, #0
    deca:	d002      	beq.n	ded2 <_usb_load_calib+0x3a>
    decc:	68fb      	ldr	r3, [r7, #12]
    dece:	2b1f      	cmp	r3, #31
    ded0:	d101      	bne.n	ded6 <_usb_load_calib+0x3e>
		pad_transn = 9;
    ded2:	2309      	movs	r3, #9
    ded4:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    ded6:	68bb      	ldr	r3, [r7, #8]
    ded8:	2b00      	cmp	r3, #0
    deda:	d002      	beq.n	dee2 <_usb_load_calib+0x4a>
    dedc:	68bb      	ldr	r3, [r7, #8]
    dede:	2b1f      	cmp	r3, #31
    dee0:	d101      	bne.n	dee6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    dee2:	2319      	movs	r3, #25
    dee4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    dee6:	687b      	ldr	r3, [r7, #4]
    dee8:	2b00      	cmp	r3, #0
    deea:	d002      	beq.n	def2 <_usb_load_calib+0x5a>
    deec:	687b      	ldr	r3, [r7, #4]
    deee:	2b07      	cmp	r3, #7
    def0:	d101      	bne.n	def6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    def2:	2306      	movs	r3, #6
    def4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    def6:	68fb      	ldr	r3, [r7, #12]
    def8:	b29b      	uxth	r3, r3
    defa:	019b      	lsls	r3, r3, #6
    defc:	b29b      	uxth	r3, r3
    defe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    df02:	b29a      	uxth	r2, r3
    df04:	68bb      	ldr	r3, [r7, #8]
    df06:	b29b      	uxth	r3, r3
    df08:	f003 031f 	and.w	r3, r3, #31
    df0c:	b29b      	uxth	r3, r3
    df0e:	4313      	orrs	r3, r2
    df10:	b29a      	uxth	r2, r3
    df12:	687b      	ldr	r3, [r7, #4]
    df14:	b29b      	uxth	r3, r3
    df16:	031b      	lsls	r3, r3, #12
    df18:	b29b      	uxth	r3, r3
    df1a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    df1e:	b29b      	uxth	r3, r3
    df20:	4313      	orrs	r3, r2
    df22:	b29a      	uxth	r2, r3
    df24:	683b      	ldr	r3, [r7, #0]
    df26:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    df28:	683a      	ldr	r2, [r7, #0]
    df2a:	78d3      	ldrb	r3, [r2, #3]
    df2c:	f043 0303 	orr.w	r3, r3, #3
    df30:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    df32:	683a      	ldr	r2, [r7, #0]
    df34:	78d3      	ldrb	r3, [r2, #3]
    df36:	f043 030c 	orr.w	r3, r3, #12
    df3a:	70d3      	strb	r3, [r2, #3]
}
    df3c:	bf00      	nop
    df3e:	3714      	adds	r7, #20
    df40:	46bd      	mov	sp, r7
    df42:	f85d 7b04 	ldr.w	r7, [sp], #4
    df46:	4770      	bx	lr
    df48:	00800084 	.word	0x00800084

0000df4c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    df4c:	b580      	push	{r7, lr}
    df4e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    df50:	bf00      	nop
    df52:	2203      	movs	r2, #3
    df54:	2100      	movs	r1, #0
    df56:	4804      	ldr	r0, [pc, #16]	; (df68 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    df58:	4b04      	ldr	r3, [pc, #16]	; (df6c <_usb_d_dev_wait_dpll_rdy+0x20>)
    df5a:	4798      	blx	r3
    df5c:	4603      	mov	r3, r0
    df5e:	2b03      	cmp	r3, #3
    df60:	d1f7      	bne.n	df52 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    df62:	bf00      	nop
    df64:	bd80      	pop	{r7, pc}
    df66:	bf00      	nop
    df68:	40001000 	.word	0x40001000
    df6c:	0000d981 	.word	0x0000d981

0000df70 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    df70:	b580      	push	{r7, lr}
    df72:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    df74:	480e      	ldr	r0, [pc, #56]	; (dfb0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    df76:	4b0f      	ldr	r3, [pc, #60]	; (dfb4 <_usb_d_dev_wait_dfll_rdy+0x44>)
    df78:	4798      	blx	r3
    df7a:	4603      	mov	r3, r0
    df7c:	2b00      	cmp	r3, #0
    df7e:	d00a      	beq.n	df96 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    df80:	bf00      	nop
    df82:	f44f 6110 	mov.w	r1, #2304	; 0x900
    df86:	480a      	ldr	r0, [pc, #40]	; (dfb0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    df88:	4b0b      	ldr	r3, [pc, #44]	; (dfb8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    df8a:	4798      	blx	r3
    df8c:	4603      	mov	r3, r0
    df8e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    df92:	d1f6      	bne.n	df82 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    df94:	e009      	b.n	dfaa <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    df96:	bf00      	nop
    df98:	f44f 7180 	mov.w	r1, #256	; 0x100
    df9c:	4804      	ldr	r0, [pc, #16]	; (dfb0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    df9e:	4b06      	ldr	r3, [pc, #24]	; (dfb8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    dfa0:	4798      	blx	r3
    dfa2:	4603      	mov	r3, r0
    dfa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    dfa8:	d1f6      	bne.n	df98 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    dfaa:	bf00      	nop
    dfac:	bd80      	pop	{r7, pc}
    dfae:	bf00      	nop
    dfb0:	40001000 	.word	0x40001000
    dfb4:	0000d9df 	.word	0x0000d9df
    dfb8:	0000d9b9 	.word	0x0000d9b9

0000dfbc <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    dfbc:	b580      	push	{r7, lr}
    dfbe:	b082      	sub	sp, #8
    dfc0:	af00      	add	r7, sp, #0
    dfc2:	4603      	mov	r3, r0
    dfc4:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    dfc6:	79fb      	ldrb	r3, [r7, #7]
    dfc8:	2b00      	cmp	r3, #0
    dfca:	d102      	bne.n	dfd2 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    dfcc:	4b05      	ldr	r3, [pc, #20]	; (dfe4 <_usb_d_dev_wait_clk_rdy+0x28>)
    dfce:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    dfd0:	e004      	b.n	dfdc <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    dfd2:	79fb      	ldrb	r3, [r7, #7]
    dfd4:	2b01      	cmp	r3, #1
    dfd6:	d101      	bne.n	dfdc <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    dfd8:	4b03      	ldr	r3, [pc, #12]	; (dfe8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    dfda:	4798      	blx	r3
}
    dfdc:	bf00      	nop
    dfde:	3708      	adds	r7, #8
    dfe0:	46bd      	mov	sp, r7
    dfe2:	bd80      	pop	{r7, pc}
    dfe4:	0000df71 	.word	0x0000df71
    dfe8:	0000df4d 	.word	0x0000df4d

0000dfec <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    dfec:	b580      	push	{r7, lr}
    dfee:	b082      	sub	sp, #8
    dff0:	af00      	add	r7, sp, #0
    dff2:	4603      	mov	r3, r0
    dff4:	6039      	str	r1, [r7, #0]
    dff6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    dff8:	683b      	ldr	r3, [r7, #0]
    dffa:	b2da      	uxtb	r2, r3
    dffc:	79fb      	ldrb	r3, [r7, #7]
    dffe:	4619      	mov	r1, r3
    e000:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e004:	4b02      	ldr	r3, [pc, #8]	; (e010 <_usbd_ep_int_ack+0x24>)
    e006:	4798      	blx	r3
}
    e008:	bf00      	nop
    e00a:	3708      	adds	r7, #8
    e00c:	46bd      	mov	sp, r7
    e00e:	bd80      	pop	{r7, pc}
    e010:	0000dac5 	.word	0x0000dac5

0000e014 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    e014:	b580      	push	{r7, lr}
    e016:	b082      	sub	sp, #8
    e018:	af00      	add	r7, sp, #0
    e01a:	4603      	mov	r3, r0
    e01c:	6039      	str	r1, [r7, #0]
    e01e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    e020:	683b      	ldr	r3, [r7, #0]
    e022:	b2da      	uxtb	r2, r3
    e024:	79fb      	ldrb	r3, [r7, #7]
    e026:	4619      	mov	r1, r3
    e028:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e02c:	4b02      	ldr	r3, [pc, #8]	; (e038 <_usbd_ep_int_en+0x24>)
    e02e:	4798      	blx	r3
}
    e030:	bf00      	nop
    e032:	3708      	adds	r7, #8
    e034:	46bd      	mov	sp, r7
    e036:	bd80      	pop	{r7, pc}
    e038:	0000db99 	.word	0x0000db99

0000e03c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    e03c:	b580      	push	{r7, lr}
    e03e:	b082      	sub	sp, #8
    e040:	af00      	add	r7, sp, #0
    e042:	4603      	mov	r3, r0
    e044:	6039      	str	r1, [r7, #0]
    e046:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    e048:	683b      	ldr	r3, [r7, #0]
    e04a:	b2da      	uxtb	r2, r3
    e04c:	79fb      	ldrb	r3, [r7, #7]
    e04e:	4619      	mov	r1, r3
    e050:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e054:	4b02      	ldr	r3, [pc, #8]	; (e060 <_usbd_ep_int_dis+0x24>)
    e056:	4798      	blx	r3
}
    e058:	bf00      	nop
    e05a:	3708      	adds	r7, #8
    e05c:	46bd      	mov	sp, r7
    e05e:	bd80      	pop	{r7, pc}
    e060:	0000dbc5 	.word	0x0000dbc5

0000e064 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    e064:	b580      	push	{r7, lr}
    e066:	b082      	sub	sp, #8
    e068:	af00      	add	r7, sp, #0
    e06a:	4603      	mov	r3, r0
    e06c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    e06e:	79fb      	ldrb	r3, [r7, #7]
    e070:	4619      	mov	r1, r3
    e072:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e076:	4b06      	ldr	r3, [pc, #24]	; (e090 <_usbd_ep_is_ctrl+0x2c>)
    e078:	4798      	blx	r3
    e07a:	4603      	mov	r3, r0
    e07c:	2b11      	cmp	r3, #17
    e07e:	bf0c      	ite	eq
    e080:	2301      	moveq	r3, #1
    e082:	2300      	movne	r3, #0
    e084:	b2db      	uxtb	r3, r3
}
    e086:	4618      	mov	r0, r3
    e088:	3708      	adds	r7, #8
    e08a:	46bd      	mov	sp, r7
    e08c:	bd80      	pop	{r7, pc}
    e08e:	bf00      	nop
    e090:	0000dc7f 	.word	0x0000dc7f

0000e094 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    e094:	b580      	push	{r7, lr}
    e096:	b082      	sub	sp, #8
    e098:	af00      	add	r7, sp, #0
    e09a:	4603      	mov	r3, r0
    e09c:	71fb      	strb	r3, [r7, #7]
    e09e:	460b      	mov	r3, r1
    e0a0:	71bb      	strb	r3, [r7, #6]
    e0a2:	4613      	mov	r3, r2
    e0a4:	717b      	strb	r3, [r7, #5]
	if (st) {
    e0a6:	797b      	ldrb	r3, [r7, #5]
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d00b      	beq.n	e0c4 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e0ac:	79bb      	ldrb	r3, [r7, #6]
    e0ae:	2210      	movs	r2, #16
    e0b0:	fa02 f303 	lsl.w	r3, r2, r3
    e0b4:	b2da      	uxtb	r2, r3
    e0b6:	79fb      	ldrb	r3, [r7, #7]
    e0b8:	4619      	mov	r1, r3
    e0ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e0be:	4b09      	ldr	r3, [pc, #36]	; (e0e4 <_usbd_ep_set_stall+0x50>)
    e0c0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    e0c2:	e00a      	b.n	e0da <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e0c4:	79bb      	ldrb	r3, [r7, #6]
    e0c6:	2210      	movs	r2, #16
    e0c8:	fa02 f303 	lsl.w	r3, r2, r3
    e0cc:	b2da      	uxtb	r2, r3
    e0ce:	79fb      	ldrb	r3, [r7, #7]
    e0d0:	4619      	mov	r1, r3
    e0d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e0d6:	4b04      	ldr	r3, [pc, #16]	; (e0e8 <_usbd_ep_set_stall+0x54>)
    e0d8:	4798      	blx	r3
}
    e0da:	bf00      	nop
    e0dc:	3708      	adds	r7, #8
    e0de:	46bd      	mov	sp, r7
    e0e0:	bd80      	pop	{r7, pc}
    e0e2:	bf00      	nop
    e0e4:	0000daf1 	.word	0x0000daf1
    e0e8:	0000db45 	.word	0x0000db45

0000e0ec <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    e0ec:	b580      	push	{r7, lr}
    e0ee:	b084      	sub	sp, #16
    e0f0:	af00      	add	r7, sp, #0
    e0f2:	4603      	mov	r3, r0
    e0f4:	460a      	mov	r2, r1
    e0f6:	71fb      	strb	r3, [r7, #7]
    e0f8:	4613      	mov	r3, r2
    e0fa:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    e0fc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e100:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e102:	79fb      	ldrb	r3, [r7, #7]
    e104:	4619      	mov	r1, r3
    e106:	68f8      	ldr	r0, [r7, #12]
    e108:	4b08      	ldr	r3, [pc, #32]	; (e12c <_usbd_ep_is_stalled+0x40>)
    e10a:	4798      	blx	r3
    e10c:	4603      	mov	r3, r0
    e10e:	4619      	mov	r1, r3
    e110:	79bb      	ldrb	r3, [r7, #6]
    e112:	2210      	movs	r2, #16
    e114:	fa02 f303 	lsl.w	r3, r2, r3
    e118:	400b      	ands	r3, r1
    e11a:	2b00      	cmp	r3, #0
    e11c:	bf14      	ite	ne
    e11e:	2301      	movne	r3, #1
    e120:	2300      	moveq	r3, #0
    e122:	b2db      	uxtb	r3, r3
}
    e124:	4618      	mov	r0, r3
    e126:	3710      	adds	r7, #16
    e128:	46bd      	mov	sp, r7
    e12a:	bd80      	pop	{r7, pc}
    e12c:	0000db1d 	.word	0x0000db1d

0000e130 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    e130:	b580      	push	{r7, lr}
    e132:	b084      	sub	sp, #16
    e134:	af00      	add	r7, sp, #0
    e136:	4603      	mov	r3, r0
    e138:	460a      	mov	r2, r1
    e13a:	71fb      	strb	r3, [r7, #7]
    e13c:	4613      	mov	r3, r2
    e13e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    e140:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e144:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    e146:	79fb      	ldrb	r3, [r7, #7]
    e148:	4619      	mov	r1, r3
    e14a:	68f8      	ldr	r0, [r7, #12]
    e14c:	4b08      	ldr	r3, [pc, #32]	; (e170 <_usbd_ep_is_stall_sent+0x40>)
    e14e:	4798      	blx	r3
    e150:	4603      	mov	r3, r0
    e152:	4619      	mov	r1, r3
    e154:	79bb      	ldrb	r3, [r7, #6]
    e156:	2220      	movs	r2, #32
    e158:	fa02 f303 	lsl.w	r3, r2, r3
    e15c:	400b      	ands	r3, r1
    e15e:	2b00      	cmp	r3, #0
    e160:	bf14      	ite	ne
    e162:	2301      	movne	r3, #1
    e164:	2300      	moveq	r3, #0
    e166:	b2db      	uxtb	r3, r3
}
    e168:	4618      	mov	r0, r3
    e16a:	3710      	adds	r7, #16
    e16c:	46bd      	mov	sp, r7
    e16e:	bd80      	pop	{r7, pc}
    e170:	0000da9d 	.word	0x0000da9d

0000e174 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    e174:	b580      	push	{r7, lr}
    e176:	b082      	sub	sp, #8
    e178:	af00      	add	r7, sp, #0
    e17a:	4603      	mov	r3, r0
    e17c:	460a      	mov	r2, r1
    e17e:	71fb      	strb	r3, [r7, #7]
    e180:	4613      	mov	r3, r2
    e182:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    e184:	79bb      	ldrb	r3, [r7, #6]
    e186:	2220      	movs	r2, #32
    e188:	409a      	lsls	r2, r3
    e18a:	79fb      	ldrb	r3, [r7, #7]
    e18c:	4611      	mov	r1, r2
    e18e:	4618      	mov	r0, r3
    e190:	4b02      	ldr	r3, [pc, #8]	; (e19c <_usbd_ep_ack_stall+0x28>)
    e192:	4798      	blx	r3
}
    e194:	bf00      	nop
    e196:	3708      	adds	r7, #8
    e198:	46bd      	mov	sp, r7
    e19a:	bd80      	pop	{r7, pc}
    e19c:	0000dfed 	.word	0x0000dfed

0000e1a0 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    e1a0:	b580      	push	{r7, lr}
    e1a2:	b082      	sub	sp, #8
    e1a4:	af00      	add	r7, sp, #0
    e1a6:	4603      	mov	r3, r0
    e1a8:	71fb      	strb	r3, [r7, #7]
    e1aa:	460b      	mov	r3, r1
    e1ac:	71bb      	strb	r3, [r7, #6]
    e1ae:	4613      	mov	r3, r2
    e1b0:	717b      	strb	r3, [r7, #5]
	if (en) {
    e1b2:	797b      	ldrb	r3, [r7, #5]
    e1b4:	2b00      	cmp	r3, #0
    e1b6:	d008      	beq.n	e1ca <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    e1b8:	79bb      	ldrb	r3, [r7, #6]
    e1ba:	2220      	movs	r2, #32
    e1bc:	409a      	lsls	r2, r3
    e1be:	79fb      	ldrb	r3, [r7, #7]
    e1c0:	4611      	mov	r1, r2
    e1c2:	4618      	mov	r0, r3
    e1c4:	4b07      	ldr	r3, [pc, #28]	; (e1e4 <_usbd_ep_int_stall_en+0x44>)
    e1c6:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    e1c8:	e007      	b.n	e1da <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    e1ca:	79bb      	ldrb	r3, [r7, #6]
    e1cc:	2220      	movs	r2, #32
    e1ce:	409a      	lsls	r2, r3
    e1d0:	79fb      	ldrb	r3, [r7, #7]
    e1d2:	4611      	mov	r1, r2
    e1d4:	4618      	mov	r0, r3
    e1d6:	4b04      	ldr	r3, [pc, #16]	; (e1e8 <_usbd_ep_int_stall_en+0x48>)
    e1d8:	4798      	blx	r3
}
    e1da:	bf00      	nop
    e1dc:	3708      	adds	r7, #8
    e1de:	46bd      	mov	sp, r7
    e1e0:	bd80      	pop	{r7, pc}
    e1e2:	bf00      	nop
    e1e4:	0000e015 	.word	0x0000e015
    e1e8:	0000e03d 	.word	0x0000e03d

0000e1ec <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    e1ec:	b580      	push	{r7, lr}
    e1ee:	b082      	sub	sp, #8
    e1f0:	af00      	add	r7, sp, #0
    e1f2:	4603      	mov	r3, r0
    e1f4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    e1f6:	79fb      	ldrb	r3, [r7, #7]
    e1f8:	4619      	mov	r1, r3
    e1fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e1fe:	4b03      	ldr	r3, [pc, #12]	; (e20c <_usbd_ep_stop_setup+0x20>)
    e200:	4798      	blx	r3
}
    e202:	bf00      	nop
    e204:	3708      	adds	r7, #8
    e206:	46bd      	mov	sp, r7
    e208:	bd80      	pop	{r7, pc}
    e20a:	bf00      	nop
    e20c:	0000db71 	.word	0x0000db71

0000e210 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    e210:	b580      	push	{r7, lr}
    e212:	b082      	sub	sp, #8
    e214:	af00      	add	r7, sp, #0
    e216:	4603      	mov	r3, r0
    e218:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    e21a:	79fb      	ldrb	r3, [r7, #7]
    e21c:	2210      	movs	r2, #16
    e21e:	4619      	mov	r1, r3
    e220:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e224:	4b05      	ldr	r3, [pc, #20]	; (e23c <_usbd_ep_is_setup+0x2c>)
    e226:	4798      	blx	r3
    e228:	4603      	mov	r3, r0
    e22a:	2b00      	cmp	r3, #0
    e22c:	bf14      	ite	ne
    e22e:	2301      	movne	r3, #1
    e230:	2300      	moveq	r3, #0
    e232:	b2db      	uxtb	r3, r3
}
    e234:	4618      	mov	r0, r3
    e236:	3708      	adds	r7, #8
    e238:	46bd      	mov	sp, r7
    e23a:	bd80      	pop	{r7, pc}
    e23c:	0000da67 	.word	0x0000da67

0000e240 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    e240:	b580      	push	{r7, lr}
    e242:	b082      	sub	sp, #8
    e244:	af00      	add	r7, sp, #0
    e246:	4603      	mov	r3, r0
    e248:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    e24a:	79fb      	ldrb	r3, [r7, #7]
    e24c:	2110      	movs	r1, #16
    e24e:	4618      	mov	r0, r3
    e250:	4b02      	ldr	r3, [pc, #8]	; (e25c <_usbd_ep_ack_setup+0x1c>)
    e252:	4798      	blx	r3
}
    e254:	bf00      	nop
    e256:	3708      	adds	r7, #8
    e258:	46bd      	mov	sp, r7
    e25a:	bd80      	pop	{r7, pc}
    e25c:	0000dfed 	.word	0x0000dfed

0000e260 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    e260:	b580      	push	{r7, lr}
    e262:	b082      	sub	sp, #8
    e264:	af00      	add	r7, sp, #0
    e266:	4603      	mov	r3, r0
    e268:	71fb      	strb	r3, [r7, #7]
    e26a:	460b      	mov	r3, r1
    e26c:	71bb      	strb	r3, [r7, #6]
    e26e:	4613      	mov	r3, r2
    e270:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    e272:	797b      	ldrb	r3, [r7, #5]
    e274:	2b00      	cmp	r3, #0
    e276:	d00b      	beq.n	e290 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    e278:	79bb      	ldrb	r3, [r7, #6]
    e27a:	2201      	movs	r2, #1
    e27c:	fa02 f303 	lsl.w	r3, r2, r3
    e280:	b2da      	uxtb	r2, r3
    e282:	79fb      	ldrb	r3, [r7, #7]
    e284:	4619      	mov	r1, r3
    e286:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e28a:	4b09      	ldr	r3, [pc, #36]	; (e2b0 <_usbd_ep_set_toggle+0x50>)
    e28c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    e28e:	e00a      	b.n	e2a6 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    e290:	79bb      	ldrb	r3, [r7, #6]
    e292:	2201      	movs	r2, #1
    e294:	fa02 f303 	lsl.w	r3, r2, r3
    e298:	b2da      	uxtb	r2, r3
    e29a:	79fb      	ldrb	r3, [r7, #7]
    e29c:	4619      	mov	r1, r3
    e29e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e2a2:	4b04      	ldr	r3, [pc, #16]	; (e2b4 <_usbd_ep_set_toggle+0x54>)
    e2a4:	4798      	blx	r3
}
    e2a6:	bf00      	nop
    e2a8:	3708      	adds	r7, #8
    e2aa:	46bd      	mov	sp, r7
    e2ac:	bd80      	pop	{r7, pc}
    e2ae:	bf00      	nop
    e2b0:	0000daf1 	.word	0x0000daf1
    e2b4:	0000db45 	.word	0x0000db45

0000e2b8 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    e2b8:	b580      	push	{r7, lr}
    e2ba:	b082      	sub	sp, #8
    e2bc:	af00      	add	r7, sp, #0
    e2be:	4603      	mov	r3, r0
    e2c0:	460a      	mov	r2, r1
    e2c2:	71fb      	strb	r3, [r7, #7]
    e2c4:	4613      	mov	r3, r2
    e2c6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    e2c8:	79bb      	ldrb	r3, [r7, #6]
    e2ca:	2201      	movs	r2, #1
    e2cc:	409a      	lsls	r2, r3
    e2ce:	79fb      	ldrb	r3, [r7, #7]
    e2d0:	4611      	mov	r1, r2
    e2d2:	4618      	mov	r0, r3
    e2d4:	4b02      	ldr	r3, [pc, #8]	; (e2e0 <_usbd_ep_ack_io_cpt+0x28>)
    e2d6:	4798      	blx	r3
}
    e2d8:	bf00      	nop
    e2da:	3708      	adds	r7, #8
    e2dc:	46bd      	mov	sp, r7
    e2de:	bd80      	pop	{r7, pc}
    e2e0:	0000dfed 	.word	0x0000dfed

0000e2e4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    e2e4:	b480      	push	{r7}
    e2e6:	b085      	sub	sp, #20
    e2e8:	af00      	add	r7, sp, #0
    e2ea:	4603      	mov	r3, r0
    e2ec:	603a      	str	r2, [r7, #0]
    e2ee:	71fb      	strb	r3, [r7, #7]
    e2f0:	460b      	mov	r3, r1
    e2f2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e2f4:	79fa      	ldrb	r2, [r7, #7]
    e2f6:	79bb      	ldrb	r3, [r7, #6]
    e2f8:	0052      	lsls	r2, r2, #1
    e2fa:	4413      	add	r3, r2
    e2fc:	011b      	lsls	r3, r3, #4
    e2fe:	4a06      	ldr	r2, [pc, #24]	; (e318 <_usbd_ep_set_buf+0x34>)
    e300:	4413      	add	r3, r2
    e302:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    e304:	68fb      	ldr	r3, [r7, #12]
    e306:	683a      	ldr	r2, [r7, #0]
    e308:	601a      	str	r2, [r3, #0]
}
    e30a:	bf00      	nop
    e30c:	3714      	adds	r7, #20
    e30e:	46bd      	mov	sp, r7
    e310:	f85d 7b04 	ldr.w	r7, [sp], #4
    e314:	4770      	bx	lr
    e316:	bf00      	nop
    e318:	20008a4c 	.word	0x20008a4c

0000e31c <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    e31c:	b480      	push	{r7}
    e31e:	b085      	sub	sp, #20
    e320:	af00      	add	r7, sp, #0
    e322:	4603      	mov	r3, r0
    e324:	71fb      	strb	r3, [r7, #7]
    e326:	460b      	mov	r3, r1
    e328:	71bb      	strb	r3, [r7, #6]
    e32a:	4613      	mov	r3, r2
    e32c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e32e:	79fa      	ldrb	r2, [r7, #7]
    e330:	79bb      	ldrb	r3, [r7, #6]
    e332:	0052      	lsls	r2, r2, #1
    e334:	4413      	add	r3, r2
    e336:	011b      	lsls	r3, r3, #4
    e338:	4a08      	ldr	r2, [pc, #32]	; (e35c <_usbd_ep_set_in_count+0x40>)
    e33a:	4413      	add	r3, r2
    e33c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    e33e:	88bb      	ldrh	r3, [r7, #4]
    e340:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e344:	b299      	uxth	r1, r3
    e346:	68fa      	ldr	r2, [r7, #12]
    e348:	6853      	ldr	r3, [r2, #4]
    e34a:	f361 339b 	bfi	r3, r1, #14, #14
    e34e:	6053      	str	r3, [r2, #4]
}
    e350:	bf00      	nop
    e352:	3714      	adds	r7, #20
    e354:	46bd      	mov	sp, r7
    e356:	f85d 7b04 	ldr.w	r7, [sp], #4
    e35a:	4770      	bx	lr
    e35c:	20008a4c 	.word	0x20008a4c

0000e360 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    e360:	b480      	push	{r7}
    e362:	b085      	sub	sp, #20
    e364:	af00      	add	r7, sp, #0
    e366:	4603      	mov	r3, r0
    e368:	71fb      	strb	r3, [r7, #7]
    e36a:	460b      	mov	r3, r1
    e36c:	71bb      	strb	r3, [r7, #6]
    e36e:	4613      	mov	r3, r2
    e370:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e372:	79fa      	ldrb	r2, [r7, #7]
    e374:	79bb      	ldrb	r3, [r7, #6]
    e376:	0052      	lsls	r2, r2, #1
    e378:	4413      	add	r3, r2
    e37a:	011b      	lsls	r3, r3, #4
    e37c:	4a08      	ldr	r2, [pc, #32]	; (e3a0 <_usbd_ep_set_in_size+0x40>)
    e37e:	4413      	add	r3, r2
    e380:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    e382:	88bb      	ldrh	r3, [r7, #4]
    e384:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e388:	b299      	uxth	r1, r3
    e38a:	68fa      	ldr	r2, [r7, #12]
    e38c:	6853      	ldr	r3, [r2, #4]
    e38e:	f361 030d 	bfi	r3, r1, #0, #14
    e392:	6053      	str	r3, [r2, #4]
}
    e394:	bf00      	nop
    e396:	3714      	adds	r7, #20
    e398:	46bd      	mov	sp, r7
    e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e39e:	4770      	bx	lr
    e3a0:	20008a4c 	.word	0x20008a4c

0000e3a4 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    e3a4:	b480      	push	{r7}
    e3a6:	b085      	sub	sp, #20
    e3a8:	af00      	add	r7, sp, #0
    e3aa:	4603      	mov	r3, r0
    e3ac:	71fb      	strb	r3, [r7, #7]
    e3ae:	460b      	mov	r3, r1
    e3b0:	71bb      	strb	r3, [r7, #6]
    e3b2:	4613      	mov	r3, r2
    e3b4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e3b6:	79fa      	ldrb	r2, [r7, #7]
    e3b8:	79bb      	ldrb	r3, [r7, #6]
    e3ba:	0052      	lsls	r2, r2, #1
    e3bc:	4413      	add	r3, r2
    e3be:	011b      	lsls	r3, r3, #4
    e3c0:	4a08      	ldr	r2, [pc, #32]	; (e3e4 <_usbd_ep_set_out_count+0x40>)
    e3c2:	4413      	add	r3, r2
    e3c4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    e3c6:	88bb      	ldrh	r3, [r7, #4]
    e3c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e3cc:	b299      	uxth	r1, r3
    e3ce:	68fa      	ldr	r2, [r7, #12]
    e3d0:	6853      	ldr	r3, [r2, #4]
    e3d2:	f361 030d 	bfi	r3, r1, #0, #14
    e3d6:	6053      	str	r3, [r2, #4]
}
    e3d8:	bf00      	nop
    e3da:	3714      	adds	r7, #20
    e3dc:	46bd      	mov	sp, r7
    e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
    e3e2:	4770      	bx	lr
    e3e4:	20008a4c 	.word	0x20008a4c

0000e3e8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    e3e8:	b480      	push	{r7}
    e3ea:	b085      	sub	sp, #20
    e3ec:	af00      	add	r7, sp, #0
    e3ee:	4603      	mov	r3, r0
    e3f0:	71fb      	strb	r3, [r7, #7]
    e3f2:	460b      	mov	r3, r1
    e3f4:	71bb      	strb	r3, [r7, #6]
    e3f6:	4613      	mov	r3, r2
    e3f8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e3fa:	79fa      	ldrb	r2, [r7, #7]
    e3fc:	79bb      	ldrb	r3, [r7, #6]
    e3fe:	0052      	lsls	r2, r2, #1
    e400:	4413      	add	r3, r2
    e402:	011b      	lsls	r3, r3, #4
    e404:	4a08      	ldr	r2, [pc, #32]	; (e428 <_usbd_ep_set_out_size+0x40>)
    e406:	4413      	add	r3, r2
    e408:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    e40a:	88bb      	ldrh	r3, [r7, #4]
    e40c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e410:	b299      	uxth	r1, r3
    e412:	68fa      	ldr	r2, [r7, #12]
    e414:	6853      	ldr	r3, [r2, #4]
    e416:	f361 339b 	bfi	r3, r1, #14, #14
    e41a:	6053      	str	r3, [r2, #4]
}
    e41c:	bf00      	nop
    e41e:	3714      	adds	r7, #20
    e420:	46bd      	mov	sp, r7
    e422:	f85d 7b04 	ldr.w	r7, [sp], #4
    e426:	4770      	bx	lr
    e428:	20008a4c 	.word	0x20008a4c

0000e42c <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    e42c:	b580      	push	{r7, lr}
    e42e:	b084      	sub	sp, #16
    e430:	af00      	add	r7, sp, #0
    e432:	60ba      	str	r2, [r7, #8]
    e434:	607b      	str	r3, [r7, #4]
    e436:	4603      	mov	r3, r0
    e438:	73fb      	strb	r3, [r7, #15]
    e43a:	460b      	mov	r3, r1
    e43c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    e43e:	68bb      	ldr	r3, [r7, #8]
    e440:	b29a      	uxth	r2, r3
    e442:	7bb9      	ldrb	r1, [r7, #14]
    e444:	7bfb      	ldrb	r3, [r7, #15]
    e446:	4618      	mov	r0, r3
    e448:	4b06      	ldr	r3, [pc, #24]	; (e464 <_usbd_ep_set_in_trans+0x38>)
    e44a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    e44c:	687b      	ldr	r3, [r7, #4]
    e44e:	b29a      	uxth	r2, r3
    e450:	7bb9      	ldrb	r1, [r7, #14]
    e452:	7bfb      	ldrb	r3, [r7, #15]
    e454:	4618      	mov	r0, r3
    e456:	4b04      	ldr	r3, [pc, #16]	; (e468 <_usbd_ep_set_in_trans+0x3c>)
    e458:	4798      	blx	r3
}
    e45a:	bf00      	nop
    e45c:	3710      	adds	r7, #16
    e45e:	46bd      	mov	sp, r7
    e460:	bd80      	pop	{r7, pc}
    e462:	bf00      	nop
    e464:	0000e361 	.word	0x0000e361
    e468:	0000e31d 	.word	0x0000e31d

0000e46c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    e46c:	b580      	push	{r7, lr}
    e46e:	b084      	sub	sp, #16
    e470:	af00      	add	r7, sp, #0
    e472:	60ba      	str	r2, [r7, #8]
    e474:	607b      	str	r3, [r7, #4]
    e476:	4603      	mov	r3, r0
    e478:	73fb      	strb	r3, [r7, #15]
    e47a:	460b      	mov	r3, r1
    e47c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    e47e:	68bb      	ldr	r3, [r7, #8]
    e480:	b29a      	uxth	r2, r3
    e482:	7bb9      	ldrb	r1, [r7, #14]
    e484:	7bfb      	ldrb	r3, [r7, #15]
    e486:	4618      	mov	r0, r3
    e488:	4b06      	ldr	r3, [pc, #24]	; (e4a4 <_usbd_ep_set_out_trans+0x38>)
    e48a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    e48c:	687b      	ldr	r3, [r7, #4]
    e48e:	b29a      	uxth	r2, r3
    e490:	7bb9      	ldrb	r1, [r7, #14]
    e492:	7bfb      	ldrb	r3, [r7, #15]
    e494:	4618      	mov	r0, r3
    e496:	4b04      	ldr	r3, [pc, #16]	; (e4a8 <_usbd_ep_set_out_trans+0x3c>)
    e498:	4798      	blx	r3
}
    e49a:	bf00      	nop
    e49c:	3710      	adds	r7, #16
    e49e:	46bd      	mov	sp, r7
    e4a0:	bd80      	pop	{r7, pc}
    e4a2:	bf00      	nop
    e4a4:	0000e3e9 	.word	0x0000e3e9
    e4a8:	0000e3a5 	.word	0x0000e3a5

0000e4ac <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    e4ac:	b480      	push	{r7}
    e4ae:	b085      	sub	sp, #20
    e4b0:	af00      	add	r7, sp, #0
    e4b2:	4603      	mov	r3, r0
    e4b4:	460a      	mov	r2, r1
    e4b6:	71fb      	strb	r3, [r7, #7]
    e4b8:	4613      	mov	r3, r2
    e4ba:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e4bc:	79fa      	ldrb	r2, [r7, #7]
    e4be:	79bb      	ldrb	r3, [r7, #6]
    e4c0:	0052      	lsls	r2, r2, #1
    e4c2:	4413      	add	r3, r2
    e4c4:	011b      	lsls	r3, r3, #4
    e4c6:	4a06      	ldr	r2, [pc, #24]	; (e4e0 <_usbd_ep_clear_bank_status+0x34>)
    e4c8:	4413      	add	r3, r2
    e4ca:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    e4cc:	68fb      	ldr	r3, [r7, #12]
    e4ce:	2200      	movs	r2, #0
    e4d0:	729a      	strb	r2, [r3, #10]
}
    e4d2:	bf00      	nop
    e4d4:	3714      	adds	r7, #20
    e4d6:	46bd      	mov	sp, r7
    e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4dc:	4770      	bx	lr
    e4de:	bf00      	nop
    e4e0:	20008a4c 	.word	0x20008a4c

0000e4e4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    e4e4:	b580      	push	{r7, lr}
    e4e6:	b082      	sub	sp, #8
    e4e8:	af00      	add	r7, sp, #0
    e4ea:	4603      	mov	r3, r0
    e4ec:	71fb      	strb	r3, [r7, #7]
    e4ee:	460b      	mov	r3, r1
    e4f0:	71bb      	strb	r3, [r7, #6]
    e4f2:	4613      	mov	r3, r2
    e4f4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    e4f6:	797b      	ldrb	r3, [r7, #5]
    e4f8:	2b00      	cmp	r3, #0
    e4fa:	d00b      	beq.n	e514 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e4fc:	79bb      	ldrb	r3, [r7, #6]
    e4fe:	2240      	movs	r2, #64	; 0x40
    e500:	fa02 f303 	lsl.w	r3, r2, r3
    e504:	b2da      	uxtb	r2, r3
    e506:	79fb      	ldrb	r3, [r7, #7]
    e508:	4619      	mov	r1, r3
    e50a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e50e:	4b09      	ldr	r3, [pc, #36]	; (e534 <_usbd_ep_set_in_rdy+0x50>)
    e510:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    e512:	e00a      	b.n	e52a <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e514:	79bb      	ldrb	r3, [r7, #6]
    e516:	2240      	movs	r2, #64	; 0x40
    e518:	fa02 f303 	lsl.w	r3, r2, r3
    e51c:	b2da      	uxtb	r2, r3
    e51e:	79fb      	ldrb	r3, [r7, #7]
    e520:	4619      	mov	r1, r3
    e522:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e526:	4b04      	ldr	r3, [pc, #16]	; (e538 <_usbd_ep_set_in_rdy+0x54>)
    e528:	4798      	blx	r3
}
    e52a:	bf00      	nop
    e52c:	3708      	adds	r7, #8
    e52e:	46bd      	mov	sp, r7
    e530:	bd80      	pop	{r7, pc}
    e532:	bf00      	nop
    e534:	0000daf1 	.word	0x0000daf1
    e538:	0000db45 	.word	0x0000db45

0000e53c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    e53c:	b580      	push	{r7, lr}
    e53e:	b082      	sub	sp, #8
    e540:	af00      	add	r7, sp, #0
    e542:	4603      	mov	r3, r0
    e544:	71fb      	strb	r3, [r7, #7]
    e546:	460b      	mov	r3, r1
    e548:	71bb      	strb	r3, [r7, #6]
    e54a:	4613      	mov	r3, r2
    e54c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    e54e:	797b      	ldrb	r3, [r7, #5]
    e550:	2b00      	cmp	r3, #0
    e552:	d00b      	beq.n	e56c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e554:	79bb      	ldrb	r3, [r7, #6]
    e556:	2240      	movs	r2, #64	; 0x40
    e558:	fa02 f303 	lsl.w	r3, r2, r3
    e55c:	b2da      	uxtb	r2, r3
    e55e:	79fb      	ldrb	r3, [r7, #7]
    e560:	4619      	mov	r1, r3
    e562:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e566:	4b09      	ldr	r3, [pc, #36]	; (e58c <_usbd_ep_set_out_rdy+0x50>)
    e568:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    e56a:	e00a      	b.n	e582 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e56c:	79bb      	ldrb	r3, [r7, #6]
    e56e:	2240      	movs	r2, #64	; 0x40
    e570:	fa02 f303 	lsl.w	r3, r2, r3
    e574:	b2da      	uxtb	r2, r3
    e576:	79fb      	ldrb	r3, [r7, #7]
    e578:	4619      	mov	r1, r3
    e57a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e57e:	4b04      	ldr	r3, [pc, #16]	; (e590 <_usbd_ep_set_out_rdy+0x54>)
    e580:	4798      	blx	r3
}
    e582:	bf00      	nop
    e584:	3708      	adds	r7, #8
    e586:	46bd      	mov	sp, r7
    e588:	bd80      	pop	{r7, pc}
    e58a:	bf00      	nop
    e58c:	0000db45 	.word	0x0000db45
    e590:	0000daf1 	.word	0x0000daf1

0000e594 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    e594:	b480      	push	{r7}
    e596:	b083      	sub	sp, #12
    e598:	af00      	add	r7, sp, #0
    e59a:	4603      	mov	r3, r0
    e59c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    e59e:	88fb      	ldrh	r3, [r7, #6]
    e5a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e5a4:	d820      	bhi.n	e5e8 <_usbd_ep_pcksize_size+0x54>
    e5a6:	88fb      	ldrh	r3, [r7, #6]
    e5a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e5ac:	d81a      	bhi.n	e5e4 <_usbd_ep_pcksize_size+0x50>
    e5ae:	88fb      	ldrh	r3, [r7, #6]
    e5b0:	2b80      	cmp	r3, #128	; 0x80
    e5b2:	d815      	bhi.n	e5e0 <_usbd_ep_pcksize_size+0x4c>
    e5b4:	88fb      	ldrh	r3, [r7, #6]
    e5b6:	2b40      	cmp	r3, #64	; 0x40
    e5b8:	d810      	bhi.n	e5dc <_usbd_ep_pcksize_size+0x48>
    e5ba:	88fb      	ldrh	r3, [r7, #6]
    e5bc:	2b20      	cmp	r3, #32
    e5be:	d80b      	bhi.n	e5d8 <_usbd_ep_pcksize_size+0x44>
    e5c0:	88fb      	ldrh	r3, [r7, #6]
    e5c2:	2b10      	cmp	r3, #16
    e5c4:	d806      	bhi.n	e5d4 <_usbd_ep_pcksize_size+0x40>
    e5c6:	88fb      	ldrh	r3, [r7, #6]
    e5c8:	2b08      	cmp	r3, #8
    e5ca:	bf8c      	ite	hi
    e5cc:	2301      	movhi	r3, #1
    e5ce:	2300      	movls	r3, #0
    e5d0:	b2db      	uxtb	r3, r3
    e5d2:	e00a      	b.n	e5ea <_usbd_ep_pcksize_size+0x56>
    e5d4:	2302      	movs	r3, #2
    e5d6:	e008      	b.n	e5ea <_usbd_ep_pcksize_size+0x56>
    e5d8:	2303      	movs	r3, #3
    e5da:	e006      	b.n	e5ea <_usbd_ep_pcksize_size+0x56>
    e5dc:	2304      	movs	r3, #4
    e5de:	e004      	b.n	e5ea <_usbd_ep_pcksize_size+0x56>
    e5e0:	2305      	movs	r3, #5
    e5e2:	e002      	b.n	e5ea <_usbd_ep_pcksize_size+0x56>
    e5e4:	2306      	movs	r3, #6
    e5e6:	e000      	b.n	e5ea <_usbd_ep_pcksize_size+0x56>
    e5e8:	2307      	movs	r3, #7
}
    e5ea:	4618      	mov	r0, r3
    e5ec:	370c      	adds	r7, #12
    e5ee:	46bd      	mov	sp, r7
    e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e5f4:	4770      	bx	lr
	...

0000e5f8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    e5f8:	b480      	push	{r7}
    e5fa:	b085      	sub	sp, #20
    e5fc:	af00      	add	r7, sp, #0
    e5fe:	4603      	mov	r3, r0
    e600:	460a      	mov	r2, r1
    e602:	71fb      	strb	r3, [r7, #7]
    e604:	4613      	mov	r3, r2
    e606:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    e608:	79fb      	ldrb	r3, [r7, #7]
    e60a:	2b00      	cmp	r3, #0
    e60c:	d008      	beq.n	e620 <_usb_d_dev_ept+0x28>
    e60e:	79bb      	ldrb	r3, [r7, #6]
    e610:	2b00      	cmp	r3, #0
    e612:	d003      	beq.n	e61c <_usb_d_dev_ept+0x24>
    e614:	79fb      	ldrb	r3, [r7, #7]
    e616:	3304      	adds	r3, #4
    e618:	b2db      	uxtb	r3, r3
    e61a:	e002      	b.n	e622 <_usb_d_dev_ept+0x2a>
    e61c:	79fb      	ldrb	r3, [r7, #7]
    e61e:	e000      	b.n	e622 <_usb_d_dev_ept+0x2a>
    e620:	2300      	movs	r3, #0
    e622:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    e624:	7bfa      	ldrb	r2, [r7, #15]
    e626:	4613      	mov	r3, r2
    e628:	009b      	lsls	r3, r3, #2
    e62a:	4413      	add	r3, r2
    e62c:	009b      	lsls	r3, r3, #2
    e62e:	3310      	adds	r3, #16
    e630:	4a04      	ldr	r2, [pc, #16]	; (e644 <_usb_d_dev_ept+0x4c>)
    e632:	4413      	add	r3, r2
    e634:	3304      	adds	r3, #4
}
    e636:	4618      	mov	r0, r3
    e638:	3714      	adds	r7, #20
    e63a:	46bd      	mov	sp, r7
    e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e640:	4770      	bx	lr
    e642:	bf00      	nop
    e644:	20008984 	.word	0x20008984

0000e648 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    e648:	b580      	push	{r7, lr}
    e64a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    e64c:	2104      	movs	r1, #4
    e64e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e652:	4b03      	ldr	r3, [pc, #12]	; (e660 <_usb_d_dev_sof+0x18>)
    e654:	4798      	blx	r3
	dev_inst.callbacks.sof();
    e656:	4b03      	ldr	r3, [pc, #12]	; (e664 <_usb_d_dev_sof+0x1c>)
    e658:	681b      	ldr	r3, [r3, #0]
    e65a:	4798      	blx	r3
}
    e65c:	bf00      	nop
    e65e:	bd80      	pop	{r7, pc}
    e660:	0000dcbf 	.word	0x0000dcbf
    e664:	20008984 	.word	0x20008984

0000e668 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    e668:	b580      	push	{r7, lr}
    e66a:	b084      	sub	sp, #16
    e66c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    e66e:	2300      	movs	r3, #0
    e670:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e672:	f240 2101 	movw	r1, #513	; 0x201
    e676:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e67a:	4b1a      	ldr	r3, [pc, #104]	; (e6e4 <_usb_d_dev_lpmsusp+0x7c>)
    e67c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e67e:	f240 2101 	movw	r1, #513	; 0x201
    e682:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e686:	4b18      	ldr	r3, [pc, #96]	; (e6e8 <_usb_d_dev_lpmsusp+0x80>)
    e688:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e68a:	2170      	movs	r1, #112	; 0x70
    e68c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e690:	4b16      	ldr	r3, [pc, #88]	; (e6ec <_usb_d_dev_lpmsusp+0x84>)
    e692:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    e694:	2300      	movs	r3, #0
    e696:	73fb      	strb	r3, [r7, #15]
    e698:	e018      	b.n	e6cc <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    e69a:	7bfb      	ldrb	r3, [r7, #15]
    e69c:	015b      	lsls	r3, r3, #5
    e69e:	4a14      	ldr	r2, [pc, #80]	; (e6f0 <_usb_d_dev_lpmsusp+0x88>)
    e6a0:	4413      	add	r3, r2
    e6a2:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    e6a4:	687b      	ldr	r3, [r7, #4]
    e6a6:	891b      	ldrh	r3, [r3, #8]
    e6a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
    e6ac:	b2db      	uxtb	r3, r3
    e6ae:	2b03      	cmp	r3, #3
    e6b0:	d109      	bne.n	e6c6 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    e6b2:	687b      	ldr	r3, [r7, #4]
    e6b4:	891b      	ldrh	r3, [r3, #8]
    e6b6:	f3c3 130a 	ubfx	r3, r3, #4, #11
    e6ba:	b29b      	uxth	r3, r3
    e6bc:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    e6be:	687b      	ldr	r3, [r7, #4]
    e6c0:	2200      	movs	r2, #0
    e6c2:	811a      	strh	r2, [r3, #8]
			break;
    e6c4:	e005      	b.n	e6d2 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    e6c6:	7bfb      	ldrb	r3, [r7, #15]
    e6c8:	3301      	adds	r3, #1
    e6ca:	73fb      	strb	r3, [r7, #15]
    e6cc:	7bfb      	ldrb	r3, [r7, #15]
    e6ce:	2b03      	cmp	r3, #3
    e6d0:	d9e3      	bls.n	e69a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    e6d2:	4b08      	ldr	r3, [pc, #32]	; (e6f4 <_usb_d_dev_lpmsusp+0x8c>)
    e6d4:	685b      	ldr	r3, [r3, #4]
    e6d6:	68b9      	ldr	r1, [r7, #8]
    e6d8:	2003      	movs	r0, #3
    e6da:	4798      	blx	r3
}
    e6dc:	bf00      	nop
    e6de:	3710      	adds	r7, #16
    e6e0:	46bd      	mov	sp, r7
    e6e2:	bd80      	pop	{r7, pc}
    e6e4:	0000dcbf 	.word	0x0000dcbf
    e6e8:	0000dd15 	.word	0x0000dd15
    e6ec:	0000dcdd 	.word	0x0000dcdd
    e6f0:	20008a4c 	.word	0x20008a4c
    e6f4:	20008984 	.word	0x20008984

0000e6f8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    e6f8:	b580      	push	{r7, lr}
    e6fa:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    e6fc:	2180      	movs	r1, #128	; 0x80
    e6fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e702:	4b04      	ldr	r3, [pc, #16]	; (e714 <_usb_d_dev_ramerr+0x1c>)
    e704:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    e706:	4b04      	ldr	r3, [pc, #16]	; (e718 <_usb_d_dev_ramerr+0x20>)
    e708:	685b      	ldr	r3, [r3, #4]
    e70a:	2100      	movs	r1, #0
    e70c:	2005      	movs	r0, #5
    e70e:	4798      	blx	r3
}
    e710:	bf00      	nop
    e712:	bd80      	pop	{r7, pc}
    e714:	0000dcbf 	.word	0x0000dcbf
    e718:	20008984 	.word	0x20008984

0000e71c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    e71c:	b580      	push	{r7, lr}
    e71e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e720:	2170      	movs	r1, #112	; 0x70
    e722:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e726:	4b0b      	ldr	r3, [pc, #44]	; (e754 <_usb_d_dev_wakeup+0x38>)
    e728:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e72a:	2170      	movs	r1, #112	; 0x70
    e72c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e730:	4b09      	ldr	r3, [pc, #36]	; (e758 <_usb_d_dev_wakeup+0x3c>)
    e732:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e734:	f240 2101 	movw	r1, #513	; 0x201
    e738:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e73c:	4b07      	ldr	r3, [pc, #28]	; (e75c <_usb_d_dev_wakeup+0x40>)
    e73e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    e740:	2000      	movs	r0, #0
    e742:	4b07      	ldr	r3, [pc, #28]	; (e760 <_usb_d_dev_wakeup+0x44>)
    e744:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    e746:	4b07      	ldr	r3, [pc, #28]	; (e764 <_usb_d_dev_wakeup+0x48>)
    e748:	685b      	ldr	r3, [r3, #4]
    e74a:	2100      	movs	r1, #0
    e74c:	2002      	movs	r0, #2
    e74e:	4798      	blx	r3
}
    e750:	bf00      	nop
    e752:	bd80      	pop	{r7, pc}
    e754:	0000dcbf 	.word	0x0000dcbf
    e758:	0000dd15 	.word	0x0000dd15
    e75c:	0000dcdd 	.word	0x0000dcdd
    e760:	0000dfbd 	.word	0x0000dfbd
    e764:	20008984 	.word	0x20008984

0000e768 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    e768:	b580      	push	{r7, lr}
    e76a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    e76c:	2200      	movs	r2, #0
    e76e:	2100      	movs	r1, #0
    e770:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e774:	4b0d      	ldr	r3, [pc, #52]	; (e7ac <_usb_d_dev_reset+0x44>)
    e776:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    e778:	2108      	movs	r1, #8
    e77a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e77e:	4b0c      	ldr	r3, [pc, #48]	; (e7b0 <_usb_d_dev_reset+0x48>)
    e780:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e782:	2170      	movs	r1, #112	; 0x70
    e784:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e788:	4b0a      	ldr	r3, [pc, #40]	; (e7b4 <_usb_d_dev_reset+0x4c>)
    e78a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e78c:	f240 2101 	movw	r1, #513	; 0x201
    e790:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e794:	4b08      	ldr	r3, [pc, #32]	; (e7b8 <_usb_d_dev_reset+0x50>)
    e796:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    e798:	4b08      	ldr	r3, [pc, #32]	; (e7bc <_usb_d_dev_reset+0x54>)
    e79a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    e79c:	4b08      	ldr	r3, [pc, #32]	; (e7c0 <_usb_d_dev_reset+0x58>)
    e79e:	685b      	ldr	r3, [r3, #4]
    e7a0:	2100      	movs	r1, #0
    e7a2:	2001      	movs	r0, #1
    e7a4:	4798      	blx	r3
}
    e7a6:	bf00      	nop
    e7a8:	bd80      	pop	{r7, pc}
    e7aa:	bf00      	nop
    e7ac:	0000dc55 	.word	0x0000dc55
    e7b0:	0000dcbf 	.word	0x0000dcbf
    e7b4:	0000dd15 	.word	0x0000dd15
    e7b8:	0000dcdd 	.word	0x0000dcdd
    e7bc:	0000f325 	.word	0x0000f325
    e7c0:	20008984 	.word	0x20008984

0000e7c4 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    e7c4:	b580      	push	{r7, lr}
    e7c6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e7c8:	f240 2101 	movw	r1, #513	; 0x201
    e7cc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e7d0:	4b09      	ldr	r3, [pc, #36]	; (e7f8 <_usb_d_dev_suspend+0x34>)
    e7d2:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e7d4:	f240 2101 	movw	r1, #513	; 0x201
    e7d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e7dc:	4b07      	ldr	r3, [pc, #28]	; (e7fc <_usb_d_dev_suspend+0x38>)
    e7de:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e7e0:	2170      	movs	r1, #112	; 0x70
    e7e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e7e6:	4b06      	ldr	r3, [pc, #24]	; (e800 <_usb_d_dev_suspend+0x3c>)
    e7e8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    e7ea:	4b06      	ldr	r3, [pc, #24]	; (e804 <_usb_d_dev_suspend+0x40>)
    e7ec:	685b      	ldr	r3, [r3, #4]
    e7ee:	2100      	movs	r1, #0
    e7f0:	2004      	movs	r0, #4
    e7f2:	4798      	blx	r3
}
    e7f4:	bf00      	nop
    e7f6:	bd80      	pop	{r7, pc}
    e7f8:	0000dcbf 	.word	0x0000dcbf
    e7fc:	0000dd15 	.word	0x0000dd15
    e800:	0000dcdd 	.word	0x0000dcdd
    e804:	20008984 	.word	0x20008984

0000e808 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    e808:	b580      	push	{r7, lr}
    e80a:	b082      	sub	sp, #8
    e80c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    e80e:	2301      	movs	r3, #1
    e810:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    e812:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e816:	4b22      	ldr	r3, [pc, #136]	; (e8a0 <_usb_d_dev_handle_nep+0x98>)
    e818:	4798      	blx	r3
    e81a:	4603      	mov	r3, r0
    e81c:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    e81e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e822:	4b20      	ldr	r3, [pc, #128]	; (e8a4 <_usb_d_dev_handle_nep+0x9c>)
    e824:	4798      	blx	r3
    e826:	4603      	mov	r3, r0
    e828:	461a      	mov	r2, r3
    e82a:	88bb      	ldrh	r3, [r7, #4]
    e82c:	4013      	ands	r3, r2
    e82e:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    e830:	88bb      	ldrh	r3, [r7, #4]
    e832:	f003 0304 	and.w	r3, r3, #4
    e836:	2b00      	cmp	r3, #0
    e838:	d003      	beq.n	e842 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    e83a:	4b1b      	ldr	r3, [pc, #108]	; (e8a8 <_usb_d_dev_handle_nep+0xa0>)
    e83c:	4798      	blx	r3
		return true;
    e83e:	2301      	movs	r3, #1
    e840:	e02a      	b.n	e898 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    e842:	88bb      	ldrh	r3, [r7, #4]
    e844:	f403 7300 	and.w	r3, r3, #512	; 0x200
    e848:	2b00      	cmp	r3, #0
    e84a:	d002      	beq.n	e852 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    e84c:	4b17      	ldr	r3, [pc, #92]	; (e8ac <_usb_d_dev_handle_nep+0xa4>)
    e84e:	4798      	blx	r3
    e850:	e021      	b.n	e896 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    e852:	88bb      	ldrh	r3, [r7, #4]
    e854:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e858:	2b00      	cmp	r3, #0
    e85a:	d002      	beq.n	e862 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    e85c:	4b14      	ldr	r3, [pc, #80]	; (e8b0 <_usb_d_dev_handle_nep+0xa8>)
    e85e:	4798      	blx	r3
    e860:	e019      	b.n	e896 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    e862:	88bb      	ldrh	r3, [r7, #4]
    e864:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e868:	2b00      	cmp	r3, #0
    e86a:	d002      	beq.n	e872 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    e86c:	4b11      	ldr	r3, [pc, #68]	; (e8b4 <_usb_d_dev_handle_nep+0xac>)
    e86e:	4798      	blx	r3
    e870:	e011      	b.n	e896 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    e872:	88bb      	ldrh	r3, [r7, #4]
    e874:	f003 0308 	and.w	r3, r3, #8
    e878:	2b00      	cmp	r3, #0
    e87a:	d002      	beq.n	e882 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    e87c:	4b0e      	ldr	r3, [pc, #56]	; (e8b8 <_usb_d_dev_handle_nep+0xb0>)
    e87e:	4798      	blx	r3
    e880:	e009      	b.n	e896 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    e882:	88bb      	ldrh	r3, [r7, #4]
    e884:	f003 0301 	and.w	r3, r3, #1
    e888:	2b00      	cmp	r3, #0
    e88a:	d002      	beq.n	e892 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    e88c:	4b0b      	ldr	r3, [pc, #44]	; (e8bc <_usb_d_dev_handle_nep+0xb4>)
    e88e:	4798      	blx	r3
    e890:	e001      	b.n	e896 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    e892:	2300      	movs	r3, #0
    e894:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    e896:	79fb      	ldrb	r3, [r7, #7]
}
    e898:	4618      	mov	r0, r3
    e89a:	3708      	adds	r7, #8
    e89c:	46bd      	mov	sp, r7
    e89e:	bd80      	pop	{r7, pc}
    e8a0:	0000dca5 	.word	0x0000dca5
    e8a4:	0000dcfb 	.word	0x0000dcfb
    e8a8:	0000e649 	.word	0x0000e649
    e8ac:	0000e669 	.word	0x0000e669
    e8b0:	0000e6f9 	.word	0x0000e6f9
    e8b4:	0000e71d 	.word	0x0000e71d
    e8b8:	0000e769 	.word	0x0000e769
    e8bc:	0000e7c5 	.word	0x0000e7c5

0000e8c0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    e8c0:	b590      	push	{r4, r7, lr}
    e8c2:	b089      	sub	sp, #36	; 0x24
    e8c4:	af00      	add	r7, sp, #0
    e8c6:	6078      	str	r0, [r7, #4]
    e8c8:	460b      	mov	r3, r1
    e8ca:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    e8cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e8d0:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    e8d2:	687b      	ldr	r3, [r7, #4]
    e8d4:	7c9b      	ldrb	r3, [r3, #18]
    e8d6:	f003 030f 	and.w	r3, r3, #15
    e8da:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    e8dc:	7dfb      	ldrb	r3, [r7, #23]
    e8de:	015b      	lsls	r3, r3, #5
    e8e0:	4a73      	ldr	r2, [pc, #460]	; (eab0 <_usb_d_dev_in_next+0x1f0>)
    e8e2:	4413      	add	r3, r2
    e8e4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    e8e6:	78fb      	ldrb	r3, [r7, #3]
    e8e8:	2b00      	cmp	r3, #0
    e8ea:	d006      	beq.n	e8fa <_usb_d_dev_in_next+0x3a>
    e8ec:	693b      	ldr	r3, [r7, #16]
    e8ee:	3310      	adds	r3, #16
    e8f0:	685b      	ldr	r3, [r3, #4]
    e8f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e8f6:	b29b      	uxth	r3, r3
    e8f8:	e000      	b.n	e8fc <_usb_d_dev_in_next+0x3c>
    e8fa:	2300      	movs	r3, #0
    e8fc:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    e8fe:	687b      	ldr	r3, [r7, #4]
    e900:	8a1b      	ldrh	r3, [r3, #16]
    e902:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e906:	4293      	cmp	r3, r2
    e908:	d103      	bne.n	e912 <_usb_d_dev_in_next+0x52>
    e90a:	687b      	ldr	r3, [r7, #4]
    e90c:	8a1b      	ldrh	r3, [r3, #16]
    e90e:	b21b      	sxth	r3, r3
    e910:	e004      	b.n	e91c <_usb_d_dev_in_next+0x5c>
    e912:	687b      	ldr	r3, [r7, #4]
    e914:	8a1b      	ldrh	r3, [r3, #16]
    e916:	3b01      	subs	r3, #1
    e918:	b29b      	uxth	r3, r3
    e91a:	b21b      	sxth	r3, r3
    e91c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    e920:	4013      	ands	r3, r2
    e922:	b21b      	sxth	r3, r3
    e924:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    e926:	2300      	movs	r3, #0
    e928:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    e92a:	687b      	ldr	r3, [r7, #4]
    e92c:	7cdb      	ldrb	r3, [r3, #19]
    e92e:	f003 0307 	and.w	r3, r3, #7
    e932:	b2db      	uxtb	r3, r3
    e934:	2b01      	cmp	r3, #1
    e936:	bf0c      	ite	eq
    e938:	2301      	moveq	r3, #1
    e93a:	2300      	movne	r3, #0
    e93c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    e93e:	78fb      	ldrb	r3, [r7, #3]
    e940:	2b00      	cmp	r3, #0
    e942:	d004      	beq.n	e94e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    e944:	7dfb      	ldrb	r3, [r7, #23]
    e946:	2101      	movs	r1, #1
    e948:	4618      	mov	r0, r3
    e94a:	4b5a      	ldr	r3, [pc, #360]	; (eab4 <_usb_d_dev_in_next+0x1f4>)
    e94c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    e94e:	687b      	ldr	r3, [r7, #4]
    e950:	689a      	ldr	r2, [r3, #8]
    e952:	89fb      	ldrh	r3, [r7, #14]
    e954:	441a      	add	r2, r3
    e956:	687b      	ldr	r3, [r7, #4]
    e958:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    e95a:	687b      	ldr	r3, [r7, #4]
    e95c:	689a      	ldr	r2, [r3, #8]
    e95e:	687b      	ldr	r3, [r7, #4]
    e960:	685b      	ldr	r3, [r3, #4]
    e962:	429a      	cmp	r2, r3
    e964:	d243      	bcs.n	e9ee <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    e966:	687b      	ldr	r3, [r7, #4]
    e968:	685b      	ldr	r3, [r3, #4]
    e96a:	b29a      	uxth	r2, r3
    e96c:	687b      	ldr	r3, [r7, #4]
    e96e:	689b      	ldr	r3, [r3, #8]
    e970:	b29b      	uxth	r3, r3
    e972:	1ad3      	subs	r3, r2, r3
    e974:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    e976:	687b      	ldr	r3, [r7, #4]
    e978:	7cdb      	ldrb	r3, [r3, #19]
    e97a:	f003 0320 	and.w	r3, r3, #32
    e97e:	b2db      	uxtb	r3, r3
    e980:	2b00      	cmp	r3, #0
    e982:	d01b      	beq.n	e9bc <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    e984:	687b      	ldr	r3, [r7, #4]
    e986:	8a1b      	ldrh	r3, [r3, #16]
    e988:	8bfa      	ldrh	r2, [r7, #30]
    e98a:	429a      	cmp	r2, r3
    e98c:	d902      	bls.n	e994 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    e98e:	687b      	ldr	r3, [r7, #4]
    e990:	8a1b      	ldrh	r3, [r3, #16]
    e992:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    e994:	687b      	ldr	r3, [r7, #4]
    e996:	68d8      	ldr	r0, [r3, #12]
    e998:	687b      	ldr	r3, [r7, #4]
    e99a:	681a      	ldr	r2, [r3, #0]
    e99c:	687b      	ldr	r3, [r7, #4]
    e99e:	689b      	ldr	r3, [r3, #8]
    e9a0:	4413      	add	r3, r2
    e9a2:	8bfa      	ldrh	r2, [r7, #30]
    e9a4:	4619      	mov	r1, r3
    e9a6:	4b44      	ldr	r3, [pc, #272]	; (eab8 <_usb_d_dev_in_next+0x1f8>)
    e9a8:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    e9aa:	687b      	ldr	r3, [r7, #4]
    e9ac:	68db      	ldr	r3, [r3, #12]
    e9ae:	461a      	mov	r2, r3
    e9b0:	7dfb      	ldrb	r3, [r7, #23]
    e9b2:	2101      	movs	r1, #1
    e9b4:	4618      	mov	r0, r3
    e9b6:	4b41      	ldr	r3, [pc, #260]	; (eabc <_usb_d_dev_in_next+0x1fc>)
    e9b8:	4798      	blx	r3
    e9ba:	e011      	b.n	e9e0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    e9bc:	8bfb      	ldrh	r3, [r7, #30]
    e9be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e9c2:	d902      	bls.n	e9ca <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    e9c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e9c8:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    e9ca:	687b      	ldr	r3, [r7, #4]
    e9cc:	681a      	ldr	r2, [r3, #0]
    e9ce:	687b      	ldr	r3, [r7, #4]
    e9d0:	689b      	ldr	r3, [r3, #8]
    e9d2:	4413      	add	r3, r2
    e9d4:	461a      	mov	r2, r3
    e9d6:	7dfb      	ldrb	r3, [r7, #23]
    e9d8:	2101      	movs	r1, #1
    e9da:	4618      	mov	r0, r3
    e9dc:	4b37      	ldr	r3, [pc, #220]	; (eabc <_usb_d_dev_in_next+0x1fc>)
    e9de:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    e9e0:	8bfa      	ldrh	r2, [r7, #30]
    e9e2:	7df8      	ldrb	r0, [r7, #23]
    e9e4:	2300      	movs	r3, #0
    e9e6:	2101      	movs	r1, #1
    e9e8:	4c35      	ldr	r4, [pc, #212]	; (eac0 <_usb_d_dev_in_next+0x200>)
    e9ea:	47a0      	blx	r4
		goto _in_tx_exec;
    e9ec:	e041      	b.n	ea72 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    e9ee:	687b      	ldr	r3, [r7, #4]
    e9f0:	7cdb      	ldrb	r3, [r3, #19]
    e9f2:	f003 0310 	and.w	r3, r3, #16
    e9f6:	b2db      	uxtb	r3, r3
    e9f8:	2b00      	cmp	r3, #0
    e9fa:	d00b      	beq.n	ea14 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    e9fc:	687a      	ldr	r2, [r7, #4]
    e9fe:	7cd3      	ldrb	r3, [r2, #19]
    ea00:	f36f 1304 	bfc	r3, #4, #1
    ea04:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    ea06:	7df8      	ldrb	r0, [r7, #23]
    ea08:	2300      	movs	r3, #0
    ea0a:	2200      	movs	r2, #0
    ea0c:	2101      	movs	r1, #1
    ea0e:	4c2c      	ldr	r4, [pc, #176]	; (eac0 <_usb_d_dev_in_next+0x200>)
    ea10:	47a0      	blx	r4
		goto _in_tx_exec;
    ea12:	e02e      	b.n	ea72 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    ea14:	7afb      	ldrb	r3, [r7, #11]
    ea16:	2b00      	cmp	r3, #0
    ea18:	d006      	beq.n	ea28 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    ea1a:	7dfb      	ldrb	r3, [r7, #23]
    ea1c:	224b      	movs	r2, #75	; 0x4b
    ea1e:	4619      	mov	r1, r3
    ea20:	69b8      	ldr	r0, [r7, #24]
    ea22:	4b28      	ldr	r3, [pc, #160]	; (eac4 <_usb_d_dev_in_next+0x204>)
    ea24:	4798      	blx	r3
    ea26:	e005      	b.n	ea34 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    ea28:	7dfb      	ldrb	r3, [r7, #23]
    ea2a:	224a      	movs	r2, #74	; 0x4a
    ea2c:	4619      	mov	r1, r3
    ea2e:	69b8      	ldr	r0, [r7, #24]
    ea30:	4b24      	ldr	r3, [pc, #144]	; (eac4 <_usb_d_dev_in_next+0x204>)
    ea32:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    ea34:	687b      	ldr	r3, [r7, #4]
    ea36:	8a1b      	ldrh	r3, [r3, #16]
    ea38:	89ba      	ldrh	r2, [r7, #12]
    ea3a:	429a      	cmp	r2, r3
    ea3c:	d114      	bne.n	ea68 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    ea3e:	687a      	ldr	r2, [r7, #4]
    ea40:	7cd3      	ldrb	r3, [r2, #19]
    ea42:	f36f 1386 	bfc	r3, #6, #1
    ea46:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    ea48:	4b1f      	ldr	r3, [pc, #124]	; (eac8 <_usb_d_dev_in_next+0x208>)
    ea4a:	68db      	ldr	r3, [r3, #12]
    ea4c:	687a      	ldr	r2, [r7, #4]
    ea4e:	7c90      	ldrb	r0, [r2, #18]
    ea50:	687a      	ldr	r2, [r7, #4]
    ea52:	6892      	ldr	r2, [r2, #8]
    ea54:	4611      	mov	r1, r2
    ea56:	4798      	blx	r3
    ea58:	4603      	mov	r3, r0
    ea5a:	2b00      	cmp	r3, #0
    ea5c:	d124      	bne.n	eaa8 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    ea5e:	687a      	ldr	r2, [r7, #4]
    ea60:	7cd3      	ldrb	r3, [r2, #19]
    ea62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ea66:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    ea68:	2100      	movs	r1, #0
    ea6a:	6878      	ldr	r0, [r7, #4]
    ea6c:	4b17      	ldr	r3, [pc, #92]	; (eacc <_usb_d_dev_in_next+0x20c>)
    ea6e:	4798      	blx	r3
	return;
    ea70:	e01b      	b.n	eaaa <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    ea72:	78fb      	ldrb	r3, [r7, #3]
    ea74:	f083 0301 	eor.w	r3, r3, #1
    ea78:	b2db      	uxtb	r3, r3
    ea7a:	2b00      	cmp	r3, #0
    ea7c:	d00d      	beq.n	ea9a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    ea7e:	7afb      	ldrb	r3, [r7, #11]
    ea80:	2b00      	cmp	r3, #0
    ea82:	d002      	beq.n	ea8a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    ea84:	234e      	movs	r3, #78	; 0x4e
    ea86:	777b      	strb	r3, [r7, #29]
    ea88:	e001      	b.n	ea8e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    ea8a:	234a      	movs	r3, #74	; 0x4a
    ea8c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    ea8e:	7f7a      	ldrb	r2, [r7, #29]
    ea90:	7dfb      	ldrb	r3, [r7, #23]
    ea92:	4619      	mov	r1, r3
    ea94:	69b8      	ldr	r0, [r7, #24]
    ea96:	4b0e      	ldr	r3, [pc, #56]	; (ead0 <_usb_d_dev_in_next+0x210>)
    ea98:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    ea9a:	7dfb      	ldrb	r3, [r7, #23]
    ea9c:	2201      	movs	r2, #1
    ea9e:	2101      	movs	r1, #1
    eaa0:	4618      	mov	r0, r3
    eaa2:	4b0c      	ldr	r3, [pc, #48]	; (ead4 <_usb_d_dev_in_next+0x214>)
    eaa4:	4798      	blx	r3
    eaa6:	e000      	b.n	eaaa <_usb_d_dev_in_next+0x1ea>
			return;
    eaa8:	bf00      	nop
}
    eaaa:	3724      	adds	r7, #36	; 0x24
    eaac:	46bd      	mov	sp, r7
    eaae:	bd90      	pop	{r4, r7, pc}
    eab0:	20008a4c 	.word	0x20008a4c
    eab4:	0000e2b9 	.word	0x0000e2b9
    eab8:	0001d37d 	.word	0x0001d37d
    eabc:	0000e2e5 	.word	0x0000e2e5
    eac0:	0000e42d 	.word	0x0000e42d
    eac4:	0000dbc5 	.word	0x0000dbc5
    eac8:	20008984 	.word	0x20008984
    eacc:	0000fbe9 	.word	0x0000fbe9
    ead0:	0000db99 	.word	0x0000db99
    ead4:	0000e4e5 	.word	0x0000e4e5

0000ead8 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    ead8:	b590      	push	{r4, r7, lr}
    eada:	b08b      	sub	sp, #44	; 0x2c
    eadc:	af00      	add	r7, sp, #0
    eade:	6078      	str	r0, [r7, #4]
    eae0:	460b      	mov	r3, r1
    eae2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    eae4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    eae8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    eaea:	687b      	ldr	r3, [r7, #4]
    eaec:	7c9b      	ldrb	r3, [r3, #18]
    eaee:	f003 030f 	and.w	r3, r3, #15
    eaf2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    eaf4:	7ffb      	ldrb	r3, [r7, #31]
    eaf6:	015b      	lsls	r3, r3, #5
    eaf8:	4a94      	ldr	r2, [pc, #592]	; (ed4c <_usb_d_dev_out_next+0x274>)
    eafa:	4413      	add	r3, r2
    eafc:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    eafe:	78fb      	ldrb	r3, [r7, #3]
    eb00:	2b00      	cmp	r3, #0
    eb02:	d005      	beq.n	eb10 <_usb_d_dev_out_next+0x38>
    eb04:	69bb      	ldr	r3, [r7, #24]
    eb06:	685b      	ldr	r3, [r3, #4]
    eb08:	f3c3 338d 	ubfx	r3, r3, #14, #14
    eb0c:	b29b      	uxth	r3, r3
    eb0e:	e000      	b.n	eb12 <_usb_d_dev_out_next+0x3a>
    eb10:	2300      	movs	r3, #0
    eb12:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    eb14:	78fb      	ldrb	r3, [r7, #3]
    eb16:	2b00      	cmp	r3, #0
    eb18:	d005      	beq.n	eb26 <_usb_d_dev_out_next+0x4e>
    eb1a:	69bb      	ldr	r3, [r7, #24]
    eb1c:	685b      	ldr	r3, [r3, #4]
    eb1e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    eb22:	b29b      	uxth	r3, r3
    eb24:	e000      	b.n	eb28 <_usb_d_dev_out_next+0x50>
    eb26:	2300      	movs	r3, #0
    eb28:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    eb2a:	687b      	ldr	r3, [r7, #4]
    eb2c:	8a1b      	ldrh	r3, [r3, #16]
    eb2e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    eb32:	4293      	cmp	r3, r2
    eb34:	d004      	beq.n	eb40 <_usb_d_dev_out_next+0x68>
    eb36:	687b      	ldr	r3, [r7, #4]
    eb38:	8a1b      	ldrh	r3, [r3, #16]
    eb3a:	3b01      	subs	r3, #1
    eb3c:	b29b      	uxth	r3, r3
    eb3e:	e001      	b.n	eb44 <_usb_d_dev_out_next+0x6c>
    eb40:	f240 33ff 	movw	r3, #1023	; 0x3ff
    eb44:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    eb46:	8aba      	ldrh	r2, [r7, #20]
    eb48:	8a7b      	ldrh	r3, [r7, #18]
    eb4a:	4013      	ands	r3, r2
    eb4c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    eb4e:	687b      	ldr	r3, [r7, #4]
    eb50:	7cdb      	ldrb	r3, [r3, #19]
    eb52:	f003 0307 	and.w	r3, r3, #7
    eb56:	b2db      	uxtb	r3, r3
    eb58:	2b01      	cmp	r3, #1
    eb5a:	bf0c      	ite	eq
    eb5c:	2301      	moveq	r3, #1
    eb5e:	2300      	movne	r3, #0
    eb60:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    eb62:	78fb      	ldrb	r3, [r7, #3]
    eb64:	2b00      	cmp	r3, #0
    eb66:	d004      	beq.n	eb72 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    eb68:	7ffb      	ldrb	r3, [r7, #31]
    eb6a:	2100      	movs	r1, #0
    eb6c:	4618      	mov	r0, r3
    eb6e:	4b78      	ldr	r3, [pc, #480]	; (ed50 <_usb_d_dev_out_next+0x278>)
    eb70:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    eb72:	687b      	ldr	r3, [r7, #4]
    eb74:	7cdb      	ldrb	r3, [r3, #19]
    eb76:	f003 0320 	and.w	r3, r3, #32
    eb7a:	b2db      	uxtb	r3, r3
    eb7c:	2b00      	cmp	r3, #0
    eb7e:	d01c      	beq.n	ebba <_usb_d_dev_out_next+0xe2>
    eb80:	687b      	ldr	r3, [r7, #4]
    eb82:	685b      	ldr	r3, [r3, #4]
    eb84:	2b00      	cmp	r3, #0
    eb86:	d018      	beq.n	ebba <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    eb88:	687b      	ldr	r3, [r7, #4]
    eb8a:	685b      	ldr	r3, [r3, #4]
    eb8c:	b29a      	uxth	r2, r3
    eb8e:	687b      	ldr	r3, [r7, #4]
    eb90:	689b      	ldr	r3, [r3, #8]
    eb92:	b29b      	uxth	r3, r3
    eb94:	1ad3      	subs	r3, r2, r3
    eb96:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    eb98:	687b      	ldr	r3, [r7, #4]
    eb9a:	681a      	ldr	r2, [r3, #0]
    eb9c:	687b      	ldr	r3, [r7, #4]
    eb9e:	689b      	ldr	r3, [r3, #8]
    eba0:	18d0      	adds	r0, r2, r3
    eba2:	687b      	ldr	r3, [r7, #4]
    eba4:	68d9      	ldr	r1, [r3, #12]
    eba6:	89ba      	ldrh	r2, [r7, #12]
    eba8:	8a3b      	ldrh	r3, [r7, #16]
    ebaa:	429a      	cmp	r2, r3
    ebac:	d901      	bls.n	ebb2 <_usb_d_dev_out_next+0xda>
    ebae:	8a3b      	ldrh	r3, [r7, #16]
    ebb0:	e000      	b.n	ebb4 <_usb_d_dev_out_next+0xdc>
    ebb2:	89bb      	ldrh	r3, [r7, #12]
    ebb4:	461a      	mov	r2, r3
    ebb6:	4b67      	ldr	r3, [pc, #412]	; (ed54 <_usb_d_dev_out_next+0x27c>)
    ebb8:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    ebba:	687b      	ldr	r3, [r7, #4]
    ebbc:	685b      	ldr	r3, [r3, #4]
    ebbe:	2b00      	cmp	r3, #0
    ebc0:	d121      	bne.n	ec06 <_usb_d_dev_out_next+0x12e>
    ebc2:	687b      	ldr	r3, [r7, #4]
    ebc4:	7cdb      	ldrb	r3, [r3, #19]
    ebc6:	f003 0310 	and.w	r3, r3, #16
    ebca:	b2db      	uxtb	r3, r3
    ebcc:	2b00      	cmp	r3, #0
    ebce:	d01a      	beq.n	ec06 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    ebd0:	687a      	ldr	r2, [r7, #4]
    ebd2:	7cd3      	ldrb	r3, [r2, #19]
    ebd4:	f36f 1304 	bfc	r3, #4, #1
    ebd8:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    ebda:	687a      	ldr	r2, [r7, #4]
    ebdc:	7cd3      	ldrb	r3, [r2, #19]
    ebde:	f043 0320 	orr.w	r3, r3, #32
    ebe2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ebe4:	687b      	ldr	r3, [r7, #4]
    ebe6:	68db      	ldr	r3, [r3, #12]
    ebe8:	461a      	mov	r2, r3
    ebea:	7ffb      	ldrb	r3, [r7, #31]
    ebec:	2100      	movs	r1, #0
    ebee:	4618      	mov	r0, r3
    ebf0:	4b59      	ldr	r3, [pc, #356]	; (ed58 <_usb_d_dev_out_next+0x280>)
    ebf2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    ebf4:	687b      	ldr	r3, [r7, #4]
    ebf6:	8a1b      	ldrh	r3, [r3, #16]
    ebf8:	461a      	mov	r2, r3
    ebfa:	7ff8      	ldrb	r0, [r7, #31]
    ebfc:	2300      	movs	r3, #0
    ebfe:	2100      	movs	r1, #0
    ec00:	4c56      	ldr	r4, [pc, #344]	; (ed5c <_usb_d_dev_out_next+0x284>)
    ec02:	47a0      	blx	r4
		goto _out_rx_exec;
    ec04:	e090      	b.n	ed28 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    ec06:	78fb      	ldrb	r3, [r7, #3]
    ec08:	2b00      	cmp	r3, #0
    ec0a:	d010      	beq.n	ec2e <_usb_d_dev_out_next+0x156>
    ec0c:	687b      	ldr	r3, [r7, #4]
    ec0e:	8a1b      	ldrh	r3, [r3, #16]
    ec10:	8a3a      	ldrh	r2, [r7, #16]
    ec12:	429a      	cmp	r2, r3
    ec14:	d20b      	bcs.n	ec2e <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    ec16:	687a      	ldr	r2, [r7, #4]
    ec18:	7cd3      	ldrb	r3, [r2, #19]
    ec1a:	f36f 1304 	bfc	r3, #4, #1
    ec1e:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    ec20:	687b      	ldr	r3, [r7, #4]
    ec22:	689a      	ldr	r2, [r3, #8]
    ec24:	8abb      	ldrh	r3, [r7, #20]
    ec26:	441a      	add	r2, r3
    ec28:	687b      	ldr	r3, [r7, #4]
    ec2a:	609a      	str	r2, [r3, #8]
    ec2c:	e05c      	b.n	ece8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    ec2e:	687b      	ldr	r3, [r7, #4]
    ec30:	689a      	ldr	r2, [r3, #8]
    ec32:	8afb      	ldrh	r3, [r7, #22]
    ec34:	441a      	add	r2, r3
    ec36:	687b      	ldr	r3, [r7, #4]
    ec38:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    ec3a:	687b      	ldr	r3, [r7, #4]
    ec3c:	689a      	ldr	r2, [r3, #8]
    ec3e:	687b      	ldr	r3, [r7, #4]
    ec40:	685b      	ldr	r3, [r3, #4]
    ec42:	429a      	cmp	r2, r3
    ec44:	d250      	bcs.n	ece8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    ec46:	687b      	ldr	r3, [r7, #4]
    ec48:	685b      	ldr	r3, [r3, #4]
    ec4a:	b29a      	uxth	r2, r3
    ec4c:	687b      	ldr	r3, [r7, #4]
    ec4e:	689b      	ldr	r3, [r3, #8]
    ec50:	b29b      	uxth	r3, r3
    ec52:	1ad3      	subs	r3, r2, r3
    ec54:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    ec56:	687b      	ldr	r3, [r7, #4]
    ec58:	7cdb      	ldrb	r3, [r3, #19]
    ec5a:	f003 0320 	and.w	r3, r3, #32
    ec5e:	b2db      	uxtb	r3, r3
    ec60:	2b00      	cmp	r3, #0
    ec62:	d010      	beq.n	ec86 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    ec64:	687b      	ldr	r3, [r7, #4]
    ec66:	8a1b      	ldrh	r3, [r3, #16]
    ec68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ec6a:	429a      	cmp	r2, r3
    ec6c:	d902      	bls.n	ec74 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    ec6e:	687b      	ldr	r3, [r7, #4]
    ec70:	8a1b      	ldrh	r3, [r3, #16]
    ec72:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ec74:	687b      	ldr	r3, [r7, #4]
    ec76:	68db      	ldr	r3, [r3, #12]
    ec78:	461a      	mov	r2, r3
    ec7a:	7ffb      	ldrb	r3, [r7, #31]
    ec7c:	2100      	movs	r1, #0
    ec7e:	4618      	mov	r0, r3
    ec80:	4b35      	ldr	r3, [pc, #212]	; (ed58 <_usb_d_dev_out_next+0x280>)
    ec82:	4798      	blx	r3
    ec84:	e029      	b.n	ecda <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    ec86:	687b      	ldr	r3, [r7, #4]
    ec88:	8a1b      	ldrh	r3, [r3, #16]
    ec8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ec8c:	429a      	cmp	r2, r3
    ec8e:	d90f      	bls.n	ecb0 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    ec90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    ec92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ec96:	d903      	bls.n	eca0 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    ec98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ec9c:	84fb      	strh	r3, [r7, #38]	; 0x26
    ec9e:	e011      	b.n	ecc4 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    eca0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    eca2:	8a7b      	ldrh	r3, [r7, #18]
    eca4:	4013      	ands	r3, r2
    eca6:	b29b      	uxth	r3, r3
    eca8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ecaa:	1ad3      	subs	r3, r2, r3
    ecac:	84fb      	strh	r3, [r7, #38]	; 0x26
    ecae:	e009      	b.n	ecc4 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    ecb0:	687b      	ldr	r3, [r7, #4]
    ecb2:	8a1b      	ldrh	r3, [r3, #16]
    ecb4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ecb6:	429a      	cmp	r2, r3
    ecb8:	d204      	bcs.n	ecc4 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    ecba:	687a      	ldr	r2, [r7, #4]
    ecbc:	7cd3      	ldrb	r3, [r2, #19]
    ecbe:	f043 0320 	orr.w	r3, r3, #32
    ecc2:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    ecc4:	687b      	ldr	r3, [r7, #4]
    ecc6:	681a      	ldr	r2, [r3, #0]
    ecc8:	687b      	ldr	r3, [r7, #4]
    ecca:	689b      	ldr	r3, [r3, #8]
    eccc:	4413      	add	r3, r2
    ecce:	461a      	mov	r2, r3
    ecd0:	7ffb      	ldrb	r3, [r7, #31]
    ecd2:	2100      	movs	r1, #0
    ecd4:	4618      	mov	r0, r3
    ecd6:	4b20      	ldr	r3, [pc, #128]	; (ed58 <_usb_d_dev_out_next+0x280>)
    ecd8:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    ecda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ecdc:	7ff8      	ldrb	r0, [r7, #31]
    ecde:	2300      	movs	r3, #0
    ece0:	2100      	movs	r1, #0
    ece2:	4c1e      	ldr	r4, [pc, #120]	; (ed5c <_usb_d_dev_out_next+0x284>)
    ece4:	47a0      	blx	r4
			goto _out_rx_exec;
    ece6:	e01f      	b.n	ed28 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    ece8:	7bfb      	ldrb	r3, [r7, #15]
    ecea:	2b00      	cmp	r3, #0
    ecec:	d006      	beq.n	ecfc <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    ecee:	7ffb      	ldrb	r3, [r7, #31]
    ecf0:	222d      	movs	r2, #45	; 0x2d
    ecf2:	4619      	mov	r1, r3
    ecf4:	6a38      	ldr	r0, [r7, #32]
    ecf6:	4b1a      	ldr	r3, [pc, #104]	; (ed60 <_usb_d_dev_out_next+0x288>)
    ecf8:	4798      	blx	r3
    ecfa:	e005      	b.n	ed08 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    ecfc:	7ffb      	ldrb	r3, [r7, #31]
    ecfe:	2225      	movs	r2, #37	; 0x25
    ed00:	4619      	mov	r1, r3
    ed02:	6a38      	ldr	r0, [r7, #32]
    ed04:	4b16      	ldr	r3, [pc, #88]	; (ed60 <_usb_d_dev_out_next+0x288>)
    ed06:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    ed08:	7ffb      	ldrb	r3, [r7, #31]
    ed0a:	2b00      	cmp	r3, #0
    ed0c:	d107      	bne.n	ed1e <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ed0e:	687b      	ldr	r3, [r7, #4]
    ed10:	68db      	ldr	r3, [r3, #12]
    ed12:	461a      	mov	r2, r3
    ed14:	7ffb      	ldrb	r3, [r7, #31]
    ed16:	2100      	movs	r1, #0
    ed18:	4618      	mov	r0, r3
    ed1a:	4b0f      	ldr	r3, [pc, #60]	; (ed58 <_usb_d_dev_out_next+0x280>)
    ed1c:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    ed1e:	2100      	movs	r1, #0
    ed20:	6878      	ldr	r0, [r7, #4]
    ed22:	4b10      	ldr	r3, [pc, #64]	; (ed64 <_usb_d_dev_out_next+0x28c>)
    ed24:	4798      	blx	r3
	return;
    ed26:	e031      	b.n	ed8c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    ed28:	78fb      	ldrb	r3, [r7, #3]
    ed2a:	f083 0301 	eor.w	r3, r3, #1
    ed2e:	b2db      	uxtb	r3, r3
    ed30:	2b00      	cmp	r3, #0
    ed32:	d025      	beq.n	ed80 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    ed34:	7bfb      	ldrb	r3, [r7, #15]
    ed36:	2b00      	cmp	r3, #0
    ed38:	d018      	beq.n	ed6c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    ed3a:	7ffb      	ldrb	r3, [r7, #31]
    ed3c:	2101      	movs	r1, #1
    ed3e:	4618      	mov	r0, r3
    ed40:	4b09      	ldr	r3, [pc, #36]	; (ed68 <_usb_d_dev_out_next+0x290>)
    ed42:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    ed44:	232d      	movs	r3, #45	; 0x2d
    ed46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ed4a:	e012      	b.n	ed72 <_usb_d_dev_out_next+0x29a>
    ed4c:	20008a4c 	.word	0x20008a4c
    ed50:	0000e2b9 	.word	0x0000e2b9
    ed54:	0001d37d 	.word	0x0001d37d
    ed58:	0000e2e5 	.word	0x0000e2e5
    ed5c:	0000e46d 	.word	0x0000e46d
    ed60:	0000dbc5 	.word	0x0000dbc5
    ed64:	0000fbe9 	.word	0x0000fbe9
    ed68:	0000e4ad 	.word	0x0000e4ad
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    ed6c:	2325      	movs	r3, #37	; 0x25
    ed6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    ed72:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    ed76:	7ffb      	ldrb	r3, [r7, #31]
    ed78:	4619      	mov	r1, r3
    ed7a:	6a38      	ldr	r0, [r7, #32]
    ed7c:	4b05      	ldr	r3, [pc, #20]	; (ed94 <_usb_d_dev_out_next+0x2bc>)
    ed7e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    ed80:	7ffb      	ldrb	r3, [r7, #31]
    ed82:	2201      	movs	r2, #1
    ed84:	2100      	movs	r1, #0
    ed86:	4618      	mov	r0, r3
    ed88:	4b03      	ldr	r3, [pc, #12]	; (ed98 <_usb_d_dev_out_next+0x2c0>)
    ed8a:	4798      	blx	r3
}
    ed8c:	372c      	adds	r7, #44	; 0x2c
    ed8e:	46bd      	mov	sp, r7
    ed90:	bd90      	pop	{r4, r7, pc}
    ed92:	bf00      	nop
    ed94:	0000db99 	.word	0x0000db99
    ed98:	0000e53d 	.word	0x0000e53d

0000ed9c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    ed9c:	b580      	push	{r7, lr}
    ed9e:	b084      	sub	sp, #16
    eda0:	af00      	add	r7, sp, #0
    eda2:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    eda4:	687b      	ldr	r3, [r7, #4]
    eda6:	7c9b      	ldrb	r3, [r3, #18]
    eda8:	f003 030f 	and.w	r3, r3, #15
    edac:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    edae:	687b      	ldr	r3, [r7, #4]
    edb0:	7cdb      	ldrb	r3, [r3, #19]
    edb2:	f003 0307 	and.w	r3, r3, #7
    edb6:	b2db      	uxtb	r3, r3
    edb8:	2b01      	cmp	r3, #1
    edba:	bf0c      	ite	eq
    edbc:	2301      	moveq	r3, #1
    edbe:	2300      	movne	r3, #0
    edc0:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    edc2:	7bbb      	ldrb	r3, [r7, #14]
    edc4:	f083 0301 	eor.w	r3, r3, #1
    edc8:	b2db      	uxtb	r3, r3
    edca:	2b00      	cmp	r3, #0
    edcc:	d008      	beq.n	ede0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    edce:	7bfb      	ldrb	r3, [r7, #15]
    edd0:	4618      	mov	r0, r3
    edd2:	4b20      	ldr	r3, [pc, #128]	; (ee54 <_usb_d_dev_handle_setup+0xb8>)
    edd4:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    edd6:	7bfb      	ldrb	r3, [r7, #15]
    edd8:	4618      	mov	r0, r3
    edda:	4b1f      	ldr	r3, [pc, #124]	; (ee58 <_usb_d_dev_handle_setup+0xbc>)
    eddc:	4798      	blx	r3
		return;
    edde:	e036      	b.n	ee4e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    ede0:	687b      	ldr	r3, [r7, #4]
    ede2:	7cdb      	ldrb	r3, [r3, #19]
    ede4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ede8:	b2db      	uxtb	r3, r3
    edea:	2b00      	cmp	r3, #0
    edec:	d010      	beq.n	ee10 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    edee:	687a      	ldr	r2, [r7, #4]
    edf0:	7cd3      	ldrb	r3, [r2, #19]
    edf2:	f36f 1386 	bfc	r3, #6, #1
    edf6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    edf8:	7bfb      	ldrb	r3, [r7, #15]
    edfa:	2200      	movs	r2, #0
    edfc:	2101      	movs	r1, #1
    edfe:	4618      	mov	r0, r3
    ee00:	4b16      	ldr	r3, [pc, #88]	; (ee5c <_usb_d_dev_handle_setup+0xc0>)
    ee02:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    ee04:	7bfb      	ldrb	r3, [r7, #15]
    ee06:	2200      	movs	r2, #0
    ee08:	2100      	movs	r1, #0
    ee0a:	4618      	mov	r0, r3
    ee0c:	4b14      	ldr	r3, [pc, #80]	; (ee60 <_usb_d_dev_handle_setup+0xc4>)
    ee0e:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    ee10:	687a      	ldr	r2, [r7, #4]
    ee12:	7cd3      	ldrb	r3, [r2, #19]
    ee14:	f36f 03c3 	bfc	r3, #3, #1
    ee18:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    ee1a:	7bfb      	ldrb	r3, [r7, #15]
    ee1c:	2100      	movs	r1, #0
    ee1e:	4618      	mov	r0, r3
    ee20:	4b10      	ldr	r3, [pc, #64]	; (ee64 <_usb_d_dev_handle_setup+0xc8>)
    ee22:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    ee24:	7bfb      	ldrb	r3, [r7, #15]
    ee26:	2101      	movs	r1, #1
    ee28:	4618      	mov	r0, r3
    ee2a:	4b0e      	ldr	r3, [pc, #56]	; (ee64 <_usb_d_dev_handle_setup+0xc8>)
    ee2c:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    ee2e:	7bfb      	ldrb	r3, [r7, #15]
    ee30:	216f      	movs	r1, #111	; 0x6f
    ee32:	4618      	mov	r0, r3
    ee34:	4b0c      	ldr	r3, [pc, #48]	; (ee68 <_usb_d_dev_handle_setup+0xcc>)
    ee36:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    ee38:	7bfb      	ldrb	r3, [r7, #15]
    ee3a:	216f      	movs	r1, #111	; 0x6f
    ee3c:	4618      	mov	r0, r3
    ee3e:	4b0b      	ldr	r3, [pc, #44]	; (ee6c <_usb_d_dev_handle_setup+0xd0>)
    ee40:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    ee42:	4b0b      	ldr	r3, [pc, #44]	; (ee70 <_usb_d_dev_handle_setup+0xd4>)
    ee44:	689b      	ldr	r3, [r3, #8]
    ee46:	687a      	ldr	r2, [r7, #4]
    ee48:	7c92      	ldrb	r2, [r2, #18]
    ee4a:	4610      	mov	r0, r2
    ee4c:	4798      	blx	r3
}
    ee4e:	3710      	adds	r7, #16
    ee50:	46bd      	mov	sp, r7
    ee52:	bd80      	pop	{r7, pc}
    ee54:	0000e241 	.word	0x0000e241
    ee58:	0000e1ed 	.word	0x0000e1ed
    ee5c:	0000e4e5 	.word	0x0000e4e5
    ee60:	0000e53d 	.word	0x0000e53d
    ee64:	0000e4ad 	.word	0x0000e4ad
    ee68:	0000dfed 	.word	0x0000dfed
    ee6c:	0000e03d 	.word	0x0000e03d
    ee70:	20008984 	.word	0x20008984

0000ee74 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    ee74:	b580      	push	{r7, lr}
    ee76:	b084      	sub	sp, #16
    ee78:	af00      	add	r7, sp, #0
    ee7a:	6078      	str	r0, [r7, #4]
    ee7c:	460b      	mov	r3, r1
    ee7e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ee80:	687b      	ldr	r3, [r7, #4]
    ee82:	7c9b      	ldrb	r3, [r3, #18]
    ee84:	f003 030f 	and.w	r3, r3, #15
    ee88:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    ee8a:	78f9      	ldrb	r1, [r7, #3]
    ee8c:	7bfb      	ldrb	r3, [r7, #15]
    ee8e:	2200      	movs	r2, #0
    ee90:	4618      	mov	r0, r3
    ee92:	4b07      	ldr	r3, [pc, #28]	; (eeb0 <_usb_d_dev_handle_stall+0x3c>)
    ee94:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    ee96:	4b07      	ldr	r3, [pc, #28]	; (eeb4 <_usb_d_dev_handle_stall+0x40>)
    ee98:	691b      	ldr	r3, [r3, #16]
    ee9a:	687a      	ldr	r2, [r7, #4]
    ee9c:	7c90      	ldrb	r0, [r2, #18]
    ee9e:	687a      	ldr	r2, [r7, #4]
    eea0:	6892      	ldr	r2, [r2, #8]
    eea2:	2101      	movs	r1, #1
    eea4:	4798      	blx	r3
}
    eea6:	bf00      	nop
    eea8:	3710      	adds	r7, #16
    eeaa:	46bd      	mov	sp, r7
    eeac:	bd80      	pop	{r7, pc}
    eeae:	bf00      	nop
    eeb0:	0000e1a1 	.word	0x0000e1a1
    eeb4:	20008984 	.word	0x20008984

0000eeb8 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    eeb8:	b580      	push	{r7, lr}
    eeba:	b088      	sub	sp, #32
    eebc:	af00      	add	r7, sp, #0
    eebe:	6078      	str	r0, [r7, #4]
    eec0:	460b      	mov	r3, r1
    eec2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    eec4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    eec8:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    eeca:	687b      	ldr	r3, [r7, #4]
    eecc:	7c9b      	ldrb	r3, [r3, #18]
    eece:	f003 030f 	and.w	r3, r3, #15
    eed2:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    eed4:	4b61      	ldr	r3, [pc, #388]	; (f05c <_usb_d_dev_handle_trfail+0x1a4>)
    eed6:	881b      	ldrh	r3, [r3, #0]
    eed8:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    eeda:	7efb      	ldrb	r3, [r7, #27]
    eedc:	015b      	lsls	r3, r3, #5
    eede:	4a60      	ldr	r2, [pc, #384]	; (f060 <_usb_d_dev_handle_trfail+0x1a8>)
    eee0:	4413      	add	r3, r2
    eee2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    eee4:	78fb      	ldrb	r3, [r7, #3]
    eee6:	2b00      	cmp	r3, #0
    eee8:	d006      	beq.n	eef8 <_usb_d_dev_handle_trfail+0x40>
    eeea:	7efb      	ldrb	r3, [r7, #27]
    eeec:	4619      	mov	r1, r3
    eeee:	69f8      	ldr	r0, [r7, #28]
    eef0:	4b5c      	ldr	r3, [pc, #368]	; (f064 <_usb_d_dev_handle_trfail+0x1ac>)
    eef2:	4798      	blx	r3
    eef4:	4603      	mov	r3, r0
    eef6:	e005      	b.n	ef04 <_usb_d_dev_handle_trfail+0x4c>
    eef8:	7efb      	ldrb	r3, [r7, #27]
    eefa:	4619      	mov	r1, r3
    eefc:	69f8      	ldr	r0, [r7, #28]
    eefe:	4b5a      	ldr	r3, [pc, #360]	; (f068 <_usb_d_dev_handle_trfail+0x1b0>)
    ef00:	4798      	blx	r3
    ef02:	4603      	mov	r3, r0
    ef04:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    ef06:	687b      	ldr	r3, [r7, #4]
    ef08:	7cdb      	ldrb	r3, [r3, #19]
    ef0a:	f003 0307 	and.w	r3, r3, #7
    ef0e:	b2db      	uxtb	r3, r3
    ef10:	2b01      	cmp	r3, #1
    ef12:	bf0c      	ite	eq
    ef14:	2301      	moveq	r3, #1
    ef16:	2300      	movne	r3, #0
    ef18:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    ef1a:	78fb      	ldrb	r3, [r7, #3]
    ef1c:	011b      	lsls	r3, r3, #4
    ef1e:	697a      	ldr	r2, [r7, #20]
    ef20:	4413      	add	r3, r2
    ef22:	7a9b      	ldrb	r3, [r3, #10]
    ef24:	b2db      	uxtb	r3, r3
    ef26:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    ef28:	7cfb      	ldrb	r3, [r7, #19]
    ef2a:	2b02      	cmp	r3, #2
    ef2c:	d12f      	bne.n	ef8e <_usb_d_dev_handle_trfail+0xd6>
    ef2e:	7b3b      	ldrb	r3, [r7, #12]
    ef30:	f003 0301 	and.w	r3, r3, #1
    ef34:	b2db      	uxtb	r3, r3
    ef36:	2b00      	cmp	r3, #0
    ef38:	d029      	beq.n	ef8e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    ef3a:	78fb      	ldrb	r3, [r7, #3]
    ef3c:	011b      	lsls	r3, r3, #4
    ef3e:	697a      	ldr	r2, [r7, #20]
    ef40:	441a      	add	r2, r3
    ef42:	7a93      	ldrb	r3, [r2, #10]
    ef44:	f36f 0300 	bfc	r3, #0, #1
    ef48:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ef4a:	78fb      	ldrb	r3, [r7, #3]
    ef4c:	f107 0220 	add.w	r2, r7, #32
    ef50:	4413      	add	r3, r2
    ef52:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ef56:	7efb      	ldrb	r3, [r7, #27]
    ef58:	4619      	mov	r1, r3
    ef5a:	69f8      	ldr	r0, [r7, #28]
    ef5c:	4b43      	ldr	r3, [pc, #268]	; (f06c <_usb_d_dev_handle_trfail+0x1b4>)
    ef5e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ef60:	78fb      	ldrb	r3, [r7, #3]
    ef62:	f107 0220 	add.w	r2, r7, #32
    ef66:	4413      	add	r3, r2
    ef68:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ef6c:	7efb      	ldrb	r3, [r7, #27]
    ef6e:	4619      	mov	r1, r3
    ef70:	69f8      	ldr	r0, [r7, #28]
    ef72:	4b3f      	ldr	r3, [pc, #252]	; (f070 <_usb_d_dev_handle_trfail+0x1b8>)
    ef74:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    ef76:	78fb      	ldrb	r3, [r7, #3]
    ef78:	2b00      	cmp	r3, #0
    ef7a:	bf14      	ite	ne
    ef7c:	2301      	movne	r3, #1
    ef7e:	2300      	moveq	r3, #0
    ef80:	b2db      	uxtb	r3, r3
    ef82:	2204      	movs	r2, #4
    ef84:	4619      	mov	r1, r3
    ef86:	6878      	ldr	r0, [r7, #4]
    ef88:	4b3a      	ldr	r3, [pc, #232]	; (f074 <_usb_d_dev_handle_trfail+0x1bc>)
    ef8a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    ef8c:	e062      	b.n	f054 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    ef8e:	7b3b      	ldrb	r3, [r7, #12]
    ef90:	f003 0302 	and.w	r3, r3, #2
    ef94:	b2db      	uxtb	r3, r3
    ef96:	2b00      	cmp	r3, #0
    ef98:	d040      	beq.n	f01c <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    ef9a:	78fb      	ldrb	r3, [r7, #3]
    ef9c:	011b      	lsls	r3, r3, #4
    ef9e:	697a      	ldr	r2, [r7, #20]
    efa0:	441a      	add	r2, r3
    efa2:	7a93      	ldrb	r3, [r2, #10]
    efa4:	f36f 0341 	bfc	r3, #1, #1
    efa8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    efaa:	78fb      	ldrb	r3, [r7, #3]
    efac:	f107 0220 	add.w	r2, r7, #32
    efb0:	4413      	add	r3, r2
    efb2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    efb6:	7efb      	ldrb	r3, [r7, #27]
    efb8:	4619      	mov	r1, r3
    efba:	69f8      	ldr	r0, [r7, #28]
    efbc:	4b2b      	ldr	r3, [pc, #172]	; (f06c <_usb_d_dev_handle_trfail+0x1b4>)
    efbe:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    efc0:	78fb      	ldrb	r3, [r7, #3]
    efc2:	f107 0220 	add.w	r2, r7, #32
    efc6:	4413      	add	r3, r2
    efc8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    efcc:	7efb      	ldrb	r3, [r7, #27]
    efce:	4619      	mov	r1, r3
    efd0:	69f8      	ldr	r0, [r7, #28]
    efd2:	4b27      	ldr	r3, [pc, #156]	; (f070 <_usb_d_dev_handle_trfail+0x1b8>)
    efd4:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    efd6:	7cbb      	ldrb	r3, [r7, #18]
    efd8:	2b00      	cmp	r3, #0
    efda:	d03b      	beq.n	f054 <_usb_d_dev_handle_trfail+0x19c>
    efdc:	687b      	ldr	r3, [r7, #4]
    efde:	7cdb      	ldrb	r3, [r3, #19]
    efe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    efe4:	b2db      	uxtb	r3, r3
    efe6:	2b00      	cmp	r3, #0
    efe8:	d034      	beq.n	f054 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    efea:	687b      	ldr	r3, [r7, #4]
    efec:	7cdb      	ldrb	r3, [r3, #19]
    efee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    eff2:	b2db      	uxtb	r3, r3
    eff4:	461a      	mov	r2, r3
    eff6:	78fb      	ldrb	r3, [r7, #3]
    eff8:	4293      	cmp	r3, r2
    effa:	d02b      	beq.n	f054 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    effc:	687b      	ldr	r3, [r7, #4]
    effe:	7cdb      	ldrb	r3, [r3, #19]
    f000:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    f004:	b2db      	uxtb	r3, r3
    f006:	2b00      	cmp	r3, #0
    f008:	bf14      	ite	ne
    f00a:	2301      	movne	r3, #1
    f00c:	2300      	moveq	r3, #0
    f00e:	b2db      	uxtb	r3, r3
    f010:	2200      	movs	r2, #0
    f012:	4619      	mov	r1, r3
    f014:	6878      	ldr	r0, [r7, #4]
    f016:	4b17      	ldr	r3, [pc, #92]	; (f074 <_usb_d_dev_handle_trfail+0x1bc>)
    f018:	4798      	blx	r3
}
    f01a:	e01b      	b.n	f054 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    f01c:	78fa      	ldrb	r2, [r7, #3]
    f01e:	7efb      	ldrb	r3, [r7, #27]
    f020:	4611      	mov	r1, r2
    f022:	4618      	mov	r0, r3
    f024:	4b14      	ldr	r3, [pc, #80]	; (f078 <_usb_d_dev_handle_trfail+0x1c0>)
    f026:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f028:	78fb      	ldrb	r3, [r7, #3]
    f02a:	f107 0220 	add.w	r2, r7, #32
    f02e:	4413      	add	r3, r2
    f030:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f034:	7efb      	ldrb	r3, [r7, #27]
    f036:	4619      	mov	r1, r3
    f038:	69f8      	ldr	r0, [r7, #28]
    f03a:	4b0c      	ldr	r3, [pc, #48]	; (f06c <_usb_d_dev_handle_trfail+0x1b4>)
    f03c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f03e:	78fb      	ldrb	r3, [r7, #3]
    f040:	f107 0220 	add.w	r2, r7, #32
    f044:	4413      	add	r3, r2
    f046:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f04a:	7efb      	ldrb	r3, [r7, #27]
    f04c:	4619      	mov	r1, r3
    f04e:	69f8      	ldr	r0, [r7, #28]
    f050:	4b07      	ldr	r3, [pc, #28]	; (f070 <_usb_d_dev_handle_trfail+0x1b8>)
    f052:	4798      	blx	r3
}
    f054:	bf00      	nop
    f056:	3720      	adds	r7, #32
    f058:	46bd      	mov	sp, r7
    f05a:	bd80      	pop	{r7, pc}
    f05c:	00021c98 	.word	0x00021c98
    f060:	20008a4c 	.word	0x20008a4c
    f064:	0000dc21 	.word	0x0000dc21
    f068:	0000dbf1 	.word	0x0000dbf1
    f06c:	0000dac5 	.word	0x0000dac5
    f070:	0000dbc5 	.word	0x0000dbc5
    f074:	0000fc31 	.word	0x0000fc31
    f078:	0000e4ad 	.word	0x0000e4ad

0000f07c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f07c:	b580      	push	{r7, lr}
    f07e:	b082      	sub	sp, #8
    f080:	af00      	add	r7, sp, #0
    f082:	6078      	str	r0, [r7, #4]
    f084:	460b      	mov	r3, r1
    f086:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f088:	78fb      	ldrb	r3, [r7, #3]
    f08a:	f003 0310 	and.w	r3, r3, #16
    f08e:	2b00      	cmp	r3, #0
    f090:	d003      	beq.n	f09a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    f092:	6878      	ldr	r0, [r7, #4]
    f094:	4b0c      	ldr	r3, [pc, #48]	; (f0c8 <_usb_d_dev_trans_setup_isr+0x4c>)
    f096:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    f098:	e012      	b.n	f0c0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    f09a:	78fb      	ldrb	r3, [r7, #3]
    f09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f0a0:	2b00      	cmp	r3, #0
    f0a2:	d004      	beq.n	f0ae <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    f0a4:	2101      	movs	r1, #1
    f0a6:	6878      	ldr	r0, [r7, #4]
    f0a8:	4b08      	ldr	r3, [pc, #32]	; (f0cc <_usb_d_dev_trans_setup_isr+0x50>)
    f0aa:	4798      	blx	r3
}
    f0ac:	e008      	b.n	f0c0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    f0ae:	78fb      	ldrb	r3, [r7, #3]
    f0b0:	f003 0320 	and.w	r3, r3, #32
    f0b4:	2b00      	cmp	r3, #0
    f0b6:	d003      	beq.n	f0c0 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    f0b8:	2100      	movs	r1, #0
    f0ba:	6878      	ldr	r0, [r7, #4]
    f0bc:	4b03      	ldr	r3, [pc, #12]	; (f0cc <_usb_d_dev_trans_setup_isr+0x50>)
    f0be:	4798      	blx	r3
}
    f0c0:	bf00      	nop
    f0c2:	3708      	adds	r7, #8
    f0c4:	46bd      	mov	sp, r7
    f0c6:	bd80      	pop	{r7, pc}
    f0c8:	0000ed9d 	.word	0x0000ed9d
    f0cc:	0000ee75 	.word	0x0000ee75

0000f0d0 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f0d0:	b580      	push	{r7, lr}
    f0d2:	b082      	sub	sp, #8
    f0d4:	af00      	add	r7, sp, #0
    f0d6:	6078      	str	r0, [r7, #4]
    f0d8:	460b      	mov	r3, r1
    f0da:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    f0dc:	78fb      	ldrb	r3, [r7, #3]
    f0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f0e2:	2b00      	cmp	r3, #0
    f0e4:	d004      	beq.n	f0f0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    f0e6:	2101      	movs	r1, #1
    f0e8:	6878      	ldr	r0, [r7, #4]
    f0ea:	4b1a      	ldr	r3, [pc, #104]	; (f154 <_usb_d_dev_trans_in_isr+0x84>)
    f0ec:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    f0ee:	e02c      	b.n	f14a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    f0f0:	78fb      	ldrb	r3, [r7, #3]
    f0f2:	f003 0308 	and.w	r3, r3, #8
    f0f6:	2b00      	cmp	r3, #0
    f0f8:	d004      	beq.n	f104 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    f0fa:	2101      	movs	r1, #1
    f0fc:	6878      	ldr	r0, [r7, #4]
    f0fe:	4b16      	ldr	r3, [pc, #88]	; (f158 <_usb_d_dev_trans_in_isr+0x88>)
    f100:	4798      	blx	r3
}
    f102:	e022      	b.n	f14a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    f104:	78fb      	ldrb	r3, [r7, #3]
    f106:	f003 0302 	and.w	r3, r3, #2
    f10a:	2b00      	cmp	r3, #0
    f10c:	d004      	beq.n	f118 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    f10e:	2101      	movs	r1, #1
    f110:	6878      	ldr	r0, [r7, #4]
    f112:	4b12      	ldr	r3, [pc, #72]	; (f15c <_usb_d_dev_trans_in_isr+0x8c>)
    f114:	4798      	blx	r3
}
    f116:	e018      	b.n	f14a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    f118:	687b      	ldr	r3, [r7, #4]
    f11a:	7cdb      	ldrb	r3, [r3, #19]
    f11c:	f003 0307 	and.w	r3, r3, #7
    f120:	b2db      	uxtb	r3, r3
    f122:	2b01      	cmp	r3, #1
    f124:	d111      	bne.n	f14a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    f126:	78fb      	ldrb	r3, [r7, #3]
    f128:	f003 0304 	and.w	r3, r3, #4
    f12c:	2b00      	cmp	r3, #0
    f12e:	d004      	beq.n	f13a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    f130:	2100      	movs	r1, #0
    f132:	6878      	ldr	r0, [r7, #4]
    f134:	4b08      	ldr	r3, [pc, #32]	; (f158 <_usb_d_dev_trans_in_isr+0x88>)
    f136:	4798      	blx	r3
}
    f138:	e007      	b.n	f14a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f13a:	78fb      	ldrb	r3, [r7, #3]
    f13c:	f003 0310 	and.w	r3, r3, #16
    f140:	2b00      	cmp	r3, #0
    f142:	d002      	beq.n	f14a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    f144:	6878      	ldr	r0, [r7, #4]
    f146:	4b06      	ldr	r3, [pc, #24]	; (f160 <_usb_d_dev_trans_in_isr+0x90>)
    f148:	4798      	blx	r3
}
    f14a:	bf00      	nop
    f14c:	3708      	adds	r7, #8
    f14e:	46bd      	mov	sp, r7
    f150:	bd80      	pop	{r7, pc}
    f152:	bf00      	nop
    f154:	0000ee75 	.word	0x0000ee75
    f158:	0000eeb9 	.word	0x0000eeb9
    f15c:	0000e8c1 	.word	0x0000e8c1
    f160:	0000ed9d 	.word	0x0000ed9d

0000f164 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f164:	b580      	push	{r7, lr}
    f166:	b082      	sub	sp, #8
    f168:	af00      	add	r7, sp, #0
    f16a:	6078      	str	r0, [r7, #4]
    f16c:	460b      	mov	r3, r1
    f16e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    f170:	78fb      	ldrb	r3, [r7, #3]
    f172:	f003 0320 	and.w	r3, r3, #32
    f176:	2b00      	cmp	r3, #0
    f178:	d004      	beq.n	f184 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    f17a:	2100      	movs	r1, #0
    f17c:	6878      	ldr	r0, [r7, #4]
    f17e:	4b1a      	ldr	r3, [pc, #104]	; (f1e8 <_usb_d_dev_trans_out_isr+0x84>)
    f180:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    f182:	e02c      	b.n	f1de <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    f184:	78fb      	ldrb	r3, [r7, #3]
    f186:	f003 0304 	and.w	r3, r3, #4
    f18a:	2b00      	cmp	r3, #0
    f18c:	d004      	beq.n	f198 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    f18e:	2100      	movs	r1, #0
    f190:	6878      	ldr	r0, [r7, #4]
    f192:	4b16      	ldr	r3, [pc, #88]	; (f1ec <_usb_d_dev_trans_out_isr+0x88>)
    f194:	4798      	blx	r3
}
    f196:	e022      	b.n	f1de <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    f198:	78fb      	ldrb	r3, [r7, #3]
    f19a:	f003 0301 	and.w	r3, r3, #1
    f19e:	2b00      	cmp	r3, #0
    f1a0:	d004      	beq.n	f1ac <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    f1a2:	2101      	movs	r1, #1
    f1a4:	6878      	ldr	r0, [r7, #4]
    f1a6:	4b12      	ldr	r3, [pc, #72]	; (f1f0 <_usb_d_dev_trans_out_isr+0x8c>)
    f1a8:	4798      	blx	r3
}
    f1aa:	e018      	b.n	f1de <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    f1ac:	687b      	ldr	r3, [r7, #4]
    f1ae:	7cdb      	ldrb	r3, [r3, #19]
    f1b0:	f003 0307 	and.w	r3, r3, #7
    f1b4:	b2db      	uxtb	r3, r3
    f1b6:	2b01      	cmp	r3, #1
    f1b8:	d111      	bne.n	f1de <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    f1ba:	78fb      	ldrb	r3, [r7, #3]
    f1bc:	f003 0308 	and.w	r3, r3, #8
    f1c0:	2b00      	cmp	r3, #0
    f1c2:	d004      	beq.n	f1ce <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    f1c4:	2101      	movs	r1, #1
    f1c6:	6878      	ldr	r0, [r7, #4]
    f1c8:	4b08      	ldr	r3, [pc, #32]	; (f1ec <_usb_d_dev_trans_out_isr+0x88>)
    f1ca:	4798      	blx	r3
}
    f1cc:	e007      	b.n	f1de <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f1ce:	78fb      	ldrb	r3, [r7, #3]
    f1d0:	f003 0310 	and.w	r3, r3, #16
    f1d4:	2b00      	cmp	r3, #0
    f1d6:	d002      	beq.n	f1de <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    f1d8:	6878      	ldr	r0, [r7, #4]
    f1da:	4b06      	ldr	r3, [pc, #24]	; (f1f4 <_usb_d_dev_trans_out_isr+0x90>)
    f1dc:	4798      	blx	r3
}
    f1de:	bf00      	nop
    f1e0:	3708      	adds	r7, #8
    f1e2:	46bd      	mov	sp, r7
    f1e4:	bd80      	pop	{r7, pc}
    f1e6:	bf00      	nop
    f1e8:	0000ee75 	.word	0x0000ee75
    f1ec:	0000eeb9 	.word	0x0000eeb9
    f1f0:	0000ead9 	.word	0x0000ead9
    f1f4:	0000ed9d 	.word	0x0000ed9d

0000f1f8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    f1f8:	b580      	push	{r7, lr}
    f1fa:	b084      	sub	sp, #16
    f1fc:	af00      	add	r7, sp, #0
    f1fe:	6078      	str	r0, [r7, #4]
    f200:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    f202:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f206:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f208:	683b      	ldr	r3, [r7, #0]
    f20a:	7c9b      	ldrb	r3, [r3, #18]
    f20c:	f003 030f 	and.w	r3, r3, #15
    f210:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    f212:	7afb      	ldrb	r3, [r7, #11]
    f214:	2201      	movs	r2, #1
    f216:	409a      	lsls	r2, r3
    f218:	687b      	ldr	r3, [r7, #4]
    f21a:	4013      	ands	r3, r2
    f21c:	2b00      	cmp	r3, #0
    f21e:	d03d      	beq.n	f29c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    f220:	7afb      	ldrb	r3, [r7, #11]
    f222:	68fa      	ldr	r2, [r7, #12]
    f224:	3308      	adds	r3, #8
    f226:	015b      	lsls	r3, r3, #5
    f228:	4413      	add	r3, r2
    f22a:	3307      	adds	r3, #7
    f22c:	781b      	ldrb	r3, [r3, #0]
    f22e:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    f230:	7afb      	ldrb	r3, [r7, #11]
    f232:	68fa      	ldr	r2, [r7, #12]
    f234:	015b      	lsls	r3, r3, #5
    f236:	4413      	add	r3, r2
    f238:	f203 1309 	addw	r3, r3, #265	; 0x109
    f23c:	781b      	ldrb	r3, [r3, #0]
    f23e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    f240:	7aba      	ldrb	r2, [r7, #10]
    f242:	7a7b      	ldrb	r3, [r7, #9]
    f244:	4013      	ands	r3, r2
    f246:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    f248:	7abb      	ldrb	r3, [r7, #10]
    f24a:	2b00      	cmp	r3, #0
    f24c:	d027      	beq.n	f29e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    f24e:	683b      	ldr	r3, [r7, #0]
    f250:	7cdb      	ldrb	r3, [r3, #19]
    f252:	f003 0307 	and.w	r3, r3, #7
    f256:	b2db      	uxtb	r3, r3
    f258:	2b01      	cmp	r3, #1
    f25a:	d10c      	bne.n	f276 <_usb_d_dev_handle_eps+0x7e>
    f25c:	683b      	ldr	r3, [r7, #0]
    f25e:	7cdb      	ldrb	r3, [r3, #19]
    f260:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f264:	b2db      	uxtb	r3, r3
    f266:	2b00      	cmp	r3, #0
    f268:	d105      	bne.n	f276 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    f26a:	7abb      	ldrb	r3, [r7, #10]
    f26c:	4619      	mov	r1, r3
    f26e:	6838      	ldr	r0, [r7, #0]
    f270:	4b0c      	ldr	r3, [pc, #48]	; (f2a4 <_usb_d_dev_handle_eps+0xac>)
    f272:	4798      	blx	r3
    f274:	e013      	b.n	f29e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    f276:	683b      	ldr	r3, [r7, #0]
    f278:	7cdb      	ldrb	r3, [r3, #19]
    f27a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    f27e:	b2db      	uxtb	r3, r3
    f280:	2b00      	cmp	r3, #0
    f282:	d005      	beq.n	f290 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    f284:	7abb      	ldrb	r3, [r7, #10]
    f286:	4619      	mov	r1, r3
    f288:	6838      	ldr	r0, [r7, #0]
    f28a:	4b07      	ldr	r3, [pc, #28]	; (f2a8 <_usb_d_dev_handle_eps+0xb0>)
    f28c:	4798      	blx	r3
    f28e:	e006      	b.n	f29e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    f290:	7abb      	ldrb	r3, [r7, #10]
    f292:	4619      	mov	r1, r3
    f294:	6838      	ldr	r0, [r7, #0]
    f296:	4b05      	ldr	r3, [pc, #20]	; (f2ac <_usb_d_dev_handle_eps+0xb4>)
    f298:	4798      	blx	r3
    f29a:	e000      	b.n	f29e <_usb_d_dev_handle_eps+0xa6>
		return;
    f29c:	bf00      	nop
		}
	}
}
    f29e:	3710      	adds	r7, #16
    f2a0:	46bd      	mov	sp, r7
    f2a2:	bd80      	pop	{r7, pc}
    f2a4:	0000f07d 	.word	0x0000f07d
    f2a8:	0000f0d1 	.word	0x0000f0d1
    f2ac:	0000f165 	.word	0x0000f165

0000f2b0 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    f2b0:	b580      	push	{r7, lr}
    f2b2:	b084      	sub	sp, #16
    f2b4:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    f2b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f2ba:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    f2bc:	68bb      	ldr	r3, [r7, #8]
    f2be:	8c1b      	ldrh	r3, [r3, #32]
    f2c0:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    f2c2:	88fb      	ldrh	r3, [r7, #6]
    f2c4:	2b00      	cmp	r3, #0
    f2c6:	d104      	bne.n	f2d2 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    f2c8:	4b13      	ldr	r3, [pc, #76]	; (f318 <_usb_d_dev_handler+0x68>)
    f2ca:	4798      	blx	r3
    f2cc:	4603      	mov	r3, r0
    f2ce:	2b00      	cmp	r3, #0
    f2d0:	d11e      	bne.n	f310 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    f2d2:	2300      	movs	r3, #0
    f2d4:	73fb      	strb	r3, [r7, #15]
    f2d6:	e017      	b.n	f308 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    f2d8:	7bfa      	ldrb	r2, [r7, #15]
    f2da:	4613      	mov	r3, r2
    f2dc:	009b      	lsls	r3, r3, #2
    f2de:	4413      	add	r3, r2
    f2e0:	009b      	lsls	r3, r3, #2
    f2e2:	3310      	adds	r3, #16
    f2e4:	4a0d      	ldr	r2, [pc, #52]	; (f31c <_usb_d_dev_handler+0x6c>)
    f2e6:	4413      	add	r3, r2
    f2e8:	3304      	adds	r3, #4
    f2ea:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    f2ec:	683b      	ldr	r3, [r7, #0]
    f2ee:	7c9b      	ldrb	r3, [r3, #18]
    f2f0:	2bff      	cmp	r3, #255	; 0xff
    f2f2:	d005      	beq.n	f300 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    f2f4:	88fb      	ldrh	r3, [r7, #6]
    f2f6:	6839      	ldr	r1, [r7, #0]
    f2f8:	4618      	mov	r0, r3
    f2fa:	4b09      	ldr	r3, [pc, #36]	; (f320 <_usb_d_dev_handler+0x70>)
    f2fc:	4798      	blx	r3
    f2fe:	e000      	b.n	f302 <_usb_d_dev_handler+0x52>
			continue;
    f300:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    f302:	7bfb      	ldrb	r3, [r7, #15]
    f304:	3301      	adds	r3, #1
    f306:	73fb      	strb	r3, [r7, #15]
    f308:	7bfb      	ldrb	r3, [r7, #15]
    f30a:	2b08      	cmp	r3, #8
    f30c:	d9e4      	bls.n	f2d8 <_usb_d_dev_handler+0x28>
    f30e:	e000      	b.n	f312 <_usb_d_dev_handler+0x62>
			return;
    f310:	bf00      	nop
	}
}
    f312:	3710      	adds	r7, #16
    f314:	46bd      	mov	sp, r7
    f316:	bd80      	pop	{r7, pc}
    f318:	0000e809 	.word	0x0000e809
    f31c:	20008984 	.word	0x20008984
    f320:	0000f1f9 	.word	0x0000f1f9

0000f324 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    f324:	b580      	push	{r7, lr}
    f326:	b082      	sub	sp, #8
    f328:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    f32a:	2300      	movs	r3, #0
    f32c:	71fb      	strb	r3, [r7, #7]
    f32e:	e023      	b.n	f378 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    f330:	79fa      	ldrb	r2, [r7, #7]
    f332:	4613      	mov	r3, r2
    f334:	009b      	lsls	r3, r3, #2
    f336:	4413      	add	r3, r2
    f338:	009b      	lsls	r3, r3, #2
    f33a:	3310      	adds	r3, #16
    f33c:	4a14      	ldr	r2, [pc, #80]	; (f390 <_usb_d_dev_reset_epts+0x6c>)
    f33e:	4413      	add	r3, r2
    f340:	3304      	adds	r3, #4
    f342:	2103      	movs	r1, #3
    f344:	4618      	mov	r0, r3
    f346:	4b13      	ldr	r3, [pc, #76]	; (f394 <_usb_d_dev_reset_epts+0x70>)
    f348:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    f34a:	79fa      	ldrb	r2, [r7, #7]
    f34c:	4910      	ldr	r1, [pc, #64]	; (f390 <_usb_d_dev_reset_epts+0x6c>)
    f34e:	4613      	mov	r3, r2
    f350:	009b      	lsls	r3, r3, #2
    f352:	4413      	add	r3, r2
    f354:	009b      	lsls	r3, r3, #2
    f356:	440b      	add	r3, r1
    f358:	3326      	adds	r3, #38	; 0x26
    f35a:	22ff      	movs	r2, #255	; 0xff
    f35c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    f35e:	79fa      	ldrb	r2, [r7, #7]
    f360:	490b      	ldr	r1, [pc, #44]	; (f390 <_usb_d_dev_reset_epts+0x6c>)
    f362:	4613      	mov	r3, r2
    f364:	009b      	lsls	r3, r3, #2
    f366:	4413      	add	r3, r2
    f368:	009b      	lsls	r3, r3, #2
    f36a:	440b      	add	r3, r1
    f36c:	3327      	adds	r3, #39	; 0x27
    f36e:	2200      	movs	r2, #0
    f370:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    f372:	79fb      	ldrb	r3, [r7, #7]
    f374:	3301      	adds	r3, #1
    f376:	71fb      	strb	r3, [r7, #7]
    f378:	79fb      	ldrb	r3, [r7, #7]
    f37a:	2b08      	cmp	r3, #8
    f37c:	d9d8      	bls.n	f330 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    f37e:	22a0      	movs	r2, #160	; 0xa0
    f380:	2100      	movs	r1, #0
    f382:	4805      	ldr	r0, [pc, #20]	; (f398 <_usb_d_dev_reset_epts+0x74>)
    f384:	4b05      	ldr	r3, [pc, #20]	; (f39c <_usb_d_dev_reset_epts+0x78>)
    f386:	4798      	blx	r3
}
    f388:	bf00      	nop
    f38a:	3708      	adds	r7, #8
    f38c:	46bd      	mov	sp, r7
    f38e:	bd80      	pop	{r7, pc}
    f390:	20008984 	.word	0x20008984
    f394:	0000fbe9 	.word	0x0000fbe9
    f398:	20008a4c 	.word	0x20008a4c
    f39c:	0001d4b1 	.word	0x0001d4b1

0000f3a0 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    f3a0:	b580      	push	{r7, lr}
    f3a2:	b084      	sub	sp, #16
    f3a4:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    f3a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f3aa:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    f3ac:	2301      	movs	r3, #1
    f3ae:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    f3b0:	2304      	movs	r3, #4
    f3b2:	713b      	strb	r3, [r7, #4]
    f3b4:	2300      	movs	r3, #0
    f3b6:	717b      	strb	r3, [r7, #5]
    f3b8:	2300      	movs	r3, #0
    f3ba:	71bb      	strb	r3, [r7, #6]
    f3bc:	2300      	movs	r3, #0
    f3be:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    f3c0:	2101      	movs	r1, #1
    f3c2:	68f8      	ldr	r0, [r7, #12]
    f3c4:	4b26      	ldr	r3, [pc, #152]	; (f460 <_usb_d_dev_init+0xc0>)
    f3c6:	4798      	blx	r3
    f3c8:	4603      	mov	r3, r0
    f3ca:	f083 0301 	eor.w	r3, r3, #1
    f3ce:	b2db      	uxtb	r3, r3
    f3d0:	2b00      	cmp	r3, #0
    f3d2:	d011      	beq.n	f3f8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    f3d4:	2102      	movs	r1, #2
    f3d6:	68f8      	ldr	r0, [r7, #12]
    f3d8:	4b22      	ldr	r3, [pc, #136]	; (f464 <_usb_d_dev_init+0xc4>)
    f3da:	4798      	blx	r3
    f3dc:	4603      	mov	r3, r0
    f3de:	2b00      	cmp	r3, #0
    f3e0:	d006      	beq.n	f3f0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    f3e2:	68f8      	ldr	r0, [r7, #12]
    f3e4:	4b20      	ldr	r3, [pc, #128]	; (f468 <_usb_d_dev_init+0xc8>)
    f3e6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    f3e8:	2102      	movs	r1, #2
    f3ea:	68f8      	ldr	r0, [r7, #12]
    f3ec:	4b1f      	ldr	r3, [pc, #124]	; (f46c <_usb_d_dev_init+0xcc>)
    f3ee:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    f3f0:	2101      	movs	r1, #1
    f3f2:	68f8      	ldr	r0, [r7, #12]
    f3f4:	4b1e      	ldr	r3, [pc, #120]	; (f470 <_usb_d_dev_init+0xd0>)
    f3f6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    f3f8:	2101      	movs	r1, #1
    f3fa:	68f8      	ldr	r0, [r7, #12]
    f3fc:	4b1b      	ldr	r3, [pc, #108]	; (f46c <_usb_d_dev_init+0xcc>)
    f3fe:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    f400:	4b1c      	ldr	r3, [pc, #112]	; (f474 <_usb_d_dev_init+0xd4>)
    f402:	4a1d      	ldr	r2, [pc, #116]	; (f478 <_usb_d_dev_init+0xd8>)
    f404:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    f406:	4b1b      	ldr	r3, [pc, #108]	; (f474 <_usb_d_dev_init+0xd4>)
    f408:	4a1b      	ldr	r2, [pc, #108]	; (f478 <_usb_d_dev_init+0xd8>)
    f40a:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    f40c:	4b19      	ldr	r3, [pc, #100]	; (f474 <_usb_d_dev_init+0xd4>)
    f40e:	4a1a      	ldr	r2, [pc, #104]	; (f478 <_usb_d_dev_init+0xd8>)
    f410:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    f412:	4b18      	ldr	r3, [pc, #96]	; (f474 <_usb_d_dev_init+0xd4>)
    f414:	4a18      	ldr	r2, [pc, #96]	; (f478 <_usb_d_dev_init+0xd8>)
    f416:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    f418:	4b16      	ldr	r3, [pc, #88]	; (f474 <_usb_d_dev_init+0xd4>)
    f41a:	4a17      	ldr	r2, [pc, #92]	; (f478 <_usb_d_dev_init+0xd8>)
    f41c:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    f41e:	4b17      	ldr	r3, [pc, #92]	; (f47c <_usb_d_dev_init+0xdc>)
    f420:	4798      	blx	r3

	_usb_load_calib();
    f422:	4b17      	ldr	r3, [pc, #92]	; (f480 <_usb_d_dev_init+0xe0>)
    f424:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    f426:	2104      	movs	r1, #4
    f428:	68f8      	ldr	r0, [r7, #12]
    f42a:	4b11      	ldr	r3, [pc, #68]	; (f470 <_usb_d_dev_init+0xd0>)
    f42c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    f42e:	4b15      	ldr	r3, [pc, #84]	; (f484 <_usb_d_dev_init+0xe4>)
    f430:	4619      	mov	r1, r3
    f432:	68f8      	ldr	r0, [r7, #12]
    f434:	4b14      	ldr	r3, [pc, #80]	; (f488 <_usb_d_dev_init+0xe8>)
    f436:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    f438:	7afb      	ldrb	r3, [r7, #11]
    f43a:	f107 0210 	add.w	r2, r7, #16
    f43e:	4413      	add	r3, r2
    f440:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    f444:	f043 0301 	orr.w	r3, r3, #1
    f448:	b2db      	uxtb	r3, r3
    f44a:	b29b      	uxth	r3, r3
    f44c:	4619      	mov	r1, r3
    f44e:	68f8      	ldr	r0, [r7, #12]
    f450:	4b0e      	ldr	r3, [pc, #56]	; (f48c <_usb_d_dev_init+0xec>)
    f452:	4798      	blx	r3

	return ERR_NONE;
    f454:	2300      	movs	r3, #0
}
    f456:	4618      	mov	r0, r3
    f458:	3710      	adds	r7, #16
    f45a:	46bd      	mov	sp, r7
    f45c:	bd80      	pop	{r7, pc}
    f45e:	bf00      	nop
    f460:	0000da39 	.word	0x0000da39
    f464:	0000dd89 	.word	0x0000dd89
    f468:	0000dd5d 	.word	0x0000dd5d
    f46c:	0000da0f 	.word	0x0000da0f
    f470:	0000ddb9 	.word	0x0000ddb9
    f474:	20008984 	.word	0x20008984
    f478:	0000de81 	.word	0x0000de81
    f47c:	0000f325 	.word	0x0000f325
    f480:	0000de99 	.word	0x0000de99
    f484:	20008a4c 	.word	0x20008a4c
    f488:	0000de65 	.word	0x0000de65
    f48c:	0000de29 	.word	0x0000de29

0000f490 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    f490:	b580      	push	{r7, lr}
    f492:	b082      	sub	sp, #8
    f494:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    f496:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f49a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    f49c:	2103      	movs	r1, #3
    f49e:	6878      	ldr	r0, [r7, #4]
    f4a0:	4b17      	ldr	r3, [pc, #92]	; (f500 <_usb_d_dev_enable+0x70>)
    f4a2:	4798      	blx	r3
    f4a4:	4603      	mov	r3, r0
    f4a6:	2b00      	cmp	r3, #0
    f4a8:	d002      	beq.n	f4b0 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    f4aa:	f06f 0310 	mvn.w	r3, #16
    f4ae:	e023      	b.n	f4f8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    f4b0:	6878      	ldr	r0, [r7, #4]
    f4b2:	4b14      	ldr	r3, [pc, #80]	; (f504 <_usb_d_dev_enable+0x74>)
    f4b4:	4798      	blx	r3
    f4b6:	4603      	mov	r3, r0
    f4b8:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    f4ba:	78fb      	ldrb	r3, [r7, #3]
    f4bc:	f003 0302 	and.w	r3, r3, #2
    f4c0:	2b00      	cmp	r3, #0
    f4c2:	d107      	bne.n	f4d4 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    f4c4:	78fb      	ldrb	r3, [r7, #3]
    f4c6:	f043 0302 	orr.w	r3, r3, #2
    f4ca:	b2db      	uxtb	r3, r3
    f4cc:	4619      	mov	r1, r3
    f4ce:	6878      	ldr	r0, [r7, #4]
    f4d0:	4b0d      	ldr	r3, [pc, #52]	; (f508 <_usb_d_dev_enable+0x78>)
    f4d2:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    f4d4:	2050      	movs	r0, #80	; 0x50
    f4d6:	4b0d      	ldr	r3, [pc, #52]	; (f50c <_usb_d_dev_enable+0x7c>)
    f4d8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    f4da:	2051      	movs	r0, #81	; 0x51
    f4dc:	4b0b      	ldr	r3, [pc, #44]	; (f50c <_usb_d_dev_enable+0x7c>)
    f4de:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    f4e0:	2052      	movs	r0, #82	; 0x52
    f4e2:	4b0a      	ldr	r3, [pc, #40]	; (f50c <_usb_d_dev_enable+0x7c>)
    f4e4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    f4e6:	2053      	movs	r0, #83	; 0x53
    f4e8:	4b08      	ldr	r3, [pc, #32]	; (f50c <_usb_d_dev_enable+0x7c>)
    f4ea:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    f4ec:	f240 218d 	movw	r1, #653	; 0x28d
    f4f0:	6878      	ldr	r0, [r7, #4]
    f4f2:	4b07      	ldr	r3, [pc, #28]	; (f510 <_usb_d_dev_enable+0x80>)
    f4f4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    f4f6:	2300      	movs	r3, #0
}
    f4f8:	4618      	mov	r0, r3
    f4fa:	3708      	adds	r7, #8
    f4fc:	46bd      	mov	sp, r7
    f4fe:	bd80      	pop	{r7, pc}
    f500:	0000dd33 	.word	0x0000dd33
    f504:	0000dde1 	.word	0x0000dde1
    f508:	0000ddb9 	.word	0x0000ddb9
    f50c:	0000d945 	.word	0x0000d945
    f510:	0000dcdd 	.word	0x0000dcdd

0000f514 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    f514:	b580      	push	{r7, lr}
    f516:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    f518:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f51c:	4b01      	ldr	r3, [pc, #4]	; (f524 <_usb_d_dev_attach+0x10>)
    f51e:	4798      	blx	r3
}
    f520:	bf00      	nop
    f522:	bd80      	pop	{r7, pc}
    f524:	0000de05 	.word	0x0000de05

0000f528 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    f528:	b580      	push	{r7, lr}
    f52a:	b082      	sub	sp, #8
    f52c:	af00      	add	r7, sp, #0
    f52e:	4603      	mov	r3, r0
    f530:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    f532:	79fb      	ldrb	r3, [r7, #7]
    f534:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f538:	b2db      	uxtb	r3, r3
    f53a:	4619      	mov	r1, r3
    f53c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f540:	4b02      	ldr	r3, [pc, #8]	; (f54c <_usb_d_dev_set_address+0x24>)
    f542:	4798      	blx	r3
}
    f544:	bf00      	nop
    f546:	3708      	adds	r7, #8
    f548:	46bd      	mov	sp, r7
    f54a:	bd80      	pop	{r7, pc}
    f54c:	0000de47 	.word	0x0000de47

0000f550 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    f550:	b590      	push	{r4, r7, lr}
    f552:	b085      	sub	sp, #20
    f554:	af00      	add	r7, sp, #0
    f556:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    f558:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f55c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f55e:	687b      	ldr	r3, [r7, #4]
    f560:	7c9b      	ldrb	r3, [r3, #18]
    f562:	f003 030f 	and.w	r3, r3, #15
    f566:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f568:	687b      	ldr	r3, [r7, #4]
    f56a:	68db      	ldr	r3, [r3, #12]
    f56c:	461a      	mov	r2, r3
    f56e:	7afb      	ldrb	r3, [r7, #11]
    f570:	2100      	movs	r1, #0
    f572:	4618      	mov	r0, r3
    f574:	4b0f      	ldr	r3, [pc, #60]	; (f5b4 <_usb_d_dev_trans_setup+0x64>)
    f576:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    f578:	687b      	ldr	r3, [r7, #4]
    f57a:	8a1b      	ldrh	r3, [r3, #16]
    f57c:	461a      	mov	r2, r3
    f57e:	7af8      	ldrb	r0, [r7, #11]
    f580:	2300      	movs	r3, #0
    f582:	2100      	movs	r1, #0
    f584:	4c0c      	ldr	r4, [pc, #48]	; (f5b8 <_usb_d_dev_trans_setup+0x68>)
    f586:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    f588:	7afb      	ldrb	r3, [r7, #11]
    f58a:	22b0      	movs	r2, #176	; 0xb0
    f58c:	4619      	mov	r1, r3
    f58e:	68f8      	ldr	r0, [r7, #12]
    f590:	4b0a      	ldr	r3, [pc, #40]	; (f5bc <_usb_d_dev_trans_setup+0x6c>)
    f592:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    f594:	7afb      	ldrb	r3, [r7, #11]
    f596:	2200      	movs	r2, #0
    f598:	2100      	movs	r1, #0
    f59a:	4618      	mov	r0, r3
    f59c:	4b08      	ldr	r3, [pc, #32]	; (f5c0 <_usb_d_dev_trans_setup+0x70>)
    f59e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    f5a0:	7afb      	ldrb	r3, [r7, #11]
    f5a2:	2210      	movs	r2, #16
    f5a4:	4619      	mov	r1, r3
    f5a6:	68f8      	ldr	r0, [r7, #12]
    f5a8:	4b06      	ldr	r3, [pc, #24]	; (f5c4 <_usb_d_dev_trans_setup+0x74>)
    f5aa:	4798      	blx	r3
}
    f5ac:	bf00      	nop
    f5ae:	3714      	adds	r7, #20
    f5b0:	46bd      	mov	sp, r7
    f5b2:	bd90      	pop	{r4, r7, pc}
    f5b4:	0000e2e5 	.word	0x0000e2e5
    f5b8:	0000e46d 	.word	0x0000e46d
    f5bc:	0000db45 	.word	0x0000db45
    f5c0:	0000e53d 	.word	0x0000e53d
    f5c4:	0000db99 	.word	0x0000db99

0000f5c8 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    f5c8:	b580      	push	{r7, lr}
    f5ca:	b088      	sub	sp, #32
    f5cc:	af00      	add	r7, sp, #0
    f5ce:	4603      	mov	r3, r0
    f5d0:	71fb      	strb	r3, [r7, #7]
    f5d2:	460b      	mov	r3, r1
    f5d4:	71bb      	strb	r3, [r7, #6]
    f5d6:	4613      	mov	r3, r2
    f5d8:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    f5da:	79fb      	ldrb	r3, [r7, #7]
    f5dc:	f003 030f 	and.w	r3, r3, #15
    f5e0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    f5e2:	79fb      	ldrb	r3, [r7, #7]
    f5e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f5e8:	2b00      	cmp	r3, #0
    f5ea:	bf14      	ite	ne
    f5ec:	2301      	movne	r3, #1
    f5ee:	2300      	moveq	r3, #0
    f5f0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f5f2:	7fba      	ldrb	r2, [r7, #30]
    f5f4:	7ffb      	ldrb	r3, [r7, #31]
    f5f6:	4611      	mov	r1, r2
    f5f8:	4618      	mov	r0, r3
    f5fa:	4b3e      	ldr	r3, [pc, #248]	; (f6f4 <_usb_d_dev_ep_init+0x12c>)
    f5fc:	4798      	blx	r3
    f5fe:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    f600:	79bb      	ldrb	r3, [r7, #6]
    f602:	f003 0303 	and.w	r3, r3, #3
    f606:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    f608:	7ffa      	ldrb	r2, [r7, #31]
    f60a:	4613      	mov	r3, r2
    f60c:	005b      	lsls	r3, r3, #1
    f60e:	4413      	add	r3, r2
    f610:	009b      	lsls	r3, r3, #2
    f612:	4a39      	ldr	r2, [pc, #228]	; (f6f8 <_usb_d_dev_ep_init+0x130>)
    f614:	4413      	add	r3, r2
    f616:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    f618:	7ffb      	ldrb	r3, [r7, #31]
    f61a:	2b04      	cmp	r3, #4
    f61c:	d902      	bls.n	f624 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    f61e:	f06f 0311 	mvn.w	r3, #17
    f622:	e063      	b.n	f6ec <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    f624:	69bb      	ldr	r3, [r7, #24]
    f626:	7c9b      	ldrb	r3, [r3, #18]
    f628:	2bff      	cmp	r3, #255	; 0xff
    f62a:	d002      	beq.n	f632 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    f62c:	f06f 0313 	mvn.w	r3, #19
    f630:	e05c      	b.n	f6ec <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    f632:	7dfb      	ldrb	r3, [r7, #23]
    f634:	2b00      	cmp	r3, #0
    f636:	d11f      	bne.n	f678 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    f638:	7fbb      	ldrb	r3, [r7, #30]
    f63a:	2b00      	cmp	r3, #0
    f63c:	bf14      	ite	ne
    f63e:	2301      	movne	r3, #1
    f640:	2300      	moveq	r3, #0
    f642:	b2db      	uxtb	r3, r3
    f644:	f083 0301 	eor.w	r3, r3, #1
    f648:	b2db      	uxtb	r3, r3
    f64a:	f003 0301 	and.w	r3, r3, #1
    f64e:	b2da      	uxtb	r2, r3
    f650:	7ffb      	ldrb	r3, [r7, #31]
    f652:	4611      	mov	r1, r2
    f654:	4618      	mov	r0, r3
    f656:	4b27      	ldr	r3, [pc, #156]	; (f6f4 <_usb_d_dev_ep_init+0x12c>)
    f658:	4798      	blx	r3
    f65a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    f65c:	68fb      	ldr	r3, [r7, #12]
    f65e:	7c9b      	ldrb	r3, [r3, #18]
    f660:	2bff      	cmp	r3, #255	; 0xff
    f662:	d002      	beq.n	f66a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    f664:	f06f 0313 	mvn.w	r3, #19
    f668:	e040      	b.n	f6ec <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    f66a:	693b      	ldr	r3, [r7, #16]
    f66c:	681b      	ldr	r3, [r3, #0]
    f66e:	2b00      	cmp	r3, #0
    f670:	d102      	bne.n	f678 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    f672:	f06f 0312 	mvn.w	r3, #18
    f676:	e039      	b.n	f6ec <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    f678:	7fbb      	ldrb	r3, [r7, #30]
    f67a:	2b00      	cmp	r3, #0
    f67c:	d007      	beq.n	f68e <_usb_d_dev_ep_init+0xc6>
    f67e:	693b      	ldr	r3, [r7, #16]
    f680:	685b      	ldr	r3, [r3, #4]
    f682:	2b00      	cmp	r3, #0
    f684:	bf14      	ite	ne
    f686:	2301      	movne	r3, #1
    f688:	2300      	moveq	r3, #0
    f68a:	b2db      	uxtb	r3, r3
    f68c:	e006      	b.n	f69c <_usb_d_dev_ep_init+0xd4>
    f68e:	693b      	ldr	r3, [r7, #16]
    f690:	681b      	ldr	r3, [r3, #0]
    f692:	2b00      	cmp	r3, #0
    f694:	bf14      	ite	ne
    f696:	2301      	movne	r3, #1
    f698:	2300      	moveq	r3, #0
    f69a:	b2db      	uxtb	r3, r3
    f69c:	2b00      	cmp	r3, #0
    f69e:	d00f      	beq.n	f6c0 <_usb_d_dev_ep_init+0xf8>
    f6a0:	7fbb      	ldrb	r3, [r7, #30]
    f6a2:	2b00      	cmp	r3, #0
    f6a4:	d003      	beq.n	f6ae <_usb_d_dev_ep_init+0xe6>
    f6a6:	693b      	ldr	r3, [r7, #16]
    f6a8:	895b      	ldrh	r3, [r3, #10]
    f6aa:	461a      	mov	r2, r3
    f6ac:	e002      	b.n	f6b4 <_usb_d_dev_ep_init+0xec>
    f6ae:	693b      	ldr	r3, [r7, #16]
    f6b0:	891b      	ldrh	r3, [r3, #8]
    f6b2:	461a      	mov	r2, r3
    f6b4:	88bb      	ldrh	r3, [r7, #4]
    f6b6:	429a      	cmp	r2, r3
    f6b8:	da02      	bge.n	f6c0 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    f6ba:	f06f 0312 	mvn.w	r3, #18
    f6be:	e015      	b.n	f6ec <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    f6c0:	7fbb      	ldrb	r3, [r7, #30]
    f6c2:	2b00      	cmp	r3, #0
    f6c4:	d002      	beq.n	f6cc <_usb_d_dev_ep_init+0x104>
    f6c6:	693b      	ldr	r3, [r7, #16]
    f6c8:	685b      	ldr	r3, [r3, #4]
    f6ca:	e001      	b.n	f6d0 <_usb_d_dev_ep_init+0x108>
    f6cc:	693b      	ldr	r3, [r7, #16]
    f6ce:	681b      	ldr	r3, [r3, #0]
    f6d0:	69ba      	ldr	r2, [r7, #24]
    f6d2:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    f6d4:	69bb      	ldr	r3, [r7, #24]
    f6d6:	88ba      	ldrh	r2, [r7, #4]
    f6d8:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    f6da:	7dfb      	ldrb	r3, [r7, #23]
    f6dc:	3301      	adds	r3, #1
    f6de:	b2da      	uxtb	r2, r3
    f6e0:	69bb      	ldr	r3, [r7, #24]
    f6e2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    f6e4:	69bb      	ldr	r3, [r7, #24]
    f6e6:	79fa      	ldrb	r2, [r7, #7]
    f6e8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    f6ea:	2300      	movs	r3, #0
}
    f6ec:	4618      	mov	r0, r3
    f6ee:	3720      	adds	r7, #32
    f6f0:	46bd      	mov	sp, r7
    f6f2:	bd80      	pop	{r7, pc}
    f6f4:	0000e5f9 	.word	0x0000e5f9
    f6f8:	00021c5c 	.word	0x00021c5c

0000f6fc <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    f6fc:	b580      	push	{r7, lr}
    f6fe:	b086      	sub	sp, #24
    f700:	af00      	add	r7, sp, #0
    f702:	4603      	mov	r3, r0
    f704:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    f706:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f70a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    f70c:	79fb      	ldrb	r3, [r7, #7]
    f70e:	f003 030f 	and.w	r3, r3, #15
    f712:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    f714:	79fb      	ldrb	r3, [r7, #7]
    f716:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f71a:	2b00      	cmp	r3, #0
    f71c:	bf14      	ite	ne
    f71e:	2301      	movne	r3, #1
    f720:	2300      	moveq	r3, #0
    f722:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f724:	7cba      	ldrb	r2, [r7, #18]
    f726:	7cfb      	ldrb	r3, [r7, #19]
    f728:	4611      	mov	r1, r2
    f72a:	4618      	mov	r0, r3
    f72c:	4b2a      	ldr	r3, [pc, #168]	; (f7d8 <_usb_d_dev_ep_deinit+0xdc>)
    f72e:	4798      	blx	r3
    f730:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    f732:	7cfb      	ldrb	r3, [r7, #19]
    f734:	2b04      	cmp	r3, #4
    f736:	d84a      	bhi.n	f7ce <_usb_d_dev_ep_deinit+0xd2>
    f738:	68fb      	ldr	r3, [r7, #12]
    f73a:	7c9b      	ldrb	r3, [r3, #18]
    f73c:	2bff      	cmp	r3, #255	; 0xff
    f73e:	d046      	beq.n	f7ce <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    f740:	7cbb      	ldrb	r3, [r7, #18]
    f742:	2203      	movs	r2, #3
    f744:	4619      	mov	r1, r3
    f746:	68f8      	ldr	r0, [r7, #12]
    f748:	4b24      	ldr	r3, [pc, #144]	; (f7dc <_usb_d_dev_ep_deinit+0xe0>)
    f74a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    f74c:	68fb      	ldr	r3, [r7, #12]
    f74e:	7cdb      	ldrb	r3, [r3, #19]
    f750:	f003 0307 	and.w	r3, r3, #7
    f754:	b2db      	uxtb	r3, r3
    f756:	2b01      	cmp	r3, #1
    f758:	d107      	bne.n	f76a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    f75a:	79fb      	ldrb	r3, [r7, #7]
    f75c:	697a      	ldr	r2, [r7, #20]
    f75e:	3308      	adds	r3, #8
    f760:	015b      	lsls	r3, r3, #5
    f762:	4413      	add	r3, r2
    f764:	2200      	movs	r2, #0
    f766:	701a      	strb	r2, [r3, #0]
    f768:	e02a      	b.n	f7c0 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    f76a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    f76e:	2b00      	cmp	r3, #0
    f770:	da15      	bge.n	f79e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    f772:	79fb      	ldrb	r3, [r7, #7]
    f774:	f003 030f 	and.w	r3, r3, #15
    f778:	79fa      	ldrb	r2, [r7, #7]
    f77a:	f002 020f 	and.w	r2, r2, #15
    f77e:	6979      	ldr	r1, [r7, #20]
    f780:	3208      	adds	r2, #8
    f782:	0152      	lsls	r2, r2, #5
    f784:	440a      	add	r2, r1
    f786:	7812      	ldrb	r2, [r2, #0]
    f788:	b2d2      	uxtb	r2, r2
    f78a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    f78e:	b2d1      	uxtb	r1, r2
    f790:	697a      	ldr	r2, [r7, #20]
    f792:	3308      	adds	r3, #8
    f794:	015b      	lsls	r3, r3, #5
    f796:	4413      	add	r3, r2
    f798:	460a      	mov	r2, r1
    f79a:	701a      	strb	r2, [r3, #0]
    f79c:	e010      	b.n	f7c0 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    f79e:	79fb      	ldrb	r3, [r7, #7]
    f7a0:	79fa      	ldrb	r2, [r7, #7]
    f7a2:	6979      	ldr	r1, [r7, #20]
    f7a4:	3208      	adds	r2, #8
    f7a6:	0152      	lsls	r2, r2, #5
    f7a8:	440a      	add	r2, r1
    f7aa:	7812      	ldrb	r2, [r2, #0]
    f7ac:	b2d2      	uxtb	r2, r2
    f7ae:	f022 0207 	bic.w	r2, r2, #7
    f7b2:	b2d1      	uxtb	r1, r2
    f7b4:	697a      	ldr	r2, [r7, #20]
    f7b6:	3308      	adds	r3, #8
    f7b8:	015b      	lsls	r3, r3, #5
    f7ba:	4413      	add	r3, r2
    f7bc:	460a      	mov	r2, r1
    f7be:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    f7c0:	68fb      	ldr	r3, [r7, #12]
    f7c2:	2200      	movs	r2, #0
    f7c4:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    f7c6:	68fb      	ldr	r3, [r7, #12]
    f7c8:	22ff      	movs	r2, #255	; 0xff
    f7ca:	749a      	strb	r2, [r3, #18]
    f7cc:	e000      	b.n	f7d0 <_usb_d_dev_ep_deinit+0xd4>
		return;
    f7ce:	bf00      	nop
}
    f7d0:	3718      	adds	r7, #24
    f7d2:	46bd      	mov	sp, r7
    f7d4:	bd80      	pop	{r7, pc}
    f7d6:	bf00      	nop
    f7d8:	0000e5f9 	.word	0x0000e5f9
    f7dc:	0000fc31 	.word	0x0000fc31

0000f7e0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    f7e0:	b5b0      	push	{r4, r5, r7, lr}
    f7e2:	b088      	sub	sp, #32
    f7e4:	af00      	add	r7, sp, #0
    f7e6:	4603      	mov	r3, r0
    f7e8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    f7ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f7ee:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    f7f0:	79fb      	ldrb	r3, [r7, #7]
    f7f2:	f003 030f 	and.w	r3, r3, #15
    f7f6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    f7f8:	79fb      	ldrb	r3, [r7, #7]
    f7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f7fe:	2b00      	cmp	r3, #0
    f800:	bf14      	ite	ne
    f802:	2301      	movne	r3, #1
    f804:	2300      	moveq	r3, #0
    f806:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    f808:	7eba      	ldrb	r2, [r7, #26]
    f80a:	7efb      	ldrb	r3, [r7, #27]
    f80c:	4611      	mov	r1, r2
    f80e:	4618      	mov	r0, r3
    f810:	4b70      	ldr	r3, [pc, #448]	; (f9d4 <_usb_d_dev_ep_enable+0x1f4>)
    f812:	4798      	blx	r3
    f814:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    f816:	7efb      	ldrb	r3, [r7, #27]
    f818:	4619      	mov	r1, r3
    f81a:	69f8      	ldr	r0, [r7, #28]
    f81c:	4b6e      	ldr	r3, [pc, #440]	; (f9d8 <_usb_d_dev_ep_enable+0x1f8>)
    f81e:	4798      	blx	r3
    f820:	4603      	mov	r3, r0
    f822:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    f824:	7efb      	ldrb	r3, [r7, #27]
    f826:	2b04      	cmp	r3, #4
    f828:	d803      	bhi.n	f832 <_usb_d_dev_ep_enable+0x52>
    f82a:	697b      	ldr	r3, [r7, #20]
    f82c:	7c9b      	ldrb	r3, [r3, #18]
    f82e:	2bff      	cmp	r3, #255	; 0xff
    f830:	d102      	bne.n	f838 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    f832:	f06f 0311 	mvn.w	r3, #17
    f836:	e0c8      	b.n	f9ca <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    f838:	7efb      	ldrb	r3, [r7, #27]
    f83a:	015b      	lsls	r3, r3, #5
    f83c:	4a67      	ldr	r2, [pc, #412]	; (f9dc <_usb_d_dev_ep_enable+0x1fc>)
    f83e:	4413      	add	r3, r2
    f840:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    f842:	697b      	ldr	r3, [r7, #20]
    f844:	7cdb      	ldrb	r3, [r3, #19]
    f846:	f003 0307 	and.w	r3, r3, #7
    f84a:	b2db      	uxtb	r3, r3
    f84c:	2b01      	cmp	r3, #1
    f84e:	d14b      	bne.n	f8e8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    f850:	7cfb      	ldrb	r3, [r7, #19]
    f852:	f003 0377 	and.w	r3, r3, #119	; 0x77
    f856:	2b00      	cmp	r3, #0
    f858:	d002      	beq.n	f860 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    f85a:	f06f 0313 	mvn.w	r3, #19
    f85e:	e0b4      	b.n	f9ca <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    f860:	7efb      	ldrb	r3, [r7, #27]
    f862:	2211      	movs	r2, #17
    f864:	4619      	mov	r1, r3
    f866:	69f8      	ldr	r0, [r7, #28]
    f868:	4b5d      	ldr	r3, [pc, #372]	; (f9e0 <_usb_d_dev_ep_enable+0x200>)
    f86a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f86c:	697b      	ldr	r3, [r7, #20]
    f86e:	8a1b      	ldrh	r3, [r3, #16]
    f870:	039b      	lsls	r3, r3, #14
    f872:	4c5c      	ldr	r4, [pc, #368]	; (f9e4 <_usb_d_dev_ep_enable+0x204>)
    f874:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f876:	697b      	ldr	r3, [r7, #20]
    f878:	8a1b      	ldrh	r3, [r3, #16]
    f87a:	4618      	mov	r0, r3
    f87c:	4b5a      	ldr	r3, [pc, #360]	; (f9e8 <_usb_d_dev_ep_enable+0x208>)
    f87e:	4798      	blx	r3
    f880:	4603      	mov	r3, r0
    f882:	071b      	lsls	r3, r3, #28
    f884:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f888:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f88c:	68fb      	ldr	r3, [r7, #12]
    f88e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    f890:	68fb      	ldr	r3, [r7, #12]
    f892:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f896:	697b      	ldr	r3, [r7, #20]
    f898:	8a1b      	ldrh	r3, [r3, #16]
    f89a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    f89e:	697b      	ldr	r3, [r7, #20]
    f8a0:	8a1b      	ldrh	r3, [r3, #16]
    f8a2:	4618      	mov	r0, r3
    f8a4:	4b50      	ldr	r3, [pc, #320]	; (f9e8 <_usb_d_dev_ep_enable+0x208>)
    f8a6:	4798      	blx	r3
    f8a8:	4603      	mov	r3, r0
    f8aa:	071b      	lsls	r3, r3, #28
    f8ac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f8b0:	432b      	orrs	r3, r5
    f8b2:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    f8b4:	7efb      	ldrb	r3, [r7, #27]
    f8b6:	2200      	movs	r2, #0
    f8b8:	2100      	movs	r1, #0
    f8ba:	4618      	mov	r0, r3
    f8bc:	4b4b      	ldr	r3, [pc, #300]	; (f9ec <_usb_d_dev_ep_enable+0x20c>)
    f8be:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    f8c0:	7efb      	ldrb	r3, [r7, #27]
    f8c2:	2200      	movs	r2, #0
    f8c4:	2101      	movs	r1, #1
    f8c6:	4618      	mov	r0, r3
    f8c8:	4b49      	ldr	r3, [pc, #292]	; (f9f0 <_usb_d_dev_ep_enable+0x210>)
    f8ca:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    f8cc:	7efb      	ldrb	r3, [r7, #27]
    f8ce:	2100      	movs	r1, #0
    f8d0:	4618      	mov	r0, r3
    f8d2:	4b48      	ldr	r3, [pc, #288]	; (f9f4 <_usb_d_dev_ep_enable+0x214>)
    f8d4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    f8d6:	7efb      	ldrb	r3, [r7, #27]
    f8d8:	2101      	movs	r1, #1
    f8da:	4618      	mov	r0, r3
    f8dc:	4b45      	ldr	r3, [pc, #276]	; (f9f4 <_usb_d_dev_ep_enable+0x214>)
    f8de:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    f8e0:	6978      	ldr	r0, [r7, #20]
    f8e2:	4b45      	ldr	r3, [pc, #276]	; (f9f8 <_usb_d_dev_ep_enable+0x218>)
    f8e4:	4798      	blx	r3
    f8e6:	e06f      	b.n	f9c8 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    f8e8:	7ebb      	ldrb	r3, [r7, #26]
    f8ea:	2b00      	cmp	r3, #0
    f8ec:	d038      	beq.n	f960 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    f8ee:	7cfb      	ldrb	r3, [r7, #19]
    f8f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    f8f4:	2b00      	cmp	r3, #0
    f8f6:	d002      	beq.n	f8fe <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    f8f8:	f06f 0313 	mvn.w	r3, #19
    f8fc:	e065      	b.n	f9ca <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    f8fe:	697b      	ldr	r3, [r7, #20]
    f900:	7cdb      	ldrb	r3, [r3, #19]
    f902:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f906:	b2db      	uxtb	r3, r3
    f908:	011b      	lsls	r3, r3, #4
    f90a:	b2db      	uxtb	r3, r3
    f90c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    f910:	b2da      	uxtb	r2, r3
    f912:	7cfb      	ldrb	r3, [r7, #19]
    f914:	4313      	orrs	r3, r2
    f916:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    f918:	7cfa      	ldrb	r2, [r7, #19]
    f91a:	7efb      	ldrb	r3, [r7, #27]
    f91c:	4619      	mov	r1, r3
    f91e:	69f8      	ldr	r0, [r7, #28]
    f920:	4b2f      	ldr	r3, [pc, #188]	; (f9e0 <_usb_d_dev_ep_enable+0x200>)
    f922:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    f924:	68fb      	ldr	r3, [r7, #12]
    f926:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f92a:	697b      	ldr	r3, [r7, #20]
    f92c:	8a1b      	ldrh	r3, [r3, #16]
    f92e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    f932:	697b      	ldr	r3, [r7, #20]
    f934:	8a1b      	ldrh	r3, [r3, #16]
    f936:	4618      	mov	r0, r3
    f938:	4b2b      	ldr	r3, [pc, #172]	; (f9e8 <_usb_d_dev_ep_enable+0x208>)
    f93a:	4798      	blx	r3
    f93c:	4603      	mov	r3, r0
    f93e:	071b      	lsls	r3, r3, #28
    f940:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f944:	432b      	orrs	r3, r5
    f946:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    f948:	7efb      	ldrb	r3, [r7, #27]
    f94a:	2200      	movs	r2, #0
    f94c:	2101      	movs	r1, #1
    f94e:	4618      	mov	r0, r3
    f950:	4b27      	ldr	r3, [pc, #156]	; (f9f0 <_usb_d_dev_ep_enable+0x210>)
    f952:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    f954:	7efb      	ldrb	r3, [r7, #27]
    f956:	2101      	movs	r1, #1
    f958:	4618      	mov	r0, r3
    f95a:	4b26      	ldr	r3, [pc, #152]	; (f9f4 <_usb_d_dev_ep_enable+0x214>)
    f95c:	4798      	blx	r3
    f95e:	e033      	b.n	f9c8 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    f960:	7cfb      	ldrb	r3, [r7, #19]
    f962:	f003 0307 	and.w	r3, r3, #7
    f966:	2b00      	cmp	r3, #0
    f968:	d002      	beq.n	f970 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    f96a:	f06f 0313 	mvn.w	r3, #19
    f96e:	e02c      	b.n	f9ca <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    f970:	697b      	ldr	r3, [r7, #20]
    f972:	7cdb      	ldrb	r3, [r3, #19]
    f974:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f978:	b2db      	uxtb	r3, r3
    f97a:	461a      	mov	r2, r3
    f97c:	7cfb      	ldrb	r3, [r7, #19]
    f97e:	4313      	orrs	r3, r2
    f980:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    f982:	7cfa      	ldrb	r2, [r7, #19]
    f984:	7efb      	ldrb	r3, [r7, #27]
    f986:	4619      	mov	r1, r3
    f988:	69f8      	ldr	r0, [r7, #28]
    f98a:	4b15      	ldr	r3, [pc, #84]	; (f9e0 <_usb_d_dev_ep_enable+0x200>)
    f98c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f98e:	697b      	ldr	r3, [r7, #20]
    f990:	8a1b      	ldrh	r3, [r3, #16]
    f992:	039b      	lsls	r3, r3, #14
    f994:	4c13      	ldr	r4, [pc, #76]	; (f9e4 <_usb_d_dev_ep_enable+0x204>)
    f996:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f998:	697b      	ldr	r3, [r7, #20]
    f99a:	8a1b      	ldrh	r3, [r3, #16]
    f99c:	4618      	mov	r0, r3
    f99e:	4b12      	ldr	r3, [pc, #72]	; (f9e8 <_usb_d_dev_ep_enable+0x208>)
    f9a0:	4798      	blx	r3
    f9a2:	4603      	mov	r3, r0
    f9a4:	071b      	lsls	r3, r3, #28
    f9a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f9aa:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f9ae:	68fb      	ldr	r3, [r7, #12]
    f9b0:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    f9b2:	7efb      	ldrb	r3, [r7, #27]
    f9b4:	2200      	movs	r2, #0
    f9b6:	2100      	movs	r1, #0
    f9b8:	4618      	mov	r0, r3
    f9ba:	4b0c      	ldr	r3, [pc, #48]	; (f9ec <_usb_d_dev_ep_enable+0x20c>)
    f9bc:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    f9be:	7efb      	ldrb	r3, [r7, #27]
    f9c0:	2100      	movs	r1, #0
    f9c2:	4618      	mov	r0, r3
    f9c4:	4b0b      	ldr	r3, [pc, #44]	; (f9f4 <_usb_d_dev_ep_enable+0x214>)
    f9c6:	4798      	blx	r3
	}

	return USB_OK;
    f9c8:	2300      	movs	r3, #0
}
    f9ca:	4618      	mov	r0, r3
    f9cc:	3720      	adds	r7, #32
    f9ce:	46bd      	mov	sp, r7
    f9d0:	bdb0      	pop	{r4, r5, r7, pc}
    f9d2:	bf00      	nop
    f9d4:	0000e5f9 	.word	0x0000e5f9
    f9d8:	0000dc7f 	.word	0x0000dc7f
    f9dc:	20008a4c 	.word	0x20008a4c
    f9e0:	0000dc55 	.word	0x0000dc55
    f9e4:	0fffc000 	.word	0x0fffc000
    f9e8:	0000e595 	.word	0x0000e595
    f9ec:	0000e53d 	.word	0x0000e53d
    f9f0:	0000e4e5 	.word	0x0000e4e5
    f9f4:	0000e4ad 	.word	0x0000e4ad
    f9f8:	0000f551 	.word	0x0000f551

0000f9fc <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    f9fc:	b580      	push	{r7, lr}
    f9fe:	b084      	sub	sp, #16
    fa00:	af00      	add	r7, sp, #0
    fa02:	6078      	str	r0, [r7, #4]
    fa04:	460b      	mov	r3, r1
    fa06:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    fa08:	687b      	ldr	r3, [r7, #4]
    fa0a:	7c9b      	ldrb	r3, [r3, #18]
    fa0c:	f003 030f 	and.w	r3, r3, #15
    fa10:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    fa12:	78fa      	ldrb	r2, [r7, #3]
    fa14:	7bfb      	ldrb	r3, [r7, #15]
    fa16:	4611      	mov	r1, r2
    fa18:	4618      	mov	r0, r3
    fa1a:	4b03      	ldr	r3, [pc, #12]	; (fa28 <_usb_d_dev_ep_stall_get+0x2c>)
    fa1c:	4798      	blx	r3
    fa1e:	4603      	mov	r3, r0
}
    fa20:	4618      	mov	r0, r3
    fa22:	3710      	adds	r7, #16
    fa24:	46bd      	mov	sp, r7
    fa26:	bd80      	pop	{r7, pc}
    fa28:	0000e0ed 	.word	0x0000e0ed

0000fa2c <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    fa2c:	b580      	push	{r7, lr}
    fa2e:	b084      	sub	sp, #16
    fa30:	af00      	add	r7, sp, #0
    fa32:	6078      	str	r0, [r7, #4]
    fa34:	460b      	mov	r3, r1
    fa36:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    fa38:	687b      	ldr	r3, [r7, #4]
    fa3a:	7c9b      	ldrb	r3, [r3, #18]
    fa3c:	f003 030f 	and.w	r3, r3, #15
    fa40:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    fa42:	78f9      	ldrb	r1, [r7, #3]
    fa44:	7bfb      	ldrb	r3, [r7, #15]
    fa46:	2201      	movs	r2, #1
    fa48:	4618      	mov	r0, r3
    fa4a:	4b0a      	ldr	r3, [pc, #40]	; (fa74 <_usb_d_dev_ep_stall_set+0x48>)
    fa4c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    fa4e:	78fb      	ldrb	r3, [r7, #3]
    fa50:	2220      	movs	r2, #32
    fa52:	409a      	lsls	r2, r3
    fa54:	7bfb      	ldrb	r3, [r7, #15]
    fa56:	4611      	mov	r1, r2
    fa58:	4618      	mov	r0, r3
    fa5a:	4b07      	ldr	r3, [pc, #28]	; (fa78 <_usb_d_dev_ep_stall_set+0x4c>)
    fa5c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    fa5e:	687a      	ldr	r2, [r7, #4]
    fa60:	7cd3      	ldrb	r3, [r2, #19]
    fa62:	f043 0308 	orr.w	r3, r3, #8
    fa66:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    fa68:	2300      	movs	r3, #0
}
    fa6a:	4618      	mov	r0, r3
    fa6c:	3710      	adds	r7, #16
    fa6e:	46bd      	mov	sp, r7
    fa70:	bd80      	pop	{r7, pc}
    fa72:	bf00      	nop
    fa74:	0000e095 	.word	0x0000e095
    fa78:	0000e015 	.word	0x0000e015

0000fa7c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    fa7c:	b580      	push	{r7, lr}
    fa7e:	b084      	sub	sp, #16
    fa80:	af00      	add	r7, sp, #0
    fa82:	6078      	str	r0, [r7, #4]
    fa84:	460b      	mov	r3, r1
    fa86:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    fa88:	687b      	ldr	r3, [r7, #4]
    fa8a:	7c9b      	ldrb	r3, [r3, #18]
    fa8c:	f003 030f 	and.w	r3, r3, #15
    fa90:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    fa92:	78fa      	ldrb	r2, [r7, #3]
    fa94:	7bfb      	ldrb	r3, [r7, #15]
    fa96:	4611      	mov	r1, r2
    fa98:	4618      	mov	r0, r3
    fa9a:	4b28      	ldr	r3, [pc, #160]	; (fb3c <_usb_d_dev_ep_stall_clr+0xc0>)
    fa9c:	4798      	blx	r3
    fa9e:	4603      	mov	r3, r0
    faa0:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    faa2:	7bbb      	ldrb	r3, [r7, #14]
    faa4:	f083 0301 	eor.w	r3, r3, #1
    faa8:	b2db      	uxtb	r3, r3
    faaa:	2b00      	cmp	r3, #0
    faac:	d001      	beq.n	fab2 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    faae:	2300      	movs	r3, #0
    fab0:	e040      	b.n	fb34 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    fab2:	78f9      	ldrb	r1, [r7, #3]
    fab4:	7bfb      	ldrb	r3, [r7, #15]
    fab6:	2200      	movs	r2, #0
    fab8:	4618      	mov	r0, r3
    faba:	4b21      	ldr	r3, [pc, #132]	; (fb40 <_usb_d_dev_ep_stall_clr+0xc4>)
    fabc:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    fabe:	78fb      	ldrb	r3, [r7, #3]
    fac0:	2220      	movs	r2, #32
    fac2:	409a      	lsls	r2, r3
    fac4:	7bfb      	ldrb	r3, [r7, #15]
    fac6:	4611      	mov	r1, r2
    fac8:	4618      	mov	r0, r3
    faca:	4b1e      	ldr	r3, [pc, #120]	; (fb44 <_usb_d_dev_ep_stall_clr+0xc8>)
    facc:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    face:	78fa      	ldrb	r2, [r7, #3]
    fad0:	7bfb      	ldrb	r3, [r7, #15]
    fad2:	4611      	mov	r1, r2
    fad4:	4618      	mov	r0, r3
    fad6:	4b1c      	ldr	r3, [pc, #112]	; (fb48 <_usb_d_dev_ep_stall_clr+0xcc>)
    fad8:	4798      	blx	r3
    fada:	4603      	mov	r3, r0
    fadc:	2b00      	cmp	r3, #0
    fade:	d00b      	beq.n	faf8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    fae0:	78fa      	ldrb	r2, [r7, #3]
    fae2:	7bfb      	ldrb	r3, [r7, #15]
    fae4:	4611      	mov	r1, r2
    fae6:	4618      	mov	r0, r3
    fae8:	4b18      	ldr	r3, [pc, #96]	; (fb4c <_usb_d_dev_ep_stall_clr+0xd0>)
    faea:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    faec:	78f9      	ldrb	r1, [r7, #3]
    faee:	7bfb      	ldrb	r3, [r7, #15]
    faf0:	2200      	movs	r2, #0
    faf2:	4618      	mov	r0, r3
    faf4:	4b16      	ldr	r3, [pc, #88]	; (fb50 <_usb_d_dev_ep_stall_clr+0xd4>)
    faf6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    faf8:	687b      	ldr	r3, [r7, #4]
    fafa:	7cdb      	ldrb	r3, [r3, #19]
    fafc:	f003 0307 	and.w	r3, r3, #7
    fb00:	b2db      	uxtb	r3, r3
    fb02:	2b01      	cmp	r3, #1
    fb04:	d110      	bne.n	fb28 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    fb06:	7bfb      	ldrb	r3, [r7, #15]
    fb08:	4619      	mov	r1, r3
    fb0a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fb0e:	4b11      	ldr	r3, [pc, #68]	; (fb54 <_usb_d_dev_ep_stall_clr+0xd8>)
    fb10:	4798      	blx	r3
    fb12:	4603      	mov	r3, r0
    fb14:	f003 0330 	and.w	r3, r3, #48	; 0x30
    fb18:	2b00      	cmp	r3, #0
    fb1a:	d10a      	bne.n	fb32 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    fb1c:	687a      	ldr	r2, [r7, #4]
    fb1e:	7cd3      	ldrb	r3, [r2, #19]
    fb20:	f36f 03c3 	bfc	r3, #3, #1
    fb24:	74d3      	strb	r3, [r2, #19]
    fb26:	e004      	b.n	fb32 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    fb28:	687a      	ldr	r2, [r7, #4]
    fb2a:	7cd3      	ldrb	r3, [r2, #19]
    fb2c:	f36f 03c3 	bfc	r3, #3, #1
    fb30:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    fb32:	2300      	movs	r3, #0
}
    fb34:	4618      	mov	r0, r3
    fb36:	3710      	adds	r7, #16
    fb38:	46bd      	mov	sp, r7
    fb3a:	bd80      	pop	{r7, pc}
    fb3c:	0000e0ed 	.word	0x0000e0ed
    fb40:	0000e095 	.word	0x0000e095
    fb44:	0000e03d 	.word	0x0000e03d
    fb48:	0000e131 	.word	0x0000e131
    fb4c:	0000e175 	.word	0x0000e175
    fb50:	0000e261 	.word	0x0000e261
    fb54:	0000db1d 	.word	0x0000db1d

0000fb58 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    fb58:	b580      	push	{r7, lr}
    fb5a:	b086      	sub	sp, #24
    fb5c:	af00      	add	r7, sp, #0
    fb5e:	4603      	mov	r3, r0
    fb60:	460a      	mov	r2, r1
    fb62:	71fb      	strb	r3, [r7, #7]
    fb64:	4613      	mov	r3, r2
    fb66:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    fb68:	79fb      	ldrb	r3, [r7, #7]
    fb6a:	f003 030f 	and.w	r3, r3, #15
    fb6e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    fb70:	79fb      	ldrb	r3, [r7, #7]
    fb72:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fb76:	2b00      	cmp	r3, #0
    fb78:	bf14      	ite	ne
    fb7a:	2301      	movne	r3, #1
    fb7c:	2300      	moveq	r3, #0
    fb7e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    fb80:	7cba      	ldrb	r2, [r7, #18]
    fb82:	7cfb      	ldrb	r3, [r7, #19]
    fb84:	4611      	mov	r1, r2
    fb86:	4618      	mov	r0, r3
    fb88:	4b13      	ldr	r3, [pc, #76]	; (fbd8 <_usb_d_dev_ep_stall+0x80>)
    fb8a:	4798      	blx	r3
    fb8c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    fb8e:	7cfb      	ldrb	r3, [r7, #19]
    fb90:	2b04      	cmp	r3, #4
    fb92:	d902      	bls.n	fb9a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    fb94:	f06f 0311 	mvn.w	r3, #17
    fb98:	e01a      	b.n	fbd0 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    fb9a:	79bb      	ldrb	r3, [r7, #6]
    fb9c:	2b01      	cmp	r3, #1
    fb9e:	d106      	bne.n	fbae <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    fba0:	7cbb      	ldrb	r3, [r7, #18]
    fba2:	4619      	mov	r1, r3
    fba4:	68f8      	ldr	r0, [r7, #12]
    fba6:	4b0d      	ldr	r3, [pc, #52]	; (fbdc <_usb_d_dev_ep_stall+0x84>)
    fba8:	4798      	blx	r3
    fbaa:	6178      	str	r0, [r7, #20]
    fbac:	e00f      	b.n	fbce <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    fbae:	79bb      	ldrb	r3, [r7, #6]
    fbb0:	2b00      	cmp	r3, #0
    fbb2:	d106      	bne.n	fbc2 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    fbb4:	7cbb      	ldrb	r3, [r7, #18]
    fbb6:	4619      	mov	r1, r3
    fbb8:	68f8      	ldr	r0, [r7, #12]
    fbba:	4b09      	ldr	r3, [pc, #36]	; (fbe0 <_usb_d_dev_ep_stall+0x88>)
    fbbc:	4798      	blx	r3
    fbbe:	6178      	str	r0, [r7, #20]
    fbc0:	e005      	b.n	fbce <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    fbc2:	7cbb      	ldrb	r3, [r7, #18]
    fbc4:	4619      	mov	r1, r3
    fbc6:	68f8      	ldr	r0, [r7, #12]
    fbc8:	4b06      	ldr	r3, [pc, #24]	; (fbe4 <_usb_d_dev_ep_stall+0x8c>)
    fbca:	4798      	blx	r3
    fbcc:	6178      	str	r0, [r7, #20]
	}
	return rc;
    fbce:	697b      	ldr	r3, [r7, #20]
}
    fbd0:	4618      	mov	r0, r3
    fbd2:	3718      	adds	r7, #24
    fbd4:	46bd      	mov	sp, r7
    fbd6:	bd80      	pop	{r7, pc}
    fbd8:	0000e5f9 	.word	0x0000e5f9
    fbdc:	0000fa2d 	.word	0x0000fa2d
    fbe0:	0000fa7d 	.word	0x0000fa7d
    fbe4:	0000f9fd 	.word	0x0000f9fd

0000fbe8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    fbe8:	b580      	push	{r7, lr}
    fbea:	b082      	sub	sp, #8
    fbec:	af00      	add	r7, sp, #0
    fbee:	6078      	str	r0, [r7, #4]
    fbf0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    fbf2:	687b      	ldr	r3, [r7, #4]
    fbf4:	7c9b      	ldrb	r3, [r3, #18]
    fbf6:	2bff      	cmp	r3, #255	; 0xff
    fbf8:	d014      	beq.n	fc24 <_usb_d_dev_trans_done+0x3c>
    fbfa:	687b      	ldr	r3, [r7, #4]
    fbfc:	7cdb      	ldrb	r3, [r3, #19]
    fbfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fc02:	b2db      	uxtb	r3, r3
    fc04:	2b00      	cmp	r3, #0
    fc06:	d00d      	beq.n	fc24 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    fc08:	687a      	ldr	r2, [r7, #4]
    fc0a:	7cd3      	ldrb	r3, [r2, #19]
    fc0c:	f36f 1386 	bfc	r3, #6, #1
    fc10:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    fc12:	4b06      	ldr	r3, [pc, #24]	; (fc2c <_usb_d_dev_trans_done+0x44>)
    fc14:	691b      	ldr	r3, [r3, #16]
    fc16:	687a      	ldr	r2, [r7, #4]
    fc18:	7c90      	ldrb	r0, [r2, #18]
    fc1a:	687a      	ldr	r2, [r7, #4]
    fc1c:	6892      	ldr	r2, [r2, #8]
    fc1e:	6839      	ldr	r1, [r7, #0]
    fc20:	4798      	blx	r3
    fc22:	e000      	b.n	fc26 <_usb_d_dev_trans_done+0x3e>
		return;
    fc24:	bf00      	nop
}
    fc26:	3708      	adds	r7, #8
    fc28:	46bd      	mov	sp, r7
    fc2a:	bd80      	pop	{r7, pc}
    fc2c:	20008984 	.word	0x20008984

0000fc30 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    fc30:	b580      	push	{r7, lr}
    fc32:	b086      	sub	sp, #24
    fc34:	af00      	add	r7, sp, #0
    fc36:	60f8      	str	r0, [r7, #12]
    fc38:	460b      	mov	r3, r1
    fc3a:	607a      	str	r2, [r7, #4]
    fc3c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    fc3e:	68fb      	ldr	r3, [r7, #12]
    fc40:	7c9b      	ldrb	r3, [r3, #18]
    fc42:	f003 030f 	and.w	r3, r3, #15
    fc46:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    fc48:	4b1f      	ldr	r3, [pc, #124]	; (fcc8 <_usb_d_dev_trans_stop+0x98>)
    fc4a:	881b      	ldrh	r3, [r3, #0]
    fc4c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    fc4e:	68fb      	ldr	r3, [r7, #12]
    fc50:	7c9b      	ldrb	r3, [r3, #18]
    fc52:	2bff      	cmp	r3, #255	; 0xff
    fc54:	d033      	beq.n	fcbe <_usb_d_dev_trans_stop+0x8e>
    fc56:	68fb      	ldr	r3, [r7, #12]
    fc58:	7cdb      	ldrb	r3, [r3, #19]
    fc5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fc5e:	b2db      	uxtb	r3, r3
    fc60:	2b00      	cmp	r3, #0
    fc62:	d02c      	beq.n	fcbe <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    fc64:	7afb      	ldrb	r3, [r7, #11]
    fc66:	2b00      	cmp	r3, #0
    fc68:	d006      	beq.n	fc78 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    fc6a:	7dfb      	ldrb	r3, [r7, #23]
    fc6c:	2200      	movs	r2, #0
    fc6e:	2101      	movs	r1, #1
    fc70:	4618      	mov	r0, r3
    fc72:	4b16      	ldr	r3, [pc, #88]	; (fccc <_usb_d_dev_trans_stop+0x9c>)
    fc74:	4798      	blx	r3
    fc76:	e005      	b.n	fc84 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    fc78:	7dfb      	ldrb	r3, [r7, #23]
    fc7a:	2200      	movs	r2, #0
    fc7c:	2100      	movs	r1, #0
    fc7e:	4618      	mov	r0, r3
    fc80:	4b13      	ldr	r3, [pc, #76]	; (fcd0 <_usb_d_dev_trans_stop+0xa0>)
    fc82:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    fc84:	7afb      	ldrb	r3, [r7, #11]
    fc86:	f107 0218 	add.w	r2, r7, #24
    fc8a:	4413      	add	r3, r2
    fc8c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    fc90:	461a      	mov	r2, r3
    fc92:	7dfb      	ldrb	r3, [r7, #23]
    fc94:	4611      	mov	r1, r2
    fc96:	4618      	mov	r0, r3
    fc98:	4b0e      	ldr	r3, [pc, #56]	; (fcd4 <_usb_d_dev_trans_stop+0xa4>)
    fc9a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    fc9c:	7afb      	ldrb	r3, [r7, #11]
    fc9e:	f107 0218 	add.w	r2, r7, #24
    fca2:	4413      	add	r3, r2
    fca4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    fca8:	461a      	mov	r2, r3
    fcaa:	7dfb      	ldrb	r3, [r7, #23]
    fcac:	4611      	mov	r1, r2
    fcae:	4618      	mov	r0, r3
    fcb0:	4b09      	ldr	r3, [pc, #36]	; (fcd8 <_usb_d_dev_trans_stop+0xa8>)
    fcb2:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    fcb4:	6879      	ldr	r1, [r7, #4]
    fcb6:	68f8      	ldr	r0, [r7, #12]
    fcb8:	4b08      	ldr	r3, [pc, #32]	; (fcdc <_usb_d_dev_trans_stop+0xac>)
    fcba:	4798      	blx	r3
    fcbc:	e000      	b.n	fcc0 <_usb_d_dev_trans_stop+0x90>
		return;
    fcbe:	bf00      	nop
}
    fcc0:	3718      	adds	r7, #24
    fcc2:	46bd      	mov	sp, r7
    fcc4:	bd80      	pop	{r7, pc}
    fcc6:	bf00      	nop
    fcc8:	00021c9c 	.word	0x00021c9c
    fccc:	0000e4e5 	.word	0x0000e4e5
    fcd0:	0000e53d 	.word	0x0000e53d
    fcd4:	0000dfed 	.word	0x0000dfed
    fcd8:	0000e03d 	.word	0x0000e03d
    fcdc:	0000fbe9 	.word	0x0000fbe9

0000fce0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    fce0:	b580      	push	{r7, lr}
    fce2:	b086      	sub	sp, #24
    fce4:	af00      	add	r7, sp, #0
    fce6:	4603      	mov	r3, r0
    fce8:	6039      	str	r1, [r7, #0]
    fcea:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    fcec:	79fb      	ldrb	r3, [r7, #7]
    fcee:	f003 030f 	and.w	r3, r3, #15
    fcf2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    fcf4:	7dfb      	ldrb	r3, [r7, #23]
    fcf6:	015b      	lsls	r3, r3, #5
    fcf8:	4a1e      	ldr	r2, [pc, #120]	; (fd74 <_usb_d_dev_ep_read_req+0x94>)
    fcfa:	4413      	add	r3, r2
    fcfc:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    fcfe:	693b      	ldr	r3, [r7, #16]
    fd00:	681b      	ldr	r3, [r3, #0]
    fd02:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    fd04:	693b      	ldr	r3, [r7, #16]
    fd06:	685b      	ldr	r3, [r3, #4]
    fd08:	f3c3 030d 	ubfx	r3, r3, #0, #14
    fd0c:	b29b      	uxth	r3, r3
    fd0e:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    fd10:	7dfb      	ldrb	r3, [r7, #23]
    fd12:	2b04      	cmp	r3, #4
    fd14:	d802      	bhi.n	fd1c <_usb_d_dev_ep_read_req+0x3c>
    fd16:	683b      	ldr	r3, [r7, #0]
    fd18:	2b00      	cmp	r3, #0
    fd1a:	d102      	bne.n	fd22 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    fd1c:	f06f 0311 	mvn.w	r3, #17
    fd20:	e023      	b.n	fd6a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    fd22:	7dfb      	ldrb	r3, [r7, #23]
    fd24:	4618      	mov	r0, r3
    fd26:	4b14      	ldr	r3, [pc, #80]	; (fd78 <_usb_d_dev_ep_read_req+0x98>)
    fd28:	4798      	blx	r3
    fd2a:	4603      	mov	r3, r0
    fd2c:	f083 0301 	eor.w	r3, r3, #1
    fd30:	b2db      	uxtb	r3, r3
    fd32:	2b00      	cmp	r3, #0
    fd34:	d002      	beq.n	fd3c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    fd36:	f06f 0312 	mvn.w	r3, #18
    fd3a:	e016      	b.n	fd6a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    fd3c:	7dfb      	ldrb	r3, [r7, #23]
    fd3e:	4618      	mov	r0, r3
    fd40:	4b0e      	ldr	r3, [pc, #56]	; (fd7c <_usb_d_dev_ep_read_req+0x9c>)
    fd42:	4798      	blx	r3
    fd44:	4603      	mov	r3, r0
    fd46:	f083 0301 	eor.w	r3, r3, #1
    fd4a:	b2db      	uxtb	r3, r3
    fd4c:	2b00      	cmp	r3, #0
    fd4e:	d001      	beq.n	fd54 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    fd50:	2300      	movs	r3, #0
    fd52:	e00a      	b.n	fd6a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    fd54:	68fb      	ldr	r3, [r7, #12]
    fd56:	2208      	movs	r2, #8
    fd58:	4619      	mov	r1, r3
    fd5a:	6838      	ldr	r0, [r7, #0]
    fd5c:	4b08      	ldr	r3, [pc, #32]	; (fd80 <_usb_d_dev_ep_read_req+0xa0>)
    fd5e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    fd60:	7dfb      	ldrb	r3, [r7, #23]
    fd62:	4618      	mov	r0, r3
    fd64:	4b07      	ldr	r3, [pc, #28]	; (fd84 <_usb_d_dev_ep_read_req+0xa4>)
    fd66:	4798      	blx	r3

	return bytes;
    fd68:	897b      	ldrh	r3, [r7, #10]
}
    fd6a:	4618      	mov	r0, r3
    fd6c:	3718      	adds	r7, #24
    fd6e:	46bd      	mov	sp, r7
    fd70:	bd80      	pop	{r7, pc}
    fd72:	bf00      	nop
    fd74:	20008a4c 	.word	0x20008a4c
    fd78:	0000e065 	.word	0x0000e065
    fd7c:	0000e211 	.word	0x0000e211
    fd80:	0001d37d 	.word	0x0001d37d
    fd84:	0000e241 	.word	0x0000e241

0000fd88 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    fd88:	b580      	push	{r7, lr}
    fd8a:	b086      	sub	sp, #24
    fd8c:	af00      	add	r7, sp, #0
    fd8e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    fd90:	687b      	ldr	r3, [r7, #4]
    fd92:	7a1b      	ldrb	r3, [r3, #8]
    fd94:	f003 030f 	and.w	r3, r3, #15
    fd98:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    fd9a:	687b      	ldr	r3, [r7, #4]
    fd9c:	7a1b      	ldrb	r3, [r3, #8]
    fd9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fda2:	2b00      	cmp	r3, #0
    fda4:	bf14      	ite	ne
    fda6:	2301      	movne	r3, #1
    fda8:	2300      	moveq	r3, #0
    fdaa:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    fdac:	7d7a      	ldrb	r2, [r7, #21]
    fdae:	7dbb      	ldrb	r3, [r7, #22]
    fdb0:	4611      	mov	r1, r2
    fdb2:	4618      	mov	r0, r3
    fdb4:	4b5f      	ldr	r3, [pc, #380]	; (ff34 <_usb_d_dev_ep_trans+0x1ac>)
    fdb6:	4798      	blx	r3
    fdb8:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    fdba:	693b      	ldr	r3, [r7, #16]
    fdbc:	8a1b      	ldrh	r3, [r3, #16]
    fdbe:	f240 32ff 	movw	r2, #1023	; 0x3ff
    fdc2:	4293      	cmp	r3, r2
    fdc4:	d004      	beq.n	fdd0 <_usb_d_dev_ep_trans+0x48>
    fdc6:	693b      	ldr	r3, [r7, #16]
    fdc8:	8a1b      	ldrh	r3, [r3, #16]
    fdca:	3b01      	subs	r3, #1
    fdcc:	b29b      	uxth	r3, r3
    fdce:	e001      	b.n	fdd4 <_usb_d_dev_ep_trans+0x4c>
    fdd0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    fdd4:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    fdd6:	687b      	ldr	r3, [r7, #4]
    fdd8:	685a      	ldr	r2, [r3, #4]
    fdda:	89fb      	ldrh	r3, [r7, #14]
    fddc:	4013      	ands	r3, r2
    fdde:	2b00      	cmp	r3, #0
    fde0:	bf14      	ite	ne
    fde2:	2301      	movne	r3, #1
    fde4:	2300      	moveq	r3, #0
    fde6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    fde8:	2300      	movs	r3, #0
    fdea:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    fdec:	7dbb      	ldrb	r3, [r7, #22]
    fdee:	2b04      	cmp	r3, #4
    fdf0:	d902      	bls.n	fdf8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    fdf2:	f06f 0311 	mvn.w	r3, #17
    fdf6:	e098      	b.n	ff2a <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    fdf8:	687b      	ldr	r3, [r7, #4]
    fdfa:	681b      	ldr	r3, [r3, #0]
    fdfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    fe00:	d31a      	bcc.n	fe38 <_usb_d_dev_ep_trans+0xb0>
    fe02:	687b      	ldr	r3, [r7, #4]
    fe04:	681b      	ldr	r3, [r3, #0]
    fe06:	461a      	mov	r2, r3
    fe08:	687b      	ldr	r3, [r7, #4]
    fe0a:	685b      	ldr	r3, [r3, #4]
    fe0c:	4413      	add	r3, r2
    fe0e:	4a4a      	ldr	r2, [pc, #296]	; (ff38 <_usb_d_dev_ep_trans+0x1b0>)
    fe10:	4293      	cmp	r3, r2
    fe12:	d811      	bhi.n	fe38 <_usb_d_dev_ep_trans+0xb0>
    fe14:	687b      	ldr	r3, [r7, #4]
    fe16:	681b      	ldr	r3, [r3, #0]
    fe18:	f003 0303 	and.w	r3, r3, #3
    fe1c:	2b00      	cmp	r3, #0
    fe1e:	d10b      	bne.n	fe38 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    fe20:	7d7b      	ldrb	r3, [r7, #21]
    fe22:	f083 0301 	eor.w	r3, r3, #1
    fe26:	b2db      	uxtb	r3, r3
    fe28:	2b00      	cmp	r3, #0
    fe2a:	d00e      	beq.n	fe4a <_usb_d_dev_ep_trans+0xc2>
    fe2c:	687b      	ldr	r3, [r7, #4]
    fe2e:	685b      	ldr	r3, [r3, #4]
    fe30:	693a      	ldr	r2, [r7, #16]
    fe32:	8a12      	ldrh	r2, [r2, #16]
    fe34:	4293      	cmp	r3, r2
    fe36:	d208      	bcs.n	fe4a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    fe38:	693b      	ldr	r3, [r7, #16]
    fe3a:	68db      	ldr	r3, [r3, #12]
    fe3c:	2b00      	cmp	r3, #0
    fe3e:	d102      	bne.n	fe46 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    fe40:	f06f 0312 	mvn.w	r3, #18
    fe44:	e071      	b.n	ff2a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    fe46:	2301      	movs	r3, #1
    fe48:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    fe4a:	7d7b      	ldrb	r3, [r7, #21]
    fe4c:	f083 0301 	eor.w	r3, r3, #1
    fe50:	b2db      	uxtb	r3, r3
    fe52:	2b00      	cmp	r3, #0
    fe54:	d009      	beq.n	fe6a <_usb_d_dev_ep_trans+0xe2>
    fe56:	7b7b      	ldrb	r3, [r7, #13]
    fe58:	2b00      	cmp	r3, #0
    fe5a:	d006      	beq.n	fe6a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    fe5c:	693b      	ldr	r3, [r7, #16]
    fe5e:	68db      	ldr	r3, [r3, #12]
    fe60:	2b00      	cmp	r3, #0
    fe62:	d102      	bne.n	fe6a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    fe64:	f06f 0311 	mvn.w	r3, #17
    fe68:	e05f      	b.n	ff2a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    fe6a:	693b      	ldr	r3, [r7, #16]
    fe6c:	7cdb      	ldrb	r3, [r3, #19]
    fe6e:	f003 0308 	and.w	r3, r3, #8
    fe72:	b2db      	uxtb	r3, r3
    fe74:	2b00      	cmp	r3, #0
    fe76:	d001      	beq.n	fe7c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    fe78:	2302      	movs	r3, #2
    fe7a:	e056      	b.n	ff2a <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    fe7c:	f107 0308 	add.w	r3, r7, #8
    fe80:	4618      	mov	r0, r3
    fe82:	4b2e      	ldr	r3, [pc, #184]	; (ff3c <_usb_d_dev_ep_trans+0x1b4>)
    fe84:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    fe86:	693b      	ldr	r3, [r7, #16]
    fe88:	7cdb      	ldrb	r3, [r3, #19]
    fe8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fe8e:	b2db      	uxtb	r3, r3
    fe90:	2b00      	cmp	r3, #0
    fe92:	d006      	beq.n	fea2 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    fe94:	f107 0308 	add.w	r3, r7, #8
    fe98:	4618      	mov	r0, r3
    fe9a:	4b29      	ldr	r3, [pc, #164]	; (ff40 <_usb_d_dev_ep_trans+0x1b8>)
    fe9c:	4798      	blx	r3
		return USB_BUSY;
    fe9e:	2301      	movs	r3, #1
    fea0:	e043      	b.n	ff2a <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    fea2:	693a      	ldr	r2, [r7, #16]
    fea4:	7cd3      	ldrb	r3, [r2, #19]
    fea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    feaa:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    feac:	f107 0308 	add.w	r3, r7, #8
    feb0:	4618      	mov	r0, r3
    feb2:	4b23      	ldr	r3, [pc, #140]	; (ff40 <_usb_d_dev_ep_trans+0x1b8>)
    feb4:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    feb6:	687b      	ldr	r3, [r7, #4]
    feb8:	681a      	ldr	r2, [r3, #0]
    feba:	693b      	ldr	r3, [r7, #16]
    febc:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    febe:	687b      	ldr	r3, [r7, #4]
    fec0:	685a      	ldr	r2, [r3, #4]
    fec2:	693b      	ldr	r3, [r7, #16]
    fec4:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    fec6:	693b      	ldr	r3, [r7, #16]
    fec8:	2200      	movs	r2, #0
    feca:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    fecc:	693a      	ldr	r2, [r7, #16]
    fece:	7cd3      	ldrb	r3, [r2, #19]
    fed0:	7d79      	ldrb	r1, [r7, #21]
    fed2:	f361 13c7 	bfi	r3, r1, #7, #1
    fed6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    fed8:	693a      	ldr	r2, [r7, #16]
    feda:	7cd3      	ldrb	r3, [r2, #19]
    fedc:	7df9      	ldrb	r1, [r7, #23]
    fede:	f361 1345 	bfi	r3, r1, #5, #1
    fee2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    fee4:	687b      	ldr	r3, [r7, #4]
    fee6:	7a5b      	ldrb	r3, [r3, #9]
    fee8:	2b00      	cmp	r3, #0
    feea:	d007      	beq.n	fefc <_usb_d_dev_ep_trans+0x174>
    feec:	7b7b      	ldrb	r3, [r7, #13]
    feee:	f083 0301 	eor.w	r3, r3, #1
    fef2:	b2db      	uxtb	r3, r3
    fef4:	2b00      	cmp	r3, #0
    fef6:	d001      	beq.n	fefc <_usb_d_dev_ep_trans+0x174>
    fef8:	2301      	movs	r3, #1
    fefa:	e000      	b.n	fefe <_usb_d_dev_ep_trans+0x176>
    fefc:	2300      	movs	r3, #0
    fefe:	b2db      	uxtb	r3, r3
    ff00:	f003 0301 	and.w	r3, r3, #1
    ff04:	b2d9      	uxtb	r1, r3
    ff06:	693a      	ldr	r2, [r7, #16]
    ff08:	7cd3      	ldrb	r3, [r2, #19]
    ff0a:	f361 1304 	bfi	r3, r1, #4, #1
    ff0e:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    ff10:	7d7b      	ldrb	r3, [r7, #21]
    ff12:	2b00      	cmp	r3, #0
    ff14:	d004      	beq.n	ff20 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    ff16:	2100      	movs	r1, #0
    ff18:	6938      	ldr	r0, [r7, #16]
    ff1a:	4b0a      	ldr	r3, [pc, #40]	; (ff44 <_usb_d_dev_ep_trans+0x1bc>)
    ff1c:	4798      	blx	r3
    ff1e:	e003      	b.n	ff28 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    ff20:	2100      	movs	r1, #0
    ff22:	6938      	ldr	r0, [r7, #16]
    ff24:	4b08      	ldr	r3, [pc, #32]	; (ff48 <_usb_d_dev_ep_trans+0x1c0>)
    ff26:	4798      	blx	r3
	}

	return ERR_NONE;
    ff28:	2300      	movs	r3, #0
}
    ff2a:	4618      	mov	r0, r3
    ff2c:	3718      	adds	r7, #24
    ff2e:	46bd      	mov	sp, r7
    ff30:	bd80      	pop	{r7, pc}
    ff32:	bf00      	nop
    ff34:	0000e5f9 	.word	0x0000e5f9
    ff38:	20041fff 	.word	0x20041fff
    ff3c:	000109d5 	.word	0x000109d5
    ff40:	000109fb 	.word	0x000109fb
    ff44:	0000e8c1 	.word	0x0000e8c1
    ff48:	0000ead9 	.word	0x0000ead9

0000ff4c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    ff4c:	b580      	push	{r7, lr}
    ff4e:	b084      	sub	sp, #16
    ff50:	af00      	add	r7, sp, #0
    ff52:	4603      	mov	r3, r0
    ff54:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    ff56:	79fb      	ldrb	r3, [r7, #7]
    ff58:	f003 030f 	and.w	r3, r3, #15
    ff5c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    ff5e:	79fb      	ldrb	r3, [r7, #7]
    ff60:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ff64:	2b00      	cmp	r3, #0
    ff66:	bf14      	ite	ne
    ff68:	2301      	movne	r3, #1
    ff6a:	2300      	moveq	r3, #0
    ff6c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ff6e:	7bba      	ldrb	r2, [r7, #14]
    ff70:	7bfb      	ldrb	r3, [r7, #15]
    ff72:	4611      	mov	r1, r2
    ff74:	4618      	mov	r0, r3
    ff76:	4b08      	ldr	r3, [pc, #32]	; (ff98 <_usb_d_dev_ep_abort+0x4c>)
    ff78:	4798      	blx	r3
    ff7a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    ff7c:	7bfb      	ldrb	r3, [r7, #15]
    ff7e:	2b04      	cmp	r3, #4
    ff80:	d806      	bhi.n	ff90 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    ff82:	7bbb      	ldrb	r3, [r7, #14]
    ff84:	2202      	movs	r2, #2
    ff86:	4619      	mov	r1, r3
    ff88:	68b8      	ldr	r0, [r7, #8]
    ff8a:	4b04      	ldr	r3, [pc, #16]	; (ff9c <_usb_d_dev_ep_abort+0x50>)
    ff8c:	4798      	blx	r3
    ff8e:	e000      	b.n	ff92 <_usb_d_dev_ep_abort+0x46>
		return;
    ff90:	bf00      	nop
}
    ff92:	3710      	adds	r7, #16
    ff94:	46bd      	mov	sp, r7
    ff96:	bd80      	pop	{r7, pc}
    ff98:	0000e5f9 	.word	0x0000e5f9
    ff9c:	0000fc31 	.word	0x0000fc31

0000ffa0 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    ffa0:	b480      	push	{r7}
    ffa2:	b085      	sub	sp, #20
    ffa4:	af00      	add	r7, sp, #0
    ffa6:	4603      	mov	r3, r0
    ffa8:	6039      	str	r1, [r7, #0]
    ffaa:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ffac:	683b      	ldr	r3, [r7, #0]
    ffae:	2b00      	cmp	r3, #0
    ffb0:	d001      	beq.n	ffb6 <_usb_d_dev_register_callback+0x16>
    ffb2:	683b      	ldr	r3, [r7, #0]
    ffb4:	e000      	b.n	ffb8 <_usb_d_dev_register_callback+0x18>
    ffb6:	4b0a      	ldr	r3, [pc, #40]	; (ffe0 <_usb_d_dev_register_callback+0x40>)
    ffb8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    ffba:	79fb      	ldrb	r3, [r7, #7]
    ffbc:	2b01      	cmp	r3, #1
    ffbe:	d103      	bne.n	ffc8 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    ffc0:	4a08      	ldr	r2, [pc, #32]	; (ffe4 <_usb_d_dev_register_callback+0x44>)
    ffc2:	68fb      	ldr	r3, [r7, #12]
    ffc4:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    ffc6:	e005      	b.n	ffd4 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    ffc8:	79fb      	ldrb	r3, [r7, #7]
    ffca:	2b00      	cmp	r3, #0
    ffcc:	d102      	bne.n	ffd4 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    ffce:	4a05      	ldr	r2, [pc, #20]	; (ffe4 <_usb_d_dev_register_callback+0x44>)
    ffd0:	68fb      	ldr	r3, [r7, #12]
    ffd2:	6013      	str	r3, [r2, #0]
}
    ffd4:	bf00      	nop
    ffd6:	3714      	adds	r7, #20
    ffd8:	46bd      	mov	sp, r7
    ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
    ffde:	4770      	bx	lr
    ffe0:	0000de81 	.word	0x0000de81
    ffe4:	20008984 	.word	0x20008984

0000ffe8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    ffe8:	b480      	push	{r7}
    ffea:	b085      	sub	sp, #20
    ffec:	af00      	add	r7, sp, #0
    ffee:	4603      	mov	r3, r0
    fff0:	6039      	str	r1, [r7, #0]
    fff2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    fff4:	683b      	ldr	r3, [r7, #0]
    fff6:	2b00      	cmp	r3, #0
    fff8:	d001      	beq.n	fffe <_usb_d_dev_register_ep_callback+0x16>
    fffa:	683b      	ldr	r3, [r7, #0]
    fffc:	e000      	b.n	10000 <STACK_SIZE>
    fffe:	4b0e      	ldr	r3, [pc, #56]	; (10038 <STACK_SIZE+0x38>)
   10000:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
   10002:	79fb      	ldrb	r3, [r7, #7]
   10004:	2b00      	cmp	r3, #0
   10006:	d103      	bne.n	10010 <STACK_SIZE+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   10008:	4a0c      	ldr	r2, [pc, #48]	; (1003c <STACK_SIZE+0x3c>)
   1000a:	68fb      	ldr	r3, [r7, #12]
   1000c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
   1000e:	e00c      	b.n	1002a <STACK_SIZE+0x2a>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   10010:	79fb      	ldrb	r3, [r7, #7]
   10012:	2b01      	cmp	r3, #1
   10014:	d103      	bne.n	1001e <STACK_SIZE+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   10016:	4a09      	ldr	r2, [pc, #36]	; (1003c <STACK_SIZE+0x3c>)
   10018:	68fb      	ldr	r3, [r7, #12]
   1001a:	60d3      	str	r3, [r2, #12]
}
   1001c:	e005      	b.n	1002a <STACK_SIZE+0x2a>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   1001e:	79fb      	ldrb	r3, [r7, #7]
   10020:	2b02      	cmp	r3, #2
   10022:	d102      	bne.n	1002a <STACK_SIZE+0x2a>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   10024:	4a05      	ldr	r2, [pc, #20]	; (1003c <STACK_SIZE+0x3c>)
   10026:	68fb      	ldr	r3, [r7, #12]
   10028:	6113      	str	r3, [r2, #16]
}
   1002a:	bf00      	nop
   1002c:	3714      	adds	r7, #20
   1002e:	46bd      	mov	sp, r7
   10030:	f85d 7b04 	ldr.w	r7, [sp], #4
   10034:	4770      	bx	lr
   10036:	bf00      	nop
   10038:	0000de81 	.word	0x0000de81
   1003c:	20008984 	.word	0x20008984

00010040 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
   10040:	b580      	push	{r7, lr}
   10042:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   10044:	4b01      	ldr	r3, [pc, #4]	; (1004c <USB_0_Handler+0xc>)
   10046:	4798      	blx	r3
}
   10048:	bf00      	nop
   1004a:	bd80      	pop	{r7, pc}
   1004c:	0000f2b1 	.word	0x0000f2b1

00010050 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
   10050:	b580      	push	{r7, lr}
   10052:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   10054:	4b01      	ldr	r3, [pc, #4]	; (1005c <USB_1_Handler+0xc>)
   10056:	4798      	blx	r3
}
   10058:	bf00      	nop
   1005a:	bd80      	pop	{r7, pc}
   1005c:	0000f2b1 	.word	0x0000f2b1

00010060 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
   10060:	b580      	push	{r7, lr}
   10062:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   10064:	4b01      	ldr	r3, [pc, #4]	; (1006c <USB_2_Handler+0xc>)
   10066:	4798      	blx	r3
}
   10068:	bf00      	nop
   1006a:	bd80      	pop	{r7, pc}
   1006c:	0000f2b1 	.word	0x0000f2b1

00010070 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
   10070:	b580      	push	{r7, lr}
   10072:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   10074:	4b01      	ldr	r3, [pc, #4]	; (1007c <USB_3_Handler+0xc>)
   10076:	4798      	blx	r3
}
   10078:	bf00      	nop
   1007a:	bd80      	pop	{r7, pc}
   1007c:	0000f2b1 	.word	0x0000f2b1

00010080 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
   10080:	b480      	push	{r7}
   10082:	b083      	sub	sp, #12
   10084:	af00      	add	r7, sp, #0
   10086:	6078      	str	r0, [r7, #4]
   10088:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
   1008a:	bf00      	nop
   1008c:	687b      	ldr	r3, [r7, #4]
   1008e:	689a      	ldr	r2, [r3, #8]
   10090:	683b      	ldr	r3, [r7, #0]
   10092:	4013      	ands	r3, r2
   10094:	2b00      	cmp	r3, #0
   10096:	d1f9      	bne.n	1008c <hri_wdt_wait_for_sync+0xc>
	};
}
   10098:	bf00      	nop
   1009a:	370c      	adds	r7, #12
   1009c:	46bd      	mov	sp, r7
   1009e:	f85d 7b04 	ldr.w	r7, [sp], #4
   100a2:	4770      	bx	lr

000100a4 <hri_wdt_set_CTRLA_ENABLE_bit>:
{
	return ((Wdt *)hw)->SYNCBUSY.reg;
}

static inline void hri_wdt_set_CTRLA_ENABLE_bit(const void *const hw)
{
   100a4:	b580      	push	{r7, lr}
   100a6:	b082      	sub	sp, #8
   100a8:	af00      	add	r7, sp, #0
   100aa:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
   100ac:	687b      	ldr	r3, [r7, #4]
   100ae:	781b      	ldrb	r3, [r3, #0]
   100b0:	b2db      	uxtb	r3, r3
   100b2:	f043 0302 	orr.w	r3, r3, #2
   100b6:	b2da      	uxtb	r2, r3
   100b8:	687b      	ldr	r3, [r7, #4]
   100ba:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   100bc:	210e      	movs	r1, #14
   100be:	6878      	ldr	r0, [r7, #4]
   100c0:	4b02      	ldr	r3, [pc, #8]	; (100cc <hri_wdt_set_CTRLA_ENABLE_bit+0x28>)
   100c2:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   100c4:	bf00      	nop
   100c6:	3708      	adds	r7, #8
   100c8:	46bd      	mov	sp, r7
   100ca:	bd80      	pop	{r7, pc}
   100cc:	00010081 	.word	0x00010081

000100d0 <hri_wdt_get_CTRLA_ENABLE_bit>:

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
   100d0:	b580      	push	{r7, lr}
   100d2:	b084      	sub	sp, #16
   100d4:	af00      	add	r7, sp, #0
   100d6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   100d8:	210e      	movs	r1, #14
   100da:	6878      	ldr	r0, [r7, #4]
   100dc:	4b0a      	ldr	r3, [pc, #40]	; (10108 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
   100de:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   100e0:	687b      	ldr	r3, [r7, #4]
   100e2:	781b      	ldrb	r3, [r3, #0]
   100e4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
   100e6:	7bfb      	ldrb	r3, [r7, #15]
   100e8:	085b      	lsrs	r3, r3, #1
   100ea:	b2db      	uxtb	r3, r3
   100ec:	f003 0301 	and.w	r3, r3, #1
   100f0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   100f2:	7bfb      	ldrb	r3, [r7, #15]
   100f4:	2b00      	cmp	r3, #0
   100f6:	bf14      	ite	ne
   100f8:	2301      	movne	r3, #1
   100fa:	2300      	moveq	r3, #0
   100fc:	b2db      	uxtb	r3, r3
}
   100fe:	4618      	mov	r0, r3
   10100:	3710      	adds	r7, #16
   10102:	46bd      	mov	sp, r7
   10104:	bd80      	pop	{r7, pc}
   10106:	bf00      	nop
   10108:	00010081 	.word	0x00010081

0001010c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
   1010c:	b580      	push	{r7, lr}
   1010e:	b082      	sub	sp, #8
   10110:	af00      	add	r7, sp, #0
   10112:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
   10114:	687b      	ldr	r3, [r7, #4]
   10116:	781b      	ldrb	r3, [r3, #0]
   10118:	b2db      	uxtb	r3, r3
   1011a:	f023 0304 	bic.w	r3, r3, #4
   1011e:	b2da      	uxtb	r2, r3
   10120:	687b      	ldr	r3, [r7, #4]
   10122:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   10124:	210e      	movs	r1, #14
   10126:	6878      	ldr	r0, [r7, #4]
   10128:	4b02      	ldr	r3, [pc, #8]	; (10134 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
   1012a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   1012c:	bf00      	nop
   1012e:	3708      	adds	r7, #8
   10130:	46bd      	mov	sp, r7
   10132:	bd80      	pop	{r7, pc}
   10134:	00010081 	.word	0x00010081

00010138 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
   10138:	b580      	push	{r7, lr}
   1013a:	b084      	sub	sp, #16
   1013c:	af00      	add	r7, sp, #0
   1013e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   10140:	210e      	movs	r1, #14
   10142:	6878      	ldr	r0, [r7, #4]
   10144:	4b08      	ldr	r3, [pc, #32]	; (10168 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
   10146:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   10148:	687b      	ldr	r3, [r7, #4]
   1014a:	781b      	ldrb	r3, [r3, #0]
   1014c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
   1014e:	7bfb      	ldrb	r3, [r7, #15]
   10150:	09db      	lsrs	r3, r3, #7
   10152:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   10154:	7bfb      	ldrb	r3, [r7, #15]
   10156:	2b00      	cmp	r3, #0
   10158:	bf14      	ite	ne
   1015a:	2301      	movne	r3, #1
   1015c:	2300      	moveq	r3, #0
   1015e:	b2db      	uxtb	r3, r3
}
   10160:	4618      	mov	r0, r3
   10162:	3710      	adds	r7, #16
   10164:	46bd      	mov	sp, r7
   10166:	bd80      	pop	{r7, pc}
   10168:	00010081 	.word	0x00010081

0001016c <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
   1016c:	b480      	push	{r7}
   1016e:	b085      	sub	sp, #20
   10170:	af00      	add	r7, sp, #0
   10172:	6078      	str	r0, [r7, #4]
   10174:	460b      	mov	r3, r1
   10176:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
   10178:	687b      	ldr	r3, [r7, #4]
   1017a:	785b      	ldrb	r3, [r3, #1]
   1017c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
   1017e:	7bfb      	ldrb	r3, [r7, #15]
   10180:	f023 030f 	bic.w	r3, r3, #15
   10184:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
   10186:	78fb      	ldrb	r3, [r7, #3]
   10188:	f003 030f 	and.w	r3, r3, #15
   1018c:	b2da      	uxtb	r2, r3
   1018e:	7bfb      	ldrb	r3, [r7, #15]
   10190:	4313      	orrs	r3, r2
   10192:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
   10194:	687b      	ldr	r3, [r7, #4]
   10196:	7bfa      	ldrb	r2, [r7, #15]
   10198:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
   1019a:	bf00      	nop
   1019c:	3714      	adds	r7, #20
   1019e:	46bd      	mov	sp, r7
   101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   101a4:	4770      	bx	lr
	...

000101a8 <hri_wdt_write_CLEAR_reg>:
{
	return ((Wdt *)hw)->EWCTRL.reg;
}

static inline void hri_wdt_write_CLEAR_reg(const void *const hw, hri_wdt_clear_reg_t data)
{
   101a8:	b580      	push	{r7, lr}
   101aa:	b082      	sub	sp, #8
   101ac:	af00      	add	r7, sp, #0
   101ae:	6078      	str	r0, [r7, #4]
   101b0:	460b      	mov	r3, r1
   101b2:	70fb      	strb	r3, [r7, #3]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CLEAR.reg = data;
   101b4:	687b      	ldr	r3, [r7, #4]
   101b6:	78fa      	ldrb	r2, [r7, #3]
   101b8:	731a      	strb	r2, [r3, #12]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_CLEAR);
   101ba:	2110      	movs	r1, #16
   101bc:	6878      	ldr	r0, [r7, #4]
   101be:	4b03      	ldr	r3, [pc, #12]	; (101cc <hri_wdt_write_CLEAR_reg+0x24>)
   101c0:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   101c2:	bf00      	nop
   101c4:	3708      	adds	r7, #8
   101c6:	46bd      	mov	sp, r7
   101c8:	bd80      	pop	{r7, pc}
   101ca:	bf00      	nop
   101cc:	00010081 	.word	0x00010081

000101d0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
   101d0:	b580      	push	{r7, lr}
   101d2:	b082      	sub	sp, #8
   101d4:	af00      	add	r7, sp, #0
   101d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   101d8:	687b      	ldr	r3, [r7, #4]
   101da:	2b00      	cmp	r3, #0
   101dc:	d005      	beq.n	101ea <_wdt_init+0x1a>
   101de:	687b      	ldr	r3, [r7, #4]
   101e0:	681b      	ldr	r3, [r3, #0]
   101e2:	2b00      	cmp	r3, #0
   101e4:	d001      	beq.n	101ea <_wdt_init+0x1a>
   101e6:	2301      	movs	r3, #1
   101e8:	e000      	b.n	101ec <_wdt_init+0x1c>
   101ea:	2300      	movs	r3, #0
   101ec:	f003 0301 	and.w	r3, r3, #1
   101f0:	b2db      	uxtb	r3, r3
   101f2:	2250      	movs	r2, #80	; 0x50
   101f4:	4913      	ldr	r1, [pc, #76]	; (10244 <_wdt_init+0x74>)
   101f6:	4618      	mov	r0, r3
   101f8:	4b13      	ldr	r3, [pc, #76]	; (10248 <_wdt_init+0x78>)
   101fa:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
   101fc:	687b      	ldr	r3, [r7, #4]
   101fe:	681b      	ldr	r3, [r3, #0]
   10200:	4618      	mov	r0, r3
   10202:	4b12      	ldr	r3, [pc, #72]	; (1024c <_wdt_init+0x7c>)
   10204:	4798      	blx	r3
   10206:	4603      	mov	r3, r0
   10208:	2b00      	cmp	r3, #0
   1020a:	d107      	bne.n	1021c <_wdt_init+0x4c>
   1020c:	687b      	ldr	r3, [r7, #4]
   1020e:	681b      	ldr	r3, [r3, #0]
   10210:	4618      	mov	r0, r3
   10212:	4b0f      	ldr	r3, [pc, #60]	; (10250 <_wdt_init+0x80>)
   10214:	4798      	blx	r3
   10216:	4603      	mov	r3, r0
   10218:	2b00      	cmp	r3, #0
   1021a:	d002      	beq.n	10222 <_wdt_init+0x52>
		return ERR_DENIED;
   1021c:	f06f 0310 	mvn.w	r3, #16
   10220:	e00b      	b.n	1023a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
   10222:	687b      	ldr	r3, [r7, #4]
   10224:	681b      	ldr	r3, [r3, #0]
   10226:	4618      	mov	r0, r3
   10228:	4b0a      	ldr	r3, [pc, #40]	; (10254 <_wdt_init+0x84>)
   1022a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
   1022c:	687b      	ldr	r3, [r7, #4]
   1022e:	681b      	ldr	r3, [r3, #0]
   10230:	210b      	movs	r1, #11
   10232:	4618      	mov	r0, r3
   10234:	4b08      	ldr	r3, [pc, #32]	; (10258 <_wdt_init+0x88>)
   10236:	4798      	blx	r3
	}

	return ERR_NONE;
   10238:	2300      	movs	r3, #0
}
   1023a:	4618      	mov	r0, r3
   1023c:	3708      	adds	r7, #8
   1023e:	46bd      	mov	sp, r7
   10240:	bd80      	pop	{r7, pc}
   10242:	bf00      	nop
   10244:	00021ca0 	.word	0x00021ca0
   10248:	00007e21 	.word	0x00007e21
   1024c:	00010139 	.word	0x00010139
   10250:	000100d1 	.word	0x000100d1
   10254:	0001010d 	.word	0x0001010d
   10258:	0001016d 	.word	0x0001016d

0001025c <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
   1025c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1025e:	b08b      	sub	sp, #44	; 0x2c
   10260:	af00      	add	r7, sp, #0
   10262:	60f8      	str	r0, [r7, #12]
   10264:	60b9      	str	r1, [r7, #8]
   10266:	4613      	mov	r3, r2
   10268:	80fb      	strh	r3, [r7, #6]
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   1026a:	68fb      	ldr	r3, [r7, #12]
   1026c:	2b00      	cmp	r3, #0
   1026e:	d005      	beq.n	1027c <_wdt_set_timeout_period+0x20>
   10270:	68fb      	ldr	r3, [r7, #12]
   10272:	681b      	ldr	r3, [r3, #0]
   10274:	2b00      	cmp	r3, #0
   10276:	d001      	beq.n	1027c <_wdt_set_timeout_period+0x20>
   10278:	2301      	movs	r3, #1
   1027a:	e000      	b.n	1027e <_wdt_set_timeout_period+0x22>
   1027c:	2300      	movs	r3, #0
   1027e:	f003 0301 	and.w	r3, r3, #1
   10282:	b2db      	uxtb	r3, r3
   10284:	227a      	movs	r2, #122	; 0x7a
   10286:	4954      	ldr	r1, [pc, #336]	; (103d8 <_wdt_set_timeout_period+0x17c>)
   10288:	4618      	mov	r0, r3
   1028a:	4b54      	ldr	r3, [pc, #336]	; (103dc <_wdt_set_timeout_period+0x180>)
   1028c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
   1028e:	68fb      	ldr	r3, [r7, #12]
   10290:	681b      	ldr	r3, [r3, #0]
   10292:	4618      	mov	r0, r3
   10294:	4b52      	ldr	r3, [pc, #328]	; (103e0 <_wdt_set_timeout_period+0x184>)
   10296:	4798      	blx	r3
   10298:	4603      	mov	r3, r0
   1029a:	2b00      	cmp	r3, #0
   1029c:	d107      	bne.n	102ae <_wdt_set_timeout_period+0x52>
   1029e:	68fb      	ldr	r3, [r7, #12]
   102a0:	681b      	ldr	r3, [r3, #0]
   102a2:	4618      	mov	r0, r3
   102a4:	4b4f      	ldr	r3, [pc, #316]	; (103e4 <_wdt_set_timeout_period+0x188>)
   102a6:	4798      	blx	r3
   102a8:	4603      	mov	r3, r0
   102aa:	2b00      	cmp	r3, #0
   102ac:	d002      	beq.n	102b4 <_wdt_set_timeout_period+0x58>
		return ERR_DENIED;
   102ae:	f06f 0310 	mvn.w	r3, #16
   102b2:	e08c      	b.n	103ce <_wdt_set_timeout_period+0x172>
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
   102b4:	88f9      	ldrh	r1, [r7, #6]
   102b6:	f04f 0200 	mov.w	r2, #0
   102ba:	68bb      	ldr	r3, [r7, #8]
   102bc:	f04f 0400 	mov.w	r4, #0
   102c0:	fb03 fe02 	mul.w	lr, r3, r2
   102c4:	fb01 f004 	mul.w	r0, r1, r4
   102c8:	4470      	add	r0, lr
   102ca:	fba1 3403 	umull	r3, r4, r1, r3
   102ce:	1902      	adds	r2, r0, r4
   102d0:	4614      	mov	r4, r2
   102d2:	e9c7 3406 	strd	r3, r4, [r7, #24]
   102d6:	e9c7 3406 	strd	r3, r4, [r7, #24]

		/* check whether overflow*/
		if (tmp >> 32) {
   102da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   102de:	0025      	movs	r5, r4
   102e0:	2600      	movs	r6, #0
   102e2:	ea55 0306 	orrs.w	r3, r5, r6
   102e6:	d002      	beq.n	102ee <_wdt_set_timeout_period+0x92>
			return ERR_INVALID_ARG;
   102e8:	f06f 030c 	mvn.w	r3, #12
   102ec:	e06f      	b.n	103ce <_wdt_set_timeout_period+0x172>
		}

		period_cycles = (uint32_t)tmp;
   102ee:	69bb      	ldr	r3, [r7, #24]
   102f0:	617b      	str	r3, [r7, #20]
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
   102f2:	697b      	ldr	r3, [r7, #20]
   102f4:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
   102f8:	d041      	beq.n	1037e <_wdt_set_timeout_period+0x122>
   102fa:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
   102fe:	d813      	bhi.n	10328 <_wdt_set_timeout_period+0xcc>
   10300:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   10304:	d02f      	beq.n	10366 <_wdt_set_timeout_period+0x10a>
   10306:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1030a:	d806      	bhi.n	1031a <_wdt_set_timeout_period+0xbe>
   1030c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   10310:	d021      	beq.n	10356 <_wdt_set_timeout_period+0xfa>
   10312:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   10316:	d022      	beq.n	1035e <_wdt_set_timeout_period+0x102>
   10318:	e04d      	b.n	103b6 <_wdt_set_timeout_period+0x15a>
   1031a:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
   1031e:	d026      	beq.n	1036e <_wdt_set_timeout_period+0x112>
   10320:	f5b3 3ffa 	cmp.w	r3, #128000	; 0x1f400
   10324:	d027      	beq.n	10376 <_wdt_set_timeout_period+0x11a>
   10326:	e046      	b.n	103b6 <_wdt_set_timeout_period+0x15a>
   10328:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
   1032c:	d033      	beq.n	10396 <_wdt_set_timeout_period+0x13a>
   1032e:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
   10332:	d806      	bhi.n	10342 <_wdt_set_timeout_period+0xe6>
   10334:	f5b3 2ffa 	cmp.w	r3, #512000	; 0x7d000
   10338:	d025      	beq.n	10386 <_wdt_set_timeout_period+0x12a>
   1033a:	f5b3 2f7a 	cmp.w	r3, #1024000	; 0xfa000
   1033e:	d026      	beq.n	1038e <_wdt_set_timeout_period+0x132>
   10340:	e039      	b.n	103b6 <_wdt_set_timeout_period+0x15a>
   10342:	f5b3 0ffa 	cmp.w	r3, #8192000	; 0x7d0000
   10346:	d02e      	beq.n	103a6 <_wdt_set_timeout_period+0x14a>
   10348:	f5b3 0f7a 	cmp.w	r3, #16384000	; 0xfa0000
   1034c:	d02f      	beq.n	103ae <_wdt_set_timeout_period+0x152>
   1034e:	f5b3 1f7a 	cmp.w	r3, #4096000	; 0x3e8000
   10352:	d024      	beq.n	1039e <_wdt_set_timeout_period+0x142>
   10354:	e02f      	b.n	103b6 <_wdt_set_timeout_period+0x15a>
		case WDT_CLK_8CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8CYCLE;
   10356:	2300      	movs	r3, #0
   10358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1035c:	e02e      	b.n	103bc <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16CYCLE;
   1035e:	2301      	movs	r3, #1
   10360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   10364:	e02a      	b.n	103bc <_wdt_set_timeout_period+0x160>
		case WDT_CLK_32CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_32CYCLE;
   10366:	2302      	movs	r3, #2
   10368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1036c:	e026      	b.n	103bc <_wdt_set_timeout_period+0x160>
		case WDT_CLK_64CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_64CYCLE;
   1036e:	2303      	movs	r3, #3
   10370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   10374:	e022      	b.n	103bc <_wdt_set_timeout_period+0x160>
		case WDT_CLK_128CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_128CYCLE;
   10376:	2304      	movs	r3, #4
   10378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1037c:	e01e      	b.n	103bc <_wdt_set_timeout_period+0x160>
		case WDT_CLK_256CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_256CYCLE;
   1037e:	2305      	movs	r3, #5
   10380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   10384:	e01a      	b.n	103bc <_wdt_set_timeout_period+0x160>
		case WDT_CLK_512CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_512CYCLE;
   10386:	2306      	movs	r3, #6
   10388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1038c:	e016      	b.n	103bc <_wdt_set_timeout_period+0x160>
		case WDT_CLK_1024CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
   1038e:	2307      	movs	r3, #7
   10390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   10394:	e012      	b.n	103bc <_wdt_set_timeout_period+0x160>
		case WDT_CLK_2048CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
   10396:	2308      	movs	r3, #8
   10398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1039c:	e00e      	b.n	103bc <_wdt_set_timeout_period+0x160>
		case WDT_CLK_4096CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
   1039e:	2309      	movs	r3, #9
   103a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   103a4:	e00a      	b.n	103bc <_wdt_set_timeout_period+0x160>
		case WDT_CLK_8192CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
   103a6:	230a      	movs	r3, #10
   103a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   103ac:	e006      	b.n	103bc <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
   103ae:	230b      	movs	r3, #11
   103b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   103b4:	e002      	b.n	103bc <_wdt_set_timeout_period+0x160>
		default:
			return ERR_INVALID_ARG;
   103b6:	f06f 030c 	mvn.w	r3, #12
   103ba:	e008      	b.n	103ce <_wdt_set_timeout_period+0x172>
		}
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);
   103bc:	68fb      	ldr	r3, [r7, #12]
   103be:	681b      	ldr	r3, [r3, #0]
   103c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   103c4:	4611      	mov	r1, r2
   103c6:	4618      	mov	r0, r3
   103c8:	4b07      	ldr	r3, [pc, #28]	; (103e8 <_wdt_set_timeout_period+0x18c>)
   103ca:	4798      	blx	r3

	return ERR_NONE;
   103cc:	2300      	movs	r3, #0
}
   103ce:	4618      	mov	r0, r3
   103d0:	372c      	adds	r7, #44	; 0x2c
   103d2:	46bd      	mov	sp, r7
   103d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103d6:	bf00      	nop
   103d8:	00021ca0 	.word	0x00021ca0
   103dc:	00007e21 	.word	0x00007e21
   103e0:	00010139 	.word	0x00010139
   103e4:	000100d1 	.word	0x000100d1
   103e8:	0001016d 	.word	0x0001016d

000103ec <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
   103ec:	b580      	push	{r7, lr}
   103ee:	b082      	sub	sp, #8
   103f0:	af00      	add	r7, sp, #0
   103f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   103f4:	687b      	ldr	r3, [r7, #4]
   103f6:	2b00      	cmp	r3, #0
   103f8:	d005      	beq.n	10406 <_wdt_enable+0x1a>
   103fa:	687b      	ldr	r3, [r7, #4]
   103fc:	681b      	ldr	r3, [r3, #0]
   103fe:	2b00      	cmp	r3, #0
   10400:	d001      	beq.n	10406 <_wdt_enable+0x1a>
   10402:	2301      	movs	r3, #1
   10404:	e000      	b.n	10408 <_wdt_enable+0x1c>
   10406:	2300      	movs	r3, #0
   10408:	f003 0301 	and.w	r3, r3, #1
   1040c:	b2db      	uxtb	r3, r3
   1040e:	22fb      	movs	r2, #251	; 0xfb
   10410:	4906      	ldr	r1, [pc, #24]	; (1042c <_wdt_enable+0x40>)
   10412:	4618      	mov	r0, r3
   10414:	4b06      	ldr	r3, [pc, #24]	; (10430 <_wdt_enable+0x44>)
   10416:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
   10418:	687b      	ldr	r3, [r7, #4]
   1041a:	681b      	ldr	r3, [r3, #0]
   1041c:	4618      	mov	r0, r3
   1041e:	4b05      	ldr	r3, [pc, #20]	; (10434 <_wdt_enable+0x48>)
   10420:	4798      	blx	r3

	return ERR_NONE;
   10422:	2300      	movs	r3, #0
}
   10424:	4618      	mov	r0, r3
   10426:	3708      	adds	r7, #8
   10428:	46bd      	mov	sp, r7
   1042a:	bd80      	pop	{r7, pc}
   1042c:	00021ca0 	.word	0x00021ca0
   10430:	00007e21 	.word	0x00007e21
   10434:	000100a5 	.word	0x000100a5

00010438 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
   10438:	b580      	push	{r7, lr}
   1043a:	b082      	sub	sp, #8
   1043c:	af00      	add	r7, sp, #0
   1043e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   10440:	687b      	ldr	r3, [r7, #4]
   10442:	2b00      	cmp	r3, #0
   10444:	d005      	beq.n	10452 <_wdt_feed+0x1a>
   10446:	687b      	ldr	r3, [r7, #4]
   10448:	681b      	ldr	r3, [r3, #0]
   1044a:	2b00      	cmp	r3, #0
   1044c:	d001      	beq.n	10452 <_wdt_feed+0x1a>
   1044e:	2301      	movs	r3, #1
   10450:	e000      	b.n	10454 <_wdt_feed+0x1c>
   10452:	2300      	movs	r3, #0
   10454:	f003 0301 	and.w	r3, r3, #1
   10458:	b2db      	uxtb	r3, r3
   1045a:	f240 1219 	movw	r2, #281	; 0x119
   1045e:	4907      	ldr	r1, [pc, #28]	; (1047c <_wdt_feed+0x44>)
   10460:	4618      	mov	r0, r3
   10462:	4b07      	ldr	r3, [pc, #28]	; (10480 <_wdt_feed+0x48>)
   10464:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
   10466:	687b      	ldr	r3, [r7, #4]
   10468:	681b      	ldr	r3, [r3, #0]
   1046a:	21a5      	movs	r1, #165	; 0xa5
   1046c:	4618      	mov	r0, r3
   1046e:	4b05      	ldr	r3, [pc, #20]	; (10484 <_wdt_feed+0x4c>)
   10470:	4798      	blx	r3

	return ERR_NONE;
   10472:	2300      	movs	r3, #0
}
   10474:	4618      	mov	r0, r3
   10476:	3708      	adds	r7, #8
   10478:	46bd      	mov	sp, r7
   1047a:	bd80      	pop	{r7, pc}
   1047c:	00021ca0 	.word	0x00021ca0
   10480:	00007e21 	.word	0x00007e21
   10484:	000101a9 	.word	0x000101a9

00010488 <hri_port_set_DIR_reg>:
{
   10488:	b480      	push	{r7}
   1048a:	b085      	sub	sp, #20
   1048c:	af00      	add	r7, sp, #0
   1048e:	60f8      	str	r0, [r7, #12]
   10490:	460b      	mov	r3, r1
   10492:	607a      	str	r2, [r7, #4]
   10494:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   10496:	7afb      	ldrb	r3, [r7, #11]
   10498:	68fa      	ldr	r2, [r7, #12]
   1049a:	01db      	lsls	r3, r3, #7
   1049c:	4413      	add	r3, r2
   1049e:	3308      	adds	r3, #8
   104a0:	687a      	ldr	r2, [r7, #4]
   104a2:	601a      	str	r2, [r3, #0]
}
   104a4:	bf00      	nop
   104a6:	3714      	adds	r7, #20
   104a8:	46bd      	mov	sp, r7
   104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   104ae:	4770      	bx	lr

000104b0 <hri_port_clear_DIR_reg>:
{
   104b0:	b480      	push	{r7}
   104b2:	b085      	sub	sp, #20
   104b4:	af00      	add	r7, sp, #0
   104b6:	60f8      	str	r0, [r7, #12]
   104b8:	460b      	mov	r3, r1
   104ba:	607a      	str	r2, [r7, #4]
   104bc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   104be:	7afb      	ldrb	r3, [r7, #11]
   104c0:	68fa      	ldr	r2, [r7, #12]
   104c2:	01db      	lsls	r3, r3, #7
   104c4:	4413      	add	r3, r2
   104c6:	3304      	adds	r3, #4
   104c8:	687a      	ldr	r2, [r7, #4]
   104ca:	601a      	str	r2, [r3, #0]
}
   104cc:	bf00      	nop
   104ce:	3714      	adds	r7, #20
   104d0:	46bd      	mov	sp, r7
   104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   104d6:	4770      	bx	lr

000104d8 <hri_port_set_OUT_reg>:
{
   104d8:	b480      	push	{r7}
   104da:	b085      	sub	sp, #20
   104dc:	af00      	add	r7, sp, #0
   104de:	60f8      	str	r0, [r7, #12]
   104e0:	460b      	mov	r3, r1
   104e2:	607a      	str	r2, [r7, #4]
   104e4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   104e6:	7afb      	ldrb	r3, [r7, #11]
   104e8:	68fa      	ldr	r2, [r7, #12]
   104ea:	01db      	lsls	r3, r3, #7
   104ec:	4413      	add	r3, r2
   104ee:	3318      	adds	r3, #24
   104f0:	687a      	ldr	r2, [r7, #4]
   104f2:	601a      	str	r2, [r3, #0]
}
   104f4:	bf00      	nop
   104f6:	3714      	adds	r7, #20
   104f8:	46bd      	mov	sp, r7
   104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   104fe:	4770      	bx	lr

00010500 <hri_port_clear_OUT_reg>:
{
   10500:	b480      	push	{r7}
   10502:	b085      	sub	sp, #20
   10504:	af00      	add	r7, sp, #0
   10506:	60f8      	str	r0, [r7, #12]
   10508:	460b      	mov	r3, r1
   1050a:	607a      	str	r2, [r7, #4]
   1050c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1050e:	7afb      	ldrb	r3, [r7, #11]
   10510:	68fa      	ldr	r2, [r7, #12]
   10512:	01db      	lsls	r3, r3, #7
   10514:	4413      	add	r3, r2
   10516:	3314      	adds	r3, #20
   10518:	687a      	ldr	r2, [r7, #4]
   1051a:	601a      	str	r2, [r3, #0]
}
   1051c:	bf00      	nop
   1051e:	3714      	adds	r7, #20
   10520:	46bd      	mov	sp, r7
   10522:	f85d 7b04 	ldr.w	r7, [sp], #4
   10526:	4770      	bx	lr

00010528 <hri_port_write_PMUX_PMUXE_bf>:
{
   10528:	b480      	push	{r7}
   1052a:	b085      	sub	sp, #20
   1052c:	af00      	add	r7, sp, #0
   1052e:	6078      	str	r0, [r7, #4]
   10530:	4608      	mov	r0, r1
   10532:	4611      	mov	r1, r2
   10534:	461a      	mov	r2, r3
   10536:	4603      	mov	r3, r0
   10538:	70fb      	strb	r3, [r7, #3]
   1053a:	460b      	mov	r3, r1
   1053c:	70bb      	strb	r3, [r7, #2]
   1053e:	4613      	mov	r3, r2
   10540:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   10542:	78fa      	ldrb	r2, [r7, #3]
   10544:	78bb      	ldrb	r3, [r7, #2]
   10546:	6879      	ldr	r1, [r7, #4]
   10548:	01d2      	lsls	r2, r2, #7
   1054a:	440a      	add	r2, r1
   1054c:	4413      	add	r3, r2
   1054e:	3330      	adds	r3, #48	; 0x30
   10550:	781b      	ldrb	r3, [r3, #0]
   10552:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   10554:	7bfb      	ldrb	r3, [r7, #15]
   10556:	f023 030f 	bic.w	r3, r3, #15
   1055a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   1055c:	787b      	ldrb	r3, [r7, #1]
   1055e:	f003 030f 	and.w	r3, r3, #15
   10562:	b2da      	uxtb	r2, r3
   10564:	7bfb      	ldrb	r3, [r7, #15]
   10566:	4313      	orrs	r3, r2
   10568:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   1056a:	78fa      	ldrb	r2, [r7, #3]
   1056c:	78bb      	ldrb	r3, [r7, #2]
   1056e:	6879      	ldr	r1, [r7, #4]
   10570:	01d2      	lsls	r2, r2, #7
   10572:	440a      	add	r2, r1
   10574:	4413      	add	r3, r2
   10576:	3330      	adds	r3, #48	; 0x30
   10578:	7bfa      	ldrb	r2, [r7, #15]
   1057a:	701a      	strb	r2, [r3, #0]
}
   1057c:	bf00      	nop
   1057e:	3714      	adds	r7, #20
   10580:	46bd      	mov	sp, r7
   10582:	f85d 7b04 	ldr.w	r7, [sp], #4
   10586:	4770      	bx	lr

00010588 <hri_port_write_PMUX_PMUXO_bf>:
{
   10588:	b480      	push	{r7}
   1058a:	b085      	sub	sp, #20
   1058c:	af00      	add	r7, sp, #0
   1058e:	6078      	str	r0, [r7, #4]
   10590:	4608      	mov	r0, r1
   10592:	4611      	mov	r1, r2
   10594:	461a      	mov	r2, r3
   10596:	4603      	mov	r3, r0
   10598:	70fb      	strb	r3, [r7, #3]
   1059a:	460b      	mov	r3, r1
   1059c:	70bb      	strb	r3, [r7, #2]
   1059e:	4613      	mov	r3, r2
   105a0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   105a2:	78fa      	ldrb	r2, [r7, #3]
   105a4:	78bb      	ldrb	r3, [r7, #2]
   105a6:	6879      	ldr	r1, [r7, #4]
   105a8:	01d2      	lsls	r2, r2, #7
   105aa:	440a      	add	r2, r1
   105ac:	4413      	add	r3, r2
   105ae:	3330      	adds	r3, #48	; 0x30
   105b0:	781b      	ldrb	r3, [r3, #0]
   105b2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   105b4:	7bfb      	ldrb	r3, [r7, #15]
   105b6:	f003 030f 	and.w	r3, r3, #15
   105ba:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   105bc:	787b      	ldrb	r3, [r7, #1]
   105be:	011b      	lsls	r3, r3, #4
   105c0:	b2da      	uxtb	r2, r3
   105c2:	7bfb      	ldrb	r3, [r7, #15]
   105c4:	4313      	orrs	r3, r2
   105c6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   105c8:	78fa      	ldrb	r2, [r7, #3]
   105ca:	78bb      	ldrb	r3, [r7, #2]
   105cc:	6879      	ldr	r1, [r7, #4]
   105ce:	01d2      	lsls	r2, r2, #7
   105d0:	440a      	add	r2, r1
   105d2:	4413      	add	r3, r2
   105d4:	3330      	adds	r3, #48	; 0x30
   105d6:	7bfa      	ldrb	r2, [r7, #15]
   105d8:	701a      	strb	r2, [r3, #0]
}
   105da:	bf00      	nop
   105dc:	3714      	adds	r7, #20
   105de:	46bd      	mov	sp, r7
   105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   105e4:	4770      	bx	lr

000105e6 <hri_port_write_PINCFG_PMUXEN_bit>:
{
   105e6:	b480      	push	{r7}
   105e8:	b085      	sub	sp, #20
   105ea:	af00      	add	r7, sp, #0
   105ec:	6078      	str	r0, [r7, #4]
   105ee:	4608      	mov	r0, r1
   105f0:	4611      	mov	r1, r2
   105f2:	461a      	mov	r2, r3
   105f4:	4603      	mov	r3, r0
   105f6:	70fb      	strb	r3, [r7, #3]
   105f8:	460b      	mov	r3, r1
   105fa:	70bb      	strb	r3, [r7, #2]
   105fc:	4613      	mov	r3, r2
   105fe:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   10600:	78fa      	ldrb	r2, [r7, #3]
   10602:	78bb      	ldrb	r3, [r7, #2]
   10604:	6879      	ldr	r1, [r7, #4]
   10606:	01d2      	lsls	r2, r2, #7
   10608:	440a      	add	r2, r1
   1060a:	4413      	add	r3, r2
   1060c:	3340      	adds	r3, #64	; 0x40
   1060e:	781b      	ldrb	r3, [r3, #0]
   10610:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   10612:	7bfb      	ldrb	r3, [r7, #15]
   10614:	f023 0301 	bic.w	r3, r3, #1
   10618:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   1061a:	787a      	ldrb	r2, [r7, #1]
   1061c:	7bfb      	ldrb	r3, [r7, #15]
   1061e:	4313      	orrs	r3, r2
   10620:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   10622:	78fa      	ldrb	r2, [r7, #3]
   10624:	78bb      	ldrb	r3, [r7, #2]
   10626:	6879      	ldr	r1, [r7, #4]
   10628:	01d2      	lsls	r2, r2, #7
   1062a:	440a      	add	r2, r1
   1062c:	4413      	add	r3, r2
   1062e:	3340      	adds	r3, #64	; 0x40
   10630:	7bfa      	ldrb	r2, [r7, #15]
   10632:	701a      	strb	r2, [r3, #0]
}
   10634:	bf00      	nop
   10636:	3714      	adds	r7, #20
   10638:	46bd      	mov	sp, r7
   1063a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1063e:	4770      	bx	lr

00010640 <hri_port_write_WRCONFIG_reg>:
{
   10640:	b480      	push	{r7}
   10642:	b085      	sub	sp, #20
   10644:	af00      	add	r7, sp, #0
   10646:	60f8      	str	r0, [r7, #12]
   10648:	460b      	mov	r3, r1
   1064a:	607a      	str	r2, [r7, #4]
   1064c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   1064e:	7afb      	ldrb	r3, [r7, #11]
   10650:	68fa      	ldr	r2, [r7, #12]
   10652:	01db      	lsls	r3, r3, #7
   10654:	4413      	add	r3, r2
   10656:	3328      	adds	r3, #40	; 0x28
   10658:	687a      	ldr	r2, [r7, #4]
   1065a:	601a      	str	r2, [r3, #0]
}
   1065c:	bf00      	nop
   1065e:	3714      	adds	r7, #20
   10660:	46bd      	mov	sp, r7
   10662:	f85d 7b04 	ldr.w	r7, [sp], #4
   10666:	4770      	bx	lr

00010668 <_gpio_set_direction>:
{
   10668:	b580      	push	{r7, lr}
   1066a:	b082      	sub	sp, #8
   1066c:	af00      	add	r7, sp, #0
   1066e:	4603      	mov	r3, r0
   10670:	6039      	str	r1, [r7, #0]
   10672:	71fb      	strb	r3, [r7, #7]
   10674:	4613      	mov	r3, r2
   10676:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   10678:	79bb      	ldrb	r3, [r7, #6]
   1067a:	2b01      	cmp	r3, #1
   1067c:	d01c      	beq.n	106b8 <_gpio_set_direction+0x50>
   1067e:	2b02      	cmp	r3, #2
   10680:	d037      	beq.n	106f2 <_gpio_set_direction+0x8a>
   10682:	2b00      	cmp	r3, #0
   10684:	d14e      	bne.n	10724 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10686:	79fb      	ldrb	r3, [r7, #7]
   10688:	683a      	ldr	r2, [r7, #0]
   1068a:	4619      	mov	r1, r3
   1068c:	482a      	ldr	r0, [pc, #168]	; (10738 <_gpio_set_direction+0xd0>)
   1068e:	4b2b      	ldr	r3, [pc, #172]	; (1073c <_gpio_set_direction+0xd4>)
   10690:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   10692:	683b      	ldr	r3, [r7, #0]
   10694:	b29b      	uxth	r3, r3
   10696:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1069a:	79fb      	ldrb	r3, [r7, #7]
   1069c:	4619      	mov	r1, r3
   1069e:	4826      	ldr	r0, [pc, #152]	; (10738 <_gpio_set_direction+0xd0>)
   106a0:	4b27      	ldr	r3, [pc, #156]	; (10740 <_gpio_set_direction+0xd8>)
   106a2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   106a4:	683b      	ldr	r3, [r7, #0]
   106a6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   106a8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   106ac:	79fb      	ldrb	r3, [r7, #7]
   106ae:	4619      	mov	r1, r3
   106b0:	4821      	ldr	r0, [pc, #132]	; (10738 <_gpio_set_direction+0xd0>)
   106b2:	4b23      	ldr	r3, [pc, #140]	; (10740 <_gpio_set_direction+0xd8>)
   106b4:	4798      	blx	r3
		break;
   106b6:	e03a      	b.n	1072e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   106b8:	79fb      	ldrb	r3, [r7, #7]
   106ba:	683a      	ldr	r2, [r7, #0]
   106bc:	4619      	mov	r1, r3
   106be:	481e      	ldr	r0, [pc, #120]	; (10738 <_gpio_set_direction+0xd0>)
   106c0:	4b1e      	ldr	r3, [pc, #120]	; (1073c <_gpio_set_direction+0xd4>)
   106c2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   106c4:	683b      	ldr	r3, [r7, #0]
   106c6:	b29b      	uxth	r3, r3
   106c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   106cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   106d0:	79f9      	ldrb	r1, [r7, #7]
   106d2:	461a      	mov	r2, r3
   106d4:	4818      	ldr	r0, [pc, #96]	; (10738 <_gpio_set_direction+0xd0>)
   106d6:	4b1a      	ldr	r3, [pc, #104]	; (10740 <_gpio_set_direction+0xd8>)
   106d8:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   106da:	683b      	ldr	r3, [r7, #0]
   106dc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   106de:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   106e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   106e6:	79f9      	ldrb	r1, [r7, #7]
   106e8:	461a      	mov	r2, r3
   106ea:	4813      	ldr	r0, [pc, #76]	; (10738 <_gpio_set_direction+0xd0>)
   106ec:	4b14      	ldr	r3, [pc, #80]	; (10740 <_gpio_set_direction+0xd8>)
   106ee:	4798      	blx	r3
		break;
   106f0:	e01d      	b.n	1072e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   106f2:	79fb      	ldrb	r3, [r7, #7]
   106f4:	683a      	ldr	r2, [r7, #0]
   106f6:	4619      	mov	r1, r3
   106f8:	480f      	ldr	r0, [pc, #60]	; (10738 <_gpio_set_direction+0xd0>)
   106fa:	4b12      	ldr	r3, [pc, #72]	; (10744 <_gpio_set_direction+0xdc>)
   106fc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   106fe:	683b      	ldr	r3, [r7, #0]
   10700:	b29b      	uxth	r3, r3
   10702:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10706:	79fb      	ldrb	r3, [r7, #7]
   10708:	4619      	mov	r1, r3
   1070a:	480b      	ldr	r0, [pc, #44]	; (10738 <_gpio_set_direction+0xd0>)
   1070c:	4b0c      	ldr	r3, [pc, #48]	; (10740 <_gpio_set_direction+0xd8>)
   1070e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10710:	683b      	ldr	r3, [r7, #0]
   10712:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10714:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   10718:	79fb      	ldrb	r3, [r7, #7]
   1071a:	4619      	mov	r1, r3
   1071c:	4806      	ldr	r0, [pc, #24]	; (10738 <_gpio_set_direction+0xd0>)
   1071e:	4b08      	ldr	r3, [pc, #32]	; (10740 <_gpio_set_direction+0xd8>)
   10720:	4798      	blx	r3
		break;
   10722:	e004      	b.n	1072e <_gpio_set_direction+0xc6>
		ASSERT(false);
   10724:	2246      	movs	r2, #70	; 0x46
   10726:	4908      	ldr	r1, [pc, #32]	; (10748 <_gpio_set_direction+0xe0>)
   10728:	2000      	movs	r0, #0
   1072a:	4b08      	ldr	r3, [pc, #32]	; (1074c <_gpio_set_direction+0xe4>)
   1072c:	4798      	blx	r3
}
   1072e:	bf00      	nop
   10730:	3708      	adds	r7, #8
   10732:	46bd      	mov	sp, r7
   10734:	bd80      	pop	{r7, pc}
   10736:	bf00      	nop
   10738:	41008000 	.word	0x41008000
   1073c:	000104b1 	.word	0x000104b1
   10740:	00010641 	.word	0x00010641
   10744:	00010489 	.word	0x00010489
   10748:	00021cb8 	.word	0x00021cb8
   1074c:	00007e21 	.word	0x00007e21

00010750 <_gpio_set_level>:
{
   10750:	b580      	push	{r7, lr}
   10752:	b082      	sub	sp, #8
   10754:	af00      	add	r7, sp, #0
   10756:	4603      	mov	r3, r0
   10758:	6039      	str	r1, [r7, #0]
   1075a:	71fb      	strb	r3, [r7, #7]
   1075c:	4613      	mov	r3, r2
   1075e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   10760:	79bb      	ldrb	r3, [r7, #6]
   10762:	2b00      	cmp	r3, #0
   10764:	d006      	beq.n	10774 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10766:	79fb      	ldrb	r3, [r7, #7]
   10768:	683a      	ldr	r2, [r7, #0]
   1076a:	4619      	mov	r1, r3
   1076c:	4806      	ldr	r0, [pc, #24]	; (10788 <_gpio_set_level+0x38>)
   1076e:	4b07      	ldr	r3, [pc, #28]	; (1078c <_gpio_set_level+0x3c>)
   10770:	4798      	blx	r3
}
   10772:	e005      	b.n	10780 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   10774:	79fb      	ldrb	r3, [r7, #7]
   10776:	683a      	ldr	r2, [r7, #0]
   10778:	4619      	mov	r1, r3
   1077a:	4803      	ldr	r0, [pc, #12]	; (10788 <_gpio_set_level+0x38>)
   1077c:	4b04      	ldr	r3, [pc, #16]	; (10790 <_gpio_set_level+0x40>)
   1077e:	4798      	blx	r3
}
   10780:	bf00      	nop
   10782:	3708      	adds	r7, #8
   10784:	46bd      	mov	sp, r7
   10786:	bd80      	pop	{r7, pc}
   10788:	41008000 	.word	0x41008000
   1078c:	000104d9 	.word	0x000104d9
   10790:	00010501 	.word	0x00010501

00010794 <_gpio_set_pin_function>:
{
   10794:	b590      	push	{r4, r7, lr}
   10796:	b085      	sub	sp, #20
   10798:	af00      	add	r7, sp, #0
   1079a:	6078      	str	r0, [r7, #4]
   1079c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   1079e:	687b      	ldr	r3, [r7, #4]
   107a0:	095b      	lsrs	r3, r3, #5
   107a2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   107a4:	687b      	ldr	r3, [r7, #4]
   107a6:	b2db      	uxtb	r3, r3
   107a8:	f003 031f 	and.w	r3, r3, #31
   107ac:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
   107ae:	683b      	ldr	r3, [r7, #0]
   107b0:	f1b3 3fff 	cmp.w	r3, #4294967295
   107b4:	d106      	bne.n	107c4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   107b6:	7bba      	ldrb	r2, [r7, #14]
   107b8:	7bf9      	ldrb	r1, [r7, #15]
   107ba:	2300      	movs	r3, #0
   107bc:	4812      	ldr	r0, [pc, #72]	; (10808 <_gpio_set_pin_function+0x74>)
   107be:	4c13      	ldr	r4, [pc, #76]	; (1080c <_gpio_set_pin_function+0x78>)
   107c0:	47a0      	blx	r4
}
   107c2:	e01d      	b.n	10800 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   107c4:	7bba      	ldrb	r2, [r7, #14]
   107c6:	7bf9      	ldrb	r1, [r7, #15]
   107c8:	2301      	movs	r3, #1
   107ca:	480f      	ldr	r0, [pc, #60]	; (10808 <_gpio_set_pin_function+0x74>)
   107cc:	4c0f      	ldr	r4, [pc, #60]	; (1080c <_gpio_set_pin_function+0x78>)
   107ce:	47a0      	blx	r4
		if (pin & 1) {
   107d0:	7bbb      	ldrb	r3, [r7, #14]
   107d2:	f003 0301 	and.w	r3, r3, #1
   107d6:	2b00      	cmp	r3, #0
   107d8:	d009      	beq.n	107ee <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   107da:	7bbb      	ldrb	r3, [r7, #14]
   107dc:	085b      	lsrs	r3, r3, #1
   107de:	b2da      	uxtb	r2, r3
   107e0:	683b      	ldr	r3, [r7, #0]
   107e2:	b2db      	uxtb	r3, r3
   107e4:	7bf9      	ldrb	r1, [r7, #15]
   107e6:	4808      	ldr	r0, [pc, #32]	; (10808 <_gpio_set_pin_function+0x74>)
   107e8:	4c09      	ldr	r4, [pc, #36]	; (10810 <_gpio_set_pin_function+0x7c>)
   107ea:	47a0      	blx	r4
}
   107ec:	e008      	b.n	10800 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   107ee:	7bbb      	ldrb	r3, [r7, #14]
   107f0:	085b      	lsrs	r3, r3, #1
   107f2:	b2da      	uxtb	r2, r3
   107f4:	683b      	ldr	r3, [r7, #0]
   107f6:	b2db      	uxtb	r3, r3
   107f8:	7bf9      	ldrb	r1, [r7, #15]
   107fa:	4803      	ldr	r0, [pc, #12]	; (10808 <_gpio_set_pin_function+0x74>)
   107fc:	4c05      	ldr	r4, [pc, #20]	; (10814 <_gpio_set_pin_function+0x80>)
   107fe:	47a0      	blx	r4
}
   10800:	bf00      	nop
   10802:	3714      	adds	r7, #20
   10804:	46bd      	mov	sp, r7
   10806:	bd90      	pop	{r4, r7, pc}
   10808:	41008000 	.word	0x41008000
   1080c:	000105e7 	.word	0x000105e7
   10810:	00010589 	.word	0x00010589
   10814:	00010529 	.word	0x00010529

00010818 <gpio_set_pin_function>:
{
   10818:	b580      	push	{r7, lr}
   1081a:	b082      	sub	sp, #8
   1081c:	af00      	add	r7, sp, #0
   1081e:	6078      	str	r0, [r7, #4]
   10820:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   10822:	6839      	ldr	r1, [r7, #0]
   10824:	6878      	ldr	r0, [r7, #4]
   10826:	4b03      	ldr	r3, [pc, #12]	; (10834 <gpio_set_pin_function+0x1c>)
   10828:	4798      	blx	r3
}
   1082a:	bf00      	nop
   1082c:	3708      	adds	r7, #8
   1082e:	46bd      	mov	sp, r7
   10830:	bd80      	pop	{r7, pc}
   10832:	bf00      	nop
   10834:	00010795 	.word	0x00010795

00010838 <gpio_set_pin_direction>:
{
   10838:	b580      	push	{r7, lr}
   1083a:	b082      	sub	sp, #8
   1083c:	af00      	add	r7, sp, #0
   1083e:	4603      	mov	r3, r0
   10840:	460a      	mov	r2, r1
   10842:	71fb      	strb	r3, [r7, #7]
   10844:	4613      	mov	r3, r2
   10846:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   10848:	79fb      	ldrb	r3, [r7, #7]
   1084a:	095b      	lsrs	r3, r3, #5
   1084c:	b2d8      	uxtb	r0, r3
   1084e:	79fb      	ldrb	r3, [r7, #7]
   10850:	f003 031f 	and.w	r3, r3, #31
   10854:	2201      	movs	r2, #1
   10856:	fa02 f303 	lsl.w	r3, r2, r3
   1085a:	79ba      	ldrb	r2, [r7, #6]
   1085c:	4619      	mov	r1, r3
   1085e:	4b03      	ldr	r3, [pc, #12]	; (1086c <gpio_set_pin_direction+0x34>)
   10860:	4798      	blx	r3
}
   10862:	bf00      	nop
   10864:	3708      	adds	r7, #8
   10866:	46bd      	mov	sp, r7
   10868:	bd80      	pop	{r7, pc}
   1086a:	bf00      	nop
   1086c:	00010669 	.word	0x00010669

00010870 <gpio_set_pin_level>:
{
   10870:	b580      	push	{r7, lr}
   10872:	b082      	sub	sp, #8
   10874:	af00      	add	r7, sp, #0
   10876:	4603      	mov	r3, r0
   10878:	460a      	mov	r2, r1
   1087a:	71fb      	strb	r3, [r7, #7]
   1087c:	4613      	mov	r3, r2
   1087e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   10880:	79fb      	ldrb	r3, [r7, #7]
   10882:	095b      	lsrs	r3, r3, #5
   10884:	b2d8      	uxtb	r0, r3
   10886:	79fb      	ldrb	r3, [r7, #7]
   10888:	f003 031f 	and.w	r3, r3, #31
   1088c:	2201      	movs	r2, #1
   1088e:	fa02 f303 	lsl.w	r3, r2, r3
   10892:	79ba      	ldrb	r2, [r7, #6]
   10894:	4619      	mov	r1, r3
   10896:	4b03      	ldr	r3, [pc, #12]	; (108a4 <gpio_set_pin_level+0x34>)
   10898:	4798      	blx	r3
}
   1089a:	bf00      	nop
   1089c:	3708      	adds	r7, #8
   1089e:	46bd      	mov	sp, r7
   108a0:	bd80      	pop	{r7, pc}
   108a2:	bf00      	nop
   108a4:	00010751 	.word	0x00010751

000108a8 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
   108a8:	b580      	push	{r7, lr}
   108aa:	b082      	sub	sp, #8
   108ac:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   108ae:	2100      	movs	r1, #0
   108b0:	2008      	movs	r0, #8
   108b2:	4b24      	ldr	r3, [pc, #144]	; (10944 <QSPI_N25Q256_exit_xip+0x9c>)
   108b4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   108b6:	2100      	movs	r1, #0
   108b8:	202b      	movs	r0, #43	; 0x2b
   108ba:	4b22      	ldr	r3, [pc, #136]	; (10944 <QSPI_N25Q256_exit_xip+0x9c>)
   108bc:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   108be:	2100      	movs	r1, #0
   108c0:	202a      	movs	r0, #42	; 0x2a
   108c2:	4b20      	ldr	r3, [pc, #128]	; (10944 <QSPI_N25Q256_exit_xip+0x9c>)
   108c4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   108c6:	2102      	movs	r1, #2
   108c8:	2008      	movs	r0, #8
   108ca:	4b1f      	ldr	r3, [pc, #124]	; (10948 <QSPI_N25Q256_exit_xip+0xa0>)
   108cc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   108ce:	2102      	movs	r1, #2
   108d0:	202b      	movs	r0, #43	; 0x2b
   108d2:	4b1d      	ldr	r3, [pc, #116]	; (10948 <QSPI_N25Q256_exit_xip+0xa0>)
   108d4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   108d6:	2102      	movs	r1, #2
   108d8:	202a      	movs	r0, #42	; 0x2a
   108da:	4b1b      	ldr	r3, [pc, #108]	; (10948 <QSPI_N25Q256_exit_xip+0xa0>)
   108dc:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   108de:	2101      	movs	r1, #1
   108e0:	2008      	movs	r0, #8
   108e2:	4b1a      	ldr	r3, [pc, #104]	; (1094c <QSPI_N25Q256_exit_xip+0xa4>)
   108e4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   108e6:	2100      	movs	r1, #0
   108e8:	202b      	movs	r0, #43	; 0x2b
   108ea:	4b18      	ldr	r3, [pc, #96]	; (1094c <QSPI_N25Q256_exit_xip+0xa4>)
   108ec:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   108ee:	2100      	movs	r1, #0
   108f0:	202a      	movs	r0, #42	; 0x2a
   108f2:	4b16      	ldr	r3, [pc, #88]	; (1094c <QSPI_N25Q256_exit_xip+0xa4>)
   108f4:	4798      	blx	r3

	delay_us(1);
   108f6:	2001      	movs	r0, #1
   108f8:	4b15      	ldr	r3, [pc, #84]	; (10950 <QSPI_N25Q256_exit_xip+0xa8>)
   108fa:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   108fc:	2300      	movs	r3, #0
   108fe:	607b      	str	r3, [r7, #4]
   10900:	e010      	b.n	10924 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
   10902:	2101      	movs	r1, #1
   10904:	202a      	movs	r0, #42	; 0x2a
   10906:	4b11      	ldr	r3, [pc, #68]	; (1094c <QSPI_N25Q256_exit_xip+0xa4>)
   10908:	4798      	blx	r3
		delay_us(1);
   1090a:	2001      	movs	r0, #1
   1090c:	4b10      	ldr	r3, [pc, #64]	; (10950 <QSPI_N25Q256_exit_xip+0xa8>)
   1090e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   10910:	2100      	movs	r1, #0
   10912:	202a      	movs	r0, #42	; 0x2a
   10914:	4b0d      	ldr	r3, [pc, #52]	; (1094c <QSPI_N25Q256_exit_xip+0xa4>)
   10916:	4798      	blx	r3
		delay_us(1);
   10918:	2001      	movs	r0, #1
   1091a:	4b0d      	ldr	r3, [pc, #52]	; (10950 <QSPI_N25Q256_exit_xip+0xa8>)
   1091c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   1091e:	687b      	ldr	r3, [r7, #4]
   10920:	3301      	adds	r3, #1
   10922:	607b      	str	r3, [r7, #4]
   10924:	687b      	ldr	r3, [r7, #4]
   10926:	2b06      	cmp	r3, #6
   10928:	ddeb      	ble.n	10902 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
   1092a:	2101      	movs	r1, #1
   1092c:	202b      	movs	r0, #43	; 0x2b
   1092e:	4b07      	ldr	r3, [pc, #28]	; (1094c <QSPI_N25Q256_exit_xip+0xa4>)
   10930:	4798      	blx	r3
	delay_us(1);
   10932:	2001      	movs	r0, #1
   10934:	4b06      	ldr	r3, [pc, #24]	; (10950 <QSPI_N25Q256_exit_xip+0xa8>)
   10936:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   10938:	4b06      	ldr	r3, [pc, #24]	; (10954 <QSPI_N25Q256_exit_xip+0xac>)
   1093a:	4798      	blx	r3
}
   1093c:	bf00      	nop
   1093e:	3708      	adds	r7, #8
   10940:	46bd      	mov	sp, r7
   10942:	bd80      	pop	{r7, pc}
   10944:	00010819 	.word	0x00010819
   10948:	00010839 	.word	0x00010839
   1094c:	00010871 	.word	0x00010871
   10950:	0000647d 	.word	0x0000647d
   10954:	0000521d 	.word	0x0000521d

00010958 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
   10958:	b598      	push	{r3, r4, r7, lr}
   1095a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
   1095c:	4806      	ldr	r0, [pc, #24]	; (10978 <spi_nor_flash_init+0x20>)
   1095e:	4b07      	ldr	r3, [pc, #28]	; (1097c <spi_nor_flash_init+0x24>)
   10960:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
   10962:	2300      	movs	r3, #0
   10964:	4a06      	ldr	r2, [pc, #24]	; (10980 <spi_nor_flash_init+0x28>)
   10966:	4904      	ldr	r1, [pc, #16]	; (10978 <spi_nor_flash_init+0x20>)
   10968:	4806      	ldr	r0, [pc, #24]	; (10984 <spi_nor_flash_init+0x2c>)
   1096a:	4c07      	ldr	r4, [pc, #28]	; (10988 <spi_nor_flash_init+0x30>)
   1096c:	47a0      	blx	r4
   1096e:	4602      	mov	r2, r0
   10970:	4b06      	ldr	r3, [pc, #24]	; (1098c <spi_nor_flash_init+0x34>)
   10972:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
   10974:	bf00      	nop
   10976:	bd98      	pop	{r3, r4, r7, pc}
   10978:	2000a5ec 	.word	0x2000a5ec
   1097c:	00006cc9 	.word	0x00006cc9
   10980:	000108a9 	.word	0x000108a9
   10984:	20008aec 	.word	0x20008aec
   10988:	00010dc5 	.word	0x00010dc5
   1098c:	2000a80c 	.word	0x2000a80c

00010990 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
   10990:	b580      	push	{r7, lr}
   10992:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
   10994:	4805      	ldr	r0, [pc, #20]	; (109ac <cdc_device_acm_init+0x1c>)
   10996:	4b06      	ldr	r3, [pc, #24]	; (109b0 <cdc_device_acm_init+0x20>)
   10998:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
   1099a:	4b06      	ldr	r3, [pc, #24]	; (109b4 <cdc_device_acm_init+0x24>)
   1099c:	4798      	blx	r3

	usbdc_start(single_desc);
   1099e:	4806      	ldr	r0, [pc, #24]	; (109b8 <cdc_device_acm_init+0x28>)
   109a0:	4b06      	ldr	r3, [pc, #24]	; (109bc <cdc_device_acm_init+0x2c>)
   109a2:	4798      	blx	r3
	usbdc_attach();
   109a4:	4b06      	ldr	r3, [pc, #24]	; (109c0 <cdc_device_acm_init+0x30>)
   109a6:	4798      	blx	r3
}
   109a8:	bf00      	nop
   109aa:	bd80      	pop	{r7, pc}
   109ac:	20008b3c 	.word	0x20008b3c
   109b0:	000124ed 	.word	0x000124ed
   109b4:	00011765 	.word	0x00011765
   109b8:	20000234 	.word	0x20000234
   109bc:	00012589 	.word	0x00012589
   109c0:	000125d9 	.word	0x000125d9

000109c4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
   109c4:	b580      	push	{r7, lr}
   109c6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
   109c8:	4b01      	ldr	r3, [pc, #4]	; (109d0 <usb_init+0xc>)
   109ca:	4798      	blx	r3
}
   109cc:	bf00      	nop
   109ce:	bd80      	pop	{r7, pc}
   109d0:	00010991 	.word	0x00010991

000109d4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
   109d4:	b480      	push	{r7}
   109d6:	b085      	sub	sp, #20
   109d8:	af00      	add	r7, sp, #0
   109da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   109dc:	f3ef 8310 	mrs	r3, PRIMASK
   109e0:	60fb      	str	r3, [r7, #12]
  return(result);
   109e2:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
   109e4:	687b      	ldr	r3, [r7, #4]
   109e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   109e8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   109ea:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
   109ee:	bf00      	nop
   109f0:	3714      	adds	r7, #20
   109f2:	46bd      	mov	sp, r7
   109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   109f8:	4770      	bx	lr

000109fa <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
   109fa:	b480      	push	{r7}
   109fc:	b085      	sub	sp, #20
   109fe:	af00      	add	r7, sp, #0
   10a00:	6078      	str	r0, [r7, #4]
   10a02:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
   10a06:	687b      	ldr	r3, [r7, #4]
   10a08:	681b      	ldr	r3, [r3, #0]
   10a0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   10a0c:	68fb      	ldr	r3, [r7, #12]
   10a0e:	f383 8810 	msr	PRIMASK, r3
}
   10a12:	bf00      	nop
   10a14:	3714      	adds	r7, #20
   10a16:	46bd      	mov	sp, r7
   10a18:	f85d 7b04 	ldr.w	r7, [sp], #4
   10a1c:	4770      	bx	lr
	...

00010a20 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
   10a20:	b580      	push	{r7, lr}
   10a22:	b08c      	sub	sp, #48	; 0x30
   10a24:	af00      	add	r7, sp, #0
   10a26:	6078      	str	r0, [r7, #4]
   10a28:	460b      	mov	r3, r1
   10a2a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10a2c:	687b      	ldr	r3, [r7, #4]
   10a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10a30:	687b      	ldr	r3, [r7, #4]
   10a32:	681b      	ldr	r3, [r3, #0]
   10a34:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
   10a36:	f107 030c 	add.w	r3, r7, #12
   10a3a:	2200      	movs	r2, #0
   10a3c:	601a      	str	r2, [r3, #0]
   10a3e:	605a      	str	r2, [r3, #4]
   10a40:	609a      	str	r2, [r3, #8]
   10a42:	60da      	str	r2, [r3, #12]
   10a44:	611a      	str	r2, [r3, #16]
   10a46:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   10a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a4a:	7b1b      	ldrb	r3, [r3, #12]
   10a4c:	2b00      	cmp	r3, #0
   10a4e:	d001      	beq.n	10a54 <n25q256a_xip_confirm+0x34>
   10a50:	2206      	movs	r2, #6
   10a52:	e000      	b.n	10a56 <n25q256a_xip_confirm+0x36>
   10a54:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   10a56:	7b3b      	ldrb	r3, [r7, #12]
   10a58:	f362 0302 	bfi	r3, r2, #0, #3
   10a5c:	733b      	strb	r3, [r7, #12]
   10a5e:	7b3b      	ldrb	r3, [r7, #12]
   10a60:	f043 0310 	orr.w	r3, r3, #16
   10a64:	733b      	strb	r3, [r7, #12]
   10a66:	7b3b      	ldrb	r3, [r7, #12]
   10a68:	f043 0320 	orr.w	r3, r3, #32
   10a6c:	733b      	strb	r3, [r7, #12]
   10a6e:	7b3b      	ldrb	r3, [r7, #12]
   10a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10a74:	733b      	strb	r3, [r7, #12]
   10a76:	7b3b      	ldrb	r3, [r7, #12]
   10a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10a7c:	733b      	strb	r3, [r7, #12]
   10a7e:	7b7b      	ldrb	r3, [r7, #13]
   10a80:	f043 0303 	orr.w	r3, r3, #3
   10a84:	737b      	strb	r3, [r7, #13]
   10a86:	7b7b      	ldrb	r3, [r7, #13]
   10a88:	2201      	movs	r2, #1
   10a8a:	f362 1305 	bfi	r3, r2, #4, #2
   10a8e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
   10a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a92:	7b1b      	ldrb	r3, [r3, #12]
   10a94:	2b00      	cmp	r3, #0
   10a96:	d001      	beq.n	10a9c <n25q256a_xip_confirm+0x7c>
   10a98:	2208      	movs	r2, #8
   10a9a:	e000      	b.n	10a9e <n25q256a_xip_confirm+0x7e>
   10a9c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   10a9e:	7bbb      	ldrb	r3, [r7, #14]
   10aa0:	f362 0304 	bfi	r3, r2, #0, #5
   10aa4:	73bb      	strb	r3, [r7, #14]
   10aa6:	230b      	movs	r3, #11
   10aa8:	743b      	strb	r3, [r7, #16]
   10aaa:	78fb      	ldrb	r3, [r7, #3]
   10aac:	2b00      	cmp	r3, #0
   10aae:	d001      	beq.n	10ab4 <n25q256a_xip_confirm+0x94>
   10ab0:	2300      	movs	r3, #0
   10ab2:	e000      	b.n	10ab6 <n25q256a_xip_confirm+0x96>
   10ab4:	23ff      	movs	r3, #255	; 0xff
   10ab6:	747b      	strb	r3, [r7, #17]
   10ab8:	2301      	movs	r3, #1
   10aba:	61bb      	str	r3, [r7, #24]
   10abc:	f107 0327 	add.w	r3, r7, #39	; 0x27
   10ac0:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
   10ac2:	f107 030c 	add.w	r3, r7, #12
   10ac6:	4619      	mov	r1, r3
   10ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10aca:	4b07      	ldr	r3, [pc, #28]	; (10ae8 <n25q256a_xip_confirm+0xc8>)
   10acc:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
   10ace:	78fb      	ldrb	r3, [r7, #3]
   10ad0:	2b00      	cmp	r3, #0
   10ad2:	d001      	beq.n	10ad8 <n25q256a_xip_confirm+0xb8>
   10ad4:	2202      	movs	r2, #2
   10ad6:	e000      	b.n	10ada <n25q256a_xip_confirm+0xba>
   10ad8:	2201      	movs	r2, #1
   10ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10adc:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   10ade:	2300      	movs	r3, #0
}
   10ae0:	4618      	mov	r0, r3
   10ae2:	3730      	adds	r7, #48	; 0x30
   10ae4:	46bd      	mov	sp, r7
   10ae6:	bd80      	pop	{r7, pc}
   10ae8:	00006d41 	.word	0x00006d41

00010aec <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
   10aec:	b580      	push	{r7, lr}
   10aee:	b08c      	sub	sp, #48	; 0x30
   10af0:	af00      	add	r7, sp, #0
   10af2:	6078      	str	r0, [r7, #4]
   10af4:	460b      	mov	r3, r1
   10af6:	70fb      	strb	r3, [r7, #3]
   10af8:	4613      	mov	r3, r2
   10afa:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
   10afc:	2300      	movs	r3, #0
   10afe:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
   10b00:	687b      	ldr	r3, [r7, #4]
   10b02:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
   10b04:	687b      	ldr	r3, [r7, #4]
   10b06:	681b      	ldr	r3, [r3, #0]
   10b08:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
   10b0a:	f107 030c 	add.w	r3, r7, #12
   10b0e:	2200      	movs	r2, #0
   10b10:	601a      	str	r2, [r3, #0]
   10b12:	605a      	str	r2, [r3, #4]
   10b14:	609a      	str	r2, [r3, #8]
   10b16:	60da      	str	r2, [r3, #12]
   10b18:	611a      	str	r2, [r3, #16]
   10b1a:	615a      	str	r2, [r3, #20]
   10b1c:	78fb      	ldrb	r3, [r7, #3]
   10b1e:	f003 0307 	and.w	r3, r3, #7
   10b22:	b2da      	uxtb	r2, r3
   10b24:	7b3b      	ldrb	r3, [r7, #12]
   10b26:	f362 0302 	bfi	r3, r2, #0, #3
   10b2a:	733b      	strb	r3, [r7, #12]
   10b2c:	7b3b      	ldrb	r3, [r7, #12]
   10b2e:	f043 0310 	orr.w	r3, r3, #16
   10b32:	733b      	strb	r3, [r7, #12]
   10b34:	7b3b      	ldrb	r3, [r7, #12]
   10b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10b3a:	733b      	strb	r3, [r7, #12]
   10b3c:	78bb      	ldrb	r3, [r7, #2]
   10b3e:	743b      	strb	r3, [r7, #16]
   10b40:	2301      	movs	r3, #1
   10b42:	61bb      	str	r3, [r7, #24]
   10b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
   10b48:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
   10b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b4c:	7b5b      	ldrb	r3, [r3, #13]
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d003      	beq.n	10b5a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
   10b52:	2100      	movs	r1, #0
   10b54:	6878      	ldr	r0, [r7, #4]
   10b56:	4b0a      	ldr	r3, [pc, #40]	; (10b80 <n25q256a_read_reg+0x94>)
   10b58:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   10b5a:	f107 030c 	add.w	r3, r7, #12
   10b5e:	4619      	mov	r1, r3
   10b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10b62:	4b08      	ldr	r3, [pc, #32]	; (10b84 <n25q256a_read_reg+0x98>)
   10b64:	4798      	blx	r3
	if (n25q->xip_mode) {
   10b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b68:	7b5b      	ldrb	r3, [r3, #13]
   10b6a:	2b00      	cmp	r3, #0
   10b6c:	d003      	beq.n	10b76 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
   10b6e:	2101      	movs	r1, #1
   10b70:	6878      	ldr	r0, [r7, #4]
   10b72:	4b03      	ldr	r3, [pc, #12]	; (10b80 <n25q256a_read_reg+0x94>)
   10b74:	4798      	blx	r3
	}
	return status;
   10b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   10b78:	4618      	mov	r0, r3
   10b7a:	3730      	adds	r7, #48	; 0x30
   10b7c:	46bd      	mov	sp, r7
   10b7e:	bd80      	pop	{r7, pc}
   10b80:	00010a21 	.word	0x00010a21
   10b84:	00006d41 	.word	0x00006d41

00010b88 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
   10b88:	b580      	push	{r7, lr}
   10b8a:	b08c      	sub	sp, #48	; 0x30
   10b8c:	af00      	add	r7, sp, #0
   10b8e:	60f8      	str	r0, [r7, #12]
   10b90:	607b      	str	r3, [r7, #4]
   10b92:	460b      	mov	r3, r1
   10b94:	72fb      	strb	r3, [r7, #11]
   10b96:	4613      	mov	r3, r2
   10b98:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10b9a:	68fb      	ldr	r3, [r7, #12]
   10b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10b9e:	68fb      	ldr	r3, [r7, #12]
   10ba0:	681b      	ldr	r3, [r3, #0]
   10ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
   10ba4:	f107 0310 	add.w	r3, r7, #16
   10ba8:	2200      	movs	r2, #0
   10baa:	601a      	str	r2, [r3, #0]
   10bac:	605a      	str	r2, [r3, #4]
   10bae:	609a      	str	r2, [r3, #8]
   10bb0:	60da      	str	r2, [r3, #12]
   10bb2:	611a      	str	r2, [r3, #16]
   10bb4:	615a      	str	r2, [r3, #20]
   10bb6:	7afb      	ldrb	r3, [r7, #11]
   10bb8:	f003 0307 	and.w	r3, r3, #7
   10bbc:	b2da      	uxtb	r2, r3
   10bbe:	7c3b      	ldrb	r3, [r7, #16]
   10bc0:	f362 0302 	bfi	r3, r2, #0, #3
   10bc4:	743b      	strb	r3, [r7, #16]
   10bc6:	7c3b      	ldrb	r3, [r7, #16]
   10bc8:	f043 0310 	orr.w	r3, r3, #16
   10bcc:	743b      	strb	r3, [r7, #16]
   10bce:	7c3b      	ldrb	r3, [r7, #16]
   10bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10bd4:	743b      	strb	r3, [r7, #16]
   10bd6:	7c7b      	ldrb	r3, [r7, #17]
   10bd8:	2202      	movs	r2, #2
   10bda:	f362 1305 	bfi	r3, r2, #4, #2
   10bde:	747b      	strb	r3, [r7, #17]
   10be0:	7abb      	ldrb	r3, [r7, #10]
   10be2:	753b      	strb	r3, [r7, #20]
   10be4:	2301      	movs	r3, #1
   10be6:	61fb      	str	r3, [r7, #28]
   10be8:	1d3b      	adds	r3, r7, #4
   10bea:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
   10bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10bee:	7b5b      	ldrb	r3, [r3, #13]
   10bf0:	2b00      	cmp	r3, #0
   10bf2:	d003      	beq.n	10bfc <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
   10bf4:	2100      	movs	r1, #0
   10bf6:	68f8      	ldr	r0, [r7, #12]
   10bf8:	4b09      	ldr	r3, [pc, #36]	; (10c20 <n25q256a_write_reg+0x98>)
   10bfa:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   10bfc:	f107 0310 	add.w	r3, r7, #16
   10c00:	4619      	mov	r1, r3
   10c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10c04:	4b07      	ldr	r3, [pc, #28]	; (10c24 <n25q256a_write_reg+0x9c>)
   10c06:	4798      	blx	r3
	if (n25q->xip_mode) {
   10c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c0a:	7b5b      	ldrb	r3, [r3, #13]
   10c0c:	2b00      	cmp	r3, #0
   10c0e:	d003      	beq.n	10c18 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
   10c10:	2101      	movs	r1, #1
   10c12:	68f8      	ldr	r0, [r7, #12]
   10c14:	4b02      	ldr	r3, [pc, #8]	; (10c20 <n25q256a_write_reg+0x98>)
   10c16:	4798      	blx	r3
	}
}
   10c18:	bf00      	nop
   10c1a:	3730      	adds	r7, #48	; 0x30
   10c1c:	46bd      	mov	sp, r7
   10c1e:	bd80      	pop	{r7, pc}
   10c20:	00010a21 	.word	0x00010a21
   10c24:	00006d41 	.word	0x00006d41

00010c28 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
   10c28:	b580      	push	{r7, lr}
   10c2a:	b090      	sub	sp, #64	; 0x40
   10c2c:	af00      	add	r7, sp, #0
   10c2e:	6078      	str	r0, [r7, #4]
   10c30:	460b      	mov	r3, r1
   10c32:	70fb      	strb	r3, [r7, #3]
   10c34:	4613      	mov	r3, r2
   10c36:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10c38:	687b      	ldr	r3, [r7, #4]
   10c3a:	681b      	ldr	r3, [r3, #0]
   10c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
   10c3e:	78bb      	ldrb	r3, [r7, #2]
   10c40:	2b00      	cmp	r3, #0
   10c42:	d001      	beq.n	10c48 <n25q256a_write_enable+0x20>
   10c44:	2306      	movs	r3, #6
   10c46:	e000      	b.n	10c4a <n25q256a_write_enable+0x22>
   10c48:	2304      	movs	r3, #4
   10c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
   10c4e:	f107 0320 	add.w	r3, r7, #32
   10c52:	2200      	movs	r2, #0
   10c54:	601a      	str	r2, [r3, #0]
   10c56:	605a      	str	r2, [r3, #4]
   10c58:	609a      	str	r2, [r3, #8]
   10c5a:	60da      	str	r2, [r3, #12]
   10c5c:	611a      	str	r2, [r3, #16]
   10c5e:	615a      	str	r2, [r3, #20]
   10c60:	78fb      	ldrb	r3, [r7, #3]
   10c62:	f003 0307 	and.w	r3, r3, #7
   10c66:	b2da      	uxtb	r2, r3
   10c68:	f897 3020 	ldrb.w	r3, [r7, #32]
   10c6c:	f362 0302 	bfi	r3, r2, #0, #3
   10c70:	f887 3020 	strb.w	r3, [r7, #32]
   10c74:	f897 3020 	ldrb.w	r3, [r7, #32]
   10c78:	f043 0310 	orr.w	r3, r3, #16
   10c7c:	f887 3020 	strb.w	r3, [r7, #32]
   10c80:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   10c84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
   10c88:	f107 0308 	add.w	r3, r7, #8
   10c8c:	2200      	movs	r2, #0
   10c8e:	601a      	str	r2, [r3, #0]
   10c90:	605a      	str	r2, [r3, #4]
   10c92:	609a      	str	r2, [r3, #8]
   10c94:	60da      	str	r2, [r3, #12]
   10c96:	611a      	str	r2, [r3, #16]
   10c98:	615a      	str	r2, [r3, #20]
   10c9a:	78fb      	ldrb	r3, [r7, #3]
   10c9c:	f003 0307 	and.w	r3, r3, #7
   10ca0:	b2da      	uxtb	r2, r3
   10ca2:	7a3b      	ldrb	r3, [r7, #8]
   10ca4:	f362 0302 	bfi	r3, r2, #0, #3
   10ca8:	723b      	strb	r3, [r7, #8]
   10caa:	7a3b      	ldrb	r3, [r7, #8]
   10cac:	f043 0310 	orr.w	r3, r3, #16
   10cb0:	723b      	strb	r3, [r7, #8]
   10cb2:	7a3b      	ldrb	r3, [r7, #8]
   10cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10cb8:	723b      	strb	r3, [r7, #8]
   10cba:	2305      	movs	r3, #5
   10cbc:	733b      	strb	r3, [r7, #12]
   10cbe:	2301      	movs	r3, #1
   10cc0:	617b      	str	r3, [r7, #20]
   10cc2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   10cc6:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
   10cc8:	f107 0320 	add.w	r3, r7, #32
   10ccc:	4619      	mov	r1, r3
   10cce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   10cd0:	4b08      	ldr	r3, [pc, #32]	; (10cf4 <n25q256a_write_enable+0xcc>)
   10cd2:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
   10cd4:	f107 0308 	add.w	r3, r7, #8
   10cd8:	4619      	mov	r1, r3
   10cda:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   10cdc:	4b05      	ldr	r3, [pc, #20]	; (10cf4 <n25q256a_write_enable+0xcc>)
   10cde:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
   10ce0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   10ce4:	f003 0302 	and.w	r3, r3, #2
   10ce8:	2b00      	cmp	r3, #0
   10cea:	d0ed      	beq.n	10cc8 <n25q256a_write_enable+0xa0>
}
   10cec:	bf00      	nop
   10cee:	3740      	adds	r7, #64	; 0x40
   10cf0:	46bd      	mov	sp, r7
   10cf2:	bd80      	pop	{r7, pc}
   10cf4:	00006d41 	.word	0x00006d41

00010cf8 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
   10cf8:	b590      	push	{r4, r7, lr}
   10cfa:	b087      	sub	sp, #28
   10cfc:	af00      	add	r7, sp, #0
   10cfe:	6078      	str	r0, [r7, #4]
   10d00:	460b      	mov	r3, r1
   10d02:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
   10d04:	687b      	ldr	r3, [r7, #4]
   10d06:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10d08:	68fb      	ldr	r3, [r7, #12]
   10d0a:	7b1b      	ldrb	r3, [r3, #12]
   10d0c:	2b00      	cmp	r3, #0
   10d0e:	d001      	beq.n	10d14 <n25q256a_switch_mode+0x1c>
   10d10:	2306      	movs	r3, #6
   10d12:	e000      	b.n	10d16 <n25q256a_switch_mode+0x1e>
   10d14:	2300      	movs	r3, #0
   10d16:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   10d18:	7afb      	ldrb	r3, [r7, #11]
   10d1a:	2265      	movs	r2, #101	; 0x65
   10d1c:	4619      	mov	r1, r3
   10d1e:	6878      	ldr	r0, [r7, #4]
   10d20:	4b25      	ldr	r3, [pc, #148]	; (10db8 <n25q256a_switch_mode+0xc0>)
   10d22:	4798      	blx	r3
   10d24:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
   10d26:	2300      	movs	r3, #0
   10d28:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
   10d2a:	68fb      	ldr	r3, [r7, #12]
   10d2c:	7b1b      	ldrb	r3, [r3, #12]
   10d2e:	78fa      	ldrb	r2, [r7, #3]
   10d30:	429a      	cmp	r2, r3
   10d32:	d03d      	beq.n	10db0 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
   10d34:	78fb      	ldrb	r3, [r7, #3]
   10d36:	2b00      	cmp	r3, #0
   10d38:	d00b      	beq.n	10d52 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
   10d3a:	697b      	ldr	r3, [r7, #20]
   10d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10d40:	2b00      	cmp	r3, #0
   10d42:	d011      	beq.n	10d68 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
   10d44:	697b      	ldr	r3, [r7, #20]
   10d46:	f003 031f 	and.w	r3, r3, #31
   10d4a:	617b      	str	r3, [r7, #20]
			modify = 1;
   10d4c:	2301      	movs	r3, #1
   10d4e:	74fb      	strb	r3, [r7, #19]
   10d50:	e00a      	b.n	10d68 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
   10d52:	697b      	ldr	r3, [r7, #20]
   10d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10d58:	2b00      	cmp	r3, #0
   10d5a:	d105      	bne.n	10d68 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
   10d5c:	697b      	ldr	r3, [r7, #20]
   10d5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   10d62:	617b      	str	r3, [r7, #20]
			modify = 1;
   10d64:	2301      	movs	r3, #1
   10d66:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
   10d68:	7cfb      	ldrb	r3, [r7, #19]
   10d6a:	2b00      	cmp	r3, #0
   10d6c:	d021      	beq.n	10db2 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
   10d6e:	68fb      	ldr	r3, [r7, #12]
   10d70:	78fa      	ldrb	r2, [r7, #3]
   10d72:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
   10d74:	7afb      	ldrb	r3, [r7, #11]
   10d76:	2201      	movs	r2, #1
   10d78:	4619      	mov	r1, r3
   10d7a:	6878      	ldr	r0, [r7, #4]
   10d7c:	4b0f      	ldr	r3, [pc, #60]	; (10dbc <n25q256a_switch_mode+0xc4>)
   10d7e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
   10d80:	7af9      	ldrb	r1, [r7, #11]
   10d82:	697b      	ldr	r3, [r7, #20]
   10d84:	2261      	movs	r2, #97	; 0x61
   10d86:	6878      	ldr	r0, [r7, #4]
   10d88:	4c0d      	ldr	r4, [pc, #52]	; (10dc0 <n25q256a_switch_mode+0xc8>)
   10d8a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10d8c:	78fb      	ldrb	r3, [r7, #3]
   10d8e:	2b00      	cmp	r3, #0
   10d90:	d001      	beq.n	10d96 <n25q256a_switch_mode+0x9e>
   10d92:	2306      	movs	r3, #6
   10d94:	e000      	b.n	10d98 <n25q256a_switch_mode+0xa0>
   10d96:	2300      	movs	r3, #0
   10d98:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   10d9a:	7afb      	ldrb	r3, [r7, #11]
   10d9c:	2265      	movs	r2, #101	; 0x65
   10d9e:	4619      	mov	r1, r3
   10da0:	6878      	ldr	r0, [r7, #4]
   10da2:	4b05      	ldr	r3, [pc, #20]	; (10db8 <n25q256a_switch_mode+0xc0>)
   10da4:	4798      	blx	r3
   10da6:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
   10da8:	68fb      	ldr	r3, [r7, #12]
   10daa:	78fa      	ldrb	r2, [r7, #3]
   10dac:	731a      	strb	r2, [r3, #12]
   10dae:	e000      	b.n	10db2 <n25q256a_switch_mode+0xba>
		return;
   10db0:	bf00      	nop
	}
}
   10db2:	371c      	adds	r7, #28
   10db4:	46bd      	mov	sp, r7
   10db6:	bd90      	pop	{r4, r7, pc}
   10db8:	00010aed 	.word	0x00010aed
   10dbc:	00010c29 	.word	0x00010c29
   10dc0:	00010b89 	.word	0x00010b89

00010dc4 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
   10dc4:	b580      	push	{r7, lr}
   10dc6:	b086      	sub	sp, #24
   10dc8:	af00      	add	r7, sp, #0
   10dca:	60f8      	str	r0, [r7, #12]
   10dcc:	60b9      	str	r1, [r7, #8]
   10dce:	607a      	str	r2, [r7, #4]
   10dd0:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
   10dd2:	68fb      	ldr	r3, [r7, #12]
   10dd4:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
   10dd6:	4a0c      	ldr	r2, [pc, #48]	; (10e08 <n25q256a_construct+0x44>)
   10dd8:	68b9      	ldr	r1, [r7, #8]
   10dda:	68f8      	ldr	r0, [r7, #12]
   10ddc:	4b0b      	ldr	r3, [pc, #44]	; (10e0c <n25q256a_construct+0x48>)
   10dde:	4798      	blx	r3
	n25q->quad_mode    = 0;
   10de0:	697b      	ldr	r3, [r7, #20]
   10de2:	2200      	movs	r2, #0
   10de4:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
   10de6:	697b      	ldr	r3, [r7, #20]
   10de8:	2200      	movs	r2, #0
   10dea:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
   10dec:	697b      	ldr	r3, [r7, #20]
   10dee:	687a      	ldr	r2, [r7, #4]
   10df0:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
   10df2:	78fb      	ldrb	r3, [r7, #3]
   10df4:	4619      	mov	r1, r3
   10df6:	68f8      	ldr	r0, [r7, #12]
   10df8:	4b05      	ldr	r3, [pc, #20]	; (10e10 <n25q256a_construct+0x4c>)
   10dfa:	4798      	blx	r3
	return me;
   10dfc:	68fb      	ldr	r3, [r7, #12]
}
   10dfe:	4618      	mov	r0, r3
   10e00:	3718      	adds	r7, #24
   10e02:	46bd      	mov	sp, r7
   10e04:	bd80      	pop	{r7, pc}
   10e06:	bf00      	nop
   10e08:	00021cd4 	.word	0x00021cd4
   10e0c:	000112a1 	.word	0x000112a1
   10e10:	00010cf9 	.word	0x00010cf9

00010e14 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   10e14:	b580      	push	{r7, lr}
   10e16:	b08c      	sub	sp, #48	; 0x30
   10e18:	af00      	add	r7, sp, #0
   10e1a:	60f8      	str	r0, [r7, #12]
   10e1c:	60b9      	str	r1, [r7, #8]
   10e1e:	607a      	str	r2, [r7, #4]
   10e20:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10e22:	68fb      	ldr	r3, [r7, #12]
   10e24:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10e26:	68fb      	ldr	r3, [r7, #12]
   10e28:	681b      	ldr	r3, [r3, #0]
   10e2a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
   10e2c:	f107 0310 	add.w	r3, r7, #16
   10e30:	2200      	movs	r2, #0
   10e32:	601a      	str	r2, [r3, #0]
   10e34:	605a      	str	r2, [r3, #4]
   10e36:	609a      	str	r2, [r3, #8]
   10e38:	60da      	str	r2, [r3, #12]
   10e3a:	611a      	str	r2, [r3, #16]
   10e3c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   10e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e40:	7b1b      	ldrb	r3, [r3, #12]
   10e42:	2b00      	cmp	r3, #0
   10e44:	d001      	beq.n	10e4a <n25q256a_read+0x36>
   10e46:	2206      	movs	r2, #6
   10e48:	e000      	b.n	10e4c <n25q256a_read+0x38>
   10e4a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
   10e4c:	7c3b      	ldrb	r3, [r7, #16]
   10e4e:	f362 0302 	bfi	r3, r2, #0, #3
   10e52:	743b      	strb	r3, [r7, #16]
   10e54:	7c3b      	ldrb	r3, [r7, #16]
   10e56:	f043 0310 	orr.w	r3, r3, #16
   10e5a:	743b      	strb	r3, [r7, #16]
   10e5c:	7c3b      	ldrb	r3, [r7, #16]
   10e5e:	f043 0320 	orr.w	r3, r3, #32
   10e62:	743b      	strb	r3, [r7, #16]
   10e64:	7c3b      	ldrb	r3, [r7, #16]
   10e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10e6a:	743b      	strb	r3, [r7, #16]
   10e6c:	7c7b      	ldrb	r3, [r7, #17]
   10e6e:	2201      	movs	r2, #1
   10e70:	f362 1305 	bfi	r3, r2, #4, #2
   10e74:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
   10e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e78:	7b1b      	ldrb	r3, [r3, #12]
   10e7a:	2b00      	cmp	r3, #0
   10e7c:	d001      	beq.n	10e82 <n25q256a_read+0x6e>
   10e7e:	220a      	movs	r2, #10
   10e80:	e000      	b.n	10e84 <n25q256a_read+0x70>
   10e82:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
   10e84:	7cbb      	ldrb	r3, [r7, #18]
   10e86:	f362 0304 	bfi	r3, r2, #0, #5
   10e8a:	74bb      	strb	r3, [r7, #18]
   10e8c:	230b      	movs	r3, #11
   10e8e:	753b      	strb	r3, [r7, #20]
   10e90:	687b      	ldr	r3, [r7, #4]
   10e92:	61bb      	str	r3, [r7, #24]
   10e94:	683b      	ldr	r3, [r7, #0]
   10e96:	61fb      	str	r3, [r7, #28]
   10e98:	68bb      	ldr	r3, [r7, #8]
   10e9a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
   10e9c:	f107 0310 	add.w	r3, r7, #16
   10ea0:	4619      	mov	r1, r3
   10ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10ea4:	4b03      	ldr	r3, [pc, #12]	; (10eb4 <n25q256a_read+0xa0>)
   10ea6:	4798      	blx	r3
	return ERR_NONE;
   10ea8:	2300      	movs	r3, #0
}
   10eaa:	4618      	mov	r0, r3
   10eac:	3730      	adds	r7, #48	; 0x30
   10eae:	46bd      	mov	sp, r7
   10eb0:	bd80      	pop	{r7, pc}
   10eb2:	bf00      	nop
   10eb4:	00006d41 	.word	0x00006d41

00010eb8 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   10eb8:	b580      	push	{r7, lr}
   10eba:	b08c      	sub	sp, #48	; 0x30
   10ebc:	af00      	add	r7, sp, #0
   10ebe:	60f8      	str	r0, [r7, #12]
   10ec0:	60b9      	str	r1, [r7, #8]
   10ec2:	607a      	str	r2, [r7, #4]
   10ec4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10ec6:	68fb      	ldr	r3, [r7, #12]
   10ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10eca:	68fb      	ldr	r3, [r7, #12]
   10ecc:	681b      	ldr	r3, [r3, #0]
   10ece:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
   10ed0:	f107 0310 	add.w	r3, r7, #16
   10ed4:	2200      	movs	r2, #0
   10ed6:	601a      	str	r2, [r3, #0]
   10ed8:	605a      	str	r2, [r3, #4]
   10eda:	609a      	str	r2, [r3, #8]
   10edc:	60da      	str	r2, [r3, #12]
   10ede:	611a      	str	r2, [r3, #16]
   10ee0:	615a      	str	r2, [r3, #20]
   10ee2:	7c3b      	ldrb	r3, [r7, #16]
   10ee4:	f043 0310 	orr.w	r3, r3, #16
   10ee8:	743b      	strb	r3, [r7, #16]
   10eea:	7c3b      	ldrb	r3, [r7, #16]
   10eec:	f043 0320 	orr.w	r3, r3, #32
   10ef0:	743b      	strb	r3, [r7, #16]
   10ef2:	7c3b      	ldrb	r3, [r7, #16]
   10ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10ef8:	743b      	strb	r3, [r7, #16]
   10efa:	7c7b      	ldrb	r3, [r7, #17]
   10efc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   10f00:	747b      	strb	r3, [r7, #17]
   10f02:	2302      	movs	r3, #2
   10f04:	753b      	strb	r3, [r7, #20]
   10f06:	687b      	ldr	r3, [r7, #4]
   10f08:	61bb      	str	r3, [r7, #24]
   10f0a:	683b      	ldr	r3, [r7, #0]
   10f0c:	61fb      	str	r3, [r7, #28]
   10f0e:	68bb      	ldr	r3, [r7, #8]
   10f10:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f14:	7b1b      	ldrb	r3, [r3, #12]
   10f16:	2b00      	cmp	r3, #0
   10f18:	d001      	beq.n	10f1e <n25q256a_write+0x66>
   10f1a:	2206      	movs	r2, #6
   10f1c:	e000      	b.n	10f20 <n25q256a_write+0x68>
   10f1e:	2200      	movs	r2, #0
   10f20:	7c3b      	ldrb	r3, [r7, #16]
   10f22:	f362 0302 	bfi	r3, r2, #0, #3
   10f26:	743b      	strb	r3, [r7, #16]
	while (length) {
   10f28:	e035      	b.n	10f96 <n25q256a_write+0xde>
		cmd.address = address;
   10f2a:	687b      	ldr	r3, [r7, #4]
   10f2c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
   10f2e:	683b      	ldr	r3, [r7, #0]
   10f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   10f34:	d802      	bhi.n	10f3c <n25q256a_write+0x84>
			cmd.buf_len = length;
   10f36:	683b      	ldr	r3, [r7, #0]
   10f38:	61fb      	str	r3, [r7, #28]
   10f3a:	e002      	b.n	10f42 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
   10f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
   10f40:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   10f42:	7c3b      	ldrb	r3, [r7, #16]
   10f44:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10f48:	b2db      	uxtb	r3, r3
   10f4a:	2201      	movs	r2, #1
   10f4c:	4619      	mov	r1, r3
   10f4e:	68f8      	ldr	r0, [r7, #12]
   10f50:	4b19      	ldr	r3, [pc, #100]	; (10fb8 <n25q256a_write+0x100>)
   10f52:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
   10f54:	f107 0310 	add.w	r3, r7, #16
   10f58:	4619      	mov	r1, r3
   10f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10f5c:	4b17      	ldr	r3, [pc, #92]	; (10fbc <n25q256a_write+0x104>)
   10f5e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   10f60:	bf00      	nop
   10f62:	7c3b      	ldrb	r3, [r7, #16]
   10f64:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10f68:	b2db      	uxtb	r3, r3
   10f6a:	2270      	movs	r2, #112	; 0x70
   10f6c:	4619      	mov	r1, r3
   10f6e:	68f8      	ldr	r0, [r7, #12]
   10f70:	4b13      	ldr	r3, [pc, #76]	; (10fc0 <n25q256a_write+0x108>)
   10f72:	4798      	blx	r3
   10f74:	4603      	mov	r3, r0
   10f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10f7a:	2b00      	cmp	r3, #0
   10f7c:	d0f1      	beq.n	10f62 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
   10f7e:	6a3a      	ldr	r2, [r7, #32]
   10f80:	69fb      	ldr	r3, [r7, #28]
   10f82:	4413      	add	r3, r2
   10f84:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
   10f86:	69fb      	ldr	r3, [r7, #28]
   10f88:	683a      	ldr	r2, [r7, #0]
   10f8a:	1ad3      	subs	r3, r2, r3
   10f8c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
   10f8e:	69fb      	ldr	r3, [r7, #28]
   10f90:	687a      	ldr	r2, [r7, #4]
   10f92:	4413      	add	r3, r2
   10f94:	607b      	str	r3, [r7, #4]
	while (length) {
   10f96:	683b      	ldr	r3, [r7, #0]
   10f98:	2b00      	cmp	r3, #0
   10f9a:	d1c6      	bne.n	10f2a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
   10f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f9e:	7b5b      	ldrb	r3, [r3, #13]
   10fa0:	2b00      	cmp	r3, #0
   10fa2:	d003      	beq.n	10fac <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
   10fa4:	2101      	movs	r1, #1
   10fa6:	68f8      	ldr	r0, [r7, #12]
   10fa8:	4b06      	ldr	r3, [pc, #24]	; (10fc4 <n25q256a_write+0x10c>)
   10faa:	4798      	blx	r3
	}
	return ERR_NONE;
   10fac:	2300      	movs	r3, #0
}
   10fae:	4618      	mov	r0, r3
   10fb0:	3730      	adds	r7, #48	; 0x30
   10fb2:	46bd      	mov	sp, r7
   10fb4:	bd80      	pop	{r7, pc}
   10fb6:	bf00      	nop
   10fb8:	00010c29 	.word	0x00010c29
   10fbc:	00006d41 	.word	0x00006d41
   10fc0:	00010aed 	.word	0x00010aed
   10fc4:	00010a21 	.word	0x00010a21

00010fc8 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
   10fc8:	b580      	push	{r7, lr}
   10fca:	b090      	sub	sp, #64	; 0x40
   10fcc:	af00      	add	r7, sp, #0
   10fce:	60f8      	str	r0, [r7, #12]
   10fd0:	60b9      	str	r1, [r7, #8]
   10fd2:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10fd4:	68fb      	ldr	r3, [r7, #12]
   10fd6:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10fd8:	68fb      	ldr	r3, [r7, #12]
   10fda:	681b      	ldr	r3, [r3, #0]
   10fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
   10fde:	f107 0314 	add.w	r3, r7, #20
   10fe2:	2200      	movs	r2, #0
   10fe4:	601a      	str	r2, [r3, #0]
   10fe6:	605a      	str	r2, [r3, #4]
   10fe8:	609a      	str	r2, [r3, #8]
   10fea:	60da      	str	r2, [r3, #12]
   10fec:	611a      	str	r2, [r3, #16]
   10fee:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   10ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10ff2:	7b1b      	ldrb	r3, [r3, #12]
   10ff4:	2b00      	cmp	r3, #0
   10ff6:	d001      	beq.n	10ffc <n25q256a_erase+0x34>
   10ff8:	2206      	movs	r2, #6
   10ffa:	e000      	b.n	10ffe <n25q256a_erase+0x36>
   10ffc:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
   10ffe:	7d3b      	ldrb	r3, [r7, #20]
   11000:	f362 0302 	bfi	r3, r2, #0, #3
   11004:	753b      	strb	r3, [r7, #20]
   11006:	7d3b      	ldrb	r3, [r7, #20]
   11008:	f043 0310 	orr.w	r3, r3, #16
   1100c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
   1100e:	687b      	ldr	r3, [r7, #4]
   11010:	4a56      	ldr	r2, [pc, #344]	; (1116c <n25q256a_erase+0x1a4>)
   11012:	4293      	cmp	r3, r2
   11014:	bf94      	ite	ls
   11016:	2301      	movls	r3, #1
   11018:	2300      	movhi	r3, #0
   1101a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
   1101c:	7d3b      	ldrb	r3, [r7, #20]
   1101e:	f362 1345 	bfi	r3, r2, #5, #1
   11022:	753b      	strb	r3, [r7, #20]
   11024:	7d7b      	ldrb	r3, [r7, #21]
   11026:	2202      	movs	r2, #2
   11028:	f362 1305 	bfi	r3, r2, #4, #2
   1102c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
   1102e:	68bb      	ldr	r3, [r7, #8]
   11030:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
   11032:	687b      	ldr	r3, [r7, #4]
   11034:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
   11036:	2300      	movs	r3, #0
   11038:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
   1103a:	687b      	ldr	r3, [r7, #4]
   1103c:	f3c3 030b 	ubfx	r3, r3, #0, #12
   11040:	2b00      	cmp	r3, #0
   11042:	d104      	bne.n	1104e <n25q256a_erase+0x86>
   11044:	68bb      	ldr	r3, [r7, #8]
   11046:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1104a:	2b00      	cmp	r3, #0
   1104c:	d002      	beq.n	11054 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
   1104e:	f06f 030c 	mvn.w	r3, #12
   11052:	e087      	b.n	11164 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
   11054:	687b      	ldr	r3, [r7, #4]
   11056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   1105a:	d368      	bcc.n	1112e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
   1105c:	23c7      	movs	r3, #199	; 0xc7
   1105e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   11060:	7d3b      	ldrb	r3, [r7, #20]
   11062:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11066:	b2db      	uxtb	r3, r3
   11068:	2201      	movs	r2, #1
   1106a:	4619      	mov	r1, r3
   1106c:	68f8      	ldr	r0, [r7, #12]
   1106e:	4b40      	ldr	r3, [pc, #256]	; (11170 <n25q256a_erase+0x1a8>)
   11070:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
   11072:	f107 0314 	add.w	r3, r7, #20
   11076:	4619      	mov	r1, r3
   11078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1107a:	4b3e      	ldr	r3, [pc, #248]	; (11174 <n25q256a_erase+0x1ac>)
   1107c:	4798      	blx	r3
   1107e:	e059      	b.n	11134 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
   11080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11082:	b29b      	uxth	r3, r3
   11084:	2b00      	cmp	r3, #0
   11086:	d11f      	bne.n	110c8 <n25q256a_erase+0x100>
   11088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1108a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1108e:	d31b      	bcc.n	110c8 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
   11090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11092:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
   11094:	23d8      	movs	r3, #216	; 0xd8
   11096:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   11098:	7d3b      	ldrb	r3, [r7, #20]
   1109a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1109e:	b2db      	uxtb	r3, r3
   110a0:	2201      	movs	r2, #1
   110a2:	4619      	mov	r1, r3
   110a4:	68f8      	ldr	r0, [r7, #12]
   110a6:	4b32      	ldr	r3, [pc, #200]	; (11170 <n25q256a_erase+0x1a8>)
   110a8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   110aa:	f107 0314 	add.w	r3, r7, #20
   110ae:	4619      	mov	r1, r3
   110b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   110b2:	4b30      	ldr	r3, [pc, #192]	; (11174 <n25q256a_erase+0x1ac>)
   110b4:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
   110b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   110b8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   110bc:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
   110be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   110c0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   110c4:	63bb      	str	r3, [r7, #56]	; 0x38
   110c6:	e023      	b.n	11110 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
   110c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   110ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   110ce:	d31b      	bcc.n	11108 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
   110d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   110d2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
   110d4:	2320      	movs	r3, #32
   110d6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   110d8:	7d3b      	ldrb	r3, [r7, #20]
   110da:	f3c3 0302 	ubfx	r3, r3, #0, #3
   110de:	b2db      	uxtb	r3, r3
   110e0:	2201      	movs	r2, #1
   110e2:	4619      	mov	r1, r3
   110e4:	68f8      	ldr	r0, [r7, #12]
   110e6:	4b22      	ldr	r3, [pc, #136]	; (11170 <n25q256a_erase+0x1a8>)
   110e8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   110ea:	f107 0314 	add.w	r3, r7, #20
   110ee:	4619      	mov	r1, r3
   110f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   110f2:	4b20      	ldr	r3, [pc, #128]	; (11174 <n25q256a_erase+0x1ac>)
   110f4:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
   110f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   110f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   110fc:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
   110fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11100:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   11104:	63bb      	str	r3, [r7, #56]	; 0x38
   11106:	e003      	b.n	11110 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
   11108:	f06f 030c 	mvn.w	r3, #12
   1110c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
   1110e:	e011      	b.n	11134 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   11110:	bf00      	nop
   11112:	7d3b      	ldrb	r3, [r7, #20]
   11114:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11118:	b2db      	uxtb	r3, r3
   1111a:	2270      	movs	r2, #112	; 0x70
   1111c:	4619      	mov	r1, r3
   1111e:	68f8      	ldr	r0, [r7, #12]
   11120:	4b15      	ldr	r3, [pc, #84]	; (11178 <n25q256a_erase+0x1b0>)
   11122:	4798      	blx	r3
   11124:	4603      	mov	r3, r0
   11126:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1112a:	2b00      	cmp	r3, #0
   1112c:	d0f1      	beq.n	11112 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
   1112e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11130:	2b00      	cmp	r3, #0
   11132:	d1a5      	bne.n	11080 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   11134:	bf00      	nop
   11136:	7d3b      	ldrb	r3, [r7, #20]
   11138:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1113c:	b2db      	uxtb	r3, r3
   1113e:	2270      	movs	r2, #112	; 0x70
   11140:	4619      	mov	r1, r3
   11142:	68f8      	ldr	r0, [r7, #12]
   11144:	4b0c      	ldr	r3, [pc, #48]	; (11178 <n25q256a_erase+0x1b0>)
   11146:	4798      	blx	r3
   11148:	4603      	mov	r3, r0
   1114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1114e:	2b00      	cmp	r3, #0
   11150:	d0f1      	beq.n	11136 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
   11152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11154:	7b5b      	ldrb	r3, [r3, #13]
   11156:	2b00      	cmp	r3, #0
   11158:	d003      	beq.n	11162 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
   1115a:	2101      	movs	r1, #1
   1115c:	68f8      	ldr	r0, [r7, #12]
   1115e:	4b07      	ldr	r3, [pc, #28]	; (1117c <n25q256a_erase+0x1b4>)
   11160:	4798      	blx	r3
	}
	return rc;
   11162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   11164:	4618      	mov	r0, r3
   11166:	3740      	adds	r7, #64	; 0x40
   11168:	46bd      	mov	sp, r7
   1116a:	bd80      	pop	{r7, pc}
   1116c:	001fffff 	.word	0x001fffff
   11170:	00010c29 	.word	0x00010c29
   11174:	00006d41 	.word	0x00006d41
   11178:	00010aed 	.word	0x00010aed
   1117c:	00010a21 	.word	0x00010a21

00011180 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
   11180:	b590      	push	{r4, r7, lr}
   11182:	b085      	sub	sp, #20
   11184:	af00      	add	r7, sp, #0
   11186:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
   11188:	687b      	ldr	r3, [r7, #4]
   1118a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   1118c:	68fb      	ldr	r3, [r7, #12]
   1118e:	7b1b      	ldrb	r3, [r3, #12]
   11190:	2b00      	cmp	r3, #0
   11192:	d001      	beq.n	11198 <n25q256a_enable_xip+0x18>
   11194:	2306      	movs	r3, #6
   11196:	e000      	b.n	1119a <n25q256a_enable_xip+0x1a>
   11198:	2300      	movs	r3, #0
   1119a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
   1119c:	68fb      	ldr	r3, [r7, #12]
   1119e:	7b5b      	ldrb	r3, [r3, #13]
   111a0:	2b00      	cmp	r3, #0
   111a2:	d129      	bne.n	111f8 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   111a4:	7afb      	ldrb	r3, [r7, #11]
   111a6:	2285      	movs	r2, #133	; 0x85
   111a8:	4619      	mov	r1, r3
   111aa:	6878      	ldr	r0, [r7, #4]
   111ac:	4b15      	ldr	r3, [pc, #84]	; (11204 <n25q256a_enable_xip+0x84>)
   111ae:	4798      	blx	r3
   111b0:	4603      	mov	r3, r0
   111b2:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
   111b4:	7abb      	ldrb	r3, [r7, #10]
   111b6:	f003 0308 	and.w	r3, r3, #8
   111ba:	2b00      	cmp	r3, #0
   111bc:	d015      	beq.n	111ea <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
   111be:	7abb      	ldrb	r3, [r7, #10]
   111c0:	f023 0308 	bic.w	r3, r3, #8
   111c4:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
   111c6:	7abb      	ldrb	r3, [r7, #10]
   111c8:	7af9      	ldrb	r1, [r7, #11]
   111ca:	2281      	movs	r2, #129	; 0x81
   111cc:	6878      	ldr	r0, [r7, #4]
   111ce:	4c0e      	ldr	r4, [pc, #56]	; (11208 <n25q256a_enable_xip+0x88>)
   111d0:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   111d2:	bf00      	nop
   111d4:	7afb      	ldrb	r3, [r7, #11]
   111d6:	2270      	movs	r2, #112	; 0x70
   111d8:	4619      	mov	r1, r3
   111da:	6878      	ldr	r0, [r7, #4]
   111dc:	4b09      	ldr	r3, [pc, #36]	; (11204 <n25q256a_enable_xip+0x84>)
   111de:	4798      	blx	r3
   111e0:	4603      	mov	r3, r0
   111e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   111e6:	2b00      	cmp	r3, #0
   111e8:	d0f4      	beq.n	111d4 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
   111ea:	68fb      	ldr	r3, [r7, #12]
   111ec:	2201      	movs	r2, #1
   111ee:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
   111f0:	2101      	movs	r1, #1
   111f2:	6878      	ldr	r0, [r7, #4]
   111f4:	4b05      	ldr	r3, [pc, #20]	; (1120c <n25q256a_enable_xip+0x8c>)
   111f6:	4798      	blx	r3
	}
	return ERR_NONE;
   111f8:	2300      	movs	r3, #0
}
   111fa:	4618      	mov	r0, r3
   111fc:	3714      	adds	r7, #20
   111fe:	46bd      	mov	sp, r7
   11200:	bd90      	pop	{r4, r7, pc}
   11202:	bf00      	nop
   11204:	00010aed 	.word	0x00010aed
   11208:	00010b89 	.word	0x00010b89
   1120c:	00010a21 	.word	0x00010a21

00011210 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
   11210:	b580      	push	{r7, lr}
   11212:	b086      	sub	sp, #24
   11214:	af00      	add	r7, sp, #0
   11216:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   11218:	687b      	ldr	r3, [r7, #4]
   1121a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   1121c:	687b      	ldr	r3, [r7, #4]
   1121e:	681b      	ldr	r3, [r3, #0]
   11220:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   11222:	697b      	ldr	r3, [r7, #20]
   11224:	7b1b      	ldrb	r3, [r3, #12]
   11226:	2b00      	cmp	r3, #0
   11228:	d001      	beq.n	1122e <n25q256a_disable_xip+0x1e>
   1122a:	2306      	movs	r3, #6
   1122c:	e000      	b.n	11230 <n25q256a_disable_xip+0x20>
   1122e:	2300      	movs	r3, #0
   11230:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
   11232:	2100      	movs	r1, #0
   11234:	6878      	ldr	r0, [r7, #4]
   11236:	4b15      	ldr	r3, [pc, #84]	; (1128c <n25q256a_disable_xip+0x7c>)
   11238:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   1123a:	7bfb      	ldrb	r3, [r7, #15]
   1123c:	2285      	movs	r2, #133	; 0x85
   1123e:	4619      	mov	r1, r3
   11240:	6878      	ldr	r0, [r7, #4]
   11242:	4b13      	ldr	r3, [pc, #76]	; (11290 <n25q256a_disable_xip+0x80>)
   11244:	4798      	blx	r3
   11246:	4603      	mov	r3, r0
   11248:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
   1124a:	7bbb      	ldrb	r3, [r7, #14]
   1124c:	f003 0308 	and.w	r3, r3, #8
   11250:	2b00      	cmp	r3, #0
   11252:	d113      	bne.n	1127c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
   11254:	697b      	ldr	r3, [r7, #20]
   11256:	689b      	ldr	r3, [r3, #8]
   11258:	2b00      	cmp	r3, #0
   1125a:	d00f      	beq.n	1127c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
   1125c:	693b      	ldr	r3, [r7, #16]
   1125e:	681b      	ldr	r3, [r3, #0]
   11260:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
   11262:	6938      	ldr	r0, [r7, #16]
   11264:	4b0b      	ldr	r3, [pc, #44]	; (11294 <n25q256a_disable_xip+0x84>)
   11266:	4798      	blx	r3
			n25q->pin_exit_xip();
   11268:	697b      	ldr	r3, [r7, #20]
   1126a:	689b      	ldr	r3, [r3, #8]
   1126c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
   1126e:	68b9      	ldr	r1, [r7, #8]
   11270:	6938      	ldr	r0, [r7, #16]
   11272:	4b09      	ldr	r3, [pc, #36]	; (11298 <n25q256a_disable_xip+0x88>)
   11274:	4798      	blx	r3
			qspi_sync_enable(descr);
   11276:	6938      	ldr	r0, [r7, #16]
   11278:	4b08      	ldr	r3, [pc, #32]	; (1129c <n25q256a_disable_xip+0x8c>)
   1127a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
   1127c:	697b      	ldr	r3, [r7, #20]
   1127e:	2200      	movs	r2, #0
   11280:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   11282:	2300      	movs	r3, #0
}
   11284:	4618      	mov	r0, r3
   11286:	3718      	adds	r7, #24
   11288:	46bd      	mov	sp, r7
   1128a:	bd80      	pop	{r7, pc}
   1128c:	00010a21 	.word	0x00010a21
   11290:	00010aed 	.word	0x00010aed
   11294:	00006d05 	.word	0x00006d05
   11298:	00006c7d 	.word	0x00006c7d
   1129c:	00006cc9 	.word	0x00006cc9

000112a0 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
   112a0:	b480      	push	{r7}
   112a2:	b085      	sub	sp, #20
   112a4:	af00      	add	r7, sp, #0
   112a6:	60f8      	str	r0, [r7, #12]
   112a8:	60b9      	str	r1, [r7, #8]
   112aa:	607a      	str	r2, [r7, #4]
	me->io        = io;
   112ac:	68fb      	ldr	r3, [r7, #12]
   112ae:	68ba      	ldr	r2, [r7, #8]
   112b0:	601a      	str	r2, [r3, #0]
	me->interface = interface;
   112b2:	68fb      	ldr	r3, [r7, #12]
   112b4:	687a      	ldr	r2, [r7, #4]
   112b6:	605a      	str	r2, [r3, #4]

	return me;
   112b8:	68fb      	ldr	r3, [r7, #12]
}
   112ba:	4618      	mov	r0, r3
   112bc:	3714      	adds	r7, #20
   112be:	46bd      	mov	sp, r7
   112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   112c4:	4770      	bx	lr

000112c6 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
   112c6:	b480      	push	{r7}
   112c8:	b083      	sub	sp, #12
   112ca:	af00      	add	r7, sp, #0
   112cc:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   112ce:	687b      	ldr	r3, [r7, #4]
   112d0:	781b      	ldrb	r3, [r3, #0]
   112d2:	b29a      	uxth	r2, r3
   112d4:	687b      	ldr	r3, [r7, #4]
   112d6:	3301      	adds	r3, #1
   112d8:	781b      	ldrb	r3, [r3, #0]
   112da:	b29b      	uxth	r3, r3
   112dc:	021b      	lsls	r3, r3, #8
   112de:	b29b      	uxth	r3, r3
   112e0:	4413      	add	r3, r2
   112e2:	b29b      	uxth	r3, r3
}
   112e4:	4618      	mov	r0, r3
   112e6:	370c      	adds	r7, #12
   112e8:	46bd      	mov	sp, r7
   112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   112ee:	4770      	bx	lr

000112f0 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
   112f0:	b480      	push	{r7}
   112f2:	b083      	sub	sp, #12
   112f4:	af00      	add	r7, sp, #0
   112f6:	6078      	str	r0, [r7, #4]
	return desc[0];
   112f8:	687b      	ldr	r3, [r7, #4]
   112fa:	781b      	ldrb	r3, [r3, #0]
}
   112fc:	4618      	mov	r0, r3
   112fe:	370c      	adds	r7, #12
   11300:	46bd      	mov	sp, r7
   11302:	f85d 7b04 	ldr.w	r7, [sp], #4
   11306:	4770      	bx	lr

00011308 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
   11308:	b580      	push	{r7, lr}
   1130a:	b082      	sub	sp, #8
   1130c:	af00      	add	r7, sp, #0
   1130e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   11310:	6878      	ldr	r0, [r7, #4]
   11312:	4b05      	ldr	r3, [pc, #20]	; (11328 <usb_desc_next+0x20>)
   11314:	4798      	blx	r3
   11316:	4603      	mov	r3, r0
   11318:	461a      	mov	r2, r3
   1131a:	687b      	ldr	r3, [r7, #4]
   1131c:	4413      	add	r3, r2
}
   1131e:	4618      	mov	r0, r3
   11320:	3708      	adds	r7, #8
   11322:	46bd      	mov	sp, r7
   11324:	bd80      	pop	{r7, pc}
   11326:	bf00      	nop
   11328:	000112f1 	.word	0x000112f1

0001132c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   1132c:	b580      	push	{r7, lr}
   1132e:	b08c      	sub	sp, #48	; 0x30
   11330:	af00      	add	r7, sp, #0
   11332:	6078      	str	r0, [r7, #4]
   11334:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   11336:	687b      	ldr	r3, [r7, #4]
   11338:	689b      	ldr	r3, [r3, #8]
   1133a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
   1133c:	683b      	ldr	r3, [r7, #0]
   1133e:	681b      	ldr	r3, [r3, #0]
   11340:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   11342:	2300      	movs	r3, #0
   11344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   11348:	e08f      	b.n	1146a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
   1134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1134c:	2b00      	cmp	r3, #0
   1134e:	d102      	bne.n	11356 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
   11350:	f06f 0309 	mvn.w	r3, #9
   11354:	e092      	b.n	1147c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
   11356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11358:	789b      	ldrb	r3, [r3, #2]
   1135a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
   1135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1135e:	795b      	ldrb	r3, [r3, #5]
   11360:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
   11362:	7c7b      	ldrb	r3, [r7, #17]
   11364:	2b02      	cmp	r3, #2
   11366:	d002      	beq.n	1136e <cdcdf_acm_enable+0x42>
   11368:	7c7b      	ldrb	r3, [r7, #17]
   1136a:	2b0a      	cmp	r3, #10
   1136c:	d121      	bne.n	113b2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   1136e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11372:	6a3a      	ldr	r2, [r7, #32]
   11374:	5cd2      	ldrb	r2, [r2, r3]
   11376:	7bbb      	ldrb	r3, [r7, #14]
   11378:	429a      	cmp	r2, r3
   1137a:	d102      	bne.n	11382 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
   1137c:	f06f 0311 	mvn.w	r3, #17
   11380:	e07c      	b.n	1147c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
   11382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11386:	6a3a      	ldr	r2, [r7, #32]
   11388:	5cd3      	ldrb	r3, [r2, r3]
   1138a:	2bff      	cmp	r3, #255	; 0xff
   1138c:	d002      	beq.n	11394 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
   1138e:	f06f 031b 	mvn.w	r3, #27
   11392:	e073      	b.n	1147c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
   11394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11398:	7bb9      	ldrb	r1, [r7, #14]
   1139a:	6a3a      	ldr	r2, [r7, #32]
   1139c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   1139e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
   113a0:	683b      	ldr	r3, [r7, #0]
   113a2:	685b      	ldr	r3, [r3, #4]
   113a4:	2205      	movs	r2, #5
   113a6:	4619      	mov	r1, r3
   113a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   113aa:	4b36      	ldr	r3, [pc, #216]	; (11484 <cdcdf_acm_enable+0x158>)
   113ac:	4798      	blx	r3
   113ae:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   113b0:	e047      	b.n	11442 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
   113b2:	f06f 0309 	mvn.w	r3, #9
   113b6:	e061      	b.n	1147c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
   113b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   113ba:	789b      	ldrb	r3, [r3, #2]
   113bc:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
   113be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   113c0:	78db      	ldrb	r3, [r3, #3]
   113c2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
   113c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   113c6:	3304      	adds	r3, #4
   113c8:	4618      	mov	r0, r3
   113ca:	4b2f      	ldr	r3, [pc, #188]	; (11488 <cdcdf_acm_enable+0x15c>)
   113cc:	4798      	blx	r3
   113ce:	4603      	mov	r3, r0
   113d0:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
   113d2:	7ebb      	ldrb	r3, [r7, #26]
   113d4:	7ef9      	ldrb	r1, [r7, #27]
   113d6:	8bba      	ldrh	r2, [r7, #28]
   113d8:	4618      	mov	r0, r3
   113da:	4b2c      	ldr	r3, [pc, #176]	; (1148c <cdcdf_acm_enable+0x160>)
   113dc:	4798      	blx	r3
   113de:	4603      	mov	r3, r0
   113e0:	2b00      	cmp	r3, #0
   113e2:	d002      	beq.n	113ea <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
   113e4:	f06f 0313 	mvn.w	r3, #19
   113e8:	e048      	b.n	1147c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
   113ea:	7ebb      	ldrb	r3, [r7, #26]
   113ec:	b25b      	sxtb	r3, r3
   113ee:	2b00      	cmp	r3, #0
   113f0:	da0f      	bge.n	11412 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
   113f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   113f6:	7eb9      	ldrb	r1, [r7, #26]
   113f8:	6a3a      	ldr	r2, [r7, #32]
   113fa:	4413      	add	r3, r2
   113fc:	460a      	mov	r2, r1
   113fe:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
   11400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11404:	6a3a      	ldr	r2, [r7, #32]
   11406:	4413      	add	r3, r2
   11408:	789b      	ldrb	r3, [r3, #2]
   1140a:	4618      	mov	r0, r3
   1140c:	4b20      	ldr	r3, [pc, #128]	; (11490 <cdcdf_acm_enable+0x164>)
   1140e:	4798      	blx	r3
   11410:	e007      	b.n	11422 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
   11412:	7eba      	ldrb	r2, [r7, #26]
   11414:	6a3b      	ldr	r3, [r7, #32]
   11416:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
   11418:	6a3b      	ldr	r3, [r7, #32]
   1141a:	791b      	ldrb	r3, [r3, #4]
   1141c:	4618      	mov	r0, r3
   1141e:	4b1c      	ldr	r3, [pc, #112]	; (11490 <cdcdf_acm_enable+0x164>)
   11420:	4798      	blx	r3
			}
			desc->sod = ep;
   11422:	683b      	ldr	r3, [r7, #0]
   11424:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11426:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
   11428:	683b      	ldr	r3, [r7, #0]
   1142a:	681b      	ldr	r3, [r3, #0]
   1142c:	4618      	mov	r0, r3
   1142e:	4b19      	ldr	r3, [pc, #100]	; (11494 <cdcdf_acm_enable+0x168>)
   11430:	4798      	blx	r3
   11432:	4602      	mov	r2, r0
   11434:	683b      	ldr	r3, [r7, #0]
   11436:	685b      	ldr	r3, [r3, #4]
   11438:	4619      	mov	r1, r3
   1143a:	4610      	mov	r0, r2
   1143c:	4b16      	ldr	r3, [pc, #88]	; (11498 <cdcdf_acm_enable+0x16c>)
   1143e:	4798      	blx	r3
   11440:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   11442:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11444:	2b00      	cmp	r3, #0
   11446:	d1b7      	bne.n	113b8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
   11448:	683b      	ldr	r3, [r7, #0]
   1144a:	681b      	ldr	r3, [r3, #0]
   1144c:	4618      	mov	r0, r3
   1144e:	4b11      	ldr	r3, [pc, #68]	; (11494 <cdcdf_acm_enable+0x168>)
   11450:	4798      	blx	r3
   11452:	683b      	ldr	r3, [r7, #0]
   11454:	685b      	ldr	r3, [r3, #4]
   11456:	2204      	movs	r2, #4
   11458:	4619      	mov	r1, r3
   1145a:	4b0a      	ldr	r3, [pc, #40]	; (11484 <cdcdf_acm_enable+0x158>)
   1145c:	4798      	blx	r3
   1145e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   11460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11464:	3301      	adds	r3, #1
   11466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   1146a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1146e:	2b01      	cmp	r3, #1
   11470:	f67f af6b 	bls.w	1134a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
   11474:	4b09      	ldr	r3, [pc, #36]	; (1149c <cdcdf_acm_enable+0x170>)
   11476:	2201      	movs	r2, #1
   11478:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   1147a:	2300      	movs	r3, #0
}
   1147c:	4618      	mov	r0, r3
   1147e:	3730      	adds	r7, #48	; 0x30
   11480:	46bd      	mov	sp, r7
   11482:	bd80      	pop	{r7, pc}
   11484:	000126ed 	.word	0x000126ed
   11488:	000112c7 	.word	0x000112c7
   1148c:	000079b5 	.word	0x000079b5
   11490:	00007aa1 	.word	0x00007aa1
   11494:	00011309 	.word	0x00011309
   11498:	00012749 	.word	0x00012749
   1149c:	20008b88 	.word	0x20008b88

000114a0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   114a0:	b580      	push	{r7, lr}
   114a2:	b088      	sub	sp, #32
   114a4:	af00      	add	r7, sp, #0
   114a6:	6078      	str	r0, [r7, #4]
   114a8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   114aa:	687b      	ldr	r3, [r7, #4]
   114ac:	689b      	ldr	r3, [r3, #8]
   114ae:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
   114b0:	683b      	ldr	r3, [r7, #0]
   114b2:	2b00      	cmp	r3, #0
   114b4:	d00c      	beq.n	114d0 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
   114b6:	683b      	ldr	r3, [r7, #0]
   114b8:	681b      	ldr	r3, [r3, #0]
   114ba:	795b      	ldrb	r3, [r3, #5]
   114bc:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
   114be:	7c7b      	ldrb	r3, [r7, #17]
   114c0:	2b02      	cmp	r3, #2
   114c2:	d005      	beq.n	114d0 <cdcdf_acm_disable+0x30>
   114c4:	7c7b      	ldrb	r3, [r7, #17]
   114c6:	2b0a      	cmp	r3, #10
   114c8:	d002      	beq.n	114d0 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
   114ca:	f06f 0309 	mvn.w	r3, #9
   114ce:	e035      	b.n	1153c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
   114d0:	2300      	movs	r3, #0
   114d2:	77fb      	strb	r3, [r7, #31]
   114d4:	e01f      	b.n	11516 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
   114d6:	7ffb      	ldrb	r3, [r7, #31]
   114d8:	69ba      	ldr	r2, [r7, #24]
   114da:	5cd3      	ldrb	r3, [r2, r3]
   114dc:	2bff      	cmp	r3, #255	; 0xff
   114de:	d016      	beq.n	1150e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
   114e0:	7ffb      	ldrb	r3, [r7, #31]
   114e2:	69ba      	ldr	r2, [r7, #24]
   114e4:	21ff      	movs	r1, #255	; 0xff
   114e6:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
   114e8:	7ffb      	ldrb	r3, [r7, #31]
   114ea:	69ba      	ldr	r2, [r7, #24]
   114ec:	4413      	add	r3, r2
   114ee:	789b      	ldrb	r3, [r3, #2]
   114f0:	2bff      	cmp	r3, #255	; 0xff
   114f2:	d00d      	beq.n	11510 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
   114f4:	7ffb      	ldrb	r3, [r7, #31]
   114f6:	69ba      	ldr	r2, [r7, #24]
   114f8:	4413      	add	r3, r2
   114fa:	789b      	ldrb	r3, [r3, #2]
   114fc:	4618      	mov	r0, r3
   114fe:	4b11      	ldr	r3, [pc, #68]	; (11544 <cdcdf_acm_disable+0xa4>)
   11500:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
   11502:	7ffb      	ldrb	r3, [r7, #31]
   11504:	69ba      	ldr	r2, [r7, #24]
   11506:	4413      	add	r3, r2
   11508:	22ff      	movs	r2, #255	; 0xff
   1150a:	709a      	strb	r2, [r3, #2]
   1150c:	e000      	b.n	11510 <cdcdf_acm_disable+0x70>
			continue;
   1150e:	bf00      	nop
	for (i = 0; i < 2; i++) {
   11510:	7ffb      	ldrb	r3, [r7, #31]
   11512:	3301      	adds	r3, #1
   11514:	77fb      	strb	r3, [r7, #31]
   11516:	7ffb      	ldrb	r3, [r7, #31]
   11518:	2b01      	cmp	r3, #1
   1151a:	d9dc      	bls.n	114d6 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
   1151c:	69bb      	ldr	r3, [r7, #24]
   1151e:	791b      	ldrb	r3, [r3, #4]
   11520:	2bff      	cmp	r3, #255	; 0xff
   11522:	d007      	beq.n	11534 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
   11524:	69bb      	ldr	r3, [r7, #24]
   11526:	791b      	ldrb	r3, [r3, #4]
   11528:	4618      	mov	r0, r3
   1152a:	4b06      	ldr	r3, [pc, #24]	; (11544 <cdcdf_acm_disable+0xa4>)
   1152c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
   1152e:	69bb      	ldr	r3, [r7, #24]
   11530:	22ff      	movs	r2, #255	; 0xff
   11532:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
   11534:	4b04      	ldr	r3, [pc, #16]	; (11548 <cdcdf_acm_disable+0xa8>)
   11536:	2200      	movs	r2, #0
   11538:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   1153a:	2300      	movs	r3, #0
}
   1153c:	4618      	mov	r0, r3
   1153e:	3720      	adds	r7, #32
   11540:	46bd      	mov	sp, r7
   11542:	bd80      	pop	{r7, pc}
   11544:	00007a51 	.word	0x00007a51
   11548:	20008b88 	.word	0x20008b88

0001154c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
   1154c:	b580      	push	{r7, lr}
   1154e:	b084      	sub	sp, #16
   11550:	af00      	add	r7, sp, #0
   11552:	60f8      	str	r0, [r7, #12]
   11554:	460b      	mov	r3, r1
   11556:	607a      	str	r2, [r7, #4]
   11558:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
   1155a:	7afb      	ldrb	r3, [r7, #11]
   1155c:	2b01      	cmp	r3, #1
   1155e:	d009      	beq.n	11574 <cdcdf_acm_ctrl+0x28>
   11560:	2b02      	cmp	r3, #2
   11562:	d00d      	beq.n	11580 <cdcdf_acm_ctrl+0x34>
   11564:	2b00      	cmp	r3, #0
   11566:	d10e      	bne.n	11586 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
   11568:	6879      	ldr	r1, [r7, #4]
   1156a:	68f8      	ldr	r0, [r7, #12]
   1156c:	4b09      	ldr	r3, [pc, #36]	; (11594 <cdcdf_acm_ctrl+0x48>)
   1156e:	4798      	blx	r3
   11570:	4603      	mov	r3, r0
   11572:	e00a      	b.n	1158a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
   11574:	6879      	ldr	r1, [r7, #4]
   11576:	68f8      	ldr	r0, [r7, #12]
   11578:	4b07      	ldr	r3, [pc, #28]	; (11598 <cdcdf_acm_ctrl+0x4c>)
   1157a:	4798      	blx	r3
   1157c:	4603      	mov	r3, r0
   1157e:	e004      	b.n	1158a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
   11580:	f06f 031a 	mvn.w	r3, #26
   11584:	e001      	b.n	1158a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
   11586:	f06f 030c 	mvn.w	r3, #12
	}
}
   1158a:	4618      	mov	r0, r3
   1158c:	3710      	adds	r7, #16
   1158e:	46bd      	mov	sp, r7
   11590:	bd80      	pop	{r7, pc}
   11592:	bf00      	nop
   11594:	0001132d 	.word	0x0001132d
   11598:	000114a1 	.word	0x000114a1

0001159c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   1159c:	b590      	push	{r4, r7, lr}
   1159e:	b087      	sub	sp, #28
   115a0:	af00      	add	r7, sp, #0
   115a2:	4603      	mov	r3, r0
   115a4:	6039      	str	r1, [r7, #0]
   115a6:	71fb      	strb	r3, [r7, #7]
   115a8:	4613      	mov	r3, r2
   115aa:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
   115ac:	683b      	ldr	r3, [r7, #0]
   115ae:	799a      	ldrb	r2, [r3, #6]
   115b0:	79db      	ldrb	r3, [r3, #7]
   115b2:	021b      	lsls	r3, r3, #8
   115b4:	4313      	orrs	r3, r2
   115b6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
   115b8:	4b2b      	ldr	r3, [pc, #172]	; (11668 <cdcdf_acm_set_req+0xcc>)
   115ba:	4798      	blx	r3
   115bc:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
   115be:	683b      	ldr	r3, [r7, #0]
   115c0:	785b      	ldrb	r3, [r3, #1]
   115c2:	2b20      	cmp	r3, #32
   115c4:	d002      	beq.n	115cc <cdcdf_acm_set_req+0x30>
   115c6:	2b22      	cmp	r3, #34	; 0x22
   115c8:	d034      	beq.n	11634 <cdcdf_acm_set_req+0x98>
   115ca:	e046      	b.n	1165a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   115cc:	8afb      	ldrh	r3, [r7, #22]
   115ce:	2b07      	cmp	r3, #7
   115d0:	d002      	beq.n	115d8 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
   115d2:	f04f 33ff 	mov.w	r3, #4294967295
   115d6:	e042      	b.n	1165e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
   115d8:	79bb      	ldrb	r3, [r7, #6]
   115da:	2b00      	cmp	r3, #0
   115dc:	d107      	bne.n	115ee <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
   115de:	8afa      	ldrh	r2, [r7, #22]
   115e0:	79f8      	ldrb	r0, [r7, #7]
   115e2:	2300      	movs	r3, #0
   115e4:	6939      	ldr	r1, [r7, #16]
   115e6:	4c21      	ldr	r4, [pc, #132]	; (1166c <cdcdf_acm_set_req+0xd0>)
   115e8:	47a0      	blx	r4
   115ea:	4603      	mov	r3, r0
   115ec:	e037      	b.n	1165e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
   115ee:	693a      	ldr	r2, [r7, #16]
   115f0:	f107 0308 	add.w	r3, r7, #8
   115f4:	6810      	ldr	r0, [r2, #0]
   115f6:	6018      	str	r0, [r3, #0]
   115f8:	8891      	ldrh	r1, [r2, #4]
   115fa:	7992      	ldrb	r2, [r2, #6]
   115fc:	8099      	strh	r1, [r3, #4]
   115fe:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
   11600:	4b1b      	ldr	r3, [pc, #108]	; (11670 <cdcdf_acm_set_req+0xd4>)
   11602:	681b      	ldr	r3, [r3, #0]
   11604:	2b00      	cmp	r3, #0
   11606:	d008      	beq.n	1161a <cdcdf_acm_set_req+0x7e>
   11608:	4b19      	ldr	r3, [pc, #100]	; (11670 <cdcdf_acm_set_req+0xd4>)
   1160a:	681b      	ldr	r3, [r3, #0]
   1160c:	f107 0208 	add.w	r2, r7, #8
   11610:	4610      	mov	r0, r2
   11612:	4798      	blx	r3
   11614:	4603      	mov	r3, r0
   11616:	2b00      	cmp	r3, #0
   11618:	d00a      	beq.n	11630 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
   1161a:	4b16      	ldr	r3, [pc, #88]	; (11674 <cdcdf_acm_set_req+0xd8>)
   1161c:	f107 0208 	add.w	r2, r7, #8
   11620:	e892 0003 	ldmia.w	r2, {r0, r1}
   11624:	6018      	str	r0, [r3, #0]
   11626:	3304      	adds	r3, #4
   11628:	8019      	strh	r1, [r3, #0]
   1162a:	3302      	adds	r3, #2
   1162c:	0c0a      	lsrs	r2, r1, #16
   1162e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
   11630:	2300      	movs	r3, #0
   11632:	e014      	b.n	1165e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
   11634:	2300      	movs	r3, #0
   11636:	2200      	movs	r2, #0
   11638:	2100      	movs	r1, #0
   1163a:	2000      	movs	r0, #0
   1163c:	4c0b      	ldr	r4, [pc, #44]	; (1166c <cdcdf_acm_set_req+0xd0>)
   1163e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
   11640:	4b0d      	ldr	r3, [pc, #52]	; (11678 <cdcdf_acm_set_req+0xdc>)
   11642:	681b      	ldr	r3, [r3, #0]
   11644:	2b00      	cmp	r3, #0
   11646:	d006      	beq.n	11656 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
   11648:	4b0b      	ldr	r3, [pc, #44]	; (11678 <cdcdf_acm_set_req+0xdc>)
   1164a:	681b      	ldr	r3, [r3, #0]
   1164c:	683a      	ldr	r2, [r7, #0]
   1164e:	8852      	ldrh	r2, [r2, #2]
   11650:	b292      	uxth	r2, r2
   11652:	4610      	mov	r0, r2
   11654:	4798      	blx	r3
		}
		return ERR_NONE;
   11656:	2300      	movs	r3, #0
   11658:	e001      	b.n	1165e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
   1165a:	f06f 030c 	mvn.w	r3, #12
	}
}
   1165e:	4618      	mov	r0, r3
   11660:	371c      	adds	r7, #28
   11662:	46bd      	mov	sp, r7
   11664:	bd90      	pop	{r4, r7, pc}
   11666:	bf00      	nop
   11668:	000125e9 	.word	0x000125e9
   1166c:	0001245d 	.word	0x0001245d
   11670:	20008b9c 	.word	0x20008b9c
   11674:	20008b90 	.word	0x20008b90
   11678:	20008b98 	.word	0x20008b98

0001167c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   1167c:	b590      	push	{r4, r7, lr}
   1167e:	b085      	sub	sp, #20
   11680:	af00      	add	r7, sp, #0
   11682:	4603      	mov	r3, r0
   11684:	6039      	str	r1, [r7, #0]
   11686:	71fb      	strb	r3, [r7, #7]
   11688:	4613      	mov	r3, r2
   1168a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
   1168c:	683b      	ldr	r3, [r7, #0]
   1168e:	799a      	ldrb	r2, [r3, #6]
   11690:	79db      	ldrb	r3, [r3, #7]
   11692:	021b      	lsls	r3, r3, #8
   11694:	4313      	orrs	r3, r2
   11696:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
   11698:	79bb      	ldrb	r3, [r7, #6]
   1169a:	2b01      	cmp	r3, #1
   1169c:	d101      	bne.n	116a2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
   1169e:	2300      	movs	r3, #0
   116a0:	e013      	b.n	116ca <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
   116a2:	683b      	ldr	r3, [r7, #0]
   116a4:	785b      	ldrb	r3, [r3, #1]
   116a6:	2b21      	cmp	r3, #33	; 0x21
   116a8:	d10d      	bne.n	116c6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   116aa:	89fb      	ldrh	r3, [r7, #14]
   116ac:	2b07      	cmp	r3, #7
   116ae:	d002      	beq.n	116b6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
   116b0:	f04f 33ff 	mov.w	r3, #4294967295
   116b4:	e009      	b.n	116ca <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
   116b6:	89fa      	ldrh	r2, [r7, #14]
   116b8:	79f8      	ldrb	r0, [r7, #7]
   116ba:	2300      	movs	r3, #0
   116bc:	4905      	ldr	r1, [pc, #20]	; (116d4 <cdcdf_acm_get_req+0x58>)
   116be:	4c06      	ldr	r4, [pc, #24]	; (116d8 <cdcdf_acm_get_req+0x5c>)
   116c0:	47a0      	blx	r4
   116c2:	4603      	mov	r3, r0
   116c4:	e001      	b.n	116ca <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
   116c6:	f06f 030c 	mvn.w	r3, #12
	}
}
   116ca:	4618      	mov	r0, r3
   116cc:	3714      	adds	r7, #20
   116ce:	46bd      	mov	sp, r7
   116d0:	bd90      	pop	{r4, r7, pc}
   116d2:	bf00      	nop
   116d4:	20008b90 	.word	0x20008b90
   116d8:	0001245d 	.word	0x0001245d

000116dc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   116dc:	b580      	push	{r7, lr}
   116de:	b082      	sub	sp, #8
   116e0:	af00      	add	r7, sp, #0
   116e2:	4603      	mov	r3, r0
   116e4:	6039      	str	r1, [r7, #0]
   116e6:	71fb      	strb	r3, [r7, #7]
   116e8:	4613      	mov	r3, r2
   116ea:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
   116ec:	683b      	ldr	r3, [r7, #0]
   116ee:	781b      	ldrb	r3, [r3, #0]
   116f0:	095b      	lsrs	r3, r3, #5
   116f2:	b2db      	uxtb	r3, r3
   116f4:	f003 0303 	and.w	r3, r3, #3
   116f8:	2b01      	cmp	r3, #1
   116fa:	d002      	beq.n	11702 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
   116fc:	f06f 0309 	mvn.w	r3, #9
   11700:	e026      	b.n	11750 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
   11702:	683b      	ldr	r3, [r7, #0]
   11704:	889b      	ldrh	r3, [r3, #4]
   11706:	b29a      	uxth	r2, r3
   11708:	4b13      	ldr	r3, [pc, #76]	; (11758 <cdcdf_acm_req+0x7c>)
   1170a:	781b      	ldrb	r3, [r3, #0]
   1170c:	b29b      	uxth	r3, r3
   1170e:	429a      	cmp	r2, r3
   11710:	d007      	beq.n	11722 <cdcdf_acm_req+0x46>
   11712:	683b      	ldr	r3, [r7, #0]
   11714:	889b      	ldrh	r3, [r3, #4]
   11716:	b29a      	uxth	r2, r3
   11718:	4b0f      	ldr	r3, [pc, #60]	; (11758 <cdcdf_acm_req+0x7c>)
   1171a:	785b      	ldrb	r3, [r3, #1]
   1171c:	b29b      	uxth	r3, r3
   1171e:	429a      	cmp	r2, r3
   11720:	d114      	bne.n	1174c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
   11722:	683b      	ldr	r3, [r7, #0]
   11724:	781b      	ldrb	r3, [r3, #0]
   11726:	b25b      	sxtb	r3, r3
   11728:	2b00      	cmp	r3, #0
   1172a:	da07      	bge.n	1173c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
   1172c:	79ba      	ldrb	r2, [r7, #6]
   1172e:	79fb      	ldrb	r3, [r7, #7]
   11730:	6839      	ldr	r1, [r7, #0]
   11732:	4618      	mov	r0, r3
   11734:	4b09      	ldr	r3, [pc, #36]	; (1175c <cdcdf_acm_req+0x80>)
   11736:	4798      	blx	r3
   11738:	4603      	mov	r3, r0
   1173a:	e009      	b.n	11750 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
   1173c:	79ba      	ldrb	r2, [r7, #6]
   1173e:	79fb      	ldrb	r3, [r7, #7]
   11740:	6839      	ldr	r1, [r7, #0]
   11742:	4618      	mov	r0, r3
   11744:	4b06      	ldr	r3, [pc, #24]	; (11760 <cdcdf_acm_req+0x84>)
   11746:	4798      	blx	r3
   11748:	4603      	mov	r3, r0
   1174a:	e001      	b.n	11750 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
   1174c:	f06f 0309 	mvn.w	r3, #9
	}
}
   11750:	4618      	mov	r0, r3
   11752:	3708      	adds	r7, #8
   11754:	46bd      	mov	sp, r7
   11756:	bd80      	pop	{r7, pc}
   11758:	20008b88 	.word	0x20008b88
   1175c:	0001167d 	.word	0x0001167d
   11760:	0001159d 	.word	0x0001159d

00011764 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
   11764:	b580      	push	{r7, lr}
   11766:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
   11768:	4b0b      	ldr	r3, [pc, #44]	; (11798 <cdcdf_acm_init+0x34>)
   1176a:	4798      	blx	r3
   1176c:	4603      	mov	r3, r0
   1176e:	2b01      	cmp	r3, #1
   11770:	d902      	bls.n	11778 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
   11772:	f06f 0310 	mvn.w	r3, #16
   11776:	e00d      	b.n	11794 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
   11778:	4b08      	ldr	r3, [pc, #32]	; (1179c <cdcdf_acm_init+0x38>)
   1177a:	4a09      	ldr	r2, [pc, #36]	; (117a0 <cdcdf_acm_init+0x3c>)
   1177c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
   1177e:	4b07      	ldr	r3, [pc, #28]	; (1179c <cdcdf_acm_init+0x38>)
   11780:	4a08      	ldr	r2, [pc, #32]	; (117a4 <cdcdf_acm_init+0x40>)
   11782:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
   11784:	4805      	ldr	r0, [pc, #20]	; (1179c <cdcdf_acm_init+0x38>)
   11786:	4b08      	ldr	r3, [pc, #32]	; (117a8 <cdcdf_acm_init+0x44>)
   11788:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
   1178a:	4908      	ldr	r1, [pc, #32]	; (117ac <cdcdf_acm_init+0x48>)
   1178c:	2001      	movs	r0, #1
   1178e:	4b08      	ldr	r3, [pc, #32]	; (117b0 <cdcdf_acm_init+0x4c>)
   11790:	4798      	blx	r3
	return ERR_NONE;
   11792:	2300      	movs	r3, #0
}
   11794:	4618      	mov	r0, r3
   11796:	bd80      	pop	{r7, pc}
   11798:	00012601 	.word	0x00012601
   1179c:	20008b7c 	.word	0x20008b7c
   117a0:	0001154d 	.word	0x0001154d
   117a4:	20008b88 	.word	0x20008b88
   117a8:	00012569 	.word	0x00012569
   117ac:	2000023c 	.word	0x2000023c
   117b0:	00012499 	.word	0x00012499

000117b4 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
   117b4:	b590      	push	{r4, r7, lr}
   117b6:	b083      	sub	sp, #12
   117b8:	af00      	add	r7, sp, #0
   117ba:	6078      	str	r0, [r7, #4]
   117bc:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   117be:	4b0b      	ldr	r3, [pc, #44]	; (117ec <cdcdf_acm_read+0x38>)
   117c0:	4798      	blx	r3
   117c2:	4603      	mov	r3, r0
   117c4:	f083 0301 	eor.w	r3, r3, #1
   117c8:	b2db      	uxtb	r3, r3
   117ca:	2b00      	cmp	r3, #0
   117cc:	d002      	beq.n	117d4 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
   117ce:	f06f 0310 	mvn.w	r3, #16
   117d2:	e007      	b.n	117e4 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
   117d4:	4b06      	ldr	r3, [pc, #24]	; (117f0 <cdcdf_acm_read+0x3c>)
   117d6:	7918      	ldrb	r0, [r3, #4]
   117d8:	2300      	movs	r3, #0
   117da:	683a      	ldr	r2, [r7, #0]
   117dc:	6879      	ldr	r1, [r7, #4]
   117de:	4c05      	ldr	r4, [pc, #20]	; (117f4 <cdcdf_acm_read+0x40>)
   117e0:	47a0      	blx	r4
   117e2:	4603      	mov	r3, r0
}
   117e4:	4618      	mov	r0, r3
   117e6:	370c      	adds	r7, #12
   117e8:	46bd      	mov	sp, r7
   117ea:	bd90      	pop	{r4, r7, pc}
   117ec:	000118d9 	.word	0x000118d9
   117f0:	20008b88 	.word	0x20008b88
   117f4:	0001245d 	.word	0x0001245d

000117f8 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
   117f8:	b590      	push	{r4, r7, lr}
   117fa:	b083      	sub	sp, #12
   117fc:	af00      	add	r7, sp, #0
   117fe:	6078      	str	r0, [r7, #4]
   11800:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   11802:	4b0b      	ldr	r3, [pc, #44]	; (11830 <cdcdf_acm_write+0x38>)
   11804:	4798      	blx	r3
   11806:	4603      	mov	r3, r0
   11808:	f083 0301 	eor.w	r3, r3, #1
   1180c:	b2db      	uxtb	r3, r3
   1180e:	2b00      	cmp	r3, #0
   11810:	d002      	beq.n	11818 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
   11812:	f06f 0310 	mvn.w	r3, #16
   11816:	e007      	b.n	11828 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
   11818:	4b06      	ldr	r3, [pc, #24]	; (11834 <cdcdf_acm_write+0x3c>)
   1181a:	78d8      	ldrb	r0, [r3, #3]
   1181c:	2301      	movs	r3, #1
   1181e:	683a      	ldr	r2, [r7, #0]
   11820:	6879      	ldr	r1, [r7, #4]
   11822:	4c05      	ldr	r4, [pc, #20]	; (11838 <cdcdf_acm_write+0x40>)
   11824:	47a0      	blx	r4
   11826:	4603      	mov	r3, r0
}
   11828:	4618      	mov	r0, r3
   1182a:	370c      	adds	r7, #12
   1182c:	46bd      	mov	sp, r7
   1182e:	bd90      	pop	{r4, r7, pc}
   11830:	000118d9 	.word	0x000118d9
   11834:	20008b88 	.word	0x20008b88
   11838:	0001245d 	.word	0x0001245d

0001183c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
   1183c:	b580      	push	{r7, lr}
   1183e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
   11840:	4b05      	ldr	r3, [pc, #20]	; (11858 <cdcdf_acm_stop_xfer+0x1c>)
   11842:	78db      	ldrb	r3, [r3, #3]
   11844:	4618      	mov	r0, r3
   11846:	4b05      	ldr	r3, [pc, #20]	; (1185c <cdcdf_acm_stop_xfer+0x20>)
   11848:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
   1184a:	4b03      	ldr	r3, [pc, #12]	; (11858 <cdcdf_acm_stop_xfer+0x1c>)
   1184c:	791b      	ldrb	r3, [r3, #4]
   1184e:	4618      	mov	r0, r3
   11850:	4b02      	ldr	r3, [pc, #8]	; (1185c <cdcdf_acm_stop_xfer+0x20>)
   11852:	4798      	blx	r3
}
   11854:	bf00      	nop
   11856:	bd80      	pop	{r7, pc}
   11858:	20008b88 	.word	0x20008b88
   1185c:	00007c79 	.word	0x00007c79

00011860 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
   11860:	b580      	push	{r7, lr}
   11862:	b082      	sub	sp, #8
   11864:	af00      	add	r7, sp, #0
   11866:	4603      	mov	r3, r0
   11868:	6039      	str	r1, [r7, #0]
   1186a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
   1186c:	79fb      	ldrb	r3, [r7, #7]
   1186e:	2b03      	cmp	r3, #3
   11870:	d822      	bhi.n	118b8 <cdcdf_acm_register_callback+0x58>
   11872:	a201      	add	r2, pc, #4	; (adr r2, 11878 <cdcdf_acm_register_callback+0x18>)
   11874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11878:	00011889 	.word	0x00011889
   1187c:	00011899 	.word	0x00011899
   11880:	000118a9 	.word	0x000118a9
   11884:	000118b1 	.word	0x000118b1
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
   11888:	4b0f      	ldr	r3, [pc, #60]	; (118c8 <cdcdf_acm_register_callback+0x68>)
   1188a:	791b      	ldrb	r3, [r3, #4]
   1188c:	683a      	ldr	r2, [r7, #0]
   1188e:	2102      	movs	r1, #2
   11890:	4618      	mov	r0, r3
   11892:	4b0e      	ldr	r3, [pc, #56]	; (118cc <cdcdf_acm_register_callback+0x6c>)
   11894:	4798      	blx	r3
		break;
   11896:	e012      	b.n	118be <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
   11898:	4b0b      	ldr	r3, [pc, #44]	; (118c8 <cdcdf_acm_register_callback+0x68>)
   1189a:	78db      	ldrb	r3, [r3, #3]
   1189c:	683a      	ldr	r2, [r7, #0]
   1189e:	2102      	movs	r1, #2
   118a0:	4618      	mov	r0, r3
   118a2:	4b0a      	ldr	r3, [pc, #40]	; (118cc <cdcdf_acm_register_callback+0x6c>)
   118a4:	4798      	blx	r3
		break;
   118a6:	e00a      	b.n	118be <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
   118a8:	4a09      	ldr	r2, [pc, #36]	; (118d0 <cdcdf_acm_register_callback+0x70>)
   118aa:	683b      	ldr	r3, [r7, #0]
   118ac:	6013      	str	r3, [r2, #0]
		break;
   118ae:	e006      	b.n	118be <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
   118b0:	4a08      	ldr	r2, [pc, #32]	; (118d4 <cdcdf_acm_register_callback+0x74>)
   118b2:	683b      	ldr	r3, [r7, #0]
   118b4:	6013      	str	r3, [r2, #0]
		break;
   118b6:	e002      	b.n	118be <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
   118b8:	f06f 030c 	mvn.w	r3, #12
   118bc:	e000      	b.n	118c0 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
   118be:	2300      	movs	r3, #0
}
   118c0:	4618      	mov	r0, r3
   118c2:	3708      	adds	r7, #8
   118c4:	46bd      	mov	sp, r7
   118c6:	bd80      	pop	{r7, pc}
   118c8:	20008b88 	.word	0x20008b88
   118cc:	00007da5 	.word	0x00007da5
   118d0:	20008b9c 	.word	0x20008b9c
   118d4:	20008b98 	.word	0x20008b98

000118d8 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
   118d8:	b480      	push	{r7}
   118da:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
   118dc:	4b03      	ldr	r3, [pc, #12]	; (118ec <cdcdf_acm_is_enabled+0x14>)
   118de:	795b      	ldrb	r3, [r3, #5]
}
   118e0:	4618      	mov	r0, r3
   118e2:	46bd      	mov	sp, r7
   118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   118e8:	4770      	bx	lr
   118ea:	bf00      	nop
   118ec:	20008b88 	.word	0x20008b88

000118f0 <usb_get_u16>:
{
   118f0:	b480      	push	{r7}
   118f2:	b083      	sub	sp, #12
   118f4:	af00      	add	r7, sp, #0
   118f6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   118f8:	687b      	ldr	r3, [r7, #4]
   118fa:	781b      	ldrb	r3, [r3, #0]
   118fc:	b29a      	uxth	r2, r3
   118fe:	687b      	ldr	r3, [r7, #4]
   11900:	3301      	adds	r3, #1
   11902:	781b      	ldrb	r3, [r3, #0]
   11904:	b29b      	uxth	r3, r3
   11906:	021b      	lsls	r3, r3, #8
   11908:	b29b      	uxth	r3, r3
   1190a:	4413      	add	r3, r2
   1190c:	b29b      	uxth	r3, r3
}
   1190e:	4618      	mov	r0, r3
   11910:	370c      	adds	r7, #12
   11912:	46bd      	mov	sp, r7
   11914:	f85d 7b04 	ldr.w	r7, [sp], #4
   11918:	4770      	bx	lr

0001191a <usb_desc_len>:
{
   1191a:	b480      	push	{r7}
   1191c:	b083      	sub	sp, #12
   1191e:	af00      	add	r7, sp, #0
   11920:	6078      	str	r0, [r7, #4]
	return desc[0];
   11922:	687b      	ldr	r3, [r7, #4]
   11924:	781b      	ldrb	r3, [r3, #0]
}
   11926:	4618      	mov	r0, r3
   11928:	370c      	adds	r7, #12
   1192a:	46bd      	mov	sp, r7
   1192c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11930:	4770      	bx	lr
	...

00011934 <usb_desc_next>:
{
   11934:	b580      	push	{r7, lr}
   11936:	b082      	sub	sp, #8
   11938:	af00      	add	r7, sp, #0
   1193a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   1193c:	6878      	ldr	r0, [r7, #4]
   1193e:	4b05      	ldr	r3, [pc, #20]	; (11954 <usb_desc_next+0x20>)
   11940:	4798      	blx	r3
   11942:	4603      	mov	r3, r0
   11944:	461a      	mov	r2, r3
   11946:	687b      	ldr	r3, [r7, #4]
   11948:	4413      	add	r3, r2
}
   1194a:	4618      	mov	r0, r3
   1194c:	3708      	adds	r7, #8
   1194e:	46bd      	mov	sp, r7
   11950:	bd80      	pop	{r7, pc}
   11952:	bf00      	nop
   11954:	0001191b 	.word	0x0001191b

00011958 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
   11958:	b580      	push	{r7, lr}
   1195a:	b082      	sub	sp, #8
   1195c:	af00      	add	r7, sp, #0
   1195e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   11960:	687b      	ldr	r3, [r7, #4]
   11962:	3302      	adds	r3, #2
   11964:	4618      	mov	r0, r3
   11966:	4b03      	ldr	r3, [pc, #12]	; (11974 <usb_cfg_desc_total_len+0x1c>)
   11968:	4798      	blx	r3
   1196a:	4603      	mov	r3, r0
}
   1196c:	4618      	mov	r0, r3
   1196e:	3708      	adds	r7, #8
   11970:	46bd      	mov	sp, r7
   11972:	bd80      	pop	{r7, pc}
   11974:	000118f1 	.word	0x000118f1

00011978 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
   11978:	b590      	push	{r4, r7, lr}
   1197a:	b085      	sub	sp, #20
   1197c:	af00      	add	r7, sp, #0
   1197e:	4603      	mov	r3, r0
   11980:	6039      	str	r1, [r7, #0]
   11982:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
   11984:	2300      	movs	r3, #0
   11986:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
   11988:	683b      	ldr	r3, [r7, #0]
   1198a:	799a      	ldrb	r2, [r3, #6]
   1198c:	79db      	ldrb	r3, [r3, #7]
   1198e:	021b      	lsls	r3, r3, #8
   11990:	4313      	orrs	r3, r2
   11992:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
   11994:	897b      	ldrh	r3, [r7, #10]
   11996:	2b12      	cmp	r3, #18
   11998:	d901      	bls.n	1199e <usbdc_get_dev_desc+0x26>
		length = 0x12;
   1199a:	2312      	movs	r3, #18
   1199c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
   1199e:	68fb      	ldr	r3, [r7, #12]
   119a0:	2b00      	cmp	r3, #0
   119a2:	d10a      	bne.n	119ba <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   119a4:	4b0f      	ldr	r3, [pc, #60]	; (119e4 <usbdc_get_dev_desc+0x6c>)
   119a6:	681b      	ldr	r3, [r3, #0]
   119a8:	6818      	ldr	r0, [r3, #0]
   119aa:	4b0e      	ldr	r3, [pc, #56]	; (119e4 <usbdc_get_dev_desc+0x6c>)
   119ac:	681b      	ldr	r3, [r3, #0]
   119ae:	685b      	ldr	r3, [r3, #4]
   119b0:	2201      	movs	r2, #1
   119b2:	4619      	mov	r1, r3
   119b4:	4b0c      	ldr	r3, [pc, #48]	; (119e8 <usbdc_get_dev_desc+0x70>)
   119b6:	4798      	blx	r3
   119b8:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
   119ba:	68fb      	ldr	r3, [r7, #12]
   119bc:	2b00      	cmp	r3, #0
   119be:	d101      	bne.n	119c4 <usbdc_get_dev_desc+0x4c>
		return false;
   119c0:	2300      	movs	r3, #0
   119c2:	e00b      	b.n	119dc <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   119c4:	897a      	ldrh	r2, [r7, #10]
   119c6:	79f8      	ldrb	r0, [r7, #7]
   119c8:	2300      	movs	r3, #0
   119ca:	68f9      	ldr	r1, [r7, #12]
   119cc:	4c07      	ldr	r4, [pc, #28]	; (119ec <usbdc_get_dev_desc+0x74>)
   119ce:	47a0      	blx	r4
   119d0:	4603      	mov	r3, r0
   119d2:	2b00      	cmp	r3, #0
   119d4:	d001      	beq.n	119da <usbdc_get_dev_desc+0x62>
		return false;
   119d6:	2300      	movs	r3, #0
   119d8:	e000      	b.n	119dc <usbdc_get_dev_desc+0x64>
	}
	return true;
   119da:	2301      	movs	r3, #1
}
   119dc:	4618      	mov	r0, r3
   119de:	3714      	adds	r7, #20
   119e0:	46bd      	mov	sp, r7
   119e2:	bd90      	pop	{r4, r7, pc}
   119e4:	20008ba0 	.word	0x20008ba0
   119e8:	000126ed 	.word	0x000126ed
   119ec:	0001245d 	.word	0x0001245d

000119f0 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   119f0:	b590      	push	{r4, r7, lr}
   119f2:	b087      	sub	sp, #28
   119f4:	af00      	add	r7, sp, #0
   119f6:	4603      	mov	r3, r0
   119f8:	6039      	str	r1, [r7, #0]
   119fa:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   119fc:	2300      	movs	r3, #0
   119fe:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   11a00:	683b      	ldr	r3, [r7, #0]
   11a02:	799a      	ldrb	r2, [r3, #6]
   11a04:	79db      	ldrb	r3, [r3, #7]
   11a06:	021b      	lsls	r3, r3, #8
   11a08:	4313      	orrs	r3, r2
   11a0a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   11a0c:	683b      	ldr	r3, [r7, #0]
   11a0e:	885b      	ldrh	r3, [r3, #2]
   11a10:	b29b      	uxth	r3, r3
   11a12:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11a14:	8a7a      	ldrh	r2, [r7, #18]
   11a16:	4b1e      	ldr	r3, [pc, #120]	; (11a90 <usbdc_get_cfg_desc+0xa0>)
   11a18:	7f1b      	ldrb	r3, [r3, #28]
   11a1a:	3b01      	subs	r3, #1
   11a1c:	4013      	ands	r3, r2
   11a1e:	2b00      	cmp	r3, #0
   11a20:	bf0c      	ite	eq
   11a22:	2301      	moveq	r3, #1
   11a24:	2300      	movne	r3, #0
   11a26:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   11a28:	697b      	ldr	r3, [r7, #20]
   11a2a:	2b00      	cmp	r3, #0
   11a2c:	d10c      	bne.n	11a48 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   11a2e:	4b18      	ldr	r3, [pc, #96]	; (11a90 <usbdc_get_cfg_desc+0xa0>)
   11a30:	681b      	ldr	r3, [r3, #0]
   11a32:	6818      	ldr	r0, [r3, #0]
   11a34:	4b16      	ldr	r3, [pc, #88]	; (11a90 <usbdc_get_cfg_desc+0xa0>)
   11a36:	681b      	ldr	r3, [r3, #0]
   11a38:	6859      	ldr	r1, [r3, #4]
   11a3a:	7c3b      	ldrb	r3, [r7, #16]
   11a3c:	3301      	adds	r3, #1
   11a3e:	b2db      	uxtb	r3, r3
   11a40:	461a      	mov	r2, r3
   11a42:	4b14      	ldr	r3, [pc, #80]	; (11a94 <usbdc_get_cfg_desc+0xa4>)
   11a44:	4798      	blx	r3
   11a46:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   11a48:	697b      	ldr	r3, [r7, #20]
   11a4a:	2b00      	cmp	r3, #0
   11a4c:	d101      	bne.n	11a52 <usbdc_get_cfg_desc+0x62>
		return false;
   11a4e:	2300      	movs	r3, #0
   11a50:	e019      	b.n	11a86 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   11a52:	6978      	ldr	r0, [r7, #20]
   11a54:	4b10      	ldr	r3, [pc, #64]	; (11a98 <usbdc_get_cfg_desc+0xa8>)
   11a56:	4798      	blx	r3
   11a58:	4603      	mov	r3, r0
   11a5a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   11a5c:	8a7a      	ldrh	r2, [r7, #18]
   11a5e:	89fb      	ldrh	r3, [r7, #14]
   11a60:	429a      	cmp	r2, r3
   11a62:	d802      	bhi.n	11a6a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   11a64:	2300      	movs	r3, #0
   11a66:	747b      	strb	r3, [r7, #17]
   11a68:	e001      	b.n	11a6e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   11a6a:	89fb      	ldrh	r3, [r7, #14]
   11a6c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   11a6e:	8a7a      	ldrh	r2, [r7, #18]
   11a70:	7c7b      	ldrb	r3, [r7, #17]
   11a72:	79f8      	ldrb	r0, [r7, #7]
   11a74:	6979      	ldr	r1, [r7, #20]
   11a76:	4c09      	ldr	r4, [pc, #36]	; (11a9c <usbdc_get_cfg_desc+0xac>)
   11a78:	47a0      	blx	r4
   11a7a:	4603      	mov	r3, r0
   11a7c:	2b00      	cmp	r3, #0
   11a7e:	d001      	beq.n	11a84 <usbdc_get_cfg_desc+0x94>
		return false;
   11a80:	2300      	movs	r3, #0
   11a82:	e000      	b.n	11a86 <usbdc_get_cfg_desc+0x96>
	}
	return true;
   11a84:	2301      	movs	r3, #1
}
   11a86:	4618      	mov	r0, r3
   11a88:	371c      	adds	r7, #28
   11a8a:	46bd      	mov	sp, r7
   11a8c:	bd90      	pop	{r4, r7, pc}
   11a8e:	bf00      	nop
   11a90:	20008ba0 	.word	0x20008ba0
   11a94:	000127ad 	.word	0x000127ad
   11a98:	00011959 	.word	0x00011959
   11a9c:	0001245d 	.word	0x0001245d

00011aa0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   11aa0:	b590      	push	{r4, r7, lr}
   11aa2:	b085      	sub	sp, #20
   11aa4:	af00      	add	r7, sp, #0
   11aa6:	4603      	mov	r3, r0
   11aa8:	6039      	str	r1, [r7, #0]
   11aaa:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   11aac:	683b      	ldr	r3, [r7, #0]
   11aae:	799a      	ldrb	r2, [r3, #6]
   11ab0:	79db      	ldrb	r3, [r3, #7]
   11ab2:	021b      	lsls	r3, r3, #8
   11ab4:	4313      	orrs	r3, r2
   11ab6:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   11ab8:	683b      	ldr	r3, [r7, #0]
   11aba:	885b      	ldrh	r3, [r3, #2]
   11abc:	b29b      	uxth	r3, r3
   11abe:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11ac0:	89fa      	ldrh	r2, [r7, #14]
   11ac2:	4b1a      	ldr	r3, [pc, #104]	; (11b2c <usbdc_get_str_desc+0x8c>)
   11ac4:	7f1b      	ldrb	r3, [r3, #28]
   11ac6:	3b01      	subs	r3, #1
   11ac8:	4013      	ands	r3, r2
   11aca:	2b00      	cmp	r3, #0
   11acc:	bf0c      	ite	eq
   11ace:	2301      	moveq	r3, #1
   11ad0:	2300      	movne	r3, #0
   11ad2:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   11ad4:	4b15      	ldr	r3, [pc, #84]	; (11b2c <usbdc_get_str_desc+0x8c>)
   11ad6:	681b      	ldr	r3, [r3, #0]
   11ad8:	6818      	ldr	r0, [r3, #0]
   11ada:	4b14      	ldr	r3, [pc, #80]	; (11b2c <usbdc_get_str_desc+0x8c>)
   11adc:	681b      	ldr	r3, [r3, #0]
   11ade:	685b      	ldr	r3, [r3, #4]
   11ae0:	7b3a      	ldrb	r2, [r7, #12]
   11ae2:	4619      	mov	r1, r3
   11ae4:	4b12      	ldr	r3, [pc, #72]	; (11b30 <usbdc_get_str_desc+0x90>)
   11ae6:	4798      	blx	r3
   11ae8:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   11aea:	68bb      	ldr	r3, [r7, #8]
   11aec:	2b00      	cmp	r3, #0
   11aee:	d101      	bne.n	11af4 <usbdc_get_str_desc+0x54>
		return false;
   11af0:	2300      	movs	r3, #0
   11af2:	e017      	b.n	11b24 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   11af4:	68bb      	ldr	r3, [r7, #8]
   11af6:	781b      	ldrb	r3, [r3, #0]
   11af8:	b29b      	uxth	r3, r3
   11afa:	89fa      	ldrh	r2, [r7, #14]
   11afc:	429a      	cmp	r2, r3
   11afe:	d802      	bhi.n	11b06 <usbdc_get_str_desc+0x66>
		need_zlp = false;
   11b00:	2300      	movs	r3, #0
   11b02:	737b      	strb	r3, [r7, #13]
   11b04:	e002      	b.n	11b0c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   11b06:	68bb      	ldr	r3, [r7, #8]
   11b08:	781b      	ldrb	r3, [r3, #0]
   11b0a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   11b0c:	89fa      	ldrh	r2, [r7, #14]
   11b0e:	7b7b      	ldrb	r3, [r7, #13]
   11b10:	79f8      	ldrb	r0, [r7, #7]
   11b12:	68b9      	ldr	r1, [r7, #8]
   11b14:	4c07      	ldr	r4, [pc, #28]	; (11b34 <usbdc_get_str_desc+0x94>)
   11b16:	47a0      	blx	r4
   11b18:	4603      	mov	r3, r0
   11b1a:	2b00      	cmp	r3, #0
   11b1c:	d001      	beq.n	11b22 <usbdc_get_str_desc+0x82>
		return false;
   11b1e:	2300      	movs	r3, #0
   11b20:	e000      	b.n	11b24 <usbdc_get_str_desc+0x84>
	}
	return true;
   11b22:	2301      	movs	r3, #1
}
   11b24:	4618      	mov	r0, r3
   11b26:	3714      	adds	r7, #20
   11b28:	46bd      	mov	sp, r7
   11b2a:	bd90      	pop	{r4, r7, pc}
   11b2c:	20008ba0 	.word	0x20008ba0
   11b30:	00012825 	.word	0x00012825
   11b34:	0001245d 	.word	0x0001245d

00011b38 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   11b38:	b580      	push	{r7, lr}
   11b3a:	b084      	sub	sp, #16
   11b3c:	af00      	add	r7, sp, #0
   11b3e:	4603      	mov	r3, r0
   11b40:	6039      	str	r1, [r7, #0]
   11b42:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   11b44:	683b      	ldr	r3, [r7, #0]
   11b46:	885b      	ldrh	r3, [r3, #2]
   11b48:	b29b      	uxth	r3, r3
   11b4a:	0a1b      	lsrs	r3, r3, #8
   11b4c:	b29b      	uxth	r3, r3
   11b4e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   11b50:	7bfb      	ldrb	r3, [r7, #15]
   11b52:	2b02      	cmp	r3, #2
   11b54:	d00d      	beq.n	11b72 <usbdc_get_desc_req+0x3a>
   11b56:	2b03      	cmp	r3, #3
   11b58:	d012      	beq.n	11b80 <usbdc_get_desc_req+0x48>
   11b5a:	2b01      	cmp	r3, #1
   11b5c:	d002      	beq.n	11b64 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   11b5e:	bf00      	nop
	}
	return false;
   11b60:	2300      	movs	r3, #0
   11b62:	e013      	b.n	11b8c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   11b64:	79fb      	ldrb	r3, [r7, #7]
   11b66:	6839      	ldr	r1, [r7, #0]
   11b68:	4618      	mov	r0, r3
   11b6a:	4b0a      	ldr	r3, [pc, #40]	; (11b94 <usbdc_get_desc_req+0x5c>)
   11b6c:	4798      	blx	r3
   11b6e:	4603      	mov	r3, r0
   11b70:	e00c      	b.n	11b8c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   11b72:	79fb      	ldrb	r3, [r7, #7]
   11b74:	6839      	ldr	r1, [r7, #0]
   11b76:	4618      	mov	r0, r3
   11b78:	4b07      	ldr	r3, [pc, #28]	; (11b98 <usbdc_get_desc_req+0x60>)
   11b7a:	4798      	blx	r3
   11b7c:	4603      	mov	r3, r0
   11b7e:	e005      	b.n	11b8c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   11b80:	79fb      	ldrb	r3, [r7, #7]
   11b82:	6839      	ldr	r1, [r7, #0]
   11b84:	4618      	mov	r0, r3
   11b86:	4b05      	ldr	r3, [pc, #20]	; (11b9c <usbdc_get_desc_req+0x64>)
   11b88:	4798      	blx	r3
   11b8a:	4603      	mov	r3, r0
}
   11b8c:	4618      	mov	r0, r3
   11b8e:	3710      	adds	r7, #16
   11b90:	46bd      	mov	sp, r7
   11b92:	bd80      	pop	{r7, pc}
   11b94:	00011979 	.word	0x00011979
   11b98:	000119f1 	.word	0x000119f1
   11b9c:	00011aa1 	.word	0x00011aa1

00011ba0 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   11ba0:	b590      	push	{r4, r7, lr}
   11ba2:	b085      	sub	sp, #20
   11ba4:	af00      	add	r7, sp, #0
   11ba6:	4603      	mov	r3, r0
   11ba8:	6039      	str	r1, [r7, #0]
   11baa:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11bac:	683b      	ldr	r3, [r7, #0]
   11bae:	781b      	ldrb	r3, [r3, #0]
   11bb0:	f003 031f 	and.w	r3, r3, #31
   11bb4:	2b00      	cmp	r3, #0
   11bb6:	db1b      	blt.n	11bf0 <usbdc_get_status_req+0x50>
   11bb8:	2b01      	cmp	r3, #1
   11bba:	dd02      	ble.n	11bc2 <usbdc_get_status_req+0x22>
   11bbc:	2b02      	cmp	r3, #2
   11bbe:	d003      	beq.n	11bc8 <usbdc_get_status_req+0x28>
   11bc0:	e016      	b.n	11bf0 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   11bc2:	2300      	movs	r3, #0
   11bc4:	60fb      	str	r3, [r7, #12]
		break;
   11bc6:	e015      	b.n	11bf4 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   11bc8:	683b      	ldr	r3, [r7, #0]
   11bca:	889b      	ldrh	r3, [r3, #4]
   11bcc:	b29b      	uxth	r3, r3
   11bce:	b2db      	uxtb	r3, r3
   11bd0:	2102      	movs	r1, #2
   11bd2:	4618      	mov	r0, r3
   11bd4:	4b0f      	ldr	r3, [pc, #60]	; (11c14 <usbdc_get_status_req+0x74>)
   11bd6:	4798      	blx	r3
   11bd8:	4603      	mov	r3, r0
   11bda:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   11bdc:	68fb      	ldr	r3, [r7, #12]
   11bde:	2b00      	cmp	r3, #0
   11be0:	da01      	bge.n	11be6 <usbdc_get_status_req+0x46>
			return false;
   11be2:	2300      	movs	r3, #0
   11be4:	e012      	b.n	11c0c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   11be6:	68fb      	ldr	r3, [r7, #12]
   11be8:	f003 0301 	and.w	r3, r3, #1
   11bec:	60fb      	str	r3, [r7, #12]
		break;
   11bee:	e001      	b.n	11bf4 <usbdc_get_status_req+0x54>
	default:
		return false;
   11bf0:	2300      	movs	r3, #0
   11bf2:	e00b      	b.n	11c0c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   11bf4:	4b08      	ldr	r3, [pc, #32]	; (11c18 <usbdc_get_status_req+0x78>)
   11bf6:	695b      	ldr	r3, [r3, #20]
   11bf8:	89ba      	ldrh	r2, [r7, #12]
   11bfa:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   11bfc:	4b06      	ldr	r3, [pc, #24]	; (11c18 <usbdc_get_status_req+0x78>)
   11bfe:	6959      	ldr	r1, [r3, #20]
   11c00:	79f8      	ldrb	r0, [r7, #7]
   11c02:	2300      	movs	r3, #0
   11c04:	2202      	movs	r2, #2
   11c06:	4c05      	ldr	r4, [pc, #20]	; (11c1c <usbdc_get_status_req+0x7c>)
   11c08:	47a0      	blx	r4
	return true;
   11c0a:	2301      	movs	r3, #1
}
   11c0c:	4618      	mov	r0, r3
   11c0e:	3714      	adds	r7, #20
   11c10:	46bd      	mov	sp, r7
   11c12:	bd90      	pop	{r4, r7, pc}
   11c14:	00007d51 	.word	0x00007d51
   11c18:	20008ba0 	.word	0x20008ba0
   11c1c:	0001245d 	.word	0x0001245d

00011c20 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   11c20:	b590      	push	{r4, r7, lr}
   11c22:	b085      	sub	sp, #20
   11c24:	af00      	add	r7, sp, #0
   11c26:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   11c28:	4b1f      	ldr	r3, [pc, #124]	; (11ca8 <usbdc_get_interface+0x88>)
   11c2a:	691b      	ldr	r3, [r3, #16]
   11c2c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   11c2e:	4b1e      	ldr	r3, [pc, #120]	; (11ca8 <usbdc_get_interface+0x88>)
   11c30:	7f5b      	ldrb	r3, [r3, #29]
   11c32:	461a      	mov	r2, r3
   11c34:	687b      	ldr	r3, [r7, #4]
   11c36:	889b      	ldrh	r3, [r3, #4]
   11c38:	b29b      	uxth	r3, r3
   11c3a:	fa42 f303 	asr.w	r3, r2, r3
   11c3e:	f003 0301 	and.w	r3, r3, #1
   11c42:	2b00      	cmp	r3, #0
   11c44:	d128      	bne.n	11c98 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   11c46:	4b18      	ldr	r3, [pc, #96]	; (11ca8 <usbdc_get_interface+0x88>)
   11c48:	695b      	ldr	r3, [r3, #20]
   11c4a:	2200      	movs	r2, #0
   11c4c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11c4e:	4b16      	ldr	r3, [pc, #88]	; (11ca8 <usbdc_get_interface+0x88>)
   11c50:	6959      	ldr	r1, [r3, #20]
   11c52:	2300      	movs	r3, #0
   11c54:	2201      	movs	r2, #1
   11c56:	2000      	movs	r0, #0
   11c58:	4c14      	ldr	r4, [pc, #80]	; (11cac <usbdc_get_interface+0x8c>)
   11c5a:	47a0      	blx	r4
		return true;
   11c5c:	2301      	movs	r3, #1
   11c5e:	e01f      	b.n	11ca0 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   11c60:	68fb      	ldr	r3, [r7, #12]
   11c62:	685b      	ldr	r3, [r3, #4]
   11c64:	687a      	ldr	r2, [r7, #4]
   11c66:	2102      	movs	r1, #2
   11c68:	68f8      	ldr	r0, [r7, #12]
   11c6a:	4798      	blx	r3
   11c6c:	60b8      	str	r0, [r7, #8]
   11c6e:	68bb      	ldr	r3, [r7, #8]
   11c70:	2b00      	cmp	r3, #0
   11c72:	da03      	bge.n	11c7c <usbdc_get_interface+0x5c>
			func = func->next;
   11c74:	68fb      	ldr	r3, [r7, #12]
   11c76:	681b      	ldr	r3, [r3, #0]
   11c78:	60fb      	str	r3, [r7, #12]
   11c7a:	e00d      	b.n	11c98 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   11c7c:	4b0a      	ldr	r3, [pc, #40]	; (11ca8 <usbdc_get_interface+0x88>)
   11c7e:	695b      	ldr	r3, [r3, #20]
   11c80:	68ba      	ldr	r2, [r7, #8]
   11c82:	b2d2      	uxtb	r2, r2
   11c84:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11c86:	4b08      	ldr	r3, [pc, #32]	; (11ca8 <usbdc_get_interface+0x88>)
   11c88:	6959      	ldr	r1, [r3, #20]
   11c8a:	2300      	movs	r3, #0
   11c8c:	2201      	movs	r2, #1
   11c8e:	2000      	movs	r0, #0
   11c90:	4c06      	ldr	r4, [pc, #24]	; (11cac <usbdc_get_interface+0x8c>)
   11c92:	47a0      	blx	r4
			return true;
   11c94:	2301      	movs	r3, #1
   11c96:	e003      	b.n	11ca0 <usbdc_get_interface+0x80>
	while (NULL != func) {
   11c98:	68fb      	ldr	r3, [r7, #12]
   11c9a:	2b00      	cmp	r3, #0
   11c9c:	d1e0      	bne.n	11c60 <usbdc_get_interface+0x40>
		}
	}
	return false;
   11c9e:	2300      	movs	r3, #0
}
   11ca0:	4618      	mov	r0, r3
   11ca2:	3714      	adds	r7, #20
   11ca4:	46bd      	mov	sp, r7
   11ca6:	bd90      	pop	{r4, r7, pc}
   11ca8:	20008ba0 	.word	0x20008ba0
   11cac:	0001245d 	.word	0x0001245d

00011cb0 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   11cb0:	b590      	push	{r4, r7, lr}
   11cb2:	b083      	sub	sp, #12
   11cb4:	af00      	add	r7, sp, #0
   11cb6:	4603      	mov	r3, r0
   11cb8:	6039      	str	r1, [r7, #0]
   11cba:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   11cbc:	683b      	ldr	r3, [r7, #0]
   11cbe:	785b      	ldrb	r3, [r3, #1]
   11cc0:	2b0a      	cmp	r3, #10
   11cc2:	d83a      	bhi.n	11d3a <usbdc_get_req+0x8a>
   11cc4:	a201      	add	r2, pc, #4	; (adr r2, 11ccc <usbdc_get_req+0x1c>)
   11cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11cca:	bf00      	nop
   11ccc:	00011d23 	.word	0x00011d23
   11cd0:	00011d3b 	.word	0x00011d3b
   11cd4:	00011d3b 	.word	0x00011d3b
   11cd8:	00011d3b 	.word	0x00011d3b
   11cdc:	00011d3b 	.word	0x00011d3b
   11ce0:	00011d3b 	.word	0x00011d3b
   11ce4:	00011cf9 	.word	0x00011cf9
   11ce8:	00011d3b 	.word	0x00011d3b
   11cec:	00011d07 	.word	0x00011d07
   11cf0:	00011d3b 	.word	0x00011d3b
   11cf4:	00011d31 	.word	0x00011d31
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   11cf8:	79fb      	ldrb	r3, [r7, #7]
   11cfa:	6839      	ldr	r1, [r7, #0]
   11cfc:	4618      	mov	r0, r3
   11cfe:	4b11      	ldr	r3, [pc, #68]	; (11d44 <usbdc_get_req+0x94>)
   11d00:	4798      	blx	r3
   11d02:	4603      	mov	r3, r0
   11d04:	e01a      	b.n	11d3c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   11d06:	4b10      	ldr	r3, [pc, #64]	; (11d48 <usbdc_get_req+0x98>)
   11d08:	695b      	ldr	r3, [r3, #20]
   11d0a:	4a0f      	ldr	r2, [pc, #60]	; (11d48 <usbdc_get_req+0x98>)
   11d0c:	7ed2      	ldrb	r2, [r2, #27]
   11d0e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   11d10:	4b0d      	ldr	r3, [pc, #52]	; (11d48 <usbdc_get_req+0x98>)
   11d12:	6959      	ldr	r1, [r3, #20]
   11d14:	79f8      	ldrb	r0, [r7, #7]
   11d16:	2300      	movs	r3, #0
   11d18:	2201      	movs	r2, #1
   11d1a:	4c0c      	ldr	r4, [pc, #48]	; (11d4c <usbdc_get_req+0x9c>)
   11d1c:	47a0      	blx	r4
		return true;
   11d1e:	2301      	movs	r3, #1
   11d20:	e00c      	b.n	11d3c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   11d22:	79fb      	ldrb	r3, [r7, #7]
   11d24:	6839      	ldr	r1, [r7, #0]
   11d26:	4618      	mov	r0, r3
   11d28:	4b09      	ldr	r3, [pc, #36]	; (11d50 <usbdc_get_req+0xa0>)
   11d2a:	4798      	blx	r3
   11d2c:	4603      	mov	r3, r0
   11d2e:	e005      	b.n	11d3c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   11d30:	6838      	ldr	r0, [r7, #0]
   11d32:	4b08      	ldr	r3, [pc, #32]	; (11d54 <usbdc_get_req+0xa4>)
   11d34:	4798      	blx	r3
   11d36:	4603      	mov	r3, r0
   11d38:	e000      	b.n	11d3c <usbdc_get_req+0x8c>
	default:
		return false;
   11d3a:	2300      	movs	r3, #0
	}
}
   11d3c:	4618      	mov	r0, r3
   11d3e:	370c      	adds	r7, #12
   11d40:	46bd      	mov	sp, r7
   11d42:	bd90      	pop	{r4, r7, pc}
   11d44:	00011b39 	.word	0x00011b39
   11d48:	20008ba0 	.word	0x20008ba0
   11d4c:	0001245d 	.word	0x0001245d
   11d50:	00011ba1 	.word	0x00011ba1
   11d54:	00011c21 	.word	0x00011c21

00011d58 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   11d58:	b590      	push	{r4, r7, lr}
   11d5a:	b083      	sub	sp, #12
   11d5c:	af00      	add	r7, sp, #0
   11d5e:	4603      	mov	r3, r0
   11d60:	6039      	str	r1, [r7, #0]
   11d62:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11d64:	683b      	ldr	r3, [r7, #0]
   11d66:	781b      	ldrb	r3, [r3, #0]
   11d68:	f003 031f 	and.w	r3, r3, #31
   11d6c:	2b02      	cmp	r3, #2
   11d6e:	d116      	bne.n	11d9e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   11d70:	683b      	ldr	r3, [r7, #0]
   11d72:	88db      	ldrh	r3, [r3, #6]
   11d74:	b29b      	uxth	r3, r3
   11d76:	2b00      	cmp	r3, #0
   11d78:	d001      	beq.n	11d7e <usbdc_clear_ftr_req+0x26>
			return false;
   11d7a:	2300      	movs	r3, #0
   11d7c:	e010      	b.n	11da0 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   11d7e:	683b      	ldr	r3, [r7, #0]
   11d80:	889b      	ldrh	r3, [r3, #4]
   11d82:	b29b      	uxth	r3, r3
   11d84:	b2db      	uxtb	r3, r3
   11d86:	2100      	movs	r1, #0
   11d88:	4618      	mov	r0, r3
   11d8a:	4b07      	ldr	r3, [pc, #28]	; (11da8 <usbdc_clear_ftr_req+0x50>)
   11d8c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   11d8e:	79f8      	ldrb	r0, [r7, #7]
   11d90:	2301      	movs	r3, #1
   11d92:	2200      	movs	r2, #0
   11d94:	2100      	movs	r1, #0
   11d96:	4c05      	ldr	r4, [pc, #20]	; (11dac <usbdc_clear_ftr_req+0x54>)
   11d98:	47a0      	blx	r4
		return true;
   11d9a:	2301      	movs	r3, #1
   11d9c:	e000      	b.n	11da0 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   11d9e:	2300      	movs	r3, #0
	}
}
   11da0:	4618      	mov	r0, r3
   11da2:	370c      	adds	r7, #12
   11da4:	46bd      	mov	sp, r7
   11da6:	bd90      	pop	{r4, r7, pc}
   11da8:	00007d51 	.word	0x00007d51
   11dac:	0001245d 	.word	0x0001245d

00011db0 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   11db0:	b590      	push	{r4, r7, lr}
   11db2:	b083      	sub	sp, #12
   11db4:	af00      	add	r7, sp, #0
   11db6:	4603      	mov	r3, r0
   11db8:	6039      	str	r1, [r7, #0]
   11dba:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11dbc:	683b      	ldr	r3, [r7, #0]
   11dbe:	781b      	ldrb	r3, [r3, #0]
   11dc0:	f003 031f 	and.w	r3, r3, #31
   11dc4:	2b02      	cmp	r3, #2
   11dc6:	d116      	bne.n	11df6 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   11dc8:	683b      	ldr	r3, [r7, #0]
   11dca:	88db      	ldrh	r3, [r3, #6]
   11dcc:	b29b      	uxth	r3, r3
   11dce:	2b00      	cmp	r3, #0
   11dd0:	d001      	beq.n	11dd6 <usbdc_set_ftr_req+0x26>
			return false;
   11dd2:	2300      	movs	r3, #0
   11dd4:	e010      	b.n	11df8 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   11dd6:	683b      	ldr	r3, [r7, #0]
   11dd8:	889b      	ldrh	r3, [r3, #4]
   11dda:	b29b      	uxth	r3, r3
   11ddc:	b2db      	uxtb	r3, r3
   11dde:	2101      	movs	r1, #1
   11de0:	4618      	mov	r0, r3
   11de2:	4b07      	ldr	r3, [pc, #28]	; (11e00 <usbdc_set_ftr_req+0x50>)
   11de4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   11de6:	79f8      	ldrb	r0, [r7, #7]
   11de8:	2301      	movs	r3, #1
   11dea:	2200      	movs	r2, #0
   11dec:	2100      	movs	r1, #0
   11dee:	4c05      	ldr	r4, [pc, #20]	; (11e04 <usbdc_set_ftr_req+0x54>)
   11df0:	47a0      	blx	r4
		return true;
   11df2:	2301      	movs	r3, #1
   11df4:	e000      	b.n	11df8 <usbdc_set_ftr_req+0x48>
	default:
		return false;
   11df6:	2300      	movs	r3, #0
	}
}
   11df8:	4618      	mov	r0, r3
   11dfa:	370c      	adds	r7, #12
   11dfc:	46bd      	mov	sp, r7
   11dfe:	bd90      	pop	{r4, r7, pc}
   11e00:	00007d51 	.word	0x00007d51
   11e04:	0001245d 	.word	0x0001245d

00011e08 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   11e08:	b580      	push	{r7, lr}
   11e0a:	b082      	sub	sp, #8
   11e0c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   11e0e:	4b0a      	ldr	r3, [pc, #40]	; (11e38 <usbdc_unconfig+0x30>)
   11e10:	691b      	ldr	r3, [r3, #16]
   11e12:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   11e14:	e008      	b.n	11e28 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   11e16:	687b      	ldr	r3, [r7, #4]
   11e18:	685b      	ldr	r3, [r3, #4]
   11e1a:	2200      	movs	r2, #0
   11e1c:	2101      	movs	r1, #1
   11e1e:	6878      	ldr	r0, [r7, #4]
   11e20:	4798      	blx	r3
		func = func->next;
   11e22:	687b      	ldr	r3, [r7, #4]
   11e24:	681b      	ldr	r3, [r3, #0]
   11e26:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   11e28:	687b      	ldr	r3, [r7, #4]
   11e2a:	2b00      	cmp	r3, #0
   11e2c:	d1f3      	bne.n	11e16 <usbdc_unconfig+0xe>
	}
}
   11e2e:	bf00      	nop
   11e30:	3708      	adds	r7, #8
   11e32:	46bd      	mov	sp, r7
   11e34:	bd80      	pop	{r7, pc}
   11e36:	bf00      	nop
   11e38:	20008ba0 	.word	0x20008ba0

00011e3c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   11e3c:	b580      	push	{r7, lr}
   11e3e:	b088      	sub	sp, #32
   11e40:	af00      	add	r7, sp, #0
   11e42:	4603      	mov	r3, r0
   11e44:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   11e46:	2300      	movs	r3, #0
   11e48:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   11e4a:	23ff      	movs	r3, #255	; 0xff
   11e4c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   11e4e:	79fb      	ldrb	r3, [r7, #7]
   11e50:	2b00      	cmp	r3, #0
   11e52:	d103      	bne.n	11e5c <usbdc_set_config+0x20>
		usbdc_unconfig();
   11e54:	4b2e      	ldr	r3, [pc, #184]	; (11f10 <usbdc_set_config+0xd4>)
   11e56:	4798      	blx	r3
		return true;
   11e58:	2301      	movs	r3, #1
   11e5a:	e055      	b.n	11f08 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   11e5c:	69bb      	ldr	r3, [r7, #24]
   11e5e:	2b00      	cmp	r3, #0
   11e60:	d10a      	bne.n	11e78 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   11e62:	4b2c      	ldr	r3, [pc, #176]	; (11f14 <usbdc_set_config+0xd8>)
   11e64:	681b      	ldr	r3, [r3, #0]
   11e66:	6818      	ldr	r0, [r3, #0]
   11e68:	4b2a      	ldr	r3, [pc, #168]	; (11f14 <usbdc_set_config+0xd8>)
   11e6a:	681b      	ldr	r3, [r3, #0]
   11e6c:	685b      	ldr	r3, [r3, #4]
   11e6e:	79fa      	ldrb	r2, [r7, #7]
   11e70:	4619      	mov	r1, r3
   11e72:	4b29      	ldr	r3, [pc, #164]	; (11f18 <usbdc_set_config+0xdc>)
   11e74:	4798      	blx	r3
   11e76:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   11e78:	69bb      	ldr	r3, [r7, #24]
   11e7a:	2b00      	cmp	r3, #0
   11e7c:	d101      	bne.n	11e82 <usbdc_set_config+0x46>
		return false;
   11e7e:	2300      	movs	r3, #0
   11e80:	e042      	b.n	11f08 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   11e82:	69b8      	ldr	r0, [r7, #24]
   11e84:	4b25      	ldr	r3, [pc, #148]	; (11f1c <usbdc_set_config+0xe0>)
   11e86:	4798      	blx	r3
   11e88:	4603      	mov	r3, r0
   11e8a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   11e8c:	8abb      	ldrh	r3, [r7, #20]
   11e8e:	69ba      	ldr	r2, [r7, #24]
   11e90:	4413      	add	r3, r2
   11e92:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11e94:	693b      	ldr	r3, [r7, #16]
   11e96:	2204      	movs	r2, #4
   11e98:	4619      	mov	r1, r3
   11e9a:	69b8      	ldr	r0, [r7, #24]
   11e9c:	4b20      	ldr	r3, [pc, #128]	; (11f20 <usbdc_set_config+0xe4>)
   11e9e:	4798      	blx	r3
   11ea0:	4603      	mov	r3, r0
   11ea2:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   11ea4:	e02c      	b.n	11f00 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   11ea6:	68fb      	ldr	r3, [r7, #12]
   11ea8:	3302      	adds	r3, #2
   11eaa:	781b      	ldrb	r3, [r3, #0]
   11eac:	7dfa      	ldrb	r2, [r7, #23]
   11eae:	429a      	cmp	r2, r3
   11eb0:	d018      	beq.n	11ee4 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   11eb2:	68fb      	ldr	r3, [r7, #12]
   11eb4:	789b      	ldrb	r3, [r3, #2]
   11eb6:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   11eb8:	4b16      	ldr	r3, [pc, #88]	; (11f14 <usbdc_set_config+0xd8>)
   11eba:	691b      	ldr	r3, [r3, #16]
   11ebc:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   11ebe:	e00c      	b.n	11eda <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   11ec0:	69fb      	ldr	r3, [r7, #28]
   11ec2:	685b      	ldr	r3, [r3, #4]
   11ec4:	f107 020c 	add.w	r2, r7, #12
   11ec8:	2100      	movs	r1, #0
   11eca:	69f8      	ldr	r0, [r7, #28]
   11ecc:	4798      	blx	r3
   11ece:	4603      	mov	r3, r0
   11ed0:	2b00      	cmp	r3, #0
   11ed2:	d006      	beq.n	11ee2 <usbdc_set_config+0xa6>
					func = func->next;
   11ed4:	69fb      	ldr	r3, [r7, #28]
   11ed6:	681b      	ldr	r3, [r3, #0]
   11ed8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   11eda:	69fb      	ldr	r3, [r7, #28]
   11edc:	2b00      	cmp	r3, #0
   11ede:	d1ef      	bne.n	11ec0 <usbdc_set_config+0x84>
   11ee0:	e000      	b.n	11ee4 <usbdc_set_config+0xa8>
				} else {
					break;
   11ee2:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   11ee4:	68fb      	ldr	r3, [r7, #12]
   11ee6:	4618      	mov	r0, r3
   11ee8:	4b0e      	ldr	r3, [pc, #56]	; (11f24 <usbdc_set_config+0xe8>)
   11eea:	4798      	blx	r3
   11eec:	4603      	mov	r3, r0
   11eee:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11ef0:	68fb      	ldr	r3, [r7, #12]
   11ef2:	6939      	ldr	r1, [r7, #16]
   11ef4:	2204      	movs	r2, #4
   11ef6:	4618      	mov	r0, r3
   11ef8:	4b09      	ldr	r3, [pc, #36]	; (11f20 <usbdc_set_config+0xe4>)
   11efa:	4798      	blx	r3
   11efc:	4603      	mov	r3, r0
   11efe:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   11f00:	68fb      	ldr	r3, [r7, #12]
   11f02:	2b00      	cmp	r3, #0
   11f04:	d1cf      	bne.n	11ea6 <usbdc_set_config+0x6a>
	}
	return true;
   11f06:	2301      	movs	r3, #1
}
   11f08:	4618      	mov	r0, r3
   11f0a:	3720      	adds	r7, #32
   11f0c:	46bd      	mov	sp, r7
   11f0e:	bd80      	pop	{r7, pc}
   11f10:	00011e09 	.word	0x00011e09
   11f14:	20008ba0 	.word	0x20008ba0
   11f18:	000127ad 	.word	0x000127ad
   11f1c:	00011959 	.word	0x00011959
   11f20:	000126ed 	.word	0x000126ed
   11f24:	00011935 	.word	0x00011935

00011f28 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   11f28:	b580      	push	{r7, lr}
   11f2a:	b082      	sub	sp, #8
   11f2c:	af00      	add	r7, sp, #0
   11f2e:	4603      	mov	r3, r0
   11f30:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   11f32:	79fb      	ldrb	r3, [r7, #7]
   11f34:	4618      	mov	r0, r3
   11f36:	4b03      	ldr	r3, [pc, #12]	; (11f44 <usbdc_set_address+0x1c>)
   11f38:	4798      	blx	r3
}
   11f3a:	bf00      	nop
   11f3c:	3708      	adds	r7, #8
   11f3e:	46bd      	mov	sp, r7
   11f40:	bd80      	pop	{r7, pc}
   11f42:	bf00      	nop
   11f44:	0000796d 	.word	0x0000796d

00011f48 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   11f48:	b590      	push	{r4, r7, lr}
   11f4a:	b087      	sub	sp, #28
   11f4c:	af00      	add	r7, sp, #0
   11f4e:	4603      	mov	r3, r0
   11f50:	460a      	mov	r2, r1
   11f52:	80fb      	strh	r3, [r7, #6]
   11f54:	4613      	mov	r3, r2
   11f56:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   11f58:	2300      	movs	r3, #0
   11f5a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   11f5c:	693b      	ldr	r3, [r7, #16]
   11f5e:	2b00      	cmp	r3, #0
   11f60:	d10b      	bne.n	11f7a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11f62:	4b43      	ldr	r3, [pc, #268]	; (12070 <usbdc_set_interface+0x128>)
   11f64:	681b      	ldr	r3, [r3, #0]
   11f66:	6818      	ldr	r0, [r3, #0]
   11f68:	4b41      	ldr	r3, [pc, #260]	; (12070 <usbdc_set_interface+0x128>)
   11f6a:	681b      	ldr	r3, [r3, #0]
   11f6c:	6859      	ldr	r1, [r3, #4]
   11f6e:	4b40      	ldr	r3, [pc, #256]	; (12070 <usbdc_set_interface+0x128>)
   11f70:	7edb      	ldrb	r3, [r3, #27]
   11f72:	461a      	mov	r2, r3
   11f74:	4b3f      	ldr	r3, [pc, #252]	; (12074 <usbdc_set_interface+0x12c>)
   11f76:	4798      	blx	r3
   11f78:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   11f7a:	693b      	ldr	r3, [r7, #16]
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	d101      	bne.n	11f84 <usbdc_set_interface+0x3c>
		return false;
   11f80:	2300      	movs	r3, #0
   11f82:	e071      	b.n	12068 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   11f84:	693b      	ldr	r3, [r7, #16]
   11f86:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   11f88:	6938      	ldr	r0, [r7, #16]
   11f8a:	4b3b      	ldr	r3, [pc, #236]	; (12078 <usbdc_set_interface+0x130>)
   11f8c:	4798      	blx	r3
   11f8e:	4603      	mov	r3, r0
   11f90:	461a      	mov	r2, r3
   11f92:	693b      	ldr	r3, [r7, #16]
   11f94:	4413      	add	r3, r2
   11f96:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   11f98:	68bb      	ldr	r3, [r7, #8]
   11f9a:	68f9      	ldr	r1, [r7, #12]
   11f9c:	2204      	movs	r2, #4
   11f9e:	4618      	mov	r0, r3
   11fa0:	4b36      	ldr	r3, [pc, #216]	; (1207c <usbdc_set_interface+0x134>)
   11fa2:	4798      	blx	r3
   11fa4:	6138      	str	r0, [r7, #16]
   11fa6:	693b      	ldr	r3, [r7, #16]
   11fa8:	2b00      	cmp	r3, #0
   11faa:	d113      	bne.n	11fd4 <usbdc_set_interface+0x8c>
		return false;
   11fac:	2300      	movs	r3, #0
   11fae:	e05b      	b.n	12068 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   11fb0:	68bb      	ldr	r3, [r7, #8]
   11fb2:	4618      	mov	r0, r3
   11fb4:	4b32      	ldr	r3, [pc, #200]	; (12080 <usbdc_set_interface+0x138>)
   11fb6:	4798      	blx	r3
   11fb8:	4603      	mov	r3, r0
   11fba:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11fbc:	68bb      	ldr	r3, [r7, #8]
   11fbe:	68f9      	ldr	r1, [r7, #12]
   11fc0:	2204      	movs	r2, #4
   11fc2:	4618      	mov	r0, r3
   11fc4:	4b2d      	ldr	r3, [pc, #180]	; (1207c <usbdc_set_interface+0x134>)
   11fc6:	4798      	blx	r3
   11fc8:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   11fca:	693b      	ldr	r3, [r7, #16]
   11fcc:	2b00      	cmp	r3, #0
   11fce:	d101      	bne.n	11fd4 <usbdc_set_interface+0x8c>
			return false;
   11fd0:	2300      	movs	r3, #0
   11fd2:	e049      	b.n	12068 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   11fd4:	693b      	ldr	r3, [r7, #16]
   11fd6:	3302      	adds	r3, #2
   11fd8:	781b      	ldrb	r3, [r3, #0]
   11fda:	b29b      	uxth	r3, r3
   11fdc:	88ba      	ldrh	r2, [r7, #4]
   11fde:	429a      	cmp	r2, r3
   11fe0:	d1e6      	bne.n	11fb0 <usbdc_set_interface+0x68>
   11fe2:	693b      	ldr	r3, [r7, #16]
   11fe4:	3303      	adds	r3, #3
   11fe6:	781b      	ldrb	r3, [r3, #0]
   11fe8:	b29b      	uxth	r3, r3
   11fea:	88fa      	ldrh	r2, [r7, #6]
   11fec:	429a      	cmp	r2, r3
   11fee:	d1df      	bne.n	11fb0 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   11ff0:	693b      	ldr	r3, [r7, #16]
   11ff2:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   11ff4:	4b1e      	ldr	r3, [pc, #120]	; (12070 <usbdc_set_interface+0x128>)
   11ff6:	691b      	ldr	r3, [r3, #16]
   11ff8:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   11ffa:	e031      	b.n	12060 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   11ffc:	697b      	ldr	r3, [r7, #20]
   11ffe:	685b      	ldr	r3, [r3, #4]
   12000:	f107 0208 	add.w	r2, r7, #8
   12004:	2101      	movs	r1, #1
   12006:	6978      	ldr	r0, [r7, #20]
   12008:	4798      	blx	r3
   1200a:	4603      	mov	r3, r0
   1200c:	2b00      	cmp	r3, #0
   1200e:	d003      	beq.n	12018 <usbdc_set_interface+0xd0>
			func = func->next;
   12010:	697b      	ldr	r3, [r7, #20]
   12012:	681b      	ldr	r3, [r3, #0]
   12014:	617b      	str	r3, [r7, #20]
   12016:	e023      	b.n	12060 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   12018:	697b      	ldr	r3, [r7, #20]
   1201a:	685b      	ldr	r3, [r3, #4]
   1201c:	f107 0208 	add.w	r2, r7, #8
   12020:	2100      	movs	r1, #0
   12022:	6978      	ldr	r0, [r7, #20]
   12024:	4798      	blx	r3
   12026:	4603      	mov	r3, r0
   12028:	2b00      	cmp	r3, #0
   1202a:	d117      	bne.n	1205c <usbdc_set_interface+0x114>
			if (alt_set) {
   1202c:	88fb      	ldrh	r3, [r7, #6]
   1202e:	2b00      	cmp	r3, #0
   12030:	d00c      	beq.n	1204c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   12032:	4b0f      	ldr	r3, [pc, #60]	; (12070 <usbdc_set_interface+0x128>)
   12034:	7f5b      	ldrb	r3, [r3, #29]
   12036:	b25a      	sxtb	r2, r3
   12038:	88bb      	ldrh	r3, [r7, #4]
   1203a:	2101      	movs	r1, #1
   1203c:	fa01 f303 	lsl.w	r3, r1, r3
   12040:	b25b      	sxtb	r3, r3
   12042:	4313      	orrs	r3, r2
   12044:	b25b      	sxtb	r3, r3
   12046:	b2da      	uxtb	r2, r3
   12048:	4b09      	ldr	r3, [pc, #36]	; (12070 <usbdc_set_interface+0x128>)
   1204a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   1204c:	2300      	movs	r3, #0
   1204e:	2200      	movs	r2, #0
   12050:	2100      	movs	r1, #0
   12052:	2000      	movs	r0, #0
   12054:	4c0b      	ldr	r4, [pc, #44]	; (12084 <usbdc_set_interface+0x13c>)
   12056:	47a0      	blx	r4
			return true;
   12058:	2301      	movs	r3, #1
   1205a:	e005      	b.n	12068 <usbdc_set_interface+0x120>
		} else {
			return false;
   1205c:	2300      	movs	r3, #0
   1205e:	e003      	b.n	12068 <usbdc_set_interface+0x120>
	while (NULL != func) {
   12060:	697b      	ldr	r3, [r7, #20]
   12062:	2b00      	cmp	r3, #0
   12064:	d1ca      	bne.n	11ffc <usbdc_set_interface+0xb4>
		}
	}

	return false;
   12066:	2300      	movs	r3, #0
}
   12068:	4618      	mov	r0, r3
   1206a:	371c      	adds	r7, #28
   1206c:	46bd      	mov	sp, r7
   1206e:	bd90      	pop	{r4, r7, pc}
   12070:	20008ba0 	.word	0x20008ba0
   12074:	000127ad 	.word	0x000127ad
   12078:	00011959 	.word	0x00011959
   1207c:	000126ed 	.word	0x000126ed
   12080:	00011935 	.word	0x00011935
   12084:	0001245d 	.word	0x0001245d

00012088 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   12088:	b590      	push	{r4, r7, lr}
   1208a:	b083      	sub	sp, #12
   1208c:	af00      	add	r7, sp, #0
   1208e:	4603      	mov	r3, r0
   12090:	6039      	str	r1, [r7, #0]
   12092:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   12094:	683b      	ldr	r3, [r7, #0]
   12096:	785b      	ldrb	r3, [r3, #1]
   12098:	3b01      	subs	r3, #1
   1209a:	2b0a      	cmp	r3, #10
   1209c:	d85b      	bhi.n	12156 <usbdc_set_req+0xce>
   1209e:	a201      	add	r2, pc, #4	; (adr r2, 120a4 <usbdc_set_req+0x1c>)
   120a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   120a4:	00012123 	.word	0x00012123
   120a8:	00012157 	.word	0x00012157
   120ac:	00012131 	.word	0x00012131
   120b0:	00012157 	.word	0x00012157
   120b4:	000120d1 	.word	0x000120d1
   120b8:	00012157 	.word	0x00012157
   120bc:	00012157 	.word	0x00012157
   120c0:	00012157 	.word	0x00012157
   120c4:	000120eb 	.word	0x000120eb
   120c8:	00012157 	.word	0x00012157
   120cc:	0001213f 	.word	0x0001213f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   120d0:	79f8      	ldrb	r0, [r7, #7]
   120d2:	2301      	movs	r3, #1
   120d4:	2200      	movs	r2, #0
   120d6:	2100      	movs	r1, #0
   120d8:	4c21      	ldr	r4, [pc, #132]	; (12160 <usbdc_set_req+0xd8>)
   120da:	47a0      	blx	r4
   120dc:	4603      	mov	r3, r0
   120de:	2b00      	cmp	r3, #0
   120e0:	bf0c      	ite	eq
   120e2:	2301      	moveq	r3, #1
   120e4:	2300      	movne	r3, #0
   120e6:	b2db      	uxtb	r3, r3
   120e8:	e036      	b.n	12158 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   120ea:	683b      	ldr	r3, [r7, #0]
   120ec:	885b      	ldrh	r3, [r3, #2]
   120ee:	b29b      	uxth	r3, r3
   120f0:	b2db      	uxtb	r3, r3
   120f2:	4618      	mov	r0, r3
   120f4:	4b1b      	ldr	r3, [pc, #108]	; (12164 <usbdc_set_req+0xdc>)
   120f6:	4798      	blx	r3
   120f8:	4603      	mov	r3, r0
   120fa:	f083 0301 	eor.w	r3, r3, #1
   120fe:	b2db      	uxtb	r3, r3
   12100:	2b00      	cmp	r3, #0
   12102:	d001      	beq.n	12108 <usbdc_set_req+0x80>
			return false;
   12104:	2300      	movs	r3, #0
   12106:	e027      	b.n	12158 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   12108:	79f8      	ldrb	r0, [r7, #7]
   1210a:	2301      	movs	r3, #1
   1210c:	2200      	movs	r2, #0
   1210e:	2100      	movs	r1, #0
   12110:	4c13      	ldr	r4, [pc, #76]	; (12160 <usbdc_set_req+0xd8>)
   12112:	47a0      	blx	r4
   12114:	4603      	mov	r3, r0
   12116:	2b00      	cmp	r3, #0
   12118:	bf0c      	ite	eq
   1211a:	2301      	moveq	r3, #1
   1211c:	2300      	movne	r3, #0
   1211e:	b2db      	uxtb	r3, r3
   12120:	e01a      	b.n	12158 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   12122:	79fb      	ldrb	r3, [r7, #7]
   12124:	6839      	ldr	r1, [r7, #0]
   12126:	4618      	mov	r0, r3
   12128:	4b0f      	ldr	r3, [pc, #60]	; (12168 <usbdc_set_req+0xe0>)
   1212a:	4798      	blx	r3
   1212c:	4603      	mov	r3, r0
   1212e:	e013      	b.n	12158 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   12130:	79fb      	ldrb	r3, [r7, #7]
   12132:	6839      	ldr	r1, [r7, #0]
   12134:	4618      	mov	r0, r3
   12136:	4b0d      	ldr	r3, [pc, #52]	; (1216c <usbdc_set_req+0xe4>)
   12138:	4798      	blx	r3
   1213a:	4603      	mov	r3, r0
   1213c:	e00c      	b.n	12158 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   1213e:	683b      	ldr	r3, [r7, #0]
   12140:	885b      	ldrh	r3, [r3, #2]
   12142:	b29a      	uxth	r2, r3
   12144:	683b      	ldr	r3, [r7, #0]
   12146:	889b      	ldrh	r3, [r3, #4]
   12148:	b29b      	uxth	r3, r3
   1214a:	4619      	mov	r1, r3
   1214c:	4610      	mov	r0, r2
   1214e:	4b08      	ldr	r3, [pc, #32]	; (12170 <usbdc_set_req+0xe8>)
   12150:	4798      	blx	r3
   12152:	4603      	mov	r3, r0
   12154:	e000      	b.n	12158 <usbdc_set_req+0xd0>
	default:
		return false;
   12156:	2300      	movs	r3, #0
	}
}
   12158:	4618      	mov	r0, r3
   1215a:	370c      	adds	r7, #12
   1215c:	46bd      	mov	sp, r7
   1215e:	bd90      	pop	{r4, r7, pc}
   12160:	0001245d 	.word	0x0001245d
   12164:	00011e3d 	.word	0x00011e3d
   12168:	00011d59 	.word	0x00011d59
   1216c:	00011db1 	.word	0x00011db1
   12170:	00011f49 	.word	0x00011f49

00012174 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   12174:	b580      	push	{r7, lr}
   12176:	b082      	sub	sp, #8
   12178:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   1217a:	4b0a      	ldr	r3, [pc, #40]	; (121a4 <usbdc_sof_notify+0x30>)
   1217c:	685b      	ldr	r3, [r3, #4]
   1217e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   12180:	e009      	b.n	12196 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   12182:	687b      	ldr	r3, [r7, #4]
   12184:	685b      	ldr	r3, [r3, #4]
   12186:	2b00      	cmp	r3, #0
   12188:	d002      	beq.n	12190 <usbdc_sof_notify+0x1c>
			sof->cb();
   1218a:	687b      	ldr	r3, [r7, #4]
   1218c:	685b      	ldr	r3, [r3, #4]
   1218e:	4798      	blx	r3
		}
		sof = sof->next;
   12190:	687b      	ldr	r3, [r7, #4]
   12192:	681b      	ldr	r3, [r3, #0]
   12194:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   12196:	687b      	ldr	r3, [r7, #4]
   12198:	2b00      	cmp	r3, #0
   1219a:	d1f2      	bne.n	12182 <usbdc_sof_notify+0xe>
	}
}
   1219c:	bf00      	nop
   1219e:	3708      	adds	r7, #8
   121a0:	46bd      	mov	sp, r7
   121a2:	bd80      	pop	{r7, pc}
   121a4:	20008ba0 	.word	0x20008ba0

000121a8 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	4603      	mov	r3, r0
   121b0:	6039      	str	r1, [r7, #0]
   121b2:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   121b4:	4b0b      	ldr	r3, [pc, #44]	; (121e4 <usbdc_change_notify+0x3c>)
   121b6:	68db      	ldr	r3, [r3, #12]
   121b8:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   121ba:	e00c      	b.n	121d6 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   121bc:	68fb      	ldr	r3, [r7, #12]
   121be:	685b      	ldr	r3, [r3, #4]
   121c0:	2b00      	cmp	r3, #0
   121c2:	d005      	beq.n	121d0 <usbdc_change_notify+0x28>
			cg->cb(change, value);
   121c4:	68fb      	ldr	r3, [r7, #12]
   121c6:	685b      	ldr	r3, [r3, #4]
   121c8:	79fa      	ldrb	r2, [r7, #7]
   121ca:	6839      	ldr	r1, [r7, #0]
   121cc:	4610      	mov	r0, r2
   121ce:	4798      	blx	r3
		}
		cg = cg->next;
   121d0:	68fb      	ldr	r3, [r7, #12]
   121d2:	681b      	ldr	r3, [r3, #0]
   121d4:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   121d6:	68fb      	ldr	r3, [r7, #12]
   121d8:	2b00      	cmp	r3, #0
   121da:	d1ef      	bne.n	121bc <usbdc_change_notify+0x14>
	}
}
   121dc:	bf00      	nop
   121de:	3710      	adds	r7, #16
   121e0:	46bd      	mov	sp, r7
   121e2:	bd80      	pop	{r7, pc}
   121e4:	20008ba0 	.word	0x20008ba0

000121e8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   121e8:	b580      	push	{r7, lr}
   121ea:	b084      	sub	sp, #16
   121ec:	af00      	add	r7, sp, #0
   121ee:	4603      	mov	r3, r0
   121f0:	6039      	str	r1, [r7, #0]
   121f2:	71fb      	strb	r3, [r7, #7]
   121f4:	4613      	mov	r3, r2
   121f6:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   121f8:	4b12      	ldr	r3, [pc, #72]	; (12244 <usbdc_request_handler+0x5c>)
   121fa:	689b      	ldr	r3, [r3, #8]
   121fc:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   121fe:	e019      	b.n	12234 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   12200:	68fb      	ldr	r3, [r7, #12]
   12202:	685b      	ldr	r3, [r3, #4]
   12204:	2b00      	cmp	r3, #0
   12206:	d012      	beq.n	1222e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	685b      	ldr	r3, [r3, #4]
   1220c:	79ba      	ldrb	r2, [r7, #6]
   1220e:	79f8      	ldrb	r0, [r7, #7]
   12210:	6839      	ldr	r1, [r7, #0]
   12212:	4798      	blx	r3
   12214:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   12216:	68bb      	ldr	r3, [r7, #8]
   12218:	2b00      	cmp	r3, #0
   1221a:	d101      	bne.n	12220 <usbdc_request_handler+0x38>
				return true;
   1221c:	2301      	movs	r3, #1
   1221e:	e00d      	b.n	1223c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   12220:	68bb      	ldr	r3, [r7, #8]
   12222:	f113 0f0a 	cmn.w	r3, #10
   12226:	d002      	beq.n	1222e <usbdc_request_handler+0x46>
				return -1;
   12228:	f04f 33ff 	mov.w	r3, #4294967295
   1222c:	e006      	b.n	1223c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	681b      	ldr	r3, [r3, #0]
   12232:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   12234:	68fb      	ldr	r3, [r7, #12]
   12236:	2b00      	cmp	r3, #0
   12238:	d1e2      	bne.n	12200 <usbdc_request_handler+0x18>
	}
	return false;
   1223a:	2300      	movs	r3, #0
}
   1223c:	4618      	mov	r0, r3
   1223e:	3710      	adds	r7, #16
   12240:	46bd      	mov	sp, r7
   12242:	bd80      	pop	{r7, pc}
   12244:	20008ba0 	.word	0x20008ba0

00012248 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   12248:	b580      	push	{r7, lr}
   1224a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   1224c:	4b01      	ldr	r3, [pc, #4]	; (12254 <usbd_sof_cb+0xc>)
   1224e:	4798      	blx	r3
}
   12250:	bf00      	nop
   12252:	bd80      	pop	{r7, pc}
   12254:	00012175 	.word	0x00012175

00012258 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   12258:	b580      	push	{r7, lr}
   1225a:	b082      	sub	sp, #8
   1225c:	af00      	add	r7, sp, #0
   1225e:	4603      	mov	r3, r0
   12260:	6039      	str	r1, [r7, #0]
   12262:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   12264:	79fb      	ldrb	r3, [r7, #7]
   12266:	2200      	movs	r2, #0
   12268:	6839      	ldr	r1, [r7, #0]
   1226a:	4618      	mov	r0, r3
   1226c:	4b14      	ldr	r3, [pc, #80]	; (122c0 <usbdc_cb_ctl_req+0x68>)
   1226e:	4798      	blx	r3
   12270:	4603      	mov	r3, r0
   12272:	f1b3 3fff 	cmp.w	r3, #4294967295
   12276:	d00b      	beq.n	12290 <usbdc_cb_ctl_req+0x38>
   12278:	2b01      	cmp	r3, #1
   1227a:	d007      	beq.n	1228c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   1227c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   1227e:	683b      	ldr	r3, [r7, #0]
   12280:	781b      	ldrb	r3, [r3, #0]
   12282:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   12286:	2b00      	cmp	r3, #0
   12288:	d007      	beq.n	1229a <usbdc_cb_ctl_req+0x42>
   1228a:	e003      	b.n	12294 <usbdc_cb_ctl_req+0x3c>
		return true;
   1228c:	2301      	movs	r3, #1
   1228e:	e013      	b.n	122b8 <usbdc_cb_ctl_req+0x60>
		return false;
   12290:	2300      	movs	r3, #0
   12292:	e011      	b.n	122b8 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   12294:	2b80      	cmp	r3, #128	; 0x80
   12296:	d007      	beq.n	122a8 <usbdc_cb_ctl_req+0x50>
   12298:	e00d      	b.n	122b6 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   1229a:	79fb      	ldrb	r3, [r7, #7]
   1229c:	6839      	ldr	r1, [r7, #0]
   1229e:	4618      	mov	r0, r3
   122a0:	4b08      	ldr	r3, [pc, #32]	; (122c4 <usbdc_cb_ctl_req+0x6c>)
   122a2:	4798      	blx	r3
   122a4:	4603      	mov	r3, r0
   122a6:	e007      	b.n	122b8 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   122a8:	79fb      	ldrb	r3, [r7, #7]
   122aa:	6839      	ldr	r1, [r7, #0]
   122ac:	4618      	mov	r0, r3
   122ae:	4b06      	ldr	r3, [pc, #24]	; (122c8 <usbdc_cb_ctl_req+0x70>)
   122b0:	4798      	blx	r3
   122b2:	4603      	mov	r3, r0
   122b4:	e000      	b.n	122b8 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   122b6:	2300      	movs	r3, #0
	}
}
   122b8:	4618      	mov	r0, r3
   122ba:	3708      	adds	r7, #8
   122bc:	46bd      	mov	sp, r7
   122be:	bd80      	pop	{r7, pc}
   122c0:	000121e9 	.word	0x000121e9
   122c4:	00012089 	.word	0x00012089
   122c8:	00011cb1 	.word	0x00011cb1

000122cc <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   122cc:	b580      	push	{r7, lr}
   122ce:	b082      	sub	sp, #8
   122d0:	af00      	add	r7, sp, #0
   122d2:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   122d4:	687b      	ldr	r3, [r7, #4]
   122d6:	781b      	ldrb	r3, [r3, #0]
   122d8:	2b00      	cmp	r3, #0
   122da:	d135      	bne.n	12348 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   122dc:	687b      	ldr	r3, [r7, #4]
   122de:	785b      	ldrb	r3, [r3, #1]
   122e0:	2b05      	cmp	r3, #5
   122e2:	d019      	beq.n	12318 <usbdc_ctrl_status_end+0x4c>
   122e4:	2b09      	cmp	r3, #9
   122e6:	d000      	beq.n	122ea <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   122e8:	e02f      	b.n	1234a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   122ea:	687b      	ldr	r3, [r7, #4]
   122ec:	885b      	ldrh	r3, [r3, #2]
   122ee:	b29b      	uxth	r3, r3
   122f0:	b2da      	uxtb	r2, r3
   122f2:	4b17      	ldr	r3, [pc, #92]	; (12350 <usbdc_ctrl_status_end+0x84>)
   122f4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   122f6:	687b      	ldr	r3, [r7, #4]
   122f8:	885b      	ldrh	r3, [r3, #2]
   122fa:	b29b      	uxth	r3, r3
   122fc:	2b00      	cmp	r3, #0
   122fe:	d001      	beq.n	12304 <usbdc_ctrl_status_end+0x38>
   12300:	2204      	movs	r2, #4
   12302:	e000      	b.n	12306 <usbdc_ctrl_status_end+0x3a>
   12304:	2203      	movs	r2, #3
   12306:	4b12      	ldr	r3, [pc, #72]	; (12350 <usbdc_ctrl_status_end+0x84>)
   12308:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   1230a:	4b11      	ldr	r3, [pc, #68]	; (12350 <usbdc_ctrl_status_end+0x84>)
   1230c:	7e9b      	ldrb	r3, [r3, #26]
   1230e:	4619      	mov	r1, r3
   12310:	2001      	movs	r0, #1
   12312:	4b10      	ldr	r3, [pc, #64]	; (12354 <usbdc_ctrl_status_end+0x88>)
   12314:	4798      	blx	r3
		break;
   12316:	e018      	b.n	1234a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   12318:	687b      	ldr	r3, [r7, #4]
   1231a:	885b      	ldrh	r3, [r3, #2]
   1231c:	b29b      	uxth	r3, r3
   1231e:	b2db      	uxtb	r3, r3
   12320:	4618      	mov	r0, r3
   12322:	4b0d      	ldr	r3, [pc, #52]	; (12358 <usbdc_ctrl_status_end+0x8c>)
   12324:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   12326:	687b      	ldr	r3, [r7, #4]
   12328:	885b      	ldrh	r3, [r3, #2]
   1232a:	b29b      	uxth	r3, r3
   1232c:	2b00      	cmp	r3, #0
   1232e:	d001      	beq.n	12334 <usbdc_ctrl_status_end+0x68>
   12330:	2203      	movs	r2, #3
   12332:	e000      	b.n	12336 <usbdc_ctrl_status_end+0x6a>
   12334:	2202      	movs	r2, #2
   12336:	4b06      	ldr	r3, [pc, #24]	; (12350 <usbdc_ctrl_status_end+0x84>)
   12338:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   1233a:	4b05      	ldr	r3, [pc, #20]	; (12350 <usbdc_ctrl_status_end+0x84>)
   1233c:	7e9b      	ldrb	r3, [r3, #26]
   1233e:	4619      	mov	r1, r3
   12340:	2001      	movs	r0, #1
   12342:	4b04      	ldr	r3, [pc, #16]	; (12354 <usbdc_ctrl_status_end+0x88>)
   12344:	4798      	blx	r3
		break;
   12346:	e000      	b.n	1234a <usbdc_ctrl_status_end+0x7e>
		return;
   12348:	bf00      	nop
	}
}
   1234a:	3708      	adds	r7, #8
   1234c:	46bd      	mov	sp, r7
   1234e:	bd80      	pop	{r7, pc}
   12350:	20008ba0 	.word	0x20008ba0
   12354:	000121a9 	.word	0x000121a9
   12358:	00011f29 	.word	0x00011f29

0001235c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   1235c:	b580      	push	{r7, lr}
   1235e:	b082      	sub	sp, #8
   12360:	af00      	add	r7, sp, #0
   12362:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   12364:	2201      	movs	r2, #1
   12366:	6879      	ldr	r1, [r7, #4]
   12368:	2000      	movs	r0, #0
   1236a:	4b03      	ldr	r3, [pc, #12]	; (12378 <usbdc_ctrl_data_end+0x1c>)
   1236c:	4798      	blx	r3
	return false;
   1236e:	2300      	movs	r3, #0
}
   12370:	4618      	mov	r0, r3
   12372:	3708      	adds	r7, #8
   12374:	46bd      	mov	sp, r7
   12376:	bd80      	pop	{r7, pc}
   12378:	000121e9 	.word	0x000121e9

0001237c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   1237c:	b580      	push	{r7, lr}
   1237e:	b082      	sub	sp, #8
   12380:	af00      	add	r7, sp, #0
   12382:	4603      	mov	r3, r0
   12384:	603a      	str	r2, [r7, #0]
   12386:	71fb      	strb	r3, [r7, #7]
   12388:	460b      	mov	r3, r1
   1238a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   1238c:	79bb      	ldrb	r3, [r7, #6]
   1238e:	2b00      	cmp	r3, #0
   12390:	d002      	beq.n	12398 <usbdc_cb_ctl_done+0x1c>
   12392:	2b01      	cmp	r3, #1
   12394:	d004      	beq.n	123a0 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   12396:	e008      	b.n	123aa <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   12398:	6838      	ldr	r0, [r7, #0]
   1239a:	4b06      	ldr	r3, [pc, #24]	; (123b4 <usbdc_cb_ctl_done+0x38>)
   1239c:	4798      	blx	r3
		break;
   1239e:	e004      	b.n	123aa <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   123a0:	6838      	ldr	r0, [r7, #0]
   123a2:	4b05      	ldr	r3, [pc, #20]	; (123b8 <usbdc_cb_ctl_done+0x3c>)
   123a4:	4798      	blx	r3
   123a6:	4603      	mov	r3, r0
   123a8:	e000      	b.n	123ac <usbdc_cb_ctl_done+0x30>
	}
	return false;
   123aa:	2300      	movs	r3, #0
}
   123ac:	4618      	mov	r0, r3
   123ae:	3708      	adds	r7, #8
   123b0:	46bd      	mov	sp, r7
   123b2:	bd80      	pop	{r7, pc}
   123b4:	000122cd 	.word	0x000122cd
   123b8:	0001235d 	.word	0x0001235d

000123bc <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   123bc:	b580      	push	{r7, lr}
   123be:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   123c0:	4b10      	ldr	r3, [pc, #64]	; (12404 <usbdc_reset+0x48>)
   123c2:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   123c4:	4b10      	ldr	r3, [pc, #64]	; (12408 <usbdc_reset+0x4c>)
   123c6:	2202      	movs	r2, #2
   123c8:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   123ca:	4b0f      	ldr	r3, [pc, #60]	; (12408 <usbdc_reset+0x4c>)
   123cc:	2200      	movs	r2, #0
   123ce:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   123d0:	4b0d      	ldr	r3, [pc, #52]	; (12408 <usbdc_reset+0x4c>)
   123d2:	2200      	movs	r2, #0
   123d4:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   123d6:	2000      	movs	r0, #0
   123d8:	4b0c      	ldr	r3, [pc, #48]	; (1240c <usbdc_reset+0x50>)
   123da:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   123dc:	4b0a      	ldr	r3, [pc, #40]	; (12408 <usbdc_reset+0x4c>)
   123de:	7f1b      	ldrb	r3, [r3, #28]
   123e0:	4618      	mov	r0, r3
   123e2:	4b0b      	ldr	r3, [pc, #44]	; (12410 <usbdc_reset+0x54>)
   123e4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   123e6:	4a0b      	ldr	r2, [pc, #44]	; (12414 <usbdc_reset+0x58>)
   123e8:	2100      	movs	r1, #0
   123ea:	2000      	movs	r0, #0
   123ec:	4b0a      	ldr	r3, [pc, #40]	; (12418 <usbdc_reset+0x5c>)
   123ee:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   123f0:	4a0a      	ldr	r2, [pc, #40]	; (1241c <usbdc_reset+0x60>)
   123f2:	2102      	movs	r1, #2
   123f4:	2000      	movs	r0, #0
   123f6:	4b08      	ldr	r3, [pc, #32]	; (12418 <usbdc_reset+0x5c>)
   123f8:	4798      	blx	r3
	usb_d_ep_enable(0);
   123fa:	2000      	movs	r0, #0
   123fc:	4b08      	ldr	r3, [pc, #32]	; (12420 <usbdc_reset+0x64>)
   123fe:	4798      	blx	r3
}
   12400:	bf00      	nop
   12402:	bd80      	pop	{r7, pc}
   12404:	00011e09 	.word	0x00011e09
   12408:	20008ba0 	.word	0x20008ba0
   1240c:	00007a51 	.word	0x00007a51
   12410:	0000798d 	.word	0x0000798d
   12414:	00012259 	.word	0x00012259
   12418:	00007da5 	.word	0x00007da5
   1241c:	0001237d 	.word	0x0001237d
   12420:	00007aa1 	.word	0x00007aa1

00012424 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   12424:	b580      	push	{r7, lr}
   12426:	b082      	sub	sp, #8
   12428:	af00      	add	r7, sp, #0
   1242a:	4603      	mov	r3, r0
   1242c:	6039      	str	r1, [r7, #0]
   1242e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   12430:	79fb      	ldrb	r3, [r7, #7]
   12432:	2b00      	cmp	r3, #0
   12434:	d002      	beq.n	1243c <usbd_event_cb+0x18>
   12436:	2b01      	cmp	r3, #1
   12438:	d005      	beq.n	12446 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   1243a:	e007      	b.n	1244c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   1243c:	6839      	ldr	r1, [r7, #0]
   1243e:	2000      	movs	r0, #0
   12440:	4b04      	ldr	r3, [pc, #16]	; (12454 <usbd_event_cb+0x30>)
   12442:	4798      	blx	r3
		break;
   12444:	e002      	b.n	1244c <usbd_event_cb+0x28>
		usbdc_reset();
   12446:	4b04      	ldr	r3, [pc, #16]	; (12458 <usbd_event_cb+0x34>)
   12448:	4798      	blx	r3
		break;
   1244a:	bf00      	nop
	}
}
   1244c:	bf00      	nop
   1244e:	3708      	adds	r7, #8
   12450:	46bd      	mov	sp, r7
   12452:	bd80      	pop	{r7, pc}
   12454:	000121a9 	.word	0x000121a9
   12458:	000123bd 	.word	0x000123bd

0001245c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   1245c:	b580      	push	{r7, lr}
   1245e:	b088      	sub	sp, #32
   12460:	af00      	add	r7, sp, #0
   12462:	60b9      	str	r1, [r7, #8]
   12464:	607a      	str	r2, [r7, #4]
   12466:	461a      	mov	r2, r3
   12468:	4603      	mov	r3, r0
   1246a:	73fb      	strb	r3, [r7, #15]
   1246c:	4613      	mov	r3, r2
   1246e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   12470:	68bb      	ldr	r3, [r7, #8]
   12472:	617b      	str	r3, [r7, #20]
   12474:	687b      	ldr	r3, [r7, #4]
   12476:	61bb      	str	r3, [r7, #24]
   12478:	7bfb      	ldrb	r3, [r7, #15]
   1247a:	773b      	strb	r3, [r7, #28]
   1247c:	7bbb      	ldrb	r3, [r7, #14]
   1247e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   12480:	f107 0314 	add.w	r3, r7, #20
   12484:	4618      	mov	r0, r3
   12486:	4b03      	ldr	r3, [pc, #12]	; (12494 <usbdc_xfer+0x38>)
   12488:	4798      	blx	r3
   1248a:	4603      	mov	r3, r0
}
   1248c:	4618      	mov	r0, r3
   1248e:	3720      	adds	r7, #32
   12490:	46bd      	mov	sp, r7
   12492:	bd80      	pop	{r7, pc}
   12494:	00007b11 	.word	0x00007b11

00012498 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   12498:	b580      	push	{r7, lr}
   1249a:	b082      	sub	sp, #8
   1249c:	af00      	add	r7, sp, #0
   1249e:	4603      	mov	r3, r0
   124a0:	6039      	str	r1, [r7, #0]
   124a2:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   124a4:	79fb      	ldrb	r3, [r7, #7]
   124a6:	2b01      	cmp	r3, #1
   124a8:	d009      	beq.n	124be <usbdc_register_handler+0x26>
   124aa:	2b02      	cmp	r3, #2
   124ac:	d00c      	beq.n	124c8 <usbdc_register_handler+0x30>
   124ae:	2b00      	cmp	r3, #0
   124b0:	d000      	beq.n	124b4 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   124b2:	e00e      	b.n	124d2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   124b4:	6839      	ldr	r1, [r7, #0]
   124b6:	4809      	ldr	r0, [pc, #36]	; (124dc <usbdc_register_handler+0x44>)
   124b8:	4b09      	ldr	r3, [pc, #36]	; (124e0 <usbdc_register_handler+0x48>)
   124ba:	4798      	blx	r3
		break;
   124bc:	e009      	b.n	124d2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   124be:	6839      	ldr	r1, [r7, #0]
   124c0:	4808      	ldr	r0, [pc, #32]	; (124e4 <usbdc_register_handler+0x4c>)
   124c2:	4b07      	ldr	r3, [pc, #28]	; (124e0 <usbdc_register_handler+0x48>)
   124c4:	4798      	blx	r3
		break;
   124c6:	e004      	b.n	124d2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   124c8:	6839      	ldr	r1, [r7, #0]
   124ca:	4807      	ldr	r0, [pc, #28]	; (124e8 <usbdc_register_handler+0x50>)
   124cc:	4b04      	ldr	r3, [pc, #16]	; (124e0 <usbdc_register_handler+0x48>)
   124ce:	4798      	blx	r3
		break;
   124d0:	bf00      	nop
	}
}
   124d2:	bf00      	nop
   124d4:	3708      	adds	r7, #8
   124d6:	46bd      	mov	sp, r7
   124d8:	bd80      	pop	{r7, pc}
   124da:	bf00      	nop
   124dc:	20008ba4 	.word	0x20008ba4
   124e0:	00007efd 	.word	0x00007efd
   124e4:	20008ba8 	.word	0x20008ba8
   124e8:	20008bac 	.word	0x20008bac

000124ec <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   124ec:	b580      	push	{r7, lr}
   124ee:	b084      	sub	sp, #16
   124f0:	af00      	add	r7, sp, #0
   124f2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   124f4:	687b      	ldr	r3, [r7, #4]
   124f6:	2b00      	cmp	r3, #0
   124f8:	bf14      	ite	ne
   124fa:	2301      	movne	r3, #1
   124fc:	2300      	moveq	r3, #0
   124fe:	b2db      	uxtb	r3, r3
   12500:	f240 3255 	movw	r2, #853	; 0x355
   12504:	4910      	ldr	r1, [pc, #64]	; (12548 <usbdc_init+0x5c>)
   12506:	4618      	mov	r0, r3
   12508:	4b10      	ldr	r3, [pc, #64]	; (1254c <usbdc_init+0x60>)
   1250a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   1250c:	4b10      	ldr	r3, [pc, #64]	; (12550 <usbdc_init+0x64>)
   1250e:	4798      	blx	r3
   12510:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   12512:	68fb      	ldr	r3, [r7, #12]
   12514:	2b00      	cmp	r3, #0
   12516:	da01      	bge.n	1251c <usbdc_init+0x30>
		return rc;
   12518:	68fb      	ldr	r3, [r7, #12]
   1251a:	e010      	b.n	1253e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   1251c:	2220      	movs	r2, #32
   1251e:	2100      	movs	r1, #0
   12520:	480c      	ldr	r0, [pc, #48]	; (12554 <usbdc_init+0x68>)
   12522:	4b0d      	ldr	r3, [pc, #52]	; (12558 <usbdc_init+0x6c>)
   12524:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   12526:	4a0b      	ldr	r2, [pc, #44]	; (12554 <usbdc_init+0x68>)
   12528:	687b      	ldr	r3, [r7, #4]
   1252a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   1252c:	490b      	ldr	r1, [pc, #44]	; (1255c <usbdc_init+0x70>)
   1252e:	2000      	movs	r0, #0
   12530:	4b0b      	ldr	r3, [pc, #44]	; (12560 <usbdc_init+0x74>)
   12532:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   12534:	490b      	ldr	r1, [pc, #44]	; (12564 <usbdc_init+0x78>)
   12536:	2001      	movs	r0, #1
   12538:	4b09      	ldr	r3, [pc, #36]	; (12560 <usbdc_init+0x74>)
   1253a:	4798      	blx	r3

	return 0;
   1253c:	2300      	movs	r3, #0
}
   1253e:	4618      	mov	r0, r3
   12540:	3710      	adds	r7, #16
   12542:	46bd      	mov	sp, r7
   12544:	bd80      	pop	{r7, pc}
   12546:	bf00      	nop
   12548:	00021ce8 	.word	0x00021ce8
   1254c:	00007e21 	.word	0x00007e21
   12550:	00007879 	.word	0x00007879
   12554:	20008ba0 	.word	0x20008ba0
   12558:	0001d4b1 	.word	0x0001d4b1
   1255c:	00012249 	.word	0x00012249
   12560:	00007925 	.word	0x00007925
   12564:	00012425 	.word	0x00012425

00012568 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   12568:	b580      	push	{r7, lr}
   1256a:	b082      	sub	sp, #8
   1256c:	af00      	add	r7, sp, #0
   1256e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   12570:	6879      	ldr	r1, [r7, #4]
   12572:	4803      	ldr	r0, [pc, #12]	; (12580 <usbdc_register_function+0x18>)
   12574:	4b03      	ldr	r3, [pc, #12]	; (12584 <usbdc_register_function+0x1c>)
   12576:	4798      	blx	r3
}
   12578:	bf00      	nop
   1257a:	3708      	adds	r7, #8
   1257c:	46bd      	mov	sp, r7
   1257e:	bd80      	pop	{r7, pc}
   12580:	20008bb0 	.word	0x20008bb0
   12584:	00007efd 	.word	0x00007efd

00012588 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   12588:	b580      	push	{r7, lr}
   1258a:	b082      	sub	sp, #8
   1258c:	af00      	add	r7, sp, #0
   1258e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   12590:	4b0f      	ldr	r3, [pc, #60]	; (125d0 <usbdc_start+0x48>)
   12592:	7e9b      	ldrb	r3, [r3, #26]
   12594:	2b00      	cmp	r3, #0
   12596:	d002      	beq.n	1259e <usbdc_start+0x16>
		return ERR_BUSY;
   12598:	f06f 0303 	mvn.w	r3, #3
   1259c:	e013      	b.n	125c6 <usbdc_start+0x3e>
	}

	if (desces) {
   1259e:	687b      	ldr	r3, [r7, #4]
   125a0:	2b00      	cmp	r3, #0
   125a2:	d00e      	beq.n	125c2 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   125a4:	4a0a      	ldr	r2, [pc, #40]	; (125d0 <usbdc_start+0x48>)
   125a6:	687b      	ldr	r3, [r7, #4]
   125a8:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   125aa:	687b      	ldr	r3, [r7, #4]
   125ac:	681b      	ldr	r3, [r3, #0]
   125ae:	79da      	ldrb	r2, [r3, #7]
   125b0:	4b07      	ldr	r3, [pc, #28]	; (125d0 <usbdc_start+0x48>)
   125b2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   125b4:	4b06      	ldr	r3, [pc, #24]	; (125d0 <usbdc_start+0x48>)
   125b6:	2201      	movs	r2, #1
   125b8:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   125ba:	4b06      	ldr	r3, [pc, #24]	; (125d4 <usbdc_start+0x4c>)
   125bc:	4798      	blx	r3
	return ERR_NONE;
   125be:	2300      	movs	r3, #0
   125c0:	e001      	b.n	125c6 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   125c2:	f06f 0308 	mvn.w	r3, #8
}
   125c6:	4618      	mov	r0, r3
   125c8:	3708      	adds	r7, #8
   125ca:	46bd      	mov	sp, r7
   125cc:	bd80      	pop	{r7, pc}
   125ce:	bf00      	nop
   125d0:	20008ba0 	.word	0x20008ba0
   125d4:	00007949 	.word	0x00007949

000125d8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   125d8:	b580      	push	{r7, lr}
   125da:	af00      	add	r7, sp, #0
	usb_d_attach();
   125dc:	4b01      	ldr	r3, [pc, #4]	; (125e4 <usbdc_attach+0xc>)
   125de:	4798      	blx	r3
}
   125e0:	bf00      	nop
   125e2:	bd80      	pop	{r7, pc}
   125e4:	0000795d 	.word	0x0000795d

000125e8 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   125e8:	b480      	push	{r7}
   125ea:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   125ec:	4b03      	ldr	r3, [pc, #12]	; (125fc <usbdc_get_ctrl_buffer+0x14>)
   125ee:	695b      	ldr	r3, [r3, #20]
}
   125f0:	4618      	mov	r0, r3
   125f2:	46bd      	mov	sp, r7
   125f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   125f8:	4770      	bx	lr
   125fa:	bf00      	nop
   125fc:	20008ba0 	.word	0x20008ba0

00012600 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   12600:	b480      	push	{r7}
   12602:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   12604:	4b07      	ldr	r3, [pc, #28]	; (12624 <usbdc_get_state+0x24>)
   12606:	7e9b      	ldrb	r3, [r3, #26]
   12608:	f003 0310 	and.w	r3, r3, #16
   1260c:	2b00      	cmp	r3, #0
   1260e:	d001      	beq.n	12614 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   12610:	2310      	movs	r3, #16
   12612:	e001      	b.n	12618 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   12614:	4b03      	ldr	r3, [pc, #12]	; (12624 <usbdc_get_state+0x24>)
   12616:	7e9b      	ldrb	r3, [r3, #26]
}
   12618:	4618      	mov	r0, r3
   1261a:	46bd      	mov	sp, r7
   1261c:	f85d 7b04 	ldr.w	r7, [sp], #4
   12620:	4770      	bx	lr
   12622:	bf00      	nop
   12624:	20008ba0 	.word	0x20008ba0

00012628 <usb_get_u16>:
{
   12628:	b480      	push	{r7}
   1262a:	b083      	sub	sp, #12
   1262c:	af00      	add	r7, sp, #0
   1262e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   12630:	687b      	ldr	r3, [r7, #4]
   12632:	781b      	ldrb	r3, [r3, #0]
   12634:	b29a      	uxth	r2, r3
   12636:	687b      	ldr	r3, [r7, #4]
   12638:	3301      	adds	r3, #1
   1263a:	781b      	ldrb	r3, [r3, #0]
   1263c:	b29b      	uxth	r3, r3
   1263e:	021b      	lsls	r3, r3, #8
   12640:	b29b      	uxth	r3, r3
   12642:	4413      	add	r3, r2
   12644:	b29b      	uxth	r3, r3
}
   12646:	4618      	mov	r0, r3
   12648:	370c      	adds	r7, #12
   1264a:	46bd      	mov	sp, r7
   1264c:	f85d 7b04 	ldr.w	r7, [sp], #4
   12650:	4770      	bx	lr

00012652 <usb_desc_len>:
{
   12652:	b480      	push	{r7}
   12654:	b083      	sub	sp, #12
   12656:	af00      	add	r7, sp, #0
   12658:	6078      	str	r0, [r7, #4]
	return desc[0];
   1265a:	687b      	ldr	r3, [r7, #4]
   1265c:	781b      	ldrb	r3, [r3, #0]
}
   1265e:	4618      	mov	r0, r3
   12660:	370c      	adds	r7, #12
   12662:	46bd      	mov	sp, r7
   12664:	f85d 7b04 	ldr.w	r7, [sp], #4
   12668:	4770      	bx	lr

0001266a <usb_desc_type>:
{
   1266a:	b480      	push	{r7}
   1266c:	b083      	sub	sp, #12
   1266e:	af00      	add	r7, sp, #0
   12670:	6078      	str	r0, [r7, #4]
	return desc[1];
   12672:	687b      	ldr	r3, [r7, #4]
   12674:	3301      	adds	r3, #1
   12676:	781b      	ldrb	r3, [r3, #0]
}
   12678:	4618      	mov	r0, r3
   1267a:	370c      	adds	r7, #12
   1267c:	46bd      	mov	sp, r7
   1267e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12682:	4770      	bx	lr

00012684 <usb_desc_next>:
{
   12684:	b580      	push	{r7, lr}
   12686:	b082      	sub	sp, #8
   12688:	af00      	add	r7, sp, #0
   1268a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   1268c:	6878      	ldr	r0, [r7, #4]
   1268e:	4b05      	ldr	r3, [pc, #20]	; (126a4 <usb_desc_next+0x20>)
   12690:	4798      	blx	r3
   12692:	4603      	mov	r3, r0
   12694:	461a      	mov	r2, r3
   12696:	687b      	ldr	r3, [r7, #4]
   12698:	4413      	add	r3, r2
}
   1269a:	4618      	mov	r0, r3
   1269c:	3708      	adds	r7, #8
   1269e:	46bd      	mov	sp, r7
   126a0:	bd80      	pop	{r7, pc}
   126a2:	bf00      	nop
   126a4:	00012653 	.word	0x00012653

000126a8 <usb_cfg_desc_total_len>:
{
   126a8:	b580      	push	{r7, lr}
   126aa:	b082      	sub	sp, #8
   126ac:	af00      	add	r7, sp, #0
   126ae:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   126b0:	687b      	ldr	r3, [r7, #4]
   126b2:	3302      	adds	r3, #2
   126b4:	4618      	mov	r0, r3
   126b6:	4b03      	ldr	r3, [pc, #12]	; (126c4 <usb_cfg_desc_total_len+0x1c>)
   126b8:	4798      	blx	r3
   126ba:	4603      	mov	r3, r0
}
   126bc:	4618      	mov	r0, r3
   126be:	3708      	adds	r7, #8
   126c0:	46bd      	mov	sp, r7
   126c2:	bd80      	pop	{r7, pc}
   126c4:	00012629 	.word	0x00012629

000126c8 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   126c8:	b580      	push	{r7, lr}
   126ca:	b082      	sub	sp, #8
   126cc:	af00      	add	r7, sp, #0
   126ce:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   126d0:	6878      	ldr	r0, [r7, #4]
   126d2:	4b05      	ldr	r3, [pc, #20]	; (126e8 <usb_cfg_desc_next+0x20>)
   126d4:	4798      	blx	r3
   126d6:	4603      	mov	r3, r0
   126d8:	461a      	mov	r2, r3
   126da:	687b      	ldr	r3, [r7, #4]
   126dc:	4413      	add	r3, r2
}
   126de:	4618      	mov	r0, r3
   126e0:	3708      	adds	r7, #8
   126e2:	46bd      	mov	sp, r7
   126e4:	bd80      	pop	{r7, pc}
   126e6:	bf00      	nop
   126e8:	000126a9 	.word	0x000126a9

000126ec <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   126ec:	b580      	push	{r7, lr}
   126ee:	b084      	sub	sp, #16
   126f0:	af00      	add	r7, sp, #0
   126f2:	60f8      	str	r0, [r7, #12]
   126f4:	60b9      	str	r1, [r7, #8]
   126f6:	4613      	mov	r3, r2
   126f8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   126fa:	e015      	b.n	12728 <usb_find_desc+0x3c>
		_desc_len_check();
   126fc:	68f8      	ldr	r0, [r7, #12]
   126fe:	4b0f      	ldr	r3, [pc, #60]	; (1273c <usb_find_desc+0x50>)
   12700:	4798      	blx	r3
   12702:	4603      	mov	r3, r0
   12704:	2b01      	cmp	r3, #1
   12706:	d801      	bhi.n	1270c <usb_find_desc+0x20>
   12708:	2300      	movs	r3, #0
   1270a:	e012      	b.n	12732 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   1270c:	68f8      	ldr	r0, [r7, #12]
   1270e:	4b0c      	ldr	r3, [pc, #48]	; (12740 <usb_find_desc+0x54>)
   12710:	4798      	blx	r3
   12712:	4603      	mov	r3, r0
   12714:	461a      	mov	r2, r3
   12716:	79fb      	ldrb	r3, [r7, #7]
   12718:	4293      	cmp	r3, r2
   1271a:	d101      	bne.n	12720 <usb_find_desc+0x34>
			return desc;
   1271c:	68fb      	ldr	r3, [r7, #12]
   1271e:	e008      	b.n	12732 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   12720:	68f8      	ldr	r0, [r7, #12]
   12722:	4b08      	ldr	r3, [pc, #32]	; (12744 <usb_find_desc+0x58>)
   12724:	4798      	blx	r3
   12726:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   12728:	68fa      	ldr	r2, [r7, #12]
   1272a:	68bb      	ldr	r3, [r7, #8]
   1272c:	429a      	cmp	r2, r3
   1272e:	d3e5      	bcc.n	126fc <usb_find_desc+0x10>
	}
	return NULL;
   12730:	2300      	movs	r3, #0
}
   12732:	4618      	mov	r0, r3
   12734:	3710      	adds	r7, #16
   12736:	46bd      	mov	sp, r7
   12738:	bd80      	pop	{r7, pc}
   1273a:	bf00      	nop
   1273c:	00012653 	.word	0x00012653
   12740:	0001266b 	.word	0x0001266b
   12744:	00012685 	.word	0x00012685

00012748 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   12748:	b580      	push	{r7, lr}
   1274a:	b082      	sub	sp, #8
   1274c:	af00      	add	r7, sp, #0
   1274e:	6078      	str	r0, [r7, #4]
   12750:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   12752:	e019      	b.n	12788 <usb_find_ep_desc+0x40>
		_desc_len_check();
   12754:	6878      	ldr	r0, [r7, #4]
   12756:	4b12      	ldr	r3, [pc, #72]	; (127a0 <usb_find_ep_desc+0x58>)
   12758:	4798      	blx	r3
   1275a:	4603      	mov	r3, r0
   1275c:	2b01      	cmp	r3, #1
   1275e:	d801      	bhi.n	12764 <usb_find_ep_desc+0x1c>
   12760:	2300      	movs	r3, #0
   12762:	e018      	b.n	12796 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   12764:	6878      	ldr	r0, [r7, #4]
   12766:	4b0f      	ldr	r3, [pc, #60]	; (127a4 <usb_find_ep_desc+0x5c>)
   12768:	4798      	blx	r3
   1276a:	4603      	mov	r3, r0
   1276c:	2b04      	cmp	r3, #4
   1276e:	d010      	beq.n	12792 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   12770:	6878      	ldr	r0, [r7, #4]
   12772:	4b0c      	ldr	r3, [pc, #48]	; (127a4 <usb_find_ep_desc+0x5c>)
   12774:	4798      	blx	r3
   12776:	4603      	mov	r3, r0
   12778:	2b05      	cmp	r3, #5
   1277a:	d101      	bne.n	12780 <usb_find_ep_desc+0x38>
			return desc;
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	e00a      	b.n	12796 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   12780:	6878      	ldr	r0, [r7, #4]
   12782:	4b09      	ldr	r3, [pc, #36]	; (127a8 <usb_find_ep_desc+0x60>)
   12784:	4798      	blx	r3
   12786:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   12788:	687a      	ldr	r2, [r7, #4]
   1278a:	683b      	ldr	r3, [r7, #0]
   1278c:	429a      	cmp	r2, r3
   1278e:	d3e1      	bcc.n	12754 <usb_find_ep_desc+0xc>
   12790:	e000      	b.n	12794 <usb_find_ep_desc+0x4c>
			break;
   12792:	bf00      	nop
	}
	return NULL;
   12794:	2300      	movs	r3, #0
}
   12796:	4618      	mov	r0, r3
   12798:	3708      	adds	r7, #8
   1279a:	46bd      	mov	sp, r7
   1279c:	bd80      	pop	{r7, pc}
   1279e:	bf00      	nop
   127a0:	00012653 	.word	0x00012653
   127a4:	0001266b 	.word	0x0001266b
   127a8:	00012685 	.word	0x00012685

000127ac <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   127ac:	b580      	push	{r7, lr}
   127ae:	b084      	sub	sp, #16
   127b0:	af00      	add	r7, sp, #0
   127b2:	60f8      	str	r0, [r7, #12]
   127b4:	60b9      	str	r1, [r7, #8]
   127b6:	4613      	mov	r3, r2
   127b8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   127ba:	2202      	movs	r2, #2
   127bc:	68b9      	ldr	r1, [r7, #8]
   127be:	68f8      	ldr	r0, [r7, #12]
   127c0:	4b15      	ldr	r3, [pc, #84]	; (12818 <usb_find_cfg_desc+0x6c>)
   127c2:	4798      	blx	r3
   127c4:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   127c6:	68fb      	ldr	r3, [r7, #12]
   127c8:	2b00      	cmp	r3, #0
   127ca:	d11a      	bne.n	12802 <usb_find_cfg_desc+0x56>
		return NULL;
   127cc:	2300      	movs	r3, #0
   127ce:	e01f      	b.n	12810 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   127d0:	68f8      	ldr	r0, [r7, #12]
   127d2:	4b12      	ldr	r3, [pc, #72]	; (1281c <usb_find_cfg_desc+0x70>)
   127d4:	4798      	blx	r3
   127d6:	4603      	mov	r3, r0
   127d8:	2b01      	cmp	r3, #1
   127da:	d801      	bhi.n	127e0 <usb_find_cfg_desc+0x34>
   127dc:	2300      	movs	r3, #0
   127de:	e017      	b.n	12810 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   127e0:	68fb      	ldr	r3, [r7, #12]
   127e2:	3301      	adds	r3, #1
   127e4:	781b      	ldrb	r3, [r3, #0]
   127e6:	2b02      	cmp	r3, #2
   127e8:	d110      	bne.n	1280c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   127ea:	68fb      	ldr	r3, [r7, #12]
   127ec:	3305      	adds	r3, #5
   127ee:	781b      	ldrb	r3, [r3, #0]
   127f0:	79fa      	ldrb	r2, [r7, #7]
   127f2:	429a      	cmp	r2, r3
   127f4:	d101      	bne.n	127fa <usb_find_cfg_desc+0x4e>
			return desc;
   127f6:	68fb      	ldr	r3, [r7, #12]
   127f8:	e00a      	b.n	12810 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   127fa:	68f8      	ldr	r0, [r7, #12]
   127fc:	4b08      	ldr	r3, [pc, #32]	; (12820 <usb_find_cfg_desc+0x74>)
   127fe:	4798      	blx	r3
   12800:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   12802:	68fa      	ldr	r2, [r7, #12]
   12804:	68bb      	ldr	r3, [r7, #8]
   12806:	429a      	cmp	r2, r3
   12808:	d3e2      	bcc.n	127d0 <usb_find_cfg_desc+0x24>
   1280a:	e000      	b.n	1280e <usb_find_cfg_desc+0x62>
			break;
   1280c:	bf00      	nop
	}
	return NULL;
   1280e:	2300      	movs	r3, #0
}
   12810:	4618      	mov	r0, r3
   12812:	3710      	adds	r7, #16
   12814:	46bd      	mov	sp, r7
   12816:	bd80      	pop	{r7, pc}
   12818:	000126ed 	.word	0x000126ed
   1281c:	00012653 	.word	0x00012653
   12820:	000126c9 	.word	0x000126c9

00012824 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   12824:	b580      	push	{r7, lr}
   12826:	b086      	sub	sp, #24
   12828:	af00      	add	r7, sp, #0
   1282a:	60f8      	str	r0, [r7, #12]
   1282c:	60b9      	str	r1, [r7, #8]
   1282e:	4613      	mov	r3, r2
   12830:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   12832:	2300      	movs	r3, #0
   12834:	75fb      	strb	r3, [r7, #23]
   12836:	e020      	b.n	1287a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   12838:	2203      	movs	r2, #3
   1283a:	68b9      	ldr	r1, [r7, #8]
   1283c:	68f8      	ldr	r0, [r7, #12]
   1283e:	4b13      	ldr	r3, [pc, #76]	; (1288c <usb_find_str_desc+0x68>)
   12840:	4798      	blx	r3
   12842:	60f8      	str	r0, [r7, #12]
		if (desc) {
   12844:	68fb      	ldr	r3, [r7, #12]
   12846:	2b00      	cmp	r3, #0
   12848:	d015      	beq.n	12876 <usb_find_str_desc+0x52>
			_desc_len_check();
   1284a:	68f8      	ldr	r0, [r7, #12]
   1284c:	4b10      	ldr	r3, [pc, #64]	; (12890 <usb_find_str_desc+0x6c>)
   1284e:	4798      	blx	r3
   12850:	4603      	mov	r3, r0
   12852:	2b01      	cmp	r3, #1
   12854:	d801      	bhi.n	1285a <usb_find_str_desc+0x36>
   12856:	2300      	movs	r3, #0
   12858:	e014      	b.n	12884 <usb_find_str_desc+0x60>
			if (i == str_index) {
   1285a:	7dfa      	ldrb	r2, [r7, #23]
   1285c:	79fb      	ldrb	r3, [r7, #7]
   1285e:	429a      	cmp	r2, r3
   12860:	d101      	bne.n	12866 <usb_find_str_desc+0x42>
				return desc;
   12862:	68fb      	ldr	r3, [r7, #12]
   12864:	e00e      	b.n	12884 <usb_find_str_desc+0x60>
			}
			i++;
   12866:	7dfb      	ldrb	r3, [r7, #23]
   12868:	3301      	adds	r3, #1
   1286a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   1286c:	68f8      	ldr	r0, [r7, #12]
   1286e:	4b09      	ldr	r3, [pc, #36]	; (12894 <usb_find_str_desc+0x70>)
   12870:	4798      	blx	r3
   12872:	60f8      	str	r0, [r7, #12]
   12874:	e001      	b.n	1287a <usb_find_str_desc+0x56>
		} else {
			return NULL;
   12876:	2300      	movs	r3, #0
   12878:	e004      	b.n	12884 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   1287a:	68fa      	ldr	r2, [r7, #12]
   1287c:	68bb      	ldr	r3, [r7, #8]
   1287e:	429a      	cmp	r2, r3
   12880:	d3da      	bcc.n	12838 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   12882:	2300      	movs	r3, #0
}
   12884:	4618      	mov	r0, r3
   12886:	3718      	adds	r7, #24
   12888:	46bd      	mov	sp, r7
   1288a:	bd80      	pop	{r7, pc}
   1288c:	000126ed 	.word	0x000126ed
   12890:	00012653 	.word	0x00012653
   12894:	00012685 	.word	0x00012685

00012898 <_ZN18ARINC_Buffer_ClassC2Ev>:
static 	uint8_t bufferReceiverBuffer[RX_LABELS_NUMBER][4];             // [# of buffers][16 bytes]
static	uint8_t	bufferTransmitBuffer[TX_LABELS_NUMBER][4];


// default constructor
ARINC_Buffer_Class::ARINC_Buffer_Class()
   12898:	b480      	push	{r7}
   1289a:	b083      	sub	sp, #12
   1289c:	af00      	add	r7, sp, #0
   1289e:	6078      	str	r0, [r7, #4]
   128a0:	6039      	str	r1, [r7, #0]
   128a2:	683b      	ldr	r3, [r7, #0]
   128a4:	681a      	ldr	r2, [r3, #0]
   128a6:	687b      	ldr	r3, [r7, #4]
   128a8:	601a      	str	r2, [r3, #0]
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	681b      	ldr	r3, [r3, #0]
   128ae:	3b0c      	subs	r3, #12
   128b0:	681b      	ldr	r3, [r3, #0]
   128b2:	461a      	mov	r2, r3
   128b4:	687b      	ldr	r3, [r7, #4]
   128b6:	4413      	add	r3, r2
   128b8:	683a      	ldr	r2, [r7, #0]
   128ba:	6852      	ldr	r2, [r2, #4]
   128bc:	601a      	str	r2, [r3, #0]
   128be:	687b      	ldr	r3, [r7, #4]
   128c0:	681b      	ldr	r3, [r3, #0]
   128c2:	3b10      	subs	r3, #16
   128c4:	681b      	ldr	r3, [r3, #0]
   128c6:	461a      	mov	r2, r3
   128c8:	687b      	ldr	r3, [r7, #4]
   128ca:	4413      	add	r3, r2
   128cc:	683a      	ldr	r2, [r7, #0]
   128ce:	6892      	ldr	r2, [r2, #8]
   128d0:	601a      	str	r2, [r3, #0]
{
	

	//receiverBuffer=            // [# of buffers][16 bytes]
	//transmitBuffer=&bufferTransmitBuffer[0];
} //ARINC_Buffer_Class
   128d2:	687b      	ldr	r3, [r7, #4]
   128d4:	4618      	mov	r0, r3
   128d6:	370c      	adds	r7, #12
   128d8:	46bd      	mov	sp, r7
   128da:	bc80      	pop	{r7}
   128dc:	4770      	bx	lr

000128de <_ZN18ARINC_Buffer_ClassD2Ev>:

// default destructor
ARINC_Buffer_Class::~ARINC_Buffer_Class()
   128de:	b480      	push	{r7}
   128e0:	b083      	sub	sp, #12
   128e2:	af00      	add	r7, sp, #0
   128e4:	6078      	str	r0, [r7, #4]
   128e6:	6039      	str	r1, [r7, #0]
   128e8:	683b      	ldr	r3, [r7, #0]
   128ea:	681a      	ldr	r2, [r3, #0]
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	601a      	str	r2, [r3, #0]
   128f0:	687b      	ldr	r3, [r7, #4]
   128f2:	681b      	ldr	r3, [r3, #0]
   128f4:	3b0c      	subs	r3, #12
   128f6:	681b      	ldr	r3, [r3, #0]
   128f8:	461a      	mov	r2, r3
   128fa:	687b      	ldr	r3, [r7, #4]
   128fc:	4413      	add	r3, r2
   128fe:	683a      	ldr	r2, [r7, #0]
   12900:	6852      	ldr	r2, [r2, #4]
   12902:	601a      	str	r2, [r3, #0]
   12904:	687b      	ldr	r3, [r7, #4]
   12906:	681b      	ldr	r3, [r3, #0]
   12908:	3b10      	subs	r3, #16
   1290a:	681b      	ldr	r3, [r3, #0]
   1290c:	461a      	mov	r2, r3
   1290e:	687b      	ldr	r3, [r7, #4]
   12910:	4413      	add	r3, r2
   12912:	683a      	ldr	r2, [r7, #0]
   12914:	6892      	ldr	r2, [r2, #8]
   12916:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Buffer_Class
   12918:	687b      	ldr	r3, [r7, #4]
   1291a:	4618      	mov	r0, r3
   1291c:	370c      	adds	r7, #12
   1291e:	46bd      	mov	sp, r7
   12920:	bc80      	pop	{r7}
   12922:	4770      	bx	lr

00012924 <_ZN18ARINC_Buffer_Class10InitBufferEv>:

void	ARINC_Buffer_Class::InitBuffer(void){
   12924:	b480      	push	{r7}
   12926:	b085      	sub	sp, #20
   12928:	af00      	add	r7, sp, #0
   1292a:	6078      	str	r0, [r7, #4]
	LabelsArrayTX=&bufferLabelsArrayTX[0];
   1292c:	687b      	ldr	r3, [r7, #4]
   1292e:	4a1a      	ldr	r2, [pc, #104]	; (12998 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x74>)
   12930:	605a      	str	r2, [r3, #4]
	LabelsArrayRX1=&bufferLabelsArrayRX1[0];
   12932:	687b      	ldr	r3, [r7, #4]
   12934:	4a19      	ldr	r2, [pc, #100]	; (1299c <_ZN18ARINC_Buffer_Class10InitBufferEv+0x78>)
   12936:	609a      	str	r2, [r3, #8]
	LabelsArrayRX2=&bufferLabelsArrayRX2[0];
   12938:	687b      	ldr	r3, [r7, #4]
   1293a:	4a19      	ldr	r2, [pc, #100]	; (129a0 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x7c>)
   1293c:	60da      	str	r2, [r3, #12]
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
   1293e:	2300      	movs	r3, #0
   12940:	73fb      	strb	r3, [r7, #15]
   12942:	7bfb      	ldrb	r3, [r7, #15]
   12944:	2b1f      	cmp	r3, #31
   12946:	dc17      	bgt.n	12978 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x54>
		{
			pointerArrayRX[i]=bufferReceiverBuffer[i];
   12948:	7bfb      	ldrb	r3, [r7, #15]
   1294a:	7bfa      	ldrb	r2, [r7, #15]
   1294c:	0092      	lsls	r2, r2, #2
   1294e:	4915      	ldr	r1, [pc, #84]	; (129a4 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x80>)
   12950:	440a      	add	r2, r1
   12952:	6879      	ldr	r1, [r7, #4]
   12954:	3328      	adds	r3, #40	; 0x28
   12956:	009b      	lsls	r3, r3, #2
   12958:	440b      	add	r3, r1
   1295a:	605a      	str	r2, [r3, #4]
			pointerArrayTX[i]=bufferTransmitBuffer[i];
   1295c:	7bfb      	ldrb	r3, [r7, #15]
   1295e:	7bfa      	ldrb	r2, [r7, #15]
   12960:	0092      	lsls	r2, r2, #2
   12962:	4911      	ldr	r1, [pc, #68]	; (129a8 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x84>)
   12964:	440a      	add	r2, r1
   12966:	6879      	ldr	r1, [r7, #4]
   12968:	3308      	adds	r3, #8
   1296a:	009b      	lsls	r3, r3, #2
   1296c:	440b      	add	r3, r1
   1296e:	605a      	str	r2, [r3, #4]
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
   12970:	7bfb      	ldrb	r3, [r7, #15]
   12972:	3301      	adds	r3, #1
   12974:	73fb      	strb	r3, [r7, #15]
   12976:	e7e4      	b.n	12942 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x1e>
		}
		receiverBuffer=pointerArrayRX;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
   1297e:	687b      	ldr	r3, [r7, #4]
   12980:	611a      	str	r2, [r3, #16]
		transmitBuffer=pointerArrayTX;
   12982:	687b      	ldr	r3, [r7, #4]
   12984:	f103 0224 	add.w	r2, r3, #36	; 0x24
   12988:	687b      	ldr	r3, [r7, #4]
   1298a:	615a      	str	r2, [r3, #20]
}
   1298c:	bf00      	nop
   1298e:	3714      	adds	r7, #20
   12990:	46bd      	mov	sp, r7
   12992:	bc80      	pop	{r7}
   12994:	4770      	bx	lr
   12996:	bf00      	nop
   12998:	20008bc0 	.word	0x20008bc0
   1299c:	20008be0 	.word	0x20008be0
   129a0:	20008c00 	.word	0x20008c00
   129a4:	20008c20 	.word	0x20008c20
   129a8:	20008ca0 	.word	0x20008ca0

000129ac <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv>:

void ARINC_Buffer_Class::SaveFlapperValveAngle(void){
   129ac:	b580      	push	{r7, lr}
   129ae:	b084      	sub	sp, #16
   129b0:	af00      	add	r7, sp, #0
   129b2:	6078      	str	r0, [r7, #4]
	octalLabel=Label2Byte(FlapperValveAngle);
   129b4:	687b      	ldr	r3, [r7, #4]
   129b6:	681b      	ldr	r3, [r3, #0]
   129b8:	3b0c      	subs	r3, #12
   129ba:	681b      	ldr	r3, [r3, #0]
   129bc:	461a      	mov	r2, r3
   129be:	687b      	ldr	r3, [r7, #4]
   129c0:	4413      	add	r3, r2
   129c2:	681b      	ldr	r3, [r3, #0]
   129c4:	3304      	adds	r3, #4
   129c6:	681b      	ldr	r3, [r3, #0]
   129c8:	687a      	ldr	r2, [r7, #4]
   129ca:	6812      	ldr	r2, [r2, #0]
   129cc:	3a0c      	subs	r2, #12
   129ce:	6812      	ldr	r2, [r2, #0]
   129d0:	4611      	mov	r1, r2
   129d2:	687a      	ldr	r2, [r7, #4]
   129d4:	440a      	add	r2, r1
   129d6:	f240 1113 	movw	r1, #275	; 0x113
   129da:	4610      	mov	r0, r2
   129dc:	4798      	blx	r3
   129de:	4603      	mov	r3, r0
   129e0:	461a      	mov	r2, r3
   129e2:	687b      	ldr	r3, [r7, #4]
   129e4:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   129e6:	687b      	ldr	r3, [r7, #4]
   129e8:	681b      	ldr	r3, [r3, #0]
   129ea:	3b0c      	subs	r3, #12
   129ec:	681b      	ldr	r3, [r3, #0]
   129ee:	461a      	mov	r2, r3
   129f0:	687b      	ldr	r3, [r7, #4]
   129f2:	1898      	adds	r0, r3, r2
   129f4:	687b      	ldr	r3, [r7, #4]
   129f6:	7e59      	ldrb	r1, [r3, #25]
   129f8:	687b      	ldr	r3, [r7, #4]
   129fa:	685b      	ldr	r3, [r3, #4]
   129fc:	461a      	mov	r2, r3
   129fe:	4b1b      	ldr	r3, [pc, #108]	; (12a6c <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xc0>)
   12a00:	4798      	blx	r3
   12a02:	4603      	mov	r3, r0
   12a04:	461a      	mov	r2, r3
   12a06:	687b      	ldr	r3, [r7, #4]
   12a08:	761a      	strb	r2, [r3, #24]
	uint8_t angle=fv1.GetCurrentAngle();
   12a0a:	4819      	ldr	r0, [pc, #100]	; (12a70 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xc4>)
   12a0c:	4b19      	ldr	r3, [pc, #100]	; (12a74 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xc8>)
   12a0e:	4798      	blx	r3
   12a10:	4603      	mov	r3, r0
   12a12:	73fb      	strb	r3, [r7, #15]
	data=MakeTXLabel275(angle);
   12a14:	687b      	ldr	r3, [r7, #4]
   12a16:	681b      	ldr	r3, [r3, #0]
   12a18:	3b10      	subs	r3, #16
   12a1a:	681b      	ldr	r3, [r3, #0]
   12a1c:	461a      	mov	r2, r3
   12a1e:	687b      	ldr	r3, [r7, #4]
   12a20:	4413      	add	r3, r2
   12a22:	7bfa      	ldrb	r2, [r7, #15]
   12a24:	4611      	mov	r1, r2
   12a26:	4618      	mov	r0, r3
   12a28:	4b13      	ldr	r3, [pc, #76]	; (12a78 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xcc>)
   12a2a:	4798      	blx	r3
   12a2c:	4602      	mov	r2, r0
   12a2e:	687b      	ldr	r3, [r7, #4]
   12a30:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12a32:	687b      	ldr	r3, [r7, #4]
   12a34:	681b      	ldr	r3, [r3, #0]
   12a36:	3b0c      	subs	r3, #12
   12a38:	681b      	ldr	r3, [r3, #0]
   12a3a:	461a      	mov	r2, r3
   12a3c:	687b      	ldr	r3, [r7, #4]
   12a3e:	1898      	adds	r0, r3, r2
   12a40:	687b      	ldr	r3, [r7, #4]
   12a42:	69d9      	ldr	r1, [r3, #28]
   12a44:	687b      	ldr	r3, [r7, #4]
   12a46:	3320      	adds	r3, #32
   12a48:	461a      	mov	r2, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xd0>)
   12a4c:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   12a4e:	687b      	ldr	r3, [r7, #4]
   12a50:	695a      	ldr	r2, [r3, #20]
   12a52:	687b      	ldr	r3, [r7, #4]
   12a54:	7e1b      	ldrb	r3, [r3, #24]
   12a56:	009b      	lsls	r3, r3, #2
   12a58:	4413      	add	r3, r2
   12a5a:	681b      	ldr	r3, [r3, #0]
   12a5c:	687a      	ldr	r2, [r7, #4]
   12a5e:	3220      	adds	r2, #32
   12a60:	6812      	ldr	r2, [r2, #0]
   12a62:	601a      	str	r2, [r3, #0]
}
   12a64:	bf00      	nop
   12a66:	3710      	adds	r7, #16
   12a68:	46bd      	mov	sp, r7
   12a6a:	bd80      	pop	{r7, pc}
   12a6c:	00012e87 	.word	0x00012e87
   12a70:	200098e8 	.word	0x200098e8
   12a74:	000151dd 	.word	0x000151dd
   12a78:	00014411 	.word	0x00014411
   12a7c:	00012f15 	.word	0x00012f15

00012a80 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv>:

void ARINC_Buffer_Class::SaveTemperature(void){
   12a80:	b590      	push	{r4, r7, lr}
   12a82:	b085      	sub	sp, #20
   12a84:	af00      	add	r7, sp, #0
   12a86:	6078      	str	r0, [r7, #4]
	octalLabel=Label2Byte(COCKPITS_TEMPERATURE);
   12a88:	687b      	ldr	r3, [r7, #4]
   12a8a:	681b      	ldr	r3, [r3, #0]
   12a8c:	3b0c      	subs	r3, #12
   12a8e:	681b      	ldr	r3, [r3, #0]
   12a90:	461a      	mov	r2, r3
   12a92:	687b      	ldr	r3, [r7, #4]
   12a94:	4413      	add	r3, r2
   12a96:	681b      	ldr	r3, [r3, #0]
   12a98:	3304      	adds	r3, #4
   12a9a:	681b      	ldr	r3, [r3, #0]
   12a9c:	687a      	ldr	r2, [r7, #4]
   12a9e:	6812      	ldr	r2, [r2, #0]
   12aa0:	3a0c      	subs	r2, #12
   12aa2:	6812      	ldr	r2, [r2, #0]
   12aa4:	4611      	mov	r1, r2
   12aa6:	687a      	ldr	r2, [r7, #4]
   12aa8:	440a      	add	r2, r1
   12aaa:	f44f 71bb 	mov.w	r1, #374	; 0x176
   12aae:	4610      	mov	r0, r2
   12ab0:	4798      	blx	r3
   12ab2:	4603      	mov	r3, r0
   12ab4:	461a      	mov	r2, r3
   12ab6:	687b      	ldr	r3, [r7, #4]
   12ab8:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   12aba:	687b      	ldr	r3, [r7, #4]
   12abc:	681b      	ldr	r3, [r3, #0]
   12abe:	3b0c      	subs	r3, #12
   12ac0:	681b      	ldr	r3, [r3, #0]
   12ac2:	461a      	mov	r2, r3
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	1898      	adds	r0, r3, r2
   12ac8:	687b      	ldr	r3, [r7, #4]
   12aca:	7e59      	ldrb	r1, [r3, #25]
   12acc:	687b      	ldr	r3, [r7, #4]
   12ace:	685b      	ldr	r3, [r3, #4]
   12ad0:	461a      	mov	r2, r3
   12ad2:	4b21      	ldr	r3, [pc, #132]	; (12b58 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xd8>)
   12ad4:	4798      	blx	r3
   12ad6:	4603      	mov	r3, r0
   12ad8:	461a      	mov	r2, r3
   12ada:	687b      	ldr	r3, [r7, #4]
   12adc:	761a      	strb	r2, [r3, #24]
	float temperature=temperatures.values[0][1];
   12ade:	4b1f      	ldr	r3, [pc, #124]	; (12b5c <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xdc>)
   12ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12ae2:	60fb      	str	r3, [r7, #12]
	data=MakeLabel374(FloatTwoComplement(temperature,15),temperature);
   12ae4:	687b      	ldr	r3, [r7, #4]
   12ae6:	681b      	ldr	r3, [r3, #0]
   12ae8:	3b10      	subs	r3, #16
   12aea:	681b      	ldr	r3, [r3, #0]
   12aec:	461a      	mov	r2, r3
   12aee:	687b      	ldr	r3, [r7, #4]
   12af0:	189c      	adds	r4, r3, r2
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	3b0c      	subs	r3, #12
   12af8:	681b      	ldr	r3, [r3, #0]
   12afa:	461a      	mov	r2, r3
   12afc:	687b      	ldr	r3, [r7, #4]
   12afe:	4413      	add	r3, r2
   12b00:	220f      	movs	r2, #15
   12b02:	68f9      	ldr	r1, [r7, #12]
   12b04:	4618      	mov	r0, r3
   12b06:	4b16      	ldr	r3, [pc, #88]	; (12b60 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe0>)
   12b08:	4798      	blx	r3
   12b0a:	4603      	mov	r3, r0
   12b0c:	68fa      	ldr	r2, [r7, #12]
   12b0e:	4619      	mov	r1, r3
   12b10:	4620      	mov	r0, r4
   12b12:	4b14      	ldr	r3, [pc, #80]	; (12b64 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe4>)
   12b14:	4798      	blx	r3
   12b16:	4602      	mov	r2, r0
   12b18:	687b      	ldr	r3, [r7, #4]
   12b1a:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12b1c:	687b      	ldr	r3, [r7, #4]
   12b1e:	681b      	ldr	r3, [r3, #0]
   12b20:	3b0c      	subs	r3, #12
   12b22:	681b      	ldr	r3, [r3, #0]
   12b24:	461a      	mov	r2, r3
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	1898      	adds	r0, r3, r2
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	69d9      	ldr	r1, [r3, #28]
   12b2e:	687b      	ldr	r3, [r7, #4]
   12b30:	3320      	adds	r3, #32
   12b32:	461a      	mov	r2, r3
   12b34:	4b0c      	ldr	r3, [pc, #48]	; (12b68 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe8>)
   12b36:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   12b38:	687b      	ldr	r3, [r7, #4]
   12b3a:	695a      	ldr	r2, [r3, #20]
   12b3c:	687b      	ldr	r3, [r7, #4]
   12b3e:	7e1b      	ldrb	r3, [r3, #24]
   12b40:	009b      	lsls	r3, r3, #2
   12b42:	4413      	add	r3, r2
   12b44:	681b      	ldr	r3, [r3, #0]
   12b46:	687a      	ldr	r2, [r7, #4]
   12b48:	3220      	adds	r2, #32
   12b4a:	6812      	ldr	r2, [r2, #0]
   12b4c:	601a      	str	r2, [r3, #0]
}
   12b4e:	bf00      	nop
   12b50:	3714      	adds	r7, #20
   12b52:	46bd      	mov	sp, r7
   12b54:	bd90      	pop	{r4, r7, pc}
   12b56:	bf00      	nop
   12b58:	00012e87 	.word	0x00012e87
   12b5c:	20009a5c 	.word	0x20009a5c
   12b60:	00012f59 	.word	0x00012f59
   12b64:	00014379 	.word	0x00014379
   12b68:	00012f15 	.word	0x00012f15

00012b6c <_ZN18ARINC_Buffer_Class10SaveStatusEm>:

void ARINC_Buffer_Class::SaveStatus(uint32_t st){
   12b6c:	b580      	push	{r7, lr}
   12b6e:	b082      	sub	sp, #8
   12b70:	af00      	add	r7, sp, #0
   12b72:	6078      	str	r0, [r7, #4]
   12b74:	6039      	str	r1, [r7, #0]
	octalLabel=Label2Byte(ECS_COMMAND_ACKNOWLEDGE);
   12b76:	687b      	ldr	r3, [r7, #4]
   12b78:	681b      	ldr	r3, [r3, #0]
   12b7a:	3b0c      	subs	r3, #12
   12b7c:	681b      	ldr	r3, [r3, #0]
   12b7e:	461a      	mov	r2, r3
   12b80:	687b      	ldr	r3, [r7, #4]
   12b82:	4413      	add	r3, r2
   12b84:	681b      	ldr	r3, [r3, #0]
   12b86:	3304      	adds	r3, #4
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	687a      	ldr	r2, [r7, #4]
   12b8c:	6812      	ldr	r2, [r2, #0]
   12b8e:	3a0c      	subs	r2, #12
   12b90:	6812      	ldr	r2, [r2, #0]
   12b92:	4611      	mov	r1, r2
   12b94:	687a      	ldr	r2, [r7, #4]
   12b96:	440a      	add	r2, r1
   12b98:	f44f 7187 	mov.w	r1, #270	; 0x10e
   12b9c:	4610      	mov	r0, r2
   12b9e:	4798      	blx	r3
   12ba0:	4603      	mov	r3, r0
   12ba2:	461a      	mov	r2, r3
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   12ba8:	687b      	ldr	r3, [r7, #4]
   12baa:	681b      	ldr	r3, [r3, #0]
   12bac:	3b0c      	subs	r3, #12
   12bae:	681b      	ldr	r3, [r3, #0]
   12bb0:	461a      	mov	r2, r3
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	1898      	adds	r0, r3, r2
   12bb6:	687b      	ldr	r3, [r7, #4]
   12bb8:	7e59      	ldrb	r1, [r3, #25]
   12bba:	687b      	ldr	r3, [r7, #4]
   12bbc:	685b      	ldr	r3, [r3, #4]
   12bbe:	461a      	mov	r2, r3
   12bc0:	4b18      	ldr	r3, [pc, #96]	; (12c24 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xb8>)
   12bc2:	4798      	blx	r3
   12bc4:	4603      	mov	r3, r0
   12bc6:	461a      	mov	r2, r3
   12bc8:	687b      	ldr	r3, [r7, #4]
   12bca:	761a      	strb	r2, [r3, #24]
	data=MakeLabel270(st);
   12bcc:	687b      	ldr	r3, [r7, #4]
   12bce:	681b      	ldr	r3, [r3, #0]
   12bd0:	3b10      	subs	r3, #16
   12bd2:	681b      	ldr	r3, [r3, #0]
   12bd4:	461a      	mov	r2, r3
   12bd6:	687b      	ldr	r3, [r7, #4]
   12bd8:	4413      	add	r3, r2
   12bda:	6839      	ldr	r1, [r7, #0]
   12bdc:	4618      	mov	r0, r3
   12bde:	4b12      	ldr	r3, [pc, #72]	; (12c28 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xbc>)
   12be0:	4798      	blx	r3
   12be2:	4602      	mov	r2, r0
   12be4:	687b      	ldr	r3, [r7, #4]
   12be6:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12be8:	687b      	ldr	r3, [r7, #4]
   12bea:	681b      	ldr	r3, [r3, #0]
   12bec:	3b0c      	subs	r3, #12
   12bee:	681b      	ldr	r3, [r3, #0]
   12bf0:	461a      	mov	r2, r3
   12bf2:	687b      	ldr	r3, [r7, #4]
   12bf4:	1898      	adds	r0, r3, r2
   12bf6:	687b      	ldr	r3, [r7, #4]
   12bf8:	69d9      	ldr	r1, [r3, #28]
   12bfa:	687b      	ldr	r3, [r7, #4]
   12bfc:	3320      	adds	r3, #32
   12bfe:	461a      	mov	r2, r3
   12c00:	4b0a      	ldr	r3, [pc, #40]	; (12c2c <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xc0>)
   12c02:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   12c04:	687b      	ldr	r3, [r7, #4]
   12c06:	695a      	ldr	r2, [r3, #20]
   12c08:	687b      	ldr	r3, [r7, #4]
   12c0a:	7e1b      	ldrb	r3, [r3, #24]
   12c0c:	009b      	lsls	r3, r3, #2
   12c0e:	4413      	add	r3, r2
   12c10:	681b      	ldr	r3, [r3, #0]
   12c12:	687a      	ldr	r2, [r7, #4]
   12c14:	3220      	adds	r2, #32
   12c16:	6812      	ldr	r2, [r2, #0]
   12c18:	601a      	str	r2, [r3, #0]
}
   12c1a:	bf00      	nop
   12c1c:	3708      	adds	r7, #8
   12c1e:	46bd      	mov	sp, r7
   12c20:	bd80      	pop	{r7, pc}
   12c22:	bf00      	nop
   12c24:	00012e87 	.word	0x00012e87
   12c28:	00014489 	.word	0x00014489
   12c2c:	00012f15 	.word	0x00012f15

00012c30 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh>:

void ARINC_Buffer_Class::SortReceivedData(uint8_t* receiver){
   12c30:	b480      	push	{r7}
   12c32:	b085      	sub	sp, #20
   12c34:	af00      	add	r7, sp, #0
   12c36:	6078      	str	r0, [r7, #4]
   12c38:	6039      	str	r1, [r7, #0]
		uint8_t i,j,l;
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
   12c3a:	2300      	movs	r3, #0
   12c3c:	73fb      	strb	r3, [r7, #15]
   12c3e:	7bfb      	ldrb	r3, [r7, #15]
   12c40:	2b1f      	cmp	r3, #31
   12c42:	dc1d      	bgt.n	12c80 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x50>
		{
			if (LabelsArrayRX1[i]>0)
   12c44:	687b      	ldr	r3, [r7, #4]
   12c46:	689a      	ldr	r2, [r3, #8]
   12c48:	7bfb      	ldrb	r3, [r7, #15]
   12c4a:	4413      	add	r3, r2
   12c4c:	781b      	ldrb	r3, [r3, #0]
   12c4e:	2b00      	cmp	r3, #0
   12c50:	dd12      	ble.n	12c78 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x48>
			{
			
					if (receiver[3]==LabelsArrayRX1[i])
   12c52:	683b      	ldr	r3, [r7, #0]
   12c54:	3303      	adds	r3, #3
   12c56:	781a      	ldrb	r2, [r3, #0]
   12c58:	687b      	ldr	r3, [r7, #4]
   12c5a:	6899      	ldr	r1, [r3, #8]
   12c5c:	7bfb      	ldrb	r3, [r7, #15]
   12c5e:	440b      	add	r3, r1
   12c60:	781b      	ldrb	r3, [r3, #0]
   12c62:	429a      	cmp	r2, r3
   12c64:	d108      	bne.n	12c78 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x48>
					{
						memcpy(receiverBuffer[i],receiver,4);
   12c66:	687b      	ldr	r3, [r7, #4]
   12c68:	691a      	ldr	r2, [r3, #16]
   12c6a:	7bfb      	ldrb	r3, [r7, #15]
   12c6c:	009b      	lsls	r3, r3, #2
   12c6e:	4413      	add	r3, r2
   12c70:	681b      	ldr	r3, [r3, #0]
   12c72:	683a      	ldr	r2, [r7, #0]
   12c74:	6812      	ldr	r2, [r2, #0]
   12c76:	601a      	str	r2, [r3, #0]
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
   12c78:	7bfb      	ldrb	r3, [r7, #15]
   12c7a:	3301      	adds	r3, #1
   12c7c:	73fb      	strb	r3, [r7, #15]
   12c7e:	e7de      	b.n	12c3e <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0xe>
					}
			
	
			}
		}
   12c80:	bf00      	nop
   12c82:	3714      	adds	r7, #20
   12c84:	46bd      	mov	sp, r7
   12c86:	bc80      	pop	{r7}
   12c88:	4770      	bx	lr
	...

00012c8c <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
   12c8c:	b480      	push	{r7}
   12c8e:	b083      	sub	sp, #12
   12c90:	af00      	add	r7, sp, #0
   12c92:	6078      	str	r0, [r7, #4]
   12c94:	4a04      	ldr	r2, [pc, #16]	; (12ca8 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
   12c96:	687b      	ldr	r3, [r7, #4]
   12c98:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
   12c9a:	687b      	ldr	r3, [r7, #4]
   12c9c:	4618      	mov	r0, r3
   12c9e:	370c      	adds	r7, #12
   12ca0:	46bd      	mov	sp, r7
   12ca2:	bc80      	pop	{r7}
   12ca4:	4770      	bx	lr
   12ca6:	bf00      	nop
   12ca8:	00021d08 	.word	0x00021d08

00012cac <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
   12cac:	b480      	push	{r7}
   12cae:	b083      	sub	sp, #12
   12cb0:	af00      	add	r7, sp, #0
   12cb2:	6078      	str	r0, [r7, #4]
   12cb4:	4a04      	ldr	r2, [pc, #16]	; (12cc8 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
   12cb6:	687b      	ldr	r3, [r7, #4]
   12cb8:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
   12cba:	687b      	ldr	r3, [r7, #4]
   12cbc:	4618      	mov	r0, r3
   12cbe:	370c      	adds	r7, #12
   12cc0:	46bd      	mov	sp, r7
   12cc2:	bc80      	pop	{r7}
   12cc4:	4770      	bx	lr
   12cc6:	bf00      	nop
   12cc8:	00021d08 	.word	0x00021d08

00012ccc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   12ccc:	b5b0      	push	{r4, r5, r7, lr}
   12cce:	b082      	sub	sp, #8
   12cd0:	af00      	add	r7, sp, #0
   12cd2:	6078      	str	r0, [r7, #4]
   12cd4:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   12cd6:	4b0a      	ldr	r3, [pc, #40]	; (12d00 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   12cd8:	6878      	ldr	r0, [r7, #4]
   12cda:	4798      	blx	r3
   12cdc:	4604      	mov	r4, r0
   12cde:	460d      	mov	r5, r1
   12ce0:	4b07      	ldr	r3, [pc, #28]	; (12d00 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   12ce2:	6838      	ldr	r0, [r7, #0]
   12ce4:	4798      	blx	r3
   12ce6:	4602      	mov	r2, r0
   12ce8:	460b      	mov	r3, r1
   12cea:	4620      	mov	r0, r4
   12cec:	4629      	mov	r1, r5
   12cee:	4c05      	ldr	r4, [pc, #20]	; (12d04 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
   12cf0:	47a0      	blx	r4
   12cf2:	4603      	mov	r3, r0
   12cf4:	460c      	mov	r4, r1
    }
   12cf6:	4618      	mov	r0, r3
   12cf8:	4621      	mov	r1, r4
   12cfa:	3708      	adds	r7, #8
   12cfc:	46bd      	mov	sp, r7
   12cfe:	bdb0      	pop	{r4, r5, r7, pc}
   12d00:	0001c0e1 	.word	0x0001c0e1
   12d04:	00019c61 	.word	0x00019c61

00012d08 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   12d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12d0c:	b085      	sub	sp, #20
   12d0e:	af00      	add	r7, sp, #0
   12d10:	6078      	str	r0, [r7, #4]
   12d12:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
   12d14:	2300      	movs	r3, #0
   12d16:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   12d18:	2300      	movs	r3, #0
   12d1a:	73bb      	strb	r3, [r7, #14]
   12d1c:	7bbb      	ldrb	r3, [r7, #14]
   12d1e:	2b02      	cmp	r3, #2
   12d20:	d86d      	bhi.n	12dfe <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   12d22:	7bbb      	ldrb	r3, [r7, #14]
   12d24:	f1c3 0402 	rsb	r4, r3, #2
   12d28:	4b3c      	ldr	r3, [pc, #240]	; (12e1c <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   12d2a:	6838      	ldr	r0, [r7, #0]
   12d2c:	4798      	blx	r3
   12d2e:	4680      	mov	r8, r0
   12d30:	4689      	mov	r9, r1
   12d32:	7bbb      	ldrb	r3, [r7, #14]
   12d34:	f1c3 0302 	rsb	r3, r3, #2
   12d38:	4619      	mov	r1, r3
   12d3a:	200a      	movs	r0, #10
   12d3c:	4b38      	ldr	r3, [pc, #224]	; (12e20 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   12d3e:	4798      	blx	r3
   12d40:	4602      	mov	r2, r0
   12d42:	460b      	mov	r3, r1
   12d44:	4d37      	ldr	r5, [pc, #220]	; (12e24 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
   12d46:	4640      	mov	r0, r8
   12d48:	4649      	mov	r1, r9
   12d4a:	47a8      	blx	r5
   12d4c:	4602      	mov	r2, r0
   12d4e:	460b      	mov	r3, r1
   12d50:	4611      	mov	r1, r2
   12d52:	461a      	mov	r2, r3
   12d54:	4b34      	ldr	r3, [pc, #208]	; (12e28 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   12d56:	4608      	mov	r0, r1
   12d58:	4611      	mov	r1, r2
   12d5a:	4798      	blx	r3
   12d5c:	4603      	mov	r3, r0
   12d5e:	b2da      	uxtb	r2, r3
   12d60:	f107 0310 	add.w	r3, r7, #16
   12d64:	4423      	add	r3, r4
   12d66:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
   12d6a:	7bbb      	ldrb	r3, [r7, #14]
   12d6c:	f1c3 0302 	rsb	r3, r3, #2
   12d70:	f107 0210 	add.w	r2, r7, #16
   12d74:	4413      	add	r3, r2
   12d76:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   12d7a:	461a      	mov	r2, r3
   12d7c:	4b2b      	ldr	r3, [pc, #172]	; (12e2c <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
   12d7e:	4610      	mov	r0, r2
   12d80:	4798      	blx	r3
   12d82:	4605      	mov	r5, r0
   12d84:	460e      	mov	r6, r1
   12d86:	7bbb      	ldrb	r3, [r7, #14]
   12d88:	f1c3 0302 	rsb	r3, r3, #2
   12d8c:	4619      	mov	r1, r3
   12d8e:	200a      	movs	r0, #10
   12d90:	4b23      	ldr	r3, [pc, #140]	; (12e20 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   12d92:	4798      	blx	r3
   12d94:	4602      	mov	r2, r0
   12d96:	460b      	mov	r3, r1
   12d98:	4c25      	ldr	r4, [pc, #148]	; (12e30 <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
   12d9a:	4628      	mov	r0, r5
   12d9c:	4631      	mov	r1, r6
   12d9e:	47a0      	blx	r4
   12da0:	4603      	mov	r3, r0
   12da2:	460c      	mov	r4, r1
   12da4:	461d      	mov	r5, r3
   12da6:	4626      	mov	r6, r4
   12da8:	4b1c      	ldr	r3, [pc, #112]	; (12e1c <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   12daa:	6838      	ldr	r0, [r7, #0]
   12dac:	4798      	blx	r3
   12dae:	4c21      	ldr	r4, [pc, #132]	; (12e34 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
   12db0:	462a      	mov	r2, r5
   12db2:	4633      	mov	r3, r6
   12db4:	47a0      	blx	r4
   12db6:	4603      	mov	r3, r0
   12db8:	460c      	mov	r4, r1
   12dba:	4619      	mov	r1, r3
   12dbc:	4622      	mov	r2, r4
   12dbe:	4b1a      	ldr	r3, [pc, #104]	; (12e28 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   12dc0:	4608      	mov	r0, r1
   12dc2:	4611      	mov	r1, r2
   12dc4:	4798      	blx	r3
   12dc6:	4603      	mov	r3, r0
   12dc8:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
   12dca:	7bbb      	ldrb	r3, [r7, #14]
   12dcc:	f1c3 0302 	rsb	r3, r3, #2
   12dd0:	f107 0210 	add.w	r2, r7, #16
   12dd4:	4413      	add	r3, r2
   12dd6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   12dda:	461a      	mov	r2, r3
   12ddc:	7bbb      	ldrb	r3, [r7, #14]
   12dde:	4619      	mov	r1, r3
   12de0:	009b      	lsls	r3, r3, #2
   12de2:	1acb      	subs	r3, r1, r3
   12de4:	3306      	adds	r3, #6
   12de6:	fa02 f303 	lsl.w	r3, r2, r3
   12dea:	b25a      	sxtb	r2, r3
   12dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
   12df0:	4313      	orrs	r3, r2
   12df2:	b25b      	sxtb	r3, r3
   12df4:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   12df6:	7bbb      	ldrb	r3, [r7, #14]
   12df8:	3301      	adds	r3, #1
   12dfa:	73bb      	strb	r3, [r7, #14]
   12dfc:	e78e      	b.n	12d1c <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
   12dfe:	687b      	ldr	r3, [r7, #4]
   12e00:	681b      	ldr	r3, [r3, #0]
   12e02:	681b      	ldr	r3, [r3, #0]
   12e04:	7bfa      	ldrb	r2, [r7, #15]
   12e06:	4611      	mov	r1, r2
   12e08:	6878      	ldr	r0, [r7, #4]
   12e0a:	4798      	blx	r3
   12e0c:	4603      	mov	r3, r0
   12e0e:	73fb      	strb	r3, [r7, #15]
	return result;
   12e10:	7bfb      	ldrb	r3, [r7, #15]
	
}
   12e12:	4618      	mov	r0, r3
   12e14:	3714      	adds	r7, #20
   12e16:	46bd      	mov	sp, r7
   12e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12e1c:	0001c0c1 	.word	0x0001c0c1
   12e20:	00012ccd 	.word	0x00012ccd
   12e24:	0001c401 	.word	0x0001c401
   12e28:	0001c75d 	.word	0x0001c75d
   12e2c:	0001c0e1 	.word	0x0001c0e1
   12e30:	0001c1ad 	.word	0x0001c1ad
   12e34:	0001be45 	.word	0x0001be45

00012e38 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
   12e38:	b480      	push	{r7}
   12e3a:	b085      	sub	sp, #20
   12e3c:	af00      	add	r7, sp, #0
   12e3e:	6078      	str	r0, [r7, #4]
   12e40:	460b      	mov	r3, r1
   12e42:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
   12e44:	2300      	movs	r3, #0
   12e46:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   12e48:	2300      	movs	r3, #0
   12e4a:	60bb      	str	r3, [r7, #8]
   12e4c:	68bb      	ldr	r3, [r7, #8]
   12e4e:	2b07      	cmp	r3, #7
   12e50:	dc13      	bgt.n	12e7a <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
   12e52:	7bfb      	ldrb	r3, [r7, #15]
   12e54:	005b      	lsls	r3, r3, #1
   12e56:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   12e58:	78fa      	ldrb	r2, [r7, #3]
   12e5a:	68bb      	ldr	r3, [r7, #8]
   12e5c:	fa42 f303 	asr.w	r3, r2, r3
   12e60:	b25b      	sxtb	r3, r3
   12e62:	f003 0301 	and.w	r3, r3, #1
   12e66:	b25a      	sxtb	r2, r3
   12e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
   12e6c:	4313      	orrs	r3, r2
   12e6e:	b25b      	sxtb	r3, r3
   12e70:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   12e72:	68bb      	ldr	r3, [r7, #8]
   12e74:	3301      	adds	r3, #1
   12e76:	60bb      	str	r3, [r7, #8]
   12e78:	e7e8      	b.n	12e4c <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
   12e7a:	7bfb      	ldrb	r3, [r7, #15]
}
   12e7c:	4618      	mov	r0, r3
   12e7e:	3714      	adds	r7, #20
   12e80:	46bd      	mov	sp, r7
   12e82:	bc80      	pop	{r7}
   12e84:	4770      	bx	lr

00012e86 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh>:
uint8_t ARINC_Conversions::GetIndexTXLabelarray(uint8_t l, uint8_t* arr){
   12e86:	b480      	push	{r7}
   12e88:	b087      	sub	sp, #28
   12e8a:	af00      	add	r7, sp, #0
   12e8c:	60f8      	str	r0, [r7, #12]
   12e8e:	460b      	mov	r3, r1
   12e90:	607a      	str	r2, [r7, #4]
   12e92:	72fb      	strb	r3, [r7, #11]
	for (uint8_t ii = 0; ii < 32; ii++)
   12e94:	2300      	movs	r3, #0
   12e96:	75fb      	strb	r3, [r7, #23]
   12e98:	7dfb      	ldrb	r3, [r7, #23]
   12e9a:	2b1f      	cmp	r3, #31
   12e9c:	dc0c      	bgt.n	12eb8 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x32>
	{
		if (arr[ii]==l)
   12e9e:	7dfb      	ldrb	r3, [r7, #23]
   12ea0:	687a      	ldr	r2, [r7, #4]
   12ea2:	4413      	add	r3, r2
   12ea4:	781b      	ldrb	r3, [r3, #0]
   12ea6:	7afa      	ldrb	r2, [r7, #11]
   12ea8:	429a      	cmp	r2, r3
   12eaa:	d101      	bne.n	12eb0 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x2a>
		{
			return ii;
   12eac:	7dfb      	ldrb	r3, [r7, #23]
   12eae:	e004      	b.n	12eba <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x34>
	for (uint8_t ii = 0; ii < 32; ii++)
   12eb0:	7dfb      	ldrb	r3, [r7, #23]
   12eb2:	3301      	adds	r3, #1
   12eb4:	75fb      	strb	r3, [r7, #23]
   12eb6:	e7ef      	b.n	12e98 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x12>
		}
		
	}
	return 32;
   12eb8:	2320      	movs	r3, #32
}
   12eba:	4618      	mov	r0, r3
   12ebc:	371c      	adds	r7, #28
   12ebe:	46bd      	mov	sp, r7
   12ec0:	bc80      	pop	{r7}
   12ec2:	4770      	bx	lr

00012ec4 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh>:
		
	}


}
uint32_t	ARINC_Conversions::FourBytesArray2Uint32(uint8_t* arr){
   12ec4:	b480      	push	{r7}
   12ec6:	b085      	sub	sp, #20
   12ec8:	af00      	add	r7, sp, #0
   12eca:	6078      	str	r0, [r7, #4]
   12ecc:	6039      	str	r1, [r7, #0]

		result=0;
   12ece:	687b      	ldr	r3, [r7, #4]
   12ed0:	2200      	movs	r2, #0
   12ed2:	609a      	str	r2, [r3, #8]
		for (uint8_t ii = 0; ii < 4; ii++)
   12ed4:	2300      	movs	r3, #0
   12ed6:	73fb      	strb	r3, [r7, #15]
   12ed8:	7bfb      	ldrb	r3, [r7, #15]
   12eda:	2b03      	cmp	r3, #3
   12edc:	dc13      	bgt.n	12f06 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x42>
		{
			result|=((uint32_t)arr[ii])<<(24-ii*8);
   12ede:	687b      	ldr	r3, [r7, #4]
   12ee0:	689a      	ldr	r2, [r3, #8]
   12ee2:	7bfb      	ldrb	r3, [r7, #15]
   12ee4:	6839      	ldr	r1, [r7, #0]
   12ee6:	440b      	add	r3, r1
   12ee8:	781b      	ldrb	r3, [r3, #0]
   12eea:	4619      	mov	r1, r3
   12eec:	7bfb      	ldrb	r3, [r7, #15]
   12eee:	f1c3 0303 	rsb	r3, r3, #3
   12ef2:	00db      	lsls	r3, r3, #3
   12ef4:	fa01 f303 	lsl.w	r3, r1, r3
   12ef8:	431a      	orrs	r2, r3
   12efa:	687b      	ldr	r3, [r7, #4]
   12efc:	609a      	str	r2, [r3, #8]
		for (uint8_t ii = 0; ii < 4; ii++)
   12efe:	7bfb      	ldrb	r3, [r7, #15]
   12f00:	3301      	adds	r3, #1
   12f02:	73fb      	strb	r3, [r7, #15]
   12f04:	e7e8      	b.n	12ed8 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x14>

		}
		return result;
   12f06:	687b      	ldr	r3, [r7, #4]
   12f08:	689b      	ldr	r3, [r3, #8]
}
   12f0a:	4618      	mov	r0, r3
   12f0c:	3714      	adds	r7, #20
   12f0e:	46bd      	mov	sp, r7
   12f10:	bc80      	pop	{r7}
   12f12:	4770      	bx	lr

00012f14 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh>:
void	ARINC_Conversions::Uint32FourBytesArray(uint32_t data,uint8_t *dest){
   12f14:	b480      	push	{r7}
   12f16:	b087      	sub	sp, #28
   12f18:	af00      	add	r7, sp, #0
   12f1a:	60f8      	str	r0, [r7, #12]
   12f1c:	60b9      	str	r1, [r7, #8]
   12f1e:	607a      	str	r2, [r7, #4]

	uint8_t d;
	for (uint8_t ii = 0; ii < 4; ii++)
   12f20:	2300      	movs	r3, #0
   12f22:	75fb      	strb	r3, [r7, #23]
   12f24:	7dfb      	ldrb	r3, [r7, #23]
   12f26:	2b03      	cmp	r3, #3
   12f28:	dc10      	bgt.n	12f4c <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x38>
	{
		d=(uint8_t)((data>>(24-ii*8))&(0xff));
   12f2a:	7dfb      	ldrb	r3, [r7, #23]
   12f2c:	f1c3 0303 	rsb	r3, r3, #3
   12f30:	00db      	lsls	r3, r3, #3
   12f32:	68ba      	ldr	r2, [r7, #8]
   12f34:	fa22 f303 	lsr.w	r3, r2, r3
   12f38:	75bb      	strb	r3, [r7, #22]
		dest[ii]=d;
   12f3a:	7dfb      	ldrb	r3, [r7, #23]
   12f3c:	687a      	ldr	r2, [r7, #4]
   12f3e:	4413      	add	r3, r2
   12f40:	7dba      	ldrb	r2, [r7, #22]
   12f42:	701a      	strb	r2, [r3, #0]
	for (uint8_t ii = 0; ii < 4; ii++)
   12f44:	7dfb      	ldrb	r3, [r7, #23]
   12f46:	3301      	adds	r3, #1
   12f48:	75fb      	strb	r3, [r7, #23]
   12f4a:	e7eb      	b.n	12f24 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x10>

	}

}
   12f4c:	bf00      	nop
   12f4e:	371c      	adds	r7, #28
   12f50:	46bd      	mov	sp, r7
   12f52:	bc80      	pop	{r7}
   12f54:	4770      	bx	lr
	...

00012f58 <_ZN17ARINC_Conversions18FloatTwoComplementEfh>:
uint32_t	ARINC_Conversions::FloatTwoComplement(float f, uint8_t size){
   12f58:	b580      	push	{r7, lr}
   12f5a:	b084      	sub	sp, #16
   12f5c:	af00      	add	r7, sp, #0
   12f5e:	60f8      	str	r0, [r7, #12]
   12f60:	60b9      	str	r1, [r7, #8]
   12f62:	4613      	mov	r3, r2
   12f64:	71fb      	strb	r3, [r7, #7]
	
	if (f>=0)
   12f66:	4b17      	ldr	r3, [pc, #92]	; (12fc4 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x6c>)
   12f68:	f04f 0100 	mov.w	r1, #0
   12f6c:	68b8      	ldr	r0, [r7, #8]
   12f6e:	4798      	blx	r3
   12f70:	4603      	mov	r3, r0
   12f72:	2b00      	cmp	r3, #0
   12f74:	d006      	beq.n	12f84 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x2c>
	{
		value=(uint32_t)f;
   12f76:	4b14      	ldr	r3, [pc, #80]	; (12fc8 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   12f78:	68b8      	ldr	r0, [r7, #8]
   12f7a:	4798      	blx	r3
   12f7c:	4602      	mov	r2, r0
   12f7e:	68fb      	ldr	r3, [r7, #12]
   12f80:	60da      	str	r2, [r3, #12]
   12f82:	e018      	b.n	12fb6 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x5e>
	} 
	else
	{
		value=(uint32_t)(-1*f);
   12f84:	68bb      	ldr	r3, [r7, #8]
   12f86:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12f8a:	4b0f      	ldr	r3, [pc, #60]	; (12fc8 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   12f8c:	4610      	mov	r0, r2
   12f8e:	4798      	blx	r3
   12f90:	4602      	mov	r2, r0
   12f92:	68fb      	ldr	r3, [r7, #12]
   12f94:	60da      	str	r2, [r3, #12]
		value=(~value)&((1<<(size))-1);
   12f96:	68fb      	ldr	r3, [r7, #12]
   12f98:	68db      	ldr	r3, [r3, #12]
   12f9a:	43db      	mvns	r3, r3
   12f9c:	79fa      	ldrb	r2, [r7, #7]
   12f9e:	4611      	mov	r1, r2
   12fa0:	2201      	movs	r2, #1
   12fa2:	408a      	lsls	r2, r1
   12fa4:	3a01      	subs	r2, #1
   12fa6:	401a      	ands	r2, r3
   12fa8:	68fb      	ldr	r3, [r7, #12]
   12faa:	60da      	str	r2, [r3, #12]
		value+=1;
   12fac:	68fb      	ldr	r3, [r7, #12]
   12fae:	68db      	ldr	r3, [r3, #12]
   12fb0:	1c5a      	adds	r2, r3, #1
   12fb2:	68fb      	ldr	r3, [r7, #12]
   12fb4:	60da      	str	r2, [r3, #12]
	}
	return value;
   12fb6:	68fb      	ldr	r3, [r7, #12]
   12fb8:	68db      	ldr	r3, [r3, #12]
}
   12fba:	4618      	mov	r0, r3
   12fbc:	3710      	adds	r7, #16
   12fbe:	46bd      	mov	sp, r7
   12fc0:	bd80      	pop	{r7, pc}
   12fc2:	bf00      	nop
   12fc4:	0001cd1d 	.word	0x0001cd1d
   12fc8:	0001cd45 	.word	0x0001cd45

00012fcc <_ZN17ARINC_Conversions10FindParityEm>:


// Function to find the parity
bool ARINC_Conversions::FindParity(uint32_t x)
{
   12fcc:	b480      	push	{r7}
   12fce:	b085      	sub	sp, #20
   12fd0:	af00      	add	r7, sp, #0
   12fd2:	6078      	str	r0, [r7, #4]
   12fd4:	6039      	str	r1, [r7, #0]
	uint32_t y = x ^ (x >> 1);
   12fd6:	683b      	ldr	r3, [r7, #0]
   12fd8:	085a      	lsrs	r2, r3, #1
   12fda:	683b      	ldr	r3, [r7, #0]
   12fdc:	4053      	eors	r3, r2
   12fde:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 2);
   12fe0:	68fb      	ldr	r3, [r7, #12]
   12fe2:	089b      	lsrs	r3, r3, #2
   12fe4:	68fa      	ldr	r2, [r7, #12]
   12fe6:	4053      	eors	r3, r2
   12fe8:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 4);
   12fea:	68fb      	ldr	r3, [r7, #12]
   12fec:	091b      	lsrs	r3, r3, #4
   12fee:	68fa      	ldr	r2, [r7, #12]
   12ff0:	4053      	eors	r3, r2
   12ff2:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 8);
   12ff4:	68fb      	ldr	r3, [r7, #12]
   12ff6:	0a1b      	lsrs	r3, r3, #8
   12ff8:	68fa      	ldr	r2, [r7, #12]
   12ffa:	4053      	eors	r3, r2
   12ffc:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 16);
   12ffe:	68fb      	ldr	r3, [r7, #12]
   13000:	0c1b      	lsrs	r3, r3, #16
   13002:	68fa      	ldr	r2, [r7, #12]
   13004:	4053      	eors	r3, r2
   13006:	60fb      	str	r3, [r7, #12]

	// Rightmost bit of y holds the parity value
	// if (y&1) is 1 then parity is odd else even
	if (y & 1){
   13008:	68fb      	ldr	r3, [r7, #12]
   1300a:	f003 0301 	and.w	r3, r3, #1
   1300e:	2b00      	cmp	r3, #0
   13010:	d001      	beq.n	13016 <_ZN17ARINC_Conversions10FindParityEm+0x4a>
			return 1;
   13012:	2301      	movs	r3, #1
   13014:	e000      	b.n	13018 <_ZN17ARINC_Conversions10FindParityEm+0x4c>
	}

	return 0;
   13016:	2300      	movs	r3, #0
}
   13018:	4618      	mov	r0, r3
   1301a:	3714      	adds	r7, #20
   1301c:	46bd      	mov	sp, r7
   1301e:	bc80      	pop	{r7}
   13020:	4770      	bx	lr

00013022 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   13022:	b480      	push	{r7}
   13024:	b085      	sub	sp, #20
   13026:	af00      	add	r7, sp, #0
   13028:	60f8      	str	r0, [r7, #12]
   1302a:	460b      	mov	r3, r1
   1302c:	607a      	str	r2, [r7, #4]
   1302e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   13030:	7afb      	ldrb	r3, [r7, #11]
   13032:	68fa      	ldr	r2, [r7, #12]
   13034:	01db      	lsls	r3, r3, #7
   13036:	4413      	add	r3, r2
   13038:	3318      	adds	r3, #24
   1303a:	687a      	ldr	r2, [r7, #4]
   1303c:	601a      	str	r2, [r3, #0]
}
   1303e:	bf00      	nop
   13040:	3714      	adds	r7, #20
   13042:	46bd      	mov	sp, r7
   13044:	bc80      	pop	{r7}
   13046:	4770      	bx	lr

00013048 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   13048:	b480      	push	{r7}
   1304a:	b085      	sub	sp, #20
   1304c:	af00      	add	r7, sp, #0
   1304e:	60f8      	str	r0, [r7, #12]
   13050:	460b      	mov	r3, r1
   13052:	607a      	str	r2, [r7, #4]
   13054:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   13056:	7afb      	ldrb	r3, [r7, #11]
   13058:	68fa      	ldr	r2, [r7, #12]
   1305a:	01db      	lsls	r3, r3, #7
   1305c:	4413      	add	r3, r2
   1305e:	3314      	adds	r3, #20
   13060:	687a      	ldr	r2, [r7, #4]
   13062:	601a      	str	r2, [r3, #0]
}
   13064:	bf00      	nop
   13066:	3714      	adds	r7, #20
   13068:	46bd      	mov	sp, r7
   1306a:	bc80      	pop	{r7}
   1306c:	4770      	bx	lr
	...

00013070 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   13070:	b580      	push	{r7, lr}
   13072:	b082      	sub	sp, #8
   13074:	af00      	add	r7, sp, #0
   13076:	4603      	mov	r3, r0
   13078:	6039      	str	r1, [r7, #0]
   1307a:	71fb      	strb	r3, [r7, #7]
   1307c:	4613      	mov	r3, r2
   1307e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   13080:	79bb      	ldrb	r3, [r7, #6]
   13082:	2b00      	cmp	r3, #0
   13084:	d006      	beq.n	13094 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   13086:	79fb      	ldrb	r3, [r7, #7]
   13088:	683a      	ldr	r2, [r7, #0]
   1308a:	4619      	mov	r1, r3
   1308c:	4806      	ldr	r0, [pc, #24]	; (130a8 <_gpio_set_level+0x38>)
   1308e:	4b07      	ldr	r3, [pc, #28]	; (130ac <_gpio_set_level+0x3c>)
   13090:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   13092:	e005      	b.n	130a0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   13094:	79fb      	ldrb	r3, [r7, #7]
   13096:	683a      	ldr	r2, [r7, #0]
   13098:	4619      	mov	r1, r3
   1309a:	4803      	ldr	r0, [pc, #12]	; (130a8 <_gpio_set_level+0x38>)
   1309c:	4b04      	ldr	r3, [pc, #16]	; (130b0 <_gpio_set_level+0x40>)
   1309e:	4798      	blx	r3
}
   130a0:	bf00      	nop
   130a2:	3708      	adds	r7, #8
   130a4:	46bd      	mov	sp, r7
   130a6:	bd80      	pop	{r7, pc}
   130a8:	41008000 	.word	0x41008000
   130ac:	00013023 	.word	0x00013023
   130b0:	00013049 	.word	0x00013049

000130b4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   130b4:	b580      	push	{r7, lr}
   130b6:	b082      	sub	sp, #8
   130b8:	af00      	add	r7, sp, #0
   130ba:	4603      	mov	r3, r0
   130bc:	460a      	mov	r2, r1
   130be:	71fb      	strb	r3, [r7, #7]
   130c0:	4613      	mov	r3, r2
   130c2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   130c4:	79fb      	ldrb	r3, [r7, #7]
   130c6:	115b      	asrs	r3, r3, #5
   130c8:	b2d8      	uxtb	r0, r3
   130ca:	79fb      	ldrb	r3, [r7, #7]
   130cc:	f003 031f 	and.w	r3, r3, #31
   130d0:	2201      	movs	r2, #1
   130d2:	fa02 f303 	lsl.w	r3, r2, r3
   130d6:	79ba      	ldrb	r2, [r7, #6]
   130d8:	4619      	mov	r1, r3
   130da:	4b03      	ldr	r3, [pc, #12]	; (130e8 <gpio_set_pin_level+0x34>)
   130dc:	4798      	blx	r3
}
   130de:	bf00      	nop
   130e0:	3708      	adds	r7, #8
   130e2:	46bd      	mov	sp, r7
   130e4:	bd80      	pop	{r7, pc}
   130e6:	bf00      	nop
   130e8:	00013071 	.word	0x00013071

000130ec <_ZL10blink_LED0PK10timer_task>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(const struct timer_task *const timer_task){
   130ec:	b480      	push	{r7}
   130ee:	b083      	sub	sp, #12
   130f0:	af00      	add	r7, sp, #0
   130f2:	6078      	str	r0, [r7, #4]
	//gpio_toggle_pin_level(LED0);
}
   130f4:	bf00      	nop
   130f6:	370c      	adds	r7, #12
   130f8:	46bd      	mov	sp, r7
   130fa:	bc80      	pop	{r7}
   130fc:	4770      	bx	lr
	...

00013100 <_ZL9TxTimeoutPK10timer_task>:
static void TxTimeout(const struct timer_task *const timer_task){
   13100:	b480      	push	{r7}
   13102:	b083      	sub	sp, #12
   13104:	af00      	add	r7, sp, #0
   13106:	6078      	str	r0, [r7, #4]
	ptrARINCInterface->txTimeout=true;
   13108:	4b04      	ldr	r3, [pc, #16]	; (1311c <_ZL9TxTimeoutPK10timer_task+0x1c>)
   1310a:	681b      	ldr	r3, [r3, #0]
   1310c:	2201      	movs	r2, #1
   1310e:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
}
   13112:	bf00      	nop
   13114:	370c      	adds	r7, #12
   13116:	46bd      	mov	sp, r7
   13118:	bc80      	pop	{r7}
   1311a:	4770      	bx	lr
   1311c:	20008d20 	.word	0x20008d20

00013120 <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
   13120:	b480      	push	{r7}
   13122:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
   13124:	4b04      	ldr	r3, [pc, #16]	; (13138 <_ZL12Receiver1Intv+0x18>)
   13126:	681b      	ldr	r3, [r3, #0]
   13128:	2201      	movs	r2, #1
   1312a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
   1312e:	bf00      	nop
   13130:	46bd      	mov	sp, r7
   13132:	bc80      	pop	{r7}
   13134:	4770      	bx	lr
   13136:	bf00      	nop
   13138:	20008d20 	.word	0x20008d20

0001313c <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
   1313c:	b580      	push	{r7, lr}
   1313e:	b082      	sub	sp, #8
   13140:	af00      	add	r7, sp, #0
   13142:	6078      	str	r0, [r7, #4]
   13144:	6039      	str	r1, [r7, #0]
   13146:	687a      	ldr	r2, [r7, #4]
   13148:	683b      	ldr	r3, [r7, #0]
   1314a:	3304      	adds	r3, #4
   1314c:	4619      	mov	r1, r3
   1314e:	4610      	mov	r0, r2
   13150:	4b13      	ldr	r3, [pc, #76]	; (131a0 <_ZN15ARINC_InterfaceC2Ev+0x64>)
   13152:	4798      	blx	r3
   13154:	683b      	ldr	r3, [r7, #0]
   13156:	681a      	ldr	r2, [r3, #0]
   13158:	687b      	ldr	r3, [r7, #4]
   1315a:	601a      	str	r2, [r3, #0]
   1315c:	687b      	ldr	r3, [r7, #4]
   1315e:	681b      	ldr	r3, [r3, #0]
   13160:	3b0c      	subs	r3, #12
   13162:	681b      	ldr	r3, [r3, #0]
   13164:	461a      	mov	r2, r3
   13166:	687b      	ldr	r3, [r7, #4]
   13168:	4413      	add	r3, r2
   1316a:	683a      	ldr	r2, [r7, #0]
   1316c:	6912      	ldr	r2, [r2, #16]
   1316e:	601a      	str	r2, [r3, #0]
   13170:	687b      	ldr	r3, [r7, #4]
   13172:	681b      	ldr	r3, [r3, #0]
   13174:	3b10      	subs	r3, #16
   13176:	681b      	ldr	r3, [r3, #0]
   13178:	461a      	mov	r2, r3
   1317a:	687b      	ldr	r3, [r7, #4]
   1317c:	4413      	add	r3, r2
   1317e:	683a      	ldr	r2, [r7, #0]
   13180:	6952      	ldr	r2, [r2, #20]
   13182:	601a      	str	r2, [r3, #0]
   13184:	687b      	ldr	r3, [r7, #4]
   13186:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   1318a:	4618      	mov	r0, r3
   1318c:	4b05      	ldr	r3, [pc, #20]	; (131a4 <_ZN15ARINC_InterfaceC2Ev+0x68>)
   1318e:	4798      	blx	r3
{
	ptrARINCInterface=this;
   13190:	4a05      	ldr	r2, [pc, #20]	; (131a8 <_ZN15ARINC_InterfaceC2Ev+0x6c>)
   13192:	687b      	ldr	r3, [r7, #4]
   13194:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
   13196:	687b      	ldr	r3, [r7, #4]
   13198:	4618      	mov	r0, r3
   1319a:	3708      	adds	r7, #8
   1319c:	46bd      	mov	sp, r7
   1319e:	bd80      	pop	{r7, pc}
   131a0:	00012899 	.word	0x00012899
   131a4:	00013be5 	.word	0x00013be5
   131a8:	20008d20 	.word	0x20008d20

000131ac <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   131ac:	b580      	push	{r7, lr}
   131ae:	b082      	sub	sp, #8
   131b0:	af00      	add	r7, sp, #0
   131b2:	6078      	str	r0, [r7, #4]
   131b4:	687b      	ldr	r3, [r7, #4]
   131b6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
   131ba:	4618      	mov	r0, r3
   131bc:	4b15      	ldr	r3, [pc, #84]	; (13214 <_ZN15ARINC_InterfaceC1Ev+0x68>)
   131be:	4798      	blx	r3
   131c0:	687b      	ldr	r3, [r7, #4]
   131c2:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
   131c6:	4a14      	ldr	r2, [pc, #80]	; (13218 <_ZN15ARINC_InterfaceC1Ev+0x6c>)
   131c8:	4611      	mov	r1, r2
   131ca:	4618      	mov	r0, r3
   131cc:	4b13      	ldr	r3, [pc, #76]	; (1321c <_ZN15ARINC_InterfaceC1Ev+0x70>)
   131ce:	4798      	blx	r3
   131d0:	687b      	ldr	r3, [r7, #4]
   131d2:	4a13      	ldr	r2, [pc, #76]	; (13220 <_ZN15ARINC_InterfaceC1Ev+0x74>)
   131d4:	4611      	mov	r1, r2
   131d6:	4618      	mov	r0, r3
   131d8:	4b12      	ldr	r3, [pc, #72]	; (13224 <_ZN15ARINC_InterfaceC1Ev+0x78>)
   131da:	4798      	blx	r3
   131dc:	4a12      	ldr	r2, [pc, #72]	; (13228 <_ZN15ARINC_InterfaceC1Ev+0x7c>)
   131de:	687b      	ldr	r3, [r7, #4]
   131e0:	601a      	str	r2, [r3, #0]
   131e2:	687b      	ldr	r3, [r7, #4]
   131e4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
   131e8:	4a10      	ldr	r2, [pc, #64]	; (1322c <_ZN15ARINC_InterfaceC1Ev+0x80>)
   131ea:	601a      	str	r2, [r3, #0]
   131ec:	687b      	ldr	r3, [r7, #4]
   131ee:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
   131f2:	4a0f      	ldr	r2, [pc, #60]	; (13230 <_ZN15ARINC_InterfaceC1Ev+0x84>)
   131f4:	601a      	str	r2, [r3, #0]
   131f6:	687b      	ldr	r3, [r7, #4]
   131f8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   131fc:	4618      	mov	r0, r3
   131fe:	4b0d      	ldr	r3, [pc, #52]	; (13234 <_ZN15ARINC_InterfaceC1Ev+0x88>)
   13200:	4798      	blx	r3
	ptrARINCInterface=this;
   13202:	4a0d      	ldr	r2, [pc, #52]	; (13238 <_ZN15ARINC_InterfaceC1Ev+0x8c>)
   13204:	687b      	ldr	r3, [r7, #4]
   13206:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
   13208:	687b      	ldr	r3, [r7, #4]
   1320a:	4618      	mov	r0, r3
   1320c:	3708      	adds	r7, #8
   1320e:	46bd      	mov	sp, r7
   13210:	bd80      	pop	{r7, pc}
   13212:	bf00      	nop
   13214:	00012c8d 	.word	0x00012c8d
   13218:	000227cc 	.word	0x000227cc
   1321c:	00000d5d 	.word	0x00000d5d
   13220:	000227b8 	.word	0x000227b8
   13224:	00012899 	.word	0x00012899
   13228:	00022770 	.word	0x00022770
   1322c:	0002278c 	.word	0x0002278c
   13230:	000227a8 	.word	0x000227a8
   13234:	00013be5 	.word	0x00013be5
   13238:	20008d20 	.word	0x20008d20

0001323c <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
   1323c:	b580      	push	{r7, lr}
   1323e:	b082      	sub	sp, #8
   13240:	af00      	add	r7, sp, #0
   13242:	6078      	str	r0, [r7, #4]
   13244:	6039      	str	r1, [r7, #0]
   13246:	683b      	ldr	r3, [r7, #0]
   13248:	681a      	ldr	r2, [r3, #0]
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	601a      	str	r2, [r3, #0]
   1324e:	687b      	ldr	r3, [r7, #4]
   13250:	681b      	ldr	r3, [r3, #0]
   13252:	3b0c      	subs	r3, #12
   13254:	681b      	ldr	r3, [r3, #0]
   13256:	461a      	mov	r2, r3
   13258:	687b      	ldr	r3, [r7, #4]
   1325a:	4413      	add	r3, r2
   1325c:	683a      	ldr	r2, [r7, #0]
   1325e:	6912      	ldr	r2, [r2, #16]
   13260:	601a      	str	r2, [r3, #0]
   13262:	687b      	ldr	r3, [r7, #4]
   13264:	681b      	ldr	r3, [r3, #0]
   13266:	3b10      	subs	r3, #16
   13268:	681b      	ldr	r3, [r3, #0]
   1326a:	461a      	mov	r2, r3
   1326c:	687b      	ldr	r3, [r7, #4]
   1326e:	4413      	add	r3, r2
   13270:	683a      	ldr	r2, [r7, #0]
   13272:	6952      	ldr	r2, [r2, #20]
   13274:	601a      	str	r2, [r3, #0]
   13276:	687b      	ldr	r3, [r7, #4]
   13278:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   1327c:	4618      	mov	r0, r3
   1327e:	4b07      	ldr	r3, [pc, #28]	; (1329c <_ZN15ARINC_InterfaceD2Ev+0x60>)
   13280:	4798      	blx	r3
   13282:	687a      	ldr	r2, [r7, #4]
   13284:	683b      	ldr	r3, [r7, #0]
   13286:	3304      	adds	r3, #4
   13288:	4619      	mov	r1, r3
   1328a:	4610      	mov	r0, r2
   1328c:	4b04      	ldr	r3, [pc, #16]	; (132a0 <_ZN15ARINC_InterfaceD2Ev+0x64>)
   1328e:	4798      	blx	r3
{
} //~ARINC_Interface
   13290:	687b      	ldr	r3, [r7, #4]
   13292:	4618      	mov	r0, r3
   13294:	3708      	adds	r7, #8
   13296:	46bd      	mov	sp, r7
   13298:	bd80      	pop	{r7, pc}
   1329a:	bf00      	nop
   1329c:	00013c05 	.word	0x00013c05
   132a0:	000128df 	.word	0x000128df

000132a4 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
   132a4:	b580      	push	{r7, lr}
   132a6:	b082      	sub	sp, #8
   132a8:	af00      	add	r7, sp, #0
   132aa:	6078      	str	r0, [r7, #4]
   132ac:	4a15      	ldr	r2, [pc, #84]	; (13304 <_ZN15ARINC_InterfaceD1Ev+0x60>)
   132ae:	687b      	ldr	r3, [r7, #4]
   132b0:	601a      	str	r2, [r3, #0]
   132b2:	687b      	ldr	r3, [r7, #4]
   132b4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
   132b8:	4a13      	ldr	r2, [pc, #76]	; (13308 <_ZN15ARINC_InterfaceD1Ev+0x64>)
   132ba:	601a      	str	r2, [r3, #0]
   132bc:	687b      	ldr	r3, [r7, #4]
   132be:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
   132c2:	4a12      	ldr	r2, [pc, #72]	; (1330c <_ZN15ARINC_InterfaceD1Ev+0x68>)
   132c4:	601a      	str	r2, [r3, #0]
   132c6:	687b      	ldr	r3, [r7, #4]
   132c8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   132cc:	4618      	mov	r0, r3
   132ce:	4b10      	ldr	r3, [pc, #64]	; (13310 <_ZN15ARINC_InterfaceD1Ev+0x6c>)
   132d0:	4798      	blx	r3
   132d2:	687b      	ldr	r3, [r7, #4]
   132d4:	4a0f      	ldr	r2, [pc, #60]	; (13314 <_ZN15ARINC_InterfaceD1Ev+0x70>)
   132d6:	4611      	mov	r1, r2
   132d8:	4618      	mov	r0, r3
   132da:	4b0f      	ldr	r3, [pc, #60]	; (13318 <_ZN15ARINC_InterfaceD1Ev+0x74>)
   132dc:	4798      	blx	r3
   132de:	687b      	ldr	r3, [r7, #4]
   132e0:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
   132e4:	4a0d      	ldr	r2, [pc, #52]	; (1331c <_ZN15ARINC_InterfaceD1Ev+0x78>)
   132e6:	4611      	mov	r1, r2
   132e8:	4618      	mov	r0, r3
   132ea:	4b0d      	ldr	r3, [pc, #52]	; (13320 <_ZN15ARINC_InterfaceD1Ev+0x7c>)
   132ec:	4798      	blx	r3
   132ee:	687b      	ldr	r3, [r7, #4]
   132f0:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
   132f4:	4618      	mov	r0, r3
   132f6:	4b0b      	ldr	r3, [pc, #44]	; (13324 <_ZN15ARINC_InterfaceD1Ev+0x80>)
   132f8:	4798      	blx	r3
} //~ARINC_Interface
   132fa:	687b      	ldr	r3, [r7, #4]
   132fc:	4618      	mov	r0, r3
   132fe:	3708      	adds	r7, #8
   13300:	46bd      	mov	sp, r7
   13302:	bd80      	pop	{r7, pc}
   13304:	00022770 	.word	0x00022770
   13308:	0002278c 	.word	0x0002278c
   1330c:	000227a8 	.word	0x000227a8
   13310:	00013c05 	.word	0x00013c05
   13314:	000227b8 	.word	0x000227b8
   13318:	000128df 	.word	0x000128df
   1331c:	000227cc 	.word	0x000227cc
   13320:	000142ed 	.word	0x000142ed
   13324:	00012cad 	.word	0x00012cad

00013328 <_ZTv0_n16_N15ARINC_InterfaceD1Ev>:
   13328:	b580      	push	{r7, lr}
   1332a:	b082      	sub	sp, #8
   1332c:	af00      	add	r7, sp, #0
   1332e:	6078      	str	r0, [r7, #4]
   13330:	687b      	ldr	r3, [r7, #4]
   13332:	681b      	ldr	r3, [r3, #0]
   13334:	3b10      	subs	r3, #16
   13336:	681b      	ldr	r3, [r3, #0]
   13338:	461a      	mov	r2, r3
   1333a:	687b      	ldr	r3, [r7, #4]
   1333c:	4413      	add	r3, r2
   1333e:	4618      	mov	r0, r3
   13340:	4b03      	ldr	r3, [pc, #12]	; (13350 <_ZTv0_n16_N15ARINC_InterfaceD1Ev+0x28>)
   13342:	4798      	blx	r3
   13344:	4603      	mov	r3, r0
   13346:	4618      	mov	r0, r3
   13348:	3708      	adds	r7, #8
   1334a:	46bd      	mov	sp, r7
   1334c:	bd80      	pop	{r7, pc}
   1334e:	bf00      	nop
   13350:	000132a5 	.word	0x000132a5

00013354 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   13354:	b580      	push	{r7, lr}
   13356:	b082      	sub	sp, #8
   13358:	af00      	add	r7, sp, #0
   1335a:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
   1335c:	6878      	ldr	r0, [r7, #4]
   1335e:	4b06      	ldr	r3, [pc, #24]	; (13378 <_ZN15ARINC_InterfaceD0Ev+0x24>)
   13360:	4798      	blx	r3
   13362:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   13366:	6878      	ldr	r0, [r7, #4]
   13368:	4b04      	ldr	r3, [pc, #16]	; (1337c <_ZN15ARINC_InterfaceD0Ev+0x28>)
   1336a:	4798      	blx	r3
   1336c:	687b      	ldr	r3, [r7, #4]
   1336e:	4618      	mov	r0, r3
   13370:	3708      	adds	r7, #8
   13372:	46bd      	mov	sp, r7
   13374:	bd80      	pop	{r7, pc}
   13376:	bf00      	nop
   13378:	000132a5 	.word	0x000132a5
   1337c:	00019abd 	.word	0x00019abd

00013380 <_ZTv0_n16_N15ARINC_InterfaceD0Ev>:
   13380:	b580      	push	{r7, lr}
   13382:	b082      	sub	sp, #8
   13384:	af00      	add	r7, sp, #0
   13386:	6078      	str	r0, [r7, #4]
   13388:	687b      	ldr	r3, [r7, #4]
   1338a:	681b      	ldr	r3, [r3, #0]
   1338c:	3b10      	subs	r3, #16
   1338e:	681b      	ldr	r3, [r3, #0]
   13390:	461a      	mov	r2, r3
   13392:	687b      	ldr	r3, [r7, #4]
   13394:	4413      	add	r3, r2
   13396:	4618      	mov	r0, r3
   13398:	4b03      	ldr	r3, [pc, #12]	; (133a8 <_ZTv0_n16_N15ARINC_InterfaceD0Ev+0x28>)
   1339a:	4798      	blx	r3
   1339c:	4603      	mov	r3, r0
   1339e:	4618      	mov	r0, r3
   133a0:	3708      	adds	r7, #8
   133a2:	46bd      	mov	sp, r7
   133a4:	bd80      	pop	{r7, pc}
   133a6:	bf00      	nop
   133a8:	00013355 	.word	0x00013355

000133ac <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
   133ac:	b580      	push	{r7, lr}
   133ae:	b082      	sub	sp, #8
   133b0:	af00      	add	r7, sp, #0
   133b2:	6078      	str	r0, [r7, #4]
	MessageCount=0; MessageCount1=0; MessageCount2=0;
   133b4:	687b      	ldr	r3, [r7, #4]
   133b6:	2200      	movs	r2, #0
   133b8:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
   133bc:	687b      	ldr	r3, [r7, #4]
   133be:	2200      	movs	r2, #0
   133c0:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
   133c4:	687b      	ldr	r3, [r7, #4]
   133c6:	2200      	movs	r2, #0
   133c8:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	BITRATE0=false;
   133cc:	687b      	ldr	r3, [r7, #4]
   133ce:	2200      	movs	r2, #0
   133d0:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	BITRATE1=false;
   133d4:	687b      	ldr	r3, [r7, #4]
   133d6:	2200      	movs	r2, #0
   133d8:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	BITRATE2=false;
   133dc:	687b      	ldr	r3, [r7, #4]
   133de:	2200      	movs	r2, #0
   133e0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a

	PARITY=false;
   133e4:	687b      	ldr	r3, [r7, #4]
   133e6:	2200      	movs	r2, #0
   133e8:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	HW_RESET();
   133ec:	6878      	ldr	r0, [r7, #4]
   133ee:	4b3d      	ldr	r3, [pc, #244]	; (134e4 <_ZN15ARINC_Interface4InitEv+0x138>)
   133f0:	4798      	blx	r3
	InitBuffer();
   133f2:	687b      	ldr	r3, [r7, #4]
   133f4:	4618      	mov	r0, r3
   133f6:	4b3c      	ldr	r3, [pc, #240]	; (134e8 <_ZN15ARINC_Interface4InitEv+0x13c>)
   133f8:	4798      	blx	r3
	statusHolt=HI3593.Init();
   133fa:	687b      	ldr	r3, [r7, #4]
   133fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   13400:	4618      	mov	r0, r3
   13402:	4b3a      	ldr	r3, [pc, #232]	; (134ec <_ZN15ARINC_Interface4InitEv+0x140>)
   13404:	4798      	blx	r3
   13406:	4603      	mov	r3, r0
   13408:	461a      	mov	r2, r3
   1340a:	687b      	ldr	r3, [r7, #4]
   1340c:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
	if (statusHolt!=TSR_Default){
   13410:	687b      	ldr	r3, [r7, #4]
   13412:	f893 317b 	ldrb.w	r3, [r3, #379]	; 0x17b
   13416:	2b01      	cmp	r3, #1
   13418:	d008      	beq.n	1342c <_ZN15ARINC_Interface4InitEv+0x80>
		usb.println("\n\rHI-3593 failed to Initilize\n\r");
   1341a:	4935      	ldr	r1, [pc, #212]	; (134f0 <_ZN15ARINC_Interface4InitEv+0x144>)
   1341c:	4835      	ldr	r0, [pc, #212]	; (134f4 <_ZN15ARINC_Interface4InitEv+0x148>)
   1341e:	4b36      	ldr	r3, [pc, #216]	; (134f8 <_ZN15ARINC_Interface4InitEv+0x14c>)
   13420:	4798      	blx	r3
		isOK=false;
   13422:	687b      	ldr	r3, [r7, #4]
   13424:	2200      	movs	r2, #0
   13426:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
   1342a:	e03d      	b.n	134a8 <_ZN15ARINC_Interface4InitEv+0xfc>
	}else{
		isOK=true;
   1342c:	687b      	ldr	r3, [r7, #4]
   1342e:	2201      	movs	r2, #1
   13430:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
		newMessageR1=false;
   13434:	687b      	ldr	r3, [r7, #4]
   13436:	2200      	movs	r2, #0
   13438:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		newMessageR2=false;
   1343c:	687b      	ldr	r3, [r7, #4]
   1343e:	2200      	movs	r2, #0
   13440:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
		BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   13444:	687b      	ldr	r3, [r7, #4]
   13446:	2200      	movs	r2, #0
   13448:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		MessageCount=0;
   1344c:	687b      	ldr	r3, [r7, #4]
   1344e:	2200      	movs	r2, #0
   13450:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
		octalLabel = 0x1D;         // Write ARINC Label
   13454:	687b      	ldr	r3, [r7, #4]
   13456:	221d      	movs	r2, #29
   13458:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
		Arate=0;
   1345c:	687b      	ldr	r3, [r7, #4]
   1345e:	2200      	movs	r2, #0
   13460:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
		
		(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   13464:	687b      	ldr	r3, [r7, #4]
   13466:	f203 1327 	addw	r3, r3, #295	; 0x127
   1346a:	2210      	movs	r2, #16
   1346c:	2100      	movs	r1, #0
   1346e:	4618      	mov	r0, r3
   13470:	4b22      	ldr	r3, [pc, #136]	; (134fc <_ZN15ARINC_Interface4InitEv+0x150>)
   13472:	4798      	blx	r3
			
		// Setup the Labels
		HI3593.InitReceiver1Labels();     // initial Rec1 labels
   13474:	687b      	ldr	r3, [r7, #4]
   13476:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   1347a:	4618      	mov	r0, r3
   1347c:	4b20      	ldr	r3, [pc, #128]	; (13500 <_ZN15ARINC_Interface4InitEv+0x154>)
   1347e:	4798      	blx	r3
		HI3593.initReceiver2Labels();     // initial Rec2 labels
   13480:	687b      	ldr	r3, [r7, #4]
   13482:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   13486:	4618      	mov	r0, r3
   13488:	4b1e      	ldr	r3, [pc, #120]	; (13504 <_ZN15ARINC_Interface4InitEv+0x158>)
   1348a:	4798      	blx	r3
		HI3593.InitPriorityLabels();
   1348c:	687b      	ldr	r3, [r7, #4]
   1348e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   13492:	4618      	mov	r0, r3
   13494:	4b1c      	ldr	r3, [pc, #112]	; (13508 <_ZN15ARINC_Interface4InitEv+0x15c>)
   13496:	4798      	blx	r3
		//HI3593.MultiByteRead(REC1MEMORY, 32, LabelsArrayRX1); // read in all Rec-1 labels into the passed array
		//HI3593.MultiByteRead(REC2MEMORY, 32, LabelsArrayRX2); // read in all Rec-2 labels into the passed array

		Rec1Parity =0;
   13498:	687b      	ldr	r3, [r7, #4]
   1349a:	2200      	movs	r2, #0
   1349c:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		Rec2Parity =0;
   134a0:	687b      	ldr	r3, [r7, #4]
   134a2:	2200      	movs	r2, #0
   134a4:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

		//HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
		//HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
	}
	
	arincTimer.Init();
   134a8:	4818      	ldr	r0, [pc, #96]	; (1350c <_ZN15ARINC_Interface4InitEv+0x160>)
   134aa:	4b19      	ldr	r3, [pc, #100]	; (13510 <_ZN15ARINC_Interface4InitEv+0x164>)
   134ac:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(blink_LED0),1000);
   134ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   134b2:	4918      	ldr	r1, [pc, #96]	; (13514 <_ZN15ARINC_Interface4InitEv+0x168>)
   134b4:	4815      	ldr	r0, [pc, #84]	; (1350c <_ZN15ARINC_Interface4InitEv+0x160>)
   134b6:	4b18      	ldr	r3, [pc, #96]	; (13518 <_ZN15ARINC_Interface4InitEv+0x16c>)
   134b8:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(TxTimeout),500);
   134ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   134be:	4917      	ldr	r1, [pc, #92]	; (1351c <_ZN15ARINC_Interface4InitEv+0x170>)
   134c0:	4812      	ldr	r0, [pc, #72]	; (1350c <_ZN15ARINC_Interface4InitEv+0x160>)
   134c2:	4b15      	ldr	r3, [pc, #84]	; (13518 <_ZN15ARINC_Interface4InitEv+0x16c>)
   134c4:	4798      	blx	r3
	ext_irq_register(ARINCR1Int, Receiver1Int);
   134c6:	4916      	ldr	r1, [pc, #88]	; (13520 <_ZN15ARINC_Interface4InitEv+0x174>)
   134c8:	2057      	movs	r0, #87	; 0x57
   134ca:	4b16      	ldr	r3, [pc, #88]	; (13524 <_ZN15ARINC_Interface4InitEv+0x178>)
   134cc:	4798      	blx	r3
	arincTimer.start();
   134ce:	480f      	ldr	r0, [pc, #60]	; (1350c <_ZN15ARINC_Interface4InitEv+0x160>)
   134d0:	4b15      	ldr	r3, [pc, #84]	; (13528 <_ZN15ARINC_Interface4InitEv+0x17c>)
   134d2:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
   134d4:	687b      	ldr	r3, [r7, #4]
   134d6:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
}
   134da:	4618      	mov	r0, r3
   134dc:	3708      	adds	r7, #8
   134de:	46bd      	mov	sp, r7
   134e0:	bd80      	pop	{r7, pc}
   134e2:	bf00      	nop
   134e4:	00013aa5 	.word	0x00013aa5
   134e8:	00012925 	.word	0x00012925
   134ec:	00013c25 	.word	0x00013c25
   134f0:	00021d48 	.word	0x00021d48
   134f4:	2000a140 	.word	0x2000a140
   134f8:	00018195 	.word	0x00018195
   134fc:	0001d4b1 	.word	0x0001d4b1
   13500:	00013e35 	.word	0x00013e35
   13504:	00013fc1 	.word	0x00013fc1
   13508:	00013ea1 	.word	0x00013ea1
   1350c:	2000a120 	.word	0x2000a120
   13510:	000176a5 	.word	0x000176a5
   13514:	000130ed 	.word	0x000130ed
   13518:	000177b5 	.word	0x000177b5
   1351c:	00013101 	.word	0x00013101
   13520:	00013121 	.word	0x00013121
   13524:	00006545 	.word	0x00006545
   13528:	000176f5 	.word	0x000176f5

0001352c <_ZN15ARINC_Interface12ReadRXBufferEh>:
	else
	{
		return false;
	}
}
uint32_t ARINC_Interface::ReadRXBuffer(uint8_t n){
   1352c:	b580      	push	{r7, lr}
   1352e:	b0c4      	sub	sp, #272	; 0x110
   13530:	af00      	add	r7, sp, #0
   13532:	1d3b      	adds	r3, r7, #4
   13534:	6018      	str	r0, [r3, #0]
   13536:	460a      	mov	r2, r1
   13538:	1cfb      	adds	r3, r7, #3
   1353a:	701a      	strb	r2, [r3, #0]
	
	usb.println("r\n---!got message!----");
   1353c:	4949      	ldr	r1, [pc, #292]	; (13664 <_ZN15ARINC_Interface12ReadRXBufferEh+0x138>)
   1353e:	484a      	ldr	r0, [pc, #296]	; (13668 <_ZN15ARINC_Interface12ReadRXBufferEh+0x13c>)
   13540:	4b4a      	ldr	r3, [pc, #296]	; (1366c <_ZN15ARINC_Interface12ReadRXBufferEh+0x140>)
   13542:	4798      	blx	r3
	uint8_t receiver[2*RX_LABELS_NUMBER][4];
	uint8_t	messagesCounter=0;
   13544:	2300      	movs	r3, #0
   13546:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	cpu_irq_disable();
   1354a:	1d3b      	adds	r3, r7, #4
   1354c:	6818      	ldr	r0, [r3, #0]
   1354e:	4b48      	ldr	r3, [pc, #288]	; (13670 <_ZN15ARINC_Interface12ReadRXBufferEh+0x144>)
   13550:	4798      	blx	r3
	                     // Poll Receiver1 status register
	
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
   13552:	2300      	movs	r3, #0
   13554:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
   13558:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
   1355c:	2b3f      	cmp	r3, #63	; 0x3f
   1355e:	dc46      	bgt.n	135ee <_ZN15ARINC_Interface12ReadRXBufferEh+0xc2>
	{
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   13560:	1d3b      	adds	r3, r7, #4
   13562:	681b      	ldr	r3, [r3, #0]
   13564:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
   13568:	1cfb      	adds	r3, r7, #3
   1356a:	781b      	ldrb	r3, [r3, #0]
   1356c:	3b01      	subs	r3, #1
   1356e:	b2db      	uxtb	r3, r3
   13570:	015b      	lsls	r3, r3, #5
   13572:	b2db      	uxtb	r3, r3
   13574:	3b70      	subs	r3, #112	; 0x70
   13576:	b2db      	uxtb	r3, r3
   13578:	4619      	mov	r1, r3
   1357a:	4610      	mov	r0, r2
   1357c:	4b3d      	ldr	r3, [pc, #244]	; (13674 <_ZN15ARINC_Interface12ReadRXBufferEh+0x148>)
   1357e:	4798      	blx	r3
   13580:	4603      	mov	r3, r0
   13582:	461a      	mov	r2, r3
   13584:	1d3b      	adds	r3, r7, #4
   13586:	681b      	ldr	r3, [r3, #0]
   13588:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
		if(((statusRegister & FFEMPTY) == 0))
   1358c:	1d3b      	adds	r3, r7, #4
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
   13594:	f003 0301 	and.w	r3, r3, #1
   13598:	2b00      	cmp	r3, #0
   1359a:	d127      	bne.n	135ec <_ZN15ARINC_Interface12ReadRXBufferEh+0xc0>
		{
				
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   1359c:	1d3b      	adds	r3, r7, #4
   1359e:	681b      	ldr	r3, [r3, #0]
   135a0:	f503 70c6 	add.w	r0, r3, #396	; 0x18c
   135a4:	1cfb      	adds	r3, r7, #3
   135a6:	781b      	ldrb	r3, [r3, #0]
   135a8:	3304      	adds	r3, #4
   135aa:	b2db      	uxtb	r3, r3
   135ac:	015b      	lsls	r3, r3, #5
   135ae:	b2d9      	uxtb	r1, r3
   135b0:	1d3b      	adds	r3, r7, #4
   135b2:	681b      	ldr	r3, [r3, #0]
   135b4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   135b8:	461a      	mov	r2, r3
   135ba:	4b2f      	ldr	r3, [pc, #188]	; (13678 <_ZN15ARINC_Interface12ReadRXBufferEh+0x14c>)
   135bc:	4798      	blx	r3
				
			memcpy(receiver[messagesCounter],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
   135be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   135c2:	f107 020c 	add.w	r2, r7, #12
   135c6:	009b      	lsls	r3, r3, #2
   135c8:	4413      	add	r3, r2
   135ca:	1d3a      	adds	r2, r7, #4
   135cc:	6812      	ldr	r2, [r2, #0]
   135ce:	f502 72b0 	add.w	r2, r2, #352	; 0x160
   135d2:	6812      	ldr	r2, [r2, #0]
   135d4:	601a      	str	r2, [r3, #0]
				
			//		printARINCData(REC1_HEADER,RXBuffer);
		//	CheckMessageCountMax();
			messagesCounter++;
   135d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   135da:	3301      	adds	r3, #1
   135dc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
   135e0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
   135e4:	3301      	adds	r3, #1
   135e6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
   135ea:	e7b5      	b.n	13558 <_ZN15ARINC_Interface12ReadRXBufferEh+0x2c>
				
		}else{
			break;
   135ec:	bf00      	nop
		}
	}

	cpu_irq_enable();
   135ee:	1d3b      	adds	r3, r7, #4
   135f0:	6818      	ldr	r0, [r3, #0]
   135f2:	4b22      	ldr	r3, [pc, #136]	; (1367c <_ZN15ARINC_Interface12ReadRXBufferEh+0x150>)
   135f4:	4798      	blx	r3

		if ((n==1))
   135f6:	1cfb      	adds	r3, r7, #3
   135f8:	781b      	ldrb	r3, [r3, #0]
   135fa:	2b01      	cmp	r3, #1
   135fc:	d105      	bne.n	1360a <_ZN15ARINC_Interface12ReadRXBufferEh+0xde>
		{
			newMessageR1=false;
   135fe:	1d3b      	adds	r3, r7, #4
   13600:	681b      	ldr	r3, [r3, #0]
   13602:	2200      	movs	r2, #0
   13604:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
   13608:	e008      	b.n	1361c <_ZN15ARINC_Interface12ReadRXBufferEh+0xf0>
		}
		else if (n==2)
   1360a:	1cfb      	adds	r3, r7, #3
   1360c:	781b      	ldrb	r3, [r3, #0]
   1360e:	2b02      	cmp	r3, #2
   13610:	d104      	bne.n	1361c <_ZN15ARINC_Interface12ReadRXBufferEh+0xf0>
		{
			newMessageR2=false;
   13612:	1d3b      	adds	r3, r7, #4
   13614:	681b      	ldr	r3, [r3, #0]
   13616:	2200      	movs	r2, #0
   13618:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
		}
	for (uint8_t i = 0; i < messagesCounter; i++)
   1361c:	2300      	movs	r3, #0
   1361e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
   13622:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
   13626:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   1362a:	429a      	cmp	r2, r3
   1362c:	da10      	bge.n	13650 <_ZN15ARINC_Interface12ReadRXBufferEh+0x124>
	{
		SortReceivedData(receiver[i]);
   1362e:	1d3b      	adds	r3, r7, #4
   13630:	6818      	ldr	r0, [r3, #0]
   13632:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
   13636:	f107 020c 	add.w	r2, r7, #12
   1363a:	009b      	lsls	r3, r3, #2
   1363c:	4413      	add	r3, r2
   1363e:	4619      	mov	r1, r3
   13640:	4b0f      	ldr	r3, [pc, #60]	; (13680 <_ZN15ARINC_Interface12ReadRXBufferEh+0x154>)
   13642:	4798      	blx	r3
	for (uint8_t i = 0; i < messagesCounter; i++)
   13644:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
   13648:	3301      	adds	r3, #1
   1364a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
   1364e:	e7e8      	b.n	13622 <_ZN15ARINC_Interface12ReadRXBufferEh+0xf6>
	}
	
	return statusRegister;	
   13650:	1d3b      	adds	r3, r7, #4
   13652:	681b      	ldr	r3, [r3, #0]
   13654:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
}
   13658:	4618      	mov	r0, r3
   1365a:	f507 7788 	add.w	r7, r7, #272	; 0x110
   1365e:	46bd      	mov	sp, r7
   13660:	bd80      	pop	{r7, pc}
   13662:	bf00      	nop
   13664:	00021d8c 	.word	0x00021d8c
   13668:	2000a140 	.word	0x2000a140
   1366c:	00018195 	.word	0x00018195
   13670:	000139e1 	.word	0x000139e1
   13674:	0001426d 	.word	0x0001426d
   13678:	0001402d 	.word	0x0001402d
   1367c:	000139c9 	.word	0x000139c9
   13680:	00012c31 	.word	0x00012c31

00013684 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   13684:	b580      	push	{r7, lr}
   13686:	b084      	sub	sp, #16
   13688:	af00      	add	r7, sp, #0
   1368a:	6078      	str	r0, [r7, #4]
   1368c:	460b      	mov	r3, r1
   1368e:	70fb      	strb	r3, [r7, #3]
	uint32_t data;

	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   13690:	2300      	movs	r3, #0
   13692:	73fb      	strb	r3, [r7, #15]
   13694:	7bfb      	ldrb	r3, [r7, #15]
   13696:	2b1f      	cmp	r3, #31
   13698:	dc21      	bgt.n	136de <_ZN15ARINC_Interface15ReadBufferLabelEh+0x5a>
		if (receiverBuffer[i][3]==label)
   1369a:	687b      	ldr	r3, [r7, #4]
   1369c:	691a      	ldr	r2, [r3, #16]
   1369e:	7bfb      	ldrb	r3, [r7, #15]
   136a0:	009b      	lsls	r3, r3, #2
   136a2:	4413      	add	r3, r2
   136a4:	681b      	ldr	r3, [r3, #0]
   136a6:	3303      	adds	r3, #3
   136a8:	781b      	ldrb	r3, [r3, #0]
   136aa:	78fa      	ldrb	r2, [r7, #3]
   136ac:	429a      	cmp	r2, r3
   136ae:	d112      	bne.n	136d6 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x52>
		{
			data=FourBytesArray2Uint32(receiverBuffer[i]);
   136b0:	687b      	ldr	r3, [r7, #4]
   136b2:	681b      	ldr	r3, [r3, #0]
   136b4:	3b0c      	subs	r3, #12
   136b6:	681b      	ldr	r3, [r3, #0]
   136b8:	461a      	mov	r2, r3
   136ba:	687b      	ldr	r3, [r7, #4]
   136bc:	1898      	adds	r0, r3, r2
   136be:	687b      	ldr	r3, [r7, #4]
   136c0:	691a      	ldr	r2, [r3, #16]
   136c2:	7bfb      	ldrb	r3, [r7, #15]
   136c4:	009b      	lsls	r3, r3, #2
   136c6:	4413      	add	r3, r2
   136c8:	681b      	ldr	r3, [r3, #0]
   136ca:	4619      	mov	r1, r3
   136cc:	4b06      	ldr	r3, [pc, #24]	; (136e8 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x64>)
   136ce:	4798      	blx	r3
   136d0:	60b8      	str	r0, [r7, #8]
			return data;
   136d2:	68bb      	ldr	r3, [r7, #8]
   136d4:	e004      	b.n	136e0 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x5c>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   136d6:	7bfb      	ldrb	r3, [r7, #15]
   136d8:	3301      	adds	r3, #1
   136da:	73fb      	strb	r3, [r7, #15]
   136dc:	e7da      	b.n	13694 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
   136de:	2300      	movs	r3, #0
}
   136e0:	4618      	mov	r0, r3
   136e2:	3710      	adds	r7, #16
   136e4:	46bd      	mov	sp, r7
   136e6:	bd80      	pop	{r7, pc}
   136e8:	00012ec5 	.word	0x00012ec5

000136ec <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh>:
   136ec:	b580      	push	{r7, lr}
   136ee:	b082      	sub	sp, #8
   136f0:	af00      	add	r7, sp, #0
   136f2:	6078      	str	r0, [r7, #4]
   136f4:	460b      	mov	r3, r1
   136f6:	70fb      	strb	r3, [r7, #3]
   136f8:	687b      	ldr	r3, [r7, #4]
   136fa:	681b      	ldr	r3, [r3, #0]
   136fc:	3b14      	subs	r3, #20
   136fe:	681b      	ldr	r3, [r3, #0]
   13700:	461a      	mov	r2, r3
   13702:	687b      	ldr	r3, [r7, #4]
   13704:	4413      	add	r3, r2
   13706:	78fa      	ldrb	r2, [r7, #3]
   13708:	4611      	mov	r1, r2
   1370a:	4618      	mov	r0, r3
   1370c:	4b03      	ldr	r3, [pc, #12]	; (1371c <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh+0x30>)
   1370e:	4798      	blx	r3
   13710:	4603      	mov	r3, r0
   13712:	4618      	mov	r0, r3
   13714:	3708      	adds	r7, #8
   13716:	46bd      	mov	sp, r7
   13718:	bd80      	pop	{r7, pc}
   1371a:	bf00      	nop
   1371c:	00013685 	.word	0x00013685

00013720 <_ZN15ARINC_Interface15ReadBufferLabelEm>:
uint32_t ARINC_Interface::ReadBufferLabel(uint32_t label){
   13720:	b580      	push	{r7, lr}
   13722:	b084      	sub	sp, #16
   13724:	af00      	add	r7, sp, #0
   13726:	6078      	str	r0, [r7, #4]
   13728:	6039      	str	r1, [r7, #0]
	uint8_t	l=Label2Byte((uint32_t)label);
   1372a:	687b      	ldr	r3, [r7, #4]
   1372c:	681b      	ldr	r3, [r3, #0]
   1372e:	3b0c      	subs	r3, #12
   13730:	681b      	ldr	r3, [r3, #0]
   13732:	461a      	mov	r2, r3
   13734:	687b      	ldr	r3, [r7, #4]
   13736:	4413      	add	r3, r2
   13738:	681b      	ldr	r3, [r3, #0]
   1373a:	3304      	adds	r3, #4
   1373c:	681b      	ldr	r3, [r3, #0]
   1373e:	687a      	ldr	r2, [r7, #4]
   13740:	6812      	ldr	r2, [r2, #0]
   13742:	3a0c      	subs	r2, #12
   13744:	6812      	ldr	r2, [r2, #0]
   13746:	4611      	mov	r1, r2
   13748:	687a      	ldr	r2, [r7, #4]
   1374a:	440a      	add	r2, r1
   1374c:	6839      	ldr	r1, [r7, #0]
   1374e:	4610      	mov	r0, r2
   13750:	4798      	blx	r3
   13752:	4603      	mov	r3, r0
   13754:	73fb      	strb	r3, [r7, #15]
	return (uint32_t)ReadBufferLabel(l);
   13756:	687b      	ldr	r3, [r7, #4]
   13758:	681b      	ldr	r3, [r3, #0]
   1375a:	3308      	adds	r3, #8
   1375c:	681b      	ldr	r3, [r3, #0]
   1375e:	7bfa      	ldrb	r2, [r7, #15]
   13760:	4611      	mov	r1, r2
   13762:	6878      	ldr	r0, [r7, #4]
   13764:	4798      	blx	r3
   13766:	4603      	mov	r3, r0
}
   13768:	4618      	mov	r0, r3
   1376a:	3710      	adds	r7, #16
   1376c:	46bd      	mov	sp, r7
   1376e:	bd80      	pop	{r7, pc}

00013770 <_ZN15ARINC_Interface18TrasmitSingleLabelEv>:
uint32_t ARINC_Interface::TrasmitSingleLabel(void){
   13770:	b580      	push	{r7, lr}
   13772:	b082      	sub	sp, #8
   13774:	af00      	add	r7, sp, #0
   13776:	6078      	str	r0, [r7, #4]
	return	TrasmitSingleLabel((uint32_t)DEFAULT_LABEL);
   13778:	f44f 7187 	mov.w	r1, #270	; 0x10e
   1377c:	6878      	ldr	r0, [r7, #4]
   1377e:	4b03      	ldr	r3, [pc, #12]	; (1378c <_ZN15ARINC_Interface18TrasmitSingleLabelEv+0x1c>)
   13780:	4798      	blx	r3
   13782:	4603      	mov	r3, r0
}
   13784:	4618      	mov	r0, r3
   13786:	3708      	adds	r7, #8
   13788:	46bd      	mov	sp, r7
   1378a:	bd80      	pop	{r7, pc}
   1378c:	00013791 	.word	0x00013791

00013790 <_ZN15ARINC_Interface18TrasmitSingleLabelEm>:

uint32_t ARINC_Interface::TrasmitSingleLabel(uint32_t l){
   13790:	b590      	push	{r4, r7, lr}
   13792:	b085      	sub	sp, #20
   13794:	af00      	add	r7, sp, #0
   13796:	6078      	str	r0, [r7, #4]
   13798:	6039      	str	r1, [r7, #0]
	gpio_set_pin_level(LED0,false);
   1379a:	2100      	movs	r1, #0
   1379c:	2052      	movs	r0, #82	; 0x52
   1379e:	4b45      	ldr	r3, [pc, #276]	; (138b4 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   137a0:	4798      	blx	r3
	octalLabel=Label2Byte(l);
   137a2:	687b      	ldr	r3, [r7, #4]
   137a4:	681b      	ldr	r3, [r3, #0]
   137a6:	3b0c      	subs	r3, #12
   137a8:	681b      	ldr	r3, [r3, #0]
   137aa:	461a      	mov	r2, r3
   137ac:	687b      	ldr	r3, [r7, #4]
   137ae:	4413      	add	r3, r2
   137b0:	681b      	ldr	r3, [r3, #0]
   137b2:	3304      	adds	r3, #4
   137b4:	681b      	ldr	r3, [r3, #0]
   137b6:	687a      	ldr	r2, [r7, #4]
   137b8:	6812      	ldr	r2, [r2, #0]
   137ba:	3a0c      	subs	r2, #12
   137bc:	6812      	ldr	r2, [r2, #0]
   137be:	4611      	mov	r1, r2
   137c0:	687a      	ldr	r2, [r7, #4]
   137c2:	440a      	add	r2, r1
   137c4:	6839      	ldr	r1, [r7, #0]
   137c6:	4610      	mov	r0, r2
   137c8:	4798      	blx	r3
   137ca:	4603      	mov	r3, r0
   137cc:	461a      	mov	r2, r3
   137ce:	687b      	ldr	r3, [r7, #4]
   137d0:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
	index=GetIndexTXLabelarray(FlipByte(octalLabel),LabelsArrayTX);
   137d4:	687b      	ldr	r3, [r7, #4]
   137d6:	681b      	ldr	r3, [r3, #0]
   137d8:	3b0c      	subs	r3, #12
   137da:	681b      	ldr	r3, [r3, #0]
   137dc:	461a      	mov	r2, r3
   137de:	687b      	ldr	r3, [r7, #4]
   137e0:	189c      	adds	r4, r3, r2
   137e2:	687b      	ldr	r3, [r7, #4]
   137e4:	681b      	ldr	r3, [r3, #0]
   137e6:	3b0c      	subs	r3, #12
   137e8:	681b      	ldr	r3, [r3, #0]
   137ea:	461a      	mov	r2, r3
   137ec:	687b      	ldr	r3, [r7, #4]
   137ee:	4413      	add	r3, r2
   137f0:	681b      	ldr	r3, [r3, #0]
   137f2:	681b      	ldr	r3, [r3, #0]
   137f4:	687a      	ldr	r2, [r7, #4]
   137f6:	6812      	ldr	r2, [r2, #0]
   137f8:	3a0c      	subs	r2, #12
   137fa:	6812      	ldr	r2, [r2, #0]
   137fc:	4611      	mov	r1, r2
   137fe:	687a      	ldr	r2, [r7, #4]
   13800:	1850      	adds	r0, r2, r1
   13802:	687a      	ldr	r2, [r7, #4]
   13804:	f892 2184 	ldrb.w	r2, [r2, #388]	; 0x184
   13808:	4611      	mov	r1, r2
   1380a:	4798      	blx	r3
   1380c:	4603      	mov	r3, r0
   1380e:	4619      	mov	r1, r3
   13810:	687b      	ldr	r3, [r7, #4]
   13812:	685b      	ldr	r3, [r3, #4]
   13814:	461a      	mov	r2, r3
   13816:	4620      	mov	r0, r4
   13818:	4b27      	ldr	r3, [pc, #156]	; (138b8 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x128>)
   1381a:	4798      	blx	r3
   1381c:	4603      	mov	r3, r0
   1381e:	461a      	mov	r2, r3
   13820:	687b      	ldr	r3, [r7, #4]
   13822:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	uint8_t localBuffer[4];
//	memcpy(localBuffer,LabelsArrayTX,4);
	memcpy(localBuffer,transmitBuffer[index],4);
   13826:	687b      	ldr	r3, [r7, #4]
   13828:	695a      	ldr	r2, [r3, #20]
   1382a:	687b      	ldr	r3, [r7, #4]
   1382c:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
   13830:	009b      	lsls	r3, r3, #2
   13832:	4413      	add	r3, r2
   13834:	681b      	ldr	r3, [r3, #0]
   13836:	681b      	ldr	r3, [r3, #0]
   13838:	60fb      	str	r3, [r7, #12]
//	Uint32FourBytesArray(0x1234561d,localBuffer);
//	PrepareSingleTXBuffer(TXBuffer,LabelsArrayTX);
	usb.println(" transmitting...");
   1383a:	4920      	ldr	r1, [pc, #128]	; (138bc <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x12c>)
   1383c:	4820      	ldr	r0, [pc, #128]	; (138c0 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   1383e:	4b21      	ldr	r3, [pc, #132]	; (138c4 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   13840:	4798      	blx	r3
	cpu_irq_disable();
   13842:	6878      	ldr	r0, [r7, #4]
   13844:	4b20      	ldr	r3, [pc, #128]	; (138c8 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x138>)
   13846:	4798      	blx	r3
	HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   13848:	687b      	ldr	r3, [r7, #4]
   1384a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   1384e:	f107 020c 	add.w	r2, r7, #12
   13852:	210c      	movs	r1, #12
   13854:	4618      	mov	r0, r3
   13856:	4b1d      	ldr	r3, [pc, #116]	; (138cc <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x13c>)
   13858:	4798      	blx	r3
	cpu_irq_enable();
   1385a:	6878      	ldr	r0, [r7, #4]
   1385c:	4b1c      	ldr	r3, [pc, #112]	; (138d0 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x140>)
   1385e:	4798      	blx	r3
	usb.println(" Transmitted!");
   13860:	491c      	ldr	r1, [pc, #112]	; (138d4 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x144>)
   13862:	4817      	ldr	r0, [pc, #92]	; (138c0 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   13864:	4b17      	ldr	r3, [pc, #92]	; (138c4 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   13866:	4798      	blx	r3
	usb.println(">");
   13868:	491b      	ldr	r1, [pc, #108]	; (138d8 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x148>)
   1386a:	4815      	ldr	r0, [pc, #84]	; (138c0 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   1386c:	4b15      	ldr	r3, [pc, #84]	; (138c4 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   1386e:	4798      	blx	r3
	printARINCTXData(TXBuffer);
   13870:	687b      	ldr	r3, [r7, #4]
   13872:	f203 1327 	addw	r3, r3, #295	; 0x127
   13876:	4619      	mov	r1, r3
   13878:	6878      	ldr	r0, [r7, #4]
   1387a:	4b18      	ldr	r3, [pc, #96]	; (138dc <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x14c>)
   1387c:	4798      	blx	r3
	txTimeout=false;
   1387e:	687b      	ldr	r3, [r7, #4]
   13880:	2200      	movs	r2, #0
   13882:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	gpio_set_pin_level(LED0,true);
   13886:	2101      	movs	r1, #1
   13888:	2052      	movs	r0, #82	; 0x52
   1388a:	4b0a      	ldr	r3, [pc, #40]	; (138b4 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   1388c:	4798      	blx	r3
	return FourBytesArray2Uint32(TXBuffer);
   1388e:	687b      	ldr	r3, [r7, #4]
   13890:	681b      	ldr	r3, [r3, #0]
   13892:	3b0c      	subs	r3, #12
   13894:	681b      	ldr	r3, [r3, #0]
   13896:	461a      	mov	r2, r3
   13898:	687b      	ldr	r3, [r7, #4]
   1389a:	441a      	add	r2, r3
   1389c:	687b      	ldr	r3, [r7, #4]
   1389e:	f203 1327 	addw	r3, r3, #295	; 0x127
   138a2:	4619      	mov	r1, r3
   138a4:	4610      	mov	r0, r2
   138a6:	4b0e      	ldr	r3, [pc, #56]	; (138e0 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x150>)
   138a8:	4798      	blx	r3
   138aa:	4603      	mov	r3, r0
}
   138ac:	4618      	mov	r0, r3
   138ae:	3714      	adds	r7, #20
   138b0:	46bd      	mov	sp, r7
   138b2:	bd90      	pop	{r4, r7, pc}
   138b4:	000130b5 	.word	0x000130b5
   138b8:	00012e87 	.word	0x00012e87
   138bc:	00021da4 	.word	0x00021da4
   138c0:	2000a140 	.word	0x2000a140
   138c4:	00018195 	.word	0x00018195
   138c8:	000139e1 	.word	0x000139e1
   138cc:	000140f9 	.word	0x000140f9
   138d0:	000139c9 	.word	0x000139c9
   138d4:	00021db8 	.word	0x00021db8
   138d8:	00021dc8 	.word	0x00021dc8
   138dc:	00013a31 	.word	0x00013a31
   138e0:	00012ec5 	.word	0x00012ec5

000138e4 <_ZN15ARINC_Interface18TrasmitSingleLabelEh>:

uint8_t ARINC_Interface::TrasmitSingleLabel(uint8_t l){
   138e4:	b580      	push	{r7, lr}
   138e6:	b084      	sub	sp, #16
   138e8:	af00      	add	r7, sp, #0
   138ea:	6078      	str	r0, [r7, #4]
   138ec:	460b      	mov	r3, r1
   138ee:	70fb      	strb	r3, [r7, #3]
	gpio_set_pin_level(LED0,false);
   138f0:	2100      	movs	r1, #0
   138f2:	2052      	movs	r0, #82	; 0x52
   138f4:	4b1c      	ldr	r3, [pc, #112]	; (13968 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x84>)
   138f6:	4798      	blx	r3
	index=GetIndexTXLabelarray(l,LabelsArrayTX);
   138f8:	687b      	ldr	r3, [r7, #4]
   138fa:	681b      	ldr	r3, [r3, #0]
   138fc:	3b0c      	subs	r3, #12
   138fe:	681b      	ldr	r3, [r3, #0]
   13900:	461a      	mov	r2, r3
   13902:	687b      	ldr	r3, [r7, #4]
   13904:	1898      	adds	r0, r3, r2
   13906:	687b      	ldr	r3, [r7, #4]
   13908:	685a      	ldr	r2, [r3, #4]
   1390a:	78fb      	ldrb	r3, [r7, #3]
   1390c:	4619      	mov	r1, r3
   1390e:	4b17      	ldr	r3, [pc, #92]	; (1396c <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x88>)
   13910:	4798      	blx	r3
   13912:	4603      	mov	r3, r0
   13914:	461a      	mov	r2, r3
   13916:	687b      	ldr	r3, [r7, #4]
   13918:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	uint8_t localBuffer[4];
	//	memcpy(localBuffer,LabelsArrayTX,4);
	memcpy(localBuffer,transmitBuffer[index],4);
   1391c:	687b      	ldr	r3, [r7, #4]
   1391e:	695a      	ldr	r2, [r3, #20]
   13920:	687b      	ldr	r3, [r7, #4]
   13922:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
   13926:	009b      	lsls	r3, r3, #2
   13928:	4413      	add	r3, r2
   1392a:	681b      	ldr	r3, [r3, #0]
   1392c:	681b      	ldr	r3, [r3, #0]
   1392e:	60fb      	str	r3, [r7, #12]
	//	Uint32FourBytesArray(0x1234561d,localBuffer);
	//	PrepareSingleTXBuffer(TXBuffer,LabelsArrayTX);
//	usb.println(" transmitting...");
	cpu_irq_disable();
   13930:	6878      	ldr	r0, [r7, #4]
   13932:	4b0f      	ldr	r3, [pc, #60]	; (13970 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x8c>)
   13934:	4798      	blx	r3
	HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   13936:	687b      	ldr	r3, [r7, #4]
   13938:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   1393c:	f107 020c 	add.w	r2, r7, #12
   13940:	210c      	movs	r1, #12
   13942:	4618      	mov	r0, r3
   13944:	4b0b      	ldr	r3, [pc, #44]	; (13974 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x90>)
   13946:	4798      	blx	r3
	cpu_irq_enable();
   13948:	6878      	ldr	r0, [r7, #4]
   1394a:	4b0b      	ldr	r3, [pc, #44]	; (13978 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x94>)
   1394c:	4798      	blx	r3
	//usb.println(" Transmitted!");
//	usb.println(">");
	//printARINCTXData(TXBuffer);
	txTimeout=false;
   1394e:	687b      	ldr	r3, [r7, #4]
   13950:	2200      	movs	r2, #0
   13952:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	gpio_set_pin_level(LED0,true);
   13956:	2101      	movs	r1, #1
   13958:	2052      	movs	r0, #82	; 0x52
   1395a:	4b03      	ldr	r3, [pc, #12]	; (13968 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x84>)
   1395c:	4798      	blx	r3
	return l;
   1395e:	78fb      	ldrb	r3, [r7, #3]
}
   13960:	4618      	mov	r0, r3
   13962:	3710      	adds	r7, #16
   13964:	46bd      	mov	sp, r7
   13966:	bd80      	pop	{r7, pc}
   13968:	000130b5 	.word	0x000130b5
   1396c:	00012e87 	.word	0x00012e87
   13970:	000139e1 	.word	0x000139e1
   13974:	000140f9 	.word	0x000140f9
   13978:	000139c9 	.word	0x000139c9

0001397c <_ZN15ARINC_Interface16TransmitTXBufferEv>:

void	ARINC_Interface::TransmitTXBuffer(void){
   1397c:	b580      	push	{r7, lr}
   1397e:	b084      	sub	sp, #16
   13980:	af00      	add	r7, sp, #0
   13982:	6078      	str	r0, [r7, #4]
	uint8_t i,l;
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   13984:	2300      	movs	r3, #0
   13986:	73fb      	strb	r3, [r7, #15]
   13988:	7bfb      	ldrb	r3, [r7, #15]
   1398a:	2b1f      	cmp	r3, #31
   1398c:	dc15      	bgt.n	139ba <_ZN15ARINC_Interface16TransmitTXBufferEv+0x3e>
	{
		if (LabelsArrayTX[i]>0)
   1398e:	687b      	ldr	r3, [r7, #4]
   13990:	685a      	ldr	r2, [r3, #4]
   13992:	7bfb      	ldrb	r3, [r7, #15]
   13994:	4413      	add	r3, r2
   13996:	781b      	ldrb	r3, [r3, #0]
   13998:	2b00      	cmp	r3, #0
   1399a:	dd0a      	ble.n	139b2 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x36>
		{
			l=LabelsArrayTX[i];
   1399c:	687b      	ldr	r3, [r7, #4]
   1399e:	685a      	ldr	r2, [r3, #4]
   139a0:	7bfb      	ldrb	r3, [r7, #15]
   139a2:	4413      	add	r3, r2
   139a4:	781b      	ldrb	r3, [r3, #0]
   139a6:	73bb      	strb	r3, [r7, #14]
			TrasmitSingleLabel(l);
   139a8:	7bbb      	ldrb	r3, [r7, #14]
   139aa:	4619      	mov	r1, r3
   139ac:	6878      	ldr	r0, [r7, #4]
   139ae:	4b05      	ldr	r3, [pc, #20]	; (139c4 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x48>)
   139b0:	4798      	blx	r3
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   139b2:	7bfb      	ldrb	r3, [r7, #15]
   139b4:	3301      	adds	r3, #1
   139b6:	73fb      	strb	r3, [r7, #15]
   139b8:	e7e6      	b.n	13988 <_ZN15ARINC_Interface16TransmitTXBufferEv+0xc>
		}
	}
}
   139ba:	bf00      	nop
   139bc:	3710      	adds	r7, #16
   139be:	46bd      	mov	sp, r7
   139c0:	bd80      	pop	{r7, pc}
   139c2:	bf00      	nop
   139c4:	000138e5 	.word	0x000138e5

000139c8 <_ZN15ARINC_Interface14cpu_irq_enableEv>:
	usb.println("  I = Increment Message and Transmit. Explorer Mode  - ONLY!");
	usb.println("  M = Enter Custom Message. Explorer Mode  - ONLY!");
	usb.println("  ENTER= Transmit next message. Explorer Mode  - ONLY!");
}

void	ARINC_Interface::cpu_irq_enable(void){
   139c8:	b480      	push	{r7}
   139ca:	b083      	sub	sp, #12
   139cc:	af00      	add	r7, sp, #0
   139ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   139d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   139d4:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   139d6:	bf00      	nop
   139d8:	370c      	adds	r7, #12
   139da:	46bd      	mov	sp, r7
   139dc:	bc80      	pop	{r7}
   139de:	4770      	bx	lr

000139e0 <_ZN15ARINC_Interface15cpu_irq_disableEv>:
void	ARINC_Interface::cpu_irq_disable(void){
   139e0:	b480      	push	{r7}
   139e2:	b083      	sub	sp, #12
   139e4:	af00      	add	r7, sp, #0
   139e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   139e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   139ec:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   139ee:	bf00      	nop
   139f0:	370c      	adds	r7, #12
   139f2:	46bd      	mov	sp, r7
   139f4:	bc80      	pop	{r7}
   139f6:	4770      	bx	lr

000139f8 <_ZN15ARINC_Interface12PrintHexByteEh>:
	usb.write(&p,1);
	p=0x0D;
	usb.write(&p,1);
}
void ARINC_Interface::PrintHexByte(uint8_t c)
{
   139f8:	b580      	push	{r7, lr}
   139fa:	b082      	sub	sp, #8
   139fc:	af00      	add	r7, sp, #0
   139fe:	6078      	str	r0, [r7, #4]
   13a00:	460b      	mov	r3, r1
   13a02:	70fb      	strb	r3, [r7, #3]
	usb<<"0x ";
   13a04:	4906      	ldr	r1, [pc, #24]	; (13a20 <_ZN15ARINC_Interface12PrintHexByteEh+0x28>)
   13a06:	4807      	ldr	r0, [pc, #28]	; (13a24 <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   13a08:	4b07      	ldr	r3, [pc, #28]	; (13a28 <_ZN15ARINC_Interface12PrintHexByteEh+0x30>)
   13a0a:	4798      	blx	r3
	usb.println(c,HEX);
   13a0c:	78fb      	ldrb	r3, [r7, #3]
   13a0e:	2210      	movs	r2, #16
   13a10:	4619      	mov	r1, r3
   13a12:	4804      	ldr	r0, [pc, #16]	; (13a24 <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   13a14:	4b05      	ldr	r3, [pc, #20]	; (13a2c <_ZN15ARINC_Interface12PrintHexByteEh+0x34>)
   13a16:	4798      	blx	r3
	
}
   13a18:	bf00      	nop
   13a1a:	3708      	adds	r7, #8
   13a1c:	46bd      	mov	sp, r7
   13a1e:	bd80      	pop	{r7, pc}
   13a20:	00022268 	.word	0x00022268
   13a24:	2000a140 	.word	0x2000a140
   13a28:	0000144d 	.word	0x0000144d
   13a2c:	000181c9 	.word	0x000181c9

00013a30 <_ZN15ARINC_Interface16printARINCTXDataEPh>:
		usb.println("\n\rLabels 192-255:  ");
	}
	
}

void ARINC_Interface::printARINCTXData(unsigned char *array) {
   13a30:	b580      	push	{r7, lr}
   13a32:	b084      	sub	sp, #16
   13a34:	af00      	add	r7, sp, #0
   13a36:	6078      	str	r0, [r7, #4]
   13a38:	6039      	str	r1, [r7, #0]
	unsigned char i;
	
	usb.println("\n\r>TX    Data:");
   13a3a:	4914      	ldr	r1, [pc, #80]	; (13a8c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x5c>)
   13a3c:	4814      	ldr	r0, [pc, #80]	; (13a90 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13a3e:	4b15      	ldr	r3, [pc, #84]	; (13a94 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13a40:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   13a42:	2300      	movs	r3, #0
   13a44:	73fb      	strb	r3, [r7, #15]
   13a46:	7bfb      	ldrb	r3, [r7, #15]
   13a48:	2b02      	cmp	r3, #2
   13a4a:	dc0b      	bgt.n	13a64 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x34>
		PrintHexByte(array[i]);          // Output the data
   13a4c:	7bfb      	ldrb	r3, [r7, #15]
   13a4e:	683a      	ldr	r2, [r7, #0]
   13a50:	4413      	add	r3, r2
   13a52:	781b      	ldrb	r3, [r3, #0]
   13a54:	4619      	mov	r1, r3
   13a56:	6878      	ldr	r0, [r7, #4]
   13a58:	4b0f      	ldr	r3, [pc, #60]	; (13a98 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   13a5a:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   13a5c:	7bfb      	ldrb	r3, [r7, #15]
   13a5e:	3301      	adds	r3, #1
   13a60:	73fb      	strb	r3, [r7, #15]
   13a62:	e7f0      	b.n	13a46 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x16>
	}
	usb.println("Label:");
   13a64:	490d      	ldr	r1, [pc, #52]	; (13a9c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x6c>)
   13a66:	480a      	ldr	r0, [pc, #40]	; (13a90 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13a68:	4b0a      	ldr	r3, [pc, #40]	; (13a94 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13a6a:	4798      	blx	r3
	PrintHexByte(array[3]);             // Output the label data
   13a6c:	683b      	ldr	r3, [r7, #0]
   13a6e:	3303      	adds	r3, #3
   13a70:	781b      	ldrb	r3, [r3, #0]
   13a72:	4619      	mov	r1, r3
   13a74:	6878      	ldr	r0, [r7, #4]
   13a76:	4b08      	ldr	r3, [pc, #32]	; (13a98 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   13a78:	4798      	blx	r3
	
	//crlf();
	usb.println(">");
   13a7a:	4909      	ldr	r1, [pc, #36]	; (13aa0 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x70>)
   13a7c:	4804      	ldr	r0, [pc, #16]	; (13a90 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13a7e:	4b05      	ldr	r3, [pc, #20]	; (13a94 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13a80:	4798      	blx	r3
}
   13a82:	bf00      	nop
   13a84:	3710      	adds	r7, #16
   13a86:	46bd      	mov	sp, r7
   13a88:	bd80      	pop	{r7, pc}
   13a8a:	bf00      	nop
   13a8c:	00022438 	.word	0x00022438
   13a90:	2000a140 	.word	0x2000a140
   13a94:	00018195 	.word	0x00018195
   13a98:	000139f9 	.word	0x000139f9
   13a9c:	00022448 	.word	0x00022448
   13aa0:	00021dc8 	.word	0x00021dc8

00013aa4 <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
   13aa4:	b580      	push	{r7, lr}
   13aa6:	b082      	sub	sp, #8
   13aa8:	af00      	add	r7, sp, #0
   13aaa:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   13aac:	2001      	movs	r0, #1
   13aae:	4b03      	ldr	r3, [pc, #12]	; (13abc <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
   13ab0:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
   13ab2:	bf00      	nop
   13ab4:	3708      	adds	r7, #8
   13ab6:	46bd      	mov	sp, r7
   13ab8:	bd80      	pop	{r7, pc}
   13aba:	bf00      	nop
   13abc:	0000647d 	.word	0x0000647d

00013ac0 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

 ARINC_Interface	arinc;
   13ac0:	b580      	push	{r7, lr}
   13ac2:	b082      	sub	sp, #8
   13ac4:	af00      	add	r7, sp, #0
   13ac6:	6078      	str	r0, [r7, #4]
   13ac8:	6039      	str	r1, [r7, #0]
   13aca:	687b      	ldr	r3, [r7, #4]
   13acc:	2b01      	cmp	r3, #1
   13ace:	d10c      	bne.n	13aea <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13ad0:	683b      	ldr	r3, [r7, #0]
   13ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13ad6:	4293      	cmp	r3, r2
   13ad8:	d107      	bne.n	13aea <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13ada:	4806      	ldr	r0, [pc, #24]	; (13af4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13adc:	4b06      	ldr	r3, [pc, #24]	; (13af8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13ade:	4798      	blx	r3
   13ae0:	4a06      	ldr	r2, [pc, #24]	; (13afc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13ae2:	4907      	ldr	r1, [pc, #28]	; (13b00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13ae4:	4803      	ldr	r0, [pc, #12]	; (13af4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13ae6:	4b07      	ldr	r3, [pc, #28]	; (13b04 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13ae8:	4798      	blx	r3
   13aea:	bf00      	nop
   13aec:	3708      	adds	r7, #8
   13aee:	46bd      	mov	sp, r7
   13af0:	bd80      	pop	{r7, pc}
   13af2:	bf00      	nop
   13af4:	20008d24 	.word	0x20008d24
   13af8:	000131ad 	.word	0x000131ad
   13afc:	20000000 	.word	0x20000000
   13b00:	000132a5 	.word	0x000132a5
   13b04:	00019ab1 	.word	0x00019ab1

00013b08 <_GLOBAL__sub_I_HexSymbols>:
   13b08:	b580      	push	{r7, lr}
   13b0a:	af00      	add	r7, sp, #0
   13b0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13b10:	2001      	movs	r0, #1
   13b12:	4b01      	ldr	r3, [pc, #4]	; (13b18 <_GLOBAL__sub_I_HexSymbols+0x10>)
   13b14:	4798      	blx	r3
   13b16:	bd80      	pop	{r7, pc}
   13b18:	00013ac1 	.word	0x00013ac1

00013b1c <hri_port_set_OUT_reg>:
{
   13b1c:	b480      	push	{r7}
   13b1e:	b085      	sub	sp, #20
   13b20:	af00      	add	r7, sp, #0
   13b22:	60f8      	str	r0, [r7, #12]
   13b24:	460b      	mov	r3, r1
   13b26:	607a      	str	r2, [r7, #4]
   13b28:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   13b2a:	7afb      	ldrb	r3, [r7, #11]
   13b2c:	68fa      	ldr	r2, [r7, #12]
   13b2e:	01db      	lsls	r3, r3, #7
   13b30:	4413      	add	r3, r2
   13b32:	3318      	adds	r3, #24
   13b34:	687a      	ldr	r2, [r7, #4]
   13b36:	601a      	str	r2, [r3, #0]
}
   13b38:	bf00      	nop
   13b3a:	3714      	adds	r7, #20
   13b3c:	46bd      	mov	sp, r7
   13b3e:	bc80      	pop	{r7}
   13b40:	4770      	bx	lr

00013b42 <hri_port_clear_OUT_reg>:
{
   13b42:	b480      	push	{r7}
   13b44:	b085      	sub	sp, #20
   13b46:	af00      	add	r7, sp, #0
   13b48:	60f8      	str	r0, [r7, #12]
   13b4a:	460b      	mov	r3, r1
   13b4c:	607a      	str	r2, [r7, #4]
   13b4e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   13b50:	7afb      	ldrb	r3, [r7, #11]
   13b52:	68fa      	ldr	r2, [r7, #12]
   13b54:	01db      	lsls	r3, r3, #7
   13b56:	4413      	add	r3, r2
   13b58:	3314      	adds	r3, #20
   13b5a:	687a      	ldr	r2, [r7, #4]
   13b5c:	601a      	str	r2, [r3, #0]
}
   13b5e:	bf00      	nop
   13b60:	3714      	adds	r7, #20
   13b62:	46bd      	mov	sp, r7
   13b64:	bc80      	pop	{r7}
   13b66:	4770      	bx	lr

00013b68 <_gpio_set_level>:
{
   13b68:	b580      	push	{r7, lr}
   13b6a:	b082      	sub	sp, #8
   13b6c:	af00      	add	r7, sp, #0
   13b6e:	4603      	mov	r3, r0
   13b70:	6039      	str	r1, [r7, #0]
   13b72:	71fb      	strb	r3, [r7, #7]
   13b74:	4613      	mov	r3, r2
   13b76:	71bb      	strb	r3, [r7, #6]
	if (level) {
   13b78:	79bb      	ldrb	r3, [r7, #6]
   13b7a:	2b00      	cmp	r3, #0
   13b7c:	d006      	beq.n	13b8c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   13b7e:	79fb      	ldrb	r3, [r7, #7]
   13b80:	683a      	ldr	r2, [r7, #0]
   13b82:	4619      	mov	r1, r3
   13b84:	4806      	ldr	r0, [pc, #24]	; (13ba0 <_gpio_set_level+0x38>)
   13b86:	4b07      	ldr	r3, [pc, #28]	; (13ba4 <_gpio_set_level+0x3c>)
   13b88:	4798      	blx	r3
}
   13b8a:	e005      	b.n	13b98 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   13b8c:	79fb      	ldrb	r3, [r7, #7]
   13b8e:	683a      	ldr	r2, [r7, #0]
   13b90:	4619      	mov	r1, r3
   13b92:	4803      	ldr	r0, [pc, #12]	; (13ba0 <_gpio_set_level+0x38>)
   13b94:	4b04      	ldr	r3, [pc, #16]	; (13ba8 <_gpio_set_level+0x40>)
   13b96:	4798      	blx	r3
}
   13b98:	bf00      	nop
   13b9a:	3708      	adds	r7, #8
   13b9c:	46bd      	mov	sp, r7
   13b9e:	bd80      	pop	{r7, pc}
   13ba0:	41008000 	.word	0x41008000
   13ba4:	00013b1d 	.word	0x00013b1d
   13ba8:	00013b43 	.word	0x00013b43

00013bac <gpio_set_pin_level>:
{
   13bac:	b580      	push	{r7, lr}
   13bae:	b082      	sub	sp, #8
   13bb0:	af00      	add	r7, sp, #0
   13bb2:	4603      	mov	r3, r0
   13bb4:	460a      	mov	r2, r1
   13bb6:	71fb      	strb	r3, [r7, #7]
   13bb8:	4613      	mov	r3, r2
   13bba:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13bbc:	79fb      	ldrb	r3, [r7, #7]
   13bbe:	115b      	asrs	r3, r3, #5
   13bc0:	b2d8      	uxtb	r0, r3
   13bc2:	79fb      	ldrb	r3, [r7, #7]
   13bc4:	f003 031f 	and.w	r3, r3, #31
   13bc8:	2201      	movs	r2, #1
   13bca:	fa02 f303 	lsl.w	r3, r2, r3
   13bce:	79ba      	ldrb	r2, [r7, #6]
   13bd0:	4619      	mov	r1, r3
   13bd2:	4b03      	ldr	r3, [pc, #12]	; (13be0 <gpio_set_pin_level+0x34>)
   13bd4:	4798      	blx	r3
}
   13bd6:	bf00      	nop
   13bd8:	3708      	adds	r7, #8
   13bda:	46bd      	mov	sp, r7
   13bdc:	bd80      	pop	{r7, pc}
   13bde:	bf00      	nop
   13be0:	00013b69 	.word	0x00013b69

00013be4 <_ZN15Holt_3593_ClassC1Ev>:
#include "Holt_3593_Class.h"
#include "ARINC_Interface.h"
#include "string.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
   13be4:	b580      	push	{r7, lr}
   13be6:	b082      	sub	sp, #8
   13be8:	af00      	add	r7, sp, #0
   13bea:	6078      	str	r0, [r7, #4]
   13bec:	687b      	ldr	r3, [r7, #4]
   13bee:	4618      	mov	r0, r3
   13bf0:	4b03      	ldr	r3, [pc, #12]	; (13c00 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
   13bf2:	4798      	blx	r3
{
} //Holt_3593_Class
   13bf4:	687b      	ldr	r3, [r7, #4]
   13bf6:	4618      	mov	r0, r3
   13bf8:	3708      	adds	r7, #8
   13bfa:	46bd      	mov	sp, r7
   13bfc:	bd80      	pop	{r7, pc}
   13bfe:	bf00      	nop
   13c00:	00015c19 	.word	0x00015c19

00013c04 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
   13c04:	b580      	push	{r7, lr}
   13c06:	b082      	sub	sp, #8
   13c08:	af00      	add	r7, sp, #0
   13c0a:	6078      	str	r0, [r7, #4]
   13c0c:	687b      	ldr	r3, [r7, #4]
   13c0e:	4618      	mov	r0, r3
   13c10:	4b03      	ldr	r3, [pc, #12]	; (13c20 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
   13c12:	4798      	blx	r3
{
} //~Holt_3593_Class
   13c14:	687b      	ldr	r3, [r7, #4]
   13c16:	4618      	mov	r0, r3
   13c18:	3708      	adds	r7, #8
   13c1a:	46bd      	mov	sp, r7
   13c1c:	bd80      	pop	{r7, pc}
   13c1e:	bf00      	nop
   13c20:	00015c39 	.word	0x00015c39

00013c24 <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
   13c24:	b590      	push	{r4, r7, lr}
   13c26:	b089      	sub	sp, #36	; 0x24
   13c28:	af02      	add	r7, sp, #8
   13c2a:	6078      	str	r0, [r7, #4]
	 
	 spi.SetDescriptor(&SPI_HI3593);
   13c2c:	687b      	ldr	r3, [r7, #4]
   13c2e:	492c      	ldr	r1, [pc, #176]	; (13ce0 <_ZN15Holt_3593_Class4InitEv+0xbc>)
   13c30:	4618      	mov	r0, r3
   13c32:	4b2c      	ldr	r3, [pc, #176]	; (13ce4 <_ZN15Holt_3593_Class4InitEv+0xc0>)
   13c34:	4798      	blx	r3
	  spi.init();
   13c36:	687b      	ldr	r3, [r7, #4]
   13c38:	4618      	mov	r0, r3
   13c3a:	4b2b      	ldr	r3, [pc, #172]	; (13ce8 <_ZN15Holt_3593_Class4InitEv+0xc4>)
   13c3c:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
   13c3e:	2340      	movs	r3, #64	; 0x40
   13c40:	9301      	str	r3, [sp, #4]
   13c42:	2300      	movs	r3, #0
   13c44:	9300      	str	r3, [sp, #0]
   13c46:	2300      	movs	r3, #0
   13c48:	2201      	movs	r2, #1
   13c4a:	2104      	movs	r1, #4
   13c4c:	6878      	ldr	r0, [r7, #4]
   13c4e:	4c27      	ldr	r4, [pc, #156]	; (13cec <_ZN15Holt_3593_Class4InitEv+0xc8>)
   13c50:	47a0      	blx	r4
   13c52:	4603      	mov	r3, r0
   13c54:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
   13c56:	2300      	movs	r3, #0
   13c58:	617b      	str	r3, [r7, #20]
   13c5a:	697b      	ldr	r3, [r7, #20]
   13c5c:	2b1f      	cmp	r3, #31
   13c5e:	dc27      	bgt.n	13cb0 <_ZN15Holt_3593_Class4InitEv+0x8c>
	{
// 		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
// 		LabelArray_1[i]=LabelArray_2[i];
		LabelArray_2[i]=LabelArray_1[i];
   13c60:	4a23      	ldr	r2, [pc, #140]	; (13cf0 <_ZN15Holt_3593_Class4InitEv+0xcc>)
   13c62:	697b      	ldr	r3, [r7, #20]
   13c64:	4413      	add	r3, r2
   13c66:	7819      	ldrb	r1, [r3, #0]
   13c68:	4a22      	ldr	r2, [pc, #136]	; (13cf4 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13c6a:	697b      	ldr	r3, [r7, #20]
   13c6c:	4413      	add	r3, r2
   13c6e:	460a      	mov	r2, r1
   13c70:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX1[i]=LabelArray_2[i];
   13c72:	4b21      	ldr	r3, [pc, #132]	; (13cf8 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13c74:	689a      	ldr	r2, [r3, #8]
   13c76:	697b      	ldr	r3, [r7, #20]
   13c78:	4413      	add	r3, r2
   13c7a:	491e      	ldr	r1, [pc, #120]	; (13cf4 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13c7c:	697a      	ldr	r2, [r7, #20]
   13c7e:	440a      	add	r2, r1
   13c80:	7812      	ldrb	r2, [r2, #0]
   13c82:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX2[i]=LabelArray_2[i];
   13c84:	4b1c      	ldr	r3, [pc, #112]	; (13cf8 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13c86:	68da      	ldr	r2, [r3, #12]
   13c88:	697b      	ldr	r3, [r7, #20]
   13c8a:	4413      	add	r3, r2
   13c8c:	4919      	ldr	r1, [pc, #100]	; (13cf4 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13c8e:	697a      	ldr	r2, [r7, #20]
   13c90:	440a      	add	r2, r1
   13c92:	7812      	ldrb	r2, [r2, #0]
   13c94:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayTX[i]=LabelArray_2[i];
   13c96:	4b18      	ldr	r3, [pc, #96]	; (13cf8 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13c98:	685a      	ldr	r2, [r3, #4]
   13c9a:	697b      	ldr	r3, [r7, #20]
   13c9c:	4413      	add	r3, r2
   13c9e:	4915      	ldr	r1, [pc, #84]	; (13cf4 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13ca0:	697a      	ldr	r2, [r7, #20]
   13ca2:	440a      	add	r2, r1
   13ca4:	7812      	ldrb	r2, [r2, #0]
   13ca6:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
   13ca8:	697b      	ldr	r3, [r7, #20]
   13caa:	3301      	adds	r3, #1
   13cac:	617b      	str	r3, [r7, #20]
   13cae:	e7d4      	b.n	13c5a <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
   13cb0:	2300      	movs	r3, #0
   13cb2:	613b      	str	r3, [r7, #16]
   13cb4:	693b      	ldr	r3, [r7, #16]
   13cb6:	2b02      	cmp	r3, #2
   13cb8:	dc0c      	bgt.n	13cd4 <_ZN15Holt_3593_Class4InitEv+0xb0>
	{
		//LabelPriority2[i]=FlipByte(LabelPriority1[i]);
		LabelPriority2[i]=LabelPriority1[i];
   13cba:	4a10      	ldr	r2, [pc, #64]	; (13cfc <_ZN15Holt_3593_Class4InitEv+0xd8>)
   13cbc:	693b      	ldr	r3, [r7, #16]
   13cbe:	4413      	add	r3, r2
   13cc0:	7819      	ldrb	r1, [r3, #0]
   13cc2:	4a0f      	ldr	r2, [pc, #60]	; (13d00 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   13cc4:	693b      	ldr	r3, [r7, #16]
   13cc6:	4413      	add	r3, r2
   13cc8:	460a      	mov	r2, r1
   13cca:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
   13ccc:	693b      	ldr	r3, [r7, #16]
   13cce:	3301      	adds	r3, #1
   13cd0:	613b      	str	r3, [r7, #16]
   13cd2:	e7ef      	b.n	13cb4 <_ZN15Holt_3593_Class4InitEv+0x90>
	}
	//memcpy(arinc.LabelsArrayRX1,LabelArray_1,LABEL_ARRAY_SIZE);	
//	memcpy(arinc.LabelsArrayRX2,LabelArray_2,LABEL_ARRAY_SIZE);	
	//memcpy(arinc.LabelsArrayTX,LabelArray_2,LABEL_ARRAY_SIZE);		
	return	status;
   13cd4:	7bfb      	ldrb	r3, [r7, #15]
 } 
   13cd6:	4618      	mov	r0, r3
   13cd8:	371c      	adds	r7, #28
   13cda:	46bd      	mov	sp, r7
   13cdc:	bd90      	pop	{r4, r7, pc}
   13cde:	bf00      	nop
   13ce0:	2000a59c 	.word	0x2000a59c
   13ce4:	00015c95 	.word	0x00015c95
   13ce8:	00015c4d 	.word	0x00015c4d
   13cec:	00013d05 	.word	0x00013d05
   13cf0:	00022854 	.word	0x00022854
   13cf4:	20009010 	.word	0x20009010
   13cf8:	20008d24 	.word	0x20008d24
   13cfc:	20000244 	.word	0x20000244
   13d00:	20009030 	.word	0x20009030

00013d04 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
   13d04:	b580      	push	{r7, lr}
   13d06:	b084      	sub	sp, #16
   13d08:	af00      	add	r7, sp, #0
   13d0a:	6078      	str	r0, [r7, #4]
   13d0c:	4608      	mov	r0, r1
   13d0e:	4611      	mov	r1, r2
   13d10:	461a      	mov	r2, r3
   13d12:	4603      	mov	r3, r0
   13d14:	70fb      	strb	r3, [r7, #3]
   13d16:	460b      	mov	r3, r1
   13d18:	70bb      	strb	r3, [r7, #2]
   13d1a:	4613      	mov	r3, r2
   13d1c:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
   13d1e:	2300      	movs	r3, #0
   13d20:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
   13d22:	2104      	movs	r1, #4
   13d24:	6878      	ldr	r0, [r7, #4]
   13d26:	4b18      	ldr	r3, [pc, #96]	; (13d88 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
   13d28:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   13d2a:	78fb      	ldrb	r3, [r7, #3]
   13d2c:	461a      	mov	r2, r3
   13d2e:	2138      	movs	r1, #56	; 0x38
   13d30:	6878      	ldr	r0, [r7, #4]
   13d32:	4b16      	ldr	r3, [pc, #88]	; (13d8c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   13d34:	4798      	blx	r3
	 cmd =  arate;
   13d36:	7e3b      	ldrb	r3, [r7, #24]
   13d38:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
   13d3a:	787b      	ldrb	r3, [r7, #1]
   13d3c:	011b      	lsls	r3, r3, #4
   13d3e:	b25a      	sxtb	r2, r3
   13d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13d44:	4313      	orrs	r3, r2
   13d46:	b25b      	sxtb	r3, r3
   13d48:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
   13d4a:	78bb      	ldrb	r3, [r7, #2]
   13d4c:	015b      	lsls	r3, r3, #5
   13d4e:	b25a      	sxtb	r2, r3
   13d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13d54:	4313      	orrs	r3, r2
   13d56:	b25b      	sxtb	r3, r3
   13d58:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
   13d5a:	7f3b      	ldrb	r3, [r7, #28]
   13d5c:	019b      	lsls	r3, r3, #6
   13d5e:	b25a      	sxtb	r2, r3
   13d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13d64:	4313      	orrs	r3, r2
   13d66:	b25b      	sxtb	r3, r3
   13d68:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   13d6a:	7bfb      	ldrb	r3, [r7, #15]
   13d6c:	461a      	mov	r2, r3
   13d6e:	2108      	movs	r1, #8
   13d70:	6878      	ldr	r0, [r7, #4]
   13d72:	4b06      	ldr	r3, [pc, #24]	; (13d8c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   13d74:	4798      	blx	r3
	 return R_Register (R_TSR);
   13d76:	2180      	movs	r1, #128	; 0x80
   13d78:	6878      	ldr	r0, [r7, #4]
   13d7a:	4b05      	ldr	r3, [pc, #20]	; (13d90 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
   13d7c:	4798      	blx	r3
   13d7e:	4603      	mov	r3, r0
	 
	 
 }
   13d80:	4618      	mov	r0, r3
   13d82:	3710      	adds	r7, #16
   13d84:	46bd      	mov	sp, r7
   13d86:	bd80      	pop	{r7, pc}
   13d88:	000141a5 	.word	0x000141a5
   13d8c:	000141f9 	.word	0x000141f9
   13d90:	0001426d 	.word	0x0001426d

00013d94 <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
   13d94:	b580      	push	{r7, lr}
   13d96:	b082      	sub	sp, #8
   13d98:	af00      	add	r7, sp, #0
   13d9a:	6078      	str	r0, [r7, #4]
	 	spi.Enable();
   13d9c:	687b      	ldr	r3, [r7, #4]
   13d9e:	4618      	mov	r0, r3
   13da0:	4b04      	ldr	r3, [pc, #16]	; (13db4 <_ZN15Holt_3593_Class4openEv+0x20>)
   13da2:	4798      	blx	r3
		 SS_Low();
   13da4:	6878      	ldr	r0, [r7, #4]
   13da6:	4b04      	ldr	r3, [pc, #16]	; (13db8 <_ZN15Holt_3593_Class4openEv+0x24>)
   13da8:	4798      	blx	r3
 }
   13daa:	bf00      	nop
   13dac:	3708      	adds	r7, #8
   13dae:	46bd      	mov	sp, r7
   13db0:	bd80      	pop	{r7, pc}
   13db2:	bf00      	nop
   13db4:	00015cb9 	.word	0x00015cb9
   13db8:	000142b5 	.word	0x000142b5

00013dbc <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
   13dbc:	b580      	push	{r7, lr}
   13dbe:	b082      	sub	sp, #8
   13dc0:	af00      	add	r7, sp, #0
   13dc2:	6078      	str	r0, [r7, #4]
	    SS_High();
   13dc4:	6878      	ldr	r0, [r7, #4]
   13dc6:	4b05      	ldr	r3, [pc, #20]	; (13ddc <_ZN15Holt_3593_Class5closeEv+0x20>)
   13dc8:	4798      	blx	r3
	  spi.Disable();
   13dca:	687b      	ldr	r3, [r7, #4]
   13dcc:	4618      	mov	r0, r3
   13dce:	4b04      	ldr	r3, [pc, #16]	; (13de0 <_ZN15Holt_3593_Class5closeEv+0x24>)
   13dd0:	4798      	blx	r3
	
  }
   13dd2:	bf00      	nop
   13dd4:	3708      	adds	r7, #8
   13dd6:	46bd      	mov	sp, r7
   13dd8:	bd80      	pop	{r7, pc}
   13dda:	bf00      	nop
   13ddc:	000142d1 	.word	0x000142d1
   13de0:	00015d7d 	.word	0x00015d7d

00013de4 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   13de4:	b580      	push	{r7, lr}
   13de6:	b084      	sub	sp, #16
   13de8:	af00      	add	r7, sp, #0
   13dea:	6078      	str	r0, [r7, #4]
   13dec:	460b      	mov	r3, r1
   13dee:	70fb      	strb	r3, [r7, #3]
   13df0:	4613      	mov	r3, r2
   13df2:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
   13df4:	78fb      	ldrb	r3, [r7, #3]
   13df6:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   13df8:	7bfb      	ldrb	r3, [r7, #15]
   13dfa:	4619      	mov	r1, r3
   13dfc:	6878      	ldr	r0, [r7, #4]
   13dfe:	4b0b      	ldr	r3, [pc, #44]	; (13e2c <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
   13e00:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
   13e02:	78bb      	ldrb	r3, [r7, #2]
   13e04:	2b00      	cmp	r3, #0
   13e06:	d00a      	beq.n	13e1e <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.IsSPIReady());     
   13e08:	687b      	ldr	r3, [r7, #4]
   13e0a:	4618      	mov	r0, r3
   13e0c:	4b08      	ldr	r3, [pc, #32]	; (13e30 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
   13e0e:	4798      	blx	r3
   13e10:	4603      	mov	r3, r0
   13e12:	f083 0301 	eor.w	r3, r3, #1
   13e16:	b2db      	uxtb	r3, r3
   13e18:	2b00      	cmp	r3, #0
   13e1a:	d000      	beq.n	13e1e <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
   13e1c:	e7f4      	b.n	13e08 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
   13e1e:	78fb      	ldrb	r3, [r7, #3]
   13e20:	73bb      	strb	r3, [r7, #14]
   13e22:	7bbb      	ldrb	r3, [r7, #14]
  
}
   13e24:	4618      	mov	r0, r3
   13e26:	3710      	adds	r7, #16
   13e28:	46bd      	mov	sp, r7
   13e2a:	bd80      	pop	{r7, pc}
   13e2c:	00013f15 	.word	0x00013f15
   13e30:	00015d9d 	.word	0x00015d9d

00013e34 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::InitReceiver1Labels(void)
{
   13e34:	b580      	push	{r7, lr}
   13e36:	b084      	sub	sp, #16
   13e38:	af00      	add	r7, sp, #0
   13e3a:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
   13e3c:	6878      	ldr	r0, [r7, #4]
   13e3e:	4b14      	ldr	r3, [pc, #80]	; (13e90 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x5c>)
   13e40:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
   13e42:	2201      	movs	r2, #1
   13e44:	2114      	movs	r1, #20
   13e46:	6878      	ldr	r0, [r7, #4]
   13e48:	4b12      	ldr	r3, [pc, #72]	; (13e94 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   13e4a:	4798      	blx	r3
   13e4c:	4603      	mov	r3, r0
   13e4e:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   13e50:	231f      	movs	r3, #31
   13e52:	73fb      	strb	r3, [r7, #15]
   13e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13e58:	2b00      	cmp	r3, #0
   13e5a:	db11      	blt.n	13e80 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   13e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13e60:	4a0d      	ldr	r2, [pc, #52]	; (13e98 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x64>)
   13e62:	5cd3      	ldrb	r3, [r2, r3]
   13e64:	2201      	movs	r2, #1
   13e66:	4619      	mov	r1, r3
   13e68:	6878      	ldr	r0, [r7, #4]
   13e6a:	4b0a      	ldr	r3, [pc, #40]	; (13e94 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   13e6c:	4798      	blx	r3
   13e6e:	4603      	mov	r3, r0
   13e70:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   13e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13e76:	b2db      	uxtb	r3, r3
   13e78:	3b01      	subs	r3, #1
   13e7a:	b2db      	uxtb	r3, r3
   13e7c:	73fb      	strb	r3, [r7, #15]
   13e7e:	e7e9      	b.n	13e54 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x20>
  }    
 	  
	close();
   13e80:	6878      	ldr	r0, [r7, #4]
   13e82:	4b06      	ldr	r3, [pc, #24]	; (13e9c <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x68>)
   13e84:	4798      	blx	r3
}
   13e86:	bf00      	nop
   13e88:	3710      	adds	r7, #16
   13e8a:	46bd      	mov	sp, r7
   13e8c:	bd80      	pop	{r7, pc}
   13e8e:	bf00      	nop
   13e90:	00013d95 	.word	0x00013d95
   13e94:	00013de5 	.word	0x00013de5
   13e98:	00022854 	.word	0x00022854
   13e9c:	00013dbd 	.word	0x00013dbd

00013ea0 <_ZN15Holt_3593_Class18InitPriorityLabelsEv>:
void Holt_3593_Class::InitPriorityLabels(void)
{
   13ea0:	b580      	push	{r7, lr}
   13ea2:	b082      	sub	sp, #8
   13ea4:	af00      	add	r7, sp, #0
   13ea6:	6078      	str	r0, [r7, #4]
	
	// Priorty Labels
	TXBuffer[0] =  LabelPriority1[0];   // filter 3
   13ea8:	4b17      	ldr	r3, [pc, #92]	; (13f08 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   13eaa:	781a      	ldrb	r2, [r3, #0]
   13eac:	687b      	ldr	r3, [r7, #4]
   13eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	TXBuffer[1] =  LabelPriority1[1];   // filter 2
   13eb2:	4b15      	ldr	r3, [pc, #84]	; (13f08 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   13eb4:	785a      	ldrb	r2, [r3, #1]
   13eb6:	687b      	ldr	r3, [r7, #4]
   13eb8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	TXBuffer[2] =  LabelPriority1[2];   // filter 1
   13ebc:	4b12      	ldr	r3, [pc, #72]	; (13f08 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   13ebe:	789a      	ldrb	r2, [r3, #2]
   13ec0:	687b      	ldr	r3, [r7, #4]
   13ec2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	TransmitCommandAndData(W_PL1Match,TXBuffer);  // initialize the Receiver1 PL match registers
   13ec6:	687b      	ldr	r3, [r7, #4]
   13ec8:	3321      	adds	r3, #33	; 0x21
   13eca:	461a      	mov	r2, r3
   13ecc:	2118      	movs	r1, #24
   13ece:	6878      	ldr	r0, [r7, #4]
   13ed0:	4b0e      	ldr	r3, [pc, #56]	; (13f0c <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x6c>)
   13ed2:	4798      	blx	r3
	
	TXBuffer[0] =  LabelPriority2[0];   // filter 3
   13ed4:	4b0e      	ldr	r3, [pc, #56]	; (13f10 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   13ed6:	781a      	ldrb	r2, [r3, #0]
   13ed8:	687b      	ldr	r3, [r7, #4]
   13eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
   13ede:	4b0c      	ldr	r3, [pc, #48]	; (13f10 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   13ee0:	785a      	ldrb	r2, [r3, #1]
   13ee2:	687b      	ldr	r3, [r7, #4]
   13ee4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
   13ee8:	4b09      	ldr	r3, [pc, #36]	; (13f10 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   13eea:	789a      	ldrb	r2, [r3, #2]
   13eec:	687b      	ldr	r3, [r7, #4]
   13eee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
   13ef2:	687b      	ldr	r3, [r7, #4]
   13ef4:	3321      	adds	r3, #33	; 0x21
   13ef6:	461a      	mov	r2, r3
   13ef8:	212c      	movs	r1, #44	; 0x2c
   13efa:	6878      	ldr	r0, [r7, #4]
   13efc:	4b03      	ldr	r3, [pc, #12]	; (13f0c <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x6c>)
   13efe:	4798      	blx	r3
}
   13f00:	bf00      	nop
   13f02:	3708      	adds	r7, #8
   13f04:	46bd      	mov	sp, r7
   13f06:	bd80      	pop	{r7, pc}
   13f08:	20000244 	.word	0x20000244
   13f0c:	000140f9 	.word	0x000140f9
   13f10:	20009030 	.word	0x20009030

00013f14 <_ZN15Holt_3593_Class9Send_ByteEh>:
	}
	return rev;
}

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   13f14:	b580      	push	{r7, lr}
   13f16:	b082      	sub	sp, #8
   13f18:	af00      	add	r7, sp, #0
   13f1a:	6078      	str	r0, [r7, #4]
   13f1c:	460b      	mov	r3, r1
   13f1e:	70fb      	strb	r3, [r7, #3]
	while (!spi.IsSPIReady()); 
   13f20:	687b      	ldr	r3, [r7, #4]
   13f22:	4618      	mov	r0, r3
   13f24:	4b0f      	ldr	r3, [pc, #60]	; (13f64 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   13f26:	4798      	blx	r3
   13f28:	4603      	mov	r3, r0
   13f2a:	f083 0301 	eor.w	r3, r3, #1
   13f2e:	b2db      	uxtb	r3, r3
   13f30:	2b00      	cmp	r3, #0
   13f32:	d000      	beq.n	13f36 <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
   13f34:	e7f4      	b.n	13f20 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.Write(&byte,1);
   13f36:	687b      	ldr	r3, [r7, #4]
   13f38:	1cf9      	adds	r1, r7, #3
   13f3a:	2201      	movs	r2, #1
   13f3c:	4618      	mov	r0, r3
   13f3e:	4b0a      	ldr	r3, [pc, #40]	; (13f68 <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
   13f40:	4798      	blx	r3
	while (!spi.IsSPIReady());  
   13f42:	687b      	ldr	r3, [r7, #4]
   13f44:	4618      	mov	r0, r3
   13f46:	4b07      	ldr	r3, [pc, #28]	; (13f64 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   13f48:	4798      	blx	r3
   13f4a:	4603      	mov	r3, r0
   13f4c:	f083 0301 	eor.w	r3, r3, #1
   13f50:	b2db      	uxtb	r3, r3
   13f52:	2b00      	cmp	r3, #0
   13f54:	d000      	beq.n	13f58 <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
   13f56:	e7f4      	b.n	13f42 <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
   13f58:	78fb      	ldrb	r3, [r7, #3]
}
   13f5a:	4618      	mov	r0, r3
   13f5c:	3708      	adds	r7, #8
   13f5e:	46bd      	mov	sp, r7
   13f60:	bd80      	pop	{r7, pc}
   13f62:	bf00      	nop
   13f64:	00015d9d 	.word	0x00015d9d
   13f68:	00015cf5 	.word	0x00015cf5

00013f6c <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   13f6c:	b580      	push	{r7, lr}
   13f6e:	b084      	sub	sp, #16
   13f70:	af00      	add	r7, sp, #0
   13f72:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.IsSPIReady());
   13f74:	687b      	ldr	r3, [r7, #4]
   13f76:	4618      	mov	r0, r3
   13f78:	4b0f      	ldr	r3, [pc, #60]	; (13fb8 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   13f7a:	4798      	blx	r3
   13f7c:	4603      	mov	r3, r0
   13f7e:	f083 0301 	eor.w	r3, r3, #1
   13f82:	b2db      	uxtb	r3, r3
   13f84:	2b00      	cmp	r3, #0
   13f86:	d000      	beq.n	13f8a <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
   13f88:	e7f4      	b.n	13f74 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.Read(&byte,1);
   13f8a:	687b      	ldr	r3, [r7, #4]
   13f8c:	f107 010f 	add.w	r1, r7, #15
   13f90:	2201      	movs	r2, #1
   13f92:	4618      	mov	r0, r3
   13f94:	4b09      	ldr	r3, [pc, #36]	; (13fbc <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
   13f96:	4798      	blx	r3
	while (!spi.IsSPIReady());
   13f98:	687b      	ldr	r3, [r7, #4]
   13f9a:	4618      	mov	r0, r3
   13f9c:	4b06      	ldr	r3, [pc, #24]	; (13fb8 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   13f9e:	4798      	blx	r3
   13fa0:	4603      	mov	r3, r0
   13fa2:	f083 0301 	eor.w	r3, r3, #1
   13fa6:	b2db      	uxtb	r3, r3
   13fa8:	2b00      	cmp	r3, #0
   13faa:	d000      	beq.n	13fae <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
   13fac:	e7f4      	b.n	13f98 <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
   13fae:	7bfb      	ldrb	r3, [r7, #15]
}	
   13fb0:	4618      	mov	r0, r3
   13fb2:	3710      	adds	r7, #16
   13fb4:	46bd      	mov	sp, r7
   13fb6:	bd80      	pop	{r7, pc}
   13fb8:	00015d9d 	.word	0x00015d9d
   13fbc:	00015d39 	.word	0x00015d39

00013fc0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   13fc0:	b580      	push	{r7, lr}
   13fc2:	b084      	sub	sp, #16
   13fc4:	af00      	add	r7, sp, #0
   13fc6:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   13fc8:	6878      	ldr	r0, [r7, #4]
   13fca:	4b14      	ldr	r3, [pc, #80]	; (1401c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
   13fcc:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   13fce:	2201      	movs	r2, #1
   13fd0:	2128      	movs	r1, #40	; 0x28
   13fd2:	6878      	ldr	r0, [r7, #4]
   13fd4:	4b12      	ldr	r3, [pc, #72]	; (14020 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   13fd6:	4798      	blx	r3
   13fd8:	4603      	mov	r3, r0
   13fda:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   13fdc:	231f      	movs	r3, #31
   13fde:	73fb      	strb	r3, [r7, #15]
   13fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13fe4:	2b00      	cmp	r3, #0
   13fe6:	db11      	blt.n	1400c <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   13fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13fec:	4a0d      	ldr	r2, [pc, #52]	; (14024 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
   13fee:	5cd3      	ldrb	r3, [r2, r3]
   13ff0:	2201      	movs	r2, #1
   13ff2:	4619      	mov	r1, r3
   13ff4:	6878      	ldr	r0, [r7, #4]
   13ff6:	4b0a      	ldr	r3, [pc, #40]	; (14020 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   13ff8:	4798      	blx	r3
   13ffa:	4603      	mov	r3, r0
   13ffc:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   13ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14002:	b2db      	uxtb	r3, r3
   14004:	3b01      	subs	r3, #1
   14006:	b2db      	uxtb	r3, r3
   14008:	73fb      	strb	r3, [r7, #15]
   1400a:	e7e9      	b.n	13fe0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
   1400c:	6878      	ldr	r0, [r7, #4]
   1400e:	4b06      	ldr	r3, [pc, #24]	; (14028 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
   14010:	4798      	blx	r3
}
   14012:	bf00      	nop
   14014:	3710      	adds	r7, #16
   14016:	46bd      	mov	sp, r7
   14018:	bd80      	pop	{r7, pc}
   1401a:	bf00      	nop
   1401c:	00013d95 	.word	0x00013d95
   14020:	00013de5 	.word	0x00013de5
   14024:	20009010 	.word	0x20009010
   14028:	00013dbd 	.word	0x00013dbd

0001402c <_ZN15Holt_3593_Class9ArincReadEhPh>:
// ------------------------------------------------------
// Fetch the FIFO ARINC data from the desired receiver channel 
//
// ------------------------------------------------------
void Holt_3593_Class::ArincRead(uint8_t source, unsigned char *passedArray)
{
   1402c:	b580      	push	{r7, lr}
   1402e:	b086      	sub	sp, #24
   14030:	af00      	add	r7, sp, #0
   14032:	60f8      	str	r0, [r7, #12]
   14034:	460b      	mov	r3, r1
   14036:	607a      	str	r2, [r7, #4]
   14038:	72fb      	strb	r3, [r7, #11]
   uint8_t dummy, ByteCount, count;
   
   count = 3;                // assume it's a Priority Label Word?
   1403a:	2303      	movs	r3, #3
   1403c:	75bb      	strb	r3, [r7, #22]
   if(source==0xA0 || source == 0xC0){  // is it a normal Word?
   1403e:	7afb      	ldrb	r3, [r7, #11]
   14040:	2ba0      	cmp	r3, #160	; 0xa0
   14042:	d002      	beq.n	1404a <_ZN15Holt_3593_Class9ArincReadEhPh+0x1e>
   14044:	7afb      	ldrb	r3, [r7, #11]
   14046:	2bc0      	cmp	r3, #192	; 0xc0
   14048:	d102      	bne.n	14050 <_ZN15Holt_3593_Class9ArincReadEhPh+0x24>
       count++;								 // then it has 4 bytes.
   1404a:	7dbb      	ldrb	r3, [r7, #22]
   1404c:	3301      	adds	r3, #1
   1404e:	75bb      	strb	r3, [r7, #22]
	   }                        
  open();
   14050:	68f8      	ldr	r0, [r7, #12]
   14052:	4b11      	ldr	r3, [pc, #68]	; (14098 <_ZN15Holt_3593_Class9ArincReadEhPh+0x6c>)
   14054:	4798      	blx	r3
  // dummy = Get_Byte();                   // clear SPI status register    
   Send_Byte(source) ;                  // source command to read FIFO data
   14056:	7afb      	ldrb	r3, [r7, #11]
   14058:	4619      	mov	r1, r3
   1405a:	68f8      	ldr	r0, [r7, #12]
   1405c:	4b0f      	ldr	r3, [pc, #60]	; (1409c <_ZN15Holt_3593_Class9ArincReadEhPh+0x70>)
   1405e:	4798      	blx	r3
   
 //  dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   14060:	2300      	movs	r3, #0
   14062:	75fb      	strb	r3, [r7, #23]
   14064:	7dfa      	ldrb	r2, [r7, #23]
   14066:	7dbb      	ldrb	r3, [r7, #22]
   14068:	429a      	cmp	r2, r3
   1406a:	da0d      	bge.n	14088 <_ZN15Holt_3593_Class9ArincReadEhPh+0x5c>
      dummy = Get_Byte(); 
   1406c:	68f8      	ldr	r0, [r7, #12]
   1406e:	4b0c      	ldr	r3, [pc, #48]	; (140a0 <_ZN15Holt_3593_Class9ArincReadEhPh+0x74>)
   14070:	4798      	blx	r3
   14072:	4603      	mov	r3, r0
   14074:	757b      	strb	r3, [r7, #21]
      passedArray[ByteCount] = dummy; 
   14076:	7dfb      	ldrb	r3, [r7, #23]
   14078:	687a      	ldr	r2, [r7, #4]
   1407a:	4413      	add	r3, r2
   1407c:	7d7a      	ldrb	r2, [r7, #21]
   1407e:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   14080:	7dfb      	ldrb	r3, [r7, #23]
   14082:	3301      	adds	r3, #1
   14084:	75fb      	strb	r3, [r7, #23]
   14086:	e7ed      	b.n	14064 <_ZN15Holt_3593_Class9ArincReadEhPh+0x38>
     }

  close();
   14088:	68f8      	ldr	r0, [r7, #12]
   1408a:	4b06      	ldr	r3, [pc, #24]	; (140a4 <_ZN15Holt_3593_Class9ArincReadEhPh+0x78>)
   1408c:	4798      	blx	r3
  
}
   1408e:	bf00      	nop
   14090:	3718      	adds	r7, #24
   14092:	46bd      	mov	sp, r7
   14094:	bd80      	pop	{r7, pc}
   14096:	bf00      	nop
   14098:	00013d95 	.word	0x00013d95
   1409c:	00013f15 	.word	0x00013f15
   140a0:	00013f6d 	.word	0x00013f6d
   140a4:	00013dbd 	.word	0x00013dbd

000140a8 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   140a8:	b580      	push	{r7, lr}
   140aa:	b084      	sub	sp, #16
   140ac:	af00      	add	r7, sp, #0
   140ae:	6078      	str	r0, [r7, #4]
   140b0:	460b      	mov	r3, r1
   140b2:	70fb      	strb	r3, [r7, #3]
   140b4:	4613      	mov	r3, r2
   140b6:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   140b8:	78fb      	ldrb	r3, [r7, #3]
   140ba:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   140bc:	7bfb      	ldrb	r3, [r7, #15]
   140be:	4619      	mov	r1, r3
   140c0:	6878      	ldr	r0, [r7, #4]
   140c2:	4b0b      	ldr	r3, [pc, #44]	; (140f0 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
   140c4:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   140c6:	78bb      	ldrb	r3, [r7, #2]
   140c8:	2b00      	cmp	r3, #0
   140ca:	d00a      	beq.n	140e2 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.IsSPIReady());      
   140cc:	687b      	ldr	r3, [r7, #4]
   140ce:	4618      	mov	r0, r3
   140d0:	4b08      	ldr	r3, [pc, #32]	; (140f4 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
   140d2:	4798      	blx	r3
   140d4:	4603      	mov	r3, r0
   140d6:	f083 0301 	eor.w	r3, r3, #1
   140da:	b2db      	uxtb	r3, r3
   140dc:	2b00      	cmp	r3, #0
   140de:	d000      	beq.n	140e2 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
   140e0:	e7f4      	b.n	140cc <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
   140e2:	78fb      	ldrb	r3, [r7, #3]
   140e4:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
   140e6:	7bbb      	ldrb	r3, [r7, #14]
  
 }
   140e8:	4618      	mov	r0, r3
   140ea:	3710      	adds	r7, #16
   140ec:	46bd      	mov	sp, r7
   140ee:	bd80      	pop	{r7, pc}
   140f0:	00013f15 	.word	0x00013f15
   140f4:	00015d9d 	.word	0x00015d9d

000140f8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
   140f8:	b580      	push	{r7, lr}
   140fa:	b084      	sub	sp, #16
   140fc:	af00      	add	r7, sp, #0
   140fe:	60f8      	str	r0, [r7, #12]
   14100:	460b      	mov	r3, r1
   14102:	607a      	str	r2, [r7, #4]
   14104:	72fb      	strb	r3, [r7, #11]
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
   14106:	68f8      	ldr	r0, [r7, #12]
   14108:	4b20      	ldr	r3, [pc, #128]	; (1418c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x94>)
   1410a:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   1410c:	4b20      	ldr	r3, [pc, #128]	; (14190 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   1410e:	2204      	movs	r2, #4
   14110:	701a      	strb	r2, [r3, #0]
   if(cmd==W_PL1Match || cmd==W_PL2Match){       // if writing PL Match registers send only 3 bytes
   14112:	7afb      	ldrb	r3, [r7, #11]
   14114:	2b18      	cmp	r3, #24
   14116:	d002      	beq.n	1411e <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x26>
   14118:	7afb      	ldrb	r3, [r7, #11]
   1411a:	2b2c      	cmp	r3, #44	; 0x2c
   1411c:	d105      	bne.n	1412a <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x32>
      transmitCount--;
   1411e:	4b1c      	ldr	r3, [pc, #112]	; (14190 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   14120:	781b      	ldrb	r3, [r3, #0]
   14122:	3b01      	subs	r3, #1
   14124:	b2da      	uxtb	r2, r3
   14126:	4b1a      	ldr	r3, [pc, #104]	; (14190 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   14128:	701a      	strb	r2, [r3, #0]
   }
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
   1412a:	7afb      	ldrb	r3, [r7, #11]
   1412c:	2201      	movs	r2, #1
   1412e:	4619      	mov	r1, r3
   14130:	68f8      	ldr	r0, [r7, #12]
   14132:	4b18      	ldr	r3, [pc, #96]	; (14194 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   14134:	4798      	blx	r3
   14136:	4603      	mov	r3, r0
   14138:	461a      	mov	r2, r3
   1413a:	4b17      	ldr	r3, [pc, #92]	; (14198 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   1413c:	701a      	strb	r2, [r3, #0]

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   1413e:	4b17      	ldr	r3, [pc, #92]	; (1419c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   14140:	2200      	movs	r2, #0
   14142:	701a      	strb	r2, [r3, #0]
   14144:	4b15      	ldr	r3, [pc, #84]	; (1419c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   14146:	781b      	ldrb	r3, [r3, #0]
   14148:	461a      	mov	r2, r3
   1414a:	4b11      	ldr	r3, [pc, #68]	; (14190 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   1414c:	781b      	ldrb	r3, [r3, #0]
   1414e:	429a      	cmp	r2, r3
   14150:	da15      	bge.n	1417e <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x86>
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   14152:	4b12      	ldr	r3, [pc, #72]	; (1419c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   14154:	781b      	ldrb	r3, [r3, #0]
   14156:	461a      	mov	r2, r3
   14158:	687b      	ldr	r3, [r7, #4]
   1415a:	4413      	add	r3, r2
   1415c:	781b      	ldrb	r3, [r3, #0]
   1415e:	2201      	movs	r2, #1
   14160:	4619      	mov	r1, r3
   14162:	68f8      	ldr	r0, [r7, #12]
   14164:	4b0b      	ldr	r3, [pc, #44]	; (14194 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   14166:	4798      	blx	r3
   14168:	4603      	mov	r3, r0
   1416a:	461a      	mov	r2, r3
   1416c:	4b0a      	ldr	r3, [pc, #40]	; (14198 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   1416e:	701a      	strb	r2, [r3, #0]
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   14170:	4b0a      	ldr	r3, [pc, #40]	; (1419c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   14172:	781b      	ldrb	r3, [r3, #0]
   14174:	3301      	adds	r3, #1
   14176:	b2da      	uxtb	r2, r3
   14178:	4b08      	ldr	r3, [pc, #32]	; (1419c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   1417a:	701a      	strb	r2, [r3, #0]
   1417c:	e7e2      	b.n	14144 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x4c>
      }   
 close();
   1417e:	68f8      	ldr	r0, [r7, #12]
   14180:	4b07      	ldr	r3, [pc, #28]	; (141a0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa8>)
   14182:	4798      	blx	r3
}
   14184:	bf00      	nop
   14186:	3710      	adds	r7, #16
   14188:	46bd      	mov	sp, r7
   1418a:	bd80      	pop	{r7, pc}
   1418c:	00013d95 	.word	0x00013d95
   14190:	20009035 	.word	0x20009035
   14194:	000140a9 	.word	0x000140a9
   14198:	20009034 	.word	0x20009034
   1419c:	20009033 	.word	0x20009033
   141a0:	00013dbd 	.word	0x00013dbd

000141a4 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   141a4:	b580      	push	{r7, lr}
   141a6:	b084      	sub	sp, #16
   141a8:	af00      	add	r7, sp, #0
   141aa:	6078      	str	r0, [r7, #4]
   141ac:	460b      	mov	r3, r1
   141ae:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
   141b0:	78fb      	ldrb	r3, [r7, #3]
   141b2:	73fb      	strb	r3, [r7, #15]
  open();
   141b4:	6878      	ldr	r0, [r7, #4]
   141b6:	4b0c      	ldr	r3, [pc, #48]	; (141e8 <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
   141b8:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   141ba:	7bfb      	ldrb	r3, [r7, #15]
   141bc:	4619      	mov	r1, r3
   141be:	6878      	ldr	r0, [r7, #4]
   141c0:	4b0a      	ldr	r3, [pc, #40]	; (141ec <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
   141c2:	4798      	blx	r3
  while (!spi.IsSPIReady()) {;}      // Wait for data to come back in.
   141c4:	687b      	ldr	r3, [r7, #4]
   141c6:	4618      	mov	r0, r3
   141c8:	4b09      	ldr	r3, [pc, #36]	; (141f0 <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
   141ca:	4798      	blx	r3
   141cc:	4603      	mov	r3, r0
   141ce:	f083 0301 	eor.w	r3, r3, #1
   141d2:	b2db      	uxtb	r3, r3
   141d4:	2b00      	cmp	r3, #0
   141d6:	d000      	beq.n	141da <_ZN15Holt_3593_Class9W_CommandEc+0x36>
   141d8:	e7f4      	b.n	141c4 <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   141da:	6878      	ldr	r0, [r7, #4]
   141dc:	4b05      	ldr	r3, [pc, #20]	; (141f4 <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
   141de:	4798      	blx	r3
}
   141e0:	bf00      	nop
   141e2:	3710      	adds	r7, #16
   141e4:	46bd      	mov	sp, r7
   141e6:	bd80      	pop	{r7, pc}
   141e8:	00013d95 	.word	0x00013d95
   141ec:	00013f15 	.word	0x00013f15
   141f0:	00015d9d 	.word	0x00015d9d
   141f4:	00013dbd 	.word	0x00013dbd

000141f8 <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   141f8:	b580      	push	{r7, lr}
   141fa:	b082      	sub	sp, #8
   141fc:	af00      	add	r7, sp, #0
   141fe:	6078      	str	r0, [r7, #4]
   14200:	460b      	mov	r3, r1
   14202:	70fb      	strb	r3, [r7, #3]
   14204:	4613      	mov	r3, r2
   14206:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
   14208:	6878      	ldr	r0, [r7, #4]
   1420a:	4b14      	ldr	r3, [pc, #80]	; (1425c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
   1420c:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   1420e:	78fb      	ldrb	r3, [r7, #3]
   14210:	4619      	mov	r1, r3
   14212:	6878      	ldr	r0, [r7, #4]
   14214:	4b12      	ldr	r3, [pc, #72]	; (14260 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   14216:	4798      	blx	r3
  while (!spi.IsSPIReady());    
   14218:	687b      	ldr	r3, [r7, #4]
   1421a:	4618      	mov	r0, r3
   1421c:	4b11      	ldr	r3, [pc, #68]	; (14264 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   1421e:	4798      	blx	r3
   14220:	4603      	mov	r3, r0
   14222:	f083 0301 	eor.w	r3, r3, #1
   14226:	b2db      	uxtb	r3, r3
   14228:	2b00      	cmp	r3, #0
   1422a:	d000      	beq.n	1422e <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
   1422c:	e7f4      	b.n	14218 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   1422e:	78bb      	ldrb	r3, [r7, #2]
   14230:	4619      	mov	r1, r3
   14232:	6878      	ldr	r0, [r7, #4]
   14234:	4b0a      	ldr	r3, [pc, #40]	; (14260 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   14236:	4798      	blx	r3
  while (!spi.IsSPIReady());    
   14238:	687b      	ldr	r3, [r7, #4]
   1423a:	4618      	mov	r0, r3
   1423c:	4b09      	ldr	r3, [pc, #36]	; (14264 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   1423e:	4798      	blx	r3
   14240:	4603      	mov	r3, r0
   14242:	f083 0301 	eor.w	r3, r3, #1
   14246:	b2db      	uxtb	r3, r3
   14248:	2b00      	cmp	r3, #0
   1424a:	d000      	beq.n	1424e <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
   1424c:	e7f4      	b.n	14238 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   1424e:	6878      	ldr	r0, [r7, #4]
   14250:	4b05      	ldr	r3, [pc, #20]	; (14268 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
   14252:	4798      	blx	r3
}
   14254:	bf00      	nop
   14256:	3708      	adds	r7, #8
   14258:	46bd      	mov	sp, r7
   1425a:	bd80      	pop	{r7, pc}
   1425c:	00013d95 	.word	0x00013d95
   14260:	00013f15 	.word	0x00013f15
   14264:	00015d9d 	.word	0x00015d9d
   14268:	00013dbd 	.word	0x00013dbd

0001426c <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   1426c:	b580      	push	{r7, lr}
   1426e:	b084      	sub	sp, #16
   14270:	af00      	add	r7, sp, #0
   14272:	6078      	str	r0, [r7, #4]
   14274:	460b      	mov	r3, r1
   14276:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
   14278:	6878      	ldr	r0, [r7, #4]
   1427a:	4b0a      	ldr	r3, [pc, #40]	; (142a4 <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
   1427c:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   1427e:	78fb      	ldrb	r3, [r7, #3]
   14280:	2201      	movs	r2, #1
   14282:	4619      	mov	r1, r3
   14284:	6878      	ldr	r0, [r7, #4]
   14286:	4b08      	ldr	r3, [pc, #32]	; (142a8 <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
   14288:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   1428a:	6878      	ldr	r0, [r7, #4]
   1428c:	4b07      	ldr	r3, [pc, #28]	; (142ac <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
   1428e:	4798      	blx	r3
   14290:	4603      	mov	r3, r0
   14292:	73fb      	strb	r3, [r7, #15]
         
  close();
   14294:	6878      	ldr	r0, [r7, #4]
   14296:	4b06      	ldr	r3, [pc, #24]	; (142b0 <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
   14298:	4798      	blx	r3
  return R_Reg;
   1429a:	7bfb      	ldrb	r3, [r7, #15]
}
   1429c:	4618      	mov	r0, r3
   1429e:	3710      	adds	r7, #16
   142a0:	46bd      	mov	sp, r7
   142a2:	bd80      	pop	{r7, pc}
   142a4:	00013d95 	.word	0x00013d95
   142a8:	000140a9 	.word	0x000140a9
   142ac:	00013f6d 	.word	0x00013f6d
   142b0:	00013dbd 	.word	0x00013dbd

000142b4 <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
   142b4:	b580      	push	{r7, lr}
   142b6:	b082      	sub	sp, #8
   142b8:	af00      	add	r7, sp, #0
   142ba:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
   142bc:	2100      	movs	r1, #0
   142be:	204e      	movs	r0, #78	; 0x4e
   142c0:	4b02      	ldr	r3, [pc, #8]	; (142cc <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
   142c2:	4798      	blx	r3
}
   142c4:	bf00      	nop
   142c6:	3708      	adds	r7, #8
   142c8:	46bd      	mov	sp, r7
   142ca:	bd80      	pop	{r7, pc}
   142cc:	00013bad 	.word	0x00013bad

000142d0 <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
   142d0:	b580      	push	{r7, lr}
   142d2:	b082      	sub	sp, #8
   142d4:	af00      	add	r7, sp, #0
   142d6:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
   142d8:	2101      	movs	r1, #1
   142da:	204e      	movs	r0, #78	; 0x4e
   142dc:	4b02      	ldr	r3, [pc, #8]	; (142e8 <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
   142de:	4798      	blx	r3
}
   142e0:	bf00      	nop
   142e2:	3708      	adds	r7, #8
   142e4:	46bd      	mov	sp, r7
   142e6:	bd80      	pop	{r7, pc}
   142e8:	00013bad 	.word	0x00013bad

000142ec <_ZN14Protocol_ClassD2Ev>:
#include "Protocol_Class.h"
#include "stdlib.h"
#include "math.h"

// virtual destructor
Protocol_Class::~Protocol_Class()
   142ec:	b480      	push	{r7}
   142ee:	b083      	sub	sp, #12
   142f0:	af00      	add	r7, sp, #0
   142f2:	6078      	str	r0, [r7, #4]
   142f4:	6039      	str	r1, [r7, #0]
   142f6:	683b      	ldr	r3, [r7, #0]
   142f8:	681a      	ldr	r2, [r3, #0]
   142fa:	687b      	ldr	r3, [r7, #4]
   142fc:	601a      	str	r2, [r3, #0]
   142fe:	687b      	ldr	r3, [r7, #4]
   14300:	681b      	ldr	r3, [r3, #0]
   14302:	3b0c      	subs	r3, #12
   14304:	681b      	ldr	r3, [r3, #0]
   14306:	461a      	mov	r2, r3
   14308:	687b      	ldr	r3, [r7, #4]
   1430a:	4413      	add	r3, r2
   1430c:	683a      	ldr	r2, [r7, #0]
   1430e:	6852      	ldr	r2, [r2, #4]
   14310:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
   14312:	687b      	ldr	r3, [r7, #4]
   14314:	4618      	mov	r0, r3
   14316:	370c      	adds	r7, #12
   14318:	46bd      	mov	sp, r7
   1431a:	bc80      	pop	{r7}
   1431c:	4770      	bx	lr

0001431e <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   1431e:	b590      	push	{r4, r7, lr}
   14320:	b085      	sub	sp, #20
   14322:	af00      	add	r7, sp, #0
   14324:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   14326:	687b      	ldr	r3, [r7, #4]
   14328:	681b      	ldr	r3, [r3, #0]
   1432a:	3308      	adds	r3, #8
   1432c:	681c      	ldr	r4, [r3, #0]
   1432e:	687b      	ldr	r3, [r7, #4]
   14330:	681b      	ldr	r3, [r3, #0]
   14332:	3b0c      	subs	r3, #12
   14334:	681b      	ldr	r3, [r3, #0]
   14336:	461a      	mov	r2, r3
   14338:	687b      	ldr	r3, [r7, #4]
   1433a:	4413      	add	r3, r2
   1433c:	681b      	ldr	r3, [r3, #0]
   1433e:	3304      	adds	r3, #4
   14340:	681b      	ldr	r3, [r3, #0]
   14342:	687a      	ldr	r2, [r7, #4]
   14344:	6812      	ldr	r2, [r2, #0]
   14346:	3a0c      	subs	r2, #12
   14348:	6812      	ldr	r2, [r2, #0]
   1434a:	4611      	mov	r1, r2
   1434c:	687a      	ldr	r2, [r7, #4]
   1434e:	440a      	add	r2, r1
   14350:	f44f 7187 	mov.w	r1, #270	; 0x10e
   14354:	4610      	mov	r0, r2
   14356:	4798      	blx	r3
   14358:	4603      	mov	r3, r0
   1435a:	4619      	mov	r1, r3
   1435c:	6878      	ldr	r0, [r7, #4]
   1435e:	47a0      	blx	r4
   14360:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
   14362:	68fb      	ldr	r3, [r7, #12]
   14364:	0c9b      	lsrs	r3, r3, #18
   14366:	b2db      	uxtb	r3, r3
   14368:	f003 0303 	and.w	r3, r3, #3
   1436c:	72fb      	strb	r3, [r7, #11]

	return key;
   1436e:	7afb      	ldrb	r3, [r7, #11]
}
   14370:	4618      	mov	r0, r3
   14372:	3714      	adds	r7, #20
   14374:	46bd      	mov	sp, r7
   14376:	bd90      	pop	{r4, r7, pc}

00014378 <_ZN14Protocol_Class12MakeLabel374Emf>:
	data=(0x1ffffc00&d)>>10;
	datagram.bit.dataField=data;

	return	data;
}
uint32_t Protocol_Class::MakeLabel374(uint32_t d,float v){
   14378:	b580      	push	{r7, lr}
   1437a:	b084      	sub	sp, #16
   1437c:	af00      	add	r7, sp, #0
   1437e:	60f8      	str	r0, [r7, #12]
   14380:	60b9      	str	r1, [r7, #8]
   14382:	607a      	str	r2, [r7, #4]
	value=d<<12;
   14384:	68bb      	ldr	r3, [r7, #8]
   14386:	031a      	lsls	r2, r3, #12
   14388:	68fb      	ldr	r3, [r7, #12]
   1438a:	60da      	str	r2, [r3, #12]
	label=Label2Byte(374);
   1438c:	68fb      	ldr	r3, [r7, #12]
   1438e:	681b      	ldr	r3, [r3, #0]
   14390:	3b0c      	subs	r3, #12
   14392:	681b      	ldr	r3, [r3, #0]
   14394:	461a      	mov	r2, r3
   14396:	68fb      	ldr	r3, [r7, #12]
   14398:	4413      	add	r3, r2
   1439a:	681b      	ldr	r3, [r3, #0]
   1439c:	3304      	adds	r3, #4
   1439e:	681b      	ldr	r3, [r3, #0]
   143a0:	68fa      	ldr	r2, [r7, #12]
   143a2:	6812      	ldr	r2, [r2, #0]
   143a4:	3a0c      	subs	r2, #12
   143a6:	6812      	ldr	r2, [r2, #0]
   143a8:	4611      	mov	r1, r2
   143aa:	68fa      	ldr	r2, [r7, #12]
   143ac:	440a      	add	r2, r1
   143ae:	f44f 71bb 	mov.w	r1, #374	; 0x176
   143b2:	4610      	mov	r0, r2
   143b4:	4798      	blx	r3
   143b6:	4603      	mov	r3, r0
   143b8:	461a      	mov	r2, r3
   143ba:	68fb      	ldr	r3, [r7, #12]
   143bc:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   143be:	68fb      	ldr	r3, [r7, #12]
   143c0:	68db      	ldr	r3, [r3, #12]
   143c2:	68fa      	ldr	r2, [r7, #12]
   143c4:	7c12      	ldrb	r2, [r2, #16]
   143c6:	431a      	orrs	r2, r3
   143c8:	68fb      	ldr	r3, [r7, #12]
   143ca:	60da      	str	r2, [r3, #12]
	if (v<0)
   143cc:	4b0e      	ldr	r3, [pc, #56]	; (14408 <_ZN14Protocol_Class12MakeLabel374Emf+0x90>)
   143ce:	f04f 0100 	mov.w	r1, #0
   143d2:	6878      	ldr	r0, [r7, #4]
   143d4:	4798      	blx	r3
   143d6:	4603      	mov	r3, r0
   143d8:	2b00      	cmp	r3, #0
   143da:	d005      	beq.n	143e8 <_ZN14Protocol_Class12MakeLabel374Emf+0x70>
	{
		value|=0x1<<28;
   143dc:	68fb      	ldr	r3, [r7, #12]
   143de:	68db      	ldr	r3, [r3, #12]
   143e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
   143e4:	68fb      	ldr	r3, [r7, #12]
   143e6:	60da      	str	r2, [r3, #12]
	}
	value=MakeEvenParity(value);
   143e8:	68fb      	ldr	r3, [r7, #12]
   143ea:	68db      	ldr	r3, [r3, #12]
   143ec:	4619      	mov	r1, r3
   143ee:	68f8      	ldr	r0, [r7, #12]
   143f0:	4b06      	ldr	r3, [pc, #24]	; (1440c <_ZN14Protocol_Class12MakeLabel374Emf+0x94>)
   143f2:	4798      	blx	r3
   143f4:	4602      	mov	r2, r0
   143f6:	68fb      	ldr	r3, [r7, #12]
   143f8:	60da      	str	r2, [r3, #12]
	return value;
   143fa:	68fb      	ldr	r3, [r7, #12]
   143fc:	68db      	ldr	r3, [r3, #12]
	
}
   143fe:	4618      	mov	r0, r3
   14400:	3710      	adds	r7, #16
   14402:	46bd      	mov	sp, r7
   14404:	bd80      	pop	{r7, pc}
   14406:	bf00      	nop
   14408:	0001ccf5 	.word	0x0001ccf5
   1440c:	00014515 	.word	0x00014515

00014410 <_ZN14Protocol_Class14MakeTXLabel275Eh>:
uint32_t Protocol_Class::MakeTXLabel275(uint8_t d){
   14410:	b580      	push	{r7, lr}
   14412:	b082      	sub	sp, #8
   14414:	af00      	add	r7, sp, #0
   14416:	6078      	str	r0, [r7, #4]
   14418:	460b      	mov	r3, r1
   1441a:	70fb      	strb	r3, [r7, #3]
	value=((uint32_t)d)<<10;
   1441c:	78fb      	ldrb	r3, [r7, #3]
   1441e:	029a      	lsls	r2, r3, #10
   14420:	687b      	ldr	r3, [r7, #4]
   14422:	60da      	str	r2, [r3, #12]
	label=Label2Byte(275);
   14424:	687b      	ldr	r3, [r7, #4]
   14426:	681b      	ldr	r3, [r3, #0]
   14428:	3b0c      	subs	r3, #12
   1442a:	681b      	ldr	r3, [r3, #0]
   1442c:	461a      	mov	r2, r3
   1442e:	687b      	ldr	r3, [r7, #4]
   14430:	4413      	add	r3, r2
   14432:	681b      	ldr	r3, [r3, #0]
   14434:	3304      	adds	r3, #4
   14436:	681b      	ldr	r3, [r3, #0]
   14438:	687a      	ldr	r2, [r7, #4]
   1443a:	6812      	ldr	r2, [r2, #0]
   1443c:	3a0c      	subs	r2, #12
   1443e:	6812      	ldr	r2, [r2, #0]
   14440:	4611      	mov	r1, r2
   14442:	687a      	ldr	r2, [r7, #4]
   14444:	440a      	add	r2, r1
   14446:	f240 1113 	movw	r1, #275	; 0x113
   1444a:	4610      	mov	r0, r2
   1444c:	4798      	blx	r3
   1444e:	4603      	mov	r3, r0
   14450:	461a      	mov	r2, r3
   14452:	687b      	ldr	r3, [r7, #4]
   14454:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   14456:	687b      	ldr	r3, [r7, #4]
   14458:	68db      	ldr	r3, [r3, #12]
   1445a:	687a      	ldr	r2, [r7, #4]
   1445c:	7c12      	ldrb	r2, [r2, #16]
   1445e:	431a      	orrs	r2, r3
   14460:	687b      	ldr	r3, [r7, #4]
   14462:	60da      	str	r2, [r3, #12]

	value=MakeEvenParity(value);
   14464:	687b      	ldr	r3, [r7, #4]
   14466:	68db      	ldr	r3, [r3, #12]
   14468:	4619      	mov	r1, r3
   1446a:	6878      	ldr	r0, [r7, #4]
   1446c:	4b05      	ldr	r3, [pc, #20]	; (14484 <_ZN14Protocol_Class14MakeTXLabel275Eh+0x74>)
   1446e:	4798      	blx	r3
   14470:	4602      	mov	r2, r0
   14472:	687b      	ldr	r3, [r7, #4]
   14474:	60da      	str	r2, [r3, #12]
	return value;
   14476:	687b      	ldr	r3, [r7, #4]
   14478:	68db      	ldr	r3, [r3, #12]
	
}
   1447a:	4618      	mov	r0, r3
   1447c:	3708      	adds	r7, #8
   1447e:	46bd      	mov	sp, r7
   14480:	bd80      	pop	{r7, pc}
   14482:	bf00      	nop
   14484:	00014515 	.word	0x00014515

00014488 <_ZN14Protocol_Class12MakeLabel270Em>:
uint32_t Protocol_Class::MakeLabel270(uint32_t d){
   14488:	b580      	push	{r7, lr}
   1448a:	b082      	sub	sp, #8
   1448c:	af00      	add	r7, sp, #0
   1448e:	6078      	str	r0, [r7, #4]
   14490:	6039      	str	r1, [r7, #0]
	
	value=d<<10;
   14492:	683b      	ldr	r3, [r7, #0]
   14494:	029a      	lsls	r2, r3, #10
   14496:	687b      	ldr	r3, [r7, #4]
   14498:	60da      	str	r2, [r3, #12]
	label=Label2Byte(270);
   1449a:	687b      	ldr	r3, [r7, #4]
   1449c:	681b      	ldr	r3, [r3, #0]
   1449e:	3b0c      	subs	r3, #12
   144a0:	681b      	ldr	r3, [r3, #0]
   144a2:	461a      	mov	r2, r3
   144a4:	687b      	ldr	r3, [r7, #4]
   144a6:	4413      	add	r3, r2
   144a8:	681b      	ldr	r3, [r3, #0]
   144aa:	3304      	adds	r3, #4
   144ac:	681b      	ldr	r3, [r3, #0]
   144ae:	687a      	ldr	r2, [r7, #4]
   144b0:	6812      	ldr	r2, [r2, #0]
   144b2:	3a0c      	subs	r2, #12
   144b4:	6812      	ldr	r2, [r2, #0]
   144b6:	4611      	mov	r1, r2
   144b8:	687a      	ldr	r2, [r7, #4]
   144ba:	440a      	add	r2, r1
   144bc:	f44f 7187 	mov.w	r1, #270	; 0x10e
   144c0:	4610      	mov	r0, r2
   144c2:	4798      	blx	r3
   144c4:	4603      	mov	r3, r0
   144c6:	461a      	mov	r2, r3
   144c8:	687b      	ldr	r3, [r7, #4]
   144ca:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   144cc:	687b      	ldr	r3, [r7, #4]
   144ce:	68db      	ldr	r3, [r3, #12]
   144d0:	687a      	ldr	r2, [r7, #4]
   144d2:	7c12      	ldrb	r2, [r2, #16]
   144d4:	431a      	orrs	r2, r3
   144d6:	687b      	ldr	r3, [r7, #4]
   144d8:	60da      	str	r2, [r3, #12]
	value|=(uint32_t)(((uint8_t)WavingValue()))<<19;
   144da:	6878      	ldr	r0, [r7, #4]
   144dc:	4b0b      	ldr	r3, [pc, #44]	; (1450c <_ZN14Protocol_Class12MakeLabel270Em+0x84>)
   144de:	4798      	blx	r3
   144e0:	4603      	mov	r3, r0
   144e2:	04db      	lsls	r3, r3, #19
   144e4:	687a      	ldr	r2, [r7, #4]
   144e6:	68d2      	ldr	r2, [r2, #12]
   144e8:	431a      	orrs	r2, r3
   144ea:	687b      	ldr	r3, [r7, #4]
   144ec:	60da      	str	r2, [r3, #12]
	value=MakeEvenParity(value);
   144ee:	687b      	ldr	r3, [r7, #4]
   144f0:	68db      	ldr	r3, [r3, #12]
   144f2:	4619      	mov	r1, r3
   144f4:	6878      	ldr	r0, [r7, #4]
   144f6:	4b06      	ldr	r3, [pc, #24]	; (14510 <_ZN14Protocol_Class12MakeLabel270Em+0x88>)
   144f8:	4798      	blx	r3
   144fa:	4602      	mov	r2, r0
   144fc:	687b      	ldr	r3, [r7, #4]
   144fe:	60da      	str	r2, [r3, #12]
	return value;
   14500:	687b      	ldr	r3, [r7, #4]
   14502:	68db      	ldr	r3, [r3, #12]
	
}
   14504:	4618      	mov	r0, r3
   14506:	3708      	adds	r7, #8
   14508:	46bd      	mov	sp, r7
   1450a:	bd80      	pop	{r7, pc}
   1450c:	00014551 	.word	0x00014551
   14510:	00014515 	.word	0x00014515

00014514 <_ZN14Protocol_Class14MakeEvenParityEm>:
uint32_t Protocol_Class::MakeEvenParity(uint32_t data){
   14514:	b580      	push	{r7, lr}
   14516:	b082      	sub	sp, #8
   14518:	af00      	add	r7, sp, #0
   1451a:	6078      	str	r0, [r7, #4]
   1451c:	6039      	str	r1, [r7, #0]
	if (FindParity(data))
   1451e:	687b      	ldr	r3, [r7, #4]
   14520:	681b      	ldr	r3, [r3, #0]
   14522:	3b0c      	subs	r3, #12
   14524:	681b      	ldr	r3, [r3, #0]
   14526:	461a      	mov	r2, r3
   14528:	687b      	ldr	r3, [r7, #4]
   1452a:	4413      	add	r3, r2
   1452c:	6839      	ldr	r1, [r7, #0]
   1452e:	4618      	mov	r0, r3
   14530:	4b06      	ldr	r3, [pc, #24]	; (1454c <_ZN14Protocol_Class14MakeEvenParityEm+0x38>)
   14532:	4798      	blx	r3
   14534:	4603      	mov	r3, r0
   14536:	2b00      	cmp	r3, #0
   14538:	d003      	beq.n	14542 <_ZN14Protocol_Class14MakeEvenParityEm+0x2e>
	{
		data|=0x01<<31;
   1453a:	683b      	ldr	r3, [r7, #0]
   1453c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14540:	603b      	str	r3, [r7, #0]
	} 
	else
	{
		
	}
	return data;
   14542:	683b      	ldr	r3, [r7, #0]
}
   14544:	4618      	mov	r0, r3
   14546:	3708      	adds	r7, #8
   14548:	46bd      	mov	sp, r7
   1454a:	bd80      	pop	{r7, pc}
   1454c:	00012fcd 	.word	0x00012fcd

00014550 <_ZN14Protocol_Class11WavingValueEv>:
uint8_t Protocol_Class::WavingValue(void){
   14550:	b590      	push	{r4, r7, lr}
   14552:	b083      	sub	sp, #12
   14554:	af00      	add	r7, sp, #0
   14556:	6078      	str	r0, [r7, #4]
	testByte=int(90*sin(counter*3.141516/(180*200)))+90;
   14558:	687b      	ldr	r3, [r7, #4]
   1455a:	695a      	ldr	r2, [r3, #20]
   1455c:	4b1e      	ldr	r3, [pc, #120]	; (145d8 <_ZN14Protocol_Class11WavingValueEv+0x88>)
   1455e:	4610      	mov	r0, r2
   14560:	4798      	blx	r3
   14562:	4c1e      	ldr	r4, [pc, #120]	; (145dc <_ZN14Protocol_Class11WavingValueEv+0x8c>)
   14564:	a318      	add	r3, pc, #96	; (adr r3, 145c8 <_ZN14Protocol_Class11WavingValueEv+0x78>)
   14566:	e9d3 2300 	ldrd	r2, r3, [r3]
   1456a:	47a0      	blx	r4
   1456c:	4603      	mov	r3, r0
   1456e:	460c      	mov	r4, r1
   14570:	4618      	mov	r0, r3
   14572:	4621      	mov	r1, r4
   14574:	4c1a      	ldr	r4, [pc, #104]	; (145e0 <_ZN14Protocol_Class11WavingValueEv+0x90>)
   14576:	a316      	add	r3, pc, #88	; (adr r3, 145d0 <_ZN14Protocol_Class11WavingValueEv+0x80>)
   14578:	e9d3 2300 	ldrd	r2, r3, [r3]
   1457c:	47a0      	blx	r4
   1457e:	4603      	mov	r3, r0
   14580:	460c      	mov	r4, r1
   14582:	4618      	mov	r0, r3
   14584:	4621      	mov	r1, r4
   14586:	4b17      	ldr	r3, [pc, #92]	; (145e4 <_ZN14Protocol_Class11WavingValueEv+0x94>)
   14588:	4798      	blx	r3
   1458a:	4c14      	ldr	r4, [pc, #80]	; (145dc <_ZN14Protocol_Class11WavingValueEv+0x8c>)
   1458c:	f04f 0200 	mov.w	r2, #0
   14590:	4b15      	ldr	r3, [pc, #84]	; (145e8 <_ZN14Protocol_Class11WavingValueEv+0x98>)
   14592:	47a0      	blx	r4
   14594:	4603      	mov	r3, r0
   14596:	460c      	mov	r4, r1
   14598:	4619      	mov	r1, r3
   1459a:	4622      	mov	r2, r4
   1459c:	4b13      	ldr	r3, [pc, #76]	; (145ec <_ZN14Protocol_Class11WavingValueEv+0x9c>)
   1459e:	4608      	mov	r0, r1
   145a0:	4611      	mov	r1, r2
   145a2:	4798      	blx	r3
   145a4:	4603      	mov	r3, r0
   145a6:	b2db      	uxtb	r3, r3
   145a8:	335a      	adds	r3, #90	; 0x5a
   145aa:	b2da      	uxtb	r2, r3
   145ac:	687b      	ldr	r3, [r7, #4]
   145ae:	761a      	strb	r2, [r3, #24]
	counter++;
   145b0:	687b      	ldr	r3, [r7, #4]
   145b2:	695b      	ldr	r3, [r3, #20]
   145b4:	1c5a      	adds	r2, r3, #1
   145b6:	687b      	ldr	r3, [r7, #4]
   145b8:	615a      	str	r2, [r3, #20]
	return testByte;
   145ba:	687b      	ldr	r3, [r7, #4]
   145bc:	7e1b      	ldrb	r3, [r3, #24]
   145be:	4618      	mov	r0, r3
   145c0:	370c      	adds	r7, #12
   145c2:	46bd      	mov	sp, r7
   145c4:	bd90      	pop	{r4, r7, pc}
   145c6:	bf00      	nop
   145c8:	23fee2ca 	.word	0x23fee2ca
   145cc:	400921d3 	.word	0x400921d3
   145d0:	00000000 	.word	0x00000000
   145d4:	40e19400 	.word	0x40e19400
   145d8:	0001c0e1 	.word	0x0001c0e1
   145dc:	0001c1ad 	.word	0x0001c1ad
   145e0:	0001c401 	.word	0x0001c401
   145e4:	00019bd9 	.word	0x00019bd9
   145e8:	40568000 	.word	0x40568000
   145ec:	0001c70d 	.word	0x0001c70d

000145f0 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   145f0:	b480      	push	{r7}
   145f2:	b083      	sub	sp, #12
   145f4:	af00      	add	r7, sp, #0
   145f6:	6078      	str	r0, [r7, #4]
    return (void *)0;
   145f8:	2300      	movs	r3, #0
	}
   145fa:	4618      	mov	r0, r3
   145fc:	370c      	adds	r7, #12
   145fe:	46bd      	mov	sp, r7
   14600:	bc80      	pop	{r7}
   14602:	4770      	bx	lr

00014604 <free>:
//............................................................................
extern "C" void free(void *)
	{
   14604:	b480      	push	{r7}
   14606:	b083      	sub	sp, #12
   14608:	af00      	add	r7, sp, #0
   1460a:	6078      	str	r0, [r7, #4]
	}
   1460c:	bf00      	nop
   1460e:	370c      	adds	r7, #12
   14610:	46bd      	mov	sp, r7
   14612:	bc80      	pop	{r7}
   14614:	4770      	bx	lr

00014616 <_sbrk>:

extern "C" void *_sbrk (ptrdiff_t)
	{
   14616:	b480      	push	{r7}
   14618:	b083      	sub	sp, #12
   1461a:	af00      	add	r7, sp, #0
   1461c:	6078      	str	r0, [r7, #4]
    return (void *)0;
   1461e:	2300      	movs	r3, #0
	}
   14620:	4618      	mov	r0, r3
   14622:	370c      	adds	r7, #12
   14624:	46bd      	mov	sp, r7
   14626:	bc80      	pop	{r7}
   14628:	4770      	bx	lr

0001462a <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   1462a:	b480      	push	{r7}
   1462c:	af00      	add	r7, sp, #0
		}
   1462e:	bf00      	nop
   14630:	46bd      	mov	sp, r7
   14632:	bc80      	pop	{r7}
   14634:	4770      	bx	lr
	...

00014638 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   14638:	b580      	push	{r7, lr}
   1463a:	b082      	sub	sp, #8
   1463c:	af00      	add	r7, sp, #0
   1463e:	6078      	str	r0, [r7, #4]
	free(p);
   14640:	6878      	ldr	r0, [r7, #4]
   14642:	4b03      	ldr	r3, [pc, #12]	; (14650 <_ZdlPv+0x18>)
   14644:	4798      	blx	r3
	}
   14646:	bf00      	nop
   14648:	3708      	adds	r7, #8
   1464a:	46bd      	mov	sp, r7
   1464c:	bd80      	pop	{r7, pc}
   1464e:	bf00      	nop
   14650:	00014605 	.word	0x00014605

00014654 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
   14654:	b480      	push	{r7}
   14656:	b083      	sub	sp, #12
   14658:	af00      	add	r7, sp, #0
   1465a:	6078      	str	r0, [r7, #4]
   1465c:	687b      	ldr	r3, [r7, #4]
   1465e:	4618      	mov	r0, r3
   14660:	370c      	adds	r7, #12
   14662:	46bd      	mov	sp, r7
   14664:	bc80      	pop	{r7}
   14666:	4770      	bx	lr

00014668 <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
   14668:	b480      	push	{r7}
   1466a:	b083      	sub	sp, #12
   1466c:	af00      	add	r7, sp, #0
   1466e:	6078      	str	r0, [r7, #4]
   14670:	687b      	ldr	r3, [r7, #4]
   14672:	4618      	mov	r0, r3
   14674:	370c      	adds	r7, #12
   14676:	46bd      	mov	sp, r7
   14678:	bc80      	pop	{r7}
   1467a:	4770      	bx	lr

0001467c <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
   1467c:	b580      	push	{r7, lr}
   1467e:	b084      	sub	sp, #16
   14680:	af00      	add	r7, sp, #0
   14682:	6078      	str	r0, [r7, #4]
   14684:	460b      	mov	r3, r1
   14686:	70fb      	strb	r3, [r7, #3]
   14688:	4613      	mov	r3, r2
   1468a:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
   1468c:	687b      	ldr	r3, [r7, #4]
   1468e:	78fa      	ldrb	r2, [r7, #3]
   14690:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
   14692:	78bb      	ldrb	r3, [r7, #2]
   14694:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
   14696:	7bfb      	ldrb	r3, [r7, #15]
   14698:	2b00      	cmp	r3, #0
   1469a:	f000 80ba 	beq.w	14812 <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
   1469e:	78fb      	ldrb	r3, [r7, #3]
   146a0:	2b14      	cmp	r3, #20
   146a2:	f200 80a2 	bhi.w	147ea <_ZN11Diagnostics12troubleshootEhb+0x16e>
   146a6:	a201      	add	r2, pc, #4	; (adr r2, 146ac <_ZN11Diagnostics12troubleshootEhb+0x30>)
   146a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   146ac:	00014701 	.word	0x00014701
   146b0:	00014715 	.word	0x00014715
   146b4:	0001471f 	.word	0x0001471f
   146b8:	00014729 	.word	0x00014729
   146bc:	00014733 	.word	0x00014733
   146c0:	00014745 	.word	0x00014745
   146c4:	0001474f 	.word	0x0001474f
   146c8:	00014761 	.word	0x00014761
   146cc:	00014773 	.word	0x00014773
   146d0:	00014787 	.word	0x00014787
   146d4:	00014791 	.word	0x00014791
   146d8:	0001470b 	.word	0x0001470b
   146dc:	0001477d 	.word	0x0001477d
   146e0:	0001479b 	.word	0x0001479b
   146e4:	000147a5 	.word	0x000147a5
   146e8:	000147af 	.word	0x000147af
   146ec:	000147b9 	.word	0x000147b9
   146f0:	000147c3 	.word	0x000147c3
   146f4:	000147cd 	.word	0x000147cd
   146f8:	000147d7 	.word	0x000147d7
   146fc:	000147e1 	.word	0x000147e1
      case SUCCESS:
      usb.println(F("Function executed successfully"));
   14700:	4946      	ldr	r1, [pc, #280]	; (1481c <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
   14702:	4847      	ldr	r0, [pc, #284]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14704:	4b47      	ldr	r3, [pc, #284]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14706:	4798      	blx	r3
      break;
   14708:	e074      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
   1470a:	4947      	ldr	r1, [pc, #284]	; (14828 <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
   1470c:	4844      	ldr	r0, [pc, #272]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1470e:	4b45      	ldr	r3, [pc, #276]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14710:	4798      	blx	r3
      break;
   14712:	e06f      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
   14714:	4945      	ldr	r1, [pc, #276]	; (1482c <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
   14716:	4842      	ldr	r0, [pc, #264]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14718:	4b42      	ldr	r3, [pc, #264]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1471a:	4798      	blx	r3
      break;
   1471c:	e06a      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
   1471e:	4944      	ldr	r1, [pc, #272]	; (14830 <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
   14720:	483f      	ldr	r0, [pc, #252]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14722:	4b40      	ldr	r3, [pc, #256]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14724:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
   14726:	e065      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
   14728:	4942      	ldr	r1, [pc, #264]	; (14834 <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
   1472a:	483d      	ldr	r0, [pc, #244]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1472c:	4b3d      	ldr	r3, [pc, #244]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1472e:	4798      	blx	r3
      break;
   14730:	e060      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
   14732:	4941      	ldr	r1, [pc, #260]	; (14838 <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
   14734:	483a      	ldr	r0, [pc, #232]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14736:	4b3b      	ldr	r3, [pc, #236]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14738:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
   1473a:	4940      	ldr	r1, [pc, #256]	; (1483c <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
   1473c:	4838      	ldr	r0, [pc, #224]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1473e:	4b39      	ldr	r3, [pc, #228]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14740:	4798      	blx	r3
      break;
   14742:	e057      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
   14744:	493e      	ldr	r1, [pc, #248]	; (14840 <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
   14746:	4836      	ldr	r0, [pc, #216]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14748:	4b36      	ldr	r3, [pc, #216]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1474a:	4798      	blx	r3
      break;
   1474c:	e052      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
   1474e:	493d      	ldr	r1, [pc, #244]	; (14844 <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
   14750:	4833      	ldr	r0, [pc, #204]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14752:	4b34      	ldr	r3, [pc, #208]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14754:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
   14756:	493c      	ldr	r1, [pc, #240]	; (14848 <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
   14758:	4831      	ldr	r0, [pc, #196]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1475a:	4b32      	ldr	r3, [pc, #200]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1475c:	4798      	blx	r3
      break;
   1475e:	e049      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
   14760:	493a      	ldr	r1, [pc, #232]	; (1484c <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
   14762:	482f      	ldr	r0, [pc, #188]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14764:	4b2f      	ldr	r3, [pc, #188]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14766:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
   14768:	4939      	ldr	r1, [pc, #228]	; (14850 <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
   1476a:	482d      	ldr	r0, [pc, #180]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1476c:	4b2d      	ldr	r3, [pc, #180]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1476e:	4798      	blx	r3
      break;
   14770:	e040      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
   14772:	4938      	ldr	r1, [pc, #224]	; (14854 <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
   14774:	482a      	ldr	r0, [pc, #168]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14776:	4b2b      	ldr	r3, [pc, #172]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14778:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
   1477a:	e03b      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
   1477c:	4936      	ldr	r1, [pc, #216]	; (14858 <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
   1477e:	4828      	ldr	r0, [pc, #160]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14780:	4b28      	ldr	r3, [pc, #160]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14782:	4798      	blx	r3
      break;
   14784:	e036      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
   14786:	4935      	ldr	r1, [pc, #212]	; (1485c <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
   14788:	4825      	ldr	r0, [pc, #148]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1478a:	4b26      	ldr	r3, [pc, #152]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1478c:	4798      	blx	r3
      break;
   1478e:	e031      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
   14790:	4933      	ldr	r1, [pc, #204]	; (14860 <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
   14792:	4823      	ldr	r0, [pc, #140]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14794:	4b23      	ldr	r3, [pc, #140]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14796:	4798      	blx	r3
      break;
   14798:	e02c      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
   1479a:	4932      	ldr	r1, [pc, #200]	; (14864 <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
   1479c:	4820      	ldr	r0, [pc, #128]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1479e:	4b21      	ldr	r3, [pc, #132]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147a0:	4798      	blx	r3
      break;
   147a2:	e027      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
   147a4:	4930      	ldr	r1, [pc, #192]	; (14868 <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
   147a6:	481e      	ldr	r0, [pc, #120]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147a8:	4b1e      	ldr	r3, [pc, #120]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147aa:	4798      	blx	r3
      break;
   147ac:	e022      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
   147ae:	492f      	ldr	r1, [pc, #188]	; (1486c <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
   147b0:	481b      	ldr	r0, [pc, #108]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147b2:	4b1c      	ldr	r3, [pc, #112]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147b4:	4798      	blx	r3
      break;
   147b6:	e01d      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
   147b8:	492d      	ldr	r1, [pc, #180]	; (14870 <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
   147ba:	4819      	ldr	r0, [pc, #100]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147bc:	4b19      	ldr	r3, [pc, #100]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147be:	4798      	blx	r3
      break;
   147c0:	e018      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
   147c2:	492c      	ldr	r1, [pc, #176]	; (14874 <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
   147c4:	4816      	ldr	r0, [pc, #88]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147c6:	4b17      	ldr	r3, [pc, #92]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147c8:	4798      	blx	r3
      break;
   147ca:	e013      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
   147cc:	492a      	ldr	r1, [pc, #168]	; (14878 <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
   147ce:	4814      	ldr	r0, [pc, #80]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147d0:	4b14      	ldr	r3, [pc, #80]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147d2:	4798      	blx	r3
      break;
   147d4:	e00e      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
   147d6:	4929      	ldr	r1, [pc, #164]	; (1487c <_ZN11Diagnostics12troubleshootEhb+0x200>)
   147d8:	4811      	ldr	r0, [pc, #68]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147da:	4b12      	ldr	r3, [pc, #72]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147dc:	4798      	blx	r3
      break;
   147de:	e009      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
   147e0:	4927      	ldr	r1, [pc, #156]	; (14880 <_ZN11Diagnostics12troubleshootEhb+0x204>)
   147e2:	480f      	ldr	r0, [pc, #60]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147e4:	4b0f      	ldr	r3, [pc, #60]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147e6:	4798      	blx	r3
      break;
   147e8:	e004      	b.n	147f4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
   147ea:	4926      	ldr	r1, [pc, #152]	; (14884 <_ZN11Diagnostics12troubleshootEhb+0x208>)
   147ec:	480c      	ldr	r0, [pc, #48]	; (14820 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   147ee:	4b0d      	ldr	r3, [pc, #52]	; (14824 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   147f0:	4798      	blx	r3
      break;
   147f2:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
   147f4:	78fb      	ldrb	r3, [r7, #3]
   147f6:	2b0a      	cmp	r3, #10
   147f8:	d008      	beq.n	1480c <_ZN11Diagnostics12troubleshootEhb+0x190>
   147fa:	78fb      	ldrb	r3, [r7, #3]
   147fc:	2b06      	cmp	r3, #6
   147fe:	d005      	beq.n	1480c <_ZN11Diagnostics12troubleshootEhb+0x190>
   14800:	78fb      	ldrb	r3, [r7, #3]
   14802:	2b02      	cmp	r3, #2
   14804:	d002      	beq.n	1480c <_ZN11Diagnostics12troubleshootEhb+0x190>
   14806:	78fb      	ldrb	r3, [r7, #3]
   14808:	2b0b      	cmp	r3, #11
   1480a:	d102      	bne.n	14812 <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
   1480c:	6878      	ldr	r0, [r7, #4]
   1480e:	4b1e      	ldr	r3, [pc, #120]	; (14888 <_ZN11Diagnostics12troubleshootEhb+0x20c>)
   14810:	4798      	blx	r3
    }
  #endif
  }
}
   14812:	bf00      	nop
   14814:	3710      	adds	r7, #16
   14816:	46bd      	mov	sp, r7
   14818:	bd80      	pop	{r7, pc}
   1481a:	bf00      	nop
   1481c:	00022874 	.word	0x00022874
   14820:	2000a140 	.word	0x2000a140
   14824:	0001813d 	.word	0x0001813d
   14828:	00022894 	.word	0x00022894
   1482c:	000228c8 	.word	0x000228c8
   14830:	00022908 	.word	0x00022908
   14834:	00022948 	.word	0x00022948
   14838:	000229e0 	.word	0x000229e0
   1483c:	000229f0 	.word	0x000229f0
   14840:	00022a20 	.word	0x00022a20
   14844:	00022a6c 	.word	0x00022a6c
   14848:	00022a90 	.word	0x00022a90
   1484c:	00022ad4 	.word	0x00022ad4
   14850:	00022af8 	.word	0x00022af8
   14854:	00022b34 	.word	0x00022b34
   14858:	00022b84 	.word	0x00022b84
   1485c:	00022bc4 	.word	0x00022bc4
   14860:	00022be8 	.word	0x00022be8
   14864:	00022c10 	.word	0x00022c10
   14868:	00022c34 	.word	0x00022c34
   1486c:	00022c5c 	.word	0x00022c5c
   14870:	00022c80 	.word	0x00022c80
   14874:	00022ca8 	.word	0x00022ca8
   14878:	00022cf4 	.word	0x00022cf4
   1487c:	00022d44 	.word	0x00022d44
   14880:	00022d94 	.word	0x00022d94
   14884:	00022dc8 	.word	0x00022dc8
   14888:	0001488d 	.word	0x0001488d

0001488c <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
   1488c:	b580      	push	{r7, lr}
   1488e:	b082      	sub	sp, #8
   14890:	af00      	add	r7, sp, #0
   14892:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
   14894:	4905      	ldr	r1, [pc, #20]	; (148ac <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
   14896:	4806      	ldr	r0, [pc, #24]	; (148b0 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   14898:	4b06      	ldr	r3, [pc, #24]	; (148b4 <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
   1489a:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
   1489c:	4906      	ldr	r1, [pc, #24]	; (148b8 <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
   1489e:	4804      	ldr	r0, [pc, #16]	; (148b0 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   148a0:	4b06      	ldr	r3, [pc, #24]	; (148bc <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
   148a2:	4798      	blx	r3
}
   148a4:	bf00      	nop
   148a6:	3708      	adds	r7, #8
   148a8:	46bd      	mov	sp, r7
   148aa:	bd80      	pop	{r7, pc}
   148ac:	00022dec 	.word	0x00022dec
   148b0:	2000a140 	.word	0x2000a140
   148b4:	00018091 	.word	0x00018091
   148b8:	00022e20 	.word	0x00022e20
   148bc:	0001813d 	.word	0x0001813d

000148c0 <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
   148c0:	b580      	push	{r7, lr}
   148c2:	b082      	sub	sp, #8
   148c4:	af00      	add	r7, sp, #0
   148c6:	6078      	str	r0, [r7, #4]
   148c8:	6039      	str	r1, [r7, #0]
   148ca:	687b      	ldr	r3, [r7, #4]
   148cc:	2b01      	cmp	r3, #1
   148ce:	d10c      	bne.n	148ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
   148d0:	683b      	ldr	r3, [r7, #0]
   148d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   148d6:	4293      	cmp	r3, r2
   148d8:	d107      	bne.n	148ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
   148da:	4806      	ldr	r0, [pc, #24]	; (148f4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   148dc:	4b06      	ldr	r3, [pc, #24]	; (148f8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   148de:	4798      	blx	r3
   148e0:	4a06      	ldr	r2, [pc, #24]	; (148fc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   148e2:	4907      	ldr	r1, [pc, #28]	; (14900 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   148e4:	4803      	ldr	r0, [pc, #12]	; (148f4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   148e6:	4b07      	ldr	r3, [pc, #28]	; (14904 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   148e8:	4798      	blx	r3
   148ea:	bf00      	nop
   148ec:	3708      	adds	r7, #8
   148ee:	46bd      	mov	sp, r7
   148f0:	bd80      	pop	{r7, pc}
   148f2:	bf00      	nop
   148f4:	20009038 	.word	0x20009038
   148f8:	00014655 	.word	0x00014655
   148fc:	20000000 	.word	0x20000000
   14900:	00014669 	.word	0x00014669
   14904:	00019ab1 	.word	0x00019ab1

00014908 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
   14908:	b580      	push	{r7, lr}
   1490a:	af00      	add	r7, sp, #0
   1490c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14910:	2001      	movs	r0, #1
   14912:	4b01      	ldr	r3, [pc, #4]	; (14918 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
   14914:	4798      	blx	r3
   14916:	bd80      	pop	{r7, pc}
   14918:	000148c1 	.word	0x000148c1

0001491c <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   1491c:	b480      	push	{r7}
   1491e:	b083      	sub	sp, #12
   14920:	af00      	add	r7, sp, #0
   14922:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   14924:	4b04      	ldr	r3, [pc, #16]	; (14938 <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   14926:	681b      	ldr	r3, [r3, #0]
   14928:	2201      	movs	r2, #1
   1492a:	741a      	strb	r2, [r3, #16]
}
   1492c:	bf00      	nop
   1492e:	370c      	adds	r7, #12
   14930:	46bd      	mov	sp, r7
   14932:	bc80      	pop	{r7}
   14934:	4770      	bx	lr
   14936:	bf00      	nop
   14938:	20009840 	.word	0x20009840

0001493c <_ZL15EventTimerTicksPK10timer_task>:

static void EventTimerTicks(const struct timer_task *const timer_task)
{
   1493c:	b480      	push	{r7}
   1493e:	b083      	sub	sp, #12
   14940:	af00      	add	r7, sp, #0
   14942:	6078      	str	r0, [r7, #4]
	eventTimer.ticks++;
   14944:	4b04      	ldr	r3, [pc, #16]	; (14958 <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   14946:	689b      	ldr	r3, [r3, #8]
   14948:	3301      	adds	r3, #1
   1494a:	4a03      	ldr	r2, [pc, #12]	; (14958 <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   1494c:	6093      	str	r3, [r2, #8]
}
   1494e:	bf00      	nop
   14950:	370c      	adds	r7, #12
   14952:	46bd      	mov	sp, r7
   14954:	bc80      	pop	{r7}
   14956:	4770      	bx	lr
   14958:	2000a0cc 	.word	0x2000a0cc

0001495c <_ZN18EventHandler_ClassC1Ev>:

// default constructor
EventHandler_Class::EventHandler_Class()
   1495c:	b580      	push	{r7, lr}
   1495e:	b082      	sub	sp, #8
   14960:	af00      	add	r7, sp, #0
   14962:	6078      	str	r0, [r7, #4]
   14964:	687b      	ldr	r3, [r7, #4]
   14966:	4618      	mov	r0, r3
   14968:	4b06      	ldr	r3, [pc, #24]	; (14984 <_ZN18EventHandler_ClassC1Ev+0x28>)
   1496a:	4798      	blx	r3
{
	ptrEventHandlerClass=this;
   1496c:	4a06      	ldr	r2, [pc, #24]	; (14988 <_ZN18EventHandler_ClassC1Ev+0x2c>)
   1496e:	687b      	ldr	r3, [r7, #4]
   14970:	6013      	str	r3, [r2, #0]
	eventQueue = eventStorage;
   14972:	687b      	ldr	r3, [r7, #4]
   14974:	4a05      	ldr	r2, [pc, #20]	; (1498c <_ZN18EventHandler_ClassC1Ev+0x30>)
   14976:	631a      	str	r2, [r3, #48]	; 0x30
} //EventHandler_Class
   14978:	687b      	ldr	r3, [r7, #4]
   1497a:	4618      	mov	r0, r3
   1497c:	3708      	adds	r7, #8
   1497e:	46bd      	mov	sp, r7
   14980:	bd80      	pop	{r7, pc}
   14982:	bf00      	nop
   14984:	000003c5 	.word	0x000003c5
   14988:	20009840 	.word	0x20009840
   1498c:	2000903c 	.word	0x2000903c

00014990 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   14990:	b480      	push	{r7}
   14992:	b083      	sub	sp, #12
   14994:	af00      	add	r7, sp, #0
   14996:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   14998:	4a04      	ldr	r2, [pc, #16]	; (149ac <_ZN18EventHandler_ClassD1Ev+0x1c>)
   1499a:	687b      	ldr	r3, [r7, #4]
   1499c:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   1499e:	687b      	ldr	r3, [r7, #4]
   149a0:	4618      	mov	r0, r3
   149a2:	370c      	adds	r7, #12
   149a4:	46bd      	mov	sp, r7
   149a6:	bc80      	pop	{r7}
   149a8:	4770      	bx	lr
   149aa:	bf00      	nop
   149ac:	20009840 	.word	0x20009840

000149b0 <_ZN18EventHandler_Class4InitEv>:



bool EventHandler_Class::Init(void)
{
   149b0:	b580      	push	{r7, lr}
   149b2:	b084      	sub	sp, #16
   149b4:	af00      	add	r7, sp, #0
   149b6:	6078      	str	r0, [r7, #4]
	int16	i;
	eventTimeout=false;
   149b8:	687b      	ldr	r3, [r7, #4]
   149ba:	2200      	movs	r2, #0
   149bc:	741a      	strb	r2, [r3, #16]
	eventsInUse=0;
   149be:	687b      	ldr	r3, [r7, #4]
   149c0:	2200      	movs	r2, #0
   149c2:	61da      	str	r2, [r3, #28]
	eventsInUsePeak=0;
   149c4:	687b      	ldr	r3, [r7, #4]
   149c6:	2200      	movs	r2, #0
   149c8:	621a      	str	r2, [r3, #32]
	eventCollisions=0;
   149ca:	687b      	ldr	r3, [r7, #4]
   149cc:	2200      	movs	r2, #0
   149ce:	625a      	str	r2, [r3, #36]	; 0x24
	eventEvalCollisions=0;
   149d0:	687b      	ldr	r3, [r7, #4]
   149d2:	2200      	movs	r2, #0
   149d4:	629a      	str	r2, [r3, #40]	; 0x28
	eventQueueUnderflow=0;
   149d6:	687b      	ldr	r3, [r7, #4]
   149d8:	2200      	movs	r2, #0
   149da:	62da      	str	r2, [r3, #44]	; 0x2c

	usb << "initializeEvents\r";

	#endif

	for (i=1; i<sizeOfEventQueue; i++)
   149dc:	2301      	movs	r3, #1
   149de:	81fb      	strh	r3, [r7, #14]
   149e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   149e4:	2b7f      	cmp	r3, #127	; 0x7f
   149e6:	dc1b      	bgt.n	14a20 <_ZN18EventHandler_Class4InitEv+0x70>
	{
		eventStorage[i].next = (event*)NULL;
   149e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   149ec:	4a15      	ldr	r2, [pc, #84]	; (14a44 <_ZN18EventHandler_Class4InitEv+0x94>)
   149ee:	011b      	lsls	r3, r3, #4
   149f0:	4413      	add	r3, r2
   149f2:	330c      	adds	r3, #12
   149f4:	2200      	movs	r2, #0
   149f6:	601a      	str	r2, [r3, #0]
		eventStorage[i-1].next = &eventStorage[i];
   149f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   149fc:	3b01      	subs	r3, #1
   149fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
   14a02:	0112      	lsls	r2, r2, #4
   14a04:	490f      	ldr	r1, [pc, #60]	; (14a44 <_ZN18EventHandler_Class4InitEv+0x94>)
   14a06:	440a      	add	r2, r1
   14a08:	490e      	ldr	r1, [pc, #56]	; (14a44 <_ZN18EventHandler_Class4InitEv+0x94>)
   14a0a:	011b      	lsls	r3, r3, #4
   14a0c:	440b      	add	r3, r1
   14a0e:	330c      	adds	r3, #12
   14a10:	601a      	str	r2, [r3, #0]
	for (i=1; i<sizeOfEventQueue; i++)
   14a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14a16:	b29b      	uxth	r3, r3
   14a18:	3301      	adds	r3, #1
   14a1a:	b29b      	uxth	r3, r3
   14a1c:	81fb      	strh	r3, [r7, #14]
   14a1e:	e7df      	b.n	149e0 <_ZN18EventHandler_Class4InitEv+0x30>
	}
	isOK=eventTimer.Init();
   14a20:	4809      	ldr	r0, [pc, #36]	; (14a48 <_ZN18EventHandler_Class4InitEv+0x98>)
   14a22:	4b0a      	ldr	r3, [pc, #40]	; (14a4c <_ZN18EventHandler_Class4InitEv+0x9c>)
   14a24:	4798      	blx	r3
   14a26:	4603      	mov	r3, r0
   14a28:	461a      	mov	r2, r3
   14a2a:	687b      	ldr	r3, [r7, #4]
   14a2c:	761a      	strb	r2, [r3, #24]
	eventTimer.Start_periodic_task(FUNC_PTR(EventTimerTicks),1);
   14a2e:	2201      	movs	r2, #1
   14a30:	4907      	ldr	r1, [pc, #28]	; (14a50 <_ZN18EventHandler_Class4InitEv+0xa0>)
   14a32:	4805      	ldr	r0, [pc, #20]	; (14a48 <_ZN18EventHandler_Class4InitEv+0x98>)
   14a34:	4b07      	ldr	r3, [pc, #28]	; (14a54 <_ZN18EventHandler_Class4InitEv+0xa4>)
   14a36:	4798      	blx	r3
	{
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
	return (bool)&eventStorage[0];
   14a38:	2301      	movs	r3, #1
}
   14a3a:	4618      	mov	r0, r3
   14a3c:	3710      	adds	r7, #16
   14a3e:	46bd      	mov	sp, r7
   14a40:	bd80      	pop	{r7, pc}
   14a42:	bf00      	nop
   14a44:	2000903c 	.word	0x2000903c
   14a48:	2000a0cc 	.word	0x2000a0cc
   14a4c:	000176a5 	.word	0x000176a5
   14a50:	0001493d 	.word	0x0001493d
   14a54:	00017769 	.word	0x00017769

00014a58 <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   14a58:	b590      	push	{r4, r7, lr}
   14a5a:	b087      	sub	sp, #28
   14a5c:	af02      	add	r7, sp, #8
   14a5e:	60f8      	str	r0, [r7, #12]
   14a60:	60b9      	str	r1, [r7, #8]
   14a62:	4611      	mov	r1, r2
   14a64:	461a      	mov	r2, r3
   14a66:	460b      	mov	r3, r1
   14a68:	80fb      	strh	r3, [r7, #6]
   14a6a:	4613      	mov	r3, r2
   14a6c:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   14a6e:	88b9      	ldrh	r1, [r7, #4]
   14a70:	88fa      	ldrh	r2, [r7, #6]
   14a72:	6a3b      	ldr	r3, [r7, #32]
   14a74:	9300      	str	r3, [sp, #0]
   14a76:	460b      	mov	r3, r1
   14a78:	68b9      	ldr	r1, [r7, #8]
   14a7a:	68f8      	ldr	r0, [r7, #12]
   14a7c:	4c03      	ldr	r4, [pc, #12]	; (14a8c <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   14a7e:	47a0      	blx	r4
   14a80:	4603      	mov	r3, r0
}
   14a82:	4618      	mov	r0, r3
   14a84:	3714      	adds	r7, #20
   14a86:	46bd      	mov	sp, r7
   14a88:	bd90      	pop	{r4, r7, pc}
   14a8a:	bf00      	nop
   14a8c:	00014a91 	.word	0x00014a91

00014a90 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   14a90:	b590      	push	{r4, r7, lr}
   14a92:	b089      	sub	sp, #36	; 0x24
   14a94:	af00      	add	r7, sp, #0
   14a96:	60f8      	str	r0, [r7, #12]
   14a98:	60b9      	str	r1, [r7, #8]
   14a9a:	4611      	mov	r1, r2
   14a9c:	461a      	mov	r2, r3
   14a9e:	460b      	mov	r3, r1
   14aa0:	80fb      	strh	r3, [r7, #6]
   14aa2:	4613      	mov	r3, r2
   14aa4:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   14aa6:	2300      	movs	r3, #0
   14aa8:	77fb      	strb	r3, [r7, #31]
	event*	queue;
	event*	queuePrev(NULL);
   14aaa:	2300      	movs	r3, #0
   14aac:	617b      	str	r3, [r7, #20]
	eventTimeout=false;
   14aae:	68fb      	ldr	r3, [r7, #12]
   14ab0:	2200      	movs	r2, #0
   14ab2:	741a      	strb	r2, [r3, #16]

	
	e.eventClass = eventClass;
   14ab4:	68bb      	ldr	r3, [r7, #8]
   14ab6:	88fa      	ldrh	r2, [r7, #6]
   14ab8:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   14aba:	68bb      	ldr	r3, [r7, #8]
   14abc:	88ba      	ldrh	r2, [r7, #4]
   14abe:	805a      	strh	r2, [r3, #2]

	
	if (timeout != forever){
   14ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14ac2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   14ac6:	4293      	cmp	r3, r2
   14ac8:	d006      	beq.n	14ad8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x48>
		eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,(uint32_t)timeout);
   14aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14acc:	461a      	mov	r2, r3
   14ace:	493a      	ldr	r1, [pc, #232]	; (14bb8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14ad0:	483a      	ldr	r0, [pc, #232]	; (14bbc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14ad2:	4b3b      	ldr	r3, [pc, #236]	; (14bc0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   14ad4:	4798      	blx	r3
   14ad6:	e004      	b.n	14ae2 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>

	}else{
		
			eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   14ad8:	2232      	movs	r2, #50	; 0x32
   14ada:	4937      	ldr	r1, [pc, #220]	; (14bb8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14adc:	4837      	ldr	r0, [pc, #220]	; (14bbc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14ade:	4b38      	ldr	r3, [pc, #224]	; (14bc0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   14ae0:	4798      	blx	r3
	}

	while (!result && (!eventTimeout))
   14ae2:	7ffb      	ldrb	r3, [r7, #31]
   14ae4:	f083 0301 	eor.w	r3, r3, #1
   14ae8:	b2db      	uxtb	r3, r3
   14aea:	2b00      	cmp	r3, #0
   14aec:	d009      	beq.n	14b02 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   14aee:	68fb      	ldr	r3, [r7, #12]
   14af0:	7c1b      	ldrb	r3, [r3, #16]
   14af2:	b2db      	uxtb	r3, r3
   14af4:	f083 0301 	eor.w	r3, r3, #1
   14af8:	b2db      	uxtb	r3, r3
   14afa:	2b00      	cmp	r3, #0
   14afc:	d001      	beq.n	14b02 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   14afe:	2301      	movs	r3, #1
   14b00:	e000      	b.n	14b04 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x74>
   14b02:	2300      	movs	r3, #0
   14b04:	2b00      	cmp	r3, #0
   14b06:	d04d      	beq.n	14ba4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x114>
	{
		if (eventHandler)
   14b08:	68fb      	ldr	r3, [r7, #12]
   14b0a:	695b      	ldr	r3, [r3, #20]
   14b0c:	2b00      	cmp	r3, #0
   14b0e:	d002      	beq.n	14b16 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x86>
		{
			eventHandler();
   14b10:	68fb      	ldr	r3, [r7, #12]
   14b12:	695b      	ldr	r3, [r3, #20]
   14b14:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   14b16:	4b2b      	ldr	r3, [pc, #172]	; (14bc4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   14b18:	681b      	ldr	r3, [r3, #0]
   14b1a:	61bb      	str	r3, [r7, #24]

		while (queue)
   14b1c:	69bb      	ldr	r3, [r7, #24]
   14b1e:	2b00      	cmp	r3, #0
   14b20:	d0df      	beq.n	14ae2 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
		
			#endif
			if (((e.eventClass == kAnyEventClass) ||(queue->eventClass == e.eventClass))
   14b22:	68bb      	ldr	r3, [r7, #8]
   14b24:	881b      	ldrh	r3, [r3, #0]
   14b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14b2a:	4293      	cmp	r3, r2
   14b2c:	d005      	beq.n	14b3a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xaa>
   14b2e:	69bb      	ldr	r3, [r7, #24]
   14b30:	881a      	ldrh	r2, [r3, #0]
   14b32:	68bb      	ldr	r3, [r7, #8]
   14b34:	881b      	ldrh	r3, [r3, #0]
   14b36:	429a      	cmp	r2, r3
   14b38:	d12e      	bne.n	14b98 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			&& ((e.eventType == kAnyEventType) ||	(queue->eventType == e.eventType)))
   14b3a:	68bb      	ldr	r3, [r7, #8]
   14b3c:	885b      	ldrh	r3, [r3, #2]
   14b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14b42:	4293      	cmp	r3, r2
   14b44:	d005      	beq.n	14b52 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xc2>
   14b46:	69bb      	ldr	r3, [r7, #24]
   14b48:	885a      	ldrh	r2, [r3, #2]
   14b4a:	68bb      	ldr	r3, [r7, #8]
   14b4c:	885b      	ldrh	r3, [r3, #2]
   14b4e:	429a      	cmp	r2, r3
   14b50:	d122      	bne.n	14b98 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			{
				if (queuePrev)
   14b52:	697b      	ldr	r3, [r7, #20]
   14b54:	2b00      	cmp	r3, #0
   14b56:	d004      	beq.n	14b62 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xd2>
				{
					queuePrev->next = queue->next;
   14b58:	69bb      	ldr	r3, [r7, #24]
   14b5a:	68da      	ldr	r2, [r3, #12]
   14b5c:	697b      	ldr	r3, [r7, #20]
   14b5e:	60da      	str	r2, [r3, #12]
   14b60:	e003      	b.n	14b6a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xda>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   14b62:	69bb      	ldr	r3, [r7, #24]
   14b64:	68db      	ldr	r3, [r3, #12]
   14b66:	4a17      	ldr	r2, [pc, #92]	; (14bc4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   14b68:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   14b6a:	68ba      	ldr	r2, [r7, #8]
   14b6c:	69bb      	ldr	r3, [r7, #24]
   14b6e:	4614      	mov	r4, r2
   14b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   14b76:	68fb      	ldr	r3, [r7, #12]
   14b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   14b7a:	69bb      	ldr	r3, [r7, #24]
   14b7c:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   14b7e:	68fb      	ldr	r3, [r7, #12]
   14b80:	69ba      	ldr	r2, [r7, #24]
   14b82:	631a      	str	r2, [r3, #48]	; 0x30
				
				eventsInUse--;
   14b84:	68fb      	ldr	r3, [r7, #12]
   14b86:	69db      	ldr	r3, [r3, #28]
   14b88:	1e5a      	subs	r2, r3, #1
   14b8a:	68fb      	ldr	r3, [r7, #12]
   14b8c:	61da      	str	r2, [r3, #28]

				queue = NULL;
   14b8e:	2300      	movs	r3, #0
   14b90:	61bb      	str	r3, [r7, #24]
				result = true;
   14b92:	2301      	movs	r3, #1
   14b94:	77fb      	strb	r3, [r7, #31]
   14b96:	e004      	b.n	14ba2 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x112>
			}
			else
			{
				queuePrev = queue;
   14b98:	69bb      	ldr	r3, [r7, #24]
   14b9a:	617b      	str	r3, [r7, #20]
				queue = queue->next;
   14b9c:	69bb      	ldr	r3, [r7, #24]
   14b9e:	68db      	ldr	r3, [r3, #12]
   14ba0:	61bb      	str	r3, [r7, #24]
		while (queue)
   14ba2:	e7bb      	b.n	14b1c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x8c>
			//while (!eventTimeout);
		
		}
		
	}
	eventTimer.Remove_task(FUNC_PTR(EventTimerTask));
   14ba4:	4904      	ldr	r1, [pc, #16]	; (14bb8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14ba6:	4805      	ldr	r0, [pc, #20]	; (14bbc <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14ba8:	4b07      	ldr	r3, [pc, #28]	; (14bc8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x138>)
   14baa:	4798      	blx	r3
	//eventTimer.stop();
	return result;
   14bac:	7ffb      	ldrb	r3, [r7, #31]
}
   14bae:	4618      	mov	r0, r3
   14bb0:	3724      	adds	r7, #36	; 0x24
   14bb2:	46bd      	mov	sp, r7
   14bb4:	bd90      	pop	{r4, r7, pc}
   14bb6:	bf00      	nop
   14bb8:	0001491d 	.word	0x0001491d
   14bbc:	2000a0cc 	.word	0x2000a0cc
   14bc0:	0001784d 	.word	0x0001784d
   14bc4:	2000983c 	.word	0x2000983c
   14bc8:	000177dd 	.word	0x000177dd

00014bcc <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass>:

bool	EventHandler_Class::IsEventListed(EventType eventType, EventClass eventClass)
{
   14bcc:	b480      	push	{r7}
   14bce:	b087      	sub	sp, #28
   14bd0:	af00      	add	r7, sp, #0
   14bd2:	6078      	str	r0, [r7, #4]
   14bd4:	460b      	mov	r3, r1
   14bd6:	807b      	strh	r3, [r7, #2]
   14bd8:	4613      	mov	r3, r2
   14bda:	803b      	strh	r3, [r7, #0]
	bool	result(false);
   14bdc:	2300      	movs	r3, #0
   14bde:	75fb      	strb	r3, [r7, #23]
	event*	queue;
	event*	queuePrev(NULL);
   14be0:	2300      	movs	r3, #0
   14be2:	60fb      	str	r3, [r7, #12]

	if ((eventsInUse==0))
   14be4:	687b      	ldr	r3, [r7, #4]
   14be6:	69db      	ldr	r3, [r3, #28]
   14be8:	2b00      	cmp	r3, #0
   14bea:	d102      	bne.n	14bf2 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x26>
	{
		result = false;
   14bec:	2300      	movs	r3, #0
   14bee:	75fb      	strb	r3, [r7, #23]
   14bf0:	e027      	b.n	14c42 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
	}
	else
	{
		queue = (event*)mainThreadEventQueue;
   14bf2:	4b17      	ldr	r3, [pc, #92]	; (14c50 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x84>)
   14bf4:	681b      	ldr	r3, [r3, #0]
   14bf6:	613b      	str	r3, [r7, #16]
		while (queue)
   14bf8:	693b      	ldr	r3, [r7, #16]
   14bfa:	2b00      	cmp	r3, #0
   14bfc:	d021      	beq.n	14c42 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
			
			#endif
			if (((eventClass == kAnyEventClass)|(queue->eventClass == eventClass)) && (queue->eventType == eventType))
   14bfe:	883b      	ldrh	r3, [r7, #0]
   14c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14c04:	4293      	cmp	r3, r2
   14c06:	bf0c      	ite	eq
   14c08:	2301      	moveq	r3, #1
   14c0a:	2300      	movne	r3, #0
   14c0c:	b2da      	uxtb	r2, r3
   14c0e:	693b      	ldr	r3, [r7, #16]
   14c10:	881b      	ldrh	r3, [r3, #0]
   14c12:	8839      	ldrh	r1, [r7, #0]
   14c14:	4299      	cmp	r1, r3
   14c16:	bf0c      	ite	eq
   14c18:	2301      	moveq	r3, #1
   14c1a:	2300      	movne	r3, #0
   14c1c:	b2db      	uxtb	r3, r3
   14c1e:	4313      	orrs	r3, r2
   14c20:	b2db      	uxtb	r3, r3
   14c22:	2b00      	cmp	r3, #0
   14c24:	d007      	beq.n	14c36 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
   14c26:	693b      	ldr	r3, [r7, #16]
   14c28:	885b      	ldrh	r3, [r3, #2]
   14c2a:	887a      	ldrh	r2, [r7, #2]
   14c2c:	429a      	cmp	r2, r3
   14c2e:	d102      	bne.n	14c36 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
			{

				result = true;
   14c30:	2301      	movs	r3, #1
   14c32:	75fb      	strb	r3, [r7, #23]
				break;
   14c34:	e005      	b.n	14c42 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			}
			else
			{
				queuePrev = queue;
   14c36:	693b      	ldr	r3, [r7, #16]
   14c38:	60fb      	str	r3, [r7, #12]
				queue = queue->next;
   14c3a:	693b      	ldr	r3, [r7, #16]
   14c3c:	68db      	ldr	r3, [r3, #12]
   14c3e:	613b      	str	r3, [r7, #16]
		while (queue)
   14c40:	e7da      	b.n	14bf8 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x2c>
		
	}

	
	//eventTimer.stop();
	return result;
   14c42:	7dfb      	ldrb	r3, [r7, #23]
}
   14c44:	4618      	mov	r0, r3
   14c46:	371c      	adds	r7, #28
   14c48:	46bd      	mov	sp, r7
   14c4a:	bc80      	pop	{r7}
   14c4c:	4770      	bx	lr
   14c4e:	bf00      	nop
   14c50:	2000983c 	.word	0x2000983c

00014c54 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
}



void EventHandler_Class::SendEventSelf(const event& e)
{
   14c54:	b580      	push	{r7, lr}
   14c56:	b084      	sub	sp, #16
   14c58:	af00      	add	r7, sp, #0
   14c5a:	6078      	str	r0, [r7, #4]
   14c5c:	6039      	str	r1, [r7, #0]
	if (IsEventListed(e.eventType,e.eventClass))
   14c5e:	683b      	ldr	r3, [r7, #0]
   14c60:	8859      	ldrh	r1, [r3, #2]
   14c62:	683b      	ldr	r3, [r7, #0]
   14c64:	881b      	ldrh	r3, [r3, #0]
   14c66:	461a      	mov	r2, r3
   14c68:	6878      	ldr	r0, [r7, #4]
   14c6a:	4b25      	ldr	r3, [pc, #148]	; (14d00 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xac>)
   14c6c:	4798      	blx	r3
   14c6e:	4603      	mov	r3, r0
   14c70:	2b00      	cmp	r3, #0
   14c72:	d140      	bne.n	14cf6 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
	{
		
	} 
	else
	{
		event*	theEvent(eventQueue);
   14c74:	687b      	ldr	r3, [r7, #4]
   14c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14c78:	60bb      	str	r3, [r7, #8]
		
		if (theEvent)
   14c7a:	68bb      	ldr	r3, [r7, #8]
   14c7c:	2b00      	cmp	r3, #0
   14c7e:	d035      	beq.n	14cec <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>
		{
			eventQueue = eventQueue->next;
   14c80:	687b      	ldr	r3, [r7, #4]
   14c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14c84:	68da      	ldr	r2, [r3, #12]
   14c86:	687b      	ldr	r3, [r7, #4]
   14c88:	631a      	str	r2, [r3, #48]	; 0x30
			theEvent->next = NULL;
   14c8a:	68bb      	ldr	r3, [r7, #8]
   14c8c:	2200      	movs	r2, #0
   14c8e:	60da      	str	r2, [r3, #12]
			eventsInUse++;
   14c90:	687b      	ldr	r3, [r7, #4]
   14c92:	69db      	ldr	r3, [r3, #28]
   14c94:	1c5a      	adds	r2, r3, #1
   14c96:	687b      	ldr	r3, [r7, #4]
   14c98:	61da      	str	r2, [r3, #28]

			event*	threadQueue((event*)mainThreadEventQueue);
   14c9a:	4b1a      	ldr	r3, [pc, #104]	; (14d04 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   14c9c:	681b      	ldr	r3, [r3, #0]
   14c9e:	60fb      	str	r3, [r7, #12]
			if (threadQueue == NULL)
   14ca0:	68fb      	ldr	r3, [r7, #12]
   14ca2:	2b00      	cmp	r3, #0
   14ca4:	d103      	bne.n	14cae <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
			mainThreadEventQueue = theEvent;
   14ca6:	4a17      	ldr	r2, [pc, #92]	; (14d04 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   14ca8:	68bb      	ldr	r3, [r7, #8]
   14caa:	6013      	str	r3, [r2, #0]
   14cac:	e00a      	b.n	14cc4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x70>
			else
			{
				while (threadQueue->next)
   14cae:	68fb      	ldr	r3, [r7, #12]
   14cb0:	68db      	ldr	r3, [r3, #12]
   14cb2:	2b00      	cmp	r3, #0
   14cb4:	d003      	beq.n	14cbe <_ZN18EventHandler_Class13SendEventSelfERK5event+0x6a>
				threadQueue = threadQueue->next;
   14cb6:	68fb      	ldr	r3, [r7, #12]
   14cb8:	68db      	ldr	r3, [r3, #12]
   14cba:	60fb      	str	r3, [r7, #12]
				while (threadQueue->next)
   14cbc:	e7f7      	b.n	14cae <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
				threadQueue->next = theEvent;
   14cbe:	68fb      	ldr	r3, [r7, #12]
   14cc0:	68ba      	ldr	r2, [r7, #8]
   14cc2:	60da      	str	r2, [r3, #12]
				usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
				
			}
			#endif

			(*theEvent).eventClass = e.eventClass;
   14cc4:	683b      	ldr	r3, [r7, #0]
   14cc6:	881a      	ldrh	r2, [r3, #0]
   14cc8:	68bb      	ldr	r3, [r7, #8]
   14cca:	801a      	strh	r2, [r3, #0]
			(*theEvent).eventType = e.eventType;
   14ccc:	683b      	ldr	r3, [r7, #0]
   14cce:	885a      	ldrh	r2, [r3, #2]
   14cd0:	68bb      	ldr	r3, [r7, #8]
   14cd2:	805a      	strh	r2, [r3, #2]
			(*theEvent).data = e.data;
   14cd4:	68bb      	ldr	r3, [r7, #8]
   14cd6:	683a      	ldr	r2, [r7, #0]
   14cd8:	6892      	ldr	r2, [r2, #8]
   14cda:	609a      	str	r2, [r3, #8]
			(*theEvent).timestamp = eventTimer.Get_ticks();
   14cdc:	480a      	ldr	r0, [pc, #40]	; (14d08 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb4>)
   14cde:	4b0b      	ldr	r3, [pc, #44]	; (14d0c <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb8>)
   14ce0:	4798      	blx	r3
   14ce2:	4603      	mov	r3, r0
   14ce4:	461a      	mov	r2, r3
   14ce6:	68bb      	ldr	r3, [r7, #8]
   14ce8:	605a      	str	r2, [r3, #4]
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	
}
   14cea:	e004      	b.n	14cf6 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
			eventQueueUnderflow++;
   14cec:	687b      	ldr	r3, [r7, #4]
   14cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14cf0:	1c5a      	adds	r2, r3, #1
   14cf2:	687b      	ldr	r3, [r7, #4]
   14cf4:	62da      	str	r2, [r3, #44]	; 0x2c
}
   14cf6:	bf00      	nop
   14cf8:	3710      	adds	r7, #16
   14cfa:	46bd      	mov	sp, r7
   14cfc:	bd80      	pop	{r7, pc}
   14cfe:	bf00      	nop
   14d00:	00014bcd 	.word	0x00014bcd
   14d04:	2000983c 	.word	0x2000983c
   14d08:	2000a0cc 	.word	0x2000a0cc
   14d0c:	00017835 	.word	0x00017835

00014d10 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendEventSelf(EventClass eventClass, EventType eventType, const eventData& data)
{
   14d10:	b580      	push	{r7, lr}
   14d12:	b088      	sub	sp, #32
   14d14:	af00      	add	r7, sp, #0
   14d16:	60f8      	str	r0, [r7, #12]
   14d18:	607b      	str	r3, [r7, #4]
   14d1a:	460b      	mov	r3, r1
   14d1c:	817b      	strh	r3, [r7, #10]
   14d1e:	4613      	mov	r3, r2
   14d20:	813b      	strh	r3, [r7, #8]
	event		theEvent;
   14d22:	f107 0310 	add.w	r3, r7, #16
   14d26:	4618      	mov	r0, r3
   14d28:	4b09      	ldr	r3, [pc, #36]	; (14d50 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData+0x40>)
   14d2a:	4798      	blx	r3

	theEvent.eventClass = eventClass;
   14d2c:	897b      	ldrh	r3, [r7, #10]
   14d2e:	823b      	strh	r3, [r7, #16]
	theEvent.eventType = eventType;
   14d30:	893b      	ldrh	r3, [r7, #8]
   14d32:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   14d34:	687b      	ldr	r3, [r7, #4]
   14d36:	681b      	ldr	r3, [r3, #0]
   14d38:	61bb      	str	r3, [r7, #24]
	
	SendEventSelf(theEvent);
   14d3a:	f107 0310 	add.w	r3, r7, #16
   14d3e:	4619      	mov	r1, r3
   14d40:	68f8      	ldr	r0, [r7, #12]
   14d42:	4b04      	ldr	r3, [pc, #16]	; (14d54 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData+0x44>)
   14d44:	4798      	blx	r3
}
   14d46:	bf00      	nop
   14d48:	3720      	adds	r7, #32
   14d4a:	46bd      	mov	sp, r7
   14d4c:	bd80      	pop	{r7, pc}
   14d4e:	bf00      	nop
   14d50:	000003c5 	.word	0x000003c5
   14d54:	00014c55 	.word	0x00014c55

00014d58 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
   14d58:	b580      	push	{r7, lr}
   14d5a:	b088      	sub	sp, #32
   14d5c:	af00      	add	r7, sp, #0
   14d5e:	60f8      	str	r0, [r7, #12]
   14d60:	460b      	mov	r3, r1
   14d62:	607a      	str	r2, [r7, #4]
   14d64:	817b      	strh	r3, [r7, #10]
	event		theEvent;
   14d66:	f107 0310 	add.w	r3, r7, #16
   14d6a:	4618      	mov	r0, r3
   14d6c:	4b09      	ldr	r3, [pc, #36]	; (14d94 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
   14d6e:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
   14d70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14d74:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(EventType)et ;
   14d76:	897b      	ldrh	r3, [r7, #10]
   14d78:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   14d7a:	687b      	ldr	r3, [r7, #4]
   14d7c:	681b      	ldr	r3, [r3, #0]
   14d7e:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
   14d80:	f107 0310 	add.w	r3, r7, #16
   14d84:	4619      	mov	r1, r3
   14d86:	68f8      	ldr	r0, [r7, #12]
   14d88:	4b03      	ldr	r3, [pc, #12]	; (14d98 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
   14d8a:	4798      	blx	r3
}
   14d8c:	bf00      	nop
   14d8e:	3720      	adds	r7, #32
   14d90:	46bd      	mov	sp, r7
   14d92:	bd80      	pop	{r7, pc}
   14d94:	000003c5 	.word	0x000003c5
   14d98:	00014c55 	.word	0x00014c55

00014d9c <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
   14d9c:	b580      	push	{r7, lr}
   14d9e:	b08a      	sub	sp, #40	; 0x28
   14da0:	af00      	add	r7, sp, #0
   14da2:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   14da4:	f04f 0300 	mov.w	r3, #0
   14da8:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   14daa:	f04f 0300 	mov.w	r3, #0
   14dae:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   14db0:	f04f 0300 	mov.w	r3, #0
   14db4:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   14db6:	f107 030c 	add.w	r3, r7, #12
   14dba:	4618      	mov	r0, r3
   14dbc:	4b03      	ldr	r3, [pc, #12]	; (14dcc <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   14dbe:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   14dc0:	687b      	ldr	r3, [r7, #4]
   14dc2:	69db      	ldr	r3, [r3, #28]
	
}
   14dc4:	4618      	mov	r0, r3
   14dc6:	3728      	adds	r7, #40	; 0x28
   14dc8:	46bd      	mov	sp, r7
   14dca:	bd80      	pop	{r7, pc}
   14dcc:	000003c5 	.word	0x000003c5

00014dd0 <_Z41__static_initialization_and_destruction_0ii>:

	EventHandler_Class	listener;
   14dd0:	b5b0      	push	{r4, r5, r7, lr}
   14dd2:	b082      	sub	sp, #8
   14dd4:	af00      	add	r7, sp, #0
   14dd6:	6078      	str	r0, [r7, #4]
   14dd8:	6039      	str	r1, [r7, #0]
   14dda:	687b      	ldr	r3, [r7, #4]
   14ddc:	2b01      	cmp	r3, #1
   14dde:	d117      	bne.n	14e10 <_Z41__static_initialization_and_destruction_0ii+0x40>
   14de0:	683b      	ldr	r3, [r7, #0]
   14de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14de6:	4293      	cmp	r3, r2
   14de8:	d112      	bne.n	14e10 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   14dea:	4b0b      	ldr	r3, [pc, #44]	; (14e18 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   14dec:	247f      	movs	r4, #127	; 0x7f
   14dee:	461d      	mov	r5, r3
   14df0:	2c00      	cmp	r4, #0
   14df2:	db05      	blt.n	14e00 <_Z41__static_initialization_and_destruction_0ii+0x30>
   14df4:	4628      	mov	r0, r5
   14df6:	4b09      	ldr	r3, [pc, #36]	; (14e1c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   14df8:	4798      	blx	r3
   14dfa:	3510      	adds	r5, #16
   14dfc:	3c01      	subs	r4, #1
   14dfe:	e7f7      	b.n	14df0 <_Z41__static_initialization_and_destruction_0ii+0x20>
	EventHandler_Class	listener;
   14e00:	4807      	ldr	r0, [pc, #28]	; (14e20 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   14e02:	4b08      	ldr	r3, [pc, #32]	; (14e24 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   14e04:	4798      	blx	r3
   14e06:	4a08      	ldr	r2, [pc, #32]	; (14e28 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   14e08:	4908      	ldr	r1, [pc, #32]	; (14e2c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   14e0a:	4805      	ldr	r0, [pc, #20]	; (14e20 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   14e0c:	4b08      	ldr	r3, [pc, #32]	; (14e30 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   14e0e:	4798      	blx	r3
   14e10:	bf00      	nop
   14e12:	3708      	adds	r7, #8
   14e14:	46bd      	mov	sp, r7
   14e16:	bdb0      	pop	{r4, r5, r7, pc}
   14e18:	2000903c 	.word	0x2000903c
   14e1c:	000003c5 	.word	0x000003c5
   14e20:	20009850 	.word	0x20009850
   14e24:	0001495d 	.word	0x0001495d
   14e28:	20000000 	.word	0x20000000
   14e2c:	00014991 	.word	0x00014991
   14e30:	00019ab1 	.word	0x00019ab1

00014e34 <_GLOBAL__sub_I_maxEventCount>:
   14e34:	b580      	push	{r7, lr}
   14e36:	af00      	add	r7, sp, #0
   14e38:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14e3c:	2001      	movs	r0, #1
   14e3e:	4b01      	ldr	r3, [pc, #4]	; (14e44 <_GLOBAL__sub_I_maxEventCount+0x10>)
   14e40:	4798      	blx	r3
   14e42:	bd80      	pop	{r7, pc}
   14e44:	00014dd1 	.word	0x00014dd1

00014e48 <_ZL16Fv1StatusChangedv>:
#include "ARINC_Interface.h"
FlapperValve_Class	*ptrFlapperValveClass;
//I2C_Asyn_Class		i2cFVs(&I2C_EXPANDER);
static MCP23017_Class staticExpander(&I2C_EXPANDER);

static void	Fv1StatusChanged(void){
   14e48:	b480      	push	{r7}
   14e4a:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv1StatusChanged=true;
   14e4c:	4b03      	ldr	r3, [pc, #12]	; (14e5c <_ZL16Fv1StatusChangedv+0x14>)
   14e4e:	681b      	ldr	r3, [r3, #0]
   14e50:	2201      	movs	r2, #1
   14e52:	77da      	strb	r2, [r3, #31]

}
   14e54:	bf00      	nop
   14e56:	46bd      	mov	sp, r7
   14e58:	bc80      	pop	{r7}
   14e5a:	4770      	bx	lr
   14e5c:	20009884 	.word	0x20009884

00014e60 <_ZL16Fv2StatusChangedv>:
static void	Fv2StatusChanged(void){
   14e60:	b480      	push	{r7}
   14e62:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv2StatusChanged=true;
   14e64:	4b04      	ldr	r3, [pc, #16]	; (14e78 <_ZL16Fv2StatusChangedv+0x18>)
   14e66:	681b      	ldr	r3, [r3, #0]
   14e68:	2201      	movs	r2, #1
   14e6a:	f883 2020 	strb.w	r2, [r3, #32]

}
   14e6e:	bf00      	nop
   14e70:	46bd      	mov	sp, r7
   14e72:	bc80      	pop	{r7}
   14e74:	4770      	bx	lr
   14e76:	bf00      	nop
   14e78:	20009884 	.word	0x20009884

00014e7c <_ZL16RegulatorTimeoutPK10timer_task>:

static bool	I2CFlapperValvesInit(void){
	 bool ok= i2cFVs.Init();
	 //ptrFlapperValveClass->isOK=ok;
}
static void	RegulatorTimeout(const struct timer_task *const timer_task){
   14e7c:	b480      	push	{r7}
   14e7e:	b083      	sub	sp, #12
   14e80:	af00      	add	r7, sp, #0
   14e82:	6078      	str	r0, [r7, #4]
	ptrFlapperValveClass->regulatorTimeout=true;
   14e84:	4b05      	ldr	r3, [pc, #20]	; (14e9c <_ZL16RegulatorTimeoutPK10timer_task+0x20>)
   14e86:	681b      	ldr	r3, [r3, #0]
   14e88:	2201      	movs	r2, #1
   14e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	asm("nop");
   14e8e:	bf00      	nop
}
   14e90:	bf00      	nop
   14e92:	370c      	adds	r7, #12
   14e94:	46bd      	mov	sp, r7
   14e96:	bc80      	pop	{r7}
   14e98:	4770      	bx	lr
   14e9a:	bf00      	nop
   14e9c:	20009884 	.word	0x20009884

00014ea0 <_ZN18FlapperValve_ClassC1Eh>:

FlapperValve_Class::FlapperValve_Class(uint8_t id)
   14ea0:	b5b0      	push	{r4, r5, r7, lr}
   14ea2:	b082      	sub	sp, #8
   14ea4:	af00      	add	r7, sp, #0
   14ea6:	6078      	str	r0, [r7, #4]
   14ea8:	460b      	mov	r3, r1
   14eaa:	70fb      	strb	r3, [r7, #3]
   14eac:	687b      	ldr	r3, [r7, #4]
   14eae:	4618      	mov	r0, r3
   14eb0:	4b10      	ldr	r3, [pc, #64]	; (14ef4 <_ZN18FlapperValve_ClassC1Eh+0x54>)
   14eb2:	4798      	blx	r3
   14eb4:	687b      	ldr	r3, [r7, #4]
   14eb6:	3344      	adds	r3, #68	; 0x44
   14eb8:	2403      	movs	r4, #3
   14eba:	461d      	mov	r5, r3
   14ebc:	2c00      	cmp	r4, #0
   14ebe:	db05      	blt.n	14ecc <_ZN18FlapperValve_ClassC1Eh+0x2c>
   14ec0:	4628      	mov	r0, r5
   14ec2:	4b0d      	ldr	r3, [pc, #52]	; (14ef8 <_ZN18FlapperValve_ClassC1Eh+0x58>)
   14ec4:	4798      	blx	r3
   14ec6:	3520      	adds	r5, #32
   14ec8:	3c01      	subs	r4, #1
   14eca:	e7f7      	b.n	14ebc <_ZN18FlapperValve_ClassC1Eh+0x1c>
{	
	valveID=id;
   14ecc:	687b      	ldr	r3, [r7, #4]
   14ece:	78fa      	ldrb	r2, [r7, #3]
   14ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	//i2cDescr=&I2C_EXPANDER;
	simpleExpander=&staticExpander;
   14ed4:	687b      	ldr	r3, [r7, #4]
   14ed6:	4a09      	ldr	r2, [pc, #36]	; (14efc <_ZN18FlapperValve_ClassC1Eh+0x5c>)
   14ed8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	ptrFlapperValveClass=this;
   14edc:	4a08      	ldr	r2, [pc, #32]	; (14f00 <_ZN18FlapperValve_ClassC1Eh+0x60>)
   14ede:	687b      	ldr	r3, [r7, #4]
   14ee0:	6013      	str	r3, [r2, #0]
	isOK=false;
   14ee2:	687b      	ldr	r3, [r7, #4]
   14ee4:	2200      	movs	r2, #0
   14ee6:	779a      	strb	r2, [r3, #30]
} //FlapperValve_Class
   14ee8:	687b      	ldr	r3, [r7, #4]
   14eea:	4618      	mov	r0, r3
   14eec:	3708      	adds	r7, #8
   14eee:	46bd      	mov	sp, r7
   14ef0:	bdb0      	pop	{r4, r5, r7, pc}
   14ef2:	bf00      	nop
   14ef4:	00018e55 	.word	0x00018e55
   14ef8:	00015391 	.word	0x00015391
   14efc:	20009888 	.word	0x20009888
   14f00:	20009884 	.word	0x20009884

00014f04 <_ZN18FlapperValve_ClassD1Ev>:
	//i2cDescr=&I2C_EXPANDER;
	ptrFlapperValveClass=this;
} //FlapperValve_Class

// default destructor
FlapperValve_Class::~FlapperValve_Class()
   14f04:	b590      	push	{r4, r7, lr}
   14f06:	b083      	sub	sp, #12
   14f08:	af00      	add	r7, sp, #0
   14f0a:	6078      	str	r0, [r7, #4]
   14f0c:	687b      	ldr	r3, [r7, #4]
   14f0e:	3344      	adds	r3, #68	; 0x44
   14f10:	2b00      	cmp	r3, #0
   14f12:	d00c      	beq.n	14f2e <_ZN18FlapperValve_ClassD1Ev+0x2a>
   14f14:	687b      	ldr	r3, [r7, #4]
   14f16:	3344      	adds	r3, #68	; 0x44
   14f18:	f103 0480 	add.w	r4, r3, #128	; 0x80
   14f1c:	687b      	ldr	r3, [r7, #4]
   14f1e:	3344      	adds	r3, #68	; 0x44
   14f20:	42a3      	cmp	r3, r4
   14f22:	d004      	beq.n	14f2e <_ZN18FlapperValve_ClassD1Ev+0x2a>
   14f24:	3c20      	subs	r4, #32
   14f26:	4620      	mov	r0, r4
   14f28:	4b05      	ldr	r3, [pc, #20]	; (14f40 <_ZN18FlapperValve_ClassD1Ev+0x3c>)
   14f2a:	4798      	blx	r3
   14f2c:	e7f6      	b.n	14f1c <_ZN18FlapperValve_ClassD1Ev+0x18>
   14f2e:	687b      	ldr	r3, [r7, #4]
   14f30:	4618      	mov	r0, r3
   14f32:	4b04      	ldr	r3, [pc, #16]	; (14f44 <_ZN18FlapperValve_ClassD1Ev+0x40>)
   14f34:	4798      	blx	r3
{
} //~FlapperValve_Class
   14f36:	687b      	ldr	r3, [r7, #4]
   14f38:	4618      	mov	r0, r3
   14f3a:	370c      	adds	r7, #12
   14f3c:	46bd      	mov	sp, r7
   14f3e:	bd90      	pop	{r4, r7, pc}
   14f40:	000153a5 	.word	0x000153a5
   14f44:	00018e69 	.word	0x00018e69

00014f48 <_ZN18FlapperValve_Class4InitEv>:


bool	FlapperValve_Class::Init(void){
   14f48:	b580      	push	{r7, lr}
   14f4a:	b084      	sub	sp, #16
   14f4c:	af00      	add	r7, sp, #0
   14f4e:	6078      	str	r0, [r7, #4]
	ptrFlapperValveClass=this;
   14f50:	4a26      	ldr	r2, [pc, #152]	; (14fec <_ZN18FlapperValve_Class4InitEv+0xa4>)
   14f52:	687b      	ldr	r3, [r7, #4]
   14f54:	6013      	str	r3, [r2, #0]
		UserParameters up=defaultParameters;
   14f56:	4b26      	ldr	r3, [pc, #152]	; (14ff0 <_ZN18FlapperValve_Class4InitEv+0xa8>)
   14f58:	781b      	ldrb	r3, [r3, #0]
   14f5a:	733b      	strb	r3, [r7, #12]
		offset=up.flapperValveOffset;
   14f5c:	7b3a      	ldrb	r2, [r7, #12]
   14f5e:	687b      	ldr	r3, [r7, #4]
   14f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
// 		else
// 		{
// 		}
// 		return isOK;
	
		if (simpleExpander->isReady==false)
   14f64:	687b      	ldr	r3, [r7, #4]
   14f66:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   14f6a:	781b      	ldrb	r3, [r3, #0]
   14f6c:	b2db      	uxtb	r3, r3
   14f6e:	f083 0301 	eor.w	r3, r3, #1
   14f72:	b2db      	uxtb	r3, r3
   14f74:	2b00      	cmp	r3, #0
   14f76:	d011      	beq.n	14f9c <_ZN18FlapperValve_Class4InitEv+0x54>
		{
				simpleExpander->Init();
   14f78:	687b      	ldr	r3, [r7, #4]
   14f7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   14f7e:	4618      	mov	r0, r3
   14f80:	4b1c      	ldr	r3, [pc, #112]	; (14ff4 <_ZN18FlapperValve_Class4InitEv+0xac>)
   14f82:	4798      	blx	r3
				simpleExpander->SetPortAInput();
   14f84:	687b      	ldr	r3, [r7, #4]
   14f86:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   14f8a:	4618      	mov	r0, r3
   14f8c:	4b1a      	ldr	r3, [pc, #104]	; (14ff8 <_ZN18FlapperValve_Class4InitEv+0xb0>)
   14f8e:	4798      	blx	r3
				simpleExpander->SetPortBOutput();
   14f90:	687b      	ldr	r3, [r7, #4]
   14f92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   14f96:	4618      	mov	r0, r3
   14f98:	4b18      	ldr	r3, [pc, #96]	; (14ffc <_ZN18FlapperValve_Class4InitEv+0xb4>)
   14f9a:	4798      	blx	r3
		}

		if (simpleExpander->isReady)
   14f9c:	687b      	ldr	r3, [r7, #4]
   14f9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   14fa2:	781b      	ldrb	r3, [r3, #0]
   14fa4:	b2db      	uxtb	r3, r3
   14fa6:	2b00      	cmp	r3, #0
   14fa8:	d01a      	beq.n	14fe0 <_ZN18FlapperValve_Class4InitEv+0x98>
		{
			if (valveID==1)
   14faa:	687b      	ldr	r3, [r7, #4]
   14fac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   14fb0:	2b01      	cmp	r3, #1
   14fb2:	d104      	bne.n	14fbe <_ZN18FlapperValve_Class4InitEv+0x76>
			{
				ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
   14fb4:	4912      	ldr	r1, [pc, #72]	; (15000 <_ZN18FlapperValve_Class4InitEv+0xb8>)
   14fb6:	2004      	movs	r0, #4
   14fb8:	4b12      	ldr	r3, [pc, #72]	; (15004 <_ZN18FlapperValve_Class4InitEv+0xbc>)
   14fba:	4798      	blx	r3
   14fbc:	e008      	b.n	14fd0 <_ZN18FlapperValve_Class4InitEv+0x88>
			}
			else if  (valveID==2)
   14fbe:	687b      	ldr	r3, [r7, #4]
   14fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   14fc4:	2b02      	cmp	r3, #2
   14fc6:	d103      	bne.n	14fd0 <_ZN18FlapperValve_Class4InitEv+0x88>
			{
				ext_irq_register(PIN_PA05,FUNC_PTR(Fv2StatusChanged));
   14fc8:	490f      	ldr	r1, [pc, #60]	; (15008 <_ZN18FlapperValve_Class4InitEv+0xc0>)
   14fca:	2005      	movs	r0, #5
   14fcc:	4b0d      	ldr	r3, [pc, #52]	; (15004 <_ZN18FlapperValve_Class4InitEv+0xbc>)
   14fce:	4798      	blx	r3
			}
		//	InitExpanderArray(valveID);
			isOK=Selftest();
   14fd0:	6878      	ldr	r0, [r7, #4]
   14fd2:	4b0e      	ldr	r3, [pc, #56]	; (1500c <_ZN18FlapperValve_Class4InitEv+0xc4>)
   14fd4:	4798      	blx	r3
   14fd6:	4603      	mov	r3, r0
   14fd8:	461a      	mov	r2, r3
   14fda:	687b      	ldr	r3, [r7, #4]
   14fdc:	779a      	strb	r2, [r3, #30]
   14fde:	e000      	b.n	14fe2 <_ZN18FlapperValve_Class4InitEv+0x9a>
		}
		else
		{
			asm("nop");
   14fe0:	bf00      	nop
		}
// 		return isOK;	


}
   14fe2:	bf00      	nop
   14fe4:	4618      	mov	r0, r3
   14fe6:	3710      	adds	r7, #16
   14fe8:	46bd      	mov	sp, r7
   14fea:	bd80      	pop	{r7, pc}
   14fec:	20009884 	.word	0x20009884
   14ff0:	00022ef0 	.word	0x00022ef0
   14ff4:	00015495 	.word	0x00015495
   14ff8:	000155bd 	.word	0x000155bd
   14ffc:	00015601 	.word	0x00015601
   15000:	00014e49 	.word	0x00014e49
   15004:	00006545 	.word	0x00006545
   15008:	00014e61 	.word	0x00014e61
   1500c:	0001529d 	.word	0x0001529d

00015010 <_ZN18FlapperValve_Class13WriteSetpointEh>:
StatusInputs FlapperValve_Class::ReadStatusInputs(void){
	value=expanders[1].ReadGPIORegister();
	statusInputs=FillStatusInputs(value);
	return statusInputs;
}
uint8_t FlapperValve_Class::WriteSetpoint(uint8_t sp){
   15010:	b580      	push	{r7, lr}
   15012:	b082      	sub	sp, #8
   15014:	af00      	add	r7, sp, #0
   15016:	6078      	str	r0, [r7, #4]
   15018:	460b      	mov	r3, r1
   1501a:	70fb      	strb	r3, [r7, #3]
	//setpointPosition= expanders[2].WriteGPIORegister(sp);
	setpointPosition= simpleExpander->WriteRegisterB(sp) ;
   1501c:	687b      	ldr	r3, [r7, #4]
   1501e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   15022:	78fa      	ldrb	r2, [r7, #3]
   15024:	4611      	mov	r1, r2
   15026:	4618      	mov	r0, r3
   15028:	4b06      	ldr	r3, [pc, #24]	; (15044 <_ZN18FlapperValve_Class13WriteSetpointEh+0x34>)
   1502a:	4798      	blx	r3
   1502c:	4603      	mov	r3, r0
   1502e:	461a      	mov	r2, r3
   15030:	687b      	ldr	r3, [r7, #4]
   15032:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
	return setpointPosition;
   15036:	687b      	ldr	r3, [r7, #4]
   15038:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
}
   1503c:	4618      	mov	r0, r3
   1503e:	3708      	adds	r7, #8
   15040:	46bd      	mov	sp, r7
   15042:	bd80      	pop	{r7, pc}
   15044:	00015595 	.word	0x00015595

00015048 <_ZN18FlapperValve_Class17SetOffsetPositionEv>:
uint8_t FlapperValve_Class::SetOffsetPosition(void){
   15048:	b590      	push	{r4, r7, lr}
   1504a:	b083      	sub	sp, #12
   1504c:	af00      	add	r7, sp, #0
   1504e:	6078      	str	r0, [r7, #4]
		WriteSetpoint(offset);
   15050:	687b      	ldr	r3, [r7, #4]
   15052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   15056:	4619      	mov	r1, r3
   15058:	6878      	ldr	r0, [r7, #4]
   1505a:	4b27      	ldr	r3, [pc, #156]	; (150f8 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb0>)
   1505c:	4798      	blx	r3
		regulatorTimeout=false;
   1505e:	687b      	ldr	r3, [r7, #4]
   15060:	2200      	movs	r2, #0
   15062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		hvacTimer.Start_oneShot_task(FUNC_PTR(RegulatorTimeout),1000*60*1);
   15066:	f64e 2260 	movw	r2, #60000	; 0xea60
   1506a:	4924      	ldr	r1, [pc, #144]	; (150fc <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb4>)
   1506c:	4824      	ldr	r0, [pc, #144]	; (15100 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb8>)
   1506e:	4b25      	ldr	r3, [pc, #148]	; (15104 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xbc>)
   15070:	4798      	blx	r3
		while ((!regulatorTimeout)&&(abs(ReadActualPosition()-setpointPosition)>3)){
   15072:	687b      	ldr	r3, [r7, #4]
   15074:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   15078:	b2db      	uxtb	r3, r3
   1507a:	f083 0301 	eor.w	r3, r3, #1
   1507e:	b2db      	uxtb	r3, r3
   15080:	2b00      	cmp	r3, #0
   15082:	d021      	beq.n	150c8 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x80>
   15084:	6878      	ldr	r0, [r7, #4]
   15086:	4b20      	ldr	r3, [pc, #128]	; (15108 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc0>)
   15088:	4798      	blx	r3
   1508a:	4603      	mov	r3, r0
   1508c:	461a      	mov	r2, r3
   1508e:	687b      	ldr	r3, [r7, #4]
   15090:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   15094:	1ad3      	subs	r3, r2, r3
   15096:	2b00      	cmp	r3, #0
   15098:	dd09      	ble.n	150ae <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x66>
   1509a:	6878      	ldr	r0, [r7, #4]
   1509c:	4b1a      	ldr	r3, [pc, #104]	; (15108 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc0>)
   1509e:	4798      	blx	r3
   150a0:	4603      	mov	r3, r0
   150a2:	461a      	mov	r2, r3
   150a4:	687b      	ldr	r3, [r7, #4]
   150a6:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   150aa:	1ad3      	subs	r3, r2, r3
   150ac:	e008      	b.n	150c0 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x78>
   150ae:	687b      	ldr	r3, [r7, #4]
   150b0:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   150b4:	461c      	mov	r4, r3
   150b6:	6878      	ldr	r0, [r7, #4]
   150b8:	4b13      	ldr	r3, [pc, #76]	; (15108 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc0>)
   150ba:	4798      	blx	r3
   150bc:	4603      	mov	r3, r0
   150be:	1ae3      	subs	r3, r4, r3
   150c0:	2b03      	cmp	r3, #3
   150c2:	dd01      	ble.n	150c8 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x80>
   150c4:	2301      	movs	r3, #1
   150c6:	e000      	b.n	150ca <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x82>
   150c8:	2300      	movs	r3, #0
   150ca:	2b00      	cmp	r3, #0
   150cc:	d009      	beq.n	150e2 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x9a>
			arinc.SaveFlapperValveAngle();
   150ce:	480f      	ldr	r0, [pc, #60]	; (1510c <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc4>)
   150d0:	4b0f      	ldr	r3, [pc, #60]	; (15110 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc8>)
   150d2:	4798      	blx	r3
			delay_ms(50);
   150d4:	2032      	movs	r0, #50	; 0x32
   150d6:	4b0f      	ldr	r3, [pc, #60]	; (15114 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xcc>)
   150d8:	4798      	blx	r3
			arinc.TransmitTXBuffer();
   150da:	480c      	ldr	r0, [pc, #48]	; (1510c <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc4>)
   150dc:	4b0e      	ldr	r3, [pc, #56]	; (15118 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xd0>)
   150de:	4798      	blx	r3
		while ((!regulatorTimeout)&&(abs(ReadActualPosition()-setpointPosition)>3)){
   150e0:	e7c7      	b.n	15072 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x2a>
			
		}
		hvacTimer.Remove_task(FUNC_PTR(RegulatorTimeout));
   150e2:	4906      	ldr	r1, [pc, #24]	; (150fc <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb4>)
   150e4:	4806      	ldr	r0, [pc, #24]	; (15100 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb8>)
   150e6:	4b0d      	ldr	r3, [pc, #52]	; (1511c <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xd4>)
   150e8:	4798      	blx	r3
		return actualPosition;
   150ea:	687b      	ldr	r3, [r7, #4]
   150ec:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
		
}
   150f0:	4618      	mov	r0, r3
   150f2:	370c      	adds	r7, #12
   150f4:	46bd      	mov	sp, r7
   150f6:	bd90      	pop	{r4, r7, pc}
   150f8:	00015011 	.word	0x00015011
   150fc:	00014e7d 	.word	0x00014e7d
   15100:	2000a0e8 	.word	0x2000a0e8
   15104:	0001784d 	.word	0x0001784d
   15108:	000151f5 	.word	0x000151f5
   1510c:	20008d24 	.word	0x20008d24
   15110:	000129ad 	.word	0x000129ad
   15114:	000064b1 	.word	0x000064b1
   15118:	0001397d 	.word	0x0001397d
   1511c:	000177dd 	.word	0x000177dd

00015120 <_ZN18FlapperValve_Class20SetVentilatePositionEv>:
uint8_t FlapperValve_Class::SetVentilatePosition(void){
   15120:	b590      	push	{r4, r7, lr}
   15122:	b083      	sub	sp, #12
   15124:	af00      	add	r7, sp, #0
   15126:	6078      	str	r0, [r7, #4]
	WriteSetpoint(0xff-offset);
   15128:	687b      	ldr	r3, [r7, #4]
   1512a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   1512e:	43db      	mvns	r3, r3
   15130:	b2db      	uxtb	r3, r3
   15132:	4619      	mov	r1, r3
   15134:	6878      	ldr	r0, [r7, #4]
   15136:	4b23      	ldr	r3, [pc, #140]	; (151c4 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xa4>)
   15138:	4798      	blx	r3
	regulatorTimeout=false;
   1513a:	687b      	ldr	r3, [r7, #4]
   1513c:	2200      	movs	r2, #0
   1513e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	hvacTimer.Start_oneShot_task(FUNC_PTR(RegulatorTimeout),1000*60);
   15142:	f64e 2260 	movw	r2, #60000	; 0xea60
   15146:	4920      	ldr	r1, [pc, #128]	; (151c8 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xa8>)
   15148:	4820      	ldr	r0, [pc, #128]	; (151cc <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xac>)
   1514a:	4b21      	ldr	r3, [pc, #132]	; (151d0 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xb0>)
   1514c:	4798      	blx	r3
	while ((!regulatorTimeout)&&(abs(ReadActualPosition()-setpointPosition)>2));
   1514e:	687b      	ldr	r3, [r7, #4]
   15150:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   15154:	b2db      	uxtb	r3, r3
   15156:	f083 0301 	eor.w	r3, r3, #1
   1515a:	b2db      	uxtb	r3, r3
   1515c:	2b00      	cmp	r3, #0
   1515e:	d021      	beq.n	151a4 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x84>
   15160:	6878      	ldr	r0, [r7, #4]
   15162:	4b1c      	ldr	r3, [pc, #112]	; (151d4 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xb4>)
   15164:	4798      	blx	r3
   15166:	4603      	mov	r3, r0
   15168:	461a      	mov	r2, r3
   1516a:	687b      	ldr	r3, [r7, #4]
   1516c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   15170:	1ad3      	subs	r3, r2, r3
   15172:	2b00      	cmp	r3, #0
   15174:	dd09      	ble.n	1518a <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x6a>
   15176:	6878      	ldr	r0, [r7, #4]
   15178:	4b16      	ldr	r3, [pc, #88]	; (151d4 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xb4>)
   1517a:	4798      	blx	r3
   1517c:	4603      	mov	r3, r0
   1517e:	461a      	mov	r2, r3
   15180:	687b      	ldr	r3, [r7, #4]
   15182:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   15186:	1ad3      	subs	r3, r2, r3
   15188:	e008      	b.n	1519c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x7c>
   1518a:	687b      	ldr	r3, [r7, #4]
   1518c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   15190:	461c      	mov	r4, r3
   15192:	6878      	ldr	r0, [r7, #4]
   15194:	4b0f      	ldr	r3, [pc, #60]	; (151d4 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xb4>)
   15196:	4798      	blx	r3
   15198:	4603      	mov	r3, r0
   1519a:	1ae3      	subs	r3, r4, r3
   1519c:	2b02      	cmp	r3, #2
   1519e:	dd01      	ble.n	151a4 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x84>
   151a0:	2301      	movs	r3, #1
   151a2:	e000      	b.n	151a6 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x86>
   151a4:	2300      	movs	r3, #0
   151a6:	2b00      	cmp	r3, #0
   151a8:	d000      	beq.n	151ac <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x8c>
   151aa:	e7d0      	b.n	1514e <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x2e>
	hvacTimer.Remove_task(FUNC_PTR(RegulatorTimeout));
   151ac:	4906      	ldr	r1, [pc, #24]	; (151c8 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xa8>)
   151ae:	4807      	ldr	r0, [pc, #28]	; (151cc <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xac>)
   151b0:	4b09      	ldr	r3, [pc, #36]	; (151d8 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xb8>)
   151b2:	4798      	blx	r3
	return actualPosition;
   151b4:	687b      	ldr	r3, [r7, #4]
   151b6:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
	
}
   151ba:	4618      	mov	r0, r3
   151bc:	370c      	adds	r7, #12
   151be:	46bd      	mov	sp, r7
   151c0:	bd90      	pop	{r4, r7, pc}
   151c2:	bf00      	nop
   151c4:	00015011 	.word	0x00015011
   151c8:	00014e7d 	.word	0x00014e7d
   151cc:	2000a0e8 	.word	0x2000a0e8
   151d0:	0001784d 	.word	0x0001784d
   151d4:	000151f5 	.word	0x000151f5
   151d8:	000177dd 	.word	0x000177dd

000151dc <_ZN18FlapperValve_Class15GetCurrentAngleEv>:
uint8_t FlapperValve_Class::ReadSetpoint(){
	setpointPosition= expanders[2].ReadGPIORegister();
	return setpointPosition;
}
uint8_t FlapperValve_Class::GetCurrentAngle(void){
   151dc:	b480      	push	{r7}
   151de:	b083      	sub	sp, #12
   151e0:	af00      	add	r7, sp, #0
   151e2:	6078      	str	r0, [r7, #4]
	return actualPosition;
   151e4:	687b      	ldr	r3, [r7, #4]
   151e6:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
}
   151ea:	4618      	mov	r0, r3
   151ec:	370c      	adds	r7, #12
   151ee:	46bd      	mov	sp, r7
   151f0:	bc80      	pop	{r7}
   151f2:	4770      	bx	lr

000151f4 <_ZN18FlapperValve_Class18ReadActualPositionEv>:
uint8_t FlapperValve_Class::ReadActualPosition(void){
   151f4:	b580      	push	{r7, lr}
   151f6:	b082      	sub	sp, #8
   151f8:	af00      	add	r7, sp, #0
   151fa:	6078      	str	r0, [r7, #4]
/*	actualPosition= expanders[3].ReadGPIORegister();*/
	lastPosition=actualPosition;
   151fc:	687b      	ldr	r3, [r7, #4]
   151fe:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
   15202:	687b      	ldr	r3, [r7, #4]
   15204:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
   15208:	687b      	ldr	r3, [r7, #4]
   1520a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   1520e:	2112      	movs	r1, #18
   15210:	4618      	mov	r0, r3
   15212:	4b13      	ldr	r3, [pc, #76]	; (15260 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x6c>)
   15214:	4798      	blx	r3
   15216:	4603      	mov	r3, r0
   15218:	461a      	mov	r2, r3
   1521a:	687b      	ldr	r3, [r7, #4]
   1521c:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	if (actualPosition>200)
   15220:	687b      	ldr	r3, [r7, #4]
   15222:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   15226:	2bc8      	cmp	r3, #200	; 0xc8
   15228:	dd04      	ble.n	15234 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x40>
	{
		statusFlapperValve=RECYCLE;
   1522a:	687b      	ldr	r3, [r7, #4]
   1522c:	2202      	movs	r2, #2
   1522e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   15232:	e00d      	b.n	15250 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x5c>
	}else if (actualPosition>100)
   15234:	687b      	ldr	r3, [r7, #4]
   15236:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   1523a:	2b64      	cmp	r3, #100	; 0x64
   1523c:	dd04      	ble.n	15248 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x54>
	{
		statusFlapperValve=INTERM;
   1523e:	687b      	ldr	r3, [r7, #4]
   15240:	2201      	movs	r2, #1
   15242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   15246:	e003      	b.n	15250 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x5c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR;
   15248:	687b      	ldr	r3, [r7, #4]
   1524a:	2200      	movs	r2, #0
   1524c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	}
	return actualPosition;
   15250:	687b      	ldr	r3, [r7, #4]
   15252:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
}
   15256:	4618      	mov	r0, r3
   15258:	3708      	adds	r7, #8
   1525a:	46bd      	mov	sp, r7
   1525c:	bd80      	pop	{r7, pc}
   1525e:	bf00      	nop
   15260:	00015521 	.word	0x00015521

00015264 <_ZN18FlapperValve_Class17IsPositionChangedEv>:
void FlapperValve_Class::UpdateFlapperValveData(){
	fvData.controlStatus=ReadControlStatus();
	fvData.statusInputs=ReadStatusInputs();
	fvData.actualPosition=ReadActualPosition();
}
bool FlapperValve_Class::IsPositionChanged(void){
   15264:	b590      	push	{r4, r7, lr}
   15266:	b083      	sub	sp, #12
   15268:	af00      	add	r7, sp, #0
   1526a:	6078      	str	r0, [r7, #4]
	if (lastPosition==ReadActualPosition())
   1526c:	687b      	ldr	r3, [r7, #4]
   1526e:	f893 40e0 	ldrb.w	r4, [r3, #224]	; 0xe0
   15272:	6878      	ldr	r0, [r7, #4]
   15274:	4b08      	ldr	r3, [pc, #32]	; (15298 <_ZN18FlapperValve_Class17IsPositionChangedEv+0x34>)
   15276:	4798      	blx	r3
   15278:	4603      	mov	r3, r0
   1527a:	429c      	cmp	r4, r3
   1527c:	bf0c      	ite	eq
   1527e:	2301      	moveq	r3, #1
   15280:	2300      	movne	r3, #0
   15282:	b2db      	uxtb	r3, r3
   15284:	2b00      	cmp	r3, #0
   15286:	d001      	beq.n	1528c <_ZN18FlapperValve_Class17IsPositionChangedEv+0x28>
	{
		return false;
   15288:	2300      	movs	r3, #0
   1528a:	e000      	b.n	1528e <_ZN18FlapperValve_Class17IsPositionChangedEv+0x2a>
	} 
	else
	{
		return true;
   1528c:	2301      	movs	r3, #1
	}
	return true;
}
   1528e:	4618      	mov	r0, r3
   15290:	370c      	adds	r7, #12
   15292:	46bd      	mov	sp, r7
   15294:	bd90      	pop	{r4, r7, pc}
   15296:	bf00      	nop
   15298:	000151f5 	.word	0x000151f5

0001529c <_ZN18FlapperValve_Class8SelftestEv>:
bool FlapperValve_Class::Selftest(void){
   1529c:	b590      	push	{r4, r7, lr}
   1529e:	b083      	sub	sp, #12
   152a0:	af00      	add	r7, sp, #0
   152a2:	6078      	str	r0, [r7, #4]

	SetOffsetPosition();
   152a4:	6878      	ldr	r0, [r7, #4]
   152a6:	4b18      	ldr	r3, [pc, #96]	; (15308 <_ZN18FlapperValve_Class8SelftestEv+0x6c>)
   152a8:	4798      	blx	r3
	//UpdateFlapperValveData();
	isOK=abs(ReadActualPosition()-setpointPosition)<4;
   152aa:	6878      	ldr	r0, [r7, #4]
   152ac:	4b17      	ldr	r3, [pc, #92]	; (1530c <_ZN18FlapperValve_Class8SelftestEv+0x70>)
   152ae:	4798      	blx	r3
   152b0:	4603      	mov	r3, r0
   152b2:	461a      	mov	r2, r3
   152b4:	687b      	ldr	r3, [r7, #4]
   152b6:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   152ba:	1ad3      	subs	r3, r2, r3
   152bc:	2b00      	cmp	r3, #0
   152be:	dd0e      	ble.n	152de <_ZN18FlapperValve_Class8SelftestEv+0x42>
   152c0:	6878      	ldr	r0, [r7, #4]
   152c2:	4b12      	ldr	r3, [pc, #72]	; (1530c <_ZN18FlapperValve_Class8SelftestEv+0x70>)
   152c4:	4798      	blx	r3
   152c6:	4603      	mov	r3, r0
   152c8:	461a      	mov	r2, r3
   152ca:	687b      	ldr	r3, [r7, #4]
   152cc:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   152d0:	1ad3      	subs	r3, r2, r3
   152d2:	2b03      	cmp	r3, #3
   152d4:	bfd4      	ite	le
   152d6:	2301      	movle	r3, #1
   152d8:	2300      	movgt	r3, #0
   152da:	b2db      	uxtb	r3, r3
   152dc:	e00d      	b.n	152fa <_ZN18FlapperValve_Class8SelftestEv+0x5e>
   152de:	687b      	ldr	r3, [r7, #4]
   152e0:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   152e4:	461c      	mov	r4, r3
   152e6:	6878      	ldr	r0, [r7, #4]
   152e8:	4b08      	ldr	r3, [pc, #32]	; (1530c <_ZN18FlapperValve_Class8SelftestEv+0x70>)
   152ea:	4798      	blx	r3
   152ec:	4603      	mov	r3, r0
   152ee:	1ae3      	subs	r3, r4, r3
   152f0:	2b03      	cmp	r3, #3
   152f2:	bfd4      	ite	le
   152f4:	2301      	movle	r3, #1
   152f6:	2300      	movgt	r3, #0
   152f8:	b2db      	uxtb	r3, r3
   152fa:	687a      	ldr	r2, [r7, #4]
   152fc:	7793      	strb	r3, [r2, #30]
	//return isOK;
	return true;
   152fe:	2301      	movs	r3, #1
}
   15300:	4618      	mov	r0, r3
   15302:	370c      	adds	r7, #12
   15304:	46bd      	mov	sp, r7
   15306:	bd90      	pop	{r4, r7, pc}
   15308:	00015049 	.word	0x00015049
   1530c:	000151f5 	.word	0x000151f5

00015310 <_Z41__static_initialization_and_destruction_0ii>:

FlapperValve_Class::operator bool(){
	return	isOK;
}

   15310:	b580      	push	{r7, lr}
   15312:	b082      	sub	sp, #8
   15314:	af00      	add	r7, sp, #0
   15316:	6078      	str	r0, [r7, #4]
   15318:	6039      	str	r1, [r7, #0]
   1531a:	687b      	ldr	r3, [r7, #4]
   1531c:	2b01      	cmp	r3, #1
   1531e:	d116      	bne.n	1534e <_Z41__static_initialization_and_destruction_0ii+0x3e>
   15320:	683b      	ldr	r3, [r7, #0]
   15322:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15326:	4293      	cmp	r3, r2
   15328:	d111      	bne.n	1534e <_Z41__static_initialization_and_destruction_0ii+0x3e>
static MCP23017_Class staticExpander(&I2C_EXPANDER);
   1532a:	490b      	ldr	r1, [pc, #44]	; (15358 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1532c:	480b      	ldr	r0, [pc, #44]	; (1535c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   1532e:	4b0c      	ldr	r3, [pc, #48]	; (15360 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15330:	4798      	blx	r3
   15332:	4a0c      	ldr	r2, [pc, #48]	; (15364 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15334:	490c      	ldr	r1, [pc, #48]	; (15368 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   15336:	4809      	ldr	r0, [pc, #36]	; (1535c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15338:	4b0c      	ldr	r3, [pc, #48]	; (1536c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1533a:	4798      	blx	r3
   1533c:	2101      	movs	r1, #1
   1533e:	480c      	ldr	r0, [pc, #48]	; (15370 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   15340:	4b0c      	ldr	r3, [pc, #48]	; (15374 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   15342:	4798      	blx	r3
   15344:	4a07      	ldr	r2, [pc, #28]	; (15364 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15346:	490c      	ldr	r1, [pc, #48]	; (15378 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   15348:	4809      	ldr	r0, [pc, #36]	; (15370 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   1534a:	4b08      	ldr	r3, [pc, #32]	; (1536c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1534c:	4798      	blx	r3
   1534e:	bf00      	nop
   15350:	3708      	adds	r7, #8
   15352:	46bd      	mov	sp, r7
   15354:	bd80      	pop	{r7, pc}
   15356:	bf00      	nop
   15358:	2000a6b4 	.word	0x2000a6b4
   1535c:	20009888 	.word	0x20009888
   15360:	000153d1 	.word	0x000153d1
   15364:	20000000 	.word	0x20000000
   15368:	00015415 	.word	0x00015415
   1536c:	00019ab1 	.word	0x00019ab1
   15370:	200098e8 	.word	0x200098e8
   15374:	00014ea1 	.word	0x00014ea1
   15378:	00014f05 	.word	0x00014f05

0001537c <_GLOBAL__sub_I_ptrFlapperValveClass>:
   1537c:	b580      	push	{r7, lr}
   1537e:	af00      	add	r7, sp, #0
   15380:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15384:	2001      	movs	r0, #1
   15386:	4b01      	ldr	r3, [pc, #4]	; (1538c <_GLOBAL__sub_I_ptrFlapperValveClass+0x10>)
   15388:	4798      	blx	r3
   1538a:	bd80      	pop	{r7, pc}
   1538c:	00015311 	.word	0x00015311

00015390 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   15390:	b480      	push	{r7}
   15392:	b083      	sub	sp, #12
   15394:	af00      	add	r7, sp, #0
   15396:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   15398:	687b      	ldr	r3, [r7, #4]
   1539a:	4618      	mov	r0, r3
   1539c:	370c      	adds	r7, #12
   1539e:	46bd      	mov	sp, r7
   153a0:	bc80      	pop	{r7}
   153a2:	4770      	bx	lr

000153a4 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   153a4:	b480      	push	{r7}
   153a6:	b083      	sub	sp, #12
   153a8:	af00      	add	r7, sp, #0
   153aa:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   153ac:	687b      	ldr	r3, [r7, #4]
   153ae:	4618      	mov	r0, r3
   153b0:	370c      	adds	r7, #12
   153b2:	46bd      	mov	sp, r7
   153b4:	bc80      	pop	{r7}
   153b6:	4770      	bx	lr

000153b8 <_ZL13MCPHadChangedv>:


MCP23017_Class	*ptrMCP23017Class;
static I2C_Sync_Class  i2cStatic;

static void	MCPHadChanged(void){
   153b8:	b480      	push	{r7}
   153ba:	af00      	add	r7, sp, #0
	
			ptrMCP23017Class->hasChanged=true;
   153bc:	4b03      	ldr	r3, [pc, #12]	; (153cc <_ZL13MCPHadChangedv+0x14>)
   153be:	681b      	ldr	r3, [r3, #0]
   153c0:	2201      	movs	r2, #1
   153c2:	705a      	strb	r2, [r3, #1]

}
   153c4:	bf00      	nop
   153c6:	46bd      	mov	sp, r7
   153c8:	bc80      	pop	{r7}
   153ca:	4770      	bx	lr
   153cc:	200099cc 	.word	0x200099cc

000153d0 <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc>:
{
	ptrI2CAsynDescr=i2cDes;
	ptrMCP23017Class=this;
} //AT24MAC_Class

MCP23017_Class::MCP23017_Class(i2c_m_sync_desc *i2cDes)
   153d0:	b580      	push	{r7, lr}
   153d2:	b082      	sub	sp, #8
   153d4:	af00      	add	r7, sp, #0
   153d6:	6078      	str	r0, [r7, #4]
   153d8:	6039      	str	r1, [r7, #0]
   153da:	687b      	ldr	r3, [r7, #4]
   153dc:	3304      	adds	r3, #4
   153de:	4618      	mov	r0, r3
   153e0:	4b09      	ldr	r3, [pc, #36]	; (15408 <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc+0x38>)
   153e2:	4798      	blx	r3
{
	ptrI2CDescr=i2cDes;
   153e4:	687b      	ldr	r3, [r7, #4]
   153e6:	683a      	ldr	r2, [r7, #0]
   153e8:	64da      	str	r2, [r3, #76]	; 0x4c
	ptrMCP23017Class=this;
   153ea:	4a08      	ldr	r2, [pc, #32]	; (1540c <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc+0x3c>)
   153ec:	687b      	ldr	r3, [r7, #4]
   153ee:	6013      	str	r3, [r2, #0]
	isReady=false;
   153f0:	687b      	ldr	r3, [r7, #4]
   153f2:	2200      	movs	r2, #0
   153f4:	701a      	strb	r2, [r3, #0]
	i2c=&i2cStatic;
   153f6:	687b      	ldr	r3, [r7, #4]
   153f8:	4a05      	ldr	r2, [pc, #20]	; (15410 <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc+0x40>)
   153fa:	651a      	str	r2, [r3, #80]	; 0x50
} //AT24MAC_Class
   153fc:	687b      	ldr	r3, [r7, #4]
   153fe:	4618      	mov	r0, r3
   15400:	3708      	adds	r7, #8
   15402:	46bd      	mov	sp, r7
   15404:	bd80      	pop	{r7, pc}
   15406:	bf00      	nop
   15408:	0001897d 	.word	0x0001897d
   1540c:	200099cc 	.word	0x200099cc
   15410:	200099d0 	.word	0x200099d0

00015414 <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
   15414:	b580      	push	{r7, lr}
   15416:	b082      	sub	sp, #8
   15418:	af00      	add	r7, sp, #0
   1541a:	6078      	str	r0, [r7, #4]
   1541c:	687b      	ldr	r3, [r7, #4]
   1541e:	3304      	adds	r3, #4
   15420:	4618      	mov	r0, r3
   15422:	4b03      	ldr	r3, [pc, #12]	; (15430 <_ZN14MCP23017_ClassD1Ev+0x1c>)
   15424:	4798      	blx	r3
{
} //~AT24MAC_Class
   15426:	687b      	ldr	r3, [r7, #4]
   15428:	4618      	mov	r0, r3
   1542a:	3708      	adds	r7, #8
   1542c:	46bd      	mov	sp, r7
   1542e:	bd80      	pop	{r7, pc}
   15430:	000189ad 	.word	0x000189ad

00015434 <_ZN14MCP23017_Class4InitEh>:

void MCP23017_Class::Init(uint8_t addr) {
   15434:	b580      	push	{r7, lr}
   15436:	b082      	sub	sp, #8
   15438:	af00      	add	r7, sp, #0
   1543a:	6078      	str	r0, [r7, #4]
   1543c:	460b      	mov	r3, r1
   1543e:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   15440:	687b      	ldr	r3, [r7, #4]
   15442:	78fa      	ldrb	r2, [r7, #3]
   15444:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c->SetDescriptor(ptrI2CDescr);
   15448:	687b      	ldr	r3, [r7, #4]
   1544a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1544c:	687b      	ldr	r3, [r7, #4]
   1544e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15450:	4619      	mov	r1, r3
   15452:	4610      	mov	r0, r2
   15454:	4b0b      	ldr	r3, [pc, #44]	; (15484 <_ZN14MCP23017_Class4InitEh+0x50>)
   15456:	4798      	blx	r3
	isReady=i2c->Init(addr)==0;
   15458:	687b      	ldr	r3, [r7, #4]
   1545a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1545c:	78fa      	ldrb	r2, [r7, #3]
   1545e:	4611      	mov	r1, r2
   15460:	4618      	mov	r0, r3
   15462:	4b09      	ldr	r3, [pc, #36]	; (15488 <_ZN14MCP23017_Class4InitEh+0x54>)
   15464:	4798      	blx	r3
   15466:	4603      	mov	r3, r0
   15468:	f083 0301 	eor.w	r3, r3, #1
   1546c:	b2da      	uxtb	r2, r3
   1546e:	687b      	ldr	r3, [r7, #4]
   15470:	701a      	strb	r2, [r3, #0]
	ext_irq_register(PIN_PA04,FUNC_PTR(MCPHadChanged));
   15472:	4906      	ldr	r1, [pc, #24]	; (1548c <_ZN14MCP23017_Class4InitEh+0x58>)
   15474:	2004      	movs	r0, #4
   15476:	4b06      	ldr	r3, [pc, #24]	; (15490 <_ZN14MCP23017_Class4InitEh+0x5c>)
   15478:	4798      	blx	r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   1547a:	bf00      	nop
   1547c:	3708      	adds	r7, #8
   1547e:	46bd      	mov	sp, r7
   15480:	bd80      	pop	{r7, pc}
   15482:	bf00      	nop
   15484:	00018d35 	.word	0x00018d35
   15488:	00018db9 	.word	0x00018db9
   1548c:	000153b9 	.word	0x000153b9
   15490:	00006545 	.word	0x00006545

00015494 <_ZN14MCP23017_Class4InitEv>:


/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
bool MCP23017_Class::Init(void) {
   15494:	b580      	push	{r7, lr}
   15496:	b082      	sub	sp, #8
   15498:	af00      	add	r7, sp, #0
   1549a:	6078      	str	r0, [r7, #4]
    Init((uint8_t)MCP23017_ADDRESS);
   1549c:	2127      	movs	r1, #39	; 0x27
   1549e:	6878      	ldr	r0, [r7, #4]
   154a0:	4b0a      	ldr	r3, [pc, #40]	; (154cc <_ZN14MCP23017_Class4InitEv+0x38>)
   154a2:	4798      	blx	r3
	isOK=i2c->isOK;
   154a4:	687b      	ldr	r3, [r7, #4]
   154a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   154a8:	7a5b      	ldrb	r3, [r3, #9]
   154aa:	b2da      	uxtb	r2, r3
   154ac:	687b      	ldr	r3, [r7, #4]
   154ae:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	isReady=isOK;
   154b2:	687b      	ldr	r3, [r7, #4]
   154b4:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
   154b8:	687b      	ldr	r3, [r7, #4]
   154ba:	701a      	strb	r2, [r3, #0]
	return	isOK;	
   154bc:	687b      	ldr	r3, [r7, #4]
   154be:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
}
   154c2:	4618      	mov	r0, r3
   154c4:	3708      	adds	r7, #8
   154c6:	46bd      	mov	sp, r7
   154c8:	bd80      	pop	{r7, pc}
   154ca:	bf00      	nop
   154cc:	00015435 	.word	0x00015435

000154d0 <_ZN14MCP23017_Class9bitForPinEh>:
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23017_Class::bitForPin(uint8_t pin){
   154d0:	b480      	push	{r7}
   154d2:	b083      	sub	sp, #12
   154d4:	af00      	add	r7, sp, #0
   154d6:	6078      	str	r0, [r7, #4]
   154d8:	460b      	mov	r3, r1
   154da:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   154dc:	78fb      	ldrb	r3, [r7, #3]
   154de:	f003 0307 	and.w	r3, r3, #7
   154e2:	b2db      	uxtb	r3, r3
}
   154e4:	4618      	mov	r0, r3
   154e6:	370c      	adds	r7, #12
   154e8:	46bd      	mov	sp, r7
   154ea:	bc80      	pop	{r7}
   154ec:	4770      	bx	lr

000154ee <_ZN14MCP23017_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23017_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   154ee:	b480      	push	{r7}
   154f0:	b083      	sub	sp, #12
   154f2:	af00      	add	r7, sp, #0
   154f4:	6078      	str	r0, [r7, #4]
   154f6:	4608      	mov	r0, r1
   154f8:	4611      	mov	r1, r2
   154fa:	461a      	mov	r2, r3
   154fc:	4603      	mov	r3, r0
   154fe:	70fb      	strb	r3, [r7, #3]
   15500:	460b      	mov	r3, r1
   15502:	70bb      	strb	r3, [r7, #2]
   15504:	4613      	mov	r3, r2
   15506:	707b      	strb	r3, [r7, #1]
    return(pin<8) ?portAaddr:portBaddr;
   15508:	78fb      	ldrb	r3, [r7, #3]
   1550a:	2b07      	cmp	r3, #7
   1550c:	dc01      	bgt.n	15512 <_ZN14MCP23017_Class9regForPinEhhh+0x24>
   1550e:	78bb      	ldrb	r3, [r7, #2]
   15510:	e000      	b.n	15514 <_ZN14MCP23017_Class9regForPinEhhh+0x26>
   15512:	787b      	ldrb	r3, [r7, #1]
}
   15514:	4618      	mov	r0, r3
   15516:	370c      	adds	r7, #12
   15518:	46bd      	mov	sp, r7
   1551a:	bc80      	pop	{r7}
   1551c:	4770      	bx	lr
	...

00015520 <_ZN14MCP23017_Class12ReadRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23017_Class::ReadRegister(uint8_t addr){
   15520:	b580      	push	{r7, lr}
   15522:	b082      	sub	sp, #8
   15524:	af00      	add	r7, sp, #0
   15526:	6078      	str	r0, [r7, #4]
   15528:	460b      	mov	r3, r1
   1552a:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);

	//i2c->ReadCommand(addr,&registerValue,1);
	i2c->Write(&addr,1);
   1552c:	687b      	ldr	r3, [r7, #4]
   1552e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   15530:	1cf9      	adds	r1, r7, #3
   15532:	2201      	movs	r2, #1
   15534:	4618      	mov	r0, r3
   15536:	4b08      	ldr	r3, [pc, #32]	; (15558 <_ZN14MCP23017_Class12ReadRegisterEh+0x38>)
   15538:	4798      	blx	r3
	i2c->Read(&registerValue,1);
   1553a:	687b      	ldr	r3, [r7, #4]
   1553c:	6d18      	ldr	r0, [r3, #80]	; 0x50
   1553e:	687b      	ldr	r3, [r7, #4]
   15540:	3355      	adds	r3, #85	; 0x55
   15542:	2201      	movs	r2, #1
   15544:	4619      	mov	r1, r3
   15546:	4b05      	ldr	r3, [pc, #20]	; (1555c <_ZN14MCP23017_Class12ReadRegisterEh+0x3c>)
   15548:	4798      	blx	r3
	return registerValue;
   1554a:	687b      	ldr	r3, [r7, #4]
   1554c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
}
   15550:	4618      	mov	r0, r3
   15552:	3708      	adds	r7, #8
   15554:	46bd      	mov	sp, r7
   15556:	bd80      	pop	{r7, pc}
   15558:	00018dfd 	.word	0x00018dfd
   1555c:	00018e29 	.word	0x00018e29

00015560 <_ZN14MCP23017_Class13WriteRegisterEhh>:


/**
 * Writes a given register
 */
void MCP23017_Class::WriteRegister(uint8_t addr, uint8_t value){
   15560:	b580      	push	{r7, lr}
   15562:	b084      	sub	sp, #16
   15564:	af00      	add	r7, sp, #0
   15566:	6078      	str	r0, [r7, #4]
   15568:	460b      	mov	r3, r1
   1556a:	70fb      	strb	r3, [r7, #3]
   1556c:	4613      	mov	r3, r2
   1556e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	//isReady=false;
	uint8_t array[2];
	array[0]=addr;
   15570:	78fb      	ldrb	r3, [r7, #3]
   15572:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   15574:	78bb      	ldrb	r3, [r7, #2]
   15576:	737b      	strb	r3, [r7, #13]
	i2c->Write(array,2);
   15578:	687b      	ldr	r3, [r7, #4]
   1557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1557c:	f107 010c 	add.w	r1, r7, #12
   15580:	2202      	movs	r2, #2
   15582:	4618      	mov	r0, r3
   15584:	4b02      	ldr	r3, [pc, #8]	; (15590 <_ZN14MCP23017_Class13WriteRegisterEhh+0x30>)
   15586:	4798      	blx	r3
	//while(!i2ca.txReady);
}
   15588:	bf00      	nop
   1558a:	3710      	adds	r7, #16
   1558c:	46bd      	mov	sp, r7
   1558e:	bd80      	pop	{r7, pc}
   15590:	00018dfd 	.word	0x00018dfd

00015594 <_ZN14MCP23017_Class14WriteRegisterBEh>:
uint8_t MCP23017_Class::WriteRegisterB(uint8_t value){
   15594:	b580      	push	{r7, lr}
   15596:	b082      	sub	sp, #8
   15598:	af00      	add	r7, sp, #0
   1559a:	6078      	str	r0, [r7, #4]
   1559c:	460b      	mov	r3, r1
   1559e:	70fb      	strb	r3, [r7, #3]
	WriteRegister(MCP23017_GPIOB,value);
   155a0:	78fb      	ldrb	r3, [r7, #3]
   155a2:	461a      	mov	r2, r3
   155a4:	2113      	movs	r1, #19
   155a6:	6878      	ldr	r0, [r7, #4]
   155a8:	4b03      	ldr	r3, [pc, #12]	; (155b8 <_ZN14MCP23017_Class14WriteRegisterBEh+0x24>)
   155aa:	4798      	blx	r3
	return value;
   155ac:	78fb      	ldrb	r3, [r7, #3]
}
   155ae:	4618      	mov	r0, r3
   155b0:	3708      	adds	r7, #8
   155b2:	46bd      	mov	sp, r7
   155b4:	bd80      	pop	{r7, pc}
   155b6:	bf00      	nop
   155b8:	00015561 	.word	0x00015561

000155bc <_ZN14MCP23017_Class13SetPortAInputEv>:

void	MCP23017_Class::SetPortAInput(void){
   155bc:	b580      	push	{r7, lr}
   155be:	b084      	sub	sp, #16
   155c0:	af00      	add	r7, sp, #0
   155c2:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   155c4:	2300      	movs	r3, #0
   155c6:	73fb      	strb	r3, [r7, #15]
   155c8:	7bfb      	ldrb	r3, [r7, #15]
   155ca:	2b07      	cmp	r3, #7
   155cc:	dc0f      	bgt.n	155ee <_ZN14MCP23017_Class13SetPortAInputEv+0x32>
	{
		pinMode(i,INPUT);
   155ce:	7bfb      	ldrb	r3, [r7, #15]
   155d0:	2200      	movs	r2, #0
   155d2:	4619      	mov	r1, r3
   155d4:	6878      	ldr	r0, [r7, #4]
   155d6:	4b08      	ldr	r3, [pc, #32]	; (155f8 <_ZN14MCP23017_Class13SetPortAInputEv+0x3c>)
   155d8:	4798      	blx	r3
		pullUp(i,HIGH);
   155da:	7bfb      	ldrb	r3, [r7, #15]
   155dc:	2201      	movs	r2, #1
   155de:	4619      	mov	r1, r3
   155e0:	6878      	ldr	r0, [r7, #4]
   155e2:	4b06      	ldr	r3, [pc, #24]	; (155fc <_ZN14MCP23017_Class13SetPortAInputEv+0x40>)
   155e4:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   155e6:	7bfb      	ldrb	r3, [r7, #15]
   155e8:	3301      	adds	r3, #1
   155ea:	73fb      	strb	r3, [r7, #15]
   155ec:	e7ec      	b.n	155c8 <_ZN14MCP23017_Class13SetPortAInputEv+0xc>
	}
}
   155ee:	bf00      	nop
   155f0:	3710      	adds	r7, #16
   155f2:	46bd      	mov	sp, r7
   155f4:	bd80      	pop	{r7, pc}
   155f6:	bf00      	nop
   155f8:	000156d1 	.word	0x000156d1
   155fc:	00015709 	.word	0x00015709

00015600 <_ZN14MCP23017_Class14SetPortBOutputEv>:
void	MCP23017_Class::SetPortBOutput(void){
   15600:	b580      	push	{r7, lr}
   15602:	b084      	sub	sp, #16
   15604:	af00      	add	r7, sp, #0
   15606:	6078      	str	r0, [r7, #4]
	for (uint8_t i=8;i<16;i++)
   15608:	2308      	movs	r3, #8
   1560a:	73fb      	strb	r3, [r7, #15]
   1560c:	7bfb      	ldrb	r3, [r7, #15]
   1560e:	2b0f      	cmp	r3, #15
   15610:	dc09      	bgt.n	15626 <_ZN14MCP23017_Class14SetPortBOutputEv+0x26>
	{
		pinMode(i,OUTPUT);
   15612:	7bfb      	ldrb	r3, [r7, #15]
   15614:	2201      	movs	r2, #1
   15616:	4619      	mov	r1, r3
   15618:	6878      	ldr	r0, [r7, #4]
   1561a:	4b05      	ldr	r3, [pc, #20]	; (15630 <_ZN14MCP23017_Class14SetPortBOutputEv+0x30>)
   1561c:	4798      	blx	r3
	for (uint8_t i=8;i<16;i++)
   1561e:	7bfb      	ldrb	r3, [r7, #15]
   15620:	3301      	adds	r3, #1
   15622:	73fb      	strb	r3, [r7, #15]
   15624:	e7f2      	b.n	1560c <_ZN14MCP23017_Class14SetPortBOutputEv+0xc>
	}
}
   15626:	bf00      	nop
   15628:	3710      	adds	r7, #16
   1562a:	46bd      	mov	sp, r7
   1562c:	bd80      	pop	{r7, pc}
   1562e:	bf00      	nop
   15630:	000156d1 	.word	0x000156d1

00015634 <_ZN14MCP23017_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23017_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   15634:	b590      	push	{r4, r7, lr}
   15636:	b085      	sub	sp, #20
   15638:	af00      	add	r7, sp, #0
   1563a:	6078      	str	r0, [r7, #4]
   1563c:	4608      	mov	r0, r1
   1563e:	4611      	mov	r1, r2
   15640:	461a      	mov	r2, r3
   15642:	4603      	mov	r3, r0
   15644:	70fb      	strb	r3, [r7, #3]
   15646:	460b      	mov	r3, r1
   15648:	70bb      	strb	r3, [r7, #2]
   1564a:	4613      	mov	r3, r2
   1564c:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
   1564e:	f897 3020 	ldrb.w	r3, [r7, #32]
   15652:	787a      	ldrb	r2, [r7, #1]
   15654:	78f9      	ldrb	r1, [r7, #3]
   15656:	6878      	ldr	r0, [r7, #4]
   15658:	4c19      	ldr	r4, [pc, #100]	; (156c0 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x8c>)
   1565a:	47a0      	blx	r4
   1565c:	4603      	mov	r3, r0
   1565e:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   15660:	78fb      	ldrb	r3, [r7, #3]
   15662:	4619      	mov	r1, r3
   15664:	6878      	ldr	r0, [r7, #4]
   15666:	4b17      	ldr	r3, [pc, #92]	; (156c4 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x90>)
   15668:	4798      	blx	r3
   1566a:	4603      	mov	r3, r0
   1566c:	737b      	strb	r3, [r7, #13]
	regValue = ReadRegister(regAddr);
   1566e:	7bfb      	ldrb	r3, [r7, #15]
   15670:	4619      	mov	r1, r3
   15672:	6878      	ldr	r0, [r7, #4]
   15674:	4b14      	ldr	r3, [pc, #80]	; (156c8 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x94>)
   15676:	4798      	blx	r3
   15678:	4603      	mov	r3, r0
   1567a:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   1567c:	78bb      	ldrb	r3, [r7, #2]
   1567e:	2b00      	cmp	r3, #0
   15680:	d009      	beq.n	15696 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x62>
   15682:	7bba      	ldrb	r2, [r7, #14]
   15684:	7b7b      	ldrb	r3, [r7, #13]
   15686:	4619      	mov	r1, r3
   15688:	2301      	movs	r3, #1
   1568a:	408b      	lsls	r3, r1
   1568c:	b2db      	uxtb	r3, r3
   1568e:	4313      	orrs	r3, r2
   15690:	b2db      	uxtb	r3, r3
   15692:	73bb      	strb	r3, [r7, #14]
   15694:	e00a      	b.n	156ac <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x78>
   15696:	7bba      	ldrb	r2, [r7, #14]
   15698:	7b7b      	ldrb	r3, [r7, #13]
   1569a:	4619      	mov	r1, r3
   1569c:	2301      	movs	r3, #1
   1569e:	408b      	lsls	r3, r1
   156a0:	b2db      	uxtb	r3, r3
   156a2:	43db      	mvns	r3, r3
   156a4:	b2db      	uxtb	r3, r3
   156a6:	4013      	ands	r3, r2
   156a8:	b2db      	uxtb	r3, r3
   156aa:	73bb      	strb	r3, [r7, #14]

	WriteRegister(regAddr,regValue);
   156ac:	7bba      	ldrb	r2, [r7, #14]
   156ae:	7bfb      	ldrb	r3, [r7, #15]
   156b0:	4619      	mov	r1, r3
   156b2:	6878      	ldr	r0, [r7, #4]
   156b4:	4b05      	ldr	r3, [pc, #20]	; (156cc <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x98>)
   156b6:	4798      	blx	r3
}
   156b8:	bf00      	nop
   156ba:	3714      	adds	r7, #20
   156bc:	46bd      	mov	sp, r7
   156be:	bd90      	pop	{r4, r7, pc}
   156c0:	000154ef 	.word	0x000154ef
   156c4:	000154d1 	.word	0x000154d1
   156c8:	00015521 	.word	0x00015521
   156cc:	00015561 	.word	0x00015561

000156d0 <_ZN14MCP23017_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23017_Class::pinMode(uint8_t p, uint8_t d) {
   156d0:	b590      	push	{r4, r7, lr}
   156d2:	b085      	sub	sp, #20
   156d4:	af02      	add	r7, sp, #8
   156d6:	6078      	str	r0, [r7, #4]
   156d8:	460b      	mov	r3, r1
   156da:	70fb      	strb	r3, [r7, #3]
   156dc:	4613      	mov	r3, r2
   156de:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   156e0:	78bb      	ldrb	r3, [r7, #2]
   156e2:	2b00      	cmp	r3, #0
   156e4:	bf0c      	ite	eq
   156e6:	2301      	moveq	r3, #1
   156e8:	2300      	movne	r3, #0
   156ea:	b2db      	uxtb	r3, r3
   156ec:	461a      	mov	r2, r3
   156ee:	78f9      	ldrb	r1, [r7, #3]
   156f0:	2301      	movs	r3, #1
   156f2:	9300      	str	r3, [sp, #0]
   156f4:	2300      	movs	r3, #0
   156f6:	6878      	ldr	r0, [r7, #4]
   156f8:	4c02      	ldr	r4, [pc, #8]	; (15704 <_ZN14MCP23017_Class7pinModeEhh+0x34>)
   156fa:	47a0      	blx	r4
}
   156fc:	bf00      	nop
   156fe:	370c      	adds	r7, #12
   15700:	46bd      	mov	sp, r7
   15702:	bd90      	pop	{r4, r7, pc}
   15704:	00015635 	.word	0x00015635

00015708 <_ZN14MCP23017_Class6pullUpEhh>:
	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	WriteRegister(regAddr,gpio);
}

void MCP23017_Class::pullUp(uint8_t p, uint8_t d) {
   15708:	b590      	push	{r4, r7, lr}
   1570a:	b085      	sub	sp, #20
   1570c:	af02      	add	r7, sp, #8
   1570e:	6078      	str	r0, [r7, #4]
   15710:	460b      	mov	r3, r1
   15712:	70fb      	strb	r3, [r7, #3]
   15714:	4613      	mov	r3, r2
   15716:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   15718:	78ba      	ldrb	r2, [r7, #2]
   1571a:	78f9      	ldrb	r1, [r7, #3]
   1571c:	230d      	movs	r3, #13
   1571e:	9300      	str	r3, [sp, #0]
   15720:	230c      	movs	r3, #12
   15722:	6878      	ldr	r0, [r7, #4]
   15724:	4c02      	ldr	r4, [pc, #8]	; (15730 <_ZN14MCP23017_Class6pullUpEhh+0x28>)
   15726:	47a0      	blx	r4
}
   15728:	bf00      	nop
   1572a:	370c      	adds	r7, #12
   1572c:	46bd      	mov	sp, r7
   1572e:	bd90      	pop	{r4, r7, pc}
   15730:	00015635 	.word	0x00015635

00015734 <_Z41__static_initialization_and_destruction_0ii>:
	{
		isOK=false;
	}
	return isOK;
}
   15734:	b580      	push	{r7, lr}
   15736:	b082      	sub	sp, #8
   15738:	af00      	add	r7, sp, #0
   1573a:	6078      	str	r0, [r7, #4]
   1573c:	6039      	str	r1, [r7, #0]
   1573e:	687b      	ldr	r3, [r7, #4]
   15740:	2b01      	cmp	r3, #1
   15742:	d115      	bne.n	15770 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   15744:	683b      	ldr	r3, [r7, #0]
   15746:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1574a:	4293      	cmp	r3, r2
   1574c:	d110      	bne.n	15770 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static I2C_Sync_Class  i2cStatic;
   1574e:	480a      	ldr	r0, [pc, #40]	; (15778 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15750:	4b0a      	ldr	r3, [pc, #40]	; (1577c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   15752:	4798      	blx	r3
   15754:	4a0a      	ldr	r2, [pc, #40]	; (15780 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15756:	490b      	ldr	r1, [pc, #44]	; (15784 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15758:	4807      	ldr	r0, [pc, #28]	; (15778 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1575a:	4b0b      	ldr	r3, [pc, #44]	; (15788 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1575c:	4798      	blx	r3
   1575e:	490b      	ldr	r1, [pc, #44]	; (1578c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   15760:	480b      	ldr	r0, [pc, #44]	; (15790 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15762:	4b0c      	ldr	r3, [pc, #48]	; (15794 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   15764:	4798      	blx	r3
   15766:	4a06      	ldr	r2, [pc, #24]	; (15780 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15768:	490b      	ldr	r1, [pc, #44]	; (15798 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1576a:	4809      	ldr	r0, [pc, #36]	; (15790 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1576c:	4b06      	ldr	r3, [pc, #24]	; (15788 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1576e:	4798      	blx	r3
   15770:	bf00      	nop
   15772:	3708      	adds	r7, #8
   15774:	46bd      	mov	sp, r7
   15776:	bd80      	pop	{r7, pc}
   15778:	200099d0 	.word	0x200099d0
   1577c:	00018d0d 	.word	0x00018d0d
   15780:	20000000 	.word	0x20000000
   15784:	00018d21 	.word	0x00018d21
   15788:	00019ab1 	.word	0x00019ab1
   1578c:	2000a6b4 	.word	0x2000a6b4
   15790:	200099e4 	.word	0x200099e4
   15794:	000153d1 	.word	0x000153d1
   15798:	00015415 	.word	0x00015415

0001579c <_GLOBAL__sub_I_ptrMCP23017Class>:
   1579c:	b580      	push	{r7, lr}
   1579e:	af00      	add	r7, sp, #0
   157a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   157a4:	2001      	movs	r0, #1
   157a6:	4b01      	ldr	r3, [pc, #4]	; (157ac <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
   157a8:	4798      	blx	r3
   157aa:	bd80      	pop	{r7, pc}
   157ac:	00015735 	.word	0x00015735

000157b0 <_ZL15Converter1Readyv>:


#include "TemperatureSensors_Class.h"
static TemperatureSensors_Class	*ptrTemperaturesClass;

static void Converter1Ready(void){
   157b0:	b580      	push	{r7, lr}
   157b2:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[0]=true;
   157b4:	4b08      	ldr	r3, [pc, #32]	; (157d8 <_ZL15Converter1Readyv+0x28>)
   157b6:	681b      	ldr	r3, [r3, #0]
   157b8:	2201      	movs	r2, #1
   157ba:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	ptrTemperaturesClass->SetModuleReady(0);
   157be:	4b06      	ldr	r3, [pc, #24]	; (157d8 <_ZL15Converter1Readyv+0x28>)
   157c0:	681b      	ldr	r3, [r3, #0]
   157c2:	2100      	movs	r1, #0
   157c4:	4618      	mov	r0, r3
   157c6:	4b05      	ldr	r3, [pc, #20]	; (157dc <_ZL15Converter1Readyv+0x2c>)
   157c8:	4798      	blx	r3
	ptrTemperaturesClass->converterTimeout=false;
   157ca:	4b03      	ldr	r3, [pc, #12]	; (157d8 <_ZL15Converter1Readyv+0x28>)
   157cc:	681b      	ldr	r3, [r3, #0]
   157ce:	2200      	movs	r2, #0
   157d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
   157d4:	bf00      	nop
   157d6:	bd80      	pop	{r7, pc}
   157d8:	20009a44 	.word	0x20009a44
   157dc:	00015b61 	.word	0x00015b61

000157e0 <_ZL15Converter2Readyv>:
static void Converter2Ready(void){
   157e0:	b580      	push	{r7, lr}
   157e2:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[1]=true;
   157e4:	4b08      	ldr	r3, [pc, #32]	; (15808 <_ZL15Converter2Readyv+0x28>)
   157e6:	681b      	ldr	r3, [r3, #0]
   157e8:	2201      	movs	r2, #1
   157ea:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	ptrTemperaturesClass->SetModuleReady(1);
   157ee:	4b06      	ldr	r3, [pc, #24]	; (15808 <_ZL15Converter2Readyv+0x28>)
   157f0:	681b      	ldr	r3, [r3, #0]
   157f2:	2101      	movs	r1, #1
   157f4:	4618      	mov	r0, r3
   157f6:	4b05      	ldr	r3, [pc, #20]	; (1580c <_ZL15Converter2Readyv+0x2c>)
   157f8:	4798      	blx	r3
	ptrTemperaturesClass->converterTimeout=false;
   157fa:	4b03      	ldr	r3, [pc, #12]	; (15808 <_ZL15Converter2Readyv+0x28>)
   157fc:	681b      	ldr	r3, [r3, #0]
   157fe:	2200      	movs	r2, #0
   15800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
   15804:	bf00      	nop
   15806:	bd80      	pop	{r7, pc}
   15808:	20009a44 	.word	0x20009a44
   1580c:	00015b61 	.word	0x00015b61

00015810 <_ZL17ConversionTimeoutPK10timer_task>:
static void	ConversionTimeout(const struct timer_task *const timer_task){
   15810:	b480      	push	{r7}
   15812:	b083      	sub	sp, #12
   15814:	af00      	add	r7, sp, #0
   15816:	6078      	str	r0, [r7, #4]
	ptrTemperaturesClass->converterTimeout=true;
   15818:	4b05      	ldr	r3, [pc, #20]	; (15830 <_ZL17ConversionTimeoutPK10timer_task+0x20>)
   1581a:	681b      	ldr	r3, [r3, #0]
   1581c:	2201      	movs	r2, #1
   1581e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	asm("nop");
   15822:	bf00      	nop
}
   15824:	bf00      	nop
   15826:	370c      	adds	r7, #12
   15828:	46bd      	mov	sp, r7
   1582a:	bc80      	pop	{r7}
   1582c:	4770      	bx	lr
   1582e:	bf00      	nop
   15830:	20009a44 	.word	0x20009a44

00015834 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
static LT_SPI	ltSPI;
// default constructor
TemperatureSensors_Class::TemperatureSensors_Class()
{
} //TemperatureSensors_Class
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   15834:	b5b0      	push	{r4, r5, r7, lr}
   15836:	b082      	sub	sp, #8
   15838:	af00      	add	r7, sp, #0
   1583a:	6078      	str	r0, [r7, #4]
   1583c:	6039      	str	r1, [r7, #0]
   1583e:	687b      	ldr	r3, [r7, #4]
   15840:	4618      	mov	r0, r3
   15842:	4b0f      	ldr	r3, [pc, #60]	; (15880 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x4c>)
   15844:	4798      	blx	r3
   15846:	687b      	ldr	r3, [r7, #4]
   15848:	3384      	adds	r3, #132	; 0x84
   1584a:	2401      	movs	r4, #1
   1584c:	461d      	mov	r5, r3
   1584e:	2c00      	cmp	r4, #0
   15850:	db05      	blt.n	1585e <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x2a>
   15852:	4628      	mov	r0, r5
   15854:	4b0b      	ldr	r3, [pc, #44]	; (15884 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x50>)
   15856:	4798      	blx	r3
   15858:	355c      	adds	r5, #92	; 0x5c
   1585a:	3c01      	subs	r4, #1
   1585c:	e7f7      	b.n	1584e <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x1a>
{
		spiLite=&ltSPI;
   1585e:	687b      	ldr	r3, [r7, #4]
   15860:	4a09      	ldr	r2, [pc, #36]	; (15888 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x54>)
   15862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		ptrTemperaturesClass=this;
   15866:	4a09      	ldr	r2, [pc, #36]	; (1588c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x58>)
   15868:	687b      	ldr	r3, [r7, #4]
   1586a:	6013      	str	r3, [r2, #0]
		SPIA=SPI_LTC;
   1586c:	687b      	ldr	r3, [r7, #4]
   1586e:	683a      	ldr	r2, [r7, #0]
   15870:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		
} //TemperatureSensors_Class
   15874:	687b      	ldr	r3, [r7, #4]
   15876:	4618      	mov	r0, r3
   15878:	3708      	adds	r7, #8
   1587a:	46bd      	mov	sp, r7
   1587c:	bdb0      	pop	{r4, r5, r7, pc}
   1587e:	bf00      	nop
   15880:	00018e9d 	.word	0x00018e9d
   15884:	00018e9d 	.word	0x00018e9d
   15888:	20009a48 	.word	0x20009a48
   1588c:	20009a44 	.word	0x20009a44

00015890 <_ZN24TemperatureSensors_ClassD1Ev>:

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   15890:	b590      	push	{r4, r7, lr}
   15892:	b083      	sub	sp, #12
   15894:	af00      	add	r7, sp, #0
   15896:	6078      	str	r0, [r7, #4]
   15898:	687b      	ldr	r3, [r7, #4]
   1589a:	3384      	adds	r3, #132	; 0x84
   1589c:	2b00      	cmp	r3, #0
   1589e:	d00c      	beq.n	158ba <_ZN24TemperatureSensors_ClassD1Ev+0x2a>
   158a0:	687b      	ldr	r3, [r7, #4]
   158a2:	3384      	adds	r3, #132	; 0x84
   158a4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
   158a8:	687b      	ldr	r3, [r7, #4]
   158aa:	3384      	adds	r3, #132	; 0x84
   158ac:	42a3      	cmp	r3, r4
   158ae:	d004      	beq.n	158ba <_ZN24TemperatureSensors_ClassD1Ev+0x2a>
   158b0:	3c5c      	subs	r4, #92	; 0x5c
   158b2:	4620      	mov	r0, r4
   158b4:	4b05      	ldr	r3, [pc, #20]	; (158cc <_ZN24TemperatureSensors_ClassD1Ev+0x3c>)
   158b6:	4798      	blx	r3
   158b8:	e7f6      	b.n	158a8 <_ZN24TemperatureSensors_ClassD1Ev+0x18>
   158ba:	687b      	ldr	r3, [r7, #4]
   158bc:	4618      	mov	r0, r3
   158be:	4b04      	ldr	r3, [pc, #16]	; (158d0 <_ZN24TemperatureSensors_ClassD1Ev+0x40>)
   158c0:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   158c2:	687b      	ldr	r3, [r7, #4]
   158c4:	4618      	mov	r0, r3
   158c6:	370c      	adds	r7, #12
   158c8:	46bd      	mov	sp, r7
   158ca:	bd90      	pop	{r4, r7, pc}
   158cc:	00018eb1 	.word	0x00018eb1
   158d0:	00018eb1 	.word	0x00018eb1

000158d4 <_ZN24TemperatureSensors_Class4InitEv>:

bool	TemperatureSensors_Class::Init(void){
   158d4:	b580      	push	{r7, lr}
   158d6:	b082      	sub	sp, #8
   158d8:	af00      	add	r7, sp, #0
   158da:	6078      	str	r0, [r7, #4]
	spiLite->set_descriptor(SPIA);
   158dc:	687b      	ldr	r3, [r7, #4]
   158de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   158e2:	687b      	ldr	r3, [r7, #4]
   158e4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   158e8:	4619      	mov	r1, r3
   158ea:	4610      	mov	r0, r2
   158ec:	4b1a      	ldr	r3, [pc, #104]	; (15958 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   158ee:	4798      	blx	r3
	spiLite->init();
   158f0:	687b      	ldr	r3, [r7, #4]
   158f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   158f6:	4618      	mov	r0, r3
   158f8:	4b18      	ldr	r3, [pc, #96]	; (1595c <_ZN24TemperatureSensors_Class4InitEv+0x88>)
   158fa:	4798      	blx	r3
	ptrTemperaturesClass=this;
   158fc:	4a18      	ldr	r2, [pc, #96]	; (15960 <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
   158fe:	687b      	ldr	r3, [r7, #4]
   15900:	6013      	str	r3, [r2, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   15902:	4918      	ldr	r1, [pc, #96]	; (15964 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   15904:	2028      	movs	r0, #40	; 0x28
   15906:	4b18      	ldr	r3, [pc, #96]	; (15968 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   15908:	4798      	blx	r3
	ext_irq_register(PIN_PB09, Converter2Ready);
   1590a:	4918      	ldr	r1, [pc, #96]	; (1596c <_ZN24TemperatureSensors_Class4InitEv+0x98>)
   1590c:	2029      	movs	r0, #41	; 0x29
   1590e:	4b16      	ldr	r3, [pc, #88]	; (15968 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   15910:	4798      	blx	r3
	InitModules();
   15912:	6878      	ldr	r0, [r7, #4]
   15914:	4b16      	ldr	r3, [pc, #88]	; (15970 <_ZN24TemperatureSensors_Class4InitEv+0x9c>)
   15916:	4798      	blx	r3
	currentModule=0; currentChannelIndex=0;
   15918:	687b      	ldr	r3, [r7, #4]
   1591a:	2200      	movs	r2, #0
   1591c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
   15920:	687b      	ldr	r3, [r7, #4]
   15922:	2200      	movs	r2, #0
   15924:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	isOK=(module[0].isOK)&(module[1].isOK);
   15928:	687b      	ldr	r3, [r7, #4]
   1592a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   1592e:	461a      	mov	r2, r3
   15930:	687b      	ldr	r3, [r7, #4]
   15932:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
   15936:	4013      	ands	r3, r2
   15938:	2b00      	cmp	r3, #0
   1593a:	bf14      	ite	ne
   1593c:	2301      	movne	r3, #1
   1593e:	2300      	moveq	r3, #0
   15940:	b2da      	uxtb	r2, r3
   15942:	687b      	ldr	r3, [r7, #4]
   15944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return isOK;
   15948:	687b      	ldr	r3, [r7, #4]
   1594a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   1594e:	b2db      	uxtb	r3, r3
}
   15950:	4618      	mov	r0, r3
   15952:	3708      	adds	r7, #8
   15954:	46bd      	mov	sp, r7
   15956:	bd80      	pop	{r7, pc}
   15958:	000196e9 	.word	0x000196e9
   1595c:	0001968d 	.word	0x0001968d
   15960:	20009a44 	.word	0x20009a44
   15964:	000157b1 	.word	0x000157b1
   15968:	00006545 	.word	0x00006545
   1596c:	000157e1 	.word	0x000157e1
   15970:	00015975 	.word	0x00015975

00015974 <_ZN24TemperatureSensors_Class11InitModulesEv>:

bool TemperatureSensors_Class::InitModules(void){
   15974:	b580      	push	{r7, lr}
   15976:	b084      	sub	sp, #16
   15978:	af00      	add	r7, sp, #0
   1597a:	6078      	str	r0, [r7, #4]
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2;
   1597c:	687b      	ldr	r3, [r7, #4]
   1597e:	223d      	movs	r2, #61	; 0x3d
   15980:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   15984:	687b      	ldr	r3, [r7, #4]
   15986:	221b      	movs	r2, #27
   15988:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   1598c:	2300      	movs	r3, #0
   1598e:	73fb      	strb	r3, [r7, #15]
   15990:	7bfb      	ldrb	r3, [r7, #15]
   15992:	2b01      	cmp	r3, #1
   15994:	dc17      	bgt.n	159c6 <_ZN24TemperatureSensors_Class11InitModulesEv+0x52>
	{
		module[ii].Init(csPins[ii],spiLite);
   15996:	7bfb      	ldrb	r3, [r7, #15]
   15998:	225c      	movs	r2, #92	; 0x5c
   1599a:	fb02 f303 	mul.w	r3, r2, r3
   1599e:	3380      	adds	r3, #128	; 0x80
   159a0:	687a      	ldr	r2, [r7, #4]
   159a2:	4413      	add	r3, r2
   159a4:	1d18      	adds	r0, r3, #4
   159a6:	7bfb      	ldrb	r3, [r7, #15]
   159a8:	687a      	ldr	r2, [r7, #4]
   159aa:	334e      	adds	r3, #78	; 0x4e
   159ac:	009b      	lsls	r3, r3, #2
   159ae:	4413      	add	r3, r2
   159b0:	6859      	ldr	r1, [r3, #4]
   159b2:	687b      	ldr	r3, [r7, #4]
   159b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   159b8:	461a      	mov	r2, r3
   159ba:	4b05      	ldr	r3, [pc, #20]	; (159d0 <_ZN24TemperatureSensors_Class11InitModulesEv+0x5c>)
   159bc:	4798      	blx	r3
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   159be:	7bfb      	ldrb	r3, [r7, #15]
   159c0:	3301      	adds	r3, #1
   159c2:	73fb      	strb	r3, [r7, #15]
   159c4:	e7e4      	b.n	15990 <_ZN24TemperatureSensors_Class11InitModulesEv+0x1c>
	}

}
   159c6:	bf00      	nop
   159c8:	4618      	mov	r0, r3
   159ca:	3710      	adds	r7, #16
   159cc:	46bd      	mov	sp, r7
   159ce:	bd80      	pop	{r7, pc}
   159d0:	00018ec5 	.word	0x00018ec5

000159d4 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   159d4:	b580      	push	{r7, lr}
   159d6:	b082      	sub	sp, #8
   159d8:	af00      	add	r7, sp, #0
   159da:	6078      	str	r0, [r7, #4]
	converterTimeout=false;
   159dc:	687b      	ldr	r3, [r7, #4]
   159de:	2200      	movs	r2, #0
   159e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	converterReady[currentModule]=false;
   159e4:	687b      	ldr	r3, [r7, #4]
   159e6:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   159ea:	461a      	mov	r2, r3
   159ec:	687b      	ldr	r3, [r7, #4]
   159ee:	4413      	add	r3, r2
   159f0:	2200      	movs	r2, #0
   159f2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   159f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   159fa:	490d      	ldr	r1, [pc, #52]	; (15a30 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x5c>)
   159fc:	480d      	ldr	r0, [pc, #52]	; (15a34 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x60>)
   159fe:	4b0e      	ldr	r3, [pc, #56]	; (15a38 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x64>)
   15a00:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   15a02:	687b      	ldr	r3, [r7, #4]
   15a04:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15a08:	461a      	mov	r2, r3
   15a0a:	235c      	movs	r3, #92	; 0x5c
   15a0c:	fb03 f302 	mul.w	r3, r3, r2
   15a10:	3380      	adds	r3, #128	; 0x80
   15a12:	687a      	ldr	r2, [r7, #4]
   15a14:	4413      	add	r3, r2
   15a16:	1d1a      	adds	r2, r3, #4
   15a18:	687b      	ldr	r3, [r7, #4]
   15a1a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15a1e:	4619      	mov	r1, r3
   15a20:	4610      	mov	r0, r2
   15a22:	4b06      	ldr	r3, [pc, #24]	; (15a3c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x68>)
   15a24:	4798      	blx	r3
	
}
   15a26:	bf00      	nop
   15a28:	3708      	adds	r7, #8
   15a2a:	46bd      	mov	sp, r7
   15a2c:	bd80      	pop	{r7, pc}
   15a2e:	bf00      	nop
   15a30:	00015811 	.word	0x00015811
   15a34:	2000a0b0 	.word	0x2000a0b0
   15a38:	0001784d 	.word	0x0001784d
   15a3c:	00018fb1 	.word	0x00018fb1

00015a40 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   15a40:	b590      	push	{r4, r7, lr}
   15a42:	b083      	sub	sp, #12
   15a44:	af00      	add	r7, sp, #0
   15a46:	6078      	str	r0, [r7, #4]
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   15a48:	4934      	ldr	r1, [pc, #208]	; (15b1c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xdc>)
   15a4a:	4835      	ldr	r0, [pc, #212]	; (15b20 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe0>)
   15a4c:	4b35      	ldr	r3, [pc, #212]	; (15b24 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe4>)
   15a4e:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   15a50:	687b      	ldr	r3, [r7, #4]
   15a52:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15a56:	461a      	mov	r2, r3
   15a58:	235c      	movs	r3, #92	; 0x5c
   15a5a:	fb03 f302 	mul.w	r3, r3, r2
   15a5e:	3380      	adds	r3, #128	; 0x80
   15a60:	687a      	ldr	r2, [r7, #4]
   15a62:	4413      	add	r3, r2
   15a64:	1d1a      	adds	r2, r3, #4
   15a66:	687b      	ldr	r3, [r7, #4]
   15a68:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15a6c:	4619      	mov	r1, r3
   15a6e:	4610      	mov	r0, r2
   15a70:	4b2d      	ldr	r3, [pc, #180]	; (15b28 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe8>)
   15a72:	4798      	blx	r3
   15a74:	4602      	mov	r2, r0
   15a76:	687b      	ldr	r3, [r7, #4]
   15a78:	67da      	str	r2, [r3, #124]	; 0x7c
	faultData=module[currentModule].fault_data;
   15a7a:	687b      	ldr	r3, [r7, #4]
   15a7c:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15a80:	4619      	mov	r1, r3
   15a82:	687a      	ldr	r2, [r7, #4]
   15a84:	235c      	movs	r3, #92	; 0x5c
   15a86:	fb03 f301 	mul.w	r3, r3, r1
   15a8a:	4413      	add	r3, r2
   15a8c:	338a      	adds	r3, #138	; 0x8a
   15a8e:	781a      	ldrb	r2, [r3, #0]
   15a90:	687b      	ldr	r3, [r7, #4]
   15a92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		if (faultData==VALID_TEMPERATURE)
   15a96:	687b      	ldr	r3, [r7, #4]
   15a98:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   15a9c:	2b01      	cmp	r3, #1
   15a9e:	d112      	bne.n	15ac6 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x86>
		{
			values[currentModule][currentChannelIndex]=lastValue;
   15aa0:	687b      	ldr	r3, [r7, #4]
   15aa2:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15aa6:	4618      	mov	r0, r3
   15aa8:	687b      	ldr	r3, [r7, #4]
   15aaa:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15aae:	461c      	mov	r4, r3
   15ab0:	687b      	ldr	r3, [r7, #4]
   15ab2:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
   15ab4:	687a      	ldr	r2, [r7, #4]
   15ab6:	4603      	mov	r3, r0
   15ab8:	005b      	lsls	r3, r3, #1
   15aba:	4403      	add	r3, r0
   15abc:	4423      	add	r3, r4
   15abe:	3318      	adds	r3, #24
   15ac0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   15ac4:	e002      	b.n	15acc <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>
		}
		else
		{
			lastValue=-999;
   15ac6:	687b      	ldr	r3, [r7, #4]
   15ac8:	4a18      	ldr	r2, [pc, #96]	; (15b2c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xec>)
   15aca:	67da      	str	r2, [r3, #124]	; 0x7c
		}
	
	currentChannelIndex++;
   15acc:	687b      	ldr	r3, [r7, #4]
   15ace:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15ad2:	3301      	adds	r3, #1
   15ad4:	b2da      	uxtb	r2, r3
   15ad6:	687b      	ldr	r3, [r7, #4]
   15ad8:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   15adc:	687b      	ldr	r3, [r7, #4]
   15ade:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15ae2:	2b03      	cmp	r3, #3
   15ae4:	d114      	bne.n	15b10 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xd0>
	{
		currentChannelIndex=0;
   15ae6:	687b      	ldr	r3, [r7, #4]
   15ae8:	2200      	movs	r2, #0
   15aea:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
		currentModule++;
   15aee:	687b      	ldr	r3, [r7, #4]
   15af0:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15af4:	3301      	adds	r3, #1
   15af6:	b2da      	uxtb	r2, r3
   15af8:	687b      	ldr	r3, [r7, #4]
   15afa:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		if (currentModule==NUMBER_LTC2983_MODULES)
   15afe:	687b      	ldr	r3, [r7, #4]
   15b00:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15b04:	2b02      	cmp	r3, #2
   15b06:	d103      	bne.n	15b10 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xd0>
		{
			currentModule=0;
   15b08:	687b      	ldr	r3, [r7, #4]
   15b0a:	2200      	movs	r2, #0
   15b0c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		}
	} 
	else
	{
	}
	return lastValue;
   15b10:	687b      	ldr	r3, [r7, #4]
   15b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
   15b14:	4618      	mov	r0, r3
   15b16:	370c      	adds	r7, #12
   15b18:	46bd      	mov	sp, r7
   15b1a:	bd90      	pop	{r4, r7, pc}
   15b1c:	00015811 	.word	0x00015811
   15b20:	2000a0b0 	.word	0x2000a0b0
   15b24:	000177dd 	.word	0x000177dd
   15b28:	000190f9 	.word	0x000190f9
   15b2c:	c479c000 	.word	0xc479c000

00015b30 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
bool	TemperatureSensors_Class::IsConversionFinished(){
   15b30:	b480      	push	{r7}
   15b32:	b083      	sub	sp, #12
   15b34:	af00      	add	r7, sp, #0
   15b36:	6078      	str	r0, [r7, #4]
	return converterReady[0]&converterReady[1];
   15b38:	687b      	ldr	r3, [r7, #4]
   15b3a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
   15b3e:	b2db      	uxtb	r3, r3
   15b40:	461a      	mov	r2, r3
   15b42:	687b      	ldr	r3, [r7, #4]
   15b44:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
   15b48:	b2db      	uxtb	r3, r3
   15b4a:	4013      	ands	r3, r2
   15b4c:	2b00      	cmp	r3, #0
   15b4e:	bf14      	ite	ne
   15b50:	2301      	movne	r3, #1
   15b52:	2300      	moveq	r3, #0
   15b54:	b2db      	uxtb	r3, r3
}
   15b56:	4618      	mov	r0, r3
   15b58:	370c      	adds	r7, #12
   15b5a:	46bd      	mov	sp, r7
   15b5c:	bc80      	pop	{r7}
   15b5e:	4770      	bx	lr

00015b60 <_ZN24TemperatureSensors_Class14SetModuleReadyEh>:
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
   15b60:	b480      	push	{r7}
   15b62:	b083      	sub	sp, #12
   15b64:	af00      	add	r7, sp, #0
   15b66:	6078      	str	r0, [r7, #4]
   15b68:	460b      	mov	r3, r1
   15b6a:	70fb      	strb	r3, [r7, #3]
	module[m].ready=true;
   15b6c:	78fb      	ldrb	r3, [r7, #3]
   15b6e:	687a      	ldr	r2, [r7, #4]
   15b70:	215c      	movs	r1, #92	; 0x5c
   15b72:	fb01 f303 	mul.w	r3, r1, r3
   15b76:	4413      	add	r3, r2
   15b78:	3384      	adds	r3, #132	; 0x84
   15b7a:	2201      	movs	r2, #1
   15b7c:	701a      	strb	r2, [r3, #0]
	return module[m].ready;
   15b7e:	78fb      	ldrb	r3, [r7, #3]
   15b80:	687a      	ldr	r2, [r7, #4]
   15b82:	215c      	movs	r1, #92	; 0x5c
   15b84:	fb01 f303 	mul.w	r3, r1, r3
   15b88:	4413      	add	r3, r2
   15b8a:	3384      	adds	r3, #132	; 0x84
   15b8c:	781b      	ldrb	r3, [r3, #0]
   15b8e:	b2db      	uxtb	r3, r3
}
   15b90:	4618      	mov	r0, r3
   15b92:	370c      	adds	r7, #12
   15b94:	46bd      	mov	sp, r7
   15b96:	bc80      	pop	{r7}
   15b98:	4770      	bx	lr
	...

00015b9c <_Z41__static_initialization_and_destruction_0ii>:

TemperatureSensors_Class temperatures(&SPI_TEMP);
   15b9c:	b580      	push	{r7, lr}
   15b9e:	b082      	sub	sp, #8
   15ba0:	af00      	add	r7, sp, #0
   15ba2:	6078      	str	r0, [r7, #4]
   15ba4:	6039      	str	r1, [r7, #0]
   15ba6:	687b      	ldr	r3, [r7, #4]
   15ba8:	2b01      	cmp	r3, #1
   15baa:	d115      	bne.n	15bd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   15bac:	683b      	ldr	r3, [r7, #0]
   15bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15bb2:	4293      	cmp	r3, r2
   15bb4:	d110      	bne.n	15bd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static LT_SPI	ltSPI;
   15bb6:	480a      	ldr	r0, [pc, #40]	; (15be0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15bb8:	4b0a      	ldr	r3, [pc, #40]	; (15be4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   15bba:	4798      	blx	r3
   15bbc:	4a0a      	ldr	r2, [pc, #40]	; (15be8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15bbe:	490b      	ldr	r1, [pc, #44]	; (15bec <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15bc0:	4807      	ldr	r0, [pc, #28]	; (15be0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15bc2:	4b0b      	ldr	r3, [pc, #44]	; (15bf0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15bc4:	4798      	blx	r3
TemperatureSensors_Class temperatures(&SPI_TEMP);
   15bc6:	490b      	ldr	r1, [pc, #44]	; (15bf4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   15bc8:	480b      	ldr	r0, [pc, #44]	; (15bf8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15bca:	4b0c      	ldr	r3, [pc, #48]	; (15bfc <_Z41__static_initialization_and_destruction_0ii+0x60>)
   15bcc:	4798      	blx	r3
   15bce:	4a06      	ldr	r2, [pc, #24]	; (15be8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15bd0:	490b      	ldr	r1, [pc, #44]	; (15c00 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   15bd2:	4809      	ldr	r0, [pc, #36]	; (15bf8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15bd4:	4b06      	ldr	r3, [pc, #24]	; (15bf0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15bd6:	4798      	blx	r3
   15bd8:	bf00      	nop
   15bda:	3708      	adds	r7, #8
   15bdc:	46bd      	mov	sp, r7
   15bde:	bd80      	pop	{r7, pc}
   15be0:	20009a48 	.word	0x20009a48
   15be4:	00019651 	.word	0x00019651
   15be8:	20000000 	.word	0x20000000
   15bec:	00019679 	.word	0x00019679
   15bf0:	00019ab1 	.word	0x00019ab1
   15bf4:	2000a5b4 	.word	0x2000a5b4
   15bf8:	20009a5c 	.word	0x20009a5c
   15bfc:	00015835 	.word	0x00015835
   15c00:	00015891 	.word	0x00015891

00015c04 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
   15c04:	b580      	push	{r7, lr}
   15c06:	af00      	add	r7, sp, #0
   15c08:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15c0c:	2001      	movs	r0, #1
   15c0e:	4b01      	ldr	r3, [pc, #4]	; (15c14 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x10>)
   15c10:	4798      	blx	r3
   15c12:	bd80      	pop	{r7, pc}
   15c14:	00015b9d 	.word	0x00015b9d

00015c18 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   15c18:	b480      	push	{r7}
   15c1a:	b083      	sub	sp, #12
   15c1c:	af00      	add	r7, sp, #0
   15c1e:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   15c20:	4a04      	ldr	r2, [pc, #16]	; (15c34 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   15c22:	687b      	ldr	r3, [r7, #4]
   15c24:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   15c26:	687b      	ldr	r3, [r7, #4]
   15c28:	4618      	mov	r0, r3
   15c2a:	370c      	adds	r7, #12
   15c2c:	46bd      	mov	sp, r7
   15c2e:	bc80      	pop	{r7}
   15c30:	4770      	bx	lr
   15c32:	bf00      	nop
   15c34:	20009bac 	.word	0x20009bac

00015c38 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   15c38:	b480      	push	{r7}
   15c3a:	b083      	sub	sp, #12
   15c3c:	af00      	add	r7, sp, #0
   15c3e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   15c40:	687b      	ldr	r3, [r7, #4]
   15c42:	4618      	mov	r0, r3
   15c44:	370c      	adds	r7, #12
   15c46:	46bd      	mov	sp, r7
   15c48:	bc80      	pop	{r7}
   15c4a:	4770      	bx	lr

00015c4c <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   15c4c:	b580      	push	{r7, lr}
   15c4e:	b082      	sub	sp, #8
   15c50:	af00      	add	r7, sp, #0
   15c52:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   15c54:	687b      	ldr	r3, [r7, #4]
   15c56:	68da      	ldr	r2, [r3, #12]
   15c58:	687b      	ldr	r3, [r7, #4]
   15c5a:	3310      	adds	r3, #16
   15c5c:	4619      	mov	r1, r3
   15c5e:	4610      	mov	r0, r2
   15c60:	4b09      	ldr	r3, [pc, #36]	; (15c88 <_ZN13SPI_Syn_Class4initEv+0x3c>)
   15c62:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   15c64:	687b      	ldr	r3, [r7, #4]
   15c66:	68db      	ldr	r3, [r3, #12]
   15c68:	4618      	mov	r0, r3
   15c6a:	4b08      	ldr	r3, [pc, #32]	; (15c8c <_ZN13SPI_Syn_Class4initEv+0x40>)
   15c6c:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   15c6e:	687b      	ldr	r3, [r7, #4]
   15c70:	4a07      	ldr	r2, [pc, #28]	; (15c90 <_ZN13SPI_Syn_Class4initEv+0x44>)
   15c72:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   15c74:	687b      	ldr	r3, [r7, #4]
   15c76:	4a06      	ldr	r2, [pc, #24]	; (15c90 <_ZN13SPI_Syn_Class4initEv+0x44>)
   15c78:	609a      	str	r2, [r3, #8]
	ready=true;
   15c7a:	687b      	ldr	r3, [r7, #4]
   15c7c:	2201      	movs	r2, #1
   15c7e:	701a      	strb	r2, [r3, #0]
	
}
   15c80:	bf00      	nop
   15c82:	3708      	adds	r7, #8
   15c84:	46bd      	mov	sp, r7
   15c86:	bd80      	pop	{r7, pc}
   15c88:	00006f99 	.word	0x00006f99
   15c8c:	00006e0d 	.word	0x00006e0d
   15c90:	20009bb0 	.word	0x20009bb0

00015c94 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   15c94:	b480      	push	{r7}
   15c96:	b083      	sub	sp, #12
   15c98:	af00      	add	r7, sp, #0
   15c9a:	6078      	str	r0, [r7, #4]
   15c9c:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   15c9e:	4a05      	ldr	r2, [pc, #20]	; (15cb4 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   15ca0:	687b      	ldr	r3, [r7, #4]
   15ca2:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   15ca4:	687b      	ldr	r3, [r7, #4]
   15ca6:	683a      	ldr	r2, [r7, #0]
   15ca8:	60da      	str	r2, [r3, #12]
}
   15caa:	bf00      	nop
   15cac:	370c      	adds	r7, #12
   15cae:	46bd      	mov	sp, r7
   15cb0:	bc80      	pop	{r7}
   15cb2:	4770      	bx	lr
   15cb4:	20009bac 	.word	0x20009bac

00015cb8 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   15cb8:	b580      	push	{r7, lr}
   15cba:	b082      	sub	sp, #8
   15cbc:	af00      	add	r7, sp, #0
   15cbe:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   15cc0:	687b      	ldr	r3, [r7, #4]
   15cc2:	68da      	ldr	r2, [r3, #12]
   15cc4:	687b      	ldr	r3, [r7, #4]
   15cc6:	3310      	adds	r3, #16
   15cc8:	4619      	mov	r1, r3
   15cca:	4610      	mov	r0, r2
   15ccc:	4b07      	ldr	r3, [pc, #28]	; (15cec <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   15cce:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   15cd0:	687b      	ldr	r3, [r7, #4]
   15cd2:	68db      	ldr	r3, [r3, #12]
   15cd4:	4618      	mov	r0, r3
   15cd6:	4b06      	ldr	r3, [pc, #24]	; (15cf0 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   15cd8:	4798      	blx	r3
	ready=true;
   15cda:	687b      	ldr	r3, [r7, #4]
   15cdc:	2201      	movs	r2, #1
   15cde:	701a      	strb	r2, [r3, #0]
	return 0;
   15ce0:	2300      	movs	r3, #0
}
   15ce2:	4618      	mov	r0, r3
   15ce4:	3708      	adds	r7, #8
   15ce6:	46bd      	mov	sp, r7
   15ce8:	bd80      	pop	{r7, pc}
   15cea:	bf00      	nop
   15cec:	00006f99 	.word	0x00006f99
   15cf0:	00006e0d 	.word	0x00006e0d

00015cf4 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   15cf4:	b580      	push	{r7, lr}
   15cf6:	b086      	sub	sp, #24
   15cf8:	af00      	add	r7, sp, #0
   15cfa:	60f8      	str	r0, [r7, #12]
   15cfc:	60b9      	str	r1, [r7, #8]
   15cfe:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   15d00:	68fb      	ldr	r3, [r7, #12]
   15d02:	2201      	movs	r2, #1
   15d04:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   15d06:	68fb      	ldr	r3, [r7, #12]
   15d08:	691b      	ldr	r3, [r3, #16]
   15d0a:	687a      	ldr	r2, [r7, #4]
   15d0c:	b292      	uxth	r2, r2
   15d0e:	68b9      	ldr	r1, [r7, #8]
   15d10:	4618      	mov	r0, r3
   15d12:	4b08      	ldr	r3, [pc, #32]	; (15d34 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   15d14:	4798      	blx	r3
   15d16:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   15d18:	697b      	ldr	r3, [r7, #20]
   15d1a:	2b00      	cmp	r3, #0
   15d1c:	bf14      	ite	ne
   15d1e:	2301      	movne	r3, #1
   15d20:	2300      	moveq	r3, #0
   15d22:	b2da      	uxtb	r2, r3
   15d24:	68fb      	ldr	r3, [r7, #12]
   15d26:	761a      	strb	r2, [r3, #24]
	 return w;
   15d28:	697b      	ldr	r3, [r7, #20]
	
}
   15d2a:	4618      	mov	r0, r3
   15d2c:	3718      	adds	r7, #24
   15d2e:	46bd      	mov	sp, r7
   15d30:	bd80      	pop	{r7, pc}
   15d32:	bf00      	nop
   15d34:	00019a11 	.word	0x00019a11

00015d38 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   15d38:	b580      	push	{r7, lr}
   15d3a:	b086      	sub	sp, #24
   15d3c:	af00      	add	r7, sp, #0
   15d3e:	60f8      	str	r0, [r7, #12]
   15d40:	60b9      	str	r1, [r7, #8]
   15d42:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   15d44:	68fb      	ldr	r3, [r7, #12]
   15d46:	2201      	movs	r2, #1
   15d48:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   15d4a:	68fb      	ldr	r3, [r7, #12]
   15d4c:	691b      	ldr	r3, [r3, #16]
   15d4e:	687a      	ldr	r2, [r7, #4]
   15d50:	b292      	uxth	r2, r2
   15d52:	68b9      	ldr	r1, [r7, #8]
   15d54:	4618      	mov	r0, r3
   15d56:	4b08      	ldr	r3, [pc, #32]	; (15d78 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   15d58:	4798      	blx	r3
   15d5a:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   15d5c:	697b      	ldr	r3, [r7, #20]
   15d5e:	2b00      	cmp	r3, #0
   15d60:	bf14      	ite	ne
   15d62:	2301      	movne	r3, #1
   15d64:	2300      	moveq	r3, #0
   15d66:	b2da      	uxtb	r2, r3
   15d68:	68fb      	ldr	r3, [r7, #12]
   15d6a:	765a      	strb	r2, [r3, #25]
	return  r;
   15d6c:	697b      	ldr	r3, [r7, #20]
}
   15d6e:	4618      	mov	r0, r3
   15d70:	3718      	adds	r7, #24
   15d72:	46bd      	mov	sp, r7
   15d74:	bd80      	pop	{r7, pc}
   15d76:	bf00      	nop
   15d78:	00019a61 	.word	0x00019a61

00015d7c <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   15d7c:	b580      	push	{r7, lr}
   15d7e:	b082      	sub	sp, #8
   15d80:	af00      	add	r7, sp, #0
   15d82:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   15d84:	687b      	ldr	r3, [r7, #4]
   15d86:	68db      	ldr	r3, [r3, #12]
   15d88:	4618      	mov	r0, r3
   15d8a:	4b03      	ldr	r3, [pc, #12]	; (15d98 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   15d8c:	4798      	blx	r3
	
}
   15d8e:	bf00      	nop
   15d90:	3708      	adds	r7, #8
   15d92:	46bd      	mov	sp, r7
   15d94:	bd80      	pop	{r7, pc}
   15d96:	bf00      	nop
   15d98:	00006e49 	.word	0x00006e49

00015d9c <_ZN13SPI_Syn_Class10IsSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::IsSPIReady(void){
   15d9c:	b480      	push	{r7}
   15d9e:	b083      	sub	sp, #12
   15da0:	af00      	add	r7, sp, #0
   15da2:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   15da4:	687b      	ldr	r3, [r7, #4]
   15da6:	2201      	movs	r2, #1
   15da8:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   15daa:	687b      	ldr	r3, [r7, #4]
   15dac:	781b      	ldrb	r3, [r3, #0]
   15dae:	b2db      	uxtb	r3, r3
   15db0:	2b00      	cmp	r3, #0
   15db2:	d001      	beq.n	15db8 <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1c>
	{
		
		return true;
   15db4:	2301      	movs	r3, #1
   15db6:	e000      	b.n	15dba <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1e>
	} 
	else
	{
		return false;
   15db8:	2300      	movs	r3, #0
	}
	return ready;
	
}
   15dba:	4618      	mov	r0, r3
   15dbc:	370c      	adds	r7, #12
   15dbe:	46bd      	mov	sp, r7
   15dc0:	bc80      	pop	{r7}
   15dc2:	4770      	bx	lr

00015dc4 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
   15dc4:	b480      	push	{r7}
   15dc6:	b083      	sub	sp, #12
   15dc8:	af00      	add	r7, sp, #0
   15dca:	6078      	str	r0, [r7, #4]
   15dcc:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=i2c;
   15dce:	687b      	ldr	r3, [r7, #4]
   15dd0:	683a      	ldr	r2, [r7, #0]
   15dd2:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
   15dd4:	4a05      	ldr	r2, [pc, #20]	; (15dec <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x28>)
   15dd6:	687b      	ldr	r3, [r7, #4]
   15dd8:	6013      	str	r3, [r2, #0]
	i2ca=&i2cAsync;
   15dda:	687b      	ldr	r3, [r7, #4]
   15ddc:	4a04      	ldr	r2, [pc, #16]	; (15df0 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
   15dde:	609a      	str	r2, [r3, #8]
} //AT24MAC_Class
   15de0:	687b      	ldr	r3, [r7, #4]
   15de2:	4618      	mov	r0, r3
   15de4:	370c      	adds	r7, #12
   15de6:	46bd      	mov	sp, r7
   15de8:	bc80      	pop	{r7}
   15dea:	4770      	bx	lr
   15dec:	20009bf0 	.word	0x20009bf0
   15df0:	20009bf8 	.word	0x20009bf8

00015df4 <_ZN13AT24MAC_ClassD1Ev>:


// default destructor
AT24MAC_Class::~AT24MAC_Class()
   15df4:	b480      	push	{r7}
   15df6:	b083      	sub	sp, #12
   15df8:	af00      	add	r7, sp, #0
   15dfa:	6078      	str	r0, [r7, #4]
{
} //~AT24MAC_Class
   15dfc:	687b      	ldr	r3, [r7, #4]
   15dfe:	4618      	mov	r0, r3
   15e00:	370c      	adds	r7, #12
   15e02:	46bd      	mov	sp, r7
   15e04:	bc80      	pop	{r7}
   15e06:	4770      	bx	lr

00015e08 <_ZN13AT24MAC_Class4InitEv>:



bool AT24MAC_Class::Init(void){
   15e08:	b580      	push	{r7, lr}
   15e0a:	b082      	sub	sp, #8
   15e0c:	af00      	add	r7, sp, #0
   15e0e:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
   15e10:	2156      	movs	r1, #86	; 0x56
   15e12:	6878      	ldr	r0, [r7, #4]
   15e14:	4b04      	ldr	r3, [pc, #16]	; (15e28 <_ZN13AT24MAC_Class4InitEv+0x20>)
   15e16:	4798      	blx	r3
	return SelfTest();
   15e18:	6878      	ldr	r0, [r7, #4]
   15e1a:	4b04      	ldr	r3, [pc, #16]	; (15e2c <_ZN13AT24MAC_Class4InitEv+0x24>)
   15e1c:	4798      	blx	r3
   15e1e:	4603      	mov	r3, r0
}
   15e20:	4618      	mov	r0, r3
   15e22:	3708      	adds	r7, #8
   15e24:	46bd      	mov	sp, r7
   15e26:	bd80      	pop	{r7, pc}
   15e28:	00015e31 	.word	0x00015e31
   15e2c:	000160e1 	.word	0x000160e1

00015e30 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
   15e30:	b580      	push	{r7, lr}
   15e32:	b082      	sub	sp, #8
   15e34:	af00      	add	r7, sp, #0
   15e36:	6078      	str	r0, [r7, #4]
   15e38:	460b      	mov	r3, r1
   15e3a:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   15e3c:	687b      	ldr	r3, [r7, #4]
   15e3e:	78fa      	ldrb	r2, [r7, #3]
   15e40:	731a      	strb	r2, [r3, #12]
	i2ca->Set_descriptor(ptrI2CDescr);
   15e42:	687b      	ldr	r3, [r7, #4]
   15e44:	689a      	ldr	r2, [r3, #8]
   15e46:	687b      	ldr	r3, [r7, #4]
   15e48:	685b      	ldr	r3, [r3, #4]
   15e4a:	4619      	mov	r1, r3
   15e4c:	4610      	mov	r0, r2
   15e4e:	4b09      	ldr	r3, [pc, #36]	; (15e74 <_ZN13AT24MAC_Class4InitEh+0x44>)
   15e50:	4798      	blx	r3
	isReady=i2ca->Init(addr)==0;
   15e52:	687b      	ldr	r3, [r7, #4]
   15e54:	689b      	ldr	r3, [r3, #8]
   15e56:	78fa      	ldrb	r2, [r7, #3]
   15e58:	4611      	mov	r1, r2
   15e5a:	4618      	mov	r0, r3
   15e5c:	4b06      	ldr	r3, [pc, #24]	; (15e78 <_ZN13AT24MAC_Class4InitEh+0x48>)
   15e5e:	4798      	blx	r3
   15e60:	4603      	mov	r3, r0
   15e62:	f083 0301 	eor.w	r3, r3, #1
   15e66:	b2da      	uxtb	r2, r3
   15e68:	687b      	ldr	r3, [r7, #4]
   15e6a:	701a      	strb	r2, [r3, #0]
}
   15e6c:	bf00      	nop
   15e6e:	3708      	adds	r7, #8
   15e70:	46bd      	mov	sp, r7
   15e72:	bd80      	pop	{r7, pc}
   15e74:	000189cd 	.word	0x000189cd
   15e78:	00018ad5 	.word	0x00018ad5

00015e7c <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
	array[1]=value;
	uint32_t w= i2ca->Write(array,2);
	while(!i2ca->txReady);
	return	w;
}
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
   15e7c:	b580      	push	{r7, lr}
   15e7e:	b08c      	sub	sp, #48	; 0x30
   15e80:	af00      	add	r7, sp, #0
   15e82:	60f8      	str	r0, [r7, #12]
   15e84:	60b9      	str	r1, [r7, #8]
   15e86:	4611      	mov	r1, r2
   15e88:	461a      	mov	r2, r3
   15e8a:	460b      	mov	r3, r1
   15e8c:	71fb      	strb	r3, [r7, #7]
   15e8e:	4613      	mov	r3, r2
   15e90:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	uint8_t i;
	uint8_t	*ptr=p;
   15e92:	68bb      	ldr	r3, [r7, #8]
   15e94:	627b      	str	r3, [r7, #36]	; 0x24
// 		delay_us(1500);
// 		p++;
// 	
// 		while(!AcknolledgePolling());
// 	}
	isReady=false;
   15e96:	68fb      	ldr	r3, [r7, #12]
   15e98:	2200      	movs	r2, #0
   15e9a:	701a      	strb	r2, [r3, #0]
	uint8_t array[1+AT24MAC_BUFFER_SIZE],value,size0,addr0=addr;
   15e9c:	79fb      	ldrb	r3, [r7, #7]
   15e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if ( size>AT24MAC_BUFFER_SIZE)
   15ea2:	79bb      	ldrb	r3, [r7, #6]
   15ea4:	2b10      	cmp	r3, #16
   15ea6:	dd6e      	ble.n	15f86 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x10a>
	{
		array[0]=addr0;
   15ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   15eac:	743b      	strb	r3, [r7, #16]
		size0=AT24MAC_BUFFER_SIZE-addr%(AT24MAC_BUFFER_SIZE);
   15eae:	79fb      	ldrb	r3, [r7, #7]
   15eb0:	f003 030f 	and.w	r3, r3, #15
   15eb4:	b2db      	uxtb	r3, r3
   15eb6:	f1c3 0310 	rsb	r3, r3, #16
   15eba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		memcpy((void*)&array[1],ptr,size0);
   15ebe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
   15ec2:	f107 0310 	add.w	r3, r7, #16
   15ec6:	3301      	adds	r3, #1
   15ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15eca:	4618      	mov	r0, r3
   15ecc:	4b41      	ldr	r3, [pc, #260]	; (15fd4 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   15ece:	4798      	blx	r3
		w= i2ca->Write(array,1+size0);
   15ed0:	68fb      	ldr	r3, [r7, #12]
   15ed2:	6898      	ldr	r0, [r3, #8]
   15ed4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   15ed8:	b29b      	uxth	r3, r3
   15eda:	3301      	adds	r3, #1
   15edc:	b29a      	uxth	r2, r3
   15ede:	f107 0310 	add.w	r3, r7, #16
   15ee2:	4619      	mov	r1, r3
   15ee4:	4b3c      	ldr	r3, [pc, #240]	; (15fd8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   15ee6:	4798      	blx	r3
   15ee8:	4603      	mov	r3, r0
   15eea:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(!i2ca->txReady);
   15eec:	68fb      	ldr	r3, [r7, #12]
   15eee:	689b      	ldr	r3, [r3, #8]
   15ef0:	7d1b      	ldrb	r3, [r3, #20]
   15ef2:	b2db      	uxtb	r3, r3
   15ef4:	f083 0301 	eor.w	r3, r3, #1
   15ef8:	b2db      	uxtb	r3, r3
   15efa:	2b00      	cmp	r3, #0
   15efc:	d000      	beq.n	15f00 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>
   15efe:	e7f5      	b.n	15eec <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
		ptr+=size0;
   15f00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   15f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15f06:	4413      	add	r3, r2
   15f08:	627b      	str	r3, [r7, #36]	; 0x24
		addr0+=size0;
   15f0a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   15f0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   15f12:	4413      	add	r3, r2
   15f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for (i = size0; i <size+1; i+=AT24MAC_BUFFER_SIZE)
   15f18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   15f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   15f20:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   15f24:	79bb      	ldrb	r3, [r7, #6]
   15f26:	3301      	adds	r3, #1
   15f28:	429a      	cmp	r2, r3
   15f2a:	da4d      	bge.n	15fc8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x14c>
		{
			array[0]=addr0;
   15f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   15f30:	743b      	strb	r3, [r7, #16]
			memcpy((void*)&array[1],ptr,AT24MAC_BUFFER_SIZE);
   15f32:	f107 0310 	add.w	r3, r7, #16
   15f36:	3301      	adds	r3, #1
   15f38:	2210      	movs	r2, #16
   15f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15f3c:	4618      	mov	r0, r3
   15f3e:	4b25      	ldr	r3, [pc, #148]	; (15fd4 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   15f40:	4798      	blx	r3
			w= i2ca->Write(array,1+AT24MAC_BUFFER_SIZE);
   15f42:	68fb      	ldr	r3, [r7, #12]
   15f44:	689b      	ldr	r3, [r3, #8]
   15f46:	f107 0110 	add.w	r1, r7, #16
   15f4a:	2211      	movs	r2, #17
   15f4c:	4618      	mov	r0, r3
   15f4e:	4b22      	ldr	r3, [pc, #136]	; (15fd8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   15f50:	4798      	blx	r3
   15f52:	4603      	mov	r3, r0
   15f54:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(!i2ca->txReady);
   15f56:	68fb      	ldr	r3, [r7, #12]
   15f58:	689b      	ldr	r3, [r3, #8]
   15f5a:	7d1b      	ldrb	r3, [r3, #20]
   15f5c:	b2db      	uxtb	r3, r3
   15f5e:	f083 0301 	eor.w	r3, r3, #1
   15f62:	b2db      	uxtb	r3, r3
   15f64:	2b00      	cmp	r3, #0
   15f66:	d000      	beq.n	15f6a <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xee>
   15f68:	e7f5      	b.n	15f56 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xda>
			ptr+=AT24MAC_BUFFER_SIZE;
   15f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f6c:	3310      	adds	r3, #16
   15f6e:	627b      	str	r3, [r7, #36]	; 0x24
			addr0+=AT24MAC_BUFFER_SIZE;
   15f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   15f74:	3310      	adds	r3, #16
   15f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for (i = size0; i <size+1; i+=AT24MAC_BUFFER_SIZE)
   15f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   15f7e:	3310      	adds	r3, #16
   15f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   15f84:	e7cc      	b.n	15f20 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xa4>
		}
		
	} 
	else
	{
		array[0]=addr;
   15f86:	79fb      	ldrb	r3, [r7, #7]
   15f88:	743b      	strb	r3, [r7, #16]
		memcpy((void*)&array[1],p,size);
   15f8a:	79ba      	ldrb	r2, [r7, #6]
   15f8c:	f107 0310 	add.w	r3, r7, #16
   15f90:	3301      	adds	r3, #1
   15f92:	68b9      	ldr	r1, [r7, #8]
   15f94:	4618      	mov	r0, r3
   15f96:	4b0f      	ldr	r3, [pc, #60]	; (15fd4 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   15f98:	4798      	blx	r3
		w= i2ca->Write(array,1+size);
   15f9a:	68fb      	ldr	r3, [r7, #12]
   15f9c:	6898      	ldr	r0, [r3, #8]
   15f9e:	79bb      	ldrb	r3, [r7, #6]
   15fa0:	b29b      	uxth	r3, r3
   15fa2:	3301      	adds	r3, #1
   15fa4:	b29a      	uxth	r2, r3
   15fa6:	f107 0310 	add.w	r3, r7, #16
   15faa:	4619      	mov	r1, r3
   15fac:	4b0a      	ldr	r3, [pc, #40]	; (15fd8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   15fae:	4798      	blx	r3
   15fb0:	4603      	mov	r3, r0
   15fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
		//AcknolledgePolling();
		while(!i2ca->txReady);
   15fb4:	68fb      	ldr	r3, [r7, #12]
   15fb6:	689b      	ldr	r3, [r3, #8]
   15fb8:	7d1b      	ldrb	r3, [r3, #20]
   15fba:	b2db      	uxtb	r3, r3
   15fbc:	f083 0301 	eor.w	r3, r3, #1
   15fc0:	b2db      	uxtb	r3, r3
   15fc2:	2b00      	cmp	r3, #0
   15fc4:	d000      	beq.n	15fc8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x14c>
   15fc6:	e7f5      	b.n	15fb4 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x138>
	}
	
	
	
	return	w;
   15fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   15fca:	4618      	mov	r0, r3
   15fcc:	3730      	adds	r7, #48	; 0x30
   15fce:	46bd      	mov	sp, r7
   15fd0:	bd80      	pop	{r7, pc}
   15fd2:	bf00      	nop
   15fd4:	0001d37d 	.word	0x0001d37d
   15fd8:	00018b25 	.word	0x00018b25

00015fdc <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
   15fdc:	b590      	push	{r4, r7, lr}
   15fde:	b087      	sub	sp, #28
   15fe0:	af00      	add	r7, sp, #0
   15fe2:	60f8      	str	r0, [r7, #12]
   15fe4:	60b9      	str	r1, [r7, #8]
   15fe6:	4611      	mov	r1, r2
   15fe8:	461a      	mov	r2, r3
   15fea:	460b      	mov	r3, r1
   15fec:	80fb      	strh	r3, [r7, #6]
   15fee:	4613      	mov	r3, r2
   15ff0:	717b      	strb	r3, [r7, #5]
	

	uint8_t add=(uint8_t)(0xff&addr);
   15ff2:	88fb      	ldrh	r3, [r7, #6]
   15ff4:	75fb      	strb	r3, [r7, #23]
	return	WriteAddress(p,add,size);
   15ff6:	797b      	ldrb	r3, [r7, #5]
   15ff8:	7dfa      	ldrb	r2, [r7, #23]
   15ffa:	68b9      	ldr	r1, [r7, #8]
   15ffc:	68f8      	ldr	r0, [r7, #12]
   15ffe:	4c03      	ldr	r4, [pc, #12]	; (1600c <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>)
   16000:	47a0      	blx	r4
   16002:	4603      	mov	r3, r0
}
   16004:	4618      	mov	r0, r3
   16006:	371c      	adds	r7, #28
   16008:	46bd      	mov	sp, r7
   1600a:	bd90      	pop	{r4, r7, pc}
   1600c:	00015e7d 	.word	0x00015e7d

00016010 <_ZN13AT24MAC_Class11ReadAddressEPhhh>:
	i2ca->Read(&value,1);
	
	return value;
}

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
   16010:	b580      	push	{r7, lr}
   16012:	b086      	sub	sp, #24
   16014:	af00      	add	r7, sp, #0
   16016:	60f8      	str	r0, [r7, #12]
   16018:	60b9      	str	r1, [r7, #8]
   1601a:	4611      	mov	r1, r2
   1601c:	461a      	mov	r2, r3
   1601e:	460b      	mov	r3, r1
   16020:	71fb      	strb	r3, [r7, #7]
   16022:	4613      	mov	r3, r2
   16024:	71bb      	strb	r3, [r7, #6]
	
	uint32_t r;
	uint8_t	value;
	while(!i2ca->rxReady);
   16026:	68fb      	ldr	r3, [r7, #12]
   16028:	689b      	ldr	r3, [r3, #8]
   1602a:	7d5b      	ldrb	r3, [r3, #21]
   1602c:	b2db      	uxtb	r3, r3
   1602e:	f083 0301 	eor.w	r3, r3, #1
   16032:	b2db      	uxtb	r3, r3
   16034:	2b00      	cmp	r3, #0
   16036:	d000      	beq.n	1603a <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x2a>
   16038:	e7f5      	b.n	16026 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x16>
	i2ca->Write(&addr,1);
   1603a:	68fb      	ldr	r3, [r7, #12]
   1603c:	689b      	ldr	r3, [r3, #8]
   1603e:	1df9      	adds	r1, r7, #7
   16040:	2201      	movs	r2, #1
   16042:	4618      	mov	r0, r3
   16044:	4b12      	ldr	r3, [pc, #72]	; (16090 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x80>)
   16046:	4798      	blx	r3
	while(!i2ca->txReady);
   16048:	68fb      	ldr	r3, [r7, #12]
   1604a:	689b      	ldr	r3, [r3, #8]
   1604c:	7d1b      	ldrb	r3, [r3, #20]
   1604e:	b2db      	uxtb	r3, r3
   16050:	f083 0301 	eor.w	r3, r3, #1
   16054:	b2db      	uxtb	r3, r3
   16056:	2b00      	cmp	r3, #0
   16058:	d000      	beq.n	1605c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4c>
   1605a:	e7f5      	b.n	16048 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x38>
	r= i2ca->Read(p,size);
   1605c:	68fb      	ldr	r3, [r7, #12]
   1605e:	689b      	ldr	r3, [r3, #8]
   16060:	79ba      	ldrb	r2, [r7, #6]
   16062:	b292      	uxth	r2, r2
   16064:	68b9      	ldr	r1, [r7, #8]
   16066:	4618      	mov	r0, r3
   16068:	4b0a      	ldr	r3, [pc, #40]	; (16094 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x84>)
   1606a:	4798      	blx	r3
   1606c:	4603      	mov	r3, r0
   1606e:	617b      	str	r3, [r7, #20]
	while(!i2ca->rxReady);
   16070:	68fb      	ldr	r3, [r7, #12]
   16072:	689b      	ldr	r3, [r3, #8]
   16074:	7d5b      	ldrb	r3, [r3, #21]
   16076:	b2db      	uxtb	r3, r3
   16078:	f083 0301 	eor.w	r3, r3, #1
   1607c:	b2db      	uxtb	r3, r3
   1607e:	2b00      	cmp	r3, #0
   16080:	d000      	beq.n	16084 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x74>
   16082:	e7f5      	b.n	16070 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x60>
			localAddress+=localSize;
		}
	}
	*/
	
	return r;
   16084:	697b      	ldr	r3, [r7, #20]
}
   16086:	4618      	mov	r0, r3
   16088:	3718      	adds	r7, #24
   1608a:	46bd      	mov	sp, r7
   1608c:	bd80      	pop	{r7, pc}
   1608e:	bf00      	nop
   16090:	00018b25 	.word	0x00018b25
   16094:	00018b69 	.word	0x00018b69

00016098 <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
   16098:	b590      	push	{r4, r7, lr}
   1609a:	b087      	sub	sp, #28
   1609c:	af00      	add	r7, sp, #0
   1609e:	60f8      	str	r0, [r7, #12]
   160a0:	60b9      	str	r1, [r7, #8]
   160a2:	4611      	mov	r1, r2
   160a4:	461a      	mov	r2, r3
   160a6:	460b      	mov	r3, r1
   160a8:	80fb      	strh	r3, [r7, #6]
   160aa:	4613      	mov	r3, r2
   160ac:	717b      	strb	r3, [r7, #5]
	uint8_t add=(uint8_t)(0xff&addr);
   160ae:	88fb      	ldrh	r3, [r7, #6]
   160b0:	75fb      	strb	r3, [r7, #23]
	while(!i2ca->rxReady);
   160b2:	68fb      	ldr	r3, [r7, #12]
   160b4:	689b      	ldr	r3, [r3, #8]
   160b6:	7d5b      	ldrb	r3, [r3, #21]
   160b8:	b2db      	uxtb	r3, r3
   160ba:	f083 0301 	eor.w	r3, r3, #1
   160be:	b2db      	uxtb	r3, r3
   160c0:	2b00      	cmp	r3, #0
   160c2:	d000      	beq.n	160c6 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x2e>
   160c4:	e7f5      	b.n	160b2 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x1a>
	return ReadAddress(p,add,size);
   160c6:	797b      	ldrb	r3, [r7, #5]
   160c8:	7dfa      	ldrb	r2, [r7, #23]
   160ca:	68b9      	ldr	r1, [r7, #8]
   160cc:	68f8      	ldr	r0, [r7, #12]
   160ce:	4c03      	ldr	r4, [pc, #12]	; (160dc <_ZN13AT24MAC_Class11ReadAddressEPhth+0x44>)
   160d0:	47a0      	blx	r4
   160d2:	4603      	mov	r3, r0
}
   160d4:	4618      	mov	r0, r3
   160d6:	371c      	adds	r7, #28
   160d8:	46bd      	mov	sp, r7
   160da:	bd90      	pop	{r4, r7, pc}
   160dc:	00016011 	.word	0x00016011

000160e0 <_ZN13AT24MAC_Class8SelfTestEv>:
		GetAcknowledge();
	} while (!IsReady());
	return isReady;
}

bool	AT24MAC_Class::SelfTest(void){
   160e0:	b590      	push	{r4, r7, lr}
   160e2:	b085      	sub	sp, #20
   160e4:	af00      	add	r7, sp, #0
   160e6:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE*2;
   160e8:	687b      	ldr	r3, [r7, #4]
   160ea:	22e0      	movs	r2, #224	; 0xe0
   160ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   160f0:	2300      	movs	r3, #0
   160f2:	60fb      	str	r3, [r7, #12]
   160f4:	68fb      	ldr	r3, [r7, #12]
   160f6:	2b0f      	cmp	r3, #15
   160f8:	dc18      	bgt.n	1612c <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
   160fa:	4b33      	ldr	r3, [pc, #204]	; (161c8 <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
   160fc:	4798      	blx	r3
   160fe:	4603      	mov	r3, r0
   16100:	b2d9      	uxtb	r1, r3
   16102:	687a      	ldr	r2, [r7, #4]
   16104:	68fb      	ldr	r3, [r7, #12]
   16106:	4413      	add	r3, r2
   16108:	330e      	adds	r3, #14
   1610a:	460a      	mov	r2, r1
   1610c:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
   1610e:	68fb      	ldr	r3, [r7, #12]
   16110:	b2db      	uxtb	r3, r3
   16112:	f1c3 0310 	rsb	r3, r3, #16
   16116:	b2d9      	uxtb	r1, r3
   16118:	687a      	ldr	r2, [r7, #4]
   1611a:	68fb      	ldr	r3, [r7, #12]
   1611c:	4413      	add	r3, r2
   1611e:	331e      	adds	r3, #30
   16120:	460a      	mov	r2, r1
   16122:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   16124:	68fb      	ldr	r3, [r7, #12]
   16126:	3301      	adds	r3, #1
   16128:	60fb      	str	r3, [r7, #12]
   1612a:	e7e3      	b.n	160f4 <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
   1612c:	6878      	ldr	r0, [r7, #4]
   1612e:	4b27      	ldr	r3, [pc, #156]	; (161cc <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   16130:	4798      	blx	r3
   16132:	4603      	mov	r3, r0
   16134:	f083 0301 	eor.w	r3, r3, #1
   16138:	b2db      	uxtb	r3, r3
   1613a:	2b00      	cmp	r3, #0
   1613c:	d000      	beq.n	16140 <_ZN13AT24MAC_Class8SelfTestEv+0x60>
   1613e:	e7f5      	b.n	1612c <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   16140:	687b      	ldr	r3, [r7, #4]
   16142:	f103 010e 	add.w	r1, r3, #14
   16146:	687b      	ldr	r3, [r7, #4]
   16148:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   1614c:	2310      	movs	r3, #16
   1614e:	6878      	ldr	r0, [r7, #4]
   16150:	4c1f      	ldr	r4, [pc, #124]	; (161d0 <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
   16152:	47a0      	blx	r4
	while(!IsReady());
   16154:	6878      	ldr	r0, [r7, #4]
   16156:	4b1d      	ldr	r3, [pc, #116]	; (161cc <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   16158:	4798      	blx	r3
   1615a:	4603      	mov	r3, r0
   1615c:	f083 0301 	eor.w	r3, r3, #1
   16160:	b2db      	uxtb	r3, r3
   16162:	2b00      	cmp	r3, #0
   16164:	d000      	beq.n	16168 <_ZN13AT24MAC_Class8SelfTestEv+0x88>
   16166:	e7f5      	b.n	16154 <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   16168:	687b      	ldr	r3, [r7, #4]
   1616a:	f103 011e 	add.w	r1, r3, #30
   1616e:	687b      	ldr	r3, [r7, #4]
   16170:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   16174:	2310      	movs	r3, #16
   16176:	6878      	ldr	r0, [r7, #4]
   16178:	4c16      	ldr	r4, [pc, #88]	; (161d4 <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
   1617a:	47a0      	blx	r4
	isOK = true;
   1617c:	687b      	ldr	r3, [r7, #4]
   1617e:	2201      	movs	r2, #1
   16180:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   16184:	2300      	movs	r3, #0
   16186:	60bb      	str	r3, [r7, #8]
   16188:	68bb      	ldr	r3, [r7, #8]
   1618a:	2b0f      	cmp	r3, #15
   1618c:	dc14      	bgt.n	161b8 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
   1618e:	687a      	ldr	r2, [r7, #4]
   16190:	68bb      	ldr	r3, [r7, #8]
   16192:	4413      	add	r3, r2
   16194:	330e      	adds	r3, #14
   16196:	781a      	ldrb	r2, [r3, #0]
   16198:	6879      	ldr	r1, [r7, #4]
   1619a:	68bb      	ldr	r3, [r7, #8]
   1619c:	440b      	add	r3, r1
   1619e:	331e      	adds	r3, #30
   161a0:	781b      	ldrb	r3, [r3, #0]
   161a2:	429a      	cmp	r2, r3
   161a4:	d004      	beq.n	161b0 <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
   161a6:	687b      	ldr	r3, [r7, #4]
   161a8:	2200      	movs	r2, #0
   161aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
   161ae:	e003      	b.n	161b8 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   161b0:	68bb      	ldr	r3, [r7, #8]
   161b2:	3301      	adds	r3, #1
   161b4:	60bb      	str	r3, [r7, #8]
   161b6:	e7e7      	b.n	16188 <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
   161b8:	687b      	ldr	r3, [r7, #4]
   161ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
   161be:	4618      	mov	r0, r3
   161c0:	3714      	adds	r7, #20
   161c2:	46bd      	mov	sp, r7
   161c4:	bd90      	pop	{r4, r7, pc}
   161c6:	bf00      	nop
   161c8:	0001d54d 	.word	0x0001d54d
   161cc:	000161d9 	.word	0x000161d9
   161d0:	00015e7d 	.word	0x00015e7d
   161d4:	00016011 	.word	0x00016011

000161d8 <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
   161d8:	b480      	push	{r7}
   161da:	b083      	sub	sp, #12
   161dc:	af00      	add	r7, sp, #0
   161de:	6078      	str	r0, [r7, #4]

	if (i2ca->txReady && i2ca->rxReady)
   161e0:	687b      	ldr	r3, [r7, #4]
   161e2:	689b      	ldr	r3, [r3, #8]
   161e4:	7d1b      	ldrb	r3, [r3, #20]
   161e6:	b2db      	uxtb	r3, r3
   161e8:	2b00      	cmp	r3, #0
   161ea:	d007      	beq.n	161fc <_ZN13AT24MAC_Class7IsReadyEv+0x24>
   161ec:	687b      	ldr	r3, [r7, #4]
   161ee:	689b      	ldr	r3, [r3, #8]
   161f0:	7d5b      	ldrb	r3, [r3, #21]
   161f2:	b2db      	uxtb	r3, r3
   161f4:	2b00      	cmp	r3, #0
   161f6:	d001      	beq.n	161fc <_ZN13AT24MAC_Class7IsReadyEv+0x24>
   161f8:	2301      	movs	r3, #1
   161fa:	e000      	b.n	161fe <_ZN13AT24MAC_Class7IsReadyEv+0x26>
   161fc:	2300      	movs	r3, #0
   161fe:	2b00      	cmp	r3, #0
   16200:	d003      	beq.n	1620a <_ZN13AT24MAC_Class7IsReadyEv+0x32>
	{
		isReady=true;
   16202:	687b      	ldr	r3, [r7, #4]
   16204:	2201      	movs	r2, #1
   16206:	701a      	strb	r2, [r3, #0]
   16208:	e002      	b.n	16210 <_ZN13AT24MAC_Class7IsReadyEv+0x38>
	}
	else
	{
		isReady=false;
   1620a:	687b      	ldr	r3, [r7, #4]
   1620c:	2200      	movs	r2, #0
   1620e:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
   16210:	687b      	ldr	r3, [r7, #4]
   16212:	781b      	ldrb	r3, [r3, #0]
   16214:	b2db      	uxtb	r3, r3
}
   16216:	4618      	mov	r0, r3
   16218:	370c      	adds	r7, #12
   1621a:	46bd      	mov	sp, r7
   1621c:	bc80      	pop	{r7}
   1621e:	4770      	bx	lr

00016220 <_Z41__static_initialization_and_destruction_0ii>:

   16220:	b580      	push	{r7, lr}
   16222:	b082      	sub	sp, #8
   16224:	af00      	add	r7, sp, #0
   16226:	6078      	str	r0, [r7, #4]
   16228:	6039      	str	r1, [r7, #0]
   1622a:	687b      	ldr	r3, [r7, #4]
   1622c:	2b01      	cmp	r3, #1
   1622e:	d115      	bne.n	1625c <_Z41__static_initialization_and_destruction_0ii+0x3c>
   16230:	683b      	ldr	r3, [r7, #0]
   16232:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16236:	4293      	cmp	r3, r2
   16238:	d110      	bne.n	1625c <_Z41__static_initialization_and_destruction_0ii+0x3c>
static  I2C_Asyn_Class	i2cAsync;
   1623a:	480a      	ldr	r0, [pc, #40]	; (16264 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1623c:	4b0a      	ldr	r3, [pc, #40]	; (16268 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1623e:	4798      	blx	r3
   16240:	4a0a      	ldr	r2, [pc, #40]	; (1626c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   16242:	490b      	ldr	r1, [pc, #44]	; (16270 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   16244:	4807      	ldr	r0, [pc, #28]	; (16264 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   16246:	4b0b      	ldr	r3, [pc, #44]	; (16274 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   16248:	4798      	blx	r3
   1624a:	490b      	ldr	r1, [pc, #44]	; (16278 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1624c:	480b      	ldr	r0, [pc, #44]	; (1627c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1624e:	4b0c      	ldr	r3, [pc, #48]	; (16280 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   16250:	4798      	blx	r3
   16252:	4a06      	ldr	r2, [pc, #24]	; (1626c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   16254:	490b      	ldr	r1, [pc, #44]	; (16284 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   16256:	4809      	ldr	r0, [pc, #36]	; (1627c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   16258:	4b06      	ldr	r3, [pc, #24]	; (16274 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1625a:	4798      	blx	r3
   1625c:	bf00      	nop
   1625e:	3708      	adds	r7, #8
   16260:	46bd      	mov	sp, r7
   16262:	bd80      	pop	{r7, pc}
   16264:	20009bf8 	.word	0x20009bf8
   16268:	0001897d 	.word	0x0001897d
   1626c:	20000000 	.word	0x20000000
   16270:	000189ad 	.word	0x000189ad
   16274:	00019ab1 	.word	0x00019ab1
   16278:	2000a714 	.word	0x2000a714
   1627c:	20009c3c 	.word	0x20009c3c
   16280:	00015dc5 	.word	0x00015dc5
   16284:	00015df5 	.word	0x00015df5

00016288 <_GLOBAL__sub_I_ptrAT24MACClass>:
   16288:	b580      	push	{r7, lr}
   1628a:	af00      	add	r7, sp, #0
   1628c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16290:	2001      	movs	r0, #1
   16292:	4b01      	ldr	r3, [pc, #4]	; (16298 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
   16294:	4798      	blx	r3
   16296:	bd80      	pop	{r7, pc}
   16298:	00016221 	.word	0x00016221

0001629c <hri_port_set_DIR_reg>:
{
   1629c:	b480      	push	{r7}
   1629e:	b085      	sub	sp, #20
   162a0:	af00      	add	r7, sp, #0
   162a2:	60f8      	str	r0, [r7, #12]
   162a4:	460b      	mov	r3, r1
   162a6:	607a      	str	r2, [r7, #4]
   162a8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   162aa:	7afb      	ldrb	r3, [r7, #11]
   162ac:	68fa      	ldr	r2, [r7, #12]
   162ae:	01db      	lsls	r3, r3, #7
   162b0:	4413      	add	r3, r2
   162b2:	3308      	adds	r3, #8
   162b4:	687a      	ldr	r2, [r7, #4]
   162b6:	601a      	str	r2, [r3, #0]
}
   162b8:	bf00      	nop
   162ba:	3714      	adds	r7, #20
   162bc:	46bd      	mov	sp, r7
   162be:	bc80      	pop	{r7}
   162c0:	4770      	bx	lr

000162c2 <hri_port_clear_DIR_reg>:
{
   162c2:	b480      	push	{r7}
   162c4:	b085      	sub	sp, #20
   162c6:	af00      	add	r7, sp, #0
   162c8:	60f8      	str	r0, [r7, #12]
   162ca:	460b      	mov	r3, r1
   162cc:	607a      	str	r2, [r7, #4]
   162ce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   162d0:	7afb      	ldrb	r3, [r7, #11]
   162d2:	68fa      	ldr	r2, [r7, #12]
   162d4:	01db      	lsls	r3, r3, #7
   162d6:	4413      	add	r3, r2
   162d8:	3304      	adds	r3, #4
   162da:	687a      	ldr	r2, [r7, #4]
   162dc:	601a      	str	r2, [r3, #0]
}
   162de:	bf00      	nop
   162e0:	3714      	adds	r7, #20
   162e2:	46bd      	mov	sp, r7
   162e4:	bc80      	pop	{r7}
   162e6:	4770      	bx	lr

000162e8 <hri_port_set_OUT_reg>:
{
   162e8:	b480      	push	{r7}
   162ea:	b085      	sub	sp, #20
   162ec:	af00      	add	r7, sp, #0
   162ee:	60f8      	str	r0, [r7, #12]
   162f0:	460b      	mov	r3, r1
   162f2:	607a      	str	r2, [r7, #4]
   162f4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   162f6:	7afb      	ldrb	r3, [r7, #11]
   162f8:	68fa      	ldr	r2, [r7, #12]
   162fa:	01db      	lsls	r3, r3, #7
   162fc:	4413      	add	r3, r2
   162fe:	3318      	adds	r3, #24
   16300:	687a      	ldr	r2, [r7, #4]
   16302:	601a      	str	r2, [r3, #0]
}
   16304:	bf00      	nop
   16306:	3714      	adds	r7, #20
   16308:	46bd      	mov	sp, r7
   1630a:	bc80      	pop	{r7}
   1630c:	4770      	bx	lr

0001630e <hri_port_clear_OUT_reg>:
{
   1630e:	b480      	push	{r7}
   16310:	b085      	sub	sp, #20
   16312:	af00      	add	r7, sp, #0
   16314:	60f8      	str	r0, [r7, #12]
   16316:	460b      	mov	r3, r1
   16318:	607a      	str	r2, [r7, #4]
   1631a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1631c:	7afb      	ldrb	r3, [r7, #11]
   1631e:	68fa      	ldr	r2, [r7, #12]
   16320:	01db      	lsls	r3, r3, #7
   16322:	4413      	add	r3, r2
   16324:	3314      	adds	r3, #20
   16326:	687a      	ldr	r2, [r7, #4]
   16328:	601a      	str	r2, [r3, #0]
}
   1632a:	bf00      	nop
   1632c:	3714      	adds	r7, #20
   1632e:	46bd      	mov	sp, r7
   16330:	bc80      	pop	{r7}
   16332:	4770      	bx	lr

00016334 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   16334:	b480      	push	{r7}
   16336:	b085      	sub	sp, #20
   16338:	af00      	add	r7, sp, #0
   1633a:	6078      	str	r0, [r7, #4]
   1633c:	4608      	mov	r0, r1
   1633e:	4611      	mov	r1, r2
   16340:	461a      	mov	r2, r3
   16342:	4603      	mov	r3, r0
   16344:	70fb      	strb	r3, [r7, #3]
   16346:	460b      	mov	r3, r1
   16348:	70bb      	strb	r3, [r7, #2]
   1634a:	4613      	mov	r3, r2
   1634c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1634e:	78fa      	ldrb	r2, [r7, #3]
   16350:	78bb      	ldrb	r3, [r7, #2]
   16352:	6879      	ldr	r1, [r7, #4]
   16354:	01d2      	lsls	r2, r2, #7
   16356:	440a      	add	r2, r1
   16358:	4413      	add	r3, r2
   1635a:	3330      	adds	r3, #48	; 0x30
   1635c:	781b      	ldrb	r3, [r3, #0]
   1635e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   16360:	7bfb      	ldrb	r3, [r7, #15]
   16362:	f023 030f 	bic.w	r3, r3, #15
   16366:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   16368:	787b      	ldrb	r3, [r7, #1]
   1636a:	f003 030f 	and.w	r3, r3, #15
   1636e:	b2da      	uxtb	r2, r3
   16370:	7bfb      	ldrb	r3, [r7, #15]
   16372:	4313      	orrs	r3, r2
   16374:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   16376:	78fa      	ldrb	r2, [r7, #3]
   16378:	78bb      	ldrb	r3, [r7, #2]
   1637a:	6879      	ldr	r1, [r7, #4]
   1637c:	01d2      	lsls	r2, r2, #7
   1637e:	440a      	add	r2, r1
   16380:	4413      	add	r3, r2
   16382:	3330      	adds	r3, #48	; 0x30
   16384:	7bfa      	ldrb	r2, [r7, #15]
   16386:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   16388:	bf00      	nop
   1638a:	3714      	adds	r7, #20
   1638c:	46bd      	mov	sp, r7
   1638e:	bc80      	pop	{r7}
   16390:	4770      	bx	lr

00016392 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   16392:	b480      	push	{r7}
   16394:	b085      	sub	sp, #20
   16396:	af00      	add	r7, sp, #0
   16398:	6078      	str	r0, [r7, #4]
   1639a:	4608      	mov	r0, r1
   1639c:	4611      	mov	r1, r2
   1639e:	461a      	mov	r2, r3
   163a0:	4603      	mov	r3, r0
   163a2:	70fb      	strb	r3, [r7, #3]
   163a4:	460b      	mov	r3, r1
   163a6:	70bb      	strb	r3, [r7, #2]
   163a8:	4613      	mov	r3, r2
   163aa:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   163ac:	78fa      	ldrb	r2, [r7, #3]
   163ae:	78bb      	ldrb	r3, [r7, #2]
   163b0:	6879      	ldr	r1, [r7, #4]
   163b2:	01d2      	lsls	r2, r2, #7
   163b4:	440a      	add	r2, r1
   163b6:	4413      	add	r3, r2
   163b8:	3330      	adds	r3, #48	; 0x30
   163ba:	781b      	ldrb	r3, [r3, #0]
   163bc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   163be:	7bfb      	ldrb	r3, [r7, #15]
   163c0:	f003 030f 	and.w	r3, r3, #15
   163c4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   163c6:	787b      	ldrb	r3, [r7, #1]
   163c8:	011b      	lsls	r3, r3, #4
   163ca:	b2da      	uxtb	r2, r3
   163cc:	7bfb      	ldrb	r3, [r7, #15]
   163ce:	4313      	orrs	r3, r2
   163d0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   163d2:	78fa      	ldrb	r2, [r7, #3]
   163d4:	78bb      	ldrb	r3, [r7, #2]
   163d6:	6879      	ldr	r1, [r7, #4]
   163d8:	01d2      	lsls	r2, r2, #7
   163da:	440a      	add	r2, r1
   163dc:	4413      	add	r3, r2
   163de:	3330      	adds	r3, #48	; 0x30
   163e0:	7bfa      	ldrb	r2, [r7, #15]
   163e2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   163e4:	bf00      	nop
   163e6:	3714      	adds	r7, #20
   163e8:	46bd      	mov	sp, r7
   163ea:	bc80      	pop	{r7}
   163ec:	4770      	bx	lr

000163ee <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   163ee:	b480      	push	{r7}
   163f0:	b085      	sub	sp, #20
   163f2:	af00      	add	r7, sp, #0
   163f4:	6078      	str	r0, [r7, #4]
   163f6:	4608      	mov	r0, r1
   163f8:	4611      	mov	r1, r2
   163fa:	461a      	mov	r2, r3
   163fc:	4603      	mov	r3, r0
   163fe:	70fb      	strb	r3, [r7, #3]
   16400:	460b      	mov	r3, r1
   16402:	70bb      	strb	r3, [r7, #2]
   16404:	4613      	mov	r3, r2
   16406:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   16408:	78fa      	ldrb	r2, [r7, #3]
   1640a:	78bb      	ldrb	r3, [r7, #2]
   1640c:	6879      	ldr	r1, [r7, #4]
   1640e:	01d2      	lsls	r2, r2, #7
   16410:	440a      	add	r2, r1
   16412:	4413      	add	r3, r2
   16414:	3340      	adds	r3, #64	; 0x40
   16416:	781b      	ldrb	r3, [r3, #0]
   16418:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   1641a:	7bfb      	ldrb	r3, [r7, #15]
   1641c:	f023 0301 	bic.w	r3, r3, #1
   16420:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   16422:	787a      	ldrb	r2, [r7, #1]
   16424:	7bfb      	ldrb	r3, [r7, #15]
   16426:	4313      	orrs	r3, r2
   16428:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   1642a:	78fa      	ldrb	r2, [r7, #3]
   1642c:	78bb      	ldrb	r3, [r7, #2]
   1642e:	6879      	ldr	r1, [r7, #4]
   16430:	01d2      	lsls	r2, r2, #7
   16432:	440a      	add	r2, r1
   16434:	4413      	add	r3, r2
   16436:	3340      	adds	r3, #64	; 0x40
   16438:	7bfa      	ldrb	r2, [r7, #15]
   1643a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1643c:	bf00      	nop
   1643e:	3714      	adds	r7, #20
   16440:	46bd      	mov	sp, r7
   16442:	bc80      	pop	{r7}
   16444:	4770      	bx	lr

00016446 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   16446:	b480      	push	{r7}
   16448:	b085      	sub	sp, #20
   1644a:	af00      	add	r7, sp, #0
   1644c:	60f8      	str	r0, [r7, #12]
   1644e:	460b      	mov	r3, r1
   16450:	607a      	str	r2, [r7, #4]
   16452:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   16454:	7afb      	ldrb	r3, [r7, #11]
   16456:	68fa      	ldr	r2, [r7, #12]
   16458:	01db      	lsls	r3, r3, #7
   1645a:	4413      	add	r3, r2
   1645c:	3328      	adds	r3, #40	; 0x28
   1645e:	687a      	ldr	r2, [r7, #4]
   16460:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   16462:	bf00      	nop
   16464:	3714      	adds	r7, #20
   16466:	46bd      	mov	sp, r7
   16468:	bc80      	pop	{r7}
   1646a:	4770      	bx	lr

0001646c <_gpio_set_direction>:
{
   1646c:	b580      	push	{r7, lr}
   1646e:	b082      	sub	sp, #8
   16470:	af00      	add	r7, sp, #0
   16472:	4603      	mov	r3, r0
   16474:	6039      	str	r1, [r7, #0]
   16476:	71fb      	strb	r3, [r7, #7]
   16478:	4613      	mov	r3, r2
   1647a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   1647c:	79bb      	ldrb	r3, [r7, #6]
   1647e:	2b01      	cmp	r3, #1
   16480:	d01c      	beq.n	164bc <_gpio_set_direction+0x50>
   16482:	2b02      	cmp	r3, #2
   16484:	d037      	beq.n	164f6 <_gpio_set_direction+0x8a>
   16486:	2b00      	cmp	r3, #0
   16488:	d14e      	bne.n	16528 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1648a:	79fb      	ldrb	r3, [r7, #7]
   1648c:	683a      	ldr	r2, [r7, #0]
   1648e:	4619      	mov	r1, r3
   16490:	482a      	ldr	r0, [pc, #168]	; (1653c <_gpio_set_direction+0xd0>)
   16492:	4b2b      	ldr	r3, [pc, #172]	; (16540 <_gpio_set_direction+0xd4>)
   16494:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   16496:	683b      	ldr	r3, [r7, #0]
   16498:	b29b      	uxth	r3, r3
   1649a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1649e:	79fb      	ldrb	r3, [r7, #7]
   164a0:	4619      	mov	r1, r3
   164a2:	4826      	ldr	r0, [pc, #152]	; (1653c <_gpio_set_direction+0xd0>)
   164a4:	4b27      	ldr	r3, [pc, #156]	; (16544 <_gpio_set_direction+0xd8>)
   164a6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   164a8:	683b      	ldr	r3, [r7, #0]
   164aa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   164ac:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   164b0:	79fb      	ldrb	r3, [r7, #7]
   164b2:	4619      	mov	r1, r3
   164b4:	4821      	ldr	r0, [pc, #132]	; (1653c <_gpio_set_direction+0xd0>)
   164b6:	4b23      	ldr	r3, [pc, #140]	; (16544 <_gpio_set_direction+0xd8>)
   164b8:	4798      	blx	r3
		break;
   164ba:	e03a      	b.n	16532 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   164bc:	79fb      	ldrb	r3, [r7, #7]
   164be:	683a      	ldr	r2, [r7, #0]
   164c0:	4619      	mov	r1, r3
   164c2:	481e      	ldr	r0, [pc, #120]	; (1653c <_gpio_set_direction+0xd0>)
   164c4:	4b1e      	ldr	r3, [pc, #120]	; (16540 <_gpio_set_direction+0xd4>)
   164c6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   164c8:	683b      	ldr	r3, [r7, #0]
   164ca:	b29b      	uxth	r3, r3
   164cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   164d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   164d4:	79f9      	ldrb	r1, [r7, #7]
   164d6:	461a      	mov	r2, r3
   164d8:	4818      	ldr	r0, [pc, #96]	; (1653c <_gpio_set_direction+0xd0>)
   164da:	4b1a      	ldr	r3, [pc, #104]	; (16544 <_gpio_set_direction+0xd8>)
   164dc:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   164de:	683b      	ldr	r3, [r7, #0]
   164e0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   164e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   164e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   164ea:	79f9      	ldrb	r1, [r7, #7]
   164ec:	461a      	mov	r2, r3
   164ee:	4813      	ldr	r0, [pc, #76]	; (1653c <_gpio_set_direction+0xd0>)
   164f0:	4b14      	ldr	r3, [pc, #80]	; (16544 <_gpio_set_direction+0xd8>)
   164f2:	4798      	blx	r3
		break;
   164f4:	e01d      	b.n	16532 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   164f6:	79fb      	ldrb	r3, [r7, #7]
   164f8:	683a      	ldr	r2, [r7, #0]
   164fa:	4619      	mov	r1, r3
   164fc:	480f      	ldr	r0, [pc, #60]	; (1653c <_gpio_set_direction+0xd0>)
   164fe:	4b12      	ldr	r3, [pc, #72]	; (16548 <_gpio_set_direction+0xdc>)
   16500:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   16502:	683b      	ldr	r3, [r7, #0]
   16504:	b29b      	uxth	r3, r3
   16506:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1650a:	79fb      	ldrb	r3, [r7, #7]
   1650c:	4619      	mov	r1, r3
   1650e:	480b      	ldr	r0, [pc, #44]	; (1653c <_gpio_set_direction+0xd0>)
   16510:	4b0c      	ldr	r3, [pc, #48]	; (16544 <_gpio_set_direction+0xd8>)
   16512:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16514:	683b      	ldr	r3, [r7, #0]
   16516:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   16518:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   1651c:	79fb      	ldrb	r3, [r7, #7]
   1651e:	4619      	mov	r1, r3
   16520:	4806      	ldr	r0, [pc, #24]	; (1653c <_gpio_set_direction+0xd0>)
   16522:	4b08      	ldr	r3, [pc, #32]	; (16544 <_gpio_set_direction+0xd8>)
   16524:	4798      	blx	r3
		break;
   16526:	e004      	b.n	16532 <_gpio_set_direction+0xc6>
		ASSERT(false);
   16528:	2246      	movs	r2, #70	; 0x46
   1652a:	4908      	ldr	r1, [pc, #32]	; (1654c <_gpio_set_direction+0xe0>)
   1652c:	2000      	movs	r0, #0
   1652e:	4b08      	ldr	r3, [pc, #32]	; (16550 <_gpio_set_direction+0xe4>)
   16530:	4798      	blx	r3
}
   16532:	bf00      	nop
   16534:	3708      	adds	r7, #8
   16536:	46bd      	mov	sp, r7
   16538:	bd80      	pop	{r7, pc}
   1653a:	bf00      	nop
   1653c:	41008000 	.word	0x41008000
   16540:	000162c3 	.word	0x000162c3
   16544:	00016447 	.word	0x00016447
   16548:	0001629d 	.word	0x0001629d
   1654c:	00022eb8 	.word	0x00022eb8
   16550:	00007e21 	.word	0x00007e21

00016554 <_gpio_set_level>:
{
   16554:	b580      	push	{r7, lr}
   16556:	b082      	sub	sp, #8
   16558:	af00      	add	r7, sp, #0
   1655a:	4603      	mov	r3, r0
   1655c:	6039      	str	r1, [r7, #0]
   1655e:	71fb      	strb	r3, [r7, #7]
   16560:	4613      	mov	r3, r2
   16562:	71bb      	strb	r3, [r7, #6]
	if (level) {
   16564:	79bb      	ldrb	r3, [r7, #6]
   16566:	2b00      	cmp	r3, #0
   16568:	d006      	beq.n	16578 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1656a:	79fb      	ldrb	r3, [r7, #7]
   1656c:	683a      	ldr	r2, [r7, #0]
   1656e:	4619      	mov	r1, r3
   16570:	4806      	ldr	r0, [pc, #24]	; (1658c <_gpio_set_level+0x38>)
   16572:	4b07      	ldr	r3, [pc, #28]	; (16590 <_gpio_set_level+0x3c>)
   16574:	4798      	blx	r3
}
   16576:	e005      	b.n	16584 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   16578:	79fb      	ldrb	r3, [r7, #7]
   1657a:	683a      	ldr	r2, [r7, #0]
   1657c:	4619      	mov	r1, r3
   1657e:	4803      	ldr	r0, [pc, #12]	; (1658c <_gpio_set_level+0x38>)
   16580:	4b04      	ldr	r3, [pc, #16]	; (16594 <_gpio_set_level+0x40>)
   16582:	4798      	blx	r3
}
   16584:	bf00      	nop
   16586:	3708      	adds	r7, #8
   16588:	46bd      	mov	sp, r7
   1658a:	bd80      	pop	{r7, pc}
   1658c:	41008000 	.word	0x41008000
   16590:	000162e9 	.word	0x000162e9
   16594:	0001630f 	.word	0x0001630f

00016598 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   16598:	b590      	push	{r4, r7, lr}
   1659a:	b085      	sub	sp, #20
   1659c:	af00      	add	r7, sp, #0
   1659e:	6078      	str	r0, [r7, #4]
   165a0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   165a2:	687b      	ldr	r3, [r7, #4]
   165a4:	095b      	lsrs	r3, r3, #5
   165a6:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   165a8:	687b      	ldr	r3, [r7, #4]
   165aa:	b2db      	uxtb	r3, r3
   165ac:	f003 031f 	and.w	r3, r3, #31
   165b0:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   165b2:	683b      	ldr	r3, [r7, #0]
   165b4:	f1b3 3fff 	cmp.w	r3, #4294967295
   165b8:	d106      	bne.n	165c8 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   165ba:	7bba      	ldrb	r2, [r7, #14]
   165bc:	7bf9      	ldrb	r1, [r7, #15]
   165be:	2300      	movs	r3, #0
   165c0:	4812      	ldr	r0, [pc, #72]	; (1660c <_gpio_set_pin_function+0x74>)
   165c2:	4c13      	ldr	r4, [pc, #76]	; (16610 <_gpio_set_pin_function+0x78>)
   165c4:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   165c6:	e01d      	b.n	16604 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   165c8:	7bba      	ldrb	r2, [r7, #14]
   165ca:	7bf9      	ldrb	r1, [r7, #15]
   165cc:	2301      	movs	r3, #1
   165ce:	480f      	ldr	r0, [pc, #60]	; (1660c <_gpio_set_pin_function+0x74>)
   165d0:	4c0f      	ldr	r4, [pc, #60]	; (16610 <_gpio_set_pin_function+0x78>)
   165d2:	47a0      	blx	r4
		if (pin & 1) {
   165d4:	7bbb      	ldrb	r3, [r7, #14]
   165d6:	f003 0301 	and.w	r3, r3, #1
   165da:	2b00      	cmp	r3, #0
   165dc:	d009      	beq.n	165f2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   165de:	7bbb      	ldrb	r3, [r7, #14]
   165e0:	105b      	asrs	r3, r3, #1
   165e2:	b2da      	uxtb	r2, r3
   165e4:	683b      	ldr	r3, [r7, #0]
   165e6:	b2db      	uxtb	r3, r3
   165e8:	7bf9      	ldrb	r1, [r7, #15]
   165ea:	4808      	ldr	r0, [pc, #32]	; (1660c <_gpio_set_pin_function+0x74>)
   165ec:	4c09      	ldr	r4, [pc, #36]	; (16614 <_gpio_set_pin_function+0x7c>)
   165ee:	47a0      	blx	r4
}
   165f0:	e008      	b.n	16604 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   165f2:	7bbb      	ldrb	r3, [r7, #14]
   165f4:	105b      	asrs	r3, r3, #1
   165f6:	b2da      	uxtb	r2, r3
   165f8:	683b      	ldr	r3, [r7, #0]
   165fa:	b2db      	uxtb	r3, r3
   165fc:	7bf9      	ldrb	r1, [r7, #15]
   165fe:	4803      	ldr	r0, [pc, #12]	; (1660c <_gpio_set_pin_function+0x74>)
   16600:	4c05      	ldr	r4, [pc, #20]	; (16618 <_gpio_set_pin_function+0x80>)
   16602:	47a0      	blx	r4
}
   16604:	bf00      	nop
   16606:	3714      	adds	r7, #20
   16608:	46bd      	mov	sp, r7
   1660a:	bd90      	pop	{r4, r7, pc}
   1660c:	41008000 	.word	0x41008000
   16610:	000163ef 	.word	0x000163ef
   16614:	00016393 	.word	0x00016393
   16618:	00016335 	.word	0x00016335

0001661c <gpio_set_pin_function>:
{
   1661c:	b580      	push	{r7, lr}
   1661e:	b082      	sub	sp, #8
   16620:	af00      	add	r7, sp, #0
   16622:	6078      	str	r0, [r7, #4]
   16624:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   16626:	6839      	ldr	r1, [r7, #0]
   16628:	6878      	ldr	r0, [r7, #4]
   1662a:	4b03      	ldr	r3, [pc, #12]	; (16638 <gpio_set_pin_function+0x1c>)
   1662c:	4798      	blx	r3
}
   1662e:	bf00      	nop
   16630:	3708      	adds	r7, #8
   16632:	46bd      	mov	sp, r7
   16634:	bd80      	pop	{r7, pc}
   16636:	bf00      	nop
   16638:	00016599 	.word	0x00016599

0001663c <gpio_set_pin_direction>:
{
   1663c:	b580      	push	{r7, lr}
   1663e:	b082      	sub	sp, #8
   16640:	af00      	add	r7, sp, #0
   16642:	4603      	mov	r3, r0
   16644:	460a      	mov	r2, r1
   16646:	71fb      	strb	r3, [r7, #7]
   16648:	4613      	mov	r3, r2
   1664a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   1664c:	79fb      	ldrb	r3, [r7, #7]
   1664e:	115b      	asrs	r3, r3, #5
   16650:	b2d8      	uxtb	r0, r3
   16652:	79fb      	ldrb	r3, [r7, #7]
   16654:	f003 031f 	and.w	r3, r3, #31
   16658:	2201      	movs	r2, #1
   1665a:	fa02 f303 	lsl.w	r3, r2, r3
   1665e:	79ba      	ldrb	r2, [r7, #6]
   16660:	4619      	mov	r1, r3
   16662:	4b03      	ldr	r3, [pc, #12]	; (16670 <gpio_set_pin_direction+0x34>)
   16664:	4798      	blx	r3
}
   16666:	bf00      	nop
   16668:	3708      	adds	r7, #8
   1666a:	46bd      	mov	sp, r7
   1666c:	bd80      	pop	{r7, pc}
   1666e:	bf00      	nop
   16670:	0001646d 	.word	0x0001646d

00016674 <gpio_set_pin_level>:
{
   16674:	b580      	push	{r7, lr}
   16676:	b082      	sub	sp, #8
   16678:	af00      	add	r7, sp, #0
   1667a:	4603      	mov	r3, r0
   1667c:	460a      	mov	r2, r1
   1667e:	71fb      	strb	r3, [r7, #7]
   16680:	4613      	mov	r3, r2
   16682:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   16684:	79fb      	ldrb	r3, [r7, #7]
   16686:	115b      	asrs	r3, r3, #5
   16688:	b2d8      	uxtb	r0, r3
   1668a:	79fb      	ldrb	r3, [r7, #7]
   1668c:	f003 031f 	and.w	r3, r3, #31
   16690:	2201      	movs	r2, #1
   16692:	fa02 f303 	lsl.w	r3, r2, r3
   16696:	79ba      	ldrb	r2, [r7, #6]
   16698:	4619      	mov	r1, r3
   1669a:	4b03      	ldr	r3, [pc, #12]	; (166a8 <gpio_set_pin_level+0x34>)
   1669c:	4798      	blx	r3
}
   1669e:	bf00      	nop
   166a0:	3708      	adds	r7, #8
   166a2:	46bd      	mov	sp, r7
   166a4:	bd80      	pop	{r7, pc}
   166a6:	bf00      	nop
   166a8:	00016555 	.word	0x00016555

000166ac <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   166ac:	b580      	push	{r7, lr}
   166ae:	b082      	sub	sp, #8
   166b0:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   166b2:	2100      	movs	r1, #0
   166b4:	2008      	movs	r0, #8
   166b6:	4b24      	ldr	r3, [pc, #144]	; (16748 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   166b8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   166ba:	2100      	movs	r1, #0
   166bc:	202b      	movs	r0, #43	; 0x2b
   166be:	4b22      	ldr	r3, [pc, #136]	; (16748 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   166c0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   166c2:	2100      	movs	r1, #0
   166c4:	202a      	movs	r0, #42	; 0x2a
   166c6:	4b20      	ldr	r3, [pc, #128]	; (16748 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   166c8:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   166ca:	2102      	movs	r1, #2
   166cc:	2008      	movs	r0, #8
   166ce:	4b1f      	ldr	r3, [pc, #124]	; (1674c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   166d0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   166d2:	2102      	movs	r1, #2
   166d4:	202b      	movs	r0, #43	; 0x2b
   166d6:	4b1d      	ldr	r3, [pc, #116]	; (1674c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   166d8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   166da:	2102      	movs	r1, #2
   166dc:	202a      	movs	r0, #42	; 0x2a
   166de:	4b1b      	ldr	r3, [pc, #108]	; (1674c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   166e0:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   166e2:	2101      	movs	r1, #1
   166e4:	2008      	movs	r0, #8
   166e6:	4b1a      	ldr	r3, [pc, #104]	; (16750 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   166e8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   166ea:	2100      	movs	r1, #0
   166ec:	202b      	movs	r0, #43	; 0x2b
   166ee:	4b18      	ldr	r3, [pc, #96]	; (16750 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   166f0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   166f2:	2100      	movs	r1, #0
   166f4:	202a      	movs	r0, #42	; 0x2a
   166f6:	4b16      	ldr	r3, [pc, #88]	; (16750 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   166f8:	4798      	blx	r3

	delay_us(1);
   166fa:	2001      	movs	r0, #1
   166fc:	4b15      	ldr	r3, [pc, #84]	; (16754 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   166fe:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   16700:	2300      	movs	r3, #0
   16702:	607b      	str	r3, [r7, #4]
   16704:	687b      	ldr	r3, [r7, #4]
   16706:	2b06      	cmp	r3, #6
   16708:	dc11      	bgt.n	1672e <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   1670a:	2101      	movs	r1, #1
   1670c:	202a      	movs	r0, #42	; 0x2a
   1670e:	4b10      	ldr	r3, [pc, #64]	; (16750 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16710:	4798      	blx	r3
		delay_us(1);
   16712:	2001      	movs	r0, #1
   16714:	4b0f      	ldr	r3, [pc, #60]	; (16754 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16716:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   16718:	2100      	movs	r1, #0
   1671a:	202a      	movs	r0, #42	; 0x2a
   1671c:	4b0c      	ldr	r3, [pc, #48]	; (16750 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1671e:	4798      	blx	r3
		delay_us(1);
   16720:	2001      	movs	r0, #1
   16722:	4b0c      	ldr	r3, [pc, #48]	; (16754 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16724:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   16726:	687b      	ldr	r3, [r7, #4]
   16728:	3301      	adds	r3, #1
   1672a:	607b      	str	r3, [r7, #4]
   1672c:	e7ea      	b.n	16704 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   1672e:	2101      	movs	r1, #1
   16730:	202b      	movs	r0, #43	; 0x2b
   16732:	4b07      	ldr	r3, [pc, #28]	; (16750 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16734:	4798      	blx	r3
	delay_us(1);
   16736:	2001      	movs	r0, #1
   16738:	4b06      	ldr	r3, [pc, #24]	; (16754 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1673a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   1673c:	4b06      	ldr	r3, [pc, #24]	; (16758 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   1673e:	4798      	blx	r3
}
   16740:	bf00      	nop
   16742:	3708      	adds	r7, #8
   16744:	46bd      	mov	sp, r7
   16746:	bd80      	pop	{r7, pc}
   16748:	0001661d 	.word	0x0001661d
   1674c:	0001663d 	.word	0x0001663d
   16750:	00016675 	.word	0x00016675
   16754:	0000647d 	.word	0x0000647d
   16758:	0000521d 	.word	0x0000521d

0001675c <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   1675c:	b480      	push	{r7}
   1675e:	b083      	sub	sp, #12
   16760:	af00      	add	r7, sp, #0
   16762:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   16764:	687b      	ldr	r3, [r7, #4]
   16766:	4618      	mov	r0, r3
   16768:	370c      	adds	r7, #12
   1676a:	46bd      	mov	sp, r7
   1676c:	bc80      	pop	{r7}
   1676e:	4770      	bx	lr

00016770 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   16770:	b480      	push	{r7}
   16772:	b083      	sub	sp, #12
   16774:	af00      	add	r7, sp, #0
   16776:	6078      	str	r0, [r7, #4]
   16778:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   1677a:	687b      	ldr	r3, [r7, #4]
   1677c:	683a      	ldr	r2, [r7, #0]
   1677e:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   16780:	687b      	ldr	r3, [r7, #4]
   16782:	4a04      	ldr	r2, [pc, #16]	; (16794 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   16784:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   16788:	687b      	ldr	r3, [r7, #4]
   1678a:	4618      	mov	r0, r3
   1678c:	370c      	adds	r7, #12
   1678e:	46bd      	mov	sp, r7
   16790:	bc80      	pop	{r7}
   16792:	4770      	bx	lr
   16794:	001fff00 	.word	0x001fff00

00016798 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   16798:	b480      	push	{r7}
   1679a:	b083      	sub	sp, #12
   1679c:	af00      	add	r7, sp, #0
   1679e:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   167a0:	687b      	ldr	r3, [r7, #4]
   167a2:	4618      	mov	r0, r3
   167a4:	370c      	adds	r7, #12
   167a6:	46bd      	mov	sp, r7
   167a8:	bc80      	pop	{r7}
   167aa:	4770      	bx	lr

000167ac <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   167ac:	b580      	push	{r7, lr}
   167ae:	b082      	sub	sp, #8
   167b0:	af00      	add	r7, sp, #0
   167b2:	6078      	str	r0, [r7, #4]
	xferDone=false;
   167b4:	687b      	ldr	r3, [r7, #4]
   167b6:	2200      	movs	r2, #0
   167b8:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   167ba:	6878      	ldr	r0, [r7, #4]
   167bc:	4b04      	ldr	r3, [pc, #16]	; (167d0 <_ZN13N25Q256_Class4InitEv+0x24>)
   167be:	4798      	blx	r3
	return SelfTest();
   167c0:	6878      	ldr	r0, [r7, #4]
   167c2:	4b04      	ldr	r3, [pc, #16]	; (167d4 <_ZN13N25Q256_Class4InitEv+0x28>)
   167c4:	4798      	blx	r3
   167c6:	4603      	mov	r3, r0
}
   167c8:	4618      	mov	r0, r3
   167ca:	3708      	adds	r7, #8
   167cc:	46bd      	mov	sp, r7
   167ce:	bd80      	pop	{r7, pc}
   167d0:	000167d9 	.word	0x000167d9
   167d4:	0001698d 	.word	0x0001698d

000167d8 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   167d8:	b590      	push	{r4, r7, lr}
   167da:	b083      	sub	sp, #12
   167dc:	af00      	add	r7, sp, #0
   167de:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   167e0:	687b      	ldr	r3, [r7, #4]
   167e2:	685b      	ldr	r3, [r3, #4]
   167e4:	4618      	mov	r0, r3
   167e6:	4b08      	ldr	r3, [pc, #32]	; (16808 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   167e8:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   167ea:	687b      	ldr	r3, [r7, #4]
   167ec:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   167ee:	2300      	movs	r3, #0
   167f0:	4a06      	ldr	r2, [pc, #24]	; (1680c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   167f2:	4807      	ldr	r0, [pc, #28]	; (16810 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   167f4:	4c07      	ldr	r4, [pc, #28]	; (16814 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   167f6:	47a0      	blx	r4
   167f8:	4602      	mov	r2, r0
   167fa:	687b      	ldr	r3, [r7, #4]
   167fc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   16800:	bf00      	nop
   16802:	370c      	adds	r7, #12
   16804:	46bd      	mov	sp, r7
   16806:	bd90      	pop	{r4, r7, pc}
   16808:	00006cc9 	.word	0x00006cc9
   1680c:	000166ad 	.word	0x000166ad
   16810:	20009c74 	.word	0x20009c74
   16814:	00010dc5 	.word	0x00010dc5

00016818 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   16818:	b580      	push	{r7, lr}
   1681a:	b084      	sub	sp, #16
   1681c:	af00      	add	r7, sp, #0
   1681e:	6078      	str	r0, [r7, #4]
   16820:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   16822:	687b      	ldr	r3, [r7, #4]
   16824:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   16828:	685b      	ldr	r3, [r3, #4]
   1682a:	689b      	ldr	r3, [r3, #8]
   1682c:	687a      	ldr	r2, [r7, #4]
   1682e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   16832:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16836:	6839      	ldr	r1, [r7, #0]
   16838:	4798      	blx	r3
   1683a:	4603      	mov	r3, r0
   1683c:	60fb      	str	r3, [r7, #12]
	return	e;
   1683e:	68fb      	ldr	r3, [r7, #12]
}
   16840:	4618      	mov	r0, r3
   16842:	3710      	adds	r7, #16
   16844:	46bd      	mov	sp, r7
   16846:	bd80      	pop	{r7, pc}

00016848 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   16848:	b590      	push	{r4, r7, lr}
   1684a:	b087      	sub	sp, #28
   1684c:	af00      	add	r7, sp, #0
   1684e:	60f8      	str	r0, [r7, #12]
   16850:	60b9      	str	r1, [r7, #8]
   16852:	607a      	str	r2, [r7, #4]
   16854:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   16856:	68fb      	ldr	r3, [r7, #12]
   16858:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1685c:	685b      	ldr	r3, [r3, #4]
   1685e:	685c      	ldr	r4, [r3, #4]
   16860:	68fb      	ldr	r3, [r7, #12]
   16862:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   16866:	683b      	ldr	r3, [r7, #0]
   16868:	687a      	ldr	r2, [r7, #4]
   1686a:	68b9      	ldr	r1, [r7, #8]
   1686c:	47a0      	blx	r4
   1686e:	4603      	mov	r3, r0
   16870:	617b      	str	r3, [r7, #20]
	return	w;
   16872:	697b      	ldr	r3, [r7, #20]
}
   16874:	4618      	mov	r0, r3
   16876:	371c      	adds	r7, #28
   16878:	46bd      	mov	sp, r7
   1687a:	bd90      	pop	{r4, r7, pc}

0001687c <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   1687c:	b590      	push	{r4, r7, lr}
   1687e:	b087      	sub	sp, #28
   16880:	af00      	add	r7, sp, #0
   16882:	60f8      	str	r0, [r7, #12]
   16884:	60b9      	str	r1, [r7, #8]
   16886:	607a      	str	r2, [r7, #4]
   16888:	603b      	str	r3, [r7, #0]
	xferDone=false;
   1688a:	68fb      	ldr	r3, [r7, #12]
   1688c:	2200      	movs	r2, #0
   1688e:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   16890:	68fb      	ldr	r3, [r7, #12]
   16892:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   16896:	685b      	ldr	r3, [r3, #4]
   16898:	681c      	ldr	r4, [r3, #0]
   1689a:	68fb      	ldr	r3, [r7, #12]
   1689c:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   168a0:	683b      	ldr	r3, [r7, #0]
   168a2:	687a      	ldr	r2, [r7, #4]
   168a4:	68b9      	ldr	r1, [r7, #8]
   168a6:	47a0      	blx	r4
   168a8:	4603      	mov	r3, r0
   168aa:	617b      	str	r3, [r7, #20]
	return	r;
   168ac:	697b      	ldr	r3, [r7, #20]
}
   168ae:	4618      	mov	r0, r3
   168b0:	371c      	adds	r7, #28
   168b2:	46bd      	mov	sp, r7
   168b4:	bd90      	pop	{r4, r7, pc}
	...

000168b8 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   168b8:	b580      	push	{r7, lr}
   168ba:	b082      	sub	sp, #8
   168bc:	af00      	add	r7, sp, #0
   168be:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   168c0:	687a      	ldr	r2, [r7, #4]
   168c2:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   168c6:	f043 0310 	orr.w	r3, r3, #16
   168ca:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   168ce:	687a      	ldr	r2, [r7, #4]
   168d0:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   168d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   168d8:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   168dc:	687a      	ldr	r2, [r7, #4]
   168de:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   168e2:	f36f 1305 	bfc	r3, #4, #2
   168e6:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   168ea:	687b      	ldr	r3, [r7, #4]
   168ec:	2205      	movs	r2, #5
   168ee:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   168f2:	687b      	ldr	r3, [r7, #4]
   168f4:	2201      	movs	r2, #1
   168f6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   168fa:	687b      	ldr	r3, [r7, #4]
   168fc:	f203 2212 	addw	r2, r3, #530	; 0x212
   16900:	687b      	ldr	r3, [r7, #4]
   16902:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   16906:	687b      	ldr	r3, [r7, #4]
   16908:	685a      	ldr	r2, [r3, #4]
   1690a:	687b      	ldr	r3, [r7, #4]
   1690c:	f503 7305 	add.w	r3, r3, #532	; 0x214
   16910:	4619      	mov	r1, r3
   16912:	4610      	mov	r0, r2
   16914:	4b04      	ldr	r3, [pc, #16]	; (16928 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   16916:	4798      	blx	r3
		return status;
   16918:	687b      	ldr	r3, [r7, #4]
   1691a:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   1691e:	4618      	mov	r0, r3
   16920:	3708      	adds	r7, #8
   16922:	46bd      	mov	sp, r7
   16924:	bd80      	pop	{r7, pc}
   16926:	bf00      	nop
   16928:	00006d41 	.word	0x00006d41

0001692c <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
uint32_t	N25Q256_Class::GetMemoryCapacity(){
   1692c:	b480      	push	{r7}
   1692e:	b083      	sub	sp, #12
   16930:	af00      	add	r7, sp, #0
   16932:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
   16934:	687b      	ldr	r3, [r7, #4]
   16936:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
   1693a:	4618      	mov	r0, r3
   1693c:	370c      	adds	r7, #12
   1693e:	46bd      	mov	sp, r7
   16940:	bc80      	pop	{r7}
   16942:	4770      	bx	lr

00016944 <_ZN13N25Q256_Class10WaitOnBusyEv>:
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   16944:	b580      	push	{r7, lr}
   16946:	b082      	sub	sp, #8
   16948:	af00      	add	r7, sp, #0
   1694a:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   1694c:	6878      	ldr	r0, [r7, #4]
   1694e:	4b0e      	ldr	r3, [pc, #56]	; (16988 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   16950:	4798      	blx	r3
   16952:	4603      	mov	r3, r0
   16954:	461a      	mov	r2, r3
   16956:	687b      	ldr	r3, [r7, #4]
   16958:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   1695c:	687b      	ldr	r3, [r7, #4]
   1695e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   16962:	f003 0301 	and.w	r3, r3, #1
   16966:	2b00      	cmp	r3, #0
   16968:	d000      	beq.n	1696c <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   1696a:	e7ef      	b.n	1694c <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   1696c:	687b      	ldr	r3, [r7, #4]
   1696e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   16972:	f003 0301 	and.w	r3, r3, #1
   16976:	2b00      	cmp	r3, #0
   16978:	bf0c      	ite	eq
   1697a:	2301      	moveq	r3, #1
   1697c:	2300      	movne	r3, #0
   1697e:	b2db      	uxtb	r3, r3
}
   16980:	4618      	mov	r0, r3
   16982:	3708      	adds	r7, #8
   16984:	46bd      	mov	sp, r7
   16986:	bd80      	pop	{r7, pc}
   16988:	000168b9 	.word	0x000168b9

0001698c <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   1698c:	b590      	push	{r4, r7, lr}
   1698e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   16992:	b085      	sub	sp, #20
   16994:	af00      	add	r7, sp, #0
   16996:	f107 0310 	add.w	r3, r7, #16
   1699a:	3b0c      	subs	r3, #12
   1699c:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   1699e:	f107 0310 	add.w	r3, r7, #16
   169a2:	3b0c      	subs	r3, #12
   169a4:	681b      	ldr	r3, [r3, #0]
   169a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   169aa:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   169ae:	f107 0310 	add.w	r3, r7, #16
   169b2:	3b0c      	subs	r3, #12
   169b4:	681b      	ldr	r3, [r3, #0]
   169b6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   169ba:	f107 0110 	add.w	r1, r7, #16
   169be:	3904      	subs	r1, #4
   169c0:	f107 0010 	add.w	r0, r7, #16
   169c4:	380c      	subs	r0, #12
   169c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   169ca:	6800      	ldr	r0, [r0, #0]
   169cc:	4c4b      	ldr	r4, [pc, #300]	; (16afc <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   169ce:	47a0      	blx	r4
	WaitOnBusy();
   169d0:	f107 0310 	add.w	r3, r7, #16
   169d4:	3b0c      	subs	r3, #12
   169d6:	6818      	ldr	r0, [r3, #0]
   169d8:	4b49      	ldr	r3, [pc, #292]	; (16b00 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   169da:	4798      	blx	r3
	Erase(currentAddress);
   169dc:	f107 0310 	add.w	r3, r7, #16
   169e0:	3b0c      	subs	r3, #12
   169e2:	681b      	ldr	r3, [r3, #0]
   169e4:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   169e8:	f107 0310 	add.w	r3, r7, #16
   169ec:	3b0c      	subs	r3, #12
   169ee:	4611      	mov	r1, r2
   169f0:	6818      	ldr	r0, [r3, #0]
   169f2:	4b44      	ldr	r3, [pc, #272]	; (16b04 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   169f4:	4798      	blx	r3
	WaitOnBusy();
   169f6:	f107 0310 	add.w	r3, r7, #16
   169fa:	3b0c      	subs	r3, #12
   169fc:	6818      	ldr	r0, [r3, #0]
   169fe:	4b40      	ldr	r3, [pc, #256]	; (16b00 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16a00:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   16a02:	f107 0310 	add.w	r3, r7, #16
   16a06:	3b0c      	subs	r3, #12
   16a08:	681b      	ldr	r3, [r3, #0]
   16a0a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16a0e:	f107 0110 	add.w	r1, r7, #16
   16a12:	3904      	subs	r1, #4
   16a14:	f107 0010 	add.w	r0, r7, #16
   16a18:	380c      	subs	r0, #12
   16a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16a1e:	6800      	ldr	r0, [r0, #0]
   16a20:	4c39      	ldr	r4, [pc, #228]	; (16b08 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   16a22:	47a0      	blx	r4
	WaitOnBusy();
   16a24:	f107 0310 	add.w	r3, r7, #16
   16a28:	3b0c      	subs	r3, #12
   16a2a:	6818      	ldr	r0, [r3, #0]
   16a2c:	4b34      	ldr	r3, [pc, #208]	; (16b00 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16a2e:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   16a30:	f107 0310 	add.w	r3, r7, #16
   16a34:	3b0c      	subs	r3, #12
   16a36:	681b      	ldr	r3, [r3, #0]
   16a38:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16a3c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   16a40:	f101 0110 	add.w	r1, r1, #16
   16a44:	3904      	subs	r1, #4
   16a46:	f107 0010 	add.w	r0, r7, #16
   16a4a:	380c      	subs	r0, #12
   16a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16a50:	6800      	ldr	r0, [r0, #0]
   16a52:	4c2a      	ldr	r4, [pc, #168]	; (16afc <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   16a54:	47a0      	blx	r4
	WaitOnBusy();
   16a56:	f107 0310 	add.w	r3, r7, #16
   16a5a:	3b0c      	subs	r3, #12
   16a5c:	6818      	ldr	r0, [r3, #0]
   16a5e:	4b28      	ldr	r3, [pc, #160]	; (16b00 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16a60:	4798      	blx	r3
	isOK	 = true;
   16a62:	f107 0310 	add.w	r3, r7, #16
   16a66:	3b0c      	subs	r3, #12
   16a68:	681b      	ldr	r3, [r3, #0]
   16a6a:	2201      	movs	r2, #1
   16a6c:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   16a70:	2300      	movs	r3, #0
   16a72:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   16a76:	f102 020c 	add.w	r2, r2, #12
   16a7a:	6013      	str	r3, [r2, #0]
   16a7c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   16a80:	f103 030c 	add.w	r3, r3, #12
   16a84:	681b      	ldr	r3, [r3, #0]
   16a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16a8a:	da2b      	bge.n	16ae4 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   16a8c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   16a90:	f103 0310 	add.w	r3, r3, #16
   16a94:	3b04      	subs	r3, #4
   16a96:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   16a9a:	f102 020c 	add.w	r2, r2, #12
   16a9e:	6812      	ldr	r2, [r2, #0]
   16aa0:	4413      	add	r3, r2
   16aa2:	781a      	ldrb	r2, [r3, #0]
   16aa4:	f107 0310 	add.w	r3, r7, #16
   16aa8:	3b04      	subs	r3, #4
   16aaa:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   16aae:	f101 010c 	add.w	r1, r1, #12
   16ab2:	6809      	ldr	r1, [r1, #0]
   16ab4:	440b      	add	r3, r1
   16ab6:	781b      	ldrb	r3, [r3, #0]
   16ab8:	429a      	cmp	r2, r3
   16aba:	d007      	beq.n	16acc <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   16abc:	f107 0310 	add.w	r3, r7, #16
   16ac0:	3b0c      	subs	r3, #12
   16ac2:	681b      	ldr	r3, [r3, #0]
   16ac4:	2200      	movs	r2, #0
   16ac6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   16aca:	e00b      	b.n	16ae4 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   16acc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   16ad0:	f103 030c 	add.w	r3, r3, #12
   16ad4:	681b      	ldr	r3, [r3, #0]
   16ad6:	3301      	adds	r3, #1
   16ad8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   16adc:	f102 020c 	add.w	r2, r2, #12
   16ae0:	6013      	str	r3, [r2, #0]
   16ae2:	e7cb      	b.n	16a7c <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   16ae4:	f107 0310 	add.w	r3, r7, #16
   16ae8:	3b0c      	subs	r3, #12
   16aea:	681b      	ldr	r3, [r3, #0]
   16aec:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   16af0:	4618      	mov	r0, r3
   16af2:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   16af6:	3714      	adds	r7, #20
   16af8:	46bd      	mov	sp, r7
   16afa:	bd90      	pop	{r4, r7, pc}
   16afc:	0001687d 	.word	0x0001687d
   16b00:	00016945 	.word	0x00016945
   16b04:	00016819 	.word	0x00016819
   16b08:	00016849 	.word	0x00016849

00016b0c <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   16b0c:	b580      	push	{r7, lr}
   16b0e:	b082      	sub	sp, #8
   16b10:	af00      	add	r7, sp, #0
   16b12:	6078      	str	r0, [r7, #4]
   16b14:	6039      	str	r1, [r7, #0]
   16b16:	687b      	ldr	r3, [r7, #4]
   16b18:	2b01      	cmp	r3, #1
   16b1a:	d10d      	bne.n	16b38 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   16b1c:	683b      	ldr	r3, [r7, #0]
   16b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16b22:	4293      	cmp	r3, r2
   16b24:	d108      	bne.n	16b38 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   16b26:	4906      	ldr	r1, [pc, #24]	; (16b40 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   16b28:	4806      	ldr	r0, [pc, #24]	; (16b44 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   16b2a:	4b07      	ldr	r3, [pc, #28]	; (16b48 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   16b2c:	4798      	blx	r3
   16b2e:	4a07      	ldr	r2, [pc, #28]	; (16b4c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   16b30:	4907      	ldr	r1, [pc, #28]	; (16b50 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   16b32:	4804      	ldr	r0, [pc, #16]	; (16b44 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   16b34:	4b07      	ldr	r3, [pc, #28]	; (16b54 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   16b36:	4798      	blx	r3
   16b38:	bf00      	nop
   16b3a:	3708      	adds	r7, #8
   16b3c:	46bd      	mov	sp, r7
   16b3e:	bd80      	pop	{r7, pc}
   16b40:	2000a5ec 	.word	0x2000a5ec
   16b44:	20009c84 	.word	0x20009c84
   16b48:	00016771 	.word	0x00016771
   16b4c:	20000000 	.word	0x20000000
   16b50:	00016799 	.word	0x00016799
   16b54:	00019ab1 	.word	0x00019ab1

00016b58 <_GLOBAL__sub_I_ptrN25Q256Class>:
   16b58:	b580      	push	{r7, lr}
   16b5a:	af00      	add	r7, sp, #0
   16b5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16b60:	2001      	movs	r0, #1
   16b62:	4b01      	ldr	r3, [pc, #4]	; (16b68 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   16b64:	4798      	blx	r3
   16b66:	bd80      	pop	{r7, pc}
   16b68:	00016b0d 	.word	0x00016b0d

00016b6c <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   16b6c:	b580      	push	{r7, lr}
   16b6e:	b082      	sub	sp, #8
   16b70:	af00      	add	r7, sp, #0
   16b72:	6078      	str	r0, [r7, #4]
   16b74:	687b      	ldr	r3, [r7, #4]
   16b76:	4618      	mov	r0, r3
   16b78:	4b06      	ldr	r3, [pc, #24]	; (16b94 <_ZN14Calendar_ClassC1Ev+0x28>)
   16b7a:	4798      	blx	r3
   16b7c:	4a06      	ldr	r2, [pc, #24]	; (16b98 <_ZN14Calendar_ClassC1Ev+0x2c>)
   16b7e:	687b      	ldr	r3, [r7, #4]
   16b80:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   16b82:	4a06      	ldr	r2, [pc, #24]	; (16b9c <_ZN14Calendar_ClassC1Ev+0x30>)
   16b84:	687b      	ldr	r3, [r7, #4]
   16b86:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   16b88:	687b      	ldr	r3, [r7, #4]
   16b8a:	4618      	mov	r0, r3
   16b8c:	3708      	adds	r7, #8
   16b8e:	46bd      	mov	sp, r7
   16b90:	bd80      	pop	{r7, pc}
   16b92:	bf00      	nop
   16b94:	000172b9 	.word	0x000172b9
   16b98:	00022f04 	.word	0x00022f04
   16b9c:	20009eb8 	.word	0x20009eb8

00016ba0 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   16ba0:	b580      	push	{r7, lr}
   16ba2:	b082      	sub	sp, #8
   16ba4:	af00      	add	r7, sp, #0
   16ba6:	6078      	str	r0, [r7, #4]
   16ba8:	6039      	str	r1, [r7, #0]
   16baa:	687b      	ldr	r3, [r7, #4]
   16bac:	4618      	mov	r0, r3
   16bae:	4b08      	ldr	r3, [pc, #32]	; (16bd0 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   16bb0:	4798      	blx	r3
   16bb2:	4a08      	ldr	r2, [pc, #32]	; (16bd4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   16bb4:	687b      	ldr	r3, [r7, #4]
   16bb6:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   16bb8:	687b      	ldr	r3, [r7, #4]
   16bba:	683a      	ldr	r2, [r7, #0]
   16bbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   16bc0:	4a05      	ldr	r2, [pc, #20]	; (16bd8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   16bc2:	687b      	ldr	r3, [r7, #4]
   16bc4:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   16bc6:	687b      	ldr	r3, [r7, #4]
   16bc8:	4618      	mov	r0, r3
   16bca:	3708      	adds	r7, #8
   16bcc:	46bd      	mov	sp, r7
   16bce:	bd80      	pop	{r7, pc}
   16bd0:	000172b9 	.word	0x000172b9
   16bd4:	00022f04 	.word	0x00022f04
   16bd8:	20009eb8 	.word	0x20009eb8

00016bdc <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   16bdc:	b580      	push	{r7, lr}
   16bde:	b082      	sub	sp, #8
   16be0:	af00      	add	r7, sp, #0
   16be2:	6078      	str	r0, [r7, #4]
   16be4:	4a05      	ldr	r2, [pc, #20]	; (16bfc <_ZN14Calendar_ClassD1Ev+0x20>)
   16be6:	687b      	ldr	r3, [r7, #4]
   16be8:	601a      	str	r2, [r3, #0]
   16bea:	687b      	ldr	r3, [r7, #4]
   16bec:	4618      	mov	r0, r3
   16bee:	4b04      	ldr	r3, [pc, #16]	; (16c00 <_ZN14Calendar_ClassD1Ev+0x24>)
   16bf0:	4798      	blx	r3
{
} //~Calendar_Class
   16bf2:	687b      	ldr	r3, [r7, #4]
   16bf4:	4618      	mov	r0, r3
   16bf6:	3708      	adds	r7, #8
   16bf8:	46bd      	mov	sp, r7
   16bfa:	bd80      	pop	{r7, pc}
   16bfc:	00022f04 	.word	0x00022f04
   16c00:	000172d9 	.word	0x000172d9

00016c04 <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
   16c04:	b580      	push	{r7, lr}
   16c06:	b082      	sub	sp, #8
   16c08:	af00      	add	r7, sp, #0
   16c0a:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
   16c0c:	687b      	ldr	r3, [r7, #4]
   16c0e:	4a50      	ldr	r2, [pc, #320]	; (16d50 <_ZN14Calendar_Class4InitEv+0x14c>)
   16c10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
   16c14:	687b      	ldr	r3, [r7, #4]
   16c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16c1a:	4618      	mov	r0, r3
   16c1c:	4b4d      	ldr	r3, [pc, #308]	; (16d54 <_ZN14Calendar_Class4InitEv+0x150>)
   16c1e:	4798      	blx	r3
	
	InitMaxDate();
   16c20:	6878      	ldr	r0, [r7, #4]
   16c22:	4b4d      	ldr	r3, [pc, #308]	; (16d58 <_ZN14Calendar_Class4InitEv+0x154>)
   16c24:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
   16c26:	687b      	ldr	r3, [r7, #4]
   16c28:	4618      	mov	r0, r3
   16c2a:	4b4c      	ldr	r3, [pc, #304]	; (16d5c <_ZN14Calendar_Class4InitEv+0x158>)
   16c2c:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   16c2e:	687b      	ldr	r3, [r7, #4]
   16c30:	681b      	ldr	r3, [r3, #0]
   16c32:	3304      	adds	r3, #4
   16c34:	681b      	ldr	r3, [r3, #0]
   16c36:	687a      	ldr	r2, [r7, #4]
   16c38:	3260      	adds	r2, #96	; 0x60
   16c3a:	4611      	mov	r1, r2
   16c3c:	6878      	ldr	r0, [r7, #4]
   16c3e:	4798      	blx	r3
   16c40:	4602      	mov	r2, r0
   16c42:	687b      	ldr	r3, [r7, #4]
   16c44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   16c48:	687b      	ldr	r3, [r7, #4]
   16c4a:	681b      	ldr	r3, [r3, #0]
   16c4c:	3304      	adds	r3, #4
   16c4e:	681b      	ldr	r3, [r3, #0]
   16c50:	687a      	ldr	r2, [r7, #4]
   16c52:	326c      	adds	r2, #108	; 0x6c
   16c54:	4611      	mov	r1, r2
   16c56:	6878      	ldr	r0, [r7, #4]
   16c58:	4798      	blx	r3
   16c5a:	4602      	mov	r2, r0
   16c5c:	687b      	ldr	r3, [r7, #4]
   16c5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   16c62:	687b      	ldr	r3, [r7, #4]
   16c64:	681b      	ldr	r3, [r3, #0]
   16c66:	3304      	adds	r3, #4
   16c68:	681b      	ldr	r3, [r3, #0]
   16c6a:	687a      	ldr	r2, [r7, #4]
   16c6c:	327c      	adds	r2, #124	; 0x7c
   16c6e:	4611      	mov	r1, r2
   16c70:	6878      	ldr	r0, [r7, #4]
   16c72:	4798      	blx	r3
   16c74:	4602      	mov	r2, r0
   16c76:	687b      	ldr	r3, [r7, #4]
   16c78:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   16c7c:	687b      	ldr	r3, [r7, #4]
   16c7e:	681b      	ldr	r3, [r3, #0]
   16c80:	3304      	adds	r3, #4
   16c82:	681b      	ldr	r3, [r3, #0]
   16c84:	687a      	ldr	r2, [r7, #4]
   16c86:	3284      	adds	r2, #132	; 0x84
   16c88:	4611      	mov	r1, r2
   16c8a:	6878      	ldr	r0, [r7, #4]
   16c8c:	4798      	blx	r3
   16c8e:	4602      	mov	r2, r0
   16c90:	687b      	ldr	r3, [r7, #4]
   16c92:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   16c94:	6878      	ldr	r0, [r7, #4]
   16c96:	4b32      	ldr	r3, [pc, #200]	; (16d60 <_ZN14Calendar_Class4InitEv+0x15c>)
   16c98:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   16c9a:	687b      	ldr	r3, [r7, #4]
   16c9c:	681b      	ldr	r3, [r3, #0]
   16c9e:	3304      	adds	r3, #4
   16ca0:	681b      	ldr	r3, [r3, #0]
   16ca2:	687a      	ldr	r2, [r7, #4]
   16ca4:	3274      	adds	r2, #116	; 0x74
   16ca6:	4611      	mov	r1, r2
   16ca8:	6878      	ldr	r0, [r7, #4]
   16caa:	4798      	blx	r3
   16cac:	4602      	mov	r2, r0
   16cae:	687b      	ldr	r3, [r7, #4]
   16cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   16cb4:	687b      	ldr	r3, [r7, #4]
   16cb6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16cba:	687b      	ldr	r3, [r7, #4]
   16cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   16cc0:	429a      	cmp	r2, r3
   16cc2:	d80e      	bhi.n	16ce2 <_ZN14Calendar_Class4InitEv+0xde>
   16cc4:	687b      	ldr	r3, [r7, #4]
   16cc6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16cca:	687b      	ldr	r3, [r7, #4]
   16ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   16cd0:	429a      	cmp	r2, r3
   16cd2:	d006      	beq.n	16ce2 <_ZN14Calendar_Class4InitEv+0xde>
   16cd4:	687b      	ldr	r3, [r7, #4]
   16cd6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16cda:	687b      	ldr	r3, [r7, #4]
   16cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   16cde:	429a      	cmp	r2, r3
   16ce0:	d106      	bne.n	16cf0 <_ZN14Calendar_Class4InitEv+0xec>
	{
		SetDateTime(&compilationDateTime);
   16ce2:	687b      	ldr	r3, [r7, #4]
   16ce4:	3374      	adds	r3, #116	; 0x74
   16ce6:	4619      	mov	r1, r3
   16ce8:	6878      	ldr	r0, [r7, #4]
   16cea:	4b1e      	ldr	r3, [pc, #120]	; (16d64 <_ZN14Calendar_Class4InitEv+0x160>)
   16cec:	4798      	blx	r3
   16cee:	e022      	b.n	16d36 <_ZN14Calendar_Class4InitEv+0x132>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
   16cf0:	687b      	ldr	r3, [r7, #4]
   16cf2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16cf6:	687b      	ldr	r3, [r7, #4]
   16cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   16cfc:	429a      	cmp	r2, r3
   16cfe:	d206      	bcs.n	16d0e <_ZN14Calendar_Class4InitEv+0x10a>
		{
			SetDateTime(&compilationDateTime);
   16d00:	687b      	ldr	r3, [r7, #4]
   16d02:	3374      	adds	r3, #116	; 0x74
   16d04:	4619      	mov	r1, r3
   16d06:	6878      	ldr	r0, [r7, #4]
   16d08:	4b16      	ldr	r3, [pc, #88]	; (16d64 <_ZN14Calendar_Class4InitEv+0x160>)
   16d0a:	4798      	blx	r3
   16d0c:	e013      	b.n	16d36 <_ZN14Calendar_Class4InitEv+0x132>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   16d0e:	687b      	ldr	r3, [r7, #4]
   16d10:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16d14:	687b      	ldr	r3, [r7, #4]
   16d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   16d18:	429a      	cmp	r2, r3
   16d1a:	d106      	bne.n	16d2a <_ZN14Calendar_Class4InitEv+0x126>
			{
				SetDateTime(&compilationDateTime);
   16d1c:	687b      	ldr	r3, [r7, #4]
   16d1e:	3374      	adds	r3, #116	; 0x74
   16d20:	4619      	mov	r1, r3
   16d22:	6878      	ldr	r0, [r7, #4]
   16d24:	4b0f      	ldr	r3, [pc, #60]	; (16d64 <_ZN14Calendar_Class4InitEv+0x160>)
   16d26:	4798      	blx	r3
   16d28:	e005      	b.n	16d36 <_ZN14Calendar_Class4InitEv+0x132>
			} 
			else
			{
				SetDateTime(&lastDateTime);
   16d2a:	687b      	ldr	r3, [r7, #4]
   16d2c:	3360      	adds	r3, #96	; 0x60
   16d2e:	4619      	mov	r1, r3
   16d30:	6878      	ldr	r0, [r7, #4]
   16d32:	4b0c      	ldr	r3, [pc, #48]	; (16d64 <_ZN14Calendar_Class4InitEv+0x160>)
   16d34:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
   16d36:	687b      	ldr	r3, [r7, #4]
   16d38:	2200      	movs	r2, #0
   16d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
   16d3e:	687b      	ldr	r3, [r7, #4]
   16d40:	4618      	mov	r0, r3
   16d42:	4b09      	ldr	r3, [pc, #36]	; (16d68 <_ZN14Calendar_Class4InitEv+0x164>)
   16d44:	4798      	blx	r3
	
}
   16d46:	bf00      	nop
   16d48:	3708      	adds	r7, #8
   16d4a:	46bd      	mov	sp, r7
   16d4c:	bd80      	pop	{r7, pc}
   16d4e:	bf00      	nop
   16d50:	20009c3c 	.word	0x20009c3c
   16d54:	00006109 	.word	0x00006109
   16d58:	00016d6d 	.word	0x00016d6d
   16d5c:	0001758d 	.word	0x0001758d
   16d60:	00016e13 	.word	0x00016e13
   16d64:	00017009 	.word	0x00017009
   16d68:	0001751d 	.word	0x0001751d

00016d6c <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
   16d6c:	b480      	push	{r7}
   16d6e:	b083      	sub	sp, #12
   16d70:	af00      	add	r7, sp, #0
   16d72:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   16d74:	687b      	ldr	r3, [r7, #4]
   16d76:	f640 0202 	movw	r2, #2050	; 0x802
   16d7a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   16d7e:	687b      	ldr	r3, [r7, #4]
   16d80:	220c      	movs	r2, #12
   16d82:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   16d86:	687b      	ldr	r3, [r7, #4]
   16d88:	221f      	movs	r2, #31
   16d8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   16d8e:	687b      	ldr	r3, [r7, #4]
   16d90:	220c      	movs	r2, #12
   16d92:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   16d96:	687b      	ldr	r3, [r7, #4]
   16d98:	223b      	movs	r2, #59	; 0x3b
   16d9a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   16d9e:	687b      	ldr	r3, [r7, #4]
   16da0:	223b      	movs	r2, #59	; 0x3b
   16da2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   16da6:	687b      	ldr	r3, [r7, #4]
   16da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16dac:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   16db0:	687b      	ldr	r3, [r7, #4]
   16db2:	22ff      	movs	r2, #255	; 0xff
   16db4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   16db8:	687b      	ldr	r3, [r7, #4]
   16dba:	22ff      	movs	r2, #255	; 0xff
   16dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   16dc0:	687b      	ldr	r3, [r7, #4]
   16dc2:	22ff      	movs	r2, #255	; 0xff
   16dc4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   16dc8:	687b      	ldr	r3, [r7, #4]
   16dca:	22ff      	movs	r2, #255	; 0xff
   16dcc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   16dd0:	687b      	ldr	r3, [r7, #4]
   16dd2:	22ff      	movs	r2, #255	; 0xff
   16dd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   16dd8:	687b      	ldr	r3, [r7, #4]
   16dda:	2200      	movs	r2, #0
   16ddc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   16de0:	687b      	ldr	r3, [r7, #4]
   16de2:	2200      	movs	r2, #0
   16de4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   16de8:	687b      	ldr	r3, [r7, #4]
   16dea:	2200      	movs	r2, #0
   16dec:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   16df0:	687b      	ldr	r3, [r7, #4]
   16df2:	2200      	movs	r2, #0
   16df4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   16df8:	687b      	ldr	r3, [r7, #4]
   16dfa:	2200      	movs	r2, #0
   16dfc:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   16e00:	687b      	ldr	r3, [r7, #4]
   16e02:	2200      	movs	r2, #0
   16e04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   16e08:	bf00      	nop
   16e0a:	370c      	adds	r7, #12
   16e0c:	46bd      	mov	sp, r7
   16e0e:	bc80      	pop	{r7}
   16e10:	4770      	bx	lr

00016e12 <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   16e12:	b480      	push	{r7}
   16e14:	b083      	sub	sp, #12
   16e16:	af00      	add	r7, sp, #0
   16e18:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   16e1a:	2332      	movs	r3, #50	; 0x32
   16e1c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16e20:	4613      	mov	r3, r2
   16e22:	009b      	lsls	r3, r3, #2
   16e24:	4413      	add	r3, r2
   16e26:	005b      	lsls	r3, r3, #1
   16e28:	461a      	mov	r2, r3
   16e2a:	2330      	movs	r3, #48	; 0x30
   16e2c:	3b30      	subs	r3, #48	; 0x30
   16e2e:	441a      	add	r2, r3
   16e30:	4613      	mov	r3, r2
   16e32:	009b      	lsls	r3, r3, #2
   16e34:	4413      	add	r3, r2
   16e36:	005b      	lsls	r3, r3, #1
   16e38:	461a      	mov	r2, r3
   16e3a:	2332      	movs	r3, #50	; 0x32
   16e3c:	3b30      	subs	r3, #48	; 0x30
   16e3e:	4413      	add	r3, r2
   16e40:	b29b      	uxth	r3, r3
   16e42:	461a      	mov	r2, r3
   16e44:	0092      	lsls	r2, r2, #2
   16e46:	4413      	add	r3, r2
   16e48:	005b      	lsls	r3, r3, #1
   16e4a:	b29a      	uxth	r2, r3
   16e4c:	2330      	movs	r3, #48	; 0x30
   16e4e:	b29b      	uxth	r3, r3
   16e50:	4413      	add	r3, r2
   16e52:	b29b      	uxth	r3, r3
   16e54:	3b30      	subs	r3, #48	; 0x30
   16e56:	b29a      	uxth	r2, r3
   16e58:	687b      	ldr	r3, [r7, #4]
   16e5a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   16e5e:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16e60:	2b6e      	cmp	r3, #110	; 0x6e
   16e62:	d106      	bne.n	16e72 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   16e64:	2363      	movs	r3, #99	; 0x63
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16e66:	2b61      	cmp	r3, #97	; 0x61
   16e68:	d101      	bne.n	16e6e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   16e6a:	2301      	movs	r3, #1
   16e6c:	e02f      	b.n	16ece <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16e6e:	2306      	movs	r3, #6
   16e70:	e02d      	b.n	16ece <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   16e72:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16e74:	2b62      	cmp	r3, #98	; 0x62
   16e76:	d029      	beq.n	16ecc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   16e78:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16e7a:	2b72      	cmp	r3, #114	; 0x72
   16e7c:	d106      	bne.n	16e8c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   16e7e:	234f      	movs	r3, #79	; 0x4f
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16e80:	2b4d      	cmp	r3, #77	; 0x4d
   16e82:	d101      	bne.n	16e88 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   16e84:	2303      	movs	r3, #3
   16e86:	e022      	b.n	16ece <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16e88:	2304      	movs	r3, #4
   16e8a:	e020      	b.n	16ece <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   16e8c:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16e8e:	2b79      	cmp	r3, #121	; 0x79
   16e90:	d01a      	beq.n	16ec8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   16e92:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16e94:	2b6c      	cmp	r3, #108	; 0x6c
   16e96:	d015      	beq.n	16ec4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   16e98:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16e9a:	2b67      	cmp	r3, #103	; 0x67
   16e9c:	d010      	beq.n	16ec0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   16e9e:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16ea0:	2b70      	cmp	r3, #112	; 0x70
   16ea2:	d00b      	beq.n	16ebc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   16ea4:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16ea6:	2b74      	cmp	r3, #116	; 0x74
   16ea8:	d006      	beq.n	16eb8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   16eaa:	2374      	movs	r3, #116	; 0x74
   16eac:	2b76      	cmp	r3, #118	; 0x76
   16eae:	d101      	bne.n	16eb4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   16eb0:	230b      	movs	r3, #11
   16eb2:	e00c      	b.n	16ece <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16eb4:	230c      	movs	r3, #12
   16eb6:	e00a      	b.n	16ece <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16eb8:	230a      	movs	r3, #10
   16eba:	e008      	b.n	16ece <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16ebc:	2309      	movs	r3, #9
   16ebe:	e006      	b.n	16ece <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16ec0:	2308      	movs	r3, #8
   16ec2:	e004      	b.n	16ece <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16ec4:	2307      	movs	r3, #7
   16ec6:	e002      	b.n	16ece <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16ec8:	2305      	movs	r3, #5
   16eca:	e000      	b.n	16ece <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16ecc:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   16ece:	687a      	ldr	r2, [r7, #4]
   16ed0:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   16ed4:	2332      	movs	r3, #50	; 0x32
   16ed6:	2b20      	cmp	r3, #32
   16ed8:	d008      	beq.n	16eec <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   16eda:	2332      	movs	r3, #50	; 0x32
   16edc:	3b30      	subs	r3, #48	; 0x30
   16ede:	b2db      	uxtb	r3, r3
   16ee0:	461a      	mov	r2, r3
   16ee2:	0092      	lsls	r2, r2, #2
   16ee4:	4413      	add	r3, r2
   16ee6:	005b      	lsls	r3, r3, #1
   16ee8:	b2db      	uxtb	r3, r3
   16eea:	e000      	b.n	16eee <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   16eec:	2300      	movs	r3, #0
   16eee:	2230      	movs	r2, #48	; 0x30
   16ef0:	4413      	add	r3, r2
   16ef2:	b2db      	uxtb	r3, r3
   16ef4:	3b30      	subs	r3, #48	; 0x30
   16ef6:	b2da      	uxtb	r2, r3
   16ef8:	687b      	ldr	r3, [r7, #4]
   16efa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   16efe:	2331      	movs	r3, #49	; 0x31
   16f00:	3b30      	subs	r3, #48	; 0x30
   16f02:	b2db      	uxtb	r3, r3
   16f04:	461a      	mov	r2, r3
   16f06:	0092      	lsls	r2, r2, #2
   16f08:	4413      	add	r3, r2
   16f0a:	005b      	lsls	r3, r3, #1
   16f0c:	b2db      	uxtb	r3, r3
   16f0e:	2235      	movs	r2, #53	; 0x35
   16f10:	4413      	add	r3, r2
   16f12:	b2db      	uxtb	r3, r3
   16f14:	3b30      	subs	r3, #48	; 0x30
   16f16:	b2da      	uxtb	r2, r3
   16f18:	687b      	ldr	r3, [r7, #4]
   16f1a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   16f1e:	2333      	movs	r3, #51	; 0x33
   16f20:	3b30      	subs	r3, #48	; 0x30
   16f22:	b2db      	uxtb	r3, r3
   16f24:	461a      	mov	r2, r3
   16f26:	0092      	lsls	r2, r2, #2
   16f28:	4413      	add	r3, r2
   16f2a:	005b      	lsls	r3, r3, #1
   16f2c:	b2db      	uxtb	r3, r3
   16f2e:	2235      	movs	r2, #53	; 0x35
   16f30:	4413      	add	r3, r2
   16f32:	b2db      	uxtb	r3, r3
   16f34:	3b30      	subs	r3, #48	; 0x30
   16f36:	b2da      	uxtb	r2, r3
   16f38:	687b      	ldr	r3, [r7, #4]
   16f3a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   16f3e:	2335      	movs	r3, #53	; 0x35
   16f40:	3b30      	subs	r3, #48	; 0x30
   16f42:	b2db      	uxtb	r3, r3
   16f44:	461a      	mov	r2, r3
   16f46:	0092      	lsls	r2, r2, #2
   16f48:	4413      	add	r3, r2
   16f4a:	005b      	lsls	r3, r3, #1
   16f4c:	b2db      	uxtb	r3, r3
   16f4e:	2233      	movs	r2, #51	; 0x33
   16f50:	4413      	add	r3, r2
   16f52:	b2db      	uxtb	r3, r3
   16f54:	3b30      	subs	r3, #48	; 0x30
   16f56:	b2da      	uxtb	r2, r3
   16f58:	687b      	ldr	r3, [r7, #4]
   16f5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
   16f5e:	bf00      	nop
   16f60:	370c      	adds	r7, #12
   16f62:	46bd      	mov	sp, r7
   16f64:	bc80      	pop	{r7}
   16f66:	4770      	bx	lr

00016f68 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   16f68:	b580      	push	{r7, lr}
   16f6a:	b082      	sub	sp, #8
   16f6c:	af00      	add	r7, sp, #0
   16f6e:	6078      	str	r0, [r7, #4]
   16f70:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   16f72:	687b      	ldr	r3, [r7, #4]
   16f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16f78:	6839      	ldr	r1, [r7, #0]
   16f7a:	4618      	mov	r0, r3
   16f7c:	4b03      	ldr	r3, [pc, #12]	; (16f8c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   16f7e:	4798      	blx	r3
   16f80:	4603      	mov	r3, r0
}
   16f82:	4618      	mov	r0, r3
   16f84:	3708      	adds	r7, #8
   16f86:	46bd      	mov	sp, r7
   16f88:	bd80      	pop	{r7, pc}
   16f8a:	bf00      	nop
   16f8c:	00006259 	.word	0x00006259

00016f90 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   16f90:	b480      	push	{r7}
   16f92:	b083      	sub	sp, #12
   16f94:	af00      	add	r7, sp, #0
   16f96:	6078      	str	r0, [r7, #4]
   16f98:	460b      	mov	r3, r1
   16f9a:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   16f9c:	887b      	ldrh	r3, [r7, #2]
   16f9e:	f003 0303 	and.w	r3, r3, #3
   16fa2:	2b00      	cmp	r3, #0
   16fa4:	d001      	beq.n	16faa <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   16fa6:	2300      	movs	r3, #0
   16fa8:	e000      	b.n	16fac <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   16faa:	2301      	movs	r3, #1
	}
}
   16fac:	4618      	mov	r0, r3
   16fae:	370c      	adds	r7, #12
   16fb0:	46bd      	mov	sp, r7
   16fb2:	bc80      	pop	{r7}
   16fb4:	4770      	bx	lr
	...

00016fb8 <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   16fb8:	b580      	push	{r7, lr}
   16fba:	b082      	sub	sp, #8
   16fbc:	af00      	add	r7, sp, #0
   16fbe:	6078      	str	r0, [r7, #4]
   16fc0:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   16fc2:	687b      	ldr	r3, [r7, #4]
   16fc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16fc8:	6839      	ldr	r1, [r7, #0]
   16fca:	4618      	mov	r0, r3
   16fcc:	4b03      	ldr	r3, [pc, #12]	; (16fdc <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   16fce:	4798      	blx	r3
   16fd0:	4603      	mov	r3, r0
}
   16fd2:	4618      	mov	r0, r3
   16fd4:	3708      	adds	r7, #8
   16fd6:	46bd      	mov	sp, r7
   16fd8:	bd80      	pop	{r7, pc}
   16fda:	bf00      	nop
   16fdc:	00006149 	.word	0x00006149

00016fe0 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   16fe0:	b580      	push	{r7, lr}
   16fe2:	b082      	sub	sp, #8
   16fe4:	af00      	add	r7, sp, #0
   16fe6:	6078      	str	r0, [r7, #4]
   16fe8:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   16fea:	687b      	ldr	r3, [r7, #4]
   16fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   16ff0:	6839      	ldr	r1, [r7, #0]
   16ff2:	4618      	mov	r0, r3
   16ff4:	4b03      	ldr	r3, [pc, #12]	; (17004 <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   16ff6:	4798      	blx	r3
   16ff8:	4603      	mov	r3, r0
}
   16ffa:	4618      	mov	r0, r3
   16ffc:	3708      	adds	r7, #8
   16ffe:	46bd      	mov	sp, r7
   17000:	bd80      	pop	{r7, pc}
   17002:	bf00      	nop
   17004:	000061d1 	.word	0x000061d1

00017008 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   17008:	b580      	push	{r7, lr}
   1700a:	b084      	sub	sp, #16
   1700c:	af00      	add	r7, sp, #0
   1700e:	6078      	str	r0, [r7, #4]
   17010:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   17012:	683a      	ldr	r2, [r7, #0]
   17014:	f107 030c 	add.w	r3, r7, #12
   17018:	3204      	adds	r2, #4
   1701a:	6810      	ldr	r0, [r2, #0]
   1701c:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   1701e:	f107 030c 	add.w	r3, r7, #12
   17022:	4619      	mov	r1, r3
   17024:	6878      	ldr	r0, [r7, #4]
   17026:	4b0a      	ldr	r3, [pc, #40]	; (17050 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   17028:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   1702a:	683a      	ldr	r2, [r7, #0]
   1702c:	f107 0308 	add.w	r3, r7, #8
   17030:	8811      	ldrh	r1, [r2, #0]
   17032:	7892      	ldrb	r2, [r2, #2]
   17034:	8019      	strh	r1, [r3, #0]
   17036:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   17038:	f107 0308 	add.w	r3, r7, #8
   1703c:	4619      	mov	r1, r3
   1703e:	6878      	ldr	r0, [r7, #4]
   17040:	4b04      	ldr	r3, [pc, #16]	; (17054 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   17042:	4798      	blx	r3
   17044:	4603      	mov	r3, r0
			
}
   17046:	4618      	mov	r0, r3
   17048:	3710      	adds	r7, #16
   1704a:	46bd      	mov	sp, r7
   1704c:	bd80      	pop	{r7, pc}
   1704e:	bf00      	nop
   17050:	00016fe1 	.word	0x00016fe1
   17054:	00016fb9 	.word	0x00016fb9

00017058 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   17058:	b580      	push	{r7, lr}
   1705a:	b086      	sub	sp, #24
   1705c:	af00      	add	r7, sp, #0
   1705e:	6078      	str	r0, [r7, #4]
   17060:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   17062:	2300      	movs	r3, #0
   17064:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   17066:	2300      	movs	r3, #0
   17068:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   1706a:	683b      	ldr	r3, [r7, #0]
   1706c:	88db      	ldrh	r3, [r3, #6]
   1706e:	b2da      	uxtb	r2, r3
   17070:	687b      	ldr	r3, [r7, #4]
   17072:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   17076:	699b      	ldr	r3, [r3, #24]
   17078:	b2db      	uxtb	r3, r3
   1707a:	1ad3      	subs	r3, r2, r3
   1707c:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   1707e:	683b      	ldr	r3, [r7, #0]
   17080:	795b      	ldrb	r3, [r3, #5]
   17082:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   17084:	683b      	ldr	r3, [r7, #0]
   17086:	791b      	ldrb	r3, [r3, #4]
   17088:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   1708a:	683b      	ldr	r3, [r7, #0]
   1708c:	789b      	ldrb	r3, [r3, #2]
   1708e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   17090:	683b      	ldr	r3, [r7, #0]
   17092:	785b      	ldrb	r3, [r3, #1]
   17094:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   17096:	683b      	ldr	r3, [r7, #0]
   17098:	781b      	ldrb	r3, [r3, #0]
   1709a:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   1709c:	2300      	movs	r3, #0
   1709e:	613b      	str	r3, [r7, #16]
   170a0:	7bfa      	ldrb	r2, [r7, #15]
   170a2:	693b      	ldr	r3, [r7, #16]
   170a4:	429a      	cmp	r2, r3
   170a6:	d91e      	bls.n	170e6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   170a8:	687b      	ldr	r3, [r7, #4]
   170aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   170ae:	699b      	ldr	r3, [r3, #24]
   170b0:	b29a      	uxth	r2, r3
   170b2:	693b      	ldr	r3, [r7, #16]
   170b4:	b29b      	uxth	r3, r3
   170b6:	4413      	add	r3, r2
   170b8:	b29b      	uxth	r3, r3
   170ba:	4619      	mov	r1, r3
   170bc:	6878      	ldr	r0, [r7, #4]
   170be:	4b27      	ldr	r3, [pc, #156]	; (1715c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   170c0:	4798      	blx	r3
   170c2:	4603      	mov	r3, r0
   170c4:	2b00      	cmp	r3, #0
   170c6:	d006      	beq.n	170d6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   170c8:	697b      	ldr	r3, [r7, #20]
   170ca:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   170ce:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   170d2:	617b      	str	r3, [r7, #20]
   170d4:	e003      	b.n	170de <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   170d6:	697a      	ldr	r2, [r7, #20]
   170d8:	4b21      	ldr	r3, [pc, #132]	; (17160 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   170da:	4413      	add	r3, r2
   170dc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   170de:	693b      	ldr	r3, [r7, #16]
   170e0:	3301      	adds	r3, #1
   170e2:	613b      	str	r3, [r7, #16]
   170e4:	e7dc      	b.n	170a0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   170e6:	2301      	movs	r3, #1
   170e8:	613b      	str	r3, [r7, #16]
   170ea:	7bba      	ldrb	r2, [r7, #14]
   170ec:	693b      	ldr	r3, [r7, #16]
   170ee:	429a      	cmp	r2, r3
   170f0:	d910      	bls.n	17114 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   170f2:	683b      	ldr	r3, [r7, #0]
   170f4:	88db      	ldrh	r3, [r3, #6]
   170f6:	4619      	mov	r1, r3
   170f8:	693b      	ldr	r3, [r7, #16]
   170fa:	b2db      	uxtb	r3, r3
   170fc:	461a      	mov	r2, r3
   170fe:	6878      	ldr	r0, [r7, #4]
   17100:	4b18      	ldr	r3, [pc, #96]	; (17164 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   17102:	4798      	blx	r3
   17104:	4602      	mov	r2, r0
   17106:	697b      	ldr	r3, [r7, #20]
   17108:	4413      	add	r3, r2
   1710a:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   1710c:	693b      	ldr	r3, [r7, #16]
   1710e:	3301      	adds	r3, #1
   17110:	613b      	str	r3, [r7, #16]
   17112:	e7ea      	b.n	170ea <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   17114:	7b7b      	ldrb	r3, [r7, #13]
   17116:	3b01      	subs	r3, #1
   17118:	4a13      	ldr	r2, [pc, #76]	; (17168 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   1711a:	fb02 f303 	mul.w	r3, r2, r3
   1711e:	461a      	mov	r2, r3
   17120:	697b      	ldr	r3, [r7, #20]
   17122:	4413      	add	r3, r2
   17124:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   17126:	7b3b      	ldrb	r3, [r7, #12]
   17128:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1712c:	fb02 f303 	mul.w	r3, r2, r3
   17130:	461a      	mov	r2, r3
   17132:	697b      	ldr	r3, [r7, #20]
   17134:	4413      	add	r3, r2
   17136:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   17138:	7afa      	ldrb	r2, [r7, #11]
   1713a:	4613      	mov	r3, r2
   1713c:	011b      	lsls	r3, r3, #4
   1713e:	1a9b      	subs	r3, r3, r2
   17140:	009b      	lsls	r3, r3, #2
   17142:	461a      	mov	r2, r3
   17144:	697b      	ldr	r3, [r7, #20]
   17146:	4413      	add	r3, r2
   17148:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   1714a:	7abb      	ldrb	r3, [r7, #10]
   1714c:	697a      	ldr	r2, [r7, #20]
   1714e:	4413      	add	r3, r2
   17150:	617b      	str	r3, [r7, #20]

	return tmp;
   17152:	697b      	ldr	r3, [r7, #20]
}
   17154:	4618      	mov	r0, r3
   17156:	3718      	adds	r7, #24
   17158:	46bd      	mov	sp, r7
   1715a:	bd80      	pop	{r7, pc}
   1715c:	00016f91 	.word	0x00016f91
   17160:	01e13380 	.word	0x01e13380
   17164:	0001716d 	.word	0x0001716d
   17168:	00015180 	.word	0x00015180

0001716c <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   1716c:	b580      	push	{r7, lr}
   1716e:	b086      	sub	sp, #24
   17170:	af00      	add	r7, sp, #0
   17172:	60f8      	str	r0, [r7, #12]
   17174:	60b9      	str	r1, [r7, #8]
   17176:	4613      	mov	r3, r2
   17178:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   1717a:	2300      	movs	r3, #0
   1717c:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   1717e:	68bb      	ldr	r3, [r7, #8]
   17180:	b29b      	uxth	r3, r3
   17182:	4619      	mov	r1, r3
   17184:	68f8      	ldr	r0, [r7, #12]
   17186:	4b2f      	ldr	r3, [pc, #188]	; (17244 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   17188:	4798      	blx	r3
   1718a:	4603      	mov	r3, r0
   1718c:	2b00      	cmp	r3, #0
   1718e:	d028      	beq.n	171e2 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   17190:	79fb      	ldrb	r3, [r7, #7]
   17192:	3b01      	subs	r3, #1
   17194:	2b0b      	cmp	r3, #11
   17196:	d84c      	bhi.n	17232 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   17198:	a201      	add	r2, pc, #4	; (adr r2, 171a0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   1719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1719e:	bf00      	nop
   171a0:	000171d1 	.word	0x000171d1
   171a4:	000171d7 	.word	0x000171d7
   171a8:	000171d1 	.word	0x000171d1
   171ac:	000171dd 	.word	0x000171dd
   171b0:	000171d1 	.word	0x000171d1
   171b4:	000171dd 	.word	0x000171dd
   171b8:	000171d1 	.word	0x000171d1
   171bc:	000171d1 	.word	0x000171d1
   171c0:	000171dd 	.word	0x000171dd
   171c4:	000171d1 	.word	0x000171d1
   171c8:	000171dd 	.word	0x000171dd
   171cc:	000171d1 	.word	0x000171d1
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   171d0:	4b1d      	ldr	r3, [pc, #116]	; (17248 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   171d2:	617b      	str	r3, [r7, #20]
			break;
   171d4:	e030      	b.n	17238 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   171d6:	4b1d      	ldr	r3, [pc, #116]	; (1724c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   171d8:	617b      	str	r3, [r7, #20]
			break;
   171da:	e02d      	b.n	17238 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   171dc:	4b1c      	ldr	r3, [pc, #112]	; (17250 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   171de:	617b      	str	r3, [r7, #20]
			break;
   171e0:	e02a      	b.n	17238 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   171e2:	79fb      	ldrb	r3, [r7, #7]
   171e4:	3b01      	subs	r3, #1
   171e6:	2b0b      	cmp	r3, #11
   171e8:	d825      	bhi.n	17236 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   171ea:	a201      	add	r2, pc, #4	; (adr r2, 171f0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   171ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   171f0:	00017221 	.word	0x00017221
   171f4:	00017227 	.word	0x00017227
   171f8:	00017221 	.word	0x00017221
   171fc:	0001722d 	.word	0x0001722d
   17200:	00017221 	.word	0x00017221
   17204:	0001722d 	.word	0x0001722d
   17208:	00017221 	.word	0x00017221
   1720c:	00017221 	.word	0x00017221
   17210:	0001722d 	.word	0x0001722d
   17214:	00017221 	.word	0x00017221
   17218:	0001722d 	.word	0x0001722d
   1721c:	00017221 	.word	0x00017221
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   17220:	4b09      	ldr	r3, [pc, #36]	; (17248 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   17222:	617b      	str	r3, [r7, #20]
			break;
   17224:	e008      	b.n	17238 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   17226:	4b0b      	ldr	r3, [pc, #44]	; (17254 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   17228:	617b      	str	r3, [r7, #20]
			break;
   1722a:	e005      	b.n	17238 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   1722c:	4b08      	ldr	r3, [pc, #32]	; (17250 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   1722e:	617b      	str	r3, [r7, #20]
			break;
   17230:	e002      	b.n	17238 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   17232:	bf00      	nop
   17234:	e000      	b.n	17238 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   17236:	bf00      	nop
		}
	}

	return sec_in_month;
   17238:	697b      	ldr	r3, [r7, #20]
}
   1723a:	4618      	mov	r0, r3
   1723c:	3718      	adds	r7, #24
   1723e:	46bd      	mov	sp, r7
   17240:	bd80      	pop	{r7, pc}
   17242:	bf00      	nop
   17244:	00016f91 	.word	0x00016f91
   17248:	0028de80 	.word	0x0028de80
   1724c:	00263b80 	.word	0x00263b80
   17250:	00278d00 	.word	0x00278d00
   17254:	0024ea00 	.word	0x0024ea00

00017258 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   17258:	b580      	push	{r7, lr}
   1725a:	b082      	sub	sp, #8
   1725c:	af00      	add	r7, sp, #0
   1725e:	6078      	str	r0, [r7, #4]
   17260:	6039      	str	r1, [r7, #0]
   17262:	687b      	ldr	r3, [r7, #4]
   17264:	2b01      	cmp	r3, #1
   17266:	d10d      	bne.n	17284 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   17268:	683b      	ldr	r3, [r7, #0]
   1726a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1726e:	4293      	cmp	r3, r2
   17270:	d108      	bne.n	17284 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   17272:	4906      	ldr	r1, [pc, #24]	; (1728c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   17274:	4806      	ldr	r0, [pc, #24]	; (17290 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   17276:	4b07      	ldr	r3, [pc, #28]	; (17294 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   17278:	4798      	blx	r3
   1727a:	4a07      	ldr	r2, [pc, #28]	; (17298 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1727c:	4907      	ldr	r1, [pc, #28]	; (1729c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1727e:	4804      	ldr	r0, [pc, #16]	; (17290 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   17280:	4b07      	ldr	r3, [pc, #28]	; (172a0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   17282:	4798      	blx	r3
   17284:	bf00      	nop
   17286:	3708      	adds	r7, #8
   17288:	46bd      	mov	sp, r7
   1728a:	bd80      	pop	{r7, pc}
   1728c:	2000a754 	.word	0x2000a754
   17290:	20009ec0 	.word	0x20009ec0
   17294:	00016ba1 	.word	0x00016ba1
   17298:	20000000 	.word	0x20000000
   1729c:	00016bdd 	.word	0x00016bdd
   172a0:	00019ab1 	.word	0x00019ab1

000172a4 <_GLOBAL__sub_I_ptrCalendarClass>:
   172a4:	b580      	push	{r7, lr}
   172a6:	af00      	add	r7, sp, #0
   172a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   172ac:	2001      	movs	r0, #1
   172ae:	4b01      	ldr	r3, [pc, #4]	; (172b4 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   172b0:	4798      	blx	r3
   172b2:	bd80      	pop	{r7, pc}
   172b4:	00017259 	.word	0x00017259

000172b8 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   172b8:	b480      	push	{r7}
   172ba:	b083      	sub	sp, #12
   172bc:	af00      	add	r7, sp, #0
   172be:	6078      	str	r0, [r7, #4]
   172c0:	4a04      	ldr	r2, [pc, #16]	; (172d4 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   172c2:	687b      	ldr	r3, [r7, #4]
   172c4:	601a      	str	r2, [r3, #0]
{
} //~D
   172c6:	687b      	ldr	r3, [r7, #4]
   172c8:	4618      	mov	r0, r3
   172ca:	370c      	adds	r7, #12
   172cc:	46bd      	mov	sp, r7
   172ce:	bc80      	pop	{r7}
   172d0:	4770      	bx	lr
   172d2:	bf00      	nop
   172d4:	00022f14 	.word	0x00022f14

000172d8 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   172d8:	b480      	push	{r7}
   172da:	b083      	sub	sp, #12
   172dc:	af00      	add	r7, sp, #0
   172de:	6078      	str	r0, [r7, #4]
   172e0:	4a04      	ldr	r2, [pc, #16]	; (172f4 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   172e2:	687b      	ldr	r3, [r7, #4]
   172e4:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   172e6:	687b      	ldr	r3, [r7, #4]
   172e8:	4618      	mov	r0, r3
   172ea:	370c      	adds	r7, #12
   172ec:	46bd      	mov	sp, r7
   172ee:	bc80      	pop	{r7}
   172f0:	4770      	bx	lr
   172f2:	bf00      	nop
   172f4:	00022f14 	.word	0x00022f14

000172f8 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
   172f8:	b590      	push	{r4, r7, lr}
   172fa:	b085      	sub	sp, #20
   172fc:	af00      	add	r7, sp, #0
   172fe:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
   17300:	687b      	ldr	r3, [r7, #4]
   17302:	681b      	ldr	r3, [r3, #0]
   17304:	681b      	ldr	r3, [r3, #0]
   17306:	687a      	ldr	r2, [r7, #4]
   17308:	3226      	adds	r2, #38	; 0x26
   1730a:	4611      	mov	r1, r2
   1730c:	6878      	ldr	r0, [r7, #4]
   1730e:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
   17310:	687b      	ldr	r3, [r7, #4]
   17312:	681b      	ldr	r3, [r3, #0]
   17314:	3304      	adds	r3, #4
   17316:	681b      	ldr	r3, [r3, #0]
   17318:	687a      	ldr	r2, [r7, #4]
   1731a:	3226      	adds	r2, #38	; 0x26
   1731c:	4611      	mov	r1, r2
   1731e:	6878      	ldr	r0, [r7, #4]
   17320:	4798      	blx	r3
   17322:	4602      	mov	r2, r0
   17324:	687b      	ldr	r3, [r7, #4]
   17326:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
   17328:	6878      	ldr	r0, [r7, #4]
   1732a:	4b1a      	ldr	r3, [pc, #104]	; (17394 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x9c>)
   1732c:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   1732e:	687b      	ldr	r3, [r7, #4]
   17330:	681b      	ldr	r3, [r3, #0]
   17332:	3304      	adds	r3, #4
   17334:	681b      	ldr	r3, [r3, #0]
   17336:	687a      	ldr	r2, [r7, #4]
   17338:	322e      	adds	r2, #46	; 0x2e
   1733a:	4611      	mov	r1, r2
   1733c:	6878      	ldr	r0, [r7, #4]
   1733e:	4798      	blx	r3
   17340:	4602      	mov	r2, r0
   17342:	687b      	ldr	r3, [r7, #4]
   17344:	60da      	str	r2, [r3, #12]
	tick_t diferencia;
	if (lastTimestamp==calendar.nullTimestamp)
   17346:	687b      	ldr	r3, [r7, #4]
   17348:	68da      	ldr	r2, [r3, #12]
   1734a:	4b13      	ldr	r3, [pc, #76]	; (17398 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa0>)
   1734c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1734e:	429a      	cmp	r2, r3
   17350:	d103      	bne.n	1735a <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x62>
	{
		diferencia=UPDATE_TIME_MAX*2;
   17352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17356:	60fb      	str	r3, [r7, #12]
   17358:	e016      	b.n	17388 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>
	} 
	else
	{
		timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
   1735a:	687b      	ldr	r3, [r7, #4]
   1735c:	689b      	ldr	r3, [r3, #8]
   1735e:	461a      	mov	r2, r3
   17360:	687b      	ldr	r3, [r7, #4]
   17362:	68db      	ldr	r3, [r3, #12]
   17364:	4619      	mov	r1, r3
   17366:	4610      	mov	r0, r2
   17368:	4b0c      	ldr	r3, [pc, #48]	; (1739c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa4>)
   1736a:	4798      	blx	r3
   1736c:	4603      	mov	r3, r0
   1736e:	460c      	mov	r4, r1
   17370:	687a      	ldr	r2, [r7, #4]
   17372:	e9c2 3406 	strd	r3, r4, [r2, #24]
		diferencia=(uint32_t)timeDifference;
   17376:	687b      	ldr	r3, [r7, #4]
   17378:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
   1737c:	4a08      	ldr	r2, [pc, #32]	; (173a0 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa8>)
   1737e:	4618      	mov	r0, r3
   17380:	4621      	mov	r1, r4
   17382:	4790      	blx	r2
   17384:	4603      	mov	r3, r0
   17386:	60fb      	str	r3, [r7, #12]
	}

	return	diferencia;
   17388:	68fb      	ldr	r3, [r7, #12]
}
   1738a:	4618      	mov	r0, r3
   1738c:	3714      	adds	r7, #20
   1738e:	46bd      	mov	sp, r7
   17390:	bd90      	pop	{r4, r7, pc}
   17392:	bf00      	nop
   17394:	0001758d 	.word	0x0001758d
   17398:	20009ec0 	.word	0x20009ec0
   1739c:	0001d0b1 	.word	0x0001d0b1
   173a0:	0001c75d 	.word	0x0001c75d

000173a4 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
   173a4:	b5b0      	push	{r4, r5, r7, lr}
   173a6:	b082      	sub	sp, #8
   173a8:	af00      	add	r7, sp, #0
   173aa:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
   173ac:	4b07      	ldr	r3, [pc, #28]	; (173cc <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
   173ae:	6878      	ldr	r0, [r7, #4]
   173b0:	4798      	blx	r3
   173b2:	4602      	mov	r2, r0
   173b4:	460b      	mov	r3, r1
   173b6:	4614      	mov	r4, r2
   173b8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   173bc:	4623      	mov	r3, r4
   173be:	462c      	mov	r4, r5
   173c0:	4618      	mov	r0, r3
   173c2:	4621      	mov	r1, r4
   173c4:	3708      	adds	r7, #8
   173c6:	46bd      	mov	sp, r7
   173c8:	bdb0      	pop	{r4, r5, r7, pc}
   173ca:	bf00      	nop
   173cc:	0001c0e1 	.word	0x0001c0e1

000173d0 <_ZN17DateTimeLog_Class14WasInterruptedEv>:

bool	DateTimeLog_Class::WasInterrupted(void){
   173d0:	b5b0      	push	{r4, r5, r7, lr}
   173d2:	b082      	sub	sp, #8
   173d4:	af00      	add	r7, sp, #0
   173d6:	6078      	str	r0, [r7, #4]
	
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
   173d8:	6878      	ldr	r0, [r7, #4]
   173da:	4b12      	ldr	r3, [pc, #72]	; (17424 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x54>)
   173dc:	4798      	blx	r3
   173de:	4603      	mov	r3, r0
   173e0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   173e4:	4618      	mov	r0, r3
   173e6:	4b10      	ldr	r3, [pc, #64]	; (17428 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x58>)
   173e8:	4798      	blx	r3
   173ea:	2301      	movs	r3, #1
   173ec:	461d      	mov	r5, r3
   173ee:	4c0f      	ldr	r4, [pc, #60]	; (1742c <_ZN17DateTimeLog_Class14WasInterruptedEv+0x5c>)
   173f0:	f04f 0200 	mov.w	r2, #0
   173f4:	4b0e      	ldr	r3, [pc, #56]	; (17430 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x60>)
   173f6:	47a0      	blx	r4
   173f8:	4603      	mov	r3, r0
   173fa:	2b00      	cmp	r3, #0
   173fc:	d101      	bne.n	17402 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x32>
   173fe:	2300      	movs	r3, #0
   17400:	461d      	mov	r5, r3
   17402:	b2eb      	uxtb	r3, r5
   17404:	2b00      	cmp	r3, #0
   17406:	d003      	beq.n	17410 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x40>
	{
		powerInterrupt=true;
   17408:	687b      	ldr	r3, [r7, #4]
   1740a:	2201      	movs	r2, #1
   1740c:	711a      	strb	r2, [r3, #4]
   1740e:	e002      	b.n	17416 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
   17410:	687b      	ldr	r3, [r7, #4]
   17412:	2200      	movs	r2, #0
   17414:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
   17416:	687b      	ldr	r3, [r7, #4]
   17418:	791b      	ldrb	r3, [r3, #4]
   1741a:	b2db      	uxtb	r3, r3
}
   1741c:	4618      	mov	r0, r3
   1741e:	3708      	adds	r7, #8
   17420:	46bd      	mov	sp, r7
   17422:	bdb0      	pop	{r4, r5, r7, pc}
   17424:	000172f9 	.word	0x000172f9
   17428:	000173a5 	.word	0x000173a5
   1742c:	0001c6cd 	.word	0x0001c6cd
   17430:	40490000 	.word	0x40490000

00017434 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
   17434:	b590      	push	{r4, r7, lr}
   17436:	b085      	sub	sp, #20
   17438:	af00      	add	r7, sp, #0
   1743a:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
   1743c:	687b      	ldr	r3, [r7, #4]
   1743e:	f103 0122 	add.w	r1, r3, #34	; 0x22
   17442:	687b      	ldr	r3, [r7, #4]
   17444:	8c1a      	ldrh	r2, [r3, #32]
   17446:	2301      	movs	r3, #1
   17448:	480c      	ldr	r0, [pc, #48]	; (1747c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   1744a:	4c0d      	ldr	r4, [pc, #52]	; (17480 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
   1744c:	47a0      	blx	r4
   1744e:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
   17450:	6878      	ldr	r0, [r7, #4]
   17452:	4b0c      	ldr	r3, [pc, #48]	; (17484 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
   17454:	4798      	blx	r3
   17456:	4603      	mov	r3, r0
   17458:	b29a      	uxth	r2, r3
   1745a:	687b      	ldr	r3, [r7, #4]
   1745c:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
   1745e:	687b      	ldr	r3, [r7, #4]
   17460:	f103 0122 	add.w	r1, r3, #34	; 0x22
   17464:	687b      	ldr	r3, [r7, #4]
   17466:	8c1a      	ldrh	r2, [r3, #32]
   17468:	2301      	movs	r3, #1
   1746a:	4804      	ldr	r0, [pc, #16]	; (1747c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   1746c:	4c06      	ldr	r4, [pc, #24]	; (17488 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
   1746e:	47a0      	blx	r4
   17470:	60f8      	str	r0, [r7, #12]
	return r;
   17472:	68fb      	ldr	r3, [r7, #12]
}
   17474:	4618      	mov	r0, r3
   17476:	3714      	adds	r7, #20
   17478:	46bd      	mov	sp, r7
   1747a:	bd90      	pop	{r4, r7, pc}
   1747c:	20009c3c 	.word	0x20009c3c
   17480:	00016099 	.word	0x00016099
   17484:	0001748d 	.word	0x0001748d
   17488:	00015fdd 	.word	0x00015fdd

0001748c <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
   1748c:	b480      	push	{r7}
   1748e:	b083      	sub	sp, #12
   17490:	af00      	add	r7, sp, #0
   17492:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
   17494:	687b      	ldr	r3, [r7, #4]
   17496:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   17498:	b2db      	uxtb	r3, r3
   1749a:	3301      	adds	r3, #1
   1749c:	b2db      	uxtb	r3, r3
   1749e:	f003 030f 	and.w	r3, r3, #15
   174a2:	b2db      	uxtb	r3, r3
 }
   174a4:	4618      	mov	r0, r3
   174a6:	370c      	adds	r7, #12
   174a8:	46bd      	mov	sp, r7
   174aa:	bc80      	pop	{r7}
   174ac:	4770      	bx	lr
	...

000174b0 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
   174b0:	b590      	push	{r4, r7, lr}
   174b2:	b085      	sub	sp, #20
   174b4:	af00      	add	r7, sp, #0
   174b6:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
   174b8:	687b      	ldr	r3, [r7, #4]
   174ba:	8c1a      	ldrh	r2, [r3, #32]
   174bc:	f107 010f 	add.w	r1, r7, #15
   174c0:	2301      	movs	r3, #1
   174c2:	4804      	ldr	r0, [pc, #16]	; (174d4 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
   174c4:	4c04      	ldr	r4, [pc, #16]	; (174d8 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
   174c6:	47a0      	blx	r4
	 return	s;
   174c8:	7bfb      	ldrb	r3, [r7, #15]
 }
   174ca:	4618      	mov	r0, r3
   174cc:	3714      	adds	r7, #20
   174ce:	46bd      	mov	sp, r7
   174d0:	bd90      	pop	{r4, r7, pc}
   174d2:	bf00      	nop
   174d4:	20009c3c 	.word	0x20009c3c
   174d8:	00016099 	.word	0x00016099

000174dc <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
   174dc:	b480      	push	{r7}
   174de:	b083      	sub	sp, #12
   174e0:	af00      	add	r7, sp, #0
   174e2:	6078      	str	r0, [r7, #4]
   174e4:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
   174e6:	683b      	ldr	r3, [r7, #0]
   174e8:	b29a      	uxth	r2, r3
   174ea:	687b      	ldr	r3, [r7, #4]
   174ec:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
   174ee:	687b      	ldr	r3, [r7, #4]
   174f0:	8c1b      	ldrh	r3, [r3, #32]
 }
   174f2:	4618      	mov	r0, r3
   174f4:	370c      	adds	r7, #12
   174f6:	46bd      	mov	sp, r7
   174f8:	bc80      	pop	{r7}
   174fa:	4770      	bx	lr

000174fc <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
   174fc:	b480      	push	{r7}
   174fe:	b083      	sub	sp, #12
   17500:	af00      	add	r7, sp, #0
   17502:	6078      	str	r0, [r7, #4]
   17504:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
   17506:	683b      	ldr	r3, [r7, #0]
   17508:	b29a      	uxth	r2, r3
   1750a:	687b      	ldr	r3, [r7, #4]
   1750c:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
   1750e:	687b      	ldr	r3, [r7, #4]
   17510:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
   17512:	4618      	mov	r0, r3
   17514:	370c      	adds	r7, #12
   17516:	46bd      	mov	sp, r7
   17518:	bc80      	pop	{r7}
   1751a:	4770      	bx	lr

0001751c <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
   1751c:	b590      	push	{r4, r7, lr}
   1751e:	b085      	sub	sp, #20
   17520:	af00      	add	r7, sp, #0
   17522:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   17524:	6878      	ldr	r0, [r7, #4]
   17526:	4b15      	ldr	r3, [pc, #84]	; (1757c <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
   17528:	4798      	blx	r3
   1752a:	4603      	mov	r3, r0
   1752c:	b29a      	uxth	r2, r3
   1752e:	687b      	ldr	r3, [r7, #4]
   17530:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
   17532:	687b      	ldr	r3, [r7, #4]
   17534:	681b      	ldr	r3, [r3, #0]
   17536:	681b      	ldr	r3, [r3, #0]
   17538:	687a      	ldr	r2, [r7, #4]
   1753a:	3226      	adds	r2, #38	; 0x26
   1753c:	4611      	mov	r1, r2
   1753e:	6878      	ldr	r0, [r7, #4]
   17540:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
   17542:	687b      	ldr	r3, [r7, #4]
   17544:	3326      	adds	r3, #38	; 0x26
   17546:	461a      	mov	r2, r3
   17548:	687b      	ldr	r3, [r7, #4]
   1754a:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   1754c:	687b      	ldr	r3, [r7, #4]
   1754e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17550:	687b      	ldr	r3, [r7, #4]
   17552:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   17554:	b2da      	uxtb	r2, r3
   17556:	687b      	ldr	r3, [r7, #4]
   17558:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   1755a:	b2db      	uxtb	r3, r3
   1755c:	4413      	add	r3, r2
   1755e:	b2da      	uxtb	r2, r3
   17560:	2308      	movs	r3, #8
   17562:	4807      	ldr	r0, [pc, #28]	; (17580 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
   17564:	4c07      	ldr	r4, [pc, #28]	; (17584 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
   17566:	47a0      	blx	r4
   17568:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
   1756a:	6878      	ldr	r0, [r7, #4]
   1756c:	4b06      	ldr	r3, [pc, #24]	; (17588 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
   1756e:	4798      	blx	r3
	return	w;
   17570:	68fb      	ldr	r3, [r7, #12]
}
   17572:	4618      	mov	r0, r3
   17574:	3714      	adds	r7, #20
   17576:	46bd      	mov	sp, r7
   17578:	bd90      	pop	{r4, r7, pc}
   1757a:	bf00      	nop
   1757c:	000174b1 	.word	0x000174b1
   17580:	20009c3c 	.word	0x20009c3c
   17584:	00015e7d 	.word	0x00015e7d
   17588:	00017435 	.word	0x00017435

0001758c <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
   1758c:	b590      	push	{r4, r7, lr}
   1758e:	b085      	sub	sp, #20
   17590:	af00      	add	r7, sp, #0
   17592:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   17594:	6878      	ldr	r0, [r7, #4]
   17596:	4b0f      	ldr	r3, [pc, #60]	; (175d4 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
   17598:	4798      	blx	r3
   1759a:	4603      	mov	r3, r0
   1759c:	b29a      	uxth	r2, r3
   1759e:	687b      	ldr	r3, [r7, #4]
   175a0:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
   175a2:	687b      	ldr	r3, [r7, #4]
   175a4:	332e      	adds	r3, #46	; 0x2e
   175a6:	461a      	mov	r2, r3
   175a8:	687b      	ldr	r3, [r7, #4]
   175aa:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   175ac:	687b      	ldr	r3, [r7, #4]
   175ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
   175b0:	687b      	ldr	r3, [r7, #4]
   175b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   175b4:	b2da      	uxtb	r2, r3
   175b6:	687b      	ldr	r3, [r7, #4]
   175b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   175ba:	b2db      	uxtb	r3, r3
   175bc:	4413      	add	r3, r2
   175be:	b2da      	uxtb	r2, r3
   175c0:	2308      	movs	r3, #8
   175c2:	4805      	ldr	r0, [pc, #20]	; (175d8 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
   175c4:	4c05      	ldr	r4, [pc, #20]	; (175dc <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
   175c6:	47a0      	blx	r4
   175c8:	60f8      	str	r0, [r7, #12]
	return	r;
   175ca:	68fb      	ldr	r3, [r7, #12]
}
   175cc:	4618      	mov	r0, r3
   175ce:	3714      	adds	r7, #20
   175d0:	46bd      	mov	sp, r7
   175d2:	bd90      	pop	{r4, r7, pc}
   175d4:	000174b1 	.word	0x000174b1
   175d8:	20009c3c 	.word	0x20009c3c
   175dc:	00016011 	.word	0x00016011

000175e0 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   175e0:	b480      	push	{r7}
   175e2:	b083      	sub	sp, #12
   175e4:	af00      	add	r7, sp, #0
   175e6:	6078      	str	r0, [r7, #4]
   175e8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   175ea:	687b      	ldr	r3, [r7, #4]
   175ec:	683a      	ldr	r2, [r7, #0]
   175ee:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   175f0:	4a06      	ldr	r2, [pc, #24]	; (1760c <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
   175f2:	687b      	ldr	r3, [r7, #4]
   175f4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   175f6:	687b      	ldr	r3, [r7, #4]
   175f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   175fc:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   175fe:	687b      	ldr	r3, [r7, #4]
   17600:	4618      	mov	r0, r3
   17602:	370c      	adds	r7, #12
   17604:	46bd      	mov	sp, r7
   17606:	bc80      	pop	{r7}
   17608:	4770      	bx	lr
   1760a:	bf00      	nop
   1760c:	20009f68 	.word	0x20009f68

00017610 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   17610:	b480      	push	{r7}
   17612:	b083      	sub	sp, #12
   17614:	af00      	add	r7, sp, #0
   17616:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   17618:	687b      	ldr	r3, [r7, #4]
   1761a:	2200      	movs	r2, #0
   1761c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   1761e:	687b      	ldr	r3, [r7, #4]
   17620:	4618      	mov	r0, r3
   17622:	370c      	adds	r7, #12
   17624:	46bd      	mov	sp, r7
   17626:	bc80      	pop	{r7}
   17628:	4770      	bx	lr
	...

0001762c <_ZL9InitArrayv>:


static void InitArray(){
   1762c:	b480      	push	{r7}
   1762e:	b083      	sub	sp, #12
   17630:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
   17632:	2301      	movs	r3, #1
   17634:	607b      	str	r3, [r7, #4]
   17636:	687b      	ldr	r3, [r7, #4]
   17638:	2b0f      	cmp	r3, #15
   1763a:	dc26      	bgt.n	1768a <_ZL9InitArrayv+0x5e>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   1763c:	4917      	ldr	r1, [pc, #92]	; (1769c <_ZL9InitArrayv+0x70>)
   1763e:	687a      	ldr	r2, [r7, #4]
   17640:	4613      	mov	r3, r2
   17642:	009b      	lsls	r3, r3, #2
   17644:	4413      	add	r3, r2
   17646:	009b      	lsls	r3, r3, #2
   17648:	440b      	add	r3, r1
   1764a:	2200      	movs	r2, #0
   1764c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   1764e:	4913      	ldr	r1, [pc, #76]	; (1769c <_ZL9InitArrayv+0x70>)
   17650:	687a      	ldr	r2, [r7, #4]
   17652:	4613      	mov	r3, r2
   17654:	009b      	lsls	r3, r3, #2
   17656:	4413      	add	r3, r2
   17658:	009b      	lsls	r3, r3, #2
   1765a:	440b      	add	r3, r1
   1765c:	330c      	adds	r3, #12
   1765e:	2200      	movs	r2, #0
   17660:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   17662:	687b      	ldr	r3, [r7, #4]
   17664:	1e5a      	subs	r2, r3, #1
   17666:	6879      	ldr	r1, [r7, #4]
   17668:	460b      	mov	r3, r1
   1766a:	009b      	lsls	r3, r3, #2
   1766c:	440b      	add	r3, r1
   1766e:	009b      	lsls	r3, r3, #2
   17670:	490a      	ldr	r1, [pc, #40]	; (1769c <_ZL9InitArrayv+0x70>)
   17672:	4419      	add	r1, r3
   17674:	4809      	ldr	r0, [pc, #36]	; (1769c <_ZL9InitArrayv+0x70>)
   17676:	4613      	mov	r3, r2
   17678:	009b      	lsls	r3, r3, #2
   1767a:	4413      	add	r3, r2
   1767c:	009b      	lsls	r3, r3, #2
   1767e:	4403      	add	r3, r0
   17680:	6019      	str	r1, [r3, #0]
	for (int i=1; i<TASK_NUMBER	; i++)
   17682:	687b      	ldr	r3, [r7, #4]
   17684:	3301      	adds	r3, #1
   17686:	607b      	str	r3, [r7, #4]
   17688:	e7d5      	b.n	17636 <_ZL9InitArrayv+0xa>
	}
	arrayInitiated=true;
   1768a:	4b05      	ldr	r3, [pc, #20]	; (176a0 <_ZL9InitArrayv+0x74>)
   1768c:	2201      	movs	r2, #1
   1768e:	701a      	strb	r2, [r3, #0]
		
}
   17690:	bf00      	nop
   17692:	370c      	adds	r7, #12
   17694:	46bd      	mov	sp, r7
   17696:	bc80      	pop	{r7}
   17698:	4770      	bx	lr
   1769a:	bf00      	nop
   1769c:	20009f6c 	.word	0x20009f6c
   176a0:	2000a0ac 	.word	0x2000a0ac

000176a4 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   176a4:	b580      	push	{r7, lr}
   176a6:	b082      	sub	sp, #8
   176a8:	af00      	add	r7, sp, #0
   176aa:	6078      	str	r0, [r7, #4]
	ticks=0;
   176ac:	687b      	ldr	r3, [r7, #4]
   176ae:	2200      	movs	r2, #0
   176b0:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
   176b2:	4b0d      	ldr	r3, [pc, #52]	; (176e8 <_ZN11Timer_Class4InitEv+0x44>)
   176b4:	781b      	ldrb	r3, [r3, #0]
   176b6:	f083 0301 	eor.w	r3, r3, #1
   176ba:	b2db      	uxtb	r3, r3
   176bc:	2b00      	cmp	r3, #0
   176be:	d001      	beq.n	176c4 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
   176c0:	4b0a      	ldr	r3, [pc, #40]	; (176ec <_ZN11Timer_Class4InitEv+0x48>)
   176c2:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=start()==ERR_NONE;
   176c4:	6878      	ldr	r0, [r7, #4]
   176c6:	4b0a      	ldr	r3, [pc, #40]	; (176f0 <_ZN11Timer_Class4InitEv+0x4c>)
   176c8:	4798      	blx	r3
   176ca:	4603      	mov	r3, r0
   176cc:	2b00      	cmp	r3, #0
   176ce:	bf0c      	ite	eq
   176d0:	2301      	moveq	r3, #1
   176d2:	2300      	movne	r3, #0
   176d4:	b2da      	uxtb	r2, r3
   176d6:	687b      	ldr	r3, [r7, #4]
   176d8:	709a      	strb	r2, [r3, #2]
	return isOK;
   176da:	687b      	ldr	r3, [r7, #4]
   176dc:	789b      	ldrb	r3, [r3, #2]
   176de:	b2db      	uxtb	r3, r3
}
   176e0:	4618      	mov	r0, r3
   176e2:	3708      	adds	r7, #8
   176e4:	46bd      	mov	sp, r7
   176e6:	bd80      	pop	{r7, pc}
   176e8:	2000a0ac 	.word	0x2000a0ac
   176ec:	0001762d 	.word	0x0001762d
   176f0:	000176f5 	.word	0x000176f5

000176f4 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   176f4:	b580      	push	{r7, lr}
   176f6:	b084      	sub	sp, #16
   176f8:	af00      	add	r7, sp, #0
   176fa:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   176fc:	687b      	ldr	r3, [r7, #4]
   176fe:	68db      	ldr	r3, [r3, #12]
   17700:	4618      	mov	r0, r3
   17702:	4b04      	ldr	r3, [pc, #16]	; (17714 <_ZN11Timer_Class5startEv+0x20>)
   17704:	4798      	blx	r3
   17706:	60f8      	str	r0, [r7, #12]
	return status;
   17708:	68fb      	ldr	r3, [r7, #12]
	
}
   1770a:	4618      	mov	r0, r3
   1770c:	3710      	adds	r7, #16
   1770e:	46bd      	mov	sp, r7
   17710:	bd80      	pop	{r7, pc}
   17712:	bf00      	nop
   17714:	00007089 	.word	0x00007089

00017718 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   17718:	b580      	push	{r7, lr}
   1771a:	b086      	sub	sp, #24
   1771c:	af00      	add	r7, sp, #0
   1771e:	60f8      	str	r0, [r7, #12]
   17720:	60b9      	str	r1, [r7, #8]
   17722:	607a      	str	r2, [r7, #4]
   17724:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   17726:	68f8      	ldr	r0, [r7, #12]
   17728:	4b0d      	ldr	r3, [pc, #52]	; (17760 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   1772a:	4798      	blx	r3
	task->interval = interval;
   1772c:	68fb      	ldr	r3, [r7, #12]
   1772e:	699b      	ldr	r3, [r3, #24]
   17730:	687a      	ldr	r2, [r7, #4]
   17732:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   17734:	68fb      	ldr	r3, [r7, #12]
   17736:	699b      	ldr	r3, [r3, #24]
   17738:	68ba      	ldr	r2, [r7, #8]
   1773a:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   1773c:	68fb      	ldr	r3, [r7, #12]
   1773e:	699b      	ldr	r3, [r3, #24]
   17740:	78fa      	ldrb	r2, [r7, #3]
   17742:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   17744:	68fb      	ldr	r3, [r7, #12]
   17746:	68da      	ldr	r2, [r3, #12]
   17748:	68fb      	ldr	r3, [r7, #12]
   1774a:	699b      	ldr	r3, [r3, #24]
   1774c:	4619      	mov	r1, r3
   1774e:	4610      	mov	r0, r2
   17750:	4b04      	ldr	r3, [pc, #16]	; (17764 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   17752:	4798      	blx	r3
   17754:	6178      	str	r0, [r7, #20]
	
	return status;
   17756:	697b      	ldr	r3, [r7, #20]
}
   17758:	4618      	mov	r0, r3
   1775a:	3718      	adds	r7, #24
   1775c:	46bd      	mov	sp, r7
   1775e:	bd80      	pop	{r7, pc}
   17760:	0001789d 	.word	0x0001789d
   17764:	0000715d 	.word	0x0000715d

00017768 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   17768:	b580      	push	{r7, lr}
   1776a:	b086      	sub	sp, #24
   1776c:	af00      	add	r7, sp, #0
   1776e:	60f8      	str	r0, [r7, #12]
   17770:	60b9      	str	r1, [r7, #8]
   17772:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
   17774:	687a      	ldr	r2, [r7, #4]
   17776:	68b9      	ldr	r1, [r7, #8]
   17778:	68f8      	ldr	r0, [r7, #12]
   1777a:	4b0c      	ldr	r3, [pc, #48]	; (177ac <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
   1777c:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
   1777e:	68fb      	ldr	r3, [r7, #12]
   17780:	68db      	ldr	r3, [r3, #12]
   17782:	681b      	ldr	r3, [r3, #0]
   17784:	699b      	ldr	r3, [r3, #24]
   17786:	68fa      	ldr	r2, [r7, #12]
   17788:	68d2      	ldr	r2, [r2, #12]
   1778a:	3204      	adds	r2, #4
   1778c:	4610      	mov	r0, r2
   1778e:	4798      	blx	r3
   17790:	4603      	mov	r3, r0
   17792:	2b00      	cmp	r3, #0
   17794:	d105      	bne.n	177a2 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
   17796:	68fb      	ldr	r3, [r7, #12]
   17798:	68db      	ldr	r3, [r3, #12]
   1779a:	4618      	mov	r0, r3
   1779c:	4b04      	ldr	r3, [pc, #16]	; (177b0 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
   1779e:	4798      	blx	r3
   177a0:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
   177a2:	697b      	ldr	r3, [r7, #20]
}
   177a4:	4618      	mov	r0, r3
   177a6:	3718      	adds	r7, #24
   177a8:	46bd      	mov	sp, r7
   177aa:	bd80      	pop	{r7, pc}
   177ac:	000177b5 	.word	0x000177b5
   177b0:	00007089 	.word	0x00007089

000177b4 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   177b4:	b590      	push	{r4, r7, lr}
   177b6:	b087      	sub	sp, #28
   177b8:	af00      	add	r7, sp, #0
   177ba:	60f8      	str	r0, [r7, #12]
   177bc:	60b9      	str	r1, [r7, #8]
   177be:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   177c0:	2301      	movs	r3, #1
   177c2:	687a      	ldr	r2, [r7, #4]
   177c4:	68b9      	ldr	r1, [r7, #8]
   177c6:	68f8      	ldr	r0, [r7, #12]
   177c8:	4c03      	ldr	r4, [pc, #12]	; (177d8 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   177ca:	47a0      	blx	r4
   177cc:	6178      	str	r0, [r7, #20]
		return status;
   177ce:	697b      	ldr	r3, [r7, #20]
}
   177d0:	4618      	mov	r0, r3
   177d2:	371c      	adds	r7, #28
   177d4:	46bd      	mov	sp, r7
   177d6:	bd90      	pop	{r4, r7, pc}
   177d8:	00017719 	.word	0x00017719

000177dc <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
   177dc:	b580      	push	{r7, lr}
   177de:	b082      	sub	sp, #8
   177e0:	af00      	add	r7, sp, #0
   177e2:	6078      	str	r0, [r7, #4]
   177e4:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   177e6:	6839      	ldr	r1, [r7, #0]
   177e8:	6878      	ldr	r0, [r7, #4]
   177ea:	4b0f      	ldr	r3, [pc, #60]	; (17828 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   177ec:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   177ee:	687b      	ldr	r3, [r7, #4]
   177f0:	68db      	ldr	r3, [r3, #12]
   177f2:	f103 0218 	add.w	r2, r3, #24
   177f6:	687b      	ldr	r3, [r7, #4]
   177f8:	699b      	ldr	r3, [r3, #24]
   177fa:	4619      	mov	r1, r3
   177fc:	4610      	mov	r0, r2
   177fe:	4b0b      	ldr	r3, [pc, #44]	; (1782c <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   17800:	4798      	blx	r3
   17802:	4603      	mov	r3, r0
   17804:	2b00      	cmp	r3, #0
   17806:	d007      	beq.n	17818 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   17808:	687b      	ldr	r3, [r7, #4]
   1780a:	68da      	ldr	r2, [r3, #12]
   1780c:	687b      	ldr	r3, [r7, #4]
   1780e:	699b      	ldr	r3, [r3, #24]
   17810:	4619      	mov	r1, r3
   17812:	4610      	mov	r0, r2
   17814:	4b06      	ldr	r3, [pc, #24]	; (17830 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   17816:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   17818:	687b      	ldr	r3, [r7, #4]
   1781a:	699b      	ldr	r3, [r3, #24]
   1781c:	2200      	movs	r2, #0
   1781e:	60da      	str	r2, [r3, #12]
}
   17820:	bf00      	nop
   17822:	3708      	adds	r7, #8
   17824:	46bd      	mov	sp, r7
   17826:	bd80      	pop	{r7, pc}
   17828:	000178fd 	.word	0x000178fd
   1782c:	00007e49 	.word	0x00007e49
   17830:	00007261 	.word	0x00007261

00017834 <_ZN11Timer_Class9Get_ticksEv>:



uint32_t	Timer_Class::Get_ticks(void){
   17834:	b480      	push	{r7}
   17836:	b083      	sub	sp, #12
   17838:	af00      	add	r7, sp, #0
   1783a:	6078      	str	r0, [r7, #4]
	
		return ticks;
   1783c:	687b      	ldr	r3, [r7, #4]
   1783e:	689b      	ldr	r3, [r3, #8]
}
   17840:	4618      	mov	r0, r3
   17842:	370c      	adds	r7, #12
   17844:	46bd      	mov	sp, r7
   17846:	bc80      	pop	{r7}
   17848:	4770      	bx	lr
	...

0001784c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   1784c:	b590      	push	{r4, r7, lr}
   1784e:	b087      	sub	sp, #28
   17850:	af00      	add	r7, sp, #0
   17852:	60f8      	str	r0, [r7, #12]
   17854:	60b9      	str	r1, [r7, #8]
   17856:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   17858:	2300      	movs	r3, #0
   1785a:	687a      	ldr	r2, [r7, #4]
   1785c:	68b9      	ldr	r1, [r7, #8]
   1785e:	68f8      	ldr	r0, [r7, #12]
   17860:	4c0c      	ldr	r4, [pc, #48]	; (17894 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   17862:	47a0      	blx	r4
   17864:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   17866:	68fb      	ldr	r3, [r7, #12]
   17868:	68db      	ldr	r3, [r3, #12]
   1786a:	681b      	ldr	r3, [r3, #0]
   1786c:	699b      	ldr	r3, [r3, #24]
   1786e:	68fa      	ldr	r2, [r7, #12]
   17870:	68d2      	ldr	r2, [r2, #12]
   17872:	3204      	adds	r2, #4
   17874:	4610      	mov	r0, r2
   17876:	4798      	blx	r3
   17878:	4603      	mov	r3, r0
   1787a:	2b00      	cmp	r3, #0
   1787c:	d105      	bne.n	1788a <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   1787e:	68fb      	ldr	r3, [r7, #12]
   17880:	68db      	ldr	r3, [r3, #12]
   17882:	4618      	mov	r0, r3
   17884:	4b04      	ldr	r3, [pc, #16]	; (17898 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   17886:	4798      	blx	r3
   17888:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   1788a:	697b      	ldr	r3, [r7, #20]
}
   1788c:	4618      	mov	r0, r3
   1788e:	371c      	adds	r7, #28
   17890:	46bd      	mov	sp, r7
   17892:	bd90      	pop	{r4, r7, pc}
   17894:	00017719 	.word	0x00017719
   17898:	00007089 	.word	0x00007089

0001789c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   1789c:	b480      	push	{r7}
   1789e:	b085      	sub	sp, #20
   178a0:	af00      	add	r7, sp, #0
   178a2:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   178a4:	2300      	movs	r3, #0
   178a6:	73fb      	strb	r3, [r7, #15]
   178a8:	7bfb      	ldrb	r3, [r7, #15]
   178aa:	2b0f      	cmp	r3, #15
   178ac:	dc1c      	bgt.n	178e8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
   178ae:	7bfb      	ldrb	r3, [r7, #15]
   178b0:	f003 030f 	and.w	r3, r3, #15
   178b4:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   178b6:	7bba      	ldrb	r2, [r7, #14]
   178b8:	490f      	ldr	r1, [pc, #60]	; (178f8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   178ba:	4613      	mov	r3, r2
   178bc:	009b      	lsls	r3, r3, #2
   178be:	4413      	add	r3, r2
   178c0:	009b      	lsls	r3, r3, #2
   178c2:	440b      	add	r3, r1
   178c4:	330c      	adds	r3, #12
   178c6:	681b      	ldr	r3, [r3, #0]
   178c8:	2b00      	cmp	r3, #0
   178ca:	d109      	bne.n	178e0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
   178cc:	7bba      	ldrb	r2, [r7, #14]
   178ce:	4613      	mov	r3, r2
   178d0:	009b      	lsls	r3, r3, #2
   178d2:	4413      	add	r3, r2
   178d4:	009b      	lsls	r3, r3, #2
   178d6:	4a08      	ldr	r2, [pc, #32]	; (178f8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   178d8:	441a      	add	r2, r3
   178da:	687b      	ldr	r3, [r7, #4]
   178dc:	619a      	str	r2, [r3, #24]
			return;
   178de:	e006      	b.n	178ee <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   178e0:	7bfb      	ldrb	r3, [r7, #15]
   178e2:	3301      	adds	r3, #1
   178e4:	73fb      	strb	r3, [r7, #15]
   178e6:	e7df      	b.n	178a8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   178e8:	687b      	ldr	r3, [r7, #4]
   178ea:	4a03      	ldr	r2, [pc, #12]	; (178f8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   178ec:	619a      	str	r2, [r3, #24]

}
   178ee:	3714      	adds	r7, #20
   178f0:	46bd      	mov	sp, r7
   178f2:	bc80      	pop	{r7}
   178f4:	4770      	bx	lr
   178f6:	bf00      	nop
   178f8:	20009f6c 	.word	0x20009f6c

000178fc <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   178fc:	b480      	push	{r7}
   178fe:	b085      	sub	sp, #20
   17900:	af00      	add	r7, sp, #0
   17902:	6078      	str	r0, [r7, #4]
   17904:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17906:	2300      	movs	r3, #0
   17908:	73fb      	strb	r3, [r7, #15]
   1790a:	7bfb      	ldrb	r3, [r7, #15]
   1790c:	2b0f      	cmp	r3, #15
   1790e:	dc19      	bgt.n	17944 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   17910:	7bfa      	ldrb	r2, [r7, #15]
   17912:	490f      	ldr	r1, [pc, #60]	; (17950 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   17914:	4613      	mov	r3, r2
   17916:	009b      	lsls	r3, r3, #2
   17918:	4413      	add	r3, r2
   1791a:	009b      	lsls	r3, r3, #2
   1791c:	440b      	add	r3, r1
   1791e:	330c      	adds	r3, #12
   17920:	681a      	ldr	r2, [r3, #0]
   17922:	683b      	ldr	r3, [r7, #0]
   17924:	429a      	cmp	r2, r3
   17926:	d109      	bne.n	1793c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   17928:	7bfa      	ldrb	r2, [r7, #15]
   1792a:	4613      	mov	r3, r2
   1792c:	009b      	lsls	r3, r3, #2
   1792e:	4413      	add	r3, r2
   17930:	009b      	lsls	r3, r3, #2
   17932:	4a07      	ldr	r2, [pc, #28]	; (17950 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   17934:	441a      	add	r2, r3
   17936:	687b      	ldr	r3, [r7, #4]
   17938:	619a      	str	r2, [r3, #24]
			return;
   1793a:	e004      	b.n	17946 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1793c:	7bfb      	ldrb	r3, [r7, #15]
   1793e:	3301      	adds	r3, #1
   17940:	73fb      	strb	r3, [r7, #15]
   17942:	e7e2      	b.n	1790a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   17944:	bf00      	nop
}
   17946:	3714      	adds	r7, #20
   17948:	46bd      	mov	sp, r7
   1794a:	bc80      	pop	{r7}
   1794c:	4770      	bx	lr
   1794e:	bf00      	nop
   17950:	20009f6c 	.word	0x20009f6c

00017954 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
   17954:	b580      	push	{r7, lr}
   17956:	b082      	sub	sp, #8
   17958:	af00      	add	r7, sp, #0
   1795a:	6078      	str	r0, [r7, #4]
   1795c:	6039      	str	r1, [r7, #0]
   1795e:	687b      	ldr	r3, [r7, #4]
   17960:	2b01      	cmp	r3, #1
   17962:	d131      	bne.n	179c8 <_Z41__static_initialization_and_destruction_0ii+0x74>
   17964:	683b      	ldr	r3, [r7, #0]
   17966:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1796a:	4293      	cmp	r3, r2
   1796c:	d12c      	bne.n	179c8 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1796e:	4918      	ldr	r1, [pc, #96]	; (179d0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   17970:	4818      	ldr	r0, [pc, #96]	; (179d4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   17972:	4b19      	ldr	r3, [pc, #100]	; (179d8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17974:	4798      	blx	r3
   17976:	4a19      	ldr	r2, [pc, #100]	; (179dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17978:	4919      	ldr	r1, [pc, #100]	; (179e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   1797a:	4816      	ldr	r0, [pc, #88]	; (179d4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   1797c:	4b19      	ldr	r3, [pc, #100]	; (179e4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   1797e:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
   17980:	4919      	ldr	r1, [pc, #100]	; (179e8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
   17982:	481a      	ldr	r0, [pc, #104]	; (179ec <_Z41__static_initialization_and_destruction_0ii+0x98>)
   17984:	4b14      	ldr	r3, [pc, #80]	; (179d8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17986:	4798      	blx	r3
   17988:	4a14      	ldr	r2, [pc, #80]	; (179dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1798a:	4915      	ldr	r1, [pc, #84]	; (179e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   1798c:	4817      	ldr	r0, [pc, #92]	; (179ec <_Z41__static_initialization_and_destruction_0ii+0x98>)
   1798e:	4b15      	ldr	r3, [pc, #84]	; (179e4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17990:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   17992:	4917      	ldr	r1, [pc, #92]	; (179f0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
   17994:	4817      	ldr	r0, [pc, #92]	; (179f4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   17996:	4b10      	ldr	r3, [pc, #64]	; (179d8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17998:	4798      	blx	r3
   1799a:	4a10      	ldr	r2, [pc, #64]	; (179dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1799c:	4910      	ldr	r1, [pc, #64]	; (179e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   1799e:	4815      	ldr	r0, [pc, #84]	; (179f4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   179a0:	4b10      	ldr	r3, [pc, #64]	; (179e4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   179a2:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
   179a4:	4914      	ldr	r1, [pc, #80]	; (179f8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   179a6:	4815      	ldr	r0, [pc, #84]	; (179fc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   179a8:	4b0b      	ldr	r3, [pc, #44]	; (179d8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   179aa:	4798      	blx	r3
   179ac:	4a0b      	ldr	r2, [pc, #44]	; (179dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
   179ae:	490c      	ldr	r1, [pc, #48]	; (179e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   179b0:	4812      	ldr	r0, [pc, #72]	; (179fc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   179b2:	4b0c      	ldr	r3, [pc, #48]	; (179e4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   179b4:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
   179b6:	4912      	ldr	r1, [pc, #72]	; (17a00 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   179b8:	4812      	ldr	r0, [pc, #72]	; (17a04 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   179ba:	4b07      	ldr	r3, [pc, #28]	; (179d8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   179bc:	4798      	blx	r3
   179be:	4a07      	ldr	r2, [pc, #28]	; (179dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
   179c0:	4907      	ldr	r1, [pc, #28]	; (179e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   179c2:	4810      	ldr	r0, [pc, #64]	; (17a04 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   179c4:	4b07      	ldr	r3, [pc, #28]	; (179e4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   179c6:	4798      	blx	r3
   179c8:	bf00      	nop
   179ca:	3708      	adds	r7, #8
   179cc:	46bd      	mov	sp, r7
   179ce:	bd80      	pop	{r7, pc}
   179d0:	2000a564 	.word	0x2000a564
   179d4:	2000a0b0 	.word	0x2000a0b0
   179d8:	000175e1 	.word	0x000175e1
   179dc:	20000000 	.word	0x20000000
   179e0:	00017611 	.word	0x00017611
   179e4:	00019ab1 	.word	0x00019ab1
   179e8:	2000a5f0 	.word	0x2000a5f0
   179ec:	2000a0cc 	.word	0x2000a0cc
   179f0:	2000a6f4 	.word	0x2000a6f4
   179f4:	2000a0e8 	.word	0x2000a0e8
   179f8:	2000a610 	.word	0x2000a610
   179fc:	2000a104 	.word	0x2000a104
   17a00:	2000a674 	.word	0x2000a674
   17a04:	2000a120 	.word	0x2000a120

00017a08 <_GLOBAL__sub_I_ptrTimerClass>:
   17a08:	b580      	push	{r7, lr}
   17a0a:	af00      	add	r7, sp, #0
   17a0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17a10:	2001      	movs	r0, #1
   17a12:	4b01      	ldr	r3, [pc, #4]	; (17a18 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   17a14:	4798      	blx	r3
   17a16:	bd80      	pop	{r7, pc}
   17a18:	00017955 	.word	0x00017955

00017a1c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   17a1c:	b480      	push	{r7}
   17a1e:	b083      	sub	sp, #12
   17a20:	af00      	add	r7, sp, #0
   17a22:	6078      	str	r0, [r7, #4]
   17a24:	4a05      	ldr	r2, [pc, #20]	; (17a3c <_ZN5PrintC1Ev+0x20>)
   17a26:	687b      	ldr	r3, [r7, #4]
   17a28:	601a      	str	r2, [r3, #0]
   17a2a:	687b      	ldr	r3, [r7, #4]
   17a2c:	2200      	movs	r2, #0
   17a2e:	605a      	str	r2, [r3, #4]
   17a30:	687b      	ldr	r3, [r7, #4]
   17a32:	4618      	mov	r0, r3
   17a34:	370c      	adds	r7, #12
   17a36:	46bd      	mov	sp, r7
   17a38:	bc80      	pop	{r7}
   17a3a:	4770      	bx	lr
   17a3c:	00022f90 	.word	0x00022f90

00017a40 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   17a40:	b480      	push	{r7}
   17a42:	b083      	sub	sp, #12
   17a44:	af00      	add	r7, sp, #0
   17a46:	6078      	str	r0, [r7, #4]
   17a48:	2300      	movs	r3, #0
   17a4a:	4618      	mov	r0, r3
   17a4c:	370c      	adds	r7, #12
   17a4e:	46bd      	mov	sp, r7
   17a50:	bc80      	pop	{r7}
   17a52:	4770      	bx	lr

00017a54 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   17a54:	b480      	push	{r7}
   17a56:	b083      	sub	sp, #12
   17a58:	af00      	add	r7, sp, #0
   17a5a:	6078      	str	r0, [r7, #4]
   17a5c:	bf00      	nop
   17a5e:	370c      	adds	r7, #12
   17a60:	46bd      	mov	sp, r7
   17a62:	bc80      	pop	{r7}
   17a64:	4770      	bx	lr
	...

00017a68 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   17a68:	b580      	push	{r7, lr}
   17a6a:	b082      	sub	sp, #8
   17a6c:	af00      	add	r7, sp, #0
   17a6e:	6078      	str	r0, [r7, #4]
   17a70:	687b      	ldr	r3, [r7, #4]
   17a72:	4618      	mov	r0, r3
   17a74:	4b06      	ldr	r3, [pc, #24]	; (17a90 <_ZN6StreamC1Ev+0x28>)
   17a76:	4798      	blx	r3
   17a78:	4a06      	ldr	r2, [pc, #24]	; (17a94 <_ZN6StreamC1Ev+0x2c>)
   17a7a:	687b      	ldr	r3, [r7, #4]
   17a7c:	601a      	str	r2, [r3, #0]
   17a7e:	687b      	ldr	r3, [r7, #4]
   17a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17a84:	609a      	str	r2, [r3, #8]
   17a86:	687b      	ldr	r3, [r7, #4]
   17a88:	4618      	mov	r0, r3
   17a8a:	3708      	adds	r7, #8
   17a8c:	46bd      	mov	sp, r7
   17a8e:	bd80      	pop	{r7, pc}
   17a90:	00017a1d 	.word	0x00017a1d
   17a94:	00022f54 	.word	0x00022f54

00017a98 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   17a98:	b480      	push	{r7}
   17a9a:	b083      	sub	sp, #12
   17a9c:	af00      	add	r7, sp, #0
   17a9e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   17aa0:	4b06      	ldr	r3, [pc, #24]	; (17abc <_ZL10USBTimeoutPK10timer_task+0x24>)
   17aa2:	681b      	ldr	r3, [r3, #0]
   17aa4:	2201      	movs	r2, #1
   17aa6:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   17aa8:	4b04      	ldr	r3, [pc, #16]	; (17abc <_ZL10USBTimeoutPK10timer_task+0x24>)
   17aaa:	681b      	ldr	r3, [r3, #0]
   17aac:	2200      	movs	r2, #0
   17aae:	741a      	strb	r2, [r3, #16]
	
}
   17ab0:	bf00      	nop
   17ab2:	370c      	adds	r7, #12
   17ab4:	46bd      	mov	sp, r7
   17ab6:	bc80      	pop	{r7}
   17ab8:	4770      	bx	lr
   17aba:	bf00      	nop
   17abc:	2000a13c 	.word	0x2000a13c

00017ac0 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   17ac0:	b480      	push	{r7}
   17ac2:	b083      	sub	sp, #12
   17ac4:	af00      	add	r7, sp, #0
   17ac6:	4603      	mov	r3, r0
   17ac8:	603a      	str	r2, [r7, #0]
   17aca:	71fb      	strb	r3, [r7, #7]
   17acc:	460b      	mov	r3, r1
   17ace:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   17ad0:	4b08      	ldr	r3, [pc, #32]	; (17af4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   17ad2:	681b      	ldr	r3, [r3, #0]
   17ad4:	2201      	movs	r2, #1
   17ad6:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   17ad8:	4b06      	ldr	r3, [pc, #24]	; (17af4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   17ada:	681b      	ldr	r3, [r3, #0]
   17adc:	2201      	movs	r2, #1
   17ade:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   17ae0:	4b04      	ldr	r3, [pc, #16]	; (17af4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   17ae2:	681b      	ldr	r3, [r3, #0]
   17ae4:	2201      	movs	r2, #1
   17ae6:	741a      	strb	r2, [r3, #16]


	return false;
   17ae8:	2300      	movs	r3, #0
}
   17aea:	4618      	mov	r0, r3
   17aec:	370c      	adds	r7, #12
   17aee:	46bd      	mov	sp, r7
   17af0:	bc80      	pop	{r7}
   17af2:	4770      	bx	lr
   17af4:	2000a13c 	.word	0x2000a13c

00017af8 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   17af8:	b480      	push	{r7}
   17afa:	b083      	sub	sp, #12
   17afc:	af00      	add	r7, sp, #0
   17afe:	4603      	mov	r3, r0
   17b00:	603a      	str	r2, [r7, #0]
   17b02:	71fb      	strb	r3, [r7, #7]
   17b04:	460b      	mov	r3, r1
   17b06:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   17b08:	4b08      	ldr	r3, [pc, #32]	; (17b2c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   17b0a:	681b      	ldr	r3, [r3, #0]
   17b0c:	2201      	movs	r2, #1
   17b0e:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   17b10:	4b06      	ldr	r3, [pc, #24]	; (17b2c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   17b12:	681b      	ldr	r3, [r3, #0]
   17b14:	2201      	movs	r2, #1
   17b16:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   17b18:	4b04      	ldr	r3, [pc, #16]	; (17b2c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   17b1a:	681b      	ldr	r3, [r3, #0]
   17b1c:	2201      	movs	r2, #1
   17b1e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   17b20:	2300      	movs	r3, #0
}
   17b22:	4618      	mov	r0, r3
   17b24:	370c      	adds	r7, #12
   17b26:	46bd      	mov	sp, r7
   17b28:	bc80      	pop	{r7}
   17b2a:	4770      	bx	lr
   17b2c:	2000a13c 	.word	0x2000a13c

00017b30 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   17b30:	b580      	push	{r7, lr}
   17b32:	b082      	sub	sp, #8
   17b34:	af00      	add	r7, sp, #0
   17b36:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   17b38:	793b      	ldrb	r3, [r7, #4]
   17b3a:	f003 0301 	and.w	r3, r3, #1
   17b3e:	b2db      	uxtb	r3, r3
   17b40:	2b00      	cmp	r3, #0
   17b42:	d013      	beq.n	17b6c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   17b44:	490c      	ldr	r1, [pc, #48]	; (17b78 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   17b46:	2000      	movs	r0, #0
   17b48:	4b0c      	ldr	r3, [pc, #48]	; (17b7c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   17b4a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   17b4c:	490c      	ldr	r1, [pc, #48]	; (17b80 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   17b4e:	2001      	movs	r0, #1
   17b50:	4b0a      	ldr	r3, [pc, #40]	; (17b7c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   17b52:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   17b54:	4b0b      	ldr	r3, [pc, #44]	; (17b84 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   17b56:	681b      	ldr	r3, [r3, #0]
   17b58:	2201      	movs	r2, #1
   17b5a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   17b5c:	4b09      	ldr	r3, [pc, #36]	; (17b84 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   17b5e:	681b      	ldr	r3, [r3, #0]
   17b60:	2201      	movs	r2, #1
   17b62:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   17b64:	4b07      	ldr	r3, [pc, #28]	; (17b84 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   17b66:	681b      	ldr	r3, [r3, #0]
   17b68:	2201      	movs	r2, #1
   17b6a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   17b6c:	2300      	movs	r3, #0
}
   17b6e:	4618      	mov	r0, r3
   17b70:	3708      	adds	r7, #8
   17b72:	46bd      	mov	sp, r7
   17b74:	bd80      	pop	{r7, pc}
   17b76:	bf00      	nop
   17b78:	00017ac1 	.word	0x00017ac1
   17b7c:	00011861 	.word	0x00011861
   17b80:	00017af9 	.word	0x00017af9
   17b84:	2000a13c 	.word	0x2000a13c

00017b88 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   17b88:	b580      	push	{r7, lr}
   17b8a:	b082      	sub	sp, #8
   17b8c:	af00      	add	r7, sp, #0
   17b8e:	6078      	str	r0, [r7, #4]
   17b90:	687b      	ldr	r3, [r7, #4]
   17b92:	4618      	mov	r0, r3
   17b94:	4b0a      	ldr	r3, [pc, #40]	; (17bc0 <_ZN9CDC_ClassC1Ev+0x38>)
   17b96:	4798      	blx	r3
   17b98:	687b      	ldr	r3, [r7, #4]
   17b9a:	3310      	adds	r3, #16
   17b9c:	4618      	mov	r0, r3
   17b9e:	4b09      	ldr	r3, [pc, #36]	; (17bc4 <_ZN9CDC_ClassC1Ev+0x3c>)
   17ba0:	4798      	blx	r3
   17ba2:	4a09      	ldr	r2, [pc, #36]	; (17bc8 <_ZN9CDC_ClassC1Ev+0x40>)
   17ba4:	687b      	ldr	r3, [r7, #4]
   17ba6:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   17ba8:	687b      	ldr	r3, [r7, #4]
   17baa:	f04f 32ff 	mov.w	r2, #4294967295
   17bae:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   17bb0:	4a06      	ldr	r2, [pc, #24]	; (17bcc <_ZN9CDC_ClassC1Ev+0x44>)
   17bb2:	687b      	ldr	r3, [r7, #4]
   17bb4:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   17bb6:	687b      	ldr	r3, [r7, #4]
   17bb8:	4618      	mov	r0, r3
   17bba:	3708      	adds	r7, #8
   17bbc:	46bd      	mov	sp, r7
   17bbe:	bd80      	pop	{r7, pc}
   17bc0:	00017a69 	.word	0x00017a69
   17bc4:	00018439 	.word	0x00018439
   17bc8:	00022f24 	.word	0x00022f24
   17bcc:	2000a13c 	.word	0x2000a13c

00017bd0 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   17bd0:	b580      	push	{r7, lr}
   17bd2:	b082      	sub	sp, #8
   17bd4:	af00      	add	r7, sp, #0
   17bd6:	6078      	str	r0, [r7, #4]
   17bd8:	4a06      	ldr	r2, [pc, #24]	; (17bf4 <_ZN9CDC_ClassD1Ev+0x24>)
   17bda:	687b      	ldr	r3, [r7, #4]
   17bdc:	601a      	str	r2, [r3, #0]
   17bde:	687b      	ldr	r3, [r7, #4]
   17be0:	3310      	adds	r3, #16
   17be2:	4618      	mov	r0, r3
   17be4:	4b04      	ldr	r3, [pc, #16]	; (17bf8 <_ZN9CDC_ClassD1Ev+0x28>)
   17be6:	4798      	blx	r3
{
} //~CDC_Class
   17be8:	687b      	ldr	r3, [r7, #4]
   17bea:	4618      	mov	r0, r3
   17bec:	3708      	adds	r7, #8
   17bee:	46bd      	mov	sp, r7
   17bf0:	bd80      	pop	{r7, pc}
   17bf2:	bf00      	nop
   17bf4:	00022f24 	.word	0x00022f24
   17bf8:	00018459 	.word	0x00018459

00017bfc <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   17bfc:	b580      	push	{r7, lr}
   17bfe:	b082      	sub	sp, #8
   17c00:	af00      	add	r7, sp, #0
   17c02:	6078      	str	r0, [r7, #4]
	
	OnInit();
   17c04:	687b      	ldr	r3, [r7, #4]
   17c06:	3310      	adds	r3, #16
   17c08:	4618      	mov	r0, r3
   17c0a:	4b09      	ldr	r3, [pc, #36]	; (17c30 <_ZN9CDC_Class4InitEv+0x34>)
   17c0c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   17c0e:	4909      	ldr	r1, [pc, #36]	; (17c34 <_ZN9CDC_Class4InitEv+0x38>)
   17c10:	2003      	movs	r0, #3
   17c12:	4b09      	ldr	r3, [pc, #36]	; (17c38 <_ZN9CDC_Class4InitEv+0x3c>)
   17c14:	4798      	blx	r3
	delay_ms(100);
   17c16:	2064      	movs	r0, #100	; 0x64
   17c18:	4b08      	ldr	r3, [pc, #32]	; (17c3c <_ZN9CDC_Class4InitEv+0x40>)
   17c1a:	4798      	blx	r3
		
	if (connected)
   17c1c:	687b      	ldr	r3, [r7, #4]
   17c1e:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
   17c20:	2064      	movs	r0, #100	; 0x64
   17c22:	4b06      	ldr	r3, [pc, #24]	; (17c3c <_ZN9CDC_Class4InitEv+0x40>)
   17c24:	4798      	blx	r3

	

}
   17c26:	bf00      	nop
   17c28:	3708      	adds	r7, #8
   17c2a:	46bd      	mov	sp, r7
   17c2c:	bd80      	pop	{r7, pc}
   17c2e:	bf00      	nop
   17c30:	0001846d 	.word	0x0001846d
   17c34:	00017b31 	.word	0x00017b31
   17c38:	00011861 	.word	0x00011861
   17c3c:	000064b1 	.word	0x000064b1

00017c40 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   17c40:	b580      	push	{r7, lr}
   17c42:	b082      	sub	sp, #8
   17c44:	af00      	add	r7, sp, #0
   17c46:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   17c48:	4b03      	ldr	r3, [pc, #12]	; (17c58 <_ZN9CDC_Class9IsEnabledEv+0x18>)
   17c4a:	4798      	blx	r3
   17c4c:	4603      	mov	r3, r0
	
}
   17c4e:	4618      	mov	r0, r3
   17c50:	3708      	adds	r7, #8
   17c52:	46bd      	mov	sp, r7
   17c54:	bd80      	pop	{r7, pc}
   17c56:	bf00      	nop
   17c58:	000118d9 	.word	0x000118d9

00017c5c <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   17c5c:	b580      	push	{r7, lr}
   17c5e:	b084      	sub	sp, #16
   17c60:	af00      	add	r7, sp, #0
   17c62:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   17c64:	687b      	ldr	r3, [r7, #4]
   17c66:	699b      	ldr	r3, [r3, #24]
   17c68:	f1b3 3fff 	cmp.w	r3, #4294967295
   17c6c:	bf14      	ite	ne
   17c6e:	2301      	movne	r3, #1
   17c70:	2300      	moveq	r3, #0
   17c72:	b2db      	uxtb	r3, r3
   17c74:	2b00      	cmp	r3, #0
   17c76:	d002      	beq.n	17c7e <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   17c78:	687b      	ldr	r3, [r7, #4]
   17c7a:	699b      	ldr	r3, [r3, #24]
   17c7c:	e011      	b.n	17ca2 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   17c7e:	687b      	ldr	r3, [r7, #4]
   17c80:	681b      	ldr	r3, [r3, #0]
   17c82:	331c      	adds	r3, #28
   17c84:	681b      	ldr	r3, [r3, #0]
   17c86:	f107 010f 	add.w	r1, r7, #15
   17c8a:	2201      	movs	r2, #1
   17c8c:	6878      	ldr	r0, [r7, #4]
   17c8e:	4798      	blx	r3
   17c90:	4602      	mov	r2, r0
   17c92:	687b      	ldr	r3, [r7, #4]
   17c94:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   17c96:	7bfb      	ldrb	r3, [r7, #15]
   17c98:	461a      	mov	r2, r3
   17c9a:	687b      	ldr	r3, [r7, #4]
   17c9c:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   17c9e:	687b      	ldr	r3, [r7, #4]
   17ca0:	699b      	ldr	r3, [r3, #24]
}
   17ca2:	4618      	mov	r0, r3
   17ca4:	3710      	adds	r7, #16
   17ca6:	46bd      	mov	sp, r7
   17ca8:	bd80      	pop	{r7, pc}
	...

00017cac <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   17cac:	b580      	push	{r7, lr}
   17cae:	b086      	sub	sp, #24
   17cb0:	af00      	add	r7, sp, #0
   17cb2:	60f8      	str	r0, [r7, #12]
   17cb4:	60b9      	str	r1, [r7, #8]
   17cb6:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   17cb8:	68fb      	ldr	r3, [r7, #12]
   17cba:	7c1b      	ldrb	r3, [r3, #16]
   17cbc:	b2db      	uxtb	r3, r3
   17cbe:	2b00      	cmp	r3, #0
   17cc0:	d02e      	beq.n	17d20 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   17cc2:	687a      	ldr	r2, [r7, #4]
   17cc4:	4613      	mov	r3, r2
   17cc6:	009b      	lsls	r3, r3, #2
   17cc8:	4413      	add	r3, r2
   17cca:	005b      	lsls	r3, r3, #1
   17ccc:	461a      	mov	r2, r3
   17cce:	4918      	ldr	r1, [pc, #96]	; (17d30 <_ZN9CDC_Class8readDataEPvl+0x84>)
   17cd0:	4818      	ldr	r0, [pc, #96]	; (17d34 <_ZN9CDC_Class8readDataEPvl+0x88>)
   17cd2:	4b19      	ldr	r3, [pc, #100]	; (17d38 <_ZN9CDC_Class8readDataEPvl+0x8c>)
   17cd4:	4798      	blx	r3
		rxReady=false;
   17cd6:	68fb      	ldr	r3, [r7, #12]
   17cd8:	2200      	movs	r2, #0
   17cda:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   17cdc:	687b      	ldr	r3, [r7, #4]
   17cde:	4619      	mov	r1, r3
   17ce0:	68b8      	ldr	r0, [r7, #8]
   17ce2:	4b16      	ldr	r3, [pc, #88]	; (17d3c <_ZN9CDC_Class8readDataEPvl+0x90>)
   17ce4:	4798      	blx	r3
   17ce6:	4603      	mov	r3, r0
   17ce8:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   17cea:	68fb      	ldr	r3, [r7, #12]
   17cec:	7d5b      	ldrb	r3, [r3, #21]
   17cee:	b2db      	uxtb	r3, r3
   17cf0:	f083 0301 	eor.w	r3, r3, #1
   17cf4:	b2db      	uxtb	r3, r3
   17cf6:	2b00      	cmp	r3, #0
   17cf8:	d006      	beq.n	17d08 <_ZN9CDC_Class8readDataEPvl+0x5c>
   17cfa:	68fb      	ldr	r3, [r7, #12]
   17cfc:	7c1b      	ldrb	r3, [r3, #16]
   17cfe:	b2db      	uxtb	r3, r3
   17d00:	2b00      	cmp	r3, #0
   17d02:	d001      	beq.n	17d08 <_ZN9CDC_Class8readDataEPvl+0x5c>
   17d04:	2301      	movs	r3, #1
   17d06:	e000      	b.n	17d0a <_ZN9CDC_Class8readDataEPvl+0x5e>
   17d08:	2300      	movs	r3, #0
   17d0a:	2b00      	cmp	r3, #0
   17d0c:	d000      	beq.n	17d10 <_ZN9CDC_Class8readDataEPvl+0x64>
   17d0e:	e7ec      	b.n	17cea <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   17d10:	4808      	ldr	r0, [pc, #32]	; (17d34 <_ZN9CDC_Class8readDataEPvl+0x88>)
   17d12:	4b0b      	ldr	r3, [pc, #44]	; (17d40 <_ZN9CDC_Class8readDataEPvl+0x94>)
   17d14:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   17d16:	4906      	ldr	r1, [pc, #24]	; (17d30 <_ZN9CDC_Class8readDataEPvl+0x84>)
   17d18:	4806      	ldr	r0, [pc, #24]	; (17d34 <_ZN9CDC_Class8readDataEPvl+0x88>)
   17d1a:	4b0a      	ldr	r3, [pc, #40]	; (17d44 <_ZN9CDC_Class8readDataEPvl+0x98>)
   17d1c:	4798      	blx	r3
   17d1e:	e001      	b.n	17d24 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   17d20:	2300      	movs	r3, #0
   17d22:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   17d24:	7dfb      	ldrb	r3, [r7, #23]
}
   17d26:	4618      	mov	r0, r3
   17d28:	3718      	adds	r7, #24
   17d2a:	46bd      	mov	sp, r7
   17d2c:	bd80      	pop	{r7, pc}
   17d2e:	bf00      	nop
   17d30:	00017a99 	.word	0x00017a99
   17d34:	2000a1f8 	.word	0x2000a1f8
   17d38:	000186d9 	.word	0x000186d9
   17d3c:	000117b5 	.word	0x000117b5
   17d40:	000185f9 	.word	0x000185f9
   17d44:	0001873d 	.word	0x0001873d

00017d48 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   17d48:	b580      	push	{r7, lr}
   17d4a:	b086      	sub	sp, #24
   17d4c:	af00      	add	r7, sp, #0
   17d4e:	60f8      	str	r0, [r7, #12]
   17d50:	60b9      	str	r1, [r7, #8]
   17d52:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   17d54:	68fb      	ldr	r3, [r7, #12]
   17d56:	2200      	movs	r2, #0
   17d58:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   17d5a:	687b      	ldr	r3, [r7, #4]
   17d5c:	4619      	mov	r1, r3
   17d5e:	68b8      	ldr	r0, [r7, #8]
   17d60:	4b04      	ldr	r3, [pc, #16]	; (17d74 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   17d62:	4798      	blx	r3
   17d64:	4603      	mov	r3, r0
   17d66:	617b      	str	r3, [r7, #20]
	return r;
   17d68:	697b      	ldr	r3, [r7, #20]
}
   17d6a:	4618      	mov	r0, r3
   17d6c:	3718      	adds	r7, #24
   17d6e:	46bd      	mov	sp, r7
   17d70:	bd80      	pop	{r7, pc}
   17d72:	bf00      	nop
   17d74:	000117b5 	.word	0x000117b5

00017d78 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   17d78:	b580      	push	{r7, lr}
   17d7a:	b084      	sub	sp, #16
   17d7c:	af00      	add	r7, sp, #0
   17d7e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   17d80:	687b      	ldr	r3, [r7, #4]
   17d82:	2200      	movs	r2, #0
   17d84:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   17d86:	f107 030f 	add.w	r3, r7, #15
   17d8a:	2101      	movs	r1, #1
   17d8c:	4618      	mov	r0, r3
   17d8e:	4b08      	ldr	r3, [pc, #32]	; (17db0 <_ZN9CDC_Class4readEv+0x38>)
   17d90:	4798      	blx	r3
	while(!rxReady);
   17d92:	687b      	ldr	r3, [r7, #4]
   17d94:	7d5b      	ldrb	r3, [r3, #21]
   17d96:	b2db      	uxtb	r3, r3
   17d98:	f083 0301 	eor.w	r3, r3, #1
   17d9c:	b2db      	uxtb	r3, r3
   17d9e:	2b00      	cmp	r3, #0
   17da0:	d000      	beq.n	17da4 <_ZN9CDC_Class4readEv+0x2c>
   17da2:	e7f6      	b.n	17d92 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   17da4:	7bfb      	ldrb	r3, [r7, #15]
}
   17da6:	4618      	mov	r0, r3
   17da8:	3710      	adds	r7, #16
   17daa:	46bd      	mov	sp, r7
   17dac:	bd80      	pop	{r7, pc}
   17dae:	bf00      	nop
   17db0:	000117b5 	.word	0x000117b5

00017db4 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   17db4:	b580      	push	{r7, lr}
   17db6:	b082      	sub	sp, #8
   17db8:	af00      	add	r7, sp, #0
   17dba:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   17dbc:	687b      	ldr	r3, [r7, #4]
   17dbe:	331c      	adds	r3, #28
   17dc0:	2140      	movs	r1, #64	; 0x40
   17dc2:	4618      	mov	r0, r3
   17dc4:	4b02      	ldr	r3, [pc, #8]	; (17dd0 <_ZN9CDC_Class5flushEv+0x1c>)
   17dc6:	4798      	blx	r3
}
   17dc8:	bf00      	nop
   17dca:	3708      	adds	r7, #8
   17dcc:	46bd      	mov	sp, r7
   17dce:	bd80      	pop	{r7, pc}
   17dd0:	000117f9 	.word	0x000117f9

00017dd4 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   17dd4:	b580      	push	{r7, lr}
   17dd6:	b082      	sub	sp, #8
   17dd8:	af00      	add	r7, sp, #0
   17dda:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   17ddc:	4b02      	ldr	r3, [pc, #8]	; (17de8 <_ZN9CDC_Class5clearEv+0x14>)
   17dde:	4798      	blx	r3
}
   17de0:	bf00      	nop
   17de2:	3708      	adds	r7, #8
   17de4:	46bd      	mov	sp, r7
   17de6:	bd80      	pop	{r7, pc}
   17de8:	0001183d 	.word	0x0001183d

00017dec <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   17dec:	b580      	push	{r7, lr}
   17dee:	b082      	sub	sp, #8
   17df0:	af00      	add	r7, sp, #0
   17df2:	6078      	str	r0, [r7, #4]
   17df4:	460b      	mov	r3, r1
   17df6:	70fb      	strb	r3, [r7, #3]
	if (connected){
   17df8:	687b      	ldr	r3, [r7, #4]
   17dfa:	7c1b      	ldrb	r3, [r3, #16]
   17dfc:	b2db      	uxtb	r3, r3
   17dfe:	2b00      	cmp	r3, #0
   17e00:	d012      	beq.n	17e28 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   17e02:	687b      	ldr	r3, [r7, #4]
   17e04:	7d1b      	ldrb	r3, [r3, #20]
   17e06:	b2db      	uxtb	r3, r3
   17e08:	f083 0301 	eor.w	r3, r3, #1
   17e0c:	b2db      	uxtb	r3, r3
   17e0e:	2b00      	cmp	r3, #0
   17e10:	d000      	beq.n	17e14 <_ZN9CDC_Class5writeEh+0x28>
   17e12:	e7f6      	b.n	17e02 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   17e14:	687b      	ldr	r3, [r7, #4]
   17e16:	681b      	ldr	r3, [r3, #0]
   17e18:	3324      	adds	r3, #36	; 0x24
   17e1a:	681b      	ldr	r3, [r3, #0]
   17e1c:	1cf9      	adds	r1, r7, #3
   17e1e:	2201      	movs	r2, #1
   17e20:	6878      	ldr	r0, [r7, #4]
   17e22:	4798      	blx	r3
   17e24:	4603      	mov	r3, r0
   17e26:	e000      	b.n	17e2a <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   17e28:	2300      	movs	r3, #0
	}
		
}
   17e2a:	4618      	mov	r0, r3
   17e2c:	3708      	adds	r7, #8
   17e2e:	46bd      	mov	sp, r7
   17e30:	bd80      	pop	{r7, pc}
	...

00017e34 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   17e34:	b580      	push	{r7, lr}
   17e36:	b086      	sub	sp, #24
   17e38:	af00      	add	r7, sp, #0
   17e3a:	60f8      	str	r0, [r7, #12]
   17e3c:	60b9      	str	r1, [r7, #8]
   17e3e:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   17e40:	68fb      	ldr	r3, [r7, #12]
   17e42:	7c1b      	ldrb	r3, [r3, #16]
   17e44:	b2db      	uxtb	r3, r3
   17e46:	2b00      	cmp	r3, #0
   17e48:	d02f      	beq.n	17eaa <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   17e4a:	687a      	ldr	r2, [r7, #4]
   17e4c:	4613      	mov	r3, r2
   17e4e:	009b      	lsls	r3, r3, #2
   17e50:	4413      	add	r3, r2
   17e52:	005b      	lsls	r3, r3, #1
   17e54:	461a      	mov	r2, r3
   17e56:	4917      	ldr	r1, [pc, #92]	; (17eb4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   17e58:	4817      	ldr	r0, [pc, #92]	; (17eb8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   17e5a:	4b18      	ldr	r3, [pc, #96]	; (17ebc <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   17e5c:	4798      	blx	r3
		txReady=false;
   17e5e:	68fb      	ldr	r3, [r7, #12]
   17e60:	2200      	movs	r2, #0
   17e62:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   17e64:	687b      	ldr	r3, [r7, #4]
   17e66:	4619      	mov	r1, r3
   17e68:	68b8      	ldr	r0, [r7, #8]
   17e6a:	4b15      	ldr	r3, [pc, #84]	; (17ec0 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   17e6c:	4798      	blx	r3
   17e6e:	4603      	mov	r3, r0
   17e70:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   17e72:	68fb      	ldr	r3, [r7, #12]
   17e74:	7d1b      	ldrb	r3, [r3, #20]
   17e76:	b2db      	uxtb	r3, r3
   17e78:	f083 0301 	eor.w	r3, r3, #1
   17e7c:	b2db      	uxtb	r3, r3
   17e7e:	2b00      	cmp	r3, #0
   17e80:	d006      	beq.n	17e90 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   17e82:	68fb      	ldr	r3, [r7, #12]
   17e84:	7c1b      	ldrb	r3, [r3, #16]
   17e86:	b2db      	uxtb	r3, r3
   17e88:	2b00      	cmp	r3, #0
   17e8a:	d001      	beq.n	17e90 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   17e8c:	2301      	movs	r3, #1
   17e8e:	e000      	b.n	17e92 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   17e90:	2300      	movs	r3, #0
   17e92:	2b00      	cmp	r3, #0
   17e94:	d000      	beq.n	17e98 <_ZN9CDC_Class9writeDataEPKvl+0x64>
   17e96:	e7ec      	b.n	17e72 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   17e98:	4807      	ldr	r0, [pc, #28]	; (17eb8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   17e9a:	4b0a      	ldr	r3, [pc, #40]	; (17ec4 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   17e9c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   17e9e:	4905      	ldr	r1, [pc, #20]	; (17eb4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   17ea0:	4805      	ldr	r0, [pc, #20]	; (17eb8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   17ea2:	4b09      	ldr	r3, [pc, #36]	; (17ec8 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   17ea4:	4798      	blx	r3
		return r;
   17ea6:	697b      	ldr	r3, [r7, #20]
   17ea8:	e000      	b.n	17eac <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   17eaa:	2300      	movs	r3, #0
	}
	

}
   17eac:	4618      	mov	r0, r3
   17eae:	3718      	adds	r7, #24
   17eb0:	46bd      	mov	sp, r7
   17eb2:	bd80      	pop	{r7, pc}
   17eb4:	00017a99 	.word	0x00017a99
   17eb8:	2000a1f8 	.word	0x2000a1f8
   17ebc:	000186d9 	.word	0x000186d9
   17ec0:	000117f9 	.word	0x000117f9
   17ec4:	000185f9 	.word	0x000185f9
   17ec8:	0001873d 	.word	0x0001873d

00017ecc <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   17ecc:	b580      	push	{r7, lr}
   17ece:	b086      	sub	sp, #24
   17ed0:	af00      	add	r7, sp, #0
   17ed2:	60f8      	str	r0, [r7, #12]
   17ed4:	60b9      	str	r1, [r7, #8]
   17ed6:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   17ed8:	68fb      	ldr	r3, [r7, #12]
   17eda:	2200      	movs	r2, #0
   17edc:	751a      	strb	r2, [r3, #20]

 	if (connected){
   17ede:	68fb      	ldr	r3, [r7, #12]
   17ee0:	7c1b      	ldrb	r3, [r3, #16]
   17ee2:	b2db      	uxtb	r3, r3
   17ee4:	2b00      	cmp	r3, #0
   17ee6:	d02a      	beq.n	17f3e <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   17ee8:	687a      	ldr	r2, [r7, #4]
   17eea:	4613      	mov	r3, r2
   17eec:	009b      	lsls	r3, r3, #2
   17eee:	4413      	add	r3, r2
   17ef0:	005b      	lsls	r3, r3, #1
   17ef2:	461a      	mov	r2, r3
   17ef4:	4915      	ldr	r1, [pc, #84]	; (17f4c <_ZN9CDC_Class5writeEPKhj+0x80>)
   17ef6:	4816      	ldr	r0, [pc, #88]	; (17f50 <_ZN9CDC_Class5writeEPKhj+0x84>)
   17ef8:	4b16      	ldr	r3, [pc, #88]	; (17f54 <_ZN9CDC_Class5writeEPKhj+0x88>)
   17efa:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   17efc:	6879      	ldr	r1, [r7, #4]
   17efe:	68b8      	ldr	r0, [r7, #8]
   17f00:	4b15      	ldr	r3, [pc, #84]	; (17f58 <_ZN9CDC_Class5writeEPKhj+0x8c>)
   17f02:	4798      	blx	r3
   17f04:	4603      	mov	r3, r0
   17f06:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   17f08:	68fb      	ldr	r3, [r7, #12]
   17f0a:	7d1b      	ldrb	r3, [r3, #20]
   17f0c:	b2db      	uxtb	r3, r3
   17f0e:	f083 0301 	eor.w	r3, r3, #1
   17f12:	b2db      	uxtb	r3, r3
   17f14:	2b00      	cmp	r3, #0
   17f16:	d006      	beq.n	17f26 <_ZN9CDC_Class5writeEPKhj+0x5a>
   17f18:	68fb      	ldr	r3, [r7, #12]
   17f1a:	7c1b      	ldrb	r3, [r3, #16]
   17f1c:	b2db      	uxtb	r3, r3
   17f1e:	2b00      	cmp	r3, #0
   17f20:	d001      	beq.n	17f26 <_ZN9CDC_Class5writeEPKhj+0x5a>
   17f22:	2301      	movs	r3, #1
   17f24:	e000      	b.n	17f28 <_ZN9CDC_Class5writeEPKhj+0x5c>
   17f26:	2300      	movs	r3, #0
   17f28:	2b00      	cmp	r3, #0
   17f2a:	d000      	beq.n	17f2e <_ZN9CDC_Class5writeEPKhj+0x62>
   17f2c:	e7ec      	b.n	17f08 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   17f2e:	4808      	ldr	r0, [pc, #32]	; (17f50 <_ZN9CDC_Class5writeEPKhj+0x84>)
   17f30:	4b0a      	ldr	r3, [pc, #40]	; (17f5c <_ZN9CDC_Class5writeEPKhj+0x90>)
   17f32:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   17f34:	4905      	ldr	r1, [pc, #20]	; (17f4c <_ZN9CDC_Class5writeEPKhj+0x80>)
   17f36:	4806      	ldr	r0, [pc, #24]	; (17f50 <_ZN9CDC_Class5writeEPKhj+0x84>)
   17f38:	4b09      	ldr	r3, [pc, #36]	; (17f60 <_ZN9CDC_Class5writeEPKhj+0x94>)
   17f3a:	4798      	blx	r3
   17f3c:	e001      	b.n	17f42 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   17f3e:	2300      	movs	r3, #0
   17f40:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   17f42:	697b      	ldr	r3, [r7, #20]
}
   17f44:	4618      	mov	r0, r3
   17f46:	3718      	adds	r7, #24
   17f48:	46bd      	mov	sp, r7
   17f4a:	bd80      	pop	{r7, pc}
   17f4c:	00017a99 	.word	0x00017a99
   17f50:	2000a1f8 	.word	0x2000a1f8
   17f54:	000186d9 	.word	0x000186d9
   17f58:	000117f9 	.word	0x000117f9
   17f5c:	000185f9 	.word	0x000185f9
   17f60:	0001873d 	.word	0x0001873d

00017f64 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   17f64:	b480      	push	{r7}
   17f66:	b083      	sub	sp, #12
   17f68:	af00      	add	r7, sp, #0
   17f6a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   17f6c:	687b      	ldr	r3, [r7, #4]
   17f6e:	7d5b      	ldrb	r3, [r3, #21]
   17f70:	b2db      	uxtb	r3, r3
   17f72:	2b00      	cmp	r3, #0
   17f74:	d006      	beq.n	17f84 <_ZN9CDC_Class9availableEv+0x20>
   17f76:	687b      	ldr	r3, [r7, #4]
   17f78:	7d1b      	ldrb	r3, [r3, #20]
   17f7a:	b2db      	uxtb	r3, r3
   17f7c:	2b00      	cmp	r3, #0
   17f7e:	d001      	beq.n	17f84 <_ZN9CDC_Class9availableEv+0x20>
   17f80:	2301      	movs	r3, #1
   17f82:	e000      	b.n	17f86 <_ZN9CDC_Class9availableEv+0x22>
   17f84:	2300      	movs	r3, #0
   17f86:	2b00      	cmp	r3, #0
   17f88:	d001      	beq.n	17f8e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   17f8a:	2301      	movs	r3, #1
   17f8c:	e000      	b.n	17f90 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   17f8e:	2300      	movs	r3, #0
	}
	
}
   17f90:	4618      	mov	r0, r3
   17f92:	370c      	adds	r7, #12
   17f94:	46bd      	mov	sp, r7
   17f96:	bc80      	pop	{r7}
   17f98:	4770      	bx	lr
	...

00017f9c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   17f9c:	b580      	push	{r7, lr}
   17f9e:	b082      	sub	sp, #8
   17fa0:	af00      	add	r7, sp, #0
   17fa2:	6078      	str	r0, [r7, #4]
   17fa4:	6039      	str	r1, [r7, #0]
   17fa6:	687b      	ldr	r3, [r7, #4]
   17fa8:	2b01      	cmp	r3, #1
   17faa:	d10c      	bne.n	17fc6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   17fac:	683b      	ldr	r3, [r7, #0]
   17fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17fb2:	4293      	cmp	r3, r2
   17fb4:	d107      	bne.n	17fc6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   17fb6:	4806      	ldr	r0, [pc, #24]	; (17fd0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   17fb8:	4b06      	ldr	r3, [pc, #24]	; (17fd4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   17fba:	4798      	blx	r3
   17fbc:	4a06      	ldr	r2, [pc, #24]	; (17fd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   17fbe:	4907      	ldr	r1, [pc, #28]	; (17fdc <_Z41__static_initialization_and_destruction_0ii+0x40>)
   17fc0:	4803      	ldr	r0, [pc, #12]	; (17fd0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   17fc2:	4b07      	ldr	r3, [pc, #28]	; (17fe0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   17fc4:	4798      	blx	r3
   17fc6:	bf00      	nop
   17fc8:	3708      	adds	r7, #8
   17fca:	46bd      	mov	sp, r7
   17fcc:	bd80      	pop	{r7, pc}
   17fce:	bf00      	nop
   17fd0:	2000a140 	.word	0x2000a140
   17fd4:	00017b89 	.word	0x00017b89
   17fd8:	20000000 	.word	0x20000000
   17fdc:	00017bd1 	.word	0x00017bd1
   17fe0:	00019ab1 	.word	0x00019ab1

00017fe4 <_GLOBAL__sub_I_ptrCDCClass>:
   17fe4:	b580      	push	{r7, lr}
   17fe6:	af00      	add	r7, sp, #0
   17fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17fec:	2001      	movs	r0, #1
   17fee:	4b01      	ldr	r3, [pc, #4]	; (17ff4 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   17ff0:	4798      	blx	r3
   17ff2:	bd80      	pop	{r7, pc}
   17ff4:	00017f9d 	.word	0x00017f9d

00017ff8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   17ff8:	b590      	push	{r4, r7, lr}
   17ffa:	b083      	sub	sp, #12
   17ffc:	af00      	add	r7, sp, #0
   17ffe:	6078      	str	r0, [r7, #4]
   18000:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
   18002:	683b      	ldr	r3, [r7, #0]
   18004:	2b00      	cmp	r3, #0
   18006:	d101      	bne.n	1800c <_ZN5Print5writeEPKc+0x14>
   18008:	2300      	movs	r3, #0
   1800a:	e00c      	b.n	18026 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
   1800c:	687b      	ldr	r3, [r7, #4]
   1800e:	681b      	ldr	r3, [r3, #0]
   18010:	3304      	adds	r3, #4
   18012:	681c      	ldr	r4, [r3, #0]
   18014:	6838      	ldr	r0, [r7, #0]
   18016:	4b06      	ldr	r3, [pc, #24]	; (18030 <_ZN5Print5writeEPKc+0x38>)
   18018:	4798      	blx	r3
   1801a:	4603      	mov	r3, r0
   1801c:	461a      	mov	r2, r3
   1801e:	6839      	ldr	r1, [r7, #0]
   18020:	6878      	ldr	r0, [r7, #4]
   18022:	47a0      	blx	r4
   18024:	4603      	mov	r3, r0
    }
   18026:	4618      	mov	r0, r3
   18028:	370c      	adds	r7, #12
   1802a:	46bd      	mov	sp, r7
   1802c:	bd90      	pop	{r4, r7, pc}
   1802e:	bf00      	nop
   18030:	0001d5c1 	.word	0x0001d5c1

00018034 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   18034:	b580      	push	{r7, lr}
   18036:	b086      	sub	sp, #24
   18038:	af00      	add	r7, sp, #0
   1803a:	60f8      	str	r0, [r7, #12]
   1803c:	60b9      	str	r1, [r7, #8]
   1803e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   18040:	2300      	movs	r3, #0
   18042:	617b      	str	r3, [r7, #20]
  while (size--) {
   18044:	687b      	ldr	r3, [r7, #4]
   18046:	1e5a      	subs	r2, r3, #1
   18048:	607a      	str	r2, [r7, #4]
   1804a:	2b00      	cmp	r3, #0
   1804c:	bf14      	ite	ne
   1804e:	2301      	movne	r3, #1
   18050:	2300      	moveq	r3, #0
   18052:	b2db      	uxtb	r3, r3
   18054:	2b00      	cmp	r3, #0
   18056:	d016      	beq.n	18086 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   18058:	68fb      	ldr	r3, [r7, #12]
   1805a:	681b      	ldr	r3, [r3, #0]
   1805c:	681a      	ldr	r2, [r3, #0]
   1805e:	68bb      	ldr	r3, [r7, #8]
   18060:	1c59      	adds	r1, r3, #1
   18062:	60b9      	str	r1, [r7, #8]
   18064:	781b      	ldrb	r3, [r3, #0]
   18066:	4619      	mov	r1, r3
   18068:	68f8      	ldr	r0, [r7, #12]
   1806a:	4790      	blx	r2
   1806c:	4603      	mov	r3, r0
   1806e:	2b00      	cmp	r3, #0
   18070:	bf14      	ite	ne
   18072:	2301      	movne	r3, #1
   18074:	2300      	moveq	r3, #0
   18076:	b2db      	uxtb	r3, r3
   18078:	2b00      	cmp	r3, #0
   1807a:	d003      	beq.n	18084 <_ZN5Print5writeEPKhj+0x50>
   1807c:	697b      	ldr	r3, [r7, #20]
   1807e:	3301      	adds	r3, #1
   18080:	617b      	str	r3, [r7, #20]
  while (size--) {
   18082:	e7df      	b.n	18044 <_ZN5Print5writeEPKhj+0x10>
    else break;
   18084:	bf00      	nop
  }
  return n;
   18086:	697b      	ldr	r3, [r7, #20]
}
   18088:	4618      	mov	r0, r3
   1808a:	3718      	adds	r7, #24
   1808c:	46bd      	mov	sp, r7
   1808e:	bd80      	pop	{r7, pc}

00018090 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
   18090:	b580      	push	{r7, lr}
   18092:	b082      	sub	sp, #8
   18094:	af00      	add	r7, sp, #0
   18096:	6078      	str	r0, [r7, #4]
   18098:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
   1809a:	6839      	ldr	r1, [r7, #0]
   1809c:	6878      	ldr	r0, [r7, #4]
   1809e:	4b03      	ldr	r3, [pc, #12]	; (180ac <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
   180a0:	4798      	blx	r3
   180a2:	4603      	mov	r3, r0
}
   180a4:	4618      	mov	r0, r3
   180a6:	3708      	adds	r7, #8
   180a8:	46bd      	mov	sp, r7
   180aa:	bd80      	pop	{r7, pc}
   180ac:	000180b1 	.word	0x000180b1

000180b0 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   180b0:	b580      	push	{r7, lr}
   180b2:	b082      	sub	sp, #8
   180b4:	af00      	add	r7, sp, #0
   180b6:	6078      	str	r0, [r7, #4]
   180b8:	6039      	str	r1, [r7, #0]
  return write(str);
   180ba:	6839      	ldr	r1, [r7, #0]
   180bc:	6878      	ldr	r0, [r7, #4]
   180be:	4b03      	ldr	r3, [pc, #12]	; (180cc <_ZN5Print5printEPKc+0x1c>)
   180c0:	4798      	blx	r3
   180c2:	4603      	mov	r3, r0
}
   180c4:	4618      	mov	r0, r3
   180c6:	3708      	adds	r7, #8
   180c8:	46bd      	mov	sp, r7
   180ca:	bd80      	pop	{r7, pc}
   180cc:	00017ff9 	.word	0x00017ff9

000180d0 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   180d0:	b580      	push	{r7, lr}
   180d2:	b084      	sub	sp, #16
   180d4:	af00      	add	r7, sp, #0
   180d6:	60f8      	str	r0, [r7, #12]
   180d8:	460b      	mov	r3, r1
   180da:	607a      	str	r2, [r7, #4]
   180dc:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   180de:	7afb      	ldrb	r3, [r7, #11]
   180e0:	687a      	ldr	r2, [r7, #4]
   180e2:	4619      	mov	r1, r3
   180e4:	68f8      	ldr	r0, [r7, #12]
   180e6:	4b03      	ldr	r3, [pc, #12]	; (180f4 <_ZN5Print5printEhi+0x24>)
   180e8:	4798      	blx	r3
   180ea:	4603      	mov	r3, r0
}
   180ec:	4618      	mov	r0, r3
   180ee:	3710      	adds	r7, #16
   180f0:	46bd      	mov	sp, r7
   180f2:	bd80      	pop	{r7, pc}
   180f4:	000180f9 	.word	0x000180f9

000180f8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   180f8:	b580      	push	{r7, lr}
   180fa:	b084      	sub	sp, #16
   180fc:	af00      	add	r7, sp, #0
   180fe:	60f8      	str	r0, [r7, #12]
   18100:	60b9      	str	r1, [r7, #8]
   18102:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   18104:	687b      	ldr	r3, [r7, #4]
   18106:	2b00      	cmp	r3, #0
   18108:	d109      	bne.n	1811e <_ZN5Print5printEmi+0x26>
   1810a:	68fb      	ldr	r3, [r7, #12]
   1810c:	681b      	ldr	r3, [r3, #0]
   1810e:	681b      	ldr	r3, [r3, #0]
   18110:	68ba      	ldr	r2, [r7, #8]
   18112:	b2d2      	uxtb	r2, r2
   18114:	4611      	mov	r1, r2
   18116:	68f8      	ldr	r0, [r7, #12]
   18118:	4798      	blx	r3
   1811a:	4603      	mov	r3, r0
   1811c:	e007      	b.n	1812e <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   1811e:	687b      	ldr	r3, [r7, #4]
   18120:	b2db      	uxtb	r3, r3
   18122:	461a      	mov	r2, r3
   18124:	68b9      	ldr	r1, [r7, #8]
   18126:	68f8      	ldr	r0, [r7, #12]
   18128:	4b03      	ldr	r3, [pc, #12]	; (18138 <_ZN5Print5printEmi+0x40>)
   1812a:	4798      	blx	r3
   1812c:	4603      	mov	r3, r0
}
   1812e:	4618      	mov	r0, r3
   18130:	3710      	adds	r7, #16
   18132:	46bd      	mov	sp, r7
   18134:	bd80      	pop	{r7, pc}
   18136:	bf00      	nop
   18138:	0001823d 	.word	0x0001823d

0001813c <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
   1813c:	b580      	push	{r7, lr}
   1813e:	b084      	sub	sp, #16
   18140:	af00      	add	r7, sp, #0
   18142:	6078      	str	r0, [r7, #4]
   18144:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
   18146:	6839      	ldr	r1, [r7, #0]
   18148:	6878      	ldr	r0, [r7, #4]
   1814a:	4b07      	ldr	r3, [pc, #28]	; (18168 <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
   1814c:	4798      	blx	r3
   1814e:	60f8      	str	r0, [r7, #12]
  n += println();
   18150:	6878      	ldr	r0, [r7, #4]
   18152:	4b06      	ldr	r3, [pc, #24]	; (1816c <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
   18154:	4798      	blx	r3
   18156:	4602      	mov	r2, r0
   18158:	68fb      	ldr	r3, [r7, #12]
   1815a:	4413      	add	r3, r2
   1815c:	60fb      	str	r3, [r7, #12]
  return n;
   1815e:	68fb      	ldr	r3, [r7, #12]
}
   18160:	4618      	mov	r0, r3
   18162:	3710      	adds	r7, #16
   18164:	46bd      	mov	sp, r7
   18166:	bd80      	pop	{r7, pc}
   18168:	00018091 	.word	0x00018091
   1816c:	00018171 	.word	0x00018171

00018170 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   18170:	b580      	push	{r7, lr}
   18172:	b082      	sub	sp, #8
   18174:	af00      	add	r7, sp, #0
   18176:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   18178:	4904      	ldr	r1, [pc, #16]	; (1818c <_ZN5Print7printlnEv+0x1c>)
   1817a:	6878      	ldr	r0, [r7, #4]
   1817c:	4b04      	ldr	r3, [pc, #16]	; (18190 <_ZN5Print7printlnEv+0x20>)
   1817e:	4798      	blx	r3
   18180:	4603      	mov	r3, r0
}
   18182:	4618      	mov	r0, r3
   18184:	3708      	adds	r7, #8
   18186:	46bd      	mov	sp, r7
   18188:	bd80      	pop	{r7, pc}
   1818a:	bf00      	nop
   1818c:	00022f78 	.word	0x00022f78
   18190:	00017ff9 	.word	0x00017ff9

00018194 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   18194:	b580      	push	{r7, lr}
   18196:	b084      	sub	sp, #16
   18198:	af00      	add	r7, sp, #0
   1819a:	6078      	str	r0, [r7, #4]
   1819c:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   1819e:	6839      	ldr	r1, [r7, #0]
   181a0:	6878      	ldr	r0, [r7, #4]
   181a2:	4b07      	ldr	r3, [pc, #28]	; (181c0 <_ZN5Print7printlnEPKc+0x2c>)
   181a4:	4798      	blx	r3
   181a6:	60f8      	str	r0, [r7, #12]
  n += println();
   181a8:	6878      	ldr	r0, [r7, #4]
   181aa:	4b06      	ldr	r3, [pc, #24]	; (181c4 <_ZN5Print7printlnEPKc+0x30>)
   181ac:	4798      	blx	r3
   181ae:	4602      	mov	r2, r0
   181b0:	68fb      	ldr	r3, [r7, #12]
   181b2:	4413      	add	r3, r2
   181b4:	60fb      	str	r3, [r7, #12]
  return n;
   181b6:	68fb      	ldr	r3, [r7, #12]
}
   181b8:	4618      	mov	r0, r3
   181ba:	3710      	adds	r7, #16
   181bc:	46bd      	mov	sp, r7
   181be:	bd80      	pop	{r7, pc}
   181c0:	000180b1 	.word	0x000180b1
   181c4:	00018171 	.word	0x00018171

000181c8 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   181c8:	b580      	push	{r7, lr}
   181ca:	b086      	sub	sp, #24
   181cc:	af00      	add	r7, sp, #0
   181ce:	60f8      	str	r0, [r7, #12]
   181d0:	460b      	mov	r3, r1
   181d2:	607a      	str	r2, [r7, #4]
   181d4:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
   181d6:	7afb      	ldrb	r3, [r7, #11]
   181d8:	687a      	ldr	r2, [r7, #4]
   181da:	4619      	mov	r1, r3
   181dc:	68f8      	ldr	r0, [r7, #12]
   181de:	4b07      	ldr	r3, [pc, #28]	; (181fc <_ZN5Print7printlnEhi+0x34>)
   181e0:	4798      	blx	r3
   181e2:	6178      	str	r0, [r7, #20]
  n += println();
   181e4:	68f8      	ldr	r0, [r7, #12]
   181e6:	4b06      	ldr	r3, [pc, #24]	; (18200 <_ZN5Print7printlnEhi+0x38>)
   181e8:	4798      	blx	r3
   181ea:	4602      	mov	r2, r0
   181ec:	697b      	ldr	r3, [r7, #20]
   181ee:	4413      	add	r3, r2
   181f0:	617b      	str	r3, [r7, #20]
  return n;
   181f2:	697b      	ldr	r3, [r7, #20]
}
   181f4:	4618      	mov	r0, r3
   181f6:	3718      	adds	r7, #24
   181f8:	46bd      	mov	sp, r7
   181fa:	bd80      	pop	{r7, pc}
   181fc:	000180d1 	.word	0x000180d1
   18200:	00018171 	.word	0x00018171

00018204 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   18204:	b580      	push	{r7, lr}
   18206:	b086      	sub	sp, #24
   18208:	af00      	add	r7, sp, #0
   1820a:	60f8      	str	r0, [r7, #12]
   1820c:	60b9      	str	r1, [r7, #8]
   1820e:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
   18210:	687a      	ldr	r2, [r7, #4]
   18212:	68b9      	ldr	r1, [r7, #8]
   18214:	68f8      	ldr	r0, [r7, #12]
   18216:	4b07      	ldr	r3, [pc, #28]	; (18234 <_ZN5Print7printlnEmi+0x30>)
   18218:	4798      	blx	r3
   1821a:	6178      	str	r0, [r7, #20]
  n += println();
   1821c:	68f8      	ldr	r0, [r7, #12]
   1821e:	4b06      	ldr	r3, [pc, #24]	; (18238 <_ZN5Print7printlnEmi+0x34>)
   18220:	4798      	blx	r3
   18222:	4602      	mov	r2, r0
   18224:	697b      	ldr	r3, [r7, #20]
   18226:	4413      	add	r3, r2
   18228:	617b      	str	r3, [r7, #20]
  return n;
   1822a:	697b      	ldr	r3, [r7, #20]
}
   1822c:	4618      	mov	r0, r3
   1822e:	3718      	adds	r7, #24
   18230:	46bd      	mov	sp, r7
   18232:	bd80      	pop	{r7, pc}
   18234:	000180f9 	.word	0x000180f9
   18238:	00018171 	.word	0x00018171

0001823c <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   1823c:	b580      	push	{r7, lr}
   1823e:	b08e      	sub	sp, #56	; 0x38
   18240:	af00      	add	r7, sp, #0
   18242:	60f8      	str	r0, [r7, #12]
   18244:	60b9      	str	r1, [r7, #8]
   18246:	4613      	mov	r3, r2
   18248:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   1824a:	f107 0310 	add.w	r3, r7, #16
   1824e:	3320      	adds	r3, #32
   18250:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   18252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18254:	2200      	movs	r2, #0
   18256:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   18258:	79fb      	ldrb	r3, [r7, #7]
   1825a:	2b01      	cmp	r3, #1
   1825c:	dc01      	bgt.n	18262 <_ZN5Print11printNumberEmh+0x26>
   1825e:	230a      	movs	r3, #10
   18260:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   18262:	79fa      	ldrb	r2, [r7, #7]
   18264:	68bb      	ldr	r3, [r7, #8]
   18266:	fbb3 f1f2 	udiv	r1, r3, r2
   1826a:	fb02 f201 	mul.w	r2, r2, r1
   1826e:	1a9b      	subs	r3, r3, r2
   18270:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   18274:	79fb      	ldrb	r3, [r7, #7]
   18276:	68ba      	ldr	r2, [r7, #8]
   18278:	fbb2 f3f3 	udiv	r3, r2, r3
   1827c:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   1827e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18280:	3b01      	subs	r3, #1
   18282:	637b      	str	r3, [r7, #52]	; 0x34
   18284:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   18288:	2b09      	cmp	r3, #9
   1828a:	dc04      	bgt.n	18296 <_ZN5Print11printNumberEmh+0x5a>
   1828c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   18290:	3330      	adds	r3, #48	; 0x30
   18292:	b2db      	uxtb	r3, r3
   18294:	e003      	b.n	1829e <_ZN5Print11printNumberEmh+0x62>
   18296:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1829a:	3337      	adds	r3, #55	; 0x37
   1829c:	b2db      	uxtb	r3, r3
   1829e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   182a0:	7013      	strb	r3, [r2, #0]
  } while(n);
   182a2:	68bb      	ldr	r3, [r7, #8]
   182a4:	2b00      	cmp	r3, #0
   182a6:	d000      	beq.n	182aa <_ZN5Print11printNumberEmh+0x6e>
  do {
   182a8:	e7db      	b.n	18262 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   182aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
   182ac:	68f8      	ldr	r0, [r7, #12]
   182ae:	4b03      	ldr	r3, [pc, #12]	; (182bc <_ZN5Print11printNumberEmh+0x80>)
   182b0:	4798      	blx	r3
   182b2:	4603      	mov	r3, r0
}
   182b4:	4618      	mov	r0, r3
   182b6:	3738      	adds	r7, #56	; 0x38
   182b8:	46bd      	mov	sp, r7
   182ba:	bd80      	pop	{r7, pc}
   182bc:	00017ff9 	.word	0x00017ff9

000182c0 <hri_port_read_DIR_reg>:
{
   182c0:	b480      	push	{r7}
   182c2:	b083      	sub	sp, #12
   182c4:	af00      	add	r7, sp, #0
   182c6:	6078      	str	r0, [r7, #4]
   182c8:	460b      	mov	r3, r1
   182ca:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   182cc:	78fb      	ldrb	r3, [r7, #3]
   182ce:	687a      	ldr	r2, [r7, #4]
   182d0:	01db      	lsls	r3, r3, #7
   182d2:	4413      	add	r3, r2
   182d4:	681b      	ldr	r3, [r3, #0]
}
   182d6:	4618      	mov	r0, r3
   182d8:	370c      	adds	r7, #12
   182da:	46bd      	mov	sp, r7
   182dc:	bc80      	pop	{r7}
   182de:	4770      	bx	lr

000182e0 <hri_port_read_OUT_reg>:
{
   182e0:	b480      	push	{r7}
   182e2:	b083      	sub	sp, #12
   182e4:	af00      	add	r7, sp, #0
   182e6:	6078      	str	r0, [r7, #4]
   182e8:	460b      	mov	r3, r1
   182ea:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   182ec:	78fb      	ldrb	r3, [r7, #3]
   182ee:	687a      	ldr	r2, [r7, #4]
   182f0:	01db      	lsls	r3, r3, #7
   182f2:	4413      	add	r3, r2
   182f4:	3310      	adds	r3, #16
   182f6:	681b      	ldr	r3, [r3, #0]
}
   182f8:	4618      	mov	r0, r3
   182fa:	370c      	adds	r7, #12
   182fc:	46bd      	mov	sp, r7
   182fe:	bc80      	pop	{r7}
   18300:	4770      	bx	lr

00018302 <hri_port_read_IN_reg>:
{
   18302:	b480      	push	{r7}
   18304:	b083      	sub	sp, #12
   18306:	af00      	add	r7, sp, #0
   18308:	6078      	str	r0, [r7, #4]
   1830a:	460b      	mov	r3, r1
   1830c:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   1830e:	78fb      	ldrb	r3, [r7, #3]
   18310:	687a      	ldr	r2, [r7, #4]
   18312:	01db      	lsls	r3, r3, #7
   18314:	4413      	add	r3, r2
   18316:	3320      	adds	r3, #32
   18318:	681b      	ldr	r3, [r3, #0]
}
   1831a:	4618      	mov	r0, r3
   1831c:	370c      	adds	r7, #12
   1831e:	46bd      	mov	sp, r7
   18320:	bc80      	pop	{r7}
   18322:	4770      	bx	lr

00018324 <_gpio_get_level>:
{
   18324:	b580      	push	{r7, lr}
   18326:	b086      	sub	sp, #24
   18328:	af00      	add	r7, sp, #0
   1832a:	4603      	mov	r3, r0
   1832c:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
   1832e:	f107 030c 	add.w	r3, r7, #12
   18332:	4618      	mov	r0, r3
   18334:	4b13      	ldr	r3, [pc, #76]	; (18384 <_gpio_get_level+0x60>)
   18336:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   18338:	79fb      	ldrb	r3, [r7, #7]
   1833a:	4619      	mov	r1, r3
   1833c:	4812      	ldr	r0, [pc, #72]	; (18388 <_gpio_get_level+0x64>)
   1833e:	4b13      	ldr	r3, [pc, #76]	; (1838c <_gpio_get_level+0x68>)
   18340:	4798      	blx	r3
   18342:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   18344:	79fb      	ldrb	r3, [r7, #7]
   18346:	4619      	mov	r1, r3
   18348:	480f      	ldr	r0, [pc, #60]	; (18388 <_gpio_get_level+0x64>)
   1834a:	4b11      	ldr	r3, [pc, #68]	; (18390 <_gpio_get_level+0x6c>)
   1834c:	4798      	blx	r3
   1834e:	4602      	mov	r2, r0
   18350:	697b      	ldr	r3, [r7, #20]
   18352:	43db      	mvns	r3, r3
   18354:	4013      	ands	r3, r2
   18356:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   18358:	79fb      	ldrb	r3, [r7, #7]
   1835a:	4619      	mov	r1, r3
   1835c:	480a      	ldr	r0, [pc, #40]	; (18388 <_gpio_get_level+0x64>)
   1835e:	4b0d      	ldr	r3, [pc, #52]	; (18394 <_gpio_get_level+0x70>)
   18360:	4798      	blx	r3
   18362:	4602      	mov	r2, r0
   18364:	697b      	ldr	r3, [r7, #20]
   18366:	4013      	ands	r3, r2
   18368:	693a      	ldr	r2, [r7, #16]
   1836a:	4313      	orrs	r3, r2
   1836c:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
   1836e:	f107 030c 	add.w	r3, r7, #12
   18372:	4618      	mov	r0, r3
   18374:	4b08      	ldr	r3, [pc, #32]	; (18398 <_gpio_get_level+0x74>)
   18376:	4798      	blx	r3
	return tmp;
   18378:	693b      	ldr	r3, [r7, #16]
}
   1837a:	4618      	mov	r0, r3
   1837c:	3718      	adds	r7, #24
   1837e:	46bd      	mov	sp, r7
   18380:	bd80      	pop	{r7, pc}
   18382:	bf00      	nop
   18384:	000109d5 	.word	0x000109d5
   18388:	41008000 	.word	0x41008000
   1838c:	000182c1 	.word	0x000182c1
   18390:	00018303 	.word	0x00018303
   18394:	000182e1 	.word	0x000182e1
   18398:	000109fb 	.word	0x000109fb

0001839c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   1839c:	b580      	push	{r7, lr}
   1839e:	b082      	sub	sp, #8
   183a0:	af00      	add	r7, sp, #0
   183a2:	4603      	mov	r3, r0
   183a4:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   183a6:	79fb      	ldrb	r3, [r7, #7]
   183a8:	115b      	asrs	r3, r3, #5
   183aa:	b2db      	uxtb	r3, r3
   183ac:	4618      	mov	r0, r3
   183ae:	4b09      	ldr	r3, [pc, #36]	; (183d4 <gpio_get_pin_level+0x38>)
   183b0:	4798      	blx	r3
   183b2:	4601      	mov	r1, r0
   183b4:	79fb      	ldrb	r3, [r7, #7]
   183b6:	f003 031f 	and.w	r3, r3, #31
   183ba:	2201      	movs	r2, #1
   183bc:	fa02 f303 	lsl.w	r3, r2, r3
   183c0:	400b      	ands	r3, r1
   183c2:	2b00      	cmp	r3, #0
   183c4:	bf14      	ite	ne
   183c6:	2301      	movne	r3, #1
   183c8:	2300      	moveq	r3, #0
   183ca:	b2db      	uxtb	r3, r3
}
   183cc:	4618      	mov	r0, r3
   183ce:	3708      	adds	r7, #8
   183d0:	46bd      	mov	sp, r7
   183d2:	bd80      	pop	{r7, pc}
   183d4:	00018325 	.word	0x00018325

000183d8 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   183d8:	b480      	push	{r7}
   183da:	b083      	sub	sp, #12
   183dc:	af00      	add	r7, sp, #0
   183de:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   183e0:	4b06      	ldr	r3, [pc, #24]	; (183fc <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   183e2:	681b      	ldr	r3, [r3, #0]
   183e4:	2201      	movs	r2, #1
   183e6:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   183e8:	4b04      	ldr	r3, [pc, #16]	; (183fc <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   183ea:	681b      	ldr	r3, [r3, #0]
   183ec:	2200      	movs	r2, #0
   183ee:	705a      	strb	r2, [r3, #1]
}
   183f0:	bf00      	nop
   183f2:	370c      	adds	r7, #12
   183f4:	46bd      	mov	sp, r7
   183f6:	bc80      	pop	{r7}
   183f8:	4770      	bx	lr
   183fa:	bf00      	nop
   183fc:	2000a1a0 	.word	0x2000a1a0

00018400 <_ZL10USBPluggedv>:

static void USBPlugged(void){
   18400:	b580      	push	{r7, lr}
   18402:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   18404:	2040      	movs	r0, #64	; 0x40
   18406:	4b0a      	ldr	r3, [pc, #40]	; (18430 <_ZL10USBPluggedv+0x30>)
   18408:	4798      	blx	r3
   1840a:	4603      	mov	r3, r0
   1840c:	2b00      	cmp	r3, #0
   1840e:	d004      	beq.n	1841a <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   18410:	4b08      	ldr	r3, [pc, #32]	; (18434 <_ZL10USBPluggedv+0x34>)
   18412:	681b      	ldr	r3, [r3, #0]
   18414:	2201      	movs	r2, #1
   18416:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   18418:	e007      	b.n	1842a <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   1841a:	4b06      	ldr	r3, [pc, #24]	; (18434 <_ZL10USBPluggedv+0x34>)
   1841c:	681b      	ldr	r3, [r3, #0]
   1841e:	2200      	movs	r2, #0
   18420:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   18422:	4b04      	ldr	r3, [pc, #16]	; (18434 <_ZL10USBPluggedv+0x34>)
   18424:	681b      	ldr	r3, [r3, #0]
   18426:	2200      	movs	r2, #0
   18428:	701a      	strb	r2, [r3, #0]
}
   1842a:	bf00      	nop
   1842c:	bd80      	pop	{r7, pc}
   1842e:	bf00      	nop
   18430:	0001839d 	.word	0x0001839d
   18434:	2000a1a0 	.word	0x2000a1a0

00018438 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   18438:	b480      	push	{r7}
   1843a:	b083      	sub	sp, #12
   1843c:	af00      	add	r7, sp, #0
   1843e:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   18440:	4a04      	ldr	r2, [pc, #16]	; (18454 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   18442:	687b      	ldr	r3, [r7, #4]
   18444:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   18446:	687b      	ldr	r3, [r7, #4]
   18448:	4618      	mov	r0, r3
   1844a:	370c      	adds	r7, #12
   1844c:	46bd      	mov	sp, r7
   1844e:	bc80      	pop	{r7}
   18450:	4770      	bx	lr
   18452:	bf00      	nop
   18454:	2000a1a0 	.word	0x2000a1a0

00018458 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   18458:	b480      	push	{r7}
   1845a:	b083      	sub	sp, #12
   1845c:	af00      	add	r7, sp, #0
   1845e:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   18460:	687b      	ldr	r3, [r7, #4]
   18462:	4618      	mov	r0, r3
   18464:	370c      	adds	r7, #12
   18466:	46bd      	mov	sp, r7
   18468:	bc80      	pop	{r7}
   1846a:	4770      	bx	lr

0001846c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   1846c:	b580      	push	{r7, lr}
   1846e:	b082      	sub	sp, #8
   18470:	af00      	add	r7, sp, #0
   18472:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   18474:	491f      	ldr	r1, [pc, #124]	; (184f4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   18476:	2040      	movs	r0, #64	; 0x40
   18478:	4b1f      	ldr	r3, [pc, #124]	; (184f8 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   1847a:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   1847c:	481f      	ldr	r0, [pc, #124]	; (184fc <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   1847e:	4b20      	ldr	r3, [pc, #128]	; (18500 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   18480:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   18482:	2040      	movs	r0, #64	; 0x40
   18484:	4b1f      	ldr	r3, [pc, #124]	; (18504 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   18486:	4798      	blx	r3
   18488:	4603      	mov	r3, r0
   1848a:	461a      	mov	r2, r3
   1848c:	687b      	ldr	r3, [r7, #4]
   1848e:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   18490:	687b      	ldr	r3, [r7, #4]
   18492:	78db      	ldrb	r3, [r3, #3]
   18494:	2b00      	cmp	r3, #0
   18496:	d024      	beq.n	184e2 <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
   18498:	687b      	ldr	r3, [r7, #4]
   1849a:	2200      	movs	r2, #0
   1849c:	709a      	strb	r2, [r3, #2]
			plugged=true;
   1849e:	687b      	ldr	r3, [r7, #4]
   184a0:	2201      	movs	r2, #1
   184a2:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   184a4:	f44f 7216 	mov.w	r2, #600	; 0x258
   184a8:	4917      	ldr	r1, [pc, #92]	; (18508 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   184aa:	4814      	ldr	r0, [pc, #80]	; (184fc <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   184ac:	4b17      	ldr	r3, [pc, #92]	; (1850c <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   184ae:	4798      	blx	r3
			usbTerminalTimer.Start();
   184b0:	4812      	ldr	r0, [pc, #72]	; (184fc <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   184b2:	4b17      	ldr	r3, [pc, #92]	; (18510 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   184b4:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   184b6:	4817      	ldr	r0, [pc, #92]	; (18514 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   184b8:	4b17      	ldr	r3, [pc, #92]	; (18518 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
   184ba:	4798      	blx	r3
   184bc:	4603      	mov	r3, r0
   184be:	f083 0301 	eor.w	r3, r3, #1
   184c2:	b2db      	uxtb	r3, r3
   184c4:	2b00      	cmp	r3, #0
   184c6:	d008      	beq.n	184da <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
   184c8:	687b      	ldr	r3, [r7, #4]
   184ca:	789b      	ldrb	r3, [r3, #2]
   184cc:	b2db      	uxtb	r3, r3
   184ce:	2b00      	cmp	r3, #0
   184d0:	d0f1      	beq.n	184b6 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
   184d2:	687b      	ldr	r3, [r7, #4]
   184d4:	2200      	movs	r2, #0
   184d6:	701a      	strb	r2, [r3, #0]
					return;
   184d8:	e009      	b.n	184ee <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   184da:	4808      	ldr	r0, [pc, #32]	; (184fc <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   184dc:	4b0f      	ldr	r3, [pc, #60]	; (1851c <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
   184de:	4798      	blx	r3
   184e0:	e005      	b.n	184ee <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
   184e2:	687b      	ldr	r3, [r7, #4]
   184e4:	2200      	movs	r2, #0
   184e6:	701a      	strb	r2, [r3, #0]
			plugged=false;
   184e8:	687b      	ldr	r3, [r7, #4]
   184ea:	2200      	movs	r2, #0
   184ec:	705a      	strb	r2, [r3, #1]
		}
		
}
   184ee:	3708      	adds	r7, #8
   184f0:	46bd      	mov	sp, r7
   184f2:	bd80      	pop	{r7, pc}
   184f4:	00018401 	.word	0x00018401
   184f8:	00006545 	.word	0x00006545
   184fc:	2000a1f8 	.word	0x2000a1f8
   18500:	0001859d 	.word	0x0001859d
   18504:	0001839d 	.word	0x0001839d
   18508:	000183d9 	.word	0x000183d9
   1850c:	000186b1 	.word	0x000186b1
   18510:	000185d5 	.word	0x000185d5
   18514:	2000a140 	.word	0x2000a140
   18518:	00017c41 	.word	0x00017c41
   1851c:	000185f9 	.word	0x000185f9

00018520 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   18520:	b580      	push	{r7, lr}
   18522:	b082      	sub	sp, #8
   18524:	af00      	add	r7, sp, #0
   18526:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   18528:	4b04      	ldr	r3, [pc, #16]	; (1853c <_ZL7task_cbPK10timer_task+0x1c>)
   1852a:	681b      	ldr	r3, [r3, #0]
   1852c:	4618      	mov	r0, r3
   1852e:	4b04      	ldr	r3, [pc, #16]	; (18540 <_ZL7task_cbPK10timer_task+0x20>)
   18530:	4798      	blx	r3
}
   18532:	bf00      	nop
   18534:	3708      	adds	r7, #8
   18536:	46bd      	mov	sp, r7
   18538:	bd80      	pop	{r7, pc}
   1853a:	bf00      	nop
   1853c:	2000a1a4 	.word	0x2000a1a4
   18540:	00018621 	.word	0x00018621

00018544 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   18544:	b480      	push	{r7}
   18546:	b083      	sub	sp, #12
   18548:	af00      	add	r7, sp, #0
   1854a:	6078      	str	r0, [r7, #4]
   1854c:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   1854e:	687b      	ldr	r3, [r7, #4]
   18550:	683a      	ldr	r2, [r7, #0]
   18552:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
   18554:	4a08      	ldr	r2, [pc, #32]	; (18578 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   18556:	687b      	ldr	r3, [r7, #4]
   18558:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   1855a:	687b      	ldr	r3, [r7, #4]
   1855c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18560:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
   18562:	687b      	ldr	r3, [r7, #4]
   18564:	689b      	ldr	r3, [r3, #8]
   18566:	4a05      	ldr	r2, [pc, #20]	; (1857c <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
   18568:	60da      	str	r2, [r3, #12]
} //Timer_Class
   1856a:	687b      	ldr	r3, [r7, #4]
   1856c:	4618      	mov	r0, r3
   1856e:	370c      	adds	r7, #12
   18570:	46bd      	mov	sp, r7
   18572:	bc80      	pop	{r7}
   18574:	4770      	bx	lr
   18576:	bf00      	nop
   18578:	2000a1a4 	.word	0x2000a1a4
   1857c:	00018521 	.word	0x00018521

00018580 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   18580:	b480      	push	{r7}
   18582:	b083      	sub	sp, #12
   18584:	af00      	add	r7, sp, #0
   18586:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   18588:	687b      	ldr	r3, [r7, #4]
   1858a:	2200      	movs	r2, #0
   1858c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   1858e:	687b      	ldr	r3, [r7, #4]
   18590:	4618      	mov	r0, r3
   18592:	370c      	adds	r7, #12
   18594:	46bd      	mov	sp, r7
   18596:	bc80      	pop	{r7}
   18598:	4770      	bx	lr
	...

0001859c <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
   1859c:	b580      	push	{r7, lr}
   1859e:	b082      	sub	sp, #8
   185a0:	af00      	add	r7, sp, #0
   185a2:	6078      	str	r0, [r7, #4]
	
	ticks=0;
   185a4:	687b      	ldr	r3, [r7, #4]
   185a6:	2200      	movs	r2, #0
   185a8:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
   185aa:	6878      	ldr	r0, [r7, #4]
   185ac:	4b08      	ldr	r3, [pc, #32]	; (185d0 <_ZN17TimerSerial_Class4InitEv+0x34>)
   185ae:	4798      	blx	r3
   185b0:	4603      	mov	r3, r0
   185b2:	2b00      	cmp	r3, #0
   185b4:	bf0c      	ite	eq
   185b6:	2301      	moveq	r3, #1
   185b8:	2300      	movne	r3, #0
   185ba:	b2da      	uxtb	r2, r3
   185bc:	687b      	ldr	r3, [r7, #4]
   185be:	709a      	strb	r2, [r3, #2]
	return isOK;
   185c0:	687b      	ldr	r3, [r7, #4]
   185c2:	789b      	ldrb	r3, [r3, #2]
   185c4:	b2db      	uxtb	r3, r3
}
   185c6:	4618      	mov	r0, r3
   185c8:	3708      	adds	r7, #8
   185ca:	46bd      	mov	sp, r7
   185cc:	bd80      	pop	{r7, pc}
   185ce:	bf00      	nop
   185d0:	000185d5 	.word	0x000185d5

000185d4 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   185d4:	b580      	push	{r7, lr}
   185d6:	b084      	sub	sp, #16
   185d8:	af00      	add	r7, sp, #0
   185da:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   185dc:	687b      	ldr	r3, [r7, #4]
   185de:	691b      	ldr	r3, [r3, #16]
   185e0:	4618      	mov	r0, r3
   185e2:	4b04      	ldr	r3, [pc, #16]	; (185f4 <_ZN17TimerSerial_Class5StartEv+0x20>)
   185e4:	4798      	blx	r3
   185e6:	60f8      	str	r0, [r7, #12]
	return status;
   185e8:	68fb      	ldr	r3, [r7, #12]
	
}
   185ea:	4618      	mov	r0, r3
   185ec:	3710      	adds	r7, #16
   185ee:	46bd      	mov	sp, r7
   185f0:	bd80      	pop	{r7, pc}
   185f2:	bf00      	nop
   185f4:	00007089 	.word	0x00007089

000185f8 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   185f8:	b580      	push	{r7, lr}
   185fa:	b084      	sub	sp, #16
   185fc:	af00      	add	r7, sp, #0
   185fe:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   18600:	687b      	ldr	r3, [r7, #4]
   18602:	691b      	ldr	r3, [r3, #16]
   18604:	4618      	mov	r0, r3
   18606:	4b05      	ldr	r3, [pc, #20]	; (1861c <_ZN17TimerSerial_Class4StopEv+0x24>)
   18608:	4798      	blx	r3
   1860a:	60f8      	str	r0, [r7, #12]
	timeout=0;
   1860c:	687b      	ldr	r3, [r7, #4]
   1860e:	2200      	movs	r2, #0
   18610:	705a      	strb	r2, [r3, #1]
	return status;
   18612:	68fb      	ldr	r3, [r7, #12]
}
   18614:	4618      	mov	r0, r3
   18616:	3710      	adds	r7, #16
   18618:	46bd      	mov	sp, r7
   1861a:	bd80      	pop	{r7, pc}
   1861c:	000070f1 	.word	0x000070f1

00018620 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
   18620:	b480      	push	{r7}
   18622:	b083      	sub	sp, #12
   18624:	af00      	add	r7, sp, #0
   18626:	6078      	str	r0, [r7, #4]
	timeout=1;
   18628:	687b      	ldr	r3, [r7, #4]
   1862a:	2201      	movs	r2, #1
   1862c:	705a      	strb	r2, [r3, #1]
}
   1862e:	bf00      	nop
   18630:	370c      	adds	r7, #12
   18632:	46bd      	mov	sp, r7
   18634:	bc80      	pop	{r7}
   18636:	4770      	bx	lr

00018638 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   18638:	b580      	push	{r7, lr}
   1863a:	b086      	sub	sp, #24
   1863c:	af00      	add	r7, sp, #0
   1863e:	60f8      	str	r0, [r7, #12]
   18640:	60b9      	str	r1, [r7, #8]
   18642:	607a      	str	r2, [r7, #4]
   18644:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   18646:	68f8      	ldr	r0, [r7, #12]
   18648:	4b0d      	ldr	r3, [pc, #52]	; (18680 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   1864a:	4798      	blx	r3
	task->interval = interval;
   1864c:	68fb      	ldr	r3, [r7, #12]
   1864e:	689b      	ldr	r3, [r3, #8]
   18650:	687a      	ldr	r2, [r7, #4]
   18652:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   18654:	68fb      	ldr	r3, [r7, #12]
   18656:	689b      	ldr	r3, [r3, #8]
   18658:	68ba      	ldr	r2, [r7, #8]
   1865a:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   1865c:	68fb      	ldr	r3, [r7, #12]
   1865e:	689b      	ldr	r3, [r3, #8]
   18660:	78fa      	ldrb	r2, [r7, #3]
   18662:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   18664:	68fb      	ldr	r3, [r7, #12]
   18666:	691a      	ldr	r2, [r3, #16]
   18668:	68fb      	ldr	r3, [r7, #12]
   1866a:	689b      	ldr	r3, [r3, #8]
   1866c:	4619      	mov	r1, r3
   1866e:	4610      	mov	r0, r2
   18670:	4b04      	ldr	r3, [pc, #16]	; (18684 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   18672:	4798      	blx	r3
   18674:	6178      	str	r0, [r7, #20]
	
	return status;
   18676:	697b      	ldr	r3, [r7, #20]
}
   18678:	4618      	mov	r0, r3
   1867a:	3718      	adds	r7, #24
   1867c:	46bd      	mov	sp, r7
   1867e:	bd80      	pop	{r7, pc}
   18680:	00018795 	.word	0x00018795
   18684:	0000715d 	.word	0x0000715d

00018688 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   18688:	b590      	push	{r4, r7, lr}
   1868a:	b087      	sub	sp, #28
   1868c:	af00      	add	r7, sp, #0
   1868e:	60f8      	str	r0, [r7, #12]
   18690:	60b9      	str	r1, [r7, #8]
   18692:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   18694:	2301      	movs	r3, #1
   18696:	687a      	ldr	r2, [r7, #4]
   18698:	68b9      	ldr	r1, [r7, #8]
   1869a:	68f8      	ldr	r0, [r7, #12]
   1869c:	4c03      	ldr	r4, [pc, #12]	; (186ac <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
   1869e:	47a0      	blx	r4
   186a0:	6178      	str	r0, [r7, #20]
		return status;
   186a2:	697b      	ldr	r3, [r7, #20]
}
   186a4:	4618      	mov	r0, r3
   186a6:	371c      	adds	r7, #28
   186a8:	46bd      	mov	sp, r7
   186aa:	bd90      	pop	{r4, r7, pc}
   186ac:	00018639 	.word	0x00018639

000186b0 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   186b0:	b590      	push	{r4, r7, lr}
   186b2:	b087      	sub	sp, #28
   186b4:	af00      	add	r7, sp, #0
   186b6:	60f8      	str	r0, [r7, #12]
   186b8:	60b9      	str	r1, [r7, #8]
   186ba:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   186bc:	2300      	movs	r3, #0
   186be:	687a      	ldr	r2, [r7, #4]
   186c0:	68b9      	ldr	r1, [r7, #8]
   186c2:	68f8      	ldr	r0, [r7, #12]
   186c4:	4c03      	ldr	r4, [pc, #12]	; (186d4 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   186c6:	47a0      	blx	r4
   186c8:	6178      	str	r0, [r7, #20]
	return status;
   186ca:	697b      	ldr	r3, [r7, #20]
}
   186cc:	4618      	mov	r0, r3
   186ce:	371c      	adds	r7, #28
   186d0:	46bd      	mov	sp, r7
   186d2:	bd90      	pop	{r4, r7, pc}
   186d4:	00018639 	.word	0x00018639

000186d8 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   186d8:	b590      	push	{r4, r7, lr}
   186da:	b087      	sub	sp, #28
   186dc:	af00      	add	r7, sp, #0
   186de:	60f8      	str	r0, [r7, #12]
   186e0:	60b9      	str	r1, [r7, #8]
   186e2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   186e4:	2300      	movs	r3, #0
   186e6:	687a      	ldr	r2, [r7, #4]
   186e8:	68b9      	ldr	r1, [r7, #8]
   186ea:	68f8      	ldr	r0, [r7, #12]
   186ec:	4c06      	ldr	r4, [pc, #24]	; (18708 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
   186ee:	47a0      	blx	r4
   186f0:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   186f2:	68fb      	ldr	r3, [r7, #12]
   186f4:	691b      	ldr	r3, [r3, #16]
   186f6:	4618      	mov	r0, r3
   186f8:	4b04      	ldr	r3, [pc, #16]	; (1870c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
   186fa:	4798      	blx	r3
   186fc:	6178      	str	r0, [r7, #20]
	return status;
   186fe:	697b      	ldr	r3, [r7, #20]
}
   18700:	4618      	mov	r0, r3
   18702:	371c      	adds	r7, #28
   18704:	46bd      	mov	sp, r7
   18706:	bd90      	pop	{r4, r7, pc}
   18708:	00018639 	.word	0x00018639
   1870c:	00007089 	.word	0x00007089

00018710 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
   18710:	b580      	push	{r7, lr}
   18712:	b082      	sub	sp, #8
   18714:	af00      	add	r7, sp, #0
   18716:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   18718:	687b      	ldr	r3, [r7, #4]
   1871a:	691a      	ldr	r2, [r3, #16]
   1871c:	687b      	ldr	r3, [r7, #4]
   1871e:	689b      	ldr	r3, [r3, #8]
   18720:	4619      	mov	r1, r3
   18722:	4610      	mov	r0, r2
   18724:	4b04      	ldr	r3, [pc, #16]	; (18738 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
   18726:	4798      	blx	r3
	task->cb=NULL;
   18728:	687b      	ldr	r3, [r7, #4]
   1872a:	689b      	ldr	r3, [r3, #8]
   1872c:	2200      	movs	r2, #0
   1872e:	60da      	str	r2, [r3, #12]
}
   18730:	bf00      	nop
   18732:	3708      	adds	r7, #8
   18734:	46bd      	mov	sp, r7
   18736:	bd80      	pop	{r7, pc}
   18738:	00007261 	.word	0x00007261

0001873c <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
   1873c:	b580      	push	{r7, lr}
   1873e:	b082      	sub	sp, #8
   18740:	af00      	add	r7, sp, #0
   18742:	6078      	str	r0, [r7, #4]
   18744:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   18746:	6839      	ldr	r1, [r7, #0]
   18748:	6878      	ldr	r0, [r7, #4]
   1874a:	4b0f      	ldr	r3, [pc, #60]	; (18788 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
   1874c:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   1874e:	687b      	ldr	r3, [r7, #4]
   18750:	691b      	ldr	r3, [r3, #16]
   18752:	f103 0218 	add.w	r2, r3, #24
   18756:	687b      	ldr	r3, [r7, #4]
   18758:	689b      	ldr	r3, [r3, #8]
   1875a:	4619      	mov	r1, r3
   1875c:	4610      	mov	r0, r2
   1875e:	4b0b      	ldr	r3, [pc, #44]	; (1878c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
   18760:	4798      	blx	r3
   18762:	4603      	mov	r3, r0
   18764:	2b00      	cmp	r3, #0
   18766:	d007      	beq.n	18778 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   18768:	687b      	ldr	r3, [r7, #4]
   1876a:	691a      	ldr	r2, [r3, #16]
   1876c:	687b      	ldr	r3, [r7, #4]
   1876e:	689b      	ldr	r3, [r3, #8]
   18770:	4619      	mov	r1, r3
   18772:	4610      	mov	r0, r2
   18774:	4b06      	ldr	r3, [pc, #24]	; (18790 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
   18776:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   18778:	687b      	ldr	r3, [r7, #4]
   1877a:	689b      	ldr	r3, [r3, #8]
   1877c:	2200      	movs	r2, #0
   1877e:	60da      	str	r2, [r3, #12]
}
   18780:	bf00      	nop
   18782:	3708      	adds	r7, #8
   18784:	46bd      	mov	sp, r7
   18786:	bd80      	pop	{r7, pc}
   18788:	000187ed 	.word	0x000187ed
   1878c:	00007e49 	.word	0x00007e49
   18790:	00007261 	.word	0x00007261

00018794 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
   18794:	b480      	push	{r7}
   18796:	b085      	sub	sp, #20
   18798:	af00      	add	r7, sp, #0
   1879a:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   1879c:	2300      	movs	r3, #0
   1879e:	73fb      	strb	r3, [r7, #15]
   187a0:	7bfb      	ldrb	r3, [r7, #15]
   187a2:	2b03      	cmp	r3, #3
   187a4:	dc18      	bgt.n	187d8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
   187a6:	7bfa      	ldrb	r2, [r7, #15]
   187a8:	490f      	ldr	r1, [pc, #60]	; (187e8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   187aa:	4613      	mov	r3, r2
   187ac:	009b      	lsls	r3, r3, #2
   187ae:	4413      	add	r3, r2
   187b0:	009b      	lsls	r3, r3, #2
   187b2:	440b      	add	r3, r1
   187b4:	330c      	adds	r3, #12
   187b6:	681b      	ldr	r3, [r3, #0]
   187b8:	2b00      	cmp	r3, #0
   187ba:	d109      	bne.n	187d0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
   187bc:	7bfa      	ldrb	r2, [r7, #15]
   187be:	4613      	mov	r3, r2
   187c0:	009b      	lsls	r3, r3, #2
   187c2:	4413      	add	r3, r2
   187c4:	009b      	lsls	r3, r3, #2
   187c6:	4a08      	ldr	r2, [pc, #32]	; (187e8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   187c8:	441a      	add	r2, r3
   187ca:	687b      	ldr	r3, [r7, #4]
   187cc:	609a      	str	r2, [r3, #8]
			return;
   187ce:	e006      	b.n	187de <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   187d0:	7bfb      	ldrb	r3, [r7, #15]
   187d2:	3301      	adds	r3, #1
   187d4:	73fb      	strb	r3, [r7, #15]
   187d6:	e7e3      	b.n	187a0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
   187d8:	687b      	ldr	r3, [r7, #4]
   187da:	4a03      	ldr	r2, [pc, #12]	; (187e8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   187dc:	609a      	str	r2, [r3, #8]

}
   187de:	3714      	adds	r7, #20
   187e0:	46bd      	mov	sp, r7
   187e2:	bc80      	pop	{r7}
   187e4:	4770      	bx	lr
   187e6:	bf00      	nop
   187e8:	2000a1a8 	.word	0x2000a1a8

000187ec <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
   187ec:	b480      	push	{r7}
   187ee:	b085      	sub	sp, #20
   187f0:	af00      	add	r7, sp, #0
   187f2:	6078      	str	r0, [r7, #4]
   187f4:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   187f6:	2300      	movs	r3, #0
   187f8:	73fb      	strb	r3, [r7, #15]
   187fa:	7bfb      	ldrb	r3, [r7, #15]
   187fc:	2b03      	cmp	r3, #3
   187fe:	dc19      	bgt.n	18834 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   18800:	7bfa      	ldrb	r2, [r7, #15]
   18802:	490e      	ldr	r1, [pc, #56]	; (1883c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   18804:	4613      	mov	r3, r2
   18806:	009b      	lsls	r3, r3, #2
   18808:	4413      	add	r3, r2
   1880a:	009b      	lsls	r3, r3, #2
   1880c:	440b      	add	r3, r1
   1880e:	330c      	adds	r3, #12
   18810:	681a      	ldr	r2, [r3, #0]
   18812:	683b      	ldr	r3, [r7, #0]
   18814:	429a      	cmp	r2, r3
   18816:	d109      	bne.n	1882c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   18818:	7bfa      	ldrb	r2, [r7, #15]
   1881a:	4613      	mov	r3, r2
   1881c:	009b      	lsls	r3, r3, #2
   1881e:	4413      	add	r3, r2
   18820:	009b      	lsls	r3, r3, #2
   18822:	4a06      	ldr	r2, [pc, #24]	; (1883c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   18824:	441a      	add	r2, r3
   18826:	687b      	ldr	r3, [r7, #4]
   18828:	609a      	str	r2, [r3, #8]
			return;
   1882a:	e003      	b.n	18834 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   1882c:	7bfb      	ldrb	r3, [r7, #15]
   1882e:	3301      	adds	r3, #1
   18830:	73fb      	strb	r3, [r7, #15]
   18832:	e7e2      	b.n	187fa <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
   18834:	3714      	adds	r7, #20
   18836:	46bd      	mov	sp, r7
   18838:	bc80      	pop	{r7}
   1883a:	4770      	bx	lr
   1883c:	2000a1a8 	.word	0x2000a1a8

00018840 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   18840:	b580      	push	{r7, lr}
   18842:	b082      	sub	sp, #8
   18844:	af00      	add	r7, sp, #0
   18846:	6078      	str	r0, [r7, #4]
   18848:	6039      	str	r1, [r7, #0]
   1884a:	687b      	ldr	r3, [r7, #4]
   1884c:	2b01      	cmp	r3, #1
   1884e:	d116      	bne.n	1887e <_Z41__static_initialization_and_destruction_0ii+0x3e>
   18850:	683b      	ldr	r3, [r7, #0]
   18852:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18856:	4293      	cmp	r3, r2
   18858:	d111      	bne.n	1887e <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
   1885a:	490b      	ldr	r1, [pc, #44]	; (18888 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1885c:	480b      	ldr	r0, [pc, #44]	; (1888c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   1885e:	4b0c      	ldr	r3, [pc, #48]	; (18890 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   18860:	4798      	blx	r3
   18862:	4a0c      	ldr	r2, [pc, #48]	; (18894 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   18864:	490c      	ldr	r1, [pc, #48]	; (18898 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   18866:	4809      	ldr	r0, [pc, #36]	; (1888c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   18868:	4b0c      	ldr	r3, [pc, #48]	; (1889c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1886a:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   1886c:	490c      	ldr	r1, [pc, #48]	; (188a0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   1886e:	480d      	ldr	r0, [pc, #52]	; (188a4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   18870:	4b07      	ldr	r3, [pc, #28]	; (18890 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   18872:	4798      	blx	r3
   18874:	4a07      	ldr	r2, [pc, #28]	; (18894 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   18876:	4908      	ldr	r1, [pc, #32]	; (18898 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   18878:	480a      	ldr	r0, [pc, #40]	; (188a4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1887a:	4b08      	ldr	r3, [pc, #32]	; (1889c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1887c:	4798      	blx	r3
   1887e:	bf00      	nop
   18880:	3708      	adds	r7, #8
   18882:	46bd      	mov	sp, r7
   18884:	bd80      	pop	{r7, pc}
   18886:	bf00      	nop
   18888:	2000a694 	.word	0x2000a694
   1888c:	2000a1f8 	.word	0x2000a1f8
   18890:	00018545 	.word	0x00018545
   18894:	20000000 	.word	0x20000000
   18898:	00018581 	.word	0x00018581
   1889c:	00019ab1 	.word	0x00019ab1
   188a0:	2000a5cc 	.word	0x2000a5cc
   188a4:	2000a218 	.word	0x2000a218

000188a8 <_GLOBAL__sub_I_ptrTimerSerialClass>:
   188a8:	b580      	push	{r7, lr}
   188aa:	af00      	add	r7, sp, #0
   188ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
   188b0:	2001      	movs	r0, #1
   188b2:	4b01      	ldr	r3, [pc, #4]	; (188b8 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   188b4:	4798      	blx	r3
   188b6:	bd80      	pop	{r7, pc}
   188b8:	00018841 	.word	0x00018841

000188bc <_ZL23GetRelativeClassPointerP16i2c_m_async_desc>:

I2C_Asyn_Class	*ptrI2C_Asyn_Class;
//static list_descriptor i2cList=NULL;
//i2cList=NULL;
list_descriptor i2cList;
static void GetRelativeClassPointer(i2c_m_async_desc*  i2c){
   188bc:	b580      	push	{r7, lr}
   188be:	b084      	sub	sp, #16
   188c0:	af00      	add	r7, sp, #0
   188c2:	6078      	str	r0, [r7, #4]
	uint32_t  *ptr=(uint32_t*)ptrI2C_Asyn_Class->GetClassPointer(i2c);;
   188c4:	4b08      	ldr	r3, [pc, #32]	; (188e8 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   188c6:	681b      	ldr	r3, [r3, #0]
   188c8:	6879      	ldr	r1, [r7, #4]
   188ca:	4618      	mov	r0, r3
   188cc:	4b07      	ldr	r3, [pc, #28]	; (188ec <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x30>)
   188ce:	4798      	blx	r3
   188d0:	4603      	mov	r3, r0
   188d2:	60fb      	str	r3, [r7, #12]
	I2C_Asyn_Class	*ptrClass=(I2C_Asyn_Class*)ptr;
   188d4:	68fb      	ldr	r3, [r7, #12]
   188d6:	60bb      	str	r3, [r7, #8]
	ptrI2C_Asyn_Class=ptrClass;
   188d8:	4a03      	ldr	r2, [pc, #12]	; (188e8 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   188da:	68bb      	ldr	r3, [r7, #8]
   188dc:	6013      	str	r3, [r2, #0]
}
   188de:	bf00      	nop
   188e0:	3710      	adds	r7, #16
   188e2:	46bd      	mov	sp, r7
   188e4:	bd80      	pop	{r7, pc}
   188e6:	bf00      	nop
   188e8:	2000a338 	.word	0x2000a338
   188ec:	00018cc9 	.word	0x00018cc9

000188f0 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
   188f0:	b580      	push	{r7, lr}
   188f2:	b082      	sub	sp, #8
   188f4:	af00      	add	r7, sp, #0
   188f6:	6078      	str	r0, [r7, #4]
	
	GetRelativeClassPointer(i2c);
   188f8:	6878      	ldr	r0, [r7, #4]
   188fa:	4b05      	ldr	r3, [pc, #20]	; (18910 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x20>)
   188fc:	4798      	blx	r3
	ptrI2C_Asyn_Class->txReady=true;
   188fe:	4b05      	ldr	r3, [pc, #20]	; (18914 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x24>)
   18900:	681b      	ldr	r3, [r3, #0]
   18902:	2201      	movs	r2, #1
   18904:	751a      	strb	r2, [r3, #20]


}
   18906:	bf00      	nop
   18908:	3708      	adds	r7, #8
   1890a:	46bd      	mov	sp, r7
   1890c:	bd80      	pop	{r7, pc}
   1890e:	bf00      	nop
   18910:	000188bd 	.word	0x000188bd
   18914:	2000a338 	.word	0x2000a338

00018918 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
   18918:	b580      	push	{r7, lr}
   1891a:	b082      	sub	sp, #8
   1891c:	af00      	add	r7, sp, #0
   1891e:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   18920:	6878      	ldr	r0, [r7, #4]
   18922:	4b05      	ldr	r3, [pc, #20]	; (18938 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x20>)
   18924:	4798      	blx	r3
	ptrI2C_Asyn_Class->rxReady=true;
   18926:	4b05      	ldr	r3, [pc, #20]	; (1893c <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x24>)
   18928:	681b      	ldr	r3, [r3, #0]
   1892a:	2201      	movs	r2, #1
   1892c:	755a      	strb	r2, [r3, #21]
}
   1892e:	bf00      	nop
   18930:	3708      	adds	r7, #8
   18932:	46bd      	mov	sp, r7
   18934:	bd80      	pop	{r7, pc}
   18936:	bf00      	nop
   18938:	000188bd 	.word	0x000188bd
   1893c:	2000a338 	.word	0x2000a338

00018940 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
   18940:	b580      	push	{r7, lr}
   18942:	b082      	sub	sp, #8
   18944:	af00      	add	r7, sp, #0
   18946:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   18948:	6878      	ldr	r0, [r7, #4]
   1894a:	4b09      	ldr	r3, [pc, #36]	; (18970 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
   1894c:	4798      	blx	r3
		ptrI2C_Asyn_Class->Clear_ack();
   1894e:	4b09      	ldr	r3, [pc, #36]	; (18974 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   18950:	681b      	ldr	r3, [r3, #0]
   18952:	4618      	mov	r0, r3
   18954:	4b08      	ldr	r3, [pc, #32]	; (18978 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x38>)
   18956:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
   18958:	4b06      	ldr	r3, [pc, #24]	; (18974 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   1895a:	681b      	ldr	r3, [r3, #0]
   1895c:	2201      	movs	r2, #1
   1895e:	751a      	strb	r2, [r3, #20]
		ptrI2C_Asyn_Class->rxReady=true;
   18960:	4b04      	ldr	r3, [pc, #16]	; (18974 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   18962:	681b      	ldr	r3, [r3, #0]
   18964:	2201      	movs	r2, #1
   18966:	755a      	strb	r2, [r3, #21]
 }
   18968:	bf00      	nop
   1896a:	3708      	adds	r7, #8
   1896c:	46bd      	mov	sp, r7
   1896e:	bd80      	pop	{r7, pc}
   18970:	000188bd 	.word	0x000188bd
   18974:	2000a338 	.word	0x2000a338
   18978:	00018bad 	.word	0x00018bad

0001897c <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
   1897c:	b580      	push	{r7, lr}
   1897e:	b082      	sub	sp, #8
   18980:	af00      	add	r7, sp, #0
   18982:	6078      	str	r0, [r7, #4]
   18984:	687b      	ldr	r3, [r7, #4]
   18986:	4618      	mov	r0, r3
   18988:	4b06      	ldr	r3, [pc, #24]	; (189a4 <_ZN14I2C_Asyn_ClassC1Ev+0x28>)
   1898a:	4798      	blx	r3
{
	//ptrI2CAsynDescr=&I2C_EXPANDER;
	ptrClass=this;
   1898c:	687b      	ldr	r3, [r7, #4]
   1898e:	687a      	ldr	r2, [r7, #4]
   18990:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   18992:	4a05      	ldr	r2, [pc, #20]	; (189a8 <_ZN14I2C_Asyn_ClassC1Ev+0x2c>)
   18994:	687b      	ldr	r3, [r7, #4]
   18996:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
   18998:	687b      	ldr	r3, [r7, #4]
   1899a:	4618      	mov	r0, r3
   1899c:	3708      	adds	r7, #8
   1899e:	46bd      	mov	sp, r7
   189a0:	bd80      	pop	{r7, pc}
   189a2:	bf00      	nop
   189a4:	00018be1 	.word	0x00018be1
   189a8:	2000a338 	.word	0x2000a338

000189ac <_ZN14I2C_Asyn_ClassD1Ev>:
	isOK=false;
	initiated=false;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
   189ac:	b580      	push	{r7, lr}
   189ae:	b082      	sub	sp, #8
   189b0:	af00      	add	r7, sp, #0
   189b2:	6078      	str	r0, [r7, #4]
   189b4:	687b      	ldr	r3, [r7, #4]
   189b6:	4618      	mov	r0, r3
   189b8:	4b03      	ldr	r3, [pc, #12]	; (189c8 <_ZN14I2C_Asyn_ClassD1Ev+0x1c>)
   189ba:	4798      	blx	r3
{

} //~I2C_Asyn_Class
   189bc:	687b      	ldr	r3, [r7, #4]
   189be:	4618      	mov	r0, r3
   189c0:	3708      	adds	r7, #8
   189c2:	46bd      	mov	sp, r7
   189c4:	bd80      	pop	{r7, pc}
   189c6:	bf00      	nop
   189c8:	00018c01 	.word	0x00018c01

000189cc <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
   189cc:	b480      	push	{r7}
   189ce:	b083      	sub	sp, #12
   189d0:	af00      	add	r7, sp, #0
   189d2:	6078      	str	r0, [r7, #4]
   189d4:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
   189d6:	687b      	ldr	r3, [r7, #4]
   189d8:	683a      	ldr	r2, [r7, #0]
   189da:	62da      	str	r2, [r3, #44]	; 0x2c
	ptrClass=this;
   189dc:	687b      	ldr	r3, [r7, #4]
   189de:	687a      	ldr	r2, [r7, #4]
   189e0:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   189e2:	4a04      	ldr	r2, [pc, #16]	; (189f4 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x28>)
   189e4:	687b      	ldr	r3, [r7, #4]
   189e6:	6013      	str	r3, [r2, #0]
}
   189e8:	bf00      	nop
   189ea:	370c      	adds	r7, #12
   189ec:	46bd      	mov	sp, r7
   189ee:	bc80      	pop	{r7}
   189f0:	4770      	bx	lr
   189f2:	bf00      	nop
   189f4:	2000a338 	.word	0x2000a338

000189f8 <_ZN14I2C_Asyn_Class4InitEv>:

bool	I2C_Asyn_Class::Init(void){
   189f8:	b580      	push	{r7, lr}
   189fa:	b084      	sub	sp, #16
   189fc:	af00      	add	r7, sp, #0
   189fe:	6078      	str	r0, [r7, #4]
	txBuffer=txStaticBuffer;
   18a00:	687b      	ldr	r3, [r7, #4]
   18a02:	4a2c      	ldr	r2, [pc, #176]	; (18ab4 <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   18a04:	621a      	str	r2, [r3, #32]
	rxBuffer=txStaticBuffer;
   18a06:	687b      	ldr	r3, [r7, #4]
   18a08:	4a2a      	ldr	r2, [pc, #168]	; (18ab4 <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   18a0a:	625a      	str	r2, [r3, #36]	; 0x24

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
   18a0c:	687b      	ldr	r3, [r7, #4]
   18a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18a10:	687b      	ldr	r3, [r7, #4]
   18a12:	3328      	adds	r3, #40	; 0x28
   18a14:	4619      	mov	r1, r3
   18a16:	4610      	mov	r0, r2
   18a18:	4b27      	ldr	r3, [pc, #156]	; (18ab8 <_ZN14I2C_Asyn_Class4InitEv+0xc0>)
   18a1a:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
   18a1c:	687b      	ldr	r3, [r7, #4]
   18a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18a20:	4618      	mov	r0, r3
   18a22:	4b26      	ldr	r3, [pc, #152]	; (18abc <_ZN14I2C_Asyn_Class4InitEv+0xc4>)
   18a24:	4798      	blx	r3
   18a26:	4603      	mov	r3, r0
   18a28:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
   18a2a:	687b      	ldr	r3, [r7, #4]
   18a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18a2e:	4a24      	ldr	r2, [pc, #144]	; (18ac0 <_ZN14I2C_Asyn_Class4InitEv+0xc8>)
   18a30:	2101      	movs	r1, #1
   18a32:	4618      	mov	r0, r3
   18a34:	4b23      	ldr	r3, [pc, #140]	; (18ac4 <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   18a36:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
   18a38:	687b      	ldr	r3, [r7, #4]
   18a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18a3c:	4a22      	ldr	r2, [pc, #136]	; (18ac8 <_ZN14I2C_Asyn_Class4InitEv+0xd0>)
   18a3e:	2102      	movs	r1, #2
   18a40:	4618      	mov	r0, r3
   18a42:	4b20      	ldr	r3, [pc, #128]	; (18ac4 <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   18a44:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
   18a46:	687b      	ldr	r3, [r7, #4]
   18a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18a4a:	4a20      	ldr	r2, [pc, #128]	; (18acc <_ZN14I2C_Asyn_Class4InitEv+0xd4>)
   18a4c:	2100      	movs	r1, #0
   18a4e:	4618      	mov	r0, r3
   18a50:	4b1c      	ldr	r3, [pc, #112]	; (18ac4 <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   18a52:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	coupleKey.ptrI2CAsynClass=(uint32_t)ptrClass;
   18a54:	687b      	ldr	r3, [r7, #4]
   18a56:	69db      	ldr	r3, [r3, #28]
   18a58:	461a      	mov	r2, r3
   18a5a:	687b      	ldr	r3, [r7, #4]
   18a5c:	641a      	str	r2, [r3, #64]	; 0x40
	coupleKey.i2cDescr=ptrI2CAsynDescr;
   18a5e:	687b      	ldr	r3, [r7, #4]
   18a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18a62:	687b      	ldr	r3, [r7, #4]
   18a64:	63da      	str	r2, [r3, #60]	; 0x3c
	coupleKey.dummy=(uint32_t)ptrClass;
   18a66:	687b      	ldr	r3, [r7, #4]
   18a68:	69db      	ldr	r3, [r3, #28]
   18a6a:	461a      	mov	r2, r3
   18a6c:	687b      	ldr	r3, [r7, #4]
   18a6e:	639a      	str	r2, [r3, #56]	; 0x38
	AddI2CObject(coupleKey);
   18a70:	687a      	ldr	r2, [r7, #4]
   18a72:	687b      	ldr	r3, [r7, #4]
   18a74:	3334      	adds	r3, #52	; 0x34
   18a76:	4619      	mov	r1, r3
   18a78:	4610      	mov	r0, r2
   18a7a:	4b15      	ldr	r3, [pc, #84]	; (18ad0 <_ZN14I2C_Asyn_Class4InitEv+0xd8>)
   18a7c:	4798      	blx	r3
	txReady=true;
   18a7e:	687b      	ldr	r3, [r7, #4]
   18a80:	2201      	movs	r2, #1
   18a82:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   18a84:	687b      	ldr	r3, [r7, #4]
   18a86:	2201      	movs	r2, #1
   18a88:	755a      	strb	r2, [r3, #21]
	isOK=ena==0;
   18a8a:	7bfb      	ldrb	r3, [r7, #15]
   18a8c:	2b00      	cmp	r3, #0
   18a8e:	bf0c      	ite	eq
   18a90:	2301      	moveq	r3, #1
   18a92:	2300      	movne	r3, #0
   18a94:	b2da      	uxtb	r2, r3
   18a96:	687b      	ldr	r3, [r7, #4]
   18a98:	761a      	strb	r2, [r3, #24]
	initiated=isOK;
   18a9a:	687b      	ldr	r3, [r7, #4]
   18a9c:	7e1b      	ldrb	r3, [r3, #24]
   18a9e:	b2da      	uxtb	r2, r3
   18aa0:	687b      	ldr	r3, [r7, #4]
   18aa2:	759a      	strb	r2, [r3, #22]
	return isOK;
   18aa4:	687b      	ldr	r3, [r7, #4]
   18aa6:	7e1b      	ldrb	r3, [r3, #24]
   18aa8:	b2db      	uxtb	r3, r3
	
}
   18aaa:	4618      	mov	r0, r3
   18aac:	3710      	adds	r7, #16
   18aae:	46bd      	mov	sp, r7
   18ab0:	bd80      	pop	{r7, pc}
   18ab2:	bf00      	nop
   18ab4:	2000a238 	.word	0x2000a238
   18ab8:	000069df 	.word	0x000069df
   18abc:	000068f1 	.word	0x000068f1
   18ac0:	000188f1 	.word	0x000188f1
   18ac4:	00006997 	.word	0x00006997
   18ac8:	00018919 	.word	0x00018919
   18acc:	00018941 	.word	0x00018941
   18ad0:	00018c15 	.word	0x00018c15

00018ad4 <_ZN14I2C_Asyn_Class4InitEh>:
bool	I2C_Asyn_Class::Init(uint8_t add){
   18ad4:	b580      	push	{r7, lr}
   18ad6:	b082      	sub	sp, #8
   18ad8:	af00      	add	r7, sp, #0
   18ada:	6078      	str	r0, [r7, #4]
   18adc:	460b      	mov	r3, r1
   18ade:	70fb      	strb	r3, [r7, #3]
	isOK=Init();
   18ae0:	6878      	ldr	r0, [r7, #4]
   18ae2:	4b0e      	ldr	r3, [pc, #56]	; (18b1c <_ZN14I2C_Asyn_Class4InitEh+0x48>)
   18ae4:	4798      	blx	r3
   18ae6:	4603      	mov	r3, r0
   18ae8:	461a      	mov	r2, r3
   18aea:	687b      	ldr	r3, [r7, #4]
   18aec:	761a      	strb	r2, [r3, #24]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   18aee:	687b      	ldr	r3, [r7, #4]
   18af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18af2:	78fa      	ldrb	r2, [r7, #3]
   18af4:	b211      	sxth	r1, r2
   18af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18afa:	4618      	mov	r0, r3
   18afc:	4b08      	ldr	r3, [pc, #32]	; (18b20 <_ZN14I2C_Asyn_Class4InitEh+0x4c>)
   18afe:	4798      	blx	r3
	txReady=true;
   18b00:	687b      	ldr	r3, [r7, #4]
   18b02:	2201      	movs	r2, #1
   18b04:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   18b06:	687b      	ldr	r3, [r7, #4]
   18b08:	2201      	movs	r2, #1
   18b0a:	755a      	strb	r2, [r3, #21]
	return isOK;
   18b0c:	687b      	ldr	r3, [r7, #4]
   18b0e:	7e1b      	ldrb	r3, [r3, #24]
   18b10:	b2db      	uxtb	r3, r3
}
   18b12:	4618      	mov	r0, r3
   18b14:	3708      	adds	r7, #8
   18b16:	46bd      	mov	sp, r7
   18b18:	bd80      	pop	{r7, pc}
   18b1a:	bf00      	nop
   18b1c:	000189f9 	.word	0x000189f9
   18b20:	0000695d 	.word	0x0000695d

00018b24 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
   18b24:	b580      	push	{r7, lr}
   18b26:	b084      	sub	sp, #16
   18b28:	af00      	add	r7, sp, #0
   18b2a:	60f8      	str	r0, [r7, #12]
   18b2c:	60b9      	str	r1, [r7, #8]
   18b2e:	4613      	mov	r3, r2
   18b30:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
   18b32:	68fb      	ldr	r3, [r7, #12]
   18b34:	7d1b      	ldrb	r3, [r3, #20]
   18b36:	b2db      	uxtb	r3, r3
   18b38:	f083 0301 	eor.w	r3, r3, #1
   18b3c:	b2db      	uxtb	r3, r3
   18b3e:	2b00      	cmp	r3, #0
   18b40:	d000      	beq.n	18b44 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
   18b42:	e7f6      	b.n	18b32 <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
   18b44:	68fb      	ldr	r3, [r7, #12]
   18b46:	2200      	movs	r2, #0
   18b48:	751a      	strb	r2, [r3, #20]
	return io_write(I2C_io, buffer, lenght);
   18b4a:	68fb      	ldr	r3, [r7, #12]
   18b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18b4e:	88fa      	ldrh	r2, [r7, #6]
   18b50:	68b9      	ldr	r1, [r7, #8]
   18b52:	4618      	mov	r0, r3
   18b54:	4b03      	ldr	r3, [pc, #12]	; (18b64 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
   18b56:	4798      	blx	r3
   18b58:	4603      	mov	r3, r0
}
   18b5a:	4618      	mov	r0, r3
   18b5c:	3710      	adds	r7, #16
   18b5e:	46bd      	mov	sp, r7
   18b60:	bd80      	pop	{r7, pc}
   18b62:	bf00      	nop
   18b64:	00019a11 	.word	0x00019a11

00018b68 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
   18b68:	b580      	push	{r7, lr}
   18b6a:	b084      	sub	sp, #16
   18b6c:	af00      	add	r7, sp, #0
   18b6e:	60f8      	str	r0, [r7, #12]
   18b70:	60b9      	str	r1, [r7, #8]
   18b72:	4613      	mov	r3, r2
   18b74:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
   18b76:	68fb      	ldr	r3, [r7, #12]
   18b78:	7d5b      	ldrb	r3, [r3, #21]
   18b7a:	b2db      	uxtb	r3, r3
   18b7c:	f083 0301 	eor.w	r3, r3, #1
   18b80:	b2db      	uxtb	r3, r3
   18b82:	2b00      	cmp	r3, #0
   18b84:	d000      	beq.n	18b88 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
   18b86:	e7f6      	b.n	18b76 <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
   18b88:	68fb      	ldr	r3, [r7, #12]
   18b8a:	2200      	movs	r2, #0
   18b8c:	755a      	strb	r2, [r3, #21]
		return io_read(I2C_io, buffer, lenght);
   18b8e:	68fb      	ldr	r3, [r7, #12]
   18b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18b92:	88fa      	ldrh	r2, [r7, #6]
   18b94:	68b9      	ldr	r1, [r7, #8]
   18b96:	4618      	mov	r0, r3
   18b98:	4b03      	ldr	r3, [pc, #12]	; (18ba8 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
   18b9a:	4798      	blx	r3
   18b9c:	4603      	mov	r3, r0
}
   18b9e:	4618      	mov	r0, r3
   18ba0:	3710      	adds	r7, #16
   18ba2:	46bd      	mov	sp, r7
   18ba4:	bd80      	pop	{r7, pc}
   18ba6:	bf00      	nop
   18ba8:	00019a61 	.word	0x00019a61

00018bac <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
   18bac:	b480      	push	{r7}
   18bae:	b083      	sub	sp, #12
   18bb0:	af00      	add	r7, sp, #0
   18bb2:	6078      	str	r0, [r7, #4]
	 ack=false;
   18bb4:	687b      	ldr	r3, [r7, #4]
   18bb6:	2200      	movs	r2, #0
   18bb8:	75da      	strb	r2, [r3, #23]
	 return ack;
   18bba:	687b      	ldr	r3, [r7, #4]
   18bbc:	7ddb      	ldrb	r3, [r3, #23]
   18bbe:	b2db      	uxtb	r3, r3
 }
   18bc0:	4618      	mov	r0, r3
   18bc2:	370c      	adds	r7, #12
   18bc4:	46bd      	mov	sp, r7
   18bc6:	bc80      	pop	{r7}
   18bc8:	4770      	bx	lr

00018bca <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
   18bca:	b480      	push	{r7}
   18bcc:	b083      	sub	sp, #12
   18bce:	af00      	add	r7, sp, #0
   18bd0:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
   18bd2:	687b      	ldr	r3, [r7, #4]
   18bd4:	681b      	ldr	r3, [r3, #0]
}
   18bd6:	4618      	mov	r0, r3
   18bd8:	370c      	adds	r7, #12
   18bda:	46bd      	mov	sp, r7
   18bdc:	bc80      	pop	{r7}
   18bde:	4770      	bx	lr

00018be0 <_ZN14I2C_ObjectListC1Ev>:

#include "I2C_ObjectList.h"
#include "I2C_Asyn_Class.h"

// default constructor
I2C_ObjectList::I2C_ObjectList()
   18be0:	b480      	push	{r7}
   18be2:	b083      	sub	sp, #12
   18be4:	af00      	add	r7, sp, #0
   18be6:	6078      	str	r0, [r7, #4]
{
	objList=&i2cList;
   18be8:	687b      	ldr	r3, [r7, #4]
   18bea:	4a04      	ldr	r2, [pc, #16]	; (18bfc <_ZN14I2C_ObjectListC1Ev+0x1c>)
   18bec:	611a      	str	r2, [r3, #16]
} //I2C_ObjectList
   18bee:	687b      	ldr	r3, [r7, #4]
   18bf0:	4618      	mov	r0, r3
   18bf2:	370c      	adds	r7, #12
   18bf4:	46bd      	mov	sp, r7
   18bf6:	bc80      	pop	{r7}
   18bf8:	4770      	bx	lr
   18bfa:	bf00      	nop
   18bfc:	2000a33c 	.word	0x2000a33c

00018c00 <_ZN14I2C_ObjectListD1Ev>:

// default destructor
I2C_ObjectList::~I2C_ObjectList()
   18c00:	b480      	push	{r7}
   18c02:	b083      	sub	sp, #12
   18c04:	af00      	add	r7, sp, #0
   18c06:	6078      	str	r0, [r7, #4]
{
} //~I2C_ObjectList
   18c08:	687b      	ldr	r3, [r7, #4]
   18c0a:	4618      	mov	r0, r3
   18c0c:	370c      	adds	r7, #12
   18c0e:	46bd      	mov	sp, r7
   18c10:	bc80      	pop	{r7}
   18c12:	4770      	bx	lr

00018c14 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor>:

int I2C_ObjectList::AddI2CObject(I2CPointerAndDescriptor& ck ){
   18c14:	b580      	push	{r7, lr}
   18c16:	b082      	sub	sp, #8
   18c18:	af00      	add	r7, sp, #0
   18c1a:	6078      	str	r0, [r7, #4]
   18c1c:	6039      	str	r1, [r7, #0]
	
		ASSERT((objList)&&(&ck));
   18c1e:	687b      	ldr	r3, [r7, #4]
   18c20:	691b      	ldr	r3, [r3, #16]
   18c22:	2b00      	cmp	r3, #0
   18c24:	d004      	beq.n	18c30 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   18c26:	683b      	ldr	r3, [r7, #0]
   18c28:	2b00      	cmp	r3, #0
   18c2a:	d001      	beq.n	18c30 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   18c2c:	2301      	movs	r3, #1
   18c2e:	e000      	b.n	18c32 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1e>
   18c30:	2300      	movs	r3, #0
   18c32:	2219      	movs	r2, #25
   18c34:	4910      	ldr	r1, [pc, #64]	; (18c78 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   18c36:	4618      	mov	r0, r3
   18c38:	4b10      	ldr	r3, [pc, #64]	; (18c7c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   18c3a:	4798      	blx	r3
		if (is_list_element(objList,&ck)) {
   18c3c:	687b      	ldr	r3, [r7, #4]
   18c3e:	691b      	ldr	r3, [r3, #16]
   18c40:	6839      	ldr	r1, [r7, #0]
   18c42:	4618      	mov	r0, r3
   18c44:	4b0e      	ldr	r3, [pc, #56]	; (18c80 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x6c>)
   18c46:	4798      	blx	r3
   18c48:	4603      	mov	r3, r0
   18c4a:	2b00      	cmp	r3, #0
   18c4c:	d007      	beq.n	18c5e <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x4a>

			ASSERT(false);
   18c4e:	221c      	movs	r2, #28
   18c50:	4909      	ldr	r1, [pc, #36]	; (18c78 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   18c52:	2000      	movs	r0, #0
   18c54:	4b09      	ldr	r3, [pc, #36]	; (18c7c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   18c56:	4798      	blx	r3
			return ERR_ALREADY_INITIALIZED;
   18c58:	f06f 0311 	mvn.w	r3, #17
   18c5c:	e007      	b.n	18c6e <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x5a>
		}
		AddObject(objList,&ck);
   18c5e:	687b      	ldr	r3, [r7, #4]
   18c60:	691b      	ldr	r3, [r3, #16]
   18c62:	683a      	ldr	r2, [r7, #0]
   18c64:	4619      	mov	r1, r3
   18c66:	6878      	ldr	r0, [r7, #4]
   18c68:	4b06      	ldr	r3, [pc, #24]	; (18c84 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x70>)
   18c6a:	4798      	blx	r3
		return ERR_NONE;
   18c6c:	2300      	movs	r3, #0
}
   18c6e:	4618      	mov	r0, r3
   18c70:	3708      	adds	r7, #8
   18c72:	46bd      	mov	sp, r7
   18c74:	bd80      	pop	{r7, pc}
   18c76:	bf00      	nop
   18c78:	00022fa0 	.word	0x00022fa0
   18c7c:	00007e21 	.word	0x00007e21
   18c80:	00007e49 	.word	0x00007e49
   18c84:	00018c89 	.word	0x00018c89

00018c88 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor>:
		coupleKey.i2cDescr=ptrI2C;
		ck=coupleKey;
			
}

void I2C_ObjectList::AddObject(list_descriptor *list,I2CPointerAndDescriptor* nck){
   18c88:	b580      	push	{r7, lr}
   18c8a:	b086      	sub	sp, #24
   18c8c:	af00      	add	r7, sp, #0
   18c8e:	60f8      	str	r0, [r7, #12]
   18c90:	60b9      	str	r1, [r7, #8]
   18c92:	607a      	str	r2, [r7, #4]
		I2CPointerAndDescriptor *it, *head = (I2CPointerAndDescriptor *)list_get_head(list);
   18c94:	68b8      	ldr	r0, [r7, #8]
   18c96:	4b09      	ldr	r3, [pc, #36]	; (18cbc <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x34>)
   18c98:	4798      	blx	r3
   18c9a:	6178      	str	r0, [r7, #20]

		if (!head) {
   18c9c:	697b      	ldr	r3, [r7, #20]
   18c9e:	2b00      	cmp	r3, #0
   18ca0:	d104      	bne.n	18cac <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x24>
			list_insert_as_head(list, nck);
   18ca2:	6879      	ldr	r1, [r7, #4]
   18ca4:	68b8      	ldr	r0, [r7, #8]
   18ca6:	4b06      	ldr	r3, [pc, #24]	; (18cc0 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x38>)
   18ca8:	4798      	blx	r3
			return;
   18caa:	e003      	b.n	18cb4 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x2c>
		}else{
			list_insert_at_end(list,nck);
   18cac:	6879      	ldr	r1, [r7, #4]
   18cae:	68b8      	ldr	r0, [r7, #8]
   18cb0:	4b04      	ldr	r3, [pc, #16]	; (18cc4 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x3c>)
   18cb2:	4798      	blx	r3
		}
}
   18cb4:	3718      	adds	r7, #24
   18cb6:	46bd      	mov	sp, r7
   18cb8:	bd80      	pop	{r7, pc}
   18cba:	bf00      	nop
   18cbc:	00018bcb 	.word	0x00018bcb
   18cc0:	00007e81 	.word	0x00007e81
   18cc4:	00007efd 	.word	0x00007efd

00018cc8 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc>:

uint32_t I2C_ObjectList::GetClassPointer(i2c_m_async_desc*	i2cDescr){
   18cc8:	b480      	push	{r7}
   18cca:	b087      	sub	sp, #28
   18ccc:	af00      	add	r7, sp, #0
   18cce:	6078      	str	r0, [r7, #4]
   18cd0:	6039      	str	r1, [r7, #0]
		struct list_element *it;
		//I2CPointerAndDescriptor *it;
		I2CPointerAndDescriptor *k;
		uint32_t ptr;
		for (it = objList->head; it; it = it->next) {
   18cd2:	687b      	ldr	r3, [r7, #4]
   18cd4:	691b      	ldr	r3, [r3, #16]
   18cd6:	681b      	ldr	r3, [r3, #0]
   18cd8:	617b      	str	r3, [r7, #20]
   18cda:	697b      	ldr	r3, [r7, #20]
   18cdc:	2b00      	cmp	r3, #0
   18cde:	d00f      	beq.n	18d00 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x38>
			k=(I2CPointerAndDescriptor*)it;
   18ce0:	697b      	ldr	r3, [r7, #20]
   18ce2:	613b      	str	r3, [r7, #16]
			
			if (k->i2cDescr== i2cDescr){
   18ce4:	693b      	ldr	r3, [r7, #16]
   18ce6:	689a      	ldr	r2, [r3, #8]
   18ce8:	683b      	ldr	r3, [r7, #0]
   18cea:	429a      	cmp	r2, r3
   18cec:	d104      	bne.n	18cf8 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x30>
				ptr=k->ptrI2CAsynClass;
   18cee:	693b      	ldr	r3, [r7, #16]
   18cf0:	68db      	ldr	r3, [r3, #12]
   18cf2:	60fb      	str	r3, [r7, #12]
				return ptr;
   18cf4:	68fb      	ldr	r3, [r7, #12]
   18cf6:	e004      	b.n	18d02 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x3a>
		for (it = objList->head; it; it = it->next) {
   18cf8:	697b      	ldr	r3, [r7, #20]
   18cfa:	681b      	ldr	r3, [r3, #0]
   18cfc:	617b      	str	r3, [r7, #20]
   18cfe:	e7ec      	b.n	18cda <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x12>
			}
		}

		return 0;
   18d00:	2300      	movs	r3, #0
   18d02:	4618      	mov	r0, r3
   18d04:	371c      	adds	r7, #28
   18d06:	46bd      	mov	sp, r7
   18d08:	bc80      	pop	{r7}
   18d0a:	4770      	bx	lr

00018d0c <_ZN14I2C_Sync_ClassC1Ev>:
#include "I2C_Sync_Class.h"
static	uint8_t	txI2CStaticBuffer[I2C_SYN_BUFFER_SIZE];
static	uint8_t	rxI2CStaticBuffer[I2C_SYN_BUFFER_SIZE];

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
   18d0c:	b480      	push	{r7}
   18d0e:	b083      	sub	sp, #12
   18d10:	af00      	add	r7, sp, #0
   18d12:	6078      	str	r0, [r7, #4]
{
} //I2C_Sync_Class
   18d14:	687b      	ldr	r3, [r7, #4]
   18d16:	4618      	mov	r0, r3
   18d18:	370c      	adds	r7, #12
   18d1a:	46bd      	mov	sp, r7
   18d1c:	bc80      	pop	{r7}
   18d1e:	4770      	bx	lr

00018d20 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   18d20:	b480      	push	{r7}
   18d22:	b083      	sub	sp, #12
   18d24:	af00      	add	r7, sp, #0
   18d26:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   18d28:	687b      	ldr	r3, [r7, #4]
   18d2a:	4618      	mov	r0, r3
   18d2c:	370c      	adds	r7, #12
   18d2e:	46bd      	mov	sp, r7
   18d30:	bc80      	pop	{r7}
   18d32:	4770      	bx	lr

00018d34 <_ZN14I2C_Sync_Class13SetDescriptorEP15i2c_m_sync_desc>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
   18d34:	b480      	push	{r7}
   18d36:	b083      	sub	sp, #12
   18d38:	af00      	add	r7, sp, #0
   18d3a:	6078      	str	r0, [r7, #4]
   18d3c:	6039      	str	r1, [r7, #0]
	ptrI2CDescr=i2c_a;
   18d3e:	687b      	ldr	r3, [r7, #4]
   18d40:	683a      	ldr	r2, [r7, #0]
   18d42:	611a      	str	r2, [r3, #16]
	asm("nop");
   18d44:	bf00      	nop

}
   18d46:	bf00      	nop
   18d48:	370c      	adds	r7, #12
   18d4a:	46bd      	mov	sp, r7
   18d4c:	bc80      	pop	{r7}
   18d4e:	4770      	bx	lr

00018d50 <_ZN14I2C_Sync_Class4InitEv>:
bool	I2C_Sync_Class::Init(void){
   18d50:	b580      	push	{r7, lr}
   18d52:	b084      	sub	sp, #16
   18d54:	af00      	add	r7, sp, #0
   18d56:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
   18d58:	687b      	ldr	r3, [r7, #4]
   18d5a:	4a14      	ldr	r2, [pc, #80]	; (18dac <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   18d5c:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
   18d5e:	687b      	ldr	r3, [r7, #4]
   18d60:	4a12      	ldr	r2, [pc, #72]	; (18dac <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   18d62:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
   18d64:	687b      	ldr	r3, [r7, #4]
   18d66:	691a      	ldr	r2, [r3, #16]
   18d68:	687b      	ldr	r3, [r7, #4]
   18d6a:	330c      	adds	r3, #12
   18d6c:	4619      	mov	r1, r3
   18d6e:	4610      	mov	r0, r2
   18d70:	4b0f      	ldr	r3, [pc, #60]	; (18db0 <_ZN14I2C_Sync_Class4InitEv+0x60>)
   18d72:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   18d74:	687b      	ldr	r3, [r7, #4]
   18d76:	691b      	ldr	r3, [r3, #16]
   18d78:	4618      	mov	r0, r3
   18d7a:	4b0e      	ldr	r3, [pc, #56]	; (18db4 <_ZN14I2C_Sync_Class4InitEv+0x64>)
   18d7c:	4798      	blx	r3
   18d7e:	4603      	mov	r3, r0
   18d80:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
   18d82:	7bfb      	ldrb	r3, [r7, #15]
   18d84:	2b00      	cmp	r3, #0
   18d86:	bf0c      	ite	eq
   18d88:	2301      	moveq	r3, #1
   18d8a:	2300      	movne	r3, #0
   18d8c:	b2da      	uxtb	r2, r3
   18d8e:	687b      	ldr	r3, [r7, #4]
   18d90:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
   18d92:	687b      	ldr	r3, [r7, #4]
   18d94:	7a5b      	ldrb	r3, [r3, #9]
   18d96:	b2da      	uxtb	r2, r3
   18d98:	687b      	ldr	r3, [r7, #4]
   18d9a:	721a      	strb	r2, [r3, #8]
	return isOK;
   18d9c:	687b      	ldr	r3, [r7, #4]
   18d9e:	7a5b      	ldrb	r3, [r3, #9]
   18da0:	b2db      	uxtb	r3, r3
	
}
   18da2:	4618      	mov	r0, r3
   18da4:	3710      	adds	r7, #16
   18da6:	46bd      	mov	sp, r7
   18da8:	bd80      	pop	{r7, pc}
   18daa:	bf00      	nop
   18dac:	2000a340 	.word	0x2000a340
   18db0:	00006b5b 	.word	0x00006b5b
   18db4:	00006b01 	.word	0x00006b01

00018db8 <_ZN14I2C_Sync_Class4InitEh>:

bool	I2C_Sync_Class::Init(uint8_t add){
   18db8:	b580      	push	{r7, lr}
   18dba:	b082      	sub	sp, #8
   18dbc:	af00      	add	r7, sp, #0
   18dbe:	6078      	str	r0, [r7, #4]
   18dc0:	460b      	mov	r3, r1
   18dc2:	70fb      	strb	r3, [r7, #3]
	isOK=Init();
   18dc4:	6878      	ldr	r0, [r7, #4]
   18dc6:	4b0b      	ldr	r3, [pc, #44]	; (18df4 <_ZN14I2C_Sync_Class4InitEh+0x3c>)
   18dc8:	4798      	blx	r3
   18dca:	4603      	mov	r3, r0
   18dcc:	461a      	mov	r2, r3
   18dce:	687b      	ldr	r3, [r7, #4]
   18dd0:	725a      	strb	r2, [r3, #9]
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   18dd2:	687b      	ldr	r3, [r7, #4]
   18dd4:	691b      	ldr	r3, [r3, #16]
   18dd6:	78fa      	ldrb	r2, [r7, #3]
   18dd8:	b211      	sxth	r1, r2
   18dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18dde:	4618      	mov	r0, r3
   18de0:	4b05      	ldr	r3, [pc, #20]	; (18df8 <_ZN14I2C_Sync_Class4InitEh+0x40>)
   18de2:	4798      	blx	r3

	return isOK;
   18de4:	687b      	ldr	r3, [r7, #4]
   18de6:	7a5b      	ldrb	r3, [r3, #9]
   18de8:	b2db      	uxtb	r3, r3
}
   18dea:	4618      	mov	r0, r3
   18dec:	3708      	adds	r7, #8
   18dee:	46bd      	mov	sp, r7
   18df0:	bd80      	pop	{r7, pc}
   18df2:	bf00      	nop
   18df4:	00018d51 	.word	0x00018d51
   18df8:	00006b21 	.word	0x00006b21

00018dfc <_ZN14I2C_Sync_Class5WriteEPht>:
int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   18dfc:	b580      	push	{r7, lr}
   18dfe:	b086      	sub	sp, #24
   18e00:	af00      	add	r7, sp, #0
   18e02:	60f8      	str	r0, [r7, #12]
   18e04:	60b9      	str	r1, [r7, #8]
   18e06:	4613      	mov	r3, r2
   18e08:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
   18e0a:	68fb      	ldr	r3, [r7, #12]
   18e0c:	68db      	ldr	r3, [r3, #12]
   18e0e:	88fa      	ldrh	r2, [r7, #6]
   18e10:	68b9      	ldr	r1, [r7, #8]
   18e12:	4618      	mov	r0, r3
   18e14:	4b03      	ldr	r3, [pc, #12]	; (18e24 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
   18e16:	4798      	blx	r3
   18e18:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
   18e1a:	697b      	ldr	r3, [r7, #20]
}
   18e1c:	4618      	mov	r0, r3
   18e1e:	3718      	adds	r7, #24
   18e20:	46bd      	mov	sp, r7
   18e22:	bd80      	pop	{r7, pc}
   18e24:	00019a11 	.word	0x00019a11

00018e28 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   18e28:	b580      	push	{r7, lr}
   18e2a:	b086      	sub	sp, #24
   18e2c:	af00      	add	r7, sp, #0
   18e2e:	60f8      	str	r0, [r7, #12]
   18e30:	60b9      	str	r1, [r7, #8]
   18e32:	4613      	mov	r3, r2
   18e34:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
   18e36:	68fb      	ldr	r3, [r7, #12]
   18e38:	68db      	ldr	r3, [r3, #12]
   18e3a:	88fa      	ldrh	r2, [r7, #6]
   18e3c:	68b9      	ldr	r1, [r7, #8]
   18e3e:	4618      	mov	r0, r3
   18e40:	4b03      	ldr	r3, [pc, #12]	; (18e50 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
   18e42:	4798      	blx	r3
   18e44:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
   18e46:	697b      	ldr	r3, [r7, #20]
}
   18e48:	4618      	mov	r0, r3
   18e4a:	3718      	adds	r7, #24
   18e4c:	46bd      	mov	sp, r7
   18e4e:	bd80      	pop	{r7, pc}
   18e50:	00019a61 	.word	0x00019a61

00018e54 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   18e54:	b480      	push	{r7}
   18e56:	b083      	sub	sp, #12
   18e58:	af00      	add	r7, sp, #0
   18e5a:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   18e5c:	687b      	ldr	r3, [r7, #4]
   18e5e:	4618      	mov	r0, r3
   18e60:	370c      	adds	r7, #12
   18e62:	46bd      	mov	sp, r7
   18e64:	bc80      	pop	{r7}
   18e66:	4770      	bx	lr

00018e68 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   18e68:	b480      	push	{r7}
   18e6a:	b083      	sub	sp, #12
   18e6c:	af00      	add	r7, sp, #0
   18e6e:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   18e70:	687b      	ldr	r3, [r7, #4]
   18e72:	4618      	mov	r0, r3
   18e74:	370c      	adds	r7, #12
   18e76:	46bd      	mov	sp, r7
   18e78:	bc80      	pop	{r7}
   18e7a:	4770      	bx	lr

00018e7c <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   18e7c:	b480      	push	{r7}
   18e7e:	b083      	sub	sp, #12
   18e80:	af00      	add	r7, sp, #0
   18e82:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   18e84:	4b04      	ldr	r3, [pc, #16]	; (18e98 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   18e86:	681b      	ldr	r3, [r3, #0]
   18e88:	2201      	movs	r2, #1
   18e8a:	709a      	strb	r2, [r3, #2]
	asm("nop");
   18e8c:	bf00      	nop
}
   18e8e:	bf00      	nop
   18e90:	370c      	adds	r7, #12
   18e92:	46bd      	mov	sp, r7
   18e94:	bc80      	pop	{r7}
   18e96:	4770      	bx	lr
   18e98:	2000a3c0 	.word	0x2000a3c0

00018e9c <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   18e9c:	b480      	push	{r7}
   18e9e:	b083      	sub	sp, #12
   18ea0:	af00      	add	r7, sp, #0
   18ea2:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   18ea4:	687b      	ldr	r3, [r7, #4]
   18ea6:	4618      	mov	r0, r3
   18ea8:	370c      	adds	r7, #12
   18eaa:	46bd      	mov	sp, r7
   18eac:	bc80      	pop	{r7}
   18eae:	4770      	bx	lr

00018eb0 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   18eb0:	b480      	push	{r7}
   18eb2:	b083      	sub	sp, #12
   18eb4:	af00      	add	r7, sp, #0
   18eb6:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   18eb8:	687b      	ldr	r3, [r7, #4]
   18eba:	4618      	mov	r0, r3
   18ebc:	370c      	adds	r7, #12
   18ebe:	46bd      	mov	sp, r7
   18ec0:	bc80      	pop	{r7}
   18ec2:	4770      	bx	lr

00018ec4 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   18ec4:	b580      	push	{r7, lr}
   18ec6:	b084      	sub	sp, #16
   18ec8:	af00      	add	r7, sp, #0
   18eca:	60f8      	str	r0, [r7, #12]
   18ecc:	60b9      	str	r1, [r7, #8]
   18ece:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   18ed0:	4a1a      	ldr	r2, [pc, #104]	; (18f3c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x78>)
   18ed2:	68fb      	ldr	r3, [r7, #12]
   18ed4:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   18ed6:	68fb      	ldr	r3, [r7, #12]
   18ed8:	68ba      	ldr	r2, [r7, #8]
   18eda:	64da      	str	r2, [r3, #76]	; 0x4c
	spiLT=spiLite;
   18edc:	68fb      	ldr	r3, [r7, #12]
   18ede:	687a      	ldr	r2, [r7, #4]
   18ee0:	619a      	str	r2, [r3, #24]
	rx=spiLT->rxLiteBuffer;
   18ee2:	68fb      	ldr	r3, [r7, #12]
   18ee4:	699b      	ldr	r3, [r3, #24]
   18ee6:	68da      	ldr	r2, [r3, #12]
   18ee8:	68fb      	ldr	r3, [r7, #12]
   18eea:	625a      	str	r2, [r3, #36]	; 0x24
	tx=spiLT->txLiteBuffer;
   18eec:	68fb      	ldr	r3, [r7, #12]
   18eee:	699b      	ldr	r3, [r3, #24]
   18ef0:	689a      	ldr	r2, [r3, #8]
   18ef2:	68fb      	ldr	r3, [r7, #12]
   18ef4:	621a      	str	r2, [r3, #32]
	auxTimer=&hvacTimer;
   18ef6:	68fb      	ldr	r3, [r7, #12]
   18ef8:	4a11      	ldr	r2, [pc, #68]	; (18f40 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x7c>)
   18efa:	629a      	str	r2, [r3, #40]	; 0x28
	activeChannels[0]=4;
   18efc:	68fb      	ldr	r3, [r7, #12]
   18efe:	2204      	movs	r2, #4
   18f00:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=8;
   18f02:	68fb      	ldr	r3, [r7, #12]
   18f04:	2208      	movs	r2, #8
   18f06:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=15;
   18f08:	68fb      	ldr	r3, [r7, #12]
   18f0a:	220f      	movs	r2, #15
   18f0c:	715a      	strb	r2, [r3, #5]
	delay_ms(200);
   18f0e:	20c8      	movs	r0, #200	; 0xc8
   18f10:	4b0c      	ldr	r3, [pc, #48]	; (18f44 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   18f12:	4798      	blx	r3
	temperatureTimer.Init();
   18f14:	480c      	ldr	r0, [pc, #48]	; (18f48 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   18f16:	4b0d      	ldr	r3, [pc, #52]	; (18f4c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   18f18:	4798      	blx	r3
	configure_channels();
   18f1a:	68f8      	ldr	r0, [r7, #12]
   18f1c:	4b0c      	ldr	r3, [pc, #48]	; (18f50 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   18f1e:	4798      	blx	r3
	configure_global_parameters();
   18f20:	68f8      	ldr	r0, [r7, #12]
   18f22:	4b0c      	ldr	r3, [pc, #48]	; (18f54 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   18f24:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   18f26:	68fb      	ldr	r3, [r7, #12]
   18f28:	2201      	movs	r2, #1
   18f2a:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   18f2c:	68f8      	ldr	r0, [r7, #12]
   18f2e:	4b0a      	ldr	r3, [pc, #40]	; (18f58 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   18f30:	4798      	blx	r3
   18f32:	4603      	mov	r3, r0
}
   18f34:	4618      	mov	r0, r3
   18f36:	3710      	adds	r7, #16
   18f38:	46bd      	mov	sp, r7
   18f3a:	bd80      	pop	{r7, pc}
   18f3c:	2000a3c0 	.word	0x2000a3c0
   18f40:	2000a0e8 	.word	0x2000a0e8
   18f44:	000064b1 	.word	0x000064b1
   18f48:	2000a0b0 	.word	0x2000a0b0
   18f4c:	000176a5 	.word	0x000176a5
   18f50:	000193a5 	.word	0x000193a5
   18f54:	00019435 	.word	0x00019435
   18f58:	0001946d 	.word	0x0001946d

00018f5c <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   18f5c:	b590      	push	{r4, r7, lr}
   18f5e:	b089      	sub	sp, #36	; 0x24
   18f60:	af02      	add	r7, sp, #8
   18f62:	60f8      	str	r0, [r7, #12]
   18f64:	60b9      	str	r1, [r7, #8]
   18f66:	603b      	str	r3, [r7, #0]
   18f68:	4613      	mov	r3, r2
   18f6a:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   18f6c:	79fb      	ldrb	r3, [r7, #7]
   18f6e:	461a      	mov	r2, r3
   18f70:	f44f 7100 	mov.w	r1, #512	; 0x200
   18f74:	68f8      	ldr	r0, [r7, #12]
   18f76:	4b0b      	ldr	r3, [pc, #44]	; (18fa4 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   18f78:	4798      	blx	r3
   18f7a:	4603      	mov	r3, r0
   18f7c:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   18f7e:	8afa      	ldrh	r2, [r7, #22]
   18f80:	683b      	ldr	r3, [r7, #0]
   18f82:	9300      	str	r3, [sp, #0]
   18f84:	4613      	mov	r3, r2
   18f86:	2202      	movs	r2, #2
   18f88:	68b9      	ldr	r1, [r7, #8]
   18f8a:	68f8      	ldr	r0, [r7, #12]
   18f8c:	4c06      	ldr	r4, [pc, #24]	; (18fa8 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   18f8e:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   18f90:	8afb      	ldrh	r3, [r7, #22]
   18f92:	79fa      	ldrb	r2, [r7, #7]
   18f94:	68b9      	ldr	r1, [r7, #8]
   18f96:	68f8      	ldr	r0, [r7, #12]
   18f98:	4c04      	ldr	r4, [pc, #16]	; (18fac <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   18f9a:	47a0      	blx	r4
}
   18f9c:	bf00      	nop
   18f9e:	371c      	adds	r7, #28
   18fa0:	46bd      	mov	sp, r7
   18fa2:	bd90      	pop	{r4, r7, pc}
   18fa4:	00019379 	.word	0x00019379
   18fa8:	00019239 	.word	0x00019239
   18fac:	00018ffd 	.word	0x00018ffd

00018fb0 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   18fb0:	b590      	push	{r4, r7, lr}
   18fb2:	b087      	sub	sp, #28
   18fb4:	af02      	add	r7, sp, #8
   18fb6:	6078      	str	r0, [r7, #4]
   18fb8:	460b      	mov	r3, r1
   18fba:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   18fbc:	78fb      	ldrb	r3, [r7, #3]
   18fbe:	687a      	ldr	r2, [r7, #4]
   18fc0:	4413      	add	r3, r2
   18fc2:	78db      	ldrb	r3, [r3, #3]
   18fc4:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   18fc6:	687b      	ldr	r3, [r7, #4]
   18fc8:	2200      	movs	r2, #0
   18fca:	705a      	strb	r2, [r3, #1]
	ready=false;
   18fcc:	687b      	ldr	r3, [r7, #4]
   18fce:	2200      	movs	r2, #0
   18fd0:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   18fd2:	687b      	ldr	r3, [r7, #4]
   18fd4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18fd6:	7bfb      	ldrb	r3, [r7, #15]
   18fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18fdc:	b2db      	uxtb	r3, r3
   18fde:	9300      	str	r3, [sp, #0]
   18fe0:	2300      	movs	r3, #0
   18fe2:	2202      	movs	r2, #2
   18fe4:	6878      	ldr	r0, [r7, #4]
   18fe6:	4c04      	ldr	r4, [pc, #16]	; (18ff8 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   18fe8:	47a0      	blx	r4
	channelOnProcess=channel_number;
   18fea:	687b      	ldr	r3, [r7, #4]
   18fec:	7bfa      	ldrb	r2, [r7, #15]
   18fee:	71da      	strb	r2, [r3, #7]
	//wait_for_process_to_finish(chip_select);
}
   18ff0:	bf00      	nop
   18ff2:	3714      	adds	r7, #20
   18ff4:	46bd      	mov	sp, r7
   18ff6:	bd90      	pop	{r4, r7, pc}
   18ff8:	00019309 	.word	0x00019309

00018ffc <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   18ffc:	b590      	push	{r4, r7, lr}
   18ffe:	b089      	sub	sp, #36	; 0x24
   19000:	af02      	add	r7, sp, #8
   19002:	60f8      	str	r0, [r7, #12]
   19004:	60b9      	str	r1, [r7, #8]
   19006:	4611      	mov	r1, r2
   19008:	461a      	mov	r2, r3
   1900a:	460b      	mov	r3, r1
   1900c:	71fb      	strb	r3, [r7, #7]
   1900e:	4613      	mov	r3, r2
   19010:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   19012:	88ba      	ldrh	r2, [r7, #4]
   19014:	2300      	movs	r3, #0
   19016:	9300      	str	r3, [sp, #0]
   19018:	4613      	mov	r3, r2
   1901a:	2203      	movs	r2, #3
   1901c:	68b9      	ldr	r1, [r7, #8]
   1901e:	68f8      	ldr	r0, [r7, #12]
   19020:	4c0c      	ldr	r4, [pc, #48]	; (19054 <_ZN13LTC2983_Class20print_config_channelEmht+0x58>)
   19022:	47a0      	blx	r4
   19024:	6178      	str	r0, [r7, #20]

	usb.print(F("\nChannel Config "));
   19026:	490c      	ldr	r1, [pc, #48]	; (19058 <_ZN13LTC2983_Class20print_config_channelEmht+0x5c>)
   19028:	480c      	ldr	r0, [pc, #48]	; (1905c <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   1902a:	4b0d      	ldr	r3, [pc, #52]	; (19060 <_ZN13LTC2983_Class20print_config_channelEmht+0x64>)
   1902c:	4798      	blx	r3
	usb.println(channel_number);
   1902e:	79fb      	ldrb	r3, [r7, #7]
   19030:	220a      	movs	r2, #10
   19032:	4619      	mov	r1, r3
   19034:	4809      	ldr	r0, [pc, #36]	; (1905c <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   19036:	4b0b      	ldr	r3, [pc, #44]	; (19064 <_ZN13LTC2983_Class20print_config_channelEmht+0x68>)
   19038:	4798      	blx	r3

	// 24 LSB's are conversion result
	
	usb<<"register value: ";
   1903a:	490b      	ldr	r1, [pc, #44]	; (19068 <_ZN13LTC2983_Class20print_config_channelEmht+0x6c>)
   1903c:	4807      	ldr	r0, [pc, #28]	; (1905c <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   1903e:	4b0b      	ldr	r3, [pc, #44]	; (1906c <_ZN13LTC2983_Class20print_config_channelEmht+0x70>)
   19040:	4798      	blx	r3
	usb.println(raw_data,HEX);
   19042:	2210      	movs	r2, #16
   19044:	6979      	ldr	r1, [r7, #20]
   19046:	4805      	ldr	r0, [pc, #20]	; (1905c <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   19048:	4b09      	ldr	r3, [pc, #36]	; (19070 <_ZN13LTC2983_Class20print_config_channelEmht+0x74>)
   1904a:	4798      	blx	r3
	
}
   1904c:	bf00      	nop
   1904e:	371c      	adds	r7, #28
   19050:	46bd      	mov	sp, r7
   19052:	bd90      	pop	{r4, r7, pc}
   19054:	00019239 	.word	0x00019239
   19058:	00023194 	.word	0x00023194
   1905c:	2000a140 	.word	0x2000a140
   19060:	00018091 	.word	0x00018091
   19064:	000181c9 	.word	0x000181c9
   19068:	000231a8 	.word	0x000231a8
   1906c:	00019569 	.word	0x00019569
   19070:	00018205 	.word	0x00018205

00019074 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   19074:	b590      	push	{r4, r7, lr}
   19076:	b085      	sub	sp, #20
   19078:	af02      	add	r7, sp, #8
   1907a:	6078      	str	r0, [r7, #4]
   1907c:	460b      	mov	r3, r1
   1907e:	70fb      	strb	r3, [r7, #3]
   19080:	4613      	mov	r3, r2
   19082:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   19084:	78fb      	ldrb	r3, [r7, #3]
   19086:	461a      	mov	r2, r3
   19088:	2110      	movs	r1, #16
   1908a:	6878      	ldr	r0, [r7, #4]
   1908c:	4b17      	ldr	r3, [pc, #92]	; (190ec <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   1908e:	4798      	blx	r3
   19090:	4603      	mov	r3, r0
   19092:	461a      	mov	r2, r3
   19094:	687b      	ldr	r3, [r7, #4]
   19096:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   1909a:	687b      	ldr	r3, [r7, #4]
   1909c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1909e:	687b      	ldr	r3, [r7, #4]
   190a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
   190a4:	2300      	movs	r3, #0
   190a6:	9300      	str	r3, [sp, #0]
   190a8:	4613      	mov	r3, r2
   190aa:	2203      	movs	r2, #3
   190ac:	6878      	ldr	r0, [r7, #4]
   190ae:	4c10      	ldr	r4, [pc, #64]	; (190f0 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   190b0:	47a0      	blx	r4
   190b2:	4602      	mov	r2, r0
   190b4:	687b      	ldr	r3, [r7, #4]
   190b6:	649a      	str	r2, [r3, #72]	; 0x48


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   190b8:	687b      	ldr	r3, [r7, #4]
   190ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   190bc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   190c0:	687b      	ldr	r3, [r7, #4]
   190c2:	645a      	str	r2, [r3, #68]	; 0x44
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   190c4:	687b      	ldr	r3, [r7, #4]
   190c6:	6c59      	ldr	r1, [r3, #68]	; 0x44
   190c8:	78bb      	ldrb	r3, [r7, #2]
   190ca:	78fa      	ldrb	r2, [r7, #3]
   190cc:	6878      	ldr	r0, [r7, #4]
   190ce:	4c09      	ldr	r4, [pc, #36]	; (190f4 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   190d0:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   190d2:	687b      	ldr	r3, [r7, #4]
   190d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   190d6:	0e1b      	lsrs	r3, r3, #24
   190d8:	b2da      	uxtb	r2, r3
   190da:	687b      	ldr	r3, [r7, #4]
   190dc:	719a      	strb	r2, [r3, #6]
	return scaled_result;
   190de:	687b      	ldr	r3, [r7, #4]
   190e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
   190e2:	4618      	mov	r0, r3
   190e4:	370c      	adds	r7, #12
   190e6:	46bd      	mov	sp, r7
   190e8:	bd90      	pop	{r4, r7, pc}
   190ea:	bf00      	nop
   190ec:	00019379 	.word	0x00019379
   190f0:	00019239 	.word	0x00019239
   190f4:	0001914d 	.word	0x0001914d

000190f8 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   190f8:	b580      	push	{r7, lr}
   190fa:	b082      	sub	sp, #8
   190fc:	af00      	add	r7, sp, #0
   190fe:	6078      	str	r0, [r7, #4]
   19100:	460b      	mov	r3, r1
   19102:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   19104:	78fb      	ldrb	r3, [r7, #3]
   19106:	687a      	ldr	r2, [r7, #4]
   19108:	4413      	add	r3, r2
   1910a:	78db      	ldrb	r3, [r3, #3]
   1910c:	4619      	mov	r1, r3
   1910e:	6878      	ldr	r0, [r7, #4]
   19110:	4b03      	ldr	r3, [pc, #12]	; (19120 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   19112:	4798      	blx	r3
   19114:	4603      	mov	r3, r0
}
   19116:	4618      	mov	r0, r3
   19118:	3708      	adds	r7, #8
   1911a:	46bd      	mov	sp, r7
   1911c:	bd80      	pop	{r7, pc}
   1911e:	bf00      	nop
   19120:	00019125 	.word	0x00019125

00019124 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   19124:	b580      	push	{r7, lr}
   19126:	b082      	sub	sp, #8
   19128:	af00      	add	r7, sp, #0
   1912a:	6078      	str	r0, [r7, #4]
   1912c:	460b      	mov	r3, r1
   1912e:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   19130:	78fb      	ldrb	r3, [r7, #3]
   19132:	2202      	movs	r2, #2
   19134:	4619      	mov	r1, r3
   19136:	6878      	ldr	r0, [r7, #4]
   19138:	4b03      	ldr	r3, [pc, #12]	; (19148 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   1913a:	4798      	blx	r3
   1913c:	4603      	mov	r3, r0
}
   1913e:	4618      	mov	r0, r3
   19140:	3708      	adds	r7, #8
   19142:	46bd      	mov	sp, r7
   19144:	bd80      	pop	{r7, pc}
   19146:	bf00      	nop
   19148:	00019075 	.word	0x00019075

0001914c <_ZN13LTC2983_Class13ConvertResultEmhh>:
		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   1914c:	b580      	push	{r7, lr}
   1914e:	b084      	sub	sp, #16
   19150:	af00      	add	r7, sp, #0
   19152:	60f8      	str	r0, [r7, #12]
   19154:	60b9      	str	r1, [r7, #8]
   19156:	4611      	mov	r1, r2
   19158:	461a      	mov	r2, r3
   1915a:	460b      	mov	r3, r1
   1915c:	71fb      	strb	r3, [r7, #7]
   1915e:	4613      	mov	r3, r2
   19160:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   19162:	68ba      	ldr	r2, [r7, #8]
   19164:	68fb      	ldr	r3, [r7, #12]
   19166:	655a      	str	r2, [r3, #84]	; 0x54
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   19168:	68fb      	ldr	r3, [r7, #12]
   1916a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1916c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   19170:	2b00      	cmp	r3, #0
   19172:	d006      	beq.n	19182 <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   19174:	68fb      	ldr	r3, [r7, #12]
   19176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   19178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1917c:	461a      	mov	r2, r3
   1917e:	68fb      	ldr	r3, [r7, #12]
   19180:	655a      	str	r2, [r3, #84]	; 0x54

	// Translate and print result
	if (channel_output == TEMPERATURE)
   19182:	79bb      	ldrb	r3, [r7, #6]
   19184:	2b02      	cmp	r3, #2
   19186:	d11c      	bne.n	191c2 <_ZN13LTC2983_Class13ConvertResultEmhh+0x76>
	{
		scaled_result= float(signed_data) / 1024;
   19188:	68fb      	ldr	r3, [r7, #12]
   1918a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1918c:	4b18      	ldr	r3, [pc, #96]	; (191f0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   1918e:	4610      	mov	r0, r2
   19190:	4798      	blx	r3
   19192:	4602      	mov	r2, r0
   19194:	4b17      	ldr	r3, [pc, #92]	; (191f4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   19196:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   1919a:	4610      	mov	r0, r2
   1919c:	4798      	blx	r3
   1919e:	4603      	mov	r3, r0
   191a0:	461a      	mov	r2, r3
   191a2:	68fb      	ldr	r3, [r7, #12]
   191a4:	651a      	str	r2, [r3, #80]	; 0x50
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   191a6:	79fb      	ldrb	r3, [r7, #7]
   191a8:	4619      	mov	r1, r3
   191aa:	68f8      	ldr	r0, [r7, #12]
   191ac:	4b12      	ldr	r3, [pc, #72]	; (191f8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   191ae:	4798      	blx	r3
   191b0:	4603      	mov	r3, r0
   191b2:	461a      	mov	r2, r3
   191b4:	68fb      	ldr	r3, [r7, #12]
   191b6:	6d19      	ldr	r1, [r3, #80]	; 0x50
   191b8:	68fb      	ldr	r3, [r7, #12]
   191ba:	3202      	adds	r2, #2
   191bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   191c0:	e011      	b.n	191e6 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
	else if (channel_output == VOLTAGE)
   191c2:	79bb      	ldrb	r3, [r7, #6]
   191c4:	2b01      	cmp	r3, #1
   191c6:	d10e      	bne.n	191e6 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
		scaled_result = float(signed_data) / 2097152;
   191c8:	68fb      	ldr	r3, [r7, #12]
   191ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   191cc:	4b08      	ldr	r3, [pc, #32]	; (191f0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   191ce:	4610      	mov	r0, r2
   191d0:	4798      	blx	r3
   191d2:	4602      	mov	r2, r0
   191d4:	4b07      	ldr	r3, [pc, #28]	; (191f4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   191d6:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   191da:	4610      	mov	r0, r2
   191dc:	4798      	blx	r3
   191de:	4603      	mov	r3, r0
   191e0:	461a      	mov	r2, r3
   191e2:	68fb      	ldr	r3, [r7, #12]
   191e4:	651a      	str	r2, [r3, #80]	; 0x50
}
   191e6:	bf00      	nop
   191e8:	3710      	adds	r7, #16
   191ea:	46bd      	mov	sp, r7
   191ec:	bd80      	pop	{r7, pc}
   191ee:	bf00      	nop
   191f0:	0001c911 	.word	0x0001c911
   191f4:	0001cb21 	.word	0x0001cb21
   191f8:	000191fd 	.word	0x000191fd

000191fc <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   191fc:	b480      	push	{r7}
   191fe:	b085      	sub	sp, #20
   19200:	af00      	add	r7, sp, #0
   19202:	6078      	str	r0, [r7, #4]
   19204:	460b      	mov	r3, r1
   19206:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   19208:	2300      	movs	r3, #0
   1920a:	73fb      	strb	r3, [r7, #15]
   1920c:	7bfb      	ldrb	r3, [r7, #15]
   1920e:	2b02      	cmp	r3, #2
   19210:	dc0c      	bgt.n	1922c <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   19212:	7bfb      	ldrb	r3, [r7, #15]
   19214:	687a      	ldr	r2, [r7, #4]
   19216:	4413      	add	r3, r2
   19218:	78db      	ldrb	r3, [r3, #3]
   1921a:	78fa      	ldrb	r2, [r7, #3]
   1921c:	429a      	cmp	r2, r3
   1921e:	d101      	bne.n	19224 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   19220:	7bfb      	ldrb	r3, [r7, #15]
   19222:	e004      	b.n	1922e <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   19224:	7bfb      	ldrb	r3, [r7, #15]
   19226:	3301      	adds	r3, #1
   19228:	73fb      	strb	r3, [r7, #15]
   1922a:	e7ef      	b.n	1920c <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   1922c:	2300      	movs	r3, #0
}
   1922e:	4618      	mov	r0, r3
   19230:	3714      	adds	r7, #20
   19232:	46bd      	mov	sp, r7
   19234:	bc80      	pop	{r7}
   19236:	4770      	bx	lr

00019238 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   19238:	b590      	push	{r4, r7, lr}
   1923a:	b089      	sub	sp, #36	; 0x24
   1923c:	af02      	add	r7, sp, #8
   1923e:	60f8      	str	r0, [r7, #12]
   19240:	60b9      	str	r1, [r7, #8]
   19242:	4611      	mov	r1, r2
   19244:	461a      	mov	r2, r3
   19246:	460b      	mov	r3, r1
   19248:	71fb      	strb	r3, [r7, #7]
   1924a:	4613      	mov	r3, r2
   1924c:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   1924e:	2300      	movs	r3, #0
   19250:	75fb      	strb	r3, [r7, #23]
   19252:	7dfb      	ldrb	r3, [r7, #23]
   19254:	2b06      	cmp	r3, #6
   19256:	dc09      	bgt.n	1926c <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   19258:	68fb      	ldr	r3, [r7, #12]
   1925a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1925c:	7dfb      	ldrb	r3, [r7, #23]
   1925e:	4413      	add	r3, r2
   19260:	2200      	movs	r2, #0
   19262:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   19264:	7dfb      	ldrb	r3, [r7, #23]
   19266:	3301      	adds	r3, #1
   19268:	75fb      	strb	r3, [r7, #23]
   1926a:	e7f2      	b.n	19252 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   1926c:	68fb      	ldr	r3, [r7, #12]
   1926e:	6a1b      	ldr	r3, [r3, #32]
   19270:	79fa      	ldrb	r2, [r7, #7]
   19272:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   19274:	68fb      	ldr	r3, [r7, #12]
   19276:	6a1b      	ldr	r3, [r3, #32]
   19278:	3301      	adds	r3, #1
   1927a:	88ba      	ldrh	r2, [r7, #4]
   1927c:	1212      	asrs	r2, r2, #8
   1927e:	b2d2      	uxtb	r2, r2
   19280:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   19282:	68fb      	ldr	r3, [r7, #12]
   19284:	6a1b      	ldr	r3, [r3, #32]
   19286:	3302      	adds	r3, #2
   19288:	88ba      	ldrh	r2, [r7, #4]
   1928a:	b2d2      	uxtb	r2, r2
   1928c:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   1928e:	68fb      	ldr	r3, [r7, #12]
   19290:	6a1b      	ldr	r3, [r3, #32]
   19292:	3303      	adds	r3, #3
   19294:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19296:	0e12      	lsrs	r2, r2, #24
   19298:	b2d2      	uxtb	r2, r2
   1929a:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   1929c:	68fb      	ldr	r3, [r7, #12]
   1929e:	6a1b      	ldr	r3, [r3, #32]
   192a0:	3304      	adds	r3, #4
   192a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   192a4:	0c12      	lsrs	r2, r2, #16
   192a6:	b2d2      	uxtb	r2, r2
   192a8:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   192aa:	68fb      	ldr	r3, [r7, #12]
   192ac:	6a1b      	ldr	r3, [r3, #32]
   192ae:	3305      	adds	r3, #5
   192b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   192b2:	0a12      	lsrs	r2, r2, #8
   192b4:	b2d2      	uxtb	r2, r2
   192b6:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   192b8:	68fb      	ldr	r3, [r7, #12]
   192ba:	6a1b      	ldr	r3, [r3, #32]
   192bc:	3306      	adds	r3, #6
   192be:	6aba      	ldr	r2, [r7, #40]	; 0x28
   192c0:	b2d2      	uxtb	r2, r2
   192c2:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   192c4:	68fb      	ldr	r3, [r7, #12]
   192c6:	6998      	ldr	r0, [r3, #24]
   192c8:	68fb      	ldr	r3, [r7, #12]
   192ca:	6a1a      	ldr	r2, [r3, #32]
   192cc:	f107 0110 	add.w	r1, r7, #16
   192d0:	2307      	movs	r3, #7
   192d2:	9300      	str	r3, [sp, #0]
   192d4:	460b      	mov	r3, r1
   192d6:	68b9      	ldr	r1, [r7, #8]
   192d8:	4c0a      	ldr	r4, [pc, #40]	; (19304 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   192da:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   192dc:	7c3b      	ldrb	r3, [r7, #16]
   192de:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   192e0:	7c7b      	ldrb	r3, [r7, #17]
   192e2:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   192e4:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   192e6:	7cbb      	ldrb	r3, [r7, #18]
   192e8:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   192ea:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   192ec:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   192ee:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   192f0:	68fb      	ldr	r3, [r7, #12]
   192f2:	61da      	str	r2, [r3, #28]
	asm("nop");
   192f4:	bf00      	nop
	return output_data;
   192f6:	68fb      	ldr	r3, [r7, #12]
   192f8:	69db      	ldr	r3, [r3, #28]
}
   192fa:	4618      	mov	r0, r3
   192fc:	371c      	adds	r7, #28
   192fe:	46bd      	mov	sp, r7
   19300:	bd90      	pop	{r4, r7, pc}
   19302:	bf00      	nop
   19304:	0001970d 	.word	0x0001970d

00019308 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   19308:	b590      	push	{r4, r7, lr}
   1930a:	b087      	sub	sp, #28
   1930c:	af02      	add	r7, sp, #8
   1930e:	60f8      	str	r0, [r7, #12]
   19310:	60b9      	str	r1, [r7, #8]
   19312:	4611      	mov	r1, r2
   19314:	461a      	mov	r2, r3
   19316:	460b      	mov	r3, r1
   19318:	71fb      	strb	r3, [r7, #7]
   1931a:	4613      	mov	r3, r2
   1931c:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   1931e:	68fb      	ldr	r3, [r7, #12]
   19320:	6a1b      	ldr	r3, [r3, #32]
   19322:	79fa      	ldrb	r2, [r7, #7]
   19324:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   19326:	68fb      	ldr	r3, [r7, #12]
   19328:	6a1b      	ldr	r3, [r3, #32]
   1932a:	3301      	adds	r3, #1
   1932c:	88ba      	ldrh	r2, [r7, #4]
   1932e:	1212      	asrs	r2, r2, #8
   19330:	b2d2      	uxtb	r2, r2
   19332:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   19334:	68fb      	ldr	r3, [r7, #12]
   19336:	6a1b      	ldr	r3, [r3, #32]
   19338:	3302      	adds	r3, #2
   1933a:	88ba      	ldrh	r2, [r7, #4]
   1933c:	b2d2      	uxtb	r2, r2
   1933e:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   19340:	68fb      	ldr	r3, [r7, #12]
   19342:	6a1b      	ldr	r3, [r3, #32]
   19344:	3303      	adds	r3, #3
   19346:	f897 2020 	ldrb.w	r2, [r7, #32]
   1934a:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   1934c:	68fb      	ldr	r3, [r7, #12]
   1934e:	6998      	ldr	r0, [r3, #24]
   19350:	68fb      	ldr	r3, [r7, #12]
   19352:	6a1a      	ldr	r2, [r3, #32]
   19354:	68fb      	ldr	r3, [r7, #12]
   19356:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19358:	2304      	movs	r3, #4
   1935a:	9300      	str	r3, [sp, #0]
   1935c:	460b      	mov	r3, r1
   1935e:	68b9      	ldr	r1, [r7, #8]
   19360:	4c04      	ldr	r4, [pc, #16]	; (19374 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   19362:	47a0      	blx	r4
	return rx[0];
   19364:	68fb      	ldr	r3, [r7, #12]
   19366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19368:	781b      	ldrb	r3, [r3, #0]
}
   1936a:	4618      	mov	r0, r3
   1936c:	3714      	adds	r7, #20
   1936e:	46bd      	mov	sp, r7
   19370:	bd90      	pop	{r4, r7, pc}
   19372:	bf00      	nop
   19374:	0001970d 	.word	0x0001970d

00019378 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   19378:	b480      	push	{r7}
   1937a:	b083      	sub	sp, #12
   1937c:	af00      	add	r7, sp, #0
   1937e:	6078      	str	r0, [r7, #4]
   19380:	460b      	mov	r3, r1
   19382:	807b      	strh	r3, [r7, #2]
   19384:	4613      	mov	r3, r2
   19386:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   19388:	787b      	ldrb	r3, [r7, #1]
   1938a:	3b01      	subs	r3, #1
   1938c:	b29b      	uxth	r3, r3
   1938e:	009b      	lsls	r3, r3, #2
   19390:	b29a      	uxth	r2, r3
   19392:	887b      	ldrh	r3, [r7, #2]
   19394:	4413      	add	r3, r2
   19396:	b29b      	uxth	r3, r3
}
   19398:	4618      	mov	r0, r3
   1939a:	370c      	adds	r7, #12
   1939c:	46bd      	mov	sp, r7
   1939e:	bc80      	pop	{r7}
   193a0:	4770      	bx	lr
	...

000193a4 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   193a4:	b590      	push	{r4, r7, lr}
   193a6:	b085      	sub	sp, #20
   193a8:	af00      	add	r7, sp, #0
   193aa:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	// ----- Channel 2: Assign Sense Resistor -----
	channel_assignment_data =
   193ac:	4b1c      	ldr	r3, [pc, #112]	; (19420 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   193ae:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 2, channel_assignment_data);
   193b0:	687b      	ldr	r3, [r7, #4]
   193b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   193b4:	68fb      	ldr	r3, [r7, #12]
   193b6:	2202      	movs	r2, #2
   193b8:	6878      	ldr	r0, [r7, #4]
   193ba:	4c1a      	ldr	r4, [pc, #104]	; (19424 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   193bc:	47a0      	blx	r4
	// ----- Channel 4: Assign RTD PT-100 -----
	channel_assignment_data =
   193be:	4b1a      	ldr	r3, [pc, #104]	; (19428 <_ZN13LTC2983_Class18configure_channelsEv+0x84>)
   193c0:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__2 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 4, channel_assignment_data);
   193c2:	687b      	ldr	r3, [r7, #4]
   193c4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   193c6:	68fb      	ldr	r3, [r7, #12]
   193c8:	2204      	movs	r2, #4
   193ca:	6878      	ldr	r0, [r7, #4]
   193cc:	4c15      	ldr	r4, [pc, #84]	; (19424 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   193ce:	47a0      	blx	r4
	// ----- Channel 6: Assign Sense Resistor -----
	channel_assignment_data =
   193d0:	4b13      	ldr	r3, [pc, #76]	; (19420 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   193d2:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 6, channel_assignment_data);
   193d4:	687b      	ldr	r3, [r7, #4]
   193d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   193d8:	68fb      	ldr	r3, [r7, #12]
   193da:	2206      	movs	r2, #6
   193dc:	6878      	ldr	r0, [r7, #4]
   193de:	4c11      	ldr	r4, [pc, #68]	; (19424 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   193e0:	47a0      	blx	r4
	// ----- Channel 8: Assign RTD PT-100 -----
	channel_assignment_data =
   193e2:	4b12      	ldr	r3, [pc, #72]	; (1942c <_ZN13LTC2983_Class18configure_channelsEv+0x88>)
   193e4:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__6 |
	RTD_NUM_WIRES__4_WIRE |
	RTD_EXCITATION_MODE__ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 8, channel_assignment_data);
   193e6:	687b      	ldr	r3, [r7, #4]
   193e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   193ea:	68fb      	ldr	r3, [r7, #12]
   193ec:	2208      	movs	r2, #8
   193ee:	6878      	ldr	r0, [r7, #4]
   193f0:	4c0c      	ldr	r4, [pc, #48]	; (19424 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   193f2:	47a0      	blx	r4
	// ----- Channel 13: Assign Sense Resistor -----
	channel_assignment_data =
   193f4:	4b0a      	ldr	r3, [pc, #40]	; (19420 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   193f6:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 13, channel_assignment_data);
   193f8:	687b      	ldr	r3, [r7, #4]
   193fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   193fc:	68fb      	ldr	r3, [r7, #12]
   193fe:	220d      	movs	r2, #13
   19400:	6878      	ldr	r0, [r7, #4]
   19402:	4c08      	ldr	r4, [pc, #32]	; (19424 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   19404:	47a0      	blx	r4
	// ----- Channel 15: Assign RTD PT-100 -----
	channel_assignment_data =
   19406:	4b0a      	ldr	r3, [pc, #40]	; (19430 <_ZN13LTC2983_Class18configure_channelsEv+0x8c>)
   19408:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__13 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 15, channel_assignment_data);
   1940a:	687b      	ldr	r3, [r7, #4]
   1940c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1940e:	68fb      	ldr	r3, [r7, #12]
   19410:	220f      	movs	r2, #15
   19412:	6878      	ldr	r0, [r7, #4]
   19414:	4c03      	ldr	r4, [pc, #12]	; (19424 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   19416:	47a0      	blx	r4

}
   19418:	bf00      	nop
   1941a:	3714      	adds	r7, #20
   1941c:	46bd      	mov	sp, r7
   1941e:	bd90      	pop	{r4, r7, pc}
   19420:	e89c4000 	.word	0xe89c4000
   19424:	00018f5d 	.word	0x00018f5d
   19428:	60851000 	.word	0x60851000
   1942c:	61a91000 	.word	0x61a91000
   19430:	63451000 	.word	0x63451000

00019434 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   19434:	b590      	push	{r4, r7, lr}
   19436:	b085      	sub	sp, #20
   19438:	af02      	add	r7, sp, #8
   1943a:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   1943c:	687b      	ldr	r3, [r7, #4]
   1943e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	REJECTION__50_60_HZ);
   19440:	2300      	movs	r3, #0
   19442:	9300      	str	r3, [sp, #0]
   19444:	23f0      	movs	r3, #240	; 0xf0
   19446:	2202      	movs	r2, #2
   19448:	6878      	ldr	r0, [r7, #4]
   1944a:	4c07      	ldr	r4, [pc, #28]	; (19468 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   1944c:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   1944e:	687b      	ldr	r3, [r7, #4]
   19450:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   19452:	2300      	movs	r3, #0
   19454:	9300      	str	r3, [sp, #0]
   19456:	23ff      	movs	r3, #255	; 0xff
   19458:	2202      	movs	r2, #2
   1945a:	6878      	ldr	r0, [r7, #4]
   1945c:	4c02      	ldr	r4, [pc, #8]	; (19468 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   1945e:	47a0      	blx	r4
}
   19460:	bf00      	nop
   19462:	370c      	adds	r7, #12
   19464:	46bd      	mov	sp, r7
   19466:	bd90      	pop	{r4, r7, pc}
   19468:	00019309 	.word	0x00019309

0001946c <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   1946c:	b580      	push	{r7, lr}
   1946e:	b082      	sub	sp, #8
   19470:	af00      	add	r7, sp, #0
   19472:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   19474:	687b      	ldr	r3, [r7, #4]
   19476:	2200      	movs	r2, #0
   19478:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	meassureTimeout=false;
   1947c:	687b      	ldr	r3, [r7, #4]
   1947e:	2200      	movs	r2, #0
   19480:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   19482:	4a31      	ldr	r2, [pc, #196]	; (19548 <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   19484:	687b      	ldr	r3, [r7, #4]
   19486:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   19488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1948c:	492f      	ldr	r1, [pc, #188]	; (1954c <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   1948e:	4830      	ldr	r0, [pc, #192]	; (19550 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   19490:	4b30      	ldr	r3, [pc, #192]	; (19554 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   19492:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   19494:	687b      	ldr	r3, [r7, #4]
   19496:	799b      	ldrb	r3, [r3, #6]
   19498:	2b01      	cmp	r3, #1
   1949a:	d009      	beq.n	194b0 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   1949c:	687b      	ldr	r3, [r7, #4]
   1949e:	789b      	ldrb	r3, [r3, #2]
   194a0:	b2db      	uxtb	r3, r3
   194a2:	f083 0301 	eor.w	r3, r3, #1
   194a6:	b2db      	uxtb	r3, r3
   194a8:	2b00      	cmp	r3, #0
   194aa:	d001      	beq.n	194b0 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   194ac:	2301      	movs	r3, #1
   194ae:	e000      	b.n	194b2 <_ZN13LTC2983_Class8SelfTestEv+0x46>
   194b0:	2300      	movs	r3, #0
   194b2:	2b00      	cmp	r3, #0
   194b4:	d034      	beq.n	19520 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   194b6:	2100      	movs	r1, #0
   194b8:	6878      	ldr	r0, [r7, #4]
   194ba:	4b27      	ldr	r3, [pc, #156]	; (19558 <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   194bc:	4798      	blx	r3
		delay_ms(1);
   194be:	2001      	movs	r0, #1
   194c0:	4b26      	ldr	r3, [pc, #152]	; (1955c <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   194c2:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   194c4:	687b      	ldr	r3, [r7, #4]
   194c6:	781b      	ldrb	r3, [r3, #0]
   194c8:	b2db      	uxtb	r3, r3
   194ca:	f083 0301 	eor.w	r3, r3, #1
   194ce:	b2db      	uxtb	r3, r3
   194d0:	2b00      	cmp	r3, #0
   194d2:	d009      	beq.n	194e8 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   194d4:	687b      	ldr	r3, [r7, #4]
   194d6:	789b      	ldrb	r3, [r3, #2]
   194d8:	b2db      	uxtb	r3, r3
   194da:	f083 0301 	eor.w	r3, r3, #1
   194de:	b2db      	uxtb	r3, r3
   194e0:	2b00      	cmp	r3, #0
   194e2:	d001      	beq.n	194e8 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   194e4:	2301      	movs	r3, #1
   194e6:	e000      	b.n	194ea <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   194e8:	2300      	movs	r3, #0
   194ea:	2b00      	cmp	r3, #0
   194ec:	d000      	beq.n	194f0 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   194ee:	e7e9      	b.n	194c4 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   194f0:	687b      	ldr	r3, [r7, #4]
   194f2:	789b      	ldrb	r3, [r3, #2]
   194f4:	b2db      	uxtb	r3, r3
   194f6:	f083 0301 	eor.w	r3, r3, #1
   194fa:	b2db      	uxtb	r3, r3
   194fc:	2b00      	cmp	r3, #0
   194fe:	d0c9      	beq.n	19494 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   19500:	687b      	ldr	r3, [r7, #4]
   19502:	781b      	ldrb	r3, [r3, #0]
   19504:	b2db      	uxtb	r3, r3
   19506:	2b00      	cmp	r3, #0
   19508:	d006      	beq.n	19518 <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   1950a:	687b      	ldr	r3, [r7, #4]
   1950c:	78db      	ldrb	r3, [r3, #3]
   1950e:	4619      	mov	r1, r3
   19510:	6878      	ldr	r0, [r7, #4]
   19512:	4b13      	ldr	r3, [pc, #76]	; (19560 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   19514:	4798      	blx	r3
   19516:	e7bd      	b.n	19494 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   19518:	2001      	movs	r0, #1
   1951a:	4b10      	ldr	r3, [pc, #64]	; (1955c <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   1951c:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   1951e:	e7b9      	b.n	19494 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   19520:	490a      	ldr	r1, [pc, #40]	; (1954c <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   19522:	480b      	ldr	r0, [pc, #44]	; (19550 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   19524:	4b0f      	ldr	r3, [pc, #60]	; (19564 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   19526:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   19528:	687b      	ldr	r3, [r7, #4]
   1952a:	799b      	ldrb	r3, [r3, #6]
   1952c:	2b01      	cmp	r3, #1
   1952e:	bf0c      	ite	eq
   19530:	2301      	moveq	r3, #1
   19532:	2300      	movne	r3, #0
   19534:	b2da      	uxtb	r2, r3
   19536:	687b      	ldr	r3, [r7, #4]
   19538:	751a      	strb	r2, [r3, #20]
	return	isOK;
   1953a:	687b      	ldr	r3, [r7, #4]
   1953c:	7d1b      	ldrb	r3, [r3, #20]
	}
   1953e:	4618      	mov	r0, r3
   19540:	3708      	adds	r7, #8
   19542:	46bd      	mov	sp, r7
   19544:	bd80      	pop	{r7, pc}
   19546:	bf00      	nop
   19548:	2000a3c0 	.word	0x2000a3c0
   1954c:	00018e7d 	.word	0x00018e7d
   19550:	2000a0b0 	.word	0x2000a0b0
   19554:	0001784d 	.word	0x0001784d
   19558:	00018fb1 	.word	0x00018fb1
   1955c:	000064b1 	.word	0x000064b1
   19560:	00019125 	.word	0x00019125
   19564:	000177dd 	.word	0x000177dd

00019568 <_ZlsIA17_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
   19568:	b580      	push	{r7, lr}
   1956a:	b082      	sub	sp, #8
   1956c:	af00      	add	r7, sp, #0
   1956e:	6078      	str	r0, [r7, #4]
   19570:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
   19572:	6839      	ldr	r1, [r7, #0]
   19574:	6878      	ldr	r0, [r7, #4]
   19576:	4b03      	ldr	r3, [pc, #12]	; (19584 <_ZlsIA17_cER5PrintS2_RKT_+0x1c>)
   19578:	4798      	blx	r3
   1957a:	687b      	ldr	r3, [r7, #4]
   1957c:	4618      	mov	r0, r3
   1957e:	3708      	adds	r7, #8
   19580:	46bd      	mov	sp, r7
   19582:	bd80      	pop	{r7, pc}
   19584:	000180b1 	.word	0x000180b1

00019588 <hri_port_set_OUT_reg>:
{
   19588:	b480      	push	{r7}
   1958a:	b085      	sub	sp, #20
   1958c:	af00      	add	r7, sp, #0
   1958e:	60f8      	str	r0, [r7, #12]
   19590:	460b      	mov	r3, r1
   19592:	607a      	str	r2, [r7, #4]
   19594:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   19596:	7afb      	ldrb	r3, [r7, #11]
   19598:	68fa      	ldr	r2, [r7, #12]
   1959a:	01db      	lsls	r3, r3, #7
   1959c:	4413      	add	r3, r2
   1959e:	3318      	adds	r3, #24
   195a0:	687a      	ldr	r2, [r7, #4]
   195a2:	601a      	str	r2, [r3, #0]
}
   195a4:	bf00      	nop
   195a6:	3714      	adds	r7, #20
   195a8:	46bd      	mov	sp, r7
   195aa:	bc80      	pop	{r7}
   195ac:	4770      	bx	lr

000195ae <hri_port_clear_OUT_reg>:
{
   195ae:	b480      	push	{r7}
   195b0:	b085      	sub	sp, #20
   195b2:	af00      	add	r7, sp, #0
   195b4:	60f8      	str	r0, [r7, #12]
   195b6:	460b      	mov	r3, r1
   195b8:	607a      	str	r2, [r7, #4]
   195ba:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   195bc:	7afb      	ldrb	r3, [r7, #11]
   195be:	68fa      	ldr	r2, [r7, #12]
   195c0:	01db      	lsls	r3, r3, #7
   195c2:	4413      	add	r3, r2
   195c4:	3314      	adds	r3, #20
   195c6:	687a      	ldr	r2, [r7, #4]
   195c8:	601a      	str	r2, [r3, #0]
}
   195ca:	bf00      	nop
   195cc:	3714      	adds	r7, #20
   195ce:	46bd      	mov	sp, r7
   195d0:	bc80      	pop	{r7}
   195d2:	4770      	bx	lr

000195d4 <_gpio_set_level>:
{
   195d4:	b580      	push	{r7, lr}
   195d6:	b082      	sub	sp, #8
   195d8:	af00      	add	r7, sp, #0
   195da:	4603      	mov	r3, r0
   195dc:	6039      	str	r1, [r7, #0]
   195de:	71fb      	strb	r3, [r7, #7]
   195e0:	4613      	mov	r3, r2
   195e2:	71bb      	strb	r3, [r7, #6]
	if (level) {
   195e4:	79bb      	ldrb	r3, [r7, #6]
   195e6:	2b00      	cmp	r3, #0
   195e8:	d006      	beq.n	195f8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   195ea:	79fb      	ldrb	r3, [r7, #7]
   195ec:	683a      	ldr	r2, [r7, #0]
   195ee:	4619      	mov	r1, r3
   195f0:	4806      	ldr	r0, [pc, #24]	; (1960c <_gpio_set_level+0x38>)
   195f2:	4b07      	ldr	r3, [pc, #28]	; (19610 <_gpio_set_level+0x3c>)
   195f4:	4798      	blx	r3
}
   195f6:	e005      	b.n	19604 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   195f8:	79fb      	ldrb	r3, [r7, #7]
   195fa:	683a      	ldr	r2, [r7, #0]
   195fc:	4619      	mov	r1, r3
   195fe:	4803      	ldr	r0, [pc, #12]	; (1960c <_gpio_set_level+0x38>)
   19600:	4b04      	ldr	r3, [pc, #16]	; (19614 <_gpio_set_level+0x40>)
   19602:	4798      	blx	r3
}
   19604:	bf00      	nop
   19606:	3708      	adds	r7, #8
   19608:	46bd      	mov	sp, r7
   1960a:	bd80      	pop	{r7, pc}
   1960c:	41008000 	.word	0x41008000
   19610:	00019589 	.word	0x00019589
   19614:	000195af 	.word	0x000195af

00019618 <gpio_set_pin_level>:
{
   19618:	b580      	push	{r7, lr}
   1961a:	b082      	sub	sp, #8
   1961c:	af00      	add	r7, sp, #0
   1961e:	4603      	mov	r3, r0
   19620:	460a      	mov	r2, r1
   19622:	71fb      	strb	r3, [r7, #7]
   19624:	4613      	mov	r3, r2
   19626:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   19628:	79fb      	ldrb	r3, [r7, #7]
   1962a:	115b      	asrs	r3, r3, #5
   1962c:	b2d8      	uxtb	r0, r3
   1962e:	79fb      	ldrb	r3, [r7, #7]
   19630:	f003 031f 	and.w	r3, r3, #31
   19634:	2201      	movs	r2, #1
   19636:	fa02 f303 	lsl.w	r3, r2, r3
   1963a:	79ba      	ldrb	r2, [r7, #6]
   1963c:	4619      	mov	r1, r3
   1963e:	4b03      	ldr	r3, [pc, #12]	; (1964c <gpio_set_pin_level+0x34>)
   19640:	4798      	blx	r3
}
   19642:	bf00      	nop
   19644:	3708      	adds	r7, #8
   19646:	46bd      	mov	sp, r7
   19648:	bd80      	pop	{r7, pc}
   1964a:	bf00      	nop
   1964c:	000195d5 	.word	0x000195d5

00019650 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   19650:	b480      	push	{r7}
   19652:	b083      	sub	sp, #12
   19654:	af00      	add	r7, sp, #0
   19656:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   19658:	4a05      	ldr	r2, [pc, #20]	; (19670 <_ZN6LT_SPIC1Ev+0x20>)
   1965a:	687b      	ldr	r3, [r7, #4]
   1965c:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   1965e:	687b      	ldr	r3, [r7, #4]
   19660:	4a04      	ldr	r2, [pc, #16]	; (19674 <_ZN6LT_SPIC1Ev+0x24>)
   19662:	605a      	str	r2, [r3, #4]
} //LT_SPI
   19664:	687b      	ldr	r3, [r7, #4]
   19666:	4618      	mov	r0, r3
   19668:	370c      	adds	r7, #12
   1966a:	46bd      	mov	sp, r7
   1966c:	bc80      	pop	{r7}
   1966e:	4770      	bx	lr
   19670:	2000a3c4 	.word	0x2000a3c4
   19674:	2000a3c8 	.word	0x2000a3c8

00019678 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   19678:	b480      	push	{r7}
   1967a:	b083      	sub	sp, #12
   1967c:	af00      	add	r7, sp, #0
   1967e:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   19680:	687b      	ldr	r3, [r7, #4]
   19682:	4618      	mov	r0, r3
   19684:	370c      	adds	r7, #12
   19686:	46bd      	mov	sp, r7
   19688:	bc80      	pop	{r7}
   1968a:	4770      	bx	lr

0001968c <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   1968c:	b580      	push	{r7, lr}
   1968e:	b082      	sub	sp, #8
   19690:	af00      	add	r7, sp, #0
   19692:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   19694:	687b      	ldr	r3, [r7, #4]
   19696:	685a      	ldr	r2, [r3, #4]
   19698:	687b      	ldr	r3, [r7, #4]
   1969a:	691b      	ldr	r3, [r3, #16]
   1969c:	4619      	mov	r1, r3
   1969e:	4610      	mov	r0, r2
   196a0:	4b0e      	ldr	r3, [pc, #56]	; (196dc <_ZN6LT_SPI4initEv+0x50>)
   196a2:	4798      	blx	r3
	spiTemp->init();
   196a4:	687b      	ldr	r3, [r7, #4]
   196a6:	685b      	ldr	r3, [r3, #4]
   196a8:	4618      	mov	r0, r3
   196aa:	4b0d      	ldr	r3, [pc, #52]	; (196e0 <_ZN6LT_SPI4initEv+0x54>)
   196ac:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   196ae:	687b      	ldr	r3, [r7, #4]
   196b0:	685b      	ldr	r3, [r3, #4]
   196b2:	685a      	ldr	r2, [r3, #4]
   196b4:	687b      	ldr	r3, [r7, #4]
   196b6:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   196b8:	687b      	ldr	r3, [r7, #4]
   196ba:	685b      	ldr	r3, [r3, #4]
   196bc:	689a      	ldr	r2, [r3, #8]
   196be:	687b      	ldr	r3, [r7, #4]
   196c0:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   196c2:	687b      	ldr	r3, [r7, #4]
   196c4:	685b      	ldr	r3, [r3, #4]
   196c6:	4618      	mov	r0, r3
   196c8:	4b06      	ldr	r3, [pc, #24]	; (196e4 <_ZN6LT_SPI4initEv+0x58>)
   196ca:	4798      	blx	r3
	ready=true;
   196cc:	687b      	ldr	r3, [r7, #4]
   196ce:	2201      	movs	r2, #1
   196d0:	701a      	strb	r2, [r3, #0]
}
   196d2:	bf00      	nop
   196d4:	3708      	adds	r7, #8
   196d6:	46bd      	mov	sp, r7
   196d8:	bd80      	pop	{r7, pc}
   196da:	bf00      	nop
   196dc:	00015c95 	.word	0x00015c95
   196e0:	00015c4d 	.word	0x00015c4d
   196e4:	00015cb9 	.word	0x00015cb9

000196e8 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   196e8:	b480      	push	{r7}
   196ea:	b083      	sub	sp, #12
   196ec:	af00      	add	r7, sp, #0
   196ee:	6078      	str	r0, [r7, #4]
   196f0:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   196f2:	687b      	ldr	r3, [r7, #4]
   196f4:	683a      	ldr	r2, [r7, #0]
   196f6:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   196f8:	4a03      	ldr	r2, [pc, #12]	; (19708 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   196fa:	687b      	ldr	r3, [r7, #4]
   196fc:	6013      	str	r3, [r2, #0]
}
   196fe:	bf00      	nop
   19700:	370c      	adds	r7, #12
   19702:	46bd      	mov	sp, r7
   19704:	bc80      	pop	{r7}
   19706:	4770      	bx	lr
   19708:	2000a3c4 	.word	0x2000a3c4

0001970c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   1970c:	b580      	push	{r7, lr}
   1970e:	b086      	sub	sp, #24
   19710:	af00      	add	r7, sp, #0
   19712:	60f8      	str	r0, [r7, #12]
   19714:	60b9      	str	r1, [r7, #8]
   19716:	607a      	str	r2, [r7, #4]
   19718:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   1971a:	687b      	ldr	r3, [r7, #4]
   1971c:	781b      	ldrb	r3, [r3, #0]
   1971e:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   19720:	68b9      	ldr	r1, [r7, #8]
   19722:	68f8      	ldr	r0, [r7, #12]
   19724:	4b25      	ldr	r3, [pc, #148]	; (197bc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   19726:	4798      	blx	r3
	
	switch(rOrw){
   19728:	7dfb      	ldrb	r3, [r7, #23]
   1972a:	2b02      	cmp	r3, #2
   1972c:	d002      	beq.n	19734 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   1972e:	2b03      	cmp	r3, #3
   19730:	d009      	beq.n	19746 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   19732:	e028      	b.n	19786 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   19734:	68fb      	ldr	r3, [r7, #12]
   19736:	685b      	ldr	r3, [r3, #4]
   19738:	f897 2020 	ldrb.w	r2, [r7, #32]
   1973c:	6879      	ldr	r1, [r7, #4]
   1973e:	4618      	mov	r0, r3
   19740:	4b1f      	ldr	r3, [pc, #124]	; (197c0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   19742:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   19744:	e031      	b.n	197aa <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   19746:	68fb      	ldr	r3, [r7, #12]
   19748:	685b      	ldr	r3, [r3, #4]
   1974a:	2203      	movs	r2, #3
   1974c:	6879      	ldr	r1, [r7, #4]
   1974e:	4618      	mov	r0, r3
   19750:	4b1b      	ldr	r3, [pc, #108]	; (197c0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   19752:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   19754:	f897 3020 	ldrb.w	r3, [r7, #32]
   19758:	2b04      	cmp	r3, #4
   1975a:	dd0b      	ble.n	19774 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   1975c:	68fb      	ldr	r3, [r7, #12]
   1975e:	6858      	ldr	r0, [r3, #4]
   19760:	f897 3020 	ldrb.w	r3, [r7, #32]
   19764:	3b03      	subs	r3, #3
   19766:	461a      	mov	r2, r3
   19768:	6839      	ldr	r1, [r7, #0]
   1976a:	4b16      	ldr	r3, [pc, #88]	; (197c4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   1976c:	4798      	blx	r3
					asm("nop");
   1976e:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   19770:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   19772:	e01a      	b.n	197aa <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   19774:	68fb      	ldr	r3, [r7, #12]
   19776:	685b      	ldr	r3, [r3, #4]
   19778:	2201      	movs	r2, #1
   1977a:	6839      	ldr	r1, [r7, #0]
   1977c:	4618      	mov	r0, r3
   1977e:	4b11      	ldr	r3, [pc, #68]	; (197c4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   19780:	4798      	blx	r3
				asm("nop");
   19782:	bf00      	nop
			break;
   19784:	e011      	b.n	197aa <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   19786:	68fb      	ldr	r3, [r7, #12]
   19788:	685b      	ldr	r3, [r3, #4]
   1978a:	f897 2020 	ldrb.w	r2, [r7, #32]
   1978e:	6879      	ldr	r1, [r7, #4]
   19790:	4618      	mov	r0, r3
   19792:	4b0b      	ldr	r3, [pc, #44]	; (197c0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   19794:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   19796:	68fb      	ldr	r3, [r7, #12]
   19798:	6858      	ldr	r0, [r3, #4]
   1979a:	f897 3020 	ldrb.w	r3, [r7, #32]
   1979e:	3b03      	subs	r3, #3
   197a0:	461a      	mov	r2, r3
   197a2:	6839      	ldr	r1, [r7, #0]
   197a4:	4b07      	ldr	r3, [pc, #28]	; (197c4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   197a6:	4798      	blx	r3
			break;
   197a8:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   197aa:	68b9      	ldr	r1, [r7, #8]
   197ac:	68f8      	ldr	r0, [r7, #12]
   197ae:	4b06      	ldr	r3, [pc, #24]	; (197c8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   197b0:	4798      	blx	r3
	asm("nop");
   197b2:	bf00      	nop
	
}
   197b4:	bf00      	nop
   197b6:	3718      	adds	r7, #24
   197b8:	46bd      	mov	sp, r7
   197ba:	bd80      	pop	{r7, pc}
   197bc:	000197cd 	.word	0x000197cd
   197c0:	00015cf5 	.word	0x00015cf5
   197c4:	00015d39 	.word	0x00015d39
   197c8:	00019815 	.word	0x00019815

000197cc <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   197cc:	b580      	push	{r7, lr}
   197ce:	b082      	sub	sp, #8
   197d0:	af00      	add	r7, sp, #0
   197d2:	6078      	str	r0, [r7, #4]
   197d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   197d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   197da:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   197dc:	683b      	ldr	r3, [r7, #0]
   197de:	b2db      	uxtb	r3, r3
   197e0:	2100      	movs	r1, #0
   197e2:	4618      	mov	r0, r3
   197e4:	4b08      	ldr	r3, [pc, #32]	; (19808 <_ZN6LT_SPI4OpenEm+0x3c>)
   197e6:	4798      	blx	r3
	 delay_us(10);
   197e8:	200a      	movs	r0, #10
   197ea:	4b08      	ldr	r3, [pc, #32]	; (1980c <_ZN6LT_SPI4OpenEm+0x40>)
   197ec:	4798      	blx	r3
	spiTemp->Enable();
   197ee:	687b      	ldr	r3, [r7, #4]
   197f0:	685b      	ldr	r3, [r3, #4]
   197f2:	4618      	mov	r0, r3
   197f4:	4b06      	ldr	r3, [pc, #24]	; (19810 <_ZN6LT_SPI4OpenEm+0x44>)
   197f6:	4798      	blx	r3
	 delay_us(10);
   197f8:	200a      	movs	r0, #10
   197fa:	4b04      	ldr	r3, [pc, #16]	; (1980c <_ZN6LT_SPI4OpenEm+0x40>)
   197fc:	4798      	blx	r3
 }
   197fe:	bf00      	nop
   19800:	3708      	adds	r7, #8
   19802:	46bd      	mov	sp, r7
   19804:	bd80      	pop	{r7, pc}
   19806:	bf00      	nop
   19808:	00019619 	.word	0x00019619
   1980c:	0000647d 	.word	0x0000647d
   19810:	00015cb9 	.word	0x00015cb9

00019814 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   19814:	b580      	push	{r7, lr}
   19816:	b082      	sub	sp, #8
   19818:	af00      	add	r7, sp, #0
   1981a:	6078      	str	r0, [r7, #4]
   1981c:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   1981e:	200a      	movs	r0, #10
   19820:	4b0b      	ldr	r3, [pc, #44]	; (19850 <_ZN6LT_SPI5CloseEm+0x3c>)
   19822:	4798      	blx	r3
	 spiTemp->Disable();
   19824:	687b      	ldr	r3, [r7, #4]
   19826:	685b      	ldr	r3, [r3, #4]
   19828:	4618      	mov	r0, r3
   1982a:	4b0a      	ldr	r3, [pc, #40]	; (19854 <_ZN6LT_SPI5CloseEm+0x40>)
   1982c:	4798      	blx	r3
	delay_us(10);
   1982e:	200a      	movs	r0, #10
   19830:	4b07      	ldr	r3, [pc, #28]	; (19850 <_ZN6LT_SPI5CloseEm+0x3c>)
   19832:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   19834:	683b      	ldr	r3, [r7, #0]
   19836:	b2db      	uxtb	r3, r3
   19838:	2101      	movs	r1, #1
   1983a:	4618      	mov	r0, r3
   1983c:	4b06      	ldr	r3, [pc, #24]	; (19858 <_ZN6LT_SPI5CloseEm+0x44>)
   1983e:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   19840:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   19844:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   19846:	bf00      	nop
   19848:	3708      	adds	r7, #8
   1984a:	46bd      	mov	sp, r7
   1984c:	bd80      	pop	{r7, pc}
   1984e:	bf00      	nop
   19850:	0000647d 	.word	0x0000647d
   19854:	00015d7d 	.word	0x00015d7d
   19858:	00019619 	.word	0x00019619

0001985c <_Z41__static_initialization_and_destruction_0ii>:
   1985c:	b580      	push	{r7, lr}
   1985e:	b082      	sub	sp, #8
   19860:	af00      	add	r7, sp, #0
   19862:	6078      	str	r0, [r7, #4]
   19864:	6039      	str	r1, [r7, #0]
   19866:	687b      	ldr	r3, [r7, #4]
   19868:	2b01      	cmp	r3, #1
   1986a:	d10c      	bne.n	19886 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1986c:	683b      	ldr	r3, [r7, #0]
   1986e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19872:	4293      	cmp	r3, r2
   19874:	d107      	bne.n	19886 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   19876:	4806      	ldr	r0, [pc, #24]	; (19890 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19878:	4b06      	ldr	r3, [pc, #24]	; (19894 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1987a:	4798      	blx	r3
   1987c:	4a06      	ldr	r2, [pc, #24]	; (19898 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1987e:	4907      	ldr	r1, [pc, #28]	; (1989c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   19880:	4803      	ldr	r0, [pc, #12]	; (19890 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19882:	4b07      	ldr	r3, [pc, #28]	; (198a0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   19884:	4798      	blx	r3
   19886:	bf00      	nop
   19888:	3708      	adds	r7, #8
   1988a:	46bd      	mov	sp, r7
   1988c:	bd80      	pop	{r7, pc}
   1988e:	bf00      	nop
   19890:	2000a3c8 	.word	0x2000a3c8
   19894:	00015c19 	.word	0x00015c19
   19898:	20000000 	.word	0x20000000
   1989c:	00015c39 	.word	0x00015c39
   198a0:	00019ab1 	.word	0x00019ab1

000198a4 <_GLOBAL__sub_I_ptrLTSPIClass>:
   198a4:	b580      	push	{r7, lr}
   198a6:	af00      	add	r7, sp, #0
   198a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   198ac:	2001      	movs	r0, #1
   198ae:	4b01      	ldr	r3, [pc, #4]	; (198b4 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   198b0:	4798      	blx	r3
   198b2:	bd80      	pop	{r7, pc}
   198b4:	0001985d 	.word	0x0001985d

000198b8 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
   198b8:	4b02      	ldr	r3, [pc, #8]	; (198c4 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
   198ba:	681a      	ldr	r2, [r3, #0]
   198bc:	6813      	ldr	r3, [r2, #0]
   198be:	3301      	adds	r3, #1
   198c0:	6013      	str	r3, [r2, #0]
   198c2:	4770      	bx	lr
   198c4:	2000a3e4 	.word	0x2000a3e4

000198c8 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
   198c8:	4b02      	ldr	r3, [pc, #8]	; (198d4 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
   198ca:	681b      	ldr	r3, [r3, #0]
   198cc:	2200      	movs	r2, #0
   198ce:	711a      	strb	r2, [r3, #4]
   198d0:	4770      	bx	lr
   198d2:	bf00      	nop
   198d4:	2000a3e4 	.word	0x2000a3e4

000198d8 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
   198d8:	b538      	push	{r3, r4, r5, lr}
   198da:	4604      	mov	r4, r0
{
	ticks=0;
   198dc:	2300      	movs	r3, #0
   198de:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
   198e0:	4d04      	ldr	r5, [pc, #16]	; (198f4 <_ZN16Maintenance_ToolD1Ev+0x1c>)
   198e2:	4628      	mov	r0, r5
   198e4:	4b04      	ldr	r3, [pc, #16]	; (198f8 <_ZN16Maintenance_ToolD1Ev+0x20>)
   198e6:	4798      	blx	r3
	interfaceTimer.Remove_task();
   198e8:	4628      	mov	r0, r5
   198ea:	4b04      	ldr	r3, [pc, #16]	; (198fc <_ZN16Maintenance_ToolD1Ev+0x24>)
   198ec:	4798      	blx	r3
	
} //~Maintenance_Tool
   198ee:	4620      	mov	r0, r4
   198f0:	bd38      	pop	{r3, r4, r5, pc}
   198f2:	bf00      	nop
   198f4:	2000a218 	.word	0x2000a218
   198f8:	000185f9 	.word	0x000185f9
   198fc:	00018711 	.word	0x00018711

00019900 <_ZN16Maintenance_ToolC1Ev>:
	ptrMaintenanceTool=this;
   19900:	4a04      	ldr	r2, [pc, #16]	; (19914 <_ZN16Maintenance_ToolC1Ev+0x14>)
   19902:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
   19904:	2200      	movs	r2, #0
   19906:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	nextMaintenanceSyncTime = 0;
   1990a:	6482      	str	r2, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
   1990c:	64c2      	str	r2, [r0, #76]	; 0x4c
	ticks=0;
   1990e:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
   19910:	4770      	bx	lr
   19912:	bf00      	nop
   19914:	2000a3e4 	.word	0x2000a3e4

00019918 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
   19918:	b510      	push	{r4, lr}
		maintenanceIsConnected = isConnected;
   1991a:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
		if (isConnected)
   1991e:	b919      	cbnz	r1, 19928 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
   19920:	4808      	ldr	r0, [pc, #32]	; (19944 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   19922:	4b09      	ldr	r3, [pc, #36]	; (19948 <_ZN16Maintenance_Tool12setConnectedEb+0x30>)
   19924:	4798      	blx	r3
   19926:	bd10      	pop	{r4, pc}
			interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
   19928:	4c06      	ldr	r4, [pc, #24]	; (19944 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   1992a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1992e:	4907      	ldr	r1, [pc, #28]	; (1994c <_ZN16Maintenance_Tool12setConnectedEb+0x34>)
   19930:	4620      	mov	r0, r4
   19932:	4b07      	ldr	r3, [pc, #28]	; (19950 <_ZN16Maintenance_Tool12setConnectedEb+0x38>)
   19934:	4798      	blx	r3
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
   19936:	f64e 2260 	movw	r2, #60000	; 0xea60
   1993a:	4906      	ldr	r1, [pc, #24]	; (19954 <_ZN16Maintenance_Tool12setConnectedEb+0x3c>)
   1993c:	4620      	mov	r0, r4
   1993e:	4b06      	ldr	r3, [pc, #24]	; (19958 <_ZN16Maintenance_Tool12setConnectedEb+0x40>)
   19940:	4798      	blx	r3
   19942:	bd10      	pop	{r4, pc}
   19944:	2000a218 	.word	0x2000a218
   19948:	000185f9 	.word	0x000185f9
   1994c:	000198b9 	.word	0x000198b9
   19950:	00018689 	.word	0x00018689
   19954:	000198c9 	.word	0x000198c9
   19958:	000186d9 	.word	0x000186d9

0001995c <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
   1995c:	b510      	push	{r4, lr}
   1995e:	4604      	mov	r4, r0
	result=false;
   19960:	2300      	movs	r3, #0
   19962:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	magic=0;
   19966:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	if (gotAccess==true)
   1996a:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
   1996e:	b12b      	cbz	r3, 1997c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
   19970:	2301      	movs	r3, #1
   19972:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	return	result;
   19976:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
}
   1997a:	bd10      	pop	{r4, pc}
		if (usb.connected)
   1997c:	4b15      	ldr	r3, [pc, #84]	; (199d4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   1997e:	7c1b      	ldrb	r3, [r3, #16]
   19980:	2b00      	cmp	r3, #0
   19982:	d0f8      	beq.n	19976 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
			if (usb.rxReady)
   19984:	4b13      	ldr	r3, [pc, #76]	; (199d4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   19986:	7d5b      	ldrb	r3, [r3, #21]
   19988:	b18b      	cbz	r3, 199ae <_ZN16Maintenance_Tool14IsAppConnectedEv+0x52>
   1998a:	1d43      	adds	r3, r0, #5
   1998c:	3009      	adds	r0, #9
   1998e:	2200      	movs	r2, #0
					magic|= localBuffer[i];
   19990:	f813 1b01 	ldrb.w	r1, [r3], #1
   19994:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
				for (int i = 0; i < 4; i++)
   19998:	4283      	cmp	r3, r0
   1999a:	d1f9      	bne.n	19990 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x34>
   1999c:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
				xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
   199a0:	4b0d      	ldr	r3, [pc, #52]	; (199d8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
   199a2:	ea82 0103 	eor.w	r1, r2, r3
   199a6:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
				if (xorResult==0)
   199aa:	429a      	cmp	r2, r3
   199ac:	d005      	beq.n	199ba <_ZN16Maintenance_Tool14IsAppConnectedEv+0x5e>
			usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   199ae:	2240      	movs	r2, #64	; 0x40
   199b0:	1d61      	adds	r1, r4, #5
   199b2:	4808      	ldr	r0, [pc, #32]	; (199d4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   199b4:	4b09      	ldr	r3, [pc, #36]	; (199dc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
   199b6:	4798      	blx	r3
   199b8:	e7dd      	b.n	19976 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
					gotAccess=true;
   199ba:	2101      	movs	r1, #1
   199bc:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
					result=true;
   199c0:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
					is_MTPC_Beaming=true;
   199c4:	7121      	strb	r1, [r4, #4]
					setConnected(true);
   199c6:	4620      	mov	r0, r4
   199c8:	4b05      	ldr	r3, [pc, #20]	; (199e0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
   199ca:	4798      	blx	r3
					return	result;
   199cc:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
   199d0:	bd10      	pop	{r4, pc}
   199d2:	bf00      	nop
   199d4:	2000a140 	.word	0x2000a140
   199d8:	61626364 	.word	0x61626364
   199dc:	00017d49 	.word	0x00017d49
   199e0:	00019919 	.word	0x00019919

000199e4 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	{
		memcpy(buffer+4*ii, (uint8_t*)(add+4*ii), 4);
	}

}
   199e4:	b510      	push	{r4, lr}
   199e6:	4c05      	ldr	r4, [pc, #20]	; (199fc <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
   199e8:	4620      	mov	r0, r4
   199ea:	4b05      	ldr	r3, [pc, #20]	; (19a00 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
   199ec:	4798      	blx	r3
   199ee:	4a05      	ldr	r2, [pc, #20]	; (19a04 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
   199f0:	4905      	ldr	r1, [pc, #20]	; (19a08 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
   199f2:	4620      	mov	r0, r4
   199f4:	4b05      	ldr	r3, [pc, #20]	; (19a0c <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
   199f6:	4798      	blx	r3
   199f8:	bd10      	pop	{r4, pc}
   199fa:	bf00      	nop
   199fc:	2000a3e8 	.word	0x2000a3e8
   19a00:	00019901 	.word	0x00019901
   19a04:	20000000 	.word	0x20000000
   19a08:	000198d9 	.word	0x000198d9
   19a0c:	00019ab1 	.word	0x00019ab1

00019a10 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   19a10:	b580      	push	{r7, lr}
   19a12:	b084      	sub	sp, #16
   19a14:	af00      	add	r7, sp, #0
   19a16:	60f8      	str	r0, [r7, #12]
   19a18:	60b9      	str	r1, [r7, #8]
   19a1a:	4613      	mov	r3, r2
   19a1c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   19a1e:	68fb      	ldr	r3, [r7, #12]
   19a20:	2b00      	cmp	r3, #0
   19a22:	d004      	beq.n	19a2e <io_write+0x1e>
   19a24:	68bb      	ldr	r3, [r7, #8]
   19a26:	2b00      	cmp	r3, #0
   19a28:	d001      	beq.n	19a2e <io_write+0x1e>
   19a2a:	2301      	movs	r3, #1
   19a2c:	e000      	b.n	19a30 <io_write+0x20>
   19a2e:	2300      	movs	r3, #0
   19a30:	f003 0301 	and.w	r3, r3, #1
   19a34:	b2db      	uxtb	r3, r3
   19a36:	2234      	movs	r2, #52	; 0x34
   19a38:	4907      	ldr	r1, [pc, #28]	; (19a58 <io_write+0x48>)
   19a3a:	4618      	mov	r0, r3
   19a3c:	4b07      	ldr	r3, [pc, #28]	; (19a5c <io_write+0x4c>)
   19a3e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   19a40:	68fb      	ldr	r3, [r7, #12]
   19a42:	681b      	ldr	r3, [r3, #0]
   19a44:	88fa      	ldrh	r2, [r7, #6]
   19a46:	68b9      	ldr	r1, [r7, #8]
   19a48:	68f8      	ldr	r0, [r7, #12]
   19a4a:	4798      	blx	r3
   19a4c:	4603      	mov	r3, r0
}
   19a4e:	4618      	mov	r0, r3
   19a50:	3710      	adds	r7, #16
   19a52:	46bd      	mov	sp, r7
   19a54:	bd80      	pop	{r7, pc}
   19a56:	bf00      	nop
   19a58:	000232f0 	.word	0x000232f0
   19a5c:	00007e21 	.word	0x00007e21

00019a60 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   19a60:	b580      	push	{r7, lr}
   19a62:	b084      	sub	sp, #16
   19a64:	af00      	add	r7, sp, #0
   19a66:	60f8      	str	r0, [r7, #12]
   19a68:	60b9      	str	r1, [r7, #8]
   19a6a:	4613      	mov	r3, r2
   19a6c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   19a6e:	68fb      	ldr	r3, [r7, #12]
   19a70:	2b00      	cmp	r3, #0
   19a72:	d004      	beq.n	19a7e <io_read+0x1e>
   19a74:	68bb      	ldr	r3, [r7, #8]
   19a76:	2b00      	cmp	r3, #0
   19a78:	d001      	beq.n	19a7e <io_read+0x1e>
   19a7a:	2301      	movs	r3, #1
   19a7c:	e000      	b.n	19a80 <io_read+0x20>
   19a7e:	2300      	movs	r3, #0
   19a80:	f003 0301 	and.w	r3, r3, #1
   19a84:	b2db      	uxtb	r3, r3
   19a86:	223d      	movs	r2, #61	; 0x3d
   19a88:	4907      	ldr	r1, [pc, #28]	; (19aa8 <io_read+0x48>)
   19a8a:	4618      	mov	r0, r3
   19a8c:	4b07      	ldr	r3, [pc, #28]	; (19aac <io_read+0x4c>)
   19a8e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   19a90:	68fb      	ldr	r3, [r7, #12]
   19a92:	685b      	ldr	r3, [r3, #4]
   19a94:	88fa      	ldrh	r2, [r7, #6]
   19a96:	68b9      	ldr	r1, [r7, #8]
   19a98:	68f8      	ldr	r0, [r7, #12]
   19a9a:	4798      	blx	r3
   19a9c:	4603      	mov	r3, r0
}
   19a9e:	4618      	mov	r0, r3
   19aa0:	3710      	adds	r7, #16
   19aa2:	46bd      	mov	sp, r7
   19aa4:	bd80      	pop	{r7, pc}
   19aa6:	bf00      	nop
   19aa8:	000232f0 	.word	0x000232f0
   19aac:	00007e21 	.word	0x00007e21

00019ab0 <__aeabi_atexit>:
   19ab0:	460b      	mov	r3, r1
   19ab2:	4601      	mov	r1, r0
   19ab4:	4618      	mov	r0, r3
   19ab6:	f003 baf5 	b.w	1d0a4 <__cxa_atexit>
   19aba:	bf00      	nop

00019abc <_ZdlPvj>:
   19abc:	f7fa bdbc 	b.w	14638 <_ZdlPv>

00019ac0 <floor>:
   19ac0:	f3c1 520a 	ubfx	r2, r1, #20, #11
   19ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19ac8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   19acc:	2e13      	cmp	r6, #19
   19ace:	460b      	mov	r3, r1
   19ad0:	460d      	mov	r5, r1
   19ad2:	4604      	mov	r4, r0
   19ad4:	4688      	mov	r8, r1
   19ad6:	4607      	mov	r7, r0
   19ad8:	dc1d      	bgt.n	19b16 <floor+0x56>
   19ada:	2e00      	cmp	r6, #0
   19adc:	db40      	blt.n	19b60 <floor+0xa0>
   19ade:	4a3c      	ldr	r2, [pc, #240]	; (19bd0 <floor+0x110>)
   19ae0:	fa42 f906 	asr.w	r9, r2, r6
   19ae4:	ea01 0209 	and.w	r2, r1, r9
   19ae8:	4302      	orrs	r2, r0
   19aea:	4686      	mov	lr, r0
   19aec:	d018      	beq.n	19b20 <floor+0x60>
   19aee:	a336      	add	r3, pc, #216	; (adr r3, 19bc8 <floor+0x108>)
   19af0:	e9d3 2300 	ldrd	r2, r3, [r3]
   19af4:	f002 f9a8 	bl	1be48 <__adddf3>
   19af8:	2200      	movs	r2, #0
   19afa:	2300      	movs	r3, #0
   19afc:	f002 fde6 	bl	1c6cc <__aeabi_dcmpgt>
   19b00:	b120      	cbz	r0, 19b0c <floor+0x4c>
   19b02:	2d00      	cmp	r5, #0
   19b04:	db42      	blt.n	19b8c <floor+0xcc>
   19b06:	ea28 0509 	bic.w	r5, r8, r9
   19b0a:	2700      	movs	r7, #0
   19b0c:	463c      	mov	r4, r7
   19b0e:	4629      	mov	r1, r5
   19b10:	4620      	mov	r0, r4
   19b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19b16:	2e33      	cmp	r6, #51	; 0x33
   19b18:	dd06      	ble.n	19b28 <floor+0x68>
   19b1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   19b1e:	d02f      	beq.n	19b80 <floor+0xc0>
   19b20:	4619      	mov	r1, r3
   19b22:	4620      	mov	r0, r4
   19b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19b28:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   19b2c:	f04f 39ff 	mov.w	r9, #4294967295
   19b30:	fa29 f902 	lsr.w	r9, r9, r2
   19b34:	ea10 0f09 	tst.w	r0, r9
   19b38:	d0f2      	beq.n	19b20 <floor+0x60>
   19b3a:	a323      	add	r3, pc, #140	; (adr r3, 19bc8 <floor+0x108>)
   19b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19b40:	f002 f982 	bl	1be48 <__adddf3>
   19b44:	2200      	movs	r2, #0
   19b46:	2300      	movs	r3, #0
   19b48:	f002 fdc0 	bl	1c6cc <__aeabi_dcmpgt>
   19b4c:	2800      	cmp	r0, #0
   19b4e:	d0dd      	beq.n	19b0c <floor+0x4c>
   19b50:	2d00      	cmp	r5, #0
   19b52:	db21      	blt.n	19b98 <floor+0xd8>
   19b54:	4645      	mov	r5, r8
   19b56:	ea27 0709 	bic.w	r7, r7, r9
   19b5a:	463c      	mov	r4, r7
   19b5c:	4629      	mov	r1, r5
   19b5e:	e7d7      	b.n	19b10 <floor+0x50>
   19b60:	a319      	add	r3, pc, #100	; (adr r3, 19bc8 <floor+0x108>)
   19b62:	e9d3 2300 	ldrd	r2, r3, [r3]
   19b66:	f002 f96f 	bl	1be48 <__adddf3>
   19b6a:	2200      	movs	r2, #0
   19b6c:	2300      	movs	r3, #0
   19b6e:	f002 fdad 	bl	1c6cc <__aeabi_dcmpgt>
   19b72:	2800      	cmp	r0, #0
   19b74:	d0ca      	beq.n	19b0c <floor+0x4c>
   19b76:	2d00      	cmp	r5, #0
   19b78:	db19      	blt.n	19bae <floor+0xee>
   19b7a:	2700      	movs	r7, #0
   19b7c:	463d      	mov	r5, r7
   19b7e:	e7c5      	b.n	19b0c <floor+0x4c>
   19b80:	4602      	mov	r2, r0
   19b82:	460b      	mov	r3, r1
   19b84:	f002 f960 	bl	1be48 <__adddf3>
   19b88:	4604      	mov	r4, r0
   19b8a:	e7ca      	b.n	19b22 <floor+0x62>
   19b8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   19b90:	fa43 f606 	asr.w	r6, r3, r6
   19b94:	44b0      	add	r8, r6
   19b96:	e7b6      	b.n	19b06 <floor+0x46>
   19b98:	2e14      	cmp	r6, #20
   19b9a:	d010      	beq.n	19bbe <floor+0xfe>
   19b9c:	2301      	movs	r3, #1
   19b9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   19ba2:	fa03 f606 	lsl.w	r6, r3, r6
   19ba6:	1937      	adds	r7, r6, r4
   19ba8:	bf28      	it	cs
   19baa:	4498      	addcs	r8, r3
   19bac:	e7d2      	b.n	19b54 <floor+0x94>
   19bae:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   19bb2:	4b08      	ldr	r3, [pc, #32]	; (19bd4 <floor+0x114>)
   19bb4:	4322      	orrs	r2, r4
   19bb6:	bf18      	it	ne
   19bb8:	461d      	movne	r5, r3
   19bba:	2700      	movs	r7, #0
   19bbc:	e7a6      	b.n	19b0c <floor+0x4c>
   19bbe:	f105 0801 	add.w	r8, r5, #1
   19bc2:	e7c7      	b.n	19b54 <floor+0x94>
   19bc4:	f3af 8000 	nop.w
   19bc8:	8800759c 	.word	0x8800759c
   19bcc:	7e37e43c 	.word	0x7e37e43c
   19bd0:	000fffff 	.word	0x000fffff
   19bd4:	bff00000 	.word	0xbff00000

00019bd8 <sin>:
   19bd8:	b530      	push	{r4, r5, lr}
   19bda:	4a1f      	ldr	r2, [pc, #124]	; (19c58 <sin+0x80>)
   19bdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   19be0:	4293      	cmp	r3, r2
   19be2:	b087      	sub	sp, #28
   19be4:	dd1b      	ble.n	19c1e <sin+0x46>
   19be6:	4a1d      	ldr	r2, [pc, #116]	; (19c5c <sin+0x84>)
   19be8:	4293      	cmp	r3, r2
   19bea:	dd05      	ble.n	19bf8 <sin+0x20>
   19bec:	4602      	mov	r2, r0
   19bee:	460b      	mov	r3, r1
   19bf0:	f002 f928 	bl	1be44 <__aeabi_dsub>
   19bf4:	b007      	add	sp, #28
   19bf6:	bd30      	pop	{r4, r5, pc}
   19bf8:	aa02      	add	r2, sp, #8
   19bfa:	f000 fef9 	bl	1a9f0 <__ieee754_rem_pio2>
   19bfe:	f000 0003 	and.w	r0, r0, #3
   19c02:	2801      	cmp	r0, #1
   19c04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19c08:	d01a      	beq.n	19c40 <sin+0x68>
   19c0a:	2802      	cmp	r0, #2
   19c0c:	d00f      	beq.n	19c2e <sin+0x56>
   19c0e:	b1e0      	cbz	r0, 19c4a <sin+0x72>
   19c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   19c14:	f001 f9cc 	bl	1afb0 <__kernel_cos>
   19c18:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   19c1c:	e7ea      	b.n	19bf4 <sin+0x1c>
   19c1e:	2300      	movs	r3, #0
   19c20:	9300      	str	r3, [sp, #0]
   19c22:	2200      	movs	r2, #0
   19c24:	2300      	movs	r3, #0
   19c26:	f001 ff2f 	bl	1ba88 <__kernel_sin>
   19c2a:	b007      	add	sp, #28
   19c2c:	bd30      	pop	{r4, r5, pc}
   19c2e:	2401      	movs	r4, #1
   19c30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   19c34:	9400      	str	r4, [sp, #0]
   19c36:	f001 ff27 	bl	1ba88 <__kernel_sin>
   19c3a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   19c3e:	e7d9      	b.n	19bf4 <sin+0x1c>
   19c40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   19c44:	f001 f9b4 	bl	1afb0 <__kernel_cos>
   19c48:	e7d4      	b.n	19bf4 <sin+0x1c>
   19c4a:	2401      	movs	r4, #1
   19c4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   19c50:	9400      	str	r4, [sp, #0]
   19c52:	f001 ff19 	bl	1ba88 <__kernel_sin>
   19c56:	e7cd      	b.n	19bf4 <sin+0x1c>
   19c58:	3fe921fb 	.word	0x3fe921fb
   19c5c:	7fefffff 	.word	0x7fefffff

00019c60 <pow>:
   19c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c64:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 19f58 <pow+0x2f8>
   19c68:	b08d      	sub	sp, #52	; 0x34
   19c6a:	4606      	mov	r6, r0
   19c6c:	460f      	mov	r7, r1
   19c6e:	4614      	mov	r4, r2
   19c70:	461d      	mov	r5, r3
   19c72:	f000 f975 	bl	19f60 <__ieee754_pow>
   19c76:	f999 8000 	ldrsb.w	r8, [r9]
   19c7a:	f1b8 3fff 	cmp.w	r8, #4294967295
   19c7e:	e9cd 0100 	strd	r0, r1, [sp]
   19c82:	d036      	beq.n	19cf2 <pow+0x92>
   19c84:	4622      	mov	r2, r4
   19c86:	462b      	mov	r3, r5
   19c88:	4620      	mov	r0, r4
   19c8a:	4629      	mov	r1, r5
   19c8c:	f002 fd28 	bl	1c6e0 <__aeabi_dcmpun>
   19c90:	4683      	mov	fp, r0
   19c92:	bb70      	cbnz	r0, 19cf2 <pow+0x92>
   19c94:	4632      	mov	r2, r6
   19c96:	463b      	mov	r3, r7
   19c98:	4630      	mov	r0, r6
   19c9a:	4639      	mov	r1, r7
   19c9c:	f002 fd20 	bl	1c6e0 <__aeabi_dcmpun>
   19ca0:	2200      	movs	r2, #0
   19ca2:	4682      	mov	sl, r0
   19ca4:	2300      	movs	r3, #0
   19ca6:	2800      	cmp	r0, #0
   19ca8:	f040 80a0 	bne.w	19dec <pow+0x18c>
   19cac:	4630      	mov	r0, r6
   19cae:	4639      	mov	r1, r7
   19cb0:	f002 fce4 	bl	1c67c <__aeabi_dcmpeq>
   19cb4:	b310      	cbz	r0, 19cfc <pow+0x9c>
   19cb6:	2200      	movs	r2, #0
   19cb8:	2300      	movs	r3, #0
   19cba:	4620      	mov	r0, r4
   19cbc:	4629      	mov	r1, r5
   19cbe:	f002 fcdd 	bl	1c67c <__aeabi_dcmpeq>
   19cc2:	4683      	mov	fp, r0
   19cc4:	2800      	cmp	r0, #0
   19cc6:	d06a      	beq.n	19d9e <pow+0x13e>
   19cc8:	2201      	movs	r2, #1
   19cca:	4b9c      	ldr	r3, [pc, #624]	; (19f3c <pow+0x2dc>)
   19ccc:	9202      	str	r2, [sp, #8]
   19cce:	2100      	movs	r1, #0
   19cd0:	2200      	movs	r2, #0
   19cd2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   19cd6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19cda:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19cde:	e9cd 1208 	strd	r1, r2, [sp, #32]
   19ce2:	9303      	str	r3, [sp, #12]
   19ce4:	f1b8 0f00 	cmp.w	r8, #0
   19ce8:	d045      	beq.n	19d76 <pow+0x116>
   19cea:	4c95      	ldr	r4, [pc, #596]	; (19f40 <pow+0x2e0>)
   19cec:	2300      	movs	r3, #0
   19cee:	e9cd 3400 	strd	r3, r4, [sp]
   19cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
   19cf6:	b00d      	add	sp, #52	; 0x34
   19cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
   19d00:	f001 ff7c 	bl	1bbfc <finite>
   19d04:	4680      	mov	r8, r0
   19d06:	2800      	cmp	r0, #0
   19d08:	f000 808b 	beq.w	19e22 <pow+0x1c2>
   19d0c:	f04f 0a00 	mov.w	sl, #0
   19d10:	f04f 0b00 	mov.w	fp, #0
   19d14:	4652      	mov	r2, sl
   19d16:	465b      	mov	r3, fp
   19d18:	e9dd 0100 	ldrd	r0, r1, [sp]
   19d1c:	f002 fcae 	bl	1c67c <__aeabi_dcmpeq>
   19d20:	2800      	cmp	r0, #0
   19d22:	d0e6      	beq.n	19cf2 <pow+0x92>
   19d24:	4630      	mov	r0, r6
   19d26:	4639      	mov	r1, r7
   19d28:	f001 ff68 	bl	1bbfc <finite>
   19d2c:	2800      	cmp	r0, #0
   19d2e:	d0e0      	beq.n	19cf2 <pow+0x92>
   19d30:	4620      	mov	r0, r4
   19d32:	4629      	mov	r1, r5
   19d34:	f001 ff62 	bl	1bbfc <finite>
   19d38:	2800      	cmp	r0, #0
   19d3a:	d0da      	beq.n	19cf2 <pow+0x92>
   19d3c:	f999 3000 	ldrsb.w	r3, [r9]
   19d40:	4a7e      	ldr	r2, [pc, #504]	; (19f3c <pow+0x2dc>)
   19d42:	9203      	str	r2, [sp, #12]
   19d44:	2104      	movs	r1, #4
   19d46:	2200      	movs	r2, #0
   19d48:	2b02      	cmp	r3, #2
   19d4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19d4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19d52:	e9cd ab08 	strd	sl, fp, [sp, #32]
   19d56:	9102      	str	r1, [sp, #8]
   19d58:	920a      	str	r2, [sp, #40]	; 0x28
   19d5a:	d003      	beq.n	19d64 <pow+0x104>
   19d5c:	a802      	add	r0, sp, #8
   19d5e:	f001 ff53 	bl	1bc08 <matherr>
   19d62:	b968      	cbnz	r0, 19d80 <pow+0x120>
   19d64:	f003 f9aa 	bl	1d0bc <__errno>
   19d68:	2322      	movs	r3, #34	; 0x22
   19d6a:	6003      	str	r3, [r0, #0]
   19d6c:	e008      	b.n	19d80 <pow+0x120>
   19d6e:	2300      	movs	r3, #0
   19d70:	2400      	movs	r4, #0
   19d72:	e9cd 3408 	strd	r3, r4, [sp, #32]
   19d76:	a802      	add	r0, sp, #8
   19d78:	f001 ff46 	bl	1bc08 <matherr>
   19d7c:	2800      	cmp	r0, #0
   19d7e:	d030      	beq.n	19de2 <pow+0x182>
   19d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19d82:	b11b      	cbz	r3, 19d8c <pow+0x12c>
   19d84:	f003 f99a 	bl	1d0bc <__errno>
   19d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19d8a:	6003      	str	r3, [r0, #0]
   19d8c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   19d90:	e9cd 3400 	strd	r3, r4, [sp]
   19d94:	e9dd 0100 	ldrd	r0, r1, [sp]
   19d98:	b00d      	add	sp, #52	; 0x34
   19d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d9e:	4620      	mov	r0, r4
   19da0:	4629      	mov	r1, r5
   19da2:	f001 ff2b 	bl	1bbfc <finite>
   19da6:	2800      	cmp	r0, #0
   19da8:	d0a3      	beq.n	19cf2 <pow+0x92>
   19daa:	2200      	movs	r2, #0
   19dac:	2300      	movs	r3, #0
   19dae:	4620      	mov	r0, r4
   19db0:	4629      	mov	r1, r5
   19db2:	f002 fc6d 	bl	1c690 <__aeabi_dcmplt>
   19db6:	2800      	cmp	r0, #0
   19db8:	d09b      	beq.n	19cf2 <pow+0x92>
   19dba:	f999 3000 	ldrsb.w	r3, [r9]
   19dbe:	4a5f      	ldr	r2, [pc, #380]	; (19f3c <pow+0x2dc>)
   19dc0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   19dc4:	2101      	movs	r1, #1
   19dc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19dca:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19dce:	9102      	str	r1, [sp, #8]
   19dd0:	9203      	str	r2, [sp, #12]
   19dd2:	2b00      	cmp	r3, #0
   19dd4:	d0cb      	beq.n	19d6e <pow+0x10e>
   19dd6:	495b      	ldr	r1, [pc, #364]	; (19f44 <pow+0x2e4>)
   19dd8:	2000      	movs	r0, #0
   19dda:	2b02      	cmp	r3, #2
   19ddc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   19de0:	d1c9      	bne.n	19d76 <pow+0x116>
   19de2:	f003 f96b 	bl	1d0bc <__errno>
   19de6:	2321      	movs	r3, #33	; 0x21
   19de8:	6003      	str	r3, [r0, #0]
   19dea:	e7c9      	b.n	19d80 <pow+0x120>
   19dec:	4620      	mov	r0, r4
   19dee:	4629      	mov	r1, r5
   19df0:	f002 fc44 	bl	1c67c <__aeabi_dcmpeq>
   19df4:	2800      	cmp	r0, #0
   19df6:	f43f af7c 	beq.w	19cf2 <pow+0x92>
   19dfa:	4b51      	ldr	r3, [pc, #324]	; (19f40 <pow+0x2e0>)
   19dfc:	494f      	ldr	r1, [pc, #316]	; (19f3c <pow+0x2dc>)
   19dfe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   19e02:	2001      	movs	r0, #1
   19e04:	2200      	movs	r2, #0
   19e06:	f1b8 0f02 	cmp.w	r8, #2
   19e0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19e0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19e12:	9002      	str	r0, [sp, #8]
   19e14:	9103      	str	r1, [sp, #12]
   19e16:	e9cd 2308 	strd	r2, r3, [sp, #32]
   19e1a:	d1ac      	bne.n	19d76 <pow+0x116>
   19e1c:	e9cd 2300 	strd	r2, r3, [sp]
   19e20:	e767      	b.n	19cf2 <pow+0x92>
   19e22:	4630      	mov	r0, r6
   19e24:	4639      	mov	r1, r7
   19e26:	f001 fee9 	bl	1bbfc <finite>
   19e2a:	2800      	cmp	r0, #0
   19e2c:	f43f af6e 	beq.w	19d0c <pow+0xac>
   19e30:	4620      	mov	r0, r4
   19e32:	4629      	mov	r1, r5
   19e34:	f001 fee2 	bl	1bbfc <finite>
   19e38:	2800      	cmp	r0, #0
   19e3a:	f43f af67 	beq.w	19d0c <pow+0xac>
   19e3e:	e9dd 2300 	ldrd	r2, r3, [sp]
   19e42:	4610      	mov	r0, r2
   19e44:	4619      	mov	r1, r3
   19e46:	f002 fc4b 	bl	1c6e0 <__aeabi_dcmpun>
   19e4a:	2800      	cmp	r0, #0
   19e4c:	d158      	bne.n	19f00 <pow+0x2a0>
   19e4e:	2303      	movs	r3, #3
   19e50:	f999 8000 	ldrsb.w	r8, [r9]
   19e54:	9302      	str	r3, [sp, #8]
   19e56:	4b39      	ldr	r3, [pc, #228]	; (19f3c <pow+0x2dc>)
   19e58:	900a      	str	r0, [sp, #40]	; 0x28
   19e5a:	9303      	str	r3, [sp, #12]
   19e5c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19e60:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19e64:	2200      	movs	r2, #0
   19e66:	2300      	movs	r3, #0
   19e68:	4630      	mov	r0, r6
   19e6a:	4639      	mov	r1, r7
   19e6c:	f1b8 0f00 	cmp.w	r8, #0
   19e70:	d126      	bne.n	19ec0 <pow+0x260>
   19e72:	4f35      	ldr	r7, [pc, #212]	; (19f48 <pow+0x2e8>)
   19e74:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   19e78:	e9cd 6708 	strd	r6, r7, [sp, #32]
   19e7c:	f002 fc08 	bl	1c690 <__aeabi_dcmplt>
   19e80:	2800      	cmp	r0, #0
   19e82:	f43f af6b 	beq.w	19d5c <pow+0xfc>
   19e86:	2200      	movs	r2, #0
   19e88:	4b30      	ldr	r3, [pc, #192]	; (19f4c <pow+0x2ec>)
   19e8a:	4620      	mov	r0, r4
   19e8c:	4629      	mov	r1, r5
   19e8e:	f002 f98d 	bl	1c1ac <__aeabi_dmul>
   19e92:	4604      	mov	r4, r0
   19e94:	460d      	mov	r5, r1
   19e96:	f001 febf 	bl	1bc18 <rint>
   19e9a:	4602      	mov	r2, r0
   19e9c:	460b      	mov	r3, r1
   19e9e:	4620      	mov	r0, r4
   19ea0:	4629      	mov	r1, r5
   19ea2:	f002 fbeb 	bl	1c67c <__aeabi_dcmpeq>
   19ea6:	bb40      	cbnz	r0, 19efa <pow+0x29a>
   19ea8:	4b29      	ldr	r3, [pc, #164]	; (19f50 <pow+0x2f0>)
   19eaa:	f999 8000 	ldrsb.w	r8, [r9]
   19eae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   19eb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
   19eb6:	f1b8 0f02 	cmp.w	r8, #2
   19eba:	f47f af4f 	bne.w	19d5c <pow+0xfc>
   19ebe:	e751      	b.n	19d64 <pow+0x104>
   19ec0:	4f24      	ldr	r7, [pc, #144]	; (19f54 <pow+0x2f4>)
   19ec2:	2600      	movs	r6, #0
   19ec4:	e9cd 6708 	strd	r6, r7, [sp, #32]
   19ec8:	f002 fbe2 	bl	1c690 <__aeabi_dcmplt>
   19ecc:	2800      	cmp	r0, #0
   19ece:	d0f2      	beq.n	19eb6 <pow+0x256>
   19ed0:	2200      	movs	r2, #0
   19ed2:	4b1e      	ldr	r3, [pc, #120]	; (19f4c <pow+0x2ec>)
   19ed4:	4620      	mov	r0, r4
   19ed6:	4629      	mov	r1, r5
   19ed8:	f002 f968 	bl	1c1ac <__aeabi_dmul>
   19edc:	4604      	mov	r4, r0
   19ede:	460d      	mov	r5, r1
   19ee0:	f001 fe9a 	bl	1bc18 <rint>
   19ee4:	4602      	mov	r2, r0
   19ee6:	460b      	mov	r3, r1
   19ee8:	4620      	mov	r0, r4
   19eea:	4629      	mov	r1, r5
   19eec:	f002 fbc6 	bl	1c67c <__aeabi_dcmpeq>
   19ef0:	b918      	cbnz	r0, 19efa <pow+0x29a>
   19ef2:	4b14      	ldr	r3, [pc, #80]	; (19f44 <pow+0x2e4>)
   19ef4:	2200      	movs	r2, #0
   19ef6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   19efa:	f999 8000 	ldrsb.w	r8, [r9]
   19efe:	e7da      	b.n	19eb6 <pow+0x256>
   19f00:	f999 9000 	ldrsb.w	r9, [r9]
   19f04:	4b0d      	ldr	r3, [pc, #52]	; (19f3c <pow+0x2dc>)
   19f06:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   19f0a:	2201      	movs	r2, #1
   19f0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19f10:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19f14:	9202      	str	r2, [sp, #8]
   19f16:	9303      	str	r3, [sp, #12]
   19f18:	f1b9 0f00 	cmp.w	r9, #0
   19f1c:	f43f af27 	beq.w	19d6e <pow+0x10e>
   19f20:	2200      	movs	r2, #0
   19f22:	2300      	movs	r3, #0
   19f24:	4610      	mov	r0, r2
   19f26:	4619      	mov	r1, r3
   19f28:	f002 fa6a 	bl	1c400 <__aeabi_ddiv>
   19f2c:	f1b9 0f02 	cmp.w	r9, #2
   19f30:	e9cd 0108 	strd	r0, r1, [sp, #32]
   19f34:	f43f af55 	beq.w	19de2 <pow+0x182>
   19f38:	e71d      	b.n	19d76 <pow+0x116>
   19f3a:	bf00      	nop
   19f3c:	00023304 	.word	0x00023304
   19f40:	3ff00000 	.word	0x3ff00000
   19f44:	fff00000 	.word	0xfff00000
   19f48:	47efffff 	.word	0x47efffff
   19f4c:	3fe00000 	.word	0x3fe00000
   19f50:	c7efffff 	.word	0xc7efffff
   19f54:	7ff00000 	.word	0x7ff00000
   19f58:	20000247 	.word	0x20000247
   19f5c:	00000000 	.word	0x00000000

00019f60 <__ieee754_pow>:
   19f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f64:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   19f68:	ea57 0402 	orrs.w	r4, r7, r2
   19f6c:	b093      	sub	sp, #76	; 0x4c
   19f6e:	d037      	beq.n	19fe0 <__ieee754_pow+0x80>
   19f70:	4c67      	ldr	r4, [pc, #412]	; (1a110 <__ieee754_pow+0x1b0>)
   19f72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   19f76:	42a6      	cmp	r6, r4
   19f78:	4683      	mov	fp, r0
   19f7a:	460d      	mov	r5, r1
   19f7c:	dc29      	bgt.n	19fd2 <__ieee754_pow+0x72>
   19f7e:	469a      	mov	sl, r3
   19f80:	4696      	mov	lr, r2
   19f82:	d025      	beq.n	19fd0 <__ieee754_pow+0x70>
   19f84:	42a7      	cmp	r7, r4
   19f86:	dc24      	bgt.n	19fd2 <__ieee754_pow+0x72>
   19f88:	4c61      	ldr	r4, [pc, #388]	; (1a110 <__ieee754_pow+0x1b0>)
   19f8a:	42a7      	cmp	r7, r4
   19f8c:	d079      	beq.n	1a082 <__ieee754_pow+0x122>
   19f8e:	2d00      	cmp	r5, #0
   19f90:	4689      	mov	r9, r1
   19f92:	4680      	mov	r8, r0
   19f94:	e9cd 2300 	strd	r2, r3, [sp]
   19f98:	db77      	blt.n	1a08a <__ieee754_pow+0x12a>
   19f9a:	2400      	movs	r4, #0
   19f9c:	f1be 0f00 	cmp.w	lr, #0
   19fa0:	d12c      	bne.n	19ffc <__ieee754_pow+0x9c>
   19fa2:	4b5b      	ldr	r3, [pc, #364]	; (1a110 <__ieee754_pow+0x1b0>)
   19fa4:	429f      	cmp	r7, r3
   19fa6:	f000 808b 	beq.w	1a0c0 <__ieee754_pow+0x160>
   19faa:	4b5a      	ldr	r3, [pc, #360]	; (1a114 <__ieee754_pow+0x1b4>)
   19fac:	429f      	cmp	r7, r3
   19fae:	d061      	beq.n	1a074 <__ieee754_pow+0x114>
   19fb0:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   19fb4:	f000 83ba 	beq.w	1a72c <__ieee754_pow+0x7cc>
   19fb8:	4b57      	ldr	r3, [pc, #348]	; (1a118 <__ieee754_pow+0x1b8>)
   19fba:	459a      	cmp	sl, r3
   19fbc:	d11e      	bne.n	19ffc <__ieee754_pow+0x9c>
   19fbe:	2d00      	cmp	r5, #0
   19fc0:	db1c      	blt.n	19ffc <__ieee754_pow+0x9c>
   19fc2:	4640      	mov	r0, r8
   19fc4:	4649      	mov	r1, r9
   19fc6:	b013      	add	sp, #76	; 0x4c
   19fc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fcc:	f000 bf32 	b.w	1ae34 <__ieee754_sqrt>
   19fd0:	b158      	cbz	r0, 19fea <__ieee754_pow+0x8a>
   19fd2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   19fd6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   19fda:	ea56 030b 	orrs.w	r3, r6, fp
   19fde:	d106      	bne.n	19fee <__ieee754_pow+0x8e>
   19fe0:	494c      	ldr	r1, [pc, #304]	; (1a114 <__ieee754_pow+0x1b4>)
   19fe2:	2000      	movs	r0, #0
   19fe4:	b013      	add	sp, #76	; 0x4c
   19fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fea:	42b7      	cmp	r7, r6
   19fec:	ddcc      	ble.n	19f88 <__ieee754_pow+0x28>
   19fee:	484b      	ldr	r0, [pc, #300]	; (1a11c <__ieee754_pow+0x1bc>)
   19ff0:	b013      	add	sp, #76	; 0x4c
   19ff2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ff6:	f001 be09 	b.w	1bc0c <nan>
   19ffa:	2400      	movs	r4, #0
   19ffc:	4640      	mov	r0, r8
   19ffe:	4649      	mov	r1, r9
   1a000:	f001 fdf8 	bl	1bbf4 <fabs>
   1a004:	f1bb 0f00 	cmp.w	fp, #0
   1a008:	d119      	bne.n	1a03e <__ieee754_pow+0xde>
   1a00a:	b126      	cbz	r6, 1a016 <__ieee754_pow+0xb6>
   1a00c:	4b41      	ldr	r3, [pc, #260]	; (1a114 <__ieee754_pow+0x1b4>)
   1a00e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   1a012:	429a      	cmp	r2, r3
   1a014:	d113      	bne.n	1a03e <__ieee754_pow+0xde>
   1a016:	f1ba 0f00 	cmp.w	sl, #0
   1a01a:	f2c0 83bc 	blt.w	1a796 <__ieee754_pow+0x836>
   1a01e:	2d00      	cmp	r5, #0
   1a020:	dae0      	bge.n	19fe4 <__ieee754_pow+0x84>
   1a022:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   1a026:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   1a02a:	ea56 0304 	orrs.w	r3, r6, r4
   1a02e:	f000 848f 	beq.w	1a950 <__ieee754_pow+0x9f0>
   1a032:	2c01      	cmp	r4, #1
   1a034:	d1d6      	bne.n	19fe4 <__ieee754_pow+0x84>
   1a036:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1a03a:	4619      	mov	r1, r3
   1a03c:	e7d2      	b.n	19fe4 <__ieee754_pow+0x84>
   1a03e:	0fed      	lsrs	r5, r5, #31
   1a040:	3d01      	subs	r5, #1
   1a042:	ea54 0305 	orrs.w	r3, r4, r5
   1a046:	d04e      	beq.n	1a0e6 <__ieee754_pow+0x186>
   1a048:	4b35      	ldr	r3, [pc, #212]	; (1a120 <__ieee754_pow+0x1c0>)
   1a04a:	429f      	cmp	r7, r3
   1a04c:	dd6e      	ble.n	1a12c <__ieee754_pow+0x1cc>
   1a04e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   1a052:	429f      	cmp	r7, r3
   1a054:	f340 83e8 	ble.w	1a828 <__ieee754_pow+0x8c8>
   1a058:	4b32      	ldr	r3, [pc, #200]	; (1a124 <__ieee754_pow+0x1c4>)
   1a05a:	429e      	cmp	r6, r3
   1a05c:	dd4e      	ble.n	1a0fc <__ieee754_pow+0x19c>
   1a05e:	f1ba 0f00 	cmp.w	sl, #0
   1a062:	dd4e      	ble.n	1a102 <__ieee754_pow+0x1a2>
   1a064:	a328      	add	r3, pc, #160	; (adr r3, 1a108 <__ieee754_pow+0x1a8>)
   1a066:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a06a:	4610      	mov	r0, r2
   1a06c:	4619      	mov	r1, r3
   1a06e:	f002 f89d 	bl	1c1ac <__aeabi_dmul>
   1a072:	e7b7      	b.n	19fe4 <__ieee754_pow+0x84>
   1a074:	f1ba 0f00 	cmp.w	sl, #0
   1a078:	f2c0 843c 	blt.w	1a8f4 <__ieee754_pow+0x994>
   1a07c:	4640      	mov	r0, r8
   1a07e:	4649      	mov	r1, r9
   1a080:	e7b0      	b.n	19fe4 <__ieee754_pow+0x84>
   1a082:	f1be 0f00 	cmp.w	lr, #0
   1a086:	d082      	beq.n	19f8e <__ieee754_pow+0x2e>
   1a088:	e7a3      	b.n	19fd2 <__ieee754_pow+0x72>
   1a08a:	4b27      	ldr	r3, [pc, #156]	; (1a128 <__ieee754_pow+0x1c8>)
   1a08c:	429f      	cmp	r7, r3
   1a08e:	dc28      	bgt.n	1a0e2 <__ieee754_pow+0x182>
   1a090:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   1a094:	429f      	cmp	r7, r3
   1a096:	dd80      	ble.n	19f9a <__ieee754_pow+0x3a>
   1a098:	153b      	asrs	r3, r7, #20
   1a09a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1a09e:	2b14      	cmp	r3, #20
   1a0a0:	f340 843e 	ble.w	1a920 <__ieee754_pow+0x9c0>
   1a0a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   1a0a8:	fa2e f203 	lsr.w	r2, lr, r3
   1a0ac:	fa02 f303 	lsl.w	r3, r2, r3
   1a0b0:	459e      	cmp	lr, r3
   1a0b2:	f47f af72 	bne.w	19f9a <__ieee754_pow+0x3a>
   1a0b6:	f002 0201 	and.w	r2, r2, #1
   1a0ba:	f1c2 0402 	rsb	r4, r2, #2
   1a0be:	e76d      	b.n	19f9c <__ieee754_pow+0x3c>
   1a0c0:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   1a0c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1a0c8:	ea53 030b 	orrs.w	r3, r3, fp
   1a0cc:	d088      	beq.n	19fe0 <__ieee754_pow+0x80>
   1a0ce:	4b15      	ldr	r3, [pc, #84]	; (1a124 <__ieee754_pow+0x1c4>)
   1a0d0:	429e      	cmp	r6, r3
   1a0d2:	f340 8332 	ble.w	1a73a <__ieee754_pow+0x7da>
   1a0d6:	f1ba 0f00 	cmp.w	sl, #0
   1a0da:	db12      	blt.n	1a102 <__ieee754_pow+0x1a2>
   1a0dc:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a0e0:	e780      	b.n	19fe4 <__ieee754_pow+0x84>
   1a0e2:	2402      	movs	r4, #2
   1a0e4:	e75a      	b.n	19f9c <__ieee754_pow+0x3c>
   1a0e6:	4642      	mov	r2, r8
   1a0e8:	464b      	mov	r3, r9
   1a0ea:	4640      	mov	r0, r8
   1a0ec:	4649      	mov	r1, r9
   1a0ee:	f001 fea9 	bl	1be44 <__aeabi_dsub>
   1a0f2:	4602      	mov	r2, r0
   1a0f4:	460b      	mov	r3, r1
   1a0f6:	f002 f983 	bl	1c400 <__aeabi_ddiv>
   1a0fa:	e773      	b.n	19fe4 <__ieee754_pow+0x84>
   1a0fc:	f1ba 0f00 	cmp.w	sl, #0
   1a100:	dbb0      	blt.n	1a064 <__ieee754_pow+0x104>
   1a102:	2000      	movs	r0, #0
   1a104:	2100      	movs	r1, #0
   1a106:	e76d      	b.n	19fe4 <__ieee754_pow+0x84>
   1a108:	8800759c 	.word	0x8800759c
   1a10c:	7e37e43c 	.word	0x7e37e43c
   1a110:	7ff00000 	.word	0x7ff00000
   1a114:	3ff00000 	.word	0x3ff00000
   1a118:	3fe00000 	.word	0x3fe00000
   1a11c:	00023614 	.word	0x00023614
   1a120:	41e00000 	.word	0x41e00000
   1a124:	3fefffff 	.word	0x3fefffff
   1a128:	433fffff 	.word	0x433fffff
   1a12c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   1a130:	f04f 0200 	mov.w	r2, #0
   1a134:	da05      	bge.n	1a142 <__ieee754_pow+0x1e2>
   1a136:	4bd4      	ldr	r3, [pc, #848]	; (1a488 <__ieee754_pow+0x528>)
   1a138:	f002 f838 	bl	1c1ac <__aeabi_dmul>
   1a13c:	f06f 0234 	mvn.w	r2, #52	; 0x34
   1a140:	460e      	mov	r6, r1
   1a142:	1533      	asrs	r3, r6, #20
   1a144:	4fd1      	ldr	r7, [pc, #836]	; (1a48c <__ieee754_pow+0x52c>)
   1a146:	f3c6 0613 	ubfx	r6, r6, #0, #20
   1a14a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1a14e:	4413      	add	r3, r2
   1a150:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   1a154:	42be      	cmp	r6, r7
   1a156:	461a      	mov	r2, r3
   1a158:	930d      	str	r3, [sp, #52]	; 0x34
   1a15a:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   1a15e:	f340 8321 	ble.w	1a7a4 <__ieee754_pow+0x844>
   1a162:	4bcb      	ldr	r3, [pc, #812]	; (1a490 <__ieee754_pow+0x530>)
   1a164:	429e      	cmp	r6, r3
   1a166:	f340 83fd 	ble.w	1a964 <__ieee754_pow+0xa04>
   1a16a:	4613      	mov	r3, r2
   1a16c:	3301      	adds	r3, #1
   1a16e:	930d      	str	r3, [sp, #52]	; 0x34
   1a170:	4bc8      	ldr	r3, [pc, #800]	; (1a494 <__ieee754_pow+0x534>)
   1a172:	2200      	movs	r2, #0
   1a174:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a178:	2700      	movs	r7, #0
   1a17a:	2600      	movs	r6, #0
   1a17c:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1a180:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   1a184:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   1a188:	2700      	movs	r7, #0
   1a18a:	4602      	mov	r2, r0
   1a18c:	4653      	mov	r3, sl
   1a18e:	4651      	mov	r1, sl
   1a190:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1a194:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a198:	f001 fe54 	bl	1be44 <__aeabi_dsub>
   1a19c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a1a0:	4680      	mov	r8, r0
   1a1a2:	4689      	mov	r9, r1
   1a1a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1a1a8:	f001 fe4e 	bl	1be48 <__adddf3>
   1a1ac:	4602      	mov	r2, r0
   1a1ae:	460b      	mov	r3, r1
   1a1b0:	2000      	movs	r0, #0
   1a1b2:	49b8      	ldr	r1, [pc, #736]	; (1a494 <__ieee754_pow+0x534>)
   1a1b4:	f002 f924 	bl	1c400 <__aeabi_ddiv>
   1a1b8:	460a      	mov	r2, r1
   1a1ba:	4601      	mov	r1, r0
   1a1bc:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   1a1c0:	4613      	mov	r3, r2
   1a1c2:	4649      	mov	r1, r9
   1a1c4:	4602      	mov	r2, r0
   1a1c6:	4640      	mov	r0, r8
   1a1c8:	f001 fff0 	bl	1c1ac <__aeabi_dmul>
   1a1cc:	ea4f 036a 	mov.w	r3, sl, asr #1
   1a1d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1a1d4:	468c      	mov	ip, r1
   1a1d6:	4683      	mov	fp, r0
   1a1d8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   1a1dc:	e9cd bc04 	strd	fp, ip, [sp, #16]
   1a1e0:	46da      	mov	sl, fp
   1a1e2:	468b      	mov	fp, r1
   1a1e4:	19d9      	adds	r1, r3, r7
   1a1e6:	2300      	movs	r3, #0
   1a1e8:	e9cd ab02 	strd	sl, fp, [sp, #8]
   1a1ec:	9302      	str	r3, [sp, #8]
   1a1ee:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1a1f2:	2000      	movs	r0, #0
   1a1f4:	4606      	mov	r6, r0
   1a1f6:	460f      	mov	r7, r1
   1a1f8:	4602      	mov	r2, r0
   1a1fa:	460b      	mov	r3, r1
   1a1fc:	4650      	mov	r0, sl
   1a1fe:	4659      	mov	r1, fp
   1a200:	f001 ffd4 	bl	1c1ac <__aeabi_dmul>
   1a204:	4602      	mov	r2, r0
   1a206:	460b      	mov	r3, r1
   1a208:	4640      	mov	r0, r8
   1a20a:	4649      	mov	r1, r9
   1a20c:	f001 fe1a 	bl	1be44 <__aeabi_dsub>
   1a210:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a214:	4680      	mov	r8, r0
   1a216:	4689      	mov	r9, r1
   1a218:	4630      	mov	r0, r6
   1a21a:	4639      	mov	r1, r7
   1a21c:	f001 fe12 	bl	1be44 <__aeabi_dsub>
   1a220:	4602      	mov	r2, r0
   1a222:	460b      	mov	r3, r1
   1a224:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1a228:	f001 fe0c 	bl	1be44 <__aeabi_dsub>
   1a22c:	4652      	mov	r2, sl
   1a22e:	465b      	mov	r3, fp
   1a230:	f001 ffbc 	bl	1c1ac <__aeabi_dmul>
   1a234:	4602      	mov	r2, r0
   1a236:	460b      	mov	r3, r1
   1a238:	4640      	mov	r0, r8
   1a23a:	4649      	mov	r1, r9
   1a23c:	f001 fe02 	bl	1be44 <__aeabi_dsub>
   1a240:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1a244:	f001 ffb2 	bl	1c1ac <__aeabi_dmul>
   1a248:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   1a24c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1a250:	4632      	mov	r2, r6
   1a252:	463b      	mov	r3, r7
   1a254:	4630      	mov	r0, r6
   1a256:	4639      	mov	r1, r7
   1a258:	f001 ffa8 	bl	1c1ac <__aeabi_dmul>
   1a25c:	a378      	add	r3, pc, #480	; (adr r3, 1a440 <__ieee754_pow+0x4e0>)
   1a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a262:	4606      	mov	r6, r0
   1a264:	460f      	mov	r7, r1
   1a266:	f001 ffa1 	bl	1c1ac <__aeabi_dmul>
   1a26a:	a377      	add	r3, pc, #476	; (adr r3, 1a448 <__ieee754_pow+0x4e8>)
   1a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a270:	f001 fdea 	bl	1be48 <__adddf3>
   1a274:	4632      	mov	r2, r6
   1a276:	463b      	mov	r3, r7
   1a278:	f001 ff98 	bl	1c1ac <__aeabi_dmul>
   1a27c:	a374      	add	r3, pc, #464	; (adr r3, 1a450 <__ieee754_pow+0x4f0>)
   1a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a282:	f001 fde1 	bl	1be48 <__adddf3>
   1a286:	4632      	mov	r2, r6
   1a288:	463b      	mov	r3, r7
   1a28a:	f001 ff8f 	bl	1c1ac <__aeabi_dmul>
   1a28e:	a372      	add	r3, pc, #456	; (adr r3, 1a458 <__ieee754_pow+0x4f8>)
   1a290:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a294:	f001 fdd8 	bl	1be48 <__adddf3>
   1a298:	4632      	mov	r2, r6
   1a29a:	463b      	mov	r3, r7
   1a29c:	f001 ff86 	bl	1c1ac <__aeabi_dmul>
   1a2a0:	a36f      	add	r3, pc, #444	; (adr r3, 1a460 <__ieee754_pow+0x500>)
   1a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a2a6:	f001 fdcf 	bl	1be48 <__adddf3>
   1a2aa:	4632      	mov	r2, r6
   1a2ac:	463b      	mov	r3, r7
   1a2ae:	f001 ff7d 	bl	1c1ac <__aeabi_dmul>
   1a2b2:	a36d      	add	r3, pc, #436	; (adr r3, 1a468 <__ieee754_pow+0x508>)
   1a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a2b8:	f001 fdc6 	bl	1be48 <__adddf3>
   1a2bc:	4632      	mov	r2, r6
   1a2be:	4680      	mov	r8, r0
   1a2c0:	4689      	mov	r9, r1
   1a2c2:	463b      	mov	r3, r7
   1a2c4:	4630      	mov	r0, r6
   1a2c6:	4639      	mov	r1, r7
   1a2c8:	f001 ff70 	bl	1c1ac <__aeabi_dmul>
   1a2cc:	4602      	mov	r2, r0
   1a2ce:	460b      	mov	r3, r1
   1a2d0:	4640      	mov	r0, r8
   1a2d2:	4649      	mov	r1, r9
   1a2d4:	f001 ff6a 	bl	1c1ac <__aeabi_dmul>
   1a2d8:	4652      	mov	r2, sl
   1a2da:	4606      	mov	r6, r0
   1a2dc:	460f      	mov	r7, r1
   1a2de:	465b      	mov	r3, fp
   1a2e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a2e4:	f001 fdb0 	bl	1be48 <__adddf3>
   1a2e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a2ec:	f001 ff5e 	bl	1c1ac <__aeabi_dmul>
   1a2f0:	4632      	mov	r2, r6
   1a2f2:	463b      	mov	r3, r7
   1a2f4:	f001 fda8 	bl	1be48 <__adddf3>
   1a2f8:	4652      	mov	r2, sl
   1a2fa:	4680      	mov	r8, r0
   1a2fc:	4689      	mov	r9, r1
   1a2fe:	465b      	mov	r3, fp
   1a300:	4650      	mov	r0, sl
   1a302:	4659      	mov	r1, fp
   1a304:	f001 ff52 	bl	1c1ac <__aeabi_dmul>
   1a308:	2200      	movs	r2, #0
   1a30a:	4b63      	ldr	r3, [pc, #396]	; (1a498 <__ieee754_pow+0x538>)
   1a30c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1a310:	f001 fd9a 	bl	1be48 <__adddf3>
   1a314:	4642      	mov	r2, r8
   1a316:	464b      	mov	r3, r9
   1a318:	f001 fd96 	bl	1be48 <__adddf3>
   1a31c:	9802      	ldr	r0, [sp, #8]
   1a31e:	460f      	mov	r7, r1
   1a320:	4606      	mov	r6, r0
   1a322:	4632      	mov	r2, r6
   1a324:	463b      	mov	r3, r7
   1a326:	4650      	mov	r0, sl
   1a328:	4659      	mov	r1, fp
   1a32a:	f001 ff3f 	bl	1c1ac <__aeabi_dmul>
   1a32e:	2200      	movs	r2, #0
   1a330:	4682      	mov	sl, r0
   1a332:	468b      	mov	fp, r1
   1a334:	4b58      	ldr	r3, [pc, #352]	; (1a498 <__ieee754_pow+0x538>)
   1a336:	4630      	mov	r0, r6
   1a338:	4639      	mov	r1, r7
   1a33a:	f001 fd83 	bl	1be44 <__aeabi_dsub>
   1a33e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1a342:	f001 fd7f 	bl	1be44 <__aeabi_dsub>
   1a346:	4602      	mov	r2, r0
   1a348:	460b      	mov	r3, r1
   1a34a:	4640      	mov	r0, r8
   1a34c:	4649      	mov	r1, r9
   1a34e:	f001 fd79 	bl	1be44 <__aeabi_dsub>
   1a352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a356:	f001 ff29 	bl	1c1ac <__aeabi_dmul>
   1a35a:	4632      	mov	r2, r6
   1a35c:	4680      	mov	r8, r0
   1a35e:	4689      	mov	r9, r1
   1a360:	463b      	mov	r3, r7
   1a362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1a366:	f001 ff21 	bl	1c1ac <__aeabi_dmul>
   1a36a:	4602      	mov	r2, r0
   1a36c:	460b      	mov	r3, r1
   1a36e:	4640      	mov	r0, r8
   1a370:	4649      	mov	r1, r9
   1a372:	f001 fd69 	bl	1be48 <__adddf3>
   1a376:	4680      	mov	r8, r0
   1a378:	4689      	mov	r9, r1
   1a37a:	4602      	mov	r2, r0
   1a37c:	460b      	mov	r3, r1
   1a37e:	4650      	mov	r0, sl
   1a380:	4659      	mov	r1, fp
   1a382:	e9cd ab04 	strd	sl, fp, [sp, #16]
   1a386:	f001 fd5f 	bl	1be48 <__adddf3>
   1a38a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1a38e:	a338      	add	r3, pc, #224	; (adr r3, 1a470 <__ieee754_pow+0x510>)
   1a390:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a394:	4650      	mov	r0, sl
   1a396:	460f      	mov	r7, r1
   1a398:	f001 ff08 	bl	1c1ac <__aeabi_dmul>
   1a39c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a3a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1a3a4:	4639      	mov	r1, r7
   1a3a6:	4650      	mov	r0, sl
   1a3a8:	f001 fd4c 	bl	1be44 <__aeabi_dsub>
   1a3ac:	4602      	mov	r2, r0
   1a3ae:	460b      	mov	r3, r1
   1a3b0:	4640      	mov	r0, r8
   1a3b2:	4649      	mov	r1, r9
   1a3b4:	f001 fd46 	bl	1be44 <__aeabi_dsub>
   1a3b8:	a32f      	add	r3, pc, #188	; (adr r3, 1a478 <__ieee754_pow+0x518>)
   1a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a3be:	f001 fef5 	bl	1c1ac <__aeabi_dmul>
   1a3c2:	a32f      	add	r3, pc, #188	; (adr r3, 1a480 <__ieee754_pow+0x520>)
   1a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a3c8:	4680      	mov	r8, r0
   1a3ca:	4689      	mov	r9, r1
   1a3cc:	4650      	mov	r0, sl
   1a3ce:	4639      	mov	r1, r7
   1a3d0:	f001 feec 	bl	1c1ac <__aeabi_dmul>
   1a3d4:	4602      	mov	r2, r0
   1a3d6:	460b      	mov	r3, r1
   1a3d8:	4640      	mov	r0, r8
   1a3da:	4649      	mov	r1, r9
   1a3dc:	f001 fd34 	bl	1be48 <__adddf3>
   1a3e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1a3e4:	f001 fd30 	bl	1be48 <__adddf3>
   1a3e8:	4680      	mov	r8, r0
   1a3ea:	980d      	ldr	r0, [sp, #52]	; 0x34
   1a3ec:	4689      	mov	r9, r1
   1a3ee:	f001 fe77 	bl	1c0e0 <__aeabi_i2d>
   1a3f2:	4642      	mov	r2, r8
   1a3f4:	4606      	mov	r6, r0
   1a3f6:	460f      	mov	r7, r1
   1a3f8:	464b      	mov	r3, r9
   1a3fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1a3fe:	f001 fd23 	bl	1be48 <__adddf3>
   1a402:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1a406:	f001 fd1f 	bl	1be48 <__adddf3>
   1a40a:	4632      	mov	r2, r6
   1a40c:	463b      	mov	r3, r7
   1a40e:	f001 fd1b 	bl	1be48 <__adddf3>
   1a412:	4632      	mov	r2, r6
   1a414:	463b      	mov	r3, r7
   1a416:	4650      	mov	r0, sl
   1a418:	468b      	mov	fp, r1
   1a41a:	f001 fd13 	bl	1be44 <__aeabi_dsub>
   1a41e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1a422:	f001 fd0f 	bl	1be44 <__aeabi_dsub>
   1a426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a42a:	f001 fd0b 	bl	1be44 <__aeabi_dsub>
   1a42e:	4602      	mov	r2, r0
   1a430:	460b      	mov	r3, r1
   1a432:	4640      	mov	r0, r8
   1a434:	4649      	mov	r1, r9
   1a436:	f001 fd05 	bl	1be44 <__aeabi_dsub>
   1a43a:	4680      	mov	r8, r0
   1a43c:	e02e      	b.n	1a49c <__ieee754_pow+0x53c>
   1a43e:	bf00      	nop
   1a440:	4a454eef 	.word	0x4a454eef
   1a444:	3fca7e28 	.word	0x3fca7e28
   1a448:	93c9db65 	.word	0x93c9db65
   1a44c:	3fcd864a 	.word	0x3fcd864a
   1a450:	a91d4101 	.word	0xa91d4101
   1a454:	3fd17460 	.word	0x3fd17460
   1a458:	518f264d 	.word	0x518f264d
   1a45c:	3fd55555 	.word	0x3fd55555
   1a460:	db6fabff 	.word	0xdb6fabff
   1a464:	3fdb6db6 	.word	0x3fdb6db6
   1a468:	33333303 	.word	0x33333303
   1a46c:	3fe33333 	.word	0x3fe33333
   1a470:	e0000000 	.word	0xe0000000
   1a474:	3feec709 	.word	0x3feec709
   1a478:	dc3a03fd 	.word	0xdc3a03fd
   1a47c:	3feec709 	.word	0x3feec709
   1a480:	145b01f5 	.word	0x145b01f5
   1a484:	be3e2fe0 	.word	0xbe3e2fe0
   1a488:	43400000 	.word	0x43400000
   1a48c:	0003988e 	.word	0x0003988e
   1a490:	000bb679 	.word	0x000bb679
   1a494:	3ff00000 	.word	0x3ff00000
   1a498:	40080000 	.word	0x40080000
   1a49c:	4689      	mov	r9, r1
   1a49e:	3c01      	subs	r4, #1
   1a4a0:	ea54 0305 	orrs.w	r3, r4, r5
   1a4a4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a4a8:	bf14      	ite	ne
   1a4aa:	4cd9      	ldrne	r4, [pc, #868]	; (1a810 <__ieee754_pow+0x8b0>)
   1a4ac:	4cd9      	ldreq	r4, [pc, #868]	; (1a814 <__ieee754_pow+0x8b4>)
   1a4ae:	2300      	movs	r3, #0
   1a4b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1a4b4:	4603      	mov	r3, r0
   1a4b6:	460c      	mov	r4, r1
   1a4b8:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1a4bc:	2300      	movs	r3, #0
   1a4be:	9302      	str	r3, [sp, #8]
   1a4c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   1a4c4:	4622      	mov	r2, r4
   1a4c6:	462b      	mov	r3, r5
   1a4c8:	f001 fcbc 	bl	1be44 <__aeabi_dsub>
   1a4cc:	4652      	mov	r2, sl
   1a4ce:	465b      	mov	r3, fp
   1a4d0:	f001 fe6c 	bl	1c1ac <__aeabi_dmul>
   1a4d4:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a4d8:	4606      	mov	r6, r0
   1a4da:	460f      	mov	r7, r1
   1a4dc:	4640      	mov	r0, r8
   1a4de:	4649      	mov	r1, r9
   1a4e0:	f001 fe64 	bl	1c1ac <__aeabi_dmul>
   1a4e4:	4602      	mov	r2, r0
   1a4e6:	460b      	mov	r3, r1
   1a4e8:	4630      	mov	r0, r6
   1a4ea:	4639      	mov	r1, r7
   1a4ec:	f001 fcac 	bl	1be48 <__adddf3>
   1a4f0:	4622      	mov	r2, r4
   1a4f2:	4680      	mov	r8, r0
   1a4f4:	4689      	mov	r9, r1
   1a4f6:	462b      	mov	r3, r5
   1a4f8:	4650      	mov	r0, sl
   1a4fa:	4659      	mov	r1, fp
   1a4fc:	e9cd 8900 	strd	r8, r9, [sp]
   1a500:	f001 fe54 	bl	1c1ac <__aeabi_dmul>
   1a504:	460b      	mov	r3, r1
   1a506:	4602      	mov	r2, r0
   1a508:	4606      	mov	r6, r0
   1a50a:	460f      	mov	r7, r1
   1a50c:	4640      	mov	r0, r8
   1a50e:	4649      	mov	r1, r9
   1a510:	f001 fc9a 	bl	1be48 <__adddf3>
   1a514:	4bc0      	ldr	r3, [pc, #768]	; (1a818 <__ieee754_pow+0x8b8>)
   1a516:	4299      	cmp	r1, r3
   1a518:	4604      	mov	r4, r0
   1a51a:	460d      	mov	r5, r1
   1a51c:	468a      	mov	sl, r1
   1a51e:	f340 8116 	ble.w	1a74e <__ieee754_pow+0x7ee>
   1a522:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   1a526:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   1a52a:	4303      	orrs	r3, r0
   1a52c:	f040 81ea 	bne.w	1a904 <__ieee754_pow+0x9a4>
   1a530:	a3a3      	add	r3, pc, #652	; (adr r3, 1a7c0 <__ieee754_pow+0x860>)
   1a532:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a536:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a53a:	f001 fc85 	bl	1be48 <__adddf3>
   1a53e:	4632      	mov	r2, r6
   1a540:	4680      	mov	r8, r0
   1a542:	4689      	mov	r9, r1
   1a544:	463b      	mov	r3, r7
   1a546:	4620      	mov	r0, r4
   1a548:	4629      	mov	r1, r5
   1a54a:	f001 fc7b 	bl	1be44 <__aeabi_dsub>
   1a54e:	4602      	mov	r2, r0
   1a550:	460b      	mov	r3, r1
   1a552:	4640      	mov	r0, r8
   1a554:	4649      	mov	r1, r9
   1a556:	f002 f8b9 	bl	1c6cc <__aeabi_dcmpgt>
   1a55a:	2800      	cmp	r0, #0
   1a55c:	f040 81d2 	bne.w	1a904 <__ieee754_pow+0x9a4>
   1a560:	46a8      	mov	r8, r5
   1a562:	ea4f 5328 	mov.w	r3, r8, asr #20
   1a566:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1a56a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1a56e:	fa42 f303 	asr.w	r3, r2, r3
   1a572:	4453      	add	r3, sl
   1a574:	f3c3 520a 	ubfx	r2, r3, #20, #11
   1a578:	4da8      	ldr	r5, [pc, #672]	; (1a81c <__ieee754_pow+0x8bc>)
   1a57a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   1a57e:	4115      	asrs	r5, r2
   1a580:	f3c3 0413 	ubfx	r4, r3, #0, #20
   1a584:	ea23 0105 	bic.w	r1, r3, r5
   1a588:	2000      	movs	r0, #0
   1a58a:	f1c2 0b14 	rsb	fp, r2, #20
   1a58e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   1a592:	f1ba 0f00 	cmp.w	sl, #0
   1a596:	4602      	mov	r2, r0
   1a598:	460b      	mov	r3, r1
   1a59a:	fa44 fb0b 	asr.w	fp, r4, fp
   1a59e:	4630      	mov	r0, r6
   1a5a0:	4639      	mov	r1, r7
   1a5a2:	bfb8      	it	lt
   1a5a4:	f1cb 0b00 	rsblt	fp, fp, #0
   1a5a8:	f001 fc4c 	bl	1be44 <__aeabi_dsub>
   1a5ac:	4602      	mov	r2, r0
   1a5ae:	460b      	mov	r3, r1
   1a5b0:	4606      	mov	r6, r0
   1a5b2:	460f      	mov	r7, r1
   1a5b4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a5b8:	f001 fc46 	bl	1be48 <__adddf3>
   1a5bc:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   1a5c0:	460d      	mov	r5, r1
   1a5c2:	2400      	movs	r4, #0
   1a5c4:	a380      	add	r3, pc, #512	; (adr r3, 1a7c8 <__ieee754_pow+0x868>)
   1a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a5ca:	4620      	mov	r0, r4
   1a5cc:	4629      	mov	r1, r5
   1a5ce:	f001 fded 	bl	1c1ac <__aeabi_dmul>
   1a5d2:	4632      	mov	r2, r6
   1a5d4:	4680      	mov	r8, r0
   1a5d6:	4689      	mov	r9, r1
   1a5d8:	463b      	mov	r3, r7
   1a5da:	4620      	mov	r0, r4
   1a5dc:	4629      	mov	r1, r5
   1a5de:	f001 fc31 	bl	1be44 <__aeabi_dsub>
   1a5e2:	4602      	mov	r2, r0
   1a5e4:	460b      	mov	r3, r1
   1a5e6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a5ea:	f001 fc2b 	bl	1be44 <__aeabi_dsub>
   1a5ee:	a378      	add	r3, pc, #480	; (adr r3, 1a7d0 <__ieee754_pow+0x870>)
   1a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a5f4:	f001 fdda 	bl	1c1ac <__aeabi_dmul>
   1a5f8:	a377      	add	r3, pc, #476	; (adr r3, 1a7d8 <__ieee754_pow+0x878>)
   1a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a5fe:	4606      	mov	r6, r0
   1a600:	460f      	mov	r7, r1
   1a602:	4620      	mov	r0, r4
   1a604:	4629      	mov	r1, r5
   1a606:	f001 fdd1 	bl	1c1ac <__aeabi_dmul>
   1a60a:	4602      	mov	r2, r0
   1a60c:	460b      	mov	r3, r1
   1a60e:	4630      	mov	r0, r6
   1a610:	4639      	mov	r1, r7
   1a612:	f001 fc19 	bl	1be48 <__adddf3>
   1a616:	4606      	mov	r6, r0
   1a618:	460f      	mov	r7, r1
   1a61a:	4602      	mov	r2, r0
   1a61c:	460b      	mov	r3, r1
   1a61e:	4640      	mov	r0, r8
   1a620:	4649      	mov	r1, r9
   1a622:	f001 fc11 	bl	1be48 <__adddf3>
   1a626:	4642      	mov	r2, r8
   1a628:	464b      	mov	r3, r9
   1a62a:	4604      	mov	r4, r0
   1a62c:	460d      	mov	r5, r1
   1a62e:	f001 fc09 	bl	1be44 <__aeabi_dsub>
   1a632:	4602      	mov	r2, r0
   1a634:	460b      	mov	r3, r1
   1a636:	4630      	mov	r0, r6
   1a638:	4639      	mov	r1, r7
   1a63a:	f001 fc03 	bl	1be44 <__aeabi_dsub>
   1a63e:	4622      	mov	r2, r4
   1a640:	4680      	mov	r8, r0
   1a642:	4689      	mov	r9, r1
   1a644:	462b      	mov	r3, r5
   1a646:	4620      	mov	r0, r4
   1a648:	4629      	mov	r1, r5
   1a64a:	f001 fdaf 	bl	1c1ac <__aeabi_dmul>
   1a64e:	a364      	add	r3, pc, #400	; (adr r3, 1a7e0 <__ieee754_pow+0x880>)
   1a650:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a654:	4606      	mov	r6, r0
   1a656:	460f      	mov	r7, r1
   1a658:	f001 fda8 	bl	1c1ac <__aeabi_dmul>
   1a65c:	a362      	add	r3, pc, #392	; (adr r3, 1a7e8 <__ieee754_pow+0x888>)
   1a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a662:	f001 fbef 	bl	1be44 <__aeabi_dsub>
   1a666:	4632      	mov	r2, r6
   1a668:	463b      	mov	r3, r7
   1a66a:	f001 fd9f 	bl	1c1ac <__aeabi_dmul>
   1a66e:	a360      	add	r3, pc, #384	; (adr r3, 1a7f0 <__ieee754_pow+0x890>)
   1a670:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a674:	f001 fbe8 	bl	1be48 <__adddf3>
   1a678:	4632      	mov	r2, r6
   1a67a:	463b      	mov	r3, r7
   1a67c:	f001 fd96 	bl	1c1ac <__aeabi_dmul>
   1a680:	a35d      	add	r3, pc, #372	; (adr r3, 1a7f8 <__ieee754_pow+0x898>)
   1a682:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a686:	f001 fbdd 	bl	1be44 <__aeabi_dsub>
   1a68a:	4632      	mov	r2, r6
   1a68c:	463b      	mov	r3, r7
   1a68e:	f001 fd8d 	bl	1c1ac <__aeabi_dmul>
   1a692:	a35b      	add	r3, pc, #364	; (adr r3, 1a800 <__ieee754_pow+0x8a0>)
   1a694:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a698:	f001 fbd6 	bl	1be48 <__adddf3>
   1a69c:	4632      	mov	r2, r6
   1a69e:	463b      	mov	r3, r7
   1a6a0:	f001 fd84 	bl	1c1ac <__aeabi_dmul>
   1a6a4:	4602      	mov	r2, r0
   1a6a6:	460b      	mov	r3, r1
   1a6a8:	4620      	mov	r0, r4
   1a6aa:	4629      	mov	r1, r5
   1a6ac:	f001 fbca 	bl	1be44 <__aeabi_dsub>
   1a6b0:	4606      	mov	r6, r0
   1a6b2:	460f      	mov	r7, r1
   1a6b4:	4602      	mov	r2, r0
   1a6b6:	460b      	mov	r3, r1
   1a6b8:	4620      	mov	r0, r4
   1a6ba:	4629      	mov	r1, r5
   1a6bc:	f001 fd76 	bl	1c1ac <__aeabi_dmul>
   1a6c0:	2200      	movs	r2, #0
   1a6c2:	e9cd 0100 	strd	r0, r1, [sp]
   1a6c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a6ca:	4630      	mov	r0, r6
   1a6cc:	4639      	mov	r1, r7
   1a6ce:	f001 fbb9 	bl	1be44 <__aeabi_dsub>
   1a6d2:	4602      	mov	r2, r0
   1a6d4:	460b      	mov	r3, r1
   1a6d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a6da:	f001 fe91 	bl	1c400 <__aeabi_ddiv>
   1a6de:	4642      	mov	r2, r8
   1a6e0:	4606      	mov	r6, r0
   1a6e2:	460f      	mov	r7, r1
   1a6e4:	464b      	mov	r3, r9
   1a6e6:	4620      	mov	r0, r4
   1a6e8:	4629      	mov	r1, r5
   1a6ea:	f001 fd5f 	bl	1c1ac <__aeabi_dmul>
   1a6ee:	4642      	mov	r2, r8
   1a6f0:	464b      	mov	r3, r9
   1a6f2:	f001 fba9 	bl	1be48 <__adddf3>
   1a6f6:	4602      	mov	r2, r0
   1a6f8:	460b      	mov	r3, r1
   1a6fa:	4630      	mov	r0, r6
   1a6fc:	4639      	mov	r1, r7
   1a6fe:	f001 fba1 	bl	1be44 <__aeabi_dsub>
   1a702:	4622      	mov	r2, r4
   1a704:	462b      	mov	r3, r5
   1a706:	f001 fb9d 	bl	1be44 <__aeabi_dsub>
   1a70a:	4602      	mov	r2, r0
   1a70c:	460b      	mov	r3, r1
   1a70e:	2000      	movs	r0, #0
   1a710:	493f      	ldr	r1, [pc, #252]	; (1a810 <__ieee754_pow+0x8b0>)
   1a712:	f001 fb97 	bl	1be44 <__aeabi_dsub>
   1a716:	448a      	add	sl, r1
   1a718:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   1a71c:	f2c0 8133 	blt.w	1a986 <__ieee754_pow+0xa26>
   1a720:	4651      	mov	r1, sl
   1a722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a726:	f001 fd41 	bl	1c1ac <__aeabi_dmul>
   1a72a:	e45b      	b.n	19fe4 <__ieee754_pow+0x84>
   1a72c:	4642      	mov	r2, r8
   1a72e:	4640      	mov	r0, r8
   1a730:	464b      	mov	r3, r9
   1a732:	4649      	mov	r1, r9
   1a734:	f001 fd3a 	bl	1c1ac <__aeabi_dmul>
   1a738:	e454      	b.n	19fe4 <__ieee754_pow+0x84>
   1a73a:	f1ba 0f00 	cmp.w	sl, #0
   1a73e:	f6bf ace0 	bge.w	1a102 <__ieee754_pow+0x1a2>
   1a742:	e9dd 3400 	ldrd	r3, r4, [sp]
   1a746:	4618      	mov	r0, r3
   1a748:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1a74c:	e44a      	b.n	19fe4 <__ieee754_pow+0x84>
   1a74e:	4b34      	ldr	r3, [pc, #208]	; (1a820 <__ieee754_pow+0x8c0>)
   1a750:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   1a754:	4598      	cmp	r8, r3
   1a756:	f340 80f2 	ble.w	1a93e <__ieee754_pow+0x9de>
   1a75a:	4b32      	ldr	r3, [pc, #200]	; (1a824 <__ieee754_pow+0x8c4>)
   1a75c:	440b      	add	r3, r1
   1a75e:	4303      	orrs	r3, r0
   1a760:	d10c      	bne.n	1a77c <__ieee754_pow+0x81c>
   1a762:	4632      	mov	r2, r6
   1a764:	463b      	mov	r3, r7
   1a766:	f001 fb6d 	bl	1be44 <__aeabi_dsub>
   1a76a:	4602      	mov	r2, r0
   1a76c:	460b      	mov	r3, r1
   1a76e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a772:	f001 ff97 	bl	1c6a4 <__aeabi_dcmple>
   1a776:	2800      	cmp	r0, #0
   1a778:	f43f aef3 	beq.w	1a562 <__ieee754_pow+0x602>
   1a77c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a780:	a321      	add	r3, pc, #132	; (adr r3, 1a808 <__ieee754_pow+0x8a8>)
   1a782:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a786:	f001 fd11 	bl	1c1ac <__aeabi_dmul>
   1a78a:	a31f      	add	r3, pc, #124	; (adr r3, 1a808 <__ieee754_pow+0x8a8>)
   1a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a790:	f001 fd0c 	bl	1c1ac <__aeabi_dmul>
   1a794:	e426      	b.n	19fe4 <__ieee754_pow+0x84>
   1a796:	4602      	mov	r2, r0
   1a798:	460b      	mov	r3, r1
   1a79a:	2000      	movs	r0, #0
   1a79c:	491c      	ldr	r1, [pc, #112]	; (1a810 <__ieee754_pow+0x8b0>)
   1a79e:	f001 fe2f 	bl	1c400 <__aeabi_ddiv>
   1a7a2:	e43c      	b.n	1a01e <__ieee754_pow+0xbe>
   1a7a4:	2200      	movs	r2, #0
   1a7a6:	2300      	movs	r3, #0
   1a7a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a7ac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1a7b0:	4b17      	ldr	r3, [pc, #92]	; (1a810 <__ieee754_pow+0x8b0>)
   1a7b2:	2200      	movs	r2, #0
   1a7b4:	2700      	movs	r7, #0
   1a7b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a7ba:	e4e6      	b.n	1a18a <__ieee754_pow+0x22a>
   1a7bc:	f3af 8000 	nop.w
   1a7c0:	652b82fe 	.word	0x652b82fe
   1a7c4:	3c971547 	.word	0x3c971547
   1a7c8:	00000000 	.word	0x00000000
   1a7cc:	3fe62e43 	.word	0x3fe62e43
   1a7d0:	fefa39ef 	.word	0xfefa39ef
   1a7d4:	3fe62e42 	.word	0x3fe62e42
   1a7d8:	0ca86c39 	.word	0x0ca86c39
   1a7dc:	be205c61 	.word	0xbe205c61
   1a7e0:	72bea4d0 	.word	0x72bea4d0
   1a7e4:	3e663769 	.word	0x3e663769
   1a7e8:	c5d26bf1 	.word	0xc5d26bf1
   1a7ec:	3ebbbd41 	.word	0x3ebbbd41
   1a7f0:	af25de2c 	.word	0xaf25de2c
   1a7f4:	3f11566a 	.word	0x3f11566a
   1a7f8:	16bebd93 	.word	0x16bebd93
   1a7fc:	3f66c16c 	.word	0x3f66c16c
   1a800:	5555553e 	.word	0x5555553e
   1a804:	3fc55555 	.word	0x3fc55555
   1a808:	c2f8f359 	.word	0xc2f8f359
   1a80c:	01a56e1f 	.word	0x01a56e1f
   1a810:	3ff00000 	.word	0x3ff00000
   1a814:	bff00000 	.word	0xbff00000
   1a818:	408fffff 	.word	0x408fffff
   1a81c:	000fffff 	.word	0x000fffff
   1a820:	4090cbff 	.word	0x4090cbff
   1a824:	3f6f3400 	.word	0x3f6f3400
   1a828:	4b6b      	ldr	r3, [pc, #428]	; (1a9d8 <__ieee754_pow+0xa78>)
   1a82a:	429e      	cmp	r6, r3
   1a82c:	f77f ac66 	ble.w	1a0fc <__ieee754_pow+0x19c>
   1a830:	4b6a      	ldr	r3, [pc, #424]	; (1a9dc <__ieee754_pow+0xa7c>)
   1a832:	429e      	cmp	r6, r3
   1a834:	f73f ac13 	bgt.w	1a05e <__ieee754_pow+0xfe>
   1a838:	2200      	movs	r2, #0
   1a83a:	4b68      	ldr	r3, [pc, #416]	; (1a9dc <__ieee754_pow+0xa7c>)
   1a83c:	f001 fb02 	bl	1be44 <__aeabi_dsub>
   1a840:	a357      	add	r3, pc, #348	; (adr r3, 1a9a0 <__ieee754_pow+0xa40>)
   1a842:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a846:	4606      	mov	r6, r0
   1a848:	460f      	mov	r7, r1
   1a84a:	f001 fcaf 	bl	1c1ac <__aeabi_dmul>
   1a84e:	a356      	add	r3, pc, #344	; (adr r3, 1a9a8 <__ieee754_pow+0xa48>)
   1a850:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a854:	4680      	mov	r8, r0
   1a856:	4689      	mov	r9, r1
   1a858:	4630      	mov	r0, r6
   1a85a:	4639      	mov	r1, r7
   1a85c:	f001 fca6 	bl	1c1ac <__aeabi_dmul>
   1a860:	2200      	movs	r2, #0
   1a862:	4682      	mov	sl, r0
   1a864:	468b      	mov	fp, r1
   1a866:	4b5e      	ldr	r3, [pc, #376]	; (1a9e0 <__ieee754_pow+0xa80>)
   1a868:	4630      	mov	r0, r6
   1a86a:	4639      	mov	r1, r7
   1a86c:	f001 fc9e 	bl	1c1ac <__aeabi_dmul>
   1a870:	4602      	mov	r2, r0
   1a872:	460b      	mov	r3, r1
   1a874:	a14e      	add	r1, pc, #312	; (adr r1, 1a9b0 <__ieee754_pow+0xa50>)
   1a876:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a87a:	f001 fae3 	bl	1be44 <__aeabi_dsub>
   1a87e:	4632      	mov	r2, r6
   1a880:	463b      	mov	r3, r7
   1a882:	f001 fc93 	bl	1c1ac <__aeabi_dmul>
   1a886:	4602      	mov	r2, r0
   1a888:	460b      	mov	r3, r1
   1a88a:	2000      	movs	r0, #0
   1a88c:	4955      	ldr	r1, [pc, #340]	; (1a9e4 <__ieee754_pow+0xa84>)
   1a88e:	f001 fad9 	bl	1be44 <__aeabi_dsub>
   1a892:	4632      	mov	r2, r6
   1a894:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1a898:	463b      	mov	r3, r7
   1a89a:	4630      	mov	r0, r6
   1a89c:	4639      	mov	r1, r7
   1a89e:	f001 fc85 	bl	1c1ac <__aeabi_dmul>
   1a8a2:	4602      	mov	r2, r0
   1a8a4:	460b      	mov	r3, r1
   1a8a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1a8aa:	f001 fc7f 	bl	1c1ac <__aeabi_dmul>
   1a8ae:	a342      	add	r3, pc, #264	; (adr r3, 1a9b8 <__ieee754_pow+0xa58>)
   1a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a8b4:	f001 fc7a 	bl	1c1ac <__aeabi_dmul>
   1a8b8:	4602      	mov	r2, r0
   1a8ba:	460b      	mov	r3, r1
   1a8bc:	4650      	mov	r0, sl
   1a8be:	4659      	mov	r1, fp
   1a8c0:	f001 fac0 	bl	1be44 <__aeabi_dsub>
   1a8c4:	4602      	mov	r2, r0
   1a8c6:	460b      	mov	r3, r1
   1a8c8:	4606      	mov	r6, r0
   1a8ca:	460f      	mov	r7, r1
   1a8cc:	4640      	mov	r0, r8
   1a8ce:	4649      	mov	r1, r9
   1a8d0:	f001 faba 	bl	1be48 <__adddf3>
   1a8d4:	4642      	mov	r2, r8
   1a8d6:	464b      	mov	r3, r9
   1a8d8:	2000      	movs	r0, #0
   1a8da:	4682      	mov	sl, r0
   1a8dc:	468b      	mov	fp, r1
   1a8de:	f001 fab1 	bl	1be44 <__aeabi_dsub>
   1a8e2:	4602      	mov	r2, r0
   1a8e4:	460b      	mov	r3, r1
   1a8e6:	4630      	mov	r0, r6
   1a8e8:	4639      	mov	r1, r7
   1a8ea:	f001 faab 	bl	1be44 <__aeabi_dsub>
   1a8ee:	4680      	mov	r8, r0
   1a8f0:	4689      	mov	r9, r1
   1a8f2:	e5d4      	b.n	1a49e <__ieee754_pow+0x53e>
   1a8f4:	4642      	mov	r2, r8
   1a8f6:	464b      	mov	r3, r9
   1a8f8:	2000      	movs	r0, #0
   1a8fa:	4938      	ldr	r1, [pc, #224]	; (1a9dc <__ieee754_pow+0xa7c>)
   1a8fc:	f001 fd80 	bl	1c400 <__aeabi_ddiv>
   1a900:	f7ff bb70 	b.w	19fe4 <__ieee754_pow+0x84>
   1a904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a908:	a32d      	add	r3, pc, #180	; (adr r3, 1a9c0 <__ieee754_pow+0xa60>)
   1a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a90e:	f001 fc4d 	bl	1c1ac <__aeabi_dmul>
   1a912:	a32b      	add	r3, pc, #172	; (adr r3, 1a9c0 <__ieee754_pow+0xa60>)
   1a914:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a918:	f001 fc48 	bl	1c1ac <__aeabi_dmul>
   1a91c:	f7ff bb62 	b.w	19fe4 <__ieee754_pow+0x84>
   1a920:	f1be 0f00 	cmp.w	lr, #0
   1a924:	f47f ab69 	bne.w	19ffa <__ieee754_pow+0x9a>
   1a928:	f1c3 0314 	rsb	r3, r3, #20
   1a92c:	fa47 f203 	asr.w	r2, r7, r3
   1a930:	fa02 f303 	lsl.w	r3, r2, r3
   1a934:	429f      	cmp	r7, r3
   1a936:	d02a      	beq.n	1a98e <__ieee754_pow+0xa2e>
   1a938:	4674      	mov	r4, lr
   1a93a:	f7ff bb36 	b.w	19faa <__ieee754_pow+0x4a>
   1a93e:	4b29      	ldr	r3, [pc, #164]	; (1a9e4 <__ieee754_pow+0xa84>)
   1a940:	4598      	cmp	r8, r3
   1a942:	f73f ae0e 	bgt.w	1a562 <__ieee754_pow+0x602>
   1a946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a94a:	4692      	mov	sl, r2
   1a94c:	4693      	mov	fp, r2
   1a94e:	e638      	b.n	1a5c2 <__ieee754_pow+0x662>
   1a950:	4602      	mov	r2, r0
   1a952:	460b      	mov	r3, r1
   1a954:	f001 fa76 	bl	1be44 <__aeabi_dsub>
   1a958:	4602      	mov	r2, r0
   1a95a:	460b      	mov	r3, r1
   1a95c:	f001 fd50 	bl	1c400 <__aeabi_ddiv>
   1a960:	f7ff bb40 	b.w	19fe4 <__ieee754_pow+0x84>
   1a964:	a318      	add	r3, pc, #96	; (adr r3, 1a9c8 <__ieee754_pow+0xa68>)
   1a966:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a96a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a96e:	a318      	add	r3, pc, #96	; (adr r3, 1a9d0 <__ieee754_pow+0xa70>)
   1a970:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a974:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1a978:	4b1b      	ldr	r3, [pc, #108]	; (1a9e8 <__ieee754_pow+0xa88>)
   1a97a:	2200      	movs	r2, #0
   1a97c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   1a980:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a984:	e401      	b.n	1a18a <__ieee754_pow+0x22a>
   1a986:	465a      	mov	r2, fp
   1a988:	f001 f9d2 	bl	1bd30 <scalbn>
   1a98c:	e6c9      	b.n	1a722 <__ieee754_pow+0x7c2>
   1a98e:	f002 0201 	and.w	r2, r2, #1
   1a992:	f1c2 0402 	rsb	r4, r2, #2
   1a996:	f7ff bb08 	b.w	19faa <__ieee754_pow+0x4a>
   1a99a:	bf00      	nop
   1a99c:	f3af 8000 	nop.w
   1a9a0:	60000000 	.word	0x60000000
   1a9a4:	3ff71547 	.word	0x3ff71547
   1a9a8:	f85ddf44 	.word	0xf85ddf44
   1a9ac:	3e54ae0b 	.word	0x3e54ae0b
   1a9b0:	55555555 	.word	0x55555555
   1a9b4:	3fd55555 	.word	0x3fd55555
   1a9b8:	652b82fe 	.word	0x652b82fe
   1a9bc:	3ff71547 	.word	0x3ff71547
   1a9c0:	8800759c 	.word	0x8800759c
   1a9c4:	7e37e43c 	.word	0x7e37e43c
   1a9c8:	40000000 	.word	0x40000000
   1a9cc:	3fe2b803 	.word	0x3fe2b803
   1a9d0:	43cfd006 	.word	0x43cfd006
   1a9d4:	3e4cfdeb 	.word	0x3e4cfdeb
   1a9d8:	3feffffe 	.word	0x3feffffe
   1a9dc:	3ff00000 	.word	0x3ff00000
   1a9e0:	3fd00000 	.word	0x3fd00000
   1a9e4:	3fe00000 	.word	0x3fe00000
   1a9e8:	3ff80000 	.word	0x3ff80000
   1a9ec:	00000000 	.word	0x00000000

0001a9f0 <__ieee754_rem_pio2>:
   1a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9f4:	4e9a      	ldr	r6, [pc, #616]	; (1ac60 <__ieee754_rem_pio2+0x270>)
   1a9f6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   1a9fa:	42b7      	cmp	r7, r6
   1a9fc:	b091      	sub	sp, #68	; 0x44
   1a9fe:	f340 808e 	ble.w	1ab1e <__ieee754_rem_pio2+0x12e>
   1aa02:	4692      	mov	sl, r2
   1aa04:	4a97      	ldr	r2, [pc, #604]	; (1ac64 <__ieee754_rem_pio2+0x274>)
   1aa06:	4297      	cmp	r7, r2
   1aa08:	460c      	mov	r4, r1
   1aa0a:	dc26      	bgt.n	1aa5a <__ieee754_rem_pio2+0x6a>
   1aa0c:	2900      	cmp	r1, #0
   1aa0e:	a38a      	add	r3, pc, #552	; (adr r3, 1ac38 <__ieee754_rem_pio2+0x248>)
   1aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa14:	f340 81b4 	ble.w	1ad80 <__ieee754_rem_pio2+0x390>
   1aa18:	f001 fa14 	bl	1be44 <__aeabi_dsub>
   1aa1c:	4b92      	ldr	r3, [pc, #584]	; (1ac68 <__ieee754_rem_pio2+0x278>)
   1aa1e:	429f      	cmp	r7, r3
   1aa20:	4604      	mov	r4, r0
   1aa22:	460d      	mov	r5, r1
   1aa24:	f000 8090 	beq.w	1ab48 <__ieee754_rem_pio2+0x158>
   1aa28:	a385      	add	r3, pc, #532	; (adr r3, 1ac40 <__ieee754_rem_pio2+0x250>)
   1aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa2e:	f001 fa09 	bl	1be44 <__aeabi_dsub>
   1aa32:	4602      	mov	r2, r0
   1aa34:	460b      	mov	r3, r1
   1aa36:	e9ca 2300 	strd	r2, r3, [sl]
   1aa3a:	4620      	mov	r0, r4
   1aa3c:	4629      	mov	r1, r5
   1aa3e:	f001 fa01 	bl	1be44 <__aeabi_dsub>
   1aa42:	a37f      	add	r3, pc, #508	; (adr r3, 1ac40 <__ieee754_rem_pio2+0x250>)
   1aa44:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa48:	f001 f9fc 	bl	1be44 <__aeabi_dsub>
   1aa4c:	2501      	movs	r5, #1
   1aa4e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1aa52:	4628      	mov	r0, r5
   1aa54:	b011      	add	sp, #68	; 0x44
   1aa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa5a:	4a84      	ldr	r2, [pc, #528]	; (1ac6c <__ieee754_rem_pio2+0x27c>)
   1aa5c:	4297      	cmp	r7, r2
   1aa5e:	f340 8090 	ble.w	1ab82 <__ieee754_rem_pio2+0x192>
   1aa62:	4a83      	ldr	r2, [pc, #524]	; (1ac70 <__ieee754_rem_pio2+0x280>)
   1aa64:	4297      	cmp	r7, r2
   1aa66:	dc65      	bgt.n	1ab34 <__ieee754_rem_pio2+0x144>
   1aa68:	153d      	asrs	r5, r7, #20
   1aa6a:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   1aa6e:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
   1aa72:	4619      	mov	r1, r3
   1aa74:	461f      	mov	r7, r3
   1aa76:	4606      	mov	r6, r0
   1aa78:	f001 fe48 	bl	1c70c <__aeabi_d2iz>
   1aa7c:	f001 fb30 	bl	1c0e0 <__aeabi_i2d>
   1aa80:	4680      	mov	r8, r0
   1aa82:	4689      	mov	r9, r1
   1aa84:	4602      	mov	r2, r0
   1aa86:	460b      	mov	r3, r1
   1aa88:	4630      	mov	r0, r6
   1aa8a:	4639      	mov	r1, r7
   1aa8c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   1aa90:	f001 f9d8 	bl	1be44 <__aeabi_dsub>
   1aa94:	2200      	movs	r2, #0
   1aa96:	4b77      	ldr	r3, [pc, #476]	; (1ac74 <__ieee754_rem_pio2+0x284>)
   1aa98:	f001 fb88 	bl	1c1ac <__aeabi_dmul>
   1aa9c:	4689      	mov	r9, r1
   1aa9e:	4680      	mov	r8, r0
   1aaa0:	f001 fe34 	bl	1c70c <__aeabi_d2iz>
   1aaa4:	f001 fb1c 	bl	1c0e0 <__aeabi_i2d>
   1aaa8:	4602      	mov	r2, r0
   1aaaa:	460b      	mov	r3, r1
   1aaac:	4606      	mov	r6, r0
   1aaae:	460f      	mov	r7, r1
   1aab0:	4640      	mov	r0, r8
   1aab2:	4649      	mov	r1, r9
   1aab4:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   1aab8:	f001 f9c4 	bl	1be44 <__aeabi_dsub>
   1aabc:	2200      	movs	r2, #0
   1aabe:	4b6d      	ldr	r3, [pc, #436]	; (1ac74 <__ieee754_rem_pio2+0x284>)
   1aac0:	f001 fb74 	bl	1c1ac <__aeabi_dmul>
   1aac4:	2200      	movs	r2, #0
   1aac6:	2300      	movs	r3, #0
   1aac8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1aacc:	f001 fdd6 	bl	1c67c <__aeabi_dcmpeq>
   1aad0:	2800      	cmp	r0, #0
   1aad2:	f000 8173 	beq.w	1adbc <__ieee754_rem_pio2+0x3cc>
   1aad6:	2300      	movs	r3, #0
   1aad8:	4630      	mov	r0, r6
   1aada:	4639      	mov	r1, r7
   1aadc:	2200      	movs	r2, #0
   1aade:	f001 fdcd 	bl	1c67c <__aeabi_dcmpeq>
   1aae2:	2800      	cmp	r0, #0
   1aae4:	bf14      	ite	ne
   1aae6:	2301      	movne	r3, #1
   1aae8:	2302      	moveq	r3, #2
   1aaea:	4a63      	ldr	r2, [pc, #396]	; (1ac78 <__ieee754_rem_pio2+0x288>)
   1aaec:	9201      	str	r2, [sp, #4]
   1aaee:	2102      	movs	r1, #2
   1aaf0:	462a      	mov	r2, r5
   1aaf2:	9100      	str	r1, [sp, #0]
   1aaf4:	a80a      	add	r0, sp, #40	; 0x28
   1aaf6:	4651      	mov	r1, sl
   1aaf8:	f000 fb7e 	bl	1b1f8 <__kernel_rem_pio2>
   1aafc:	2c00      	cmp	r4, #0
   1aafe:	4605      	mov	r5, r0
   1ab00:	da14      	bge.n	1ab2c <__ieee754_rem_pio2+0x13c>
   1ab02:	f8da 2004 	ldr.w	r2, [sl, #4]
   1ab06:	f8da 300c 	ldr.w	r3, [sl, #12]
   1ab0a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1ab0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1ab12:	4245      	negs	r5, r0
   1ab14:	f8ca 2004 	str.w	r2, [sl, #4]
   1ab18:	f8ca 300c 	str.w	r3, [sl, #12]
   1ab1c:	e006      	b.n	1ab2c <__ieee754_rem_pio2+0x13c>
   1ab1e:	e9c2 0100 	strd	r0, r1, [r2]
   1ab22:	2500      	movs	r5, #0
   1ab24:	2400      	movs	r4, #0
   1ab26:	e9c2 4502 	strd	r4, r5, [r2, #8]
   1ab2a:	2500      	movs	r5, #0
   1ab2c:	4628      	mov	r0, r5
   1ab2e:	b011      	add	sp, #68	; 0x44
   1ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab34:	4602      	mov	r2, r0
   1ab36:	460b      	mov	r3, r1
   1ab38:	f001 f984 	bl	1be44 <__aeabi_dsub>
   1ab3c:	2500      	movs	r5, #0
   1ab3e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1ab42:	e9ca 0100 	strd	r0, r1, [sl]
   1ab46:	e7f1      	b.n	1ab2c <__ieee754_rem_pio2+0x13c>
   1ab48:	a33f      	add	r3, pc, #252	; (adr r3, 1ac48 <__ieee754_rem_pio2+0x258>)
   1ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab4e:	f001 f979 	bl	1be44 <__aeabi_dsub>
   1ab52:	a33f      	add	r3, pc, #252	; (adr r3, 1ac50 <__ieee754_rem_pio2+0x260>)
   1ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab58:	460d      	mov	r5, r1
   1ab5a:	4604      	mov	r4, r0
   1ab5c:	f001 f972 	bl	1be44 <__aeabi_dsub>
   1ab60:	4602      	mov	r2, r0
   1ab62:	460b      	mov	r3, r1
   1ab64:	e9ca 2300 	strd	r2, r3, [sl]
   1ab68:	4629      	mov	r1, r5
   1ab6a:	4620      	mov	r0, r4
   1ab6c:	f001 f96a 	bl	1be44 <__aeabi_dsub>
   1ab70:	a337      	add	r3, pc, #220	; (adr r3, 1ac50 <__ieee754_rem_pio2+0x260>)
   1ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab76:	f001 f965 	bl	1be44 <__aeabi_dsub>
   1ab7a:	2501      	movs	r5, #1
   1ab7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1ab80:	e7d4      	b.n	1ab2c <__ieee754_rem_pio2+0x13c>
   1ab82:	f001 f837 	bl	1bbf4 <fabs>
   1ab86:	a334      	add	r3, pc, #208	; (adr r3, 1ac58 <__ieee754_rem_pio2+0x268>)
   1ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab8c:	4680      	mov	r8, r0
   1ab8e:	4689      	mov	r9, r1
   1ab90:	f001 fb0c 	bl	1c1ac <__aeabi_dmul>
   1ab94:	2200      	movs	r2, #0
   1ab96:	4b39      	ldr	r3, [pc, #228]	; (1ac7c <__ieee754_rem_pio2+0x28c>)
   1ab98:	f001 f956 	bl	1be48 <__adddf3>
   1ab9c:	f001 fdb6 	bl	1c70c <__aeabi_d2iz>
   1aba0:	4605      	mov	r5, r0
   1aba2:	f001 fa9d 	bl	1c0e0 <__aeabi_i2d>
   1aba6:	a324      	add	r3, pc, #144	; (adr r3, 1ac38 <__ieee754_rem_pio2+0x248>)
   1aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1abac:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1abb0:	f001 fafc 	bl	1c1ac <__aeabi_dmul>
   1abb4:	4602      	mov	r2, r0
   1abb6:	460b      	mov	r3, r1
   1abb8:	4640      	mov	r0, r8
   1abba:	4649      	mov	r1, r9
   1abbc:	f001 f942 	bl	1be44 <__aeabi_dsub>
   1abc0:	a31f      	add	r3, pc, #124	; (adr r3, 1ac40 <__ieee754_rem_pio2+0x250>)
   1abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1abc6:	4680      	mov	r8, r0
   1abc8:	4689      	mov	r9, r1
   1abca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1abce:	f001 faed 	bl	1c1ac <__aeabi_dmul>
   1abd2:	2d1f      	cmp	r5, #31
   1abd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1abd8:	dc54      	bgt.n	1ac84 <__ieee754_rem_pio2+0x294>
   1abda:	4b29      	ldr	r3, [pc, #164]	; (1ac80 <__ieee754_rem_pio2+0x290>)
   1abdc:	1e6a      	subs	r2, r5, #1
   1abde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1abe2:	429f      	cmp	r7, r3
   1abe4:	d04e      	beq.n	1ac84 <__ieee754_rem_pio2+0x294>
   1abe6:	4602      	mov	r2, r0
   1abe8:	460b      	mov	r3, r1
   1abea:	4640      	mov	r0, r8
   1abec:	4649      	mov	r1, r9
   1abee:	f001 f929 	bl	1be44 <__aeabi_dsub>
   1abf2:	4602      	mov	r2, r0
   1abf4:	460b      	mov	r3, r1
   1abf6:	e9ca 2300 	strd	r2, r3, [sl]
   1abfa:	4683      	mov	fp, r0
   1abfc:	460e      	mov	r6, r1
   1abfe:	465a      	mov	r2, fp
   1ac00:	4633      	mov	r3, r6
   1ac02:	4640      	mov	r0, r8
   1ac04:	4649      	mov	r1, r9
   1ac06:	f001 f91d 	bl	1be44 <__aeabi_dsub>
   1ac0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ac0e:	f001 f919 	bl	1be44 <__aeabi_dsub>
   1ac12:	2c00      	cmp	r4, #0
   1ac14:	4602      	mov	r2, r0
   1ac16:	460b      	mov	r3, r1
   1ac18:	e9ca 2302 	strd	r2, r3, [sl, #8]
   1ac1c:	da86      	bge.n	1ab2c <__ieee754_rem_pio2+0x13c>
   1ac1e:	465b      	mov	r3, fp
   1ac20:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
   1ac24:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1ac28:	e88a 0048 	stmia.w	sl, {r3, r6}
   1ac2c:	f8ca 100c 	str.w	r1, [sl, #12]
   1ac30:	f8ca 0008 	str.w	r0, [sl, #8]
   1ac34:	426d      	negs	r5, r5
   1ac36:	e779      	b.n	1ab2c <__ieee754_rem_pio2+0x13c>
   1ac38:	54400000 	.word	0x54400000
   1ac3c:	3ff921fb 	.word	0x3ff921fb
   1ac40:	1a626331 	.word	0x1a626331
   1ac44:	3dd0b461 	.word	0x3dd0b461
   1ac48:	1a600000 	.word	0x1a600000
   1ac4c:	3dd0b461 	.word	0x3dd0b461
   1ac50:	2e037073 	.word	0x2e037073
   1ac54:	3ba3198a 	.word	0x3ba3198a
   1ac58:	6dc9c883 	.word	0x6dc9c883
   1ac5c:	3fe45f30 	.word	0x3fe45f30
   1ac60:	3fe921fb 	.word	0x3fe921fb
   1ac64:	4002d97b 	.word	0x4002d97b
   1ac68:	3ff921fb 	.word	0x3ff921fb
   1ac6c:	413921fb 	.word	0x413921fb
   1ac70:	7fefffff 	.word	0x7fefffff
   1ac74:	41700000 	.word	0x41700000
   1ac78:	00023388 	.word	0x00023388
   1ac7c:	3fe00000 	.word	0x3fe00000
   1ac80:	00023308 	.word	0x00023308
   1ac84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ac88:	4640      	mov	r0, r8
   1ac8a:	4649      	mov	r1, r9
   1ac8c:	f001 f8da 	bl	1be44 <__aeabi_dsub>
   1ac90:	153a      	asrs	r2, r7, #20
   1ac92:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1ac96:	1ad3      	subs	r3, r2, r3
   1ac98:	2b10      	cmp	r3, #16
   1ac9a:	4683      	mov	fp, r0
   1ac9c:	460e      	mov	r6, r1
   1ac9e:	9209      	str	r2, [sp, #36]	; 0x24
   1aca0:	e9ca 0100 	strd	r0, r1, [sl]
   1aca4:	ddab      	ble.n	1abfe <__ieee754_rem_pio2+0x20e>
   1aca6:	a358      	add	r3, pc, #352	; (adr r3, 1ae08 <__ieee754_rem_pio2+0x418>)
   1aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1acac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1acb0:	f001 fa7c 	bl	1c1ac <__aeabi_dmul>
   1acb4:	4606      	mov	r6, r0
   1acb6:	460f      	mov	r7, r1
   1acb8:	4602      	mov	r2, r0
   1acba:	460b      	mov	r3, r1
   1acbc:	4640      	mov	r0, r8
   1acbe:	4649      	mov	r1, r9
   1acc0:	f001 f8c0 	bl	1be44 <__aeabi_dsub>
   1acc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1acc8:	4602      	mov	r2, r0
   1acca:	460b      	mov	r3, r1
   1accc:	4640      	mov	r0, r8
   1acce:	4649      	mov	r1, r9
   1acd0:	f001 f8b8 	bl	1be44 <__aeabi_dsub>
   1acd4:	4632      	mov	r2, r6
   1acd6:	463b      	mov	r3, r7
   1acd8:	f001 f8b4 	bl	1be44 <__aeabi_dsub>
   1acdc:	a34c      	add	r3, pc, #304	; (adr r3, 1ae10 <__ieee754_rem_pio2+0x420>)
   1acde:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ace2:	4606      	mov	r6, r0
   1ace4:	460f      	mov	r7, r1
   1ace6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1acea:	f001 fa5f 	bl	1c1ac <__aeabi_dmul>
   1acee:	4632      	mov	r2, r6
   1acf0:	463b      	mov	r3, r7
   1acf2:	f001 f8a7 	bl	1be44 <__aeabi_dsub>
   1acf6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   1acfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1acfe:	4602      	mov	r2, r0
   1ad00:	460b      	mov	r3, r1
   1ad02:	4640      	mov	r0, r8
   1ad04:	4649      	mov	r1, r9
   1ad06:	f001 f89d 	bl	1be44 <__aeabi_dsub>
   1ad0a:	460b      	mov	r3, r1
   1ad0c:	f3c1 570a 	ubfx	r7, r1, #20, #11
   1ad10:	460e      	mov	r6, r1
   1ad12:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ad14:	1bcf      	subs	r7, r1, r7
   1ad16:	4602      	mov	r2, r0
   1ad18:	2f31      	cmp	r7, #49	; 0x31
   1ad1a:	4683      	mov	fp, r0
   1ad1c:	e9ca 2300 	strd	r2, r3, [sl]
   1ad20:	dd6c      	ble.n	1adfc <__ieee754_rem_pio2+0x40c>
   1ad22:	a33d      	add	r3, pc, #244	; (adr r3, 1ae18 <__ieee754_rem_pio2+0x428>)
   1ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ad28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ad2c:	f001 fa3e 	bl	1c1ac <__aeabi_dmul>
   1ad30:	4606      	mov	r6, r0
   1ad32:	460f      	mov	r7, r1
   1ad34:	4602      	mov	r2, r0
   1ad36:	460b      	mov	r3, r1
   1ad38:	4640      	mov	r0, r8
   1ad3a:	4649      	mov	r1, r9
   1ad3c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1ad40:	f001 f880 	bl	1be44 <__aeabi_dsub>
   1ad44:	4602      	mov	r2, r0
   1ad46:	460b      	mov	r3, r1
   1ad48:	4680      	mov	r8, r0
   1ad4a:	4689      	mov	r9, r1
   1ad4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ad50:	f001 f878 	bl	1be44 <__aeabi_dsub>
   1ad54:	4632      	mov	r2, r6
   1ad56:	463b      	mov	r3, r7
   1ad58:	f001 f874 	bl	1be44 <__aeabi_dsub>
   1ad5c:	a330      	add	r3, pc, #192	; (adr r3, 1ae20 <__ieee754_rem_pio2+0x430>)
   1ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ad62:	4606      	mov	r6, r0
   1ad64:	460f      	mov	r7, r1
   1ad66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ad6a:	f001 fa1f 	bl	1c1ac <__aeabi_dmul>
   1ad6e:	4632      	mov	r2, r6
   1ad70:	463b      	mov	r3, r7
   1ad72:	f001 f867 	bl	1be44 <__aeabi_dsub>
   1ad76:	4602      	mov	r2, r0
   1ad78:	460b      	mov	r3, r1
   1ad7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ad7e:	e734      	b.n	1abea <__ieee754_rem_pio2+0x1fa>
   1ad80:	f001 f862 	bl	1be48 <__adddf3>
   1ad84:	4b2a      	ldr	r3, [pc, #168]	; (1ae30 <__ieee754_rem_pio2+0x440>)
   1ad86:	429f      	cmp	r7, r3
   1ad88:	4604      	mov	r4, r0
   1ad8a:	460d      	mov	r5, r1
   1ad8c:	d018      	beq.n	1adc0 <__ieee754_rem_pio2+0x3d0>
   1ad8e:	a326      	add	r3, pc, #152	; (adr r3, 1ae28 <__ieee754_rem_pio2+0x438>)
   1ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ad94:	f001 f858 	bl	1be48 <__adddf3>
   1ad98:	4602      	mov	r2, r0
   1ad9a:	460b      	mov	r3, r1
   1ad9c:	e9ca 2300 	strd	r2, r3, [sl]
   1ada0:	4629      	mov	r1, r5
   1ada2:	4620      	mov	r0, r4
   1ada4:	f001 f84e 	bl	1be44 <__aeabi_dsub>
   1ada8:	a31f      	add	r3, pc, #124	; (adr r3, 1ae28 <__ieee754_rem_pio2+0x438>)
   1adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1adae:	f001 f84b 	bl	1be48 <__adddf3>
   1adb2:	f04f 35ff 	mov.w	r5, #4294967295
   1adb6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1adba:	e6b7      	b.n	1ab2c <__ieee754_rem_pio2+0x13c>
   1adbc:	2303      	movs	r3, #3
   1adbe:	e694      	b.n	1aaea <__ieee754_rem_pio2+0xfa>
   1adc0:	a311      	add	r3, pc, #68	; (adr r3, 1ae08 <__ieee754_rem_pio2+0x418>)
   1adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1adc6:	f001 f83f 	bl	1be48 <__adddf3>
   1adca:	a311      	add	r3, pc, #68	; (adr r3, 1ae10 <__ieee754_rem_pio2+0x420>)
   1adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1add0:	460d      	mov	r5, r1
   1add2:	4604      	mov	r4, r0
   1add4:	f001 f838 	bl	1be48 <__adddf3>
   1add8:	4602      	mov	r2, r0
   1adda:	460b      	mov	r3, r1
   1addc:	e9ca 2300 	strd	r2, r3, [sl]
   1ade0:	4629      	mov	r1, r5
   1ade2:	4620      	mov	r0, r4
   1ade4:	f001 f82e 	bl	1be44 <__aeabi_dsub>
   1ade8:	a309      	add	r3, pc, #36	; (adr r3, 1ae10 <__ieee754_rem_pio2+0x420>)
   1adea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1adee:	f001 f82b 	bl	1be48 <__adddf3>
   1adf2:	f04f 35ff 	mov.w	r5, #4294967295
   1adf6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1adfa:	e697      	b.n	1ab2c <__ieee754_rem_pio2+0x13c>
   1adfc:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   1ae00:	e6fd      	b.n	1abfe <__ieee754_rem_pio2+0x20e>
   1ae02:	bf00      	nop
   1ae04:	f3af 8000 	nop.w
   1ae08:	1a600000 	.word	0x1a600000
   1ae0c:	3dd0b461 	.word	0x3dd0b461
   1ae10:	2e037073 	.word	0x2e037073
   1ae14:	3ba3198a 	.word	0x3ba3198a
   1ae18:	2e000000 	.word	0x2e000000
   1ae1c:	3ba3198a 	.word	0x3ba3198a
   1ae20:	252049c1 	.word	0x252049c1
   1ae24:	397b839a 	.word	0x397b839a
   1ae28:	1a626331 	.word	0x1a626331
   1ae2c:	3dd0b461 	.word	0x3dd0b461
   1ae30:	3ff921fb 	.word	0x3ff921fb

0001ae34 <__ieee754_sqrt>:
   1ae34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ae38:	4f5b      	ldr	r7, [pc, #364]	; (1afa8 <__ieee754_sqrt+0x174>)
   1ae3a:	438f      	bics	r7, r1
   1ae3c:	4605      	mov	r5, r0
   1ae3e:	460c      	mov	r4, r1
   1ae40:	f000 8092 	beq.w	1af68 <__ieee754_sqrt+0x134>
   1ae44:	2900      	cmp	r1, #0
   1ae46:	460b      	mov	r3, r1
   1ae48:	4602      	mov	r2, r0
   1ae4a:	dd6f      	ble.n	1af2c <__ieee754_sqrt+0xf8>
   1ae4c:	150f      	asrs	r7, r1, #20
   1ae4e:	d07b      	beq.n	1af48 <__ieee754_sqrt+0x114>
   1ae50:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   1ae54:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1ae58:	07f8      	lsls	r0, r7, #31
   1ae5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1ae5e:	d45c      	bmi.n	1af1a <__ieee754_sqrt+0xe6>
   1ae60:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   1ae64:	2600      	movs	r6, #0
   1ae66:	440b      	add	r3, r1
   1ae68:	107f      	asrs	r7, r7, #1
   1ae6a:	0052      	lsls	r2, r2, #1
   1ae6c:	46b6      	mov	lr, r6
   1ae6e:	2016      	movs	r0, #22
   1ae70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   1ae74:	eb0e 0401 	add.w	r4, lr, r1
   1ae78:	429c      	cmp	r4, r3
   1ae7a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   1ae7e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1ae82:	dc03      	bgt.n	1ae8c <__ieee754_sqrt+0x58>
   1ae84:	1b1b      	subs	r3, r3, r4
   1ae86:	eb04 0e01 	add.w	lr, r4, r1
   1ae8a:	440e      	add	r6, r1
   1ae8c:	3801      	subs	r0, #1
   1ae8e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1ae92:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1ae96:	d1ed      	bne.n	1ae74 <__ieee754_sqrt+0x40>
   1ae98:	4684      	mov	ip, r0
   1ae9a:	2420      	movs	r4, #32
   1ae9c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1aea0:	e009      	b.n	1aeb6 <__ieee754_sqrt+0x82>
   1aea2:	d020      	beq.n	1aee6 <__ieee754_sqrt+0xb2>
   1aea4:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   1aea8:	3c01      	subs	r4, #1
   1aeaa:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1aeae:	442b      	add	r3, r5
   1aeb0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1aeb4:	d020      	beq.n	1aef8 <__ieee754_sqrt+0xc4>
   1aeb6:	4573      	cmp	r3, lr
   1aeb8:	eb01 050c 	add.w	r5, r1, ip
   1aebc:	ddf1      	ble.n	1aea2 <__ieee754_sqrt+0x6e>
   1aebe:	2d00      	cmp	r5, #0
   1aec0:	eb05 0c01 	add.w	ip, r5, r1
   1aec4:	db09      	blt.n	1aeda <__ieee754_sqrt+0xa6>
   1aec6:	46f0      	mov	r8, lr
   1aec8:	4295      	cmp	r5, r2
   1aeca:	eba3 030e 	sub.w	r3, r3, lr
   1aece:	d900      	bls.n	1aed2 <__ieee754_sqrt+0x9e>
   1aed0:	3b01      	subs	r3, #1
   1aed2:	1b52      	subs	r2, r2, r5
   1aed4:	4408      	add	r0, r1
   1aed6:	46c6      	mov	lr, r8
   1aed8:	e7e4      	b.n	1aea4 <__ieee754_sqrt+0x70>
   1aeda:	f1bc 0f00 	cmp.w	ip, #0
   1aede:	dbf2      	blt.n	1aec6 <__ieee754_sqrt+0x92>
   1aee0:	f10e 0801 	add.w	r8, lr, #1
   1aee4:	e7f0      	b.n	1aec8 <__ieee754_sqrt+0x94>
   1aee6:	4295      	cmp	r5, r2
   1aee8:	d8dc      	bhi.n	1aea4 <__ieee754_sqrt+0x70>
   1aeea:	2d00      	cmp	r5, #0
   1aeec:	eb05 0c01 	add.w	ip, r5, r1
   1aef0:	db44      	blt.n	1af7c <__ieee754_sqrt+0x148>
   1aef2:	4698      	mov	r8, r3
   1aef4:	2300      	movs	r3, #0
   1aef6:	e7ec      	b.n	1aed2 <__ieee754_sqrt+0x9e>
   1aef8:	4313      	orrs	r3, r2
   1aefa:	d113      	bne.n	1af24 <__ieee754_sqrt+0xf0>
   1aefc:	0840      	lsrs	r0, r0, #1
   1aefe:	1073      	asrs	r3, r6, #1
   1af00:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   1af04:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   1af08:	07f2      	lsls	r2, r6, #31
   1af0a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   1af0e:	bf48      	it	mi
   1af10:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   1af14:	4649      	mov	r1, r9
   1af16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1af1a:	005b      	lsls	r3, r3, #1
   1af1c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   1af20:	0052      	lsls	r2, r2, #1
   1af22:	e79d      	b.n	1ae60 <__ieee754_sqrt+0x2c>
   1af24:	1c41      	adds	r1, r0, #1
   1af26:	d02d      	beq.n	1af84 <__ieee754_sqrt+0x150>
   1af28:	3001      	adds	r0, #1
   1af2a:	e7e7      	b.n	1aefc <__ieee754_sqrt+0xc8>
   1af2c:	4606      	mov	r6, r0
   1af2e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   1af32:	433e      	orrs	r6, r7
   1af34:	d0ef      	beq.n	1af16 <__ieee754_sqrt+0xe2>
   1af36:	bb69      	cbnz	r1, 1af94 <__ieee754_sqrt+0x160>
   1af38:	460f      	mov	r7, r1
   1af3a:	0ad3      	lsrs	r3, r2, #11
   1af3c:	3f15      	subs	r7, #21
   1af3e:	0552      	lsls	r2, r2, #21
   1af40:	2b00      	cmp	r3, #0
   1af42:	d0fa      	beq.n	1af3a <__ieee754_sqrt+0x106>
   1af44:	02de      	lsls	r6, r3, #11
   1af46:	d420      	bmi.n	1af8a <__ieee754_sqrt+0x156>
   1af48:	2400      	movs	r4, #0
   1af4a:	e000      	b.n	1af4e <__ieee754_sqrt+0x11a>
   1af4c:	4604      	mov	r4, r0
   1af4e:	005b      	lsls	r3, r3, #1
   1af50:	02dd      	lsls	r5, r3, #11
   1af52:	f104 0001 	add.w	r0, r4, #1
   1af56:	d5f9      	bpl.n	1af4c <__ieee754_sqrt+0x118>
   1af58:	f1c0 0120 	rsb	r1, r0, #32
   1af5c:	fa22 f101 	lsr.w	r1, r2, r1
   1af60:	430b      	orrs	r3, r1
   1af62:	1b3f      	subs	r7, r7, r4
   1af64:	4082      	lsls	r2, r0
   1af66:	e773      	b.n	1ae50 <__ieee754_sqrt+0x1c>
   1af68:	4602      	mov	r2, r0
   1af6a:	460b      	mov	r3, r1
   1af6c:	f001 f91e 	bl	1c1ac <__aeabi_dmul>
   1af70:	462a      	mov	r2, r5
   1af72:	4623      	mov	r3, r4
   1af74:	f000 ff68 	bl	1be48 <__adddf3>
   1af78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1af7c:	f1bc 0f00 	cmp.w	ip, #0
   1af80:	daae      	bge.n	1aee0 <__ieee754_sqrt+0xac>
   1af82:	e7b6      	b.n	1aef2 <__ieee754_sqrt+0xbe>
   1af84:	3601      	adds	r6, #1
   1af86:	4620      	mov	r0, r4
   1af88:	e7b9      	b.n	1aefe <__ieee754_sqrt+0xca>
   1af8a:	2000      	movs	r0, #0
   1af8c:	2120      	movs	r1, #32
   1af8e:	f04f 34ff 	mov.w	r4, #4294967295
   1af92:	e7e3      	b.n	1af5c <__ieee754_sqrt+0x128>
   1af94:	4602      	mov	r2, r0
   1af96:	460b      	mov	r3, r1
   1af98:	f000 ff54 	bl	1be44 <__aeabi_dsub>
   1af9c:	4602      	mov	r2, r0
   1af9e:	460b      	mov	r3, r1
   1afa0:	f001 fa2e 	bl	1c400 <__aeabi_ddiv>
   1afa4:	e7b7      	b.n	1af16 <__ieee754_sqrt+0xe2>
   1afa6:	bf00      	nop
   1afa8:	7ff00000 	.word	0x7ff00000
   1afac:	00000000 	.word	0x00000000

0001afb0 <__kernel_cos>:
   1afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afb4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   1afb8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
   1afbc:	b085      	sub	sp, #20
   1afbe:	460c      	mov	r4, r1
   1afc0:	4692      	mov	sl, r2
   1afc2:	469b      	mov	fp, r3
   1afc4:	4605      	mov	r5, r0
   1afc6:	da6b      	bge.n	1b0a0 <__kernel_cos+0xf0>
   1afc8:	f001 fba0 	bl	1c70c <__aeabi_d2iz>
   1afcc:	2800      	cmp	r0, #0
   1afce:	f000 80e8 	beq.w	1b1a2 <__kernel_cos+0x1f2>
   1afd2:	462a      	mov	r2, r5
   1afd4:	4623      	mov	r3, r4
   1afd6:	4628      	mov	r0, r5
   1afd8:	4621      	mov	r1, r4
   1afda:	f001 f8e7 	bl	1c1ac <__aeabi_dmul>
   1afde:	a374      	add	r3, pc, #464	; (adr r3, 1b1b0 <__kernel_cos+0x200>)
   1afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1afe4:	4680      	mov	r8, r0
   1afe6:	4689      	mov	r9, r1
   1afe8:	f001 f8e0 	bl	1c1ac <__aeabi_dmul>
   1afec:	a372      	add	r3, pc, #456	; (adr r3, 1b1b8 <__kernel_cos+0x208>)
   1afee:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aff2:	f000 ff29 	bl	1be48 <__adddf3>
   1aff6:	4642      	mov	r2, r8
   1aff8:	464b      	mov	r3, r9
   1affa:	f001 f8d7 	bl	1c1ac <__aeabi_dmul>
   1affe:	a370      	add	r3, pc, #448	; (adr r3, 1b1c0 <__kernel_cos+0x210>)
   1b000:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b004:	f000 ff1e 	bl	1be44 <__aeabi_dsub>
   1b008:	4642      	mov	r2, r8
   1b00a:	464b      	mov	r3, r9
   1b00c:	f001 f8ce 	bl	1c1ac <__aeabi_dmul>
   1b010:	a36d      	add	r3, pc, #436	; (adr r3, 1b1c8 <__kernel_cos+0x218>)
   1b012:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b016:	f000 ff17 	bl	1be48 <__adddf3>
   1b01a:	4642      	mov	r2, r8
   1b01c:	464b      	mov	r3, r9
   1b01e:	f001 f8c5 	bl	1c1ac <__aeabi_dmul>
   1b022:	a36b      	add	r3, pc, #428	; (adr r3, 1b1d0 <__kernel_cos+0x220>)
   1b024:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b028:	f000 ff0c 	bl	1be44 <__aeabi_dsub>
   1b02c:	4642      	mov	r2, r8
   1b02e:	464b      	mov	r3, r9
   1b030:	f001 f8bc 	bl	1c1ac <__aeabi_dmul>
   1b034:	a368      	add	r3, pc, #416	; (adr r3, 1b1d8 <__kernel_cos+0x228>)
   1b036:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b03a:	f000 ff05 	bl	1be48 <__adddf3>
   1b03e:	4642      	mov	r2, r8
   1b040:	464b      	mov	r3, r9
   1b042:	f001 f8b3 	bl	1c1ac <__aeabi_dmul>
   1b046:	e9cd 0100 	strd	r0, r1, [sp]
   1b04a:	2200      	movs	r2, #0
   1b04c:	4b64      	ldr	r3, [pc, #400]	; (1b1e0 <__kernel_cos+0x230>)
   1b04e:	4640      	mov	r0, r8
   1b050:	4649      	mov	r1, r9
   1b052:	f001 f8ab 	bl	1c1ac <__aeabi_dmul>
   1b056:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b05a:	4606      	mov	r6, r0
   1b05c:	460f      	mov	r7, r1
   1b05e:	4640      	mov	r0, r8
   1b060:	4649      	mov	r1, r9
   1b062:	f001 f8a3 	bl	1c1ac <__aeabi_dmul>
   1b066:	4652      	mov	r2, sl
   1b068:	4680      	mov	r8, r0
   1b06a:	4689      	mov	r9, r1
   1b06c:	465b      	mov	r3, fp
   1b06e:	4628      	mov	r0, r5
   1b070:	4621      	mov	r1, r4
   1b072:	f001 f89b 	bl	1c1ac <__aeabi_dmul>
   1b076:	4602      	mov	r2, r0
   1b078:	460b      	mov	r3, r1
   1b07a:	4640      	mov	r0, r8
   1b07c:	4649      	mov	r1, r9
   1b07e:	f000 fee1 	bl	1be44 <__aeabi_dsub>
   1b082:	4602      	mov	r2, r0
   1b084:	460b      	mov	r3, r1
   1b086:	4630      	mov	r0, r6
   1b088:	4639      	mov	r1, r7
   1b08a:	f000 fedb 	bl	1be44 <__aeabi_dsub>
   1b08e:	4602      	mov	r2, r0
   1b090:	460b      	mov	r3, r1
   1b092:	2000      	movs	r0, #0
   1b094:	4953      	ldr	r1, [pc, #332]	; (1b1e4 <__kernel_cos+0x234>)
   1b096:	f000 fed5 	bl	1be44 <__aeabi_dsub>
   1b09a:	b005      	add	sp, #20
   1b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0a0:	4602      	mov	r2, r0
   1b0a2:	460b      	mov	r3, r1
   1b0a4:	f001 f882 	bl	1c1ac <__aeabi_dmul>
   1b0a8:	a341      	add	r3, pc, #260	; (adr r3, 1b1b0 <__kernel_cos+0x200>)
   1b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b0ae:	4680      	mov	r8, r0
   1b0b0:	4689      	mov	r9, r1
   1b0b2:	f001 f87b 	bl	1c1ac <__aeabi_dmul>
   1b0b6:	a340      	add	r3, pc, #256	; (adr r3, 1b1b8 <__kernel_cos+0x208>)
   1b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b0bc:	f000 fec4 	bl	1be48 <__adddf3>
   1b0c0:	4642      	mov	r2, r8
   1b0c2:	464b      	mov	r3, r9
   1b0c4:	f001 f872 	bl	1c1ac <__aeabi_dmul>
   1b0c8:	a33d      	add	r3, pc, #244	; (adr r3, 1b1c0 <__kernel_cos+0x210>)
   1b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b0ce:	f000 feb9 	bl	1be44 <__aeabi_dsub>
   1b0d2:	4642      	mov	r2, r8
   1b0d4:	464b      	mov	r3, r9
   1b0d6:	f001 f869 	bl	1c1ac <__aeabi_dmul>
   1b0da:	a33b      	add	r3, pc, #236	; (adr r3, 1b1c8 <__kernel_cos+0x218>)
   1b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b0e0:	f000 feb2 	bl	1be48 <__adddf3>
   1b0e4:	4642      	mov	r2, r8
   1b0e6:	464b      	mov	r3, r9
   1b0e8:	f001 f860 	bl	1c1ac <__aeabi_dmul>
   1b0ec:	a338      	add	r3, pc, #224	; (adr r3, 1b1d0 <__kernel_cos+0x220>)
   1b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b0f2:	f000 fea7 	bl	1be44 <__aeabi_dsub>
   1b0f6:	4642      	mov	r2, r8
   1b0f8:	464b      	mov	r3, r9
   1b0fa:	f001 f857 	bl	1c1ac <__aeabi_dmul>
   1b0fe:	a336      	add	r3, pc, #216	; (adr r3, 1b1d8 <__kernel_cos+0x228>)
   1b100:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b104:	f000 fea0 	bl	1be48 <__adddf3>
   1b108:	464b      	mov	r3, r9
   1b10a:	4642      	mov	r2, r8
   1b10c:	f001 f84e 	bl	1c1ac <__aeabi_dmul>
   1b110:	4b35      	ldr	r3, [pc, #212]	; (1b1e8 <__kernel_cos+0x238>)
   1b112:	429e      	cmp	r6, r3
   1b114:	e9cd 0100 	strd	r0, r1, [sp]
   1b118:	dd97      	ble.n	1b04a <__kernel_cos+0x9a>
   1b11a:	4b34      	ldr	r3, [pc, #208]	; (1b1ec <__kernel_cos+0x23c>)
   1b11c:	429e      	cmp	r6, r3
   1b11e:	f04f 0200 	mov.w	r2, #0
   1b122:	dc38      	bgt.n	1b196 <__kernel_cos+0x1e6>
   1b124:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
   1b128:	2000      	movs	r0, #0
   1b12a:	492e      	ldr	r1, [pc, #184]	; (1b1e4 <__kernel_cos+0x234>)
   1b12c:	4616      	mov	r6, r2
   1b12e:	461f      	mov	r7, r3
   1b130:	f000 fe88 	bl	1be44 <__aeabi_dsub>
   1b134:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b138:	2200      	movs	r2, #0
   1b13a:	4b29      	ldr	r3, [pc, #164]	; (1b1e0 <__kernel_cos+0x230>)
   1b13c:	4640      	mov	r0, r8
   1b13e:	4649      	mov	r1, r9
   1b140:	f001 f834 	bl	1c1ac <__aeabi_dmul>
   1b144:	4632      	mov	r2, r6
   1b146:	463b      	mov	r3, r7
   1b148:	f000 fe7c 	bl	1be44 <__aeabi_dsub>
   1b14c:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b150:	4606      	mov	r6, r0
   1b152:	460f      	mov	r7, r1
   1b154:	4640      	mov	r0, r8
   1b156:	4649      	mov	r1, r9
   1b158:	f001 f828 	bl	1c1ac <__aeabi_dmul>
   1b15c:	4652      	mov	r2, sl
   1b15e:	4680      	mov	r8, r0
   1b160:	4689      	mov	r9, r1
   1b162:	465b      	mov	r3, fp
   1b164:	4628      	mov	r0, r5
   1b166:	4621      	mov	r1, r4
   1b168:	f001 f820 	bl	1c1ac <__aeabi_dmul>
   1b16c:	4602      	mov	r2, r0
   1b16e:	460b      	mov	r3, r1
   1b170:	4640      	mov	r0, r8
   1b172:	4649      	mov	r1, r9
   1b174:	f000 fe66 	bl	1be44 <__aeabi_dsub>
   1b178:	4602      	mov	r2, r0
   1b17a:	460b      	mov	r3, r1
   1b17c:	4630      	mov	r0, r6
   1b17e:	4639      	mov	r1, r7
   1b180:	f000 fe60 	bl	1be44 <__aeabi_dsub>
   1b184:	4602      	mov	r2, r0
   1b186:	460b      	mov	r3, r1
   1b188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1b18c:	f000 fe5a 	bl	1be44 <__aeabi_dsub>
   1b190:	b005      	add	sp, #20
   1b192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b196:	4b16      	ldr	r3, [pc, #88]	; (1b1f0 <__kernel_cos+0x240>)
   1b198:	4f16      	ldr	r7, [pc, #88]	; (1b1f4 <__kernel_cos+0x244>)
   1b19a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b19e:	2600      	movs	r6, #0
   1b1a0:	e7ca      	b.n	1b138 <__kernel_cos+0x188>
   1b1a2:	4910      	ldr	r1, [pc, #64]	; (1b1e4 <__kernel_cos+0x234>)
   1b1a4:	2000      	movs	r0, #0
   1b1a6:	b005      	add	sp, #20
   1b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1ac:	f3af 8000 	nop.w
   1b1b0:	be8838d4 	.word	0xbe8838d4
   1b1b4:	bda8fae9 	.word	0xbda8fae9
   1b1b8:	bdb4b1c4 	.word	0xbdb4b1c4
   1b1bc:	3e21ee9e 	.word	0x3e21ee9e
   1b1c0:	809c52ad 	.word	0x809c52ad
   1b1c4:	3e927e4f 	.word	0x3e927e4f
   1b1c8:	19cb1590 	.word	0x19cb1590
   1b1cc:	3efa01a0 	.word	0x3efa01a0
   1b1d0:	16c15177 	.word	0x16c15177
   1b1d4:	3f56c16c 	.word	0x3f56c16c
   1b1d8:	5555554c 	.word	0x5555554c
   1b1dc:	3fa55555 	.word	0x3fa55555
   1b1e0:	3fe00000 	.word	0x3fe00000
   1b1e4:	3ff00000 	.word	0x3ff00000
   1b1e8:	3fd33332 	.word	0x3fd33332
   1b1ec:	3fe90000 	.word	0x3fe90000
   1b1f0:	3fe70000 	.word	0x3fe70000
   1b1f4:	3fd20000 	.word	0x3fd20000

0001b1f8 <__kernel_rem_pio2>:
   1b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1fc:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   1b200:	4c9c      	ldr	r4, [pc, #624]	; (1b474 <__kernel_rem_pio2+0x27c>)
   1b202:	9ea2      	ldr	r6, [sp, #648]	; 0x288
   1b204:	4d9c      	ldr	r5, [pc, #624]	; (1b478 <__kernel_rem_pio2+0x280>)
   1b206:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   1b20a:	9405      	str	r4, [sp, #20]
   1b20c:	4626      	mov	r6, r4
   1b20e:	1ed4      	subs	r4, r2, #3
   1b210:	fb85 7504 	smull	r7, r5, r5, r4
   1b214:	17e4      	asrs	r4, r4, #31
   1b216:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   1b21a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1b21e:	461d      	mov	r5, r3
   1b220:	9308      	str	r3, [sp, #32]
   1b222:	1c63      	adds	r3, r4, #1
   1b224:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1b228:	3d01      	subs	r5, #1
   1b22a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b22e:	9304      	str	r3, [sp, #16]
   1b230:	462b      	mov	r3, r5
   1b232:	9409      	str	r4, [sp, #36]	; 0x24
   1b234:	9502      	str	r5, [sp, #8]
   1b236:	1b65      	subs	r5, r4, r5
   1b238:	18f4      	adds	r4, r6, r3
   1b23a:	9003      	str	r0, [sp, #12]
   1b23c:	9106      	str	r1, [sp, #24]
   1b23e:	d41a      	bmi.n	1b276 <__kernel_rem_pio2+0x7e>
   1b240:	442c      	add	r4, r5
   1b242:	3401      	adds	r4, #1
   1b244:	f10d 0878 	add.w	r8, sp, #120	; 0x78
   1b248:	2600      	movs	r6, #0
   1b24a:	2700      	movs	r7, #0
   1b24c:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   1b250:	e008      	b.n	1b264 <__kernel_rem_pio2+0x6c>
   1b252:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   1b256:	f000 ff43 	bl	1c0e0 <__aeabi_i2d>
   1b25a:	3501      	adds	r5, #1
   1b25c:	42a5      	cmp	r5, r4
   1b25e:	e9e8 0102 	strd	r0, r1, [r8, #8]!
   1b262:	d008      	beq.n	1b276 <__kernel_rem_pio2+0x7e>
   1b264:	2d00      	cmp	r5, #0
   1b266:	daf4      	bge.n	1b252 <__kernel_rem_pio2+0x5a>
   1b268:	3501      	adds	r5, #1
   1b26a:	4630      	mov	r0, r6
   1b26c:	4639      	mov	r1, r7
   1b26e:	42a5      	cmp	r5, r4
   1b270:	e9e8 0102 	strd	r0, r1, [r8, #8]!
   1b274:	d1f6      	bne.n	1b264 <__kernel_rem_pio2+0x6c>
   1b276:	9b05      	ldr	r3, [sp, #20]
   1b278:	2b00      	cmp	r3, #0
   1b27a:	db2e      	blt.n	1b2da <__kernel_rem_pio2+0xe2>
   1b27c:	9b08      	ldr	r3, [sp, #32]
   1b27e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   1b282:	9b03      	ldr	r3, [sp, #12]
   1b284:	f1a9 0808 	sub.w	r8, r9, #8
   1b288:	4498      	add	r8, r3
   1b28a:	ab20      	add	r3, sp, #128	; 0x80
   1b28c:	4499      	add	r9, r3
   1b28e:	9b05      	ldr	r3, [sp, #20]
   1b290:	aa70      	add	r2, sp, #448	; 0x1c0
   1b292:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   1b296:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
   1b29a:	9b02      	ldr	r3, [sp, #8]
   1b29c:	2b00      	cmp	r3, #0
   1b29e:	f2c0 830f 	blt.w	1b8c0 <__kernel_rem_pio2+0x6c8>
   1b2a2:	9b03      	ldr	r3, [sp, #12]
   1b2a4:	464d      	mov	r5, r9
   1b2a6:	f1a3 0408 	sub.w	r4, r3, #8
   1b2aa:	2600      	movs	r6, #0
   1b2ac:	2700      	movs	r7, #0
   1b2ae:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1b2b2:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
   1b2b6:	f000 ff79 	bl	1c1ac <__aeabi_dmul>
   1b2ba:	4602      	mov	r2, r0
   1b2bc:	460b      	mov	r3, r1
   1b2be:	4630      	mov	r0, r6
   1b2c0:	4639      	mov	r1, r7
   1b2c2:	f000 fdc1 	bl	1be48 <__adddf3>
   1b2c6:	4544      	cmp	r4, r8
   1b2c8:	4606      	mov	r6, r0
   1b2ca:	460f      	mov	r7, r1
   1b2cc:	d1ef      	bne.n	1b2ae <__kernel_rem_pio2+0xb6>
   1b2ce:	e9ea 6702 	strd	r6, r7, [sl, #8]!
   1b2d2:	45da      	cmp	sl, fp
   1b2d4:	f109 0908 	add.w	r9, r9, #8
   1b2d8:	d1df      	bne.n	1b29a <__kernel_rem_pio2+0xa2>
   1b2da:	9805      	ldr	r0, [sp, #20]
   1b2dc:	9a08      	ldr	r2, [sp, #32]
   1b2de:	9000      	str	r0, [sp, #0]
   1b2e0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1b2e4:	3b01      	subs	r3, #1
   1b2e6:	009b      	lsls	r3, r3, #2
   1b2e8:	ac0c      	add	r4, sp, #48	; 0x30
   1b2ea:	1f19      	subs	r1, r3, #4
   1b2ec:	4423      	add	r3, r4
   1b2ee:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   1b2f2:	930b      	str	r3, [sp, #44]	; 0x2c
   1b2f4:	9b03      	ldr	r3, [sp, #12]
   1b2f6:	3a01      	subs	r2, #1
   1b2f8:	4421      	add	r1, r4
   1b2fa:	910a      	str	r1, [sp, #40]	; 0x28
   1b2fc:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
   1b300:	9a00      	ldr	r2, [sp, #0]
   1b302:	a998      	add	r1, sp, #608	; 0x260
   1b304:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   1b308:	2a00      	cmp	r2, #0
   1b30a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1b30e:	4613      	mov	r3, r2
   1b310:	dd2b      	ble.n	1b36a <__kernel_rem_pio2+0x172>
   1b312:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   1b316:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
   1b31a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   1b31e:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
   1b322:	2200      	movs	r2, #0
   1b324:	4b55      	ldr	r3, [pc, #340]	; (1b47c <__kernel_rem_pio2+0x284>)
   1b326:	4620      	mov	r0, r4
   1b328:	4629      	mov	r1, r5
   1b32a:	f000 ff3f 	bl	1c1ac <__aeabi_dmul>
   1b32e:	f001 f9ed 	bl	1c70c <__aeabi_d2iz>
   1b332:	f000 fed5 	bl	1c0e0 <__aeabi_i2d>
   1b336:	2200      	movs	r2, #0
   1b338:	4b51      	ldr	r3, [pc, #324]	; (1b480 <__kernel_rem_pio2+0x288>)
   1b33a:	4606      	mov	r6, r0
   1b33c:	460f      	mov	r7, r1
   1b33e:	f000 ff35 	bl	1c1ac <__aeabi_dmul>
   1b342:	4602      	mov	r2, r0
   1b344:	460b      	mov	r3, r1
   1b346:	4620      	mov	r0, r4
   1b348:	4629      	mov	r1, r5
   1b34a:	f000 fd7b 	bl	1be44 <__aeabi_dsub>
   1b34e:	f001 f9dd 	bl	1c70c <__aeabi_d2iz>
   1b352:	e878 2302 	ldrd	r2, r3, [r8], #-8
   1b356:	f849 0f04 	str.w	r0, [r9, #4]!
   1b35a:	4639      	mov	r1, r7
   1b35c:	4630      	mov	r0, r6
   1b35e:	f000 fd73 	bl	1be48 <__adddf3>
   1b362:	45d0      	cmp	r8, sl
   1b364:	4604      	mov	r4, r0
   1b366:	460d      	mov	r5, r1
   1b368:	d1db      	bne.n	1b322 <__kernel_rem_pio2+0x12a>
   1b36a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1b36e:	4620      	mov	r0, r4
   1b370:	4629      	mov	r1, r5
   1b372:	464a      	mov	r2, r9
   1b374:	f000 fcdc 	bl	1bd30 <scalbn>
   1b378:	2200      	movs	r2, #0
   1b37a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1b37e:	4604      	mov	r4, r0
   1b380:	460d      	mov	r5, r1
   1b382:	f000 ff13 	bl	1c1ac <__aeabi_dmul>
   1b386:	f7fe fb9b 	bl	19ac0 <floor>
   1b38a:	2200      	movs	r2, #0
   1b38c:	4b3d      	ldr	r3, [pc, #244]	; (1b484 <__kernel_rem_pio2+0x28c>)
   1b38e:	f000 ff0d 	bl	1c1ac <__aeabi_dmul>
   1b392:	4602      	mov	r2, r0
   1b394:	460b      	mov	r3, r1
   1b396:	4620      	mov	r0, r4
   1b398:	4629      	mov	r1, r5
   1b39a:	f000 fd53 	bl	1be44 <__aeabi_dsub>
   1b39e:	460d      	mov	r5, r1
   1b3a0:	4604      	mov	r4, r0
   1b3a2:	f001 f9b3 	bl	1c70c <__aeabi_d2iz>
   1b3a6:	4680      	mov	r8, r0
   1b3a8:	f000 fe9a 	bl	1c0e0 <__aeabi_i2d>
   1b3ac:	460b      	mov	r3, r1
   1b3ae:	4602      	mov	r2, r0
   1b3b0:	4629      	mov	r1, r5
   1b3b2:	4620      	mov	r0, r4
   1b3b4:	f000 fd46 	bl	1be44 <__aeabi_dsub>
   1b3b8:	464b      	mov	r3, r9
   1b3ba:	2b00      	cmp	r3, #0
   1b3bc:	4606      	mov	r6, r0
   1b3be:	460f      	mov	r7, r1
   1b3c0:	f340 80f7 	ble.w	1b5b2 <__kernel_rem_pio2+0x3ba>
   1b3c4:	9a00      	ldr	r2, [sp, #0]
   1b3c6:	a90c      	add	r1, sp, #48	; 0x30
   1b3c8:	3a01      	subs	r2, #1
   1b3ca:	f1c9 0318 	rsb	r3, r9, #24
   1b3ce:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   1b3d2:	fa45 f103 	asr.w	r1, r5, r3
   1b3d6:	fa01 f303 	lsl.w	r3, r1, r3
   1b3da:	a80c      	add	r0, sp, #48	; 0x30
   1b3dc:	1aeb      	subs	r3, r5, r3
   1b3de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   1b3e2:	f1c9 0517 	rsb	r5, r9, #23
   1b3e6:	4488      	add	r8, r1
   1b3e8:	fa43 f505 	asr.w	r5, r3, r5
   1b3ec:	2d00      	cmp	r5, #0
   1b3ee:	dd63      	ble.n	1b4b8 <__kernel_rem_pio2+0x2c0>
   1b3f0:	9b00      	ldr	r3, [sp, #0]
   1b3f2:	2b00      	cmp	r3, #0
   1b3f4:	f108 0801 	add.w	r8, r8, #1
   1b3f8:	f340 8281 	ble.w	1b8fe <__kernel_rem_pio2+0x706>
   1b3fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1b3fe:	2c00      	cmp	r4, #0
   1b400:	f000 8318 	beq.w	1ba34 <__kernel_rem_pio2+0x83c>
   1b404:	2001      	movs	r0, #1
   1b406:	2300      	movs	r3, #0
   1b408:	aa0c      	add	r2, sp, #48	; 0x30
   1b40a:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   1b40e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   1b412:	9a00      	ldr	r2, [sp, #0]
   1b414:	4282      	cmp	r2, r0
   1b416:	dd19      	ble.n	1b44c <__kernel_rem_pio2+0x254>
   1b418:	aa0c      	add	r2, sp, #48	; 0x30
   1b41a:	ac0c      	add	r4, sp, #48	; 0x30
   1b41c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   1b420:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
   1b424:	1a51      	subs	r1, r2, r1
   1b426:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
   1b42a:	9900      	ldr	r1, [sp, #0]
   1b42c:	3302      	adds	r3, #2
   1b42e:	4299      	cmp	r1, r3
   1b430:	dd0c      	ble.n	1b44c <__kernel_rem_pio2+0x254>
   1b432:	4610      	mov	r0, r2
   1b434:	9a00      	ldr	r2, [sp, #0]
   1b436:	a90c      	add	r1, sp, #48	; 0x30
   1b438:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1b43c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   1b440:	681a      	ldr	r2, [r3, #0]
   1b442:	1a82      	subs	r2, r0, r2
   1b444:	f843 2b04 	str.w	r2, [r3], #4
   1b448:	428b      	cmp	r3, r1
   1b44a:	d1f9      	bne.n	1b440 <__kernel_rem_pio2+0x248>
   1b44c:	9b04      	ldr	r3, [sp, #16]
   1b44e:	2b00      	cmp	r3, #0
   1b450:	dd1a      	ble.n	1b488 <__kernel_rem_pio2+0x290>
   1b452:	9b04      	ldr	r3, [sp, #16]
   1b454:	2b01      	cmp	r3, #1
   1b456:	f04f 0401 	mov.w	r4, #1
   1b45a:	f040 8258 	bne.w	1b90e <__kernel_rem_pio2+0x716>
   1b45e:	9b00      	ldr	r3, [sp, #0]
   1b460:	1e5a      	subs	r2, r3, #1
   1b462:	ab0c      	add	r3, sp, #48	; 0x30
   1b464:	a90c      	add	r1, sp, #48	; 0x30
   1b466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b46a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1b46e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1b472:	e258      	b.n	1b926 <__kernel_rem_pio2+0x72e>
   1b474:	000234d0 	.word	0x000234d0
   1b478:	2aaaaaab 	.word	0x2aaaaaab
   1b47c:	3e700000 	.word	0x3e700000
   1b480:	41700000 	.word	0x41700000
   1b484:	40200000 	.word	0x40200000
   1b488:	2d02      	cmp	r5, #2
   1b48a:	d115      	bne.n	1b4b8 <__kernel_rem_pio2+0x2c0>
   1b48c:	4632      	mov	r2, r6
   1b48e:	463b      	mov	r3, r7
   1b490:	2000      	movs	r0, #0
   1b492:	4997      	ldr	r1, [pc, #604]	; (1b6f0 <__kernel_rem_pio2+0x4f8>)
   1b494:	f000 fcd6 	bl	1be44 <__aeabi_dsub>
   1b498:	4606      	mov	r6, r0
   1b49a:	460f      	mov	r7, r1
   1b49c:	9a04      	ldr	r2, [sp, #16]
   1b49e:	4994      	ldr	r1, [pc, #592]	; (1b6f0 <__kernel_rem_pio2+0x4f8>)
   1b4a0:	2000      	movs	r0, #0
   1b4a2:	f000 fc45 	bl	1bd30 <scalbn>
   1b4a6:	4602      	mov	r2, r0
   1b4a8:	460b      	mov	r3, r1
   1b4aa:	4630      	mov	r0, r6
   1b4ac:	4639      	mov	r1, r7
   1b4ae:	f000 fcc9 	bl	1be44 <__aeabi_dsub>
   1b4b2:	2502      	movs	r5, #2
   1b4b4:	4606      	mov	r6, r0
   1b4b6:	460f      	mov	r7, r1
   1b4b8:	2200      	movs	r2, #0
   1b4ba:	2300      	movs	r3, #0
   1b4bc:	4630      	mov	r0, r6
   1b4be:	4639      	mov	r1, r7
   1b4c0:	f001 f8dc 	bl	1c67c <__aeabi_dcmpeq>
   1b4c4:	2800      	cmp	r0, #0
   1b4c6:	f000 8252 	beq.w	1b96e <__kernel_rem_pio2+0x776>
   1b4ca:	9a00      	ldr	r2, [sp, #0]
   1b4cc:	9b05      	ldr	r3, [sp, #20]
   1b4ce:	1e50      	subs	r0, r2, #1
   1b4d0:	4283      	cmp	r3, r0
   1b4d2:	dc0f      	bgt.n	1b4f4 <__kernel_rem_pio2+0x2fc>
   1b4d4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1b4d8:	3b01      	subs	r3, #1
   1b4da:	aa0c      	add	r2, sp, #48	; 0x30
   1b4dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1b4de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1b4e2:	2200      	movs	r2, #0
   1b4e4:	f853 1904 	ldr.w	r1, [r3], #-4
   1b4e8:	42a3      	cmp	r3, r4
   1b4ea:	ea42 0201 	orr.w	r2, r2, r1
   1b4ee:	d1f9      	bne.n	1b4e4 <__kernel_rem_pio2+0x2ec>
   1b4f0:	2a00      	cmp	r2, #0
   1b4f2:	d16f      	bne.n	1b5d4 <__kernel_rem_pio2+0x3dc>
   1b4f4:	9b05      	ldr	r3, [sp, #20]
   1b4f6:	aa0c      	add	r2, sp, #48	; 0x30
   1b4f8:	3b01      	subs	r3, #1
   1b4fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1b4fe:	2b00      	cmp	r3, #0
   1b500:	f040 8233 	bne.w	1b96a <__kernel_rem_pio2+0x772>
   1b504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b506:	2301      	movs	r3, #1
   1b508:	f852 1904 	ldr.w	r1, [r2], #-4
   1b50c:	3301      	adds	r3, #1
   1b50e:	2900      	cmp	r1, #0
   1b510:	d0fa      	beq.n	1b508 <__kernel_rem_pio2+0x310>
   1b512:	9a00      	ldr	r2, [sp, #0]
   1b514:	18d3      	adds	r3, r2, r3
   1b516:	f102 0a01 	add.w	sl, r2, #1
   1b51a:	459a      	cmp	sl, r3
   1b51c:	9307      	str	r3, [sp, #28]
   1b51e:	dc3d      	bgt.n	1b59c <__kernel_rem_pio2+0x3a4>
   1b520:	9b00      	ldr	r3, [sp, #0]
   1b522:	9908      	ldr	r1, [sp, #32]
   1b524:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b526:	440b      	add	r3, r1
   1b528:	9907      	ldr	r1, [sp, #28]
   1b52a:	eb0a 0802 	add.w	r8, sl, r2
   1b52e:	4699      	mov	r9, r3
   1b530:	ab20      	add	r3, sp, #128	; 0x80
   1b532:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1b536:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   1b53a:	188b      	adds	r3, r1, r2
   1b53c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   1b53e:	f108 38ff 	add.w	r8, r8, #4294967295
   1b542:	eb02 0888 	add.w	r8, r2, r8, lsl #2
   1b546:	aa70      	add	r2, sp, #448	; 0x1c0
   1b548:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
   1b54c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   1b54e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1b552:	9300      	str	r3, [sp, #0]
   1b554:	f858 0f04 	ldr.w	r0, [r8, #4]!
   1b558:	f000 fdc2 	bl	1c0e0 <__aeabi_i2d>
   1b55c:	9b02      	ldr	r3, [sp, #8]
   1b55e:	2b00      	cmp	r3, #0
   1b560:	e8e9 0102 	strd	r0, r1, [r9], #8
   1b564:	db1d      	blt.n	1b5a2 <__kernel_rem_pio2+0x3aa>
   1b566:	9b03      	ldr	r3, [sp, #12]
   1b568:	464d      	mov	r5, r9
   1b56a:	f1a3 0408 	sub.w	r4, r3, #8
   1b56e:	2600      	movs	r6, #0
   1b570:	2700      	movs	r7, #0
   1b572:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1b576:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
   1b57a:	f000 fe17 	bl	1c1ac <__aeabi_dmul>
   1b57e:	4602      	mov	r2, r0
   1b580:	460b      	mov	r3, r1
   1b582:	4630      	mov	r0, r6
   1b584:	4639      	mov	r1, r7
   1b586:	f000 fc5f 	bl	1be48 <__adddf3>
   1b58a:	455c      	cmp	r4, fp
   1b58c:	4606      	mov	r6, r0
   1b58e:	460f      	mov	r7, r1
   1b590:	d1ef      	bne.n	1b572 <__kernel_rem_pio2+0x37a>
   1b592:	9b00      	ldr	r3, [sp, #0]
   1b594:	4598      	cmp	r8, r3
   1b596:	e8ea 6702 	strd	r6, r7, [sl], #8
   1b59a:	d1db      	bne.n	1b554 <__kernel_rem_pio2+0x35c>
   1b59c:	9b07      	ldr	r3, [sp, #28]
   1b59e:	9300      	str	r3, [sp, #0]
   1b5a0:	e6ae      	b.n	1b300 <__kernel_rem_pio2+0x108>
   1b5a2:	9b00      	ldr	r3, [sp, #0]
   1b5a4:	2600      	movs	r6, #0
   1b5a6:	2700      	movs	r7, #0
   1b5a8:	4598      	cmp	r8, r3
   1b5aa:	e8ea 6702 	strd	r6, r7, [sl], #8
   1b5ae:	d1d1      	bne.n	1b554 <__kernel_rem_pio2+0x35c>
   1b5b0:	e7f4      	b.n	1b59c <__kernel_rem_pio2+0x3a4>
   1b5b2:	d106      	bne.n	1b5c2 <__kernel_rem_pio2+0x3ca>
   1b5b4:	9b00      	ldr	r3, [sp, #0]
   1b5b6:	aa0c      	add	r2, sp, #48	; 0x30
   1b5b8:	3b01      	subs	r3, #1
   1b5ba:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1b5be:	15ed      	asrs	r5, r5, #23
   1b5c0:	e714      	b.n	1b3ec <__kernel_rem_pio2+0x1f4>
   1b5c2:	2200      	movs	r2, #0
   1b5c4:	4b4b      	ldr	r3, [pc, #300]	; (1b6f4 <__kernel_rem_pio2+0x4fc>)
   1b5c6:	f001 f877 	bl	1c6b8 <__aeabi_dcmpge>
   1b5ca:	2800      	cmp	r0, #0
   1b5cc:	f040 8182 	bne.w	1b8d4 <__kernel_rem_pio2+0x6dc>
   1b5d0:	4605      	mov	r5, r0
   1b5d2:	e771      	b.n	1b4b8 <__kernel_rem_pio2+0x2c0>
   1b5d4:	a90c      	add	r1, sp, #48	; 0x30
   1b5d6:	9502      	str	r5, [sp, #8]
   1b5d8:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   1b5dc:	9904      	ldr	r1, [sp, #16]
   1b5de:	f8cd 801c 	str.w	r8, [sp, #28]
   1b5e2:	3918      	subs	r1, #24
   1b5e4:	4602      	mov	r2, r0
   1b5e6:	9000      	str	r0, [sp, #0]
   1b5e8:	9104      	str	r1, [sp, #16]
   1b5ea:	b96b      	cbnz	r3, 1b608 <__kernel_rem_pio2+0x410>
   1b5ec:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1b5f0:	3b01      	subs	r3, #1
   1b5f2:	a80c      	add	r0, sp, #48	; 0x30
   1b5f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1b5f8:	f853 0904 	ldr.w	r0, [r3], #-4
   1b5fc:	3a01      	subs	r2, #1
   1b5fe:	3918      	subs	r1, #24
   1b600:	2800      	cmp	r0, #0
   1b602:	d0f9      	beq.n	1b5f8 <__kernel_rem_pio2+0x400>
   1b604:	9200      	str	r2, [sp, #0]
   1b606:	9104      	str	r1, [sp, #16]
   1b608:	9a04      	ldr	r2, [sp, #16]
   1b60a:	4939      	ldr	r1, [pc, #228]	; (1b6f0 <__kernel_rem_pio2+0x4f8>)
   1b60c:	2000      	movs	r0, #0
   1b60e:	f000 fb8f 	bl	1bd30 <scalbn>
   1b612:	9b00      	ldr	r3, [sp, #0]
   1b614:	2b00      	cmp	r3, #0
   1b616:	4604      	mov	r4, r0
   1b618:	460d      	mov	r5, r1
   1b61a:	f2c0 8203 	blt.w	1ba24 <__kernel_rem_pio2+0x82c>
   1b61e:	00da      	lsls	r2, r3, #3
   1b620:	a970      	add	r1, sp, #448	; 0x1c0
   1b622:	eb01 0b02 	add.w	fp, r1, r2
   1b626:	9204      	str	r2, [sp, #16]
   1b628:	aa0c      	add	r2, sp, #48	; 0x30
   1b62a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
   1b62e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1b6f8 <__kernel_rem_pio2+0x500>
   1b632:	f10b 0708 	add.w	r7, fp, #8
   1b636:	3604      	adds	r6, #4
   1b638:	f04f 0800 	mov.w	r8, #0
   1b63c:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   1b640:	f000 fd4e 	bl	1c0e0 <__aeabi_i2d>
   1b644:	4622      	mov	r2, r4
   1b646:	462b      	mov	r3, r5
   1b648:	f000 fdb0 	bl	1c1ac <__aeabi_dmul>
   1b64c:	464b      	mov	r3, r9
   1b64e:	e967 0102 	strd	r0, r1, [r7, #-8]!
   1b652:	4642      	mov	r2, r8
   1b654:	4620      	mov	r0, r4
   1b656:	4629      	mov	r1, r5
   1b658:	f000 fda8 	bl	1c1ac <__aeabi_dmul>
   1b65c:	ab0c      	add	r3, sp, #48	; 0x30
   1b65e:	429e      	cmp	r6, r3
   1b660:	4604      	mov	r4, r0
   1b662:	460d      	mov	r5, r1
   1b664:	d1ea      	bne.n	1b63c <__kernel_rem_pio2+0x444>
   1b666:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
   1b66a:	f8cd a00c 	str.w	sl, [sp, #12]
   1b66e:	f8dd a014 	ldr.w	sl, [sp, #20]
   1b672:	f04f 0900 	mov.w	r9, #0
   1b676:	f1ba 0f00 	cmp.w	sl, #0
   1b67a:	f2c0 813d 	blt.w	1b8f8 <__kernel_rem_pio2+0x700>
   1b67e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1b6fc <__kernel_rem_pio2+0x504>
   1b682:	465d      	mov	r5, fp
   1b684:	a118      	add	r1, pc, #96	; (adr r1, 1b6e8 <__kernel_rem_pio2+0x4f0>)
   1b686:	e9d1 0100 	ldrd	r0, r1, [r1]
   1b68a:	2600      	movs	r6, #0
   1b68c:	2700      	movs	r7, #0
   1b68e:	2400      	movs	r4, #0
   1b690:	e003      	b.n	1b69a <__kernel_rem_pio2+0x4a2>
   1b692:	454c      	cmp	r4, r9
   1b694:	dc10      	bgt.n	1b6b8 <__kernel_rem_pio2+0x4c0>
   1b696:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1b69a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1b69e:	f000 fd85 	bl	1c1ac <__aeabi_dmul>
   1b6a2:	4602      	mov	r2, r0
   1b6a4:	460b      	mov	r3, r1
   1b6a6:	4630      	mov	r0, r6
   1b6a8:	4639      	mov	r1, r7
   1b6aa:	f000 fbcd 	bl	1be48 <__adddf3>
   1b6ae:	3401      	adds	r4, #1
   1b6b0:	45a2      	cmp	sl, r4
   1b6b2:	4606      	mov	r6, r0
   1b6b4:	460f      	mov	r7, r1
   1b6b6:	daec      	bge.n	1b692 <__kernel_rem_pio2+0x49a>
   1b6b8:	9b03      	ldr	r3, [sp, #12]
   1b6ba:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1b6be:	f1ab 0b08 	sub.w	fp, fp, #8
   1b6c2:	e9c3 6700 	strd	r6, r7, [r3]
   1b6c6:	ab6e      	add	r3, sp, #440	; 0x1b8
   1b6c8:	455b      	cmp	r3, fp
   1b6ca:	f109 0901 	add.w	r9, r9, #1
   1b6ce:	d1d2      	bne.n	1b676 <__kernel_rem_pio2+0x47e>
   1b6d0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1b6d2:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1b6d6:	2b03      	cmp	r3, #3
   1b6d8:	f200 808b 	bhi.w	1b7f2 <__kernel_rem_pio2+0x5fa>
   1b6dc:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b6e0:	009000d1 	.word	0x009000d1
   1b6e4:	00100090 	.word	0x00100090
   1b6e8:	40000000 	.word	0x40000000
   1b6ec:	3ff921fb 	.word	0x3ff921fb
   1b6f0:	3ff00000 	.word	0x3ff00000
   1b6f4:	3fe00000 	.word	0x3fe00000
   1b6f8:	3e700000 	.word	0x3e700000
   1b6fc:	00023498 	.word	0x00023498
   1b700:	9b00      	ldr	r3, [sp, #0]
   1b702:	2b00      	cmp	r3, #0
   1b704:	f340 81a4 	ble.w	1ba50 <__kernel_rem_pio2+0x858>
   1b708:	9b04      	ldr	r3, [sp, #16]
   1b70a:	eb0a 0803 	add.w	r8, sl, r3
   1b70e:	e9d8 6700 	ldrd	r6, r7, [r8]
   1b712:	46d3      	mov	fp, sl
   1b714:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
   1b718:	4632      	mov	r2, r6
   1b71a:	463b      	mov	r3, r7
   1b71c:	4648      	mov	r0, r9
   1b71e:	4651      	mov	r1, sl
   1b720:	f000 fb92 	bl	1be48 <__adddf3>
   1b724:	4604      	mov	r4, r0
   1b726:	460d      	mov	r5, r1
   1b728:	4602      	mov	r2, r0
   1b72a:	460b      	mov	r3, r1
   1b72c:	4648      	mov	r0, r9
   1b72e:	4651      	mov	r1, sl
   1b730:	f000 fb88 	bl	1be44 <__aeabi_dsub>
   1b734:	4632      	mov	r2, r6
   1b736:	463b      	mov	r3, r7
   1b738:	f000 fb86 	bl	1be48 <__adddf3>
   1b73c:	e9c8 0100 	strd	r0, r1, [r8]
   1b740:	e968 4502 	strd	r4, r5, [r8, #-8]!
   1b744:	45c3      	cmp	fp, r8
   1b746:	4626      	mov	r6, r4
   1b748:	462f      	mov	r7, r5
   1b74a:	d1e3      	bne.n	1b714 <__kernel_rem_pio2+0x51c>
   1b74c:	9b00      	ldr	r3, [sp, #0]
   1b74e:	2b01      	cmp	r3, #1
   1b750:	46da      	mov	sl, fp
   1b752:	f340 817d 	ble.w	1ba50 <__kernel_rem_pio2+0x858>
   1b756:	9b04      	ldr	r3, [sp, #16]
   1b758:	445b      	add	r3, fp
   1b75a:	e9d3 6700 	ldrd	r6, r7, [r3]
   1b75e:	4698      	mov	r8, r3
   1b760:	4699      	mov	r9, r3
   1b762:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   1b766:	e959 3402 	ldrd	r3, r4, [r9, #-8]
   1b76a:	4632      	mov	r2, r6
   1b76c:	4618      	mov	r0, r3
   1b76e:	4621      	mov	r1, r4
   1b770:	463b      	mov	r3, r7
   1b772:	e9cd 0100 	strd	r0, r1, [sp]
   1b776:	f000 fb67 	bl	1be48 <__adddf3>
   1b77a:	4604      	mov	r4, r0
   1b77c:	460d      	mov	r5, r1
   1b77e:	4602      	mov	r2, r0
   1b780:	460b      	mov	r3, r1
   1b782:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b786:	f000 fb5d 	bl	1be44 <__aeabi_dsub>
   1b78a:	4632      	mov	r2, r6
   1b78c:	463b      	mov	r3, r7
   1b78e:	f000 fb5b 	bl	1be48 <__adddf3>
   1b792:	e9c9 0100 	strd	r0, r1, [r9]
   1b796:	e969 4502 	strd	r4, r5, [r9, #-8]!
   1b79a:	45cb      	cmp	fp, r9
   1b79c:	4626      	mov	r6, r4
   1b79e:	462f      	mov	r7, r5
   1b7a0:	d1e1      	bne.n	1b766 <__kernel_rem_pio2+0x56e>
   1b7a2:	2300      	movs	r3, #0
   1b7a4:	f108 0808 	add.w	r8, r8, #8
   1b7a8:	461d      	mov	r5, r3
   1b7aa:	ac4c      	add	r4, sp, #304	; 0x130
   1b7ac:	4618      	mov	r0, r3
   1b7ae:	4629      	mov	r1, r5
   1b7b0:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   1b7b4:	f000 fb48 	bl	1be48 <__adddf3>
   1b7b8:	4544      	cmp	r4, r8
   1b7ba:	4603      	mov	r3, r0
   1b7bc:	460d      	mov	r5, r1
   1b7be:	d1f5      	bne.n	1b7ac <__kernel_rem_pio2+0x5b4>
   1b7c0:	9a02      	ldr	r2, [sp, #8]
   1b7c2:	2a00      	cmp	r2, #0
   1b7c4:	f000 8120 	beq.w	1ba08 <__kernel_rem_pio2+0x810>
   1b7c8:	f8da 4004 	ldr.w	r4, [sl, #4]
   1b7cc:	f8da 200c 	ldr.w	r2, [sl, #12]
   1b7d0:	9f06      	ldr	r7, [sp, #24]
   1b7d2:	f8da 1000 	ldr.w	r1, [sl]
   1b7d6:	f8da 0008 	ldr.w	r0, [sl, #8]
   1b7da:	613b      	str	r3, [r7, #16]
   1b7dc:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
   1b7e0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
   1b7e4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1b7e8:	617d      	str	r5, [r7, #20]
   1b7ea:	607c      	str	r4, [r7, #4]
   1b7ec:	60fa      	str	r2, [r7, #12]
   1b7ee:	6039      	str	r1, [r7, #0]
   1b7f0:	60b8      	str	r0, [r7, #8]
   1b7f2:	9b07      	ldr	r3, [sp, #28]
   1b7f4:	f003 0007 	and.w	r0, r3, #7
   1b7f8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1b7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b800:	9c04      	ldr	r4, [sp, #16]
   1b802:	2600      	movs	r6, #0
   1b804:	3408      	adds	r4, #8
   1b806:	4454      	add	r4, sl
   1b808:	4633      	mov	r3, r6
   1b80a:	4630      	mov	r0, r6
   1b80c:	4619      	mov	r1, r3
   1b80e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1b812:	f000 fb19 	bl	1be48 <__adddf3>
   1b816:	4554      	cmp	r4, sl
   1b818:	4606      	mov	r6, r0
   1b81a:	460b      	mov	r3, r1
   1b81c:	d1f5      	bne.n	1b80a <__kernel_rem_pio2+0x612>
   1b81e:	9a02      	ldr	r2, [sp, #8]
   1b820:	4630      	mov	r0, r6
   1b822:	4619      	mov	r1, r3
   1b824:	2a00      	cmp	r2, #0
   1b826:	f000 80da 	beq.w	1b9de <__kernel_rem_pio2+0x7e6>
   1b82a:	9806      	ldr	r0, [sp, #24]
   1b82c:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
   1b830:	4632      	mov	r2, r6
   1b832:	6044      	str	r4, [r0, #4]
   1b834:	6006      	str	r6, [r0, #0]
   1b836:	e9da 0100 	ldrd	r0, r1, [sl]
   1b83a:	f000 fb03 	bl	1be44 <__aeabi_dsub>
   1b83e:	460b      	mov	r3, r1
   1b840:	9900      	ldr	r1, [sp, #0]
   1b842:	2900      	cmp	r1, #0
   1b844:	4602      	mov	r2, r0
   1b846:	dd0e      	ble.n	1b866 <__kernel_rem_pio2+0x66e>
   1b848:	2401      	movs	r4, #1
   1b84a:	4610      	mov	r0, r2
   1b84c:	4619      	mov	r1, r3
   1b84e:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
   1b852:	f000 faf9 	bl	1be48 <__adddf3>
   1b856:	460b      	mov	r3, r1
   1b858:	9900      	ldr	r1, [sp, #0]
   1b85a:	3401      	adds	r4, #1
   1b85c:	42a1      	cmp	r1, r4
   1b85e:	4602      	mov	r2, r0
   1b860:	daf3      	bge.n	1b84a <__kernel_rem_pio2+0x652>
   1b862:	9902      	ldr	r1, [sp, #8]
   1b864:	b109      	cbz	r1, 1b86a <__kernel_rem_pio2+0x672>
   1b866:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1b86a:	4619      	mov	r1, r3
   1b86c:	9b06      	ldr	r3, [sp, #24]
   1b86e:	4610      	mov	r0, r2
   1b870:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1b874:	9b07      	ldr	r3, [sp, #28]
   1b876:	f003 0007 	and.w	r0, r3, #7
   1b87a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1b87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b882:	9c04      	ldr	r4, [sp, #16]
   1b884:	2200      	movs	r2, #0
   1b886:	3408      	adds	r4, #8
   1b888:	4454      	add	r4, sl
   1b88a:	4613      	mov	r3, r2
   1b88c:	4610      	mov	r0, r2
   1b88e:	4619      	mov	r1, r3
   1b890:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1b894:	f000 fad8 	bl	1be48 <__adddf3>
   1b898:	45a2      	cmp	sl, r4
   1b89a:	4602      	mov	r2, r0
   1b89c:	460b      	mov	r3, r1
   1b89e:	d1f5      	bne.n	1b88c <__kernel_rem_pio2+0x694>
   1b8a0:	9902      	ldr	r1, [sp, #8]
   1b8a2:	b109      	cbz	r1, 1b8a8 <__kernel_rem_pio2+0x6b0>
   1b8a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1b8a8:	4619      	mov	r1, r3
   1b8aa:	9b06      	ldr	r3, [sp, #24]
   1b8ac:	4610      	mov	r0, r2
   1b8ae:	e9c3 0100 	strd	r0, r1, [r3]
   1b8b2:	9b07      	ldr	r3, [sp, #28]
   1b8b4:	f003 0007 	and.w	r0, r3, #7
   1b8b8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1b8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8c0:	2600      	movs	r6, #0
   1b8c2:	2700      	movs	r7, #0
   1b8c4:	e9ea 6702 	strd	r6, r7, [sl, #8]!
   1b8c8:	45da      	cmp	sl, fp
   1b8ca:	f109 0908 	add.w	r9, r9, #8
   1b8ce:	f47f ace4 	bne.w	1b29a <__kernel_rem_pio2+0xa2>
   1b8d2:	e502      	b.n	1b2da <__kernel_rem_pio2+0xe2>
   1b8d4:	9b00      	ldr	r3, [sp, #0]
   1b8d6:	2b00      	cmp	r3, #0
   1b8d8:	f108 0801 	add.w	r8, r8, #1
   1b8dc:	bfc8      	it	gt
   1b8de:	2502      	movgt	r5, #2
   1b8e0:	f73f ad8c 	bgt.w	1b3fc <__kernel_rem_pio2+0x204>
   1b8e4:	4632      	mov	r2, r6
   1b8e6:	463b      	mov	r3, r7
   1b8e8:	2000      	movs	r0, #0
   1b8ea:	4963      	ldr	r1, [pc, #396]	; (1ba78 <__kernel_rem_pio2+0x880>)
   1b8ec:	f000 faaa 	bl	1be44 <__aeabi_dsub>
   1b8f0:	2502      	movs	r5, #2
   1b8f2:	4606      	mov	r6, r0
   1b8f4:	460f      	mov	r7, r1
   1b8f6:	e5df      	b.n	1b4b8 <__kernel_rem_pio2+0x2c0>
   1b8f8:	2600      	movs	r6, #0
   1b8fa:	2700      	movs	r7, #0
   1b8fc:	e6dc      	b.n	1b6b8 <__kernel_rem_pio2+0x4c0>
   1b8fe:	9b04      	ldr	r3, [sp, #16]
   1b900:	2b00      	cmp	r3, #0
   1b902:	dd26      	ble.n	1b952 <__kernel_rem_pio2+0x75a>
   1b904:	2400      	movs	r4, #0
   1b906:	9b04      	ldr	r3, [sp, #16]
   1b908:	2b01      	cmp	r3, #1
   1b90a:	f43f ada8 	beq.w	1b45e <__kernel_rem_pio2+0x266>
   1b90e:	2b02      	cmp	r3, #2
   1b910:	d109      	bne.n	1b926 <__kernel_rem_pio2+0x72e>
   1b912:	9b00      	ldr	r3, [sp, #0]
   1b914:	1e5a      	subs	r2, r3, #1
   1b916:	ab0c      	add	r3, sp, #48	; 0x30
   1b918:	a90c      	add	r1, sp, #48	; 0x30
   1b91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b91e:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1b922:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1b926:	2d02      	cmp	r5, #2
   1b928:	f47f adc6 	bne.w	1b4b8 <__kernel_rem_pio2+0x2c0>
   1b92c:	4632      	mov	r2, r6
   1b92e:	463b      	mov	r3, r7
   1b930:	2000      	movs	r0, #0
   1b932:	4951      	ldr	r1, [pc, #324]	; (1ba78 <__kernel_rem_pio2+0x880>)
   1b934:	f000 fa86 	bl	1be44 <__aeabi_dsub>
   1b938:	4606      	mov	r6, r0
   1b93a:	460f      	mov	r7, r1
   1b93c:	2c00      	cmp	r4, #0
   1b93e:	f43f adbb 	beq.w	1b4b8 <__kernel_rem_pio2+0x2c0>
   1b942:	e5ab      	b.n	1b49c <__kernel_rem_pio2+0x2a4>
   1b944:	9900      	ldr	r1, [sp, #0]
   1b946:	3301      	adds	r3, #1
   1b948:	4299      	cmp	r1, r3
   1b94a:	d178      	bne.n	1ba3e <__kernel_rem_pio2+0x846>
   1b94c:	9b04      	ldr	r3, [sp, #16]
   1b94e:	2b00      	cmp	r3, #0
   1b950:	dcd9      	bgt.n	1b906 <__kernel_rem_pio2+0x70e>
   1b952:	2d02      	cmp	r5, #2
   1b954:	f47f adb0 	bne.w	1b4b8 <__kernel_rem_pio2+0x2c0>
   1b958:	4632      	mov	r2, r6
   1b95a:	463b      	mov	r3, r7
   1b95c:	2000      	movs	r0, #0
   1b95e:	4946      	ldr	r1, [pc, #280]	; (1ba78 <__kernel_rem_pio2+0x880>)
   1b960:	f000 fa70 	bl	1be44 <__aeabi_dsub>
   1b964:	4606      	mov	r6, r0
   1b966:	460f      	mov	r7, r1
   1b968:	e5a6      	b.n	1b4b8 <__kernel_rem_pio2+0x2c0>
   1b96a:	2301      	movs	r3, #1
   1b96c:	e5d1      	b.n	1b512 <__kernel_rem_pio2+0x31a>
   1b96e:	4639      	mov	r1, r7
   1b970:	9f04      	ldr	r7, [sp, #16]
   1b972:	9502      	str	r5, [sp, #8]
   1b974:	427a      	negs	r2, r7
   1b976:	4630      	mov	r0, r6
   1b978:	f8cd 801c 	str.w	r8, [sp, #28]
   1b97c:	f000 f9d8 	bl	1bd30 <scalbn>
   1b980:	2200      	movs	r2, #0
   1b982:	4b3e      	ldr	r3, [pc, #248]	; (1ba7c <__kernel_rem_pio2+0x884>)
   1b984:	4604      	mov	r4, r0
   1b986:	460d      	mov	r5, r1
   1b988:	f000 fe96 	bl	1c6b8 <__aeabi_dcmpge>
   1b98c:	2800      	cmp	r0, #0
   1b98e:	d062      	beq.n	1ba56 <__kernel_rem_pio2+0x85e>
   1b990:	2200      	movs	r2, #0
   1b992:	4b3b      	ldr	r3, [pc, #236]	; (1ba80 <__kernel_rem_pio2+0x888>)
   1b994:	4620      	mov	r0, r4
   1b996:	4629      	mov	r1, r5
   1b998:	f000 fc08 	bl	1c1ac <__aeabi_dmul>
   1b99c:	f000 feb6 	bl	1c70c <__aeabi_d2iz>
   1b9a0:	4606      	mov	r6, r0
   1b9a2:	f000 fb9d 	bl	1c0e0 <__aeabi_i2d>
   1b9a6:	2200      	movs	r2, #0
   1b9a8:	4b34      	ldr	r3, [pc, #208]	; (1ba7c <__kernel_rem_pio2+0x884>)
   1b9aa:	f000 fbff 	bl	1c1ac <__aeabi_dmul>
   1b9ae:	4602      	mov	r2, r0
   1b9b0:	460b      	mov	r3, r1
   1b9b2:	4620      	mov	r0, r4
   1b9b4:	4629      	mov	r1, r5
   1b9b6:	f000 fa45 	bl	1be44 <__aeabi_dsub>
   1b9ba:	f000 fea7 	bl	1c70c <__aeabi_d2iz>
   1b9be:	9900      	ldr	r1, [sp, #0]
   1b9c0:	460b      	mov	r3, r1
   1b9c2:	3301      	adds	r3, #1
   1b9c4:	461a      	mov	r2, r3
   1b9c6:	9300      	str	r3, [sp, #0]
   1b9c8:	463b      	mov	r3, r7
   1b9ca:	3318      	adds	r3, #24
   1b9cc:	9304      	str	r3, [sp, #16]
   1b9ce:	460b      	mov	r3, r1
   1b9d0:	a90c      	add	r1, sp, #48	; 0x30
   1b9d2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   1b9d6:	4613      	mov	r3, r2
   1b9d8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
   1b9dc:	e614      	b.n	1b608 <__kernel_rem_pio2+0x410>
   1b9de:	9b06      	ldr	r3, [sp, #24]
   1b9e0:	4632      	mov	r2, r6
   1b9e2:	e9c3 0100 	strd	r0, r1, [r3]
   1b9e6:	460b      	mov	r3, r1
   1b9e8:	e9da 0100 	ldrd	r0, r1, [sl]
   1b9ec:	f000 fa2a 	bl	1be44 <__aeabi_dsub>
   1b9f0:	460b      	mov	r3, r1
   1b9f2:	9900      	ldr	r1, [sp, #0]
   1b9f4:	2900      	cmp	r1, #0
   1b9f6:	4602      	mov	r2, r0
   1b9f8:	f73f af26 	bgt.w	1b848 <__kernel_rem_pio2+0x650>
   1b9fc:	4619      	mov	r1, r3
   1b9fe:	9b06      	ldr	r3, [sp, #24]
   1ba00:	4610      	mov	r0, r2
   1ba02:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1ba06:	e735      	b.n	1b874 <__kernel_rem_pio2+0x67c>
   1ba08:	4618      	mov	r0, r3
   1ba0a:	4629      	mov	r1, r5
   1ba0c:	e9da 2300 	ldrd	r2, r3, [sl]
   1ba10:	e9da 4502 	ldrd	r4, r5, [sl, #8]
   1ba14:	9f06      	ldr	r7, [sp, #24]
   1ba16:	e9c7 0104 	strd	r0, r1, [r7, #16]
   1ba1a:	e9c7 2300 	strd	r2, r3, [r7]
   1ba1e:	e9c7 4502 	strd	r4, r5, [r7, #8]
   1ba22:	e6e6      	b.n	1b7f2 <__kernel_rem_pio2+0x5fa>
   1ba24:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1ba26:	2b03      	cmp	r3, #3
   1ba28:	f63f aee3 	bhi.w	1b7f2 <__kernel_rem_pio2+0x5fa>
   1ba2c:	e8df f003 	tbb	[pc, r3]
   1ba30:	0e1c1c21 	.word	0x0e1c1c21
   1ba34:	9b00      	ldr	r3, [sp, #0]
   1ba36:	2b01      	cmp	r3, #1
   1ba38:	dd88      	ble.n	1b94c <__kernel_rem_pio2+0x754>
   1ba3a:	aa0c      	add	r2, sp, #48	; 0x30
   1ba3c:	2301      	movs	r3, #1
   1ba3e:	f852 4f04 	ldr.w	r4, [r2, #4]!
   1ba42:	2c00      	cmp	r4, #0
   1ba44:	f43f af7e 	beq.w	1b944 <__kernel_rem_pio2+0x74c>
   1ba48:	1c58      	adds	r0, r3, #1
   1ba4a:	e4dd      	b.n	1b408 <__kernel_rem_pio2+0x210>
   1ba4c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
   1ba50:	2300      	movs	r3, #0
   1ba52:	461d      	mov	r5, r3
   1ba54:	e6b4      	b.n	1b7c0 <__kernel_rem_pio2+0x5c8>
   1ba56:	4629      	mov	r1, r5
   1ba58:	4620      	mov	r0, r4
   1ba5a:	f000 fe57 	bl	1c70c <__aeabi_d2iz>
   1ba5e:	9a00      	ldr	r2, [sp, #0]
   1ba60:	a90c      	add	r1, sp, #48	; 0x30
   1ba62:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1ba66:	e5cf      	b.n	1b608 <__kernel_rem_pio2+0x410>
   1ba68:	2600      	movs	r6, #0
   1ba6a:	4633      	mov	r3, r6
   1ba6c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
   1ba70:	e6d5      	b.n	1b81e <__kernel_rem_pio2+0x626>
   1ba72:	2200      	movs	r2, #0
   1ba74:	4613      	mov	r3, r2
   1ba76:	e713      	b.n	1b8a0 <__kernel_rem_pio2+0x6a8>
   1ba78:	3ff00000 	.word	0x3ff00000
   1ba7c:	41700000 	.word	0x41700000
   1ba80:	3e700000 	.word	0x3e700000
   1ba84:	00000000 	.word	0x00000000

0001ba88 <__kernel_sin>:
   1ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba8c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   1ba90:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
   1ba94:	b085      	sub	sp, #20
   1ba96:	460c      	mov	r4, r1
   1ba98:	4690      	mov	r8, r2
   1ba9a:	4699      	mov	r9, r3
   1ba9c:	4605      	mov	r5, r0
   1ba9e:	da04      	bge.n	1baaa <__kernel_sin+0x22>
   1baa0:	f000 fe34 	bl	1c70c <__aeabi_d2iz>
   1baa4:	2800      	cmp	r0, #0
   1baa6:	f000 8085 	beq.w	1bbb4 <__kernel_sin+0x12c>
   1baaa:	462a      	mov	r2, r5
   1baac:	4623      	mov	r3, r4
   1baae:	4628      	mov	r0, r5
   1bab0:	4621      	mov	r1, r4
   1bab2:	f000 fb7b 	bl	1c1ac <__aeabi_dmul>
   1bab6:	4606      	mov	r6, r0
   1bab8:	460f      	mov	r7, r1
   1baba:	4602      	mov	r2, r0
   1babc:	460b      	mov	r3, r1
   1babe:	4628      	mov	r0, r5
   1bac0:	4621      	mov	r1, r4
   1bac2:	f000 fb73 	bl	1c1ac <__aeabi_dmul>
   1bac6:	a33e      	add	r3, pc, #248	; (adr r3, 1bbc0 <__kernel_sin+0x138>)
   1bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bacc:	4682      	mov	sl, r0
   1bace:	468b      	mov	fp, r1
   1bad0:	4630      	mov	r0, r6
   1bad2:	4639      	mov	r1, r7
   1bad4:	f000 fb6a 	bl	1c1ac <__aeabi_dmul>
   1bad8:	a33b      	add	r3, pc, #236	; (adr r3, 1bbc8 <__kernel_sin+0x140>)
   1bada:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bade:	f000 f9b1 	bl	1be44 <__aeabi_dsub>
   1bae2:	4632      	mov	r2, r6
   1bae4:	463b      	mov	r3, r7
   1bae6:	f000 fb61 	bl	1c1ac <__aeabi_dmul>
   1baea:	a339      	add	r3, pc, #228	; (adr r3, 1bbd0 <__kernel_sin+0x148>)
   1baec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1baf0:	f000 f9aa 	bl	1be48 <__adddf3>
   1baf4:	4632      	mov	r2, r6
   1baf6:	463b      	mov	r3, r7
   1baf8:	f000 fb58 	bl	1c1ac <__aeabi_dmul>
   1bafc:	a336      	add	r3, pc, #216	; (adr r3, 1bbd8 <__kernel_sin+0x150>)
   1bafe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bb02:	f000 f99f 	bl	1be44 <__aeabi_dsub>
   1bb06:	4632      	mov	r2, r6
   1bb08:	463b      	mov	r3, r7
   1bb0a:	f000 fb4f 	bl	1c1ac <__aeabi_dmul>
   1bb0e:	a334      	add	r3, pc, #208	; (adr r3, 1bbe0 <__kernel_sin+0x158>)
   1bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bb14:	f000 f998 	bl	1be48 <__adddf3>
   1bb18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bb1a:	e9cd 0100 	strd	r0, r1, [sp]
   1bb1e:	b39b      	cbz	r3, 1bb88 <__kernel_sin+0x100>
   1bb20:	2200      	movs	r2, #0
   1bb22:	4b33      	ldr	r3, [pc, #204]	; (1bbf0 <__kernel_sin+0x168>)
   1bb24:	4640      	mov	r0, r8
   1bb26:	4649      	mov	r1, r9
   1bb28:	f000 fb40 	bl	1c1ac <__aeabi_dmul>
   1bb2c:	e9dd 2300 	ldrd	r2, r3, [sp]
   1bb30:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1bb34:	4650      	mov	r0, sl
   1bb36:	4659      	mov	r1, fp
   1bb38:	f000 fb38 	bl	1c1ac <__aeabi_dmul>
   1bb3c:	4602      	mov	r2, r0
   1bb3e:	460b      	mov	r3, r1
   1bb40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1bb44:	f000 f97e 	bl	1be44 <__aeabi_dsub>
   1bb48:	4632      	mov	r2, r6
   1bb4a:	463b      	mov	r3, r7
   1bb4c:	f000 fb2e 	bl	1c1ac <__aeabi_dmul>
   1bb50:	4642      	mov	r2, r8
   1bb52:	464b      	mov	r3, r9
   1bb54:	f000 f976 	bl	1be44 <__aeabi_dsub>
   1bb58:	a323      	add	r3, pc, #140	; (adr r3, 1bbe8 <__kernel_sin+0x160>)
   1bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bb5e:	4606      	mov	r6, r0
   1bb60:	460f      	mov	r7, r1
   1bb62:	4650      	mov	r0, sl
   1bb64:	4659      	mov	r1, fp
   1bb66:	f000 fb21 	bl	1c1ac <__aeabi_dmul>
   1bb6a:	4602      	mov	r2, r0
   1bb6c:	460b      	mov	r3, r1
   1bb6e:	4630      	mov	r0, r6
   1bb70:	4639      	mov	r1, r7
   1bb72:	f000 f969 	bl	1be48 <__adddf3>
   1bb76:	4602      	mov	r2, r0
   1bb78:	460b      	mov	r3, r1
   1bb7a:	4628      	mov	r0, r5
   1bb7c:	4621      	mov	r1, r4
   1bb7e:	f000 f961 	bl	1be44 <__aeabi_dsub>
   1bb82:	b005      	add	sp, #20
   1bb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb88:	4602      	mov	r2, r0
   1bb8a:	460b      	mov	r3, r1
   1bb8c:	4630      	mov	r0, r6
   1bb8e:	4639      	mov	r1, r7
   1bb90:	f000 fb0c 	bl	1c1ac <__aeabi_dmul>
   1bb94:	a314      	add	r3, pc, #80	; (adr r3, 1bbe8 <__kernel_sin+0x160>)
   1bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bb9a:	f000 f953 	bl	1be44 <__aeabi_dsub>
   1bb9e:	4652      	mov	r2, sl
   1bba0:	465b      	mov	r3, fp
   1bba2:	f000 fb03 	bl	1c1ac <__aeabi_dmul>
   1bba6:	462a      	mov	r2, r5
   1bba8:	4623      	mov	r3, r4
   1bbaa:	f000 f94d 	bl	1be48 <__adddf3>
   1bbae:	b005      	add	sp, #20
   1bbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbb4:	4628      	mov	r0, r5
   1bbb6:	4621      	mov	r1, r4
   1bbb8:	b005      	add	sp, #20
   1bbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbbe:	bf00      	nop
   1bbc0:	5acfd57c 	.word	0x5acfd57c
   1bbc4:	3de5d93a 	.word	0x3de5d93a
   1bbc8:	8a2b9ceb 	.word	0x8a2b9ceb
   1bbcc:	3e5ae5e6 	.word	0x3e5ae5e6
   1bbd0:	57b1fe7d 	.word	0x57b1fe7d
   1bbd4:	3ec71de3 	.word	0x3ec71de3
   1bbd8:	19c161d5 	.word	0x19c161d5
   1bbdc:	3f2a01a0 	.word	0x3f2a01a0
   1bbe0:	1110f8a6 	.word	0x1110f8a6
   1bbe4:	3f811111 	.word	0x3f811111
   1bbe8:	55555549 	.word	0x55555549
   1bbec:	3fc55555 	.word	0x3fc55555
   1bbf0:	3fe00000 	.word	0x3fe00000

0001bbf4 <fabs>:
   1bbf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bbf8:	4770      	bx	lr
   1bbfa:	bf00      	nop

0001bbfc <finite>:
   1bbfc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   1bc00:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   1bc04:	0fc0      	lsrs	r0, r0, #31
   1bc06:	4770      	bx	lr

0001bc08 <matherr>:
   1bc08:	2000      	movs	r0, #0
   1bc0a:	4770      	bx	lr

0001bc0c <nan>:
   1bc0c:	2000      	movs	r0, #0
   1bc0e:	4901      	ldr	r1, [pc, #4]	; (1bc14 <nan+0x8>)
   1bc10:	4770      	bx	lr
   1bc12:	bf00      	nop
   1bc14:	7ff80000 	.word	0x7ff80000

0001bc18 <rint>:
   1bc18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc1a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   1bc1e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   1bc22:	2e13      	cmp	r6, #19
   1bc24:	b083      	sub	sp, #12
   1bc26:	4602      	mov	r2, r0
   1bc28:	460b      	mov	r3, r1
   1bc2a:	460c      	mov	r4, r1
   1bc2c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   1bc30:	4607      	mov	r7, r0
   1bc32:	dc2e      	bgt.n	1bc92 <rint+0x7a>
   1bc34:	2e00      	cmp	r6, #0
   1bc36:	db49      	blt.n	1bccc <rint+0xb4>
   1bc38:	493a      	ldr	r1, [pc, #232]	; (1bd24 <rint+0x10c>)
   1bc3a:	4131      	asrs	r1, r6
   1bc3c:	ea03 0001 	and.w	r0, r3, r1
   1bc40:	4310      	orrs	r0, r2
   1bc42:	d02b      	beq.n	1bc9c <rint+0x84>
   1bc44:	0849      	lsrs	r1, r1, #1
   1bc46:	400b      	ands	r3, r1
   1bc48:	ea53 0702 	orrs.w	r7, r3, r2
   1bc4c:	d00c      	beq.n	1bc68 <rint+0x50>
   1bc4e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bc52:	2e13      	cmp	r6, #19
   1bc54:	ea24 0101 	bic.w	r1, r4, r1
   1bc58:	fa43 f406 	asr.w	r4, r3, r6
   1bc5c:	ea44 0401 	orr.w	r4, r4, r1
   1bc60:	bf0c      	ite	eq
   1bc62:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   1bc66:	2700      	movne	r7, #0
   1bc68:	4b2f      	ldr	r3, [pc, #188]	; (1bd28 <rint+0x110>)
   1bc6a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1bc6e:	4621      	mov	r1, r4
   1bc70:	e9d5 4500 	ldrd	r4, r5, [r5]
   1bc74:	4638      	mov	r0, r7
   1bc76:	4622      	mov	r2, r4
   1bc78:	462b      	mov	r3, r5
   1bc7a:	f000 f8e5 	bl	1be48 <__adddf3>
   1bc7e:	e9cd 0100 	strd	r0, r1, [sp]
   1bc82:	4622      	mov	r2, r4
   1bc84:	462b      	mov	r3, r5
   1bc86:	e9dd 0100 	ldrd	r0, r1, [sp]
   1bc8a:	f000 f8db 	bl	1be44 <__aeabi_dsub>
   1bc8e:	b003      	add	sp, #12
   1bc90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc92:	2e33      	cmp	r6, #51	; 0x33
   1bc94:	dd06      	ble.n	1bca4 <rint+0x8c>
   1bc96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1bc9a:	d040      	beq.n	1bd1e <rint+0x106>
   1bc9c:	4610      	mov	r0, r2
   1bc9e:	4619      	mov	r1, r3
   1bca0:	b003      	add	sp, #12
   1bca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bca4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   1bca8:	f04f 31ff 	mov.w	r1, #4294967295
   1bcac:	fa21 f10e 	lsr.w	r1, r1, lr
   1bcb0:	4208      	tst	r0, r1
   1bcb2:	d0f3      	beq.n	1bc9c <rint+0x84>
   1bcb4:	0849      	lsrs	r1, r1, #1
   1bcb6:	4208      	tst	r0, r1
   1bcb8:	d0d6      	beq.n	1bc68 <rint+0x50>
   1bcba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bcbe:	ea20 0101 	bic.w	r1, r0, r1
   1bcc2:	fa43 fe0e 	asr.w	lr, r3, lr
   1bcc6:	ea4e 0701 	orr.w	r7, lr, r1
   1bcca:	e7cd      	b.n	1bc68 <rint+0x50>
   1bccc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bcd0:	4301      	orrs	r1, r0
   1bcd2:	d0e3      	beq.n	1bc9c <rint+0x84>
   1bcd4:	f3c3 0113 	ubfx	r1, r3, #0, #20
   1bcd8:	4e13      	ldr	r6, [pc, #76]	; (1bd28 <rint+0x110>)
   1bcda:	4301      	orrs	r1, r0
   1bcdc:	f1c1 0c00 	rsb	ip, r1, #0
   1bce0:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   1bce4:	e9d6 6700 	ldrd	r6, r7, [r6]
   1bce8:	ea4c 0c01 	orr.w	ip, ip, r1
   1bcec:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   1bcf0:	0c5c      	lsrs	r4, r3, #17
   1bcf2:	0464      	lsls	r4, r4, #17
   1bcf4:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   1bcf8:	ea43 0104 	orr.w	r1, r3, r4
   1bcfc:	4632      	mov	r2, r6
   1bcfe:	463b      	mov	r3, r7
   1bd00:	f000 f8a2 	bl	1be48 <__adddf3>
   1bd04:	e9cd 0100 	strd	r0, r1, [sp]
   1bd08:	4632      	mov	r2, r6
   1bd0a:	463b      	mov	r3, r7
   1bd0c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1bd10:	f000 f898 	bl	1be44 <__aeabi_dsub>
   1bd14:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1bd18:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   1bd1c:	e7c0      	b.n	1bca0 <rint+0x88>
   1bd1e:	f000 f893 	bl	1be48 <__adddf3>
   1bd22:	e7bd      	b.n	1bca0 <rint+0x88>
   1bd24:	000fffff 	.word	0x000fffff
   1bd28:	000234e0 	.word	0x000234e0
   1bd2c:	00000000 	.word	0x00000000

0001bd30 <scalbn>:
   1bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd32:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1bd36:	4604      	mov	r4, r0
   1bd38:	460d      	mov	r5, r1
   1bd3a:	460b      	mov	r3, r1
   1bd3c:	4617      	mov	r7, r2
   1bd3e:	bb0e      	cbnz	r6, 1bd84 <scalbn+0x54>
   1bd40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1bd44:	4303      	orrs	r3, r0
   1bd46:	4686      	mov	lr, r0
   1bd48:	d025      	beq.n	1bd96 <scalbn+0x66>
   1bd4a:	2200      	movs	r2, #0
   1bd4c:	4b34      	ldr	r3, [pc, #208]	; (1be20 <scalbn+0xf0>)
   1bd4e:	f000 fa2d 	bl	1c1ac <__aeabi_dmul>
   1bd52:	4a34      	ldr	r2, [pc, #208]	; (1be24 <scalbn+0xf4>)
   1bd54:	4297      	cmp	r7, r2
   1bd56:	4604      	mov	r4, r0
   1bd58:	460d      	mov	r5, r1
   1bd5a:	460b      	mov	r3, r1
   1bd5c:	db2a      	blt.n	1bdb4 <scalbn+0x84>
   1bd5e:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1bd62:	3e36      	subs	r6, #54	; 0x36
   1bd64:	443e      	add	r6, r7
   1bd66:	f240 72fe 	movw	r2, #2046	; 0x7fe
   1bd6a:	4296      	cmp	r6, r2
   1bd6c:	dc28      	bgt.n	1bdc0 <scalbn+0x90>
   1bd6e:	2e00      	cmp	r6, #0
   1bd70:	dd12      	ble.n	1bd98 <scalbn+0x68>
   1bd72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1bd76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1bd7a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1bd7e:	4620      	mov	r0, r4
   1bd80:	4629      	mov	r1, r5
   1bd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd84:	f240 72ff 	movw	r2, #2047	; 0x7ff
   1bd88:	4296      	cmp	r6, r2
   1bd8a:	d1eb      	bne.n	1bd64 <scalbn+0x34>
   1bd8c:	4602      	mov	r2, r0
   1bd8e:	460b      	mov	r3, r1
   1bd90:	f000 f85a 	bl	1be48 <__adddf3>
   1bd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd98:	f116 0f35 	cmn.w	r6, #53	; 0x35
   1bd9c:	da1d      	bge.n	1bdda <scalbn+0xaa>
   1bd9e:	f24c 3350 	movw	r3, #50000	; 0xc350
   1bda2:	429f      	cmp	r7, r3
   1bda4:	4622      	mov	r2, r4
   1bda6:	462b      	mov	r3, r5
   1bda8:	dc25      	bgt.n	1bdf6 <scalbn+0xc6>
   1bdaa:	a119      	add	r1, pc, #100	; (adr r1, 1be10 <scalbn+0xe0>)
   1bdac:	e9d1 0100 	ldrd	r0, r1, [r1]
   1bdb0:	f000 f83c 	bl	1be2c <copysign>
   1bdb4:	a316      	add	r3, pc, #88	; (adr r3, 1be10 <scalbn+0xe0>)
   1bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bdba:	f000 f9f7 	bl	1c1ac <__aeabi_dmul>
   1bdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bdc0:	4622      	mov	r2, r4
   1bdc2:	462b      	mov	r3, r5
   1bdc4:	a114      	add	r1, pc, #80	; (adr r1, 1be18 <scalbn+0xe8>)
   1bdc6:	e9d1 0100 	ldrd	r0, r1, [r1]
   1bdca:	f000 f82f 	bl	1be2c <copysign>
   1bdce:	a312      	add	r3, pc, #72	; (adr r3, 1be18 <scalbn+0xe8>)
   1bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bdd4:	f000 f9ea 	bl	1c1ac <__aeabi_dmul>
   1bdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bdda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1bdde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1bde2:	3636      	adds	r6, #54	; 0x36
   1bde4:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1bde8:	4620      	mov	r0, r4
   1bdea:	4629      	mov	r1, r5
   1bdec:	2200      	movs	r2, #0
   1bdee:	4b0e      	ldr	r3, [pc, #56]	; (1be28 <scalbn+0xf8>)
   1bdf0:	f000 f9dc 	bl	1c1ac <__aeabi_dmul>
   1bdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bdf6:	a108      	add	r1, pc, #32	; (adr r1, 1be18 <scalbn+0xe8>)
   1bdf8:	e9d1 0100 	ldrd	r0, r1, [r1]
   1bdfc:	f000 f816 	bl	1be2c <copysign>
   1be00:	a305      	add	r3, pc, #20	; (adr r3, 1be18 <scalbn+0xe8>)
   1be02:	e9d3 2300 	ldrd	r2, r3, [r3]
   1be06:	f000 f9d1 	bl	1c1ac <__aeabi_dmul>
   1be0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1be0c:	f3af 8000 	nop.w
   1be10:	c2f8f359 	.word	0xc2f8f359
   1be14:	01a56e1f 	.word	0x01a56e1f
   1be18:	8800759c 	.word	0x8800759c
   1be1c:	7e37e43c 	.word	0x7e37e43c
   1be20:	43500000 	.word	0x43500000
   1be24:	ffff3cb0 	.word	0xffff3cb0
   1be28:	3c900000 	.word	0x3c900000

0001be2c <copysign>:
   1be2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   1be30:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1be34:	ea42 0103 	orr.w	r1, r2, r3
   1be38:	4770      	bx	lr
   1be3a:	bf00      	nop

0001be3c <__aeabi_drsub>:
   1be3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1be40:	e002      	b.n	1be48 <__adddf3>
   1be42:	bf00      	nop

0001be44 <__aeabi_dsub>:
   1be44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001be48 <__adddf3>:
   1be48:	b530      	push	{r4, r5, lr}
   1be4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1be4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1be52:	ea94 0f05 	teq	r4, r5
   1be56:	bf08      	it	eq
   1be58:	ea90 0f02 	teqeq	r0, r2
   1be5c:	bf1f      	itttt	ne
   1be5e:	ea54 0c00 	orrsne.w	ip, r4, r0
   1be62:	ea55 0c02 	orrsne.w	ip, r5, r2
   1be66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1be6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1be6e:	f000 80e2 	beq.w	1c036 <__adddf3+0x1ee>
   1be72:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1be76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1be7a:	bfb8      	it	lt
   1be7c:	426d      	neglt	r5, r5
   1be7e:	dd0c      	ble.n	1be9a <__adddf3+0x52>
   1be80:	442c      	add	r4, r5
   1be82:	ea80 0202 	eor.w	r2, r0, r2
   1be86:	ea81 0303 	eor.w	r3, r1, r3
   1be8a:	ea82 0000 	eor.w	r0, r2, r0
   1be8e:	ea83 0101 	eor.w	r1, r3, r1
   1be92:	ea80 0202 	eor.w	r2, r0, r2
   1be96:	ea81 0303 	eor.w	r3, r1, r3
   1be9a:	2d36      	cmp	r5, #54	; 0x36
   1be9c:	bf88      	it	hi
   1be9e:	bd30      	pophi	{r4, r5, pc}
   1bea0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1bea4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1bea8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1beac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1beb0:	d002      	beq.n	1beb8 <__adddf3+0x70>
   1beb2:	4240      	negs	r0, r0
   1beb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1beb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1bebc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1bec0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1bec4:	d002      	beq.n	1becc <__adddf3+0x84>
   1bec6:	4252      	negs	r2, r2
   1bec8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1becc:	ea94 0f05 	teq	r4, r5
   1bed0:	f000 80a7 	beq.w	1c022 <__adddf3+0x1da>
   1bed4:	f1a4 0401 	sub.w	r4, r4, #1
   1bed8:	f1d5 0e20 	rsbs	lr, r5, #32
   1bedc:	db0d      	blt.n	1befa <__adddf3+0xb2>
   1bede:	fa02 fc0e 	lsl.w	ip, r2, lr
   1bee2:	fa22 f205 	lsr.w	r2, r2, r5
   1bee6:	1880      	adds	r0, r0, r2
   1bee8:	f141 0100 	adc.w	r1, r1, #0
   1beec:	fa03 f20e 	lsl.w	r2, r3, lr
   1bef0:	1880      	adds	r0, r0, r2
   1bef2:	fa43 f305 	asr.w	r3, r3, r5
   1bef6:	4159      	adcs	r1, r3
   1bef8:	e00e      	b.n	1bf18 <__adddf3+0xd0>
   1befa:	f1a5 0520 	sub.w	r5, r5, #32
   1befe:	f10e 0e20 	add.w	lr, lr, #32
   1bf02:	2a01      	cmp	r2, #1
   1bf04:	fa03 fc0e 	lsl.w	ip, r3, lr
   1bf08:	bf28      	it	cs
   1bf0a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1bf0e:	fa43 f305 	asr.w	r3, r3, r5
   1bf12:	18c0      	adds	r0, r0, r3
   1bf14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1bf18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1bf1c:	d507      	bpl.n	1bf2e <__adddf3+0xe6>
   1bf1e:	f04f 0e00 	mov.w	lr, #0
   1bf22:	f1dc 0c00 	rsbs	ip, ip, #0
   1bf26:	eb7e 0000 	sbcs.w	r0, lr, r0
   1bf2a:	eb6e 0101 	sbc.w	r1, lr, r1
   1bf2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1bf32:	d31b      	bcc.n	1bf6c <__adddf3+0x124>
   1bf34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1bf38:	d30c      	bcc.n	1bf54 <__adddf3+0x10c>
   1bf3a:	0849      	lsrs	r1, r1, #1
   1bf3c:	ea5f 0030 	movs.w	r0, r0, rrx
   1bf40:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1bf44:	f104 0401 	add.w	r4, r4, #1
   1bf48:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1bf4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1bf50:	f080 809a 	bcs.w	1c088 <__adddf3+0x240>
   1bf54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1bf58:	bf08      	it	eq
   1bf5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1bf5e:	f150 0000 	adcs.w	r0, r0, #0
   1bf62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bf66:	ea41 0105 	orr.w	r1, r1, r5
   1bf6a:	bd30      	pop	{r4, r5, pc}
   1bf6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1bf70:	4140      	adcs	r0, r0
   1bf72:	eb41 0101 	adc.w	r1, r1, r1
   1bf76:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bf7a:	f1a4 0401 	sub.w	r4, r4, #1
   1bf7e:	d1e9      	bne.n	1bf54 <__adddf3+0x10c>
   1bf80:	f091 0f00 	teq	r1, #0
   1bf84:	bf04      	itt	eq
   1bf86:	4601      	moveq	r1, r0
   1bf88:	2000      	moveq	r0, #0
   1bf8a:	fab1 f381 	clz	r3, r1
   1bf8e:	bf08      	it	eq
   1bf90:	3320      	addeq	r3, #32
   1bf92:	f1a3 030b 	sub.w	r3, r3, #11
   1bf96:	f1b3 0220 	subs.w	r2, r3, #32
   1bf9a:	da0c      	bge.n	1bfb6 <__adddf3+0x16e>
   1bf9c:	320c      	adds	r2, #12
   1bf9e:	dd08      	ble.n	1bfb2 <__adddf3+0x16a>
   1bfa0:	f102 0c14 	add.w	ip, r2, #20
   1bfa4:	f1c2 020c 	rsb	r2, r2, #12
   1bfa8:	fa01 f00c 	lsl.w	r0, r1, ip
   1bfac:	fa21 f102 	lsr.w	r1, r1, r2
   1bfb0:	e00c      	b.n	1bfcc <__adddf3+0x184>
   1bfb2:	f102 0214 	add.w	r2, r2, #20
   1bfb6:	bfd8      	it	le
   1bfb8:	f1c2 0c20 	rsble	ip, r2, #32
   1bfbc:	fa01 f102 	lsl.w	r1, r1, r2
   1bfc0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1bfc4:	bfdc      	itt	le
   1bfc6:	ea41 010c 	orrle.w	r1, r1, ip
   1bfca:	4090      	lslle	r0, r2
   1bfcc:	1ae4      	subs	r4, r4, r3
   1bfce:	bfa2      	ittt	ge
   1bfd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1bfd4:	4329      	orrge	r1, r5
   1bfd6:	bd30      	popge	{r4, r5, pc}
   1bfd8:	ea6f 0404 	mvn.w	r4, r4
   1bfdc:	3c1f      	subs	r4, #31
   1bfde:	da1c      	bge.n	1c01a <__adddf3+0x1d2>
   1bfe0:	340c      	adds	r4, #12
   1bfe2:	dc0e      	bgt.n	1c002 <__adddf3+0x1ba>
   1bfe4:	f104 0414 	add.w	r4, r4, #20
   1bfe8:	f1c4 0220 	rsb	r2, r4, #32
   1bfec:	fa20 f004 	lsr.w	r0, r0, r4
   1bff0:	fa01 f302 	lsl.w	r3, r1, r2
   1bff4:	ea40 0003 	orr.w	r0, r0, r3
   1bff8:	fa21 f304 	lsr.w	r3, r1, r4
   1bffc:	ea45 0103 	orr.w	r1, r5, r3
   1c000:	bd30      	pop	{r4, r5, pc}
   1c002:	f1c4 040c 	rsb	r4, r4, #12
   1c006:	f1c4 0220 	rsb	r2, r4, #32
   1c00a:	fa20 f002 	lsr.w	r0, r0, r2
   1c00e:	fa01 f304 	lsl.w	r3, r1, r4
   1c012:	ea40 0003 	orr.w	r0, r0, r3
   1c016:	4629      	mov	r1, r5
   1c018:	bd30      	pop	{r4, r5, pc}
   1c01a:	fa21 f004 	lsr.w	r0, r1, r4
   1c01e:	4629      	mov	r1, r5
   1c020:	bd30      	pop	{r4, r5, pc}
   1c022:	f094 0f00 	teq	r4, #0
   1c026:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c02a:	bf06      	itte	eq
   1c02c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c030:	3401      	addeq	r4, #1
   1c032:	3d01      	subne	r5, #1
   1c034:	e74e      	b.n	1bed4 <__adddf3+0x8c>
   1c036:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c03a:	bf18      	it	ne
   1c03c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c040:	d029      	beq.n	1c096 <__adddf3+0x24e>
   1c042:	ea94 0f05 	teq	r4, r5
   1c046:	bf08      	it	eq
   1c048:	ea90 0f02 	teqeq	r0, r2
   1c04c:	d005      	beq.n	1c05a <__adddf3+0x212>
   1c04e:	ea54 0c00 	orrs.w	ip, r4, r0
   1c052:	bf04      	itt	eq
   1c054:	4619      	moveq	r1, r3
   1c056:	4610      	moveq	r0, r2
   1c058:	bd30      	pop	{r4, r5, pc}
   1c05a:	ea91 0f03 	teq	r1, r3
   1c05e:	bf1e      	ittt	ne
   1c060:	2100      	movne	r1, #0
   1c062:	2000      	movne	r0, #0
   1c064:	bd30      	popne	{r4, r5, pc}
   1c066:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c06a:	d105      	bne.n	1c078 <__adddf3+0x230>
   1c06c:	0040      	lsls	r0, r0, #1
   1c06e:	4149      	adcs	r1, r1
   1c070:	bf28      	it	cs
   1c072:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c076:	bd30      	pop	{r4, r5, pc}
   1c078:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c07c:	bf3c      	itt	cc
   1c07e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c082:	bd30      	popcc	{r4, r5, pc}
   1c084:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c088:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c08c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c090:	f04f 0000 	mov.w	r0, #0
   1c094:	bd30      	pop	{r4, r5, pc}
   1c096:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c09a:	bf1a      	itte	ne
   1c09c:	4619      	movne	r1, r3
   1c09e:	4610      	movne	r0, r2
   1c0a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c0a4:	bf1c      	itt	ne
   1c0a6:	460b      	movne	r3, r1
   1c0a8:	4602      	movne	r2, r0
   1c0aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c0ae:	bf06      	itte	eq
   1c0b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c0b4:	ea91 0f03 	teqeq	r1, r3
   1c0b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c0bc:	bd30      	pop	{r4, r5, pc}
   1c0be:	bf00      	nop

0001c0c0 <__aeabi_ui2d>:
   1c0c0:	f090 0f00 	teq	r0, #0
   1c0c4:	bf04      	itt	eq
   1c0c6:	2100      	moveq	r1, #0
   1c0c8:	4770      	bxeq	lr
   1c0ca:	b530      	push	{r4, r5, lr}
   1c0cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c0d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c0d4:	f04f 0500 	mov.w	r5, #0
   1c0d8:	f04f 0100 	mov.w	r1, #0
   1c0dc:	e750      	b.n	1bf80 <__adddf3+0x138>
   1c0de:	bf00      	nop

0001c0e0 <__aeabi_i2d>:
   1c0e0:	f090 0f00 	teq	r0, #0
   1c0e4:	bf04      	itt	eq
   1c0e6:	2100      	moveq	r1, #0
   1c0e8:	4770      	bxeq	lr
   1c0ea:	b530      	push	{r4, r5, lr}
   1c0ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c0f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c0f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c0f8:	bf48      	it	mi
   1c0fa:	4240      	negmi	r0, r0
   1c0fc:	f04f 0100 	mov.w	r1, #0
   1c100:	e73e      	b.n	1bf80 <__adddf3+0x138>
   1c102:	bf00      	nop

0001c104 <__aeabi_f2d>:
   1c104:	0042      	lsls	r2, r0, #1
   1c106:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c10a:	ea4f 0131 	mov.w	r1, r1, rrx
   1c10e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c112:	bf1f      	itttt	ne
   1c114:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c118:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c11c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c120:	4770      	bxne	lr
   1c122:	f092 0f00 	teq	r2, #0
   1c126:	bf14      	ite	ne
   1c128:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c12c:	4770      	bxeq	lr
   1c12e:	b530      	push	{r4, r5, lr}
   1c130:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c138:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c13c:	e720      	b.n	1bf80 <__adddf3+0x138>
   1c13e:	bf00      	nop

0001c140 <__aeabi_ul2d>:
   1c140:	ea50 0201 	orrs.w	r2, r0, r1
   1c144:	bf08      	it	eq
   1c146:	4770      	bxeq	lr
   1c148:	b530      	push	{r4, r5, lr}
   1c14a:	f04f 0500 	mov.w	r5, #0
   1c14e:	e00a      	b.n	1c166 <__aeabi_l2d+0x16>

0001c150 <__aeabi_l2d>:
   1c150:	ea50 0201 	orrs.w	r2, r0, r1
   1c154:	bf08      	it	eq
   1c156:	4770      	bxeq	lr
   1c158:	b530      	push	{r4, r5, lr}
   1c15a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c15e:	d502      	bpl.n	1c166 <__aeabi_l2d+0x16>
   1c160:	4240      	negs	r0, r0
   1c162:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c166:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c16a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c16e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c172:	f43f aedc 	beq.w	1bf2e <__adddf3+0xe6>
   1c176:	f04f 0203 	mov.w	r2, #3
   1c17a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c17e:	bf18      	it	ne
   1c180:	3203      	addne	r2, #3
   1c182:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c186:	bf18      	it	ne
   1c188:	3203      	addne	r2, #3
   1c18a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c18e:	f1c2 0320 	rsb	r3, r2, #32
   1c192:	fa00 fc03 	lsl.w	ip, r0, r3
   1c196:	fa20 f002 	lsr.w	r0, r0, r2
   1c19a:	fa01 fe03 	lsl.w	lr, r1, r3
   1c19e:	ea40 000e 	orr.w	r0, r0, lr
   1c1a2:	fa21 f102 	lsr.w	r1, r1, r2
   1c1a6:	4414      	add	r4, r2
   1c1a8:	e6c1      	b.n	1bf2e <__adddf3+0xe6>
   1c1aa:	bf00      	nop

0001c1ac <__aeabi_dmul>:
   1c1ac:	b570      	push	{r4, r5, r6, lr}
   1c1ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c1b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c1b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c1ba:	bf1d      	ittte	ne
   1c1bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c1c0:	ea94 0f0c 	teqne	r4, ip
   1c1c4:	ea95 0f0c 	teqne	r5, ip
   1c1c8:	f000 f8de 	bleq	1c388 <__aeabi_dmul+0x1dc>
   1c1cc:	442c      	add	r4, r5
   1c1ce:	ea81 0603 	eor.w	r6, r1, r3
   1c1d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c1d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c1da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c1de:	bf18      	it	ne
   1c1e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c1e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c1e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c1ec:	d038      	beq.n	1c260 <__aeabi_dmul+0xb4>
   1c1ee:	fba0 ce02 	umull	ip, lr, r0, r2
   1c1f2:	f04f 0500 	mov.w	r5, #0
   1c1f6:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c1fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c1fe:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c202:	f04f 0600 	mov.w	r6, #0
   1c206:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c20a:	f09c 0f00 	teq	ip, #0
   1c20e:	bf18      	it	ne
   1c210:	f04e 0e01 	orrne.w	lr, lr, #1
   1c214:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c218:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c21c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c220:	d204      	bcs.n	1c22c <__aeabi_dmul+0x80>
   1c222:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c226:	416d      	adcs	r5, r5
   1c228:	eb46 0606 	adc.w	r6, r6, r6
   1c22c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c230:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c234:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c238:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c23c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c240:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c244:	bf88      	it	hi
   1c246:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c24a:	d81e      	bhi.n	1c28a <__aeabi_dmul+0xde>
   1c24c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c250:	bf08      	it	eq
   1c252:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c256:	f150 0000 	adcs.w	r0, r0, #0
   1c25a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c25e:	bd70      	pop	{r4, r5, r6, pc}
   1c260:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c264:	ea46 0101 	orr.w	r1, r6, r1
   1c268:	ea40 0002 	orr.w	r0, r0, r2
   1c26c:	ea81 0103 	eor.w	r1, r1, r3
   1c270:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c274:	bfc2      	ittt	gt
   1c276:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c27a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c27e:	bd70      	popgt	{r4, r5, r6, pc}
   1c280:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c284:	f04f 0e00 	mov.w	lr, #0
   1c288:	3c01      	subs	r4, #1
   1c28a:	f300 80ab 	bgt.w	1c3e4 <__aeabi_dmul+0x238>
   1c28e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c292:	bfde      	ittt	le
   1c294:	2000      	movle	r0, #0
   1c296:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c29a:	bd70      	pople	{r4, r5, r6, pc}
   1c29c:	f1c4 0400 	rsb	r4, r4, #0
   1c2a0:	3c20      	subs	r4, #32
   1c2a2:	da35      	bge.n	1c310 <__aeabi_dmul+0x164>
   1c2a4:	340c      	adds	r4, #12
   1c2a6:	dc1b      	bgt.n	1c2e0 <__aeabi_dmul+0x134>
   1c2a8:	f104 0414 	add.w	r4, r4, #20
   1c2ac:	f1c4 0520 	rsb	r5, r4, #32
   1c2b0:	fa00 f305 	lsl.w	r3, r0, r5
   1c2b4:	fa20 f004 	lsr.w	r0, r0, r4
   1c2b8:	fa01 f205 	lsl.w	r2, r1, r5
   1c2bc:	ea40 0002 	orr.w	r0, r0, r2
   1c2c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c2c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c2c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c2cc:	fa21 f604 	lsr.w	r6, r1, r4
   1c2d0:	eb42 0106 	adc.w	r1, r2, r6
   1c2d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c2d8:	bf08      	it	eq
   1c2da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c2de:	bd70      	pop	{r4, r5, r6, pc}
   1c2e0:	f1c4 040c 	rsb	r4, r4, #12
   1c2e4:	f1c4 0520 	rsb	r5, r4, #32
   1c2e8:	fa00 f304 	lsl.w	r3, r0, r4
   1c2ec:	fa20 f005 	lsr.w	r0, r0, r5
   1c2f0:	fa01 f204 	lsl.w	r2, r1, r4
   1c2f4:	ea40 0002 	orr.w	r0, r0, r2
   1c2f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c2fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c300:	f141 0100 	adc.w	r1, r1, #0
   1c304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c308:	bf08      	it	eq
   1c30a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c30e:	bd70      	pop	{r4, r5, r6, pc}
   1c310:	f1c4 0520 	rsb	r5, r4, #32
   1c314:	fa00 f205 	lsl.w	r2, r0, r5
   1c318:	ea4e 0e02 	orr.w	lr, lr, r2
   1c31c:	fa20 f304 	lsr.w	r3, r0, r4
   1c320:	fa01 f205 	lsl.w	r2, r1, r5
   1c324:	ea43 0302 	orr.w	r3, r3, r2
   1c328:	fa21 f004 	lsr.w	r0, r1, r4
   1c32c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c330:	fa21 f204 	lsr.w	r2, r1, r4
   1c334:	ea20 0002 	bic.w	r0, r0, r2
   1c338:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c33c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c340:	bf08      	it	eq
   1c342:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c346:	bd70      	pop	{r4, r5, r6, pc}
   1c348:	f094 0f00 	teq	r4, #0
   1c34c:	d10f      	bne.n	1c36e <__aeabi_dmul+0x1c2>
   1c34e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c352:	0040      	lsls	r0, r0, #1
   1c354:	eb41 0101 	adc.w	r1, r1, r1
   1c358:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c35c:	bf08      	it	eq
   1c35e:	3c01      	subeq	r4, #1
   1c360:	d0f7      	beq.n	1c352 <__aeabi_dmul+0x1a6>
   1c362:	ea41 0106 	orr.w	r1, r1, r6
   1c366:	f095 0f00 	teq	r5, #0
   1c36a:	bf18      	it	ne
   1c36c:	4770      	bxne	lr
   1c36e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c372:	0052      	lsls	r2, r2, #1
   1c374:	eb43 0303 	adc.w	r3, r3, r3
   1c378:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c37c:	bf08      	it	eq
   1c37e:	3d01      	subeq	r5, #1
   1c380:	d0f7      	beq.n	1c372 <__aeabi_dmul+0x1c6>
   1c382:	ea43 0306 	orr.w	r3, r3, r6
   1c386:	4770      	bx	lr
   1c388:	ea94 0f0c 	teq	r4, ip
   1c38c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c390:	bf18      	it	ne
   1c392:	ea95 0f0c 	teqne	r5, ip
   1c396:	d00c      	beq.n	1c3b2 <__aeabi_dmul+0x206>
   1c398:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c39c:	bf18      	it	ne
   1c39e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c3a2:	d1d1      	bne.n	1c348 <__aeabi_dmul+0x19c>
   1c3a4:	ea81 0103 	eor.w	r1, r1, r3
   1c3a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c3ac:	f04f 0000 	mov.w	r0, #0
   1c3b0:	bd70      	pop	{r4, r5, r6, pc}
   1c3b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c3b6:	bf06      	itte	eq
   1c3b8:	4610      	moveq	r0, r2
   1c3ba:	4619      	moveq	r1, r3
   1c3bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c3c0:	d019      	beq.n	1c3f6 <__aeabi_dmul+0x24a>
   1c3c2:	ea94 0f0c 	teq	r4, ip
   1c3c6:	d102      	bne.n	1c3ce <__aeabi_dmul+0x222>
   1c3c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c3cc:	d113      	bne.n	1c3f6 <__aeabi_dmul+0x24a>
   1c3ce:	ea95 0f0c 	teq	r5, ip
   1c3d2:	d105      	bne.n	1c3e0 <__aeabi_dmul+0x234>
   1c3d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c3d8:	bf1c      	itt	ne
   1c3da:	4610      	movne	r0, r2
   1c3dc:	4619      	movne	r1, r3
   1c3de:	d10a      	bne.n	1c3f6 <__aeabi_dmul+0x24a>
   1c3e0:	ea81 0103 	eor.w	r1, r1, r3
   1c3e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c3e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c3ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c3f0:	f04f 0000 	mov.w	r0, #0
   1c3f4:	bd70      	pop	{r4, r5, r6, pc}
   1c3f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c3fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1c3fe:	bd70      	pop	{r4, r5, r6, pc}

0001c400 <__aeabi_ddiv>:
   1c400:	b570      	push	{r4, r5, r6, lr}
   1c402:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c406:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c40a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c40e:	bf1d      	ittte	ne
   1c410:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c414:	ea94 0f0c 	teqne	r4, ip
   1c418:	ea95 0f0c 	teqne	r5, ip
   1c41c:	f000 f8a7 	bleq	1c56e <__aeabi_ddiv+0x16e>
   1c420:	eba4 0405 	sub.w	r4, r4, r5
   1c424:	ea81 0e03 	eor.w	lr, r1, r3
   1c428:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1c42c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c430:	f000 8088 	beq.w	1c544 <__aeabi_ddiv+0x144>
   1c434:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c438:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1c43c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1c440:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1c444:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1c448:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1c44c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1c450:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1c454:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1c458:	429d      	cmp	r5, r3
   1c45a:	bf08      	it	eq
   1c45c:	4296      	cmpeq	r6, r2
   1c45e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1c462:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1c466:	d202      	bcs.n	1c46e <__aeabi_ddiv+0x6e>
   1c468:	085b      	lsrs	r3, r3, #1
   1c46a:	ea4f 0232 	mov.w	r2, r2, rrx
   1c46e:	1ab6      	subs	r6, r6, r2
   1c470:	eb65 0503 	sbc.w	r5, r5, r3
   1c474:	085b      	lsrs	r3, r3, #1
   1c476:	ea4f 0232 	mov.w	r2, r2, rrx
   1c47a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1c47e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1c482:	ebb6 0e02 	subs.w	lr, r6, r2
   1c486:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c48a:	bf22      	ittt	cs
   1c48c:	1ab6      	subcs	r6, r6, r2
   1c48e:	4675      	movcs	r5, lr
   1c490:	ea40 000c 	orrcs.w	r0, r0, ip
   1c494:	085b      	lsrs	r3, r3, #1
   1c496:	ea4f 0232 	mov.w	r2, r2, rrx
   1c49a:	ebb6 0e02 	subs.w	lr, r6, r2
   1c49e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c4a2:	bf22      	ittt	cs
   1c4a4:	1ab6      	subcs	r6, r6, r2
   1c4a6:	4675      	movcs	r5, lr
   1c4a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1c4ac:	085b      	lsrs	r3, r3, #1
   1c4ae:	ea4f 0232 	mov.w	r2, r2, rrx
   1c4b2:	ebb6 0e02 	subs.w	lr, r6, r2
   1c4b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c4ba:	bf22      	ittt	cs
   1c4bc:	1ab6      	subcs	r6, r6, r2
   1c4be:	4675      	movcs	r5, lr
   1c4c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1c4c4:	085b      	lsrs	r3, r3, #1
   1c4c6:	ea4f 0232 	mov.w	r2, r2, rrx
   1c4ca:	ebb6 0e02 	subs.w	lr, r6, r2
   1c4ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c4d2:	bf22      	ittt	cs
   1c4d4:	1ab6      	subcs	r6, r6, r2
   1c4d6:	4675      	movcs	r5, lr
   1c4d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1c4dc:	ea55 0e06 	orrs.w	lr, r5, r6
   1c4e0:	d018      	beq.n	1c514 <__aeabi_ddiv+0x114>
   1c4e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1c4e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1c4ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1c4ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1c4f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1c4f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1c4fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1c4fe:	d1c0      	bne.n	1c482 <__aeabi_ddiv+0x82>
   1c500:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c504:	d10b      	bne.n	1c51e <__aeabi_ddiv+0x11e>
   1c506:	ea41 0100 	orr.w	r1, r1, r0
   1c50a:	f04f 0000 	mov.w	r0, #0
   1c50e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1c512:	e7b6      	b.n	1c482 <__aeabi_ddiv+0x82>
   1c514:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c518:	bf04      	itt	eq
   1c51a:	4301      	orreq	r1, r0
   1c51c:	2000      	moveq	r0, #0
   1c51e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c522:	bf88      	it	hi
   1c524:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c528:	f63f aeaf 	bhi.w	1c28a <__aeabi_dmul+0xde>
   1c52c:	ebb5 0c03 	subs.w	ip, r5, r3
   1c530:	bf04      	itt	eq
   1c532:	ebb6 0c02 	subseq.w	ip, r6, r2
   1c536:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c53a:	f150 0000 	adcs.w	r0, r0, #0
   1c53e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c542:	bd70      	pop	{r4, r5, r6, pc}
   1c544:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1c548:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1c54c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1c550:	bfc2      	ittt	gt
   1c552:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c55a:	bd70      	popgt	{r4, r5, r6, pc}
   1c55c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c560:	f04f 0e00 	mov.w	lr, #0
   1c564:	3c01      	subs	r4, #1
   1c566:	e690      	b.n	1c28a <__aeabi_dmul+0xde>
   1c568:	ea45 0e06 	orr.w	lr, r5, r6
   1c56c:	e68d      	b.n	1c28a <__aeabi_dmul+0xde>
   1c56e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c572:	ea94 0f0c 	teq	r4, ip
   1c576:	bf08      	it	eq
   1c578:	ea95 0f0c 	teqeq	r5, ip
   1c57c:	f43f af3b 	beq.w	1c3f6 <__aeabi_dmul+0x24a>
   1c580:	ea94 0f0c 	teq	r4, ip
   1c584:	d10a      	bne.n	1c59c <__aeabi_ddiv+0x19c>
   1c586:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c58a:	f47f af34 	bne.w	1c3f6 <__aeabi_dmul+0x24a>
   1c58e:	ea95 0f0c 	teq	r5, ip
   1c592:	f47f af25 	bne.w	1c3e0 <__aeabi_dmul+0x234>
   1c596:	4610      	mov	r0, r2
   1c598:	4619      	mov	r1, r3
   1c59a:	e72c      	b.n	1c3f6 <__aeabi_dmul+0x24a>
   1c59c:	ea95 0f0c 	teq	r5, ip
   1c5a0:	d106      	bne.n	1c5b0 <__aeabi_ddiv+0x1b0>
   1c5a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1c5a6:	f43f aefd 	beq.w	1c3a4 <__aeabi_dmul+0x1f8>
   1c5aa:	4610      	mov	r0, r2
   1c5ac:	4619      	mov	r1, r3
   1c5ae:	e722      	b.n	1c3f6 <__aeabi_dmul+0x24a>
   1c5b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c5b4:	bf18      	it	ne
   1c5b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c5ba:	f47f aec5 	bne.w	1c348 <__aeabi_dmul+0x19c>
   1c5be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1c5c2:	f47f af0d 	bne.w	1c3e0 <__aeabi_dmul+0x234>
   1c5c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1c5ca:	f47f aeeb 	bne.w	1c3a4 <__aeabi_dmul+0x1f8>
   1c5ce:	e712      	b.n	1c3f6 <__aeabi_dmul+0x24a>

0001c5d0 <__gedf2>:
   1c5d0:	f04f 3cff 	mov.w	ip, #4294967295
   1c5d4:	e006      	b.n	1c5e4 <__cmpdf2+0x4>
   1c5d6:	bf00      	nop

0001c5d8 <__ledf2>:
   1c5d8:	f04f 0c01 	mov.w	ip, #1
   1c5dc:	e002      	b.n	1c5e4 <__cmpdf2+0x4>
   1c5de:	bf00      	nop

0001c5e0 <__cmpdf2>:
   1c5e0:	f04f 0c01 	mov.w	ip, #1
   1c5e4:	f84d cd04 	str.w	ip, [sp, #-4]!
   1c5e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c5ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c5f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c5f4:	bf18      	it	ne
   1c5f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1c5fa:	d01b      	beq.n	1c634 <__cmpdf2+0x54>
   1c5fc:	b001      	add	sp, #4
   1c5fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1c602:	bf0c      	ite	eq
   1c604:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1c608:	ea91 0f03 	teqne	r1, r3
   1c60c:	bf02      	ittt	eq
   1c60e:	ea90 0f02 	teqeq	r0, r2
   1c612:	2000      	moveq	r0, #0
   1c614:	4770      	bxeq	lr
   1c616:	f110 0f00 	cmn.w	r0, #0
   1c61a:	ea91 0f03 	teq	r1, r3
   1c61e:	bf58      	it	pl
   1c620:	4299      	cmppl	r1, r3
   1c622:	bf08      	it	eq
   1c624:	4290      	cmpeq	r0, r2
   1c626:	bf2c      	ite	cs
   1c628:	17d8      	asrcs	r0, r3, #31
   1c62a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1c62e:	f040 0001 	orr.w	r0, r0, #1
   1c632:	4770      	bx	lr
   1c634:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c638:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c63c:	d102      	bne.n	1c644 <__cmpdf2+0x64>
   1c63e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1c642:	d107      	bne.n	1c654 <__cmpdf2+0x74>
   1c644:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c648:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c64c:	d1d6      	bne.n	1c5fc <__cmpdf2+0x1c>
   1c64e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1c652:	d0d3      	beq.n	1c5fc <__cmpdf2+0x1c>
   1c654:	f85d 0b04 	ldr.w	r0, [sp], #4
   1c658:	4770      	bx	lr
   1c65a:	bf00      	nop

0001c65c <__aeabi_cdrcmple>:
   1c65c:	4684      	mov	ip, r0
   1c65e:	4610      	mov	r0, r2
   1c660:	4662      	mov	r2, ip
   1c662:	468c      	mov	ip, r1
   1c664:	4619      	mov	r1, r3
   1c666:	4663      	mov	r3, ip
   1c668:	e000      	b.n	1c66c <__aeabi_cdcmpeq>
   1c66a:	bf00      	nop

0001c66c <__aeabi_cdcmpeq>:
   1c66c:	b501      	push	{r0, lr}
   1c66e:	f7ff ffb7 	bl	1c5e0 <__cmpdf2>
   1c672:	2800      	cmp	r0, #0
   1c674:	bf48      	it	mi
   1c676:	f110 0f00 	cmnmi.w	r0, #0
   1c67a:	bd01      	pop	{r0, pc}

0001c67c <__aeabi_dcmpeq>:
   1c67c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c680:	f7ff fff4 	bl	1c66c <__aeabi_cdcmpeq>
   1c684:	bf0c      	ite	eq
   1c686:	2001      	moveq	r0, #1
   1c688:	2000      	movne	r0, #0
   1c68a:	f85d fb08 	ldr.w	pc, [sp], #8
   1c68e:	bf00      	nop

0001c690 <__aeabi_dcmplt>:
   1c690:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c694:	f7ff ffea 	bl	1c66c <__aeabi_cdcmpeq>
   1c698:	bf34      	ite	cc
   1c69a:	2001      	movcc	r0, #1
   1c69c:	2000      	movcs	r0, #0
   1c69e:	f85d fb08 	ldr.w	pc, [sp], #8
   1c6a2:	bf00      	nop

0001c6a4 <__aeabi_dcmple>:
   1c6a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c6a8:	f7ff ffe0 	bl	1c66c <__aeabi_cdcmpeq>
   1c6ac:	bf94      	ite	ls
   1c6ae:	2001      	movls	r0, #1
   1c6b0:	2000      	movhi	r0, #0
   1c6b2:	f85d fb08 	ldr.w	pc, [sp], #8
   1c6b6:	bf00      	nop

0001c6b8 <__aeabi_dcmpge>:
   1c6b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c6bc:	f7ff ffce 	bl	1c65c <__aeabi_cdrcmple>
   1c6c0:	bf94      	ite	ls
   1c6c2:	2001      	movls	r0, #1
   1c6c4:	2000      	movhi	r0, #0
   1c6c6:	f85d fb08 	ldr.w	pc, [sp], #8
   1c6ca:	bf00      	nop

0001c6cc <__aeabi_dcmpgt>:
   1c6cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c6d0:	f7ff ffc4 	bl	1c65c <__aeabi_cdrcmple>
   1c6d4:	bf34      	ite	cc
   1c6d6:	2001      	movcc	r0, #1
   1c6d8:	2000      	movcs	r0, #0
   1c6da:	f85d fb08 	ldr.w	pc, [sp], #8
   1c6de:	bf00      	nop

0001c6e0 <__aeabi_dcmpun>:
   1c6e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c6e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c6e8:	d102      	bne.n	1c6f0 <__aeabi_dcmpun+0x10>
   1c6ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1c6ee:	d10a      	bne.n	1c706 <__aeabi_dcmpun+0x26>
   1c6f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c6f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c6f8:	d102      	bne.n	1c700 <__aeabi_dcmpun+0x20>
   1c6fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1c6fe:	d102      	bne.n	1c706 <__aeabi_dcmpun+0x26>
   1c700:	f04f 0000 	mov.w	r0, #0
   1c704:	4770      	bx	lr
   1c706:	f04f 0001 	mov.w	r0, #1
   1c70a:	4770      	bx	lr

0001c70c <__aeabi_d2iz>:
   1c70c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c710:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c714:	d215      	bcs.n	1c742 <__aeabi_d2iz+0x36>
   1c716:	d511      	bpl.n	1c73c <__aeabi_d2iz+0x30>
   1c718:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c71c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c720:	d912      	bls.n	1c748 <__aeabi_d2iz+0x3c>
   1c722:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c726:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c72a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c72e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c732:	fa23 f002 	lsr.w	r0, r3, r2
   1c736:	bf18      	it	ne
   1c738:	4240      	negne	r0, r0
   1c73a:	4770      	bx	lr
   1c73c:	f04f 0000 	mov.w	r0, #0
   1c740:	4770      	bx	lr
   1c742:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c746:	d105      	bne.n	1c754 <__aeabi_d2iz+0x48>
   1c748:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1c74c:	bf08      	it	eq
   1c74e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1c752:	4770      	bx	lr
   1c754:	f04f 0000 	mov.w	r0, #0
   1c758:	4770      	bx	lr
   1c75a:	bf00      	nop

0001c75c <__aeabi_d2uiz>:
   1c75c:	004a      	lsls	r2, r1, #1
   1c75e:	d211      	bcs.n	1c784 <__aeabi_d2uiz+0x28>
   1c760:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c764:	d211      	bcs.n	1c78a <__aeabi_d2uiz+0x2e>
   1c766:	d50d      	bpl.n	1c784 <__aeabi_d2uiz+0x28>
   1c768:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c76c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c770:	d40e      	bmi.n	1c790 <__aeabi_d2uiz+0x34>
   1c772:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c77a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c77e:	fa23 f002 	lsr.w	r0, r3, r2
   1c782:	4770      	bx	lr
   1c784:	f04f 0000 	mov.w	r0, #0
   1c788:	4770      	bx	lr
   1c78a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c78e:	d102      	bne.n	1c796 <__aeabi_d2uiz+0x3a>
   1c790:	f04f 30ff 	mov.w	r0, #4294967295
   1c794:	4770      	bx	lr
   1c796:	f04f 0000 	mov.w	r0, #0
   1c79a:	4770      	bx	lr

0001c79c <__aeabi_frsub>:
   1c79c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c7a0:	e002      	b.n	1c7a8 <__addsf3>
   1c7a2:	bf00      	nop

0001c7a4 <__aeabi_fsub>:
   1c7a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001c7a8 <__addsf3>:
   1c7a8:	0042      	lsls	r2, r0, #1
   1c7aa:	bf1f      	itttt	ne
   1c7ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1c7b0:	ea92 0f03 	teqne	r2, r3
   1c7b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1c7b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c7bc:	d06a      	beq.n	1c894 <__addsf3+0xec>
   1c7be:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1c7c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1c7c6:	bfc1      	itttt	gt
   1c7c8:	18d2      	addgt	r2, r2, r3
   1c7ca:	4041      	eorgt	r1, r0
   1c7cc:	4048      	eorgt	r0, r1
   1c7ce:	4041      	eorgt	r1, r0
   1c7d0:	bfb8      	it	lt
   1c7d2:	425b      	neglt	r3, r3
   1c7d4:	2b19      	cmp	r3, #25
   1c7d6:	bf88      	it	hi
   1c7d8:	4770      	bxhi	lr
   1c7da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1c7de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c7e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c7e6:	bf18      	it	ne
   1c7e8:	4240      	negne	r0, r0
   1c7ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c7ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1c7f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1c7f6:	bf18      	it	ne
   1c7f8:	4249      	negne	r1, r1
   1c7fa:	ea92 0f03 	teq	r2, r3
   1c7fe:	d03f      	beq.n	1c880 <__addsf3+0xd8>
   1c800:	f1a2 0201 	sub.w	r2, r2, #1
   1c804:	fa41 fc03 	asr.w	ip, r1, r3
   1c808:	eb10 000c 	adds.w	r0, r0, ip
   1c80c:	f1c3 0320 	rsb	r3, r3, #32
   1c810:	fa01 f103 	lsl.w	r1, r1, r3
   1c814:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c818:	d502      	bpl.n	1c820 <__addsf3+0x78>
   1c81a:	4249      	negs	r1, r1
   1c81c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1c820:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c824:	d313      	bcc.n	1c84e <__addsf3+0xa6>
   1c826:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1c82a:	d306      	bcc.n	1c83a <__addsf3+0x92>
   1c82c:	0840      	lsrs	r0, r0, #1
   1c82e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c832:	f102 0201 	add.w	r2, r2, #1
   1c836:	2afe      	cmp	r2, #254	; 0xfe
   1c838:	d251      	bcs.n	1c8de <__addsf3+0x136>
   1c83a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1c83e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c842:	bf08      	it	eq
   1c844:	f020 0001 	biceq.w	r0, r0, #1
   1c848:	ea40 0003 	orr.w	r0, r0, r3
   1c84c:	4770      	bx	lr
   1c84e:	0049      	lsls	r1, r1, #1
   1c850:	eb40 0000 	adc.w	r0, r0, r0
   1c854:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1c858:	f1a2 0201 	sub.w	r2, r2, #1
   1c85c:	d1ed      	bne.n	1c83a <__addsf3+0x92>
   1c85e:	fab0 fc80 	clz	ip, r0
   1c862:	f1ac 0c08 	sub.w	ip, ip, #8
   1c866:	ebb2 020c 	subs.w	r2, r2, ip
   1c86a:	fa00 f00c 	lsl.w	r0, r0, ip
   1c86e:	bfaa      	itet	ge
   1c870:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1c874:	4252      	neglt	r2, r2
   1c876:	4318      	orrge	r0, r3
   1c878:	bfbc      	itt	lt
   1c87a:	40d0      	lsrlt	r0, r2
   1c87c:	4318      	orrlt	r0, r3
   1c87e:	4770      	bx	lr
   1c880:	f092 0f00 	teq	r2, #0
   1c884:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1c888:	bf06      	itte	eq
   1c88a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1c88e:	3201      	addeq	r2, #1
   1c890:	3b01      	subne	r3, #1
   1c892:	e7b5      	b.n	1c800 <__addsf3+0x58>
   1c894:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1c898:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c89c:	bf18      	it	ne
   1c89e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c8a2:	d021      	beq.n	1c8e8 <__addsf3+0x140>
   1c8a4:	ea92 0f03 	teq	r2, r3
   1c8a8:	d004      	beq.n	1c8b4 <__addsf3+0x10c>
   1c8aa:	f092 0f00 	teq	r2, #0
   1c8ae:	bf08      	it	eq
   1c8b0:	4608      	moveq	r0, r1
   1c8b2:	4770      	bx	lr
   1c8b4:	ea90 0f01 	teq	r0, r1
   1c8b8:	bf1c      	itt	ne
   1c8ba:	2000      	movne	r0, #0
   1c8bc:	4770      	bxne	lr
   1c8be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1c8c2:	d104      	bne.n	1c8ce <__addsf3+0x126>
   1c8c4:	0040      	lsls	r0, r0, #1
   1c8c6:	bf28      	it	cs
   1c8c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1c8cc:	4770      	bx	lr
   1c8ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1c8d2:	bf3c      	itt	cc
   1c8d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1c8d8:	4770      	bxcc	lr
   1c8da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c8de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1c8e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c8e6:	4770      	bx	lr
   1c8e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1c8ec:	bf16      	itet	ne
   1c8ee:	4608      	movne	r0, r1
   1c8f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1c8f4:	4601      	movne	r1, r0
   1c8f6:	0242      	lsls	r2, r0, #9
   1c8f8:	bf06      	itte	eq
   1c8fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1c8fe:	ea90 0f01 	teqeq	r0, r1
   1c902:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1c906:	4770      	bx	lr

0001c908 <__aeabi_ui2f>:
   1c908:	f04f 0300 	mov.w	r3, #0
   1c90c:	e004      	b.n	1c918 <__aeabi_i2f+0x8>
   1c90e:	bf00      	nop

0001c910 <__aeabi_i2f>:
   1c910:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1c914:	bf48      	it	mi
   1c916:	4240      	negmi	r0, r0
   1c918:	ea5f 0c00 	movs.w	ip, r0
   1c91c:	bf08      	it	eq
   1c91e:	4770      	bxeq	lr
   1c920:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c924:	4601      	mov	r1, r0
   1c926:	f04f 0000 	mov.w	r0, #0
   1c92a:	e01c      	b.n	1c966 <__aeabi_l2f+0x2a>

0001c92c <__aeabi_ul2f>:
   1c92c:	ea50 0201 	orrs.w	r2, r0, r1
   1c930:	bf08      	it	eq
   1c932:	4770      	bxeq	lr
   1c934:	f04f 0300 	mov.w	r3, #0
   1c938:	e00a      	b.n	1c950 <__aeabi_l2f+0x14>
   1c93a:	bf00      	nop

0001c93c <__aeabi_l2f>:
   1c93c:	ea50 0201 	orrs.w	r2, r0, r1
   1c940:	bf08      	it	eq
   1c942:	4770      	bxeq	lr
   1c944:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c948:	d502      	bpl.n	1c950 <__aeabi_l2f+0x14>
   1c94a:	4240      	negs	r0, r0
   1c94c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c950:	ea5f 0c01 	movs.w	ip, r1
   1c954:	bf02      	ittt	eq
   1c956:	4684      	moveq	ip, r0
   1c958:	4601      	moveq	r1, r0
   1c95a:	2000      	moveq	r0, #0
   1c95c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c960:	bf08      	it	eq
   1c962:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c966:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c96a:	fabc f28c 	clz	r2, ip
   1c96e:	3a08      	subs	r2, #8
   1c970:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c974:	db10      	blt.n	1c998 <__aeabi_l2f+0x5c>
   1c976:	fa01 fc02 	lsl.w	ip, r1, r2
   1c97a:	4463      	add	r3, ip
   1c97c:	fa00 fc02 	lsl.w	ip, r0, r2
   1c980:	f1c2 0220 	rsb	r2, r2, #32
   1c984:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c988:	fa20 f202 	lsr.w	r2, r0, r2
   1c98c:	eb43 0002 	adc.w	r0, r3, r2
   1c990:	bf08      	it	eq
   1c992:	f020 0001 	biceq.w	r0, r0, #1
   1c996:	4770      	bx	lr
   1c998:	f102 0220 	add.w	r2, r2, #32
   1c99c:	fa01 fc02 	lsl.w	ip, r1, r2
   1c9a0:	f1c2 0220 	rsb	r2, r2, #32
   1c9a4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c9a8:	fa21 f202 	lsr.w	r2, r1, r2
   1c9ac:	eb43 0002 	adc.w	r0, r3, r2
   1c9b0:	bf08      	it	eq
   1c9b2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c9b6:	4770      	bx	lr

0001c9b8 <__aeabi_fmul>:
   1c9b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c9bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1c9c0:	bf1e      	ittt	ne
   1c9c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1c9c6:	ea92 0f0c 	teqne	r2, ip
   1c9ca:	ea93 0f0c 	teqne	r3, ip
   1c9ce:	d06f      	beq.n	1cab0 <__aeabi_fmul+0xf8>
   1c9d0:	441a      	add	r2, r3
   1c9d2:	ea80 0c01 	eor.w	ip, r0, r1
   1c9d6:	0240      	lsls	r0, r0, #9
   1c9d8:	bf18      	it	ne
   1c9da:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1c9de:	d01e      	beq.n	1ca1e <__aeabi_fmul+0x66>
   1c9e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1c9e4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1c9e8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1c9ec:	fba0 3101 	umull	r3, r1, r0, r1
   1c9f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1c9f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1c9f8:	bf3e      	ittt	cc
   1c9fa:	0049      	lslcc	r1, r1, #1
   1c9fc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1ca00:	005b      	lslcc	r3, r3, #1
   1ca02:	ea40 0001 	orr.w	r0, r0, r1
   1ca06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1ca0a:	2afd      	cmp	r2, #253	; 0xfd
   1ca0c:	d81d      	bhi.n	1ca4a <__aeabi_fmul+0x92>
   1ca0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1ca12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1ca16:	bf08      	it	eq
   1ca18:	f020 0001 	biceq.w	r0, r0, #1
   1ca1c:	4770      	bx	lr
   1ca1e:	f090 0f00 	teq	r0, #0
   1ca22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1ca26:	bf08      	it	eq
   1ca28:	0249      	lsleq	r1, r1, #9
   1ca2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1ca2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1ca32:	3a7f      	subs	r2, #127	; 0x7f
   1ca34:	bfc2      	ittt	gt
   1ca36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1ca3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1ca3e:	4770      	bxgt	lr
   1ca40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ca44:	f04f 0300 	mov.w	r3, #0
   1ca48:	3a01      	subs	r2, #1
   1ca4a:	dc5d      	bgt.n	1cb08 <__aeabi_fmul+0x150>
   1ca4c:	f112 0f19 	cmn.w	r2, #25
   1ca50:	bfdc      	itt	le
   1ca52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1ca56:	4770      	bxle	lr
   1ca58:	f1c2 0200 	rsb	r2, r2, #0
   1ca5c:	0041      	lsls	r1, r0, #1
   1ca5e:	fa21 f102 	lsr.w	r1, r1, r2
   1ca62:	f1c2 0220 	rsb	r2, r2, #32
   1ca66:	fa00 fc02 	lsl.w	ip, r0, r2
   1ca6a:	ea5f 0031 	movs.w	r0, r1, rrx
   1ca6e:	f140 0000 	adc.w	r0, r0, #0
   1ca72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1ca76:	bf08      	it	eq
   1ca78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1ca7c:	4770      	bx	lr
   1ca7e:	f092 0f00 	teq	r2, #0
   1ca82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1ca86:	bf02      	ittt	eq
   1ca88:	0040      	lsleq	r0, r0, #1
   1ca8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1ca8e:	3a01      	subeq	r2, #1
   1ca90:	d0f9      	beq.n	1ca86 <__aeabi_fmul+0xce>
   1ca92:	ea40 000c 	orr.w	r0, r0, ip
   1ca96:	f093 0f00 	teq	r3, #0
   1ca9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1ca9e:	bf02      	ittt	eq
   1caa0:	0049      	lsleq	r1, r1, #1
   1caa2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1caa6:	3b01      	subeq	r3, #1
   1caa8:	d0f9      	beq.n	1ca9e <__aeabi_fmul+0xe6>
   1caaa:	ea41 010c 	orr.w	r1, r1, ip
   1caae:	e78f      	b.n	1c9d0 <__aeabi_fmul+0x18>
   1cab0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1cab4:	ea92 0f0c 	teq	r2, ip
   1cab8:	bf18      	it	ne
   1caba:	ea93 0f0c 	teqne	r3, ip
   1cabe:	d00a      	beq.n	1cad6 <__aeabi_fmul+0x11e>
   1cac0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1cac4:	bf18      	it	ne
   1cac6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1caca:	d1d8      	bne.n	1ca7e <__aeabi_fmul+0xc6>
   1cacc:	ea80 0001 	eor.w	r0, r0, r1
   1cad0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1cad4:	4770      	bx	lr
   1cad6:	f090 0f00 	teq	r0, #0
   1cada:	bf17      	itett	ne
   1cadc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1cae0:	4608      	moveq	r0, r1
   1cae2:	f091 0f00 	teqne	r1, #0
   1cae6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1caea:	d014      	beq.n	1cb16 <__aeabi_fmul+0x15e>
   1caec:	ea92 0f0c 	teq	r2, ip
   1caf0:	d101      	bne.n	1caf6 <__aeabi_fmul+0x13e>
   1caf2:	0242      	lsls	r2, r0, #9
   1caf4:	d10f      	bne.n	1cb16 <__aeabi_fmul+0x15e>
   1caf6:	ea93 0f0c 	teq	r3, ip
   1cafa:	d103      	bne.n	1cb04 <__aeabi_fmul+0x14c>
   1cafc:	024b      	lsls	r3, r1, #9
   1cafe:	bf18      	it	ne
   1cb00:	4608      	movne	r0, r1
   1cb02:	d108      	bne.n	1cb16 <__aeabi_fmul+0x15e>
   1cb04:	ea80 0001 	eor.w	r0, r0, r1
   1cb08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1cb0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1cb10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1cb14:	4770      	bx	lr
   1cb16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1cb1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1cb1e:	4770      	bx	lr

0001cb20 <__aeabi_fdiv>:
   1cb20:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1cb24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1cb28:	bf1e      	ittt	ne
   1cb2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1cb2e:	ea92 0f0c 	teqne	r2, ip
   1cb32:	ea93 0f0c 	teqne	r3, ip
   1cb36:	d069      	beq.n	1cc0c <__aeabi_fdiv+0xec>
   1cb38:	eba2 0203 	sub.w	r2, r2, r3
   1cb3c:	ea80 0c01 	eor.w	ip, r0, r1
   1cb40:	0249      	lsls	r1, r1, #9
   1cb42:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1cb46:	d037      	beq.n	1cbb8 <__aeabi_fdiv+0x98>
   1cb48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1cb4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1cb50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1cb54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1cb58:	428b      	cmp	r3, r1
   1cb5a:	bf38      	it	cc
   1cb5c:	005b      	lslcc	r3, r3, #1
   1cb5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1cb62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1cb66:	428b      	cmp	r3, r1
   1cb68:	bf24      	itt	cs
   1cb6a:	1a5b      	subcs	r3, r3, r1
   1cb6c:	ea40 000c 	orrcs.w	r0, r0, ip
   1cb70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1cb74:	bf24      	itt	cs
   1cb76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1cb7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cb7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1cb82:	bf24      	itt	cs
   1cb84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1cb88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cb8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1cb90:	bf24      	itt	cs
   1cb92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1cb96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cb9a:	011b      	lsls	r3, r3, #4
   1cb9c:	bf18      	it	ne
   1cb9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1cba2:	d1e0      	bne.n	1cb66 <__aeabi_fdiv+0x46>
   1cba4:	2afd      	cmp	r2, #253	; 0xfd
   1cba6:	f63f af50 	bhi.w	1ca4a <__aeabi_fmul+0x92>
   1cbaa:	428b      	cmp	r3, r1
   1cbac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1cbb0:	bf08      	it	eq
   1cbb2:	f020 0001 	biceq.w	r0, r0, #1
   1cbb6:	4770      	bx	lr
   1cbb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1cbbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1cbc0:	327f      	adds	r2, #127	; 0x7f
   1cbc2:	bfc2      	ittt	gt
   1cbc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1cbc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1cbcc:	4770      	bxgt	lr
   1cbce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1cbd2:	f04f 0300 	mov.w	r3, #0
   1cbd6:	3a01      	subs	r2, #1
   1cbd8:	e737      	b.n	1ca4a <__aeabi_fmul+0x92>
   1cbda:	f092 0f00 	teq	r2, #0
   1cbde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1cbe2:	bf02      	ittt	eq
   1cbe4:	0040      	lsleq	r0, r0, #1
   1cbe6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1cbea:	3a01      	subeq	r2, #1
   1cbec:	d0f9      	beq.n	1cbe2 <__aeabi_fdiv+0xc2>
   1cbee:	ea40 000c 	orr.w	r0, r0, ip
   1cbf2:	f093 0f00 	teq	r3, #0
   1cbf6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cbfa:	bf02      	ittt	eq
   1cbfc:	0049      	lsleq	r1, r1, #1
   1cbfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1cc02:	3b01      	subeq	r3, #1
   1cc04:	d0f9      	beq.n	1cbfa <__aeabi_fdiv+0xda>
   1cc06:	ea41 010c 	orr.w	r1, r1, ip
   1cc0a:	e795      	b.n	1cb38 <__aeabi_fdiv+0x18>
   1cc0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1cc10:	ea92 0f0c 	teq	r2, ip
   1cc14:	d108      	bne.n	1cc28 <__aeabi_fdiv+0x108>
   1cc16:	0242      	lsls	r2, r0, #9
   1cc18:	f47f af7d 	bne.w	1cb16 <__aeabi_fmul+0x15e>
   1cc1c:	ea93 0f0c 	teq	r3, ip
   1cc20:	f47f af70 	bne.w	1cb04 <__aeabi_fmul+0x14c>
   1cc24:	4608      	mov	r0, r1
   1cc26:	e776      	b.n	1cb16 <__aeabi_fmul+0x15e>
   1cc28:	ea93 0f0c 	teq	r3, ip
   1cc2c:	d104      	bne.n	1cc38 <__aeabi_fdiv+0x118>
   1cc2e:	024b      	lsls	r3, r1, #9
   1cc30:	f43f af4c 	beq.w	1cacc <__aeabi_fmul+0x114>
   1cc34:	4608      	mov	r0, r1
   1cc36:	e76e      	b.n	1cb16 <__aeabi_fmul+0x15e>
   1cc38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1cc3c:	bf18      	it	ne
   1cc3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1cc42:	d1ca      	bne.n	1cbda <__aeabi_fdiv+0xba>
   1cc44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1cc48:	f47f af5c 	bne.w	1cb04 <__aeabi_fmul+0x14c>
   1cc4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1cc50:	f47f af3c 	bne.w	1cacc <__aeabi_fmul+0x114>
   1cc54:	e75f      	b.n	1cb16 <__aeabi_fmul+0x15e>
   1cc56:	bf00      	nop

0001cc58 <__gesf2>:
   1cc58:	f04f 3cff 	mov.w	ip, #4294967295
   1cc5c:	e006      	b.n	1cc6c <__cmpsf2+0x4>
   1cc5e:	bf00      	nop

0001cc60 <__lesf2>:
   1cc60:	f04f 0c01 	mov.w	ip, #1
   1cc64:	e002      	b.n	1cc6c <__cmpsf2+0x4>
   1cc66:	bf00      	nop

0001cc68 <__cmpsf2>:
   1cc68:	f04f 0c01 	mov.w	ip, #1
   1cc6c:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cc70:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1cc74:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1cc78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1cc7c:	bf18      	it	ne
   1cc7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1cc82:	d011      	beq.n	1cca8 <__cmpsf2+0x40>
   1cc84:	b001      	add	sp, #4
   1cc86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1cc8a:	bf18      	it	ne
   1cc8c:	ea90 0f01 	teqne	r0, r1
   1cc90:	bf58      	it	pl
   1cc92:	ebb2 0003 	subspl.w	r0, r2, r3
   1cc96:	bf88      	it	hi
   1cc98:	17c8      	asrhi	r0, r1, #31
   1cc9a:	bf38      	it	cc
   1cc9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1cca0:	bf18      	it	ne
   1cca2:	f040 0001 	orrne.w	r0, r0, #1
   1cca6:	4770      	bx	lr
   1cca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1ccac:	d102      	bne.n	1ccb4 <__cmpsf2+0x4c>
   1ccae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1ccb2:	d105      	bne.n	1ccc0 <__cmpsf2+0x58>
   1ccb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1ccb8:	d1e4      	bne.n	1cc84 <__cmpsf2+0x1c>
   1ccba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1ccbe:	d0e1      	beq.n	1cc84 <__cmpsf2+0x1c>
   1ccc0:	f85d 0b04 	ldr.w	r0, [sp], #4
   1ccc4:	4770      	bx	lr
   1ccc6:	bf00      	nop

0001ccc8 <__aeabi_cfrcmple>:
   1ccc8:	4684      	mov	ip, r0
   1ccca:	4608      	mov	r0, r1
   1cccc:	4661      	mov	r1, ip
   1ccce:	e7ff      	b.n	1ccd0 <__aeabi_cfcmpeq>

0001ccd0 <__aeabi_cfcmpeq>:
   1ccd0:	b50f      	push	{r0, r1, r2, r3, lr}
   1ccd2:	f7ff ffc9 	bl	1cc68 <__cmpsf2>
   1ccd6:	2800      	cmp	r0, #0
   1ccd8:	bf48      	it	mi
   1ccda:	f110 0f00 	cmnmi.w	r0, #0
   1ccde:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001cce0 <__aeabi_fcmpeq>:
   1cce0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cce4:	f7ff fff4 	bl	1ccd0 <__aeabi_cfcmpeq>
   1cce8:	bf0c      	ite	eq
   1ccea:	2001      	moveq	r0, #1
   1ccec:	2000      	movne	r0, #0
   1ccee:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccf2:	bf00      	nop

0001ccf4 <__aeabi_fcmplt>:
   1ccf4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccf8:	f7ff ffea 	bl	1ccd0 <__aeabi_cfcmpeq>
   1ccfc:	bf34      	ite	cc
   1ccfe:	2001      	movcc	r0, #1
   1cd00:	2000      	movcs	r0, #0
   1cd02:	f85d fb08 	ldr.w	pc, [sp], #8
   1cd06:	bf00      	nop

0001cd08 <__aeabi_fcmple>:
   1cd08:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cd0c:	f7ff ffe0 	bl	1ccd0 <__aeabi_cfcmpeq>
   1cd10:	bf94      	ite	ls
   1cd12:	2001      	movls	r0, #1
   1cd14:	2000      	movhi	r0, #0
   1cd16:	f85d fb08 	ldr.w	pc, [sp], #8
   1cd1a:	bf00      	nop

0001cd1c <__aeabi_fcmpge>:
   1cd1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cd20:	f7ff ffd2 	bl	1ccc8 <__aeabi_cfrcmple>
   1cd24:	bf94      	ite	ls
   1cd26:	2001      	movls	r0, #1
   1cd28:	2000      	movhi	r0, #0
   1cd2a:	f85d fb08 	ldr.w	pc, [sp], #8
   1cd2e:	bf00      	nop

0001cd30 <__aeabi_fcmpgt>:
   1cd30:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cd34:	f7ff ffc8 	bl	1ccc8 <__aeabi_cfrcmple>
   1cd38:	bf34      	ite	cc
   1cd3a:	2001      	movcc	r0, #1
   1cd3c:	2000      	movcs	r0, #0
   1cd3e:	f85d fb08 	ldr.w	pc, [sp], #8
   1cd42:	bf00      	nop

0001cd44 <__aeabi_f2uiz>:
   1cd44:	0042      	lsls	r2, r0, #1
   1cd46:	d20e      	bcs.n	1cd66 <__aeabi_f2uiz+0x22>
   1cd48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1cd4c:	d30b      	bcc.n	1cd66 <__aeabi_f2uiz+0x22>
   1cd4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1cd52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1cd56:	d409      	bmi.n	1cd6c <__aeabi_f2uiz+0x28>
   1cd58:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1cd5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd60:	fa23 f002 	lsr.w	r0, r3, r2
   1cd64:	4770      	bx	lr
   1cd66:	f04f 0000 	mov.w	r0, #0
   1cd6a:	4770      	bx	lr
   1cd6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1cd70:	d101      	bne.n	1cd76 <__aeabi_f2uiz+0x32>
   1cd72:	0242      	lsls	r2, r0, #9
   1cd74:	d102      	bne.n	1cd7c <__aeabi_f2uiz+0x38>
   1cd76:	f04f 30ff 	mov.w	r0, #4294967295
   1cd7a:	4770      	bx	lr
   1cd7c:	f04f 0000 	mov.w	r0, #0
   1cd80:	4770      	bx	lr
   1cd82:	bf00      	nop

0001cd84 <__aeabi_uldivmod>:
   1cd84:	b953      	cbnz	r3, 1cd9c <__aeabi_uldivmod+0x18>
   1cd86:	b94a      	cbnz	r2, 1cd9c <__aeabi_uldivmod+0x18>
   1cd88:	2900      	cmp	r1, #0
   1cd8a:	bf08      	it	eq
   1cd8c:	2800      	cmpeq	r0, #0
   1cd8e:	bf1c      	itt	ne
   1cd90:	f04f 31ff 	movne.w	r1, #4294967295
   1cd94:	f04f 30ff 	movne.w	r0, #4294967295
   1cd98:	f000 b97a 	b.w	1d090 <__aeabi_idiv0>
   1cd9c:	f1ad 0c08 	sub.w	ip, sp, #8
   1cda0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cda4:	f000 f806 	bl	1cdb4 <__udivmoddi4>
   1cda8:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cdac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cdb0:	b004      	add	sp, #16
   1cdb2:	4770      	bx	lr

0001cdb4 <__udivmoddi4>:
   1cdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cdb8:	468c      	mov	ip, r1
   1cdba:	460d      	mov	r5, r1
   1cdbc:	4604      	mov	r4, r0
   1cdbe:	9e08      	ldr	r6, [sp, #32]
   1cdc0:	2b00      	cmp	r3, #0
   1cdc2:	d151      	bne.n	1ce68 <__udivmoddi4+0xb4>
   1cdc4:	428a      	cmp	r2, r1
   1cdc6:	4617      	mov	r7, r2
   1cdc8:	d96d      	bls.n	1cea6 <__udivmoddi4+0xf2>
   1cdca:	fab2 fe82 	clz	lr, r2
   1cdce:	f1be 0f00 	cmp.w	lr, #0
   1cdd2:	d00b      	beq.n	1cdec <__udivmoddi4+0x38>
   1cdd4:	f1ce 0c20 	rsb	ip, lr, #32
   1cdd8:	fa01 f50e 	lsl.w	r5, r1, lr
   1cddc:	fa20 fc0c 	lsr.w	ip, r0, ip
   1cde0:	fa02 f70e 	lsl.w	r7, r2, lr
   1cde4:	ea4c 0c05 	orr.w	ip, ip, r5
   1cde8:	fa00 f40e 	lsl.w	r4, r0, lr
   1cdec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1cdf0:	0c25      	lsrs	r5, r4, #16
   1cdf2:	fbbc f8fa 	udiv	r8, ip, sl
   1cdf6:	fa1f f987 	uxth.w	r9, r7
   1cdfa:	fb0a cc18 	mls	ip, sl, r8, ip
   1cdfe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1ce02:	fb08 f309 	mul.w	r3, r8, r9
   1ce06:	42ab      	cmp	r3, r5
   1ce08:	d90a      	bls.n	1ce20 <__udivmoddi4+0x6c>
   1ce0a:	19ed      	adds	r5, r5, r7
   1ce0c:	f108 32ff 	add.w	r2, r8, #4294967295
   1ce10:	f080 8123 	bcs.w	1d05a <__udivmoddi4+0x2a6>
   1ce14:	42ab      	cmp	r3, r5
   1ce16:	f240 8120 	bls.w	1d05a <__udivmoddi4+0x2a6>
   1ce1a:	f1a8 0802 	sub.w	r8, r8, #2
   1ce1e:	443d      	add	r5, r7
   1ce20:	1aed      	subs	r5, r5, r3
   1ce22:	b2a4      	uxth	r4, r4
   1ce24:	fbb5 f0fa 	udiv	r0, r5, sl
   1ce28:	fb0a 5510 	mls	r5, sl, r0, r5
   1ce2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1ce30:	fb00 f909 	mul.w	r9, r0, r9
   1ce34:	45a1      	cmp	r9, r4
   1ce36:	d909      	bls.n	1ce4c <__udivmoddi4+0x98>
   1ce38:	19e4      	adds	r4, r4, r7
   1ce3a:	f100 33ff 	add.w	r3, r0, #4294967295
   1ce3e:	f080 810a 	bcs.w	1d056 <__udivmoddi4+0x2a2>
   1ce42:	45a1      	cmp	r9, r4
   1ce44:	f240 8107 	bls.w	1d056 <__udivmoddi4+0x2a2>
   1ce48:	3802      	subs	r0, #2
   1ce4a:	443c      	add	r4, r7
   1ce4c:	eba4 0409 	sub.w	r4, r4, r9
   1ce50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1ce54:	2100      	movs	r1, #0
   1ce56:	2e00      	cmp	r6, #0
   1ce58:	d061      	beq.n	1cf1e <__udivmoddi4+0x16a>
   1ce5a:	fa24 f40e 	lsr.w	r4, r4, lr
   1ce5e:	2300      	movs	r3, #0
   1ce60:	6034      	str	r4, [r6, #0]
   1ce62:	6073      	str	r3, [r6, #4]
   1ce64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ce68:	428b      	cmp	r3, r1
   1ce6a:	d907      	bls.n	1ce7c <__udivmoddi4+0xc8>
   1ce6c:	2e00      	cmp	r6, #0
   1ce6e:	d054      	beq.n	1cf1a <__udivmoddi4+0x166>
   1ce70:	2100      	movs	r1, #0
   1ce72:	e886 0021 	stmia.w	r6, {r0, r5}
   1ce76:	4608      	mov	r0, r1
   1ce78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ce7c:	fab3 f183 	clz	r1, r3
   1ce80:	2900      	cmp	r1, #0
   1ce82:	f040 808e 	bne.w	1cfa2 <__udivmoddi4+0x1ee>
   1ce86:	42ab      	cmp	r3, r5
   1ce88:	d302      	bcc.n	1ce90 <__udivmoddi4+0xdc>
   1ce8a:	4282      	cmp	r2, r0
   1ce8c:	f200 80fa 	bhi.w	1d084 <__udivmoddi4+0x2d0>
   1ce90:	1a84      	subs	r4, r0, r2
   1ce92:	eb65 0503 	sbc.w	r5, r5, r3
   1ce96:	2001      	movs	r0, #1
   1ce98:	46ac      	mov	ip, r5
   1ce9a:	2e00      	cmp	r6, #0
   1ce9c:	d03f      	beq.n	1cf1e <__udivmoddi4+0x16a>
   1ce9e:	e886 1010 	stmia.w	r6, {r4, ip}
   1cea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cea6:	b912      	cbnz	r2, 1ceae <__udivmoddi4+0xfa>
   1cea8:	2701      	movs	r7, #1
   1ceaa:	fbb7 f7f2 	udiv	r7, r7, r2
   1ceae:	fab7 fe87 	clz	lr, r7
   1ceb2:	f1be 0f00 	cmp.w	lr, #0
   1ceb6:	d134      	bne.n	1cf22 <__udivmoddi4+0x16e>
   1ceb8:	1beb      	subs	r3, r5, r7
   1ceba:	0c3a      	lsrs	r2, r7, #16
   1cebc:	fa1f fc87 	uxth.w	ip, r7
   1cec0:	2101      	movs	r1, #1
   1cec2:	fbb3 f8f2 	udiv	r8, r3, r2
   1cec6:	0c25      	lsrs	r5, r4, #16
   1cec8:	fb02 3318 	mls	r3, r2, r8, r3
   1cecc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1ced0:	fb0c f308 	mul.w	r3, ip, r8
   1ced4:	42ab      	cmp	r3, r5
   1ced6:	d907      	bls.n	1cee8 <__udivmoddi4+0x134>
   1ced8:	19ed      	adds	r5, r5, r7
   1ceda:	f108 30ff 	add.w	r0, r8, #4294967295
   1cede:	d202      	bcs.n	1cee6 <__udivmoddi4+0x132>
   1cee0:	42ab      	cmp	r3, r5
   1cee2:	f200 80d1 	bhi.w	1d088 <__udivmoddi4+0x2d4>
   1cee6:	4680      	mov	r8, r0
   1cee8:	1aed      	subs	r5, r5, r3
   1ceea:	b2a3      	uxth	r3, r4
   1ceec:	fbb5 f0f2 	udiv	r0, r5, r2
   1cef0:	fb02 5510 	mls	r5, r2, r0, r5
   1cef4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1cef8:	fb0c fc00 	mul.w	ip, ip, r0
   1cefc:	45a4      	cmp	ip, r4
   1cefe:	d907      	bls.n	1cf10 <__udivmoddi4+0x15c>
   1cf00:	19e4      	adds	r4, r4, r7
   1cf02:	f100 33ff 	add.w	r3, r0, #4294967295
   1cf06:	d202      	bcs.n	1cf0e <__udivmoddi4+0x15a>
   1cf08:	45a4      	cmp	ip, r4
   1cf0a:	f200 80b8 	bhi.w	1d07e <__udivmoddi4+0x2ca>
   1cf0e:	4618      	mov	r0, r3
   1cf10:	eba4 040c 	sub.w	r4, r4, ip
   1cf14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1cf18:	e79d      	b.n	1ce56 <__udivmoddi4+0xa2>
   1cf1a:	4631      	mov	r1, r6
   1cf1c:	4630      	mov	r0, r6
   1cf1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cf22:	f1ce 0420 	rsb	r4, lr, #32
   1cf26:	fa05 f30e 	lsl.w	r3, r5, lr
   1cf2a:	fa07 f70e 	lsl.w	r7, r7, lr
   1cf2e:	fa20 f804 	lsr.w	r8, r0, r4
   1cf32:	0c3a      	lsrs	r2, r7, #16
   1cf34:	fa25 f404 	lsr.w	r4, r5, r4
   1cf38:	ea48 0803 	orr.w	r8, r8, r3
   1cf3c:	fbb4 f1f2 	udiv	r1, r4, r2
   1cf40:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1cf44:	fb02 4411 	mls	r4, r2, r1, r4
   1cf48:	fa1f fc87 	uxth.w	ip, r7
   1cf4c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1cf50:	fb01 f30c 	mul.w	r3, r1, ip
   1cf54:	42ab      	cmp	r3, r5
   1cf56:	fa00 f40e 	lsl.w	r4, r0, lr
   1cf5a:	d909      	bls.n	1cf70 <__udivmoddi4+0x1bc>
   1cf5c:	19ed      	adds	r5, r5, r7
   1cf5e:	f101 30ff 	add.w	r0, r1, #4294967295
   1cf62:	f080 808a 	bcs.w	1d07a <__udivmoddi4+0x2c6>
   1cf66:	42ab      	cmp	r3, r5
   1cf68:	f240 8087 	bls.w	1d07a <__udivmoddi4+0x2c6>
   1cf6c:	3902      	subs	r1, #2
   1cf6e:	443d      	add	r5, r7
   1cf70:	1aeb      	subs	r3, r5, r3
   1cf72:	fa1f f588 	uxth.w	r5, r8
   1cf76:	fbb3 f0f2 	udiv	r0, r3, r2
   1cf7a:	fb02 3310 	mls	r3, r2, r0, r3
   1cf7e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1cf82:	fb00 f30c 	mul.w	r3, r0, ip
   1cf86:	42ab      	cmp	r3, r5
   1cf88:	d907      	bls.n	1cf9a <__udivmoddi4+0x1e6>
   1cf8a:	19ed      	adds	r5, r5, r7
   1cf8c:	f100 38ff 	add.w	r8, r0, #4294967295
   1cf90:	d26f      	bcs.n	1d072 <__udivmoddi4+0x2be>
   1cf92:	42ab      	cmp	r3, r5
   1cf94:	d96d      	bls.n	1d072 <__udivmoddi4+0x2be>
   1cf96:	3802      	subs	r0, #2
   1cf98:	443d      	add	r5, r7
   1cf9a:	1aeb      	subs	r3, r5, r3
   1cf9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1cfa0:	e78f      	b.n	1cec2 <__udivmoddi4+0x10e>
   1cfa2:	f1c1 0720 	rsb	r7, r1, #32
   1cfa6:	fa22 f807 	lsr.w	r8, r2, r7
   1cfaa:	408b      	lsls	r3, r1
   1cfac:	fa05 f401 	lsl.w	r4, r5, r1
   1cfb0:	ea48 0303 	orr.w	r3, r8, r3
   1cfb4:	fa20 fe07 	lsr.w	lr, r0, r7
   1cfb8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1cfbc:	40fd      	lsrs	r5, r7
   1cfbe:	ea4e 0e04 	orr.w	lr, lr, r4
   1cfc2:	fbb5 f9fc 	udiv	r9, r5, ip
   1cfc6:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1cfca:	fb0c 5519 	mls	r5, ip, r9, r5
   1cfce:	fa1f f883 	uxth.w	r8, r3
   1cfd2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1cfd6:	fb09 f408 	mul.w	r4, r9, r8
   1cfda:	42ac      	cmp	r4, r5
   1cfdc:	fa02 f201 	lsl.w	r2, r2, r1
   1cfe0:	fa00 fa01 	lsl.w	sl, r0, r1
   1cfe4:	d908      	bls.n	1cff8 <__udivmoddi4+0x244>
   1cfe6:	18ed      	adds	r5, r5, r3
   1cfe8:	f109 30ff 	add.w	r0, r9, #4294967295
   1cfec:	d243      	bcs.n	1d076 <__udivmoddi4+0x2c2>
   1cfee:	42ac      	cmp	r4, r5
   1cff0:	d941      	bls.n	1d076 <__udivmoddi4+0x2c2>
   1cff2:	f1a9 0902 	sub.w	r9, r9, #2
   1cff6:	441d      	add	r5, r3
   1cff8:	1b2d      	subs	r5, r5, r4
   1cffa:	fa1f fe8e 	uxth.w	lr, lr
   1cffe:	fbb5 f0fc 	udiv	r0, r5, ip
   1d002:	fb0c 5510 	mls	r5, ip, r0, r5
   1d006:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1d00a:	fb00 f808 	mul.w	r8, r0, r8
   1d00e:	45a0      	cmp	r8, r4
   1d010:	d907      	bls.n	1d022 <__udivmoddi4+0x26e>
   1d012:	18e4      	adds	r4, r4, r3
   1d014:	f100 35ff 	add.w	r5, r0, #4294967295
   1d018:	d229      	bcs.n	1d06e <__udivmoddi4+0x2ba>
   1d01a:	45a0      	cmp	r8, r4
   1d01c:	d927      	bls.n	1d06e <__udivmoddi4+0x2ba>
   1d01e:	3802      	subs	r0, #2
   1d020:	441c      	add	r4, r3
   1d022:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1d026:	eba4 0408 	sub.w	r4, r4, r8
   1d02a:	fba0 8902 	umull	r8, r9, r0, r2
   1d02e:	454c      	cmp	r4, r9
   1d030:	46c6      	mov	lr, r8
   1d032:	464d      	mov	r5, r9
   1d034:	d315      	bcc.n	1d062 <__udivmoddi4+0x2ae>
   1d036:	d012      	beq.n	1d05e <__udivmoddi4+0x2aa>
   1d038:	b156      	cbz	r6, 1d050 <__udivmoddi4+0x29c>
   1d03a:	ebba 030e 	subs.w	r3, sl, lr
   1d03e:	eb64 0405 	sbc.w	r4, r4, r5
   1d042:	fa04 f707 	lsl.w	r7, r4, r7
   1d046:	40cb      	lsrs	r3, r1
   1d048:	431f      	orrs	r7, r3
   1d04a:	40cc      	lsrs	r4, r1
   1d04c:	6037      	str	r7, [r6, #0]
   1d04e:	6074      	str	r4, [r6, #4]
   1d050:	2100      	movs	r1, #0
   1d052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d056:	4618      	mov	r0, r3
   1d058:	e6f8      	b.n	1ce4c <__udivmoddi4+0x98>
   1d05a:	4690      	mov	r8, r2
   1d05c:	e6e0      	b.n	1ce20 <__udivmoddi4+0x6c>
   1d05e:	45c2      	cmp	sl, r8
   1d060:	d2ea      	bcs.n	1d038 <__udivmoddi4+0x284>
   1d062:	ebb8 0e02 	subs.w	lr, r8, r2
   1d066:	eb69 0503 	sbc.w	r5, r9, r3
   1d06a:	3801      	subs	r0, #1
   1d06c:	e7e4      	b.n	1d038 <__udivmoddi4+0x284>
   1d06e:	4628      	mov	r0, r5
   1d070:	e7d7      	b.n	1d022 <__udivmoddi4+0x26e>
   1d072:	4640      	mov	r0, r8
   1d074:	e791      	b.n	1cf9a <__udivmoddi4+0x1e6>
   1d076:	4681      	mov	r9, r0
   1d078:	e7be      	b.n	1cff8 <__udivmoddi4+0x244>
   1d07a:	4601      	mov	r1, r0
   1d07c:	e778      	b.n	1cf70 <__udivmoddi4+0x1bc>
   1d07e:	3802      	subs	r0, #2
   1d080:	443c      	add	r4, r7
   1d082:	e745      	b.n	1cf10 <__udivmoddi4+0x15c>
   1d084:	4608      	mov	r0, r1
   1d086:	e708      	b.n	1ce9a <__udivmoddi4+0xe6>
   1d088:	f1a8 0802 	sub.w	r8, r8, #2
   1d08c:	443d      	add	r5, r7
   1d08e:	e72b      	b.n	1cee8 <__udivmoddi4+0x134>

0001d090 <__aeabi_idiv0>:
   1d090:	4770      	bx	lr
   1d092:	bf00      	nop

0001d094 <ctime>:
   1d094:	b508      	push	{r3, lr}
   1d096:	f000 f84d 	bl	1d134 <localtime>
   1d09a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d09e:	f000 bdd3 	b.w	1dc48 <asctime>
   1d0a2:	bf00      	nop

0001d0a4 <__cxa_atexit>:
   1d0a4:	4613      	mov	r3, r2
   1d0a6:	460a      	mov	r2, r1
   1d0a8:	4601      	mov	r1, r0
   1d0aa:	2002      	movs	r0, #2
   1d0ac:	f000 bd60 	b.w	1db70 <__register_exitproc>

0001d0b0 <difftime>:
   1d0b0:	b508      	push	{r3, lr}
   1d0b2:	1a40      	subs	r0, r0, r1
   1d0b4:	f7ff f814 	bl	1c0e0 <__aeabi_i2d>
   1d0b8:	bd08      	pop	{r3, pc}
   1d0ba:	bf00      	nop

0001d0bc <__errno>:
   1d0bc:	4b01      	ldr	r3, [pc, #4]	; (1d0c4 <__errno+0x8>)
   1d0be:	6818      	ldr	r0, [r3, #0]
   1d0c0:	4770      	bx	lr
   1d0c2:	bf00      	nop
   1d0c4:	20000248 	.word	0x20000248

0001d0c8 <ffs>:
   1d0c8:	b140      	cbz	r0, 1d0dc <ffs+0x14>
   1d0ca:	2300      	movs	r3, #0
   1d0cc:	fa40 f103 	asr.w	r1, r0, r3
   1d0d0:	1c5a      	adds	r2, r3, #1
   1d0d2:	07c9      	lsls	r1, r1, #31
   1d0d4:	4613      	mov	r3, r2
   1d0d6:	d5f9      	bpl.n	1d0cc <ffs+0x4>
   1d0d8:	4610      	mov	r0, r2
   1d0da:	4770      	bx	lr
   1d0dc:	4602      	mov	r2, r0
   1d0de:	4610      	mov	r0, r2
   1d0e0:	4770      	bx	lr
   1d0e2:	bf00      	nop

0001d0e4 <__libc_init_array>:
   1d0e4:	b570      	push	{r4, r5, r6, lr}
   1d0e6:	4e0f      	ldr	r6, [pc, #60]	; (1d124 <__libc_init_array+0x40>)
   1d0e8:	4d0f      	ldr	r5, [pc, #60]	; (1d128 <__libc_init_array+0x44>)
   1d0ea:	1b76      	subs	r6, r6, r5
   1d0ec:	10b6      	asrs	r6, r6, #2
   1d0ee:	bf18      	it	ne
   1d0f0:	2400      	movne	r4, #0
   1d0f2:	d005      	beq.n	1d100 <__libc_init_array+0x1c>
   1d0f4:	3401      	adds	r4, #1
   1d0f6:	f855 3b04 	ldr.w	r3, [r5], #4
   1d0fa:	4798      	blx	r3
   1d0fc:	42a6      	cmp	r6, r4
   1d0fe:	d1f9      	bne.n	1d0f4 <__libc_init_array+0x10>
   1d100:	4e0a      	ldr	r6, [pc, #40]	; (1d12c <__libc_init_array+0x48>)
   1d102:	4d0b      	ldr	r5, [pc, #44]	; (1d130 <__libc_init_array+0x4c>)
   1d104:	1b76      	subs	r6, r6, r5
   1d106:	f006 fb41 	bl	2378c <_init>
   1d10a:	10b6      	asrs	r6, r6, #2
   1d10c:	bf18      	it	ne
   1d10e:	2400      	movne	r4, #0
   1d110:	d006      	beq.n	1d120 <__libc_init_array+0x3c>
   1d112:	3401      	adds	r4, #1
   1d114:	f855 3b04 	ldr.w	r3, [r5], #4
   1d118:	4798      	blx	r3
   1d11a:	42a6      	cmp	r6, r4
   1d11c:	d1f9      	bne.n	1d112 <__libc_init_array+0x2e>
   1d11e:	bd70      	pop	{r4, r5, r6, pc}
   1d120:	bd70      	pop	{r4, r5, r6, pc}
   1d122:	bf00      	nop
   1d124:	00023798 	.word	0x00023798
   1d128:	00023798 	.word	0x00023798
   1d12c:	000237fc 	.word	0x000237fc
   1d130:	00023798 	.word	0x00023798

0001d134 <localtime>:
   1d134:	4b02      	ldr	r3, [pc, #8]	; (1d140 <localtime+0xc>)
   1d136:	6819      	ldr	r1, [r3, #0]
   1d138:	317c      	adds	r1, #124	; 0x7c
   1d13a:	f000 b803 	b.w	1d144 <localtime_r>
   1d13e:	bf00      	nop
   1d140:	20000248 	.word	0x20000248

0001d144 <localtime_r>:
   1d144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d148:	460c      	mov	r4, r1
   1d14a:	4607      	mov	r7, r0
   1d14c:	f000 fe10 	bl	1dd70 <__gettzinfo>
   1d150:	4621      	mov	r1, r4
   1d152:	4680      	mov	r8, r0
   1d154:	4638      	mov	r0, r7
   1d156:	f000 fe0f 	bl	1dd78 <gmtime_r>
   1d15a:	6946      	ldr	r6, [r0, #20]
   1d15c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1d160:	07b1      	lsls	r1, r6, #30
   1d162:	4604      	mov	r4, r0
   1d164:	f000 80b9 	beq.w	1d2da <localtime_r+0x196>
   1d168:	17f5      	asrs	r5, r6, #31
   1d16a:	4b7f      	ldr	r3, [pc, #508]	; (1d368 <localtime_r+0x224>)
   1d16c:	fb83 2306 	smull	r2, r3, r3, r6
   1d170:	ebc5 15e3 	rsb	r5, r5, r3, asr #7
   1d174:	f44f 73c8 	mov.w	r3, #400	; 0x190
   1d178:	fb03 6515 	mls	r5, r3, r5, r6
   1d17c:	2d00      	cmp	r5, #0
   1d17e:	bf0c      	ite	eq
   1d180:	2530      	moveq	r5, #48	; 0x30
   1d182:	2500      	movne	r5, #0
   1d184:	4b79      	ldr	r3, [pc, #484]	; (1d36c <localtime_r+0x228>)
   1d186:	441d      	add	r5, r3
   1d188:	f000 fb4a 	bl	1d820 <__tz_lock>
   1d18c:	f000 fb54 	bl	1d838 <_tzset_unlocked>
   1d190:	4b77      	ldr	r3, [pc, #476]	; (1d370 <localtime_r+0x22c>)
   1d192:	681b      	ldr	r3, [r3, #0]
   1d194:	b343      	cbz	r3, 1d1e8 <localtime_r+0xa4>
   1d196:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d19a:	429e      	cmp	r6, r3
   1d19c:	d005      	beq.n	1d1aa <localtime_r+0x66>
   1d19e:	4630      	mov	r0, r6
   1d1a0:	f000 fa7c 	bl	1d69c <__tzcalc_limits>
   1d1a4:	2800      	cmp	r0, #0
   1d1a6:	f000 80a6 	beq.w	1d2f6 <localtime_r+0x1b2>
   1d1aa:	f8d8 3000 	ldr.w	r3, [r8]
   1d1ae:	b983      	cbnz	r3, 1d1d2 <localtime_r+0x8e>
   1d1b0:	683b      	ldr	r3, [r7, #0]
   1d1b2:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1d1b6:	4293      	cmp	r3, r2
   1d1b8:	f280 80a1 	bge.w	1d2fe <localtime_r+0x1ba>
   1d1bc:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1d1c0:	4293      	cmp	r3, r2
   1d1c2:	bfb4      	ite	lt
   1d1c4:	2301      	movlt	r3, #1
   1d1c6:	2300      	movge	r3, #0
   1d1c8:	6223      	str	r3, [r4, #32]
   1d1ca:	da0e      	bge.n	1d1ea <localtime_r+0xa6>
   1d1cc:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
   1d1d0:	e00d      	b.n	1d1ee <localtime_r+0xaa>
   1d1d2:	683b      	ldr	r3, [r7, #0]
   1d1d4:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1d1d8:	4293      	cmp	r3, r2
   1d1da:	db04      	blt.n	1d1e6 <localtime_r+0xa2>
   1d1dc:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1d1e0:	4293      	cmp	r3, r2
   1d1e2:	f2c0 808c 	blt.w	1d2fe <localtime_r+0x1ba>
   1d1e6:	2300      	movs	r3, #0
   1d1e8:	6223      	str	r3, [r4, #32]
   1d1ea:	f8d8 6020 	ldr.w	r6, [r8, #32]
   1d1ee:	4a61      	ldr	r2, [pc, #388]	; (1d374 <localtime_r+0x230>)
   1d1f0:	4f61      	ldr	r7, [pc, #388]	; (1d378 <localtime_r+0x234>)
   1d1f2:	68a1      	ldr	r1, [r4, #8]
   1d1f4:	fb82 3206 	smull	r3, r2, r2, r6
   1d1f8:	4432      	add	r2, r6
   1d1fa:	17f3      	asrs	r3, r6, #31
   1d1fc:	12d2      	asrs	r2, r2, #11
   1d1fe:	1ad0      	subs	r0, r2, r3
   1d200:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1d204:	fb0e 6010 	mls	r0, lr, r0, r6
   1d208:	fb87 6700 	smull	r6, r7, r7, r0
   1d20c:	183e      	adds	r6, r7, r0
   1d20e:	17c7      	asrs	r7, r0, #31
   1d210:	ebc7 1766 	rsb	r7, r7, r6, asr #5
   1d214:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
   1d218:	6826      	ldr	r6, [r4, #0]
   1d21a:	1ad3      	subs	r3, r2, r3
   1d21c:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
   1d220:	6862      	ldr	r2, [r4, #4]
   1d222:	1a30      	subs	r0, r6, r0
   1d224:	1acb      	subs	r3, r1, r3
   1d226:	1bd2      	subs	r2, r2, r7
   1d228:	283b      	cmp	r0, #59	; 0x3b
   1d22a:	e884 000d 	stmia.w	r4, {r0, r2, r3}
   1d22e:	dd4d      	ble.n	1d2cc <localtime_r+0x188>
   1d230:	3201      	adds	r2, #1
   1d232:	383c      	subs	r0, #60	; 0x3c
   1d234:	e884 0005 	stmia.w	r4, {r0, r2}
   1d238:	2a3b      	cmp	r2, #59	; 0x3b
   1d23a:	dd40      	ble.n	1d2be <localtime_r+0x17a>
   1d23c:	3301      	adds	r3, #1
   1d23e:	3a3c      	subs	r2, #60	; 0x3c
   1d240:	60a3      	str	r3, [r4, #8]
   1d242:	6062      	str	r2, [r4, #4]
   1d244:	2b17      	cmp	r3, #23
   1d246:	dd1d      	ble.n	1d284 <localtime_r+0x140>
   1d248:	69a2      	ldr	r2, [r4, #24]
   1d24a:	69e1      	ldr	r1, [r4, #28]
   1d24c:	3201      	adds	r2, #1
   1d24e:	2a06      	cmp	r2, #6
   1d250:	bfc8      	it	gt
   1d252:	2200      	movgt	r2, #0
   1d254:	61a2      	str	r2, [r4, #24]
   1d256:	68e2      	ldr	r2, [r4, #12]
   1d258:	3101      	adds	r1, #1
   1d25a:	61e1      	str	r1, [r4, #28]
   1d25c:	3b18      	subs	r3, #24
   1d25e:	3201      	adds	r2, #1
   1d260:	6921      	ldr	r1, [r4, #16]
   1d262:	60a3      	str	r3, [r4, #8]
   1d264:	60e2      	str	r2, [r4, #12]
   1d266:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1d26a:	429a      	cmp	r2, r3
   1d26c:	dd05      	ble.n	1d27a <localtime_r+0x136>
   1d26e:	3101      	adds	r1, #1
   1d270:	1ad2      	subs	r2, r2, r3
   1d272:	290c      	cmp	r1, #12
   1d274:	60e2      	str	r2, [r4, #12]
   1d276:	d045      	beq.n	1d304 <localtime_r+0x1c0>
   1d278:	6121      	str	r1, [r4, #16]
   1d27a:	f000 fad7 	bl	1d82c <__tz_unlock>
   1d27e:	4620      	mov	r0, r4
   1d280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d284:	2b00      	cmp	r3, #0
   1d286:	daf8      	bge.n	1d27a <localtime_r+0x136>
   1d288:	69a2      	ldr	r2, [r4, #24]
   1d28a:	69e1      	ldr	r1, [r4, #28]
   1d28c:	3a01      	subs	r2, #1
   1d28e:	bf48      	it	mi
   1d290:	2206      	movmi	r2, #6
   1d292:	61a2      	str	r2, [r4, #24]
   1d294:	68e2      	ldr	r2, [r4, #12]
   1d296:	3901      	subs	r1, #1
   1d298:	3318      	adds	r3, #24
   1d29a:	3a01      	subs	r2, #1
   1d29c:	61e1      	str	r1, [r4, #28]
   1d29e:	60a3      	str	r3, [r4, #8]
   1d2a0:	60e2      	str	r2, [r4, #12]
   1d2a2:	2a00      	cmp	r2, #0
   1d2a4:	d1e9      	bne.n	1d27a <localtime_r+0x136>
   1d2a6:	6923      	ldr	r3, [r4, #16]
   1d2a8:	3b01      	subs	r3, #1
   1d2aa:	d432      	bmi.n	1d312 <localtime_r+0x1ce>
   1d2ac:	6123      	str	r3, [r4, #16]
   1d2ae:	009b      	lsls	r3, r3, #2
   1d2b0:	58eb      	ldr	r3, [r5, r3]
   1d2b2:	60e3      	str	r3, [r4, #12]
   1d2b4:	f000 faba 	bl	1d82c <__tz_unlock>
   1d2b8:	4620      	mov	r0, r4
   1d2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d2be:	2a00      	cmp	r2, #0
   1d2c0:	dac0      	bge.n	1d244 <localtime_r+0x100>
   1d2c2:	3b01      	subs	r3, #1
   1d2c4:	323c      	adds	r2, #60	; 0x3c
   1d2c6:	60a3      	str	r3, [r4, #8]
   1d2c8:	6062      	str	r2, [r4, #4]
   1d2ca:	e7bb      	b.n	1d244 <localtime_r+0x100>
   1d2cc:	2800      	cmp	r0, #0
   1d2ce:	dab3      	bge.n	1d238 <localtime_r+0xf4>
   1d2d0:	3a01      	subs	r2, #1
   1d2d2:	303c      	adds	r0, #60	; 0x3c
   1d2d4:	e884 0005 	stmia.w	r4, {r0, r2}
   1d2d8:	e7ae      	b.n	1d238 <localtime_r+0xf4>
   1d2da:	4b23      	ldr	r3, [pc, #140]	; (1d368 <localtime_r+0x224>)
   1d2dc:	17f5      	asrs	r5, r6, #31
   1d2de:	fb83 2306 	smull	r2, r3, r3, r6
   1d2e2:	ebc5 1363 	rsb	r3, r5, r3, asr #5
   1d2e6:	2264      	movs	r2, #100	; 0x64
   1d2e8:	fb02 6313 	mls	r3, r2, r3, r6
   1d2ec:	2b00      	cmp	r3, #0
   1d2ee:	f43f af3c 	beq.w	1d16a <localtime_r+0x26>
   1d2f2:	2530      	movs	r5, #48	; 0x30
   1d2f4:	e746      	b.n	1d184 <localtime_r+0x40>
   1d2f6:	f04f 33ff 	mov.w	r3, #4294967295
   1d2fa:	6223      	str	r3, [r4, #32]
   1d2fc:	e775      	b.n	1d1ea <localtime_r+0xa6>
   1d2fe:	2301      	movs	r3, #1
   1d300:	6223      	str	r3, [r4, #32]
   1d302:	e763      	b.n	1d1cc <localtime_r+0x88>
   1d304:	6963      	ldr	r3, [r4, #20]
   1d306:	2200      	movs	r2, #0
   1d308:	3301      	adds	r3, #1
   1d30a:	6163      	str	r3, [r4, #20]
   1d30c:	6122      	str	r2, [r4, #16]
   1d30e:	61e2      	str	r2, [r4, #28]
   1d310:	e7b3      	b.n	1d27a <localtime_r+0x136>
   1d312:	6963      	ldr	r3, [r4, #20]
   1d314:	1e5a      	subs	r2, r3, #1
   1d316:	210b      	movs	r1, #11
   1d318:	6162      	str	r2, [r4, #20]
   1d31a:	0792      	lsls	r2, r2, #30
   1d31c:	6121      	str	r1, [r4, #16]
   1d31e:	d013      	beq.n	1d348 <localtime_r+0x204>
   1d320:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1d324:	17d3      	asrs	r3, r2, #31
   1d326:	4910      	ldr	r1, [pc, #64]	; (1d368 <localtime_r+0x224>)
   1d328:	fb81 0102 	smull	r0, r1, r1, r2
   1d32c:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
   1d330:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1d334:	fb01 2313 	mls	r3, r1, r3, r2
   1d338:	fab3 f383 	clz	r3, r3
   1d33c:	095b      	lsrs	r3, r3, #5
   1d33e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   1d342:	61e3      	str	r3, [r4, #28]
   1d344:	232c      	movs	r3, #44	; 0x2c
   1d346:	e7b3      	b.n	1d2b0 <localtime_r+0x16c>
   1d348:	4907      	ldr	r1, [pc, #28]	; (1d368 <localtime_r+0x224>)
   1d34a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1d34e:	fb81 3102 	smull	r3, r1, r1, r2
   1d352:	17d3      	asrs	r3, r2, #31
   1d354:	ebc3 1161 	rsb	r1, r3, r1, asr #5
   1d358:	2064      	movs	r0, #100	; 0x64
   1d35a:	fb00 2111 	mls	r1, r0, r1, r2
   1d35e:	2900      	cmp	r1, #0
   1d360:	d0e1      	beq.n	1d326 <localtime_r+0x1e2>
   1d362:	f240 136d 	movw	r3, #365	; 0x16d
   1d366:	e7ec      	b.n	1d342 <localtime_r+0x1fe>
   1d368:	51eb851f 	.word	0x51eb851f
   1d36c:	000234f4 	.word	0x000234f4
   1d370:	2000a524 	.word	0x2000a524
   1d374:	91a2b3c5 	.word	0x91a2b3c5
   1d378:	88888889 	.word	0x88888889

0001d37c <memcpy>:
   1d37c:	4684      	mov	ip, r0
   1d37e:	ea41 0300 	orr.w	r3, r1, r0
   1d382:	f013 0303 	ands.w	r3, r3, #3
   1d386:	d16d      	bne.n	1d464 <memcpy+0xe8>
   1d388:	3a40      	subs	r2, #64	; 0x40
   1d38a:	d341      	bcc.n	1d410 <memcpy+0x94>
   1d38c:	f851 3b04 	ldr.w	r3, [r1], #4
   1d390:	f840 3b04 	str.w	r3, [r0], #4
   1d394:	f851 3b04 	ldr.w	r3, [r1], #4
   1d398:	f840 3b04 	str.w	r3, [r0], #4
   1d39c:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3a0:	f840 3b04 	str.w	r3, [r0], #4
   1d3a4:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3a8:	f840 3b04 	str.w	r3, [r0], #4
   1d3ac:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3b0:	f840 3b04 	str.w	r3, [r0], #4
   1d3b4:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3b8:	f840 3b04 	str.w	r3, [r0], #4
   1d3bc:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3c0:	f840 3b04 	str.w	r3, [r0], #4
   1d3c4:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3c8:	f840 3b04 	str.w	r3, [r0], #4
   1d3cc:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3d0:	f840 3b04 	str.w	r3, [r0], #4
   1d3d4:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3d8:	f840 3b04 	str.w	r3, [r0], #4
   1d3dc:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3e0:	f840 3b04 	str.w	r3, [r0], #4
   1d3e4:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3e8:	f840 3b04 	str.w	r3, [r0], #4
   1d3ec:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3f0:	f840 3b04 	str.w	r3, [r0], #4
   1d3f4:	f851 3b04 	ldr.w	r3, [r1], #4
   1d3f8:	f840 3b04 	str.w	r3, [r0], #4
   1d3fc:	f851 3b04 	ldr.w	r3, [r1], #4
   1d400:	f840 3b04 	str.w	r3, [r0], #4
   1d404:	f851 3b04 	ldr.w	r3, [r1], #4
   1d408:	f840 3b04 	str.w	r3, [r0], #4
   1d40c:	3a40      	subs	r2, #64	; 0x40
   1d40e:	d2bd      	bcs.n	1d38c <memcpy+0x10>
   1d410:	3230      	adds	r2, #48	; 0x30
   1d412:	d311      	bcc.n	1d438 <memcpy+0xbc>
   1d414:	f851 3b04 	ldr.w	r3, [r1], #4
   1d418:	f840 3b04 	str.w	r3, [r0], #4
   1d41c:	f851 3b04 	ldr.w	r3, [r1], #4
   1d420:	f840 3b04 	str.w	r3, [r0], #4
   1d424:	f851 3b04 	ldr.w	r3, [r1], #4
   1d428:	f840 3b04 	str.w	r3, [r0], #4
   1d42c:	f851 3b04 	ldr.w	r3, [r1], #4
   1d430:	f840 3b04 	str.w	r3, [r0], #4
   1d434:	3a10      	subs	r2, #16
   1d436:	d2ed      	bcs.n	1d414 <memcpy+0x98>
   1d438:	320c      	adds	r2, #12
   1d43a:	d305      	bcc.n	1d448 <memcpy+0xcc>
   1d43c:	f851 3b04 	ldr.w	r3, [r1], #4
   1d440:	f840 3b04 	str.w	r3, [r0], #4
   1d444:	3a04      	subs	r2, #4
   1d446:	d2f9      	bcs.n	1d43c <memcpy+0xc0>
   1d448:	3204      	adds	r2, #4
   1d44a:	d008      	beq.n	1d45e <memcpy+0xe2>
   1d44c:	07d2      	lsls	r2, r2, #31
   1d44e:	bf1c      	itt	ne
   1d450:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1d454:	f800 3b01 	strbne.w	r3, [r0], #1
   1d458:	d301      	bcc.n	1d45e <memcpy+0xe2>
   1d45a:	880b      	ldrh	r3, [r1, #0]
   1d45c:	8003      	strh	r3, [r0, #0]
   1d45e:	4660      	mov	r0, ip
   1d460:	4770      	bx	lr
   1d462:	bf00      	nop
   1d464:	2a08      	cmp	r2, #8
   1d466:	d313      	bcc.n	1d490 <memcpy+0x114>
   1d468:	078b      	lsls	r3, r1, #30
   1d46a:	d08d      	beq.n	1d388 <memcpy+0xc>
   1d46c:	f010 0303 	ands.w	r3, r0, #3
   1d470:	d08a      	beq.n	1d388 <memcpy+0xc>
   1d472:	f1c3 0304 	rsb	r3, r3, #4
   1d476:	1ad2      	subs	r2, r2, r3
   1d478:	07db      	lsls	r3, r3, #31
   1d47a:	bf1c      	itt	ne
   1d47c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1d480:	f800 3b01 	strbne.w	r3, [r0], #1
   1d484:	d380      	bcc.n	1d388 <memcpy+0xc>
   1d486:	f831 3b02 	ldrh.w	r3, [r1], #2
   1d48a:	f820 3b02 	strh.w	r3, [r0], #2
   1d48e:	e77b      	b.n	1d388 <memcpy+0xc>
   1d490:	3a04      	subs	r2, #4
   1d492:	d3d9      	bcc.n	1d448 <memcpy+0xcc>
   1d494:	3a01      	subs	r2, #1
   1d496:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d49a:	f800 3b01 	strb.w	r3, [r0], #1
   1d49e:	d2f9      	bcs.n	1d494 <memcpy+0x118>
   1d4a0:	780b      	ldrb	r3, [r1, #0]
   1d4a2:	7003      	strb	r3, [r0, #0]
   1d4a4:	784b      	ldrb	r3, [r1, #1]
   1d4a6:	7043      	strb	r3, [r0, #1]
   1d4a8:	788b      	ldrb	r3, [r1, #2]
   1d4aa:	7083      	strb	r3, [r0, #2]
   1d4ac:	4660      	mov	r0, ip
   1d4ae:	4770      	bx	lr

0001d4b0 <memset>:
   1d4b0:	b470      	push	{r4, r5, r6}
   1d4b2:	0786      	lsls	r6, r0, #30
   1d4b4:	d046      	beq.n	1d544 <memset+0x94>
   1d4b6:	1e54      	subs	r4, r2, #1
   1d4b8:	2a00      	cmp	r2, #0
   1d4ba:	d041      	beq.n	1d540 <memset+0x90>
   1d4bc:	b2ca      	uxtb	r2, r1
   1d4be:	4603      	mov	r3, r0
   1d4c0:	e002      	b.n	1d4c8 <memset+0x18>
   1d4c2:	f114 34ff 	adds.w	r4, r4, #4294967295
   1d4c6:	d33b      	bcc.n	1d540 <memset+0x90>
   1d4c8:	f803 2b01 	strb.w	r2, [r3], #1
   1d4cc:	079d      	lsls	r5, r3, #30
   1d4ce:	d1f8      	bne.n	1d4c2 <memset+0x12>
   1d4d0:	2c03      	cmp	r4, #3
   1d4d2:	d92e      	bls.n	1d532 <memset+0x82>
   1d4d4:	b2cd      	uxtb	r5, r1
   1d4d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1d4da:	2c0f      	cmp	r4, #15
   1d4dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1d4e0:	d919      	bls.n	1d516 <memset+0x66>
   1d4e2:	f103 0210 	add.w	r2, r3, #16
   1d4e6:	4626      	mov	r6, r4
   1d4e8:	3e10      	subs	r6, #16
   1d4ea:	2e0f      	cmp	r6, #15
   1d4ec:	f842 5c10 	str.w	r5, [r2, #-16]
   1d4f0:	f842 5c0c 	str.w	r5, [r2, #-12]
   1d4f4:	f842 5c08 	str.w	r5, [r2, #-8]
   1d4f8:	f842 5c04 	str.w	r5, [r2, #-4]
   1d4fc:	f102 0210 	add.w	r2, r2, #16
   1d500:	d8f2      	bhi.n	1d4e8 <memset+0x38>
   1d502:	f1a4 0210 	sub.w	r2, r4, #16
   1d506:	f022 020f 	bic.w	r2, r2, #15
   1d50a:	f004 040f 	and.w	r4, r4, #15
   1d50e:	3210      	adds	r2, #16
   1d510:	2c03      	cmp	r4, #3
   1d512:	4413      	add	r3, r2
   1d514:	d90d      	bls.n	1d532 <memset+0x82>
   1d516:	461e      	mov	r6, r3
   1d518:	4622      	mov	r2, r4
   1d51a:	3a04      	subs	r2, #4
   1d51c:	2a03      	cmp	r2, #3
   1d51e:	f846 5b04 	str.w	r5, [r6], #4
   1d522:	d8fa      	bhi.n	1d51a <memset+0x6a>
   1d524:	1f22      	subs	r2, r4, #4
   1d526:	f022 0203 	bic.w	r2, r2, #3
   1d52a:	3204      	adds	r2, #4
   1d52c:	4413      	add	r3, r2
   1d52e:	f004 0403 	and.w	r4, r4, #3
   1d532:	b12c      	cbz	r4, 1d540 <memset+0x90>
   1d534:	b2c9      	uxtb	r1, r1
   1d536:	441c      	add	r4, r3
   1d538:	f803 1b01 	strb.w	r1, [r3], #1
   1d53c:	429c      	cmp	r4, r3
   1d53e:	d1fb      	bne.n	1d538 <memset+0x88>
   1d540:	bc70      	pop	{r4, r5, r6}
   1d542:	4770      	bx	lr
   1d544:	4614      	mov	r4, r2
   1d546:	4603      	mov	r3, r0
   1d548:	e7c2      	b.n	1d4d0 <memset+0x20>
   1d54a:	bf00      	nop

0001d54c <rand>:
   1d54c:	b410      	push	{r4}
   1d54e:	4b0c      	ldr	r3, [pc, #48]	; (1d580 <rand+0x34>)
   1d550:	480c      	ldr	r0, [pc, #48]	; (1d584 <rand+0x38>)
   1d552:	6819      	ldr	r1, [r3, #0]
   1d554:	4c0c      	ldr	r4, [pc, #48]	; (1d588 <rand+0x3c>)
   1d556:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   1d55a:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   1d55e:	fb00 f002 	mul.w	r0, r0, r2
   1d562:	fb04 0003 	mla	r0, r4, r3, r0
   1d566:	fba2 2304 	umull	r2, r3, r2, r4
   1d56a:	4403      	add	r3, r0
   1d56c:	3201      	adds	r2, #1
   1d56e:	f143 0300 	adc.w	r3, r3, #0
   1d572:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   1d576:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1d57a:	bc10      	pop	{r4}
   1d57c:	4770      	bx	lr
   1d57e:	bf00      	nop
   1d580:	20000248 	.word	0x20000248
   1d584:	5851f42d 	.word	0x5851f42d
   1d588:	4c957f2d 	.word	0x4c957f2d
	...

0001d5c0 <strlen>:
   1d5c0:	f890 f000 	pld	[r0]
   1d5c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1d5c8:	f020 0107 	bic.w	r1, r0, #7
   1d5cc:	f06f 0c00 	mvn.w	ip, #0
   1d5d0:	f010 0407 	ands.w	r4, r0, #7
   1d5d4:	f891 f020 	pld	[r1, #32]
   1d5d8:	f040 8049 	bne.w	1d66e <strlen+0xae>
   1d5dc:	f04f 0400 	mov.w	r4, #0
   1d5e0:	f06f 0007 	mvn.w	r0, #7
   1d5e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1d5e8:	f891 f040 	pld	[r1, #64]	; 0x40
   1d5ec:	f100 0008 	add.w	r0, r0, #8
   1d5f0:	fa82 f24c 	uadd8	r2, r2, ip
   1d5f4:	faa4 f28c 	sel	r2, r4, ip
   1d5f8:	fa83 f34c 	uadd8	r3, r3, ip
   1d5fc:	faa2 f38c 	sel	r3, r2, ip
   1d600:	bb4b      	cbnz	r3, 1d656 <strlen+0x96>
   1d602:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1d606:	fa82 f24c 	uadd8	r2, r2, ip
   1d60a:	f100 0008 	add.w	r0, r0, #8
   1d60e:	faa4 f28c 	sel	r2, r4, ip
   1d612:	fa83 f34c 	uadd8	r3, r3, ip
   1d616:	faa2 f38c 	sel	r3, r2, ip
   1d61a:	b9e3      	cbnz	r3, 1d656 <strlen+0x96>
   1d61c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1d620:	fa82 f24c 	uadd8	r2, r2, ip
   1d624:	f100 0008 	add.w	r0, r0, #8
   1d628:	faa4 f28c 	sel	r2, r4, ip
   1d62c:	fa83 f34c 	uadd8	r3, r3, ip
   1d630:	faa2 f38c 	sel	r3, r2, ip
   1d634:	b97b      	cbnz	r3, 1d656 <strlen+0x96>
   1d636:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1d63a:	f101 0120 	add.w	r1, r1, #32
   1d63e:	fa82 f24c 	uadd8	r2, r2, ip
   1d642:	f100 0008 	add.w	r0, r0, #8
   1d646:	faa4 f28c 	sel	r2, r4, ip
   1d64a:	fa83 f34c 	uadd8	r3, r3, ip
   1d64e:	faa2 f38c 	sel	r3, r2, ip
   1d652:	2b00      	cmp	r3, #0
   1d654:	d0c6      	beq.n	1d5e4 <strlen+0x24>
   1d656:	2a00      	cmp	r2, #0
   1d658:	bf04      	itt	eq
   1d65a:	3004      	addeq	r0, #4
   1d65c:	461a      	moveq	r2, r3
   1d65e:	ba12      	rev	r2, r2
   1d660:	fab2 f282 	clz	r2, r2
   1d664:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1d668:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1d66c:	4770      	bx	lr
   1d66e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1d672:	f004 0503 	and.w	r5, r4, #3
   1d676:	f1c4 0000 	rsb	r0, r4, #0
   1d67a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1d67e:	f014 0f04 	tst.w	r4, #4
   1d682:	f891 f040 	pld	[r1, #64]	; 0x40
   1d686:	fa0c f505 	lsl.w	r5, ip, r5
   1d68a:	ea62 0205 	orn	r2, r2, r5
   1d68e:	bf1c      	itt	ne
   1d690:	ea63 0305 	ornne	r3, r3, r5
   1d694:	4662      	movne	r2, ip
   1d696:	f04f 0400 	mov.w	r4, #0
   1d69a:	e7a9      	b.n	1d5f0 <strlen+0x30>

0001d69c <__tzcalc_limits>:
   1d69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6a0:	b083      	sub	sp, #12
   1d6a2:	4605      	mov	r5, r0
   1d6a4:	f000 fb64 	bl	1dd70 <__gettzinfo>
   1d6a8:	f240 73b1 	movw	r3, #1969	; 0x7b1
   1d6ac:	429d      	cmp	r5, r3
   1d6ae:	f340 8093 	ble.w	1d7d8 <__tzcalc_limits+0x13c>
   1d6b2:	4c57      	ldr	r4, [pc, #348]	; (1d810 <__tzcalc_limits+0x174>)
   1d6b4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1d81c <__tzcalc_limits+0x180>
   1d6b8:	6045      	str	r5, [r0, #4]
   1d6ba:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   1d6be:	18ee      	adds	r6, r5, r3
   1d6c0:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
   1d6c4:	fb84 3102 	smull	r3, r1, r4, r2
   1d6c8:	10b7      	asrs	r7, r6, #2
   1d6ca:	f240 1e6d 	movw	lr, #365	; 0x16d
   1d6ce:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   1d6d2:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
   1d6d6:	17d2      	asrs	r2, r2, #31
   1d6d8:	eb05 030c 	add.w	r3, r5, ip
   1d6dc:	fb0e 7606 	mla	r6, lr, r6, r7
   1d6e0:	eba2 1261 	sub.w	r2, r2, r1, asr #5
   1d6e4:	17ef      	asrs	r7, r5, #31
   1d6e6:	fb84 c105 	smull	ip, r1, r4, r5
   1d6ea:	4416      	add	r6, r2
   1d6ec:	fb84 e403 	smull	lr, r4, r4, r3
   1d6f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1d6f4:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
   1d6f8:	17db      	asrs	r3, r3, #31
   1d6fa:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
   1d6fe:	fb02 5e1e 	mls	lr, r2, lr, r5
   1d702:	ebc7 1761 	rsb	r7, r7, r1, asr #5
   1d706:	2264      	movs	r2, #100	; 0x64
   1d708:	441e      	add	r6, r3
   1d70a:	f1be 0f00 	cmp.w	lr, #0
   1d70e:	bf0c      	ite	eq
   1d710:	2330      	moveq	r3, #48	; 0x30
   1d712:	2300      	movne	r3, #0
   1d714:	fb02 5717 	mls	r7, r2, r7, r5
   1d718:	9301      	str	r3, [sp, #4]
   1d71a:	f005 0503 	and.w	r5, r5, #3
   1d71e:	4604      	mov	r4, r0
   1d720:	f100 0c38 	add.w	ip, r0, #56	; 0x38
   1d724:	7a23      	ldrb	r3, [r4, #8]
   1d726:	2b4a      	cmp	r3, #74	; 0x4a
   1d728:	d05a      	beq.n	1d7e0 <__tzcalc_limits+0x144>
   1d72a:	2b44      	cmp	r3, #68	; 0x44
   1d72c:	d068      	beq.n	1d800 <__tzcalc_limits+0x164>
   1d72e:	2d00      	cmp	r5, #0
   1d730:	d04b      	beq.n	1d7ca <__tzcalc_limits+0x12e>
   1d732:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1d736:	68e3      	ldr	r3, [r4, #12]
   1d738:	4a36      	ldr	r2, [pc, #216]	; (1d814 <__tzcalc_limits+0x178>)
   1d73a:	2b01      	cmp	r3, #1
   1d73c:	4491      	add	r9, r2
   1d73e:	dd62      	ble.n	1d806 <__tzcalc_limits+0x16a>
   1d740:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
   1d744:	f1ab 0b02 	sub.w	fp, fp, #2
   1d748:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   1d74c:	eb09 0a0b 	add.w	sl, r9, fp
   1d750:	f1a9 0304 	sub.w	r3, r9, #4
   1d754:	4632      	mov	r2, r6
   1d756:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1d75a:	459a      	cmp	sl, r3
   1d75c:	440a      	add	r2, r1
   1d75e:	d1fa      	bne.n	1d756 <__tzcalc_limits+0xba>
   1d760:	f10b 0b04 	add.w	fp, fp, #4
   1d764:	4b2c      	ldr	r3, [pc, #176]	; (1d818 <__tzcalc_limits+0x17c>)
   1d766:	f859 900b 	ldr.w	r9, [r9, fp]
   1d76a:	1d11      	adds	r1, r2, #4
   1d76c:	fb83 a301 	smull	sl, r3, r3, r1
   1d770:	440b      	add	r3, r1
   1d772:	ea4f 7ae1 	mov.w	sl, r1, asr #31
   1d776:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
   1d77a:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
   1d77e:	6963      	ldr	r3, [r4, #20]
   1d780:	eba1 010a 	sub.w	r1, r1, sl
   1d784:	1a59      	subs	r1, r3, r1
   1d786:	6923      	ldr	r3, [r4, #16]
   1d788:	f103 33ff 	add.w	r3, r3, #4294967295
   1d78c:	bf48      	it	mi
   1d78e:	3107      	addmi	r1, #7
   1d790:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1d794:	440b      	add	r3, r1
   1d796:	454b      	cmp	r3, r9
   1d798:	db02      	blt.n	1d7a0 <__tzcalc_limits+0x104>
   1d79a:	3b07      	subs	r3, #7
   1d79c:	454b      	cmp	r3, r9
   1d79e:	dafc      	bge.n	1d79a <__tzcalc_limits+0xfe>
   1d7a0:	441a      	add	r2, r3
   1d7a2:	69a1      	ldr	r1, [r4, #24]
   1d7a4:	6a23      	ldr	r3, [r4, #32]
   1d7a6:	fb08 1102 	mla	r1, r8, r2, r1
   1d7aa:	440b      	add	r3, r1
   1d7ac:	f844 3f1c 	str.w	r3, [r4, #28]!
   1d7b0:	45a4      	cmp	ip, r4
   1d7b2:	d1b7      	bne.n	1d724 <__tzcalc_limits+0x88>
   1d7b4:	69c3      	ldr	r3, [r0, #28]
   1d7b6:	6b82      	ldr	r2, [r0, #56]	; 0x38
   1d7b8:	4293      	cmp	r3, r2
   1d7ba:	bfac      	ite	ge
   1d7bc:	2300      	movge	r3, #0
   1d7be:	2301      	movlt	r3, #1
   1d7c0:	6003      	str	r3, [r0, #0]
   1d7c2:	2001      	movs	r0, #1
   1d7c4:	b003      	add	sp, #12
   1d7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7ca:	9b01      	ldr	r3, [sp, #4]
   1d7cc:	2f00      	cmp	r7, #0
   1d7ce:	bf0c      	ite	eq
   1d7d0:	4699      	moveq	r9, r3
   1d7d2:	f04f 0930 	movne.w	r9, #48	; 0x30
   1d7d6:	e7ae      	b.n	1d736 <__tzcalc_limits+0x9a>
   1d7d8:	2000      	movs	r0, #0
   1d7da:	b003      	add	sp, #12
   1d7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7e0:	6962      	ldr	r2, [r4, #20]
   1d7e2:	18b1      	adds	r1, r6, r2
   1d7e4:	b93d      	cbnz	r5, 1d7f6 <__tzcalc_limits+0x15a>
   1d7e6:	b137      	cbz	r7, 1d7f6 <__tzcalc_limits+0x15a>
   1d7e8:	2a3b      	cmp	r2, #59	; 0x3b
   1d7ea:	bfd4      	ite	le
   1d7ec:	2200      	movle	r2, #0
   1d7ee:	2201      	movgt	r2, #1
   1d7f0:	440a      	add	r2, r1
   1d7f2:	3a01      	subs	r2, #1
   1d7f4:	e7d5      	b.n	1d7a2 <__tzcalc_limits+0x106>
   1d7f6:	f1be 0f00 	cmp.w	lr, #0
   1d7fa:	d0f5      	beq.n	1d7e8 <__tzcalc_limits+0x14c>
   1d7fc:	2200      	movs	r2, #0
   1d7fe:	e7f7      	b.n	1d7f0 <__tzcalc_limits+0x154>
   1d800:	6962      	ldr	r2, [r4, #20]
   1d802:	4432      	add	r2, r6
   1d804:	e7cd      	b.n	1d7a2 <__tzcalc_limits+0x106>
   1d806:	4632      	mov	r2, r6
   1d808:	f04f 0b00 	mov.w	fp, #0
   1d80c:	e7aa      	b.n	1d764 <__tzcalc_limits+0xc8>
   1d80e:	bf00      	nop
   1d810:	51eb851f 	.word	0x51eb851f
   1d814:	000234f4 	.word	0x000234f4
   1d818:	92492493 	.word	0x92492493
   1d81c:	00015180 	.word	0x00015180

0001d820 <__tz_lock>:
   1d820:	4801      	ldr	r0, [pc, #4]	; (1d828 <__tz_lock+0x8>)
   1d822:	f000 bb93 	b.w	1df4c <__retarget_lock_acquire>
   1d826:	bf00      	nop
   1d828:	2000a82c 	.word	0x2000a82c

0001d82c <__tz_unlock>:
   1d82c:	4801      	ldr	r0, [pc, #4]	; (1d834 <__tz_unlock+0x8>)
   1d82e:	f000 bb91 	b.w	1df54 <__retarget_lock_release>
   1d832:	bf00      	nop
   1d834:	2000a82c 	.word	0x2000a82c

0001d838 <_tzset_unlocked>:
   1d838:	4b01      	ldr	r3, [pc, #4]	; (1d840 <_tzset_unlocked+0x8>)
   1d83a:	6818      	ldr	r0, [r3, #0]
   1d83c:	f000 b802 	b.w	1d844 <_tzset_unlocked_r>
   1d840:	20000248 	.word	0x20000248

0001d844 <_tzset_unlocked_r>:
   1d844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d848:	b08b      	sub	sp, #44	; 0x2c
   1d84a:	4607      	mov	r7, r0
   1d84c:	f000 fa90 	bl	1dd70 <__gettzinfo>
   1d850:	49bb      	ldr	r1, [pc, #748]	; (1db40 <_tzset_unlocked_r+0x2fc>)
   1d852:	4dbc      	ldr	r5, [pc, #752]	; (1db44 <_tzset_unlocked_r+0x300>)
   1d854:	4606      	mov	r6, r0
   1d856:	4638      	mov	r0, r7
   1d858:	f000 fa82 	bl	1dd60 <_getenv_r>
   1d85c:	4604      	mov	r4, r0
   1d85e:	2800      	cmp	r0, #0
   1d860:	f000 80f7 	beq.w	1da52 <_tzset_unlocked_r+0x20e>
   1d864:	6829      	ldr	r1, [r5, #0]
   1d866:	b131      	cbz	r1, 1d876 <_tzset_unlocked_r+0x32>
   1d868:	f000 fefe 	bl	1e668 <strcmp>
   1d86c:	b910      	cbnz	r0, 1d874 <_tzset_unlocked_r+0x30>
   1d86e:	b00b      	add	sp, #44	; 0x2c
   1d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d874:	6829      	ldr	r1, [r5, #0]
   1d876:	4608      	mov	r0, r1
   1d878:	f7f6 fec4 	bl	14604 <free>
   1d87c:	4620      	mov	r0, r4
   1d87e:	f7ff fe9f 	bl	1d5c0 <strlen>
   1d882:	1c41      	adds	r1, r0, #1
   1d884:	4638      	mov	r0, r7
   1d886:	f000 fb69 	bl	1df5c <_malloc_r>
   1d88a:	6028      	str	r0, [r5, #0]
   1d88c:	b110      	cbz	r0, 1d894 <_tzset_unlocked_r+0x50>
   1d88e:	4621      	mov	r1, r4
   1d890:	f001 f854 	bl	1e93c <strcpy>
   1d894:	7823      	ldrb	r3, [r4, #0]
   1d896:	4aac      	ldr	r2, [pc, #688]	; (1db48 <_tzset_unlocked_r+0x304>)
   1d898:	49ac      	ldr	r1, [pc, #688]	; (1db4c <_tzset_unlocked_r+0x308>)
   1d89a:	2b3a      	cmp	r3, #58	; 0x3a
   1d89c:	bf08      	it	eq
   1d89e:	3401      	addeq	r4, #1
   1d8a0:	ad08      	add	r5, sp, #32
   1d8a2:	462b      	mov	r3, r5
   1d8a4:	4620      	mov	r0, r4
   1d8a6:	f000 fe9f 	bl	1e5e8 <siscanf>
   1d8aa:	2800      	cmp	r0, #0
   1d8ac:	dddf      	ble.n	1d86e <_tzset_unlocked_r+0x2a>
   1d8ae:	9b08      	ldr	r3, [sp, #32]
   1d8b0:	5ce2      	ldrb	r2, [r4, r3]
   1d8b2:	2a2d      	cmp	r2, #45	; 0x2d
   1d8b4:	441c      	add	r4, r3
   1d8b6:	f000 80c8 	beq.w	1da4a <_tzset_unlocked_r+0x206>
   1d8ba:	2a2b      	cmp	r2, #43	; 0x2b
   1d8bc:	bf08      	it	eq
   1d8be:	3401      	addeq	r4, #1
   1d8c0:	f04f 0801 	mov.w	r8, #1
   1d8c4:	ab06      	add	r3, sp, #24
   1d8c6:	9302      	str	r3, [sp, #8]
   1d8c8:	f10d 0316 	add.w	r3, sp, #22
   1d8cc:	2700      	movs	r7, #0
   1d8ce:	9300      	str	r3, [sp, #0]
   1d8d0:	9503      	str	r5, [sp, #12]
   1d8d2:	9501      	str	r5, [sp, #4]
   1d8d4:	aa05      	add	r2, sp, #20
   1d8d6:	462b      	mov	r3, r5
   1d8d8:	499d      	ldr	r1, [pc, #628]	; (1db50 <_tzset_unlocked_r+0x30c>)
   1d8da:	f8ad 7016 	strh.w	r7, [sp, #22]
   1d8de:	4620      	mov	r0, r4
   1d8e0:	f8ad 7018 	strh.w	r7, [sp, #24]
   1d8e4:	f000 fe80 	bl	1e5e8 <siscanf>
   1d8e8:	42b8      	cmp	r0, r7
   1d8ea:	ddc0      	ble.n	1d86e <_tzset_unlocked_r+0x2a>
   1d8ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1d8f0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1d8f4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1d8f8:	9808      	ldr	r0, [sp, #32]
   1d8fa:	f8df a26c 	ldr.w	sl, [pc, #620]	; 1db68 <_tzset_unlocked_r+0x324>
   1d8fe:	f8df 925c 	ldr.w	r9, [pc, #604]	; 1db5c <_tzset_unlocked_r+0x318>
   1d902:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1d906:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1d90a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1d90e:	fb01 3302 	mla	r3, r1, r2, r3
   1d912:	fb08 f303 	mul.w	r3, r8, r3
   1d916:	6233      	str	r3, [r6, #32]
   1d918:	4404      	add	r4, r0
   1d91a:	4b8b      	ldr	r3, [pc, #556]	; (1db48 <_tzset_unlocked_r+0x304>)
   1d91c:	f8c9 3000 	str.w	r3, [r9]
   1d920:	4620      	mov	r0, r4
   1d922:	4652      	mov	r2, sl
   1d924:	4989      	ldr	r1, [pc, #548]	; (1db4c <_tzset_unlocked_r+0x308>)
   1d926:	462b      	mov	r3, r5
   1d928:	f000 fe5e 	bl	1e5e8 <siscanf>
   1d92c:	42b8      	cmp	r0, r7
   1d92e:	f340 8082 	ble.w	1da36 <_tzset_unlocked_r+0x1f2>
   1d932:	9808      	ldr	r0, [sp, #32]
   1d934:	f8c9 a004 	str.w	sl, [r9, #4]
   1d938:	5c23      	ldrb	r3, [r4, r0]
   1d93a:	2b2d      	cmp	r3, #45	; 0x2d
   1d93c:	4404      	add	r4, r0
   1d93e:	f000 8095 	beq.w	1da6c <_tzset_unlocked_r+0x228>
   1d942:	2b2b      	cmp	r3, #43	; 0x2b
   1d944:	bf08      	it	eq
   1d946:	3401      	addeq	r4, #1
   1d948:	f04f 0801 	mov.w	r8, #1
   1d94c:	ab06      	add	r3, sp, #24
   1d94e:	9302      	str	r3, [sp, #8]
   1d950:	f10d 0316 	add.w	r3, sp, #22
   1d954:	2700      	movs	r7, #0
   1d956:	9300      	str	r3, [sp, #0]
   1d958:	9503      	str	r5, [sp, #12]
   1d95a:	9501      	str	r5, [sp, #4]
   1d95c:	462b      	mov	r3, r5
   1d95e:	aa05      	add	r2, sp, #20
   1d960:	497b      	ldr	r1, [pc, #492]	; (1db50 <_tzset_unlocked_r+0x30c>)
   1d962:	f8ad 7014 	strh.w	r7, [sp, #20]
   1d966:	4620      	mov	r0, r4
   1d968:	f8ad 7016 	strh.w	r7, [sp, #22]
   1d96c:	f8ad 7018 	strh.w	r7, [sp, #24]
   1d970:	9708      	str	r7, [sp, #32]
   1d972:	f000 fe39 	bl	1e5e8 <siscanf>
   1d976:	42b8      	cmp	r0, r7
   1d978:	dd7c      	ble.n	1da74 <_tzset_unlocked_r+0x230>
   1d97a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1d97e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1d982:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1d986:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1d98a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1d98e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1d992:	fb01 3302 	mla	r3, r1, r2, r3
   1d996:	fb08 f303 	mul.w	r3, r8, r3
   1d99a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1d99c:	9b08      	ldr	r3, [sp, #32]
   1d99e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 1db6c <_tzset_unlocked_r+0x328>
   1d9a2:	441c      	add	r4, r3
   1d9a4:	46b0      	mov	r8, r6
   1d9a6:	f04f 0a00 	mov.w	sl, #0
   1d9aa:	7827      	ldrb	r7, [r4, #0]
   1d9ac:	2f2c      	cmp	r7, #44	; 0x2c
   1d9ae:	bf04      	itt	eq
   1d9b0:	7867      	ldrbeq	r7, [r4, #1]
   1d9b2:	3401      	addeq	r4, #1
   1d9b4:	2f4d      	cmp	r7, #77	; 0x4d
   1d9b6:	d062      	beq.n	1da7e <_tzset_unlocked_r+0x23a>
   1d9b8:	2f4a      	cmp	r7, #74	; 0x4a
   1d9ba:	bf08      	it	eq
   1d9bc:	3401      	addeq	r4, #1
   1d9be:	f04f 020a 	mov.w	r2, #10
   1d9c2:	a909      	add	r1, sp, #36	; 0x24
   1d9c4:	4620      	mov	r0, r4
   1d9c6:	bf18      	it	ne
   1d9c8:	2744      	movne	r7, #68	; 0x44
   1d9ca:	f001 f91d 	bl	1ec08 <strtoul>
   1d9ce:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1d9d2:	f8ad 001e 	strh.w	r0, [sp, #30]
   1d9d6:	454c      	cmp	r4, r9
   1d9d8:	f000 809c 	beq.w	1db14 <_tzset_unlocked_r+0x2d0>
   1d9dc:	b280      	uxth	r0, r0
   1d9de:	f8c8 0014 	str.w	r0, [r8, #20]
   1d9e2:	f888 7008 	strb.w	r7, [r8, #8]
   1d9e6:	2400      	movs	r4, #0
   1d9e8:	2302      	movs	r3, #2
   1d9ea:	f8ad 3014 	strh.w	r3, [sp, #20]
   1d9ee:	f8ad 4016 	strh.w	r4, [sp, #22]
   1d9f2:	f8ad 4018 	strh.w	r4, [sp, #24]
   1d9f6:	9408      	str	r4, [sp, #32]
   1d9f8:	f899 3000 	ldrb.w	r3, [r9]
   1d9fc:	2b2f      	cmp	r3, #47	; 0x2f
   1d9fe:	d06c      	beq.n	1dada <_tzset_unlocked_r+0x296>
   1da00:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   1da04:	f10a 0a01 	add.w	sl, sl, #1
   1da08:	f1ba 0f02 	cmp.w	sl, #2
   1da0c:	f8c8 3018 	str.w	r3, [r8, #24]
   1da10:	444c      	add	r4, r9
   1da12:	f108 081c 	add.w	r8, r8, #28
   1da16:	d1c8      	bne.n	1d9aa <_tzset_unlocked_r+0x166>
   1da18:	6870      	ldr	r0, [r6, #4]
   1da1a:	f7ff fe3f 	bl	1d69c <__tzcalc_limits>
   1da1e:	6a32      	ldr	r2, [r6, #32]
   1da20:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1da22:	484c      	ldr	r0, [pc, #304]	; (1db54 <_tzset_unlocked_r+0x310>)
   1da24:	494c      	ldr	r1, [pc, #304]	; (1db58 <_tzset_unlocked_r+0x314>)
   1da26:	1a9b      	subs	r3, r3, r2
   1da28:	bf18      	it	ne
   1da2a:	2301      	movne	r3, #1
   1da2c:	6003      	str	r3, [r0, #0]
   1da2e:	600a      	str	r2, [r1, #0]
   1da30:	b00b      	add	sp, #44	; 0x2c
   1da32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da36:	4948      	ldr	r1, [pc, #288]	; (1db58 <_tzset_unlocked_r+0x314>)
   1da38:	4a46      	ldr	r2, [pc, #280]	; (1db54 <_tzset_unlocked_r+0x310>)
   1da3a:	6a30      	ldr	r0, [r6, #32]
   1da3c:	f8d9 3000 	ldr.w	r3, [r9]
   1da40:	6008      	str	r0, [r1, #0]
   1da42:	6017      	str	r7, [r2, #0]
   1da44:	f8c9 3004 	str.w	r3, [r9, #4]
   1da48:	e711      	b.n	1d86e <_tzset_unlocked_r+0x2a>
   1da4a:	3401      	adds	r4, #1
   1da4c:	f04f 38ff 	mov.w	r8, #4294967295
   1da50:	e738      	b.n	1d8c4 <_tzset_unlocked_r+0x80>
   1da52:	4b42      	ldr	r3, [pc, #264]	; (1db5c <_tzset_unlocked_r+0x318>)
   1da54:	493f      	ldr	r1, [pc, #252]	; (1db54 <_tzset_unlocked_r+0x310>)
   1da56:	4e40      	ldr	r6, [pc, #256]	; (1db58 <_tzset_unlocked_r+0x314>)
   1da58:	4a41      	ldr	r2, [pc, #260]	; (1db60 <_tzset_unlocked_r+0x31c>)
   1da5a:	6828      	ldr	r0, [r5, #0]
   1da5c:	6034      	str	r4, [r6, #0]
   1da5e:	600c      	str	r4, [r1, #0]
   1da60:	601a      	str	r2, [r3, #0]
   1da62:	605a      	str	r2, [r3, #4]
   1da64:	f7f6 fdce 	bl	14604 <free>
   1da68:	602c      	str	r4, [r5, #0]
   1da6a:	e700      	b.n	1d86e <_tzset_unlocked_r+0x2a>
   1da6c:	3401      	adds	r4, #1
   1da6e:	f04f 38ff 	mov.w	r8, #4294967295
   1da72:	e76b      	b.n	1d94c <_tzset_unlocked_r+0x108>
   1da74:	6a33      	ldr	r3, [r6, #32]
   1da76:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   1da7a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1da7c:	e78e      	b.n	1d99c <_tzset_unlocked_r+0x158>
   1da7e:	f10d 021e 	add.w	r2, sp, #30
   1da82:	ab07      	add	r3, sp, #28
   1da84:	9202      	str	r2, [sp, #8]
   1da86:	9300      	str	r3, [sp, #0]
   1da88:	9503      	str	r5, [sp, #12]
   1da8a:	9501      	str	r5, [sp, #4]
   1da8c:	462b      	mov	r3, r5
   1da8e:	f10d 021a 	add.w	r2, sp, #26
   1da92:	4659      	mov	r1, fp
   1da94:	4620      	mov	r0, r4
   1da96:	f000 fda7 	bl	1e5e8 <siscanf>
   1da9a:	2803      	cmp	r0, #3
   1da9c:	f47f aee7 	bne.w	1d86e <_tzset_unlocked_r+0x2a>
   1daa0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1daa4:	1e5a      	subs	r2, r3, #1
   1daa6:	2a0b      	cmp	r2, #11
   1daa8:	f63f aee1 	bhi.w	1d86e <_tzset_unlocked_r+0x2a>
   1daac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1dab0:	1e51      	subs	r1, r2, #1
   1dab2:	2904      	cmp	r1, #4
   1dab4:	f63f aedb 	bhi.w	1d86e <_tzset_unlocked_r+0x2a>
   1dab8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   1dabc:	2906      	cmp	r1, #6
   1dabe:	f63f aed6 	bhi.w	1d86e <_tzset_unlocked_r+0x2a>
   1dac2:	f888 7008 	strb.w	r7, [r8, #8]
   1dac6:	f8c8 300c 	str.w	r3, [r8, #12]
   1daca:	f8c8 2010 	str.w	r2, [r8, #16]
   1dace:	f8c8 1014 	str.w	r1, [r8, #20]
   1dad2:	9b08      	ldr	r3, [sp, #32]
   1dad4:	eb04 0903 	add.w	r9, r4, r3
   1dad8:	e785      	b.n	1d9e6 <_tzset_unlocked_r+0x1a2>
   1dada:	ab06      	add	r3, sp, #24
   1dadc:	9302      	str	r3, [sp, #8]
   1dade:	f10d 0316 	add.w	r3, sp, #22
   1dae2:	9300      	str	r3, [sp, #0]
   1dae4:	aa05      	add	r2, sp, #20
   1dae6:	462b      	mov	r3, r5
   1dae8:	491e      	ldr	r1, [pc, #120]	; (1db64 <_tzset_unlocked_r+0x320>)
   1daea:	9503      	str	r5, [sp, #12]
   1daec:	9501      	str	r5, [sp, #4]
   1daee:	4648      	mov	r0, r9
   1daf0:	f000 fd7a 	bl	1e5e8 <siscanf>
   1daf4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1daf8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1dafc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1db00:	9c08      	ldr	r4, [sp, #32]
   1db02:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   1db06:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1db0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1db0e:	fb01 2303 	mla	r3, r1, r3, r2
   1db12:	e777      	b.n	1da04 <_tzset_unlocked_r+0x1c0>
   1db14:	f1ba 0f00 	cmp.w	sl, #0
   1db18:	d009      	beq.n	1db2e <_tzset_unlocked_r+0x2ea>
   1db1a:	224d      	movs	r2, #77	; 0x4d
   1db1c:	230b      	movs	r3, #11
   1db1e:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
   1db22:	62b3      	str	r3, [r6, #40]	; 0x28
   1db24:	2201      	movs	r2, #1
   1db26:	2300      	movs	r3, #0
   1db28:	62f2      	str	r2, [r6, #44]	; 0x2c
   1db2a:	6333      	str	r3, [r6, #48]	; 0x30
   1db2c:	e75b      	b.n	1d9e6 <_tzset_unlocked_r+0x1a2>
   1db2e:	234d      	movs	r3, #77	; 0x4d
   1db30:	2203      	movs	r2, #3
   1db32:	7233      	strb	r3, [r6, #8]
   1db34:	2302      	movs	r3, #2
   1db36:	f8c6 a014 	str.w	sl, [r6, #20]
   1db3a:	60f2      	str	r2, [r6, #12]
   1db3c:	6133      	str	r3, [r6, #16]
   1db3e:	e752      	b.n	1d9e6 <_tzset_unlocked_r+0x1a2>
   1db40:	00023554 	.word	0x00023554
   1db44:	2000a520 	.word	0x2000a520
   1db48:	2000a514 	.word	0x2000a514
   1db4c:	0002355c 	.word	0x0002355c
   1db50:	0002356c 	.word	0x0002356c
   1db54:	2000a524 	.word	0x2000a524
   1db58:	2000a528 	.word	0x2000a528
   1db5c:	20000678 	.word	0x20000678
   1db60:	00023558 	.word	0x00023558
   1db64:	00023594 	.word	0x00023594
   1db68:	2000a508 	.word	0x2000a508
   1db6c:	00023580 	.word	0x00023580

0001db70 <__register_exitproc>:
   1db70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1db74:	4d2c      	ldr	r5, [pc, #176]	; (1dc28 <__register_exitproc+0xb8>)
   1db76:	4606      	mov	r6, r0
   1db78:	6828      	ldr	r0, [r5, #0]
   1db7a:	4698      	mov	r8, r3
   1db7c:	460f      	mov	r7, r1
   1db7e:	4691      	mov	r9, r2
   1db80:	f000 f9e6 	bl	1df50 <__retarget_lock_acquire_recursive>
   1db84:	4b29      	ldr	r3, [pc, #164]	; (1dc2c <__register_exitproc+0xbc>)
   1db86:	681c      	ldr	r4, [r3, #0]
   1db88:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1db8c:	2b00      	cmp	r3, #0
   1db8e:	d03e      	beq.n	1dc0e <__register_exitproc+0x9e>
   1db90:	685a      	ldr	r2, [r3, #4]
   1db92:	2a1f      	cmp	r2, #31
   1db94:	dc1c      	bgt.n	1dbd0 <__register_exitproc+0x60>
   1db96:	f102 0e01 	add.w	lr, r2, #1
   1db9a:	b176      	cbz	r6, 1dbba <__register_exitproc+0x4a>
   1db9c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1dba0:	2401      	movs	r4, #1
   1dba2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1dba6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1dbaa:	4094      	lsls	r4, r2
   1dbac:	4320      	orrs	r0, r4
   1dbae:	2e02      	cmp	r6, #2
   1dbb0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1dbb4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1dbb8:	d023      	beq.n	1dc02 <__register_exitproc+0x92>
   1dbba:	3202      	adds	r2, #2
   1dbbc:	f8c3 e004 	str.w	lr, [r3, #4]
   1dbc0:	6828      	ldr	r0, [r5, #0]
   1dbc2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1dbc6:	f000 f9c7 	bl	1df58 <__retarget_lock_release_recursive>
   1dbca:	2000      	movs	r0, #0
   1dbcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dbd0:	4b17      	ldr	r3, [pc, #92]	; (1dc30 <__register_exitproc+0xc0>)
   1dbd2:	b30b      	cbz	r3, 1dc18 <__register_exitproc+0xa8>
   1dbd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1dbd8:	f7f6 fd0a 	bl	145f0 <malloc>
   1dbdc:	4603      	mov	r3, r0
   1dbde:	b1d8      	cbz	r0, 1dc18 <__register_exitproc+0xa8>
   1dbe0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1dbe4:	6002      	str	r2, [r0, #0]
   1dbe6:	2100      	movs	r1, #0
   1dbe8:	6041      	str	r1, [r0, #4]
   1dbea:	460a      	mov	r2, r1
   1dbec:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1dbf0:	f04f 0e01 	mov.w	lr, #1
   1dbf4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1dbf8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1dbfc:	2e00      	cmp	r6, #0
   1dbfe:	d0dc      	beq.n	1dbba <__register_exitproc+0x4a>
   1dc00:	e7cc      	b.n	1db9c <__register_exitproc+0x2c>
   1dc02:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1dc06:	430c      	orrs	r4, r1
   1dc08:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1dc0c:	e7d5      	b.n	1dbba <__register_exitproc+0x4a>
   1dc0e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1dc12:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1dc16:	e7bb      	b.n	1db90 <__register_exitproc+0x20>
   1dc18:	6828      	ldr	r0, [r5, #0]
   1dc1a:	f000 f99d 	bl	1df58 <__retarget_lock_release_recursive>
   1dc1e:	f04f 30ff 	mov.w	r0, #4294967295
   1dc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dc26:	bf00      	nop
   1dc28:	20000680 	.word	0x20000680
   1dc2c:	000234f0 	.word	0x000234f0
   1dc30:	000145f1 	.word	0x000145f1

0001dc34 <register_fini>:
   1dc34:	4b02      	ldr	r3, [pc, #8]	; (1dc40 <register_fini+0xc>)
   1dc36:	b113      	cbz	r3, 1dc3e <register_fini+0xa>
   1dc38:	4802      	ldr	r0, [pc, #8]	; (1dc44 <register_fini+0x10>)
   1dc3a:	f000 b833 	b.w	1dca4 <atexit>
   1dc3e:	4770      	bx	lr
   1dc40:	00000000 	.word	0x00000000
   1dc44:	0001dcb1 	.word	0x0001dcb1

0001dc48 <asctime>:
   1dc48:	4b02      	ldr	r3, [pc, #8]	; (1dc54 <asctime+0xc>)
   1dc4a:	6819      	ldr	r1, [r3, #0]
   1dc4c:	3160      	adds	r1, #96	; 0x60
   1dc4e:	f000 b803 	b.w	1dc58 <asctime_r>
   1dc52:	bf00      	nop
   1dc54:	20000248 	.word	0x20000248

0001dc58 <asctime_r>:
   1dc58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc5a:	6946      	ldr	r6, [r0, #20]
   1dc5c:	6807      	ldr	r7, [r0, #0]
   1dc5e:	6905      	ldr	r5, [r0, #16]
   1dc60:	6984      	ldr	r4, [r0, #24]
   1dc62:	4b0d      	ldr	r3, [pc, #52]	; (1dc98 <asctime_r+0x40>)
   1dc64:	4a0d      	ldr	r2, [pc, #52]	; (1dc9c <asctime_r+0x44>)
   1dc66:	b087      	sub	sp, #28
   1dc68:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1dc6c:	9703      	str	r7, [sp, #12]
   1dc6e:	460f      	mov	r7, r1
   1dc70:	6841      	ldr	r1, [r0, #4]
   1dc72:	9604      	str	r6, [sp, #16]
   1dc74:	6886      	ldr	r6, [r0, #8]
   1dc76:	68c0      	ldr	r0, [r0, #12]
   1dc78:	9102      	str	r1, [sp, #8]
   1dc7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1dc7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1dc82:	e88d 0041 	stmia.w	sp, {r0, r6}
   1dc86:	442b      	add	r3, r5
   1dc88:	4422      	add	r2, r4
   1dc8a:	4638      	mov	r0, r7
   1dc8c:	4904      	ldr	r1, [pc, #16]	; (1dca0 <asctime_r+0x48>)
   1dc8e:	f000 fc85 	bl	1e59c <siprintf>
   1dc92:	4638      	mov	r0, r7
   1dc94:	b007      	add	sp, #28
   1dc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc98:	000235e0 	.word	0x000235e0
   1dc9c:	000235c8 	.word	0x000235c8
   1dca0:	000235a8 	.word	0x000235a8

0001dca4 <atexit>:
   1dca4:	2300      	movs	r3, #0
   1dca6:	4601      	mov	r1, r0
   1dca8:	461a      	mov	r2, r3
   1dcaa:	4618      	mov	r0, r3
   1dcac:	f7ff bf60 	b.w	1db70 <__register_exitproc>

0001dcb0 <__libc_fini_array>:
   1dcb0:	b538      	push	{r3, r4, r5, lr}
   1dcb2:	4c0a      	ldr	r4, [pc, #40]	; (1dcdc <__libc_fini_array+0x2c>)
   1dcb4:	4d0a      	ldr	r5, [pc, #40]	; (1dce0 <__libc_fini_array+0x30>)
   1dcb6:	1b64      	subs	r4, r4, r5
   1dcb8:	10a4      	asrs	r4, r4, #2
   1dcba:	d00a      	beq.n	1dcd2 <__libc_fini_array+0x22>
   1dcbc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1dcc0:	3b01      	subs	r3, #1
   1dcc2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1dcc6:	3c01      	subs	r4, #1
   1dcc8:	f855 3904 	ldr.w	r3, [r5], #-4
   1dccc:	4798      	blx	r3
   1dcce:	2c00      	cmp	r4, #0
   1dcd0:	d1f9      	bne.n	1dcc6 <__libc_fini_array+0x16>
   1dcd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1dcd6:	f005 bd91 	b.w	237fc <_fini>
   1dcda:	bf00      	nop
   1dcdc:	0002380c 	.word	0x0002380c
   1dce0:	00023808 	.word	0x00023808

0001dce4 <_findenv_r>:
   1dce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dce8:	4f1c      	ldr	r7, [pc, #112]	; (1dd5c <_findenv_r+0x78>)
   1dcea:	460e      	mov	r6, r1
   1dcec:	4691      	mov	r9, r2
   1dcee:	4680      	mov	r8, r0
   1dcf0:	f002 faf2 	bl	202d8 <__env_lock>
   1dcf4:	683d      	ldr	r5, [r7, #0]
   1dcf6:	b1f5      	cbz	r5, 1dd36 <_findenv_r+0x52>
   1dcf8:	7834      	ldrb	r4, [r6, #0]
   1dcfa:	b15c      	cbz	r4, 1dd14 <_findenv_r+0x30>
   1dcfc:	2c3d      	cmp	r4, #61	; 0x3d
   1dcfe:	bf18      	it	ne
   1dd00:	4634      	movne	r4, r6
   1dd02:	d102      	bne.n	1dd0a <_findenv_r+0x26>
   1dd04:	e017      	b.n	1dd36 <_findenv_r+0x52>
   1dd06:	2b3d      	cmp	r3, #61	; 0x3d
   1dd08:	d015      	beq.n	1dd36 <_findenv_r+0x52>
   1dd0a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1dd0e:	2b00      	cmp	r3, #0
   1dd10:	d1f9      	bne.n	1dd06 <_findenv_r+0x22>
   1dd12:	1ba4      	subs	r4, r4, r6
   1dd14:	6828      	ldr	r0, [r5, #0]
   1dd16:	b170      	cbz	r0, 1dd36 <_findenv_r+0x52>
   1dd18:	4622      	mov	r2, r4
   1dd1a:	4631      	mov	r1, r6
   1dd1c:	f000 fe6c 	bl	1e9f8 <strncmp>
   1dd20:	b928      	cbnz	r0, 1dd2e <_findenv_r+0x4a>
   1dd22:	6828      	ldr	r0, [r5, #0]
   1dd24:	5d03      	ldrb	r3, [r0, r4]
   1dd26:	2b3d      	cmp	r3, #61	; 0x3d
   1dd28:	eb00 0a04 	add.w	sl, r0, r4
   1dd2c:	d009      	beq.n	1dd42 <_findenv_r+0x5e>
   1dd2e:	f855 0f04 	ldr.w	r0, [r5, #4]!
   1dd32:	2800      	cmp	r0, #0
   1dd34:	d1f0      	bne.n	1dd18 <_findenv_r+0x34>
   1dd36:	4640      	mov	r0, r8
   1dd38:	f002 fad4 	bl	202e4 <__env_unlock>
   1dd3c:	2000      	movs	r0, #0
   1dd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dd42:	683b      	ldr	r3, [r7, #0]
   1dd44:	1aed      	subs	r5, r5, r3
   1dd46:	10ad      	asrs	r5, r5, #2
   1dd48:	4640      	mov	r0, r8
   1dd4a:	f8c9 5000 	str.w	r5, [r9]
   1dd4e:	f002 fac9 	bl	202e4 <__env_unlock>
   1dd52:	f10a 0001 	add.w	r0, sl, #1
   1dd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dd5a:	bf00      	nop
   1dd5c:	20000ad4 	.word	0x20000ad4

0001dd60 <_getenv_r>:
   1dd60:	b500      	push	{lr}
   1dd62:	b083      	sub	sp, #12
   1dd64:	aa01      	add	r2, sp, #4
   1dd66:	f7ff ffbd 	bl	1dce4 <_findenv_r>
   1dd6a:	b003      	add	sp, #12
   1dd6c:	f85d fb04 	ldr.w	pc, [sp], #4

0001dd70 <__gettzinfo>:
   1dd70:	4800      	ldr	r0, [pc, #0]	; (1dd74 <__gettzinfo+0x4>)
   1dd72:	4770      	bx	lr
   1dd74:	20000684 	.word	0x20000684

0001dd78 <gmtime_r>:
   1dd78:	6800      	ldr	r0, [r0, #0]
   1dd7a:	4b65      	ldr	r3, [pc, #404]	; (1df10 <gmtime_r+0x198>)
   1dd7c:	fb83 2300 	smull	r2, r3, r3, r0
   1dd80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dd84:	4403      	add	r3, r0
   1dd86:	4d63      	ldr	r5, [pc, #396]	; (1df14 <gmtime_r+0x19c>)
   1dd88:	17c2      	asrs	r2, r0, #31
   1dd8a:	ebc2 4323 	rsb	r3, r2, r3, asr #16
   1dd8e:	fb05 0513 	mls	r5, r5, r3, r0
   1dd92:	2d00      	cmp	r5, #0
   1dd94:	f2c0 80b3 	blt.w	1defe <gmtime_r+0x186>
   1dd98:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1dd9c:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
   1dda0:	4e5d      	ldr	r6, [pc, #372]	; (1df18 <gmtime_r+0x1a0>)
   1dda2:	485e      	ldr	r0, [pc, #376]	; (1df1c <gmtime_r+0x1a4>)
   1dda4:	4a5e      	ldr	r2, [pc, #376]	; (1df20 <gmtime_r+0x1a8>)
   1dda6:	4c5f      	ldr	r4, [pc, #380]	; (1df24 <gmtime_r+0x1ac>)
   1dda8:	f8df c18c 	ldr.w	ip, [pc, #396]	; 1df38 <gmtime_r+0x1c0>
   1ddac:	f8df e18c 	ldr.w	lr, [pc, #396]	; 1df3c <gmtime_r+0x1c4>
   1ddb0:	fb86 7603 	smull	r7, r6, r6, r3
   1ddb4:	17df      	asrs	r7, r3, #31
   1ddb6:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
   1ddba:	fb00 3006 	mla	r0, r0, r6, r3
   1ddbe:	0887      	lsrs	r7, r0, #2
   1ddc0:	fba2 8207 	umull	r8, r2, r2, r7
   1ddc4:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
   1ddc8:	fba4 8707 	umull	r8, r7, r4, r7
   1ddcc:	ea4f 1810 	mov.w	r8, r0, lsr #4
   1ddd0:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
   1ddd4:	fbac c708 	umull	ip, r7, ip, r8
   1ddd8:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
   1dddc:	f8df c160 	ldr.w	ip, [pc, #352]	; 1df40 <gmtime_r+0x1c8>
   1dde0:	4f51      	ldr	r7, [pc, #324]	; (1df28 <gmtime_r+0x1b0>)
   1dde2:	fbae 8e02 	umull	r8, lr, lr, r2
   1dde6:	fbac 9c02 	umull	r9, ip, ip, r2
   1ddea:	eba2 080e 	sub.w	r8, r2, lr
   1ddee:	0892      	lsrs	r2, r2, #2
   1ddf0:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
   1ddf4:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
   1ddf8:	fba4 4202 	umull	r4, r2, r4, r2
   1ddfc:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
   1de00:	ea4f 241e 	mov.w	r4, lr, lsr #8
   1de04:	f240 106d 	movw	r0, #365	; 0x16d
   1de08:	fb00 2214 	mls	r2, r0, r4, r2
   1de0c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1df44 <gmtime_r+0x1cc>
   1de10:	fb87 0e05 	smull	r0, lr, r7, r5
   1de14:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1de18:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1de1c:	44ae      	add	lr, r5
   1de1e:	3002      	adds	r0, #2
   1de20:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
   1de24:	4f41      	ldr	r7, [pc, #260]	; (1df2c <gmtime_r+0x1b4>)
   1de26:	f8c1 e008 	str.w	lr, [r1, #8]
   1de2a:	f103 0c03 	add.w	ip, r3, #3
   1de2e:	fba8 3000 	umull	r3, r0, r8, r0
   1de32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   1de36:	fb03 551e 	mls	r5, r3, lr, r5
   1de3a:	4b3d      	ldr	r3, [pc, #244]	; (1df30 <gmtime_r+0x1b8>)
   1de3c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1df48 <gmtime_r+0x1d0>
   1de40:	fb87 e705 	smull	lr, r7, r7, r5
   1de44:	fb83 390c 	smull	r3, r9, r3, ip
   1de48:	197b      	adds	r3, r7, r5
   1de4a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   1de4e:	fb07 4606 	mla	r6, r7, r6, r4
   1de52:	17ef      	asrs	r7, r5, #31
   1de54:	44e1      	add	r9, ip
   1de56:	ebc7 1363 	rsb	r3, r7, r3, asr #5
   1de5a:	ea4f 77ec 	mov.w	r7, ip, asr #31
   1de5e:	09c0      	lsrs	r0, r0, #7
   1de60:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
   1de64:	2809      	cmp	r0, #9
   1de66:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
   1de6a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
   1de6e:	ebac 0707 	sub.w	r7, ip, r7
   1de72:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
   1de76:	bf8c      	ite	hi
   1de78:	f06f 0c09 	mvnhi.w	ip, #9
   1de7c:	f04f 0c02 	movls.w	ip, #2
   1de80:	4460      	add	r0, ip
   1de82:	f10e 0e02 	add.w	lr, lr, #2
   1de86:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
   1de8a:	fba8 8e0e 	umull	r8, lr, r8, lr
   1de8e:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
   1de92:	f102 0801 	add.w	r8, r2, #1
   1de96:	2801      	cmp	r0, #1
   1de98:	bf98      	it	ls
   1de9a:	3601      	addls	r6, #1
   1de9c:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
   1dea0:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
   1dea4:	604b      	str	r3, [r1, #4]
   1dea6:	600d      	str	r5, [r1, #0]
   1dea8:	618f      	str	r7, [r1, #24]
   1deaa:	d225      	bcs.n	1def8 <gmtime_r+0x180>
   1deac:	07a3      	lsls	r3, r4, #30
   1deae:	d018      	beq.n	1dee2 <gmtime_r+0x16a>
   1deb0:	4b20      	ldr	r3, [pc, #128]	; (1df34 <gmtime_r+0x1bc>)
   1deb2:	fba3 5304 	umull	r5, r3, r3, r4
   1deb6:	09db      	lsrs	r3, r3, #7
   1deb8:	f44f 75c8 	mov.w	r5, #400	; 0x190
   1debc:	fb05 4413 	mls	r4, r5, r3, r4
   1dec0:	fab4 f484 	clz	r4, r4
   1dec4:	0964      	lsrs	r4, r4, #5
   1dec6:	323b      	adds	r2, #59	; 0x3b
   1dec8:	4422      	add	r2, r4
   1deca:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   1dece:	2300      	movs	r3, #0
   1ded0:	6108      	str	r0, [r1, #16]
   1ded2:	614e      	str	r6, [r1, #20]
   1ded4:	61ca      	str	r2, [r1, #28]
   1ded6:	f8c1 e00c 	str.w	lr, [r1, #12]
   1deda:	620b      	str	r3, [r1, #32]
   1dedc:	4608      	mov	r0, r1
   1dede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dee2:	4b14      	ldr	r3, [pc, #80]	; (1df34 <gmtime_r+0x1bc>)
   1dee4:	fba3 5304 	umull	r5, r3, r3, r4
   1dee8:	095b      	lsrs	r3, r3, #5
   1deea:	2564      	movs	r5, #100	; 0x64
   1deec:	fb05 4313 	mls	r3, r5, r3, r4
   1def0:	2b00      	cmp	r3, #0
   1def2:	d0dd      	beq.n	1deb0 <gmtime_r+0x138>
   1def4:	2401      	movs	r4, #1
   1def6:	e7e6      	b.n	1dec6 <gmtime_r+0x14e>
   1def8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
   1defc:	e7e5      	b.n	1deca <gmtime_r+0x152>
   1defe:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
   1df02:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1df06:	f505 75c0 	add.w	r5, r5, #384	; 0x180
   1df0a:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
   1df0e:	e747      	b.n	1dda0 <gmtime_r+0x28>
   1df10:	c22e4507 	.word	0xc22e4507
   1df14:	00015180 	.word	0x00015180
   1df18:	396b06bd 	.word	0x396b06bd
   1df1c:	fffdc54f 	.word	0xfffdc54f
   1df20:	396b207f 	.word	0x396b207f
   1df24:	59c67cd9 	.word	0x59c67cd9
   1df28:	91a2b3c5 	.word	0x91a2b3c5
   1df2c:	88888889 	.word	0x88888889
   1df30:	92492493 	.word	0x92492493
   1df34:	51eb851f 	.word	0x51eb851f
   1df38:	0072d641 	.word	0x0072d641
   1df3c:	6719f361 	.word	0x6719f361
   1df40:	e5d32b1f 	.word	0xe5d32b1f
   1df44:	d62b80d7 	.word	0xd62b80d7
   1df48:	cccccccd 	.word	0xcccccccd

0001df4c <__retarget_lock_acquire>:
   1df4c:	4770      	bx	lr
   1df4e:	bf00      	nop

0001df50 <__retarget_lock_acquire_recursive>:
   1df50:	4770      	bx	lr
   1df52:	bf00      	nop

0001df54 <__retarget_lock_release>:
   1df54:	4770      	bx	lr
   1df56:	bf00      	nop

0001df58 <__retarget_lock_release_recursive>:
   1df58:	4770      	bx	lr
   1df5a:	bf00      	nop

0001df5c <_malloc_r>:
   1df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df60:	f101 060b 	add.w	r6, r1, #11
   1df64:	2e16      	cmp	r6, #22
   1df66:	b083      	sub	sp, #12
   1df68:	4605      	mov	r5, r0
   1df6a:	f240 809e 	bls.w	1e0aa <_malloc_r+0x14e>
   1df6e:	f036 0607 	bics.w	r6, r6, #7
   1df72:	f100 80bd 	bmi.w	1e0f0 <_malloc_r+0x194>
   1df76:	42b1      	cmp	r1, r6
   1df78:	f200 80ba 	bhi.w	1e0f0 <_malloc_r+0x194>
   1df7c:	f000 faf0 	bl	1e560 <__malloc_lock>
   1df80:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1df84:	f0c0 8293 	bcc.w	1e4ae <_malloc_r+0x552>
   1df88:	0a73      	lsrs	r3, r6, #9
   1df8a:	f000 80b8 	beq.w	1e0fe <_malloc_r+0x1a2>
   1df8e:	2b04      	cmp	r3, #4
   1df90:	f200 8179 	bhi.w	1e286 <_malloc_r+0x32a>
   1df94:	09b3      	lsrs	r3, r6, #6
   1df96:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1df9a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1df9e:	00c3      	lsls	r3, r0, #3
   1dfa0:	4fbf      	ldr	r7, [pc, #764]	; (1e2a0 <_malloc_r+0x344>)
   1dfa2:	443b      	add	r3, r7
   1dfa4:	f1a3 0108 	sub.w	r1, r3, #8
   1dfa8:	685c      	ldr	r4, [r3, #4]
   1dfaa:	42a1      	cmp	r1, r4
   1dfac:	d106      	bne.n	1dfbc <_malloc_r+0x60>
   1dfae:	e00c      	b.n	1dfca <_malloc_r+0x6e>
   1dfb0:	2a00      	cmp	r2, #0
   1dfb2:	f280 80aa 	bge.w	1e10a <_malloc_r+0x1ae>
   1dfb6:	68e4      	ldr	r4, [r4, #12]
   1dfb8:	42a1      	cmp	r1, r4
   1dfba:	d006      	beq.n	1dfca <_malloc_r+0x6e>
   1dfbc:	6863      	ldr	r3, [r4, #4]
   1dfbe:	f023 0303 	bic.w	r3, r3, #3
   1dfc2:	1b9a      	subs	r2, r3, r6
   1dfc4:	2a0f      	cmp	r2, #15
   1dfc6:	ddf3      	ble.n	1dfb0 <_malloc_r+0x54>
   1dfc8:	4670      	mov	r0, lr
   1dfca:	693c      	ldr	r4, [r7, #16]
   1dfcc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1e2b4 <_malloc_r+0x358>
   1dfd0:	4574      	cmp	r4, lr
   1dfd2:	f000 81ab 	beq.w	1e32c <_malloc_r+0x3d0>
   1dfd6:	6863      	ldr	r3, [r4, #4]
   1dfd8:	f023 0303 	bic.w	r3, r3, #3
   1dfdc:	1b9a      	subs	r2, r3, r6
   1dfde:	2a0f      	cmp	r2, #15
   1dfe0:	f300 8190 	bgt.w	1e304 <_malloc_r+0x3a8>
   1dfe4:	2a00      	cmp	r2, #0
   1dfe6:	f8c7 e014 	str.w	lr, [r7, #20]
   1dfea:	f8c7 e010 	str.w	lr, [r7, #16]
   1dfee:	f280 809d 	bge.w	1e12c <_malloc_r+0x1d0>
   1dff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1dff6:	f080 8161 	bcs.w	1e2bc <_malloc_r+0x360>
   1dffa:	08db      	lsrs	r3, r3, #3
   1dffc:	f103 0c01 	add.w	ip, r3, #1
   1e000:	1099      	asrs	r1, r3, #2
   1e002:	687a      	ldr	r2, [r7, #4]
   1e004:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1e008:	f8c4 8008 	str.w	r8, [r4, #8]
   1e00c:	2301      	movs	r3, #1
   1e00e:	408b      	lsls	r3, r1
   1e010:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1e014:	4313      	orrs	r3, r2
   1e016:	3908      	subs	r1, #8
   1e018:	60e1      	str	r1, [r4, #12]
   1e01a:	607b      	str	r3, [r7, #4]
   1e01c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1e020:	f8c8 400c 	str.w	r4, [r8, #12]
   1e024:	1082      	asrs	r2, r0, #2
   1e026:	2401      	movs	r4, #1
   1e028:	4094      	lsls	r4, r2
   1e02a:	429c      	cmp	r4, r3
   1e02c:	f200 808b 	bhi.w	1e146 <_malloc_r+0x1ea>
   1e030:	421c      	tst	r4, r3
   1e032:	d106      	bne.n	1e042 <_malloc_r+0xe6>
   1e034:	f020 0003 	bic.w	r0, r0, #3
   1e038:	0064      	lsls	r4, r4, #1
   1e03a:	421c      	tst	r4, r3
   1e03c:	f100 0004 	add.w	r0, r0, #4
   1e040:	d0fa      	beq.n	1e038 <_malloc_r+0xdc>
   1e042:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1e046:	46cc      	mov	ip, r9
   1e048:	4680      	mov	r8, r0
   1e04a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1e04e:	459c      	cmp	ip, r3
   1e050:	d107      	bne.n	1e062 <_malloc_r+0x106>
   1e052:	e16d      	b.n	1e330 <_malloc_r+0x3d4>
   1e054:	2a00      	cmp	r2, #0
   1e056:	f280 817b 	bge.w	1e350 <_malloc_r+0x3f4>
   1e05a:	68db      	ldr	r3, [r3, #12]
   1e05c:	459c      	cmp	ip, r3
   1e05e:	f000 8167 	beq.w	1e330 <_malloc_r+0x3d4>
   1e062:	6859      	ldr	r1, [r3, #4]
   1e064:	f021 0103 	bic.w	r1, r1, #3
   1e068:	1b8a      	subs	r2, r1, r6
   1e06a:	2a0f      	cmp	r2, #15
   1e06c:	ddf2      	ble.n	1e054 <_malloc_r+0xf8>
   1e06e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1e072:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e076:	9300      	str	r3, [sp, #0]
   1e078:	199c      	adds	r4, r3, r6
   1e07a:	4628      	mov	r0, r5
   1e07c:	f046 0601 	orr.w	r6, r6, #1
   1e080:	f042 0501 	orr.w	r5, r2, #1
   1e084:	605e      	str	r6, [r3, #4]
   1e086:	f8c8 c00c 	str.w	ip, [r8, #12]
   1e08a:	f8cc 8008 	str.w	r8, [ip, #8]
   1e08e:	617c      	str	r4, [r7, #20]
   1e090:	613c      	str	r4, [r7, #16]
   1e092:	f8c4 e00c 	str.w	lr, [r4, #12]
   1e096:	f8c4 e008 	str.w	lr, [r4, #8]
   1e09a:	6065      	str	r5, [r4, #4]
   1e09c:	505a      	str	r2, [r3, r1]
   1e09e:	f000 fa65 	bl	1e56c <__malloc_unlock>
   1e0a2:	9b00      	ldr	r3, [sp, #0]
   1e0a4:	f103 0408 	add.w	r4, r3, #8
   1e0a8:	e01e      	b.n	1e0e8 <_malloc_r+0x18c>
   1e0aa:	2910      	cmp	r1, #16
   1e0ac:	d820      	bhi.n	1e0f0 <_malloc_r+0x194>
   1e0ae:	f000 fa57 	bl	1e560 <__malloc_lock>
   1e0b2:	2610      	movs	r6, #16
   1e0b4:	2318      	movs	r3, #24
   1e0b6:	2002      	movs	r0, #2
   1e0b8:	4f79      	ldr	r7, [pc, #484]	; (1e2a0 <_malloc_r+0x344>)
   1e0ba:	443b      	add	r3, r7
   1e0bc:	f1a3 0208 	sub.w	r2, r3, #8
   1e0c0:	685c      	ldr	r4, [r3, #4]
   1e0c2:	4294      	cmp	r4, r2
   1e0c4:	f000 813d 	beq.w	1e342 <_malloc_r+0x3e6>
   1e0c8:	6863      	ldr	r3, [r4, #4]
   1e0ca:	68e1      	ldr	r1, [r4, #12]
   1e0cc:	68a6      	ldr	r6, [r4, #8]
   1e0ce:	f023 0303 	bic.w	r3, r3, #3
   1e0d2:	4423      	add	r3, r4
   1e0d4:	4628      	mov	r0, r5
   1e0d6:	685a      	ldr	r2, [r3, #4]
   1e0d8:	60f1      	str	r1, [r6, #12]
   1e0da:	f042 0201 	orr.w	r2, r2, #1
   1e0de:	608e      	str	r6, [r1, #8]
   1e0e0:	605a      	str	r2, [r3, #4]
   1e0e2:	f000 fa43 	bl	1e56c <__malloc_unlock>
   1e0e6:	3408      	adds	r4, #8
   1e0e8:	4620      	mov	r0, r4
   1e0ea:	b003      	add	sp, #12
   1e0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0f0:	2400      	movs	r4, #0
   1e0f2:	230c      	movs	r3, #12
   1e0f4:	4620      	mov	r0, r4
   1e0f6:	602b      	str	r3, [r5, #0]
   1e0f8:	b003      	add	sp, #12
   1e0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0fe:	2040      	movs	r0, #64	; 0x40
   1e100:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e104:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1e108:	e74a      	b.n	1dfa0 <_malloc_r+0x44>
   1e10a:	4423      	add	r3, r4
   1e10c:	68e1      	ldr	r1, [r4, #12]
   1e10e:	685a      	ldr	r2, [r3, #4]
   1e110:	68a6      	ldr	r6, [r4, #8]
   1e112:	f042 0201 	orr.w	r2, r2, #1
   1e116:	60f1      	str	r1, [r6, #12]
   1e118:	4628      	mov	r0, r5
   1e11a:	608e      	str	r6, [r1, #8]
   1e11c:	605a      	str	r2, [r3, #4]
   1e11e:	f000 fa25 	bl	1e56c <__malloc_unlock>
   1e122:	3408      	adds	r4, #8
   1e124:	4620      	mov	r0, r4
   1e126:	b003      	add	sp, #12
   1e128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e12c:	4423      	add	r3, r4
   1e12e:	4628      	mov	r0, r5
   1e130:	685a      	ldr	r2, [r3, #4]
   1e132:	f042 0201 	orr.w	r2, r2, #1
   1e136:	605a      	str	r2, [r3, #4]
   1e138:	f000 fa18 	bl	1e56c <__malloc_unlock>
   1e13c:	3408      	adds	r4, #8
   1e13e:	4620      	mov	r0, r4
   1e140:	b003      	add	sp, #12
   1e142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e146:	68bc      	ldr	r4, [r7, #8]
   1e148:	6863      	ldr	r3, [r4, #4]
   1e14a:	f023 0803 	bic.w	r8, r3, #3
   1e14e:	45b0      	cmp	r8, r6
   1e150:	d304      	bcc.n	1e15c <_malloc_r+0x200>
   1e152:	eba8 0306 	sub.w	r3, r8, r6
   1e156:	2b0f      	cmp	r3, #15
   1e158:	f300 8085 	bgt.w	1e266 <_malloc_r+0x30a>
   1e15c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1e2b8 <_malloc_r+0x35c>
   1e160:	4b50      	ldr	r3, [pc, #320]	; (1e2a4 <_malloc_r+0x348>)
   1e162:	f8d9 2000 	ldr.w	r2, [r9]
   1e166:	681b      	ldr	r3, [r3, #0]
   1e168:	3201      	adds	r2, #1
   1e16a:	4433      	add	r3, r6
   1e16c:	eb04 0a08 	add.w	sl, r4, r8
   1e170:	f000 8155 	beq.w	1e41e <_malloc_r+0x4c2>
   1e174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1e178:	330f      	adds	r3, #15
   1e17a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1e17e:	f02b 0b0f 	bic.w	fp, fp, #15
   1e182:	4659      	mov	r1, fp
   1e184:	4628      	mov	r0, r5
   1e186:	f000 f9f7 	bl	1e578 <_sbrk_r>
   1e18a:	1c41      	adds	r1, r0, #1
   1e18c:	4602      	mov	r2, r0
   1e18e:	f000 80fc 	beq.w	1e38a <_malloc_r+0x42e>
   1e192:	4582      	cmp	sl, r0
   1e194:	f200 80f7 	bhi.w	1e386 <_malloc_r+0x42a>
   1e198:	4b43      	ldr	r3, [pc, #268]	; (1e2a8 <_malloc_r+0x34c>)
   1e19a:	6819      	ldr	r1, [r3, #0]
   1e19c:	4459      	add	r1, fp
   1e19e:	6019      	str	r1, [r3, #0]
   1e1a0:	f000 814d 	beq.w	1e43e <_malloc_r+0x4e2>
   1e1a4:	f8d9 0000 	ldr.w	r0, [r9]
   1e1a8:	3001      	adds	r0, #1
   1e1aa:	bf1b      	ittet	ne
   1e1ac:	eba2 0a0a 	subne.w	sl, r2, sl
   1e1b0:	4451      	addne	r1, sl
   1e1b2:	f8c9 2000 	streq.w	r2, [r9]
   1e1b6:	6019      	strne	r1, [r3, #0]
   1e1b8:	f012 0107 	ands.w	r1, r2, #7
   1e1bc:	f000 8115 	beq.w	1e3ea <_malloc_r+0x48e>
   1e1c0:	f1c1 0008 	rsb	r0, r1, #8
   1e1c4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1e1c8:	4402      	add	r2, r0
   1e1ca:	3108      	adds	r1, #8
   1e1cc:	eb02 090b 	add.w	r9, r2, fp
   1e1d0:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1e1d4:	eba1 0909 	sub.w	r9, r1, r9
   1e1d8:	4649      	mov	r1, r9
   1e1da:	4628      	mov	r0, r5
   1e1dc:	9301      	str	r3, [sp, #4]
   1e1de:	9200      	str	r2, [sp, #0]
   1e1e0:	f000 f9ca 	bl	1e578 <_sbrk_r>
   1e1e4:	1c43      	adds	r3, r0, #1
   1e1e6:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1e1ea:	f000 8143 	beq.w	1e474 <_malloc_r+0x518>
   1e1ee:	1a80      	subs	r0, r0, r2
   1e1f0:	4448      	add	r0, r9
   1e1f2:	f040 0001 	orr.w	r0, r0, #1
   1e1f6:	6819      	ldr	r1, [r3, #0]
   1e1f8:	60ba      	str	r2, [r7, #8]
   1e1fa:	4449      	add	r1, r9
   1e1fc:	42bc      	cmp	r4, r7
   1e1fe:	6050      	str	r0, [r2, #4]
   1e200:	6019      	str	r1, [r3, #0]
   1e202:	d017      	beq.n	1e234 <_malloc_r+0x2d8>
   1e204:	f1b8 0f0f 	cmp.w	r8, #15
   1e208:	f240 80fb 	bls.w	1e402 <_malloc_r+0x4a6>
   1e20c:	6860      	ldr	r0, [r4, #4]
   1e20e:	f1a8 020c 	sub.w	r2, r8, #12
   1e212:	f022 0207 	bic.w	r2, r2, #7
   1e216:	eb04 0e02 	add.w	lr, r4, r2
   1e21a:	f000 0001 	and.w	r0, r0, #1
   1e21e:	f04f 0c05 	mov.w	ip, #5
   1e222:	4310      	orrs	r0, r2
   1e224:	2a0f      	cmp	r2, #15
   1e226:	6060      	str	r0, [r4, #4]
   1e228:	f8ce c004 	str.w	ip, [lr, #4]
   1e22c:	f8ce c008 	str.w	ip, [lr, #8]
   1e230:	f200 8117 	bhi.w	1e462 <_malloc_r+0x506>
   1e234:	4b1d      	ldr	r3, [pc, #116]	; (1e2ac <_malloc_r+0x350>)
   1e236:	68bc      	ldr	r4, [r7, #8]
   1e238:	681a      	ldr	r2, [r3, #0]
   1e23a:	4291      	cmp	r1, r2
   1e23c:	bf88      	it	hi
   1e23e:	6019      	strhi	r1, [r3, #0]
   1e240:	4b1b      	ldr	r3, [pc, #108]	; (1e2b0 <_malloc_r+0x354>)
   1e242:	681a      	ldr	r2, [r3, #0]
   1e244:	4291      	cmp	r1, r2
   1e246:	6862      	ldr	r2, [r4, #4]
   1e248:	bf88      	it	hi
   1e24a:	6019      	strhi	r1, [r3, #0]
   1e24c:	f022 0203 	bic.w	r2, r2, #3
   1e250:	4296      	cmp	r6, r2
   1e252:	eba2 0306 	sub.w	r3, r2, r6
   1e256:	d801      	bhi.n	1e25c <_malloc_r+0x300>
   1e258:	2b0f      	cmp	r3, #15
   1e25a:	dc04      	bgt.n	1e266 <_malloc_r+0x30a>
   1e25c:	4628      	mov	r0, r5
   1e25e:	f000 f985 	bl	1e56c <__malloc_unlock>
   1e262:	2400      	movs	r4, #0
   1e264:	e740      	b.n	1e0e8 <_malloc_r+0x18c>
   1e266:	19a2      	adds	r2, r4, r6
   1e268:	f043 0301 	orr.w	r3, r3, #1
   1e26c:	f046 0601 	orr.w	r6, r6, #1
   1e270:	6066      	str	r6, [r4, #4]
   1e272:	4628      	mov	r0, r5
   1e274:	60ba      	str	r2, [r7, #8]
   1e276:	6053      	str	r3, [r2, #4]
   1e278:	f000 f978 	bl	1e56c <__malloc_unlock>
   1e27c:	3408      	adds	r4, #8
   1e27e:	4620      	mov	r0, r4
   1e280:	b003      	add	sp, #12
   1e282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e286:	2b14      	cmp	r3, #20
   1e288:	d971      	bls.n	1e36e <_malloc_r+0x412>
   1e28a:	2b54      	cmp	r3, #84	; 0x54
   1e28c:	f200 80a3 	bhi.w	1e3d6 <_malloc_r+0x47a>
   1e290:	0b33      	lsrs	r3, r6, #12
   1e292:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1e296:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1e29a:	00c3      	lsls	r3, r0, #3
   1e29c:	e680      	b.n	1dfa0 <_malloc_r+0x44>
   1e29e:	bf00      	nop
   1e2a0:	200006c4 	.word	0x200006c4
   1e2a4:	2000a55c 	.word	0x2000a55c
   1e2a8:	2000a52c 	.word	0x2000a52c
   1e2ac:	2000a554 	.word	0x2000a554
   1e2b0:	2000a558 	.word	0x2000a558
   1e2b4:	200006cc 	.word	0x200006cc
   1e2b8:	20000acc 	.word	0x20000acc
   1e2bc:	0a5a      	lsrs	r2, r3, #9
   1e2be:	2a04      	cmp	r2, #4
   1e2c0:	d95b      	bls.n	1e37a <_malloc_r+0x41e>
   1e2c2:	2a14      	cmp	r2, #20
   1e2c4:	f200 80ae 	bhi.w	1e424 <_malloc_r+0x4c8>
   1e2c8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1e2cc:	00c9      	lsls	r1, r1, #3
   1e2ce:	325b      	adds	r2, #91	; 0x5b
   1e2d0:	eb07 0c01 	add.w	ip, r7, r1
   1e2d4:	5879      	ldr	r1, [r7, r1]
   1e2d6:	f1ac 0c08 	sub.w	ip, ip, #8
   1e2da:	458c      	cmp	ip, r1
   1e2dc:	f000 8088 	beq.w	1e3f0 <_malloc_r+0x494>
   1e2e0:	684a      	ldr	r2, [r1, #4]
   1e2e2:	f022 0203 	bic.w	r2, r2, #3
   1e2e6:	4293      	cmp	r3, r2
   1e2e8:	d273      	bcs.n	1e3d2 <_malloc_r+0x476>
   1e2ea:	6889      	ldr	r1, [r1, #8]
   1e2ec:	458c      	cmp	ip, r1
   1e2ee:	d1f7      	bne.n	1e2e0 <_malloc_r+0x384>
   1e2f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1e2f4:	687b      	ldr	r3, [r7, #4]
   1e2f6:	60e2      	str	r2, [r4, #12]
   1e2f8:	f8c4 c008 	str.w	ip, [r4, #8]
   1e2fc:	6094      	str	r4, [r2, #8]
   1e2fe:	f8cc 400c 	str.w	r4, [ip, #12]
   1e302:	e68f      	b.n	1e024 <_malloc_r+0xc8>
   1e304:	19a1      	adds	r1, r4, r6
   1e306:	f046 0c01 	orr.w	ip, r6, #1
   1e30a:	f042 0601 	orr.w	r6, r2, #1
   1e30e:	f8c4 c004 	str.w	ip, [r4, #4]
   1e312:	4628      	mov	r0, r5
   1e314:	6179      	str	r1, [r7, #20]
   1e316:	6139      	str	r1, [r7, #16]
   1e318:	f8c1 e00c 	str.w	lr, [r1, #12]
   1e31c:	f8c1 e008 	str.w	lr, [r1, #8]
   1e320:	604e      	str	r6, [r1, #4]
   1e322:	50e2      	str	r2, [r4, r3]
   1e324:	f000 f922 	bl	1e56c <__malloc_unlock>
   1e328:	3408      	adds	r4, #8
   1e32a:	e6dd      	b.n	1e0e8 <_malloc_r+0x18c>
   1e32c:	687b      	ldr	r3, [r7, #4]
   1e32e:	e679      	b.n	1e024 <_malloc_r+0xc8>
   1e330:	f108 0801 	add.w	r8, r8, #1
   1e334:	f018 0f03 	tst.w	r8, #3
   1e338:	f10c 0c08 	add.w	ip, ip, #8
   1e33c:	f47f ae85 	bne.w	1e04a <_malloc_r+0xee>
   1e340:	e02d      	b.n	1e39e <_malloc_r+0x442>
   1e342:	68dc      	ldr	r4, [r3, #12]
   1e344:	42a3      	cmp	r3, r4
   1e346:	bf08      	it	eq
   1e348:	3002      	addeq	r0, #2
   1e34a:	f43f ae3e 	beq.w	1dfca <_malloc_r+0x6e>
   1e34e:	e6bb      	b.n	1e0c8 <_malloc_r+0x16c>
   1e350:	4419      	add	r1, r3
   1e352:	461c      	mov	r4, r3
   1e354:	684a      	ldr	r2, [r1, #4]
   1e356:	68db      	ldr	r3, [r3, #12]
   1e358:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1e35c:	f042 0201 	orr.w	r2, r2, #1
   1e360:	604a      	str	r2, [r1, #4]
   1e362:	4628      	mov	r0, r5
   1e364:	60f3      	str	r3, [r6, #12]
   1e366:	609e      	str	r6, [r3, #8]
   1e368:	f000 f900 	bl	1e56c <__malloc_unlock>
   1e36c:	e6bc      	b.n	1e0e8 <_malloc_r+0x18c>
   1e36e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1e372:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1e376:	00c3      	lsls	r3, r0, #3
   1e378:	e612      	b.n	1dfa0 <_malloc_r+0x44>
   1e37a:	099a      	lsrs	r2, r3, #6
   1e37c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1e380:	00c9      	lsls	r1, r1, #3
   1e382:	3238      	adds	r2, #56	; 0x38
   1e384:	e7a4      	b.n	1e2d0 <_malloc_r+0x374>
   1e386:	42bc      	cmp	r4, r7
   1e388:	d054      	beq.n	1e434 <_malloc_r+0x4d8>
   1e38a:	68bc      	ldr	r4, [r7, #8]
   1e38c:	6862      	ldr	r2, [r4, #4]
   1e38e:	f022 0203 	bic.w	r2, r2, #3
   1e392:	e75d      	b.n	1e250 <_malloc_r+0x2f4>
   1e394:	f859 3908 	ldr.w	r3, [r9], #-8
   1e398:	4599      	cmp	r9, r3
   1e39a:	f040 8086 	bne.w	1e4aa <_malloc_r+0x54e>
   1e39e:	f010 0f03 	tst.w	r0, #3
   1e3a2:	f100 30ff 	add.w	r0, r0, #4294967295
   1e3a6:	d1f5      	bne.n	1e394 <_malloc_r+0x438>
   1e3a8:	687b      	ldr	r3, [r7, #4]
   1e3aa:	ea23 0304 	bic.w	r3, r3, r4
   1e3ae:	607b      	str	r3, [r7, #4]
   1e3b0:	0064      	lsls	r4, r4, #1
   1e3b2:	429c      	cmp	r4, r3
   1e3b4:	f63f aec7 	bhi.w	1e146 <_malloc_r+0x1ea>
   1e3b8:	2c00      	cmp	r4, #0
   1e3ba:	f43f aec4 	beq.w	1e146 <_malloc_r+0x1ea>
   1e3be:	421c      	tst	r4, r3
   1e3c0:	4640      	mov	r0, r8
   1e3c2:	f47f ae3e 	bne.w	1e042 <_malloc_r+0xe6>
   1e3c6:	0064      	lsls	r4, r4, #1
   1e3c8:	421c      	tst	r4, r3
   1e3ca:	f100 0004 	add.w	r0, r0, #4
   1e3ce:	d0fa      	beq.n	1e3c6 <_malloc_r+0x46a>
   1e3d0:	e637      	b.n	1e042 <_malloc_r+0xe6>
   1e3d2:	468c      	mov	ip, r1
   1e3d4:	e78c      	b.n	1e2f0 <_malloc_r+0x394>
   1e3d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1e3da:	d815      	bhi.n	1e408 <_malloc_r+0x4ac>
   1e3dc:	0bf3      	lsrs	r3, r6, #15
   1e3de:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1e3e2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1e3e6:	00c3      	lsls	r3, r0, #3
   1e3e8:	e5da      	b.n	1dfa0 <_malloc_r+0x44>
   1e3ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e3ee:	e6ed      	b.n	1e1cc <_malloc_r+0x270>
   1e3f0:	687b      	ldr	r3, [r7, #4]
   1e3f2:	1092      	asrs	r2, r2, #2
   1e3f4:	2101      	movs	r1, #1
   1e3f6:	fa01 f202 	lsl.w	r2, r1, r2
   1e3fa:	4313      	orrs	r3, r2
   1e3fc:	607b      	str	r3, [r7, #4]
   1e3fe:	4662      	mov	r2, ip
   1e400:	e779      	b.n	1e2f6 <_malloc_r+0x39a>
   1e402:	2301      	movs	r3, #1
   1e404:	6053      	str	r3, [r2, #4]
   1e406:	e729      	b.n	1e25c <_malloc_r+0x300>
   1e408:	f240 5254 	movw	r2, #1364	; 0x554
   1e40c:	4293      	cmp	r3, r2
   1e40e:	d822      	bhi.n	1e456 <_malloc_r+0x4fa>
   1e410:	0cb3      	lsrs	r3, r6, #18
   1e412:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1e416:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1e41a:	00c3      	lsls	r3, r0, #3
   1e41c:	e5c0      	b.n	1dfa0 <_malloc_r+0x44>
   1e41e:	f103 0b10 	add.w	fp, r3, #16
   1e422:	e6ae      	b.n	1e182 <_malloc_r+0x226>
   1e424:	2a54      	cmp	r2, #84	; 0x54
   1e426:	d829      	bhi.n	1e47c <_malloc_r+0x520>
   1e428:	0b1a      	lsrs	r2, r3, #12
   1e42a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1e42e:	00c9      	lsls	r1, r1, #3
   1e430:	326e      	adds	r2, #110	; 0x6e
   1e432:	e74d      	b.n	1e2d0 <_malloc_r+0x374>
   1e434:	4b20      	ldr	r3, [pc, #128]	; (1e4b8 <_malloc_r+0x55c>)
   1e436:	6819      	ldr	r1, [r3, #0]
   1e438:	4459      	add	r1, fp
   1e43a:	6019      	str	r1, [r3, #0]
   1e43c:	e6b2      	b.n	1e1a4 <_malloc_r+0x248>
   1e43e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1e442:	2800      	cmp	r0, #0
   1e444:	f47f aeae 	bne.w	1e1a4 <_malloc_r+0x248>
   1e448:	eb08 030b 	add.w	r3, r8, fp
   1e44c:	68ba      	ldr	r2, [r7, #8]
   1e44e:	f043 0301 	orr.w	r3, r3, #1
   1e452:	6053      	str	r3, [r2, #4]
   1e454:	e6ee      	b.n	1e234 <_malloc_r+0x2d8>
   1e456:	207f      	movs	r0, #127	; 0x7f
   1e458:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1e45c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1e460:	e59e      	b.n	1dfa0 <_malloc_r+0x44>
   1e462:	f104 0108 	add.w	r1, r4, #8
   1e466:	4628      	mov	r0, r5
   1e468:	9300      	str	r3, [sp, #0]
   1e46a:	f001 ff91 	bl	20390 <_free_r>
   1e46e:	9b00      	ldr	r3, [sp, #0]
   1e470:	6819      	ldr	r1, [r3, #0]
   1e472:	e6df      	b.n	1e234 <_malloc_r+0x2d8>
   1e474:	2001      	movs	r0, #1
   1e476:	f04f 0900 	mov.w	r9, #0
   1e47a:	e6bc      	b.n	1e1f6 <_malloc_r+0x29a>
   1e47c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e480:	d805      	bhi.n	1e48e <_malloc_r+0x532>
   1e482:	0bda      	lsrs	r2, r3, #15
   1e484:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1e488:	00c9      	lsls	r1, r1, #3
   1e48a:	3277      	adds	r2, #119	; 0x77
   1e48c:	e720      	b.n	1e2d0 <_malloc_r+0x374>
   1e48e:	f240 5154 	movw	r1, #1364	; 0x554
   1e492:	428a      	cmp	r2, r1
   1e494:	d805      	bhi.n	1e4a2 <_malloc_r+0x546>
   1e496:	0c9a      	lsrs	r2, r3, #18
   1e498:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1e49c:	00c9      	lsls	r1, r1, #3
   1e49e:	327c      	adds	r2, #124	; 0x7c
   1e4a0:	e716      	b.n	1e2d0 <_malloc_r+0x374>
   1e4a2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1e4a6:	227e      	movs	r2, #126	; 0x7e
   1e4a8:	e712      	b.n	1e2d0 <_malloc_r+0x374>
   1e4aa:	687b      	ldr	r3, [r7, #4]
   1e4ac:	e780      	b.n	1e3b0 <_malloc_r+0x454>
   1e4ae:	08f0      	lsrs	r0, r6, #3
   1e4b0:	f106 0308 	add.w	r3, r6, #8
   1e4b4:	e600      	b.n	1e0b8 <_malloc_r+0x15c>
   1e4b6:	bf00      	nop
   1e4b8:	2000a52c 	.word	0x2000a52c
   1e4bc:	00000000 	.word	0x00000000

0001e4c0 <memchr>:
   1e4c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e4c4:	2a10      	cmp	r2, #16
   1e4c6:	db2b      	blt.n	1e520 <memchr+0x60>
   1e4c8:	f010 0f07 	tst.w	r0, #7
   1e4cc:	d008      	beq.n	1e4e0 <memchr+0x20>
   1e4ce:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e4d2:	3a01      	subs	r2, #1
   1e4d4:	428b      	cmp	r3, r1
   1e4d6:	d02d      	beq.n	1e534 <memchr+0x74>
   1e4d8:	f010 0f07 	tst.w	r0, #7
   1e4dc:	b342      	cbz	r2, 1e530 <memchr+0x70>
   1e4de:	d1f6      	bne.n	1e4ce <memchr+0xe>
   1e4e0:	b4f0      	push	{r4, r5, r6, r7}
   1e4e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1e4e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1e4ea:	f022 0407 	bic.w	r4, r2, #7
   1e4ee:	f07f 0700 	mvns.w	r7, #0
   1e4f2:	2300      	movs	r3, #0
   1e4f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1e4f8:	3c08      	subs	r4, #8
   1e4fa:	ea85 0501 	eor.w	r5, r5, r1
   1e4fe:	ea86 0601 	eor.w	r6, r6, r1
   1e502:	fa85 f547 	uadd8	r5, r5, r7
   1e506:	faa3 f587 	sel	r5, r3, r7
   1e50a:	fa86 f647 	uadd8	r6, r6, r7
   1e50e:	faa5 f687 	sel	r6, r5, r7
   1e512:	b98e      	cbnz	r6, 1e538 <memchr+0x78>
   1e514:	d1ee      	bne.n	1e4f4 <memchr+0x34>
   1e516:	bcf0      	pop	{r4, r5, r6, r7}
   1e518:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e51c:	f002 0207 	and.w	r2, r2, #7
   1e520:	b132      	cbz	r2, 1e530 <memchr+0x70>
   1e522:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e526:	3a01      	subs	r2, #1
   1e528:	ea83 0301 	eor.w	r3, r3, r1
   1e52c:	b113      	cbz	r3, 1e534 <memchr+0x74>
   1e52e:	d1f8      	bne.n	1e522 <memchr+0x62>
   1e530:	2000      	movs	r0, #0
   1e532:	4770      	bx	lr
   1e534:	3801      	subs	r0, #1
   1e536:	4770      	bx	lr
   1e538:	2d00      	cmp	r5, #0
   1e53a:	bf06      	itte	eq
   1e53c:	4635      	moveq	r5, r6
   1e53e:	3803      	subeq	r0, #3
   1e540:	3807      	subne	r0, #7
   1e542:	f015 0f01 	tst.w	r5, #1
   1e546:	d107      	bne.n	1e558 <memchr+0x98>
   1e548:	3001      	adds	r0, #1
   1e54a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1e54e:	bf02      	ittt	eq
   1e550:	3001      	addeq	r0, #1
   1e552:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1e556:	3001      	addeq	r0, #1
   1e558:	bcf0      	pop	{r4, r5, r6, r7}
   1e55a:	3801      	subs	r0, #1
   1e55c:	4770      	bx	lr
   1e55e:	bf00      	nop

0001e560 <__malloc_lock>:
   1e560:	4801      	ldr	r0, [pc, #4]	; (1e568 <__malloc_lock+0x8>)
   1e562:	f7ff bcf5 	b.w	1df50 <__retarget_lock_acquire_recursive>
   1e566:	bf00      	nop
   1e568:	2000a820 	.word	0x2000a820

0001e56c <__malloc_unlock>:
   1e56c:	4801      	ldr	r0, [pc, #4]	; (1e574 <__malloc_unlock+0x8>)
   1e56e:	f7ff bcf3 	b.w	1df58 <__retarget_lock_release_recursive>
   1e572:	bf00      	nop
   1e574:	2000a820 	.word	0x2000a820

0001e578 <_sbrk_r>:
   1e578:	b538      	push	{r3, r4, r5, lr}
   1e57a:	4c07      	ldr	r4, [pc, #28]	; (1e598 <_sbrk_r+0x20>)
   1e57c:	2300      	movs	r3, #0
   1e57e:	4605      	mov	r5, r0
   1e580:	4608      	mov	r0, r1
   1e582:	6023      	str	r3, [r4, #0]
   1e584:	f7f6 f847 	bl	14616 <_sbrk>
   1e588:	1c43      	adds	r3, r0, #1
   1e58a:	d000      	beq.n	1e58e <_sbrk_r+0x16>
   1e58c:	bd38      	pop	{r3, r4, r5, pc}
   1e58e:	6823      	ldr	r3, [r4, #0]
   1e590:	2b00      	cmp	r3, #0
   1e592:	d0fb      	beq.n	1e58c <_sbrk_r+0x14>
   1e594:	602b      	str	r3, [r5, #0]
   1e596:	bd38      	pop	{r3, r4, r5, pc}
   1e598:	2000a834 	.word	0x2000a834

0001e59c <siprintf>:
   1e59c:	b40e      	push	{r1, r2, r3}
   1e59e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5a0:	b09c      	sub	sp, #112	; 0x70
   1e5a2:	ab21      	add	r3, sp, #132	; 0x84
   1e5a4:	490f      	ldr	r1, [pc, #60]	; (1e5e4 <siprintf+0x48>)
   1e5a6:	f853 2b04 	ldr.w	r2, [r3], #4
   1e5aa:	9301      	str	r3, [sp, #4]
   1e5ac:	4605      	mov	r5, r0
   1e5ae:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1e5b2:	6808      	ldr	r0, [r1, #0]
   1e5b4:	9502      	str	r5, [sp, #8]
   1e5b6:	f44f 7702 	mov.w	r7, #520	; 0x208
   1e5ba:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1e5be:	a902      	add	r1, sp, #8
   1e5c0:	9506      	str	r5, [sp, #24]
   1e5c2:	f8ad 7014 	strh.w	r7, [sp, #20]
   1e5c6:	9404      	str	r4, [sp, #16]
   1e5c8:	9407      	str	r4, [sp, #28]
   1e5ca:	f8ad 6016 	strh.w	r6, [sp, #22]
   1e5ce:	f000 fbaf 	bl	1ed30 <_svfiprintf_r>
   1e5d2:	9b02      	ldr	r3, [sp, #8]
   1e5d4:	2200      	movs	r2, #0
   1e5d6:	701a      	strb	r2, [r3, #0]
   1e5d8:	b01c      	add	sp, #112	; 0x70
   1e5da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1e5de:	b003      	add	sp, #12
   1e5e0:	4770      	bx	lr
   1e5e2:	bf00      	nop
   1e5e4:	20000248 	.word	0x20000248

0001e5e8 <siscanf>:
   1e5e8:	b40e      	push	{r1, r2, r3}
   1e5ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5ec:	b09c      	sub	sp, #112	; 0x70
   1e5ee:	ac21      	add	r4, sp, #132	; 0x84
   1e5f0:	f44f 7201 	mov.w	r2, #516	; 0x204
   1e5f4:	f854 6b04 	ldr.w	r6, [r4], #4
   1e5f8:	f8ad 2014 	strh.w	r2, [sp, #20]
   1e5fc:	9002      	str	r0, [sp, #8]
   1e5fe:	9006      	str	r0, [sp, #24]
   1e600:	f7fe ffde 	bl	1d5c0 <strlen>
   1e604:	4b0c      	ldr	r3, [pc, #48]	; (1e638 <siscanf+0x50>)
   1e606:	9401      	str	r4, [sp, #4]
   1e608:	4605      	mov	r5, r0
   1e60a:	4632      	mov	r2, r6
   1e60c:	4f0b      	ldr	r7, [pc, #44]	; (1e63c <siscanf+0x54>)
   1e60e:	6818      	ldr	r0, [r3, #0]
   1e610:	9503      	str	r5, [sp, #12]
   1e612:	4623      	mov	r3, r4
   1e614:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1e618:	2400      	movs	r4, #0
   1e61a:	a902      	add	r1, sp, #8
   1e61c:	9507      	str	r5, [sp, #28]
   1e61e:	970a      	str	r7, [sp, #40]	; 0x28
   1e620:	940e      	str	r4, [sp, #56]	; 0x38
   1e622:	9413      	str	r4, [sp, #76]	; 0x4c
   1e624:	f8ad 6016 	strh.w	r6, [sp, #22]
   1e628:	f001 f94a 	bl	1f8c0 <__ssvfiscanf_r>
   1e62c:	b01c      	add	sp, #112	; 0x70
   1e62e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1e632:	b003      	add	sp, #12
   1e634:	4770      	bx	lr
   1e636:	bf00      	nop
   1e638:	20000248 	.word	0x20000248
   1e63c:	0001e641 	.word	0x0001e641

0001e640 <__seofread>:
   1e640:	2000      	movs	r0, #0
   1e642:	4770      	bx	lr
	...
   1e660:	eba2 0003 	sub.w	r0, r2, r3
   1e664:	4770      	bx	lr
   1e666:	bf00      	nop

0001e668 <strcmp>:
   1e668:	7802      	ldrb	r2, [r0, #0]
   1e66a:	780b      	ldrb	r3, [r1, #0]
   1e66c:	2a01      	cmp	r2, #1
   1e66e:	bf28      	it	cs
   1e670:	429a      	cmpcs	r2, r3
   1e672:	d1f5      	bne.n	1e660 <__seofread+0x20>
   1e674:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1e678:	ea40 0401 	orr.w	r4, r0, r1
   1e67c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1e680:	f06f 0c00 	mvn.w	ip, #0
   1e684:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1e688:	b312      	cbz	r2, 1e6d0 <strcmp+0x68>
   1e68a:	ea80 0401 	eor.w	r4, r0, r1
   1e68e:	f014 0f07 	tst.w	r4, #7
   1e692:	d16a      	bne.n	1e76a <strcmp+0x102>
   1e694:	f000 0407 	and.w	r4, r0, #7
   1e698:	f020 0007 	bic.w	r0, r0, #7
   1e69c:	f004 0503 	and.w	r5, r4, #3
   1e6a0:	f021 0107 	bic.w	r1, r1, #7
   1e6a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1e6a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1e6ac:	f014 0f04 	tst.w	r4, #4
   1e6b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1e6b4:	fa0c f405 	lsl.w	r4, ip, r5
   1e6b8:	ea62 0204 	orn	r2, r2, r4
   1e6bc:	ea66 0604 	orn	r6, r6, r4
   1e6c0:	d00a      	beq.n	1e6d8 <strcmp+0x70>
   1e6c2:	ea63 0304 	orn	r3, r3, r4
   1e6c6:	4662      	mov	r2, ip
   1e6c8:	ea67 0704 	orn	r7, r7, r4
   1e6cc:	4666      	mov	r6, ip
   1e6ce:	e003      	b.n	1e6d8 <strcmp+0x70>
   1e6d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1e6d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1e6d8:	fa82 f54c 	uadd8	r5, r2, ip
   1e6dc:	ea82 0406 	eor.w	r4, r2, r6
   1e6e0:	faa4 f48c 	sel	r4, r4, ip
   1e6e4:	bb6c      	cbnz	r4, 1e742 <strcmp+0xda>
   1e6e6:	fa83 f54c 	uadd8	r5, r3, ip
   1e6ea:	ea83 0507 	eor.w	r5, r3, r7
   1e6ee:	faa5 f58c 	sel	r5, r5, ip
   1e6f2:	b995      	cbnz	r5, 1e71a <strcmp+0xb2>
   1e6f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1e6f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1e6fc:	fa82 f54c 	uadd8	r5, r2, ip
   1e700:	ea82 0406 	eor.w	r4, r2, r6
   1e704:	faa4 f48c 	sel	r4, r4, ip
   1e708:	fa83 f54c 	uadd8	r5, r3, ip
   1e70c:	ea83 0507 	eor.w	r5, r3, r7
   1e710:	faa5 f58c 	sel	r5, r5, ip
   1e714:	4325      	orrs	r5, r4
   1e716:	d0db      	beq.n	1e6d0 <strcmp+0x68>
   1e718:	b99c      	cbnz	r4, 1e742 <strcmp+0xda>
   1e71a:	ba2d      	rev	r5, r5
   1e71c:	fab5 f485 	clz	r4, r5
   1e720:	f024 0407 	bic.w	r4, r4, #7
   1e724:	fa27 f104 	lsr.w	r1, r7, r4
   1e728:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1e72c:	fa23 f304 	lsr.w	r3, r3, r4
   1e730:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1e734:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e738:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e73c:	eba0 0001 	sub.w	r0, r0, r1
   1e740:	4770      	bx	lr
   1e742:	ba24      	rev	r4, r4
   1e744:	fab4 f484 	clz	r4, r4
   1e748:	f024 0407 	bic.w	r4, r4, #7
   1e74c:	fa26 f104 	lsr.w	r1, r6, r4
   1e750:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1e754:	fa22 f204 	lsr.w	r2, r2, r4
   1e758:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1e75c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e760:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e764:	eba0 0001 	sub.w	r0, r0, r1
   1e768:	4770      	bx	lr
   1e76a:	f014 0f03 	tst.w	r4, #3
   1e76e:	d13c      	bne.n	1e7ea <strcmp+0x182>
   1e770:	f010 0403 	ands.w	r4, r0, #3
   1e774:	d128      	bne.n	1e7c8 <strcmp+0x160>
   1e776:	f850 2b08 	ldr.w	r2, [r0], #8
   1e77a:	f851 3b08 	ldr.w	r3, [r1], #8
   1e77e:	fa82 f54c 	uadd8	r5, r2, ip
   1e782:	ea82 0503 	eor.w	r5, r2, r3
   1e786:	faa5 f58c 	sel	r5, r5, ip
   1e78a:	b95d      	cbnz	r5, 1e7a4 <strcmp+0x13c>
   1e78c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1e790:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1e794:	fa82 f54c 	uadd8	r5, r2, ip
   1e798:	ea82 0503 	eor.w	r5, r2, r3
   1e79c:	faa5 f58c 	sel	r5, r5, ip
   1e7a0:	2d00      	cmp	r5, #0
   1e7a2:	d0e8      	beq.n	1e776 <strcmp+0x10e>
   1e7a4:	ba2d      	rev	r5, r5
   1e7a6:	fab5 f485 	clz	r4, r5
   1e7aa:	f024 0407 	bic.w	r4, r4, #7
   1e7ae:	fa23 f104 	lsr.w	r1, r3, r4
   1e7b2:	fa22 f204 	lsr.w	r2, r2, r4
   1e7b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1e7ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e7be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e7c2:	eba0 0001 	sub.w	r0, r0, r1
   1e7c6:	4770      	bx	lr
   1e7c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1e7cc:	f020 0003 	bic.w	r0, r0, #3
   1e7d0:	f850 2b08 	ldr.w	r2, [r0], #8
   1e7d4:	f021 0103 	bic.w	r1, r1, #3
   1e7d8:	f851 3b08 	ldr.w	r3, [r1], #8
   1e7dc:	fa0c f404 	lsl.w	r4, ip, r4
   1e7e0:	ea62 0204 	orn	r2, r2, r4
   1e7e4:	ea63 0304 	orn	r3, r3, r4
   1e7e8:	e7c9      	b.n	1e77e <strcmp+0x116>
   1e7ea:	f010 0403 	ands.w	r4, r0, #3
   1e7ee:	d01a      	beq.n	1e826 <strcmp+0x1be>
   1e7f0:	eba1 0104 	sub.w	r1, r1, r4
   1e7f4:	f020 0003 	bic.w	r0, r0, #3
   1e7f8:	07e4      	lsls	r4, r4, #31
   1e7fa:	f850 2b04 	ldr.w	r2, [r0], #4
   1e7fe:	d006      	beq.n	1e80e <strcmp+0x1a6>
   1e800:	d20f      	bcs.n	1e822 <strcmp+0x1ba>
   1e802:	788b      	ldrb	r3, [r1, #2]
   1e804:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1e808:	1ae4      	subs	r4, r4, r3
   1e80a:	d106      	bne.n	1e81a <strcmp+0x1b2>
   1e80c:	b12b      	cbz	r3, 1e81a <strcmp+0x1b2>
   1e80e:	78cb      	ldrb	r3, [r1, #3]
   1e810:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1e814:	1ae4      	subs	r4, r4, r3
   1e816:	d100      	bne.n	1e81a <strcmp+0x1b2>
   1e818:	b91b      	cbnz	r3, 1e822 <strcmp+0x1ba>
   1e81a:	4620      	mov	r0, r4
   1e81c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1e820:	4770      	bx	lr
   1e822:	f101 0104 	add.w	r1, r1, #4
   1e826:	f850 2b04 	ldr.w	r2, [r0], #4
   1e82a:	07cc      	lsls	r4, r1, #31
   1e82c:	f021 0103 	bic.w	r1, r1, #3
   1e830:	f851 3b04 	ldr.w	r3, [r1], #4
   1e834:	d848      	bhi.n	1e8c8 <strcmp+0x260>
   1e836:	d224      	bcs.n	1e882 <strcmp+0x21a>
   1e838:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1e83c:	fa82 f54c 	uadd8	r5, r2, ip
   1e840:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1e844:	faa5 f58c 	sel	r5, r5, ip
   1e848:	d10a      	bne.n	1e860 <strcmp+0x1f8>
   1e84a:	b965      	cbnz	r5, 1e866 <strcmp+0x1fe>
   1e84c:	f851 3b04 	ldr.w	r3, [r1], #4
   1e850:	ea84 0402 	eor.w	r4, r4, r2
   1e854:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1e858:	d10e      	bne.n	1e878 <strcmp+0x210>
   1e85a:	f850 2b04 	ldr.w	r2, [r0], #4
   1e85e:	e7eb      	b.n	1e838 <strcmp+0x1d0>
   1e860:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1e864:	e055      	b.n	1e912 <strcmp+0x2aa>
   1e866:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1e86a:	d14d      	bne.n	1e908 <strcmp+0x2a0>
   1e86c:	7808      	ldrb	r0, [r1, #0]
   1e86e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e872:	f1c0 0000 	rsb	r0, r0, #0
   1e876:	4770      	bx	lr
   1e878:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1e87c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1e880:	e047      	b.n	1e912 <strcmp+0x2aa>
   1e882:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1e886:	fa82 f54c 	uadd8	r5, r2, ip
   1e88a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1e88e:	faa5 f58c 	sel	r5, r5, ip
   1e892:	d10a      	bne.n	1e8aa <strcmp+0x242>
   1e894:	b965      	cbnz	r5, 1e8b0 <strcmp+0x248>
   1e896:	f851 3b04 	ldr.w	r3, [r1], #4
   1e89a:	ea84 0402 	eor.w	r4, r4, r2
   1e89e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1e8a2:	d10c      	bne.n	1e8be <strcmp+0x256>
   1e8a4:	f850 2b04 	ldr.w	r2, [r0], #4
   1e8a8:	e7eb      	b.n	1e882 <strcmp+0x21a>
   1e8aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1e8ae:	e030      	b.n	1e912 <strcmp+0x2aa>
   1e8b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1e8b4:	d128      	bne.n	1e908 <strcmp+0x2a0>
   1e8b6:	880b      	ldrh	r3, [r1, #0]
   1e8b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1e8bc:	e029      	b.n	1e912 <strcmp+0x2aa>
   1e8be:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1e8c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1e8c6:	e024      	b.n	1e912 <strcmp+0x2aa>
   1e8c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1e8cc:	fa82 f54c 	uadd8	r5, r2, ip
   1e8d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1e8d4:	faa5 f58c 	sel	r5, r5, ip
   1e8d8:	d10a      	bne.n	1e8f0 <strcmp+0x288>
   1e8da:	b965      	cbnz	r5, 1e8f6 <strcmp+0x28e>
   1e8dc:	f851 3b04 	ldr.w	r3, [r1], #4
   1e8e0:	ea84 0402 	eor.w	r4, r4, r2
   1e8e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1e8e8:	d109      	bne.n	1e8fe <strcmp+0x296>
   1e8ea:	f850 2b04 	ldr.w	r2, [r0], #4
   1e8ee:	e7eb      	b.n	1e8c8 <strcmp+0x260>
   1e8f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1e8f4:	e00d      	b.n	1e912 <strcmp+0x2aa>
   1e8f6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1e8fa:	d105      	bne.n	1e908 <strcmp+0x2a0>
   1e8fc:	680b      	ldr	r3, [r1, #0]
   1e8fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1e902:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e906:	e004      	b.n	1e912 <strcmp+0x2aa>
   1e908:	f04f 0000 	mov.w	r0, #0
   1e90c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e910:	4770      	bx	lr
   1e912:	ba12      	rev	r2, r2
   1e914:	ba1b      	rev	r3, r3
   1e916:	fa82 f44c 	uadd8	r4, r2, ip
   1e91a:	ea82 0403 	eor.w	r4, r2, r3
   1e91e:	faa4 f58c 	sel	r5, r4, ip
   1e922:	fab5 f485 	clz	r4, r5
   1e926:	fa02 f204 	lsl.w	r2, r2, r4
   1e92a:	fa03 f304 	lsl.w	r3, r3, r4
   1e92e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1e932:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e936:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1e93a:	4770      	bx	lr

0001e93c <strcpy>:
   1e93c:	ea80 0201 	eor.w	r2, r0, r1
   1e940:	4684      	mov	ip, r0
   1e942:	f012 0f03 	tst.w	r2, #3
   1e946:	d14f      	bne.n	1e9e8 <strcpy+0xac>
   1e948:	f011 0f03 	tst.w	r1, #3
   1e94c:	d132      	bne.n	1e9b4 <strcpy+0x78>
   1e94e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1e952:	f011 0f04 	tst.w	r1, #4
   1e956:	f851 3b04 	ldr.w	r3, [r1], #4
   1e95a:	d00b      	beq.n	1e974 <strcpy+0x38>
   1e95c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1e960:	439a      	bics	r2, r3
   1e962:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1e966:	bf04      	itt	eq
   1e968:	f84c 3b04 	streq.w	r3, [ip], #4
   1e96c:	f851 3b04 	ldreq.w	r3, [r1], #4
   1e970:	d116      	bne.n	1e9a0 <strcpy+0x64>
   1e972:	bf00      	nop
   1e974:	f851 4b04 	ldr.w	r4, [r1], #4
   1e978:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1e97c:	439a      	bics	r2, r3
   1e97e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1e982:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1e986:	d10b      	bne.n	1e9a0 <strcpy+0x64>
   1e988:	f84c 3b04 	str.w	r3, [ip], #4
   1e98c:	43a2      	bics	r2, r4
   1e98e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1e992:	bf04      	itt	eq
   1e994:	f851 3b04 	ldreq.w	r3, [r1], #4
   1e998:	f84c 4b04 	streq.w	r4, [ip], #4
   1e99c:	d0ea      	beq.n	1e974 <strcpy+0x38>
   1e99e:	4623      	mov	r3, r4
   1e9a0:	f80c 3b01 	strb.w	r3, [ip], #1
   1e9a4:	f013 0fff 	tst.w	r3, #255	; 0xff
   1e9a8:	ea4f 2333 	mov.w	r3, r3, ror #8
   1e9ac:	d1f8      	bne.n	1e9a0 <strcpy+0x64>
   1e9ae:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e9b2:	4770      	bx	lr
   1e9b4:	f011 0f01 	tst.w	r1, #1
   1e9b8:	d006      	beq.n	1e9c8 <strcpy+0x8c>
   1e9ba:	f811 2b01 	ldrb.w	r2, [r1], #1
   1e9be:	f80c 2b01 	strb.w	r2, [ip], #1
   1e9c2:	2a00      	cmp	r2, #0
   1e9c4:	bf08      	it	eq
   1e9c6:	4770      	bxeq	lr
   1e9c8:	f011 0f02 	tst.w	r1, #2
   1e9cc:	d0bf      	beq.n	1e94e <strcpy+0x12>
   1e9ce:	f831 2b02 	ldrh.w	r2, [r1], #2
   1e9d2:	f012 0fff 	tst.w	r2, #255	; 0xff
   1e9d6:	bf16      	itet	ne
   1e9d8:	f82c 2b02 	strhne.w	r2, [ip], #2
   1e9dc:	f88c 2000 	strbeq.w	r2, [ip]
   1e9e0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1e9e4:	d1b3      	bne.n	1e94e <strcpy+0x12>
   1e9e6:	4770      	bx	lr
   1e9e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   1e9ec:	f80c 2b01 	strb.w	r2, [ip], #1
   1e9f0:	2a00      	cmp	r2, #0
   1e9f2:	d1f9      	bne.n	1e9e8 <strcpy+0xac>
   1e9f4:	4770      	bx	lr
   1e9f6:	bf00      	nop

0001e9f8 <strncmp>:
   1e9f8:	2a00      	cmp	r2, #0
   1e9fa:	d041      	beq.n	1ea80 <strncmp+0x88>
   1e9fc:	ea40 0301 	orr.w	r3, r0, r1
   1ea00:	f013 0303 	ands.w	r3, r3, #3
   1ea04:	b4f0      	push	{r4, r5, r6, r7}
   1ea06:	d125      	bne.n	1ea54 <strncmp+0x5c>
   1ea08:	2a03      	cmp	r2, #3
   1ea0a:	d923      	bls.n	1ea54 <strncmp+0x5c>
   1ea0c:	6804      	ldr	r4, [r0, #0]
   1ea0e:	680d      	ldr	r5, [r1, #0]
   1ea10:	42ac      	cmp	r4, r5
   1ea12:	d11f      	bne.n	1ea54 <strncmp+0x5c>
   1ea14:	3a04      	subs	r2, #4
   1ea16:	d038      	beq.n	1ea8a <strncmp+0x92>
   1ea18:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1ea1c:	ea25 0404 	bic.w	r4, r5, r4
   1ea20:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ea24:	d12e      	bne.n	1ea84 <strncmp+0x8c>
   1ea26:	3004      	adds	r0, #4
   1ea28:	3104      	adds	r1, #4
   1ea2a:	e00f      	b.n	1ea4c <strncmp+0x54>
   1ea2c:	f850 3b04 	ldr.w	r3, [r0], #4
   1ea30:	680e      	ldr	r6, [r1, #0]
   1ea32:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1ea36:	42b3      	cmp	r3, r6
   1ea38:	ea24 0403 	bic.w	r4, r4, r3
   1ea3c:	f101 0104 	add.w	r1, r1, #4
   1ea40:	d126      	bne.n	1ea90 <strncmp+0x98>
   1ea42:	3a04      	subs	r2, #4
   1ea44:	d021      	beq.n	1ea8a <strncmp+0x92>
   1ea46:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ea4a:	d11b      	bne.n	1ea84 <strncmp+0x8c>
   1ea4c:	2a03      	cmp	r2, #3
   1ea4e:	4607      	mov	r7, r0
   1ea50:	460d      	mov	r5, r1
   1ea52:	d8eb      	bhi.n	1ea2c <strncmp+0x34>
   1ea54:	7805      	ldrb	r5, [r0, #0]
   1ea56:	780c      	ldrb	r4, [r1, #0]
   1ea58:	42ac      	cmp	r4, r5
   1ea5a:	f102 33ff 	add.w	r3, r2, #4294967295
   1ea5e:	d11a      	bne.n	1ea96 <strncmp+0x9e>
   1ea60:	b183      	cbz	r3, 1ea84 <strncmp+0x8c>
   1ea62:	b914      	cbnz	r4, 1ea6a <strncmp+0x72>
   1ea64:	e00e      	b.n	1ea84 <strncmp+0x8c>
   1ea66:	b16b      	cbz	r3, 1ea84 <strncmp+0x8c>
   1ea68:	b17a      	cbz	r2, 1ea8a <strncmp+0x92>
   1ea6a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1ea6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1ea72:	42a2      	cmp	r2, r4
   1ea74:	f103 33ff 	add.w	r3, r3, #4294967295
   1ea78:	d0f5      	beq.n	1ea66 <strncmp+0x6e>
   1ea7a:	1b10      	subs	r0, r2, r4
   1ea7c:	bcf0      	pop	{r4, r5, r6, r7}
   1ea7e:	4770      	bx	lr
   1ea80:	4610      	mov	r0, r2
   1ea82:	4770      	bx	lr
   1ea84:	2000      	movs	r0, #0
   1ea86:	bcf0      	pop	{r4, r5, r6, r7}
   1ea88:	4770      	bx	lr
   1ea8a:	4610      	mov	r0, r2
   1ea8c:	bcf0      	pop	{r4, r5, r6, r7}
   1ea8e:	4770      	bx	lr
   1ea90:	4629      	mov	r1, r5
   1ea92:	4638      	mov	r0, r7
   1ea94:	e7de      	b.n	1ea54 <strncmp+0x5c>
   1ea96:	462a      	mov	r2, r5
   1ea98:	e7ef      	b.n	1ea7a <strncmp+0x82>
   1ea9a:	bf00      	nop

0001ea9c <_strtoul_l.isra.0>:
   1ea9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eaa0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1eaa4:	460e      	mov	r6, r1
   1eaa6:	4607      	mov	r7, r0
   1eaa8:	4615      	mov	r5, r2
   1eaaa:	4698      	mov	r8, r3
   1eaac:	468a      	mov	sl, r1
   1eaae:	e000      	b.n	1eab2 <_strtoul_l.isra.0+0x16>
   1eab0:	46a2      	mov	sl, r4
   1eab2:	4654      	mov	r4, sl
   1eab4:	4648      	mov	r0, r9
   1eab6:	f814 bb01 	ldrb.w	fp, [r4], #1
   1eaba:	f001 fd6b 	bl	20594 <__locale_ctype_ptr_l>
   1eabe:	4458      	add	r0, fp
   1eac0:	7840      	ldrb	r0, [r0, #1]
   1eac2:	f010 0008 	ands.w	r0, r0, #8
   1eac6:	d1f3      	bne.n	1eab0 <_strtoul_l.isra.0+0x14>
   1eac8:	4659      	mov	r1, fp
   1eaca:	292d      	cmp	r1, #45	; 0x2d
   1eacc:	d059      	beq.n	1eb82 <_strtoul_l.isra.0+0xe6>
   1eace:	292b      	cmp	r1, #43	; 0x2b
   1ead0:	bf04      	itt	eq
   1ead2:	7821      	ldrbeq	r1, [r4, #0]
   1ead4:	f10a 0402 	addeq.w	r4, sl, #2
   1ead8:	f1b8 0f00 	cmp.w	r8, #0
   1eadc:	d00c      	beq.n	1eaf8 <_strtoul_l.isra.0+0x5c>
   1eade:	f1b8 0f10 	cmp.w	r8, #16
   1eae2:	d053      	beq.n	1eb8c <_strtoul_l.isra.0+0xf0>
   1eae4:	f04f 3cff 	mov.w	ip, #4294967295
   1eae8:	fbbc fcf8 	udiv	ip, ip, r8
   1eaec:	fb08 fa0c 	mul.w	sl, r8, ip
   1eaf0:	ea6f 0a0a 	mvn.w	sl, sl
   1eaf4:	46c1      	mov	r9, r8
   1eaf6:	e008      	b.n	1eb0a <_strtoul_l.isra.0+0x6e>
   1eaf8:	2930      	cmp	r1, #48	; 0x30
   1eafa:	d058      	beq.n	1ebae <_strtoul_l.isra.0+0x112>
   1eafc:	f04f 080a 	mov.w	r8, #10
   1eb00:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 1ebe0 <_strtoul_l.isra.0+0x144>
   1eb04:	46c1      	mov	r9, r8
   1eb06:	f04f 0a05 	mov.w	sl, #5
   1eb0a:	2300      	movs	r3, #0
   1eb0c:	469e      	mov	lr, r3
   1eb0e:	e005      	b.n	1eb1c <_strtoul_l.isra.0+0x80>
   1eb10:	d02a      	beq.n	1eb68 <_strtoul_l.isra.0+0xcc>
   1eb12:	fb09 2e0e 	mla	lr, r9, lr, r2
   1eb16:	2301      	movs	r3, #1
   1eb18:	f814 1b01 	ldrb.w	r1, [r4], #1
   1eb1c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1eb20:	2a09      	cmp	r2, #9
   1eb22:	d905      	bls.n	1eb30 <_strtoul_l.isra.0+0x94>
   1eb24:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1eb28:	2a19      	cmp	r2, #25
   1eb2a:	d80a      	bhi.n	1eb42 <_strtoul_l.isra.0+0xa6>
   1eb2c:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   1eb30:	4590      	cmp	r8, r2
   1eb32:	dd0e      	ble.n	1eb52 <_strtoul_l.isra.0+0xb6>
   1eb34:	2b00      	cmp	r3, #0
   1eb36:	db01      	blt.n	1eb3c <_strtoul_l.isra.0+0xa0>
   1eb38:	45e6      	cmp	lr, ip
   1eb3a:	d9e9      	bls.n	1eb10 <_strtoul_l.isra.0+0x74>
   1eb3c:	f04f 33ff 	mov.w	r3, #4294967295
   1eb40:	e7ea      	b.n	1eb18 <_strtoul_l.isra.0+0x7c>
   1eb42:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1eb46:	2a19      	cmp	r2, #25
   1eb48:	d803      	bhi.n	1eb52 <_strtoul_l.isra.0+0xb6>
   1eb4a:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   1eb4e:	4590      	cmp	r8, r2
   1eb50:	dcf0      	bgt.n	1eb34 <_strtoul_l.isra.0+0x98>
   1eb52:	2b00      	cmp	r3, #0
   1eb54:	db0d      	blt.n	1eb72 <_strtoul_l.isra.0+0xd6>
   1eb56:	b108      	cbz	r0, 1eb5c <_strtoul_l.isra.0+0xc0>
   1eb58:	f1ce 0e00 	rsb	lr, lr, #0
   1eb5c:	b10d      	cbz	r5, 1eb62 <_strtoul_l.isra.0+0xc6>
   1eb5e:	b973      	cbnz	r3, 1eb7e <_strtoul_l.isra.0+0xe2>
   1eb60:	602e      	str	r6, [r5, #0]
   1eb62:	4670      	mov	r0, lr
   1eb64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb68:	4552      	cmp	r2, sl
   1eb6a:	ddd2      	ble.n	1eb12 <_strtoul_l.isra.0+0x76>
   1eb6c:	f04f 33ff 	mov.w	r3, #4294967295
   1eb70:	e7d2      	b.n	1eb18 <_strtoul_l.isra.0+0x7c>
   1eb72:	2322      	movs	r3, #34	; 0x22
   1eb74:	603b      	str	r3, [r7, #0]
   1eb76:	f04f 3eff 	mov.w	lr, #4294967295
   1eb7a:	2d00      	cmp	r5, #0
   1eb7c:	d0f1      	beq.n	1eb62 <_strtoul_l.isra.0+0xc6>
   1eb7e:	1e66      	subs	r6, r4, #1
   1eb80:	e7ee      	b.n	1eb60 <_strtoul_l.isra.0+0xc4>
   1eb82:	7821      	ldrb	r1, [r4, #0]
   1eb84:	2001      	movs	r0, #1
   1eb86:	f10a 0402 	add.w	r4, sl, #2
   1eb8a:	e7a5      	b.n	1ead8 <_strtoul_l.isra.0+0x3c>
   1eb8c:	2930      	cmp	r1, #48	; 0x30
   1eb8e:	d11b      	bne.n	1ebc8 <_strtoul_l.isra.0+0x12c>
   1eb90:	7823      	ldrb	r3, [r4, #0]
   1eb92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1eb96:	2b58      	cmp	r3, #88	; 0x58
   1eb98:	d11c      	bne.n	1ebd4 <_strtoul_l.isra.0+0x138>
   1eb9a:	f04f 0910 	mov.w	r9, #16
   1eb9e:	7861      	ldrb	r1, [r4, #1]
   1eba0:	46c8      	mov	r8, r9
   1eba2:	f04f 0a0f 	mov.w	sl, #15
   1eba6:	3402      	adds	r4, #2
   1eba8:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1ebac:	e7ad      	b.n	1eb0a <_strtoul_l.isra.0+0x6e>
   1ebae:	7823      	ldrb	r3, [r4, #0]
   1ebb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ebb4:	2b58      	cmp	r3, #88	; 0x58
   1ebb6:	d0f0      	beq.n	1eb9a <_strtoul_l.isra.0+0xfe>
   1ebb8:	f04f 0808 	mov.w	r8, #8
   1ebbc:	46c1      	mov	r9, r8
   1ebbe:	f04f 0a07 	mov.w	sl, #7
   1ebc2:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   1ebc6:	e7a0      	b.n	1eb0a <_strtoul_l.isra.0+0x6e>
   1ebc8:	f04f 0a0f 	mov.w	sl, #15
   1ebcc:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1ebd0:	46c1      	mov	r9, r8
   1ebd2:	e79a      	b.n	1eb0a <_strtoul_l.isra.0+0x6e>
   1ebd4:	46c1      	mov	r9, r8
   1ebd6:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1ebda:	f04f 0a0f 	mov.w	sl, #15
   1ebde:	e794      	b.n	1eb0a <_strtoul_l.isra.0+0x6e>
   1ebe0:	19999999 	.word	0x19999999

0001ebe4 <_strtoul_r>:
   1ebe4:	b530      	push	{r4, r5, lr}
   1ebe6:	4c06      	ldr	r4, [pc, #24]	; (1ec00 <_strtoul_r+0x1c>)
   1ebe8:	4d06      	ldr	r5, [pc, #24]	; (1ec04 <_strtoul_r+0x20>)
   1ebea:	6824      	ldr	r4, [r4, #0]
   1ebec:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1ebee:	b083      	sub	sp, #12
   1ebf0:	2c00      	cmp	r4, #0
   1ebf2:	bf08      	it	eq
   1ebf4:	462c      	moveq	r4, r5
   1ebf6:	9400      	str	r4, [sp, #0]
   1ebf8:	f7ff ff50 	bl	1ea9c <_strtoul_l.isra.0>
   1ebfc:	b003      	add	sp, #12
   1ebfe:	bd30      	pop	{r4, r5, pc}
   1ec00:	20000248 	.word	0x20000248
   1ec04:	20000ad8 	.word	0x20000ad8

0001ec08 <strtoul>:
   1ec08:	b530      	push	{r4, r5, lr}
   1ec0a:	4c08      	ldr	r4, [pc, #32]	; (1ec2c <strtoul+0x24>)
   1ec0c:	4b08      	ldr	r3, [pc, #32]	; (1ec30 <strtoul+0x28>)
   1ec0e:	6825      	ldr	r5, [r4, #0]
   1ec10:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   1ec12:	b083      	sub	sp, #12
   1ec14:	2c00      	cmp	r4, #0
   1ec16:	bf08      	it	eq
   1ec18:	461c      	moveq	r4, r3
   1ec1a:	9400      	str	r4, [sp, #0]
   1ec1c:	4613      	mov	r3, r2
   1ec1e:	460a      	mov	r2, r1
   1ec20:	4601      	mov	r1, r0
   1ec22:	4628      	mov	r0, r5
   1ec24:	f7ff ff3a 	bl	1ea9c <_strtoul_l.isra.0>
   1ec28:	b003      	add	sp, #12
   1ec2a:	bd30      	pop	{r4, r5, pc}
   1ec2c:	20000248 	.word	0x20000248
   1ec30:	20000ad8 	.word	0x20000ad8

0001ec34 <__ssprint_r>:
   1ec34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec38:	6893      	ldr	r3, [r2, #8]
   1ec3a:	b083      	sub	sp, #12
   1ec3c:	4690      	mov	r8, r2
   1ec3e:	2b00      	cmp	r3, #0
   1ec40:	d070      	beq.n	1ed24 <__ssprint_r+0xf0>
   1ec42:	4682      	mov	sl, r0
   1ec44:	460c      	mov	r4, r1
   1ec46:	6817      	ldr	r7, [r2, #0]
   1ec48:	688d      	ldr	r5, [r1, #8]
   1ec4a:	6808      	ldr	r0, [r1, #0]
   1ec4c:	e042      	b.n	1ecd4 <__ssprint_r+0xa0>
   1ec4e:	89a3      	ldrh	r3, [r4, #12]
   1ec50:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1ec54:	d02e      	beq.n	1ecb4 <__ssprint_r+0x80>
   1ec56:	6965      	ldr	r5, [r4, #20]
   1ec58:	6921      	ldr	r1, [r4, #16]
   1ec5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1ec5e:	eba0 0b01 	sub.w	fp, r0, r1
   1ec62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1ec66:	f10b 0001 	add.w	r0, fp, #1
   1ec6a:	106d      	asrs	r5, r5, #1
   1ec6c:	4430      	add	r0, r6
   1ec6e:	42a8      	cmp	r0, r5
   1ec70:	462a      	mov	r2, r5
   1ec72:	bf84      	itt	hi
   1ec74:	4605      	movhi	r5, r0
   1ec76:	462a      	movhi	r2, r5
   1ec78:	055b      	lsls	r3, r3, #21
   1ec7a:	d538      	bpl.n	1ecee <__ssprint_r+0xba>
   1ec7c:	4611      	mov	r1, r2
   1ec7e:	4650      	mov	r0, sl
   1ec80:	f7ff f96c 	bl	1df5c <_malloc_r>
   1ec84:	2800      	cmp	r0, #0
   1ec86:	d03c      	beq.n	1ed02 <__ssprint_r+0xce>
   1ec88:	465a      	mov	r2, fp
   1ec8a:	6921      	ldr	r1, [r4, #16]
   1ec8c:	9001      	str	r0, [sp, #4]
   1ec8e:	f7fe fb75 	bl	1d37c <memcpy>
   1ec92:	89a2      	ldrh	r2, [r4, #12]
   1ec94:	9b01      	ldr	r3, [sp, #4]
   1ec96:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1ec9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1ec9e:	81a2      	strh	r2, [r4, #12]
   1eca0:	eba5 020b 	sub.w	r2, r5, fp
   1eca4:	eb03 000b 	add.w	r0, r3, fp
   1eca8:	6165      	str	r5, [r4, #20]
   1ecaa:	6123      	str	r3, [r4, #16]
   1ecac:	6020      	str	r0, [r4, #0]
   1ecae:	60a2      	str	r2, [r4, #8]
   1ecb0:	4635      	mov	r5, r6
   1ecb2:	46b3      	mov	fp, r6
   1ecb4:	465a      	mov	r2, fp
   1ecb6:	4649      	mov	r1, r9
   1ecb8:	f001 fcc2 	bl	20640 <memmove>
   1ecbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1ecc0:	68a2      	ldr	r2, [r4, #8]
   1ecc2:	6820      	ldr	r0, [r4, #0]
   1ecc4:	1b55      	subs	r5, r2, r5
   1ecc6:	4458      	add	r0, fp
   1ecc8:	1b9e      	subs	r6, r3, r6
   1ecca:	60a5      	str	r5, [r4, #8]
   1eccc:	6020      	str	r0, [r4, #0]
   1ecce:	f8c8 6008 	str.w	r6, [r8, #8]
   1ecd2:	b33e      	cbz	r6, 1ed24 <__ssprint_r+0xf0>
   1ecd4:	687e      	ldr	r6, [r7, #4]
   1ecd6:	463b      	mov	r3, r7
   1ecd8:	3708      	adds	r7, #8
   1ecda:	2e00      	cmp	r6, #0
   1ecdc:	d0fa      	beq.n	1ecd4 <__ssprint_r+0xa0>
   1ecde:	42ae      	cmp	r6, r5
   1ece0:	f8d3 9000 	ldr.w	r9, [r3]
   1ece4:	46ab      	mov	fp, r5
   1ece6:	d2b2      	bcs.n	1ec4e <__ssprint_r+0x1a>
   1ece8:	4635      	mov	r5, r6
   1ecea:	46b3      	mov	fp, r6
   1ecec:	e7e2      	b.n	1ecb4 <__ssprint_r+0x80>
   1ecee:	4650      	mov	r0, sl
   1ecf0:	f001 fd0a 	bl	20708 <_realloc_r>
   1ecf4:	4603      	mov	r3, r0
   1ecf6:	2800      	cmp	r0, #0
   1ecf8:	d1d2      	bne.n	1eca0 <__ssprint_r+0x6c>
   1ecfa:	6921      	ldr	r1, [r4, #16]
   1ecfc:	4650      	mov	r0, sl
   1ecfe:	f001 fb47 	bl	20390 <_free_r>
   1ed02:	230c      	movs	r3, #12
   1ed04:	f8ca 3000 	str.w	r3, [sl]
   1ed08:	89a3      	ldrh	r3, [r4, #12]
   1ed0a:	2200      	movs	r2, #0
   1ed0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ed10:	f04f 30ff 	mov.w	r0, #4294967295
   1ed14:	81a3      	strh	r3, [r4, #12]
   1ed16:	f8c8 2008 	str.w	r2, [r8, #8]
   1ed1a:	f8c8 2004 	str.w	r2, [r8, #4]
   1ed1e:	b003      	add	sp, #12
   1ed20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed24:	2000      	movs	r0, #0
   1ed26:	f8c8 0004 	str.w	r0, [r8, #4]
   1ed2a:	b003      	add	sp, #12
   1ed2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ed30 <_svfiprintf_r>:
   1ed30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed34:	b0ad      	sub	sp, #180	; 0xb4
   1ed36:	460c      	mov	r4, r1
   1ed38:	9105      	str	r1, [sp, #20]
   1ed3a:	8989      	ldrh	r1, [r1, #12]
   1ed3c:	9307      	str	r3, [sp, #28]
   1ed3e:	060d      	lsls	r5, r1, #24
   1ed40:	900a      	str	r0, [sp, #40]	; 0x28
   1ed42:	d503      	bpl.n	1ed4c <_svfiprintf_r+0x1c>
   1ed44:	6923      	ldr	r3, [r4, #16]
   1ed46:	2b00      	cmp	r3, #0
   1ed48:	f000 84d6 	beq.w	1f6f8 <_svfiprintf_r+0x9c8>
   1ed4c:	2300      	movs	r3, #0
   1ed4e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   1ed52:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1ed54:	930b      	str	r3, [sp, #44]	; 0x2c
   1ed56:	4693      	mov	fp, r2
   1ed58:	9311      	str	r3, [sp, #68]	; 0x44
   1ed5a:	9310      	str	r3, [sp, #64]	; 0x40
   1ed5c:	9302      	str	r3, [sp, #8]
   1ed5e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   1ed62:	46d1      	mov	r9, sl
   1ed64:	f89b 3000 	ldrb.w	r3, [fp]
   1ed68:	465c      	mov	r4, fp
   1ed6a:	b1eb      	cbz	r3, 1eda8 <_svfiprintf_r+0x78>
   1ed6c:	2b25      	cmp	r3, #37	; 0x25
   1ed6e:	d102      	bne.n	1ed76 <_svfiprintf_r+0x46>
   1ed70:	e01a      	b.n	1eda8 <_svfiprintf_r+0x78>
   1ed72:	2b25      	cmp	r3, #37	; 0x25
   1ed74:	d003      	beq.n	1ed7e <_svfiprintf_r+0x4e>
   1ed76:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ed7a:	2b00      	cmp	r3, #0
   1ed7c:	d1f9      	bne.n	1ed72 <_svfiprintf_r+0x42>
   1ed7e:	eba4 050b 	sub.w	r5, r4, fp
   1ed82:	b18d      	cbz	r5, 1eda8 <_svfiprintf_r+0x78>
   1ed84:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ed86:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1ed88:	f8c9 b000 	str.w	fp, [r9]
   1ed8c:	3301      	adds	r3, #1
   1ed8e:	442a      	add	r2, r5
   1ed90:	2b07      	cmp	r3, #7
   1ed92:	f8c9 5004 	str.w	r5, [r9, #4]
   1ed96:	9211      	str	r2, [sp, #68]	; 0x44
   1ed98:	9310      	str	r3, [sp, #64]	; 0x40
   1ed9a:	f300 83c3 	bgt.w	1f524 <_svfiprintf_r+0x7f4>
   1ed9e:	f109 0908 	add.w	r9, r9, #8
   1eda2:	9b02      	ldr	r3, [sp, #8]
   1eda4:	442b      	add	r3, r5
   1eda6:	9302      	str	r3, [sp, #8]
   1eda8:	7823      	ldrb	r3, [r4, #0]
   1edaa:	2b00      	cmp	r3, #0
   1edac:	f000 834b 	beq.w	1f446 <_svfiprintf_r+0x716>
   1edb0:	2000      	movs	r0, #0
   1edb2:	f04f 0300 	mov.w	r3, #0
   1edb6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1edba:	f104 0b01 	add.w	fp, r4, #1
   1edbe:	7862      	ldrb	r2, [r4, #1]
   1edc0:	4605      	mov	r5, r0
   1edc2:	4603      	mov	r3, r0
   1edc4:	f04f 38ff 	mov.w	r8, #4294967295
   1edc8:	4604      	mov	r4, r0
   1edca:	f10b 0b01 	add.w	fp, fp, #1
   1edce:	f1a2 0120 	sub.w	r1, r2, #32
   1edd2:	2958      	cmp	r1, #88	; 0x58
   1edd4:	f200 826b 	bhi.w	1f2ae <_svfiprintf_r+0x57e>
   1edd8:	e8df f011 	tbh	[pc, r1, lsl #1]
   1eddc:	026900bd 	.word	0x026900bd
   1ede0:	00b80269 	.word	0x00b80269
   1ede4:	02690269 	.word	0x02690269
   1ede8:	02690269 	.word	0x02690269
   1edec:	02690269 	.word	0x02690269
   1edf0:	00b30059 	.word	0x00b30059
   1edf4:	00630269 	.word	0x00630269
   1edf8:	026901c0 	.word	0x026901c0
   1edfc:	01ad01bb 	.word	0x01ad01bb
   1ee00:	01ad01ad 	.word	0x01ad01ad
   1ee04:	01ad01ad 	.word	0x01ad01ad
   1ee08:	01ad01ad 	.word	0x01ad01ad
   1ee0c:	01ad01ad 	.word	0x01ad01ad
   1ee10:	02690269 	.word	0x02690269
   1ee14:	02690269 	.word	0x02690269
   1ee18:	02690269 	.word	0x02690269
   1ee1c:	02690269 	.word	0x02690269
   1ee20:	02690269 	.word	0x02690269
   1ee24:	0269015f 	.word	0x0269015f
   1ee28:	02690269 	.word	0x02690269
   1ee2c:	02690269 	.word	0x02690269
   1ee30:	02690269 	.word	0x02690269
   1ee34:	02690269 	.word	0x02690269
   1ee38:	014d0269 	.word	0x014d0269
   1ee3c:	02690269 	.word	0x02690269
   1ee40:	02690269 	.word	0x02690269
   1ee44:	013c0269 	.word	0x013c0269
   1ee48:	02690269 	.word	0x02690269
   1ee4c:	02690125 	.word	0x02690125
   1ee50:	02690269 	.word	0x02690269
   1ee54:	02690269 	.word	0x02690269
   1ee58:	02690269 	.word	0x02690269
   1ee5c:	02690269 	.word	0x02690269
   1ee60:	00c50269 	.word	0x00c50269
   1ee64:	02690200 	.word	0x02690200
   1ee68:	02690269 	.word	0x02690269
   1ee6c:	020001fb 	.word	0x020001fb
   1ee70:	02690269 	.word	0x02690269
   1ee74:	026901ee 	.word	0x026901ee
   1ee78:	007a01da 	.word	0x007a01da
   1ee7c:	02310236 	.word	0x02310236
   1ee80:	020e0269 	.word	0x020e0269
   1ee84:	00680269 	.word	0x00680269
   1ee88:	02690269 	.word	0x02690269
   1ee8c:	008f      	.short	0x008f
   1ee8e:	9907      	ldr	r1, [sp, #28]
   1ee90:	680c      	ldr	r4, [r1, #0]
   1ee92:	460a      	mov	r2, r1
   1ee94:	2c00      	cmp	r4, #0
   1ee96:	f102 0204 	add.w	r2, r2, #4
   1ee9a:	f280 83c9 	bge.w	1f630 <_svfiprintf_r+0x900>
   1ee9e:	4264      	negs	r4, r4
   1eea0:	9207      	str	r2, [sp, #28]
   1eea2:	f043 0304 	orr.w	r3, r3, #4
   1eea6:	f89b 2000 	ldrb.w	r2, [fp]
   1eeaa:	e78e      	b.n	1edca <_svfiprintf_r+0x9a>
   1eeac:	9406      	str	r4, [sp, #24]
   1eeae:	069c      	lsls	r4, r3, #26
   1eeb0:	f100 80d6 	bmi.w	1f060 <_svfiprintf_r+0x330>
   1eeb4:	9907      	ldr	r1, [sp, #28]
   1eeb6:	06d8      	lsls	r0, r3, #27
   1eeb8:	460a      	mov	r2, r1
   1eeba:	f100 820a 	bmi.w	1f2d2 <_svfiprintf_r+0x5a2>
   1eebe:	065e      	lsls	r6, r3, #25
   1eec0:	f140 8207 	bpl.w	1f2d2 <_svfiprintf_r+0x5a2>
   1eec4:	880c      	ldrh	r4, [r1, #0]
   1eec6:	3104      	adds	r1, #4
   1eec8:	2500      	movs	r5, #0
   1eeca:	2201      	movs	r2, #1
   1eecc:	9107      	str	r1, [sp, #28]
   1eece:	e1cc      	b.n	1f26a <_svfiprintf_r+0x53a>
   1eed0:	f013 0220 	ands.w	r2, r3, #32
   1eed4:	9406      	str	r4, [sp, #24]
   1eed6:	f040 80d5 	bne.w	1f084 <_svfiprintf_r+0x354>
   1eeda:	f013 0110 	ands.w	r1, r3, #16
   1eede:	f040 81fe 	bne.w	1f2de <_svfiprintf_r+0x5ae>
   1eee2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   1eee6:	f000 81fa 	beq.w	1f2de <_svfiprintf_r+0x5ae>
   1eeea:	9807      	ldr	r0, [sp, #28]
   1eeec:	460a      	mov	r2, r1
   1eeee:	4601      	mov	r1, r0
   1eef0:	3104      	adds	r1, #4
   1eef2:	8804      	ldrh	r4, [r0, #0]
   1eef4:	9107      	str	r1, [sp, #28]
   1eef6:	2500      	movs	r5, #0
   1eef8:	e1b7      	b.n	1f26a <_svfiprintf_r+0x53a>
   1eefa:	9406      	str	r4, [sp, #24]
   1eefc:	2800      	cmp	r0, #0
   1eefe:	f040 8431 	bne.w	1f764 <_svfiprintf_r+0xa34>
   1ef02:	49ba      	ldr	r1, [pc, #744]	; (1f1ec <_svfiprintf_r+0x4bc>)
   1ef04:	910b      	str	r1, [sp, #44]	; 0x2c
   1ef06:	069d      	lsls	r5, r3, #26
   1ef08:	f100 8096 	bmi.w	1f038 <_svfiprintf_r+0x308>
   1ef0c:	9807      	ldr	r0, [sp, #28]
   1ef0e:	06dc      	lsls	r4, r3, #27
   1ef10:	4601      	mov	r1, r0
   1ef12:	d402      	bmi.n	1ef1a <_svfiprintf_r+0x1ea>
   1ef14:	0658      	lsls	r0, r3, #25
   1ef16:	f100 83a9 	bmi.w	1f66c <_svfiprintf_r+0x93c>
   1ef1a:	680c      	ldr	r4, [r1, #0]
   1ef1c:	3104      	adds	r1, #4
   1ef1e:	9107      	str	r1, [sp, #28]
   1ef20:	2500      	movs	r5, #0
   1ef22:	07d9      	lsls	r1, r3, #31
   1ef24:	f140 8094 	bpl.w	1f050 <_svfiprintf_r+0x320>
   1ef28:	ea54 0105 	orrs.w	r1, r4, r5
   1ef2c:	f000 8090 	beq.w	1f050 <_svfiprintf_r+0x320>
   1ef30:	2130      	movs	r1, #48	; 0x30
   1ef32:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1ef36:	f043 0302 	orr.w	r3, r3, #2
   1ef3a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1ef3e:	2202      	movs	r2, #2
   1ef40:	e193      	b.n	1f26a <_svfiprintf_r+0x53a>
   1ef42:	f89b 2000 	ldrb.w	r2, [fp]
   1ef46:	2001      	movs	r0, #1
   1ef48:	252b      	movs	r5, #43	; 0x2b
   1ef4a:	e73e      	b.n	1edca <_svfiprintf_r+0x9a>
   1ef4c:	f043 0301 	orr.w	r3, r3, #1
   1ef50:	f89b 2000 	ldrb.w	r2, [fp]
   1ef54:	e739      	b.n	1edca <_svfiprintf_r+0x9a>
   1ef56:	f89b 2000 	ldrb.w	r2, [fp]
   1ef5a:	2d00      	cmp	r5, #0
   1ef5c:	f47f af35 	bne.w	1edca <_svfiprintf_r+0x9a>
   1ef60:	2001      	movs	r0, #1
   1ef62:	2520      	movs	r5, #32
   1ef64:	e731      	b.n	1edca <_svfiprintf_r+0x9a>
   1ef66:	9907      	ldr	r1, [sp, #28]
   1ef68:	9406      	str	r4, [sp, #24]
   1ef6a:	680a      	ldr	r2, [r1, #0]
   1ef6c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1ef70:	f04f 0000 	mov.w	r0, #0
   1ef74:	460a      	mov	r2, r1
   1ef76:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1ef7a:	3204      	adds	r2, #4
   1ef7c:	2001      	movs	r0, #1
   1ef7e:	9000      	str	r0, [sp, #0]
   1ef80:	9207      	str	r2, [sp, #28]
   1ef82:	9004      	str	r0, [sp, #16]
   1ef84:	ae12      	add	r6, sp, #72	; 0x48
   1ef86:	9301      	str	r3, [sp, #4]
   1ef88:	f04f 0800 	mov.w	r8, #0
   1ef8c:	9b01      	ldr	r3, [sp, #4]
   1ef8e:	f013 0302 	ands.w	r3, r3, #2
   1ef92:	9308      	str	r3, [sp, #32]
   1ef94:	d002      	beq.n	1ef9c <_svfiprintf_r+0x26c>
   1ef96:	9b00      	ldr	r3, [sp, #0]
   1ef98:	3302      	adds	r3, #2
   1ef9a:	9300      	str	r3, [sp, #0]
   1ef9c:	9b01      	ldr	r3, [sp, #4]
   1ef9e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   1efa2:	9309      	str	r3, [sp, #36]	; 0x24
   1efa4:	f040 81a2 	bne.w	1f2ec <_svfiprintf_r+0x5bc>
   1efa8:	9b06      	ldr	r3, [sp, #24]
   1efaa:	9a00      	ldr	r2, [sp, #0]
   1efac:	1a9c      	subs	r4, r3, r2
   1efae:	2c00      	cmp	r4, #0
   1efb0:	f340 819c 	ble.w	1f2ec <_svfiprintf_r+0x5bc>
   1efb4:	2c10      	cmp	r4, #16
   1efb6:	9911      	ldr	r1, [sp, #68]	; 0x44
   1efb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1efba:	4d8d      	ldr	r5, [pc, #564]	; (1f1f0 <_svfiprintf_r+0x4c0>)
   1efbc:	dd25      	ble.n	1f00a <_svfiprintf_r+0x2da>
   1efbe:	4648      	mov	r0, r9
   1efc0:	2310      	movs	r3, #16
   1efc2:	46c1      	mov	r9, r8
   1efc4:	46b0      	mov	r8, r6
   1efc6:	9e05      	ldr	r6, [sp, #20]
   1efc8:	e004      	b.n	1efd4 <_svfiprintf_r+0x2a4>
   1efca:	3c10      	subs	r4, #16
   1efcc:	2c10      	cmp	r4, #16
   1efce:	f100 0008 	add.w	r0, r0, #8
   1efd2:	dd17      	ble.n	1f004 <_svfiprintf_r+0x2d4>
   1efd4:	3201      	adds	r2, #1
   1efd6:	3110      	adds	r1, #16
   1efd8:	2a07      	cmp	r2, #7
   1efda:	9111      	str	r1, [sp, #68]	; 0x44
   1efdc:	9210      	str	r2, [sp, #64]	; 0x40
   1efde:	6005      	str	r5, [r0, #0]
   1efe0:	6043      	str	r3, [r0, #4]
   1efe2:	ddf2      	ble.n	1efca <_svfiprintf_r+0x29a>
   1efe4:	aa0f      	add	r2, sp, #60	; 0x3c
   1efe6:	4631      	mov	r1, r6
   1efe8:	4638      	mov	r0, r7
   1efea:	9303      	str	r3, [sp, #12]
   1efec:	f7ff fe22 	bl	1ec34 <__ssprint_r>
   1eff0:	2800      	cmp	r0, #0
   1eff2:	f040 822f 	bne.w	1f454 <_svfiprintf_r+0x724>
   1eff6:	3c10      	subs	r4, #16
   1eff8:	2c10      	cmp	r4, #16
   1effa:	9911      	ldr	r1, [sp, #68]	; 0x44
   1effc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1effe:	9b03      	ldr	r3, [sp, #12]
   1f000:	4650      	mov	r0, sl
   1f002:	dce7      	bgt.n	1efd4 <_svfiprintf_r+0x2a4>
   1f004:	4646      	mov	r6, r8
   1f006:	46c8      	mov	r8, r9
   1f008:	4681      	mov	r9, r0
   1f00a:	1c53      	adds	r3, r2, #1
   1f00c:	4421      	add	r1, r4
   1f00e:	2b07      	cmp	r3, #7
   1f010:	9111      	str	r1, [sp, #68]	; 0x44
   1f012:	9310      	str	r3, [sp, #64]	; 0x40
   1f014:	f8c9 5000 	str.w	r5, [r9]
   1f018:	f8c9 4004 	str.w	r4, [r9, #4]
   1f01c:	f300 82f2 	bgt.w	1f604 <_svfiprintf_r+0x8d4>
   1f020:	f109 0908 	add.w	r9, r9, #8
   1f024:	e164      	b.n	1f2f0 <_svfiprintf_r+0x5c0>
   1f026:	9406      	str	r4, [sp, #24]
   1f028:	2800      	cmp	r0, #0
   1f02a:	f040 83a5 	bne.w	1f778 <_svfiprintf_r+0xa48>
   1f02e:	4971      	ldr	r1, [pc, #452]	; (1f1f4 <_svfiprintf_r+0x4c4>)
   1f030:	910b      	str	r1, [sp, #44]	; 0x2c
   1f032:	069d      	lsls	r5, r3, #26
   1f034:	f57f af6a 	bpl.w	1ef0c <_svfiprintf_r+0x1dc>
   1f038:	9c07      	ldr	r4, [sp, #28]
   1f03a:	3407      	adds	r4, #7
   1f03c:	f024 0107 	bic.w	r1, r4, #7
   1f040:	f101 0008 	add.w	r0, r1, #8
   1f044:	e9d1 4500 	ldrd	r4, r5, [r1]
   1f048:	07d9      	lsls	r1, r3, #31
   1f04a:	9007      	str	r0, [sp, #28]
   1f04c:	f53f af6c 	bmi.w	1ef28 <_svfiprintf_r+0x1f8>
   1f050:	2202      	movs	r2, #2
   1f052:	e10a      	b.n	1f26a <_svfiprintf_r+0x53a>
   1f054:	f043 0310 	orr.w	r3, r3, #16
   1f058:	9406      	str	r4, [sp, #24]
   1f05a:	069c      	lsls	r4, r3, #26
   1f05c:	f57f af2a 	bpl.w	1eeb4 <_svfiprintf_r+0x184>
   1f060:	9c07      	ldr	r4, [sp, #28]
   1f062:	3407      	adds	r4, #7
   1f064:	f024 0207 	bic.w	r2, r4, #7
   1f068:	f102 0108 	add.w	r1, r2, #8
   1f06c:	e9d2 4500 	ldrd	r4, r5, [r2]
   1f070:	9107      	str	r1, [sp, #28]
   1f072:	2201      	movs	r2, #1
   1f074:	e0f9      	b.n	1f26a <_svfiprintf_r+0x53a>
   1f076:	f043 0310 	orr.w	r3, r3, #16
   1f07a:	f013 0220 	ands.w	r2, r3, #32
   1f07e:	9406      	str	r4, [sp, #24]
   1f080:	f43f af2b 	beq.w	1eeda <_svfiprintf_r+0x1aa>
   1f084:	9c07      	ldr	r4, [sp, #28]
   1f086:	3407      	adds	r4, #7
   1f088:	f024 0207 	bic.w	r2, r4, #7
   1f08c:	f102 0108 	add.w	r1, r2, #8
   1f090:	e9d2 4500 	ldrd	r4, r5, [r2]
   1f094:	9107      	str	r1, [sp, #28]
   1f096:	2200      	movs	r2, #0
   1f098:	e0e7      	b.n	1f26a <_svfiprintf_r+0x53a>
   1f09a:	9406      	str	r4, [sp, #24]
   1f09c:	2800      	cmp	r0, #0
   1f09e:	f040 8365 	bne.w	1f76c <_svfiprintf_r+0xa3c>
   1f0a2:	f043 0310 	orr.w	r3, r3, #16
   1f0a6:	069c      	lsls	r4, r3, #26
   1f0a8:	f100 82fa 	bmi.w	1f6a0 <_svfiprintf_r+0x970>
   1f0ac:	06d8      	lsls	r0, r3, #27
   1f0ae:	d402      	bmi.n	1f0b6 <_svfiprintf_r+0x386>
   1f0b0:	0659      	lsls	r1, r3, #25
   1f0b2:	f100 82c4 	bmi.w	1f63e <_svfiprintf_r+0x90e>
   1f0b6:	9907      	ldr	r1, [sp, #28]
   1f0b8:	680c      	ldr	r4, [r1, #0]
   1f0ba:	460a      	mov	r2, r1
   1f0bc:	17e5      	asrs	r5, r4, #31
   1f0be:	3204      	adds	r2, #4
   1f0c0:	9207      	str	r2, [sp, #28]
   1f0c2:	4620      	mov	r0, r4
   1f0c4:	4629      	mov	r1, r5
   1f0c6:	2800      	cmp	r0, #0
   1f0c8:	f171 0200 	sbcs.w	r2, r1, #0
   1f0cc:	f2c0 82c5 	blt.w	1f65a <_svfiprintf_r+0x92a>
   1f0d0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1f0d4:	9203      	str	r2, [sp, #12]
   1f0d6:	f1b8 3fff 	cmp.w	r8, #4294967295
   1f0da:	f04f 0201 	mov.w	r2, #1
   1f0de:	f040 80ce 	bne.w	1f27e <_svfiprintf_r+0x54e>
   1f0e2:	ea54 0105 	orrs.w	r1, r4, r5
   1f0e6:	f000 820d 	beq.w	1f504 <_svfiprintf_r+0x7d4>
   1f0ea:	9301      	str	r3, [sp, #4]
   1f0ec:	2a01      	cmp	r2, #1
   1f0ee:	f000 826b 	beq.w	1f5c8 <_svfiprintf_r+0x898>
   1f0f2:	2a02      	cmp	r2, #2
   1f0f4:	f040 822d 	bne.w	1f552 <_svfiprintf_r+0x822>
   1f0f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1f0fa:	4656      	mov	r6, sl
   1f0fc:	0923      	lsrs	r3, r4, #4
   1f0fe:	f004 010f 	and.w	r1, r4, #15
   1f102:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1f106:	092a      	lsrs	r2, r5, #4
   1f108:	461c      	mov	r4, r3
   1f10a:	4615      	mov	r5, r2
   1f10c:	5c43      	ldrb	r3, [r0, r1]
   1f10e:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1f112:	ea54 0305 	orrs.w	r3, r4, r5
   1f116:	d1f1      	bne.n	1f0fc <_svfiprintf_r+0x3cc>
   1f118:	ebaa 0306 	sub.w	r3, sl, r6
   1f11c:	9304      	str	r3, [sp, #16]
   1f11e:	9b04      	ldr	r3, [sp, #16]
   1f120:	9a03      	ldr	r2, [sp, #12]
   1f122:	4543      	cmp	r3, r8
   1f124:	bfb8      	it	lt
   1f126:	4643      	movlt	r3, r8
   1f128:	9300      	str	r3, [sp, #0]
   1f12a:	2a00      	cmp	r2, #0
   1f12c:	f43f af2e 	beq.w	1ef8c <_svfiprintf_r+0x25c>
   1f130:	3301      	adds	r3, #1
   1f132:	9300      	str	r3, [sp, #0]
   1f134:	e72a      	b.n	1ef8c <_svfiprintf_r+0x25c>
   1f136:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1f13a:	2400      	movs	r4, #0
   1f13c:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1f140:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f144:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   1f148:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1f14c:	2909      	cmp	r1, #9
   1f14e:	d9f5      	bls.n	1f13c <_svfiprintf_r+0x40c>
   1f150:	e63d      	b.n	1edce <_svfiprintf_r+0x9e>
   1f152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f156:	f89b 2000 	ldrb.w	r2, [fp]
   1f15a:	e636      	b.n	1edca <_svfiprintf_r+0x9a>
   1f15c:	f89b 2000 	ldrb.w	r2, [fp]
   1f160:	2a2a      	cmp	r2, #42	; 0x2a
   1f162:	f10b 0601 	add.w	r6, fp, #1
   1f166:	f000 82e7 	beq.w	1f738 <_svfiprintf_r+0xa08>
   1f16a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1f16e:	2909      	cmp	r1, #9
   1f170:	46b3      	mov	fp, r6
   1f172:	f04f 0800 	mov.w	r8, #0
   1f176:	f63f ae2a 	bhi.w	1edce <_svfiprintf_r+0x9e>
   1f17a:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1f17e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1f182:	eb01 0848 	add.w	r8, r1, r8, lsl #1
   1f186:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1f18a:	2909      	cmp	r1, #9
   1f18c:	d9f5      	bls.n	1f17a <_svfiprintf_r+0x44a>
   1f18e:	e61e      	b.n	1edce <_svfiprintf_r+0x9e>
   1f190:	2800      	cmp	r0, #0
   1f192:	f040 82dd 	bne.w	1f750 <_svfiprintf_r+0xa20>
   1f196:	069a      	lsls	r2, r3, #26
   1f198:	f100 8276 	bmi.w	1f688 <_svfiprintf_r+0x958>
   1f19c:	06de      	lsls	r6, r3, #27
   1f19e:	f100 8297 	bmi.w	1f6d0 <_svfiprintf_r+0x9a0>
   1f1a2:	065d      	lsls	r5, r3, #25
   1f1a4:	f140 8294 	bpl.w	1f6d0 <_svfiprintf_r+0x9a0>
   1f1a8:	9a07      	ldr	r2, [sp, #28]
   1f1aa:	6813      	ldr	r3, [r2, #0]
   1f1ac:	3204      	adds	r2, #4
   1f1ae:	9207      	str	r2, [sp, #28]
   1f1b0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1f1b4:	801a      	strh	r2, [r3, #0]
   1f1b6:	e5d5      	b.n	1ed64 <_svfiprintf_r+0x34>
   1f1b8:	f89b 2000 	ldrb.w	r2, [fp]
   1f1bc:	2a6c      	cmp	r2, #108	; 0x6c
   1f1be:	bf03      	ittte	eq
   1f1c0:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
   1f1c4:	f043 0320 	orreq.w	r3, r3, #32
   1f1c8:	f10b 0b01 	addeq.w	fp, fp, #1
   1f1cc:	f043 0310 	orrne.w	r3, r3, #16
   1f1d0:	e5fb      	b.n	1edca <_svfiprintf_r+0x9a>
   1f1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f1d6:	f89b 2000 	ldrb.w	r2, [fp]
   1f1da:	e5f6      	b.n	1edca <_svfiprintf_r+0x9a>
   1f1dc:	9406      	str	r4, [sp, #24]
   1f1de:	2800      	cmp	r0, #0
   1f1e0:	f43f af61 	beq.w	1f0a6 <_svfiprintf_r+0x376>
   1f1e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1f1e8:	e75d      	b.n	1f0a6 <_svfiprintf_r+0x376>
   1f1ea:	bf00      	nop
   1f1ec:	00023618 	.word	0x00023618
   1f1f0:	00023634 	.word	0x00023634
   1f1f4:	00023604 	.word	0x00023604
   1f1f8:	9907      	ldr	r1, [sp, #28]
   1f1fa:	9406      	str	r4, [sp, #24]
   1f1fc:	680e      	ldr	r6, [r1, #0]
   1f1fe:	f04f 0200 	mov.w	r2, #0
   1f202:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1f206:	1d0c      	adds	r4, r1, #4
   1f208:	2e00      	cmp	r6, #0
   1f20a:	f000 8283 	beq.w	1f714 <_svfiprintf_r+0x9e4>
   1f20e:	f1b8 3fff 	cmp.w	r8, #4294967295
   1f212:	f000 8265 	beq.w	1f6e0 <_svfiprintf_r+0x9b0>
   1f216:	4642      	mov	r2, r8
   1f218:	2100      	movs	r1, #0
   1f21a:	4630      	mov	r0, r6
   1f21c:	9300      	str	r3, [sp, #0]
   1f21e:	f7ff f94f 	bl	1e4c0 <memchr>
   1f222:	9b00      	ldr	r3, [sp, #0]
   1f224:	2800      	cmp	r0, #0
   1f226:	f000 827e 	beq.w	1f726 <_svfiprintf_r+0x9f6>
   1f22a:	1b82      	subs	r2, r0, r6
   1f22c:	9301      	str	r3, [sp, #4]
   1f22e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1f232:	9204      	str	r2, [sp, #16]
   1f234:	9407      	str	r4, [sp, #28]
   1f236:	9303      	str	r3, [sp, #12]
   1f238:	f04f 0800 	mov.w	r8, #0
   1f23c:	e76f      	b.n	1f11e <_svfiprintf_r+0x3ee>
   1f23e:	f043 0320 	orr.w	r3, r3, #32
   1f242:	f89b 2000 	ldrb.w	r2, [fp]
   1f246:	e5c0      	b.n	1edca <_svfiprintf_r+0x9a>
   1f248:	9807      	ldr	r0, [sp, #28]
   1f24a:	4ab3      	ldr	r2, [pc, #716]	; (1f518 <_svfiprintf_r+0x7e8>)
   1f24c:	9406      	str	r4, [sp, #24]
   1f24e:	920b      	str	r2, [sp, #44]	; 0x2c
   1f250:	6804      	ldr	r4, [r0, #0]
   1f252:	2278      	movs	r2, #120	; 0x78
   1f254:	2130      	movs	r1, #48	; 0x30
   1f256:	3004      	adds	r0, #4
   1f258:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1f25c:	f043 0302 	orr.w	r3, r3, #2
   1f260:	9007      	str	r0, [sp, #28]
   1f262:	2500      	movs	r5, #0
   1f264:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1f268:	2202      	movs	r2, #2
   1f26a:	f04f 0100 	mov.w	r1, #0
   1f26e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   1f272:	2100      	movs	r1, #0
   1f274:	9103      	str	r1, [sp, #12]
   1f276:	f1b8 3fff 	cmp.w	r8, #4294967295
   1f27a:	f43f af32 	beq.w	1f0e2 <_svfiprintf_r+0x3b2>
   1f27e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   1f282:	9101      	str	r1, [sp, #4]
   1f284:	ea54 0105 	orrs.w	r1, r4, r5
   1f288:	f47f af30 	bne.w	1f0ec <_svfiprintf_r+0x3bc>
   1f28c:	f1b8 0f00 	cmp.w	r8, #0
   1f290:	f040 8137 	bne.w	1f502 <_svfiprintf_r+0x7d2>
   1f294:	2a00      	cmp	r2, #0
   1f296:	f040 81b1 	bne.w	1f5fc <_svfiprintf_r+0x8cc>
   1f29a:	f013 0301 	ands.w	r3, r3, #1
   1f29e:	9304      	str	r3, [sp, #16]
   1f2a0:	f000 81cb 	beq.w	1f63a <_svfiprintf_r+0x90a>
   1f2a4:	ae2c      	add	r6, sp, #176	; 0xb0
   1f2a6:	2330      	movs	r3, #48	; 0x30
   1f2a8:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1f2ac:	e737      	b.n	1f11e <_svfiprintf_r+0x3ee>
   1f2ae:	9406      	str	r4, [sp, #24]
   1f2b0:	2800      	cmp	r0, #0
   1f2b2:	f040 825e 	bne.w	1f772 <_svfiprintf_r+0xa42>
   1f2b6:	2a00      	cmp	r2, #0
   1f2b8:	f000 80c5 	beq.w	1f446 <_svfiprintf_r+0x716>
   1f2bc:	2101      	movs	r1, #1
   1f2be:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1f2c2:	f04f 0200 	mov.w	r2, #0
   1f2c6:	9100      	str	r1, [sp, #0]
   1f2c8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1f2cc:	9104      	str	r1, [sp, #16]
   1f2ce:	ae12      	add	r6, sp, #72	; 0x48
   1f2d0:	e659      	b.n	1ef86 <_svfiprintf_r+0x256>
   1f2d2:	3104      	adds	r1, #4
   1f2d4:	6814      	ldr	r4, [r2, #0]
   1f2d6:	9107      	str	r1, [sp, #28]
   1f2d8:	2201      	movs	r2, #1
   1f2da:	2500      	movs	r5, #0
   1f2dc:	e7c5      	b.n	1f26a <_svfiprintf_r+0x53a>
   1f2de:	9807      	ldr	r0, [sp, #28]
   1f2e0:	4601      	mov	r1, r0
   1f2e2:	3104      	adds	r1, #4
   1f2e4:	6804      	ldr	r4, [r0, #0]
   1f2e6:	9107      	str	r1, [sp, #28]
   1f2e8:	2500      	movs	r5, #0
   1f2ea:	e7be      	b.n	1f26a <_svfiprintf_r+0x53a>
   1f2ec:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f2ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f2f0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1f2f4:	b16a      	cbz	r2, 1f312 <_svfiprintf_r+0x5e2>
   1f2f6:	3301      	adds	r3, #1
   1f2f8:	3101      	adds	r1, #1
   1f2fa:	f10d 0037 	add.w	r0, sp, #55	; 0x37
   1f2fe:	2201      	movs	r2, #1
   1f300:	2b07      	cmp	r3, #7
   1f302:	9111      	str	r1, [sp, #68]	; 0x44
   1f304:	9310      	str	r3, [sp, #64]	; 0x40
   1f306:	e889 0005 	stmia.w	r9, {r0, r2}
   1f30a:	f300 8145 	bgt.w	1f598 <_svfiprintf_r+0x868>
   1f30e:	f109 0908 	add.w	r9, r9, #8
   1f312:	9a08      	ldr	r2, [sp, #32]
   1f314:	b162      	cbz	r2, 1f330 <_svfiprintf_r+0x600>
   1f316:	3301      	adds	r3, #1
   1f318:	3102      	adds	r1, #2
   1f31a:	a80e      	add	r0, sp, #56	; 0x38
   1f31c:	2202      	movs	r2, #2
   1f31e:	2b07      	cmp	r3, #7
   1f320:	9111      	str	r1, [sp, #68]	; 0x44
   1f322:	9310      	str	r3, [sp, #64]	; 0x40
   1f324:	e889 0005 	stmia.w	r9, {r0, r2}
   1f328:	f300 8142 	bgt.w	1f5b0 <_svfiprintf_r+0x880>
   1f32c:	f109 0908 	add.w	r9, r9, #8
   1f330:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f332:	2a80      	cmp	r2, #128	; 0x80
   1f334:	f000 809b 	beq.w	1f46e <_svfiprintf_r+0x73e>
   1f338:	9a04      	ldr	r2, [sp, #16]
   1f33a:	eba8 0502 	sub.w	r5, r8, r2
   1f33e:	2d00      	cmp	r5, #0
   1f340:	dd31      	ble.n	1f3a6 <_svfiprintf_r+0x676>
   1f342:	2d10      	cmp	r5, #16
   1f344:	4c75      	ldr	r4, [pc, #468]	; (1f51c <_svfiprintf_r+0x7ec>)
   1f346:	dd23      	ble.n	1f390 <_svfiprintf_r+0x660>
   1f348:	464a      	mov	r2, r9
   1f34a:	f04f 0810 	mov.w	r8, #16
   1f34e:	46b1      	mov	r9, r6
   1f350:	4626      	mov	r6, r4
   1f352:	9c05      	ldr	r4, [sp, #20]
   1f354:	e004      	b.n	1f360 <_svfiprintf_r+0x630>
   1f356:	3d10      	subs	r5, #16
   1f358:	2d10      	cmp	r5, #16
   1f35a:	f102 0208 	add.w	r2, r2, #8
   1f35e:	dd14      	ble.n	1f38a <_svfiprintf_r+0x65a>
   1f360:	3301      	adds	r3, #1
   1f362:	3110      	adds	r1, #16
   1f364:	2b07      	cmp	r3, #7
   1f366:	9111      	str	r1, [sp, #68]	; 0x44
   1f368:	9310      	str	r3, [sp, #64]	; 0x40
   1f36a:	e882 0140 	stmia.w	r2, {r6, r8}
   1f36e:	ddf2      	ble.n	1f356 <_svfiprintf_r+0x626>
   1f370:	aa0f      	add	r2, sp, #60	; 0x3c
   1f372:	4621      	mov	r1, r4
   1f374:	4638      	mov	r0, r7
   1f376:	f7ff fc5d 	bl	1ec34 <__ssprint_r>
   1f37a:	2800      	cmp	r0, #0
   1f37c:	d16a      	bne.n	1f454 <_svfiprintf_r+0x724>
   1f37e:	3d10      	subs	r5, #16
   1f380:	2d10      	cmp	r5, #16
   1f382:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f384:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f386:	4652      	mov	r2, sl
   1f388:	dcea      	bgt.n	1f360 <_svfiprintf_r+0x630>
   1f38a:	4634      	mov	r4, r6
   1f38c:	464e      	mov	r6, r9
   1f38e:	4691      	mov	r9, r2
   1f390:	3301      	adds	r3, #1
   1f392:	4429      	add	r1, r5
   1f394:	2b07      	cmp	r3, #7
   1f396:	9111      	str	r1, [sp, #68]	; 0x44
   1f398:	9310      	str	r3, [sp, #64]	; 0x40
   1f39a:	e889 0030 	stmia.w	r9, {r4, r5}
   1f39e:	f300 80ca 	bgt.w	1f536 <_svfiprintf_r+0x806>
   1f3a2:	f109 0908 	add.w	r9, r9, #8
   1f3a6:	9804      	ldr	r0, [sp, #16]
   1f3a8:	f8c9 6000 	str.w	r6, [r9]
   1f3ac:	3301      	adds	r3, #1
   1f3ae:	4401      	add	r1, r0
   1f3b0:	2b07      	cmp	r3, #7
   1f3b2:	9111      	str	r1, [sp, #68]	; 0x44
   1f3b4:	9310      	str	r3, [sp, #64]	; 0x40
   1f3b6:	f8c9 0004 	str.w	r0, [r9, #4]
   1f3ba:	f300 8090 	bgt.w	1f4de <_svfiprintf_r+0x7ae>
   1f3be:	f109 0908 	add.w	r9, r9, #8
   1f3c2:	9b01      	ldr	r3, [sp, #4]
   1f3c4:	075b      	lsls	r3, r3, #29
   1f3c6:	d530      	bpl.n	1f42a <_svfiprintf_r+0x6fa>
   1f3c8:	9b06      	ldr	r3, [sp, #24]
   1f3ca:	9a00      	ldr	r2, [sp, #0]
   1f3cc:	1a9c      	subs	r4, r3, r2
   1f3ce:	2c00      	cmp	r4, #0
   1f3d0:	dd2b      	ble.n	1f42a <_svfiprintf_r+0x6fa>
   1f3d2:	2c10      	cmp	r4, #16
   1f3d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f3d6:	4d52      	ldr	r5, [pc, #328]	; (1f520 <_svfiprintf_r+0x7f0>)
   1f3d8:	dd1c      	ble.n	1f414 <_svfiprintf_r+0x6e4>
   1f3da:	2610      	movs	r6, #16
   1f3dc:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1f3e0:	e004      	b.n	1f3ec <_svfiprintf_r+0x6bc>
   1f3e2:	3c10      	subs	r4, #16
   1f3e4:	2c10      	cmp	r4, #16
   1f3e6:	f109 0908 	add.w	r9, r9, #8
   1f3ea:	dd13      	ble.n	1f414 <_svfiprintf_r+0x6e4>
   1f3ec:	3301      	adds	r3, #1
   1f3ee:	3110      	adds	r1, #16
   1f3f0:	2b07      	cmp	r3, #7
   1f3f2:	9111      	str	r1, [sp, #68]	; 0x44
   1f3f4:	9310      	str	r3, [sp, #64]	; 0x40
   1f3f6:	e889 0060 	stmia.w	r9, {r5, r6}
   1f3fa:	ddf2      	ble.n	1f3e2 <_svfiprintf_r+0x6b2>
   1f3fc:	aa0f      	add	r2, sp, #60	; 0x3c
   1f3fe:	4641      	mov	r1, r8
   1f400:	4638      	mov	r0, r7
   1f402:	f7ff fc17 	bl	1ec34 <__ssprint_r>
   1f406:	bb28      	cbnz	r0, 1f454 <_svfiprintf_r+0x724>
   1f408:	3c10      	subs	r4, #16
   1f40a:	2c10      	cmp	r4, #16
   1f40c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f40e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f410:	46d1      	mov	r9, sl
   1f412:	dceb      	bgt.n	1f3ec <_svfiprintf_r+0x6bc>
   1f414:	3301      	adds	r3, #1
   1f416:	4421      	add	r1, r4
   1f418:	2b07      	cmp	r3, #7
   1f41a:	9111      	str	r1, [sp, #68]	; 0x44
   1f41c:	9310      	str	r3, [sp, #64]	; 0x40
   1f41e:	f8c9 5000 	str.w	r5, [r9]
   1f422:	f8c9 4004 	str.w	r4, [r9, #4]
   1f426:	f300 80f9 	bgt.w	1f61c <_svfiprintf_r+0x8ec>
   1f42a:	9b02      	ldr	r3, [sp, #8]
   1f42c:	9a06      	ldr	r2, [sp, #24]
   1f42e:	9800      	ldr	r0, [sp, #0]
   1f430:	4282      	cmp	r2, r0
   1f432:	bfac      	ite	ge
   1f434:	189b      	addge	r3, r3, r2
   1f436:	181b      	addlt	r3, r3, r0
   1f438:	9302      	str	r3, [sp, #8]
   1f43a:	2900      	cmp	r1, #0
   1f43c:	d159      	bne.n	1f4f2 <_svfiprintf_r+0x7c2>
   1f43e:	2300      	movs	r3, #0
   1f440:	9310      	str	r3, [sp, #64]	; 0x40
   1f442:	46d1      	mov	r9, sl
   1f444:	e48e      	b.n	1ed64 <_svfiprintf_r+0x34>
   1f446:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1f448:	b123      	cbz	r3, 1f454 <_svfiprintf_r+0x724>
   1f44a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1f44c:	9905      	ldr	r1, [sp, #20]
   1f44e:	aa0f      	add	r2, sp, #60	; 0x3c
   1f450:	f7ff fbf0 	bl	1ec34 <__ssprint_r>
   1f454:	9b05      	ldr	r3, [sp, #20]
   1f456:	899b      	ldrh	r3, [r3, #12]
   1f458:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f45c:	9b02      	ldr	r3, [sp, #8]
   1f45e:	bf18      	it	ne
   1f460:	f04f 33ff 	movne.w	r3, #4294967295
   1f464:	9302      	str	r3, [sp, #8]
   1f466:	9802      	ldr	r0, [sp, #8]
   1f468:	b02d      	add	sp, #180	; 0xb4
   1f46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f46e:	9a06      	ldr	r2, [sp, #24]
   1f470:	9800      	ldr	r0, [sp, #0]
   1f472:	1a15      	subs	r5, r2, r0
   1f474:	2d00      	cmp	r5, #0
   1f476:	f77f af5f 	ble.w	1f338 <_svfiprintf_r+0x608>
   1f47a:	2d10      	cmp	r5, #16
   1f47c:	4c27      	ldr	r4, [pc, #156]	; (1f51c <_svfiprintf_r+0x7ec>)
   1f47e:	dd22      	ble.n	1f4c6 <_svfiprintf_r+0x796>
   1f480:	464a      	mov	r2, r9
   1f482:	46b1      	mov	r9, r6
   1f484:	4626      	mov	r6, r4
   1f486:	9c05      	ldr	r4, [sp, #20]
   1f488:	e004      	b.n	1f494 <_svfiprintf_r+0x764>
   1f48a:	3d10      	subs	r5, #16
   1f48c:	2d10      	cmp	r5, #16
   1f48e:	f102 0208 	add.w	r2, r2, #8
   1f492:	dd15      	ble.n	1f4c0 <_svfiprintf_r+0x790>
   1f494:	3301      	adds	r3, #1
   1f496:	3110      	adds	r1, #16
   1f498:	2010      	movs	r0, #16
   1f49a:	2b07      	cmp	r3, #7
   1f49c:	9111      	str	r1, [sp, #68]	; 0x44
   1f49e:	9310      	str	r3, [sp, #64]	; 0x40
   1f4a0:	6016      	str	r6, [r2, #0]
   1f4a2:	6050      	str	r0, [r2, #4]
   1f4a4:	ddf1      	ble.n	1f48a <_svfiprintf_r+0x75a>
   1f4a6:	aa0f      	add	r2, sp, #60	; 0x3c
   1f4a8:	4621      	mov	r1, r4
   1f4aa:	4638      	mov	r0, r7
   1f4ac:	f7ff fbc2 	bl	1ec34 <__ssprint_r>
   1f4b0:	2800      	cmp	r0, #0
   1f4b2:	d1cf      	bne.n	1f454 <_svfiprintf_r+0x724>
   1f4b4:	3d10      	subs	r5, #16
   1f4b6:	2d10      	cmp	r5, #16
   1f4b8:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f4ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f4bc:	4652      	mov	r2, sl
   1f4be:	dce9      	bgt.n	1f494 <_svfiprintf_r+0x764>
   1f4c0:	4634      	mov	r4, r6
   1f4c2:	464e      	mov	r6, r9
   1f4c4:	4691      	mov	r9, r2
   1f4c6:	3301      	adds	r3, #1
   1f4c8:	4429      	add	r1, r5
   1f4ca:	2b07      	cmp	r3, #7
   1f4cc:	9111      	str	r1, [sp, #68]	; 0x44
   1f4ce:	9310      	str	r3, [sp, #64]	; 0x40
   1f4d0:	e889 0030 	stmia.w	r9, {r4, r5}
   1f4d4:	f300 80f0 	bgt.w	1f6b8 <_svfiprintf_r+0x988>
   1f4d8:	f109 0908 	add.w	r9, r9, #8
   1f4dc:	e72c      	b.n	1f338 <_svfiprintf_r+0x608>
   1f4de:	aa0f      	add	r2, sp, #60	; 0x3c
   1f4e0:	9905      	ldr	r1, [sp, #20]
   1f4e2:	4638      	mov	r0, r7
   1f4e4:	f7ff fba6 	bl	1ec34 <__ssprint_r>
   1f4e8:	2800      	cmp	r0, #0
   1f4ea:	d1b3      	bne.n	1f454 <_svfiprintf_r+0x724>
   1f4ec:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f4ee:	46d1      	mov	r9, sl
   1f4f0:	e767      	b.n	1f3c2 <_svfiprintf_r+0x692>
   1f4f2:	aa0f      	add	r2, sp, #60	; 0x3c
   1f4f4:	9905      	ldr	r1, [sp, #20]
   1f4f6:	4638      	mov	r0, r7
   1f4f8:	f7ff fb9c 	bl	1ec34 <__ssprint_r>
   1f4fc:	2800      	cmp	r0, #0
   1f4fe:	d09e      	beq.n	1f43e <_svfiprintf_r+0x70e>
   1f500:	e7a8      	b.n	1f454 <_svfiprintf_r+0x724>
   1f502:	9b01      	ldr	r3, [sp, #4]
   1f504:	2a01      	cmp	r2, #1
   1f506:	f000 80b7 	beq.w	1f678 <_svfiprintf_r+0x948>
   1f50a:	2a02      	cmp	r2, #2
   1f50c:	d11e      	bne.n	1f54c <_svfiprintf_r+0x81c>
   1f50e:	9301      	str	r3, [sp, #4]
   1f510:	2400      	movs	r4, #0
   1f512:	2500      	movs	r5, #0
   1f514:	e5f0      	b.n	1f0f8 <_svfiprintf_r+0x3c8>
   1f516:	bf00      	nop
   1f518:	00023618 	.word	0x00023618
   1f51c:	00023644 	.word	0x00023644
   1f520:	00023634 	.word	0x00023634
   1f524:	aa0f      	add	r2, sp, #60	; 0x3c
   1f526:	9905      	ldr	r1, [sp, #20]
   1f528:	4638      	mov	r0, r7
   1f52a:	f7ff fb83 	bl	1ec34 <__ssprint_r>
   1f52e:	2800      	cmp	r0, #0
   1f530:	d190      	bne.n	1f454 <_svfiprintf_r+0x724>
   1f532:	46d1      	mov	r9, sl
   1f534:	e435      	b.n	1eda2 <_svfiprintf_r+0x72>
   1f536:	aa0f      	add	r2, sp, #60	; 0x3c
   1f538:	9905      	ldr	r1, [sp, #20]
   1f53a:	4638      	mov	r0, r7
   1f53c:	f7ff fb7a 	bl	1ec34 <__ssprint_r>
   1f540:	2800      	cmp	r0, #0
   1f542:	d187      	bne.n	1f454 <_svfiprintf_r+0x724>
   1f544:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f546:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f548:	46d1      	mov	r9, sl
   1f54a:	e72c      	b.n	1f3a6 <_svfiprintf_r+0x676>
   1f54c:	9301      	str	r3, [sp, #4]
   1f54e:	2400      	movs	r4, #0
   1f550:	2500      	movs	r5, #0
   1f552:	4651      	mov	r1, sl
   1f554:	e000      	b.n	1f558 <_svfiprintf_r+0x828>
   1f556:	4631      	mov	r1, r6
   1f558:	08e2      	lsrs	r2, r4, #3
   1f55a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1f55e:	08e8      	lsrs	r0, r5, #3
   1f560:	f004 0307 	and.w	r3, r4, #7
   1f564:	4605      	mov	r5, r0
   1f566:	4614      	mov	r4, r2
   1f568:	3330      	adds	r3, #48	; 0x30
   1f56a:	ea54 0205 	orrs.w	r2, r4, r5
   1f56e:	f801 3c01 	strb.w	r3, [r1, #-1]
   1f572:	f101 36ff 	add.w	r6, r1, #4294967295
   1f576:	d1ee      	bne.n	1f556 <_svfiprintf_r+0x826>
   1f578:	9a01      	ldr	r2, [sp, #4]
   1f57a:	07d2      	lsls	r2, r2, #31
   1f57c:	f57f adcc 	bpl.w	1f118 <_svfiprintf_r+0x3e8>
   1f580:	2b30      	cmp	r3, #48	; 0x30
   1f582:	f43f adc9 	beq.w	1f118 <_svfiprintf_r+0x3e8>
   1f586:	3902      	subs	r1, #2
   1f588:	2330      	movs	r3, #48	; 0x30
   1f58a:	f806 3c01 	strb.w	r3, [r6, #-1]
   1f58e:	ebaa 0301 	sub.w	r3, sl, r1
   1f592:	9304      	str	r3, [sp, #16]
   1f594:	460e      	mov	r6, r1
   1f596:	e5c2      	b.n	1f11e <_svfiprintf_r+0x3ee>
   1f598:	aa0f      	add	r2, sp, #60	; 0x3c
   1f59a:	9905      	ldr	r1, [sp, #20]
   1f59c:	4638      	mov	r0, r7
   1f59e:	f7ff fb49 	bl	1ec34 <__ssprint_r>
   1f5a2:	2800      	cmp	r0, #0
   1f5a4:	f47f af56 	bne.w	1f454 <_svfiprintf_r+0x724>
   1f5a8:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f5aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f5ac:	46d1      	mov	r9, sl
   1f5ae:	e6b0      	b.n	1f312 <_svfiprintf_r+0x5e2>
   1f5b0:	aa0f      	add	r2, sp, #60	; 0x3c
   1f5b2:	9905      	ldr	r1, [sp, #20]
   1f5b4:	4638      	mov	r0, r7
   1f5b6:	f7ff fb3d 	bl	1ec34 <__ssprint_r>
   1f5ba:	2800      	cmp	r0, #0
   1f5bc:	f47f af4a 	bne.w	1f454 <_svfiprintf_r+0x724>
   1f5c0:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f5c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f5c4:	46d1      	mov	r9, sl
   1f5c6:	e6b3      	b.n	1f330 <_svfiprintf_r+0x600>
   1f5c8:	2d00      	cmp	r5, #0
   1f5ca:	bf08      	it	eq
   1f5cc:	2c0a      	cmpeq	r4, #10
   1f5ce:	d352      	bcc.n	1f676 <_svfiprintf_r+0x946>
   1f5d0:	4656      	mov	r6, sl
   1f5d2:	4620      	mov	r0, r4
   1f5d4:	4629      	mov	r1, r5
   1f5d6:	220a      	movs	r2, #10
   1f5d8:	2300      	movs	r3, #0
   1f5da:	f7fd fbd3 	bl	1cd84 <__aeabi_uldivmod>
   1f5de:	3230      	adds	r2, #48	; 0x30
   1f5e0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1f5e4:	4620      	mov	r0, r4
   1f5e6:	4629      	mov	r1, r5
   1f5e8:	2300      	movs	r3, #0
   1f5ea:	220a      	movs	r2, #10
   1f5ec:	f7fd fbca 	bl	1cd84 <__aeabi_uldivmod>
   1f5f0:	4604      	mov	r4, r0
   1f5f2:	460d      	mov	r5, r1
   1f5f4:	ea54 0305 	orrs.w	r3, r4, r5
   1f5f8:	d1eb      	bne.n	1f5d2 <_svfiprintf_r+0x8a2>
   1f5fa:	e58d      	b.n	1f118 <_svfiprintf_r+0x3e8>
   1f5fc:	f8cd 8010 	str.w	r8, [sp, #16]
   1f600:	4656      	mov	r6, sl
   1f602:	e58c      	b.n	1f11e <_svfiprintf_r+0x3ee>
   1f604:	aa0f      	add	r2, sp, #60	; 0x3c
   1f606:	9905      	ldr	r1, [sp, #20]
   1f608:	4638      	mov	r0, r7
   1f60a:	f7ff fb13 	bl	1ec34 <__ssprint_r>
   1f60e:	2800      	cmp	r0, #0
   1f610:	f47f af20 	bne.w	1f454 <_svfiprintf_r+0x724>
   1f614:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f616:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f618:	46d1      	mov	r9, sl
   1f61a:	e669      	b.n	1f2f0 <_svfiprintf_r+0x5c0>
   1f61c:	aa0f      	add	r2, sp, #60	; 0x3c
   1f61e:	9905      	ldr	r1, [sp, #20]
   1f620:	4638      	mov	r0, r7
   1f622:	f7ff fb07 	bl	1ec34 <__ssprint_r>
   1f626:	2800      	cmp	r0, #0
   1f628:	f47f af14 	bne.w	1f454 <_svfiprintf_r+0x724>
   1f62c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f62e:	e6fc      	b.n	1f42a <_svfiprintf_r+0x6fa>
   1f630:	9207      	str	r2, [sp, #28]
   1f632:	f89b 2000 	ldrb.w	r2, [fp]
   1f636:	f7ff bbc8 	b.w	1edca <_svfiprintf_r+0x9a>
   1f63a:	4656      	mov	r6, sl
   1f63c:	e56f      	b.n	1f11e <_svfiprintf_r+0x3ee>
   1f63e:	9e07      	ldr	r6, [sp, #28]
   1f640:	f9b6 4000 	ldrsh.w	r4, [r6]
   1f644:	4632      	mov	r2, r6
   1f646:	17e5      	asrs	r5, r4, #31
   1f648:	4620      	mov	r0, r4
   1f64a:	3204      	adds	r2, #4
   1f64c:	4629      	mov	r1, r5
   1f64e:	2800      	cmp	r0, #0
   1f650:	9207      	str	r2, [sp, #28]
   1f652:	f171 0200 	sbcs.w	r2, r1, #0
   1f656:	f6bf ad3b 	bge.w	1f0d0 <_svfiprintf_r+0x3a0>
   1f65a:	222d      	movs	r2, #45	; 0x2d
   1f65c:	4264      	negs	r4, r4
   1f65e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1f662:	9203      	str	r2, [sp, #12]
   1f664:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1f668:	2201      	movs	r2, #1
   1f66a:	e604      	b.n	1f276 <_svfiprintf_r+0x546>
   1f66c:	880c      	ldrh	r4, [r1, #0]
   1f66e:	3104      	adds	r1, #4
   1f670:	2500      	movs	r5, #0
   1f672:	9107      	str	r1, [sp, #28]
   1f674:	e455      	b.n	1ef22 <_svfiprintf_r+0x1f2>
   1f676:	9b01      	ldr	r3, [sp, #4]
   1f678:	9301      	str	r3, [sp, #4]
   1f67a:	ae2c      	add	r6, sp, #176	; 0xb0
   1f67c:	3430      	adds	r4, #48	; 0x30
   1f67e:	2301      	movs	r3, #1
   1f680:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1f684:	9304      	str	r3, [sp, #16]
   1f686:	e54a      	b.n	1f11e <_svfiprintf_r+0x3ee>
   1f688:	9a07      	ldr	r2, [sp, #28]
   1f68a:	9902      	ldr	r1, [sp, #8]
   1f68c:	6813      	ldr	r3, [r2, #0]
   1f68e:	17cd      	asrs	r5, r1, #31
   1f690:	4608      	mov	r0, r1
   1f692:	3204      	adds	r2, #4
   1f694:	4629      	mov	r1, r5
   1f696:	9207      	str	r2, [sp, #28]
   1f698:	e9c3 0100 	strd	r0, r1, [r3]
   1f69c:	f7ff bb62 	b.w	1ed64 <_svfiprintf_r+0x34>
   1f6a0:	9c07      	ldr	r4, [sp, #28]
   1f6a2:	3407      	adds	r4, #7
   1f6a4:	f024 0407 	bic.w	r4, r4, #7
   1f6a8:	e9d4 0100 	ldrd	r0, r1, [r4]
   1f6ac:	f104 0208 	add.w	r2, r4, #8
   1f6b0:	9207      	str	r2, [sp, #28]
   1f6b2:	4604      	mov	r4, r0
   1f6b4:	460d      	mov	r5, r1
   1f6b6:	e506      	b.n	1f0c6 <_svfiprintf_r+0x396>
   1f6b8:	aa0f      	add	r2, sp, #60	; 0x3c
   1f6ba:	9905      	ldr	r1, [sp, #20]
   1f6bc:	4638      	mov	r0, r7
   1f6be:	f7ff fab9 	bl	1ec34 <__ssprint_r>
   1f6c2:	2800      	cmp	r0, #0
   1f6c4:	f47f aec6 	bne.w	1f454 <_svfiprintf_r+0x724>
   1f6c8:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f6ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f6cc:	46d1      	mov	r9, sl
   1f6ce:	e633      	b.n	1f338 <_svfiprintf_r+0x608>
   1f6d0:	9a07      	ldr	r2, [sp, #28]
   1f6d2:	6813      	ldr	r3, [r2, #0]
   1f6d4:	3204      	adds	r2, #4
   1f6d6:	9207      	str	r2, [sp, #28]
   1f6d8:	9a02      	ldr	r2, [sp, #8]
   1f6da:	601a      	str	r2, [r3, #0]
   1f6dc:	f7ff bb42 	b.w	1ed64 <_svfiprintf_r+0x34>
   1f6e0:	4630      	mov	r0, r6
   1f6e2:	9301      	str	r3, [sp, #4]
   1f6e4:	9407      	str	r4, [sp, #28]
   1f6e6:	f7fd ff6b 	bl	1d5c0 <strlen>
   1f6ea:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1f6ee:	9004      	str	r0, [sp, #16]
   1f6f0:	9303      	str	r3, [sp, #12]
   1f6f2:	f04f 0800 	mov.w	r8, #0
   1f6f6:	e512      	b.n	1f11e <_svfiprintf_r+0x3ee>
   1f6f8:	2140      	movs	r1, #64	; 0x40
   1f6fa:	9200      	str	r2, [sp, #0]
   1f6fc:	f7fe fc2e 	bl	1df5c <_malloc_r>
   1f700:	9a05      	ldr	r2, [sp, #20]
   1f702:	6010      	str	r0, [r2, #0]
   1f704:	6110      	str	r0, [r2, #16]
   1f706:	9a00      	ldr	r2, [sp, #0]
   1f708:	b328      	cbz	r0, 1f756 <_svfiprintf_r+0xa26>
   1f70a:	9905      	ldr	r1, [sp, #20]
   1f70c:	2340      	movs	r3, #64	; 0x40
   1f70e:	614b      	str	r3, [r1, #20]
   1f710:	f7ff bb1c 	b.w	1ed4c <_svfiprintf_r+0x1c>
   1f714:	4642      	mov	r2, r8
   1f716:	2a06      	cmp	r2, #6
   1f718:	bf28      	it	cs
   1f71a:	2206      	movcs	r2, #6
   1f71c:	9204      	str	r2, [sp, #16]
   1f71e:	9407      	str	r4, [sp, #28]
   1f720:	9200      	str	r2, [sp, #0]
   1f722:	4e17      	ldr	r6, [pc, #92]	; (1f780 <_svfiprintf_r+0xa50>)
   1f724:	e42f      	b.n	1ef86 <_svfiprintf_r+0x256>
   1f726:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1f72a:	f8cd 8010 	str.w	r8, [sp, #16]
   1f72e:	9203      	str	r2, [sp, #12]
   1f730:	9407      	str	r4, [sp, #28]
   1f732:	9301      	str	r3, [sp, #4]
   1f734:	4680      	mov	r8, r0
   1f736:	e4f2      	b.n	1f11e <_svfiprintf_r+0x3ee>
   1f738:	9a07      	ldr	r2, [sp, #28]
   1f73a:	6811      	ldr	r1, [r2, #0]
   1f73c:	f89b 2001 	ldrb.w	r2, [fp, #1]
   1f740:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
   1f744:	9907      	ldr	r1, [sp, #28]
   1f746:	3104      	adds	r1, #4
   1f748:	46b3      	mov	fp, r6
   1f74a:	9107      	str	r1, [sp, #28]
   1f74c:	f7ff bb3d 	b.w	1edca <_svfiprintf_r+0x9a>
   1f750:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1f754:	e51f      	b.n	1f196 <_svfiprintf_r+0x466>
   1f756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f758:	230c      	movs	r3, #12
   1f75a:	6013      	str	r3, [r2, #0]
   1f75c:	f04f 33ff 	mov.w	r3, #4294967295
   1f760:	9302      	str	r3, [sp, #8]
   1f762:	e680      	b.n	1f466 <_svfiprintf_r+0x736>
   1f764:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1f768:	f7ff bbcb 	b.w	1ef02 <_svfiprintf_r+0x1d2>
   1f76c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1f770:	e497      	b.n	1f0a2 <_svfiprintf_r+0x372>
   1f772:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1f776:	e59e      	b.n	1f2b6 <_svfiprintf_r+0x586>
   1f778:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1f77c:	e457      	b.n	1f02e <_svfiprintf_r+0x2fe>
   1f77e:	bf00      	nop
   1f780:	0002362c 	.word	0x0002362c

0001f784 <_sungetc_r>:
   1f784:	b538      	push	{r3, r4, r5, lr}
   1f786:	1c4b      	adds	r3, r1, #1
   1f788:	d01a      	beq.n	1f7c0 <_sungetc_r+0x3c>
   1f78a:	8993      	ldrh	r3, [r2, #12]
   1f78c:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1f78e:	f023 0320 	bic.w	r3, r3, #32
   1f792:	b2cd      	uxtb	r5, r1
   1f794:	8193      	strh	r3, [r2, #12]
   1f796:	b1b4      	cbz	r4, 1f7c6 <_sungetc_r+0x42>
   1f798:	4614      	mov	r4, r2
   1f79a:	6852      	ldr	r2, [r2, #4]
   1f79c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f79e:	429a      	cmp	r2, r3
   1f7a0:	da09      	bge.n	1f7b6 <_sungetc_r+0x32>
   1f7a2:	6823      	ldr	r3, [r4, #0]
   1f7a4:	1e5a      	subs	r2, r3, #1
   1f7a6:	6022      	str	r2, [r4, #0]
   1f7a8:	f803 5c01 	strb.w	r5, [r3, #-1]
   1f7ac:	6863      	ldr	r3, [r4, #4]
   1f7ae:	3301      	adds	r3, #1
   1f7b0:	6063      	str	r3, [r4, #4]
   1f7b2:	4628      	mov	r0, r5
   1f7b4:	bd38      	pop	{r3, r4, r5, pc}
   1f7b6:	4621      	mov	r1, r4
   1f7b8:	f000 fd52 	bl	20260 <__submore>
   1f7bc:	2800      	cmp	r0, #0
   1f7be:	d0f0      	beq.n	1f7a2 <_sungetc_r+0x1e>
   1f7c0:	f04f 35ff 	mov.w	r5, #4294967295
   1f7c4:	e7f5      	b.n	1f7b2 <_sungetc_r+0x2e>
   1f7c6:	6911      	ldr	r1, [r2, #16]
   1f7c8:	6813      	ldr	r3, [r2, #0]
   1f7ca:	b129      	cbz	r1, 1f7d8 <_sungetc_r+0x54>
   1f7cc:	4299      	cmp	r1, r3
   1f7ce:	d203      	bcs.n	1f7d8 <_sungetc_r+0x54>
   1f7d0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   1f7d4:	428d      	cmp	r5, r1
   1f7d6:	d00f      	beq.n	1f7f8 <_sungetc_r+0x74>
   1f7d8:	6393      	str	r3, [r2, #56]	; 0x38
   1f7da:	4613      	mov	r3, r2
   1f7dc:	6854      	ldr	r4, [r2, #4]
   1f7de:	63d4      	str	r4, [r2, #60]	; 0x3c
   1f7e0:	f102 0040 	add.w	r0, r2, #64	; 0x40
   1f7e4:	2103      	movs	r1, #3
   1f7e6:	6310      	str	r0, [r2, #48]	; 0x30
   1f7e8:	6351      	str	r1, [r2, #52]	; 0x34
   1f7ea:	f803 5f42 	strb.w	r5, [r3, #66]!
   1f7ee:	2101      	movs	r1, #1
   1f7f0:	6013      	str	r3, [r2, #0]
   1f7f2:	6051      	str	r1, [r2, #4]
   1f7f4:	4628      	mov	r0, r5
   1f7f6:	bd38      	pop	{r3, r4, r5, pc}
   1f7f8:	6851      	ldr	r1, [r2, #4]
   1f7fa:	3b01      	subs	r3, #1
   1f7fc:	3101      	adds	r1, #1
   1f7fe:	6013      	str	r3, [r2, #0]
   1f800:	6051      	str	r1, [r2, #4]
   1f802:	e7d6      	b.n	1f7b2 <_sungetc_r+0x2e>

0001f804 <__ssrefill_r>:
   1f804:	b510      	push	{r4, lr}
   1f806:	460c      	mov	r4, r1
   1f808:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1f80a:	b169      	cbz	r1, 1f828 <__ssrefill_r+0x24>
   1f80c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1f810:	4299      	cmp	r1, r3
   1f812:	d001      	beq.n	1f818 <__ssrefill_r+0x14>
   1f814:	f000 fdbc 	bl	20390 <_free_r>
   1f818:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1f81a:	6063      	str	r3, [r4, #4]
   1f81c:	2000      	movs	r0, #0
   1f81e:	6320      	str	r0, [r4, #48]	; 0x30
   1f820:	b113      	cbz	r3, 1f828 <__ssrefill_r+0x24>
   1f822:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f824:	6023      	str	r3, [r4, #0]
   1f826:	bd10      	pop	{r4, pc}
   1f828:	89a3      	ldrh	r3, [r4, #12]
   1f82a:	6922      	ldr	r2, [r4, #16]
   1f82c:	6022      	str	r2, [r4, #0]
   1f82e:	f043 0320 	orr.w	r3, r3, #32
   1f832:	2200      	movs	r2, #0
   1f834:	81a3      	strh	r3, [r4, #12]
   1f836:	6062      	str	r2, [r4, #4]
   1f838:	f04f 30ff 	mov.w	r0, #4294967295
   1f83c:	bd10      	pop	{r4, pc}
   1f83e:	bf00      	nop

0001f840 <_sfread_r>:
   1f840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f844:	b083      	sub	sp, #12
   1f846:	fb02 f903 	mul.w	r9, r2, r3
   1f84a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1f84c:	f1b9 0f00 	cmp.w	r9, #0
   1f850:	d028      	beq.n	1f8a4 <_sfread_r+0x64>
   1f852:	4607      	mov	r7, r0
   1f854:	469a      	mov	sl, r3
   1f856:	9201      	str	r2, [sp, #4]
   1f858:	460d      	mov	r5, r1
   1f85a:	464e      	mov	r6, r9
   1f85c:	f04f 0800 	mov.w	r8, #0
   1f860:	e00f      	b.n	1f882 <_sfread_r+0x42>
   1f862:	6821      	ldr	r1, [r4, #0]
   1f864:	f7fd fd8a 	bl	1d37c <memcpy>
   1f868:	6822      	ldr	r2, [r4, #0]
   1f86a:	f8c4 8004 	str.w	r8, [r4, #4]
   1f86e:	445a      	add	r2, fp
   1f870:	6022      	str	r2, [r4, #0]
   1f872:	4621      	mov	r1, r4
   1f874:	4638      	mov	r0, r7
   1f876:	445d      	add	r5, fp
   1f878:	eba6 060b 	sub.w	r6, r6, fp
   1f87c:	f7ff ffc2 	bl	1f804 <__ssrefill_r>
   1f880:	b9a0      	cbnz	r0, 1f8ac <_sfread_r+0x6c>
   1f882:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1f886:	455e      	cmp	r6, fp
   1f888:	4628      	mov	r0, r5
   1f88a:	465a      	mov	r2, fp
   1f88c:	d8e9      	bhi.n	1f862 <_sfread_r+0x22>
   1f88e:	4632      	mov	r2, r6
   1f890:	6821      	ldr	r1, [r4, #0]
   1f892:	f7fd fd73 	bl	1d37c <memcpy>
   1f896:	6862      	ldr	r2, [r4, #4]
   1f898:	6823      	ldr	r3, [r4, #0]
   1f89a:	1b92      	subs	r2, r2, r6
   1f89c:	441e      	add	r6, r3
   1f89e:	46d1      	mov	r9, sl
   1f8a0:	6062      	str	r2, [r4, #4]
   1f8a2:	6026      	str	r6, [r4, #0]
   1f8a4:	4648      	mov	r0, r9
   1f8a6:	b003      	add	sp, #12
   1f8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8ac:	9b01      	ldr	r3, [sp, #4]
   1f8ae:	eba9 0906 	sub.w	r9, r9, r6
   1f8b2:	fbb9 f9f3 	udiv	r9, r9, r3
   1f8b6:	4648      	mov	r0, r9
   1f8b8:	b003      	add	sp, #12
   1f8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8be:	bf00      	nop

0001f8c0 <__ssvfiscanf_r>:
   1f8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8c4:	468b      	mov	fp, r1
   1f8c6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1f8ca:	b0d9      	sub	sp, #356	; 0x164
   1f8cc:	4607      	mov	r7, r0
   1f8ce:	0488      	lsls	r0, r1, #18
   1f8d0:	9306      	str	r3, [sp, #24]
   1f8d2:	d409      	bmi.n	1f8e8 <__ssvfiscanf_r+0x28>
   1f8d4:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1f8d8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1f8dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1f8e0:	f8ab 100c 	strh.w	r1, [fp, #12]
   1f8e4:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   1f8e8:	4614      	mov	r4, r2
   1f8ea:	4626      	mov	r6, r4
   1f8ec:	2300      	movs	r3, #0
   1f8ee:	9307      	str	r3, [sp, #28]
   1f8f0:	9304      	str	r3, [sp, #16]
   1f8f2:	469a      	mov	sl, r3
   1f8f4:	9305      	str	r3, [sp, #20]
   1f8f6:	f816 3b01 	ldrb.w	r3, [r6], #1
   1f8fa:	930b      	str	r3, [sp, #44]	; 0x2c
   1f8fc:	b363      	cbz	r3, 1f958 <__ssvfiscanf_r+0x98>
   1f8fe:	f000 fe4d 	bl	2059c <__locale_ctype_ptr>
   1f902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f904:	4418      	add	r0, r3
   1f906:	7845      	ldrb	r5, [r0, #1]
   1f908:	f015 0508 	ands.w	r5, r5, #8
   1f90c:	d028      	beq.n	1f960 <__ssvfiscanf_r+0xa0>
   1f90e:	f8db 2004 	ldr.w	r2, [fp, #4]
   1f912:	e012      	b.n	1f93a <__ssvfiscanf_r+0x7a>
   1f914:	f000 fe42 	bl	2059c <__locale_ctype_ptr>
   1f918:	f8db 3000 	ldr.w	r3, [fp]
   1f91c:	781a      	ldrb	r2, [r3, #0]
   1f91e:	4410      	add	r0, r2
   1f920:	3301      	adds	r3, #1
   1f922:	7842      	ldrb	r2, [r0, #1]
   1f924:	0712      	lsls	r2, r2, #28
   1f926:	d510      	bpl.n	1f94a <__ssvfiscanf_r+0x8a>
   1f928:	f8db 2004 	ldr.w	r2, [fp, #4]
   1f92c:	f8cb 3000 	str.w	r3, [fp]
   1f930:	3a01      	subs	r2, #1
   1f932:	f10a 0a01 	add.w	sl, sl, #1
   1f936:	f8cb 2004 	str.w	r2, [fp, #4]
   1f93a:	2a00      	cmp	r2, #0
   1f93c:	dcea      	bgt.n	1f914 <__ssvfiscanf_r+0x54>
   1f93e:	4659      	mov	r1, fp
   1f940:	4638      	mov	r0, r7
   1f942:	f7ff ff5f 	bl	1f804 <__ssrefill_r>
   1f946:	2800      	cmp	r0, #0
   1f948:	d0e4      	beq.n	1f914 <__ssvfiscanf_r+0x54>
   1f94a:	4634      	mov	r4, r6
   1f94c:	4626      	mov	r6, r4
   1f94e:	f816 3b01 	ldrb.w	r3, [r6], #1
   1f952:	930b      	str	r3, [sp, #44]	; 0x2c
   1f954:	2b00      	cmp	r3, #0
   1f956:	d1d2      	bne.n	1f8fe <__ssvfiscanf_r+0x3e>
   1f958:	9805      	ldr	r0, [sp, #20]
   1f95a:	b059      	add	sp, #356	; 0x164
   1f95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f960:	2b25      	cmp	r3, #37	; 0x25
   1f962:	f040 8084 	bne.w	1fa6e <__ssvfiscanf_r+0x1ae>
   1f966:	f894 8001 	ldrb.w	r8, [r4, #1]
   1f96a:	462c      	mov	r4, r5
   1f96c:	1c73      	adds	r3, r6, #1
   1f96e:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
   1f972:	f200 8187 	bhi.w	1fc84 <__ssvfiscanf_r+0x3c4>
   1f976:	e8df f018 	tbh	[pc, r8, lsl #1]
   1f97a:	0093      	.short	0x0093
   1f97c:	01850185 	.word	0x01850185
   1f980:	01850185 	.word	0x01850185
   1f984:	01850185 	.word	0x01850185
   1f988:	01850185 	.word	0x01850185
   1f98c:	01850185 	.word	0x01850185
   1f990:	01850185 	.word	0x01850185
   1f994:	01850185 	.word	0x01850185
   1f998:	01850185 	.word	0x01850185
   1f99c:	01850185 	.word	0x01850185
   1f9a0:	01850185 	.word	0x01850185
   1f9a4:	01850185 	.word	0x01850185
   1f9a8:	01850185 	.word	0x01850185
   1f9ac:	01850185 	.word	0x01850185
   1f9b0:	01850185 	.word	0x01850185
   1f9b4:	01850185 	.word	0x01850185
   1f9b8:	01850185 	.word	0x01850185
   1f9bc:	01850185 	.word	0x01850185
   1f9c0:	01850185 	.word	0x01850185
   1f9c4:	01850079 	.word	0x01850079
   1f9c8:	01850185 	.word	0x01850185
   1f9cc:	017f0185 	.word	0x017f0185
   1f9d0:	01850185 	.word	0x01850185
   1f9d4:	01850185 	.word	0x01850185
   1f9d8:	01760185 	.word	0x01760185
   1f9dc:	01760176 	.word	0x01760176
   1f9e0:	01760176 	.word	0x01760176
   1f9e4:	01760176 	.word	0x01760176
   1f9e8:	01760176 	.word	0x01760176
   1f9ec:	01850176 	.word	0x01850176
   1f9f0:	01850185 	.word	0x01850185
   1f9f4:	01850185 	.word	0x01850185
   1f9f8:	01850185 	.word	0x01850185
   1f9fc:	01850185 	.word	0x01850185
   1fa00:	01720185 	.word	0x01720185
   1fa04:	01850185 	.word	0x01850185
   1fa08:	01850185 	.word	0x01850185
   1fa0c:	01850185 	.word	0x01850185
   1fa10:	016c0185 	.word	0x016c0185
   1fa14:	01850185 	.word	0x01850185
   1fa18:	01850168 	.word	0x01850168
   1fa1c:	01850185 	.word	0x01850185
   1fa20:	01850185 	.word	0x01850185
   1fa24:	01850185 	.word	0x01850185
   1fa28:	01640185 	.word	0x01640185
   1fa2c:	01850185 	.word	0x01850185
   1fa30:	0185015b 	.word	0x0185015b
   1fa34:	01850185 	.word	0x01850185
   1fa38:	01850185 	.word	0x01850185
   1fa3c:	01850185 	.word	0x01850185
   1fa40:	01030115 	.word	0x01030115
   1fa44:	01850185 	.word	0x01850185
   1fa48:	011a0185 	.word	0x011a0185
   1fa4c:	0185009a 	.word	0x0185009a
   1fa50:	01510185 	.word	0x01510185
   1fa54:	013a0185 	.word	0x013a0185
   1fa58:	012a0133 	.word	0x012a0133
   1fa5c:	01850185 	.word	0x01850185
   1fa60:	01850127 	.word	0x01850127
   1fa64:	01850120 	.word	0x01850120
   1fa68:	01640185 	.word	0x01640185
   1fa6c:	461e      	mov	r6, r3
   1fa6e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1fa72:	2b00      	cmp	r3, #0
   1fa74:	f340 8375 	ble.w	20162 <__ssvfiscanf_r+0x8a2>
   1fa78:	f8db 3000 	ldr.w	r3, [fp]
   1fa7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   1fa80:	7819      	ldrb	r1, [r3, #0]
   1fa82:	4291      	cmp	r1, r2
   1fa84:	f47f af68 	bne.w	1f958 <__ssvfiscanf_r+0x98>
   1fa88:	f8db 2004 	ldr.w	r2, [fp, #4]
   1fa8c:	3301      	adds	r3, #1
   1fa8e:	3a01      	subs	r2, #1
   1fa90:	f8cb 3000 	str.w	r3, [fp]
   1fa94:	f10a 0a01 	add.w	sl, sl, #1
   1fa98:	f8cb 2004 	str.w	r2, [fp, #4]
   1fa9c:	4634      	mov	r4, r6
   1fa9e:	e755      	b.n	1f94c <__ssvfiscanf_r+0x8c>
   1faa0:	f04f 33ff 	mov.w	r3, #4294967295
   1faa4:	9305      	str	r3, [sp, #20]
   1faa6:	9805      	ldr	r0, [sp, #20]
   1faa8:	b059      	add	sp, #356	; 0x164
   1faaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1faae:	9303      	str	r3, [sp, #12]
   1fab0:	4ba7      	ldr	r3, [pc, #668]	; (1fd50 <__ssvfiscanf_r+0x490>)
   1fab2:	9307      	str	r3, [sp, #28]
   1fab4:	2300      	movs	r3, #0
   1fab6:	9304      	str	r3, [sp, #16]
   1fab8:	2603      	movs	r6, #3
   1faba:	f8db 3004 	ldr.w	r3, [fp, #4]
   1fabe:	2b00      	cmp	r3, #0
   1fac0:	dd69      	ble.n	1fb96 <__ssvfiscanf_r+0x2d6>
   1fac2:	0669      	lsls	r1, r5, #25
   1fac4:	d533      	bpl.n	1fb2e <__ssvfiscanf_r+0x26e>
   1fac6:	2e02      	cmp	r6, #2
   1fac8:	f000 81f7 	beq.w	1feba <__ssvfiscanf_r+0x5fa>
   1facc:	2e03      	cmp	r6, #3
   1face:	f000 8143 	beq.w	1fd58 <__ssvfiscanf_r+0x498>
   1fad2:	2e01      	cmp	r6, #1
   1fad4:	f000 810a 	beq.w	1fcec <__ssvfiscanf_r+0x42c>
   1fad8:	2c00      	cmp	r4, #0
   1fada:	bf08      	it	eq
   1fadc:	2401      	moveq	r4, #1
   1fade:	f015 0301 	ands.w	r3, r5, #1
   1fae2:	f040 8247 	bne.w	1ff74 <__ssvfiscanf_r+0x6b4>
   1fae6:	06ed      	lsls	r5, r5, #27
   1fae8:	f140 831c 	bpl.w	20124 <__ssvfiscanf_r+0x864>
   1faec:	461d      	mov	r5, r3
   1faee:	e009      	b.n	1fb04 <__ssvfiscanf_r+0x244>
   1faf0:	4413      	add	r3, r2
   1faf2:	f8cb 3000 	str.w	r3, [fp]
   1faf6:	4415      	add	r5, r2
   1faf8:	1aa4      	subs	r4, r4, r2
   1fafa:	f7ff fe83 	bl	1f804 <__ssrefill_r>
   1fafe:	2800      	cmp	r0, #0
   1fb00:	f040 82d6 	bne.w	200b0 <__ssvfiscanf_r+0x7f0>
   1fb04:	f8db 2004 	ldr.w	r2, [fp, #4]
   1fb08:	f8db 3000 	ldr.w	r3, [fp]
   1fb0c:	42a2      	cmp	r2, r4
   1fb0e:	4659      	mov	r1, fp
   1fb10:	4638      	mov	r0, r7
   1fb12:	dbed      	blt.n	1faf0 <__ssvfiscanf_r+0x230>
   1fb14:	1b12      	subs	r2, r2, r4
   1fb16:	4423      	add	r3, r4
   1fb18:	f8cb 2004 	str.w	r2, [fp, #4]
   1fb1c:	4425      	add	r5, r4
   1fb1e:	f8cb 3000 	str.w	r3, [fp]
   1fb22:	9e03      	ldr	r6, [sp, #12]
   1fb24:	44aa      	add	sl, r5
   1fb26:	4634      	mov	r4, r6
   1fb28:	e710      	b.n	1f94c <__ssvfiscanf_r+0x8c>
   1fb2a:	f8cb 3000 	str.w	r3, [fp]
   1fb2e:	f000 fd35 	bl	2059c <__locale_ctype_ptr>
   1fb32:	f8db 3000 	ldr.w	r3, [fp]
   1fb36:	781a      	ldrb	r2, [r3, #0]
   1fb38:	4410      	add	r0, r2
   1fb3a:	3301      	adds	r3, #1
   1fb3c:	7842      	ldrb	r2, [r0, #1]
   1fb3e:	0712      	lsls	r2, r2, #28
   1fb40:	d5c1      	bpl.n	1fac6 <__ssvfiscanf_r+0x206>
   1fb42:	f8db 2004 	ldr.w	r2, [fp, #4]
   1fb46:	3a01      	subs	r2, #1
   1fb48:	2a00      	cmp	r2, #0
   1fb4a:	f10a 0a01 	add.w	sl, sl, #1
   1fb4e:	f8cb 2004 	str.w	r2, [fp, #4]
   1fb52:	dcea      	bgt.n	1fb2a <__ssvfiscanf_r+0x26a>
   1fb54:	4659      	mov	r1, fp
   1fb56:	4638      	mov	r0, r7
   1fb58:	f7ff fe54 	bl	1f804 <__ssrefill_r>
   1fb5c:	2800      	cmp	r0, #0
   1fb5e:	d0e6      	beq.n	1fb2e <__ssvfiscanf_r+0x26e>
   1fb60:	9a05      	ldr	r2, [sp, #20]
   1fb62:	2a00      	cmp	r2, #0
   1fb64:	d09c      	beq.n	1faa0 <__ssvfiscanf_r+0x1e0>
   1fb66:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1fb6a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fb6e:	4613      	mov	r3, r2
   1fb70:	bf18      	it	ne
   1fb72:	f04f 33ff 	movne.w	r3, #4294967295
   1fb76:	9305      	str	r3, [sp, #20]
   1fb78:	9805      	ldr	r0, [sp, #20]
   1fb7a:	b059      	add	sp, #356	; 0x164
   1fb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb80:	9303      	str	r3, [sp, #12]
   1fb82:	4b73      	ldr	r3, [pc, #460]	; (1fd50 <__ssvfiscanf_r+0x490>)
   1fb84:	9307      	str	r3, [sp, #28]
   1fb86:	230a      	movs	r3, #10
   1fb88:	9304      	str	r3, [sp, #16]
   1fb8a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1fb8e:	2b00      	cmp	r3, #0
   1fb90:	f04f 0603 	mov.w	r6, #3
   1fb94:	dc95      	bgt.n	1fac2 <__ssvfiscanf_r+0x202>
   1fb96:	4659      	mov	r1, fp
   1fb98:	4638      	mov	r0, r7
   1fb9a:	f7ff fe33 	bl	1f804 <__ssrefill_r>
   1fb9e:	2800      	cmp	r0, #0
   1fba0:	d08f      	beq.n	1fac2 <__ssvfiscanf_r+0x202>
   1fba2:	e7dd      	b.n	1fb60 <__ssvfiscanf_r+0x2a0>
   1fba4:	9303      	str	r3, [sp, #12]
   1fba6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1fbaa:	2600      	movs	r6, #0
   1fbac:	e785      	b.n	1faba <__ssvfiscanf_r+0x1fa>
   1fbae:	f896 8001 	ldrb.w	r8, [r6, #1]
   1fbb2:	f045 0504 	orr.w	r5, r5, #4
   1fbb6:	461e      	mov	r6, r3
   1fbb8:	e6d8      	b.n	1f96c <__ssvfiscanf_r+0xac>
   1fbba:	9303      	str	r3, [sp, #12]
   1fbbc:	4b65      	ldr	r3, [pc, #404]	; (1fd54 <__ssvfiscanf_r+0x494>)
   1fbbe:	9307      	str	r3, [sp, #28]
   1fbc0:	230a      	movs	r3, #10
   1fbc2:	9304      	str	r3, [sp, #16]
   1fbc4:	2603      	movs	r6, #3
   1fbc6:	e778      	b.n	1faba <__ssvfiscanf_r+0x1fa>
   1fbc8:	9303      	str	r3, [sp, #12]
   1fbca:	2602      	movs	r6, #2
   1fbcc:	e775      	b.n	1faba <__ssvfiscanf_r+0x1fa>
   1fbce:	9303      	str	r3, [sp, #12]
   1fbd0:	f445 7508 	orr.w	r5, r5, #544	; 0x220
   1fbd4:	4b5f      	ldr	r3, [pc, #380]	; (1fd54 <__ssvfiscanf_r+0x494>)
   1fbd6:	9307      	str	r3, [sp, #28]
   1fbd8:	2310      	movs	r3, #16
   1fbda:	9304      	str	r3, [sp, #16]
   1fbdc:	2603      	movs	r6, #3
   1fbde:	e76c      	b.n	1faba <__ssvfiscanf_r+0x1fa>
   1fbe0:	9303      	str	r3, [sp, #12]
   1fbe2:	4b5c      	ldr	r3, [pc, #368]	; (1fd54 <__ssvfiscanf_r+0x494>)
   1fbe4:	9307      	str	r3, [sp, #28]
   1fbe6:	2308      	movs	r3, #8
   1fbe8:	9304      	str	r3, [sp, #16]
   1fbea:	2603      	movs	r6, #3
   1fbec:	e765      	b.n	1faba <__ssvfiscanf_r+0x1fa>
   1fbee:	9303      	str	r3, [sp, #12]
   1fbf0:	06eb      	lsls	r3, r5, #27
   1fbf2:	d478      	bmi.n	1fce6 <__ssvfiscanf_r+0x426>
   1fbf4:	076e      	lsls	r6, r5, #29
   1fbf6:	f100 82d4 	bmi.w	201a2 <__ssvfiscanf_r+0x8e2>
   1fbfa:	07ec      	lsls	r4, r5, #31
   1fbfc:	f100 82c0 	bmi.w	20180 <__ssvfiscanf_r+0x8c0>
   1fc00:	07a8      	lsls	r0, r5, #30
   1fc02:	f140 82bd 	bpl.w	20180 <__ssvfiscanf_r+0x8c0>
   1fc06:	9a06      	ldr	r2, [sp, #24]
   1fc08:	9e03      	ldr	r6, [sp, #12]
   1fc0a:	6813      	ldr	r3, [r2, #0]
   1fc0c:	4650      	mov	r0, sl
   1fc0e:	17c1      	asrs	r1, r0, #31
   1fc10:	3204      	adds	r2, #4
   1fc12:	9206      	str	r2, [sp, #24]
   1fc14:	e9c3 0100 	strd	r0, r1, [r3]
   1fc18:	4634      	mov	r4, r6
   1fc1a:	e697      	b.n	1f94c <__ssvfiscanf_r+0x8c>
   1fc1c:	f896 8001 	ldrb.w	r8, [r6, #1]
   1fc20:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1fc24:	f000 82a5 	beq.w	20172 <__ssvfiscanf_r+0x8b2>
   1fc28:	f045 0501 	orr.w	r5, r5, #1
   1fc2c:	461e      	mov	r6, r3
   1fc2e:	e69d      	b.n	1f96c <__ssvfiscanf_r+0xac>
   1fc30:	4619      	mov	r1, r3
   1fc32:	a818      	add	r0, sp, #96	; 0x60
   1fc34:	f000 ff0e 	bl	20a54 <__sccl>
   1fc38:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1fc3c:	9003      	str	r0, [sp, #12]
   1fc3e:	2601      	movs	r6, #1
   1fc40:	e73b      	b.n	1faba <__ssvfiscanf_r+0x1fa>
   1fc42:	9303      	str	r3, [sp, #12]
   1fc44:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1fc48:	e7c4      	b.n	1fbd4 <__ssvfiscanf_r+0x314>
   1fc4a:	9303      	str	r3, [sp, #12]
   1fc4c:	f045 0501 	orr.w	r5, r5, #1
   1fc50:	e7c7      	b.n	1fbe2 <__ssvfiscanf_r+0x322>
   1fc52:	f896 8001 	ldrb.w	r8, [r6, #1]
   1fc56:	f045 0502 	orr.w	r5, r5, #2
   1fc5a:	461e      	mov	r6, r3
   1fc5c:	e686      	b.n	1f96c <__ssvfiscanf_r+0xac>
   1fc5e:	9303      	str	r3, [sp, #12]
   1fc60:	f045 0501 	orr.w	r5, r5, #1
   1fc64:	e78d      	b.n	1fb82 <__ssvfiscanf_r+0x2c2>
   1fc66:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1fc6a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
   1fc6e:	3c30      	subs	r4, #48	; 0x30
   1fc70:	f896 8001 	ldrb.w	r8, [r6, #1]
   1fc74:	461e      	mov	r6, r3
   1fc76:	e679      	b.n	1f96c <__ssvfiscanf_r+0xac>
   1fc78:	f896 8001 	ldrb.w	r8, [r6, #1]
   1fc7c:	f045 0510 	orr.w	r5, r5, #16
   1fc80:	461e      	mov	r6, r3
   1fc82:	e673      	b.n	1f96c <__ssvfiscanf_r+0xac>
   1fc84:	9303      	str	r3, [sp, #12]
   1fc86:	f000 fc89 	bl	2059c <__locale_ctype_ptr>
   1fc8a:	4440      	add	r0, r8
   1fc8c:	7843      	ldrb	r3, [r0, #1]
   1fc8e:	f003 0303 	and.w	r3, r3, #3
   1fc92:	2b01      	cmp	r3, #1
   1fc94:	f47f af75 	bne.w	1fb82 <__ssvfiscanf_r+0x2c2>
   1fc98:	f045 0501 	orr.w	r5, r5, #1
   1fc9c:	e771      	b.n	1fb82 <__ssvfiscanf_r+0x2c2>
   1fc9e:	ab0c      	add	r3, sp, #48	; 0x30
   1fca0:	4618      	mov	r0, r3
   1fca2:	2208      	movs	r2, #8
   1fca4:	2100      	movs	r1, #0
   1fca6:	9308      	str	r3, [sp, #32]
   1fca8:	f7fd fc02 	bl	1d4b0 <memset>
   1fcac:	f015 0310 	ands.w	r3, r5, #16
   1fcb0:	9309      	str	r3, [sp, #36]	; 0x24
   1fcb2:	f000 81e1 	beq.w	20078 <__ssvfiscanf_r+0x7b8>
   1fcb6:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   1fcba:	2600      	movs	r6, #0
   1fcbc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1fcc0:	f000 fc6c 	bl	2059c <__locale_ctype_ptr>
   1fcc4:	f8db 3000 	ldr.w	r3, [fp]
   1fcc8:	781b      	ldrb	r3, [r3, #0]
   1fcca:	4403      	add	r3, r0
   1fccc:	785b      	ldrb	r3, [r3, #1]
   1fcce:	071a      	lsls	r2, r3, #28
   1fcd0:	d402      	bmi.n	1fcd8 <__ssvfiscanf_r+0x418>
   1fcd2:	2c00      	cmp	r4, #0
   1fcd4:	f040 8270 	bne.w	201b8 <__ssvfiscanf_r+0x8f8>
   1fcd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fcda:	b923      	cbnz	r3, 1fce6 <__ssvfiscanf_r+0x426>
   1fcdc:	f8c9 3000 	str.w	r3, [r9]
   1fce0:	9b05      	ldr	r3, [sp, #20]
   1fce2:	3301      	adds	r3, #1
   1fce4:	9305      	str	r3, [sp, #20]
   1fce6:	9e03      	ldr	r6, [sp, #12]
   1fce8:	4634      	mov	r4, r6
   1fcea:	e62f      	b.n	1f94c <__ssvfiscanf_r+0x8c>
   1fcec:	2c00      	cmp	r4, #0
   1fcee:	bf08      	it	eq
   1fcf0:	f04f 34ff 	moveq.w	r4, #4294967295
   1fcf4:	06e8      	lsls	r0, r5, #27
   1fcf6:	f140 810b 	bpl.w	1ff10 <__ssvfiscanf_r+0x650>
   1fcfa:	f8db 2000 	ldr.w	r2, [fp]
   1fcfe:	2500      	movs	r5, #0
   1fd00:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1fd04:	7813      	ldrb	r3, [r2, #0]
   1fd06:	f818 3003 	ldrb.w	r3, [r8, r3]
   1fd0a:	3201      	adds	r2, #1
   1fd0c:	b1db      	cbz	r3, 1fd46 <__ssvfiscanf_r+0x486>
   1fd0e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1fd12:	f8cb 2000 	str.w	r2, [fp]
   1fd16:	3501      	adds	r5, #1
   1fd18:	3b01      	subs	r3, #1
   1fd1a:	42ac      	cmp	r4, r5
   1fd1c:	f8cb 3004 	str.w	r3, [fp, #4]
   1fd20:	f43f aeff 	beq.w	1fb22 <__ssvfiscanf_r+0x262>
   1fd24:	2b00      	cmp	r3, #0
   1fd26:	dced      	bgt.n	1fd04 <__ssvfiscanf_r+0x444>
   1fd28:	4659      	mov	r1, fp
   1fd2a:	4638      	mov	r0, r7
   1fd2c:	f7ff fd6a 	bl	1f804 <__ssrefill_r>
   1fd30:	2800      	cmp	r0, #0
   1fd32:	f47f aef6 	bne.w	1fb22 <__ssvfiscanf_r+0x262>
   1fd36:	f8db 2000 	ldr.w	r2, [fp]
   1fd3a:	7813      	ldrb	r3, [r2, #0]
   1fd3c:	f818 3003 	ldrb.w	r3, [r8, r3]
   1fd40:	3201      	adds	r2, #1
   1fd42:	2b00      	cmp	r3, #0
   1fd44:	d1e3      	bne.n	1fd0e <__ssvfiscanf_r+0x44e>
   1fd46:	2d00      	cmp	r5, #0
   1fd48:	f47f aeeb 	bne.w	1fb22 <__ssvfiscanf_r+0x262>
   1fd4c:	e604      	b.n	1f958 <__ssvfiscanf_r+0x98>
   1fd4e:	bf00      	nop
   1fd50:	00020bf1 	.word	0x00020bf1
   1fd54:	0001ebe5 	.word	0x0001ebe5
   1fd58:	1e63      	subs	r3, r4, #1
   1fd5a:	2b26      	cmp	r3, #38	; 0x26
   1fd5c:	bf8c      	ite	hi
   1fd5e:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
   1fd62:	2200      	movls	r2, #0
   1fd64:	f04f 0900 	mov.w	r9, #0
   1fd68:	4611      	mov	r1, r2
   1fd6a:	ae0e      	add	r6, sp, #56	; 0x38
   1fd6c:	464b      	mov	r3, r9
   1fd6e:	46b9      	mov	r9, r7
   1fd70:	9f04      	ldr	r7, [sp, #16]
   1fd72:	4652      	mov	r2, sl
   1fd74:	bf88      	it	hi
   1fd76:	2427      	movhi	r4, #39	; 0x27
   1fd78:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
   1fd7c:	46b0      	mov	r8, r6
   1fd7e:	468a      	mov	sl, r1
   1fd80:	f8db 0000 	ldr.w	r0, [fp]
   1fd84:	f890 e000 	ldrb.w	lr, [r0]
   1fd88:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
   1fd8c:	294d      	cmp	r1, #77	; 0x4d
   1fd8e:	d842      	bhi.n	1fe16 <__ssvfiscanf_r+0x556>
   1fd90:	e8df f001 	tbb	[pc, r1]
   1fd94:	418e418e 	.word	0x418e418e
   1fd98:	5d5d6341 	.word	0x5d5d6341
   1fd9c:	5d5d5d5d 	.word	0x5d5d5d5d
   1fda0:	4188885d 	.word	0x4188885d
   1fda4:	41414141 	.word	0x41414141
   1fda8:	58584141 	.word	0x58584141
   1fdac:	58585858 	.word	0x58585858
   1fdb0:	41414141 	.word	0x41414141
   1fdb4:	41414141 	.word	0x41414141
   1fdb8:	41414141 	.word	0x41414141
   1fdbc:	41414141 	.word	0x41414141
   1fdc0:	41412741 	.word	0x41412741
   1fdc4:	41414141 	.word	0x41414141
   1fdc8:	58584141 	.word	0x58584141
   1fdcc:	58585858 	.word	0x58585858
   1fdd0:	41414141 	.word	0x41414141
   1fdd4:	41414141 	.word	0x41414141
   1fdd8:	41414141 	.word	0x41414141
   1fddc:	41414141 	.word	0x41414141
   1fde0:	2741      	.short	0x2741
   1fde2:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
   1fde6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1fdea:	d114      	bne.n	1fe16 <__ssvfiscanf_r+0x556>
   1fdec:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   1fdf0:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
   1fdf4:	2710      	movs	r7, #16
   1fdf6:	f8db 1004 	ldr.w	r1, [fp, #4]
   1fdfa:	f888 e000 	strb.w	lr, [r8]
   1fdfe:	3901      	subs	r1, #1
   1fe00:	2900      	cmp	r1, #0
   1fe02:	f108 0801 	add.w	r8, r8, #1
   1fe06:	f8cb 1004 	str.w	r1, [fp, #4]
   1fe0a:	dd40      	ble.n	1fe8e <__ssvfiscanf_r+0x5ce>
   1fe0c:	3001      	adds	r0, #1
   1fe0e:	f8cb 0000 	str.w	r0, [fp]
   1fe12:	3c01      	subs	r4, #1
   1fe14:	d1b4      	bne.n	1fd80 <__ssvfiscanf_r+0x4c0>
   1fe16:	05e8      	lsls	r0, r5, #23
   1fe18:	9704      	str	r7, [sp, #16]
   1fe1a:	4692      	mov	sl, r2
   1fe1c:	464f      	mov	r7, r9
   1fe1e:	4699      	mov	r9, r3
   1fe20:	d505      	bpl.n	1fe2e <__ssvfiscanf_r+0x56e>
   1fe22:	45b0      	cmp	r8, r6
   1fe24:	f200 8194 	bhi.w	20150 <__ssvfiscanf_r+0x890>
   1fe28:	45b0      	cmp	r8, r6
   1fe2a:	f43f ad95 	beq.w	1f958 <__ssvfiscanf_r+0x98>
   1fe2e:	f015 0410 	ands.w	r4, r5, #16
   1fe32:	f000 80e5 	beq.w	20000 <__ssvfiscanf_r+0x740>
   1fe36:	eba8 0606 	sub.w	r6, r8, r6
   1fe3a:	44b1      	add	r9, r6
   1fe3c:	9e03      	ldr	r6, [sp, #12]
   1fe3e:	44ca      	add	sl, r9
   1fe40:	4634      	mov	r4, r6
   1fe42:	e583      	b.n	1f94c <__ssvfiscanf_r+0x8c>
   1fe44:	2f0a      	cmp	r7, #10
   1fe46:	dde6      	ble.n	1fe16 <__ssvfiscanf_r+0x556>
   1fe48:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1fe4c:	e7d3      	b.n	1fdf6 <__ssvfiscanf_r+0x536>
   1fe4e:	49b3      	ldr	r1, [pc, #716]	; (2011c <__ssvfiscanf_r+0x85c>)
   1fe50:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1fe54:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1fe58:	e7cd      	b.n	1fdf6 <__ssvfiscanf_r+0x536>
   1fe5a:	0529      	lsls	r1, r5, #20
   1fe5c:	d5cb      	bpl.n	1fdf6 <__ssvfiscanf_r+0x536>
   1fe5e:	b917      	cbnz	r7, 1fe66 <__ssvfiscanf_r+0x5a6>
   1fe60:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1fe64:	2708      	movs	r7, #8
   1fe66:	0569      	lsls	r1, r5, #21
   1fe68:	f100 80fa 	bmi.w	20060 <__ssvfiscanf_r+0x7a0>
   1fe6c:	f425 7560 	bic.w	r5, r5, #896	; 0x380
   1fe70:	f1ba 0f00 	cmp.w	sl, #0
   1fe74:	d002      	beq.n	1fe7c <__ssvfiscanf_r+0x5bc>
   1fe76:	f10a 3aff 	add.w	sl, sl, #4294967295
   1fe7a:	3401      	adds	r4, #1
   1fe7c:	f8db 1004 	ldr.w	r1, [fp, #4]
   1fe80:	3901      	subs	r1, #1
   1fe82:	2900      	cmp	r1, #0
   1fe84:	f103 0301 	add.w	r3, r3, #1
   1fe88:	f8cb 1004 	str.w	r1, [fp, #4]
   1fe8c:	dcbe      	bgt.n	1fe0c <__ssvfiscanf_r+0x54c>
   1fe8e:	4659      	mov	r1, fp
   1fe90:	4648      	mov	r0, r9
   1fe92:	9308      	str	r3, [sp, #32]
   1fe94:	9204      	str	r2, [sp, #16]
   1fe96:	f7ff fcb5 	bl	1f804 <__ssrefill_r>
   1fe9a:	9a04      	ldr	r2, [sp, #16]
   1fe9c:	9b08      	ldr	r3, [sp, #32]
   1fe9e:	2800      	cmp	r0, #0
   1fea0:	d0b7      	beq.n	1fe12 <__ssvfiscanf_r+0x552>
   1fea2:	e7b8      	b.n	1fe16 <__ssvfiscanf_r+0x556>
   1fea4:	499d      	ldr	r1, [pc, #628]	; (2011c <__ssvfiscanf_r+0x85c>)
   1fea6:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1feaa:	2f08      	cmp	r7, #8
   1feac:	dccc      	bgt.n	1fe48 <__ssvfiscanf_r+0x588>
   1feae:	e7b2      	b.n	1fe16 <__ssvfiscanf_r+0x556>
   1feb0:	0629      	lsls	r1, r5, #24
   1feb2:	d5b0      	bpl.n	1fe16 <__ssvfiscanf_r+0x556>
   1feb4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   1feb8:	e79d      	b.n	1fdf6 <__ssvfiscanf_r+0x536>
   1feba:	2c00      	cmp	r4, #0
   1febc:	bf08      	it	eq
   1febe:	f04f 34ff 	moveq.w	r4, #4294967295
   1fec2:	f015 0601 	ands.w	r6, r5, #1
   1fec6:	f47f aeea 	bne.w	1fc9e <__ssvfiscanf_r+0x3de>
   1feca:	06eb      	lsls	r3, r5, #27
   1fecc:	f140 80f4 	bpl.w	200b8 <__ssvfiscanf_r+0x7f8>
   1fed0:	f000 fb64 	bl	2059c <__locale_ctype_ptr>
   1fed4:	f8db 3000 	ldr.w	r3, [fp]
   1fed8:	781a      	ldrb	r2, [r3, #0]
   1feda:	4410      	add	r0, r2
   1fedc:	3301      	adds	r3, #1
   1fede:	7842      	ldrb	r2, [r0, #1]
   1fee0:	0715      	lsls	r5, r2, #28
   1fee2:	d411      	bmi.n	1ff08 <__ssvfiscanf_r+0x648>
   1fee4:	f8db 2004 	ldr.w	r2, [fp, #4]
   1fee8:	f8cb 3000 	str.w	r3, [fp]
   1feec:	3601      	adds	r6, #1
   1feee:	3a01      	subs	r2, #1
   1fef0:	42b4      	cmp	r4, r6
   1fef2:	f8cb 2004 	str.w	r2, [fp, #4]
   1fef6:	d007      	beq.n	1ff08 <__ssvfiscanf_r+0x648>
   1fef8:	2a00      	cmp	r2, #0
   1fefa:	dce9      	bgt.n	1fed0 <__ssvfiscanf_r+0x610>
   1fefc:	4659      	mov	r1, fp
   1fefe:	4638      	mov	r0, r7
   1ff00:	f7ff fc80 	bl	1f804 <__ssrefill_r>
   1ff04:	2800      	cmp	r0, #0
   1ff06:	d0e3      	beq.n	1fed0 <__ssvfiscanf_r+0x610>
   1ff08:	44b2      	add	sl, r6
   1ff0a:	9e03      	ldr	r6, [sp, #12]
   1ff0c:	4634      	mov	r4, r6
   1ff0e:	e51d      	b.n	1f94c <__ssvfiscanf_r+0x8c>
   1ff10:	9a06      	ldr	r2, [sp, #24]
   1ff12:	6815      	ldr	r5, [r2, #0]
   1ff14:	1d16      	adds	r6, r2, #4
   1ff16:	46a9      	mov	r9, r5
   1ff18:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1ff1c:	f8db 3000 	ldr.w	r3, [fp]
   1ff20:	781a      	ldrb	r2, [r3, #0]
   1ff22:	f818 2002 	ldrb.w	r2, [r8, r2]
   1ff26:	1c59      	adds	r1, r3, #1
   1ff28:	b1c2      	cbz	r2, 1ff5c <__ssvfiscanf_r+0x69c>
   1ff2a:	f8db 2004 	ldr.w	r2, [fp, #4]
   1ff2e:	f8cb 1000 	str.w	r1, [fp]
   1ff32:	3a01      	subs	r2, #1
   1ff34:	f8cb 2004 	str.w	r2, [fp, #4]
   1ff38:	781b      	ldrb	r3, [r3, #0]
   1ff3a:	f809 3b01 	strb.w	r3, [r9], #1
   1ff3e:	3c01      	subs	r4, #1
   1ff40:	d00c      	beq.n	1ff5c <__ssvfiscanf_r+0x69c>
   1ff42:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ff46:	2b00      	cmp	r3, #0
   1ff48:	dce8      	bgt.n	1ff1c <__ssvfiscanf_r+0x65c>
   1ff4a:	4659      	mov	r1, fp
   1ff4c:	4638      	mov	r0, r7
   1ff4e:	f7ff fc59 	bl	1f804 <__ssrefill_r>
   1ff52:	2800      	cmp	r0, #0
   1ff54:	d0e2      	beq.n	1ff1c <__ssvfiscanf_r+0x65c>
   1ff56:	454d      	cmp	r5, r9
   1ff58:	f43f ae02 	beq.w	1fb60 <__ssvfiscanf_r+0x2a0>
   1ff5c:	ebb9 0505 	subs.w	r5, r9, r5
   1ff60:	f43f acfa 	beq.w	1f958 <__ssvfiscanf_r+0x98>
   1ff64:	9a05      	ldr	r2, [sp, #20]
   1ff66:	9606      	str	r6, [sp, #24]
   1ff68:	2300      	movs	r3, #0
   1ff6a:	3201      	adds	r2, #1
   1ff6c:	9205      	str	r2, [sp, #20]
   1ff6e:	f889 3000 	strb.w	r3, [r9]
   1ff72:	e5d6      	b.n	1fb22 <__ssvfiscanf_r+0x262>
   1ff74:	ab0c      	add	r3, sp, #48	; 0x30
   1ff76:	4618      	mov	r0, r3
   1ff78:	2208      	movs	r2, #8
   1ff7a:	2100      	movs	r1, #0
   1ff7c:	9308      	str	r3, [sp, #32]
   1ff7e:	f7fd fa97 	bl	1d4b0 <memset>
   1ff82:	f015 0310 	ands.w	r3, r5, #16
   1ff86:	9309      	str	r3, [sp, #36]	; 0x24
   1ff88:	d06d      	beq.n	20066 <__ssvfiscanf_r+0x7a6>
   1ff8a:	f04f 0900 	mov.w	r9, #0
   1ff8e:	2c00      	cmp	r4, #0
   1ff90:	f43f aea9 	beq.w	1fce6 <__ssvfiscanf_r+0x426>
   1ff94:	2500      	movs	r5, #0
   1ff96:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1ff9a:	f000 faed 	bl	20578 <__locale_mb_cur_max>
   1ff9e:	4285      	cmp	r5, r0
   1ffa0:	f43f adde 	beq.w	1fb60 <__ssvfiscanf_r+0x2a0>
   1ffa4:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1ffa8:	f812 0b01 	ldrb.w	r0, [r2], #1
   1ffac:	f8cb 2000 	str.w	r2, [fp]
   1ffb0:	3b01      	subs	r3, #1
   1ffb2:	9a08      	ldr	r2, [sp, #32]
   1ffb4:	9200      	str	r2, [sp, #0]
   1ffb6:	1c6e      	adds	r6, r5, #1
   1ffb8:	f8cb 3004 	str.w	r3, [fp, #4]
   1ffbc:	f808 0005 	strb.w	r0, [r8, r5]
   1ffc0:	4633      	mov	r3, r6
   1ffc2:	4642      	mov	r2, r8
   1ffc4:	4649      	mov	r1, r9
   1ffc6:	4638      	mov	r0, r7
   1ffc8:	f000 faf6 	bl	205b8 <_mbrtowc_r>
   1ffcc:	1c43      	adds	r3, r0, #1
   1ffce:	f43f adc7 	beq.w	1fb60 <__ssvfiscanf_r+0x2a0>
   1ffd2:	2800      	cmp	r0, #0
   1ffd4:	d15d      	bne.n	20092 <__ssvfiscanf_r+0x7d2>
   1ffd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ffd8:	2b00      	cmp	r3, #0
   1ffda:	d15e      	bne.n	2009a <__ssvfiscanf_r+0x7da>
   1ffdc:	f8c9 3000 	str.w	r3, [r9]
   1ffe0:	44b2      	add	sl, r6
   1ffe2:	3c01      	subs	r4, #1
   1ffe4:	f109 0904 	add.w	r9, r9, #4
   1ffe8:	2500      	movs	r5, #0
   1ffea:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ffee:	2b00      	cmp	r3, #0
   1fff0:	dd2d      	ble.n	2004e <__ssvfiscanf_r+0x78e>
   1fff2:	2c00      	cmp	r4, #0
   1fff4:	d1d1      	bne.n	1ff9a <__ssvfiscanf_r+0x6da>
   1fff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fff8:	2b00      	cmp	r3, #0
   1fffa:	f43f ae71 	beq.w	1fce0 <__ssvfiscanf_r+0x420>
   1fffe:	e672      	b.n	1fce6 <__ssvfiscanf_r+0x426>
   20000:	4622      	mov	r2, r4
   20002:	4631      	mov	r1, r6
   20004:	f888 4000 	strb.w	r4, [r8]
   20008:	9b04      	ldr	r3, [sp, #16]
   2000a:	9c07      	ldr	r4, [sp, #28]
   2000c:	4638      	mov	r0, r7
   2000e:	47a0      	blx	r4
   20010:	06a9      	lsls	r1, r5, #26
   20012:	d438      	bmi.n	20086 <__ssvfiscanf_r+0x7c6>
   20014:	076a      	lsls	r2, r5, #29
   20016:	f100 80be 	bmi.w	20196 <__ssvfiscanf_r+0x8d6>
   2001a:	f015 0201 	ands.w	r2, r5, #1
   2001e:	d132      	bne.n	20086 <__ssvfiscanf_r+0x7c6>
   20020:	07ab      	lsls	r3, r5, #30
   20022:	d530      	bpl.n	20086 <__ssvfiscanf_r+0x7c6>
   20024:	9b07      	ldr	r3, [sp, #28]
   20026:	4619      	mov	r1, r3
   20028:	4b3d      	ldr	r3, [pc, #244]	; (20120 <__ssvfiscanf_r+0x860>)
   2002a:	4299      	cmp	r1, r3
   2002c:	4638      	mov	r0, r7
   2002e:	9b04      	ldr	r3, [sp, #16]
   20030:	4631      	mov	r1, r6
   20032:	f000 8105 	beq.w	20240 <__ssvfiscanf_r+0x980>
   20036:	f000 febb 	bl	20db0 <_strtoll_r>
   2003a:	9a06      	ldr	r2, [sp, #24]
   2003c:	6813      	ldr	r3, [r2, #0]
   2003e:	e9c3 0100 	strd	r0, r1, [r3]
   20042:	3204      	adds	r2, #4
   20044:	9206      	str	r2, [sp, #24]
   20046:	9b05      	ldr	r3, [sp, #20]
   20048:	3301      	adds	r3, #1
   2004a:	9305      	str	r3, [sp, #20]
   2004c:	e6f3      	b.n	1fe36 <__ssvfiscanf_r+0x576>
   2004e:	4659      	mov	r1, fp
   20050:	4638      	mov	r0, r7
   20052:	f7ff fbd7 	bl	1f804 <__ssrefill_r>
   20056:	2800      	cmp	r0, #0
   20058:	d0cb      	beq.n	1fff2 <__ssvfiscanf_r+0x732>
   2005a:	2d00      	cmp	r5, #0
   2005c:	d0cb      	beq.n	1fff6 <__ssvfiscanf_r+0x736>
   2005e:	e57f      	b.n	1fb60 <__ssvfiscanf_r+0x2a0>
   20060:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
   20064:	e6c7      	b.n	1fdf6 <__ssvfiscanf_r+0x536>
   20066:	9a06      	ldr	r2, [sp, #24]
   20068:	4613      	mov	r3, r2
   2006a:	3304      	adds	r3, #4
   2006c:	f8d2 9000 	ldr.w	r9, [r2]
   20070:	9306      	str	r3, [sp, #24]
   20072:	2c00      	cmp	r4, #0
   20074:	d18e      	bne.n	1ff94 <__ssvfiscanf_r+0x6d4>
   20076:	e633      	b.n	1fce0 <__ssvfiscanf_r+0x420>
   20078:	9a06      	ldr	r2, [sp, #24]
   2007a:	4613      	mov	r3, r2
   2007c:	3304      	adds	r3, #4
   2007e:	f8d2 9000 	ldr.w	r9, [r2]
   20082:	9306      	str	r3, [sp, #24]
   20084:	e619      	b.n	1fcba <__ssvfiscanf_r+0x3fa>
   20086:	9a06      	ldr	r2, [sp, #24]
   20088:	6813      	ldr	r3, [r2, #0]
   2008a:	3204      	adds	r2, #4
   2008c:	9206      	str	r2, [sp, #24]
   2008e:	6018      	str	r0, [r3, #0]
   20090:	e7d9      	b.n	20046 <__ssvfiscanf_r+0x786>
   20092:	3002      	adds	r0, #2
   20094:	d105      	bne.n	200a2 <__ssvfiscanf_r+0x7e2>
   20096:	4635      	mov	r5, r6
   20098:	e7a7      	b.n	1ffea <__ssvfiscanf_r+0x72a>
   2009a:	44b2      	add	sl, r6
   2009c:	3c01      	subs	r4, #1
   2009e:	4605      	mov	r5, r0
   200a0:	e7a3      	b.n	1ffea <__ssvfiscanf_r+0x72a>
   200a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   200a4:	44b2      	add	sl, r6
   200a6:	3c01      	subs	r4, #1
   200a8:	2b00      	cmp	r3, #0
   200aa:	d09b      	beq.n	1ffe4 <__ssvfiscanf_r+0x724>
   200ac:	2500      	movs	r5, #0
   200ae:	e79c      	b.n	1ffea <__ssvfiscanf_r+0x72a>
   200b0:	2d00      	cmp	r5, #0
   200b2:	f47f ad36 	bne.w	1fb22 <__ssvfiscanf_r+0x262>
   200b6:	e553      	b.n	1fb60 <__ssvfiscanf_r+0x2a0>
   200b8:	9a06      	ldr	r2, [sp, #24]
   200ba:	6816      	ldr	r6, [r2, #0]
   200bc:	f102 0804 	add.w	r8, r2, #4
   200c0:	4635      	mov	r5, r6
   200c2:	f000 fa6b 	bl	2059c <__locale_ctype_ptr>
   200c6:	f8db 2000 	ldr.w	r2, [fp]
   200ca:	7813      	ldrb	r3, [r2, #0]
   200cc:	4418      	add	r0, r3
   200ce:	1c51      	adds	r1, r2, #1
   200d0:	7843      	ldrb	r3, [r0, #1]
   200d2:	0718      	lsls	r0, r3, #28
   200d4:	d415      	bmi.n	20102 <__ssvfiscanf_r+0x842>
   200d6:	f8db 3004 	ldr.w	r3, [fp, #4]
   200da:	f8cb 1000 	str.w	r1, [fp]
   200de:	3b01      	subs	r3, #1
   200e0:	f8cb 3004 	str.w	r3, [fp, #4]
   200e4:	7813      	ldrb	r3, [r2, #0]
   200e6:	f805 3b01 	strb.w	r3, [r5], #1
   200ea:	3c01      	subs	r4, #1
   200ec:	d009      	beq.n	20102 <__ssvfiscanf_r+0x842>
   200ee:	f8db 3004 	ldr.w	r3, [fp, #4]
   200f2:	2b00      	cmp	r3, #0
   200f4:	dce5      	bgt.n	200c2 <__ssvfiscanf_r+0x802>
   200f6:	4659      	mov	r1, fp
   200f8:	4638      	mov	r0, r7
   200fa:	f7ff fb83 	bl	1f804 <__ssrefill_r>
   200fe:	2800      	cmp	r0, #0
   20100:	d0df      	beq.n	200c2 <__ssvfiscanf_r+0x802>
   20102:	1bae      	subs	r6, r5, r6
   20104:	9a05      	ldr	r2, [sp, #20]
   20106:	f8cd 8018 	str.w	r8, [sp, #24]
   2010a:	44b2      	add	sl, r6
   2010c:	9e03      	ldr	r6, [sp, #12]
   2010e:	2300      	movs	r3, #0
   20110:	3201      	adds	r2, #1
   20112:	9205      	str	r2, [sp, #20]
   20114:	702b      	strb	r3, [r5, #0]
   20116:	4634      	mov	r4, r6
   20118:	e418      	b.n	1f94c <__ssvfiscanf_r+0x8c>
   2011a:	bf00      	nop
   2011c:	00023654 	.word	0x00023654
   20120:	0001ebe5 	.word	0x0001ebe5
   20124:	9d06      	ldr	r5, [sp, #24]
   20126:	4623      	mov	r3, r4
   20128:	6829      	ldr	r1, [r5, #0]
   2012a:	f8cd b000 	str.w	fp, [sp]
   2012e:	2201      	movs	r2, #1
   20130:	4638      	mov	r0, r7
   20132:	f7ff fb85 	bl	1f840 <_sfread_r>
   20136:	1d2e      	adds	r6, r5, #4
   20138:	2800      	cmp	r0, #0
   2013a:	f43f ad11 	beq.w	1fb60 <__ssvfiscanf_r+0x2a0>
   2013e:	9b05      	ldr	r3, [sp, #20]
   20140:	9606      	str	r6, [sp, #24]
   20142:	9e03      	ldr	r6, [sp, #12]
   20144:	3301      	adds	r3, #1
   20146:	4482      	add	sl, r0
   20148:	9305      	str	r3, [sp, #20]
   2014a:	4634      	mov	r4, r6
   2014c:	f7ff bbfe 	b.w	1f94c <__ssvfiscanf_r+0x8c>
   20150:	f818 1c01 	ldrb.w	r1, [r8, #-1]
   20154:	465a      	mov	r2, fp
   20156:	4638      	mov	r0, r7
   20158:	f7ff fb14 	bl	1f784 <_sungetc_r>
   2015c:	f108 38ff 	add.w	r8, r8, #4294967295
   20160:	e662      	b.n	1fe28 <__ssvfiscanf_r+0x568>
   20162:	4659      	mov	r1, fp
   20164:	4638      	mov	r0, r7
   20166:	f7ff fb4d 	bl	1f804 <__ssrefill_r>
   2016a:	2800      	cmp	r0, #0
   2016c:	f43f ac84 	beq.w	1fa78 <__ssvfiscanf_r+0x1b8>
   20170:	e4f6      	b.n	1fb60 <__ssvfiscanf_r+0x2a0>
   20172:	f896 8002 	ldrb.w	r8, [r6, #2]
   20176:	f045 0502 	orr.w	r5, r5, #2
   2017a:	3602      	adds	r6, #2
   2017c:	f7ff bbf6 	b.w	1f96c <__ssvfiscanf_r+0xac>
   20180:	9a06      	ldr	r2, [sp, #24]
   20182:	9e03      	ldr	r6, [sp, #12]
   20184:	6813      	ldr	r3, [r2, #0]
   20186:	f8c3 a000 	str.w	sl, [r3]
   2018a:	4613      	mov	r3, r2
   2018c:	3304      	adds	r3, #4
   2018e:	9306      	str	r3, [sp, #24]
   20190:	4634      	mov	r4, r6
   20192:	f7ff bbdb 	b.w	1f94c <__ssvfiscanf_r+0x8c>
   20196:	9a06      	ldr	r2, [sp, #24]
   20198:	6813      	ldr	r3, [r2, #0]
   2019a:	3204      	adds	r2, #4
   2019c:	9206      	str	r2, [sp, #24]
   2019e:	8018      	strh	r0, [r3, #0]
   201a0:	e751      	b.n	20046 <__ssvfiscanf_r+0x786>
   201a2:	9a06      	ldr	r2, [sp, #24]
   201a4:	9e03      	ldr	r6, [sp, #12]
   201a6:	6813      	ldr	r3, [r2, #0]
   201a8:	f8a3 a000 	strh.w	sl, [r3]
   201ac:	4613      	mov	r3, r2
   201ae:	3304      	adds	r3, #4
   201b0:	9306      	str	r3, [sp, #24]
   201b2:	4634      	mov	r4, r6
   201b4:	f7ff bbca 	b.w	1f94c <__ssvfiscanf_r+0x8c>
   201b8:	f000 f9de 	bl	20578 <__locale_mb_cur_max>
   201bc:	4286      	cmp	r6, r0
   201be:	f43f accf 	beq.w	1fb60 <__ssvfiscanf_r+0x2a0>
   201c2:	e89b 000c 	ldmia.w	fp, {r2, r3}
   201c6:	f812 0b01 	ldrb.w	r0, [r2], #1
   201ca:	f8cb 2000 	str.w	r2, [fp]
   201ce:	3b01      	subs	r3, #1
   201d0:	9a08      	ldr	r2, [sp, #32]
   201d2:	9200      	str	r2, [sp, #0]
   201d4:	1c75      	adds	r5, r6, #1
   201d6:	f8cb 3004 	str.w	r3, [fp, #4]
   201da:	4649      	mov	r1, r9
   201dc:	f808 0006 	strb.w	r0, [r8, r6]
   201e0:	462b      	mov	r3, r5
   201e2:	4642      	mov	r2, r8
   201e4:	4638      	mov	r0, r7
   201e6:	f000 f9e7 	bl	205b8 <_mbrtowc_r>
   201ea:	1c41      	adds	r1, r0, #1
   201ec:	f43f acb8 	beq.w	1fb60 <__ssvfiscanf_r+0x2a0>
   201f0:	b198      	cbz	r0, 2021a <__ssvfiscanf_r+0x95a>
   201f2:	3002      	adds	r0, #2
   201f4:	bf08      	it	eq
   201f6:	462e      	moveq	r6, r5
   201f8:	d12e      	bne.n	20258 <__ssvfiscanf_r+0x998>
   201fa:	f8db 3004 	ldr.w	r3, [fp, #4]
   201fe:	2b00      	cmp	r3, #0
   20200:	f73f ad5e 	bgt.w	1fcc0 <__ssvfiscanf_r+0x400>
   20204:	4659      	mov	r1, fp
   20206:	4638      	mov	r0, r7
   20208:	f7ff fafc 	bl	1f804 <__ssrefill_r>
   2020c:	2800      	cmp	r0, #0
   2020e:	f43f ad57 	beq.w	1fcc0 <__ssvfiscanf_r+0x400>
   20212:	2e00      	cmp	r6, #0
   20214:	f47f aca4 	bne.w	1fb60 <__ssvfiscanf_r+0x2a0>
   20218:	e55e      	b.n	1fcd8 <__ssvfiscanf_r+0x418>
   2021a:	f8c9 0000 	str.w	r0, [r9]
   2021e:	f000 f99d 	bl	2055c <iswspace>
   20222:	4606      	mov	r6, r0
   20224:	b178      	cbz	r0, 20246 <__ssvfiscanf_r+0x986>
   20226:	2d00      	cmp	r5, #0
   20228:	f43f ad56 	beq.w	1fcd8 <__ssvfiscanf_r+0x418>
   2022c:	4445      	add	r5, r8
   2022e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   20232:	465a      	mov	r2, fp
   20234:	4638      	mov	r0, r7
   20236:	f7ff faa5 	bl	1f784 <_sungetc_r>
   2023a:	4545      	cmp	r5, r8
   2023c:	d1f7      	bne.n	2022e <__ssvfiscanf_r+0x96e>
   2023e:	e54b      	b.n	1fcd8 <__ssvfiscanf_r+0x418>
   20240:	f000 fea6 	bl	20f90 <_strtoull_r>
   20244:	e6f9      	b.n	2003a <__ssvfiscanf_r+0x77a>
   20246:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20248:	44aa      	add	sl, r5
   2024a:	3c01      	subs	r4, #1
   2024c:	2b00      	cmp	r3, #0
   2024e:	d1d4      	bne.n	201fa <__ssvfiscanf_r+0x93a>
   20250:	f109 0904 	add.w	r9, r9, #4
   20254:	461e      	mov	r6, r3
   20256:	e7d0      	b.n	201fa <__ssvfiscanf_r+0x93a>
   20258:	f8d9 0000 	ldr.w	r0, [r9]
   2025c:	e7df      	b.n	2021e <__ssvfiscanf_r+0x95e>
   2025e:	bf00      	nop

00020260 <__submore>:
   20260:	f101 0340 	add.w	r3, r1, #64	; 0x40
   20264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20268:	460c      	mov	r4, r1
   2026a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   2026c:	4299      	cmp	r1, r3
   2026e:	d014      	beq.n	2029a <__submore+0x3a>
   20270:	6b66      	ldr	r6, [r4, #52]	; 0x34
   20272:	0077      	lsls	r7, r6, #1
   20274:	463a      	mov	r2, r7
   20276:	f000 fa47 	bl	20708 <_realloc_r>
   2027a:	4605      	mov	r5, r0
   2027c:	b340      	cbz	r0, 202d0 <__submore+0x70>
   2027e:	eb00 0806 	add.w	r8, r0, r6
   20282:	4632      	mov	r2, r6
   20284:	4640      	mov	r0, r8
   20286:	4629      	mov	r1, r5
   20288:	f7fd f878 	bl	1d37c <memcpy>
   2028c:	f8c4 8000 	str.w	r8, [r4]
   20290:	6325      	str	r5, [r4, #48]	; 0x30
   20292:	6367      	str	r7, [r4, #52]	; 0x34
   20294:	2000      	movs	r0, #0
   20296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2029a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2029e:	f7fd fe5d 	bl	1df5c <_malloc_r>
   202a2:	b1a8      	cbz	r0, 202d0 <__submore+0x70>
   202a4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   202a8:	6320      	str	r0, [r4, #48]	; 0x30
   202aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   202ae:	6362      	str	r2, [r4, #52]	; 0x34
   202b0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   202b4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   202b8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   202bc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   202c0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   202c4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   202c8:	6020      	str	r0, [r4, #0]
   202ca:	2000      	movs	r0, #0
   202cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   202d0:	f04f 30ff 	mov.w	r0, #4294967295
   202d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000202d8 <__env_lock>:
   202d8:	4801      	ldr	r0, [pc, #4]	; (202e0 <__env_lock+0x8>)
   202da:	f7fd be39 	b.w	1df50 <__retarget_lock_acquire_recursive>
   202de:	bf00      	nop
   202e0:	2000a818 	.word	0x2000a818

000202e4 <__env_unlock>:
   202e4:	4801      	ldr	r0, [pc, #4]	; (202ec <__env_unlock+0x8>)
   202e6:	f7fd be37 	b.w	1df58 <__retarget_lock_release_recursive>
   202ea:	bf00      	nop
   202ec:	2000a818 	.word	0x2000a818

000202f0 <_malloc_trim_r>:
   202f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202f2:	4f24      	ldr	r7, [pc, #144]	; (20384 <_malloc_trim_r+0x94>)
   202f4:	460c      	mov	r4, r1
   202f6:	4606      	mov	r6, r0
   202f8:	f7fe f932 	bl	1e560 <__malloc_lock>
   202fc:	68bb      	ldr	r3, [r7, #8]
   202fe:	685d      	ldr	r5, [r3, #4]
   20300:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   20304:	310f      	adds	r1, #15
   20306:	f025 0503 	bic.w	r5, r5, #3
   2030a:	4429      	add	r1, r5
   2030c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   20310:	f021 010f 	bic.w	r1, r1, #15
   20314:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   20318:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2031c:	db07      	blt.n	2032e <_malloc_trim_r+0x3e>
   2031e:	2100      	movs	r1, #0
   20320:	4630      	mov	r0, r6
   20322:	f7fe f929 	bl	1e578 <_sbrk_r>
   20326:	68bb      	ldr	r3, [r7, #8]
   20328:	442b      	add	r3, r5
   2032a:	4298      	cmp	r0, r3
   2032c:	d004      	beq.n	20338 <_malloc_trim_r+0x48>
   2032e:	4630      	mov	r0, r6
   20330:	f7fe f91c 	bl	1e56c <__malloc_unlock>
   20334:	2000      	movs	r0, #0
   20336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20338:	4261      	negs	r1, r4
   2033a:	4630      	mov	r0, r6
   2033c:	f7fe f91c 	bl	1e578 <_sbrk_r>
   20340:	3001      	adds	r0, #1
   20342:	d00d      	beq.n	20360 <_malloc_trim_r+0x70>
   20344:	4b10      	ldr	r3, [pc, #64]	; (20388 <_malloc_trim_r+0x98>)
   20346:	68ba      	ldr	r2, [r7, #8]
   20348:	6819      	ldr	r1, [r3, #0]
   2034a:	1b2d      	subs	r5, r5, r4
   2034c:	f045 0501 	orr.w	r5, r5, #1
   20350:	4630      	mov	r0, r6
   20352:	1b09      	subs	r1, r1, r4
   20354:	6055      	str	r5, [r2, #4]
   20356:	6019      	str	r1, [r3, #0]
   20358:	f7fe f908 	bl	1e56c <__malloc_unlock>
   2035c:	2001      	movs	r0, #1
   2035e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20360:	2100      	movs	r1, #0
   20362:	4630      	mov	r0, r6
   20364:	f7fe f908 	bl	1e578 <_sbrk_r>
   20368:	68ba      	ldr	r2, [r7, #8]
   2036a:	1a83      	subs	r3, r0, r2
   2036c:	2b0f      	cmp	r3, #15
   2036e:	ddde      	ble.n	2032e <_malloc_trim_r+0x3e>
   20370:	4c06      	ldr	r4, [pc, #24]	; (2038c <_malloc_trim_r+0x9c>)
   20372:	4905      	ldr	r1, [pc, #20]	; (20388 <_malloc_trim_r+0x98>)
   20374:	6824      	ldr	r4, [r4, #0]
   20376:	f043 0301 	orr.w	r3, r3, #1
   2037a:	1b00      	subs	r0, r0, r4
   2037c:	6053      	str	r3, [r2, #4]
   2037e:	6008      	str	r0, [r1, #0]
   20380:	e7d5      	b.n	2032e <_malloc_trim_r+0x3e>
   20382:	bf00      	nop
   20384:	200006c4 	.word	0x200006c4
   20388:	2000a52c 	.word	0x2000a52c
   2038c:	20000acc 	.word	0x20000acc

00020390 <_free_r>:
   20390:	2900      	cmp	r1, #0
   20392:	d044      	beq.n	2041e <_free_r+0x8e>
   20394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20398:	460d      	mov	r5, r1
   2039a:	4680      	mov	r8, r0
   2039c:	f7fe f8e0 	bl	1e560 <__malloc_lock>
   203a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   203a4:	4969      	ldr	r1, [pc, #420]	; (2054c <_free_r+0x1bc>)
   203a6:	f027 0301 	bic.w	r3, r7, #1
   203aa:	f1a5 0408 	sub.w	r4, r5, #8
   203ae:	18e2      	adds	r2, r4, r3
   203b0:	688e      	ldr	r6, [r1, #8]
   203b2:	6850      	ldr	r0, [r2, #4]
   203b4:	42b2      	cmp	r2, r6
   203b6:	f020 0003 	bic.w	r0, r0, #3
   203ba:	d05e      	beq.n	2047a <_free_r+0xea>
   203bc:	07fe      	lsls	r6, r7, #31
   203be:	6050      	str	r0, [r2, #4]
   203c0:	d40b      	bmi.n	203da <_free_r+0x4a>
   203c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
   203c6:	1be4      	subs	r4, r4, r7
   203c8:	f101 0e08 	add.w	lr, r1, #8
   203cc:	68a5      	ldr	r5, [r4, #8]
   203ce:	4575      	cmp	r5, lr
   203d0:	443b      	add	r3, r7
   203d2:	d06d      	beq.n	204b0 <_free_r+0x120>
   203d4:	68e7      	ldr	r7, [r4, #12]
   203d6:	60ef      	str	r7, [r5, #12]
   203d8:	60bd      	str	r5, [r7, #8]
   203da:	1815      	adds	r5, r2, r0
   203dc:	686d      	ldr	r5, [r5, #4]
   203de:	07ed      	lsls	r5, r5, #31
   203e0:	d53e      	bpl.n	20460 <_free_r+0xd0>
   203e2:	f043 0201 	orr.w	r2, r3, #1
   203e6:	6062      	str	r2, [r4, #4]
   203e8:	50e3      	str	r3, [r4, r3]
   203ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   203ee:	d217      	bcs.n	20420 <_free_r+0x90>
   203f0:	08db      	lsrs	r3, r3, #3
   203f2:	1c58      	adds	r0, r3, #1
   203f4:	109a      	asrs	r2, r3, #2
   203f6:	684d      	ldr	r5, [r1, #4]
   203f8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   203fc:	60a7      	str	r7, [r4, #8]
   203fe:	2301      	movs	r3, #1
   20400:	4093      	lsls	r3, r2
   20402:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   20406:	432b      	orrs	r3, r5
   20408:	3a08      	subs	r2, #8
   2040a:	60e2      	str	r2, [r4, #12]
   2040c:	604b      	str	r3, [r1, #4]
   2040e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   20412:	60fc      	str	r4, [r7, #12]
   20414:	4640      	mov	r0, r8
   20416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2041a:	f7fe b8a7 	b.w	1e56c <__malloc_unlock>
   2041e:	4770      	bx	lr
   20420:	0a5a      	lsrs	r2, r3, #9
   20422:	2a04      	cmp	r2, #4
   20424:	d852      	bhi.n	204cc <_free_r+0x13c>
   20426:	099a      	lsrs	r2, r3, #6
   20428:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2042c:	00ff      	lsls	r7, r7, #3
   2042e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   20432:	19c8      	adds	r0, r1, r7
   20434:	59ca      	ldr	r2, [r1, r7]
   20436:	3808      	subs	r0, #8
   20438:	4290      	cmp	r0, r2
   2043a:	d04f      	beq.n	204dc <_free_r+0x14c>
   2043c:	6851      	ldr	r1, [r2, #4]
   2043e:	f021 0103 	bic.w	r1, r1, #3
   20442:	428b      	cmp	r3, r1
   20444:	d232      	bcs.n	204ac <_free_r+0x11c>
   20446:	6892      	ldr	r2, [r2, #8]
   20448:	4290      	cmp	r0, r2
   2044a:	d1f7      	bne.n	2043c <_free_r+0xac>
   2044c:	68c3      	ldr	r3, [r0, #12]
   2044e:	60a0      	str	r0, [r4, #8]
   20450:	60e3      	str	r3, [r4, #12]
   20452:	609c      	str	r4, [r3, #8]
   20454:	60c4      	str	r4, [r0, #12]
   20456:	4640      	mov	r0, r8
   20458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2045c:	f7fe b886 	b.w	1e56c <__malloc_unlock>
   20460:	6895      	ldr	r5, [r2, #8]
   20462:	4f3b      	ldr	r7, [pc, #236]	; (20550 <_free_r+0x1c0>)
   20464:	42bd      	cmp	r5, r7
   20466:	4403      	add	r3, r0
   20468:	d040      	beq.n	204ec <_free_r+0x15c>
   2046a:	68d0      	ldr	r0, [r2, #12]
   2046c:	60e8      	str	r0, [r5, #12]
   2046e:	f043 0201 	orr.w	r2, r3, #1
   20472:	6085      	str	r5, [r0, #8]
   20474:	6062      	str	r2, [r4, #4]
   20476:	50e3      	str	r3, [r4, r3]
   20478:	e7b7      	b.n	203ea <_free_r+0x5a>
   2047a:	07ff      	lsls	r7, r7, #31
   2047c:	4403      	add	r3, r0
   2047e:	d407      	bmi.n	20490 <_free_r+0x100>
   20480:	f855 2c08 	ldr.w	r2, [r5, #-8]
   20484:	1aa4      	subs	r4, r4, r2
   20486:	4413      	add	r3, r2
   20488:	68a0      	ldr	r0, [r4, #8]
   2048a:	68e2      	ldr	r2, [r4, #12]
   2048c:	60c2      	str	r2, [r0, #12]
   2048e:	6090      	str	r0, [r2, #8]
   20490:	4a30      	ldr	r2, [pc, #192]	; (20554 <_free_r+0x1c4>)
   20492:	6812      	ldr	r2, [r2, #0]
   20494:	f043 0001 	orr.w	r0, r3, #1
   20498:	4293      	cmp	r3, r2
   2049a:	6060      	str	r0, [r4, #4]
   2049c:	608c      	str	r4, [r1, #8]
   2049e:	d3b9      	bcc.n	20414 <_free_r+0x84>
   204a0:	4b2d      	ldr	r3, [pc, #180]	; (20558 <_free_r+0x1c8>)
   204a2:	4640      	mov	r0, r8
   204a4:	6819      	ldr	r1, [r3, #0]
   204a6:	f7ff ff23 	bl	202f0 <_malloc_trim_r>
   204aa:	e7b3      	b.n	20414 <_free_r+0x84>
   204ac:	4610      	mov	r0, r2
   204ae:	e7cd      	b.n	2044c <_free_r+0xbc>
   204b0:	1811      	adds	r1, r2, r0
   204b2:	6849      	ldr	r1, [r1, #4]
   204b4:	07c9      	lsls	r1, r1, #31
   204b6:	d444      	bmi.n	20542 <_free_r+0x1b2>
   204b8:	6891      	ldr	r1, [r2, #8]
   204ba:	68d2      	ldr	r2, [r2, #12]
   204bc:	60ca      	str	r2, [r1, #12]
   204be:	4403      	add	r3, r0
   204c0:	f043 0001 	orr.w	r0, r3, #1
   204c4:	6091      	str	r1, [r2, #8]
   204c6:	6060      	str	r0, [r4, #4]
   204c8:	50e3      	str	r3, [r4, r3]
   204ca:	e7a3      	b.n	20414 <_free_r+0x84>
   204cc:	2a14      	cmp	r2, #20
   204ce:	d816      	bhi.n	204fe <_free_r+0x16e>
   204d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   204d4:	00ff      	lsls	r7, r7, #3
   204d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   204da:	e7aa      	b.n	20432 <_free_r+0xa2>
   204dc:	10aa      	asrs	r2, r5, #2
   204de:	2301      	movs	r3, #1
   204e0:	684d      	ldr	r5, [r1, #4]
   204e2:	4093      	lsls	r3, r2
   204e4:	432b      	orrs	r3, r5
   204e6:	604b      	str	r3, [r1, #4]
   204e8:	4603      	mov	r3, r0
   204ea:	e7b0      	b.n	2044e <_free_r+0xbe>
   204ec:	f043 0201 	orr.w	r2, r3, #1
   204f0:	614c      	str	r4, [r1, #20]
   204f2:	610c      	str	r4, [r1, #16]
   204f4:	60e5      	str	r5, [r4, #12]
   204f6:	60a5      	str	r5, [r4, #8]
   204f8:	6062      	str	r2, [r4, #4]
   204fa:	50e3      	str	r3, [r4, r3]
   204fc:	e78a      	b.n	20414 <_free_r+0x84>
   204fe:	2a54      	cmp	r2, #84	; 0x54
   20500:	d806      	bhi.n	20510 <_free_r+0x180>
   20502:	0b1a      	lsrs	r2, r3, #12
   20504:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   20508:	00ff      	lsls	r7, r7, #3
   2050a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2050e:	e790      	b.n	20432 <_free_r+0xa2>
   20510:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   20514:	d806      	bhi.n	20524 <_free_r+0x194>
   20516:	0bda      	lsrs	r2, r3, #15
   20518:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2051c:	00ff      	lsls	r7, r7, #3
   2051e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   20522:	e786      	b.n	20432 <_free_r+0xa2>
   20524:	f240 5054 	movw	r0, #1364	; 0x554
   20528:	4282      	cmp	r2, r0
   2052a:	d806      	bhi.n	2053a <_free_r+0x1aa>
   2052c:	0c9a      	lsrs	r2, r3, #18
   2052e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   20532:	00ff      	lsls	r7, r7, #3
   20534:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   20538:	e77b      	b.n	20432 <_free_r+0xa2>
   2053a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2053e:	257e      	movs	r5, #126	; 0x7e
   20540:	e777      	b.n	20432 <_free_r+0xa2>
   20542:	f043 0101 	orr.w	r1, r3, #1
   20546:	6061      	str	r1, [r4, #4]
   20548:	6013      	str	r3, [r2, #0]
   2054a:	e763      	b.n	20414 <_free_r+0x84>
   2054c:	200006c4 	.word	0x200006c4
   20550:	200006cc 	.word	0x200006cc
   20554:	20000ad0 	.word	0x20000ad0
   20558:	2000a55c 	.word	0x2000a55c

0002055c <iswspace>:
   2055c:	28ff      	cmp	r0, #255	; 0xff
   2055e:	d901      	bls.n	20564 <iswspace+0x8>
   20560:	2000      	movs	r0, #0
   20562:	4770      	bx	lr
   20564:	b510      	push	{r4, lr}
   20566:	4604      	mov	r4, r0
   20568:	f000 f818 	bl	2059c <__locale_ctype_ptr>
   2056c:	4420      	add	r0, r4
   2056e:	7840      	ldrb	r0, [r0, #1]
   20570:	f000 0008 	and.w	r0, r0, #8
   20574:	bd10      	pop	{r4, pc}
   20576:	bf00      	nop

00020578 <__locale_mb_cur_max>:
   20578:	4b04      	ldr	r3, [pc, #16]	; (2058c <__locale_mb_cur_max+0x14>)
   2057a:	4a05      	ldr	r2, [pc, #20]	; (20590 <__locale_mb_cur_max+0x18>)
   2057c:	681b      	ldr	r3, [r3, #0]
   2057e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   20580:	2b00      	cmp	r3, #0
   20582:	bf08      	it	eq
   20584:	4613      	moveq	r3, r2
   20586:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   2058a:	4770      	bx	lr
   2058c:	20000248 	.word	0x20000248
   20590:	20000ad8 	.word	0x20000ad8

00020594 <__locale_ctype_ptr_l>:
   20594:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   20598:	4770      	bx	lr
   2059a:	bf00      	nop

0002059c <__locale_ctype_ptr>:
   2059c:	4b04      	ldr	r3, [pc, #16]	; (205b0 <__locale_ctype_ptr+0x14>)
   2059e:	4a05      	ldr	r2, [pc, #20]	; (205b4 <__locale_ctype_ptr+0x18>)
   205a0:	681b      	ldr	r3, [r3, #0]
   205a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   205a4:	2b00      	cmp	r3, #0
   205a6:	bf08      	it	eq
   205a8:	4613      	moveq	r3, r2
   205aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   205ae:	4770      	bx	lr
   205b0:	20000248 	.word	0x20000248
   205b4:	20000ad8 	.word	0x20000ad8

000205b8 <_mbrtowc_r>:
   205b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   205ba:	b083      	sub	sp, #12
   205bc:	4607      	mov	r7, r0
   205be:	9d08      	ldr	r5, [sp, #32]
   205c0:	b192      	cbz	r2, 205e8 <_mbrtowc_r+0x30>
   205c2:	4c11      	ldr	r4, [pc, #68]	; (20608 <_mbrtowc_r+0x50>)
   205c4:	4e11      	ldr	r6, [pc, #68]	; (2060c <_mbrtowc_r+0x54>)
   205c6:	6824      	ldr	r4, [r4, #0]
   205c8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   205ca:	9500      	str	r5, [sp, #0]
   205cc:	2c00      	cmp	r4, #0
   205ce:	bf08      	it	eq
   205d0:	4634      	moveq	r4, r6
   205d2:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   205d6:	47a0      	blx	r4
   205d8:	1c43      	adds	r3, r0, #1
   205da:	d103      	bne.n	205e4 <_mbrtowc_r+0x2c>
   205dc:	2200      	movs	r2, #0
   205de:	238a      	movs	r3, #138	; 0x8a
   205e0:	602a      	str	r2, [r5, #0]
   205e2:	603b      	str	r3, [r7, #0]
   205e4:	b003      	add	sp, #12
   205e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   205e8:	4b07      	ldr	r3, [pc, #28]	; (20608 <_mbrtowc_r+0x50>)
   205ea:	4908      	ldr	r1, [pc, #32]	; (2060c <_mbrtowc_r+0x54>)
   205ec:	681b      	ldr	r3, [r3, #0]
   205ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   205f0:	9500      	str	r5, [sp, #0]
   205f2:	2b00      	cmp	r3, #0
   205f4:	bf08      	it	eq
   205f6:	460b      	moveq	r3, r1
   205f8:	4614      	mov	r4, r2
   205fa:	4621      	mov	r1, r4
   205fc:	4a04      	ldr	r2, [pc, #16]	; (20610 <_mbrtowc_r+0x58>)
   205fe:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   20602:	2301      	movs	r3, #1
   20604:	47a0      	blx	r4
   20606:	e7e7      	b.n	205d8 <_mbrtowc_r+0x20>
   20608:	20000248 	.word	0x20000248
   2060c:	20000ad8 	.word	0x20000ad8
   20610:	00023614 	.word	0x00023614

00020614 <__ascii_mbtowc>:
   20614:	b082      	sub	sp, #8
   20616:	b149      	cbz	r1, 2062c <__ascii_mbtowc+0x18>
   20618:	b15a      	cbz	r2, 20632 <__ascii_mbtowc+0x1e>
   2061a:	b16b      	cbz	r3, 20638 <__ascii_mbtowc+0x24>
   2061c:	7813      	ldrb	r3, [r2, #0]
   2061e:	600b      	str	r3, [r1, #0]
   20620:	7812      	ldrb	r2, [r2, #0]
   20622:	1c10      	adds	r0, r2, #0
   20624:	bf18      	it	ne
   20626:	2001      	movne	r0, #1
   20628:	b002      	add	sp, #8
   2062a:	4770      	bx	lr
   2062c:	a901      	add	r1, sp, #4
   2062e:	2a00      	cmp	r2, #0
   20630:	d1f3      	bne.n	2061a <__ascii_mbtowc+0x6>
   20632:	4610      	mov	r0, r2
   20634:	b002      	add	sp, #8
   20636:	4770      	bx	lr
   20638:	f06f 0001 	mvn.w	r0, #1
   2063c:	e7f4      	b.n	20628 <__ascii_mbtowc+0x14>
   2063e:	bf00      	nop

00020640 <memmove>:
   20640:	4288      	cmp	r0, r1
   20642:	b5f0      	push	{r4, r5, r6, r7, lr}
   20644:	d90d      	bls.n	20662 <memmove+0x22>
   20646:	188b      	adds	r3, r1, r2
   20648:	4298      	cmp	r0, r3
   2064a:	d20a      	bcs.n	20662 <memmove+0x22>
   2064c:	1884      	adds	r4, r0, r2
   2064e:	2a00      	cmp	r2, #0
   20650:	d051      	beq.n	206f6 <memmove+0xb6>
   20652:	4622      	mov	r2, r4
   20654:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   20658:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2065c:	4299      	cmp	r1, r3
   2065e:	d1f9      	bne.n	20654 <memmove+0x14>
   20660:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20662:	2a0f      	cmp	r2, #15
   20664:	d948      	bls.n	206f8 <memmove+0xb8>
   20666:	ea41 0300 	orr.w	r3, r1, r0
   2066a:	079b      	lsls	r3, r3, #30
   2066c:	d146      	bne.n	206fc <memmove+0xbc>
   2066e:	f100 0410 	add.w	r4, r0, #16
   20672:	f101 0310 	add.w	r3, r1, #16
   20676:	4615      	mov	r5, r2
   20678:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2067c:	f844 6c10 	str.w	r6, [r4, #-16]
   20680:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   20684:	f844 6c0c 	str.w	r6, [r4, #-12]
   20688:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2068c:	f844 6c08 	str.w	r6, [r4, #-8]
   20690:	3d10      	subs	r5, #16
   20692:	f853 6c04 	ldr.w	r6, [r3, #-4]
   20696:	f844 6c04 	str.w	r6, [r4, #-4]
   2069a:	2d0f      	cmp	r5, #15
   2069c:	f103 0310 	add.w	r3, r3, #16
   206a0:	f104 0410 	add.w	r4, r4, #16
   206a4:	d8e8      	bhi.n	20678 <memmove+0x38>
   206a6:	f1a2 0310 	sub.w	r3, r2, #16
   206aa:	f023 030f 	bic.w	r3, r3, #15
   206ae:	f002 0e0f 	and.w	lr, r2, #15
   206b2:	3310      	adds	r3, #16
   206b4:	f1be 0f03 	cmp.w	lr, #3
   206b8:	4419      	add	r1, r3
   206ba:	4403      	add	r3, r0
   206bc:	d921      	bls.n	20702 <memmove+0xc2>
   206be:	1f1e      	subs	r6, r3, #4
   206c0:	460d      	mov	r5, r1
   206c2:	4674      	mov	r4, lr
   206c4:	3c04      	subs	r4, #4
   206c6:	f855 7b04 	ldr.w	r7, [r5], #4
   206ca:	f846 7f04 	str.w	r7, [r6, #4]!
   206ce:	2c03      	cmp	r4, #3
   206d0:	d8f8      	bhi.n	206c4 <memmove+0x84>
   206d2:	f1ae 0404 	sub.w	r4, lr, #4
   206d6:	f024 0403 	bic.w	r4, r4, #3
   206da:	3404      	adds	r4, #4
   206dc:	4421      	add	r1, r4
   206de:	4423      	add	r3, r4
   206e0:	f002 0203 	and.w	r2, r2, #3
   206e4:	b162      	cbz	r2, 20700 <memmove+0xc0>
   206e6:	3b01      	subs	r3, #1
   206e8:	440a      	add	r2, r1
   206ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   206ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   206f2:	428a      	cmp	r2, r1
   206f4:	d1f9      	bne.n	206ea <memmove+0xaa>
   206f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   206f8:	4603      	mov	r3, r0
   206fa:	e7f3      	b.n	206e4 <memmove+0xa4>
   206fc:	4603      	mov	r3, r0
   206fe:	e7f2      	b.n	206e6 <memmove+0xa6>
   20700:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20702:	4672      	mov	r2, lr
   20704:	e7ee      	b.n	206e4 <memmove+0xa4>
   20706:	bf00      	nop

00020708 <_realloc_r>:
   20708:	2900      	cmp	r1, #0
   2070a:	f000 8095 	beq.w	20838 <_realloc_r+0x130>
   2070e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20712:	460d      	mov	r5, r1
   20714:	4616      	mov	r6, r2
   20716:	b083      	sub	sp, #12
   20718:	4680      	mov	r8, r0
   2071a:	f106 070b 	add.w	r7, r6, #11
   2071e:	f7fd ff1f 	bl	1e560 <__malloc_lock>
   20722:	f855 ec04 	ldr.w	lr, [r5, #-4]
   20726:	2f16      	cmp	r7, #22
   20728:	f02e 0403 	bic.w	r4, lr, #3
   2072c:	f1a5 0908 	sub.w	r9, r5, #8
   20730:	d83c      	bhi.n	207ac <_realloc_r+0xa4>
   20732:	2210      	movs	r2, #16
   20734:	4617      	mov	r7, r2
   20736:	42be      	cmp	r6, r7
   20738:	d83d      	bhi.n	207b6 <_realloc_r+0xae>
   2073a:	4294      	cmp	r4, r2
   2073c:	da43      	bge.n	207c6 <_realloc_r+0xbe>
   2073e:	4bc4      	ldr	r3, [pc, #784]	; (20a50 <_realloc_r+0x348>)
   20740:	6899      	ldr	r1, [r3, #8]
   20742:	eb09 0004 	add.w	r0, r9, r4
   20746:	4288      	cmp	r0, r1
   20748:	f000 80b4 	beq.w	208b4 <_realloc_r+0x1ac>
   2074c:	6843      	ldr	r3, [r0, #4]
   2074e:	f023 0101 	bic.w	r1, r3, #1
   20752:	4401      	add	r1, r0
   20754:	6849      	ldr	r1, [r1, #4]
   20756:	07c9      	lsls	r1, r1, #31
   20758:	d54c      	bpl.n	207f4 <_realloc_r+0xec>
   2075a:	f01e 0f01 	tst.w	lr, #1
   2075e:	f000 809b 	beq.w	20898 <_realloc_r+0x190>
   20762:	4631      	mov	r1, r6
   20764:	4640      	mov	r0, r8
   20766:	f7fd fbf9 	bl	1df5c <_malloc_r>
   2076a:	4606      	mov	r6, r0
   2076c:	2800      	cmp	r0, #0
   2076e:	d03a      	beq.n	207e6 <_realloc_r+0xde>
   20770:	f855 3c04 	ldr.w	r3, [r5, #-4]
   20774:	f023 0301 	bic.w	r3, r3, #1
   20778:	444b      	add	r3, r9
   2077a:	f1a0 0208 	sub.w	r2, r0, #8
   2077e:	429a      	cmp	r2, r3
   20780:	f000 8121 	beq.w	209c6 <_realloc_r+0x2be>
   20784:	1f22      	subs	r2, r4, #4
   20786:	2a24      	cmp	r2, #36	; 0x24
   20788:	f200 8107 	bhi.w	2099a <_realloc_r+0x292>
   2078c:	2a13      	cmp	r2, #19
   2078e:	f200 80db 	bhi.w	20948 <_realloc_r+0x240>
   20792:	4603      	mov	r3, r0
   20794:	462a      	mov	r2, r5
   20796:	6811      	ldr	r1, [r2, #0]
   20798:	6019      	str	r1, [r3, #0]
   2079a:	6851      	ldr	r1, [r2, #4]
   2079c:	6059      	str	r1, [r3, #4]
   2079e:	6892      	ldr	r2, [r2, #8]
   207a0:	609a      	str	r2, [r3, #8]
   207a2:	4629      	mov	r1, r5
   207a4:	4640      	mov	r0, r8
   207a6:	f7ff fdf3 	bl	20390 <_free_r>
   207aa:	e01c      	b.n	207e6 <_realloc_r+0xde>
   207ac:	f027 0707 	bic.w	r7, r7, #7
   207b0:	2f00      	cmp	r7, #0
   207b2:	463a      	mov	r2, r7
   207b4:	dabf      	bge.n	20736 <_realloc_r+0x2e>
   207b6:	2600      	movs	r6, #0
   207b8:	230c      	movs	r3, #12
   207ba:	4630      	mov	r0, r6
   207bc:	f8c8 3000 	str.w	r3, [r8]
   207c0:	b003      	add	sp, #12
   207c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207c6:	462e      	mov	r6, r5
   207c8:	1be3      	subs	r3, r4, r7
   207ca:	2b0f      	cmp	r3, #15
   207cc:	d81e      	bhi.n	2080c <_realloc_r+0x104>
   207ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
   207d2:	f003 0301 	and.w	r3, r3, #1
   207d6:	4323      	orrs	r3, r4
   207d8:	444c      	add	r4, r9
   207da:	f8c9 3004 	str.w	r3, [r9, #4]
   207de:	6863      	ldr	r3, [r4, #4]
   207e0:	f043 0301 	orr.w	r3, r3, #1
   207e4:	6063      	str	r3, [r4, #4]
   207e6:	4640      	mov	r0, r8
   207e8:	f7fd fec0 	bl	1e56c <__malloc_unlock>
   207ec:	4630      	mov	r0, r6
   207ee:	b003      	add	sp, #12
   207f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207f4:	f023 0303 	bic.w	r3, r3, #3
   207f8:	18e1      	adds	r1, r4, r3
   207fa:	4291      	cmp	r1, r2
   207fc:	db1f      	blt.n	2083e <_realloc_r+0x136>
   207fe:	68c3      	ldr	r3, [r0, #12]
   20800:	6882      	ldr	r2, [r0, #8]
   20802:	462e      	mov	r6, r5
   20804:	60d3      	str	r3, [r2, #12]
   20806:	460c      	mov	r4, r1
   20808:	609a      	str	r2, [r3, #8]
   2080a:	e7dd      	b.n	207c8 <_realloc_r+0xc0>
   2080c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   20810:	eb09 0107 	add.w	r1, r9, r7
   20814:	f002 0201 	and.w	r2, r2, #1
   20818:	444c      	add	r4, r9
   2081a:	f043 0301 	orr.w	r3, r3, #1
   2081e:	4317      	orrs	r7, r2
   20820:	f8c9 7004 	str.w	r7, [r9, #4]
   20824:	604b      	str	r3, [r1, #4]
   20826:	6863      	ldr	r3, [r4, #4]
   20828:	f043 0301 	orr.w	r3, r3, #1
   2082c:	3108      	adds	r1, #8
   2082e:	6063      	str	r3, [r4, #4]
   20830:	4640      	mov	r0, r8
   20832:	f7ff fdad 	bl	20390 <_free_r>
   20836:	e7d6      	b.n	207e6 <_realloc_r+0xde>
   20838:	4611      	mov	r1, r2
   2083a:	f7fd bb8f 	b.w	1df5c <_malloc_r>
   2083e:	f01e 0f01 	tst.w	lr, #1
   20842:	d18e      	bne.n	20762 <_realloc_r+0x5a>
   20844:	f855 1c08 	ldr.w	r1, [r5, #-8]
   20848:	eba9 0a01 	sub.w	sl, r9, r1
   2084c:	f8da 1004 	ldr.w	r1, [sl, #4]
   20850:	f021 0103 	bic.w	r1, r1, #3
   20854:	440b      	add	r3, r1
   20856:	4423      	add	r3, r4
   20858:	4293      	cmp	r3, r2
   2085a:	db25      	blt.n	208a8 <_realloc_r+0x1a0>
   2085c:	68c2      	ldr	r2, [r0, #12]
   2085e:	6881      	ldr	r1, [r0, #8]
   20860:	4656      	mov	r6, sl
   20862:	60ca      	str	r2, [r1, #12]
   20864:	6091      	str	r1, [r2, #8]
   20866:	f8da 100c 	ldr.w	r1, [sl, #12]
   2086a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2086e:	1f22      	subs	r2, r4, #4
   20870:	2a24      	cmp	r2, #36	; 0x24
   20872:	60c1      	str	r1, [r0, #12]
   20874:	6088      	str	r0, [r1, #8]
   20876:	f200 8094 	bhi.w	209a2 <_realloc_r+0x29a>
   2087a:	2a13      	cmp	r2, #19
   2087c:	d96f      	bls.n	2095e <_realloc_r+0x256>
   2087e:	6829      	ldr	r1, [r5, #0]
   20880:	f8ca 1008 	str.w	r1, [sl, #8]
   20884:	6869      	ldr	r1, [r5, #4]
   20886:	f8ca 100c 	str.w	r1, [sl, #12]
   2088a:	2a1b      	cmp	r2, #27
   2088c:	f200 80a2 	bhi.w	209d4 <_realloc_r+0x2cc>
   20890:	3508      	adds	r5, #8
   20892:	f10a 0210 	add.w	r2, sl, #16
   20896:	e063      	b.n	20960 <_realloc_r+0x258>
   20898:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2089c:	eba9 0a03 	sub.w	sl, r9, r3
   208a0:	f8da 1004 	ldr.w	r1, [sl, #4]
   208a4:	f021 0103 	bic.w	r1, r1, #3
   208a8:	1863      	adds	r3, r4, r1
   208aa:	4293      	cmp	r3, r2
   208ac:	f6ff af59 	blt.w	20762 <_realloc_r+0x5a>
   208b0:	4656      	mov	r6, sl
   208b2:	e7d8      	b.n	20866 <_realloc_r+0x15e>
   208b4:	6841      	ldr	r1, [r0, #4]
   208b6:	f021 0b03 	bic.w	fp, r1, #3
   208ba:	44a3      	add	fp, r4
   208bc:	f107 0010 	add.w	r0, r7, #16
   208c0:	4583      	cmp	fp, r0
   208c2:	da56      	bge.n	20972 <_realloc_r+0x26a>
   208c4:	f01e 0f01 	tst.w	lr, #1
   208c8:	f47f af4b 	bne.w	20762 <_realloc_r+0x5a>
   208cc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   208d0:	eba9 0a01 	sub.w	sl, r9, r1
   208d4:	f8da 1004 	ldr.w	r1, [sl, #4]
   208d8:	f021 0103 	bic.w	r1, r1, #3
   208dc:	448b      	add	fp, r1
   208de:	4558      	cmp	r0, fp
   208e0:	dce2      	bgt.n	208a8 <_realloc_r+0x1a0>
   208e2:	4656      	mov	r6, sl
   208e4:	f8da 100c 	ldr.w	r1, [sl, #12]
   208e8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   208ec:	1f22      	subs	r2, r4, #4
   208ee:	2a24      	cmp	r2, #36	; 0x24
   208f0:	60c1      	str	r1, [r0, #12]
   208f2:	6088      	str	r0, [r1, #8]
   208f4:	f200 808f 	bhi.w	20a16 <_realloc_r+0x30e>
   208f8:	2a13      	cmp	r2, #19
   208fa:	f240 808a 	bls.w	20a12 <_realloc_r+0x30a>
   208fe:	6829      	ldr	r1, [r5, #0]
   20900:	f8ca 1008 	str.w	r1, [sl, #8]
   20904:	6869      	ldr	r1, [r5, #4]
   20906:	f8ca 100c 	str.w	r1, [sl, #12]
   2090a:	2a1b      	cmp	r2, #27
   2090c:	f200 808a 	bhi.w	20a24 <_realloc_r+0x31c>
   20910:	3508      	adds	r5, #8
   20912:	f10a 0210 	add.w	r2, sl, #16
   20916:	6829      	ldr	r1, [r5, #0]
   20918:	6011      	str	r1, [r2, #0]
   2091a:	6869      	ldr	r1, [r5, #4]
   2091c:	6051      	str	r1, [r2, #4]
   2091e:	68a9      	ldr	r1, [r5, #8]
   20920:	6091      	str	r1, [r2, #8]
   20922:	eb0a 0107 	add.w	r1, sl, r7
   20926:	ebab 0207 	sub.w	r2, fp, r7
   2092a:	f042 0201 	orr.w	r2, r2, #1
   2092e:	6099      	str	r1, [r3, #8]
   20930:	604a      	str	r2, [r1, #4]
   20932:	f8da 3004 	ldr.w	r3, [sl, #4]
   20936:	f003 0301 	and.w	r3, r3, #1
   2093a:	431f      	orrs	r7, r3
   2093c:	4640      	mov	r0, r8
   2093e:	f8ca 7004 	str.w	r7, [sl, #4]
   20942:	f7fd fe13 	bl	1e56c <__malloc_unlock>
   20946:	e751      	b.n	207ec <_realloc_r+0xe4>
   20948:	682b      	ldr	r3, [r5, #0]
   2094a:	6003      	str	r3, [r0, #0]
   2094c:	686b      	ldr	r3, [r5, #4]
   2094e:	6043      	str	r3, [r0, #4]
   20950:	2a1b      	cmp	r2, #27
   20952:	d82d      	bhi.n	209b0 <_realloc_r+0x2a8>
   20954:	f100 0308 	add.w	r3, r0, #8
   20958:	f105 0208 	add.w	r2, r5, #8
   2095c:	e71b      	b.n	20796 <_realloc_r+0x8e>
   2095e:	4632      	mov	r2, r6
   20960:	6829      	ldr	r1, [r5, #0]
   20962:	6011      	str	r1, [r2, #0]
   20964:	6869      	ldr	r1, [r5, #4]
   20966:	6051      	str	r1, [r2, #4]
   20968:	68a9      	ldr	r1, [r5, #8]
   2096a:	6091      	str	r1, [r2, #8]
   2096c:	461c      	mov	r4, r3
   2096e:	46d1      	mov	r9, sl
   20970:	e72a      	b.n	207c8 <_realloc_r+0xc0>
   20972:	eb09 0107 	add.w	r1, r9, r7
   20976:	ebab 0b07 	sub.w	fp, fp, r7
   2097a:	f04b 0201 	orr.w	r2, fp, #1
   2097e:	6099      	str	r1, [r3, #8]
   20980:	604a      	str	r2, [r1, #4]
   20982:	f855 3c04 	ldr.w	r3, [r5, #-4]
   20986:	f003 0301 	and.w	r3, r3, #1
   2098a:	431f      	orrs	r7, r3
   2098c:	4640      	mov	r0, r8
   2098e:	f845 7c04 	str.w	r7, [r5, #-4]
   20992:	f7fd fdeb 	bl	1e56c <__malloc_unlock>
   20996:	462e      	mov	r6, r5
   20998:	e728      	b.n	207ec <_realloc_r+0xe4>
   2099a:	4629      	mov	r1, r5
   2099c:	f7ff fe50 	bl	20640 <memmove>
   209a0:	e6ff      	b.n	207a2 <_realloc_r+0x9a>
   209a2:	4629      	mov	r1, r5
   209a4:	4630      	mov	r0, r6
   209a6:	461c      	mov	r4, r3
   209a8:	46d1      	mov	r9, sl
   209aa:	f7ff fe49 	bl	20640 <memmove>
   209ae:	e70b      	b.n	207c8 <_realloc_r+0xc0>
   209b0:	68ab      	ldr	r3, [r5, #8]
   209b2:	6083      	str	r3, [r0, #8]
   209b4:	68eb      	ldr	r3, [r5, #12]
   209b6:	60c3      	str	r3, [r0, #12]
   209b8:	2a24      	cmp	r2, #36	; 0x24
   209ba:	d017      	beq.n	209ec <_realloc_r+0x2e4>
   209bc:	f100 0310 	add.w	r3, r0, #16
   209c0:	f105 0210 	add.w	r2, r5, #16
   209c4:	e6e7      	b.n	20796 <_realloc_r+0x8e>
   209c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   209ca:	f023 0303 	bic.w	r3, r3, #3
   209ce:	441c      	add	r4, r3
   209d0:	462e      	mov	r6, r5
   209d2:	e6f9      	b.n	207c8 <_realloc_r+0xc0>
   209d4:	68a9      	ldr	r1, [r5, #8]
   209d6:	f8ca 1010 	str.w	r1, [sl, #16]
   209da:	68e9      	ldr	r1, [r5, #12]
   209dc:	f8ca 1014 	str.w	r1, [sl, #20]
   209e0:	2a24      	cmp	r2, #36	; 0x24
   209e2:	d00c      	beq.n	209fe <_realloc_r+0x2f6>
   209e4:	3510      	adds	r5, #16
   209e6:	f10a 0218 	add.w	r2, sl, #24
   209ea:	e7b9      	b.n	20960 <_realloc_r+0x258>
   209ec:	692b      	ldr	r3, [r5, #16]
   209ee:	6103      	str	r3, [r0, #16]
   209f0:	696b      	ldr	r3, [r5, #20]
   209f2:	6143      	str	r3, [r0, #20]
   209f4:	f105 0218 	add.w	r2, r5, #24
   209f8:	f100 0318 	add.w	r3, r0, #24
   209fc:	e6cb      	b.n	20796 <_realloc_r+0x8e>
   209fe:	692a      	ldr	r2, [r5, #16]
   20a00:	f8ca 2018 	str.w	r2, [sl, #24]
   20a04:	696a      	ldr	r2, [r5, #20]
   20a06:	f8ca 201c 	str.w	r2, [sl, #28]
   20a0a:	3518      	adds	r5, #24
   20a0c:	f10a 0220 	add.w	r2, sl, #32
   20a10:	e7a6      	b.n	20960 <_realloc_r+0x258>
   20a12:	4632      	mov	r2, r6
   20a14:	e77f      	b.n	20916 <_realloc_r+0x20e>
   20a16:	4629      	mov	r1, r5
   20a18:	4630      	mov	r0, r6
   20a1a:	9301      	str	r3, [sp, #4]
   20a1c:	f7ff fe10 	bl	20640 <memmove>
   20a20:	9b01      	ldr	r3, [sp, #4]
   20a22:	e77e      	b.n	20922 <_realloc_r+0x21a>
   20a24:	68a9      	ldr	r1, [r5, #8]
   20a26:	f8ca 1010 	str.w	r1, [sl, #16]
   20a2a:	68e9      	ldr	r1, [r5, #12]
   20a2c:	f8ca 1014 	str.w	r1, [sl, #20]
   20a30:	2a24      	cmp	r2, #36	; 0x24
   20a32:	d003      	beq.n	20a3c <_realloc_r+0x334>
   20a34:	3510      	adds	r5, #16
   20a36:	f10a 0218 	add.w	r2, sl, #24
   20a3a:	e76c      	b.n	20916 <_realloc_r+0x20e>
   20a3c:	692a      	ldr	r2, [r5, #16]
   20a3e:	f8ca 2018 	str.w	r2, [sl, #24]
   20a42:	696a      	ldr	r2, [r5, #20]
   20a44:	f8ca 201c 	str.w	r2, [sl, #28]
   20a48:	3518      	adds	r5, #24
   20a4a:	f10a 0220 	add.w	r2, sl, #32
   20a4e:	e762      	b.n	20916 <_realloc_r+0x20e>
   20a50:	200006c4 	.word	0x200006c4

00020a54 <__sccl>:
   20a54:	b470      	push	{r4, r5, r6}
   20a56:	780c      	ldrb	r4, [r1, #0]
   20a58:	2c5e      	cmp	r4, #94	; 0x5e
   20a5a:	d02f      	beq.n	20abc <__sccl+0x68>
   20a5c:	2200      	movs	r2, #0
   20a5e:	1c4d      	adds	r5, r1, #1
   20a60:	4616      	mov	r6, r2
   20a62:	1e43      	subs	r3, r0, #1
   20a64:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   20a68:	f803 2f01 	strb.w	r2, [r3, #1]!
   20a6c:	428b      	cmp	r3, r1
   20a6e:	d1fb      	bne.n	20a68 <__sccl+0x14>
   20a70:	b174      	cbz	r4, 20a90 <__sccl+0x3c>
   20a72:	f086 0201 	eor.w	r2, r6, #1
   20a76:	5502      	strb	r2, [r0, r4]
   20a78:	1c6e      	adds	r6, r5, #1
   20a7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   20a7e:	2b2d      	cmp	r3, #45	; 0x2d
   20a80:	4631      	mov	r1, r6
   20a82:	d00d      	beq.n	20aa0 <__sccl+0x4c>
   20a84:	2b5d      	cmp	r3, #93	; 0x5d
   20a86:	d004      	beq.n	20a92 <__sccl+0x3e>
   20a88:	b133      	cbz	r3, 20a98 <__sccl+0x44>
   20a8a:	461c      	mov	r4, r3
   20a8c:	4635      	mov	r5, r6
   20a8e:	e7f2      	b.n	20a76 <__sccl+0x22>
   20a90:	1e69      	subs	r1, r5, #1
   20a92:	4608      	mov	r0, r1
   20a94:	bc70      	pop	{r4, r5, r6}
   20a96:	4770      	bx	lr
   20a98:	4629      	mov	r1, r5
   20a9a:	4608      	mov	r0, r1
   20a9c:	bc70      	pop	{r4, r5, r6}
   20a9e:	4770      	bx	lr
   20aa0:	7869      	ldrb	r1, [r5, #1]
   20aa2:	295d      	cmp	r1, #93	; 0x5d
   20aa4:	d0f1      	beq.n	20a8a <__sccl+0x36>
   20aa6:	428c      	cmp	r4, r1
   20aa8:	dcef      	bgt.n	20a8a <__sccl+0x36>
   20aaa:	3502      	adds	r5, #2
   20aac:	1903      	adds	r3, r0, r4
   20aae:	3401      	adds	r4, #1
   20ab0:	42a1      	cmp	r1, r4
   20ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
   20ab6:	dcfa      	bgt.n	20aae <__sccl+0x5a>
   20ab8:	3602      	adds	r6, #2
   20aba:	e7de      	b.n	20a7a <__sccl+0x26>
   20abc:	2201      	movs	r2, #1
   20abe:	784c      	ldrb	r4, [r1, #1]
   20ac0:	4616      	mov	r6, r2
   20ac2:	1c8d      	adds	r5, r1, #2
   20ac4:	e7cd      	b.n	20a62 <__sccl+0xe>
   20ac6:	bf00      	nop

00020ac8 <_strtol_l.isra.0>:
   20ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20acc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   20ad0:	460f      	mov	r7, r1
   20ad2:	4680      	mov	r8, r0
   20ad4:	4616      	mov	r6, r2
   20ad6:	461d      	mov	r5, r3
   20ad8:	468a      	mov	sl, r1
   20ada:	e000      	b.n	20ade <_strtol_l.isra.0+0x16>
   20adc:	46a2      	mov	sl, r4
   20ade:	4654      	mov	r4, sl
   20ae0:	4648      	mov	r0, r9
   20ae2:	f814 bb01 	ldrb.w	fp, [r4], #1
   20ae6:	f7ff fd55 	bl	20594 <__locale_ctype_ptr_l>
   20aea:	4458      	add	r0, fp
   20aec:	7842      	ldrb	r2, [r0, #1]
   20aee:	f012 0208 	ands.w	r2, r2, #8
   20af2:	d1f3      	bne.n	20adc <_strtol_l.isra.0+0x14>
   20af4:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   20af8:	d04f      	beq.n	20b9a <_strtol_l.isra.0+0xd2>
   20afa:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   20afe:	bf04      	itt	eq
   20b00:	f894 b000 	ldrbeq.w	fp, [r4]
   20b04:	f10a 0402 	addeq.w	r4, sl, #2
   20b08:	b11d      	cbz	r5, 20b12 <_strtol_l.isra.0+0x4a>
   20b0a:	2d10      	cmp	r5, #16
   20b0c:	d056      	beq.n	20bbc <_strtol_l.isra.0+0xf4>
   20b0e:	46ac      	mov	ip, r5
   20b10:	e004      	b.n	20b1c <_strtol_l.isra.0+0x54>
   20b12:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   20b16:	d060      	beq.n	20bda <_strtol_l.isra.0+0x112>
   20b18:	250a      	movs	r5, #10
   20b1a:	46ac      	mov	ip, r5
   20b1c:	2a00      	cmp	r2, #0
   20b1e:	bf0c      	ite	eq
   20b20:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   20b24:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   20b28:	2100      	movs	r1, #0
   20b2a:	fbb9 fefc 	udiv	lr, r9, ip
   20b2e:	4608      	mov	r0, r1
   20b30:	fb0c 9a1e 	mls	sl, ip, lr, r9
   20b34:	e005      	b.n	20b42 <_strtol_l.isra.0+0x7a>
   20b36:	d029      	beq.n	20b8c <_strtol_l.isra.0+0xc4>
   20b38:	fb0c 3000 	mla	r0, ip, r0, r3
   20b3c:	2101      	movs	r1, #1
   20b3e:	f814 bb01 	ldrb.w	fp, [r4], #1
   20b42:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   20b46:	2b09      	cmp	r3, #9
   20b48:	d905      	bls.n	20b56 <_strtol_l.isra.0+0x8e>
   20b4a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   20b4e:	2b19      	cmp	r3, #25
   20b50:	d80b      	bhi.n	20b6a <_strtol_l.isra.0+0xa2>
   20b52:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   20b56:	429d      	cmp	r5, r3
   20b58:	dd0f      	ble.n	20b7a <_strtol_l.isra.0+0xb2>
   20b5a:	f1b1 3fff 	cmp.w	r1, #4294967295
   20b5e:	d0ee      	beq.n	20b3e <_strtol_l.isra.0+0x76>
   20b60:	4586      	cmp	lr, r0
   20b62:	d2e8      	bcs.n	20b36 <_strtol_l.isra.0+0x6e>
   20b64:	f04f 31ff 	mov.w	r1, #4294967295
   20b68:	e7e9      	b.n	20b3e <_strtol_l.isra.0+0x76>
   20b6a:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   20b6e:	2b19      	cmp	r3, #25
   20b70:	d803      	bhi.n	20b7a <_strtol_l.isra.0+0xb2>
   20b72:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   20b76:	429d      	cmp	r5, r3
   20b78:	dcef      	bgt.n	20b5a <_strtol_l.isra.0+0x92>
   20b7a:	1c4b      	adds	r3, r1, #1
   20b7c:	d013      	beq.n	20ba6 <_strtol_l.isra.0+0xde>
   20b7e:	b102      	cbz	r2, 20b82 <_strtol_l.isra.0+0xba>
   20b80:	4240      	negs	r0, r0
   20b82:	b146      	cbz	r6, 20b96 <_strtol_l.isra.0+0xce>
   20b84:	b9c1      	cbnz	r1, 20bb8 <_strtol_l.isra.0+0xf0>
   20b86:	6037      	str	r7, [r6, #0]
   20b88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b8c:	459a      	cmp	sl, r3
   20b8e:	dad3      	bge.n	20b38 <_strtol_l.isra.0+0x70>
   20b90:	f04f 31ff 	mov.w	r1, #4294967295
   20b94:	e7d3      	b.n	20b3e <_strtol_l.isra.0+0x76>
   20b96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b9a:	f894 b000 	ldrb.w	fp, [r4]
   20b9e:	2201      	movs	r2, #1
   20ba0:	f10a 0402 	add.w	r4, sl, #2
   20ba4:	e7b0      	b.n	20b08 <_strtol_l.isra.0+0x40>
   20ba6:	2322      	movs	r3, #34	; 0x22
   20ba8:	f8c8 3000 	str.w	r3, [r8]
   20bac:	b1ee      	cbz	r6, 20bea <_strtol_l.isra.0+0x122>
   20bae:	1e67      	subs	r7, r4, #1
   20bb0:	4648      	mov	r0, r9
   20bb2:	6037      	str	r7, [r6, #0]
   20bb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20bb8:	4681      	mov	r9, r0
   20bba:	e7f8      	b.n	20bae <_strtol_l.isra.0+0xe6>
   20bbc:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   20bc0:	d1a5      	bne.n	20b0e <_strtol_l.isra.0+0x46>
   20bc2:	7823      	ldrb	r3, [r4, #0]
   20bc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20bc8:	2b58      	cmp	r3, #88	; 0x58
   20bca:	d1a0      	bne.n	20b0e <_strtol_l.isra.0+0x46>
   20bcc:	f04f 0c10 	mov.w	ip, #16
   20bd0:	f894 b001 	ldrb.w	fp, [r4, #1]
   20bd4:	4665      	mov	r5, ip
   20bd6:	3402      	adds	r4, #2
   20bd8:	e7a0      	b.n	20b1c <_strtol_l.isra.0+0x54>
   20bda:	7823      	ldrb	r3, [r4, #0]
   20bdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20be0:	2b58      	cmp	r3, #88	; 0x58
   20be2:	d0f3      	beq.n	20bcc <_strtol_l.isra.0+0x104>
   20be4:	2508      	movs	r5, #8
   20be6:	46ac      	mov	ip, r5
   20be8:	e798      	b.n	20b1c <_strtol_l.isra.0+0x54>
   20bea:	4648      	mov	r0, r9
   20bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00020bf0 <_strtol_r>:
   20bf0:	b530      	push	{r4, r5, lr}
   20bf2:	4c06      	ldr	r4, [pc, #24]	; (20c0c <_strtol_r+0x1c>)
   20bf4:	4d06      	ldr	r5, [pc, #24]	; (20c10 <_strtol_r+0x20>)
   20bf6:	6824      	ldr	r4, [r4, #0]
   20bf8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   20bfa:	b083      	sub	sp, #12
   20bfc:	2c00      	cmp	r4, #0
   20bfe:	bf08      	it	eq
   20c00:	462c      	moveq	r4, r5
   20c02:	9400      	str	r4, [sp, #0]
   20c04:	f7ff ff60 	bl	20ac8 <_strtol_l.isra.0>
   20c08:	b003      	add	sp, #12
   20c0a:	bd30      	pop	{r4, r5, pc}
   20c0c:	20000248 	.word	0x20000248
   20c10:	20000ad8 	.word	0x20000ad8

00020c14 <_strtoll_l.isra.0>:
   20c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c18:	b085      	sub	sp, #20
   20c1a:	461e      	mov	r6, r3
   20c1c:	9102      	str	r1, [sp, #8]
   20c1e:	9003      	str	r0, [sp, #12]
   20c20:	9200      	str	r2, [sp, #0]
   20c22:	4688      	mov	r8, r1
   20c24:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   20c26:	e000      	b.n	20c2a <_strtoll_l.isra.0+0x16>
   20c28:	46a8      	mov	r8, r5
   20c2a:	4645      	mov	r5, r8
   20c2c:	4638      	mov	r0, r7
   20c2e:	f815 4b01 	ldrb.w	r4, [r5], #1
   20c32:	f7ff fcaf 	bl	20594 <__locale_ctype_ptr_l>
   20c36:	4420      	add	r0, r4
   20c38:	7843      	ldrb	r3, [r0, #1]
   20c3a:	f013 0308 	ands.w	r3, r3, #8
   20c3e:	d1f3      	bne.n	20c28 <_strtoll_l.isra.0+0x14>
   20c40:	2c2d      	cmp	r4, #45	; 0x2d
   20c42:	f000 8081 	beq.w	20d48 <_strtoll_l.isra.0+0x134>
   20c46:	2c2b      	cmp	r4, #43	; 0x2b
   20c48:	bf03      	ittte	eq
   20c4a:	782c      	ldrbeq	r4, [r5, #0]
   20c4c:	9301      	streq	r3, [sp, #4]
   20c4e:	f108 0502 	addeq.w	r5, r8, #2
   20c52:	9301      	strne	r3, [sp, #4]
   20c54:	b166      	cbz	r6, 20c70 <_strtoll_l.isra.0+0x5c>
   20c56:	2e10      	cmp	r6, #16
   20c58:	f000 8088 	beq.w	20d6c <_strtoll_l.isra.0+0x158>
   20c5c:	9b01      	ldr	r3, [sp, #4]
   20c5e:	46b0      	mov	r8, r6
   20c60:	ea4f 79e6 	mov.w	r9, r6, asr #31
   20c64:	b97b      	cbnz	r3, 20c86 <_strtoll_l.isra.0+0x72>
   20c66:	f04f 3aff 	mov.w	sl, #4294967295
   20c6a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   20c6e:	e00e      	b.n	20c8e <_strtoll_l.isra.0+0x7a>
   20c70:	2c30      	cmp	r4, #48	; 0x30
   20c72:	f000 808a 	beq.w	20d8a <_strtoll_l.isra.0+0x176>
   20c76:	f04f 080a 	mov.w	r8, #10
   20c7a:	f04f 0900 	mov.w	r9, #0
   20c7e:	260a      	movs	r6, #10
   20c80:	9b01      	ldr	r3, [sp, #4]
   20c82:	2b00      	cmp	r3, #0
   20c84:	d0ef      	beq.n	20c66 <_strtoll_l.isra.0+0x52>
   20c86:	f04f 0a00 	mov.w	sl, #0
   20c8a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
   20c8e:	4642      	mov	r2, r8
   20c90:	464b      	mov	r3, r9
   20c92:	4650      	mov	r0, sl
   20c94:	4639      	mov	r1, r7
   20c96:	f7fc f875 	bl	1cd84 <__aeabi_uldivmod>
   20c9a:	464b      	mov	r3, r9
   20c9c:	4693      	mov	fp, r2
   20c9e:	4650      	mov	r0, sl
   20ca0:	4642      	mov	r2, r8
   20ca2:	4639      	mov	r1, r7
   20ca4:	f7fc f86e 	bl	1cd84 <__aeabi_uldivmod>
   20ca8:	f04f 0e00 	mov.w	lr, #0
   20cac:	2200      	movs	r2, #0
   20cae:	2300      	movs	r3, #0
   20cb0:	e00f      	b.n	20cd2 <_strtoll_l.isra.0+0xbe>
   20cb2:	d044      	beq.n	20d3e <_strtoll_l.isra.0+0x12a>
   20cb4:	fb02 f409 	mul.w	r4, r2, r9
   20cb8:	fb08 4403 	mla	r4, r8, r3, r4
   20cbc:	fba2 2308 	umull	r2, r3, r2, r8
   20cc0:	4423      	add	r3, r4
   20cc2:	eb12 020c 	adds.w	r2, r2, ip
   20cc6:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
   20cca:	f04f 0e01 	mov.w	lr, #1
   20cce:	f815 4b01 	ldrb.w	r4, [r5], #1
   20cd2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   20cd6:	f1bc 0f09 	cmp.w	ip, #9
   20cda:	d906      	bls.n	20cea <_strtoll_l.isra.0+0xd6>
   20cdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   20ce0:	f1bc 0f19 	cmp.w	ip, #25
   20ce4:	d80d      	bhi.n	20d02 <_strtoll_l.isra.0+0xee>
   20ce6:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
   20cea:	4566      	cmp	r6, ip
   20cec:	dd12      	ble.n	20d14 <_strtoll_l.isra.0+0x100>
   20cee:	f1be 3fff 	cmp.w	lr, #4294967295
   20cf2:	d0ec      	beq.n	20cce <_strtoll_l.isra.0+0xba>
   20cf4:	4299      	cmp	r1, r3
   20cf6:	bf08      	it	eq
   20cf8:	4290      	cmpeq	r0, r2
   20cfa:	d2da      	bcs.n	20cb2 <_strtoll_l.isra.0+0x9e>
   20cfc:	f04f 3eff 	mov.w	lr, #4294967295
   20d00:	e7e5      	b.n	20cce <_strtoll_l.isra.0+0xba>
   20d02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   20d06:	f1bc 0f19 	cmp.w	ip, #25
   20d0a:	d803      	bhi.n	20d14 <_strtoll_l.isra.0+0x100>
   20d0c:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
   20d10:	4566      	cmp	r6, ip
   20d12:	dcec      	bgt.n	20cee <_strtoll_l.isra.0+0xda>
   20d14:	f1be 3fff 	cmp.w	lr, #4294967295
   20d18:	d01c      	beq.n	20d54 <_strtoll_l.isra.0+0x140>
   20d1a:	9901      	ldr	r1, [sp, #4]
   20d1c:	b111      	cbz	r1, 20d24 <_strtoll_l.isra.0+0x110>
   20d1e:	4252      	negs	r2, r2
   20d20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   20d24:	9900      	ldr	r1, [sp, #0]
   20d26:	b129      	cbz	r1, 20d34 <_strtoll_l.isra.0+0x120>
   20d28:	f1be 0f00 	cmp.w	lr, #0
   20d2c:	d11b      	bne.n	20d66 <_strtoll_l.isra.0+0x152>
   20d2e:	9d02      	ldr	r5, [sp, #8]
   20d30:	9900      	ldr	r1, [sp, #0]
   20d32:	600d      	str	r5, [r1, #0]
   20d34:	4610      	mov	r0, r2
   20d36:	4619      	mov	r1, r3
   20d38:	b005      	add	sp, #20
   20d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d3e:	45e3      	cmp	fp, ip
   20d40:	dab8      	bge.n	20cb4 <_strtoll_l.isra.0+0xa0>
   20d42:	f04f 3eff 	mov.w	lr, #4294967295
   20d46:	e7c2      	b.n	20cce <_strtoll_l.isra.0+0xba>
   20d48:	2301      	movs	r3, #1
   20d4a:	782c      	ldrb	r4, [r5, #0]
   20d4c:	9301      	str	r3, [sp, #4]
   20d4e:	f108 0502 	add.w	r5, r8, #2
   20d52:	e77f      	b.n	20c54 <_strtoll_l.isra.0+0x40>
   20d54:	9a03      	ldr	r2, [sp, #12]
   20d56:	2322      	movs	r3, #34	; 0x22
   20d58:	6013      	str	r3, [r2, #0]
   20d5a:	9b00      	ldr	r3, [sp, #0]
   20d5c:	b32b      	cbz	r3, 20daa <_strtoll_l.isra.0+0x196>
   20d5e:	4652      	mov	r2, sl
   20d60:	463b      	mov	r3, r7
   20d62:	3d01      	subs	r5, #1
   20d64:	e7e4      	b.n	20d30 <_strtoll_l.isra.0+0x11c>
   20d66:	4692      	mov	sl, r2
   20d68:	461f      	mov	r7, r3
   20d6a:	e7f8      	b.n	20d5e <_strtoll_l.isra.0+0x14a>
   20d6c:	2c30      	cmp	r4, #48	; 0x30
   20d6e:	d117      	bne.n	20da0 <_strtoll_l.isra.0+0x18c>
   20d70:	782b      	ldrb	r3, [r5, #0]
   20d72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20d76:	2b58      	cmp	r3, #88	; 0x58
   20d78:	d112      	bne.n	20da0 <_strtoll_l.isra.0+0x18c>
   20d7a:	786c      	ldrb	r4, [r5, #1]
   20d7c:	f04f 0810 	mov.w	r8, #16
   20d80:	f04f 0900 	mov.w	r9, #0
   20d84:	3502      	adds	r5, #2
   20d86:	2610      	movs	r6, #16
   20d88:	e77a      	b.n	20c80 <_strtoll_l.isra.0+0x6c>
   20d8a:	782b      	ldrb	r3, [r5, #0]
   20d8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20d90:	2b58      	cmp	r3, #88	; 0x58
   20d92:	d0f2      	beq.n	20d7a <_strtoll_l.isra.0+0x166>
   20d94:	f04f 0808 	mov.w	r8, #8
   20d98:	f04f 0900 	mov.w	r9, #0
   20d9c:	2608      	movs	r6, #8
   20d9e:	e76f      	b.n	20c80 <_strtoll_l.isra.0+0x6c>
   20da0:	f04f 0810 	mov.w	r8, #16
   20da4:	f04f 0900 	mov.w	r9, #0
   20da8:	e76a      	b.n	20c80 <_strtoll_l.isra.0+0x6c>
   20daa:	4652      	mov	r2, sl
   20dac:	463b      	mov	r3, r7
   20dae:	e7c1      	b.n	20d34 <_strtoll_l.isra.0+0x120>

00020db0 <_strtoll_r>:
   20db0:	b530      	push	{r4, r5, lr}
   20db2:	4c06      	ldr	r4, [pc, #24]	; (20dcc <_strtoll_r+0x1c>)
   20db4:	4d06      	ldr	r5, [pc, #24]	; (20dd0 <_strtoll_r+0x20>)
   20db6:	6824      	ldr	r4, [r4, #0]
   20db8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   20dba:	b083      	sub	sp, #12
   20dbc:	2c00      	cmp	r4, #0
   20dbe:	bf08      	it	eq
   20dc0:	462c      	moveq	r4, r5
   20dc2:	9400      	str	r4, [sp, #0]
   20dc4:	f7ff ff26 	bl	20c14 <_strtoll_l.isra.0>
   20dc8:	b003      	add	sp, #12
   20dca:	bd30      	pop	{r4, r5, pc}
   20dcc:	20000248 	.word	0x20000248
   20dd0:	20000ad8 	.word	0x20000ad8

00020dd4 <_strtoull_l.isra.0>:
   20dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20dd8:	b085      	sub	sp, #20
   20dda:	4693      	mov	fp, r2
   20ddc:	9102      	str	r1, [sp, #8]
   20dde:	9003      	str	r0, [sp, #12]
   20de0:	469a      	mov	sl, r3
   20de2:	460f      	mov	r7, r1
   20de4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   20de6:	e000      	b.n	20dea <_strtoull_l.isra.0+0x16>
   20de8:	462f      	mov	r7, r5
   20dea:	463d      	mov	r5, r7
   20dec:	4630      	mov	r0, r6
   20dee:	f815 4b01 	ldrb.w	r4, [r5], #1
   20df2:	f7ff fbcf 	bl	20594 <__locale_ctype_ptr_l>
   20df6:	4420      	add	r0, r4
   20df8:	7843      	ldrb	r3, [r0, #1]
   20dfa:	f013 0308 	ands.w	r3, r3, #8
   20dfe:	d1f3      	bne.n	20de8 <_strtoull_l.isra.0+0x14>
   20e00:	2c2d      	cmp	r4, #45	; 0x2d
   20e02:	f000 8089 	beq.w	20f18 <_strtoull_l.isra.0+0x144>
   20e06:	2c2b      	cmp	r4, #43	; 0x2b
   20e08:	bf03      	ittte	eq
   20e0a:	782c      	ldrbeq	r4, [r5, #0]
   20e0c:	9301      	streq	r3, [sp, #4]
   20e0e:	1cbd      	addeq	r5, r7, #2
   20e10:	9301      	strne	r3, [sp, #4]
   20e12:	f1ba 0f00 	cmp.w	sl, #0
   20e16:	d019      	beq.n	20e4c <_strtoull_l.isra.0+0x78>
   20e18:	f1ba 0f10 	cmp.w	sl, #16
   20e1c:	f000 8081 	beq.w	20f22 <_strtoull_l.isra.0+0x14e>
   20e20:	46d0      	mov	r8, sl
   20e22:	ea4f 79ea 	mov.w	r9, sl, asr #31
   20e26:	4642      	mov	r2, r8
   20e28:	464b      	mov	r3, r9
   20e2a:	f04f 30ff 	mov.w	r0, #4294967295
   20e2e:	f04f 31ff 	mov.w	r1, #4294967295
   20e32:	f7fb ffa7 	bl	1cd84 <__aeabi_uldivmod>
   20e36:	4642      	mov	r2, r8
   20e38:	4606      	mov	r6, r0
   20e3a:	460f      	mov	r7, r1
   20e3c:	464b      	mov	r3, r9
   20e3e:	f04f 30ff 	mov.w	r0, #4294967295
   20e42:	f04f 31ff 	mov.w	r1, #4294967295
   20e46:	f7fb ff9d 	bl	1cd84 <__aeabi_uldivmod>
   20e4a:	e00b      	b.n	20e64 <_strtoull_l.isra.0+0x90>
   20e4c:	2c30      	cmp	r4, #48	; 0x30
   20e4e:	d07d      	beq.n	20f4c <_strtoull_l.isra.0+0x178>
   20e50:	4f4e      	ldr	r7, [pc, #312]	; (20f8c <_strtoull_l.isra.0+0x1b8>)
   20e52:	2205      	movs	r2, #5
   20e54:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   20e58:	f04f 080a 	mov.w	r8, #10
   20e5c:	f04f 0900 	mov.w	r9, #0
   20e60:	f04f 0a0a 	mov.w	sl, #10
   20e64:	f04f 0e00 	mov.w	lr, #0
   20e68:	2000      	movs	r0, #0
   20e6a:	2100      	movs	r1, #0
   20e6c:	e011      	b.n	20e92 <_strtoull_l.isra.0+0xbe>
   20e6e:	42b9      	cmp	r1, r7
   20e70:	bf08      	it	eq
   20e72:	42b0      	cmpeq	r0, r6
   20e74:	d03f      	beq.n	20ef6 <_strtoull_l.isra.0+0x122>
   20e76:	fb00 f409 	mul.w	r4, r0, r9
   20e7a:	fb08 4401 	mla	r4, r8, r1, r4
   20e7e:	fba0 0108 	umull	r0, r1, r0, r8
   20e82:	4421      	add	r1, r4
   20e84:	18c0      	adds	r0, r0, r3
   20e86:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   20e8a:	f04f 0e01 	mov.w	lr, #1
   20e8e:	f815 4b01 	ldrb.w	r4, [r5], #1
   20e92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   20e96:	2b09      	cmp	r3, #9
   20e98:	d905      	bls.n	20ea6 <_strtoull_l.isra.0+0xd2>
   20e9a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   20e9e:	2b19      	cmp	r3, #25
   20ea0:	d80d      	bhi.n	20ebe <_strtoull_l.isra.0+0xea>
   20ea2:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   20ea6:	459a      	cmp	sl, r3
   20ea8:	dd11      	ble.n	20ece <_strtoull_l.isra.0+0xfa>
   20eaa:	f1be 0f00 	cmp.w	lr, #0
   20eae:	db03      	blt.n	20eb8 <_strtoull_l.isra.0+0xe4>
   20eb0:	428f      	cmp	r7, r1
   20eb2:	bf08      	it	eq
   20eb4:	4286      	cmpeq	r6, r0
   20eb6:	d2da      	bcs.n	20e6e <_strtoull_l.isra.0+0x9a>
   20eb8:	f04f 3eff 	mov.w	lr, #4294967295
   20ebc:	e7e7      	b.n	20e8e <_strtoull_l.isra.0+0xba>
   20ebe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   20ec2:	2b19      	cmp	r3, #25
   20ec4:	d803      	bhi.n	20ece <_strtoull_l.isra.0+0xfa>
   20ec6:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   20eca:	459a      	cmp	sl, r3
   20ecc:	dced      	bgt.n	20eaa <_strtoull_l.isra.0+0xd6>
   20ece:	f1be 0f00 	cmp.w	lr, #0
   20ed2:	db15      	blt.n	20f00 <_strtoull_l.isra.0+0x12c>
   20ed4:	9b01      	ldr	r3, [sp, #4]
   20ed6:	b113      	cbz	r3, 20ede <_strtoull_l.isra.0+0x10a>
   20ed8:	4240      	negs	r0, r0
   20eda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20ede:	f1bb 0f00 	cmp.w	fp, #0
   20ee2:	d005      	beq.n	20ef0 <_strtoull_l.isra.0+0x11c>
   20ee4:	f1be 0f00 	cmp.w	lr, #0
   20ee8:	d114      	bne.n	20f14 <_strtoull_l.isra.0+0x140>
   20eea:	9d02      	ldr	r5, [sp, #8]
   20eec:	f8cb 5000 	str.w	r5, [fp]
   20ef0:	b005      	add	sp, #20
   20ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ef6:	4293      	cmp	r3, r2
   20ef8:	ddbd      	ble.n	20e76 <_strtoull_l.isra.0+0xa2>
   20efa:	f04f 3eff 	mov.w	lr, #4294967295
   20efe:	e7c6      	b.n	20e8e <_strtoull_l.isra.0+0xba>
   20f00:	9a03      	ldr	r2, [sp, #12]
   20f02:	2322      	movs	r3, #34	; 0x22
   20f04:	6013      	str	r3, [r2, #0]
   20f06:	f04f 30ff 	mov.w	r0, #4294967295
   20f0a:	f04f 31ff 	mov.w	r1, #4294967295
   20f0e:	f1bb 0f00 	cmp.w	fp, #0
   20f12:	d0ed      	beq.n	20ef0 <_strtoull_l.isra.0+0x11c>
   20f14:	3d01      	subs	r5, #1
   20f16:	e7e9      	b.n	20eec <_strtoull_l.isra.0+0x118>
   20f18:	2301      	movs	r3, #1
   20f1a:	782c      	ldrb	r4, [r5, #0]
   20f1c:	9301      	str	r3, [sp, #4]
   20f1e:	1cbd      	adds	r5, r7, #2
   20f20:	e777      	b.n	20e12 <_strtoull_l.isra.0+0x3e>
   20f22:	2c30      	cmp	r4, #48	; 0x30
   20f24:	d123      	bne.n	20f6e <_strtoull_l.isra.0+0x19a>
   20f26:	782b      	ldrb	r3, [r5, #0]
   20f28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20f2c:	2b58      	cmp	r3, #88	; 0x58
   20f2e:	d128      	bne.n	20f82 <_strtoull_l.isra.0+0x1ae>
   20f30:	786c      	ldrb	r4, [r5, #1]
   20f32:	220f      	movs	r2, #15
   20f34:	3502      	adds	r5, #2
   20f36:	f04f 36ff 	mov.w	r6, #4294967295
   20f3a:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   20f3e:	f04f 0810 	mov.w	r8, #16
   20f42:	f04f 0900 	mov.w	r9, #0
   20f46:	f04f 0a10 	mov.w	sl, #16
   20f4a:	e78b      	b.n	20e64 <_strtoull_l.isra.0+0x90>
   20f4c:	782b      	ldrb	r3, [r5, #0]
   20f4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20f52:	2b58      	cmp	r3, #88	; 0x58
   20f54:	d0ec      	beq.n	20f30 <_strtoull_l.isra.0+0x15c>
   20f56:	2207      	movs	r2, #7
   20f58:	f04f 36ff 	mov.w	r6, #4294967295
   20f5c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   20f60:	f04f 0808 	mov.w	r8, #8
   20f64:	f04f 0900 	mov.w	r9, #0
   20f68:	f04f 0a08 	mov.w	sl, #8
   20f6c:	e77a      	b.n	20e64 <_strtoull_l.isra.0+0x90>
   20f6e:	220f      	movs	r2, #15
   20f70:	f04f 36ff 	mov.w	r6, #4294967295
   20f74:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   20f78:	f04f 0810 	mov.w	r8, #16
   20f7c:	f04f 0900 	mov.w	r9, #0
   20f80:	e770      	b.n	20e64 <_strtoull_l.isra.0+0x90>
   20f82:	f04f 0810 	mov.w	r8, #16
   20f86:	f04f 0900 	mov.w	r9, #0
   20f8a:	e74c      	b.n	20e26 <_strtoull_l.isra.0+0x52>
   20f8c:	19999999 	.word	0x19999999

00020f90 <_strtoull_r>:
   20f90:	b530      	push	{r4, r5, lr}
   20f92:	4c06      	ldr	r4, [pc, #24]	; (20fac <_strtoull_r+0x1c>)
   20f94:	4d06      	ldr	r5, [pc, #24]	; (20fb0 <_strtoull_r+0x20>)
   20f96:	6824      	ldr	r4, [r4, #0]
   20f98:	6b64      	ldr	r4, [r4, #52]	; 0x34
   20f9a:	b083      	sub	sp, #12
   20f9c:	2c00      	cmp	r4, #0
   20f9e:	bf08      	it	eq
   20fa0:	462c      	moveq	r4, r5
   20fa2:	9400      	str	r4, [sp, #0]
   20fa4:	f7ff ff16 	bl	20dd4 <_strtoull_l.isra.0>
   20fa8:	b003      	add	sp, #12
   20faa:	bd30      	pop	{r4, r5, pc}
   20fac:	20000248 	.word	0x20000248
   20fb0:	20000ad8 	.word	0x20000ad8

00020fb4 <__ascii_wctomb>:
   20fb4:	b121      	cbz	r1, 20fc0 <__ascii_wctomb+0xc>
   20fb6:	2aff      	cmp	r2, #255	; 0xff
   20fb8:	d804      	bhi.n	20fc4 <__ascii_wctomb+0x10>
   20fba:	700a      	strb	r2, [r1, #0]
   20fbc:	2001      	movs	r0, #1
   20fbe:	4770      	bx	lr
   20fc0:	4608      	mov	r0, r1
   20fc2:	4770      	bx	lr
   20fc4:	238a      	movs	r3, #138	; 0x8a
   20fc6:	6003      	str	r3, [r0, #0]
   20fc8:	f04f 30ff 	mov.w	r0, #4294967295
   20fcc:	4770      	bx	lr
   20fce:	bf00      	nop
   20fd0:	2e2f2e2e 	.word	0x2e2f2e2e
   20fd4:	2e2e2f2e 	.word	0x2e2e2f2e
   20fd8:	554c412f 	.word	0x554c412f
   20fdc:	6972445f 	.word	0x6972445f
   20fe0:	2f726576 	.word	0x2f726576
   20fe4:	5f554c41 	.word	0x5f554c41
   20fe8:	76697244 	.word	0x76697244
   20fec:	682f7265 	.word	0x682f7265
   20ff0:	692f6c61 	.word	0x692f6c61
   20ff4:	756c636e 	.word	0x756c636e
   20ff8:	682f6564 	.word	0x682f6564
   20ffc:	775f6c61 	.word	0x775f6c61
   21000:	682e7464 	.word	0x682e7464
   21004:	00000000 	.word	0x00000000
   21008:	656c6553 	.word	0x656c6553
   2100c:	64657463 	.word	0x64657463
   21010:	6e696c20 	.word	0x6e696c20
   21014:	00003a65 	.word	0x00003a65
   21018:	00000a0d 	.word	0x00000a0d
   2101c:	2a2a2a2a 	.word	0x2a2a2a2a
   21020:	66694c20 	.word	0x66694c20
   21024:	75502065 	.word	0x75502065
   21028:	2065736c 	.word	0x2065736c
   2102c:	69746341 	.word	0x69746341
   21030:	65746176 	.word	0x65746176
   21034:	2a2a2a64 	.word	0x2a2a2a64
   21038:	0000002a 	.word	0x0000002a

0002103c <_ZTV10AMMC_Class>:
   2103c:	000002d4 000002c4 00000000 00000000     ................
   2104c:	00000e05 00000ea5 00013685 00000000     .........6......
   2105c:	00000000 fffffd3c 00000000 00012e39     ....<.......9...
   2106c:	00012d09 fffffd2c fffffd2c fffffff0     .-..,...,.......
   2107c:	fffffd2c 00000000 00000e79 00000ed1     ,.......y.......
   2108c:	000136ed                                .6..

00021090 <_ZTT10AMMC_Class>:
   21090:	0002104c 000210cc 00021120 00021138     L....... ...8...
   210a0:	00021154 000210e8 00021104 00021068     T...........h...
   210b0:	00021084 0002116c 00021188              ....l.......

000210bc <_ZTC10AMMC_Class0_15ARINC_Interface>:
   210bc:	000002d4 000002c4 00000000 00000000     ................
	...
   210d4:	00013685 00000000 00000000 fffffd3c     .6..........<...
   210e4:	00000000 00012e39 00012d09 fffffd2c     ....9....-..,...
   210f4:	fffffd2c fffffff0 fffffd2c 00000000     ,.......,.......
	...
   2110c:	000136ed                                .6..

00021110 <_ZTC10AMMC_Class0_18ARINC_Buffer_Class>:
   21110:	000002d4 000002c4 00000000 00000000     ................
	...
   21130:	fffffd3c 00000000 00012e39 00012d09     <.......9....-..
   21140:	00000000 fffffd2c fffffff0 fffffd2c     ....,.......,...
	...
   2115c:	0001462b                                +F..

00021160 <_ZTC10AMMC_Class724_14Protocol_Class>:
   21160:	fffffff0 00000000 00000000 00000000     ................
   21170:	00000000 0001462b 00000000 00000000     ....+F..........
   21180:	00000010 00000000 00012e39 00012d09     ........9....-..

00021190 <factoryDefaultsConfiguration>:
   21190:	000000ac 00000004 0000070c 00000000     ................
   211a0:	00000000 00000001 000003e8 000003e8     ................
   211b0:	000003e8 00000000 00000000 00000000     ................
   211c0:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
   211d0:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
   211e0:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
   211f0:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
   21200:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
   21210:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
   21220:	41200000 41200000 00000014 00000078     .. A.. A....x...
   21230:	be23d70a 41d00000 00000078              ..#....Ax...

0002123c <factoryDefaultsCycles>:
   2123c:	000001c0 00000005 0000000c 00000024     ............$...
   2124c:	756e614d 00006c61 00000000 00000000     Manual..........
   2125c:	00000000 00000001 00000258 0000000f     ........X.......
   2126c:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
   21284:	00000001 00000258 0000001e 0000012c     ....X.......,...
   21294:	2030332b 73636573 00000000 00000000     +30 secs........
   212a4:	00000000 00000001 000000f0 0000001e     ................
   212b4:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
   212dc:	73657250 32207465 00000000 00000000     Preset 2........
	...
   21300:	73657250 33207465 00000000 00000000     Preset 3........
	...
   21324:	73657250 34207465 00000000 00000000     Preset 4........
	...
   21348:	73657250 35207465 00000000 00000000     Preset 5........
	...
   2136c:	73657250 36207465 00000000 00000000     Preset 6........
	...
   21390:	73657250 37207465 00000000 00000000     Preset 7........
	...
   213b4:	73657250 38207465 00000000 00000000     Preset 8........
	...
   213d8:	73657250 39207465 00000000 00000000     Preset 9........
	...
   213fc:	65736552 00000074 74696e49 696c6169     Reset...Initiali
   2140c:	0000657a 75736552 0000656d 6e617453     ze..Resume..Stan
   2141c:	4f796264 00004646 70657250 53657261     dbyOFF..PrepareS
   2142c:	646e6174 4e4f7962 00000000 6e617453     tandbyON....Stan
   2143c:	4f796264 0000004e 6e617453 52796264     dbyON...StandbyR
   2144c:	79646165 00000000 616c6544 00646579     eady....Delayed.
   2145c:	65746e49 70757272 00646574 00004e4f     Interrupted.ON..
   2146c:	706f7453 50646570 65636f72 00007373     StoppedProcess..
   2147c:	61656c43 0070756e 696e6946 64656873     Cleanup.Finished
   2148c:	00000000 7065654b 00746f48 666c6553     ....KeepHot.Self
   2149c:	746f7250 00746365 6f727245 00000072     Protect.Error...
   214ac:	6e69614d 616e6574 0065636e 55494d48     Maintenance.HMIU
   214bc:	74616470 00000065 6d726946 65726177     pdate...Firmware
   214cc:	61647055 00006574 72727543 20746e65     Update..Current 
   214dc:	74617453 00000065 6c637943 75442065     State...Cycle Du
   214ec:	69746172 00006e6f 616d6552 6e696e69     ration..Remainin
   214fc:	69542067 0000656d 67726154 50207465     g Time..Target P
   2150c:	7265776f 00000000 00776f4e 6967614d     ower....Now.Magi
   2151c:	00000063                                c...

00021520 <defaultHVACState>:
   21520:	61626364 00000000 00000000 00000000     dcba............
	...
   21588:	00203a20 00007830 00000a0d               : .0x......

00021594 <_ZTV17ConfigState_Class>:
	...
   2159c:	0001462b                                +F..

000215a0 <_ZTV14DateTime_Class>:
	...
   215a8:	00016f69 00017059 6e69614d 616e6574     io..Yp..Maintena
   215b8:	2065636e 6c6f6f54 636f4c20 0064656b     nce Tool Locked.
   215c8:	00000a0d 6f6d6552 6f206574 61726570     ....Remote opera
   215d8:	6e6f6974 73694420 656c6261 00000064     tion Disabled...
   215e8:	49505351 6f725020 6d617267 61745320     QSPI Program Sta
   215f8:	64657472 00000d0a 73616c46 61642068     rted....Flash da
   21608:	76206174 66697265 74616369 206e6f69     ta verification 
   21618:	6c696166 0a2e6465 0000000d 74696220     failed...... bit
   21628:	00003a20 00000a0d 74697257 202d2065      :......Write - 
   21638:	64616552 20736920 63637573 66737365     Read is successf
   21648:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
   21658:	6d656d20 2079726f 00000000 202a2a2a      memory ....*** 
   21668:	72617453 20705574 6f676c41 68746972     StartUp Algorith
   21678:	206e656d 74736554 2a2a2a20 00000000     men Test ***....
   21688:	202a2a2a 65746144 0020203a 2074634f     *** Date:  .Oct 
   21698:	32203032 00303230 6d695420 00203a65     20 2020. Time: .
   216a8:	333a3531 38353a36 00000000 202a2a2a     15:36:58....*** 
   216b8:	20554c41 74696e69 65746169 2a2a2064     ALU initiated **
   216c8:	0000002a 69746341 6c206576 3a656e69     *...Active line:
   216d8:	00000020 73616c46 654d2068 79726f6d      ...Flash Memory
   216e8:	6c655320 73655466 41502074 44455353      SelfTest PASSED
   216f8:	00000000 00000a0d 73616c46 654d2068     ........Flash Me
   21708:	79726f6d 6c655320 73655466 41462074     mory SelfTest FA
   21718:	44454c49 00000000 52504545 4d204d4f     ILED....EEPROM M
   21728:	726f6d65 65532079 6554666c 50207473     emory SelfTest P
   21738:	45535341 00000044 52504545 4d204d4f     ASSED...EEPROM M
   21748:	726f6d65 65532079 6554666c 46207473     emory SelfTest F
   21758:	454c4941 00000044 20726941 646e6f43     AILED...Air Cond
   21768:	6f697469 676e696e 73795320 206d6574     itioning System 
   21778:	7265704f 6e697461 00000067 00000a0d     Operating.......
   21788:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   21798:	73795320 206d6574 72617453 00646574      System Started.
   217a8:	646e6168 4147656c 76454e49 20746e65     handleGAINEvent 
   217b8:	65636572 64657669 7773203a 68637469     received: switch
   217c8:	20676e69 6d6f7266 00000020 206f7420     ing from ... to 
   217d8:	00000000 646e6168 7453656c 49657461     ....handleStateI
   217e8:	6974696e 7a696c61 66203a65 7367616c     nitialize: flags
   217f8:	203d3d20 00007830 646e6168 7453656c      == 0x..handleSt
   21808:	49657461 6974696e 7a696c61 00000065     ateInitialize...
   21818:	646e6168 7453656c 53657461 646e6174     handleStateStand
   21828:	464f7962 00000046 20726941 646e6f43     byOFF...Air Cond
   21838:	6f697469 676e696e 73795320 206d6574     itioning System 
   21848:	706f7453 00646570                       Stopped.

00021850 <_ZTV12States_Class>:
   21850:	000004b8 00000218 00000000 00000000     ................
   21860:	00003fed fffffde8 fffffde8 00000000     .?..............
   21870:	00004019 fffffd60 fffffb48 00000000     .@..`...H.......

00021880 <_ZTT12States_Class>:
   21880:	00021860 00021870 00021880 000218a0     `...p...........
   21890:	000218ac                                ....

00021894 <_ZTC12States_Class1208_19HVAC_Commando_Class>:
   21894:	fffffd60 00000000 00000000 00000000     `...............
   218a4:	000002a0 00000000 0001462b 2e2f2e2e     ........+F..../.
   218b4:	7361542f 6e61486b 72656c64 616c435f     /TaskHandler_Cla
   218c4:	632e7373 00007070 682f2e2e 702f6c70     ss.cpp..../hpl/p
   218d4:	2f74726f 5f6c7068 6f697067 7361625f     ort/hpl_gpio_bas
   218e4:	00682e65 682f2e2e 692f6c61 756c636e     e.h.../hal/inclu
   218f4:	682f6564 775f6c61 682e7464 00000000     de/hal_wdt.h....
   21904:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   21914:	6e656c61 2e726164 00000063 682f2e2e     alendar.c...../h
   21924:	732f6c61 682f6372 635f6c61 615f6e61     al/src/hal_can_a
   21934:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
   21944:	682f6372 635f6c61 735f6372 2e636e79     rc/hal_crc_sync.
   21954:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
   21964:	695f6c61 6d5f6332 7973615f 632e636e     al_i2c_m_async.c
   21974:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   21984:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
   21994:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
   219a4:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
   219b4:	682f6372 715f6c61 5f697073 636e7973     rc/hal_qspi_sync
   219c4:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   219d4:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
   219e4:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
   219f4:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
   21a04:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   21a14:	2e747369 00000063                       ist.c...

00021a1c <_map>:
   21a1c:	00000000 00000040 00000004 00000004     ....@...........
   21a2c:	00000005 00000005 00000006 00000056     ............V...
   21a3c:	00000007 00000057 00000008 00000028     ....W.......(...
   21a4c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   21a5c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00021a6c <user_mux_confs>:
   21a6c:	00020100 00000000 00000000 00000000     ................
	...

00021ab0 <channel_confs>:
   21ab0:	0660065f 00000000 00000000 00000000     _.`.............
	...

00021af0 <interrupt_cfg>:
	...
   21b70:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   21b80:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   21b90:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   21ba0:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   21bb0:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   21bc0:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   21bd0:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   21be0:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   21bf0:	43000c00                                ...C

00021bf4 <sercomspi_regs>:
   21bf4:	0020008c 00020000 00000000 01ff0063     .. .........c...
   21c04:	20000c01 02000000 00000000 ff000100     ... ............
   21c14:	000c0401 00000030 00000002 00ef0000     ....0...........
   21c24:	000601ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   21c34:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   21c44:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   21c54:	43001400 43001800                       ...C...C

00021c5c <_usb_ep_cfgs>:
   21c5c:	20008744 00000000 00000040 20008784     D.. ....@...... 
   21c6c:	200087c4 00400040 20008804 20008844     ... @.@.... D.. 
   21c7c:	00400040 20008884 200088c4 00400040     @.@.... ... @.@.
   21c8c:	20008904 20008944 00400040 00000804     ... D.. @.@.....
   21c9c:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   21cac:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   21cbc:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   21ccc:	7361625f 00682e65                       _base.h.

00021cd4 <n25q256a_interface>:
   21cd4:	00010e15 00010eb9 00010fc9 00011181     ................
   21ce4:	00011211 752f2e2e 642f6273 63697665     ....../usb/devic
   21cf4:	73752f65 2e636462 00000063              e/usbdc.c...

00021d00 <_ZTV17ARINC_Conversions>:
	...
   21d08:	00012e39 00012d09                       9....-..

00021d10 <_ZL5Mesg1>:
   21d10:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

00021d20 <_ZL5Mesg2>:
   21d20:	61746144 0000203a                       Data: ..

00021d28 <_ZL10HexToAscii>:
   21d28:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00021d38 <_ZL11HistoryMesg>:
   21d38:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
   21d48:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   21d58:	206f7420 74696e49 7a696c69 000d0a65      to Initilize...
   21d68:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
   21d78:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
   21d88:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
   21d98:	67617373 2d2d2165 00002d2d 61727420     ssage!----.. tra
   21da8:	696d736e 6e697474 2e2e2e67 00000000     nsmitting.......
   21db8:	61725420 696d736e 64657474 00000021      Transmitted!...
   21dc8:	0000003e 72540d0a 6d736e61 26207469     >.....Transmit &
   21dd8:	63655220 65766965 74695720 614c2068      Receive With La
   21de8:	736c6562 646f4d20 000d0a65 45530d0a     bels Mode.....SE
   21df8:	542d464c 2c545345 746e4920 616e7265     LF-TEST, Interna
   21e08:	6944206c 61746967 6f4c206c 622d706f     l Digital Loop-b
   21e18:	2c6b6361 206f4e20 61746164 20736920     ack, No data is 
   21e28:	6e617274 74696d73 20646574 65747865     transmitted exte
   21e38:	6c616e72 0d0a796c 00000000 6f200d0a     rnally........ o
   21e48:	6154206e 20656c62 6562616c 6120736c     n Table labels a
   21e58:	45206572 6c62616e 00006465 500a0d0a     re Enabled.....P
   21e68:	73736572 2d575320 6f742031 61747320     ress SW-1 to sta
   21e78:	69207472 6974696e 796c6c61 000a0d0a     rt initially....
   21e88:	202d2d2d 74747542 43206e6f 616d6d6f     --- Button Comma
   21e98:	2073646e 0a2d2d2d 0000000d 70532020     nds ---.....  Sp
   21ea8:	20656361 20726142 44206f74 6c707369     ace Bar to Displ
   21eb8:	53207961 75746174 6e612073 6f432064     ay Status and Co
   21ec8:	6f72746e 6552206c 74736967 0a737265     ntrol Registers.
   21ed8:	0000000d 20702020 50206f74 65737561     ....  p to Pause
   21ee8:	00000d0a 206d2020 44206f74 6c707369     ....  m to Displ
   21ef8:	4c207961 6c656261 6d654d20 0079726f     ay Label Memory.
   21f08:	003e0d0a 72540d0a 6d736e61 69747469     ..>...Transmitti
   21f18:	0d0a676e 0000003e 49480d0a 3935332d     ng..>.....HI-359
   21f28:	74532033 73757461 6f43202c 6f72746e     3 Status, Contro
   21f38:	6552206c 74736967 0d737265 0000000a     l Registers.....
   21f48:	20090d0a 2a2a2a20 50202a2a 73736572     ...  ***** Press
   21f58:	70732020 62656361 74207261 6f63206f       spacebar to co
   21f68:	6e69746e 2a206575 2a2a2a2a 0000002a     ntinue ******...
   21f78:	540d0a0a 736e6172 2074696d 73756150     ...Transmit Paus
   21f88:	0d0a6465 00000000 72500d0a 20737365     ed........Press 
   21f98:	44454c4f 5455425f 2d4e4f54 6f742032     OLED_BUTTON-2 to
   21fa8:	61727420 696d736e 6e6f2074 72662065      transmit one fr
   21fb8:	20656d61 20646e61 73756170 000d0a65     ame and pause...
   21fc8:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   21fd8:	2d4e4f54 6f742033 73655220 0a656d75     TON-3 to Resume.
   21fe8:	0000000d 72540d0a 6d736e61 65747469     ......Transmitte
   21ff8:	65522072 656d7573 2e2e2e64 00000d0a     r Resumed.......
   22008:	65520d0a 76696563 31207265 62614c20     ..Receiver 1 Lab
   22018:	0a736c65 0000000d 65520d0a 76696563     els.......Receiv
   22028:	32207265 62614c20 0a736c65 0000000d     er 2 Labels.....
   22038:	72540d0a 6d736e61 26207469 63655220     ..Transmit & Rec
   22048:	65766965 68634520 6f4d206f 0d0a6564     eive Echo Mode..
   22058:	00000000 6c530d0a 5320776f 64656570     ......Slow Speed
   22068:	00000000 61460d0a 53207473 64656570     ......Fast Speed
   22078:	00000000 72540d0a 6d736e61 65747469     ......Transmitte
   22088:	61502072 79746972 616e4520 64656c62     r Parity Enabled
   22098:	00000000 49480d0a 3935332d 61662033     ......HI-3593 fa
   220a8:	64656c69 206f7420 74696e69 7a696c69     iled to initiliz
   220b8:	000d0a65 61540d0a 20656c62 6562616c     e.....Table labe
   220c8:	6120736c 45206572 6c62616e 00006465     ls are Enabled..
   220d8:	2d0a0d0a 43202d2d 6f736e6f 4320656c     ...--- Console C
   220e8:	616d6d6f 2073646e 706c6548 2d2d2d20     ommands Help ---
   220f8:	00000000 20502020 6150203d 79746972     ....  P = Parity
   22108:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   22118:	20542020 4654203d 2050494c 676f5420       T = TFLIP  Tog
   22128:	20656c67 6f2f6e6f 00006666 20522020     gle on/off..  R 
   22138:	4652203d 2050494c 676f5420 20656c67     = RFLIP  Toggle 
   22148:	6f2f6e6f 00006666 20532020 4453203d     on/off..  S = SD
   22158:	202c4e4f 2c394453 31445320 6f542030     ON, SD9, SD10 To
   22168:	656c6767 2f6e6f20 0066666f 20482020     ggle on/off.  H 
   22178:	6854203d 48207369 20706c65 65676150     = This Help Page
   22188:	00000000 70532020 20656361 20726142     ....  Space Bar 
   22198:	6944203d 616c7073 74532079 73757461     = Display Status
   221a8:	646e6120 6e6f4320 6c6f7274 67657220      and Control reg
   221b8:	00000073 20492020 6e49203d 6d657263     s...  I = Increm
   221c8:	20746e65 7373654d 20656761 20646e61     ent Message and 
   221d8:	6e617254 74696d73 7845202e 726f6c70     Transmit. Explor
   221e8:	4d207265 2065646f 4f202d20 21594c4e     er Mode  - ONLY!
   221f8:	00000000 204d2020 6e45203d 20726574     ....  M = Enter 
   22208:	74737543 4d206d6f 61737365 202e6567     Custom Message. 
   22218:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   22228:	4c4e4f20 00002159 4e452020 3d524554      ONLY!..  ENTER=
   22238:	61725420 696d736e 656e2074 6d207478      Transmit next m
   22248:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   22258:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   22268:	00207830 30307826 00002030 50205854     0x .&x000 ..TX P
   22278:	74697261 52412079 5f434e49 0d0a4e4f     arity ARINC_ON..
   22288:	0000003e 50205854 74697261 52412079     >...TX Parity AR
   22298:	5f434e49 0a46464f 00003e0d 494c4654     INC_OFF..>..TFLI
   222a8:	65532050 3e0d0a74 00000000 494c4654     P Set..>....TFLI
   222b8:	6c432050 65726165 3e0d0a64 00000000     P Cleared..>....
   222c8:	2d434552 46522031 2050494c 0a746553     REC-1 RFLIP Set.
   222d8:	00003e0d 2d434552 46522031 2050494c     .>..REC-1 RFLIP 
   222e8:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   222f8:	46522032 2050494c 0a746553 00003e0d     2 RFLIP Set..>..
   22308:	2d434552 46522032 2050494c 61656c43     REC-2 RFLIP Clea
   22318:	0a646572 00003e0d 2d434552 44532031     red..>..REC-1 SD
   22328:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   22338:	0a746553 00003e0d 2d434552 44532031     Set..>..REC-1 SD
   22348:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   22358:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   22368:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
   22378:	20303144 0a746553 00003e0d 2d434552     D10 Set..>..REC-
   22388:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
   22398:	20303144 61656c43 0a646572 00003e0d     D10 Cleared..>..
   223a8:	500a0d0a 73736572 61705320 42206563     ...Press Space B
   223b8:	6f207261 57532072 7420342d 6572206f     ar or SW-4 to re
   223c8:	656d7573 00000000 6562614c 2020736c     sume....Labels  
   223d8:	202d2030 203a3336 00000020 00000020     0 - 63:  ... ...
   223e8:	614c0d0a 736c6562 34362020 3732312d     ..Labels  64-127
   223f8:	0020203a 614c0d0a 736c6562 38323120     :  ...Labels 128
   22408:	3139312d 0020203a 614c0d0a 736c6562     -191:  ...Labels
   22418:	32393120 3535322d 0020203a 614c0d0a      192-255:  ...La
   22428:	736c6562 20302020 3336202d 0020203a     bels  0 - 63:  .
   22438:	543e0d0a 20202058 74614420 00003a61     ..>TX    Data:..
   22448:	6562614c 00003a6c 2d636552 61442031     Label:..Rec-1 Da
   22458:	003a6174 2d314c50 61442031 003a6174     ta:.PL1-1 Data:.
   22468:	6374614d 00003a68 2d314c50 61442032     Match:..PL1-2 Da
   22478:	003a6174 2d314c50 61442033 003a6174     ta:.PL1-3 Data:.
   22488:	2d636552 61442032 003a6174 2d324c50     Rec-2 Data:.PL2-
   22498:	61442031 003a6174 2d324c50 61442032     1 Data:.PL2-2 Da
   224a8:	003a6174 2d324c50 61442033 003a6174     ta:.PL2-3 Data:.
   224b8:	00000d0a 78450d0a 726f6c70 4d207265     ......Explorer M
   224c8:	0a65646f 0000000d 6c200d0a 6c656261     ode....... label
   224d8:	61542073 20656c62 45207369 6c62616e     s Table is Enabl
   224e8:	00006465 2d0a0d0a 42202d2d 6f747475     ed.....--- Butto
   224f8:	6f43206e 6e616d6d 2d207364 00002d2d     n Commands ---..
   22508:	20200d0a 63617073 72616265 206f7420     ..  spacebar to 
   22518:	70736944 2079616c 74617453 61207375     Display Status a
   22528:	4320646e 72746e6f 52206c6f 73696765     nd Control Regis
   22538:	73726574 00000000 20200d0a 44454c4f     ters......  OLED
   22548:	5455422d 324e4f54 61727420 696d736e     -BUTTON2 transmi
   22558:	6e6f2074 656d2065 67617373 72662065     t one message fr
   22568:	74206d6f 736e6172 2074696d 66667562     om transmit buff
   22578:	00007265 20200d0a 6f74204c 69725020     er....  L to Pri
   22588:	4c20746e 6c656261 6d654d20 0a79726f     nt Label Memory.
   22598:	0000000d 72500d0a 20737365 45544e45     ......Press ENTE
   225a8:	6f742052 61725420 696d736e 726f2074     R to Transmit or
   225b8:	65737520 65687420 294d2820 6d6f6320      use the (M) com
   225c8:	646e616d 206f7420 65746e65 20612072     mand to enter a 
   225d8:	74737563 6d206d6f 61737365 00006567     custom message..
   225e8:	73657250 57532073 726f2034 61707320     Press SW4 or spa
   225f8:	61626563 6f742072 6e6f6320 756e6974     cebar to continu
   22608:	00000065 73657250 70732073 62656361     e...Press spaceb
   22618:	74207261 6f63206f 6e69746e 00006575     ar to continue..
   22628:	433e0d0a 616d6d6f 4d20646e 00000000     ..>Command M....
   22638:	6e450d0a 20726574 79622033 20736574     ..Enter 3 bytes 
   22648:	414c202b 204c4542 54206f74 736e6172     + LABEL to Trans
   22658:	2074696d 6c6c6f66 6465776f 20796220     mit followed by 
   22668:	45544e45 000d0a52 6f540d0a 61725420     ENTER.....To Tra
   22678:	696d736e 65202c74 7265746e 62203320     nsmit, enter 3 b
   22688:	73657479 6c6f6620 65776f6c 79622064     ytes followed by
   22698:	4c206120 6c656261 74796220 6f662065      a Label byte fo
   226a8:	776f6c6c 62206465 4e452079 0a524554     llowed by ENTER.
   226b8:	0000000d 6d726f46 203a7461 73746942     ....Format: Bits
   226c8:	322d3233 42202c35 32737469 37312d34     32-25, Bits24-17
   226d8:	6942202c 36317374 202c392d 4542414c     , Bits16-9, LABE
   226e8:	3a0d0a4c 00000000 6d617845 3a656c70     L..:....Example:
   226f8:	20313020 34203332 37362035 544e4520      01 23 45 67 ENT
   22708:	0d0a5245 0000003a 65725020 52207373     ER..:... Press R
   22718:	52555445 0000004e 61725420 696d736e     ETURN... Transmi
   22728:	676e6974 002e2e2e 61725420 696d736e     ting.... Transmi
   22738:	21646574 00000000 6d6d6f43 20646e61     ted!....Command 
   22748:	49203a49 6572636e 746e656d 74616420     I: Increment dat
   22758:	3e0d0a61 00000000                       a..>....

00022760 <_ZTV15ARINC_Interface>:
   22760:	000002d0 000002c0 00000000 00000000     ................
   22770:	000132a5 00013355 00013685 00000000     .2..U3...6......
   22780:	00000000 fffffd40 00000000 00012e39     ....@.......9...
   22790:	00012d09 fffffd30 fffffd30 fffffff0     .-..0...0.......
   227a0:	fffffd30 00000000 00013329 00013381     0.......)3...3..
   227b0:	000136ed                                .6..

000227b4 <_ZTT15ARINC_Interface>:
   227b4:	00022770 000227e4 000227fc 00022818     p'...'...'...(..
   227c4:	0002278c 000227a8 00022830 0002284c     .'...'..0(..L(..

000227d4 <_ZTC15ARINC_Interface0_18ARINC_Buffer_Class>:
   227d4:	000002d0 000002c0 00000000 00000000     ................
	...
   227f4:	fffffd40 00000000 00012e39 00012d09     @.......9....-..
   22804:	00000000 fffffd30 fffffff0 fffffd30     ....0.......0...
	...
   22820:	0001462b                                +F..

00022824 <_ZTC15ARINC_Interface720_14Protocol_Class>:
   22824:	fffffff0 00000000 00000000 00000000     ................
   22834:	00000000 0001462b 00000000 00000000     ....+F..........
   22844:	00000010 00000000 00012e39 00012d09     ........9....-..

00022854 <_ZL12LabelArray_1>:
   22854:	c1215d1d 9616efdd 3f5f9f0d bd00ffdf     .]!......._?....
	...
   22874:	636e7546 6e6f6974 65786520 65747563     Function execute
   22884:	75732064 73656363 6c756673 0000796c     d successfully..
   22894:	63656843 6f79206b 77207275 6e697269     Check your wirin
   228a4:	46202e67 6873616c 69686320 73692070     g. Flash chip is
   228b4:	6e6f6e20 7365722d 736e6f70 2e657669      non-responsive.
   228c4:	00000000 6e6f632a 75727473 726f7463     ....*constructor
   228d4:	5f666f5f 696f6863 2e2a6563 69676562     _of_choice*.begi
   228e4:	2029286e 20736177 20746f6e 6c6c6163     n() was not call
   228f4:	69206465 6f76206e 73206469 70757465     ed in void setup
   22904:	00002928 62616e55 7420656c 6469206f     ()..Unable to id
   22914:	69746e65 63207966 2e706968 65724120     entify chip. Are
   22924:	756f7920 72757320 68742065 63207369      you sure this c
   22934:	20706968 73207369 6f707075 64657472     hip is supported
   22944:	0000003f 62616e55 7420656c 6469206f     ?...Unable to id
   22954:	69746e65 63207966 63617061 2e797469     entify capacity.
   22964:	20734920 73696874 69686320 666f2070      Is this chip of
   22974:	69636966 796c6c61 70757320 74726f70     ficially support
   22984:	203f6465 6e206649 202c746f 61656c70     ed? If not, plea
   22994:	64206573 6e696665 20612065 50414360     se define a `CAP
   229a4:	54494341 63206059 74736e6f 20746e61     ACITY` constant 
   229b4:	20646e61 6c636e69 20656475 69207469     and include it i
   229c4:	6c66206e 2e687361 69676562 4143286e     n flash.begin(CA
   229d4:	49434150 2e295954 00000000 70696843     PACITY).....Chip
   229e4:	20736920 79737562 0000002e 656b614d      is busy....Make
   229f4:	72757320 6c612065 6970206c 6820736e      sure all pins h
   22a04:	20657661 6e656562 6e6f6320 7463656e     ave been connect
   22a14:	70206465 65706f72 00796c72 65676150     ed properly.Page
   22a24:	65766f20 6f6c6672 61682077 65622073      overflow has be
   22a34:	64206e65 62617369 2064656c 20646e61     en disabled and 
   22a44:	20656874 72646461 20737365 6c6c6163     the address call
   22a54:	65206465 65656378 74207364 6d206568     ed exceeds the m
   22a64:	726f6d65 00000079 62616e55 7420656c     emory...Unable t
   22a74:	6e45206f 656c6261 69725720 676e6974     o Enable Writing
   22a84:	206f7420 70696863 0000002e 61656c50      to chip....Plea
   22a94:	6d206573 20656b61 65727573 65687420     se make sure the
   22aa4:	4c4f4820 20262044 54495257 4f525045      HOLD & WRITEPRO
   22ab4:	54434554 6e697020 72612073 75702065     TECT pins are pu
   22ac4:	64656c6c 20707520 56206f74 00004343     lled up to VCC..
   22ad4:	73696854 63657320 20726f74 65726c61     This sector alre
   22ae4:	20796461 746e6f63 736e6961 74616420     ady contains dat
   22af4:	00002e61 61656c50 6d206573 20656b61     a...Please make 
   22b04:	65727573 65687420 63657320 73726f74     sure the sectors
   22b14:	69656220 7720676e 74746972 74206e65      being written t
   22b24:	7261206f 72652065 64657361 0000002e     o are erased....
   22b34:	20756f59 20657261 6e6e7572 20676e69     You are running 
   22b44:	20776f6c 53206e6f 2e4d4152 656c5020     low on SRAM. Ple
   22b54:	20657361 6974706f 6573696d 756f7920     ase optimise you
   22b64:	72702072 6172676f 6f66206d 65622072     r program for be
   22b74:	72657474 4d415220 61737520 00006567     tter RAM usage..
   22b84:	73696854 6e756620 6f697463 7369206e     This function is
   22b94:	746f6e20 70757320 74726f70 62206465      not supported b
   22ba4:	68742079 6c662065 20687361 6f6d656d     y the flash memo
   22bb4:	68207972 77647261 2e657261 00000000     ry hardware.....
   22bc4:	62616e55 7420656c 7573206f 6e657073     Unable to suspen
   22bd4:	65722f64 656d7573 65706f20 69746172     d/resume operati
   22be4:	002e6e6f 74697257 75462065 6974636e     on..Write Functi
   22bf4:	68206e6f 66207361 656c6961 72652064     on has failed er
   22c04:	63726f72 6b636568 0000002e 62616e55     rorcheck....Unab
   22c14:	7420656c 6e65206f 656c6261 622d3420     le to enable 4-b
   22c24:	20657479 72646461 69737365 002e676e     yte addressing..
   22c34:	62616e55 7420656c 6964206f 6c626173     Unable to disabl
   22c44:	2d342065 65747962 64646120 73736572     e 4-byte address
   22c54:	2e676e69 00000000 20656854 70696863     ing.....The chip
   22c64:	20736920 72727563 6c746e65 6f702079      is currently po
   22c74:	65726577 6f642064 002e6e77 20656854     wered down..The 
   22c84:	73616c46 68632068 64207069 2073656f     Flash chip does 
   22c94:	20746f6e 70707573 2074726f 50444653     not support SFDP
   22ca4:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
   22cb4:	45206461 65736172 72615020 74656d61     ad Erase Paramet
   22cc4:	20737265 6d6f7266 69686320 52202e70     ers from chip. R
   22cd4:	72657665 676e6974 206f7420 7262696c     everting to libr
   22ce4:	20797261 61666564 73746c75 0000002e     ary defaults....
   22cf4:	62616e55 7420656c 6572206f 65206461     Unable to read e
   22d04:	65736172 6d697420 66207365 206d6f72     rase times from 
   22d14:	73616c66 656d2068 79726f6d 6552202e     flash memory. Re
   22d24:	74726576 20676e69 6c206f74 61726269     verting to libra
   22d34:	64207972 75616665 2e73746c 00000000     ry defaults.....
   22d44:	62616e55 7420656c 6572206f 70206461     Unable to read p
   22d54:	72676f72 74206d61 73656d69 6f726620     rogram times fro
   22d64:	6c66206d 20687361 6f6d656d 202e7972     m flash memory. 
   22d74:	65766552 6e697472 6f742067 62696c20     Reverting to lib
   22d84:	79726172 66656420 746c7561 00002e73     rary defaults...
   22d94:	43206f4e 20706968 656c6553 70207463     No Chip Select p
   22da4:	64206e69 6e696665 69206465 6874206e     in defined in th
   22db4:	75632065 6d6f7473 49505320 72724120     e custom SPI Arr
   22dc4:	002e7961 6e6b6e55 206e776f 6f727265     ay..Unknown erro
   22dd4:	00000072 6f727245 6f632072 203a6564     r...Error code: 
   22de4:	00007830 00000030 74206649 20736968     0x..0...If this 
   22df4:	73656f64 746f6e20 6c656820 65722070     does not help re
   22e04:	766c6f73 6c632f65 66697261 68742079     solve/clarify th
   22e14:	69207369 65757373 0000202c 61656c70     is issue, ..plea
   22e24:	72206573 65736961 206e6120 75737369     se raise an issu
   22e34:	74612065 74746820 2f2f3a70 2e777777     e at http://www.
   22e44:	2d327368 69676e65 7265656e 2e676e69     hs2-engineering.
   22e54:	692f6564 7865646e 7068702e 6e6f632f     de/index.php/con
   22e64:	74636174 6d74682e 6977206c 74206874     tact.html with t
   22e74:	64206568 69617465 6f20736c 68772066     he details of wh
   22e84:	79207461 2072756f 65726577 696f6420     at your were doi
   22e94:	7720676e 206e6568 73696874 72726520     ng when this err
   22ea4:	6f20726f 72756363 00646572              or occurred.

00022eb0 <maxEventCount>:
   22eb0:	00800008                                         ..

00022eb2 <sizeOfEventQueue>:
   22eb2:	ffff0080                                         ..

00022eb4 <forever>:
   22eb4:	7fffffff 2e2f2e2e 2e2e2f2e 554c412f     ....../../../ALU
   22ec4:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   22ed4:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   22ee4:	6f697067 7361625f 00682e65              gpio_base.h.

00022ef0 <defaultParameters>:
   22ef0:	00000040                                @...

00022ef4 <defaultPreferences>:
   22ef4:	000000fa 00000032                       ....2...

00022efc <_ZTV14Calendar_Class>:
	...
   22f04:	00016f69 00017059                       io..Yp..

00022f0c <_ZTV17DateTimeLog_Class>:
	...
   22f14:	0001462b 0001462b                       +F..+F..

00022f1c <_ZTV9CDC_Class>:
	...
   22f24:	00017ded 00017ecd 00017a41 00017db5     .}...~..Az...}..
   22f34:	00017f65 00017d79 00017c5d 00017cad     e...y}..]|...|..
   22f44:	00017dd5 00017e35                       .}..5~..

00022f4c <_ZTV6Stream>:
	...
   22f54:	0001462b 00018035 00017a41 00017a55     +F..5...Az..Uz..
   22f64:	0001462b 0001462b 0001462b 2e257830     +F..+F..+F..0x%.
   22f74:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   22f84:	0066766f                                ovf.

00022f88 <_ZTV5Print>:
	...
   22f90:	0001462b 00018035 00017a41 00017a55     +F..5...Az..Uz..
   22fa0:	492f2e2e 492f4332 4f5f4332 63656a62     ../I2C/I2C_Objec
   22fb0:	73694c74 70632e74 00000070 2a2a2a0a     tList.cpp....***
   22fc0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   22fd0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   22fe0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   22ff0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0a2a2a2a     ***************.
   23000:	0000000d 43544c20 33383932 6d654420     .... LTC2983 Dem
   23010:	74736e6f 69746172 50206e6f 72676f72     onstration Progr
   23020:	20206d61 20202020 20202020 20202020     am              
   23030:	20202020 20202020 00000d0a 20202020             ....    
   23040:	20202020 20202020 20202020 20202020                     
   23050:	20202020 20202020 20202020 20202020                     
   23060:	20202020 20202020 20202020 20202020                     
   23070:	20202020 20202020 20202020 00000d0a                 ....
   23080:	69685420 72702073 6172676f 6564206d      This program de
   23090:	736e6f6d 74617274 68207365 7420776f     monstrates how t
   230a0:	6572206f 74206461 6d206568 69746c75     o read the multi
   230b0:	6e65732d 20726f73 20202020 20202020     -sensor         
   230c0:	00000d0a 6d657420 61726570 65727574     .... temperature
   230d0:	61656d20 65727573 746e656d 73797320      measurement sys
   230e0:	2e6d6574 20202020 20202020 20202020     tem.            
   230f0:	20202020 20202020 20202020 20202020                     
   23100:	20202020 00000d0a 74655320 65687420         .... Set the
   23110:	75616220 61722064 74206574 3131206f      baud rate to 11
   23120:	30303235 646e6120 6c657320 20746365     5200 and select 
   23130:	20656874 6c77656e 20656e69 6d726574     the newline term
   23140:	74616e69 202e726f 00000d0a 2a2a2a2a     inator. ....****
   23150:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   23160:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   23170:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   23180:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0d0a2a2a     **************..
   23190:	00000000 6168430a 6c656e6e 6e6f4320     .....Channel Con
   231a0:	20676966 00000000 69676572 72657473     fig ....register
   231b0:	6c617620 203a6575 00000000 6168430a      value: .....Cha
   231c0:	6c656e6e 00000020 65542020 7265706d     nnel ...  Temper
   231d0:	72757461 203d2065 00000000 69442020     ature = ....  Di
   231e0:	74636572 43444120 61657220 676e6964     rect ADC reading
   231f0:	206e6920 203d2056 00000000 6f562020      in V = ....  Vo
   23200:	6761746c 726f2065 73657220 61747369     ltage or resista
   23210:	2065636e 0000203d 41462020 20544c55     nce = ..  FAULT 
   23220:	41544144 00203d20 202d2020 534e4553     DATA = .  - SENS
   23230:	4820524f 20445241 554c4146 00004552     OR HARD FALURE..
   23240:	202d2020 5f434441 44524148 4941465f       - ADC_HARD_FAI
   23250:	4552554c 00000000 202d2020 485f4a43     LURE....  - CJ_H
   23260:	5f445241 4c494146 00455255 202d2020     ARD_FAILURE.  - 
   23270:	535f4a43 5f54464f 4c494146 00455255     CJ_SOFT_FAILURE.
   23280:	202d2020 534e4553 415f524f 45564f42       - SENSOR_ABOVE
   23290:	00000000 202d2020 534e4553 425f524f     ....  - SENSOR_B
   232a0:	574f4c45 00000000 202d2020 5f434441     ELOW....  - ADC_
   232b0:	474e4152 52455f45 00524f52 41564e49     RANGE_ERROR.INVA
   232c0:	2044494c 44414552 20474e49 21212121     LID READING !!!!
   232d0:	00002121 464e4f43 52554749 4f495441     !!..CONFIGURATIO
   232e0:	5245204e 20524f52 21212121 00002121     N ERROR !!!!!!..
   232f0:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   23300:	00632e6f 00776f70                       o.c.pow.

00023308 <npio2_hw>:
   23308:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   23318:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   23328:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   23338:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   23348:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   23358:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   23368:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   23378:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00023388 <two_over_pi>:
   23388:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   23398:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   233a8:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   233b8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   233c8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   233d8:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   233e8:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   233f8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   23408:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   23418:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   23428:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   23438:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   23448:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   23458:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   23468:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   23478:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   23488:	0060e27b 00c08c6b                       {.`.k...

00023490 <PIo2>:
   23490:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   234a0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   234b0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   234c0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

000234d0 <init_jk>:
   234d0:	00000002 00000003 00000004 00000006     ................

000234e0 <TWO52>:
   234e0:	00000000 43300000 00000000 c3300000     ......0C......0.

000234f0 <_global_impure_ptr>:
   234f0:	20000250                                P.. 

000234f4 <__month_lengths>:
   234f4:	0000001f 0000001c 0000001f 0000001e     ................
   23504:	0000001f 0000001e 0000001f 0000001f     ................
   23514:	0000001e 0000001f 0000001e 0000001f     ................
   23524:	0000001f 0000001d 0000001f 0000001e     ................
   23534:	0000001f 0000001e 0000001f 0000001f     ................
   23544:	0000001e 0000001f 0000001e 0000001f     ................
   23554:	00005a54 00544d47 5b303125 392d305e     TZ..GMT.%10[^0-9
   23564:	5d2d2b2c 00006e25 25756825 68253a6e     ,+-]%n..%hu%n:%h
   23574:	3a6e2575 25756825 0000006e 7568254d     u%n:%hu%n...M%hu
   23584:	252e6e25 6e257568 7568252e 00006e25     %n.%hu%n.%hu%n..
   23594:	7568252f 253a6e25 6e257568 7568253a     /%hu%n:%hu%n:%hu
   235a4:	00006e25 73332e25 332e2520 64332573     %n..%.3s %.3s%3d
   235b4:	322e2520 2e253a64 253a6432 2064322e      %.2d:%.2d:%.2d 
   235c4:	000a6425                                %d..

000235c8 <day_name.4727>:
   235c8:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   235d8:	61536972 00000074                       riSat...

000235e0 <mon_name.4728>:
   235e0:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   235f0:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   23600:	63654476 33323130 37363534 42413938     vDec0123456789AB
   23610:	46454443 00000000 33323130 37363534     CDEF....01234567
   23620:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   23630:	0000296c                                l)..

00023634 <blanks.7203>:
   23634:	20202020 20202020 20202020 20202020                     

00023644 <zeroes.7204>:
   23644:	30303030 30303030 30303030 30303030     0000000000000000

00023654 <basefix.6796>:
   23654:	0001000a 00030002 00050004 00070006     ................
   23664:	00090008 000b000a 000d000c 000f000e     ................
   23674:	00000010 00000043 49534f50 00000058     ....C...POSIX...
   23684:	0000002e                                ....

00023688 <_ctype_>:
   23688:	20202000 20202020 28282020 20282828     .         ((((( 
   23698:	20202020 20202020 20202020 20202020                     
   236a8:	10108820 10101010 10101010 10101010      ...............
   236b8:	04040410 04040404 10040404 10101010     ................
   236c8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   236d8:	01010101 01010101 01010101 10101010     ................
   236e8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   236f8:	02020202 02020202 02020202 10101010     ................
   23708:	00000020 00000000 00000000 00000000      ...............
	...

0002378c <_init>:
   2378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2378e:	bf00      	nop
   23790:	bcf8      	pop	{r3, r4, r5, r6, r7}
   23792:	bc08      	pop	{r3}
   23794:	469e      	mov	lr, r3
   23796:	4770      	bx	lr

00023798 <__init_array_start>:
   23798:	0001dc35 	.word	0x0001dc35

0002379c <__frame_dummy_init_array_entry>:
   2379c:	00000289 00000d49 00000f91 00001035     ....I.......5...
   237ac:	00001739 00001fc1 0000227d 000026ad     9.......}"...&..
   237bc:	00002ba9 0000439d 00013b09 00014909     .+...C...;...I..
   237cc:	00014e35 0001537d 0001579d 00015c05     5N..}S...W...\..
   237dc:	00016289 00016b59 000172a5 00017a09     .b..Yk...r...z..
   237ec:	00017fe5 000188a9 000198a5 000199e5     ................

000237fc <_fini>:
   237fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   237fe:	bf00      	nop
   23800:	bcf8      	pop	{r3, r4, r5, r6, r7}
   23802:	bc08      	pop	{r3}
   23804:	469e      	mov	lr, r3
   23806:	4770      	bx	lr

00023808 <__fini_array_start>:
   23808:	00000265 	.word	0x00000265
